
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass.exe --m65c02 --nostart -Wall -q --case-sensitive --line-numbers --verbose-list -Lbuild/mos320.full.lst --output-section mos -o build/320/mos.rom --output-section utils -o build/320/utils.rom --output-section ext -o build/320/ext.rom mos320.s65
; Wed Aug 13 22:58:16 2025

;Line	;Offset	;PC	;Hex		;Monitor	;Source

:1	;******  Processing input file: mos320.s65

1							;-------------------------------------------------------------------------
2							;
3							; I started out trying to match up the names with
4							; https://tobylobster.github.io/mos/mos/index.html - but I didn't keep
5							; up with this after a while. I found it quite time-consuming.
6							;
7							; Maybe a second pass will fix this...
8							;
9							;-------------------------------------------------------------------------
10							;
11							; Reference material, in approx order of preference:
12							;
13							; MasRef - Master Reference Manual (pretty complete, up to date,
14							; official)
15							;
16							; AUG - Advanced User Guide (very complete for what it covers: model B
17							; hardware, OS 1.20)
18							;
19							; NAUG - New Advanced User Guide (has some Master info, but not
20							; as thorough as AUG on some topics)
21							;
22							; AdvRef - Advanced Reference Manual for the BBC Master (has the odd
23							; useful item)
24							;
25							; Tube - Tube Application Note (Acorn App Note 004)
26							;
27							;-------------------------------------------------------------------------
28							;
29							; Some notes:
30							;
31							; . there are some parseFromString/parseFromCommandLine pairs of
32							; routines - the FromString ones indicate error silently (e.g., by
33							; returning with C=0), and the FromCommandLine ones issue a BRK if
34							; there's a problem
35							;
36							;-------------------------------------------------------------------------

38							                .include "src/hardware.s65"

:2	;******  Processing file: src/hardware.s65

1							;-------------------------------------------------------------------------

3							                .virtual $fe00

5	.fe00						CRTC: .block

7							                .virtual 8
8	.0008						R8: .block
9	=$00						normalSync=%00000000
10	=$01						interlaceSync=%00000001
11	=$02						normalSyncAlt=%00000010
12	=$03						interlaceSyncAndVideo=%00000011

14	=0						displayDelay0=0<<4
15	=16						displayDelay1=1<<4
16	=32						displayDelay2=2<<4
17	=48						displayDisable=3<<4

19	=0						cursorDelay0=0<<6
20	=64						cursorDelay1=1<<6
21	=128						cursorDelay2=2<<6
22	=192						cursorDisable=3<<6
23							                .endblock
24							                .endvirtual

26							                .virtual 10
27	.000a						R10: .block
28	=$40						blink=$40
29	=$20						slowBlink=$20
30							                .endblock
31							                .endvirtual

33							                .endblock

35							                .endvirtual

37							;-------------------------------------------------------------------------
38							; ACIA=$fe08
39	=$fe10						SERPROC=$fe10
40							;HADC=$fe18
42	=$fee0						TUBE=$fee0
44	=$fe30						ROMSEL=$fe30
45							;ACCCON=$fe34
46							                .virtual $fe20
47	.fe20						VCONTROL: .block
48	=$01						flash=$01
49	=$02						isTeletext=$02
50	=$00						shift2MHz=$00
51	=$04						shift4MHz=$04
52	=$08						shift8MHz=$08
53	=$0c						shift16MHz=$0c
54	=$00						crtc1MHz=$00
55	=$10						crtc2MHz=$10
56	=$00						cursor____=$00
57	=$20						cursor__XX=$20
58	=$40						cursor_X__=$40
59	=$60						cursor_XXX=$60
60	=$80						cursorX___=$80
61	=$a0						cursorX_XX=$a0
62	=$c0						cursorXX__=$c0
63	=$e0						cursorXXXX=$e0
64							                .endblock
65							                .endvirtual
66	=$fe21						VPALETTE=$fe21

68							;-------------------------------------------------------------------------

70							                .virtual $fe08
71	.fe08						ACIA: .block

73	.fe08						control: .block
74	=0						counterDivide1=0<<0
75	=1						counterDivide16=1<<0
76	=2						counterDivide64=2<<0
77	=3						reset=3<<0

79	=0						word7DataEventParity2Stop=0<<2
80	=4						word7DataOddParity2Stop=1<<2
81	=8						word7DataEvenParity1Stop=2<<2
82	=12						word7DataOddParity1Stop=3<<2
83	=16						word8DataNoParity2Stop=4<<2
84	=20						word8DataNoParity1Stop=5<<2
85	=24						word8DataEvenParity1Stop=6<<2
86	=28						word8DataOddParity1Stop=7<<2

88	=0						rtsLowTXInterruptDisabled=0<<5
89	=32						rtsLowTXInterruptEnabled=1<<5
90	=64						rtsHighTXInterruptDisabled=2<<5
91	=96						rtsLowBreakTXInterruptDisabled=3<<5

93	=0						rtsRXInterruptDisabled=0<<7
94	=128						rtsRTSInterruptEnabled=1<<7

96							                .endblock
97	.fe08						status: .block
98							                .endblock

100	>fe08						                .fill 1
101	.fe09						tdr:
102	.fe09						rdr:
103	>fe09						                .fill 1
104							                .endblock
105							                .endvirtual

107							;-------------------------------------------------------------------------

109							                .virtual $fe18
110	.fe18						HADC: .block
111	.fe18						status: .block
112							                .endblock
113	.fe18						latch: .block
114							                .endblock
115	>fe18						                .fill 1

117							                .endblock
118							                .endvirtual

120							;-------------------------------------------------------------------------

122							                .virtual $fe34
123	.fe34						ACCCON: .block
124							;D=1 = display shadow RAM; D=0 = display main RAM
125	=$01						D=$01

127							;E=1 = VDU code ($c000-$dfff in MOS ROM) accesses shadow RAM; E=0 =
128							;VDU code accesses main RAM
129	=$02						E=$02

131							;X=1 = shadow RAM at $3000; X=0 = main RAM at $3000
132	=$04						X=$04

134							;Y=1 = HAZEL at $c000; Y=0 = MOS ROM at $c000
135	=$08						Y=$08

137							;ITU=1 = access internal Tube; ITU=0 = access external Tube
138	=$10						ITU=$10

140							;IFJ=1 = $fc00...$fdff accesses cartridge; IFJ=0 = $fc00...$fdff
141							;accesses 1MHz bus
142	=$20						IFJ=$20

144							; TST=1 = read MOS ROM at $fc00...$feff; TST=0 = read I/O at
145							; $fc00...$feff
146	=$40						TST=$40

148							;IRR=1 = IRQ to CPU
149	=$80						IRR=$80
150							                .bend
151							                .endv

153							                VIA: .struct                    ;
154	.0000						orb:
155	.0000						irb:
156	>0000						                .fill 1         ;0
157	.0001						ora:
158	.0001						ira:
159	>0001						                .fill 1         ;1
160	.0002						ddrb:
161	>0002						                .fill 1         ;2
162	.0003						ddra:
163	>0003						                .fill 1         ;3
164	.0004						t1cL:
165	>0004						                .fill 1         ;4
166	.0005						t1cH:
167	>0005						                .fill 1         ;5
168	.0006						t1lL:
169	>0006						                .fill 1         ;6
170	.0007						t1lH:
171	>0007						                .fill 1         ;7
172	.0008						t2cL:
173	>0008						                .fill 1         ;8
174	.0009						t2cH:
175	>0009						                .fill 1         ;9
176	.000a						sr:
177	>000a						                .fill 1         ;10
178	.000b						acr: .block
179	=0						t1OneShot=0<<6
180	=64						t1Continuous=1<<6
181	=128						t1OneShotPB7=2<<6
182	=192						t1ContinuousPB7=3<<6

184	=0						t2Timer=0<<5
185	=32						t2CountPB6=1<<5

187	=0						srDisabled=0<<2
188	=4						srShiftInT2=1<<2
189	=8						srShiftInVIAClock=2<<2
190	=12						srShiftInExtClock=3<<2
191	=16						srShiftOutT2FreeRun=4<<2
192	=20						srShiftOutT2=5<<2
193	=24						srShiftOutVIAClock=6<<2
194	=28						srShiftOutExtClock=7<<2

196	=0						pbLatchDisabled=0<<1
197	=2						pbLatchEnabled=1<<1

199	=0						paLatchDisabled=0<<0
200	=1						paLatchEnabled=1<<0

202	>000b						                .fill 1         ;11
203							                .endblock
204	.000c						pcr: .block

206	=0						cb2InputNegativeActiveEdge=0<<5
207	=32						cb2IndependentInterruptInputNegativeEdge=1<<5
208	=64						cb2InputPositiveEdge=2<<5
209	=96						cb2IndependentInterruptInputPositiveEdge=3<<5
210	=128						cb2HandshakeOutput=4<<5
211	=160						cb2PulseOutput=5<<5
212	=192						cb2LowOutput=6<<5
213	=224						cb2HighOutput=7<<5

215	=0						cb1NegativeActiveEdge=0<<4
216	=16						cb1PositiveActiveEdge=1<<4

218	=0						ca2InputNegativeActiveEdge=0<<1
219	=2						ca2IndependentInterruptInputNegativeEdge=1<<1
220	=4						ca2InputPositiveEdge=2<<1
221	=6						ca2IndependentInterruptInputPositiveEdge=3<<1
222	=8						ca2HandshakeOutput=4<<1
223	=10						ca2PulseOutput=5<<1
224	=12						ca2LowOutput=6<<1
225	=14						ca2HighOutput=7<<1

227	=0						ca1NegativeActiveEdge=0<<0
228	=1						ca1PositiveActiveEdge=1<<0

230	>000c						                .fill 1         ;12
231							                .endblock
232	.000d						ifr:
233	>000d						                .fill 1         ;13
234	.000e						ier:
235	>000e						                .fill 1         ;14
236	.000f						oraNoHandshake:
237	.000f						iraNoHandshake:
238	>000f						                .fill 1         ;15

240	.0010						irq: .block
241	=1						ca2=1
242	=2						ca1=2
243	=4						sr=4
244	=8						cb2=8
245	=16						cb1=16
246	=32						t2=32
247	=64						t1=64
248							                .endblock
249							                .ends

251							; System VIA port B bits for Master Compact
252	=$20						i2cClock=$20
253	=$10						i2cData=$10

255							; PCD8572 command codes

257							;   7   6   5   4   3   2   1   0
258							; +---+---+---+---+---+---+---+---+
259							; | 1 | 0 | 1 | 0 |A2 |A1 |A0 |RnW|
260							; +---+---+---+---+---+---+---+---+

262	=$a1						eepromRead=$a1
263	=$a0						eepromWrite=$a0
264							                                .virtual $fe40
265	.fe40						systemVIA: .dstruct VIA
154	.fe40						orb:
155	.fe40						irb:
156	>fe40						                .fill 1         ;0
157	.fe41						ora:
158	.fe41						ira:
159	>fe41						                .fill 1         ;1
160	.fe42						ddrb:
161	>fe42						                .fill 1         ;2
162	.fe43						ddra:
163	>fe43						                .fill 1         ;3
164	.fe44						t1cL:
165	>fe44						                .fill 1         ;4
166	.fe45						t1cH:
167	>fe45						                .fill 1         ;5
168	.fe46						t1lL:
169	>fe46						                .fill 1         ;6
170	.fe47						t1lH:
171	>fe47						                .fill 1         ;7
172	.fe48						t2cL:
173	>fe48						                .fill 1         ;8
174	.fe49						t2cH:
175	>fe49						                .fill 1         ;9
176	.fe4a						sr:
177	>fe4a						                .fill 1         ;10
178	.fe4b						acr: .block
179	=0						t1OneShot=0<<6
180	=64						t1Continuous=1<<6
181	=128						t1OneShotPB7=2<<6
182	=192						t1ContinuousPB7=3<<6

184	=0						t2Timer=0<<5
185	=32						t2CountPB6=1<<5

187	=0						srDisabled=0<<2
188	=4						srShiftInT2=1<<2
189	=8						srShiftInVIAClock=2<<2
190	=12						srShiftInExtClock=3<<2
191	=16						srShiftOutT2FreeRun=4<<2
192	=20						srShiftOutT2=5<<2
193	=24						srShiftOutVIAClock=6<<2
194	=28						srShiftOutExtClock=7<<2

196	=0						pbLatchDisabled=0<<1
197	=2						pbLatchEnabled=1<<1

199	=0						paLatchDisabled=0<<0
200	=1						paLatchEnabled=1<<0

202	>fe4b						                .fill 1         ;11
203							                .endblock
204	.fe4c						pcr: .block

206	=0						cb2InputNegativeActiveEdge=0<<5
207	=32						cb2IndependentInterruptInputNegativeEdge=1<<5
208	=64						cb2InputPositiveEdge=2<<5
209	=96						cb2IndependentInterruptInputPositiveEdge=3<<5
210	=128						cb2HandshakeOutput=4<<5
211	=160						cb2PulseOutput=5<<5
212	=192						cb2LowOutput=6<<5
213	=224						cb2HighOutput=7<<5

215	=0						cb1NegativeActiveEdge=0<<4
216	=16						cb1PositiveActiveEdge=1<<4

218	=0						ca2InputNegativeActiveEdge=0<<1
219	=2						ca2IndependentInterruptInputNegativeEdge=1<<1
220	=4						ca2InputPositiveEdge=2<<1
221	=6						ca2IndependentInterruptInputPositiveEdge=3<<1
222	=8						ca2HandshakeOutput=4<<1
223	=10						ca2PulseOutput=5<<1
224	=12						ca2LowOutput=6<<1
225	=14						ca2HighOutput=7<<1

227	=0						ca1NegativeActiveEdge=0<<0
228	=1						ca1PositiveActiveEdge=1<<0

230	>fe4c						                .fill 1         ;12
231							                .endblock
232	.fe4d						ifr:
233	>fe4d						                .fill 1         ;13
234	.fe4e						ier:
235	>fe4e						                .fill 1         ;14
236	.fe4f						oraNoHandshake:
237	.fe4f						iraNoHandshake:
238	>fe4f						                .fill 1         ;15

240	.fe50						irq: .block
241	=1						ca2=1
242	=2						ca1=2
243	=4						sr=4
244	=8						cb2=8
245	=16						cb1=16
246	=32						t2=32
247	=64						t1=64
248							                .endblock
249							                .ends
266							                .endv

268							                .virtual $fe60
269	.fe60						userVIA: .dstruct VIA
154	.fe60						orb:
155	.fe60						irb:
156	>fe60						                .fill 1         ;0
157	.fe61						ora:
158	.fe61						ira:
159	>fe61						                .fill 1         ;1
160	.fe62						ddrb:
161	>fe62						                .fill 1         ;2
162	.fe63						ddra:
163	>fe63						                .fill 1         ;3
164	.fe64						t1cL:
165	>fe64						                .fill 1         ;4
166	.fe65						t1cH:
167	>fe65						                .fill 1         ;5
168	.fe66						t1lL:
169	>fe66						                .fill 1         ;6
170	.fe67						t1lH:
171	>fe67						                .fill 1         ;7
172	.fe68						t2cL:
173	>fe68						                .fill 1         ;8
174	.fe69						t2cH:
175	>fe69						                .fill 1         ;9
176	.fe6a						sr:
177	>fe6a						                .fill 1         ;10
178	.fe6b						acr: .block
179	=0						t1OneShot=0<<6
180	=64						t1Continuous=1<<6
181	=128						t1OneShotPB7=2<<6
182	=192						t1ContinuousPB7=3<<6

184	=0						t2Timer=0<<5
185	=32						t2CountPB6=1<<5

187	=0						srDisabled=0<<2
188	=4						srShiftInT2=1<<2
189	=8						srShiftInVIAClock=2<<2
190	=12						srShiftInExtClock=3<<2
191	=16						srShiftOutT2FreeRun=4<<2
192	=20						srShiftOutT2=5<<2
193	=24						srShiftOutVIAClock=6<<2
194	=28						srShiftOutExtClock=7<<2

196	=0						pbLatchDisabled=0<<1
197	=2						pbLatchEnabled=1<<1

199	=0						paLatchDisabled=0<<0
200	=1						paLatchEnabled=1<<0

202	>fe6b						                .fill 1         ;11
203							                .endblock
204	.fe6c						pcr: .block

206	=0						cb2InputNegativeActiveEdge=0<<5
207	=32						cb2IndependentInterruptInputNegativeEdge=1<<5
208	=64						cb2InputPositiveEdge=2<<5
209	=96						cb2IndependentInterruptInputPositiveEdge=3<<5
210	=128						cb2HandshakeOutput=4<<5
211	=160						cb2PulseOutput=5<<5
212	=192						cb2LowOutput=6<<5
213	=224						cb2HighOutput=7<<5

215	=0						cb1NegativeActiveEdge=0<<4
216	=16						cb1PositiveActiveEdge=1<<4

218	=0						ca2InputNegativeActiveEdge=0<<1
219	=2						ca2IndependentInterruptInputNegativeEdge=1<<1
220	=4						ca2InputPositiveEdge=2<<1
221	=6						ca2IndependentInterruptInputPositiveEdge=3<<1
222	=8						ca2HandshakeOutput=4<<1
223	=10						ca2PulseOutput=5<<1
224	=12						ca2LowOutput=6<<1
225	=14						ca2HighOutput=7<<1

227	=0						ca1NegativeActiveEdge=0<<0
228	=1						ca1PositiveActiveEdge=1<<0

230	>fe6c						                .fill 1         ;12
231							                .endblock
232	.fe6d						ifr:
233	>fe6d						                .fill 1         ;13
234	.fe6e						ier:
235	>fe6e						                .fill 1         ;14
236	.fe6f						oraNoHandshake:
237	.fe6f						iraNoHandshake:
238	>fe6f						                .fill 1         ;15

240	.fe70						irq: .block
241	=1						ca2=1
242	=2						ca1=2
243	=4						sr=4
244	=8						cb2=8
245	=16						cb1=16
246	=32						t2=32
247	=64						t1=64
248							                .endblock
249							                .ends
270							                .endv

273							                .virtual $fee0
274	.fee0						tube: .block
275							; Parasite to Host: Carries the OSWRCH call. Data register is a FIFO
276							; that can handle a VDU command length (10 bytes).
277							;
278							; Host to Parasite: There is a 1 byte buffer. It is used to generate
279							; IRQ's in the parasite from events in the host.

281							; write/read (clears IRQ)
282	.fee0						status1: .block
283							; [Tube p13]
284	=$01						Q=$01                           ;enable HIRQ from R4
285	=$02						I=$02                           ;enable PIRQ from R1
286	=$04						J=$04                           ;enable PIRQ from R3
287	=$08						M=$08                           ;enable PNMI from R3
288	=$10						V=$10                           ;2-byte R3
289	=$20						P=$20                           ;activate PRST
290	=$40						T=$40                           ;clear all Tube registers
291	=$80						S=$80                           ;set/clear bits
292							                .bend
293	>fee0						                .fill 1

295							; bit 7 - data available/IRQ
296							; bit 6 - not full
297	.fee1						data1:
298	>fee1						                .fill 1

300							; Used to implement OS calls that take a long time or that cannot
301							; interrupt Host tasks. The parasite passes a byte describing the
302							; required task. The two processors then exchange data until the task
303							; is complete. OS calls handled through this register include: OSRDCH,
304							; OSCLI, OSBYTE, OSWORD, OSBPUT, OSBGET, OSFIND, OSARGS, OSFILE,
305							; OSGBPB.

307							; write/read
308	.fee2						status2:
309	>fee2						                .fill 1

311							; bit 7 - data available
312							; bit 6 - not full
313	.fee3						data2:
314	>fee3						                .fill 1

316							; Used for the background task of fast data transfer between the two
317							; processors.

319							; write/read
320	.fee4						status3:
321	>fee4						                .fill 1

323							; bit 7 - data available/NMI
324							; bit 6 - not full
325	.fee5						data3:
326	>fee5						                .fill 1

328							; Used as the control channel for block transfers going through
329							; Register 3, and also the transfer register for error strings from
330							; host to parasite. In both cases, the host interrupts the parasite by
331							; placing a byte into the Register. In the former case it is a byte
332							; describing the required action, in the latter it is an error code.

334							; write (sets IRQ)/read (clears IRQ)
335	.fee6						status4:
336	>fee6						                .fill 1

338							; bit 7 - data available/IRQ
339							; bit 6 - not full/IRQ
340	.fee7						data4:
341	>fee7						                .fill 1
342							                .bend
343							                .endvirtual

346							RTC: .struct
347	>0000						seconds: .fill 1
348	>0001						secondsAlarm: .fill 1
349	>0002						minutes: .fill 1
350	>0003						minutesAlarm: .fill 1
351	>0004						hours: .fill 1
352	>0005						hoursAlarm: .fill 1
353	>0006						dayOfWeek: .fill 1
354	>0007						dayOfMonth: .fill 1
355	>0008						month: .fill 1
356	>0009						year: .fill 1
357	.000a						a: .block
358	=7						dvMask=7
359	=4						dvShift=4
360	=0						dv4194304Hz=0<<dvShift
361	=16						dv1048576Hz=1<<dvShift
362	=32						dv32768Hz=2<<dvShift
363	>000a						                .fill 1
364							                .endblock
365	.000b						b: .block
366	=$80						set=$80
367	=$02						_24h=$02
368	=$01						dse=$01
369	>000b						                .fill 1
370							                .endblock
371	.000c						c: .block
372	=$10						uf=$10
373	>000c						                .fill 1
374							                .endblock
375	.000d						d: .block
376	>000d						                .fill 1
377							                .endblock
378	=50						ram_size=50
379	>000e						ram: .fill ram_size
380							                .endstruct

:1	;******  Return to file: mos320.s65

39							                .include "src/mos_workspace.s65"

:3	;******  Processing file: src/mos_workspace.s65

1							;-------------------------------------------------------------------------
2							;
3							; Disorganized jumble of constants. They'll get tidied up at some
4							; point... promise...
5							;
6							;-------------------------------------------------------------------------

8							; The version constant is not very well named: it should really be
9							; something like "acornVersion". It refers to one of the official MOS
10							; versions released for Acorn-branded hardware, and can have one of
11							; the following 6 specific values:
12							;
13							; version=320 - MOS 3.20
14							; version=350 - MOS 3.50
15							; version=400 - MOS 4.00
16							; version=500 - MOS 5.00
17							; version=510 - MOS 5.10
18							; version=511 - MOS 5.11
19							;
20							; (Strictly speaking, these are not numeric, but there's a few
21							; instances of version>=n where this coincidentally makes sense. The
22							; 5.xx series follow on from one another, some of the 4.00 changes are
23							; in 5.xx too, and some of the 4.00 changes that are in 5.xx also made
24							; it into 3.50 as well.)

28							; All other versions are considered to be variants of one of the six
29							; official versions, as per the variant flags below. These variant
30							; flags are applicable to the stated versions only, and may or may not
31							; be separable from the various version-dependent .if/.endif
32							; constructs for that version. If they're changed from these defaults
33							; for any other version, the output may not make sense.
34							;
35							; Over time I intend to (try to) turn these into feature flags,
36							; according to the actual features they control.

38							                .weak
39							                ; Set if building Olivetti MOS, a variant of 5.10.
40	=false						olivetti=false

42							                ; Set if building CFA3000 MOS, a variant of 3.50.
43	=false						CFA3000=false

45							                ; Set if building Autocue 1500 MOS, a variant of 5.11.
46	=false						autocue=false

48							                ; Set if building MOS 3.29 (Acorn FinMOS), a variant
49							                ; of 3.50.
50	=false						finmos329=false

52							                ; Clear if stripping out the terminal ROM. Applicable
53							                ; to 3.20 or 3.50.
54	=true						includeTerminalROM=true

56							                ; Set if building any of the refresh versions.
57	=false						refreshVersion=false
58							                .endweak

60							;-------------------------------------------------------------------------

62							; These feature flags can be set freely by the main driver file.

64							                .weak

66							                ; If true, include *X. Not clear what this command
67							                ; actually, does, but it's in the original ROMs, so
68							                ; there has to be the option...
69	=true						includeStarX=version<500

71							                ; For some reason, *TAPE and *MOTOR have lower-case
72							                ; command name entries in MOS 4.00.
73	="TAPE"						tapeCommandString=version==400?"tape":"TAPE"
74	="MOTOR"					motorCommandString=version==400?"motor":"MOTOR"

76							                ; If false, reproduce the OSBYTE $6B/$6C bug present
77							                ; in MOS versions prior to 3.50.
78	=false						correctOSBYTE6B6C=version==350

80							                ; Assumed century for RTC reading purposes.
81	=$19						assumedRTCCenturyBCD=$19

83							                ; If false, reproduce the relocation issue present in
84							                ; MOS 3.50. Applies to MOS 3.50 only.
85	=false						correctlyHandleMissingTubeRelocationBitmap=false

87							                ; If true, improve Tube relocation speed.
88	=false						fasterTubeRelocation=false

90							                ; If true, insert a few OSWRCH code tweaks to improve
91							                ; things. Priority given to Mode 0/3/4/6/7 when
92							                ; outputting to VDU only.
93							                ;
94							                ; This means more code in the MOS area.
95	=false						fasterOSWRCH=false

97							                ; If true, put Tube BRK handler and idle loop in main
98							                ; RAM rather than zero page.
99							                ;
100							                ; It appears to be in zero page to save 1 cycle in
101							                ; some self-modifying code in the idle loop, for which
102							                ; the 65c02 jmp (abs,x) is a valid replacement that's
103							                ; actually quicker.
104							                ;
105							                ; The Tube language ROM relocation code (which does
106							                ; benefit from being in zero page) pushes the total
107							                ; zero page usage of the Tube host code well past the
108							                ; MOS 3.50 value, a needless source of potential
109							                ; incompatibility.
110	=false						tubeHostBrkAndIdleInMainRAM=false

112							                .endweak

114							;-------------------------------------------------------------------------

116							; These feature flags are offered on a best-effort basis. They're more
117							; intended for readability than for use as toggles.

119							                .weak

121							                ; If true, include Tube support.
123	=true						includeTubeSupport=true

131	=false						useTableDrivenConfigure=false

134							                ; If true, put 750-odd bytes of sound code in the ext
135							                ; ROM rather than the MOS ROM.
136							                ;
137							                ; (MOS 5.00+ has some code for having this stuff in
138							                ; the utils ROM, and MOS 3.50 has some code for having
139							                ; this stuff in the ext ROM. The MOS 3.50 code is a
140							                ; bit tighter.)
144	=false						soundStuffInExtROM=false

147							                .endweak

149							;-------------------------------------------------------------------------

151							; Some combinations are impossible. Sorry!
152							;
153							; (The code deliberately doesn't try to work around this. The driver
154							; files must avoid these cases.)

159							                ; Table-driven configuration takes up fewer bytes, so
160							                ; no point trying to switch it off for builds where it
161							                ; would be on.

164							;-------------------------------------------------------------------------

166							beword .macro value
169							                .endm

172							;-------------------------------------------------------------------------

174	=$400						tubeHostAddr=$400

205							;-------------------------------------------------------------------------

207							                ; Force word operand - a few instances of this,
208							                ; presumably due to limitations in 1980s assemblers.
209							                ;
210							                ; Refresh versions can use an 8-bit operand for time
211							                ; and space savings.

213							forcew: .macro instr,oper
219							                .endmacro

221							;-------------------------------------------------------------------------

223							                .virtual $b0
224	.00b0						sramTransferPointers: .block
225	>00b0						src: .fill 2
226	>00b2						dest: .fill 2
227							                .endblock
228							                .endvirtual

230	=$a8						osargsBuffer=$a8                ;4-byte ZP buffer for use with OSARGS
231	=$b8						printMessageAddress=$b8

233							                .virtual $bb
234	.00bb						tapeCurrentOptionsByte: .block
235							                .endblock
236							                .endvirtual

238							                .virtual $f2
239	.00f2						fsStatusByte: .block
240	=$01						inputFileOpen=$01
241	=$02						outputFileOpen=$02
242	=$08						catStatus=$08
243	=$40						eofReached=$40
244	=$80						eofWarningGiven=$80
245							                .endblock
246							                .endvirtual

248							                .virtual $e4
249	.00e4						stringInputOptions: .block
250	=$80						doubleQuotes=$80
251	=$40						spaceNotATerminator=$40
252	=$01						goodString=$01
253							                .endblock
254							                .endvirtual
255	=$e5						stringInputPlingFlag=$e5        ;bit 7 set if last char was '!'
256	=$e6						readCharacterTimedFlag=$e6
257	=$e6						commandLineY=$e6
258	=$e7						autoRepeatCountdownTimer=$e7
259	=$eb						tapeCritical=$eb
260	=$ec						lastKeyPressedInternal=$ec
261	=$ed						firstKeyPressedInternal=$ed
262	=$f2						stringInputBufferAddress=$f2    ;word

264							;-------------------------------------------------------------------------

266	=$80						romTypeHasServiceEntry=$80
267	=$40						romTypeHasLanguageEntry=$40
268	=$20						romTypeHasTubeRelocationAddress=$20
269	=$02						romType6502=$02

271							;-------------------------------------------------------------------------

273	=$01						romServiceCallAbsoluteWorkspaceClaim=$01 ; memory used only when ROM is paged in
274	=$02						romServiceCallPrivateWorkspaceClaim=$02 ; memory used even when ROM is not paged in
275	=$03						romServiceCallAutoBoot=$03              ;
276	=$04						romServiceCallUnrecognisedCommand=$04   ; star command not recognised
277	=$05						romServiceCallUnrecognisedInterrupt=$05 ;
278	=$06						romServiceCallBreakInstruction=$06      ;
279	=$07						romServiceCallUnrecognisedOSBYTE=$07    ;
280	=$08						romServiceCallUnrecognisedOSWORD=$08    ;
281	=$09						romServiceCallHelp=$09                  ;
282	=$0a						romServiceCallClaimStaticWorkspace=$0A ; (Issued by paged ROMs, not the OS)
283	=$0b						romServiceCallNMIRelease=$0B    ; (Issued by paged ROMs, not the OS)
284	=$0c						romServiceCallNMIClaim=$0C      ; (Issued by paged ROMs, not the OS)
285	=$0d						romServiceCallROMFilingSystemInitialize=$0D    ;
286	=$0e						romServiceCallROMFilingSystemByteGet=$0E    ;
287	=$0f						romServiceCallVectorsClaimed=$0F    ; Used when a filing system starts
288	=$10						romServiceCallSpoolExecClosureWarning=$10    ;
289							;romServiceCallFontImplosionExplosionWarning=$11    ;
290	=$12						romServiceCallInitialiseFilingSystem=$12    ; (Issued from paged ROMs, not the OS)
291	=$15						romServiceCallPollingInterrupt=$15
292	=$18						romServiceCallReserved=$18
293	=$21						romServiceCallAbsoluteHAZELWorkspaceClaim=$21
294	=$22						romServiceCallPrivateHAZELWorkspaceClam=$22
295	=$23						romServiceCallTopOfHAZELWorkspace=$23
296	=$24						romServiceCallCountDynamicHAZELWorkspace=$24
297	=$25						romServiceCallRequestFSInfo=$25
298	=$26						romServiceCallCloseAllOpenFiles=$26
299	=$27						romServiceCallInformReset=$27
300	=$28						romServiceCallUnknownCONFIG=$28
301	=$29						romServiceCallUnknownSTATUS=$29
302	=$2a						romServiceCallLanguageChange=$2a
303	=$2c						romServiceCallCompactJoystick=$2c
304	=$30						romServiceCall30=$30
305	=$fe						romServiceCallTubeSystemPostInitialisation=$FE    ;
306	=$ff						romServiceCallTubeMainInitialisation=$FF    ;

308							;-------------------------------------------------------------------------

310	=0						fsNone=0
311	=1						fs1200BaudTape=1
312	=2						fs300BaudTape=2
313	=3						fsROM=3

315							; max FS number for all tape/ROM FS types
316	=3						fsTapeOrROMMax=3

318							;-------------------------------------------------------------------------

320							; [MasRef D.2-24]

322	=0						eventOutputBufferEmpty=0
323	=1						eventInputBufferFull=1
324	=2						eventCharacterEnteringBuffer=2
325	=3						eventADCConversionComplete=3
326	=4						eventStartOfVerticalSync=4
327	=5						eventIntervalTimerCrossingZero=5
328	=6						eventESCAPEPressed=6
329	=7						eventRS423Error=7
330	=8						eventNetworkError=8
331	=9						eventUser=9
332	=9						eventMax=9

334							;-------------------------------------------------------------------------

336							; [MasRef D.2-27]

338							; Input buffers
339	=0						bufferKeyboard=0
340	=1						bufferRS423Input=1

342							; Output buffers
343	=2						bufferFirstOutput=2
344	=2						bufferRS423Output=2
345	=3						bufferPrinter=3
346	=4						bufferSoundChannel0=4
347	=5						bufferSoundChannel1=5
348	=6						bufferSoundChannel2=6
349	=7						bufferSoundChannel3=7
350							; What's buffer 8? Previously speech on OS 1.20. There's indices
351							; allocated for it...
352	=8						bufferMax=8

355	=$03e0						bufferKeyboardAddress=$03e0
356	=32						bufferKeyboardSize=32
357	=$0a00						bufferRS423InputAddress=$0a00
358	=256						bufferRS423InputSize=256
359	=$0900						bufferRS423OutputAddress=$0900
360	=192						bufferRS423OutputSize=192
361	=$0880						bufferPrinterAddress=$0880
362	=64						bufferPrinterSize=64
363	=$0840						bufferSoundChannel0Address=$0840
364	=16						bufferSoundChannel0Size=16
365	=$0850						bufferSoundChannel1Address=$0850
366	=16						bufferSoundChannel1Size=16
367	=$0860						bufferSoundChannel2Address=$0860
368	=16						bufferSoundChannel2Size=16
369	=$0870						bufferSoundChannel3Address=$0870
370	=16						bufferSoundChannel3Size=16
371	=$09c0						buffer8Address=$09c0
372	=64						buffer8Size=64

376							; BufferInfo: .function bufferAddress,bufferSizeByte
377							;                 .endfunction (bufferAddress,256-bufferSizeByte)

379							; ; buffer info is (base address,size)
380							;  _:=[]
381							; _..=[BufferInfo($0300,32)];bufferKeyboard=0
382							; _..=[BufferInfo($0a00,256)];bufferRS423Input=1
383							; _..=[BufferInfo($08c0,192)];bufferRS423Output=2
384							; _..=[BufferInfo($07c0,64)];bufferPrinter=3
385							; _..=[BufferInfo($0750,16)];bufferSoundChannel0=4
386							; _..=[BufferInfo($0760,16)];bufferSoundChannel1=5
387							; _..=[BufferInfo($0770,16)];bufferSoundChannel2=6
388							; _..=[BufferInfo($0780,16)];bufferSoundChannel3=7
389							; _..=[BufferInfo($0900,64)];What's buffer 8?

391							;-------------------------------------------------------------------------

393							; [MasRef C.5-5]

395	=0						printerDriverTypeSink=0
396	=1						printerDriverTypeParallel=1
397	=2						printerDriverTypeSerial=2
398	=3						printerDriverTypeUser=3
399	=4						printerDriverTypeNetwork=4

401							; AUG p259

403	=0						printerDriverPoll=0
404	=1						printerDriverActivate=1
405	=2						printerDriverVDU2=2
406	=3						printerDriverVDU3=3
407	=5						printerDriverFX5=5

409	=10						printerDriverFX3=10             ;undocumented???

411							;-------------------------------------------------------------------------

413							; AUG p261

415	=0						netPrinterRequest0=0
416	=1						netPrinterRequest1=1
417	=2						netPrinterRequest2=2
418	=3						netPrinterRequest3=3
419	=4						netWriteCharacterAttempted=4
420	=5						netPrinterRequest5=5
421	=6						netReadCharacterAttempted=6
422	=7						netOSBYTEAttempted=7
423	=8						netOSWORDAttempted=8
424	=13						netOSWORD0Complete=13

426							;-------------------------------------------------------------------------

428							; OSFIND open constants
429	=$40						findOpenForRead=$40
430	=$80						findOpenForWrite=$80

432	=0						fscOPT=0
433	=1						fscCheckEOF=1
434	=2						fscStarSlash=2
435	=3						fscUnknownCommand=3
436	=4						fscStarRUN=4
437	=5						fscStarCAT=5
438	=6						fscNewFS=6
439	=7						fscFileHandleRange=7
440	=8						fscStarCommand=8
441	=9						fscStarEX=9
442	=10						fscStarINFO=10
443	=11						fscRUNLibrary=11

445							; NAUG mentions this. But it doesn't appear to
446							; actually exist in the code.
447							;
448							; Maybe it's present in MOS 3.50 or later?
449	=12						fscRENAME=12

451	=1						gbpbPutBytesNewPTR=1            ;[AUG p340]
452	=2						gbpbPutBytesCurrentPTR=2        ;[AUG p340]
453	=3						gbpbGetBytesNewPTR=3            ;[AUG p341]
454	=4						gbpbGetBytesCurrentPTR=4        ;[AUG p341]
455	=5						gbpbGetMediaMetadata=5          ;[AUG p341]
456	=6						gbpbGetCurrentDevice=6          ;[AUG p341]
457	=7						gbpbGetLibraryDevice=7          ;[AUG p341]
458	=8						gbpbReadFileNames=8             ;[AUG p341]

460							OSGBPBParameterBlock: .struct
461	.0000						handle:
462	>0000						                .fill 1
463	.0001						address:
464	>0001						                .fill 4
465	.0005						count:
466	>0005						                .fill 4
467	.0009						ptr:
468	>0009						                .fill 4
469							                .endstruct

471	=0						argsGetFS=0                     ;[AUG p337]
472	=1						argsGetCommandLine=1            ;[AUG p338]
473	=2						argsCheckANFS=2                 ;https://beebwiki.mdfs.net/OSARGS
474	=3						argsGetLibFS=3                  ;
475	=$ff						argsFlushBuffers=$ff            ;[AUG p338]

477	=0						argsFileGetPTR=0
478	=1						argsFileSetPTR=1
479	=2						argsFileGetEXT=2
480	=$ff						argsFileFlush=$ff

482	=0						fileSave=0                      ;[AUG p336]
483	=1						fileWriteMetadata=1             ;[AUG p336]
484	=2						fileWriteLoadAddress=2          ;[AUG p336]
485	=3						fileWriteExecAddress=3          ;[AUG p336]
486	=4						fileWritettributes=4            ;[AUG p336]
487	=5						fileReadMetadata=5              ;[AUG p336]
488	=6						fileDelete=6                    ;[AUG p336]
489	=$ff						fileLoad=$ff                    ;[AUG p336]

491							OSFILEParameterBlock: .struct
492	.0000						fileName:
493	>0000						                .fill 2
494	.0002						addresses:
495	.0002						load:
496	>0002						                .fill 4
497	.0006						exec:
498	>0006						                .fill 4
499	.000a						length:
500	.000a						saveStart:
501	>000a						                .fill 4
502	.000e						attributes:
503	.000e						saveEnd:
504	>000e						                .fill 4
505							                .endstruct

507							;-------------------------------------------------------------------------

509	=0						bufferNumberKeyboard=0          ;
510	=1						bufferNumberRS423Input=1        ;
511	=2						bufferNumberRS423Output=2       ;
512	=3						bufferNumberPrinter=3           ;
513	=4						bufferNumberSound0=4            ; Noise channel
514	=5						bufferNumberSound1=5            ;
515	=6						bufferNumberSound2=6            ;
516	=7						bufferNumberSound3=7            ;
517							; bufferNumberSpeech=8            ;
518	=8						bufferNumberHighest=8           ;

520							;-------------------------------------------------------------------------

523	=0						tubeReasonMultiByteParasiteToHost=0
524	=1						tubeReasonMultiByteHostToParasite=1
525	=4						tubeReasonExecute=4
526	=7						tubeReason256BytesHostToParasite=7
527	=$c0						tubeReasonClaimMask=$c0
528	=$80						tubeReasonReleaseMask=$80

531							;-------------------------------------------------------------------------

533							; uservIndex=0
534							; brkvIndex=1
535							; irq1vIndex=2
536							; irq2vIndex=3
537							; clivIndex=4
538							; bytevIndex=5
539							; wordvIndex=6
540							; wrchvIndex=7
541							; rdchvIndex=8
542							; filevIndex=9
543							; argsvIndex=10
544							; bgetvIndex=11
545							; bputvIndex=12
546							; gbpbvIndex=13
547							; findvIndex=14
548							; fscvIndex=15
549							; eventvIndex=16
550							; uptvIndex=17
551							; netvIndex=18
552							; vduvIndex=19
553							; keyvIndex=20
554							; insvIndex=21
555							; remvIndex=22
556							; cnpvIndex=23
557							; ind1vIndex=24
558							; ind2vIndex=25
559							; ind3vIndex=26

562							                .virtual $200
563	.0200						vectors:
564	.0200						USERV:
565	>0200						                .fill 2
566	.0202						BRKV:
567	>0202						                .fill 2
568	.0204						IRQ1V:
569	>0204						                .fill 2

571	.0206						IRQ2V:
572	>0206						                .fill 2
573	.0208						CLIV:
574	>0208						                .fill 2
575	.020a						BYTEV:
576	>020a						                .fill 2
577	.020c						WORDV:
578	>020c						                .fill 2
579	.020e						WRCHV:
580	>020e						                .fill 2
581	.0210						RDCHV:
582	>0210						                .fill 2
583	.0212						FILEV:
584	>0212						                .fill 2
585	.0214						ARGSV:
586	>0214						                .fill 2
587	.0216						BGETV:
588	>0216						                .fill 2
589	.0218						BPUTV:
590	>0218						                .fill 2
591	.021a						GBPBV:
592	>021a						                .fill 2
593	.021c						FINDV:
594	>021c						                .fill 2
595	.021e						FSCV:
596	>021e						                .fill 2
597	.0220						EVENTV:
598	>0220						                .fill 2
599	.0222						UPTV:
600	>0222						                .fill 2
601	.0224						NETV:
602	>0224						                .fill 2
603	.0226						VDUV:
604	>0226						                .fill 2
605	.0228						KEYV:
606	>0228						                .fill 2
607	.022a						INSV:
608	>022a						                .fill 2
609	.022c						REMV:
610	>022c						                .fill 2
611	.022e						CNPV:
612	>022e						                .fill 2
613	.0230						IND1V:
614	>0230						                .fill 2
615	.0232						IND2V:
616	>0232						                .fill 2
617	.0234						IND3V:
618	>0234						                .fill 2
619	.0236						mosVariables:

621							; OSBYTE 166 (&A6) Read start address of MOS variables [MasRef D.2-50]
622							; OSBYTE 167 (&A7) Read start address of MOS variablespointer table  [MasRef D.2-50]
623	>0236						mosVariablesAddress: .fill 2

625							; OSBYTE 168 (&A8) Read address of ROM pointer table [MasRef D.2-51]
626							; OSBYTE 169 (&A9) Read address of ROM pointer table [MasRef D.2-51]
627	>0238						extendedVectorSpaceAddress: .fill 2

629							; OSBYTE 170 (&AA) Read address of ROM information table [MasRef D.2-51]
630							; OSBYTE 171 (&AB) Read address of ROM information table [MasRef D.2-51]
631	>023a						romInformationTableAddress: .fill 2

633							; OSBYTE 172 (&AC) Read address of keyboard translation table [MasRef D.2-52]
634							; OSBYTE 173 (&AD) Read address of keyboard translation table [MasRef D.2-52]
635	>023c						keyboardTranslationTableAddress: .fill 2

637							; OSBYTE 174 (&AE) Read address of VDU variables origin [MasRef D.2-52]
638							; OSBYTE 175 (&AF) Read address of VDU variables origin [MasRef D.2-52]
639	>023e						vduVariablesAddress: .fill 2

641							; OSBYTE 176 (&B0) Read/Write CFS timeout counter [MasRef D.2-52]
642	>0240						cfsTimeoutCounter: .fill 1

644							; OSBYTE 177 (&B1) Read/write input source [MasRef D.2-53]
645	>0241						inputSource: .fill 1

647							; OSBYTE 178 (&B2) Read/write keyboard semaphore [MasRef D.2-53]
648	>0242						keyboardSemaphore: .fill 1

650							; OSBYTE 179 (&B3) Read/write ROM polling semaphore [MasRef D.2-54]
651	>0243						romPollingSemaphore: .fill 1

653							; OSBYTE 180 (&B4) Read/write Operating System High [MasRef D.2-54]
654	>0244						oshwm: .fill 1

656							; OSBYTE 181 (&B5) Read/write RS243 input interpretation [MasRef D.2-54]
657	>0245						rs423InputInterpretationStatus: .fill 1

659							; OSBYTE 182 (&B6) Read NOIGNORE state [MasRef D.2-55]
660							;
661							; TODO - not a great name, no matter how official - should probably be usePrinterIgnoreChar or something
662	>0246						noignoreState: .fill 1

664							; OSBYTE 183 (&B7) Read/write cassette/ROM filing system [MasRef D.2-55]
665	>0247						cfsRFSFSSwitch: .fill 1

667							; OSBYTE 184 (&B8) Read OS copy of video ULA control [MasRef D.2-56]
668	>0248						vcontrolRegister: .fill 1

670							; OSBYTE 185 (&B9) Read OS copy of video ULA palette [MasRef D.2-56]
671	>0249						vpaletteRegister: .fill 1

673							; OSBYTE 186 (&BA) Read ROM number active at last BRK [MasRef D.2-56]
674	>024a						romActiveAtLastBRK: .fill 1

676							; OSBYTE 187 (&BB) Read ROM number of socket [MasRef D.2-57]
677	>024b						basicROMNumber: .fill 1

679							; OSBYTE 188 (&BC) Read current ADC channel number [MasRef D.2-57]
680	>024c						currentADCChannel: .fill 1

682							; OSBYTE 189 (&BD) Read maximum ADC channel number [MasRef D.2-57]
683	>024d						maximumADCChannel: .fill 1

685							; OSBYTE 190 (&BE) Read/write ADC conversion type [MasRef D.2-58]
686	>024e						adcConversionType: .fill 1

688							; OSBYTE 191 (&BF) Read/write RS423 busy flag [MasRef D.2-58]
689	>024f						rs423Busy: .fill 1

691							; OSBYTE 192 (&C0) Read serial ACIA control register [MasRef D.2-58]
692	>0250						aciaControlRegister: .fill 1

694							; OSBYTE 193 (&C1) Read/write flash counter [MasRef D.2-59]
695	>0251						flashCounter: .fill 1

697							; OSBYTE 194 (&C2) Read/write duration of first colour [MasRef D.2-59]
698	>0252						firstFlashColourDuration: .fill 1

700							; OSBYTE 195 (&C3) Read/write duration of second colour [MasRef D.2-60]
701	>0253						secondFlashColourDuration: .fill 1

703							; OSBYTE 196 (&C4) Read/write keyboard auto-repeat delay [MasRef D.2-60]
704	>0254						keyboardAutoRepeatDelay: .fill 1

706							; OSBYTE 197 (&C5) Read/write keyboard auto-repeat rate [MasRef D.2-60]
707	>0255						keyboardAutoRepeatRate: .fill 1

709							; OSBYTE 198 (&C6) Read/write *EXEC file handle [MasRef D.2-61]
710	>0256						execFileHandle: .fill 1

712							; OSBYTE 199 (&C7) Read/write *SPOOL file handle [MasRef D.2-62]
713	>0257						spoolFileHandle: .fill 1

715							; OSBYTE 200 (&C8) Read/write BREAK and ESCAPE effect [MasRef D.2-62]
716	>0258						breakAndESCAPEEffect: .fill 1

718							; OSBYTE 201 (&C9) Read/write keyboard status [MasRef D.2-63]
719	>0259						keyboardStatus: .fill 1

721							; OSBYTE 202 (&CA) Read/write keyboard status byte [MasRef D.2-63]
722	.025a						keyboardStatusByte: .block
723	=$8						shiftPressed=%1<<3
724	=%10000						capsLockDisengaged=%1<<4
725	=%100000					shiftLockDisengaged=%1<<5
726	=%1000000					ctrlPressed=%1<<6
727	=$80						shiftEnabled=%1<<7
728	>025a						                .fill 1
729							                .endblock

731							; OSBYTE 203 (&CB) Read/write RS423 input buffer [MasRef D.2-64]
732	>025b						rs423InputBufferMinimumSpace: .fill 1

734							; OSBYTE 204 (&CC) Read/write RS423 ignore flag [MasRef D.2-65]
735	>025c						rs423Ignore: .fill 1

737							; OSBYTE 205 (&CD) Read/write RS423 destination [MasRef D.2-65]
738	>025d						rs423Destination: .fill 1

740							; OSBYTE 206 (&CE) Read/write Econet OS call interception [MasRef D.2-66]
741	>025e						econetInterceptionStatus: .fill 1

743							; OSBYTE 207 (&CF) Read/write Econet input interpretation [MasRef D.2-66]
744	>025f						econetInputInterpretationStatus: .fill 1

746							; OSBYTE 208 (&D0) Read write Econet output [MasRef D.2-67]
747	>0260						econetOutputInterpretationStatus: .fill 1

749							; OSBYTE 209 (&D1) is reserved for the speech system [MasRef D.2-67]
750	>0261						speechSystemByte1:  .fill 1

752							; OSBYTE 210 (&D2) Read/write sound suppression status [MasRef D.2-67]
753	>0262						soundSuppressionStatus: .fill 1

755							; OSBYTE 211 (&D3) Read/write BELL channel [MasRef D.2-67]
756	>0263						bellChannel: .fill 1

758							; OSBYTE 212 (&D4) Read/write BELL sound information [MasRef D.2-68]
759	>0264						bellSound: .fill 1

761							; OSBYTE 213 (&D5) Read/write BELL frequency [MasRef D.2-69]
762	>0265						bellFrequency: .fill 1

764							; OSBYTE 214 (&D6) Read/write BELL duration [MasRef D.2-69]
765	>0266						bellDuration: .fill 1

767							; OSBYTE 215 (&D7) Read/write startup message [MasRef D.2-69]
768	>0267						startupMessageSuppressionStatus: .fill 1

770							; OSBYTE 216 (&D8) Read/write length of soft key string [MasRef D.2-70]
771	>0268						softKeyStringLength: .fill 1

773							; OSBYTE 217 (&D9) Read/write paged mode line count [MasRef D.2-71]
774	>0269						pagedModeCounter: .fill 1

776							; OSBYTE 218 (&DA) Read/write bytes in VDU queue [MasRef D.2-71]
777	>026a						vduQueueNegativeLength: .fill 1

779							; OSBYTE 219 (&DB) Read/write TAB key code [MasRef D.2-72]
780	>026b						tabKeyCode: .fill 1

782							; OSBYTE 220 (&DC) Read/write ESCAPE character [MasRef D.2-72]
783	>026c						escapeCharacter: .fill 1

785							; OSBYTE 221 (&DD) Read/write interpretation of input values 192-207 [MasRef D.2-73]
786	>026d						input192To207Interpretation: .fill 1

788							; OSBYTE 222 (&DE) Read/write interpretation of input values 208-223 [MasRef D.2-73]
789	>026e						input208To223Interpretation: .fill 1

791							; OSBYTE 223 (&DF) Read/write interpretation of input values 224-239 [MasRef D.2-73]
792	>026f						input224To239Interpretation: .fill 1

794							; OSBYTE 224 (&E0) Read/write interpretation of input values 240-255 [MasRef D.2-73]
795	>0270						input240To255Interpretation: .fill 1

797							; OSBYTE 225 (&E1) Read/write soft key interpretation [MasRef D.2-74]
798	>0271						softKeyInterpretation: .fill 1

800							; OSBYTE 226 (&E2) Read/write SHIFT+soft key interpretation [MasRef D.2-74]
801	>0272						shiftSoftKeyInterpretation: .fill 1

803							; OSBYTE 227 (&E3) Read/write CTRL+soft key interpretation [MasRef D.2-74]
804	>0273						ctrlSoftKeyInterpretation: .fill 1

806							; OSBYTE 228 (&E4) Read/write SHIFT+CTRL+soft key interpretation [MasRef D.2-74]
807	>0274						shiftCtrlSoftKeyInterpretation: .fill 1

809							; OSBYTE 229 (&E5) Read/write ESCAPE key status [MasRef D.2-75]
810	>0275						escapeKeyStatus: .fill 1

812							; OSBYTE 230 (&E6) Read/write ESCAPE effects [MasRef D.2-75]
813	>0276						escapeEffects: .fill 1

815							; OSBYTE 231 (&E7) Read/write IRQ bit mask for user 6522 [MasRef D.2-76]
816	>0277						userVIAInterruptMask: .fill 1

818							; OSBYTE 232 (&E8) Read/write IRQ bit mask for 6850 [MasRef D.2-76]
819	>0278						rs423InterruptMask: .fill 1

821							; OSBYTE 233 (&E9) Read write IRQ bit mask for system [MasRef D.2-76]
822	>0279						systemVIAInterruptMask: .fill 1

824							; OSBYTE 234 (&EA) Read flag indicating Tube presence [MasRef D.2-76]
826	>027a						tubePresence: .fill 1

831							; OSBYTE 235 (&EB) is reserved for the speech system. [MasRef D.2-77]
832	>027b						speechSystemByte2: .fill 1

834							; OSBYTE 236 (&EC) Read/write character destination status [MasRef D.2-77]
835	.027c						characterDestinationStatus: .block
836	>027c						                .fill 1
837	=1						rs423_enable=1
838	=2						vdu_disable=2
839	=4						printer_disable=4               ;printer always off
840	=8						printer_enable=8                ;printer always on
841	=16						spool_disable=16
842	=64						printer_maybe=64                ;printer on when VDU 1 only
843							                .endblock

845							; OSBYTE 237 (&ED) Read/write cursor editing status [MasRef D.2-77]
846	.027d						editKeysMode: .block
847	=0						editKeys=0                      ;edit keys do editing
848	=1						asciiKeys=1                     ;edit keys are ASCII 135-139
849	=2						functionKeys=2                  ;edit keys are F keys 11-15
850	>027d						                .fill 1
851							                .endblock

853							;-------------------------------------------------------------------------
854							; variables reset up to here on soft BREAK
855							;-------------------------------------------------------------------------

857							; OSBYTE 238 (&EE) Read/write numeric keypad [MasRef D.2-78]
858	>027e						numericKeypadInterpretation: .fill 1

860							; OSBYTE 239 (&EF) Read/write *SHADOW state [MasRef D.2-78]
861	>027f						shadowRAMState: .fill 1

863							; OSBYTE 240 (&F0) Read country flag [MasRef D.2-79]
864	>0280						countryFlag: .fill 1

866							; OSBYTE 241 (&F1) Read/write user flag [MasRef D.2-79]
867	>0281						userFlag: .fill 1

869							; OSBYTE 242 (&F2) Read copy of serial processor ULA [MasRef D.2-80]
870	>0282						serialULARegister: .fill 1

872							; OSBYTE 243 (&F3) Read timer switch state [MasRef D.2-80]
873							;
874							; The location holds either 5 (initialTimerSwitchState) or 10
875							; (initialTimerSwitchState^15) - i.e., the offset of the byte after
876							; the last of the timer.
877							;
878							; Various offsets are applied to the timer addresses to make this
879							; work.
880	>0283						timerSwitchState: .fill 1

882							; OSBYTE 244 (&F4) Read/write soft key consistency flag [MasRef D.2-81]
883	>0284						softKeyConsistencyFlag: .fill 1

885							; OSBYTE 245 (&F5) Read printer driver type [MasRef D.2-81[
886	>0285						printerDriverType: .fill 1

888							; OSBYTE 246 (&F6) Read/write printer ignore character [MasRef D.2-81]
889	>0286						printerIgnoreChar: .fill 1

891							;-------------------------------------------------------------------------
892							; variables reset up to here on hard BREAK
893							;-------------------------------------------------------------------------

895							; OSBYTE 247 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
896	>0287						breakVectorByte0: .fill 1

898							; OSBYTE 248 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
899	>0288						breakVectorByte1: .fill 1

901							; OSBYTE 249 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
902	>0289						breakVectorByte2: .fill 1

904							; OSBYTE 250 (&FA) Read memory written by VDU driver [MasRef D.2-82]
905	>028a						vduDriverMemory: .fill 1

907							; OSBYTE 251 (&FB) Read memory displayed [MasRef D.2-83]
908	>028b						displayMemory: .fill 1

910							; OSBYTE 252 (&FC) Read/write current language ROM number [MasRef D.2-83]
911	>028c						currentLanguageROM: .fill 1

913							;-------------------------------------------------------------------------
914							; variables reset up to here on power-on reset
915							;-------------------------------------------------------------------------

917							; OSBYTE 253 (&FD) Read last BREAK type [MasRef D.2-83]
918	.028d						lastBREAKType: .block
919	>028d						                .fill 1
920	=0						softBREAK=0
921	=1						powerOn=1
922	=2						hardBREAK=2
923							                .endblock
924							; OSBYTE 254 (&FE) Set effect of SHIFT on numeric keypad [MasRef D.2-84]
925	>028e						numericKeypadShiftEffect: .fill 1
926							; OSBYTE 255 (&FF) Read/write startup options [MasRef D.2-84]
927	>028f						startupOptions: .fill 1
928	=7						modeMask=7

930							                .endvirtual

932	=166						firstMOSVariableOSBYTE=166

934	=5						initialTimerSwitchState=5
935	=$290						tvOffset=$290
936	=$291						tvInterlace=$291
937	=$292						timer0=$292
938	=$297						timer1=$297
939	=$29c						intervalTimer=$29c
940	=$2a1						romInformationTable=$2a1
941	=$2b1						inkeyTimeoutCounter=$2b1
942	=$2b3						osword0MaxLineLength=$2b3
943	=$2b4						osword0MinASCIICharacter=$2b4
944	=$2b5						osword0MaxASCIICharacter=$2b5
945	=$2b6						adcResultLSBs=$2b6
946	=$2ba						adcResultMSBs=$2ba
947	=$2be						adcLastChannelRead=$2be         ;Two names for the same thing!
948	=$2be						adcLastConvertedChannel=$2be    ;Two names for the same thing!
949	=$2bf						eventEnabledFlags=$2bf
950	=$02c9						currentSoftKey=$02c9
951	=$02ca						keyboardFirstAutoRepeatCount=$02ca
952	=$2cb						previousKeyPressedWhenReadingLastKey=$2cb
953	=$2cc						previousKeyPressedWhenReadingFirstKey=$2cc

955							; Anything past $2cd is reset to $ff rather than $00

957							; Not actually a key - some kind of flag to skip double sound
958							; updates?? See LE718.
959	=$2cd						previousKeyPressedWhenReadingOSBYTE=$2cd

961							; soundIsUpdatingFlag=$2ce
962	=$2ce						bufferEmptyFlags=$2ce
963	=$2d7						bufferStartIndices=$2d7
964	=$2e0						bufferEndIndices=$2e0

966	=$2e9						tapeInputCurrentBlockSize=$2e9
967	=$2eb						blockFlagOfCurrentlyResidentBlock=$2eb
968	=$2ec						lastCharacterOfCurrentlyResidentBlock=$2ec

970							; Needs a better name, possibly more than one :(
971							;
972							; Used by various file routines to store OSGBPB and OSFILE parameter
973							; blocks.
974							;
975							; Used by the clock routines to hold a (possibly partial) mirror of
976							; the RTC time/date registers.
977							;
978							; Used when parsing hex addresses from the command line - obviously
979							; designed primarily for convenient use when building up the OSFILE
980							; parameter block for use with *LOAD and *SAVE.
981							;
982							; Used by the SRAM utilities to store working data.
983	=$2ed						osfileParameterBlock=$2ed

985							                .virtual osfileParameterBlock
986	.02ed						sramWorkspace: .block
987	>02ed						temp: .fill 1
988	>02ee						type: .fill 1
989	>02ef						length: .fill 2
990	>02f1						bank: .fill 1
991	>02f2						sramAddress: .fill 4
992	>02f6						dataAddress: .fill 4
993							                .endblock
994							                .endvirtual

996							; rtcTempData=$2ee

998							ExtendedVectorAddress: .function vectorAddress
1000							                .endfunction extendedVectorSpace+(vectorAddress-vectors)/2*3

1002							;-------------------------------------------------------------------------

1004	=$d9f						extendedVectorSpace=$d9f

1006							; internal key numbers
1007	=$62						key_space=$62
1008	=$66						key_comma=$66
1009	=$17						key_minus=$17
1010	=$67						key_stop=$67
1011	=$68						key_slash=$68
1012	=$27						key_0=$27
1013	=$30						key_1=$30
1014	=$31						key_2=$31
1015	=$11						key_3=$11
1016	=$12						key_4=$12
1017	=$13						key_5=$13
1018	=$34						key_6=$34
1019	=$24						key_7=$24
1020	=$15						key_8=$15
1021	=$26						key_9=$26
1022	=$48						key_colon=$48
1023	=$57						key_semicolon=$57
1024	=$47						key_at=$47
1025	=$41						key_a=$41
1026	=$64						key_b=$64
1027	=$52						key_c=$52
1028	=$32						key_d=$32
1029	=$22						key_e=$22
1030	=$43						key_f=$43
1031	=$53						key_g=$53
1032	=$54						key_h=$54
1033	=$25						key_i=$25
1034	=$45						key_j=$45
1035	=$46						key_k=$46
1036	=$56						key_l=$56
1037	=$65						key_m=$65
1038	=$55						key_n=$55
1039	=$36						key_o=$36
1040	=$37						key_p=$37
1041	=$10						key_q=$10
1042	=$33						key_r=$33
1043	=$51						key_s=$51
1044	=$23						key_t=$23
1045	=$35						key_u=$35
1046	=$63						key_v=$63
1047	=$21						key_w=$21
1048	=$42						key_x=$42
1049	=$44						key_y=$44
1050	=$61						key_z=$61
1051	=$38						key_left_square_bracket=$38
1052	=$78						key_backslash=$78
1053	=$58						key_right_square_bracket=$58
1054	=$18						key_caret=$18
1055	=$28						key_underline=$28
1056	=$70						key_escape=$70
1057	=$60						key_tab=$60
1058	=$40						key_caps_lock=$40
1059	=$1						key_ctrl=$1
1060	=$50						key_shift_lock=$50
1061	=$0						key_shift=$0
1062	=$59						key_delete=$59
1063	=$69						key_copy=$69
1064	=$49						key_return=$49
1065	=$39						key_up=$39
1066	=$29						key_down=$29
1067	=$19						key_left=$19
1068	=$79						key_right=$79
1069	=$20						key_f0=$20
1070	=$71						key_f1=$71
1071	=$72						key_f2=$72
1072	=$73						key_f3=$73
1073	=$14						key_f4=$14
1074	=$74						key_f5=$74
1075	=$75						key_f6=$75
1076	=$16						key_f7=$16
1077	=$76						key_f8=$76
1078	=$77						key_f9=$77
1079	=$6a						key_numpad_0=$6a
1080	=$6b						key_numpad_1=$6b
1081	=$7c						key_numpad_2=$7c
1082	=$6c						key_numpad_3=$6c
1083	=$7a						key_numpad_4=$7a
1084	=$7b						key_numpad_5=$7b
1085	=$1a						key_numpad_6=$1a
1086	=$1b						key_numpad_7=$1b
1087	=$2a						key_numpad_8=$2a
1088	=$2b						key_numpad_9=$2b
1089	=$3a						key_numpad_plus=$3a
1090	=$3b						key_numpad_minus=$3b
1091	=$4a						key_numpad_divide=$4a
1092	=$5a						key_numpad_hash=$5a
1093	=$5b						key_numpad_multiply=$5b
1094	=$5c						key_numpad_comma=$5c
1095	=$3c						key_numpad_return=$3c
1096	=$4b						key_numpad_delete=$4b
1097	=$4c						key_numpad_stop=$4c

1099							fsInfoBlock: .struct
1100	>0000						name: .fill 8
1101	>0008						minHandle: .fill 1
1102	>0009						maxHandle: .fill 1
1103	>000a						fsNumber: .fill 1
1104							                .ends

1106							osgbpbBlock: .struct
1107	>0000						handle: .fill 1
1108	>0001						addr: .fill 4
1109	>0005						numBytes: .fill 4
1110	>0009						ptr: .fill 4
1111							                .ends

1113							                ; NAUG p260
1114							                .virtual $dc00
1115	.dc00						hazel: .block
1116	.dc00						commandLine:                    ;dc00
1117	>dc00						                .fill 256
1118	.dd00						ddxx:                           ;dd00
1119	>dd00						                .fill 256
1120	.de00						dexx:
1121	>de00						                .fill 256
1122	.df00						currentFS:                      ;df00
1123	>df00						                .fill 1
1124	.df01						activeFS:                       ;df01
1125	>df01						                .fill 1
1126	.df02						libFS:                          ;df02
1127	>df02						                .fill 1
1128	.df03						currentFSROM:                   ;df03
1129	>df03						                .fill 1
1130	.df04						commandLinePointer:             ;df04
1131	>df04						                .fill 2

1133							                ; 17 info blocks in total, but everything is relative
1134							                ; to the 0th, so there's only a need to instantiate a
1135							                ; struct for that one. Don't think 64tass handles
1136							                ; arrays of structs anyway.
1137	.df06						fsInfoBlocks:   .dstruct fsInfoBlock ;df06
1100	>df06						name: .fill 8
1101	>df0e						minHandle: .fill 1
1102	>df0f						maxHandle: .fill 1
1103	>df10						fsNumber: .fill 1
1104							                .ends
1138	>df11						                .fill 16*size(fsInfoBlock)
1139	.dfc1						fsInfoBlocksTerminator:         ;dfc1
1140							                ; space reserved for the 0 terminator when the full
1141							                ; set of info blocks are filled.
1142	>dfc1						                .fill 1
1143	.dfc2						fsFlags: .block                 ;dfc2
1144	>dfc2						                .fill 1
1145	=$80						useASCII=$80
1146	=$80						isAPPEND=$80
1147	=$40						noLineNumbers=$40
1148							                .bend
1149	.dfc3						lineNumberBCD:                  ;dfc3
1150	>dfc3						                .fill 2
1151	.dfc5						lastCharPrinted:                ;dfc5
1152	>dfc5						                .fill 1
1153	.dfc6						tempFSFlag:                     ;dfc6
1154	>dfc6						                .fill 1
1155	.dfc7						moveOSGBPB: .dstruct osgbpbBlock ;dfc7
1107	>dfc7						handle: .fill 1
1108	>dfc8						addr: .fill 4
1109	>dfcc						numBytes: .fill 4
1110	>dfd0						ptr: .fill 4
1111							                .ends
1156	.dfd4						moveSrcHandle:                  ;dfd4
1157	>dfd4						                .fill 1
1158	.dfd5						moveDestHandle:                 ;dfd5
1159	>dfd5						                .fill 1
1160	.dfd6						moveBufferMSB:                  ;dfd6
1161	>dfd6						                .fill 1
1162	.dfd7						moveNumPages:                   ;dfd7
1163	>dfd7						                .fill 1
1164	.dfd8						moveDestName:                   ;dfd8
1165	>dfd8						                .fill 2
1166	.dfda						activeFSCV:                     ;dfda
1167	>dfda						                .fill 2
1168	.dfdc						oldACCCON:                      ;dfdc
1169	>dfdc						                .fill 1
1170	.dfdd						hasACCCONChanged:                ;dfdd
1171	>dfdd						                .fill 1

1177	>dfde						                .fill 1

1191							                .bend
1192							                .endv

1194							;-------------------------------------------------------------------------
1195							;
1196							; VDU variables
1197							;
1198							; MasRef E.4-1
1199							;
1200							VDUVariables: .struct
1201	.0000						graphicsWindow:
1202							;graphicsWindowLeftBottom:
1203							; &00 2 Graphics window left column. (p)
1204	>0000						graphicsWindowPixelsLeft: .fill 2
1205							; &02 2 Graphics window bottom row. (p)
1206	>0002						graphicsWindowPixelsBottom: .fill 2
1207							;graphicsWindowRightTop:
1208							; &04 2 Graphics window right column. (p)
1209	>0004						graphicsWindowPixelsRight: .fill 2
1210							; &06 2 Graphics window top row. (p)
1211	>0006						graphicsWindowPixelsTop: .fill 2
1212	.0008						textWindow:
1213							; &08 1 Text window left column.
1214	>0008						textWindowLeft: .fill 1
1215							; &09 1 Text window bottom row.
1216	>0009						textWindowBottom: .fill 1
1217							; &0A 1 Text window right column.
1218	>000a						textWindowRight: .fill 1
1219							; &0B 1 Text window top row.
1220	>000b						textWindowTop: .fill 1
1221							; &0C 2 Graphics origin X coordinate. (e)
1222	>000c						graphicsWindowOriginX: .fill 2
1223							; &0E 2 Graphics origin Y coordinate. (e)
1224	>000e						graphicsWindowOriginY: .fill 2
1225							; &10 2 Graphics cursor X coordinate. (e)
1226	>0010						graphicsCursorPositionX: .fill 2
1227							; &12 2 Graphics cursor Y coordinate. (e)
1228	>0012						graphicsCursorPositionY: .fill 2
1229							; &14 2 Previous graphics cursor X coordinate. (p)
1230	.0014						oldGraphicsCursorPixels:
1231	>0014						oldGraphicsCursorPixelsX: .fill 2
1232							; &16 2 Previous graphics cursor Y coordinate. (p)
1233	>0016						oldGraphicsCursorPixelsY: .fill 2
1234							; &18 1 Text cursor X coordinate (from left of screen) when not cursor editing. When cursor editing, normally the input cursor X coordinate, but the output cursor X coordinate within an "unknown PLOT codes" routine.
1235	>0018						textCursorXPosition: .fill 1
1236							; &19 1 Text cursor Y coordinate (from top of screen) when not cursor editing. When cursor editing, normally t.lsthe input cursor Y coordinate, but the output cursor Y coordinate within an "unknown PLOT codes" routine.
1237	>0019						textCursorYPosition: .fill 1
1238							; &1A 1 Y produced by GADDR (see next section) so that (ZMEMG),Y addresses the correct byte.
1239	>001a						graphicsAddressOffset: .fill 1
1240							; &1B-&23 VDU queue: &23 contains last byte of queue, other bytes immediately precede it.
1241	=9						queueSize=9
1242	>001b						queueBegin: .fill queueSize
1243	.0024						queueEnd:
1244	.0024						graphicsCursorPixels:
1245							; &24 2 Graphics cursor X coordinate. (p)
1246	>0024						graphicsCursorPixelsX: .fill 2
1247							; &26 2 Graphics cursor Y coordinate. (p)
1248	>0026						graphicsCursorPixelsY: .fill 2
1249							; &28-&49 Workspace. But variable &38 must not be used in a Teletext mode (mode 7 or 135).
1250							                .union
1251	.0028						ew: .dstruct EllipseWorkspaceVDUVariables
1449							                ; https://tobylobster.github.io/GXR-pages/gxr/S-s3.html#SP4
1450	.0028						aspectRatio:
1451	>0028						                .fill 3
1452	.002b						shear:
1453	>002b						                .fill 3
1454	.002e						halfHeightCounter:
1455	>002e						                .fill 2
1456	.0030						halfHeightSquared:
1457	>0030						                .fill 4
1458	.0034						pointC:
1459	>0034						                .fill 2
1460	.0036						pointD:
1461	>0036						                .fill 2
1462	.0038						leftPoint:
1463	>0038						                .fill 2
1464	.003a						rightPoint:
1465	>003a						                .fill 2
1466	.003c						pointA:
1467	>003c						                .fill 2
1468	.003e						pointB:
1469	>003e						                .fill 2
1470	.0040						pointE:
1471	>0040						                .fill 2
1472	.0042						currentOffsetX:
1473	>0042						                .fill 2
1474	.0044						plotPointX:
1475	.0044						pointF:
1476	>0044						                .fill 2
1477	.0046						plotPointY:
1478	>0046						                .fill 2
1479							                .endstruct
1252	.0028						hlfw: .dstruct HorizontalLineFillWorkspaceVDUVariables
1514	>0028						                .fill 6
1515	.002e						pixelsX:                        ;2e
1516	>002e						                .fill 2
1517	.0030						pixelsY:                        ;30
1518	>0030						                .fill 2
1519	.0032						pixelsRightEndX:
1520	>0032						                .fill 2         ;32
1521	.0034						pixelsLimitX:                   ;34
1522	>0034						                .fill 2
1523							                .endstruct
1253	.0028						mocr: .dstruct MoveOrCopyRectangleWorkspaceVDUVariables
1492	.0028						src: .dstruct VDUAABB
1373	.0028						min: .dstruct VDUCoordinate
1368	>0028						x: .fill 2
1369	>002a						y: .fill 2
1370							                .endstruct
1374	.002c						max: .dstruct VDUCoordinate
1368	>002c						x: .fill 2
1369	>002e						y: .fill 2
1370							                .endstruct
1375							                .endstruct
1493	.0030						L30:
1494	>0030						                .fill 4
1495	.0034						dest: .dstruct VDUAABB
1373	.0034						min: .dstruct VDUCoordinate
1368	>0034						x: .fill 2
1369	>0036						y: .fill 2
1370							                .endstruct
1374	.0038						max: .dstruct VDUCoordinate
1368	>0038						x: .fill 2
1369	>003a						y: .fill 2
1370							                .endstruct
1375							                .endstruct
1496	.003c						L3C:
1497	>003c						                .fill 4
1498	.0040						L40:
1499	>0040						                .fill 2
1500	.0042						shiftToNextByte:
1501	>0042						                .fill 2
1502	.0044						L44:
1503	>0044						                .fill 1
1504	.0045						copy:
1505	>0045						                .fill 1         ;0=move, 2=copy
1506	.0046						L46:
1507	>0046						                .fill 1
1508	.0047						L47:
1509	>0047						                .fill 1

1511							                .endstruct
1254	.0028						workspace: .dstruct GenericWorkspaceVDUVariables
1378	.0028						_28:
1379	>0028						                .fill 1
1380	.0029						_29:
1381	>0029						                .fill 1
1382	.002a						_2A:
1383	>002a						                .fill 1
1384	.002b						_2B:
1385	>002b						                .fill 1
1386	.002c						_2C:
1387	>002c						                .fill 1
1388	.002d						_2D:
1389	>002d						                .fill 1
1390	.002e						_2E:
1391	>002e						                .fill 1
1392	.002f						_2F:
1393	>002f						                .fill 1
1394	.0030						_30:
1395	>0030						                .fill 1
1396	.0031						_31:
1397	>0031						                .fill 1
1398	.0032						_32:
1399	>0032						                .fill 1
1400	.0033						_33:
1401	>0033						                .fill 1
1402	.0034						_34:
1403	>0034						                .fill 1
1404	.0035						_35:
1405	>0035						                .fill 1
1406	.0036						_36:
1407	>0036						                .fill 1
1408	.0037						_37:
1409	>0037						                .fill 1
1410	.0038						_38:
1411	>0038						                .fill 1
1412	.0039						_39:
1413	>0039						                .fill 1
1414	.003a						_3A:
1415	>003a						                .fill 1
1416	.003b						_3B:
1417	>003b						                .fill 1
1418	.003c						_3C:
1419	>003c						                .fill 1
1420	.003d						_3D:
1421	>003d						                .fill 1
1422	.003e						_3E:
1423	>003e						                .fill 1
1424	.003f						_3F:
1425	>003f						                .fill 1
1426	.0040						_40:
1427	>0040						                .fill 1
1428	.0041						_41:
1429	>0041						                .fill 1
1430	.0042						_42:
1431	>0042						                .fill 1
1432	.0043						_43:
1433	>0043						                .fill 1
1434	.0044						_44:
1435	>0044						                .fill 1
1436	.0045						_45:
1437	>0045						                .fill 1
1438	.0046						_46:
1439	>0046						                .fill 1
1440	.0047						_47:
1441	>0047						                .fill 1
1442	.0048						_48:
1443	>0048						                .fill 1
1444	.0049						_49:
1445	>0049						                .fill 1
1446							                .endstruct
1255							                .endunion
1256							; &4A 2 Address at which the 6845 is to display the text cursor.
1257	>004a						textCursorCRTCAddress: .fill 2
1258							; &4C 2 Number of bytes in a character row of the text window.
1259	>004c						textWindowWidthInBytes: .fill 2
1260							; &4E 1 Most significant byte of address of first byte of screen memory.
1261	>004e						startScreenAddressHighByte: .fill 1
1262							; &4F 1 Number of bytes in a character.
1263	>004f						bytesPerCharacter: .fill 1
1264							; &50 2 Address of byte in top left corner of screen display.
1265	>0050						screenTopLeftAddress: .fill 2
1266							; &52 2 Number of bytes in a character row of the whole screen.
1267	>0052						bytesPerCharacterRow: .fill 2
1268							; &54 1 Most significant byte of number of bytes of screen memory.
1269	>0054						screenSizeHighByte: .fill 1
1270							; &55 1 Current screen mode (in range 0-7, i.e. without regard to 'shadowing').
1271	>0055						currentScreenMODE: .fill 1
1272							; &56 1 Memory mode: 0 for 20K modes, 1 for 16K modes, 2 for 10K modes, 3 for 8K modes, 4 for 1K modes.
1273	>0056						currentScreenMODEGroup: .fill 1
1274							; &57 1 Foreground text colour mask.
1275	>0057						foregroundTextColour: .fill 1
1276							; &58 1 Background text colour mask.
1277	>0058						backgroundTextColour: .fill 1
1278							; &59 1 0 if plotting graphics foreground, 8 if plotting graphics background.
1279	>0059						graphicsPlotState: .fill 1
1280							; &5A 1 Current graphics plot mode (usually set to one of following two reduced mod 16).
1281	>005a						graphicsPlotMode: .fill 1
1282							; &5B 1 Current graphics foreground plot mode (as set by VDU 18).
1283	>005b						foregroundGCOLMode: .fill 1
1284							; &5C 1 Current graphics background plot mode (as set by VDU 18).
1285	>005c						backgroundGCOLMode: .fill 1
1286							; &5D 2 Address of routine to process current VDU sequence.
1287	>005d						jumpVector: .fill 2
1288							; &5F 1 Value for 6845 register 10 to revert to on leaving cursor editing.
1289	>005f						lastCursorStartRegisterValue: .fill 1
1290							; &60 1 (Number of logical colours)-1 (0 if Teletext).
1291	>0060						numberOfLogicalColoursMinusOne: .fill 1
1292							; &61 1 (Number of pixels/byte)-1 (0 if not graphics).
1293	>0061						pixelsPerByteMinusOne: .fill 1
1294							; &62 1 Mask for leftmost pixel in a byte.
1295	>0062						colourMaskLeft: .fill 1
1296							; &63 1 Mask for rightmost pixel in a byte.
1297	>0063						colourMaskRight: .fill 1
1298							; &64 1 Output cursor X coordinate when cursor editing, but input cursor X coordinate when cursor editing and inside an 'unknown PLOT codes' routine.
1299	>0064						editCursorXPosition: .fill 1
1300							; &65 1 Output cursor Y coordinate when cursor editing, but input cursor Y coordinate when cursor editing and inside an 'unknown PLOT codes' routine.
1301	>0065						editCursorYPosition: .fill 1
1302							; &66 1 Cursor control flags (as set by VDU 23 16).
1303	.0066						cursorFlags: .block
1304	>0066						                .fill 1
1305							; MasRef E.3-18
1306	=$40						noSpecialVDU5Actions=$40
1307	=$20						noMoveCursorAfterPrint=$20
1308	=$10						noVerticalScroll=$10
1309	=$08						swapAxes=$08                    ;if set, X=vert; if clear, X=horiz
1310	=$04						invertVertical=$04              ;if set, vert=up; if clear, vert=down
1311	=$02						invertHorizontal=$02            ;if set, horiz=left; if clear, horiz=right
1312	=$01						scrollProtect=$01
1313							                .endblock
1314							; &67 1 Dot pattern (as set by VDU 23 6).
1315	>0067						dotPattern: .fill 1
1316							; &68 1 Current state of dot pattern.
1317	>0068						dotPatternState: .fill 1
1318							; &69 1 0 if colour being plotted is solid, non-zero if colour is an ECF
1319	>0069						isColourECF: .fill 1
1320							; &6A 1 0 if graphics foreground colour is solid, non-zero if foreground colour is an ECF
1321	>006a						isForegroundECF: .fill 1
1322							; &6B 1 0 if graphics background colour is solid, non-zero if background colour is an ECF
1323	>006b						isBackgroundECF: .fill 1
1324							; &6C 1 Top bit set when cursor is in "column 81".
1325	>006c						column81: .fill 1
1326							; &6D 1 Current graphics foreground colour (as set by VDU 18).
1327	>006d						foregroundGraphicsColour: .fill 1
1328							; &6E 1 Current graphics background colour (as set by VDU 18)
1329	>006e						backgroundGraphicsColour: .fill 1
1330							; &6F-&7E Software copy of the current palette.
1331	>006f						currentPalette: .fill 16
1332							; &7F 1 Reserved.
1333	>007f						reserved: .fill 1
1334							                .endstruct

1336							                .virtual $300
1337	.0300						vduv: .dstruct VDUVariables
1201	.0300						graphicsWindow:
1202							;graphicsWindowLeftBottom:
1203							; &00 2 Graphics window left column. (p)
1204	>0300						graphicsWindowPixelsLeft: .fill 2
1205							; &02 2 Graphics window bottom row. (p)
1206	>0302						graphicsWindowPixelsBottom: .fill 2
1207							;graphicsWindowRightTop:
1208							; &04 2 Graphics window right column. (p)
1209	>0304						graphicsWindowPixelsRight: .fill 2
1210							; &06 2 Graphics window top row. (p)
1211	>0306						graphicsWindowPixelsTop: .fill 2
1212	.0308						textWindow:
1213							; &08 1 Text window left column.
1214	>0308						textWindowLeft: .fill 1
1215							; &09 1 Text window bottom row.
1216	>0309						textWindowBottom: .fill 1
1217							; &0A 1 Text window right column.
1218	>030a						textWindowRight: .fill 1
1219							; &0B 1 Text window top row.
1220	>030b						textWindowTop: .fill 1
1221							; &0C 2 Graphics origin X coordinate. (e)
1222	>030c						graphicsWindowOriginX: .fill 2
1223							; &0E 2 Graphics origin Y coordinate. (e)
1224	>030e						graphicsWindowOriginY: .fill 2
1225							; &10 2 Graphics cursor X coordinate. (e)
1226	>0310						graphicsCursorPositionX: .fill 2
1227							; &12 2 Graphics cursor Y coordinate. (e)
1228	>0312						graphicsCursorPositionY: .fill 2
1229							; &14 2 Previous graphics cursor X coordinate. (p)
1230	.0314						oldGraphicsCursorPixels:
1231	>0314						oldGraphicsCursorPixelsX: .fill 2
1232							; &16 2 Previous graphics cursor Y coordinate. (p)
1233	>0316						oldGraphicsCursorPixelsY: .fill 2
1234							; &18 1 Text cursor X coordinate (from left of screen) when not cursor editing. When cursor editing, normally the input cursor X coordinate, but the output cursor X coordinate within an "unknown PLOT codes" routine.
1235	>0318						textCursorXPosition: .fill 1
1236							; &19 1 Text cursor Y coordinate (from top of screen) when not cursor editing. When cursor editing, normally t.lsthe input cursor Y coordinate, but the output cursor Y coordinate within an "unknown PLOT codes" routine.
1237	>0319						textCursorYPosition: .fill 1
1238							; &1A 1 Y produced by GADDR (see next section) so that (ZMEMG),Y addresses the correct byte.
1239	>031a						graphicsAddressOffset: .fill 1
1240							; &1B-&23 VDU queue: &23 contains last byte of queue, other bytes immediately precede it.
1241	=9						queueSize=9
1242	>031b						queueBegin: .fill queueSize
1243	.0324						queueEnd:
1244	.0324						graphicsCursorPixels:
1245							; &24 2 Graphics cursor X coordinate. (p)
1246	>0324						graphicsCursorPixelsX: .fill 2
1247							; &26 2 Graphics cursor Y coordinate. (p)
1248	>0326						graphicsCursorPixelsY: .fill 2
1249							; &28-&49 Workspace. But variable &38 must not be used in a Teletext mode (mode 7 or 135).
1250							                .union
1251	.0328						ew: .dstruct EllipseWorkspaceVDUVariables
1449							                ; https://tobylobster.github.io/GXR-pages/gxr/S-s3.html#SP4
1450	.0328						aspectRatio:
1451	>0328						                .fill 3
1452	.032b						shear:
1453	>032b						                .fill 3
1454	.032e						halfHeightCounter:
1455	>032e						                .fill 2
1456	.0330						halfHeightSquared:
1457	>0330						                .fill 4
1458	.0334						pointC:
1459	>0334						                .fill 2
1460	.0336						pointD:
1461	>0336						                .fill 2
1462	.0338						leftPoint:
1463	>0338						                .fill 2
1464	.033a						rightPoint:
1465	>033a						                .fill 2
1466	.033c						pointA:
1467	>033c						                .fill 2
1468	.033e						pointB:
1469	>033e						                .fill 2
1470	.0340						pointE:
1471	>0340						                .fill 2
1472	.0342						currentOffsetX:
1473	>0342						                .fill 2
1474	.0344						plotPointX:
1475	.0344						pointF:
1476	>0344						                .fill 2
1477	.0346						plotPointY:
1478	>0346						                .fill 2
1479							                .endstruct
1252	.0328						hlfw: .dstruct HorizontalLineFillWorkspaceVDUVariables
1514	>0328						                .fill 6
1515	.032e						pixelsX:                        ;2e
1516	>032e						                .fill 2
1517	.0330						pixelsY:                        ;30
1518	>0330						                .fill 2
1519	.0332						pixelsRightEndX:
1520	>0332						                .fill 2         ;32
1521	.0334						pixelsLimitX:                   ;34
1522	>0334						                .fill 2
1523							                .endstruct
1253	.0328						mocr: .dstruct MoveOrCopyRectangleWorkspaceVDUVariables
1492	.0328						src: .dstruct VDUAABB
1373	.0328						min: .dstruct VDUCoordinate
1368	>0328						x: .fill 2
1369	>032a						y: .fill 2
1370							                .endstruct
1374	.032c						max: .dstruct VDUCoordinate
1368	>032c						x: .fill 2
1369	>032e						y: .fill 2
1370							                .endstruct
1375							                .endstruct
1493	.0330						L30:
1494	>0330						                .fill 4
1495	.0334						dest: .dstruct VDUAABB
1373	.0334						min: .dstruct VDUCoordinate
1368	>0334						x: .fill 2
1369	>0336						y: .fill 2
1370							                .endstruct
1374	.0338						max: .dstruct VDUCoordinate
1368	>0338						x: .fill 2
1369	>033a						y: .fill 2
1370							                .endstruct
1375							                .endstruct
1496	.033c						L3C:
1497	>033c						                .fill 4
1498	.0340						L40:
1499	>0340						                .fill 2
1500	.0342						shiftToNextByte:
1501	>0342						                .fill 2
1502	.0344						L44:
1503	>0344						                .fill 1
1504	.0345						copy:
1505	>0345						                .fill 1         ;0=move, 2=copy
1506	.0346						L46:
1507	>0346						                .fill 1
1508	.0347						L47:
1509	>0347						                .fill 1

1511							                .endstruct
1254	.0328						workspace: .dstruct GenericWorkspaceVDUVariables
1378	.0328						_28:
1379	>0328						                .fill 1
1380	.0329						_29:
1381	>0329						                .fill 1
1382	.032a						_2A:
1383	>032a						                .fill 1
1384	.032b						_2B:
1385	>032b						                .fill 1
1386	.032c						_2C:
1387	>032c						                .fill 1
1388	.032d						_2D:
1389	>032d						                .fill 1
1390	.032e						_2E:
1391	>032e						                .fill 1
1392	.032f						_2F:
1393	>032f						                .fill 1
1394	.0330						_30:
1395	>0330						                .fill 1
1396	.0331						_31:
1397	>0331						                .fill 1
1398	.0332						_32:
1399	>0332						                .fill 1
1400	.0333						_33:
1401	>0333						                .fill 1
1402	.0334						_34:
1403	>0334						                .fill 1
1404	.0335						_35:
1405	>0335						                .fill 1
1406	.0336						_36:
1407	>0336						                .fill 1
1408	.0337						_37:
1409	>0337						                .fill 1
1410	.0338						_38:
1411	>0338						                .fill 1
1412	.0339						_39:
1413	>0339						                .fill 1
1414	.033a						_3A:
1415	>033a						                .fill 1
1416	.033b						_3B:
1417	>033b						                .fill 1
1418	.033c						_3C:
1419	>033c						                .fill 1
1420	.033d						_3D:
1421	>033d						                .fill 1
1422	.033e						_3E:
1423	>033e						                .fill 1
1424	.033f						_3F:
1425	>033f						                .fill 1
1426	.0340						_40:
1427	>0340						                .fill 1
1428	.0341						_41:
1429	>0341						                .fill 1
1430	.0342						_42:
1431	>0342						                .fill 1
1432	.0343						_43:
1433	>0343						                .fill 1
1434	.0344						_44:
1435	>0344						                .fill 1
1436	.0345						_45:
1437	>0345						                .fill 1
1438	.0346						_46:
1439	>0346						                .fill 1
1440	.0347						_47:
1441	>0347						                .fill 1
1442	.0348						_48:
1443	>0348						                .fill 1
1444	.0349						_49:
1445	>0349						                .fill 1
1446							                .endstruct
1255							                .endunion
1256							; &4A 2 Address at which the 6845 is to display the text cursor.
1257	>034a						textCursorCRTCAddress: .fill 2
1258							; &4C 2 Number of bytes in a character row of the text window.
1259	>034c						textWindowWidthInBytes: .fill 2
1260							; &4E 1 Most significant byte of address of first byte of screen memory.
1261	>034e						startScreenAddressHighByte: .fill 1
1262							; &4F 1 Number of bytes in a character.
1263	>034f						bytesPerCharacter: .fill 1
1264							; &50 2 Address of byte in top left corner of screen display.
1265	>0350						screenTopLeftAddress: .fill 2
1266							; &52 2 Number of bytes in a character row of the whole screen.
1267	>0352						bytesPerCharacterRow: .fill 2
1268							; &54 1 Most significant byte of number of bytes of screen memory.
1269	>0354						screenSizeHighByte: .fill 1
1270							; &55 1 Current screen mode (in range 0-7, i.e. without regard to 'shadowing').
1271	>0355						currentScreenMODE: .fill 1
1272							; &56 1 Memory mode: 0 for 20K modes, 1 for 16K modes, 2 for 10K modes, 3 for 8K modes, 4 for 1K modes.
1273	>0356						currentScreenMODEGroup: .fill 1
1274							; &57 1 Foreground text colour mask.
1275	>0357						foregroundTextColour: .fill 1
1276							; &58 1 Background text colour mask.
1277	>0358						backgroundTextColour: .fill 1
1278							; &59 1 0 if plotting graphics foreground, 8 if plotting graphics background.
1279	>0359						graphicsPlotState: .fill 1
1280							; &5A 1 Current graphics plot mode (usually set to one of following two reduced mod 16).
1281	>035a						graphicsPlotMode: .fill 1
1282							; &5B 1 Current graphics foreground plot mode (as set by VDU 18).
1283	>035b						foregroundGCOLMode: .fill 1
1284							; &5C 1 Current graphics background plot mode (as set by VDU 18).
1285	>035c						backgroundGCOLMode: .fill 1
1286							; &5D 2 Address of routine to process current VDU sequence.
1287	>035d						jumpVector: .fill 2
1288							; &5F 1 Value for 6845 register 10 to revert to on leaving cursor editing.
1289	>035f						lastCursorStartRegisterValue: .fill 1
1290							; &60 1 (Number of logical colours)-1 (0 if Teletext).
1291	>0360						numberOfLogicalColoursMinusOne: .fill 1
1292							; &61 1 (Number of pixels/byte)-1 (0 if not graphics).
1293	>0361						pixelsPerByteMinusOne: .fill 1
1294							; &62 1 Mask for leftmost pixel in a byte.
1295	>0362						colourMaskLeft: .fill 1
1296							; &63 1 Mask for rightmost pixel in a byte.
1297	>0363						colourMaskRight: .fill 1
1298							; &64 1 Output cursor X coordinate when cursor editing, but input cursor X coordinate when cursor editing and inside an 'unknown PLOT codes' routine.
1299	>0364						editCursorXPosition: .fill 1
1300							; &65 1 Output cursor Y coordinate when cursor editing, but input cursor Y coordinate when cursor editing and inside an 'unknown PLOT codes' routine.
1301	>0365						editCursorYPosition: .fill 1
1302							; &66 1 Cursor control flags (as set by VDU 23 16).
1303	.0366						cursorFlags: .block
1304	>0366						                .fill 1
1305							; MasRef E.3-18
1306	=$40						noSpecialVDU5Actions=$40
1307	=$20						noMoveCursorAfterPrint=$20
1308	=$10						noVerticalScroll=$10
1309	=$08						swapAxes=$08                    ;if set, X=vert; if clear, X=horiz
1310	=$04						invertVertical=$04              ;if set, vert=up; if clear, vert=down
1311	=$02						invertHorizontal=$02            ;if set, horiz=left; if clear, horiz=right
1312	=$01						scrollProtect=$01
1313							                .endblock
1314							; &67 1 Dot pattern (as set by VDU 23 6).
1315	>0367						dotPattern: .fill 1
1316							; &68 1 Current state of dot pattern.
1317	>0368						dotPatternState: .fill 1
1318							; &69 1 0 if colour being plotted is solid, non-zero if colour is an ECF
1319	>0369						isColourECF: .fill 1
1320							; &6A 1 0 if graphics foreground colour is solid, non-zero if foreground colour is an ECF
1321	>036a						isForegroundECF: .fill 1
1322							; &6B 1 0 if graphics background colour is solid, non-zero if background colour is an ECF
1323	>036b						isBackgroundECF: .fill 1
1324							; &6C 1 Top bit set when cursor is in "column 81".
1325	>036c						column81: .fill 1
1326							; &6D 1 Current graphics foreground colour (as set by VDU 18).
1327	>036d						foregroundGraphicsColour: .fill 1
1328							; &6E 1 Current graphics background colour (as set by VDU 18)
1329	>036e						backgroundGraphicsColour: .fill 1
1330							; &6F-&7E Software copy of the current palette.
1331	>036f						currentPalette: .fill 16
1332							; &7F 1 Reserved.
1333	>037f						reserved: .fill 1
1334							                .endstruct
1338							                .endvirtual

1340							; vduQueueItemAddr: .function index
1341							;                 .cerror index<0||index>=vdu.queueSize,"bad VDU queue index"
1342							;                 .endfunction vdu.queue+vdu.queueSize-1-index

1344							; Presumed addresses in ANDY that don't happen to coincide with other
1345							; labels.
1346							;
1347							; MasRef E.4-5, MasRef F.6-10
1348							;
1349							; &8000-83FF  RAM  Soft key expansions buffer
1350							; &8400-87FF  RAM  VDU workspace.
1351							; &8800-07    RAM  ECF pattern 1 definition.
1352							; &8808-0F    RAM  ECF pattern 2 definition.
1353							; &8810-17    RAM  ECF pattern 3 definition.
1354							; &8818-1F    RAM  ECF pattern 4 definition.
1355							; &8820-27    RAM  Current foreground ECF pattern or solid colour.
1356							; &8828-2F    RAM  Current background ECF pattern or solid colour.
1357							; &8830-BF    RAM  VDU workspace.
1358							; &88C0-FF    RAM  Reserved for future expansion.
1359							; &8900-FF    RAM  Current definitions of characters &20-3F.
1360							; &8A00-FF    RAM  Current definitions of characters &40-5F.
1361							; &8B00-FF    RAM  Current definitions of characters &60-7F.
1362							; &8C00-FF    RAM  Current definitions of characters &80-9F.
1363							; &8D00-FF    RAM  Current definitions of characters &A0-BF.
1364							; &8E00-FF    RAM  Current definitions of characters &C0-DF.
1365							; &8F00-FF    RAM  Current definitions of characters &E0-FF.

1367							VDUCoordinate: .struct
1368	>0000						x: .fill 2
1369	>0002						y: .fill 2
1370							                .endstruct

1372							VDUAABB: .struct
1373	.0000						min: .dstruct VDUCoordinate
1368	>0000						x: .fill 2
1369	>0002						y: .fill 2
1370							                .endstruct
1374	.0004						max: .dstruct VDUCoordinate
1368	>0004						x: .fill 2
1369	>0006						y: .fill 2
1370							                .endstruct
1375							                .endstruct

1377							GenericWorkspaceVDUVariables: .struct
1378	.0000						_28:
1379	>0000						                .fill 1
1380	.0001						_29:
1381	>0001						                .fill 1
1382	.0002						_2A:
1383	>0002						                .fill 1
1384	.0003						_2B:
1385	>0003						                .fill 1
1386	.0004						_2C:
1387	>0004						                .fill 1
1388	.0005						_2D:
1389	>0005						                .fill 1
1390	.0006						_2E:
1391	>0006						                .fill 1
1392	.0007						_2F:
1393	>0007						                .fill 1
1394	.0008						_30:
1395	>0008						                .fill 1
1396	.0009						_31:
1397	>0009						                .fill 1
1398	.000a						_32:
1399	>000a						                .fill 1
1400	.000b						_33:
1401	>000b						                .fill 1
1402	.000c						_34:
1403	>000c						                .fill 1
1404	.000d						_35:
1405	>000d						                .fill 1
1406	.000e						_36:
1407	>000e						                .fill 1
1408	.000f						_37:
1409	>000f						                .fill 1
1410	.0010						_38:
1411	>0010						                .fill 1
1412	.0011						_39:
1413	>0011						                .fill 1
1414	.0012						_3A:
1415	>0012						                .fill 1
1416	.0013						_3B:
1417	>0013						                .fill 1
1418	.0014						_3C:
1419	>0014						                .fill 1
1420	.0015						_3D:
1421	>0015						                .fill 1
1422	.0016						_3E:
1423	>0016						                .fill 1
1424	.0017						_3F:
1425	>0017						                .fill 1
1426	.0018						_40:
1427	>0018						                .fill 1
1428	.0019						_41:
1429	>0019						                .fill 1
1430	.001a						_42:
1431	>001a						                .fill 1
1432	.001b						_43:
1433	>001b						                .fill 1
1434	.001c						_44:
1435	>001c						                .fill 1
1436	.001d						_45:
1437	>001d						                .fill 1
1438	.001e						_46:
1439	>001e						                .fill 1
1440	.001f						_47:
1441	>001f						                .fill 1
1442	.0020						_48:
1443	>0020						                .fill 1
1444	.0021						_49:
1445	>0021						                .fill 1
1446							                .endstruct

1448							EllipseWorkspaceVDUVariables: .struct
1449							                ; https://tobylobster.github.io/GXR-pages/gxr/S-s3.html#SP4
1450	.0000						aspectRatio:
1451	>0000						                .fill 3
1452	.0003						shear:
1453	>0003						                .fill 3
1454	.0006						halfHeightCounter:
1455	>0006						                .fill 2
1456	.0008						halfHeightSquared:
1457	>0008						                .fill 4
1458	.000c						pointC:
1459	>000c						                .fill 2
1460	.000e						pointD:
1461	>000e						                .fill 2
1462	.0010						leftPoint:
1463	>0010						                .fill 2
1464	.0012						rightPoint:
1465	>0012						                .fill 2
1466	.0014						pointA:
1467	>0014						                .fill 2
1468	.0016						pointB:
1469	>0016						                .fill 2
1470	.0018						pointE:
1471	>0018						                .fill 2
1472	.001a						currentOffsetX:
1473	>001a						                .fill 2
1474	.001c						plotPointX:
1475	.001c						pointF:
1476	>001c						                .fill 2
1477	.001e						plotPointY:
1478	>001e						                .fill 2
1479							                .endstruct

1481							HorizontalLineFillWorkspaceZP: .struct
1482	>0000						notByteMatch: .fill 1
1483	>0001						a: .fill 1
1484	>0002						b: .fill 2
1485							;c: .fill 2
1486	>0004						pixelsX: .fill 2
1487	>0006						d: .fill 1
1488	>0007						resultEOR: .fill 1
1489							                .endstruct

1491							MoveOrCopyRectangleWorkspaceVDUVariables: .struct
1492	.0000						src: .dstruct VDUAABB
1373	.0000						min: .dstruct VDUCoordinate
1368	>0000						x: .fill 2
1369	>0002						y: .fill 2
1370							                .endstruct
1374	.0004						max: .dstruct VDUCoordinate
1368	>0004						x: .fill 2
1369	>0006						y: .fill 2
1370							                .endstruct
1375							                .endstruct
1493	.0008						L30:
1494	>0008						                .fill 4
1495	.000c						dest: .dstruct VDUAABB
1373	.000c						min: .dstruct VDUCoordinate
1368	>000c						x: .fill 2
1369	>000e						y: .fill 2
1370							                .endstruct
1374	.0010						max: .dstruct VDUCoordinate
1368	>0010						x: .fill 2
1369	>0012						y: .fill 2
1370							                .endstruct
1375							                .endstruct
1496	.0014						L3C:
1497	>0014						                .fill 4
1498	.0018						L40:
1499	>0018						                .fill 2
1500	.001a						shiftToNextByte:
1501	>001a						                .fill 2
1502	.001c						L44:
1503	>001c						                .fill 1
1504	.001d						copy:
1505	>001d						                .fill 1         ;0=move, 2=copy
1506	.001e						L46:
1507	>001e						                .fill 1
1508	.001f						L47:
1509	>001f						                .fill 1

1511							                .endstruct

1513							HorizontalLineFillWorkspaceVDUVariables: .struct
1514	>0000						                .fill 6
1515	.0006						pixelsX:                        ;2e
1516	>0006						                .fill 2
1517	.0008						pixelsY:                        ;30
1518	>0008						                .fill 2
1519	.000a						pixelsRightEndX:
1520	>000a						                .fill 2         ;32
1521	.000c						pixelsLimitX:                   ;34
1522	>000c						                .fill 2
1523							                .endstruct

1525							HorizontalLineFillWorkspaceANDY: .struct
1526	>0000						ecfPattern: .fill 8
1527							                .endstruct

1529	=16						softKeyCount=16
1530	=$400						softKeyDataTotalSize=$400

1532							                .virtual $8000
1533	.8000						andy: .block
1534	.8000						softKeys: .block
1535	>8000						stringLSBs: .fill softKeyCount
1536	>8010						endLSB: .fill 1
1537	>8011						stringMSBs: .fill softKeyCount
1538	>8021						endMSB: .fill 1
1539	.8022						strings:
1540	>8022						                .fill softKeys+$400-*
1541	.8400						end:
1542							                .endblock
1543	>8400						                .fill $8800-*;(softKeyCount*2+1)
1544	.8800						ecfPatterns:
1545	>8800						ecfPattern1: .fill 8
1546	>8808						ecfPattern2: .fill 8
1547	>8810						ecfPattern3: .fill 8
1548	>8818						ecfPattern4: .fill 8
1549	.8820						currentECFPatterns:
1550	>8820						fgECFPattern: .fill 8
1551	>8828						bgECFPattern: .fill 8
1552	.8830						workspace:
1553							                .union
1554	.8830						hlfw: .dstruct HorizontalLineFillWorkspaceANDY
1526	>8830						ecfPattern: .fill 8
1527							                .endstruct
1555	>8830						                .fill 208
1556							                .endunion
1557	.8900						softCharacterDefinitions:
1558	>8900						                .fill (256-32)*8
1561							                .endblock
1562							                .endvirtual

1565	=$8000						L8000=$8000
1566	=$8001						L8001=$8001
1567	=$8002						L8002=$8002
1568	=$8004						L8004=$8004
1569	=$8010						L8010=$8010
1570	=$8011						L8011=$8011
1571	=$8012						L8012=$8012
1572							                ;l8011=$8011
1573							                ;l8012=$8012
1574	=$8021						L8021=$8021

1576							; see $d40d, $d4ae
1577							;
1578							; (suspect these are actually references to $8840-$104 and $8848-$104)
1579	=$873c						L873C=$873c
1580	=$8744						L8744=$8744

1582	=$8400						L8400=$8400
1583	=$8500						L8500=$8500
1584	=$8600						L8600=$8600
1585	=$8700						L8700=$8700
1586	=$87f8						L87F8=$87f8
1587	=$87ff						L87FF=$87FF
1588	=$8800						L8800=$8800
1589	=$8803						L8803=$8803
1590	=$8804						L8804=$8804
1591	=$881e						L881E=$881E
1592	=$8820						L8820=$8820
1593	=$8830						multiplicand=$8830              ; 3 bytes
1594	=$8830						L8830=$8830
1595	=$8831						L8831=$8831
1596	=$8832						L8832=$8832
1597	=$8833						L8833=$8833
1598	=$8834						multiplier=$8834                ; 3 bytes
1599	=$8834						product=$8834                   ; 6 bytes
1600	=$8834						sqrtNumber=$8834                ; 6 bytes
1601	=$8834						L8834=$8834
1602	=$8835						L8835=$8835
1603	=$8836						L8836=$8836
1604	=$8837						L8837=$8837
1605	=$8838						L8838=$8838
1606	=$8839						L8839=$8839
1607							;dividend=$883a                  ; 3 bytes
1608	=$883a						L883A=$883a
1609	=$883b						L883B=$883b
1610	=$883c						L883C=$883C
1611	=$883d						L883D=$883D
1612							;divisor=$883e                   ; 3 bytes
1613	=$883e						L883E=$883e
1614	=$883f						L883F=$883f
1615	=$8840						L8840=$8840
1616	=$8841						ellipseSignFlag=$8841           ; 1 byte
1617	=$8841						L8841=$8841
1618	=$8842						ellipseAccumulatedShear=$8842   ; 3 bytes
1619	=$8842						L8842=$8842
1620	=$8843						L8843=$8843
1621	=$8844						L8844=$8844
1622	=$8845						ellipseCountOddNumbers=$8845    ; 4 bytes
1623	=$8845						L8845=$8845
1624	=$8846						L8846=$8846
1625	=$8847						L8847=$8847
1626	=$8848						L8848=$8848
1627	=$8849						ellipseCountSquares=$8849       ; 4 bytes
1628	=$8849						L8849=$8849
1629	=$884a						L884A=$884a
1630	=$884b						L884B=$884b
1631	=$884c						L884C=$884c
1632	=$884d						ellipseCountHeight=$884d

1634							;-------------------------------------------------------------------------

1645							                .virtual $00
1646							                .union
1647	.0000						tubeOSFILEParameterBlock: .dstruct OSFILEParameterBlock
492	.0000						fileName:
493	>0000						                .fill 2
494	.0002						addresses:
495	.0002						load:
496	>0002						                .fill 4
497	.0006						exec:
498	>0006						                .fill 4
499	.000a						length:
500	.000a						saveStart:
501	>000a						                .fill 4
502	.000e						attributes:
503	.000e						saveEnd:
504	>000e						                .fill 4
505							                .endstruct
1648	.0000						tubeOSGBPBParameterBlock: .dstruct OSGBPBParameterBlock
461	.0000						handle:
462	>0000						                .fill 1
463	.0001						address:
464	>0001						                .fill 4
465	.0005						count:
466	>0005						                .fill 4
467	.0009						ptr:
468	>0009						                .fill 4
469							                .endstruct
1652	>0000						tubeLanguageHostAddr: .fill 2
1654							                .endunion
1655	>0012						tubeTransferAddr: .fill 2
1656	>0014						tubeNotClaimed: .fill 1            ;bit 7 clear if tube claimed
1657	>0015						tubeClaimantID: .fill 1
1665	.0016						tubeZeroPageCodeAddr:
1666							                ; Tube handler zero-page code sits here.
1667							                .endvirtual

1669	=$700						tubeStringBuffer=$700
1670	=$0128						tubeOSWORDBuffer=$0128

1673							                ; Need to tidy these up...
1675	=$53						tubeLanguageParasiteAddr=tubeHost.zeroPageCode.languageParasiteAddr

1683	=$16						tubeHostBrkHandler=tubeHost.zeroPageCode.brkHandler
1684	=$32						tubeHostIdleStartup=tubeHost.zeroPageCode.idleStartup
1685	=$36						tubeHostIdleLoop=tubeHost.zeroPageCode.idleLoop

1690							;-------------------------------------------------------------------------
1691							; MasRef E.4-4
1692							                .virtual $d0
1693	.00d0						STATE: .block
1694	>00d0						                .fill 1
1695							                ; D.2-32
1696	=$01						isPrinterEnabled=$01
1697	=$02						isScrollingDisabled=$02
1698	=$04						isPagedScrolling=$04
1699	=$08						isTextWindow=$08
1700	=$10						isShadowMode=$10
1701	=$20						isVDU5=$20
1702	=$40						isCursorEditing=$40
1703	=$80						isVDU21=$80
1704							                .bend

1706	>00d1						ZMASK: .fill 1                       ;Pixel mask
1707	>00d2						ZORA: .fill 1                        ;Text OR mask
1708	>00d3						ZEOR: .fill 1                        ;Text EOR mask
1709	>00d4						ZGORA: .fill 1                       ;Graphics OR mask
1710	>00d5						ZGEOR: .fill 1                       ;Graphics EOR mask
1711	>00d6						ZMEMG: .fill 2                       ;Graphics pointer
1712	>00d8						ZMEMT: .fill 2                       ;Text pointer
1713	>00da						ZTEMP: .fill 2                       ;Temporary space
1714	>00dc						ZTEMPB: .fill 2                      ;Temporary space
1715	>00de						ZTEMPC: .fill 2                      ;Temporary space
1716	>00e0						ZTEMPD: .fill 2                      ;Temporary space
1717							                .endv

1719							                .virtual ZTEMP
1720	.00da						zhlfw: .dstruct HorizontalLineFillWorkspaceZP
1482	>00da						notByteMatch: .fill 1
1483	>00db						a: .fill 1
1484	>00dc						b: .fill 2
1485							;c: .fill 2
1486	>00de						pixelsX: .fill 2
1487	>00e0						d: .fill 1
1488	>00e1						resultEOR: .fill 1
1489							                .endstruct
1721							                .endv

1724	=$f8						softKeyExpansionPtr=$f8       ;pointer to current char when expanding soft key.
1725	=$fa						SEIWKA=$fa
1726	=$fb						SEIWKB=$fb

1728	=$d8						vduWriteCursor=$d8

1730	=$d00						nmiEntryPoint=$d00

1732	=0						gcolModeOverwrite=0
1733	=1						gcolModeOR=1
1734	=2						gcolModeAND=2
1735	=3						gcolModeEOR=3
1736	=4						gcolModeInvert=4
1737	=5						gcolModeLeave=5

1739							;-------------------------------------------------------------------------

1741							StarKEYWorkspace: .struct
1742	>0000						newStringLength: .fill 1
1743	>0001						destPtr: .fill 2
1744	>0003						srcPtr: .fill 2
1745	>0005						counter: .fill 2
1746							                .endstruct

1748							OSGBPBWorkspace: .struct
1749	>0000						ptr: .fill 2
1750							                .endstruct

1752							ParseFileNameFSWorkspace: .struct
1753	>0000						fsInfoOffset: .fill 1
1754							                .endstruct

1756							OSCLIWorkspace: .struct
1757	>0000						tablePtr: .fill 2
1758							                .endstruct

1760							                ; TODO - could do being renamed, as it's used (in the
1761							                ; same way) by *UNPLUG and *INSERT.
1762							StarROMSWorkspace: .struct
1763	>0000						insertedFlagMask: .fill 1
1764							                .endstruct

1766							TerminalHELPWorkspace: .struct
1767	>0000						tablePtr: .fill 2
1768							                .endstruct

1770							                ; TODO - tediously verbose names. Acronyms work well
1771							                ; enough for the VDU variables. Do the same thing
1772							                ; here.
1773							                .virtual $b0
1774							                .union
1775	.00b0						starKEYWorkspace: .dstruct StarKEYWorkspace
1742	>00b0						newStringLength: .fill 1
1743	>00b1						destPtr: .fill 2
1744	>00b3						srcPtr: .fill 2
1745	>00b5						counter: .fill 2
1746							                .endstruct
1776	.00b0						osgbpbWorkspace: .dstruct OSGBPBWorkspace
1749	>00b0						ptr: .fill 2
1750							                .endstruct
1777	.00b0						parseFileNameFSWorkspace: .dstruct ParseFileNameFSWorkspace
1753	>00b0						fsInfoOffset: .fill 1
1754							                .endstruct
1778	.00b0						oscliWorkspace: .dstruct OSCLIWorkspace
1757	>00b0						tablePtr: .fill 2
1758							                .endstruct
1779	.00b0						starROMSWorkspace: .dstruct StarROMSWorkspace
1763	>00b0						insertedFlagMask: .fill 1
1764							                .endstruct
1780	.00b0						terminalHELPWorkspace: .dstruct TerminalHELPWorkspace
1767	>00b0						tablePtr: .fill 2
1768							                .endstruct
1781							                .endunion
1782							                .endvirtual

1784							;-------------------------------------------------------------------------

1786							; ROM number containing Terminal
1787	=15						terminalROM=15

1789							; ROM number containing the extXXXX entry points
1796	=14						extROM=14

1803							; Base page for VDU routines
1804	=$c0						vduRoutinesPage=$c0

1807	=14						cmosBytesOffset=RTC.ram

1812							; The CMOSBytes struct covers all versions, to ensure that the offsets
1813							; are consistent. This means there are gaps and useless entries in
1814							; some cases!
1815							;
1816							; The 30 bytes reserved for the OS aren't currently in danger of
1817							; running out.
1818							;
1819							; Some of the labels are removed based on configuration. The offsets
1820							; and bits are still reserved.
1821							;
1822							; For allocations, see: https://beebwiki.mdfs.net/CMOS_configuration_RAM_allocation
1823							CMOSBytes: .struct
1824	>0000						econetStationNumber: .fill 1
1825	>0001						fileServerStationNumber: .fill 1
1826	>0002						fileServerNetworkNumber: .fill 1
1827	>0003						printerServerStationNumber: .fill 1
1828	>0004						printerServerNetworkNumber: .fill 1
1829	.0005						defaultROMs: .block
1830	>0005						                .fill 1
1831	=0						fsShift=0
1832	=4						languageShift=4
1833							                .endblock

1835	>0006						insertedROMs: .fill 2

1837	>0008						editROMByte: .fill 1
1838	>0009						telecommsByte: .fill 1

1840	.000a						defaults0: .block
1841	>000a						                .fill 1
1842	=0						modeShift=0
1843	=7						modeMask=7
1844	=8						shadowMask=8
1845	=16						interlaceMask=16
1846	=7						tvMask=7
1847	=5						tvShift=5
1848							                .endblock

1850	.000b						defaults1: .block
1851	>000b						                .fill 1
1852	=0						fdriveShift=0
1853	=7						fdriveMask=7
1854	=8						shiftLockMask=8
1855	=16						noLockMask=16
1856	=32						capsLockMask=32
1857	=64						adfsLoadDirMask=64
1858	=128						floppyDrive=128
1859							                .endblock

1861	>000c						keyboardAutoRepeatDelay: .fill 1
1862	>000d						keyboardAutoRepeatRate: .fill 1
1863	>000e						printerIgnoreChar: .fill 1

1865	.000f						defaults2: .block
1866	>000f						                .fill 1
1868	=1						tubeOnMask=1
1870	=2						usePrinterIgnoreCharMask=2
1871	=7						serialBaudRateIndexMask=7
1872	=2						serialBaudRateIndexShift=2
1873	=7						fx5SettingMask=7
1874	=5						fx5SettingShift=5
1875							                .endblock

1877	.0010						defaults3: .block
1878	>0010						                .fill 1
1879							; bit 0 is for Master Emulation ROM's *CONFIGURE SHADOW
1880	=2						loudMask=2
1882	=4						extTubeMask=4
1884	=8						protectedScrollingMask=8
1885	=16						autoBootMask=16
1886	=7						serialDataFormatMask=7
1887	=5						serialDataFormatShift=5
1888							                .endblock

1894	>0011						                .fill 1

1902	>0012						                .fill 1

1911	>0013						                .fill 1

1921	>0014						                .fill 1

1931	>0015						                .fill 1

1934							                .endstruct

1938							                .elif version==320||version==350||version==400
1939	=17						cmosBytesSize=CMOSBytes.defaults3+1

1946	=$ef						originalA=$ef
1947	=$f0						originalX=$f0
1948	=$f1						originalY=$f1
1949	=$fc						TEMPA=$fc
1950	=$fd						errPtr=$fd                      ;REPTR in OS 1.20
1951	=$ff						escapeFlag=$ff

1953	=$8c0						envelope1Data=$8c0

1955	=$8000						sidewaysROMLanguageEntry=$8000
1956	=$8003						sidewaysROMServiceEntry=$8003
1957							                .virtual $8006
1958	.8006						sidewaysROMType: .block
1959	=32						hasRelocationAddress=32
1960	=64						hasLanguageEntry=64
1961	=128						hasServiceEntry=128
1962							                .endblock
1963							                .endvirtual
1964	=$8007						sidewaysROMCopyrightOffset=$8007
1965	=$8008						sidewaysROMVersion=$8008
1966	=$8009						sidewaysROMName=$8009

1968							;-------------------------------------------------------------------------

1970							                ; [MasRef D.3-22]
1971							ClockStringFormat: .struct
1972	.0000						ddd:
1973	>0000						                .fill 3
1974	>0003						                .fill 1                      ;','
1975	.0004						nn:
1976	>0004						                .fill 2
1977	>0006						                .fill 1                      ;' '
1978	.0007						mmm:
1979	>0007						                .fill 3
1980	>000a						                .fill 1                      ;' '
1981	.000b						yyyy:
1982	>000b						                .fill 4
1983	>000f						                .fill 1                      ;'.'
1984	.0010						hh:
1985	>0010						                .fill 2
1986	>0012						                .fill 1                      ;':'
1987	.0013						mm:
1988	>0013						                .fill 2
1989	>0015						                .fill 1                      ;':'
1990	.0016						ss:
1991	>0016						                .fill 2
1992	.0018						cr:
1993	>0018						                .fill 1                      ;'\n'
1994							                .endstruct

1996							;-------------------------------------------------------------------------

:1	;******  Return to file: mos320.s65

40							                .include "src/terminal_workspace.s65"

:4	;******  Processing file: src/terminal_workspace.s65

1							;-------------------------------------------------------------------------

3							; Not really MOS stuff. This is the Terminal ROM zero page workspace.

5	=$70						oldINSV=$70
6	=$72						oldREMV=$72

9							;-------------------------------------------------------------------------

11							zterm: .struct
12	=$39						numRowsMinusOne=$39
13	=$38						numColumns=$38
14	=$37						numColumnsMinusOne=$37
15							; TODO old INSV and oldREMV should probably go in here too!
16							                .endstruct

:1	;******  Return to file: mos320.s65

42	=320						version=320
43	="OS 3.20"					versionString="OS 3.20"

45							; The number of sections will probably increase, as a longer term goal
46							; is to have a bit of flexibility here. Stuff that's got documented
47							; addresses ($FFxx, default font, VDU driver entry points, etc.) needs
48							; to stay fixed, but, space permitting, other stuff could be
49							; rearranged.

51							*=$ba00
52							                .dsection ext
53							                .cwarn *>$c000,'Ext ROM is too large'

55							*=$8000
56							                .dsection utils
57							                .cwarn *>$c000,'Terminal ROM is too large'

59							*=$c000
60							                .dsection mos
61							                ; there's no need for a size check here - 64tass gives
62							                ; you an error if the code would go past the 64 K
63							                ; barrier.

65							;-------------------------------------------------------------------------

67							                .section ext
68							                .include "src/ext.s65"

:5	;******  Processing file: src/ext.s65

1							; -*- comment-column:45; -*-

3	.ba00						plotEllipseOutline:
4							                ; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP1
5	.ba00		20 2f bb	jsr $bb2f	                jsr     ellipseInitialisation
7	.ba03		80 03		bra $ba08	                bra     startEllipseOutline

12	.ba05						ellipseOutlineLoop:
13	.ba05		20 e9 bb	jsr $bbe9	                jsr     updateEllipseIncrementally

15	.ba08						startEllipseOutline:
16	.ba08		a2 34		ldx #$34	                ldx     #VDUVariables.ew.pointC
17	.ba0a		a0 3c		ldy #$3c	                ldy     #VDUVariables.ew.pointA
18	.ba0c		20 cc d5	jsr $d5cc	                jsr     sortVDUVariableWords
20	.ba0f		a2 38		ldx #$38	                ldx     #VDUVariables.ew.leftPoint
23	.ba11		bd 01 03	lda $0301,x	                lda     vduv+1,x
27	.ba14		8d 43 03	sta $0343	                sta     vduv.ew.currentOffsetX+1
29	.ba17		bd 00 03	lda $0300,x	                lda     vduv+0,x
30	.ba1a		aa		tax		                tax

35	.ba1b						ellipseOutlineContinueRowLoop:
36	.ba1b		8e 42 03	stx $0342	                stx     vduv.ew.currentOffsetX+0
37	.ba1e		20 20 bd	jsr $bd20	                jsr     outlineEllipsePlotOnePointAndReflection
38	.ba21		e8		inx		                inx
39	.ba22		d0 03		bne $ba27	                bne     +
40	.ba24		ee 43 03	inc $0343	                inc     vduv.ew.currentOffsetX+1
41	.ba27						+
42	.ba27		8a		txa		                txa
43	.ba28		d9 00 03	cmp $0300,y	                cmp     vduv+0,y
44	.ba2b		ad 43 03	lda $0343	                lda     vduv.ew.currentOffsetX+1
45	.ba2e		f9 01 03	sbc $0301,y	                sbc     vduv+1,y
46	.ba31		30 e8		bmi $ba1b	                bmi     ellipseOutlineContinueRowLoop

49	.ba33		a2 36		ldx #$36	                ldx     #VDUVariables.ew.pointD
50	.ba35		a0 3e		ldy #$3e	                ldy     #VDUVariables.ew.pointB
51	.ba37		20 cc d5	jsr $d5cc	                jsr     sortVDUVariableWords
52	.ba3a		a0 3a		ldy #$3a	                ldy     #VDUVariables.ew.rightPoint
53	.ba3c		b9 01 03	lda $0301,y	                lda     vduv+1,y
54	.ba3f		8d 43 03	sta $0343	                sta     vduv.ew.currentOffsetX+1
55	.ba42		b9 00 03	lda $0300,y	                lda     vduv+0,y
56	.ba45		a8		tay		                tay

58	.ba46						ellipseOutlineContinueRowLoop2:
59	.ba46		8c 42 03	sty $0342	                sty     vduv.ew.currentOffsetX+0
60	.ba49		20 20 bd	jsr $bd20	                jsr     outlineEllipsePlotOnePointAndReflection
61	.ba4c		98		tya		                tya
62	.ba4d		d0 03		bne $ba52	                bne     +
63	.ba4f		ce 43 03	dec $0343	                dec     vduv.ew.currentOffsetX+1
64	.ba52						+
65	.ba52		88		dey		                dey
66	.ba53		18		clc		                clc
67	.ba54		98		tya		                tya
68	.ba55		fd 00 03	sbc $0300,x	                sbc     vduv+0,x
69	.ba58		ad 43 03	lda $0343	                lda     vduv.ew.currentOffsetX+1
70	.ba5b		fd 01 03	sbc $0301,x	                sbc     vduv+1,x
71	.ba5e		10 e6		bpl $ba46	                bpl     ellipseOutlineContinueRowLoop2
72	.ba60		ad 2f 03	lda $032f	                lda     vduv.ew.halfHeightCounter+1
73	.ba63		10 a0		bpl $ba05	                bpl     ellipseOutlineLoop
74	.ba65		80 14		bra $ba7b	                bra     LBA7B

129							;-------------------------------------------------------------------------

131	.ba67						plotEllipseFilled:
132	.ba67		20 2f bb	jsr $bb2f	                jsr     ellipseInitialisation
133	.ba6a		80 03		bra $ba6f	                bra     startFilledEllipse

136	.ba6c						filledEllipseLoop:
137	.ba6c		20 e9 bb	jsr $bbe9	                jsr     updateEllipseIncrementally

139	.ba6f						startFilledEllipse:
140	.ba6f		a2 3a		ldx #$3a	                ldx     #VDUVariables.ew.rightPoint
141	.ba71		a0 38		ldy #$38	                ldy     #VDUVariables.ew.leftPoint
142	.ba73		20 87 ba	jsr $ba87	                jsr     fillEllipseOneRowAndReflection
143	.ba76		ad 2f 03	lda $032f	                lda     vduv.ew.halfHeightCounter+1
144	.ba79		10 f1		bpl $ba6c	                bpl     filledEllipseLoop

146	.ba7b						LBA7B:
147	.ba7b		ee 4d 88	inc $884d	                inc     ellipseCountHeight+0
148	.ba7e		d0 03		bne $ba83	                bne     LBA83
149	.ba80		ee 4e 88	inc $884e	                inc     ellipseCountHeight+1

151	.ba83						LBA83:
152	.ba83		a2 3e		ldx #$3e	                ldx     #VDUVariables.ew.pointB
153	.ba85		a0 3c		ldy #$3c	                ldy     #VDUVariables.ew.pointA

155							; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP9
156	.ba87						fillEllipseOneRowAndReflection:
157	.ba87		da		phx		                phx
158	.ba88		5a		phy		                phy
159	.ba89		18		clc		                clc
160	.ba8a		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
161	.ba8d		79 00 03	adc $0300,y	                adc     vduv+0,y
162	.ba90		8d 40 03	sta $0340	                sta     vduv.ew.pointE+0
163	.ba93		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
164	.ba96		79 01 03	adc $0301,y	                adc     vduv+1,y
165	.ba99		8d 41 03	sta $0341	                sta     vduv.ew.pointE+1
166	.ba9c		18		clc		                clc
167	.ba9d		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
168	.baa0		7d 00 03	adc $0300,x	                adc     vduv+0,x
169	.baa3		8d 44 03	sta $0344	                sta     vduv.ew.plotPointX+0
170	.baa6		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
171	.baa9		7d 01 03	adc $0301,x	                adc     vduv+1,x
172	.baac		8d 45 03	sta $0345	                sta     vduv.ew.plotPointX+1
173	.baaf		18		clc		                clc
174	.bab0		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
175	.bab3		6d 4d 88	adc $884d	                adc     ellipseCountHeight+0
176	.bab6		a8		tay		                tay
177	.bab7		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
178	.baba		6d 4e 88	adc $884e	                adc     ellipseCountHeight+1
179	.babd		20 fe ba	jsr $bafe	                jsr     LBAFE
180	.bac0		7a		ply		                ply
181	.bac1		fa		plx		                plx
182	.bac2		ad 4d 88	lda $884d	                lda     ellipseCountHeight+0
183	.bac5		0d 4e 88	ora $884e	                ora     ellipseCountHeight+1
184	.bac8		f0 47		beq $bb11	                beq     rtsBB11
185	.baca		38		sec		                sec
186	.bacb		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
187	.bace		fd 00 03	sbc $0300,x	                sbc     vduv+0,x
188	.bad1		8d 40 03	sta $0340	                sta     vduv.ew.pointE+0
189	.bad4		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
190	.bad7		fd 01 03	sbc $0301,x	                sbc     vduv+1,x
191	.bada		8d 41 03	sta $0341	                sta     vduv.ew.pointE+1
192	.badd		38		sec		                sec
193	.bade		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
194	.bae1		f9 00 03	sbc $0300,y	                sbc     vduv+0,y
195	.bae4		8d 44 03	sta $0344	                sta     vduv.ew.pointF+0
196	.bae7		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
197	.baea		f9 01 03	sbc $0301,y	                sbc     vduv+1,y
198	.baed		8d 45 03	sta $0345	                sta     vduv.ew.pointF+1
199	.baf0		38		sec		                sec
200	.baf1		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
201	.baf4		ed 4d 88	sbc $884d	                sbc     ellipseCountHeight+0
202	.baf7		a8		tay		                tay
203	.baf8		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
204	.bafb		ed 4e 88	sbc $884e	                sbc     ellipseCountHeight+1

206	.bafe						LBAFE:
207	.bafe		8c 46 03	sty $0346	                sty     vduv.ew.plotPointY+0
208	.bb01		8c 42 03	sty $0342	                sty     vduv.ew.currentOffsetX+0
209	.bb04		8d 47 03	sta $0347	                sta     vduv.ew.plotPointY+1
210	.bb07		8d 43 03	sta $0343	                sta     vduv.ew.currentOffsetX+1
211	.bb0a		a2 44		ldx #$44	                ldx     #VDUVariables.ew.pointF
212	.bb0c		a0 40		ldy #$40	                ldy     #VDUVariables.ew.pointE
213	.bb0e		4c e8 da	jmp $dae8	                jmp     LDAE8

219	.bb11						rtsBB11:
220	.bb11		60		rts		                rts

225	.bb12						LBB12:
226	.bb12		68		pla		                pla
227	.bb13		68		pla		                pla
228	.bb14		9c 4d 88	stz $884d	                stz     ellipseCountHeight+0
229	.bb17		9c 4e 88	stz $884e	                stz     ellipseCountHeight+1
230	.bb1a		a2 29		ldx #$29	                ldx     #VDUVariables.ew.aspectRatio+1
231	.bb1c		a0 40		ldy #$40	                ldy     #VDUVariables.ew.pointE
232	.bb1e		20 fa bd	jsr $bdfa	                jsr     negateVDUVariableXIntoY
233	.bb21		a2 29		ldx #$29	                ldx     #VDUVariables.ew.aspectRatio+1
234	.bb23		a0 44		ldy #$44	                ldy     #VDUVariables.ew.pointF
235	.bb25		20 0c c9	jsr $c90c	                jsr     copyTwoBytesWithinVDUVariables
236	.bb28		a2 44		ldx #$44	                ldx     #VDUVariables.ew.pointF
237	.bb2a		a0 40		ldy #$40	                ldy     #VDUVariables.ew.pointE
238	.bb2c		4c 87 ba	jmp $ba87	                jmp     fillEllipseOneRowAndReflection

240	.bb2f						ellipseInitialisation:
241							                ; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP5
242	.bb2f		a0 24		ldy #$24	                ldy     #VDUVariables.graphicsCursorPixelsX
243	.bb31		a2 14		ldx #$14	                ldx     #VDUVariables.oldGraphicsCursorPixelsX
244	.bb33		a9 29		lda #$29	                lda     #VDUVariables.ew.aspectRatio+1
245	.bb35		20 78 d6	jsr $d678	                jsr     LD678
246	.bb38		9c 28 03	stz $0328	                stz     vduv.ew.aspectRatio+0
247	.bb3b		a0 22		ldy #$22	                ldy     #VDUVariables.queueEnd-2
248	.bb3d		a2 16		ldx #$16	                ldx     #VDUVariables.oldGraphicsCursorPixelsY
249	.bb3f		a9 2e		lda #$2e	                lda     #VDUVariables.ew.halfHeightCounter
250	.bb41		20 78 d6	jsr $d678	                jsr     LD678
251	.bb44		ad 2e 03	lda $032e	                lda     vduv.ew.halfHeightCounter+0
252	.bb47		0d 2f 03	ora $032f	                ora     vduv.ew.halfHeightCounter+1
253	.bb4a		f0 c6		beq $bb12	                beq     LBB12
254	.bb4c		2a		rol a		                rol     a
255	.bb4d		8d 41 88	sta $8841	                sta     L8841
256	.bb50		a0 20		ldy #$20	                ldy     #VDUVariables.queueEnd-4
257	.bb52		a2 14		ldx #$14	                ldx     #VDUVariables.oldGraphicsCursorPixelsX
258	.bb54		a9 2c		lda #$2c	                lda     #VDUVariables.ew.shear+1
259	.bb56		20 78 d6	jsr $d678	                jsr     LD678
260	.bb59		9c 2b 03	stz $032b	                stz     vduv.ew.shear+0
261	.bb5c		2a		rol a		                rol     a
262	.bb5d		4d 41 88	eor $8841	                eor     ellipseSignFlag
263	.bb60		29 01		and #$01	                and     #1
264	.bb62		8d 41 88	sta $8841	                sta     ellipseSignFlag
265	.bb65		a2 28		ldx #$28	                ldx     #VDUVariables.ew.aspectRatio
266	.bb67		a0 2e		ldy #$2e	                ldy     #VDUVariables.ew.halfHeightCounter
267	.bb69		20 83 bd	jsr $bd83	                jsr     divide24By16Bits
268	.bb6c		a2 2b		ldx #$2b	                ldx     #VDUVariables.ew.shear
269	.bb6e		a0 2e		ldy #$2e	                ldy     #VDUVariables.ew.halfHeightCounter
270	.bb70		20 83 bd	jsr $bd83	                jsr     divide24By16Bits
271	.bb73		ad 41 88	lda $8841	                lda     L8841
272	.bb76		f0 0e		beq $bb86	                beq     LBB86
273	.bb78		38		sec		                sec
274	.bb79		a0 fd		ldy #$fd	                ldy     #$fd

276	.bb7b						LBB7B:
277	.bb7b		a9 00		lda #$00	                lda     #0
278	.bb7d		f9 2e 02	sbc $022e,y	                sbc     vduv.ew.shear-$fd,y
279	.bb80		99 2e 02	sta $022e,y	                sta     vduv.ew.shear-$fd,y
280	.bb83		c8		iny		                iny
281	.bb84		d0 f5		bne $bb7b	                bne     LBB7B

283	.bb86						LBB86:
284	.bb86		ad 2e 03	lda $032e	                lda     vduv.ew.halfHeightCounter+0
285	.bb89		8d 3c 88	sta $883c	                sta     L883C
286	.bb8c		ad 2f 03	lda $032f	                lda     vduv.ew.halfHeightCounter+1
287	.bb8f		20 ce d4	jsr $d4ce	                jsr     LD4CE
288	.bb92		a0 03		ldy #$03	                ldy     #3

290	.bb94						LBB94:
291	.bb94		b9 40 88	lda $8840,y	                lda     L8840,y
292	.bb97		99 30 03	sta $0330,y	                sta     vduv.ew.halfHeightSquared+0,y
293	.bb9a		88		dey		                dey
294	.bb9b		10 f7		bpl $bb94	                bpl     LBB94
295	.bb9d		a2 0a		ldx #$0a	                ldx     #$a

297	.bb9f						LBB9F:
298	.bb9f		9e 42 88	stz $8842,x	                stz     ellipseAccumulatedShear,x
299	.bba2		ca		dex		                dex
300	.bba3		10 fa		bpl $bb9f	                bpl     LBB9F
301	.bba5		ee 45 88	inc $8845	                inc     ellipseCountOddNumbers+0
302	.bba8		20 18 bc	jsr $bc18	                jsr     updateEllipse
303	.bbab		20 18 bc	jsr $bc18	                jsr     updateEllipse
304	.bbae		9c 4d 88	stz $884d	                stz     ellipseCountHeight+0
305	.bbb1		9c 4e 88	stz $884e	                stz     ellipseCountHeight+1
306	.bbb4		a2 3c		ldx #$3c	                ldx     #VDUVariables.ew.pointA
307	.bbb6		a0 36		ldy #$36	                ldy     #VDUVariables.ew.pointD
308	.bbb8		20 fa bd	jsr $bdfa	                jsr     negateVDUVariableXIntoY
309	.bbbb		a2 3e		ldx #$3e	                ldx     #VDUVariables.ew.pointB
310	.bbbd		a0 34		ldy #$34	                ldy     #VDUVariables.ew.pointC
311	.bbbf		20 fa bd	jsr $bdfa	                jsr     negateVDUVariableXIntoY
312	.bbc2		a2 3c		ldx #$3c	                ldx     #VDUVariables.ew.pointA
313	.bbc4		a0 3a		ldy #$3a	                ldy     #VDUVariables.ew.rightPoint
314	.bbc6		20 d6 d5	jsr $d5d6	                jsr     compareVDUVariableWords
315	.bbc9		10 07		bpl $bbd2	                bpl     LBBD2
316	.bbcb		20 0c c9	jsr $c90c	                jsr     copyTwoBytesWithinVDUVariables
317	.bbce		a2 36		ldx #$36	                ldx     #VDUVariables.ew.pointD
318	.bbd0		80 12		bra $bbe4	                bra     LBBE4

321	.bbd2						LBBD2:
322	.bbd2		a2 38		ldx #$38	                ldx     #VDUVariables.ew.leftPoint
323	.bbd4		a0 3e		ldy #$3e	                ldy     #VDUVariables.ew.pointB
324	.bbd6		20 d6 d5	jsr $d5d6	                jsr     compareVDUVariableWords
325	.bbd9		10 3c		bpl $bc17	                bpl     rtsBC17
326	.bbdb		a2 34		ldx #$34	                ldx     #VDUVariables.ew.pointC
327	.bbdd		a0 3a		ldy #$3a	                ldy     #VDUVariables.ew.rightPoint
328	.bbdf		20 0c c9	jsr $c90c	                jsr     copyTwoBytesWithinVDUVariables
329	.bbe2		a2 3e		ldx #$3e	                ldx     #VDUVariables.ew.pointB

331	.bbe4						LBBE4:
332	.bbe4		a0 38		ldy #$38	                ldy     #VDUVariables.ew.leftPoint
333	.bbe6		4c 0c c9	jmp $c90c	                jmp     copyTwoBytesWithinVDUVariables

335							;-------------------------------------------------------------------------
336							;
337							; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP6
338							;

340	.bbe9						updateEllipseIncrementally:
341	.bbe9		20 18 bc	jsr $bc18	                jsr     updateEllipse
342	.bbec		a0 3a		ldy #$3a	                ldy     #VDUVariables.ew.rightPoint
343	.bbee		a2 3c		ldx #$3c	                ldx     #VDUVariables.ew.pointA
344	.bbf0		20 d6 d5	jsr $d5d6	                jsr     compareVDUVariableWords
345	.bbf3		10 0d		bpl $bc02	                bpl     LBC02
346	.bbf5		ad 3c 03	lda $033c	                lda     vduv.ew.pointA+0
347	.bbf8		8d 3a 03	sta $033a	                sta     vduv.ew.rightPoint+0
348	.bbfb		ad 3d 03	lda $033d	                lda     vduv.ew.pointA+1
349	.bbfe		8d 3b 03	sta $033b	                sta     vduv.ew.rightPoint+1
350	.bc01		60		rts		                rts

352	.bc02						LBC02:
353	.bc02		a2 38		ldx #$38	                ldx     #VDUVariables.ew.leftPoint
354	.bc04		a0 3e		ldy #$3e	                ldy     #VDUVariables.ew.pointB
355	.bc06		20 d6 d5	jsr $d5d6	                jsr     compareVDUVariableWords
356	.bc09		10 0c		bpl $bc17	                bpl     rtsBC17
357	.bc0b		ad 3e 03	lda $033e	                lda     vduv.ew.pointB+0
358	.bc0e		8d 38 03	sta $0338	                sta     vduv.ew.leftPoint+0
359	.bc11		ad 3f 03	lda $033f	                lda     vduv.ew.pointB+1
360	.bc14		8d 39 03	sta $0339	                sta     vduv.ew.leftPoint+1

362	.bc17						rtsBC17:
363	.bc17		60		rts		                rts

365							;-------------------------------------------------------------------------
366							;
367							; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP7
368							;

370	.bc18						updateEllipse:
371	.bc18		a2 38		ldx #$38	                ldx     #VDUVariables.ew.leftPoint
372	.bc1a		a0 34		ldy #$34	                ldy     #VDUVariables.ew.pointC
373	.bc1c		20 1e c9	jsr $c91e	                jsr     copyFourBytesWithinVDUVariables
374	.bc1f		a2 3c		ldx #$3c	                ldx     #VDUVariables.ew.pointA
375	.bc21		a0 38		ldy #$38	                ldy     #VDUVariables.ew.leftPoint
376	.bc23		20 1e c9	jsr $c91e	                jsr     copyFourBytesWithinVDUVariables

378	.bc26		38		sec		                sec
379	.bc27		ad 30 03	lda $0330	                lda     vduv.ew.halfHeightSquared+0
380	.bc2a		ed 49 88	sbc $8849	                sbc     ellipseCountSquares+0
381	.bc2d		8d 36 88	sta $8836	                sta     sqrtNumber+2
382	.bc30		ad 31 03	lda $0331	                lda     vduv.ew.halfHeightSquared+1
383	.bc33		ed 4a 88	sbc $884a	                sbc     ellipseCountSquares+1
384	.bc36		8d 37 88	sta $8837	                sta     sqrtNumber+3
385	.bc39		ad 32 03	lda $0332	                lda     vduv.ew.halfHeightSquared+2
386	.bc3c		ed 4b 88	sbc $884b	                sbc     ellipseCountSquares+2
387	.bc3f		8d 38 88	sta $8838	                sta     sqrtNumber+4
388	.bc42		ad 33 03	lda $0333	                lda     vduv.ew.halfHeightSquared+3
389	.bc45		ed 4c 88	sbc $884c	                sbc     ellipseCountSquares+3
390	.bc48		8d 39 88	sta $8839	                sta     sqrtNumber+5
391	.bc4b		9c 35 88	stz $8835	                stz     sqrtNumber+1
392	.bc4e		9c 34 88	stz $8834	                stz     sqrtNumber+0
393	.bc51		20 4b be	jsr $be4b	                jsr     LBE4B

395	.bc54		ad 28 03	lda $0328	                lda     vduv.ew.aspectRatio+0
396	.bc57		8d 34 88	sta $8834	                sta     multiplier+0
397	.bc5a		ad 29 03	lda $0329	                lda     vduv.ew.aspectRatio+1
398	.bc5d		8d 35 88	sta $8835	                sta     multiplier+1
399	.bc60		ad 2a 03	lda $032a	                lda     vduv.ew.aspectRatio+2
400	.bc63		8d 36 88	sta $8836	                sta     multiplier+2
401	.bc66		20 0c be	jsr $be0c	                jsr     multiply24x24

403	.bc69		18		clc		                clc
404	.bc6a		ad 42 88	lda $8842	                lda     ellipseAccumulatedShear+0
405	.bc6d		6d 35 88	adc $8835	                adc     product+1
406	.bc70		08		php		                php
407	.bc71		ad 43 88	lda $8843	                lda     ellipseAccumulatedShear+1
408	.bc74		6d 36 88	adc $8836	                adc     product+2
409	.bc77		8d 3e 03	sta $033e	                sta     vduv.ew.pointB+0
410	.bc7a		ad 44 88	lda $8844	                lda     ellipseAccumulatedShear+2
411	.bc7d		6d 37 88	adc $8837	                adc     product+3
412	.bc80		8d 3f 03	sta $033f	                sta     vduv.ew.pointB+1
413	.bc83		28		plp		                plp
414	.bc84		10 08		bpl $bc8e	                bpl     +
415	.bc86		ee 3e 03	inc $033e	                inc     vduv.ew.pointB+0
416	.bc89		d0 03		bne $bc8e	                bne     +
417	.bc8b		ee 3f 03	inc $033f	                inc     vduv.ew.pointB+1
418	.bc8e						+
419	.bc8e		38		sec		                sec
420	.bc8f		ad 42 88	lda $8842	                lda     ellipseAccumulatedShear+0
421	.bc92		ed 35 88	sbc $8835	                sbc     product+1
422	.bc95		08		php		                php
423	.bc96		ad 43 88	lda $8843	                lda     ellipseAccumulatedShear+1
424	.bc99		ed 36 88	sbc $8836	                sbc     product+2
425	.bc9c		8d 3c 03	sta $033c	                sta     vduv.ew.pointA+0
426	.bc9f		ad 44 88	lda $8844	                lda     ellipseAccumulatedShear+2
427	.bca2		ed 37 88	sbc $8837	                sbc     product+3
428	.bca5		8d 3d 03	sta $033d	                sta     vduv.ew.pointA+1
429	.bca8		28		plp		                plp
430	.bca9		10 08		bpl $bcb3	                bpl     +
431	.bcab		ee 3c 03	inc $033c	                inc     vduv.ew.pointA+0
432	.bcae		d0 03		bne $bcb3	                bne     +
433	.bcb0		ee 3d 03	inc $033d	                inc     vduv.ew.pointA+1
434	.bcb3						+

436	.bcb3		18		clc		                clc
437	.bcb4		ad 45 88	lda $8845	                lda     ellipseCountOddNumbers+0
438	.bcb7		6d 49 88	adc $8849	                adc     ellipseCountSquares+0
439	.bcba		8d 49 88	sta $8849	                sta     ellipseCountSquares+0
440	.bcbd		ad 46 88	lda $8846	                lda     ellipseCountOddNumbers+1
441	.bcc0		6d 4a 88	adc $884a	                adc     ellipseCountSquares+1
442	.bcc3		8d 4a 88	sta $884a	                sta     ellipseCountSquares+1
443	.bcc6		ad 47 88	lda $8847	                lda     ellipseCountOddNumbers+2
444	.bcc9		6d 4b 88	adc $884b	                adc     ellipseCountSquares+2
445	.bccc		8d 4b 88	sta $884b	                sta     ellipseCountSquares+2
446	.bccf		ad 48 88	lda $8848	                lda     ellipseCountOddNumbers+3
447	.bcd2		6d 4c 88	adc $884c	                adc     ellipseCountSquares+3
448	.bcd5		8d 4c 88	sta $884c	                sta     ellipseCountSquares+3
449	.bcd8		18		clc		                clc
450	.bcd9		a9 02		lda #$02	                lda     #2
451	.bcdb		6d 45 88	adc $8845	                adc     ellipseCountOddNumbers+0
452	.bcde		8d 45 88	sta $8845	                sta     ellipseCountOddNumbers+0
453	.bce1		90 0d		bcc $bcf0	                bcc     +
454	.bce3		ee 46 88	inc $8846	                inc     ellipseCountOddNumbers+1
455	.bce6		d0 08		bne $bcf0	                bne     +
456	.bce8		ee 47 88	inc $8847	                inc     ellipseCountOddNumbers+2
457	.bceb		d0 03		bne $bcf0	                bne     +
458	.bced		ee 48 88	inc $8848	                inc     ellipseCountOddNumbers+3
459	.bcf0						+
460	.bcf0		18		clc		                clc
461	.bcf1		ad 42 88	lda $8842	                lda     ellipseAccumulatedShear+0
462	.bcf4		6d 2b 03	adc $032b	                adc     vduv.ew.shear+0
463	.bcf7		8d 42 88	sta $8842	                sta     ellipseAccumulatedShear+0
464	.bcfa		ad 43 88	lda $8843	                lda     ellipseAccumulatedShear+1
465	.bcfd		6d 2c 03	adc $032c	                adc     vduv.ew.shear+1
466	.bd00		8d 43 88	sta $8843	                sta     ellipseAccumulatedShear+1
467	.bd03		ad 44 88	lda $8844	                lda     ellipseAccumulatedShear+2
468	.bd06		6d 2d 03	adc $032d	                adc     vduv.ew.shear+2
469	.bd09		8d 44 88	sta $8844	                sta     ellipseAccumulatedShear+2
470	.bd0c		ee 4d 88	inc $884d	                inc     ellipseCountHeight+0
471	.bd0f		d0 03		bne $bd14	                bne     +
472	.bd11		ee 4e 88	inc $884e	                inc     ellipseCountHeight+1
473	.bd14						+
474	.bd14		ad 2e 03	lda $032e	                lda     vduv.ew.halfHeightCounter+0
475	.bd17		d0 03		bne $bd1c	                bne     +
476	.bd19		ce 2f 03	dec $032f	                dec     vduv.ew.halfHeightCounter+1
477	.bd1c						+
478	.bd1c		ce 2e 03	dec $032e	                dec     vduv.ew.halfHeightCounter+0
479	.bd1f		60		rts		                rts

481							;-------------------------------------------------------------------------
482							;
483							; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP8
484							;
485	.bd20						outlineEllipsePlotOnePointAndReflection: .block
486	.bd20		da		phx		                phx
487	.bd21		5a		phy		                phy

489	.bd22		18		clc		                clc
490	.bd23		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
491	.bd26		6d 42 03	adc $0342	                adc     vduv.ew.currentOffsetX+0
492	.bd29		8d 44 03	sta $0344	                sta     vduv.ew.plotPointX+0
493	.bd2c		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
494	.bd2f		6d 43 03	adc $0343	                adc     vduv.ew.currentOffsetX+1
495	.bd32		8d 45 03	sta $0345	                sta     vduv.ew.plotPointX+1

497	.bd35		18		clc		                clc
498	.bd36		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
499	.bd39		6d 4d 88	adc $884d	                adc     ellipseCountHeight+0
500	.bd3c		8d 46 03	sta $0346	                sta     vduv.ew.plotPointY+0
501	.bd3f		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
502	.bd42		6d 4e 88	adc $884e	                adc     ellipseCountHeight+1
503	.bd45		8d 47 03	sta $0347	                sta     vduv.ew.plotPointY+1

505	.bd48		a2 44		ldx #$44	                ldx     #VDUVariables.ew.plotPointX
506	.bd4a		20 4c db	jsr $db4c	                jsr     plotPointInternal

508	.bd4d		ad 4d 88	lda $884d	                lda     ellipseCountHeight+0
509	.bd50		0d 4e 88	ora $884e	                ora     ellipseCountHeight+1
510	.bd53		f0 2b		beq $bd80	                beq     done

512	.bd55		38		sec		                sec
513	.bd56		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
514	.bd59		ed 42 03	sbc $0342	                sbc     vduv.ew.currentOffsetX+0
515	.bd5c		8d 44 03	sta $0344	                sta     vduv.ew.plotPointX+0
516	.bd5f		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
517	.bd62		ed 43 03	sbc $0343	                sbc     vduv.ew.currentOffsetX+1
518	.bd65		8d 45 03	sta $0345	                sta     vduv.ew.plotPointX+1

520	.bd68		38		sec		                sec
521	.bd69		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
522	.bd6c		ed 4d 88	sbc $884d	                sbc     ellipseCountHeight+0
523	.bd6f		8d 46 03	sta $0346	                sta     vduv.ew.plotPointY+0
524	.bd72		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
525	.bd75		ed 4e 88	sbc $884e	                sbc     ellipseCountHeight+1
526	.bd78		8d 47 03	sta $0347	                sta     vduv.ew.plotPointY+1

528	.bd7b		a2 44		ldx #$44	                ldx     #VDUVariables.ew.plotPointX
529	.bd7d		20 4c db	jsr $db4c	                jsr     plotPointInternal
530	.bd80						done:
531	.bd80		7a		ply		                ply
532	.bd81		fa		plx		                plx
533	.bd82		60		rts		                rts
534							                .endblock

536							;-------------------------------------------------------------------------
537							;
538							; https://tobylobster.github.io/GXR-pages/gxr/S-s24.html#SP1 ?
539							;
540	.bd83						divide24By16Bits:
541	.bd83		da		phx		                phx

543							                ; Copy 16-bit value into workspace
544	.bd84		b9 00 03	lda $0300,y	                lda     vduv+0,y
545	.bd87		8d 3f 88	sta $883f	                sta     L883F
546	.bd8a		b9 01 03	lda $0301,y	                lda     vduv+1,y
547	.bd8d		8d 40 88	sta $8840	                sta     L8840

549							                ; 24 bits...?
550	.bd90		a0 18		ldy #$18	                ldy     #24

552							                ; Copy 24-bit value into workspace
553	.bd92		bd 00 03	lda $0300,x	                lda     vduv+0,x
554	.bd95		8d 3a 88	sta $883a	                sta     L883A
555	.bd98		bd 01 03	lda $0301,x	                lda     vduv+1,x
556	.bd9b		8d 3b 88	sta $883b	                sta     L883B
557	.bd9e		bd 02 03	lda $0302,x	                lda     vduv+2,x
558	.bda1		30 0c		bmi $bdaf	                bmi     LBDAF

560	.bda3						LBDA3:
561	.bda3		88		dey		                dey
562	.bda4		f0 52		beq $bdf8	                beq     LBDF8

564							                ; shift 24-bit value left 1
565	.bda6		0e 3a 88	asl $883a	                asl     L883A
566	.bda9		2e 3b 88	rol $883b	                rol     L883B
567	.bdac		2a		rol a		                rol     a
568	.bdad		10 f4		bpl $bda3	                bpl     LBDA3

570	.bdaf						LBDAF:
571	.bdaf		8d 3c 88	sta $883c	                sta     L883C
572	.bdb2		9c 3d 88	stz $883d	                stz     L883D
573	.bdb5		9c 3e 88	stz $883e	                stz     L883E
574	.bdb8		18		clc		                clc

576	.bdb9						LBDB9:
577							                ; shift 40-bit value left 1
578	.bdb9		2e 3a 88	rol $883a	                rol     L883A
579	.bdbc		2e 3b 88	rol $883b	                rol     L883B
580	.bdbf		2e 3c 88	rol $883c	                rol     L883C
581	.bdc2		2e 3d 88	rol $883d	                rol     L883D
582	.bdc5		2e 3e 88	rol $883e	                rol     L883E
583	.bdc8		38		sec		                sec
584	.bdc9		ad 3d 88	lda $883d	                lda     L883D
585	.bdcc		ed 3f 88	sbc $883f	                sbc     L883F
586	.bdcf		aa		tax		                tax
587	.bdd0		ad 3e 88	lda $883e	                lda     L883E
588	.bdd3		ed 40 88	sbc $8840	                sbc     L8840
589	.bdd6		90 06		bcc $bdde	                bcc     LBDDE
590	.bdd8		8e 3d 88	stx $883d	                stx     L883D
591	.bddb		8d 3e 88	sta $883e	                sta     L883E

593	.bdde						LBDDE:
594	.bdde		88		dey		                dey
595	.bddf		d0 d8		bne $bdb9	                bne     LBDB9
596	.bde1		fa		plx		                plx
597	.bde2		ad 3a 88	lda $883a	                lda     L883A
598	.bde5		2a		rol a		                rol     a
599	.bde6		9d 00 03	sta $0300,x	                sta     vduv+0,x
600	.bde9		ad 3b 88	lda $883b	                lda     L883B
601	.bdec		2a		rol a		                rol     a
602	.bded		9d 01 03	sta $0301,x	                sta     vduv+1,x
603	.bdf0		ad 3c 88	lda $883c	                lda     L883C
604	.bdf3		2a		rol a		                rol     a
605	.bdf4		9d 02 03	sta $0302,x	                sta     vduv+2,x
606	.bdf7		60		rts		                rts

609	.bdf8						LBDF8:
610	.bdf8		fa		plx		                plx
611	.bdf9		60		rts		                rts

616							;-------------------------------------------------------------------------
617							;
618							; https://tobylobster.github.io/GXR-pages/gxr/S-s24.html#SP3
619							;

621	.bdfa						negateVDUVariableXIntoY:
622	.bdfa		38		sec		                sec
623	.bdfb		a9 00		lda #$00	                lda     #0
624	.bdfd		fd 00 03	sbc $0300,x	                sbc     vduv+0,x
625	.be00		99 00 03	sta $0300,y	                sta     vduv+0,y
626	.be03		a9 00		lda #$00	                lda     #0
627	.be05		fd 01 03	sbc $0301,x	                sbc     vduv+1,x
628	.be08		99 01 03	sta $0301,y	                sta     vduv+1,y
629	.be0b		60		rts		                rts

631							;-------------------------------------------------------------------------

633	.be0c						multiply24x24:
634	.be0c		a0 17		ldy #$17	                ldy     #23
635	.be0e		9c 39 88	stz $8839	                stz     product+5
636	.be11		9c 38 88	stz $8838	                stz     product+4
637	.be14		9c 37 88	stz $8837	                stz     product+3
638	.be17		4e 36 88	lsr $8836	                lsr     multiplier+2
639	.be1a		6e 35 88	ror $8835	                ror     multiplier+1
640	.be1d		6e 34 88	ror $8834	                ror     multiplier+0

642	.be20						LBE20:
643	.be20		90 1c		bcc $be3e	                bcc     LBE3E
644	.be22		18		clc		                clc
645	.be23		ad 30 88	lda $8830	                lda     multiplicand+0
646	.be26		6d 37 88	adc $8837	                adc     product+3
647	.be29		8d 37 88	sta $8837	                sta     product+3
648	.be2c		ad 31 88	lda $8831	                lda     multiplicand+1
649	.be2f		6d 38 88	adc $8838	                adc     product+4
650	.be32		8d 38 88	sta $8838	                sta     product+4
651	.be35		ad 32 88	lda $8832	                lda     multiplicand+2
652	.be38		6d 39 88	adc $8839	                adc     product+5
653	.be3b		8d 39 88	sta $8839	                sta     product+5

655	.be3e						LBE3E:
656	.be3e		18		clc		                clc
657	.be3f		a2 05		ldx #$05	                ldx     #5

659	.be41						LBE41:
660	.be41		7e 34 88	ror $8834,x	                ror     product,x
661	.be44		ca		dex		                dex
662	.be45		10 fa		bpl $be41	                bpl     LBE41
663	.be47		88		dey		                dey
664	.be48		10 d6		bpl $be20	                bpl     LBE20
665	.be4a		60		rts		                rts

667							;-------------------------------------------------------------------------

669	.be4b						LBE4B:
670	.be4b		a2 03		ldx #$03	                ldx     #3

672	.be4d						LBE4D:
673	.be4d		9e 30 88	stz $8830,x	                stz     $8830,x
674	.be50		74 dc		stz $dc,x	                stz     ZTEMPB,x
675	.be52		ca		dex		                dex
676	.be53		10 f8		bpl $be4d	                bpl     LBE4D
677	.be55		a0 05		ldy #$05	                ldy     #5

679	.be57						LBE57:
680	.be57		b9 34 88	lda $8834,y	                lda     $8834,y
681	.be5a		85 da		sta $da		                sta     ZTEMP+0
682	.be5c		5a		phy		                phy
683	.be5d		a0 03		ldy #$03	                ldy     #3

685	.be5f						LBE5F:
686	.be5f		5a		phy		                phy
687	.be60		38		sec		                sec
688	.be61		2e 30 88	rol $8830	                rol     L8830
689	.be64		2e 31 88	rol $8831	                rol     L8831
690	.be67		2e 32 88	rol $8832	                rol     L8832
691	.be6a		2e 33 88	rol $8833	                rol     L8833
692	.be6d		a2 01		ldx #$01	                ldx     #1
693	.be6f		a5 dc		lda $dc		                lda     ZTEMPB+0

695	.be71						LBE71:
696	.be71		06 da		asl $da		                asl     ZTEMP+0
697	.be73		2a		rol a		                rol     a
698	.be74		26 dd		rol $dd		                rol     ZTEMPB+1
699	.be76		26 de		rol $de		                rol     ZTEMPC+0
700	.be78		26 df		rol $df		                rol     ZTEMPC+1
701	.be7a		ca		dex		                dex
702	.be7b		10 f4		bpl $be71	                bpl     LBE71
703	.be7d		85 dc		sta $dc		                sta     ZTEMPB+0
704	.be7f		38		sec		                sec
705	.be80		ed 30 88	sbc $8830	                sbc     L8830
706	.be83		48		pha		                pha
707	.be84		a5 dd		lda $dd		                lda     ZTEMPB+1
708	.be86		ed 31 88	sbc $8831	                sbc     L8831
709	.be89		aa		tax		                tax
710	.be8a		a5 de		lda $de		                lda     ZTEMPC+0
711	.be8c		ed 32 88	sbc $8832	                sbc     L8832
712	.be8f		a8		tay		                tay
713	.be90		a5 df		lda $df		                lda     ZTEMPC+1
714	.be92		ed 33 88	sbc $8833	                sbc     L8833
715	.be95		90 0e		bcc $bea5	                bcc     LBEA5
716	.be97		85 df		sta $df		                sta     ZTEMPC+1
717	.be99		84 de		sty $de		                sty     ZTEMPC+0
718	.be9b		86 dd		stx $dd		                stx     ZTEMPB+1
719	.be9d		68		pla		                pla
720	.be9e		85 dc		sta $dc		                sta     ZTEMPB+0
721	.bea0		ee 30 88	inc $8830	                inc     L8830
722	.bea3		80 04		bra $bea9	                bra     LBEA9

725	.bea5						LBEA5:
726	.bea5		68		pla		                pla
727	.bea6		ce 30 88	dec $8830	                dec     L8830

729	.bea9						LBEA9:
730	.bea9		7a		ply		                ply
731	.beaa		88		dey		                dey
732	.beab		10 b2		bpl $be5f	                bpl     LBE5F
733	.bead		7a		ply		                ply
734	.beae		88		dey		                dey
735	.beaf		10 a6		bpl $be57	                bpl     LBE57
736	.beb1		4e 33 88	lsr $8833	                lsr     L8833
737	.beb4		6e 32 88	ror $8832	                ror     L8832
738	.beb7		6e 31 88	ror $8831	                ror     L8831
739	.beba		6e 30 88	ror $8830	                ror     L8830
740	.bebd		60		rts		                rts

742							;-------------------------------------------------------------------------
743							;
744							; 184-191 = Move/copy rectangle [MasRef E.3-31]
745							;
746							; The normal interpretation of <p> does not apply in this group of
747							; plot codes and the meanings are as follows:
748							;
749							; 184, 185 - %1011100x - Move rectangle, relative
750							; 186, 187 - %1011101x - Copy rectangle, relative
751							; 188, 189 - %1011110x - Move rectangle, absolute
752							; 190, 191 - %1011111x - Copy rectangle, absolute
753							;
754	.bebe						plotMoveOrCopyRectangle:
755	.bebe		29 02		and #$02	                and     #2
756	.bec0		8d 45 03	sta $0345	                sta     vduv.mocr.copy

758	.bec3		20 51 c9	jsr $c951	                jsr     prepareForPlotBackground

760	.bec6		a2 14		ldx #$14	                ldx     #VDUVariables.oldGraphicsCursorPixels
761	.bec8		20 e6 c8	jsr $c8e6	                jsr     prepareAABB

763							                ; mocr.dest.min = PLOT coordinate
764	.becb		a0 34		ldy #$34	                ldy     #VDUVariables.mocr.dest.min
765	.becd		20 16 c9	jsr $c916	                jsr     copyLastFourVDUQueueBytes
766	.bed0		84 da		sty $da		                sty     ZTEMP+0              ;Y=VDUVariables.mocr.dest.max

768							                ; dest.max = dest.min + (src.max - src.min)
769	.bed2		a2 34		ldx #$34	                ldx     #VDUVariables.mocr.dest.min
770	.bed4		a0 2c		ldy #$2c	                ldy     #VDUVariables.mocr.src.max
771	.bed6		a9 28		lda #$28	                lda     #VDUVariables.mocr.src.min
772	.bed8		20 80 d5	jsr $d580	                jsr     addRegionDimensionsToVDUVariableCoordinates

774							                ;
775	.bedb		a2 28		ldx #$28	                ldx     #VDUVariables.mocr.src.min
776	.bedd		a0 34		ldy #$34	                ldy     #VDUVariables.mocr.dest
777	.bedf		20 cc d5	jsr $d5cc	                jsr     sortVDUVariableWords

779	.bee2		5a		phy		                phy
780	.bee3		da		phx		                phx
781	.bee4		a0 00		ldy #$00	                ldy     #0                   ;get outcode for X axis
782	.bee6		20 b7 d1	jsr $d1b7	                jsr     getOutcodeForAxis
783	.bee9		f0 08		beq $bef3	                beq     LBEF3                ;taken if
784	.beeb		4a		lsr a		                lsr     a
785	.beec		f0 03		beq $bef1	                beq     LBEF1
786	.beee		68		pla		                pla

788	.beef						LBEEF:
789	.beef		68		pla		                pla
790	.bef0		60		rts		                rts

793	.bef1						LBEF1:
794	.bef1		a2 00		ldx #$00	                ldx     #0

796	.bef3						LBEF3:
797	.bef3		68		pla		                pla

799	.bef4		a0 30		ldy #$30	                ldy     #VDUVariables.mocr.L30
800	.bef6		84 da		sty $da		                sty     ZTEMP+0
801	.bef8		a0 28		ldy #$28	                ldy     #VDUVariables.mocr.src.min
802	.befa		20 8d d5	jsr $d58d	                jsr     addRegionDimensionToVDUVariableCoordinate

804	.befd		a0 3c		ldy #$3c	                ldy     #VDUVariables.ew.pointA
805	.beff		84 da		sty $da		                sty     ZTEMP+0

807	.bf01		a0 34		ldy #$34	                ldy     #VDUVariables.mocr.dest.min
808	.bf03		20 8d d5	jsr $d58d	                jsr     addRegionDimensionToVDUVariableCoordinate

810	.bf06		68		pla		                pla
811	.bf07		18		clc		                clc
812	.bf08		69 04		adc #$04	                adc     #4
813	.bf0a		aa		tax		                tax
814	.bf0b		da		phx		                phx
815	.bf0c		a0 00		ldy #$00	                ldy     #0
816	.bf0e		20 b7 d1	jsr $d1b7	                jsr     getOutcodeForAxis
817	.bf11		f0 05		beq $bf18	                beq     LBF18
818	.bf13		4a		lsr a		                lsr     a
819	.bf14		f0 d9		beq $beef	                beq     LBEEF
820	.bf16		a2 04		ldx #$04	                ldx     #4

822	.bf18						LBF18:
823	.bf18		68		pla		                pla
824	.bf19		a0 40		ldy #$40	                ldy     #VDUVariables.mocr.L40
825	.bf1b		84 da		sty $da		                sty     ZTEMP+0
826	.bf1d		a0 38		ldy #$38	                ldy     #VDUVariables.mocr.dest.max.x
827	.bf1f		20 8d d5	jsr $d58d	                jsr     addRegionDimensionToVDUVariableCoordinate
828	.bf22		ad 40 03	lda $0340	                lda     vduv.mocr.L40
829	.bf25		cd 3c 03	cmp $033c	                cmp     vduv.mocr.L3C
830	.bf28		ad 41 03	lda $0341	                lda     vduv.mocr.L40+1
831	.bf2b		ed 3d 03	sbc $033d	                sbc     vduv.mocr.L3C+1
832	.bf2e		10 10		bpl $bf40	                bpl     LBF40
833	.bf30		ad 45 03	lda $0345	                lda     vduv.mocr.copy
834	.bf33		d0 03		bne $bf38	                bne     LBF38
835	.bf35		20 20 c4	jsr $c420	                jsr     LC420

837	.bf38						LBF38:
838	.bf38		a2 34		ldx #$34	                ldx     #VDUVariables.mocr.dest
839	.bf3a		20 02 c9	jsr $c902	                jsr     copyEightBytesToWorkspace28
840	.bf3d		4c 20 c4	jmp $c420	                jmp     LC420

843	.bf40						LBF40:
844	.bf40		9c 47 03	stz $0347	                stz     vduv.mocr.L47
845	.bf43		ad 30 03	lda $0330	                lda     vduv.mocr.L30
846	.bf46		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne
847	.bf49		85 da		sta $da		                sta     ZTEMP+0
848	.bf4b		ad 3c 03	lda $033c	                lda     vduv.mocr.L3C
849	.bf4e		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne
850	.bf51		38		sec		                sec
851	.bf52		e5 da		sbc $da		                sbc     ZTEMP+0
852	.bf54		10 06		bpl $bf5c	                bpl     LBF5C
853	.bf56		ce 47 03	dec $0347	                dec     vduv.mocr.L47
854	.bf59		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne

856	.bf5c						LBF5C:
857	.bf5c		8d 43 03	sta $0343	                sta     vduv.ew.currentOffsetX+1
858	.bf5f		48		pha		                pha
859	.bf60		49 ff		eor #$ff	                eor     #$ff
860	.bf62		1a		inc a		                inc     a
861	.bf63		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne
862	.bf66		8d 42 03	sta $0342	                sta     vduv.mocr.shiftToNextByte
863	.bf69		68		pla		                pla
864	.bf6a		18		clc		                clc
865	.bf6b		6d 61 03	adc $0361	                adc     vduv.pixelsPerByteMinusOne
866	.bf6e		aa		tax		                tax
867	.bf6f		bd 20 e1	lda $e120,x	                lda     LE120,x
868	.bf72		85 e1		sta $e1		                sta     ZTEMPD+1
869	.bf74		a2 3c		ldx #$3c	                ldx     #VDUVariables.mocr.L3C
870	.bf76		a0 40		ldy #$40	                ldy     #VDUVariables.mocr.L40
871	.bf78		20 9c da	jsr $da9c	                jsr     LDA9C
872	.bf7b		8d 44 03	sta $0344	                sta     vduv.mocr.L44
873	.bf7e		a5 d1		lda $d1		                lda     ZMASK
874	.bf80		8d 46 03	sta $0346	                sta     vduv.mocr.L46
875	.bf83		a5 dc		lda $dc		                lda     ZTEMPB+0
876	.bf85		85 e0		sta $e0		                sta     ZTEMPD+0
877	.bf87		a2 00		ldx #$00	                ldx     #0
878	.bf89		20 e6 bf	jsr $bfe6	                jsr     LBFE6
879	.bf8c		f0 40		beq $bfce	                beq     LBFCE
880	.bf8e		ad 2a 03	lda $032a	                lda     vduv.mocr.src.min.y+0
881	.bf91		cd 36 03	cmp $0336	                cmp     vduv.mocr.dest.min.y+0
882	.bf94		ad 2b 03	lda $032b	                lda     vduv.mocr.src.min.y+1
883	.bf97		ed 37 03	sbc $0337	                sbc     vduv.mocr.dest.min.y+1
884	.bf9a		50 02		bvc $bf9e	                bvc     LBF9E
885	.bf9c		49 80		eor #$80	                eor     #$80

887	.bf9e						LBF9E:
888	.bf9e		30 11		bmi $bfb1	                bmi     LBFB1

890	.bfa0						LBFA0:
891	.bfa0		20 62 db	jsr $db62	                jsr     LDB62
892	.bfa3		a2 00		ldx #$00	                ldx     #0
893	.bfa5		20 d1 bf	jsr $bfd1	                jsr     LBFD1
894	.bfa8		a2 0c		ldx #$0c	                ldx     #$c
895	.bfaa		20 d1 bf	jsr $bfd1	                jsr     LBFD1
896	.bfad		d0 f1		bne $bfa0	                bne     LBFA0
897	.bfaf		80 1d		bra $bfce	                bra     LBFCE

900	.bfb1						LBFB1:
901	.bfb1		a2 2a		ldx #$2a	                ldx     #VDUVariables.mocr.src.min.y
902	.bfb3		a0 2e		ldy #$2e	                ldy     #VDUVariables.mocr.src.max.y
903	.bfb5		20 b2 e2	jsr $e2b2	                jsr     exchangeTwoVDUBytes
904	.bfb8		a2 36		ldx #$36	                ldx     #VDUVariables.mocr.dest.min.y
905	.bfba		a0 3a		ldy #$3a	                ldy     #VDUVariables.mocr.dest.max.y
906	.bfbc		20 b2 e2	jsr $e2b2	                jsr     exchangeTwoVDUBytes

908	.bfbf						LBFBF:
909	.bfbf		20 62 db	jsr $db62	                jsr     LDB62
910	.bfc2		a2 00		ldx #$00	                ldx     #0
911	.bfc4		20 db bf	jsr $bfdb	                jsr     LBFDB
912	.bfc7		a2 0c		ldx #$0c	                ldx     #$c
913	.bfc9		20 db bf	jsr $bfdb	                jsr     LBFDB
914	.bfcc		d0 f1		bne $bfbf	                bne     LBFBF

916	.bfce						LBFCE:
917	.bfce		4c 62 db	jmp $db62	                jmp     LDB62

919	.bfd1						LBFD1:
920	.bfd1		fe 2a 03	inc $032a,x	                inc     vduv.mocr.src.min.y+0,x
921	.bfd4		d0 10		bne $bfe6	                bne     LBFE6
922	.bfd6		fe 2b 03	inc $032b,x	                inc     vduv.mocr.src.min.y+1,x
923	.bfd9		80 0b		bra $bfe6	                bra     LBFE6

925	.bfdb						LBFDB:
926	.bfdb		bd 2a 03	lda $032a,x	                lda     vduv.mocr.src.min.y+0,x
927	.bfde		d0 03		bne $bfe3	                bne     LBFE3
928	.bfe0		de 2b 03	dec $032b,x	                dec     vduv.mocr.src.min.y+1,x

930	.bfe3						LBFE3:
931	.bfe3		de 2a 03	dec $032a,x	                dec     vduv.mocr.src.min.y+0,x
932	.bfe6						LBFE6:
933	.bfe6		bd 2a 03	lda $032a,x	                lda     vduv.mocr.src.min.y+0,x
934	.bfe9		dd 2e 03	cmp $032e,x	                cmp     vduv.mocr.src.max.y+0,x
935	.bfec		d0 06		bne $bff4	                bne     rtsBFF4
936	.bfee		bd 2b 03	lda $032b,x	                lda     vduv.mocr.src.min.y+1,x
937	.bff1		dd 2f 03	cmp $032f,x	                cmp     vduv.mocr.src.max.y+1,x

939	.bff4						rtsBFF4:
940	.bff4		60		rts		                rts

943							; Hmm. What even is this???
944	>bff5		ff				                .byte $ff
945	>bff6		ff				                .byte $ff
946	>bff7		ff				                .byte $ff
947	>bff8		ff				                .byte $ff
948	>bff9		ff				                .byte $ff
949	>bffa		ff				                .byte $ff
950	>bffb		ff				                .byte $ff
951	>bffc		ff				                .byte $ff
952	>bffd		ff				                .byte $ff
953	>bffe		ff				                .byte $ff
954	>bfff		ff				                .byte $ff

:1	;******  Return to file: mos320.s65

69							                .endsection

71							                .section utils
72							                .include "src/terminal.s65"

:6	;******  Processing file: src/terminal.s65

1							; -*- comment-column:45; -*-

3	.8000						utilsROMHeader: .block
5	.8000		4c 77 af	jmp $af77	                jmp terminalLanguageEntryPoint ; Language entry point
6	.8003		4c 72 9d	jmp $9d72	                jmp utilsServiceEntryPoint  ; Service entry point
7	>8006		c2				                .byte $C2                    ; ROM type=SERV+LANG+6502
8	>8007		11				                .byte copyrightText-1-utilsROMHeader ; (C) offset
9	>8008		01				                .byte $01
10	>8009		54 45 52 4d 49 4e 41 4c		                .text "TERMINAL"
11	>8011		00				                .byte 0
12	.8012						copyrightText:
16	>8012		28 43 29 31 39 38 34 20		                .text "(C)1984 Acorn"
	>801a		41 63 6f 72 6e
18	>801f		00				                .byte 0

66							                .endblock

68							;-------------------------------------------------------------------------

77							;-------------------------------------------------------------------------

86							;-------------------------------------------------------------------------

95							;-------------------------------------------------------------------------

108							;-------------------------------------------------------------------------

116							;-------------------------------------------------------------------------

130							;-------------------------------------------------------------------------

132							; STARTUP
133							; =======

135							; This code is officially more than a bit gnarly, as it gets stitched
136							; together in several different ways.

145	.8020						reset:                          ;8020
146							                .include "reset.s65"

:7	;******  Processing file: src/reset.s65

5	.8020		a9 fe		lda #$fe	                lda #~ACCCON.D
6	.8022		1c 34 fe	trb $fe34	                trb ACCCON
9	.8025		9c dd df	stz $dfdd	                stz hazel.hasACCCONChanged
12	.8028		1c 66 03	trb $0366	                trb vduv.cursorFlags
14	.802b		d8		cld		                cld
15	.802c		a2 ff		ldx #$ff	                ldx #$FF
16	.802e		9a		txs		                txs              ;reset stack
17	.802f		8e 63 fe	stx $fe63	                stx userVIA.ddra ;port A all outputs
18	.8032		a9 cf		lda #$cf	                lda #%11001111
19	.8034		8d 42 fe	sta $fe42	                sta systemVIA.ddrb
25	.8037		a0 20		ldy #$20	                ldy #RTC.a.dv32768Hz
26	.8039		a2 0a		ldx #$0a	                ldx #RTC.a
27	.803b		20 e4 98	jsr $98e4	                jsr writeRTCByte
28	.803e		20 29 97	jsr $9729	                jsr finishRTCUpdate
31	.8041		a9 0c		lda #$0c	                lda #ACCCON.Y|ACCCON.X       ; page in HAZEL+shadow
32	.8043		0c 34 fe	tsb $fe34	                tsb ACCCON
48	.8046		ad 4e fe	lda $fe4e	                lda systemVIA.ier
50	.8049		0a		asl a		                asl a
51	.804a		48		pha		                pha             ; save initial IER<<1. 0 if power on
124	.804b		f0 07		beq $8054	                beq startClearRAM       ; branch taken if power on
125	.804d		ad 58 02	lda $0258	                lda breakAndESCAPEEffect                    ; read BREAK action flags
126							                                             ; (set by *FX200)
127	.8050		4a		lsr a		                lsr a                        ; divide by 2 to get the
128							                                             ; break action
129	.8051		3a		dec a		                dec a                        ; Z=1 if it was 1
130	.8052		d0 1f		bne $8073	                bne nonPowerOnReset          ; branch taken if break
131							                                             ; action says don't clear
132							                                             ; RAM
143	.8054						startClearRAM:
144	.8054		a8		tay		                tay             ;Y=0
145	.8055						clearRAM:
146	.8055		98		tya		                tya             ;A=0
147	.8056		64 01		stz $01		                stz $01
148	.8058		64 00		stz $00		                stz $00         ;start at $0000
149	.805a						clearRAMPageLoop:
150	.805a		91 00		sta ($00),y	                sta ($00),y     ;clear RAM
151	.805c		c8		iny		                iny
152	.805d		d0 fb		bne $805a	                bne clearRAMPageLoop
153	.805f		e6 01		inc $01		                inc $01
154	.8061		a2 40		ldx #$40	                ldx #$40          ;$40=RTI
155	.8063		8e 00 0d	stx $0d00	                stx nmiEntryPoint ;restore the RTI previously written,
156							                                  ;as each iteration will potentially
157							                                  ;overwrite it
158	.8066		a6 01		ldx $01		                ldx $01
159	.8068		e0 e0		cpx #$e0	                cpx #$E0        ;hit the end of RAM?
160	.806a		90 ee		bcc $805a	                bcc clearRAMPageLoop ;branch taken if still more to go
161	.806c		a9 04		lda #$04	                lda #ACCCON.X   ;page out shadow RAM
162	.806e		1c 34 fe	trb $fe34	                trb ACCCON
163	.8071		d0 e2		bne $8055	                bne clearRAM    ;branch taken if shadow RAM bit
164							                             ;previously set - i.e., that was the
165							                             ;first iteration, and we need to go back
166							                             ;to do main RAM
172	.8073						nonPowerOnReset:
179	.8073		a9 11		lda #$11	                lda #<emptyCommandLine
180	.8075		8d 04 df	sta $df04	                sta hazel.commandLinePointer+0
181	.8078		a9 e8		lda #$e8	                lda #>emptyCommandLine
182	.807a		8d 05 df	sta $df05	                sta hazel.commandLinePointer+1
183	.807d		a9 0c		lda #$0c	                lda #ACCCON.Y|ACCCON.X ; page in MOS ROM, page in main
184							                                       ; RAM
188	.807f		1c 34 fe	trb $fe34	                trb ACCCON
190	.8082		a9 0f		lda #$0f	                lda #$0F
191	.8084		8d 8e 02	sta $028e	                sta numericKeypadShiftEffect
193	.8087						-
194	.8087		3a		dec a		                dec a
195	.8088		8d 40 fe	sta $fe40	                sta systemVIA.orb
196	.808b		c9 09		cmp #$09	                cmp #$09
197	.808d		b0 f8		bcs $8087	                bcs -
199	.808f		a2 01		ldx #$01	                ldx #key_ctrl
203	.8091		20 80 f8	jsr $f880	                jsr interrogateKeyboard
218	.8094		e0 80		cpx #$80	                cpx #$80        ; C=1 if hard reset
219	.8096		20 35 f7	jsr $f735	                jsr updateKeyboardLEDs
220	.8099		9c 8d 02	stz $028d	                stz lastBREAKType            ;assume softBREAK
221	.809c		6a		ror a		                ror a                        ;restore C=1 if hard reset
222	.809d		a2 9c		ldx #$9c	                ldx #<intervalTimer ; retain TIME, but reset everything else
223	.809f		a0 8d		ldy #$8d	                ldy #<currentLanguageROM+1 ; reset all the MOS variables
224	.80a1		68		pla		                pla             ; restore initial IER<<1
225	.80a2		f0 09		beq $80ad	                beq isPowerOnBREAK
226	.80a4						isHardBREAK:
227	.80a4		a0 7e		ldy #$7e	                ldy #<editKeysMode+1 ; assume reset the soft BREAK set
228	.80a6		90 37		bcc $80df	                bcc L80DF            ; taken if soft reset
229	.80a8		a0 87		ldy #$87	                ldy #<printerIgnoreChar+1 ; hard reset - reset the
230							                                          ; hard BREAK set
231	.80aa		ee 8d 02	inc $028d	                inc lastBREAKType
232	.80ad						isPowerOnBREAK:
233	.80ad		ee 8d 02	inc $028d	                inc lastBREAKType
234	.80b0		5a		phy		                phy

254	.80b1		20 76 8e	jsr $8e76	                jsr readDefaultMODE          ; Read configured MODE

257	.80b4		09 08		ora #$08	                ora #CMOSBytes.defaults0.shadowMask
258	.80b6		8d 8f 02	sta $028f	                sta startupOptions
262	.80b9		20 ae 98	jsr $98ae	                jsr readDefaults3 ; Read configured BOOT
264	.80bc		29 10		and #$10	                and #CMOSBytes.defaults3.autoBootMask
265	.80be		4a		lsr a		                lsr a         ; Reset OSBYTE 255 boot bit (b3) if BOOT
266	.80bf		1c 8f 02	trb $028f	                trb startupOptions
270	.80c2		20 5a 8e	jsr $8e5a	                jsr readDefaultTVSettings
272	.80c5		8c 90 02	sty $0290	                sty tvOffset
273	.80c8		8e 91 02	stx $0291	                stx tvInterlace
277	.80cb		20 ae 98	jsr $98ae	                jsr readDefaults3
279	.80ce		29 08		and #$08	                and #CMOSBytes.defaults3.protectedScrollingMask
280	.80d0		f0 02		beq $80d4	                beq L80D4
281	.80d2		a9 01		lda #$01	                lda #VDUVariables.cursorFlags.scrollProtect
282	.80d4						L80D4:
283	.80d4		8d 66 03	sta $0366	                sta vduv.cursorFlags
284	.80d7		20 7b 92	jsr $927b	                jsr restoreFont32To255
285	.80da		7a		ply		                ply             ; restore Y=what is this
286	.80db		a2 92		ldx #$92	                ldx #<timer0    ; reset everything, TIME included
287	.80dd		80 18		bra $80f7	                bra initializePage2Loop

289	.80df						L80DF:
293	.80df		a9 87		lda #$87	                lda #$87             ; Clear MODE bits from OSBYTE 255
294	.80e1		1c 8f 02	trb $028f	                trb startupOptions
295	.80e4		ad 55 03	lda $0355	                lda vduv.currentScreenMODE ; Get current screen MODE b0-b2
296	.80e7		29 07		and #$07	                and #$07
297	.80e9		0c 8f 02	tsb $028f	                tsb startupOptions           ; Copy to OSBYTE 255
298	.80ec		a9 10		lda #$10	                lda #STATE.isShadowMode ; Test shadow screen bit in VDU flags
299	.80ee		24 d0		bit $d0		                bit STATE                      ; Not shadow screen
300	.80f0		f0 05		beq $80f7	                beq initializePage2Loop
301	.80f2		a9 80		lda #$80	                lda #$80                     ; Set shadow screen bit in OSBYTE 255
302	.80f4		0c 8f 02	tsb $028f	                tsb startupOptions

304	.80f7						initializePage2Loop:
305	.80f7		ad 8d 02	lda $028d	                lda lastBREAKType
306	.80fa		d0 08		bne $8104	                bne clearPage2Byte           ;taken unless soft BREAK

308							                ; leave the ROM information table alone on a soft
309							                ; BREAK.
310	.80fc		e0 b1		cpx #$b1	                cpx #<romInformationTable+16
311	.80fe		b0 04		bcs $8104	                bcs clearPage2Byte
312	.8100		e0 a1		cpx #$a1	                cpx #<romInformationTable
313	.8102		b0 0a		bcs $810e	                bcs nextPage2Byte
314	.8104						clearPage2Byte:
315	.8104		9e 00 02	stz $0200,x	                stz $0200,x
316	.8107		e0 cd		cpx #$cd	                cpx #$CD        ; how to derive this value??
317	.8109		90 03		bcc $810e	                bcc nextPage2Byte
318	.810b		de 00 02	dec $0200,x	                dec $0200,x                  ;initialize later values to $ff
319	.810e						nextPage2Byte:
320	.810e		e8		inx		                inx
321	.810f		d0 e6		bne $80f7	                bne initializePage2Loop

327							                ; Is this a bug? This will clear $CF, part of FS
328							                ; persistent workspace. Surely it should clear all of
329							                ; it or none of it!
330	.8111		a2 cf		ldx #$cf	                ldx #$CF
331	.8113						initializeZeroPageLoop:
332	.8113		74 00		stz $00,x	                stz $00,x
333	.8115		e8		inx		                inx
334	.8116		d0 fb		bne $8113	                bne initializeZeroPageLoop

340	.8118		ad 8d 02	lda $028d	                lda lastBREAKType
341	.811b		d0 20		bne $813d	                bne L813D                    ;taken if not soft BREAK

344	.811d		ad 46 02	lda $0246	                lda noignoreState
345	.8120		48		pha		                pha
347	.8121		ad 4b 02	lda $024b	                lda basicROMNumber
348	.8124		48		pha		                pha
349	.8125		ad 44 02	lda $0244	                lda oshwm
350	.8128		48		pha		                pha
351	.8129		ad 57 02	lda $0257	                lda spoolFileHandle
352	.812c		48		pha		                pha
353	.812d		ae 56 02	ldx $0256	                ldx execFileHandle

355	.8130						L8130:
356	.8130		b9 d6 e2	lda $e2d6,y	                lda defaultVectorTable-1,y
357	.8133		99 ff 01	sta $01ff,y	                sta vectors-1,y
358	.8136		88		dey		                dey
359	.8137		c0 21		cpy #$21	                cpy #EVENTV+1-vectors
360	.8139		b0 f5		bcs $8130	                bcs L8130

362	.813b		a0 12		ldy #$12	                ldy #FILEV-vectors

364	.813d						L813D:
365	.813d		b9 d6 e2	lda $e2d6,y	                lda defaultVectorTable-1,y
366	.8140		99 ff 01	sta $01ff,y	                sta vectors-1,y
367	.8143		88		dey		                dey
368	.8144		d0 f7		bne $813d	                bne L813D

370	.8146		ad 8d 02	lda $028d	                lda lastBREAKType
371	.8149		d0 19		bne $8164	                bne L8164       ; taken if power on or hard BREAK
372	.814b		8e 56 02	stx $0256	                stx execFileHandle
373	.814e		68		pla		                pla                          ;restore *SPOOL file handle
374	.814f		c9 04		cmp #$04	                cmp #$04                     ;is it a TAPE or ROM handle?
375	.8151		b0 02		bcs $8155	                bcs L8155                    ;taken if no - keep it

380	.8153		a9 00		lda #$00	                lda #$00          ;auto-close it if TAPE or ROM handle
382	.8155						L8155:
383	.8155		8d 57 02	sta $0257	                sta spoolFileHandle
384	.8158		68		pla		                pla
385	.8159		8d 44 02	sta $0244	                sta oshwm
386	.815c		68		pla		                pla
387	.815d		8d 4b 02	sta $024b	                sta basicROMNumber
389	.8160		68		pla		                pla
390	.8161		8d 46 02	sta $0246	                sta noignoreState

393	.8164						L8164:
402	.8164		20 ad 8e	jsr $8ead	                jsr readDefaults1
404	.8167		a2 20		ldx #$20	                ldx #keyboardStatusByte.shiftLockDisengaged
405	.8169		0a		asl a		                asl a
406	.816a		0a		asl a		                asl a                        ;N=defaultCapsLockMask
407	.816b		30 07		bmi $8174	                bmi gotKeyboardStatusByte                    ;taken if defaultCapsLock
408	.816d		a2 30		ldx #$30	                ldx #keyboardStatusByte.shiftLockDisengaged|keyboardStatusByte.capsLockDisengaged
409	.816f		0a		asl a		                asl a                        ;N=defaultNoLockMask
410	.8170		30 02		bmi $8174	                bmi gotKeyboardStatusByte
411	.8172		a2 a0		ldx #$a0	                ldx #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
412	.8174						gotKeyboardStatusByte:
413	.8174		8e 5a 02	stx $025a	                stx keyboardStatusByte
417	.8177		20 90 e5	jsr $e590	                jsr selectTerminalROM
418	.817a		20 07 f1	jsr $f107	                jsr resetKeyRepeat
420	.817d		ad 8d 02	lda $028d	                lda lastBREAKType
421	.8180		f0 14		beq $8196	                beq L8196
430	.8182		20 a8 8e	jsr $8ea8	                jsr readDefaultPrinterIgnoreChar
432	.8185		8d 86 02	sta $0286	                sta printerIgnoreChar
436	.8188		20 aa 98	jsr $98aa	                jsr readDefaults2
437	.818b		4a		lsr a		                lsr a                        ;C=tubeOn
438	.818c		4a		lsr a		                lsr a                        ;C=usePrinterIgnoreChar
442	.818d		6e 46 02	ror $0246	                ror noignoreState

452	.8190		20 8d 8e	jsr $8e8d	                jsr readDefaultFX5Settings

455	.8193		8d 85 02	sta $0285	                sta printerDriverType
456	.8196						L8196:

469	.8196		20 97 8e	jsr $8e97	                jsr readDefaultSerialDataFormat

472	.8199		0a		asl a		                asl a                        ;
473	.819a		0a		asl a		                asl a       ;shift into the control registerword field
474	.819b		09 42		ora #$42	                ora #ACIA.control.rtsHighTXInterruptDisabled|ACIA.control.counterDivide64
475	.819d		8d 50 02	sta $0250	                sta aciaControlRegister

478	.81a0		20 d6 a9	jsr $a9d6	                jsr resetACIAThenRewriteControlRegister
479	.81a3		a2 01		ldx #$01	                ldx #$01

512	.81a5		a9 7f		lda #$7f	                lda #$7F
513	.81a7						initializeVIAInterruptsLoop:
514	.81a7		9d 4d fe	sta $fe4d,x	                sta systemVIA.ifr,x
515	.81aa		9d 6d fe	sta $fe6d,x	                sta userVIA.ifr,x
516	.81ad		ca		dex		                dex
517	.81ae		10 f7		bpl $81a7	                bpl initializeVIAInterruptsLoop

520							                ; Let through 1 IRQ.
521	.81b0		58		cli		                cli
522	.81b1		78		sei		                sei

524							                ; TEMPA was cleared above, so if bit 6 is set, there
525							                ; must have been an IRQ (as A=$7f).
526	.81b2		24 fc		bit $fc		                bit TEMPA
527	.81b4		50 03		bvc $81b9	                bvc +
528	.81b6		20 cf f8	jsr $f8cf	                jsr call1MHzBusHook
529	.81b9						+

533	.81b9		a2 d2		ldx #$d2	                ldx #$80|VIA.irq.t1|VIA.irq.cb1|VIA.irq.ca1
537	.81bb		8e 4e fe	stx $fe4e	                stx systemVIA.ier

544	.81be		a2 04		ldx #$04	                ldx #VIA.pcr.cb2InputNegativeActiveEdge|VIA.pcr.cb1NegativeActiveEdge|VIA.pcr.ca2InputPositiveEdge|VIA.pcr.ca1NegativeActiveEdge
545	.81c0		8e 4c fe	stx $fe4c	                stx systemVIA.pcr
546	.81c3		a9 40		lda #$40	                lda #VIA.acr.t1Continuous|VIA.acr.t2Timer|VIA.acr.srDisabled|VIA.acr.pbLatchDisabled|VIA.acr.paLatchDisabled
547	.81c5		8d 4b fe	sta $fe4b	                sta systemVIA.acr
548	.81c8		a9 0e		lda #$0e	                lda #$0E
549	.81ca		8d 46 fe	sta $fe46	                sta systemVIA.t1lL
550	.81cd		8d 6c fe	sta $fe6c	                sta userVIA.pcr              ;VIA.pcr.cb2InputNegativeActiveEdge|VIA.pcr.cb1NegativeActiveEdge|VIA.pcr.ca2HighOutput|VIA.pcr.ca1NegativeActiveEdge
554	.81d0		8d 18 fe	sta $fe18	                sta HADC.latch               ;looks benign
556	.81d3		a9 27		lda #$27	                lda #$27
557	.81d5		8d 47 fe	sta $fe47	                sta systemVIA.t1lH
558	.81d8		8d 45 fe	sta $fe45	                sta systemVIA.t1cH

563	.81db		a2 08		ldx #$08	                ldx #$08
564	.81dd						L81DD:
565	.81dd		ca		dex		                dex
566	.81de		20 5d f5	jsr $f55d	                jsr clearSoundChannelBuffer
567	.81e1		e0 04		cpx #$04	                cpx #$04
568	.81e3		d0 f8		bne $81dd	                bne L81DD

574	.81e5		20 10 f9	jsr $f910	                jsr osbyte7A
576	.81e8		86 ed		stx $ed		                stx firstKeyPressedInternal
577	.81ea		a2 00		ldx #$00	                ldx #$00
581	.81ec		20 7d e9	jsr $e97d	                jsr purgeBuffer

584	.81ef		ad 82 02	lda $0282	                lda serialULARegister
585	.81f2		29 7f		and #$7f	                and #$7F
586	.81f4		20 89 ec	jsr $ec89	                jsr LEC89

596	.81f7		20 84 8e	jsr $8e84	                jsr readDefaultSerialBaudRateIndex

599	.81fa		48		pha		                pha
600	.81fb		aa		tax		                tax
601	.81fc		20 6b ec	jsr $ec6b	                jsr osbyte08
602	.81ff		fa		plx		                plx
603	.8200		a9 07		lda #$07	                lda #$07
604	.8202		20 6d ec	jsr $ec6d	                jsr osbyte07

610	.8205		20 ae 98	jsr $98ae	                jsr readDefaults3
612	.8208		89 02		bit #$02	                bit #CMOSBytes.defaults3.loudMask
613	.820a		d0 05		bne $8211	                bne L8211
614	.820c		a9 f0		lda #$f0	                lda #$F0
615	.820e		8d 64 02	sta $0264	                sta bellSound
616	.8211						L8211:
618	.8211		20 90 e5	jsr $e590	                jsr selectTerminalROM

645	.8214		ae 84 02	ldx $0284	                ldx softKeyConsistencyFlag
646	.8217		f0 03		beq $821c	                beq checkResetType
647	.8219		20 1a f1	jsr $f11a	                jsr osbyte12
648	.821c						checkResetType:
649	.821c		ad 8d 02	lda $028d	                lda lastBREAKType
650	.821f		f0 03		beq $8224	                beq romsScanned                    ;taken if soft BREAK

657	.8221		4c a0 e3	jmp $e3a0	                jmp scanROMs

660	.8224						romsScanned:
661	.8224		ad 8f 02	lda $028f	                lda startupOptions
662	.8227		20 99 c7	jsr $c799	                jsr setStartupMODE
663	.822a		ad 8d 02	lda $028d	                lda lastBREAKType ; $00=soft; $01=power-on; $02=hard
664	.822d		3a		dec a		                dec a             ; $ff=soft; $00=power-on; $01=hard
669	.822e		d0 54		bne $8284	                bne softReset                    ;taken if not power-on reset

672	.8230						powerOnReset:
690	.8230						checkForNVRAMReset:

714	.8230		a5 ed		lda $ed		                lda firstKeyPressedInternal
716	.8232						checkForResetKey:
717	.8232		c9 33		cmp #$33	                cmp #key_r
718	.8234		d0 4e		bne $8284	                bne softReset                    ;taken if R not pressed

724							                ; Reset CMOS RAM
725	.8236						resetCMOSRAM:
726	.8236		a2 31		ldx #$31	                ldx #size(RTC.ram)-1
727	.8238						resetCMOSRAMLoop:
728	.8238		da		phx		                phx
729	.8239		a0 00		ldy #$00	                ldy #$00
736	.823b		20 dc 98	jsr $98dc	                jsr writeCMOSByte
737	.823e		fa		plx		                plx
738	.823f		ca		dex		                dex
742	.8240		10 f6		bpl $8238	                bpl resetCMOSRAMLoop

746							                ; Initialize ROM insertion flags.
747	.8242		a0 ff		ldy #$ff	                ldy #$FF
748	.8244		a2 06		ldx #$06	                ldx #CMOSBytes.insertedROMs+0
749	.8246		20 dc 98	jsr $98dc	                jsr writeCMOSByte
750	.8249		a2 07		ldx #$07	                ldx #CMOSBytes.insertedROMs+1
751	.824b		20 dc 98	jsr $98dc	                jsr writeCMOSByte

789	.824e		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
793	>8251		0d 0a				                .text 13,10
795	>8253		43 4d 4f 53 20 52 41 4d		                .text "CMOS RAM reset"
	>825b		20 72 65 73 65 74
799	>8261		0d 0a 50 72 65 73 73 20		                .text 13,10,"Press break to continue"
	>8269		62 72 65 61 6b 20 74 6f 20 63 6f 6e 74 69 6e 75
	>8279		65
800	>827a		0d 0a 00			                .text 13,10,0

803	.827d		a9 03		lda #$03	                lda #$03
804	.827f		8d 58 02	sta $0258	                sta breakAndESCAPEEffect
805	.8282						hang:
806	.8282		80 fe		bra $8282	                bra hang

808							;-------------------------------------------------------------------------

817							;-------------------------------------------------------------------------

819	.8284						softReset:
824	.8284		20 ba ed	jsr $edba	                jsr selectHAZEL
830	.8287		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
831	.828a		9c d5 df	stz $dfd5	                stz hazel.moveDestHandle
832	.828d		a0 ca		ldy #$ca	                ldy #$CA
836	.828f		20 7e ea	jsr $ea7e	                jsr insertCharacterIntoKeyboardBuffer
841	.8292		20 49 f3	jsr $f349	                jsr osbyte247EntryPoint
843	.8295		ad 8d 02	lda $028d	                lda lastBREAKType
844	.8298		f0 03		beq $829d	                beq L829D
848	.829a		20 d0 ed	jsr $edd0	                jsr LEDD0
850	.829d						L829D:
855	.829d		20 aa 98	jsr $98aa	                jsr readDefaults2
857	.82a0		4a		lsr a		                lsr a
858	.82a1		90 2d		bcc $82d0	                bcc continueSoftReset

863	.82a3		20 ae 98	jsr $98ae	                jsr readDefaults3

875	.82a6		89 04		bit #$04	                bit #CMOSBytes.defaults3.extTubeMask
876	.82a8		08		php		                php
877	.82a9		a9 10		lda #$10	                lda #ACCCON.ITU
878	.82ab		1c 34 fe	trb $fe34	                trb ACCCON
879	.82ae		28		plp		                plp
880	.82af		d0 03		bne $82b4	                bne L82B4
881	.82b1		0c 34 fe	tsb $fe34	                tsb ACCCON
883	.82b4						L82B4:
887	.82b4		20 75 e3	jsr $e375	                jsr isSecondProcessorPresent
889	.82b7		b0 0d		bcs $82c6	                bcs foundTube

894	.82b9		ad 34 fe	lda $fe34	                lda ACCCON                    ; Toggle Internal/External Tube
896	.82bc		49 10		eor #$10	                eor #ACCCON.ITU
900	.82be		8d 34 fe	sta $fe34	                sta ACCCON

903							                ; Don't do a timed version for the other Tube. If the
904							                ; preferred one times out, the delay for the other one
905							                ; is covered.
906	.82c1		20 75 e3	jsr $e375	                jsr isSecondProcessorPresent

:6	;******  Return to file: src/terminal.s65

150	.82c4		90 0a		bcc $82d0	                bcc handleROMWorkspace        ;taken if Tube not found
152	.82c6						foundTube:
154	.82c6		a2 ff		ldx #$ff	                ldx #romServiceCallTubeMainInitialisation
155	.82c8		20 72 ee	jsr $ee72	                jsr makeROMServiceCall   ;
156	.82cb		d0 03		bne $82d0	                bne handleROMWorkspace        ; Not claimed, step past
157	.82cd		ce 7a 02	dec $027a	                dec tubePresence ; Tube PreInit claimed, set TubeFlag to &FF, Tube present
160	.82d0						continueSoftReset:
162	.82d0						handleROMWorkspace:
163	.82d0		ad 8d 02	lda $028d	                lda lastBREAKType ; Soft Break, don't ask about workspace
164	.82d3		f0 27		beq $82fc	                beq L82FC
165	.82d5		a0 dc		ldy #$dc	                ldy #$DC                     ; Start high workspace at &DC00 and work downwards
166	.82d7		a2 24		ldx #$24	                ldx #romServiceCallCountDynamicHAZELWorkspace ; Ask ROMs how much private high workspace required
167	.82d9		20 72 ee	jsr $ee72	                jsr makeROMServiceCall   ;
168	.82dc		a2 21		ldx #$21	                ldx #romServiceCallAbsoluteHAZELWorkspaceClaim ; Ask ROMs for maximum shared high workspace required
169	.82de		20 72 ee	jsr $ee72	                jsr makeROMServiceCall   ;
170	.82e1		5a		phy		                phy                          ; Save top of shared workspace
171	.82e2		a2 22		ldx #$22	                ldx #romServiceCallPrivateHAZELWorkspaceClam ; Ask ROMs for private high workspace required
172	.82e4		20 72 ee	jsr $ee72	                jsr makeROMServiceCall   ;
173	.82e7		a0 0e		ldy #$0e	                ldy #$0E                     ; Start low workspace at &0E00
174	.82e9		a2 01		ldx #$01	                ldx #romServiceCallAbsoluteWorkspaceClaim ; Ask ROMs for maximum shared workspace
175	.82eb		20 72 ee	jsr $ee72	                jsr makeROMServiceCall   ;
176	.82ee		a2 02		ldx #$02	                ldx #romServiceCallPrivateWorkspaceClaim ; Ask ROMs for private workspace
177	.82f0		20 72 ee	jsr $ee72	                jsr makeROMServiceCall   ;
178	.82f3		8c 44 02	sty $0244	                sty oshwm                    ; Set OSHWM - default PAGE
179	.82f6		7a		ply		                ply                          ; Get top of shared high workspace
180	.82f7		a2 23		ldx #$23	                ldx #romServiceCallTopOfHAZELWorkspace ; Tell ROMs top of shared high workspace
181	.82f9		20 72 ee	jsr $ee72	                jsr makeROMServiceCall   ;
182	.82fc						L82FC:
183	.82fc		a2 21		ldx #$21	                ldx #size(defaultFsInfoBlocks)
184	.82fe						L82FE:
185	.82fe		bd 46 83	lda $8346,x	                lda defaultFsInfoBlocks-1,x                ; Copy initial FS info blocks for CFS, TAPE, ROM
186	.8301		9d 05 df	sta $df05,x	                sta hazel.fsInfoBlocks-1,x
187	.8304		ca		dex		                dex
188	.8305		d0 f7		bne $82fe	                bne L82FE
189	.8307		64 f2		stz $f2		                stz $F2                      ; &F2/3=>FS Info Blocks
190	.8309		a9 df		lda #$df	                lda #>hazel.fsInfoBlocks
191	.830b		85 f3		sta $f3		                sta $F3
192							                ; Y=>end of FS Info Blocks
193	.830d		a0 27		ldy #$27	                ldy #<hazel.fsInfoBlocks+size(defaultFsInfoBlocks)
194	.830f		a2 25		ldx #$25	                ldx #romServiceCallRequestFSInfo
195	.8311		20 72 ee	jsr $ee72	                jsr makeROMServiceCall   ;
196	.8314		a9 00		lda #$00	                lda #$00                     ; Terminate FS Info blocks
197	.8316		91 f2		sta ($f2),y	                sta ($F2),y

199	.8318		ad 57 02	lda $0257	                lda spoolFileHandle ; Save Spool handle and disable Spooling
200	.831b		48		pha		                pha
201	.831c		9c 57 02	stz $0257	                stz spoolFileHandle
202	.831f		a2 fe		ldx #$fe	                ldx #romServiceCallTubeSystemPostInitialisation
204	.8321		ac 7a 02	ldy $027a	                ldy tubePresence
208	.8324		20 72 ee	jsr $ee72	                jsr makeROMServiceCall   ; Tube PostInit
209	.8327		2d 67 02	and $0267	                and startupMessageSuppressionStatus
210	.832a		10 14		bpl $8340	                bpl L8340

212							                ; use +$ff rather than -1 to avoid 64tass warning.
213							                ; Only the LSB is used.
214	.832c		a0 ff		ldy #$ff	                ldy #((startupMessages.acornMOS-(startupMessages&$ff00))+$ff)&$ff
215	.832e		20 a1 e7	jsr $e7a1	                jsr printStartupMessage
216	.8331		ad 8d 02	lda $028d	                lda lastBREAKType            ; Skip past if Soft Break
217	.8334		f0 05		beq $833b	                beq L833B
218	.8336		a0 0a		ldy #$0a	                ldy #((startupMessages.beep-(startupMessages&$ff00))-1)&$ff
219	.8338		20 a1 e7	jsr $e7a1	                jsr printStartupMessage
220	.833b						L833B:
221	.833b		a0 0f		ldy #$0f	                ldy #((startupMessages.twoNewlines-(startupMessages&$ff00))-1)&$ff
222	.833d		20 a1 e7	jsr $e7a1	                jsr printStartupMessage
223	.8340						L8340:
224	.8340		68		pla		                pla                          ; Restore Spool handle
225	.8341		8d 57 02	sta $0257	                sta spoolFileHandle
226	.8344		4c 0e e4	jmp $e40e	                jmp LE40E                ;

228							;-------------------------------------------------------------------------

250							;-------------------------------------------------------------------------

252							; Default FS Info Blocks
253							; ======================
254	.8347						defaultFsInfoBlocks: .block
256	>8347		43 46 53 20 20 20 20 20		                .text "CFS     "
257	>834f		01				                .byte $01
258	>8350		02				                .byte $02
259	>8351		01				                .byte $01
260	>8352		54 41 50 45 20 20 20 20		                .text "TAPE    "
261	>835a		01				                .byte $01
262	>835b		02				                .byte $02
263	>835c		01				                .byte $01
265	>835d		52 4f 4d 20 20 20 20 20		                .text "ROM     "
266	>8365		03				                .byte $03
267	>8366		03				                .byte $03
268	>8367		03				                .byte $03
269							                .endblock

271							;-------------------------------------------------------------------------
272							;
273							; MOS command table

275							mos_command .macro name,routine,byte1,byte2
292							                .endm

294	.8368						mosCommandTable:
276							                ; Name of command, compared case-insensitively.
277	>8368		43 41 54			                .text "CAT"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>836b		f1				                .byte >callFSCV
168	>836c		e5				                .byte <callFSCV

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>836d		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>836e		05				                .byte $05
276							                ; Name of command, compared case-insensitively.
277	>836f		41 44 46 53			                .text "ADFS"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8373		85				                .byte >passStarCommandThrough
168	>8374		af				                .byte <passStarCommandThrough

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8375		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8376		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>8377		41 50 50 45 4e 44		                .text "APPEND"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>837d		90				                .byte >starAPPEND
168	>837e		14				                .byte <starAPPEND

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>837f		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8380		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>8381		42 41 53 49 43			                .text "BASIC"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8386		85				                .byte >starBASIC
168	>8387		a6				                .byte <starBASIC

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8388		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8389		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>838a		42 55 49 4c 44			                .text "BUILD"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>838f		90				                .byte >starBUILD
168	>8390		0f				                .byte <starBUILD

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8391		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8392		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>8393		43 4c 4f 53 45			                .text "CLOSE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8398		93				                .byte >starCLOSE
168	>8399		7c				                .byte <starCLOSE

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>839a		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>839b		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>839c		43 4f 4e 46 49 47 55 52		                .text "CONFIGURE"
	>83a4		45

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>83a5		88				                .byte >starCONFIGURE
168	>83a6		7a				                .byte <starCONFIGURE

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>83a7		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>83a8		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>83a9		43 4f 44 45			                .text "CODE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>83ad		93				                .byte >starCommandThroughOSBYTE
168	>83ae		eb				                .byte <starCommandThroughOSBYTE

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>83af		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>83b0		88				                .byte $88
276							                ; Name of command, compared case-insensitively.
277	>83b1		43 52 45 41 54 45		                .text "CREATE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>83b7		93				                .byte >starCommandThroughOSFILE
168	>83b8		18				                .byte <starCommandThroughOSFILE

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>83b9		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>83ba		07				                .byte $07
276							                ; Name of command, compared case-insensitively.
277	>83bb		44 55 4d 50			                .text "DUMP"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>83bf		8f				                .byte >starDUMP
168	>83c0		42				                .byte <starDUMP

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>83c1		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>83c2		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>83c3		44 45 4c 45 54 45		                .text "DELETE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>83c9		94				                .byte >starDELETE
168	>83ca		6a				                .byte <starDELETE

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>83cb		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>83cc		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>83cd		45 58 45 43			                .text "EXEC"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>83d1		a5				                .byte >starEXEC
168	>83d2		91				                .byte <starEXEC

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>83d3		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>83d4		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>83d5		45 58				                .text "EX"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>83d7		f1				                .byte >callFSCV
168	>83d8		e5				                .byte <callFSCV

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>83d9		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>83da		09				                .byte $09
276							                ; Name of command, compared case-insensitively.
277	>83db		46 58				                .text "FX"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>83dd		93				                .byte >starFX
168	>83de		e5				                .byte <starFX

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>83df		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>83e0		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>83e1		47 4f 49 4f			                .text "GOIO"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>83e5		92				                .byte >starGOIO
168	>83e6		fd				                .byte <starGOIO

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>83e7		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>83e8		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>83e9		47 4f				                .text "GO"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>83eb		92				                .byte >starGO
168	>83ec		f5				                .byte <starGO

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>83ed		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>83ee		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>83ef		48 45 4c 50			                .text "HELP"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>83f3		85				                .byte >starHELP
168	>83f4		ca				                .byte <starHELP

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>83f5		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>83f6		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>83f7		49 4e 46 4f			                .text "INFO"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>83fb		f1				                .byte >callFSCV
168	>83fc		e5				                .byte <callFSCV

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>83fd		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>83fe		0a				                .byte $0A
276							                ; Name of command, compared case-insensitively.
277	>83ff		49 47 4e 4f 52 45		                .text "IGNORE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8405		93				                .byte >starIGNORE
168	>8406		87				                .byte <starIGNORE

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8407		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8408		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>8409		49 4e 53 45 52 54		                .text "INSERT"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>840f		87				                .byte >starINSERT
168	>8410		1f				                .byte <starINSERT

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8411		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8412		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>8413		4b 45 59			                .text "KEY"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8416		94				                .byte >starKEY
168	>8417		c7				                .byte <starKEY

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8418		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8419		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>841a		4c 4f 41 44			                .text "LOAD"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>841e		93				                .byte >starLOAD
168	>841f		16				                .byte <starLOAD

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8420		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8421		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>8422		4c 49 53 54			                .text "LIST"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8426		8e				                .byte >starLIST
168	>8427		c0				                .byte <starLIST

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8428		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8429		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>842a		4c 49 4e 45			                .text "LINE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>842e		ec				                .byte >callUSERV
168	>842f		39				                .byte <callUSERV

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8430		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8431		01				                .byte $01
276							                ; Name of command, compared case-insensitively.
277	>8432		4c 49 42 46 53			                .text "LIBFS"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8437		e7				                .byte >starLIBFS
168	>8438		f6				                .byte <starLIBFS

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8439		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>843a		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>843b		4d 4f 54 4f 52			                .text motorCommandString

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8440		93				                .byte >starCommandThroughOSBYTE
168	>8441		eb				                .byte <starCommandThroughOSBYTE

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8442		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8443		89				                .byte $89
276							                ; Name of command, compared case-insensitively.
277	>8444		4d 4f 56 45			                .text "MOVE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8448		90				                .byte >starMOVE
168	>8449		b6				                .byte <starMOVE

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>844a		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>844b		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>844c		4f 50 54			                .text "OPT"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>844f		93				                .byte >starCommandThroughOSBYTE
168	>8450		eb				                .byte <starCommandThroughOSBYTE

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8451		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8452		8b				                .byte $8B
276							                ; Name of command, compared case-insensitively.
277	>8453		50 52 49 4e 54			                .text "PRINT"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8458		8e				                .byte >starPRINT
168	>8459		b9				                .byte <starPRINT

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>845a		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>845b		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>845c		52 55 4e			                .text "RUN"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>845f		f1				                .byte >callFSCV
168	>8460		e5				                .byte <callFSCV

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8461		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8462		04				                .byte $04
276							                ; Name of command, compared case-insensitively.
277	>8463		52 45 4d 4f 56 45		                .text "REMOVE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8469		93				                .byte >starREMOVE
168	>846a		71				                .byte <starREMOVE

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>846b		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>846c		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>846d		52 4f 4d			                .text "ROM"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8470		93				                .byte >starCommandThroughOSBYTE
168	>8471		eb				                .byte <starCommandThroughOSBYTE

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8472		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8473		8d				                .byte $8D
276							                ; Name of command, compared case-insensitively.
277	>8474		52 4f 4d 53			                .text "ROMS"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8478		86				                .byte >starROMS
168	>8479		a6				                .byte <starROMS

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>847a		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>847b		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>847c		53 41 56 45			                .text "SAVE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8480		93				                .byte >starCommandThroughOSFILE
168	>8481		18				                .byte <starCommandThroughOSFILE

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8482		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8483		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>8484		53 48 41 44 4f 57		                .text "SHADOW"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>848a		94				                .byte >starSHADOW
168	>848b		66				                .byte <starSHADOW

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>848c		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>848d		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>848e		53 48 4f 57			                .text "SHOW"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8492		94				                .byte >starSHOW
168	>8493		88				                .byte <starSHOW

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8494		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8495		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>8496		53 48 55 54			                .text "SHUT"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>849a		f3				                .byte >starSHUT
168	>849b		73				                .byte <starSHUT

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>849c		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>849d		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>849e		53 50 4f 4f 4c			                .text "SPOOL"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>84a3		94				                .byte >starSPOOL
168	>84a4		33				                .byte <starSPOOL

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>84a5		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>84a6		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>84a7		53 50 4f 4f 4c 4f 4e		                .text "SPOOLON"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>84ae		94				                .byte >starSPOOLON
168	>84af		20				                .byte <starSPOOLON

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>84b0		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>84b1		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>84b2		53 54 41 54 55 53		                .text "STATUS"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>84b8		88				                .byte >starSTATUS
168	>84b9		95				                .byte <starSTATUS

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>84ba		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>84bb		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>84bc		54 41 50 45			                .text tapeCommandString

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>84c0		93				                .byte >starCommandThroughOSBYTE
168	>84c1		eb				                .byte <starCommandThroughOSBYTE

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>84c2		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>84c3		8c				                .byte $8C
276							                ; Name of command, compared case-insensitively.
277	>84c4		54 56				                .text "TV"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>84c6		93				                .byte >starCommandThroughOSBYTE
168	>84c7		eb				                .byte <starCommandThroughOSBYTE

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>84c8		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>84c9		90				                .byte $90
276							                ; Name of command, compared case-insensitively.
277	>84ca		54 49 4d 45			                .text "TIME"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>84ce		87				                .byte >starTIME
168	>84cf		44				                .byte <starTIME

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>84d0		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>84d1		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>84d2		54 59 50 45			                .text "TYPE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>84d6		8e				                .byte >starTYPE
168	>84d7		cb				                .byte <starTYPE

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>84d8		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>84d9		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>84da		55 4e 50 4c 55 47		                .text "UNPLUG"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>84e0		87				                .byte >starUNPLUG
168	>84e1		22				                .byte <starUNPLUG

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>84e2		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>84e3		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>84e4		58				                .text "X"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>84e5		e7				                .byte >starX
168	>84e6		fd				                .byte <starX

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>84e7		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>84e8		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>84e9						                .text ""

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>84e9		f1				                .byte >callFSCV
168	>84ea		e5				                .byte <callFSCV

283:6							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>84eb		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>84ec		03				                .byte $03
370	>84ed		00				                .byte $00

372							;-------------------------------------------------------------------------
373							;
374							; Get string input buffer address tail according to table byte.
375							;
376							; Entry:
377							;
378							; oscliWorkspace.tablePtr; = pointer to table byte
379							; (stringInputBufferAddress),y = pointer to input
380							;
381							; Exit:
382							;
383							; A = table byte
384							;
385							; if table byte bit 7 set: Y/X points to command line tail
386	.84ee						maybeGetStringInputBufferAddress:
387	.84ee		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
388	.84f0		30 0c		bmi $84fe	                bmi rts84FE
389	.84f2						getStringInputBufferAddressWithYOffset:
390	.84f2		98		tya		                tya
391	.84f3						getStringInputBufferAddressWithAOffset:
392	.84f3		18		clc		                clc
393	.84f4		65 f2		adc $f2		                adc stringInputBufferAddress+0
394	.84f6		aa		tax		                tax
395	.84f7		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
396	.84f9		90 01		bcc $84fc	                bcc +
397	.84fb		c8		iny		                iny
398	.84fc						+
399	.84fc		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
400	.84fe						rts84FE:
401	.84fe		60		rts		                rts

403							; Prepare OSCLI command line
404							; ==========================
405	.84ff						oscli:
406	.84ff		86 f2		stx $f2		                stx stringInputBufferAddress+0
407	.8501		84 f3		sty $f3		                sty stringInputBufferAddress+1
408	.8503		ad 00 df	lda $df00	                lda hazel.currentFS
409	.8506		20 4d fb	jsr $fb4d	                jsr selectFS
410	.8509		a9 08		lda #$08	                lda #fscStarCommand
411	.850b		20 e5 f1	jsr $f1e5	                jsr callFSCV
412	.850e		a0 ff		ldy #$ff	                ldy #$FF
413	.8510						L8510:
414	.8510		20 fe f2	jsr $f2fe	                jsr incAndSkipSpaces
415	.8513		f0 e9		beq $84fe	                beq rts84FE
416	.8515		c9 2a		cmp #$2a	                cmp #'*'
417	.8517		f0 f7		beq $8510	                beq L8510
418	.8519		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
419	.851c		f0 e0		beq $84fe	                beq rts84FE
420	.851e		c9 7c		cmp #$7c	                cmp #'|'
421	.8520		f0 dc		beq $84fe	                beq rts84FE
422	.8522		9c c6 df	stz $dfc6	                stz hazel.tempFSFlag
423	.8525		c9 2d		cmp #$2d	                cmp #'-'
424	.8527		d0 0c		bne $8535	                bne L8535
425	.8529		20 a6 fa	jsr $faa6	                jsr parseFileNameFS
426	.852c		20 4d fb	jsr $fb4d	                jsr selectFS
427	.852f		38		sec		                sec
428	.8530		6e c6 df	ror $dfc6	                ror hazel.tempFSFlag
429	.8533		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
430	.8535						L8535:
431	.8535		c9 2f		cmp #$2f	                cmp #'/'
432	.8537		d0 09		bne $8542	                bne L8542
433	.8539		c8		iny		                iny
434	.853a		20 f2 84	jsr $84f2	                jsr getStringInputBufferAddressWithYOffset
435	.853d		a9 02		lda #$02	                lda #fscStarSlash
436	.853f		4c e5 f1	jmp $f1e5	                jmp callFSCV

438	.8542						L8542:
440	.8542		84 e6		sty $e6		                sty $E6
442	.8544		a9 68		lda #$68	                lda #<mosCommandTable
443	.8546		85 b0		sta $b0		                sta oscliWorkspace.tablePtr+0
444	.8548		a9 83		lda #$83	                lda #>mosCommandTable
445	.854a		85 b1		sta $b1		                sta oscliWorkspace.tablePtr+1
447	.854c		80 0a		bra $8558	                bra L8558

455	.854e						L854E:
456	.854e		52 b0		eor ($b0)	                eor (oscliWorkspace.tablePtr)
457	.8550		29 df		and #$df	                and #$DF
458	.8552		d0 15		bne $8569	                bne L8569
459	.8554		20 9b 85	jsr $859b	                jsr fetchCommandTableByte
460	.8557		c8		iny		                iny
461	.8558						L8558:
462	.8558		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
463	.855a		20 71 ea	jsr $ea71	                jsr isLetter
464	.855d		90 ef		bcc $854e	                bcc L854E                    ;taken if letter
465	.855f		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
466	.8561		30 1f		bmi $8582	                bmi L8582                ;taken if end of command name
467	.8563		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
468	.8565		c9 2e		cmp #$2e	                cmp #'.'
469	.8567		f0 04		beq $856d	                beq L856D                    ;taken if input abbreviated
470	.8569						L8569:
471	.8569		18		clc		                clc
472	.856a		a4 e6		ldy $e6		                ldy $E6
473	.856c		88		dey		                dey
474	.856d						L856D:
475	.856d		c8		iny		                iny
476	.856e						L856E:
477	.856e		20 9b 85	jsr $859b	                jsr fetchCommandTableByte ; Get byte from table, update pointer
478	.8571		f0 3c		beq $85af	                beq passStarCommandThrough   ; Zero byte
479	.8573		10 f9		bpl $856e	                bpl L856E                    ; Loop until b7 set
480	.8575		b0 0e		bcs $8585	                bcs L8585
481	.8577		20 9b 85	jsr $859b	                jsr fetchCommandTableByte
482	.857a		20 9b 85	jsr $859b	                jsr fetchCommandTableByte
483	.857d		20 9b 85	jsr $859b	                jsr fetchCommandTableByte
484	.8580		80 d6		bra $8558	                bra L8558

486	.8582						L8582:
487	.8582		20 9b 85	jsr $859b	                jsr fetchCommandTableByte
489	.8585						L8585:
490	.8585		48		pha		                pha
491	.8586		20 9b 85	jsr $859b	                jsr fetchCommandTableByte
492	.8589		48		pha		                pha
493	.858a		20 9b 85	jsr $859b	                jsr fetchCommandTableByte
494	.858d		30 03		bmi $8592	                bmi L8592
495	.858f		9c c6 df	stz $dfc6	                stz hazel.tempFSFlag
496	.8592						L8592:
497	.8592		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
498	.8595		18		clc		                clc
499	.8596		08		php		                php
500	.8597		20 ee 84	jsr $84ee	                jsr maybeGetStringInputBufferAddress
501	.859a		40		rti		                rti

505							                ; The useTableDrivenConfigure version of this does an
506							                ; INX on entry - but i don't think in practice this
507							                ; makes a difference if !useTableDrivenConfigure.

509	.859b						fetchCommandTableByte:
510	.859b		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
511	.859d		48		pha		                pha
512	.859e		e6 b0		inc $b0		                inc oscliWorkspace.tablePtr+0
513	.85a0		d0 02		bne $85a4	                bne +
514	.85a2		e6 b1		inc $b1		                inc oscliWorkspace.tablePtr+1
515	.85a4						+
516	.85a4		68		pla		                pla
517	.85a5						rts85A5:
518	.85a5		60		rts		                rts

521							;-------------------------------------------------------------------------

523							; *BASIC
524							; ======
525	.85a6						starBASIC:
526	.85a6		ae 4b 02	ldx $024b	                ldx basicROMNumber           ; Get BASIC ROM number
527	.85a9		30 04		bmi $85af	                bmi passStarCommandThrough ; If no BASIC ROM, jump to pass to ROMs and filing system
531	.85ab		38		sec		                sec                          ;
532	.85ac		4c c3 e4	jmp $e4c3	                jmp osbyte8E             ; Enter ROM as a language

538							;-------------------------------------------------------------------------

540							; *ADFS - pass straight to ROMs/Filing System
541							; ===========================================
542	.85af						passStarCommandThrough:
543	.85af		2c c6 df	bit $dfc6	                bit hazel.tempFSFlag      ; Check filing system flag
544	.85b2		30 0c		bmi $85c0	                bmi L85C0                    ; If ... skip ROM service call
545	.85b4		9c c6 df	stz $dfc6	                stz hazel.tempFSFlag      ; Clear filing system flag
546	.85b7		a4 e6		ldy $e6		                ldy $E6
547	.85b9		a2 04		ldx #$04	                ldx #romServiceCallUnrecognisedCommand
548	.85bb		20 03 ee	jsr $ee03	                jsr osbyte8F    ; Service call 4 - Unknown command
552	.85be		f0 e5		beq $85a5	                beq rts85A5                    ; Claimed, return
554	.85c0						L85C0:
555	.85c0		a5 e6		lda $e6		                lda $E6
556	.85c2		20 f3 84	jsr $84f3	                jsr getStringInputBufferAddressWithAOffset
557	.85c5		a9 03		lda #$03	                lda #$03
558	.85c7		4c e5 f1	jmp $f1e5	                jmp callFSCV ; Pass to FSCV,3 - Unknown command

560	.85ca						starHELP:
561	.85ca		a2 09		ldx #$09	                ldx #romServiceCallHelp      ;
562	.85cc		a5 d0		lda $d0		                lda STATE                    ;
563	.85ce		48		pha		                pha                          ;save STATE
564	.85cf		a9 0e		lda #$0e	                lda #14
565	.85d1		20 ee ff	jsr $ffee	                jsr OSWRCH                   ; paged mode ON
566	.85d4		20 72 ee	jsr $ee72	                jsr makeROMServiceCall   ;
567	.85d7		a2 18		ldx #$18	                ldx #romServiceCallReserved  ;???
568	.85d9		20 72 ee	jsr $ee72	                jsr makeROMServiceCall
569	.85dc		68		pla		                pla                          ;restore STATE
570	.85dd		89 04		bit #$04	                bit #STATE.isPagedScrolling  ;was paged mode on originally?
571	.85df		d0 2c		bne $860d	                bne parseDone   ;taken if paged mode was originally on
572							                                ;(branch target is an arbitrary nearby
573							                                ;RTS)
574	.85e1		a9 0f		lda #$0f	                lda #15         ;restore non-paged mode
575	.85e3		4c ee ff	jmp $ffee	                jmp OSWRCH

577							;-------------------------------------------------------------------------
578							;
579							; Read a byte value (0-255) from a string. If the number has a '&'
580							; prefix, interpret it as hex.
581							;
582							; entry:
583							;
584							; (stringInputBufferAddress),y - string
585							;
586							; exit:
587							;
588							; X = result
589							; ?$e6 = result
590							; C=0 if error
591							; Z=1 if CR encountered
592							;
593	.85e6						parseNumberFromString:
594	.85e6		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
595	.85e9		c9 26		cmp #$26	                cmp #'&'                     ; hex value incoming?
596	.85eb		d0 21		bne $860e	                bne parseDecimal             ; taken if not hex value
597	.85ed						parseHex:
598	.85ed		c8		iny		                iny                          ; skip '&'
599	.85ee		20 48 86	jsr $8648	                jsr readHexDigit             ; read first hex digit
600	.85f1		90 53		bcc $8646	                bcc errorReadingString
601	.85f3		85 e6		sta $e6		                sta $E6                      ; save first hex digit
602	.85f5		20 48 86	jsr $8648	                jsr readHexDigit             ; read second hex digih
603	.85f8		90 0e		bcc $8608	                bcc parsedValue         ; taken if not hex digit
604							                ; The first digit read was actually the high nybble,
605							                ; and the current digit read is therefore the low
606							                ; nybble.
607							                ;
608							                ; Shift saved digit 4 bits left.
609	.85fa		a2 04		ldx #$04	                ldx #$04
610	.85fc						-
611	.85fc		06 e6		asl $e6		                asl $E6
612	.85fe		ca		dex		                dex
613	.85ff		d0 fb		bne $85fc	                bne -
614	.8601		04 e6		tsb $e6		                tsb $E6                      ; insert low nybble
615	.8603		20 48 86	jsr $8648	                jsr readHexDigit             ; read third hex digit
616	.8606		b0 29		bcs $8631	                bcs errorReadingString2 ; 3+-digit hex values are not valid
617	.8608						parsedValue:
618	.8608		a6 e6		ldx $e6		                ldx $E6
619	.860a		c9 0d		cmp #$0d	                cmp #$0D
620	.860c		38		sec		                sec
621	.860d						parseDone:
622	.860d		60		rts		                rts

624	.860e						parseDecimal:
625	.860e		20 34 86	jsr $8634	                jsr readDigitFromString
626	.8611		90 33		bcc $8646	                bcc errorReadingString      ;branch taken if not digit
627	.8613						parseDecimalDigit:
628	.8613		85 e6		sta $e6		                sta $E6                     ;save current value
629	.8615		20 33 86	jsr $8633	                jsr readNextDigitFromString
630	.8618		90 ee		bcc $8608	                bcc parsedValue ;branch taken if not digit, meaning number
631							                                     ;parsed successfully
632	.861a		aa		tax		                tax                         ;X=digit

634							                ; calculate (value*4+value)*2 - i.e., value*10. Carry
635							                ; at any point indicates the value was greater than
636							                ; 255, and therefore an error.
637	.861b		a5 e6		lda $e6		                lda $E6                     ;value
638	.861d		0a		asl a		                asl a                       ;value*2
639	.861e		b0 26		bcs $8646	                bcs errorReadingString
640	.8620		0a		asl a		                asl a                       ;value*4
641	.8621		b0 23		bcs $8646	                bcs errorReadingString
642	.8623		65 e6		adc $e6		                adc $E6                     ;value*5
643	.8625		b0 1f		bcs $8646	                bcs errorReadingString
644	.8627		0a		asl a		                asl a                       ;value*10
645	.8628		b0 1c		bcs $8646	                bcs errorReadingString
646	.862a		85 e6		sta $e6		                sta $E6                      ;save value*10
647	.862c		8a		txa		                txa                          ;A=digit
648	.862d		65 e6		adc $e6		                adc $E6                      ;value*10+digit
649	.862f		90 e2		bcc $8613	                bcc parseDecimalDigit
650	.8631						errorReadingString2:
651	.8631		18		clc		                clc
652	.8632		60		rts		                rts

654	.8633						readNextDigitFromString:
655	.8633		c8		iny		                iny

657							; check if current string input byte is a digit.
658							;
659							; exit: C=1 if digit; C=0 if not digit
660	.8634						readDigitFromString:
661	.8634		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
662	.8636		c9 3a		cmp #$3a	                cmp #'9'+1
663	.8638		b0 0c		bcs $8646	                bcs errorReadingString       ;taken if not ASCII decimal digit
664	.863a		c9 30		cmp #$30	                cmp #'0'
665	.863c		90 08		bcc $8646	                bcc errorReadingString       ;taken if not ASCII decimal digit
666	.863e		29 0f		and #$0f	                and #$0F         ;convert ASCII decimaldigit to number
667	.8640		60		rts		                rts

669	.8641						L8641:
670	.8641		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
672	.8644		c9 0d		cmp #$0d	                cmp #$0D
674	.8646						errorReadingString:
675	.8646		18		clc		                clc
676	.8647		60		rts		                rts

678							;-------------------------------------------------------------------------
679							;
680							; Read a hex digit from a string
681							;
682							; entry:
683							;
684							; (stringInputBufferAddress),y = next byte to read
685							;
686							; exit:
687							;
688							; C=1 if ok: A = digit read
689							;
690							; C=0 if error: A = value read, Z=1 if CR encountered
691							;
692	.8648						readHexDigit:
693	.8648		20 34 86	jsr $8634	                jsr readDigitFromString
694	.864b		b0 0d		bcs $865a	                bcs +                        ; branch taken if digit
695	.864d		29 df		and #$df	                and #$DF                     ; convert to upper case
696	.864f		c9 47		cmp #$47	                cmp #'F'+1
697	.8651		b0 ee		bcs $8641	                bcs L8641    ; branch taken if not ASCII A-F hex digit
698	.8653		c9 41		cmp #$41	                cmp #'A'
699	.8655		90 ea		bcc $8641	                bcc L8641     ;branch taken if not ASCII A-F hex digit
700							                ; convert ASCII A-F hex digit to number.
701	.8657		49 48		eor #$48	                eor #$48
702	.8659		1a		inc a		                inc a
703	.865a						+
704	.865a		c8		iny		                iny
705	.865b		60		rts		                rts

707							;-------------------------------------------------------------------------
708							;
709							; OSWORD 0 control block for *commands
710							; ====================================
711	.865c						commandLineUIOSWORD0Parameters:
712	>865c		00 dc				                .word hazel.commandLine      ; address
713	>865e		f0				                .byte $F0			; max # chars
714	>865f		20				                .byte $20			; min ASCII char
715	>8660		7e				                .byte $7E			; max ASCII char

717							;-------------------------------------------------------------------------

719	.8661						commandLineUI:
720	.8661		a9 8d		lda #$8d	                lda #<commandLineUIBRKHandler
721	.8663		8d 02 02	sta $0202	                sta BRKV+0
722	.8666		a9 86		lda #$86	                lda #>commandLineUIBRKHandler
723	.8668		8d 03 02	sta $0203	                sta BRKV+1
724	.866b		a9 1f		lda #$1f	                lda #$10|terminalROM         ;????
725	.866d		8d 8c 02	sta $028c	                sta currentLanguageROM
726	.8670						commandLineUILoop:
727	.8670		a2 ff		ldx #$ff	                ldx #$FF
728	.8672		9a		txs		                txs
729	.8673		58		cli		                cli
730	.8674		20 ba ed	jsr $edba	                jsr selectHAZEL
731	.8677		a9 2a		lda #$2a	                lda #'*'
732	.8679		20 ee ff	jsr $ffee	                jsr OSWRCH
733	.867c		20 9d 86	jsr $869d	                jsr readCommandLine
734	.867f		90 03		bcc $8684	                bcc +                     ;taken if ESCAPE not pressed
735	.8681		4c 91 a8	jmp $a891	                jmp escapeError
736	.8684						+
737	.8684		a2 00		ldx #$00	                ldx #<hazel.commandLine
738	.8686		a0 dc		ldy #$dc	                ldy #>hazel.commandLine
739	.8688		20 f7 ff	jsr $fff7	                jsr OSCLI
740	.868b		80 e3		bra $8670	                bra commandLineUILoop

742	.868d						commandLineUIBRKHandler:
743	.868d		20 e7 ff	jsr $ffe7	                jsr OSNEWL
744	.8690		a0 00		ldy #$00	                ldy #$00
745	.8692		20 a7 e7	jsr $e7a7	                jsr printBRKMessage
746	.8695		20 e7 ff	jsr $ffe7	                jsr OSNEWL
747	.8698		80 c7		bra $8661	                bra commandLineUI

749	.869a						badCommandError869A:
750	.869a		4c ed fb	jmp $fbed	                jmp badCommandError

752	.869d						readCommandLine:
753	.869d		a9 00		lda #$00	                lda #$00
754	.869f		a2 5c		ldx #$5c	                ldx #<commandLineUIOSWORD0Parameters
755	.86a1		a0 86		ldy #$86	                ldy #>commandLineUIOSWORD0Parameters
756	.86a3		4c f1 ff	jmp $fff1	                jmp OSWORD

758							;-------------------------------------------------------------------------
759							;
760							; *ROMS [MasRef C.5-10]
761							;
762	.86a6						starROMS: .proc
763	.86a6		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
764	.86a9		d0 ef		bne $869a	                bne badCommandError869A
765	.86ab		a0 0f		ldy #$0f	                ldy #$0F
766	.86ad						printROMsLoop:
768	.86ad		c8		iny		                iny                          ;ensure Y!=0
769	.86ae		20 27 a9	jsr $a927	                jsr printFollowingMessage
770	>86b1		52 4f 4d 20 00			                .text "ROM ",0
771	.86b6		98		tya		                tya                          ;A = ROM number+1
772	.86b7		3a		dec a		                dec a                        ;A = ROM number
773	.86b8		48		pha		                pha                          ;save ROM number
790	.86b9		20 73 a8	jsr $a873	                jsr printHexDigit            ;print ROM slot
791	.86bc		20 0c 9f	jsr $9f0c	                jsr printSpace
792	.86bf		a9 09		lda #$09	                lda #<sidewaysROMName
793	.86c1		85 f6		sta $f6		                sta $F6
794	.86c3		a9 80		lda #$80	                lda #>sidewaysROMName
795	.86c5		85 f7		sta $f7		                sta $F7
797	.86c7		fa		plx		                plx                          ;restore ROM number
799	.86c8		20 87 e5	jsr $e587	                jsr isROMValidThenSelectTerminalROM
801	.86cb		88		dey		                dey
803	.86cc		90 4a		bcc $8718	                bcc invalidROM
809	.86ce						printROMNameLoop:
810	.86ce		20 fc f3	jsr $f3fc	                jsr osrdscEntryPoint     ;read name byte
811	.86d1		c9 20		cmp #$20	                cmp #' '
812	.86d3		90 0f		bcc $86e4	                bcc printROMVersion ;taken if non-printable char, including the terminating 0
813	.86d5		c9 7f		cmp #$7f	                cmp #127
814	.86d7		b0 3f		bcs $8718	                bcs invalidROM  ;taken if bad (bit 7 set) char in name
815	.86d9		20 ee ff	jsr $ffee	                jsr OSWRCH
816	.86dc		e6 f6		inc $f6		                inc $F6
817	.86de		24 f6		bit $f6		                bit $F6
818	.86e0		50 ec		bvc $86ce	                bvc printROMNameLoop         ;taken if address<$8040
819	.86e2		80 34		bra $8718	                bra invalidROM               ;taken if name too long

821	.86e4						printROMVersion:
822	.86e4		aa		tax		                tax               ;Z=1 if final char was the expected 0
823	.86e5		d0 31		bne $8718	                bne invalidROM    ;taken if bad (control) char in name
824	.86e7		a9 08		lda #$08	                lda #<sidewaysROMVersion
825	.86e9		85 f6		sta $f6		                sta $F6
826	.86eb		a9 80		lda #$80	                lda #>sidewaysROMVersion
827	.86ed		85 f7		sta $f7		                sta $F7
828	.86ef		20 fc f3	jsr $f3fc	                jsr osrdscEntryPoint
829	.86f2		20 65 a8	jsr $a865	                jsr printSpaceThenPrintHexByte
833	.86f5						printInsertionStatus:
834	.86f5		5a		phy		                phy
839	.86f6		20 bb e9	jsr $e9bb	                jsr getROMInsertedFlagRTCAddressAndMask
840	.86f9		85 b0		sta $b0		                sta starROMSWorkspace.insertedFlagMask
841	.86fb		20 b7 98	jsr $98b7	                jsr readRTCByte
842	.86fe		25 b0		and $b0		                and starROMSWorkspace.insertedFlagMask
849	.8700		d0 0e		bne $8710	                bne +
850	.8702		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
851	>8705		20 75 6e 70 6c 75 67 67		                .text " unplugged",0
	>870d		65 64 00
857	.8710						+
868	.8710		7a		ply		                ply
869	.8711		20 e7 ff	jsr $ffe7	                jsr OSNEWL
870	.8714		88		dey		                dey
875	.8715		10 96		bpl $86ad	                bpl printROMsLoop
876	.8717		60		rts		                rts

879	.8718						invalidROM:
880	.8718		a9 3f		lda #$3f	                lda #'?'
881	.871a		20 ee ff	jsr $ffee	                jsr OSWRCH
885	.871d		80 d6		bra $86f5	                bra printInsertionStatus

904							                .endproc

906							;-------------------------------------------------------------------------

917							;-------------------------------------------------------------------------
918							;
919							; *INSERT [MasRef C.5-8]
920							;
921	.871f						starINSERT:
922	.871f		38		sec		                sec
923	.8720		80 01		bra $8723	                bra starINSERTOrStarUNPLUG

925							;-------------------------------------------------------------------------
926							;
927							; *UNPLUG [MasRef C.5-13]
928							;
929	.8722						starUNPLUG:
930	.8722		18		clc		                clc
931	.8723						starINSERTOrStarUNPLUG:
932	.8723		08		php		                php
933	.8724		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
934	.8727		20 7d 89	jsr $897d	                jsr parseSingle4BitNumberFromCommandLine
935	.872a		a8		tay		                tay                          ;Y=ROM number
936	.872b		20 bb e9	jsr $e9bb	                jsr getROMInsertedFlagRTCAddressAndMask
937	.872e		48		pha		                pha
938	.872f		20 b7 98	jsr $98b7	                jsr readRTCByte
939	.8732		84 b0		sty $b0		                sty starROMSWorkspace.insertedFlagMask
940	.8734		68		pla		                pla
941	.8735		28		plp		                plp
942	.8736		90 04		bcc $873c	                bcc unplug                   ;taken if it's *UNPLUG

944							                ; it's *INSERT
945	.8738		05 b0		ora $b0		                ora starROMSWorkspace.insertedFlagMask
946	.873a		80 04		bra $8740	                bra +
947	.873c						unplug:
948	.873c		49 ff		eor #$ff	                eor #$FF
949	.873e		25 b0		and $b0		                and starROMSWorkspace.insertedFlagMask
950	.8740						+
951	.8740		a8		tay		                tay
952	.8741		4c e4 98	jmp $98e4	                jmp writeRTCByte

954							;-------------------------------------------------------------------------
955							;
956							; *TIME [MasRef C.5-12]
957							;
958	.8744						starTIME:
959	.8744		9c 00 dc	stz $dc00	                stz hazel.commandLine
960	.8747		a2 00		ldx #$00	                ldx #<hazel.commandLine
961	.8749		a0 dc		ldy #$dc	                ldy #>hazel.commandLine
962	.874b		a9 0e		lda #$0e	                lda #$0E
963	.874d		20 f1 ff	jsr $fff1	                jsr OSWORD
964	.8750		a2 e7		ldx #$e7	                ldx #256-size(ClockStringFormat)
965	.8752						L8752:
966	.8752		bd 19 db	lda $db19,x	                lda hazel.commandLine-(256-size(ClockStringFormat)),x
967	.8755		20 e3 ff	jsr $ffe3	                jsr OSASCI
968	.8758		e8		inx		                inx
969	.8759		d0 f7		bne $8752	                bne L8752
970	.875b		60		rts		                rts

972							;-------------------------------------------------------------------------

982							                .include "configure_code_driven.s65"

:15	;******  Processing file: src/configure_code_driven.s65

1	=[]						_:=[]
2	=[(".",$8bf0,$8d7f)]				_..=[(".",printCONFIGUREHelp,printSTATUSHelp)]
4	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d)]	_..=[("BAUD",setDefaultSerialBaudRateIndex,printDefaultSerialBaudRateIndex)]
6	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1)]
							_..=[("BOOT",setDefaultAutoBoot,printDefaultAutoBoot)]
7	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66)]
							_..=[("CAPS",setDefaultsCapsLock,printDefaultCaps)]
9	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82)]
							_..=[("DATA",setDefaultSerialDataFormat,printDefaultSerialDataFormat)]
11	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e)]
							_..=[("DELAY",setDefaultKeyboardAutoRepeatDelay,printDefaultKeyboardAutoRepeatDelay)]
13	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa)]
							_..=[("DIR",setDefaultADFSLoadDir,printDefaultADFSLoadDir)]
16	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb)]
							_..=[("EXTUBE",setDefaultExtTube,printDefaultExtTube)]
19	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87)]
							_..=[("FDRIVE",setDefaultFDRIVE,printDefaultFDRIVE)]
21	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10)]
							_..=[("FILE",setDefaultFSROM,printDefaultFSROM)]
23	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e)]
							_..=[("FLOPPY",setDefaultFloppyDrive,printDefaultFloppyDrive)]
26	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e)]
							_..=[("HARD",setDefaultHardDrive,printDefaultFloppyDrive)]
28	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44)]
							_..=[("IGNORE",setDefaultPrinterIgnoreChar,printDefaultPrinterIgnoreChar)]
30	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb)]
							_..=[("INTUBE",setDefaultIntTube,printDefaultExtTube)]
32	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08)]
							_..=[("LANG",setDefaultLanguageROM,printDefaultLanguageROM)]
33	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08),("LOUD",$8a0f,$8a9f)]
							_..=[("LOUD",setDefaultLoud,printDefaultLoud)]
34	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08),("LOUD",$8a0f,$8a9f),("MODE",$88f0,$8b25)]
							_..=[("MODE",setDefaultMODE,printDefaultMODE)]
35	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08),("LOUD",$8a0f,$8a9f),("MODE",$88f0,$8b25),("NOBOOT",$8a2e,$8ae1)]
							_..=[("NOBOOT",setDefaultNoAutoBoot,printDefaultAutoBoot)]
36	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08),("LOUD",$8a0f,$8a9f),("MODE",$88f0,$8b25),("NOBOOT",$8a2e,$8ae1),("NOCAPS",$88dc,$8a66)]
							_..=[("NOCAPS",setDefaultNoLock,printDefaultCaps)]
38	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08),("LOUD",$8a0f,$8a9f),("MODE",$88f0,$8b25),("NOBOOT",$8a2e,$8ae1),("NOCAPS",$88dc,$8a66),("NODIR",$88c3,$8baa)]
							_..=[("NODIR",setDefaultADFSNoLoadDir,printDefaultADFSLoadDir)]
40	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08),("LOUD",$8a0f,$8a9f),("MODE",$88f0,$8b25),("NOBOOT",$8a2e,$8ae1),("NOCAPS",$88dc,$8a66),("NODIR",$88c3,$8baa),("NOSCROLL",$8a3c,$8a89)]
							_..=[("NOSCROLL",setDefaultNoProtectedScrolling,printDefaultProtectedScrolling)]
42	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08),("LOUD",$8a0f,$8a9f),("MODE",$88f0,$8b25),("NOBOOT",$8a2e,$8ae1),("NOCAPS",$88dc,$8a66),("NODIR",$88c3,$8baa),("NOSCROLL",$8a3c,$8a89),("NOTUBE",$89e4,$8af5)]
							_..=[("NOTUBE",setDefaultTubeOff,printDefaultTubeOn)]
44	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08),("LOUD",$8a0f,$8a9f),("MODE",$88f0,$8b25),("NOBOOT",$8a2e,$8ae1),("NOCAPS",$88dc,$8a66),("NODIR",$88c3,$8baa),("NOSCROLL",$8a3c,$8a89),("NOTUBE",$89e4,$8af5),("PRINT",$89c7,$8b78)]
							_..=[("PRINT",setDefaultFX5Settings,printDefaultFX5Settings)]
45	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08),("LOUD",$8a0f,$8a9f),("MODE",$88f0,$8b25),("NOBOOT",$8a2e,$8ae1),("NOCAPS",$88dc,$8a66),("NODIR",$88c3,$8baa),("NOSCROLL",$8a3c,$8a89),("NOTUBE",$89e4,$8af5),("PRINT",$89c7,$8b78),("QUIET",$8a09,$8a9f)]
							_..=[("QUIET",setDefaultQuiet,printDefaultLoud)]
46	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08),("LOUD",$8a0f,$8a9f),("MODE",$88f0,$8b25),("NOBOOT",$8a2e,$8ae1),("NOCAPS",$88dc,$8a66),("NODIR",$88c3,$8baa),("NOSCROLL",$8a3c,$8a89),("NOTUBE",$89e4,$8af5),("PRINT",$89c7,$8b78),("QUIET",$8a09,$8a9f),("REPEAT",$89a1,$8b34)]
							_..=[("REPEAT",setDefaultKeyboardAutoRepeatRate,printDefaultKeyboardRepeatRate)]
47	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08),("LOUD",$8a0f,$8a9f),("MODE",$88f0,$8b25),("NOBOOT",$8a2e,$8ae1),("NOCAPS",$88dc,$8a66),("NODIR",$88c3,$8baa),("NOSCROLL",$8a3c,$8a89),("NOTUBE",$89e4,$8af5),("PRINT",$89c7,$8b78),("QUIET",$8a09,$8a9f),("REPEAT",$89a1,$8b34),("SCROLL",$8a36,$8a89)]
							_..=[("SCROLL",setDefaultProtectedScrolling,printDefaultProtectedScrolling)]
48	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08),("LOUD",$8a0f,$8a9f),("MODE",$88f0,$8b25),("NOBOOT",$8a2e,$8ae1),("NOCAPS",$88dc,$8a66),("NODIR",$88c3,$8baa),("NOSCROLL",$8a3c,$8a89),("NOTUBE",$89e4,$8af5),("PRINT",$89c7,$8b78),("QUIET",$8a09,$8a9f),("REPEAT",$89a1,$8b34),("SCROLL",$8a36,$8a89),("SHCAPS",$88e2,$8a66)]
							_..=[("SHCAPS",setDefaultShiftLock,printDefaultCaps)]
50	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08),("LOUD",$8a0f,$8a9f),("MODE",$88f0,$8b25),("NOBOOT",$8a2e,$8ae1),("NOCAPS",$88dc,$8a66),("NODIR",$88c3,$8baa),("NOSCROLL",$8a3c,$8a89),("NOTUBE",$89e4,$8af5),("PRINT",$89c7,$8b78),("QUIET",$8a09,$8a9f),("REPEAT",$89a1,$8b34),("SCROLL",$8a36,$8a89),("SHCAPS",$88e2,$8a66),("TUBE",$89ee,$8af5)]
							_..=[("TUBE",setDefaultTubeOn,printDefaultTubeOn)]
52	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08),("LOUD",$8a0f,$8a9f),("MODE",$88f0,$8b25),("NOBOOT",$8a2e,$8ae1),("NOCAPS",$88dc,$8a66),("NODIR",$88c3,$8baa),("NOSCROLL",$8a3c,$8a89),("NOTUBE",$89e4,$8af5),("PRINT",$89c7,$8b78),("QUIET",$8a09,$8a9f),("REPEAT",$89a1,$8b34),("SCROLL",$8a36,$8a89),("SHCAPS",$88e2,$8a66),("TUBE",$89ee,$8af5),("TV",$8906,$8b17)]
							_..=[("TV",setDefaultTVSettings,printDefaultTVSettings)]
53	=[(".",$8bf0,$8d7f),("BAUD",$89f1,$8b7d),("BOOT",$8a28,$8ae1),("CAPS",$88e8,$8a66),("DATA",$8a17,$8b82),("DELAY",$899f,$8b2e),("DIR",$88bd,$8baa),("EXTUBE",$8a44,$8abb),("FDRIVE",$88cb,$8b87),("FILE",$8a5f,$8b10),("FLOPPY",$88b5,$8b8e),("HARD",$88af,$8b8e),("IGNORE",$89b4,$8b44),("INTUBE",$8a4a,$8abb),("LANG",$8a52,$8b08),("LOUD",$8a0f,$8a9f),("MODE",$88f0,$8b25),("NOBOOT",$8a2e,$8ae1),("NOCAPS",$88dc,$8a66),("NODIR",$88c3,$8baa),("NOSCROLL",$8a3c,$8a89),("NOTUBE",$89e4,$8af5),("PRINT",$89c7,$8b78),("QUIET",$8a09,$8a9f),("REPEAT",$89a1,$8b34),("SCROLL",$8a36,$8a89),("SHCAPS",$88e2,$8a66),("TUBE",$89ee,$8af5),("TV",$8906,$8b17)]
							configureData=_

56	.875c						configureNames:
57							                .for i=0,i<len(configureData),i+=1
58	>875c		2e				                .text configureData[i][0]
59	>875d		80				                .byte $80+i*4                ;encoded index into configureRoutines
58	>875e		42 41 55 44			                .text configureData[i][0]
59	>8762		84				                .byte $80+i*4                ;encoded index into configureRoutines
58	>8763		42 4f 4f 54			                .text configureData[i][0]
59	>8767		88				                .byte $80+i*4                ;encoded index into configureRoutines
58	>8768		43 41 50 53			                .text configureData[i][0]
59	>876c		8c				                .byte $80+i*4                ;encoded index into configureRoutines
58	>876d		44 41 54 41			                .text configureData[i][0]
59	>8771		90				                .byte $80+i*4                ;encoded index into configureRoutines
58	>8772		44 45 4c 41 59			                .text configureData[i][0]
59	>8777		94				                .byte $80+i*4                ;encoded index into configureRoutines
58	>8778		44 49 52			                .text configureData[i][0]
59	>877b		98				                .byte $80+i*4                ;encoded index into configureRoutines
58	>877c		45 58 54 55 42 45		                .text configureData[i][0]
59	>8782		9c				                .byte $80+i*4                ;encoded index into configureRoutines
58	>8783		46 44 52 49 56 45		                .text configureData[i][0]
59	>8789		a0				                .byte $80+i*4                ;encoded index into configureRoutines
58	>878a		46 49 4c 45			                .text configureData[i][0]
59	>878e		a4				                .byte $80+i*4                ;encoded index into configureRoutines
58	>878f		46 4c 4f 50 50 59		                .text configureData[i][0]
59	>8795		a8				                .byte $80+i*4                ;encoded index into configureRoutines
58	>8796		48 41 52 44			                .text configureData[i][0]
59	>879a		ac				                .byte $80+i*4                ;encoded index into configureRoutines
58	>879b		49 47 4e 4f 52 45		                .text configureData[i][0]
59	>87a1		b0				                .byte $80+i*4                ;encoded index into configureRoutines
58	>87a2		49 4e 54 55 42 45		                .text configureData[i][0]
59	>87a8		b4				                .byte $80+i*4                ;encoded index into configureRoutines
58	>87a9		4c 41 4e 47			                .text configureData[i][0]
59	>87ad		b8				                .byte $80+i*4                ;encoded index into configureRoutines
58	>87ae		4c 4f 55 44			                .text configureData[i][0]
59	>87b2		bc				                .byte $80+i*4                ;encoded index into configureRoutines
58	>87b3		4d 4f 44 45			                .text configureData[i][0]
59	>87b7		c0				                .byte $80+i*4                ;encoded index into configureRoutines
58	>87b8		4e 4f 42 4f 4f 54		                .text configureData[i][0]
59	>87be		c4				                .byte $80+i*4                ;encoded index into configureRoutines
58	>87bf		4e 4f 43 41 50 53		                .text configureData[i][0]
59	>87c5		c8				                .byte $80+i*4                ;encoded index into configureRoutines
58	>87c6		4e 4f 44 49 52			                .text configureData[i][0]
59	>87cb		cc				                .byte $80+i*4                ;encoded index into configureRoutines
58	>87cc		4e 4f 53 43 52 4f 4c 4c		                .text configureData[i][0]
59	>87d4		d0				                .byte $80+i*4                ;encoded index into configureRoutines
58	>87d5		4e 4f 54 55 42 45		                .text configureData[i][0]
59	>87db		d4				                .byte $80+i*4                ;encoded index into configureRoutines
58	>87dc		50 52 49 4e 54			                .text configureData[i][0]
59	>87e1		d8				                .byte $80+i*4                ;encoded index into configureRoutines
58	>87e2		51 55 49 45 54			                .text configureData[i][0]
59	>87e7		dc				                .byte $80+i*4                ;encoded index into configureRoutines
58	>87e8		52 45 50 45 41 54		                .text configureData[i][0]
59	>87ee		e0				                .byte $80+i*4                ;encoded index into configureRoutines
58	>87ef		53 43 52 4f 4c 4c		                .text configureData[i][0]
59	>87f5		e4				                .byte $80+i*4                ;encoded index into configureRoutines
58	>87f6		53 48 43 41 50 53		                .text configureData[i][0]
59	>87fc		e8				                .byte $80+i*4                ;encoded index into configureRoutines
58	>87fd		54 55 42 45			                .text configureData[i][0]
59	>8801		ec				                .byte $80+i*4                ;encoded index into configureRoutines
58	>8802		54 56				                .text configureData[i][0]
59	>8804		f0				                .byte $80+i*4                ;encoded index into configureRoutines
60							                .next
61	>8805		00				                .byte 0

63	.8806						configureRoutines:
64							                .for i=0,i<len(configureData),i+=1
167:3	>8806		8b				                .byte >configureData[i][1]-1
168	>8807		ef				                .byte <configureData[i][1]-1
167	>8808		8d				                .byte >configureData[i][2]-1
168	>8809		7e				                .byte <configureData[i][2]-1
167	>880a		89				                .byte >configureData[i][1]-1
168	>880b		f0				                .byte <configureData[i][1]-1
167	>880c		8b				                .byte >configureData[i][2]-1
168	>880d		7c				                .byte <configureData[i][2]-1
167	>880e		8a				                .byte >configureData[i][1]-1
168	>880f		27				                .byte <configureData[i][1]-1
167	>8810		8a				                .byte >configureData[i][2]-1
168	>8811		e0				                .byte <configureData[i][2]-1
167	>8812		88				                .byte >configureData[i][1]-1
168	>8813		e7				                .byte <configureData[i][1]-1
167	>8814		8a				                .byte >configureData[i][2]-1
168	>8815		65				                .byte <configureData[i][2]-1
167	>8816		8a				                .byte >configureData[i][1]-1
168	>8817		16				                .byte <configureData[i][1]-1
167	>8818		8b				                .byte >configureData[i][2]-1
168	>8819		81				                .byte <configureData[i][2]-1
167	>881a		89				                .byte >configureData[i][1]-1
168	>881b		9e				                .byte <configureData[i][1]-1
167	>881c		8b				                .byte >configureData[i][2]-1
168	>881d		2d				                .byte <configureData[i][2]-1
167	>881e		88				                .byte >configureData[i][1]-1
168	>881f		bc				                .byte <configureData[i][1]-1
167	>8820		8b				                .byte >configureData[i][2]-1
168	>8821		a9				                .byte <configureData[i][2]-1
167	>8822		8a				                .byte >configureData[i][1]-1
168	>8823		43				                .byte <configureData[i][1]-1
167	>8824		8a				                .byte >configureData[i][2]-1
168	>8825		ba				                .byte <configureData[i][2]-1
167	>8826		88				                .byte >configureData[i][1]-1
168	>8827		ca				                .byte <configureData[i][1]-1
167	>8828		8b				                .byte >configureData[i][2]-1
168	>8829		86				                .byte <configureData[i][2]-1
167	>882a		8a				                .byte >configureData[i][1]-1
168	>882b		5e				                .byte <configureData[i][1]-1
167	>882c		8b				                .byte >configureData[i][2]-1
168	>882d		0f				                .byte <configureData[i][2]-1
167	>882e		88				                .byte >configureData[i][1]-1
168	>882f		b4				                .byte <configureData[i][1]-1
167	>8830		8b				                .byte >configureData[i][2]-1
168	>8831		8d				                .byte <configureData[i][2]-1
167	>8832		88				                .byte >configureData[i][1]-1
168	>8833		ae				                .byte <configureData[i][1]-1
167	>8834		8b				                .byte >configureData[i][2]-1
168	>8835		8d				                .byte <configureData[i][2]-1
167	>8836		89				                .byte >configureData[i][1]-1
168	>8837		b3				                .byte <configureData[i][1]-1
167	>8838		8b				                .byte >configureData[i][2]-1
168	>8839		43				                .byte <configureData[i][2]-1
167	>883a		8a				                .byte >configureData[i][1]-1
168	>883b		49				                .byte <configureData[i][1]-1
167	>883c		8a				                .byte >configureData[i][2]-1
168	>883d		ba				                .byte <configureData[i][2]-1
167	>883e		8a				                .byte >configureData[i][1]-1
168	>883f		51				                .byte <configureData[i][1]-1
167	>8840		8b				                .byte >configureData[i][2]-1
168	>8841		07				                .byte <configureData[i][2]-1
167	>8842		8a				                .byte >configureData[i][1]-1
168	>8843		0e				                .byte <configureData[i][1]-1
167	>8844		8a				                .byte >configureData[i][2]-1
168	>8845		9e				                .byte <configureData[i][2]-1
167	>8846		88				                .byte >configureData[i][1]-1
168	>8847		ef				                .byte <configureData[i][1]-1
167	>8848		8b				                .byte >configureData[i][2]-1
168	>8849		24				                .byte <configureData[i][2]-1
167	>884a		8a				                .byte >configureData[i][1]-1
168	>884b		2d				                .byte <configureData[i][1]-1
167	>884c		8a				                .byte >configureData[i][2]-1
168	>884d		e0				                .byte <configureData[i][2]-1
167	>884e		88				                .byte >configureData[i][1]-1
168	>884f		db				                .byte <configureData[i][1]-1
167	>8850		8a				                .byte >configureData[i][2]-1
168	>8851		65				                .byte <configureData[i][2]-1
167	>8852		88				                .byte >configureData[i][1]-1
168	>8853		c2				                .byte <configureData[i][1]-1
167	>8854		8b				                .byte >configureData[i][2]-1
168	>8855		a9				                .byte <configureData[i][2]-1
167	>8856		8a				                .byte >configureData[i][1]-1
168	>8857		3b				                .byte <configureData[i][1]-1
167	>8858		8a				                .byte >configureData[i][2]-1
168	>8859		88				                .byte <configureData[i][2]-1
167	>885a		89				                .byte >configureData[i][1]-1
168	>885b		e3				                .byte <configureData[i][1]-1
167	>885c		8a				                .byte >configureData[i][2]-1
168	>885d		f4				                .byte <configureData[i][2]-1
167	>885e		89				                .byte >configureData[i][1]-1
168	>885f		c6				                .byte <configureData[i][1]-1
167	>8860		8b				                .byte >configureData[i][2]-1
168	>8861		77				                .byte <configureData[i][2]-1
167	>8862		8a				                .byte >configureData[i][1]-1
168	>8863		08				                .byte <configureData[i][1]-1
167	>8864		8a				                .byte >configureData[i][2]-1
168	>8865		9e				                .byte <configureData[i][2]-1
167	>8866		89				                .byte >configureData[i][1]-1
168	>8867		a0				                .byte <configureData[i][1]-1
167	>8868		8b				                .byte >configureData[i][2]-1
168	>8869		33				                .byte <configureData[i][2]-1
167	>886a		8a				                .byte >configureData[i][1]-1
168	>886b		35				                .byte <configureData[i][1]-1
167	>886c		8a				                .byte >configureData[i][2]-1
168	>886d		88				                .byte <configureData[i][2]-1
167	>886e		88				                .byte >configureData[i][1]-1
168	>886f		e1				                .byte <configureData[i][1]-1
167	>8870		8a				                .byte >configureData[i][2]-1
168	>8871		65				                .byte <configureData[i][2]-1
167	>8872		89				                .byte >configureData[i][1]-1
168	>8873		ed				                .byte <configureData[i][1]-1
167	>8874		8a				                .byte >configureData[i][2]-1
168	>8875		f4				                .byte <configureData[i][2]-1
167	>8876		89				                .byte >configureData[i][1]-1
168	>8877		05				                .byte <configureData[i][1]-1
167	>8878		8b				                .byte >configureData[i][2]-1
168	>8879		16				                .byte <configureData[i][2]-1
67:15							                .next

78							;-------------------------------------------------------------------------
79							;
80							; *CONFIGURE [MasRef C.5-2]
81							;
82	.887a						starCONFIGURE:
83	.887a		20 34 89	jsr $8934	                jsr L8934                    ;get configure param
84	.887d		b0 0a		bcs $8889	                bcs callSetRoutine           ;taken if known
85	.887f		a2 28		ldx #$28	                ldx #romServiceCallUnknownCONFIG
86	.8881						L8881:
87	.8881		a4 e6		ldy $e6		                ldy commandLineY
88	.8883		20 72 ee	jsr $ee72	                jsr makeROMServiceCall
89	.8886		d0 24		bne $88ac	                bne badCommandError88AC
90	.8888		60		rts		                rts

92	.8889						callSetRoutine:
94	.8889		aa		tax		                tax
95	.888a		bd 86 87	lda $8786,x	                lda configureRoutines+0-$80,x ;set routine MSB
96	.888d		48		pha		                pha
97	.888e		bd 87 87	lda $8787,x	                lda configureRoutines+1-$80,x ;set routine LSB
98	.8891		48		pha		                pha
104	.8892						L8892:
105	.8892		4c ff f2	jmp $f2ff	                jmp skipSpacesAndCheckForCRInStringInput

107	.8895						starSTATUS:
108	.8895		20 34 89	jsr $8934	                jsr L8934
109	.8898		b0 04		bcs $889e	                bcs L889E
110	.889a		a2 29		ldx #$29	                ldx #romServiceCallUnknownSTATUS
111	.889c		80 e3		bra $8881	                bra L8881

113	.889e						L889E:
115	.889e		aa		tax		                tax
116	.889f		bd 88 87	lda $8788,x	                lda configureRoutines+2-$80,x ;print routine MSB
117	.88a2		48		pha		                pha
118	.88a3		bd 89 87	lda $8789,x	                lda configureRoutines+3-$80,x ;print routine LSB
119	.88a6		48		pha		                pha
126	.88a7		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
127	.88aa		f0 e6		beq $8892	                beq L8892
128	.88ac						badCommandError88AC:
129	.88ac		4c 76 89	jmp $8976	                jmp badCommandError8976

131							;-------------------------------------------------------------------------

134	.88af						setDefaultHardDrive:
135	.88af		d0 fb		bne $88ac	                bne badCommandError88AC
136	.88b1		a9 00		lda #$00	                lda #$00
137	.88b3		80 04		bra $88b9	                bra writeDefaultFloppyDrive

140							;-------------------------------------------------------------------------

143	.88b5						setDefaultFloppyDrive:
144	.88b5		d0 f5		bne $88ac	                bne badCommandError88AC
145	.88b7		a9 80		lda #$80	                lda #CMOSBytes.defaults1.floppyDrive
146	.88b9						writeDefaultFloppyDrive:
147	.88b9		a0 7f		ldy #$7f	                ldy #~(CMOSBytes.defaults1.floppyDrive)&$ff
148	.88bb		80 1b		bra $88d8	                bra writeDefaults1Bits

151							;-------------------------------------------------------------------------

154	.88bd						setDefaultADFSLoadDir:
155	.88bd		d0 ed		bne $88ac	                bne badCommandError88AC
156	.88bf		a9 00		lda #$00	                lda #$00                                   ;NODIR
157	.88c1		80 04		bra $88c7	                bra writeDefaultADFSLoadDir

160							;-------------------------------------------------------------------------

163	.88c3						setDefaultADFSNoLoadDir:
164	.88c3		d0 e7		bne $88ac	                bne badCommandError88AC
165	.88c5		a9 40		lda #$40	                lda #CMOSBytes.defaults1.adfsLoadDirMask
166	.88c7						writeDefaultADFSLoadDir:
167	.88c7		a0 bf		ldy #$bf	                ldy #(~CMOSBytes.defaults1.adfsLoadDirMask)&$ff
168	.88c9		80 0d		bra $88d8	                bra writeDefaults1Bits

171							;-------------------------------------------------------------------------

174	.88cb						setDefaultFDRIVE:
175	.88cb		20 71 89	jsr $8971	                jsr parseNumberFromCommandLine
176	.88ce		20 87 89	jsr $8987	                jsr ensureCommandLineTailEmpty
177	.88d1		8a		txa		                txa
178	.88d2		c9 08		cmp #$08	                cmp #$08                     ;max FDRIVE is 7
179	.88d4		b0 d6		bcs $88ac	                bcs badCommandError88AC
180	.88d6		a0 f8		ldy #$f8	                ldy #(~CMOSBytes.defaults1.fdriveMask)&$ff
181	.88d8						writeDefaults1Bits:
182	.88d8		a2 19		ldx #$19	                ldx #CMOSBytes.defaults1+cmosBytesOffset
183	.88da		80 51		bra $892d	                bra jmpWriteRTCBits892D

186							;-------------------------------------------------------------------------

188	.88dc						setDefaultNoLock:
189	.88dc		d0 ce		bne $88ac	                bne badCommandError88AC
190	.88de		a9 10		lda #$10	                lda #CMOSBytes.defaults1.noLockMask
191	.88e0		80 0a		bra $88ec	                bra setDefaultLock

193							;-------------------------------------------------------------------------

195	.88e2						setDefaultShiftLock:
196	.88e2		d0 c8		bne $88ac	                bne badCommandError88AC
197	.88e4		a9 08		lda #$08	                lda #CMOSBytes.defaults1.shiftLockMask
198	.88e6		80 04		bra $88ec	                bra setDefaultLock

200							;-------------------------------------------------------------------------

202	.88e8						setDefaultsCapsLock:
203	.88e8		d0 c2		bne $88ac	                bne badCommandError88AC
204	.88ea		a9 20		lda #$20	                lda #CMOSBytes.defaults1.capsLockMask
205	.88ec						setDefaultLock:
206	.88ec		a0 c7		ldy #$c7	                ldy #~(CMOSBytes.defaults1.capsLockMask|CMOSBytes.defaults1.noLockMask|CMOSBytes.defaults1.shiftLockMask)&$ff
208	.88ee		80 e8		bra $88d8	                bra writeDefaults1Bits

215							;-------------------------------------------------------------------------

217	.88f0						setDefaultMODE:
218	.88f0		20 71 89	jsr $8971	                jsr parseNumberFromCommandLine
219	.88f3		20 87 89	jsr $8987	                jsr ensureCommandLineTailEmpty
220	.88f6		8a		txa		                txa
221	.88f7		29 7f		and #$7f	                and #$7F
222	.88f9		c9 08		cmp #$08	                cmp #$08                     ;only 0-7 is valid
223	.88fb		b0 14		bcs $8911	                bcs bcsBadCommandError8911
224	.88fd		e8		inx		                inx    ;set N as per X value - bit 6 is never set, so the result is valid for the original value
225	.88fe		10 02		bpl $8902	                bpl +
226	.8900		09 08		ora #$08	                ora #CMOSBytes.defaults0.shadowMask
227	.8902						+
228	.8902		a0 f0		ldy #$f0	                ldy #~(CMOSBytes.defaults0.shadowMask|CMOSBytes.defaults0.modeMask)&$ff
229	.8904		80 25		bra $892b	                bra writeDefaults0Bits

231							;-------------------------------------------------------------------------

233	.8906						setDefaultTVSettings:
234	.8906		f0 28		beq $8930	                beq resetDefaultTVSettings        ;reset to 0,0 if no values supplied
235	.8908		20 71 89	jsr $8971	                jsr parseNumberFromCommandLine
236							                ; valid range is 252-255 or 0-3
237	.890b		e0 fc		cpx #$fc	                cpx #252
238	.890d		b0 04		bcs $8913	                bcs +
239	.890f		e0 04		cpx #$04	                cpx #$04
240	.8911						bcsBadCommandError8911:
241	.8911		b0 63		bcs $8976	                bcs badCommandError8976
242	.8913						+
243	.8913		8a		txa		                txa
244	.8914		0a		asl a		                asl a                   ;make space for interlace flag
245	.8915		85 b1		sta $b1		                sta $B1
246	.8917		a2 00		ldx #$00	                ldx #$00
247	.8919		20 0a f3	jsr $f30a	                jsr LF30A
248	.891c		f0 04		beq $8922	                beq +                  ;taken if only 1 value supplied
249	.891e		20 8f 89	jsr $898f	                jsr parseSingle1BitNumberFromCommandLine ;get interlace flag
250	.8921		aa		tax		                tax                          ;X=interlace flag
251	.8922						+
252	.8922		8a		txa		                txa                          ;
253	.8923		05 b1		ora $b1		                ora $B1                      ;OR in the TV setting
254	.8925		0a		asl a		                asl a
255	.8926		0a		asl a		                asl a
256	.8927		0a		asl a		                asl a
257	.8928		0a		asl a		                asl a                        ; shift into place
258	.8929						writeDefaultTVSettings:
259	.8929		a0 0f		ldy #$0f	                ldy #~(CMOSBytes.defaults0.tvMask<<CMOSBytes.defaults0.tvShift|CMOSBytes.defaults0.interlaceMask)&$ff
260	.892b						writeDefaults0Bits:
261	.892b		a2 18		ldx #$18	                ldx #CMOSBytes.defaults0+cmosBytesOffset
262	.892d						jmpWriteRTCBits892D:
263	.892d		4c d6 89	jmp $89d6	                jmp writeRTCBits

265	.8930						resetDefaultTVSettings:
266	.8930		a9 00		lda #$00	                lda #$00
267	.8932		80 f5		bra $8929	                bra writeDefaultTVSettings

269							;-------------------------------------------------------------------------
270							;-------------------------------------------------------------------------
271							;
272							;
273	.8934						L8934:
274	.8934		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
275	.8937		84 e6		sty $e6		                sty commandLineY
276	.8939		f0 3e		beq $8979	                beq L8979                    ;taken if input ends with CR
277	.893b		a2 00		ldx #$00	                ldx #$00
278	.893d		80 0b		bra $894a	                bra L894A

280	.893f						L893F:
284	.893f		5d 5c 87	eor $875c,x	                eor configureNames,x           ;matches configure setting name?
286	.8942		29 df		and #$df	                and #$DF              ;case-insensitive
287	.8944		d0 16		bne $895c	                bne L895C             ;taken if no match
288	.8946		c8		iny		                iny
289	.8947						L8947:
290	.8947		b0 23		bcs $896c	                bcs L896C
291	.8949		e8		inx		                inx
292	.894a						L894A:
293	.894a		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
294	.894c		20 71 ea	jsr $ea71	                jsr isLetter
295	.894f		90 ee		bcc $893f	                bcc L893F                    ;taken if letter
296	.8951						L8951:
301	.8951		bd 5c 87	lda $875c,x	                lda configureNames,x
302	.8954		30 16		bmi $896c	                bmi L896C           ;taken if info byte - i.e., name matches
304	.8956		b1 f2		lda ($f2),y	                lda ($F2),y
305	.8958		c9 2e		cmp #$2e	                cmp #'.'
306	.895a		f0 04		beq $8960	                beq L8960                    ;accept abbreviations
307	.895c						L895C:
308	.895c		18		clc		                clc
309	.895d		a4 e6		ldy $e6		                ldy commandLineY
310	.895f		88		dey		                dey
311	.8960						L8960:
312	.8960		c8		iny		                iny
317	.8961		ca		dex		                dex
319	.8962						L8962:
320	.8962		e8		inx		                inx
324	.8963		bd 5c 87	lda $875c,x	                lda configureNames,x
326	.8966		f0 06		beq $896e	                beq L896E
327	.8968		10 f8		bpl $8962	                bpl L8962
328	.896a		80 db		bra $8947	                bra L8947

330	.896c						L896C:
336	.896c						L8CE4:
337	.896c		38		sec		                sec
338	.896d		60		rts		                rts

340	.896e						L896E:
341	.896e		b0 fc		bcs $896c	                bcs L896C
342	.8970						rts8970:
343	.8970		60		rts		                rts

345							;-------------------------------------------------------------------------

347	.8971						parseNumberFromCommandLine:
348	.8971		20 e6 85	jsr $85e6	                jsr parseNumberFromString
349	.8974		b0 fa		bcs $8970	                bcs rts8970
350	.8976						badCommandError8976:
351	.8976		4c ed fb	jmp $fbed	                jmp badCommandError

353							;-------------------------------------------------------------------------

355	.8979						L8979:
356	.8979		a2 01		ldx #$01	                ldx #$01
357	.897b		80 d4		bra $8951	                bra L8951

359							;-------------------------------------------------------------------------

361	.897d						parseSingle4BitNumberFromCommandLine:
362	.897d		20 e6 85	jsr $85e6	                jsr parseNumberFromString
363	.8980		90 f4		bcc $8976	                bcc badCommandError8976
364	.8982		8a		txa		                txa
365	.8983		c9 10		cmp #$10	                cmp #$10
366	.8985		b0 ef		bcs $8976	                bcs badCommandError8976
367	.8987						ensureCommandLineTailEmpty:
368	.8987		48		pha		                pha                          ;save value parsed
369	.8988		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
370	.898b						bneBadCommandError898B:
371	.898b		d0 e9		bne $8976	                bne badCommandError8976      ;taken if followed up by anything other than CR
372	.898d		68		pla		                pla                          ;restore value parsed
373	.898e		60		rts		                rts

375							;-------------------------------------------------------------------------

377	.898f						parseSingle1BitNumberFromCommandLine:
378	.898f		20 97 89	jsr $8997	                jsr parseSingleNumberFromCommandLine
379	.8992		c9 02		cmp #$02	                cmp #$02
380	.8994		b0 e0		bcs $8976	                bcs badCommandError8976
381	.8996		60		rts		                rts

383							;-------------------------------------------------------------------------
384							;
385							; Parse single number from command line. Produce Bad Command error if
386							; the number is invalid or if there's more than one number.
387							;
388							; exit:
389							;
390							; A = value
391							;
392							; N/Z set as per A
393							;
394	.8997						parseSingleNumberFromCommandLine:
395	.8997		20 e6 85	jsr $85e6	                jsr parseNumberFromString
396	.899a		90 da		bcc $8976	                bcc badCommandError8976      ;taken if error
397	.899c		8a		txa		                txa                          ;A=value
398	.899d		80 e8		bra $8987	                bra ensureCommandLineTailEmpty

400							;-------------------------------------------------------------------------

402	.899f						setDefaultKeyboardAutoRepeatDelay:
403	.899f		18		clc		                clc
404	>89a0		24				                .byte $24                    ; BIT zp (make SEC mostly
405							                                             ; a NOP, in effect)
406	.89a1						setDefaultKeyboardAutoRepeatRate:
407	.89a1		38		sec		                sec
408	.89a2		08		php		                php                          ;save C
409	.89a3		20 71 89	jsr $8971	                jsr parseNumberFromCommandLine
410	.89a6		20 87 89	jsr $8987	                jsr ensureCommandLineTailEmpty
411	.89a9		28		plp		                plp                          ;restore C
412	.89aa		8a		txa		                txa
413	.89ab		a8		tay		                tay
415	.89ac		a9 1a		lda #$1a	                lda #CMOSBytes.keyboardAutoRepeatDelay+cmosBytesOffset
416	.89ae		69 00		adc #$00	                adc #$00             ;pick appropriate byte based on C
417	.89b0		aa		tax		                tax                  ;X=RTC address
418	.89b1						jmpWriteRTCByte:
419	.89b1		4c e4 98	jmp $98e4	                jmp writeRTCByte

421							;-------------------------------------------------------------------------

423	.89b4						setDefaultPrinterIgnoreChar:
424	.89b4		f0 4d		beq $8a03	                beq writeDefaultUsePrinterIgnoreCharTrue
425	.89b6		20 71 89	jsr $8971	                jsr parseNumberFromCommandLine
426	.89b9		da		phx		                phx
427	.89ba		20 87 89	jsr $8987	                jsr ensureCommandLineTailEmpty
428	.89bd		a9 00		lda #$00	                lda #$00
429	.89bf		20 05 8a	jsr $8a05	                jsr writeDefaultUsePrinterIgnoreChar
430	.89c2		7a		ply		                ply
431	.89c3		a2 1c		ldx #$1c	                ldx #CMOSBytes.printerIgnoreChar+cmosBytesOffset
432	.89c5		80 ea		bra $89b1	                bra jmpWriteRTCByte

434							;-------------------------------------------------------------------------

436	.89c7						setDefaultFX5Settings:
437	.89c7		20 97 89	jsr $8997	                jsr parseSingleNumberFromCommandLine
438	.89ca		c9 05		cmp #$05	                cmp #$05
439	.89cc						bcsBadCommandError:
440	.89cc		b0 a8		bcs $8976	                bcs badCommandError8976
441	.89ce		a0 1f		ldy #$1f	                ldy #~(CMOSBytes.defaults2.fx5SettingMask<<CMOSBytes.defaults2.fx5SettingShift)&$ff
442	.89d0		4a		lsr a		                lsr a
443	.89d1		6a		ror a		                ror a
444	.89d2		6a		ror a		                ror a
445	.89d3		6a		ror a		                ror a
446	.89d4						writeDefaults2Bits:
447	.89d4		a2 1d		ldx #$1d	                ldx #CMOSBytes.defaults2+cmosBytesOffset
448	.89d6						writeRTCBits:
449	.89d6		85 b1		sta $b1		                sta $B1
450	.89d8		84 b2		sty $b2		                sty $B2
451	.89da		20 b7 98	jsr $98b7	                jsr readRTCByte
452	.89dd		25 b2		and $b2		                and $B2
453	.89df		05 b1		ora $b1		                ora $B1
454	.89e1		a8		tay		                tay
455	.89e2		80 cd		bra $89b1	                bra jmpWriteRTCByte

457							;-------------------------------------------------------------------------

460	.89e4						setDefaultTubeOff:
461	.89e4		18		clc		                clc
462	.89e5						bneBadCommandError89E5:
463	.89e5		d0 a4		bne $898b	                bne bneBadCommandError898B
464	.89e7		a0 fe		ldy #$fe	                ldy #~(CMOSBytes.defaults2.tubeOnMask)&$ff
465	.89e9		a9 00		lda #$00	                lda #$00
466	.89eb		2a		rol a		                rol a
467	.89ec		80 e6		bra $89d4	                bra writeDefaults2Bits

473							;-------------------------------------------------------------------------

476	.89ee						setDefaultTubeOn:
477	.89ee		38		sec		                sec
478	.89ef		80 f4		bra $89e5	                bra bneBadCommandError89E5

481							;-------------------------------------------------------------------------

484	.89f1						setDefaultSerialBaudRateIndex:
485	.89f1		20 97 89	jsr $8997	                jsr parseSingleNumberFromCommandLine
486	.89f4		d0 02		bne $89f8	                bne +
487	.89f6		a9 07		lda #$07	                lda #$07
488	.89f8						+
489	.89f8		c9 09		cmp #$09	                cmp #$09
490	.89fa		b0 d0		bcs $89cc	                bcs bcsBadCommandError       ;Bad Command if >=9
491	.89fc		3a		dec a		                dec a
492	.89fd		a0 e3		ldy #$e3	                ldy #~(CMOSBytes.defaults2.serialBaudRateIndexMask<<CMOSBytes.defaults2.serialBaudRateIndexShift)&$ff
493	.89ff		0a		asl a		                asl a
494	.8a00		0a		asl a		                asl a                        ;shift value into place
495	.8a01		80 d1		bra $89d4	                bra writeDefaults2Bits

498							;-------------------------------------------------------------------------

500	.8a03						writeDefaultUsePrinterIgnoreCharTrue:
501	.8a03		a9 02		lda #$02	                lda #CMOSBytes.defaults2.usePrinterIgnoreCharMask
502	.8a05						writeDefaultUsePrinterIgnoreChar:
503	.8a05		a0 fd		ldy #$fd	                ldy #(~CMOSBytes.defaults2.usePrinterIgnoreCharMask)&$ff
504	.8a07		80 cb		bra $89d4	                bra writeDefaults2Bits

506							;-------------------------------------------------------------------------

508	.8a09						setDefaultQuiet:
509	.8a09		d0 da		bne $89e5	                bne bneBadCommandError89E5
510	.8a0b		a9 00		lda #$00	                lda #$00
511	.8a0d		80 04		bra $8a13	                bra writeDefaultLoud

513							;-------------------------------------------------------------------------

515	.8a0f						setDefaultLoud:
516	.8a0f		d0 d4		bne $89e5	                bne bneBadCommandError89E5
517	.8a11		a9 02		lda #$02	                lda #CMOSBytes.defaults3.loudMask
518	.8a13						writeDefaultLoud:
519	.8a13		a0 fd		ldy #$fd	                ldy #~(CMOSBytes.defaults3.loudMask)&$ff
521	.8a15		80 0d		bra $8a24	                bra writeDefaults3Bits

529							;-------------------------------------------------------------------------

532	.8a17						setDefaultSerialDataFormat:
533	.8a17		20 97 89	jsr $8997	                jsr parseSingleNumberFromCommandLine
534	.8a1a		c9 08		cmp #$08	                cmp #$08
535	.8a1c		b0 ae		bcs $89cc	                bcs bcsBadCommandError
536	.8a1e		a0 1f		ldy #$1f	                ldy #~(CMOSBytes.defaults3.serialDataFormatMask<<CMOSBytes.defaults3.serialDataFormatShift)&$ff
537	.8a20		4a		lsr a		                lsr a                        ;%000000ab c
538	.8a21		6a		ror a		                ror a                        ;%c000000a b
539	.8a22		6a		ror a		                ror a                        ;%bc000000 a
540	.8a23		6a		ror a		                ror a                        ;%abc00000 0
541	.8a24						writeDefaults3Bits:
542	.8a24		a2 1e		ldx #$1e	                ldx #CMOSBytes.defaults3+cmosBytesOffset
543	.8a26						jmpWriteRTCBits8A26:
544	.8a26		80 ae		bra $89d6	                bra writeRTCBits

547							;-------------------------------------------------------------------------

549	.8a28						setDefaultAutoBoot:
550	.8a28		d0 bb		bne $89e5	                bne bneBadCommandError89E5
551	.8a2a		a9 10		lda #$10	                lda #CMOSBytes.defaults3.autoBootMask
552	.8a2c		80 04		bra $8a32	                bra writeDefaultAutoBoot

554							;-------------------------------------------------------------------------

556	.8a2e						setDefaultNoAutoBoot:
557	.8a2e		d0 b5		bne $89e5	                bne bneBadCommandError89E5
558	.8a30		a9 00		lda #$00	                lda #$00                     ;no boot
559	.8a32						writeDefaultAutoBoot:
560	.8a32		a0 ef		ldy #$ef	                ldy #(~CMOSBytes.defaults3.autoBootMask)&$ff
561	.8a34		80 ee		bra $8a24	                bra writeDefaults3Bits

563							;-------------------------------------------------------------------------

565	.8a36						setDefaultProtectedScrolling:
566	.8a36		d0 ad		bne $89e5	                bne bneBadCommandError89E5
567	.8a38		a9 00		lda #$00	                lda #$00
568	.8a3a		80 04		bra $8a40	                bra writeDefaultProtectedScrolling

570							;-------------------------------------------------------------------------

572	.8a3c						setDefaultNoProtectedScrolling:
573	.8a3c		d0 a7		bne $89e5	                bne bneBadCommandError89E5
574	.8a3e		a9 08		lda #$08	                lda #CMOSBytes.defaults3.protectedScrollingMask
575	.8a40						writeDefaultProtectedScrolling:
576	.8a40		a0 f7		ldy #$f7	                ldy #~(CMOSBytes.defaults3.protectedScrollingMask)&$ff
577	.8a42		80 e0		bra $8a24	                bra writeDefaults3Bits

579							;-------------------------------------------------------------------------

582	.8a44						setDefaultExtTube:
583	.8a44		d0 86		bne $89cc	                bne bcsBadCommandError
584	.8a46		a9 04		lda #$04	                lda #CMOSBytes.defaults3.extTubeMask
585	.8a48		80 04		bra $8a4e	                bra writeDefaultExtTube

588							;-------------------------------------------------------------------------

591	.8a4a						setDefaultIntTube:
592	.8a4a		d0 80		bne $89cc	                bne bcsBadCommandError
593	.8a4c		a9 00		lda #$00	                lda #$00
594	.8a4e						writeDefaultExtTube:
595	.8a4e		a0 fb		ldy #$fb	                ldy #~(CMOSBytes.defaults3.extTubeMask)&$ff
596	.8a50		80 d2		bra $8a24	                bra writeDefaults3Bits

599							;-------------------------------------------------------------------------

601	.8a52						setDefaultLanguageROM:
602	.8a52		20 7d 89	jsr $897d	                jsr parseSingle4BitNumberFromCommandLine
603	.8a55		0a		asl a		                asl a
604	.8a56		0a		asl a		                asl a
605	.8a57		0a		asl a		                asl a
606	.8a58		0a		asl a		                asl a
607	.8a59		a0 0f		ldy #$0f	                ldy #~(15<<CMOSBytes.defaultROMs.languageShift)&$ff
608	.8a5b						writeDefaultROM:
609	.8a5b		a2 13		ldx #$13	                ldx #CMOSBytes.defaultROMs+cmosBytesOffset
610	.8a5d		80 c7		bra $8a26	                bra jmpWriteRTCBits8A26

612							;-------------------------------------------------------------------------

614	.8a5f						setDefaultFSROM:
615	.8a5f		20 7d 89	jsr $897d	                jsr parseSingle4BitNumberFromCommandLine
616	.8a62		a0 f0		ldy #$f0	                ldy #~(15<<CMOSBytes.defaultROMs.fsShift)&$ff
617	.8a64		80 f5		bra $8a5b	                bra writeDefaultROM

619							;-------------------------------------------------------------------------

621	.8a66						printDefaultCaps:
622	.8a66		20 ad 8e	jsr $8ead	                jsr readDefaults1            ;%fdCNSfff
623	.8a69		0a		asl a		                asl a                        ;%dCNSfff0
624	.8a6a		0a		asl a		                asl a                        ;%CNSfff00
625	.8a6b		30 0d		bmi $8a7a	                bmi printCaps
626	.8a6d		0a		asl a		                asl a                        ;%NSfff000
627	.8a6e		30 14		bmi $8a84	                bmi printNoCaps
628	.8a70		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
629	>8a73		53 68 69 66 74 20 00		                .text "Shift ",0
630	.8a7a						printCaps:
631	.8a7a		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
632	>8a7d		43 61 70 73 0d 00		                .text "Caps",13,0
633	.8a83		60		rts		                rts
634	.8a84						printNoCaps:
635	.8a84		20 b1 8e	jsr $8eb1	                jsr printNo_
636	.8a87		80 f1		bra $8a7a	                bra printCaps

638							;-------------------------------------------------------------------------

640	.8a89						printDefaultProtectedScrolling:
641	.8a89		20 ae 98	jsr $98ae	                jsr readDefaults3
642	.8a8c		89 08		bit #$08	                bit #CMOSBytes.defaults3.protectedScrollingMask
643	.8a8e		f0 03		beq $8a93	                beq +
644	.8a90		20 b1 8e	jsr $8eb1	                jsr printNo_
645	.8a93						+
646	.8a93		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
647	>8a96		53 63 72 6f 6c 6c 0d 00		                .text "Scroll",13,0
648	.8a9e		60		rts		                rts

650							;-------------------------------------------------------------------------

652	.8a9f						printDefaultLoud:
653	.8a9f		20 ae 98	jsr $98ae	                jsr readDefaults3
654	.8aa2		89 02		bit #$02	                bit #CMOSBytes.defaults3.loudMask
655	.8aa4		d0 0b		bne $8ab1	                bne printLoud
656	.8aa6		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
657	>8aa9		51 75 69 65 74 0d 00		                .text "Quiet",13,0
658	.8ab0		60		rts		                rts

660	.8ab1						printLoud:
661	.8ab1		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
662	>8ab4		4c 6f 75 64 0d 00		                .text "Loud",13,0
663	.8aba		60		rts		                rts

665							;-------------------------------------------------------------------------

668	.8abb						printDefaultExtTube:
669	.8abb		20 ae 98	jsr $98ae	                jsr readDefaults3
670	.8abe		89 04		bit #$04	                bit #CMOSBytes.defaults3.extTubeMask
671	.8ac0		d0 08		bne $8aca	                bne printExternalTube
672	.8ac2		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
673	>8ac5		49 6e 00			                .text "In",0
674	.8ac8		80 06		bra $8ad0	                bra printTernalTube

676	.8aca						printExternalTube:
677	.8aca		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
678	>8acd		45 78 00			                .text "Ex",0
679	.8ad0						printTernalTube:
680	.8ad0		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
681	>8ad3		74 65 72 6e 61 6c 20 54		                .text "ternal Tube",13,0
	>8adb		75 62 65 0d 00
682	.8ae0		60		rts		                rts

685							;-------------------------------------------------------------------------

687	.8ae1						printDefaultAutoBoot:
688	.8ae1		20 ae 98	jsr $98ae	                jsr readDefaults3
689	.8ae4		89 10		bit #$10	                bit #CMOSBytes.defaults3.autoBootMask
690	.8ae6		d0 03		bne $8aeb	                bne +
691	.8ae8		20 b1 8e	jsr $8eb1	                jsr printNo_
692	.8aeb						+
693	.8aeb		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
694	>8aee		42 6f 6f 74 0d 00		                .text "Boot",13,0
695	.8af4		60		rts		                rts

697							;-------------------------------------------------------------------------

700	.8af5						printDefaultTubeOn:
701	.8af5		20 aa 98	jsr $98aa	                jsr readDefaults2
702	.8af8		4a		lsr a		                lsr a                        ;C=tubeOn
703	.8af9		b0 03		bcs $8afe	                bcs +
704	.8afb		20 b1 8e	jsr $8eb1	                jsr printNo_
705	.8afe						+
706	.8afe		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
707	>8b01		54 75 62 65 0d 00		                .text "Tube",13,0
708	.8b07		60		rts		                rts

711							;-------------------------------------------------------------------------

713	.8b08						printDefaultLanguageROM:
714	.8b08		20 9c 8e	jsr $8e9c	                jsr readDefaultLanguageROM
715	.8b0b						printROMNumber:
716	.8b0b		20 c4 8b	jsr $8bc4	                jsr printDecimalByte
717	.8b0e		80 1b		bra $8b2b	                bra printNewLine8B2B

719							;-------------------------------------------------------------------------

721	.8b10						printDefaultFSROM:
722	.8b10		20 a4 8e	jsr $8ea4	                jsr readDefaultROMs
723	.8b13		29 0f		and #$0f	                and #$0F
724	.8b15		80 f4		bra $8b0b	                bra printROMNumber

726							;-------------------------------------------------------------------------

728	.8b17						printDefaultTVSettings:
729	.8b17		20 5a 8e	jsr $8e5a	                jsr readDefaultTVSettings
730	.8b1a		20 c3 8b	jsr $8bc3	                jsr printDecimalByteY
731	.8b1d		a9 2c		lda #$2c	                lda #','
732	.8b1f		20 ee ff	jsr $ffee	                jsr OSWRCH
733	.8b22		8a		txa		                txa
734	.8b23		80 03		bra $8b28	                bra printDecimalByteThenNewLine

736							;-------------------------------------------------------------------------

738	.8b25						printDefaultMODE:
739	.8b25		20 76 8e	jsr $8e76	                jsr readDefaultMODE
740	.8b28						printDecimalByteThenNewLine:
741	.8b28		20 c4 8b	jsr $8bc4	                jsr printDecimalByte
742	.8b2b						printNewLine8B2B:
743	.8b2b		4c e7 ff	jmp $ffe7	                jmp OSNEWL

745							;-------------------------------------------------------------------------

747	.8b2e						printDefaultKeyboardAutoRepeatDelay:
748	.8b2e		20 3a 8b	jsr $8b3a	                jsr getDefaultKeyboardAutoRepeatDelay
749	.8b31		98		tya		                tya
750	.8b32		80 f4		bra $8b28	                bra printDecimalByteThenNewLine

752							;-------------------------------------------------------------------------

754	.8b34						printDefaultKeyboardRepeatRate:
755	.8b34		20 3f 8b	jsr $8b3f	                jsr getDefaultKeyboardAutoRepeatRate
756	.8b37		98		tya		                tya
757	.8b38		80 ee		bra $8b28	                bra printDecimalByteThenNewLine

759							;-------------------------------------------------------------------------
760							;
761							; Read default keyboard auto repeat delay from CMOS RAM.
762							;
763							; exit:
764							;
765							; Y = default keyboard auto repeat delay
766							;
767	.8b3a						getDefaultKeyboardAutoRepeatDelay:
768	.8b3a		a2 1a		ldx #$1a	                ldx #CMOSBytes.keyboardAutoRepeatDelay+cmosBytesOffset
769	.8b3c		4c b7 98	jmp $98b7	                jmp readRTCByte

771							;-------------------------------------------------------------------------
772							;
773							; Read default keyboard auto repeat rate from CMOS RAM.
774							;
775							; exit:
776							;
777							; Y = default keyboard auto repeat rate
778							;
779	.8b3f						getDefaultKeyboardAutoRepeatRate:
780	.8b3f		a2 1b		ldx #$1b	                ldx #CMOSBytes.keyboardAutoRepeatRate+cmosBytesOffset
781	.8b41		4c b7 98	jmp $98b7	                jmp readRTCByte

783							;-------------------------------------------------------------------------

785	.8b44						printDefaultPrinterIgnoreChar:
786	.8b44		20 aa 98	jsr $98aa	                jsr readDefaults2
787	.8b47		89 02		bit #$02	                bit #CMOSBytes.defaults2.usePrinterIgnoreCharMask
788	.8b49		f0 0f		beq $8b5a	                beq showDefaultPrinterIgnoreChar
789	.8b4b						printNoIgnore:
790	.8b4b		20 b1 8e	jsr $8eb1	                jsr printNo_
791	.8b4e		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
792	>8b51		49 67 6e 6f 72 65 0d 00		                .text "Ignore",13,0
793	.8b59		60		rts		                rts

795	.8b5a						showDefaultPrinterIgnoreChar:
796	.8b5a		20 a8 8e	jsr $8ea8	                jsr readDefaultPrinterIgnoreChar
797	.8b5d		20 c4 8b	jsr $8bc4	                jsr printDecimalByte
798	.8b60		80 c9		bra $8b2b	                bra printNewLine8B2B

800	.8b62						printDefaultPrinterIgnoreChar2:
801	.8b62		20 aa 98	jsr $98aa	                jsr readDefaults2
802	.8b65		89 02		bit #$02	                bit #CMOSBytes.defaults2.usePrinterIgnoreCharMask
803	.8b67		d0 e2		bne $8b4b	                bne printNoIgnore
804	.8b69		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
805	>8b6c		49 67 6e 6f 72 65 20 20		                .text "Ignore   ",0
	>8b74		20 00
806	.8b76		80 e2		bra $8b5a	                bra showDefaultPrinterIgnoreChar

808							;-------------------------------------------------------------------------

810	.8b78						printDefaultFX5Settings:
811	.8b78		20 8d 8e	jsr $8e8d	                jsr readDefaultFX5Settings
812	.8b7b		80 ab		bra $8b28	                bra printDecimalByteThenNewLine

814							;-------------------------------------------------------------------------

817	.8b7d						printDefaultSerialBaudRateIndex:
818	.8b7d		20 84 8e	jsr $8e84	                jsr readDefaultSerialBaudRateIndex
819	.8b80		80 a6		bra $8b28	                bra printDecimalByteThenNewLine

822							;-------------------------------------------------------------------------

825	.8b82						printDefaultSerialDataFormat:
826	.8b82		20 97 8e	jsr $8e97	                jsr readDefaultSerialDataFormat
827	.8b85		80 a1		bra $8b28	                bra printDecimalByteThenNewLine

830							;-------------------------------------------------------------------------

833	.8b87						printDefaultFDRIVE:
834	.8b87		20 ad 8e	jsr $8ead	                jsr readDefaults1
835	.8b8a		29 07		and #$07	                and #CMOSBytes.defaults1.fdriveMask
836	.8b8c		80 9a		bra $8b28	                bra printDecimalByteThenNewLine

839							;-------------------------------------------------------------------------

842	.8b8e						printDefaultFloppyDrive:
843	.8b8e		20 ad 8e	jsr $8ead	                jsr readDefaults1
844	.8b91		0a		asl a		                asl a                        ;C=1=floppy, C=0=hard
845	.8b92		b0 0a		bcs $8b9e	                bcs +                    ;taken if floppy
846	.8b94		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
847	>8b97		48 61 72 64 0d 00		                .text "Hard",13,0
848	.8b9d		60		rts		                rts

850	.8b9e						+
851	.8b9e		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
852	>8ba1		46 6c 6f 70 70 79 0d 00		                .text "Floppy",13,0
853	.8ba9		60		rts		                rts

856							;-------------------------------------------------------------------------

859	.8baa						printDefaultADFSLoadDir:
860	.8baa		20 ad 8e	jsr $8ead	                jsr readDefaults1
861	.8bad		0a		asl a		                asl a                        ;C=defaultFloppyDrive
862	.8bae		0a		asl a		                asl a                        ;C=defaultADFSLoadDir
863	.8baf		90 03		bcc $8bb4	                bcc +                    ;taken if NODIR - print "Directory"
864	.8bb1		20 b1 8e	jsr $8eb1	                jsr printNo_             ;print "No Directory"
865	.8bb4						+
866	.8bb4		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
867	>8bb7		44 69 72 65 63 74 6f 72		                .text "Directory",13,0
	>8bbf		79 0d 00
868	.8bc2		60		rts		                rts

871							;-------------------------------------------------------------------------
872							;
873							;
874							;
875	.8bc3						printDecimalByteY:
876	.8bc3		98		tya		                tya
877	.8bc4						printDecimalByte:
878	.8bc4		38		sec		                sec                          ;in leading 0s state
879	.8bc5		a0 ff		ldy #$ff	                ldy #$FF                     ;digit = -1
880	.8bc7		08		php		                php                          ;save leading 0s state
881	.8bc8						hundredsLoop:
882	.8bc8		c8		iny		                iny
883	.8bc9		e9 64		sbc #$64	                sbc #100
884	.8bcb		b0 fb		bcs $8bc8	                bcs hundredsLoop
885	.8bcd		69 64		adc #$64	                adc #100                     ;undo the step too far
886	.8bcf		28		plp		                plp                        ;restore leading 0s state
887	.8bd0		20 e4 8b	jsr $8be4	                jsr printDecimalDigit
888	.8bd3		a0 ff		ldy #$ff	                ldy #$FF
889	.8bd5		08		php		                php
890	.8bd6		38		sec		                sec
891	.8bd7						tensLoop:
892	.8bd7		c8		iny		                iny
893	.8bd8		e9 0a		sbc #$0a	                sbc #10
894	.8bda		b0 fb		bcs $8bd7	                bcs tensLoop
895	.8bdc		69 0a		adc #$0a	                adc #10                      ;undo the step too far
896	.8bde		28		plp		                plp                          ;restore leading 0s state
897	.8bdf		20 e4 8b	jsr $8be4	                jsr printDecimalDigit
898	.8be2		18		clc		                clc                      ;definitely not leading 0 now
899	.8be3		a8		tay		                tay
900	.8be4						printDecimalDigit:
901	.8be4		48		pha		                pha
902	.8be5		98		tya		                tya                          ;A=digit index
903	.8be6		d0 02		bne $8bea	                bne +             ;taken if definitely not a leading 0
904	.8be8		b0 04		bcs $8bee	                bcs ++            ;skip the print if a leading 0
905	.8bea						+
906	.8bea		20 73 a8	jsr $a873	                jsr printHexDigit
907	.8bed		18		clc		                clc                          ;clear leading 0 flag
908	.8bee						+
909	.8bee		68		pla		                pla
910	.8bef		60		rts		                rts

912							;-------------------------------------------------------------------------
913							;
914							; Print *CONFIGURE help
915							;
916	.8bf0						printCONFIGUREHelp:
917	.8bf0		20 87 89	jsr $8987	                jsr ensureCommandLineTailEmpty
918	.8bf3		5a		phy		                phy
919	.8bf4		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
920	>8bf7		43 6f 6e 66 69 67 75 72		                .text "Configuration options:",13
	>8bff		61 74 69 6f 6e 20 6f 70 74 69 6f 6e 73 3a 0d
922	>8c0e		42 61 75 64 20 20 20 20		                .text "Baud     <D>",13
	>8c16		20 3c 44 3e 0d
924	>8c1b		42 6f 6f 74 0d			                .text "Boot",13
925	>8c20		43 61 70 73 0d			                .text "Caps",13
927	>8c25		44 61 74 61 20 20 20 20		                .text "Data     <D>",13
	>8c2d		20 3c 44 3e 0d
929	>8c32		44 65 6c 61 79 20 20 20		                .text "Delay    <D>",13
	>8c3a		20 3c 44 3e 0d
931	>8c3f		44 69 72 0d			                .text "Dir",13
933	>8c43		45 78 54 75 62 65 0d		                .text "ExTube",13
935	>8c4a		46 44 72 69 76 65 20 20		                .text "FDrive   <D>",13
	>8c52		20 3c 44 3e 0d
937	>8c57		46 69 6c 65 20 20 20 20		                .text "File     <D>",13
	>8c5f		20 3c 44 3e 0d
939	>8c64		46 6c 6f 70 70 79 0d		                .text "Floppy",13
942	>8c6b		48 61 72 64 0d			                .text "Hard",13
944	>8c70		49 67 6e 6f 72 65 20 20		                .text "Ignore   [<D>]",13
	>8c78		20 5b 3c 44 3e 5d 0d
945	>8c7f		49 6e 54 75 62 65 0d		                .text "InTube",13
946	>8c86		4c 61 6e 67 20 20 20 20		                .text "Lang     <D>",13
	>8c8e		20 3c 44 3e 0d
947	>8c93		4c 6f 75 64 0d			                .text "Loud",13
948	>8c98		4d 6f 64 65 20 20 20 20		                .text "Mode     <D>",13
	>8ca0		20 3c 44 3e 0d
949	>8ca5		4e 6f 42 6f 6f 74 0d		                .text "NoBoot",13
950	>8cac		4e 6f 43 61 70 73 0d		                .text "NoCaps",13
952	>8cb3		4e 6f 44 69 72 0d		                .text "NoDir",13
954	>8cb9		4e 6f 53 63 72 6f 6c 6c		                .text "NoScroll",13
	>8cc1		0d
955	>8cc2		4e 6f 54 75 62 65 0d		                .text "NoTube",13
956	>8cc9		50 72 69 6e 74 20 20 20		                .text "Print    <D>",13
	>8cd1		20 3c 44 3e 0d
957	>8cd6		51 75 69 65 74 0d		                .text "Quiet",13
958	>8cdc		52 65 70 65 61 74 20 20		                .text "Repeat   <D>",13
	>8ce4		20 3c 44 3e 0d
959	>8ce9		53 63 72 6f 6c 6c 0d		                .text "Scroll",13
960	>8cf0		53 68 43 61 70 73 0d		                .text "ShCaps",13
961	>8cf7		54 75 62 65 0d			                .text "Tube",13
962	>8cfc		54 56 20 20 20 20 20 20		                .text "TV       [<D>[,<D>]]",13
	>8d04		20 5b 3c 44 3e 5b 2c 3c 44 3e 5d 5d 0d
963	>8d11		00				                .byte 0
964	.8d12		7a		ply		                ply
965	.8d13		a2 28		ldx #$28	                ldx #romServiceCallUnknownCONFIG
966	.8d15		20 72 ee	jsr $ee72	                jsr makeROMServiceCall
967	.8d18		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
968	>8d1b		57 68 65 72 65 3a 0d		                .text "Where:",13
969	>8d22		44 20 69 73 20 61 20 64		                .text "D is a decimal number, or",13
	>8d2a		65 63 69 6d 61 6c 20 6e 75 6d 62 65 72 2c 20 6f
	>8d3a		72 0d
970	>8d3c		61 20 68 65 78 61 64 65		                .text "a hexadecimal number preceded by &",13
	>8d44		63 69 6d 61 6c 20 6e 75 6d 62 65 72 20 70 72 65
	>8d54		63 65 64 65 64 20 62 79 20 26 0d
971	>8d5f		49 74 65 6d 73 20 77 69		                .text "Items within [ ] are optional",13
	>8d67		74 68 69 6e 20 5b 20 5d 20 61 72 65 20 6f 70 74
	>8d77		69 6f 6e 61 6c 0d
972	>8d7d		00				                .byte $00
973	.8d7e		60		rts		                rts

975							;-------------------------------------------------------------------------
976							;
977							;
978	.8d7f						printSTATUSHelp:
979	.8d7f		20 87 89	jsr $8987	                jsr ensureCommandLineTailEmpty
980	.8d82		5a		phy		                phy

982	.8d83		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
983	>8d86		43 6f 6e 66 69 67 75 72		                .text "Configuration status:",13
	>8d8e		61 74 69 6f 6e 20 73 74 61 74 75 73 3a 0d
985	>8d9c		42 61 75 64 20 20 20 20		                .text "Baud     ",0
	>8da4		20 00
986	.8da6		20 7d 8b	jsr $8b7d	                jsr printDefaultSerialBaudRateIndex

991	.8da9		20 e1 8a	jsr $8ae1	                jsr printDefaultAutoBoot

993	.8dac		20 66 8a	jsr $8a66	                jsr printDefaultCaps

996	.8daf		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
997	>8db2		44 61 74 61 20 20 20 20		                .text "Data     ",0
	>8dba		20 00
998	.8dbc		20 82 8b	jsr $8b82	                jsr printDefaultSerialDataFormat

1001	.8dbf		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
1002	>8dc2		44 65 6c 61 79 20 20 20		                .text "Delay    ",0
	>8dca		20 00
1003	.8dcc		20 2e 8b	jsr $8b2e	                jsr printDefaultKeyboardAutoRepeatDelay

1006	.8dcf		20 aa 8b	jsr $8baa	                jsr printDefaultADFSLoadDir

1010	.8dd2		20 bb 8a	jsr $8abb	                jsr printDefaultExtTube

1014	.8dd5		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
1015	>8dd8		46 44 72 69 76 65 20 20		                .text "FDrive   ",0
	>8de0		20 00
1016	.8de2		20 87 8b	jsr $8b87	                jsr printDefaultFDRIVE

1019	.8de5		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
1020	>8de8		46 69 6c 65 20 20 20 20		                .text "File     ",0
	>8df0		20 00
1021	.8df2		20 10 8b	jsr $8b10	                jsr printDefaultFSROM

1024	.8df5		20 8e 8b	jsr $8b8e	                jsr printDefaultFloppyDrive

1027	.8df8		20 62 8b	jsr $8b62	                jsr printDefaultPrinterIgnoreChar2

1029	.8dfb		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
1030	>8dfe		4c 61 6e 67 20 20 20 20		                .text "Lang     ",0
	>8e06		20 00
1031	.8e08		20 08 8b	jsr $8b08	                jsr printDefaultLanguageROM

1033	.8e0b		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
1034	>8e0e		4d 6f 64 65 20 20 20 20		                .text "Mode     ",0
	>8e16		20 00
1035	.8e18		20 25 8b	jsr $8b25	                jsr printDefaultMODE

1038	.8e1b		20 f5 8a	jsr $8af5	                jsr printDefaultTubeOn

1041	.8e1e		20 9f 8a	jsr $8a9f	                jsr printDefaultLoud

1043	.8e21		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
1044	>8e24		50 72 69 6e 74 20 20 20		                .text "Print    "
	>8e2c		20
1045	>8e2d		00				                .byte 0
1046	.8e2e		20 78 8b	jsr $8b78	                jsr printDefaultFX5Settings

1048	.8e31		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
1049	>8e34		52 65 70 65 61 74 20 20		                .text "Repeat   ",0
	>8e3c		20 00
1050	.8e3e		20 34 8b	jsr $8b34	                jsr printDefaultKeyboardRepeatRate

1052	.8e41		20 89 8a	jsr $8a89	                jsr printDefaultProtectedScrolling

1054	.8e44		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
1055	>8e47		54 56 20 20 20 20 20 20		                .text "TV       ",0
	>8e4f		20 00
1056	.8e51		20 17 8b	jsr $8b17	                jsr printDefaultTVSettings

1058	.8e54		7a		ply		                ply
1059	.8e55		a2 29		ldx #$29	                ldx #romServiceCallUnknownSTATUS
1060	.8e57		4c 72 ee	jmp $ee72	                jmp makeROMServiceCall

:6	;******  Return to file: src/terminal.s65

993							;-------------------------------------------------------------------------

1005							;-------------------------------------------------------------------------

1008							;-------------------------------------------------------------------------
1009							;
1010							; Read default *TV settings.
1011							;
1012							; exit:
1013							;
1014							; X = interlace flag (0=off, 1=on)
1015							;
1016							; Y = *TV offset
1017	.8e5a						readDefaultTVSettings:
1018	.8e5a		a2 18		ldx #$18	                ldx #CMOSBytes.defaults0+cmosBytesOffset
1019	.8e5c		20 b7 98	jsr $98b7	                jsr readRTCByte
1020	.8e5f		5a		phy		                phy
1021	.8e60		29 e0		and #$e0	                and #%11100000
1022	.8e62		0a		asl a		                asl a
1023	.8e63		2a		rol a		                rol a
1024	.8e64		2a		rol a		                rol a
1025	.8e65		2a		rol a		                rol a                        ;move into bottom 3 bits
1026	.8e66		89 04		bit #$04	                bit #$04                     ;sign bit?
1027	.8e68		f0 02		beq $8e6c	                beq +                        ;taken if positive
1028	.8e6a		09 fc		ora #$fc	                ora #%11111100               ;sign extent from bit 2
1029	.8e6c						+
1030	.8e6c		a8		tay		                tay
1031	.8e6d		68		pla		                pla
1032	.8e6e		a2 00		ldx #$00	                ldx #$00                     ;X=0 - interlace off
1033	.8e70		89 10		bit #$10	                bit #CMOSBytes.defaults0.interlaceMask
1034	.8e72		f0 01		beq $8e75	                beq +
1035	.8e74		e8		inx		                inx                          ;X=1 - interlace on
1036	.8e75						+
1037	.8e75		60		rts		                rts

1039							;-------------------------------------------------------------------------
1040							;
1041							; Read configured MODE
1042							; --------------------
1043	.8e76						readDefaultMODE:
1044	.8e76		a2 18		ldx #$18	                ldx #CMOSBytes.defaults0+cmosBytesOffset
1045	.8e78		20 b7 98	jsr $98b7	                jsr readRTCByte
1046	.8e7b		29 0f		and #$0f	                and #CMOSBytes.defaults0.modeMask|CMOSBytes.defaults0.shadowMask
1047	.8e7d		89 08		bit #$08	                bit #CMOSBytes.defaults0.shadowMask
1048	.8e7f		f0 02		beq $8e83	                beq +
1049	.8e81		49 88		eor #$88	                eor #$80|CMOSBytes.defaults0.shadowMask ;reset defaultSHADOWMask bit, set bit 7
1050	.8e83						+
1051	.8e83		60		rts		                rts

1053							;-------------------------------------------------------------------------
1054							;
1055							;
1057	.8e84						readDefaultSerialBaudRateIndex:
1058	.8e84		20 aa 98	jsr $98aa	                jsr readDefaults2
1059	.8e87		29 1c		and #$1c	                and #CMOSBytes.defaults2.serialBaudRateIndexMask<<CMOSBytes.defaults2.serialBaudRateIndexShift
1060	.8e89		4a		lsr a		                lsr a
1061	.8e8a		4a		lsr a		                lsr a
1062	.8e8b		1a		inc a		                inc a
1063	.8e8c		60		rts		                rts

1066							;-------------------------------------------------------------------------

1068	.8e8d						readDefaultFX5Settings:
1069	.8e8d		20 aa 98	jsr $98aa	                jsr readDefaults2
1070	.8e90						getTop3Bits:
1071	.8e90		29 e0		and #$e0	                and #%11100000               ;? %abc00000
1072	.8e92		0a		asl a		                asl a                        ;a %bc000000
1073	.8e93		2a		rol a		                rol a                        ;b %c000000a
1074	.8e94		2a		rol a		                rol a                        ;c %000000ab
1075	.8e95		2a		rol a		                rol a                        ;0 %00000abc
1076	.8e96		60		rts		                rts

1078							;-------------------------------------------------------------------------
1079							;
1080							;
1082	.8e97						readDefaultSerialDataFormat:
1083	.8e97		20 ae 98	jsr $98ae	                jsr readDefaults3
1084	.8e9a		80 f4		bra $8e90	                bra getTop3Bits

1087							;-------------------------------------------------------------------------

1089	.8e9c						readDefaultLanguageROM:
1090	.8e9c		20 a4 8e	jsr $8ea4	                jsr readDefaultROMs
1091	.8e9f		4a		lsr a		                lsr a
1092	.8ea0		4a		lsr a		                lsr a
1093	.8ea1		4a		lsr a		                lsr a
1094	.8ea2		4a		lsr a		                lsr a
1095	.8ea3		60		rts		                rts

1097							;-------------------------------------------------------------------------
1098							;
1099							;
1100	.8ea4						readDefaultROMs:
1101	.8ea4		a2 13		ldx #$13	                ldx #CMOSBytes.defaultROMs+cmosBytesOffset;
1102	.8ea6		80 02		bra $8eaa	                bra jmpReadRTCByte

1104							;-------------------------------------------------------------------------

1106	.8ea8						readDefaultPrinterIgnoreChar:
1107	.8ea8		a2 1c		ldx #$1c	                ldx #CMOSBytes.printerIgnoreChar+cmosBytesOffset
1108	.8eaa						jmpReadRTCByte:
1109	.8eaa		4c b7 98	jmp $98b7	                jmp readRTCByte

1111							;-------------------------------------------------------------------------

1113	.8ead						readDefaults1:
1114	.8ead		a2 19		ldx #$19	                ldx #CMOSBytes.defaults1+cmosBytesOffset
1115	.8eaf		80 f9		bra $8eaa	                bra jmpReadRTCByte

1117							;-------------------------------------------------------------------------

1119	.8eb1						printNo_:
1120	.8eb1		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
1121	>8eb4		4e 6f 20 00			                .text "No ",0
1122	.8eb8		60		rts		                rts

1124							;-------------------------------------------------------------------------

1127							;-------------------------------------------------------------------------
1128							;
1129							; [MasRef G.5-8]
1130							;
1131	.8eb9						starPRINT:
1132	.8eb9		a9 c0		lda #$c0	                lda #$C0
1133	.8ebb		8d c2 df	sta $dfc2	                sta hazel.fsFlags
1134	.8ebe		80 12		bra $8ed2	                bra L8ED2

1136							;-------------------------------------------------------------------------

1138	.8ec0						starLIST:
1139	.8ec0		4e c2 df	lsr $dfc2	                lsr hazel.fsFlags
1140	.8ec3		9c c3 df	stz $dfc3	                stz hazel.lineNumberBCD+0
1141	.8ec6		9c c4 df	stz $dfc4	                stz hazel.lineNumberBCD+1
1142	.8ec9		80 04		bra $8ecf	                bra L8ECF

1144							;-------------------------------------------------------------------------

1146	.8ecb						starTYPE:
1147	.8ecb		38		sec		                sec
1148	.8ecc		6e c2 df	ror $dfc2	                ror hazel.fsFlags
1149	.8ecf						L8ECF:
1150	.8ecf		4e c2 df	lsr $dfc2	                lsr hazel.fsFlags
1151	.8ed2						L8ED2:
1152	.8ed2		9c c5 df	stz $dfc5	                stz hazel.lastCharPrinted
1153	.8ed5		20 45 a5	jsr $a545	                jsr openFileForReading
1154	.8ed8						L8ED8:
1155	.8ed8		24 ff		bit $ff		                bit $FF
1156	.8eda		30 52		bmi $8f2e	                bmi handleESCAPEWithFileOpen
1157	.8edc		20 d7 ff	jsr $ffd7	                jsr OSBGET
1158	.8edf		b0 2e		bcs $8f0f	                bcs closeFile
1159	.8ee1		2c c2 df	bit $dfc2	                bit hazel.fsFlags
1160	.8ee4		70 05		bvs $8eeb	                bvs L8EEB
1161	.8ee6		48		pha		                pha
1162	.8ee7		20 eb 91	jsr $91eb	                jsr printLineNumber
1163	.8eea		68		pla		                pla
1164	.8eeb						L8EEB:
1165	.8eeb		2c c2 df	bit $dfc2	                bit hazel.fsFlags
1166	.8eee		30 14		bmi $8f04	                bmi L8F04
1167	.8ef0		c9 0d		cmp #$0d	                cmp #$0D
1168	.8ef2		f0 20		beq $8f14	                beq L8F14
1169	.8ef4		c9 0a		cmp #$0a	                cmp #$0A
1170	.8ef6		f0 1c		beq $8f14	                beq L8F14
1171	.8ef8		8d c5 df	sta $dfc5	                sta hazel.lastCharPrinted
1172	.8efb		c9 22		cmp #$22	                cmp #'"'
1173	.8efd		f0 05		beq $8f04	                beq L8F04
1174	.8eff		20 06 96	jsr $9606	                jsr printGSREADChar
1175	.8f02		80 03		bra $8f07	                bra L8F07

1177	.8f04						L8F04:
1178	.8f04		20 ee ff	jsr $ffee	                jsr OSWRCH
1179	.8f07						L8F07:
1180	.8f07		20 3a 8f	jsr $8f3a	                jsr bgetAndCheckForESCAPE
1181	.8f0a		90 df		bcc $8eeb	                bcc L8EEB
1182	.8f0c						printNewLineThenCloseFile:
1183	.8f0c		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1184	.8f0f						closeFile:
1185	.8f0f		a9 00		lda #$00	                lda #$00
1186	.8f11		4c ce ff	jmp $ffce	                jmp OSFIND

1188	.8f14						L8F14:
1189	.8f14		cd c5 df	cmp $dfc5	                cmp hazel.lastCharPrinted
1190	.8f17		f0 10		beq $8f29	                beq L8F29
1191	.8f19		48		pha		                pha
1192	.8f1a		ad c5 df	lda $dfc5	                lda hazel.lastCharPrinted
1193	.8f1d		c9 0d		cmp #$0d	                cmp #$0D
1194	.8f1f		f0 13		beq $8f34	                beq L8F34
1195	.8f21		c9 0a		cmp #$0a	                cmp #$0A
1196	.8f23		f0 0f		beq $8f34	                beq L8F34
1197	.8f25		68		pla		                pla
1198	.8f26		8d c5 df	sta $dfc5	                sta hazel.lastCharPrinted
1199	.8f29						L8F29:
1200	.8f29		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1201	.8f2c		80 aa		bra $8ed8	                bra L8ED8

1203							;-------------------------------------------------------------------------
1204							;
1205							; Tidily handle ESCAPE when a file is open during *DUMP or whatever.
1206							; Prints a new line, closes the file, then does an Escape error.
1207							;
1208							; entry:
1209							;
1210							; Y = file handle
1211							;
1212	.8f2e						handleESCAPEWithFileOpen:
1213	.8f2e		20 0c 8f	jsr $8f0c	                jsr printNewLineThenCloseFile
1214	.8f31		4c 91 a8	jmp $a891	                jmp escapeError

1216							;-------------------------------------------------------------------------

1218	.8f34						L8F34:
1219	.8f34		68		pla		                pla
1220	.8f35		9c c5 df	stz $dfc5	                stz hazel.lastCharPrinted
1221	.8f38		80 cd		bra $8f07	                bra L8F07

1223							;-------------------------------------------------------------------------
1224							;
1225							; Does an OSBGET and handles ESCAPE.
1226							;
1227							; entry:
1228							;
1229							; Y = file handle
1230							;
1231							; exit:
1232							;
1233							; A = byte read
1234							; C=1 if EOF
1235							; (as per OSBGET)
1236							;
1237	.8f3a						bgetAndCheckForESCAPE:
1238	.8f3a		20 d7 ff	jsr $ffd7	                jsr OSBGET
1239	.8f3d		24 ff		bit $ff		                bit $FF
1240	.8f3f		30 ed		bmi $8f2e	                bmi handleESCAPEWithFileOpen
1241	.8f41		60		rts		                rts

1243							;-------------------------------------------------------------------------
1244							;
1245							; *DUMP [MasRef G.5-4]
1246							;
1247	.8f42						starDUMP:
1248	.8f42		86 f2		stx $f2		                stx stringInputBufferAddress+0
1249	.8f44		84 f3		sty $f3		                sty stringInputBufferAddress+1
1250	.8f46		a2 00		ldx #$00	                ldx #$00
1251	.8f48		20 bc 92	jsr $92bc	                jsr clearOSFILEParameterBlockDWORD
1252	.8f4b		a2 04		ldx #$04	                ldx #$04
1253	.8f4d		20 bc 92	jsr $92bc	                jsr clearOSFILEParameterBlockDWORD
1254	.8f50		a0 00		ldy #$00	                ldy #$00
1255	.8f52		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
1256	.8f55		20 6d f2	jsr $f26d	                jsr gsinitForFilenameParsing
1257	.8f58						L8F58:
1258	.8f58		20 7f f2	jsr $f27f	                jsr gsreadEntryPoint
1259	.8f5b		90 fb		bcc $8f58	                bcc L8F58
1260	.8f5d		f0 1a		beq $8f79	                beq L8F79
1261	.8f5f		a2 00		ldx #$00	                ldx #$00
1262	.8f61		20 5b 93	jsr $935b	                jsr parseHexAddressFromCommandLine

1264	.8f64		a2 03		ldx #$03	                ldx #$03
1265	.8f66						-
1266	.8f66		bd ed 02	lda $02ed,x	                lda osfileParameterBlock+0,x
1267	.8f69		9d f1 02	sta $02f1,x	                sta osfileParameterBlock+4,x
1268	.8f6c		ca		dex		                dex
1269	.8f6d		10 f7		bpl $8f66	                bpl -

1271	.8f6f		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
1272	.8f72		f0 05		beq $8f79	                beq L8F79
1273	.8f74		a2 04		ldx #$04	                ldx #$04
1274	.8f76		20 5b 93	jsr $935b	                jsr parseHexAddressFromCommandLine
1275	.8f79						L8F79:
1276	.8f79		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
1277	.8f7b		a6 f2		ldx $f2		                ldx stringInputBufferAddress+0
1278	.8f7d		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
1279	.8f80		20 45 a5	jsr $a545	                jsr openFileForReading

1281	.8f83		a9 02		lda #$02	                lda #argsFileGetEXT
1282	.8f85		20 61 94	jsr $9461	                jsr callOSARGSWithBuffer

1284	.8f88		a2 03		ldx #$03	                ldx #$03
1285	.8f8a						L8F8A:
1286	.8f8a		b5 a8		lda $a8,x	                lda osargsBuffer,x
1287	.8f8c		dd ed 02	cmp $02ed,x	                cmp osfileParameterBlock+0,x
1288	.8f8f		90 6a		bcc $8ffb	                bcc L8FFB
1289	.8f91		d0 03		bne $8f96	                bne L8F96
1290	.8f93		ca		dex		                dex
1291	.8f94		10 f4		bpl $8f8a	                bpl L8F8A
1292	.8f96						L8F96:
1293	.8f96		a2 03		ldx #$03	                ldx #$03
1294	.8f98						-
1295	.8f98		bd ed 02	lda $02ed,x	                lda osfileParameterBlock+0,x
1296	.8f9b		95 a8		sta $a8,x	                sta osargsBuffer,x
1297	.8f9d		ca		dex		                dex
1298	.8f9e		10 f8		bpl $8f98	                bpl -
1299	.8fa0		20 5f 94	jsr $945f	                jsr setFilePointerFromOSARGSBuffer
1300	.8fa3						L8FA3:
1301	.8fa3		a2 00		ldx #$00	                ldx #$00
1302	.8fa5		20 d7 ff	jsr $ffd7	                jsr OSBGET
1303	.8fa8		b0 46		bcs $8ff0	                bcs L8FF0
1304	.8faa		20 39 92	jsr $9239	                jsr L9239
1305	.8fad		48		pha		                pha
1306	.8fae		ad f1 02	lda $02f1	                lda osfileParameterBlock+4
1307	.8fb1		29 07		and #$07	                and #$07
1308	.8fb3		f0 15		beq $8fca	                beq L8FCA
1309	.8fb5		5a		phy		                phy
1310	.8fb6		a8		tay		                tay
1311	.8fb7						L8FB7:
1312	.8fb7		5a		phy		                phy
1313	.8fb8		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
1314	>8fbb		20 20 20 00			                .text "   ",0
1315	.8fbf		7a		ply		                ply
1316	.8fc0		a9 20		lda #$20	                lda #$20
1317	.8fc2		9d f5 02	sta $02f5,x	                sta osfileParameterBlock+8,x
1318	.8fc5		e8		inx		                inx
1319	.8fc6		88		dey		                dey
1320	.8fc7		d0 ee		bne $8fb7	                bne L8FB7
1321	.8fc9		7a		ply		                ply
1322	.8fca						L8FCA:
1323	.8fca		68		pla		                pla
1324	.8fcb						L8FCB:
1325	.8fcb		48		pha		                pha
1326	.8fcc		c9 20		cmp #$20	                cmp #32
1327	.8fce		90 04		bcc $8fd4	                bcc nonPrintable
1328	.8fd0		c9 7f		cmp #$7f	                cmp #127
1329	.8fd2		90 02		bcc $8fd6	                bcc L8FD6                    ;taken if printable
1330	.8fd4						nonPrintable:
1331	.8fd4		a9 2e		lda #$2e	                lda #'.'          ;placeholder for non-printable chars
1332	.8fd6						L8FD6:
1333	.8fd6		9d f5 02	sta $02f5,x	                sta osfileParameterBlock+8,x
1334	.8fd9		68		pla		                pla
1335	.8fda		20 65 a8	jsr $a865	                jsr printSpaceThenPrintHexByte
1336	.8fdd		e8		inx		                inx
1337	.8fde		20 48 92	jsr $9248	                jsr L9248
1338	.8fe1		ad f1 02	lda $02f1	                lda osfileParameterBlock+4
1339	.8fe4		29 07		and #$07	                and #$07
1340	.8fe6		f0 0b		beq $8ff3	                beq L8FF3
1341	.8fe8		20 3a 8f	jsr $8f3a	                jsr bgetAndCheckForESCAPE
1342	.8feb		90 de		bcc $8fcb	                bcc L8FCB
1343	.8fed		20 57 92	jsr $9257	                jsr L9257
1344	.8ff0						L8FF0:
1345	.8ff0		4c 0f 8f	jmp $8f0f	                jmp closeFile

1347	.8ff3						L8FF3:
1348	.8ff3		20 57 92	jsr $9257	                jsr L9257
1349	.8ff6		80 ab		bra $8fa3	                bra L8FA3

1351	.8ff8						L8FF8:
1352	.8ff8		4c 4d a5	jmp $a54d	                jmp notFoundError

1354	.8ffb						L8FFB:
1355	.8ffb		20 0f 8f	jsr $8f0f	                jsr closeFile
1356	.8ffe		20 ed aa	jsr $aaed	                jsr doFollowingError
1357	>9001		b7 4f 75 74 73 69 64 65		                .text $b7,"Outside file",0
	>9009		20 66 69 6c 65 00

1359							;-------------------------------------------------------------------------
1360							;
1361							; *BUILD
1362							;
1363	.900f						starBUILD:
1364	.900f		4e c2 df	lsr $dfc2	                lsr hazel.fsFlags            ;clear bit 7 of fsFlags
1365	.9012		80 04		bra $9018	                bra starBUILDOrAPPEND

1367							;-------------------------------------------------------------------------
1368							;
1369							; *APPEND
1370							;
1371	.9014						starAPPEND:
1372	.9014		38		sec		                sec
1373	.9015		6e c2 df	ror $dfc2	                ror hazel.fsFlags            ;set bit 7 of fsFlags
1374	.9018						starBUILDOrAPPEND:
1375							                ; bit 7 of fsFlags indicates *BUILD (clear) or *APPEND
1376							                ; (set).
1377	.9018		9c c3 df	stz $dfc3	                stz hazel.lineNumberBCD+0    ;reset line number
1378	.901b		9c c4 df	stz $dfc4	                stz hazel.lineNumberBCD+1    ;reset line number
1379	.901e		a9 80		lda #$80	                lda #$80                     ;open for output. Assume *BUILD
1380	.9020		2c c2 df	bit $dfc2	                bit hazel.fsFlags            ;test *BUILD/*APPEND
1381	.9023		10 02		bpl $9027	                bpl +                        ;branch taken if *BUILD
1382	.9025		a9 c0		lda #$c0	                lda #$C0                     ;*APPEND, so open for update
1383	.9027						+
1384	.9027		20 ce ff	jsr $ffce	                jsr OSFIND                   ;open the file
1385	.902a		a8		tay		                tay                          ;Y=file handle
1386	.902b		f0 cb		beq $8ff8	                beq L8FF8                    ;branch taken if open failed
1387	.902d		8c ed 02	sty $02ed	                sty osfileParameterBlock+0   ;save file handle
1388	.9030		20 5a 94	jsr $945a	                jsr setPTRToEOF ;move to EOF (effective no-op when *BUILD)
1389	.9033						L9033:
1390	.9033		20 eb 91	jsr $91eb	                jsr printLineNumber
1391	.9036						L9036:
1393	.9036		20 9d 86	jsr $869d	                jsr readCommandLine
1400	.9039		08		php		                php
1401	.903a		90 0f		bcc $904b	                bcc L904B
1402							                ; Handle ESCAPE
1403	.903c		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1404	.903f		a9 0d		lda #$0d	                lda #$0D
1405	.9041		99 00 dc	sta $dc00,y	                sta hazel.commandLine,y      ;terminate current line
1406	.9044						L9044:
1407	.9044		5a		phy		                phy                          ;save line length
1408	.9045		a9 7e		lda #$7e	                lda #$7E
1409	.9047		20 f4 ff	jsr $fff4	                jsr OSBYTE                   ;acknowledge ESCAPE
1410	.904a		7a		ply		                ply                          ;restore line length
1411	.904b						L904B:
1412	.904b		98		tya		                tya                          ;A=line length
1413	.904c		f0 50		beq $909e	                beq L909E                    ;taken if line empty
1414	.904e		20 ab 90	jsr $90ab	                jsr setStringInputBufferToCommandLine
1415	.9051		a0 00		ldy #$00	                ldy #$00
1416	.9053		a2 00		ldx #$00	                ldx #$00
1417	.9055						L9055:
1418	.9055		20 9c f2	jsr $f29c	                jsr LF29C
1419	.9058		9d 00 dc	sta $dc00,x	                sta hazel.commandLine,x
1420	.905b		a9 01		lda #$01	                lda #stringInputOptions.goodString
1421	.905d		24 e4		bit $e4		                bit stringInputOptions
1422	.905f		d0 0b		bne $906c	                bne L906C
1423	.9061		a9 07		lda #$07	                lda #7
1424	.9063		20 ee ff	jsr $ffee	                jsr OSWRCH                   ;beep
1425	.9066		20 f5 91	jsr $91f5	                jsr L91F5
1426	.9069		28		plp		                plp
1427	.906a		80 ca		bra $9036	                bra L9036

1429	.906c						L906C:
1430	.906c		e8		inx		                inx
1431	.906d		90 e6		bcc $9055	                bcc L9055
1432	.906f		28		plp		                plp
1433	.9070		90 01		bcc $9073	                bcc L9073
1434	.9072		ca		dex		                dex
1435	.9073						L9073:
1436	.9073		08		php		                php
1437	.9074		da		phx		                phx
1438	.9075		a2 0b		ldx #$0b	                ldx #size(OSGBPBParameterBlock)-2
1439	.9077						L9077:
1440	.9077		9e ee 02	stz $02ee,x	                stz osfileParameterBlock+1,x
1441	.907a		ca		dex		                dex
1442	.907b		10 fa		bpl $9077	                bpl L9077
1443	.907d		fa		plx		                plx
1444	.907e		8e f2 02	stx $02f2	                stx osfileParameterBlock+OSGBPBParameterBlock.count+0
1446	.9081		a9 dc		lda #$dc	                lda #>hazel.commandLine
1447	.9083		8d ef 02	sta $02ef	                sta osfileParameterBlock+OSGBPBParameterBlock.address+1
1448	.9086		ce f0 02	dec $02f0	                dec osfileParameterBlock+OSGBPBParameterBlock.address+2
1449	.9089		ce f1 02	dec $02f1	                dec osfileParameterBlock+OSGBPBParameterBlock.address+3
1450	.908c		a9 02		lda #$02	                lda #gbpbPutBytesCurrentPTR
1451	.908e		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
1452	.9090		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1453	.9092		20 d1 ff	jsr $ffd1	                jsr OSGBPB
1454	.9095		28		plp		                plp
1455	.9096		90 9b		bcc $9033	                bcc L9033
1456	.9098						L9098:
1457	.9098		ac ed 02	ldy $02ed	                ldy osfileParameterBlock+0
1458	.909b		4c 0f 8f	jmp $8f0f	                jmp closeFile

1460	.909e						L909E:
1461	.909e		28		plp		                plp
1462	.909f		b0 f7		bcs $9098	                bcs L9098
1463	.90a1		a9 0d		lda #$0d	                lda #13
1464	.90a3		ac ed 02	ldy $02ed	                ldy osfileParameterBlock
1465	.90a6		20 d4 ff	jsr $ffd4	                jsr OSBPUT
1466	.90a9		80 88		bra $9033	                bra L9033

1468	.90ab						setStringInputBufferToCommandLine:
1469	.90ab		a9 41		lda #$41	                lda #$41
1470	.90ad		85 e4		sta $e4		                sta $E4
1472	.90af		64 f2		stz $f2		                stz stringInputBufferAddress+0
1473	.90b1		a9 dc		lda #$dc	                lda #>hazel.commandLine
1474	.90b3		85 f3		sta $f3		                sta stringInputBufferAddress+1
1475	.90b5		60		rts		                rts

1477							;-------------------------------------------------------------------------

1487							;-------------------------------------------------------------------------
1488							;
1489							; *MOVE
1490							;
1491	.90b6						starMOVE:
1492	.90b6		ad 34 fe	lda $fe34	                lda ACCCON                    ; Save ACCCON
1493	.90b9		8d dc df	sta $dfdc	                sta hazel.oldACCCON
1494	.90bc		48		pha		                pha                          ; Save ACCCON and command line pointer
1495	.90bd		da		phx		                phx
1496	.90be		5a		phy		                phy
1497	.90bf		a0 80		ldy #$80	                ldy #$80                     ; Top of available shadow memory at &8000
1498	.90c1		a5 d0		lda $d0		                lda STATE                      ; Get VDU status
1499	.90c3		89 10		bit #$10	                bit #$10                     ; Jump if not shadow screen, spare up to &8000
1500	.90c5		f0 07		beq $90ce	                beq L90CE
1501							; Shadow screen selected
1502	.90c7		20 c0 f1	jsr $f1c0	                jsr LF1C0                ; Get screen bottom to XY
1503	.90ca		c0 30		cpy #$30	                cpy #$30                     ; Screen at &3000, no spare memory, jump to use Hazel
1504	.90cc		f0 14		beq $90e2	                beq L90E2

1506							; Non-shadow or small shadow screen selected
1507							; Y=top of available memory in shadow memory
1508	.90ce						L90CE:
1509	.90ce		a9 30		lda #$30	                lda #$30                     ; &3000=start of shadow memory
1510	.90d0		8d d6 df	sta $dfd6	                sta hazel.moveBufferMSB
1511	.90d3		a9 04		lda #$04	                lda #ACCCON.X
1512	.90d5		0c 34 fe	tsb $fe34	                tsb ACCCON
1513	.90d8		8d dd df	sta $dfdd	                sta hazel.hasACCCONChanged      ; set 'ACCCON changed'
1514	.90db		98		tya		                tya                          ; A=length of space in shadow memory
1515	.90dc		38		sec		                sec
1516	.90dd		ed d6 df	sbc $dfd6	                sbc hazel.moveBufferMSB
1517	.90e0		80 07		bra $90e9	                bra L90E9

1519							; No shadow memory available, use Hazel
1520	.90e2						L90E2:
1521	.90e2		a9 dd		lda #$dd	                lda #$DD                     ; Buffer at &DD00
1522	.90e4		8d d6 df	sta $dfd6	                sta hazel.moveBufferMSB
1523	.90e7		a9 02		lda #$02	                lda #$02                     ; Buffer length=&200

1525							; &DFD6=high byte of buffer address
1526							; A=high byte of buffer length
1527	.90e9						L90E9:
1528	.90e9		8d d7 df	sta $dfd7	                sta hazel.moveNumPages      ; Store buffer length
1529	.90ec		7a		ply		                ply                          ; Get command line pointer
1530	.90ed		fa		plx		                plx
1531	.90ee		da		phx		                phx
1532	.90ef		5a		phy		                phy
1533	.90f0		a9 40		lda #$40	                lda #$40                     ; Open source file
1534	.90f2		20 ce ff	jsr $ffce	                jsr OSFIND
1535	.90f5		a8		tay		                tay                          ; Store source handle, jump if not found
1536	.90f6		8c d4 df	sty $dfd4	                sty hazel.moveSrcHandle
1537	.90f9		f0 39		beq $9134	                beq L9134
1538	.90fb		7a		ply		                ply                          ; Get command line back again
1539	.90fc		fa		plx		                plx
1540	.90fd		86 f2		stx $f2		                stx $F2
1541	.90ff		84 f3		sty $f3		                sty $F3
1542	.9101		da		phx		                phx                          ; And save it again
1543	.9102		5a		phy		                phy
1544	.9103		a0 00		ldy #$00	                ldy #$00                     ; Step past first parameter
1545	.9105		20 6d f2	jsr $f26d	                jsr gsinitForFilenameParsing
1546	.9108						L9108:
1547	.9108		20 7f f2	jsr $f27f	                jsr gsreadEntryPoint     ;
1548	.910b		90 fb		bcc $9108	                bcc L9108
1549	.910d		98		tya		                tya                          ; Save address of dest filename
1550	.910e		18		clc		                clc
1551	.910f		65 f2		adc $f2		                adc $F2
1552	.9111		8d d8 df	sta $dfd8	                sta hazel.moveDestName+0
1553	.9114		aa		tax		                tax
1554	.9115		a5 f3		lda $f3		                lda $F3
1555	.9117		69 00		adc #$00	                adc #$00
1556	.9119		8d d9 df	sta $dfd9	                sta hazel.moveDestName+1
1557	.911c		a8		tay		                tay                          ; Temporary filing system flag
1558	.911d		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
1559	.9120		a9 80		lda #$80	                lda #$80                     ; Open destination file
1560	.9122		20 ce ff	jsr $ffce	                jsr OSFIND
1561	.9125		a8		tay		                tay                          ; Store dest handle, jump if opened
1562	.9126		8c d5 df	sty $dfd5	                sty hazel.moveDestHandle
1563	.9129		d0 0c		bne $9137	                bne L9137

1565							; Couldn't open destination
1566	.912b		ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle      ; Get source handle and clear it
1567	.912e		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
1568	.9131		20 ce ff	jsr $ffce	                jsr OSFIND                   ; Close source file
1569	.9134						L9134:
1570	.9134		4c 4d a5	jmp $a54d	                jmp notFoundError                    ; Jump to 'Not found' error

1572							; Source and dest opened
1573							; ----------------------
1574							; Build OSGBPB source file control block at &02ED
1575							; and destination control block at &DFC7
1576	.9137						L9137:
1577	.9137		a2 07		ldx #$07	                ldx #$07
1578	.9139						L9139:
1579	.9139		9e ee 02	stz $02ee,x	                stz @w osfileParameterBlock+OSGBPBParameterBlock.address,x ; Addr=0, Num=0
1580	.913c		9e c8 df	stz $dfc8,x	                stz hazel.moveOSGBPB+1,x
1581	.913f		ca		dex		                dex
1582	.9140		10 f7		bpl $9139	                bpl L9139
1583	.9142		ad d4 df	lda $dfd4	                lda hazel.moveSrcHandle      ; Source handle
1584	.9145		8d ed 02	sta $02ed	                sta osfileParameterBlock+OSGBPBParameterBlock.handle
1585	.9148		ad d6 df	lda $dfd6	                lda hazel.moveBufferMSB      ; Buffer address
1586	.914b		8d ef 02	sta $02ef	                sta osfileParameterBlock+OSGBPBParameterBlock.address+1
1587	.914e		8d c9 df	sta $dfc9	                sta hazel.moveOSGBPB.addr+1
1588	.9151		ad d7 df	lda $dfd7	                lda hazel.moveNumPages
1589	.9154		8d f3 02	sta $02f3	                sta osfileParameterBlock+OSGBPBParameterBlock.count+1
1590	.9157		8d cd df	sta $dfcd	                sta hazel.moveOSGBPB.numBytes+1
1591	.915a		ce f0 02	dec $02f0	                dec osfileParameterBlock+OSGBPBParameterBlock.address+2 ; Source addr=&FFFFxxxx
1592	.915d		ce f1 02	dec $02f1	                dec osfileParameterBlock+OSGBPBParameterBlock.address+3
1593	.9160		ce ca df	dec $dfca	                dec hazel.moveOSGBPB.addr+2
1594	.9163		ce cb df	dec $dfcb	                dec hazel.moveOSGBPB.addr+3

1596							; Should use &FFFExxxx and let filing system select correct memory
1597							; Unfortunately, CFS/RFS and DFS do not recognise &FFFExxxx, so
1598							; *MOVE has to do it itself, causing problems for filing systems
1599							; that /do/ recognise &FFFExxxx where they have to remember to
1600							; *do* *nothing* for &FFFFxxxx instead of select main memory as
1601							; &FFFFxxxx implies.

1603	.9166		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock                     ; XY=>source OSGBPB block
1604	.9168		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1605	.916a		a9 04		lda #$04	                lda #$04                     ; Read data from source
1606	.916c		20 d1 ff	jsr $ffd1	                jsr OSGBPB
1607	.916f		08		php		                php                          ; Jump if not at end of file
1608	.9170		90 11		bcc $9183	                bcc L9183
1609							; End of file, adjust destination buffer length for final part
1610	.9172		a9 00		lda #$00	                lda #$00
1611	.9174		ed f2 02	sbc $02f2	                sbc osfileParameterBlock+OSGBPBParameterBlock.count+0
1612	.9177		8d cc df	sta $dfcc	                sta hazel.moveOSGBPB.numBytes+0
1613	.917a		ad cd df	lda $dfcd	                lda hazel.moveOSGBPB.numBytes+1
1614	.917d		ed f3 02	sbc $02f3	                sbc osfileParameterBlock+OSGBPBParameterBlock.count+1
1615	.9180		8d cd df	sta $dfcd	                sta hazel.moveOSGBPB.numBytes+1
1616	.9183						L9183:
1617	.9183		ad d5 df	lda $dfd5	                lda hazel.moveDestHandle      ; Destination handle
1618	.9186		8d c7 df	sta $dfc7	                sta hazel.moveOSGBPB.handle
1619	.9189		a9 02		lda #$02	                lda #$02                     ; XY=>control block, A=write
1620	.918b		a2 c7		ldx #$c7	                ldx #<hazel.moveOSGBPB
1621	.918d		a0 df		ldy #$df	                ldy #>hazel.moveOSGBPB
1622	.918f		20 d1 ff	jsr $ffd1	                jsr OSGBPB
1623	.9192		28		plp		                plp                          ; Loop until end of file
1624	.9193		90 a2		bcc $9137	                bcc L9137
1625	.9195		a9 00		lda #$00	                lda #$00
1626	.9197		ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle      ; Get and clear source handle
1627	.919a		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
1628	.919d		5a		phy		                phy                          ; Close source file
1629	.919e		20 ce ff	jsr $ffce	                jsr OSFIND
1630	.91a1		a9 00		lda #$00	                lda #$00                     ; Get dest handle
1631	.91a3		ac d5 df	ldy $dfd5	                ldy hazel.moveDestHandle
1632	.91a6		5a		phy		                phy                          ; Clear dest handle and close file
1633	.91a7		9c d5 df	stz $dfd5	                stz hazel.moveDestHandle
1634	.91aa		20 ce ff	jsr $ffce	                jsr OSFIND
1635	.91ad		7a		ply		                ply                          ; Dest not CFS/RFS, jump to...
1636	.91ae		c0 04		cpy #$04	                cpy #$04
1637	.91b0		b0 0b		bcs $91bd	                bcs L91BD
1638	.91b2		7a		ply		                ply                          ; Pop source handle
1639	.91b3						L91B3:
1640	.91b3		7a		ply		                ply                          ; Restore XY
1641	.91b4		fa		plx		                plx
1642	.91b5						L91B5:
1643	.91b5		68		pla		                pla                          ; Clear 'ACCCON changed', restore ACCCON
1644	.91b6		9c dd df	stz $dfdd	                stz hazel.hasACCCONChanged
1645	.91b9		8d 34 fe	sta $fe34	                sta ACCCON
1646	.91bc		60		rts		                rts

1648	.91bd						L91BD:
1649	.91bd		7a		ply		                ply                          ; Source was CFS/RFS, jump to exit
1650	.91be		c0 04		cpy #$04	                cpy #$04
1651	.91c0		90 f1		bcc $91b3	                bcc L91B3
1652	.91c2		7a		ply		                ply                          ; Point to first parameter
1653	.91c3		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
1654	.91c6		fa		plx		                plx
1655	.91c7		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
1656	.91ca		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
1657	.91cc		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1658	.91ce		a9 05		lda #$05	                lda #$05                     ; Read info on source file
1659	.91d0		20 dd ff	jsr $ffdd	                jsr OSFILE
1660	.91d3		ad d8 df	lda $dfd8	                lda hazel.moveDestName+0      ; Get address of dest filename
1661	.91d6		8d ed 02	sta $02ed	                sta osfileParameterBlock+OSFILEParameterBlock.fileName+0
1662	.91d9		ad d9 df	lda $dfd9	                lda hazel.moveDestName+1      ;  and put in control block
1663	.91dc		8d ee 02	sta $02ee	                sta osfileParameterBlock+OSFILEParameterBlock.fileName+1
1664	.91df		a9 f0		lda #$f0	                lda #$F0                     ; Mask out 'public' access bits
1665	.91e1		1c fb 02	trb $02fb	                trb osfileParameterBlock+OSFILEParameterBlock.attributes+0
1666	.91e4		a9 01		lda #$01	                lda #$01                     ; Write info on dest file
1667	.91e6		20 dd ff	jsr $ffdd	                jsr OSFILE
1668	.91e9		80 ca		bra $91b5	                bra L91B5                    ; Jump to restore ACCCON and exit

1670	.91eb						printLineNumber:
1671	.91eb		a2 00		ldx #$00	                ldx #$00
1672	.91ed		38		sec		                sec
1673	.91ee		20 2e 92	jsr $922e	                jsr adcLineNumberBCDX        ;increment line number LSB
1674	.91f1		e8		inx		                inx
1675	.91f2		20 2e 92	jsr $922e	                jsr adcLineNumberBCDX        ;carry into line number MSB
1676	.91f5						L91F5:
1677	.91f5		38		sec		                sec                          ;printing leading 0s
1678	.91f6		ad c4 df	lda $dfc4	                lda hazel.lineNumberBCD+1    ;get line number MSB
1679	.91f9		20 11 92	jsr $9211	                jsr printPossiblyLeading0s
1680	.91fc		ad c3 df	lda $dfc3	                lda hazel.lineNumberBCD+0    ;get line number LSB
1681	.91ff		48		pha		                pha                          ;save line number LSB
1682	.9200		08		php		                php                          ;save C
1686	.9201		4a		lsr a		                lsr a
1687	.9202		4a		lsr a		                lsr a
1688	.9203		4a		lsr a		                lsr a
1689	.9204		4a		lsr a		                lsr a
1691	.9205		28		plp		                plp                          ;restore  C
1692	.9206		20 1c 92	jsr $921c	                jsr printPossiblyLeading0    ;print line number 3rd digit
1693	.9209		68		pla		                pla                          ;restore line number LSB
1694	.920a		18		clc		                clc                ;always print line number 4th digit
1695	.920b		20 1c 92	jsr $921c	                jsr printPossiblyLeading0    ;
1696	.920e		4c 0c 9f	jmp $9f0c	                jmp printSpace                    ;

1698	.9211						printPossiblyLeading0s:
1699	.9211		48		pha		                pha                          ;save value
1700	.9212		08		php		                php                          ;save C
1704	.9213		4a		lsr a		                lsr a
1705	.9214		4a		lsr a		                lsr a
1706	.9215		4a		lsr a		                lsr a
1707	.9216		4a		lsr a		                lsr a
1709	.9217		28		plp		                plp                          ;restore C
1710	.9218		20 1c 92	jsr $921c	                jsr printPossiblyLeading0    ;print 1st digit
1711	.921b		68		pla		                pla                          ;restore value
1712	.921c						printPossiblyLeading0:
1713	.921c		29 0f		and #$0f	                and #$0F                     ;get digit to print
1714	.921e		d0 09		bne $9229	                bne printNonLeading0         ;always print if non-0
1715	.9220		90 07		bcc $9229	                bcc printNonLeading0 ;branch taken if not leading 0
1716	.9222		a9 20		lda #$20	                lda #$20             ;print space instead of leading 0
1717	.9224		20 ee ff	jsr $ffee	                jsr OSWRCH
1718	.9227		38		sec		                sec                ;indicate still in leading 0s state
1719	.9228		60		rts		                rts

1721	.9229						printNonLeading0:
1722	.9229		20 73 a8	jsr $a873	                jsr printHexDigit            ;print digit
1723	.922c		18		clc		                clc                          ;no longer in leading 0s state
1724	.922d		60		rts		                rts                          ;

1726	.922e						adcLineNumberBCDX:
1727	.922e		a9 00		lda #$00	                lda #$00
1728	.9230		f8		sed		                sed
1729	.9231		7d c3 df	adc $dfc3,x	                adc hazel.lineNumberBCD,x
1730	.9234		9d c3 df	sta $dfc3,x	                sta hazel.lineNumberBCD,x
1731	.9237		d8		cld		                cld
1732	.9238						rts9238:
1733	.9238		60		rts		                rts

1735							;-------------------------------------------------------------------------

1737	.9239						L9239:
1738	.9239		da		phx		                phx
1739	.923a		48		pha		                pha
1740	.923b		a2 02		ldx #$02	                ldx #$02
1741	.923d						L923D:
1742	.923d		bd f1 02	lda $02f1,x	                lda osfileParameterBlock+4,x
1743	.9240		20 6a a8	jsr $a86a	                jsr printHexByte
1744	.9243		ca		dex		                dex
1745	.9244		10 f7		bpl $923d	                bpl L923D
1746	.9246		80 0c		bra $9254	                bra L9254

1748							;-------------------------------------------------------------------------

1750	.9248						L9248:
1751	.9248		da		phx		                phx
1752	.9249		48		pha		                pha
1753	.924a		a2 fc		ldx #$fc	                ldx #256-4
1754	.924c						L924C:
1755	.924c		fe f5 01	inc $01f5,x	                inc osfileParameterBlock+4-(256-4),x
1756	.924f		d0 03		bne $9254	                bne L9254
1757	.9251		e8		inx		                inx
1758	.9252		d0 f8		bne $924c	                bne L924C
1759	.9254						L9254:
1760	.9254		68		pla		                pla
1761	.9255		fa		plx		                plx
1762	.9256		60		rts		                rts

1764	.9257						L9257:
1765	.9257		5a		phy		                phy
1766	.9258		da		phx		                phx
1767	.9259						L9259:
1768	.9259		e0 08		cpx #$08	                cpx #$08
1769	.925b		f0 0a		beq $9267	                beq L9267
1770	.925d		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
1771	>9260		20 20 20 00			                .text "   ",0
1772	.9264		e8		inx		                inx
1773	.9265		80 f2		bra $9259	                bra L9259

1775	.9267						L9267:
1776	.9267		fa		plx		                plx
1777	.9268		20 0c 9f	jsr $9f0c	                jsr printSpace
1778	.926b		a0 00		ldy #$00	                ldy #$00
1779	.926d						L926D:
1780	.926d		b9 f5 02	lda $02f5,y	                lda osfileParameterBlock+8,y
1781	.9270		20 ee ff	jsr $ffee	                jsr OSWRCH
1782	.9273		c8		iny		                iny
1783	.9274		ca		dex		                dex
1784	.9275		d0 f6		bne $926d	                bne L926D
1785	.9277		7a		ply		                ply
1786	.9278		4c e7 ff	jmp $ffe7	                jmp OSNEWL

1788							;-------------------------------------------------------------------------

1791	=$9238						osbyte19Done=rts9238
1792							                .include "restore_font.s65"

:16	;******  Processing file: src/restore_font.s65

1							;-------------------------------------------------------------------------
2							;
3							; restore entire font.
4							;
5	.927b						restoreFont32To255:
6	.927b		a2 07		ldx #$07	                ldx #$07                     ;224 chars - 32-255
8							                ; fall through to restoreFont32ToN

10							;-------------------------------------------------------------------------
11							;
12							; Restore part of the font, starting from char 32.
13							;
14							; entry:
15							;
16							; X = number of pages of font data to restore - X*32 chars will be
17							; restored
18							;
19	.927d						restoreFont32ToN:
20	.927d		08		php		                php
21	.927e		78		sei		                sei
22	.927f		a9 b9		lda #$b9	                lda #>LB900                ;start at beginning of font
23	.9281		85 f1		sta $f1		                sta $F1
24	.9283		a9 89		lda #$89	                lda #>andy.softCharacterDefinitions ;write to beginning of soft character definitions
26							                ; fall through to restoreFontPart

28							;-------------------------------------------------------------------------
29							;
30							; Restore part of the font.
31							;
32							; entry:
33							;
34							; ?$f1 = MSB of font data
35							;
36							; A = MSB of dest page in ANDY - should be part of the soft character
37							; definitions!
38							;
39							; X = number of pages of font data to restore - X*32 chars will be
40							; restored
41							;
42							; preserves: Y

44	.9285						restoreFontPart:
45	.9285		85 fb		sta $fb		                sta $FB                      ;save MSB of dest
46	.9287		20 98 e5	jsr $e598	                jsr selectTerminalROMAndANDY2
47							                .cwarn *<$9000,format("Code inside ANDY at: $%04x",*) ; following code can't be inside the ANDY region!
48	.928a		5a		phy		                phy                          ;
49	.928b		a0 00		ldy #$00	                ldy #$00                     ;
50	.928d		64 fa		stz $fa		                stz $FA                      ;initialize LSB of src
51	.928f		64 f0		stz $f0		                stz $F0                      ;initialize LSB of dest
52	.9291						-
53	.9291		b1 f0		lda ($f0),y	                lda ($F0),y
54	.9293		91 fa		sta ($fa),y	                sta ($FA),y
55	.9295		c8		iny		                iny
56	.9296		d0 f9		bne $9291	                bne -
57	.9298		e6 f1		inc $f1		                inc $F1
58	.929a		e6 fb		inc $fb		                inc $FB
59	.929c		ca		dex		                dex
60	.929d		d0 f2		bne $9291	                bne -
61	.929f		7a		ply		                ply
62	.92a0		28		plp		                plp
63	.92a1		4c 90 e5	jmp $e590	                jmp selectTerminalROM

65							;-------------------------------------------------------------------------

70	.92a4						restoreFont32To126:
71	.92a4		a2 03		ldx #$03	                ldx #$03                     ;96 chars - 32-126
72	.92a6		80 d5		bra $927d	                bra restoreFont32ToN

74							;-------------------------------------------------------------------------
75							;
76							; OSBYTE 25 (&19) Restore a group of font definitions
77							;
78							; MasRef D.2-28
79							;
80	.92a8						osbyte19:
81	.92a8		8a		txa		                txa                          ;A=group identifier
82	.92a9		f0 d0		beq $927b	                beq restoreFont32To255   ;taken if group 0 - all chars
86	.92ab		c9 08		cmp #$08	                cmp #$08
88	.92ad		b0 89		bcs $9238	                bcs osbyte19Done
93	.92af		08		php		                php
94	.92b0		78		sei		                sei
95	.92b1		69 b8		adc #$b8	                adc #(>LB900)-1 ;form address of ROM font data for group
96	.92b3		85 f1		sta $f1		                sta $F1
97	.92b5		8a		txa		                txa
98	.92b6		a2 01		ldx #$01	                ldx #$01                   ;copy 1 page, 32 chars
99	.92b8		69 88		adc #$88	                adc #(>andy.softCharacterDefinitions)-1 ;get page in ANDY for group
100	.92ba		80 c9		bra $9285	                bra restoreFontPart

:6	;******  Return to file: src/terminal.s65

1798							;-------------------------------------------------------------------------
1799							;
1800							; Clear 4 bytes in the OSFILE parameter block.
1801							;
1802							; entry:
1803							;
1804							; X = offset of the 4 bytes to clear
1805							;
1806	.92bc						clearOSFILEParameterBlockDWORD:
1807	.92bc		9e ed 02	stz $02ed,x	                stz osfileParameterBlock+0,x
1808	.92bf		9e ee 02	stz $02ee,x	                stz osfileParameterBlock+1,x
1809	.92c2		9e ef 02	stz $02ef,x	                stz osfileParameterBlock+2,x
1810	.92c5		9e f0 02	stz $02f0,x	                stz osfileParameterBlock+3,x
1811	.92c8						rts94A4:
1812	.92c8		60		rts		                rts

1814							;-------------------------------------------------------------------------
1815							;
1816							; Read a 32-bit hex value from a string.
1817							;
1818							; entry:
1819							;
1820							; X = offset into osfileParameterBlock to store the value
1821							;
1822							; exit:
1823							;
1824							; C=0 if error
1825							;
1826							; preserves: V
1827							;
1828	.92c9						parseHexAddressFromString:
1829	.92c9		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput ; Skip spaces
1830	.92cc		20 48 86	jsr $8648	                jsr readHexDigit
1831	.92cf		90 23		bcc $92f4	                bcc rts92F4
1832	.92d1		20 bc 92	jsr $92bc	                jsr clearOSFILEParameterBlockDWORD
1833	.92d4						readDigitsLoop:
1834	.92d4		5a		phy		                phy
1835	.92d5		2a		rol a		                rol a
1836	.92d6		2a		rol a		                rol a
1837	.92d7		2a		rol a		                rol a
1838	.92d8		2a		rol a		                rol a                        ;put digit in top 4 bits
1839	.92d9		a0 04		ldy #$04	                ldy #$04
1840	.92db						shiftIn1DigitLoop:
1841	.92db		2a		rol a		                rol a
1842	.92dc		3e ed 02	rol $02ed,x	                rol osfileParameterBlock+0,x
1843	.92df		3e ee 02	rol $02ee,x	                rol osfileParameterBlock+1,x
1844	.92e2		3e ef 02	rol $02ef,x	                rol osfileParameterBlock+2,x
1845	.92e5		3e f0 02	rol $02f0,x	                rol osfileParameterBlock+3,x
1846	.92e8		b0 61		bcs $934b	                bcs badAddressError ;carry out of bit 31 implies too many digits
1847	.92ea		88		dey		                dey
1848	.92eb		d0 ee		bne $92db	                bne shiftIn1DigitLoop
1849	.92ed		7a		ply		                ply
1850	.92ee		20 48 86	jsr $8648	                jsr readHexDigit
1851	.92f1		b0 e1		bcs $92d4	                bcs readDigitsLoop   ;keep going until hex digits stop
1852	.92f3		38		sec		                sec       ;got at least 1 hex digit, so result is good
1853	.92f4						rts92F4:
1854	.92f4		60		rts		                rts

1856							;-------------------------------------------------------------------------
1857							;
1858							; *GO (<addr>) [MasRef C.5-6]
1859							;
1860	.92f5						starGO:
1861	.92f5		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput ; Skip spaces
1862	.92f8		d0 03		bne $92fd	                bne starGOIO             ; Jump to read parameters
1863	.92fa		4c 61 86	jmp $8661	                jmp commandLineUI        ; No parameters, enter CLICOM

1865							;-------------------------------------------------------------------------
1866							;
1867							; *GOIO <addr> [MasRef C.5-7]
1868							;
1869	.92fd						starGOIO:
1870	.92fd		a2 00		ldx #$00	                ldx #$00
1871	.92ff		20 5b 93	jsr $935b	                jsr parseHexAddressFromCommandLine ; Read hex address
1872	.9302		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput ; Skip spaces
1873	.9305		08		php		                php  ; Update &F2/3 to point to any further parameters
1874	.9306		98		tya		                tya
1875	.9307		18		clc		                clc
1876	.9308		65 f2		adc $f2		                adc stringInputBufferAddress+0
1877	.930a		85 f2		sta $f2		                sta stringInputBufferAddress+0
1878	.930c		90 02		bcc $9310	                bcc +
1879	.930e		e6 f3		inc $f3		                inc stringInputBufferAddress+1
1880	.9310						+
1881	.9310		a0 00		ldy #$00	                ldy #$00    ; (&F2),y=>parameters, EQ if no parameters
1882	.9312		28		plp		                plp
1883	.9313		6c ed 02	jmp ($02ed)	                jmp (osfileParameterBlock+0) ; Jump to address

1885							;-------------------------------------------------------------------------

1887	.9316						starLOAD:
1888	.9316		a9 ff		lda #$ff	                lda #fileLoad
1889	.9318						starCommandThroughOSFILE:
1890	.9318		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
1891	.931b						L931B:
1892	.931b		86 f2		stx $f2		                stx stringInputBufferAddress+0
1893	.931d		84 f3		sty $f3		                sty stringInputBufferAddress+1
1894	.931f		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
1895	.9322		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
1896	.9325		48		pha		                pha                          ;save OSFILE reason
1897	.9326		a2 02		ldx #$02	                ldx #OSFILEParameterBlock.load
1898	.9328		20 bc 92	jsr $92bc	                jsr clearOSFILEParameterBlockDWORD
1899	.932b		a2 0a		ldx #$0a	                ldx #OSFILEParameterBlock.length
1900	.932d		20 bc 92	jsr $92bc	                jsr clearOSFILEParameterBlockDWORD
1901	.9330		a0 ff		ldy #$ff	                ldy #$FF
1902	.9332		8c f3 02	sty $02f3	                sty osfileParameterBlock+OSFILEParameterBlock.exec+0 ;by default, load to file's load address
1903	.9335		c8		iny		                iny                                                  ;Y=0
1904	.9336		20 6d f2	jsr $f26d	                jsr gsinitForFilenameParsing
1905	.9339						L9339:
1906	.9339		20 7f f2	jsr $f27f	                jsr gsreadEntryPoint
1907	.933c		90 fb		bcc $9339	                bcc L9339
1908	.933e		68		pla		                pla                          ;restore OSFILE reason
1909	.933f		48		pha		                pha                          ;save OSFILE reason
1910	.9340		10 50		bpl $9392	                bpl finishStarSAVE                    ;taken if *SAVE
1911	.9342		a2 02		ldx #$02	                ldx #OSFILEParameterBlock.load
1912	.9344		20 c9 92	jsr $92c9	                jsr parseHexAddressFromString ;parse *LOAD address
1913	.9347		b0 18		bcs $9361	                bcs doStarLOADWithExplicitAddress ;taken if good address
1914	.9349		f0 1b		beq $9366	                beq L9366        ;taken if CR encountered (this is ok)
1915	.934b						badAddressError:
1916	.934b		20 ed aa	jsr $aaed	                jsr doFollowingError
1917	>934e		fc 42 61 64 20 61 64 64		                .text $fc,"Bad address",0
	>9356		72 65 73 73 00

1919							;-------------------------------------------------------------------------
1920							;
1921							; Parse hex address from command line.
1922							;
1923	.935b						parseHexAddressFromCommandLine:
1924	.935b		20 c9 92	jsr $92c9	                jsr parseHexAddressFromString ; Read hex address
1925	.935e		90 eb		bcc $934b	                bcc badAddressError           ; Jump with bad address
1926	.9360		60		rts		                rts

1928							;-------------------------------------------------------------------------

1930	.9361						doStarLOADWithExplicitAddress:
1931	.9361		d0 7f		bne $93e2	                bne badCommandError93E2
1932	.9363		ee f3 02	inc $02f3	                inc osfileParameterBlock+OSFILEParameterBlock.exec+0 ;load to parameter block load address
1933	.9366						L9366:
1934	.9366		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
1935	.9369						callOSFILEWithOSFILEParameterBlock:
1936	.9369		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
1937	.936b		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1938	.936d		68		pla		                pla
1939	.936e		4c dd ff	jmp $ffdd	                jmp OSFILE

1941							;-------------------------------------------------------------------------
1942							;
1943							; *REMOVE [MasRef G.5-9]
1944							;
1945	.9371						starREMOVE:
1946	.9371		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
1947	.9374		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
1960	.9377		a9 06		lda #$06	                lda #fileDelete
1961	.9379		48		pha		                pha
1962	.937a		80 ed		bra $9369	                bra callOSFILEWithOSFILEParameterBlock

1964							;-------------------------------------------------------------------------
1966							;
1967							; *CLOSE [MasRef G.5-3]
1968							;
1969	.937c						starCLOSE:
1970	.937c		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
1971	.937f		d0 61		bne $93e2	                bne badCommandError93E2
1972	.9381		a9 00		lda #$00	                lda #$00
1973	.9383		a8		tay		                tay
1974	.9384		6c 1c 02	jmp ($021c)	                jmp (FINDV)                  ;OSFIND A=0 Y=0
1976							;-------------------------------------------------------------------------
1978							;
1979							; *IGNORE [MasRef C.5-7]
1980							;
1981	.9387						starIGNORE:
1982	.9387		d0 05		bne $938e	                bne L938E
1983	.9389		38		sec		                sec
1984	.938a		6e 46 02	ror $0246	                ror noignoreState
1985	.938d		60		rts		                rts

1987	.938e						L938E:
1988	.938e		a9 06		lda #$06	                lda #$06
1989	.9390		80 59		bra $93eb	                bra starCommandThroughOSBYTE
1991							;-------------------------------------------------------------------------

1993	.9392						finishStarSAVE:
1994	.9392		d0 07		bne $939b	                bne L939B
1995	.9394		a2 0a		ldx #$0a	                ldx #OSFILEParameterBlock.saveStart
1996	.9396		20 c9 92	jsr $92c9	                jsr parseHexAddressFromString
1997	.9399		90 47		bcc $93e2	                bcc badCommandError93E2
1998	.939b						L939B:
1999	.939b		b8		clv		                clv
2000	.939c		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
2001	.939e		c9 2b		cmp #$2b	                cmp #'+'
2002	.93a0		d0 04		bne $93a6	                bne L93A6                    ;taken if "*SAVE START END..."
2003	.93a2		2c 4e e3	bit $e34e	                bit valueFF              ;V=1
2004	.93a5		c8		iny		                iny
2005	.93a6						L93A6:
2006	.93a6		a2 0e		ldx #$0e	                ldx #OSFILEParameterBlock.saveEnd
2007	.93a8		20 c9 92	jsr $92c9	                jsr parseHexAddressFromString
2008	.93ab		90 35		bcc $93e2	                bcc badCommandError93E2
2009	.93ad		08		php		                php
2010	.93ae		50 0f		bvc $93bf	                bvc L93BF                    ;taken if "*SAVE START END"

2012							                ; Get the save end address.
2013	.93b0		a2 fc		ldx #$fc	                ldx #256-4
2014	.93b2		18		clc		                clc
2015	.93b3						-
2016							                ; TODO - not sure why the @w notation is required here?
2017	.93b3		bd fb 01	lda $01fb,x	                lda@w osfileParameterBlock+OSFILEParameterBlock.saveStart-(256-4),x
2018	.93b6		7d ff 01	adc $01ff,x	                adc@w osfileParameterBlock+OSFILEParameterBlock.saveEnd-(256-4),x
2019	.93b9		9d ff 01	sta $01ff,x	                sta@w osfileParameterBlock+OSFILEParameterBlock.saveEnd-(256-4),x
2020	.93bc		e8		inx		                inx
2021	.93bd		d0 f4		bne $93b3	                bne -
2022	.93bf						L93BF:

2024							                ; Initialize load and exec addresses to save start
2025							                ; address.
2026	.93bf		a2 03		ldx #$03	                ldx #$03
2027	.93c1						-
2028	.93c1		bd f7 02	lda $02f7,x	                lda@w osfileParameterBlock+OSFILEParameterBlock.saveStart,x
2029	.93c4		9d f3 02	sta $02f3,x	                sta@w osfileParameterBlock+OSFILEParameterBlock.exec,x
2030	.93c7		9d ef 02	sta $02ef,x	                sta@w osfileParameterBlock+OSFILEParameterBlock.load,x
2031	.93ca		ca		dex		                dex
2032	.93cb		10 f4		bpl $93c1	                bpl -

2034	.93cd		28		plp		                plp
2035	.93ce		f0 96		beq $9366	                beq L9366

2037	.93d0		a2 06		ldx #$06	                ldx #OSFILEParameterBlock.exec
2038	.93d2		20 c9 92	jsr $92c9	                jsr parseHexAddressFromString
2039	.93d5		90 0b		bcc $93e2	                bcc badCommandError93E2
2040	.93d7		f0 8d		beq $9366	                beq L9366

2042	.93d9		a2 02		ldx #$02	                ldx #OSFILEParameterBlock.load
2043	.93db		20 c9 92	jsr $92c9	                jsr parseHexAddressFromString
2044	.93de		90 02		bcc $93e2	                bcc badCommandError93E2
2045	.93e0		f0 84		beq $9366	                beq L9366

2047	.93e2						badCommandError93E2:
2048	.93e2		4c ed fb	jmp $fbed	                jmp badCommandError

2050							;-------------------------------------------------------------------------

2052	.93e5						starFX:
2053	.93e5		20 e6 85	jsr $85e6	                jsr parseNumberFromString
2054	.93e8		90 f8		bcc $93e2	                bcc badCommandError93E2
2055	.93ea		8a		txa		                txa
2056	.93eb						starCommandThroughOSBYTE:
2057	.93eb		08		php		                php
2058	.93ec		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
2059	.93ef		28		plp		                plp
2060	.93f0		48		pha		                pha
2061	.93f1		64 e5		stz $e5		                stz $E5
2062	.93f3		64 e4		stz $e4		                stz $E4
2063	.93f5		20 08 f3	jsr $f308	                jsr LF308
2064	.93f8		f0 18		beq $9412	                beq L9412
2065	.93fa		20 e6 85	jsr $85e6	                jsr parseNumberFromString
2066	.93fd		90 e3		bcc $93e2	                bcc badCommandError93E2
2067	.93ff		86 e5		stx $e5		                stx $E5
2068	.9401		20 0a f3	jsr $f30a	                jsr LF30A
2069	.9404		f0 0c		beq $9412	                beq L9412
2070	.9406		20 e6 85	jsr $85e6	                jsr parseNumberFromString
2071	.9409		90 d7		bcc $93e2	                bcc badCommandError93E2
2072	.940b		86 e4		stx $e4		                stx $E4
2073	.940d		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
2074	.9410						L9625:
2075	.9410		d0 d0		bne $93e2	                bne badCommandError93E2
2076	.9412						L9412:
2077	.9412		a4 e4		ldy $e4		                ldy $E4
2078	.9414		a6 e5		ldx $e5		                ldx $E5
2079	.9416		68		pla		                pla
2080	.9417		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
2081	.941a		20 f4 ff	jsr $fff4	                jsr OSBYTE
2082	.941d		70 c3		bvs $93e2	                bvs badCommandError93E2
2083	.941f						rts941F:
2084	.941f		60		rts		                rts

2086							;-------------------------------------------------------------------------

2088	.9420						starSPOOLON:
2089	.9420		38		sec		                sec
2090	.9421		80 10		bra $9433	                bra starSPOOL

2092							;-------------------------------------------------------------------------

2101							;-------------------------------------------------------------------------

2103	.9423						osbyte77:
2104	.9423		a2 10		ldx #$10	                ldx #romServiceCallSpoolExecClosureWarning
2105	.9425		20 72 ee	jsr $ee72	                jsr makeROMServiceCall
2106	.9428		f0 f5		beq $941f	                beq rts941F
2107	.942a		20 8b a5	jsr $a58b	                jsr LA58B
2108	.942d		ad 57 02	lda $0257	                lda spoolFileHandle
2109	.9430		20 6b a5	jsr $a56b	                jsr LA56B
2110	.9433						starSPOOL:
2111	.9433		08		php		                php
2112	.9434		5a		phy		                phy
2113	.9435		ac 57 02	ldy $0257	                ldy spoolFileHandle
2114	.9438		8d 57 02	sta $0257	                sta spoolFileHandle
2115	.943b		f0 03		beq $9440	                beq L9440
2116	.943d		20 ce ff	jsr $ffce	                jsr OSFIND
2117	.9440						L9440:
2118	.9440		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
2119	.9443		7a		ply		                ply
2120	.9444		28		plp		                plp
2121	.9445		f0 d8		beq $941f	                beq rts941F
2122	.9447		a9 80		lda #$80	                lda #$80
2123	.9449		90 02		bcc $944d	                bcc L944D
2124	.944b		a9 c0		lda #$c0	                lda #$C0
2125	.944d						L944D:
2126	.944d		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
2127	.9450		20 ce ff	jsr $ffce	                jsr OSFIND
2128	.9453		a8		tay		                tay
2129	.9454		f0 8c		beq $93e2	                beq badCommandError93E2
2130	.9456		8d 57 02	sta $0257	                sta spoolFileHandle
2131	.9459		a8		tay		                tay
2132	.945a						setPTRToEOF:
2133	.945a		a9 02		lda #$02	                lda #argsFileGetEXT
2134	.945c		20 61 94	jsr $9461	                jsr callOSARGSWithBuffer
2135	.945f						setFilePointerFromOSARGSBuffer:
2136	.945f		a9 01		lda #$01	                lda #argsFileSetPTR
2137	.9461						callOSARGSWithBuffer:
2138	.9461		a2 a8		ldx #$a8	                ldx #osargsBuffer
2139	.9463		4c da ff	jmp $ffda	                jmp OSARGS

2141							;-------------------------------------------------------------------------

2144	.9466						starSHADOW:
2145	.9466		a9 72		lda #$72	                lda #$72
2146	.9468		80 81		bra $93eb	                bra starCommandThroughOSBYTE

2149							;-------------------------------------------------------------------------

2160							;-------------------------------------------------------------------------

2174							;-------------------------------------------------------------------------
2175							;
2176	.946a						starDELETE:
2177	.946a		20 71 93	jsr $9371	                jsr starREMOVE
2178	.946d		a8		tay		                tay
2179	.946e		d0 af		bne $941f	                bne rts941F
2180	.9470		4c 4d a5	jmp $a54d	                jmp notFoundError

2182							;-------------------------------------------------------------------------

2197							;-------------------------------------------------------------------------

2216							;-------------------------------------------------------------------------

2247							;-------------------------------------------------------------------------

2250	.9473						parseSoftKeyNumberFromCommandLine:
2251	.9473		20 e6 85	jsr $85e6	                jsr parseNumberFromString
2252	.9476		90 04		bcc $947c	                bcc badKeyError
2253	.9478		e0 10		cpx #$10	                cpx #softKeyCount
2255	.947a		90 a3		bcc $941f	                bcc rts941F
2259	.947c						badKeyError:
2260	.947c		20 ed aa	jsr $aaed	                jsr doFollowingError
2261	>947f		fb				                .byte $FB
2262	>9480		42 61 64 20 6b 65 79		                .text "Bad key"
2263	>9487		00				                .byte 0

2266							;-------------------------------------------------------------------------
2267							;
2268							; [MasRef C.5-11]
2269							;

2272	.9488						starSHOW:
2273	.9488		20 73 94	jsr $9473	                jsr parseSoftKeyNumberFromCommandLine
2274	.948b		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
2275	.948e		d0 ec		bne $947c	                bne badKeyError
2279	.9490		a9 22		lda #$22	                lda #'"'
2280	.9492		20 ee ff	jsr $ffee	                jsr OSWRCH
2281	.9495		a5 f4		lda $f4		                lda $F4
2282	.9497		48		pha		                pha
2283	.9498		20 98 e5	jsr $e598	                jsr selectTerminalROMAndANDY2
2284							                .cwarn *<$9000,format("Code inside ANDY at: $%04x",*)
2285	.949b		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2286	.949e		85 f2		sta $f2		                sta stringInputBufferAddress+0
2287	.94a0		bd 11 80	lda $8011,x	                lda andy.softKeys.stringMSBs,x
2288	.94a3		85 f3		sta $f3		                sta stringInputBufferAddress+1
2290	.94a5		a4 e6		ldy $e6		                ldy $E6
2295	.94a7		20 55 eb	jsr $eb55	                jsr getSoftKeyStringLength
2296	.94aa		a8		tay		                tay                          ;Y = string length
2297	.94ab		f0 0e		beq $94bb	                beq starSHOWDone                    ;done if length=0
2298	.94ad						-
2299	.94ad		b2 f2		lda ($f2)	                lda (stringInputBufferAddress)
2300	.94af		20 06 96	jsr $9606	                jsr printGSREADChar
2301	.94b2		e6 f2		inc $f2		                inc stringInputBufferAddress+0
2302	.94b4		d0 02		bne $94b8	                bne +
2303	.94b6		e6 f3		inc $f3		                inc stringInputBufferAddress+1
2304	.94b8						+
2305	.94b8		88		dey		                dey
2306	.94b9		d0 f2		bne $94ad	                bne -
2307	.94bb						starSHOWDone:
2308	.94bb		68		pla		                pla
2309	.94bc		20 92 e5	jsr $e592	                jsr selectROMA
2310	.94bf		a9 22		lda #$22	                lda #'"'
2311	.94c1		20 ee ff	jsr $ffee	                jsr OSWRCH
2312	.94c4		4c e7 ff	jmp $ffe7	                jmp OSNEWL

2314							;-------------------------------------------------------------------------

2329							;-------------------------------------------------------------------------
2330							;
2331							; [MasRef C.5-8]
2332							;
2333	.94c7						starKEY: .proc
2334	.94c7		20 73 94	jsr $9473	                jsr parseSoftKeyNumberFromCommandLine
2335	.94ca		a5 f4		lda $f4		                lda $F4
2336	.94cc		48		pha		                pha
2337	.94cd		20 7f e5	jsr $e57f	                jsr selectTerminalROMAndANDY
2338	.94d0		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
2339	.94d3		64 b0		stz $b0		                stz starKEYWorkspace.newStringLength
2340	.94d5		f0 15		beq $94ec	                beq commandLineTailEmpty
2341	.94d7		a2 00		ldx #$00	                ldx #$00
2342	.94d9		38		sec		                sec
2343	.94da		20 6e f2	jsr $f26e	                jsr gsinitEntryPoint
2344	.94dd						-
2345	.94dd		20 7f f2	jsr $f27f	                jsr gsreadEntryPoint
2346	.94e0		b0 06		bcs $94e8	                bcs bneBadKeyError
2347	.94e2		9d 00 dc	sta $dc00,x	                sta hazel.commandLine,x
2348	.94e5		e8		inx		                inx
2349	.94e6		80 f5		bra $94dd	                bra -

2351	.94e8						bneBadKeyError:
2355	.94e8		d0 92		bne $947c	                bne badKeyError
2357	.94ea		86 b0		stx $b0		                stx starKEYWorkspace.newStringLength
2358	.94ec						commandLineTailEmpty:
2359	.94ec		a4 e6		ldy $e6		                ldy $E6                        ;Y = soft key number
2360	.94ee		20 55 eb	jsr $eb55	                jsr getSoftKeyStringLength
2361	.94f1		85 b5		sta $b5		                sta starKEYWorkspace.counter+0
2362	.94f3		38		sec		                sec
2363	.94f4		e5 b0		sbc $b0		                sbc starKEYWorkspace.newStringLength ;A=existing len-new len
2364	.94f6		b0 16		bcs $950e	                bcs newStringWillFit            ;taken if new string shorter, meaning it'll definitely fit

2366	.94f8		49 ff		eor #$ff	                eor #$FF
2367	.94fa		69 01		adc #$01	                adc #$01                     ;A=new len-existing len
2368	.94fc		6d 10 80	adc $8010	                adc andy.softKeys.endLSB
2369	.94ff		aa		tax		                tax
2370	.9500		ad 21 80	lda $8021	                lda andy.softKeys.endMSB
2371	.9503		69 00		adc #$00	                adc #$00
2372	.9505		c9 84		cmp #$84	                cmp #>(andy.softKeys.end)
2373	.9507		90 05		bcc $950e	                bcc newStringWillFit

2375							                ; Produce slightly cryptic "Bad key" if string won't
2376							                ; fit.
2377	.9509		d0 dd		bne $94e8	                bne bneBadKeyError
2378	.950b		8a		txa		                txa
2379	.950c		d0 da		bne $94e8	                bne bneBadKeyError
2380	.950e						newStringWillFit:
2381	.950e		ad 68 02	lda $0268	                lda softKeyStringLength
2382	.9511		f0 32		beq $9545	                beq storeNewString          ;taken if new string empty
2383	.9513		ad c9 02	lda $02c9	                lda currentSoftKey
2384	.9516		c5 e6		cmp $e6		                cmp $E6
2385	.9518		90 2b		bcc $9545	                bcc storeNewString ;taken if current soft key<key - expansion will not need to relocate
2386	.951a		d0 0f		bne $952b	                bne relocateCurrentSoftKeyExpansion ;taken if current soft key>key - expansion must relocate
2387	.951c		20 ed aa	jsr $aaed	                jsr doFollowingError
2388	>951f		fa 4b 65 79 20 69 6e 20		                .text $fa,"Key in use",0
	>9527		75 73 65 00
2389	.952b						relocateCurrentSoftKeyExpansion:
2390	.952b		64 b2		stz $b2		                stz starKEYWorkspace.destPtr+1
2391	.952d		38		sec		                sec
2392	.952e		a5 b0		lda $b0		                lda starKEYWorkspace.newStringLength
2393	.9530		e5 b5		sbc $b5		                sbc starKEYWorkspace.counter+0
2394	.9532		85 b1		sta $b1		                sta starKEYWorkspace.destPtr+0
2395	.9534		b0 02		bcs $9538	                bcs +
2396	.9536		c6 b2		dec $b2		                dec starKEYWorkspace.destPtr+1
2397	.9538						+
2398	.9538		18		clc		                clc
2399	.9539		a5 f8		lda $f8		                lda softKeyExpansionPtr+0
2400	.953b		65 b1		adc $b1		                adc starKEYWorkspace.destPtr+0
2401	.953d		85 f8		sta $f8		                sta softKeyExpansionPtr+0
2402	.953f		a5 f9		lda $f9		                lda softKeyExpansionPtr+1
2403	.9541		65 b2		adc $b2		                adc starKEYWorkspace.destPtr+1
2404	.9543		85 f9		sta $f9		                sta softKeyExpansionPtr+1
2405	.9545						storeNewString:
2406	.9545		ce 84 02	dec $0284	                dec softKeyConsistencyFlag   ;mark soft keys inconsistent
2407	.9548		a6 e6		ldx $e6		                ldx $E6                      ;X=key number
2408	.954a		a5 b5		lda $b5		                lda starKEYWorkspace.counter+0
2409	.954c		f0 45		beq $9593	                beq makeSpaceForNewString ;taken if no existing string for this soft key

2411							                ; delete existing string
2412	.954e		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2413	.9551		85 b1		sta $b1		                sta starKEYWorkspace.destPtr+0
2414	.9553		bd 11 80	lda $8011,x	                lda andy.softKeys.stringMSBs,x
2415	.9556		85 b2		sta $b2		                sta starKEYWorkspace.destPtr+1
2416	.9558		bd 01 80	lda $8001,x	                lda andy.softKeys.stringLSBs+1,x
2417	.955b		85 b3		sta $b3		                sta starKEYWorkspace.srcPtr+0
2418	.955d		bd 12 80	lda $8012,x	                lda andy.softKeys.stringMSBs+1,x
2419	.9560		85 b4		sta $b4		                sta starKEYWorkspace.srcPtr+1
2420	.9562						deleteExistingStringLoop:
2421							                ; copy byte (with postincrement)
2422	.9562		b2 b3		lda ($b3)	                lda (starKEYWorkspace.srcPtr)
2423	.9564		92 b1		sta ($b1)	                sta (starKEYWorkspace.destPtr)

2425							                ; increment destPtr
2426	.9566		e6 b1		inc $b1		                inc starKEYWorkspace.destPtr+0
2427	.9568		d0 02		bne $956c	                bne +
2428	.956a		e6 b2		inc $b2		                inc starKEYWorkspace.destPtr+1
2429	.956c						+

2431							                ; increment srcPtr
2432	.956c		e6 b3		inc $b3		                inc starKEYWorkspace.srcPtr+0
2433	.956e		d0 02		bne $9572	                bne +
2434	.9570		e6 b4		inc $b4		                inc starKEYWorkspace.srcPtr+1
2435	.9572						+

2437							                ; keep copying until end of buffer reached.
2438	.9572		a5 b3		lda $b3		                lda starKEYWorkspace.srcPtr+0
2439	.9574		cd 10 80	cmp $8010	                cmp andy.softKeys.endLSB
2440	.9577		a5 b4		lda $b4		                lda starKEYWorkspace.srcPtr+1
2441	.9579		ed 21 80	sbc $8021	                sbc andy.softKeys.endMSB
2442	.957c		90 e4		bcc $9562	                bcc deleteExistingStringLoop

2444							                ; update following strings' start addresses, which all
2445							                ; move down by the old string's length.
2446	.957e						updateAddressesLoop:
2447	.957e		e8		inx		                inx
2448	.957f		e0 11		cpx #$11	                cpx #softKeyCount+1
2449	.9581		b0 10		bcs $9593	                bcs makeSpaceForNewString
2450	.9583		38		sec		                sec
2451	.9584		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2452	.9587		e5 b5		sbc $b5		                sbc starKEYWorkspace.counter+0
2453	.9589		9d 00 80	sta $8000,x	                sta andy.softKeys.stringLSBs,x
2454	.958c		b0 f0		bcs $957e	                bcs updateAddressesLoop
2455	.958e		de 11 80	dec $8011,x	                dec andy.softKeys.stringMSBs,x
2456	.9591		80 eb		bra $957e	                bra updateAddressesLoop

2458	.9593						makeSpaceForNewString:
2459	.9593		a6 e6		ldx $e6		                ldx $E6
2460	.9595		a5 b0		lda $b0		                lda starKEYWorkspace.newStringLength
2461	.9597		f0 66		beq $95ff	                beq done
2462	.9599		ad 10 80	lda $8010	                lda andy.softKeys.endLSB
2463	.959c		85 b3		sta $b3		                sta starKEYWorkspace.srcPtr+0
2464	.959e		18		clc		                clc
2465	.959f		65 b0		adc $b0		                adc starKEYWorkspace.newStringLength
2466	.95a1		85 b1		sta $b1		                sta starKEYWorkspace.destPtr+0 ;new end ptr LSB
2467	.95a3		ad 21 80	lda $8021	                lda andy.softKeys.endMSB
2468	.95a6		85 b4		sta $b4		                sta starKEYWorkspace.srcPtr+1
2469	.95a8		69 00		adc #$00	                adc #$00
2470	.95aa		85 b2		sta $b2		                sta starKEYWorkspace.destPtr+1 ;new end ptr MSB
2471	.95ac		a5 b3		lda $b3		                lda starKEYWorkspace.srcPtr+0
2472	.95ae		38		sec		                sec
2473	.95af		fd 00 80	sbc $8000,x	                sbc andy.softKeys.stringLSBs,x
2474	.95b2		85 b5		sta $b5		                sta starKEYWorkspace.counter+0
2475	.95b4		a5 b4		lda $b4		                lda starKEYWorkspace.srcPtr+1
2476	.95b6		fd 11 80	sbc $8011,x	                sbc andy.softKeys.stringMSBs,x
2477	.95b9		85 b6		sta $b6		                sta starKEYWorkspace.counter+1
2478	.95bb						makeSpaceForNewStringLoop:
2479							                ; loop while counter>0
2480	.95bb		a5 b5		lda $b5		                lda starKEYWorkspace.counter+0
2481	.95bd		05 b6		ora $b6		                ora starKEYWorkspace.counter+1
2482	.95bf		f0 1e		beq $95df	                beq updateAddressesLoop2

2484							                ; decrement destPtr
2485	.95c1		a5 b1		lda $b1		                lda starKEYWorkspace.destPtr+0
2486	.95c3		d0 02		bne $95c7	                bne +
2487	.95c5		c6 b2		dec $b2		                dec starKEYWorkspace.destPtr+1
2488	.95c7						+
2489	.95c7		c6 b1		dec $b1		                dec starKEYWorkspace.destPtr+0

2491							                ; decrement srcPtr
2492	.95c9		a5 b3		lda $b3		                lda starKEYWorkspace.srcPtr+0
2493	.95cb		d0 02		bne $95cf	                bne +
2494	.95cd		c6 b4		dec $b4		                dec starKEYWorkspace.srcPtr+1
2495	.95cf						+
2496	.95cf		c6 b3		dec $b3		                dec starKEYWorkspace.srcPtr+0

2498							                ; copy byte (with predecrement)
2499	.95d1		b2 b3		lda ($b3)	                lda (starKEYWorkspace.srcPtr)
2500	.95d3		92 b1		sta ($b1)	                sta (starKEYWorkspace.destPtr)

2502							                ; decrement counter
2503	.95d5		a5 b5		lda $b5		                lda starKEYWorkspace.counter+0
2504	.95d7		d0 02		bne $95db	                bne +
2505	.95d9		c6 b6		dec $b6		                dec starKEYWorkspace.counter+1
2506	.95db						+
2507	.95db		c6 b5		dec $b5		                dec starKEYWorkspace.counter+0

2509	.95dd		80 dc		bra $95bb	                bra makeSpaceForNewStringLoop

2511							                ; update following strings' start addresses, which all
2512							                ; move up by the new string's length.
2513	.95df						updateAddressesLoop2:
2514	.95df		e8		inx		                inx
2515	.95e0		e0 11		cpx #$11	                cpx #softKeyCount+1
2516	.95e2		b0 0f		bcs $95f3	                bcs copyNewString
2517	.95e4		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2518	.95e7		65 b0		adc $b0		                adc starKEYWorkspace.newStringLength
2519	.95e9		9d 00 80	sta $8000,x	                sta andy.softKeys.stringLSBs,x
2520	.95ec		90 f1		bcc $95df	                bcc updateAddressesLoop2
2521	.95ee		fe 11 80	inc $8011,x	                inc andy.softKeys.stringMSBs,x
2522	.95f1		80 ec		bra $95df	                bra updateAddressesLoop2

2524	.95f3						copyNewString:
2525	.95f3		a0 00		ldy #$00	                ldy #$00
2526	.95f5						copyNewStringLoop:
2527	.95f5		b9 00 dc	lda $dc00,y	                lda hazel.commandLine,y
2528	.95f8		91 b3		sta ($b3),y	                sta (starKEYWorkspace.srcPtr),y
2529	.95fa		c8		iny		                iny
2530	.95fb		c6 b0		dec $b0		                dec starKEYWorkspace.newStringLength
2531	.95fd		d0 f6		bne $95f5	                bne copyNewStringLoop
2532	.95ff						done:
2533	.95ff		ee 84 02	inc $0284	                inc softKeyConsistencyFlag   ;mark soft keys consistent
2534	.9602		68		pla		                pla
2535	.9603		4c 92 e5	jmp $e592	                jmp selectROMA
2536							                .endproc

2538							;-------------------------------------------------------------------------
2539							;
2540							; Print char, printing control codes using the string reader escape
2541							; syntax. [MasRef C.5-8]
2542							;
2543	.9606						printGSREADChar: .proc
2544	.9606		aa		tax		                tax                          ;X=char
2545	.9607		30 28		bmi $9631	                bmi printHighBitChar
2546	.9609		c9 20		cmp #$20	                cmp #$20
2547	.960b		90 1f		bcc $962c	                bcc printControlChar
2548	.960d		e8		inx		                inx
2549	.960e		30 0f		bmi $961f	                bmi vdu127
2550	.9610		ca		dex		                dex                          ;restore old char
2551	.9611		c9 22		cmp #$22	                cmp #'"'
2552	.9613		f0 11		beq $9626	                beq printEscapedX
2553	.9615		c9 7c		cmp #$7c	                cmp #'|'
2554	.9617		d0 03		bne $961c	                bne printA
2555							                ; print "||"
2556	.9619		20 ee ff	jsr $ffee	                jsr OSWRCH
2557	.961c						printA:
2558	.961c		4c ee ff	jmp $ffee	                jmp OSWRCH

2560	.961f						vdu127:
2561							                ; print "|?"
2562	.961f		20 3c 96	jsr $963c	                jsr printEscapeChar
2563	.9622		a9 3f		lda #$3f	                lda #'?'
2564	.9624		80 f6		bra $961c	                bra printA

2566	.9626						printEscapedX:
2567	.9626		20 3c 96	jsr $963c	                jsr printEscapeChar
2568	.9629		8a		txa		                txa
2569	.962a		80 f0		bra $961c	                bra printA

2571	.962c						printControlChar:
2572	.962c		09 40		ora #$40	                ora #$40
2573	.962e		aa		tax		                tax
2574	.962f		80 f5		bra $9626	                bra printEscapedX

2576	.9631						printHighBitChar:
2577	.9631		48		pha		                pha
2578	.9632		a2 21		ldx #$21	                ldx #'!'
2579	.9634		20 26 96	jsr $9626	                jsr printEscapedX
2580	.9637		68		pla		                pla
2581	.9638		29 7f		and #$7f	                and #$7F
2582	.963a		80 ca		bra $9606	                bra printGSREADChar

2584	.963c						printEscapeChar:
2585	.963c		a9 7c		lda #$7c	                lda #'|'
2586	.963e		80 dc		bra $961c	                bra printA
2587							                .endproc

2589							;-------------------------------------------------------------------------

2592							                .include "rtc.s65"

:8	;******  Processing file: src/rtc.s65

2							; Day string not matched
3							; ----------------------
4	.9640						nextDayString:
5	.9640		68		pla		                pla                          ; Drop number of characters matched
6	.9641		68		pla		                pla                          ; Get offset to string table
7	.9642		7a		ply		                ply                          ; Get start of supplied string
8	.9643		18		clc		                clc                          ; Step to next string table entry
9	.9644		69 04		adc #$04	                adc #$04
10	.9646		c9 1c		cmp #$1c	                cmp #size(dayOfWeekStrings) ; If not checked 28/4=7 entries, keep looking
11	.9648		90 1c		bcc $9666	                bcc checkDayString
12	.964a		60		rts		                rts                          ; Otherwise exit silently

14							; Month string not matched
15							; ------------------------
16	.964b						nextMonthString:
17	.964b		68		pla		                pla                          ; Drop number of characters matched
18	.964c		68		pla		                pla                          ; Get offset to string table
19	.964d		7a		ply		                ply                          ; Get start of supplied string
20	.964e		18		clc		                clc                          ; Step to next string table entry
21	.964f		69 04		adc #$04	                adc #$04
22	.9651		c9 30		cmp #$30	                cmp #size(monthStrings) ; If not checked 48/4=12 entries, keep looking
23	.9653		90 43		bcc $9698	                bcc checkMonthString
24	.9655						rts9655:
25	.9655		60		rts		                rts                          ; Otherwise exit silently

27							;-------------------------------------------------------------------------
28							;
29							; OSWORD 15 (&0F) Write CMOS clock [MasRef D.3-24]
30							;
31	.9656						osword0F:
32	.9656		9c ed 02	stz $02ed	                stz osfileParameterBlock     ;got no time, got no date
33	.9659		49 0f		eor #$0f	                eor #15                     ; len=15, set date
34	.965b		f0 08		beq $9665	                beq setDate
35	.965d		49 07		eor #$07	                eor #15^8
36	.965f		f0 76		beq $96d7	                beq setTime
37	.9661		49 10		eor #$10	                eor #(15^8)^23
38	.9663		d0 f0		bne $9655	                bne rts9655

40							; Set date and set date+time
41							; --------------------------
42							; (&F0),1=>"Day,00 Mon 0000"
43							; (&F0),1=>"Day,00 Mon 0000.00:00:00"
44							; A=0, Y=0
45	.9665						setDate:
46	.9665		c8		iny		                iny                          ; Point to supplied data
47							; Translate day string into day number
48	.9666						checkDayString:
49	.9666		5a		phy		                phy                          ; Push pointer to data string
50	.9667		48		pha		                pha                          ; Push offset to match strings
51	.9668		aa		tax		                tax                          ; X=>match strings
52	.9669		a9 03		lda #$03	                lda #$03                     ; A=3 characters to match
53	.966b						checkDayStringLoop:
54	.966b		48		pha		                pha                          ; Save number of characters to match
55	.966c		b1 f0		lda ($f0),y	                lda (originalX),y      ; Get character from string
56	.966e		5d 68 97	eor $9768,x	                eor dayOfWeekStrings,x ; Compare with day string table
57	.9671		29 df		and #$df	                and #$DF                     ; Force to upper case
58	.9673		d0 cb		bne $9640	                bne nextDayString  ; No match step to check next entry
59	.9675		e8		inx		                inx                          ; Step to next character to match
60	.9676		c8		iny		                iny                          ; Step to next data character
61	.9677		68		pla		                pla                          ; Get character count back
62	.9678		3a		dec a		                dec a                        ; Decrement and loop until 3 characters matched
63	.9679		d0 f0		bne $966b	                bne checkDayStringLoop
64	.967b		bd 68 97	lda $9768,x	                lda dayOfWeekStrings,x ; Get translation byte from string table
65	.967e		8d f4 02	sta $02f4	                sta osfileParameterBlock+1+RTC.dayOfWeek ; Store it in workspace
66							; Translates Sun,Mon,Tue,etc to &01,&02,&03,etc
67	.9681		fa		plx		                plx                          ; Drop char count and table offset
68	.9682		fa		plx		                plx
69	.9683		b1 f0		lda ($f0),y	                lda ($F0),y                  ; Get next character
70	.9685		c9 2c		cmp #$2c	                cmp #','                     ; Not followed by a comma, so exit silently
71	.9687		d0 cc		bne $9655	                bne rts9655
72	.9689		a2 07		ldx #$07	                ldx #$07                     ; Get day of month
73	.968b		20 30 97	jsr $9730	                jsr readDecimalBCDByte
74	.968e		90 c5		bcc $9655	                bcc rts9655                    ; Bad number, exit silently
75	.9690		c8		iny		                iny                          ; Get next character
76	.9691		b1 f0		lda ($f0),y	                lda ($F0),y
77	.9693		49 20		eor #$20	                eor #' '                     ; Not space, exit silently
78	.9695		d0 be		bne $9655	                bne rts9655
79	.9697		c8		iny		                iny                          ; Step to first character of month
80							; Translate month string into month number
81							; This could use the same code as the Day translation
82	.9698						checkMonthString:
83	.9698		5a		phy		                phy                          ; Push pointer to data string
84	.9699		48		pha		                pha                          ; Push offset to match strings
85	.969a		aa		tax		                tax                          ; X=>match strings
86	.969b		a9 03		lda #$03	                lda #$03                     ; A=3 characters to match
87	.969d						checkMonthStringLoop:
88	.969d		48		pha		                pha
89	.969e		b1 f0		lda ($f0),y	                lda (originalX),y
90	.96a0		5d 84 97	eor $9784,x	                eor monthStrings,x
91	.96a3		29 df		and #$df	                and #$DF
92	.96a5		d0 a4		bne $964b	                bne nextMonthString
93	.96a7		e8		inx		                inx
94	.96a8		c8		iny		                iny
95	.96a9		68		pla		                pla
96	.96aa		3a		dec a		                dec a
97	.96ab		d0 f0		bne $969d	                bne checkMonthStringLoop
98	.96ad		bd 84 97	lda $9784,x	                lda monthStrings,x
99	.96b0		8d f6 02	sta $02f6	                sta osfileParameterBlock+1+RTC.month
100							; Translates Jan,Feb,Mar,etc to &01,&02,&03,etc..&09,&10,&11,&12
101	.96b3		fa		plx		                plx                          ; Drop char count and table offset
102	.96b4		fa		plx		                plx
103	.96b5		b1 f0		lda ($f0),y	                lda ($F0),y                  ; Get next character
104	.96b7		c9 20		cmp #$20	                cmp #' '                     ; Not followed by space, exit silently
105	.96b9		d0 9a		bne $9655	                bne rts9655
106	.96bb		a2 09		ldx #$09	                ldx #RTC.year
107	.96bd		20 30 97	jsr $9730	                jsr readDecimalBCDByte
108	.96c0		90 93		bcc $9655	                bcc rts9655                    ; Bad number, exit silently
109	.96c2		20 30 97	jsr $9730	                jsr readDecimalBCDByte                    ; Get year number
110	.96c5		90 8e		bcc $9655	                bcc rts9655                    ; Bad number, exit silently
111	.96c7		6e ed 02	ror $02ed	                ror osfileParameterBlock+0     ;got date
112	.96ca		b2 f0		lda ($f0)	                lda (originalX)        ; Get data length
113	.96cc		c9 0f		cmp #$0f	                cmp #$0F                     ; len=15, jump to just set date
114	.96ce		f0 2f		beq $96ff	                beq setRTCDate
115							; Must be len=24 to set date+time
116	.96d0		c8		iny		                iny                          ; Get next character
117	.96d1		b1 f0		lda ($f0),y	                lda (originalX),y
118	.96d3		c9 2e		cmp #$2e	                cmp #'.'                     ; If not full stop, exit silently
119	.96d5		d0 7c		bne $9753	                bne rts9753

121	.96d7						setTime:
122	.96d7		a2 04		ldx #$04	                ldx #RTC.hours
123	.96d9		20 30 97	jsr $9730	                jsr readDecimalBCDByte
124	.96dc		90 75		bcc $9753	                bcc rts9753
125	.96de		c8		iny		                iny
126	.96df		b1 f0		lda ($f0),y	                lda (originalX),y
127	.96e1		c9 3a		cmp #$3a	                cmp #':'
128	.96e3		d0 6e		bne $9753	                bne rts9753
129	.96e5		a2 02		ldx #$02	                ldx #RTC.minutes
130	.96e7		20 30 97	jsr $9730	                jsr readDecimalBCDByte
131	.96ea		90 67		bcc $9753	                bcc rts9753
132	.96ec		c8		iny		                iny
133	.96ed		b1 f0		lda ($f0),y	                lda (originalX),y
134	.96ef		c9 3a		cmp #$3a	                cmp #':'
135	.96f1		d0 60		bne $9753	                bne rts9753
136	.96f3		a2 00		ldx #$00	                ldx #RTC.seconds
137	.96f5		20 30 97	jsr $9730	                jsr readDecimalBCDByte
138	.96f8		90 59		bcc $9753	                bcc rts9753
139	.96fa		a9 40		lda #$40	                lda #$40
140	.96fc		0c ed 02	tsb $02ed	                tsb osfileParameterBlock+0   ;got time
141	.96ff						setRTCDate:
142	.96ff		58		cli		                cli
143	.9700		78		sei		                sei
144	.9701		a0 83		ldy #$83	                ldy #RTC.b.set|RTC.b._24h|RTC.b.dse
145	.9703		a2 0b		ldx #$0b	                ldx #RTC.b
146	.9705		20 e4 98	jsr $98e4	                jsr writeRTCByte
147	.9708		2c ed 02	bit $02ed	                bit osfileParameterBlock+0 ;N=1 if got date; V=1 if got time
148	.970b		10 0f		bpl $971c	                bpl setRTCTime ;taken if not got date - must then have time
149	.970d		a2 06		ldx #$06	                ldx #$06
150	.970f						-
151	.970f		bc ee 02	ldy $02ee,x	                ldy osfileParameterBlock+1,x
152	.9712		20 e4 98	jsr $98e4	                jsr writeRTCByte
153	.9715		e8		inx		                inx
154	.9716		e0 0a		cpx #$0a	                cpx #RTC.a
155	.9718		90 f5		bcc $970f	                bcc -
156	.971a		50 0d		bvc $9729	                bvc finishRTCUpdate                    ;taken if not got date
157	.971c						setRTCTime:
158	.971c		a2 00		ldx #$00	                ldx #RTC.seconds
159	.971e						-
160	.971e		bc ee 02	ldy $02ee,x	                ldy osfileParameterBlock+1,x
161	.9721		20 e4 98	jsr $98e4	                jsr writeRTCByte
162	.9724		e8		inx		                inx
163	.9725		e0 06		cpx #$06	                cpx #RTC.dayOfWeek
164	.9727		90 f5		bcc $971e	                bcc -
165	.9729						finishRTCUpdate:
166	.9729		a2 0b		ldx #$0b	                ldx #RTC.b
167	.972b		a0 02		ldy #$02	                ldy #RTC.b._24h
168	.972d		4c e4 98	jmp $98e4	                jmp writeRTCByte

170	.9730						readDecimalBCDByte:
171	.9730		20 54 97	jsr $9754	                jsr readDecimalDigit
172	.9733		49 20		eor #$20	                eor #$20         ;check for ' '
173	.9735		f0 04		beq $973b	                beq +        ;taken if leading space - that's fine
174	.9737		49 20		eor #$20	                eor #$20         ;reinstate old value
175	.9739		90 18		bcc $9753	                bcc rts9753      ;taken if non-space non-digits
176	.973b						+
177	.973b		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
178	.973e		20 54 97	jsr $9754	                jsr readDecimalDigit
179	.9741		90 10		bcc $9753	                bcc rts9753                  ;taken if invalid digit

181							                ; rotate new digit into place
182	.9743		5a		phy		                phy
183	.9744		a0 04		ldy #$04	                ldy #$04
184	.9746		0a		asl a		                asl a
185	.9747		0a		asl a		                asl a
186	.9748		0a		asl a		                asl a
187	.9749		0a		asl a		                asl a
188	.974a						-
189	.974a		0a		asl a		                asl a
190	.974b		3e ee 02	rol $02ee,x	                rol osfileParameterBlock+1,x
191	.974e		88		dey		                dey
192	.974f		d0 f9		bne $974a	                bne -
193	.9751		7a		ply		                ply
194	.9752		38		sec		                sec
195	.9753						rts9753:
196	.9753		60		rts		                rts

198	.9754						readDecimalDigit:
199	.9754		c8		iny		                iny
200	.9755		b1 f0		lda ($f0),y	                lda (originalX),y
201	.9757		c9 3a		cmp #$3a	                cmp #'9'+1
202	.9759		b0 07		bcs $9762	                bcs notDecimalDigit
203	.975b		c9 30		cmp #$30	                cmp #'0'
204	.975d		90 03		bcc $9762	                bcc notDecimalDigit
205	.975f		29 0f		and #$0f	                and #$0F
206	.9761		60		rts		                rts

208	.9762						notDecimalDigit:
209	.9762		18		clc		                clc
210	.9763		60		rts		                rts

213							;-------------------------------------------------------------------------

215							; TODO - is this necessary?
216							;
217							; There's a reference to dayOfWeekStrings-4, but that seems to be
218							; because days are 1-based. The data here is presumably never
219							; accesssed.
220	>9764		20 20 20 00			                .text "   ",0

222							;-------------------------------------------------------------------------

224	.9768						dayOfWeekStrings: .block
225	>9768		53 75 6e 01			                .text "Sun",$01
226	>976c		4d 6f 6e 02			                .text "Mon",$02
227	>9770		54 75 65 03			                .text "Tue",$03
228	>9774		57 65 64 04			                .text "Wed",$04
229	>9778		54 68 75 05			                .text "Thu",$05
230	>977c		46 72 69 06			                .text "Fri",$06
231	>9780		53 61 74 07			                .text "Sat",$07
232							                .endblock

234							;-------------------------------------------------------------------------

236	.9784						monthStrings: .block
237	>9784		4a 61 6e 01			                .text "Jan",$01
238	>9788		46 65 62 02			                .text "Feb",$02
239	>978c		4d 61 72 03			                .text "Mar",$03
240	>9790		41 70 72 04			                .text "Apr",$04
241	>9794		4d 61 79 05			                .text "May",$05
242	>9798		4a 75 6e 06			                .text "Jun",$06
243	>979c		4a 75 6c 07			                .text "Jul",$07
244	>97a0		41 75 67 08			                .text "Aug",$08
245	>97a4		53 65 70 09			                .text "Sep",$09
246	>97a8		4f 63 74 10			                .text "Oct",$10
247	>97ac		4e 6f 76 11			                .text "Nov",$11
248	>97b0		44 65 63 12			                .text "Dec",$12
249							                .endblock

251							;-------------------------------------------------------------------------

264							;-------------------------------------------------------------------------

272							;-------------------------------------------------------------------------
273							;
274							; OSWORD 14 (&0E) Read CMOS clock [MasRef D.3-22]
275							;

277	.97b4						osword0E:
279	.97b4		48		pha		                pha                          ;save reason code
280	.97b5		49 02		eor #$02	                eor #$02                     ;
281	.97b7		d0 1b		bne $97d4	                bne readClock

327							                ; Convert given time to string. Fill out the RTC temp
328							                ; data with the info from the parameter block, then
329							                ; pass on to the common code.
330	.97b9		a0 07		ldy #$07	                ldy #$07

332							                ; Copy hours, mins, secs.
333	.97bb		a2 00		ldx #$00	                ldx #$00
334	.97bd						-
335	.97bd		b1 f0		lda ($f0),y	                lda ($F0),y
336	.97bf		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
337	.97c2		88		dey		                dey
338	.97c3		e8		inx		                inx
339	.97c4		e8		inx		                inx
340	.97c5		e0 06		cpx #$06	                cpx #$06
341	.97c7		90 f4		bcc $97bd	                bcc -

343							                ; Copy day of week, day of month, month, year.
344	.97c9						-
345	.97c9		b1 f0		lda ($f0),y	                lda (originalX),y
346	.97cb		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
347	.97ce		e8		inx		                inx
348	.97cf		88		dey		                dey
349	.97d0		d0 f7		bne $97c9	                bne -

352	.97d2		80 30		bra $9804	                bra maybeConvertToString ; (called from here, there's no maybe about it)

354	.97d4						readClock:
355	.97d4		a5 f0		lda $f0		                lda originalX
356	.97d6		48		pha		                pha
357	.97d7		a5 f1		lda $f1		                lda originalY
358	.97d9		48		pha		                pha
359	.97da						readRTCClock:
360	.97da		a2 0c		ldx #$0c	                ldx #RTC.c
361	.97dc		20 b7 98	jsr $98b7	                jsr readRTCByte ;clear the various IRQ flags with a read of register C
362	.97df		a2 09		ldx #$09	                ldx #RTC.year
363	.97e1						-
364	.97e1		20 b7 98	jsr $98b7	                jsr readRTCByte
365	.97e4		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
366	.97e7		ca		dex		                dex
367	.97e8		10 f7		bpl $97e1	                bpl -
368	.97ea		a2 0a		ldx #$0a	                ldx #RTC.a
369	.97ec		20 b7 98	jsr $98b7	                jsr readRTCByte
370	.97ef		10 04		bpl $97f5	                bpl L97F5 ;taken if update not in progress - result is good
371	.97f1						retryReadRTCClock:
372	.97f1		58		cli		                cli
373	.97f2		78		sei		                sei
374	.97f3		80 e5		bra $97da	                bra readRTCClock

376	.97f5						L97F5:
377	.97f5		a2 0c		ldx #$0c	                ldx #RTC.c
378	.97f7		20 b7 98	jsr $98b7	                jsr readRTCByte
379	.97fa		29 10		and #$10	                and #RTC.c.uf
380	.97fc		d0 f3		bne $97f1	                bne retryReadRTCClock
381	.97fe		68		pla		                pla
382	.97ff		85 f1		sta $f1		                sta originalY
383	.9801		68		pla		                pla
384	.9802		85 f0		sta $f0		                sta originalX
385	.9804						maybeConvertToString:
386	.9804		68		pla		                pla                          ;get reason code
387	.9805		3a		dec a		                dec a
388	.9806		d0 1a		bne $9822	                bne convertTimeToString                    ;taken if 0 or 2

390							                ; Copy year, month, day of month, day of week.
391	.9808		a0 00		ldy #$00	                ldy #$00
392	.980a		a2 09		ldx #$09	                ldx #RTC.year
393	.980c						-
394	.980c		bd ee 02	lda $02ee,x	                lda osfileParameterBlock+1,x
395	.980f		91 f0		sta ($f0),y	                sta (originalX),y
396	.9811		c8		iny		                iny
397	.9812		ca		dex		                dex
398	.9813		e0 06		cpx #$06	                cpx #RTC.dayOfWeek
399	.9815		b0 f5		bcs $980c	                bcs -

401							                ; Copy hours, minutes, seconds.
402	.9817						-
403	.9817		bd ed 02	lda $02ed,x	                lda osfileParameterBlock,x
404	.981a		91 f0		sta ($f0),y	                sta (originalX),y
405	.981c		c8		iny		                iny
406	.981d		ca		dex		                dex
407	.981e		ca		dex		                dex
408	.981f		10 f6		bpl $9817	                bpl -
409	.9821		60		rts		                rts

413	.9822						convertTimeToString:
414							                ; Store terminating CR.
415	.9822		a0 18		ldy #$18	                ldy #ClockStringFormat.cr
416	.9824		a9 0d		lda #$0d	                lda #13
417	.9826		91 f0		sta ($f0),y	                sta (originalX),y
418	.9828		a2 00		ldx #$00	                ldx #$00
419	.982a		88		dey		                dey
420	.982b		20 90 98	jsr $9890	                jsr storeRTCDataByteString
421	.982e		a9 3a		lda #$3a	                lda #':'
422	.9830		91 f0		sta ($f0),y	                sta (originalX),y
423	.9832		a0 12		ldy #$12	                ldy #ClockStringFormat.hh+2
424	.9834		91 f0		sta ($f0),y	                sta (originalX),y
425	.9836		a2 02		ldx #$02	                ldx #RTC.minutes
426	.9838		a0 14		ldy #$14	                ldy #ClockStringFormat.mm+1
427	.983a		20 90 98	jsr $9890	                jsr storeRTCDataByteString
428	.983d		a2 04		ldx #$04	                ldx #RTC.hours
429	.983f		a0 11		ldy #$11	                ldy #ClockStringFormat.hh+1
430	.9841		20 90 98	jsr $9890	                jsr storeRTCDataByteString
431	.9844		a9 2e		lda #$2e	                lda #'.'
432	.9846		91 f0		sta ($f0),y	                sta (originalX),y
433	.9848		ad f4 02	lda $02f4	                lda osfileParameterBlock+1+RTC.dayOfWeek;
434	.984b		0a		asl a		                asl a
435	.984c		0a		asl a		                asl a
436	.984d		a0 00		ldy #$00	                ldy #$00
437	.984f		aa		tax		                tax
438	.9850						-
439	.9850		bd 64 97	lda $9764,x	                lda dayOfWeekStrings-4,x     ;-4 as 1=Sunday
440	.9853		91 f0		sta ($f0),y	                sta (originalX),y
441	.9855		e8		inx		                inx
442	.9856		c8		iny		                iny
443	.9857		c0 03		cpy #$03	                cpy #$03
444	.9859		90 f5		bcc $9850	                bcc -
445	.985b		a9 2c		lda #$2c	                lda #','
446	.985d		91 f0		sta ($f0),y	                sta (originalX),y
447	.985f		ad f6 02	lda $02f6	                lda osfileParameterBlock+1+RTC.month
448	.9862		c9 10		cmp #$10	                cmp #$10
449	.9864		90 02		bcc $9868	                bcc +
450	.9866		e9 06		sbc #$06	                sbc #$06            ;convert $10, $11 and $12 from BCD
451	.9868						+
452	.9868		3a		dec a		                dec a                        ;make month 0-based
453	.9869		0a		asl a		                asl a
454	.986a		0a		asl a		                asl a
455	.986b		aa		tax		                tax
456	.986c		a0 07		ldy #$07	                ldy #ClockStringFormat.mmm
457	.986e						-
458	.986e		bd 84 97	lda $9784,x	                lda monthStrings,x
459	.9871		91 f0		sta ($f0),y	                sta ($F0),y
460	.9873		e8		inx		                inx
461	.9874		c8		iny		                iny
462	.9875		c0 0a		cpy #$0a	                cpy #ClockStringFormat.mmm+3
463	.9877		90 f5		bcc $986e	                bcc -
464	.9879		a2 09		ldx #$09	                ldx #RTC.year
465	.987b		a0 0e		ldy #$0e	                ldy #ClockStringFormat.yyyy+3
466	.987d		20 90 98	jsr $9890	                jsr storeRTCDataByteString
467	.9880		a9 19		lda #$19	                lda #assumedRTCCenturyBCD
468	.9882		20 93 98	jsr $9893	                jsr storeBCDByteString
469	.9885		a9 20		lda #$20	                lda #$20
470	.9887		91 f0		sta ($f0),y	                sta ($F0),y
471	.9889		a0 06		ldy #$06	                ldy #ClockStringFormat.nn+2
472	.988b		91 f0		sta ($f0),y	                sta ($F0),y
473	.988d		88		dey		                dey
474	.988e		a2 07		ldx #$07	                ldx #RTC.dayOfMonth
475	.9890						storeRTCDataByteString:
476	.9890		bd ee 02	lda $02ee,x	                lda osfileParameterBlock+1,x
477	.9893						storeBCDByteString:
478	.9893		48		pha		                pha
479	.9894		20 9c 98	jsr $989c	                jsr storeNybbleString
480	.9897		68		pla		                pla
484	.9898		4a		lsr a		                lsr a
485	.9899		4a		lsr a		                lsr a
486	.989a		4a		lsr a		                lsr a
487	.989b		4a		lsr a		                lsr a
489	.989c						storeNybbleString:
490	.989c		29 0f		and #$0f	                and #$0F
491	.989e		09 30		ora #$30	                ora #'0'
492	.98a0		c9 3a		cmp #$3a	                cmp #'9'+1
493	.98a2		90 02		bcc $98a6	                bcc +
494	.98a4		69 06		adc #$06	                adc #('A'-'9'-1)-1           ;(-1 because C set)
495	.98a6						+
496	.98a6		91 f0		sta ($f0),y	                sta (originalX),y
497	.98a8		88		dey		                dey
498	.98a9		60		rts		                rts

500							;-------------------------------------------------------------------------

507	.98aa						readDefaults2:
508	.98aa		a2 1d		ldx #$1d	                ldx #CMOSBytes.defaults2+cmosBytesOffset
509	.98ac		80 09		bra $98b7	                bra readRTCByte

512							;-------------------------------------------------------------------------

519	.98ae						readDefaults3:
520	.98ae		a2 1e		ldx #$1e	                ldx #CMOSBytes.defaults3+cmosBytesOffset
521	.98b0		80 05		bra $98b7	                bra readRTCByte

524							;-------------------------------------------------------------------------
525							;
526							; Read byte from RTC, either by 0-based CMOS RAM offset (readCMOSByte)
527							; or by RTC register index (readRTCByte).
528							;
529							; entry:
530							;
531							; X = address to read from
532							;
533							; exit:
534							;
535							; A = byte read
536							;
537							; N,Z = set as per byte read
538							;
540	.98b2						readCMOSByte:
541	.98b2		20 fd 98	jsr $98fd	                jsr getRTCAddressForCMOSByte
546	.98b5		b0 24		bcs $98db	                bcs rts98DB                  ;taken if invalid address
552	.98b7						readRTCByte:
553	.98b7		08		php		                php
554	.98b8		78		sei		                sei
555	.98b9		20 06 99	jsr $9906	                jsr setRTCAddress
556	.98bc		a9 49		lda #$49	                lda #$49
557	.98be		8d 40 fe	sta $fe40	                sta systemVIA.orb
558	.98c1		9c 43 fe	stz $fe43	                stz systemVIA.ddra
559	.98c4		a9 4a		lda #$4a	                lda #$4A
560	.98c6		8d 40 fe	sta $fe40	                sta systemVIA.orb
561	.98c9		ac 4f fe	ldy $fe4f	                ldy systemVIA.iraNoHandshake ;read value
562	.98cc						deselectRTC:
563	.98cc		a9 42		lda #$42	                lda #$42
564	.98ce		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=0
565	.98d1		a9 02		lda #$02	                lda #$02
566	.98d3		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=0 DS=0 R=0
567	.98d6		9c 43 fe	stz $fe43	                stz systemVIA.ddra           ;all bits inputs
568	.98d9		28		plp		                plp
569	.98da		98		tya		                tya
570	.98db						rts98DB:
571	.98db		60		rts		                rts

574							;-------------------------------------------------------------------------
575							;
576							; Write byte to RTC, either by 0-based CMOS RAM offset (writeCMOSByte)
577							; or by RTC register index (writeRTCByte).
578							;
579							; (For some reason, writeCMOSByte can't be used to write to CMOS RAM
580							; offset 0.)
581							;
582							; entry:
583							;
584							; X = address to write to
585							;
586							; Y = value to write
587							;
589	.98dc						writeCMOSByte:
590	.98dc		8a		txa		                txa
591	.98dd		f0 fc		beq $98db	                beq rts98DB
592	.98df		20 fd 98	jsr $98fd	                jsr getRTCAddressForCMOSByte
593	.98e2		b0 f7		bcs $98db	                bcs rts98DB
594	.98e4						writeRTCByte:
595	.98e4		08		php		                php
596	.98e5		78		sei		                sei
597	.98e6		20 06 99	jsr $9906	                jsr setRTCAddress            ;X=address
598	.98e9		a9 41		lda #$41	                lda #$41
599	.98eb		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=0
600	.98ee		a9 ff		lda #$ff	                lda #$FF
601	.98f0		8d 43 fe	sta $fe43	                sta systemVIA.ddra           ;all bits outputs
602	.98f3		a9 4a		lda #$4a	                lda #$4A
603	.98f5		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=1
604	.98f8		8c 4f fe	sty $fe4f	                sty systemVIA.oraNoHandshake ;store value
605	.98fb		80 cf		bra $98cc	                bra deselectRTC

608							;-------------------------------------------------------------------------
609							;
610							; Convert CMOS byte offset to actual RTC address.
611							;
612							; entry:
613							;
614							; X = CMOS byte offset - 0-49
615							;
616							; exit:
617							;
618							; C=1 = invalid address
619							;
620							; C=0 = valid address: X = register index
621							;
623	.98fd						getRTCAddressForCMOSByte:
624	.98fd		e0 32		cpx #$32	                cpx #size(RTC.ram)
625	.98ff		b0 04		bcs $9905	                bcs rts9905
626	.9901		8a		txa		                txa
627	.9902		69 0e		adc #$0e	                adc #RTC.ram
628	.9904		aa		tax		                tax
629	.9905						rts9905:
630	.9905		60		rts		                rts

633							;-------------------------------------------------------------------------
634							;
635							; set RTC address for future read/write operation.
636							;
637							; entry:
638							;
639							; X = address to set
640							;
641							; preserves: Y
642							;
644	.9906						setRTCAddress:
645	.9906		a9 02		lda #$02	                lda #$02
646	.9908		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=0 DS=0 R=0
647	.990b		a9 82		lda #$82	                lda #$82
648	.990d		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=1 CS=0 DS=0 R=0
649	.9910		a9 ff		lda #$ff	                lda #$FF
650	.9912		8d 43 fe	sta $fe43	                sta systemVIA.ddra           ;all bits outputs
651	.9915		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake ;write RTC address
652	.9918		a9 c2		lda #$c2	                lda #$c2
653	.991a		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=1 CS=1 DS=0 R=0
654	.991d		a9 42		lda #$42	                lda #$42
655	.991f		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=0
656	.9922						rts9922:
657	.9922		60		rts		                rts

:6	;******  Return to file: src/terminal.s65

2595							;-------------------------------------------------------------------------

2597	.9923						L9923:
2598	.9923		a9 03		lda #$03	                lda #$03
2599	.9925		20 98 d2	jsr $d298	                jsr LD298
2600	.9928		90 12		bcc $993c	                bcc L993C
2601	.992a		20 30 99	jsr $9930	                jsr L9930
2602	.992d		20 a9 d8	jsr $d8a9	                jsr LD8A9
2603	.9930						L9930:
2604	.9930		a2 20		ldx #$20	                ldx #$20
2605	.9932		4c b8 e2	jmp $e2b8	                jmp LE2B8

2607	.9935						L9935:
2608	.9935		a9 02		lda #$02	                lda #$02
2609	.9937		20 98 d2	jsr $d298	                jsr LD298
2610	.993a		b0 64		bcs $99a0	                bcs L99A0
2611	.993c						L993C:
2612	.993c		20 d2 d3	jsr $d3d2	                jsr LD3D2
2613	.993f		20 bf 9a	jsr $9abf	                jsr L9ABF
2614	.9942		80 08		bra $994c	                bra L994C

2616	.9944						L9944:
2617	.9944		20 1a d4	jsr $d41a	                jsr LD41A
2618	.9947		f0 57		beq $99a0	                beq L99A0
2619	.9949		20 d2 d3	jsr $d3d2	                jsr LD3D2
2620	.994c						L994C:
2621	.994c		a5 e1		lda $e1		                lda $E1
2622	.994e		89 20		bit #$20	                bit #$20
2623	.9950		f0 05		beq $9957	                beq L9957
2624	.9952		48		pha		                pha
2625	.9953		20 a3 d6	jsr $d6a3	                jsr LD6A3
2626	.9956		68		pla		                pla
2627	.9957						L9957:
2628	.9957		89 10		bit #$10	                bit #$10
2629	.9959		f0 03		beq $995e	                beq L995E
2630	.995b		20 98 d6	jsr $d698	                jsr LD698
2631	.995e						L995E:
2632	.995e		20 fc 99	jsr $99fc	                jsr L99FC
2633	.9961		08		php		                php
2634	.9962		20 5a 9a	jsr $9a5a	                jsr L9A5A
2635	.9965		a2 42		ldx #$42	                ldx #$42
2636	.9967		a0 46		ldy #$46	                ldy #$46
2637	.9969		a9 20		lda #$20	                lda #$20
2638	.996b		2c 49 88	bit $8849	                bit L8849
2639	.996e		f0 1c		beq $998c	                beq L998C
2640	.9970		30 18		bmi $998a	                bmi L998A
2641	.9972		ad 2c 03	lda $032c	                lda $032C
2642	.9975		cd 37 03	cmp $0337	                cmp $0337
2643	.9978		d0 08		bne $9982	                bne L9982
2644	.997a		ad 2d 03	lda $032d	                lda $032D
2645	.997d		cd 38 03	cmp $0338	                cmp $0338
2646	.9980		f0 10		beq $9992	                beq L9992
2647	.9982						L9982:
2648	.9982		a2 37		ldx #$37	                ldx #$37
2649	.9984		20 4d d2	jsr $d24d	                jsr LD24D
2650	.9987		a2 42		ldx #$42	                ldx #$42
2651	.9989		b8		clv		                clv
2652	.998a						L998A:
2653	.998a		a0 2c		ldy #$2c	                ldy #$2C
2654	.998c						L998C:
2655	.998c		30 07		bmi $9995	                bmi L9995
2656	.998e		50 02		bvc $9992	                bvc L9992
2657	.9990		a2 37		ldx #$37	                ldx #$37
2658	.9992						L9992:
2659	.9992		20 4d d2	jsr $d24d	                jsr LD24D
2660	.9995						L9995:
2661	.9995		28		plp		                plp
2662	.9996		90 b4		bcc $994c	                bcc L994C
2663	.9998		60		rts		                rts

2665	.9999						L9999:
2666	.9999		a9 01		lda #$01	                lda #$01
2667	.999b		20 98 d2	jsr $d298	                jsr LD298
2668	.999e		90 09		bcc $99a9	                bcc L99A9
2669	.99a0						L99A0:
2670	.99a0		a2 24		ldx #$24	                ldx #$24
2671	.99a2		80 37		bra $99db	                bra L99DB

2673	.99a4						L99A4:
2674	.99a4		20 1a d4	jsr $d41a	                jsr LD41A
2675	.99a7		f0 f7		beq $99a0	                beq L99A0
2676	.99a9						L99A9:
2677	.99a9		20 d2 d3	jsr $d3d2	                jsr LD3D2
2678	.99ac		20 c9 99	jsr $99c9	                jsr L99C9
2679	.99af						L99AF:
2680	.99af		20 e6 d5	jsr $d5e6	                jsr LD5E6
2681	.99b2		20 c9 99	jsr $99c9	                jsr L99C9
2682	.99b5		ad 30 88	lda $8830	                lda L8830
2683	.99b8		0d 31 88	ora $8831	                ora L8831
2684	.99bb		f0 3e		beq $99fb	                beq L99FB
2685	.99bd		2c 48 88	bit $8848	                bit L8848
2686	.99c0		70 ed		bvs $99af	                bvs L99AF
2687	.99c2		a2 42		ldx #$42	                ldx #$42
2688	.99c4		20 d6 99	jsr $99d6	                jsr L99D6
2689	.99c7		80 e6		bra $99af	                bra L99AF

2691	.99c9						L99C9:
2692	.99c9		20 34 d3	jsr $d334	                jsr LD334
2693	.99cc		20 de 99	jsr $99de	                jsr L99DE
2694	.99cf		2c 48 88	bit $8848	                bit L8848
2695	.99d2		30 27		bmi $99fb	                bmi L99FB
2696	.99d4		a2 46		ldx #$46	                ldx #$46
2697	.99d6						L99D6:
2698	.99d6		da		phx		                phx
2699	.99d7		20 80 d2	jsr $d280	                jsr LD280
2700	.99da		fa		plx		                plx
2701	.99db						L99DB:
2702	.99db		4c 4c db	jmp $db4c	                jmp plotPointInternal

2704	.99de						L99DE:
2705	.99de		a2 03		ldx #$03	                ldx #$03
2706	.99e0						L99E0:
2707	.99e0		bd 30 88	lda $8830,x	                lda L8830,x
2708	.99e3		9d 42 03	sta $0342,x	                sta $0342,x
2709	.99e6		9d 46 03	sta $0346,x	                sta $0346,x
2710	.99e9		ca		dex		                dex
2711	.99ea		10 f4		bpl $99e0	                bpl L99E0
2712	.99ec						L99EC:
2713	.99ec		ac 42 03	ldy $0342	                ldy $0342
2714	.99ef		ad 43 03	lda $0343	                lda $0343
2715	.99f2		20 2e c9	jsr $c92e	                jsr negateAY
2716	.99f5		8c 42 03	sty $0342	                sty $0342
2717	.99f8		8d 43 03	sta $0343	                sta $0343
2718	.99fb						L99FB:
2719	.99fb		60		rts		                rts

2721	.99fc						L99FC:
2722	.99fc		a5 e1		lda $e1		                lda $E1
2723	.99fe		8d 49 88	sta $8849	                sta L8849
2724	.9a01		20 de 99	jsr $99de	                jsr L99DE
2725	.9a04		a2 01		ldx #$01	                ldx #$01
2726	.9a06						L9A06:
2727	.9a06		9e 42 03	stz $0342,x	                stz $0342,x
2728	.9a09		9e 46 03	stz $0346,x	                stz $0346,x
2729	.9a0c		ca		dex		                dex
2730	.9a0d		10 f7		bpl $9a06	                bpl L9A06
2731	.9a0f						L9A0F:
2732	.9a0f		20 2e 9a	jsr $9a2e	                jsr L9A2E
2733	.9a12		ad 30 88	lda $8830	                lda L8830
2734	.9a15		0d 31 88	ora $8831	                ora L8831
2735	.9a18		d0 06		bne $9a20	                bne L9A20
2736	.9a1a		38		sec		                sec
2737	.9a1b		ad 47 88	lda $8847	                lda L8847
2738	.9a1e		d0 cc		bne $99ec	                bne L99EC
2739	.9a20						L9A20:
2740	.9a20		20 e6 d5	jsr $d5e6	                jsr LD5E6
2741	.9a23		ad 32 88	lda $8832	                lda L8832
2742	.9a26		cd 44 03	cmp $0344	                cmp $0344
2743	.9a29		f0 e4		beq $9a0f	                beq L9A0F
2744	.9a2b		18		clc		                clc
2745	.9a2c		80 be		bra $99ec	                bra L99EC

2747	.9a2e						L9A2E:
2748	.9a2e		20 34 d3	jsr $d334	                jsr LD334
2749	.9a31		2c 48 88	bit $8848	                bit L8848
2750	.9a34		30 07		bmi $9a3d	                bmi L9A3D
2751	.9a36		08		php		                php
2752	.9a37		a2 46		ldx #$46	                ldx #$46
2753	.9a39		20 41 9a	jsr $9a41	                jsr L9A41
2754	.9a3c		28		plp		                plp
2755	.9a3d						L9A3D:
2756	.9a3d		70 1a		bvs $9a59	                bvs L9A59
2757	.9a3f		a2 42		ldx #$42	                ldx #$42
2758	.9a41						L9A41:
2759	.9a41		ad 30 88	lda $8830	                lda L8830
2760	.9a44		a8		tay		                tay
2761	.9a45		dd 00 03	cmp $0300,x	                cmp $0300,x
2762	.9a48		ad 31 88	lda $8831	                lda L8831
2763	.9a4b		48		pha		                pha
2764	.9a4c		fd 01 03	sbc $0301,x	                sbc $0301,x
2765	.9a4f		68		pla		                pla
2766	.9a50		90 07		bcc $9a59	                bcc L9A59
2767	.9a52		9d 01 03	sta $0301,x	                sta $0301,x
2768	.9a55		98		tya		                tya
2769	.9a56		9d 00 03	sta $0300,x	                sta $0300,x
2770	.9a59						L9A59:
2771	.9a59		60		rts		                rts

2773	.9a5a						L9A5A:
2774	.9a5a		ad 44 03	lda $0344	                lda $0344
2775	.9a5d		0d 45 03	ora $0345	                ora $0345
2776	.9a60		d0 5c		bne $9abe	                bne L9ABE
2777	.9a62		a5 e1		lda $e1		                lda $E1
2778	.9a64		1a		inc a		                inc a
2779	.9a65		29 03		and #$03	                and #$03
2780	.9a67		d0 55		bne $9abe	                bne L9ABE
2781	.9a69		a9 20		lda #$20	                lda #$20
2782	.9a6b		2c 49 88	bit $8849	                bit L8849
2783	.9a6e		10 09		bpl $9a79	                bpl L9A79
2784	.9a70		f0 07		beq $9a79	                beq L9A79
2785	.9a72		a2 2c		ldx #$2c	                ldx #$2C
2786	.9a74		a0 46		ldy #$46	                ldy #$46
2787	.9a76		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
2788	.9a79						L9A79:
2789	.9a79		a9 10		lda #$10	                lda #$10
2790	.9a7b		2c 49 88	bit $8849	                bit L8849
2791	.9a7e		50 09		bvc $9a89	                bvc L9A89
2792	.9a80		f0 07		beq $9a89	                beq L9A89
2793	.9a82		a2 37		ldx #$37	                ldx #$37
2794	.9a84		a0 42		ldy #$42	                ldy #$42
2795	.9a86		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
2796	.9a89						L9A89:
2797	.9a89		20 bf 9a	jsr $9abf	                jsr L9ABF
2798	.9a8c		a5 e1		lda $e1		                lda $E1
2799	.9a8e		49 3c		eor #$3c	                eor #$3C
2800	.9a90		2a		rol a		                rol a
2801	.9a91		20 6f c6	jsr $c66f	                jsr fixUpVPALETTEFor4Colours
2802	.9a94		6a		ror a		                ror a
2803	.9a95		85 e1		sta $e1		                sta $E1
2804	.9a97		89 20		bit #$20	                bit #$20
2805	.9a99		f0 10		beq $9aab	                beq L9AAB
2806	.9a9b		48		pha		                pha
2807	.9a9c		a2 2c		ldx #$2c	                ldx #$2C
2808	.9a9e		a0 46		ldy #$46	                ldy #$46
2809	.9aa0		20 cc d5	jsr $d5cc	                jsr sortVDUVariableWords
2810	.9aa3		98		tya		                tya
2811	.9aa4		aa		tax		                tax
2812	.9aa5		a0 46		ldy #$46	                ldy #$46
2813	.9aa7		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
2814	.9aaa		68		pla		                pla
2815	.9aab						L9AAB:
2816	.9aab		89 10		bit #$10	                bit #$10
2817	.9aad		f0 0c		beq $9abb	                beq L9ABB
2818	.9aaf		a2 37		ldx #$37	                ldx #$37
2819	.9ab1		a0 42		ldy #$42	                ldy #$42
2820	.9ab3		20 cc d5	jsr $d5cc	                jsr sortVDUVariableWords
2821	.9ab6		a0 42		ldy #$42	                ldy #$42
2822	.9ab8		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
2823	.9abb						L9ABB:
2824	.9abb		9c 49 88	stz $8849	                stz L8849
2825	.9abe						L9ABE:
2826	.9abe		60		rts		                rts

2828	.9abf						L9ABF:
2829	.9abf		a2 03		ldx #$03	                ldx #$03
2830	.9ac1						L9AC1:
2831	.9ac1		9e 3b 03	stz $033b,x	                stz $033B,x
2832	.9ac4		ca		dex		                dex
2833	.9ac5		10 fa		bpl $9ac1	                bpl L9AC1
2834	.9ac7		a0 28		ldy #$28	                ldy #$28
2835	.9ac9		a2 1b		ldx #$1b	                ldx #$1B
2836	.9acb		a9 2c		lda #$2c	                lda #$2C
2837	.9acd		20 df 9a	jsr $9adf	                jsr L9ADF
2838	.9ad0		20 a8 d6	jsr $d6a8	                jsr LD6A8
2839	.9ad3		a0 1b		ldy #$1b	                ldy #$1B
2840	.9ad5		a2 28		ldx #$28	                ldx #$28
2841	.9ad7		a9 37		lda #$37	                lda #$37
2842	.9ad9		20 df 9a	jsr $9adf	                jsr L9ADF
2843	.9adc		4c 9d d6	jmp $d69d	                jmp LD69D

2845	.9adf						L9ADF:
2846	.9adf		48		pha		                pha
2847	.9ae0		a5 e1		lda $e1		                lda $E1
2848	.9ae2		4a		lsr a		                lsr a
2849	.9ae3		90 0b		bcc $9af0	                bcc L9AF0
2850	.9ae5		ad 47 88	lda $8847	                lda L8847
2851	.9ae8		d0 04		bne $9aee	                bne L9AEE
2852	.9aea		a2 3b		ldx #$3b	                ldx #$3B
2853	.9aec		80 02		bra $9af0	                bra L9AF0

2855	.9aee						L9AEE:
2856	.9aee		a0 3b		ldy #$3b	                ldy #$3B
2857	.9af0						L9AF0:
2858	.9af0		8a		txa		                txa
2859	.9af1		fa		plx		                plx
2860	.9af2		da		phx		                phx
2861	.9af3		48		pha		                pha
2862	.9af4		5a		phy		                phy
2863	.9af5		a8		tay		                tay
2864	.9af6		a9 03		lda #$03	                lda #$03
2865	.9af8		85 da		sta $da		                sta $DA
2866	.9afa						L9AFA:
2867	.9afa		b9 00 03	lda $0300,y	                lda $0300,y
2868	.9afd		9d 1e 88	sta $881e,x	                sta L881E,x
2869	.9b00		c8		iny		                iny
2870	.9b01		e8		inx		                inx
2871	.9b02		c6 da		dec $da		                dec $DA
2872	.9b04		10 f4		bpl $9afa	                bpl L9AFA
2873	.9b06		7a		ply		                ply
2874	.9b07		68		pla		                pla
2875	.9b08		fa		plx		                plx
2876	.9b09						L9B09:
2877	.9b09		48		pha		                pha
2878	.9b0a		5a		phy		                phy
2879	.9b0b		20 61 9b	jsr $9b61	                jsr L9B61
2880	.9b0e		ca		dex		                dex
2881	.9b0f		7a		ply		                ply
2882	.9b10		68		pla		                pla
2883	.9b11		da		phx		                phx
2884	.9b12		c8		iny		                iny
2885	.9b13		c8		iny		                iny
2886	.9b14		1a		inc a		                inc a
2887	.9b15		1a		inc a		                inc a
2888	.9b16		e8		inx		                inx
2889	.9b17		e8		inx		                inx
2890	.9b18		20 61 9b	jsr $9b61	                jsr L9B61
2891	.9b1b		fa		plx		                plx
2892	.9b1c		20 90 9b	jsr $9b90	                jsr L9B90
2893	.9b1f		08		php		                php
2894	.9b20		48		pha		                pha
2895	.9b21		bd 05 03	lda $0305,x	                lda $0305,x
2896	.9b24		0a		asl a		                asl a
2897	.9b25		7e 0a 03	ror $030a,x	                ror $030A,x
2898	.9b28		10 03		bpl $9b2d	                bpl L9B2D
2899	.9b2a		20 7f 9b	jsr $9b7f	                jsr L9B7F
2900	.9b2d						L9B2D:
2901	.9b2d		68		pla		                pla
2902	.9b2e		0a		asl a		                asl a
2903	.9b2f		7e 0a 03	ror $030a,x	                ror $030A,x
2904	.9b32		10 07		bpl $9b3b	                bpl L9B3B
2905	.9b34		e8		inx		                inx
2906	.9b35		e8		inx		                inx
2907	.9b36		20 7f 9b	jsr $9b7f	                jsr L9B7F
2908	.9b39		ca		dex		                dex
2909	.9b3a		ca		dex		                dex
2910	.9b3b						L9B3B:
2911	.9b3b		20 90 9b	jsr $9b90	                jsr L9B90
2912	.9b3e		10 06		bpl $9b46	                bpl L9B46
2913	.9b40		bd 05 03	lda $0305,x	                lda $0305,x
2914	.9b43		bc 04 03	ldy $0304,x	                ldy $0304,x
2915	.9b46						L9B46:
2916	.9b46		28		plp		                plp
2917	.9b47		30 06		bmi $9b4f	                bmi L9B4F
2918	.9b49		c0 00		cpy #$00	                cpy #$00
2919	.9b4b		d0 01		bne $9b4e	                bne L9B4E
2920	.9b4d		3a		dec a		                dec a
2921	.9b4e						L9B4E:
2922	.9b4e		88		dey		                dey
2923	.9b4f						L9B4F:
2924	.9b4f		4a		lsr a		                lsr a
2925	.9b50		48		pha		                pha
2926	.9b51		98		tya		                tya
2927	.9b52		6a		ror a		                ror a
2928	.9b53		38		sec		                sec
2929	.9b54		ca		dex		                dex
2930	.9b55		20 5a 9b	jsr $9b5a	                jsr L9B5A
2931	.9b58		e8		inx		                inx
2932	.9b59		68		pla		                pla
2933	.9b5a						L9B5A:
2934	.9b5a		fd 07 03	sbc $0307,x	                sbc $0307,x
2935	.9b5d		9d 09 03	sta $0309,x	                sta $0309,x
2936	.9b60		60		rts		                rts

2938	.9b61						L9B61:
2939	.9b61		48		pha		                pha
2940	.9b62		b9 00 03	lda $0300,y	                lda $0300,y
2941	.9b65		9d 00 03	sta $0300,x	                sta $0300,x
2942	.9b68		b9 01 03	lda $0301,y	                lda $0301,y
2943	.9b6b		9d 01 03	sta $0301,x	                sta $0301,x
2944	.9b6e		7a		ply		                ply
2945	.9b6f		38		sec		                sec
2946	.9b70		20 75 9b	jsr $9b75	                jsr L9B75
2947	.9b73		e8		inx		                inx
2948	.9b74		c8		iny		                iny
2949	.9b75						L9B75:
2950	.9b75		b9 00 03	lda $0300,y	                lda $0300,y
2951	.9b78		fd 00 03	sbc $0300,x	                sbc $0300,x
2952	.9b7b		9d 04 03	sta $0304,x	                sta $0304,x
2953	.9b7e		60		rts		                rts

2955	.9b7f						L9B7F:
2956	.9b7f		bd 05 03	lda $0305,x	                lda $0305,x
2957	.9b82		bc 04 03	ldy $0304,x	                ldy $0304,x
2958	.9b85		20 2e c9	jsr $c92e	                jsr negateAY
2959	.9b88		9d 05 03	sta $0305,x	                sta $0305,x
2960	.9b8b		98		tya		                tya
2961	.9b8c		9d 04 03	sta $0304,x	                sta $0304,x
2962	.9b8f		60		rts		                rts

2964	.9b90						L9B90:
2965	.9b90		bd 06 03	lda $0306,x	                lda $0306,x
2966	.9b93		a8		tay		                tay
2967	.9b94		dd 04 03	cmp $0304,x	                cmp $0304,x
2968	.9b97		bd 07 03	lda $0307,x	                lda $0307,x
2969	.9b9a		fd 05 03	sbc $0305,x	                sbc $0305,x
2970	.9b9d		08		php		                php
2971	.9b9e		bd 07 03	lda $0307,x	                lda $0307,x
2972	.9ba1		28		plp		                plp
2973	.9ba2		60		rts		                rts

2975							;-------------------------------------------------------------------------
2976							;
2977							; 112-119 = Plot parallelogram [MasRef E.3-27]
2978							;
2979	.9ba3						plotParallelogram:
2980	.9ba3		a2 28		ldx #$28	                ldx #$28
2981	.9ba5		86 da		stx $da		                stx $DA
2982	.9ba7		a2 14		ldx #$14	                ldx #$14
2983	.9ba9		a0 20		ldy #$20	                ldy #$20
2984	.9bab		a9 24		lda #$24	                lda #$24
2985	.9bad		20 80 d5	jsr $d580	                jsr addRegionDimensionsToVDUVariableCoordinates
2986	.9bb0		a0 14		ldy #$14	                ldy #$14
2987	.9bb2		a2 24		ldx #$24	                ldx #$24
2988	.9bb4		20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
2989	.9bb7		8e 30 88	stx $8830	                stx L8830
2990	.9bba		a2 20		ldx #$20	                ldx #$20
2991	.9bbc		20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
2992	.9bbf		8e 31 88	stx $8831	                stx L8831
2993	.9bc2		a2 28		ldx #$28	                ldx #$28
2994	.9bc4		20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
2995	.9bc7		8c 33 88	sty $8833	                sty L8833
2996	.9bca		ac 31 88	ldy $8831	                ldy L8831
2997	.9bcd		20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
2998	.9bd0		8c 32 88	sty $8832	                sty L8832
2999	.9bd3		ac 30 88	ldy $8830	                ldy L8830
3000	.9bd6		20 0f 9c	jsr $9c0f	                jsr L9C0F
3001	.9bd9		ad 33 88	lda $8833	                lda L8833
3002	.9bdc		85 e0		sta $e0		                sta $E0
3003	.9bde		a2 2c		ldx #$2c	                ldx #$2C
3004	.9be0		20 09 9b	jsr $9b09	                jsr L9B09
3005	.9be3		a4 e1		ldy $e1		                ldy $E1
3006	.9be5		20 56 9c	jsr $9c56	                jsr L9C56
3007	.9be8		ac 32 88	ldy $8832	                ldy L8832
3008	.9beb		ad 33 88	lda $8833	                lda L8833
3009	.9bee		85 e1		sta $e1		                sta $E1
3010	.9bf0		a2 37		ldx #$37	                ldx #$37
3011	.9bf2		20 51 9c	jsr $9c51	                jsr L9C51
3012	.9bf5		80 15		bra $9c0c	                bra L9C0C

3014	.9bf7						L9BF7;
3015	.9bf7		a0 14		ldy #$14	                ldy #$14
3016	.9bf9		a2 24		ldx #$24	                ldx #$24
3017	.9bfb		20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
3018	.9bfe		8c 32 88	sty $8832	                sty L8832
3019	.9c01		a0 20		ldy #$20	                ldy #$20
3020	.9c03		20 0f 9c	jsr $9c0f	                jsr L9C0F
3021	.9c06		ad 32 88	lda $8832	                lda L8832
3022	.9c09		20 4d 9c	jsr $9c4d	                jsr L9C4D
3023	.9c0c						L9C0C:
3024	.9c0c		4c e4 da	jmp $dae4	                jmp LDAE4

3026	.9c0f						L9C0F:
3027	.9c0f		20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
3028	.9c12		8e 30 88	stx $8830	                stx L8830
3029	.9c15		ae 32 88	ldx $8832	                ldx L8832
3030	.9c18		20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
3031	.9c1b		8c 32 88	sty $8832	                sty L8832
3032	.9c1e		8e 31 88	stx $8831	                stx L8831
3033	.9c21		ac 30 88	ldy $8830	                ldy L8830
3034	.9c24		a2 fc		ldx #$fc	                ldx #$FC
3035	.9c26						L9C26:
3036	.9c26		b9 00 03	lda $0300,y	                lda $0300,y
3037	.9c29		9d 46 02	sta $0246,x	                sta vduv.workspace._42-$fc,x
3038	.9c2c		9d 4a 02	sta $024a,x	                sta vduv.workspace._46-$fc,x
3039	.9c2f		c8		iny		                iny
3040	.9c30		e8		inx		                inx
3041	.9c31		d0 f3		bne $9c26	                bne L9C26
3042	.9c33		ac 30 88	ldy $8830	                ldy L8830
3043	.9c36		ad 32 88	lda $8832	                lda L8832
3044	.9c39		85 e1		sta $e1		                sta $E1
3045	.9c3b		a2 37		ldx #$37	                ldx #$37
3046	.9c3d		20 09 9b	jsr $9b09	                jsr L9B09
3047	.9c40		ac 30 88	ldy $8830	                ldy L8830
3048	.9c43		ad 31 88	lda $8831	                lda L8831
3049	.9c46		20 4d 9c	jsr $9c4d	                jsr L9C4D
3050	.9c49		ac 31 88	ldy $8831	                ldy L8831
3051	.9c4c		60		rts		                rts

3053	.9c4d						L9C4D:
3054	.9c4d		85 e0		sta $e0		                sta $E0
3055	.9c4f		a2 2c		ldx #$2c	                ldx #$2C
3056	.9c51						L9C51:
3057	.9c51		20 09 9b	jsr $9b09	                jsr L9B09
3058	.9c54		a4 e0		ldy $e0		                ldy $E0
3059	.9c56						L9C56:
3060	.9c56		5a		phy		                phy
3061	.9c57		b9 02 03	lda $0302,y	                lda $0302,y
3062	.9c5a		cd 44 03	cmp $0344	                cmp $0344
3063	.9c5d		d0 08		bne $9c67	                bne L9C67
3064	.9c5f		b9 03 03	lda $0303,y	                lda $0303,y
3065	.9c62		cd 45 03	cmp $0345	                cmp $0345
3066	.9c65		f0 39		beq $9ca0	                beq L9CA0
3067	.9c67						L9C67:
3068	.9c67		a2 2c		ldx #$2c	                ldx #$2C
3069	.9c69		20 c0 9c	jsr $9cc0	                jsr L9CC0
3070	.9c6c		a2 37		ldx #$37	                ldx #$37
3071	.9c6e		20 c0 9c	jsr $9cc0	                jsr L9CC0
3072	.9c71		20 e4 da	jsr $dae4	                jsr LDAE4
3073	.9c74		a2 37		ldx #$37	                ldx #$37
3074	.9c76		20 26 d7	jsr $d726	                jsr LD726
3075	.9c79		a2 2c		ldx #$2c	                ldx #$2C
3076	.9c7b		20 26 d7	jsr $d726	                jsr LD726
3077	.9c7e		a0 37		ldy #$37	                ldy #$37
3078	.9c80		20 cc d5	jsr $d5cc	                jsr sortVDUVariableWords
3079	.9c83		da		phx		                phx
3080	.9c84		a2 fc		ldx #$fc	                ldx #$FC
3081	.9c86						L9C86:
3082	.9c86		b9 00 03	lda $0300,y	                lda $0300,y
3083	.9c89		9d 4a 02	sta $024a,x	                sta vduv.workspace._46-$fc,x
3084	.9c8c		c8		iny		                iny
3085	.9c8d		e8		inx		                inx
3086	.9c8e		d0 f6		bne $9c86	                bne L9C86
3087	.9c90		fa		plx		                plx
3088	.9c91		a0 fc		ldy #$fc	                ldy #$FC
3089	.9c93						L9C93:
3090	.9c93		bd 00 03	lda $0300,x	                lda $0300,x
3091	.9c96		99 46 02	sta $0246,y	                sta vduv.workspace._42-$fc,y
3092	.9c99		e8		inx		                inx
3093	.9c9a		c8		iny		                iny
3094	.9c9b		d0 f6		bne $9c93	                bne L9C93
3095	.9c9d		7a		ply		                ply
3096	.9c9e		80 b6		bra $9c56	                bra L9C56

3098	.9ca0						L9CA0:
3099	.9ca0		a9 2c		lda #$2c	                lda #$2C
3100	.9ca2		a6 e0		ldx $e0		                ldx $E0
3101	.9ca4		20 ac 9c	jsr $9cac	                jsr L9CAC
3102	.9ca7		7a		ply		                ply
3103	.9ca8		a9 37		lda #$37	                lda #$37
3104	.9caa		a6 e1		ldx $e1		                ldx $E1
3105	.9cac						L9CAC:
3106	.9cac		85 de		sta $de		                sta $DE
3107	.9cae		bd 02 03	lda $0302,x	                lda vduv.graphicsWindowPixelsBottom+0,x
3108	.9cb1		d9 02 03	cmp $0302,y	                cmp vduv.graphicsWindowPixelsBottom+0,y
3109	.9cb4		d0 08		bne $9cbe	                bne L9CBE
3110	.9cb6		bd 03 03	lda $0303,x	                lda vduv.graphicsWindowPixelsBottom+1,x
3111	.9cb9		d9 03 03	cmp $0303,y	                cmp vduv.graphicsWindowPixelsBottom+1,y
3112	.9cbc		f0 05		beq $9cc3	                beq L9CC3
3113	.9cbe						L9CBE:
3114	.9cbe		a6 de		ldx $de		                ldx $DE
3115	.9cc0						L9CC0:
3116	.9cc0		20 1d d7	jsr $d71d	                jsr LD71D
3117	.9cc3						L9CC3:
3118	.9cc3		bd 00 03	lda $0300,x	                lda $0300,x
3119	.9cc6		cd 42 03	cmp $0342	                cmp $0342
3120	.9cc9		bd 01 03	lda $0301,x	                lda $0301,x
3121	.9ccc		ed 43 03	sbc $0343	                sbc $0343
3122	.9ccf		10 0d		bpl $9cde	                bpl L9CDE
3123	.9cd1		bd 00 03	lda $0300,x	                lda $0300,x
3124	.9cd4		8d 42 03	sta $0342	                sta $0342
3125	.9cd7		bd 01 03	lda $0301,x	                lda $0301,x
3126	.9cda		8d 43 03	sta $0343	                sta $0343
3127	.9cdd		60		rts		                rts

3129	.9cde						L9CDE:
3130	.9cde		ad 46 03	lda $0346	                lda $0346
3131	.9ce1		dd 00 03	cmp $0300,x	                cmp $0300,x
3132	.9ce4		ad 47 03	lda $0347	                lda $0347
3133	.9ce7		fd 01 03	sbc $0301,x	                sbc $0301,x
3134	.9cea		10 0c		bpl $9cf8	                bpl L9CF8
3135	.9cec		bd 00 03	lda $0300,x	                lda $0300,x
3136	.9cef		8d 46 03	sta $0346	                sta $0346
3137	.9cf2		bd 01 03	lda $0301,x	                lda $0301,x
3138	.9cf5		8d 47 03	sta $0347	                sta $0347
3139	.9cf8						L9CF8:
3140	.9cf8		60		rts		                rts

3142	.9cf9						L9CF9:
3143	.9cf9		20 a1 dd	jsr $dda1	                jsr LDDA1
3144	.9cfc		9c 36 03	stz $0336	                stz $0336
3145	.9cff		9c 37 03	stz $0337	                stz $0337
3146	.9d02		20 b0 dc	jsr $dcb0	                jsr LDCB0
3147	.9d05		d0 4f		bne $9d56	                bne L9D56
3148	.9d07		20 1c dc	jsr $dc1c	                jsr LDC1C
3149	.9d0a						L9D0A:
3150	.9d0a		24 ff		bit $ff		                bit $FF
3151	.9d0c		30 48		bmi $9d56	                bmi L9D56
3152	.9d0e		ad 36 03	lda $0336	                lda $0336
3153	.9d11		cd 37 03	cmp $0337	                cmp $0337
3154	.9d14		f0 40		beq $9d56	                beq L9D56
3155	.9d16		1a		inc a		                inc a
3156	.9d17		8d 36 03	sta $0336	                sta $0336
3157	.9d1a		aa		tax		                tax
3158	.9d1b		bd 00 84	lda $8400,x	                lda L8400,x
3159	.9d1e		8d 28 03	sta $0328	                sta $0328
3160	.9d21		bd 00 85	lda $8500,x	                lda L8500,x
3161	.9d24		8d 2c 03	sta $032c	                sta $032C
3162	.9d27		bd 00 86	lda $8600,x	                lda L8600,x
3163	.9d2a		48		pha		                pha
3164	.9d2b		4a		lsr a		                lsr a
3165	.9d2c		4a		lsr a		                lsr a
3166	.9d2d		8d 29 03	sta $0329	                sta $0329
3167	.9d30		68		pla		                pla
3168	.9d31		29 03		and #$03	                and #$03
3169	.9d33		8d 2d 03	sta $032d	                sta $032D
3170	.9d36		bd 00 87	lda $8700,x	                lda L8700,x
3171	.9d39		9c 2b 03	stz $032b	                stz $032B
3172	.9d3c		cd 06 03	cmp $0306	                cmp $0306
3173	.9d3f		f0 0a		beq $9d4b	                beq L9D4B
3174	.9d41		85 e0		sta $e0		                sta $E0
3175	.9d43		1a		inc a		                inc a
3176	.9d44		20 48 dc	jsr $dc48	                jsr LDC48
3177	.9d47		b0 0d		bcs $9d56	                bcs L9D56
3178	.9d49		a5 e0		lda $e0		                lda $E0
3179	.9d4b						L9D4B:
3180	.9d4b		cd 02 03	cmp $0302	                cmp $0302
3181	.9d4e		f0 ba		beq $9d0a	                beq L9D0A
3182	.9d50		3a		dec a		                dec a
3183	.9d51		20 48 dc	jsr $dc48	                jsr LDC48
3184	.9d54		90 b4		bcc $9d0a	                bcc L9D0A
3185	.9d56						L9D56:
3186	.9d56		60		rts		                rts

3188	.9d57						L9D57:
3189	.9d57		ad 32 03	lda $0332	                lda $0332
3190	.9d5a		a8		tay		                tay
3191	.9d5b		cd 2c 03	cmp $032c	                cmp $032C
3192	.9d5e		ad 33 03	lda $0333	                lda $0333
3193	.9d61		aa		tax		                tax
3194	.9d62		ed 2d 03	sbc $032d	                sbc $032D
3195	.9d65		b0 0a		bcs $9d71	                bcs L9D71
3196	.9d67		c8		iny		                iny
3197	.9d68		d0 01		bne $9d6b	                bne L9D6B
3198	.9d6a		e8		inx		                inx
3199	.9d6b						L9D6B:
3200	.9d6b		8c 2e 03	sty $032e	                sty $032E
3201	.9d6e		8e 2f 03	stx $032f	                stx $032F
3202	.9d71						L9D71:
3203	.9d71		60		rts		                rts

3205							;-------------------------------------------------------------------------

3213							;-------------------------------------------------------------------------

3221							;-------------------------------------------------------------------------
3222							;
3223							; Read byte from EEPROM by 0-based CMOS RAM offset (readCMOSByte) or
3224							; RTC register index (readRTCByte).
3225							;
3226							; (The number of RTC registers on the Compact is 0, so readRTCByte and
3227							; readCMOSByte use the same indexes. Nevertheless, the two routines
3228							; behave differently... presumably I still haven't quite got this bit
3229							; right.)
3230							;
3231							; entry:
3232							;
3233							; X = address to read from
3234							;
3235							; exit:
3236							;
3237							; A = Y = byte read

3304							;-------------------------------------------------------------------------

3332							;-------------------------------------------------------------------------
3333							;
3334							; Transmit 1 bit over the I2C bus.
3335							;
3336							; preserves: P
3337							;

3350							;-------------------------------------------------------------------------
3351							;
3352							; Set the I2C clock line high.
3353							;
3354							; preserves: A/X/Y/C
3355							;

3367							;-------------------------------------------------------------------------
3368							;
3369							; Set the I2C clock line low.
3370							;
3371							; preserves: A/X/Y/C
3372							;

3383							;-------------------------------------------------------------------------
3384							;
3385							; "A change in the state of the data line, from HIGH to LOW, while the
3386							; clock is HIGH, defines the START condition."
3387							;
3388							; preserves: X/Y/P

3405							;-------------------------------------------------------------------------
3406							;
3407							; Set the I2C data line low.
3408							;
3409							; preserves: A/X/Y/C
3410							;

3421							;-------------------------------------------------------------------------

3454							;-------------------------------------------------------------------------
3455							;
3456							; Set the I2C data line to a particular value.
3457							;
3458							; entry:
3459							;
3460							; C = state of signal: 1 = high, 0 = low
3461							;
3462							; preserves: C

3470							;-------------------------------------------------------------------------
3471							;
3472							; Set the I2C data line high.
3473							;
3474							; preserves: A/X/Y/C
3475							;

3486							;-------------------------------------------------------------------------
3487							;
3488							; Transmits 1 byte/8 bits over the I2C bus.
3489							;
3490							; entry: A = byte to transmit

3507							;-------------------------------------------------------------------------

3614							;-------------------------------------------------------------------------

3629							;-------------------------------------------------------------------------

3662							;-------------------------------------------------------------------------

3668							;-------------------------------------------------------------------------

3674							;-------------------------------------------------------------------------
3675							;
3676							; Utils/Terminal ROM service entry point.
3677							;
3678	.9d72						utilsServiceEntryPoint:
3688	.9d72		c9 fe		cmp #$fe	                cmp #romServiceCallTubeSystemPostInitialisation
3689	.9d74		90 56		bcc $9dcc	                bcc handleNonTube
3690	.9d76		d0 14		bne $9d8c	                bne handleTubeMainInitialisation
3691	.9d78						handleTubeSystemPostInitialisation:
3692	.9d78		c0 00		cpy #$00	                cpy #$00
3693	.9d7a		f0 50		beq $9dcc	                beq handleNonTube

3695							                ; [Tube p28] - write out the startup message that the
3696							                ; second processor has been stuck trying to write out.
3697	.9d7c						writeSecondProcessorStartupMessageLoop:
3698	.9d7c		2c e0 fe	bit $fee0	                bit tube.status1
3699	.9d7f		10 fb		bpl $9d7c	                bpl writeSecondProcessorStartupMessageLoop
3700	.9d81		ad e1 fe	lda $fee1	                lda tube.data1
3701	.9d84		f0 44		beq $9dca	                beq L9DCA
3702	.9d86		20 ee ff	jsr $ffee	                jsr OSWRCH
3703	.9d89		4c 7c 9d	jmp $9d7c	                jmp writeSecondProcessorStartupMessageLoop

3705	.9d8c						handleTubeMainInitialisation:
3706	.9d8c		a9 7b		lda #$7b	                lda #<tubeHost.eventHandler
3707	.9d8e		8d 20 02	sta $0220	                sta EVENTV+0
3708	.9d91		a9 06		lda #$06	                lda #>tubeHost.eventHandler
3709	.9d93		8d 21 02	sta $0221	                sta EVENTV+1
3710	.9d96		a9 16		lda #$16	                lda #<tubeHostBrkHandler
3711	.9d98		8d 02 02	sta $0202	                sta BRKV+0
3712	.9d9b		a9 00		lda #$00	                lda #>tubeHostBrkHandler
3713	.9d9d		8d 03 02	sta $0203	                sta BRKV+1
3714	.9da0		a9 8e		lda #$8e	                lda #tube.status1.S|tube.status1.M|tube.status1.J|tube.status1.I;
3715	.9da2		8d e0 fe	sta $fee0	                sta tube.status1

3717							                ; Copy Tube host code into main RAM.
3718	.9da5		a0 00		ldy #$00	                ldy #$00
3719	.9da7						-
3720	.9da7		b9 6e ab	lda $ab6e,y	                lda tubeHost.codePage0,y
3721	.9daa		99 00 04	sta $0400,y	                sta tubeHostAddr+0*256,y
3722	.9dad		b9 65 ac	lda $ac65,y	                lda tubeHost.codePages12,y
3723	.9db0		99 00 05	sta $0500,y	                sta tubeHostAddr+1*256,y
3724	.9db3		b9 65 ad	lda $ad65,y	                lda tubeHost.codePages12+256,y
3725	.9db6		99 00 06	sta $0600,y	                sta tubeHostAddr+2*256,y
3726	.9db9		88		dey		                dey
3727	.9dba		d0 eb		bne $9da7	                bne -

3729	.9dbc		20 1f 04	jsr $041f	                jsr tubeHost.resetTubeClaim

3731							                ; Copy BRK handler into zero page.
3736	.9dbf		a2 41		ldx #$41	                ldx #size(tubeHost.zeroPageCode)
3738	.9dc1						-
3739	.9dc1		bd 2d ab	lda $ab2d,x	                lda tubeHost.zeroPageCode,x

3741							                ; can't use .forcew due to the comma in the operand
3745	.9dc4		9d 16 00	sta $0016,x	                sta @w tubeZeroPageCodeAddr,x
3747	.9dc7		ca		dex		                dex
3748	.9dc8		10 f7		bpl $9dc1	                bpl -

3751	.9dca						L9DCA:
3752	.9dca		a9 00		lda #$00	                lda #$00                     ; Claim call and return

3754	.9dcc						handleNonTube:
3765	.9dcc		c9 12		cmp #$12	                cmp #romServiceCallInitialiseFilingSystem
3766	.9dce		d0 1a		bne $9dea	                bne handleBreakInstruction
3771	.9dd0		c0 04		cpy #$04	                cpy #fsTapeOrROMMax+1
3772	.9dd2		b0 42		bcs $9e16	                bcs L9E16                    ; taken if not tape/rom
3773	.9dd4		c0 00		cpy #$00	                cpy #fsNone
3774	.9dd6		f0 3e		beq $9e16	                beq L9E16                    ; taken if no FS
3775	.9dd8		a2 03		ldx #$03	                ldx #3                       ; assume tape, 300 baud tape
3776	.9dda		98		tya		                tya                          ; Y = FS number
3777	.9ddb		c9 02		cmp #$02	                cmp #fs300BaudTape
3778	.9ddd		b0 04		bcs $9de3	                bcs L9DE3              ; taken if 300 baud tape or ROM
3779	.9ddf		a2 00		ldx #$00	                ldx #$00               ; X=0 for 1200 baud
3780	.9de1		69 02		adc #$02	                adc #$02            ; adjust so that the result of the
3781							                                    ; following adc will be $8c
3782	.9de3						L9DE3:
3783	.9de3		69 89		adc #$89	                adc #$89                     ; Convert to TAPE/ROM select value
3785	.9de5		20 c0 ed	jsr $edc0	                jsr selectROMOrTAPEByOSBYTE
3786	.9de8		80 e0		bra $9dca	                bra L9DCA                    ; Jump to claim and return

3788	.9dea						handleBreakInstruction:
3789	.9dea		c9 06		cmp #$06	                cmp #romServiceCallBreakInstruction
3790	.9dec		d0 29		bne $9e17	                bne handleCloseAllOpenFiles
3791	.9dee		ad dd df	lda $dfdd	                lda hazel.hasACCCONChanged ; Skip if ACCCON not changed
3792	.9df1		f0 09		beq $9dfc	                beq closeMoveSrcHandle
3793	.9df3		9c dd df	stz $dfdd	                stz hazel.hasACCCONChanged ; Clear ACCCON changed flag
3794	.9df6		ad dc df	lda $dfdc	                lda hazel.oldACCCON        ; Restore ACCCON
3795	.9df9		8d 34 fe	sta $fe34	                sta ACCCON
3796	.9dfc						closeMoveSrcHandle:
3797	.9dfc		5a		phy		                phy
3798	.9dfd		ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle
3799	.9e00		f0 06		beq $9e08	                beq closeMoveDestHandle
3800	.9e02		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
3801	.9e05		20 0f 8f	jsr $8f0f	                jsr closeFile
3802	.9e08						closeMoveDestHandle:
3803	.9e08		ac d5 df	ldy $dfd5	                ldy hazel.moveDestHandle
3804	.9e0b		f0 06		beq $9e13	                beq L9E13
3805	.9e0d		9c d5 df	stz $dfd5	                stz hazel.moveDestHandle
3806	.9e10		20 0f 8f	jsr $8f0f	                jsr closeFile
3807	.9e13						L9E13:
3808	.9e13		7a		ply		                ply
3809	.9e14		a9 06		lda #$06	                lda #romServiceCallBreakInstruction ; restore A
3810	.9e16						L9E16:
3811	.9e16		60		rts		                rts
3812	.9e17						handleCloseAllOpenFiles:
3813	.9e17		c9 26		cmp #$26	                cmp #romServiceCallCloseAllOpenFiles
3814	.9e19		d0 1d		bne $9e38	                bne handleHelp
3816	.9e1b		a9 8d		lda #$8d	                lda #$8D
3817	.9e1d		20 2c 9e	jsr $9e2c	                jsr L9E2C
3818	.9e20		a2 03		ldx #$03	                ldx #$03
3819	.9e22		a9 04		lda #$04	                lda #$04
3820	.9e24		24 c6		bit $c6		                bit $C6
3821	.9e26		f0 02		beq $9e2a	                beq L9E2A
3822	.9e28		a2 00		ldx #$00	                ldx #$00
3823	.9e2a						L9E2A:
3824	.9e2a		a9 8c		lda #$8c	                lda #$8C
3825	.9e2c						L9E2C:
3827	.9e2c		20 c0 ed	jsr $edc0	                jsr selectROMOrTAPEByOSBYTE
3828	.9e2f		a9 00		lda #$00	                lda #$00
3829	.9e31		a8		tay		                tay
3830	.9e32		20 f9 a1	jsr $a1f9	                jsr osfindTapeOrROM
3831	.9e35		a9 26		lda #$26	                lda #$26
3832	.9e37		60		rts		                rts

3834	.9e38						handleHelp
3835	.9e38		c9 09		cmp #$09	                cmp #romServiceCallHelp
3837	.9e3a		d0 53		bne $9e8f	                bne handleTerminal
3841	.9e3c		5a		phy		                phy
3842	.9e3d		b1 f2		lda ($f2),y	                lda ($F2),y
3843	.9e3f		c9 0d		cmp #$0d	                cmp #$0D
3844	.9e41		d0 1e		bne $9e61	                bne L9E61
3845	.9e43		20 fc 9e	jsr $9efc	                jsr L9EFC
3846	.9e46		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
3847	>9e49		20 20 4d 4f 53 0d		                .text "  MOS",13
3849	>9e4f		0d 54 45 52 4d 49 4e 41		                .text 13,"TERMINAL 1.20",13
	>9e57		4c 20 31 2e 32 30 0d
3861	>9e5e		00				                .text 0
3862	.9e5f		80 2a		bra $9e8b	                bra L9E8B
3863	.9e61						L9E61:
3864	.9e61		a2 02		ldx #$02	                ldx #size(mosHelpSubject)-1
3865	.9e63						L9E63:
3866	.9e63		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
3867	.9e65		c9 2e		cmp #$2e	                cmp #'.'
3868	.9e67		f0 2c		beq $9e95	                beq L9E95
3869	.9e69		29 df		and #$df	                and #$DF
3870	.9e6b		dd 92 9e	cmp $9e92,x	                cmp mosHelpSubject,x
3871	.9e6e		d0 0b		bne $9e7b	                bne L9E7B
3872	.9e70		c8		iny		                iny
3873	.9e71		ca		dex		                dex
3874	.9e72		10 ef		bpl $9e63	                bpl L9E63
3875	.9e74		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
3876	.9e76		20 71 ea	jsr $ea71	                jsr isLetter
3877	.9e79		b0 1a		bcs $9e95	                bcs L9E95
3878	.9e7b						L9E7B:
3879	.9e7b		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
3880	.9e7d		c9 0d		cmp #$0d	                cmp #13
3881	.9e7f		f0 0a		beq $9e8b	                beq L9E8B
3882	.9e81		c8		iny		                iny
3883	.9e82		c9 20		cmp #$20	                cmp #' '
3884	.9e84		d0 f5		bne $9e7b	                bne L9E7B
3885	.9e86		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
3886	.9e89		d0 d6		bne $9e61	                bne L9E61
3887	.9e8b						L9E8B:
3888	.9e8b		7a		ply		                ply
3889	.9e8c		a9 09		lda #$09	                lda #romServiceCallHelp
3890	.9e8e						LA304:
3891	.9e8e		60		rts		                rts

3894	.9e8f						handleTerminal:
3895	.9e8f		4c 19 ae	jmp $ae19	                jmp terminalServiceEntryPoint

3898	>9e92		53 4f 4d			mosHelpSubject: .text "SOM"

3900	.9e95						L9E95:
3901	.9e95		20 fc 9e	jsr $9efc	                jsr L9EFC
3902	.9e98		a9 68		lda #$68	                lda #<mosCommandTable
3903	.9e9a		85 b0		sta $b0		                sta terminalHELPWorkspace.tablePtr+0
3904	.9e9c		a9 83		lda #$83	                lda #>mosCommandTable
3905	.9e9e		85 b1		sta $b1		                sta terminalHELPWorkspace.tablePtr+1
3906	.9ea0						L9EA0:
3907	.9ea0		b2 b0		lda ($b0)	                lda (terminalHELPWorkspace.tablePtr)
3908	.9ea2		30 50		bmi $9ef4	                bmi L9EF4
3913	.9ea4		20 0c 9f	jsr $9f0c	                jsr printSpace
3914	.9ea7		20 0c 9f	jsr $9f0c	                jsr printSpace
3915	.9eaa		b2 b0		lda ($b0)	                lda (terminalHELPWorkspace.tablePtr)
3916	.9eac						L9EAC:
3921	.9eac		20 0e 9f	jsr $9f0e	                jsr L9F0E
3922	.9eaf						LA711:
3923	.9eaf		e6 b0		inc $b0		                inc terminalHELPWorkspace.tablePtr+0
3924	.9eb1		d0 02		bne $9eb5	                bne L9EB5
3925	.9eb3		e6 b1		inc $b1		                inc terminalHELPWorkspace.tablePtr+1
3926	.9eb5						L9EB5:
3927	.9eb5		b2 b0		lda ($b0)	                lda (terminalHELPWorkspace.tablePtr)
3928	.9eb7		10 f3		bpl $9eac	                bpl L9EAC

3930							                ; add 4 to tablePtr
3931	.9eb9		a9 04		lda #$04	                lda #$04
3932	.9ebb		18		clc		                clc
3933	.9ebc		65 b0		adc $b0		                adc terminalHELPWorkspace.tablePtr+0
3934	.9ebe		85 b0		sta $b0		                sta terminalHELPWorkspace.tablePtr+0
3935	.9ec0		90 02		bcc $9ec4	                bcc +
3936	.9ec2		e6 b1		inc $b1		                inc terminalHELPWorkspace.tablePtr+1
3937	.9ec4						+
3938	.9ec4		20 5c e2	jsr $e25c	                jsr LE25C
3939	.9ec7		e0 13		cpx #$13	                cpx #19
3940	.9ec9		f0 24		beq $9eef	                beq L9EEF
3941	.9ecb						L9ECB:
3942	.9ecb		20 52 e2	jsr $e252	                jsr getTextCursorPositionWithColumn81
3943	.9ece		8a		txa		                txa
3944	.9ecf		f0 cf		beq $9ea0	                beq L9EA0
3945	.9ed1		e0 14		cpx #$14	                cpx #20
3946	.9ed3		f0 cb		beq $9ea0	                beq L9EA0
3947	.9ed5		90 0d		bcc $9ee4	                bcc L9EE4
3948	.9ed7		e0 28		cpx #$28	                cpx #40
3949	.9ed9		f0 c5		beq $9ea0	                beq L9EA0
3950	.9edb		b0 0c		bcs $9ee9	                bcs L9EE9
3951	.9edd		20 5c e2	jsr $e25c	                jsr LE25C
3952	.9ee0		e0 27		cpx #$27	                cpx #39
3953	.9ee2		f0 0b		beq $9eef	                beq L9EEF
3954	.9ee4						L9EE4:
3955	.9ee4		20 0c 9f	jsr $9f0c	                jsr printSpace
3956	.9ee7		80 e2		bra $9ecb	                bra L9ECB

3958	.9ee9						L9EE9:
3959	.9ee9		e0 3c		cpx #$3c	                cpx #60
3960	.9eeb		90 f7		bcc $9ee4	                bcc L9EE4
3961	.9eed		f0 b1		beq $9ea0	                beq L9EA0
3962	.9eef						L9EEF:
3963	.9eef		20 1e 9f	jsr $9f1e	                jsr printNewLine
3964	.9ef2		80 ac		bra $9ea0	                bra L9EA0

3966	.9ef4						L9EF4:
3967	.9ef4		20 52 e2	jsr $e252	                jsr getTextCursorPositionWithColumn81
3968	.9ef7		8a		txa		                txa
3969	.9ef8		f0 91		beq $9e8b	                beq L9E8B
3970	.9efa		80 f3		bra $9eef	                bra L9EEF

3972	.9efc						L9EFC:
3973	.9efc		5a		phy		                phy
3974	.9efd		20 58 a9	jsr $a958	                jsr alwaysPrintFollowingMessage
3975	>9f00		0d 4f 53 20 33 2e 32 30		                .text 13,versionString,13,0
	>9f08		0d 00
3976	.9f0a		7a		ply		                ply
3977	.9f0b		60		rts		                rts

3979							;-------------------------------------------------------------------------
3980							;
3981	.9f0c						printSpace:
3982	.9f0c		a9 20		lda #$20	                lda #$20
3983	.9f0e						L9F0E:
3984	.9f0e		da		phx		                phx
3985	.9f0f		a6 b0		ldx $b0		                ldx $B0
3986	.9f11		da		phx		                phx
3987	.9f12		a6 b1		ldx $b1		                ldx $B1
3988	.9f14		20 ee ff	jsr $ffee	                jsr OSWRCH
3989	.9f17						restoreB1AndB0:
3990	.9f17		86 b1		stx $b1		                stx $B1
3991	.9f19		fa		plx		                plx
3992	.9f1a		86 b0		stx $b0		                stx $B0
3993	.9f1c		fa		plx		                plx
3994	.9f1d		60		rts		                rts

3996							;-------------------------------------------------------------------------

3998	.9f1e						printNewLine:
3999	.9f1e		da		phx		                phx
4000	.9f1f		a6 b0		ldx $b0		                ldx $B0
4001	.9f21		da		phx		                phx
4002	.9f22		a6 b1		ldx $b1		                ldx $B1
4003	.9f24		20 e7 ff	jsr $ffe7	                jsr OSNEWL
4004	.9f27		80 ee		bra $9f17	                bra restoreB1AndB0

4006							;-------------------------------------------------------------------------

4008							; TAPE/ROM OSARGS handler
4009							; =======================
4010	.9f29						osargsTapeOrROM:
4011	.9f29		c0 00		cpy #$00	                cpy #$00       ; Handle<>0 - read/write open file info
4012	.9f2b		d0 0e		bne $9f3b	                bne L9F3B
4013	.9f2d		09 00		ora #$00	                ora #$00 ; A<>0 - read/write filing system info - exit
4014	.9f2f		d0 09		bne $9f3a	                bne L9F3A

4016							; A=0, Y=0 - read current filing system
4017							; -------------------------------------
4018	.9f31		a9 03		lda #$03	                lda #$03                     ; Prepare A=ROMFS
4020	.9f33		2c 47 02	bit $0247	                bit cfsRFSFSSwitch           ; If TAPE/ROM switch
4021	.9f36		d0 02		bne $9f3a	                bne L9F3A
4022	.9f38		25 c6		and $c6		                and $C6           ; Mask with speed to give A=2 or A=1

4025							; TAPE/ROM FSC 6 - shut down FS
4026							; TAPE/ROM FSC 8 - OS command
4027							; TAPE/ROM FSC 10 - *INFO
4028							; -----------------------------
4029	.9f3a						L9F3A:
4030	.9f3a		60		rts		                rts

4032							; OSARGS handle<>0 - red/write open file info
4033							; -------------------------------------------
4034	.9f3b						L9F3B:
4035	.9f3b		c9 00		cmp #$00	                cmp #$00                     ; Not =PTR, exit unsupported
4036	.9f3d		d0 fb		bne $9f3a	                bne L9F3A
4037	.9f3f		c0 02		cpy #$02	                cpy #$02                     ; =PTR#2 - read PTR on output handle
4038	.9f41		f0 1d		beq $9f60	                beq L9F60

4040							; Read PTR on CFS/RFS input file
4041							; ------------------------------
4042	.9f43		a9 01		lda #$01	                lda #$01                     ; Check if this is input channel and is open
4043	.9f45		20 68 aa	jsr $aa68	                jsr LAA68
4044	.9f48		ad 9e 03	lda $039e	                lda $039E
4045	.9f4b		95 00		sta $00,x	                sta $00,x
4046	.9f4d		5a		phy		                phy
4047	.9f4e		ad de 03	lda $03de	                lda $03DE
4048	.9f51		ac dd 03	ldy $03dd	                ldy $03DD
4049	.9f54		d0 01		bne $9f57	                bne L9F57
4050	.9f56		3a		dec a		                dec a
4051	.9f57						L9F57:
4052	.9f57		88		dey		                dey
4053	.9f58		94 01		sty $01,x	                sty $01,x
4054	.9f5a		7a		ply		                ply
4055	.9f5b						L9F5B:
4056	.9f5b		95 02		sta $02,x	                sta $02,x
4057	.9f5d		74 03		stz $03,x	                stz $03,x
4058	.9f5f		60		rts		                rts

4060							; Read PTR on TAPE output file
4061							; ----------------------------
4062	.9f60						L9F60:
4063	.9f60		a9 02		lda #$02	                lda #$02                     ; Check if this is output channel and is open
4064	.9f62		20 68 aa	jsr $aa68	                jsr LAA68
4065	.9f65		ad 9d 03	lda $039d	                lda $039D                    ; Copy PTR to control block
4066	.9f68		95 00		sta $00,x	                sta $00,x
4067	.9f6a		ad 94 03	lda $0394	                lda $0394
4068	.9f6d		95 01		sta $01,x	                sta $01,x
4069	.9f6f		ad 95 03	lda $0395	                lda $0395
4070	.9f72		80 e7		bra $9f5b	                bra L9F5B

4072							;-------------------------------------------------------------------------

4074							; TAPE/ROM FSC dispatch table
4075							; ---------------------------

4077							tapeAndROMFSCRoutine: .macro addr,shift
4079							                .endmacro

4081							tapeAndROMFSCRoutinesTable: .macro shift
4094							                .endmacro

4096	.9f74						L9F74:
4078	>9f74		21				                .byte ((LA422)-1)>>(0)&$ff
4078	>9f75		f0				                .byte ((LA4F1)-1)>>(0)&$ff
4078	>9f76		0f				                .byte ((LA110)-1)>>(0)&$ff
4078	>9f77		28				                .byte ((LA129)-1)>>(0)&$ff
4078	>9f78		0f				                .byte ((LA110)-1)>>(0)&$ff
4078	>9f79		67				                .byte ((LA168)-1)>>(0)&$ff
4078	>9f7a		39				                .byte ((L9F3A)-1)>>(0)&$ff
4078	>9f7b		9d				                .byte ((L9F9E)-1)>>(0)&$ff
4078	>9f7c		39				                .byte ((L9F3A)-1)>>(0)&$ff
4078	>9f7d		54				                .byte ((LA155)-1)>>(0)&$ff
4078	>9f7e		39				                .byte ((L9F3A)-1)>>(0)&$ff
4078	>9f7f		12				                .byte ((LA113)-1)>>(0)&$ff
4098	.9f80						L9F80:
4078	>9f80		a4				                .byte ((LA422)-1)>>(8)&$ff
4078	>9f81		a4				                .byte ((LA4F1)-1)>>(8)&$ff
4078	>9f82		a1				                .byte ((LA110)-1)>>(8)&$ff
4078	>9f83		a1				                .byte ((LA129)-1)>>(8)&$ff
4078	>9f84		a1				                .byte ((LA110)-1)>>(8)&$ff
4078	>9f85		a1				                .byte ((LA168)-1)>>(8)&$ff
4078	>9f86		9f				                .byte ((L9F3A)-1)>>(8)&$ff
4078	>9f87		9f				                .byte ((L9F9E)-1)>>(8)&$ff
4078	>9f88		9f				                .byte ((L9F3A)-1)>>(8)&$ff
4078	>9f89		a1				                .byte ((LA155)-1)>>(8)&$ff
4078	>9f8a		9f				                .byte ((L9F3A)-1)>>(8)&$ff
4078	>9f8b		a1				                .byte ((LA113)-1)>>(8)&$ff

4101							;-------------------------------------------------------------------------

4103							; TAPE/ROM FSC
4104							; ============
4105	.9f8c						fscTapeOrROM:
4106	.9f8c		c9 0c		cmp #$0c	                cmp #$0C                     ; function<12 - exit unchanged
4107	.9f8e		b0 aa		bcs $9f3a	                bcs L9F3A
4108	.9f90		86 bc		stx $bc		                stx $BC                      ; Index into dispatch table
4109	.9f92		aa		tax		                tax
4110	.9f93		bd 80 9f	lda $9f80,x	                lda L9F80,x
4111	.9f96		48		pha		                pha
4112	.9f97		bd 74 9f	lda $9f74,x	                lda L9F74,x
4113	.9f9a		48		pha		                pha
4114	.9f9b		a6 bc		ldx $bc		                ldx $BC
4115	.9f9d		60		rts		                rts

4117							; TAPE/ROM FSC 7 - obtain file handle range
4118							; -----------------------------------------
4119	.9f9e						L9F9E:
4120	.9f9e		a2 03		ldx #$03	                ldx #$03
4121	.9fa0		a0 03		ldy #$03	                ldy #$03
4123	.9fa2		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4124	.9fa5		d0 93		bne $9f3a	                bne L9F3A
4125	.9fa7		88		dey		                dey
4126	.9fa8		a2 01		ldx #$01	                ldx #$01
4128	.9faa		60		rts		                rts

4130	.9fab						L9FAB:
4131	.9fab		68		pla		                pla
4132	.9fac		28		plp		                plp
4133	.9fad		38		sec		                sec
4134	.9fae		60		rts		                rts

4136	.9faf						L9FAF:
4137	.9faf		08		php		                php
4138	.9fb0		48		pha		                pha
4139	.9fb1		20 f3 a9	jsr $a9f3	                jsr LA9F3
4140	.9fb4		ad c2 03	lda $03c2	                lda $03C2
4141	.9fb7		48		pha		                pha
4142	.9fb8		20 02 a5	jsr $a502	                jsr LA502
4143	.9fbb		68		pla		                pla
4144	.9fbc		b0 ed		bcs $9fab	                bcs L9FAB
4145	.9fbe		f0 19		beq $9fd9	                beq L9FD9
4146	.9fc0		a2 03		ldx #$03	                ldx #$03
4147	.9fc2		a9 ff		lda #$ff	                lda #$FF
4148	.9fc4						L9FC4:
4149	.9fc4		48		pha		                pha
4150	.9fc5		bd be 03	lda $03be,x	                lda $03BE,x
4151	.9fc8		95 b0		sta $b0,x	                sta $B0,x
4152	.9fca		68		pla		                pla
4153	.9fcb		35 b0		and $b0,x	                and $B0,x
4154	.9fcd		ca		dex		                dex
4155	.9fce		10 f4		bpl $9fc4	                bpl L9FC4
4156	.9fd0		1a		inc a		                inc a
4157	.9fd1		d0 06		bne $9fd9	                bne L9FD9
4158	.9fd3		20 b1 a9	jsr $a9b1	                jsr LA9B1
4159	.9fd6		4c 4b 93	jmp $934b	                jmp badAddressError

4161	.9fd9						L9FD9:
4162	.9fd9		ad ca 03	lda $03ca	                lda $03CA
4163	.9fdc		4a		lsr a		                lsr a
4164	.9fdd		68		pla		                pla
4165	.9fde		48		pha		                pha
4166	.9fdf		f0 10		beq $9ff1	                beq L9FF1
4167	.9fe1		90 15		bcc $9ff8	                bcc L9FF8
4168	.9fe3						L9FE3:
4169	.9fe3		20 bb a9	jsr $a9bb	                jsr LA9BB
4170	.9fe6		20 ed aa	jsr $aaed	                jsr doFollowingError
4171	>9fe9		d5 4c 6f 63 6b 65 64 00		                .text $d5,"Locked",0
4172	.9ff1						L9FF1:
4173	.9ff1		90 05		bcc $9ff8	                bcc L9FF8
4174	.9ff3		a9 03		lda #$03	                lda #$03
4175	.9ff5		8d 58 02	sta $0258	                sta breakAndESCAPEEffect
4176	.9ff8						L9FF8:
4177	.9ff8		a9 30		lda #$30	                lda #$30
4178	.9ffa		25 bb		and $bb		                and $BB
4179	.9ffc		f0 04		beq $a002	                beq LA002
4180	.9ffe		a5 c1		lda $c1		                lda $C1
4181	.a000						LA000:
4182	.a000		d0 08		bne $a00a	                bne LA00A
4183	.a002						LA002:
4185	.a002		5a		phy		                phy
4186	.a003		20 a4 aa	jsr $aaa4	                jsr initiateCFSRFSHostToParasiteTransfer
4187	.a006		7a		ply		                ply
4189	.a007		20 d2 a6	jsr $a6d2	                jsr LA6D2
4190	.a00a						LA00A:
4191	.a00a		20 a1 a8	jsr $a8a1	                jsr LA8A1
4192	.a00d		d0 57		bne $a066	                bne LA066
4193	.a00f		20 35 aa	jsr $aa35	                jsr LAA35
4194	.a012		2c ca 03	bit $03ca	                bit $03CA
4195	.a015		30 08		bmi $a01f	                bmi LA01F
4196	.a017		20 5b a8	jsr $a85b	                jsr LA85B
4197	.a01a		20 78 a6	jsr $a678	                jsr LA678
4198	.a01d		80 d9		bra $9ff8	                bra L9FF8

4200	.a01f						LA01F:
4201	.a01f		68		pla		                pla                          ; RUN, no control block to update
4202	.a020		f0 33		beq $a055	                beq LA055
4203	.a022		a0 02		ldy #$02	                ldy #$02
4204	.a024						LA024:
4205	.a024		b9 bc 03	lda $03bc,y	                lda $03BC,y                  ; Copy load/exec to control block
4206	.a027		91 c8		sta ($c8),y	                sta ($C8),y
4207	.a029		c8		iny		                iny
4208	.a02a		c0 0a		cpy #$0a	                cpy #$0A
4209	.a02c		d0 f6		bne $a024	                bne LA024
4210	.a02e		ad c8 03	lda $03c8	                lda $03C8                    ; Length b0-b7=Block Length b0-b7
4211	.a031		91 c8		sta ($c8),y	                sta ($C8),y
4212	.a033		c8		iny		                iny
4213	.a034		ad c9 03	lda $03c9	                lda $03C9
4214	.a037		18		clc		                clc
4215	.a038		6d c6 03	adc $03c6	                adc $03C6                    ; Length b8-b15=Block Number+Block Length b8-b15
4216	.a03b		91 c8		sta ($c8),y	                sta ($C8),y
4217	.a03d		c8		iny		                iny
4218	.a03e		a9 00		lda #$00	                lda #$00
4219	.a040		6d c7 03	adc $03c7	                adc $03C7                    ; Length b16-b23=overflow
4220	.a043		91 c8		sta ($c8),y	                sta ($C8),y
4221	.a045		c8		iny		                iny                          ; Length b24-b31=&00
4222	.a046		a9 00		lda #$00	                lda #$00
4223	.a048		91 c8		sta ($c8),y	                sta ($C8),y
4224	.a04a		c8		iny		                iny
4225	.a04b						LA04B:
4226	.a04b		b9 bd 03	lda $03bd,y	                lda $03BD,y                  ; Attrs=&00000000
4227	.a04e		91 c8		sta ($c8),y	                sta ($C8),y
4228	.a050		c8		iny		                iny
4229	.a051		c0 12		cpy #$12	                cpy #$12
4230	.a053		d0 f6		bne $a04b	                bne LA04B
4231	.a055						LA055:
4232	.a055		28		plp		                plp
4233	.a056						LA056:
4234	.a056		20 b1 a9	jsr $a9b1	                jsr LA9B1
4235	.a059						LA059:
4236	.a059		24 ba		bit $ba		                bit $BA                      ; If flag set, skip printing newline
4237	.a05b		30 07		bmi $a064	                bmi LA064
4238	.a05d						LA05D:
4239	.a05d		08		php		                php                          ; Print inline text
4240	.a05e		20 23 a9	jsr $a923	                jsr LA923
4241	>a061		0d				                .byte 13                     ; Could just do JSR OSNEWL
4242	>a062		00				                .byte 0
4243	.a063		28		plp		                plp
4244	.a064						LA064:
4245	.a064		18		clc		                clc
4246	.a065		60		rts		                rts

4248	.a066						LA066:
4249	.a066		20 06 a5	jsr $a506	                jsr LA506
4250	.a069		d0 8d		bne $9ff8	                bne L9FF8
4251	.a06b						LA06B:
4252	.a06b		86 f2		stx $f2		                stx $F2
4253	.a06d		84 f3		sty $f3		                sty $F3
4254	.a06f		a0 00		ldy #$00	                ldy #$00
4255	.a071		20 6d f2	jsr $f26d	                jsr gsinitForFilenameParsing
4256	.a074		a2 00		ldx #$00	                ldx #$00
4257	.a076						LA076:
4258	.a076		20 7f f2	jsr $f27f	                jsr gsreadEntryPoint
4259	.a079		b0 0d		bcs $a088	                bcs LA088
4260	.a07b		f0 08		beq $a085	                beq LA085
4261	.a07d		9d d2 03	sta $03d2,x	                sta $03D2,x
4262	.a080		e8		inx		                inx
4263	.a081		e0 0b		cpx #$0b	                cpx #$0B
4264	.a083		d0 f1		bne $a076	                bne LA076
4265	.a085						LA085:
4266	.a085		4c 8f f2	jmp $f28f	                jmp badStringError

4268	.a088						LA088:
4269	.a088		9e d2 03	stz $03d2,x	                stz $03D2,x
4270	.a08b		60		rts		                rts

4272							; CFS/RFS OSFILE
4273							; ==============
4274	.a08c						osfileTapeOrROM:
4275	.a08c		48		pha		                pha
4276	.a08d		86 c8		stx $c8		                stx $C8                      ; C8/9=>control block
4277	.a08f		84 c9		sty $c9		                sty $C9
4278	.a091		b2 c8		lda ($c8)	                lda ($C8)                    ; Get XY=>filename
4279	.a093		aa		tax		                tax
4280	.a094		a0 01		ldy #$01	                ldy #$01
4281	.a096		b1 c8		lda ($c8),y	                lda ($C8),y
4282	.a098		a8		tay		                tay
4283	.a099		20 6b a0	jsr $a06b	                jsr LA06B                    ; Parse filename
4284	.a09c		a0 02		ldy #$02	                ldy #$02
4285	.a09e						LA09E:
4286	.a09e		b1 c8		lda ($c8),y	                lda ($C8),y
4287	.a0a0		99 bc 03	sta $03bc,y	                sta $03BC,y
4288	.a0a3		99 ae 00	sta $00ae,y	                sta $00AE,y
4289	.a0a6		c8		iny		                iny
4290	.a0a7		c0 0a		cpy #$0a	                cpy #$0A
4291	.a0a9		d0 f3		bne $a09e	                bne LA09E
4292	.a0ab		68		pla		                pla
4293	.a0ac		f0 07		beq $a0b5	                beq LA0B5
4294	.a0ae		c9 ff		cmp #$ff	                cmp #$FF
4295	.a0b0		d0 b2		bne $a064	                bne LA064
4296	.a0b2		4c af 9f	jmp $9faf	                jmp L9FAF

4298	.a0b5						LA0B5:
4302	.a0b5		8d c6 03	sta $03c6	                sta $03C6
4303	.a0b8		8d c7 03	sta $03c7	                sta $03C7
4304	.a0bb						LA0BB:
4305	.a0bb		b1 c8		lda ($c8),y	                lda ($C8),y
4306	.a0bd		99 a6 00	sta $00a6,y	                sta $00A6,y
4307	.a0c0		c8		iny		                iny
4308	.a0c1		c0 12		cpy #$12	                cpy #$12
4309	.a0c3		d0 f6		bne $a0bb	                bne LA0BB
4310	.a0c5		8a		txa		                txa
4311	.a0c6		f0 bd		beq $a085	                beq LA085
4312	.a0c8		20 f3 a9	jsr $a9f3	                jsr LA9F3
4313	.a0cb		20 22 a8	jsr $a822	                jsr LA822
4315	.a0ce		a9 00		lda #$00	                lda #tubeReasonMultiByteParasiteToHost
4316	.a0d0		20 a6 aa	jsr $aaa6	                jsr LAAA6
4318	.a0d3						LA0D3:
4319	.a0d3		38		sec		                sec
4320	.a0d4		a2 fd		ldx #$fd	                ldx #$fd                     ;-3
4321	.a0d6						LA0D6:
4322	.a0d6		bd b7 ff	lda $ffb7,x	                lda ($b4-$fd)&$ffff,x
4323	.a0d9		fd b3 ff	sbc $ffb3,x	                sbc ($b0-$fd)&$ffff,x
4324	.a0dc		9d cb 02	sta $02cb,x	                sta $3c8-$fd,x
4325	.a0df		e8		inx		                inx
4326	.a0e0		d0 f4		bne $a0d6	                bne LA0D6
4327	.a0e2		a8		tay		                tay
4328	.a0e3		d0 0e		bne $a0f3	                bne LA0F3
4329	.a0e5		ec c8 03	cpx $03c8	                cpx $03C8
4330	.a0e8		a9 01		lda #$01	                lda #$01
4331	.a0ea		ed c9 03	sbc $03c9	                sbc $03C9
4332	.a0ed		90 04		bcc $a0f3	                bcc LA0F3
4333	.a0ef		a2 80		ldx #$80	                ldx #$80
4334	.a0f1		80 08		bra $a0fb	                bra LA0FB

4336	.a0f3						LA0F3:
4337	.a0f3		a9 01		lda #$01	                lda #$01
4338	.a0f5		8d c9 03	sta $03c9	                sta $03C9
4339	.a0f8		8e c8 03	stx $03c8	                stx $03C8
4340	.a0fb						LA0FB:
4341	.a0fb		8e ca 03	stx $03ca	                stx $03CA
4342	.a0fe		20 e9 a6	jsr $a6e9	                jsr LA6E9
4343	.a101		30 78		bmi $a17b	                bmi LA17B
4344	.a103		20 5b a8	jsr $a85b	                jsr LA85B
4345	.a106		ee c6 03	inc $03c6	                inc $03C6
4346	.a109		d0 c8		bne $a0d3	                bne LA0D3
4347	.a10b		ee c7 03	inc $03c7	                inc $03C7
4348	.a10e		80 c3		bra $a0d3	                bra LA0D3

4351							; TAPE/ROM FSC 2 - */
4352							; TAPE/ROM FSC 4 - *RUN
4353							; ---------------------
4354	.a110						LA110:
4355	.a110		38		sec		                sec
4356	.a111		66 ce		ror $ce		                ror $CE
4357							; TAPE/ROM FSC 11 - *RUN command for library
4358							; ------------------------------------------
4359	.a113						LA113:
4360	.a113		da		phx		                phx
4361	.a114		5a		phy		                phy
4362	.a115		20 6b a0	jsr $a06b	                jsr LA06B
4363	.a118		a9 00		lda #$00	                lda #$00
4364	.a11a		a2 ff		ldx #$ff	                ldx #$FF
4365	.a11c		8e c2 03	stx $03c2	                stx $03C2
4366	.a11f		20 af 9f	jsr $9faf	                jsr L9FAF
4367	.a122		7a		ply		                ply
4368	.a123		fa		plx		                plx
4369	.a124		90 08		bcc $a12e	                bcc LA12E
4371	.a126		20 ca a9	jsr $a9ca	                jsr LA9CA

4374							; TAPE/ROM FSC 3 - unknown * command
4375							; ----------------------------------
4376	.a129						LA129:
4377	.a129		a9 0b		lda #$0b	                lda #$0B
4378	.a12b		6c 1e 02	jmp ($021e)	                jmp (FSCV)

4380	.a12e						LA12E:
4382	.a12e		2c 7a 02	bit $027a	                bit tubePresence
4383	.a131		10 09		bpl $a13c	                bpl LA13C                    ; taken if no Tube
4384	.a133		ad c4 03	lda $03c4	                lda $03C4
4385	.a136		2d c5 03	and $03c5	                and $03C5
4386	.a139		1a		inc a		                inc a                     ; A=$00 if !&03c2=&FFFFxxxx
4387	.a13a		d0 10		bne $a14c	                bne LA14C                 ; taken if copro address
4388	.a13c						LA13C:

4391	.a13c		ae c2 03	ldx $03c2	                ldx $03C2
4392	.a13f		ac c3 03	ldy $03c3	                ldy $03C3
4393	.a142		a9 a4		lda #$a4	                lda #$A4
4394	.a144		20 f4 ff	jsr $fff4	                jsr OSBYTE
4395	.a147		a9 01		lda #$01	                lda #$01
4396	.a149		6c c2 03	jmp ($03c2)	                jmp ($03C2)

4399	.a14c						LA14C:
4400	.a14c		a2 c2		ldx #$c2	                ldx #$C2
4401	.a14e		a0 03		ldy #$03	                ldy #$03
4402	.a150		a9 04		lda #$04	                lda #tubeReasonExecute
4403	.a152		4c b0 aa	jmp $aab0	                jmp initiateCFSRFSTubeTransfer

4406							; TAPE/ROM FSC 9 - *EX
4407							; --------------------
4408	.a155						LA155:
4409	.a155		a9 08		lda #$08	                lda #$08
4410	.a157		04 e2		tsb $e2		                tsb $E2
4411	.a159		a5 e3		lda $e3		                lda $E3
4412	.a15b		48		pha		                pha
4413	.a15c		09 cc		ora #$cc	                ora #$CC
4414	.a15e		85 e3		sta $e3		                sta $E3
4415	.a160		20 f3 a9	jsr $a9f3	                jsr LA9F3
4416	.a163		68		pla		                pla
4417	.a164		85 e3		sta $e3		                sta $E3
4418	.a166		80 07		bra $a16f	                bra LA16F

4420							; TAPE/ROM FSC 5 - *CAT
4421							; ---------------------
4422	.a168						LA168:
4423	.a168		a9 08		lda #$08	                lda #$08
4424	.a16a		04 e2		tsb $e2		                tsb $E2
4425	.a16c		20 f3 a9	jsr $a9f3	                jsr LA9F3
4426	.a16f						LA16F:
4427	.a16f		a9 00		lda #$00	                lda #$00
4428	.a171		20 7c a1	jsr $a17c	                jsr LA17C
4430	.a174		20 ca a9	jsr $a9ca	                jsr LA9CA
4432	.a177						LA177:
4433	.a177		a9 08		lda #$08	                lda #$08
4434	.a179		14 e2		trb $e2		                trb $E2
4435	.a17b						LA17B:
4436	.a17b		60		rts		                rts

4438	.a17c						LA17C:
4439	.a17c		48		pha		                pha
4441	.a17d		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4442	.a180		f0 09		beq $a18b	                beq LA18B
4444	.a182		20 fc f6	jsr $f6fc	                jsr LF6FC
4445	.a185		20 01 f7	jsr $f701	                jsr LF701
4446	.a188		b8		clv		                clv
4447	.a189		b0 50		bcs $a1db	                bcs LA1DB
4448	.a18b						LA18B:
4449	.a18b		20 78 a6	jsr $a678	                jsr LA678
4450	.a18e		ad c6 03	lda $03c6	                lda $03C6
4451	.a191		85 b4		sta $b4		                sta $B4
4452	.a193		ad c7 03	lda $03c7	                lda $03C7
4453	.a196		85 b5		sta $b5		                sta $B5
4454	.a198		a2 ff		ldx #$ff	                ldx #$FF
4455	.a19a		8e df 03	stx $03df	                stx $03DF
4456	.a19d		64 ba		stz $ba		                stz $BA
4457	.a19f		80 16		bra $a1b7	                bra LA1B7

4459	.a1a1						LA1A1:
4461	.a1a1		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4462	.a1a4		f0 37		beq $a1dd	                beq LA1DD
4464	.a1a6						LA1A6:
4465	.a1a6		20 17 f7	jsr $f717	                jsr LF717
4466	.a1a9						LA1A9:
4467	.a1a9		a9 ff		lda #$ff	                lda #$FF
4468	.a1ab		8d c6 03	sta $03c6	                sta $03C6
4469	.a1ae		8d c7 03	sta $03c7	                sta $03C7
4470	.a1b1						LA1B1:
4471	.a1b1		20 35 aa	jsr $aa35	                jsr LAA35
4472	.a1b4		20 78 a6	jsr $a678	                jsr LA678
4473	.a1b7						LA1B7:
4475	.a1b7		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4476	.a1ba		f0 02		beq $a1be	                beq LA1BE
4478	.a1bc		50 1d		bvc $a1db	                bvc LA1DB
4479	.a1be						LA1BE:
4480	.a1be		68		pla		                pla
4481	.a1bf		48		pha		                pha
4482	.a1c0		f0 1b		beq $a1dd	                beq LA1DD
4483	.a1c2		20 5c a9	jsr $a95c	                jsr LA95C
4484	.a1c5		d0 da		bne $a1a1	                bne LA1A1
4485	.a1c7		a9 30		lda #$30	                lda #$30
4486	.a1c9		25 bb		and $bb		                and $BB
4487	.a1cb		f0 0e		beq $a1db	                beq LA1DB
4488	.a1cd		ad c6 03	lda $03c6	                lda $03C6
4489	.a1d0		c5 b6		cmp $b6		                cmp $B6
4490	.a1d2		d0 cd		bne $a1a1	                bne LA1A1
4491	.a1d4		ad c7 03	lda $03c7	                lda $03C7
4492	.a1d7		c5 b7		cmp $b7		                cmp $B7
4493	.a1d9		d0 c6		bne $a1a1	                bne LA1A1
4494	.a1db						LA1DB:
4495	.a1db		68		pla		                pla
4496	.a1dc		60		rts		                rts

4498	.a1dd						LA1DD:
4499	.a1dd		50 05		bvc $a1e4	                bvc LA1E4
4500	.a1df		a9 ff		lda #$ff	                lda #$FF
4501	.a1e1		20 d4 a6	jsr $a6d4	                jsr LA6D4
4502	.a1e4						LA1E4:
4503	.a1e4		a2 00		ldx #$00	                ldx #$00
4504	.a1e6		20 c4 a8	jsr $a8c4	                jsr LA8C4
4506	.a1e9		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4507	.a1ec		f0 04		beq $a1f2	                beq LA1F2
4509	.a1ee		24 bb		bit $bb		                bit $BB
4510	.a1f0		50 b4		bvc $a1a6	                bvc LA1A6
4511	.a1f2						LA1F2:
4512	.a1f2		2c ca 03	bit $03ca	                bit $03CA
4513	.a1f5		30 b2		bmi $a1a9	                bmi LA1A9
4514	.a1f7		80 b8		bra $a1b1	                bra LA1B1

4516							; CFS/RFS OSFIND HANDLER
4517							; ======================
4518	.a1f9						osfindTapeOrROM:
4519	.a1f9		85 bc		sta $bc		                sta $BC
4520	.a1fb		da		phx		                phx
4521	.a1fc		5a		phy		                phy
4522	.a1fd		09 00		ora #$00	                ora #$00
4523	.a1ff		d0 1f		bne $a220	                bne LA220
4524	.a201		98		tya		                tya
4525	.a202		d0 0e		bne $a212	                bne LA212
4527	.a204		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4528	.a207		d0 03		bne $a20c	                bne LA20C
4529	.a209		20 9c a2	jsr $a29c	                jsr LA29C
4531	.a20c						LA20C:
4532	.a20c		a9 01		lda #$01	                lda #$01
4533	.a20e		14 e2		trb $e2		                trb $E2
4537	.a210		80 0c		bra $a21e	                bra LA21E
4539	.a212						LA212:
4540	.a212		4a		lsr a		                lsr a
4541	.a213		b0 f7		bcs $a20c	                bcs LA20C
4543	.a215		4a		lsr a		                lsr a
4544	.a216		b0 03		bcs $a21b	                bcs LA21B
4546	.a218		4c 81 aa	jmp $aa81	                jmp LAA81

4549	.a21b						LA21B:
4550	.a21b		20 9c a2	jsr $a29c	                jsr LA29C
4551	.a21e						LA21E:
4552	.a21e		80 77		bra $a297	                bra LA297

4555	.a220						LA220:
4556	.a220		20 6b a0	jsr $a06b	                jsr LA06B
4557	.a223		24 bc		bit $bc		                bit $BC
4558	.a225		50 39		bvc $a260	                bvc LA260
4559	.a227		9c 9e 03	stz $039e	                stz $039E
4560	.a22a		9c dd 03	stz $03dd	                stz $03DD
4561	.a22d		9c de 03	stz $03de	                stz $03DE
4562	.a230		a9 c1		lda #$c1	                lda #$C1
4563	.a232		14 e2		trb $e2		                trb $E2
4564	.a234		20 e6 a9	jsr $a9e6	                jsr LA9E6
4565	.a237		08		php		                php
4566	.a238		20 02 a5	jsr $a502	                jsr LA502
4567	.a23b		20 b7 a5	jsr $a5b7	                jsr LA5B7
4568	.a23e		28		plp		                plp
4569	.a23f		a2 ff		ldx #$ff	                ldx #$FF
4570	.a241						LA241:
4571	.a241		e8		inx		                inx
4572	.a242		bd b2 03	lda $03b2,x	                lda $03B2,x
4573	.a245		9d a7 03	sta $03a7,x	                sta $03A7,x
4574	.a248		d0 f7		bne $a241	                bne LA241
4575	.a24a		1a		inc a		                inc a
4576	.a24b		04 e2		tsb $e2		                tsb $E2
4577	.a24d		ad e9 02	lda $02e9	                lda tapeInputCurrentBlockSize+0
4578	.a250		0d ea 02	ora $02ea	                ora tapeInputCurrentBlockSize+1
4579	.a253		d0 04		bne $a259	                bne LA259
4580	.a255		a9 40		lda #$40	                lda #$40
4581	.a257		04 e2		tsb $e2		                tsb $E2
4582	.a259						LA259:
4589	.a259		a9 01		lda #$01	                lda #$01
4590	.a25b		0d 47 02	ora $0247	                ora cfsRFSFSSwitch
4591	.a25e		d0 35		bne $a295	                bne LA295
4592	.a260						LA260:
4593	.a260		8a		txa		                txa
4594	.a261		d0 03		bne $a266	                bne LA266
4595	.a263		4c 8f f2	jmp $f28f	                jmp badStringError

4597	.a266						LA266:
4598	.a266		a2 ff		ldx #$ff	                ldx #$FF
4599	.a268						LA268:
4600	.a268		e8		inx		                inx
4601	.a269		bd d2 03	lda $03d2,x	                lda $03D2,x
4602	.a26c		9d 80 03	sta $0380,x	                sta $0380,x
4603	.a26f		d0 f7		bne $a268	                bne LA268
4604	.a271		3a		dec a		                dec a
4605	.a272		a2 08		ldx #$08	                ldx #$08
4606	.a274						LA274:
4607	.a274		9d 8b 03	sta $038b,x	                sta $038B,x
4608	.a277		ca		dex		                dex
4609	.a278		d0 fa		bne $a274	                bne LA274
4610	.a27a		8a		txa		                txa
4611	.a27b		a2 14		ldx #$14	                ldx #$14
4612	.a27d						LA27D:
4613	.a27d		9d 80 03	sta $0380,x	                sta $0380,x
4614	.a280		e8		inx		                inx
4615	.a281		e0 1e		cpx #$1e	                cpx #$1E
4616	.a283		d0 f8		bne $a27d	                bne LA27D
4617	.a285		2e 97 03	rol $0397	                rol $0397
4618	.a288		20 f3 a9	jsr $a9f3	                jsr LA9F3
4619	.a28b		20 22 a8	jsr $a822	                jsr LA822
4620	.a28e		20 bb a9	jsr $a9bb	                jsr LA9BB
4621	.a291		a9 02		lda #$02	                lda #$02
4622	.a293		04 e2		tsb $e2		                tsb $E2
4624	.a295						LA295:
4625	.a295		85 bc		sta $bc		                sta $BC
4626	.a297						LA297:
4627	.a297		7a		ply		                ply
4628	.a298		fa		plx		                plx
4629	.a299		a5 bc		lda $bc		                lda $BC
4630	.a29b						LA29B:
4631	.a29b		60		rts		                rts

4634	.a29c						LA29C:
4635	.a29c		a9 02		lda #$02	                lda #$02
4636	.a29e		25 e2		and $e2		                and $E2
4637	.a2a0		f0 f9		beq $a29b	                beq LA29B
4638	.a2a2		9c 97 03	stz $0397	                stz $0397
4639	.a2a5		a9 80		lda #$80	                lda #$80
4640	.a2a7		ae 9d 03	ldx $039d	                ldx $039D
4641	.a2aa		8e 96 03	stx $0396	                stx $0396
4642	.a2ad		8d 98 03	sta $0398	                sta $0398
4643	.a2b0		20 b8 a2	jsr $a2b8	                jsr LA2B8
4644	.a2b3		a9 02		lda #$02	                lda #$02
4645	.a2b5		14 e2		trb $e2		                trb $E2
4646	.a2b7		60		rts		                rts

4648	.a2b8						LA2B8:
4649	.a2b8		20 e6 a9	jsr $a9e6	                jsr LA9E6
4650	.a2bb		a2 11		ldx #$11	                ldx #$11
4651	.a2bd						LA2BD:
4652	.a2bd		bd 8c 03	lda $038c,x	                lda $038C,x
4653	.a2c0		9d be 03	sta $03be,x	                sta $03BE,x
4654	.a2c3		ca		dex		                dex
4655	.a2c4		10 f7		bpl $a2bd	                bpl LA2BD
4656	.a2c6		86 b2		stx $b2		                stx $B2
4657	.a2c8		86 b3		stx $b3		                stx $B3
4658	.a2ca		64 b0		stz $b0		                stz $B0
4659	.a2cc		a9 09		lda #$09	                lda #$09
4660	.a2ce		85 b1		sta $b1		                sta $B1
4661	.a2d0		a2 7f		ldx #$7f	                ldx #$7F
4662	.a2d2		20 4d aa	jsr $aa4d	                jsr LAA4D
4663	.a2d5		8d df 03	sta $03df	                sta $03DF
4664	.a2d8		20 5a aa	jsr $aa5a	                jsr LAA5A
4665	.a2db		20 a0 aa	jsr $aaa0	                jsr LAAA0
4666	.a2de		20 e9 a6	jsr $a6e9	                jsr LA6E9
4667	.a2e1		ee 94 03	inc $0394	                inc $0394
4668	.a2e4		d0 03		bne $a2e9	                bne LA2E9
4669	.a2e6		ee 95 03	inc $0395	                inc $0395
4670	.a2e9						LA2E9:
4671	.a2e9		60		rts		                rts

4674	.a2ea						bputTapeOrROM:
4675	.a2ea		da		phx		                phx
4676	.a2eb		5a		phy		                phy
4677	.a2ec		a9 01		lda #$01	                lda #$01
4678	.a2ee						LA2EE:
4679	.a2ee		20 68 aa	jsr $aa68	                jsr LAA68
4680	.a2f1		a5 e2		lda $e2		                lda $E2
4681	.a2f3		0a		asl a		                asl a
4682	.a2f4		b0 4d		bcs $a343	                bcs LA343
4683	.a2f6		0a		asl a		                asl a
4684	.a2f7		90 08		bcc $a301	                bcc LA301
4685	.a2f9		a9 80		lda #$80	                lda #$80
4686	.a2fb		04 e2		tsb $e2		                tsb $E2
4687	.a2fd		a9 fe		lda #$fe	                lda #$FE
4688	.a2ff		b0 3a		bcs $a33b	                bcs LA33B
4689	.a301						LA301:
4690	.a301		ae 9e 03	ldx $039e	                ldx $039E
4691	.a304		e8		inx		                inx
4692	.a305		ec e9 02	cpx $02e9	                cpx tapeInputCurrentBlockSize+0
4693	.a308		d0 2c		bne $a336	                bne LA336
4694	.a30a		2c eb 02	bit $02eb	                bit blockFlagOfCurrentlyResidentBlock
4695	.a30d		30 23		bmi $a332	                bmi LA332
4696	.a30f		ad ec 02	lda $02ec	                lda lastCharacterOfCurrentlyResidentBlock
4697	.a312		48		pha		                pha
4698	.a313		20 e6 a9	jsr $a9e6	                jsr LA9E6
4699	.a316		08		php		                php
4700	.a317		20 af a5	jsr $a5af	                jsr LA5AF
4701	.a31a		28		plp		                plp
4702	.a31b		68		pla		                pla
4703	.a31c		85 bc		sta $bc		                sta $BC
4704	.a31e		18		clc		                clc
4705	.a31f		2c eb 02	bit $02eb	                bit blockFlagOfCurrentlyResidentBlock
4706	.a322		10 19		bpl $a33d	                bpl LA33D
4707	.a324		ad e9 02	lda $02e9	                lda tapeInputCurrentBlockSize+0
4708	.a327		0d ea 02	ora $02ea	                ora tapeInputCurrentBlockSize+1
4709	.a32a		d0 11		bne $a33d	                bne LA33D
4710	.a32c		a9 40		lda #$40	                lda #$40
4711	.a32e		04 e2		tsb $e2		                tsb $E2
4712	.a330		80 0b		bra $a33d	                bra LA33D

4714	.a332						LA332:
4715	.a332		a9 40		lda #$40	                lda #$40
4716	.a334		04 e2		tsb $e2		                tsb $E2
4717	.a336						LA336:
4718	.a336		ca		dex		                dex
4719	.a337		18		clc		                clc
4720	.a338		bd 00 0a	lda $0a00,x	                lda $0A00,x
4721	.a33b						LA33B:
4722	.a33b		85 bc		sta $bc		                sta $BC
4723	.a33d						LA33D:
4724	.a33d		ee 9e 03	inc $039e	                inc $039E
4725	.a340		4c 97 a2	jmp $a297	                jmp LA297

4727	.a343						LA343:
4728	.a343		20 ed aa	jsr $aaed	                jsr doFollowingError
4729	>a346		df 45 4f 46 00			                .text $df,"EOF",0

4742	.a34b						bgetTapeOrROM:
4743	.a34b		85 c4		sta $c4		                sta $C4
4744	.a34d		da		phx		                phx
4745	.a34e		5a		phy		                phy
4746	.a34f		a9 02		lda #$02	                lda #$02
4747	.a351		20 68 aa	jsr $aa68	                jsr LAA68
4748	.a354		ae 9d 03	ldx $039d	                ldx $039D
4749	.a357		a5 c4		lda $c4		                lda $C4
4750	.a359		9d 00 09	sta $0900,x	                sta $0900,x
4751	.a35c		e8		inx		                inx
4752	.a35d		d0 06		bne $a365	                bne LA365
4753	.a35f		20 b8 a2	jsr $a2b8	                jsr LA2B8
4754	.a362		20 bb a9	jsr $a9bb	                jsr LA9BB
4755	.a365						LA365:
4756	.a365		ee 9d 03	inc $039d	                inc $039D
4757	.a368		a5 c4		lda $c4		                lda $C4
4758	.a36a		4c 95 a2	jmp $a295	                jmp LA295

4762							; TAPE/ROM OSGBPB handler
4763							; =======================
4764	.a36d						osgbpbTapeOrROM:
4765	.a36d		4a		lsr a		                lsr a                        ; Odd numbered calls - change PTR - exit with A=changed, SEC
4766	.a36e		b0 06		bcs $a376	                bcs LA376
4767	.a370		f0 04		beq $a376	                beq LA376                    ; OSGBPB 0 - exit with A=unchanged, SEC
4768	.a372		c9 03		cmp #$03	                cmp #$03                     ; function/2<3 - function<6 - function 2 and 4 - jump to do
4769	.a374		90 02		bcc $a378	                bcc LA378
4770	.a376						LA376:
4771	.a376		38		sec		                sec
4772	.a377		60		rts		                rts

4775							; Call Return
4776							;  0    A=0   SEC                        - unsupported
4777							;  1    A=0   SEC  Write using new PTR   - unsupported
4778							;  2    A=         Write with current PTR
4779							;  3    A=1   SEC  Read with new PTR     - unsupported
4780							;  4    A=         Read with current PTR
4781							;  5+   A=A/2 SEC                        - unsupported

4783							; TAPE/ROM OSGBPB 2 and 4 - read/write with current PTR
4784							; -----------------------------------------------------
4785	.a378						LA378:
4787	.a378		4a		lsr a		                lsr a
4789	.a379		86 cc		stx $cc		                stx $CC
4790	.a37b		84 cd		sty $cd		                sty $CD
4791	.a37d		a0 01		ldy #$01	                ldy #$01
4792	.a37f		b1 cc		lda ($cc),y	                lda ($CC),y
4793	.a381		85 c8		sta $c8		                sta $C8                      ; address LSB
4794	.a383		c8		iny		                iny
4795	.a384		b1 cc		lda ($cc),y	                lda ($CC),y
4796	.a386		85 c9		sta $c9		                sta $C9                      ; address MSB
4798	.a388		c8		iny		                iny
4799	.a389		b1 cc		lda ($cc),y	                lda ($CC),y
4800	.a38b		c8		iny		                iny
4801	.a38c		31 cc		and ($cc),y	                and ($CC),y            ; A=$ff if bits 16-31 are $ffff
4802	.a38e		1a		inc a		                inc a              ; A!=$00 if bits 16-31 aren't $ffff
4803	.a38f		2d 7a 02	and $027a	                and tubePresence ; A!=$00 if copro address and copro present
4804	.a392		48		pha		                pha              ; save copro usage flag
4806	.a393		08		php		                php                          ; save C
4808	.a394		f0 11		beq $a3a7	                beq LA3A7
4809	.a396		a6 cc		ldx $cc		                ldx $CC
4810	.a398		a4 cd		ldy $cd		                ldy $CD
4811	.a39a		e8		inx		                inx
4812	.a39b		d0 01		bne $a39e	                bne LA39E
4813	.a39d		c8		iny		                iny
4814	.a39e						LA39E:
4823							                ; if C=1, host->parasite; if C=0, parasite->host
4824	.a39e		a9 00		lda #$00	                lda #tubeReasonMultiByteParasiteToHost
4825	.a3a0		28		plp		                plp
4826	.a3a1		08		php		                php
4827	.a3a2		69 00		adc #$00	                adc #$00
4829	.a3a4		20 b0 aa	jsr $aab0	                jsr initiateCFSRFSTubeTransfer
4830	.a3a7						LA3A7:
4832	.a3a7		b2 cc		lda ($cc)	                lda ($CC)                    ; A=handle
4833	.a3a9		a8		tay		                tay                          ; Y=handle
4834	.a3aa		a9 01		lda #$01	                lda #$01
4837	.a3ac		28		plp		                plp                          ; restore C
4839	.a3ad		08		php		                php                          ; save C
4840	.a3ae		69 00		adc #$00	                adc #$00
4842	.a3b0		20 8d aa	jsr $aa8d	                jsr LAA8D
4843	.a3b3		b0 0c		bcs $a3c1	                bcs LA3C1
4845	.a3b5		28		plp		                plp                          ; restore C
4848	.a3b6		68		pla		                pla                          ; restore copro usage flag
4849	.a3b7		f0 05		beq $a3be	                beq LA3BE                    ; taken if not copro
4850	.a3b9		a9 80		lda #$80	                lda #$80
4851	.a3bb		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
4852	.a3be						LA3BE:
4854	.a3be		4c 81 aa	jmp $aa81	                jmp LAA81

4856	.a3c1						LA3C1:
4858	.a3c1		28		plp		                plp
4859	.a3c2		b0 3d		bcs $a401	                bcs LA401
4861	.a3c4		24 e2		bit $e2		                bit $E2
4862	.a3c6		10 0b		bpl $a3d3	                bpl LA3D3
4864	.a3c8		68		pla		                pla                          ; restore copro usage flag
4865	.a3c9		f0 05		beq $a3d0	                beq LA3D0                    ; taken if no copro usage
4866	.a3cb		a9 80		lda #$80	                lda #$80                     ; $80 = RFS/CFS release Tube
4867	.a3cd		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
4868	.a3d0						LA3D0:
4870	.a3d0		4c 43 a3	jmp $a343	                jmp LA343

4872	.a3d3						LA3D3:
4873	.a3d3		20 e0 aa	jsr $aae0	                jsr LAAE0
4874	.a3d6		f0 1e		beq $a3f6	                beq LA3F6
4875	.a3d8		b2 cc		lda ($cc)	                lda ($CC)
4876	.a3da		a8		tay		                tay
4877	.a3db		20 ea a2	jsr $a2ea	                jsr bputTapeOrROM
4878	.a3de		b0 16		bcs $a3f6	                bcs LA3F6
4880	.a3e0		fa		plx		                plx                          ; restore copro usage flag
4881	.a3e1		da		phx		                phx                          ; save copro usage flag
4882	.a3e2		f0 05		beq $a3e9	                beq LA3E9                    ; taken if no copro usage
4883	.a3e4		8d e5 fe	sta $fee5	                sta tube.data3               ; send byte to Tube
4884	.a3e7		80 08		bra $a3f1	                bra LA3F1

4886	.a3e9						LA3E9:
4888	.a3e9		92 c8		sta ($c8)	                sta ($C8)                    ; store the byte to I/O RAM
4889	.a3eb		e6 c8		inc $c8		                inc $C8                      ; next address...
4890	.a3ed		d0 02		bne $a3f1	                bne LA3F1
4891	.a3ef		e6 c9		inc $c9		                inc $C9
4892	.a3f1						LA3F1:
4893	.a3f1		20 ca aa	jsr $aaca	                jsr LAACA
4894	.a3f4		80 dd		bra $a3d3	                bra LA3D3

4896	.a3f6						LA3F6:
4898	.a3f6		68		pla		                pla                          ; restore copro usage flag
4899	.a3f7		08		php		                php
4900	.a3f8		f0 05		beq $a3ff	                beq LA3FF                    ; taken if not copro usage
4901	.a3fa		a9 80		lda #$80	                lda #$80                     ; $80 = RFS/CFS release Tube
4902	.a3fc		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
4903	.a3ff						LA3FF:
4904	.a3ff		28		plp		                plp
4906	.a400		60		rts		                rts

4909	.a401						LA401:
4910	.a401		20 e0 aa	jsr $aae0	                jsr LAAE0
4911	.a404		f0 f0		beq $a3f6	                beq LA3F6
4912	.a406		b2 cc		lda ($cc)	                lda ($CC)
4913	.a408		a8		tay		                tay
4915	.a409		68		pla		                pla                          ; restore copro usage flag
4916	.a40a		48		pha		                pha                          ; save copro usage flag
4917	.a40b		f0 05		beq $a412	                beq LA412                    ; taken if not copro usage
4918	.a40d		ad e5 fe	lda $fee5	                lda tube.data3               ; receive byte from Tube
4919	.a410		80 08		bra $a41a	                bra LA41A
4920	.a412						LA412:

4923	.a412		b2 c8		lda ($c8)	                lda ($C8)                    ; read the byte from I/O RAM
4924	.a414		e6 c8		inc $c8		                inc $C8                      ; next address...
4925	.a416		d0 02		bne $a41a	                bne LA41A
4926	.a418		e6 c9		inc $c9		                inc $C9
4927	.a41a						LA41A:
4928	.a41a		20 4b a3	jsr $a34b	                jsr bgetTapeOrROM
4929	.a41d		20 ca aa	jsr $aaca	                jsr LAACA
4930	.a420		80 df		bra $a401	                bra LA401

4933							; TAPE/ROM FSC 0 - *OPT
4934							; ---------------------
4935	.a422						LA422:
4936	.a422		8a		txa		                txa                          ; *OPT 0
4937	.a423		f0 2e		beq $a453	                beq LA453
4938	.a425		e0 03		cpx #$03	                cpx #$03                     ; *OPT 3
4939	.a427		f0 1f		beq $a448	                beq LA448
4940	.a429		c0 03		cpy #$03	                cpy #$03                     ; *OPT n,3+ - error Bad command (*BUG* should be Bad option)
4941	.a42b		b0 06		bcs $a433	                bcs LA433
4942	.a42d		ca		dex		                dex                          ; *OPT 1
4943	.a42e		f0 06		beq $a436	                beq LA436
4944	.a430		ca		dex		                dex                          ; *OPT 2
4945	.a431		f0 0a		beq $a43d	                beq LA43D
4946	.a433						LA433:
4947	.a433		4c ed fb	jmp $fbed	                jmp badCommandError ; *OPT 4+ - error Bad command (*BUG* should be Bad option)

4949							; *OPT 1 - set message level
4950							; --------------------------
4951	.a436						LA436:
4952	.a436		a9 33		lda #$33	                lda #$33
4953	.a438		c8		iny		                iny
4954	.a439		c8		iny		                iny
4955	.a43a		c8		iny		                iny
4956	.a43b		80 02		bra $a43f	                bra LA43F

4958							; *OPT 2 - set error response level
4959							; ---------------------------------
4960	.a43d						LA43D:
4961	.a43d		a9 cc		lda #$cc	                lda #$CC
4962	.a43f						LA43F:
4963	.a43f		c8		iny		                iny
4964	.a440		25 e3		and $e3		                and $E3
4965	.a442						LA442:
4966	.a442		19 56 a4	ora $a456,y	                ora LA456,y
4967	.a445		85 e3		sta $e3		                sta $E3
4968	.a447		60		rts		                rts

4970							; *OPT 3 - set interblock gap
4971							; ---------------------------
4972	.a448						LA448:
4973	.a448		98		tya		                tya                          ; *OPT 3,128+ - set to default
4974	.a449		30 02		bmi $a44d	                bmi LA44D    ;
4975	.a44b		d0 02		bne $a44f	                bne LA44F                    ; *OPT 3,<>0 - use setting
4976	.a44d						LA44D:
4977	.a44d		a9 19		lda #$19	                lda #$19                     ; *OPT 3,0 or *OPT 3,128+ - use default of 2.5 sec
4978	.a44f						LA44F:
4979	.a44f		8d d1 03	sta $03d1	                sta $03D1                    ; Set inter-block gap
4980	.a452		60		rts		                rts

4982	.a453						LA453:
4983	.a453		a8		tay		                tay
4984	.a454		80 ec		bra $a442	                bra LA442

4986	.a456						LA456:
4987							                ; LDA ($00,x)
4988							                ; EQUB $22
4989							                ; ORA ($00),y
4990							                ; DEY
4991							                ; CPY LC0C6
4992	>a456		a1				                .byte $A1
4993	>a457		00				                .byte $00
4994	>a458		22				                .byte $22
4995	>a459		11				                .byte $11
4996	>a45a		00				                .byte $00
4997	>a45b		88				                .byte $88
4998	>a45c		cc				                .byte $CC

5001	.a45d						LA45D:
5002	.a45d		c6 c0		dec $c0		                dec $C0
5003	.a45f		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5004	.a462		f0 07		beq $a46b	                beq LA46B
5005	.a464		20 10 f7	jsr $f710	                jsr LF710
5006	.a467		a8		tay		                tay
5007	.a468		18		clc		                clc
5008	.a469		80 1a		bra $a485	                bra LA485

5010	.a46b						LA46B:
5011	.a46b		ad 08 fe	lda $fe08	                lda ACIA+0
5012	.a46e		48		pha		                pha
5013	.a46f		29 02		and #$02	                and #$02
5014	.a471		f0 0b		beq $a47e	                beq LA47E
5015	.a473		a4 ca		ldy $ca		                ldy $CA
5016	.a475		f0 07		beq $a47e	                beq LA47E
5017	.a477		68		pla		                pla
5018	.a478		a5 bd		lda $bd		                lda $BD
5019	.a47a		8d 09 fe	sta $fe09	                sta ACIA+1
5020	.a47d		60		rts		                rts

5022	.a47e						LA47E:
5023	.a47e		ac 09 fe	ldy $fe09	                ldy ACIA+1
5024	.a481		68		pla		                pla
5025	.a482		4a		lsr a		                lsr a
5026	.a483		4a		lsr a		                lsr a
5027	.a484		4a		lsr a		                lsr a
5028	.a485						LA485:
5029	.a485		a6 c2		ldx $c2		                ldx $C2
5030	.a487		f0 67		beq $a4f0	                beq LA4F0
5031	.a489		ca		dex		                dex
5032	.a48a		d0 06		bne $a492	                bne LA492
5033	.a48c		90 62		bcc $a4f0	                bcc LA4F0
5034	.a48e		a0 02		ldy #$02	                ldy #$02
5035	.a490		80 5c		bra $a4ee	                bra LA4EE

5038	.a492						LA492:
5049	.a492		ca		dex		                dex
5050	.a493		d0 13		bne $a4a8	                bne LA4A8
5051	.a495		b0 59		bcs $a4f0	                bcs LA4F0
5053	.a497		98		tya		                tya
5054	.a498		20 44 aa	jsr $aa44	                jsr LAA44
5055	.a49b		a0 03		ldy #$03	                ldy #$03
5056	.a49d		c9 2a		cmp #$2a	                cmp #$2A
5057	.a49f		f0 4d		beq $a4ee	                beq LA4EE
5058	.a4a1		20 1c aa	jsr $aa1c	                jsr LAA1C
5059	.a4a4		a0 01		ldy #$01	                ldy #$01
5060	.a4a6		80 46		bra $a4ee	                bra LA4EE

5062	.a4a8						LA4A8:
5063	.a4a8		ca		dex		                dex
5064	.a4a9		d0 0a		bne $a4b5	                bne LA4B5
5066	.a4ab		b0 03		bcs $a4b0	                bcs LA4B0
5068	.a4ad		84 bd		sty $bd		                sty $BD
5069	.a4af		60		rts		                rts

5072	.a4b0						LA4B0:
5073	.a4b0		a9 80		lda #$80	                lda #$80
5074	.a4b2		85 c0		sta $c0		                sta $C0
5075	.a4b4		60		rts		                rts

5078	.a4b5						LA4B5:
5079	.a4b5		ca		dex		                dex
5080	.a4b6		d0 29		bne $a4e1	                bne LA4E1
5082	.a4b8		b0 2f		bcs $a4e9	                bcs LA4E9
5084	.a4ba		98		tya		                tya
5085	.a4bb		20 a9 a6	jsr $a6a9	                jsr LA6A9
5086	.a4be		a4 bc		ldy $bc		                ldy $BC
5087	.a4c0		e6 bc		inc $bc		                inc $BC
5088	.a4c2		24 bd		bit $bd		                bit $BD
5089	.a4c4		30 0d		bmi $a4d3	                bmi LA4D3
5091	.a4c6		20 bc aa	jsr $aabc	                jsr isTubeAddress
5092	.a4c9		f0 05		beq $a4d0	                beq LA4D0                    ; taken if not Tube address
5093	.a4cb		8e e5 fe	stx $fee5	                stx tube.data3
5094	.a4ce		80 03		bra $a4d3	                bra LA4D3

5096	.a4d0						LA4D0:
5097	.a4d0		8a		txa		                txa                          ; A=byte to write
5099	.a4d1		91 b0		sta ($b0),y	                sta ($B0),y                  ; store byte to I/O RAM
5100	.a4d3						LA4D3:
5101	.a4d3		c8		iny		                iny
5102	.a4d4		cc c8 03	cpy $03c8	                cpy $03C8
5103	.a4d7		d0 17		bne $a4f0	                bne LA4F0
5104	.a4d9		a9 01		lda #$01	                lda #$01
5105	.a4db		85 bc		sta $bc		                sta $BC
5106	.a4dd		a0 05		ldy #$05	                ldy #$05
5107	.a4df		80 0d		bra $a4ee	                bra LA4EE

5109	.a4e1						LA4E1:
5110	.a4e1		98		tya		                tya
5111	.a4e2		20 a9 a6	jsr $a6a9	                jsr LA6A9
5112	.a4e5		c6 bc		dec $bc		                dec $BC
5113	.a4e7		10 07		bpl $a4f0	                bpl LA4F0
5115	.a4e9						LA4E9:
5116	.a4e9		20 12 aa	jsr $aa12	                jsr resetACIA
5118	.a4ec		a0 00		ldy #$00	                ldy #$00
5119	.a4ee						LA4EE:
5120	.a4ee		84 c2		sty $c2		                sty $C2
5121	.a4f0						LA4F0:
5122	.a4f0		60		rts		                rts

5124							; TAPE/ROM FSC 1 - =EOF
5125							; ---------------------
5126	.a4f1						LA4F1:
5127	.a4f1		48		pha		                pha
5128	.a4f2		5a		phy		                phy
5129	.a4f3		8a		txa		                txa
5130	.a4f4		a8		tay		                tay
5131	.a4f5		a9 03		lda #$03	                lda #$03                     ; Check if this channel is open for anything
5132	.a4f7		20 68 aa	jsr $aa68	                jsr LAA68
5133	.a4fa		a5 e2		lda $e2		                lda $E2                      ; Get EOF flag
5134	.a4fc		29 40		and #$40	                and #$40
5135	.a4fe		aa		tax		                tax                          ; Return in X
5136	.a4ff		7a		ply		                ply
5137	.a500		68		pla		                pla
5138	.a501		60		rts		                rts

5140	.a502						LA502:
5141	.a502		64 b4		stz $b4		                stz $B4
5142	.a504		64 b5		stz $b5		                stz $B5
5143	.a506						LA506:
5144	.a506		46 ce		lsr $ce		                lsr $CE
5145	.a508		a5 b4		lda $b4		                lda $B4
5146	.a50a		48		pha		                pha
5147	.a50b		85 b6		sta $b6		                sta $B6
5148	.a50d		a5 b5		lda $b5		                lda $B5
5149	.a50f		48		pha		                pha
5150	.a510		85 b7		sta $b7		                sta $B7
5151	.a512		20 23 a9	jsr $a923	                jsr LA923
5152	>a515		53 65 61 72 63 68 69 6e		                .text "Searching",13,0
	>a51d		67 0d 00
5153	.a520		a9 ff		lda #$ff	                lda #$ff
5154	.a522		20 7c a1	jsr $a17c	                jsr LA17C
5155	.a525		68		pla		                pla
5156	.a526		85 b5		sta $b5		                sta $B5
5157	.a528		68		pla		                pla
5158	.a529		85 b4		sta $b4		                sta $B4
5159	.a52b		a5 b6		lda $b6		                lda $B6
5160	.a52d		05 b7		ora $b7		                ora $B7
5161	.a52f		d0 33		bne $a564	                bne LA564
5162	.a531		64 b4		stz $b4		                stz $B4
5163	.a533		64 b5		stz $b5		                stz $B5
5165	.a535		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5166	.a538		f0 21		beq $a55b	                beq LA55B
5168	.a53a		70 1f		bvs $a55b	                bvs LA55B
5170	.a53c		20 ca a9	jsr $a9ca	                jsr LA9CA
5172	.a53f		24 ce		bit $ce		                bit $CE
5173	.a541		50 0a		bvc $a54d	                bvc notFoundError
5174	.a543		38		sec		                sec
5175	.a544						rtsA544:
5176	.a544		60		rts		                rts

5178							;-------------------------------------------------------------------------

5180	.a545						openFileForReading:
5181	.a545		a9 40		lda #$40	                lda #$40                     ;open for reading
5182	.a547		20 ce ff	jsr $ffce	                jsr OSFIND
5183	.a54a		a8		tay		                tay
5184	.a54b		d0 f7		bne $a544	                bne rtsA544
5185	.a54d						notFoundError:
5186	.a54d		20 ed aa	jsr $aaed	                jsr doFollowingError
5187	>a550		d6 4e 6f 74 20 66 6f 75		                .text $d6,"Not found",0
	>a558		6e 64 00

5189							;-------------------------------------------------------------------------

5191	.a55b						LA55B:
5192	.a55b		a5 c1		lda $c1		                lda $C1
5193	.a55d		d0 05		bne $a564	                bne LA564
5194	.a55f		a2 b1		ldx #$b1	                ldx #$B1
5195	.a561		20 4d aa	jsr $aa4d	                jsr LAA4D
5196	.a564						LA564:
5197	.a564		a0 ff		ldy #$ff	                ldy #$FF
5198	.a566		8c df 03	sty $03df	                sty $03DF
5199	.a569		18		clc		                clc
5200	.a56a		60		rts		                rts

5202	.a56b						LA56B:
5203	.a56b		f0 17		beq $a584	                beq LA584
5204	.a56d		48		pha		                pha
5205	.a56e		a9 07		lda #$07	                lda #fscFileHandleRange
5206	.a570		20 e5 f1	jsr $f1e5	                jsr callFSCV
5207	.a573		68		pla		                pla
5208	.a574		18		clc		                clc
5209	.a575		08		php		                php
5210	.a576		78		sei		                sei
5211	.a577		85 fa		sta $fa		                sta $FA
5212	.a579		c4 fa		cpy $fa		                cpy $FA
5213	.a57b		90 06		bcc $a583	                bcc LA583
5214	.a57d		e4 fa		cpx $fa		                cpx $FA
5215	.a57f		90 06		bcc $a587	                bcc LA587
5216	.a581		f0 04		beq $a587	                beq LA587
5217	.a583						LA583:
5218	.a583		28		plp		                plp
5219	.a584						LA584:
5220	.a584		68		pla		                pla
5221	.a585		68		pla		                pla
5222	.a586		60		rts		                rts

5224	.a587						LA587:
5225	.a587		28		plp		                plp
5226	.a588		a9 00		lda #$00	                lda #$00
5227	.a58a		60		rts		                rts

5229	.a58b						LA58B:
5230	.a58b		ad 56 02	lda $0256	                lda execFileHandle
5231	.a58e		20 6b a5	jsr $a56b	                jsr LA56B
5232	.a591						starEXEC:
5233	.a591		08		php		                php
5234	.a592		5a		phy		                phy
5235	.a593		ac 56 02	ldy $0256	                ldy execFileHandle
5236	.a596		8d 56 02	sta $0256	                sta execFileHandle
5237	.a599		f0 03		beq $a59e	                beq LA59E
5238	.a59b		20 ce ff	jsr $ffce	                jsr OSFIND
5239	.a59e						LA59E:
5240	.a59e		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
5241	.a5a1		7a		ply		                ply
5242	.a5a2		28		plp		                plp
5243	.a5a3		f0 09		beq $a5ae	                beq LA5AE
5244	.a5a5		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
5245	.a5a8		20 45 a5	jsr $a545	                jsr openFileForReading
5246	.a5ab		8d 56 02	sta $0256	                sta execFileHandle
5247	.a5ae						LA5AE:
5248	.a5ae		60		rts		                rts

5250	.a5af						LA5AF:
5251	.a5af		a2 a6		ldx #$a6	                ldx #$A6
5252	.a5b1		20 4d aa	jsr $aa4d	                jsr LAA4D
5253	.a5b4		20 78 a6	jsr $a678	                jsr LA678
5254	.a5b7						LA5B7:
5255	.a5b7		ad ca 03	lda $03ca	                lda $03CA
5256	.a5ba		4a		lsr a		                lsr a
5257	.a5bb		90 03		bcc $a5c0	                bcc LA5C0
5258	.a5bd		4c e3 9f	jmp $9fe3	                jmp L9FE3

5260	.a5c0						LA5C0:
5261	.a5c0		ad dd 03	lda $03dd	                lda $03DD
5262	.a5c3		85 b4		sta $b4		                sta $B4
5263	.a5c5		ad de 03	lda $03de	                lda $03DE
5264	.a5c8		85 b5		sta $b5		                sta $B5
5265	.a5ca		64 b0		stz $b0		                stz $B0
5266	.a5cc		a9 0a		lda #$0a	                lda #$0A
5267	.a5ce		85 b1		sta $b1		                sta $B1
5268	.a5d0		a9 ff		lda #$ff	                lda #$FF
5269	.a5d2		85 b2		sta $b2		                sta $B2
5270	.a5d4		85 b3		sta $b3		                sta $B3
5271	.a5d6		20 d2 a6	jsr $a6d2	                jsr LA6D2
5272	.a5d9		20 a1 a8	jsr $a8a1	                jsr LA8A1
5273	.a5dc		d0 25		bne $a603	                bne LA603
5274	.a5de		ad ff 0a	lda $0aff	                lda $0AFF
5275	.a5e1		8d ec 02	sta $02ec	                sta lastCharacterOfCurrentlyResidentBlock
5276	.a5e4		20 35 aa	jsr $aa35	                jsr LAA35
5277	.a5e7		8e dd 03	stx $03dd	                stx $03DD
5278	.a5ea		8c de 03	sty $03de	                sty $03DE
5279	.a5ed		a2 02		ldx #$02	                ldx #$02
5280	.a5ef						LA5EF:
5281	.a5ef		bd c8 03	lda $03c8,x	                lda $03C8,x
5282	.a5f2		9d e9 02	sta $02e9,x	                sta tapeInputCurrentBlockSize+0,x
5283	.a5f5		ca		dex		                dex
5284	.a5f6		10 f7		bpl $a5ef	                bpl LA5EF
5285	.a5f8		2c eb 02	bit $02eb	                bit blockFlagOfCurrentlyResidentBlock
5286	.a5fb		10 03		bpl $a600	                bpl LA600
5287	.a5fd		20 59 a0	jsr $a059	                jsr LA059
5288	.a600						LA600:
5289	.a600		4c c5 a9	jmp $a9c5	                jmp LA9C5

5291	.a603						LA603:
5292	.a603		20 06 a5	jsr $a506	                jsr LA506
5293	.a606		80 af		bra $a5b7	                bra LA5B7

5295	.a608						LA608:
5296	.a608		c9 2a		cmp #$2a	                cmp #'*'
5297	.a60a		f0 37		beq $a643	                beq LA643
5298	.a60c		c9 23		cmp #$23	                cmp #'#'
5299	.a60e		d0 0f		bne $a61f	                bne LA61F
5300	.a610		ee c6 03	inc $03c6	                inc $03C6
5301	.a613		d0 03		bne $a618	                bne LA618
5302	.a615		ee c7 03	inc $03c7	                inc $03C7
5303	.a618						LA618:
5304	.a618		a2 ff		ldx #$ff	                ldx #$FF
5305	.a61a		2c 4e e3	bit $e34e	                bit valueFF
5306	.a61d		80 51		bra $a670	                bra LA670

5308	.a61f						LA61F:
5309	.a61f		20 77 a1	jsr $a177	                jsr LA177
5310	.a622		20 ed aa	jsr $aaed	                jsr doFollowingError
5311	>a625		d7				                .byte $D7
5312	>a626		42 61 64 20 52 4f 4d		                .text "Bad ROM"
5313	>a62d		00				                .byte 0

5315	.a62e						LA62E:
5317	.a62e		a0 ff		ldy #$ff	                ldy #$FF
5318	.a630		20 5c aa	jsr $aa5c	                jsr LAA5C
5319	.a633		a9 01		lda #$01	                lda #$01
5320	.a635		85 c2		sta $c2		                sta $C2
5321	.a637		20 1c aa	jsr $aa1c	                jsr LAA1C
5322	.a63a						LA63A:
5323	.a63a		20 80 a8	jsr $a880	                jsr LA880
5324	.a63d		a9 03		lda #$03	                lda #$03
5325	.a63f		c5 c2		cmp $c2		                cmp $C2
5326	.a641		d0 f7		bne $a63a	                bne LA63A
5328	.a643						LA643:
5329	.a643		20 46 aa	jsr $aa46	                jsr LAA46
5330	.a646						LA646:
5331	.a646		20 94 a6	jsr $a694	                jsr LA694
5332	.a649		50 1a		bvc $a665	                bvc LA665
5333	.a64b		99 b2 03	sta $03b2,y	                sta $03B2,y
5334	.a64e		f0 06		beq $a656	                beq LA656
5335	.a650		c8		iny		                iny
5336	.a651		c0 0b		cpy #$0b	                cpy #$0B
5337	.a653		d0 f1		bne $a646	                bne LA646
5338	.a655		88		dey		                dey
5339	.a656						LA656:
5340	.a656		a2 0c		ldx #$0c	                ldx #$0C
5341	.a658						LA658:
5342	.a658		20 94 a6	jsr $a694	                jsr LA694
5343	.a65b		50 08		bvc $a665	                bvc LA665
5344	.a65d		9d b2 03	sta $03b2,x	                sta $03B2,x
5345	.a660		e8		inx		                inx
5346	.a661		e0 1f		cpx #$1f	                cpx #$1F
5347	.a663		d0 f3		bne $a658	                bne LA658
5348	.a665						LA665:
5349	.a665		98		tya		                tya
5350	.a666		aa		tax		                tax
5351	.a667		9e b2 03	stz $03b2,x	                stz $03B2,x
5352	.a66a		a5 be		lda $be		                lda $BE
5353	.a66c		05 bf		ora $bf		                ora $BF
5354	.a66e		85 c1		sta $c1		                sta $C1
5355	.a670						LA670:
5356	.a670		20 44 aa	jsr $aa44	                jsr LAA44
5357	.a673		84 c2		sty $c2		                sty $C2
5358	.a675		8a		txa		                txa
5360	.a676		d0 54		bne $a6cc	                bne LA6CC
5364	.a678						LA678:
5366	.a678		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5367	.a67b		f0 b1		beq $a62e	                beq LA62E
5369	.a67d						LA67D:
5370	.a67d		20 10 f7	jsr $f710	                jsr LF710
5371	.a680		c9 2b		cmp #$2b	                cmp #$2B
5372	.a682		d0 84		bne $a608	                bne LA608
5373	.a684		a9 08		lda #$08	                lda #$08
5374	.a686		25 e2		and $e2		                and $E2
5375	.a688		f0 03		beq $a68d	                beq LA68D
5376	.a68a		20 5d a0	jsr $a05d	                jsr LA05D
5377	.a68d						LA68D:
5378	.a68d		20 01 f7	jsr $f701	                jsr LF701
5379	.a690		90 eb		bcc $a67d	                bcc LA67D
5380	.a692		b8		clv		                clv
5381	.a693		60		rts		                rts

5383	.a694						LA694:
5385	.a694		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5386	.a697		f0 0d		beq $a6a6	                beq LA6A6
5388	.a699		da		phx		                phx
5389	.a69a		5a		phy		                phy
5390	.a69b		20 10 f7	jsr $f710	                jsr LF710
5391	.a69e		85 bd		sta $bd		                sta $BD
5392	.a6a0		a9 ff		lda #$ff	                lda #$FF
5393	.a6a2		85 c0		sta $c0		                sta $C0
5394	.a6a4		7a		ply		                ply
5395	.a6a5		fa		plx		                plx
5396	.a6a6						LA6A6:
5397	.a6a6		20 78 a7	jsr $a778	                jsr LA778
5398	.a6a9						LA6A9:
5400	.a6a9		08		php		                php
5401	.a6aa		48		pha		                pha
5402	.a6ab		38		sec		                sec
5403	.a6ac		66 cb		ror $cb		                ror $CB
5404	.a6ae		45 bf		eor $bf		                eor $BF
5405	.a6b0		85 bf		sta $bf		                sta $BF
5406	.a6b2						LA6B2:
5407	.a6b2		a5 bf		lda $bf		                lda $BF
5408	.a6b4		18		clc		                clc
5409	.a6b5		10 0b		bpl $a6c2	                bpl LA6C2
5410	.a6b7		49 08		eor #$08	                eor #$08
5411	.a6b9		85 bf		sta $bf		                sta $BF
5412	.a6bb		a5 be		lda $be		                lda $BE
5413	.a6bd		49 10		eor #$10	                eor #$10
5414	.a6bf		85 be		sta $be		                sta $BE
5415	.a6c1		38		sec		                sec
5416	.a6c2						LA6C2:
5417	.a6c2		26 be		rol $be		                rol $BE
5418	.a6c4		26 bf		rol $bf		                rol $BF
5419	.a6c6		46 cb		lsr $cb		                lsr $CB
5420	.a6c8		d0 e8		bne $a6b2	                bne LA6B2
5421	.a6ca		68		pla		                pla
5422	.a6cb		28		plp		                plp
5424	.a6cc						LA6CC:
5425	.a6cc		60		rts		                rts

5428	.a6cd						LA6CD:                                       ;AAA6 in MOS 5.00
5429	.a6cd		20 76 a7	jsr $a776	                jsr LA776
5430	.a6d0		80 d7		bra $a6a9	                bra LA6A9

5433	.a6d2						LA6D2:                                       ;AAAB in MOS 5.00
5434	.a6d2		a9 00		lda #$00	                lda #$00
5435	.a6d4						LA6D4:
5436	.a6d4		85 bd		sta $bd		                sta $BD
5437	.a6d6		a2 00		ldx #$00	                ldx #$00
5438	.a6d8		64 bc		stz $bc		                stz $BC
5439	.a6da		50 0a		bvc $a6e6	                bvc LA6E6
5440	.a6dc		ad c8 03	lda $03c8	                lda $03C8
5441	.a6df		0d c9 03	ora $03c9	                ora $03C9
5442	.a6e2		f0 02		beq $a6e6	                beq LA6E6
5443	.a6e4		a2 04		ldx #$04	                ldx #$04
5444	.a6e6						LA6E6:
5445	.a6e6		86 c2		stx $c2		                stx $C2
5446	.a6e8						rtsAAC1:
5447	.a6e8		60		rts		                rts

5450	.a6e9						LA6E9:                                       ;AAC2 in MOS 5.00
5451	.a6e9		08		php		                php
5452	.a6ea		a2 03		ldx #$03	                ldx #$03
5453	.a6ec						LA6EC:
5454	.a6ec		9e cb 03	stz $03cb,x	                stz $03CB,x
5455	.a6ef		ca		dex		                dex
5456	.a6f0		10 fa		bpl $a6ec	                bpl LA6EC
5457	.a6f2		ad c6 03	lda $03c6	                lda $03C6
5458	.a6f5		0d c7 03	ora $03c7	                ora $03C7
5459	.a6f8		d0 05		bne $a6ff	                bne LA6FF
5460	.a6fa		20 84 a7	jsr $a784	                jsr LA784
5461	.a6fd		80 03		bra $a702	                bra LA702

5463	.a6ff						LA6FF:
5464	.a6ff		20 88 a7	jsr $a788	                jsr LA788
5465	.a702						LA702:
5466	.a702		a9 2a		lda #$2a	                lda #$2A
5467	.a704		85 bd		sta $bd		                sta $BD
5468	.a706		20 44 aa	jsr $aa44	                jsr LAA44
5469	.a709		20 16 aa	jsr $aa16	                jsr LAA16
5470	.a70c		20 78 a7	jsr $a778	                jsr LA778
5471	.a70f		88		dey		                dey
5472	.a710						LA710:
5473	.a710		c8		iny		                iny
5474	.a711		b9 d2 03	lda $03d2,y	                lda $03D2,y
5475	.a714		99 b2 03	sta $03b2,y	                sta $03B2,y
5476	.a717		20 cd a6	jsr $a6cd	                jsr LA6CD
5477	.a71a		d0 f4		bne $a710	                bne LA710
5478	.a71c		a2 0c		ldx #$0c	                ldx #$0C
5479	.a71e						LA71E:
5480	.a71e		bd b2 03	lda $03b2,x	                lda $03B2,x
5481	.a721		20 cd a6	jsr $a6cd	                jsr LA6CD
5482	.a724		e8		inx		                inx
5483	.a725		e0 1d		cpx #$1d	                cpx #$1D
5484	.a727		d0 f5		bne $a71e	                bne LA71E
5485	.a729		20 6f a7	jsr $a76f	                jsr LA76F
5486	.a72c		ad c8 03	lda $03c8	                lda $03C8
5487	.a72f		0d c9 03	ora $03c9	                ora $03C9
5488	.a732		f0 1b		beq $a74f	                beq LA74F
5489	.a734		20 46 aa	jsr $aa46	                jsr LAA46
5490	.a737						LA737:
5492	.a737		20 bc aa	jsr $aabc	                jsr isTubeAddress
5493	.a73a		f0 05		beq $a741	                beq LA741                   ; taken if notTube address
5494	.a73c		ad e5 fe	lda $fee5	                lda tube.data3              ; load from Tube
5495	.a73f		80 02		bra $a743	                bra LA743
5496	.a741						LA741:
5498	.a741		b1 b0		lda ($b0),y	                lda ($B0),y                  ; load from I/O RAM
5499	.a743						LA743:
5500	.a743		20 cd a6	jsr $a6cd	                jsr LA6CD
5501	.a746		c8		iny		                iny
5502	.a747		cc c8 03	cpy $03c8	                cpy $03C8
5503	.a74a		d0 eb		bne $a737	                bne LA737
5504	.a74c		20 6f a7	jsr $a76f	                jsr LA76F
5505	.a74f						LA74F:
5506	.a74f		20 78 a7	jsr $a778	                jsr LA778
5507	.a752		20 78 a7	jsr $a778	                jsr LA778
5508	.a755		20 12 aa	jsr $aa12	                jsr resetACIA
5509	.a758		a9 01		lda #$01	                lda #$01
5510	.a75a		20 8a a7	jsr $a78a	                jsr LA78A
5511	.a75d		28		plp		                plp
5512	.a75e		20 ab a7	jsr $a7ab	                jsr LA7AB
5513	.a761		2c ca 03	bit $03ca	                bit $03CA
5514	.a764		10 08		bpl $a76e	                bpl LA76E
5515	.a766		08		php		                php
5516	.a767		20 84 a7	jsr $a784	                jsr LA784
5517	.a76a		20 56 a0	jsr $a056	                jsr LA056
5518	.a76d		28		plp		                plp
5519	.a76e						LA76E:
5520	.a76e		60		rts		                rts

5522	.a76f						LA76F:
5524	.a76f		a5 bf		lda $bf		                lda $BF
5528	.a771		20 76 a7	jsr $a776	                jsr LA776
5530	.a774		a5 be		lda $be		                lda $BE
5534	.a776						LA776:
5535	.a776		85 bd		sta $bd		                sta $BD

5538	.a778						LA778:
5539	.a778		20 80 a8	jsr $a880	                jsr LA880
5540	.a77b		24 c0		bit $c0		                bit $C0
5541	.a77d		10 f9		bpl $a778	                bpl LA778
5542	.a77f		64 c0		stz $c0		                stz $C0
5543	.a781		a5 bd		lda $bd		                lda $BD
5544	.a783		60		rts		                rts

5547	.a784						LA784:
5548	.a784		a9 32		lda #$32	                lda #$32
5549	.a786		80 02		bra $a78a	                bra LA78A

5551	.a788						LA788:
5552	.a788		a5 c7		lda $c7		                lda $C7
5553	.a78a						LA78A:
5554	.a78a		a2 05		ldx #$05	                ldx #$05
5555	.a78c						LA78C:
5556	.a78c		8d 40 02	sta $0240	                sta cfsTimeoutCounter
5557	.a78f						LA78F:
5558	.a78f		20 80 a8	jsr $a880	                jsr LA880
5559	.a792		2c 40 02	bit $0240	                bit cfsTimeoutCounter
5560	.a795		10 f8		bpl $a78f	                bpl LA78F
5561	.a797		ca		dex		                dex
5562	.a798		d0 f2		bne $a78c	                bne LA78C
5563	.a79a		60		rts		                rts

5566	.a79b						LA79B:
5567	.a79b		ad c6 03	lda $03c6	                lda $03C6
5568	.a79e		0d c7 03	ora $03c7	                ora $03C7
5569	.a7a1		f0 05		beq $a7a8	                beq LA7A8
5570	.a7a3		2c df 03	bit $03df	                bit $03DF
5571	.a7a6		10 03		bpl $a7ab	                bpl LA7AB
5572	.a7a8						LA7A8:
5573	.a7a8		20 59 a0	jsr $a059	                jsr LA059
5574	.a7ab						LA7AB:
5575	.a7ab		a0 00		ldy #$00	                ldy #$00
5576	.a7ad		64 ba		stz $ba		                stz $BA
5577	.a7af		ad ca 03	lda $03ca	                lda $03CA
5578	.a7b2		8d df 03	sta $03df	                sta $03DF
5579	.a7b5		20 1b ef	jsr $ef1b	                jsr LEF1B
5580	.a7b8		f0 67		beq $a821	                beq LA821
5581	.a7ba		a9 0d		lda #$0d	                lda #$0D
5582	.a7bc		20 ee ff	jsr $ffee	                jsr OSWRCH
5583	.a7bf						LA7BF:
5584	.a7bf		b9 b2 03	lda $03b2,y	                lda $03B2,y
5585	.a7c2		f0 10		beq $a7d4	                beq LA7D4
5586	.a7c4		c9 20		cmp #$20	                cmp #$20
5587	.a7c6		90 04		bcc $a7cc	                bcc LA7CC
5588	.a7c8		c9 7f		cmp #$7f	                cmp #$7F
5589	.a7ca		90 02		bcc $a7ce	                bcc LA7CE
5590	.a7cc						LA7CC:
5591	.a7cc		a9 3f		lda #$3f	                lda #$3F
5592	.a7ce						LA7CE:
5593	.a7ce		20 ee ff	jsr $ffee	                jsr OSWRCH
5594	.a7d1		c8		iny		                iny
5595	.a7d2		d0 eb		bne $a7bf	                bne LA7BF

5597	.a7d4						LA7D4:
5599	.a7d4		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5600	.a7d7		f0 04		beq $a7dd	                beq LA7DD
5602	.a7d9		24 bb		bit $bb		                bit $BB
5603	.a7db		50 44		bvc $a821	                bvc LA821
5604	.a7dd						LA7DD:
5605	.a7dd		20 0c 9f	jsr $9f0c	                jsr printSpace
5606	.a7e0		c8		iny		                iny
5607	.a7e1		c0 0b		cpy #$0b	                cpy #$0B
5608	.a7e3		90 ef		bcc $a7d4	                bcc LA7D4
5609	.a7e5		ad c6 03	lda $03c6	                lda $03C6
5610	.a7e8		aa		tax		                tax
5611	.a7e9		20 6a a8	jsr $a86a	                jsr printHexByte
5612	.a7ec		2c ca 03	bit $03ca	                bit $03CA
5613	.a7ef		10 30		bpl $a821	                bpl LA821
5614	.a7f1		8a		txa		                txa
5615	.a7f2		18		clc		                clc
5616	.a7f3		6d c9 03	adc $03c9	                adc $03C9
5617	.a7f6		20 65 a8	jsr $a865	                jsr printSpaceThenPrintHexByte
5618	.a7f9						LA7F9:
5619	.a7f9		ad c8 03	lda $03c8	                lda $03C8
5620	.a7fc		20 6a a8	jsr $a86a	                jsr printHexByte
5621	.a7ff		24 bb		bit $bb		                bit $BB
5622	.a801		50 1e		bvc $a821	                bvc LA821
5623	.a803		a2 04		ldx #$04	                ldx #$04
5624	.a805						LA805:
5625	.a805		20 0c 9f	jsr $9f0c	                jsr printSpace
5626	.a808		ca		dex		                dex
5627	.a809		d0 fa		bne $a805	                bne LA805
5628	.a80b		a2 0f		ldx #$0f	                ldx #$0F
5629	.a80d		20 15 a8	jsr $a815	                jsr LA815
5630	.a810		20 0c 9f	jsr $9f0c	                jsr printSpace
5631	.a813		a2 13		ldx #$13	                ldx #$13
5632	.a815						LA815:
5633	.a815		a0 04		ldy #$04	                ldy #$04
5634	.a817						LA817:
5635	.a817		bd b2 03	lda $03b2,x	                lda $03B2,x
5636	.a81a		20 6a a8	jsr $a86a	                jsr printHexByte
5637	.a81d		ca		dex		                dex
5638	.a81e		88		dey		                dey
5639	.a81f		d0 f6		bne $a817	                bne LA817
5640	.a821						LA821:
5641	.a821		60		rts		                rts

5644	.a822						LA822:
5645	.a822		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5646	.a825		f0 06		beq $a82d	                beq LA82D
5647	.a827		20 ca a9	jsr $a9ca	                jsr LA9CA
5648	.a82a		4c ed fb	jmp $fbed	                jmp badCommandError

5650	.a82d						LA82D:
5651	.a82d		20 5a aa	jsr $aa5a	                jsr LAA5A
5652	.a830		20 a0 aa	jsr $aaa0	                jsr LAAA0
5653	.a833		20 1b ef	jsr $ef1b	                jsr LEF1B
5654	.a836		f0 e9		beq $a821	                beq LA821
5655	.a838		20 23 a9	jsr $a923	                jsr LA923
5656	>a83b		52 45 43 4f 52 44 20 74		                .text "RECORD then RETURN"
	>a843		68 65 6e 20 52 45 54 55 52 4e
5657	>a84d		00				                .byte $00

5659	.a84e						LA84E:
5660	.a84e		20 80 a8	jsr $a880	                jsr LA880
5661	.a851		20 e0 ff	jsr $ffe0	                jsr OSRDCH
5662	.a854		c9 0d		cmp #$0d	                cmp #$0D
5663	.a856		d0 f6		bne $a84e	                bne LA84E
5664	.a858		4c e7 ff	jmp $ffe7	                jmp OSNEWL

5667							;-------------------------------------------------------------------------

5673							;-------------------------------------------------------------------------

5676	.a85b						LA85B:
5677	.a85b		a2 fd		ldx #$fd	                ldx #$FD
5678	.a85d						LA85D:
5679	.a85d		f6 b4		inc $b4,x	                inc $B4,x
5680	.a85f		d0 03		bne $a864	                bne LA864
5681	.a861		e8		inx		                inx
5682	.a862		d0 f9		bne $a85d	                bne LA85D
5683	.a864						LA864:
5684	.a864		60		rts		                rts

5686							;-------------------------------------------------------------------------

5688	.a865						printSpaceThenPrintHexByte:
5689	.a865		48		pha		                pha
5690	.a866		20 0c 9f	jsr $9f0c	                jsr printSpace
5691	.a869		68		pla		                pla
5692	.a86a						printHexByte:
5693	.a86a		48		pha		                pha
5697	.a86b		4a		lsr a		                lsr a
5698	.a86c		4a		lsr a		                lsr a
5699	.a86d		4a		lsr a		                lsr a
5700	.a86e		4a		lsr a		                lsr a
5702	.a86f		20 73 a8	jsr $a873	                jsr printHexDigit
5703	.a872		68		pla		                pla
5704	.a873						printHexDigit:
5705	.a873		29 0f		and #$0f	                and #$0F
5706	.a875		09 30		ora #$30	                ora #'0'                     ;+'0'
5707	.a877		c9 3a		cmp #$3a	                cmp #'9'+1
5708	.a879		90 02		bcc $a87d	                bcc LA87D                    ;taken if <='9'
5709	.a87b		69 06		adc #$06	                adc #'A'-('9'+1)-1           ;adjust - -1 because C set
5710	.a87d						LA87D:
5711	.a87d		4c ee ff	jmp $ffee	                jmp OSWRCH

5713							;-------------------------------------------------------------------------

5715	.a880						LA880:
5716	.a880		08		php		                php
5717	.a881		24 eb		bit $eb		                bit $EB
5718	.a883		30 04		bmi $a889	                bmi LA889
5719	.a885		24 ff		bit $ff		                bit $FF
5720	.a887		30 02		bmi $a88b	                bmi LA88B
5721	.a889						LA889:
5722	.a889		28		plp		                plp
5723	.a88a		60		rts		                rts

5725	.a88b						LA88B:
5726	.a88b		20 77 a1	jsr $a177	                jsr LA177
5727	.a88e		20 bb a9	jsr $a9bb	                jsr LA9BB
5728	.a891						escapeError:
5729	.a891		a9 7e		lda #$7e	                lda #$7E
5730	.a893		20 f4 ff	jsr $fff4	                jsr OSBYTE
5731	.a896		20 ed aa	jsr $aaed	                jsr doFollowingError
5732	>a899		11				                .byte $11
5733	>a89a		45 73 63 61 70 65		                .text "Escape"
5734	>a8a0		00				                .byte $00

5736							;-------------------------------------------------------------------------

5738	.a8a1						LA8A1:
5739	.a8a1		98		tya		                tya
5740	.a8a2		f0 0d		beq $a8b1	                beq LA8B1
5741	.a8a4		20 23 a9	jsr $a923	                jsr LA923
5742	>a8a7		0d				                .byte $0D
5743	>a8a8		4c 6f 61 64 69 6e 67		                .text "Loading"
5744	>a8af		0d				                .byte $0D
5745	>a8b0		00				                .byte $00
5746	.a8b1						LA8B1:
5747	.a8b1		64 ba		stz $ba		                stz $BA                      ; :
5748	.a8b3		a2 ff		ldx #$ff	                ldx #$FF
5749	.a8b5		a5 c1		lda $c1		                lda $C1
5750	.a8b7		d0 0b		bne $a8c4	                bne LA8C4
5751	.a8b9		20 5c a9	jsr $a95c	                jsr LA95C
5752	.a8bc		08		php		                php
5753	.a8bd		a2 ff		ldx #$ff	                ldx #$FF
5754	.a8bf		a0 11		ldy #$11	                ldy #<fileError
5755							                .cwarn (>fileError)!=(>dataError),"must be on same page"
5756	.a8c1		28		plp		                plp
5757	.a8c2		d0 16		bne $a8da	                bne LA8DA
5758	.a8c4						LA8C4:
5759	.a8c4		a0 04		ldy #$04	                ldy #<dataError
5760	.a8c6		a5 c1		lda $c1		                lda $C1
5761	.a8c8		d0 10		bne $a8da	                bne LA8DA
5762	.a8ca		ad c6 03	lda $03c6	                lda $03C6
5763	.a8cd		c5 b4		cmp $b4		                cmp $B4
5764	.a8cf		d0 07		bne $a8d8	                bne LA8D8
5765	.a8d1		ad c7 03	lda $03c7	                lda $03C7
5766	.a8d4		c5 b5		cmp $b5		                cmp $B5
5767	.a8d6		f0 0b		beq $a8e3	                beq LA8E3
5768	.a8d8						LA8D8:
5769	.a8d8		a0 1e		ldy #$1e	                ldy #<blockError
5770							                .cwarn (>blockError)!=(>dataError),"must be on same page"
5771	.a8da						LA8DA:
5772	.a8da		5a		phy		                phy
5773	.a8db		da		phx		                phx
5774	.a8dc		20 a8 a7	jsr $a7a8	                jsr LA7A8
5775	.a8df		fa		plx		                plx
5776	.a8e0		7a		ply		                ply
5777	.a8e1		80 10		bra $a8f3	                bra LA8F3

5779	.a8e3						LA8E3:
5780	.a8e3		da		phx		                phx
5781	.a8e4		20 9b a7	jsr $a79b	                jsr LA79B
5782	.a8e7		20 a0 a9	jsr $a9a0	                jsr LA9A0
5783	.a8ea		fa		plx		                plx
5784	.a8eb		a5 be		lda $be		                lda $BE
5785	.a8ed		05 bf		ora $bf		                ora $BF
5786	.a8ef		f0 79		beq $a96a	                beq LA96A
5787	.a8f1		a0 04		ldy #$04	                ldy #<dataError
5788	.a8f3						LA8F3:
5789	.a8f3		a9 ab		lda #$ab	                lda #>dataError
5790	.a8f5		c6 ba		dec $ba		                dec $BA
5791	.a8f7		48		pha		                pha
5792	.a8f8		24 eb		bit $eb		                bit $EB
5793	.a8fa		30 0d		bmi $a909	                bmi LA909
5794	.a8fc		8a		txa		                txa
5796	.a8fd		2d 47 02	and $0247	                and cfsRFSFSSwitch
5797	.a900						LA900:
5799	.a900		d0 07		bne $a909	                bne LA909
5800	.a902		8a		txa		                txa
5801	.a903		29 11		and #$11	                and #$11
5802	.a905		25 bb		and $bb		                and $BB
5803	.a907		f0 0f		beq $a918	                beq LA918
5804	.a909						LA909:
5805	.a909		68		pla		                pla
5806	.a90a		85 b9		sta $b9		                sta $B9
5807	.a90c		84 b8		sty $b8		                sty $B8
5808	.a90e		20 8b a5	jsr $a58b	                jsr LA58B
5809	.a911		46 eb		lsr $eb		                lsr $EB
5810	.a913		20 b1 a9	jsr $a9b1	                jsr LA9B1
5811	.a916		80 3d		bra $a955	                bra LA955

5813	.a918						LA918:
5814	.a918		98		tya		                tya
5815	.a919		18		clc		                clc
5816	.a91a		69 03		adc #$03	                adc #$03
5817	.a91c		a8		tay		                tay
5818	.a91d		90 03		bcc $a922	                bcc LA922
5819	.a91f		68		pla		                pla
5820	.a920		1a		inc a		                inc a
5821	.a921		48		pha		                pha
5822	.a922						LA922:
5823	.a922		5a		phy		                phy
5824	.a923						LA923:
5825	.a923		20 1b ef	jsr $ef1b	                jsr LEF1B
5826	.a926		a8		tay		                tay

5828							;-------------------------------------------------------------------------
5829							;
5830							; Print 0-terminated message using address from stack.
5831							;
5832							; entry:
5833							;
5834							; S=[StrL; StrH] - where Str = (address of string)-1
5835							; Y = 0 to print message; otherwise, don't print message
5836							;
5837	.a927						printFollowingMessage:                       ;
5838	.a927		68		pla		                pla
5839	.a928		85 b8		sta $b8		                sta printMessageAddress+0
5840	.a92a		68		pla		                pla
5841	.a92b		85 b9		sta $b9		                sta printMessageAddress+1
5842	.a92d		5a		phy		                phy                          ;save initial Y
5843	.a92e		98		tya		                tya                          ;Z=1 if Y=0
5844	.a92f		08		php		                php                          ;save Y=0 state
5845	.a930						fetchNextChar:
5846	.a930		e6 b8		inc $b8		                inc printMessageAddress+0
5847	.a932		d0 02		bne $a936	                bne +
5848	.a934		e6 b9		inc $b9		                inc printMessageAddress+1
5849	.a936						+
5850	.a936		b2 b8		lda ($b8)	                lda (printMessageAddress)   ;fetch next char to print
5851	.a938		f0 13		beq $a94d	                beq printingFinished        ;branch taken if last char
5852	.a93a		28		plp		                plp                         ;restore Y=0 state
5853	.a93b		08		php		                php                         ;save Y=0 state
5854	.a93c		f0 f2		beq $a930	                beq fetchNextChar ;branch taken if Y=0 - i.e., skip the
5855							                                  ;printing

5857							                ; printMessageAddress is in the $b0-$bf area, so it
5858							                ; needs saving in case there's a *SPOOL going on.
5859	.a93e		a4 b8		ldy $b8		                ldy printMessageAddress+0
5860	.a940		5a		phy		                phy
5861	.a941		a4 b9		ldy $b9		                ldy printMessageAddress+1
5862	.a943		20 e3 ff	jsr $ffe3	                jsr OSASCI
5863	.a946		84 b9		sty $b9		                sty printMessageAddress+1
5864	.a948		7a		ply		                ply
5865	.a949		84 b8		sty $b8		                sty printMessageAddress+0

5867	.a94b		80 e3		bra $a930	                bra fetchNextChar

5869	.a94d						printingFinished:
5870	.a94d		28		plp		                plp                          ;discard Y=0 state
5871	.a94e		e6 b8		inc $b8		                inc printMessageAddress+0
5872	.a950		d0 02		bne $a954	                bne +
5873	.a952		e6 b9		inc $b9		                inc printMessageAddress+1
5874	.a954						+
5875	.a954		7a		ply		                ply                          ;restore initial Y
5876	.a955						LA955:
5877	.a955		6c b8 00	jmp ($00b8)	                jmp (printMessageAddress)

5879	.a958						alwaysPrintFollowingMessage:
5880	.a958		a0 01		ldy #$01	                ldy #$01
5881	.a95a		80 cb		bra $a927	                bra printFollowingMessage

5883							;-------------------------------------------------------------------------

5885	.a95c						LA95C:
5886	.a95c		a2 ff		ldx #$ff	                ldx #$FF
5887	.a95e						LA95E:
5888	.a95e		e8		inx		                inx
5889	.a95f		bd d2 03	lda $03d2,x	                lda $03D2,x
5890	.a962		d0 07		bne $a96b	                bne LA96B
5891	.a964		8a		txa		                txa
5892	.a965		f0 03		beq $a96a	                beq LA96A
5893	.a967		bd b2 03	lda $03b2,x	                lda $03B2,x
5894	.a96a						LA96A:
5895	.a96a		60		rts		                rts

5897	.a96b						LA96B:
5898	.a96b		20 71 ea	jsr $ea71	                jsr isLetter
5899	.a96e		5d b2 03	eor $03b2,x	                eor $03B2,x
5900	.a971		b0 02		bcs $a975	                bcs LA975
5901	.a973		29 df		and #$df	                and #$DF
5902	.a975						LA975:
5903	.a975		f0 e7		beq $a95e	                beq LA95E
5904	.a977						LA977:
5905	.a977		60		rts		                rts

5907	.a978						LA978:
5908	.a978		a5 ba		lda $ba		                lda $BA
5909	.a97a		f0 21		beq $a99d	                beq LA99D
5910	.a97c		8a		txa		                txa
5911	.a97d		f0 1e		beq $a99d	                beq LA99D
5912	.a97f		a9 22		lda #$22	                lda #$22
5913	.a981		24 bb		bit $bb		                bit $BB
5914	.a983		f0 18		beq $a99d	                beq LA99D
5916	.a985		20 12 aa	jsr $aa12	                jsr resetACIA
5918	.a988		a8		tay		                tay
5919	.a989		20 27 a9	jsr $a927	                jsr printFollowingMessage
5920	>a98c		0d				                .byte $0D
5921	>a98d		07				                .byte $07
5922	>a98e		52 65 77 69 6e 64 20 74		                .text "Rewind tape"
	>a996		61 70 65
5923	>a999		0d				                .byte $0D
5924	>a99a		0d				                .byte $0D
5925	>a99b		00				                .byte $00
5926	.a99c		60		rts		                rts

5928	.a99d						LA99D:
5929	.a99d		20 5d a0	jsr $a05d	                jsr LA05D
5930	.a9a0						LA9A0:
5931	.a9a0		a5 c2		lda $c2		                lda $C2
5932	.a9a2		f0 d3		beq $a977	                beq LA977
5933	.a9a4		20 80 a8	jsr $a880	                jsr LA880
5935	.a9a7		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5936	.a9aa		f0 f4		beq $a9a0	                beq LA9A0
5941	.a9ac		20 5d a4	jsr $a45d	                jsr LA45D
5943	.a9af		80 ef		bra $a9a0	                bra LA9A0

5945	.a9b1						LA9B1:
5946	.a9b1		20 1b ef	jsr $ef1b	                jsr LEF1B
5947	.a9b4		f0 05		beq $a9bb	                beq LA9BB
5948	.a9b6						LA9B6:
5949	.a9b6		a9 07		lda #$07	                lda #$07
5950	.a9b8		20 ee ff	jsr $ffee	                jsr OSWRCH
5951	.a9bb						LA9BB:
5953	.a9bb		ad 7a 02	lda $027a	                lda tubePresence
5954	.a9be		f0 05		beq $a9c5	                beq LA9C5                  ; taken if copro not present
5955	.a9c0		a9 80		lda #$80	                lda #$80                   ; $80 = CFS/RFS release Tube
5956	.a9c2		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
5958	.a9c5						LA9C5:
5960	.a9c5		a2 00		ldx #$00	                ldx #$00
5961	.a9c7		20 61 aa	jsr $aa61	                jsr LAA61
5962	.a9ca						LA9CA:
5963	.a9ca		08		php		                php
5964	.a9cb		78		sei		                sei
5965	.a9cc		ad 82 02	lda $0282	                lda serialULARegister
5966	.a9cf		8d 10 fe	sta $fe10	                sta SERPROC+0
5967	.a9d2		64 ea		stz $ea		                stz $EA
5968	.a9d4		80 01		bra $a9d7	                bra LA9D7

5970							;-------------------------------------------------------------------------

5972	.a9d6						resetACIAThenRewriteControlRegister:
5973	.a9d6		08		php		                php
5974	.a9d7						LA9D7:
5975	.a9d7		20 12 aa	jsr $aa12	                jsr resetACIA
5976	.a9da		ad 50 02	lda $0250	                lda aciaControlRegister
5977	.a9dd		4c 21 e9	jmp $e921	                jmp writeACIAControlRegisterAndCopy

5979							;-------------------------------------------------------------------------

5981	.a9e0						LA9E0:
5982	.a9e0		28		plp		                plp
5983	.a9e1		24 ff		bit $ff		                bit $FF
5984	.a9e3		10 18		bpl $a9fd	                bpl LA9FD
5986	.a9e5		60		rts		                rts

5988	.a9e6						LA9E6:
5989	.a9e6		a5 e3		lda $e3		                lda $E3
5990	.a9e8		0a		asl a		                asl a
5991	.a9e9		0a		asl a		                asl a
5992	.a9ea		0a		asl a		                asl a
5993	.a9eb		0a		asl a		                asl a
5994	.a9ec		85 bb		sta $bb		                sta $BB
5998	.a9ee		ad d1 03	lda $03d1	                lda $03D1
5999	.a9f1		80 08		bra $a9fb	                bra LA9FB

6002	.a9f3						LA9F3:
6003	.a9f3		a5 e3		lda $e3		                lda $E3
6004	.a9f5		29 f0		and #$f0	                and #$F0
6005	.a9f7		85 bb		sta $bb		                sta $BB
6007	.a9f9		a9 06		lda #$06	                lda #$06
6008	.a9fb						LA9FB:
6009	.a9fb		85 c7		sta $c7		                sta $C7
6010	.a9fd						LA9FD:
6011	.a9fd		58		cli		                cli
6012	.a9fe						LA9FE:
6013	.a9fe		08		php		                php
6014	.a9ff		78		sei		                sei
6015	.aa00						LAA00:
6016	.aa00		2c 4f 02	bit $024f	                bit rs423Busy
6017	.aa03		10 db		bpl $a9e0	                bpl LA9E0
6018	.aa05		a5 ea		lda $ea		                lda $EA
6019	.aa07		30 d7		bmi $a9e0	                bmi LA9E0
6020	.aa09		a9 01		lda #$01	                lda #$01
6021	.aa0b		85 ea		sta $ea		                sta $EA
6022	.aa0d		20 12 aa	jsr $aa12	                jsr resetACIA
6023	.aa10		28		plp		                plp
6025	.aa11		60		rts		                rts

6027							;-------------------------------------------------------------------------

6030	.aa12						resetACIA:
6031	.aa12		a9 03		lda #$03	                lda #ACIA.control.reset
6032	.aa14		80 1b		bra $aa31	                bra writeACIAControlRegister

6035							;-------------------------------------------------------------------------

6037	.aa16						LAA16:
6039	.aa16		a9 30		lda #$30	                lda #$30
6040	.aa18		85 ca		sta $ca		                sta $CA
6041	.aa1a		80 13		bra $aa2f	                bra LAA2F
6043	.aa1c						LAA1C:
6045	.aa1c		a9 05		lda #$05	                lda #$05
6046	.aa1e		8d 10 fe	sta $fe10	                sta SERPROC+0
6047	.aa21		a2 ff		ldx #$ff	                ldx #$FF
6048	.aa23						LAA23:
6049	.aa23		ca		dex		                dex
6050	.aa24		d0 fd		bne $aa23	                bne LAA23
6052	.aa26		64 ca		stz $ca		                stz $CA
6054	.aa28		a9 d0		lda #$d0	                lda #$D0
6055	.aa2a						LAA2A:
6056	.aa2a		a0 85		ldy #$85	                ldy #$85
6057	.aa2c		8c 10 fe	sty $fe10	                sty SERPROC+0
6058	.aa2f						LAA2F:
6059	.aa2f		05 c6		ora $c6		                ora $C6
6060	.aa31						writeACIAControlRegister:
6061	.aa31		8d 08 fe	sta $fe08	                sta ACIA+0
6063	.aa34		60		rts		                rts

6065							;-------------------------------------------------------------------------

6067	.aa35						LAA35:
6068	.aa35		ae c6 03	ldx $03c6	                ldx $03C6
6069	.aa38		ac c7 03	ldy $03c7	                ldy $03C7
6070	.aa3b		e8		inx		                inx
6071	.aa3c		86 b4		stx $b4		                stx $B4
6072	.aa3e		d0 01		bne $aa41	                bne LAA41
6073	.aa40		c8		iny		                iny
6074	.aa41						LAA41:
6075	.aa41		84 b5		sty $b5		                sty $B5
6076	.aa43		60		rts		                rts

6078	.aa44						LAA44:
6079	.aa44		64 c0		stz $c0		                stz $C0
6080	.aa46						LAA46:
6081	.aa46		a0 00		ldy #$00	                ldy #$00
6082	.aa48		64 be		stz $be		                stz $BE
6083	.aa4a		64 bf		stz $bf		                stz $BF
6084	.aa4c		60		rts		                rts

6086	.aa4d						LAA4D:
6087	.aa4d		a0 ff		ldy #$ff	                ldy #$FF
6088	.aa4f						LAA4F:
6089	.aa4f		c8		iny		                iny
6090	.aa50		e8		inx		                inx
6091	.aa51		bd 00 03	lda $0300,x	                lda $0300,x
6092	.aa54		99 d2 03	sta $03d2,y	                sta $03D2,y
6093	.aa57		d0 f6		bne $aa4f	                bne LAA4F
6094	.aa59		60		rts		                rts

6097	.aa5a						LAA5A:
6098	.aa5a		a0 00		ldy #$00	                ldy #$00
6099	.aa5c						LAA5C:
6100	.aa5c		58		cli		                cli
6101	.aa5d		a2 01		ldx #$01	                ldx #$01
6102	.aa5f		84 c3		sty $c3		                sty $C3
6103	.aa61						LAA61:
6104	.aa61		a9 89		lda #$89	                lda #$89
6105	.aa63		a4 c3		ldy $c3		                ldy $C3
6106	.aa65		4c f4 ff	jmp $fff4	                jmp OSBYTE

6109							; Check if TAPE/ROM channel is open
6110							; ---------------------------------
6111							; Y=handle to check, A=status mask to use
6112	.aa68						LAA68:
6113	.aa68		5a		phy		                phy
6114	.aa69		20 8d aa	jsr $aa8d	                jsr LAA8D
6115	.aa6c		7a		ply		                ply
6117	.aa6d		b0 5a		bcs $aac9	                bcs rtsAAC9                    ; Channel open, exit
6121	.aa6f		cc 57 02	cpy $0257	                cpy spoolFileHandle                    ; Not SPOOL handle
6122	.aa72		d0 05		bne $aa79	                bne LAA79
6123	.aa74		9c 57 02	stz $0257	                stz spoolFileHandle                    ; Clear the SPOOL handle
6124	.aa77		80 08		bra $aa81	                bra LAA81
6125	.aa79						LAA79:
6126	.aa79		cc 56 02	cpy $0256	                cpy execFileHandle                    ; Not EXEC handle
6127	.aa7c		d0 03		bne $aa81	                bne LAA81
6128	.aa7e		9c 56 02	stz $0256	                stz execFileHandle                    ; Clear the EXEC handle
6129	.aa81						LAA81:
6130	.aa81		20 ed aa	jsr $aaed	                jsr doFollowingError                    ; Generate error
6131	>aa84		de				                .byte $DE
6132	>aa85		43 68 61 6e 6e 65 6c		                .text "Channel"
6133	.aa8c		00		brk #		                brk

6135	.aa8d						LAA8D:
6136	.aa8d		48		pha		                pha                          ; Toggle channel with CFS/RFS switch
6137	.aa8e		98		tya		                tya
6141	.aa8f		4d 47 02	eor $0247	                eor cfsRFSFSSwitch
6143	.aa92		a8		tay		                tay                          ; If CFS=unchanged, if RFS 1/2/3->3/0/1
6144	.aa93		68		pla		                pla
6145	.aa94		25 e2		and $e2		                and $E2                      ; Mask with open channels bitmask
6146	.aa96		4a		lsr a		                lsr a                        ; Move 'input open if tested' into Carry
6147	.aa97		88		dey		                dey                          ; Exit if testing CFS#1 or RFS#3
6148	.aa98		f0 05		beq $aa9f	                beq rtsAA9F
6149	.aa9a		4a		lsr a		                lsr a                        ; Move 'output open if tested' into Carry
6150	.aa9b		88		dey		                dey                          ; Exit if testing CFS#2
6151	.aa9c		f0 01		beq $aa9f	                beq rtsAA9F
6152	.aa9e		18		clc		                clc                          ; Otherwise, Carry=Not Open
6153	.aa9f						rtsAA9F:
6154	.aa9f		60		rts		                rts

6157	.aaa0						LAAA0:
6158	.aaa0		a9 10		lda #$10	                lda #$10
6159	.aaa2		80 86		bra $aa2a	                bra LAA2A

6163	.aaa4						initiateCFSRFSHostToParasiteTransfer:
6164	.aaa4		a9 01		lda #$01	                lda #tubeReasonMultiByteHostToParasite
6165	.aaa6						LAAA6:
6166	.aaa6		20 bc aa	jsr $aabc	                jsr isTubeAddress
6167	.aaa9		f0 1e		beq $aac9	                beq rtsAAC9
6168	.aaab		8a		txa		                txa                          ; restore transfer type
6169	.aaac		a2 b0		ldx #$b0	                ldx #$B0
6170	.aaae		a0 00		ldy #$00	                ldy #$00
6171	.aab0						initiateCFSRFSTubeTransfer:
6172	.aab0		48		pha		                pha                         ; save transfer type
6173	.aab1		a9 c0		lda #$c0	                lda #$C0                    ; $c0 = CFS/RFS claim Tube
6174	.aab3						-
6175	.aab3		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
6176	.aab6		90 fb		bcc $aab3	                bcc -
6177	.aab8		68		pla		                pla                          ; restore transfer type
6178	.aab9		4c 06 04	jmp $0406	                jmp tubeHost.entryPoint      ; initiate transfer

6180	.aabc						isTubeAddress:
6181	.aabc		aa		tax		                tax
6182	.aabd		a5 b2		lda $b2		                lda $B2
6183	.aabf		25 b3		and $b3		                and $B3                 ; $ff if address is $FFFFxxxx
6184	.aac1		1a		inc a		                inc a                   ; $00 if address is $FFFFxxxx
6185	.aac2		f0 05		beq $aac9	                beq rtsAAC9               ; taken if not Tube address
6186	.aac4		ad 7a 02	lda $027a	                lda tubePresence
6187	.aac7		29 80		and #$80	                and #$80            ; $80 if $FFFFxxxx and Tube active
6188	.aac9						rtsAAC9:
6189	.aac9		60		rts		                rts

6192	.aaca						LAACA:
6193	.aaca		a0 05		ldy #$05	                ldy #$05
6194	.aacc						LAACC:
6195	.aacc		b1 cc		lda ($cc),y	                lda ($CC),y
6196	.aace		d0 07		bne $aad7	                bne LAAD7
6197	.aad0		c8		iny		                iny
6198	.aad1		c0 08		cpy #$08	                cpy #$08
6199	.aad3		90 f7		bcc $aacc	                bcc LAACC
6200	.aad5						LAAD5:
6201	.aad5		b1 cc		lda ($cc),y	                lda ($CC),y
6202	.aad7						LAAD7:
6203	.aad7		3a		dec a		                dec a
6204	.aad8		91 cc		sta ($cc),y	                sta ($CC),y
6205	.aada		88		dey		                dey
6206	.aadb		c0 05		cpy #$05	                cpy #$05
6207	.aadd		b0 f6		bcs $aad5	                bcs LAAD5
6208	.aadf		60		rts		                rts

6210	.aae0						LAAE0:
6211	.aae0		a0 08		ldy #$08	                ldy #$08
6212	.aae2		a9 00		lda #$00	                lda #$00
6213	.aae4						LAAE4:
6214	.aae4		11 cc		ora ($cc),y	                ora ($CC),y
6215	.aae6		88		dey		                dey
6216	.aae7		c0 05		cpy #$05	                cpy #$05
6217	.aae9		b0 f9		bcs $aae4	                bcs LAAE4
6218	.aaeb		aa		tax		                tax
6219	.aaec		60		rts		                rts

6221	.aaed						doFollowingError:
6222	.aaed		78		sei		                sei
6223	.aaee		68		pla		                pla
6224	.aaef		85 fa		sta $fa		                sta SEIWKA+0
6225	.aaf1		68		pla		                pla
6226	.aaf2		85 fb		sta $fb		                sta SEIWKA+1
6227	.aaf4		9c 00 01	stz $0100	                stz $0100
6228	.aaf7		a0 00		ldy #$00	                ldy #$00
6229	.aaf9						-
6230	.aaf9		c8		iny		                iny
6231	.aafa		b1 fa		lda ($fa),y	                lda (SEIWKA),y
6232	.aafc		99 00 01	sta $0100,y	                sta $0100,y
6233	.aaff		d0 f8		bne $aaf9	                bne -
6234	.ab01		4c 00 01	jmp $0100	                jmp $0100

6238							                .include "cfs_errors.s65"

:9	;******  Processing file: src/cfs_errors.s65

1							                ; The MOS code assumes all these error routines have
2							                ; the same MSB of their start address. (There's a
3							                ; .cerror that checks for this.) They all just fit
4							                ; into 32 bytes, so 32-byte alignment will do the
5							                ; trick.
6							                ;
7							                ; (The alignment directive doesn't take effect in any
8							                ; of the default MOS builds. It springs into action to
9							                ; accommodate modifications to other parts of the
10							                ; code.)

15	.ab04						dataError:
16	.ab04		20 ed aa	jsr $aaed	                jsr doFollowingError
17	>ab07		d8 0d 44 61 74 61 3f 00		                .text $d8,13,"Data?",0
18	.ab0f		80 19		bra $ab2a	                bra LAB2A

20	.ab11						fileError:
21	.ab11		20 ed aa	jsr $aaed	                jsr doFollowingError
22	>ab14		db 0d 46 69 6c 65 3f 00		                .text $db,13,"File?",0
23	.ab1c		80 0c		bra $ab2a	                bra LAB2A

25	.ab1e						blockError:
26	.ab1e		20 ed aa	jsr $aaed	                jsr doFollowingError
27	>ab21		da 0d 42 6c 6f 63 6b 3f		                .text $da,13,"Block?",0
	>ab29		00
28	.ab2a						LAB2A:
29	.ab2a		4c 78 a9	jmp $a978	                jmp LA978

:6	;******  Return to file: src/terminal.s65

6242							;-------------------------------------------------------------------------
6243							;
6244							; Tube host code
6245							;
6246							; See http://mdfs.net/Software/Tube/M128/Host320.lst
6247							;
6248							; I mostly just copied JGH's comments here.

6250	.ab2d						tubeHost: .block          ;tube code

6252	.ab2d						zeroPageCode: .block
6253							                .logical tubeZeroPageCodeAddr

6256							                .include "tubeHost_brkHandlerAndIdleLoop.s65"

:17	;******  Processing file: src/tubeHost_brkHandlerAndIdleLoop.s65

1	.ab2d	0016					brkHandler:
2	.ab2d	0016	a9 ff		lda #$ff	                lda #$FF
3	.ab2f	0018	20 6c 06	jsr $066c	                jsr sendR4       ;send $ff via R4 to interrupt copro
4	.ab32	001b	ad e3 fe	lda $fee3	                lda tube.data2   ;get ACK byte from copro
5	.ab35	001e	a9 00		lda #$00	                lda #$00
6	.ab37	0020	20 61 06	jsr $0661	                jsr sendR2A       ;send $00 via R2 to specify ERROR
7	.ab3a	0023	a8		tay		                tay               ;Y=0
8	.ab3b	0024	b1 fd		lda ($fd),y	                lda ($FD),y       ;get error number
9	.ab3d	0026	20 61 06	jsr $0661	                jsr sendR2A       ;send error number via R2
10	.ab40	0029					-
11	.ab40	0029	c8		iny		                iny             ;next char
12	.ab41	002a	b1 fd		lda ($fd),y	                lda ($FD),y     ;fetch error string char
13	.ab43	002c	20 61 06	jsr $0661	                jsr sendR2A     ;send via R2
14	.ab46	002f	aa		tax		                tax             ;set N/Z as per error string char
15	.ab47	0030	d0 f7		bne $0029	                bne -           ;repeat until terminating $00 sent
16	.ab49	0032					idleStartup:
17	.ab49	0032	a2 ff		ldx #$ff	                ldx #$FF
18	.ab4b	0034	9a		txs		                txs             ;clear stack
19	.ab4c	0035	58		cli		                cli
20	.ab4d	0036					idleLoop:
21	.ab4d	0036	2c e0 fe	bit $fee0	                bit tube.status1 ;is there a char in R1?
22	.ab50	0039	10 06		bpl $0041	                bpl LAB58        ;branch taken if no char in R1
23	.ab52	003b					handleOSWRCH:
24	.ab52	003b	ad e1 fe	lda $fee1	                lda tube.data1  ;get char from R1
25	.ab55	003e	20 ee ff	jsr $ffee	                jsr OSWRCH      ;pass to OSWRCH
26	.ab58	0041					LAB58:
27	.ab58	0041	2c e2 fe	bit $fee2	                bit tube.status2 ;is there a command in R2?
28	.ab5b	0044	10 f0		bpl $0036	                bpl idleLoop     ;branch taken if no command in R2
29	.ab5d	0046	2c e0 fe	bit $fee0	                bit tube.status1 ;is there a char in R1?
30	.ab60	0049	30 f0		bmi $003b	                bmi handleOSWRCH ;branch taken if char in R1
31	.ab62	004b	ae e3 fe	ldx $fee3	                ldx tube.data2   ;get command from R2

39	.ab65	004e	86 51		stx $51		                stx callCommandRoutine+1 ;use as index into command
40							                                         ;table
41	.ab67	0050					callCommandRoutine:
42	.ab67	0050	6c 00 05	jmp ($0500)	                jmp (tubeHost.commandRoutines)

:6	;******  Return to file: src/terminal.s65

6260							                ; this doesn't need an initial value, so in the
6261							                ; refresh versions it's best to have it in the
6262							                ; uninitialised zero page area, in case that would
6263							                ; allow the zeroPageCode block to become empty,
6264							                ; eliminating the need to copy it.
6265	.ab6a	0053					languageParasiteAddr:
6266	>ab6a	0053	00 80 00 00			                .dword $8000

6329							                ; Strictly speaking, the code could use up to $8f, but
6330							                ; safer not to use memory that the Acorn MOS didn't.
6331							                .cwarn *>$57
6332							                .here
6333							                .endblock

6335	.ab6e						codePage0:
6336							                .logical tubeHostAddr
6337	.ab6e	0400					copyLanguage:
6338	.ab6e	0400	4c c2 04	jmp $04c2	                jmp LAC30

6340	.ab71	0403					copyEscapeStatus:
6341	.ab71	0403	4c 75 06	jmp $0675	                jmp LADDA

6343							; Tube transfer/claim/release
6344	.ab74	0406					entryPoint:
6345	.ab74	0406	c9 80		cmp #$80	                cmp #$80
6346	.ab76	0408	90 29		bcc $0433	                bcc dataTransfer
6347	.ab78	040a	c9 c0		cmp #$c0	                cmp #$C0
6348	.ab7a	040c	b0 18		bcs $0426	                bcs claim
6349	.ab7c	040e	09 40		ora #$40	                ora #$40
6350	.ab7e	0410	c5 15		cmp $15		                cmp $15
6351	.ab80	0412	d0 1e		bne $0432	                bne done
6352	.ab82	0414					release:
6353	.ab82	0414	08		php		                php
6354	.ab83	0415	78		sei		                sei
6355	.ab84	0416	a9 05		lda #$05	                lda #$05
6356	.ab86	0418	20 6c 06	jsr $066c	                jsr sendR4
6357	.ab89	041b	20 6a 06	jsr $066a	                jsr sendR4TubeClaimantID
6358	.ab8c	041e	28		plp		                plp
6359	.ab8d	041f					resetTubeClaim:
6360	.ab8d	041f	a9 80		lda #$80	                lda #$80
6361	.ab8f	0421	85 15		sta $15		                sta tubeClaimantID
6362	.ab91	0423	85 14		sta $14		                sta tubeNotClaimed
6363	.ab93	0425	60		rts		                rts

6365	.ab94	0426					claim:
6366	.ab94	0426	06 14		asl $14		                asl tubeNotClaimed    ;test if Tube free
6367	.ab96	0428	b0 06		bcs $0430	                bcs claim2         ;taken if Tube free - with C=1 and
6368							                                   ;tube marked as claimed
6369	.ab98	042a	c5 15		cmp $15		                cmp tubeClaimantID
6370	.ab9a	042c	f0 04		beq $0432	                beq done       ;taken with C=1 if already claimed
6371	.ab9c	042e	18		clc		                clc            ;signal claim failure
6372	.ab9d	042f	60		rts		                rts

6374	.ab9e	0430					claim2:
6375	.ab9e	0430	85 15		sta $15		                sta tubeClaimantID ; store claimant ID
6376	.aba0	0432					done:
6377	.aba0	0432	60		rts		                rts

6379	.aba1	0433					dataTransfer:
6380	.aba1	0433	08		php		                php
6381	.aba2	0434	78		sei		                sei
6382	.aba3	0435	84 13		sty $13		                sty tubeTransferAddr+1
6383	.aba5	0437	86 12		stx $12		                stx tubeTransferAddr+0
6384	.aba7	0439	20 6c 06	jsr $066c	                jsr sendR4      ;send reason code to interrupt copro
6385	.abaa	043c	aa		tax		                tax             ;save reason code
6386	.abab	043d	a0 03		ldy #$03	                ldy #$03        ;will send 4 bytes
6387	.abad	043f	20 6a 06	jsr $066a	                jsr sendR4TubeClaimantID ;send Tube claimant ID
6388	.abb0	0442					-
6389	.abb0	0442	b1 12		lda ($12),y	                lda (tubeTransferAddr),y
6390	.abb2	0444	20 6c 06	jsr $066c	                jsr sendR4
6391	.abb5	0447	88		dey		                dey
6392	.abb6	0448	10 f8		bpl $0442	                bpl -

6394							                ; disable R3 FIFO, disable R3 NMI
6395	.abb8	044a	a0 18		ldy #$18	                ldy #tube.status1.V|tube.status1.M
6396	.abba	044c	8c e0 fe	sty $fee0	                sty tube.status1

6398							                ; disable/enable other per-transfer type flags as
6399							                ; appropriate.
6400	.abbd	044f	bd 18 05	lda $0518,x	                lda dataTransferFlags,x
6401	.abc0	0452	8d e0 fe	sta $fee0	                sta tube.status1 ;STPVMJIQ

6403	.abc3	0455	4a		lsr a		                lsr a           ;0STPVMJI Q
6404	.abc4	0456	4a		lsr a		                lsr a           ;00STPVMJ I
6405	.abc5	0457	90 06		bcc $045f	                bcc +           ;branch taken if CoPro->I/O transfer

6407							                ; Read R3 twice to delay and empty FIFO
6408	.abc7	0459	2c e5 fe	bit $fee5	                bit tube.data3
6409	.abca	045c	2c e5 fe	bit $fee5	                bit tube.data3
6410	.abcd	045f					+
6411	.abcd	045f	20 6c 06	jsr $066c	                jsr sendR4      ;send value to synchronize
6412	.abd0	0462					-
6413	.abd0	0462	2c e6 fe	bit $fee6	                bit tube.status4
6414	.abd3	0465	50 fb		bvc $0462	                bvc -
6415	.abd5	0467	b0 0d		bcs $0476	                bcs LABE4       ;branch taken if I/O->CoPro transfer
6416	.abd7	0469	e0 04		cpx #$04	                cpx #$04        ;$04 = execute in CoPro
6417	.abd9	046b	d0 11		bne $047e	                bne LABEC       ;taken if not execute in CoPro
6418	.abdb	046d					LABDB:
6419	.abdb	046d	20 14 04	jsr $0414	                jsr release
6420	.abde	0470	20 61 06	jsr $0661	                jsr sendR2A
6421	.abe1	0473	4c 32 00	jmp $0032	                jmp tubeHostIdleStartup

6423	.abe4	0476					LABE4:
6424	.abe4	0476	4a		lsr a		                lsr a            ;000STPVM J
6425	.abe5	0477	90 05		bcc $047e	                bcc LABEC        ;branch taken if J=0
6426	.abe7	0479	a0 88		ldy #$88	                ldy #tube.status1.S|tube.status1.M
6427	.abe9	047b	8c e0 fe	sty $fee0	                sty tube.status1
6428	.abec	047e					LABEC:
6429	.abec	047e	28		plp		                plp
6430	.abed	047f	60		rts		                rts

6432	.abee	0480					LABEE:
6433	.abee	0480	ae 8d 02	ldx $028d	                ldx lastBREAKType            ;get last BREAK type
6434	.abf1	0483	f0 e8		beq $046d	                beq LABDB   ;if soft break, release Tube, send $80 via
6435							                            ;R2, and enter idle loop.

6437							; The current language is not copied across the Tube on soft Break,
6438							; only on Power-On Break and Hard Break, or when entered explicitly
6439							; with OSBYTE 142.

6441	.abf3	0485					enterNewLanguage: .proc
6442	.abf3	0485	a9 ff		lda #$ff	                lda #$FF
6443	.abf5	0487	20 06 04	jsr $0406	                jsr tubeHost.entryPoint ;claim with ID=$3f
6444	.abf8	048a	90 f9		bcc $0485	                bcc enterNewLanguage    ;repeat until claimed
6445	.abfa	048c	20 c9 04	jsr $04c9	                jsr getLanguageParasiteAddr ;sort out addresses

6455	.abfd	048f					transferPage:
6461	.abfd	048f	08		php		                php
6462	.abfe	0490	78		sei		                sei

6464							                ; initiate I/O->CoPro 256 bytes, then transfer the
6465							                ; next 256 bytes of the language ROM.
6466	.abff	0491	a9 07		lda #$07	                lda #tubeReason256BytesHostToParasite
6467	.ac01	0493	20 bb 04	jsr $04bb	                jsr doTube

6472	.ac04	0496	a0 00		ldy #$00	                ldy #$00
6480	.ac06	0498	64 00		stz $00		                stz tubeLanguageHostAddr+0
6481	.ac08	049a					transferPageLoop:
6482	.ac08	049a	b1 00		lda ($00),y	                lda (tubeLanguageHostAddr),y
6483	.ac0a	049c	8d e5 fe	sta $fee5	                sta tube.data3
6484	.ac0d	049f	ea		nop		                nop
6485	.ac0e	04a0	ea		nop		                nop
6486	.ac0f	04a1	ea		nop		                nop
6488	.ac10	04a2	c8		iny		                iny
6489	.ac11	04a3	d0 f5		bne $049a	                bne transferPageLoop
6491	.ac13	04a5	28		plp		                plp

6493							                ; advance to next dest page.
6494	.ac14	04a6	e6 54		inc $54		                inc tubeLanguageParasiteAddr+1
6495	.ac16	04a8	d0 06		bne $04b0	                bne +
6496	.ac18	04aa	e6 55		inc $55		                inc tubeLanguageParasiteAddr+2
6497	.ac1a	04ac	d0 02		bne $04b0	                bne +
6498	.ac1c	04ae	e6 56		inc $56		                inc tubeLanguageParasiteAddr+3
6499	.ac1e	04b0					+

6502	.ac1e	04b0	e6 01		inc $01		                inc tubeLanguageHostAddr+1 ;next source page
6504	.ac20	04b2	24 01		bit $01		                bit tubeLanguageHostAddr+1
6505	.ac22	04b4	50 d9		bvc $048f	                bvc transferPage ;branch taken if source page $c0 not
6506							                                 ;reached yet

6508							                ; copy done - execute language in parasite
6512	.ac24	04b6	20 c9 04	jsr $04c9	                jsr getLanguageParasiteAddr
6514	.ac27	04b9	a9 04		lda #$04	                lda #tubeReasonExecute

6516							                ; call Tube entry point with whatever reason code,
6517							                ; supplying language parasite address as the parasite
6518							                ; address.
6519	.ac29	04bb					doTube:
6520	.ac29	04bb	a0 00		ldy #$00	                ldy #>tubeLanguageParasiteAddr
6521	.ac2b	04bd	a2 53		ldx #$53	                ldx #<tubeLanguageParasiteAddr
6522	.ac2d	04bf	4c 06 04	jmp $0406	                jmp tubeHost.entryPoint
6523							                .pend

6525	.ac30	04c2					LAC30:
6526	.ac30	04c2	58		cli		                cli
6527	.ac31	04c3	b0 c0		bcs $0485	                bcs enterNewLanguage
6528	.ac33	04c5	d0 b9		bne $0480	                bne LABEE
6529	.ac35	04c7	80 61		bra $052a	                bra LAC8F

6531	.ac37	04c9					getLanguageParasiteAddr: .proc
6532	.ac37	04c9	a9 80		lda #$80	                lda #$80
6533	.ac39	04cb	85 54		sta $54		                sta tubeLanguageParasiteAddr+1 ;$xxxx80xx
6534	.ac3b	04cd	85 01		sta $01		                sta tubeLanguageHostAddr+1     ;$80xx
6535	.ac3d	04cf	a9 20		lda #$20	                lda #$20
6536	.ac3f	04d1	2d 06 80	and $8006	                and $8006  ;test parasite address flag
6537	.ac42	04d4	a8		tay		                tay        ;Y=0 if $8000, Y=$20 if parasite address
6541	.ac43	04d5	84 53		sty $53		                sty tubeLanguageParasiteAddr+0
6543	.ac45	04d7	f0 19		beq $04f2	                beq LAC60       ;branch taken if good to go with A=0
6544							                                ;and Y=0

6546	.ac47	04d9	ae 07 80	ldx $8007	                ldx $8007       ;get copyright offset
6547							                ; skip copyright message
6548	.ac4a	04dc					-
6549	.ac4a	04dc	e8		inx		                inx
6550	.ac4b	04dd	bd 00 80	lda $8000,x	                lda $8000,x
6551	.ac4e	04e0	d0 fa		bne $04dc	                bne -

6553	.ac50	04e2	bd 01 80	lda $8001,x	                lda $8000+1,x
6554	.ac53	04e5	85 53		sta $53		                sta tubeLanguageParasiteAddr+0
6555	.ac55	04e7	bd 02 80	lda $8002,x	                lda $8000+2,x
6556	.ac58	04ea	85 54		sta $54		                sta tubeLanguageParasiteAddr+1
6557	.ac5a	04ec	bc 03 80	ldy $8003,x	                ldy $8000+3,x
6558	.ac5d	04ef	bd 04 80	lda $8004,x	                lda $8000+4,x
6559	.ac60	04f2					LAC60:
6560							                ; Y = parasite address bits 16-23
6561							                ; A = parasite address bits 24-31
6565	.ac60	04f2	85 56		sta $56		                sta tubeLanguageParasiteAddr+3
6566	.ac62	04f4	84 55		sty $55		                sty tubeLanguageParasiteAddr+2
6567	.ac64	04f6	60		rts		                rts

6570							                .endproc
6571	.ac65	04f7					page4End:
6572							                .here

6574	.ac65						codePages12:
6575							                .logical tubeHostAddr+256

6577							; names of the indexes here come from app note 004
6578	.ac65	0500					commandRoutines:
6580	>ac65	0500	35 05				                .word doRDCH    ;RDCHNO = $00
6581	>ac67	0502	88 05				                .word doCLI     ;CLINO = $02
6582	>ac69	0504	da 05				                .word doSBYT    ;SBYTNO = $04
6583	>ac6b	0506	eb 05				                .word doBYTE    ;BYTENO = $06
6584	>ac6d	0508	07 06				                .word doWORD    ;WORDNO = $08
6585	>ac6f	050a	36 06				                .word doRDLN    ;RDLNNO = $0a
6586	>ac71	050c	59 05				                .word doARGS     ;ARGSNO = $0c
6587	>ac73	050e	2c 05				                .word doBGET     ;BGETNO = $0e
6588	>ac75	0510	20 05				                .word doBPUT     ;BPUTNO = $10
6589	>ac77	0512	3f 05				                .word doFIND     ;FINDNO = $12
6590	>ac79	0514	b2 05				                .word doFILE    ;FILENO = $14
6591	>ac7b	0516	9a 05				                .word doGBPB     ;GBPBNO = $16

6593							                ; Tube data transfer flags
6594	.ac7d	0518					dataTransferFlags:
6595							                ; 0 - CoPro->I/O bytes
6596							                ;
6597							                ; Enable: PIRQ from R3, PIRQ from R1
6598	>ac7d	0518	86				                .byte tube.status1.S|tube.status1.J|tube.status1.I

6600							                ; 1 - I/O->CoPro bytes
6601							                ;
6602							                ; Enable: PNMI from R3
6603	>ac7e	0519	88				                .byte tube.status1.S|tube.status1.M

6605							                ; 2 - CoPro->I/O words
6606							                ;
6607							                ; Enable: 2-byte R3, PIRQ from R2, PIRQ from R1
6608	>ac7f	051a	96				                .byte tube.status1.S|tube.status1.V|tube.status1.J|tube.status1.I

6610							                ; 3 - I/O->CoPro words
6611							                ;
6612							                ; Enable: 2-byte R3, PNMI from R3
6613	>ac80	051b	98				                .byte tube.status1.S|tube.status1.V|tube.status1.M

6615							                ; 4 - Execute in CoPro
6616							                ;
6617							                ; Disable: 2-byte R3, PNMI from R3
6618	>ac81	051c	18				                .byte tube.status1.V|tube.status1.M

6620							                ; 5 - Reserved
6621							                ;
6622							                ; Disable: 2-byte R3, PNMI from R3
6623	>ac82	051d	18				                .byte tube.status1.V|tube.status1.M

6625							                ; 6 - CoPro->I/O 256 bytes
6626							                ;
6627							                ; Enable: PIRQ from R1
6628	>ac83	051e	82				                .byte tube.status1.S|tube.status1.I

6630							                ; 7 - I/O->CoPro 256 bytes
6631							                ;
6632							                ; Disable: 2-byte R3, PNMI from R3
6633	>ac84	051f	18				                .byte tube.status1.V|tube.status1.M

6635	.ac85	0520					doBPUT:
6636	.ac85	0520	20 a1 06	jsr $06a1	                jsr recvR2      ;Receive file handle
6637	.ac88	0523	a8		tay		                tay             ;Y = file handle
6638	.ac89	0524	20 a1 06	jsr $06a1	                jsr recvR2      ;Receive byte
6639	.ac8c	0527	20 d4 ff	jsr $ffd4	                jsr OSBPUT      ;Do OSBPUT
6640	.ac8f	052a					LAC8F:
6641	.ac8f	052a	80 62		bra $058e	                bra sendR27FThenGoIdle

6643	.ac91	052c					doBGET:
6644	.ac91	052c	20 a1 06	jsr $06a1	                jsr recvR2      ;Receive file handle
6645	.ac94	052f	a8		tay		                tay             ;Y = file handle
6646	.ac95	0530	20 d7 ff	jsr $ffd7	                jsr OSBGET      ;Do OSBGET
6647	.ac98	0533					LAC98:
6648	.ac98	0533	80 03		bra $0538	                bra sendR2CAThenGoIdle

6650	.ac9a	0535					doRDCH:
6651	.ac9a	0535	20 e0 ff	jsr $ffe0	                jsr OSRDCH      ;Do OSRDCH
6652	.ac9d	0538					sendR2CAThenGoIdle:
6653	.ac9d	0538	6a		ror a		                ror a           ;set A bit 7 as per carry
6654	.ac9e	0539	20 61 06	jsr $0661	                jsr sendR2A     ;send via R2
6655	.aca1	053c	2a		rol a		                rol a           ;restore A
6656	.aca2	053d	80 51		bra $0590	                bra sendR2AThenGoIdle

6658	.aca4	053f					doFIND: .proc
6659	.aca4	053f	20 a1 06	jsr $06a1	                jsr recvR2            ;Receive reason code
6660	.aca7	0542	f0 0a		beq $054e	                beq close             ;taken if A=$00 - CLOSE#
6661	.aca9	0544	48		pha		                pha                   ;save reason code
6662	.acaa	0545	20 74 05	jsr $0574	                jsr recvR2String      ;receive file name
6663	.acad	0548	68		pla		                pla                   ;restore reason code
6664	.acae	0549	20 ce ff	jsr $ffce	                jsr OSFIND            ;call OSFIND
6665	.acb1	054c	80 42		bra $0590	                bra sendR2AThenGoIdle

6667	.acb3	054e					close:
6668	.acb3	054e	20 a1 06	jsr $06a1	                jsr recvR2      ;Receive file handle
6669	.acb6	0551	a8		tay		                tay             ;Y = file handle
6670	.acb7	0552	a9 00		lda #$00	                lda #$00        ;A = $00 - CLOSE#
6671	.acb9	0554	20 ce ff	jsr $ffce	                jsr OSFIND      ;call OSFIND
6672	.acbc	0557	80 35		bra $058e	                bra sendR27FThenGoIdle
6673							                .pend

6675							;-------------------------------------------------------------------------
6676							;
6677							; Handle a Tube OSARGS request.
6678							;
6679							; [Tube p24]
6680							;
6681	.acbe	0559					doARGS:
6682	.acbe	0559	20 a1 06	jsr $06a1	                jsr recvR2                   ;receive file handle
6683	.acc1	055c	a8		tay		                tay                          ;Y = file handle
6684	.acc2	055d	a2 04		ldx #$04	                ldx #$04
6685	.acc4	055f	20 93 06	jsr $0693	                jsr recvR2N ;receive 4 bytes OSARGS data, + operation code
6686	.acc7	0562	20 da ff	jsr $ffda	                jsr OSARGS  ;call OSARGS
6687	.acca	0565	20 61 06	jsr $0661	                jsr sendR2A ;send OSARGS result

6689							                ; send 4 bytes OSARGS data
6690	.accd	0568	a2 03		ldx #$03	                ldx #$03
6691	.accf	056a					-
6695	.accf	056a	b5 00		lda $00,x	                lda $00,x
6697	.acd1	056c	20 61 06	jsr $0661	                jsr sendR2A
6698	.acd4	056f	ca		dex		                dex
6699	.acd5	0570	10 f8		bpl $056a	                bpl -

6701	.acd7	0572	80 24		bra $0598	                bra goIdle_0

6703							;-------------------------------------------------------------------------
6704							;
6705							; Receive a CR-terminated string over the Tube via R2.
6706							;
6707							; exit:
6708							; YX = pointer to received string (here, always $0700)
6709							;
6710	.acd9	0574					recvR2String: .proc
6711	.acd9	0574	a2 00		ldx #$00	                ldx #$00
6712	.acdb	0576	a0 00		ldy #$00	                ldy #$00        ;index
6713	.acdd	0578					-
6714	.acdd	0578	20 a1 06	jsr $06a1	                jsr recvR2      ;get next string char
6715	.ace0	057b	99 00 07	sta $0700,y	                sta tubeStringBuffer,y     ;store in string buffer
6716	.ace3	057e	c8		iny		                iny
6717	.ace4	057f	f0 04		beq $0585	                beq +           ;taken if too many bytes received
6718	.ace6	0581	c9 0d		cmp #$0d	                cmp #$0D
6719	.ace8	0583	d0 f3		bne $0578	                bne -           ;taken if end of string data not reached
6720	.acea	0585					+
6721	.acea	0585	a0 07		ldy #$07	                ldy #>tubeStringBuffer
6723	.acec	0587	60		rts		                rts
6724							                .pend

6726							;-------------------------------------------------------------------------
6727							;
6728							; Handle a Tube OSCLI request.
6729							;
6730							; [Tube p22]
6731							;
6732	.aced	0588					doCLI:
6733	.aced	0588	20 74 05	jsr $0574	                jsr recvR2String
6734	.acf0	058b	20 f7 ff	jsr $fff7	                jsr OSCLI
6735	.acf3	058e					sendR27FThenGoIdle:
6736	.acf3	058e	a9 7f		lda #$7f	                lda #$7F
6737	.acf5	0590					sendR2AThenGoIdle:
6738	.acf5	0590					-
6739	.acf5	0590	2c e2 fe	bit $fee2	                bit tube.status2
6740	.acf8	0593	50 fb		bvc $0590	                bvc -
6741	.acfa	0595	8d e3 fe	sta $fee3	                sta tube.data2
6742	.acfd	0598					goIdle_0:
6743	.acfd	0598	80 4e		bra $05e8	                bra goIdle_1

6745							;-------------------------------------------------------------------------
6746							;
6747							; Handle a Tube OSGBPB request.
6748							;
6749							; [Tube p25]
6750							;
6751	.acff	059a					doGBPB:
6752	.acff	059a	a2 0d		ldx #$0d	                ldx #size(OSGBPBParameterBlock)
6754	.ad01	059c	20 93 06	jsr $0693	                jsr recvR2N     ;receive parameter block + reason code
6755	.ad04	059f	a0 00		ldy #$00	                ldy #>tubeOSGBPBParameterBlock
6756	.ad06	05a1	20 d1 ff	jsr $ffd1	                jsr OSGBPB      ;call OSGBPB
6757	.ad09	05a4	48		pha		                pha             ;save OSGBPB A result

6759							                ; Send updated OSGBPB parameter block.
6760	.ad0a	05a5	a2 0c		ldx #$0c	                ldx #size(OSGBPBParameterBlock)-1
6761	.ad0c	05a7					-
6765	.ad0c	05a7	b5 00		lda $00,x	                lda tubeOSGBPBParameterBlock,x
6767	.ad0e	05a9	20 61 06	jsr $0661	                jsr sendR2A
6768	.ad11	05ac	ca		dex		                dex
6769	.ad12	05ad	10 f8		bpl $05a7	                bpl -
6770	.ad14	05af	68		pla		                pla                          ;restore OSGBPB A result
6771	.ad15	05b0	80 86		bra $0538	                bra sendR2CAThenGoIdle       ;send OSGBPB full result

6773							;-------------------------------------------------------------------------
6774							;
6775							; Handle a Tube OSFILE request.
6776							;
6777							; [Tube p24]
6778							;
6779	.ad17	05b2					doFILE: .proc
6780							                ; receive non-name part of OSFILE parameter block
6781	.ad17	05b2	a2 10		ldx #$10	                ldx #size(OSFILEParameterBlock)-2
6782	.ad19	05b4					-
6783	.ad19	05b4	20 a1 06	jsr $06a1	                jsr recvR2
6787	.ad1c	05b7	95 01		sta $01,x	                sta tubeOSFILEParameterBlock.addresses-1,x
6789	.ad1e	05b9	ca		dex		                dex
6790	.ad1f	05ba	d0 f8		bne $05b4	                bne -
6791	.ad21	05bc	20 74 05	jsr $0574	                jsr recvR2String
6796	.ad24	05bf	86 00		stx $00		                stx tubeOSFILEParameterBlock+0
6797	.ad26	05c1	84 01		sty $01		                sty tubeOSFILEParameterBlock+1
6799	.ad28	05c3	a0 00		ldy #$00	                ldy #>tubeOSFILEParameterBlock
6801	.ad2a	05c5	20 a1 06	jsr $06a1	                jsr recvR2                   ;receive OSFILE reason code
6802	.ad2d	05c8	20 dd ff	jsr $ffdd	                jsr OSFILE                   ;call OSFILE
6803	.ad30	05cb	20 61 06	jsr $0661	                jsr sendR2A                  ;send OSFILE result

6805							                ; send non-name part of updated OSFILE parameter block
6806	.ad33	05ce	a2 10		ldx #$10	                ldx #size(OSFILEParameterBlock)-2
6807	.ad35	05d0					-
6811	.ad35	05d0	b5 01		lda $01,x	                lda tubeOSFILEParameterBlock.addresses-1,x
6813	.ad37	05d2	20 61 06	jsr $0661	                jsr sendR2A
6814	.ad3a	05d5	ca		dex		                dex
6815	.ad3b	05d6	d0 f8		bne $05d0	                bne -
6816	.ad3d	05d8	80 0e		bra $05e8	                bra goIdle_1
6817							                .pend

6819							;-------------------------------------------------------------------------
6820							;
6821							; Handle a Tube small (A<$80) OSBYTE.
6822							;
6823							; [Tube p22]
6824							;
6825	.ad3f	05da					doSBYT:
6826	.ad3f	05da	20 9d 06	jsr $069d	                jsr recvR2XA    ;receive X and A arguments
6827	.ad42	05dd	20 f4 ff	jsr $fff4	                jsr OSBYTE
6828	.ad45	05e0					sendR2X:
6829	.ad45	05e0	2c e2 fe	bit $fee2	                bit tube.status2
6830	.ad48	05e3	50 fb		bvc $05e0	                bvc sendR2X
6831	.ad4a	05e5	8e e3 fe	stx $fee3	                stx tube.data2
6832	.ad4d	05e8					goIdle_1:
6833	.ad4d	05e8	4c 36 00	jmp $0036	                jmp tubeHostIdleLoop

6835							;-------------------------------------------------------------------------
6836							;
6837							; Handle a Tube non-small OSBYTE.
6838							;
6839							; [Tube p22]
6840	.ad50	05eb					doBYTE:
6841	.ad50	05eb	20 9d 06	jsr $069d	                jsr recvR2XA                ;receive X and Y arguments
6842	.ad53	05ee	a8		tay		                tay                         ;Y = Y argument
6843	.ad54	05ef	20 a1 06	jsr $06a1	                jsr recvR2                  ;receive A argument
6844	.ad57	05f2	20 f4 ff	jsr $fff4	                jsr OSBYTE                  ;call OSBYTE
6845	.ad5a	05f5	49 9d		eor #$9d	                eor #$9D                    ;was it Fast Tube BPUT?
6846	.ad5c	05f7	f0 ef		beq $05e8	                beq goIdle_1      ;if it was, done.
6847	.ad5e	05f9	6a		ror a		                ror a
6848	.ad5f	05fa	20 61 06	jsr $0661	                jsr sendR2A       ;send carry result
6849	.ad62	05fd					-
6850	.ad62	05fd	2c e2 fe	bit $fee2	                bit tube.status2
6851	.ad65	0600	50 fb		bvc $05fd	                bvc -
6852	.ad67	0602	8c e3 fe	sty $fee3	                sty tube.data2               ;send Y result
6853	.ad6a	0605	80 d9		bra $05e0	                bra sendR2X                  ;send X result

6855							;-------------------------------------------------------------------------
6856							;
6857							; Handle a Tube OSWORD request.
6858							;
6859							; [Tube p22]
6860							;
6861	.ad6c	0607					doWORD:
6862	.ad6c	0607	20 a1 06	jsr $06a1	                jsr recvR2
6863	.ad6f	060a	a8		tay		                tay
6864	.ad70	060b	20 aa 06	jsr $06aa	                jsr LAE0F
6865	.ad73	060e	30 0a		bmi $061a	                bmi LAD7F
6866	.ad75	0610					LAD75:
6867	.ad75	0610	20 a1 06	jsr $06a1	                jsr recvR2
6868	.ad78	0613	9d 28 01	sta $0128,x	                sta tubeOSWORDBuffer,x
6869	.ad7b	0616	ca		dex		                dex
6870	.ad7c	0617	10 f7		bpl $0610	                bpl LAD75
6871	.ad7e	0619	98		tya		                tya
6872	.ad7f	061a					LAD7F:
6873	.ad7f	061a	a2 28		ldx #$28	                ldx #<tubeOSWORDBuffer
6874	.ad81	061c	a0 01		ldy #$01	                ldy #>tubeOSWORDBuffer
6875	.ad83	061e	20 f1 ff	jsr $fff1	                jsr OSWORD
6876	.ad86	0621	20 aa 06	jsr $06aa	                jsr LAE0F
6877	.ad89	0624	30 c2		bmi $05e8	                bmi goIdle_1
6878	.ad8b	0626					LAD8B:
6879	.ad8b	0626	bc 28 01	ldy $0128,x	                ldy tubeOSWORDBuffer,x
6880	.ad8e	0629					LAD8E:
6881	.ad8e	0629	2c e2 fe	bit $fee2	                bit tube.status2
6882	.ad91	062c	50 fb		bvc $0629	                bvc LAD8E
6883	.ad93	062e	8c e3 fe	sty $fee3	                sty tube.data2
6884	.ad96	0631	ca		dex		                dex
6885	.ad97	0632	10 f2		bpl $0626	                bpl LAD8B
6886	.ad99	0634					LAD99:
6887	.ad99	0634	80 b2		bra $05e8	                bra goIdle_1

6889							;-------------------------------------------------------------------------

6891	.ad9b	0636					doRDLN:
6892	.ad9b	0636	a2 04		ldx #$04	                ldx #$04
6893	.ad9d	0638					LAD9D:
6894	.ad9d	0638	20 a1 06	jsr $06a1	                jsr recvR2
6898	.ada0	063b	95 00		sta $00,x	                sta $00,x
6900	.ada2	063d	ca		dex		                dex
6901	.ada3	063e	10 f8		bpl $0638	                bpl LAD9D
6902	.ada5	0640	e8		inx		                inx
6903	.ada6	0641	8a		txa		                txa
6904	.ada7	0642	a8		tay		                tay
6905	.ada8	0643	20 f1 ff	jsr $fff1	                jsr OSWORD
6906	.adab	0646	90 05		bcc $064d	                bcc LADB2
6907	.adad	0648	a9 ff		lda #$ff	                lda #$FF
6908	.adaf	064a	4c 90 05	jmp $0590	                jmp sendR2AThenGoIdle

6910	.adb2	064d					LADB2:
6911	.adb2	064d	a2 00		ldx #$00	                ldx #$00
6912	.adb4	064f	a9 7f		lda #$7f	                lda #$7F
6913	.adb6	0651	20 61 06	jsr $0661	                jsr sendR2A
6914	.adb9	0654					LADB9:
6915	.adb9	0654	bd 00 07	lda $0700,x	                lda $0700,x
6916	.adbc	0657	20 61 06	jsr $0661	                jsr sendR2A
6917	.adbf	065a	e8		inx		                inx
6918	.adc0	065b	c9 0d		cmp #$0d	                cmp #$0D
6919	.adc2	065d	d0 f5		bne $0654	                bne LADB9
6920	.adc4	065f	80 d3		bra $0634	                bra LAD99

6922	.adc6	0661					sendR2A:                          ;adc6/0661
6923	.adc6	0661	2c e2 fe	bit $fee2	                bit tube.status2
6924	.adc9	0664	50 fb		bvc $0661	                bvc sendR2A
6925	.adcb	0666	8d e3 fe	sta $fee3	                sta tube.data2
6926	.adce	0669	60		rts		                rts

6928	.adcf	066a					sendR4TubeClaimantID:              ;adcf
6929	.adcf	066a	a5 15		lda $15		                lda tubeClaimantID ;get Tube ID
6930	.add1	066c					sendR4:                          ;add1/066c
6931	.add1	066c	2c e6 fe	bit $fee6	                bit tube.status4 ;check R4 status
6932	.add4	066f	50 fb		bvc $066c	                bvc sendR4       ;branch taken if FIFO full
6933	.add6	0671	8d e7 fe	sta $fee7	                sta tube.data4   ;put byte in FIFO
6934	.add9	0674	60		rts		                rts

6936	.adda	0675					LADDA:
6937	.adda	0675	a5 ff		lda $ff		                lda $FF
6938	.addc	0677	38		sec		                sec
6939	.addd	0678	6a		ror a		                ror a
6940	.adde	0679	80 0f		bra $068a	                bra LADEF

6942	.ade0	067b					eventHandler:
6943	.ade0	067b	48		pha		                pha
6944	.ade1	067c	a9 00		lda #$00	                lda #$00
6945	.ade3	067e	20 8a 06	jsr $068a	                jsr LADEF
6946	.ade6	0681	98		tya		                tya
6947	.ade7	0682	20 8a 06	jsr $068a	                jsr LADEF
6948	.adea	0685	8a		txa		                txa
6949	.adeb	0686	20 8a 06	jsr $068a	                jsr LADEF
6950	.adee	0689	68		pla		                pla
6951	.adef	068a					LADEF:
6952	.adef	068a	2c e0 fe	bit $fee0	                bit tube.status1
6953	.adf2	068d	50 fb		bvc $068a	                bvc LADEF
6954	.adf4	068f	8d e1 fe	sta $fee1	                sta tube.data1
6955	.adf7	0692	60		rts		                rts

6957							;-------------------------------------------------------------------------
6958							;
6959							; Receive multiple bytes via R2: some kind of parameter block,
6960							; followed by the reason code. Store the first N-1 received in zero
6961							; page, starting at $00.
6962							;
6963							; entry:
6964							;
6965							; X = number of bytes to receive, minus 1
6966							;
6967							; exit:
6968							;
6969							; ?$00, ?$01... = first N-1 bytes received
6970							;
6971							; A = final byte received
6972							;
6973							; X = 0
6974							;
6975	.adf8	0693					recvR2N:
6976	.adf8	0693	20 a1 06	jsr $06a1	                jsr recvR2
6977	.adfb	0696	95 ff		sta $ff,x	                sta $ff,x
6978	.adfd	0698	ca		dex		                dex
6979	.adfe	0699	d0 f8		bne $0693	                bne recvR2N
6980	.ae00	069b	80 04		bra $06a1	                bra recvR2

6982							;-------------------------------------------------------------------------
6983							;
6984							; Receive 2 bytes via R2.
6985							;
6986							; exit:
6987							;
6988							; X = first byte received
6989							;
6990							; A = second byte received
6991							;
6992	.ae02	069d					recvR2XA:
6993	.ae02	069d	20 a1 06	jsr $06a1	                jsr recvR2
6994	.ae05	06a0	aa		tax		                tax

6996							;-------------------------------------------------------------------------
6997							;
6998							; Receive 1 byte via R2.
6999							;
7000							; exit:
7001							;
7002							; A = byte received
7003							;
7004	.ae06	06a1					recvR2:
7005	.ae06	06a1	2c e2 fe	bit $fee2	                bit tube.status2
7006	.ae09	06a4	10 fb		bpl $06a1	                bpl recvR2
7007	.ae0b	06a6	ad e3 fe	lda $fee3	                lda tube.data2
7008	.ae0e	06a9	60		rts		                rts

7010							;-------------------------------------------------------------------------

7012	.ae0f	06aa					LAE0F:
7013	.ae0f	06aa	2c e2 fe	bit $fee2	                bit tube.status2
7014	.ae12	06ad	10 fb		bpl $06aa	                bpl LAE0F
7015	.ae14	06af	ae e3 fe	ldx $fee3	                ldx tube.data2
7016	.ae17	06b2	ca		dex		                dex
7017	.ae18	06b3	60		rts		                rts

7019							;-------------------------------------------------------------------------

7027							                .here
7028							                .bend

7030							;-------------------------------------------------------------------------

7034							                .include "terminal_code.s65"

:10	;******  Processing file: src/terminal_code.s65

1							;-------------------------------------------------------------------------

3	.ae19						terminalServiceEntryPoint:
4	.ae19		08		php		                php
5	.ae1a		5a		phy		                phy
6	.ae1b		da		phx		                phx
7	.ae1c		48		pha		                pha
8	.ae1d		c9 04		cmp #$04	                cmp #romServiceCallUnrecognisedCommand
9	.ae1f		f0 0d		beq $ae2e	                beq handleUnrecognisedCommand
10	.ae21		c9 07		cmp #$07	                cmp #romServiceCallUnrecognisedOSBYTE
11	.ae23		f0 25		beq $ae4a	                beq handleUnrecognisedOSBYTE
12	.ae25		c9 2a		cmp #$2a	                cmp #romServiceCallLanguageChange
13	.ae27		f0 74		beq $ae9d	                beq handleLanguageChange
14	.ae29						LAE29:
15	.ae29		68		pla		                pla
16	.ae2a		fa		plx		                plx
17	.ae2b		7a		ply		                ply
18	.ae2c		28		plp		                plp
19	.ae2d		60		rts		                rts

21	.ae2e						handleUnrecognisedCommand:
22	.ae2e		20 32 b8	jsr $b832	                jsr LB832
23	.ae31		c9 0b		cmp #$0b	                cmp #$0B
24	.ae33		d0 f4		bne $ae29	                bne LAE29
25	.ae35		68		pla		                pla
26	.ae36		fa		plx		                plx
27	.ae37		a9 8e		lda #$8e	                lda #$8E
28	.ae39		20 f4 ff	jsr $fff4	                jsr OSBYTE
29	.ae3c						LAE3C:
30	.ae3c		a2 04		ldx #$04	                ldx #$04
31	.ae3e						LAE3E:
32	.ae3e		bd 29 02	lda $0229,x	                lda INSV-1,x
33	.ae41		dd 92 ae	cmp $ae92,x	                cmp LAE93-1,x
34	.ae44		d0 03		bne $ae49	                bne LAE49
35	.ae46		ca		dex		                dex
36	.ae47		d0 f5		bne $ae3e	                bne LAE3E
37	.ae49						LAE49:
38	.ae49		60		rts		                rts

40	.ae4a						handleUnrecognisedOSBYTE:
41	.ae4a		5a		phy		                phy
42	.ae4b		7a		ply		                ply
43	.ae4c		d0 db		bne $ae29	                bne LAE29
44	.ae4e		a5 ef		lda $ef		                lda $EF
45	.ae50		c9 60		cmp #$60	                cmp #$60
46	.ae52		d0 d5		bne $ae29	                bne LAE29

48							                ; handle OSBYTE $60
49	.ae54						osbyte60:
50	.ae54		68		pla		                pla
51	.ae55		5a		phy		                phy
52	.ae56		78		sei		                sei
53	.ae57		a5 f0		lda $f0		                lda $F0
54	.ae59		30 11		bmi $ae6c	                bmi LAE6C
55	.ae5b		4a		lsr a		                lsr a
56	.ae5c		d0 08		bne $ae66	                bne LAE66
57	.ae5e		a9 11		lda #$11	                lda #$11
58	.ae60		85 76		sta $76		                sta $76
59	.ae62		66 74		ror $74		                ror $74
60	.ae64		80 c3		bra $ae29	                bra LAE29

62	.ae66						LAE66:

64	.ae66		64 78		stz $78		                stz $78
65	.ae68		66 77		ror $77		                ror $77

67	.ae6a						LAE6A:
68	.ae6a		80 bd		bra $ae29	                bra LAE29

70	.ae6c						LAE6C:
71	.ae6c		4a		lsr a		                lsr a
72	.ae6d		90 2e		bcc $ae9d	                bcc handleLanguageChange
73	.ae6f		64 75		stz $75		                stz $75
74	.ae71		20 3c ae	jsr $ae3c	                jsr LAE3C
75	.ae74		f0 b3		beq $ae29	                beq LAE29
76	.ae76		a2 04		ldx #$04	                ldx #$04
77	.ae78						LAE78:
78	.ae78		bd 29 02	lda $0229,x	                lda INSV-1,x
79	.ae7b		95 6f		sta $6f,x	                sta oldINSV-1,x
80	.ae7d		bd 92 ae	lda $ae92,x	                lda LAE93-1,x
81	.ae80		9d 29 02	sta $0229,x	                sta INSV-1,x
82	.ae83		ca		dex		                dex
83	.ae84		d0 f2		bne $ae78	                bne LAE78
84	.ae86		a2 06		ldx #$06	                ldx #$06
85	.ae88						LAE88:
86	.ae88		bd 96 ae	lda $ae96,x	                lda LAE97-1,x
87	.ae8b		9d dd 0d	sta $0ddd,x	                sta ExtendedVectorAddress(INSV)-1,x
88	.ae8e		ca		dex		                dex
89	.ae8f		d0 f7		bne $ae88	                bne LAE88
90	.ae91		80 d7		bra $ae6a	                bra LAE6A

92	.ae93						LAE93:
93	>ae93		3f ff				                .word E_INSV
94	>ae95		42 ff				                .word E_REMV
95	.ae97						LAE97:
96	>ae97		d4 ae				                .word LAED4
97	>ae99		0f				                .byte terminalROM
98	>ae9a		13 af				                .word LAF13
99	>ae9c		0f				                .byte terminalROM

101	.ae9d						handleLanguageChange:
102	.ae9d		78		sei		                sei
103	.ae9e		20 3c ae	jsr $ae3c	                jsr LAE3C
104	.aea1		d0 c7		bne $ae6a	                bne LAE6A
105	.aea3		a2 06		ldx #$06	                ldx #$06
106	.aea5						LAEA5:
107	.aea5		bd dd 0d	lda $0ddd,x	                lda ExtendedVectorAddress(INSV)-1,x;extendedVectorSpace+insvIndex*3-1,x
108	.aea8		dd 96 ae	cmp $ae96,x	                cmp LAE97-1,x
109	.aeab		d0 bd		bne $ae6a	                bne LAE6A
110	.aead		ca		dex		                dex
111	.aeae		d0 f5		bne $aea5	                bne LAEA5
112	.aeb0		a2 04		ldx #$04	                ldx #$04
113	.aeb2						LAEB2:
114	.aeb2		b5 6f		lda $6f,x	                lda oldINSV-1,x
115	.aeb4		9d 29 02	sta $0229,x	                sta INSV-1,x
116	.aeb7		ca		dex		                dex
117	.aeb8		d0 f8		bne $aeb2	                bne LAEB2
118	.aeba		a9 e6		lda #$e6	                lda #$E6
119	.aebc		20 23 b8	jsr $b823	                jsr osbyteX00Y00
120	.aebf		a9 cb		lda #$cb	                lda #$CB
121	.aec1		a2 09		ldx #$09	                ldx #$09
122	.aec3		20 25 b8	jsr $b825	                jsr osbyteY00
123	.aec6		20 1a b1	jsr $b11a	                jsr LB11A
124	.aec9		1a		inc a		                inc a
125	.aeca						LAECA:
126	.aeca		20 23 b8	jsr $b823	                jsr osbyteX00Y00
127	.aecd		3a		dec a		                dec a
128	.aece		c9 01		cmp #$01	                cmp #$01
129	.aed0		d0 f8		bne $aeca	                bne LAECA
130	.aed2		80 96		bra $ae6a	                bra LAE6A

132	.aed4						LAED4:
133	.aed4		08		php		                php
134	.aed5		78		sei		                sei
135	.aed6		e0 01		cpx #$01	                cpx #$01
136	.aed8		d0 31		bne $af0b	                bne LAF0B
137	.aeda		24 77		bit $77		                bit $77
138	.aedc		10 0e		bpl $aeec	                bpl LAEEC
139	.aede		c9 13		cmp #$13	                cmp #$13
140	.aee0		f0 05		beq $aee7	                beq LAEE7
141	.aee2		c9 11		cmp #$11	                cmp #$11
142	.aee4		d0 06		bne $aeec	                bne LAEEC
143	.aee6		18		clc		                clc
144	.aee7						LAEE7:
145	.aee7		66 78		ror $78		                ror $78
146	.aee9						LAEE9:
147	.aee9		28		plp		                plp
148	.aeea		18		clc		                clc
149	.aeeb		60		rts		                rts

151	.aeec						LAEEC:
152	.aeec		24 74		bit $74		                bit $74
153	.aeee		10 1b		bpl $af0b	                bpl LAF0B
154	.aef0		48		pha		                pha
155	.aef1		38		sec		                sec
156	.aef2		20 0f af	jsr $af0f	                jsr LAF0F
157	.aef5		98		tya		                tya
158	.aef6		d0 10		bne $af08	                bne LAF08
159	.aef8		e0 20		cpx #$20	                cpx #$20
160	.aefa		b0 0c		bcs $af08	                bcs LAF08
161	.aefc		a9 13		lda #$13	                lda #$13
162	.aefe		e0 10		cpx #$10	                cpx #$10
163	.af00		90 04		bcc $af06	                bcc LAF06
164	.af02		c5 76		cmp $76		                cmp $76
165	.af04		f0 02		beq $af08	                beq LAF08
166	.af06						LAF06:
167	.af06		85 75		sta $75		                sta $75
168	.af08						LAF08:
169	.af08		68		pla		                pla
170	.af09		a2 01		ldx #$01	                ldx #$01
171	.af0b						LAF0B:
172	.af0b		28		plp		                plp
173	.af0c		6c 70 00	jmp ($0070)	                jmp ($0070)

175	.af0f						LAF0F:
176	.af0f		b8		clv		                clv
177	.af10		6c 2e 02	jmp ($022e)	                jmp (CNPV)

179	.af13						LAF13:
180	.af13		08		php		                php
181	.af14		78		sei		                sei
182	.af15		e0 01		cpx #$01	                cpx #$01
183	.af17		d0 1e		bne $af37	                bne LAF37
184	.af19		24 74		bit $74		                bit $74
185	.af1b		10 16		bpl $af33	                bpl LAF33
186	.af1d		18		clc		                clc
187	.af1e		20 0f af	jsr $af0f	                jsr LAF0F
188	.af21		c0 00		cpy #$00	                cpy #$00
189	.af23		d0 0c		bne $af31	                bne LAF31
190	.af25		e0 20		cpx #$20	                cpx #$20
191	.af27		b0 08		bcs $af31	                bcs LAF31
192	.af29		a9 11		lda #$11	                lda #$11
193	.af2b		c5 76		cmp $76		                cmp $76
194	.af2d		f0 02		beq $af31	                beq LAF31
195	.af2f		85 75		sta $75		                sta $75
196	.af31						LAF31:
197	.af31		a2 01		ldx #$01	                ldx #$01
198	.af33						LAF33:
199	.af33		28		plp		                plp
200	.af34		6c 72 00	jmp ($0072)	                jmp ($0072)

202	.af37						LAF37:
203	.af37		e0 02		cpx #$02	                cpx #$02
204	.af39		d0 f8		bne $af33	                bne LAF33
205	.af3b		a5 75		lda $75		                lda $75
206	.af3d		a8		tay		                tay
207	.af3e		f0 08		beq $af48	                beq LAF48
208	.af40		70 a7		bvs $aee9	                bvs LAEE9
209	.af42		64 75		stz $75		                stz $75
210	.af44		85 76		sta $76		                sta $76
211	.af46		80 a1		bra $aee9	                bra LAEE9

213	.af48						LAF48:
214	.af48		a5 78		lda $78		                lda $78
215	.af4a		10 e7		bpl $af33	                bpl LAF33
216	.af4c		28		plp		                plp
217	.af4d		38		sec		                sec
218	.af4e						LAF4E:
219	.af4e		60		rts		                rts

221							;-------------------------------------------------------------------------

223	.af4f						terminalBRKHandler:
224	.af4f		a9 da		lda #$da	                lda #$DA
225	.af51		20 23 b8	jsr $b823	                jsr osbyteX00Y00             ;Set VDU queue length to 0
226	.af54		20 34 b6	jsr $b634	                jsr disableESCAPE
227	.af57		a0 00		ldy #$00	                ldy #$00
228	.af59		b1 fd		lda ($fd),y	                lda (errPtr),y
229	.af5b		d0 06		bne $af63	                bne LAF63
230	.af5d		64 20		stz $20		                stz $20
231	.af5f		a9 16		lda #$16	                lda #$16
232	.af61		85 6f		sta $6f		                sta $6F
233	.af63						LAF63:
234	.af63		a9 0d		lda #$0d	                lda #13
235	.af65						-
236	.af65		20 e3 ff	jsr $ffe3	                jsr OSASCI
237	.af68		c8		iny		                iny
238	.af69		b1 fd		lda ($fd),y	                lda (errPtr),y
239	.af6b		d0 f8		bne $af65	                bne -
240	.af6d		20 e7 ff	jsr $ffe7	                jsr OSNEWL
241	.af70		38		sec		                sec
242	.af71		66 19		ror $19		                ror $19
243	.af73		a5 1a		lda $1a		                lda $1A
244	.af75		d0 7d		bne $aff4	                bne LAFF4
245	.af77						terminalLanguageEntryPoint:
246	.af77		3a		dec a		                dec a
247	.af78		d0 d4		bne $af4e	                bne LAF4E
248	.af7a		a9 01		lda #$01	                lda #$01
249	.af7c		85 6f		sta $6f		                sta $6F
250	.af7e						LAF7E:
251	.af7e		78		sei		                sei
252	.af7f		a2 fe		ldx #$fe	                ldx #$FE
253	.af81		9a		txs		                txs
254	.af82		a9 4f		lda #$4f	                lda #<terminalBRKHandler
255	.af84		8d 02 02	sta $0202	                sta BRKV+0
256	.af87		a9 af		lda #$af	                lda #>terminalBRKHandler
257	.af89		8d 03 02	sta $0203	                sta BRKV+1
258	.af8c		a9 b1		lda #$b1	                lda #<terminalINDnHandler
259	.af8e		8d 30 02	sta $0230	                sta IND1V+0
260	.af91		a9 b7		lda #$b7	                lda #>terminalINDnHandler
261	.af93		8d 31 02	sta $0231	                sta IND1V+1
262	.af96		a9 b1		lda #$b1	                lda #<terminalINDnHandler
263	.af98		8d 32 02	sta $0232	                sta IND2V+0
264	.af9b		a9 b7		lda #$b7	                lda #>terminalINDnHandler
265	.af9d		8d 33 02	sta $0233	                sta IND2V+1

267							                ; Clear zero page
268	.afa0		a2 6e		ldx #$6e	                ldx #$6E
269	.afa2						-
270	.afa2		74 00		stz $00,x	                stz $00,x
271	.afa4		ca		dex		                dex
272	.afa5		10 fb		bpl $afa2	                bpl -

274	.afa7		c6 21		dec $21		                dec $21
275	.afa9		c6 34		dec $34		                dec $34
276	.afab		c6 36		dec $36		                dec $36
277	.afad		58		cli		                cli
278	.afae		a9 0b		lda #$0b	                lda #$0B
279	.afb0		20 90 b6	jsr $b690	                jsr LB690
280	.afb3		a9 87		lda #$87	                lda #$87
281	.afb5		20 f4 ff	jsr $fff4	                jsr OSBYTE                   ;Read screen mode
282	.afb8		98		tya		                tya                          ;A = screen mode
283	.afb9		20 79 b5	jsr $b579	                jsr reinitDisplayMode
284	.afbc		a0 ff		ldy #$ff	                ldy #$FF
285	.afbe						-
286	.afbe		c8		iny		                iny
287	.afbf		b9 ce af	lda $afce,y	                lda initOSBYTEAs,y
288	.afc2		f0 30		beq $aff4	                beq LAFF4
289	.afc4		be e1 af	ldx $afe1,y	                ldx initOSBYTEXs,y
290	.afc7		5a		phy		                phy
291	.afc8		20 25 b8	jsr $b825	                jsr osbyteY00
292	.afcb		7a		ply		                ply
293	.afcc		80 f0		bra $afbe	                bra -

295							;-------------------------------------------------------------------------

297	.afce						initOSBYTEAs:
298	>afce		cb				                .byte $CB ;OSBYTE 203 (&CB) Read/write RS423 input buffer [MasRef D.2-64]
299	>afcf		60				                .byte $60 ;OSBYTE 96 (&60) ???
300	>afd0		60				                .byte $60 ;OSBYTE 96 (&60) ???
301	>afd1		60				                .byte $60 ;OSBYTE 96 (&60) ???
302	>afd2		0f				                .byte $0F ;OSBYTE 15 (&0F) Flush buffer [MasRef D.2-24]
303	>afd3		0f				                .byte $0F ;OSBYTE 15 (&0F) Flush buffer [MasRef D.2-24]
304	>afd4		dd				                .byte $dd ;OSBYTE 221 (&DD) Read/write interpretation of input values 192-207 [MasRef D.2-73]
305	>afd5		de				                .byte $de ;OSBYTE 222 (&DE) Read/write interpretation of input values 208-223 [MasRef D.2-73]
306	>afd6		df				                .byte $df ;OSBYTE 223 (&DF) Read/write interpretation of input values 224-239 [MasRef D.2-73]
307	>afd7		e0				                .byte $e0 ;OSBYTE 224 (&E0) Read/write interpretation of input values 240-255 [MasRef D.2-73]
308	>afd8		e1				                .byte $e1 ;OSBYTE 225 (&E1) Read/write soft key interpretation [MasRef D.2-74]
309	>afd9		e2				                .byte $E2 ;OSBYTE 226 (&E2) Read/write SHIFT+soft key interpretation [MasRef D.2-74]
310	>afda		e3				                .byte $E3 ;OSBYTE 227 (&E3) Read/write CTRL+soft key interpretation [MasRef D.2-74]
311	>afdb		e4				                .byte $e4 ;OSBYTE 228 (&E4) Read/write SHIFT+CTRL+soft key interpretation [MasRef D.2-74]
312	>afdc		e5				                .byte $e5 ;OSBYTE 229 (&E5) Read/write ESCAPE key status [MasRef D.2-75]
313	>afdd		04				                .byte $04 ;OSBYTE 4 (&04) Enable/disable cursor editing [MasRef D.2-19]
314	>afde		7e				                .byte $7e ;OSBYTE 126 (&7E) Acknowledge escape condition [MasRef D.2-37]
315	>afdf		e6				                .byte $e6 ;OSBYTE 230 (&E6) Read/write ESCAPE effects [MasRef D.2-75]
316	>afe0		02				                .byte $02 ;OSBYTE 2 (&02) Specify input stream [MasRef D.2-18]

318	.afe1						initOSBYTEXs:
319	>afe1		00				                .byte $00
320	>afe2		01				                .byte $01
321	>afe3		03				                .byte $03
322	>afe4		ff				                .byte $ff
323	>afe5		01				                .byte $01
324	>afe6		02				                .byte $02
325	>afe7		c0				                .byte $c0
326	>afe8		d0				                .byte $d0
327	>afe9		e0				                .byte $e0
328	>afea		f0				                .byte $f0
329	>afeb		01				                .byte $01
330	>afec		90				                .byte $90
331	>afed		a0				                .byte $a0
332	>afee		a0				                .byte $a0
333	>afef		01				                .byte $01
334	>aff0		00				                .byte $00
335	>aff1		00				                .byte $00
336	>aff2		01				                .byte $01
337	>aff3		02				                .byte $02

339							;-------------------------------------------------------------------------

341	.aff4						LAFF4:
342	.aff4		a2 fe		ldx #$fe	                ldx #$FE
343	.aff6		9a		txs		                txs
344	.aff7		38		sec		                sec
345	.aff8		66 1a		ror $1a		                ror $1A
346	.affa		64 1d		stz $1d		                stz $1D
347	.affc		20 04 b0	jsr $b004	                jsr LB004
348	.afff		20 04 b0	jsr $b004	                jsr LB004
349	.b002		80 2c		bra $b030	                bra LB030

351	.b004						LB004:
352	.b004		20 41 b0	jsr $b041	                jsr LB041
353	.b007		a0 01		ldy #$01	                ldy #$01
354	.b009		91 1b		sta ($1b),y	                sta ($1B),y
355	.b00b		c8		iny		                iny
356	.b00c		8a		txa		                txa
357	.b00d		91 1b		sta ($1b),y	                sta ($1B),y
358	.b00f		c8		iny		                iny
359	.b010		98		tya		                tya
360	.b011		91 1b		sta ($1b),y	                sta ($1B),y
361	.b013		0a		asl a		                asl a
362	.b014		92 1b		sta ($1b)	                sta ($1B)
363	.b016		60		rts		                rts

365	.b017						LB017:
366	.b017		08		php		                php
367	.b018		48		pha		                pha
368	.b019		da		phx		                phx
369	.b01a		5a		phy		                phy
370	.b01b		ba		tsx		                tsx
371	.b01c		e8		inx		                inx
372	.b01d		8a		txa		                txa
373	.b01e		49 ff		eor #$ff	                eor #$FF
374	.b020		92 1b		sta ($1b)	                sta ($1B)
375	.b022		a8		tay		                tay
376	.b023						LB023:
377	.b023		68		pla		                pla
378	.b024		91 1b		sta ($1b),y	                sta ($1B),y
379	.b026		88		dey		                dey
380	.b027		d0 fa		bne $b023	                bne LB023
381	.b029		a9 20		lda #$20	                lda #$20
382	.b02b		85 1e		sta $1e		                sta $1E
383	.b02d		20 41 b0	jsr $b041	                jsr LB041
384	.b030						LB030:
385	.b030		b2 1b		lda ($1b)	                lda ($1B)
386	.b032		aa		tax		                tax
387	.b033		a0 00		ldy #$00	                ldy #$00
388	.b035						LB035:
389	.b035		c8		iny		                iny
390	.b036		b1 1b		lda ($1b),y	                lda ($1B),y
391	.b038		48		pha		                pha
392	.b039		ca		dex		                dex
393	.b03a		d0 f9		bne $b035	                bne LB035
394	.b03c		7a		ply		                ply
395	.b03d		fa		plx		                plx
396	.b03e		68		pla		                pla
397	.b03f		28		plp		                plp
398	.b040		60		rts		                rts

400	.b041						LB041:
401	.b041		a0 04		ldy #$04	                ldy #$04
402	.b043		84 1c		sty $1c		                sty $1C
403	.b045		a0 20		ldy #$20	                ldy #$20
404							                ; Is this an adress?
408	.b047		a2 50		ldx #$50	                ldx #$50
410	.b049		a9 b6		lda #$b6	                lda #$B6
411	.b04b		46 1d		lsr $1d		                lsr $1D
412	.b04d		b0 0c		bcs $b05b	                bcs LB05B
413	.b04f		e6 1d		inc $1d		                inc $1D
414	.b051		a0 04		ldy #$04	                ldy #$04
415	.b053		84 1c		sty $1c		                sty $1C
416	.b055		a0 00		ldy #$00	                ldy #$00
420	.b057		a2 5d		ldx #$5d	                ldx #$5D
422	.b059		a9 b0		lda #$b0	                lda #$B0
423	.b05b						LB05B:
424	.b05b		84 1b		sty $1b		                sty $1B
425	.b05d		60		rts		                rts

427	.b05e						LB05E:
428	.b05e		20 63 b0	jsr $b063	                jsr LB063
429	.b061		80 fb		bra $b05e	                bra LB05E

431	.b063						LB063:
432	.b063		24 20		bit $20		                bit $20
433	.b065		10 05		bpl $b06c	                bpl LB06C
434	.b067		20 96 b0	jsr $b096	                jsr LB096
435	.b06a		90 17		bcc $b083	                bcc LB083
436	.b06c						LB06C:
437	.b06c		80 a9		bra $b017	                bra LB017

439	.b06e						LB06E:
440	.b06e		c9 0a		cmp #$0a	                cmp #$0A
441	.b070		90 0f		bcc $b081	                bcc LB081
442	.b072		a2 00		ldx #$00	                ldx #$00
443	.b074						LB074:
444	.b074		e8		inx		                inx
445	.b075		e9 0a		sbc #$0a	                sbc #$0A
446	.b077		c9 0a		cmp #$0a	                cmp #$0A
447	.b079		b0 f9		bcs $b074	                bcs LB074
448	.b07b		48		pha		                pha
449	.b07c		8a		txa		                txa
450	.b07d		20 6e b0	jsr $b06e	                jsr LB06E
451	.b080		68		pla		                pla
452	.b081						LB081:
453	.b081		09 30		ora #$30	                ora #$30
454	.b083						LB083:
455	.b083		48		pha		                pha
456	.b084		5a		phy		                phy
457	.b085		a8		tay		                tay
458	.b086		a9 8a		lda #$8a	                lda #$8A
459	.b088		a2 02		ldx #$02	                ldx #$02
460	.b08a		20 f4 ff	jsr $fff4	                jsr OSBYTE
461	.b08d		7a		ply		                ply
462	.b08e		68		pla		                pla
463	.b08f		90 1f		bcc $b0b0	                bcc LB0B0
464	.b091		20 17 b0	jsr $b017	                jsr LB017
465	.b094		80 ed		bra $b083	                bra LB083

467	.b096						LB096:
468	.b096		a4 6f		ldy $6f		                ldy $6F
469	.b098		f0 17		beq $b0b1	                beq LB0B1
470	.b09a		e6 6f		inc $6f		                inc $6F
471	.b09c		b9 4b b1	lda $b14b,y	                lda LB14C-1,y
472	.b09f		10 0d		bpl $b0ae	                bpl LB0AE
473	.b0a1		64 6f		stz $6f		                stz $6F
474	.b0a3		48		pha		                pha
475	.b0a4		a9 d9		lda #$d9	                lda #$D9
476	.b0a6		20 23 b8	jsr $b823	                jsr osbyteX00Y00
477	.b0a9		68		pla		                pla
478	.b0aa		a0 18		ldy #$18	                ldy #$18
479	.b0ac		84 1f		sty $1f		                sty $1F
480	.b0ae						LB0AE:
481	.b0ae		0a		asl a		                asl a
482	.b0af		4a		lsr a		                lsr a
483	.b0b0						LB0B0:
484	.b0b0		60		rts		                rts

486	.b0b1						LB0B1:
487	.b0b1		a9 81		lda #$81	                lda #$81
488	.b0b3		20 23 b8	jsr $b823	                jsr osbyteX00Y00
489	.b0b6		8a		txa		                txa
490	.b0b7		b0 f7		bcs $b0b0	                bcs LB0B0
491	.b0b9		10 f5		bpl $b0b0	                bpl LB0B0
492	.b0bb		c9 e0		cmp #$e0	                cmp #$E0
493	.b0bd		b0 f1		bcs $b0b0	                bcs LB0B0
494	.b0bf		20 c4 b0	jsr $b0c4	                jsr LB0C4
495	.b0c2		38		sec		                sec
496	.b0c3						LB0C3:
497	.b0c3		60		rts		                rts

499	.b0c4						LB0C4:
500	.b0c4		c9 99		cmp #$99	                cmp #$99
501	.b0c6		f0 62		beq $b12a	                beq LB12A
502	.b0c8		29 0f		and #$0f	                and #$0F
503	.b0ca		f0 1d		beq $b0e9	                beq LB0E9
504	.b0cc		c9 02		cmp #$02	                cmp #$02
505	.b0ce		90 1e		bcc $b0ee	                bcc LB0EE
506	.b0d0		f0 f1		beq $b0c3	                beq LB0C3
507	.b0d2		c9 04		cmp #$04	                cmp #$04
508	.b0d4		90 40		bcc $b116	                bcc LB116
509	.b0d6		f0 42		beq $b11a	                beq LB11A
510	.b0d8		c9 06		cmp #$06	                cmp #$06
511	.b0da		90 2e		bcc $b10a	                bcc LB10A
512	.b0dc		f0 17		beq $b0f5	                beq LB0F5
513	.b0de		c9 08		cmp #$08	                cmp #$08
514	.b0e0		90 e1		bcc $b0c3	                bcc LB0C3
515	.b0e2		f0 3a		beq $b11e	                beq LB11E
516	.b0e4		c9 09		cmp #$09	                cmp #$09
517	.b0e6		f0 46		beq $b12e	                beq LB12E
518	.b0e8		60		rts		                rts

520	.b0e9						LB0E9:
521	.b0e9		a9 0c		lda #$0c	                lda #$0C
522	.b0eb						LB0EB:
523	.b0eb		4c ee ff	jmp $ffee	                jmp OSWRCH

525	.b0ee						LB0EE:
526	.b0ee		a9 16		lda #$16	                lda #$16
527	.b0f0		85 6f		sta $6f		                sta $6F
528	.b0f2		64 20		stz $20		                stz $20
529	.b0f4		60		rts		                rts

531	.b0f5						LB0F5:
532	.b0f5		a2 10		ldx #$10	                ldx #$10
533	.b0f7		20 01 b1	jsr $b101	                jsr LB101
534	.b0fa		29 10		and #$10	                and #$10
535	.b0fc		d0 15		bne $b113	                bne LB113
536	.b0fe						LB0FE:
537	.b0fe		4c b6 b7	jmp $b7b6	                jmp LB7B6

539	.b101						LB101:
540	.b101		a9 ec		lda #$ec	                lda #$EC
541	.b103		a0 ff		ldy #$ff	                ldy #$FF
542	.b105		20 f4 ff	jsr $fff4	                jsr OSBYTE
543	.b108		8a		txa		                txa
544	.b109		60		rts		                rts

546	.b10a						LB10A:
547	.b10a		a2 40		ldx #$40	                ldx #$40
548	.b10c		20 01 b1	jsr $b101	                jsr LB101
549	.b10f		29 40		and #$40	                and #$40
550	.b111		f0 eb		beq $b0fe	                beq LB0FE
551	.b113						LB113:
552	.b113		4c e2 b7	jmp $b7e2	                jmp LB7E2

554	.b116						LB116:
555	.b116		a9 02		lda #$02	                lda #$02
556	.b118		80 d1		bra $b0eb	                bra LB0EB

558	.b11a						LB11A:
559	.b11a		a9 03		lda #$03	                lda #$03
560	.b11c		80 cd		bra $b0eb	                bra LB0EB

562	.b11e						LB11E:
563	.b11e		a9 ff		lda #$ff	                lda #$FF
564	.b120		45 21		eor $21		                eor $21
565	.b122		85 21		sta $21		                sta $21
566	.b124		85 20		sta $20		                sta $20
567	.b126		d0 d6		bne $b0fe	                bne LB0FE
568	.b128		80 e9		bra $b113	                bra LB113

570	.b12a						LB12A:
571	.b12a		a2 0c		ldx #$0c	                ldx #$0C
572	.b12c		80 02		bra $b130	                bra LB130

574	.b12e						LB12E:
575	.b12e		a2 af		ldx #$af	                ldx #$AF
576	.b130						LB130:
577	.b130		da		phx		                phx
578	.b131		a2 60		ldx #$60	                ldx #$60
579	.b133		20 2a b8	jsr $b82a	                jsr LB82A
580	.b136		fa		plx		                plx
581	.b137						LB137:
582	.b137		da		phx		                phx
583	.b138		a9 13		lda #$13	                lda #$13
584	.b13a		20 f4 ff	jsr $fff4	                jsr OSBYTE
585	.b13d		fa		plx		                plx
586	.b13e		ca		dex		                dex
587	.b13f		d0 f6		bne $b137	                bne LB137
588	.b141		a2 00		ldx #$00	                ldx #$00
589	.b143		20 2a b8	jsr $b82a	                jsr LB82A
590	.b146						LB146:
591	.b146		20 98 b1	jsr $b198	                jsr LB198
592	.b149		90 fb		bcc $b146	                bcc LB146
593	.b14b		60		rts		                rts

595	.b14c						LB14C:
596	>b14c		1b				                .byte $1B
597	.b14d		5e 2a 4b	lsr $4b2a,x	                lsr $4B2A,x
598	.b150		45 59		eor $59		                eor $59
599	.b152		39 7c 21	and $217c,y	                and $217C,y
600	.b155		7c 59 1b	jmp ($1b59,x)	                jmp ($1B59,x)

602	>b158		5c				                .byte $5C
603	>b159		54				                .byte $54
604	.b15a		45 52		eor $52		                eor $52
605	.b15c		4d 49 4e	eor $4e49	                eor $4E49
606	.b15f		41 4c		eor ($4c,x)	                eor ($4C,x)
607	.b161		0d 0a 3d	ora $3d0a	                ora $3D0A
608	>b164		1b				                .byte $1B
609							;BNE LB187        :\ B165= D0 20       P
610							;BVS LB11A        :\ B167= 70 B1       p1
611	>b165		d0				                .byte $D0
612	.b166						LB166:
613	.b166		20 70 b1	jsr $b170	                jsr LB170
614	.b169		b0 59		bcs $b1c4	                bcs LB1C4
615	.b16b		c9 1b		cmp #$1b	                cmp #$1B
616	.b16d		d0 f7		bne $b166	                bne LB166
617	.b16f		60		rts		                rts

619	.b170						LB170:
620	.b170		20 7a b1	jsr $b17a	                jsr LB17A
621	.b173		c9 7f		cmp #$7f	                cmp #$7F
622	.b175		f0 f9		beq $b170	                beq LB170
623	.b177		c9 20		cmp #$20	                cmp #$20
624	.b179		60		rts		                rts

626	.b17a						LB17A:
627	.b17a		da		phx		                phx
628	.b17b		5a		phy		                phy
629	.b17c						LB17C:
630	.b17c		20 89 b1	jsr $b189	                jsr LB189
631	.b17f		b0 03		bcs $b184	                bcs LB184
632	.b181		7a		ply		                ply
633	.b182		fa		plx		                plx
634	.b183		60		rts		                rts

636	.b184						LB184:
637	.b184		20 17 b0	jsr $b017	                jsr LB017
638	.b187						LB187:
639	.b187		80 f3		bra $b17c	                bra LB17C

641	.b189						LB189:
642	.b189		24 20		bit $20		                bit $20
643	.b18b		30 03		bmi $b190	                bmi LB190
644	.b18d		4c 96 b0	jmp $b096	                jmp LB096

646	.b190						LB190:
647	.b190		24 25		bit $25		                bit $25
648	.b192		30 4c		bmi $b1e0	                bmi LB1E0
649	.b194		24 23		bit $23		                bit $23
650	.b196		30 0b		bmi $b1a3	                bmi LB1A3
651	.b198						LB198:
652	.b198		a9 91		lda #$91	                lda #$91
653	.b19a		a2 01		ldx #$01	                ldx #$01
654	.b19c		20 f4 ff	jsr $fff4	                jsr OSBYTE
655	.b19f		98		tya		                tya
656	.b1a0		25 22		and $22		                and $22
657	.b1a2						LB1A2:
658	.b1a2		60		rts		                rts

660	.b1a3						LB1A3:
661	.b1a3		20 98 b1	jsr $b198	                jsr LB198
662	.b1a6		b0 fa		bcs $b1a2	                bcs LB1A2
663	.b1a8		20 d0 b1	jsr $b1d0	                jsr LB1D0
664	.b1ab		90 54		bcc $b201	                bcc LB201
665	.b1ad		0a		asl a		                asl a
666	.b1ae		0a		asl a		                asl a
667	.b1af		0a		asl a		                asl a
668	.b1b0		0a		asl a		                asl a
669	.b1b1		85 24		sta $24		                sta $24
670	.b1b3						LB1B3:
671	.b1b3		20 98 b1	jsr $b198	                jsr LB198
672	.b1b6		90 05		bcc $b1bd	                bcc LB1BD
673	.b1b8		20 17 b0	jsr $b017	                jsr LB017
674	.b1bb		80 f6		bra $b1b3	                bra LB1B3

676	.b1bd						LB1BD:
677	.b1bd		20 d0 b1	jsr $b1d0	                jsr LB1D0
678	.b1c0		90 f1		bcc $b1b3	                bcc LB1B3
679	.b1c2		05 24		ora $24		                ora $24
680	.b1c4						LB1C4:
681	.b1c4		18		clc		                clc
682	.b1c5		60		rts		                rts

684	.b1c6						LB1C6:
685	.b1c6		20 66 b1	jsr $b166	                jsr LB166
686	.b1c9		90 05		bcc $b1d0	                bcc LB1D0
687	.b1cb		fa		plx		                plx
688	.b1cc		fa		plx		                plx
689	.b1cd		4c 89 b3	jmp $b389	                jmp LB389

691	.b1d0						LB1D0:
692	.b1d0		c9 3a		cmp #$3a	                cmp #$3A
693	.b1d2		b0 03		bcs $b1d7	                bcs LB1D7
694	.b1d4		e9 2f		sbc #$2f	                sbc #$2F
695	.b1d6		60		rts		                rts

697	.b1d7						LB1D7:
698	.b1d7		e9 37		sbc #$37	                sbc #$37
699	.b1d9		c9 10		cmp #$10	                cmp #$10
700	.b1db		b0 e7		bcs $b1c4	                bcs LB1C4
701	.b1dd		c9 0a		cmp #$0a	                cmp #$0A
702	.b1df						LB1DF:
703	.b1df		60		rts		                rts

705	.b1e0						LB1E0:
706	.b1e0		64 26		stz $26		                stz $26
707	.b1e2		20 98 b1	jsr $b198	                jsr LB198
708	.b1e5		b0 f8		bcs $b1df	                bcs LB1DF
709	.b1e7		c9 7f		cmp #$7f	                cmp #$7F
710	.b1e9		b0 f4		bcs $b1df	                bcs LB1DF
711	.b1eb		c9 20		cmp #$20	                cmp #$20
712	.b1ed		b0 14		bcs $b203	                bcs LB203
713	.b1ef		24 27		bit $27		                bit $27
714	.b1f1		30 0e		bmi $b201	                bmi LB201
715	.b1f3		c9 07		cmp #$07	                cmp #$07
716	.b1f5		90 0a		bcc $b201	                bcc LB201
717	.b1f7		f0 47		beq $b240	                beq LB240
718	.b1f9		c9 0b		cmp #$0b	                cmp #$0B
719	.b1fb		90 43		bcc $b240	                bcc LB240
720	.b1fd		c9 0d		cmp #$0d	                cmp #$0D
721	.b1ff		f0 3f		beq $b240	                beq LB240
722	.b201						LB201:
723	.b201		38		sec		                sec
724	.b202		60		rts		                rts

726	.b203						LB203:
727	.b203		64 27		stz $27		                stz $27
728	.b205		c9 7c		cmp #$7c	                cmp #$7C
729	.b207		d0 35		bne $b23e	                bne LB23E
730	.b209						LB209:
731	.b209		20 98 b1	jsr $b198	                jsr LB198
732	.b20c		90 05		bcc $b213	                bcc LB213
733	.b20e		20 17 b0	jsr $b017	                jsr LB017
734	.b211		80 f6		bra $b209	                bra LB209

736	.b213						LB213:
737	.b213		c9 20		cmp #$20	                cmp #$20
738	.b215		90 2b		bcc $b242	                bcc LB242
739	.b217		c9 21		cmp #$21	                cmp #$21
740	.b219		d0 14		bne $b22f	                bne LB22F
741	.b21b		a9 80		lda #$80	                lda #$80
742	.b21d		85 26		sta $26		                sta $26
743	.b21f						LB21F:
744	.b21f		20 98 b1	jsr $b198	                jsr LB198
745	.b222		90 05		bcc $b229	                bcc LB229
746	.b224		20 17 b0	jsr $b017	                jsr LB017
747	.b227		80 f6		bra $b21f	                bra LB21F

749	.b229						LB229:
750	.b229		c9 20		cmp #$20	                cmp #$20
751	.b22b		90 f2		bcc $b21f	                bcc LB21F
752	.b22d		80 d4		bra $b203	                bra LB203

754	.b22f						LB22F:
755	.b22f		c9 3f		cmp #$3f	                cmp #$3F
756	.b231		d0 03		bne $b236	                bne LB236
757	.b233		a9 7f		lda #$7f	                lda #$7F
758	.b235		18		clc		                clc
759	.b236						LB236:
760	.b236		90 06		bcc $b23e	                bcc LB23E
761	.b238		c9 7c		cmp #$7c	                cmp #$7C
762	.b23a		f0 02		beq $b23e	                beq LB23E
763	.b23c		29 9f		and #$9f	                and #$9F
764	.b23e						LB23E:
765	.b23e		05 26		ora $26		                ora $26
766	.b240						LB240:
767	.b240		18		clc		                clc
768	.b241		60		rts		                rts

770	.b242						LB242:
771	.b242		38		sec		                sec
772	.b243		66 27		ror $27		                ror $27
773	.b245		38		sec		                sec
774	.b246		60		rts		                rts

776	.b247						LB247:
777	.b247		a9 00		lda #$00	                lda #$00
778	.b249		85 f2		sta $f2		                sta $F2
779	.b24b		a9 05		lda #$05	                lda #$05
780	.b24d		85 f3		sta $f3		                sta $F3
781	.b24f		a0 00		ldy #$00	                ldy #$00
782	.b251						LB251:
783	.b251		20 7a b1	jsr $b17a	                jsr LB17A
784	.b254		a6 1f		ldx $1f		                ldx $1F
785	.b256		f0 3e		beq $b296	                beq LB296
786	.b258		64 2b		stz $2b		                stz $2B
787	.b25a		c9 1b		cmp #$1b	                cmp #$1B
788	.b25c		d0 04		bne $b262	                bne LB262
789	.b25e		a0 00		ldy #$00	                ldy #$00
790	.b260		80 04		bra $b266	                bra LB266

792	.b262						LB262:
793	.b262		c9 0d		cmp #$0d	                cmp #$0D
794	.b264		d0 0d		bne $b273	                bne LB273
795	.b266						LB266:
796	.b266		a9 0d		lda #$0d	                lda #$0D
797	.b268		91 f2		sta ($f2),y	                sta ($F2),y
798	.b26a		24 2b		bit $2b		                bit $2B
799	.b26c		30 03		bmi $b271	                bmi LB271
800	.b26e		20 e3 ff	jsr $ffe3	                jsr OSASCI
801	.b271						LB271:
802	.b271		18		clc		                clc
803	.b272		60		rts		                rts

805	.b273						LB273:
806	.b273		c9 7f		cmp #$7f	                cmp #$7F
807	.b275		d0 07		bne $b27e	                bne LB27E
808	.b277		c0 00		cpy #$00	                cpy #$00
809	.b279		f0 d6		beq $b251	                beq LB251
810	.b27b		88		dey		                dey
811	.b27c		80 13		bra $b291	                bra LB291

813	.b27e						LB27E:
814	.b27e		c9 7f		cmp #$7f	                cmp #$7F
815	.b280		b0 cf		bcs $b251	                bcs LB251
816	.b282		c9 20		cmp #$20	                cmp #$20
817	.b284		90 cb		bcc $b251	                bcc LB251
818	.b286		c0 ff		cpy #$ff	                cpy #$FF
819	.b288		b0 c7		bcs $b251	                bcs LB251
820	.b28a		91 f2		sta ($f2),y	                sta ($F2),y
821	.b28c		c8		iny		                iny
822	.b28d		24 2b		bit $2b		                bit $2B
823	.b28f		30 c0		bmi $b251	                bmi LB251
824	.b291						LB291:
825	.b291		20 28 b7	jsr $b728	                jsr LB728
826	.b294		80 bb		bra $b251	                bra LB251

828	.b296						LB296:
829	.b296		c9 1b		cmp #$1b	                cmp #$1B
830	.b298		d0 e4		bne $b27e	                bne LB27E
831	.b29a		20 66 b1	jsr $b166	                jsr LB166
832	.b29d		c9 5c		cmp #$5c	                cmp #$5C
833	.b29f		f0 c5		beq $b266	                beq LB266
834	.b2a1		38		sec		                sec
835	.b2a2		60		rts		                rts

837	.b2a3						LB2A3:
838	.b2a3		a2 19		ldx #$19	                ldx #$19
839	.b2a5						LB2A5:
840	.b2a5		ca		dex		                dex
841	.b2a6		74 00		stz $00,x	                stz $00,x
842	.b2a8		d0 fb		bne $b2a5	                bne LB2A5
843	.b2aa						LB2AA:
844	.b2aa		64 3a		stz $3a		                stz $3A
845	.b2ac		64 3b		stz $3b		                stz $3B
846	.b2ae						LB2AE:
847	.b2ae		20 66 b1	jsr $b166	                jsr LB166
848	.b2b1		b0 2d		bcs $b2e0	                bcs LB2E0
849	.b2b3		20 ad b8	jsr $b8ad	                jsr LB8AD
850	.b2b6		90 2d		bcc $b2e5	                bcc LB2E5
851	.b2b8		48		pha		                pha
852	.b2b9		a5 3a		lda $3a		                lda $3A
853	.b2bb		95 02		sta $02,x	                sta $02,x
854	.b2bd		a5 3b		lda $3b		                lda $3B
855	.b2bf		95 03		sta $03,x	                sta $03,x
856	.b2c1		68		pla		                pla
857	.b2c2		c9 40		cmp #$40	                cmp #$40
858	.b2c4		b0 2f		bcs $b2f5	                bcs LB2F5
859	.b2c6		c9 30		cmp #$30	                cmp #$30
860	.b2c8		90 0d		bcc $b2d7	                bcc LB2D7
861	.b2ca		c9 3c		cmp #$3c	                cmp #$3C
862	.b2cc		b0 15		bcs $b2e3	                bcs LB2E3
863	.b2ce		e6 00		inc $00		                inc $00
864	.b2d0		e8		inx		                inx
865	.b2d1		e8		inx		                inx
866	.b2d2		e8		inx		                inx
867	.b2d3		e0 18		cpx #$18	                cpx #$18
868	.b2d5		90 d3		bcc $b2aa	                bcc LB2AA
869	.b2d7						LB2D7:
870	.b2d7		c9 40		cmp #$40	                cmp #$40
871	.b2d9		b0 1a		bcs $b2f5	                bcs LB2F5
872	.b2db		20 66 b1	jsr $b166	                jsr LB166
873	.b2de		90 f7		bcc $b2d7	                bcc LB2D7
874	.b2e0						LB2E0:
875	.b2e0		4c 89 b3	jmp $b389	                jmp LB389

877	.b2e3						LB2E3:
878	.b2e3		95 01		sta $01,x	                sta $01,x
879	.b2e5						LB2E5:
880	.b2e5		a5 00		lda $00		                lda $00
881	.b2e7		d0 c5		bne $b2ae	                bne LB2AE
882	.b2e9		e6 00		inc $00		                inc $00
883	.b2eb		80 c1		bra $b2ae	                bra LB2AE

885	.b2ed						LB2ED:
886	.b2ed		a9 01		lda #$01	                lda #$01
887	.b2ef		85 02		sta $02		                sta $02
888	.b2f1		64 01		stz $01		                stz $01
889	.b2f3		64 03		stz $03		                stz $03
890	.b2f5						LB2F5:
891	.b2f5		60		rts		                rts

893	.b2f6						LB2F6:
894	.b2f6		a9 03		lda #$03	                lda #$03
895	.b2f8		80 02		bra $b2fc	                bra LB2FC

897	.b2fa						LB2FA:
898	.b2fa		a9 00		lda #$00	                lda #$00
899	.b2fc						LB2FC:
900	.b2fc		da		phx		                phx
901	.b2fd		aa		tax		                tax
902	.b2fe		b5 01		lda $01,x	                lda $01,x
903	.b300		c9 01		cmp #$01	                cmp #$01
904	.b302		b5 03		lda $03,x	                lda $03,x
905	.b304		f0 01		beq $b307	                beq LB307
906	.b306		38		sec		                sec
907	.b307						LB307:
908	.b307		b5 02		lda $02,x	                lda $02,x
909	.b309		fa		plx		                plx
910	.b30a		29 ff		and #$ff	                and #$FF
911	.b30c		60		rts		                rts

913	.b30d						LB30D:
914	.b30d		68		pla		                pla
915	.b30e		85 28		sta $28		                sta $28
916	.b310		68		pla		                pla
917	.b311		85 29		sta $29		                sta $29
918	.b313		a5 01		lda $01		                lda $01
919	.b315		d0 21		bne $b338	                bne LB338
920	.b317		a5 02		lda $02		                lda $02
921	.b319		05 03		ora $03		                ora $03
922	.b31b		d0 02		bne $b31f	                bne LB31F
923	.b31d		e6 02		inc $02		                inc $02
924	.b31f						LB31F:
925	.b31f		a5 02		lda $02		                lda $02
926	.b321		d0 02		bne $b325	                bne LB325
927	.b323		c6 03		dec $03		                dec $03
928	.b325						LB325:
929	.b325		c6 02		dec $02		                dec $02
930	.b327		d0 04		bne $b32d	                bne LB32D
931	.b329		a5 03		lda $03		                lda $03
932	.b32b		f0 05		beq $b332	                beq LB332
933	.b32d						LB32D:
934	.b32d		20 32 b3	jsr $b332	                jsr LB332
935	.b330		80 ed		bra $b31f	                bra LB31F

937	.b332						LB332:
938	.b332		a5 29		lda $29		                lda $29
939	.b334		48		pha		                pha
940	.b335		a5 28		lda $28		                lda $28
941	.b337		48		pha		                pha
942	.b338						LB338:
943	.b338		60		rts		                rts

945	.b339						LB339:
946	.b339		c6 1e		dec $1e		                dec $1E
947	.b33b		d0 03		bne $b340	                bne LB340
948	.b33d		20 17 b0	jsr $b017	                jsr LB017
949	.b340						LB340:
950	.b340		a5 6f		lda $6f		                lda $6F
951	.b342		d0 04		bne $b348	                bne LB348
952	.b344		a5 21		lda $21		                lda $21
953	.b346		85 20		sta $20		                sta $20
954	.b348						LB348:
955	.b348		60		rts		                rts

957	.b349						LB349:
958	.b349		20 4e b3	jsr $b34e	                jsr LB34E
959	.b34c		80 fb		bra $b349	                bra LB349

961	.b34e						LB34E:
962	.b34e		20 39 b3	jsr $b339	                jsr LB339
963	.b351		20 70 b1	jsr $b170	                jsr LB170
964	.b354						LB354:
965	.b354		c9 20		cmp #$20	                cmp #$20
966	.b356		90 09		bcc $b361	                bcc LB361
967	.b358		4c 28 b7	jmp $b728	                jmp LB728

969	.b35b						LB35B:
970	.b35b		4c 6c b4	jmp $b46c	                jmp LB46C

972	.b35e						LB35E:
973	.b35e		4c 93 b4	jmp $b493	                jmp LB493

975	.b361						LB361:
976	.b361		48		pha		                pha
977	.b362		20 ed b2	jsr $b2ed	                jsr LB2ED
978	.b365		68		pla		                pla
979	.b366		c9 07		cmp #$07	                cmp #$07
980	.b368		90 51		bcc $b3bb	                bcc LB3BB
981	.b36a		f0 7d		beq $b3e9	                beq LB3E9
982	.b36c		c9 09		cmp #$09	                cmp #$09
983	.b36e		90 eb		bcc $b35b	                bcc LB35B
984	.b370		f0 ec		beq $b35e	                beq LB35E
985	.b372		c9 0b		cmp #$0b	                cmp #$0B
986	.b374		90 78		bcc $b3ee	                bcc LB3EE
987	.b376		c9 0d		cmp #$0d	                cmp #$0D
988	.b378		f0 6f		beq $b3e9	                beq LB3E9
989	.b37a		c9 1b		cmp #$1b	                cmp #$1B
990	.b37c		d0 3d		bne $b3bb	                bne LB3BB
991	.b37e						LB37E:
992	.b37e		a6 6f		ldx $6f		                ldx $6F
993	.b380		d0 04		bne $b386	                bne LB386
994	.b382		24 2d		bit $2d		                bit $2D
995	.b384		30 35		bmi $b3bb	                bmi LB3BB
996	.b386						LB386:
997	.b386		20 66 b1	jsr $b166	                jsr LB166
998	.b389						LB389:
999	.b389		c9 1b		cmp #$1b	                cmp #$1B
1000	.b38b		f0 f1		beq $b37e	                beq LB37E
1001	.b38d		c9 25		cmp #$25	                cmp #$25
1002	.b38f		f0 70		beq $b401	                beq LB401
1003	.b391		c9 28		cmp #$28	                cmp #$28
1004	.b393		f0 6f		beq $b404	                beq LB404
1005	.b395		c9 44		cmp #$44	                cmp #$44
1006	.b397		f0 55		beq $b3ee	                beq LB3EE
1007	.b399		c9 45		cmp #$45	                cmp #$45
1008	.b39b		f0 4e		beq $b3eb	                beq LB3EB
1009	.b39d		c9 4d		cmp #$4d	                cmp #$4D
1010	.b39f		f0 46		beq $b3e7	                beq LB3E7
1011	.b3a1		c9 50		cmp #$50	                cmp #$50
1012	.b3a3		f0 20		beq $b3c5	                beq LB3C5
1013	.b3a5		c9 5b		cmp #$5b	                cmp #$5B
1014	.b3a7		f0 5e		beq $b407	                beq LB407
1015	.b3a9		c9 5d		cmp #$5d	                cmp #$5D
1016	.b3ab		64 2b		stz $2b		                stz $2B
1017	.b3ad		f0 47		beq $b3f6	                beq LB3F6
1018	.b3af		c9 5e		cmp #$5e	                cmp #$5E
1019	.b3b1		f0 40		beq $b3f3	                beq LB3F3
1020	.b3b3		c9 5f		cmp #$5f	                cmp #$5F
1021	.b3b5		f0 05		beq $b3bc	                beq LB3BC
1022	.b3b7		c9 63		cmp #$63	                cmp #$63
1023	.b3b9		f0 43		beq $b3fe	                beq LB3FE
1024	.b3bb						LB3BB:
1025	.b3bb		60		rts		                rts

1027	.b3bc						LB3BC:
1028	.b3bc		20 47 b2	jsr $b247	                jsr LB247
1029	.b3bf		b0 c8		bcs $b389	                bcs LB389
1030	.b3c1						LB3C1:
1031	.b3c1		38		sec		                sec
1032	.b3c2		6c 32 02	jmp ($0232)	                jmp (IND2V)

1034	.b3c5						LB3C5:
1035	.b3c5		38		sec		                sec
1036	.b3c6		66 2b		ror $2b		                ror $2B
1037	.b3c8		20 47 b2	jsr $b247	                jsr LB247
1038	.b3cb		b0 bc		bcs $b389	                bcs LB389
1039	.b3cd		a6 1f		ldx $1f		                ldx $1F
1040	.b3cf		64 1f		stz $1f		                stz $1F
1041	.b3d1		f0 11		beq $b3e4	                beq LB3E4
1042	.b3d3		a0 00		ldy #$00	                ldy #$00
1043	.b3d5		20 9e b8	jsr $b89e	                jsr LB89E
1044	.b3d8		f0 e1		beq $b3bb	                beq LB3BB
1045	.b3da		86 6f		stx $6f		                stx $6F
1046	.b3dc		c9 2a		cmp #$2a	                cmp #$2A
1047	.b3de		f0 1b		beq $b3fb	                beq LB3FB
1048	.b3e0		c9 21		cmp #$21	                cmp #$21
1049	.b3e2		f0 dd		beq $b3c1	                beq LB3C1
1050	.b3e4						LB3E4:
1051	.b3e4		4c f2 b4	jmp $b4f2	                jmp LB4F2

1053	.b3e7						LB3E7:
1054	.b3e7		a9 0b		lda #$0b	                lda #$0B
1055	.b3e9						LB3E9:
1056	.b3e9		80 05		bra $b3f0	                bra LB3F0

1058	.b3eb						LB3EB:
1059	.b3eb		4c e7 ff	jmp $ffe7	                jmp OSNEWL

1061	.b3ee						LB3EE:
1062	.b3ee		a9 0a		lda #$0a	                lda #$0A
1063	.b3f0						LB3F0:
1064	.b3f0		4c ee ff	jmp $ffee	                jmp OSWRCH

1066	.b3f3						LB3F3:
1067	.b3f3		38		sec		                sec
1068	.b3f4		66 2b		ror $2b		                ror $2B
1069	.b3f6						LB3F6:
1070	.b3f6		20 47 b2	jsr $b247	                jsr LB247
1071	.b3f9		b0 8e		bcs $b389	                bcs LB389
1072	.b3fb						LB3FB:
1073	.b3fb		4c 1f b6	jmp $b61f	                jmp LB61F

1075	.b3fe						LB3FE:
1076	.b3fe		4c 7e af	jmp $af7e	                jmp LAF7E

1078	.b401						LB401:
1079	.b401		4c 40 b6	jmp $b640	                jmp LB640

1081	.b404						LB404:
1082	.b404		4c 8b b6	jmp $b68b	                jmp LB68B

1084	.b407						LB407:
1085	.b407		20 a3 b2	jsr $b2a3	                jsr LB2A3
1086	.b40a		a2 0e		ldx #$0e	                ldx #$0E
1087	.b40c						LB40C:
1088	.b40c		dd 1d b4	cmp $b41d,x	                cmp LB41E-1,x
1089	.b40f		f0 07		beq $b418	                beq LB418
1090	.b411		ca		dex		                dex
1091	.b412		d0 f8		bne $b40c	                bne LB40C
1092	.b414		38		sec		                sec
1093	.b415		6c 30 02	jmp ($0230)	                jmp (IND1V)

1095	.b418						LB418:
1096	.b418		8a		txa		                txa
1097	.b419		0a		asl a		                asl a
1098	.b41a		aa		tax		                tax
1099	.b41b		7c 2a b4	jmp ($b42a,x)	                jmp (LB42C-2,x)
1100	.b41e						LB41E:
1101	>b41e		41 42				                .byte $41,$42
1102	>b420		43				                .byte $43
1103	>b421		44				                .byte $44
1104	>b422		48				                .byte $48
1105	>b423		4a				                .byte $4a
1106	>b424		4b				                .byte $4B
1107	>b425		53				                .byte $53
1108	>b426		58				                .byte $58
1109	>b427		68				                .byte $68
1110	>b428		6c				                .byte $6C
1111	>b429		6e				                .byte $6E
1112	>b42a		66				                .byte $66
1113	>b42b		63				                .byte $63
1114	.b42c						LB42C:
1115	>b42c		c5 b4				                .word LB4C5
1116	>b42e		85 b4				                .word LB485
1117	>b430		93 b4				                .word LB493
1118	>b432		6c b4				                .word LB46C
1119	>b434		a7 b4				                .word LB4A7
1120	>b436		fd b5				                .word LB5FD
1121	>b438		0d b6				                .word LB60D
1122	>b43a		20 b7				                .word LB720
1123	>b43c		e1 b5				                .word LB5E1
1124	>b43e		b1 b6				                .word LB6B1
1125	>b440		ad b6				                .word LB6AD
1126	>b442		a9 b5				                .word LB5A9
1127	>b444		a7 b4				                .word LB4A7
1128	>b446		d1 b4				                .word LB4D1
1129	.b448						LB448:
1130	.b448		20 4d b4	jsr $b44d	                jsr LB44D
1131	.b44b		80 fb		bra $b448	                bra LB448
1132	.b44d						LB44D:
1133	.b44d		20 39 b3	jsr $b339	                jsr LB339
1134	.b450		20 7a b1	jsr $b17a	                jsr LB17A
1135	.b453		c9 1b		cmp #$1b	                cmp #$1B
1136	.b455		d0 0f		bne $b466	                bne LB466
1137	.b457		a9 da		lda #$da	                lda #$DA
1138	.b459		a0 ff		ldy #$ff	                ldy #$FF
1139	.b45b		a2 00		ldx #$00	                ldx #$00
1140	.b45d		20 f4 ff	jsr $fff4	                jsr OSBYTE
1141	.b460		a9 1b		lda #$1b	                lda #$1B
1142	.b462		e0 00		cpx #$00	                cpx #$00
1143	.b464		f0 03		beq $b469	                beq LB469
1144	.b466						LB466:
1145	.b466		4c ee ff	jmp $ffee	                jmp OSWRCH

1147	.b469						LB469:
1148	.b469		4c 7e b3	jmp $b37e	                jmp LB37E

1150	.b46c						LB46C:
1151	.b46c		a9 08		lda #$08	                lda #$08
1152	.b46e		85 2c		sta $2c		                sta $2C
1153	.b470		20 0d b3	jsr $b30d	                jsr LB30D
1154	.b473		20 21 b8	jsr $b821	                jsr LB821
1155	.b476		8a		txa		                txa
1156	.b477		d0 07		bne $b480	                bne LB480
1157	.b479		24 34		bit $34		                bit $34
1158	.b47b		10 65		bpl $b4e2	                bpl LB4E2
1159	.b47d						LB47D:
1160	.b47d		98		tya		                tya
1161	.b47e						LB47E:
1162	.b47e		f0 62		beq $b4e2	                beq LB4E2
1163	.b480						LB480:
1164	.b480		a5 2c		lda $2c		                lda $2C
1165	.b482						LB482:
1166	.b482		4c ee ff	jmp $ffee	                jmp OSWRCH

1168	.b485						LB485:
1169	.b485		a9 0a		lda #$0a	                lda #$0A
1170	.b487		85 2c		sta $2c		                sta $2C
1171	.b489		20 0d b3	jsr $b30d	                jsr LB30D
1172	.b48c		20 21 b8	jsr $b821	                jsr LB821
1173	.b48f						LB48F:
1174	.b48f		c4 39		cpy $39		                cpy zterm.numRowsMinusOne
1175	.b491		80 eb		bra $b47e	                bra LB47E

1177	.b493						LB493:
1178	.b493		a9 09		lda #$09	                lda #$09
1179	.b495		85 2c		sta $2c		                sta $2C
1180	.b497		20 0d b3	jsr $b30d	                jsr LB30D
1181	.b49a		20 21 b8	jsr $b821	                jsr LB821
1182	.b49d		e4 37		cpx $37		                cpx zterm.numColumnsMinusOne
1183	.b49f						LB49F:
1184	.b49f		90 df		bcc $b480	                bcc LB480
1185	.b4a1		a5 34		lda $34		                lda $34
1186	.b4a3		f0 3d		beq $b4e2	                beq LB4E2
1187	.b4a5		80 e8		bra $b48f	                bra LB48F

1189	.b4a7						LB4A7:
1190	.b4a7		20 fa b2	jsr $b2fa	                jsr LB2FA
1191	.b4aa		b0 36		bcs $b4e2	                bcs LB4E2
1192	.b4ac		a8		tay		                tay
1193	.b4ad		f0 01		beq $b4b0	                beq LB4B0
1194	.b4af		88		dey		                dey
1195	.b4b0						LB4B0:
1196	.b4b0		20 f6 b2	jsr $b2f6	                jsr LB2F6
1197	.b4b3		b0 2d		bcs $b4e2	                bcs LB4E2
1198	.b4b5		aa		tax		                tax
1199	.b4b6		f0 01		beq $b4b9	                beq LB4B9
1200	.b4b8		ca		dex		                dex
1201	.b4b9						LB4B9:
1202	.b4b9		a9 1f		lda #$1f	                lda #$1F
1203	.b4bb		20 ee ff	jsr $ffee	                jsr OSWRCH
1204	.b4be		8a		txa		                txa
1205	.b4bf		20 ee ff	jsr $ffee	                jsr OSWRCH
1206	.b4c2		98		tya		                tya
1207	.b4c3		80 bd		bra $b482	                bra LB482

1209	.b4c5						LB4C5:
1210	.b4c5		a9 0b		lda #$0b	                lda #$0B
1211	.b4c7		85 2c		sta $2c		                sta $2C
1212	.b4c9		20 0d b3	jsr $b30d	                jsr LB30D
1213	.b4cc		20 21 b8	jsr $b821	                jsr LB821
1214	.b4cf		80 ac		bra $b47d	                bra LB47D

1216	.b4d1						LB4D1:
1217	.b4d1		20 fa b2	jsr $b2fa	                jsr LB2FA
1218	.b4d4		d0 0c		bne $b4e2	                bne LB4E2
1219	.b4d6		a8		tay		                tay
1220	.b4d7						LB4D7:
1221	.b4d7		a9 1b		lda #$1b	                lda #$1B
1222	.b4d9						LB4D9:
1223	.b4d9		c8		iny		                iny
1224	.b4da		20 83 b0	jsr $b083	                jsr LB083
1225	.b4dd		b9 e2 b4	lda $b4e2,y	                lda LB4E2,y
1226	.b4e0		d0 f7		bne $b4d9	                bne LB4D9
1227	.b4e2						LB4E2:
1228	.b4e2		60		rts		                rts

1230	>b4e3		5b				                .byte $5B
1231	>b4e4		3e 35 63			                .byte $3e,$35,$63
1232	>b4e7		00				                .byte $00
1233	>b4e8		5b				                .byte $5B
1234	>b4e9		30 6e				                .byte $30,$6e
1235	>b4eb		00				                .byte $00
1236	>b4ec		5b				                .byte $5B
1237	>b4ed		33				                .byte $33
1238	>b4ee		6e 00 5b			                .byte $6e,$00,$5b
1239	>b4f1		00				                .byte $00
1240	.b4f2						LB4F2:
1241	.b4f2		20 30 b8	jsr $b830	                jsr LB830
1242	.b4f5		b0 50		bcs $b547	                bcs LB547
1243	.b4f7		c9 07		cmp #$07	                cmp #$07
1244	.b4f9		b0 1d		bcs $b518	                bcs LB518
1245	.b4fb		48		pha		                pha
1246	.b4fc		20 32 b8	jsr $b832	                jsr LB832
1247	.b4ff		64 2e		stz $2e		                stz $2E
1248	.b501		c9 0a		cmp #$0a	                cmp #$0A
1249	.b503		f0 06		beq $b50b	                beq LB50B
1250	.b505		c6 2e		dec $2e		                dec $2E
1251	.b507		c9 09		cmp #$09	                cmp #$09
1252	.b509		d0 3b		bne $b546	                bne LB546
1253	.b50b						LB50B:
1254	.b50b		7a		ply		                ply
1255	.b50c		c0 06		cpy #$06	                cpy #$06
1256	.b50e		d0 05		bne $b515	                bne LB515
1257	.b510		a5 2e		lda $2e		                lda $2E
1258	.b512		85 34		sta $34		                sta $34
1259	.b514						LB514:
1260	.b514		60		rts		                rts

1262	.b515						LB515:
1263	.b515		4c e0 b6	jmp $b6e0	                jmp LB6E0

1265	.b518						LB518:
1266	.b518		c9 08		cmp #$08	                cmp #$08
1267	.b51a		f0 1e		beq $b53a	                beq LB53A
1268	.b51c		b0 2c		bcs $b54a	                bcs LB54A
1269	.b51e						LB51E:
1270	.b51e		20 9e b8	jsr $b89e	                jsr LB89E
1271	.b521		f0 f1		beq $b514	                beq LB514
1272	.b523		20 65 b5	jsr $b565	                jsr LB565
1273	.b526		20 9e b8	jsr $b89e	                jsr LB89E
1274	.b529		f0 0a		beq $b535	                beq LB535
1275	.b52b		c9 2c		cmp #$2c	                cmp #$2C
1276	.b52d		d0 18		bne $b547	                bne LB547
1277	.b52f		c8		iny		                iny
1278	.b530		20 35 b5	jsr $b535	                jsr LB535
1279	.b533		80 e9		bra $b51e	                bra LB51E

1281	.b535						LB535:
1282	.b535		a5 3a		lda $3a		                lda $3A
1283	.b537		4c ee ff	jmp $ffee	                jmp OSWRCH

1285	.b53a						LB53A:
1286	.b53a		20 9e b8	jsr $b89e	                jsr LB89E
1287	.b53d		20 65 b5	jsr $b565	                jsr LB565
1288	.b540		b0 05		bcs $b547	                bcs LB547
1289	.b542		a5 3a		lda $3a		                lda $3A
1290	.b544		80 33		bra $b579	                bra reinitDisplayMode

1292	.b546						LB546:
1293	.b546		68		pla		                pla
1294	.b547						LB547:
1295	.b547		4c b3 b7	jmp $b7b3	                jmp LB7B3

1297	.b54a						LB54A:
1298	.b54a		a0 00		ldy #$00	                ldy #$00
1299	.b54c		c9 0b		cmp #$0b	                cmp #$0B
1300	.b54e		90 f7		bcc $b547	                bcc LB547
1301	.b550		f0 0f		beq $b561	                beq LB561
1302	.b552		c8		iny		                iny
1303	.b553		c9 0e		cmp #$0e	                cmp #$0E
1304	.b555		f0 0a		beq $b561	                beq LB561
1305	.b557		b0 ee		bcs $b547	                bcs LB547
1306	.b559		a0 04		ldy #$04	                ldy #$04
1307	.b55b		c9 0c		cmp #$0c	                cmp #$0C
1308	.b55d		f0 02		beq $b561	                beq LB561
1309	.b55f		a0 05		ldy #$05	                ldy #$05
1310	.b561						LB561:
1311	.b561		98		tya		                tya
1312	.b562		4c 4f b6	jmp $b64f	                jmp LB64F

1314	.b565						LB565:
1315	.b565		20 a9 b8	jsr $b8a9	                jsr LB8A9
1316	.b568		b0 09		bcs $b573	                bcs LB573
1317	.b56a						LB56A:
1318	.b56a		c8		iny		                iny
1319	.b56b		b1 f2		lda ($f2),y	                lda ($F2),y
1320	.b56d		20 ad b8	jsr $b8ad	                jsr LB8AD
1321	.b570		90 f8		bcc $b56a	                bcc LB56A
1322	.b572		18		clc		                clc
1323	.b573						LB573:
1324	.b573		60		rts		                rts

1326	.b574		20 fa b2	jsr $b2fa	                jsr LB2FA
1327	.b577		b0 ce		bcs $b547	                bcs LB547
1328	.b579						reinitDisplayMode:
1329	.b579		a8		tay		                tay              ;Y = screen mode
1330	.b57a		29 7f		and #$7f	                and #$7F         ;mask off shadow bit (unnecessarily!)
1331	.b57c		c9 08		cmp #$08	                cmp #$08
1332	.b57e		b0 c7		bcs $b547	                bcs LB547                    ;branch taken if mode>=8
1333	.b580		aa		tax		                tax                          ;X = mode number
1334	.b581		bd a1 b5	lda $b5a1,x	                lda screenDimensionsForMode,x                  ;
1335	.b584		4a		lsr a		                lsr a       ;A = width -1; C = height flag (1=32 rows,
1336							                            ;0=25 rows)
1337	.b585		a2 1f		ldx #$1f	                ldx #$1F                     ;assume 32 rows
1338	.b587		b0 02		bcs $b58b	                bcs +                        ;taken if 32 rows
1339	.b589		a2 18		ldx #$18	                ldx #$18                     ;25 rows
1340	.b58b						+
1341	.b58b		86 39		stx $39		                stx zterm.numRowsMinusOne    ;store rows
1342	.b58d		85 37		sta $37		                sta zterm.numColumnsMinusOne ;store columns
1343	.b58f		1a		inc a		                inc a                        ;compute column count
1344	.b590		85 38		sta $38		                sta zterm.numColumns

1346							                ; re-select mode
1347	.b592		a9 16		lda #$16	                lda #22
1348	.b594		20 ee ff	jsr $ffee	                jsr OSWRCH
1349	.b597		98		tya		                tya
1350	.b598		20 ee ff	jsr $ffee	                jsr OSWRCH

1352	.b59b		0a		asl a		                asl a
1353	.b59c		c9 0e		cmp #$0e	                cmp #$0E                     ;C=1 if Mode 7
1354	.b59e		66 30		ror $30		                ror $30                      ;?$30 bit 7 set if Mode 7
1355	.b5a0		60		rts		                rts

1357	.b5a1						screenDimensionsForMode:
1358	>b5a1		9f				                .byte 79<<1|1 ;mode 0 - 80 columns, 32 rows
1359	>b5a2		4f				                .byte 39<<1|1 ;mode 1 - 40 columns, 32 rows
1360	>b5a3		27				                .byte 19<<1|1 ;mode 2 - 20 columns, 32 rows
1361	>b5a4		9e				                .byte 79<<1|0 ;mode 3 - 80 columns, 25 rows
1362	>b5a5		4f				                .byte 39<<1|1 ;mode 4 - 40 columns, 32 rows
1363	>b5a6		27				                .byte 19<<1|1 ;mode 5 - 20 columns, 32 rows
1364	>b5a7		4e				                .byte 39<<1|0 ;mode 6 - 40 columns, 25 rows
1365	>b5a8		4e				                .byte 39<<1|0 ;mode 7 - 40 columns, 25 rows

1367	.b5a9						LB5A9:
1368	.b5a9		20 fa b2	jsr $b2fa	                jsr LB2FA
1369	.b5ac		b0 58		bcs $b606	                bcs LB606
1370	.b5ae		c9 05		cmp #$05	                cmp #$05
1371	.b5b0		f0 22		beq $b5d4	                beq LB5D4
1372	.b5b2		c9 06		cmp #$06	                cmp #$06
1373	.b5b4						LB5B4:
1374	.b5b4		d0 50		bne $b606	                bne LB606
1375	.b5b6		20 21 b8	jsr $b821	                jsr LB821
1376	.b5b9		e8		inx		                inx
1377	.b5ba		da		phx		                phx
1378	.b5bb		c8		iny		                iny
1379	.b5bc		5a		phy		                phy
1380	.b5bd		a0 0d		ldy #$0d	                ldy #$0D
1381	.b5bf		20 d7 b4	jsr $b4d7	                jsr LB4D7
1382	.b5c2		68		pla		                pla
1383	.b5c3		20 6e b0	jsr $b06e	                jsr LB06E
1384	.b5c6		a9 3b		lda #$3b	                lda #$3B
1385	.b5c8		20 83 b0	jsr $b083	                jsr LB083
1386	.b5cb		68		pla		                pla
1387	.b5cc		20 6e b0	jsr $b06e	                jsr LB06E
1388	.b5cf		a9 52		lda #$52	                lda #$52
1389	.b5d1		4c 83 b0	jmp $b083	                jmp LB083

1391	.b5d4						LB5D4:
1392	.b5d4		a0 05		ldy #$05	                ldy #$05
1393	.b5d6		24 19		bit $19		                bit $19
1394	.b5d8		64 19		stz $19		                stz $19
1395	.b5da		10 02		bpl $b5de	                bpl LB5DE
1396	.b5dc		a0 09		ldy #$09	                ldy #$09
1397	.b5de						LB5DE:
1398	.b5de		4c d7 b4	jmp $b4d7	                jmp LB4D7

1400	.b5e1						LB5E1:
1401	.b5e1		20 21 b8	jsr $b821	                jsr LB821
1402	.b5e4		da		phx		                phx
1403	.b5e5		5a		phy		                phy
1404	.b5e6		a9 20		lda #$20	                lda #$20
1405	.b5e8		85 2c		sta $2c		                sta $2C
1406	.b5ea		20 f2 b5	jsr $b5f2	                jsr LB5F2
1407	.b5ed		7a		ply		                ply
1408	.b5ee		fa		plx		                plx
1409	.b5ef		4c b9 b4	jmp $b4b9	                jmp LB4B9

1411	.b5f2						LB5F2:
1412	.b5f2		20 0d b3	jsr $b30d	                jsr LB30D
1413	.b5f5		20 21 b8	jsr $b821	                jsr LB821
1414	.b5f8		e4 38		cpx $38		                cpx zterm.numColumns
1415	.b5fa		4c 9f b4	jmp $b49f	                jmp LB49F

1417	.b5fd						LB5FD:
1418	.b5fd		20 fa b2	jsr $b2fa	                jsr LB2FA
1419	.b600		b0 04		bcs $b606	                bcs LB606
1420	.b602		c9 03		cmp #$03	                cmp #$03
1421	.b604		90 12		bcc $b618	                bcc LB618
1422	.b606						LB606:
1423	.b606		60		rts		                rts

1425	.b607						LB607:
1426	>b607		0f				                .byte $0F
1427	>b608		13				                .byte $13
1428	.b609		1a		inc a		                inc a
1429	.b60a		00		brk #		                brk
1430	.b60b		04 0b		tsb $0b		                tsb $0B
1431	.b60d						LB60D:
1432	.b60d		20 fa b2	jsr $b2fa	                jsr LB2FA
1433	.b610		b0 f4		bcs $b606	                bcs LB606
1434	.b612		c9 03		cmp #$03	                cmp #$03
1435	.b614		b0 f0		bcs $b606	                bcs LB606
1436	.b616		69 03		adc #$03	                adc #$03
1437	.b618						LB618:
1438	.b618		aa		tax		                tax
1439	.b619		bd 07 b6	lda $b607,x	                lda LB607,x
1440	.b61c		4c e6 b7	jmp $b7e6	                jmp LB7E6

1442	.b61f						LB61F:
1443	.b61f		a5 20		lda $20		                lda $20
1444	.b621		25 36		and $36		                and $36
1445	.b623		10 03		bpl $b628	                bpl LB628
1446	.b625		4c b3 b7	jmp $b7b3	                jmp LB7B3

1448	.b628						LB628:
1449	.b628		a9 e5		lda #$e5	                lda #$E5
1450	.b62a		20 23 b8	jsr $b823	                jsr osbyteX00Y00
1451	.b62d		a2 00		ldx #$00	                ldx #$00
1452	.b62f		a0 05		ldy #$05	                ldy #$05
1453	.b631		20 f7 ff	jsr $fff7	                jsr OSCLI
1454	.b634						disableESCAPE:
1455	.b634		a9 e5		lda #$e5	                lda #$E5
1456	.b636		a2 01		ldx #$01	                ldx #$01
1457	.b638		20 25 b8	jsr $b825	                jsr osbyteY00                ;disable ESCAPE key
1458	.b63b		a9 7e		lda #$7e	                lda #$7E
1459	.b63d		4c f4 ff	jmp $fff4	                jmp OSBYTE                   ;acknowledge ESCAPE

1461	.b640						LB640:
1462	.b640		20 c6 b1	jsr $b1c6	                jsr LB1C6
1463	.b643		c9 07		cmp #$07	                cmp #$07
1464	.b645		90 08		bcc $b64f	                bcc LB64F
1465	.b647		d0 bd		bne $b606	                bne LB606
1466	.b649		20 66 b1	jsr $b166	                jsr LB166
1467	.b64c		4c 54 b3	jmp $b354	                jmp LB354

1469	.b64f						LB64F:
1470	.b64f		85 2a		sta $2a		                sta $2A
1471	.b651		64 25		stz $25		                stz $25
1472	.b653		64 23		stz $23		                stz $23
1473	.b655		a2 fe		ldx #$fe	                ldx #$FE
1474	.b657		9a		txs		                txs
1475	.b658		e8		inx		                inx
1476	.b659		86 22		stx $22		                stx $22
1477	.b65b		a5 2a		lda $2a		                lda $2A
1478	.b65d		c9 06		cmp #$06	                cmp #$06
1479	.b65f		90 04		bcc $b665	                bcc LB665
1480	.b661		66 23		ror $23		                ror $23
1481	.b663		80 08		bra $b66d	                bra LB66D

1483	.b665						LB665:
1484	.b665		c9 04		cmp #$04	                cmp #$04
1485	.b667		90 12		bcc $b67b	                bcc LB67B
1486	.b669		f0 06		beq $b671	                beq LB671
1487	.b66b		66 25		ror $25		                ror $25
1488	.b66d						LB66D:
1489	.b66d		64 27		stz $27		                stz $27
1490	.b66f		46 22		lsr $22		                lsr $22
1491	.b671						LB671:
1492	.b671		66 30		ror $30		                ror $30
1493	.b673		a9 21		lda #$21	                lda #$21
1494	.b675		20 e6 b7	jsr $b7e6	                jsr LB7E6
1495	.b678		4c 48 b4	jmp $b448	                jmp LB448

1497	.b67b						LB67B:
1498	.b67b		64 30		stz $30		                stz $30
1499	.b67d		4a		lsr a		                lsr a
1500	.b67e		66 2d		ror $2d		                ror $2D
1501	.b680		4a		lsr a		                lsr a
1502	.b681		66 22		ror $22		                ror $22
1503	.b683		a9 1e		lda #$1e	                lda #$1E
1504	.b685		20 e6 b7	jsr $b7e6	                jsr LB7E6
1505	.b688		4c 49 b3	jmp $b349	                jmp LB349

1507	.b68b						LB68B:
1508	.b68b		20 c6 b1	jsr $b1c6	                jsr LB1C6
1509	.b68e		90 0b		bcc $b69b	                bcc LB69B
1510	.b690						LB690:
1511	.b690		4a		lsr a		                lsr a
1512	.b691		29 04		and #$04	                and #$04
1513	.b693		d0 07		bne $b69c	                bne LB69C
1514	.b695		6a		ror a		                ror a
1515	.b696		4a		lsr a		                lsr a
1516	.b697		69 40		adc #$40	                adc #$40
1517	.b699		85 33		sta $33		                sta $33
1518	.b69b						LB69B:
1519	.b69b		60		rts		                rts

1521	.b69c						LB69C:
1522	.b69c		64 33		stz $33		                stz $33
1523	.b69e		a2 60		ldx #$60	                ldx #$60
1524	.b6a0		a0 23		ldy #$23	                ldy #$23
1525	.b6a2		90 04		bcc $b6a8	                bcc LB6A8
1526	.b6a4		da		phx		                phx
1527	.b6a5		5a		phy		                phy
1528	.b6a6		fa		plx		                plx
1529	.b6a7		7a		ply		                ply
1530	.b6a8						LB6A8:
1531	.b6a8		86 31		stx $31		                stx $31
1532	.b6aa		84 32		sty $32		                sty $32
1533	.b6ac		60		rts		                rts

1535	.b6ad						LB6AD:
1536	.b6ad		a9 00		lda #$00	                lda #$00
1537	.b6af		80 02		bra $b6b3	                bra LB6B3

1539	.b6b1						LB6B1:
1540	.b6b1		a9 ff		lda #$ff	                lda #$FF
1541	.b6b3						LB6B3:
1542	.b6b3		85 2e		sta $2e		                sta $2E
1543	.b6b5		64 2f		stz $2f		                stz $2F
1544	.b6b7						LB6B7:
1545	.b6b7		a6 2f		ldx $2f		                ldx $2F
1546	.b6b9		e8		inx		                inx
1547	.b6ba		e8		inx		                inx
1548	.b6bb		e8		inx		                inx
1549	.b6bc		e0 1b		cpx #$1b	                cpx #$1B
1550	.b6be		f0 1f		beq $b6df	                beq LB6DF
1551	.b6c0		86 2f		stx $2f		                stx $2F
1552	.b6c2		20 c7 b6	jsr $b6c7	                jsr LB6C7
1553	.b6c5		80 f0		bra $b6b7	                bra LB6B7

1555	.b6c7						LB6C7:
1556	.b6c7		bc ff ff	ldy $ffff,x	                ldy $FFFF,x
1557	.b6ca		b5 00		lda $00,x	                lda $00,x
1558	.b6cc		d0 11		bne $b6df	                bne LB6DF
1559	.b6ce		bd fe ff	lda $fffe,x	                lda LFFFE,x
1560	.b6d1		c9 3e		cmp #$3e	                cmp #$3E
1561	.b6d3		90 0a		bcc $b6df	                bcc LB6DF
1562	.b6d5		f0 09		beq $b6e0	                beq LB6E0
1563	.b6d7		a5 2e		lda $2e		                lda $2E
1564	.b6d9		c0 07		cpy #$07	                cpy #$07
1565	.b6db		d0 02		bne $b6df	                bne LB6DF
1566	.b6dd		85 34		sta $34		                sta $34
1567	.b6df						LB6DF:
1568	.b6df		60		rts		                rts

1570	.b6e0						LB6E0:
1571	.b6e0		a5 2e		lda $2e		                lda $2E
1572	.b6e2		c0 01		cpy #$01	                cpy #$01
1573	.b6e4		b0 07		bcs $b6ed	                bcs LB6ED
1574	.b6e6		1a		inc a		                inc a
1575	.b6e7		0a		asl a		                asl a
1576	.b6e8		aa		tax		                tax
1577	.b6e9		a9 04		lda #$04	                lda #$04
1578	.b6eb		80 09		bra $b6f6	                bra LB6F6

1580	.b6ed						LB6ED:
1581	.b6ed		d0 0a		bne $b6f9	                bne LB6F9
1582	.b6ef		aa		tax		                tax
1583	.b6f0		f0 02		beq $b6f4	                beq LB6F4
1584	.b6f2		a2 21		ldx #$21	                ldx #$21
1585	.b6f4						LB6F4:
1586	.b6f4		a9 cb		lda #$cb	                lda #$CB
1587	.b6f6						LB6F6:
1588	.b6f6		4c 25 b8	jmp $b825	                jmp osbyteY00

1590	.b6f9						LB6F9:
1591	.b6f9		c0 03		cpy #$03	                cpy #$03
1592	.b6fb		b0 0a		bcs $b707	                bcs LB707
1593	.b6fd		24 20		bit $20		                bit $20
1594	.b6ff		10 03		bpl $b704	                bpl LB704
1595	.b701		a8		tay		                tay
1596	.b702		f0 db		beq $b6df	                beq LB6DF
1597	.b704						LB704:
1598	.b704		85 36		sta $36		                sta $36
1599	.b706						LB706:
1600	.b706		60		rts		                rts

1602	.b707						LB707:
1603	.b707		d0 09		bne $b712	                bne LB712
1604	.b709		2a		rol a		                rol a
1605	.b70a		a9 00		lda #$00	                lda #$00
1606	.b70c						LB70C:
1607	.b70c		2a		rol a		                rol a
1608	.b70d		aa		tax		                tax
1609	.b70e		a9 60		lda #$60	                lda #$60
1610	.b710		80 e4		bra $b6f6	                bra LB6F6

1612	.b712						LB712:
1613	.b712		c0 05		cpy #$05	                cpy #$05
1614	.b714		b0 05		bcs $b71b	                bcs LB71B
1615	.b716		2a		rol a		                rol a
1616	.b717		a9 01		lda #$01	                lda #$01
1617	.b719		80 f1		bra $b70c	                bra LB70C

1619	.b71b						LB71B:
1620	.b71b		d0 e9		bne $b706	                bne LB706
1621	.b71d		85 35		sta $35		                sta $35
1622	.b71f		60		rts		                rts

1624	.b720						LB720:
1625	.b720		20 0d b3	jsr $b30d	                jsr LB30D
1626	.b723		a9 23		lda #$23	                lda #$23
1627	.b725		4c e6 b7	jmp $b7e6	                jmp LB7E6

1629	.b728						LB728:
1630	.b728		5a		phy		                phy
1631	.b729		da		phx		                phx
1632	.b72a		48		pha		                pha
1633	.b72b		24 30		bit $30		                bit $30
1634	.b72d		30 1d		bmi $b74c	                bmi LB74C
1635	.b72f		c9 40		cmp #$40	                cmp #$40
1636	.b731		90 06		bcc $b739	                bcc LB739
1637	.b733		a8		tay		                tay
1638	.b734		30 03		bmi $b739	                bmi LB739
1639	.b736		18		clc		                clc
1640	.b737		65 33		adc $33		                adc $33
1641	.b739						LB739:
1642	.b739		a8		tay		                tay
1643	.b73a		c0 60		cpy #$60	                cpy #$60
1644	.b73c		d0 02		bne $b740	                bne LB740
1645	.b73e		a9 bb		lda #$bb	                lda #$BB
1646	.b740						LB740:
1647	.b740		c0 bb		cpy #$bb	                cpy #$BB
1648	.b742		d0 02		bne $b746	                bne LB746
1649	.b744		a5 32		lda $32		                lda $32
1650	.b746						LB746:
1651	.b746		c0 23		cpy #$23	                cpy #$23
1652	.b748		d0 02		bne $b74c	                bne LB74C
1653	.b74a		a5 31		lda $31		                lda $31
1654	.b74c						LB74C:
1655	.b74c		48		pha		                pha
1656	.b74d		20 21 b8	jsr $b821	                jsr LB821
1657	.b750		e4 38		cpx $38		                cpx zterm.numColumns
1658	.b752		f0 0a		beq $b75e	                beq LB75E
1659	.b754						LB754:
1660	.b754		68		pla		                pla
1661	.b755		20 ee ff	jsr $ffee	                jsr OSWRCH
1662	.b758		48		pha		                pha
1663	.b759						LB759:
1664	.b759		68		pla		                pla
1665	.b75a		68		pla		                pla
1666	.b75b		fa		plx		                plx
1667	.b75c		7a		ply		                ply
1668	.b75d		60		rts		                rts

1670	.b75e						LB75E:
1671	.b75e		24 34		bit $34		                bit $34
1672	.b760		10 f7		bpl $b759	                bpl LB759
1673	.b762		24 35		bit $35		                bit $35
1674	.b764		10 ee		bpl $b754	                bpl LB754
1675	.b766		68		pla		                pla
1676	.b767		48		pha		                pha
1677	.b768		c9 20		cmp #$20	                cmp #$20
1678	.b76a		90 e8		bcc $b754	                bcc LB754
1679	.b76c		d0 05		bne $b773	                bne LB773
1680	.b76e		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1681	.b771		80 e6		bra $b759	                bra LB759

1683	.b773						LB773:
1684	.b773		a9 0d		lda #$0d	                lda #$0D
1685	.b775		20 ee ff	jsr $ffee	                jsr OSWRCH
1686	.b778		20 b9 b4	jsr $b4b9	                jsr LB4B9
1687	.b77b		a0 00		ldy #$00	                ldy #$00
1688	.b77d						LB77D:
1689	.b77d		5a		phy		                phy
1690	.b77e		a9 08		lda #$08	                lda #$08
1691	.b780		20 ee ff	jsr $ffee	                jsr OSWRCH
1692	.b783		a9 87		lda #$87	                lda #$87
1693	.b785		20 f4 ff	jsr $fff4	                jsr OSBYTE
1694	.b788		7a		ply		                ply
1695	.b789		8a		txa		                txa
1696	.b78a		c9 20		cmp #$20	                cmp #$20
1697	.b78c		f0 0d		beq $b79b	                beq LB79B
1698	.b78e		99 40 04	sta $0440,y	                sta $0440,y
1699	.b791		c8		iny		                iny
1700	.b792		c4 38		cpy $38		                cpy zterm.numColumns
1701	.b794		d0 e7		bne $b77d	                bne LB77D
1702	.b796		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1703	.b799		80 b9		bra $b754	                bra LB754

1705	.b79b						LB79B:
1706	.b79b		5a		phy		                phy
1707	.b79c		a9 00		lda #$00	                lda #$00
1708	.b79e		20 e6 b7	jsr $b7e6	                jsr LB7E6
1709	.b7a1		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1710	.b7a4		7a		ply		                ply
1711	.b7a5		c8		iny		                iny
1712	.b7a6						LB7A6:
1713	.b7a6		88		dey		                dey
1714	.b7a7		f0 ab		beq $b754	                beq LB754
1715	.b7a9		b9 3f 04	lda $043f,y	                lda $043F,y
1716	.b7ac		20 ee ff	jsr $ffee	                jsr OSWRCH
1717	.b7af		80 f5		bra $b7a6	                bra LB7A6

1719	.b7b1						terminalINDnHandler:
1720	.b7b1		90 46		bcc $b7f9	                bcc LB7F9
1721	.b7b3						LB7B3:
1722	.b7b3		38		sec		                sec
1723	.b7b4		66 19		ror $19		                ror $19
1724	.b7b6						LB7B6:
1725	.b7b6		a2 32		ldx #$32	                ldx #$32
1726	.b7b8						LB7B8:
1727	.b7b8		a9 d5		lda #$d5	                lda #$D5
1728	.b7ba		20 25 b8	jsr $b825	                jsr osbyteY00
1729	.b7bd		da		phx		                phx
1730	.b7be		a2 01		ldx #$01	                ldx #$01
1731	.b7c0		a9 d6		lda #$d6	                lda #$D6
1732	.b7c2		20 25 b8	jsr $b825	                jsr osbyteY00
1733	.b7c5		da		phx		                phx
1734	.b7c6		a9 ec		lda #$ec	                lda #$EC
1735	.b7c8		a2 14		ldx #$14	                ldx #$14
1736	.b7ca		20 25 b8	jsr $b825	                jsr osbyteY00
1737	.b7cd		a9 07		lda #$07	                lda #$07
1738	.b7cf		20 ee ff	jsr $ffee	                jsr OSWRCH
1739	.b7d2		a9 ec		lda #$ec	                lda #$EC
1740	.b7d4		20 25 b8	jsr $b825	                jsr osbyteY00
1741	.b7d7		fa		plx		                plx
1742	.b7d8		a9 d6		lda #$d6	                lda #$D6
1743	.b7da		20 25 b8	jsr $b825	                jsr osbyteY00
1744	.b7dd		fa		plx		                plx
1745	.b7de		a9 d5		lda #$d5	                lda #$D5
1746	.b7e0		80 43		bra $b825	                bra osbyteY00

1748	.b7e2						LB7E2:
1749	.b7e2		a2 8c		ldx #$8c	                ldx #$8C
1750	.b7e4		80 d2		bra $b7b8	                bra LB7B8

1752	.b7e6						LB7E6:
1753	.b7e6		a8		tay		                tay
1754	.b7e7		a2 0a		ldx #$0a	                ldx #$0A
1755	.b7e9		a9 97		lda #$97	                lda #$97
1756	.b7eb						LB7EB:
1757	.b7eb		0a		asl a		                asl a
1758	.b7ec		b0 01		bcs $b7ef	                bcs LB7EF
1759	.b7ee		c8		iny		                iny
1760	.b7ef						LB7EF:
1761	.b7ef		4a		lsr a		                lsr a
1762	.b7f0		20 ee ff	jsr $ffee	                jsr OSWRCH
1763	.b7f3		b9 fa b7	lda $b7fa,y	                lda LB7FA,y
1764	.b7f6		ca		dex		                dex
1765	.b7f7		d0 f2		bne $b7eb	                bne LB7EB
1766	.b7f9						LB7F9:
1767	.b7f9		60		rts		                rts

1769	.b7fa						LB7FA:
1770							                ; PHP
1771							                ; ORA $06
1772							                ; BRA LB807

1774							                ; TSB $05
1775							                ; BRK
1776							                ; BRK
1777							                ; ORA ($80,x)
1778							                ; PHP
1779							                ; TSB $06
1780							                ; BRA LB812

1782							                ; ORA $0A
1783							                ; BRA LB816

1785							                ; BRK
1786							                ; ORA $00
1787							                ; BRK
1788	>b7fa		08				                .byte $08
1789	>b7fb		05				                .byte $05
1790	>b7fc		06				                .byte $06
1791	>b7fd		80				                .byte $80
1792	>b7fe		08				                .byte $08
1793	>b7ff		04				                .byte $04
1794	>b800		05				                .byte $05
1795	>b801		00				                .byte $00
1796	>b802		00				                .byte $00
1797	>b803		01				                .byte $01
1798	>b804		80				                .byte $80
1799	>b805		08				                .byte $08
1800	>b806		04				                .byte $04
1801	>b807		06				                .byte $06
1802	>b808		80				                .byte $80
1803	>b809		08				                .byte $08
1804	>b80a		05				                .byte $05
1805	>b80b		0a				                .byte $0A
1806	>b80c		80				                .byte $80
1807	>b80d		08				                .byte $08
1808	>b80e		00				                .byte $00
1809	>b80f		05				                .byte $05
1810	>b810		00				                .byte $00
1811	>b811		00				                .byte $00

1813	.b812						LB812:
1814							;ORA (&80,x)      :\ B812= 01 80       ..
1815	>b812		01				                .byte $01
1816	>b813		80				                .byte $80
1817							;PHP              :\ B814= 08          .
1818	>b814		08				                .byte $08
1819							;BRK              :\ B815= 00          .
1820	>b815		00				                .byte $00
1821							;.LB816
1822							;ASL A            :\ B816= 0A          .
1823	>b816		0a				                .byte $0A
1824							;BRA LB829        :\ B817= 80 10       ..
1825	>b817		80				                .byte $80
1826	>b818		10				                .byte $10
1827							;ORA (&80,x)      :\ B819= 01 80       ..
1828	>b819		01				                .byte $01
1829	>b81a		80				                .byte $80
1830							;BPL LB79D        :\ B81B= 10 80       ..
1831	>b81b		10				                .byte $10
1832	>b81c		80				                .byte $80
1833	>b81d		07				                .byte $07
1834	>b81e		00				                .byte $00
1835	>b81f		03				                .byte $03
1836							;BRA LB7CB        :\ B820= 80 A9       .)
1837							; LDA &A2          :\ B822= A5 A2       %"
1838							; BRK              :\ B824= 00          .
1839	>b820		80				                .byte $80
1840	.b821						LB821:
1841	.b821		a9 a5		lda #$a5	                lda #$A5
1842	.b823						osbyteX00Y00:
1843	.b823		a2 00		ldx #$00	                ldx #$00
1844	.b825						osbyteY00:
1845	.b825		a0 00		ldy #$00	                ldy #$00
1846	.b827						-
1847	.b827		4c f4 ff	jmp $fff4	                jmp OSBYTE

1849	.b82a						LB82A:
1850	.b82a		a9 9c		lda #$9c	                lda #$9C
1851	.b82c		a0 9f		ldy #$9f	                ldy #$9F
1852	.b82e		80 f7		bra $b827	                bra -

1854	.b830						LB830:
1855	.b830		a0 00		ldy #$00	                ldy #$00
1856	.b832						LB832:
1857	.b832		a2 ff		ldx #$ff	                ldx #$FF
1858	.b834		da		phx		                phx
1859	.b835						LB835:
1860	.b835		68		pla		                pla
1861	.b836		1a		inc a		                inc a
1862	.b837		48		pha		                pha
1863	.b838		5a		phy		                phy
1864	.b839		20 9e b8	jsr $b89e	                jsr LB89E
1865	.b83c						LB83C:
1866	.b83c		c9 2e		cmp #$2e	                cmp #'.'
1867	.b83e		f0 18		beq $b858	                beq LB858
1868	.b840		c9 40		cmp #$40	                cmp #'@'
1869	.b842		b0 02		bcs $b846	                bcs LB846
1870	.b844		a9 00		lda #$00	                lda #$00
1871	.b846						LB846:
1872	.b846		29 5f		and #$5f	                and #$5F
1873	.b848		e8		inx		                inx
1874	.b849		5d 6b b8	eor $b86b,x	                eor LB86B,x
1875	.b84c		f0 05		beq $b853	                beq LB853
1876	.b84e		0a		asl a		                asl a
1877	.b84f		f0 07		beq $b858	                beq LB858
1878	.b851		80 0a		bra $b85d	                bra LB85D

1880	.b853						LB853:
1881	.b853		c8		iny		                iny
1882	.b854		b1 f2		lda ($f2),y	                lda ($F2),y
1883	.b856		80 e4		bra $b83c	                bra LB83C

1885	.b858						LB858:
1886	.b858		c8		iny		                iny
1887	.b859		68		pla		                pla
1888	.b85a		68		pla		                pla
1889	.b85b		18		clc		                clc
1890	.b85c		60		rts		                rts

1892	.b85d						LB85D:
1893	.b85d		7a		ply		                ply
1894	.b85e						LB85E:
1895	.b85e		bd 6b b8	lda $b86b,x	                lda LB86B,x
1896	.b861		d0 03		bne $b866	                bne LB866
1897	.b863		38		sec		                sec
1898	.b864		68		pla		                pla
1899	.b865		60		rts		                rts

1901	.b866						LB866:
1902	.b866		30 cd		bmi $b835	                bmi LB835
1903	.b868		e8		inx		                inx
1904	.b869		80 f3		bra $b85e	                bra LB85E

1906	.b86b						LB86B:
1907	>b86b		43				                .byte $43
1908	>b86c		4b				                .byte $4B
1909	>b86d		cc 4d 43			                .byte $cc,$4d,$43
1910	>b870		cc 50 52			                .byte $cc,$50,$52
1911	>b873		4f				                .byte $4F
1912	>b874		d4				                .byte $D4
1913	>b875		52 46				                .byte $52,$46
1914	>b877		c3				                .byte $C3
1915	>b878		54				                .byte $54
1916	>b879		46 c3				                .byte $46,$c3
1917	>b87b		57				                .byte $57
1918	>b87c		57				                .byte $57
1919	>b87d		cd 41 57			                .byte $cd,$41,$57
1920	>b880		cd 56 44			                .byte $cd,$56,$44
1921	>b883		d5 4d				                .byte $d5,$4d
1922	>b885		4f				                .byte $4F
1923	>b886		44				                .byte $44
1924	>b887		c5 4f				                .byte $c5,$4f
1925	>b889		ce 4f 46			                .byte $ce,$4f,$46
1926	>b88c		c6 54				                .byte $c6,$54
1927	>b88e		45 52				                .byte $45,$52
1928	>b890		4d 49 4e			                .byte $4d,$49,$4e
1929	>b893		41 cc				                .byte $41,$cc
1930	>b895		42				                .byte $42
1931	>b896		42				                .byte $42
1932	>b897		c3				                .byte $C3
1933	>b898		47				                .byte $47
1934	>b899		d3				                .byte $D3
1935	>b89a		54				                .byte $54
1936	>b89b		54				                .byte $54
1937	>b89c		d9				                .byte $D9
1938	>b89d		00				                .byte $00
1939	.b89e						LB89E:
1940	.b89e		88		dey		                dey
1941	.b89f						LB89F:
1942	.b89f		c8		iny		                iny
1943	.b8a0		b1 f2		lda ($f2),y	                lda ($F2),y
1944	.b8a2		c9 20		cmp #$20	                cmp #$20
1945	.b8a4		f0 f9		beq $b89f	                beq LB89F
1946	.b8a6		c9 0d		cmp #$0d	                cmp #$0D
1947	.b8a8		60		rts		                rts

1949	.b8a9						LB8A9:
1950	.b8a9		64 3a		stz $3a		                stz $3A
1951	.b8ab		64 3b		stz $3b		                stz $3B
1952	.b8ad						LB8AD:
1953	.b8ad		c9 30		cmp #$30	                cmp #$30
1954	.b8af		90 04		bcc $b8b5	                bcc LB8B5
1955	.b8b1		c9 3a		cmp #$3a	                cmp #$3A
1956	.b8b3		90 02		bcc $b8b7	                bcc LB8B7
1957	.b8b5						LB8B5:
1958	.b8b5		38		sec		                sec
1959	.b8b6		60		rts		                rts

1961	.b8b7						LB8B7:
1962	.b8b7		e9 2f		sbc #$2f	                sbc #$2F
1963	.b8b9		48		pha		                pha
1964	.b8ba		a5 3b		lda $3b		                lda $3B
1965	.b8bc		48		pha		                pha
1966	.b8bd		a5 3a		lda $3a		                lda $3A
1967	.b8bf		0a		asl a		                asl a
1968	.b8c0		26 3b		rol $3b		                rol $3B
1969	.b8c2		0a		asl a		                asl a
1970	.b8c3		26 3b		rol $3b		                rol $3B
1971	.b8c5		18		clc		                clc
1972	.b8c6		65 3a		adc $3a		                adc $3A
1973	.b8c8		85 3a		sta $3a		                sta $3A
1974	.b8ca		68		pla		                pla
1975	.b8cb		65 3b		adc $3b		                adc $3B
1976	.b8cd		85 3b		sta $3b		                sta $3B
1977	.b8cf		06 3a		asl $3a		                asl $3A
1978	.b8d1		26 3b		rol $3b		                rol $3B
1979	.b8d3		68		pla		                pla
1980	.b8d4		18		clc		                clc
1981	.b8d5		65 3a		adc $3a		                adc $3A
1982	.b8d7		85 3a		sta $3a		                sta $3A
1983	.b8d9		90 03		bcc $b8de	                bcc LB8DE
1984	.b8db		e6 3b		inc $3b		                inc $3B
1985	.b8dd		18		clc		                clc
1986	.b8de						LB8DE:
1987	.b8de		60		rts		                rts

:6	;******  Return to file: src/terminal.s65

7045							;-------------------------------------------------------------------------

7047							; Unused space
7048							; ============
7049	.b8df						terminalUnusedBegin:
7050	>b8df		ff ff ff ff ff ff ff ff		                .fill $b900-*,$ff
	>b8e7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b8f7		ff ff ff ff ff ff ff ff ff
7051	=33						terminalUnusedSize=*-terminalUnusedBegin

7053							; Default font
7054							; ============
7055	.b900						LB900:
7057							                ; CHR$32 -
7058	>b900		00				                .byte %00000000
7059	>b901		00				                .byte %00000000
7060	>b902		00				                .byte %00000000
7061	>b903		00				                .byte %00000000
7062	>b904		00				                .byte %00000000
7063	>b905		00				                .byte %00000000
7064	>b906		00				                .byte %00000000
7065	>b907		00				                .byte %00000000

7067							                ; CHR$33 - !
7068	>b908		18				                .byte %00011000
7069	>b909		18				                .byte %00011000
7070	>b90a		18				                .byte %00011000
7071	>b90b		18				                .byte %00011000
7072	>b90c		18				                .byte %00011000
7073	>b90d		00				                .byte %00000000
7074	>b90e		18				                .byte %00011000
7075	>b90f		00				                .byte %00000000

7077							                ; CHR$34 - "
7078	>b910		6c				                .byte %01101100
7079	>b911		6c				                .byte %01101100
7080	>b912		6c				                .byte %01101100
7081	>b913		00				                .byte %00000000
7082	>b914		00				                .byte %00000000
7083	>b915		00				                .byte %00000000
7084	>b916		00				                .byte %00000000
7085	>b917		00				                .byte %00000000

7087							                ; CHR$35 - #
7088	>b918		36				                .byte %00110110
7089	>b919		36				                .byte %00110110
7090	>b91a		7f				                .byte %01111111
7091	>b91b		36				                .byte %00110110
7092	>b91c		7f				                .byte %01111111
7093	>b91d		36				                .byte %00110110
7094	>b91e		36				                .byte %00110110
7095	>b91f		00				                .byte %00000000

7097							                ; CHR$36 - $
7098	>b920		0c				                .byte %00001100
7099	>b921		3f				                .byte %00111111
7100	>b922		68				                .byte %01101000
7101	>b923		3e				                .byte %00111110
7102	>b924		0b				                .byte %00001011
7103	>b925		7e				                .byte %01111110
7104	>b926		18				                .byte %00011000
7105	>b927		00				                .byte %00000000

7107							                ; CHR$37 - %
7108	>b928		60				                .byte %01100000
7109	>b929		66				                .byte %01100110
7110	>b92a		0c				                .byte %00001100
7111	>b92b		18				                .byte %00011000
7112	>b92c		30				                .byte %00110000
7113	>b92d		66				                .byte %01100110
7114	>b92e		06				                .byte %00000110
7115	>b92f		00				                .byte %00000000

7117							                ; CHR$38 - &
7118	>b930		38				                .byte %00111000
7119	>b931		6c				                .byte %01101100
7120	>b932		6c				                .byte %01101100
7121	>b933		38				                .byte %00111000
7122	>b934		6d				                .byte %01101101
7123	>b935		66				                .byte %01100110
7124	>b936		3b				                .byte %00111011
7125	>b937		00				                .byte %00000000

7127							                ; CHR$39 - '
7128	>b938		0c				                .byte %00001100
7129	>b939		18				                .byte %00011000
7130	>b93a		30				                .byte %00110000
7131	>b93b		00				                .byte %00000000
7132	>b93c		00				                .byte %00000000
7133	>b93d		00				                .byte %00000000
7134	>b93e		00				                .byte %00000000
7135	>b93f		00				                .byte %00000000

7137							                ; CHR$40 - (
7138	>b940		0c				                .byte %00001100
7139	>b941		18				                .byte %00011000
7140	>b942		30				                .byte %00110000
7141	>b943		30				                .byte %00110000
7142	>b944		30				                .byte %00110000
7143	>b945		18				                .byte %00011000
7144	>b946		0c				                .byte %00001100
7145	>b947		00				                .byte %00000000

7147							                ; CHR$41 - )
7148	>b948		30				                .byte %00110000
7149	>b949		18				                .byte %00011000
7150	>b94a		0c				                .byte %00001100
7151	>b94b		0c				                .byte %00001100
7152	>b94c		0c				                .byte %00001100
7153	>b94d		18				                .byte %00011000
7154	>b94e		30				                .byte %00110000
7155	>b94f		00				                .byte %00000000

7157							                ; CHR$42 - *
7158	>b950		00				                .byte %00000000
7159	>b951		18				                .byte %00011000
7160	>b952		7e				                .byte %01111110
7161	>b953		3c				                .byte %00111100
7162	>b954		7e				                .byte %01111110
7163	>b955		18				                .byte %00011000
7164	>b956		00				                .byte %00000000
7165	>b957		00				                .byte %00000000

7167							                ; CHR$43 - +
7168	>b958		00				                .byte %00000000
7169	>b959		18				                .byte %00011000
7170	>b95a		18				                .byte %00011000
7171	>b95b		7e				                .byte %01111110
7172	>b95c		18				                .byte %00011000
7173	>b95d		18				                .byte %00011000
7174	>b95e		00				                .byte %00000000
7175	>b95f		00				                .byte %00000000

7177							                ; CHR$44 - ,
7178	>b960		00				                .byte %00000000
7179	>b961		00				                .byte %00000000
7180	>b962		00				                .byte %00000000
7181	>b963		00				                .byte %00000000
7182	>b964		00				                .byte %00000000
7183	>b965		18				                .byte %00011000
7184	>b966		18				                .byte %00011000
7185	>b967		30				                .byte %00110000

7187							                ; CHR$45 - -
7188	>b968		00				                .byte %00000000
7189	>b969		00				                .byte %00000000
7190	>b96a		00				                .byte %00000000
7191	>b96b		7e				                .byte %01111110
7192	>b96c		00				                .byte %00000000
7193	>b96d		00				                .byte %00000000
7194	>b96e		00				                .byte %00000000
7195	>b96f		00				                .byte %00000000

7197							                ; CHR$46 - .
7198	>b970		00				                .byte %00000000
7199	>b971		00				                .byte %00000000
7200	>b972		00				                .byte %00000000
7201	>b973		00				                .byte %00000000
7202	>b974		00				                .byte %00000000
7203	>b975		18				                .byte %00011000
7204	>b976		18				                .byte %00011000
7205	>b977		00				                .byte %00000000

7207							                ; CHR$47 - /
7208	>b978		00				                .byte %00000000
7209	>b979		06				                .byte %00000110
7210	>b97a		0c				                .byte %00001100
7211	>b97b		18				                .byte %00011000
7212	>b97c		30				                .byte %00110000
7213	>b97d		60				                .byte %01100000
7214	>b97e		00				                .byte %00000000
7215	>b97f		00				                .byte %00000000

7217							                ; CHR$48 - 0
7218	>b980		3c				                .byte %00111100
7219	>b981		66				                .byte %01100110
7220	>b982		6e				                .byte %01101110
7221	>b983		7e				                .byte %01111110
7222	>b984		76				                .byte %01110110
7223	>b985		66				                .byte %01100110
7224	>b986		3c				                .byte %00111100
7225	>b987		00				                .byte %00000000

7227							                ; CHR$49 - 1
7228	>b988		18				                .byte %00011000
7229	>b989		38				                .byte %00111000
7230	>b98a		18				                .byte %00011000
7231	>b98b		18				                .byte %00011000
7232	>b98c		18				                .byte %00011000
7233	>b98d		18				                .byte %00011000
7234	>b98e		7e				                .byte %01111110
7235	>b98f		00				                .byte %00000000

7237							                ; CHR$50 - 2
7238	>b990		3c				                .byte %00111100
7239	>b991		66				                .byte %01100110
7240	>b992		06				                .byte %00000110
7241	>b993		0c				                .byte %00001100
7242	>b994		18				                .byte %00011000
7243	>b995		30				                .byte %00110000
7244	>b996		7e				                .byte %01111110
7245	>b997		00				                .byte %00000000

7247							                ; CHR$51 - 3
7248	>b998		3c				                .byte %00111100
7249	>b999		66				                .byte %01100110
7250	>b99a		06				                .byte %00000110
7251	>b99b		1c				                .byte %00011100
7252	>b99c		06				                .byte %00000110
7253	>b99d		66				                .byte %01100110
7254	>b99e		3c				                .byte %00111100
7255	>b99f		00				                .byte %00000000

7257							                ; CHR$52 - 4
7258	>b9a0		0c				                .byte %00001100
7259	>b9a1		1c				                .byte %00011100
7260	>b9a2		3c				                .byte %00111100
7261	>b9a3		6c				                .byte %01101100
7262	>b9a4		7e				                .byte %01111110
7263	>b9a5		0c				                .byte %00001100
7264	>b9a6		0c				                .byte %00001100
7265	>b9a7		00				                .byte %00000000

7267							                ; CHR$53 - 5
7268	>b9a8		7e				                .byte %01111110
7269	>b9a9		60				                .byte %01100000
7270	>b9aa		7c				                .byte %01111100
7271	>b9ab		06				                .byte %00000110
7272	>b9ac		06				                .byte %00000110
7273	>b9ad		66				                .byte %01100110
7274	>b9ae		3c				                .byte %00111100
7275	>b9af		00				                .byte %00000000

7277							                ; CHR$54 - 6
7278	>b9b0		1c				                .byte %00011100
7279	>b9b1		30				                .byte %00110000
7280	>b9b2		60				                .byte %01100000
7281	>b9b3		7c				                .byte %01111100
7282	>b9b4		66				                .byte %01100110
7283	>b9b5		66				                .byte %01100110
7284	>b9b6		3c				                .byte %00111100
7285	>b9b7		00				                .byte %00000000

7287							                ; CHR$55 - 7
7288	>b9b8		7e				                .byte %01111110
7289	>b9b9		06				                .byte %00000110
7290	>b9ba		0c				                .byte %00001100
7291	>b9bb		18				                .byte %00011000
7292	>b9bc		30				                .byte %00110000
7293	>b9bd		30				                .byte %00110000
7294	>b9be		30				                .byte %00110000
7295	>b9bf		00				                .byte %00000000

7297							                ; CHR$56 - 8
7298	>b9c0		3c				                .byte %00111100
7299	>b9c1		66				                .byte %01100110
7300	>b9c2		66				                .byte %01100110
7301	>b9c3		3c				                .byte %00111100
7302	>b9c4		66				                .byte %01100110
7303	>b9c5		66				                .byte %01100110
7304	>b9c6		3c				                .byte %00111100
7305	>b9c7		00				                .byte %00000000

7307							                ; CHR$57 - 9
7308	>b9c8		3c				                .byte %00111100
7309	>b9c9		66				                .byte %01100110
7310	>b9ca		66				                .byte %01100110
7311	>b9cb		3e				                .byte %00111110
7312	>b9cc		06				                .byte %00000110
7313	>b9cd		0c				                .byte %00001100
7314	>b9ce		38				                .byte %00111000
7315	>b9cf		00				                .byte %00000000

7317							                ; CHR$58 - :
7318	>b9d0		00				                .byte %00000000
7319	>b9d1		00				                .byte %00000000
7320	>b9d2		18				                .byte %00011000
7321	>b9d3		18				                .byte %00011000
7322	>b9d4		00				                .byte %00000000
7323	>b9d5		18				                .byte %00011000
7324	>b9d6		18				                .byte %00011000
7325	>b9d7		00				                .byte %00000000

7327							                ; CHR$59 - ;
7328	>b9d8		00				                .byte %00000000
7329	>b9d9		00				                .byte %00000000
7330	>b9da		18				                .byte %00011000
7331	>b9db		18				                .byte %00011000
7332	>b9dc		00				                .byte %00000000
7333	>b9dd		18				                .byte %00011000
7334	>b9de		18				                .byte %00011000
7335	>b9df		30				                .byte %00110000

7337							                ; CHR$60 - <
7338	>b9e0		0c				                .byte %00001100
7339	>b9e1		18				                .byte %00011000
7340	>b9e2		30				                .byte %00110000
7341	>b9e3		60				                .byte %01100000
7342	>b9e4		30				                .byte %00110000
7343	>b9e5		18				                .byte %00011000
7344	>b9e6		0c				                .byte %00001100
7345	>b9e7		00				                .byte %00000000

7347							                ; CHR$61 - =
7348	>b9e8		00				                .byte %00000000
7349	>b9e9		00				                .byte %00000000
7350	>b9ea		7e				                .byte %01111110
7351	>b9eb		00				                .byte %00000000
7352	>b9ec		7e				                .byte %01111110
7353	>b9ed		00				                .byte %00000000
7354	>b9ee		00				                .byte %00000000
7355	>b9ef		00				                .byte %00000000

7357							                ; CHR$62 - >
7358	>b9f0		30				                .byte %00110000
7359	>b9f1		18				                .byte %00011000
7360	>b9f2		0c				                .byte %00001100
7361	>b9f3		06				                .byte %00000110
7362	>b9f4		0c				                .byte %00001100
7363	>b9f5		18				                .byte %00011000
7364	>b9f6		30				                .byte %00110000
7365	>b9f7		00				                .byte %00000000

7367							                ; CHR$63 - ?
7368	>b9f8		3c				                .byte %00111100
7369	>b9f9		66				                .byte %01100110
7370	>b9fa		0c				                .byte %00001100
7371	>b9fb		18				                .byte %00011000
7372	>b9fc		18				                .byte %00011000
7373	>b9fd		00				                .byte %00000000
7374	>b9fe		18				                .byte %00011000
7375	>b9ff		00				                .byte %00000000

7377							                ; CHR$64 - @
7378	>ba00		3c				                .byte %00111100
7379	>ba01		66				                .byte %01100110
7380	>ba02		6e				                .byte %01101110
7381	>ba03		6a				                .byte %01101010
7382	>ba04		6e				                .byte %01101110
7383	>ba05		60				                .byte %01100000
7384	>ba06		3c				                .byte %00111100
7385	>ba07		00				                .byte %00000000

7387							                ; CHR$65 - A
7388	>ba08		3c				                .byte %00111100
7389	>ba09		66				                .byte %01100110
7390	>ba0a		66				                .byte %01100110
7391	>ba0b		7e				                .byte %01111110
7392	>ba0c		66				                .byte %01100110
7393	>ba0d		66				                .byte %01100110
7394	>ba0e		66				                .byte %01100110
7395	>ba0f		00				                .byte %00000000

7397							                ; CHR$66 - B
7398	>ba10		7c				                .byte %01111100
7399	>ba11		66				                .byte %01100110
7400	>ba12		66				                .byte %01100110
7401	>ba13		7c				                .byte %01111100
7402	>ba14		66				                .byte %01100110
7403	>ba15		66				                .byte %01100110
7404	>ba16		7c				                .byte %01111100
7405	>ba17		00				                .byte %00000000

7407							                ; CHR$67 - C
7408	>ba18		3c				                .byte %00111100
7409	>ba19		66				                .byte %01100110
7410	>ba1a		60				                .byte %01100000
7411	>ba1b		60				                .byte %01100000
7412	>ba1c		60				                .byte %01100000
7413	>ba1d		66				                .byte %01100110
7414	>ba1e		3c				                .byte %00111100
7415	>ba1f		00				                .byte %00000000

7417							                ; CHR$68 - D
7418	>ba20		78				                .byte %01111000
7419	>ba21		6c				                .byte %01101100
7420	>ba22		66				                .byte %01100110
7421	>ba23		66				                .byte %01100110
7422	>ba24		66				                .byte %01100110
7423	>ba25		6c				                .byte %01101100
7424	>ba26		78				                .byte %01111000
7425	>ba27		00				                .byte %00000000

7427							                ; CHR$69 - E
7428	>ba28		7e				                .byte %01111110
7429	>ba29		60				                .byte %01100000
7430	>ba2a		60				                .byte %01100000
7431	>ba2b		7c				                .byte %01111100
7432	>ba2c		60				                .byte %01100000
7433	>ba2d		60				                .byte %01100000
7434	>ba2e		7e				                .byte %01111110
7435	>ba2f		00				                .byte %00000000

7437							                ; CHR$70 - F
7438	>ba30		7e				                .byte %01111110
7439	>ba31		60				                .byte %01100000
7440	>ba32		60				                .byte %01100000
7441	>ba33		7c				                .byte %01111100
7442	>ba34		60				                .byte %01100000
7443	>ba35		60				                .byte %01100000
7444	>ba36		60				                .byte %01100000
7445	>ba37		00				                .byte %00000000

7447							                ; CHR$71 - G
7448	>ba38		3c				                .byte %00111100
7449	>ba39		66				                .byte %01100110
7450	>ba3a		60				                .byte %01100000
7451	>ba3b		6e				                .byte %01101110
7452	>ba3c		66				                .byte %01100110
7453	>ba3d		66				                .byte %01100110
7454	>ba3e		3c				                .byte %00111100
7455	>ba3f		00				                .byte %00000000

7457							                ; CHR$72 - H
7458	>ba40		66				                .byte %01100110
7459	>ba41		66				                .byte %01100110
7460	>ba42		66				                .byte %01100110
7461	>ba43		7e				                .byte %01111110
7462	>ba44		66				                .byte %01100110
7463	>ba45		66				                .byte %01100110
7464	>ba46		66				                .byte %01100110
7465	>ba47		00				                .byte %00000000

7467							                ; CHR$73 - I
7468	>ba48		7e				                .byte %01111110
7469	>ba49		18				                .byte %00011000
7470	>ba4a		18				                .byte %00011000
7471	>ba4b		18				                .byte %00011000
7472	>ba4c		18				                .byte %00011000
7473	>ba4d		18				                .byte %00011000
7474	>ba4e		7e				                .byte %01111110
7475	>ba4f		00				                .byte %00000000

7477							                ; CHR$74 - J
7478	>ba50		3e				                .byte %00111110
7479	>ba51		0c				                .byte %00001100
7480	>ba52		0c				                .byte %00001100
7481	>ba53		0c				                .byte %00001100
7482	>ba54		0c				                .byte %00001100
7483	>ba55		6c				                .byte %01101100
7484	>ba56		38				                .byte %00111000
7485	>ba57		00				                .byte %00000000

7487							                ; CHR$75 - K
7488	>ba58		66				                .byte %01100110
7489	>ba59		6c				                .byte %01101100
7490	>ba5a		78				                .byte %01111000
7491	>ba5b		70				                .byte %01110000
7492	>ba5c		78				                .byte %01111000
7493	>ba5d		6c				                .byte %01101100
7494	>ba5e		66				                .byte %01100110
7495	>ba5f		00				                .byte %00000000

7497							                ; CHR$76 - L
7498	>ba60		60				                .byte %01100000
7499	>ba61		60				                .byte %01100000
7500	>ba62		60				                .byte %01100000
7501	>ba63		60				                .byte %01100000
7502	>ba64		60				                .byte %01100000
7503	>ba65		60				                .byte %01100000
7504	>ba66		7e				                .byte %01111110
7505	>ba67		00				                .byte %00000000

7507							                ; CHR$77 - M
7508	>ba68		63				                .byte %01100011
7509	>ba69		77				                .byte %01110111
7510	>ba6a		7f				                .byte %01111111
7511	>ba6b		6b				                .byte %01101011
7512	>ba6c		6b				                .byte %01101011
7513	>ba6d		63				                .byte %01100011
7514	>ba6e		63				                .byte %01100011
7515	>ba6f		00				                .byte %00000000

7517							                ; CHR$78 - N
7518	>ba70		66				                .byte %01100110
7519	>ba71		66				                .byte %01100110
7520	>ba72		76				                .byte %01110110
7521	>ba73		7e				                .byte %01111110
7522	>ba74		6e				                .byte %01101110
7523	>ba75		66				                .byte %01100110
7524	>ba76		66				                .byte %01100110
7525	>ba77		00				                .byte %00000000

7527							                ; CHR$79 - O
7528	>ba78		3c				                .byte %00111100
7529	>ba79		66				                .byte %01100110
7530	>ba7a		66				                .byte %01100110
7531	>ba7b		66				                .byte %01100110
7532	>ba7c		66				                .byte %01100110
7533	>ba7d		66				                .byte %01100110
7534	>ba7e		3c				                .byte %00111100
7535	>ba7f		00				                .byte %00000000

7537							                ; CHR$80 - P
7538	>ba80		7c				                .byte %01111100
7539	>ba81		66				                .byte %01100110
7540	>ba82		66				                .byte %01100110
7541	>ba83		7c				                .byte %01111100
7542	>ba84		60				                .byte %01100000
7543	>ba85		60				                .byte %01100000
7544	>ba86		60				                .byte %01100000
7545	>ba87		00				                .byte %00000000

7547							                ; CHR$81 - Q
7548	>ba88		3c				                .byte %00111100
7549	>ba89		66				                .byte %01100110
7550	>ba8a		66				                .byte %01100110
7551	>ba8b		66				                .byte %01100110
7552	>ba8c		6a				                .byte %01101010
7553	>ba8d		6c				                .byte %01101100
7554	>ba8e		36				                .byte %00110110
7555	>ba8f		00				                .byte %00000000

7557							                ; CHR$82 - R
7558	>ba90		7c				                .byte %01111100
7559	>ba91		66				                .byte %01100110
7560	>ba92		66				                .byte %01100110
7561	>ba93		7c				                .byte %01111100
7562	>ba94		6c				                .byte %01101100
7563	>ba95		66				                .byte %01100110
7564	>ba96		66				                .byte %01100110
7565	>ba97		00				                .byte %00000000

7567							                ; CHR$83 - S
7568	>ba98		3c				                .byte %00111100
7569	>ba99		66				                .byte %01100110
7570	>ba9a		60				                .byte %01100000
7571	>ba9b		3c				                .byte %00111100
7572	>ba9c		06				                .byte %00000110
7573	>ba9d		66				                .byte %01100110
7574	>ba9e		3c				                .byte %00111100
7575	>ba9f		00				                .byte %00000000

7577							                ; CHR$84 - T
7578	>baa0		7e				                .byte %01111110
7579	>baa1		18				                .byte %00011000
7580	>baa2		18				                .byte %00011000
7581	>baa3		18				                .byte %00011000
7582	>baa4		18				                .byte %00011000
7583	>baa5		18				                .byte %00011000
7584	>baa6		18				                .byte %00011000
7585	>baa7		00				                .byte %00000000

7587							                ; CHR$85 - U
7588	>baa8		66				                .byte %01100110
7589	>baa9		66				                .byte %01100110
7590	>baaa		66				                .byte %01100110
7591	>baab		66				                .byte %01100110
7592	>baac		66				                .byte %01100110
7593	>baad		66				                .byte %01100110
7594	>baae		3c				                .byte %00111100
7595	>baaf		00				                .byte %00000000

7597							                ; CHR$86 - V
7598	>bab0		66				                .byte %01100110
7599	>bab1		66				                .byte %01100110
7600	>bab2		66				                .byte %01100110
7601	>bab3		66				                .byte %01100110
7602	>bab4		66				                .byte %01100110
7603	>bab5		3c				                .byte %00111100
7604	>bab6		18				                .byte %00011000
7605	>bab7		00				                .byte %00000000

7607							                ; CHR$87 - W
7608	>bab8		63				                .byte %01100011
7609	>bab9		63				                .byte %01100011
7610	>baba		6b				                .byte %01101011
7611	>babb		6b				                .byte %01101011
7612	>babc		7f				                .byte %01111111
7613	>babd		77				                .byte %01110111
7614	>babe		63				                .byte %01100011
7615	>babf		00				                .byte %00000000

7617							                ; CHR$88 - X
7618	>bac0		66				                .byte %01100110
7619	>bac1		66				                .byte %01100110
7620	>bac2		3c				                .byte %00111100
7621	>bac3		18				                .byte %00011000
7622	>bac4		3c				                .byte %00111100
7623	>bac5		66				                .byte %01100110
7624	>bac6		66				                .byte %01100110
7625	>bac7		00				                .byte %00000000

7627							                ; CHR$89 - Y
7628	>bac8		66				                .byte %01100110
7629	>bac9		66				                .byte %01100110
7630	>baca		66				                .byte %01100110
7631	>bacb		3c				                .byte %00111100
7632	>bacc		18				                .byte %00011000
7633	>bacd		18				                .byte %00011000
7634	>bace		18				                .byte %00011000
7635	>bacf		00				                .byte %00000000

7637							                ; CHR$90 - Z
7638	>bad0		7e				                .byte %01111110
7639	>bad1		06				                .byte %00000110
7640	>bad2		0c				                .byte %00001100
7641	>bad3		18				                .byte %00011000
7642	>bad4		30				                .byte %00110000
7643	>bad5		60				                .byte %01100000
7644	>bad6		7e				                .byte %01111110
7645	>bad7		00				                .byte %00000000

7647							                ; CHR$91 - [
7648	>bad8		7c				                .byte %01111100
7649	>bad9		60				                .byte %01100000
7650	>bada		60				                .byte %01100000
7651	>badb		60				                .byte %01100000
7652	>badc		60				                .byte %01100000
7653	>badd		60				                .byte %01100000
7654	>bade		7c				                .byte %01111100
7655	>badf		00				                .byte %00000000

7657							                ; CHR$92 - \
7658	>bae0		00				                .byte %00000000
7659	>bae1		60				                .byte %01100000
7660	>bae2		30				                .byte %00110000
7661	>bae3		18				                .byte %00011000
7662	>bae4		0c				                .byte %00001100
7663	>bae5		06				                .byte %00000110
7664	>bae6		00				                .byte %00000000
7665	>bae7		00				                .byte %00000000

7667							                ; CHR$93 - ]
7668	>bae8		3e				                .byte %00111110
7669	>bae9		06				                .byte %00000110
7670	>baea		06				                .byte %00000110
7671	>baeb		06				                .byte %00000110
7672	>baec		06				                .byte %00000110
7673	>baed		06				                .byte %00000110
7674	>baee		3e				                .byte %00111110
7675	>baef		00				                .byte %00000000

7677							                ; CHR$94 - ^
7678	>baf0		18				                .byte %00011000
7679	>baf1		3c				                .byte %00111100
7680	>baf2		66				                .byte %01100110
7681	>baf3		42				                .byte %01000010
7682	>baf4		00				                .byte %00000000
7683	>baf5		00				                .byte %00000000
7684	>baf6		00				                .byte %00000000
7685	>baf7		00				                .byte %00000000

7687							                ; CHR$95 - _
7688	>baf8		00				                .byte %00000000
7689	>baf9		00				                .byte %00000000
7690	>bafa		00				                .byte %00000000
7691	>bafb		00				                .byte %00000000
7692	>bafc		00				                .byte %00000000
7693	>bafd		00				                .byte %00000000
7694	>bafe		00				                .byte %00000000
7695	>baff		ff				                .byte %11111111

7697							                ; CHR$96
7698	>bb00		1c				                .byte %00011100
7699	>bb01		36				                .byte %00110110
7700	>bb02		30				                .byte %00110000
7701	>bb03		7c				                .byte %01111100
7702	>bb04		30				                .byte %00110000
7703	>bb05		30				                .byte %00110000
7704	>bb06		7e				                .byte %01111110
7705	>bb07		00				                .byte %00000000

7707							                ; CHR$97 - a
7708	>bb08		00				                .byte %00000000
7709	>bb09		00				                .byte %00000000
7710	>bb0a		3c				                .byte %00111100
7711	>bb0b		06				                .byte %00000110
7712	>bb0c		3e				                .byte %00111110
7713	>bb0d		66				                .byte %01100110
7714	>bb0e		3e				                .byte %00111110
7715	>bb0f		00				                .byte %00000000

7717							                ; CHR$98 - b
7718	>bb10		60				                .byte %01100000
7719	>bb11		60				                .byte %01100000
7720	>bb12		7c				                .byte %01111100
7721	>bb13		66				                .byte %01100110
7722	>bb14		66				                .byte %01100110
7723	>bb15		66				                .byte %01100110
7724	>bb16		7c				                .byte %01111100
7725	>bb17		00				                .byte %00000000

7727							                ; CHR$99 - c
7728	>bb18		00				                .byte %00000000
7729	>bb19		00				                .byte %00000000
7730	>bb1a		3c				                .byte %00111100
7731	>bb1b		66				                .byte %01100110
7732	>bb1c		60				                .byte %01100000
7733	>bb1d		66				                .byte %01100110
7734	>bb1e		3c				                .byte %00111100
7735	>bb1f		00				                .byte %00000000

7737							                ; CHR$100 - d
7738	>bb20		06				                .byte %00000110
7739	>bb21		06				                .byte %00000110
7740	>bb22		3e				                .byte %00111110
7741	>bb23		66				                .byte %01100110
7742	>bb24		66				                .byte %01100110
7743	>bb25		66				                .byte %01100110
7744	>bb26		3e				                .byte %00111110
7745	>bb27		00				                .byte %00000000

7747							                ; CHR$101 - e
7748	>bb28		00				                .byte %00000000
7749	>bb29		00				                .byte %00000000
7750	>bb2a		3c				                .byte %00111100
7751	>bb2b		66				                .byte %01100110
7752	>bb2c		7e				                .byte %01111110
7753	>bb2d		60				                .byte %01100000
7754	>bb2e		3c				                .byte %00111100
7755	>bb2f		00				                .byte %00000000

7757							                ; CHR$102 - f
7758	>bb30		1c				                .byte %00011100
7759	>bb31		30				                .byte %00110000
7760	>bb32		30				                .byte %00110000
7761	>bb33		7c				                .byte %01111100
7762	>bb34		30				                .byte %00110000
7763	>bb35		30				                .byte %00110000
7764	>bb36		30				                .byte %00110000
7765	>bb37		00				                .byte %00000000

7767							                ; CHR$103 - g
7768	>bb38		00				                .byte %00000000
7769	>bb39		00				                .byte %00000000
7770	>bb3a		3e				                .byte %00111110
7771	>bb3b		66				                .byte %01100110
7772	>bb3c		66				                .byte %01100110
7773	>bb3d		3e				                .byte %00111110
7774	>bb3e		06				                .byte %00000110
7775	>bb3f		3c				                .byte %00111100

7777							                ; CHR$104 - h
7778	>bb40		60				                .byte %01100000
7779	>bb41		60				                .byte %01100000
7780	>bb42		7c				                .byte %01111100
7781	>bb43		66				                .byte %01100110
7782	>bb44		66				                .byte %01100110
7783	>bb45		66				                .byte %01100110
7784	>bb46		66				                .byte %01100110
7785	>bb47		00				                .byte %00000000

7787							                ; CHR$105 - i
7788	>bb48		18				                .byte %00011000
7789	>bb49		00				                .byte %00000000
7790	>bb4a		38				                .byte %00111000
7791	>bb4b		18				                .byte %00011000
7792	>bb4c		18				                .byte %00011000
7793	>bb4d		18				                .byte %00011000
7794	>bb4e		3c				                .byte %00111100
7795	>bb4f		00				                .byte %00000000

7797							                ; CHR$106 - j
7798	>bb50		18				                .byte %00011000
7799	>bb51		00				                .byte %00000000
7800	>bb52		38				                .byte %00111000
7801	>bb53		18				                .byte %00011000
7802	>bb54		18				                .byte %00011000
7803	>bb55		18				                .byte %00011000
7804	>bb56		18				                .byte %00011000
7805	>bb57		70				                .byte %01110000

7807							                ; CHR$107 - k
7808	>bb58		60				                .byte %01100000
7809	>bb59		60				                .byte %01100000
7810	>bb5a		66				                .byte %01100110
7811	>bb5b		6c				                .byte %01101100
7812	>bb5c		78				                .byte %01111000
7813	>bb5d		6c				                .byte %01101100
7814	>bb5e		66				                .byte %01100110
7815	>bb5f		00				                .byte %00000000

7817							                ; CHR$108 - l
7818	>bb60		38				                .byte %00111000
7819	>bb61		18				                .byte %00011000
7820	>bb62		18				                .byte %00011000
7821	>bb63		18				                .byte %00011000
7822	>bb64		18				                .byte %00011000
7823	>bb65		18				                .byte %00011000
7824	>bb66		3c				                .byte %00111100
7825	>bb67		00				                .byte %00000000

7827							                ; CHR$109 - m
7828	>bb68		00				                .byte %00000000
7829	>bb69		00				                .byte %00000000
7830	>bb6a		36				                .byte %00110110
7831	>bb6b		7f				                .byte %01111111
7832	>bb6c		6b				                .byte %01101011
7833	>bb6d		6b				                .byte %01101011
7834	>bb6e		63				                .byte %01100011
7835	>bb6f		00				                .byte %00000000

7837							                ; CHR$110 - n
7838	>bb70		00				                .byte %00000000
7839	>bb71		00				                .byte %00000000
7840	>bb72		7c				                .byte %01111100
7841	>bb73		66				                .byte %01100110
7842	>bb74		66				                .byte %01100110
7843	>bb75		66				                .byte %01100110
7844	>bb76		66				                .byte %01100110
7845	>bb77		00				                .byte %00000000

7847							                ; CHR$111 - o
7848	>bb78		00				                .byte %00000000
7849	>bb79		00				                .byte %00000000
7850	>bb7a		3c				                .byte %00111100
7851	>bb7b		66				                .byte %01100110
7852	>bb7c		66				                .byte %01100110
7853	>bb7d		66				                .byte %01100110
7854	>bb7e		3c				                .byte %00111100
7855	>bb7f		00				                .byte %00000000

7857							                ; CHR$112 - p
7858	>bb80		00				                .byte %00000000
7859	>bb81		00				                .byte %00000000
7860	>bb82		7c				                .byte %01111100
7861	>bb83		66				                .byte %01100110
7862	>bb84		66				                .byte %01100110
7863	>bb85		7c				                .byte %01111100
7864	>bb86		60				                .byte %01100000
7865	>bb87		60				                .byte %01100000

7867							                ; CHR$113 - q
7868	>bb88		00				                .byte %00000000
7869	>bb89		00				                .byte %00000000
7870	>bb8a		3e				                .byte %00111110
7871	>bb8b		66				                .byte %01100110
7872	>bb8c		66				                .byte %01100110
7873	>bb8d		3e				                .byte %00111110
7874	>bb8e		06				                .byte %00000110
7875	>bb8f		07				                .byte %00000111

7877							                ; CHR$114 - r
7878	>bb90		00				                .byte %00000000
7879	>bb91		00				                .byte %00000000
7880	>bb92		6c				                .byte %01101100
7881	>bb93		76				                .byte %01110110
7882	>bb94		60				                .byte %01100000
7883	>bb95		60				                .byte %01100000
7884	>bb96		60				                .byte %01100000
7885	>bb97		00				                .byte %00000000

7887							                ; CHR$115 - s
7888	>bb98		00				                .byte %00000000
7889	>bb99		00				                .byte %00000000
7890	>bb9a		3e				                .byte %00111110
7891	>bb9b		60				                .byte %01100000
7892	>bb9c		3c				                .byte %00111100
7893	>bb9d		06				                .byte %00000110
7894	>bb9e		7c				                .byte %01111100
7895	>bb9f		00				                .byte %00000000

7897							                ; CHR$116 - t
7898	>bba0		30				                .byte %00110000
7899	>bba1		30				                .byte %00110000
7900	>bba2		7c				                .byte %01111100
7901	>bba3		30				                .byte %00110000
7902	>bba4		30				                .byte %00110000
7903	>bba5		30				                .byte %00110000
7904	>bba6		1c				                .byte %00011100
7905	>bba7		00				                .byte %00000000

7907							                ; CHR$117 - u
7908	>bba8		00				                .byte %00000000
7909	>bba9		00				                .byte %00000000
7910	>bbaa		66				                .byte %01100110
7911	>bbab		66				                .byte %01100110
7912	>bbac		66				                .byte %01100110
7913	>bbad		66				                .byte %01100110
7914	>bbae		3e				                .byte %00111110
7915	>bbaf		00				                .byte %00000000

7917							                ; CHR$118 - v
7918	>bbb0		00				                .byte %00000000
7919	>bbb1		00				                .byte %00000000
7920	>bbb2		66				                .byte %01100110
7921	>bbb3		66				                .byte %01100110
7922	>bbb4		66				                .byte %01100110
7923	>bbb5		3c				                .byte %00111100
7924	>bbb6		18				                .byte %00011000
7925	>bbb7		00				                .byte %00000000

7927							                ; CHR$119 - w
7928	>bbb8		00				                .byte %00000000
7929	>bbb9		00				                .byte %00000000
7930	>bbba		63				                .byte %01100011
7931	>bbbb		6b				                .byte %01101011
7932	>bbbc		6b				                .byte %01101011
7933	>bbbd		7f				                .byte %01111111
7934	>bbbe		36				                .byte %00110110
7935	>bbbf		00				                .byte %00000000

7937							                ; CHR$120 - x
7938	>bbc0		00				                .byte %00000000
7939	>bbc1		00				                .byte %00000000
7940	>bbc2		66				                .byte %01100110
7941	>bbc3		3c				                .byte %00111100
7942	>bbc4		18				                .byte %00011000
7943	>bbc5		3c				                .byte %00111100
7944	>bbc6		66				                .byte %01100110
7945	>bbc7		00				                .byte %00000000

7947							                ; CHR$121 - y
7948	>bbc8		00				                .byte %00000000
7949	>bbc9		00				                .byte %00000000
7950	>bbca		66				                .byte %01100110
7951	>bbcb		66				                .byte %01100110
7952	>bbcc		66				                .byte %01100110
7953	>bbcd		3e				                .byte %00111110
7954	>bbce		06				                .byte %00000110
7955	>bbcf		3c				                .byte %00111100

7957							                ; CHR$122 - z
7958	>bbd0		00				                .byte %00000000
7959	>bbd1		00				                .byte %00000000
7960	>bbd2		7e				                .byte %01111110
7961	>bbd3		0c				                .byte %00001100
7962	>bbd4		18				                .byte %00011000
7963	>bbd5		30				                .byte %00110000
7964	>bbd6		7e				                .byte %01111110
7965	>bbd7		00				                .byte %00000000

7967							                ; CHR$123 - {
7968	>bbd8		0c				                .byte %00001100
7969	>bbd9		18				                .byte %00011000
7970	>bbda		18				                .byte %00011000
7971	>bbdb		70				                .byte %01110000
7972	>bbdc		18				                .byte %00011000
7973	>bbdd		18				                .byte %00011000
7974	>bbde		0c				                .byte %00001100
7975	>bbdf		00				                .byte %00000000

7977							                ; CHR$124 - |
7978	>bbe0		18				                .byte %00011000
7979	>bbe1		18				                .byte %00011000
7980	>bbe2		18				                .byte %00011000
7981	>bbe3		00				                .byte %00000000
7982	>bbe4		18				                .byte %00011000
7983	>bbe5		18				                .byte %00011000
7984	>bbe6		18				                .byte %00011000
7985	>bbe7		00				                .byte %00000000

7987							                ; CHR$125 - }
7988	>bbe8		30				                .byte %00110000
7989	>bbe9		18				                .byte %00011000
7990	>bbea		18				                .byte %00011000
7991	>bbeb		0e				                .byte %00001110
7992	>bbec		18				                .byte %00011000
7993	>bbed		18				                .byte %00011000
7994	>bbee		30				                .byte %00110000
7995	>bbef		00				                .byte %00000000

7997							                ; CHR$126 - ~
7998	>bbf0		31				                .byte %00110001
7999	>bbf1		6b				                .byte %01101011
8000	>bbf2		46				                .byte %01000110
8001	>bbf3		00				                .byte %00000000
8002	>bbf4		00				                .byte %00000000
8003	>bbf5		00				                .byte %00000000
8004	>bbf6		00				                .byte %00000000
8005	>bbf7		00				                .byte %00000000

8007							                ; CHR$127
8008	.bbf8						chr127:
8009	>bbf8		ff				                .byte %11111111
8010	>bbf9		ff				                .byte %11111111
8011	>bbfa		ff				                .byte %11111111
8012	>bbfb		ff				                .byte %11111111
8013	>bbfc		ff				                .byte %11111111
8014	>bbfd		ff				                .byte %11111111
8015	>bbfe		ff				                .byte %11111111
8016	>bbff		ff				                .byte %11111111

8018							                ; CHR$128
8029	>bc00		66				                .byte %01100110
8030	>bc01		00				                .byte %00000000
8031	>bc02		3c				                .byte %00111100
8032	>bc03		66				                .byte %01100110
8033	>bc04		7e				                .byte %01111110
8034	>bc05		66				                .byte %01100110
8035	>bc06		66				                .byte %01100110
8036	>bc07		00				                .byte %00000000

8039							                ; CHR$129
8050	>bc08		3c				                .byte %00111100
8051	>bc09		66				                .byte %01100110
8052	>bc0a		3c				                .byte %00111100
8053	>bc0b		66				                .byte %01100110
8054	>bc0c		7e				                .byte %01111110
8055	>bc0d		66				                .byte %01100110
8056	>bc0e		66				                .byte %01100110
8057	>bc0f		00				                .byte %00000000

8060							                ; CHR$130
8061	>bc10		3f				                .byte %00111111
8062	>bc11		66				                .byte %01100110
8063	>bc12		66				                .byte %01100110
8064	>bc13		7f				                .byte %01111111
8065	>bc14		66				                .byte %01100110
8066	>bc15		66				                .byte %01100110
8067	>bc16		67				                .byte %01100111
8068	>bc17		00				                .byte %00000000

8070							                ; CHR$131
8081	>bc18		3c				                .byte %00111100
8082	>bc19		66				                .byte %01100110
8083	>bc1a		60				                .byte %01100000
8084	>bc1b		60				                .byte %01100000
8085	>bc1c		60				                .byte %01100000
8086	>bc1d		66				                .byte %01100110
8087	>bc1e		3c				                .byte %00111100
8088	>bc1f		60				                .byte %01100000

8091							                ; CHR$132
8092	>bc20		0c				                .byte %00001100
8093	>bc21		18				                .byte %00011000
8094	>bc22		7e				                .byte %01111110
8095	>bc23		60				                .byte %01100000
8096	>bc24		7c				                .byte %01111100
8097	>bc25		60				                .byte %01100000
8098	>bc26		7e				                .byte %01111110
8099	>bc27		00				                .byte %00000000

8101							                ; CHR$133
8112	>bc28		66				                .byte %01100110
8113	>bc29		3c				                .byte %00111100
8114	>bc2a		66				                .byte %01100110
8115	>bc2b		66				                .byte %01100110
8116	>bc2c		66				                .byte %01100110
8117	>bc2d		66				                .byte %01100110
8118	>bc2e		3c				                .byte %00111100
8119	>bc2f		00				                .byte %00000000

8122							                ; CHR$134
8123	>bc30		66				                .byte %01100110
8124	>bc31		00				                .byte %00000000
8125	>bc32		66				                .byte %01100110
8126	>bc33		66				                .byte %01100110
8127	>bc34		66				                .byte %01100110
8128	>bc35		66				                .byte %01100110
8129	>bc36		3c				                .byte %00111100
8130	>bc37		00				                .byte %00000000

8132							                ; CHR$135
8143	>bc38		7e				                .byte %01111110
8144	>bc39		c3				                .byte %11000011
8145	>bc3a		9d				                .byte %10011101
8146	>bc3b		b1				                .byte %10110001
8147	>bc3c		9d				                .byte %10011101
8148	>bc3d		c3				                .byte %11000011
8149	>bc3e		7e				                .byte %01111110
8150	>bc3f		00				                .byte %00000000

8153							                ; CHR$136
8154	>bc40		00				                .byte %00000000
8155	>bc41		18				                .byte %00011000
8156	>bc42		38				                .byte %00111000
8157	>bc43		7f				                .byte %01111111
8158	>bc44		38				                .byte %00111000
8159	>bc45		18				                .byte %00011000
8160	>bc46		00				                .byte %00000000
8161	>bc47		00				                .byte %00000000

8163							                ; CHR$137
8164	>bc48		00				                .byte %00000000
8165	>bc49		18				                .byte %00011000
8166	>bc4a		1c				                .byte %00011100
8167	>bc4b		fe				                .byte %11111110
8168	>bc4c		1c				                .byte %00011100
8169	>bc4d		18				                .byte %00011000
8170	>bc4e		00				                .byte %00000000
8171	>bc4f		00				                .byte %00000000

8173							                ; CHR$138
8174	>bc50		18				                .byte %00011000
8175	>bc51		18				                .byte %00011000
8176	>bc52		18				                .byte %00011000
8177	>bc53		18				                .byte %00011000
8178	>bc54		7e				                .byte %01111110
8179	>bc55		3c				                .byte %00111100
8180	>bc56		18				                .byte %00011000
8181	>bc57		00				                .byte %00000000

8183							                ; CHR$139
8184	>bc58		00				                .byte %00000000
8185	>bc59		18				                .byte %00011000
8186	>bc5a		3c				                .byte %00111100
8187	>bc5b		7e				                .byte %01111110
8188	>bc5c		18				                .byte %00011000
8189	>bc5d		18				                .byte %00011000
8190	>bc5e		18				                .byte %00011000
8191	>bc5f		18				                .byte %00011000

8193							                ; CHR$140
8194	>bc60		30				                .byte %00110000
8195	>bc61		18				                .byte %00011000
8196	>bc62		3c				                .byte %00111100
8197	>bc63		06				                .byte %00000110
8198	>bc64		3e				                .byte %00111110
8199	>bc65		66				                .byte %01100110
8200	>bc66		3e				                .byte %00111110
8201	>bc67		00				                .byte %00000000

8203							                ; CHR$141
8204	>bc68		30				                .byte %00110000
8205	>bc69		18				                .byte %00011000
8206	>bc6a		3c				                .byte %00111100
8207	>bc6b		66				                .byte %01100110
8208	>bc6c		7e				                .byte %01111110
8209	>bc6d		60				                .byte %01100000
8210	>bc6e		3c				                .byte %00111100
8211	>bc6f		00				                .byte %00000000

8213							                ; CHR$142
8214	>bc70		66				                .byte %01100110
8215	>bc71		00				                .byte %00000000
8216	>bc72		3c				                .byte %00111100
8217	>bc73		66				                .byte %01100110
8218	>bc74		7e				                .byte %01111110
8219	>bc75		60				                .byte %01100000
8220	>bc76		3c				                .byte %00111100
8221	>bc77		00				                .byte %00000000

8223							                ; CHR$143
8224	>bc78		3c				                .byte %00111100
8225	>bc79		66				                .byte %01100110
8226	>bc7a		3c				                .byte %00111100
8227	>bc7b		66				                .byte %01100110
8228	>bc7c		7e				                .byte %01111110
8229	>bc7d		60				                .byte %01100000
8230	>bc7e		3c				                .byte %00111100
8231	>bc7f		00				                .byte %00000000

8233							                ; CHR$144
8234	>bc80		66				                .byte %01100110
8235	>bc81		00				                .byte %00000000
8236	>bc82		3c				                .byte %00111100
8237	>bc83		06				                .byte %00000110
8238	>bc84		3e				                .byte %00111110
8239	>bc85		66				                .byte %01100110
8240	>bc86		3e				                .byte %00111110
8241	>bc87		00				                .byte %00000000

8243							                ; CHR$145
8244	>bc88		3c				                .byte %00111100
8245	>bc89		66				                .byte %01100110
8246	>bc8a		3c				                .byte %00111100
8247	>bc8b		06				                .byte %00000110
8248	>bc8c		3e				                .byte %00111110
8249	>bc8d		66				                .byte %01100110
8250	>bc8e		3e				                .byte %00111110
8251	>bc8f		00				                .byte %00000000

8253							                ; CHR$146
8254	>bc90		00				                .byte %00000000
8255	>bc91		00				                .byte %00000000
8256	>bc92		3f				                .byte %00111111
8257	>bc93		0d				                .byte %00001101
8258	>bc94		3f				                .byte %00111111
8259	>bc95		6c				                .byte %01101100
8260	>bc96		3f				                .byte %00111111
8261	>bc97		00				                .byte %00000000

8263							                ; CHR$147
8264	>bc98		00				                .byte %00000000
8265	>bc99		00				                .byte %00000000
8266	>bc9a		3c				                .byte %00111100
8267	>bc9b		66				                .byte %01100110
8268	>bc9c		60				                .byte %01100000
8269	>bc9d		66				                .byte %01100110
8270	>bc9e		3c				                .byte %00111100
8271	>bc9f		60				                .byte %01100000

8273							                ; CHR$148
8274	>bca0		0c				                .byte %00001100
8275	>bca1		18				                .byte %00011000
8276	>bca2		3c				                .byte %00111100
8277	>bca3		66				                .byte %01100110
8278	>bca4		7e				                .byte %01111110
8279	>bca5		60				                .byte %01100000
8280	>bca6		3c				                .byte %00111100
8281	>bca7		00				                .byte %00000000

8283							                ; CHR$149
8294	>bca8		66				                .byte %01100110
8295	>bca9		00				                .byte %00000000
8296	>bcaa		3c				                .byte %00111100
8297	>bcab		66				                .byte %01100110
8298	>bcac		66				                .byte %01100110
8299	>bcad		66				                .byte %01100110
8300	>bcae		3c				                .byte %00111100
8301	>bcaf		00				                .byte %00000000

8304							                ; CHR$150
8315	>bcb0		66				                .byte %01100110
8316	>bcb1		00				                .byte %00000000
8317	>bcb2		66				                .byte %01100110
8318	>bcb3		66				                .byte %01100110
8319	>bcb4		66				                .byte %01100110
8320	>bcb5		66				                .byte %01100110
8321	>bcb6		3e				                .byte %00111110
8322	>bcb7		00				                .byte %00000000

8325							                ; CHR$151
8326	>bcb8		30				                .byte %00110000
8327	>bcb9		18				                .byte %00011000
8328	>bcba		00				                .byte %00000000
8329	>bcbb		38				                .byte %00111000
8330	>bcbc		18				                .byte %00011000
8331	>bcbd		18				                .byte %00011000
8332	>bcbe		3c				                .byte %00111100
8333	>bcbf		00				                .byte %00000000

8335							                ; CHR$152
8336	>bcc0		3c				                .byte %00111100
8337	>bcc1		66				                .byte %01100110
8338	>bcc2		00				                .byte %00000000
8339	>bcc3		38				                .byte %00111000
8340	>bcc4		18				                .byte %00011000
8341	>bcc5		18				                .byte %00011000
8342	>bcc6		3c				                .byte %00111100
8343	>bcc7		00				                .byte %00000000

8345							                ; CHR$153
8346	>bcc8		30				                .byte %00110000
8347	>bcc9		18				                .byte %00011000
8348	>bcca		00				                .byte %00000000
8349	>bccb		3c				                .byte %00111100
8350	>bccc		66				                .byte %01100110
8351	>bccd		66				                .byte %01100110
8352	>bcce		3c				                .byte %00111100
8353	>bccf		00				                .byte %00000000

8355							                ; CHR$154
8356	>bcd0		3c				                .byte %00111100
8357	>bcd1		66				                .byte %01100110
8358	>bcd2		00				                .byte %00000000
8359	>bcd3		3c				                .byte %00111100
8360	>bcd4		66				                .byte %01100110
8361	>bcd5		66				                .byte %01100110
8362	>bcd6		3c				                .byte %00111100
8363	>bcd7		00				                .byte %00000000

8365							                ; CHR$155
8366	>bcd8		30				                .byte %00110000
8367	>bcd9		18				                .byte %00011000
8368	>bcda		00				                .byte %00000000
8369	>bcdb		66				                .byte %01100110
8370	>bcdc		66				                .byte %01100110
8371	>bcdd		66				                .byte %01100110
8372	>bcde		3e				                .byte %00111110
8373	>bcdf		00				                .byte %00000000

8375							                ; CHR$156
8376	>bce0		3c				                .byte %00111100
8377	>bce1		66				                .byte %01100110
8378	>bce2		00				                .byte %00000000
8379	>bce3		66				                .byte %01100110
8380	>bce4		66				                .byte %01100110
8381	>bce5		66				                .byte %01100110
8382	>bce6		3e				                .byte %00111110
8383	>bce7		00				                .byte %00000000

8385							                ; CHR$157
8386	>bce8		66				                .byte %01100110
8387	>bce9		00				                .byte %00000000
8388	>bcea		66				                .byte %01100110
8389	>bceb		66				                .byte %01100110
8390	>bcec		66				                .byte %01100110
8391	>bced		3e				                .byte %00111110
8392	>bcee		06				                .byte %00000110
8393	>bcef		3c				                .byte %00111100

8395							                ; CHR$158
8396	>bcf0		00				                .byte %00000000
8397	>bcf1		66				                .byte %01100110
8398	>bcf2		3c				                .byte %00111100
8399	>bcf3		66				                .byte %01100110
8400	>bcf4		66				                .byte %01100110
8401	>bcf5		3c				                .byte %00111100
8402	>bcf6		66				                .byte %01100110
8403	>bcf7		00				                .byte %00000000

8405							                ; CHR$159
8406	>bcf8		3c				                .byte %00111100
8407	>bcf9		60				                .byte %01100000
8408	>bcfa		3c				                .byte %00111100
8409	>bcfb		66				                .byte %01100110
8410	>bcfc		3c				                .byte %00111100
8411	>bcfd		06				                .byte %00000110
8412	>bcfe		3c				                .byte %00111100
8413	>bcff		00				                .byte %00000000

8415							                ; CHR$160
8416	>bd00		3c				                .byte %00111100
8417	>bd01		66				                .byte %01100110
8418	>bd02		3c				                .byte %00111100
8419	>bd03		00				                .byte %00000000
8420	>bd04		00				                .byte %00000000
8421	>bd05		00				                .byte %00000000
8422	>bd06		00				                .byte %00000000
8423	>bd07		00				                .byte %00000000

8425							                ; CHR$161
8426	>bd08		00				                .byte %00000000
8427	>bd09		00				                .byte %00000000
8428	>bd0a		00				                .byte %00000000
8429	>bd0b		18				                .byte %00011000
8430	>bd0c		18				                .byte %00011000
8431	>bd0d		18				                .byte %00011000
8432	>bd0e		18				                .byte %00011000
8433	>bd0f		18				                .byte %00011000

8435							                ; CHR$162
8436	>bd10		00				                .byte %00000000
8437	>bd11		00				                .byte %00000000
8438	>bd12		00				                .byte %00000000
8439	>bd13		1f				                .byte %00011111
8440	>bd14		00				                .byte %00000000
8441	>bd15		00				                .byte %00000000
8442	>bd16		00				                .byte %00000000
8443	>bd17		00				                .byte %00000000

8445							                ; CHR$163
8446	>bd18		00				                .byte %00000000
8447	>bd19		00				                .byte %00000000
8448	>bd1a		00				                .byte %00000000
8449	>bd1b		1f				                .byte %00011111
8450	>bd1c		18				                .byte %00011000
8451	>bd1d		18				                .byte %00011000
8452	>bd1e		18				                .byte %00011000
8453	>bd1f		18				                .byte %00011000

8455							                ; CHR$164
8456	>bd20		00				                .byte %00000000
8457	>bd21		00				                .byte %00000000
8458	>bd22		00				                .byte %00000000
8459	>bd23		f8				                .byte %11111000
8460	>bd24		00				                .byte %00000000
8461	>bd25		00				                .byte %00000000
8462	>bd26		00				                .byte %00000000
8463	>bd27		00				                .byte %00000000

8465							                ; CHR$165
8466	>bd28		00				                .byte %00000000
8467	>bd29		00				                .byte %00000000
8468	>bd2a		00				                .byte %00000000
8469	>bd2b		f8				                .byte %11111000
8470	>bd2c		18				                .byte %00011000
8471	>bd2d		18				                .byte %00011000
8472	>bd2e		18				                .byte %00011000
8473	>bd2f		18				                .byte %00011000

8475							                ; CHR$166
8476	>bd30		00				                .byte %00000000
8477	>bd31		00				                .byte %00000000
8478	>bd32		00				                .byte %00000000
8479	>bd33		ff				                .byte %11111111
8480	>bd34		00				                .byte %00000000
8481	>bd35		00				                .byte %00000000
8482	>bd36		00				                .byte %00000000
8483	>bd37		00				                .byte %00000000

8485							                ; CHR$167
8486	>bd38		00				                .byte %00000000
8487	>bd39		00				                .byte %00000000
8488	>bd3a		00				                .byte %00000000
8489	>bd3b		ff				                .byte %11111111
8490	>bd3c		18				                .byte %00011000
8491	>bd3d		18				                .byte %00011000
8492	>bd3e		18				                .byte %00011000
8493	>bd3f		18				                .byte %00011000

8495							                ; CHR$168
8496	>bd40		18				                .byte %00011000
8497	>bd41		18				                .byte %00011000
8498	>bd42		18				                .byte %00011000
8499	>bd43		18				                .byte %00011000
8500	>bd44		00				                .byte %00000000
8501	>bd45		00				                .byte %00000000
8502	>bd46		00				                .byte %00000000
8503	>bd47		00				                .byte %00000000

8505							                ; CHR$169
8506	>bd48		18				                .byte %00011000
8507	>bd49		18				                .byte %00011000
8508	>bd4a		18				                .byte %00011000
8509	>bd4b		18				                .byte %00011000
8510	>bd4c		18				                .byte %00011000
8511	>bd4d		18				                .byte %00011000
8512	>bd4e		18				                .byte %00011000
8513	>bd4f		18				                .byte %00011000

8515							                ; CHR$170
8516	>bd50		18				                .byte %00011000
8517	>bd51		18				                .byte %00011000
8518	>bd52		18				                .byte %00011000
8519	>bd53		1f				                .byte %00011111
8520	>bd54		00				                .byte %00000000
8521	>bd55		00				                .byte %00000000
8522	>bd56		00				                .byte %00000000
8523	>bd57		00				                .byte %00000000

8525							                ; CHR$171
8526	>bd58		18				                .byte %00011000
8527	>bd59		18				                .byte %00011000
8528	>bd5a		18				                .byte %00011000
8529	>bd5b		1f				                .byte %00011111
8530	>bd5c		18				                .byte %00011000
8531	>bd5d		18				                .byte %00011000
8532	>bd5e		18				                .byte %00011000
8533	>bd5f		18				                .byte %00011000

8535							                ; CHR$172
8536	>bd60		18				                .byte %00011000
8537	>bd61		18				                .byte %00011000
8538	>bd62		18				                .byte %00011000
8539	>bd63		f8				                .byte %11111000
8540	>bd64		00				                .byte %00000000
8541	>bd65		00				                .byte %00000000
8542	>bd66		00				                .byte %00000000
8543	>bd67		00				                .byte %00000000

8545							                ; CHR$173
8546	>bd68		18				                .byte %00011000
8547	>bd69		18				                .byte %00011000
8548	>bd6a		18				                .byte %00011000
8549	>bd6b		f8				                .byte %11111000
8550	>bd6c		18				                .byte %00011000
8551	>bd6d		18				                .byte %00011000
8552	>bd6e		18				                .byte %00011000
8553	>bd6f		18				                .byte %00011000

8555							                ; CHR$174
8556	>bd70		18				                .byte %00011000
8557	>bd71		18				                .byte %00011000
8558	>bd72		18				                .byte %00011000
8559	>bd73		ff				                .byte %11111111
8560	>bd74		00				                .byte %00000000
8561	>bd75		00				                .byte %00000000
8562	>bd76		00				                .byte %00000000
8563	>bd77		00				                .byte %00000000

8565							                ; CHR$175
8566	>bd78		18				                .byte %00011000
8567	>bd79		18				                .byte %00011000
8568	>bd7a		18				                .byte %00011000
8569	>bd7b		ff				                .byte %11111111
8570	>bd7c		18				                .byte %00011000
8571	>bd7d		18				                .byte %00011000
8572	>bd7e		18				                .byte %00011000
8573	>bd7f		18				                .byte %00011000

8575							                ; CHR$176
8576	>bd80		00				                .byte %00000000
8577	>bd81		00				                .byte %00000000
8578	>bd82		00				                .byte %00000000
8579	>bd83		07				                .byte %00000111
8580	>bd84		0c				                .byte %00001100
8581	>bd85		18				                .byte %00011000
8582	>bd86		18				                .byte %00011000
8583	>bd87		18				                .byte %00011000

8585							                ; CHR$177
8586	>bd88		00				                .byte %00000000
8587	>bd89		00				                .byte %00000000
8588	>bd8a		00				                .byte %00000000
8589	>bd8b		e0				                .byte %11100000
8590	>bd8c		30				                .byte %00110000
8591	>bd8d		18				                .byte %00011000
8592	>bd8e		18				                .byte %00011000
8593	>bd8f		18				                .byte %00011000

8595							                ; CHR$178
8596	>bd90		18				                .byte %00011000
8597	>bd91		18				                .byte %00011000
8598	>bd92		0c				                .byte %00001100
8599	>bd93		07				                .byte %00000111
8600	>bd94		00				                .byte %00000000
8601	>bd95		00				                .byte %00000000
8602	>bd96		00				                .byte %00000000
8603	>bd97		00				                .byte %00000000

8605							                ; CHR$179
8606	>bd98		18				                .byte %00011000
8607	>bd99		18				                .byte %00011000
8608	>bd9a		30				                .byte %00110000
8609	>bd9b		e0				                .byte %11100000
8610	>bd9c		00				                .byte %00000000
8611	>bd9d		00				                .byte %00000000
8612	>bd9e		00				                .byte %00000000
8613	>bd9f		00				                .byte %00000000

8615							                ; CHR$180
8616	>bda0		18				                .byte %00011000
8617	>bda1		00				                .byte %00000000
8618	>bda2		18				                .byte %00011000
8619	>bda3		18				                .byte %00011000
8620	>bda4		30				                .byte %00110000
8621	>bda5		66				                .byte %01100110
8622	>bda6		3c				                .byte %00111100
8623	>bda7		00				                .byte %00000000

8625							                ; CHR$181
8626	>bda8		18				                .byte %00011000
8627	>bda9		00				                .byte %00000000
8628	>bdaa		18				                .byte %00011000
8629	>bdab		18				                .byte %00011000
8630	>bdac		18				                .byte %00011000
8631	>bdad		18				                .byte %00011000
8632	>bdae		18				                .byte %00011000
8633	>bdaf		00				                .byte %00000000

8635							                ; CHR$182
8636	>bdb0		36				                .byte %00110110
8637	>bdb1		6c				                .byte %01101100
8638	>bdb2		00				                .byte %00000000
8639	>bdb3		66				                .byte %01100110
8640	>bdb4		76				                .byte %01110110
8641	>bdb5		6e				                .byte %01101110
8642	>bdb6		66				                .byte %01100110
8643	>bdb7		00				                .byte %00000000

8645							                ; CHR$183
8646	>bdb8		36				                .byte %00110110
8647	>bdb9		6c				                .byte %01101100
8648	>bdba		00				                .byte %00000000
8649	>bdbb		7c				                .byte %01111100
8650	>bdbc		66				                .byte %01100110
8651	>bdbd		66				                .byte %01100110
8652	>bdbe		66				                .byte %01100110
8653	>bdbf		00				                .byte %00000000

8655							                ; CHR$184
8656	>bdc0		18				                .byte %00011000
8657	>bdc1		7e				                .byte %01111110
8658	>bdc2		18				                .byte %00011000
8659	>bdc3		18				                .byte %00011000
8660	>bdc4		18				                .byte %00011000
8661	>bdc5		18				                .byte %00011000
8662	>bdc6		18				                .byte %00011000
8663	>bdc7		00				                .byte %00000000

8665							                ; CHR$185
8666	>bdc8		18				                .byte %00011000
8667	>bdc9		7e				                .byte %01111110
8668	>bdca		18				                .byte %00011000
8669	>bdcb		18				                .byte %00011000
8670	>bdcc		18				                .byte %00011000
8671	>bdcd		7e				                .byte %01111110
8672	>bdce		18				                .byte %00011000
8673	>bdcf		00				                .byte %00000000

8675							                ; CHR$186
8686	>bdd0		18				                .byte %00011000
8687	>bdd1		18				                .byte %00011000
8688	>bdd2		18				                .byte %00011000
8689	>bdd3		00				                .byte %00000000
8690	>bdd4		00				                .byte %00000000
8691	>bdd5		00				                .byte %00000000
8692	>bdd6		00				                .byte %00000000
8693	>bdd7		00				                .byte %00000000

8696							                ; CHR$187
8707	>bdd8		30				                .byte %00110000
8708	>bdd9		18				                .byte %00011000
8709	>bdda		0c				                .byte %00001100
8710	>bddb		00				                .byte %00000000
8711	>bddc		00				                .byte %00000000
8712	>bddd		00				                .byte %00000000
8713	>bdde		00				                .byte %00000000
8714	>bddf		00				                .byte %00000000

8717							                ; CHR$188
8728	>bde0		3f				                .byte %00111111
8729	>bde1		7b				                .byte %01111011
8730	>bde2		7b				                .byte %01111011
8731	>bde3		3b				                .byte %00111011
8732	>bde4		1b				                .byte %00011011
8733	>bde5		1b				                .byte %00011011
8734	>bde6		1f				                .byte %00011111
8735	>bde7		00				                .byte %00000000

8738							                ; CHR$189
8739	>bde8		00				                .byte %00000000
8740	>bde9		00				                .byte %00000000
8741	>bdea		00				                .byte %00000000
8742	>bdeb		18				                .byte %00011000
8743	>bdec		18				                .byte %00011000
8744	>bded		00				                .byte %00000000
8745	>bdee		00				                .byte %00000000
8746	>bdef		00				                .byte %00000000

8748							                ; CHR$190
8749	>bdf0		03				                .byte %00000011
8750	>bdf1		03				                .byte %00000011
8751	>bdf2		06				                .byte %00000110
8752	>bdf3		06				                .byte %00000110
8753	>bdf4		76				                .byte %01110110
8754	>bdf5		1c				                .byte %00011100
8755	>bdf6		0c				                .byte %00001100
8756	>bdf7		00				                .byte %00000000

8758							                ; CHR$191
8759	>bdf8		aa				                .byte %10101010
8760	>bdf9		55				                .byte %01010101
8761	>bdfa		aa				                .byte %10101010
8762	>bdfb		55				                .byte %01010101
8763	>bdfc		aa				                .byte %10101010
8764	>bdfd		55				                .byte %01010101
8765	>bdfe		aa				                .byte %10101010
8766	>bdff		55				                .byte %01010101

8768							                ; CHR$192
8769	>be00		3e				                .byte %00111110
8770	>be01		63				                .byte %01100011
8771	>be02		67				                .byte %01100111
8772	>be03		6b				                .byte %01101011
8773	>be04		73				                .byte %01110011
8774	>be05		63				                .byte %01100011
8775	>be06		3e				                .byte %00111110
8776	>be07		00				                .byte %00000000

8778							                ; CHR$193
8779	>be08		1c				                .byte %00011100
8780	>be09		36				                .byte %00110110
8781	>be0a		63				                .byte %01100011
8782	>be0b		63				                .byte %01100011
8783	>be0c		7f				                .byte %01111111
8784	>be0d		63				                .byte %01100011
8785	>be0e		63				                .byte %01100011
8786	>be0f		00				                .byte %00000000

8788							                ; CHR$194
8789	>be10		7e				                .byte %01111110
8790	>be11		33				                .byte %00110011
8791	>be12		33				                .byte %00110011
8792	>be13		3e				                .byte %00111110
8793	>be14		33				                .byte %00110011
8794	>be15		33				                .byte %00110011
8795	>be16		7e				                .byte %01111110
8796	>be17		00				                .byte %00000000

8798							                ; CHR$195
8799	>be18		7f				                .byte %01111111
8800	>be19		63				                .byte %01100011
8801	>be1a		60				                .byte %01100000
8802	>be1b		60				                .byte %01100000
8803	>be1c		60				                .byte %01100000
8804	>be1d		60				                .byte %01100000
8805	>be1e		60				                .byte %01100000
8806	>be1f		00				                .byte %00000000

8808							                ; CHR$196
8809	>be20		1c				                .byte %00011100
8810	>be21		1c				                .byte %00011100
8811	>be22		36				                .byte %00110110
8812	>be23		36				                .byte %00110110
8813	>be24		63				                .byte %01100011
8814	>be25		63				                .byte %01100011
8815	>be26		7f				                .byte %01111111
8816	>be27		00				                .byte %00000000

8818							                ; CHR$197
8819	>be28		7f				                .byte %01111111
8820	>be29		33				                .byte %00110011
8821	>be2a		30				                .byte %00110000
8822	>be2b		3e				                .byte %00111110
8823	>be2c		30				                .byte %00110000
8824	>be2d		33				                .byte %00110011
8825	>be2e		7f				                .byte %01111111
8826	>be2f		00				                .byte %00000000

8828							                ; CHR$198
8829	>be30		7e				                .byte %01111110
8830	>be31		66				                .byte %01100110
8831	>be32		0c				                .byte %00001100
8832	>be33		18				                .byte %00011000
8833	>be34		30				                .byte %00110000
8834	>be35		66				                .byte %01100110
8835	>be36		7e				                .byte %01111110
8836	>be37		00				                .byte %00000000

8838							                ; CHR$199
8839	>be38		77				                .byte %01110111
8840	>be39		33				                .byte %00110011
8841	>be3a		33				                .byte %00110011
8842	>be3b		3f				                .byte %00111111
8843	>be3c		33				                .byte %00110011
8844	>be3d		33				                .byte %00110011
8845	>be3e		77				                .byte %01110111
8846	>be3f		00				                .byte %00000000

8848							                ; CHR$200
8849	>be40		3e				                .byte %00111110
8850	>be41		63				                .byte %01100011
8851	>be42		63				                .byte %01100011
8852	>be43		7f				                .byte %01111111
8853	>be44		63				                .byte %01100011
8854	>be45		63				                .byte %01100011
8855	>be46		3e				                .byte %00111110
8856	>be47		00				                .byte %00000000

8858							                ; CHR$201
8859	>be48		3c				                .byte %00111100
8860	>be49		18				                .byte %00011000
8861	>be4a		18				                .byte %00011000
8862	>be4b		18				                .byte %00011000
8863	>be4c		18				                .byte %00011000
8864	>be4d		18				                .byte %00011000
8865	>be4e		3c				                .byte %00111100
8866	>be4f		00				                .byte %00000000

8868							                ; CHR$202
8869	>be50		63				                .byte %01100011
8870	>be51		66				                .byte %01100110
8871	>be52		6c				                .byte %01101100
8872	>be53		78				                .byte %01111000
8873	>be54		6c				                .byte %01101100
8874	>be55		66				                .byte %01100110
8875	>be56		63				                .byte %01100011
8876	>be57		00				                .byte %00000000

8878							                ; CHR$203
8879	>be58		1c				                .byte %00011100
8880	>be59		1c				                .byte %00011100
8881	>be5a		36				                .byte %00110110
8882	>be5b		36				                .byte %00110110
8883	>be5c		63				                .byte %01100011
8884	>be5d		63				                .byte %01100011
8885	>be5e		63				                .byte %01100011
8886	>be5f		00				                .byte %00000000

8888							                ; CHR$204
8889	>be60		63				                .byte %01100011
8890	>be61		77				                .byte %01110111
8891	>be62		7f				                .byte %01111111
8892	>be63		6b				                .byte %01101011
8893	>be64		63				                .byte %01100011
8894	>be65		63				                .byte %01100011
8895	>be66		63				                .byte %01100011
8896	>be67		00				                .byte %00000000

8898							                ; CHR$205
8899	>be68		63				                .byte %01100011
8900	>be69		73				                .byte %01110011
8901	>be6a		7b				                .byte %01111011
8902	>be6b		6f				                .byte %01101111
8903	>be6c		67				                .byte %01100111
8904	>be6d		63				                .byte %01100011
8905	>be6e		63				                .byte %01100011
8906	>be6f		00				                .byte %00000000

8908							                ; CHR$206
8909	>be70		7e				                .byte %01111110
8910	>be71		00				                .byte %00000000
8911	>be72		00				                .byte %00000000
8912	>be73		3c				                .byte %00111100
8913	>be74		00				                .byte %00000000
8914	>be75		00				                .byte %00000000
8915	>be76		7e				                .byte %01111110
8916	>be77		00				                .byte %00000000

8918							                ; CHR$207
8919	>be78		3e				                .byte %00111110
8920	>be79		63				                .byte %01100011
8921	>be7a		63				                .byte %01100011
8922	>be7b		63				                .byte %01100011
8923	>be7c		63				                .byte %01100011
8924	>be7d		63				                .byte %01100011
8925	>be7e		3e				                .byte %00111110
8926	>be7f		00				                .byte %00000000

8928							                ; CHR$208
8929	>be80		7f				                .byte %01111111
8930	>be81		36				                .byte %00110110
8931	>be82		36				                .byte %00110110
8932	>be83		36				                .byte %00110110
8933	>be84		36				                .byte %00110110
8934	>be85		36				                .byte %00110110
8935	>be86		36				                .byte %00110110
8936	>be87		00				                .byte %00000000

8938							                ; CHR$209
8939	>be88		7e				                .byte %01111110
8940	>be89		33				                .byte %00110011
8941	>be8a		33				                .byte %00110011
8942	>be8b		3e				                .byte %00111110
8943	>be8c		30				                .byte %00110000
8944	>be8d		30				                .byte %00110000
8945	>be8e		78				                .byte %01111000
8946	>be8f		00				                .byte %00000000

8948							                ; CHR$210
8949	>be90		7f				                .byte %01111111
8950	>be91		63				                .byte %01100011
8951	>be92		30				                .byte %00110000
8952	>be93		18				                .byte %00011000
8953	>be94		30				                .byte %00110000
8954	>be95		63				                .byte %01100011
8955	>be96		7f				                .byte %01111111
8956	>be97		00				                .byte %00000000

8958							                ; CHR$211
8959	>be98		7e				                .byte %01111110
8960	>be99		5a				                .byte %01011010
8961	>be9a		18				                .byte %00011000
8962	>be9b		18				                .byte %00011000
8963	>be9c		18				                .byte %00011000
8964	>be9d		18				                .byte %00011000
8965	>be9e		18				                .byte %00011000
8966	>be9f		00				                .byte %00000000

8968							                ; CHR$212
8969	>bea0		66				                .byte %01100110
8970	>bea1		66				                .byte %01100110
8971	>bea2		66				                .byte %01100110
8972	>bea3		3c				                .byte %00111100
8973	>bea4		18				                .byte %00011000
8974	>bea5		18				                .byte %00011000
8975	>bea6		3c				                .byte %00111100
8976	>bea7		00				                .byte %00000000

8978							                ; CHR$213
8979	>bea8		3e				                .byte %00111110
8980	>bea9		08				                .byte %00001000
8981	>beaa		3e				                .byte %00111110
8982	>beab		6b				                .byte %01101011
8983	>beac		3e				                .byte %00111110
8984	>bead		08				                .byte %00001000
8985	>beae		3e				                .byte %00111110
8986	>beaf		00				                .byte %00000000

8988							                ; CHR$214
8989	>beb0		63				                .byte %01100011
8990	>beb1		63				                .byte %01100011
8991	>beb2		36				                .byte %00110110
8992	>beb3		1c				                .byte %00011100
8993	>beb4		36				                .byte %00110110
8994	>beb5		63				                .byte %01100011
8995	>beb6		63				                .byte %01100011
8996	>beb7		00				                .byte %00000000

8998							                ; CHR$215
8999	>beb8		3e				                .byte %00111110
9000	>beb9		08				                .byte %00001000
9001	>beba		6b				                .byte %01101011
9002	>bebb		6b				                .byte %01101011
9003	>bebc		3e				                .byte %00111110
9004	>bebd		08				                .byte %00001000
9005	>bebe		3e				                .byte %00111110
9006	>bebf		00				                .byte %00000000

9008							                ; CHR$216
9009	>bec0		3e				                .byte %00111110
9010	>bec1		63				                .byte %01100011
9011	>bec2		63				                .byte %01100011
9012	>bec3		63				                .byte %01100011
9013	>bec4		36				                .byte %00110110
9014	>bec5		36				                .byte %00110110
9015	>bec6		63				                .byte %01100011
9016	>bec7		00				                .byte %00000000

9018							                ; CHR$217
9019	>bec8		7f				                .byte %01111111
9020	>bec9		63				                .byte %01100011
9021	>beca		63				                .byte %01100011
9022	>becb		36				                .byte %00110110
9023	>becc		36				                .byte %00110110
9024	>becd		1c				                .byte %00011100
9025	>bece		1c				                .byte %00011100
9026	>becf		00				                .byte %00000000

9028							                ; CHR$218
9029	>bed0		18				                .byte %00011000
9030	>bed1		18				                .byte %00011000
9031	>bed2		7e				                .byte %01111110
9032	>bed3		18				                .byte %00011000
9033	>bed4		18				                .byte %00011000
9034	>bed5		00				                .byte %00000000
9035	>bed6		7e				                .byte %01111110
9036	>bed7		00				                .byte %00000000

9038							                ; CHR$219
9039	>bed8		00				                .byte %00000000
9040	>bed9		7e				                .byte %01111110
9041	>beda		00				                .byte %00000000
9042	>bedb		18				                .byte %00011000
9043	>bedc		18				                .byte %00011000
9044	>bedd		7e				                .byte %01111110
9045	>bede		18				                .byte %00011000
9046	>bedf		18				                .byte %00011000

9048							                ; CHR$220
9049	>bee0		18				                .byte %00011000
9050	>bee1		18				                .byte %00011000
9051	>bee2		18				                .byte %00011000
9052	>bee3		18				                .byte %00011000
9053	>bee4		18				                .byte %00011000
9054	>bee5		18				                .byte %00011000
9055	>bee6		18				                .byte %00011000
9056	>bee7		00				                .byte %00000000

9058							                ; CHR$221
9059	>bee8		36				                .byte %00110110
9060	>bee9		36				                .byte %00110110
9061	>beea		36				                .byte %00110110
9062	>beeb		36				                .byte %00110110
9063	>beec		36				                .byte %00110110
9064	>beed		36				                .byte %00110110
9065	>beee		36				                .byte %00110110
9066	>beef		00				                .byte %00000000

9068							                ; CHR$222
9069	>bef0		00				                .byte %00000000
9070	>bef1		66				                .byte %01100110
9071	>bef2		66				                .byte %01100110
9072	>bef3		66				                .byte %01100110
9073	>bef4		66				                .byte %01100110
9074	>bef5		66				                .byte %01100110
9075	>bef6		3c				                .byte %00111100
9076	>bef7		00				                .byte %00000000

9078							                ; CHR$223
9079	>bef8		00				                .byte %00000000
9080	>bef9		3c				                .byte %00111100
9081	>befa		66				                .byte %01100110
9082	>befb		66				                .byte %01100110
9083	>befc		66				                .byte %01100110
9084	>befd		66				                .byte %01100110
9085	>befe		66				                .byte %01100110
9086	>beff		00				                .byte %00000000

9088							                ; CHR$224
9099	>bf00		00				                .byte %00000000
9100	>bf01		03				                .byte %00000011
9101	>bf02		3e				                .byte %00111110
9102	>bf03		67				                .byte %01100111
9103	>bf04		6b				                .byte %01101011
9104	>bf05		73				                .byte %01110011
9105	>bf06		3e				                .byte %00111110
9106	>bf07		60				                .byte %01100000

9109							                ; CHR$225
9110	>bf08		00				                .byte %00000000
9111	>bf09		00				                .byte %00000000
9112	>bf0a		3b				                .byte %00111011
9113	>bf0b		6e				                .byte %01101110
9114	>bf0c		66				                .byte %01100110
9115	>bf0d		6e				                .byte %01101110
9116	>bf0e		3b				                .byte %00111011
9117	>bf0f		00				                .byte %00000000

9119							                ; CHR$226
9120	>bf10		1e				                .byte %00011110
9121	>bf11		33				                .byte %00110011
9122	>bf12		33				                .byte %00110011
9123	>bf13		3e				                .byte %00111110
9124	>bf14		33				                .byte %00110011
9125	>bf15		33				                .byte %00110011
9126	>bf16		3e				                .byte %00111110
9127	>bf17		60				                .byte %01100000

9129							                ; CHR$227
9130	>bf18		00				                .byte %00000000
9131	>bf19		00				                .byte %00000000
9132	>bf1a		66				                .byte %01100110
9133	>bf1b		36				                .byte %00110110
9134	>bf1c		1c				                .byte %00011100
9135	>bf1d		18				                .byte %00011000
9136	>bf1e		30				                .byte %00110000
9137	>bf1f		30				                .byte %00110000

9139							                ; CHR$228
9140	>bf20		3c				                .byte %00111100
9141	>bf21		60				                .byte %01100000
9142	>bf22		30				                .byte %00110000
9143	>bf23		3c				                .byte %00111100
9144	>bf24		66				                .byte %01100110
9145	>bf25		66				                .byte %01100110
9146	>bf26		3c				                .byte %00111100
9147	>bf27		00				                .byte %00000000

9149							                ; CHR$229
9150	>bf28		00				                .byte %00000000
9151	>bf29		00				                .byte %00000000
9152	>bf2a		1e				                .byte %00011110
9153	>bf2b		30				                .byte %00110000
9154	>bf2c		1c				                .byte %00011100
9155	>bf2d		30				                .byte %00110000
9156	>bf2e		1e				                .byte %00011110
9157	>bf2f		00				                .byte %00000000

9159							                ; CHR$230
9160	>bf30		3e				                .byte %00111110
9161	>bf31		0c				                .byte %00001100
9162	>bf32		18				                .byte %00011000
9163	>bf33		30				                .byte %00110000
9164	>bf34		60				                .byte %01100000
9165	>bf35		60				                .byte %01100000
9166	>bf36		3e				                .byte %00111110
9167	>bf37		06				                .byte %00000110

9169							                ; CHR$231
9170	>bf38		00				                .byte %00000000
9171	>bf39		00				                .byte %00000000
9172	>bf3a		7c				                .byte %01111100
9173	>bf3b		66				                .byte %01100110
9174	>bf3c		66				                .byte %01100110
9175	>bf3d		66				                .byte %01100110
9176	>bf3e		06				                .byte %00000110
9177	>bf3f		06				                .byte %00000110

9179							                ; CHR$232
9180	>bf40		3c				                .byte %00111100
9181	>bf41		66				                .byte %01100110
9182	>bf42		66				                .byte %01100110
9183	>bf43		7e				                .byte %01111110
9184	>bf44		66				                .byte %01100110
9185	>bf45		66				                .byte %01100110
9186	>bf46		3c				                .byte %00111100
9187	>bf47		00				                .byte %00000000

9189							                ; CHR$233
9190	>bf48		00				                .byte %00000000
9191	>bf49		00				                .byte %00000000
9192	>bf4a		18				                .byte %00011000
9193	>bf4b		18				                .byte %00011000
9194	>bf4c		18				                .byte %00011000
9195	>bf4d		18				                .byte %00011000
9196	>bf4e		0c				                .byte %00001100
9197	>bf4f		00				                .byte %00000000

9199							                ; CHR$234
9200	>bf50		00				                .byte %00000000
9201	>bf51		00				                .byte %00000000
9202	>bf52		66				                .byte %01100110
9203	>bf53		6c				                .byte %01101100
9204	>bf54		78				                .byte %01111000
9205	>bf55		6c				                .byte %01101100
9206	>bf56		66				                .byte %01100110
9207	>bf57		00				                .byte %00000000

9209							                ; CHR$235
9210	>bf58		60				                .byte %01100000
9211	>bf59		30				                .byte %00110000
9212	>bf5a		18				                .byte %00011000
9213	>bf5b		1c				                .byte %00011100
9214	>bf5c		36				                .byte %00110110
9215	>bf5d		63				                .byte %01100011
9216	>bf5e		63				                .byte %01100011
9217	>bf5f		00				                .byte %00000000

9219							                ; CHR$236
9220	>bf60		00				                .byte %00000000
9221	>bf61		00				                .byte %00000000
9222	>bf62		33				                .byte %00110011
9223	>bf63		33				                .byte %00110011
9224	>bf64		33				                .byte %00110011
9225	>bf65		33				                .byte %00110011
9226	>bf66		3e				                .byte %00111110
9227	>bf67		60				                .byte %01100000

9229							                ; CHR$237
9230	>bf68		00				                .byte %00000000
9231	>bf69		00				                .byte %00000000
9232	>bf6a		63				                .byte %01100011
9233	>bf6b		33				                .byte %00110011
9234	>bf6c		1b				                .byte %00011011
9235	>bf6d		1e				                .byte %00011110
9236	>bf6e		1c				                .byte %00011100
9237	>bf6f		00				                .byte %00000000

9239							                ; CHR$238
9250	>bf70		3c				                .byte %00111100
9251	>bf71		60				                .byte %01100000
9252	>bf72		60				                .byte %01100000
9253	>bf73		3c				                .byte %00111100
9254	>bf74		60				                .byte %01100000
9255	>bf75		60				                .byte %01100000
9256	>bf76		3e				                .byte %00111110
9257	>bf77		06				                .byte %00000110

9260							                ; CHR$239
9261	>bf78		00				                .byte %00000000
9262	>bf79		00				                .byte %00000000
9263	>bf7a		3e				                .byte %00111110
9264	>bf7b		63				                .byte %01100011
9265	>bf7c		63				                .byte %01100011
9266	>bf7d		63				                .byte %01100011
9267	>bf7e		3e				                .byte %00111110
9268	>bf7f		00				                .byte %00000000

9270							                ; CHR$240
9271	>bf80		00				                .byte %00000000
9272	>bf81		00				                .byte %00000000
9273	>bf82		7f				                .byte %01111111
9274	>bf83		36				                .byte %00110110
9275	>bf84		36				                .byte %00110110
9276	>bf85		36				                .byte %00110110
9277	>bf86		36				                .byte %00110110
9278	>bf87		00				                .byte %00000000

9280							                ; CHR$241
9281	>bf88		00				                .byte %00000000
9282	>bf89		00				                .byte %00000000
9283	>bf8a		3c				                .byte %00111100
9284	>bf8b		66				                .byte %01100110
9285	>bf8c		66				                .byte %01100110
9286	>bf8d		7c				                .byte %01111100
9287	>bf8e		60				                .byte %01100000
9288	>bf8f		60				                .byte %01100000

9290							                ; CHR$242
9291	>bf90		00				                .byte %00000000
9292	>bf91		00				                .byte %00000000
9293	>bf92		3f				                .byte %00111111
9294	>bf93		66				                .byte %01100110
9295	>bf94		66				                .byte %01100110
9296	>bf95		66				                .byte %01100110
9297	>bf96		3c				                .byte %00111100
9298	>bf97		00				                .byte %00000000

9300							                ; CHR$243
9301	>bf98		00				                .byte %00000000
9302	>bf99		00				                .byte %00000000
9303	>bf9a		7e				                .byte %01111110
9304	>bf9b		18				                .byte %00011000
9305	>bf9c		18				                .byte %00011000
9306	>bf9d		18				                .byte %00011000
9307	>bf9e		0c				                .byte %00001100
9308	>bf9f		00				                .byte %00000000

9310							                ; CHR$244
9311	>bfa0		00				                .byte %00000000
9312	>bfa1		00				                .byte %00000000
9313	>bfa2		73				                .byte %01110011
9314	>bfa3		33				                .byte %00110011
9315	>bfa4		33				                .byte %00110011
9316	>bfa5		33				                .byte %00110011
9317	>bfa6		1e				                .byte %00011110
9318	>bfa7		00				                .byte %00000000

9320							                ; CHR$245
9321	>bfa8		00				                .byte %00000000
9322	>bfa9		00				                .byte %00000000
9323	>bfaa		3e				                .byte %00111110
9324	>bfab		6b				                .byte %01101011
9325	>bfac		6b				                .byte %01101011
9326	>bfad		3e				                .byte %00111110
9327	>bfae		18				                .byte %00011000
9328	>bfaf		18				                .byte %00011000

9330							                ; CHR$246
9331	>bfb0		00				                .byte %00000000
9332	>bfb1		00				                .byte %00000000
9333	>bfb2		66				                .byte %01100110
9334	>bfb3		36				                .byte %00110110
9335	>bfb4		1c				                .byte %00011100
9336	>bfb5		1c				                .byte %00011100
9337	>bfb6		36				                .byte %00110110
9338	>bfb7		33				                .byte %00110011

9340							                ; CHR$247
9341	>bfb8		00				                .byte %00000000
9342	>bfb9		00				                .byte %00000000
9343	>bfba		63				                .byte %01100011
9344	>bfbb		6b				                .byte %01101011
9345	>bfbc		6b				                .byte %01101011
9346	>bfbd		3e				                .byte %00111110
9347	>bfbe		18				                .byte %00011000
9348	>bfbf		18				                .byte %00011000

9350							                ; CHR$248
9361	>bfc0		00				                .byte %00000000
9362	>bfc1		00				                .byte %00000000
9363	>bfc2		36				                .byte %00110110
9364	>bfc3		63				                .byte %01100011
9365	>bfc4		6b				                .byte %01101011
9366	>bfc5		7f				                .byte %01111111
9367	>bfc6		36				                .byte %00110110
9368	>bfc7		00				                .byte %00000000

9371							                ; CHR$249
9372	>bfc8		38				                .byte %00111000
9373	>bfc9		0c				                .byte %00001100
9374	>bfca		06				                .byte %00000110
9375	>bfcb		3e				                .byte %00111110
9376	>bfcc		66				                .byte %01100110
9377	>bfcd		66				                .byte %01100110
9378	>bfce		3c				                .byte %00111100
9379	>bfcf		00				                .byte %00000000

9381							                ; CHR$250
9382	>bfd0		00				                .byte %00000000
9383	>bfd1		31				                .byte %00110001
9384	>bfd2		6b				                .byte %01101011
9385	>bfd3		46				                .byte %01000110
9386	>bfd4		00				                .byte %00000000
9387	>bfd5		7f				                .byte %01111111
9388	>bfd6		00				                .byte %00000000
9389	>bfd7		00				                .byte %00000000

9391							                ; CHR$251
9392	>bfd8		00				                .byte %00000000
9393	>bfd9		7e				                .byte %01111110
9394	>bfda		00				                .byte %00000000
9395	>bfdb		7e				                .byte %01111110
9396	>bfdc		00				                .byte %00000000
9397	>bfdd		7e				                .byte %01111110
9398	>bfde		00				                .byte %00000000
9399	>bfdf		00				                .byte %00000000

9401							                ; CHR$252
9402	>bfe0		07				                .byte %00000111
9403	>bfe1		1c				                .byte %00011100
9404	>bfe2		70				                .byte %01110000
9405	>bfe3		1c				                .byte %00011100
9406	>bfe4		07				                .byte %00000111
9407	>bfe5		00				                .byte %00000000
9408	>bfe6		7f				                .byte %01111111
9409	>bfe7		00				                .byte %00000000

9411							                ; CHR$253
9412	>bfe8		06				                .byte %00000110
9413	>bfe9		0c				                .byte %00001100
9414	>bfea		7e				                .byte %01111110
9415	>bfeb		18				                .byte %00011000
9416	>bfec		7e				                .byte %01111110
9417	>bfed		30				                .byte %00110000
9418	>bfee		60				                .byte %01100000
9419	>bfef		00				                .byte %00000000

9421							                ; CHR$254
9422	>bff0		70				                .byte %01110000
9423	>bff1		1c				                .byte %00011100
9424	>bff2		07				                .byte %00000111
9425	>bff3		1c				                .byte %00011100
9426	>bff4		70				                .byte %01110000
9427	>bff5		00				                .byte %00000000
9428	>bff6		7f				                .byte %01111111
9429	>bff7		00				                .byte %00000000

9431							                ; CHR$255
9432	>bff8		ff				                .byte %11111111
9433	>bff9		ff				                .byte %11111111
9434	>bffa		ff				                .byte %11111111
9435	>bffb		ff				                .byte %11111111
9436	>bffc		ff				                .byte %11111111
9437	>bffd		ff				                .byte %11111111
9438	>bffe		ff				                .byte %11111111
9439	>bfff		ff				                .byte %11111111

:1	;******  Return to file: mos320.s65

73							                .endsection

75							                .section mos
76							                .include "src/mos.s65"

:11	;******  Processing file: src/mos.s65

1							; -*- comment-column:45; -*-

3							testVDU5State: .macro
10							                .endmacro

12							; VDU driver entry block
13							; ======================
14	.c000						LC000:                                       ; Read from VDU memory
15	.c000		b1 d6		lda ($d6),y	                lda (ZMEMG),y
16	.c002		60		rts		                rts
17	.c003						LC003:                                       ; Write to VDU memory
18	.c003		91 d6		sta ($d6),y	                sta (ZMEMG),y
19	.c005		60		rts		                rts

21							; MasRef E.4-6
22							;
23							; JSR PLBYTE plots the mask held in ZMASK into the byte pointed to by
24							; (ZMEMG),y, using ZGORA and ZGEOR as colour masks. See GADDR below
25							; for an example of its use.
26							;
27							; PLBYTE uses ZTEMP as workspace and preserves X, Y, V and C.
28	.c006						PLBYTE:
29	.c006		4c 51 db	jmp $db51	                jmp plbyteEntryPoint

31							; MasRef E.4-6
32							;
33							; JSR HPLOT plots a fast horizontal line in the current graphics
34							; colour or ECF and the current graphics mode (all as set by VDU 18)
35							; between two specified points. It is the low level primitive used by
36							; all the MOS area fill commands.
37							;
38							; On entry, two 4 byte areas at &300+X and &300+Y contain the
39							; coordinates of the two endpoints, in the standard
40							; lowX,highX,lowY,highY order. Should the Y coordinates differ, the Y
41							; coordinate of the line plotted is taken from the leftmost of the two
42							; points specified.
43							;
44							; Only portions of the line inside the graphics window are plotted.
45							; Subject to this, both endpoints of the line are plotted.
46							;
47							; HPLOT uses ZGORA, ZGEOR, ZMASK, ZMEMG, ZTEMP (but not ZTEMP+1),
48							; ZTEMPB, ZTEMPB+1, ZTEMPC and ZTEMPC+1 as workspace. No registers or
49							; flags are preserved.
50	.c009						HPLOT:
51	.c009		4c e8 da	jmp $dae8	                jmp LDAE8

53							; MasRef E.4-6
54							;
55							; JSR EIGABS converts the 4 byte pair of external coordinates at
56							; &300+X where X>=2 (in standard lowX,highX,lowY,highY order) into the
57							; corresponding pair of pixel coordinates by offsetting by the
58							; graphics origin, then dividing by an appropriate power of 2.
59							;
60							; EIGABS uses ZTEMP as workspace, and corrupts all registers and
61							; flags.
62	.c00c						EIGABS:
63	.c00c		4c de d1	jmp $d1de	                jmp eigabsEntryPoint

65							; MasRef E.4-7
66							;
67							; JSR WIND windows the 4 byte pair of pixel coordinates (in standard
68							; lowX,highX,lowY,highY order) at &300+X, and returns a result in A
69							; according to its position with respect to the window:

71							; 9 | 8 | 10
72							; --+---+---
73							; 1 | 0 | 2
74							; --+---+---
75							; 5 | 4 | 6

77							; WIND uses ZTEMP as workspace, preserves X and sets N and Z according
78							; to A.
79	.c00f						WIND:
80	.c00f		4c a8 d1	jmp $d1a8	                jmp windEntryPoint

82							; MasRef E.4-7
83							;
84							; JSR GADDR addresses the pixel whose 4 byte pair of pixel coordinates
85							; (in standard lowX,highX,lowY,highY order) is at &300+X. GADDR should
86							; not be called without first ensuring (typically by means of WIND)
87							; that the point concerned does lie within the screen.
88							;
89							; GADDR initialises the following variables:
90							;
91							; . ZMEMG to the start of the page of memory containing the pixel.
92							;
93							; . Y and VDU variable &1A (i.e. location &31A) to contain the offset
94							; of the byte containing the pixel within this page - i.e. (ZMEMG),y
95							; points to the byte containing the pixel.
96							;
97							; . ZMASK to a mask indicating which bits of this byte constitute the
98							; pixel.
99							;
100							; . ZGORA and ZGEOR to the correct colour masks for the current
101							; graphics plot mode (found in VDU variable &5A) and colour/ECF
102							;
103							; . X to Y MOD 7, i.e. the scan line within a character row of the
104							; pixel.
105							;
106							; Additionally, GADDR uses ZTEMP as workspace and returns A=0, Z=1.
107							;
108							; An example of the use of PLBYTE, WIND and GADDR is the following
109							; code, which effectively re-implements the VDU 25 64-71 (plot a
110							; point) calls. It assumes that the routine addresses have been
111							; previously defined and that the graphics plot mode, etc. were set up
112							; by the VDU 25 code before the unknown PLOT codes vector was entered:

114							; .POINT
115							;  LDX #&20   ;Addresses new point within VDU queue, as
116							;             ;left on entry to the unknown PLOT codes
117							;             ;vector.
118							;  JSR WIND   ;Is the point inside the window?
119							;  BNE END    ;Return if not.
120							;  JSR GADDR  ;Address the point now we know it's on
121							;             ;screen.
122							;  JSR PLBYTE ;And plot the point.
123							; .END
124							;  RTS
125	.c012						GADDR:
126	.c012		4c c8 de	jmp $dec8	                jmp gaddrEntryPoint

128							; MasRef E.4-8
129							;
130							; JSR IEG takes the internal pixel coordinates of the graphics cursor
131							; (in VDU variables &24-&27), converts it back to external coordinates
132							; and stores the result in VDU variables &10-&13.
133							;
134							; It should be called whenever the graphics code generates a new
135							; graphics cursor position (e.g. in the VDU drivers, it is called
136							; after a character is printed in VDU 5 mode). Its purpose is to make
137							; the two versions of the graphics cursor agree again, and thus
138							; prevent errors occurring with relative plots.
139							;
140							; IEG uses no page zero locations and corrupts all registers and
141							; flags.
142	.c015						IEG:
143	.c015		4c df c4	jmp $c4df	                jmp LC4DF

145							;-------------------------------------------------------------------------

147	.c018						LC018:                                       ; Fetch byte from ROM Y
148	.c018		a6 f4		ldx $f4		                ldx $F4                      ; Get current ROM
149	.c01a		84 f4		sty $f4		                sty $F4                      ; Select ROM in Y
150	.c01c		8c 30 fe	sty $fe30	                sty ROMSEL
151	.c01f		b2 f6		lda ($f6)	                lda ($F6)                    ; Get byte with ROM Y paged in
152	.c021		4c 81 e5	jmp $e581	                jmp selectROMX                    ; Page in ROM X and return

154	.c024						LC024:
155	.c024		6c 5d 03	jmp ($035d)	                jmp (vduv.jumpVector)

157							;-------------------------------------------------------------------------
158							;
159							; VDU driver entry point
160							;
161							; Output to VDU.
162							;
163	.c027						outputToVDU:
164	.c027		ae 6a 02	ldx $026a	                ldx vduQueueNegativeLength  ;get VDU queue length
165	.c02a		f0 2d		beq $c059	                beq outputCharToVDU         ;taken if empty
166	.c02c		9d 24 02	sta $0224,x	                sta vduv.queueEnd-1-255,x   ;add to queue
167	.c02f		ee 6a 02	inc $026a	                inc vduQueueNegativeLength  ;one more in the queue...
168	.c032		f0 02		beq $c036	                beq outputQueueToVDU        ;taken if queue now filled
169	.c034						clc_rts_c034:
170	.c034		18		clc		                clc

172							;-------------------------------------------------------------------------
173							;
174							; VDU 0 (&00) Null [MasRef E.3-1]
175							; VDU 6 (&06) Enable VDU driver [MasRef E.3-3]
176							; VDU 27 (&1B) Null [MasRef E.3-34]
177							;
178	.c035						vdu0EntryPoint:
179	.c035						vdu6EntryPoint:
180	.c035						vdu27EntryPoint:
181	.c035						rtsC035:
182	.c035		60		rts		                rts

184							;-------------------------------------------------------------------------

186	.c036						outputQueueToVDU:
187	.c036		24 d0		bit $d0		                bit STATE
188	.c038		10 19		bpl $c053	                bpl LC053              ;branch taken if not VDU21 mode

190							                ; VDU disabled. But if outputting to printer
191							                ; specifically with VDU1, let the char through,
192	.c03a		ac 5e 03	ldy $035e	                ldy vduv.jumpVector+1
193	.c03d		c0 c0		cpy #$c0	                cpy #>vdu1EntryPoint
194	.c03f		d0 f3		bne $c034	                bne clc_rts_c034
195	.c041		ac 5d 03	ldy $035d	                ldy vduv.jumpVector+0
196	.c044		c0 e2		cpy #$e2	                cpy #<vdu1EntryPoint
197	.c046		d0 ec		bne $c034	                bne clc_rts_c034

199	.c048						outputCharToPrinter:
200	.c048		aa		tax		                tax                          ;save char to print
201	.c049		a5 d0		lda $d0		                lda STATE
202	.c04b		4a		lsr a		                lsr a                       ;C set if isPrinterEnabled
203	.c04c		90 e7		bcc $c035	                bcc rtsC035 ;taken if printer disabled - VDU 1 then a no-op
204	.c04e		8a		txa		                txa                          ;restore char to print
205	.c04f		18		clc		                clc
207	.c050		4c b9 e8	jmp $e8b9	                jmp LE8B9

212	.c053						LC053:
213	.c053		20 fa c0	jsr $c0fa	                jsr stopCursorEditing
214	.c056		18		clc		                clc
215	.c057		80 67		bra $c0c0	                bra LC0C0

217	.c059						outputCharToVDU:
223	.c059		20 fa c0	jsr $c0fa	                jsr stopCursorEditing
227	.c05c		50 0f		bvc $c06d	                bvc LC06D             ;taken if not previously editing
229	.c05e		30 0d		bmi $c06d	                bmi LC06D             ;taken if VDU 21
230	.c060		c9 0d		cmp #$0d	                cmp #$0D
231	.c062		d0 09		bne $c06d	                bne LC06D                  ;taken if not printing a CR
232	.c064		48		pha		                pha                        ;save char to print
233	.c065		a9 42		lda #$42	                lda #STATE.isCursorEditing|STATE.isScrollingDisabled
234	.c067		14 d0		trb $d0		                trb STATE
235	.c069		20 50 cf	jsr $cf50	                jsr showCursor
236	.c06c		68		pla		                pla                          ;restore char to print
237	.c06d						LC06D:
238	.c06d		c9 20		cmp #$20	                cmp #$20
239	.c06f		90 06		bcc $c077	                bcc handleControlChar
240	.c071		c9 7f		cmp #$7f	                cmp #$7F
241	.c073		d0 21		bne $c096	                bne handlePrintableChar       ;taken if not backspace
242	.c075		a9 20		lda #$20	                lda #$20 ;backspace is entry 32 in the VDU routines table
243	.c077						handleControlChar:
244	.c077		a8		tay		                tay                          ;Y=index in table
245	.c078		b9 27 e0	lda $e027,y	                lda vduRoutinesLSBTable,y
246	.c07b		8d 5d 03	sta $035d	                sta vduv.jumpVector+0 ; Store jump address LSB (see MasRef E.4-3)
247	.c07e		b9 48 e0	lda $e048,y	                lda vduRoutinesMSBTable,y
248	.c081		30 30		bmi $c0b3	                bmi LC0B3           ;branch taken if MSB directly
249	.c083		aa		tax		                tax                          ; Save original MSB value
250	.c084		09 f0		ora #$f0	                ora #$F0
251	.c086		8d 6a 02	sta $026a	                sta vduQueueNegativeLength ;initialise initial VDU queue length
252	.c089		8a		txa		                txa                          ; Restore original MSB value
256	.c08a		4a		lsr a		                lsr a                        ;
257	.c08b		4a		lsr a		                lsr a                        ;
258	.c08c		4a		lsr a		                lsr a                        ;
259	.c08d		4a		lsr a		                lsr a                        ; Extract value in top 4 bits
261	.c08e		18		clc		                clc                          ;
262	.c08f		69 c0		adc #$c0	                adc #vduRoutinesPage         ; form MSB
263	.c091		8d 5e 03	sta $035e	                sta vduv.jumpVector+1
264	.c094		80 34		bra $c0ca	                bra reinstateCursorEditing                    ; Continue

266	.c096						handlePrintableChar:
267	.c096		24 d0		bit $d0		                bit STATE
268	.c098		30 2d		bmi $c0c7	                bmi LC0C7                    ;taken if VDU21
269	.c09a		20 0c ce	jsr $ce0c	                jsr plotCharAtTextCursor
270	.c09d		a9 20		lda #$20	                lda #vduv.cursorFlags.noMoveCursorAfterPrint
271	.c09f		2c 66 03	bit $0366	                bit vduv.cursorFlags
272	.c0a2		d0 23		bne $c0c7	                bne LC0C7                    ; taken if not moving cursor
277	.c0a4		20 76 c2	jsr $c276	                jsr LC276
279	.c0a7		80 1e		bra $c0c7	                bra LC0C7

281	.c0a9						LC0A9:
282	.c0a9		49 06		eor #$06	                eor #$06                     ; compare to VDU6?
283	.c0ab		d0 18		bne $c0c5	                bne LC0C5                    ; taken if not VUD6
284	.c0ad		a9 80		lda #$80	                lda #STATE.isVDU21
285	.c0af		14 d0		trb $d0		                trb STATE                    ; reset VDU21 flag
286	.c0b1		80 17		bra $c0ca	                bra reinstateCursorEditing

288	.c0b3						LC0B3:
289	.c0b3		8d 5e 03	sta $035e	                sta vduv.jumpVector+1

292	.c0b6		98		tya		                tya
293	.c0b7		49 f7		eor #$f7	                eor #$F7
294	.c0b9		c9 fa		cmp #$fa	                cmp #$FA

297	.c0bb		98		tya		                tya
298	.c0bc		24 d0		bit $d0		                bit STATE
299	.c0be		30 e9		bmi $c0a9	                bmi LC0A9             ;branch taken if VDU21 in effect
300	.c0c0						LC0C0:
301	.c0c0		08		php		                php
302	.c0c1		20 24 c0	jsr $c024	                jsr LC024
303	.c0c4		28		plp		                plp
304	.c0c5						LC0C5:
305	.c0c5		90 03		bcc $c0ca	                bcc reinstateCursorEditing
306	.c0c7						LC0C7:
307	.c0c7		a5 d0		lda $d0		                lda STATE
308	.c0c9		4a		lsr a		                lsr a                          ;C=1 if printer enabled
309	.c0ca						reinstateCursorEditing:
310	.c0ca		24 d0		bit $d0		                bit STATE
311	.c0cc		50 13		bvc $c0e1	                bvc rtsC0E1               ;taken if not cursor editing
312	.c0ce		20 05 c1	jsr $c105	                jsr activateEditCursor
313	.c0d1						exchangeCursors:
314	.c0d1		08		php		                php
315	.c0d2		48		pha		                pha
316	.c0d3		a5 d0		lda $d0		                lda STATE
317	.c0d5		49 02		eor #$02	                eor #STATE.isScrollingDisabled
318	.c0d7		85 d0		sta $d0		                sta STATE
319	.c0d9		20 ae e2	jsr $e2ae	                jsr exchangeEditCursorPositionAndTextCursorPosition
320	.c0dc		20 d8 c6	jsr $c6d8	                jsr updateCRTCTextCursor
321	.c0df		68		pla		                pla
322	.c0e0		28		plp		                plp
323	.c0e1						rtsC0E1:
324	.c0e1		60		rts		                rts

326							;-------------------------------------------------------------------------
327							;
328							; VDU 1 (&01) Send next character to printer only [MasRef E.3-2]
329							;
330	.c0e2						vdu1EntryPoint:
331	.c0e2		20 ca c0	jsr $c0ca	                jsr reinstateCursorEditing
332	.c0e5		20 48 c0	jsr $c048	                jsr outputCharToPrinter
333	.c0e8		80 10		bra $c0fa	                bra stopCursorEditing

335							;-------------------------------------------------------------------------
336							;
337							; VDU 2 (&02) Enable printer [MasRef E.3-2]
338							; VDU 3 (&03) Disable printer [MasRef E.3-3]
339							;
340	.c0ea						vdu2EntryPoint:
341	.c0ea						vdu3EntryPoint:
342	.c0ea		48		pha		                pha                          ;
343	.c0eb		20 ca c0	jsr $c0ca	                jsr reinstateCursorEditing
345	.c0ee		20 3a e9	jsr $e93a	                jsr callPrinterDriverWithPrinterBuffer
349	.c0f1		a9 01		lda #$01	                lda #STATE.isPrinterEnabled  ;
350	.c0f3		04 d0		tsb $d0		                tsb STATE
351	.c0f5		68		pla		                pla
352	.c0f6		29 01		and #$01	                and #STATE.isPrinterEnabled
353	.c0f8		14 d0		trb $d0		                trb STATE

355							;-------------------------------------------------------------------------
356							;
357							; Stop cursor editing, if it's on.
358							;
359							; exit:
360							;
361							; V=1 if cursor editing previous on
362							; N=1 if VDU 21 on
363							;
364	.c0fa						stopCursorEditing:
365	.c0fa		24 d0		bit $d0		                bit STATE
366	.c0fc		50 e3		bvc $c0e1	                bvc rtsC0E1                    ;taken if not cursor editing
367	.c0fe		20 d1 c0	jsr $c0d1	                jsr exchangeCursors
368	.c101		08		php		                php
369	.c102						deactivateEditCursor:
370	.c102		38		sec		                sec
371	.c103		80 02		bra $c107	                bra updateEditCursorState

373							;-------------------------------------------------------------------------

375	.c105						activateEditCursor:
376	.c105		08		php		                php
377	.c106		18		clc		                clc

379							;-------------------------------------------------------------------------
380							;
381							; Handle cursor editing on/off.
382							;
383							; entry:
384							;
385							; C=0 - cursor editing on; add fake cursor
386							;
387							; C=1 = cursor editing off; remove fake cursor and restore screen
388							;
389	.c107						updateEditCursorState: .proc
390	.c107		48		pha		                pha
391	.c108		a5 d8		lda $d8		                lda ZMEMT+0
392	.c10a		85 e0		sta $e0		                sta ZTEMPD+0
393	.c10c		a5 d9		lda $d9		                lda ZMEMT+1
394	.c10e		85 e1		sta $e1		                sta ZTEMPD+1
395	.c110		ac 4f 03	ldy $034f	                ldy vduv.bytesPerCharacter
396	.c113		88		dey		                dey
397	.c114		d0 0e		bne $c124	                bne bitmap

399	.c116						teletext:
400	.c116		ad 38 03	lda $0338	                lda vduv.workspace._38 ;get old byte under fake cursor (may be bogus)
401	.c119		b0 17		bcs $c132	                bcs storeToScreen      ;taken if switching off
402	.c11b		b2 d8		lda ($d8)	                lda (ZMEMT)            ;get screen byte
403	.c11d		8d 38 03	sta $0338	                sta vduv.workspace._38 ;store old byte
404	.c120		a9 7f		lda #$7f	                lda #$7F               ;store solid block to screen
405	.c122		80 0e		bra $c132	                bra storeToScreen

407	.c124						bitmap:
408	.c124		a9 ff		lda #$ff	                lda #%11111111          ;invert all bits
409	.c126		c0 1f		cpy #$1f	                cpy #$1F      ;check for 32 chars/byte - i.e., MODE 2
410	.c128		d0 02		bne $c12c	                bne +         ;taken if not MODE 2
411	.c12a		a9 3f		lda #$3f	                lda #%00111111       ;avoid flashing colours in MODE 2
412	.c12c						+
413	.c12c		85 da		sta $da		                sta ZTEMP
414	.c12e						loop:
415	.c12e		b2 e0		lda ($e0)	                lda (ZTEMPD)
416	.c130		45 da		eor $da		                eor ZTEMP
417	.c132						storeToScreen:
418	.c132		92 e0		sta ($e0)	                sta (ZTEMPD)
419	.c134		e6 e0		inc $e0		                inc ZTEMPD+0
420	.c136		d0 09		bne $c141	                bne +                    ;taken if no carry out of LSB
421	.c138		e6 e1		inc $e1		                inc ZTEMPD+1
422	.c13a		10 05		bpl $c141	                bpl +                 ;taken if no screen address wrap
423	.c13c		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
424	.c13f		85 e1		sta $e1		                sta ZTEMPD+1
425	.c141						+
426	.c141		88		dey		                dey               ;Y=$ff after 1 iteration in teletext
427	.c142		10 ea		bpl $c12e	                bpl loop
428	.c144		68		pla		                pla
429	.c145		28		plp		                plp
430	.c146		60		rts		                rts
431							                .endproc

433							;-------------------------------------------------------------------------

435	.c147						LC147:
436	>c147		be c1				                .word LC1BE
437	>c149		b1 c1				                .word LC1B1
438	>c14b		be c1				                .word LC1BE
439	>c14d		b1 c1				                .word LC1B1
440	>c14f		95 c1				                .word LC195
441	>c151		95 c1				                .word LC195
442	>c153		a2 c1				                .word LC1A2
443	>c155		a2 c1				                .word LC1A2

445							;-------------------------------------------------------------------------

447	.c157						LC157:
448	>c157		01 c2				                .word LC201
449	>c159		ee c1				                .word LC1EE
450	>c15b		01 c2				                .word LC201
451	>c15d		ee c1				                .word LC1EE
452	>c15f		21 c2				                .word LC221
453	>c161		21 c2				                .word LC221
454	>c163		10 c2				                .word LC210
455	>c165		10 c2				                .word LC210

457							;-------------------------------------------------------------------------
458							;
459							; Indexed by the swapAxes, invertVertical and invertHorizontal cursor
460							; flags bits.
461							;
462	.c167						setTextCursorXPositionRoutinesTable:
463	>c167		d3 c2				                .word setTextCursorXPosition           ;0
464	>c169		cb c2				                .word setTextCursorXPositionInvertHorizontal ;invertHorizontal
465	>c16b		d3 c2				                .word setTextCursorXPosition ;invertVertical
466	>c16d		cb c2				                .word setTextCursorXPositionInvertHorizontal ;invertVertical|invertHorizontal
467	>c16f		e2 c2				                .word setTextCursorXPositionSwapAxes         ;swapAxes
468	>c171		e2 c2				                .word setTextCursorXPositionSwapAxes ;swapAxes|invertHorizontal
469	>c173		da c2				                .word setTextCursorXPositionSwapAxesInvertVertical ;swapAxes|invertVertical
470	>c175		da c2				                .word setTextCursorXPositionSwapAxesInvertVertical ;swapAxes|invertVertical|invertHorizontal

472							;-------------------------------------------------------------------------

474	.c177						moveTextCursorRoutinesTable:
475	>c177		10 c3				                .word moveTextCursorPositiveX
476	>c179		f2 c2				                .word moveTextCursorNegativeX
477	>c17b		10 c3				                .word moveTextCursorPositiveX
478	>c17d		f2 c2				                .word moveTextCursorNegativeX
479	>c17f		5a c3				                .word moveTextCursorPositiveY
480	>c181		5a c3				                .word moveTextCursorPositiveY
481	>c183		38 c3				                .word moveTextCursorNegativeY
482	>c185		38 c3				                .word moveTextCursorNegativeY

484							;-------------------------------------------------------------------------

486	.c187						LC187:
487	.c187		4d 66 03	eor $0366	                eor vduv.cursorFlags
488	.c18a		29 0e		and #$0e	                and #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal)
489	.c18c		48		pha		                pha
490	.c18d		20 a6 d1	jsr $d1a6	                jsr LD1A6
491	.c190		fa		plx		                plx
492	.c191		38		sec		                sec
493	.c192		7c 47 c1	jmp ($c147,x)	                jmp (LC147,x)

495	.c195						LC195:
496	.c195		ad 26 03	lda $0326	                lda $0326
497	.c198		e9 08		sbc #$08	                sbc #$08
498	.c19a		8d 26 03	sta $0326	                sta $0326
499	.c19d		ce 27 03	dec $0327	                dec $0327
500	.c1a0		80 08		bra $c1aa	                bra LC1AA

502	.c1a2						LC1A2:
503	.c1a2		ad 26 03	lda $0326	                lda $0326
504	.c1a5		69 07		adc #$07	                adc #$07
505	.c1a7		8d 26 03	sta $0326	                sta $0326
506	.c1aa						LC1AA:
507	.c1aa		90 1f		bcc $c1cb	                bcc LC1CB
508	.c1ac		ee 27 03	inc $0327	                inc $0327
509	.c1af		80 1a		bra $c1cb	                bra LC1CB

511	.c1b1						LC1B1:
512	.c1b1		ad 24 03	lda $0324	                lda $0324
513	.c1b4		e9 08		sbc #$08	                sbc #$08
514	.c1b6		8d 24 03	sta $0324	                sta $0324
515	.c1b9		ce 25 03	dec $0325	                dec $0325
516	.c1bc		80 08		bra $c1c6	                bra LC1C6

518	.c1be						LC1BE:
519	.c1be		ad 24 03	lda $0324	                lda $0324
520	.c1c1		69 07		adc #$07	                adc #$07
521	.c1c3		8d 24 03	sta $0324	                sta $0324
522	.c1c6						LC1C6:
523	.c1c6		90 03		bcc $c1cb	                bcc LC1CB
524	.c1c8		ee 25 03	inc $0325	                inc $0325
525	.c1cb						LC1CB:
526	.c1cb		a5 da		lda $da		                lda $DA
527	.c1cd		d0 0c		bne $c1db	                bne LC1DB
528	.c1cf		2c 66 03	bit $0366	                bit $0366
529	.c1d2		70 07		bvs $c1db	                bvs LC1DB
530	.c1d4		da		phx		                phx
531	.c1d5		20 a6 d1	jsr $d1a6	                jsr LD1A6
532	.c1d8		fa		plx		                plx
533	.c1d9		a8		tay		                tay
534	.c1da		60		rts		                rts

536	.c1db						LC1DB:
537	.c1db		a9 00		lda #$00	                lda #$00
538	.c1dd		60		rts		                rts

540	.c1de						LC1DE:
541	.c1de		a9 00		lda #$00	                lda #$00
542	.c1e0						LC1E0:
543	.c1e0		64 da		stz $da		                stz $DA
544	.c1e2		0a		asl a		                asl a
545	.c1e3		26 da		rol $da		                rol $DA
546	.c1e5		0a		asl a		                asl a
547	.c1e6		26 da		rol $da		                rol $DA
548	.c1e8		0a		asl a		                asl a
549	.c1e9		26 da		rol $da		                rol $DA
550	.c1eb		7c 57 c1	jmp ($c157,x)	                jmp (LC157,x)

552	.c1ee						LC1EE:
553	.c1ee		49 f9		eor #$f9	                eor #$F9
554	.c1f0		6d 04 03	adc $0304	                adc $0304
555	.c1f3		8d 24 03	sta $0324	                sta $0324
556	.c1f6		a5 da		lda $da		                lda $DA
557	.c1f8		49 ff		eor #$ff	                eor #$FF
558	.c1fa		6d 05 03	adc $0305	                adc $0305
559	.c1fd		8d 25 03	sta $0325	                sta $0325
560	.c200		60		rts		                rts

562	.c201						LC201:
563	.c201		6d 00 03	adc $0300	                adc $0300
564	.c204		8d 24 03	sta $0324	                sta $0324
565	.c207		a5 da		lda $da		                lda $DA
566	.c209		6d 01 03	adc $0301	                adc $0301
567	.c20c		8d 25 03	sta $0325	                sta $0325
568	.c20f		60		rts		                rts

570	.c210						LC210:
571	.c210		49 07		eor #$07	                eor #$07
572	.c212		6d 02 03	adc $0302	                adc $0302
573	.c215		8d 26 03	sta $0326	                sta $0326
574	.c218		a5 da		lda $da		                lda $DA
575	.c21a		6d 03 03	adc $0303	                adc $0303
576	.c21d		8d 27 03	sta $0327	                sta $0327
577	.c220		60		rts		                rts

579	.c221						LC221:
580	.c221		38		sec		                sec
581	.c222		49 ff		eor #$ff	                eor #$FF
582	.c224		6d 06 03	adc $0306	                adc $0306
583	.c227		8d 26 03	sta $0326	                sta $0326
584	.c22a		a5 da		lda $da		                lda $DA
585	.c22c		49 ff		eor #$ff	                eor #$FF
586	.c22e		6d 07 03	adc $0307	                adc $0307
587	.c231		8d 27 03	sta $0327	                sta $0327
588	.c234		60		rts		                rts

590	.c235						LC235:
591	.c235		a9 00		lda #$00	                lda #$00
592	.c237		20 87 c1	jsr $c187	                jsr LC187
593	.c23a		f0 0d		beq $c249	                beq LC249
594	.c23c		20 de c1	jsr $c1de	                jsr LC1DE
595	.c23f						LC23F:
596	.c23f		a9 08		lda #$08	                lda #$08
597	.c241						LC241:
598	.c241		20 87 c1	jsr $c187	                jsr LC187
599	.c244		f0 03		beq $c249	                beq LC249
600	.c246		20 de c1	jsr $c1de	                jsr LC1DE
601	.c249						LC249:
602	.c249		4c df c4	jmp $c4df	                jmp LC4DF

604	.c24c						vdu9EntryPoint:
605	.c24c		20 2d d1	jsr $d12d	                jsr handleColumn81
606	.c24f		b0 e4		bcs $c235	                bcs LC235
607	.c251		a9 00		lda #$00	                lda #$00                     ; X+
608	.c253		20 e9 c2	jsr $c2e9	                jsr moveTextCursor
609	.c256		90 1b		bcc $c273	                bcc LC273
610	.c258						LC258:
611	.c258		20 8f c3	jsr $c38f	                jsr LC38F
612	.c25b						vdu10EntryPoint:
8	.c25b		20 d2 e2	jsr $e2d2	                jsr testVDU5StateNonInlined
614	.c25e		d0 df		bne $c23f	                bne LC23F
615	.c260		18		clc		                clc
616	.c261		20 8e c8	jsr $c88e	                jsr LC88E
617	.c264		a9 08		lda #$08	                lda #$08
618	.c266		20 e9 c2	jsr $c2e9	                jsr moveTextCursor           ; Y-
619	.c269						LC269:
620	.c269		90 08		bcc $c273	                bcc LC273
621	.c26b		20 7b c3	jsr $c37b	                jsr LC37B
622	.c26e		90 03		bcc $c273	                bcc LC273
623	.c270		4c 51 d0	jmp $d051	                jmp LD051

625	.c273						LC273:
626	.c273		4c ed c6	jmp $c6ed	                jmp updateCRTCCursorAddress

628	.c276						LC276:
635	.c276		20 d2 e2	jsr $e2d2	                jsr testVDU5StateNonInlined
637							                ; .testVDU5State
638	.c279		d0 ba		bne $c235	                bne LC235                    ; taken if VDU5
639	.c27b		20 e9 c2	jsr $c2e9	                jsr moveTextCursor           ; A=0, so X+
640	.c27e		90 f3		bcc $c273	                bcc LC273
641	.c280		a9 01		lda #$01	                lda #vduv.cursorFlags.scrollProtect
642	.c282		2c 66 03	bit $0366	                bit vduv.cursorFlags
643	.c285		f0 d1		beq $c258	                beq LC258
644	.c287		38		sec		                sec
645	.c288		6e 6c 03	ror $036c	                ror vduv.column81
646	.c28b						LC28B:
647	.c28b		60		rts		                rts

649	.c28c						LC28C:
650	.c28c		a9 06		lda #$06	                lda #$06
651	.c28e		20 87 c1	jsr $c187	                jsr LC187
652	.c291		f0 b6		beq $c249	                beq LC249
653	.c293		20 de c1	jsr $c1de	                jsr LC1DE
654	.c296						LC296:
655	.c296		a9 0e		lda #$0e	                lda #$0E
656	.c298		80 a7		bra $c241	                bra LC241

658	.c29a						vdu8EntryPoint:
8	.c29a		20 d2 e2	jsr $e2d2	                jsr testVDU5StateNonInlined
660	.c29d		d0 ed		bne $c28c	                bne LC28C
661	.c29f		4e 6c 03	lsr $036c	                lsr $036C
662	.c2a2		2c 6c 03	bit $036c	                bit $036C
663	.c2a5		70 e4		bvs $c28b	                bvs LC28B
664	.c2a7		a9 06		lda #$06	                lda #$06
665	.c2a9		20 e9 c2	jsr $c2e9	                jsr moveTextCursor           ; X-
666	.c2ac		90 c5		bcc $c273	                bcc LC273
667	.c2ae		20 8f c3	jsr $c38f	                jsr LC38F
668	.c2b1						vdu11EntryPoint:
8	.c2b1		20 d2 e2	jsr $e2d2	                jsr testVDU5StateNonInlined
670	.c2b4		d0 e0		bne $c296	                bne LC296
671	.c2b6		ce 69 02	dec $0269	                dec pagedModeCounter
672	.c2b9		10 03		bpl $c2be	                bpl LC2BE
673	.c2bb		ee 69 02	inc $0269	                inc pagedModeCounter
674	.c2be						LC2BE:
675	.c2be		a9 0e		lda #$0e	                lda #$0E
676	.c2c0		20 e9 c2	jsr $c2e9	                jsr moveTextCursor           ; Y+
677	.c2c3		80 a4		bra $c269	                bra LC269

679							;-------------------------------------------------------------------------
680							;
681							; Set/reset cursor position, taking cursor flags into account.
682							;
683							; entry:
684							;
685							; (set only) A = cursor position
686							;
687							; X = cursorFlags bits: swapAxes, invertVertical, invertHorizontal
688							;
689	.c2c5						resetTextCursorXPositionWithCursorFlags:
690	.c2c5		a9 00		lda #$00	                lda #$00
691	.c2c7						setTextCursorXPositionWithCursorFlags:
692	.c2c7		18		clc		                clc
693	.c2c8		7c 67 c1	jmp ($c167,x)	                jmp (setTextCursorXPositionRoutinesTable,x)

695							;-------------------------------------------------------------------------

697	.c2cb						setTextCursorXPositionInvertHorizontal:
698	.c2cb		38		sec		                sec                          ;+1
699	.c2cc		49 ff		eor #$ff	                eor #$FF          ;^$ff+1 (i.e., adc will add the -ve)
700	.c2ce		6d 0a 03	adc $030a	                adc vduv.textWindowRight
701	.c2d1		80 03		bra $c2d6	                bra staTextCursorXPosition

703							;-------------------------------------------------------------------------

705	.c2d3						setTextCursorXPosition:
706	.c2d3		6d 08 03	adc $0308	                adc vduv.textWindowLeft
707	.c2d6						staTextCursorXPosition:
708	.c2d6		8d 18 03	sta $0318	                sta vduv.textCursorXPosition
709	.c2d9		60		rts		                rts

711							;-------------------------------------------------------------------------

713	.c2da						setTextCursorXPositionSwapAxesInvertVertical:
714	.c2da		38		sec		                sec
715	.c2db		49 ff		eor #$ff	                eor #$FF
716	.c2dd		6d 09 03	adc $0309	                adc vduv.textWindowBottom
717	.c2e0		80 03		bra $c2e5	                bra staTextCursorYPosition

719	.c2e2						setTextCursorXPositionSwapAxes:
720	.c2e2		6d 0b 03	adc $030b	                adc vduv.textWindowTop
721	.c2e5						staTextCursorYPosition:
722	.c2e5		8d 19 03	sta $0319	                sta vduv.textCursorYPosition
723	.c2e8		60		rts		                rts

725							;-------------------------------------------------------------------------
726							;
727							; Move text cursor.
728							;
729							; Entry:
730							;
731							; A = direction to move: 0 = X+
732							;                        2 = X-
733							;                        4 = X+
734							;                        6 = X-
735							;                        8 = Y-
736							;                        10 = Y-
737							;                        12 = Y+
738							;                        14 = Y+
739							;
740							; Exit:
741							;
742							; X = actual jump table index
743							; C = something...

746	.c2e9						moveTextCursor:
747	.c2e9		4d 66 03	eor $0366	                eor vduv.cursorFlags
748	.c2ec		29 0e		and #$0e	                and #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal)
749	.c2ee		aa		tax		                tax
752	.c2ef						callMoveTextCursorRoutine:
753	.c2ef		7c 77 c1	jmp ($c177,x)	                jmp (moveTextCursorRoutinesTable,x)

755							;-------------------------------------------------------------------------

757	.c2f2						moveTextCursorNegativeX:
758	.c2f2		ad 08 03	lda $0308	                lda vduv.textWindowLeft
759	.c2f5		cd 18 03	cmp $0318	                cmp vduv.textCursorXPosition
760	.c2f8		b0 3d		bcs $c337	                bcs rtsC337
761	.c2fa		ce 18 03	dec $0318	                dec vduv.textCursorXPosition
762	.c2fd		38		sec		                sec
763	.c2fe		ad 4a 03	lda $034a	                lda vduv.textCursorCRTCAddress+0
764	.c301		ed 4f 03	sbc $034f	                sbc vduv.bytesPerCharacter
765	.c304		8d 4a 03	sta $034a	                sta vduv.textCursorCRTCAddress+0
766	.c307		85 d8		sta $d8		                sta ZMEMT+0
767	.c309		b0 2b		bcs $c336	                bcs clc_rts_C336
768	.c30b		ce 4b 03	dec $034b	                dec vduv.textCursorCRTCAddress+1
769	.c30e		80 1b		bra $c32b	                bra fixUpZMEMTHiFromTextCursorCRTCAddressHi

771							;-------------------------------------------------------------------------

782	.c310						moveTextCursorPositiveX:
783	.c310		ad 18 03	lda $0318	                lda vduv.textCursorXPosition
784	.c313		cd 0a 03	cmp $030a	                cmp vduv.textWindowRight
785	.c316		b0 1f		bcs $c337	                bcs rtsC337
786	.c318		ee 18 03	inc $0318	                inc vduv.textCursorXPosition
787	.c31b		ad 4a 03	lda $034a	                lda vduv.textCursorCRTCAddress+0
788	.c31e		6d 4f 03	adc $034f	                adc vduv.bytesPerCharacter
789	.c321		8d 4a 03	sta $034a	                sta vduv.textCursorCRTCAddress+0
790	.c324		85 d8		sta $d8		                sta ZMEMT+0
791	.c326		90 0f		bcc $c337	                bcc rtsC337
792	.c328		ee 4b 03	inc $034b	                inc vduv.textCursorCRTCAddress+1
793	.c32b						fixUpZMEMTHiFromTextCursorCRTCAddressHi:
794	.c32b		ad 4b 03	lda $034b	                lda vduv.textCursorCRTCAddress+1
795	.c32e						fixUpZMEMTHi:
796	.c32e		10 04		bpl $c334	                bpl LC334
797	.c330		38		sec		                sec
798	.c331		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte
799	.c334						LC334:
800	.c334		85 d9		sta $d9		                sta ZMEMT+1
801	.c336						clc_rts_C336:
802	.c336		18		clc		                clc
803	.c337						rtsC337:
804	.c337		60		rts		                rts

806							;-------------------------------------------------------------------------

808	.c338						moveTextCursorNegativeY:
809	.c338		ad 0b 03	lda $030b	                lda vduv.textWindowTop
810	.c33b		cd 19 03	cmp $0319	                cmp vduv.textCursorYPosition
811	.c33e		b0 f7		bcs $c337	                bcs rtsC337
812	.c340		ce 19 03	dec $0319	                dec vduv.textCursorYPosition
813	.c343		38		sec		                sec
814	.c344		ad 4a 03	lda $034a	                lda vduv.textCursorCRTCAddress+0
815	.c347		ed 52 03	sbc $0352	                sbc $0352
816	.c34a		8d 4a 03	sta $034a	                sta vduv.textCursorCRTCAddress+0
817	.c34d		85 d8		sta $d8		                sta ZMEMT+0
818	.c34f		ad 4b 03	lda $034b	                lda vduv.textCursorCRTCAddress+1
819	.c352		ed 53 03	sbc $0353	                sbc $0353
820	.c355		8d 4b 03	sta $034b	                sta vduv.textCursorCRTCAddress+1
821	.c358		80 d4		bra $c32e	                bra fixUpZMEMTHi

823							;-------------------------------------------------------------------------

825	.c35a						moveTextCursorPositiveY:
826	.c35a		ad 19 03	lda $0319	                lda vduv.textCursorYPosition
827	.c35d		cd 09 03	cmp $0309	                cmp vduv.textWindowBottom
828	.c360		b0 d5		bcs $c337	                bcs rtsC337
829	.c362		ee 19 03	inc $0319	                inc vduv.textCursorYPosition
830	.c365		ad 4a 03	lda $034a	                lda vduv.textCursorCRTCAddress+0
831	.c368		6d 52 03	adc $0352	                adc vduv.bytesPerCharacterRow+0
832	.c36b		8d 4a 03	sta $034a	                sta vduv.textCursorCRTCAddress+0
833	.c36e		85 d8		sta $d8		                sta ZMEMT+0
834	.c370		ad 4b 03	lda $034b	                lda vduv.textCursorCRTCAddress+1
835	.c373		6d 53 03	adc $0353	                adc vduv.bytesPerCharacterRow+1
836	.c376		8d 4b 03	sta $034b	                sta vduv.textCursorCRTCAddress+1
837	.c379		80 b3		bra $c32e	                bra fixUpZMEMTHi

839							;-------------------------------------------------------------------------

841	.c37b						LC37B:
842	.c37b		a9 10		lda #$10	                lda #vduv.cursorFlags.noVerticalScroll
843	.c37d		2c 66 03	bit $0366	                bit vduv.cursorFlags
844	.c380		d0 0d		bne $c38f	                bne LC38F
845	.c382		8a		txa		                txa
846	.c383		49 06		eor #$06	                eor #$06
847	.c385		48		pha		                pha
848	.c386		a9 42		lda #$42	                lda #STATE.isCursorEditing|STATE.isScrollingDisabled
849	.c388		24 d0		bit $d0		                bit STATE
850	.c38a		f0 16		beq $c3a2	                beq LC3A2
851	.c38c		70 09		bvs $c397	                bvs LC397
852	.c38e		68		pla		                pla
853	.c38f						LC38F:
854	.c38f		20 c5 c2	jsr $c2c5	                jsr resetTextCursorXPositionWithCursorFlags
855	.c392		20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
856	.c395		18		clc		                clc
857	.c396		60		rts		                rts

859	.c397						LC397:
860	.c397		20 ae e2	jsr $e2ae	                jsr exchangeEditCursorPositionAndTextCursorPosition
861	.c39a		fa		plx		                plx
862	.c39b		da		phx		                phx
863	.c39c		20 ef c2	jsr $c2ef	                jsr callMoveTextCursorRoutine
864	.c39f		20 ae e2	jsr $e2ae	                jsr exchangeEditCursorPositionAndTextCursorPosition
865	.c3a2						LC3A2:
866	.c3a2		fa		plx		                plx
867	.c3a3		38		sec		                sec
868	.c3a4						rtsC3A4:
869	.c3a4		60		rts		                rts

871							;-------------------------------------------------------------------------

873	.c3a5						vdu28EntryPoint:
874	.c3a5		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
875	.c3a8		ad 21 03	lda $0321	                lda vduv.queueEnd-3          ; max Y
876	.c3ab		cd 23 03	cmp $0323	                cmp vduv.queueEnd-1          ; min Y
877	.c3ae		90 f4		bcc $c3a4	                bcc rtsC3A4                  ; bail if max Y<min Y
878	.c3b0		dd 01 e1	cmp $e101,x	                cmp modeMaxRow,x             ;
879	.c3b3		f0 02		beq $c3b7	                beq +                        ; taken if max Y==max row
880	.c3b5		b0 ed		bcs $c3a4	                bcs rtsC3A4                  ; bail if max Y>max row
881	.c3b7						+
882	.c3b7		ad 22 03	lda $0322	                lda vduv.queueEnd-2          ; max X
883	.c3ba		dd 09 e1	cmp $e109,x	                cmp modeMaxColumn,x
884	.c3bd		f0 03		beq $c3c2	                beq +                        ; taken if max X==max col
885	.c3bf		b0 e3		bcs $c3a4	                bcs rtsC3A4                  ; bail if max X>max col
886	.c3c1		38		sec		                sec
887	.c3c2						+
888	.c3c2		ed 20 03	sbc $0320	                sbc vduv.queueEnd-4          ; form window width
889	.c3c5		90 dd		bcc $c3a4	                bcc rtsC3A4                  ; bail if negative
890	.c3c7		20 80 c7	jsr $c780	                jsr setTextWindowWidthInBytes
891	.c3ca		a9 08		lda #$08	                lda #STATE.isTextWindow
892	.c3cc		04 d0		tsb $d0		                tsb STATE                    ; set isTextWIndow bit

894							                ; set text window value from the 4 VDU 28 argument
895							                ; bytes in the VDU queue
896	.c3ce		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
897	.c3d0		a0 08		ldy #$08	                ldy #VDUVariables.textWindowLeft
898	.c3d2		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables

900	.c3d5		20 ae e2	jsr $e2ae	                jsr exchangeEditCursorPositionAndTextCursorPosition
901	.c3d8		20 da cc	jsr $ccda	                jsr updateZMEMTWithTextCursorPositionIfValid
902	.c3db		90 03		bcc $c3e0	                bcc LC3E0         ; taken if text cursor pos was valid
903	.c3dd		20 e8 c3	jsr $c3e8	                jsr resetTextCursorPosition
904	.c3e0						LC3E0:
905	.c3e0		20 ae e2	jsr $e2ae	                jsr exchangeEditCursorPositionAndTextCursorPosition
906	.c3e3		20 da cc	jsr $ccda	                jsr updateZMEMTWithTextCursorPositionIfValid
907	.c3e6		90 1f		bcc $c407	                bcc LC407         ; taken if text cursor pos was valid
908	.c3e8						resetTextCursorPosition:
909	.c3e8		a5 d0		lda $d0		                lda STATE
910	.c3ea		48		pha		                pha
911	.c3eb		29 df		and #$df	                and #~STATE.isVDU5
912	.c3ed		85 d0		sta $d0		                sta STATE
913	.c3ef		20 7c c4	jsr $c47c	                jsr vdu30EntryPoint
914	.c3f2		68		pla		                pla
915	.c3f3		85 d0		sta $d0		                sta STATE
916	.c3f5		60		rts		                rts

918	.c3f6						vdu13EntryPoint:
919	.c3f6		ad 66 03	lda $0366	                lda vduv.cursorFlags
920	.c3f9		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal;$0E
921	.c3fb		aa		tax		                tax
8	.c3fc		20 d2 e2	jsr $e2d2	                jsr testVDU5StateNonInlined
923	.c3ff		d0 09		bne $c40a	                bne LC40A
924	.c401		4e 6c 03	lsr $036c	                lsr vduv.column81
925	.c404		20 8f c3	jsr $c38f	                jsr LC38F
926	.c407						LC407:
927	.c407		4c ed c6	jmp $c6ed	                jmp updateCRTCCursorAddress

929	.c40a						LC40A:
930	.c40a		20 de c1	jsr $c1de	                jsr LC1DE
931	.c40d		4c df c4	jmp $c4df	                jmp LC4DF

933	.c410						jsrVDU30EntryPoint:
934	.c410		20 7c c4	jsr $c47c	                jsr vdu30EntryPoint

936							;-------------------------------------------------------------------------
937							;
938							; VDU 16 (&10) Clear graphics window [MasRef E.3-7]
939							;
940	.c413						vdu16EntryPoint:
941	.c413		ad 61 03	lda $0361	                lda vduv.pixelsPerByteMinusOne
942	.c416		f0 8c		beq $c3a4	                beq rtsC3A4                    ;taken if MODE 7
943	.c418		a2 00		ldx #$00	                ldx #VDUVariables.graphicsWindowPixelsLeft
944	.c41a		20 02 c9	jsr $c902	                jsr copyEightBytesToWorkspace28
945	.c41d		20 51 c9	jsr $c951	                jsr prepareForPlotBackground
946	.c420						LC420:
947	.c420		a2 2a		ldx #$2a	                ldx #$2A
948	.c422		a0 2e		ldy #$2e	                ldy #$2E
949	.c424		20 b2 e2	jsr $e2b2	                jsr exchangeTwoVDUBytes
950	.c427						LC427:
951	.c427		a2 28		ldx #$28	                ldx #$28
952	.c429		a0 2c		ldy #$2c	                ldy #$2C
953	.c42b		20 e8 da	jsr $dae8	                jsr LDAE8
954	.c42e		ad 2a 03	lda $032a	                lda $032A
955	.c431		d0 03		bne $c436	                bne LC436
956	.c433		ce 2b 03	dec $032b	                dec $032B
957	.c436						LC436:
958	.c436		ce 2a 03	dec $032a	                dec $032A
959	.c439		ad 2a 03	lda $032a	                lda $032A
960	.c43c		cd 2e 03	cmp $032e	                cmp $032E
961	.c43f		ad 2b 03	lda $032b	                lda $032B
962	.c442		ed 2f 03	sbc $032f	                sbc $032F
963	.c445		10 e0		bpl $c427	                bpl LC427
964	.c447		60		rts		                rts

966	.c448						LC448:
967	.c448		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
968	.c44a		20 e6 c8	jsr $c8e6	                jsr prepareAABB
969	.c44d		80 d1		bra $c420	                bra LC420

971							;-------------------------------------------------------------------------
972							;
973							; VDU 12 (&0C) Clear text window [MasRef E.3-5]
974							;
975	.c44f						vdu12EntryPoint:
976	.c44f		a9 20		lda #$20	                lda #STATE.isVDU5
977	.c451		24 d0		bit $d0		                bit STATE
978	.c453		d0 bb		bne $c410	                bne jsrVDU30EntryPoint       ;taken if VDU 5 mode
979	.c455		a9 08		lda #$08	                lda #STATE.isTextWindow
980	.c457		24 d0		bit $d0		                bit STATE
981	.c459		d0 03		bne $c45e	                bne clearTextWindow                    ;taken if text window
982	.c45b		4c 66 c8	jmp $c866	                jmp clsFastPath

984							                ; Clear screen within text window
985							                ; -------------------------------
986	.c45e						clearTextWindow:
987	.c45e		20 08 c9	jsr $c908	                jsr copyTextWindowWidthInBytesToWorkspace28
988	.c461		ae 08 03	ldx $0308	                ldx vduv.textWindowLeft
989	.c464		8e 18 03	stx $0318	                stx vduv.textCursorXPosition
990	.c467		ae 0b 03	ldx $030b	                ldx vduv.textWindowTop
991	.c46a						clearTextWindowRowsLoop:
992	.c46a		8e 19 03	stx $0319	                stx vduv.textCursorYPosition
993	.c46d		20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
994	.c470		20 e8 ca	jsr $cae8	                jsr LCAE8
995	.c473		ae 19 03	ldx $0319	                ldx vduv.textCursorYPosition
996	.c476		ec 09 03	cpx $0309	                cpx vduv.textWindowBottom
997	.c479		e8		inx		                inx
998	.c47a		90 ee		bcc $c46a	                bcc clearTextWindowRowsLoop

1000							;-------------------------------------------------------------------------
1001							;
1002							; VDU 30 (&1E) Home cursor [MasRef E.3-36]
1003							;
1004	.c47c						vdu30EntryPoint:
1005							                ; pretend it's VDU 31,0,0
1006	.c47c		9c 23 03	stz $0323	                stz vduv.queueEnd-1
1007	.c47f		9c 22 03	stz $0322	                stz vduv.queueEnd-2

1009							;-------------------------------------------------------------------------
1010							;
1011							; VDU 31 (&1F) Tab cursor [MasRef E.3-36]
1012							;
1013	.c482						vdu31EntryPoint:
1014	.c482		ad 66 03	lda $0366	                lda vduv.cursorFlags
1015	.c485		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
1016	.c487		aa		tax		                tax
1017	.c488						LC488:
8	.c488		20 d2 e2	jsr $e2d2	                jsr testVDU5StateNonInlined
1019	.c48b		d0 42		bne $c4cf	                bne LC4CF                    ;taken if VDU 5
1020	.c48d		ad 18 03	lda $0318	                lda vduv.textCursorXPosition
1021	.c490		48		pha		                pha                          ;save old X pos
1022	.c491		ad 19 03	lda $0319	                lda vduv.textCursorYPosition
1023	.c494		48		pha		                pha                          ;save old Y pos
1024	.c495		ad 22 03	lda $0322	                lda vduv.queueEnd-2          ;X coordinate
1025	.c498		20 c7 c2	jsr $c2c7	                jsr setTextCursorXPositionWithCursorFlags
1026	.c49b		da		phx		                phx                          ;save true cursorFlags bits
1027	.c49c		8a		txa		                txa
1028	.c49d		49 08		eor #$08	                eor #vduv.cursorFlags.swapAxes ;cheekily do the other axis by just changing the cursor flags
1029	.c49f		aa		tax		                tax
1030	.c4a0		ad 23 03	lda $0323	                lda vduv.queueEnd-1          ;Y coordinate
1031	.c4a3		20 d7 cc	jsr $ccd7	                jsr LCCD7
1032	.c4a6		fa		plx		                plx                    ;restore true cursorFlags bits
1033	.c4a7		90 11		bcc $c4ba	                bcc LC4BA              ;taken if no scrolling required
1034	.c4a9		a9 01		lda #$01	                lda #vduv.cursorFlags.scrollProtect
1035	.c4ab		2c 66 03	bit $0366	                bit $0366
1036	.c4ae		f0 11		beq $c4c1	                beq LC4C1                 ;taken if scroll protect off

1038							                ; Wrap text cursor X.
1039	.c4b0		ad 22 03	lda $0322	                lda vduv.queueEnd-2       ;X coordinate
1040	.c4b3		3a		dec a		                dec a
1041	.c4b4		20 d7 cc	jsr $ccd7	                jsr LCCD7
1042	.c4b7		b0 08		bcs $c4c1	                bcs LC4C1
1043	.c4b9		38		sec		                sec
1044	.c4ba						LC4BA:
1045	.c4ba		6e 6c 03	ror $036c	                ror vduv.column81
1046	.c4bd		68		pla		                pla                          ;discard old Y pos
1047	.c4be		68		pla		                pla                          ;discard old X pos
1048	.c4bf		80 0b		bra $c4cc	                bra LC4CC

1050	.c4c1						LC4C1:
1051	.c4c1		68		pla		                pla
1052	.c4c2		8d 19 03	sta $0319	                sta vduv.textCursorYPosition ;restore old Y pos
1053	.c4c5		68		pla		                pla
1054	.c4c6		8d 18 03	sta $0318	                sta vduv.textCursorXPosition ;restore old X pos
1055	.c4c9		20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
1056	.c4cc						LC4CC:
1057	.c4cc		4c ed c6	jmp $c6ed	                jmp updateCRTCCursorAddress

1059	.c4cf						LC4CF:
1060	.c4cf		ad 22 03	lda $0322	                lda $0322
1061	.c4d2		20 e0 c1	jsr $c1e0	                jsr LC1E0
1062	.c4d5		8a		txa		                txa
1063	.c4d6		49 08		eor #$08	                eor #$08
1064	.c4d8		aa		tax		                tax
1065	.c4d9		ad 23 03	lda $0323	                lda $0323
1066	.c4dc		20 e0 c1	jsr $c1e0	                jsr LC1E0
1067	.c4df						LC4DF:
1068	.c4df		a0 10		ldy #$10	                ldy #$10
1069	.c4e1		20 1c c9	jsr $c91c	                jsr copyGraphicsCursorPixels
1070	.c4e4		a2 02		ldx #$02	                ldx #$02
1071	.c4e6		a0 02		ldy #$02	                ldy #$02
1072	.c4e8		20 fc c4	jsr $c4fc	                jsr LC4FC
1073	.c4eb		a2 00		ldx #$00	                ldx #$00
1074	.c4ed		a0 04		ldy #$04	                ldy #$04
1075	.c4ef		ad 61 03	lda $0361	                lda $0361
1076	.c4f2						LC4F2:
1077	.c4f2		88		dey		                dey
1078	.c4f3		4a		lsr a		                lsr a
1079	.c4f4		d0 fc		bne $c4f2	                bne LC4F2
1080	.c4f6		ad 56 03	lda $0356	                lda $0356
1081	.c4f9		f0 01		beq $c4fc	                beq LC4FC
1082	.c4fb		c8		iny		                iny
1083	.c4fc						LC4FC:
1084	.c4fc		1e 10 03	asl $0310,x	                asl $0310,x
1085	.c4ff		3e 11 03	rol $0311,x	                rol $0311,x
1086	.c502		88		dey		                dey
1087	.c503		d0 f7		bne $c4fc	                bne LC4FC
1088	.c505		38		sec		                sec
1089	.c506		20 0a c5	jsr $c50a	                jsr LC50A
1090	.c509		e8		inx		                inx
1091	.c50a						LC50A:
1092	.c50a		bd 10 03	lda $0310,x	                lda $0310,x
1093	.c50d		fd 0c 03	sbc $030c,x	                sbc $030C,x
1094	.c510		9d 10 03	sta $0310,x	                sta $0310,x
1095	.c513		60		rts		                rts

1097							;-------------------------------------------------------------------------
1098							;
1099							; VDU 14 (&0E) Page mode on [MasRef E.3-6]
1100							;
1101	.c514						vdu14EntryPoint:
1102	.c514		9c 69 02	stz $0269	                stz pagedModeCounter
1103	.c517		a9 91		lda #$91	                lda #$91

1105							;-------------------------------------------------------------------------
1106							;
1107							; VDU 21 (&15) Disable VDU driver [MasRef E.3-11]
1108							;
1109	.c519						vdu21EntryPoint:
1110	.c519		49 95		eor #$95	                eor #$95
1111	.c51b						LC51B:
1112	.c51b		04 d0		tsb $d0		                tsb STATE
1113	.c51d		60		rts		                rts

1115							;-------------------------------------------------------------------------
1116							;
1117							; VDU 4 (&04) Print at text cursor [MasRef E.3-2]
1118							;
1119	.c51e						vdu4EntryPoint:
1120	.c51e		ad 61 03	lda $0361	                lda $0361
1121	.c521		f0 09		beq $c52c	                beq LC52C
1122	.c523		20 50 cf	jsr $cf50	                jsr showCursor
1123	.c526		a9 2b		lda #$2b	                lda #$2B

1125							                ; fall through to vdu15EntryPoint

1127							;-------------------------------------------------------------------------
1128							;
1129							; VDU 15 (&0F) Page mode off [MasRef E.3-6]
1130							;
1131	.c528						vdu15EntryPoint:
1132	.c528		49 0b		eor #$0b	                eor #$0B
1133	.c52a		14 d0		trb $d0		                trb STATE
1134	.c52c						LC52C:
1135	.c52c		60		rts		                rts

1137							;-------------------------------------------------------------------------
1138							;
1139							; VDU 5 (&05) Print text at graphics cursor [MasRef E.3-3]
1140							;
1141	.c52d						vdu5EntryPoint:
1142	.c52d		ad 61 03	lda $0361	                lda $0361
1143	.c530		f0 fa		beq $c52c	                beq LC52C
1144	.c532		a9 20		lda #$20	                lda #$20
1145	.c534		20 53 cf	jsr $cf53	                jsr setCRTCRegister10
1146	.c537		80 e2		bra $c51b	                bra LC51B

1148							;-------------------------------------------------------------------------
1149							;
1150							; VDU 17 (&11) Define text colour [MasRef E.3-7]
1151							;
1152	.c539						vdu17EntryPoint:
1153	.c539		a0 00		ldy #$00	                ldy #$00
1154	.c53b		ad 23 03	lda $0323	                lda $0323
1155	.c53e		10 01		bpl $c541	                bpl LC541
1156	.c540		c8		iny		                iny
1157	.c541						LC541:
1158	.c541		2d 60 03	and $0360	                and $0360
1159	.c544		85 da		sta $da		                sta $DA
1160	.c546		ad 60 03	lda $0360	                lda $0360
1161	.c549		f0 18		beq $c563	                beq LC563
1162	.c54b		29 07		and #$07	                and #$07
1163	.c54d		18		clc		                clc
1164	.c54e		65 da		adc $da		                adc $DA
1165	.c550		aa		tax		                tax
1166	.c551		bd 4b e1	lda $e14b,x	                lda solidColoursTable-1,x
1167	.c554		99 57 03	sta $0357,y	                sta $0357,y
1168	.c557		ad 57 03	lda $0357	                lda $0357
1169	.c55a		49 ff		eor #$ff	                eor #$FF
1170	.c55c		85 d3		sta $d3		                sta ZEOR
1171	.c55e		4d 58 03	eor $0358	                eor $0358
1172	.c561		85 d2		sta $d2		                sta ZORA
1173	.c563						LC563:
1174	.c563		60		rts		                rts

1176							;-------------------------------------------------------------------------
1177							;
1178							; VDU 18 (&12) Define graphics colour [MasRef E.3-7]
1179							;
1180	.c564						vdu18EntryPoint:
1181	.c564		a0 00		ldy #$00	                ldy #$00                    ;assume setting foreground
1182	.c566		ad 23 03	lda $0323	                lda vduv.queueEnd-1         ;get colour
1183	.c569		10 01		bpl $c56c	                bpl +                     ;taken if setting foreground
1184	.c56b		c8		iny		                iny                       ;setting background
1185	.c56c						+
1186	.c56c		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne
1187	.c56f		99 6d 03	sta $036d,y	                sta vduv.foregroundGraphicsColour,y
1188	.c572		ad 22 03	lda $0322	                lda vduv.queueEnd-2          ;get GCOL mode
1189	.c575		99 5b 03	sta $035b,y	                sta vduv.foregroundGCOLMode,y
1190	.c578		29 f0		and #$f0	                and #$F0                     ;non-zero if ECF
1191	.c57a		99 6a 03	sta $036a,y	                sta vduv.isForegroundECF,y
1192	.c57d						initializeCurrentECFPatterns:
1193	.c57d		ad 5b 03	lda $035b	                lda vduv.foregroundGCOLMode
1194	.c580		ae 6d 03	ldx $036d	                ldx vduv.foregroundGraphicsColour
1195	.c583		a0 00		ldy #$00	                ldy #andy.fgECFPattern-andy.currentECFPatterns
1196	.c585		20 90 c5	jsr $c590	                jsr initializeCurrentECFPattern
1197	.c588		ad 5c 03	lda $035c	                lda vduv.backgroundGCOLMode
1198	.c58b		ae 6e 03	ldx $036e	                ldx vduv.backgroundGraphicsColour
1199	.c58e		a0 08		ldy #$08	                ldy #andy.bgECFPattern-andy.currentECFPatterns
1200	.c590						initializeCurrentECFPattern:
1201	.c590		29 f0		and #$f0	                and #$F0                     ;GCOL mode ECF bits
1202	.c592		d0 18		bne $c5ac	                bne initializeECFPatternFromPattern

1204	.c594						initializeECFPatternFromColour:
1205	.c594		86 da		stx $da		                stx ZTEMP+0                  ;colour low bits
1206	.c596		ad 60 03	lda $0360	                lda vduv.numberOfLogicalColoursMinusOne
1207	.c599		29 07		and #$07	                and #$07
1208	.c59b		18		clc		                clc
1209	.c59c		65 da		adc $da		                adc ZTEMP+0
1210	.c59e		aa		tax		                tax
1211							                ; use solid colour as ECF "pattern".
1212	.c59f		bd 4b e1	lda $e14b,x	                lda solidColoursTable-1,x
1213	.c5a2		a2 07		ldx #$07	                ldx #$07
1214	.c5a4						-
1215	.c5a4		99 20 88	sta $8820,y	                sta andy.fgECFPattern,y
1216	.c5a7		c8		iny		                iny
1217	.c5a8		ca		dex		                dex
1218	.c5a9		10 f9		bpl $c5a4	                bpl -
1219	.c5ab		60		rts		                rts

1221	.c5ac						initializeECFPatternFromPattern:
1222	.c5ac		4a		lsr a		                lsr a                        ;(index+1)*8
1223	.c5ad		aa		tax		                tax
1224	.c5ae		a9 07		lda #$07	                lda #$07
1225	.c5b0		85 da		sta $da		                sta ZTEMP+0
1226	.c5b2						-
1227	.c5b2		bd f8 87	lda $87f8,x	                lda andy.ecfPatterns-8,x     ;-8 due to index+1 above
1228	.c5b5		99 20 88	sta $8820,y	                sta andy.fgECFPattern,y
1229	.c5b8		e8		inx		                inx
1230	.c5b9		c8		iny		                iny
1231	.c5ba		c6 da		dec $da		                dec ZTEMP+0
1232	.c5bc		10 f4		bpl $c5b2	                bpl -
1233	.c5be		60		rts		                rts

1235							;-------------------------------------------------------------------------
1236							;
1237							; VDU 20 (&14) Restore default logical colours [MasRef E.3-10]
1238							;
1239	.c5bf						setBackgroundTextColourForTeletext:
1240	.c5bf		a9 20		lda #$20	                lda #' '
1241	.c5c1		8d 58 03	sta $0358	                sta vduv.backgroundTextColour
1242	.c5c4		60		rts		                rts

1244	.c5c5						vdu20EntryPoint:
1245	.c5c5		a2 05		ldx #$05	                ldx #$05
1246	.c5c7						-
1247	.c5c7		9e 57 03	stz $0357,x	                stz vduv.foregroundTextColour,x
1248	.c5ca		ca		dex		                dex
1249	.c5cb		10 fa		bpl $c5c7	                bpl -
1250	.c5cd		9c 6e 03	stz $036e	                stz vduv.backgroundGraphicsColour
1251	.c5d0		9c 6b 03	stz $036b	                stz vduv.isBackgroundECF
1252	.c5d3		a9 ff		lda #$ff	                lda #%11111111
1253	.c5d5		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
1254	.c5d8		f0 e5		beq $c5bf	                beq setBackgroundTextColourForTeletext
1255	.c5da		e0 0f		cpx #$0f	                cpx #$0F
1256	.c5dc		d0 02		bne $c5e0	                bne +                        ;taken unless MODE 2
1257	.c5de		a9 3f		lda #$3f	                lda #%00111111               ;MODE 2 default foreground colour is 7
1258	.c5e0						+
1259	.c5e0		8d 57 03	sta $0357	                sta vduv.foregroundTextColour
1260	.c5e3		49 ff		eor #$ff	                eor #$FF
1261	.c5e5		85 d2		sta $d2		                sta ZORA
1262	.c5e7		85 d3		sta $d3		                sta ZEOR
1263	.c5e9		8a		txa		                txa
1264	.c5ea		29 07		and #$07	                and #$07
1265	.c5ec		8d 6d 03	sta $036d	                sta vduv.foregroundGraphicsColour
1266	.c5ef		9c 6a 03	stz $036a	                stz vduv.isForegroundECF
1267	.c5f2		da		phx		                phx                          ;save numberOfLogicalColoursMinusOne
1268	.c5f3		20 7d c5	jsr $c57d	                jsr initializeCurrentECFPatterns
1269	.c5f6		fa		plx		                plx                          ;restore numberOfLogicalColoursMinusOne
1270	.c5f7		8e 1f 03	stx $031f	                stx vduv.queueEnd-5          ;Prepare VDU19,<max logical colour>
1271	.c5fa		e0 03		cpx #$03	                cpx #$03
1272	.c5fc		f0 11		beq $c60f	                beq reset4Colours            ;taken if MODE 1/5
1273	.c5fe		90 20		bcc $c620	                bcc reset2Colours            ;taken if MODE 0/3/4/6
1274	.c600						reset16Colours:
1275	.c600		8e 20 03	stx $0320	                stx vduv.queueEnd-4          ;start with VDU19,15,15,_,_,_
1276	.c603						-
1277	.c603		20 2d c6	jsr $c62d	                jsr vdu19EntryPoint
1278	.c606		ce 20 03	dec $0320	                dec vduv.queueEnd-4
1279	.c609		ce 1f 03	dec $031f	                dec vduv.queueEnd-5
1280	.c60c		10 f5		bpl $c603	                bpl -
1281	.c60e		60		rts		                rts

1283	.c60f						reset4Colours:
1284	.c60f		a2 07		ldx #$07	                ldx #$07
1285	.c611		8e 20 03	stx $0320	                stx vduv.queueEnd-4          ;start with VDU19,3,7,_,_,_
1286	.c614						-
1287	.c614		20 2d c6	jsr $c62d	                jsr vdu19EntryPoint          ;2,3, then 1,1, then 0,0
1288	.c617		4e 20 03	lsr $0320	                lsr vduv.queueEnd-4
1289	.c61a		ce 1f 03	dec $031f	                dec vduv.queueEnd-5
1290	.c61d		10 f5		bpl $c614	                bpl -
1291	.c61f		60		rts		                rts

1293	.c620						reset2Colours:
1294	.c620		a2 07		ldx #$07	                ldx #$07
1295	.c622		20 2a c6	jsr $c62a	                jsr +                        ;VDU19,1,7,_,_,_
1296	.c625		a2 00		ldx #$00	                ldx #$00
1297	.c627		9c 1f 03	stz $031f	                stz vduv.queueEnd-5          ;VDU19,0,0,_,_,_
1298	.c62a						+
1299	.c62a		8e 20 03	stx $0320	                stx vduv.queueEnd-4          ;VDU19,N,X,_,_,_

1301							                ; fall through to VDU19

1303							;-------------------------------------------------------------------------
1304							;
1305							; VDU 19 (&13) Define logical colour [MasRef E.3-9]
1306							;
1307	.c62d						vdu19EntryPoint:
1308	.c62d		08		php		                php
1309	.c62e		78		sei		                sei
1310	.c62f		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get logical colour
1311	.c632		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne ;apply logical colour limit
1312	.c635		aa		tax		                tax                        ;X = clamped logical colour
1313	.c636		ad 20 03	lda $0320	                lda vduv.queueEnd-4        ;get physical colour
1314	.c639						LC639:
1315	.c639		29 0f		and #$0f	                and #$0F                     ;apply physical colour limit
1316	.c63b		9d 6f 03	sta $036f,x	                sta vduv.currentPalette,x    ;update palette
1317	.c63e		a8		tay		                tay                          ;Y = physical colour
1318	.c63f		ad 60 03	lda $0360	                lda vduv.numberOfLogicalColoursMinusOne
1319	.c642		85 fa		sta $fa		                sta SEIWKA
1320	.c644		c9 03		cmp #$03	                cmp #$03 ;Z=1 C=1 if 4 colour; Z=0 C=1 if 16 colour; Z=0 C=0 if 2 colour
1321	.c646		08		php		                php      ;save flags
1322	.c647		8a		txa		                txa                          ;A = logical colour

1324							                ;put the logical colour value in the top 1, 2 or 4
1325							                ;bits of SEIWKA, depending on the colour depth.
1326							                ;
1327							                ; 2 colours: turn %0000000a into %a0000000
1328							                ; 4 colours: turn %000000ab into %ab000000
1329							                ;16 colours: turn %0000abcd into %abcd0000
1330	.c648						-
1331	.c648		4a		lsr a		                lsr a
1332	.c649		66 fa		ror $fa		                ror SEIWKA
1333	.c64b		b0 fb		bcs $c648	                bcs -
1334	.c64d		06 fa		asl $fa		                asl SEIWKA

1336	.c64f		98		tya		                tya                          ;A = physical colour
1337	.c650		05 fa		ora $fa		                ora SEIWKA                   ;mix in logical colour
1338	.c652		aa		tax		                tax                          ;X = VPALETTE value
1339	.c653		a0 f0		ldy #$f0	                ldy #$F0 ;counts up to zero - counter for setting
1340							                         ;multiple logical colours [AUG p380]
1341	.c655						LC655:
1342	.c655		28		plp		                plp                          ;restore flags
1343	.c656		08		php		                php                          ;save flags
1344	.c657		d0 03		bne $c65c	                bne +                     ;taken if 2 colour/16 colour
1345	.c659		20 6f c6	jsr $c66f	                jsr fixUpVPALETTEFor4Colours
1346	.c65c						+
1347	.c65c		20 61 f2	jsr $f261	                jsr writeVPALETTE
1348	.c65f		18		clc		                clc
1349	.c660		98		tya		                tya
1350	.c661		6d 60 03	adc $0360	                adc vduv.numberOfLogicalColoursMinusOne
1351	.c664		a8		tay		                tay
1352	.c665		8a		txa		                txa
1353	.c666		69 10		adc #$10	                adc #$10                     ;next logical colour
1354	.c668		aa		tax		                tax
1355	.c669		c8		iny		                iny                          ;Y+=numberOfLogicalColours
1356	.c66a		d0 e9		bne $c655	                bne LC655                    ;all logical colours set once zero
1357	.c66c		28		plp		                plp
1358	.c66d		28		plp		                plp
1359	.c66e		60		rts		                rts

1361	.c66f						fixUpVPALETTEFor4Colours:
1362	.c66f		2a		rol a		                rol a                        ;A BCDabcd1
1363	.c670		85 da		sta $da		                sta ZTEMP+0                  ;  BCDabcd1
1364	.c672		2a		rol a		                rol a                        ;B CDabcd1A
1365	.c673		2a		rol a		                rol a                        ;C Dabcd1AB
1366	.c674		08		php		                php                          ;C
1367	.c675		26 da		rol $da		                rol ZTEMP+0                  ;B CDabcd1C
1368	.c677		6a		ror a		                ror a                        ;B BDabcd1A
1369	.c678		28		plp		                plp                          ;C BDabcd1A
1370	.c679		6a		ror a		                ror a                        ;A CBDabcd1
1371	.c67a		6a		ror a		                ror a                        ;1 ACBDabcd
1372	.c67b		60		rts		                rts                          ;

1374							;-------------------------------------------------------------------------
1375							;
1376							; VDU 23 (&17) Various functions [MasRef E.3-12]
1377							;
1378	.c67c						vdu23EntryPoint:
1379	.c67c		ad 1b 03	lda $031b	                lda vduv.queueEnd-9           ;get VDU 23 code
1380	.c67f		c9 20		cmp #$20	                cmp #$20
1381	.c681		90 0e		bcc $c691	                bcc LC691         ;branch taken if <32 - i.e., special

1383							                ; copy the 8 bytes of character definition to the
1384							                ; appropriate place.
1385	.c683		20 2c e2	jsr $e22c	                jsr getSoftCharacterDefinitionAddress
1386	.c686		a0 07		ldy #$07	                ldy #$07
1387	.c688						LC688:
1388	.c688		b9 1c 03	lda $031c,y	                lda vduv.queueEnd-8,y
1389	.c68b		91 de		sta ($de),y	                sta ($DE),y
1390	.c68d		88		dey		                dey
1391	.c68e		10 f8		bpl $c688	                bpl LC688
1392	.c690		60		rts		                rts

1394	.c691						LC691:
1395	.c691		0a		asl a		                asl a
1396	.c692		aa		tax		                tax
1397	.c693		4a		lsr a		                lsr a
1398	.c694		c9 11		cmp #$11	                cmp #$11
1399	.c696		b0 0f		bcs $c6a7	                bcs callVDUV    ;call with C=1 - invalid code [MasRef
1400							                                ;E.3-19]
1401	.c698		7c 69 e0	jmp ($e069,x)	                jmp (vdu23EntryPointTable,x)

1403							;-------------------------------------------------------------------------
1404							;
1405							; VDU 25 (&19) PLOT commands [MasRef E.3-21]
1406							;
1407	.c69b						vdu25EntryPoint:
1408	.c69b		ae 61 03	ldx $0361	                ldx vduv.pixelsPerByteMinusOne
1409	.c69e		f0 03		beq $c6a3	                beq callVDUVForPLOT          ;non-graphics PLOT
1410	.c6a0		4c 46 d1	jmp $d146	                jmp handlePLOT

1412							;-------------------------------------------------------------------------
1413							;
1414							; Call VDUV for a PLOT call, either to handle non-graphics PLOT
1415							; [MasRef E.3-21] or PLOT 240-255 [MasRef E.3-34].
1416							;
1417	.c6a3						callVDUVForPLOT:
1418	.c6a3		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT code
1419	.c6a6		18		clc		                clc ;call with C=0 - non-graphics PLOT [MasRef E.3-21]

1421							;-------------------------------------------------------------------------
1422							;
1423							; Call VDUV.
1424							;
1425	.c6a7						callVDUV:
1427	.c6a7		6c 26 02	jmp ($0226)	                jmp (VDUV)

1432							;-------------------------------------------------------------------------
1433							;
1434							; VDU 26 (&1A) Restore default windows [MasRef E.3-34]
1435							;
1436	.c6aa						vdu26EntryPoint:
1437	.c6aa		a2 2c		ldx #$2c	                ldx #VDUVariables.workspace._2C
1438	.c6ac						-
1439	.c6ac		9e 00 03	stz $0300,x	                stz vduv,x                    ;reset workspace
1440	.c6af		ca		dex		                dex
1441	.c6b0		10 fa		bpl $c6ac	                bpl -

1443	.c6b2		20 a2 e2	jsr $e2a2	                jsr getDefaultBoundsForCurrentScreenMODE
1444	.c6b5		8e 0a 03	stx $030a	                stx vduv.textWindowRight
1445	.c6b8		8c 09 03	sty $0309	                sty vduv.textWindowBottom

1447	.c6bb		8a		txa		                txa
1448	.c6bc		20 80 c7	jsr $c780	                jsr setTextWindowWidthInBytes

1450							                ; Set up the VDU queue as if VDU 24,0;0;1279;1023;,
1451							                ; then call the VDU 24 entry point.

1453							                ; 1c - ll - $00
1454							                ; 1d - lh - $00
1455							                ; 1e - tl - $00
1456							                ; 1f - th - $00
1457							                ; 20 - rl - $ff
1458							                ; 21 - rh - $04
1459							                ; 22 - tl - $ff
1460							                ; 23 - th - $03

1462	.c6bf		a0 03		ldy #$03	                ldy #$03
1463	.c6c1		8c 23 03	sty $0323	                sty $0323
1464	.c6c4		c8		iny		                iny
1465	.c6c5		8c 21 03	sty $0321	                sty $0321
1466	.c6c8		ce 22 03	dec $0322	                dec $0322
1467	.c6cb		ce 20 03	dec $0320	                dec $0320
1468	.c6ce		20 1f c7	jsr $c71f	                jsr vdu24EntryPoint

1470	.c6d1		a9 08		lda #$08	                lda #STATE.isTextWindow
1471	.c6d3		14 d0		trb $d0		                trb STATE                    ;reset isTextWindow

1473	.c6d5		4c 7c c4	jmp $c47c	                jmp vdu30EntryPoint          ;reset text cursor

1475							;-------------------------------------------------------------------------
1476							;
1477							; Update CRTC cursor address to reflect text cursor position.
1478							;
1479	.c6d8						updateCRTCTextCursor:
1480	.c6d8		20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
1481	.c6db		80 10		bra $c6ed	                bra updateCRTCCursorAddress

1483							;-------------------------------------------------------------------------

1485	.c6dd						setCRTCCursorAddress:
1486	.c6dd		8e 4a 03	stx $034a	                stx vduv.textCursorCRTCAddress+0
1487	.c6e0		8d 4b 03	sta $034b	                sta vduv.textCursorCRTCAddress+1
1488	.c6e3		10 04		bpl $c6e9	                bpl +
1489	.c6e5		38		sec		                sec
1490	.c6e6		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte
1491	.c6e9						+
1492	.c6e9		86 d8		stx $d8		                stx ZMEMT+0
1493	.c6eb		85 d9		sta $d9		                sta ZMEMT+1

1495							;-------------------------------------------------------------------------
1496							;
1497							;
1498	.c6ed						updateCRTCCursorAddress:
1504	.c6ed		ae 4a 03	ldx $034a	                ldx vduv.textCursorCRTCAddress+0
1505	.c6f0		ad 4b 03	lda $034b	                lda vduv.textCursorCRTCAddress+1
1506	.c6f3		a0 0e		ldy #$0e	                ldy #$0E

1508							;-------------------------------------------------------------------------
1509							;
1510							; Set CRTC address - cursor, or screen start.
1511							;
1512							; entry:
1513							;
1514							; A (msb), X (msb) = 6502 address to set
1515							;
1516							; Y = first CRTC register to set
1517							;
1519							; C = 1 if in Mode 7
1521							;
1522	.c6f5						setCRTCAddress:
1524	.c6f5		48		pha		                pha                          ;save screen address MSB
1525	.c6f6		ad 55 03	lda $0355	                lda vduv.currentScreenMODE
1526	.c6f9		c9 07		cmp #$07	                cmp #$07
1527	.c6fb		68		pla		                pla                        ;restore screen address MSB
1529	.c6fc		b0 0f		bcs $c70d	                bcs adjustAddressForMODE7
1530	.c6fe		86 da		stx $da		                stx ZTEMP+0
1531	.c700		4a		lsr a		                lsr a
1532	.c701		66 da		ror $da		                ror ZTEMP+0                  ;/2
1533	.c703		4a		lsr a		                lsr a
1534	.c704		66 da		ror $da		                ror ZTEMP+0                  ;/4
1535	.c706		4a		lsr a		                lsr a
1536	.c707		66 da		ror $da		                ror ZTEMP+0                  ;/8
1537	.c709		a6 da		ldx $da		                ldx ZTEMP+0
1538	.c70b		80 04		bra $c711	                bra setCRTCAddressRegisters

1540	.c70d						adjustAddressForMODE7:
1541							                ; C=1
1548	.c70d		e9 74		sbc #$74	                sbc #$74                 ;adjust for Mode 7 addressing
1549	.c70f		49 20		eor #$20	                eor #$20                 ;adjust for Mode 7 addressing
1551	.c711						setCRTCAddressRegisters:
1552	.c711		8c 00 fe	sty $fe00	                sty CRTC+0
1553	.c714		8d 01 fe	sta $fe01	                sta CRTC+1
1554	.c717		c8		iny		                iny
1555	.c718		8c 00 fe	sty $fe00	                sty CRTC+0
1556	.c71b		8e 01 fe	stx $fe01	                stx CRTC+1
1557	.c71e		60		rts		                rts

1559							;-------------------------------------------------------------------------
1560							;
1561							; VDU 24 (&18) Define graphics window [MasRef E.3-21]
1562							;
1563							; VDU queue:
1564							;
1565							; -8 = <left
1566							; -7 = >left
1567							; -6 = <bottom
1568							; -5 = >bottom
1569							; -4 = <right
1570							; -3 = >right
1571							; -2 = <top
1572							; -1 = >top
1573							;
1574	.c71f						vdu24EntryPoint:
1575	.c71f		20 79 c7	jsr $c779	                jsr LC779

1577	.c722		a2 02		ldx #$02	                ldx #2
1578	.c724						-
1579	.c724		38		sec		                sec

1581							                ; <height when X=2, then <width when X=0
1582	.c725		bd 20 03	lda $0320,x	                lda vduv.queueEnd-4+0,x
1583	.c728		fd 1c 03	sbc $031c,x	                sbc vduv.queueEnd-8+0,x
1584	.c72b		9d 2c 03	sta $032c,x	                sta vduv.workspace._2C+0,x

1586							                ; >height when X=2, then >width when X=0
1587	.c72e		bd 21 03	lda $0321,x	                lda vduv.queueEnd-4+1,x
1588	.c731		fd 1d 03	sbc $031d,x	                sbc vduv.queueEnd-8+1,x
1589	.c734		9d 2d 03	sta $032d,x	                sta vduv.workspace._2C+1,x

1591	.c737		ca		dex		                dex
1592	.c738		ca		dex		                dex
1593	.c739		10 e9		bpl $c724	                bpl -

1595	.c73b		0d 2f 03	ora $032f	                ora vduv.workspace._2C+3     ;A=>width|>height
1596	.c73e		30 39		bmi $c779	                bmi LC779 ;taken if either dimension negative - window invalid
1597	.c740		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4 ;left bottom
1598	.c742		20 de d1	jsr $d1de	                jsr eigabsEntryPoint         ;convert to pixels
1599	.c745		a2 1c		ldx #$1c	                ldx #VDUVariables.queueEnd-8 ;right top
1600	.c747		20 de d1	jsr $d1de	                jsr eigabsEntryPoint         ;convert to pixels
1601	.c74a		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;>bottom
1602	.c74d		0d 1d 03	ora $031d	                ora vduv.queueEnd-7          ;>left
1603	.c750		30 27		bmi $c779	                bmi LC779 ;taken if either bottom or left negative - window invalid
1604	.c752		ad 23 03	lda $0323	                lda vduv.queueEnd-1          ;>top
1605	.c755		d0 22		bne $c779	                bne LC779          ;taken if top>=256 - window invalid
1606	.c757		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
1607	.c75a		ad 21 03	lda $0321	                lda vduv.queueEnd-3          ;>right
1608	.c75d		85 da		sta $da		                sta ZTEMP+0
1609	.c75f		ad 20 03	lda $0320	                lda vduv.queueEnd-4          ;<right
1610	.c762		46 da		lsr $da		                lsr ZTEMP+0                  ;>(right/2)
1611	.c764		6a		ror a		                ror a                        ;<(right/2)
1612	.c765		46 da		lsr $da		                lsr ZTEMP+0                  ;>(right/4)

1614							                ; 639>>2=159 - so any valid pixel X in any mode will
1615							                ; have an MSB of 0 after being shifted right 2.
1616	.c767		d0 10		bne $c779	                bne LC779 ;taken if right edge definitely off screen - window invalid
1617	.c769		6a		ror a		                ror a     ;<(right/4)
1618	.c76a		4a		lsr a		                lsr a     ;<(right/8)
1619	.c76b		dd 09 e1	cmp $e109,x	                cmp modeMaxColumn,x
1620	.c76e		f0 02		beq $c772	                beq LC772                    ;taken if right edge just on screen
1621	.c770		10 07		bpl $c779	                bpl LC779 ;taken if right edge off screen - window definitely invalid
1622	.c772						LC772:
1623	.c772		a0 00		ldy #$00	                ldy #VDUVariables.graphicsWindowPixelsLeft
1624	.c774		a2 1c		ldx #$1c	                ldx #VDUVariables.queueEnd-8
1625	.c776		20 04 c9	jsr $c904	                jsr copyEightBytesWithinVDUVariables
1626	.c779						LC779:
1627	.c779		a2 10		ldx #$10	                ldx #VDUVariables.graphicsCursorPositionX
1628	.c77b		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
1629	.c77d		4c ba e2	jmp $e2ba	                jmp exchangeFourVDUBytes

1631							;-------------------------------------------------------------------------
1632							;
1633							; Call getBytesPerInclusiveTextRow, and store the result in the
1634							; textWindowWidthInBytes VDU variable.
1635							;
1636	.c780						setTextWindowWidthInBytes:
1637	.c780		20 3b c9	jsr $c93b	                jsr getBytesPerInclusiveTextRow
1638	.c783		8d 4c 03	sta $034c	                sta vduv.textWindowWidthInBytes+0
1639	.c786		8e 4d 03	stx $034d	                stx vduv.textWindowWidthInBytes+1
1640	.c789		60		rts		                rts

1642							;-------------------------------------------------------------------------
1643							;
1644							; VDU 29 (&1D) Define graphics origin [MasRef E.3-35]
1645							;
1646	.c78a						vdu29EntryPoint:
1647	.c78a		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
1648	.c78c		a0 0c		ldy #$0c	                ldy #VDUVariables.graphicsWindowOriginX
1649	.c78e		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
1650	.c791		4c df c4	jmp $c4df	                jmp LC4DF

1652							;-------------------------------------------------------------------------
1653							;
1654							; VDU 22 (&16) Select screen mode [MasRef E.3-11]
1655							;
1656	.c794						vdu22EntryPoint:
1657	.c794		ad 23 03	lda $0323	                lda vduv.queueEnd-1          ;get MODE number
1658	.c797		80 23		bra $c7bc	                bra setMODE

1660							;-------------------------------------------------------------------------
1661							;
1662	.c799						setStartupMODE:
1666	.c799		85 da		sta $da		                sta ZTEMP+0                  ;save MODE
1667	.c79b		a5 f4		lda $f4		                lda $F4
1668	.c79d		48		pha		                pha
1669	.c79e		09 80		ora #$80	                ora #$80                     ;page in ANDY
1670	.c7a0		20 92 e5	jsr $e592	                jsr selectROMA
1671	.c7a3		20 aa c7	jsr $c7aa	                jsr +
1672	.c7a6		68		pla		                pla
1673	.c7a7		4c 92 e5	jmp $e592	                jmp selectROMA               ;restore old ROM

1675	.c7aa						+
1676							                ; TODO but what of the reserved byte here?
1677	.c7aa		a2 7f		ldx #$7f	                ldx #size(VDUVariables)-1
1678	.c7ac		64 d0		stz $d0		                stz STATE
1679	.c7ae		ad 66 03	lda $0366	                lda vduv.cursorFlags
1680	.c7b1						-
1681	.c7b1		9e ff 02	stz $02ff,x	                stz vduv-1,x
1682	.c7b4		ca		dex		                dex
1683	.c7b5		d0 fa		bne $c7b1	                bne -
1684	.c7b7		8d 66 03	sta $0366	                sta vduv.cursorFlags
1685	.c7ba		a5 da		lda $da		                lda ZTEMP                    ;restore MODE

1687							                ; fall through to setMODE

1689							;-------------------------------------------------------------------------
1690							;
1691							;
1692							;
1693	.c7bc						setMODE:
1694	.c7bc		9c 8a 02	stz $028a	                stz vduDriverMemory
1695	.c7bf		9c 8b 02	stz $028b	                stz displayMemory
1696	.c7c2		a8		tay		                tay                          ;Y=mode
1697	.c7c3		30 10		bmi $c7d5	                bmi setShadowMODE
1698	.c7c5		ae 7f 02	ldx $027f	                ldx shadowRAMState
1699	.c7c8		f0 0b		beq $c7d5	                beq setShadowMODE
1700	.c7ca		a9 10		lda #$10	                lda #STATE.isShadowMode
1701	.c7cc		14 d0		trb $d0		                trb STATE
1702	.c7ce		a9 03		lda #$03	                lda #ACCCON.D|ACCCON.E
1703	.c7d0		1c 34 fe	trb $fe34	                trb ACCCON ;display main RAM, VDU code accesses main RAM
1704	.c7d3		80 09		bra $c7de	                bra +

1706	.c7d5						setShadowMODE:
1707	.c7d5		a9 10		lda #$10	                lda #STATE.isShadowMode
1708	.c7d7		04 d0		tsb $d0		                tsb STATE
1709	.c7d9		a9 03		lda #$03	                lda #ACCCON.D|ACCCON.E
1710	.c7db		0c 34 fe	tsb $fe34	                tsb ACCCON ;display shadow RAM, VDU code accesses shadow RAM
1711	.c7de						+
1712	.c7de		98		tya		                tya                          ;A=mode
1713	.c7df		29 07		and #$07	                and #$07                     ;get MODE 0-7
1714	.c7e1		aa		tax		                tax                          ;X=MODE 0-7
1715	.c7e2		8e 55 03	stx $0355	                stx vduv.currentScreenMODE
1716	.c7e5		bd 3c e1	lda $e13c,x	                lda numberOfLogicalColoursMinusOneForMODE,x
1717	.c7e8		8d 60 03	sta $0360	                sta vduv.numberOfLogicalColoursMinusOne
1718	.c7eb		bd 19 e1	lda $e119,x	                lda bytesPerCharacterForMODE,x
1719	.c7ee		8d 4f 03	sta $034f	                sta vduv.bytesPerCharacter
1720	.c7f1		bd 62 e1	lda $e162,x	                lda pixelsPerByteMinusOneForMODE,x
1721	.c7f4		8d 61 03	sta $0361	                sta vduv.pixelsPerByteMinusOne
1722	.c7f7		d0 02		bne $c7fb	                bne +                        ;taken if graphics mode
1723	.c7f9		a9 07		lda #$07	                lda #$07                     ;assume 8 px/byte for non-graphics modes
1724	.c7fb						+
1725	.c7fb		0a		asl a		                asl a            ;convert to pixelMasks index for rightmost pixel
1726	.c7fc		a8		tay		                tay
1727	.c7fd		b9 2e e1	lda $e12e,y	                lda pixelMasks-1,y
1728	.c800		8d 63 03	sta $0363	                sta vduv.colourMaskRight
1729	.c803						-
1730	.c803		0a		asl a		                asl a
1731	.c804		10 fd		bpl $c803	                bpl -   ;keep shifting until leftmost pixel mask found
1732	.c806		8d 62 03	sta $0362	                sta vduv.colourMaskLeft
1733	.c809		bc 68 e1	ldy $e168,x	                ldy screenMODEGroupForMODE,x
1734	.c80c		8c 56 03	sty $0356	                sty vduv.currentScreenMODEGroup
1735	.c80f		b9 74 e1	lda $e174,y	                lda latchBit4ForScreenMODEGroup,y
1736	.c812		08		php		                php
1737	.c813		78		sei		                sei
1738	.c814		8d 40 fe	sta $fe40	                sta systemVIA.orb
1739	.c817		b9 70 e1	lda $e170,y	                lda latchBit5ForScreenMODEGroup,y
1740	.c81a		8d 40 fe	sta $fe40	                sta systemVIA.orb
1741	.c81d		28		plp		                plp
1742	.c81e		b9 79 e1	lda $e179,y	                lda screenSizeHighByteForScreenMODEGroup,y
1743	.c821		8d 54 03	sta $0354	                sta vduv.screenSizeHighByte
1744	.c824		b9 7e e1	lda $e17e,y	                lda startScreenAddressHighByteForScreenMODEGroup,y
1745	.c827		8d 4e 03	sta $034e	                sta vduv.startScreenAddressHighByte
1746	.c82a		a9 ee		lda #$ee	                lda #STATE.isVDU21|STATE.isCursorEditing|STATE.isVDU5|STATE.isTextWindow|STATE.isPagedScrolling|STATE.isScrollingDisabled
1747	.c82c		14 d0		trb $d0		                trb STATE
1748	.c82e		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
1749	.c831		bd 11 e1	lda $e111,x	                lda vcontrolForScreenMODE,x
1750	.c834		20 50 f2	jsr $f250	                jsr setVCONTROL
1751	.c837		08		php		                php
1752	.c838		78		sei		                sei
1753	.c839		be 83 e1	ldx $e183,y	                ldx crtcRegisterLastIndexForScreenMODEGroup,y
1754	.c83c		a0 0b		ldy #$0b	                ldy #$0B
1755	.c83e						-
1756	.c83e		bd 88 e1	lda $e188,x	                lda crtcRegisterValues,x
1757	.c841		20 01 cf	jsr $cf01	                jsr setCRTCRegister
1758	.c844		ca		dex		                dex
1759	.c845		88		dey		                dey
1760	.c846		10 f6		bpl $c83e	                bpl -
1761	.c848		28		plp		                plp
1762	.c849		20 c5 c5	jsr $c5c5	                jsr vdu20EntryPoint
1763	.c84c		20 6d cf	jsr $cf6d	                jsr vdu23_11_EntryPoint
1764	.c84f		a9 aa		lda #$aa	                lda #%10101010
1765	.c851		8d 67 03	sta $0367	                sta vduv.dotPattern
1766	.c854		8d 68 03	sta $0368	                sta vduv.dotPatternState
1767	.c857		20 aa c6	jsr $c6aa	                jsr vdu26EntryPoint
1768	.c85a		ad 4c 03	lda $034c	                lda vduv.textWindowWidthInBytes+0
1769	.c85d		ae 4d 03	ldx $034d	                ldx vduv.textWindowWidthInBytes+1
1770	.c860		8d 52 03	sta $0352	                sta vduv.bytesPerCharacterRow+0
1771	.c863		8e 53 03	stx $0353	                stx vduv.bytesPerCharacterRow+1

1773							                ; Do a fast hardware CLS of the whole screen
1774							                ; ------------------------------------------
1775	.c866						clsFastPath:
1776	.c866		a2 00		ldx #$00	                ldx #$00
1777	.c868		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
1778	.c86b		9c 50 03	stz $0350	                stz vduv.screenTopLeftAddress+0
1779	.c86e		8d 51 03	sta $0351	                sta vduv.screenTopLeftAddress+1
1780	.c871		20 dd c6	jsr $c6dd	                jsr setCRTCCursorAddress
1781	.c874		a0 0c		ldy #$0c	                ldy #$0C
1782	.c876		20 11 c7	jsr $c711	                jsr setCRTCAddressRegisters
1783	.c879		9c 69 02	stz $0269	                stz pagedModeCounter
1784	.c87c		38		sec		                sec
1785	.c87d		a9 80		lda #$80	                lda #$80
1786	.c87f		ed 4e 03	sbc $034e	                sbc vduv.startScreenAddressHighByte
1787	.c882		aa		tax		                tax
1788	.c883		a0 00		ldy #$00	                ldy #$00
1789	.c885		20 84 cb	jsr $cb84	                jsr clearTextMemory
1790	.c888		4c 7c c4	jmp $c47c	                jmp vdu30EntryPoint

1792	.c88b						LC88B:
1793	.c88b		20 cf c8	jsr $c8cf	                jsr LC8CF                    ; Clear paged mode counter
1794	.c88e						LC88E:
1795	.c88e		20 30 f2	jsr $f230	                jsr osbyte76    ; Call KEYV to test Shift & Ctrl keys
1796	.c891		90 02		bcc $c895	                bcc LC895                    ; Ctrl not pressed, exit loop
1797	.c893		30 f6		bmi $c88b	                bmi LC88B                    ; Shift pressed, loop back
1798	.c895						LC895:
1799	.c895		a5 d0		lda $d0		                lda STATE
1800	.c897		49 04		eor #$04	                eor #STATE.isPagedScrolling
1801	.c899		29 46		and #$46	                and #STATE.isCursorEditing|STATE.isPagedScrolling|STATE.isScrollingDisabled;
1802	.c89b		d0 39		bne $c8d6	                bne LC8D6
1803	.c89d		20 d7 c8	jsr $c8d7	                jsr LC8D7
1804	.c8a0		b9 18 03	lda $0318,y	                lda vduv.textCursorXPosition,y
1805	.c8a3		dd 08 03	cmp $0308,x	                cmp vduv.textWindowLeft,x
1806	.c8a6		d0 2b		bne $c8d3	                bne LC8D3
1810	.c8a8		38		sec		                sec
1811	.c8a9		c8		iny		                iny
1812	.c8aa		88		dey		                dey
1814	.c8ab		d0 08		bne $c8b5	                bne LC8B5
1815	.c8ad		ad 0a 03	lda $030a	                lda vduv.textWindowRight
1816	.c8b0		ed 08 03	sbc $0308	                sbc vduv.textWindowLeft
1817	.c8b3		80 06		bra $c8bb	                bra LC8BB

1819	.c8b5						LC8B5:
1820	.c8b5		ad 09 03	lda $0309	                lda vduv.textWindowBottom
1821	.c8b8		ed 0b 03	sbc $030b	                sbc vduv.textWindowTop
1822	.c8bb						LC8BB:
1823	.c8bb		48		pha		                pha
1824	.c8bc		4a		lsr a		                lsr a
1825	.c8bd		4a		lsr a		                lsr a
1826	.c8be		85 da		sta $da		                sta ZTEMP+0
1827	.c8c0		38		sec		                sec
1828	.c8c1		68		pla		                pla
1829	.c8c2		e5 da		sbc $da		                sbc ZTEMP+0
1830	.c8c4		cd 69 02	cmp $0269	                cmp pagedModeCounter
1831	.c8c7		b0 0a		bcs $c8d3	                bcs LC8D3
1832	.c8c9						LC8C9:
1833	.c8c9		20 30 f2	jsr $f230	                jsr osbyte76
1834	.c8cc		38		sec		                sec
1835	.c8cd		10 fa		bpl $c8c9	                bpl LC8C9

1837	.c8cf						LC8CF:
1838	.c8cf		9c 69 02	stz $0269	                stz pagedModeCounter        ; Clear paged mode counter
1840	.c8d2		ea		nop		                nop
1842	.c8d3						LC8D3:
1843	.c8d3		ee 69 02	inc $0269	                inc pagedModeCounter
1844	.c8d6						LC8D6:
1845	.c8d6		60		rts		                rts

1847	.c8d7						LC8D7:
1848	.c8d7		ad 66 03	lda $0366	                lda vduv.cursorFlags
1849	.c8da		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
1850	.c8dc		4a		lsr a		                lsr a                        ;xvh
1851	.c8dd		aa		tax		                tax
1852	.c8de		bd 04 e2	lda $e204,x	                lda LE204,x
1853	.c8e1		aa		tax		                tax
1854	.c8e2		29 01		and #$01	                and #$01
1855	.c8e4		a8		tay		                tay
1856	.c8e5		60		rts		                rts

1858							;-------------------------------------------------------------------------
1859							;
1860							; Prepare AABB based on the current graphics cursor and some other
1861							; coordinate.
1862							;
1863							; entry:
1864							;
1865							; X = VDU variable offset of other coordinate (4 bytes: X;Y;)
1866							;
1867							; exit:
1868							;
1869							; vduv.workspace._28 = minimum
1870							;
1871							; vduv.workspace._2c = maximum
1872							;
1873	.c8e6						prepareAABB:
1874	.c8e6		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixels
1875	.c8e8		20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
1876	.c8eb		5a		phy		                phy                          ;save greater Y
1877	.c8ec		da		phx		                phx                          ;save lesser Y
1878	.c8ed		20 cc d5	jsr $d5cc	                jsr sortVDUVariableWords     ;X=lesser X, Y=greater X
1879	.c8f0		68		pla		                pla                          ;A=lesser Y
1880	.c8f1		5a		phy		                phy                          ;save greater X
1881	.c8f2		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
1882	.c8f4		20 f9 c8	jsr $c8f9	                jsr +
1883	.c8f7		fa		plx		                plx                          ;X=greater X
1884	.c8f8		68		pla		                pla                          ;A=greater Y
1885	.c8f9						+
1886							                ; Copy VDU variable word +X to VDU variable word+Y.
1887							                ; Then cropy VDU variable word +A+2 to VDU variable
1888							                ; word+Y+2. Return with updated Y.
1889	.c8f9		48		pha		                pha
1890	.c8fa		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
1891	.c8fd		fa		plx		                plx
1892	.c8fe		e8		inx		                inx
1893	.c8ff		e8		inx		                inx
1894	.c900		80 0a		bra $c90c	                bra copyTwoBytesWithinVDUVariables

1896							;-------------------------------------------------------------------------
1897							;
1898							; Copy 8 bytes to workspace 28 in the VDU variables.
1899							;
1900							; entry:
1901							;
1902							; X = source offset
1903							;
1904	.c902						copyEightBytesToWorkspace28:
1905	.c902		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28

1907							;-------------------------------------------------------------------------
1908							;
1909							; Copy 8 bytes in the VDU variables.
1910							;
1911							; entry:
1912							;
1913							; X = source offset
1914							;
1915							; Y = dest offset
1916							;
1917	.c904						copyEightBytesWithinVDUVariables:
1918	.c904		a9 08		lda #$08	                lda #$08
1919	.c906		80 18		bra $c920	                bra copyABytesWithinVDUVariables

1921							;-------------------------------------------------------------------------
1922							;
1923							; copyTextWindowWidthInBytesToWorkspace28
1924	.c908						copyTextWindowWidthInBytesToWorkspace28:
1925	.c908		a2 4c		ldx #$4c	                ldx #VDUVariables.textWindowWidthInBytes
1926	.c90a		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28

1928							;-------------------------------------------------------------------------
1929							;
1930							;
1931	.c90c						copyTwoBytesWithinVDUVariables:
1932	.c90c		a9 02		lda #$02	                lda #$02
1933	.c90e		80 10		bra $c920	                bra copyABytesWithinVDUVariables

1935							;-------------------------------------------------------------------------
1936							;
1937							; Copy text window info to workspace2C.
1938							;
1939	.c910						copyTextWindowToWorkspace2C:
1940	.c910		a2 08		ldx #$08	                ldx #VDUVariables.textWindowLeft
1941	.c912		a0 2c		ldy #$2c	                ldy #VDUVariables.workspace._2C
1942	.c914		80 08		bra $c91e	                bra copyFourBytesWithinVDUVariables

1944							;-------------------------------------------------------------------------
1945							;
1946							; Copy last 4 bytes of VDU queue somewhere.
1947							;
1948	.c916						copyLastFourVDUQueueBytes:
1949	.c916		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
1950	.c918		80 04		bra $c91e	                bra copyFourBytesWithinVDUVariables

1952							;-------------------------------------------------------------------------
1953							;
1954							; Copy old graphics cursor position to current graphics cursor position.
1955							;
1956	.c91a						copyGraphicsCursorPixelsToOldGraphicsCursorPixels:
1957	.c91a		a0 14		ldy #$14	                ldy #VDUVariables.oldGraphicsCursorPixelsX

1959							;-------------------------------------------------------------------------
1960							;
1961							; Copy the graphics cursor position somewhere.
1962							;
1963	.c91c						copyGraphicsCursorPixels:
1964	.c91c		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX

1966							;-------------------------------------------------------------------------
1967							;
1968							; Copy 4 bytes in the VDU variables.
1969							;
1970							; entry:
1971							;
1972							; X = source offset
1973							;
1974							; Y = dest offset
1975							;
1976	.c91e						copyFourBytesWithinVDUVariables:
1977	.c91e		a9 04		lda #$04	                lda #$04

1979							                ; fall through to copyABytesWithinVDUVariables

1981							;-------------------------------------------------------------------------
1982							;
1983							; Copy some bytes in the VDU variables.
1984							;
1985							; entry:
1986							;
1987							; A = number of bytes
1988							;
1989							; X = source offset
1990							;
1991							; Y = dest offset
1992							;
1993							; exit:
1994							;
1995							; X = updated source offset
1996							;
1997							; Y = updated dest offset
1998							;
1999	.c920						copyABytesWithinVDUVariables:
2000	.c920		48		pha		                pha
2001	.c921		bd 00 03	lda $0300,x	                lda vduv,x
2002	.c924		99 00 03	sta $0300,y	                sta vduv,y
2003	.c927		e8		inx		                inx
2004	.c928		c8		iny		                iny
2005	.c929		68		pla		                pla
2006	.c92a		3a		dec a		                dec a
2007	.c92b		d0 f3		bne $c920	                bne copyABytesWithinVDUVariables
2008	.c92d		60		rts		                rts

2010							;-------------------------------------------------------------------------
2011							;
2012							; Negate a 16-bit value stored in Y/A
2013							;
2014							; entry:
2015							;
2016							; Y (LSB), A (MSB) = value
2017							;
2018							; exit:
2019							;
2020							; Y (LSB), A (MSB) = -value
2021							;
2022	.c92e						negateAY:
2023	.c92e		48		pha		                pha
2024	.c92f		98		tya		                tya
2025	.c930		49 ff		eor #$ff	                eor #$FF
2026	.c932		a8		tay		                tay
2027	.c933		68		pla		                pla
2028	.c934		49 ff		eor #$ff	                eor #$FF
2029	.c936		c8		iny		                iny
2030	.c937		d0 01		bne $c93a	                bne +
2031	.c939		1a		inc a		                inc a
2032	.c93a						+
2033	.c93a		60		rts		                rts

2035							;-------------------------------------------------------------------------
2036							;
2037							; Multiply a text window width by the number of bytes per char. There
2038							; are inclusive and exclusive versions, depending on how the width was
2039							; calculated.
2040							;
2041							; entry:
2042							;
2043							; A = value-1 to multiply (inclusive), value to multiply (exclusive)
2044							;
2045							; exit:
2046							;
2047							; A (lsb), X (msb) = value*vduv.bytesPerCharacter
2048							;
2049	.c93b						getBytesPerInclusiveTextRow:
2050	.c93b		1a		inc a		                inc a
2051	.c93c						getBytesPerExclusiveTextRow:
2052	.c93c		85 da		sta $da		                sta $DA
2053	.c93e		64 db		stz $db		                stz $DB
2054	.c940		ad 4f 03	lda $034f	                lda vduv.bytesPerCharacter    ;A=1/8/16/32
2055	.c943						-
2056	.c943		4a		lsr a		                lsr a
2057	.c944		b0 06		bcs $c94c	                bcs +                     ;taken when multiply is done
2058	.c946		06 da		asl $da		                asl $DA              ;shift size LSB
2059	.c948		26 db		rol $db		                rol $DB              ;carry into size MSB
2060	.c94a		80 f7		bra $c943	                bra -

2062	.c94c						+
2063	.c94c		a5 da		lda $da		                lda $DA
2064	.c94e		a6 db		ldx $db		                ldx $DB
2065	.c950		60		rts		                rts

2067							;-------------------------------------------------------------------------
2068							;
2069							;
2070	.c951						prepareForPlotBackground:
2071	.c951		a2 08		ldx #$08	                ldx #$08                     ;plot background
2072	.c953		8e 59 03	stx $0359	                stx vduv.graphicsPlotState
2073	.c956		ad 5c 03	lda $035c	                lda vduv.backgroundGCOLMode
2074	.c959		29 0f		and #$0f	                and #$0F
2075	.c95b		8d 5a 03	sta $035a	                sta vduv.graphicsPlotMode
2076	.c95e		60		rts		                rts

2078							;-------------------------------------------------------------------------

2080	.c95f						LC95F:
2081	.c95f		a9 00		lda #$00	                lda #$00
2082	.c961		48		pha		                pha
2083	.c962		48		pha		                pha
2084	.c963		ae 2a 03	ldx $032a	                ldx $032A
2085	.c966		20 7d cc	jsr $cc7d	                jsr LCC7D
2086	.c969		80 14		bra $c97f	                bra LC97F

2088	.c96b						LC96B:
2089	.c96b		38		sec		                sec
2090	.c96c		ad 4f 03	lda $034f	                lda $034F
2091	.c96f		ed 2a 03	sbc $032a	                sbc $032A
2092	.c972		48		pha		                pha
2093	.c973		20 a2 e2	jsr $e2a2	                jsr getDefaultBoundsForCurrentScreenMODE
2094	.c976		da		phx		                phx
2095	.c977		a9 00		lda #$00	                lda #$00
2096	.c979		ae 2a 03	ldx $032a	                ldx $032A
2097	.c97c		20 5d cc	jsr $cc5d	                jsr LCC5D
2098	.c97f						LC97F:
2099							                ; scroll left/right
2100	.c97f		8e 50 03	stx $0350	                stx vduv.screenTopLeftAddress+0
2101	.c982		8d 51 03	sta $0351	                sta vduv.screenTopLeftAddress+1
2102	.c985		fa		plx		                plx
2103	.c986		a0 00		ldy #$00	                ldy #$00
2104	.c988		20 b0 cc	jsr $ccb0	                jsr getAddressForTextPosition
2105	.c98b		fa		plx		                plx
2106	.c98c		a9 00		lda #$00	                lda #$00
2107	.c98e		20 5d cc	jsr $cc5d	                jsr LCC5D
2108	.c991		86 d8		stx $d8		                stx ZMEMT+0
2109	.c993		85 d9		sta $d9		                sta ZMEMT+1
2110	.c995		20 a2 e2	jsr $e2a2	                jsr getDefaultBoundsForCurrentScreenMODE
2111	.c998		20 ae ca	jsr $caae	                jsr LCAAE
2112	.c99b		80 1b		bra $c9b8	                bra LC9B8

2114	.c99d						LC99D:
2115	.c99d		a0 00		ldy #$00	                ldy #$00
2116	.c99f		20 77 cc	jsr $cc77	                jsr LCC77
2117	.c9a2		80 06		bra $c9aa	                bra LC9AA

2119	.c9a4						LC9A4:
2120	.c9a4		20 a2 e2	jsr $e2a2	                jsr getDefaultBoundsForCurrentScreenMODE
2121	.c9a7		20 57 cc	jsr $cc57	                jsr LCC57
2122	.c9aa						LC9AA:
2123	.c9aa		8e 50 03	stx $0350	                stx vduv.screenTopLeftAddress+0
2124	.c9ad		8d 51 03	sta $0351	                sta vduv.screenTopLeftAddress+1
2125	.c9b0		a2 00		ldx #$00	                ldx #$00
2126	.c9b2		20 b0 cc	jsr $ccb0	                jsr getAddressForTextPosition
2127	.c9b5		20 e8 ca	jsr $cae8	                jsr LCAE8
2128	.c9b8						LC9B8:
2134	.c9b8		a0 0c		ldy #$0c	                ldy #$0C
2135	.c9ba		ad 51 03	lda $0351	                lda vduv.screenTopLeftAddress+1
2136	.c9bd		ae 50 03	ldx $0350	                ldx vduv.screenTopLeftAddress+0
2137	.c9c0		4c f5 c6	jmp $c6f5	                jmp setCRTCAddress

2139	.c9c3						LC9C3:
2140	.c9c3		20 a0 cc	jsr $cca0	                jsr LCCA0
2141	.c9c6						LC9C6:
2142	.c9c6		85 dd		sta $dd		                sta $DD
2143	.c9c8		86 dc		stx $dc		                stx $DC
2144	.c9ca		20 2c cc	jsr $cc2c	                jsr LCC2C
2145	.c9cd		ad 29 03	lda $0329	                lda $0329
2146	.c9d0		ae 28 03	ldx $0328	                ldx $0328
2147	.c9d3		20 5d cc	jsr $cc5d	                jsr LCC5D
2148	.c9d6		20 88 cc	jsr $cc88	                jsr LCC88
2149	.c9d9		86 d8		stx $d8		                stx ZMEMT+0
2150	.c9db		85 d9		sta $d9		                sta ZMEMT+1
2151	.c9dd		a9 00		lda #$00	                lda #$00
2152	.c9df		ae 2a 03	ldx $032a	                ldx $032A
2153	.c9e2		20 7d cc	jsr $cc7d	                jsr LCC7D
2154	.c9e5		20 88 cc	jsr $cc88	                jsr LCC88
2155	.c9e8		86 da		stx $da		                stx $DA
2156	.c9ea		85 db		sta $db		                sta $DB
2157	.c9ec		ac 28 03	ldy $0328	                ldy $0328
2158	.c9ef		ae 29 03	ldx $0329	                ldx $0329
2159	.c9f2		50 23		bvc $ca17	                bvc LCA17
2160	.c9f4		a4 e0		ldy $e0		                ldy $E0
2161	.c9f6		a6 e1		ldx $e1		                ldx $E1
2162	.c9f8		20 e7 cb	jsr $cbe7	                jsr LCBE7
2163	.c9fb		a4 e0		ldy $e0		                ldy $E0
2164	.c9fd		90 09		bcc $ca08	                bcc LCA08
2165	.c9ff		a2 80		ldx #$80	                ldx #$80
2166	.ca01		86 db		stx $db		                stx $DB
2167	.ca03		64 da		stz $da		                stz $DA
2168	.ca05		ac 2a 03	ldy $032a	                ldy $032A
2169	.ca08						LCA08:
2170	.ca08		a2 00		ldx #$00	                ldx #$00
2171	.ca0a		20 f3 cb	jsr $cbf3	                jsr LCBF3
2172	.ca0d		a2 80		ldx #$80	                ldx #$80
2173	.ca0f		86 d9		stx $d9		                stx ZMEMT+1
2174	.ca11		64 d8		stz $d8		                stz ZMEMT+0
2175	.ca13		a4 de		ldy $de		                ldy $DE
2176	.ca15		a6 df		ldx $df		                ldx $DF
2177	.ca17						LCA17:
2178	.ca17		20 e7 cb	jsr $cbe7	                jsr LCBE7
2179	.ca1a		20 97 cc	jsr $cc97	                jsr LCC97
2180	.ca1d		20 94 cc	jsr $cc94	                jsr LCC94
2181	.ca20		20 57 cc	jsr $cc57	                jsr LCC57
2182	.ca23		86 d8		stx $d8		                stx ZMEMT+0
2183	.ca25		85 d9		sta $d9		                sta ZMEMT+1
2184	.ca27		ce 2b 03	dec $032b	                dec $032B
2185	.ca2a		10 9a		bpl $c9c6	                bpl LC9C6
2186	.ca2c		60		rts		                rts

2188	.ca2d						LCA2D:
2189	.ca2d		20 a0 cc	jsr $cca0	                jsr LCCA0
2190	.ca30						LCA30:
2191	.ca30		20 2c cc	jsr $cc2c	                jsr LCC2C
2192	.ca33		a9 00		lda #$00	                lda #$00
2193	.ca35		ae 2a 03	ldx $032a	                ldx $032A
2194	.ca38		20 5d cc	jsr $cc5d	                jsr LCC5D
2195	.ca3b		86 da		stx $da		                stx $DA
2196	.ca3d		85 db		sta $db		                sta $DB
2197	.ca3f		20 57 cc	jsr $cc57	                jsr LCC57
2198	.ca42		86 dc		stx $dc		                stx $DC
2199	.ca44		85 dd		sta $dd		                sta $DD
2200	.ca46		ac 28 03	ldy $0328	                ldy $0328
2201	.ca49		ae 29 03	ldx $0329	                ldx $0329
2202	.ca4c		50 25		bvc $ca73	                bvc LCA73
2203	.ca4e		a4 de		ldy $de		                ldy $DE
2204	.ca50		a6 df		ldx $df		                ldx $DF
2205	.ca52		20 a8 cb	jsr $cba8	                jsr LCBA8
2206	.ca55		a4 de		ldy $de		                ldy $DE
2207	.ca57		90 0a		bcc $ca63	                bcc LCA63
2208	.ca59		ae 4e 03	ldx $034e	                ldx $034E
2209	.ca5c		86 db		stx $db		                stx $DB
2210	.ca5e		64 da		stz $da		                stz $DA
2211	.ca60		ac 2a 03	ldy $032a	                ldy $032A
2212	.ca63						LCA63:
2213	.ca63		a2 00		ldx #$00	                ldx #$00
2214	.ca65		20 b4 cb	jsr $cbb4	                jsr LCBB4
2215	.ca68		ae 4e 03	ldx $034e	                ldx $034E
2216	.ca6b		86 d9		stx $d9		                stx ZMEMT+1
2217	.ca6d		64 d8		stz $d8		                stz ZMEMT+0
2218	.ca6f		a4 e0		ldy $e0		                ldy $E0
2219	.ca71		a6 e1		ldx $e1		                ldx $E1
2220	.ca73						LCA73:
2221	.ca73		20 a8 cb	jsr $cba8	                jsr LCBA8
2222	.ca76		20 94 cc	jsr $cc94	                jsr LCC94
2223	.ca79		ce 2b 03	dec $032b	                dec $032B
2224	.ca7c		10 b2		bpl $ca30	                bpl LCA30
2225	.ca7e						LCA7E:
2226	.ca7e		60		rts		                rts

2228	.ca7f						LCA7F:
2229	.ca7f		86 dc		stx $dc		                stx $DC
2230	.ca81		aa		tax		                tax
2231	.ca82		38		sec		                sec
2232	.ca83		e5 dc		sbc $dc		                sbc $DC
2233	.ca85		f0 f7		beq $ca7e	                beq LCA7E
2234	.ca87		85 dd		sta $dd		                sta $DD
2235	.ca89		da		phx		                phx
2236	.ca8a		20 3c c9	jsr $c93c	                jsr getBytesPerExclusiveTextRow
2237	.ca8d		fa		plx		                plx
2238	.ca8e		ad 66 03	lda $0366	                lda $0366
2239	.ca91		89 08		bit #$08	                bit #$08
2240	.ca93		d0 0b		bne $caa0	                bne LCAA0
2241	.ca95		89 02		bit #$02	                bit #$02
2242	.ca97		20 ca cc	jsr $ccca	                jsr LCCCA
2243	.ca9a		a4 da		ldy $da		                ldy $DA
2244	.ca9c		a6 db		ldx $db		                ldx $DB
2245	.ca9e		80 2e		bra $cace	                bra LCACE

2247	.caa0						LCAA0:
2248	.caa0		89 04		bit #$04	                bit #$04
2249	.caa2		20 ca cc	jsr $ccca	                jsr LCCCA
2250	.caa5		ad 4f 03	lda $034f	                lda $034F
2251	.caa8		8d 2a 03	sta $032a	                sta $032A
2252	.caab		a4 dd		ldy $dd		                ldy $DD
2253	.caad		88		dey		                dey
2254	.caae						LCAAE:
2255	.caae		98		tya		                tya
2256	.caaf		f0 18		beq $cac9	                beq LCAC9
2257	.cab1		84 dc		sty $dc		                sty $DC
2258	.cab3						LCAB3:
2259	.cab3		20 57 cc	jsr $cc57	                jsr LCC57
2260	.cab6		86 da		stx $da		                stx $DA
2261	.cab8		85 db		sta $db		                sta $DB
2262	.caba		20 c9 ca	jsr $cac9	                jsr LCAC9
2263	.cabd		a6 da		ldx $da		                ldx $DA
2264	.cabf		86 d8		stx $d8		                stx ZMEMT+0
2265	.cac1		a5 db		lda $db		                lda $DB
2266	.cac3		85 d9		sta $d9		                sta ZMEMT+1
2267	.cac5		c6 dc		dec $dc		                dec $DC
2268	.cac7		d0 ea		bne $cab3	                bne LCAB3
2269	.cac9						LCAC9:
2270	.cac9		a2 00		ldx #$00	                ldx #$00
2271	.cacb		ac 2a 03	ldy $032a	                ldy $032A
2272	.cace						LCACE:
2273	.cace		ad 28 03	lda $0328	                lda $0328
2274	.cad1		48		pha		                pha
2275	.cad2		ad 29 03	lda $0329	                lda $0329
2276	.cad5		48		pha		                pha
2277	.cad6		8c 28 03	sty $0328	                sty $0328
2278	.cad9		8e 29 03	stx $0329	                stx $0329
2279	.cadc		20 e8 ca	jsr $cae8	                jsr LCAE8
2280	.cadf		68		pla		                pla
2281	.cae0		8d 29 03	sta $0329	                sta $0329
2282	.cae3		68		pla		                pla
2283	.cae4		8d 28 03	sta $0328	                sta $0328
2284	.cae7		60		rts		                rts

2286							;-------------------------------------------------------------------------

2288	.cae8						LCAE8:
2289	.cae8		a6 d8		ldx $d8		                ldx ZMEMT+0
2290	.caea		a5 d9		lda $d9		                lda ZMEMT+1
2291	.caec		20 2c cc	jsr $cc2c	                jsr LCC2C
2292	.caef		80 79		bra $cb6a	                bra LCB6A

2294							;-------------------------------------------------------------------------

2296	.caf1						LCAF1:
2297	.caf1		a2 77		ldx #$77	                ldx #<LCC77
2298	.caf3		a9 cc		lda #$cc	                lda #>LCC77
2299	.caf5		ac 2d 03	ldy $032d	                ldy $032D
2300	.caf8		80 07		bra $cb01	                bra LCB01

2302	.cafa						LCAFA:
2303	.cafa		a2 57		ldx #$57	                ldx #<LCC57
2304	.cafc		a9 cc		lda #$cc	                lda #>LCC57
2305	.cafe		ac 2f 03	ldy $032f	                ldy $032F
2306	.cb01						LCB01:
2307	.cb01		8e 5d 03	stx $035d	                stx $035D
2308	.cb04		8d 5e 03	sta $035e	                sta $035E
2309	.cb07		38		sec		                sec
2310	.cb08		ad 2d 03	lda $032d	                lda $032D
2311	.cb0b		ed 2f 03	sbc $032f	                sbc $032F
2312	.cb0e		8d 2b 03	sta $032b	                sta $032B
2313	.cb11		ae 2c 03	ldx $032c	                ldx $032C
2314	.cb14		20 b0 cc	jsr $ccb0	                jsr getAddressForTextPosition
2315	.cb17		85 dd		sta $dd		                sta $DD
2316	.cb19		86 dc		stx $dc		                stx $DC
2317	.cb1b		20 2c cc	jsr $cc2c	                jsr LCC2C
2318	.cb1e		ad 2b 03	lda $032b	                lda $032B
2319	.cb21		f0 47		beq $cb6a	                beq LCB6A
2320	.cb23						LCB23:
2321	.cb23		08		php		                php
2322	.cb24		20 24 c0	jsr $c024	                jsr LC024
2323	.cb27		86 da		stx $da		                stx $DA
2324	.cb29		85 db		sta $db		                sta $DB
2325	.cb2b		86 dc		stx $dc		                stx $DC
2326	.cb2d		85 dd		sta $dd		                sta $DD
2327	.cb2f		28		plp		                plp
2328	.cb30		50 1d		bvc $cb4f	                bvc LCB4F
2329	.cb32		b8		clv		                clv
2330	.cb33						LCB33:
2331	.cb33		a6 df		ldx $df		                ldx $DF
2332	.cb35		a4 de		ldy $de		                ldy $DE
2333	.cb37		20 b4 cb	jsr $cbb4	                jsr LCBB4
2334	.cb3a		ad 4e 03	lda $034e	                lda $034E
2335	.cb3d		70 06		bvs $cb45	                bvs LCB45
2336	.cb3f		85 d9		sta $d9		                sta ZMEMT+1
2337	.cb41		64 d8		stz $d8		                stz ZMEMT+0
2338	.cb43		80 04		bra $cb49	                bra LCB49

2340	.cb45						LCB45:
2341	.cb45		85 db		sta $db		                sta $DB
2342	.cb47		64 da		stz $da		                stz $DA
2343	.cb49						LCB49:
2344	.cb49		a6 e1		ldx $e1		                ldx $E1
2345	.cb4b		a4 e0		ldy $e0		                ldy $E0
2346	.cb4d		80 0b		bra $cb5a	                bra LCB5A

2348	.cb4f						LCB4F:
2349	.cb4f		20 2c cc	jsr $cc2c	                jsr LCC2C
2350	.cb52		70 df		bvs $cb33	                bvs LCB33
2351	.cb54		ae 29 03	ldx $0329	                ldx $0329
2352	.cb57		ac 28 03	ldy $0328	                ldy $0328
2353	.cb5a						LCB5A:
2354	.cb5a		20 b4 cb	jsr $cbb4	                jsr LCBB4
2355	.cb5d		a6 dc		ldx $dc		                ldx $DC
2356	.cb5f		86 d8		stx $d8		                stx ZMEMT+0
2357	.cb61		a5 dd		lda $dd		                lda $DD
2358	.cb63		85 d9		sta $d9		                sta ZMEMT+1
2359	.cb65		ce 2b 03	dec $032b	                dec $032B
2360	.cb68		d0 b9		bne $cb23	                bne LCB23
2361	.cb6a						LCB6A:
2362	.cb6a		ae 29 03	ldx $0329	                ldx $0329
2363	.cb6d		ac 28 03	ldy $0328	                ldy $0328
2364	.cb70		50 12		bvc $cb84	                bvc clearTextMemory
2365	.cb72		a6 df		ldx $df		                ldx $DF
2366	.cb74		a4 de		ldy $de		                ldy $DE
2367	.cb76		20 84 cb	jsr $cb84	                jsr clearTextMemory
2368	.cb79		ad 4e 03	lda $034e	                lda $034E
2369	.cb7c		85 d9		sta $d9		                sta ZMEMT+1
2370	.cb7e		64 d8		stz $d8		                stz ZMEMT+0
2371	.cb80		a6 e1		ldx $e1		                ldx $E1
2372	.cb82		a4 e0		ldy $e0		                ldy $E0

2374							;-------------------------------------------------------------------------
2375							;
2376							; Clear a block of text screen memory.
2377							;
2378							; entry:
2379							;
2380							; (ZMEMT),y - first byte to clear
2381							;
2382							; X = number of pages (including first, possibly partial page) to clear
2383							;
2384	.cb84						clearTextMemory:
2385							                ; align memory so that Y=0 on each page boundary
2386							                ; crossing.
2387							                ;
2388							                ; e.g., on entry ZMEMT=$30f8, Y=$08 - then after,
2389							                ; ZMEMT=$3000, Y=$F7; or, ZMEMT=$30f0, Y=$08 -> ZMEMT=$2ff8, Y=$F7.
2390	.cb84		98		tya		                tya                          ;A=initial offset
2391	.cb85		18		clc		                clc
2392	.cb86		65 d8		adc $d8		                adc ZMEMT+0                  ;add to dest address
2393	.cb88		85 d8		sta $d8		                sta ZMEMT+0
2394	.cb8a		b0 02		bcs $cb8e	                bcs +
2395	.cb8c		c6 d9		dec $d9		                dec ZMEMT+1
2396	.cb8e						+
2397	.cb8e		98		tya		                tya
2398	.cb8f		49 ff		eor #$ff	                eor #$FF
2399	.cb91		a8		tay		                tay
2400	.cb92		4a		lsr a		                lsr a                        ;C set if odd
2401	.cb93		ad 58 03	lda $0358	                lda vduv.backgroundTextColour
2402	.cb96		b0 07		bcs $cb9f	                bcs nextByte                    ;taken if odd - slightly different loop
2403	.cb98		80 02		bra $cb9c	                bra clearTextMemoryByte

2405	.cb9a						clearTextMemoryLoop:
2406	.cb9a		91 d8		sta ($d8),y	                sta (ZMEMT),y
2407	.cb9c						clearTextMemoryByte:
2408	.cb9c		c8		iny		                iny
2409	.cb9d		91 d8		sta ($d8),y	                sta (ZMEMT),y
2410	.cb9f						nextByte:
2411	.cb9f		c8		iny		                iny
2412	.cba0		d0 f8		bne $cb9a	                bne clearTextMemoryLoop
2413	.cba2		e6 d9		inc $d9		                inc ZMEMT+1
2414	.cba4		ca		dex		                dex
2415	.cba5		10 f3		bpl $cb9a	                bpl clearTextMemoryLoop
2416	.cba7		60		rts		                rts

2418							;-------------------------------------------------------------------------

2420	.cba8						LCBA8:
2421	.cba8		38		sec		                sec
2422	.cba9		98		tya		                tya
2423	.cbaa		ed 2a 03	sbc $032a	                sbc $032A
2424	.cbad		a8		tay		                tay
2425	.cbae		b0 04		bcs $cbb4	                bcs LCBB4
2426	.cbb0		ca		dex		                dex
2427	.cbb1		30 33		bmi $cbe6	                bmi LCBE6
2428	.cbb3		38		sec		                sec
2429	.cbb4						LCBB4:
2430	.cbb4		08		php		                php
2431	.cbb5		98		tya		                tya
2432	.cbb6		18		clc		                clc
2433	.cbb7		65 da		adc $da		                adc ZTEMP+0
2434	.cbb9		85 da		sta $da		                sta ZTEMP+0
2435	.cbbb		b0 02		bcs $cbbf	                bcs LCBBF
2436	.cbbd		c6 db		dec $db		                dec ZTEMP+1
2437	.cbbf						LCBBF:
2438	.cbbf		98		tya		                tya
2439	.cbc0		18		clc		                clc
2440	.cbc1		65 d8		adc $d8		                adc ZMEMT+0
2441	.cbc3		85 d8		sta $d8		                sta ZMEMT+0
2442	.cbc5		b0 02		bcs $cbc9	                bcs LCBC9
2443	.cbc7		c6 d9		dec $d9		                dec ZMEMT+1
2444	.cbc9						LCBC9:
2445	.cbc9		98		tya		                tya
2446	.cbca		49 ff		eor #$ff	                eor #$FF
2447	.cbcc		a8		tay		                tay
2448	.cbcd		4a		lsr a		                lsr a
2449	.cbce		b0 0b		bcs $cbdb	                bcs LCBDB
2450	.cbd0		80 04		bra $cbd6	                bra LCBD6

2452	.cbd2						LCBD2:
2453	.cbd2		b1 da		lda ($da),y	                lda ($DA),y
2454	.cbd4		91 d8		sta ($d8),y	                sta (ZMEMT),y
2455	.cbd6						LCBD6:
2456	.cbd6		c8		iny		                iny
2457	.cbd7		b1 da		lda ($da),y	                lda ($DA),y
2458	.cbd9		91 d8		sta ($d8),y	                sta (ZMEMT),y
2459	.cbdb						LCBDB:
2460	.cbdb		c8		iny		                iny
2461	.cbdc		d0 f4		bne $cbd2	                bne LCBD2
2462	.cbde		e6 db		inc $db		                inc $DB
2463	.cbe0		e6 d9		inc $d9		                inc ZMEMT+1
2464	.cbe2		ca		dex		                dex
2465	.cbe3		10 ed		bpl $cbd2	                bpl LCBD2
2466	.cbe5						LCBE5:
2467	.cbe5		28		plp		                plp
2468	.cbe6						LCBE6:
2469	.cbe6		60		rts		                rts

2471	.cbe7						LCBE7:
2472	.cbe7		38		sec		                sec
2473	.cbe8		98		tya		                tya
2474	.cbe9		ed 2a 03	sbc $032a	                sbc $032A
2475	.cbec		a8		tay		                tay
2476	.cbed		b0 04		bcs $cbf3	                bcs LCBF3
2477	.cbef		ca		dex		                dex
2478	.cbf0		30 f4		bmi $cbe6	                bmi LCBE6
2479	.cbf2		38		sec		                sec
2480	.cbf3						LCBF3:
2481	.cbf3		08		php		                php
2482	.cbf4		98		tya		                tya
2483	.cbf5		49 ff		eor #$ff	                eor #$FF
2484	.cbf7		48		pha		                pha
2485	.cbf8		38		sec		                sec
2486	.cbf9		65 da		adc $da		                adc $DA
2487	.cbfb		85 da		sta $da		                sta $DA
2488	.cbfd		b0 02		bcs $cc01	                bcs LCC01
2489	.cbff		c6 db		dec $db		                dec $DB
2490	.cc01						LCC01:
2491	.cc01		68		pla		                pla
2492	.cc02		38		sec		                sec
2493	.cc03		65 d8		adc $d8		                adc ZMEMT+0
2494	.cc05		85 d8		sta $d8		                sta ZMEMT+0
2495	.cc07		b0 02		bcs $cc0b	                bcs LCC0B
2496	.cc09		c6 d9		dec $d9		                dec ZMEMT+1
2497	.cc0b						LCC0B:
2498	.cc0b		98		tya		                tya
2499	.cc0c		4a		lsr a		                lsr a
2500	.cc0d		b0 14		bcs $cc23	                bcs LCC23
2501	.cc0f		d0 0d		bne $cc1e	                bne LCC1E
2502	.cc11						LCC11:
2503	.cc11		ca		dex		                dex
2504	.cc12		30 d1		bmi $cbe5	                bmi LCBE5
2505	.cc14		c6 db		dec $db		                dec $DB
2506	.cc16		c6 d9		dec $d9		                dec ZMEMT+1
2507	.cc18		80 04		bra $cc1e	                bra LCC1E

2509	.cc1a						LCC1A:
2510	.cc1a		b1 da		lda ($da),y	                lda ($DA),y
2511	.cc1c		91 d8		sta ($d8),y	                sta (ZMEMT),y
2512	.cc1e						LCC1E:
2513	.cc1e		88		dey		                dey
2514	.cc1f		b1 da		lda ($da),y	                lda ($DA),y
2515	.cc21		91 d8		sta ($d8),y	                sta (ZMEMT),y
2516	.cc23						LCC23:
2517	.cc23		88		dey		                dey
2518	.cc24		d0 f4		bne $cc1a	                bne LCC1A
2519	.cc26		b2 da		lda ($da)	                lda ($DA)
2520	.cc28		92 d8		sta ($d8)	                sta (ZMEMT)
2521	.cc2a		80 e5		bra $cc11	                bra LCC11

2523							;-------------------------------------------------------------------------
2524							;
2525							; Get pointers for a text window row.
2526							;
2527							; entry:
2528							;
2529							; vduv.workspace._28; = text window stride, in bytes
2530							;
2531							; >A, <X = address
2532							;
2533							; exit:
2534							;
2535							; V=0: >A, <X = new address
2536							;
2537							; V=1: (ZTEMPC) =

2539	.cc2c						LCC2C:
2540	.cc2c		48		pha		                pha                          ;save >address
2541	.cc2d		8a		txa		                txa                          ;A=<address
2542	.cc2e		18		clc		                clc
2543	.cc2f		6d 28 03	adc $0328	                adc vduv.workspace._28       ;A=<(new address)
2544	.cc32		aa		tax		                tax                          ;X=<(new address)
2545	.cc33		68		pla		                pla                          ;restore >addcess
2546	.cc34		6d 29 03	adc $0329	                adc vduv.workspace._29       ;A=>(new address)
2547	.cc37		50 1d		bvc $cc56	                bvc rtsCC56                  ;taken if no address wrap
2548	.cc39		86 e0		stx $e0		                stx ZTEMPD+0
2549	.cc3b		29 7f		and #$7f	                and #$7F                     ;
2550	.cc3d		85 e1		sta $e1		                sta ZTEMPD+1
2551	.cc3f		05 e0		ora $e0		                ora ZTEMPD+0
2552	.cc41		f0 12		beq $cc55	                beq clv_rts
2553	.cc43		08		php		                php
2554	.cc44		38		sec		                sec
2555	.cc45		ad 28 03	lda $0328	                lda vduv.workspace._28
2556	.cc48		e5 e0		sbc $e0		                sbc ZTEMPD+0
2557	.cc4a		85 de		sta $de		                sta ZTEMPC+0
2558	.cc4c		ad 29 03	lda $0329	                lda vduv.workspace._29
2559	.cc4f		e5 e1		sbc $e1		                sbc ZTEMPD+1
2560	.cc51		85 df		sta $df		                sta ZTEMPC+1
2561	.cc53		28		plp		                plp
2562	.cc54		60		rts		                rts

2564							;-------------------------------------------------------------------------

2566	.cc55						clv_rts:
2567	.cc55		b8		clv		                clv
2568	.cc56						rtsCC56:
2569	.cc56		60		rts		                rts

2571	.cc57						LCC57:
2572	.cc57		ad 53 03	lda $0353	                lda vduv.bytesPerCharacterRow+1
2573	.cc5a		ae 52 03	ldx $0352	                ldx vduv.bytesPerCharacterRow+0
2574	.cc5d						LCC5D:
2575	.cc5d		18		clc		                clc
2576	.cc5e						LCC5E:
2577	.cc5e		08		php		                php
2578	.cc5f		48		pha		                pha
2579	.cc60		8a		txa		                txa
2580	.cc61		65 d8		adc $d8		                adc ZMEMT+0
2581	.cc63		aa		tax		                tax
2582	.cc64		68		pla		                pla
2583	.cc65		65 d9		adc $d9		                adc ZMEMT+1
2584	.cc67		10 04		bpl $cc6d	                bpl +
2585	.cc69		38		sec		                sec
2586	.cc6a		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte ;handle wraparound at end
2587	.cc6d						+
2588	.cc6d		cd 4e 03	cmp $034e	                cmp vduv.startScreenAddressHighByte
2589	.cc70		b0 03		bcs $cc75	                bcs +
2590	.cc72		6d 54 03	adc $0354	                adc vduv.screenSizeHighByte ;handle wraparound at start
2591	.cc75						+
2592	.cc75		28		plp		                plp
2593	.cc76		60		rts		                rts

2595	.cc77						LCC77:
2596	.cc77		ad 53 03	lda $0353	                lda $0353
2597	.cc7a		ae 52 03	ldx $0352	                ldx $0352
2598	.cc7d						LCC7D:
2599	.cc7d		48		pha		                pha
2600	.cc7e		8a		txa		                txa
2601	.cc7f		49 ff		eor #$ff	                eor #$FF
2602	.cc81		aa		tax		                tax
2603	.cc82		68		pla		                pla
2604	.cc83		49 ff		eor #$ff	                eor #$FF
2605	.cc85		38		sec		                sec
2606	.cc86		80 d6		bra $cc5e	                bra LCC5E

2608	.cc88						LCC88:
2609	.cc88		cd 4e 03	cmp $034e	                cmp $034E
2610	.cc8b		d0 06		bne $cc93	                bne LCC93
2611	.cc8d		e0 00		cpx #$00	                cpx #$00
2612	.cc8f		d0 02		bne $cc93	                bne LCC93
2613	.cc91		a9 80		lda #$80	                lda #$80
2614	.cc93						LCC93:
2615	.cc93		60		rts		                rts

2617	.cc94						LCC94:
2618	.cc94		20 c9 ca	jsr $cac9	                jsr LCAC9
2619	.cc97						LCC97:
2620	.cc97		a6 dc		ldx $dc		                ldx $DC
2621	.cc99		86 d8		stx $d8		                stx ZMEMT+0
2622	.cc9b		a5 dd		lda $dd		                lda $DD
2623	.cc9d		85 d9		sta $d9		                sta ZMEMT+1
2624	.cc9f		60		rts		                rts

2626	.cca0						LCCA0:
2627	.cca0		38		sec		                sec
2628	.cca1		ad 2d 03	lda $032d	                lda $032D
2629	.cca4		ed 2f 03	sbc $032f	                sbc $032F
2630	.cca7		8d 2b 03	sta $032b	                sta $032B
2631	.ccaa		ae 2c 03	ldx $032c	                ldx $032C
2632	.ccad		ac 2f 03	ldy $032f	                ldy $032F

2634							;-------------------------------------------------------------------------
2635							;
2636							; Get display address for a text position.
2637							;
2638	.ccb0						getAddressForTextPosition:
2639	.ccb0		ad 18 03	lda $0318	                lda vduv.textCursorXPosition
2640	.ccb3		48		pha		                pha
2641	.ccb4		ad 19 03	lda $0319	                lda vduv.textCursorYPosition
2642	.ccb7		48		pha		                pha
2643	.ccb8		8e 18 03	stx $0318	                stx vduv.textCursorXPosition
2644	.ccbb		8c 19 03	sty $0319	                sty vduv.textCursorYPosition
2645	.ccbe		20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
2646	.ccc1		7a		ply		                ply
2647	.ccc2		8c 19 03	sty $0319	                sty vduv.textCursorYPosition
2648	.ccc5		7a		ply		                ply
2649	.ccc6		8c 18 03	sty $0318	                sty vduv.textCursorXPosition
2650	.ccc9		60		rts		                rts

2652							;-------------------------------------------------------------------------

2654	.ccca						LCCCA:
2655	.ccca		f0 03		beq $cccf	                beq LCCCF
2656	.cccc		ca		dex		                dex
2657	.cccd		86 dc		stx $dc		                stx ZTEMPB+0
2658	.cccf						LCCCF:
2659	.cccf		ad 66 03	lda $0366	                lda vduv.cursorFlags
2660	.ccd2		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
2661	.ccd4		aa		tax		                tax
2662	.ccd5		a5 dc		lda $dc		                lda ZTEMPB+0
2663	.ccd7						LCCD7:
2664	.ccd7		20 c7 c2	jsr $c2c7	                jsr setTextCursorXPositionWithCursorFlags

2666	.ccda						updateZMEMTWithTextCursorPositionIfValid:
2667	.ccda						LCCDA:
2668	.ccda		ae 18 03	ldx $0318	                ldx vduv.textCursorXPosition
2669	.ccdd		ec 08 03	cpx $0308	                cpx vduv.textWindowLeft
2670	.cce0		30 16		bmi $ccf8	                bmi LCCF8            ;taken if off left edge of window
2671	.cce2		ec 0a 03	cpx $030a	                cpx vduv.textWindowRight
2672	.cce5		f0 02		beq $cce9	                beq LCCE9            ;taken if at right edge of window
2673	.cce7		10 0f		bpl $ccf8	                bpl LCCF8            ;taken if off right edge of window
2674	.cce9						LCCE9:
2675	.cce9		ae 19 03	ldx $0319	                ldx vduv.textCursorYPosition
2676	.ccec		ec 0b 03	cpx $030b	                cpx vduv.textWindowTop
2677	.ccef		30 07		bmi $ccf8	                bmi LCCF8
2678	.ccf1		ec 09 03	cpx $0309	                cpx vduv.textWindowBottom
2679	.ccf4		30 04		bmi $ccfa	                bmi updateZMEMTWithTextCursorPosition
2680	.ccf6		f0 02		beq $ccfa	                beq updateZMEMTWithTextCursorPosition
2681	.ccf8						LCCF8:
2682	.ccf8		38		sec		                sec
2683	.ccf9		60		rts		                rts

2685							;-------------------------------------------------------------------------
2686							;
2687							; Get display address for current text cursor position.
2688							;
2689							; Set up display address without using BBC lookup table at &E0/1
2690							;
2691							; Exit: C=0
2692							;
2693	.ccfa						updateZMEMTWithTextCursorPosition:
2694	.ccfa		ad 56 03	lda $0356	                lda vduv.currentScreenMODEGroup
2695	.ccfd		29 fe		and #$fe	                and #$fe                     ; Reduce to 0,0,2,2,4
2696	.ccff		aa		tax		                tax                          ; Index into jump table
2697	.cd00		ac 19 03	ldy $0319	                ldy vduv.textCursorYPosition  ; Get current line
2698	.cd03		7c 06 cd	jmp ($cd06,x)	                jmp (multiplyRoutinesTable,x) ; Jump to calculation setup

2700	.cd06						multiplyRoutinesTable:
2701	>cd06		21 cd				                .word multiplyBy640     ; Memory map 0,1  MODE 0,1,2,3
2702	>cd08		15 cd				                .word multiplyBy320       ; Memory map 2,3  MODE 4,5,6
2703	>cd0a		0c cd				                .word multiplyBy40        ; Memory map 4    MODE 7

2705	.cd0c						multiplyBy40:
2706	.cd0c		be af e0	ldx $e0af,y	                ldx multiplyBy40TableHigh,y ; Get offset high byte for start of this line
2707	.cd0f		b9 c8 e0	lda $e0c8,y	                lda multiplyBy40TableLow,y ; Get offset low byte for start of this line
2708	.cd12		18		clc		                clc
2709	.cd13		80 14		bra $cd29	                bra LCD29

2711	.cd15						multiplyBy320:
2712	.cd15		b9 e1 e0	lda $e0e1,y	                lda multiplyBy640TableHigh,y
2713	.cd18		4a		lsr a		                lsr a
2714	.cd19		aa		tax		                tax
2715	.cd1a		98		tya		                tya
2716	.cd1b		29 03		and #$03	                and #$03
2717	.cd1d		4a		lsr a		                lsr a
2718	.cd1e		6a		ror a		                ror a
2719	.cd1f		80 07		bra $cd28	                bra LCD28

2721	.cd21						multiplyBy640:
2722	.cd21		be e1 e0	ldx $e0e1,y	                ldx multiplyBy640TableHigh,y
2723	.cd24		98		tya		                tya
2724	.cd25		29 01		and #$01	                and #$01
2725	.cd27		4a		lsr a		                lsr a
2726	.cd28						LCD28:
2727	.cd28		6a		ror a		                ror a                        ; A=A/2 +(128*carry)

2729	.cd29						LCD29:
2730	.cd29		6d 50 03	adc $0350	                adc vduv.screenTopLeftAddress+0
2731	.cd2c		85 d8		sta $d8		                sta ZMEMT+0                      ; store it
2732	.cd2e		8a		txa		                txa
2733	.cd2f		6d 51 03	adc $0351	                adc vduv.screenTopLeftAddress+1 ; window start address hi
2734	.cd32		a8		tay		                tay
2735	.cd33		ad 18 03	lda $0318	                lda vduv.textCursorXPosition  ; text column
2736	.cd36		ae 4f 03	ldx $034f	                ldx vduv.bytesPerCharacter    ; bytes per character
2737	.cd39		ca		dex		                dex
2738	.cd3a		f0 12		beq $cd4e	                beq LCD4E                    ; 1 colour, MODE 7
2739	.cd3c		e0 0f		cpx #$0f	                cpx #$0F
2740	.cd3e		f0 03		beq $cd43	                beq LCD43                    ; 4 colours, MODE 1 or MODE 5
2741	.cd40		90 02		bcc $cd44	                bcc LCD44                    ; 2 colours, MODE 0,3,4,6
2742	.cd42		0a		asl a		                asl a                        ; 16 colours, MODE 2
2743	.cd43						LCD43:
2744	.cd43		0a		asl a		                asl a
2745	.cd44						LCD44:
2746	.cd44		0a		asl a		                asl a
2747	.cd45		0a		asl a		                asl a
2748	.cd46		90 02		bcc $cd4a	                bcc LCD4A
2749	.cd48		c8		iny		                iny
2750	.cd49		c8		iny		                iny
2751	.cd4a						LCD4A:
2752	.cd4a		0a		asl a		                asl a
2753	.cd4b		90 02		bcc $cd4f	                bcc LCD4F
2754	.cd4d		c8		iny		                iny
2755	.cd4e						LCD4E:
2756	.cd4e		18		clc		                clc
2757	.cd4f						LCD4F:
2758	.cd4f		65 d8		adc $d8		                adc ZMEMT+0
2759	.cd51		85 d8		sta $d8		                sta ZMEMT+0
2760	.cd53		8d 4a 03	sta $034a	                sta vduv.textCursorCRTCAddress+0
2761	.cd56		aa		tax		                tax
2762	.cd57		98		tya		                tya
2763	.cd58		69 00		adc #$00	                adc #$00
2764	.cd5a		8d 4b 03	sta $034b	                sta vduv.textCursorCRTCAddress+1
2765	.cd5d		10 04		bpl $cd63	                bpl LCD63
2766	.cd5f		38		sec		                sec
2767	.cd60		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte
2768	.cd63						LCD63:
2769	.cd63		85 d9		sta $d9		                sta ZMEMT+1
2770	.cd65		18		clc		                clc
2771	.cd66		60		rts		                rts

2773							;-------------------------------------------------------------------------

2775	.cd67						nextMaskedCharColumn
2776	.cd67		ee 24 03	inc $0324	                inc vduv.graphicsCursorPixelsX+0
2777	.cd6a		d0 03		bne $cd6f	                bne +
2778	.cd6c		ee 25 03	inc $0325	                inc vduv.graphicsCursorPixelsX+1
2779	.cd6f						+
2780	.cd6f		0a		asl a		                asl a
2781	.cd70						plotMaskedCharRow:
2782							                ; find next pixel to plot, updating graphics cursor X
2783							                ; as it goes. A is non-zero, so this loop will finish
2784							                ; eventually.
2785	.cd70		10 f5		bpl $cd67	                bpl nextMaskedCharColumn
2786	.cd72		5a		phy		                phy
2787	.cd73		85 dd		sta $dd		                sta ZTEMPB+1                 ;
2788	.cd75		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixels
2789	.cd77		20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
2790	.cd7a		80 02		bra $cd7e	                bra plotMaskedCharPixel

2792	.cd7c						plotMaskedCharPixelsLoop:
2793	.cd7c		10 03		bpl $cd81	                bpl nextMaskedCharPixel
2794	.cd7e						plotMaskedCharPixel:
2795	.cd7e		20 51 db	jsr $db51	                jsr plbyteEntryPoint
2796	.cd81						nextMaskedCharPixel
2797	.cd81		46 d1		lsr $d1		                lsr ZMASK
2798	.cd83		90 03		bcc $cd88	                bcc +
2799	.cd85		20 67 da	jsr $da67	                jsr nextColumnAndResetMask
2800	.cd88						+
2801	.cd88		06 dd		asl $dd		                asl ZTEMPB+1
2802	.cd8a		d0 f0		bne $cd7c	                bne plotMaskedCharPixelsLoop
2803	.cd8c		a2 28		ldx #$28	                ldx #VDUVariables.workspace._28
2804	.cd8e		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixelsX
2805	.cd90		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
2806	.cd93		7a		ply		                ply
2807	.cd94		80 50		bra $cde6	                bra nextMaskedCharY

2809	.cd96						plotCharAtGraphicsCursor:
2810	.cd96		20 2c e2	jsr $e22c	                jsr getSoftCharacterDefinitionAddress
2811	.cd99		9c 59 03	stz $0359	                stz vduv.graphicsPlotState   ;plot in foreground colour
2812	.cd9c		ad 5b 03	lda $035b	                lda vduv.foregroundGCOLMode
2813	.cd9f		29 0f		and #$0f	                and #$0F
2814	.cda1						plotFontDataAtGraphicsCursorWithPlotMode:
2815	.cda1		8d 5a 03	sta $035a	                sta vduv.graphicsPlotMode
2816	.cda4		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
2817	.cda6		20 1c c9	jsr $c91c	                jsr copyGraphicsCursorPixels
2818	.cda9		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixelsX
2819	.cdab		a2 00		ldx #$00	                ldx #VDUVariables.graphicsWindowPixelsLeft
2820	.cdad		20 b4 ce	jsr $ceb4	                jsr getDistanceMask
2821	.cdb0		85 dc		sta $dc		                sta ZTEMPB+0
2822	.cdb2		a2 04		ldx #$04	                ldx #VDUVariables.graphicsWindowPixelsRight
2823	.cdb4		20 b4 ce	jsr $ceb4	                jsr getDistanceMask
2824	.cdb7		6a		ror a		                ror a
2825	.cdb8		14 dc		trb $dc		                trb ZTEMPB+0
2826	.cdba		a2 26		ldx #$26	                ldx #VDUVariables.graphicsCursorPixelsY
2827	.cdbc		a0 06		ldy #$06	                ldy #VDUVariables.graphicsWindowPixelsTop
2828	.cdbe		20 b4 ce	jsr $ceb4	                jsr getDistanceMask
2829	.cdc1		85 dd		sta $dd		                sta ZTEMPB+1
2830	.cdc3		a2 26		ldx #$26	                ldx #VDUVariables.graphicsCursorPixelsY
2831	.cdc5		a0 02		ldy #$02	                ldy #VDUVariables.graphicsWindowPixelsBottom
2832	.cdc7		20 b4 ce	jsr $ceb4	                jsr getDistanceMask
2833	.cdca		6a		ror a		                ror a
2834	.cdcb		14 dd		trb $dd		                trb ZTEMPB+1
2835	.cdcd		a0 07		ldy #$07	                ldy #$07
2836	.cdcf						copyMaskedCharLoop:
2837	.cdcf		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte
2838	.cdd1		25 dc		and $dc		                and ZTEMPB+0                 ;mask out columns
2839	.cdd3		46 dd		lsr $dd		                lsr ZTEMPB+1                 ;test row
2840	.cdd5		b0 02		bcs $cdd9	                bcs +
2841	.cdd7		a9 00		lda #$00	                lda #$00                     ;mask out this row
2842	.cdd9						+
2843	.cdd9		99 2c 03	sta $032c,y	                sta vduv.workspace._2C,y
2844	.cddc		88		dey		                dey
2845	.cddd		10 f0		bpl $cdcf	                bpl copyMaskedCharLoop
2846	.cddf		a0 f8		ldy #$f8	                ldy #$F8
2847	.cde1						plotMaskedCharLoop:
2848	.cde1		b9 34 02	lda $0234,y	                lda vduv.workspace._2C-$f8,y ;get masked byte
2849	.cde4		d0 8a		bne $cd70	                bne plotMaskedCharRow        ;taken if data to write
2850	.cde6						nextMaskedCharY:
2851	.cde6		ae 26 03	ldx $0326	                ldx vduv.graphicsCursorPixelsY+0
2852	.cde9		d0 03		bne $cdee	                bne +
2853	.cdeb		ce 27 03	dec $0327	                dec vduv.graphicsCursorPixelsY+1
2854	.cdee						+
2855	.cdee		ce 26 03	dec $0326	                dec vduv.graphicsCursorPixelsY+0
2856	.cdf1		c8		iny		                iny
2857	.cdf2		d0 ed		bne $cde1	                bne plotMaskedCharLoop
2858	.cdf4		a2 2a		ldx #$2a	                ldx #VDUVariables.workspace._2A
2859	.cdf6		a0 26		ldy #$26	                ldy #VDUVariables.graphicsCursorPixelsY
2860	.cdf8		4c 0c c9	jmp $c90c	                jmp copyTwoBytesWithinVDUVariables

2862	.cdfb						vdu127AtGraphicsCursor:
2863							                ; CHR$127 is a solid block, not a backspace.
2864	.cdfb		a9 f8		lda #$f8	                lda #<chr127
2865	.cdfd		85 de		sta $de		                sta ZTEMPC+0
2866	.cdff		a9 bb		lda #$bb	                lda #>chr127
2867	.ce01		85 df		sta $df		                sta ZTEMPC+1
2868	.ce03		a2 08		ldx #$08	                ldx #$08
2869	.ce05		8e 59 03	stx $0359	                stx vduv.graphicsPlotState   ;plot in background colour
2870	.ce08		a9 00		lda #$00	                lda #$00
2871	.ce0a		80 95		bra $cda1	                bra plotFontDataAtGraphicsCursorWithPlotMode

2873	.ce0c						plotCharAtTextCursor:
2874	.ce0c		20 2d d1	jsr $d12d	                jsr handleColumn81
2875	.ce0f		b0 85		bcs $cd96	                bcs plotCharAtGraphicsCursor          ;taken if VDU5
2876	.ce11		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
2899	.ce14		f0 37		beq $ce4d	                beq writeTeletextChar
2901	.ce16						writeBitmapSoftCharacter:
2902	.ce16		20 2c e2	jsr $e22c	                jsr getSoftCharacterDefinitionAddress
2903	.ce19						writeBitmapChar:
2904	.ce19		a0 07		ldy #$07	                ldy #$07
2905	.ce1b		e0 03		cpx #$03	                cpx #$03
2906	.ce1d		f0 34		beq $ce53	                beq write2bppChar            ;taken if MODE 1/5
2907	.ce1f		b0 5b		bcs $ce7c	                bcs write4bppChar                    ;taken if MODE 2
2908	.ce21						write1bppChar:
2909	.ce21		b1 de		lda ($de),y	                lda (ZTEMPC),y
2910	.ce23		05 d2		ora $d2		                ora ZORA
2911	.ce25		45 d3		eor $d3		                eor ZEOR
2912	.ce27		91 d8		sta ($d8),y	                sta (ZMEMT),y
2913	.ce29		88		dey		                dey
2921	.ce2a		10 f5		bpl $ce21	                bpl write1bppChar
2922	.ce2c		60		rts		                rts

2924	.ce2d						vdu127EntryPoint:
2925	.ce2d		a9 20		lda #$20	                lda #$20
2926	.ce2f		2c 66 03	bit $0366	                bit $0366
2927	.ce32		d0 03		bne $ce37	                bne LCE37
2928	.ce34		20 9a c2	jsr $c29a	                jsr vdu8EntryPoint
2929	.ce37						LCE37:
8	.ce37		20 d2 e2	jsr $e2d2	                jsr testVDU5StateNonInlined
2931	.ce3a		d0 bf		bne $cdfb	                bne vdu127AtGraphicsCursor
2932	.ce3c		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
2933	.ce3f		f0 0a		beq $ce4b	                beq writeTeletextSpaceChar   ;taken if teletext mode

2935							                ; Address of space char is known.
2936	.ce41		a9 00		lda #$00	                lda #<LB900
2937	.ce43		85 de		sta $de		                sta ZTEMPC+0
2938	.ce45		a9 b9		lda #$b9	                lda #>LB900
2939	.ce47		85 df		sta $df		                sta ZTEMPC+1
2940	.ce49		80 ce		bra $ce19	                bra writeBitmapChar

2942	.ce4b						writeTeletextSpaceChar:
2943	.ce4b		a9 20		lda #$20	                lda #$20
2948	.ce4d						writeTeletextChar:
2949	.ce4d		20 e5 dd	jsr $dde5	                jsr getSAA5050FromASCII
2950	.ce50		92 d8		sta ($d8)	                sta (ZMEMT)
2951	.ce52		60		rts		                rts

2954	.ce53						write2bppChar:
2955	.ce53		a5 d9		lda $d9		                lda ZMEMT+1
2956	.ce55		a6 d8		ldx $d8		                ldx ZMEMT+0
2957	.ce57		20 e7 ce	jsr $cee7	                jsr getNextColumnAddress
2958	.ce5a						-
2959	.ce5a		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte
2960	.ce5c		29 0f		and #$0f	                and #$0F                     ;get data for right 4 pixels
2961	.ce5e		aa		tax		                tax
2962	.ce5f		bd 13 e0	lda $e013,x	                lda LE013,x                  ;form byte
2963	.ce62		05 d2		ora $d2		                ora ZORA
2964	.ce64		45 d3		eor $d3		                eor ZEOR
2965	.ce66		91 e0		sta ($e0),y	                sta (ZTEMPD),y               ;write to right column
2966	.ce68		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte
2970	.ce6a		4a		lsr a		                lsr a                        ;
2971	.ce6b		4a		lsr a		                lsr a                        ;
2972	.ce6c		4a		lsr a		                lsr a                        ;
2973	.ce6d		4a		lsr a		                lsr a                        ;get data for left 4 pixels
2975	.ce6e		aa		tax		                tax                          ;
2976	.ce6f		bd 13 e0	lda $e013,x	                lda LE013,x                  ;form byte
2977	.ce72		05 d2		ora $d2		                ora ZORA
2978	.ce74		45 d3		eor $d3		                eor ZEOR
2979	.ce76		91 d8		sta ($d8),y	                sta (ZMEMT),y                ;write to left column
2980	.ce78		88		dey		                dey
2981	.ce79		10 df		bpl $ce5a	                bpl -
2982	.ce7b		60		rts		                rts

2984							get4bppScreenByteFor2Pixels: .macro
2989							                .endm

2991	.ce7c						write4bppChar:
2992	.ce7c		a5 d9		lda $d9		                lda ZMEMT+1
2993	.ce7e		a6 d8		ldx $d8		                ldx ZMEMT+0
2994	.ce80		20 d9 ce	jsr $ced9	                jsr getNext3ColumnAddresses
2995	.ce83						-
2996	.ce83		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte - %abcdefgh
3001	.ce85		20 a9 ce	jsr $cea9	                jsr get4bppScreenByteFor2PixelsNonInlined ;pixels g and h
3003	.ce88		91 e0		sta ($e0),y	                sta (ZTEMPD),y
3004	.ce8a		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte - %abcdefgh
3005	.ce8c		4a		lsr a		                lsr a                        ;%0abcdefg
3006	.ce8d		4a		lsr a		                lsr a                        ;%00abcdef
3007	.ce8e		48		pha		                pha                          ;save %00abcdef
3012	.ce8f		20 a9 ce	jsr $cea9	                jsr get4bppScreenByteFor2PixelsNonInlined ;pixels e and f
3014	.ce92		91 dc		sta ($dc),y	                sta (ZTEMPB),y
3015	.ce94		68		pla		                pla                          ;restore %00abcdef
3016	.ce95		4a		lsr a		                lsr a                        ;%000abcde
3017	.ce96		4a		lsr a		                lsr a                        ;%0000abcd
3018	.ce97		48		pha		                pha                          ;save %0000abcd
3023	.ce98		20 a9 ce	jsr $cea9	                jsr get4bppScreenByteFor2PixelsNonInlined ;pixels c and d
3025	.ce9b		91 da		sta ($da),y	                sta (ZTEMP),y
3026	.ce9d		68		pla		                pla                          ;restore %0000abcd
3027	.ce9e		4a		lsr a		                lsr a                        ;%00000abc
3028	.ce9f		4a		lsr a		                lsr a                        ;%000000ab
3032	.cea0		20 a9 ce	jsr $cea9	                jsr get4bppScreenByteFor2PixelsNonInlined ;pixels a and b
3034	.cea3		91 d8		sta ($d8),y	                sta (ZMEMT),y
3035	.cea5		88		dey		                dey
3036	.cea6		10 db		bpl $ce83	                bpl -
3037	.cea8		60		rts		                rts

3040	.cea9						get4bppScreenByteFor2PixelsNonInlined:
3041	.cea9		29 03		and #$03	                and #$03                     ;mask out 2 pixels
2985	.ceab		aa		tax		                tax
2986	.ceac		bd 23 e0	lda $e023,x	                lda LE023,x                  ;form byte
2987	.ceaf		05 d2		ora $d2		                ora ZORA
2988	.ceb1		45 d3		eor $d3		                eor ZEOR
3043	.ceb3		60		rts		                rts

3046							;-------------------------------------------------------------------------
3047							;
3048							; Get mask indicating the distance between two 16-bit VDU variable
3049							; values - >=8, or some amount less than that.
3050							;
3051							; (These can be used for masking pixels, or counting loops, or
3052							; whatever.)
3053							;
3054							; entry:
3055							;
3056							; X = offset of value A in VDU variables
3057							;
3058							; Y = offset of value B in VDU variables
3059							;
3060							; exit:
3061							;
3062							; if distance<=0, A=255, C=1
3063							;
3064							; if distance>=8, A=0, C=0
3065							;
3066							; otherwise, A=255>>distance, C=0
3067							;
3068	.ceb4						getDistanceMask:
3069	.ceb4		38		sec		                sec
3070	.ceb5		bd 00 03	lda $0300,x	                lda vduv+0,x
3071	.ceb8		f9 00 03	sbc $0300,y	                sbc vduv+0,y
3072	.cebb		85 da		sta $da		                sta ZTEMP                    ;get result LSB
3073	.cebd		bd 01 03	lda $0301,x	                lda vduv+1,x
3074	.cec0		f9 01 03	sbc $0301,y	                sbc vduv+1,y
3075	.cec3		30 0c		bmi $ced1	                bmi distanceMask255                  ;taken if result -ve
3076	.cec5		d0 0e		bne $ced5	                bne distanceMask0                  ;taken if result >=256
3077	.cec7		a6 da		ldx $da		                ldx ZTEMP
3078	.cec9		e0 08		cpx #$08	                cpx #$08
3079	.cecb		b0 08		bcs $ced5	                bcs distanceMask0                    ;taken if result>=8
3080	.cecd		bd 27 e1	lda $e127,x	                lda distanceMasksTable,x             ;get mask for <8 items
3081	.ced0		60		rts		                rts

3083	.ced1						distanceMask255:
3084	.ced1		a9 ff		lda #$ff	                lda #%11111111
3085	.ced3		38		sec		                sec
3086	.ced4		60		rts		                rts

3088	.ced5						distanceMask0:
3089	.ced5		a9 00		lda #$00	                lda #$00
3090	.ced7		18		clc		                clc
3091	.ced8		60		rts		                rts

3093							;-------------------------------------------------------------------------
3094							;
3095							; Get addresses of next 3 columns on screen.
3096							;
3097							; entry:
3098							;
3099							; A (MSB)/X (LSB) = address
3100							;
3101							; exit:
3102							;
3103							; (ZTEMP) = column N+1
3104							; (ZTEMPB) = column N+2
3105							; (ZTEMPD) = column N+3
3106							;
3107	.ced9						getNext3ColumnAddresses:
3108	.ced9		20 e7 ce	jsr $cee7	                jsr getNextColumnAddress
3109	.cedc		86 da		stx $da		                stx ZTEMP+0
3110	.cede		85 db		sta $db		                sta ZTEMP+1
3111	.cee0		20 e7 ce	jsr $cee7	                jsr getNextColumnAddress
3112	.cee3		86 dc		stx $dc		                stx ZTEMPB+0
3113	.cee5		85 dd		sta $dd		                sta ZTEMPB+1

3116							;-------------------------------------------------------------------------
3117							;
3118							; Get address of next column on screen.
3119							;
3120							; entry:
3121							;
3122							; A (MSB)/X (LSB) = address
3123							;
3124							; exit:
3125							;
3126							; A (MSB)/X (LSB) = address of next column
3127							; (ZTEMPD) = address of next column
3128							;
3129	.cee7						getNextColumnAddress:
3130	.cee7		48		pha		                pha
3131	.cee8		8a		txa		                txa
3132	.cee9		18		clc		                clc
3133	.ceea		69 08		adc #$08	                adc #$08                     ;next column...
3134	.ceec		aa		tax		                tax
3135	.ceed		68		pla		                pla
3136	.ceee		90 06		bcc $cef6	                bcc +                        ;taken if no carry
3137	.cef0		1a		inc a		                inc a
3138	.cef1		10 03		bpl $cef6	                bpl +           ;taken if no screen address wraparound
3139	.cef3		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
3140	.cef6						+
3141	.cef6		86 e0		stx $e0		                stx ZTEMPD+0
3142	.cef8		85 e1		sta $e1		                sta ZTEMPD+1
3143	.cefa		60		rts		                rts

3145							;-------------------------------------------------------------------------
3146							;
3147							; VDU 23 0 Control 6845 CRTC directly [MasRef E.3-12]
3148							;
3149	.cefb						vdu23_0_EntryPoint:
3150	.cefb		ad 1d 03	lda $031d	                lda vduv.queueEnd-7           ;get value
3151	.cefe		ac 1c 03	ldy $031c	                ldy vduv.queueEnd-8           ;get register

3153							                ; fall through to setCRTCRegister

3155							;-------------------------------------------------------------------------
3156							;
3157							; Set a CRTC register, adjusting and/or noting values if appropriate.
3158							;
3159							; entry:
3160							;
3161							; Y = register to set
3162							;
3163							; A = value

3165	.cf01						setCRTCRegister:
3166	.cf01		c0 07		cpy #$07	                cpy #$07
3167	.cf03		90 1f		bcc $cf24	                bcc setCRTCRegisterRaw
3168	.cf05		d0 03		bne $cf0a	                bne +        ;taken if not setting R7

3170							                ; Setting R7 (vsync position), so apply the *TV offset.
3171	.cf07		6d 90 02	adc $0290	                adc tvOffset
3172	.cf0a						+
3173	.cf0a		c0 08		cpy #$08	                cpy #$08
3174	.cf0c		d0 07		bne $cf15	                bne +                    ;taken if not setting R8

3176							                ; Setting R8 (interlace/delay register), so apply the
3177							                ; *TV interlace setting.
3178	.cf0e		09 00		ora #$00	                ora #$00
3179	.cf10		30 03		bmi $cf15	                bmi +       ;branch taken if bit 7 set - this is taken
3180							                            ;to imply the mode being set is Mode 7
3181	.cf12		4d 91 02	eor $0291	                eor tvInterlace ;apply *TV interlace setting
3182	.cf15						+
3183	.cf15		c0 0a		cpy #$0a	                cpy #$0A
3184	.cf17		d0 0b		bne $cf24	                bne setCRTCRegisterRaw

3186							                ; Setting R10 (cursor start register). Note the new
3187							                ; setting in the VDU variable. If in VDU5 mode, reuse
3188							                ; the result of testVDU5State - i.e., 32 - as the
3189							                ; setting, hiding the cursor.
3190	.cf19		8d 5f 03	sta $035f	                sta vduv.lastCursorStartRegisterValue
8	.cf1c		20 d2 e2	jsr $e2d2	                jsr testVDU5StateNonInlined
3192	.cf1f		d0 09		bne $cf2a	                bne rtsCF2A
3193	.cf21		ad 5f 03	lda $035f	                lda vduv.lastCursorStartRegisterValue

3195							                ; fall through to setCRTCRegisterRaw

3197							;-------------------------------------------------------------------------
3198							;
3199							; Set a CRTC register.
3200							;
3201	.cf24						setCRTCRegisterRaw:
3202	.cf24		8c 00 fe	sty $fe00	                sty CRTC+0
3203	.cf27		8d 01 fe	sta $fe01	                sta CRTC+1
3204	.cf2a						rtsCF2A:
3205	.cf2a		60		rts		                rts

3207							;-------------------------------------------------------------------------
3208							;
3209							; VDU 23 1 Turn cursor on/off [MasRef E.3-12]
3210							;
3211	.cf2b						vdu23_1_EntryPoint:
8	.cf2b		20 d2 e2	jsr $e2d2	                jsr testVDU5StateNonInlined
3213	.cf2e		d0 fa		bne $cf2a	                bne rtsCF2A                  ;taken if VDU5
3214	.cf30		ad 1c 03	lda $031c	                lda vduv.queueEnd-8           ;get new cursor state
3215	.cf33		29 03		and #$03	                and #$03                     ;mask off bits of interest
3216	.cf35		0a		asl a		                asl a
3217	.cf36		aa		tax		                tax
3218	.cf37		a9 20		lda #$20	                lda #$20 ;R10 value for hiding the cursor - save a few
3219							                         ;bytes by loading this here
3220	.cf39		7c 3c cf	jmp ($cf3c,x)	                jmp (LCF3C,x)

3222	.cf3c						LCF3C:
3223	>cf3c		53 cf				                .word setCRTCRegister10            ; 23,1,0... - hide
3224	>cf3e		50 cf				                .word showCursor            ; 23,1,1... - show
3225	>cf40		44 cf				                .word steadyCursor          ; 23,1,2... - steady
3226	>cf42		4b cf				                .word slowFlashCursor       ; 23,1,3... - flash slowly

3228	.cf44						steadyCursor:
3229	.cf44		a9 60		lda #$60	                lda #%01100000
3230	.cf46		1c 5f 03	trb $035f	                trb vduv.lastCursorStartRegisterValue ;steady cursor
3231	.cf49		80 05		bra $cf50	                bra showCursor

3233	.cf4b						slowFlashCursor:
3234	.cf4b		a9 60		lda #$60	                lda #%01100000
3235	.cf4d		0c 5f 03	tsb $035f	                tsb vduv.lastCursorStartRegisterValue ;slow blink cursor
3236	.cf50						showCursor:
3237	.cf50		ad 5f 03	lda $035f	                lda vduv.lastCursorStartRegisterValue
3238	.cf53						setCRTCRegister10:
3239	.cf53		a0 0a		ldy #$0a	                ldy #$0A
3240	.cf55		80 cd		bra $cf24	                bra setCRTCRegisterRaw

3242							;-------------------------------------------------------------------------
3243							;
3244							; VDU 23 2-5 Set ECF patterns [MasRef E.3-13]
3245							;
3246	.cf57						vdu23_2_EntryPoint:
3247	.cf57						vdu23_3_EntryPoint:
3248	.cf57						vdu23_4_EntryPoint:
3249	.cf57						vdu23_5_EntryPoint:
3250	.cf57		e9 01		sbc #$01	                sbc #$01  ;subtract 2 (C=0 on entry...) to get pattern
3251							                          ;index
3252	.cf59		0a		asl a		                asl a
3253	.cf5a		0a		asl a		                asl a
3254	.cf5b		0a		asl a		                asl a                        ;index*8
3255	.cf5c		69 07		adc #$07	                adc #$07                     ;index*8+7
3256	.cf5e		a8		tay		                tay
3257	.cf5f		a2 07		ldx #$07	                ldx #$07
3258	.cf61						-
3259	.cf61		bd 1c 03	lda $031c,x	                lda vduv.queueEnd-8,x
3260	.cf64		99 00 88	sta $8800,y	                sta andy.ecfPatterns,y
3261	.cf67		88		dey		                dey
3262	.cf68		ca		dex		                dex
3263	.cf69		10 f6		bpl $cf61	                bpl -
3264	.cf6b		80 26		bra $cf93	                bra LCF93

3266							;-------------------------------------------------------------------------

3268	.cf6d						vdu23_11_EntryPoint:
3269	.cf6d		ad 55 03	lda $0355	                lda vduv.currentScreenMODE
3270	.cf70		d0 01		bne $cf73	                bne +
3271							                ; Use a different table for MODE 0 - see MasRef E.3-16.
3272	.cf72		3a		dec a		                dec a                        ;
3273	.cf73						+
3274	.cf73		29 03		and #$03	                and #$03 ;index=0 (mode 4); 1 (mode 1/5); 2 (mode 2);
3275							                         ;3 (mode 0)
3276	.cf75		1a		inc a		                inc a
3277	.cf76		0a		asl a		                asl a
3278	.cf77		0a		asl a		                asl a
3279	.cf78		0a		asl a		                asl a
3280	.cf79		0a		asl a		                asl a                        ;(index+1)*16
3281	.cf7a		aa		tax		                tax
3282	.cf7b		a0 1c		ldy #$1c	                ldy #32-4
3283	.cf7d						setDefaultECFPatterns:
3284	.cf7d		bd c3 e1	lda $e1c3,x	                lda defaultECFPatterns-1,x
3285	.cf80		99 ff 87	sta $87ff,y	                sta andy.ecfPatterns-1,y     ;copy first repeat
3286	.cf83		99 03 88	sta $8803,y	                sta andy.ecfPatterns+4-1,y   ;copy second repeat
3287	.cf86		ca		dex		                dex                          ;next byte in defaults table
3288	.cf87		88		dey		                dey
3289	.cf88		98		tya		                tya
3290	.cf89		89 07		bit #$07	                bit #$07
3291	.cf8b		d0 f0		bne $cf7d	                bne setDefaultECFPatterns ;taken if pattern not filled
3292							                ; skip to start of previous pattern
3293	.cf8d		88		dey		                dey
3294	.cf8e		88		dey		                dey
3295	.cf8f		88		dey		                dey
3296	.cf90		88		dey		                dey
3297	.cf91		10 ea		bpl $cf7d	                bpl setDefaultECFPatterns
3298	.cf93						LCF93:
3299	.cf93		4c 7d c5	jmp $c57d	                jmp initializeCurrentECFPatterns

3301							;-------------------------------------------------------------------------
3302							;
3303							; VDU 23 12-15 Set simple ECF pattern [MasRef E.3-17]
3304							;
3305	.cf96						vdu23_12_EntryPoint:
3306	.cf96						vdu23_13_EntryPoint:
3307	.cf96						vdu23_14_EntryPoint:
3308	.cf96						vdu23_15_EntryPoint:
3309	.cf96		e9 0b		sbc #$0b	                sbc #$0B                     ;-12 to get pattern index
3310	.cf98		0a		asl a		                asl a                        ;index*2
3311	.cf99		0a		asl a		                asl a                        ;index*4
3312	.cf9a		0a		asl a		                asl a                        ;index*8, C=0
3313	.cf9b		69 03		adc #$03	                adc #$03                     ;index*8+3, C=0
3314	.cf9d		48		pha		                pha                          ;save offset
3315	.cf9e		a2 07		ldx #$07	                ldx #$07                     ;
3316	.cfa0						LCFA0:
3317	.cfa0		bd 1c 03	lda $031c,x	                lda vduv.queueEnd-8,x        ;get simple pattern byte
3318	.cfa3		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne ;apply logical colour limit
3319	.cfa6		85 da		sta $da		                sta ZTEMP+0
3320	.cfa8		ad 60 03	lda $0360	                lda vduv.numberOfLogicalColoursMinusOne
3321	.cfab		29 07		and #$07	                and #$07                     ;1/3/7
3322	.cfad		65 da		adc $da		                adc ZTEMP+0                  ;select 2/4/16 colour table
3323	.cfaf		a8		tay		                tay
3324	.cfb0		b9 4b e1	lda $e14b,y	                lda solidColoursTable-1,y
3325	.cfb3		9d 1c 03	sta $031c,x	                sta vduv.queueEnd-8,x
3326	.cfb6		ca		dex		                dex
3327	.cfb7		10 e7		bpl $cfa0	                bpl LCFA0
3328	.cfb9		a9 55		lda #$55	                lda #%01010101
3329	.cfbb		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
3330	.cfbe		d0 02		bne $cfc2	                bne +                 ;taken if not MODE 0
3331	.cfc0		a9 33		lda #$33	                lda #%00110011        ;double-width pattern for MODE 0
3332	.cfc2						+
3333	.cfc2		85 da		sta $da		                sta ZTEMP+0
3334	.cfc4		7a		ply		                ply
3335	.cfc5		a2 07		ldx #$07	                ldx #$07
3336	.cfc7						LCFC7:
3337	.cfc7		bd 1c 03	lda $031c,x	                lda vduv.queueEnd-8,x
3338	.cfca		ca		dex		                dex
3339	.cfcb		5d 1c 03	eor $031c,x	                eor vduv.queueEnd-8,x
3340	.cfce		25 da		and $da		                and ZTEMP+0
3341	.cfd0		5d 1c 03	eor $031c,x	                eor vduv.queueEnd-8,x
3342	.cfd3		99 00 88	sta $8800,y	                sta andy.ecfPatterns+0,y
3343	.cfd6		99 04 88	sta $8804,y	                sta andy.ecfPatterns+4,y
3344	.cfd9		88		dey		                dey
3345	.cfda		ca		dex		                dex
3346	.cfdb		10 ea		bpl $cfc7	                bpl LCFC7
3347	.cfdd		80 b4		bra $cf93	                bra LCF93

3349							;-------------------------------------------------------------------------
3350							;
3351							; VDU 23 6 Set dotted lines pattern [MasRef E.3-13]
3352							;
3353	.cfdf						vdu23_6_EntryPoint:
3354	.cfdf		ad 1c 03	lda $031c	                lda vduv.queueEnd-8
3355	.cfe2		8d 67 03	sta $0367	                sta vduv.dotPattern
3356	.cfe5		60		rts		                rts

3358							;-------------------------------------------------------------------------
3359							;
3360							; VDU 23 7 Scroll window directly [MasRef E.3-14]
3361							;
3362	.cfe6						vdu23_7_EntryPoint:
3363	.cfe6		ad 1c 03	lda $031c	                lda vduv.queueEnd-8           ;get <m>
3364	.cfe9		d0 0a		bne $cff5	                bne scrollEntireScreen
3365	.cfeb		20 10 c9	jsr $c910	                jsr copyTextWindowToWorkspace2C
3366	.cfee		a5 d0		lda $d0		                lda STATE
3367	.cff0		29 08		and #$08	                and #STATE.isTextWindow
3368	.cff2		0a		asl a		                asl a ;A=$10 (text window active) or $00 (no text window)
3369	.cff3		80 11		bra $d006	                bra +

3371	.cff5						scrollEntireScreen:
3372	.cff5		a9 00		lda #$00	                lda #$00
3373	.cff7		8d 2c 03	sta $032c	                sta vduv.workspace._2C          ;left
3374	.cffa		8d 2f 03	sta $032f	                sta vduv.workspace._2F          ;top
3375	.cffd		20 a2 e2	jsr $e2a2	                jsr getDefaultBoundsForCurrentScreenMODE
3376	.d000		8e 2e 03	stx $032e	                stx vduv.workspace._2E          ;right
3377	.d003		8c 2d 03	sty $032d	                sty vduv.workspace._2D          ;bottom
3378	.d006						+
3379	.d006		85 dc		sta $dc		                sta ZTEMPB+0
3380	.d008		38		sec		                sec
3381	.d009		ad 2e 03	lda $032e	                lda vduv.workspace._2E          ;right
3382	.d00c		ed 2c 03	sbc $032c	                sbc vduv.workspace._2C          ;right-left
3383	.d00f		20 3b c9	jsr $c93b	                jsr getBytesPerInclusiveTextRow
3384	.d012		8d 28 03	sta $0328	                sta vduv.workspace._28+0        ;bytes per row LSB
3385	.d015		8e 29 03	stx $0329	                stx vduv.workspace._28+1        ;bytes per row MSB
3386	.d018		ae 4f 03	ldx $034f	                ldx vduv.bytesPerCharacter
3387	.d01b		e0 01		cpx #$01	                cpx #$01
3388	.d01d		f0 07		beq $d026	                beq +  ;when 1 byte/char, no cell/byte distinction
3389	.d01f		ad 1e 03	lda $031e	                lda vduv.queueEnd-6       ;get <z>
3390	.d022		f0 02		beq $d026	                beq +                ;taken if scrolling by 1 cell
3391	.d024		a2 08		ldx #$08	                ldx #$08                 ;scroll by 1 horizontal byte
3392	.d026						+
3393	.d026		8e 2a 03	stx $032a	                stx vduv.workspace._2A

3395							; <d> is a bitmask - %00000AVN.
3396							;
3397							; A is set if scrolling by axis (controlled by the VDU cursor flags)
3398							; rather than by direction.
3399							;
3400							; V is set to scroll vertically/in Y rather than horizontally/in X.
3401							;
3402							; N is set to scroll in the negative direction.

3404	.d029		ad 1d 03	lda $031d	                lda vduv.queueEnd-7           ;00000avn C=?
3405	.d02c		4a		lsr a		                lsr a                        ;000000av C=n
3406	.d02d		08		php		                php
3407	.d02e		2a		rol a		                rol a                        ;00000avn C=0
3408	.d02f		28		plp		                plp                          ;00000avn C=n
3409	.d030		2a		rol a		                rol a                        ;0000avnn C=0
3410	.d031		0a		asl a		                asl a                        ;000avnn0 C=0
3411	.d032		c9 10		cmp #$10	                cmp #$10                     ;$10 = 000a0000
3412	.d034		90 03		bcc $d039	                bcc LD039                 ;taken if scrolling by direction
3413	.d036		4d 66 03	eor $0366	                eor vduv.cursorFlags       ;adjust axes
3414	.d039						LD039:
3415	.d039		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
3416	.d03b		05 dc		ora $dc		                ora ZTEMPB+0
3417	.d03d						LD03D:
3418	.d03d		aa		tax		                tax
3419	.d03e		ad 50 03	lda $0350	                lda vduv.screenTopLeftAddress+0
3420	.d041		85 d8		sta $d8		                sta ZMEMT+0
3421	.d043		ad 51 03	lda $0351	                lda vduv.screenTopLeftAddress+1
3422	.d046		85 d9		sta $d9		                sta ZMEMT+1
3423	.d048		20 4e d0	jsr $d04e	                jsr callScrollRoutine
3424	.d04b		4c d8 c6	jmp $c6d8	                jmp updateCRTCTextCursor

3426	.d04e						callScrollRoutine:
3427	.d04e		7c 0c e2	jmp ($e20c,x)	                jmp (scrollRoutinesTable,x)

3429	.d051						LD051:
3430	.d051		da		phx		                phx
3431	.d052		20 10 c9	jsr $c910	                jsr copyTextWindowToWorkspace2C
3432	.d055		20 08 c9	jsr $c908	                jsr copyTextWindowWidthInBytesToWorkspace28
3433	.d058		ae 4f 03	ldx $034f	                ldx $034F
3434	.d05b		8e 2a 03	stx $032a	                stx $032A
3435	.d05e		68		pla		                pla
3436	.d05f		4a		lsr a		                lsr a
3437	.d060		45 d0		eor $d0		                eor STATE
3438	.d062		29 f7		and #$f7	                and #(~STATE.isTextWindow)&$ff
3439	.d064		45 d0		eor $d0		                eor STATE
3440	.d066		0a		asl a		                asl a
3441	.d067		80 d4		bra $d03d	                bra LD03D

3443							;-------------------------------------------------------------------------
3444							;
3445							; VDU 23 8 Clear block [MasRef E.3-15]
3446							;
3447	.d069						vdu23_8_EntryPoint:
3448	.d069		9c 34 03	stz $0334	                stz $0334
3449	.d06c		9c 35 03	stz $0335	                stz $0335
3450	.d06f		20 52 e2	jsr $e252	                jsr getTextCursorPositionWithColumn81
3451	.d072		8e 36 03	stx $0336	                stx $0336
3452	.d075		8c 37 03	sty $0337	                sty $0337
3453	.d078		20 5c e2	jsr $e25c	                jsr LE25C
3454	.d07b		e8		inx		                inx
3455	.d07c		8e 38 03	stx $0338	                stx $0338
3456	.d07f		8c 39 03	sty $0339	                sty $0339
3457	.d082		a0 00		ldy #$00	                ldy #$00
3458	.d084		ad 1c 03	lda $031c	                lda $031C
3459	.d087		20 e5 d0	jsr $d0e5	                jsr LD0E5
3460	.d08a		ad 1d 03	lda $031d	                lda $031D
3461	.d08d		20 e5 d0	jsr $d0e5	                jsr LD0E5
3462	.d090		ad 33 03	lda $0333	                lda $0333
3463	.d093		cd 31 03	cmp $0331	                cmp $0331
3464	.d096		90 76		bcc $d10e	                bcc LD10E
3465	.d098		d0 08		bne $d0a2	                bne LD0A2
3466	.d09a		ad 30 03	lda $0330	                lda $0330
3467	.d09d		cd 32 03	cmp $0332	                cmp $0332
3468	.d0a0		b0 6c		bcs $d10e	                bcs LD10E
3469	.d0a2						LD0A2:
3470	.d0a2		ad 18 03	lda $0318	                lda $0318
3471	.d0a5		48		pha		                pha
3472	.d0a6		ad 19 03	lda $0319	                lda $0319
3473	.d0a9		48		pha		                pha
3474	.d0aa		ac 31 03	ldy $0331	                ldy $0331
3475	.d0ad						LD0AD:
3476	.d0ad		5a		phy		                phy
3477	.d0ae		ad 66 03	lda $0366	                lda $0366
3478	.d0b1		49 08		eor #$08	                eor #$08
3479	.d0b3		29 0e		and #$0e	                and #$0E
3480	.d0b5		aa		tax		                tax
3481	.d0b6		98		tya		                tya
3482	.d0b7		20 c7 c2	jsr $c2c7	                jsr setTextCursorXPositionWithCursorFlags
3483	.d0ba		a2 00		ldx #$00	                ldx #$00
3484	.d0bc		ad 38 03	lda $0338	                lda $0338
3485	.d0bf		cc 31 03	cpy $0331	                cpy $0331
3486	.d0c2		d0 03		bne $d0c7	                bne LD0C7
3487	.d0c4		ae 30 03	ldx $0330	                ldx $0330
3488	.d0c7						LD0C7:
3489	.d0c7		cc 33 03	cpy $0333	                cpy $0333
3490	.d0ca		f0 07		beq $d0d3	                beq LD0D3
3491	.d0cc		20 7f ca	jsr $ca7f	                jsr LCA7F
3492	.d0cf		7a		ply		                ply
3493	.d0d0		c8		iny		                iny
3494	.d0d1		80 da		bra $d0ad	                bra LD0AD

3496	.d0d3						LD0D3:
3497	.d0d3		ad 32 03	lda $0332	                lda $0332
3498	.d0d6		20 7f ca	jsr $ca7f	                jsr LCA7F
3499	.d0d9		7a		ply		                ply
3500	.d0da		68		pla		                pla
3501	.d0db		8d 19 03	sta $0319	                sta $0319
3502	.d0de		68		pla		                pla
3503	.d0df		8d 18 03	sta $0318	                sta $0318
3504	.d0e2		4c fa cc	jmp $ccfa	                jmp updateZMEMTWithTextCursorPosition

3506	.d0e5						LD0E5:
3507	.d0e5		48		pha		                pha
3508	.d0e6		29 03		and #$03	                and #$03
3509	.d0e8		0a		asl a		                asl a
3510	.d0e9		20 f0 d0	jsr $d0f0	                jsr LD0F0
3511	.d0ec		68		pla		                pla
3512	.d0ed		4a		lsr a		                lsr a
3513	.d0ee		09 01		ora #$01	                ora #$01
3514	.d0f0						LD0F0:
3515	.d0f0		aa		tax		                tax
3516	.d0f1		29 01		and #$01	                and #$01
3517	.d0f3		48		pha		                pha
3518	.d0f4		bd 34 03	lda $0334,x	                lda $0334,x
3519	.d0f7		fa		plx		                plx
3520	.d0f8		18		clc		                clc
3521	.d0f9		c8		iny		                iny
3522	.d0fa		79 1d 03	adc $031d,y	                adc $031D,y
3523	.d0fd		30 0a		bmi $d109	                bmi LD109
3524	.d0ff		dd 38 03	cmp $0338,x	                cmp $0338,x
3525	.d102		90 07		bcc $d10b	                bcc LD10B
3526	.d104		bd 38 03	lda $0338,x	                lda $0338,x
3527	.d107		80 02		bra $d10b	                bra LD10B

3529	.d109						LD109:
3530	.d109		a9 00		lda #$00	                lda #$00
3531	.d10b						LD10B:
3532	.d10b		99 2f 03	sta $032f,y	                sta $032F,y
3533	.d10e						LD10E:
3534	.d10e		60		rts		                rts

3536							;-------------------------------------------------------------------------
3537							;
3538							; VDU 23 9 Set 1st flash time [MasRef E.3-16]
3539							;
3540	.d10f						vdu23_9_EntryPoint:
3541	.d10f		38		sec		                sec

3543							;-------------------------------------------------------------------------
3544							;
3545							; VDU 23 10 Set 2nd flash time [MasRef E.3-16]
3546							;
3547	.d110						vdu23_10_EntryPoint:
3548	.d110		ae 1c 03	ldx $031c	                ldx vduv.queueEnd-8          ;get flash value
3549	.d113		a0 00		ldy #$00	                ldy #$00                     ;Y=0 for OSBYTE call
3550	.d115		90 03		bcc $d11a	                bcc doOSBYTE0A               ;taken if VDU23,10
3551	.d117		4c 92 ec	jmp $ec92	                jmp osbyte09
3552	.d11a						doOSBYTE0A:
3553	.d11a		38		sec		                sec
3554	.d11b		4c 94 ec	jmp $ec94	                jmp osbyte0A

3556							;-------------------------------------------------------------------------
3557							;
3558							; VDU 23 16 Cursor movement control [MasRef E.3-17]
3559							;
3560	.d11e						vdu23_16_EntryPoint:
3561	.d11e		ad 66 03	lda $0366	                lda vduv.cursorFlags
3562	.d121		2d 1d 03	and $031d	                and vduv.queueEnd-7          ;value AND <y>
3563	.d124		4d 1c 03	eor $031c	                eor vduv.queueEnd-8          ;(value AND <y>) EOR <x>
3564	.d127		8d 66 03	sta $0366	                sta vduv.cursorFlags
3565	.d12a		4a		lsr a		                lsr a
3566	.d12b		b0 18		bcs $d145	                bcs rtsD145            ;taken if scrollProtect flag on
3567							                ; scroll protect flag is off, so handle column 81 if
3568							                ; necessary.

3570							;-------------------------------------------------------------------------
3571							;
3572							; Handle column 81, if necessary.
3573							;
3574							; TODO - probably misnamed due to the return value
3575							;
3576							; exit:
3577							;
3578							; C=0 if not VDU 5
3579							;
3580							; C=1 if VDU 5
3581							;
3582	.d12d						handleColumn81:

3610	.d12d		48		pha		                pha
3611	.d12e		da		phx		                phx
3612	.d12f		20 d2 e2	jsr $e2d2	                jsr testVDU5StateNonInlined
3613	.d132		38		sec		                sec
3614	.d133		d0 0e		bne $d143	                bne plx_pla_rts        ;taken if VDU5
3615	.d135		18		clc		                clc
3616	.d136		2c 6c 03	bit $036c	                bit vduv.column81
3617	.d139		10 08		bpl $d143	                bpl plx_pla_rts        ;taken if not column 81
3618	.d13b		08		php		                php
3619	.d13c		20 f6 c3	jsr $c3f6	                jsr vdu13EntryPoint          ;CR
3620	.d13f		20 5b c2	jsr $c25b	                jsr vdu10EntryPoint          ;LF
3621	.d142		28		plp		                plp
3622	.d143						plx_pla_rts:
3623	.d143		fa		plx		                plx
3624	.d144		68		pla		                pla
3625	.d145						rtsD145:
3626	.d145		60		rts		                rts

3630							;-------------------------------------------------------------------------
3631							;
3632							; Handle PLOT. [MasRef E.3-21]
3633							;
3634							; PLOT numbers are of the form %pppppamm, where %ppppp is the PLOT
3635							; type, %a the absolute flag and %mm the PLOT mode.
3636							;
3637							; Absolute flag and mode are clear enough from [MasRef E.3-22]. The
3638							; %ppppp part isn't documented as such, so here's a list:
3639							;
3640							; %00000 =  0 = 0-7 = Plot solid line (both endpoints included) [MasRef E.3-23]
3641							; %00001 =  1 = 8-15 = Plot solid line (final point omitted) [MasRef E.3-23]
3642							; %00010 =  2 = 16-23 = Plot solid line (final point omitted) [MasRef E.3-23]
3643							; %00011 =  3 = 24-31 = Plot dotted line (final point omitted) [MasRef E.3-23]
3644							; %00100 =  4 = 32-39 = Plot solid line (initial point omitted) [MasRef E.3-24]
3645							; %00101 =  5 = 40-47 = Plot solid line (both endpoints omitted) [MasRef E.3-24]
3646							; %00110 =  6 = 48-55 = Plot dotted line (initial point omitted) [MasRef E.3-24]
3647							; %00111 =  7 = 56-63 = Plot dotted line (both endpoints omitted) [MasRef E.3-24]
3648							; %01000 =  8 = 64-71 = Plot point [MasRef E.3-24]
3649							; %01001 =  9 = 72-79 = Horizontal line fill (left and right to non-background) [MasRef E.3-24]
3650							; %01010 = 10 = 80-87 = Plot triangle [MasRef E.3-25]
3651							; %01011 = 11 = 88-95 = Horizontal line fill (right to background) [MasRef E.3-25]
3652							; %01100 = 12 = 96-103 = Plot rectangle [MasRef E.3-26]
3653							; %01101 = 13 = 104-111 = Horizontal line fill (left and right to foreground) [MasRef E.3-26]
3654							; %01110 = 14 = 112-119 = Plot parallelogram [MasRef E.3-27]
3655							; %01111 = 15 = 120-127 = Horizontal line fill (right to non-foreground) [MasRef E.3-27]
3656							; %10000 = 16 = 128-135 = Flood fill to non-background [MasRef E.3-28]
3657							; %10001 = 17 = 136-143 = Flood fill to foreground [MasRef E.3-28]
3658							; %10010 = 18 = 144-151 = Plot circle outline [MasRef E.3-28]
3659							; %10011 = 19 = 152-159 = Plot filled circle [MasRef E.3-29]
3660							; %10100 = 20 = 160-167 = Plot circular arc [MasRef E.3-29]
3661							; %10101 = 21 = 168-175 = Plot filled chord segment [MasRef E.3-30]
3662							; %10110 = 22 = 176-183 = Plot filled sector [MasRef E.3-30]
3663							; %10111 = 23 = 184-191 = Move/copy rectangle [MasRef E.3-31]
3664							; %11000 = 24 = 192-199 = Plot ellipse outline [MasRef E.3-32]
3665							; %11001 = 25 = 200-207 = Plot solid ellipse [MasRef E.3-32]
3666							; %11010 = 26 = 208-215 = Reserved [MasRef E.3-34]
3667							; %11011 = 27 = 215-223 = Reserved [MasRef E.3-34]
3668							; %11100 = 28 = 224-231 = Reserved [MasRef E.3-34]
3669							; %11101 = 29 = 232-239 = Reserved for Acornsoft sprites [MasRef E.3-34]
3670							; %11110 = 30 = 240-247 = User program calls [MasRef E.3-34]
3671							; %11111 = 31 = 248-255 = User program calls [MasRef E.3-34]
3672							;
3673							; entry:
3674							;
3675							; vduQueueEnd-5 = PLOT number
3676							;
3677							; vduQueueEnd-3 = X coordinate
3678							;
3679							; vduQueueEnd-1 = Y coordinate
3680							;;

3682	.d146						handlePLOT:
3683	.d146		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
3684	.d148		20 e2 d1	jsr $d1e2	                jsr eigabsForPLOT
3685	.d14b		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number
3686	.d14e		a0 05		ldy #$05	                ldy #gcolModeLeave                     ;
3687	.d150		29 03		and #$03	                and #$03                     ;mask out colour/plot mode [MasRef E.3-22]
3688	.d152		f0 0c		beq $d160	                beq LD160 ;taken if <p> MOD 4=0 - early out
3689	.d154		4a		lsr a		                lsr a                        ;C=1 if using VDU18 settings
3690	.d155		88		dey		                dey                          ;Y=gcolModeInvert
3691	.d156		90 08		bcc $d160	                bcc LD160                    ;taken if invert mode
3692	.d158		aa		tax		                tax              ;X=0 if fg settings, 1 if bg settings
3693	.d159		bc 5b 03	ldy $035b,x	                ldy vduv.foregroundGCOLMode,x
3694	.d15c		0a		asl a		                asl a
3695	.d15d		0a		asl a		                asl a
3696	.d15e		0a		asl a		                asl a
3697	.d15f		aa		tax		                tax              ;X=0 if fg settings, 8 if bg settings
3698	.d160						LD160:
3699	.d160		8e 59 03	stx $0359	                stx vduv.graphicsPlotState
3700	.d163		98		tya		                tya
3701	.d164		29 0f		and #$0f	                and #$0F
3702	.d166		8d 5a 03	sta $035a	                sta vduv.graphicsPlotMode
3703	.d169		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number pppppmmm
3704	.d16c		4a		lsr a		                lsr a                        ;0pppppmm
3705	.d16d		4a		lsr a		                lsr a                        ;00pppppm
3706	.d16e		29 fe		and #$fe	                and #$fe                     ;00ppppp0
3707	.d170		aa		tax		                tax
3708	.d171		c9 34		cmp #$34	                cmp #208/4
3709	.d173		b0 1b		bcs $d190	                bcs LD190                    ;taken if reserved PLOT
3710	.d175		29 f3		and #$f3	                and #$F3                     ;00pp00p0
3711	.d177		c9 12		cmp #$12	                cmp #$12                     ;
3712	.d179		08		php		                php                          ;
3713	.d17a		f0 08		beq $d184	                beq LD184                ;taken if horizonal line fill
3714	.d17c		e0 2e		cpx #$2e	                cpx #184/4
3715	.d17e		f0 04		beq $d184	                beq LD184                ;taken if move/copy rectangle
3716	.d180		c0 05		cpy #$05	                cpy #gcolModeLeave
3717	.d182		f0 19		beq $d19d	                beq LD19D
3718	.d184						LD184:
3719	.d184		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number
3720	.d187		20 93 d1	jsr $d193	                jsr LD193
3721	.d18a		28		plp		                plp
3722	.d18b		d0 11		bne $d19e	                bne LD19E
3723	.d18d		4c df c4	jmp $c4df	                jmp LC4DF

3725	.d190						LD190:
3726	.d190		4c a3 c6	jmp $c6a3	                jmp callVDUVForPLOT

3728	.d193						LD193:
3729	.d193		e0 10		cpx #$10	                cpx #64/4
3730	.d195		b0 03		bcs $d19a	                bcs LD19A                     ;taken if PLOT >=64
3731	.d197		4c a9 d8	jmp $d8a9	                jmp LD8A9                    ;handle line PLOTs

3733	.d19a						LD19A:
3734	.d19a		7c 7b e0	jmp ($e07b,x)	                jmp (plotEntryPointTable-8*2,x)

3736	.d19d						LD19D:
3737	.d19d		68		pla		                pla
3738	.d19e						LD19E:
3739	.d19e		20 1a c9	jsr $c91a	                jsr copyGraphicsCursorPixelsToOldGraphicsCursorPixels
3740	.d1a1		a0 24		ldy #$24	                ldy #$24
3741	.d1a3		4c 16 c9	jmp $c916	                jmp copyLastFourVDUQueueBytes

3743	.d1a6						LD1A6:
3744	.d1a6		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX

3746							;-------------------------------------------------------------------------
3747							;
3748							; WIND [MasRef E.4-7]. The result is a bit field, %vvhh, where %vv is
3749							; the outcode for the vertical axis and %hh the outcode for the
3750							; horizontal axis. Each outcode is %xn, where x is set if point above
3751							; maximum and n set if point below minimum. (Of course, %11 is then
3752							; not possible.)
3753							;
3754							; See https://en.wikipedia.org/wiki/Cohen%E2%80%93Sutherland_algorithm
3755							;
3756							; So the possible results, in binary, are:
3757							;
3758							; %1001 | %1000 | %1010
3759							; ------+-------+------
3760							; %0001 | %0000 | %0010
3761							; ------+-------+------
3762							; %0101 | %0100 | %0110
3763							;
3764	.d1a8						windEntryPoint:
3765	.d1a8		e8		inx		                inx
3766	.d1a9		e8		inx		                inx                          ;point to Y coordinate
3767	.d1aa		20 b5 d1	jsr $d1b5	                jsr getOutcodeForYAxis                    ;process Y coordinate
3768	.d1ad		ca		dex		                dex
3769	.d1ae		ca		dex		                dex                          ;point to X coordinate
3770	.d1af		0a		asl a		                asl a
3771	.d1b0		0a		asl a		                asl a                        ;shift Y outcode into bits 2/3
3772	.d1b1		a0 00		ldy #$00	                ldy #$00                     ;doing Y axis
3773	.d1b3		80 04		bra $d1b9	                bra updateOutcodeForAxis

3775							;-------------------------------------------------------------------------
3776							;
3777	.d1b5						getOutcodeForYAxis:
3778	.d1b5		a0 02		ldy #$02	                ldy #$02                     ;Y=2 for Y coordinate
3779							;-------------------------------------------------------------------------
3780							;
3781							; Get outcode for X or Y axis.
3782							;
3783							; entry:
3784							;
3785							; X = offset in VDU variables of coordinate
3786							;
3787							; Y = 0 if X axis, 2 if Y axis
3788							;
3789							; exit:
3790							;
3791							; ZTEMP?0 = outcode - 0, 1 or 2
3792							;
3793							; A = outcode
3794							;
3795							; N/Z set as per outcode
3796							;
3797	.d1b7						getOutcodeForAxis:
3798	.d1b7		a9 00		lda #$00	                lda #$00                     ;initialize result

3800							;-------------------------------------------------------------------------
3801							;
3802							; Update outcode for X or Y axis
3803							;
3804							; entry: as per getOutcodeForAxis
3805							;
3806							; exit:
3807							;
3808							; ZTEMP?0 = updated; outcode is added to its existing value
3809							;
3810	.d1b9						updateOutcodeForAxis:
3811	.d1b9		85 da		sta $da		                sta ZTEMP+0                  ;save current result
3812							                ; set flags for coordinate-minimum
3813	.d1bb		bd 00 03	lda $0300,x	                lda vduv+0,x
3814	.d1be		d9 00 03	cmp $0300,y	                cmp vduv.graphicsWindowPixelsLeft+0,y
3815	.d1c1		bd 01 03	lda $0301,x	                lda vduv+1,x
3816	.d1c4		f9 01 03	sbc $0301,y	                sbc vduv.graphicsWindowPixelsLeft+1,y
3817	.d1c7		30 10		bmi $d1d9	                bmi add1ToOutcode ;taken if point below minimum - outcode is 1

3819							                ; set flags for maximum-coordinate
3820	.d1c9		b9 04 03	lda $0304,y	                lda vduv.graphicsWindowPixelsRight+0,y
3821	.d1cc		dd 00 03	cmp $0300,x	                cmp vduv+0,x
3822	.d1cf		b9 05 03	lda $0305,y	                lda vduv.graphicsWindowPixelsRight+1,y
3823	.d1d2		fd 01 03	sbc $0301,x	                sbc vduv+1,x
3824	.d1d5		10 04		bpl $d1db	                bpl gotOutcode ;taken if point below maximum - axis outcode is 0
3825							                ; point is above maximum - axis outcode is 2
3826	.d1d7						add2ToOutcode:
3827	.d1d7		e6 da		inc $da		                inc ZTEMP+0
3828	.d1d9						add1ToOutcode:
3829	.d1d9		e6 da		inc $da		                inc ZTEMP+0
3830	.d1db						gotOutcode:
3831	.d1db		a5 da		lda $da		                lda ZTEMP+0
3832	.d1dd		60		rts		                rts

3834							;-------------------------------------------------------------------------
3835							;
3836							; EIGABS entry point.
3837							;
3838	.d1de						eigabsEntryPoint:
3839	.d1de		a9 ff		lda #$ff	                lda #$FF ;pretend it's PLOT 255 (as that would be absolute coordinates)
3840	.d1e0		80 03		bra $d1e5	                bra eigabsCommon

3842							;-------------------------------------------------------------------------
3843							;
3844							; EIGABS, but for a VDU 25. Handles relative/absolute addressing,
3845							; based on the PLOT number in the VDU queue.
3846							;
3847	.d1e2						eigabsForPLOT:
3848	.d1e2		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number

3850							;-------------------------------------------------------------------------
3851							;
3852							; EIGABS shared code.
3853							;
3854	.d1e5						eigabsCommon:
3855	.d1e5		85 da		sta $da		                sta ZTEMP+0                  ;save PLOT number
3856	.d1e7		a0 02		ldy #$02	                ldy #$02                     ;process Y
3857	.d1e9		20 0b d2	jsr $d20b	                jsr handleExternalCoordinate
3858	.d1ec		20 42 d2	jsr $d242	                jsr divideCoordinatesBy2     ;divide Y by 4 - convert 0-1023 to 0-255
3859	.d1ef		a0 00		ldy #$00	                ldy #$00                     ;process X
3860	.d1f1		ca		dex		                dex                          ;...
3861	.d1f2		ca		dex		                dex                          ;...
3862	.d1f3		20 0b d2	jsr $d20b	                jsr handleExternalCoordinate
3863	.d1f6		ac 61 03	ldy $0361	                ldy vduv.pixelsPerByteMinusOne
3864	.d1f9		c0 03		cpy #$03	                cpy #$03  ;
3865	.d1fb		f0 05		beq $d202	                beq +     ;branch taken if mode 1/5 - divide by 4 or 8
3866	.d1fd		b0 06		bcs $d205	                bcs ++    ;branch taken if mode 0/4 - divide by 2 or 4
3867	.d1ff		20 42 d2	jsr $d242	                jsr divideCoordinatesBy2     ;mode 2 - divide by 8
3868	.d202						+
3869	.d202		20 42 d2	jsr $d242	                jsr divideCoordinatesBy2
3870	.d205						+
3871	.d205		ad 56 03	lda $0356	                lda vduv.currentScreenMODEGroup
3872	.d208		d0 38		bne $d242	                bne divideCoordinatesBy2     ;branch taken if MODE 4/5
3873	.d20a		60		rts		                rts

3875							;-------------------------------------------------------------------------
3876							;
3877							; Handle external coordinate.
3878							;
3879							; 1. Deal with absolute or relative PLOTting
3880							;
3881							; 2. Update graphics cursor position
3882							;
3883							; 3. Handle window origin
3884							;
3885							; 4. Update input coordinate
3886							;
3887							; 5. Divide result by 2 (as this always needs doing at least once)
3888							;
3889							; entry:
3890							;
3891							; ZTEMP?0 = PLOT number
3892							;
3893							; X = offset-2 of external coordinates
3894							;
3895							; Y = 0 to process X coordinate, 2 to process Y coordinate
3896							;
3897	.d20b						handleExternalCoordinate:
3898	.d20b		18		clc		                clc
3899	.d20c		a5 da		lda $da		                lda ZTEMP+0                  ;get PLOT number
3900	.d20e		29 04		and #$04	                and #$04                     ;get absolute/relative flag
3901	.d210		f0 09		beq $d21b	                beq relativePLOT             ;branch taken if relative
3902	.d212						absolutePLOT:
3903	.d212		bd 02 03	lda $0302,x	                lda vduv+2,x                 ;get coordinate LSB
3904	.d215		48		pha		                pha                          ;save coordinate LSB
3905	.d216		bd 03 03	lda $0303,x	                lda vduv+3,x                 ;get coordinate MSB
3906	.d219		80 0e		bra $d229	                bra LD229                    ;

3908	.d21b						relativePLOT:
3909	.d21b		bd 02 03	lda $0302,x	                lda vduv+2,x                 ;get coordinate LSB
3910	.d21e		79 10 03	adc $0310,y	                adc vduv.graphicsCursorPositionX+0,y ;add current position LSB
3911	.d221		48		pha		                pha                                  ;save coordinate LSB
3912	.d222		bd 03 03	lda $0303,x	                lda vduv+3,x                 ;get coordinate MSB
3913	.d225		79 11 03	adc $0311,y	                adc vduv.graphicsCursorPositionX+1,y ;add current position MSB
3914	.d228		18		clc		                clc
3915	.d229						LD229:
3916	.d229		99 11 03	sta $0311,y	                sta vduv.graphicsCursorPositionX+1,y ;update current position MSB
3917	.d22c		79 0d 03	adc $030d,y	                adc vduv.graphicsWindowOriginX+1,y   ;add window origin MSB
3918	.d22f		9d 03 03	sta $0303,x	                sta vduv+3,x                  ;update coordinate MSB
3919	.d232		68		pla		                pla                          ;restore coordinate LSB
3920	.d233		99 10 03	sta $0310,y	                sta vduv.graphicsCursorPositionX+0,y ;update current position LSB
3921	.d236		18		clc		                clc
3922	.d237		79 0c 03	adc $030c,y	                adc vduv.graphicsWindowOriginX+0,y ;add window origin LSB
3923	.d23a		9d 02 03	sta $0302,x	                sta vduv+2,x                       ;update coordinate LSB
3924	.d23d		90 03		bcc $d242	                bcc +
3925	.d23f		fe 03 03	inc $0303,x	                inc vduv+3,x       ;handle carry, ignored earlier
3926	.d242						+

3928	.d242						divideCoordinatesBy2:
3929	.d242		bd 03 03	lda $0303,x	                lda vduv+3,x
3930	.d245		0a		asl a		                asl a                        ;C=bit 7
3931	.d246		7e 03 03	ror $0303,x	                ror vduv+3,x                  ;signed divide by 2
3932	.d249		7e 02 03	ror $0302,x	                ror vduv+2,x                  ;signed divide by 2
3933	.d24c		60		rts		                rts

3935							;-------------------------------------------------------------------------

3937	.d24d						LD24D:
3938	.d24d		da		phx		                phx
3939	.d24e		5a		phy		                phy
3940	.d24f		5a		phy		                phy
3941	.d250		da		phx		                phx
3942	.d251		5a		phy		                phy
3943	.d252		20 80 d2	jsr $d280	                jsr LD280
3944	.d255		fa		plx		                plx
3945	.d256		20 80 d2	jsr $d280	                jsr LD280
3946	.d259		fa		plx		                plx
3947	.d25a		7a		ply		                ply
3948	.d25b		20 e8 da	jsr $dae8	                jsr LDAE8
3949	.d25e		fa		plx		                plx
3950	.d25f		20 68 d2	jsr $d268	                jsr LD268
3951	.d262		fa		plx		                plx
3952	.d263		80 03		bra $d268	                bra LD268

3954	.d265						LD265:
3955	.d265		20 09 9b	jsr $9b09	                jsr L9B09
3956	.d268						LD268:
3957	.d268		a0 00		ldy #$00	                ldy #$00
3958	.d26a		20 70 d2	jsr $d270	                jsr LD270
3959	.d26d		e8		inx		                inx
3960	.d26e		a0 02		ldy #$02	                ldy #$02
3961	.d270						LD270:
3962	.d270		38		sec		                sec
3963	.d271		20 76 d2	jsr $d276	                jsr LD276
3964	.d274		e8		inx		                inx
3965	.d275		c8		iny		                iny
3966	.d276						LD276:
3967	.d276		bd 00 03	lda $0300,x	                lda $0300,x
3968	.d279		f9 14 03	sbc $0314,y	                sbc $0314,y
3969	.d27c		9d 00 03	sta $0300,x	                sta $0300,x
3970	.d27f						LD27F:
3971	.d27f		60		rts		                rts

3973	.d280						LD280:
3974	.d280		a0 00		ldy #$00	                ldy #$00
3975	.d282		20 88 d2	jsr $d288	                jsr LD288
3976	.d285		e8		inx		                inx
3977	.d286		a0 02		ldy #$02	                ldy #$02
3978	.d288						LD288:
3979	.d288		18		clc		                clc
3980	.d289		20 8e d2	jsr $d28e	                jsr LD28E
3981	.d28c		e8		inx		                inx
3982	.d28d		c8		iny		                iny
3983	.d28e						LD28E:
3984	.d28e		bd 00 03	lda $0300,x	                lda $0300,x
3985	.d291		79 14 03	adc $0314,y	                adc $0314,y
3986	.d294		9d 00 03	sta $0300,x	                sta $0300,x
3987	.d297		60		rts		                rts

3989	.d298						LD298:
3990	.d298		85 e1		sta $e1		                sta $E1
3991	.d29a		20 25 d4	jsr $d425	                jsr LD425
3992	.d29d		f0 e0		beq $d27f	                beq LD27F
3993	.d29f		a0 14		ldy #$14	                ldy #$14
3994	.d2a1		a9 20		lda #$20	                lda #$20
3995	.d2a3		a2 2c		ldx #$2c	                ldx #$2C
3996	.d2a5		20 65 d2	jsr $d265	                jsr LD265
3997	.d2a8		20 aa d3	jsr $d3aa	                jsr LD3AA
3998	.d2ab		a9 01		lda #$01	                lda #$01
3999	.d2ad						LD2AD:
4000	.d2ad		84 e0		sty $e0		                sty $E0
4001	.d2af		04 e0		tsb $e0		                tsb $E0
4002	.d2b1		a2 2c		ldx #$2c	                ldx #VDUVariables.workspace._2C
4003	.d2b3		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
4004	.d2b5		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
4005	.d2b8		2c 35 03	bit $0335	                bit $0335
4006	.d2bb		08		php		                php
4007	.d2bc		a2 2c		ldx #$2c	                ldx #$2C
4008	.d2be		20 26 d7	jsr $d726	                jsr LD726
4009	.d2c1		28		plp		                plp
4010	.d2c2		10 03		bpl $d2c7	                bpl LD2C7
4011	.d2c4		20 aa d3	jsr $d3aa	                jsr LD3AA
4012	.d2c7						LD2C7:
4013	.d2c7		ac 2c 03	ldy $032c	                ldy $032C
4014	.d2ca		ad 2d 03	lda $032d	                lda $032D
4015	.d2cd		30 03		bmi $d2d2	                bmi LD2D2
4016	.d2cf		20 2e c9	jsr $c92e	                jsr negateAY
4017	.d2d2						LD2D2:
4018	.d2d2		48		pha		                pha
4019	.d2d3		18		clc		                clc
4020	.d2d4		98		tya		                tya
4021	.d2d5		6d 30 88	adc $8830	                adc L8830
4022	.d2d8		a8		tay		                tay
4023	.d2d9		68		pla		                pla
4024	.d2da		6d 31 88	adc $8831	                adc L8831
4025	.d2dd		10 ce		bpl $d2ad	                bpl LD2AD
4026	.d2df		1a		inc a		                inc a
4027	.d2e0		d0 23		bne $d305	                bne LD305
4028	.d2e2		c8		iny		                iny
4029	.d2e3		d0 20		bne $d305	                bne LD305
4030	.d2e5		a5 e0		lda $e0		                lda $E0
4031	.d2e7		f0 1c		beq $d305	                beq LD305
4032	.d2e9		ad 2c 03	lda $032c	                lda $032C
4033	.d2ec		cd 28 03	cmp $0328	                cmp $0328
4034	.d2ef		f0 14		beq $d305	                beq LD305
4035	.d2f1		a2 2c		ldx #$2c	                ldx #$2C
4036	.d2f3		a0 28		ldy #$28	                ldy #$28
4037	.d2f5		ad 36 03	lda $0336	                lda $0336
4038	.d2f8		0a		asl a		                asl a
4039	.d2f9		4d 36 03	eor $0336	                eor $0336
4040	.d2fc		10 04		bpl $d302	                bpl LD302
4041	.d2fe		e8		inx		                inx
4042	.d2ff		e8		inx		                inx
4043	.d300		c8		iny		                iny
4044	.d301		c8		iny		                iny
4045	.d302						LD302:
4046	.d302		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
4047	.d305						LD305:
4048	.d305		20 25 d4	jsr $d425	                jsr LD425
4049	.d308		ad 29 03	lda $0329	                lda $0329
4050	.d30b		aa		tax		                tax
4051	.d30c		4d 1c 03	eor $031c	                eor $031C
4052	.d30f		30 18		bmi $d329	                bmi LD329
4053	.d311		a0 02		ldy #$02	                ldy #$02
4054	.d313		20 6f d4	jsr $d46f	                jsr LD46F
4055	.d316		d0 0c		bne $d324	                bne LD324
4056	.d318		ae 2b 03	ldx $032b	                ldx $032B
4057	.d31b		a0 00		ldy #$00	                ldy #$00
4058	.d31d		20 6f d4	jsr $d46f	                jsr LD46F
4059	.d320		f0 11		beq $d333	                beq LD333
4060	.d322		49 80		eor #$80	                eor #$80
4061	.d324						LD324:
4062	.d324		86 da		stx $da		                stx $DA
4063	.d326		45 da		eor $da		                eor $DA
4064	.d328		aa		tax		                tax
4065	.d329						LD329:
4066	.d329		8a		txa		                txa
4067	.d32a		29 80		and #$80	                and #$80
4068	.d32c		f0 02		beq $d330	                beq LD330
4069	.d32e		a9 c0		lda #$c0	                lda #$C0
4070	.d330						LD330:
4071	.d330		04 e1		tsb $e1		                tsb $E1
4072	.d332		18		clc		                clc
4073	.d333						LD333:
4074	.d333		60		rts		                rts

4076	.d334						LD334:
4077	.d334		a5 e1		lda $e1		                lda $E1
4078	.d336		8d 48 88	sta $8848	                sta L8848
4079	.d339		89 03		bit #$03	                bit #$03
4080	.d33b		f0 f6		beq $d333	                beq LD333
4081	.d33d		a9 10		lda #$10	                lda #$10
4082	.d33f		85 dc		sta $dc		                sta $DC
4083	.d341		0a		asl a		                asl a
4084	.d342		85 dd		sta $dd		                sta $DD
4085	.d344		a2 1b		ldx #$1b	                ldx #$1B
4086	.d346		20 4f d3	jsr $d34f	                jsr LD34F
4087	.d349		06 dc		asl $dc		                asl $DC
4088	.d34b		46 dd		lsr $dd		                lsr $DD
4089	.d34d		a2 28		ldx #$28	                ldx #$28
4090	.d34f						LD34F:
4091	.d34f		a9 80		lda #$80	                lda #$80
4092	.d351		85 da		sta $da		                sta $DA
4093	.d353		bd 02 03	lda $0302,x	                lda $0302,x
4094	.d356		cd 32 88	cmp $8832	                cmp L8832
4095	.d359		d0 d8		bne $d333	                bne LD333
4096	.d35b		bd 03 03	lda $0303,x	                lda $0303,x
4097	.d35e		cd 33 88	cmp $8833	                cmp L8833
4098	.d361		d0 d0		bne $d333	                bne LD333
4099	.d363		bc 00 03	ldy $0300,x	                ldy $0300,x
4100	.d366		bd 01 03	lda $0301,x	                lda $0301,x
4101	.d369		10 05		bpl $d370	                bpl LD370
4102	.d36b		46 da		lsr $da		                lsr $DA
4103	.d36d		20 2e c9	jsr $c92e	                jsr negateAY
4104	.d370						LD370:
4105	.d370		cc 30 88	cpy $8830	                cpy L8830
4106	.d373		d0 be		bne $d333	                bne LD333
4107	.d375		cd 31 88	cmp $8831	                cmp L8831
4108	.d378		d0 b9		bne $d333	                bne LD333
4109	.d37a		a5 e1		lda $e1		                lda $E1
4110	.d37c		89 02		bit #$02	                bit #$02
4111	.d37e		f0 19		beq $d399	                beq LD399
4112	.d380		a0 30		ldy #$30	                ldy #$30
4113	.d382		89 01		bit #$01	                bit #$01
4114	.d384		f0 02		beq $d388	                beq LD388
4115	.d386		a4 dc		ldy $dc		                ldy $DC
4116	.d388						LD388:
4117	.d388		98		tya		                tya
4118	.d389		4a		lsr a		                lsr a
4119	.d38a		4a		lsr a		                lsr a
4120	.d38b		24 e1		bit $e1		                bit $E1
4121	.d38d		d0 06		bne $d395	                bne LD395
4122	.d38f		05 dc		ora $dc		                ora $DC
4123	.d391		04 e1		tsb $e1		                tsb $E1
4124	.d393		80 04		bra $d399	                bra LD399

4126	.d395						LD395:
4127	.d395		05 dd		ora $dd		                ora $DD
4128	.d397		14 e1		trb $e1		                trb $E1
4129	.d399						LD399:
4130	.d399		a5 da		lda $da		                lda $DA
4131	.d39b		24 e1		bit $e1		                bit $E1
4132	.d39d		f0 91		beq $d330	                beq LD330
4133	.d39f		14 e1		trb $e1		                trb $E1
4134	.d3a1		a5 e1		lda $e1		                lda $E1
4135	.d3a3		8d 48 88	sta $8848	                sta L8848
4136	.d3a6		8d 49 88	sta $8849	                sta L8849
4137	.d3a9		60		rts		                rts

4139	.d3aa						LD3AA:
4140	.d3aa		ad 2e 03	lda $032e	                lda $032E
4141	.d3ad		8d 32 88	sta $8832	                sta L8832
4142	.d3b0		ad 2f 03	lda $032f	                lda $032F
4143	.d3b3		8d 33 88	sta $8833	                sta L8833
4144	.d3b6		20 fc d3	jsr $d3fc	                jsr LD3FC
4145	.d3b9		20 13 d5	jsr $d513	                jsr LD513
4146	.d3bc		8c 30 88	sty $8830	                sty L8830
4147	.d3bf		ad 46 88	lda $8846	                lda L8846
4148	.d3c2		4a		lsr a		                lsr a
4149	.d3c3		ad 3d 88	lda $883d	                lda L883D
4150	.d3c6		90 06		bcc $d3ce	                bcc LD3CE
4151	.d3c8		c9 80		cmp #$80	                cmp #$80
4152	.d3ca		6a		ror a		                ror a
4153	.d3cb		6e 30 88	ror $8830	                ror L8830
4154	.d3ce						LD3CE:
4155	.d3ce		8d 31 88	sta $8831	                sta L8831
4156	.d3d1		60		rts		                rts

4158	.d3d2						LD3D2:
4159	.d3d2		9c 47 88	stz $8847	                stz L8847
4160	.d3d5		9c 30 88	stz $8830	                stz L8830
4161	.d3d8		9c 31 88	stz $8831	                stz L8831
4162	.d3db		9c 34 88	stz $8834	                stz L8834
4163	.d3de		9c 35 88	stz $8835	                stz L8835
4164	.d3e1		ad 32 88	lda $8832	                lda L8832
4165	.d3e4		0a		asl a		                asl a
4166	.d3e5		8d 36 88	sta $8836	                sta L8836
4167	.d3e8		ad 33 88	lda $8833	                lda L8833
4168	.d3eb		2a		rol a		                rol a
4169	.d3ec		8d 37 88	sta $8837	                sta L8837
4170	.d3ef		ad 46 88	lda $8846	                lda L8846
4171	.d3f2		89 02		bit #$02	                bit #$02
4172	.d3f4		f0 06		beq $d3fc	                beq LD3FC
4173	.d3f6		0e 36 88	asl $8836	                asl L8836
4174	.d3f9		2e 37 88	rol $8837	                rol L8837
4175	.d3fc						LD3FC:
4176	.d3fc		ad 46 88	lda $8846	                lda L8846
4177	.d3ff		4a		lsr a		                lsr a
4178	.d400		4a		lsr a		                lsr a
4179	.d401		ac 32 88	ldy $8832	                ldy L8832
4180	.d404		ad 33 88	lda $8833	                lda L8833
4181	.d407		20 c5 d4	jsr $d4c5	                jsr LD4C5
4182	.d40a		38		sec		                sec
4183	.d40b		a2 fc		ldx #$fc	                ldx #$FC
4184	.d40d						LD40D:
4185	.d40d		bd 3c 87	lda $873c,x	                lda L873C,x
4186	.d410		fd 44 87	sbc $8744,x	                sbc L8744,x
4187	.d413		9d 44 87	sta $8744,x	                sta L8744,x
4188	.d416		e8		inx		                inx
4189	.d417		d0 f4		bne $d40d	                bne LD40D
4190	.d419		60		rts		                rts

4192	.d41a						LD41A:
4193	.d41a		20 1a c9	jsr $c91a	                jsr copyGraphicsCursorPixelsToOldGraphicsCursorPixels
4194	.d41d		64 e1		stz $e1		                stz $E1
4195	.d41f		a2 20		ldx #$20	                ldx #$20
4196	.d421		20 27 d4	jsr $d427	                jsr LD427
4197	.d424		60		rts		                rts

4199	.d425						LD425:
4200	.d425		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX
4201	.d427						LD427:
4202	.d427		a0 1b		ldy #$1b	                ldy #VDUVariables.queueEnd-9
4203	.d429		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
4204	.d42c		a2 1b		ldx #$1b	                ldx #$1B
4205	.d42e		20 68 d2	jsr $d268	                jsr LD268
4206	.d431		20 86 d4	jsr $d486	                jsr LD486
4207	.d434		20 13 d5	jsr $d513	                jsr LD513
4208	.d437		a0 0c		ldy #$0c	                ldy #$0C
4209	.d439		20 ab d4	jsr $d4ab	                jsr LD4AB
4210	.d43c		20 13 d5	jsr $d513	                jsr LD513
4211	.d43f		c9 20		cmp #$20	                cmp #$20
4212	.d441		90 05		bcc $d448	                bcc LD448
4213	.d443		68		pla		                pla
4214	.d444		68		pla		                pla
4215	.d445		68		pla		                pla
4216	.d446		68		pla		                pla
4217	.d447		60		rts		                rts

4219	.d448						LD448:
4220	.d448		8c 44 88	sty $8844	                sty L8844
4221	.d44b		8d 45 88	sta $8845	                sta L8845
4222	.d44e		ad 46 88	lda $8846	                lda L8846
4223	.d451		89 02		bit #$02	                bit #$02
4224	.d453		f0 06		beq $d45b	                beq LD45B
4225	.d455		4e 45 88	lsr $8845	                lsr L8845
4226	.d458		6e 44 88	ror $8844	                ror L8844
4227	.d45b						LD45B:
4228	.d45b		ac 44 88	ldy $8844	                ldy L8844
4229	.d45e		ad 45 88	lda $8845	                lda L8845
4230	.d461		20 2e c9	jsr $c92e	                jsr negateAY
4231	.d464		8c 32 88	sty $8832	                sty L8832
4232	.d467		8d 33 88	sta $8833	                sta L8833
4233	.d46a		0d 32 88	ora $8832	                ora L8832
4234	.d46d		38		sec		                sec
4235	.d46e		60		rts		                rts

4237	.d46f						LD46F:
4238	.d46f		64 da		stz $da		                stz $DA
4239	.d471		b9 1b 03	lda $031b,y	                lda $031B,y
4240	.d474		d9 28 03	cmp $0328,y	                cmp $0328,y
4241	.d477		f0 02		beq $d47b	                beq LD47B
4242	.d479		e6 da		inc $da		                inc $DA
4243	.d47b						LD47B:
4244	.d47b		b9 1c 03	lda $031c,y	                lda $031C,y
4245	.d47e		f9 29 03	sbc $0329,y	                sbc $0329,y
4246	.d481		d0 02		bne $d485	                bne LD485
4247	.d483		a5 da		lda $da		                lda $DA
4248	.d485						LD485:
4249	.d485		60		rts		                rts

4251	.d486						LD486:
4252	.d486		ae 55 03	ldx $0355	                ldx $0355
4253	.d489		bd bf d4	lda $d4bf,x	                lda LD4BF,x
4254	.d48c		8d 46 88	sta $8846	                sta L8846
4255	.d48f		4a		lsr a		                lsr a
4256	.d490		48		pha		                pha
4257	.d491		a2 04		ldx #$04	                ldx #$04
4258	.d493						LD493:
4259	.d493		9e 37 88	stz $8837,x	                stz L8837,x
4260	.d496		ca		dex		                dex
4261	.d497		d0 fa		bne $d493	                bne LD493
4262	.d499		20 a0 d4	jsr $d4a0	                jsr LD4A0
4263	.d49c		68		pla		                pla
4264	.d49d		4a		lsr a		                lsr a
4265	.d49e		a2 02		ldx #$02	                ldx #$02
4266	.d4a0						LD4A0:
4267	.d4a0		bc 1b 03	ldy $031b,x	                ldy $031B,x
4268	.d4a3		bd 1c 03	lda $031c,x	                lda $031C,x
4269	.d4a6		20 c5 d4	jsr $d4c5	                jsr LD4C5
4270	.d4a9		a0 10		ldy #$10	                ldy #$10
4271	.d4ab						LD4AB:
4272	.d4ab		18		clc		                clc
4273	.d4ac		a2 fc		ldx #$fc	                ldx #$FC
4274	.d4ae						LD4AE:
4275	.d4ae		bd 3c 87	lda $873c,x	                lda L873C,x
4276	.d4b1		79 30 88	adc $8830,y	                adc L8830,y
4277	.d4b4		9d 3c 87	sta $873c,x	                sta L873C,x
4278	.d4b7		9d 44 87	sta $8744,x	                sta L8744,x
4279	.d4ba		c8		iny		                iny
4280	.d4bb		e8		inx		                inx
4281	.d4bc		d0 f0		bne $d4ae	                bne LD4AE
4282	.d4be		60		rts		                rts

4284	.d4bf						LD4BF:
4285	>d4bf		02				                .byte $02
4286	.d4c0		00		brk #		                brk
4287	.d4c1		01 ff		ora ($ff,x)	                ora ($FF,x)
4288	.d4c3		00		brk #		                brk
4289							;ORA (&8C,x)      :\ D4C4= 01       ..
4290	>d4c4		01				                .byte $01
4291	.d4c5						LD4C5:
4292	.d4c5		8c 3c 88	sty $883c	                sty L883C
4293	.d4c8		90 04		bcc $d4ce	                bcc LD4CE
4294	.d4ca		0e 3c 88	asl $883c	                asl L883C
4295	.d4cd		2a		rol a		                rol a
4296	.d4ce						LD4CE:
4297	.d4ce		8d 3d 88	sta $883d	                sta L883D
4298	.d4d1		ac 3c 88	ldy $883c	                ldy L883C
4299	.d4d4		aa		tax		                tax
4300	.d4d5		10 03		bpl $d4da	                bpl LD4DA
4301	.d4d7		20 2e c9	jsr $c92e	                jsr negateAY
4302	.d4da						LD4DA:
4303	.d4da		8c 3c 88	sty $883c	                sty L883C
4304	.d4dd		8d 3d 88	sta $883d	                sta L883D
4305	.d4e0		8c 40 88	sty $8840	                sty L8840
4306	.d4e3		9c 42 88	stz $8842	                stz L8842
4307	.d4e6		9c 43 88	stz $8843	                stz L8843
4308	.d4e9		a0 0f		ldy #$0f	                ldy #$0F
4309	.d4eb		4a		lsr a		                lsr a
4310	.d4ec		8d 41 88	sta $8841	                sta L8841
4311	.d4ef		6e 40 88	ror $8840	                ror L8840
4312	.d4f2						LD4F2:
4313	.d4f2		90 13		bcc $d507	                bcc LD507
4314	.d4f4		18		clc		                clc
4315	.d4f5		ad 3c 88	lda $883c	                lda L883C
4316	.d4f8		6d 42 88	adc $8842	                adc L8842
4317	.d4fb		8d 42 88	sta $8842	                sta L8842
4318	.d4fe		ad 3d 88	lda $883d	                lda L883D
4319	.d501		6d 43 88	adc $8843	                adc L8843
4320	.d504		8d 43 88	sta $8843	                sta L8843
4321	.d507						LD507:
4322	.d507		a2 03		ldx #$03	                ldx #$03
4323	.d509						LD509:
4324	.d509		7e 40 88	ror $8840,x	                ror L8840,x
4325	.d50c		ca		dex		                dex
4326	.d50d		10 fa		bpl $d509	                bpl LD509
4327	.d50f		88		dey		                dey
4328	.d510		10 e0		bpl $d4f2	                bpl LD4F2
4329	.d512		60		rts		                rts

4331	.d513						LD513:
4332	.d513		a2 02		ldx #$02	                ldx #$02
4333	.d515						LD515:
4334	.d515		9e 3c 88	stz $883c,x	                stz L883C,x
4335	.d518		74 db		stz $db,x	                stz $DB,x
4336	.d51a		ca		dex		                dex
4337	.d51b		10 f8		bpl $d515	                bpl LD515
4338	.d51d		a0 03		ldy #$03	                ldy #$03
4339	.d51f						LD51F:
4340	.d51f		b9 40 88	lda $8840,y	                lda L8840,y
4341	.d522		85 da		sta $da		                sta $DA
4342	.d524		5a		phy		                phy
4343	.d525		a0 03		ldy #$03	                ldy #$03
4344	.d527						LD527:
4345	.d527		5a		phy		                phy
4346	.d528		38		sec		                sec
4347	.d529		2e 3c 88	rol $883c	                rol L883C
4348	.d52c		2e 3d 88	rol $883d	                rol L883D
4349	.d52f		2e 3e 88	rol $883e	                rol L883E
4350	.d532		a2 01		ldx #$01	                ldx #$01
4351	.d534		a5 db		lda $db		                lda $DB
4352	.d536						LD536:
4353	.d536		06 da		asl $da		                asl $DA
4354	.d538		2a		rol a		                rol a
4355	.d539		26 dc		rol $dc		                rol $DC
4356	.d53b		26 dd		rol $dd		                rol $DD
4357	.d53d		ca		dex		                dex
4358	.d53e		10 f6		bpl $d536	                bpl LD536
4359	.d540		85 db		sta $db		                sta $DB
4360	.d542		38		sec		                sec
4361	.d543		ed 3c 88	sbc $883c	                sbc L883C
4362	.d546		aa		tax		                tax
4363	.d547		a5 dc		lda $dc		                lda $DC
4364	.d549		ed 3d 88	sbc $883d	                sbc L883D
4365	.d54c		a8		tay		                tay
4366	.d54d		a5 dd		lda $dd		                lda $DD
4367	.d54f		ed 3e 88	sbc $883e	                sbc L883E
4368	.d552		90 0b		bcc $d55f	                bcc LD55F
4369	.d554		85 dd		sta $dd		                sta $DD
4370	.d556		84 dc		sty $dc		                sty $DC
4371	.d558		86 db		stx $db		                stx $DB
4372	.d55a		ee 3c 88	inc $883c	                inc L883C
4373	.d55d		80 03		bra $d562	                bra LD562

4375	.d55f						LD55F:
4376	.d55f		ce 3c 88	dec $883c	                dec L883C
4377	.d562						LD562:
4378	.d562		7a		ply		                ply
4379	.d563		88		dey		                dey
4380	.d564		10 c1		bpl $d527	                bpl LD527
4381	.d566		7a		ply		                ply
4382	.d567		88		dey		                dey
4383	.d568		10 b5		bpl $d51f	                bpl LD51F
4384	.d56a		4e 3e 88	lsr $883e	                lsr L883E
4385	.d56d		6e 3d 88	ror $883d	                ror L883D
4386	.d570		6e 3c 88	ror $883c	                ror L883C
4387	.d573		9c 3e 88	stz $883e	                stz L883E
4388	.d576		9c 3f 88	stz $883f	                stz L883F
4389	.d579		ac 3c 88	ldy $883c	                ldy L883C
4390	.d57c		ad 3d 88	lda $883d	                lda L883D
4391	.d57f		60		rts		                rts

4393							;-------------------------------------------------------------------------
4394							;
4395							; Add dimension of region to a coordinate.
4396							;
4397							; entry:
4398							;
4399							; X = VDU variable offset of coordinate
4400							;
4401							; A = VDU variable offset of minimum coordinate of region
4402							;
4403							; Y = VDU variable offset of maximum coordinate of region
4404							;
4405							; ZTEMP?0 = VDU variable offset for result
4406							;
4407							; exit:
4408							;
4409							; result variable = coordinate+(min-max)
4410							;
4411	.d580						addRegionDimensionsToVDUVariableCoordinates:
4412	.d580		20 8d d5	jsr $d58d	                jsr addRegionDimensionToVDUVariableCoordinate ;do X

4414							                ; bump offsets to do Y.
4415	.d583		c8		iny		                iny
4416	.d584		c8		iny		                iny
4417	.d585		e8		inx		                inx
4418	.d586		e8		inx		                inx
4419	.d587		1a		inc a		                inc a
4420	.d588		1a		inc a		                inc a
4421	.d589		e6 da		inc $da		                inc ZTEMP+0
4422	.d58b		e6 da		inc $da		                inc ZTEMP+0

4424							                ; TODO - not a great name. Could probably just be
4425							                ; addDifference, or something.
4426	.d58d						addRegionDimensionToVDUVariableCoordinate:
4427	.d58d		da		phx		                phx                          ;save VX
4428	.d58e		5a		phy		                phy                          ;save VY
4429	.d58f		48		pha		                pha                          ;save VA
4430	.d590		18		clc		                clc
4431	.d591		bd 00 03	lda $0300,x	                lda vduv+0,x                 ;<VX
4432	.d594		79 00 03	adc $0300,y	                adc vduv+0,y                 ;<(VX+VY)
4433	.d597		85 de		sta $de		                sta ZTEMPC+0                 ;ZTEMPC?0=<(VX+VY)
4434	.d599		bd 01 03	lda $0301,x	                lda vduv+1,x                 ;>VX
4435	.d59c		79 01 03	adc $0301,y	                adc vduv+1,y                 ;>(VX+VY)
4436	.d59f		fa		plx		                plx                          ;X=VA
4437	.d5a0		48		pha		                pha                          ;save >(VX+VY)
4438	.d5a1		a4 da		ldy $da		                ldy ZTEMP+0                  ;Y=VT
4439	.d5a3		38		sec		                sec
4440	.d5a4		a5 de		lda $de		                lda ZTEMPC+0                 ;<(VX+VY)
4441	.d5a6		fd 00 03	sbc $0300,x	                sbc vduv+0,x                 ;<(VX+VY-VA)
4442	.d5a9		99 00 03	sta $0300,y	                sta vduv+0,y                 ;<VT=<(VX+VY-VA)
4443	.d5ac		68		pla		                pla                          ;>(VX+VY)
4444	.d5ad		fd 01 03	sbc $0301,x	                sbc vduv+1,x                 ;>(VX+VY-VA)
4445	.d5b0		99 01 03	sta $0301,y	                sta vduv+1,y                 ;>VT=<(VX+VY-VA)
4446	.d5b3		8a		txa		                txa                          ;restore old A
4447	.d5b4		7a		ply		                ply                          ;restore old Y
4448	.d5b5		fa		plx		                plx                          ;restore old X
4449	.d5b6		60		rts		                rts

4451							;-------------------------------------------------------------------------
4452							;
4453							; Sort points by Y coordinate, then X.
4454							;
4455							; entry:
4456							;
4457							; X = VDU variable offset of point A (4 bytes: X;Y;)
4458							;
4459							; Y = VDU variable offset of point B (4 bytes: X;Y;)
4460							;
4461							; exit:
4462							;
4463							; X = offset of point with lesser Y (or lesser X, if same Y)
4464							;
4465							; Y = offset of point with greater Y (or greater X, if same Y)
4466							;
4467	.d5b7						sortVDUVariableCoordinates:
4468	.d5b7		38		sec		                sec
4469	.d5b8		b9 02 03	lda $0302,y	                lda vduv+2,y
4470	.d5bb		fd 02 03	sbc $0302,x	                sbc vduv+2,x
4471	.d5be		85 de		sta $de		                sta ZTEMPC
4472	.d5c0		b9 03 03	lda $0303,y	                lda vduv+3,y
4473	.d5c3		fd 03 03	sbc $0303,x	                sbc vduv+3,x
4474	.d5c6		30 09		bmi $d5d1	                bmi exchangeXAndY           ;taken if PX.y>PY.y
4475	.d5c8		05 de		ora $de		                ora ZTEMPC
4476	.d5ca		d0 09		bne $d5d5	                bne rtsD5D5                  ;taken if PX.y<PY.y

4478							;-------------------------------------------------------------------------
4479							;
4480							; Sort words by value.
4481							;
4482							; entry:
4483							;
4484							; X = VDU variable offset of word A
4485							;
4486							; Y = VDU variable offset of word B
4487							;
4488							; exit:
4489							;
4490							; X = offset of lesser value
4491							;
4492							; Y = offset of greater value
4493							;
4494	.d5cc						sortVDUVariableWords:
4495	.d5cc		20 d6 d5	jsr $d5d6	                jsr compareVDUVariableWords
4496	.d5cf		10 04		bpl $d5d5	                bpl rtsD5D5
4497	.d5d1						exchangeXAndY:
4498	.d5d1		8a		txa		                txa
4499	.d5d2		5a		phy		                phy
4500	.d5d3		fa		plx		                plx
4501	.d5d4		a8		tay		                tay
4502	.d5d5						rtsD5D5:
4503	.d5d5		60		rts		                rts

4505							;-------------------------------------------------------------------------
4506							;
4507							; Compare 2 16-bit VDU variable values.
4508							;
4509							; entry:
4510							;
4511							; X = offset of one variable
4512							;
4513							; Y = offset of the other variable
4514							;
4515							; exit:
4516							;
4517							; N=1 if X>Y
4518							;
4519	.d5d6						compareVDUVariableWords:
4520	.d5d6		b9 00 03	lda $0300,y	                lda vduv+0,y
4521	.d5d9		dd 00 03	cmp $0300,x	                cmp vduv+0,x
4522	.d5dc		b9 01 03	lda $0301,y	                lda vduv+1,y
4523	.d5df		fd 01 03	sbc $0301,x	                sbc vduv+1,x
4524	.d5e2		60		rts		                rts

4526							;-------------------------------------------------------------------------

4528	.d5e3						LD5E3:
4529	.d5e3		ee 47 88	inc $8847	                inc L8847
4530	.d5e6						LD5E6:
4531	.d5e6		ad 47 88	lda $8847	                lda L8847
4532	.d5e9		d0 0f		bne $d5fa	                bne LD5FA
4533	.d5eb		ad 32 88	lda $8832	                lda L8832
4534	.d5ee		0d 33 88	ora $8833	                ora L8833
4535	.d5f1		f0 f0		beq $d5e3	                beq LD5E3
4536	.d5f3		a2 00		ldx #$00	                ldx #$00
4537	.d5f5		20 44 d6	jsr $d644	                jsr LD644
4538	.d5f8		10 49		bpl $d643	                bpl LD643
4539	.d5fa						LD5FA:
4540	.d5fa		a2 02		ldx #$02	                ldx #$02
4541	.d5fc		20 44 d6	jsr $d644	                jsr LD644
4542	.d5ff		10 42		bpl $d643	                bpl LD643
4543	.d601		a2 00		ldx #$00	                ldx #$00
4544	.d603		20 0a d6	jsr $d60a	                jsr LD60A
4545	.d606		10 3b		bpl $d643	                bpl LD643
4546	.d608		a2 02		ldx #$02	                ldx #$02
4547	.d60a						LD60A:
4548	.d60a		bd 30 88	lda $8830,x	                lda L8830,x
4549	.d60d		d0 03		bne $d612	                bne LD612
4550	.d60f		de 31 88	dec $8831,x	                dec L8831,x
4551	.d612						LD612:
4552	.d612		de 30 88	dec $8830,x	                dec L8830,x
4553	.d615		8a		txa		                txa
4554	.d616		4a		lsr a		                lsr a
4555	.d617		1a		inc a		                inc a
4556	.d618		2c 46 88	bit $8846	                bit L8846
4557	.d61b		f0 03		beq $d620	                beq LD620
4558	.d61d		20 20 d6	jsr $d620	                jsr LD620
4559	.d620						LD620:
4560	.d620		20 36 d6	jsr $d636	                jsr LD636
4561	.d623		18		clc		                clc
4562	.d624		ad 40 88	lda $8840	                lda L8840
4563	.d627		7d 34 88	adc $8834,x	                adc L8834,x
4564	.d62a		8d 40 88	sta $8840	                sta L8840
4565	.d62d		ad 41 88	lda $8841	                lda L8841
4566	.d630		7d 35 88	adc $8835,x	                adc L8835,x
4567	.d633		8d 41 88	sta $8841	                sta L8841
4568	.d636						LD636:
4569	.d636		08		php		                php
4570	.d637		bd 34 88	lda $8834,x	                lda L8834,x
4571	.d63a		d0 03		bne $d63f	                bne LD63F
4572	.d63c		de 35 88	dec $8835,x	                dec L8835,x
4573	.d63f						LD63F:
4574	.d63f		de 34 88	dec $8834,x	                dec L8834,x
4575	.d642		28		plp		                plp
4576	.d643						LD643:
4577	.d643		60		rts		                rts

4579	.d644						LD644:
4580	.d644		fe 30 88	inc $8830,x	                inc L8830,x
4581	.d647		d0 03		bne $d64c	                bne LD64C
4582	.d649		fe 31 88	inc $8831,x	                inc L8831,x
4583	.d64c						LD64C:
4584	.d64c		8a		txa		                txa
4585	.d64d		4a		lsr a		                lsr a
4586	.d64e		1a		inc a		                inc a
4587	.d64f		2c 46 88	bit $8846	                bit L8846
4588	.d652		f0 03		beq $d657	                beq LD657
4589	.d654		20 57 d6	jsr $d657	                jsr LD657
4590	.d657						LD657:
4591	.d657		20 6d d6	jsr $d66d	                jsr LD66D
4592	.d65a		38		sec		                sec
4593	.d65b		ad 40 88	lda $8840	                lda L8840
4594	.d65e		fd 34 88	sbc $8834,x	                sbc L8834,x
4595	.d661		8d 40 88	sta $8840	                sta L8840
4596	.d664		ad 41 88	lda $8841	                lda L8841
4597	.d667		fd 35 88	sbc $8835,x	                sbc L8835,x
4598	.d66a		8d 41 88	sta $8841	                sta L8841
4599	.d66d						LD66D:
4600	.d66d		08		php		                php
4601	.d66e		fe 34 88	inc $8834,x	                inc L8834,x
4602	.d671		d0 03		bne $d676	                bne LD676
4603	.d673		fe 35 88	inc $8835,x	                inc L8835,x
4604	.d676						LD676:
4605	.d676		28		plp		                plp
4606	.d677		60		rts		                rts

4608	.d678						LD678:
4609	.d678		48		pha		                pha
4610	.d679		38		sec		                sec
4611	.d67a		b9 00 03	lda $0300,y	                lda $0300,y
4612	.d67d		fd 00 03	sbc $0300,x	                sbc $0300,x
4613	.d680		48		pha		                pha
4614	.d681		b9 01 03	lda $0301,y	                lda $0301,y
4615	.d684		fd 01 03	sbc $0301,x	                sbc $0301,x
4616	.d687		7a		ply		                ply
4617	.d688		c9 80		cmp #$80	                cmp #$80
4618	.d68a		90 03		bcc $d68f	                bcc LD68F
4619	.d68c		20 2e c9	jsr $c92e	                jsr negateAY
4620	.d68f						LD68F:
4621	.d68f		fa		plx		                plx
4622	.d690		9d 01 03	sta $0301,x	                sta $0301,x
4623	.d693		98		tya		                tya
4624	.d694		9d 00 03	sta $0300,x	                sta $0300,x
4625	.d697		60		rts		                rts

4627	.d698						LD698:
4628	.d698		a2 37		ldx #$37	                ldx #$37
4629	.d69a		20 23 d7	jsr $d723	                jsr LD723
4630	.d69d						LD69D:
4631	.d69d		3c 0a 03	bit $030a,x	                bit $030A,x
4632	.d6a0		70 10		bvs $d6b2	                bvs LD6B2
4633	.d6a2		60		rts		                rts

4635	.d6a3						LD6A3:
4636	.d6a3		a2 2c		ldx #$2c	                ldx #$2C
4637	.d6a5		20 23 d7	jsr $d723	                jsr LD723
4638	.d6a8						LD6A8:
4639	.d6a8		3c 0a 03	bit $030a,x	                bit $030A,x
4640	.d6ab		50 05		bvc $d6b2	                bvc LD6B2
4641	.d6ad		60		rts		                rts

4643	.d6ae						LD6AE:
4644	.d6ae		fa		plx		                plx
4645	.d6af		20 26 d7	jsr $d726	                jsr LD726
4646	.d6b2						LD6B2:
4647	.d6b2		bd 09 03	lda $0309,x	                lda $0309,x
4648	.d6b5		30 10		bmi $d6c7	                bmi LD6C7
4649	.d6b7		a0 03		ldy #$03	                ldy #$03
4650	.d6b9		da		phx		                phx
4651	.d6ba						LD6BA:
4652	.d6ba		bd 00 03	lda $0300,x	                lda $0300,x
4653	.d6bd		dd 1e 88	cmp $881e,x	                cmp L881E,x
4654	.d6c0		d0 ec		bne $d6ae	                bne LD6AE
4655	.d6c2		e8		inx		                inx
4656	.d6c3		88		dey		                dey
4657	.d6c4		10 f4		bpl $d6ba	                bpl LD6BA
4658	.d6c6		fa		plx		                plx
4659	.d6c7						LD6C7:
4660	.d6c7		60		rts		                rts

4662	.d6c8						LD6C8:
4663	.d6c8		20 fd d6	jsr $d6fd	                jsr LD6FD
4664	.d6cb		bd 0a 03	lda $030a,x	                lda $030A,x
4665	.d6ce		0a		asl a		                asl a
4666	.d6cf		0a		asl a		                asl a
4667	.d6d0		bd 0a 03	lda $030a,x	                lda $030A,x
4668	.d6d3		6a		ror a		                ror a
4669	.d6d4		85 da		sta $da		                sta $DA
4670	.d6d6		18		clc		                clc
4671	.d6d7		10 0f		bpl $d6e8	                bpl LD6E8
4672	.d6d9		bd 02 03	lda $0302,x	                lda $0302,x
4673	.d6dc		ed 04 03	sbc $0304	                sbc $0304
4674	.d6df		a8		tay		                tay
4675	.d6e0		bd 03 03	lda $0303,x	                lda $0303,x
4676	.d6e3		ed 05 03	sbc $0305	                sbc $0305
4677	.d6e6		80 0d		bra $d6f5	                bra LD6F5

4679	.d6e8						LD6E8:
4680	.d6e8		ad 00 03	lda $0300	                lda $0300
4681	.d6eb		fd 02 03	sbc $0302,x	                sbc $0302,x
4682	.d6ee		a8		tay		                tay
4683	.d6ef		ad 01 03	lda $0301	                lda $0301
4684	.d6f2		fd 03 03	sbc $0303,x	                sbc $0303,x
4685	.d6f5						LD6F5:
4686	.d6f5		20 a4 d7	jsr $d7a4	                jsr LD7A4
4687	.d6f8		20 fd d6	jsr $d6fd	                jsr LD6FD
4688	.d6fb		80 58		bra $d755	                bra LD755

4690	.d6fd						LD6FD:
4691	.d6fd		8a		txa		                txa
4692	.d6fe		1a		inc a		                inc a
4693	.d6ff		48		pha		                pha
4694	.d700		1a		inc a		                inc a
4695	.d701		a8		tay		                tay
4696	.d702		20 b2 e2	jsr $e2b2	                jsr exchangeTwoVDUBytes
4697	.d705		e8		inx		                inx
4698	.d706		e8		inx		                inx
4699	.d707		c8		iny		                iny
4700	.d708		c8		iny		                iny
4701	.d709		20 b2 e2	jsr $e2b2	                jsr exchangeTwoVDUBytes
4702	.d70c		fa		plx		                plx
4703	.d70d		20 11 d7	jsr $d711	                jsr LD711
4704	.d710		ca		dex		                dex
4705	.d711						LD711:
4706	.d711		bd 08 03	lda $0308,x	                lda $0308,x
4707	.d714		49 ff		eor #$ff	                eor #$FF
4708	.d716		9d 08 03	sta $0308,x	                sta $0308,x
4709	.d719		60		rts		                rts

4711	.d71a						LD71A:
4712	.d71a		20 26 d7	jsr $d726	                jsr LD726
4713	.d71d						LD71D:
4714	.d71d		bd 09 03	lda $0309,x	                lda $0309,x
4715	.d720		10 f8		bpl $d71a	                bpl LD71A
4716	.d722		60		rts		                rts

4718	.d723						LD723:
4719	.d723		20 1d d7	jsr $d71d	                jsr LD71D
4720	.d726						LD726:
4721	.d726		bd 09 03	lda $0309,x	                lda $0309,x
4722	.d729		10 2a		bpl $d755	                bpl LD755
4723	.d72b						LD72B:
4724	.d72b		18		clc		                clc
4725	.d72c		bd 08 03	lda $0308,x	                lda $0308,x
4726	.d72f		7d 04 03	adc $0304,x	                adc $0304,x
4727	.d732		9d 08 03	sta $0308,x	                sta $0308,x
4728	.d735		bd 09 03	lda $0309,x	                lda $0309,x
4729	.d738		7d 05 03	adc $0305,x	                adc $0305,x
4730	.d73b		9d 09 03	sta $0309,x	                sta $0309,x
4731	.d73e		30 03		bmi $d743	                bmi LD743
4732	.d740		20 55 d7	jsr $d755	                jsr LD755
4733	.d743						LD743:
4734	.d743		da		phx		                phx
4735	.d744		e8		inx		                inx
4736	.d745		e8		inx		                inx
4737	.d746		3c 08 03	bit $0308,x	                bit $0308,x
4738	.d749		30 23		bmi $d76e	                bmi LD76E
4739	.d74b						LD74B:
4740	.d74b		fe 00 03	inc $0300,x	                inc $0300,x
4741	.d74e		d0 03		bne $d753	                bne LD753
4742	.d750		fe 01 03	inc $0301,x	                inc $0301,x
4743	.d753						LD753:
4744	.d753		fa		plx		                plx
4745	.d754		60		rts		                rts

4747	.d755						LD755:
4748	.d755		38		sec		                sec
4749	.d756		bd 08 03	lda $0308,x	                lda $0308,x
4750	.d759		fd 06 03	sbc $0306,x	                sbc $0306,x
4751	.d75c		9d 08 03	sta $0308,x	                sta $0308,x
4752	.d75f		bd 09 03	lda $0309,x	                lda $0309,x
4753	.d762		fd 07 03	sbc $0307,x	                sbc $0307,x
4754	.d765		9d 09 03	sta $0309,x	                sta $0309,x
4755	.d768		da		phx		                phx
4756	.d769		3c 0a 03	bit $030a,x	                bit $030A,x
4757	.d76c		50 dd		bvc $d74b	                bvc LD74B
4758	.d76e						LD76E:
4759	.d76e		bd 00 03	lda $0300,x	                lda $0300,x
4760	.d771		d0 03		bne $d776	                bne LD776
4761	.d773		de 01 03	dec $0301,x	                dec $0301,x
4762	.d776						LD776:
4763	.d776		de 00 03	dec $0300,x	                dec $0300,x
4764	.d779		fa		plx		                plx
4765	.d77a		60		rts		                rts

4767	.d77b						LD77B:
4768	.d77b		18		clc		                clc
4769	.d77c		bd 0a 03	lda $030a,x	                lda $030A,x
4770	.d77f		85 da		sta $da		                sta $DA
4771	.d781		10 0f		bpl $d792	                bpl LD792
4772	.d783		bd 02 03	lda $0302,x	                lda $0302,x
4773	.d786		ed 06 03	sbc $0306	                sbc $0306
4774	.d789		a8		tay		                tay
4775	.d78a		bd 03 03	lda $0303,x	                lda $0303,x
4776	.d78d		ed 07 03	sbc $0307	                sbc $0307
4777	.d790		80 0d		bra $d79f	                bra LD79F

4779	.d792						LD792:
4780	.d792		ad 02 03	lda $0302	                lda $0302
4781	.d795		fd 02 03	sbc $0302,x	                sbc $0302,x
4782	.d798		a8		tay		                tay
4783	.d799		ad 03 03	lda $0303	                lda $0303
4784	.d79c		fd 03 03	sbc $0303,x	                sbc $0303,x
4785	.d79f						LD79F:
4786	.d79f		20 a4 d7	jsr $d7a4	                jsr LD7A4
4787	.d7a2		80 87		bra $d72b	                bra LD72B

4789	.d7a4						LD7A4:
4790	.d7a4		84 de		sty $de		                sty $DE
4791	.d7a6		85 df		sta $df		                sta $DF
4792	.d7a8		bd 02 03	lda $0302,x	                lda $0302,x
4793	.d7ab		bc 03 03	ldy $0303,x	                ldy $0303,x
4794	.d7ae		06 da		asl $da		                asl $DA
4795	.d7b0		b0 0a		bcs $d7bc	                bcs LD7BC
4796	.d7b2		65 de		adc $de		                adc $DE
4797	.d7b4		9d 02 03	sta $0302,x	                sta $0302,x
4798	.d7b7		98		tya		                tya
4799	.d7b8		65 df		adc $df		                adc $DF
4800	.d7ba		80 08		bra $d7c4	                bra LD7C4

4802	.d7bc						LD7BC:
4803	.d7bc		e5 de		sbc $de		                sbc $DE
4804	.d7be		9d 02 03	sta $0302,x	                sta $0302,x
4805	.d7c1		98		tya		                tya
4806	.d7c2		e5 df		sbc $df		                sbc $DF
4807	.d7c4						LD7C4:
4808	.d7c4		9d 03 03	sta $0303,x	                sta $0303,x
4809	.d7c7		a9 00		lda #$00	                lda #$00
4810	.d7c9		3c 09 03	bit $0309,x	                bit $0309,x
4811	.d7cc		10 01		bpl $d7cf	                bpl LD7CF
4812	.d7ce		3a		dec a		                dec a
4813	.d7cf						LD7CF:
4814	.d7cf		85 dc		sta $dc		                sta $DC
4815	.d7d1		4a		lsr a		                lsr a
4816	.d7d2		85 dd		sta $dd		                sta $DD
4817	.d7d4		a0 10		ldy #$10	                ldy #$10
4818	.d7d6						LD7D6:
4819	.d7d6		a5 dd		lda $dd		                lda $DD
4820	.d7d8		0a		asl a		                asl a
4821	.d7d9		3e 08 03	rol $0308,x	                rol $0308,x
4822	.d7dc		3e 09 03	rol $0309,x	                rol $0309,x
4823	.d7df		26 dc		rol $dc		                rol $DC
4824	.d7e1		26 dd		rol $dd		                rol $DD
4825	.d7e3		06 de		asl $de		                asl $DE
4826	.d7e5		26 df		rol $df		                rol $DF
4827	.d7e7		90 19		bcc $d802	                bcc LD802
4828	.d7e9		18		clc		                clc
4829	.d7ea		a5 dc		lda $dc		                lda $DC
4830	.d7ec		7d 04 03	adc $0304,x	                adc $0304,x
4831	.d7ef		85 dc		sta $dc		                sta $DC
4832	.d7f1		a5 dd		lda $dd		                lda $DD
4833	.d7f3		7d 05 03	adc $0305,x	                adc $0305,x
4834	.d7f6		85 dd		sta $dd		                sta $DD
4835	.d7f8		90 08		bcc $d802	                bcc LD802
4836	.d7fa		fe 08 03	inc $0308,x	                inc $0308,x
4837	.d7fd		d0 03		bne $d802	                bne LD802
4838	.d7ff		fe 09 03	inc $0309,x	                inc $0309,x
4839	.d802						LD802:
4840	.d802		88		dey		                dey
4841	.d803		d0 d1		bne $d7d6	                bne LD7D6
4842	.d805		3c 09 03	bit $0309,x	                bit $0309,x
4843	.d808		50 0b		bvc $d815	                bvc LD815
4844	.d80a		a5 dc		lda $dc		                lda $DC
4845	.d80c		9d 08 03	sta $0308,x	                sta $0308,x
4846	.d80f		a5 dd		lda $dd		                lda $DD
4847	.d811		9d 09 03	sta $0309,x	                sta $0309,x
4848	.d814		60		rts		                rts

4850	.d815						LD815:
4851	.d815		a0 10		ldy #$10	                ldy #$10
4852	.d817						LD817:
4853	.d817		26 dc		rol $dc		                rol $DC
4854	.d819		26 dd		rol $dd		                rol $DD
4855	.d81b		3e 08 03	rol $0308,x	                rol $0308,x
4856	.d81e		3e 09 03	rol $0309,x	                rol $0309,x
4857	.d821		38		sec		                sec
4858	.d822		bd 08 03	lda $0308,x	                lda $0308,x
4859	.d825		fd 06 03	sbc $0306,x	                sbc $0306,x
4860	.d828		85 de		sta $de		                sta $DE
4861	.d82a		bd 09 03	lda $0309,x	                lda $0309,x
4862	.d82d		fd 07 03	sbc $0307,x	                sbc $0307,x
4863	.d830		90 08		bcc $d83a	                bcc LD83A
4864	.d832		9d 09 03	sta $0309,x	                sta $0309,x
4865	.d835		a5 de		lda $de		                lda $DE
4866	.d837		9d 08 03	sta $0308,x	                sta $0308,x
4867	.d83a						LD83A:
4868	.d83a		88		dey		                dey
4869	.d83b		d0 da		bne $d817	                bne LD817
4870	.d83d		26 dc		rol $dc		                rol $DC
4871	.d83f		26 dd		rol $dd		                rol $DD
4872	.d841		38		sec		                sec
4873	.d842		bd 08 03	lda $0308,x	                lda $0308,x
4874	.d845		fd 06 03	sbc $0306,x	                sbc $0306,x
4875	.d848		9d 08 03	sta $0308,x	                sta $0308,x
4876	.d84b		bd 09 03	lda $0309,x	                lda $0309,x
4877	.d84e		fd 07 03	sbc $0307,x	                sbc $0307,x
4878	.d851		9d 09 03	sta $0309,x	                sta $0309,x
4879	.d854		bd 00 03	lda $0300,x	                lda $0300,x
4880	.d857		bc 01 03	ldy $0301,x	                ldy $0301,x
4881	.d85a		06 da		asl $da		                asl $DA
4882	.d85c		b0 0b		bcs $d869	                bcs LD869
4883	.d85e		38		sec		                sec
4884	.d85f		65 dc		adc $dc		                adc $DC
4885	.d861		9d 00 03	sta $0300,x	                sta $0300,x
4886	.d864		98		tya		                tya
4887	.d865		65 dd		adc $dd		                adc $DD
4888	.d867		80 09		bra $d872	                bra LD872

4890	.d869						LD869:
4891	.d869		18		clc		                clc
4892	.d86a		e5 dc		sbc $dc		                sbc $DC
4893	.d86c		9d 00 03	sta $0300,x	                sta $0300,x
4894	.d86f		98		tya		                tya
4895	.d870		e5 dd		sbc $dd		                sbc $DD
4896	.d872						LD872:
4897	.d872		9d 01 03	sta $0301,x	                sta $0301,x
4898	.d875						LD875:
4899	.d875		60		rts		                rts

4901	.d876						LD876:
4902	.d876		0e 32 03	asl $0332	                asl $0332
4903	.d879		a0 2c		ldy #$2c	                ldy #$2C
4904	.d87b		20 16 c9	jsr $c916	                jsr copyLastFourVDUQueueBytes
4905	.d87e		06 db		asl $db		                asl $DB
4906	.d880		90 0d		bcc $d88f	                bcc LD88F
4907	.d882		20 26 da	jsr $da26	                jsr LDA26
4908	.d885		f0 ee		beq $d875	                beq LD875
4909	.d887		a2 00		ldx #$00	                ldx #$00
4910	.d889		ad 32 03	lda $0332	                lda $0332
4911	.d88c		20 0f da	jsr $da0f	                jsr LDA0F
4912	.d88f						LD88F:
4913	.d88f		24 db		bit $db		                bit $DB
4914	.d891		50 0f		bvc $d8a2	                bvc LD8A2
4915	.d893		20 26 da	jsr $da26	                jsr LDA26
4916	.d896		f0 dd		beq $d875	                beq LD875
4917	.d898		a2 04		ldx #$04	                ldx #$04
4918	.d89a		ad 32 03	lda $0332	                lda $0332
4919	.d89d		49 80		eor #$80	                eor #$80
4920	.d89f		20 0f da	jsr $da0f	                jsr LDA0F
4921	.d8a2						LD8A2:
4922	.d8a2		a2 28		ldx #$28	                ldx #$28
4923	.d8a4		a0 2c		ldy #$2c	                ldy #$2C
4924	.d8a6		4c e8 da	jmp $dae8	                jmp LDAE8

4926	.d8a9						LD8A9:
4927	.d8a9		0a		asl a		                asl a
4928	.d8aa		0a		asl a		                asl a
4929	.d8ab		85 db		sta $db		                sta $DB
4930	.d8ad		29 c0		and #$c0	                and #$C0
4931	.d8af		49 40		eor #$40	                eor #$40
4932	.d8b1		d0 06		bne $d8b9	                bne LD8B9
4933	.d8b3		ad 67 03	lda $0367	                lda $0367
4934	.d8b6		8d 68 03	sta $0368	                sta $0368
4935	.d8b9						LD8B9:
4936	.d8b9		20 a6 d1	jsr $d1a6	                jsr LD1A6
4937	.d8bc		85 dc		sta $dc		                sta $DC
4938	.d8be		f0 04		beq $d8c4	                beq LD8C4
4939	.d8c0		a9 80		lda #$80	                lda #$80
4940	.d8c2		14 db		trb $db		                trb $DB
4941	.d8c4						LD8C4:
4942	.d8c4		a2 20		ldx #$20	                ldx #$20
4943	.d8c6		20 a8 d1	jsr $d1a8	                jsr windEntryPoint
4944	.d8c9		85 e0		sta $e0		                sta $E0
4945	.d8cb		f0 0a		beq $d8d7	                beq LD8D7
4946	.d8cd		aa		tax		                tax
4947	.d8ce		a9 20		lda #$20	                lda #$20
4948	.d8d0		14 db		trb $db		                trb $DB
4949	.d8d2		8a		txa		                txa
4950	.d8d3		24 dc		bit $dc		                bit $DC
4951	.d8d5						LD8D5:
4952	.d8d5		d0 9e		bne $d875	                bne LD875
4953	.d8d7						LD8D7:
4954	.d8d7		a0 24		ldy #$24	                ldy #$24
4955	.d8d9		a9 20		lda #$20	                lda #$20
4956	.d8db		a2 28		ldx #$28	                ldx #$28
4957	.d8dd		20 09 9b	jsr $9b09	                jsr L9B09
4958	.d8e0		24 db		bit $db		                bit $DB
4959	.d8e2		70 08		bvs $d8ec	                bvs LD8EC
4960	.d8e4		ad 2e 03	lda $032e	                lda $032E
4961	.d8e7		0d 2f 03	ora $032f	                ora $032F
4962	.d8ea		f0 8a		beq $d876	                beq LD876
4963	.d8ec						LD8EC:
4964	.d8ec		a5 dc		lda $dc		                lda $DC
4965	.d8ee		89 0c		bit #$0c	                bit #$0C
4966	.d8f0		f0 0e		beq $d900	                beq LD900
4967	.d8f2		a2 28		ldx #$28	                ldx #$28
4968	.d8f4		20 7b d7	jsr $d77b	                jsr LD77B
4969	.d8f7		a2 28		ldx #$28	                ldx #$28
4970	.d8f9		20 a8 d1	jsr $d1a8	                jsr windEntryPoint
4971	.d8fc		24 e0		bit $e0		                bit $E0
4972	.d8fe		d0 d5		bne $d8d5	                bne LD8D5
4973	.d900						LD900:
4974	.d900		89 03		bit #$03	                bit #$03
4975	.d902		f0 0a		beq $d90e	                beq LD90E
4976	.d904		a2 28		ldx #$28	                ldx #$28
4977	.d906		20 c8 d6	jsr $d6c8	                jsr LD6C8
4978	.d909		a2 28		ldx #$28	                ldx #$28
4979	.d90b		20 a8 d1	jsr $d1a8	                jsr windEntryPoint
4980	.d90e						LD90E:
4981	.d90e		a8		tay		                tay
4982	.d90f		d0 c4		bne $d8d5	                bne LD8D5
4983	.d911		a0 20		ldy #$20	                ldy #$20
4984	.d913		a2 22		ldx #$22	                ldx #$22
4985	.d915		a5 e0		lda $e0		                lda $E0
4986	.d917		f0 0f		beq $d928	                beq LD928
4987	.d919		a0 04		ldy #$04	                ldy #$04
4988	.d91b		a2 06		ldx #$06	                ldx #$06
4989	.d91d		2c 32 03	bit $0332	                bit $0332
4990	.d920		10 02		bpl $d924	                bpl LD924
4991	.d922		a2 02		ldx #$02	                ldx #$02
4992	.d924						LD924:
4993	.d924		50 02		bvc $d928	                bvc LD928
4994	.d926		a0 00		ldy #$00	                ldy #$00
4995	.d928						LD928:
4996	.d928		18		clc		                clc
4997	.d929		bd 00 03	lda $0300,x	                lda $0300,x
4998	.d92c		ed 2a 03	sbc $032a	                sbc $032A
4999	.d92f		90 03		bcc $d934	                bcc LD934
5000	.d931		1a		inc a		                inc a
5001	.d932		49 ff		eor #$ff	                eor #$FF
5002	.d934						LD934:
5003	.d934		85 dc		sta $dc		                sta $DC
5004	.d936		18		clc		                clc
5005	.d937		b9 00 03	lda $0300,y	                lda $0300,y
5006	.d93a		ed 28 03	sbc $0328	                sbc $0328
5007	.d93d		aa		tax		                tax
5008	.d93e		b9 01 03	lda $0301,y	                lda $0301,y
5009	.d941		ed 29 03	sbc $0329	                sbc $0329
5010	.d944		30 0c		bmi $d952	                bmi LD952
5011	.d946		e8		inx		                inx
5012	.d947		d0 01		bne $d94a	                bne LD94A
5013	.d949		1a		inc a		                inc a
5014	.d94a						LD94A:
5015	.d94a		49 ff		eor #$ff	                eor #$FF
5016	.d94c		a8		tay		                tay
5017	.d94d		8a		txa		                txa
5018	.d94e		49 ff		eor #$ff	                eor #$FF
5019	.d950		aa		tax		                tax
5020	.d951		98		tya		                tya
5021	.d952						LD952:
5022	.d952		85 dd		sta $dd		                sta $DD
5023	.d954		86 e0		stx $e0		                stx $E0
5024	.d956		a2 28		ldx #$28	                ldx #$28
5025	.d958		20 41 df	jsr $df41	                jsr LDF41
5026	.d95b		06 db		asl $db		                asl $DB
5027	.d95d		b0 2a		bcs $d989	                bcs LD989
5028	.d95f						LD95F:
5029	.d95f		24 db		bit $db		                bit $DB
5030	.d961		50 0b		bvc $d96e	                bvc LD96E
5031	.d963		a5 e0		lda $e0		                lda $E0
5032	.d965		25 dc		and $dc		                and $DC
5033	.d967		25 dd		and $dd		                and $DD
5034	.d969		1a		inc a		                inc a
5035	.d96a		f0 34		beq $d9a0	                beq LD9A0
5036	.d96c		24 db		bit $db		                bit $DB
5037	.d96e						LD96E:
5038	.d96e		10 09		bpl $d979	                bpl LD979
5039	.d970		ad 68 03	lda $0368	                lda $0368
5040	.d973		0a		asl a		                asl a
5041	.d974		2e 68 03	rol $0368	                rol $0368
5042	.d977		90 10		bcc $d989	                bcc LD989
5043	.d979						LD979:
5044	.d979		a5 d1		lda $d1		                lda ZMASK
5045	.d97b		25 d4		and $d4		                and ZGORA
5046	.d97d		11 d6		ora ($d6),y	                ora (ZMEMG),y
5047	.d97f		85 da		sta $da		                sta $DA
5048	.d981		a5 d1		lda $d1		                lda ZMASK
5049	.d983		25 d5		and $d5		                and ZGEOR
5050	.d985		45 da		eor $da		                eor $DA
5051	.d987		91 d6		sta ($d6),y	                sta (ZMEMG),y
5052	.d989						LD989:
5053	.d989		ad 31 03	lda $0331	                lda $0331
5054	.d98c		10 4e		bpl $d9dc	                bpl LD9DC
5055	.d98e		e6 dc		inc $dc		                inc $DC
5056	.d990		f0 0e		beq $d9a0	                beq LD9A0
5057	.d992		2c 32 03	bit $0332	                bit $0332
5058	.d995		30 0a		bmi $d9a1	                bmi LD9A1
5059	.d997		88		dey		                dey
5060	.d998		ca		dex		                dex
5061	.d999		10 24		bpl $d9bf	                bpl LD9BF
5062	.d99b		20 4c da	jsr $da4c	                jsr LDA4C
5063	.d99e		80 1f		bra $d9bf	                bra LD9BF

5065	.d9a0						LD9A0:
5066	.d9a0		60		rts		                rts

5068	.d9a1						LD9A1:
5069	.d9a1		c8		iny		                iny
5070	.d9a2		e8		inx		                inx
5071	.d9a3		e0 08		cpx #$08	                cpx #$08
5072	.d9a5		d0 18		bne $d9bf	                bne LD9BF
5073	.d9a7		38		sec		                sec
5074	.d9a8		98		tya		                tya
5075	.d9a9		e9 08		sbc #$08	                sbc #$08
5076	.d9ab		18		clc		                clc
5077	.d9ac		6d 52 03	adc $0352	                adc $0352
5078	.d9af		a8		tay		                tay
5079	.d9b0		a5 d7		lda $d7		                lda ZMEMG+1
5080	.d9b2		6d 53 03	adc $0353	                adc $0353
5081	.d9b5		10 04		bpl $d9bb	                bpl LD9BB
5082	.d9b7		38		sec		                sec
5083	.d9b8		ed 54 03	sbc $0354	                sbc $0354
5084	.d9bb						LD9BB:
5085	.d9bb		85 d7		sta $d7		                sta ZMEMG+1
5086	.d9bd		a2 00		ldx #$00	                ldx #$00
5087	.d9bf						LD9BF:
5088	.d9bf		ad 69 03	lda $0369	                lda $0369
5089	.d9c2		f0 03		beq $d9c7	                beq LD9C7
5090	.d9c4		20 7c da	jsr $da7c	                jsr setupColourMasks
5091	.d9c7						LD9C7:
5092	.d9c7		18		clc		                clc
5093	.d9c8		ad 30 03	lda $0330	                lda $0330
5094	.d9cb		6d 2c 03	adc $032c	                adc $032C
5095	.d9ce		8d 30 03	sta $0330	                sta $0330
5096	.d9d1		ad 31 03	lda $0331	                lda $0331
5097	.d9d4		6d 2d 03	adc $032d	                adc $032D
5098	.d9d7		8d 31 03	sta $0331	                sta $0331
5099	.d9da		30 83		bmi $d95f	                bmi LD95F
5100	.d9dc						LD9DC:
5101	.d9dc		e6 e0		inc $e0		                inc $E0
5102	.d9de		d0 04		bne $d9e4	                bne LD9E4
5103	.d9e0		e6 dd		inc $dd		                inc $DD
5104	.d9e2		f0 bc		beq $d9a0	                beq LD9A0
5105	.d9e4						LD9E4:
5106	.d9e4		2c 32 03	bit $0332	                bit $0332
5107	.d9e7		70 09		bvs $d9f2	                bvs LD9F2
5108	.d9e9		46 d1		lsr $d1		                lsr ZMASK
5109	.d9eb		90 0c		bcc $d9f9	                bcc LD9F9
5110	.d9ed		20 67 da	jsr $da67	                jsr nextColumnAndResetMask
5111	.d9f0		80 07		bra $d9f9	                bra LD9F9

5113	.d9f2						LD9F2:
5114	.d9f2		06 d1		asl $d1		                asl ZMASK
5115	.d9f4		90 03		bcc $d9f9	                bcc LD9F9
5116	.d9f6		20 34 da	jsr $da34	                jsr previousColumnAndResetMask
5117	.d9f9						LD9F9:
5118	.d9f9		38		sec		                sec
5119	.d9fa		ad 30 03	lda $0330	                lda $0330
5120	.d9fd		ed 2e 03	sbc $032e	                sbc $032E
5121	.da00		8d 30 03	sta $0330	                sta $0330
5122	.da03		ad 31 03	lda $0331	                lda $0331
5123	.da06		ed 2f 03	sbc $032f	                sbc $032F
5124	.da09		8d 31 03	sta $0331	                sta $0331
5125	.da0c		4c 5f d9	jmp $d95f	                jmp LD95F

5127	.da0f						LDA0F:
5128	.da0f		30 09		bmi $da1a	                bmi LDA1A
5129	.da11		fe 28 03	inc $0328,x	                inc $0328,x
5130	.da14		d0 0f		bne $da25	                bne LDA25
5131	.da16		fe 29 03	inc $0329,x	                inc $0329,x
5132	.da19		60		rts		                rts

5134	.da1a						LDA1A:
5135	.da1a		bd 28 03	lda $0328,x	                lda $0328,x
5136	.da1d		d0 03		bne $da22	                bne LDA22
5137	.da1f		de 29 03	dec $0329,x	                dec $0329,x
5138	.da22						LDA22:
5139	.da22		de 28 03	dec $0328,x	                dec $0328,x
5140	.da25						LDA25:
5141	.da25		60		rts		                rts

5143	.da26						LDA26:
5144	.da26		a0 04		ldy #$04	                ldy #$04
5145	.da28						LDA28:
5146	.da28		b9 27 03	lda $0327,y	                lda $0327,y
5147	.da2b		d9 2b 03	cmp $032b,y	                cmp $032B,y
5148	.da2e		d0 03		bne $da33	                bne LDA33
5149	.da30		88		dey		                dey
5150	.da31		d0 f5		bne $da28	                bne LDA28
5151	.da33						LDA33:
5152	.da33		60		rts		                rts

5154							;-------------------------------------------------------------------------

5156	.da34						previousColumnAndResetMask:
5157	.da34		ad 63 03	lda $0363	                lda vduv.colourMaskRight
5158	.da37		85 d1		sta $d1		                sta ZMASK
5159	.da39		98		tya		                tya
5160	.da3a		e9 08		sbc #$08	                sbc #$08
5161	.da3c		a8		tay		                tay
5162	.da3d		b0 0c		bcs $da4b	                bcs rtsDA4B
5163	.da3f		a5 d7		lda $d7		                lda ZMEMG+1
5164	.da41		3a		dec a		                dec a
5165	.da42		cd 4e 03	cmp $034e	                cmp vduv.startScreenAddressHighByte
5166	.da45		b0 02		bcs $da49	                bcs +
5167	.da47		a9 7f		lda #$7f	                lda #$7F
5168	.da49						+
5169	.da49		85 d7		sta $d7		                sta ZMEMG+1
5170	.da4b						rtsDA4B:
5171	.da4b		60		rts		                rts

5173							;-------------------------------------------------------------------------

5175	.da4c						LDA4C:
5176	.da4c		18		clc		                clc
5177	.da4d		98		tya		                tya
5178	.da4e		69 08		adc #$08	                adc #$08
5179	.da50		38		sec		                sec
5180	.da51		ed 52 03	sbc $0352	                sbc $0352
5181	.da54		a8		tay		                tay
5182	.da55		a5 d7		lda $d7		                lda ZMEMG+1
5183	.da57		ed 53 03	sbc $0353	                sbc $0353
5184	.da5a		cd 4e 03	cmp $034e	                cmp $034E
5185	.da5d		b0 03		bcs $da62	                bcs LDA62
5186	.da5f		6d 54 03	adc $0354	                adc $0354
5187	.da62						LDA62:
5188	.da62		85 d7		sta $d7		                sta ZMEMG+1
5189	.da64		a2 07		ldx #$07	                ldx #$07
5190	.da66		60		rts		                rts

5192							;-------------------------------------------------------------------------
5193							;
5194	.da67						nextColumnAndResetMask:
5195	.da67		ad 62 03	lda $0362	                lda vduv.colourMaskLeft
5196	.da6a		85 d1		sta $d1		                sta ZMASK

5198							;-------------------------------------------------------------------------
5199							;
5200							; Add 8 to (ZMEMG),Y, taking into account screen wrap.
5201							;
5202							; entry:
5203							;
5204							; C=1
5205							;
5206							; (ZMEMG),Y = screen address
5207							;
5208							; exit:
5209							;
5210							; (ZMEMG),Y = new screen address
5211							;
5212	.da6c						nextColumn:
5213	.da6c		98		tya		                tya
5214	.da6d		69 07		adc #$07	                adc #$07
5215	.da6f		a8		tay		                tay
5216	.da70		90 09		bcc $da7b	                bcc +
5217	.da72		e6 d7		inc $d7		                inc ZMEMG+1
5218	.da74		10 05		bpl $da7b	                bpl +
5219	.da76		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
5220	.da79		85 d7		sta $d7		                sta ZMEMG+1
5221	.da7b						+
5222	.da7b		60		rts		                rts

5224							;-------------------------------------------------------------------------
5225							;
5226							; Set up colour masks, taking into account ECF pattern.
5227							;
5228							; entry:
5229							;
5230							; X = scanline in row, 0-7
5231							;
5232	.da7c						setupColourMasks:
5233	.da7c		da		phx		                phx                          ;save scanline
5234	.da7d		8a		txa		                txa                          ;A=scanline
5235	.da7e		0d 59 03	ora $0359	                ora vduv.graphicsPlotState   ;0-7 if fg, 8-15 if bg
5236	.da81		aa		tax		                tax
5237	.da82		bd 20 88	lda $8820,x	                lda andy.fgECFPattern,x      ;get appropriate ECF byte
5238	.da85		ae 5a 03	ldx $035a	                ldx vduv.graphicsPlotMode
5239	.da88		48		pha		                pha
5240	.da89		1d 44 e1	ora $e144,x	                ora zgoraORTable,x
5241	.da8c		5d 45 e1	eor $e145,x	                eor zgoraEORTable,x
5242	.da8f		85 d4		sta $d4		                sta ZGORA
5243	.da91		68		pla		                pla
5244	.da92		1d 43 e1	ora $e143,x	                ora zgeorORTable,x
5245	.da95		5d 48 e1	eor $e148,x	                eor zgeorEORTable,x
5246	.da98		85 d5		sta $d5		                sta ZGEOR
5247	.da9a		fa		plx		                plx
5248	.da9b		60		rts		                rts

5250							;-------------------------------------------------------------------------

5252	.da9c						LDA9C:
5253	.da9c		b9 01 03	lda $0301,y	                lda $0301,y
5254	.da9f		48		pha		                pha
5255	.daa0		b9 00 03	lda $0300,y	                lda $0300,y
5256	.daa3		48		pha		                pha
5257	.daa4		2d 61 03	and $0361	                and $0361
5258	.daa7		18		clc		                clc
5259	.daa8		6d 61 03	adc $0361	                adc $0361
5260	.daab		a8		tay		                tay
5261	.daac		b9 2e e1	lda $e12e,y	                lda pixelMasks-1,y
5262	.daaf		59 20 e1	eor $e120,y	                eor LE120,y
5263	.dab2		85 dc		sta $dc		                sta $DC
5264	.dab4		bd 00 03	lda $0300,x	                lda $0300,x
5265	.dab7		2d 61 03	and $0361	                and $0361
5266	.daba		6d 61 03	adc $0361	                adc $0361
5267	.dabd		a8		tay		                tay
5268	.dabe		b9 20 e1	lda $e120,y	                lda LE120,y
5269	.dac1		85 d1		sta $d1		                sta ZMASK
5270	.dac3		38		sec		                sec
5271	.dac4		68		pla		                pla
5272	.dac5		0d 61 03	ora $0361	                ora $0361
5273	.dac8		fd 00 03	sbc $0300,x	                sbc $0300,x
5274	.dacb		a8		tay		                tay
5275	.dacc		68		pla		                pla
5276	.dacd		fd 01 03	sbc $0301,x	                sbc $0301,x
5277	.dad0		85 dd		sta $dd		                sta $DD
5278	.dad2		98		tya		                tya
5279	.dad3		ac 61 03	ldy $0361	                ldy $0361
5280	.dad6		c0 03		cpy #$03	                cpy #$03
5281	.dad8		f0 05		beq $dadf	                beq LDADF
5282	.dada		90 06		bcc $dae2	                bcc LDAE2
5283	.dadc		46 dd		lsr $dd		                lsr $DD
5284	.dade		6a		ror a		                ror a
5285	.dadf						LDADF:
5286	.dadf		46 dd		lsr $dd		                lsr $DD
5287	.dae1		6a		ror a		                ror a
5288	.dae2						LDAE2:
5289	.dae2		4a		lsr a		                lsr a
5290	.dae3						LDAE3:
5291	.dae3		60		rts		                rts

5293	.dae4						LDAE4:                                       ; fillRow?
5294	.dae4		a2 42		ldx #$42	                ldx #$42
5295	.dae6		a0 46		ldy #$46	                ldy #$46
5296	.dae8						LDAE8:                                       ; fillRowInternal?
5297	.dae8		20 cc d5	jsr $d5cc	                jsr sortVDUVariableWords
5298	.daeb		86 de		stx $de		                stx $DE
5299	.daed		84 df		sty $df		                sty $DF
5300	.daef		a6 df		ldx $df		                ldx $DF
5301	.daf1		a0 00		ldy #$00	                ldy #$00
5302	.daf3		20 b7 d1	jsr $d1b7	                jsr getOutcodeForAxis
5303	.daf6		f0 07		beq $daff	                beq LDAFF
5304	.daf8		4a		lsr a		                lsr a
5305	.daf9		f0 e8		beq $dae3	                beq LDAE3
5306	.dafb		a2 04		ldx #$04	                ldx #$04
5307	.dafd		86 df		stx $df		                stx $DF
5308	.daff						LDAFF:
5309	.daff		a6 de		ldx $de		                ldx $DE
5310	.db01		20 a8 d1	jsr $d1a8	                jsr windEntryPoint
5311	.db04		4a		lsr a		                lsr a
5312	.db05		d0 dc		bne $dae3	                bne LDAE3
5313	.db07		bd 02 03	lda $0302,x	                lda $0302,x
5314	.db0a		90 04		bcc $db10	                bcc LDB10
5315	.db0c		a2 00		ldx #$00	                ldx #$00
5316	.db0e		86 de		stx $de		                stx $DE
5317	.db10						LDB10:
5318	.db10		20 cb de	jsr $decb	                jsr LDECB
5319	.db13		a6 de		ldx $de		                ldx $DE
5320	.db15		a4 df		ldy $df		                ldy $DF
5321	.db17		20 9c da	jsr $da9c	                jsr LDA9C
5322	.db1a		aa		tax		                tax
5323	.db1b		ac 1a 03	ldy $031a	                ldy $031A
5324	.db1e		8a		txa		                txa
5325	.db1f		f0 23		beq $db44	                beq LDB44
5326	.db21		20 51 db	jsr $db51	                jsr plbyteEntryPoint
5327	.db24		80 08		bra $db2e	                bra LDB2E

5329	.db26						LDB26:
5330	.db26		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5331	.db28		05 d4		ora $d4		                ora ZGORA
5332	.db2a		45 d5		eor $d5		                eor ZGEOR
5333	.db2c		91 d6		sta ($d6),y	                sta (ZMEMG),y
5334	.db2e						LDB2E:
5335	.db2e		98		tya		                tya
5336	.db2f		18		clc		                clc
5337	.db30		69 08		adc #$08	                adc #$08
5338	.db32		a8		tay		                tay
5339	.db33		90 09		bcc $db3e	                bcc LDB3E
5340	.db35		e6 d7		inc $d7		                inc ZMEMG+1
5341	.db37		10 05		bpl $db3e	                bpl LDB3E
5342	.db39		ad 4e 03	lda $034e	                lda $034E
5343	.db3c		85 d7		sta $d7		                sta ZMEMG+1
5344	.db3e						LDB3E:
5345	.db3e		ca		dex		                dex
5346	.db3f		d0 e5		bne $db26	                bne LDB26
5347	.db41		ca		dex		                dex
5348	.db42		86 d1		stx $d1		                stx ZMASK
5349	.db44						LDB44:
5350	.db44		a5 dc		lda $dc		                lda $DC
5351	.db46		14 d1		trb $d1		                trb ZMASK
5352	.db48		80 07		bra $db51	                bra plbyteEntryPoint

5354							;-------------------------------------------------------------------------
5355							;
5356							; mem mask ora eor | result
5357							; --- ---- --- --- | ------
5358							;  0    0   0   0  |   0
5359							;  0    0   0   1  |   0
5360							;  0    0   1   0  |   0
5361							;  0    0   1   1  |   0
5362							;  0    1   0   0  |   0
5363							;  0    1   0   1  |   1
5364							;  0    1   1   0  |   1
5365							;  0    1   1   1  |   0
5366							;  1    0   0   0  |   1
5367							;  1    0   0   1  |   1
5368							;  1    0   1   0  |   1
5369							;  1    0   1   1  |   1
5370							;  1    1   0   0  |   1
5371							;  1    1   0   1  |   0
5372							;  1    1   1   0  |   1
5373							;  1    1   1   1  |   0
5374							;
5375	.db4a						plotPoint:
5376	.db4a		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
5377	.db4c						plotPointInternal:
5378	.db4c		20 c3 de	jsr $dec3	                jsr windGADDR
5379	.db4f		d0 10		bne $db61	                bne rtsDB61                  ;taken if point outside window
5380	.db51						plbyteEntryPoint:
5381	.db51		a5 d1		lda $d1		                lda ZMASK
5382	.db53		25 d4		and $d4		                and ZGORA
5383	.db55		11 d6		ora ($d6),y	                ora (ZMEMG),y
5384	.db57		85 da		sta $da		                sta ZTEMP+0
5385	.db59		a5 d5		lda $d5		                lda ZGEOR
5386	.db5b		25 d1		and $d1		                and ZMASK
5387	.db5d		45 da		eor $da		                eor ZTEMP+0
5388	.db5f						oswrscCode:
5389	.db5f		91 d6		sta ($d6),y	                sta (ZMEMG),y
5390	.db61						rtsDB61:
5391	.db61		60		rts		                rts

5393							;-------------------------------------------------------------------------

5395	.db62						LDB62:
5396	.db62		a2 2a		ldx #$2a	                ldx #VDUVariables.workspace._2A
5397	.db64		a0 32		ldy #$32	                ldy #VDUVariables.workspace._32
5398	.db66		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5399	.db69		a2 36		ldx #$36	                ldx #VDUVariables.workspace._36
5400	.db6b		a0 3e		ldy #$3e	                ldy #VDUVariables.workspace._3E
5401	.db6d		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5402	.db70		a2 2a		ldx #$2a	                ldx #$2A
5403	.db72		20 b5 d1	jsr $d1b5	                jsr getOutcodeForYAxis
5404	.db75		48		pha		                pha
5405	.db76		a2 36		ldx #$36	                ldx #$36
5406	.db78		20 b5 d1	jsr $d1b5	                jsr getOutcodeForYAxis
5407	.db7b		f0 0f		beq $db8c	                beq LDB8C
5408	.db7d		68		pla		                pla
5409	.db7e		d0 05		bne $db85	                bne LDB85
5410	.db80		ad 45 03	lda $0345	                lda $0345
5411	.db83		f0 01		beq $db86	                beq LDB86
5412	.db85						LDB85:
5413	.db85		60		rts		                rts

5415	.db86						LDB86:
5416	.db86		a2 28		ldx #$28	                ldx #$28
5417	.db88		a0 2c		ldy #$2c	                ldy #$2C
5418	.db8a		80 07		bra $db93	                bra LDB93

5420	.db8c						LDB8C:
5421	.db8c		68		pla		                pla
5422	.db8d		f0 07		beq $db96	                beq LDB96
5423	.db8f		a2 34		ldx #$34	                ldx #$34
5424	.db91		a0 38		ldy #$38	                ldy #$38
5425	.db93						LDB93:
5426	.db93		4c e8 da	jmp $dae8	                jmp LDAE8

5428	.db96						LDB96:
5429	.db96		a2 30		ldx #$30	                ldx #$30
5430	.db98		20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
5431	.db9b		2c 47 03	bit $0347	                bit $0347
5432	.db9e		30 09		bmi $dba9	                bmi LDBA9
5433	.dba0		98		tya		                tya
5434	.dba1		38		sec		                sec
5435	.dba2		e9 08		sbc #$08	                sbc #$08
5436	.dba4		a8		tay		                tay
5437	.dba5		b0 02		bcs $dba9	                bcs LDBA9
5438	.dba7		c6 d7		dec $d7		                dec ZMEMG+1
5439	.dba9						LDBA9:
5440	.dba9		ad 44 03	lda $0344	                lda $0344
5441	.dbac		85 dd		sta $dd		                sta $DD
5442	.dbae						LDBAE:
5443	.dbae		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5444	.dbb0		ae 42 03	ldx $0342	                ldx $0342
5445	.dbb3		f0 04		beq $dbb9	                beq LDBB9
5446	.dbb5						LDBB5:
5447	.dbb5		0a		asl a		                asl a
5448	.dbb6		ca		dex		                dex
5449	.dbb7		d0 fc		bne $dbb5	                bne LDBB5
5450	.dbb9						LDBB9:
5451	.dbb9		85 da		sta $da		                sta $DA
5452	.dbbb		38		sec		                sec
5453	.dbbc		20 6c da	jsr $da6c	                jsr nextColumn
5454	.dbbf		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5455	.dbc1		ae 43 03	ldx $0343	                ldx $0343
5456	.dbc4		f0 04		beq $dbca	                beq LDBCA
5457	.dbc6						LDBC6:
5458	.dbc6		4a		lsr a		                lsr a
5459	.dbc7		ca		dex		                dex
5460	.dbc8		d0 fc		bne $dbc6	                bne LDBC6
5461	.dbca						LDBCA:
5462	.dbca		45 da		eor $da		                eor $DA
5463	.dbcc		25 e1		and $e1		                and $E1
5464	.dbce		45 da		eor $da		                eor $DA
5465	.dbd0		a6 dd		ldx $dd		                ldx $DD
5466	.dbd2		9d 30 88	sta $8830,x	                sta L8830,x
5467	.dbd5		c6 dd		dec $dd		                dec $DD
5468	.dbd7		10 d5		bpl $dbae	                bpl LDBAE
5469	.dbd9		a2 34		ldx #$34	                ldx #$34
5470	.dbdb		a0 38		ldy #$38	                ldy #$38
5471	.dbdd		20 e8 da	jsr $dae8	                jsr LDAE8
5472	.dbe0		ad 45 03	lda $0345	                lda $0345
5473	.dbe3		d0 03		bne $dbe8	                bne LDBE8
5474	.dbe5		20 86 db	jsr $db86	                jsr LDB86
5475	.dbe8						LDBE8:
5476	.dbe8		a2 3c		ldx #$3c	                ldx #$3C
5477	.dbea		20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
5478	.dbed		ad 46 03	lda $0346	                lda $0346
5479	.dbf0		85 da		sta $da		                sta $DA
5480	.dbf2		ae 44 03	ldx $0344	                ldx $0344
5481	.dbf5		f0 15		beq $dc0c	                beq LDC0C
5482	.dbf7		20 10 dc	jsr $dc10	                jsr LDC10
5483	.dbfa		a9 ff		lda #$ff	                lda #$FF
5484	.dbfc		85 da		sta $da		                sta $DA
5485	.dbfe		80 05		bra $dc05	                bra LDC05

5487	.dc00						LDC00_code:
5488	.dc00		bd 30 88	lda $8830,x	                lda L8830,x
5489	.dc03		91 d6		sta ($d6),y	                sta (ZMEMG),y
5490	.dc05						LDC05:
5491	.dc05		38		sec		                sec
5492	.dc06		20 6c da	jsr $da6c	                jsr nextColumn
5493	.dc09		ca		dex		                dex
5494	.dc0a		d0 f4		bne $dc00	                bne LDC00_code
5495	.dc0c						LDC0C:
5496	.dc0c		a5 e0		lda $e0		                lda $E0
5497	.dc0e		14 da		trb $da		                trb $DA
5498	.dc10						LDC10:
5499	.dc10		bd 30 88	lda $8830,x	                lda L8830,x
5500	.dc13		51 d6		eor ($d6),y	                eor (ZMEMG),y
5501	.dc15		25 da		and $da		                and $DA
5502	.dc17		51 d6		eor ($d6),y	                eor (ZMEMG),y
5503	.dc19		91 d6		sta ($d6),y	                sta (ZMEMG),y
5504	.dc1b		60		rts		                rts

5506	.dc1c						LDC1C:
5507	.dc1c		ad 37 03	lda $0337	                lda $0337
5508	.dc1f		1a		inc a		                inc a
5509	.dc20		cd 36 03	cmp $0336	                cmp $0336
5510	.dc23		f0 22		beq $dc47	                beq LDC47
5511	.dc25		8d 37 03	sta $0337	                sta $0337
5512	.dc28		aa		tax		                tax
5513	.dc29		ad 2e 03	lda $032e	                lda $032E
5514	.dc2c		9d 00 84	sta $8400,x	                sta L8400,x
5515	.dc2f		ad 32 03	lda $0332	                lda $0332
5516	.dc32		9d 00 85	sta $8500,x	                sta L8500,x
5517	.dc35		ad 2f 03	lda $032f	                lda $032F
5518	.dc38		0a		asl a		                asl a
5519	.dc39		0a		asl a		                asl a
5520	.dc3a		0d 33 03	ora $0333	                ora $0333
5521	.dc3d		9d 00 86	sta $8600,x	                sta L8600,x
5522	.dc40		ad 30 03	lda $0330	                lda $0330
5523	.dc43		9d 00 87	sta $8700,x	                sta L8700,x
5524	.dc46						LDC46:
5525	.dc46		18		clc		                clc
5526	.dc47						LDC47:
5527	.dc47		60		rts		                rts

5529	.dc48						LDC48:
5530	.dc48		8d 2a 03	sta $032a	                sta $032A
5531	.dc4b		a2 28		ldx #$28	                ldx #$28
5532	.dc4d		20 b0 dc	jsr $dcb0	                jsr LDCB0
5533	.dc50		d0 0a		bne $dc5c	                bne LDC5C
5534	.dc52						LDC52:
5535	.dc52		20 1c dc	jsr $dc1c	                jsr LDC1C
5536	.dc55		b0 f0		bcs $dc47	                bcs LDC47
5537	.dc57		20 57 9d	jsr $9d57	                jsr L9D57
5538	.dc5a		b0 ea		bcs $dc46	                bcs LDC46
5539	.dc5c						LDC5C:
5540	.dc5c		20 c1 dc	jsr $dcc1	                jsr LDCC1
5541	.dc5f		20 57 9d	jsr $9d57	                jsr L9D57
5542	.dc62		b0 e2		bcs $dc46	                bcs LDC46
5543	.dc64		20 d7 dc	jsr $dcd7	                jsr LDCD7
5544	.dc67		20 b8 dc	jsr $dcb8	                jsr LDCB8
5545	.dc6a		80 e6		bra $dc52	                bra LDC52

5547							;-------------------------------------------------------------------------
5548							;
5549							; 72-79 = Horizontal line fill (left and right to non-background) [MasRef E.3-24]
5550							; 88-95 = Horizontal line fill (right to background) [MasRef E.3-25]
5551							; 104-111 = Horizontal line fill (left and right to foreground) [MasRef E.3-26]
5552							; 120-127 = Horizontal line fill (right to non-foreground) [MasRef E.3-27]
5553							;
5554	.dc6c						plotHorizontalLineFill:
5555	.dc6c		20 9f dd	jsr $dd9f	                jsr copyECFPatternForLineFill
5556	.dc6f		20 b0 dc	jsr $dcb0	                jsr LDCB0
5557	.dc72		18		clc		                clc
5558	.dc73		80 0e		bra $dc83	                bra LDC83

5560	.dc75						plotHorizontalLineFillRight:
5561	.dc75		20 9f dd	jsr $dd9f	                jsr copyECFPatternForLineFill
5562	.dc78		20 c9 dc	jsr $dcc9	                jsr LDCC9
5563	.dc7b		20 d2 dc	jsr $dcd2	                jsr LDCD2
5564	.dc7e		d0 03		bne $dc83	                bne LDC83
5565	.dc80		20 b8 dc	jsr $dcb8	                jsr LDCB8
5566	.dc83						LDC83:
5567	.dc83		08		php		                php
5568	.dc84		a2 2e		ldx #$2e	                ldx #VDUVariables.hlfw.pixelsX
5569	.dc86		a0 14		ldy #$14	                ldy #VDUVariables.oldGraphicsCursorPixelsX
5570	.dc88		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
5571	.dc8b		28		plp		                plp
5572	.dc8c		08		php		                php
5573	.dc8d		f0 02		beq $dc91	                beq LDC91
5574	.dc8f		a2 2e		ldx #$2e	                ldx #VDUVariables.hlfw.pixelsX
5575	.dc91						LDC91:
5576	.dc91		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixelsX
5577	.dc93		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5578	.dc96		a2 30		ldx #$30	                ldx #VDUVariables.hlfw.pixelsY
5579	.dc98		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5580	.dc9b		28		plp		                plp
5581	.dc9c		f0 05		beq $dca3	                beq LDCA3
5582	.dc9e		b0 04		bcs $dca4	                bcs LDCA4
5583	.dca0		ee 16 03	inc $0316	                inc $0316
5584	.dca3						LDCA3:
5585	.dca3		60		rts		                rts

5587	.dca4						LDCA4:
5588	.dca4		ad 24 03	lda $0324	                lda $0324
5589	.dca7		d0 03		bne $dcac	                bne LDCAC
5590	.dca9		ce 25 03	dec $0325	                dec $0325
5591	.dcac						LDCAC:
5592	.dcac		ce 24 03	dec $0324	                dec $0324
5593	.dcaf		60		rts		                rts

5595							;-------------------------------------------------------------------------

5597	.dcb0						LDCB0:
5598	.dcb0		20 d2 dc	jsr $dcd2	                jsr LDCD2
5599	.dcb3		d0 55		bne $dd0a	                bne rtsDD0A
5600	.dcb5		20 0b dd	jsr $dd0b	                jsr LDD0B
5601	.dcb8						LDCB8:
5602	.dcb8		a2 2e		ldx #$2e	                ldx #$2E
5603	.dcba		a0 32		ldy #$32	                ldy #$32
5604	.dcbc		20 e8 da	jsr $dae8	                jsr LDAE8
5605	.dcbf		80 46		bra $dd07	                bra LDD07

5607	.dcc1						LDCC1:
5608	.dcc1		20 c9 dc	jsr $dcc9	                jsr LDCC9
5609	.dcc4		a2 2c		ldx #$2c	                ldx #$2C
5610	.dcc6		20 d9 dc	jsr $dcd9	                jsr LDCD9
5611	.dcc9						LDCC9:
5612	.dcc9		08		php		                php
5613	.dcca		a5 e1		lda $e1		                lda $E1
5614	.dccc		49 08		eor #$08	                eor #$08
5615	.dcce		85 e1		sta $e1		                sta $E1
5616	.dcd0		28		plp		                plp
5617	.dcd1		60		rts		                rts

5619							;-------------------------------------------------------------------------

5621	.dcd2						LDCD2:
5622	.dcd2		a0 2e		ldy #$2e	                ldy #VDUVariables.hlfw.pixelsX
5623	.dcd4		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
5624	.dcd7						LDCD7:
5625	.dcd7		a2 04		ldx #$04	                ldx #VDUVariables.graphicsWindowPixelsRight
5626	.dcd9						LDCD9:
5627	.dcd9		a0 34		ldy #$34	                ldy #VDUVariables.hlfw.pixelsLimitX
5628	.dcdb		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5629	.dcde		a2 34		ldx #$34	                ldx #VDUVariables.hlfw.pixelsLimitX
5630	.dce0		20 35 dd	jsr $dd35	                jsr shouldFillPixel
5631	.dce3		d0 25		bne $dd0a	                bne rtsDD0A  ;taken if pixel not to be filled, so done
5632	.dce5						LDCE5:
5633	.dce5		46 d1		lsr $d1		                lsr ZMASK                    ;next pixel
5634	.dce7		90 08		bcc $dcf1	                bcc LDCF1                    ;taken if still in same byte
5635	.dce9						LDCE9:
5636	.dce9		20 67 da	jsr $da67	                jsr nextColumnAndResetMask
5637	.dcec		20 65 dd	jsr $dd65	                jsr shouldFillByte
5638	.dcef		b0 f8		bcs $dce9	                bcs LDCE9
5639	.dcf1						LDCF1:
5640	.dcf1		20 85 dd	jsr $dd85	                jsr LDD85
5641	.dcf4		b0 ef		bcs $dce5	                bcs LDCE5
5642	.dcf6		38		sec		                sec
5643	.dcf7		ad 34 03	lda $0334	                lda vduv.hlfw.pixelsLimitX+0
5644	.dcfa		e5 de		sbc $de		                sbc zhlfw.pixelsX+0
5645	.dcfc		8d 32 03	sta $0332	                sta vduv.hlfw.pixelsRightEndX+0
5646	.dcff		ad 35 03	lda $0335	                lda vduv.hlfw.pixelsLimitX+1
5647	.dd02		e5 df		sbc $df		                sbc zhlfw.pixelsX+1
5648	.dd04		8d 33 03	sta $0333	                sta vduv.hlfw.pixelsRightEndX+1
5649	.dd07						LDD07:
5650	.dd07		a9 00		lda #$00	                lda #$00
5651	.dd09		38		sec		                sec
5652	.dd0a						rtsDD0A:
5653	.dd0a		60		rts		                rts

5655	.dd0b						LDD0B:
5656	.dd0b		a2 00		ldx #$00	                ldx #VDUVariables.graphicsWindowPixelsLeft
5657	.dd0d		20 35 dd	jsr $dd35	                jsr shouldFillPixel
5658	.dd10		d0 f8		bne $dd0a	                bne rtsDD0A                    ;taken if pixel not to be filled, so done
5659	.dd12						LDD12:
5660	.dd12		06 d1		asl $d1		                asl ZMASK                      ;next pixel
5661	.dd14		90 08		bcc $dd1e	                bcc LDD1E                    ;taken if still in same byte
5662	.dd16						LDD16:
5663	.dd16		20 34 da	jsr $da34	                jsr previousColumnAndResetMask
5664	.dd19		20 65 dd	jsr $dd65	                jsr shouldFillByte
5665	.dd1c		b0 f8		bcs $dd16	                bcs LDD16
5666	.dd1e						LDD1E:
5667	.dd1e		20 85 dd	jsr $dd85	                jsr LDD85
5668	.dd21		b0 ef		bcs $dd12	                bcs LDD12
5669	.dd23		ad 00 03	lda $0300	                lda vduv.graphicsWindowPixelsLeft+0
5670	.dd26		65 de		adc $de		                adc zhlfw.pixelsX+0
5671	.dd28		8d 2e 03	sta $032e	                sta vduv.hlfw.pixelsX+0
5672	.dd2b		ad 01 03	lda $0301	                lda vduv.graphicsWindowPixelsLeft+1
5673	.dd2e		65 df		adc $df		                adc zhlfw.pixelsX+1
5674	.dd30		8d 2f 03	sta $032f	                sta vduv.hlfw.pixelsX+1
5675	.dd33		80 d2		bra $dd07	                bra LDD07

5677							;-------------------------------------------------------------------------
5678							;
5679							; Check whether line fill should fill a pixel.
5680							;
5681							; entry:
5682							;
5683							; X = VDU variable offset of edge of window
5684							;
5685							; vduv.workspace._2E - pixel X, Y coordinates
5686							;
5687							; exit:
5688							;
5689							; Z=1 if pixel should be filled
5690							;
5691							; ZTEMPC = ???
5692							;
5693	.dd35						shouldFillPixel:
5694	.dd35		38		sec		                sec
5695	.dd36		ad 2e 03	lda $032e	                lda vduv.workspace._2E+0
5696	.dd39		fd 00 03	sbc $0300,x	                sbc vduv+0,x
5697	.dd3c		a8		tay		                tay
5698	.dd3d		ad 2f 03	lda $032f	                lda vduv.workspace._2E+1
5699	.dd40		fd 01 03	sbc $0301,x	                sbc vduv+1,x
5700	.dd43		10 03		bpl $dd48	                bpl +
5701	.dd45		20 2e c9	jsr $c92e	                jsr negateAY
5702	.dd48						+
5703	.dd48		84 de		sty $de		                sty zhlfw.pixelsX+0
5704	.dd4a		85 df		sta $df		                sta zhlfw.pixelsX+1
5705	.dd4c		a2 2e		ldx #$2e	                ldx #VDUVariables.workspace._2E
5706	.dd4e		20 c3 de	jsr $dec3	                jsr windGADDR
5707	.dd51		18		clc		                clc
5708	.dd52		d0 10		bne $dd64	                bne rtsDD64                    ;taken if point outside window
5709	.dd54		b1 d6		lda ($d6),y	                lda (ZMEMG),y                  ;get screen byte
5710	.dd56		5d 30 88	eor $8830,x	                eor andy.hlfw.ecfPattern,x     ;EOR with appropriate pattern
5711	.dd59		85 da		sta $da		                sta zhlfw.notByteMatch ;0 if whole byte matches
5712	.dd5b		25 d1		and $d1		                and ZMASK                      ;0 if masked byte matches
5713	.dd5d		f0 02		beq $dd61	                beq +              ;taken if masked byte matches - A=0
5714	.dd5f		a9 08		lda #$08	                lda #$08              ;masked byte doesn't match - A=8
5715	.dd61						+
5716	.dd61		45 e1		eor $e1		                eor zhlfw.resultEOR ;maybe invert result
5717	.dd63		38		sec		                sec
5718	.dd64						rtsDD64:
5719	.dd64		60		rts		                rts

5721							;-------------------------------------------------------------------------

5723	.dd65						shouldFillByte:
5724	.dd65		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5725	.dd67		5d 30 88	eor $8830,x	                eor andy.hlfw.ecfPattern,x
5726	.dd6a		85 da		sta $da		                sta zhlfw.notByteMatch
5727	.dd6c		05 e1		ora $e1		                ora zhlfw.resultEOR
5728	.dd6e		18		clc		                clc
5729	.dd6f		d0 13		bne $dd84	                bne rtsDD84
5730	.dd71		a5 de		lda $de		                lda zhlfw.pixelsX+0
5731	.dd73		ed 61 03	sbc $0361	                sbc vduv.pixelsPerByteMinusOne
5732	.dd76		48		pha		                pha
5733	.dd77		a5 df		lda $df		                lda zhlfw.pixelsX+1
5734	.dd79		e9 00		sbc #$00	                sbc #$00
5735	.dd7b		90 06		bcc $dd83	                bcc pla_rts_DD83             ;taken if past X=0
5736	.dd7d		85 df		sta $df		                sta zhlfw.pixelsX+1
5737	.dd7f		68		pla		                pla
5738	.dd80		85 de		sta $de		                sta zhlfw.pixelsX+0
5739	.dd82		60		rts		                rts

5741	.dd83						pla_rts_DD83:
5742	.dd83		68		pla		                pla
5743	.dd84						rtsDD84:
5744	.dd84		60		rts		                rts

5746							;-------------------------------------------------------------------------

5748	.dd85						LDD85:
5749	.dd85		a5 da		lda $da		                lda zhlfw.notByteMatch
5750	.dd87		25 d1		and $d1		                and ZMASK
5751	.dd89		f0 02		beq $dd8d	                beq +
5752	.dd8b		a9 08		lda #$08	                lda #$08
5753	.dd8d						+
5754	.dd8d		45 e1		eor $e1		                eor zhlfw.resultEOR
5755	.dd8f		d0 0d		bne $dd9e	                bne rtsDD9E

5757							                ; pixelsX -= 1
5758	.dd91		a5 de		lda $de		                lda zhlfw.pixelsX+0
5759	.dd93		d0 06		bne $dd9b	                bne +
5760	.dd95		a5 df		lda $df		                lda zhlfw.pixelsX+1
5761	.dd97		f0 05		beq $dd9e	                beq rtsDD9E
5762	.dd99		c6 df		dec $df		                dec zhlfw.pixelsX+1
5763	.dd9b						+
5764	.dd9b		c6 de		dec $de		                dec zhlfw.pixelsX+0
5765	.dd9d		38		sec		                sec
5766	.dd9e						rtsDD9E:
5767	.dd9e		60		rts		                rts

5769							;-------------------------------------------------------------------------
5770							;
5771							; Copy appropriate ECF pattern for line fill.
5772							;
5773							; entry:
5774							;
5775							; A = horizontal line fill PLOT code
5776							;
5777							; exit:
5778							;
5779							; andy.hlfw.ecfPattern = holds bg/fg ECF pattern as required
5780							;
5781							; ZTEMPD?1 = 0 for fill to matching, 8 to fill to non-matching
5782							;
5783	.dd9f						copyECFPatternForLineFill:
5784	.dd9f		4a		lsr a		                lsr a                        ;36-39; 44-47; 52-55; 60-63
5785	.dda0		4a		lsr a		                lsr a                        ;18-19; 42-43; 26-27; 30-31
5786	.dda1						LDDA1:
5787	.dda1		29 08		and #$08	                and #$08                     ;8 if PLOT >= 104
5788	.dda3		85 e1		sta $e1		                sta zhlfw.resultEOR
5789	.dda5		49 0f		eor #$0f	                eor #$0F                     ;
5790	.dda7		aa		tax		                tax
5791	.dda8		a0 07		ldy #$07	                ldy #$07
5792	.ddaa						-
5793	.ddaa		bd 20 88	lda $8820,x	                lda andy.currentECFPatterns,x
5794	.ddad		99 30 88	sta $8830,y	                sta andy.hlfw.ecfPattern,y
5795	.ddb0		ca		dex		                dex
5796	.ddb1		88		dey		                dey
5797	.ddb2		10 f6		bpl $ddaa	                bpl -
5798	.ddb4		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
5799	.ddb6		60		rts		                rts

5801							;-------------------------------------------------------------------------
5802							;
5803							;
5804							; entry:
5805							;
5806							; A = offset into VDU variables of coordinates
5807							;
5808							; exit:
5809							;
5810							; A = colour, or $ff if off screen/teletext (as per OSWORD $09)
5811							;
5812	.ddb7						readPixelColour: .proc
5813	.ddb7		20 fa c0	jsr $c0fa	                jsr stopCursorEditing
5814	.ddba		ae 61 03	ldx $0361	                ldx vduv.pixelsPerByteMinusOne
5815	.ddbd		f0 21		beq $dde0	                beq invalid             ;taken if teletext
5816	.ddbf		48		pha		                pha
5817	.ddc0		aa		tax		                tax
5818	.ddc1		20 de d1	jsr $d1de	                jsr eigabsEntryPoint
5819	.ddc4		fa		plx		                plx
5820	.ddc5		20 c3 de	jsr $dec3	                jsr windGADDR
5821	.ddc8		d0 16		bne $dde0	                bne invalid             ;taken if off screen
5822	.ddca		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5823	.ddcc		64 da		stz $da		                stz ZTEMP+0
5824	.ddce		80 01		bra $ddd1	                bra shiftMask

5826							                ; Keep shifting the byte and the mask. When a 1 bit is
5827							                ; shifted out of the mask, shift the corresponding
5828							                ; byte bit bit into ZTEMP+0, building up the pixel
5829							                ; colour a bit at a time.
5830							                ;
5831							                ; When the mask becomes 0, done.
5832	.ddd0						shiftByteAndMask:
5833	.ddd0		0a		asl a		                asl a
5834	.ddd1						shiftMask:
5835	.ddd1		06 d1		asl $d1		                asl ZMASK
5836	.ddd3		90 fb		bcc $ddd0	                bcc shiftByteAndMask
5837	.ddd5		0a		asl a		                asl a
5838	.ddd6		26 da		rol $da		                rol ZTEMP+0
5839	.ddd8		a6 d1		ldx $d1		                ldx ZMASK
5840	.ddda		d0 f5		bne $ddd1	                bne shiftMask
5841	.dddc		a5 da		lda $da		                lda ZTEMP+0
5842	.ddde		80 02		bra $dde2	                bra done

5844	.dde0						invalid:
5845	.dde0		a9 ff		lda #$ff	                lda #$FF
5846	.dde2						done:
5847	.dde2		4c ca c0	jmp $c0ca	                jmp reinstateCursorEditing
5848							                .endproc

5850							;-------------------------------------------------------------------------
5851							;
5852							; Translate ASCII char to the SAA5050 character set.
5853							;
5854							; # ($23) becomes $5f
5855							; _ ($5f) becomes $60
5856							; GBP ($60) becomes $23
5857							;
5858							; Because the mapping is a kind of cycle, you can call this routine
5859							; twice to translate from SAA5050 to ASCII.
5860							;
5861							; entry:
5862							;
5863							; A = ASCII char
5864							;
5865							; exit:
5866							;
5867							; A = SAA550 char
5868							;
5869	.dde5						getSAA5050FromASCII: .block
5870	.dde5		c9 23		cmp #$23	                cmp #$23
5871	.dde7		f0 0a		beq $ddf3	                beq translateHash
5872	.dde9		c9 5f		cmp #$5f	                cmp #$5F
5873	.ddeb		f0 08		beq $ddf5	                beq translateUnderscore
5874	.dded		c9 60		cmp #$60	                cmp #$60
5875	.ddef		d0 06		bne $ddf7	                bne rtsDDF7
5876	.ddf1						translateGBP:
5877	.ddf1		49 3f		eor #$3f	                eor #$3F                     ;0x60->0x5f
5878	.ddf3						translateHash:
5879	.ddf3		49 43		eor #$43	                eor #$43                     ;0x23->0x5f or 0x5f->0x1c
5880	.ddf5						translateUnderscore:
5881	.ddf5		49 3f		eor #$3f	                eor #$3F                     ;0x5f->0x60 or 0x1c->0x23
5882	.ddf7						rtsDDF7:
5883	.ddf7		60		rts		                rts
5884							                .endblock

5886							;-------------------------------------------------------------------------

5888	.ddf8						readCharacterAtTextCursor: .proc
5889	.ddf8		58		cli		                cli
5890	.ddf9		24 d0		bit $d0		                bit STATE
5891	.ddfb		50 06		bvc $de03	                bvc +                      ;taken if not cursor editing
5892	.ddfd		20 fa c0	jsr $c0fa	                jsr stopCursorEditing
5893	.de00		20 d1 c0	jsr $c0d1	                jsr exchangeCursors
5894	.de03						+
5895	.de03		ac 60 03	ldy $0360	                ldy vduv.numberOfLogicalColoursMinusOne
5896	.de06		d0 17		bne $de1f	                bne bitmapMode
5897	.de08						readTeletextChar:
5898	.de08		b2 d8		lda ($d8)	                lda (ZMEMT)                  ;read character from screen
5899	.de0a		20 e5 dd	jsr $dde5	                jsr getSAA5050FromASCII      ;call 2x to convert to ASCII
5900	.de0d		20 e5 dd	jsr $dde5	                jsr getSAA5050FromASCII      ;call 2x to convert to ASCII
5901	.de10						done:
5902	.de10		24 d0		bit $d0		                bit STATE
5903	.de12		50 06		bvc $de1a	                bvc +                     ;taken if not cursor editing
5904	.de14		20 d1 c0	jsr $c0d1	                jsr exchangeCursors
5905	.de17		20 ca c0	jsr $c0ca	                jsr reinstateCursorEditing
5906	.de1a						+
5907	.de1a		ac 55 03	ldy $0355	                ldy vduv.currentScreenMODE
5908	.de1d		aa		tax		                tax
5909	.de1e		60		rts		                rts

5911	.de1f						bitmapMode:
5912	.de1f		20 56 de	jsr $de56	                jsr LDE56
5913	.de22		a5 f4		lda $f4		                lda $F4
5914	.de24		48		pha		                pha
5915	.de25		20 7f e5	jsr $e57f	                jsr selectTerminalROMAndANDY
5916	.de28		a9 20		lda #$20	                lda #$20
5917	.de2a		aa		tax		                tax                          ;X = ASCII code for char
5918	.de2b		20 2c e2	jsr $e22c	                jsr getSoftCharacterDefinitionAddress
5919	.de2e						compare:
5920	.de2e		a0 07		ldy #$07	                ldy #$07
5921	.de30						-
5922	.de30		b9 28 03	lda $0328,y	                lda vduv.workspace._28,y
5923	.de33		51 de		eor ($de),y	                eor (ZTEMPC),y
5924	.de35		d0 0a		bne $de41	                bne nextFontChar ;taken if no match - can't be this char
5925	.de37		88		dey		                dey
5926	.de38		10 f6		bpl $de30	                bpl -

5928	.de3a		8a		txa		                txa                          ;A = char found
5933	.de3b						bitmapModeDone:
5934	.de3b		fa		plx		                plx
5935	.de3c		20 81 e5	jsr $e581	                jsr selectROMX
5936	.de3f		80 cf		bra $de10	                bra done

5938	.de41						nextFontChar:
5939	.de41		e8		inx		                inx                          ;next ASCII code
5947	.de42		18		clc		                clc
5948	.de43		a5 de		lda $de		                lda ZTEMPC+0
5949	.de45		69 08		adc #$08	                adc #$08                     ;8 bytes/font char
5950	.de47		85 de		sta $de		                sta ZTEMPC+0
5951	.de49		90 02		bcc $de4d	                bcc gotCharAddress
5952	.de4b		e6 df		inc $df		                inc ZTEMPC+1
5954	.de4d						gotCharAddress:
5955	.de4d		e0 7f		cpx #$7f	                cpx #$7F
5956	.de4f		f0 f0		beq $de41	                beq nextFontChar                 ;skip CHR$127
5957	.de51		8a		txa		                txa
5958	.de52		d0 da		bne $de2e	                bne compare           ;taken if more chars to consider
5959	.de54		80 e5		bra $de3b	                bra bitmapModeDone ;finish with A=0 - i.e., no match found
5960							                .endproc

5962							;-------------------------------------------------------------------------
5963							;
5964							; Copy character out of screen memory, and store as a 1 bpp bitmap in
5965							; VDU variables workspace.
5966							;
5967	.de56						LDE56: .proc
5968	.de56		a6 d8		ldx $d8		                ldx ZMEMT+0
5969	.de58		a5 d9		lda $d9		                lda ZMEMT+1
5970	.de5a		20 d9 ce	jsr $ced9	                jsr getNext3ColumnAddresses
5971	.de5d		a0 07		ldy #$07	                ldy #$07
5972	.de5f						loop:
5973	.de5f		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
5974	.de62		e0 03		cpx #$03	                cpx #$03
5975	.de64		f0 09		beq $de6f	                beq read2bppChar
5976	.de66		b0 13		bcs $de7b	                bcs read4bppChar
5977	.de68						read1bppChar:
5978	.de68		b1 d8		lda ($d8),y	                lda (ZMEMT),y
5979	.de6a		4d 58 03	eor $0358	                eor vduv.backgroundTextColour
5980	.de6d		80 22		bra $de91	                bra next

5982	.de6f						read2bppChar:
5983	.de6f		b1 d8		lda ($d8),y	                lda (ZMEMT),y                ;get pixels 0-3
5984	.de71		20 a2 de	jsr $dea2	                jsr get4Pixels
5985	.de74		b1 da		lda ($da),y	                lda (ZTEMP),y                  ;get pixels 4-7
5986	.de76		20 a2 de	jsr $dea2	                jsr get4Pixels
5987	.de79		80 14		bra $de8f	                bra LDE8F

5989	.de7b						read4bppChar:
5990	.de7b		b1 d8		lda ($d8),y	                lda (ZMEMT),y                ;get pixels 0/1
5991	.de7d		20 98 de	jsr $de98	                jsr get2Pixels
5992	.de80		b1 da		lda ($da),y	                lda (ZTEMP),y                ;get pixels 2/3
5993	.de82		20 98 de	jsr $de98	                jsr get2Pixels
5994	.de85		b1 dc		lda ($dc),y	                lda (ZTEMPB),y               ;get pixels 4/5
5995	.de87		20 98 de	jsr $de98	                jsr get2Pixels
5996	.de8a		b1 e0		lda ($e0),y	                lda (ZTEMPD),y               ;get pixels 6/7
5997	.de8c		20 98 de	jsr $de98	                jsr get2Pixels
5998	.de8f						LDE8F:
5999	.de8f		a5 df		lda $df		                lda ZTEMPC+1
6000	.de91						next:
6001	.de91		99 28 03	sta $0328,y	                sta vduv.workspace._28,y
6002	.de94		88		dey		                dey
6003	.de95		10 c8		bpl $de5f	                bpl loop
6004	.de97		60		rts		                rts

6006	.de98						get2Pixels:
6007	.de98		4d 58 03	eor $0358	                eor vduv.backgroundTextColour ;reset background pixel bits
6008	.de9b		20 b5 de	jsr $deb5	                jsr or2Pixels
6009	.de9e		29 03		and #$03	                and #%00000011               ;2 pixels/byte
6010	.dea0		80 0c		bra $deae	                bra shiftIn2

6012	.dea2						get4Pixels:
6013	.dea2		4d 58 03	eor $0358	                eor vduv.backgroundTextColour ;
6014	.dea5		20 ba de	jsr $deba	                jsr or4Pixels
6015	.dea8		29 0f		and #$0f	                and #%00001111               ;4 pixels/byte

6017							                ; Build up the 1bpp char row in ZTEMPC?1, 2 or 4 bits
6018							                ; at a time.
6019	.deaa		06 df		asl $df		                asl ZTEMPC+1
6020	.deac		06 df		asl $df		                asl ZTEMPC+1
6021	.deae						shiftIn2:
6022	.deae		06 df		asl $df		                asl ZTEMPC+1
6023	.deb0		06 df		asl $df		                asl ZTEMPC+1
6024	.deb2		04 df		tsb $df		                tsb ZTEMPC+1
6025	.deb4		60		rts		                rts

6027							                ; OR together all the N bits for each pixel, making a
6028							                ; byte in which the bottom N bits have a bit set for
6029							                ; each non-0 pixel in the byte.
6030	.deb5						or2Pixels:
6031	.deb5		85 de		sta $de		                sta ZTEMPC+0
6032	.deb7		20 be de	jsr $debe	                jsr shiftOut2
6033	.deba						or4Pixels:
6034	.deba		85 de		sta $de		                sta ZTEMPC+0                 ;%abcdABCD
6035	.debc		4a		lsr a		                lsr a                        ;%0abcdABC
6036	.debd		4a		lsr a		                lsr a                        ;%00abcdAB
6037	.debe						shiftOut2:
6038	.debe		4a		lsr a		                lsr a                        ;%000abcdA
6039	.debf		4a		lsr a		                lsr a                        ;%0000abcd
6040	.dec0		05 de		ora $de		                ora ZTEMPC+0                 ;%0000abcd|%abcdABCD
6041							                .endproc
6042	.dec2						rtsDEC2:
6043	.dec2		60		rts		                rts

6045							;-------------------------------------------------------------------------
6046							;
6047							; Do WIND. If point not in window, return with Z=0. Otherwise, call
6048							; GADDR and return with Z=1.
6049							;
6050	.dec3						windGADDR:
6051	.dec3		20 a8 d1	jsr $d1a8	                jsr windEntryPoint
6052	.dec6		d0 fa		bne $dec2	                bne rtsDEC2                  ;taken if point outside window
6053	.dec8						gaddrEntryPoint:
6054	.dec8		bd 02 03	lda $0302,x	                lda vduv+2,x                 ;get Y coordinate
6055	.decb						LDECB:
6056	.decb		49 ff		eor #$ff	                eor #$FF                     ;invert Y coordinate
6057	.decd		a8		tay		                tay                          ;Y=Y coordinate
6058	.dece		29 07		and #$07	                and #$07                ;get scanline in character row
6059	.ded0		85 da		sta $da		                sta ZTEMP+0             ;save scanline
6060	.ded2		98		tya		                tya                          ;A=Y coordinate
6061	.ded3		29 f8		and #$f8	                and #$F8                     ;row*8
6062	.ded5		4a		lsr a		                lsr a                        ;row*4
6063	.ded6		85 d7		sta $d7		                sta ZMEMG+1                  ;>(row*1024)
6064	.ded8		4a		lsr a		                lsr a                        ;>(row*512)
6065	.ded9		4a		lsr a		                lsr a                        ;>(row*256)
6066	.deda		65 d7		adc $d7		                adc ZMEMG+1                  ;>(row*1280)
6067	.dedc		4a		lsr a		                lsr a                        ;>(row*640)
6068	.dedd		85 d7		sta $d7		                sta ZMEMG+1                  ;
6069	.dedf		a9 00		lda #$00	                lda #$00                     ;
6070	.dee1		6a		ror a		                ror a                        ;<(row*640) - $00/$80
6071	.dee2		ac 56 03	ldy $0356	                ldy vduv.currentScreenMODEGroup
6072	.dee5		f0 03		beq $deea	                beq +                      ;taken if 640 bytes per row
6073	.dee7		46 d7		lsr $d7		                lsr ZMEMG+1                ;>(row*320)
6074	.dee9		6a		ror a		                ror a                    ;<(row*320) - $00/$40/$80/$c0
6075	.deea						+
6076	.deea		05 da		ora $da		                ora ZTEMP+0               ;include the scanline offset
6077	.deec		6d 50 03	adc $0350	                adc vduv.screenTopLeftAddress+0 ;include LSB of screen base
6078	.deef		8d 1a 03	sta $031a	                sta vduv.graphicsAddressOffset

6080							                ; add MSB of screen base to ZMEMG+1
6081	.def2		a5 d7		lda $d7		                lda ZMEMG+1
6082	.def4		6d 51 03	adc $0351	                adc vduv.screenTopLeftAddress+1
6083	.def7		85 d7		sta $d7		                sta ZMEMG+1

6085	.def9		bd 01 03	lda $0301,x	                lda vduv+1,x                 ;get >X
6086	.defc		85 d6		sta $d6		                sta ZMEMG+0                  ;save >X
6087	.defe		bd 00 03	lda $0300,x	                lda vduv+0,x                 ;get <X
6088	.df01		2d 61 03	and $0361	                and vduv.pixelsPerByteMinusOne ;index for pixel
6089	.df04		6d 61 03	adc $0361	                adc vduv.pixelsPerByteMinusOne ;offset into pixel mask table
6090	.df07		a8		tay		                tay
6091	.df08		b9 2e e1	lda $e12e,y	                lda pixelMasks-1,y
6092	.df0b		85 d1		sta $d1		                sta ZMASK

6094							                ; Form 16-bit column address offset (LSB in A, MSB in
6095							                ; ZMEMG+0), assuming 8 bits/pixel. No adjustment
6096							                ; needed if MODE 0/4, but scale up by 2 if MODE 1/5 or
6097							                ; 4 if MODE 2.

6099	.df0d		bd 00 03	lda $0300,x	                lda vduv+0,x                 ;A = <X
6100	.df10		ac 61 03	ldy $0361	                ldy vduv.pixelsPerByteMinusOne
6101	.df13		c0 03		cpy #$03	                cpy #$03
6102	.df15		f0 05		beq $df1c	                beq LDF1C         ;taken if 4 px/byte - i.e., MODE 1/5
6103	.df17		b0 06		bcs $df1f	                bcs LDF1F        ;taken if >4 px/byte - i.e., MODE 0/4
6104	.df19		0a		asl a		                asl a
6105	.df1a		26 d6		rol $d6		                rol ZMEMG+0
6106	.df1c						LDF1C:
6107	.df1c		0a		asl a		                asl a
6108	.df1d		26 d6		rol $d6		                rol ZMEMG+0
6109	.df1f						LDF1F:
6110	.df1f		29 f8		and #$f8	                and #$F8                     ;<column offset
6111	.df21		18		clc		                clc
6112	.df22		6d 1a 03	adc $031a	                adc vduv.graphicsAddressOffset
6113	.df25		8d 1a 03	sta $031a	                sta vduv.graphicsAddressOffset
6114	.df28		a5 d6		lda $d6		                lda ZMEMG+0                  ;>column offset
6115	.df2a		65 d7		adc $d7		                adc ZMEMG+1                  ;add to address MSB
6116	.df2c		10 04		bpl $df32	                bpl +                        ;taken if no wrap
6117	.df2e		38		sec		                sec
6118	.df2f		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte ;handle wrap at end of screen
6119	.df32						+
6120	.df32		85 d7		sta $d7		                sta ZMEMG+1                  ;got MSB
6121	.df34		64 d6		stz $d6		                stz ZMEMG+0 ;LSB always 0 - the offset takes care of this
6122	.df36		a6 da		ldx $da		                ldx ZTEMP+0 ;get scanline in row
6123	.df38		20 7c da	jsr $da7c	                jsr setupColourMasks
6124	.df3b		ac 1a 03	ldy $031a	                ldy vduv.graphicsAddressOffset
6125	.df3e						ldaim00_rts_DF3E:
6126	.df3e		a9 00		lda #$00	                lda #$00                     ;return with Z=1, as per WIND
6127	.df40		60		rts		                rts

6129							;-------------------------------------------------------------------------

6131	.df41						LDF41:
6132	.df41		20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
6133	.df44		da		phx		                phx
6134	.df45		a2 00		ldx #$00	                ldx #$00
6135	.df47		ad 5a 03	lda $035a	                lda $035A
6136	.df4a		c9 04		cmp #$04	                cmp #$04
6137	.df4c		b0 0b		bcs $df59	                bcs LDF59
6138	.df4e		ae 6a 03	ldx $036a	                ldx $036A
6139	.df51		ad 59 03	lda $0359	                lda $0359
6140	.df54		f0 03		beq $df59	                beq LDF59
6141	.df56		ae 6b 03	ldx $036b	                ldx $036B
6142	.df59						LDF59:
6143	.df59		8e 69 03	stx $0369	                stx $0369
6144	.df5c		fa		plx		                plx
6145	.df5d		60		rts		                rts

6147							;-------------------------------------------------------------------------

6149	.df5e						handleCopyKey:
6150	.df5e		a9 20		lda #$20	                lda #STATE.isVDU5
6151	.df60		24 d0		bit $d0		                bit STATE
6152	.df62		50 da		bvc $df3e	                bvc ldaim00_rts_DF3E      ;taken if not cursor editing
6153	.df64		d0 d8		bne $df3e	                bne ldaim00_rts_DF3E      ;taken if VDU5
6157	.df66		20 f8 dd	jsr $ddf8	                jsr readCharacterAtTextCursor
6163	.df69		f0 0c		beq $df77	                beq rtsDF77              ;taken if char not recognised
6164	.df6b		48		pha		                pha                      ;save char recognised
6165	.df6c		20 d5 df	jsr $dfd5	                jsr isCursorEditingPossible
6166	.df6f		d0 05		bne $df76	                bne pla_rts_DF76
6167	.df71		a9 09		lda #$09	                lda #$09
6168	.df73		20 bc df	jsr $dfbc	                jsr moveEditCursor
6169	.df76						pla_rts_DF76:
6170	.df76		68		pla		                pla
6171	.df77						rtsDF77:
6172	.df77		60		rts		                rts

6174							;-------------------------------------------------------------------------
6175							;
6176							; Handle cursor key press.
6177							;
6178							; Entry: A = one of the cursor key codes:
6179							;            $88 = left
6180							;            $89 = right
6181							;            $8a = down
6182							;            $8b = up

6184	.df78						handleCursorKey:
6185	.df78		48		pha		                pha                          ;save cursor key code
6186	.df79		20 d5 df	jsr $dfd5	                jsr isCursorEditingPossible
6187	.df7c		d0 f8		bne $df76	                bne pla_rts_DF76             ;bail if editing not possible
6188	.df7e		70 16		bvs $df96	                bvs editing                  ;taken if already editing
6189	.df80						beginEditing:
6190	.df80		ad 5f 03	lda $035f	                lda vduv.lastCursorStartRegisterValue
6191	.df83		29 df		and #$df	                and #%11011111
6192	.df85		20 53 cf	jsr $cf53	                jsr setCRTCRegister10        ;hide cursor
6193	.df88		a2 18		ldx #$18	                ldx #VDUVariables.textCursorXPosition
6194	.df8a		a0 64		ldy #$64	                ldy #VDUVariables.editCursorXPosition
6195	.df8c		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables ;edit cursor pos =
6196							                                                   ;text cursor pos
6197	.df8f		20 05 c1	jsr $c105	                jsr activateEditCursor
6198	.df92		a9 02		lda #$02	                lda #STATE.isScrollingDisabled
6199	.df94		04 d0		tsb $d0		                tsb STATE
6200	.df96						editing:
6201	.df96		68		pla		                pla                          ;restore cursor key code

6203							                ; Form appropriate VDU command (8/9/10/11) for the
6204							                ; key, assuming no VDU axis rearrangement.
6205	.df97		29 7f		and #$7f	                and #$7F
6206	.df99		85 da		sta $da		                sta ZTEMP                    ;save VDU command

6208							                ; Adjust VDU command based on axis swap/inversion.
6209	.df9b		c9 0a		cmp #$0a	                cmp #$0A
6210	.df9d		b0 0e		bcs $dfad	                bcs handleCursorUpOrDown     ;taken if up/down
6211	.df9f						handleCursorLeftOrRightOrCopy:
6212	.df9f		ad 66 03	lda $0366	                lda vduv.cursorFlags
6213	.dfa2		4a		lsr a		                lsr a
6214	.dfa3		29 05		and #$05	                and #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertHorizontal)>>1
6215	.dfa5		89 04		bit #$04	                bit #vduv.cursorFlags.swapAxes>>1
6216	.dfa7		f0 11		beq $dfba	                beq gotActualMoveCommand

6218	.dfa9		49 07		eor #$07	                eor #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal)>>1
6219	.dfab		80 0d		bra $dfba	                bra gotActualMoveCommand

6221	.dfad						handleCursorUpOrDown:
6222	.dfad		ad 66 03	lda $0366	                lda vduv.cursorFlags
6223	.dfb0		4a		lsr a		                lsr a
6224	.dfb1		4a		lsr a		                lsr a
6225	.dfb2		29 03		and #$03	                and #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical)>>2 ;000000SV
6226	.dfb4		89 02		bit #$02	                bit #vduv.cursorFlags.swapAxes>>2
6227	.dfb6		f0 02		beq $dfba	                beq gotActualMoveCommand

6229	.dfb8		49 01		eor #$01	                eor #vduv.cursorFlags.invertVertical>>2
6230	.dfba						gotActualMoveCommand:
6231	.dfba		45 da		eor $da		                eor ZTEMP
6232	.dfbc						moveEditCursor:
6233	.dfbc		a8		tay		                tay                          ;save command
6234	.dfbd		a9 40		lda #$40	                lda #STATE.isCursorEditing
6235	.dfbf		14 d0		trb $d0		                trb STATE            ;temporarily disable edit mode
6236	.dfc1		98		tya		                tya                  ;restore command
6237	.dfc2		ae 6c 03	ldx $036c	                ldx vduv.column81
6238	.dfc5		da		phx		                phx                  ;save old column 81 flag
6239	.dfc6		4e 6c 03	lsr $036c	                lsr vduv.column81    ;temporarily reset column 81 flag
6240	.dfc9		20 27 c0	jsr $c027	                jsr outputToVDU      ;print the cursor movement command
6241	.dfcc		68		pla		                pla
6242	.dfcd		8d 6c 03	sta $036c	                sta vduv.column81            ;restore column 81 flag
6243	.dfd0		a9 40		lda #$40	                lda #STATE.isCursorEditing
6244	.dfd2		04 d0		tsb $d0		                tsb STATE                    ;reinstate edit mode
6245	.dfd4		60		rts		                rts

6247							; Check if cursor editing is possible.
6248							;
6249							; Exit: Z=1 - editing is possible
6250							;             V reflects current STATE.isCursorEditing bit
6251							;       Z=0 - editing not possible
6252	.dfd5						isCursorEditingPossible:
6253	.dfd5		ae 6a 02	ldx $026a	                ldx vduQueueNegativeLength
6254	.dfd8		d0 04		bne $dfde	                bne +                        ;return with Z=0 if VDU
6255							                                             ;queue not empty
6256	.dfda		a9 a0		lda #$a0	                lda #STATE.isVDU21|STATE.isVDU5
6257	.dfdc		24 d0		bit $d0		                bit STATE   ;return with Z=0 if neither VDU21 nor VDU5
6258	.dfde						+
6259	.dfde		60		rts		                rts

6261							;-------------------------------------------------------------------------
6262							;
6263							; 184-191 = Move/copy rectangle [MasRef E.3-31]
6264							;
6266	.dfdf						selectExtROMAndPlotMoveOrCopyRectangle:
6267	.dfdf		a2 8e		ldx #$8e	                ldx #$80|extROM   ; select VIEW+ANDY
6268	.dfe1		20 81 e5	jsr $e581	                jsr selectROMX
6269	.dfe4		20 be be	jsr $bebe	                jsr plotMoveOrCopyRectangle
6270	.dfe7		80 08		bra $dff1	                bra LDFF1

6273							;-------------------------------------------------------------------------
6274							;
6275							; 192-199 = Plot ellipse outline [MasRef E.3-32]
6276							;
6278	.dfe9						selectExtROMAndPlotEllipseOutline:
6279	.dfe9		a2 8e		ldx #$8e	                ldx #$80|extROM
6280	.dfeb		20 81 e5	jsr $e581	                jsr selectROMX
6281	.dfee		20 00 ba	jsr $ba00	                jsr plotEllipseOutline
6282	.dff1						LDFF1:
6283	.dff1		4c 7f e5	jmp $e57f	                jmp selectTerminalROMAndANDY

6286							;-------------------------------------------------------------------------
6287							;
6288							; 200-207 = Plot solid ellipse [MasRef E.3-32]
6289							;
6291	.dff4						selectExtROMAndPlotEllipseFilled:
6292	.dff4		a2 8e		ldx #$8e	                ldx #$80|extROM
6293	.dff6		20 81 e5	jsr $e581	                jsr selectROMX
6294	.dff9		20 67 ba	jsr $ba67	                jsr plotEllipseFilled
6295	.dffc		80 f3		bra $dff1	                bra LDFF1

6302							;-------------------------------------------------------------------------

6304							; Pretty sure I have the logic for this all wrong...

6307	>dffe						                .align 16
6309	.e000						startupMessages: .block

6317	.e000						acornMOS:
6318	>e000		0d				                .text 13

6333	>e001		41 63 6f 72 6e 20 4d 4f		                .text "Acorn MOS"
	>e009		53
6338	>e00a		00				                .byte 0
6339	.e00b						beep:
6340	>e00b		07				                .byte 7
6341	>e00c		00				                .byte 0
6343	>e00d		00 00 00			                .byte 0,0,0   ;space for "xxK"

6346	.e010						twoNewlines:
6347	>e010		08				                .byte 8
6348	>e011		0d				                .byte $0D
6349	>e012		0d				                .byte $0D
6350							                ; terminating 0 comes from following table!
6352							                .endblock
6353	.e013						LE013:
6354	>e013		00				                .byte %00000000;$00
6355	>e014		11				                .byte %00010001;$11
6356	>e015		22				                .byte %00100010;$22
6357	>e016		33				                .byte %00110011;$33
6358	>e017		44				                .byte %01000100;$44
6359	>e018		55				                .byte %01010101;$55
6360	>e019		66				                .byte %01100110;$66
6361	>e01a		77				                .byte %01110111;$77
6362	>e01b		88				                .byte %10001000;$88
6363	>e01c		99				                .byte %10011001;$99
6364	>e01d		aa				                .byte %10101010;$AA
6365	>e01e		bb				                .byte %10111011;$BB
6366	>e01f		cc				                .byte %11001100;$CC
6367	>e020		dd				                .byte %11011101;$DD
6368	>e021		ee				                .byte %11101110;$EE
6369	>e022		ff				                .byte %11111111;$FF
6370	.e023						LE023:
6371	>e023		00				                .byte %00000000;$00
6372	>e024		55				                .byte %01010101;$55
6373	>e025		aa				                .byte %10101010;$AA
6374	>e026		ff				                .byte %11111111;$FF

6376							; VDU control code dispatch tables
6377							; ================================
6378							;
6379							; entry:
6380							;
6381							;

6383							; each routine is (address, number of additional VDU bytes)
6384	=[($c035,0)]					_:=[(vdu0EntryPoint,0)] ; VDU0
6385	=[($c035,0),($c0e2,1)]				_..=[(vdu1EntryPoint,1)] ; VDU1
6386	=[($c035,0),($c0e2,1),($c0ea,0)]		_..=[(vdu2EntryPoint,0)] ; VDU2
6387	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0)]	_..=[(vdu3EntryPoint,0)] ; VDU3
6388	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0)]
							_..=[(vdu4EntryPoint,0)] ; VDU4
6389	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0)]
							_..=[(vdu5EntryPoint,0)] ; VDU5
6390	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0)]
							_..=[(vdu6EntryPoint,0)] ; VDU6
6391	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0)]
							_..=[(vdu7EntryPoint,0)] ; VDU7
6392	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0)]
							_..=[(vdu8EntryPoint,0)] ; VDU8
6393	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0)]
							_..=[(vdu9EntryPoint,0)] ; VDU9
6394	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0)]
							_..=[(vdu10EntryPoint,0)] ; VDU10
6395	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0)]
							_..=[(vdu11EntryPoint,0)] ; VDU11
6396	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0)]
							_..=[(vdu12EntryPoint,0)] ; VDU12
6397	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0)]
							_..=[(vdu13EntryPoint,0)] ; VDU13
6398	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0)]
							_..=[(vdu14EntryPoint,0)] ; VDU14
6399	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0)]
							_..=[(vdu15EntryPoint,0)] ; VDU15
6400	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0)]
							_..=[(vdu16EntryPoint,0)] ; VDU16
6401	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1)]
							_..=[(vdu17EntryPoint,1)] ; VDU17
6402	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2)]
							_..=[(vdu18EntryPoint,2)] ; VDU18
6403	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5)]
							_..=[(vdu19EntryPoint,5)] ; VDU19
6404	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0)]
							_..=[(vdu20EntryPoint,0)] ; VDU20
6405	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0)]
							_..=[(vdu21EntryPoint,0)] ; VDU21
6406	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1)]
							_..=[(vdu22EntryPoint,1)] ; VDU22
6407	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9)]
							_..=[(vdu23EntryPoint,9)] ; VDU23
6408	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8)]
							_..=[(vdu24EntryPoint,8)] ; VDU24
6409	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5)]
							_..=[(vdu25EntryPoint,5)] ; VDU25
6410	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0)]
							_..=[(vdu26EntryPoint,0)] ; VDU26
6411	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0)]
							_..=[(vdu27EntryPoint,0)] ; VDU27
6412	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4)]
							_..=[(vdu28EntryPoint,4)] ; VDU28
6413	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4),($c78a,4)]
							_..=[(vdu29EntryPoint,4)] ; VDU29
6414	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4),($c78a,4),($c47c,0)]
							_..=[(vdu30EntryPoint,0)] ; VDU30
6415	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4),($c78a,4),($c47c,0),($c482,2)]
							_..=[(vdu31EntryPoint,2)] ; VDU31
6416	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4),($c78a,4),($c47c,0),($c482,2),($ce2d,0)]
							_..=[(vdu127EntryPoint,0)] ; VDU127
6417	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($efb6,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4),($c78a,4),($c47c,0),($c482,2),($ce2d,0)]
							vdu_routines=_

6419							; LSB of routine address
6420	.e027						vduRoutinesLSBTable:
6421							                .for _i=0,_i<len(vdu_routines),_i+=1
6422	>e027		35				                .byte <vdu_routines[_i][0]
6422	>e028		e2				                .byte <vdu_routines[_i][0]
6422	>e029		ea				                .byte <vdu_routines[_i][0]
6422	>e02a		ea				                .byte <vdu_routines[_i][0]
6422	>e02b		1e				                .byte <vdu_routines[_i][0]
6422	>e02c		2d				                .byte <vdu_routines[_i][0]
6422	>e02d		35				                .byte <vdu_routines[_i][0]
6422	>e02e		b6				                .byte <vdu_routines[_i][0]
6422	>e02f		9a				                .byte <vdu_routines[_i][0]
6422	>e030		4c				                .byte <vdu_routines[_i][0]
6422	>e031		5b				                .byte <vdu_routines[_i][0]
6422	>e032		b1				                .byte <vdu_routines[_i][0]
6422	>e033		4f				                .byte <vdu_routines[_i][0]
6422	>e034		f6				                .byte <vdu_routines[_i][0]
6422	>e035		14				                .byte <vdu_routines[_i][0]
6422	>e036		28				                .byte <vdu_routines[_i][0]
6422	>e037		13				                .byte <vdu_routines[_i][0]
6422	>e038		39				                .byte <vdu_routines[_i][0]
6422	>e039		64				                .byte <vdu_routines[_i][0]
6422	>e03a		2d				                .byte <vdu_routines[_i][0]
6422	>e03b		c5				                .byte <vdu_routines[_i][0]
6422	>e03c		19				                .byte <vdu_routines[_i][0]
6422	>e03d		94				                .byte <vdu_routines[_i][0]
6422	>e03e		7c				                .byte <vdu_routines[_i][0]
6422	>e03f		1f				                .byte <vdu_routines[_i][0]
6422	>e040		9b				                .byte <vdu_routines[_i][0]
6422	>e041		aa				                .byte <vdu_routines[_i][0]
6422	>e042		35				                .byte <vdu_routines[_i][0]
6422	>e043		a5				                .byte <vdu_routines[_i][0]
6422	>e044		8a				                .byte <vdu_routines[_i][0]
6422	>e045		7c				                .byte <vdu_routines[_i][0]
6422	>e046		82				                .byte <vdu_routines[_i][0]
6422	>e047		2d				                .byte <vdu_routines[_i][0]
6423							                .next

6425							; If bit 7 set: MSB of routine address
6426							;
6427							; If bit 7 clear:
6428							;
6429							; Top 4 bits are bits 8-11 of routine address (bits 12-15 are %1010,
6430							; so address is $C0xx to $C7xx)
6431							;
6432							; Bottom 4 bits are ORed with $f0 and stored in $26a - -ve bytes left
6433							; in VDU queue.
6434	.e048						vduRoutinesMSBTable:
6435							                .for _i=0,_i<len(vdu_routines),_i+=1
6437	>e048		c0				                .byte >vdu_routines[_i][0]
6441	>e049		0f				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6437	>e04a		c0				                .byte >vdu_routines[_i][0]
6437	>e04b		c0				                .byte >vdu_routines[_i][0]
6437	>e04c		c5				                .byte >vdu_routines[_i][0]
6437	>e04d		c5				                .byte >vdu_routines[_i][0]
6437	>e04e		c0				                .byte >vdu_routines[_i][0]
6437	>e04f		ef				                .byte >vdu_routines[_i][0]
6437	>e050		c2				                .byte >vdu_routines[_i][0]
6437	>e051		c2				                .byte >vdu_routines[_i][0]
6437	>e052		c2				                .byte >vdu_routines[_i][0]
6437	>e053		c2				                .byte >vdu_routines[_i][0]
6437	>e054		c4				                .byte >vdu_routines[_i][0]
6437	>e055		c3				                .byte >vdu_routines[_i][0]
6437	>e056		c5				                .byte >vdu_routines[_i][0]
6437	>e057		c5				                .byte >vdu_routines[_i][0]
6437	>e058		c4				                .byte >vdu_routines[_i][0]
6441	>e059		5f				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6441	>e05a		5e				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6441	>e05b		6b				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6437	>e05c		c5				                .byte >vdu_routines[_i][0]
6437	>e05d		c5				                .byte >vdu_routines[_i][0]
6441	>e05e		7f				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6441	>e05f		67				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6441	>e060		78				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6441	>e061		6b				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6437	>e062		c6				                .byte >vdu_routines[_i][0]
6437	>e063		c0				                .byte >vdu_routines[_i][0]
6441	>e064		3c				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6441	>e065		7c				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6437	>e066		c4				                .byte >vdu_routines[_i][0]
6441	>e067		4e				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6437	>e068		ce				                .byte >vdu_routines[_i][0]
6443							                .next

6445							;-------------------------------------------------------------------------
6446							;
6447							; entry:
6448							;
6449							; C=0
6450							;
6451							; A = vdu 23 code
6452							;
6453							; VDU queue = the full 9 bytes of the VDU 23
6454							;
6455	.e069						vdu23EntryPointTable:
6456	>e069		fb ce				                .word vdu23_0_EntryPoint
6457	>e06b		2b cf				                .word vdu23_1_EntryPoint
6458	>e06d		57 cf				                .word vdu23_2_EntryPoint
6459	>e06f		57 cf				                .word vdu23_3_EntryPoint
6460	>e071		57 cf				                .word vdu23_4_EntryPoint
6461	>e073		57 cf				                .word vdu23_5_EntryPoint
6462	>e075		df cf				                .word vdu23_6_EntryPoint
6463	>e077		e6 cf				                .word vdu23_7_EntryPoint
6464	>e079		69 d0				                .word vdu23_8_EntryPoint
6465	>e07b		0f d1				                .word vdu23_9_EntryPoint
6466	>e07d		10 d1				                .word vdu23_10_EntryPoint
6467	>e07f		6d cf				                .word vdu23_11_EntryPoint
6468	>e081		96 cf				                .word vdu23_12_EntryPoint
6469	>e083		96 cf				                .word vdu23_13_EntryPoint
6470	>e085		96 cf				                .word vdu23_14_EntryPoint
6471	>e087		96 cf				                .word vdu23_15_EntryPoint
6472	>e089		1e d1				                .word vdu23_16_EntryPoint

6474							;-------------------------------------------------------------------------
6475							;
6476							; entry:
6477							;
6478							; A = plot number
6479							;
6480	.e08b						plotEntryPointTable:
6481	>e08b		4a db				                .word plotPoint    ;64-71 = Plot point [MasRef E.3-24]
6482	>e08d		6c dc				                .word plotHorizontalLineFill ;72-79 = Horizontal line fill (left and right to non-background) [MasRef E.3-24]
6483	>e08f		f7 9b				                .word L9BF7 ;80-87 = Plot triangle [MasRef E.3-25]
6484	>e091		75 dc				                .word plotHorizontalLineFillRight ;88-95 = Horizontal line fill (right to background) [MasRef E.3-25]
6485	>e093		48 c4				                .word LC448 ;96-103 = Plot rectangle [MasRef E.3-26]
6486	>e095		6c dc				                .word plotHorizontalLineFill ;104-111 = Horizontal line fill (left and right to foreground) [MasRef E.3-26]
6487	>e097		a3 9b				                .word plotParallelogram ;112-119 = Plot parallelogram [MasRef E.3-27]
6488	>e099		75 dc				                .word plotHorizontalLineFillRight ;120-127 = Horizontal line fill (right to non-foreground) [MasRef E.3-27]
6489	>e09b		f9 9c				                .word L9CF9 ;128-135 = Flood fill to non-background [MasRef E.3-28]
6490	>e09d		f9 9c				                .word L9CF9 ;136-143 = Flood fill to foreground [MasRef E.3-28]
6491	>e09f		a4 99				                .word L99A4 ;144-151 = Plot circle outline [MasRef E.3-28]
6492	>e0a1		44 99				                .word L9944 ;152-159 = Plot filled circle [MasRef E.3-29]
6493	>e0a3		99 99				                .word L9999 ;160-167 = Plot circular arc [MasRef E.3-29]
6494	>e0a5		35 99				                .word L9935 ;168-175 = Plot filled chord segment [MasRef E.3-30]
6495	>e0a7		23 99				                .word L9923 ;176-183 = Plot filled sector [MasRef E.3-30]
6496	>e0a9		df df				                .word selectExtROMAndPlotMoveOrCopyRectangle ;184-191 = Move/copy rectangle [MasRef E.3-31]
6497	>e0ab		e9 df				                .word selectExtROMAndPlotEllipseOutline ;192-199 = Plot ellipse outline [MasRef E.3-32]
6498	>e0ad		f4 df				                .word selectExtROMAndPlotEllipseFilled ;200-207 = Plot solid ellipse [MasRef E.3-32]

6500							; Times 40 lookup table, high bytes
6501	.e0af						multiplyBy40TableHigh:
6502							                .for _i=0,_i<25,_i+=1
6503	>e0af		00				                .byte >_i*40
6503	>e0b0		00				                .byte >_i*40
6503	>e0b1		00				                .byte >_i*40
6503	>e0b2		00				                .byte >_i*40
6503	>e0b3		00				                .byte >_i*40
6503	>e0b4		00				                .byte >_i*40
6503	>e0b5		00				                .byte >_i*40
6503	>e0b6		01				                .byte >_i*40
6503	>e0b7		01				                .byte >_i*40
6503	>e0b8		01				                .byte >_i*40
6503	>e0b9		01				                .byte >_i*40
6503	>e0ba		01				                .byte >_i*40
6503	>e0bb		01				                .byte >_i*40
6503	>e0bc		02				                .byte >_i*40
6503	>e0bd		02				                .byte >_i*40
6503	>e0be		02				                .byte >_i*40
6503	>e0bf		02				                .byte >_i*40
6503	>e0c0		02				                .byte >_i*40
6503	>e0c1		02				                .byte >_i*40
6503	>e0c2		02				                .byte >_i*40
6503	>e0c3		03				                .byte >_i*40
6503	>e0c4		03				                .byte >_i*40
6503	>e0c5		03				                .byte >_i*40
6503	>e0c6		03				                .byte >_i*40
6503	>e0c7		03				                .byte >_i*40
6504							                .next

6506							; Times 40 lookup table, low bytes
6507	.e0c8						multiplyBy40TableLow:
6508							                .for _i=0,_i<25,_i+=1
6509	>e0c8		00				                .byte <_i*40
6509	>e0c9		28				                .byte <_i*40
6509	>e0ca		50				                .byte <_i*40
6509	>e0cb		78				                .byte <_i*40
6509	>e0cc		a0				                .byte <_i*40
6509	>e0cd		c8				                .byte <_i*40
6509	>e0ce		f0				                .byte <_i*40
6509	>e0cf		18				                .byte <_i*40
6509	>e0d0		40				                .byte <_i*40
6509	>e0d1		68				                .byte <_i*40
6509	>e0d2		90				                .byte <_i*40
6509	>e0d3		b8				                .byte <_i*40
6509	>e0d4		e0				                .byte <_i*40
6509	>e0d5		08				                .byte <_i*40
6509	>e0d6		30				                .byte <_i*40
6509	>e0d7		58				                .byte <_i*40
6509	>e0d8		80				                .byte <_i*40
6509	>e0d9		a8				                .byte <_i*40
6509	>e0da		d0				                .byte <_i*40
6509	>e0db		f8				                .byte <_i*40
6509	>e0dc		20				                .byte <_i*40
6509	>e0dd		48				                .byte <_i*40
6509	>e0de		70				                .byte <_i*40
6509	>e0df		98				                .byte <_i*40
6509	>e0e0		c0				                .byte <_i*40
6510							                .next

6512							; Times 640 lookup table, high bytes
6513	.e0e1						multiplyBy640TableHigh:
6514							                .for _i=0,_i<32,_i+=1
6515	>e0e1		00				                .byte >_i*640
6515	>e0e2		02				                .byte >_i*640
6515	>e0e3		05				                .byte >_i*640
6515	>e0e4		07				                .byte >_i*640
6515	>e0e5		0a				                .byte >_i*640
6515	>e0e6		0c				                .byte >_i*640
6515	>e0e7		0f				                .byte >_i*640
6515	>e0e8		11				                .byte >_i*640
6515	>e0e9		14				                .byte >_i*640
6515	>e0ea		16				                .byte >_i*640
6515	>e0eb		19				                .byte >_i*640
6515	>e0ec		1b				                .byte >_i*640
6515	>e0ed		1e				                .byte >_i*640
6515	>e0ee		20				                .byte >_i*640
6515	>e0ef		23				                .byte >_i*640
6515	>e0f0		25				                .byte >_i*640
6515	>e0f1		28				                .byte >_i*640
6515	>e0f2		2a				                .byte >_i*640
6515	>e0f3		2d				                .byte >_i*640
6515	>e0f4		2f				                .byte >_i*640
6515	>e0f5		32				                .byte >_i*640
6515	>e0f6		34				                .byte >_i*640
6515	>e0f7		37				                .byte >_i*640
6515	>e0f8		39				                .byte >_i*640
6515	>e0f9		3c				                .byte >_i*640
6515	>e0fa		3e				                .byte >_i*640
6515	>e0fb		41				                .byte >_i*640
6515	>e0fc		43				                .byte >_i*640
6515	>e0fd		46				                .byte >_i*640
6515	>e0fe		48				                .byte >_i*640
6515	>e0ff		4b				                .byte >_i*640
6515	>e100		4d				                .byte >_i*640
6516							                .next

6518							;-------------------------------------------------------------------------

6520	.e101						modeMaxRow:
6521	>e101		1f				                .byte 31                     ;MODE 0 = 32 rows
6522	>e102		1f				                .byte 31                     ;MODE 1 = 32 rows
6523	>e103		1f				                .byte 31                     ;MODE 2 = 32 rows
6524	>e104		18				                .byte 24                     ;MODE 3 = 25 rows
6525	>e105		1f				                .byte 31                     ;MODE 4 = 32 rows
6526	>e106		1f				                .byte 31                     ;MODE 5 = 32 rows
6527	>e107		18				                .byte 24                     ;MODE 6 = 25 rows
6528	>e108		18				                .byte 24                     ;MODE 7 = 25 rows

6530							;-------------------------------------------------------------------------

6532	.e109						modeMaxColumn:
6533	>e109		4f				                .byte 79                     ;MODE 0 = 80 columns
6534	>e10a		27				                .byte 39                     ;MODE 1 = 40 columns
6535	>e10b		13				                .byte 19                     ;MODE 2 = 20 columns
6536	>e10c		4f				                .byte 79                     ;MODE 3 = 80 columns
6537	>e10d		27				                .byte 39                     ;MODE 4 = 40 columns
6538	>e10e		13				                .byte 19                     ;MODE 5 = 20 columns
6539	>e10f		27				                .byte 39                     ;MODE 6 = 40 columns
6540	>e110		27				                .byte 39                     ;MODE 7 = 40 columns

6542							;-------------------------------------------------------------------------

6544	.e111						vcontrolForScreenMODE:
6545	>e111		9c				                .byte VCONTROL.cursorX___|VCONTROL.crtc2MHz|VCONTROL.shift16MHz ; $9C - MODE 0
6546	>e112		d8				                .byte VCONTROL.cursorXX__|VCONTROL.crtc2MHz|VCONTROL.shift8MHz ; $d8 - MODE 1
6547	>e113		f4				                .byte VCONTROL.cursorXXXX|VCONTROL.crtc2MHz|VCONTROL.shift4MHz ; $F4 - MODE 2
6548	>e114		9c				                .byte VCONTROL.cursorX___|VCONTROL.crtc2MHz|VCONTROL.shift16MHz ; $9C - MODE 3
6549	>e115		88				                .byte VCONTROL.cursorX___|VCONTROL.crtc1MHz|VCONTROL.shift8MHz ; $88 - MODE 4
6550	>e116		c4				                .byte VCONTROL.cursorXX__|VCONTROL.crtc1MHz|VCONTROL.shift4MHz ; $C4 - MODE 5
6551	>e117		88				                .byte VCONTROL.cursorX___|VCONTROL.crtc1MHz|VCONTROL.shift8MHz ; $88 - MODE 6
6552	>e118		4b				                .byte VCONTROL.cursor_X__|VCONTROL.crtc1MHz|VCONTROL.shift8MHz|VCONTROL.isTeletext|VCONTROL.flash ; $4B - MODE 7

6554							;-------------------------------------------------------------------------

6556	.e119						bytesPerCharacterForMODE:
6557	>e119		08				                .byte 8                      ;MODE 0
6558	>e11a		10				                .byte 16                     ;MODE 1
6559	>e11b		20				                .byte 32                     ;MODE 2
6560	>e11c		08				                .byte 8                      ;MODE 3
6561	>e11d		08				                .byte 8                      ;MODE 4
6562	>e11e		10				                .byte 16                     ;MODE 5
6563	>e11f		08				                .byte 8                      ;MODE 6
6564	.e120						LE120:
6565	>e120		01				                .byte %00000001              ;MODE 7
6566	>e121		ff				                .byte %11111111
6567	>e122		55				                .byte %01010101
6568	>e123		ff				                .byte %11111111
6569	>e124		77				                .byte %01110111
6570	>e125		33				                .byte %00110011
6571	>e126		11				                .byte %00010001

6573							;-------------------------------------------------------------------------

6575	.e127						distanceMasksTable:
6576	>e127		ff				                .byte %11111111
6577	>e128		7f				                .byte %01111111
6578	>e129		3f				                .byte %00111111
6579	>e12a		1f				                .byte %00011111
6580	>e12b		0f				                .byte %00001111
6581	>e12c		07				                .byte %00000111
6582	>e12d		03				                .byte %00000011
6583	>e12e		01				                .byte %00000001

6585							;-------------------------------------------------------------------------
6586							;
6587							; These graphics tables often overlap. I haven't always bothered
6588							; commenting the MODEs for the MODE-indexed tables, as even those
6589							; sometimes overlap.
6590							;
6591							;------------------------------------------------------------------------

6593							;-------------------------------------------------------------------------
6594							;
6595							; This is 3 tables in one. Use the numberOfLogicalColoursMinusOne VDU
6596							; variable to access it:
6597							; pixelMasks[(numberOfLogicalColoursMinusOne&7)-1+colour&numberOfLogicalColoursMinusOne=
6598							;
6599	.e12f						pixelMasks:
6600	>e12f		aa				                .byte %10101010
6601	>e130		55				                .byte %01010101

6603	>e131		88				                .byte %10001000
6604	>e132		44				                .byte %01000100
6605	>e133		22				                .byte %00100010
6606	>e134		11				                .byte %00010001

6608	>e135		80				                .byte %10000000
6609	>e136		40				                .byte %01000000
6610	>e137		20				                .byte %00100000
6611	>e138		10				                .byte %00010000
6612	>e139		08				                .byte %00001000
6613	>e13a		04				                .byte %00000100
6614	>e13b		02				                .byte %00000010
6615	.e13c						numberOfLogicalColoursMinusOneForMODE:
6616	>e13c		01				                .byte %00000001              ;MODE 0 (also part of pixelMasks)
6617	>e13d		03				                .byte 3                      ;MODE 1
6618	>e13e		0f				                .byte 15                     ;MODE 2
6619	>e13f		01				                .byte 1                      ;MODE 3
6620	>e140		01				                .byte 1                      ;MODE 4
6621	>e141		03				                .byte 3                      ;MODE 5
6622	>e142		01				                .byte 1                      ;MODE 6
6623							                ; MODE 7 value (0) is in next table

6625							;-------------------------------------------------------------------------
6626							;
6627							; Overwrite: ZGORA=$ff, ZGEOR=$ff
6628							; OR: ZGORA=value, ZGEOR=$00
6629							; AND: ZGORA=~value, ZGEOR=$00
6630							; EOR: ZGORA=$00, ZGEOR=value
6631							; Invert: ZGORA=$00, ZGEOR=$ff
6632							; Leave: ZGORA=$00, ZGEOR=$ff
6633							;
6634	.e143						zgeorORTable:
6635	>e143		00				                .byte $00
6636	.e144						zgoraORTable:
6637	>e144		ff				                .byte $FF
6638	.e145						zgoraEORTable:
6639	>e145		00				                .byte $00
6640	>e146		00				                .byte $00
6641	>e147		ff				                .byte $FF
6642	.e148						zgeorEORTable:
6643	>e148		ff				                .byte $FF
6644	>e149		ff				                .byte $FF
6645	>e14a		ff				                .byte $FF
6646	>e14b		00				                .byte $00

6648							;-------------------------------------------------------------------------
6649							;
6650							; Index using logical colour value to get a byte with that colour
6651							; value in every pixel.
6652							;
6653							; This is 3 tables in one. Use the numberOfLogicalColoursMinusOne VDU
6654							; variable to access it:
6655							; solidColoursTable[(numberOfLogicalColoursMinusOne&7)-1+colour&numberOfLogicalColoursMinusOne=
6656							;
6657	.e14c						solidColoursTable:

6659							                ; 1 bpp
6660	>e14c		00				                .byte %00000000
6661	>e14d		ff				                .byte %11111111

6663							                ; 2 bpp
6664	>e14e		00				                .byte %00000000
6665	>e14f		0f				                .byte %00001111
6666	>e150		f0				                .byte %11110000
6667	>e151		ff				                .byte %11111111

6669							                ; 4 bpp
6670	>e152		00				                .byte %00000000
6671	>e153		03				                .byte %00000011
6672	>e154		0c				                .byte %00001100
6673	>e155		0f				                .byte %00001111
6674	>e156		30				                .byte %00110000
6675	>e157		33				                .byte %00110011
6676	>e158		3c				                .byte %00111100
6677	>e159		3f				                .byte %00111111
6678	>e15a		c0				                .byte %11000000
6679	>e15b		c3				                .byte %11000011
6680	>e15c		cc				                .byte %11001100
6681	>e15d		cf				                .byte %11001111
6682	>e15e		f0				                .byte %11110000
6683	>e15f		f3				                .byte %11110011
6684	>e160		fc				                .byte %11111100
6685	>e161		ff				                .byte %11111111

6687	.e162						pixelsPerByteMinusOneForMODE:
6688	>e162		07				                .byte 7
6689	>e163		03				                .byte 3
6690	>e164		01				                .byte 1
6691	.e165						LE165:
6692	>e165		00				                .byte 0
6693	>e166		07				                .byte 7
6694	>e167		03				                .byte 3
6695	.e168						screenMODEGroupForMODE:
6696	>e168		00				                .byte 0
6697	>e169		00				                .byte 0
6698	.e16a		00		brk #		                brk
6699	.e16b		01 02		ora ($02,x)	                ora ($02,x)
6700	>e16d		02				                .byte $02
6701	>e16e		03				                .byte $03
6702							;TSB &0D          :\ E16F= 04 0D       ..
6703	>e16f		04				                .byte $04

6705							;-------------------------------------------------------------------------
6706							;
6707							; Hardware scrolling wraparound size settings for screen mode group.
6708							;
6709							; The values for group 4 (1 KB) are bogus - the Mode 7 addressing
6710							; wraparound is handled differently.
6711							;
6712	.e170						latchBit5ForScreenMODEGroup:
6713	>e170		0d				                .byte 5|8                    ;20 KB
6714	>e171		05				                .byte 5|0                    ;16 KB
6715	>e172		0d				                .byte 5|8                    ;10 KB
6716	>e173		05				                .byte 5|0                    ; 8 KB
6717	.e174						latchBit4ForScreenMODEGroup:
6718	>e174		04				                .byte 4|0                    ;20 KB (also benign value for 1 KB)
6719	>e175		04				                .byte 4|0                    ;16 KB
6720	>e176		0c				                .byte 4|8                    ;10 KB
6721	>e177		0c				                .byte 4|8                    ; 8 KB
6722	>e178		04				                .byte 4|0                    ;(benign value for 1 KB)

6724							;-------------------------------------------------------------------------

6726	.e179						screenSizeHighByteForScreenMODEGroup:
6727	>e179		50				                .byte $50
6728	>e17a		40				                .byte $40
6729	>e17b		28				                .byte $28
6730	>e17c		20				                .byte $20
6731	>e17d		04				                .byte $04
6732	.e17e						startScreenAddressHighByteForScreenMODEGroup:
6733	>e17e		30				                .byte $30
6734	>e17f		40				                .byte $40
6735	>e180		58				                .byte $58
6736	>e181		60				                .byte $60
6737	>e182		7c				                .byte $7c
6738	.e183						crtcRegisterLastIndexForScreenMODEGroup:
6739	>e183		0b				                .byte (crtcRegisterValues20KB-crtcRegisterValues)+$0B
6740	>e184		17				                .byte (crtcRegisterValues16KB-crtcRegisterValues)+$0B
6741	>e185		23				                .byte (crtcRegisterValues10KB-crtcRegisterValues)+$0B
6742	>e186		2f				                .byte (crtcRegisterValues8KB-crtcRegisterValues)+$0B
6743	>e187		3b				                .byte (crtcRegisterValues1KB-crtcRegisterValues)+$0B
6744	.e188						crtcRegisterValues:
6745	.e188						crtcRegisterValues20KB:                   ;MODEs 0/1/2
6746	>e188		7f				                .byte $7F            ;R0 - Horizontal Total
6747	>e189		50				                .byte $50            ;R1 - Horizontal Displayed
6748	>e18a		62				                .byte $62            ;R2 - Horizontal Sync
6749	>e18b		28				                .byte $28            ;R3 - Sync Width (%vvvvhhhh)
6750	>e18c		26				                .byte $26            ;R4 - Vertical Total
6751	>e18d		00				                .byte $00            ;R5 - Vertical Total Adjust
6752	>e18e		20				                .byte $20            ;R6 - Vertical Displayed
6753	>e18f		22				                .byte $22            ;R7 - Vertical Sync Position
6754	>e190		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6755	>e191		07				                .byte $07               ;R9 - Scan lines per character
6756	>e192		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6757	>e193		08				                .byte 8                    ;R11 - Cursor End
6758	.e194						crtcRegisterValues16KB:                    ;MODE 3
6759	>e194		7f				                .byte $7F                 ;R0 - Horizontal Total
6760	>e195		50				                .byte $50                 ;R1 - Horizontal Displayed
6761	>e196		62				                .byte $62                 ;R2 - Horizontal Sync
6762	>e197		28				                .byte $28                 ;R3 - Sync Width (%vvvvhhhh)
6763	>e198		1e				                .byte $1e                 ;R4 - Vertical Total
6764	>e199		02				                .byte $02                 ;R5 - Vertical Total Adjust
6765	>e19a		19				                .byte $19                 ;R6 - Vertical Displayed
6766	>e19b		1b				                .byte $1B                 ;R7 - Vertical Sync Position
6767	>e19c		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6768	>e19d		09				                .byte $09               ;R9 - Scan lines per character
6769	>e19e		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6770	>e19f		09				                .byte 9                      ;R11 - Cursor End
6771	.e1a0						crtcRegisterValues10KB:                      ;MODEs 4/5
6772	>e1a0		3f				                .byte $3f                 ;R0 - Horizontal Total
6773	>e1a1		28				                .byte $28                 ;R1 - Horizontal Displayed
6774	>e1a2		31				                .byte $31                 ;R2 - Horizontal Sync
6775	>e1a3		24				                .byte $24                 ;R3 - Sync Width (%vvvvhhhh)
6776	>e1a4		26				                .byte $26                 ;R4 - Vertical Total
6777	>e1a5		00				                .byte $00                 ;R5 - Vertical Total Adjust
6778	>e1a6		20				                .byte $20                 ;R6 - Vertical Displayed
6779	>e1a7		22				                .byte $22                 ;R7 - Vertical Sync Position
6780	>e1a8		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6781	>e1a9		07				                .byte $07               ;R9 - Scan lines per character
6782	>e1aa		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6783	>e1ab		08				                .byte 8                      ;R11 - Cursor End
6784	.e1ac						crtcRegisterValues8KB:                       ;MODE 6
6785	>e1ac		3f				                .byte $3F                 ;R0 - Horizontal Total
6786	>e1ad		28				                .byte $28                 ;R1 - Horizontal Displayed
6787	>e1ae		31				                .byte $31                 ;R2 - Horizontal Sync
6788	>e1af		24				                .byte $24                 ;R3 - Sync Width (%vvvvhhhh)
6789	>e1b0		1e				                .byte $1e                 ;R4 - Vertical Total
6790	>e1b1		02				                .byte $02                 ;R5 - Vertical Total Adjust
6791	>e1b2		19				                .byte $19                 ;R6 - Vertical Displayed
6792	>e1b3		1b				                .byte $1B                 ;R7 - Vertical Sync Position
6793	>e1b4		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6794	>e1b5		09				                .byte $09               ;R9 - Scan lines per character
6795	>e1b6		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6796	>e1b7		09				                .byte 9                      ;R11 - Cursor End
6797	.e1b8						crtcRegisterValues1KB:                       ;MODE 7
6798	>e1b8		3f				                .byte $3f                 ;R0 - Horizontal Total
6799	>e1b9		28				                .byte $28                 ;R1 - Horizontal Displayed
6800	>e1ba		33				                .byte $33                 ;R2 - Horizontal Sync
6801	>e1bb		24				                .byte $24                 ;R3 - Sync Width (%vvvvhhhh)
6802	>e1bc		1e				                .byte $1e                 ;R4 - Vertical Total
6803	>e1bd		02				                .byte $02                 ;R5 - Vertical Total Adjust
6804	>e1be		19				                .byte $19                 ;R6 - Vertical Displayed
6805	>e1bf		1b				                .byte $1b                 ;R7 - Vertical Sync Position
6806	>e1c0		93				                .byte CRTC.R8.cursorDelay2|CRTC.R8.displayDelay1|CRTC.R8.interlaceSyncAndVideo ;R8 - Interlace/Delay
6807	>e1c1		12				                .byte $12               ;R9 - Scan lines per character
6808	>e1c2		72				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|18 ;R10 - Cursor blink/start
6809	>e1c3		13				                .byte 19                     ;R11 - Cursor End

6811							;-------------------------------------------------------------------------
6812							;
6813							; Default ECF patterns [MasRef E.3-16]
6814							;
6815							; Only half the pattern is stored. Each pattern repeats every 4
6816							; scanlines.
6817							;
6818	.e1c4						defaultECFPatterns:
6819							                ; MODE 4
6820	>e1c4		aa 00 aa 00			                .byte $aa,$00,$aa,$00        ;1 - Dark grey
6821	>e1c8		aa 55 aa 55			                .byte $aa,$55,$aa,$55        ;2 - Grey
6822	>e1cc		ff 55 ff 55			                .byte $ff,$55,$ff,$55        ;3 - Light grey
6823	>e1d0		11 22 44 88			                .byte $11,$22,$44,$88        ;4 - Hatching

6825							                ; MODE 1/5
6826	>e1d4		a5 0f a5 0f			                .byte $a5,$0f,$a5,$0f        ;1 - Red-orange
6827	>e1d8		a5 5a a5 5a			                .byte $a5,$5a,$a5,$5a        ;2 - Orange
6828	>e1dc		f0 5a f0 5a			                .byte $f0,$5a,$f0,$5a        ;3 - Yellow-orange
6829	>e1e0		f5 fa f5 fa			                .byte $f5,$fa,$f5,$fa        ;4 - Cream

6831							                ; MODE 2
6832	>e1e4		0b 07 0b 07			                .byte $0b,$07,$0b,$07        ;1 - Orange
6833	>e1e8		23 13 23 13			                .byte $23,$13,$23,$13        ;2 - Pink
6834	>e1ec		0e 0d 0e 0d			                .byte $0e,$0d,$0e,$0d        ;3 - Yellow-green
6835	>e1f0		1f 2f 1f 2f			                .byte $1f,$2f,$1f,$2f        ;4 - Cream

6837							                ; MODE 0
6838	>e1f4		cc 00 cc 00			                .byte $cc,$00,$cc,$00        ;0 - Dark grey
6839	>e1f8		cc 33 cc 33			                .byte $cc,$33,$cc,$33        ;1 - Grey
6840	>e1fc		ff 33 ff 33			                .byte $ff,$33,$ff,$33        ;2 - Light grey
6841	>e200		03 0c 30 c0			                .byte $03,$0c,$30,$c0        ;4 - Hatching

6843	.e204						LE204:
6844	>e204		01				                .byte $01                    ;---
6845	>e205		01				                .byte $01                    ;--h
6846	>e206		03				                .byte $03                    ;-v-
6847	>e207		03				                .byte $03                    ;-vh
6848	>e208		02				                .byte $02                    ;x--
6849	>e209		00				                .byte $00                    ;x-h
6850	>e20a		02				                .byte $02                    ;xv-
6851	>e20b		00				                .byte $00                    ;xvh

6853	.e20c						scrollRoutinesTable:
6854	>e20c		5f c9				                .word LC95F
6855	>e20e		6b c9				                .word LC96B
6856	>e210		5f c9				                .word LC95F
6857	>e212		6b c9				                .word LC96B
6858	>e214		9d c9				                .word LC99D
6859	>e216		9d c9				                .word LC99D
6860	>e218		a4 c9				                .word LC9A4
6861	>e21a		a4 c9				                .word LC9A4
6862	>e21c		c3 c9				                .word LC9C3
6863	>e21e		2d ca				                .word LCA2D
6864	>e220		c3 c9				                .word LC9C3
6865	>e222		2d ca				                .word LCA2D
6866	>e224		f1 ca				                .word LCAF1
6867	>e226		f1 ca				                .word LCAF1
6868	>e228		fa ca				                .word LCAFA
6869	>e22a		fa ca				                .word LCAFA

6871							;-------------------------------------------------------------------------
6872							;
6873							; Get address of soft character definition.
6874							;
6875							; entry:
6876							;
6877							; A = character (32-255)
6878							;
6879							; exit:
6880							;
6881							; (ZTEMPC) = address
6882							;
6883	.e22c						getSoftCharacterDefinitionAddress:
6884	.e22c		0a		asl a		                asl a                        ;a bcdefgh0
6885	.e22d		2a		rol a		                rol a                        ;b cdefgh0a
6886	.e22e		2a		rol a		                rol a                        ;c defgh0ab
6887	.e22f		a8		tay		                tay
6888	.e230		29 03		and #$03	                and #$03                     ;c 000000ab
6889	.e232		2a		rol a		                rol a                        ;0 00000abc
6890	.e233		69 88		adc #$88	                adc #(>andy.softCharacterDefinitions)-1
6891	.e235		85 df		sta $df		                sta ZTEMPC+1
6892	.e237		98		tya		                tya                          ;0 defgh0ab
6893	.e238		29 f8		and #$f8	                and #$F8                     ;0 defgh000
6894	.e23a		85 de		sta $de		                sta ZTEMPC+0
6895	.e23c		60		rts		                rts                          ;

6897							;-------------------------------------------------------------------------
6898							;
6899							; OSBYTE 165 (&A5) Read output cursor position [MasRef D.2-50]
6900							;
6901	.e23d						osbyteA5:
6902	.e23d		20 ab f3	jsr $f3ab	                jsr withMOSROM
6903	.e240		24 d0		bit $d0		                bit STATE
6904	.e242		50 0e		bvc $e252	                bvc getTextCursorPositionWithColumn81                    ;taken if cursor editing
6905	.e244		20 ae e2	jsr $e2ae	                jsr exchangeEditCursorPositionAndTextCursorPosition
6906	.e247		20 52 e2	jsr $e252	                jsr getTextCursorPositionWithColumn81
6907	.e24a		da		phx		                phx
6908	.e24b		5a		phy		                phy
6909	.e24c		20 ae e2	jsr $e2ae	                jsr exchangeEditCursorPositionAndTextCursorPosition
6910	.e24f		7a		ply		                ply
6911	.e250		fa		plx		                plx
6912	.e251		60		rts		                rts

6914							;-------------------------------------------------------------------------
6915							;
6916							; Get text cursor position, taking the column 81 flag into account and
6917							; reporting the X coordinate as N+1 in that case.
6918							;
6919	.e252						getTextCursorPositionWithColumn81:
6920	.e252		20 6d e2	jsr $e26d	                jsr getTextCursorPosition
6921	.e255		2c 6c 03	bit $036c	                bit vduv.column81
6922	.e258		10 01		bpl $e25b	                bpl +                       ;taken if not at column 81
6923	.e25a		e8		inx		                inx                         ;X=81
6924	.e25b						+
6925	.e25b		60		rts		                rts

6927							;-------------------------------------------------------------------------

6929	.e25c						LE25C:
6930	.e25c		38		sec		                sec
6931	.e25d		ad 0a 03	lda $030a	                lda vduv.textWindowRight
6932	.e260		ed 08 03	sbc $0308	                sbc vduv.textWindowLeft
6933	.e263		48		pha		                pha
6934	.e264		a9 00		lda #$00	                lda #$00
6935	.e266		a8		tay		                tay
6936	.e267		80 10		bra $e279	                bra LE279

6938							;-------------------------------------------------------------------------
6939							;
6940							; OSBYTE 134 (&86) Read text cursor position [MasRef D.2-41]
6941							;
6942	.e269						osbyte86:
6943	.e269		24 d0		bit $d0		                bit STATE
6944	.e26b		50 d0		bvc $e23d	                bvc osbyteA5       ;taken if not cursor editing
6945	.e26d						getTextCursorPosition:
6946	.e26d		a9 02		lda #$02	                lda #VDUVariables.cursorFlags.invertHorizontal
6947	.e26f		a0 10		ldy #$10	                ldy #VDUVariables.textCursorXPosition-VDUVariables.textWindow
6948	.e271		a2 00		ldx #$00	                ldx #VDUVariables.textWindowLeft-VDUVariables.textWindow
6949	.e273		20 8a e2	jsr $e28a	                jsr getTextWindowRelativePosition
6950	.e276		48		pha		                pha                          ;save X position
6951	.e277		a9 04		lda #$04	                lda #VDUVariables.cursorFlags.invertVertical
6952	.e279						LE279:
6953	.e279		c8		iny		                iny               ;i.e., offset of textCursorYPosition
6954	.e27a		a2 03		ldx #$03	                ldx #VDUVariables.textWindowTop-VDUVariables.textWindow
6955	.e27c		20 8a e2	jsr $e28a	                jsr getTextWindowRelativePosition
6956	.e27f		aa		tax		                tax                          ;X = Y position
6957	.e280		a8		tay		                tay                          ;Y = Y position
6958	.e281		a9 08		lda #$08	                lda #vduv.cursorFlags.swapAxes
6959	.e283		2c 66 03	bit $0366	                bit vduv.cursorFlags
6960	.e286		f0 24		beq $e2ac	                beq plx_rts ;taken if axes unswapped - so X = X position, Y = Y position
6961	.e288		7a		ply		                ply                          ;Y = Y position, X = X position
6962	.e289		60		rts		                rts

6964							;-------------------------------------------------------------------------
6965							;
6966							; Get text window-relative cursor position, taking into account cursor
6967							; flags.
6968							;
6969							; entry:
6970							;
6971							; A = cursorFlags bit for axis of interest - invertHorizontal or invertVertical
6972							;
6973							; X = offset in VDU variables of text window minimum for axis of interest
6974							;
6975							; Y = offset in VDU variables of cursor position for axis of interest
6976							;
6977							; exit:
6978							;
6979							; A = text window-relative coordinate
6980							;
6981	.e28a						getTextWindowRelativePosition:
6982	.e28a		38		sec		                sec                     ;C=1 ready for the subtraction
6983	.e28b		2c 66 03	bit $0366	                bit vduv.cursorFlags ;test cursor flags inversion bit of interest
6984	.e28e		f0 0b		beq $e29b	                beq axisNotInverted
6985	.e290						axisInverted:
6986	.e290		8a		txa		                txa
6987	.e291		49 02		eor #$02	                eor #$02                     ;swap min and max
6988	.e293		aa		tax		                tax
6989	.e294		bd 08 03	lda $0308,x	                lda vduv.textWindow,x
6990	.e297		f9 08 03	sbc $0308,y	                sbc vduv.textWindow,y
6991	.e29a		60		rts		                rts

6993	.e29b						axisNotInverted:
6994	.e29b		b9 08 03	lda $0308,y	                lda vduv.textWindow,y
6995	.e29e		fd 08 03	sbc $0308,x	                sbc vduv.textWindow,x
6996	.e2a1		60		rts		                rts

6998							;-------------------------------------------------------------------------
6999							;
7000							; Get default bounds for current mode.
7001							;
7002							; exit:
7003							;
7004							; X = max column (19, 39 or 79)
7005							;
7006							; Y = max row (24 or 31)
7007							;
7008							; preserves: A, C
7009							;
7010	.e2a2						getDefaultBoundsForCurrentScreenMODE:
7011	.e2a2		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
7012	.e2a5		bc 09 e1	ldy $e109,x	                ldy modeMaxColumn,x          ;Y = max column
7013	.e2a8		5a		phy		                phy                          ;save max column
7014	.e2a9		bc 01 e1	ldy $e101,x	                ldy modeMaxRow,x             ;Y = max row
7015	.e2ac						plx_rts:
7016	.e2ac		fa		plx		                plx                          ;X = max column
7017	.e2ad		60		rts		                rts

7019							;-------------------------------------------------------------------------
7020							;
7021							; Swap edit cursor position and text cursor position.
7022							;
7023	.e2ae						exchangeEditCursorPositionAndTextCursorPosition:
7024	.e2ae		a2 18		ldx #$18	                ldx #VDUVariables.textCursorXPosition
7025	.e2b0		a0 64		ldy #$64	                ldy #VDUVariables.editCursorXPosition

7027							;-------------------------------------------------------------------------
7028							;
7029							; Swap 2 bytes in the VDU variables.
7030							;
7031							; entry:
7032							;
7033							; X = offset of one set of 2 bytes
7034							;
7035							; Y = offset of the other set of 2 bytes
7036							;
7037	.e2b2						exchangeTwoVDUBytes:
7038	.e2b2		a9 02		lda #$02	                lda #$02
7039	.e2b4		80 06		bra $e2bc	                bra exchangeVDUVariables

7041							;-------------------------------------------------------------------------
7042							;
7043							; Swap graphics cursor and old graphics cursor.
7044							;
7045	.e2b6						LE2B6:
7046	.e2b6		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX
7047	.e2b8						LE2B8:
7048	.e2b8		a0 14		ldy #$14	                ldy #VDUVariables.oldGraphicsCursorPixelsX

7050							;-------------------------------------------------------------------------
7051							;
7052							; Swap 4 bytes in the VDU variables.
7053							;
7054							; entry:
7055							;
7056							; X = offset of one set of 4 bytes
7057							;
7058							; Y = offset of the other set of 4 bytes
7059							;
7060	.e2ba						exchangeFourVDUBytes:
7061	.e2ba		a9 04		lda #$04	                lda #$04

7063							;-------------------------------------------------------------------------
7064							;
7065							; Swap bytes in the VDU variables.
7066							;
7067							; entry:
7068							;
7069							; A = number of bytes to swap
7070							;
7071							; X = offset of one set of bytes
7072							;
7073							; Y = offset of the other set of bytes
7074							;
7075	.e2bc						exchangeVDUVariables:
7076	.e2bc		48		pha		                pha                          ;save count remaining
7077	.e2bd		bd 00 03	lda $0300,x	                lda vduv,x
7078	.e2c0		48		pha		                pha
7079	.e2c1		b9 00 03	lda $0300,y	                lda vduv,y
7080	.e2c4		9d 00 03	sta $0300,x	                sta vduv,x
7081	.e2c7		68		pla		                pla
7082	.e2c8		99 00 03	sta $0300,y	                sta vduv,y
7083	.e2cb		e8		inx		                inx
7084	.e2cc		c8		iny		                iny
7085	.e2cd		68		pla		                pla
7086	.e2ce		3a		dec a		                dec a
7087	.e2cf		d0 eb		bne $e2bc	                bne exchangeVDUVariables
7088	.e2d1		60		rts		                rts

7090							;-------------------------------------------------------------------------
7091							;
7092							; Test current VDU4/VDU5 status.
7093							;
7094							; exit:
7095							;
7096							; Z=0 if VDU5 mode
7097	.e2d2						testVDU5StateNonInlined:
7098	.e2d2		a5 d0		lda $d0		                lda STATE
7099	.e2d4		29 20		and #$20	                and #STATE.isVDU5
7100	.e2d6		60		rts		                rts

7102							;-------------------------------------------------------------------------

7110							;-------------------------------------------------------------------------

7118							;-------------------------------------------------------------------------

7126							;-------------------------------------------------------------------------

7128							; Default vector table
7129							; ====================
7130	.e2d7						defaultVectorTable: .block
7131	>e2d7		ed fb				                .word badCommandError        ; USERV=$200
7132	>e2d9		65 e5				                .word defaultBRKHandler      ; BRKV=$202
7133	>e2db		ff e5				                .word irq1EntryPoint         ; IRQ1V=$204
7134	>e2dd		0c e6				                .word irq2EntryPoint         ; IRQ2V=$206
7135	>e2df		02 e8				                .word oscliEntryPoint        ; CLIV=$208
7136	>e2e1		b1 ee				                .word osbyteEntryPoint       ; BYTEV=$20a
7137	>e2e3		39 ef				                .word oswordEntryPoint       ; WORDV=$20c
7138	>e2e5		22 e8				                .word oswrchEntryPoint       ; WRCHV=$20e
7139	>e2e7		bc e7				                .word osrdchEntryPoint       ; RDCHV=$210
7140	.e2e9						fsVectors: .block
7141	>e2e9		1b ff				                .word E_FILEV                ; FILEV=$212
7142	>e2eb		1e ff				                .word E_ARGSV                ; ARGSV=$214
7143	>e2ed		21 ff				                .word E_BGETV                ; BGETV=$216
7144	>e2ef		24 ff				                .word E_BPUTV                ; BPUTV=$218
7145	>e2f1		27 ff				                .word E_GBPBV                ; GBPBV=$21a
7146	>e2f3		2a ff				                .word E_FINDV                ; FINDV=$21c
7147	>e2f5		2d ff				                .word E_FSCV                 ; FSCV=$21e
7148	.e2f7						end:
7149							                .bend
7150	>e2f7		aa ff				                .word rtsFFAA                ; EVENTV=$220
7151	>e2f9		aa ff				                .word rtsFFAA                ; UPTV=$222
7152	>e2fb		aa ff				                .word rtsFFAA                ; NETV=$224
7153	>e2fd		aa ff				                .word rtsFFAA                ; VDUV=$226
7154	>e2ff		4c f7				                .word keyEntryPoint          ; KEYV=$228
7155	>e301		43 ea				                .word insEntryPoint          ; INSV=$22a
7156	>e303		f8 e9				                .word remEntryPoint          ; REMV=$22c
7157	>e305		7b e9				                .word cnpEntryPoint          ; CNPV=$22e
7158	>e307		aa ff				                .word rtsFFAA                ; IND1V=$230
7159	>e309		aa ff				                .word rtsFFAA                ; IND2V=$232
7160	>e30b		aa ff				                .word rtsFFAA                ; IND3V=$234
7161	.e30d						end:
7162							                .bend

7164							                ; valueFF is a (presumably arbitrary) byte with the
7165							                ; value 255, that's BIT'd in a few places to set the V
7166							                ; flag.
7167	.e30d						defaultMOSVariables:
7168	>e30d		90 01				                .word mosVariables-166       ;mosVariablesAddress
7169	>e30f		9f 0d				                .word extendedVectorSpace    ;extendedVectorSpaceAddress
7170	>e311		a1 02				                .word romInformationTable  ;romInformationTableAddress
7171	>e313		82 f8				                .word keyTranslationTable-16 ;keyboardTranslationTableAddress
7172	>e315		00 03				                .word vduv                   ;vduVariablesAddress
7173	>e317		00				                .byte $00                    ;cfsTimeoutCounter
7174	>e318		00				                .byte $00                    ;inputSource
7175	>e319		ff				                .byte $FF                    ;keyboardSemaphore
7176	>e31a		00				                .byte $00                    ;romPollingSemaphore
7177	>e31b		00				                .byte $00                    ;oshwm
7178	>e31c		01				                .byte $01                    ;rs423InputInterpretationStatus
7179	>e31d		00				                .byte $00                    ;noignoreState
7180	>e31e		00				                .byte $00                    ;cfsRFSFSSwitch
7181	>e31f		00				                .byte $00                    ;vcontrolRegister
7182	>e320		00				                .byte $00                    ;vpaletteRegister
7183	>e321		00				                .byte $00                    ;romActiveAtLastBRK
7184	>e322		ff				                .byte $FF                    ;basicROMNumber
7186	>e323		04				                .byte $04                    ;currentADCChannel
7187	>e324		04				                .byte $04                    ;maximumADCChannel
7192	>e325		00				                .byte $00                    ;adcConversionType
7193	>e326		ff				                .byte $FF                    ;rs423Busy
7197	>e327		42				                .byte $42                    ;aciaControlRegister
7199	>e328		19				                .byte $19                    ;flashCounter
7200	>e329		19				                .byte $19                    ;firstFlashColourDuration
7201	>e32a		19				                .byte $19                    ;secondFlashColourDuration
7202	>e32b		32				                .byte $32                    ;keyboardAutoRepeatDelay
7203	>e32c		08				                .byte $08                    ;keyboardAutoRepeatRate
7204	>e32d		00				                .byte $00                    ;execFileHandle
7205	>e32e		00				                .byte $00                    ;spoolFileHandle
7206	>e32f		00				                .byte $00                    ;breakAndESCAPEEffect
7207	>e330		00				                .byte $00                    ;keyboardStatus
7208	>e331		20				                .byte $20                    ;keyboardStatusByte
7209	>e332		09				                .byte $09                    ;rs423InputBufferMinimumSpace
7210	>e333		00				                .byte $00                    ;rs423Ignore
7211	>e334		00				                .byte $00                    ;rs423Destination
7212	>e335		00				                .byte $00                    ;econetInterceptionStatus
7213	>e336		00				                .byte $00                    ;econetInputInterpretationStatus
7214	>e337		00				                .byte $00                    ;econetOutputInterpretationStatus
7215	>e338		00				                .byte $00                    ;speechSystemByte1
7216	>e339		00				                .byte $00                    ;soundSuppressionStatus
7217	>e33a		03				                .byte $03                    ;bellChannel
7218	>e33b		90				                .byte $90                    ;bellSound
7219	>e33c		64				                .byte $64                    ;bellFrequency
7220	>e33d		06				                .byte $06                    ;bellDuration
7221	>e33e		81				                .byte $81                    ;startupMessageSuppressionStatus
7222	>e33f		00				                .byte $00                    ;softKeyStringLength
7223	>e340		00				                .byte $00                    ;pagedModeCounter
7224	>e341		00				                .byte $00                    ;vduQueueNegativeLength
7225	>e342		09				                .byte $09                    ;tabKeyCode
7226	>e343		1b				                .byte $1B                    ;escapeCharacter
7227	>e344		01				                .byte $01                    ;input192To207Interpretation
7228	>e345		d0				                .byte $D0                    ;input208To223Interpretation
7229	>e346		e0				                .byte $E0                    ;input224To239Interpretation
7230	>e347		f0				                .byte $F0                    ;input240To255Interpretation
7231	>e348		01				                .byte $01                    ;softKeyInterpretation
7232	>e349		80				                .byte $80                    ;shiftSoftKeyInterpretation
7233	>e34a		90				                .byte $90                    ;ctrlSoftKeyInterpretation
7234	>e34b		00				                .byte $00                    ;shiftCtrlSoftKeyInterpretation
7235	>e34c		00				                .byte $00                    ;escapeKeyStatus
7236	>e34d		00				                .byte $00                    ;escapeEffects
7237	>e34e		ff				valueFF:        .byte $FF                    ;userVIAInterruptMask
7238	>e34f		ff				                .byte $FF                    ;rs423InterruptMask
7239	>e350		ff				                .byte $FF                    ;systemVIAInterruptMask
7240	>e351		00				                .byte $00                    ;tubePresence
7241	>e352		00				                .byte $00                    ;speechSystemByte2
7242	>e353		00				                .byte $00                    ;characterDestinationStatus
7243	>e354		00				                .byte editKeysMode.editKeys  ;editKeysMode
7244	>e355		30				                .byte $30                    ;numericKeypadInterpretation
7245	>e356		01				                .byte $01                    ;shadowRAMState
7246	>e357		00				                .byte $00                    ;countryFlag
7247	>e358		00				                .byte $00                    ;userFlag
7251	>e359		64				                .byte $64                    ;serialULARegister
7253	>e35a		05				                .byte initialTimerSwitchState ;timerSwitchState
7254	>e35b		ff				                .byte $FF                    ;softKeyConsistencyFlag
7258	>e35c		01				                .byte $01                    ;printerDriverType
7260	>e35d		0a				                .byte $0a                    ;printerIgnoreChar
7261	>e35e		00				                .byte $00                    ;breakVectorByte0
7262	>e35f		00				                .byte $00                    ;breakVectorByte1
7263	>e360		00				                .byte $00                    ;breakVectorByte2
7264	>e361		00				                .byte $00                    ;vduDriverMemory
7265	>e362		00				                .byte $00                    ;displayMemory
7266	>e363		ff				                .byte $FF                    ;currentLanguageROM

7268							;-------------------------------------------------------------------------
7269							;
7270							; STARTUP
7271							; =======
7272							;
7273	.e364						resetEntryPoint:                ;e364
7274	.e364		a9 40		lda #$40	                lda #$40        ; $40 = RTI
7275	.e366		8d 00 0d	sta $0d00	                sta nmiEntryPoint ; make NMI routine a no-op
7276	.e369		78		sei		                sei
7278							                ; https://www.stardot.org.uk/forums/viewtopic.php?p=329122
7279	.e36a		a9 53		lda #$53	                lda #$53                 ; ???
7280	.e36c		8d 8e fe	sta $fe8e	                sta $FE8E                ; ???
7293	.e36f		20 90 e5	jsr $e590	                jsr selectTerminalROM ; Page in ROM 15 and continue
7294	.e372		4c 20 80	jmp $8020	                jmp reset

7297							;-------------------------------------------------------------------------

7306							;-------------------------------------------------------------------------

7309							                .include "isSecondProcessorPresent.s65"

:18	;******  Processing file: src/isSecondProcessorPresent.s65

1							;-------------------------------------------------------------------------
2							;
3							; Check if a coprocessor is attached to the Tube
4							;
5							; exit:
6							;
7							; C=0 = no Tube
8							;
9							; C=1 = Tube
10							;

12							; (Note that this code is always included in MOS 5.xx, even though
13							; there's no second processor support.)

15	.e375						isSecondProcessorPresent:
19	.e375						isSecondProcessorPresent2:
20							                ; (+ 6 2 4 4 2 2 4 4 2 6) = 36
21	.e375		a2 01		ldx #$01	                ldx #$01
22	.e377		8e e0 fe	stx $fee0	                stx $fee0       ;tube.status1
23	.e37a		ad e0 fe	lda $fee0	                lda $fee0       ;tube.status1
24	.e37d		49 01		eor #$01	                eor #$01
25	.e37f		a2 81		ldx #$81	                ldx #$81
26	.e381		8e e0 fe	stx $fee0	                stx $fee0       ;tube.status1
27	.e384		2d e0 fe	and $fee0	                and $fee0 ;tube.status1       ; Cy=0 if no Tube, Cy=1 if Tube
28	.e387		6a		ror a		                ror a
29	.e388		60		rts		                rts

31							;-------------------------------------------------------------------------
32							;
33							; Check if a coprocessor is attached to the Tube, with a timeout to
34							; accommodate PiTube bootup time.
35							;
36							; exit:
37							;
38							; C=0 = no Tube
39							;
40							; C=1 = Tube
41							;

:11	;******  Return to file: src/mos.s65

7312							;-------------------------------------------------------------------------
7313							;
7314							;
7315							;

7321	.e389						LE389:
7322	.e389		5a		phy		                phy
7323	.e38a		da		phx		                phx
7328	.e38b		20 bb e9	jsr $e9bb	                jsr getROMInsertedFlagRTCAddressAndMask
7329	.e38e		85 fc		sta $fc		                sta TEMPA                    ;save mask
7330	.e390		20 90 e5	jsr $e590	                jsr selectTerminalROM
7331	.e393		20 b7 98	jsr $98b7	                jsr readRTCByte     ;read inserted flag
7332	.e396		98		tya		                tya                          ;A = byte read
7333	.e397		25 fc		and $fc		                and TEMPA                    ;do mask
7335	.e399		c9 01		cmp #$01	                cmp #$01                     ;C set if ROM is inserted
7336	.e39b		fa		plx		                plx
7337	.e39c		7a		ply		                ply
7338	.e39d		4c 81 e5	jmp $e581	                jmp selectROMX

7340							;-------------------------------------------------------------------------
7341							;
7342							; Scan ROMs and fill in the rom information table.
7343							;
7344							; entry:
7345							;
7346							; X = first ROM to scan
7347							;
7349	.e3a0						scanROMs: .proc
7350							                .include "scan_roms.s65"

:12	;******  Processing file: src/scan_roms.s65

1	.e3a0		8a		txa		                txa               ;A = ROM of interest
2	.e3a1		a8		tay		                tay               ;Y = ROM of interest
4	.e3a2		20 89 e3	jsr $e389	                jsr LE389         ;select ROM and check insertion flag
5	.e3a5		90 34		bcc $e3db	                bcc currentROMInvalid ;taken if ROM not actually inserted
7	.e3a7		20 f7 e3	jsr $e3f7	                jsr isROMValid
8	.e3aa		90 2f		bcc $e3db	                bcc currentROMInvalid        ;taken if ROM invalid
9	.e3ac		a6 f4		ldx $f4		                ldx $F4                      ;start from current ROM
10	.e3ae		a4 f4		ldy $f4		                ldy $F4                      ;start from current ROM
24	.e3b0						nextOtherROM:
25	.e3b0		c8		iny		                iny                          ;next other ROM
26	.e3b1		c0 10		cpy #$10	                cpy #$10                     ;out of other ROMs?
27	.e3b3		b0 2a		bcs $e3df	                bcs currentROMValid       ;taken if no more other ROMs
29	.e3b5		20 89 e3	jsr $e389	                jsr LE389   ;select other ROM and check insertion flag
30	.e3b8		90 f6		bcc $e3b0	                bcc nextOtherROM ;taken if other ROM not actually inserted
37							                ; Start address is $8000-Y, so that there's no need to
38							                ; save Y.
39	.e3ba		98		tya		                tya
40	.e3bb		49 ff		eor #$ff	                eor #$FF
41	.e3bd		85 fa		sta $fa		                sta SEIWKA+0
42	.e3bf		a9 7f		lda #$7f	                lda #$7F
43	.e3c1		85 fb		sta $fb		                sta SEIWKA+1
45	.e3c3						compareLoop:
46	.e3c3		8c 30 fe	sty $fe30	                sty ROMSEL                   ;select other ROM
50	.e3c6		b1 fa		lda ($fa),y	                lda (SEIWKA),y               ;get byte from other ROM
52	.e3c8		8e 30 fe	stx $fe30	                stx ROMSEL                   ;select ROM
56	.e3cb		d1 fa		cmp ($fa),y	                cmp (SEIWKA),y               ;same as other ROM?
58	.e3cd		d0 e1		bne $e3b0	                bne nextOtherROM             ;taken if other ROM is good
59	.e3cf		e6 fa		inc $fa		                inc SEIWKA+0
60	.e3d1		d0 f0		bne $e3c3	                bne compareLoop
61	.e3d3		e6 fb		inc $fb		                inc SEIWKA+1
62	.e3d5		a5 fb		lda $fb		                lda SEIWKA+1
69	.e3d7		c9 84		cmp #$84	                cmp #$84                  ;compare only the first 1 KB
70	.e3d9		90 e8		bcc $e3c3	                bcc compareLoop
71							                ; The first 1 KB of the current ROM matches the first
72							                ; 1 KB of some higher-priority ROM, so the current ROM
73							                ; is invalid.

79	.e3db						currentROMInvalid:
80	.e3db		a6 f4		ldx $f4		                ldx $F4
81	.e3dd		80 0d		bra $e3ec	                bra nextROM

83	.e3df						currentROMValid:
94	.e3df		ad 06 80	lda $8006	                lda sidewaysROMType
95	.e3e2		9d a1 02	sta $02a1,x	                sta romInformationTable,x
96	.e3e5		29 8f		and #$8f	                and #$8F
97	.e3e7		d0 03		bne $e3ec	                bne nextROM       ;taken if any mandatory bits are set

99							                ; A bogus ROM type means this ROM is the BASIC ROM.

105	.e3e9		8e 4b 02	stx $024b	                stx basicROMNumber

107	.e3ec						nextROM:
108	.e3ec		e8		inx		                inx
109	.e3ed		e0 10		cpx #$10	                cpx #$10
110	.e3ef		90 af		bcc $e3a0	                bcc scanROMs
111	.e3f1		20 90 e5	jsr $e590	                jsr selectTerminalROM

:11	;******  Return to file: src/mos.s65

7351	.e3f4		4c 24 82	jmp $8224	                jmp romsScanned     ;not sure why not RTS.
7352							                .endproc

7355							;-------------------------------------------------------------------------
7356							;
7357							; Checks a ROM is valid - i.e., has a valid-looking copyright string.
7358							;
7359							; Entry:
7360							;
7361							; X = ROM to check
7362							;
7363							; Exit:
7364							;
7365							; C=0 if ROM invalid; C=1 if ROM valid
7366							;
7367							; ROM of interest is selected
7368							;
7369	.e3f7						isROMValid: .proc ;e3f7
7370	.e3f7		20 81 e5	jsr $e581	                jsr selectROMX
7371	.e3fa		a2 03		ldx #$03	                ldx #$03
7372	.e3fc		ac 07 80	ldy $8007	                ldy $8007       ; fetch ROM copyright offset pointer
7373	.e3ff		18		clc		                clc             ; assume no match
7374	.e400						-
7375	.e400		b9 00 80	lda $8000,y	                lda $8000,y     ; fetch possible ROM copyright char
7376	.e403		5d 13 e5	eor $e513,x	                eor sidewaysROMCopyrightPrefix,x     ; Z=1 if it matches "\x0(C)"
7377	.e406		d0 05		bne $e40d	                bne +           ; branch taken if no match
7378	.e408		c8		iny		                iny             ; next copyright byte
7379	.e409		ca		dex		                dex             ; count 4 chars
7380	.e40a		10 f4		bpl $e400	                bpl -
7381	.e40c		38		sec		                sec             ; C=1 means a match
7382	.e40d						+
7383	.e40d		60		rts		                rts
7384							                .pend

7386							;-------------------------------------------------------------------------

7388							; End of STARTUP code
7389							; ===================
7390	.e40e						LE40E:
7391	.e40e		38		sec		                sec                      ; Call Break Intercept Vector
7392	.e40f		20 49 f3	jsr $f349	                jsr osbyte247EntryPoint
7393	.e412		a2 27		ldx #$27	                ldx #romServiceCallInformReset
7394	.e414		20 72 ee	jsr $ee72	                jsr makeROMServiceCall
7395	.e417		ac 56 02	ldy $0256	                ldy execFileHandle ; Get Exec handle, skip past if closed
7396	.e41a		f0 08		beq $e424	                beq LE424
7397	.e41c		9c 56 02	stz $0256	                stz execFileHandle           ; Clear Exec handle
7398	.e41f		a9 00		lda #$00	                lda #$00                     ; Close Exec channel
7399	.e421		20 ce ff	jsr $ffce	                jsr OSFIND
7400	.e424						LE424:
7401	.e424		38		sec		                sec                          ;
7402	.e425		6e 00 df	ror $df00	                ror hazel.currentFS
7403	.e428		ad 8d 02	lda $028d	                lda lastBREAKType            ; Soft Break
7404	.e42b		f0 04		beq $e431	                beq LE431
7405	.e42d		38		sec		                sec                          ;
7406	.e42e		6e 02 df	ror $df02	                ror hazel.libFS
7407	.e431						LE431:
7408	.e431		20 64 ee	jsr $ee64	                jsr LEE64                    ; Set default ROMFS/TAPEFS settings
7409	.e434		20 30 f2	jsr $f230	                jsr osbyte76                    ; Test Shift and Ctrl keys
7413	.e437		4a		lsr a		                lsr a                        ; Move SHIFT status from b7 to b3
7414	.e438		4a		lsr a		                lsr a
7415	.e439		4a		lsr a		                lsr a
7416	.e43a		4a		lsr a		                lsr a
7418	.e43b		4d 8f 02	eor $028f	                eor startupOptions ; Toggle with OSBYTE 255 boot status
7419	.e43e		29 08		and #$08	                and #$08
7420	.e440		a8		tay		                tay
7421	.e441		ae 03 df	ldx $df03	                ldx hazel.currentFSROM
7422	.e444		ad 8d 02	lda $028d	                lda lastBREAKType ; Soft Break, use current filing system
7423	.e447		f0 0b		beq $e454	                beq LE454         ; taken if soft BREAK
7435	.e449		20 90 e5	jsr $e590	                jsr selectTerminalROM
7440	.e44c		5a		phy		                phy
7441	.e44d		20 a4 8e	jsr $8ea4	                jsr readDefaultROMs
7442	.e450		29 0f		and #$0f	                and #$0F                     ;get default FS ROM
7443	.e452		7a		ply		                ply

7446	.e453		aa		tax		                tax
7447	.e454						LE454:
7448	.e454		3c a1 02	bit $02a1,x	                bit romInformationTable,x    ; check ROM of interest
7449	.e457		10 1f		bpl $e478	                bpl LE478                    ; taken if no service entry
7450	.e459		20 81 e5	jsr $e581	                jsr selectROMX               ; select ROM of interest
7451	.e45c		e0 0f		cpx #$0f	                cpx #terminalROM             ; is it the terminal ROM?
7452	.e45e		d0 0c		bne $e46c	                bne LE46C                    ; taken if not terminal ROM

7454							                ; SPACE+BREAK = RFS *RUN !BOOT when RFS is the default
7455							                ; FS
7456	.e460		20 10 f9	jsr $f910	                jsr osbyte7A
7457	.e463		e8		inx		                inx
7458	.e464		f0 19		beq $e47f	                beq LE47F                    ; taken if no key pressed
7459	.e466		e0 63		cpx #$63	                cpx #key_space+1             ; +1 due to previous inx
7460	.e468		f0 15		beq $e47f	                beq LE47F                    ; taken if SPACE held
7461	.e46a		80 0c		bra $e478	                bra LE478                    ; wasn't space - just
7462							                                             ; ordinary ROM auto boot

7464	.e46c						LE46C:
7465	.e46c		a9 03		lda #$03	                lda #romServiceCallAutoBoot  ; Filing System selection
7466	.e46e		20 03 80	jsr $8003	                jsr $8003                    ; pass to specific ROM
7467	.e471		aa		tax		                tax                          ; save service call result
7468	.e472		20 90 e5	jsr $e590	                jsr selectTerminalROM
7469	.e475		8a		txa		                txa                          ; restore service call result
7470	.e476		f0 2b		beq $e4a3	                beq LE4A3                    ; taken if call was handled
7471	.e478						LE478:
7472	.e478		a2 03		ldx #$03	                ldx #romServiceCallAutoBoot
7473	.e47a		20 72 ee	jsr $ee72	                jsr makeROMServiceCall     ; pass to highest priority ROM
7474	.e47d		f0 24		beq $e4a3	                beq LE4A3                    ; taken if call was handled
7475	.e47f						LE47F:
7476	.e47f		98		tya		                tya                          ; A = boot file flag
7477	.e480		d0 17		bne $e499	                bne LE499                    ; taken if not booting

7479							                ; Handle SPACE+BREAK, or boot mode in the absence of
7480							                ; any non-MOS FS.
7481	.e482		a9 8d		lda #$8d	                lda #$8D                     ; select ROM filing system
7482	.e484		20 9a ed	jsr $ed9a	                jsr osbyte8C8D
7483	.e487		a2 08		ldx #$08	                ldx #<starRunBOOT
7484	.e489		a0 f4		ldy #$f4	                ldy #>starRunBOOT
7485	.e48b		ce 67 02	dec $0267	                dec startupMessageSuppressionStatus
7486	.e48e		20 f7 ff	jsr $fff7	                jsr OSCLI
7487	.e491		ee 67 02	inc $0267	                inc startupMessageSuppressionStatus
7488	.e494		80 0d		bra $e4a3	                bra LE4A3

7490							;-------------------------------------------------------------------------

7492	.e496						LE496:
7493	.e496		ee 67 02	inc $0267	                inc startupMessageSuppressionStatus ;set bit 0
7494	.e499						LE499:
7495	.e499		38		sec		                sec
7496	.e49a		6e 00 df	ror $df00	                ror hazel.currentFS
7498	.e49d		a9 00		lda #$00	                lda #$00
7499	.e49f		aa		tax		                tax
7500	.e4a0		20 c2 ed	jsr $edc2	                jsr selectROMOrTAPE
7507	.e4a3						LE4A3:
7508	.e4a3		a9 05		lda #$05	                lda #$05                     ;
7509	.e4a5		ae 85 02	ldx $0285	                ldx printerDriverType        ; *FX5,<current printer>
7510	.e4a8		20 b1 ee	jsr $eeb1	                jsr osbyteEntryPoint
7516	.e4ab		ad 8d 02	lda $028d	                lda lastBREAKType ; If not Soft Break, select default language
7517	.e4ae		d0 0b		bne $e4bb	                bne LE4BB         ; taken if hard break or power on
7518	.e4b0		ae 8c 02	ldx $028c	                ldx currentLanguageROM      ; Get current language ROM
7524	.e4b3		e0 10		cpx #$10	                cpx #$10                     ; <16, normal ROM number, use it
7526	.e4b5		90 0b		bcc $e4c2	                bcc LE4C2
7530	.e4b7		e0 1f		cpx #$1f	                cpx #$10+terminalROM ; 16+UTILS ROM, re-enter Supervisor or Tube CLI
7532	.e4b9		f0 4e		beq $e509	                beq LE509
7533	.e4bb						LE4BB:
7534	.e4bb		20 90 e5	jsr $e590	                jsr selectTerminalROM     ; Page in ROM 15 - UTILS ROM
7539	.e4be		20 9c 8e	jsr $8e9c	                jsr readDefaultLanguageROM        ; Read configured LANG
7541	.e4c1		aa		tax		                tax
7542	.e4c2						LE4C2:
7543	.e4c2		18		clc		                clc

7545							;-------------------------------------------------------------------------
7546							;
7547							; OSBYTE 142 (&8E) Enter language ROM [MasRef D.2-44]
7548							;
7549	.e4c3						osbyte8E:
7556	.e4c3		3c a1 02	bit $02a1,x	                bit romInformationTable,x ; b6=0, error Not a language
7560	.e4c6		50 4e		bvc $e516	                bvc thisIsNotALanguageError
7561	.e4c8		08		php		                php
7562	.e4c9		90 16		bcc $e4e1	                bcc LE4E1 ;taken if not OSBYTE 142 - so skip ROM check
7563	.e4cb		20 81 e5	jsr $e581	                jsr selectROMX
7564	.e4ce		ad 06 80	lda $8006	                lda sidewaysROMType
7565	.e4d1		29 0d		and #$0d	                and #%00001101
7566	.e4d3		f0 05		beq $e4da	                beq is6502ROM ;taken if low nybble is 0 (6502 BASIC) or 2 (other 6502 ROM)
7568	.e4d5		2c 7a 02	bit $027a	                bit tubePresence
7572	.e4d8		10 54		bpl $e52e	                bpl iCannotRunThisCodeError  ;taken if no Tube - assume impossible to run
7573	.e4da						is6502ROM:
7574	.e4da		da		phx		                phx                          ;save ROM slot
7575	.e4db		a2 2a		ldx #$2a	                ldx #romServiceCallLanguageChange
7576	.e4dd		20 72 ee	jsr $ee72	                jsr makeROMServiceCall
7577	.e4e0		fa		plx		                plx                          ;restore ROM slot
7578	.e4e1						LE4E1:
7579	.e4e1		8e 8c 02	stx $028c	                stx currentLanguageROM
7580	.e4e4		20 81 e5	jsr $e581	                jsr selectROMX
7581	.e4e7		a9 80		lda #$80	                lda #>sidewaysROMName
7582	.e4e9		a0 08		ldy #$08	                ldy #(<sidewaysROMName)-1
7583	.e4eb		20 a3 e7	jsr $e7a3	                jsr print0TerminatedString
7584	.e4ee		84 fd		sty $fd		                sty errPtr+0
7585	.e4f0		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7586	.e4f3		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7587	.e4f6		28		plp		                plp
7589	.e4f7		a9 01		lda #$01	                lda #$01               ; A=1 on default language entry
7590	.e4f9		2c 7a 02	bit $027a	                bit tubePresence
7591	.e4fc		30 12		bmi $e510	                bmi copyLanguageOverTube     ;taken if Tube is present
7593	.e4fe		ad 06 80	lda $8006	                lda sidewaysROMType
7594	.e501		29 0d		and #$0d	                and #%00001101
7595	.e503		d0 29		bne $e52e	                bne iCannotRunThisCodeError ;taken if low nybble isn't 0 (6502 BASIC) or 2 (other 6502 ROM)
7596	.e505		1a		inc a		                inc a                   ;A=1 on default language entry
7597	.e506		4c 00 80	jmp $8000	                jmp sidewaysROMLanguageEntry

7599	.e509						LE509:
7600	.e509		a9 00		lda #$00	                lda #$00
7602	.e50b		2c 7a 02	bit $027a	                bit tubePresence
7603	.e50e		10 69		bpl $e579	                bpl startCommandLineUI
7604	.e510						copyLanguageOverTube:
7605	.e510		4c 00 04	jmp $0400	                jmp tubeHost.copyLanguage

7610							;-------------------------------------------------------------------------

7612	.e513						sidewaysROMCopyrightPrefix: .block
7613	>e513		29 43 28			                .text ")C("
7614	.e516						end:
7615							                .endblock

7617							;-------------------------------------------------------------------------

7619	.e516						thisIsNotALanguageError:
7620	.e516		00		brk #		                brk
7621	>e517		00 54 68 69 73 20 69 73		                .text 0,"This is not a language"
	>e51f		20 6e 6f 74 20 61 20 6c 61 6e 67 75 61 67 65

7623							;-------------------------------------------------------------------------

7625	.e52e						iCannotRunThisCodeError:
7626	.e52e		00		brk #		                brk
7627	>e52f		00 49 20 63 61 6e 6e 6f		                .text 0,"I cannot run this code",0
	>e537		74 20 72 75 6e 20 74 68 69 73 20 63 6f 64 65 00

7629							;-------------------------------------------------------------------------
7630							;
7631							; OSBYTE 164 (&A4) Check processor type [MasRef D.2-50]
7632							;
7633	.e547						osbyteA4:
7634	.e547		a2 03		ldx #$03	                ldx #sidewaysROMCopyrightPrefix.end-sidewaysROMCopyrightPrefix
7635	.e549		a0 07		ldy #$07	                ldy #<sidewaysROMCopyrightOffset
7636	.e54b		b1 f0		lda ($f0),y	                lda (originalX),y
7637	.e54d		a8		tay		                tay
7638	.e54e						-
7639	.e54e		b1 f0		lda ($f0),y	                lda (originalX),y
7640	.e550		dd 13 e5	cmp $e513,x	                cmp sidewaysROMCopyrightPrefix,x
7641	.e553		d0 0f		bne $e564	                bne rtsE564 ;taken if (C) not found - must be OK, if it's not a ROM?
7642	.e555		c8		iny		                iny
7643	.e556		ca		dex		                dex
7644	.e557		10 f5		bpl $e54e	                bpl -
7645	.e559		a0 06		ldy #$06	                ldy #<sidewaysROMType
7646	.e55b		b1 f0		lda ($f0),y	                lda (originalX),y
7647	.e55d		0a		asl a		                asl a
7648	.e55e		10 b6		bpl $e516	                bpl thisIsNotALanguageError ;taken if no language entry point
7649	.e560		29 1a		and #$1a	                and #%00001101<<1
7650	.e562		d0 ca		bne $e52e	                bne iCannotRunThisCodeError ;taken if low nybble wasn't 0 (6502 BASIC) or 2 (other 6502 ROM)
7651	.e564						rtsE564:
7652	.e564		60		rts		                rts

7654							;-------------------------------------------------------------------------

7665							;-------------------------------------------------------------------------

7675							;-------------------------------------------------------------------------

7677	.e565						defaultBRKHandler:
7678	.e565		a0 00		ldy #$00	                ldy #$00
7679	.e567		20 a7 e7	jsr $e7a7	                jsr printBRKMessage
7680	.e56a		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7681	.e56d		ad 67 02	lda $0267	                lda startupMessageSuppressionStatus
7682	.e570		6a		ror a		                ror a
7683	.e571		b0 06		bcs $e579	                bcs startCommandLineUI                   ;taken if bit 0 was set
7684	.e573		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7685	.e576		4c 96 e4	jmp $e496	                jmp LE496

7687							;-------------------------------------------------------------------------

7689	.e579						startCommandLineUI:
7690	.e579		20 90 e5	jsr $e590	                jsr selectTerminalROM
7691	.e57c		4c 61 86	jmp $8661	                jmp commandLineUI

7693							;-------------------------------------------------------------------------
7694							;
7695							; Select paged ROM bank 15 - TERMINAL - with ANDY paged in,
7696							;
7697							; Preserves A/Y
7698	.e57f						selectTerminalROMAndANDY:   ;e57f
7699	.e57f		a2 8f		ldx #$8f	                ldx #$80|terminalROM
7700							                ; fall through into selectROMX

7702							;-------------------------------------------------------------------------
7703							;-------------------------------------------------------------------------
7704							;
7705							; Select paged ROM bank.
7706							;
7707							; Entry:
7708							;
7709							; X = bank to select.
7710							;
7711							; Preserves A/X/Y/P
7712	.e581						selectROMX:   ;e581
7713	.e581		86 f4		stx $f4		                stx $F4
7714	.e583		8e 30 fe	stx $fe30	                stx ROMSEL
7715	.e586		60		rts		                rts

7717							;-------------------------------------------------------------------------
7718							;
7719	.e587						isROMValidThenSelectTerminalROM:
7720	.e587		5a		phy		                phy
7721	.e588		20 f7 e3	jsr $e3f7	                jsr isROMValid
7722	.e58b		20 90 e5	jsr $e590	                jsr selectTerminalROM
7723	.e58e		7a		ply		                ply
7724	.e58f		60		rts		                rts

7726							;-------------------------------------------------------------------------
7727							;
7728							; Select paged ROM bank 15 -
7729							;
7730							; Preserves X/Y
7731	.e590						selectTerminalROM:            ;e590
7732	.e590		a9 0f		lda #$0f	                lda #terminalROM
7733							                ; fall through into selectROMA

7735							;-------------------------------------------------------------------------
7736							;
7737							; Select paged ROM bank.
7738							;
7739							; A = bank to select.
7740							;
7741							; Preserves A/X/Y/P
7742	.e592						selectROMA:                   ;e592
7743	.e592		85 f4		sta $f4		                sta $F4         ;update ROMSEL copy
7744	.e594		8d 30 fe	sta $fe30	                sta ROMSEL
7745	.e597		60		rts		                rts

7747							;-------------------------------------------------------------------------
7748							;
7749							; Select paged ROM bank 15 - TERMINAL - with ANDY paged in,
7750							;
7751							; Preserves A/X/Y

7753	.e598						selectTerminalROMAndANDY2:
7754	.e598		da		phx		                phx
7755	.e599		20 7f e5	jsr $e57f	                jsr selectTerminalROMAndANDY
7756	.e59c		fa		plx		                plx
7757	.e59d		60		rts		                rts

7759							;-------------------------------------------------------------------------

7761	.e59e						irqEntryPoint:
7762	.e59e		85 fc		sta $fc		                sta TEMPA
7763	.e5a0		68		pla		                pla                          ;restore P
7764	.e5a1		48		pha		                pha                          ;save P
7765	.e5a2		29 10		and #$10	                and #$10
7766	.e5a4		d0 03		bne $e5a9	                bne brkEntryPoint
7767	.e5a6		6c 04 02	jmp ($0204)	                jmp (IRQ1V)

7769	.e5a9						brkEntryPoint:
7770	.e5a9		da		phx		                phx
7771	.e5aa		ba		tsx		                tsx
7772	.e5ab		bd 03 01	lda $0103,x	                lda $0103,x                  ;get BRK address+1 LSB
7773	.e5ae		d8		cld		                cld                          ;
7774	.e5af		38		sec		                sec                          ;
7775	.e5b0		e9 01		sbc #$01	                sbc #$01                     ;get BRK address LSB
7776	.e5b2		85 fd		sta $fd		                sta errPtr+0
7777	.e5b4		bd 04 01	lda $0104,x	                lda $0104,x                  ;get BRK address+1 MSB
7778	.e5b7		e9 00		sbc #$00	                sbc #$00                     ;get BRK address MSB
7779	.e5b9		85 fe		sta $fe		                sta errPtr+1
7780	.e5bb		a5 f4		lda $f4		                lda $F4
7781	.e5bd		8d 4a 02	sta $024a	                sta romActiveAtLastBRK
7782	.e5c0		86 f0		stx $f0		                stx originalX
7783	.e5c2		a2 06		ldx #$06	                ldx #romServiceCallBreakInstruction
7784	.e5c4		20 72 ee	jsr $ee72	                jsr makeROMServiceCall
7785	.e5c7		ae 8c 02	ldx $028c	                ldx currentLanguageROM
7786	.e5ca		20 81 e5	jsr $e581	                jsr selectROMX
7787	.e5cd		fa		plx		                plx
7788	.e5ce		a5 fc		lda $fc		                lda TEMPA
7789	.e5d0		58		cli		                cli
7790	.e5d1		6c 02 02	jmp ($0202)	                jmp (BRKV)

7792							;-------------------------------------------------------------------------

7795	.e5d4						LE5D4:
7796	.e5d4		38		sec		                sec
7797	.e5d5		6e 4f 02	ror $024f	                ror rs423Busy
7798	.e5d8		2c 50 02	bit $0250	                bit aciaControlRegister
7799	.e5db		10 07		bpl $e5e4	                bpl LE5E4
7800	.e5dd		20 27 ed	jsr $ed27	                jsr getRS423InputBufferFreeBytes
7801	.e5e0		a2 00		ldx #$00	                ldx #$00
7802	.e5e2		b0 02		bcs $e5e6	                bcs LE5E6
7803	.e5e4						LE5E4:
7804	.e5e4		a2 40		ldx #$40	                ldx #$40
7805	.e5e6						LE5E6:
7806	.e5e6		4c 12 e9	jmp $e912	                jmp resetACIAState

7808	.e5e9						LE5E9:
7809	.e5e9		ac 09 fe	ldy $fe09	                ldy ACIA+1
7810	.e5ec		29 3a		and #$3a	                and #$3A
7811	.e5ee		d0 38		bne $e628	                bne LE628
7812	.e5f0		ae 5c 02	ldx $025c	                ldx rs423Ignore
7813	.e5f3		d0 09		bne $e5fe	                bne LE5FE
7814	.e5f5		e8		inx		                inx
7815	.e5f6		20 80 ea	jsr $ea80	                jsr osbyte99
7816	.e5f9		20 27 ed	jsr $ed27	                jsr getRS423InputBufferFreeBytes
7817	.e5fc		90 e6		bcc $e5e4	                bcc LE5E4
7818	.e5fe						LE5FE:
7819	.e5fe		60		rts		                rts

7822							;-------------------------------------------------------------------------

7824	.e5ff						irq1EntryPoint:
7825	.e5ff		a5 fc		lda $fc		                lda TEMPA
7826	.e601		48		pha		                pha
7827	.e602		da		phx		                phx
7828	.e603		5a		phy		                phy
7830	.e604		b8		clv		                clv
7832	.e605		20 0f e6	jsr $e60f	                jsr irq1Handler
7833	.e608		7a		ply		                ply
7834	.e609		fa		plx		                plx
7835	.e60a		68		pla		                pla
7836	.e60b		40		rti		                rti

7838							;-------------------------------------------------------------------------

7840	.e60c						irq2EntryPoint:
7841	.e60c		a5 fc		lda $fc		                lda TEMPA
7842	.e60e		40		rti		                rti

7844							;-------------------------------------------------------------------------

7850	.e60f						irq1Handler:
7851	.e60f		ad 08 fe	lda $fe08	                lda ACIA+0
7855	.e612		70 02		bvs $e616	                bvs LE616
7856	.e614		10 5c		bpl $e672	                bpl checkForSystemVIAInterrupt
7857	.e616						LE616:
7858	.e616		a6 ea		ldx $ea		                ldx $EA
7859	.e618		ca		dex		                dex
7860	.e619		30 33		bmi $e64e	                bmi LE64E
7861	.e61b		70 30		bvs $e64d	                bvs rtsE64D
7862	.e61d		20 84 f3	jsr $f384	                jsr withTerminalROM
7863	.e620		4c 5d a4	jmp $a45d	                jmp LA45D

7865	.e623						LE623:
7866	.e623		ac 09 fe	ldy $fe09	                ldy ACIA+1
7867	.e626		2a		rol a		                rol a
7868	.e627		0a		asl a		                asl a
7869	.e628						LE628:
7870	.e628		aa		tax		                tax
7871	.e629		98		tya		                tya
7872	.e62a		a0 07		ldy #$07	                ldy #$07
7873	.e62c		4c 28 ea	jmp $ea28	                jmp eventEntryPoint

7875	.e62f						LE62F:
7876	.e62f		a2 02		ldx #$02	                ldx #$02
7877	.e631		20 f4 e9	jsr $e9f4	                jsr osbyte91
7878	.e634		90 10		bcc $e646	                bcc LE646
7879	.e636		ad 85 02	lda $0285	                lda printerDriverType
7880	.e639		c9 02		cmp #$02	                cmp #$02
7881	.e63b		d0 97		bne $e5d4	                bne LE5D4
7882	.e63d		e8		inx		                inx
7883	.e63e		20 f4 e9	jsr $e9f4	                jsr osbyte91
7884	.e641		6e d1 02	ror $02d1	                ror bufferEmptyFlags+bufferPrinter
7885	.e644		30 8e		bmi $e5d4	                bmi LE5D4
7886	.e646						LE646:
7887	.e646		8d 09 fe	sta $fe09	                sta ACIA+1
7888	.e649		a9 e7		lda #$e7	                lda #$E7
7889	.e64b		85 ea		sta $ea		                sta $EA
7890	.e64d						rtsE64D:
7891	.e64d		60		rts		                rts

7893	.e64e						LE64E:
7895	.e64e		2d 78 02	and $0278	                and rs423InterruptMask
7897	.e651		4a		lsr a		                lsr a
7898	.e652		90 07		bcc $e65b	                bcc LE65B
7899	.e654		70 05		bvs $e65b	                bvs LE65B
7900	.e656		ac 50 02	ldy $0250	                ldy aciaControlRegister
7901	.e659		30 8e		bmi $e5e9	                bmi LE5E9
7902	.e65b						LE65B:
7903	.e65b		4a		lsr a		                lsr a
7904	.e65c		6a		ror a		                ror a
7905	.e65d		b0 c4		bcs $e623	                bcs LE623
7906	.e65f		30 ce		bmi $e62f	                bmi LE62F
7907	.e661		70 ea		bvs $e64d	                bvs rtsE64D

7910							;-------------------------------------------------------------------------

7912	.e663						handleUnrecogisedInterrupt:
7913	.e663		a2 05		ldx #$05	                ldx #romServiceCallUnrecognisedInterrupt
7914	.e665		20 72 ee	jsr $ee72	                jsr makeROMServiceCall
7915	.e668		f0 e3		beq $e64d	                beq rtsE64D                  ;taken if handled

7917							                ; Pass unrecognised, unhandled interrupts to IRQ2V.
7918	.e66a		68		pla		                pla
7919	.e66b		68		pla		                pla
7920	.e66c		7a		ply		                ply
7921	.e66d		fa		plx		                plx
7922	.e66e		68		pla		                pla
7926	.e66f		6c 06 02	jmp ($0206)	                jmp (IRQ2V)

7928							;-------------------------------------------------------------------------

7933	.e672						checkForSystemVIAInterrupt:
7935	.e672		ad 4d fe	lda $fe4d	                lda systemVIA.ifr
7939	.e675		10 3c		bpl $e6b3	                bpl checkForUserVIAInterrupt
7941	.e677		2d 79 02	and $0279	                and systemVIAInterruptMask
7942	.e67a		2d 4e fe	and $fe4e	                and systemVIA.ier
7943	.e67d		89 02		bit #$02	                bit #VIA.irq.ca1
7944	.e67f		f0 54		beq $e6d5	                beq checkForSystemVIAT1Interrupt

7946							                ; Handle CA1 interrupt - CRTC vsync.

7948	.e681		ce 40 02	dec $0240	                dec cfsTimeoutCounter
7950	.e684		a5 ea		lda $ea		                lda $EA
7951	.e686		10 02		bpl $e68a	                bpl +
7952	.e688		e6 ea		inc $ea		                inc $EA
7953	.e68a						+
7955	.e68a		ad 51 02	lda $0251	                lda flashCounter
7956	.e68d		f0 1a		beq $e6a9	                beq flashDone                    ;taken if no flash
7957	.e68f		ce 51 02	dec $0251	                dec flashCounter             ;count down
7958	.e692		d0 15		bne $e6a9	                bne flashDone
7959	.e694		ae 52 02	ldx $0252	                ldx firstFlashColourDuration ;assume first flash colour is next
7960	.e697		ad 48 02	lda $0248	                lda vcontrolRegister
7961	.e69a		4a		lsr a		                lsr a                        ;C=flash bit
7962	.e69b		90 03		bcc $e6a0	                bcc +                        ;taken if first flash colour is next
7963	.e69d		ae 53 02	ldx $0253	                ldx secondFlashColourDuration ;actually, second flash colour is next
7964	.e6a0						+
7965	.e6a0		2a		rol a		                rol a                        ;reinstate old register value
7966	.e6a1		49 01		eor #$01	                eor #VCONTROL.flash          ;toggle flash bit
7967	.e6a3		20 50 f2	jsr $f250	                jsr setVCONTROL
7968	.e6a6		8e 51 02	stx $0251	                stx flashCounter
7969	.e6a9						flashDone:
7970	.e6a9		a0 04		ldy #$04	                ldy #eventStartOfVerticalSync
7971	.e6ab		20 28 ea	jsr $ea28	                jsr eventEntryPoint
7972	.e6ae		a9 02		lda #$02	                lda #VIA.irq.ca1
7976	.e6b0		4c 8a e7	jmp $e78a	                jmp staSystemVIAIFR          ;acknowledge CA1

7980	.e6b3						checkForUserVIAInterrupt:
7981	.e6b3		ad 6d fe	lda $fe6d	                lda userVIA.ifr
7982	.e6b6		10 ab		bpl $e663	                bpl handleUnrecogisedInterrupt
7983	.e6b8		2d 77 02	and $0277	                and userVIAInterruptMask
7984	.e6bb		2d 6e fe	and $fe6e	                and userVIA.ier
7985	.e6be		6a		ror a		                ror a                        ;C=CA2
7986	.e6bf		6a		ror a		                ror a                        ;C=CA1
7987	.e6c0		90 a1		bcc $e663	                bcc handleUnrecogisedInterrupt
7988	.e6c2		ac 85 02	ldy $0285	                ldy printerDriverType
7989	.e6c5		88		dey		                dey
7990	.e6c6		d0 9b		bne $e663	                bne handleUnrecogisedInterrupt ;taken if printerDriverType not 1
7991	.e6c8		a9 02		lda #$02	                lda #VIA.irq.ca1
7992	.e6ca		8d 6d fe	sta $fe6d	                sta userVIA.ifr              ;acknowledge CA1
7993	.e6cd		8d 6e fe	sta $fe6e	                sta userVIA.ier              ;inhibit CA1
7994	.e6d0		a2 03		ldx #$03	                ldx #bufferPrinter
7995	.e6d2		4c d5 e8	jmp $e8d5	                jmp LE8D5

7998	.e6d5						checkForSystemVIAT1Interrupt:
7999	.e6d5		89 40		bit #$40	                bit #VIA.irq.t1
8001	.e6d7		f0 75		beq $e74e	                beq checkForSystemVIACB1Interrupt

8006							                ; Handle T1 interrupt - 100 Hz timer.

8008	.e6d9		a9 40		lda #$40	                lda #VIA.irq.t1
8009	.e6db		8d 4d fe	sta $fe4d	                sta systemVIA.ifr            ;acknowledge T1 interrupt
8010	.e6de		ad 83 02	lda $0283	                lda timerSwitchState
8011	.e6e1		aa		tax		                tax                          ;X=old timerSwitchState
8012	.e6e2		49 0f		eor #$0f	                eor #$0F
8013	.e6e4		48		pha		                pha                          ;save new timerSwitchState
8014	.e6e5		a8		tay		                tay                          ;Y=new timerSwitchState
8015	.e6e6		38		sec		                sec                          ;C=1 - increment
8016	.e6e7						updateTIMELoop:
8017	.e6e7		bd 91 02	lda $0291,x	                lda timer0-1,x
8018	.e6ea		69 00		adc #$00	                adc #$00
8019	.e6ec		99 91 02	sta $0291,y	                sta timer0-1,y

8021							                ; one of X or Y will get to 0 to indicate the end of
8022							                ; the loop.
8023	.e6ef		ca		dex		                dex
8024	.e6f0		f0 03		beq $e6f5	                beq updateTIMEDone
8025	.e6f2		88		dey		                dey
8026	.e6f3		d0 f2		bne $e6e7	                bne updateTIMELoop
8027	.e6f5						updateTIMEDone:
8028	.e6f5		68		pla		                pla                          ;restore new timerSwitchState
8029	.e6f6		8d 83 02	sta $0283	                sta timerSwitchState
8030	.e6f9		a2 05		ldx #$05	                ldx #$05
8031	.e6fb						incrementIntervalTimer:
8032	.e6fb		fe 9b 02	inc $029b,x	                inc intervalTimer-1,x
8033	.e6fe		d0 08		bne $e708	                bne intervalTimerDone
8034	.e700		ca		dex		                dex
8035	.e701		d0 f8		bne $e6fb	                bne incrementIntervalTimer
8036	.e703		a0 05		ldy #$05	                ldy #eventIntervalTimerCrossingZero
8037	.e705		20 28 ea	jsr $ea28	                jsr eventEntryPoint
8038	.e708						intervalTimerDone:
8039	.e708		ad b1 02	lda $02b1	                lda inkeyTimeoutCounter+0
8040	.e70b		d0 08		bne $e715	                bne LE715
8041	.e70d		ad b2 02	lda $02b2	                lda inkeyTimeoutCounter+1
8042	.e710		f0 06		beq $e718	                beq LE718
8043	.e712		ce b2 02	dec $02b2	                dec inkeyTimeoutCounter+1
8044	.e715						LE715:
8045	.e715		ce b1 02	dec $02b1	                dec inkeyTimeoutCounter+0
8046	.e718						LE718:
8047	.e718		2c cd 02	bit $02cd	                bit previousKeyPressedWhenReadingOSBYTE
8048	.e71b		10 0b		bpl $e728	                bpl LE728
8049	.e71d		ee cd 02	inc $02cd	                inc previousKeyPressedWhenReadingOSBYTE
8050	.e720		58		cli		                cli
8054	.e721		20 16 f4	jsr $f416	                jsr LF416                    ;update sound???
8056	.e724		78		sei		                sei
8057	.e725		ce cd 02	dec $02cd	                dec previousKeyPressedWhenReadingOSBYTE
8058	.e728						LE728:
8059	.e728		2c 4e e3	bit $e34e	                bit valueFF                  ;V=1
8061	.e72b		20 0f e6	jsr $e60f	                jsr irq1Handler
8063	.e72e		a5 ec		lda $ec		                lda lastKeyPressedInternal
8064	.e730		05 ed		ora $ed		                ora firstKeyPressedInternal
8065	.e732		2d 42 02	and $0242	                and keyboardSemaphore
8066	.e735		f0 04		beq $e73b	                beq +
8067	.e737		38		sec		                sec
8068	.e738		20 ff f8	jsr $f8ff	                jsr LF8FF
8069	.e73b						+
8073	.e73b		20 33 e9	jsr $e933	                jsr pollPrinterDriver
8074	.e73e		ac 43 02	ldy $0243	                ldy romPollingSemaphore
8078	.e741		f0 05		beq $e748	                beq LE748
8080	.e743		a2 15		ldx #$15	                ldx #romServiceCallPollingInterrupt
8084	.e745		20 72 ee	jsr $ee72	                jsr makeROMServiceCall
8085	.e748						LE748:
8087	.e748		2c 18 fe	bit $fe18	                bit HADC+0
8088	.e74b		70 05		bvs $e752	                bvs LE752
8090	.e74d		60		rts		                rts

8094	.e74e						checkForSystemVIACB1Interrupt:
8096	.e74e		89 10		bit #$10	                bit #VIA.irq.cb1
8097	.e750		f0 3c		beq $e78e	                beq checkForSystemVIACA2Interrupt

8099							                ; Handle CB1 interrupt - ADC conversion complete.
8100	.e752						LE752:
8101	.e752		ae 4c 02	ldx $024c	                ldx currentADCChannel
8102	.e755		f0 31		beq $e788	                beq acknowledgeSystemVIACB1Interrupt
8103	.e757		ad 1a fe	lda $fe1a	                lda HADC+2
8104	.e75a		9d b5 02	sta $02b5,x	                sta adcResultLSBs-1,x
8105	.e75d		ad 19 fe	lda $fe19	                lda HADC+1
8106	.e760		9d b9 02	sta $02b9,x	                sta adcResultMSBs-1,x
8107	.e763		8e be 02	stx $02be	                stx adcLastConvertedChannel
8108	.e766		a0 03		ldy #$03	                ldy #eventADCConversionComplete
8109	.e768		20 28 ea	jsr $ea28	                jsr eventEntryPoint
8110	.e76b		ca		dex		                dex                          ;next ADC channel
8111	.e76c		d0 03		bne $e771	                bne initiateADCConversion
8112	.e76e		ae 4d 02	ldx $024d	                ldx maximumADCChannel
8113	.e771						initiateADCConversion:
8114	.e771		e0 05		cpx #$05	                cpx #$05
8115	.e773		90 02		bcc $e777	                bcc +
8116	.e775		a2 04		ldx #$04	                ldx #$04                     ;clamp ADC channel
8117	.e777						+
8118	.e777		8e 4c 02	stx $024c	                stx currentADCChannel
8119	.e77a		ad 4e 02	lda $024e	                lda adcConversionType
8120	.e77d		3a		dec a		                dec a            ;$FF=default, $07=8 bits, $0b=12 bits
8121	.e77e		29 08		and #$08	                and #$08         ;8=12 bits, 0=8 bits
8122	.e780		18		clc		                clc
8123	.e781		6d 4c 02	adc $024c	                adc currentADCChannel        ;mix in ADC channel, 1-4
8124	.e784		3a		dec a		                dec a ;convert to hardware ADC channel, 0-3 (no risk of borrow)
8125	.e785		8d 18 fe	sta $fe18	                sta HADC+0                   ;initiate conversion
8126	.e788						acknowledgeSystemVIACB1Interrupt:
8127	.e788		a9 10		lda #$10	                lda #$10
8128	.e78a						staSystemVIAIFR:
8129	.e78a		8d 4d fe	sta $fe4d	                sta systemVIA.ifr
8130	.e78d		60		rts		                rts

8137	.e78e						checkForSystemVIACA2Interrupt:
8138	.e78e		4a		lsr a		                lsr a                        ;C = CA2
8139	.e78f		90 08		bcc $e799	                bcc handleUnrecognisedInterruptE799

8141							                ; Handle CA2 interrupt - keyboard.

8143	.e791		18		clc		                clc
8144	.e792		20 ff f8	jsr $f8ff	                jsr LF8FF
8145	.e795		a9 01		lda #$01	                lda #VIA.irq.ca2
8147	.e797		80 f1		bra $e78a	                bra staSystemVIAIFR

8155	.e799						handleUnrecognisedInterruptE799:
8156	.e799		4c 63 e6	jmp $e663	                jmp handleUnrecogisedInterrupt

8158							;-------------------------------------------------------------------------
8159							;
8160							; OSBYTE 17 (&11) Write next ADC channel to be sampled [MasRef D.2-25]
8161							;
8162	.e79c						osbyte11:
8165	.e79c		8c be 02	sty $02be	                sty adcLastConvertedChannel
8169	.e79f		80 d0		bra $e771	                bra initiateADCConversion

8172							;-------------------------------------------------------------------------
8173							;
8174							; Print a 0-terminated string at some offset from startupMessages.
8175							;
8176							; entry:
8177							;
8178							; Y = offset-1 of message
8179							;
8180	.e7a1						printStartupMessage:
8181	.e7a1		a9 e0		lda #$e0	                lda #>startupMessages
8182							                ; .cerror (<startupMessages)!=0,"startupMessages must be page-aligned" ;it's more flexible than this, but this'll do for now

8184							;-------------------------------------------------------------------------
8185							;
8186							; Print a 0-terminated string.
8187							;
8188							; entry:
8189							;
8190							; A = address MSB
8191							;
8192							; Y = (address LSB)-1
8193							;
8194	.e7a3						print0TerminatedString:
8195	.e7a3		85 fe		sta $fe		                sta errPtr+1
8196	.e7a5		64 fd		stz $fd		                stz errPtr+0

8198							;-------------------------------------------------------------------------
8199							;
8200							; Print the BRK message.
8201							;
8202							; entry:
8203							;
8204							; (errPtr) = pointer to the error number (as will be the case after a
8205							; BRK)
8206							;
8207							; Y=0
8208							;
8209	.e7a7						printBRKMessage:
8210	.e7a7		c8		iny		                iny
8211	.e7a8		b1 fd		lda ($fd),y	                lda (errPtr),y
8212	.e7aa		20 e3 ff	jsr $ffe3	                jsr OSASCI
8213	.e7ad		aa		tax		                tax
8214	.e7ae		d0 f7		bne $e7a7	                bne printBRKMessage
8215	.e7b0						rtsE7B0:
8216	.e7b0		60		rts		                rts

8218							;-------------------------------------------------------------------------

8462							;-------------------------------------------------------------------------

8464	.e7b1						osbyte81Timed:
8465	.e7b1		8e b1 02	stx $02b1	                stx inkeyTimeoutCounter+0
8466	.e7b4		8c b2 02	sty $02b2	                sty inkeyTimeoutCounter+1
8467	.e7b7		66 e6		ror $e6		                ror readCharacterTimedFlag   ;set the timed flag
8468	.e7b9		58		cli		                cli
8469	.e7ba		80 02		bra $e7be	                bra osrdchWithTimeout

8471							;-------------------------------------------------------------------------

8473	.e7bc						osrdchEntryPoint:
8474	.e7bc		64 e6		stz $e6		                stz readCharacterTimedFlag   ;clear the timed flag
8475	.e7be						osrdchWithTimeout:
8476	.e7be		da		phx		                phx
8477	.e7bf		5a		phy		                phy
8478	.e7c0		ac 56 02	ldy $0256	                ldy execFileHandle
8479	.e7c3		f0 12		beq $e7d7	                beq osrdchLoop               ;taken if not *EXEC'ing
8480	.e7c5		38		sec		                sec
8481	.e7c6		66 eb		ror $eb		                ror tapeCritical
8482	.e7c8		20 d7 ff	jsr $ffd7	                jsr OSBGET             ;get 1 byte from the *EXEC file
8483	.e7cb		64 eb		stz $eb		                stz tapeCritical
8484	.e7cd		90 24		bcc $e7f3	                bcc osrdchDone                    ;taken if byte valid
8485	.e7cf		a9 00		lda #$00	                lda #$00                     ;OSFIND close file
8486	.e7d1		9c 56 02	stz $0256	                stz execFileHandle           ;reset *EXEC handle
8487	.e7d4		20 ce ff	jsr $ffce	                jsr OSFIND                   ;close *EXEC file
8488	.e7d7						osrdchLoop:
8489	.e7d7		a5 ff		lda $ff		                lda escapeFlag               ;b7 set if ESCAPE pressed
8490	.e7d9		0a		asl a		                asl a                        ;C=1 if ESCAPE pressed
8491	.e7da		a9 1b		lda #$1b	                lda #27                      ;ASCII for ESCAPE
8492	.e7dc		b0 15		bcs $e7f3	                bcs osrdchDone               ;exit with C=1 if ESCAPE
8493							                                             ;pressed
8495	.e7de		ae 41 02	ldx $0241	                ldx inputSource
8497	.e7e1		20 fd ea	jsr $eafd	                jsr readFromEconetOrSoftKeyOrInputBufferA ;handle Econet/soft key stuff???
8498	.e7e4		90 0d		bcc $e7f3	                bcc osrdchDone
8499	.e7e6		24 e6		bit $e6		                bit readCharacterTimedFlag
8500	.e7e8		10 ed		bpl $e7d7	                bpl osrdchLoop     ;taken if no timeout - keep looping
8501	.e7ea		ad b2 02	lda $02b2	                lda inkeyTimeoutCounter+1
8502	.e7ed		0d b1 02	ora $02b1	                ora inkeyTimeoutCounter+0
8503	.e7f0		d0 e5		bne $e7d7	                bne osrdchLoop     ;taken if timeout not timed out yet
8504	.e7f2		3a		dec a		                dec a              ;timed out: A=$ff, C=1
8505	.e7f3						osrdchDone:
8506	.e7f3		7a		ply		                ply
8507	.e7f4		fa		plx		                plx
8508	.e7f5		60		rts		                rts

8510							;-------------------------------------------------------------------------

8512	.e7f6						starLIBFS:
8513	.e7f6		ad 01 df	lda $df01	                lda hazel.activeFS
8514	.e7f9		8d 02 df	sta $df02	                sta hazel.libFS
8515	.e7fc		60		rts		                rts

8517							;-------------------------------------------------------------------------

8520	.e7fd						starX:
8521	.e7fd		8d e8 fe	sta $fee8	                sta TUBE+8
8522	.e800						LE800:
8523	.e800		80 fe		bra $e800	                bra LE800

8526							;-------------------------------------------------------------------------
8527							;
8528							; OSCLI
8529							;
8530							; MasRef D.4-1
8531							;

8533	.e802						oscliEntryPoint: .block
8534	.e802		20 ba ed	jsr $edba	                jsr selectHAZEL
8535	.e805		86 f2		stx $f2		                stx stringInputBufferAddress+0
8536	.e807		84 f3		sty $f3		                sty stringInputBufferAddress+1
8537	.e809		a0 00		ldy #$00	                ldy #$00
8538	.e80b						-
8539	.e80b		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
8540	.e80d		99 00 dc	sta $dc00,y	                sta hazel.commandLine,y
8541	=$e811						emptyCommandLine=*+1                         ;arbitrary place that's
8542							                                             ;just a 13 byte...
8543	.e810		c9 0d		cmp #$0d	                cmp #$0D
8544	.e812		f0 04		beq $e818	                beq +     ;branch taken if end of command line reached
8545	.e814		c8		iny		                iny
8546	.e815		d0 f4		bne $e80b	                bne -

8548							                ; OSCLI is a no-op if the command line is too long.
8549	.e817		60		rts		                rts

8551	.e818						+
8552	.e818		a0 dc		ldy #$dc	                ldy #>hazel.commandLine
8553	.e81a		a2 00		ldx #$00	                ldx #<hazel.commandLine
8554	.e81c		20 84 f3	jsr $f384	                jsr withTerminalROM
8555	.e81f		4c ff 84	jmp $84ff	                jmp oscli
8556							                .endblock

8558	=$e811						emptyCommandLine=oscliEntryPoint.emptyCommandLine

8560							;-------------------------------------------------------------------------

8562							                ; OSWRCH
8563							                ; ======
8564	.e822						oswrchEntryPoint:
8565	.e822		48		pha		                pha                          ;S=[ch]
8566	.e823		da		phx		                phx                          ;S=[x; ch]
8567	.e824		5a		phy		                phy                          ;S=[y; x; ch]
8568	.e825		48		pha		                pha                          ;S=[ch; y; x; ch]
8569	.e826		2c 60 02	bit $0260	                bit econetOutputInterpretationStatus
8570	.e829		10 08		bpl $e833	                bpl LE833
8571	.e82b		a8		tay		                tay
8572	.e82c		a9 04		lda #$04	                lda #netWriteCharacterAttempted
8573	.e82e		20 04 eb	jsr $eb04	                jsr callNETV
8574	.e831		b0 72		bcs $e8a5	                bcs LE8A5
8575	.e833						LE833:
8576	.e833		a9 02		lda #$02	                lda #characterDestinationStatus.vdu_disable
8577	.e835		2c 7c 02	bit $027c	                bit characterDestinationStatus
8578	.e838		d0 28		bne $e862	                bne LE862                ; taken if VDU disabled
8583	.e83a		68		pla		                pla                          ;restore char to print
8584	.e83b		48		pha		                pha                          ;save it again
8585	.e83c		aa		tax		                tax                          ;X=char to print
8587	.e83d		ad 34 fe	lda $fe34	                lda ACCCON                   ;
8588	.e840		48		pha		                pha                          ;S=[old ACCCON; ch; y; x; ch]
8596	.e841		a9 08		lda #$08	                lda #ACCCON.Y
8597	.e843		1c 34 fe	trb $fe34	                trb ACCCON                   ;MOS ROM at $c000
8599	.e846		a5 f4		lda $f4		                lda $F4
8600	.e848		48		pha		                pha          ;S=[old ROMSEL; old ACCCON; ch; y; x; ch]
8601	.e849		a9 8f		lda #$8f	                lda #$80|terminalROM
8602	.e84b		85 f4		sta $f4		                sta $F4
8603	.e84d		8d 30 fe	sta $fe30	                sta ROMSEL                   ;page in ANDY+Terminal
8604	.e850		8a		txa		                txa                          ;A=char to print
8605	.e851		20 27 c0	jsr $c027	                jsr outputToVDU
8606	.e854		68		pla		                pla
8607	.e855		85 f4		sta $f4		                sta $F4
8608	.e857		8d 30 fe	sta $fe30	                sta ROMSEL
8609	.e85a		68		pla		                pla
8610							                ; Only the saved Y bit is valid. For example, a mode
8611							                ; change might have adjusted the shadow RAM setup.
8612	.e85b		29 08		and #$08	                and #ACCCON.Y
8613	.e85d		0c 34 fe	tsb $fe34	                tsb ACCCON

8626	.e860		b0 07		bcs $e869	                bcs LE869
8627	.e862						LE862:
8628	.e862		a9 08		lda #$08	                lda #characterDestinationStatus.printer_enable
8629	.e864		2c 7c 02	bit $027c	                bit characterDestinationStatus
8630	.e867		f0 05		beq $e86e	                beq LE86E                    ; taken if printer disabled
8631	.e869						LE869:
8632	.e869		68		pla		                pla
8633	.e86a		48		pha		                pha
8634	.e86b		20 aa e8	jsr $e8aa	                jsr LE8AA
8635	.e86e						LE86E:
8637	.e86e		ad 7c 02	lda $027c	                lda characterDestinationStatus
8638	.e871		6a		ror a		                ror a                      ; extract rs423_enable flag
8639	.e872		90 1b		bcc $e88f	                bcc LE88F                  ; taken if RS423 disabled
8640	.e874		a4 ea		ldy $ea		                ldy $EA
8641	.e876		88		dey		                dey
8642	.e877		10 16		bpl $e88f	                bpl LE88F
8643	.e879		68		pla		                pla
8644	.e87a		48		pha		                pha
8645	.e87b		08		php		                php
8646	.e87c		78		sei		                sei
8647	.e87d		a2 02		ldx #$02	                ldx #$02
8648	.e87f		48		pha		                pha
8649	.e880		20 ef e9	jsr $e9ef	                jsr osbyte98
8650	.e883		90 03		bcc $e888	                bcc LE888
8651	.e885		20 08 e9	jsr $e908	                jsr clearRS423BusyAndSetRS423Active
8652	.e888						LE888:
8653	.e888		68		pla		                pla
8654	.e889		a2 02		ldx #$02	                ldx #$02
8655	.e88b		20 a3 e9	jsr $e9a3	                jsr LE9A3
8656	.e88e		28		plp		                plp
8657	.e88f						LE88F:

8660	.e88f		a9 10		lda #$10	                lda #characterDestinationStatus.spool_disable
8661	.e891		2c 7c 02	bit $027c	                bit characterDestinationStatus
8662	.e894		d0 0f		bne $e8a5	                bne LE8A5
8663	.e896		ac 57 02	ldy $0257	                ldy spoolFileHandle
8664	.e899		f0 0a		beq $e8a5	                beq LE8A5
8665	.e89b		68		pla		                pla
8666	.e89c		48		pha		                pha
8667	.e89d		38		sec		                sec
8668	.e89e		66 eb		ror $eb		                ror tapeCritical
8669	.e8a0		20 d4 ff	jsr $ffd4	                jsr OSBPUT
8670	.e8a3		46 eb		lsr $eb		                lsr tapeCritical
8671	.e8a5						LE8A5:
8672	.e8a5		68		pla		                pla
8673	.e8a6		7a		ply		                ply
8674	.e8a7		fa		plx		                plx
8675	.e8a8		68		pla		                pla
8676	.e8a9		60		rts		                rts

8678	.e8aa						LE8AA:
8679	.e8aa		2c 7c 02	bit $027c	                bit characterDestinationStatus
8680	.e8ad		70 25		bvs $e8d4	                bvs LE8D4
8681	.e8af		cd 86 02	cmp $0286	                cmp printerIgnoreChar
8682	.e8b2		d0 05		bne $e8b9	                bne LE8B9
8683	.e8b4		2c 46 02	bit $0246	                bit noignoreState
8684	.e8b7		10 1b		bpl $e8d4	                bpl LE8D4
8685	.e8b9						LE8B9:
8686	.e8b9		08		php		                php
8687	.e8ba		78		sei		                sei
8688	.e8bb		aa		tax		                tax
8689	.e8bc		a9 04		lda #$04	                lda #characterDestinationStatus.printer_disable
8690	.e8be		2c 7c 02	bit $027c	                bit characterDestinationStatus
8691	.e8c1		d0 10		bne $e8d3	                bne LE8D3
8692	.e8c3		8a		txa		                txa
8693	.e8c4		a2 03		ldx #$03	                ldx #$03
8694	.e8c6		20 a3 e9	jsr $e9a3	                jsr LE9A3
8695	.e8c9		b0 08		bcs $e8d3	                bcs LE8D3
8696	.e8cb		2c d1 02	bit $02d1	                bit bufferEmptyFlags+bufferPrinter
8697	.e8ce		10 03		bpl $e8d3	                bpl LE8D3
8698	.e8d0		20 d5 e8	jsr $e8d5	                jsr LE8D5
8699	.e8d3						LE8D3:
8700	.e8d3		28		plp		                plp
8701	.e8d4						LE8D4:
8702	.e8d4		60		rts		                rts

8704	.e8d5						LE8D5:                                       ;E7CA in MOS 4.00
8705	.e8d5		ad 85 02	lda $0285	                lda printerDriverType
8707	.e8d8		f0 7f		beq $e959	                beq LE959
8708	.e8da		3a		dec a		                dec a
8709	.e8db		d0 20		bne $e8fd	                bne LE8FD
8710	.e8dd		20 f4 e9	jsr $e9f4	                jsr osbyte91
8711	.e8e0		6e d1 02	ror $02d1	                ror bufferEmptyFlags+bufferPrinter
8712	.e8e3		30 43		bmi $e928	                bmi rtsE928
8713	.e8e5		a0 82		ldy #$82	                ldy #$82
8714	.e8e7		8c 6e fe	sty $fe6e	                sty userVIA.ier
8715	.e8ea		8d 61 fe	sta $fe61	                sta userVIA.ora
8716	.e8ed		ad 6c fe	lda $fe6c	                lda userVIA.pcr
8717	.e8f0		29 f1		and #$f1	                and #$F1
8718	.e8f2		09 0c		ora #$0c	                ora #$0C
8719	.e8f4		8d 6c fe	sta $fe6c	                sta userVIA.pcr
8720	.e8f7		09 0e		ora #$0e	                ora #$0E
8721	.e8f9		8d 6c fe	sta $fe6c	                sta userVIA.pcr
8722	.e8fc		60		rts		                rts

8724	.e8fd						LE8FD:
8725	.e8fd		3a		dec a		                dec a
8726	.e8fe		d0 29		bne $e929	                bne activatePrinterDriver
8727	.e900		a4 ea		ldy $ea		                ldy $EA
8728	.e902		88		dey		                dey
8729	.e903		10 54		bpl $e959	                bpl LE959
8730	.e905		4e d1 02	lsr $02d1	                lsr bufferEmptyFlags+bufferPrinter
8731	.e908						clearRS423BusyAndSetRS423Active:
8732	.e908		4e 4f 02	lsr $024f	                lsr rs423Busy
8733	.e90b						setRS423Active:
8734	.e90b		20 27 ed	jsr $ed27	                jsr getRS423InputBufferFreeBytes
8735	.e90e		90 18		bcc $e928	                bcc rtsE928
8736	.e910		a2 20		ldx #$20	                ldx #ACIA.control.rtsLowTXInterruptEnabled
8737	.e912						resetACIAState:
8738	.e912		a0 9f		ldy #$9f	                ldy #ACIA.control.rtsRTSInterruptEnabled|ACIA.control.word8DataOddParity1Stop|ACIA.control.reset

8740							;-------------------------------------------------------------------------
8741							;
8742							; OSBYTE 156 (&9C) Read/write serial ACIA control [MasRef D.2-47]
8743							;
8744	.e914						osbyte9C:
8745	.e914		08		php		                php
8746	.e915		78		sei		                sei
8747	.e916		98		tya		                tya
8748	.e917		86 fa		stx $fa		                stx SEIWKA
8749	.e919		2d 50 02	and $0250	                and aciaControlRegister
8750	.e91c		45 fa		eor $fa		                eor SEIWKA
8751	.e91e		ae 50 02	ldx $0250	                ldx aciaControlRegister
8752	.e921						writeACIAControlRegisterAndCopy:
8753	.e921		8d 50 02	sta $0250	                sta aciaControlRegister
8754	.e924		8d 08 fe	sta $fe08	                sta ACIA.control
8755	.e927		28		plp		                plp
8756	.e928						rtsE928:
8757	.e928		60		rts		                rts

8770							;-------------------------------------------------------------------------

8772	.e929						activatePrinterDriver:
8773	.e929		18		clc		                clc
8774	.e92a		a9 01		lda #$01	                lda #printerDriverActivate
8775	.e92c		20 3a e9	jsr $e93a	                jsr callPrinterDriverWithPrinterBuffer

8777							                ; printer driver will set C=0 if active, C=1 if
8778							                ; inactive.

8780							;-------------------------------------------------------------------------
8781							;
8782							; OSBYTE 123 (&7B) Inform MOS of printer driver going dormant [MasRef
8783							; D.2-36]
8784							;
8785	.e92f						osbyte7B:
8786	.e92f		6e d1 02	ror $02d1	                ror bufferEmptyFlags+bufferPrinter   ;C=1 on entry, so set bit 7
8787	.e932						rtsE932:
8788	.e932		60		rts		                rts

8790							;-------------------------------------------------------------------------

8792	.e933						pollPrinterDriver:
8793	.e933		2c d1 02	bit $02d1	                bit bufferEmptyFlags+bufferPrinter
8794	.e936		30 fa		bmi $e932	                bmi rtsE932           ;taken if printer driver dormant
8795	.e938		a9 00		lda #$00	                lda #printerDriverPoll
8796	.e93a						callPrinterDriverWithPrinterBuffer:
8797	.e93a		a2 03		ldx #$03	                ldx #bufferPrinter
8798	.e93c						callPrinterDriver:
8799	.e93c		ac 85 02	ldy $0285	                ldy printerDriverType
8800	.e93f		20 04 eb	jsr $eb04	                jsr callNETV
8801	.e942		6c 22 02	jmp ($0222)	                jmp (UPTV)

8803							;-------------------------------------------------------------------------
8804							;
8805							; OSBYTE 15 (&0F) Flush buffer
8806							;
8807	.e945						osbyte0F:
8808	.e945		d0 0f		bne $e956	                bne LE956
8809	.e947						LE947:
8810	.e947		a2 08		ldx #$08	                ldx #$08
8811	.e949						LE949:
8812	.e949		58		cli		                cli
8813	.e94a		78		sei		                sei
8814	.e94b		20 51 e9	jsr $e951	                jsr osbyte15
8815	.e94e		ca		dex		                dex
8816	.e94f		10 f8		bpl $e949	                bpl LE949

8818							;-------------------------------------------------------------------------
8819							;
8820							; OSBYTE 21 (&15) Flush selected buffer
8821							;
8822	.e951						osbyte15:                                    ;e951
8823	.e951		e0 09		cpx #$09	                cpx #bufferMax+1
8824	.e953		90 04		bcc $e959	                bcc LE959
8825	.e955		60		rts		                rts

8827	.e956						LE956:
8828	.e956		ae 41 02	ldx $0241	                ldx inputSource
8829	.e959						LE959:
8830	.e959		18		clc		                clc
8831	.e95a						LE95A:
8832	.e95a		48		pha		                pha
8833	.e95b		08		php		                php
8834	.e95c		78		sei		                sei
8835	.e95d		b0 08		bcs $e967	                bcs LE967
8836	.e95f		8a		txa		                txa
8837	.e960		29 04		and #$04	                and #$04                     ;buffer 4-7?
8838	.e962		f0 03		beq $e967	                beq LE967                    ;taken if not sound buffer
8839	.e964		20 5d f5	jsr $f55d	                jsr clearSoundChannelBuffer
8840	.e967						LE967:
8841	.e967		38		sec		                sec
8842	.e968		7e ce 02	ror $02ce,x	                ror bufferEmptyFlags,x
8843	.e96b		e0 02		cpx #$02	                cpx #bufferFirstOutput
8844	.e96d		b0 06		bcs $e975	                bcs LE975                    ;taken if output buffer
8845	.e96f		9c 68 02	stz $0268	                stz softKeyStringLength
8846	.e972		9c 6a 02	stz $026a	                stz vduQueueNegativeLength
8847	.e975						LE975:
8848	.e975		20 21 ed	jsr $ed21	                jsr purgeBufferViaCNPV
8849	.e978		28		plp		                plp
8850	.e979		68		pla		                pla
8851	.e97a		60		rts		                rts

8853							;-------------------------------------------------------------------------
8854							;
8855							; Count/purge entry point [AUG p264]
8856							;
8857	.e97b						cnpEntryPoint:
8858	.e97b		50 07		bvc $e984	                bvc countBuffer
8859	.e97d						purgeBuffer:
8860	.e97d		bd d7 02	lda $02d7,x	                lda bufferStartIndices,x
8861	.e980		9d e0 02	sta $02e0,x	                sta bufferEndIndices,x
8862	.e983		60		rts		                rts

8864	.e984						countBuffer:
8865	.e984		08		php		                php
8866	.e985		78		sei		                sei
8867	.e986		08		php		                php
8868	.e987		38		sec		                sec
8869	.e988		bd e0 02	lda $02e0,x	                lda bufferEndIndices,x
8870	.e98b		fd d7 02	sbc $02d7,x	                sbc bufferStartIndices,x
8871	.e98e		b0 04		bcs $e994	                bcs LE994
8872	.e990		38		sec		                sec
8873	.e991		fd db e9	sbc $e9db,x	                sbc bufferIndex0Offsets,x
8874	.e994						LE994:
8875	.e994		28		plp		                plp
8876	.e995		90 06		bcc $e99d	                bcc LE99D
8877	.e997		18		clc		                clc
8878	.e998		7d db e9	adc $e9db,x	                adc bufferIndex0Offsets,x
8879	.e99b		49 ff		eor #$ff	                eor #$FF
8880	.e99d						LE99D:
8881	.e99d		a0 00		ldy #$00	                ldy #$00
8882	.e99f		aa		tax		                tax
8883	.e9a0		28		plp		                plp
8884	.e9a1						rtsE9A1:
8885	.e9a1		60		rts		                rts

8887							;-------------------------------------------------------------------------

8889	.e9a2						LE9A2:
8890	.e9a2		58		cli		                cli
8891	.e9a3						LE9A3:
8892	.e9a3		78		sei		                sei
8893	.e9a4						LE9A4:
8894	.e9a4		20 40 ea	jsr $ea40	                jsr callINSV
8895	.e9a7		90 f8		bcc $e9a1	                bcc rtsE9A1
8896	.e9a9		20 41 f2	jsr $f241	                jsr LF241
8897	.e9ac		48		pha		                pha
8898	.e9ad		20 35 f7	jsr $f735	                jsr updateKeyboardLEDs
8899	.e9b0		0a		asl a		                asl a
8900	.e9b1		68		pla		                pla
8901	.e9b2		90 ee		bcc $e9a2	                bcc LE9A2
8902	.e9b4		60		rts		                rts

8904							;-------------------------------------------------------------------------
8905							;
8906							; OSBYTE $77
8907							;
8908							; D.2-33
8909							;
8911	.e9b5						selectTerminalROMAndOSBYTE77:
8912	.e9b5		20 84 f3	jsr $f384	                jsr withTerminalROM
8913	.e9b8		4c 23 94	jmp $9423	                jmp osbyte77

8916							;-------------------------------------------------------------------------
8917							;
8918							; Get *IGNORE CMOS byte offset and mask for a given ROM.
8919							;
8920							; entry:
8921							;
8922							; Y = ROM number
8923							;
8924							; exit:
8925							;
8926							; A = mask
8927							;
8928							; X = RTC address of byte
8929							;
8930	.e9bb						getROMInsertedFlagRTCAddressAndMask:
8931	.e9bb		a9 00		lda #$00	                lda #$00
8932	.e9bd		38		sec		                sec
8933	.e9be		a2 14		ldx #$14	                ldx #CMOSBytes.insertedROMs+0+cmosBytesOffset
8934	.e9c0						-
8935	.e9c0		2a		rol a		                rol a
8936	.e9c1		d0 02		bne $e9c5	                bne +
8937	.e9c3		e8		inx		                inx
8938	.e9c4		2a		rol a		                rol a
8939	.e9c5						+
8940	.e9c5		88		dey		                dey
8941	.e9c6		10 f8		bpl $e9c0	                bpl -
8942	.e9c8		60		rts		                rts

8944							;-------------------------------------------------------------------------

8946	=[]						_:=[]
8947	=[($03e0,32)]					_..=[(bufferKeyboardAddress,bufferKeyboardSize)]
8948	=[($03e0,32),($0a00,256)]			_..=[(bufferRS423InputAddress,bufferRS423InputSize)]
8949	=[($03e0,32),($0a00,256),($0900,192)]		_..=[(bufferRS423OutputAddress,bufferRS423OutputSize)]
8950	=[($03e0,32),($0a00,256),($0900,192),($0880,64)]
							_..=[(bufferPrinterAddress,bufferPrinterSize)]
8951	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16)]
							_..=[(bufferSoundChannel0Address,bufferSoundChannel0Size)]
8952	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16)]
							_..=[(bufferSoundChannel1Address,bufferSoundChannel1Size)]
8953	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16)]
							_..=[(bufferSoundChannel2Address,bufferSoundChannel2Size)]
8954	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16),($0870,16)]
							_..=[(bufferSoundChannel3Address,bufferSoundChannel3Size)]
8955	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16),($0870,16),($09c0,64)]
							_..=[(buffer8Address,buffer8Size)]
8956	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16),($0870,16),($09c0,64)]
							buffers=_

8958							BufferTableIndex0Offset: .function buffer
8959							                .endfunction 256-buffer[1]

8961							BufferTableBase: .function buffer
8962							                .endfunction buffer[0]-BufferTableIndex0Offset(buffer)

8964							;-------------------------------------------------------------------------
8965							;
8966							; Buffer base addresses - each buffer's address, offset by the offset
8967							; for index 0 (see bufferIndex0Offsets).
8968							;
8969	.e9c9						bufferBaseAddressMSBs:
8970							                .for _i=0,_i<len(buffers),_i+=1
8971	>e9c9		03				                .byte >BufferTableBase(buffers[_i])
8971	>e9ca		0a				                .byte >BufferTableBase(buffers[_i])
8971	>e9cb		08				                .byte >BufferTableBase(buffers[_i])
8971	>e9cc		07				                .byte >BufferTableBase(buffers[_i])
8971	>e9cd		07				                .byte >BufferTableBase(buffers[_i])
8971	>e9ce		07				                .byte >BufferTableBase(buffers[_i])
8971	>e9cf		07				                .byte >BufferTableBase(buffers[_i])
8971	>e9d0		07				                .byte >BufferTableBase(buffers[_i])
8971	>e9d1		09				                .byte >BufferTableBase(buffers[_i])
8972							                .endfor

8974	.e9d2						bufferBaseAddressLSBs:
8975							                .for _i=0,_i<len(buffers),_i+=1
8976	>e9d2		00				                .byte <BufferTableBase(buffers[_i])
8976	>e9d3		00				                .byte <BufferTableBase(buffers[_i])
8976	>e9d4		c0				                .byte <BufferTableBase(buffers[_i])
8976	>e9d5		c0				                .byte <BufferTableBase(buffers[_i])
8976	>e9d6		50				                .byte <BufferTableBase(buffers[_i])
8976	>e9d7		60				                .byte <BufferTableBase(buffers[_i])
8976	>e9d8		70				                .byte <BufferTableBase(buffers[_i])
8976	>e9d9		80				                .byte <BufferTableBase(buffers[_i])
8976	>e9da		00				                .byte <BufferTableBase(buffers[_i])
8977							                .endfor

8979							;-------------------------------------------------------------------------

8981							; Offset of buffer index 0 for each buffer. Index 0 is (-buffer size)
8982							; - buffer indexes count up, and wrap once they reach 0.

8984	.e9db						bufferIndex0Offsets:
8985							                .for _i=0,_i<len(buffers),_i+=1
8986	>e9db		e0				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9dc		00				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9dd		40				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9de		c0				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9df		f0				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9e0		f0				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9e1		f0				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9e2		f0				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9e3		c0				                .byte BufferTableIndex0Offset(buffers[_i])
8987							                .endfor

8989							;-------------------------------------------------------------------------
8990							;
8991							; Get base address for a buffer.
8992							;
8993							; entry:
8994							;
8995							; X = buffer number
8996							;
8997							; exit:
8998							;
8999							; (SEIWKA) = buffer base address
9000							;
9001	.e9e4						getBufferBaseAddress:
9002	.e9e4		bd d2 e9	lda $e9d2,x	                lda bufferBaseAddressLSBs,x
9003	.e9e7		85 fa		sta $fa		                sta SEIWKA
9004	.e9e9		bd c9 e9	lda $e9c9,x	                lda bufferBaseAddressMSBs,x
9005	.e9ec		85 fb		sta $fb		                sta SEIWKB
9006	.e9ee		60		rts		                rts

9008							;-------------------------------------------------------------------------
9009							;
9010							; OSBYTE 152 (&98) Examine buffer status [MasRef D.2-45]
9011							;
9012	.e9ef						osbyte98:
9013	.e9ef		2c 4e e3	bit $e34e	                bit valueFF                  ;V=1
9014	.e9f2		80 01		bra $e9f5	                bra callREMV

9016							;-------------------------------------------------------------------------
9017							;
9018							; OSBYTE 145 (&91) Get character from buffer [MasRef D.2-45]
9019							;
9020							; X = buffer number
9021	.e9f4						osbyte91:
9022	.e9f4		b8		clv		                clv                          ;remove
9023	.e9f5						callREMV:
9024	.e9f5		6c 2c 02	jmp ($022c)	                jmp (REMV)

9026							;-------------------------------------------------------------------------
9027							;
9028							; Buffer remove entry point. [AUG p263]
9029							;
9030							; Even in remove mode, A is the character removed on exit. Some of the
9031							; other MOS routines rely on this.
9032							;
9033	.e9f8						remEntryPoint:
9034	.e9f8		08		php		                php
9035	.e9f9		78		sei		                sei
9036	.e9fa		bd d7 02	lda $02d7,x	                lda bufferStartIndices,x
9037	.e9fd		dd e0 02	cmp $02e0,x	                cmp bufferEndIndices,x
9038	.ea00		f0 6c		beq $ea6e	                beq plp_sec_rts  ;taken if buffer empty
9039	.ea02		a8		tay		                tay                          ;Y=start index
9040	.ea03		20 e4 e9	jsr $e9e4	                jsr getBufferBaseAddress
9041	.ea06		b1 fa		lda ($fa),y	                lda (SEIWKA),y               ;get byte from buffer
9042	.ea08		70 1a		bvs $ea24	                bvs tay_plp_clc_rts                  ;taken if only looking
9043	.ea0a		48		pha		                pha                          ;save buffered byte
9044	.ea0b		c8		iny		                iny                          ;next char in buffer
9045	.ea0c		98		tya		                tya                          ;set Z if wrap
9046	.ea0d		d0 03		bne $ea12	                bne +                        ;branch taken if no wrap
9047	.ea0f		bd db e9	lda $e9db,x	                lda bufferIndex0Offsets,x    ;reset index on wrap
9048	.ea12						+
9049	.ea12		9d d7 02	sta $02d7,x	                sta bufferStartIndices,x

9051							                ; Issue output buffer empty event when appropriate.
9052	.ea15		e0 02		cpx #$02	                cpx #bufferFirstOutput
9053	.ea17		90 0a		bcc $ea23	                bcc pla_tay_plp_clc_rts ;taken if keyboard or RS423
9054							                                        ;input - i.e., buffer is input
9055	.ea19		dd e0 02	cmp $02e0,x	                cmp bufferEndIndices,x       ;buffer now empty?
9056	.ea1c		d0 05		bne $ea23	                bne pla_tay_plp_clc_rts           ;taken if not empty
9057	.ea1e		a0 00		ldy #$00	                ldy #eventOutputBufferEmpty
9058	.ea20		20 28 ea	jsr $ea28	                jsr eventEntryPoint
9059	.ea23						pla_tay_plp_clc_rts:
9060	.ea23		68		pla		                pla                          ;restore buffered byte
9061	.ea24						tay_plp_clc_rts:
9062	.ea24		a8		tay		                tay                          ;Y=buffered byte
9063	.ea25						plp_clc_rts:
9064	.ea25		28		plp		                plp
9065	.ea26		18		clc		                clc
9066	.ea27		60		rts		                rts

9068							;-------------------------------------------------------------------------
9069							;
9070							; [MasRef D.9-1]
9071							;
9072	.ea28						eventEntryPoint:
9073	.ea28		08		php		                php
9074	.ea29		78		sei		                sei
9075	.ea2a		48		pha		                pha
9076	.ea2b		b9 bf 02	lda $02bf,y	                lda eventEnabledFlags,y      ;is the event enabled?
9077	.ea2e		f0 3d		beq $ea6d	                beq pla_plp_sec_rts                    ;
9078	.ea30		98		tya		                tya
9079	.ea31		7a		ply		                ply
9080	.ea32		5a		phy		                phy
9081	.ea33		20 bf f8	jsr $f8bf	                jsr LF8BF
9082	.ea36		80 eb		bra $ea23	                bra pla_tay_plp_clc_rts

9084							;-------------------------------------------------------------------------
9085							;
9086							; Insert character into buffer and issue an event for it.
9087							;
9088							; entry:
9089							;
9090							; Y = buffer number
9091							;
9092	.ea38						insertCharacterIntoBuffer:
9093	.ea38		98		tya		                tya
9094	.ea39		a0 02		ldy #$02	                ldy #eventCharacterEnteringBuffer
9095	.ea3b		20 28 ea	jsr $ea28	                jsr eventEntryPoint
9096	.ea3e		a8		tay		                tay

9098							;-------------------------------------------------------------------------
9099							;
9100							; OSBYTE 138 (&8A) Insert character code into buffer [MasRef D.2-43]
9101							;
9102	.ea3f						osbyte8A:
9103	.ea3f		98		tya		                tya
9104	.ea40						callINSV:
9105	.ea40		6c 2a 02	jmp ($022a)	                jmp (INSV)

9107							;-------------------------------------------------------------------------
9108							;
9109							; Default INSV entry point [AUG p263]
9110							;
9111	.ea43						insEntryPoint:
9112	.ea43		08		php		                php
9113	.ea44		78		sei		                sei
9114	.ea45		48		pha		                pha                          ;save value to insert
9115	.ea46		bd e0 02	lda $02e0,x	                lda bufferEndIndices,x       ;get buffer index
9116	.ea49		1a		inc a		                inc a                        ;bump index
9117	.ea4a		d0 03		bne $ea4f	                bne +          ;taken if index hasn't wrapped around
9118	.ea4c		bd db e9	lda $e9db,x	                lda bufferIndex0Offsets,x        ;reset index due to wrap
9119	.ea4f						+
9120	.ea4f		dd d7 02	cmp $02d7,x	                cmp bufferStartIndices,x     ;are we at the start index?
9121	.ea52		f0 0e		beq $ea62	                beq bufferFull       ;taken if yes - i.e., buffer full
9122	.ea54		bc e0 02	ldy $02e0,x	                ldy bufferEndIndices,x       ;note old buffer end
9123	.ea57		9d e0 02	sta $02e0,x	                sta bufferEndIndices,x       ;update buffer end
9124	.ea5a		20 e4 e9	jsr $e9e4	                jsr getBufferBaseAddress
9125	.ea5d		68		pla		                pla                          ;restore value to insert
9126	.ea5e		91 fa		sta ($fa),y	                sta (SEIWKA),y               ;store byte in buffer
9127	.ea60		80 c3		bra $ea25	                bra plp_clc_rts              ;done

9129	.ea62						bufferFull
9130							                ; Issue input buffer full event when appropriate.
9131	.ea62		68		pla		                pla
9132	.ea63		e0 02		cpx #$02	                cpx #bufferFirstOutput
9133	.ea65		b0 07		bcs $ea6e	                bcs plp_sec_rts  ;taken if output buffer
9134	.ea67		a0 01		ldy #$01	                ldy #eventInputBufferFull
9135	.ea69		20 28 ea	jsr $ea28	                jsr eventEntryPoint
9136	.ea6c		48		pha		                pha
9137	.ea6d						pla_plp_sec_rts:
9138	.ea6d		68		pla		                pla
9139	.ea6e						plp_sec_rts:
9140	.ea6e		28		plp		                plp
9141	.ea6f		38		sec		                sec
9142	.ea70		60		rts		                rts

9144							;-------------------------------------------------------------------------
9145							;
9146							; Check if character is a letter - A-Z or a-z.
9147							;
9148							; Entry:
9149							;
9150							; A = character to test
9151							;
9152							; Exit:
9153							;
9154							; C=0 if character is letter, C=1 otherwise
9155							;
9156							; Preserves: A/X/Y
9157	.ea71						isLetter: .proc                 ;EA71
9158	.ea71		48		pha		                pha
9159	.ea72		29 df		and #$df	                and #$DF        ;convert to upper case
9160	.ea74		c9 5b		cmp #$5b	                cmp #'Z'+1
9161	.ea76		b0 04		bcs $ea7c	                bcs +           ;branch taken with C=1 if past Z
9162	.ea78		49 ff		eor #$ff	                eor #$FF
9163	.ea7a		c9 bf		cmp #$bf	                cmp #-'A'       ;C=1 if past A
9164	.ea7c						+
9165	.ea7c		68		pla		                pla
9166	.ea7d		60		rts		                rts
9167							                .pend

9169							;-------------------------------------------------------------------------
9170							;
9171							; OSBYTE 153 (&99) Insert character code into buffer, checking for
9172							; ESCAPE [MasRef D.2-46]
9173							;
9178	.ea7e						insertCharacterIntoKeyboardBuffer:
9179	.ea7e		a2 00		ldx #$00	                ldx #$00
9180	.ea80						osbyte99:
9182	.ea80		8a		txa		                txa                          ;X=1 if RS423, 0 if keyboard
9183	.ea81		2d 45 02	and $0245	                and rs423InputInterpretationStatus ;A=0 if RS423 simulates keyboard, 1=default
9184	.ea84		d0 b9		bne $ea3f	                bne osbyte8A ;taken if default - don't treat RS423 as keyboard
9186	.ea86		98		tya		                tya          ;A=char
9187	.ea87		4d 6c 02	eor $026c	                eor escapeCharacter
9188	.ea8a		0d 75 02	ora $0275	                ora escapeKeyStatus
9189	.ea8d		d0 a9		bne $ea38	                bne insertCharacterIntoBuffer
9190	.ea8f		ad 58 02	lda $0258	                lda breakAndESCAPEEffect
9191	.ea92		6a		ror a		                ror a                        ;C=0 if normal ESCAPE action
9192	.ea93		98		tya		                tya                          ;A=char
9193	.ea94		b0 0a		bcs $eaa0	                bcs osbyte99Done             ;taken if ESCAPE inhibited
9194	.ea96		a0 06		ldy #$06	                ldy #eventESCAPEPressed
9195	.ea98		20 28 ea	jsr $ea28	                jsr eventEntryPoint
9196	.ea9b		90 03		bcc $eaa0	                bcc osbyte99Done             ;taken if event handled
9197	.ea9d		20 57 ec	jsr $ec57	                jsr osbyte7D
9198	.eaa0						osbyte99Done:
9199	.eaa0		18		clc		                clc
9200	.eaa1		60		rts		                rts

9202							;-------------------------------------------------------------------------

9204							; A = 0 (edit keys)/1 (ascii keys)/2 (F keys)
9205	.eaa2						handleCursorKeysAndCopy:
9207	.eaa2		6a		ror a		                ror a                        ;test edit keys mode bit 0
9208	.eaa3		68		pla		                pla                          ;restore translated value
9209	.eaa4		b0 17		bcs $eabd	                bcs clc_rts_EABD       ;taken if value was asciiKeys

9216	.eaa6						handleFunctionKey:
9217	.eaa6		98		tya		                tya
9219	.eaa7		29 0f		and #$0f	                and #$0F
9225	.eaa9		48		pha		                pha
9226	.eaaa		98		tya		                tya
9227	.eaab		4a		lsr a		                lsr a
9228	.eaac		4a		lsr a		                lsr a
9229	.eaad		4a		lsr a		                lsr a
9230	.eaae		4a		lsr a		                lsr a
9232	.eaaf		49 04		eor #$04	                eor #$04
9233	.eab1		a8		tay		                tay
9234	.eab2		b9 65 02	lda $0265,y	                lda input192To207Interpretation-8,y
9235	.eab5		4a		lsr a		                lsr a
9237	.eab6		f0 7a		beq $eb32	                beq LEB32
9238	.eab8		68		pla		                pla
9239	.eab9		18		clc		                clc
9240	.eaba		79 65 02	adc $0265,y	                adc input192To207Interpretation-8,y

9263	.eabd						clc_rts_EABD:
9264	.eabd		18		clc		                clc
9265	.eabe		60		rts		                rts

9267							;-------------------------------------------------------------------------

9269	.eabf						copyCharNotRecognised:
9270	.eabf		20 b6 ef	jsr $efb6	                jsr vdu7EntryPoint           ;beep
9271	.eac2		fa		plx		                plx
9272	.eac3						readFromInputBufferX:
9273	.eac3		20 f4 e9	jsr $e9f4	                jsr osbyte91          ;extract character from buffer X
9275	.eac6		b0 60		bcs $eb28	                bcs rtsEB28           ;taken if buffer empty

9313	.eac8						LEAC8:
9314	.eac8		48		pha		                pha                   ;save character extracted
9315	.eac9		e0 01		cpx #$01	                cpx #bufferRS423Input ;was it RS423 input buffer?
9316	.eacb		d0 06		bne $ead3	                bne LEAD3             ;taken if not RS423 input buffer
9317	.eacd		20 0b e9	jsr $e90b	                jsr setRS423Active
9318	.ead0		38		sec		                sec
9319	.ead1		a2 01		ldx #$01	                ldx #bufferRS423Input

9321	.ead3						LEAD3:
9322	.ead3		68		pla		                pla                          ;restore char extracted
9323	.ead4		90 05		bcc $eadb	                bcc LEADB                    ;taken if keyboard buffer
9324	.ead6		ac 45 02	ldy $0245	                ldy rs423InputInterpretationStatus ;D.2-54
9325	.ead9		d0 4c		bne $eb27	                bne clc_rts_EB27             ;taken if default mode

9328	.eadb						LEADB:
9329	.eadb		a8		tay		                tay                          ;Y = char
9330	.eadc		10 49		bpl $eb27	                bpl clc_rts_EB27             ;if normal char, all good
9331	.eade		29 0f		and #$0f	                and #$0F
9332	.eae0		c9 0b		cmp #$0b	                cmp #$0B
9333	.eae2		90 c2		bcc $eaa6	                bcc handleFunctionKey        ;taken if F key
9334	.eae4		69 7b		adc #$7b	                adc #$7B    ;C=1, so +$7c - convert $0b-0$f to $87-$8B
9335	.eae6		48		pha		                pha         ;save translated value
9336	.eae7		ad 7d 02	lda $027d	                lda editKeysMode
9337	.eaea		d0 b6		bne $eaa2	                bne handleCursorKeysAndCopy  ;taken if not editKeys
9338	.eaec		ad 7c 02	lda $027c	                lda characterDestinationStatus
9339	.eaef		6a		ror a		                ror a                        ;C=rs423_enable
9340	.eaf0		6a		ror a		                ror a                        ;C=vdu_disable
9341	.eaf1		68		pla		                pla                          ;restore translated value
9342	.eaf2		b0 cf		bcs $eac3	                bcs readFromInputBufferX     ;taken if VDU output disabled
9343	.eaf4		c9 87		cmp #$87	                cmp #$87                     ;COPY?
9344	.eaf6		f0 31		beq $eb29	                beq readCopyChar
9345	.eaf8		da		phx		                phx                          ;save buffer number
9346	.eaf9		20 5d eb	jsr $eb5d	                jsr handleCursorKeyThunk     ;handle cursor key
9347	.eafc		fa		plx		                plx
9348	.eafd						readFromEconetOrSoftKeyOrInputBufferA:
9352	.eafd		2c 5f 02	bit $025f	                bit econetInputInterpretationStatus
9353	.eb00		10 05		bpl $eb07	                bpl readFromSoftKeyOrInputBufferA
9354	.eb02		a9 06		lda #$06	                lda #netReadCharacterAttempted
9355	.eb04						callNETV:
9356	.eb04		6c 24 02	jmp ($0224)	                jmp (NETV)

9358	.eb07						readFromSoftKeyOrInputBufferA:
9359	.eb07		ad 68 02	lda $0268	                lda softKeyStringLength
9360	.eb0a		f0 b7		beq $eac3	                beq readFromInputBufferX
9370	.eb0c		8a		txa		                txa
9371	.eb0d		2d 45 02	and $0245	                and rs423InputInterpretationStatus
9372	.eb10		d0 b1		bne $eac3	                bne readFromInputBufferX
9374	.eb12		a5 f4		lda $f4		                lda $F4
9375	.eb14		48		pha		                pha
9376	.eb15		20 98 e5	jsr $e598	                jsr selectTerminalROMAndANDY2
9377	.eb18		b2 f8		lda ($f8)	                lda (softKeyExpansionPtr)
9378	.eb1a		fa		plx		                plx
9379	.eb1b		20 81 e5	jsr $e581	                jsr selectROMX
9380	.eb1e		ce 68 02	dec $0268	                dec softKeyStringLength
9381	.eb21		e6 f8		inc $f8		                inc softKeyExpansionPtr+0
9382	.eb23		d0 02		bne $eb27	                bne clc_rts_EB27
9383	.eb25		e6 f9		inc $f9		                inc softKeyExpansionPtr+1
9384	.eb27						clc_rts_EB27:
9385	.eb27		18		clc		                clc
9386	.eb28						rtsEB28:
9387	.eb28		60		rts		                rts

9389	.eb29						readCopyChar:
9390	.eb29		da		phx		                phx
9391	.eb2a		20 63 eb	jsr $eb63	                jsr handleCopyKeyThunk
9393	.eb2d		f0 90		beq $eabf	                beq copyCharNotRecognised
9399	.eb2f		fa		plx		                plx
9400	.eb30		18		clc		                clc
9401	.eb31						rtsEB31:
9402	.eb31		60		rts		                rts

9417	.eb32						LEB32:
9418	.eb32		7a		ply		                ply
9419	.eb33		90 8e		bcc $eac3	                bcc readFromInputBufferX
9420	.eb35		98		tya		                tya
9421	.eb36		8d c9 02	sta $02c9	                sta currentSoftKey

9425	.eb39		a5 f4		lda $f4		                lda $F4
9426	.eb3b		48		pha		                pha                           ;save old ROMSEL
9427	.eb3c		20 98 e5	jsr $e598	                jsr selectTerminalROMAndANDY2
9428	.eb3f		20 55 eb	jsr $eb55	                jsr getSoftKeyStringLength
9429	.eb42		8d 68 02	sta $0268	                sta softKeyStringLength
9430	.eb45		b9 00 80	lda $8000,y	                lda andy.softKeys.stringLSBs,y
9431	.eb48		85 f8		sta $f8		                sta softKeyExpansionPtr+0
9432	.eb4a		b9 11 80	lda $8011,y	                lda andy.softKeys.stringMSBs,y
9433	.eb4d		85 f9		sta $f9		                sta softKeyExpansionPtr+1
9434	.eb4f		68		pla		                pla
9435	.eb50		20 92 e5	jsr $e592	                jsr selectROMA               ;restore old ROMSEL
9436	.eb53		80 a8		bra $eafd	                bra readFromEconetOrSoftKeyOrInputBufferA

9438							;-------------------------------------------------------------------------

9440	.eb55						getSoftKeyStringLength:
9441	.eb55		b9 01 80	lda $8001,y	                lda andy.softKeys.stringLSBs+1,y
9442	.eb58		38		sec		                sec
9443	.eb59		f9 00 80	sbc $8000,y	                sbc andy.softKeys.stringLSBs+0,y
9444	.eb5c		60		rts		                rts

9446							;-------------------------------------------------------------------------
9447							;
9448							; Page HAZEL out, page MOS in, call handleCursorKey.
9449							;
9450	.eb5d						handleCursorKeyThunk:
9451	.eb5d		20 ab f3	jsr $f3ab	                jsr withMOSROM
9452	.eb60		4c 78 df	jmp $df78	                jmp handleCursorKey

9454							;-------------------------------------------------------------------------
9455							;
9456							; Page HAZEL out, page MOS in, call handleCopyKey.
9457							;
9458	.eb63						handleCopyKeyThunk:
9459	.eb63		20 ab f3	jsr $f3ab	                jsr withMOSROM
9460	.eb66		4c 5e df	jmp $df5e	                jmp handleCopyKey

9462							;-------------------------------------------------------------------------
9463							;
9464							; Call OSBYTE $91 (Get character from buffer) (MasRef D.2-45) in a
9465							; loop, until a character is extracted or ESCAPE is pressed.
9466							;
9467							; Entry:
9468							;
9469							; X = buffer number
9470							;
9471							; Exit:
9472							;
9473							; C=0 - character was extracted
9474							; C=1 - ESCAPE was pressed

9487							;-------------------------------------------------------------------------

9490							                .include "osbyte_osword_table.s65"

:13	;******  Processing file: src/osbyte_osword_table.s65

1							; OSBYTE Dispatch Table
2							; =====================

4							; TODO structure probably the same as
5							; https://tobylobster.github.io/mos/mos/S-s15.html#SP1...

7							; entry:
8							;
9							; A = OSBYTE A
10							;
11							; X = OSBYTE X
12							;
13							; Y = OSBYTE Y
14							;
15							; ?originalA, ?originalX, ?originalY = OSBYTE arguments
16							;
17							; C=1
18							;
19							; N/Z set as per X
20							;

22	.eb69						osbyteAndOSWORDRoutineTable:
23							                ;Display MOS version D.2-18
24	>eb69		6f ef				                .word osbyte00

26							                ;Write user flag D.2-18
27	>eb6b		ce f0				                .word osbyte01

29							                ;Specify input stream D.2-18
33	>eb6d		b4 ec				                .word osbyte02

36							                ;Specify output stream D.2-19
37	>eb6f		a3 f0				                .word osbyte03

39							                ;Enable/disable cursor editing
40	>eb71		d6 f0				                .word osbyte04

42							                ;Write printer driver type D.2-20
43	>eb73		bc f0				                .word osbyte05

45							                ;Write printer ignore character D.2-21
46	>eb75		b3 f0				                .word osbyte06

48							                ;Write RS423 receive rate D.2-21
52	>eb77		6d ec				                .word osbyte07

55							                ;Write RS423 transmit rate D.2-22
59	>eb79		6b ec				                .word osbyte08

62							                ;Write duration of first colour D.2-22
63	>eb7b		92 ec				                .word osbyte09

65							                ;Write duration of second colour D.2-22
66	>eb7d		94 ec				                .word osbyte0A

68							                ;Write keyboard auto-repeat delay D.2-22
69	>eb7f		d4 f0				                .word osbyte0B

71							                ;Write keyboard auto-repeat rate D.2-23
72	>eb81		d2 f0				                .word osbyte0C

74							                ;Disable event D.2-23
75	>eb83		da ec				                .word osbyte0D

77							                ;Enable event D.2-24
78	>eb85		db ec				                .word osbyte0E

80							                ;Flush buffer D.2-24
81	>eb87		45 e9				                .word osbyte0F

83							                ;Write number of ADC channels D.2-25
87	>eb89		e7 ec				                .word osbyte10

90							                ;Write next ADC channel to be sampled D.2-25
94	>eb8b		9c e7				                .word osbyte11

97							                ;Reset soft keys D.2-26
98	>eb8d		1a f1				                .word osbyte12

100							                ;Wait for vertical sync D.2-26
101	>eb8f		f5 f0				                .word osbyte13

103							                ;Restore default font definitions D.2-26
104	>eb91		1c f2				                .word osbyte14

106							                ;Flush selected buffer D.2-27
107	>eb93		51 e9				                .word osbyte15

109							                ;Increment ROM polling semaphore D.2-27
110	>eb95		28 f2				                .word osbyte16

112							                ;Decrement ROM polling semaphore D.2-27
113	>eb97		2c f2				                .word osbyte17

115							                ; Reserved
116	>eb99		84 ed				                .word osbyteUnused

118							                ;Restore a group of font definitions D.2-28
119	>eb9b		22 f2				                .word selectTerminalROMAndOSBYTE19

121							                ; Test RAM presence D.2-28

128							                ; Test pseudo/absolute use of bank D.2-29

135							                ;Write 1MHz bus selection status D.2-29
136	>eb9d		9e ee				                .word osbyte6B

138							                ;Write usage of main/shadow memory D.2-30
139	>eb9f		a2 ee				                .word osbyte6C

141							                ;Make temporary Filing System permanent D.2-30
142	>eba1		0f f2				                .word osbyte6D

144							                ;Unused
145	>eba3		84 ed				                .word osbyteUnused

147							                ;Unused
148	>eba5		84 ed				                .word osbyteUnused

150							                ;Select main/shadow memory for VDU access D.2-31
151	>eba7		58 ed				                .word osbyte70

153							                ;Select main/shadow memory for display D.2-31
154	>eba9		68 ed				                .word osbyte71

156							                ;Write usage of shadow memory D.2-31
157	>ebab		b8 f0				                .word osbyte72

159							                ;Unused
160	>ebad		aa ff				                .word rtsFFAA

162							                ;Unused
163	>ebaf		aa ff				                .word rtsFFAA

165							                ;Read VDU status D.2-32
166	>ebb1		b3 ef				                .word osbyte75

168							                ;Reflect keyboard status in keyboard LEDs D.2-33
169	>ebb3		30 f2				                .word osbyte76

171							                ;Close all *SPOOL/*SPOOLON or *EXEC files D.2-33
175	>ebb5		b5 e9				                .word selectTerminalROMAndOSBYTE77

178							                ;Write keys pressed information D.2-33
179	>ebb7		0b f9				                .word osbyte78

181							                ;Keyboard scan D.2-33
182	>ebb9		02 f9				                .word callKEYV

184							                ;Keyboard scan from 16 decimal
185	>ebbb		10 f9				                .word osbyte7A

187							                ;Inform MOS of printer driver going dormant
188	>ebbd		2f e9				                .word osbyte7B

190							                ;Clear escape condition
191	>ebbf		56 ec				                .word osbyte7C

193							                ;Set escape condition
194	>ebc1		57 ec				                .word osbyte7D

196							                ;Acknowledge escape condition
197	>ebc3		3c ec				                .word osbyte7E

199							                ;Check for end of file on an opened file
200	>ebc5		e3 f1				                .word osbyte7F

202							                ;Read ADC channel or get buffer status
206	>ebc7		35 ed				                .word osbyte80

209							                ;Read key with time limit
210	>ebc9		f4 ec				                .word osbyte81

212							                ;Read machine high order address
213	>ebcb		0b ed				                .word osbyte82

215							                ;Read Operating System High Water Mark (OSHWM)
216	>ebcd		05 f9				                .word osbyte83

218							                ;Read top of user RAM
219	>ebcf		ba f1				                .word osbyte84

221							                ;Read top of user RAM for given mode
222	>ebd1		d0 f1				                .word osbyte85

224							                ;Read text cursor position
225	>ebd3		69 e2				                .word osbyte86

227							                ;Read screen mode and character at text cursor position
228	>ebd5		dc f1				                .word osbyte87

230							                ;Execute user code
231	>ebd7		37 ec				                .word osbyte88

234	>ebd9		61 ec				                .word osbyte89 ;Switch cassette motor relay

241							                ;Insert character code into buffer
242	>ebdb		3f ea				                .word osbyte8A

244							                ;Write Filing System options
245	>ebdd		e2 f1				                .word osbyte8B

248	>ebdf		9a ed				                .word osbyte8C8D ;Select Cassette Filing System

254							                ;Select ROM Filing System
255	>ebe1		9a ed				                .word osbyte8C8D

257							                ;Enter language ROM
258	>ebe3		c3 e4				                .word osbyte8E

260							                ;Issue paged ROM service request
261	>ebe5		03 ee				                .word osbyte8F

263							                ;Set vertical screen shift and interlace option
264	>ebe7		53 f3				                .word osbyte90

266							                ;Get character from buffer
267	>ebe9		f4 e9				                .word osbyte91

269							                ;Read from FRED (&FC00 - &FCFF)
270	>ebeb		9e f8				                .word osbyte92

272							                ;Write to FRED (&FC00 - &FCFF)
273	>ebed		6e f3				                .word osbyte93

275							                ;Read from JIM (&FD00 - &FDFF)
276	>ebef		ae f8				                .word osbyte94

278							                ;Write to JIM (&FD00 - &FDFF)
279	>ebf1		64 f3				                .word osbyte95

281							                ;Read from SHEILA (&FE00 - &FEFF)
282	>ebf3		ab ff				                .word osbyte96

284							                ;Write to SHEILA (&FE00 - &FEFF)
285	>ebf5		69 f3				                .word osbyte97

287							                ;Examine buffer status
288	>ebf7		ef e9				                .word osbyte98

290							                ;Insert character code into buffer checking for escape
294	>ebf9		80 ea				                .word osbyte99

297							                ;Write video ULA control register
298	>ebfb		4f f2				                .word osbyte9A

300							                ;Write to video ULA palette register and copy
301	>ebfd		60 f2				                .word osbyte9B

303							                ;Read/write serial ACIA control register and copy
307	>ebff		14 e9				                .word osbyte9C

310							                ;Write byte across Tube
311	>ec01		af ff				                .word osbyte9D

313							                ;reserved for the speech system
314	>ec03		84 ed				                .word osbyteUnused

316							                ;reserved for the speech system
317	>ec05		84 ed				                .word osbyteUnused

319							                ;Read VDU variable value
320	>ec07		ff f0				                .word osbyteA0

322							                ;Read CMOS RAM
326	>ec09		8e ed				                .word osbyteA1

329							                ;Write CMOS RAM
333	>ec0b		94 ed				                .word osbyteA2

336							                ;reserved for applications software
337	>ec0d		84 ed				                .word osbyteUnused

339							                ;Check processor type
340	>ec0f		47 e5				                .word osbyteA4

342							                ;Read output cursor position
343	>ec11		3d e2				                .word osbyteA5

345							                ;handle osbyte A6-FF
346	>ec13		db f0				                .word osbyteA6

348							                ;*LINE - not part of the above table???
349	>ec15		39 ec				                .word callUSERV

351							;-------------------------------------------------------------------------
352							;
353							; OSWORD dispatch table. Must follow on from the OSBYTE table.
354							;
355							; entry:
356							;
357							; A = 0th byte of parameter block
358							;
359							; X = OSWORD X
360							;
361							; Y = 0
362							;
363							; ?originalA, ?originalX, ?originalY = OSWORD arguments
364							;
365							; C=1
366							;
367							; N/Z set as per X
368							;
369	.ec17						oswordRoutineTable:

371							;Read line from input stream to memory
372	>ec17		2f f0				                .word osword00

374							                ;Read system clock
375	>ec19		02 f0				                .word osword01

377							                ;Write system clock
378	>ec1b		15 f0				                .word osword02

380							                ;Read interval timer
381	>ec1d		fe ef				                .word osword03

383							                ;Write interval timer
384	>ec1f		11 f0				                .word osword04

386							                ;Read byte from I/O processor memory
387	>ec21		51 ef				                .word osword05

389							                ;Write byte to I/O processor memory
390	>ec23		59 ef				                .word osword06

392							                ;Generate a sound
393	>ec25		7b ef				                .word osword07

395							                ;Define a sound envelope
396	>ec27		dc ef				                .word osword08

398							                ;Read pixel logical colour
399	>ec29		50 f1				                .word osword09

401							                ;Read a character definition
402	>ec2b		75 f1				                .word osword0A

404							                ;Read the palette
405	>ec2d		3f f1				                .word osword0B

407							                ;Write the palette
408	>ec2f		8d f1				                .word osword0C

410							                ;Read current and previous graphics cursor positions
411	>ec31		9b f1				                .word osword0D

413							                ;Read CMOS clock
414	>ec33		2f ef				                .word selectTerminalROMAndOSWORD0E

416							                ;Write CMOS clock
420	>ec35		e8 f1				                .word selectTerminalROMAndOSWORD0F

:11	;******  Return to file: src/mos.s65

9493							;-------------------------------------------------------------------------

9495	.ec37						osbyte88: ;LEC37:
9496	.ec37		a9 00		lda #$00	                lda #$00

9498	.ec39						callUSERV:
9499	.ec39		6c 00 02	jmp ($0200)	                jmp (USERV)

9501	.ec3c						osbyte7E:                       ;ec3c
9502	.ec3c		a2 00		ldx #$00	                ldx #$00
9503	.ec3e		24 ff		bit $ff		                bit $FF
9504	.ec40		10 14		bpl $ec56	                bpl osbyte7C
9505	.ec42		ad 76 02	lda $0276	                lda escapeEffects
9506	.ec45		d0 0d		bne $ec54	                bne LEC54
9507	.ec47		58		cli		                cli
9508	.ec48		9c 69 02	stz $0269	                stz pagedModeCounter
9509	.ec4b		20 84 f3	jsr $f384	                jsr withTerminalROM
9510	.ec4e		20 91 a5	jsr $a591	                jsr starEXEC
9511	.ec51		20 47 e9	jsr $e947	                jsr LE947
9512	.ec54						LEC54:
9513	.ec54		a2 ff		ldx #$ff	                ldx #$FF
9514	.ec56						osbyte7C: ;EC56
9515	.ec56		18		clc		                clc
9516	.ec57						osbyte7D: ;EC57
9523	.ec57		66 ff		ror $ff		                ror escapeFlag
9524	.ec59		2c 7a 02	bit $027a	                bit tubePresence
9525	.ec5c		10 7b		bpl $ecd9	                bpl LECD9
9526	.ec5e		4c 03 04	jmp $0403	                jmp tubeHost.copyEscapeStatus

9538							;-------------------------------------------------------------------------

9541	.ec61						osbyte89:
9542	.ec61		ad 82 02	lda $0282	                lda serialULARegister
9543	.ec64		a8		tay		                tay
9544	.ec65		2a		rol a		                rol a
9545	.ec66		e0 01		cpx #$01	                cpx #$01
9546	.ec68		6a		ror a		                ror a
9547	.ec69		80 1e		bra $ec89	                bra LEC89

9550							;-------------------------------------------------------------------------
9551							;
9552							; ;OSBYTE 8 (&08) Write RS423 transmit rate
9553							;
9554							; This call sets the RS423 baud rate for transmitting data. The actual format of
9555							; the data is set using OSBYTE 156/&9C (see below).
9556							;
9557							; Entry parameters :
9558							; X=0 selects 9600 baud
9559							; X=1 selects 75 baud
9560							; X=2 selects 150 baud
9561							; X=3 selects 300 baud
9562							; X=4 selects 1200 baud
9563							; X=5 selects 2400 baud
9564							; X=6 selects 4800 baud
9565							; X=7 selects 9600 baud
9566							; X=8 selects 19200 baud
9567							; Y=0
9568							;
9569							; On exit : X=Y=<old serial ACIA control register contents>

9572	.ec6b						osbyte08:
9573	.ec6b		a9 38		lda #$38	                lda #$38
9574							                ; fall through to OSBYTE &07

9577							;-------------------------------------------------------------------------
9578							;
9579							; OSBYTE 7 (&07) Write RS423 receive rate
9580							;
9581							; This call sets the RS423 baud rate for receiving data. The actual
9582							; format of the data is set using OSBYTE 156/&9C (see below).
9583							;
9584							; Entry parameters :
9585							; X=0 selects 9600 baud
9586							; X=1 selects 75 baud
9587							; X=2 selects 150 baud
9588							; X=3 selects 300 baud
9589							; X=4 selects 1200 baud
9590							; X=5 selects 2400 baud
9591							; X=6 selects 4800 baud
9592							; X=7 selects 9600 baud
9593							; X=8 selects 19200 baud
9594							; Y=0
9595							;
9596							; On exit : X=Y=<old serial ACIA control register contents>

9599	.ec6d						osbyte07:                                    ;ec6d
9600	.ec6d		49 3f		eor #$3f	                eor #$3F                     ;if OSBYTE 8,
9601							                                             ;A=%00000111, mask for
9602							                                             ;transmit rate; if OSBYTE
9603							                                             ;8, A=%000111000, mask
9604							                                             ;for receive rate.
9605	.ec6f		85 fa		sta $fa		                sta $FA                      ;save mask
9606	.ec71		ac 82 02	ldy $0282	                ldy serialULARegister                    ;
9607	.ec74		e0 09		cpx #$09	                cpx #$09                     ;check for invalid baud rate
9608	.ec76		b0 17		bcs $ec8f	                bcs LEC8F                    ;branch taken if invalid
9609	.ec78		3d ec f0	and $f0ec,x	                and serialBaudRatesTable,x   ;get setting in A
9610	.ec7b		85 fb		sta $fb		                sta $FB                      ;store setting
9611	.ec7d		98		tya		                tya                          ;
9612	.ec7e		05 fa		ora $fa		                ora $FA
9613	.ec80		45 fa		eor $fa		                eor $FA
9614	.ec82		05 fb		ora $fb		                ora $FB
9615	.ec84		09 40		ora #$40	                ora #$40
9616	.ec86		4d 5d 02	eor $025d	                eor rs423Destination ;mask in tape/serial flag set by OSBYTE 205ac
9617	.ec89						LEC89:
9618	.ec89		8d 82 02	sta $0282	                sta serialULARegister
9619	.ec8c		8d 10 fe	sta $fe10	                sta SERPROC+0
9620	.ec8f						LEC8F:
9621	.ec8f		98		tya		                tya
9622	.ec90						LEC90:
9623	.ec90		aa		tax		                tax
9624	.ec91		60		rts		                rts

9634							;-------------------------------------------------------------------------

9636							; Y=0 on entry.

9638	.ec92						osbyte09:                       ;ec92
9639	.ec92		c8		iny		                iny
9640	.ec93		18		clc		                clc
9641	.ec94						osbyte0A:                                    ;ec94
9642	.ec94		b9 52 02	lda $0252,y	                lda firstFlashColourDuration,y
9643	.ec97		48		pha		                pha
9644	.ec98		8a		txa		                txa
9645	.ec99		99 52 02	sta $0252,y	                sta firstFlashColourDuration,y
9646	.ec9c		7a		ply		                ply
9647	.ec9d		ad 51 02	lda $0251	                lda flashCounter
9648	.eca0		d0 ed		bne $ec8f	                bne LEC8F
9649	.eca2		8e 51 02	stx $0251	                stx flashCounter
9650	.eca5		ad 48 02	lda $0248	                lda vcontrolRegister
9651	.eca8		08		php		                php
9652	.eca9		6a		ror a		                ror a
9653	.ecaa		28		plp		                plp
9654	.ecab		2a		rol a		                rol a
9655	.ecac		8d 48 02	sta $0248	                sta vcontrolRegister
9656	.ecaf		8d 20 fe	sta $fe20	                sta VCONTROL
9657	.ecb2		80 db		bra $ec8f	                bra LEC8F

9659							;-------------------------------------------------------------------------
9660							;
9661							; OSBYTE 2 (&02) Specify input stream
9662							;
9663							; Input may be taken from either the keyboard (by default) or the
9664							; RS423 port. This call specifies the selection for all subsequent
9665							; input.
9666							;
9667							; Entry parameters :
9668							; X=0 selects keyboard input and disables RS423
9669							; X=1 selects and enables RS423 input
9670							; X=2 selects keyboard input and enables RS423
9671							; Y=0
9672							;
9673							; On exit : X=0 indicates previous input was from the keyboard
9674							;           X=1 indicates previous input was from RS423
9675							;           Y is undefined
9676							;
9677							; D.2-18
9679	.ecb4						osbyte02:                       ;ecb4
9680	.ecb4		8a		txa		                txa
9681	.ecb5		29 01		and #$01	                and #$01
9682	.ecb7		48		pha		                pha
9683	.ecb8		ad 50 02	lda $0250	                lda aciaControlRegister
9684	.ecbb		2a		rol a		                rol a
9685	.ecbc		e0 01		cpx #$01	                cpx #$01
9686	.ecbe		6a		ror a		                ror a
9687	.ecbf		cd 50 02	cmp $0250	                cmp aciaControlRegister
9688	.ecc2		08		php		                php
9689	.ecc3		8d 50 02	sta $0250	                sta aciaControlRegister
9690	.ecc6		8d 08 fe	sta $fe08	                sta ACIA+0
9691	.ecc9		20 0b e9	jsr $e90b	                jsr setRS423Active
9692	.eccc		28		plp		                plp
9693	.eccd		f0 03		beq $ecd2	                beq LECD2
9694	.eccf		2c 09 fe	bit $fe09	                bit ACIA+1
9695	.ecd2						LECD2:
9696	.ecd2		ae 41 02	ldx $0241	                ldx inputSource
9697	.ecd5		68		pla		                pla
9698	.ecd6		8d 41 02	sta $0241	                sta inputSource
9699	.ecd9						LECD9:
9700	.ecd9		60		rts		                rts

9703							;-------------------------------------------------------------------------
9704							;
9705							; OSBYTE 13 (&0D) Disable event
9706							;
9707							; All events are assigned a unique number and this call provides a
9708							; means of disabling specific events.
9709							;
9710							; Entry parameters:
9711							; X = event number
9712							;
9713							; On exit: X = Y = <old enable state> (0=disabled)
9714	.ecda						osbyte0D:
9715	.ecda		98		tya		                tya             ;A=0

9717							;-------------------------------------------------------------------------
9718							;
9719							; OSBYTE 14 (&0E) Enable event
9720							;
9721							; This call provides a means of enabling specific events.
9722							;
9723							;
9724	.ecdb						osbyte0E:
9725	.ecdb		e0 0a		cpx #$0a	                cpx #eventMax+1
9727	.ecdd		b0 b1		bcs $ec90	                bcs LEC90
9731	.ecdf		bc bf 02	ldy $02bf,x	                ldy eventEnabledFlags,x
9732	.ece2		9d bf 02	sta $02bf,x	                sta eventEnabledFlags,x
9734	.ece5		80 a8		bra $ec8f	                bra LEC8F

9745							;-------------------------------------------------------------------------
9746							;
9747							; OSBYTE 16 (&10) Write number of ADC channels
9748							;
9749							; By default, each of the four ADC channels is sampled and converted
9750							; in turn so that each reading is updated every 40 milliseconds. This
9751							; call enables the number of channels to be changed so that if, for
9752							; example, only two channels are required, each will be updated every
9753							; 20 milliseconds.
9754							;
9756	.ece7						osbyte10:
9758	.ece7		f0 03		beq $ecec	                beq +                        ;taken if X=0
9759	.ece9		20 9c e7	jsr $e79c	                jsr osbyte11
9760	.ecec						+
9762	.ecec		ad 4d 02	lda $024d	                lda maximumADCChannel
9763	.ecef		8e 4d 02	stx $024d	                stx maximumADCChannel
9764	.ecf2		aa		tax		                tax
9765	.ecf3		60		rts		                rts

9768							;-------------------------------------------------------------------------
9769							;
9770							; OSBYTE 129 (&81) Read key with time limit
9771							;
9772							; This call may be used to read a key from the keyboard subject to a
9773							; specified time limit or to perform a keyboard scan for a specified
9774							; key depression.

9776	.ecf4						osbyte81:
9777	.ecf4		98		tya		                tya
9778	.ecf5		30 0a		bmi $ed01	                bmi LED01          ;taken if scanning for specific key
9779	.ecf7		20 b1 e7	jsr $e7b1	                jsr osbyte81Timed
9780	.ecfa		b0 03		bcs $ecff	                bcs LECFF                 ;taken if timed out or error
9781	.ecfc		aa		tax		                tax                       ;X = ASCII char
9782	.ecfd						LECFD:
9783	.ecfd		a9 00		lda #$00	                lda #$00
9784	.ecff						LECFF:
9785	.ecff		a8		tay		                tay
9786	.ed00		60		rts		                rts

9788	.ed01						LED01:
9789	.ed01		8a		txa		                txa
9790	.ed02		f0 10		beq $ed14	                beq LED14
9791	.ed04		49 7f		eor #$7f	                eor #$7F
9792	.ed06		aa		tax		                tax
9793	.ed07		20 02 f9	jsr $f902	                jsr callKEYV
9794	.ed0a		2a		rol a		                rol a
9795							                ; fall through

9797							;-------------------------------------------------------------------------

9799	.ed0b						osbyte82:
9800	.ed0b		a2 ff		ldx #$ff	                ldx #$FF
9801	.ed0d		a0 ff		ldy #$ff	                ldy #$FF
9802	.ed0f		b0 02		bcs $ed13	                bcs LEB13                    ;if OSBYTE $82, done
9803	.ed11		e8		inx		                inx
9804	.ed12		c8		iny		                iny
9805	.ed13						LEB13:
9806	.ed13		60		rts		                rts

9808	.ed14						LED14:
9810	.ed14		a2 fd		ldx #$fd	                ldx #$FD
9820	.ed16		80 e5		bra $ecfd	                bra LECFD

9822	.ed18						LED18:
9826	.ed18		8a		txa		                txa
9827	.ed19		49 ff		eor #$ff	                eor #$FF
9828	.ed1b		aa		tax		                tax
9829	.ed1c		e0 02		cpx #$02	                cpx #$02
9830							                ; fall through

9832							;-------------------------------------------------------------------------

9834	.ed1e						countBufferViaCNPV:
9835	.ed1e		b8		clv		                clv
9836	.ed1f		80 03		bra $ed24	                bra callCNPV

9838	.ed21						purgeBufferViaCNPV:
9839	.ed21		2c 4e e3	bit $e34e	                bit valueFF                  ;V=1
9840	.ed24						callCNPV:
9841	.ed24		6c 2e 02	jmp ($022e)	                jmp (CNPV)

9843							;-------------------------------------------------------------------------

9846	.ed27						getRS423InputBufferFreeBytes:
9847	.ed27		38		sec		                sec
9848	.ed28		a2 01		ldx #$01	                ldx #bufferRS423Input
9849	.ed2a		20 1e ed	jsr $ed1e	                jsr countBufferViaCNPV
9850	.ed2d		c0 01		cpy #$01	                cpy #$01                     ;check MSB
9851	.ed2f		b0 03		bcs $ed34	                bcs +                        ;if >= 256 bytes, all good
9852	.ed31		ec 5b 02	cpx $025b	                cpx rs423InputBufferMinimumSpace ;compare to min space
9853	.ed34						+
9854	.ed34		60		rts		                rts

9857							;-------------------------------------------------------------------------

9860	.ed35						osbyte80:
9861	.ed35		30 e1		bmi $ed18	                bmi LED18
9862	.ed37		f0 0c		beq $ed45	                beq LED45
9864	.ed39		e0 05		cpx #$05	                cpx #$05
9865	.ed3b		b0 ce		bcs $ed0b	                bcs osbyte82                 ;return with X=$ff Y=$ff
9866	.ed3d		bc b9 02	ldy $02b9,x	                ldy adcResultMSBs-1,x
9867	.ed40		bd b5 02	lda $02b5,x	                lda adcResultLSBs-1,x
9868	.ed43		aa		tax		                tax
9879	.ed44		60		rts		                rts

9882							;-------------------------------------------------------------------------

9885	.ed45						LED45:
9887							                ; Put joystick buttons in bits 0/1.
9888	.ed45		ad 40 fe	lda $fe40	                lda systemVIA.irb
9889	.ed48		6a		ror a		                ror a
9890	.ed49		6a		ror a		                ror a
9891	.ed4a		6a		ror a		                ror a
9892	.ed4b		6a		ror a		                ror a
9893	.ed4c		49 ff		eor #$ff	                eor #$FF
9894	.ed4e		29 03		and #$03	                and #$03
9895	.ed50		ac be 02	ldy $02be	                ldy adcLastChannelRead
9896	.ed53		8e be 02	stx $02be	                stx adcLastChannelRead
9897	.ed56		aa		tax		                tax
9902	.ed57		60		rts		                rts

9905							;-------------------------------------------------------------------------
9906							;
9907							; OSBYTE $70
9908							;
9909							; D.2-31
9910							;
9911	.ed58						osbyte70:                       ;ed58
9912	.ed58		20 70 ed	jsr $ed70	                jsr osbyte7071
9913	.ed5b		0a		asl a		                asl a
9914	.ed5c		f0 04		beq $ed62	                beq clearACCCCONE
9915	.ed5e						LED5E:
9916	.ed5e		0c 34 fe	tsb $fe34	                tsb ACCCON
9917	.ed61		60		rts		                rts

9919	.ed62						clearACCCCONE:
9920	.ed62		a9 02		lda #$02	                lda #ACCCON.E
9921	.ed64						LED64:
9922	.ed64		1c 34 fe	trb $fe34	                trb ACCCON
9923	.ed67		60		rts		                rts

9925							;-------------------------------------------------------------------------

9927	.ed68						osbyte71:                       ;ed68
9928	.ed68		20 70 ed	jsr $ed70	                jsr osbyte7071
9929	.ed6b		d0 f1		bne $ed5e	                bne LED5E
9930	.ed6d		1a		inc a		                inc a
9931	.ed6e		80 f4		bra $ed64	                bra LED64

9933							;-------------------------------------------------------------------------
9934							;
9935							; Handle OSBYTE $70 or OSBYTE $71
9936							;
9937							; Entry: A=$70 or $71
9938							;
9939	.ed70						osbyte7071:
9940	.ed70		a8		tay		                tay
9941	.ed71		8a		txa		                txa
9943	.ed72		99 1a 02	sta $021a,y	                sta vduDriverMemory-$70,y
9944	.ed75		d0 09		bne $ed80	                bne LED80
9945	.ed77		a5 d0		lda $d0		                lda STATE
9946	.ed79		29 10		and #$10	                and #STATE.isShadowMode
9947	.ed7b		f0 06		beq $ed83	                beq LED83
9948	.ed7d						LED7D:
9949	.ed7d		a9 01		lda #$01	                lda #$01
9950	.ed7f		60		rts		                rts

9952	.ed80						LED80:
9953	.ed80		3a		dec a		                dec a
9954	.ed81		d0 fa		bne $ed7d	                bne LED7D
9955	.ed83						LED83:
9956	.ed83		60		rts		                rts

9958							;-------------------------------------------------------------------------

9960							; OSBYTE &6E (110), &6F (111)
9961							; ===========================
9962							; Pass to sideways ROMs
9963	.ed84						osbyteUnused:                   ;ed84
9964	.ed84		a2 07		ldx #$07	                ldx #romServiceCallUnrecognisedOSBYTE
9965	.ed86		20 72 ee	jsr $ee72	                jsr makeROMServiceCall
9966	.ed89		a6 f0		ldx $f0		                ldx originalX
9968	.ed8b		49 00		eor #$00	                eor #$00
9970	.ed8d		60		rts		                rts

9972							;-------------------------------------------------------------------------

9975	.ed8e						osbyteA1:
9976	.ed8e		20 84 f3	jsr $f384	                jsr withTerminalROM
9977	.ed91		4c b2 98	jmp $98b2	                jmp readCMOSByte

9980							;-------------------------------------------------------------------------

9983	.ed94						osbyteA2:
9984	.ed94		20 84 f3	jsr $f384	                jsr withTerminalROM
9985	.ed97		4c dc 98	jmp $98dc	                jmp writeCMOSByte

9988							;-------------------------------------------------------------------------
9989							;
9990							; OSBYTE 140 (&8C) Select Cassette Filing System [MasRef D.2-43]
9991							; OSBYTE 141 (&8D) Select ROM Filing System [MasRef D.2-43]
9992							;
9993	.ed9a						osbyte8C8D:
9994	.ed9a		20 c0 ed	jsr $edc0	                jsr selectROMOrTAPEByOSBYTE
9995	.ed9d		ad 34 fe	lda $fe34	                lda ACCCON                    ; Save ACCON register
9996	.eda0		48		pha		                pha
9997	.eda1		20 ba ed	jsr $edba	                jsr selectHAZEL         ; Page Hazel workspace in
9998	.eda4		ae 01 df	ldx $df01	                ldx hazel.activeFS
9999	.eda7		8e 00 df	stx $df00	                stx hazel.currentFS
10000	.edaa		a9 0f		lda #$0f	                lda #terminalROM
10001	.edac		8d 03 df	sta $df03	                sta hazel.currentFSROM
10002	.edaf		68		pla		                pla                          ; Restore ACCON
10003	.edb0						selectMOSOrHAZEL:                                       ;edb0
10004	.edb0		29 08		and #$08	                and #ACCCON.Y   ;get just the HAZEL/MOS bit
10005	.edb2		d0 08		bne $edbc	                bne setACCCONBits      ;branch taken if HAZEL at $c000
10006	.edb4						selectMOS:
10007	.edb4		a9 08		lda #$08	                lda #ACCCON.Y
10008	.edb6		1c 34 fe	trb $fe34	                trb ACCCON      ;page in MOS at $c000
10009	.edb9		60		rts		                rts

10011	.edba						selectHAZEL:
10012	.edba		a9 08		lda #$08	                lda #ACCCON.Y
10013	.edbc						setACCCONBits:
10014	.edbc		0c 34 fe	tsb $fe34	                tsb ACCCON      ;page in HAZEL at $c000
10015	.edbf		60		rts		                rts

10017							;-------------------------------------------------------------------------

10025							;-------------------------------------------------------------------------
10026							;
10027							; Select ROM or TAPE.
10028							;
10029							; Two entry points: selectROMOrTAPEByOSBYTE picks FS by OSBYTE number
10030							; ($8c=TAPE, $8d=ROM), and selectROMOrTAPE picks FS by number (0=TAPE,
10031							; 1=ROM).
10032							;
10033							; entry:
10034							;
10035							; A = FS to select
10036							;
10037	.edc0						selectROMOrTAPEByOSBYTE:

10051	.edc0		49 8c		eor #$8c	                eor #$8C                     ;A=0 if tape, A=1 if ROM
10052	.edc2						selectROMOrTAPE:
10053	.edc2		0a		asl a		                asl a           ; Set CFS/RFS switch to 0=CFS or 2=RFS
10054	.edc3		8d 47 02	sta $0247	                sta cfsRFSFSSwitch
10055	.edc6		d0 04		bne $edcc	                bne LEDCC                    ;taken if ROM
10056	.edc8		a9 04		lda #$04	                lda #$04                     ; CFS, clear b2 of status
10057	.edca		14 e2		trb $e2		                trb $E2
10058	.edcc						LEDCC:
10059	.edcc		e0 03		cpx #$03	                cpx #$03                     ; EQ=TAPE 300, NE=TAPE 1200
10060	.edce		80 06		bra $edd6	                bra LEDD6

10062	.edd0						LEDD0:
10066	.edd0		20 64 ee	jsr $ee64	                jsr LEE64
10067	.edd3		20 ee f1	jsr $f1ee	                jsr LF1EE
10068	.edd6						LEDD6:
10069	.edd6		08		php		                php                          ; Save baud flag in Carry
10070	.edd7		a9 06		lda #$06	                lda #$06                     ; Vectors about to change
10071	.edd9		20 e5 f1	jsr $f1e5	                jsr callFSCV
10072	.eddc		ad 47 02	lda $0247	                lda cfsRFSFSSwitch           ; Jump if RFS selected
10073	.eddf		d0 0d		bne $edee	                bne LEDEE
10074	.ede1		a2 06		ldx #$06	                ldx #$06                     ; Prepare baud=6 for TAPE300
10075	.ede3		28		plp		                plp                          ; Skip past if TAPE300
10076	.ede4		f0 05		beq $edeb	                beq LEDEB
10077	.ede6		a9 04		lda #$04	                lda #$04                     ; TAPE1200, set bit 2 of status
10078	.ede8		04 e2		tsb $e2		                tsb $E2
10079	.edea		ca		dex		                dex                          ; Change to baud=5 for TAPE1200
10080	.edeb						LEDEB:
10081	.edeb		86 c6		stx $c6		                stx $C6                      ; Store baud rate setting
10082	.eded		08		php		                php
10083	.edee						LEDEE:
10084	.edee		64 ce		stz $ce		                stz $CE                      ; Clear byte (unused on BBC)
10085	.edf0		28		plp		                plp

10088	.edf1		a2 0e		ldx #$0e	                ldx #defaultVectorTable.fsVectors.end-defaultVectorTable.fsVectors ; Prepare to set 7 vectors
10089	.edf3						LEDF3:
10090	.edf3		bd e8 e2	lda $e2e8,x	                lda defaultVectorTable.fsVectors-1,x ; Set filing
10091							                                                     ; system vectors
10092							                                                     ; to point to
10093							                                                     ; extended
10094							                                                     ; vectors
10095	.edf6		9d 11 02	sta $0211,x	                sta FILEV-1,x
10096	.edf9		ca		dex		                dex
10097	.edfa		d0 f7		bne $edf3	                bne LEDF3
10098	.edfc		20 ee f1	jsr $f1ee	                jsr LF1EE                    ; Set extended vectors
10099	.edff		64 c2		stz $c2		                stz $C2                      ; Set Progress=idle
10100	.ee01		a2 0f		ldx #$0f	                ldx #romServiceCallVectorsClaimed ; Send service call &0F - vectors changed

10102							;-------------------------------------------------------------------------
10103							;
10104							; OSBYTE 143 (&8F) Issue paged ROM service request [MasRef D.2-44]
10105							;
10106	.ee03						osbyte8F: .proc                    ;ee03
10107	.ee03		5a		phy		                phy
10108	.ee04		da		phx		                phx                          ; Send service call
10109	.ee05		20 72 ee	jsr $ee72	                jsr makeROMServiceCall
10110	.ee08		fa		plx		                plx
10111	.ee09		e0 0f		cpx #$0f	                cpx #romServiceCallVectorsClaimed ; If VectorsClaimed,
10112							                                                  ; hook FileSwitch
10113							                                                  ; back in
10114	.ee0b		f0 36		beq $ee43	                beq handleVectorsClaimed
10115	.ee0d		1a		inc a		                inc a       ; If claimed, check for
10116							                            ; InitialiseFilingSystem or
10117							                            ; UnrecognisedCommand
10118	.ee0e		3a		dec a		                dec a       ;Z=1 if claimed
10119	.ee0f		f0 03		beq $ee14	                beq wasClaimed  ;branch taken if claimed
10120	.ee11						done:
10121	.ee11		fa		plx		                plx             ; Return with result in X, EQ=Claimed
10122	.ee12		aa		tax		                tax
10123	.ee13		60		rts		                rts

10125	.ee14						wasClaimed:
10126	.ee14		e0 12		cpx #$12	                cpx #romServiceCallInitialiseFilingSystem
10127	.ee16		f0 04		beq $ee1c	                beq +
10128	.ee18		e0 04		cpx #$04	                cpx #romServiceCallUnrecognisedCommand
10129	.ee1a		d0 f5		bne $ee11	                bne done
10130	.ee1c						+

10132							; handle InitialiseFilingSystem ($12) or UnrecognisedCommand ($04)

10134	.ee1c		7a		ply		                ply                     ;Y=service call arg
10135	.ee1d		48		pha		                pha                     ;save A (though actually it's
10136							                                        ;always $00...)
10137	.ee1e		ad 34 fe	lda $fe34	                lda ACCCON
10138	.ee21		48		pha		                pha                     ;save ACCCON
10139	.ee22		20 ba ed	jsr $edba	                jsr selectHAZEL
10140	.ee25		38		sec		                sec
10141	.ee26		6e 00 df	ror $df00	                ror hazel.currentFS ;set currentFS bit 7
10142	.ee29						LEE29:
10143	.ee29		5a		phy		                phy             ;save ROM service call argument
10144	.ee2a		a9 00		lda #$00	                lda #$00
10145	.ee2c		a8		tay		                tay
10146	.ee2d		20 18 fa	jsr $fa18	                jsr callARGSV   ;A=0, Y=0 - get active FS number
10147	.ee30		8d 01 df	sta $df01	                sta hazel.activeFS ;save active FS number
10148	.ee33		2c 00 df	bit $df00	                bit hazel.currentFS
10149	.ee36		10 03		bpl $ee3b	                bpl LEE3B
10150	.ee38		20 0f f2	jsr $f20f	                jsr osbyte6D
10151	.ee3b						LEE3B:
10152	.ee3b		7a		ply		                ply
10153	.ee3c		68		pla		                pla
10154	.ee3d		20 b0 ed	jsr $edb0	                jsr selectMOSOrHAZEL
10155	.ee40		68		pla		                pla
10156	.ee41		aa		tax		                tax
10157	.ee42		60		rts		                rts

10159	.ee43						handleVectorsClaimed:
10160	.ee43		7a		ply		                ply
10161	.ee44		48		pha		                pha
10162	.ee45		ad 34 fe	lda $fe34	                lda ACCCON
10163	.ee48		48		pha		                pha
10164	.ee49		20 ba ed	jsr $edba	                jsr selectHAZEL
10165	.ee4c		ad 1e 02	lda $021e	                lda FSCV+0
10166	.ee4f		8d da df	sta $dfda	                sta hazel.activeFSCV+0
10167	.ee52		ad 1f 02	lda $021f	                lda FSCV+1
10168	.ee55		8d db df	sta $dfdb	                sta hazel.activeFSCV+1
10169	.ee58		a9 69		lda #$69	                lda #<fileswitchFSCEntryPoint
10170	.ee5a		8d 1e 02	sta $021e	                sta FSCV+0
10171	.ee5d		a9 fb		lda #$fb	                lda #>fileswitchFSCEntryPoint
10172	.ee5f		8d 1f 02	sta $021f	                sta FSCV+1
10173	.ee62		80 c5		bra $ee29	                bra LEE29
10174							                .pend

10176							;-------------------------------------------------------------------------

10178	.ee64						LEE64:
10179	.ee64		a9 a1		lda #$a1	                lda #$A1
10180	.ee66		85 e3		sta $e3		                sta $E3
10181	.ee68		a9 19		lda #$19	                lda #$19
10182	.ee6a		8d d1 03	sta $03d1	                sta $03D1
10183	.ee6d		a9 04		lda #$04	                lda #$04
10184	.ee6f		04 e2		tsb $e2		                tsb $E2
10185	.ee71		60		rts		                rts

10187							;-------------------------------------------------------------------------
10188							;
10189							; Pass service call around sideways ROMs
10190							;
10191							; Entry:
10192							; X=service call number
10193							; Y=any parameters
10194							;
10195							; Exit:
10196							; X=0 or preserved
10197							; Y=any returned parameters
10198							; EQ=call claimed if called directly
10199							;
10200	.ee72						makeROMServiceCall: .proc                    ;ee72
10201	.ee72		a5 f4		lda $f4		                lda $F4         ; Save current ROM
10202	.ee74		48		pha		                pha
10203	.ee75		ad 34 fe	lda $fe34	                lda ACCCON      ; Save current paging state
10204	.ee78		48		pha		                pha
10205	.ee79		20 ba ed	jsr $edba	                jsr selectHAZEL ; Page in Hazel
10206	.ee7c		8a		txa		                txa             ; Pass service call number to A
10207	.ee7d		a2 0f		ldx #$0f	                ldx #$0F     ; Start at ROM 15, and always call ROM 15
10208	.ee7f		80 05		bra $ee86	                bra callServiceEntry
10209	.ee81						callServiceEntriesLoop:
10210	.ee81		3c a1 02	bit $02a1,x	                bit romInformationTable,x ;check if ROM X has a service entry
10211	.ee84		10 0b		bpl $ee91	                bpl nextROM       ;branch taken if no service entry
10212	.ee86						callServiceEntry:
10213	.ee86		20 81 e5	jsr $e581	                jsr selectROMX  ; Page in ROM X
10214	.ee89		20 03 80	jsr $8003	                jsr $8003       ; Call ROM service entry point
10215	.ee8c		aa		tax		                tax             ; X = service call result
10216	.ee8d		f0 05		beq $ee94	                beq done       ;branch taken if service call claimed
10217	.ee8f		a6 f4		ldx $f4		                ldx $F4         ; Get ROM number
10218	.ee91						nextROM:
10219	.ee91		ca		dex		                dex       ; Step down to next ROM, loop until all done
10220	.ee92		10 ed		bpl $ee81	                bpl callServiceEntriesLoop

10222	.ee94						done:
10223	.ee94		68		pla		                pla                          ; Restore paging state
10224	.ee95		20 b0 ed	jsr $edb0	                jsr selectMOSOrHAZEL
10225	.ee98		68		pla		                pla                          ; Restore current ROM
10226	.ee99		20 92 e5	jsr $e592	                jsr selectROMA
10227	.ee9c		8a		txa		                txa                          ; Pass claim/noclaim to A
10228	.ee9d		60		rts		                rts
10229							                .pend

10231							;-------------------------------------------------------------------------

10233							; OSBYTE &6B (107) - Select memory for direct access
10234							; ==============================================
10235	.ee9e						osbyte6B:                       ;ee9e
10236	.ee9e		a0 20		ldy #$20	                ldy #$20                     ; Y=&20 to change 1MHz bit
10237	.eea0		80 02		bra $eea4	                bra LEEA4

10239							;-------------------------------------------------------------------------

10241							; OSBYTE &6C (108) - Select memory for direct access
10242							; ==============================================
10243	.eea2						osbyte6C:
10244	.eea2		a0 04		ldy #$04	                ldy #ACCCON.X                ; Y=&04 to change RAM bit
10245	.eea4						LEEA4:
10246	.eea4		98		tya		                tya                          ; Clear RAM or 1MHz bit
10247	.eea5		1c 34 fe	trb $fe34	                trb ACCCON
10248	.eea8		8a		txa		                txa                          ; If X=0, exit with normal RAM/1MHz selected
10249	.eea9		f0 05		beq $eeb0	                beq LEEB0
10253	.eeab		a9 04		lda #$04	                lda #ACCCON.X                ; BUG! This should be TYA
10255	.eead		0c 34 fe	tsb $fe34	                tsb ACCCON                   ; Page in shadow RAM
10256	.eeb0						LEEB0:
10257	.eeb0		60		rts		                rts                          ; X preserved, Y=&04 or &20

10259							;-------------------------------------------------------------------------

10261							osword06Macro: .macro
10268							                .endmacro

10270							LEF1BMacro: .macro
10282							                .endmacro

10284							;-------------------------------------------------------------------------

10291							;-------------------------------------------------------------------------

10325							;-------------------------------------------------------------------------

10335							;-------------------------------------------------------------------------

10345							;-------------------------------------------------------------------------

10348							; OSBYTE
10349							; ======
10350	.eeb1						osbyteEntryPoint:
10351	.eeb1		48		pha		                pha
10352	.eeb2		08		php		                php
10353	.eeb3		78		sei		                sei
10354	.eeb4		85 ef		sta $ef		                sta originalA
10355	.eeb6		86 f0		stx $f0		                stx originalX
10356	.eeb8		84 f1		sty $f1		                sty originalY
10357	.eeba		a2 07		ldx #$07	                ldx #romServiceCallUnrecognisedOSBYTE
10358	.eebc		c9 6b		cmp #$6b	                cmp #$6B
10359	.eebe		90 40		bcc $ef00	                bcc osbyte00To6A
10360	.eec0		c9 a6		cmp #$a6	                cmp #$A6
10361	.eec2		90 09		bcc $eecd	                bcc osbyte6BToA5
10362	.eec4		c9 a6		cmp #$a6	                cmp #$A6
10363	.eec6		90 44		bcc $ef0c	                bcc handleUnrecognisedOSBYTEOrOSWORD       ;??? - wait... didn't we just do this?

10365	.eec8						osbyteA6ToFF:
10366	.eec8		18		clc		                clc
10367	.eec9						osbyteOrUSERV:      ;call OSBYTE A6+ routine if C=0; call USERV if C=1
10368	.eec9		a9 a6		lda #$a6	                lda #$A6
10369	.eecb		69 00		adc #$00	                adc #$00
10371	.eecd						osbyte6BToA5:
10372	.eecd		e9 50		sbc #$50	                sbc #$50        ;map $6b-$a5 to $1a-$54
10381	.eecf						osbyteUseTable:
10382	.eecf		0a		asl a		                asl a           ;table is of words
10383	.eed0		38		sec		                sec
10384	.eed1						callOSBYTEOrOSWORDFromTable:
10385	.eed1		84 f1		sty $f1		                sty originalY
10386	.eed3		a8		tay		                tay             ;get table offset in Y
10387	.eed4		2c 5e 02	bit $025e	                bit econetInterceptionStatus
10388	.eed7		10 07		bpl $eee0	                bpl LEEE0             ;taken if no Econet interception
10389	.eed9		8a		txa		                txa
10392	.eeda		b8		clv		                clv
10393	.eedb		20 04 eb	jsr $eb04	                jsr callNETV
10394	.eede		70 1a		bvs $eefa	                bvs LEEFA
10395	.eee0						LEEE0:
10410	.eee0		b9 6a eb	lda $eb6a,y	                lda osbyteAndOSWORDRoutineTable+1,y
10411	.eee3		85 fb		sta $fb		                sta SEIWKB
10412	.eee5		b9 69 eb	lda $eb69,y	                lda osbyteAndOSWORDRoutineTable,y
10413	.eee8		85 fa		sta $fa		                sta SEIWKA
10423	.eeea		a5 ef		lda $ef		                lda originalA
10424	.eeec		a4 f1		ldy $f1		                ldy originalY
10425	.eeee		b0 04		bcs $eef4	                bcs +
10426	.eef0		a0 00		ldy #$00	                ldy #$00            ;??? - is this actually desirable?
10427	.eef2		b2 f0		lda ($f0)	                lda (originalX)     ;fetch 0th byte of parameter block
10428	.eef4						+
10429	.eef4		38		sec		                sec
10433	.eef5		a6 f0		ldx $f0		                ldx originalX

10435							; on entry to the OSBYTE handlers, C=1, N/Z set as per X.

10437	.eef7		20 df f8	jsr $f8df	                jsr callSEIWKA
10439	.eefa						LEEFA:
10440	.eefa		6a		ror a		                ror a
10441	.eefb		28		plp		                plp
10442	.eefc		2a		rol a		                rol a
10443	.eefd		68		pla		                pla
10444	.eefe		b8		clv		                clv
10445	.eeff		60		rts		                rts

10447	.ef00						osbyte00To6A:
10448	.ef00		a0 00		ldy #$00	                ldy #$00        ;Y=0 on entry for this lot
10449	.ef02		c9 1a		cmp #$1a	                cmp #$1A        ;OSBYTE <=$19 is table-driven
10450	.ef04		90 c9		bcc $eecf	                bcc osbyteUseTable ;taken if OSBYTE $00-$19
10457	.ef06		80 04		bra $ef0c	                bra handleUnrecognisedOSBYTEOrOSWORD

10459	.ef08						handleUnrecognisedOSWORD:
10460	.ef08		a2 08		ldx #$08	                ldx #romServiceCallUnrecognisedOSWORD
10461	.ef0a		68		pla		                pla
10462	.ef0b		68		pla		                pla
10463	.ef0c						handleUnrecognisedOSBYTEOrOSWORD:
10464	.ef0c		20 72 ee	jsr $ee72	                jsr makeROMServiceCall
10466	.ef0f		d0 04		bne $ef15	                bne LEF15
10470	.ef11		a6 f0		ldx $f0		                ldx originalX
10471	.ef13		80 e5		bra $eefa	                bra LEEFA
10473	.ef15						LEF15:
10474	.ef15		28		plp		                plp
10475	.ef16		68		pla		                pla
10476	.ef17		2c 4e e3	bit $e34e	                bit valueFF
10477	.ef1a		60		rts		                rts

10480							;-------------------------------------------------------------------------

10483	.ef1b						LEF1B:
10271	.ef1b		a5 eb		lda $eb		                lda $EB
10272	.ef1d		30 41		bmi $ef60	                bmi osword06.ret
10273	.ef1f		ad 57 02	lda $0257	                lda spoolFileHandle
10274	.ef22		d0 3c		bne $ef60	                bne osword06.ret
10275	.ef24		a9 08		lda #$08	                lda #$08
10276	.ef26		25 e2		and $e2		                and $E2
10277	.ef28		d0 04		bne $ef2e	                bne LEF2E
10278	.ef2a		a9 88		lda #$88	                lda #$88
10279	.ef2c		25 bb		and $bb		                and $BB
10280	.ef2e						LEF2E:
10281	.ef2e		60		rts		                rts

10486							;-------------------------------------------------------------------------
10487							;
10488							; OSWORD 14 (&0E) Read CMOS clock [MasRef D.3-22]
10489							;
10491	.ef2f						selectTerminalROMAndOSWORD0E:
10492	.ef2f		c9 03		cmp #$03	                cmp #$03                   ;only codes 0/1/2 are valid
10493	.ef31		b0 d5		bcs $ef08	                bcs handleUnrecognisedOSWORD
10494	.ef33		20 84 f3	jsr $f384	                jsr withTerminalROM
10495	.ef36		4c b4 97	jmp $97b4	                jmp osword0E

10498							;-------------------------------------------------------------------------
10499							;
10500							; Entry point for OSWORD.
10501							;
10502							; D.3-3
10503							;
10505	.ef39						oswordEntryPoint:
10506	.ef39		48		pha		                pha             ;save OSWORD request
10507	.ef3a		08		php		                php
10508	.ef3b		78		sei		                sei
10509	.ef3c		85 ef		sta $ef		                sta originalA
10510	.ef3e		86 f0		stx $f0		                stx originalX
10511	.ef40		84 f1		sty $f1		                sty originalY
10512	.ef42		a2 08		ldx #$08	                ldx #romServiceCallUnrecognisedOSWORD
10513	.ef44		c9 e0		cmp #$e0	                cmp #$E0
10514	.ef46		b0 81		bcs $eec9	                bcs osbyteOrUSERV ;taken if OSWORD $E0 or higher -
10515							                                  ;these go via USERV

10518	.ef48		c9 10		cmp #$10	                cmp #$10
10519	.ef4a		b0 c0		bcs $ef0c	                bcs handleUnrecognisedOSBYTEOrOSWORD ;taken if unknown OSWORD

10521							; adjust request number so it's a suitable index into the
10522							; OSBYTE/OSWORD routine table.

10524	.ef4c		69 57		adc #$57	                adc #(oswordRoutineTable-osbyteAndOSWORDRoutineTable)/2
10525	.ef4e		0a		asl a		                asl a
10526	.ef4f		80 80		bra $eed1	                bra callOSBYTEOrOSWORDFromTable

10550							;-------------------------------------------------------------------------
10551							;
10552							; OSWORD 5 (&05) Read byte from I/O processor memory [MasRef D.3-9]
10553							;
10554	.ef51						osword05:
10555	.ef51		20 63 ef	jsr $ef63	                jsr getAddressFromOSWORDParameterBlock
10556	.ef54		b2 fa		lda ($fa)	                lda (SEIWKA)                 ;read byte from the address
10557	.ef56		91 f0		sta ($f0),y	                sta (originalX),y                  ;update parameter block
10558	.ef58		60		rts		                rts

10560							;-------------------------------------------------------------------------
10561							;
10562							; OSWORD 6 (&06) Write byte to I/O processor memory [MasRef D.3-9]
10563							;

10566	.ef59						osword06:
10262	.ef59		20 63 ef	jsr $ef63	                jsr getAddressFromOSWORDParameterBlock
10263	.ef5c		b1 f0		lda ($f0),y	                lda (originalX),y
10264	.ef5e		92 fa		sta ($fa)	                sta (SEIWKA)
10265	.ef60						ret:
10266	.ef60		a9 00		lda #$00	                lda #$00
10267	.ef62		60		rts		                rts

10569							;-------------------------------------------------------------------------
10570							;
10571							; Get address from OSWORD parameter block.
10572							;
10573							; entry:
10574							;
10575							; A = 0th byte of parameter block
10576							;
10577							; Y = 0
10578							;
10579							; (originalX) = parameter block
10580							;
10581							; exit:
10582							;
10583							; (SEIWKA) = address, first two bytes from parameter block
10584							;
10585							; Y = 4 (this is just convenient for both callers)
10586							;
10587	.ef63						getAddressFromOSWORDParameterBlock:
10588	.ef63		85 fa		sta $fa		                sta SEIWKA
10589	.ef65		c8		iny		                iny
10590	.ef66		b1 f0		lda ($f0),y	                lda (originalX),y
10591	.ef68		85 fb		sta $fb		                sta SEIWKA+1
10592	.ef6a		a0 04		ldy #$04	                ldy #$04
10593	.ef6c						ldxim03_rts:
10595	.ef6c		a2 03		ldx #$03	                ldx #$03
10601	.ef6e		60		rts		                rts

10603							;-------------------------------------------------------------------------
10604							;
10605							; OSBYTE 0 (&00) Display MOS version
10606							;
10607							; OSBYTE 0 has the effect of performing a BRK instruction and
10608							; displaying the MOS version number.
10609							;
10610							; Entry parameters :
10611							;
10612							; X=0 executes a BRK and displays the OS version
10613							;
10614							; X=1 executes an RTS and returns the Operating system version
10615							;
10616							; On exit : X=<OS version>
10617							;
10618							; D.2-18
10619							;
10620	.ef6f						osbyte00:                       ;ef6f
10621	.ef6f		d0 fb		bne $ef6c	                bne ldxim03_rts ;branch taken if X<>0 - return with
10622							                                 ;X=3

10624							; do a BRK and print MOS version number.

10626	.ef71		00		brk #		                brk
10627	>ef72		f7 4f 53 20 33 2e 32 30		                .text $f7,versionString,0
	>ef7a		00

10629							;-------------------------------------------------------------------------
10630							;
10631							; OSWORD 7 (&07) Generate a sound [MasRef D.3-10]
10632							;
10633	.ef7b						osword07:
10634	.ef7b		c8		iny		                iny
10635	.ef7c		b1 f0		lda ($f0),y	                lda ($F0),y
10636	.ef7e		c9 20		cmp #$20	                cmp #$20
10637	.ef80		b0 86		bcs $ef08	                bcs handleUnrecognisedOSWORD
10638	.ef82		88		dey		                dey
10639	.ef83		20 f6 ef	jsr $eff6	                jsr LEFF6
10640	.ef86		09 04		ora #$04	                ora #$04
10641	.ef88		aa		tax		                tax
10642	.ef89		90 05		bcc $ef90	                bcc LEF90
10643	.ef8b		20 5a e9	jsr $e95a	                jsr LE95A
10644	.ef8e		a0 01		ldy #$01	                ldy #$01
10645	.ef90						LEF90:
10646	.ef90		20 f6 ef	jsr $eff6	                jsr LEFF6
10647	.ef93		85 fa		sta $fa		                sta $FA
10648	.ef95		08		php		                php
10649	.ef96		a0 06		ldy #$06	                ldy #$06
10650	.ef98		b1 f0		lda ($f0),y	                lda ($F0),y
10651	.ef9a		48		pha		                pha
10652	.ef9b		a0 04		ldy #$04	                ldy #$04
10653	.ef9d		b1 f0		lda ($f0),y	                lda ($F0),y
10654	.ef9f		48		pha		                pha
10655	.efa0		a0 02		ldy #$02	                ldy #$02
10656	.efa2		b1 f0		lda ($f0),y	                lda ($F0),y
10657	.efa4		2a		rol a		                rol a
10658	.efa5		3a		dec a		                dec a
10659	.efa6		3a		dec a		                dec a
10660	.efa7		0a		asl a		                asl a
10661	.efa8		0a		asl a		                asl a
10662	.efa9		05 fa		ora $fa		                ora $FA
10663	.efab		20 a3 e9	jsr $e9a3	                jsr LE9A3
10664	.efae		90 1e		bcc $efce	                bcc LEFCE
10665	.efb0		68		pla		                pla
10666	.efb1		68		pla		                pla
10667	.efb2		28		plp		                plp

10669							                ; WTF... fall through to OSBYTE $75!

10671							;-------------------------------------------------------------------------
10672							;
10673							; OSBYTE 117 (&75) Read VDU status [MasRef D.2-32]
10674							;
10675	.efb3						osbyte75:
10676	.efb3		a6 d0		ldx $d0		                ldx STATE
10677	.efb5		60		rts		                rts

10679							;-------------------------------------------------------------------------
10680							;
10681							; VDU 7 (&07) Produce BELL sound [MasRef E.3-4]
10682							;
10683	.efb6						vdu7EntryPoint:
10684	.efb6		08		php		                php
10685	.efb7		78		sei		                sei
10686	.efb8		ad 63 02	lda $0263	                lda bellChannel
10687	.efbb		29 07		and #$07	                and #$07
10688	.efbd		09 04		ora #$04	                ora #$04
10689	.efbf		aa		tax		                tax
10690	.efc0		ad 64 02	lda $0264	                lda bellSound
10691	.efc3		20 40 ea	jsr $ea40	                jsr callINSV
10692	.efc6		ad 66 02	lda $0266	                lda bellDuration
10693	.efc9		48		pha		                pha
10694	.efca		ad 65 02	lda $0265	                lda bellFrequency
10695	.efcd		48		pha		                pha
10696	.efce						LEFCE:
10697	.efce		38		sec		                sec
10698	.efcf		7e 00 08	ror $0800,x	                ror $0800,x
10699	.efd2		68		pla		                pla
10700	.efd3		20 40 ea	jsr $ea40	                jsr callINSV
10701	.efd6		68		pla		                pla
10702	.efd7		20 40 ea	jsr $ea40	                jsr callINSV
10703	.efda		28		plp		                plp
10704	.efdb		60		rts		                rts

10706							;-------------------------------------------------------------------------
10707							;
10708							; OSWORD 8 (&08) Define a sound envelope [MasRef D.3-14]
10709							;
10710	.efdc						osword08:
10711	.efdc		3a		dec a		                dec a                   ;get index of 1-based envelope
10712	.efdd		0a		asl a		                asl a
10713	.efde		0a		asl a		                asl a
10714	.efdf		0a		asl a		                asl a
10715	.efe0		0a		asl a		                asl a                        ;index*16
10716	.efe1		09 0f		ora #$0f	                ora #$0F                     ;index*16+15
10717	.efe3		aa		tax		                tax                          ;
10718	.efe4		a9 00		lda #$00	                lda #$00                     ;
10719	.efe6		a0 10		ldy #$10	                ldy #16             ;16 bytes of envelope data get set
10720	.efe8						-
10721	.efe8		c0 0e		cpy #$0e	                cpy #$0E                     ;
10722	.efea		b0 02		bcs $efee	                bcs + ;taken if last 2 bytes of data - they get initialized to $00
10723	.efec		b1 f0		lda ($f0),y	                lda (originalX),y        ;fetch byte from OSWORD block
10724	.efee						+
10725	.efee		9d c0 08	sta $08c0,x	                sta envelope1Data,x          ;set envelope data bytes
10726	.eff1		ca		dex		                dex
10727	.eff2		88		dey		                dey
10728	.eff3		d0 f3		bne $efe8	                bne -
10729	.eff5		60		rts		                rts

10731							;-------------------------------------------------------------------------

10733	.eff6						LEFF6:
10734	.eff6		b1 f0		lda ($f0),y	                lda ($F0),y
10735	.eff8		c9 10		cmp #$10	                cmp #$10
10736	.effa		29 03		and #$03	                and #$03
10737	.effc		c8		iny		                iny
10738	.effd		60		rts		                rts

10740							;-------------------------------------------------------------------------
10741							;
10742							; OSWORD 3 (&03) Read interval timer [MasRef D.3-8]
10743							;
10744	.effe						osword03:
10745	.effe		a2 0f		ldx #$0f	                ldx #$0F
10746	.f000		80 03		bra $f005	                bra LF005

10748							;-------------------------------------------------------------------------
10749							;
10750							; OSWORD 1 (&01) Read system clock [MasRef D.3-7]
10751							;
10752	.f002						osword01:
10753	.f002		ae 83 02	ldx $0283	                ldx timerSwitchState
10754	.f005						LF005:
10755	.f005		a0 04		ldy #$04	                ldy #$04
10756	.f007						-
10757	.f007		bd 8d 02	lda $028d,x	                lda timer0-initialTimerSwitchState,x
10758	.f00a		91 f0		sta ($f0),y	                sta (originalX),y
10759	.f00c		e8		inx		                inx
10760	.f00d		88		dey		                dey
10761	.f00e		10 f7		bpl $f007	                bpl -
10762	.f010						rtsF010:
10763	.f010		60		rts		                rts

10765							;-------------------------------------------------------------------------
10766							;
10767							; OSWORD 4 (&04) Write interval timer [MasRef D.3-9]
10768							;
10769	.f011						osword04:
10770	.f011		a9 0f		lda #$0f	                lda #intervalTimer-(timer0-initialTimerSwitchState)
10771	.f013		80 06		bra $f01b	                bra copyTIMEValue

10773							;-------------------------------------------------------------------------
10774							;
10775							; OSWORD 2 (&02) Write system clock [MasRef D.3-8]
10776							;
10777	.f015						osword02:
10778	.f015		ad 83 02	lda $0283	                lda timerSwitchState
10779	.f018		49 0f		eor #$0f	                eor #$0F       ;select the timer that isn't being used
10780	.f01a		18		clc		                clc
10781	.f01b						copyTIMEValue:
10782	.f01b		48		pha		                pha
10783	.f01c		aa		tax		                tax
10784	.f01d		a0 04		ldy #$04	                ldy #$04
10785	.f01f						-
10786	.f01f		b1 f0		lda ($f0),y	                lda (originalX),y
10787	.f021		9d 8d 02	sta $028d,x	                sta timer0-initialTimerSwitchState,x
10788	.f024		e8		inx		                inx
10789	.f025		88		dey		                dey
10790	.f026		10 f7		bpl $f01f	                bpl -
10791	.f028		68		pla		                pla
10792	.f029		b0 e5		bcs $f010	                bcs rtsF010
10793	.f02b		8d 83 02	sta $0283	                sta timerSwitchState
10794	.f02e		60		rts		                rts

10796							;-------------------------------------------------------------------------
10797							;
10798							; OSWORD 0 (&00) Read line from input stream to memory [MasRef D.3-6]
10799							;
10800	.f02f						osword00:
10801	.f02f		a0 04		ldy #$04	                ldy #$04
10802	.f031						LF031:
10803	.f031		b1 f0		lda ($f0),y	                lda (originalX),y
10806	.f033		99 b1 02	sta $02b1,y	                sta osword0MaxLineLength-2,y
10807	.f036		88		dey		                dey
10808	.f037		c0 02		cpy #$02	                cpy #$02
10809	.f039		b0 f6		bcs $f031	                bcs LF031
10810	.f03b		b1 f0		lda ($f0),y	                lda ($F0),y
10811	.f03d		85 e9		sta $e9		                sta $E9
10812	.f03f		88		dey		                dey
10813	.f040		9c 69 02	stz $0269	                stz pagedModeCounter
10814	.f043		b2 f0		lda ($f0)	                lda ($F0)
10815	.f045		85 e8		sta $e8		                sta $E8
10816	.f047		58		cli		                cli
10817	.f048		80 07		bra $f051	                bra LF051

10819	.f04a						LF04A:
10820	.f04a		a9 07		lda #$07	                lda #$07
10821	.f04c						LF04C:
10822	.f04c		88		dey		                dey
10823	.f04d						LF04D:
10824	.f04d		c8		iny		                iny
10825	.f04e						LF04E:
10826	.f04e		20 ee ff	jsr $ffee	                jsr OSWRCH
10827	.f051						LF051:
10828	.f051		20 e0 ff	jsr $ffe0	                jsr OSRDCH
10829	.f054		b0 49		bcs $f09f	                bcs LF09F
10830	.f056		aa		tax		                tax
10831	.f057		ad 7c 02	lda $027c	                lda characterDestinationStatus
10832	.f05a		6a		ror a		                ror a
10833	.f05b		6a		ror a		                ror a
10834	.f05c		8a		txa		                txa
10835	.f05d		b0 05		bcs $f064	                bcs LF064
10836	.f05f		ae 6a 02	ldx $026a	                ldx vduQueueNegativeLength
10837	.f062		d0 ea		bne $f04e	                bne LF04E
10838	.f064						LF064:
10839	.f064		c9 7f		cmp #$7f	                cmp #$7F
10840	.f066		d0 07		bne $f06f	                bne LF06F
10841	.f068		c0 00		cpy #$00	                cpy #$00
10842	.f06a		f0 e5		beq $f051	                beq LF051
10843	.f06c		88		dey		                dey
10844	.f06d		80 df		bra $f04e	                bra LF04E

10846	.f06f						LF06F:
10847	.f06f		c9 15		cmp #$15	                cmp #$15
10848	.f071		d0 0d		bne $f080	                bne LF080
10849	.f073		98		tya		                tya
10850	.f074		f0 db		beq $f051	                beq LF051
10851	.f076		a9 7f		lda #$7f	                lda #$7F
10852	.f078						LF078:
10853	.f078		20 ee ff	jsr $ffee	                jsr OSWRCH
10854	.f07b		88		dey		                dey
10855	.f07c		d0 fa		bne $f078	                bne LF078
10856	.f07e		80 d1		bra $f051	                bra LF051

10858	.f080						LF080:
10859	.f080		91 e8		sta ($e8),y	                sta ($E8),y
10860	.f082		c9 0d		cmp #$0d	                cmp #$0D
10861	.f084		f0 13		beq $f099	                beq LF099
10862	.f086		cc b3 02	cpy $02b3	                cpy osword0MaxLineLength
10863	.f089		b0 bf		bcs $f04a	                bcs LF04A
10864	.f08b		cd b4 02	cmp $02b4	                cmp osword0MinASCIICharacter
10865	.f08e		90 bc		bcc $f04c	                bcc LF04C
10866	.f090		cd b5 02	cmp $02b5	                cmp osword0MaxASCIICharacter
10867	.f093		f0 b8		beq $f04d	                beq LF04D
10868	.f095		90 b6		bcc $f04d	                bcc LF04D
10869	.f097		80 b3		bra $f04c	                bra LF04C

10871	.f099						LF099:
10872	.f099		20 e7 ff	jsr $ffe7	                jsr OSNEWL
10873	.f09c		20 04 eb	jsr $eb04	                jsr callNETV
10874	.f09f						LF09F:
10875	.f09f		a5 ff		lda $ff		                lda $FF
10876	.f0a1		2a		rol a		                rol a
10877	.f0a2		60		rts		                rts

10879							;-------------------------------------------------------------------------
10880							;
10881							; OSBYTE 3 (&03) Specify output stream [MasRef D.2-19]
10882							;
10883	.f0a3						osbyte03:
10884	.f0a3		da		phx		                phx
10885	.f0a4		ae 7c 02	ldx $027c	                ldx characterDestinationStatus
10886	.f0a7		a9 0a		lda #$0a	                lda #printerDriverFX3
10887	.f0a9		20 3c e9	jsr $e93c	                jsr callPrinterDriver
10888	.f0ac		fa		plx		                plx
10889	.f0ad		a9 03		lda #$03	                lda #$03
10890	.f0af		a0 00		ldy #$00	                ldy #$00
10891	.f0b1		80 23		bra $f0d6	                bra osbyte04

10893							;-------------------------------------------------------------------------
10894							;
10895							; OSBYTE 6 (&06) Write printer ignore character [MasRef D.2-21]
10896							;
10897	.f0b3						osbyte06:                       ;f0b3
10898	.f0b3		4e 46 02	lsr $0246	                lsr noignoreState
10899	.f0b6		80 16		bra $f0ce	                bra osbyte01

10901							;-------------------------------------------------------------------------
10902							;
10903							; OSBYTE 114 (&72) Write usage of shadow memory [MasRef D.2-32]
10904							;
10905	.f0b8						osbyte72:                       ;f0b8
10906	.f0b8		a9 1f		lda #$1f	                lda #<(shadowRAMState-mosVariables+firstMOSVariableOSBYTE^osbyte01.magic)

10908							                ; $1f;<shadowRAMState^osbyte01.magic
10909	.f0ba		80 10		bra $f0cc	                bra LF0CC

10911							;-------------------------------------------------------------------------
10912							;
10913							; OSBYTE 5 (&05) Write printer driver type [MasRef D.2-20]
10914							;
10915	.f0bc						osbyte05:
10916	.f0bc						waitForPrinterDriverDormant:
10917	.f0bc		58		cli		                cli
10918	.f0bd		78		sei		                sei
10919	.f0be		24 ff		bit $ff		                bit $FF                      ;test for ESCAPE
10920	.f0c0		30 29		bmi $f0eb	                bmi rtsF0EB                  ;taken if ESCAPE pressed
10921	.f0c2		2c d1 02	bit $02d1	                bit bufferEmptyFlags+bufferPrinter
10922	.f0c5		10 f5		bpl $f0bc	                bpl waitForPrinterDriverDormant ;taken if printer driver active
10923	.f0c7		20 3c e9	jsr $e93c	                jsr callPrinterDriver    ;call with A=printerDriverFX5
10924	.f0ca		a0 00		ldy #$00	                ldy #$00
10925	.f0cc						LF0CC:
10926	.f0cc		64 f1		stz $f1		                stz $F1

10928							                ; fall through to standard MOS variable handling,
10929							                ; affecting printerDriverType

10931							;-------------------------------------------------------------------------
10932							;
10933							; OSBYTE 1 (&01) Write user flag [MasRef D.2-18]
10934							;
10935	.f0ce						osbyte01: .block
10936							; Magic value that turns 1 into the OSBYTE number for the user flag.
10937	=240						magic=firstMOSVariableOSBYTE+(userFlag-mosVariables)-1
10938	.f0ce		49 f0		eor #$f0	                eor #magic
10939	.f0d0		80 07		bra $f0d9	                bra osbyteA6X  ;jump to standard MOS variable handling
10940							                .endblock

10942							;-------------------------------------------------------------------------
10943							;
10944							; OSBYTE 12 (&0C) Write keyboard auto-repeat rate [MasRef D.2-23]
10945							;
10946	.f0d2						osbyte0C:
10947	.f0d2		f0 33		beq $f107	                beq resetKeyRepeat    ;taken if X=0

10949							;-------------------------------------------------------------------------
10950							;
10951							; OSBYTE 11 (&0B) Write keyboard auto-repeat delay [MasRef D.2-22]
10952							;
10953	.f0d4						osbyte0B:
10954	.f0d4		69 cf		adc #$cf	                adc #firstMOSVariableOSBYTE+(keyboardAutoRepeatDelay-mosVariables)+$b

10956							                ;if osbyte0C, A=$db
10957							                ;if osbyteOD, A=$dc

10959							;-------------------------------------------------------------------------
10960							;
10961							; OSBYTE 4 (&04) Enable/disable cursor editing [MasRef D.2-19]
10962							;
10963	.f0d6						osbyte04:
10964	.f0d6		18		clc		                clc
10965	.f0d7		69 e9		adc #$e9	                adc #firstMOSVariableOSBYTE+(editKeysMode-mosVariables)-4 ;-4 because OSBYTE 4

10967							                ;if originally OSBYTE 4 (&04) Enable/disable cursor
10968							                ;editing [MasRef D.2-19], it's now OSBYTE 237 (&ED)
10969							                ;Read/write cursor editing status [MasRef D.2-77].
10970							                ;
10971							                ;if originally OSBYTE 12 (&0C) Write keyboard
10972							                ;auto-repeat rate [MasRef D.2-23], it's now OSBYTE 197
10973							                ;(&C5) Read/write keyboard auto-repeat rate [MasRef
10974							                ;D.2-60].
10975							                ;
10976							                ;if originally OSBYTE 11 (&0B) Write keyboard
10977							                ;auto-repeat delay [MasRef D.2-22], it's now OSBYTE
10978							                ;196 (&C4) Read/write keyboard auto-repeat delay
10979							                ;[MasRef D.2-60].

10981	.f0d9						osbyteA6X:
10982	.f0d9		86 f0		stx $f0		                stx originalX

10984							;-------------------------------------------------------------------------
10985							;
10986							; OSBYTE 166 (&A6) Read start address of MOS variables [MasRef D.2-50]
10987							;
10988	.f0db						osbyteA6:
10989	.f0db		a8		tay		                tay             ;
10990	.f0dc		b9 90 01	lda $0190,y	                lda mosVariables-firstMOSVariableOSBYTE,y;
10991	.f0df		aa		tax		                tax             ;save old value
10992	.f0e0		25 f1		and $f1		                and originalY   ;AND old value with Y
10993	.f0e2		45 f0		eor $f0		                eor originalX   ;EOR old value with X
10994	.f0e4		99 90 01	sta $0190,y	                sta mosVariables-firstMOSVariableOSBYTE,y     ;set new variable value
10995	.f0e7		b9 91 01	lda $0191,y	                lda mosVariables-firstMOSVariableOSBYTE+1,y
10996	.f0ea		a8		tay		                tay             ;Y=contents of next location
10997	.f0eb						rtsF0EB:
10998	.f0eb		60		rts		                rts

11000							;-------------------------------------------------------------------------
11001							;
11002							; This table is used to set the serial baud rate.
11003							;
11004							;   - bit 7 is not used (always clear)
11005							;   - bit 6 is not used (always set)
11006							;   - bits 3,4,5 indicate the serial receive baud rate
11007							;   - bits 0,1,2 indicate the serial transmit baud rate
11008							;
11009							;       111 =    75 baud
11010							;       011 =   150 baud
11011							;       101 =   300 baud
11012							;       001 =  1200 baud
11013							;       110 =  2400 baud
11014							;       010 =  4800 baud
11015							;       100 =  9600 baud
11016							;       000 = 19200 baud
11017							;
11019	.f0ec						serialBaudRatesTable:
11020	>f0ec		64				                .byte %01100100;$64
11021	>f0ed		7f				                .byte %01111111;$7f
11022	>f0ee		5b				                .byte %01011011;$5b
11023	>f0ef		6d				                .byte %01101101;$6d
11024	>f0f0		49				                .byte %01001001;$49
11025	>f0f1		76				                .byte %01110110;$76
11026	>f0f2		52				                .byte %01010010;$52
11027	>f0f3		64				                .byte %01100100;$64
11028	>f0f4		40				                .byte %01000000;$40

11031							;-------------------------------------------------------------------------
11032							;
11033							; OSBYTE 19 (&13) Wait for vertical sync [MasRef D.2-26]
11034							;
11035	.f0f5						osbyte13:
11036	.f0f5		ad 40 02	lda $0240	                lda cfsTimeoutCounter
11037	.f0f8						-
11038	.f0f8		58		cli		                cli
11039	.f0f9		78		sei		                sei
11040	.f0fa		cd 40 02	cmp $0240	                cmp cfsTimeoutCounter
11041	.f0fd		f0 f9		beq $f0f8	                beq -

11043							                ; fall through to OSBYTE $a0 (!!)

11045							;-------------------------------------------------------------------------
11046							;
11047							; OSBYTE 160 (&A0) Read VDU variable value [MasRef D.2-49]
11048							;
11049	.f0ff						osbyteA0:
11050	.f0ff		bc 01 03	ldy $0301,x	                ldy vduv+1,x
11051	.f102		bd 00 03	lda $0300,x	                lda vduv+0,x
11052	.f105		aa		tax		                tax
11053	.f106		60		rts		                rts

11055							;-------------------------------------------------------------------------
11056							;
11057							; Reset key auto repeat settings to the defaults set in CMOS.
11058							;
11063	.f107						resetKeyRepeat:
11064	.f107		20 84 f3	jsr $f384	                jsr withTerminalROM
11073	.f10a		20 3a 8b	jsr $8b3a	                jsr getDefaultKeyboardAutoRepeatDelay
11074	.f10d		8c 54 02	sty $0254	                sty keyboardAutoRepeatDelay
11075	.f110		20 3f 8b	jsr $8b3f	                jsr getDefaultKeyboardAutoRepeatRate
11077	.f113		ae 55 02	ldx $0255	                ldx keyboardAutoRepeatRate
11078	.f116		8c 55 02	sty $0255	                sty keyboardAutoRepeatRate
11079	.f119		60		rts		                rts

11081							;-------------------------------------------------------------------------
11082							;
11083							; OSBYTE 18 (&12) Reset soft keys [MasRef D.2-26]
11084							;
11085							; MasRef says X undefined on exit; in fact, X=0, and scanROMs
11086							; relies on this.
11087							;
11088	.f11a						osbyte12:
11089	.f11a		38		sec		                sec
11090	.f11b		6e 84 02	ror $0284	                ror softKeyConsistencyFlag   ;mark soft keys inconsistent
11091	.f11e		a5 f4		lda $f4		                lda $F4
11092	.f120		48		pha		                pha                          ;push selected paged ROM
11093	.f121		20 7f e5	jsr $e57f	                jsr selectTerminalROMAndANDY

11095							                ; point each soft key at the 0th byte of the strings -
11096							                ; they all then have length 0.
11097	.f124		a2 10		ldx #$10	                ldx #softKeyCount
11098	.f126						-
11099	.f126		a9 22		lda #$22	                lda #<andy.softKeys.strings
11100	.f128		9d 00 80	sta $8000,x	                sta andy.softKeys.stringLSBs,x
11101	.f12b		a9 80		lda #$80	                lda #>andy.softKeys.strings
11102	.f12d		9d 11 80	sta $8011,x	                sta andy.softKeys.stringMSBs,x
11103	.f130		ca		dex		                dex
11104	.f131		10 f3		bpl $f126	                bpl -

11106	.f133		68		pla		                pla                 ;pop previously selected paged ROM
11107	.f134		20 92 e5	jsr $e592	                jsr selectROMA

11109	.f137		9c 68 02	stz $0268	                stz softKeyStringLength
11110	.f13a		9c 84 02	stz $0284	                stz softKeyConsistencyFlag   ;mark soft keys consistent
11111	.f13d		e8		inx		                inx
11112	.f13e		60		rts		                rts

11114							;-------------------------------------------------------------------------
11115							;
11116							; OSWORD 11 (&0B) Read the palette [MasRef D.3-20]
11117							;
11118	.f13f						osword0B:
11119	.f13f		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne
11120	.f142		aa		tax		                tax
11121	.f143		bd 6f 03	lda $036f,x	                lda vduv.currentPalette,x
11122	.f146						LF146:
11123	.f146		c8		iny		                iny
11124	.f147						LF147:
11125	.f147		91 f0		sta ($f0),y	                sta (originalX),y
11126	.f149		a9 00		lda #$00	                lda #$00                     ;fill last 3 bytes with 0
11127	.f14b		c0 04		cpy #$04	                cpy #$04
11128	.f14d		d0 f7		bne $f146	                bne LF146
11129	.f14f		60		rts		                rts

11131							;-------------------------------------------------------------------------
11132							;
11133							; OSWORD 9 (&09) Read pixel logical colour [MasRef D.3-19]
11134							;
11135	.f150						osword09:                                    ;f150
11136	.f150		20 ab f3	jsr $f3ab	                jsr withMOSROM               ; sF150= 20 AB F3     +s
11137	.f153		a0 03		ldy #$03	                ldy #$03
11138	.f155						-
11139	.f155		b1 f0		lda ($f0),y	                lda (originalX),y
11140	.f157		99 28 03	sta $0328,y	                sta vduv.workspace._28,y
11141	.f15a		b9 10 03	lda $0310,y	                lda $0310,y
11142	.f15d		48		pha		                pha
11143	.f15e		88		dey		                dey
11144	.f15f		10 f4		bpl $f155	                bpl -
11145	.f161		a9 28		lda #$28	                lda #VDUVariables.workspace._28
11146	.f163		20 b7 dd	jsr $ddb7	                jsr readPixelColour
11147	.f166		aa		tax		                tax
11148	.f167		a0 00		ldy #$00	                ldy #$00
11149	.f169						LF169:
11150	.f169		68		pla		                pla
11151	.f16a		99 10 03	sta $0310,y	                sta $0310,y
11152	.f16d		c8		iny		                iny
11153	.f16e		c0 04		cpy #$04	                cpy #$04
11154	.f170		d0 f7		bne $f169	                bne LF169
11155	.f172		8a		txa		                txa
11156	.f173		80 d2		bra $f147	                bra LF147

11158	.f175						osword0A:                                    ;f175
11159	.f175		20 2c e2	jsr $e22c	                jsr getSoftCharacterDefinitionAddress
11160	.f178		a0 00		ldy #$00	                ldy #$00
11161	.f17a		a5 f4		lda $f4		                lda $F4
11162	.f17c		48		pha		                pha
11163	.f17d		20 7f e5	jsr $e57f	                jsr selectTerminalROMAndANDY
11164	.f180						LF180:
11165	.f180		b1 de		lda ($de),y	                lda ($DE),y
11166	.f182		c8		iny		                iny
11167	.f183		91 f0		sta ($f0),y	                sta ($F0),y
11168	.f185		c0 08		cpy #$08	                cpy #$08
11169	.f187		d0 f7		bne $f180	                bne LF180
11170	.f189		fa		plx		                plx
11171	.f18a		4c 81 e5	jmp $e581	                jmp selectROMX

11173	.f18d						osword0C:                                    ;f18d
11174	.f18d		20 ab f3	jsr $f3ab	                jsr withMOSROM
11175	.f190		08		php		                php
11176	.f191		2d 60 03	and $0360	                and $0360
11177	.f194		aa		tax		                tax
11178	.f195		c8		iny		                iny
11179	.f196		b1 f0		lda ($f0),y	                lda ($F0),y
11180	.f198		4c 39 c6	jmp $c639	                jmp LC639

11182	.f19b						osword0D:                                    ;f19b
11183	.f19b		20 ab f3	jsr $f3ab	                jsr withMOSROM
11184	.f19e		a9 03		lda #$03	                lda #$03
11185	.f1a0		20 a5 f1	jsr $f1a5	                jsr LF1A5
11186	.f1a3		a9 07		lda #$07	                lda #$07
11187	.f1a5						LF1A5:
11188	.f1a5		48		pha		                pha
11189	.f1a6		20 b6 e2	jsr $e2b6	                jsr LE2B6
11190	.f1a9		20 df c4	jsr $c4df	                jsr LC4DF
11191	.f1ac		a2 03		ldx #$03	                ldx #$03
11192	.f1ae		68		pla		                pla
11193	.f1af		a8		tay		                tay
11194	.f1b0						LF1B0:
11195	.f1b0		bd 10 03	lda $0310,x	                lda $0310,x
11196	.f1b3		91 f0		sta ($f0),y	                sta ($F0),y
11197	.f1b5		88		dey		                dey
11198	.f1b6		ca		dex		                dex
11199	.f1b7		10 f7		bpl $f1b0	                bpl LF1B0
11200	.f1b9		60		rts		                rts

11202							; Read address of bottom of screen/top of user memory
11203							; ===================================================
11204	.f1ba						osbyte84:                     ;f1ba
11205	.f1ba		a5 d0		lda $d0		                lda STATE     ; Get VDU status
11206	.f1bc		89 10		bit #$10	                bit #STATE.isShadowMode ; If shadow screen, jump to return &8000
11207	.f1be		d0 18		bne $f1d8	                bne LF1D8
11208	.f1c0						LF1C0:
11209	.f1c0		ad 55 03	lda $0355	                lda $0355                    ; Get current screen MODE

11211							; Return start of screen for non-shadow MODE in X
11212							; -----------------------------------------------
11213	.f1c3						LF1C3:
11214	.f1c3		29 07		and #$07	                and #$07
11215	.f1c5		a8		tay		                tay
11216	.f1c6		be 68 e1	ldx $e168,y	                ldx screenMODEGroupForMODE,y ; Get screen map for supplied MODE
11217	.f1c9		bd 7e e1	lda $e17e,x	                lda startScreenAddressHighByteForScreenMODEGroup,x ; Get address top byte for this screen map
11218	.f1cc						LF1CC:
11219	.f1cc		a2 00		ldx #$00	                ldx #$00                     ; Address=&xx00
11220	.f1ce		a8		tay		                tay
11221	.f1cf		60		rts		                rts

11223							;-------------------------------------------------------------------------
11224							;
11225							; OSBYTE 133 (&85) Read top of user RAM for given mode [MasRef D.2-41]
11226							;
11227	.f1d0						osbyte85:
11228	.f1d0		8a		txa		                txa                          ; If MODE &80+n, return &8000
11229	.f1d1		30 05		bmi $f1d8	                bmi LF1D8
11230	.f1d3		ae 7f 02	ldx $027f	                ldx shadowRAMState ; If *SHADOW<>0, jump to return non-shadow address
11231	.f1d6		d0 eb		bne $f1c3	                bne LF1C3
11232	.f1d8						LF1D8:
11233	.f1d8		a9 80		lda #$80	                lda #$80                     ; Return &8000
11234	.f1da		80 f0		bra $f1cc	                bra LF1CC

11236							;-------------------------------------------------------------------------
11237							;
11238							; OSBYTE 135 (&87) Read screen mode and character at text cursor
11239							; position [MasRef D.2-42]
11240							;
11241	.f1dc						osbyte87: ;F1DC:
11242	.f1dc		20 ab f3	jsr $f3ab	                jsr withMOSROM
11243	.f1df		4c f8 dd	jmp $ddf8	                jmp readCharacterAtTextCursor

11245							;-------------------------------------------------------------------------
11246							;
11247							; OSBYTE 139 (&8B) Write Filing System options [MasRef D.2-43]
11248							;
11249	.f1e2						osbyte8B:
11250	.f1e2		0a		asl a		                asl a

11252							;-------------------------------------------------------------------------
11253							;
11254							; OSBYTE 127 (&7F) Check for end of file on an opened file [MasRef D.2-37]
11255							;
11256	.f1e3						osbyte7F:
11257	.f1e3		29 01		and #$01	                and #$01

11259							;-------------------------------------------------------------------------
11260							;
11261							; Call OSFSC. There's no entry point for this.
11262							;
11263	.f1e5						callFSCV:
11264	.f1e5		6c 1e 02	jmp ($021e)	                jmp (FSCV)

11266							;-------------------------------------------------------------------------
11267							;
11268							; OSWORD 15 (&0F) Write CMOS clock [MasRef D.3-24]
11269							;
11271	.f1e8						selectTerminalROMAndOSWORD0F:
11272	.f1e8		20 84 f3	jsr $f384	                jsr withTerminalROM       ; Page in ROM 15
11273	.f1eb		4c 56 96	jmp $9656	                jmp osword0F

11276							;-------------------------------------------------------------------------

11278							; Set TAPE/ROM extended vectors
11279							; =============================
11280	.f1ee						LF1EE:
11281	.f1ee		a2 15		ldx #$15	                ldx #$15
11282	.f1f0						LF1F0:
11283	.f1f0		bd f9 f1	lda $f1f9,x	                lda LF1FA-1,x
11284	.f1f3		9d b9 0d	sta $0db9,x	                sta ExtendedVectorAddress(FILEV)-1,x
11285	.f1f6		ca		dex		                dex
11286	.f1f7		d0 f7		bne $f1f0	                bne LF1F0
11287	.f1f9						LF1F9:
11288	.f1f9		60		rts		                rts

11290							; TAPE/ROM extended vector values
11291							; -------------------------------
11292	.f1fa						LF1FA:
11293	>f1fa		8c a0				                .word osfileTapeOrROM ; FILEV
11294	>f1fc		0f				                .byte terminalROM
11295	>f1fd		29 9f				                .word osargsTapeOrROM ; ARGSV
11296	>f1ff		0f				                .byte terminalROM
11297	>f200		ea a2				                .word bputTapeOrROM ; BPUTV
11298	>f202		0f				                .byte terminalROM
11302	>f203		4b a3				                .word bgetTapeOrROM ; BGETV
11304	>f205		0f				                .byte terminalROM
11305	>f206		6d a3				                .word osgbpbTapeOrROM ; GBPBV
11306	>f208		0f				                .byte terminalROM
11307	>f209		f9 a1				                .word osfindTapeOrROM ; FINDV
11308	>f20b		0f				                .byte terminalROM
11309	>f20c		8c 9f				                .word fscTapeOrROM  ; FSCV
11310	>f20e		0f				                .byte terminalROM

11312							;-------------------------------------------------------------------------
11313							;
11314							; OSBYTE 109 (&6D) Make temporary Filing System permanent
11315							;
11316							; MasRef D.2-30
11317							;
11318	.f20f						osbyte6D:;f20f
11319	.f20f		ae 01 df	ldx $df01	                ldx hazel.activeFS; Copy active FS to current FS
11320	.f212		8e 00 df	stx $df00	                stx hazel.currentFS
11321	.f215		ad bc 0d	lda $0dbc	                lda ExtendedVectorAddress(FILEV)+2 ; Copy XFILEV ROM to current FS ROM number
11322	.f218		8d 03 df	sta $df03	                sta hazel.currentFSROM
11323	.f21b						rtsF180:
11324	.f21b		60		rts		                rts

11326							;-------------------------------------------------------------------------
11327							;
11328							; OSBYTE 20 (&14) Restore default font definitions
11329							;
11330							; MasRef D.2-24
11331							;
11333	.f21c						osbyte14:                       ;f21c
11334	.f21c		20 84 f3	jsr $f384	                jsr withTerminalROM
11335	.f21f		4c a4 92	jmp $92a4	                jmp restoreFont32To126

11338							;-------------------------------------------------------------------------
11339							;
11340							; OSBYTE 25 (&19) Restore a group of font definitions
11341							;
11342							; MasRef D.2-28
11343							;
11344	.f222						selectTerminalROMAndOSBYTE19:                ;f222
11355	.f222		20 84 f3	jsr $f384	                jsr withTerminalROM
11356	.f225		4c a8 92	jmp $92a8	                jmp osbyte19

11358							;-------------------------------------------------------------------------

11360							; OSBYTE &16 - Increment ROM polling semaphore
11361							; ========================================
11362	.f228						osbyte16:                       ;f228
11363	.f228		ee 43 02	inc $0243	                inc romPollingSemaphore
11364	.f22b						LF2EB:
11365	.f22b		60		rts		                rts

11367							;-------------------------------------------------------------------------

11369							; OSBYTE &17 - Decrement ROM polling semaphore
11370	.f22c						osbyte17:                       ;f22c
11371							; ========================================
11372	.f22c		ce 43 02	dec $0243	                dec romPollingSemaphore
11373	.f22f		60		rts		                rts

11375							;-------------------------------------------------------------------------

11387							;-------------------------------------------------------------------------

11389							; OSBYTE &76 - Set LEDs to keyboard state
11390							; =======================================
11391	.f230						osbyte76:
11392	.f230		08		php		                php                          ; Disable IRQs
11393	.f231		78		sei		                sei
11394	.f232		a9 40		lda #$40	                lda #$40                     ; Turn on LEDs
11395	.f234		20 41 f2	jsr $f241	                jsr LF241
11396	.f237		30 05		bmi $f23e	                bmi LF23E                    ; Exit if Escape pending
11397	.f239		18		clc		                clc                          ; Call KEYV to read SHIFT and CTRL
11398	.f23a		b8		clv		                clv
11399	.f23b		20 02 f9	jsr $f902	                jsr callKEYV
11400							; Returns A.b7=CTRL, A.b6=SHIFT, MI=CTRL, VS=SHIFT
11401	.f23e						LF23E:
11402	.f23e		28		plp		                plp                          ; Restore IRQs
11403	.f23f		2a		rol a		                rol a                        ; Set Carry from A bit 7 and return
11404	.f240		60		rts		                rts
11405							; Returns A.b7=SHIFT, CS=CTRL

11407							; Set keyboard LEDs
11408							; -----------------
11409	.f241						LF241:
11410	.f241		90 09		bcc $f24c	                bcc LF24C                    ; Skip if not called from OSBYTE
11411	.f243		a0 07		ldy #$07	                ldy #$07                     ; Turn ShiftLock LED on
11412	.f245		8c 40 fe	sty $fe40	                sty systemVIA.orb
11413	.f248		88		dey		                dey                          ; Turn CapsLock LED on
11414	.f249		8c 40 fe	sty $fe40	                sty systemVIA.orb
11415	.f24c						LF24C:
11416	.f24c		24 ff		bit $ff		                bit $FF                      ; Test Escape and return
11417	.f24e		60		rts		                rts

11419							;-------------------------------------------------------------------------

11421	.f24f						osbyte9A:
11422	.f24f		8a		txa		                txa
11423	.f250						setVCONTROL:
11424	.f250		08		php		                php
11425	.f251		78		sei		                sei
11426	.f252		8d 48 02	sta $0248	                sta vcontrolRegister
11427	.f255		8d 20 fe	sta $fe20	                sta VCONTROL
11428	.f258		ad 53 02	lda $0253	                lda secondFlashColourDuration
11429	.f25b		8d 51 02	sta $0251	                sta flashCounter
11430	.f25e		28		plp		                plp
11431	.f25f		60		rts		                rts

11433							;-------------------------------------------------------------------------
11434							;
11435							; OSBYTE 155 (&9B) Write to video ULA palette register and copy
11436							;
11437	.f260						osbyte9B:
11438	.f260		8a		txa		                txa
11439	.f261						writeVPALETTE:
11440	.f261		49 07		eor #$07	                eor #$07
11441	.f263		08		php		                php
11442	.f264		78		sei		                sei
11443	.f265		8d 49 02	sta $0249	                sta vpaletteRegister
11444	.f268		8d 21 fe	sta $fe21	                sta VPALETTE
11445	.f26b		28		plp		                plp
11446	.f26c		60		rts		                rts

11448							;-------------------------------------------------------------------------

11450	.f26d						gsinitForFilenameParsing:
11451	.f26d		18		clc		                clc

11454							;-------------------------------------------------------------------------
11455							;
11456							; GSINIT
11457							;
11458							; MasRef D.10-1
11459							;
11460	.f26e						gsinitEntryPoint:
11461	.f26e		66 e4		ror $e4		                ror stringInputOptions    ;put C into bit 7
11462	.f270		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
11463	.f273		c8		iny		                iny
11464	.f274		c9 22		cmp #$22	                cmp #'"'
11465	.f276		f0 02		beq $f27a	                beq +                       ; C=1 if double quotes
11466	.f278		88		dey		                dey
11467	.f279		18		clc		                clc                         ; clear double quotes flag
11468	.f27a						+
11469	.f27a		66 e4		ror $e4		                ror stringInputOptions ; set doubleQuotes; move bit 7 into spaceNotATerminator
11470	.f27c		c9 0d		cmp #$0d	                cmp #$0D                     ; set Z if initial CR
11471	.f27e		60		rts		                rts

11473							;-------------------------------------------------------------------------
11474							;
11475							; GSREAD
11476							;
11477							; MasRef D.10-2
11478							; MasRef C.5-8 has the | syntax
11479							;
11480	.f27f						gsreadEntryPoint:
11481	.f27f		a9 01		lda #$01	                lda #stringInputOptions.goodString
11482	.f281		04 e4		tsb $e4		                tsb stringInputOptions
11483	.f283		20 9c f2	jsr $f29c	                jsr LF29C
11484	.f286		08		php		                php                          ; save flags
11485	.f287		46 e4		lsr $e4		                lsr stringInputOptions       ; move goodString into C
11486	.f289		90 04		bcc $f28f	                bcc badStringError           ; branch taken if bad string
11487	.f28b		26 e4		rol $e4		                rol stringInputOptions       ; reinstate goodString
11488	.f28d		28		plp		                plp                          ; restore flags
11489	.f28e		60		rts		                rts                          ;

11491	.f28f						badStringError:
11492	.f28f		00		brk #		                brk                          ;
11493	>f290		fd 42 61 64 20 73 74 72		                .text $fd,"Bad string",0
	>f298		69 6e 67 00
11494	.f29c						LF29C:
11495	.f29c		18		clc		                clc                          ; last char not !
11496	.f29d						LF29D:
11497							                ; C=1 at this point if |! was the last sequence seen.
11498	.f29d		64 e5		stz $e5		                stz stringInputPlingFlag
11499	.f29f		66 e5		ror $e5		                ror stringInputPlingFlag     ; set ! flag as required
11500	.f2a1		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11501	.f2a3		c9 0d		cmp #$0d	                cmp #13                      ;EOL?
11502	.f2a5		d0 09		bne $f2b0	                bne notRETURN                ;taken if not EOL
11503	.f2a7		24 e4		bit $e4		                bit stringInputOptions
11504	.f2a9		10 20		bpl $f2cb	                bpl finishedString           ;taken if !doubleQuotes
11505	.f2ab						badString:
11506	.f2ab		a9 01		lda #$01	                lda #stringInputOptions.goodString
11507	.f2ad		14 e4		trb $e4		                trb stringInputOptions
11508	.f2af		60		rts		                rts

11510	.f2b0						notRETURN:
11511	.f2b0		c9 20		cmp #$20	                cmp #' '
11512	.f2b2		90 f7		bcc $f2ab	                bcc badString ;taken if unprintable control char
11513	.f2b4		d0 06		bne $f2bc	                bne notSPACE
11514	.f2b6		24 e4		bit $e4		                bit stringInputOptions ;N=doubleQuotes, V=spaceNotATerminator
11515	.f2b8		30 3e		bmi $f2f8	                bmi finishUpReadClearV ;taken if quoted
11516	.f2ba		50 0f		bvc $f2cb	                bvc finishedString ;taken if space is a terminator
11517	.f2bc						notSPACE:
11518	.f2bc		c9 22		cmp #$22	                cmp #'"'
11519	.f2be		d0 10		bne $f2d0	                bne notDOUBLEQUOTE         ;taken if not quotes
11520	.f2c0		24 e4		bit $e4		                bit stringInputOptions ;N=doubleQuotes, V=spaceNotATerminator
11521	.f2c2		10 34		bpl $f2f8	                bpl finishUpReadClearV ;taken if not double quotes
11522	.f2c4		c8		iny		                iny
11523	.f2c5		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11524	.f2c7		c9 22		cmp #$22	                cmp #'"'
11525	.f2c9		f0 2d		beq $f2f8	                beq finishUpReadClearV       ;taken if quotes
11526	.f2cb						finishedString:
11527	.f2cb		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
11528	.f2ce		38		sec		                sec
11529	.f2cf		60		rts		                rts

11531	.f2d0						notDOUBLEQUOTE:
11532	.f2d0		c9 7c		cmp #$7c	                cmp #'|'
11533	.f2d2		d0 24		bne $f2f8	                bne finishUpReadClearV       ;taken if not |
11534	.f2d4		c8		iny		                iny                          ;skip |
11535	.f2d5		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11536	.f2d7		c9 7c		cmp #$7c	                cmp #'|'
11537	.f2d9		f0 1d		beq $f2f8	                beq finishUpReadClearV ;branch taken if "||" - literal |
11538	.f2db		c9 22		cmp #$22	                cmp #'"'
11539	.f2dd		f0 19		beq $f2f8	                beq finishUpReadClearV ;branch taken if "|\"" - literal "
11540	.f2df		c9 21		cmp #$21	                cmp #'!'
11541	.f2e1		d0 03		bne $f2e6	                bne LF2E6                    ;taken if not "|!"

11543							                ; Handle |! - ASCII 128-255
11544	.f2e3		c8		iny		                iny                          ;skip !
11545	.f2e4		80 b7		bra $f29d	                bra LF29D

11547	.f2e6						LF2E6:
11548	.f2e6		c9 20		cmp #$20	                cmp #' '
11549	.f2e8		90 c1		bcc $f2ab	                bcc badString ;taken if | followed by a non-printable char
11550	.f2ea		c9 3f		cmp #$3f	                cmp #'?'
11551	.f2ec		f0 08		beq $f2f6	                beq ascii127                 ;taken if "|?" - CHR$127
11552	.f2ee		20 36 f3	jsr $f336	                jsr implementCTRLCodes
11553	.f2f1		2c 4e e3	bit $e34e	                bit valueFF
11554	.f2f4		80 03		bra $f2f9	                bra LF2F9

11556	.f2f6						ascii127:
11557	.f2f6		a9 7f		lda #$7f	                lda #$7F
11558	.f2f8						finishUpReadClearV:
11559	.f2f8		b8		clv		                clv
11560	.f2f9						LF2F9:
11561	.f2f9		c8		iny		                iny
11562	.f2fa		05 e5		ora $e5		                ora stringInputPlingFlag ;if it was a |! char, set bit 7
11563	.f2fc		18		clc		                clc
11564	.f2fd		60		rts		                rts

11566							;-------------------------------------------------------------------------

11568	.f2fe						incAndSkipSpaces:
11569	.f2fe		c8		iny		                iny
11570	.f2ff						skipSpacesAndCheckForCRInStringInput:
11571	.f2ff		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11572	.f301		c9 20		cmp #$20	                cmp #' '
11573	.f303		f0 f9		beq $f2fe	                beq incAndSkipSpaces
11574	.f305						checkForCR:
11575	.f305		c9 0d		cmp #$0d	                cmp #13
11576	.f307		60		rts		                rts

11578							;-------------------------------------------------------------------------

11580	.f308						LF308:
11581	.f308		90 f5		bcc $f2ff	                bcc skipSpacesAndCheckForCRInStringInput
11582	.f30a						LF30A:
11583	.f30a		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
11584	.f30d		c9 2c		cmp #$2c	                cmp #','
11585	.f30f		d0 f4		bne $f305	                bne checkForCR
11586	.f311		c8		iny		                iny
11587	.f312		60		rts		                rts

11589							;-------------------------------------------------------------------------

11682							;-------------------------------------------------------------------------
11683							;
11684							; Modify character in A as if the SHIFT key is being pressed.
11685							;

11687	.f313						implementShift:

11690	.f313		c9 30		cmp #$30	                cmp #'0'
11691	.f315		f0 1e		beq $f335	                beq gotShiftedChar           ;taken if SHIFT+0 - no change
11692	.f317		c9 40		cmp #$40	                cmp #$40
11693	.f319		f0 1a		beq $f335	                beq gotShiftedChar           ;taken if SHIFT+@ - no change
11694	.f31b		90 12		bcc $f32f	                bcc shiftMaybeNumber ;taken if probably a "number" (ASCII 33-63)
11695	.f31d		c9 7f		cmp #$7f	                cmp #$7F
11696	.f31f		f0 14		beq $f335	                beq gotShiftedChar  ;taken if SHIFT+DELETE - no change
11697	.f321		b0 10		bcs $f333	                bcs shiftNumber     ;taken if SHIFT+CHR$>=127 - ???
11698	.f323						flipBitsForShift:
11699	.f323		49 30		eor #$30	                eor #$30                     ;
11700	.f325		c9 6f		cmp #$6f	                cmp #$6F                     ;
11701	.f327		f0 04		beq $f32d	                beq +                        ;taken if originally _
11702	.f329		c9 50		cmp #$50	                cmp #$50                     ;
11703	.f32b		d0 02		bne $f32f	                bne shiftMaybeNumber         ;taken if not originally GBP
11704	.f32d						+
11705	.f32d		49 1f		eor #$1f	                eor #$1F                     ;extra step for GBP/_ toggle
11706	.f32f						shiftMaybeNumber:
11707	.f32f		c9 21		cmp #$21	                cmp #' '+1
11708	.f331		90 02		bcc $f335	                bcc gotShiftedChar         ;taken if non-printing char
11709	.f333						shiftNumber:
11710	.f333		49 10		eor #$10	                eor #$10                     ;
11711	.f335						gotShiftedChar:
11712	.f335		60		rts		                rts

11760							;-------------------------------------------------------------------------
11761							;
11762							; See MasRef C.5-8
11763							;
11764							;
11765	.f336						implementCTRLCodes:

11768	.f336		c9 7f		cmp #$7f	                cmp #$7F
11769	.f338		f0 0e		beq $f348	                beq gotCtrlChar
11770	.f33a		b0 e7		bcs $f323	                bcs flipBitsForShift         ;taken if CHR$>=128
11771	.f33c		c9 60		cmp #$60	                cmp #$60
11772	.f33e		d0 02		bne $f342	                bne +                        ;taken if not GBP
11773	.f340		a9 5f		lda #$5f	                lda #'_'                     ;GBP and _ are equivalent
11774	.f342						+
11775	.f342		c9 40		cmp #$40	                cmp #$40                     ;
11776	.f344		90 02		bcc $f348	                bcc gotCtrlChar              ;taken if CHR$<64
11777	.f346		29 1f		and #$1f	                and #$1F                     ;|@=0, |A=1, |a=1, etc.
11778	.f348						gotCtrlChar:
11779	.f348		60		rts		                rts

11813							;-------------------------------------------------------------------------

11819	.f349						osbyte247EntryPoint:
11820	.f349		ad 87 02	lda $0287	                lda breakVectorByte0
11821	.f34c		49 4c		eor #$4c	                eor #$4C                     ; JMP abs
11822	.f34e		d0 13		bne $f363	                bne rtsF363
11827	.f350		4c 87 02	jmp $0287	                jmp breakVectorByte0

11837							;-------------------------------------------------------------------------
11838							;
11839							; OSBYTE 144 (&90)
11840							; Set vertical screen shift and interlace
11841							;
11842							; MasRef D.2-44
11843							;
11844	.f353						osbyte90:
11845	.f353		ad 90 02	lda $0290	                lda tvOffset
11846	.f356		8e 90 02	stx $0290	                stx tvOffset
11847	.f359		aa		tax		                tax
11848	.f35a		98		tya		                tya
11849	.f35b		29 01		and #$01	                and #$01
11850	.f35d		ac 91 02	ldy $0291	                ldy tvInterlace
11851	.f360		8d 91 02	sta $0291	                sta tvInterlace
11852	.f363						rtsF363:
11853	.f363		60		rts		                rts

11855							;-------------------------------------------------------------------------
11856							;
11857							; OSBYTE 149 (&95) - write to JIM
11858							;
11859							; MasRef D.2-45
11860							;
11861	.f364						osbyte95:
11862	.f364		98		tya		                tya
11863	.f365		9d 00 fd	sta $fd00,x	                sta $FD00,x
11864	.f368		60		rts		                rts

11866							;-------------------------------------------------------------------------
11867							;
11868							; OSBYTE 151 (&97) - write to SHEILA
11869							;
11870							; MasRef D.2-45
11871							;
11872	.f369						osbyte97:
11873	.f369		98		tya		                tya
11874	.f36a		9d 00 fe	sta $fe00,x	                sta $FE00,x
11875	.f36d		60		rts		                rts

11877							;-------------------------------------------------------------------------
11878							;
11879							; OSBYTE 147 (&93) - write to FRED
11880							;
11881							; MasRef D.2-45
11882							;
11883	.f36e						osbyte93:
11884	.f36e		98		tya		                tya
11885	.f36f		9d 00 fc	sta $fc00,x	                sta $FC00,x
11886	.f372		60		rts		                rts

11888							;-------------------------------------------------------------------------
11889							;
11890							; *SHUT [MasRef G.5-10]
11891							;
11892	.f373						starSHUT:
11893	.f373		a2 26		ldx #$26	                ldx #romServiceCallCloseAllOpenFiles
11894	.f375		4c 72 ee	jmp $ee72	                jmp makeROMServiceCall

11896							;-------------------------------------------------------------------------
11897							;
11898							; Return thunk used by withTerminalROM.
11899							;
11900							; On entry here, the old value of $f4 is at the top of the stack.
11901							;
11902	.f378						withTerminalROMReturnThunk:
11903	.f378		08		php		                php                          ; S=[p; old ROMSEL]
11904	.f379		48		pha		                pha                          ; S=[a; p; old ROMSEL]
11905	.f37a		da		phx		                phx                          ; S=[x; a; p; old ROMSEL]
11906	.f37b		ba		tsx		                tsx
11907	.f37c		bd 04 01	lda $0104,x	                lda $0104,x                  ; get old ROMSEL
11908	.f37f		20 92 e5	jsr $e592	                jsr selectROMA               ; re-select old ROM
11909	.f382		80 5d		bra $f3e1	                bra returnThunkSuffix

11911							;-------------------------------------------------------------------------
11912							;
11913							; Select the Terminal ROM. Rearrange the stack so that the original
11914							; ROM is re-selected when withTerminalROM's caller itself returns.
11915							;
11916	.f384						withTerminalROM:
11926	.f384		48		pha		                pha                          ; S=[A]
11927	.f385		48		pha		                pha                          ; S=[A; A]
11928	.f386		48		pha		                pha                          ; S=[A; A; A]
11929	.f387		08		php		                php                          ; S=[P; A; A; A]
11930	.f388		48		pha		                pha                          ; S=[A; P; A; A; A]
11931	.f389		da		phx		                phx                          ; S=[X; A; P; A; A; A]
11932	.f38a		ba		tsx		                tsx                          ; S=[X; A; P; A; A; A; RL; RH]
11933	.f38b		bd 07 01	lda $0107,x	                lda $0107,x                  ; get RL
11934	.f38e		9d 04 01	sta $0104,x	                sta $0104,x                  ; overwrite placeholder A
11935	.f391		bd 08 01	lda $0108,x	                lda $0108,x                  ; get RH
11936	.f394		9d 05 01	sta $0105,x	                sta $0105,x                  ; overwrite placeholder A
11937	.f397		a5 f4		lda $f4		                lda $F4                      ; get ROMSEL
11938	.f399		9d 08 01	sta $0108,x	                sta $0108,x                  ; overwrite RH

11940							                ; put return thunk in the right spot
11941	.f39c		a9 f3		lda #$f3	                lda #>withTerminalROMReturnThunk-1
11942	.f39e		9d 07 01	sta $0107,x	                sta $0107,x
11943	.f3a1		a9 77		lda #$77	                lda #<withTerminalROMReturnThunk-1
11944	.f3a3		9d 06 01	sta $0106,x	                sta $0106,x
11946	.f3a6		20 90 e5	jsr $e590	                jsr selectTerminalROM
11947	.f3a9		80 28		bra $f3d3	                bra plx_pla_plp_rts

11949							;-------------------------------------------------------------------------
11950							;
11951							; Select the MOS ROM (i.e., no HAZEL). Rearrange the stack so that the
11952							; original HAZEL state is restored when withMOSROM's caller itself
11953							; returns.
11954							;
11955	.f3ab						withMOSROM:
11966	.f3ab		48		pha		                pha                          ; S=[A]
11967	.f3ac		48		pha		                pha                          ; S=[A; A]
11968	.f3ad		48		pha		                pha                          ; S=[A; A; A]
11969	.f3ae		08		php		                php                          ; S=[P; A; A; A]
11970	.f3af		48		pha		                pha                          ; S=[A; P; A; A; A]
11971	.f3b0		da		phx		                phx                          ; S=[X; A; P; A; A; A]
11972	.f3b1		ba		tsx		                tsx                          ; S=[X; A; P; A; A; A; RL; RH]
11973	.f3b2		bd 08 01	lda $0108,x	                lda $0108,x                  ; get RH
11974	.f3b5		9d 05 01	sta $0105,x	                sta $0105,x                  ; overwrite placeholder A
11975	.f3b8		bd 07 01	lda $0107,x	                lda $0107,x                  ; get RL
11976	.f3bb		9d 04 01	sta $0104,x	                sta $0104,x                  ; overwrite placeholder A

11978							                ; put return thunk in the right spot
11979	.f3be		a9 f3		lda #$f3	                lda #>withMOSROMReturnThunk-1
11980	.f3c0		9d 07 01	sta $0107,x	                sta $0107,x
11981	.f3c3		a9 d6		lda #$d6	                lda #<withMOSROMReturnThunk-1
11982	.f3c5		9d 06 01	sta $0106,x	                sta $0106,x

11984	.f3c8		ad 34 fe	lda $fe34	                lda ACCCON                   ; get ACCCON
11985	.f3cb		9d 08 01	sta $0108,x	                sta $0108,x                  ; overwrite RH
11986	.f3ce		a9 08		lda #$08	                lda #ACCCON.Y
11987	.f3d0		1c 34 fe	trb $fe34	                trb ACCCON
11988							                ; HAZEL off
11990	.f3d3						plx_pla_plp_rts:
11991							                ; S=[X; A; P; RL; RH; thunkRL; thunkRH; old ACCCON/ROMSEL]
11992	.f3d3		fa		plx		                plx
11993	.f3d4		68		pla		                pla
11994	.f3d5		28		plp		                plp
11995	.f3d6		60		rts		                rts

11997	.f3d7						withMOSROMReturnThunk:
11998	.f3d7		08		php		                php                          ; S=[P]
11999	.f3d8		48		pha		                pha                          ; S=[A; P]
12000	.f3d9		da		phx		                phx                          ; S=[X; A; P]
12001	.f3da		ba		tsx		                tsx                          ; S=[X; A; P; old ACCCON]
12002	.f3db		bd 04 01	lda $0104,x	                lda $0104,x                  ; get old ACCCON
12003	.f3de		20 b0 ed	jsr $edb0	                jsr selectMOSOrHAZEL         ; re-select old HAZEL state
12004	.f3e1						returnThunkSuffix:
12005							                ; double up P, as that's the easiest way of ending up
12006							                ; discarding the TOS without affecting the flags.
12007	.f3e1		bd 03 01	lda $0103,x	                lda $0103,x
12008	.f3e4		9d 04 01	sta $0104,x	                sta $0104,x
12009	.f3e7		fa		plx		                plx
12010	.f3e8		68		pla		                pla
12011	.f3e9		28		plp		                plp
12012	.f3ea		28		plp		                plp
12013	.f3eb		60		rts		                rts

12015							;-------------------------------------------------------------------------
12016							;
12017							; Clear ACCCON TST bit (paging in I/O for reads, rather than ROM, at
12018							; $fc00...$feff), and restore it on exit from the current routine.
12019							;

12045							;-------------------------------------------------------------------------
12046							;
12047							; Sort out stack for one of the withXXX routines, that set up some
12048							; state and then automatically restore the original state on exit from
12049							; the calling routine.
12050							;

12070							;-------------------------------------------------------------------------

12072	.f3ec						vduChrEntryPoint:
12073	.f3ec		20 ab f3	jsr $f3ab	                jsr withMOSROM
12074	.f3ef		a6 f4		ldx $f4		                ldx $F4
12075	.f3f1		da		phx		                phx
12076	.f3f2		20 7f e5	jsr $e57f	                jsr selectTerminalROMAndANDY
12077	.f3f5		20 27 c0	jsr $c027	                jsr outputToVDU
12078	.f3f8		fa		plx		                plx
12079	.f3f9		4c 81 e5	jmp $e581	                jmp selectROMX

12081							;-------------------------------------------------------------------------
12082							;
12083							; OSRDSC [MasRef D.6-1]
12084							;
12085	.f3fc						osrdscEntryPoint:
12086	.f3fc		20 ab f3	jsr $f3ab	                jsr withMOSROM
12087	.f3ff		4c 18 c0	jmp $c018	                jmp LC018

12089							;-------------------------------------------------------------------------
12090							;
12091							; OSWRSC [MasRef D.8-1]
12092							;
12093	.f402						oswrscEntryPoint:
12094	.f402		20 ab f3	jsr $f3ab	                jsr withMOSROM
12095	.f405		4c 5f db	jmp $db5f	                jmp oswrscCode

12097							;-------------------------------------------------------------------------

12099	.f408						starRunBOOT:
12100	>f408		2f 21 42 4f 4f 54 0d		                .text "/!BOOT",13

12102							;-------------------------------------------------------------------------

12105							                .include "sound_stuff.s65"

:19	;******  Processing file: src/sound_stuff.s65

1							; Table to convert channel number to the bits required by the chip
2	.f40f						soundParameterTable:
3	>f40f		e0 c0 a0 80			                .byte $e0,$c0,$a0,$80

5							;-------------------------------------------------------------------------

7	.f413						LF413:
8	.f413		4c 20 f5	jmp $f520	                jmp LF520

10							;-------------------------------------------------------------------------

15	.f416						LF416:
17	.f416		a2 00		ldx #$00	                ldx #$00
18	.f418		ad 38 08	lda $0838	                lda $0838
19	.f41b		d0 04		bne $f421	                bne LF421
20	.f41d		e8		inx		                inx
21	.f41e		ce 38 08	dec $0838	                dec $0838
22	.f421						LF421:
23	.f421		8e 3b 08	stx $083b	                stx $083B
24	.f424		a2 08		ldx #$08	                ldx #$08
25	.f426						LF426:
26	.f426		ca		dex		                dex
27	.f427		bd 00 08	lda $0800,x	                lda $0800,x
28	.f42a		f0 e7		beq $f413	                beq LF413
29	.f42c		bd ce 02	lda $02ce,x	                lda bufferEmptyFlags,x
30	.f42f		30 05		bmi $f436	                bmi LF436
31	.f431		bd 18 08	lda $0818,x	                lda $0818,x
32	.f434		d0 08		bne $f43e	                bne LF43E
33	.f436						LF436:
34	.f436		20 28 f5	jsr $f528	                jsr LF528
35	.f439		bd 18 08	lda $0818,x	                lda $0818,x
36	.f43c		f0 12		beq $f450	                beq LF450
37	.f43e						LF43E:
38	.f43e		1a		inc a		                inc a
39	.f43f		f0 12		beq $f453	                beq LF453
40	.f441		de 1c 08	dec $081c,x	                dec $081C,x
41	.f444		d0 0d		bne $f453	                bne LF453
42	.f446		a9 05		lda #$05	                lda #$05
43	.f448		9d 1c 08	sta $081c,x	                sta $081C,x
44	.f44b		de 18 08	dec $0818,x	                dec $0818,x
45	.f44e		d0 03		bne $f453	                bne LF453
46	.f450						LF450:
47	.f450		20 28 f5	jsr $f528	                jsr LF528
48	.f453						LF453:
49	.f453		bd 24 08	lda $0824,x	                lda $0824,x
50	.f456		f0 05		beq $f45d	                beq LF45D
51	.f458		de 24 08	dec $0824,x	                dec $0824,x
52	.f45b		d0 b6		bne $f413	                bne LF413
53	.f45d						LF45D:
54	.f45d		bc 20 08	ldy $0820,x	                ldy $0820,x
55	.f460		c0 ff		cpy #$ff	                cpy #$FF
56	.f462		f0 af		beq $f413	                beq LF413
57	.f464		b9 c0 08	lda $08c0,y	                lda $08C0,y
58	.f467		29 7f		and #$7f	                and #$7F
59	.f469		9d 24 08	sta $0824,x	                sta $0824,x
60	.f46c		bd 08 08	lda $0808,x	                lda $0808,x
61	.f46f		c9 04		cmp #$04	                cmp #$04
62	.f471		f0 5d		beq $f4d0	                beq LF4D0
63	.f473		18		clc		                clc
64	.f474		7d 20 08	adc $0820,x	                adc $0820,x
65	.f477		a8		tay		                tay
66	.f478		b9 cb 08	lda $08cb,y	                lda $08CB,y
67	.f47b		38		sec		                sec
68	.f47c		e9 3f		sbc #$3f	                sbc #$3F
69	.f47e		8d 3a 08	sta $083a	                sta $083A
70	.f481		b9 c7 08	lda $08c7,y	                lda $08C7,y
71	.f484		8d 39 08	sta $0839	                sta $0839
72	.f487		bd 04 08	lda $0804,x	                lda $0804,x
73	.f48a						LF48A:
74	.f48a		48		pha		                pha
75	.f48b		18		clc		                clc
76	.f48c		6d 39 08	adc $0839	                adc $0839
77	.f48f		50 07		bvc $f498	                bvc LF498
78	.f491		2a		rol a		                rol a
79	.f492		a9 3f		lda #$3f	                lda #$3F
80	.f494		b0 02		bcs $f498	                bcs LF498
81	.f496		49 ff		eor #$ff	                eor #$FF
82	.f498						LF498:
83	.f498		9d 04 08	sta $0804,x	                sta $0804,x
84	.f49b		2a		rol a		                rol a
85	.f49c		5d 04 08	eor $0804,x	                eor $0804,x
86	.f49f		10 09		bpl $f4aa	                bpl LF4AA
87	.f4a1		a9 3f		lda #$3f	                lda #$3F
88	.f4a3		90 02		bcc $f4a7	                bcc LF4A7
89	.f4a5		49 ff		eor #$ff	                eor #$FF
90	.f4a7						LF4A7:
91	.f4a7		9d 04 08	sta $0804,x	                sta $0804,x
92	.f4aa						LF4AA:
93	.f4aa		ce 39 08	dec $0839	                dec $0839
94	.f4ad		bd 04 08	lda $0804,x	                lda $0804,x
95	.f4b0		38		sec		                sec
96	.f4b1		ed 3a 08	sbc $083a	                sbc $083A
97	.f4b4		4d 39 08	eor $0839	                eor $0839
98	.f4b7		30 09		bmi $f4c2	                bmi LF4C2
99	.f4b9		ad 3a 08	lda $083a	                lda $083A
100	.f4bc		9d 04 08	sta $0804,x	                sta $0804,x
101	.f4bf		fe 08 08	inc $0808,x	                inc $0808,x
102	.f4c2						LF4C2:
103	.f4c2		68		pla		                pla
104	.f4c3		5d 04 08	eor $0804,x	                eor $0804,x
105	.f4c6		29 f8		and #$f8	                and #$F8
106	.f4c8		f0 06		beq $f4d0	                beq LF4D0
107	.f4ca		bd 04 08	lda $0804,x	                lda $0804,x
108	.f4cd		20 99 f5	jsr $f599	                jsr LF599
109	.f4d0						LF4D0:
110	.f4d0		bd 10 08	lda $0810,x	                lda $0810,x
111	.f4d3		c9 03		cmp #$03	                cmp #$03
112	.f4d5		f0 49		beq $f520	                beq LF520
113	.f4d7		bd 14 08	lda $0814,x	                lda $0814,x
114	.f4da		d0 28		bne $f504	                bne LF504
115	.f4dc		fe 10 08	inc $0810,x	                inc $0810,x
116	.f4df		bd 10 08	lda $0810,x	                lda $0810,x
117	.f4e2		c9 03		cmp #$03	                cmp #$03
118	.f4e4		d0 0e		bne $f4f4	                bne LF4F4
119	.f4e6		bc 20 08	ldy $0820,x	                ldy $0820,x
120	.f4e9		b9 c0 08	lda $08c0,y	                lda $08C0,y
121	.f4ec		30 32		bmi $f520	                bmi LF520
122	.f4ee		9e 30 08	stz $0830,x	                stz $0830,x
123	.f4f1		9e 10 08	stz $0810,x	                stz $0810,x
124	.f4f4						LF4F4:
125	.f4f4		bd 10 08	lda $0810,x	                lda $0810,x
126	.f4f7		18		clc		                clc
127	.f4f8		7d 20 08	adc $0820,x	                adc $0820,x
128	.f4fb		a8		tay		                tay
129	.f4fc		b9 c4 08	lda $08c4,y	                lda $08C4,y
130	.f4ff		9d 14 08	sta $0814,x	                sta $0814,x
131	.f502		f0 1c		beq $f520	                beq LF520
132	.f504						LF504:
133	.f504		de 14 08	dec $0814,x	                dec $0814,x
134	.f507		bd 20 08	lda $0820,x	                lda $0820,x
135	.f50a		18		clc		                clc
136	.f50b		7d 10 08	adc $0810,x	                adc $0810,x
137	.f50e		a8		tay		                tay
138	.f50f		b9 c1 08	lda $08c1,y	                lda $08C1,y
139	.f512		18		clc		                clc
140	.f513		7d 30 08	adc $0830,x	                adc $0830,x
141	.f516		9d 30 08	sta $0830,x	                sta $0830,x
142	.f519		18		clc		                clc
143	.f51a		7d 0c 08	adc $080c,x	                adc $080C,x
144	.f51d		20 d5 f5	jsr $f5d5	                jsr LF5D5
145	.f520						LF520:
146	.f520		e0 04		cpx #$04	                cpx #$04
147	.f522		f0 03		beq $f527	                beq LF527
148	.f524		4c 26 f4	jmp $f426	                jmp LF426

150	.f527						LF527:
151	.f527		60		rts		                rts

153	.f528						LF528:
154	.f528		bd 08 08	lda $0808,x	                lda $0808,x
155	.f52b		c9 04		cmp #$04	                cmp #$04
156	.f52d		f0 05		beq $f534	                beq LF534
157	.f52f		a9 03		lda #$03	                lda #$03
158	.f531		9d 08 08	sta $0808,x	                sta $0808,x
159	.f534						LF534:
160	.f534		bd ce 02	lda $02ce,x	                lda bufferEmptyFlags,x
161	.f537		f0 14		beq $f54d	                beq LF54D
162	.f539		a9 00		lda #$00	                lda #$00
163	.f53b		9e ce 02	stz $02ce,x	                stz bufferEmptyFlags,x
164	.f53e		a0 04		ldy #$04	                ldy #$04
165	.f540						LF540:
166	.f540		99 2b 08	sta $082b,y	                sta $082B,y
167	.f543		88		dey		                dey
168	.f544		d0 fa		bne $f540	                bne LF540
169	.f546		9e 18 08	stz $0818,x	                stz $0818,x
170	.f549		88		dey		                dey
171	.f54a		8c 38 08	sty $0838	                sty $0838
172	.f54d						LF54D:
173	.f54d		bd 28 08	lda $0828,x	                lda $0828,x
174	.f550		f0 60		beq $f5b2	                beq LF5B2
175	.f552		ad 3b 08	lda $083b	                lda $083B
176	.f555		f0 34		beq $f58b	                beq LF58B
177	.f557		9e 28 08	stz $0828,x	                stz $0828,x
178	.f55a						LF55A:
179	.f55a		4c 85 f6	jmp $f685	                jmp LF685

181							;-------------------------------------------------------------------------
182							;
183							; Clear a buffer that's a sound channel.
184							;
185							; https://tobylobster.github.io/mos/mos/S-s16.html#SP7
186							;
187							; Entry:
188							;
189							; X = buffer number (must be a sound channel buffer)
190							;
196	.f55d						clearSoundChannelBuffer:
198							                .block
199	.f55d		20 92 f5	jsr $f592	                jsr LF592
200	.f560		98		tya		                tya
201	.f561		9e 18 08	stz $0818,x	                stz $0818,x
202	.f564		9e ce 02	stz $02ce,x	                stz bufferEmptyFlags,x
203	.f567		9e 00 08	stz $0800,x	                stz $0800,x
204	.f56a		a0 03		ldy #$03	                ldy #$03
205	.f56c						loop:
206	.f56c		99 2c 08	sta $082c,y	                sta $082C,y
207	.f56f		88		dey		                dey
208	.f570		10 fa		bpl $f56c	                bpl loop
209	.f572		8c 38 08	sty $0838	                sty $0838
210	.f575		80 63		bra $f5da	                bra LF5DA
211							                .endblock

213							;-------------------------------------------------------------------------

215	.f577						LF577:
216	.f577		08		php		                php
217	.f578		78		sei		                sei
218	.f579		bd 08 08	lda $0808,x	                lda $0808,x
219	.f57c		c9 04		cmp #$04	                cmp #$04
220	.f57e		d0 0a		bne $f58a	                bne LF58A
221	.f580		20 ef e9	jsr $e9ef	                jsr osbyte98
222	.f583		90 05		bcc $f58a	                bcc LF58A
223	.f585		a9 00		lda #$00	                lda #$00
224	.f587		9e 00 08	stz $0800,x	                stz $0800,x
225	.f58a						LF58A:
226	.f58a		28		plp		                plp
227	.f58b						LF58B:
228	.f58b		bc 20 08	ldy $0820,x	                ldy $0820,x
229	.f58e		c0 ff		cpy #$ff	                cpy #$FF
230	.f590		d0 72		bne $f604	                bne LF604

232							                ; https://tobylobster.github.io/mos/mos/S-s16.html#SP2
233	.f592						LF592:
234	.f592		a9 04		lda #$04	                lda #$04
235	.f594		9d 08 08	sta $0808,x	                sta $0808,x
236	.f597		a9 c0		lda #$c0	                lda #$C0
237	.f599						LF599:
238	.f599		9d 04 08	sta $0804,x	                sta $0804,x
239	.f59c		ac 62 02	ldy $0262	                ldy soundSuppressionStatus
240	.f59f		f0 02		beq $f5a3	                beq LF5A3
241	.f5a1		a9 c0		lda #$c0	                lda #$C0
242	.f5a3						LF5A3:
243	.f5a3		38		sec		                sec
244	.f5a4		e9 40		sbc #$40	                sbc #$40
245	.f5a6		4a		lsr a		                lsr a
246	.f5a7		4a		lsr a		                lsr a
247	.f5a8		4a		lsr a		                lsr a
248	.f5a9		49 0f		eor #$0f	                eor #$0F
249	.f5ab		1d 0b f4	ora $f40b,x	                ora soundParameterTable-bufferNumberSound0,x
250	.f5ae		09 10		ora #$10	                ora #$10
251	.f5b0		80 34		bra $f5e6	                bra LF5E6

253	.f5b2						LF5B2:
254	.f5b2		20 ef e9	jsr $e9ef	                jsr osbyte98
255	.f5b5		b0 c0		bcs $f577	                bcs LF577
256	.f5b7		29 03		and #$03	                and #$03
257	.f5b9		f0 9f		beq $f55a	                beq LF55A
258	.f5bb		ad 38 08	lda $0838	                lda $0838
259	.f5be		f0 cb		beq $f58b	                beq LF58B
260	.f5c0		fe 28 08	inc $0828,x	                inc $0828,x
261	.f5c3		a8		tay		                tay
262	.f5c4		10 0a		bpl $f5d0	                bpl LF5D0
263	.f5c6		20 ef e9	jsr $e9ef	                jsr osbyte98
264	.f5c9		29 03		and #$03	                and #$03
265	.f5cb		8d 38 08	sta $0838	                sta $0838
266	.f5ce		80 bb		bra $f58b	                bra LF58B

268	.f5d0						LF5D0:
269	.f5d0		ce 38 08	dec $0838	                dec $0838
270	.f5d3		80 b6		bra $f58b	                bra LF58B

272	.f5d5						LF5D5:
273	.f5d5		dd 2c 08	cmp $082c,x	                cmp $082C,x
274	.f5d8		f0 2a		beq $f604	                beq LF604
275	.f5da						LF5DA:
276	.f5da		9d 2c 08	sta $082c,x	                sta $082C,x
277	.f5dd		e0 04		cpx #$04	                cpx #$04
278	.f5df		d0 24		bne $f605	                bne LF605
279	.f5e1		29 0f		and #$0f	                and #$0F
280	.f5e3		1d 0b f4	ora $f40b,x	                ora soundParameterTable-bufferNumberSound0,x
281	.f5e6						LF5E6:
282	.f5e6		08		php		                php
283	.f5e7						LF5E7:
284	.f5e7		78		sei		                sei
285	.f5e8		a0 ff		ldy #$ff	                ldy #$FF
286	.f5ea		8c 43 fe	sty $fe43	                sty systemVIA.ddra
287	.f5ed		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake
288	.f5f0		c8		iny		                iny
289	.f5f1		8c 40 fe	sty $fe40	                sty systemVIA.orb
290	.f5f4		a0 02		ldy #$02	                ldy #$02
291	.f5f6						LF5F6:
292	.f5f6		88		dey		                dey
293	.f5f7		d0 fd		bne $f5f6	                bne LF5F6
294	.f5f9		a0 08		ldy #$08	                ldy #$08
295	.f5fb		8c 40 fe	sty $fe40	                sty systemVIA.orb
296	.f5fe		a0 04		ldy #$04	                ldy #$04
297	.f600						LF600:
298	.f600		88		dey		                dey
299	.f601		d0 fd		bne $f600	                bne LF600
300	.f603		28		plp		                plp
301	.f604						LF604:
302	.f604		60		rts		                rts

304	.f605						LF605:
305	.f605		48		pha		                pha
306	.f606		29 03		and #$03	                and #$03
307	.f608		8d 3c 08	sta $083c	                sta $083C
308	.f60b		9c 3d 08	stz $083d	                stz $083D
309	.f60e		68		pla		                pla
310	.f60f		4a		lsr a		                lsr a
311	.f610		4a		lsr a		                lsr a
312	.f611						LF611:
313	.f611		c9 0c		cmp #$0c	                cmp #$0C
314	.f613		90 07		bcc $f61c	                bcc LF61C
315	.f615		ee 3d 08	inc $083d	                inc $083D
316	.f618		e9 0c		sbc #$0c	                sbc #$0C
317	.f61a		d0 f5		bne $f611	                bne LF611
318	.f61c						LF61C:
319	.f61c		a8		tay		                tay
320	.f61d		ad 3d 08	lda $083d	                lda $083D
321	.f620		48		pha		                pha
322	.f621		b9 e4 f6	lda $f6e4,y	                lda LF6E4,y
323	.f624		8d 3d 08	sta $083d	                sta $083D
324	.f627		b9 f0 f6	lda $f6f0,y	                lda LF6F0,y
325	.f62a		48		pha		                pha
326	.f62b		29 03		and #$03	                and #$03
327	.f62d		8d 3e 08	sta $083e	                sta $083E
328	.f630		68		pla		                pla
332	.f631		4a		lsr a		                lsr a
333	.f632		4a		lsr a		                lsr a
334	.f633		4a		lsr a		                lsr a
335	.f634		4a		lsr a		                lsr a
337	.f635		8d 3f 08	sta $083f	                sta $083F
338	.f638		ad 3d 08	lda $083d	                lda $083D
339	.f63b		ac 3c 08	ldy $083c	                ldy $083C
340	.f63e		f0 0c		beq $f64c	                beq LF64C
341	.f640						LF640:
342	.f640		38		sec		                sec
343	.f641		ed 3f 08	sbc $083f	                sbc $083F
344	.f644		b0 03		bcs $f649	                bcs LF649
345	.f646		ce 3e 08	dec $083e	                dec $083E
346	.f649						LF649:
347	.f649		88		dey		                dey
348	.f64a		d0 f4		bne $f640	                bne LF640
349	.f64c						LF64C:
350	.f64c		8d 3d 08	sta $083d	                sta $083D
351	.f64f		68		pla		                pla
352	.f650		a8		tay		                tay
353	.f651		f0 09		beq $f65c	                beq LF65C
354	.f653						LF653:
355	.f653		4e 3e 08	lsr $083e	                lsr $083E
356	.f656		6e 3d 08	ror $083d	                ror $083D
357	.f659		88		dey		                dey
358	.f65a		d0 f7		bne $f653	                bne LF653
359	.f65c						LF65C:
360	.f65c		ad 3d 08	lda $083d	                lda $083D
361	.f65f		18		clc		                clc
362	.f660		7d 65 e1	adc $e165,x	                adc LE165,x
363	.f663		8d 3d 08	sta $083d	                sta $083D
364	.f666		90 03		bcc $f66b	                bcc LF66B
365	.f668		ee 3e 08	inc $083e	                inc $083E
366	.f66b						LF66B:
367	.f66b		29 0f		and #$0f	                and #$0F
368	.f66d		1d 0b f4	ora $f40b,x	                ora soundParameterTable-bufferNumberSound0,x
369	.f670		08		php		                php
370	.f671		78		sei		                sei
371	.f672		20 e6 f5	jsr $f5e6	                jsr LF5E6
372	.f675		ad 3d 08	lda $083d	                lda $083D
373	.f678		4e 3e 08	lsr $083e	                lsr $083E
374	.f67b		6a		ror a		                ror a
375	.f67c		4e 3e 08	lsr $083e	                lsr $083E
376	.f67f		6a		ror a		                ror a
377	.f680		4a		lsr a		                lsr a
378	.f681		4a		lsr a		                lsr a
379	.f682		4c e7 f5	jmp $f5e7	                jmp LF5E7

381	.f685						LF685:
382	.f685		08		php		                php
383	.f686		78		sei		                sei
384	.f687		20 f4 e9	jsr $e9f4	                jsr osbyte91
385	.f68a		48		pha		                pha
386	.f68b		29 04		and #$04	                and #$04
387	.f68d		f0 13		beq $f6a2	                beq LF6A2
388	.f68f		68		pla		                pla
389	.f690		bc 20 08	ldy $0820,x	                ldy $0820,x
390	.f693		c8		iny		                iny
391	.f694		d0 03		bne $f699	                bne LF699Sound
392	.f696		20 92 f5	jsr $f592	                jsr LF592
393	.f699						LF699Sound:
394	.f699		20 f4 e9	jsr $e9f4	                jsr osbyte91
395	.f69c		20 f4 e9	jsr $e9f4	                jsr osbyte91
396	.f69f		28		plp		                plp
397	.f6a0		80 3e		bra $f6e0	                bra LF6E0

399	.f6a2						LF6A2:
400	.f6a2		68		pla		                pla
401	.f6a3		29 f8		and #$f8	                and #$F8
402	.f6a5		0a		asl a		                asl a
403	.f6a6		90 0b		bcc $f6b3	                bcc LF6B3Sound
404	.f6a8		49 ff		eor #$ff	                eor #$FF
405	.f6aa		4a		lsr a		                lsr a
406	.f6ab		38		sec		                sec
407	.f6ac		e9 40		sbc #$40	                sbc #$40
408	.f6ae		20 99 f5	jsr $f599	                jsr LF599
409	.f6b1		a9 ff		lda #$ff	                lda #$FF
410	.f6b3						LF6B3Sound:
411	.f6b3		9d 20 08	sta $0820,x	                sta $0820,x
412	.f6b6		a9 05		lda #$05	                lda #$05
413	.f6b8		9d 1c 08	sta $081c,x	                sta $081C,x
414	.f6bb		a9 01		lda #$01	                lda #$01
415	.f6bd		9d 24 08	sta $0824,x	                sta $0824,x
416	.f6c0		9e 14 08	stz $0814,x	                stz $0814,x
417	.f6c3		9e 08 08	stz $0808,x	                stz $0808,x
418	.f6c6		9e 30 08	stz $0830,x	                stz $0830,x
419	.f6c9		a9 ff		lda #$ff	                lda #$FF
420	.f6cb		9d 10 08	sta $0810,x	                sta $0810,x
421	.f6ce		20 f4 e9	jsr $e9f4	                jsr osbyte91
422	.f6d1		9d 0c 08	sta $080c,x	                sta $080C,x
423	.f6d4		20 f4 e9	jsr $e9f4	                jsr osbyte91
424	.f6d7		28		plp		                plp
425	.f6d8		48		pha		                pha
426	.f6d9		bd 0c 08	lda $080c,x	                lda $080C,x
427	.f6dc		20 d5 f5	jsr $f5d5	                jsr LF5D5
428	.f6df		68		pla		                pla
429	.f6e0						LF6E0:
430	.f6e0		9d 18 08	sta $0818,x	                sta $0818,x
431	.f6e3		60		rts		                rts

433	.f6e4						LF6E4:
434	>f6e4		f0				                .byte $F0
435	>f6e5		b7				                .byte $B7
436	>f6e6		82				                .byte $82
437	>f6e7		4f				                .byte $4F
438	>f6e8		20				                .byte $20
439	>f6e9		f3				                .byte $F3
440	>f6ea		c8				                .byte $C8
441	>f6eb		a0				                .byte $A0
442	>f6ec		7b				                .byte $7B
443	>f6ed		57				                .byte $57
444	>f6ee		35				                .byte $35
445	>f6ef		16				                .byte $16
446	.f6f0						LF6F0:
447	>f6f0		e7				                .byte $E7
448	>f6f1		d7				                .byte $D7
449	>f6f2		cb				                .byte $CB
450	>f6f3		c3				                .byte $C3
451	>f6f4		b7				                .byte $B7
452	>f6f5		aa				                .byte $AA
453	>f6f6		a2				                .byte $A2
454	>f6f7		9a				                .byte $9a
455	>f6f8		92				                .byte $92
456	>f6f9		8a				                .byte $8a
457	>f6fa		82				                .byte $82
458	>f6fb		7a				                .byte $7a

:11	;******  Return to file: src/mos.s65

12108							;-------------------------------------------------------------------------

12133							;-------------------------------------------------------------------------

12143							;-------------------------------------------------------------------------

12155							;-------------------------------------------------------------------------

12164							;-------------------------------------------------------------------------

12166	.f6fc						LF6FC:
12167	.f6fc		a9 ff		lda #$ff	                lda #$FF
12168	.f6fe		85 f5		sta $f5		                sta $F5
12169	.f700		60		rts		                rts

12171	.f701						LF701:
12172	.f701		e6 f5		inc $f5		                inc $F5
12173	.f703		a4 f5		ldy $f5		                ldy $F5
12174	.f705		a2 0d		ldx #$0d	                ldx #romServiceCallROMFilingSystemInitialize
12175	.f707						LF707:
12176	.f707		08		php		                php
12177	.f708		20 72 ee	jsr $ee72	                jsr makeROMServiceCall
12178	.f70b		28		plp		                plp
12179	.f70c		c9 01		cmp #$01	                cmp #$01
12180	.f70e		98		tya		                tya
12181	.f70f		60		rts		                rts

12183	.f710						LF710:
12184	.f710		a2 0e		ldx #$0e	                ldx #$0E
12185	.f712		a0 ff		ldy #$ff	                ldy #$FF
12186	.f714		4c 07 f7	jmp $f707	                jmp LF707

12188	.f717						LF717:
12189	.f717		ad cb 03	lda $03cb	                lda $03CB
12190	.f71a		85 f6		sta $f6		                sta $F6
12191	.f71c		ad cc 03	lda $03cc	                lda $03CC
12192	.f71f		85 f7		sta $f7		                sta $F7
12193	.f721		a5 f5		lda $f5		                lda $F5
12194	.f723		60		rts		                rts

12196	.f724						tidyUpAfterKeyboardProcessing:
12197	.f724		a2 ff		ldx #$ff	                ldx #$FF
12198	.f726		a5 ec		lda $ec		                lda lastKeyPressedInternal
12199	.f728		05 ed		ora $ed		                ora firstKeyPressedInternal
12200	.f72a		d0 06		bne $f732	                bne +                    ;taken if any keys pressed
12201	.f72c		a9 81		lda #$81	                lda #$81
12202	.f72e		8d 4e fe	sta $fe4e	                sta systemVIA.ier            ;re-enable keyboard IRQ
12203	.f731		e8		inx		                inx                          ;X=0
12204	.f732						+
12205	.f732		8e 42 02	stx $0242	                stx keyboardSemaphore
12206	.f735						updateKeyboardLEDs:
12207	.f735		08		php		                php
12208	.f736		ad 5a 02	lda $025a	                lda keyboardStatusByte
12209	.f739		4a		lsr a		                lsr a

12211							                ; bit 3 = caps lock off
12212							                ; bit 4 = shift lock off
12213	.f73a		29 18		and #$18	                and #(keyboardStatusByte.capsLockDisengaged|keyboardStatusByte.shiftLockDisengaged)>>1
12214	.f73c		09 06		ora #$06	                ora #$06                     ;latch B6 - caps lock
12215	.f73e		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;update caps lock LED
12216	.f741		4a		lsr a		                lsr a                        ;bit 3 = shift lock off
12217	.f742		09 07		ora #$07	                ora #$07                     ;latch B7 - shift lock
12218	.f744		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;update shift lock LED
12219	.f747		20 1c f9	jsr $f91c	                jsr enableKeyboardScanning
12220	.f74a		68		pla		                pla
12221	.f74b		60		rts		                rts

12223							; KEYV handler
12224							; ============
12225	.f74c						keyEntryPoint:
12226	.f74c		50 0a		bvc $f758	                bvc keyVClear
12227	.f74e		a9 01		lda #$01	                lda #$01
12228	.f750		8d 4e fe	sta $fe4e	                sta systemVIA.ier
12229	.f753		b0 08		bcs $f75d	                bcs keyboardTimerInterrupt
12230	.f755		4c 65 f8	jmp $f865	                jmp keyPressedInterrupt

12232	.f758						keyVClear:
12233	.f758		90 06		bcc $f760	                bcc keyTestSHIFTAndCTRLOrTimerInterrupt
12234	.f75a		4c 16 f9	jmp $f916	                jmp scanKeyboard

12236	.f75d						keyboardTimerInterrupt:
12237	.f75d		ee 42 02	inc $0242	                inc keyboardSemaphore

12239							;-------------------------------------------------------------------------
12240							;
12241							; Test Shift & Ctrl keys, or deal with timer interrupt.
12242							;
12243							; Entry: C=0 if KEYV V=0 C=0 - test SHIFT+CTRL keys
12244							;        C=1 if KEYV V=1 C=1 - keyboard timer interrupt
12245							;
12246	.f760						keyTestSHIFTAndCTRLOrTimerInterrupt:
12247	.f760		ad 5a 02	lda $025a	                lda keyboardStatusByte
12248	.f763		29 b7		and #$b7	                and #~(keyboardStatusByte.shiftPressed|keyboardStatusByte.ctrlPressed)
12249	.f765		a2 00		ldx #$00	                ldx #key_shift
12250	.f767		20 80 f8	jsr $f880	                jsr interrogateKeyboard      ;X=$80 if SHIFT pressed
12251	.f76a		90 02		bcc $f76e	                bcc +                        ;taken if testing
12252							                                             ;SHIFT+CTRL only
12253	.f76c		86 fa		stx $fa		                stx SEIWKA                   ;b7 set if SHIFT pressed
12254	.f76e						+
12255	.f76e		b8		clv		                clv                        ;V=0
12256	.f76f		10 05		bpl $f776	                bpl testCTRL               ;taken if SHIFT not pressed
12257	.f771		2c 4e e3	bit $e34e	                bit valueFF                ;V=1 N=1
12258	.f774		09 08		ora #$08	                ora #keyboardStatusByte.shiftPressed
12259	.f776						testCTRL:
12260	.f776		e8		inx		                inx                          ;X=1 - key_ctrl
12261	.f777		20 80 f8	jsr $f880	                jsr interrogateKeyboard
12262	.f77a		90 b9		bcc $f735	                bcc updateKeyboardLEDs ;taken if testing SHIFT+CTRL only
12263	.f77c		10 02		bpl $f780	                bpl updateKeyboardStatusByte ;taken if CTRL not pressed
12264	.f77e		09 40		ora #$40	                ora #keyboardStatusByte.ctrlPressed
12265	.f780						updateKeyboardStatusByte:
12266	.f780		8d 5a 02	sta $025a	                sta keyboardStatusByte
12267	.f783		a6 ec		ldx $ec		                ldx lastKeyPressedInternal
12268	.f785		f0 4d		beq $f7d4	                beq braRolloverChecks        ;taken if no key pressed
12269	.f787		20 80 f8	jsr $f880	                jsr interrogateKeyboard      ;still pressed?
12270	.f78a		30 0d		bmi $f799	                bmi checkForKeyAutoRepeat    ;taken if still pressed
12271	.f78c		e4 ec		cpx $ec		                cpx lastKeyPressedInternal   ;X=0 at this point
12272	.f78e						storeLastKeyPressed:
12273	.f78e		86 ec		stx $ec		                stx lastKeyPressedInternal   ;update last key pressed
12274	.f790		d0 42		bne $f7d4	                bne braRolloverChecks  ;taken if still nothing pressed
12275	.f792		64 ec		stz $ec		                stz lastKeyPressedInternal   ;reset last key pressed
12276	.f794						resetAutoRepeatAndContinue:
12277	.f794		20 75 f8	jsr $f875	                jsr resetAutoRepeatCounters
12278	.f797		80 3b		bra $f7d4	                bra braRolloverChecks

12280	.f799						checkForKeyAutoRepeat:
12281	.f799		e4 ec		cpx $ec		                cpx lastKeyPressedInternal
12282	.f79b		d0 f1		bne $f78e	                bne storeLastKeyPressed      ;taken if new key pressed
12283	.f79d		a5 e7		lda $e7		                lda autoRepeatCountdownTimer
12284	.f79f		f0 33		beq $f7d4	                beq braRolloverChecks      ;taken if countdown timer 0
12285	.f7a1		c6 e7		dec $e7		                dec autoRepeatCountdownTimer ;timer--
12286	.f7a3		d0 2f		bne $f7d4	                bne braRolloverChecks        ;taken if timer newly 0
12287	.f7a5		ad ca 02	lda $02ca	                lda keyboardFirstAutoRepeatCount
12288	.f7a8		85 e7		sta $e7		                sta autoRepeatCountdownTimer
12289	.f7aa		ad 55 02	lda $0255	                lda keyboardAutoRepeatRate
12290	.f7ad		8d ca 02	sta $02ca	                sta keyboardFirstAutoRepeatCount
12291	.f7b0		ad 5a 02	lda $025a	                lda keyboardStatusByte
12292	.f7b3		a6 ec		ldx $ec		                ldx lastKeyPressedInternal
12293	.f7b5		e0 d0		cpx #$d0	                cpx #$80|key_shift_lock
12294	.f7b7		f0 12		beq $f7cb	                beq shiftLockPressed
12295	.f7b9		e0 c0		cpx #$c0	                cpx #$80|key_caps_lock
12299	.f7bb		d0 19		bne $f7d6	                bne getASCIICode
12301	.f7bd						capsLockPressed:
12302	.f7bd		09 a0		ora #$a0	                ora #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
12303	.f7bf		24 fa		bit $fa		                bit SEIWKA                   ;test SHIFT status
12304	.f7c1		10 04		bpl $f7c7	                bpl +                        ;taken if SHIFT not pressed
12305							                ; Do the SHIFT+CAPS LOCK thing
12306	.f7c3		09 10		ora #$10	                ora #keyboardStatusByte.capsLockDisengaged
12307	.f7c5		49 80		eor #$80	                eor #keyboardStatusByte.shiftEnabled
12308	.f7c7						+
12309	.f7c7		49 90		eor #$90	                eor #keyboardStatusByte.shiftEnabled|keyboardStatusByte.capsLockDisengaged
12310	.f7c9		80 04		bra $f7cf	                bra resetKeyboardStatusAndTimer

12312	.f7cb						shiftLockPressed:
12313	.f7cb		09 90		ora #$90	                ora #keyboardStatusByte.shiftEnabled|keyboardStatusByte.capsLockDisengaged
12314	.f7cd		49 a0		eor #$a0	                eor #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
12315	.f7cf						resetKeyboardStatusAndTimer:
12316	.f7cf		8d 5a 02	sta $025a	                sta keyboardStatusByte
12317	.f7d2		64 e7		stz $e7		                stz autoRepeatCountdownTimer
12318	.f7d4						braRolloverChecks:
12320	.f7d4		80 6f		bra $f845	                bra keyboardRolloverChecks

12325							;-------------------------------------------------------------------------

12356							;-------------------------------------------------------------------------
12357							;
12358							; Convert internal key number (with bit 7 set) to ASCII code, taking
12359							; into account state of CTRL, SHIFT, CAPS LOCK and SHIFT LOCK.
12360							;
12361	.f7d6						getASCIICode:
12362							                ; -$80 to adjust for bit 7 set; -16 because
12363							                ; interesting keys start at 16
12364	.f7d6		bd 02 f8	lda $f802,x	                lda keyTranslationTable-$80-16,x
12382	.f7d9		f0 08		beq $f7e3	                beq handleTAB                ;taken if TAB
12383	.f7db		c9 9d		cmp #$9d	                cmp #$9D                     ;was it key_numpad_return?
12385	.f7dd		d0 07		bne $f7e6	                bne handleKey                ;taken if not

12390							                ;Transform $9d into $8d, aka 13|$80. ($8d is already
12391							                ; used in the table for right arrow.)
12392	.f7df		49 10		eor #$10	                eor #$10
12393	.f7e1		80 07		bra $f7ea	                bra getNumpadASCIICode

12395	.f7e3						handleTAB:
12396	.f7e3		ad 6b 02	lda $026b	                lda tabKeyCode
12431	.f7e6						handleKey:
12432	.f7e6		c9 a0		cmp #$a0	                cmp #$A0                     ;numpad key?
12433	.f7e8		90 0c		bcc $f7f6	                bcc processModifiers         ;taken if not
12434	.f7ea						getNumpadASCIICode:
12438							                ; C=1 at this point
12439	.f7ea		e9 31		sbc #$31	                sbc #'0'+1      ;+1 to compensate for C=1 in the next
12440							                                ;addition
12441	.f7ec		6d 7e 02	adc $027e	                adc numericKeypadInterpretation ;form actual ASCII value
12445	.f7ef		49 80		eor #$80	                eor #$80                     ;clear bit 7
12446	.f7f1		ae 8e 02	ldx $028e	                ldx numericKeypadShiftEffect ;does SHIFT affect the
12447							                                             ;keypad?
12448	.f7f4		d0 43		bne $f839	                bne LF839                    ;taken if no
12449	.f7f6						processModifiers:
12450	.f7f6		ae 5a 02	ldx $025a	                ldx keyboardStatusByte
12451	.f7f9		86 fa		stx $fa		                stx SEIWKA
12452	.f7fb		26 fa		rol $fa		                rol SEIWKA                  ;b7 = ctrlPressed
12453	.f7fd		10 07		bpl $f806	                bpl testShiftLock           ;taken if ctrl not pressed
12454	.f7ff		a6 ed		ldx $ed		                ldx firstKeyPressedInternal
12455	.f801						localResetAutoRepeatAndContinue:
12457	.f801		d0 91		bne $f794	                bne resetAutoRepeatAndContinue
12458	.f803		20 36 f3	jsr $f336	                jsr implementCTRLCodes
12465	.f806						testShiftLock:
12466	.f806		26 fa		rol $fa		                rol SEIWKA                   ;b7 = shiftLockDisengaged
12467	.f808		30 07		bmi $f811	                bmi testCapsLock             ;taken if shift lock off
12468	.f80a		20 13 f3	jsr $f313	                jsr implementShift           ;shift lock on - apply shift
12469	.f80d		26 fa		rol $fa		                rol SEIWKA                   ;b7 = capsLockDisengaged
12470	.f80f		80 0c		bra $f81d	                bra testShiftEnabled

12472	.f811						testCapsLock:
12473	.f811		26 fa		rol $fa		                rol SEIWKA                   ;b7 = capsLockDisengaged
12474	.f813		30 0d		bmi $f822	                bmi testShift                ;taken if caps lock off
12475	.f815		20 71 ea	jsr $ea71	                jsr isLetter
12476	.f818		b0 08		bcs $f822	                bcs testShift                ;taken if not a letter
12477	.f81a		20 13 f3	jsr $f313	                jsr implementShift ;letter + caps lock - make upper case
12478	.f81d						testShiftEnabled:
12479	.f81d		ae 5a 02	ldx $025a	                ldx keyboardStatusByte       ;b7 = shiftEnabled
12480	.f820		10 0b		bpl $f82d	                bpl testEscape               ;taken if not shiftEnabled
12481	.f822						testShift:
12482	.f822		26 fa		rol $fa		                rol SEIWKA                   ;b7 = shiftPressed
12483	.f824		10 07		bpl $f82d	                bpl testEscape               ;taken if not shiftPressed
12484	.f826		a6 ed		ldx $ed		                ldx firstKeyPressedInternal
12485	.f828		d0 d7		bne $f801	                bne localResetAutoRepeatAndContinue
12486	.f82a		20 13 f3	jsr $f313	                jsr implementShift
12487	.f82d						testEscape:
12488	.f82d		cd 6c 02	cmp $026c	                cmp escapeCharacter
12489	.f830		d0 07		bne $f839	                bne LF839
12490	.f832		ae 75 02	ldx $0275	                ldx escapeKeyStatus
12491	.f835		d0 02		bne $f839	                bne LF839
12492	.f837		64 e7		stz $e7		                stz autoRepeatCountdownTimer

12494	.f839						LF839:

12518	.f839		a8		tay		                tay
12519	.f83a		20 a6 f9	jsr $f9a6	                jsr enableKeyboardScanningFlippingInterrupts
12520	.f83d		ad 59 02	lda $0259	                lda keyboardStatus
12521	.f840		d0 03		bne $f845	                bne keyboardRolloverChecks
12522	.f842		20 7e ea	jsr $ea7e	                jsr insertCharacterIntoKeyboardBuffer

12614	.f845						keyboardRolloverChecks:
12615	.f845		a6 ed		ldx $ed		                ldx firstKeyPressedInternal
12616	.f847		f0 09		beq $f852	                beq LF852                    ;taken if 1 key down
12617	.f849		20 80 f8	jsr $f880	                jsr interrogateKeyboard      ;test first key pressed
12618	.f84c		86 ed		stx $ed		                stx firstKeyPressedInternal  ;save it
12619	.f84e		30 18		bmi $f868	                bmi LF868                    ;taken if still pressed
12620	.f850		64 ed		stz $ed		                stz firstKeyPressedInternal  ;reset first key
12621	.f852						LF852:
12622	.f852		a0 ec		ldy #$ec	                ldy #lastKeyPressedInternal
12623	.f854		20 6c f9	jsr $f96c	                jsr scanKeyboardWithExclusion
12624	.f857		30 09		bmi $f862	                bmi LF862
12625	.f859		a5 ec		lda $ec		                lda lastKeyPressedInternal
12626	.f85b		85 ed		sta $ed		                sta firstKeyPressedInternal
12627	.f85d						updateLastKeyPressedInternal:
12628	.f85d		86 ec		stx $ec		                stx lastKeyPressedInternal
12629	.f85f		20 75 f8	jsr $f875	                jsr resetAutoRepeatCounters
12630	.f862						LF862:
12631	.f862		4c 24 f7	jmp $f724	                jmp tidyUpAfterKeyboardProcessing

12633	.f865						keyPressedInterrupt:
12634	.f865		20 80 f8	jsr $f880	                jsr interrogateKeyboard
12635	.f868						LF868:
12636	.f868		a5 ec		lda $ec		                lda lastKeyPressedInternal
12637	.f86a		d0 f6		bne $f862	                bne LF862
12638	.f86c		a0 ed		ldy #$ed	                ldy #firstKeyPressedInternal
12639	.f86e		20 6c f9	jsr $f96c	                jsr scanKeyboardWithExclusion
12640	.f871		30 ef		bmi $f862	                bmi LF862
12641	.f873		80 e8		bra $f85d	                bra updateLastKeyPressedInternal

12643	.f875						resetAutoRepeatCounters:
12644	.f875		a2 01		ldx #$01	                ldx #$01
12645	.f877		86 e7		stx $e7		                stx autoRepeatCountdownTimer
12646	.f879		ae 54 02	ldx $0254	                ldx keyboardAutoRepeatDelay
12647	.f87c		8e ca 02	stx $02ca	                stx keyboardFirstAutoRepeatCount
12648	.f87f		60		rts		                rts

12650							;-------------------------------------------------------------------------
12651							;
12652							; Read a single key's state from the keyboard
12653							;
12654							; Entry:
12655							;
12656							; X = key to test
12657							;
12658							; Exit:
12659							;
12660							; X=$80, N=1 if key pressed; X=$00, N=0 if key not pressed
12661							;
12662							; Keyboard remains in manual scan mode
12663							;
12664							; Preserves: A/C
12665							;
12670	.f880						interrogateKeyboard:
12671	.f880		a0 03		ldy #$03	                ldy #0|3            ;reset latch B3 - manual scan mode
12672	.f882		8c 40 fe	sty $fe40	                sty systemVIA.orb
12673	.f885		a0 7f		ldy #$7f	                ldy #$7F
12674	.f887		8c 43 fe	sty $fe43	                sty systemVIA.ddra           ;bit 7=input, bits 6-0=output
12675	.f88a		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake ;store key value
12676	.f88d		ea		nop		                nop
12677	.f88e		ae 4f fe	ldx $fe4f	                ldx systemVIA.iraNoHandshake ;read key state
12678	.f891		60		rts		                rts

12680							; Default keyboard table
12681							; ======================

12683	.f892						keyTranslationTable:
12684	>f892		71				                .text "q"                    ;10 q
12685	>f893		33				                .byte "3"                    ;11 3
12686	>f894		34				                .byte "4"                    ;12 4
12687	>f895		35				                .byte "5"                    ;13 5
12688	>f896		84				                .byte $84                    ;14 f4
12689	>f897		38				                .text "8"                    ;15 8
12690	>f898		87				                .byte $87                    ;16 f7
12691	>f899		2d				                .text "-"                    ;17 minus
12692	>f89a		5e				                .text "^"                    ;18 caret
12693	>f89b		8c				                .byte $8C                    ;19 left
12694	>f89c		b6				                .byte "6"|$80                ;1a numpad_6
12695	>f89d		b7				                .byte "7"|$80                ;1b numpad_7
12696	.f89e						osbyte92:
12697	.f89e		bc 00 fc	ldy $fc00,x	                ldy $FC00,x                  ;1c 1d 1e
12698	.f8a1		60		rts		                rts                          ;1f

12701	>f8a2		80				                .byte $80                    ;20 f0
12702	>f8a3		77				                .text "w"                    ;21 w
12703	>f8a4		65				                .text "e"                    ;22 e
12704	>f8a5		74				                .text "t"                    ;23 t
12705	>f8a6		37				                .text "7"                    ;24 7
12706	>f8a7		69				                .text "i"                    ;25 i
12707	>f8a8		39				                .text "9"                    ;26 9
12708	>f8a9		30				                .text "0"                    ;27 0
12709	>f8aa		5f				                .text "_"                    ;28 underline
12710	>f8ab		8e				                .byte $8E                    ;29 down
12711	>f8ac		b8				                .byte "8"|$80                ;2a numpad_8
12712	>f8ad		b9				                .byte "9"|$80                ;2b numpad_9
12713	.f8ae						osbyte94:
12714	.f8ae		bc 00 fd	ldy $fd00,x	                ldy $FD00,x                  ;2c 2d 2e
12715	.f8b1		60		rts		                rts                          ;2f

12718	>f8b2		31				                .text "1"                    ;30 1
12719	>f8b3		32				                .text "2"                    ;31 2
12720	>f8b4		64				                .text "d"                    ;32 d
12721	>f8b5		72				                .text "r"                    ;33 r
12722	>f8b6		36				                .text "6"                    ;34 6
12723	>f8b7		75				                .text "u"                    ;35 u
12724	>f8b8		6f				                .text "o"                    ;36 o
12725	>f8b9		70				                .text "p"                    ;37 p
12726	>f8ba		5b				                .text "["                    ;38 left_square_bracket
12727	>f8bb		8f				                .byte $8F                    ;39 up
12728	>f8bc		ab				                .byte "+"|$80                ;3a numpad_plus
12729	>f8bd		ad				                .byte "-"|$80                ;3b numpad_minus
12730	>f8be		9d				                .byte $9D                    ;3c numpad_return
12731	.f8bf						LF8BF:
12732	.f8bf		6c 20 02	jmp ($0220)	                jmp (EVENTV)                 ;3d 3e 3f
12734	>f8c2		01				                .byte 1                      ;40 caps_lock
12735	>f8c3		61				                .text "a"                    ;41 a
12736	>f8c4		78				                .text "x"                    ;42 x
12737	>f8c5		66				                .text "f"                    ;43 f
12738	>f8c6		79				                .text "y"                    ;44 y
12739	>f8c7		6a				                .text "j"                    ;45 j
12740	>f8c8		6b				                .text "k"                    ;46 k
12742	>f8c9		40				                .text "@"                    ;47 at
12746	>f8ca		3a				                .text ":"                    ;48 colon
12747	>f8cb		0d				                .byte $0D                    ;49 return
12748	>f8cc		af				                .byte "/"|$80                ;4a numpad_divide
12749	>f8cd		ff				                .byte 127|$80                ;4b numpad_delete
12750	>f8ce		ae				                .byte "."|$80                ;4c numpad_stop
12751	.f8cf						call1MHzBusHook:
12752	.f8cf		6c fe fd	jmp ($fdfe)	                jmp ($FDFE)                  ;4d 4e 4f

12755	>f8d2		02				                .byte 2                      ;50 shift_lock
12756	>f8d3		73				                .text "s"                    ;51 s
12757	>f8d4		63				                .text "c"                    ;52 c
12758	>f8d5		67				                .text "g"                    ;53 g
12759	>f8d6		68				                .text "h"                    ;54 h
12760	>f8d7		6e				                .text "n"                    ;55 n
12761	>f8d8		6c				                .text "l"                    ;56 l
12762	>f8d9		3b				                .text ";"                    ;57 semicolon
12763	>f8da		5d				                .text "]"                    ;58 right_square_bracket
12764	>f8db		7f				                .byte $7F                    ;59 delete
12765	>f8dc		a3				                .byte "#"|$80                ;5a numpad_hash
12766	>f8dd		aa				                .byte "*"|$80                ;5b numpad_multiply
12767	>f8de		ac				                .byte ","|$80                ;5c numpad_comma
12768	.f8df						callSEIWKA:
12769	.f8df		6c fa 00	jmp ($00fa)	                jmp (SEIWKA)                 ;5d 5e 5f
12771	>f8e2		00				                .byte 0                      ;60 tab
12772	>f8e3		7a				                .text "z"                    ;61 z
12773	>f8e4		20				                .text " "                    ;62 space
12774	>f8e5		76				                .text "v"                    ;63 v
12775	>f8e6		62				                .text "b"                    ;64 b
12776	>f8e7		6d				                .text "m"                    ;65 m
12777	>f8e8		2c				                .text ","                    ;66 comma
12778	>f8e9		2e				                .text "."                    ;67 stop
12779	>f8ea		2f				                .text "/"                    ;68 divide
12780	>f8eb		8b				                .byte $8B                    ;69 copy
12781	>f8ec		b0				                .byte "0"|$80                ;6a numpad_0
12782	>f8ed		b1				                .byte "1"|$80                ;6b numpad_1
12783	>f8ee		b3				                .byte "3"|$80                ;6c numpad_3
12784	>f8ef		00				                .byte 0                      ;6d
12785	>f8f0		00				                .byte 0                      ;6e
12786	>f8f1		00				                .byte 0                      ;6f
12788	>f8f2		1b				                .byte 27                     ;70 escape
12789	>f8f3		81				                .byte $81                    ;71 f1
12790	>f8f4		82				                .byte $82                    ;72 f2
12791	>f8f5		83				                .byte $83                    ;73 f3
12792	>f8f6		85				                .byte $85                    ;74 f5
12793	>f8f7		86				                .byte $86                    ;75 f6
12794	>f8f8		88				                .byte $88                    ;76 f8
12795	>f8f9		89				                .byte $89                    ;77 f9
12796	>f8fa		5c				                .byte $5C                    ;78 backslash
12797	>f8fb		8d				                .byte $8D                    ;79 right
12798	>f8fc		b4				                .byte "4"|$80                ;7a numpad_4
12799	>f8fd		b5				                .byte "5"|$80                ;7b numpad_5
12800	>f8fe		b2				                .byte "2"|$80                ;7c numpad_2
12801	.f8ff						LF8FF:
12802	.f8ff		2c 4e e3	bit $e34e	                bit valueFF                  ; Set V
12803	.f902						callKEYV:
12804	.f902		6c 28 02	jmp ($0228)	                jmp (KEYV)                   ; Jump to KEYV

12806							;-------------------------------------------------------------------------
12807							;
12808							; OSBYTE 131 (&83) - Read Operating System High Water Mark (OSHWM)
12809							;
12810							; MasRef D.2-40
12811							;
12812	.f905						osbyte83:
12813	.f905		ac 44 02	ldy $0244	                ldy oshwm
12814	.f908		a2 00		ldx #$00	                ldx #$00
12815	.f90a		60		rts		                rts

12817							;-------------------------------------------------------------------------
12818							;
12819							; OSBYTE 120 ($78) - Write keys pressed information
12820							;
12821							; MasRef D.2-33
12822							;
12823	.f90b						osbyte78:                          ;f90b
12824	.f90b		84 ec		sty $ec		                sty lastKeyPressedInternal
12825	.f90d		86 ed		stx $ed		                stx firstKeyPressedInternal
12826	.f90f		60		rts		                rts

12828							;-------------------------------------------------------------------------
12829							;
12830							; OSBYTE 122 (&7A) Keyboard scan from 16 decimal
12831							;
12832							; MasRef D.2-36
12833							;
12838	.f910						osbyte7A:
12839	.f910		a2 10		ldx #$10	                ldx #$10
12840	.f912		b8		clv		                clv
12841	.f913		38		sec		                sec
12842	.f914		80 ec		bra $f902	                bra callKEYV                 ; C=1, V=0 - scan keyboard

12844							;-------------------------------------------------------------------------

12846	.f916						scanKeyboard:
12847	.f916		8a		txa		                txa                          ; A=start key
12848	.f917		10 0a		bpl $f923	                bpl scanKeyboardFromKey  ; taken if full keyboard scan
12849	.f919		20 80 f8	jsr $f880	                jsr interrogateKeyboard      ; query specific key
12850	.f91c						enableKeyboardScanning:
12851							                ; Reinstate auto scan mode on exit
12852	.f91c		a9 0b		lda #$0b	                lda #8|3                     ;set latch B3 - auto scan mode
12853	.f91e		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;set auto scan mode
12854	.f921		8a		txa		                txa
12855	.f922		60		rts		                rts

12857	.f923						scanKeyboardFromKey:
12858	.f923		8e cb 02	stx $02cb	                stx previousKeyPressedWhenReadingLastKey ; save start key
12859	.f926		a9 ff		lda #$ff	                lda #$FF
12860	.f928		8d cc 02	sta $02cc	                sta previousKeyPressedWhenReadingFirstKey
12861	.f92b		a2 0c		ldx #$0c	                ldx #$0C
12862	.f92d		a9 7f		lda #$7f	                lda #$7F
12863	.f92f		8d 43 fe	sta $fe43	                sta systemVIA.ddra  ;bit 7=input, bits0-6=output
12864	.f932		a9 03		lda #$03	                lda #0|3            ;reset latch B3 - manual scan mode
12865	.f934		8d 40 fe	sta $fe40	                sta systemVIA.orb
12866	.f937						loopKeyboardColumns:
12867	.f937		a9 0f		lda #$0f	                lda #$0F
12868	.f939		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;select a non-existent column
12869	.f93c		a9 01		lda #$01	                lda #$01
12870	.f93e		8d 4d fe	sta $fe4d	                sta systemVIA.ifr            ;cancel keyboard interrupts
12871	.f941		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake ;select column
12872	.f944		2c 4d fe	bit $fe4d	                bit systemVIA.ifr            ;any key in this column
12873							                                             ;pressed?
12874	.f947		f0 1b		beq $f964	                beq tryNextKeyboardColumn    ;taken if no key
12875	.f949		8a		txa		                txa                          ;A = first key in column
12876	.f94a						loopKeyboardRows:
12877	.f94a		18		clc		                clc
12878	.f94b		69 10		adc #$10	                adc #$10                     ;next row
12879	.f94d		30 15		bmi $f964	                bmi tryNextKeyboardColumn    ;taken if done
12880	.f94f		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;store key
12881	.f952		2c 4f fe	bit $fe4f	                bit systemVIA.iraNoHandshake ;pressed?
12882	.f955		10 f3		bpl $f94a	                bpl loopKeyboardRows         ;taken if not
12883							                ; Key is pressed...
12884	.f957		cd cb 02	cmp $02cb	                cmp previousKeyPressedWhenReadingLastKey
12885	.f95a		90 ee		bcc $f94a	                bcc loopKeyboardRows         ;Taken if key<start key
12886							                                             ;value. The scan excludes
12887							                                             ;this key.
12888	.f95c		cd cc 02	cmp $02cc	                cmp previousKeyPressedWhenReadingFirstKey
12889	.f95f		b0 e9		bcs $f94a	                bcs loopKeyboardRows         ;Taken if key>=first key
12890							                                             ;value. Not sure why not
12891							                                             ;to simply break out of
12892							                                             ;thel loop though?
12893	.f961		8d cc 02	sta $02cc	                sta previousKeyPressedWhenReadingFirstKey
12894	.f964						tryNextKeyboardColumn:
12895	.f964		ca		dex		                dex
12896	.f965		10 d0		bpl $f937	                bpl loopKeyboardColumns
12897	.f967		ae cc 02	ldx $02cc	                ldx previousKeyPressedWhenReadingFirstKey ; X=key
12898							                                                          ; found, or
12899							                                                          ; $ff if
12900							                                                          ; none
12901	.f96a		80 b0		bra $f91c	                bra enableKeyboardScanning

12903	.f96c						scanKeyboardWithExclusion:
12904	.f96c		a2 0c		ldx #$0c	                ldx #$0c
12905	.f96e						LF96E:
12906	.f96e		20 a6 f9	jsr $f9a6	                jsr enableKeyboardScanningFlippingInterrupts
12907	.f971		a9 7f		lda #$7f	                lda #$7F
12908	.f973		8d 43 fe	sta $fe43	                sta systemVIA.ddra
12909	.f976		a9 03		lda #$03	                lda #0|3
12910	.f978		8d 40 fe	sta $fe40	                sta systemVIA.orb
12911	.f97b		a9 0f		lda #$0f	                lda #$0F
12912	.f97d		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;select non-existent column
12913	.f980		a9 01		lda #$01	                lda #$01
12914	.f982		8d 4d fe	sta $fe4d	                sta systemVIA.ifr            ;cancel keyboard interrupts
12915	.f985		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake
12916	.f988		2c 4d fe	bit $fe4d	                bit systemVIA.ifr
12917	.f98b		f0 20		beq $f9ad	                beq LF9AD
12918	.f98d		8a		txa		                txa
12919	.f98e						LF98E:
12920	.f98e		18		clc		                clc
12921	.f98f		69 10		adc #$10	                adc #$10
12922	.f991		30 1a		bmi $f9ad	                bmi LF9AD                    ;taken if done
12923	.f993		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;test key
12924	.f996		2c 4f fe	bit $fe4f	                bit systemVIA.iraNoHandshake ;pressed?
12925	.f999		10 f3		bpl $f98e	                bpl LF98E                    ;taken if not
12926	.f99b		48		pha		                pha                          ;save key number
12927	.f99c						LF99C:
12928	.f99c		59 00 00	eor $0000,y	                eor $0000,y                  ;compare to value
12929	.f99f		0a		asl a		                asl a                        ;discard irrelevant bit 7
12930	.f9a0		c9 01		cmp #$01	                cmp #$01                     ;C set if different
12931	.f9a2		68		pla		                pla                          ;restore key number
12932	.f9a3		90 e9		bcc $f98e	                bcc LF98E                    ;same key found - keep going
12933	.f9a5		aa		tax		                tax
12934	.f9a6						enableKeyboardScanningFlippingInterrupts:
12935	.f9a6		20 1c f9	jsr $f91c	                jsr enableKeyboardScanning
12936	.f9a9		58		cli		                cli
12937	.f9aa		78		sei		                sei
12938	.f9ab		8a		txa		                txa
12939	.f9ac		60		rts		                rts

12941	.f9ad						LF9AD:
12942	.f9ad		ca		dex		                dex
12943	.f9ae		10 be		bpl $f96e	                bpl LF96E
12944	.f9b0		80 f4		bra $f9a6	                bra enableKeyboardScanningFlippingInterrupts

12946							;-------------------------------------------------------------------------

12952							;-------------------------------------------------------------------------

12958							;-------------------------------------------------------------------------

12960							                ; Ugly condition...

12984							;-------------------------------------------------------------------------

12990							;-------------------------------------------------------------------------

13019							;-------------------------------------------------------------------------

13025							;-------------------------------------------------------------------------

13033							;-------------------------------------------------------------------------

13041							;-------------------------------------------------------------------------

13049							;-------------------------------------------------------------------------

13057							;-------------------------------------------------------------------------

13063							;-------------------------------------------------------------------------
13064							;
13065							; OSBPUT [AUG p339]
13066							;
13067	.f9b2						osbputEntryPoint:
13068	.f9b2		20 97 fa	jsr $fa97	                jsr selectFSForHandle
13069	.f9b5		6c 18 02	jmp ($0218)	                jmp (BPUTV)

13071							;-------------------------------------------------------------------------
13072							;
13073							; OSBGET [AUG p338]
13074							;
13075	.f9b8						osbgetEntryPoint:
13076	.f9b8		20 97 fa	jsr $fa97	                jsr selectFSForHandle
13077	.f9bb		6c 16 02	jmp ($0216)	                jmp (BGETV)

13079							;-------------------------------------------------------------------------
13080							;
13081							; OSGBPB [AUG p339]
13082							;
13083	.f9be						osgbpbEntryPoint: .proc
13084	.f9be		c9 05		cmp #$05	                cmp #gbpbGetMediaMetadata
13085	.f9c0		b0 15		bcs $f9d7	                bcs nonFileOperation
13086	.f9c2		c9 00		cmp #$00	                cmp #$00
13087	.f9c4		f0 11		beq $f9d7	                beq nonFileOperation

13089							                ; Handle OSGBPB call that's an operation on a file
13090							                ; handle. Select the appropriate FS, given the file
13091							                ; handle, and pass the request along.
13092	.f9c6		5a		phy		                phy                          ;save OSGBPB Y
13093	.f9c7		48		pha		                pha                          ;save OSGBPB A
13094	.f9c8		86 b0		stx $b0		                stx osgbpbWorkspace.ptr+0
13095	.f9ca		84 b1		sty $b1		                sty osgbpbWorkspace.ptr+1
13096	.f9cc		b2 b0		lda ($b0)	                lda (osgbpbWorkspace.ptr)    ;get file handle
13097	.f9ce		a8		tay		                tay
13098	.f9cf		68		pla		                pla                          ;restore OSGBPB A
13099	.f9d0		20 97 fa	jsr $fa97	                jsr selectFSForHandle
13100	.f9d3						passToCurrentFS:
13101	.f9d3		7a		ply		                ply                          ;restore OSGBPB Y
13102	.f9d4		6c 1a 02	jmp ($021a)	                jmp (GBPBV)

13104							;-------------------------------------------------------------------------
13105							;
13106							; Handle OSGBPB call that isn't an operation on a file handle. Select
13107							; current FS and pass the request along.
13108							;
13109	.f9d7						nonFileOperation:
13110	.f9d7		5a		phy		                phy
13111	.f9d8		da		phx		                phx
13112	.f9d9		48		pha		                pha
13113	.f9da		20 ba ed	jsr $edba	                jsr selectHAZEL
13114	.f9dd		ad 00 df	lda $df00	                lda hazel.currentFS
13115	.f9e0		20 4d fb	jsr $fb4d	                jsr selectFS
13116	.f9e3		68		pla		                pla
13117	.f9e4		fa		plx		                plx
13118	.f9e5		80 ec		bra $f9d3	                bra passToCurrentFS
13119							                .endproc

13121							;-------------------------------------------------------------------------
13122							;
13123							; OSARGS [AUG p337[
13124							;
13125							;
13126	.f9e7						osargsEntryPoint: .proc
13127	.f9e7		c0 00		cpy #$00	                cpy #$00
13128	.f9e9		d0 2a		bne $fa15	                bne fileOperation            ;taken if file operation
13129	.f9eb		c9 04		cmp #$04	                cmp #$04
13130	.f9ed		b0 26		bcs $fa15	                bcs fileOperation ;taken if Y=0, A>=4 - honorary file operation
13131	.f9ef		48		pha		                pha
13132	.f9f0		20 ba ed	jsr $edba	                jsr selectHAZEL
13133	.f9f3		68		pla		                pla
13134	.f9f4		d0 04		bne $f9fa	                bne notGetFS
13135	.f9f6						getFS:
13136							                ; OSARGS Y=0 A=0 - read current FS number
13137	.f9f6		ad 00 df	lda $df00	                lda hazel.currentFS
13138	.f9f9		60		rts		                rts

13140	.f9fa						notGetFS:
13141	.f9fa		3a		dec a		                dec a
13142	.f9fb		d0 10		bne $fa0d	                bne notGetCommandLine
13143	.f9fd						getCommandLine:
13144							                ; OSARGS Y=0 A=1 - read command line tail address
13145	.f9fd		3a		dec a		                dec a                        ;A=$ff
13146	.f9fe		95 02		sta $02,x	                sta 2,x                    ;store full 32-bit address
13147	.fa00		95 03		sta $03,x	                sta 3,x                    ;store full 32-bit address
13148	.fa02		ad 04 df	lda $df04	                lda hazel.commandLinePointer+0
13149	.fa05		95 00		sta $00,x	                sta 0,x                    ;
13150	.fa07		ad 05 df	lda $df05	                lda hazel.commandLinePointer+1
13151	.fa0a		95 01		sta $01,x	                sta 1,x
13152	.fa0c		60		rts		                rts

13154	.fa0d						notGetCommandLine:
13155	.fa0d		c9 01		cmp #$01	                cmp #argsCheckANFS-1    ;-1 due to the dec a above
13156	.fa0f		f0 03		beq $fa14	                beq rtsFA14            ; OSARGS Y=0 A=2 - Read OldNFS flag
13157	.fa11						getLibFS:
13158	.fa11		ad 02 df	lda $df02	                lda hazel.libFS      ;OSARGS Y=0 A=3 - Read libfs filing system number
13159	.fa14						rtsFA14:
13160	.fa14		60		rts		                rts

13162	.fa15						fileOperation:
13163							                ; Operating on a file. Select appropriate FS first.
13164	.fa15		20 97 fa	jsr $fa97	                jsr selectFSForHandle
13165							                .endproc

13168							;-------------------------------------------------------------------------
13169							;
13170							; Call current FS's OSARGS routine, bypassing the FileSwitch stuff.
13171							;
13172	.fa18						callARGSV:                      ;fa18
13173	.fa18		6c 14 02	jmp ($0214)	                jmp (ARGSV)

13175							;-------------------------------------------------------------------------
13176							;
13177							; OSFIND [AUG p342]
13178							;
13179	.fa1b						osfindEntryPoint: .proc
13180	.fa1b		09 00		ora #$00	                ora #$00        ;A=$00 if a file is to be closed
13181	.fa1d		f0 05		beq $fa24	                beq close       ;branch taken if closing a file
13182	.fa1f		20 6e fa	jsr $fa6e	                jsr parseFileNameAndSelectFS       ;handle something other than a file close
13183	.fa22		80 03		bra $fa27	                bra callFINDV

13185	.fa24						close:
13186	.fa24		20 97 fa	jsr $fa97	                jsr selectFSForHandle
13187	.fa27						callFINDV:
13188	.fa27		6c 1c 02	jmp ($021c)	                jmp (FINDV)
13189							                .pend

13191							;-------------------------------------------------------------------------
13192							;
13193							; OSFILE [AUG p335]
13194							;
13195	.fa2a						osfileEntryPoint:               ;fa2a
13196	.fa2a		da		phx		                phx
13197	.fa2b		5a		phy		                phy
13198	.fa2c		48		pha		                pha
13199	.fa2d		86 f2		stx $f2		                stx stringInputBufferAddress+0
13200	.fa2f		84 f3		sty $f3		                sty stringInputBufferAddress+1
13201	.fa31		a0 11		ldy #$11	                ldy #size(OSFILEParameterBlock)-1
13202	.fa33						-
13203	.fa33		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
13204	.fa35		99 ed 02	sta $02ed,y	                sta osfileParameterBlock,y
13205	.fa38		88		dey		                dey
13206	.fa39		10 f8		bpl $fa33	                bpl -
13207	.fa3b		ae ed 02	ldx $02ed	                ldx osfileParameterBlock+OSFILEParameterBlock.fileName+0
13208	.fa3e		ac ee 02	ldy $02ee	                ldy osfileParameterBlock+OSFILEParameterBlock.fileName+1
13209	.fa41		20 6e fa	jsr $fa6e	                jsr parseFileNameAndSelectFS
13210	.fa44		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
13211	.fa47		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
13212	.fa4a		68		pla		                pla
13213	.fa4b		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
13214	.fa4d		a0 02		ldy #$02	                ldy #>osfileParameterBlock
13215	.fa4f		20 6b fa	jsr $fa6b	                jsr callFILEV
13216	.fa52		7a		ply		                ply
13217	.fa53		84 f3		sty $f3		                sty stringInputBufferAddress+1
13218	.fa55		fa		plx		                plx
13219	.fa56		86 f2		stx $f2		                stx stringInputBufferAddress+0
13220	.fa58		48		pha		                pha
13221	.fa59		a0 11		ldy #$11	                ldy #size(OSFILEParameterBlock)-1
13222	.fa5b						-
13223	.fa5b		b9 ed 02	lda $02ed,y	                lda osfileParameterBlock,y
13224	.fa5e		91 f2		sta ($f2),y	                sta (stringInputBufferAddress),y
13225	.fa60		88		dey		                dey
13226	.fa61		c0 02		cpy #$02	                cpy #$02                     ;don't overwrite file name
13227	.fa63		b0 f6		bcs $fa5b	                bcs -
13228	.fa65		68		pla		                pla
13229	.fa66		a6 f2		ldx $f2		                ldx stringInputBufferAddress+0
13230	.fa68		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
13231	.fa6a		60		rts		                rts

13233	.fa6b						callFILEV:
13234	.fa6b		6c 12 02	jmp ($0212)	                jmp (FILEV)

13236							;-------------------------------------------------------------------------
13237							;
13238							; Parse file name. Handle (and skip) any -FS- tempfs syntax, selecting
13239							; the FS specified if required.
13240							;
13241							; entry:
13242							;
13243							; Y (MSB)/X (LSB) = address of file name string
13244							;
13245							; exit:
13246							;
13247							; Y (MSB)/X (LSB) = address of file name part
13248							;
13249							; - New FS may have been selected
13250							;
13251	.fa6e						parseFileNameAndSelectFS:
13252	.fa6e		48		pha		                pha
13253	.fa6f		a5 f2		lda $f2		                lda stringInputBufferAddress+0
13254	.fa71		48		pha		                pha
13255	.fa72		a5 f3		lda $f3		                lda stringInputBufferAddress+1
13256	.fa74		48		pha		                pha
13257	.fa75		20 ba ed	jsr $edba	                jsr selectHAZEL
13258	.fa78		86 f2		stx $f2		                stx stringInputBufferAddress+0
13259	.fa7a		84 f3		sty $f3		                sty stringInputBufferAddress+1
13260	.fa7c		a0 00		ldy #$00	                ldy #$00
13261	.fa7e		20 a6 fa	jsr $faa6	                jsr parseFileNameFS      ;find -FS- prefix, if any
13262	.fa81		5a		phy		                phy                      ;save offset
13263	.fa82		20 4d fb	jsr $fb4d	                jsr selectFS                 ;select desired FS
13264	.fa85		68		pla		                pla
13265	.fa86		18		clc		                clc
13266	.fa87		65 f2		adc $f2		                adc stringInputBufferAddress+0
13267	.fa89		aa		tax		                tax                          ;save string address LSB
13268	.fa8a		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
13269	.fa8c		90 01		bcc $fa8f	                bcc +
13270	.fa8e		c8		iny		                iny
13271	.fa8f						+
13272	.fa8f		68		pla		                pla
13273	.fa90		85 f3		sta $f3		                sta stringInputBufferAddress+1
13274	.fa92		68		pla		                pla
13275	.fa93		85 f2		sta $f2		                sta stringInputBufferAddress+0
13276	.fa95		68		pla		                pla
13277	.fa96		60		rts		                rts

13279							;-------------------------------------------------------------------------
13280							;
13281							; Select appropriate FS for the given file handle.
13282							;
13283							; entry:
13284							;
13285							; Y = file handle
13286							;
13287							; exit:
13288							;
13289							; - appropriate FS selected
13290							;
13291							; preserves: Y/X/A

13293	.fa97						selectFSForHandle:
13294	.fa97		da		phx		                phx
13295	.fa98		48		pha		                pha
13296	.fa99		20 ba ed	jsr $edba	                jsr selectHAZEL
13297	.fa9c		20 23 fb	jsr $fb23	                jsr findFSForHandle
13298	.fa9f		8a		txa		                txa
13299	.faa0		20 4d fb	jsr $fb4d	                jsr selectFS
13300	.faa3		68		pla		                pla
13301	.faa4		fa		plx		                plx
13302	.faa5		60		rts		                rts

13304							;-------------------------------------------------------------------------
13305							;
13306							; Parse the FS part of a file name, if any, and return the filing
13307							; system to use.
13308							;
13309							; Entry:
13310							;
13311							; (stringInputBufferAddress),y = the string
13312							;
13313							; Exit:
13314							;
13315							; A = FS number to use
13316							;
13317							; (stringInputBufferAddress),y = next char after any tempfs prefix has
13318							; been consumed
13319	.faa6						parseFileNameFS: .proc

13321	.faa6		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
13322	.faa9		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput
13323	.faac		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
13324	.faae		c9 2d		cmp #$2d	                cmp #'-'
13325	.fab0		f0 0c		beq $fabe	                beq parseFSNamePrefix ; branch taken if tempfs syntax
13326	.fab2		2c c6 df	bit $dfc6	                bit hazel.tempFSFlag
13327	.fab5		ad 00 df	lda $df00	                lda hazel.currentFS
13328	.fab8		50 03		bvc $fabd	                bvc +
13329	.faba		ad 01 df	lda $df01	                lda hazel.activeFS
13330	.fabd						+
13331	.fabd		60		rts		                rts

13333	.fabe						parseFSNamePrefix:
13334	.fabe		c8		iny		                iny
13335	.fabf		a2 00		ldx #$00	                ldx #$00
13336	.fac1						LFAC1:
13337	.fac1		bd 06 df	lda $df06,x	                lda hazel.fsInfoBlocks,x ;get FS name char
13338	.fac4		f0 44		beq $fb0a	                beq badFilingSystemName
13339	.fac6		8a		txa		                txa                      ;A=offset in info blocks
13340	.fac7		18		clc		                clc
13341	.fac8		69 08		adc #$08	                adc #size(fsInfoBlock.name)
13342	.faca		85 b0		sta $b0		                sta parseFileNameFSWorkspace.fsInfoOffset
13343	.facc		5a		phy		                phy
13344	.facd						compareFSNameLoop:
13345	.facd		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y

13347							; validate FS name char. Must be letter or digit.

13349	.facf		20 71 ea	jsr $ea71	                jsr isLetter
13350	.fad2		90 08		bcc $fadc	                bcc validFSNameChar           ;branch taken if letter
13351	.fad4		c9 30		cmp #$30	                cmp #'0'
13352	.fad6		90 1b		bcc $faf3	                bcc notValidFSNameChar       ;branch taken if not digit
13353	.fad8		c9 3a		cmp #$3a	                cmp #'9'+1
13354	.fada		b0 17		bcs $faf3	                bcs notValidFSNameChar       ;branch taken if not digit
13355	.fadc						validFSNameChar:
13356	.fadc		e4 b0		cpx $b0		                cpx parseFileNameFSWorkspace.fsInfoOffset
13357	.fade		b0 0b		bcs $faeb	                bcs nextFSInfoBlock ;branch taken if end of FS
13358							                                         ;info block name was reached
13359	.fae0		5d 06 df	eor $df06,x	                eor hazel.fsInfoBlocks,x
13360	.fae3		29 df		and #$df	                and #$DF                 ;Z=1 if char matches FS name
13361	.fae5		d0 04		bne $faeb	                bne nextFSInfoBlock      ;branch taken if not a match
13362	.fae7		e8		inx		                inx                      ;next fs info block byte
13363	.fae8		c8		iny		                iny                      ;next input string byte
13364	.fae9		80 e2		bra $facd	                bra compareFSNameLoop

13366	.faeb						nextFSInfoBlock:
13367	.faeb		7a		ply		                ply
13368	.faec		a6 b0		ldx $b0		                ldx parseFileNameFSWorkspace.fsInfoOffset ;offset of end of name
13369	.faee		e8		inx		                inx
13370	.faef		e8		inx		                inx
13371	.faf0		e8		inx		                inx             ;advance to next entry
13372	.faf1		80 ce		bra $fac1	                bra LFAC1

13374	.faf3						notValidFSNameChar:

13376							; Matching FS name must be terminated with -. Otherwise, it's bad
13377							; syntax, or perhaps an overly long name.

13379	.faf3		c9 2d		cmp #$2d	                cmp #'-'
13380	.faf5		d0 13		bne $fb0a	                bne badFilingSystemName
13381	.faf7		c8		iny		                iny                       ;consume input '-'
13382	.faf8		e4 b0		cpx $b0		                cpx parseFileNameFSWorkspace.fsInfoOffset
13383	.fafa		f0 07		beq $fb03	                beq foundFSInfoBlock     ;branch taken if a match due
13384							                                         ;to being right at end of the
13385							                                         ;FS info block name
13386	.fafc		bd 06 df	lda $df06,x	                lda hazel.fsInfoBlocks,x ;
13387	.faff		c9 20		cmp #$20	                cmp #' '
13388	.fb01		d0 e8		bne $faeb	                bne nextFSInfoBlock      ;branch taken if not a match
13389							                                         ;as tthe supplied name was a
13390							                                         ;prefix of this FS's name
13391	.fb03						foundFSInfoBlock:
13392	.fb03		68		pla		                pla
13393	.fb04		a6 b0		ldx $b0		                ldx parseFileNameFSWorkspace.fsInfoOffset
13394	.fb06		bd 08 df	lda $df08,x	                lda hazel.fsInfoBlocks+(fsInfoBlock.fsNumber-(fsInfoBlock.name+size(fsInfoBlock.name))),x
13395	.fb09		60		rts		                rts

13397	.fb0a						badFilingSystemName:
13398	.fb0a		00		brk #		                brk
13399	>fb0b		f8 42 61 64 20 66 69 6c		                .text $f8,'Bad filing system name',0
	>fb13		69 6e 67 20 73 79 73 74 65 6d 20 6e 61 6d 65 00
13400							                .pend

13402							;-------------------------------------------------------------------------
13403							;
13404							; Find FS for the given handle
13405							;
13406							; entry:
13407							;
13408							; Y = file handle
13409							;
13410							; exit:
13411							;
13412							; X = FS number - will just use current FS if none suitable found
13413							;
13414	.fb23						findFSForHandle: .proc
13415	.fb23		48		pha		                pha                          ;
13416	.fb24		5a		phy		                phy                          ;
13417	.fb25		98		tya		                tya                          ;A = handle to search for
13418	.fb26		a0 00		ldy #$00	                ldy #$00                     ;
13419	.fb28						loop:
13420	.fb28		be 06 df	ldx $df06,y	                ldx hazel.fsInfoBlocks.name+0,y
13421	.fb2b		f0 15		beq $fb42	                beq notFound                  ;taken if terminating entry
13422	.fb2d		d9 0e df	cmp $df0e,y	                cmp hazel.fsInfoBlocks.minHandle,y
13423	.fb30		90 07		bcc $fb39	                bcc next                     ;taken if not this FS
13424	.fb32		d9 0f df	cmp $df0f,y	                cmp hazel.fsInfoBlocks.maxHandle,y
13425	.fb35		90 10		bcc $fb47	                bcc found                    ;taken if this FS
13426	.fb37		f0 0e		beq $fb47	                beq found                    ;taken if this FS

13428	.fb39						next:
13429	.fb39		48		pha		                pha
13430	.fb3a		98		tya		                tya
13431	.fb3b		18		clc		                clc
13432	.fb3c		69 0b		adc #$0b	                adc #size(fsInfoBlock)
13433	.fb3e		a8		tay		                tay
13434	.fb3f		68		pla		                pla
13435	.fb40		80 e6		bra $fb28	                bra loop

13437	.fb42						notFound:
13438	.fb42		ae 00 df	ldx $df00	                ldx hazel.currentFS
13439	.fb45		80 03		bra $fb4a	                bra done

13441	.fb47						found:
13442	.fb47		be 10 df	ldx $df10,y	                ldx hazel.fsInfoBlocks.fsNumber,y
13443	.fb4a						done:
13444	.fb4a		7a		ply		                ply
13445	.fb4b		68		pla		                pla
13446	.fb4c		60		rts		                rts
13447							                .endproc

13449							;-------------------------------------------------------------------------
13450							;
13451							; Select filing system in A.
13452							;
13453							; Entry:
13454							;
13455							; A = FS number
13456							;
13457	.fb4d						selectFS:                               ;fb4d
13458	.fb4d		cd 01 df	cmp $df01	                cmp hazel.activeFS      ; Check active fs
13459	.fb50		f0 16		beq $fb68	                beq rtsFB68               ; Already active fs, return
13460	.fb52		5a		phy		                phy
13461	.fb53		da		phx		                phx
13462	.fb54		a8		tay		                tay
13463	.fb55		3a		dec a		                dec a
13464	.fb56		d0 07		bne $fb5f	                bne LFB5F       ;taken if not FS 1 (tape)

13466							; ??? - only if trying to select tape FS

13468	.fb58		a9 04		lda #$04	                lda #$04
13469	.fb5a		24 e2		bit $e2		                bit $E2
13470	.fb5c		d0 01		bne $fb5f	                bne LFB5F
13471	.fb5e		c8		iny		                iny
13472	.fb5f						LFB5F:
13473	.fb5f		5a		phy		                phy
13474	.fb60		a2 12		ldx #$12	                ldx #romServiceCallInitialiseFilingSystem
13475	.fb62		20 72 ee	jsr $ee72	                jsr makeROMServiceCall
13476	.fb65		68		pla		                pla
13477	.fb66		fa		plx		                plx
13478	.fb67		7a		ply		                ply
13479	.fb68						rtsFB68:
13480	.fb68		60		rts		                rts

13482							;-------------------------------------------------------------------------
13483							;
13484							; FileSwitch FSC
13485							; ==============
13486							;
13487	.fb69						fileswitchFSCEntryPoint:
13488	.fb69		48		pha		                pha                          ;save request type
13489	.fb6a		20 ba ed	jsr $edba	                jsr selectHAZEL
13490	.fb6d		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
13491	.fb70		68		pla		                pla                          ;restore request type
13492	.fb71		48		pha		                pha                          ;save request type
13493	.fb72		da		phx		                phx                          ;save request X
13494	.fb73		0a		asl a		                asl a
13495	.fb74		aa		tax		                tax
13496	.fb75		c9 17		cmp #$17	                cmp #11*2+1
13497	.fb77		b0 03		bcs $fb7c	                bcs fileswitchPassFSCToCurrentFS ;taken if out of range
13498	.fb79		7c 81 fb	jmp ($fb81,x)	                jmp (fileswitchFSCRoutinesTable,x)

13500							;-------------------------------------------------------------------------
13501							;
13502							; Pass to filing system's FSC
13503							;
13504							; There's 2 entry points - fileswitchPassFSCToCurrentFS, for
13505							; when X and A are both on the stack, and
13506							; fileswitchPassFSCToCurrentFS_X, for when only A is on the
13507							; stack.
13508							;
13509	.fb7c						fileswitchPassFSCToCurrentFS:
13510	.fb7c						fileswitchFSCNewFS:
13511	.fb7c						fileswitchFSCFileHandleRange:
13512	.fb7c						fileswitchFSCStarCommand:
13513	.fb7c		fa		plx		                plx                          ;restore request X
13514	.fb7d						fileswitchPassFSCToCurrentFS_X:
13515	.fb7d		68		pla		                pla                          ;restore request type
13516	.fb7e		6c da df	jmp ($dfda)	                jmp (hazel.activeFSCV) ;call active FS's real FSCV entry point

13518							;-------------------------------------------------------------------------
13519							;
13520							; FileSwitch FSC table
13521							;
13522	.fb81						fileswitchFSCRoutinesTable:
13523	>fb81		a6 fb				                .word fileswitchFSCOPT
13524	>fb83		9f fb				                .word fileswitchFSCCheckEOF
13525	>fb85		b3 fb				                .word fileswitchFSCStarSlash
13526	>fb87		99 fb				                .word fileswitchFSCUnknownCommand
13527	>fb89		b3 fb				                .word fileswitchFSCStarRUN
13528	>fb8b		b8 fb				                .word fileswitchFSCStarCAT
13529	>fb8d		7c fb				                .word fileswitchFSCNewFS
13530	>fb8f		7c fb				                .word fileswitchFSCFileHandleRange
13531	>fb91		7c fb				                .word fileswitchFSCStarCommand
13532	>fb93		b8 fb				                .word fileswitchFSCStarEX
13533	>fb95		b8 fb				                .word fileswitchFSCStarINFO
13534	>fb97		e8 fb				                .word fileswitchFSCRUNLibrary

13536							;-------------------------------------------------------------------------
13537							;
13538							; FSC 3 - *command [AUG p344]
13539							;
13540	.fb99						fileswitchFSCUnknownCommand:
13541	.fb99		fa		plx		                plx
13542	.fb9a		20 c1 fb	jsr $fbc1	                jsr getCommandLinePointer
13543	.fb9d		80 de		bra $fb7d	                bra fileswitchPassFSCToCurrentFS_X

13545							;-------------------------------------------------------------------------
13546							;
13547							; FSC 1 - check EOF [AUG p343]
13548							;
13549	.fb9f						fileswitchFSCCheckEOF:
13550	.fb9f		7a		ply		                ply                         ;Y = file handle
13551	.fba0		5a		phy		                phy                         ;restore stack arrangement
13552	.fba1		20 97 fa	jsr $fa97	                jsr selectFSForHandle
13553	.fba4		80 d6		bra $fb7c	                bra fileswitchPassFSCToCurrentFS

13555							;-------------------------------------------------------------------------
13556							;
13557							; FSC 0 - *OPT [AUG p343]
13558							;
13559	.fba6						fileswitchFSCOPT:
13560	.fba6		2c c6 df	bit $dfc6	                bit hazel.tempFSFlag   ; Check temporary fs flag
13561	.fba9		70 d1		bvs $fb7c	                bvs fileswitchPassFSCToCurrentFS
13562	.fbab		ad 00 df	lda $df00	                lda hazel.currentFS ; Get current filing system number

13564							;-------------------------------------------------------------------------
13565							;
13566							; Pass FSCV request through to a particular FS.
13567							;
13568							; entry:
13569							;
13570							; A = FS to select
13571							;
13572							; Y = FSCV Y
13573							;
13574							; S = [FSCV X; FSCV A]
13575							;
13576	.fbae						fileswitchPassFSCToSpecificFS:
13577	.fbae		20 4d fb	jsr $fb4d	                jsr selectFS        ; Select filing system
13578	.fbb1		80 c9		bra $fb7c	                bra fileswitchPassFSCToCurrentFS

13580							;-------------------------------------------------------------------------
13581							;
13582							; FSC 2 - */filename [AUG p343]
13583							; FSC 4 - *RUN filename [AUG p344]
13584							;
13585	.fbb3						fileswitchFSCStarSlash:
13586	.fbb3						fileswitchFSCStarRUN:
13587	.fbb3		fa		plx		                plx
13588	.fbb4		20 c1 fb	jsr $fbc1	                jsr getCommandLinePointer ; Skip '*'s and spaces, set command line address
13589	.fbb7		da		phx		                phx             ; Continue on to pass to filing system

13592							;-------------------------------------------------------------------------
13593							;
13594							; FSC 5 - *CAT [AUG p344]
13595							; FSC 9 - *EX [NAUG p257]
13596							; FSC, 10 - *INFO [NAUG p257]
13597							;
13598	.fbb8						fileswitchFSCStarCAT:
13599	.fbb8						fileswitchFSCStarEX:
13600	.fbb8						fileswitchFSCStarINFO:
13601	.fbb8		fa		plx		                plx
13602	.fbb9		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
13603	.fbbc		20 6e fa	jsr $fa6e	                jsr parseFileNameAndSelectFS
13604	.fbbf		80 bc		bra $fb7d	                bra fileswitchPassFSCToCurrentFS_X

13606							;-------------------------------------------------------------------------
13607							;
13608							; Get command line pointer.
13609							;
13610							; Entry:
13611							;
13612							; X/Y - pointer to CR-terminated command line string
13613							;
13614							; Exit:
13615							;
13616							; X/Y, (hazel.commandLinePointer) - pointer to first non-space char in
13617							; command line string
13618	.fbc1						getCommandLinePointer: .proc ;fbc1
13619	.fbc1		86 f2		stx $f2		                stx stringInputBufferAddress+0
13620	.fbc3		84 f3		sty $f3		                sty stringInputBufferAddress+1

13622							; skip spaces. Stop if terminating CR encountered.

13624	.fbc5		a0 ff		ldy #$ff	                ldy #$FF
13625	.fbc7						-
13626	.fbc7		c8		iny		                iny
13627	.fbc8		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
13628	.fbca		c9 0d		cmp #$0d	                cmp #$0D
13629	.fbcc		f0 04		beq $fbd2	                beq +
13630	.fbce		c9 20		cmp #$20	                cmp #' '
13631	.fbd0		d0 f5		bne $fbc7	                bne -

13633	.fbd2						+

13635							; Hmm. Didn't we just do this bit already?

13637	.fbd2		20 ff f2	jsr $f2ff	                jsr skipSpacesAndCheckForCRInStringInput

13639							; Store address of first non-space char in the HAZEL command line
13640							; pointer.

13642	.fbd5		98		tya		                tya
13643	.fbd6		18		clc		                clc
13644	.fbd7		65 f2		adc $f2		                adc stringInputBufferAddress+0
13645	.fbd9		8d 04 df	sta $df04	                sta hazel.commandLinePointer+0
13646	.fbdc		a5 f3		lda $f3		                lda stringInputBufferAddress+1
13647	.fbde		69 00		adc #$00	                adc #$00
13648	.fbe0		8d 05 df	sta $df05	                sta hazel.commandLinePointer+1
13649	.fbe3		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
13650	.fbe5		a6 f2		ldx $f2		                ldx stringInputBufferAddress+0
13651	.fbe7		60		rts		                rts
13652							                .pend

13654							;-------------------------------------------------------------------------
13655							;
13656							; FSC 11 - RUN from libfs [NAUG p257]
13657							;
13658	.fbe8						fileswitchFSCRUNLibrary:
13659	.fbe8		ad 02 df	lda $df02	                lda hazel.libFS      ; Is a libfs set?
13660	.fbeb		10 c1		bpl $fbae	                bpl fileswitchPassFSCToSpecificFS
13661	.fbed						badCommandError:
13662	.fbed		00		brk #		                brk
13663	>fbee		fe				                .byte 254
13664	>fbef		42 61 64 20 63 6f 6d 6d		                .text "Bad command"
	>fbf7		61 6e 64
13665	.fbfa		00		brk #		                brk

13667							;-------------------------------------------------------------------------

13677							;-------------------------------------------------------------------------
13678							;
13679							; Tube 6502 language ROM relocation
13680							;

13988							;-------------------------------------------------------------------------
13989							;
13990							; Delay after a possible EEPROM write, to give the device time to time
13991							; out out of write mode. Trying to stay reasonably under 10 ms. Don't
13992							; interfere with the 100 Hz timer, but give the 100 Hz routine at
13993							; least a bit of time to run.
13994							;
13995							; 256 times round inner loop=2+256*2+255*3+2=1281 cycles
13996							;
13997							; 1281 cycles = 0.6405 ms
13998							;
13999							; 12 iterations = 15372+(a bit) cycles=~7.7 ms
14000							;
14001							; This can be revisited if required.
14002							;
14003							; Preserves: A/X/P

14024							;-------------------------------------------------------------------------

14026	.fbfb						mosUnusedBegin:
14027	>fbfb		ff ff ff ff ff			                .fill $fc00-*,$ff
14028	=5						mosUnusedSize=*-mosUnusedBegin

14066							;-------------------------------------------------------------------------
14067							;
14068							; Credits - normally hidden by the I/O region.
14069							;

14072	>fc00		28 43 29 20 31 39 38 34		                .text "(C) 1984 Acorn Computers Ltd."
	>fc08		20 41 63 6f 72 6e 20 43 6f 6d 70 75 74 65 72 73
	>fc18		20 4c 74 64 2e
14073	>fc1d		54 68 61 6e 6b 73 20 61		                .text "Thanks are due to the following contributors to the BBC Computer (among others too numerous to mention):- "
	>fc25		72 65 20 64 75 65 20 74 6f 20 74 68 65 20 66 6f
	>fc35		6c 6c 6f 77 69 6e 67 20 63 6f 6e 74 72 69 62 75
	>fc45		74 6f 72 73 20 74 6f 20 74 68 65 20 42 42 43 20
	>fc55		43 6f 6d 70 75 74 65 72 20 28 61 6d 6f 6e 67 20
	>fc65		6f 74 68 65 72 73 20 74 6f 6f 20 6e 75 6d 65 72
	>fc75		6f 75 73 20 74 6f 20 6d 65 6e 74 69 6f 6e 29 3a
	>fc85		2d 20
14082	>fc87		44 61 76 69 64 20 41 6c		                .text "David Allen,"
	>fc8f		6c 65 6e 2c
14084	>fc93		43 6c 69 76 65 20 41 6e		                .text "Clive Angel,"
	>fc9b		67 65 6c 2c
14086	>fc9f		44 61 76 69 64 20 42 65		                .text "David Bell,"
	>fca7		6c 6c 2c
14087	>fcaa		50 61 75 6c 20 42 6f 6e		                .text "Paul Bond,"
	>fcb2		64 2c
14089	>fcb4		41 6c 6c 65 6e 20 42 6f		                .text "Allen Boothroyd,"
	>fcbc		6f 74 68 72 6f 79 64 2c
14091	>fcc4		4a 75 6c 69 61 6e 20 42		                .text "Julian Brown,"
	>fccc		72 6f 77 6e 2c
14092	>fcd1		54 75 64 6f 72 20 42 72		                .text "Tudor Brown,"
	>fcd9		6f 77 6e 2c
14096	>fcdd		42 72 69 61 6e 20 43 6f		                .text "Brian Cockburn,"
	>fce5		63 6b 62 75 72 6e 2c
14101	>fcec		50 65 74 65 20 43 6f 63		                .text "Pete Cockerell,"
	>fcf4		6b 65 72 65 6c 6c 2c
14103	>fcfb		4d 61 72 6b 20 43 6f 6c		                .text "Mark Colton,"
	>fd03		74 6f 6e 2c
14104	>fd07		43 68 72 69 73 20 43 75		                .text "Chris Curry,"
	>fd0f		72 72 79 2c
14109	>fd13		4a 6f 65 20 44 75 6e 6e		                .text "Joe Dunn,"
	>fd1b		2c
14114	>fd1c		50 61 75 6c 20 46 72 65		                .text "Paul Freakley,"
	>fd24		61 6b 6c 65 79 2c
14120	>fd2a		53 74 65 76 65 20 46 75		                .text "Steve Furber,"
	>fd32		72 62 65 72 2c
14121	>fd37		4d 61 72 74 79 6e 20 47		                .text "Martyn Gilbert,"
	>fd3f		69 6c 62 65 72 74 2c
14122	>fd46		4a 6f 68 6e 20 48 61 72		                .text "John Harrison,"
	>fd4e		72 69 73 6f 6e 2c
14123	>fd54		48 65 72 6d 61 6e 6e 20		                .text "Hermann Hauser,"
	>fd5c		48 61 75 73 65 72 2c
14125	>fd63		4d 69 6b 65 20 48 69 6c		                .text "Mike Hill,"
	>fd6b		6c 2c
14130	>fd6d		4a 6f 68 6e 20 48 6f 72		                .text "John Horton,"
	>fd75		74 6f 6e 2c
14138	>fd79		4e 65 69 6c 20 4a 6f 68		                .text "Neil Johnson,"
	>fd81		6e 73 6f 6e 2c
14140	>fd86		52 69 63 68 61 72 64 20		                .text "Richard King,"
	>fd8e		4b 69 6e 67 2c
14141	>fd93		44 61 76 69 64 20 4b 69		                .text "David Kitson,"
	>fd9b		74 73 6f 6e 2c
14145	>fda0		4a 75 6c 69 61 6e 20 4c		                .text "Julian Lomberg,"
	>fda8		6f 6d 62 65 72 67 2c
14146	>fdaf		52 6f 62 20 4d 61 63 6d		                .text "Rob Macmillan,"
	>fdb7		69 6c 6c 61 6e 2c
14150	>fdbd		52 69 63 68 61 72 64 20		                .text "Richard Manby,"
	>fdc5		4d 61 6e 62 79 2c
14152	>fdcb		50 65 74 65 72 20 4d 63		                .text "Peter McKenna,"
	>fdd3		4b 65 6e 6e 61 2c
14153	>fdd9		41 6e 64 72 65 77 20 4d		                .text "Andrew McKernan,"
	>fde1		63 4b 65 72 6e 61 6e 2c
14157	>fde9		4d 69 63 6b 20 4e 65 69		                .text "Mick Neil,"
	>fdf1		6c 2c
14159	>fdf3		49 61 6e 20 4e 69 62 6c		                .text "Ian Niblock,"
	>fdfb		6f 63 6b 2c
14165	>fdff		47 6c 65 6e 20 4e 69 63		                .text "Glen Nicholls,"
	>fe07		68 6f 6c 6c 73 2c
14166	>fe0d		52 6f 62 65 72 74 20 4e		                .text "Robert Nokes,"
	>fe15		6f 6b 65 73 2c
14170	>fe1a		52 69 63 68 61 72 64 20		                .text "Richard Page,"
	>fe22		50 61 67 65 2c
14172	>fe27		53 74 65 76 65 20 50 61		                .text "Steve Parsons,"
	>fe2f		72 73 6f 6e 73 2c
14175	>fe35		45 64 20 50 68 69 70 70		                .text "Ed Phipps,"
	>fe3d		73 2c
14177	>fe3f		4a 6f 68 6e 20 52 61 64		                .text "John Radcliffe,"
	>fe47		63 6c 69 66 66 65 2c
14178	>fe4e		52 69 63 6b 20 52 61 6e		                .text "Rick Rand,"
	>fe56		64 2c
14182	>fe58		42 72 69 61 6e 20 52 6f		                .text "Brian Robertson,"
	>fe60		62 65 72 74 73 6f 6e 2c
14186	>fe68		52 69 63 68 61 72 64 20		                .text "Richard Russell,"
	>fe70		52 75 73 73 65 6c 6c 2c
14188	>fe78		47 6f 72 64 6f 6e 20 53		                .text "Gordon Sage,"
	>fe80		61 67 65 2c
14189	>fe84		54 65 72 72 79 20 53 63		                .text "Terry Scotcher,"
	>fe8c		6f 74 63 68 65 72 2c
14195	>fe93		44 61 76 69 64 20 53 65		                .text "David Seal,"
	>fe9b		61 6c 2c
14201	>fe9e		50 61 75 6c 20 53 77 69		                .text "Paul Swindell,"
	>fea6		6e 64 65 6c 6c 2c
14203	>feac		4a 6f 6e 20 54 68 61 63		                .text "Jon Thackray,"
	>feb4		6b 72 61 79 2c
14207	>feb9		48 75 67 6f 20 54 79 73		                .text "Hugo Tyson,"
	>fec1		6f 6e 2c
14209	>fec4		41 64 72 69 61 6e 20 57		                .text "Adrian Warner,"
	>fecc		61 72 6e 65 72 2c
14213	>fed2		4a 65 73 73 20 57 69 6c		                .text "Jess Wills,"
	>feda		6c 73 2c
14217	>fedd		52 6f 67 65 72 20 57 69		                .text "Roger Wilson,"
	>fee5		6c 73 6f 6e 2c
14218	>feea		47 72 61 68 61 6d 20 57		                .text "Graham Winterflood."
	>fef2		69 6e 74 65 72 66 6c 6f 6f 64 2e
14219							                ;.text "   "
14228	>fefd		20 20 20			                .align 256,' '

14234							;-------------------------------------------------------------------------

14238							;-------------------------------------------------------------------------

14240	.ff00						E_USERV: ; ff00
14241	.ff00		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14242	.ff03						E_BRKV: ; ff03
14243	.ff03		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14244	.ff06						E_IRQ1V: ; ff06
14245	.ff06		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14246	.ff09						E_IRQ2V: ; ff09
14247	.ff09		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14248	.ff0c						E_CLIV: ; ff0c
14249	.ff0c		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14250	.ff0f						E_BYTEV: ; ff0f
14251	.ff0f		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14252	.ff12						E_WORDV: ; ff12
14253	.ff12		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14254	.ff15						E_WRCHV: ; ff15
14255	.ff15		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14256	.ff18						E_RDCHV: ; ff18
14257	.ff18		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14258	.ff1b						E_FILEV: ; ff1b
14259	.ff1b		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14260	.ff1e						E_ARGSV: ; ff1e
14261	.ff1e		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14262	.ff21						E_BGETV: ; ff21
14263	.ff21		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14264	.ff24						E_BPUTV: ; ff24
14265	.ff24		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14266	.ff27						E_GBPBV: ; ff27
14267	.ff27		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14268	.ff2a						E_FINDV: ; ff2a
14269	.ff2a		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14270	.ff2d						E_FSCV: ; ff2d
14271	.ff2d		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14272	.ff30						E_EVENTV: ; ff30
14273	.ff30		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14274	.ff33						E_UPTV: ; ff33
14275	.ff33		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14276	.ff36						E_NETV: ; ff36
14277	.ff36		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14278	.ff39						E_VDUV: ; ff39
14279	.ff39		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14280	.ff3c						E_KEYV: ; ff3c
14281	.ff3c		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14282	.ff3f						E_INSV: ; ff3f
14283	.ff3f		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14284	.ff42						E_REMV: ; ff42
14285	.ff42		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14286	.ff45						E_CNPV: ; ff45
14287	.ff45		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14288	.ff48						E_IND1V: ; ff48
14289	.ff48		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14290	.ff4b						E_IND2V: ; ff4b
14291	.ff4b		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14292	.ff4e						E_IND3V: ; ff4e
14293	.ff4e		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint

14295							;-------------------------------------------------------------------------

14297	.ff51						extendedVectorEntryPoint:
14298							                ; .if CFA3000
14299							                ; ;...
14300							                ; .else
14301							                ; $10b,x = rL
14302	.ff51		48		pha		                pha                 ; $10a,x  (old ROMSEL)
14303	.ff52		48		pha		                pha                 ; $109,x  (old ACCCON)
14304	.ff53		48		pha		                pha                 ; $108,x  (thunk rH)
14305	.ff54		48		pha		                pha                 ; $107,x  (thunk rL)
14306	.ff55		48		pha		                pha                 ; $106,x  (jump dest MSB)
14307	.ff56		48		pha		                pha                 ; $105,x  (jump dest LSB)
14308	.ff57		08		php		                php                 ; $104,x  (P for RTI)
14309	.ff58		48		pha		                pha                 ; $103,x  (old A)
14310	.ff59		da		phx		                phx                 ; $102,x  (old X)
14311	.ff5a		5a		phy		                phy                 ; $101,x  (old Y)
14312	.ff5b		ba		tsx		                tsx
14313	.ff5c		a9 ff		lda #$ff	                lda #>extendedVectorReturnThunk-1
14314	.ff5e		9d 08 01	sta $0108,x	                sta $0108,x
14315	.ff61		a9 8c		lda #$8c	                lda #<extendedVectorReturnThunk-1
14316	.ff63		9d 07 01	sta $0107,x	                sta $0107,x

14318							                ; this routine is only ever called from $ff00, $ff03,
14319							                ; $ff06, etc. - so rL holds vectorIndex*3+2, suitable
14320							                ; for indexing into the extended vector space.
14321	.ff66		bc 0b 01	ldy $010b,x	                ldy $010B,x                  ;Y=vectorIndex*3+2
14322	.ff69		b9 9d 0d	lda $0d9d,y	                lda extendedVectorSpace-2,y  ;get vector LSB
14323	.ff6c		9d 05 01	sta $0105,x	                sta $0105,x                  ;
14324	.ff6f		b9 9e 0d	lda $0d9e,y	                lda extendedVectorSpace-1,y  ;get vector MSB
14325	.ff72		9d 06 01	sta $0106,x	                sta $0106,x
14326	.ff75		a5 f4		lda $f4		                lda $F4
14327	.ff77		9d 0a 01	sta $010a,x	                sta $010A,x
14328	.ff7a		ad 34 fe	lda $fe34	                lda ACCCON
14329	.ff7d		9d 09 01	sta $0109,x	                sta $0109,x

14331							                ; New stack layout:
14332							                ;
14333							                ; $10a,x - old ROMSEL
14334							                ; $109,x - old ACCCON
14335							                ; $108,x - thunk rH
14336							                ; $107,x - thunk rL
14337							                ; $106,x - jump dest MSB
14338							                ; $105,x - jump dest LSB
14339							                ; $104,x - P (for RTI)
14340							                ; $103,x - old A
14341							                ; $102,x - old X
14342							                ; $101,x - old Y

14344	.ff80		20 ba ed	jsr $edba	                jsr selectHAZEL
14345	.ff83		b9 9f 0d	lda $0d9f,y	                lda extendedVectorSpace,y    ;get vector ROM number
14346	.ff86		20 92 e5	jsr $e592	                jsr selectROMA
14347	.ff89		7a		ply		                ply
14348	.ff8a		fa		plx		                plx
14349	.ff8b		68		pla		                pla
14350	.ff8c		40		rti		                rti
14351							;                .endif

14353							;-------------------------------------------------------------------------

14355	.ff8d						extendedVectorReturnThunk:
14356	.ff8d		08		php		                php
14357	.ff8e		48		pha		                pha
14358	.ff8f		da		phx		                phx
14359	.ff90		ba		tsx		                tsx
14360	.ff91		bd 02 01	lda $0102,x	                lda $0102,x
14361	.ff94		9d 06 01	sta $0106,x	                sta $0106,x
14362	.ff97		bd 03 01	lda $0103,x	                lda $0103,x
14363	.ff9a		9d 07 01	sta $0107,x	                sta $0107,x
14364	.ff9d		fa		plx		                plx
14365	.ff9e		68		pla		                pla
14366	.ff9f		68		pla		                pla
14367	.ffa0		68		pla		                pla
14368	.ffa1		20 b0 ed	jsr $edb0	                jsr selectMOSOrHAZEL
14369	.ffa4		68		pla		                pla
14370	.ffa5		20 92 e5	jsr $e592	                jsr selectROMA
14371	.ffa8		68		pla		                pla
14372	.ffa9		28		plp		                plp
14373	.ffaa						rtsFFAA:
14374	.ffaa		60		rts		                rts

14376							;-------------------------------------------------------------------------
14377							;
14378							; OSBYTE 150 (&96) Read from SHEILA (&FE00 - &FEFF) [MasRef D.2-45]
14379							;
14380	.ffab						osbyte96:
14381	.ffab		bc 00 fe	ldy $fe00,x	                ldy $fe00,x
14382	.ffae		60		rts		                rts

14384							;-------------------------------------------------------------------------
14385							;
14386							; OSBYTE 157 (&9D) Write byte across Tube [MasRef D.2-48]
14387							;
14388	.ffaf						osbyte9D:
14389	.ffaf		8a		txa		                txa
14390	.ffb0		80 22		bra $ffd4	                bra OSBPUT

14392	.ffb2		00		brk #		                brk

14394							;-------------------------------------------------------------------------
14395	.ffb3						OSWRSC:
14396	.ffb3		4c 02 f4	jmp $f402	                jmp oswrscEntryPoint ; FFB3
14397	>ffb6		36				                .byte defaultVectorTable.end-defaultVectorTable ;
14398	>ffb7		d7 e2				                .word defaultVectorTable ;
14399	.ffb9						OSRDSC:
14400	.ffb9		4c fc f3	jmp $f3fc	                jmp osrdscEntryPoint ; FFB9
14401	.ffbc						VDUCHR:
14402	.ffbc		4c ec f3	jmp $f3ec	                jmp vduChrEntryPoint ; FFBC
14403	.ffbf						OSEVEN:
14404	.ffbf		4c 28 ea	jmp $ea28	                jmp eventEntryPoint ; FFBF
14405	.ffc2						GSINIT:
14406	.ffc2		4c 6e f2	jmp $f26e	                jmp gsinitEntryPoint ; FFC2
14407	.ffc5						GSREAD:
14408	.ffc5		4c 7f f2	jmp $f27f	                jmp gsreadEntryPoint ; FFC5
14409	.ffc8						NVRDCH:
14410	.ffc8		4c bc e7	jmp $e7bc	                jmp osrdchEntryPoint                    ; FFC8
14411	.ffcb						NVWRCH:
14412	.ffcb		4c 22 e8	jmp $e822	                jmp oswrchEntryPoint                    ; FFCB
14413	.ffce						OSFIND:
14414	.ffce		4c 1b fa	jmp $fa1b	                jmp osfindEntryPoint                    ; FFCE
14415	.ffd1						OSGBPB:
14416	.ffd1		4c be f9	jmp $f9be	                jmp osgbpbEntryPoint                    ; FFD1
14417	.ffd4						OSBPUT:
14418	.ffd4		4c b2 f9	jmp $f9b2	                jmp osbputEntryPoint                    ; FFD4
14419	.ffd7						OSBGET:
14420	.ffd7		4c b8 f9	jmp $f9b8	                jmp osbgetEntryPoint                    ; FFD7
14421	.ffda						OSARGS:
14422	.ffda		4c e7 f9	jmp $f9e7	                jmp osargsEntryPoint ; FFDA
14423	.ffdd						OSFILE:
14424	.ffdd		4c 2a fa	jmp $fa2a	                jmp osfileEntryPoint ; FFDD
14425	.ffe0						OSRDCH:
14426	.ffe0		6c 10 02	jmp ($0210)	                jmp (RDCHV)                  ; FFE0
14427	.ffe3						OSASCI:
14428	.ffe3		c9 0d		cmp #$0d	                cmp #$0D                     ; FFE3
14429	.ffe5		d0 07		bne $ffee	                bne OSWRCH                   ; FFE5
14430	.ffe7						OSNEWL:
14431	.ffe7		a9 0a		lda #$0a	                lda #$0A                     ; FFE7
14432	.ffe9		20 ee ff	jsr $ffee	                jsr OSWRCH                   ; FFE9
14433	.ffec						printCR:
14434							                ; not an official entry point, but saves 2 bytes if
14435							                ; you just want to print a 13.
14436	.ffec		a9 0d		lda #$0d	                lda #$0D                     ; FFEC
14437	.ffee						OSWRCH:
14438	.ffee		6c 0e 02	jmp ($020e)	                jmp (WRCHV)                  ; FFEE
14439	.fff1						OSWORD:
14440	.fff1		6c 0c 02	jmp ($020c)	                jmp (WORDV)                  ; FFF1
14441	.fff4						OSBYTE:
14442	.fff4		6c 0a 02	jmp ($020a)	                jmp (BYTEV)                  ; FFF4
14443	.fff7						OSCLI:
14444	.fff7		6c 08 02	jmp ($0208)	                jmp (CLIV)                  ; FFF7

14446	.fffa						LFFFA:                                       ; FFFA NMIV
14447	>fffa		00 0d				                .word nmiEntryPoint
14448	.fffc						LFFFC:                                       ; FFFB RESETV
14449	>fffc		64 e3				                .word resetEntryPoint
14450	.fffe						LFFFE:                                       ; FFFE IRQV
14451	>fffe		9e e5				                .word irqEntryPoint

:1	;******  Return to file: mos320.s65

77							                .endsection

;******  End of listing