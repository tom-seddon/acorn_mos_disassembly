
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass.exe --m65c02 --nostart -Wall -q --case-sensitive --line-numbers --verbose-list -Lbuild/mos329.full.lst --output-section mos -o build/329/mos.rom --output-section utils -o build/329/utils.rom --output-section ext -o build/329/ext.rom mos329.s65
; Wed Aug 13 22:58:16 2025

;Line	;Offset	;PC	;Hex		;Monitor	;Source

:1	;******  Processing input file: mos329.s65

1							                .include "src/hardware.s65"

:2	;******  Processing file: src/hardware.s65

1							;-------------------------------------------------------------------------

3							                .virtual $fe00

5	.fe00						CRTC: .block

7							                .virtual 8
8	.0008						R8: .block
9	=$00						normalSync=%00000000
10	=$01						interlaceSync=%00000001
11	=$02						normalSyncAlt=%00000010
12	=$03						interlaceSyncAndVideo=%00000011

14	=0						displayDelay0=0<<4
15	=16						displayDelay1=1<<4
16	=32						displayDelay2=2<<4
17	=48						displayDisable=3<<4

19	=0						cursorDelay0=0<<6
20	=64						cursorDelay1=1<<6
21	=128						cursorDelay2=2<<6
22	=192						cursorDisable=3<<6
23							                .endblock
24							                .endvirtual

26							                .virtual 10
27	.000a						R10: .block
28	=$40						blink=$40
29	=$20						slowBlink=$20
30							                .endblock
31							                .endvirtual

33							                .endblock

35							                .endvirtual

37							;-------------------------------------------------------------------------
38							; ACIA=$fe08
39	=$fe10						SERPROC=$fe10
40							;HADC=$fe18
42	=$fee0						TUBE=$fee0
44	=$fe30						ROMSEL=$fe30
45							;ACCCON=$fe34
46							                .virtual $fe20
47	.fe20						VCONTROL: .block
48	=$01						flash=$01
49	=$02						isTeletext=$02
50	=$00						shift2MHz=$00
51	=$04						shift4MHz=$04
52	=$08						shift8MHz=$08
53	=$0c						shift16MHz=$0c
54	=$00						crtc1MHz=$00
55	=$10						crtc2MHz=$10
56	=$00						cursor____=$00
57	=$20						cursor__XX=$20
58	=$40						cursor_X__=$40
59	=$60						cursor_XXX=$60
60	=$80						cursorX___=$80
61	=$a0						cursorX_XX=$a0
62	=$c0						cursorXX__=$c0
63	=$e0						cursorXXXX=$e0
64							                .endblock
65							                .endvirtual
66	=$fe21						VPALETTE=$fe21

68							;-------------------------------------------------------------------------

70							                .virtual $fe08
71	.fe08						ACIA: .block

73	.fe08						control: .block
74	=0						counterDivide1=0<<0
75	=1						counterDivide16=1<<0
76	=2						counterDivide64=2<<0
77	=3						reset=3<<0

79	=0						word7DataEventParity2Stop=0<<2
80	=4						word7DataOddParity2Stop=1<<2
81	=8						word7DataEvenParity1Stop=2<<2
82	=12						word7DataOddParity1Stop=3<<2
83	=16						word8DataNoParity2Stop=4<<2
84	=20						word8DataNoParity1Stop=5<<2
85	=24						word8DataEvenParity1Stop=6<<2
86	=28						word8DataOddParity1Stop=7<<2

88	=0						rtsLowTXInterruptDisabled=0<<5
89	=32						rtsLowTXInterruptEnabled=1<<5
90	=64						rtsHighTXInterruptDisabled=2<<5
91	=96						rtsLowBreakTXInterruptDisabled=3<<5

93	=0						rtsRXInterruptDisabled=0<<7
94	=128						rtsRTSInterruptEnabled=1<<7

96							                .endblock
97	.fe08						status: .block
98							                .endblock

100	>fe08						                .fill 1
101	.fe09						tdr:
102	.fe09						rdr:
103	>fe09						                .fill 1
104							                .endblock
105							                .endvirtual

107							;-------------------------------------------------------------------------

109							                .virtual $fe18
110	.fe18						HADC: .block
111	.fe18						status: .block
112							                .endblock
113	.fe18						latch: .block
114							                .endblock
115	>fe18						                .fill 1

117							                .endblock
118							                .endvirtual

120							;-------------------------------------------------------------------------

122							                .virtual $fe34
123	.fe34						ACCCON: .block
124							;D=1 = display shadow RAM; D=0 = display main RAM
125	=$01						D=$01

127							;E=1 = VDU code ($c000-$dfff in MOS ROM) accesses shadow RAM; E=0 =
128							;VDU code accesses main RAM
129	=$02						E=$02

131							;X=1 = shadow RAM at $3000; X=0 = main RAM at $3000
132	=$04						X=$04

134							;Y=1 = HAZEL at $c000; Y=0 = MOS ROM at $c000
135	=$08						Y=$08

137							;ITU=1 = access internal Tube; ITU=0 = access external Tube
138	=$10						ITU=$10

140							;IFJ=1 = $fc00...$fdff accesses cartridge; IFJ=0 = $fc00...$fdff
141							;accesses 1MHz bus
142	=$20						IFJ=$20

144							; TST=1 = read MOS ROM at $fc00...$feff; TST=0 = read I/O at
145							; $fc00...$feff
146	=$40						TST=$40

148							;IRR=1 = IRQ to CPU
149	=$80						IRR=$80
150							                .bend
151							                .endv

153							                VIA: .struct                    ;
154	.0000						orb:
155	.0000						irb:
156	>0000						                .fill 1         ;0
157	.0001						ora:
158	.0001						ira:
159	>0001						                .fill 1         ;1
160	.0002						ddrb:
161	>0002						                .fill 1         ;2
162	.0003						ddra:
163	>0003						                .fill 1         ;3
164	.0004						t1cL:
165	>0004						                .fill 1         ;4
166	.0005						t1cH:
167	>0005						                .fill 1         ;5
168	.0006						t1lL:
169	>0006						                .fill 1         ;6
170	.0007						t1lH:
171	>0007						                .fill 1         ;7
172	.0008						t2cL:
173	>0008						                .fill 1         ;8
174	.0009						t2cH:
175	>0009						                .fill 1         ;9
176	.000a						sr:
177	>000a						                .fill 1         ;10
178	.000b						acr: .block
179	=0						t1OneShot=0<<6
180	=64						t1Continuous=1<<6
181	=128						t1OneShotPB7=2<<6
182	=192						t1ContinuousPB7=3<<6

184	=0						t2Timer=0<<5
185	=32						t2CountPB6=1<<5

187	=0						srDisabled=0<<2
188	=4						srShiftInT2=1<<2
189	=8						srShiftInVIAClock=2<<2
190	=12						srShiftInExtClock=3<<2
191	=16						srShiftOutT2FreeRun=4<<2
192	=20						srShiftOutT2=5<<2
193	=24						srShiftOutVIAClock=6<<2
194	=28						srShiftOutExtClock=7<<2

196	=0						pbLatchDisabled=0<<1
197	=2						pbLatchEnabled=1<<1

199	=0						paLatchDisabled=0<<0
200	=1						paLatchEnabled=1<<0

202	>000b						                .fill 1         ;11
203							                .endblock
204	.000c						pcr: .block

206	=0						cb2InputNegativeActiveEdge=0<<5
207	=32						cb2IndependentInterruptInputNegativeEdge=1<<5
208	=64						cb2InputPositiveEdge=2<<5
209	=96						cb2IndependentInterruptInputPositiveEdge=3<<5
210	=128						cb2HandshakeOutput=4<<5
211	=160						cb2PulseOutput=5<<5
212	=192						cb2LowOutput=6<<5
213	=224						cb2HighOutput=7<<5

215	=0						cb1NegativeActiveEdge=0<<4
216	=16						cb1PositiveActiveEdge=1<<4

218	=0						ca2InputNegativeActiveEdge=0<<1
219	=2						ca2IndependentInterruptInputNegativeEdge=1<<1
220	=4						ca2InputPositiveEdge=2<<1
221	=6						ca2IndependentInterruptInputPositiveEdge=3<<1
222	=8						ca2HandshakeOutput=4<<1
223	=10						ca2PulseOutput=5<<1
224	=12						ca2LowOutput=6<<1
225	=14						ca2HighOutput=7<<1

227	=0						ca1NegativeActiveEdge=0<<0
228	=1						ca1PositiveActiveEdge=1<<0

230	>000c						                .fill 1         ;12
231							                .endblock
232	.000d						ifr:
233	>000d						                .fill 1         ;13
234	.000e						ier:
235	>000e						                .fill 1         ;14
236	.000f						oraNoHandshake:
237	.000f						iraNoHandshake:
238	>000f						                .fill 1         ;15

240	.0010						irq: .block
241	=1						ca2=1
242	=2						ca1=2
243	=4						sr=4
244	=8						cb2=8
245	=16						cb1=16
246	=32						t2=32
247	=64						t1=64
248							                .endblock
249							                .ends

251							; System VIA port B bits for Master Compact
252	=$20						i2cClock=$20
253	=$10						i2cData=$10

255							; PCD8572 command codes

257							;   7   6   5   4   3   2   1   0
258							; +---+---+---+---+---+---+---+---+
259							; | 1 | 0 | 1 | 0 |A2 |A1 |A0 |RnW|
260							; +---+---+---+---+---+---+---+---+

262	=$a1						eepromRead=$a1
263	=$a0						eepromWrite=$a0
264							                                .virtual $fe40
265	.fe40						systemVIA: .dstruct VIA
154	.fe40						orb:
155	.fe40						irb:
156	>fe40						                .fill 1         ;0
157	.fe41						ora:
158	.fe41						ira:
159	>fe41						                .fill 1         ;1
160	.fe42						ddrb:
161	>fe42						                .fill 1         ;2
162	.fe43						ddra:
163	>fe43						                .fill 1         ;3
164	.fe44						t1cL:
165	>fe44						                .fill 1         ;4
166	.fe45						t1cH:
167	>fe45						                .fill 1         ;5
168	.fe46						t1lL:
169	>fe46						                .fill 1         ;6
170	.fe47						t1lH:
171	>fe47						                .fill 1         ;7
172	.fe48						t2cL:
173	>fe48						                .fill 1         ;8
174	.fe49						t2cH:
175	>fe49						                .fill 1         ;9
176	.fe4a						sr:
177	>fe4a						                .fill 1         ;10
178	.fe4b						acr: .block
179	=0						t1OneShot=0<<6
180	=64						t1Continuous=1<<6
181	=128						t1OneShotPB7=2<<6
182	=192						t1ContinuousPB7=3<<6

184	=0						t2Timer=0<<5
185	=32						t2CountPB6=1<<5

187	=0						srDisabled=0<<2
188	=4						srShiftInT2=1<<2
189	=8						srShiftInVIAClock=2<<2
190	=12						srShiftInExtClock=3<<2
191	=16						srShiftOutT2FreeRun=4<<2
192	=20						srShiftOutT2=5<<2
193	=24						srShiftOutVIAClock=6<<2
194	=28						srShiftOutExtClock=7<<2

196	=0						pbLatchDisabled=0<<1
197	=2						pbLatchEnabled=1<<1

199	=0						paLatchDisabled=0<<0
200	=1						paLatchEnabled=1<<0

202	>fe4b						                .fill 1         ;11
203							                .endblock
204	.fe4c						pcr: .block

206	=0						cb2InputNegativeActiveEdge=0<<5
207	=32						cb2IndependentInterruptInputNegativeEdge=1<<5
208	=64						cb2InputPositiveEdge=2<<5
209	=96						cb2IndependentInterruptInputPositiveEdge=3<<5
210	=128						cb2HandshakeOutput=4<<5
211	=160						cb2PulseOutput=5<<5
212	=192						cb2LowOutput=6<<5
213	=224						cb2HighOutput=7<<5

215	=0						cb1NegativeActiveEdge=0<<4
216	=16						cb1PositiveActiveEdge=1<<4

218	=0						ca2InputNegativeActiveEdge=0<<1
219	=2						ca2IndependentInterruptInputNegativeEdge=1<<1
220	=4						ca2InputPositiveEdge=2<<1
221	=6						ca2IndependentInterruptInputPositiveEdge=3<<1
222	=8						ca2HandshakeOutput=4<<1
223	=10						ca2PulseOutput=5<<1
224	=12						ca2LowOutput=6<<1
225	=14						ca2HighOutput=7<<1

227	=0						ca1NegativeActiveEdge=0<<0
228	=1						ca1PositiveActiveEdge=1<<0

230	>fe4c						                .fill 1         ;12
231							                .endblock
232	.fe4d						ifr:
233	>fe4d						                .fill 1         ;13
234	.fe4e						ier:
235	>fe4e						                .fill 1         ;14
236	.fe4f						oraNoHandshake:
237	.fe4f						iraNoHandshake:
238	>fe4f						                .fill 1         ;15

240	.fe50						irq: .block
241	=1						ca2=1
242	=2						ca1=2
243	=4						sr=4
244	=8						cb2=8
245	=16						cb1=16
246	=32						t2=32
247	=64						t1=64
248							                .endblock
249							                .ends
266							                .endv

268							                .virtual $fe60
269	.fe60						userVIA: .dstruct VIA
154	.fe60						orb:
155	.fe60						irb:
156	>fe60						                .fill 1         ;0
157	.fe61						ora:
158	.fe61						ira:
159	>fe61						                .fill 1         ;1
160	.fe62						ddrb:
161	>fe62						                .fill 1         ;2
162	.fe63						ddra:
163	>fe63						                .fill 1         ;3
164	.fe64						t1cL:
165	>fe64						                .fill 1         ;4
166	.fe65						t1cH:
167	>fe65						                .fill 1         ;5
168	.fe66						t1lL:
169	>fe66						                .fill 1         ;6
170	.fe67						t1lH:
171	>fe67						                .fill 1         ;7
172	.fe68						t2cL:
173	>fe68						                .fill 1         ;8
174	.fe69						t2cH:
175	>fe69						                .fill 1         ;9
176	.fe6a						sr:
177	>fe6a						                .fill 1         ;10
178	.fe6b						acr: .block
179	=0						t1OneShot=0<<6
180	=64						t1Continuous=1<<6
181	=128						t1OneShotPB7=2<<6
182	=192						t1ContinuousPB7=3<<6

184	=0						t2Timer=0<<5
185	=32						t2CountPB6=1<<5

187	=0						srDisabled=0<<2
188	=4						srShiftInT2=1<<2
189	=8						srShiftInVIAClock=2<<2
190	=12						srShiftInExtClock=3<<2
191	=16						srShiftOutT2FreeRun=4<<2
192	=20						srShiftOutT2=5<<2
193	=24						srShiftOutVIAClock=6<<2
194	=28						srShiftOutExtClock=7<<2

196	=0						pbLatchDisabled=0<<1
197	=2						pbLatchEnabled=1<<1

199	=0						paLatchDisabled=0<<0
200	=1						paLatchEnabled=1<<0

202	>fe6b						                .fill 1         ;11
203							                .endblock
204	.fe6c						pcr: .block

206	=0						cb2InputNegativeActiveEdge=0<<5
207	=32						cb2IndependentInterruptInputNegativeEdge=1<<5
208	=64						cb2InputPositiveEdge=2<<5
209	=96						cb2IndependentInterruptInputPositiveEdge=3<<5
210	=128						cb2HandshakeOutput=4<<5
211	=160						cb2PulseOutput=5<<5
212	=192						cb2LowOutput=6<<5
213	=224						cb2HighOutput=7<<5

215	=0						cb1NegativeActiveEdge=0<<4
216	=16						cb1PositiveActiveEdge=1<<4

218	=0						ca2InputNegativeActiveEdge=0<<1
219	=2						ca2IndependentInterruptInputNegativeEdge=1<<1
220	=4						ca2InputPositiveEdge=2<<1
221	=6						ca2IndependentInterruptInputPositiveEdge=3<<1
222	=8						ca2HandshakeOutput=4<<1
223	=10						ca2PulseOutput=5<<1
224	=12						ca2LowOutput=6<<1
225	=14						ca2HighOutput=7<<1

227	=0						ca1NegativeActiveEdge=0<<0
228	=1						ca1PositiveActiveEdge=1<<0

230	>fe6c						                .fill 1         ;12
231							                .endblock
232	.fe6d						ifr:
233	>fe6d						                .fill 1         ;13
234	.fe6e						ier:
235	>fe6e						                .fill 1         ;14
236	.fe6f						oraNoHandshake:
237	.fe6f						iraNoHandshake:
238	>fe6f						                .fill 1         ;15

240	.fe70						irq: .block
241	=1						ca2=1
242	=2						ca1=2
243	=4						sr=4
244	=8						cb2=8
245	=16						cb1=16
246	=32						t2=32
247	=64						t1=64
248							                .endblock
249							                .ends
270							                .endv

273							                .virtual $fee0
274	.fee0						tube: .block
275							; Parasite to Host: Carries the OSWRCH call. Data register is a FIFO
276							; that can handle a VDU command length (10 bytes).
277							;
278							; Host to Parasite: There is a 1 byte buffer. It is used to generate
279							; IRQ's in the parasite from events in the host.

281							; write/read (clears IRQ)
282	.fee0						status1: .block
283							; [Tube p13]
284	=$01						Q=$01                           ;enable HIRQ from R4
285	=$02						I=$02                           ;enable PIRQ from R1
286	=$04						J=$04                           ;enable PIRQ from R3
287	=$08						M=$08                           ;enable PNMI from R3
288	=$10						V=$10                           ;2-byte R3
289	=$20						P=$20                           ;activate PRST
290	=$40						T=$40                           ;clear all Tube registers
291	=$80						S=$80                           ;set/clear bits
292							                .bend
293	>fee0						                .fill 1

295							; bit 7 - data available/IRQ
296							; bit 6 - not full
297	.fee1						data1:
298	>fee1						                .fill 1

300							; Used to implement OS calls that take a long time or that cannot
301							; interrupt Host tasks. The parasite passes a byte describing the
302							; required task. The two processors then exchange data until the task
303							; is complete. OS calls handled through this register include: OSRDCH,
304							; OSCLI, OSBYTE, OSWORD, OSBPUT, OSBGET, OSFIND, OSARGS, OSFILE,
305							; OSGBPB.

307							; write/read
308	.fee2						status2:
309	>fee2						                .fill 1

311							; bit 7 - data available
312							; bit 6 - not full
313	.fee3						data2:
314	>fee3						                .fill 1

316							; Used for the background task of fast data transfer between the two
317							; processors.

319							; write/read
320	.fee4						status3:
321	>fee4						                .fill 1

323							; bit 7 - data available/NMI
324							; bit 6 - not full
325	.fee5						data3:
326	>fee5						                .fill 1

328							; Used as the control channel for block transfers going through
329							; Register 3, and also the transfer register for error strings from
330							; host to parasite. In both cases, the host interrupts the parasite by
331							; placing a byte into the Register. In the former case it is a byte
332							; describing the required action, in the latter it is an error code.

334							; write (sets IRQ)/read (clears IRQ)
335	.fee6						status4:
336	>fee6						                .fill 1

338							; bit 7 - data available/IRQ
339							; bit 6 - not full/IRQ
340	.fee7						data4:
341	>fee7						                .fill 1
342							                .bend
343							                .endvirtual

346							RTC: .struct
347	>0000						seconds: .fill 1
348	>0001						secondsAlarm: .fill 1
349	>0002						minutes: .fill 1
350	>0003						minutesAlarm: .fill 1
351	>0004						hours: .fill 1
352	>0005						hoursAlarm: .fill 1
353	>0006						dayOfWeek: .fill 1
354	>0007						dayOfMonth: .fill 1
355	>0008						month: .fill 1
356	>0009						year: .fill 1
357	.000a						a: .block
358	=7						dvMask=7
359	=4						dvShift=4
360	=0						dv4194304Hz=0<<dvShift
361	=16						dv1048576Hz=1<<dvShift
362	=32						dv32768Hz=2<<dvShift
363	>000a						                .fill 1
364							                .endblock
365	.000b						b: .block
366	=$80						set=$80
367	=$02						_24h=$02
368	=$01						dse=$01
369	>000b						                .fill 1
370							                .endblock
371	.000c						c: .block
372	=$10						uf=$10
373	>000c						                .fill 1
374							                .endblock
375	.000d						d: .block
376	>000d						                .fill 1
377							                .endblock
378	=50						ram_size=50
379	>000e						ram: .fill ram_size
380							                .endstruct

:1	;******  Return to file: mos329.s65

2							                .include "src/mos_workspace.s65"

:3	;******  Processing file: src/mos_workspace.s65

1							;-------------------------------------------------------------------------
2							;
3							; Disorganized jumble of constants. They'll get tidied up at some
4							; point... promise...
5							;
6							;-------------------------------------------------------------------------

8							; The version constant is not very well named: it should really be
9							; something like "acornVersion". It refers to one of the official MOS
10							; versions released for Acorn-branded hardware, and can have one of
11							; the following 6 specific values:
12							;
13							; version=320 - MOS 3.20
14							; version=350 - MOS 3.50
15							; version=400 - MOS 4.00
16							; version=500 - MOS 5.00
17							; version=510 - MOS 5.10
18							; version=511 - MOS 5.11
19							;
20							; (Strictly speaking, these are not numeric, but there's a few
21							; instances of version>=n where this coincidentally makes sense. The
22							; 5.xx series follow on from one another, some of the 4.00 changes are
23							; in 5.xx too, and some of the 4.00 changes that are in 5.xx also made
24							; it into 3.50 as well.)

28							; All other versions are considered to be variants of one of the six
29							; official versions, as per the variant flags below. These variant
30							; flags are applicable to the stated versions only, and may or may not
31							; be separable from the various version-dependent .if/.endif
32							; constructs for that version. If they're changed from these defaults
33							; for any other version, the output may not make sense.
34							;
35							; Over time I intend to (try to) turn these into feature flags,
36							; according to the actual features they control.

38							                .weak
39							                ; Set if building Olivetti MOS, a variant of 5.10.
40	=false						olivetti=false

42							                ; Set if building CFA3000 MOS, a variant of 3.50.
43	=false						CFA3000=false

45							                ; Set if building Autocue 1500 MOS, a variant of 5.11.
46	=false						autocue=false

48							                ; Set if building MOS 3.29 (Acorn FinMOS), a variant
49							                ; of 3.50.
50	=false						finmos329=false

52							                ; Clear if stripping out the terminal ROM. Applicable
53							                ; to 3.20 or 3.50.
54	=true						includeTerminalROM=true

56							                ; Set if building any of the refresh versions.
57	=false						refreshVersion=false
58							                .endweak

60							;-------------------------------------------------------------------------

62							; These feature flags can be set freely by the main driver file.

64							                .weak

66							                ; If true, include *X. Not clear what this command
67							                ; actually, does, but it's in the original ROMs, so
68							                ; there has to be the option...
69	=true						includeStarX=version<500

71							                ; For some reason, *TAPE and *MOTOR have lower-case
72							                ; command name entries in MOS 4.00.
73	="TAPE"						tapeCommandString=version==400?"tape":"TAPE"
74	="MOTOR"					motorCommandString=version==400?"motor":"MOTOR"

76							                ; If false, reproduce the OSBYTE $6B/$6C bug present
77							                ; in MOS versions prior to 3.50.
78	=true						correctOSBYTE6B6C=version==350

80							                ; Assumed century for RTC reading purposes.
81	=$19						assumedRTCCenturyBCD=$19

83							                ; If false, reproduce the relocation issue present in
84							                ; MOS 3.50. Applies to MOS 3.50 only.
85	=false						correctlyHandleMissingTubeRelocationBitmap=false

87							                ; If true, improve Tube relocation speed.
88	=false						fasterTubeRelocation=false

90							                ; If true, insert a few OSWRCH code tweaks to improve
91							                ; things. Priority given to Mode 0/3/4/6/7 when
92							                ; outputting to VDU only.
93							                ;
94							                ; This means more code in the MOS area.
95	=false						fasterOSWRCH=false

97							                ; If true, put Tube BRK handler and idle loop in main
98							                ; RAM rather than zero page.
99							                ;
100							                ; It appears to be in zero page to save 1 cycle in
101							                ; some self-modifying code in the idle loop, for which
102							                ; the 65c02 jmp (abs,x) is a valid replacement that's
103							                ; actually quicker.
104							                ;
105							                ; The Tube language ROM relocation code (which does
106							                ; benefit from being in zero page) pushes the total
107							                ; zero page usage of the Tube host code well past the
108							                ; MOS 3.50 value, a needless source of potential
109							                ; incompatibility.
110	=false						tubeHostBrkAndIdleInMainRAM=false

112							                .endweak

114							;-------------------------------------------------------------------------

116							; These feature flags are offered on a best-effort basis. They're more
117							; intended for readability than for use as toggles.

119							                .weak

121							                ; If true, include Tube support.
123	=true						includeTubeSupport=true

129	=true						useTableDrivenConfigure=true

134							                ; If true, put 750-odd bytes of sound code in the ext
135							                ; ROM rather than the MOS ROM.
136							                ;
137							                ; (MOS 5.00+ has some code for having this stuff in
138							                ; the utils ROM, and MOS 3.50 has some code for having
139							                ; this stuff in the ext ROM. The MOS 3.50 code is a
140							                ; bit tighter.)
142	=true						soundStuffInExtROM=true

147							                .endweak

149							;-------------------------------------------------------------------------

151							; Some combinations are impossible. Sorry!
152							;
153							; (The code deliberately doesn't try to work around this. The driver
154							; files must avoid these cases.)

159							                ; Table-driven configuration takes up fewer bytes, so
160							                ; no point trying to switch it off for builds where it
161							                ; would be on.

164							;-------------------------------------------------------------------------

166							beword .macro value
169							                .endm

172							;-------------------------------------------------------------------------

174	=$400						tubeHostAddr=$400

177							                .cwarn tubeHost.page4End>$4f5

179							                ; MOS 3.50 parasite language relocation workspace?
183	=2						tubeRelocationBitmapPtr=2
185	=$4f5						tubeRelocationBitmapSizeBytes=$4f5
187	=$4f7						tubeRelocationBitmapByte=$4f7
192	=$04f8						tubeRelocationBitmapROMBank=$04f8
194	=$04f9						tubeRelocationPageOffset=$04f9

197							                ; 256-byte region where 1 relocated page of language
198							                ; ROM is held ready for host->parasite pagewise
199							                ; transfer.
200	=$700						tubeRelocationBuffer=$700

205							;-------------------------------------------------------------------------

207							                ; Force word operand - a few instances of this,
208							                ; presumably due to limitations in 1980s assemblers.
209							                ;
210							                ; Refresh versions can use an 8-bit operand for time
211							                ; and space savings.

213							forcew: .macro instr,oper
219							                .endmacro

221							;-------------------------------------------------------------------------

223							                .virtual $b0
224	.00b0						sramTransferPointers: .block
225	>00b0						src: .fill 2
226	>00b2						dest: .fill 2
227							                .endblock
228							                .endvirtual

230	=$a8						osargsBuffer=$a8                ;4-byte ZP buffer for use with OSARGS
231	=$b8						printMessageAddress=$b8

233							                .virtual $bb
234	.00bb						tapeCurrentOptionsByte: .block
235							                .endblock
236							                .endvirtual

238							                .virtual $f2
239	.00f2						fsStatusByte: .block
240	=$01						inputFileOpen=$01
241	=$02						outputFileOpen=$02
242	=$08						catStatus=$08
243	=$40						eofReached=$40
244	=$80						eofWarningGiven=$80
245							                .endblock
246							                .endvirtual

248							                .virtual $e4
249	.00e4						stringInputOptions: .block
250	=$80						doubleQuotes=$80
251	=$40						spaceNotATerminator=$40
252	=$01						goodString=$01
253							                .endblock
254							                .endvirtual
255	=$e5						stringInputPlingFlag=$e5        ;bit 7 set if last char was '!'
256	=$e6						readCharacterTimedFlag=$e6
257	=$e6						commandLineY=$e6
258	=$e7						autoRepeatCountdownTimer=$e7
259	=$eb						tapeCritical=$eb
260	=$ec						lastKeyPressedInternal=$ec
261	=$ed						firstKeyPressedInternal=$ed
262	=$f2						stringInputBufferAddress=$f2    ;word

264							;-------------------------------------------------------------------------

266	=$80						romTypeHasServiceEntry=$80
267	=$40						romTypeHasLanguageEntry=$40
268	=$20						romTypeHasTubeRelocationAddress=$20
269	=$02						romType6502=$02

271							;-------------------------------------------------------------------------

273	=$01						romServiceCallAbsoluteWorkspaceClaim=$01 ; memory used only when ROM is paged in
274	=$02						romServiceCallPrivateWorkspaceClaim=$02 ; memory used even when ROM is not paged in
275	=$03						romServiceCallAutoBoot=$03              ;
276	=$04						romServiceCallUnrecognisedCommand=$04   ; star command not recognised
277	=$05						romServiceCallUnrecognisedInterrupt=$05 ;
278	=$06						romServiceCallBreakInstruction=$06      ;
279	=$07						romServiceCallUnrecognisedOSBYTE=$07    ;
280	=$08						romServiceCallUnrecognisedOSWORD=$08    ;
281	=$09						romServiceCallHelp=$09                  ;
282	=$0a						romServiceCallClaimStaticWorkspace=$0A ; (Issued by paged ROMs, not the OS)
283	=$0b						romServiceCallNMIRelease=$0B    ; (Issued by paged ROMs, not the OS)
284	=$0c						romServiceCallNMIClaim=$0C      ; (Issued by paged ROMs, not the OS)
285	=$0d						romServiceCallROMFilingSystemInitialize=$0D    ;
286	=$0e						romServiceCallROMFilingSystemByteGet=$0E    ;
287	=$0f						romServiceCallVectorsClaimed=$0F    ; Used when a filing system starts
288	=$10						romServiceCallSpoolExecClosureWarning=$10    ;
289							;romServiceCallFontImplosionExplosionWarning=$11    ;
290	=$12						romServiceCallInitialiseFilingSystem=$12    ; (Issued from paged ROMs, not the OS)
291	=$15						romServiceCallPollingInterrupt=$15
292	=$18						romServiceCallReserved=$18
293	=$21						romServiceCallAbsoluteHAZELWorkspaceClaim=$21
294	=$22						romServiceCallPrivateHAZELWorkspaceClam=$22
295	=$23						romServiceCallTopOfHAZELWorkspace=$23
296	=$24						romServiceCallCountDynamicHAZELWorkspace=$24
297	=$25						romServiceCallRequestFSInfo=$25
298	=$26						romServiceCallCloseAllOpenFiles=$26
299	=$27						romServiceCallInformReset=$27
300	=$28						romServiceCallUnknownCONFIG=$28
301	=$29						romServiceCallUnknownSTATUS=$29
302	=$2a						romServiceCallLanguageChange=$2a
303	=$2c						romServiceCallCompactJoystick=$2c
304	=$30						romServiceCall30=$30
305	=$fe						romServiceCallTubeSystemPostInitialisation=$FE    ;
306	=$ff						romServiceCallTubeMainInitialisation=$FF    ;

308							;-------------------------------------------------------------------------

310	=0						fsNone=0
311	=1						fs1200BaudTape=1
312	=2						fs300BaudTape=2
313	=3						fsROM=3

315							; max FS number for all tape/ROM FS types
316	=3						fsTapeOrROMMax=3

318							;-------------------------------------------------------------------------

320							; [MasRef D.2-24]

322	=0						eventOutputBufferEmpty=0
323	=1						eventInputBufferFull=1
324	=2						eventCharacterEnteringBuffer=2
325	=3						eventADCConversionComplete=3
326	=4						eventStartOfVerticalSync=4
327	=5						eventIntervalTimerCrossingZero=5
328	=6						eventESCAPEPressed=6
329	=7						eventRS423Error=7
330	=8						eventNetworkError=8
331	=9						eventUser=9
332	=9						eventMax=9

334							;-------------------------------------------------------------------------

336							; [MasRef D.2-27]

338							; Input buffers
339	=0						bufferKeyboard=0
340	=1						bufferRS423Input=1

342							; Output buffers
343	=2						bufferFirstOutput=2
344	=2						bufferRS423Output=2
345	=3						bufferPrinter=3
346	=4						bufferSoundChannel0=4
347	=5						bufferSoundChannel1=5
348	=6						bufferSoundChannel2=6
349	=7						bufferSoundChannel3=7
350							; What's buffer 8? Previously speech on OS 1.20. There's indices
351							; allocated for it...
352	=8						bufferMax=8

355	=$03e0						bufferKeyboardAddress=$03e0
356	=32						bufferKeyboardSize=32
357	=$0a00						bufferRS423InputAddress=$0a00
358	=256						bufferRS423InputSize=256
359	=$0900						bufferRS423OutputAddress=$0900
360	=192						bufferRS423OutputSize=192
361	=$0880						bufferPrinterAddress=$0880
362	=64						bufferPrinterSize=64
363	=$0840						bufferSoundChannel0Address=$0840
364	=16						bufferSoundChannel0Size=16
365	=$0850						bufferSoundChannel1Address=$0850
366	=16						bufferSoundChannel1Size=16
367	=$0860						bufferSoundChannel2Address=$0860
368	=16						bufferSoundChannel2Size=16
369	=$0870						bufferSoundChannel3Address=$0870
370	=16						bufferSoundChannel3Size=16
371	=$09c0						buffer8Address=$09c0
372	=64						buffer8Size=64

376							; BufferInfo: .function bufferAddress,bufferSizeByte
377							;                 .endfunction (bufferAddress,256-bufferSizeByte)

379							; ; buffer info is (base address,size)
380							;  _:=[]
381							; _..=[BufferInfo($0300,32)];bufferKeyboard=0
382							; _..=[BufferInfo($0a00,256)];bufferRS423Input=1
383							; _..=[BufferInfo($08c0,192)];bufferRS423Output=2
384							; _..=[BufferInfo($07c0,64)];bufferPrinter=3
385							; _..=[BufferInfo($0750,16)];bufferSoundChannel0=4
386							; _..=[BufferInfo($0760,16)];bufferSoundChannel1=5
387							; _..=[BufferInfo($0770,16)];bufferSoundChannel2=6
388							; _..=[BufferInfo($0780,16)];bufferSoundChannel3=7
389							; _..=[BufferInfo($0900,64)];What's buffer 8?

391							;-------------------------------------------------------------------------

393							; [MasRef C.5-5]

395	=0						printerDriverTypeSink=0
396	=1						printerDriverTypeParallel=1
397	=2						printerDriverTypeSerial=2
398	=3						printerDriverTypeUser=3
399	=4						printerDriverTypeNetwork=4

401							; AUG p259

403	=0						printerDriverPoll=0
404	=1						printerDriverActivate=1
405	=2						printerDriverVDU2=2
406	=3						printerDriverVDU3=3
407	=5						printerDriverFX5=5

409	=10						printerDriverFX3=10             ;undocumented???

411							;-------------------------------------------------------------------------

413							; AUG p261

415	=0						netPrinterRequest0=0
416	=1						netPrinterRequest1=1
417	=2						netPrinterRequest2=2
418	=3						netPrinterRequest3=3
419	=4						netWriteCharacterAttempted=4
420	=5						netPrinterRequest5=5
421	=6						netReadCharacterAttempted=6
422	=7						netOSBYTEAttempted=7
423	=8						netOSWORDAttempted=8
424	=13						netOSWORD0Complete=13

426							;-------------------------------------------------------------------------

428							; OSFIND open constants
429	=$40						findOpenForRead=$40
430	=$80						findOpenForWrite=$80

432	=0						fscOPT=0
433	=1						fscCheckEOF=1
434	=2						fscStarSlash=2
435	=3						fscUnknownCommand=3
436	=4						fscStarRUN=4
437	=5						fscStarCAT=5
438	=6						fscNewFS=6
439	=7						fscFileHandleRange=7
440	=8						fscStarCommand=8
441	=9						fscStarEX=9
442	=10						fscStarINFO=10
443	=11						fscRUNLibrary=11

445							; NAUG mentions this. But it doesn't appear to
446							; actually exist in the code.
447							;
448							; Maybe it's present in MOS 3.50 or later?
449	=12						fscRENAME=12

451	=1						gbpbPutBytesNewPTR=1            ;[AUG p340]
452	=2						gbpbPutBytesCurrentPTR=2        ;[AUG p340]
453	=3						gbpbGetBytesNewPTR=3            ;[AUG p341]
454	=4						gbpbGetBytesCurrentPTR=4        ;[AUG p341]
455	=5						gbpbGetMediaMetadata=5          ;[AUG p341]
456	=6						gbpbGetCurrentDevice=6          ;[AUG p341]
457	=7						gbpbGetLibraryDevice=7          ;[AUG p341]
458	=8						gbpbReadFileNames=8             ;[AUG p341]

460							OSGBPBParameterBlock: .struct
461	.0000						handle:
462	>0000						                .fill 1
463	.0001						address:
464	>0001						                .fill 4
465	.0005						count:
466	>0005						                .fill 4
467	.0009						ptr:
468	>0009						                .fill 4
469							                .endstruct

471	=0						argsGetFS=0                     ;[AUG p337]
472	=1						argsGetCommandLine=1            ;[AUG p338]
473	=2						argsCheckANFS=2                 ;https://beebwiki.mdfs.net/OSARGS
474	=3						argsGetLibFS=3                  ;
475	=$ff						argsFlushBuffers=$ff            ;[AUG p338]

477	=0						argsFileGetPTR=0
478	=1						argsFileSetPTR=1
479	=2						argsFileGetEXT=2
480	=$ff						argsFileFlush=$ff

482	=0						fileSave=0                      ;[AUG p336]
483	=1						fileWriteMetadata=1             ;[AUG p336]
484	=2						fileWriteLoadAddress=2          ;[AUG p336]
485	=3						fileWriteExecAddress=3          ;[AUG p336]
486	=4						fileWritettributes=4            ;[AUG p336]
487	=5						fileReadMetadata=5              ;[AUG p336]
488	=6						fileDelete=6                    ;[AUG p336]
489	=$ff						fileLoad=$ff                    ;[AUG p336]

491							OSFILEParameterBlock: .struct
492	.0000						fileName:
493	>0000						                .fill 2
494	.0002						addresses:
495	.0002						load:
496	>0002						                .fill 4
497	.0006						exec:
498	>0006						                .fill 4
499	.000a						length:
500	.000a						saveStart:
501	>000a						                .fill 4
502	.000e						attributes:
503	.000e						saveEnd:
504	>000e						                .fill 4
505							                .endstruct

507							;-------------------------------------------------------------------------

509	=0						bufferNumberKeyboard=0          ;
510	=1						bufferNumberRS423Input=1        ;
511	=2						bufferNumberRS423Output=2       ;
512	=3						bufferNumberPrinter=3           ;
513	=4						bufferNumberSound0=4            ; Noise channel
514	=5						bufferNumberSound1=5            ;
515	=6						bufferNumberSound2=6            ;
516	=7						bufferNumberSound3=7            ;
517							; bufferNumberSpeech=8            ;
518	=8						bufferNumberHighest=8           ;

520							;-------------------------------------------------------------------------

523	=0						tubeReasonMultiByteParasiteToHost=0
524	=1						tubeReasonMultiByteHostToParasite=1
525	=4						tubeReasonExecute=4
526	=7						tubeReason256BytesHostToParasite=7
527	=$c0						tubeReasonClaimMask=$c0
528	=$80						tubeReasonReleaseMask=$80

531							;-------------------------------------------------------------------------

533							; uservIndex=0
534							; brkvIndex=1
535							; irq1vIndex=2
536							; irq2vIndex=3
537							; clivIndex=4
538							; bytevIndex=5
539							; wordvIndex=6
540							; wrchvIndex=7
541							; rdchvIndex=8
542							; filevIndex=9
543							; argsvIndex=10
544							; bgetvIndex=11
545							; bputvIndex=12
546							; gbpbvIndex=13
547							; findvIndex=14
548							; fscvIndex=15
549							; eventvIndex=16
550							; uptvIndex=17
551							; netvIndex=18
552							; vduvIndex=19
553							; keyvIndex=20
554							; insvIndex=21
555							; remvIndex=22
556							; cnpvIndex=23
557							; ind1vIndex=24
558							; ind2vIndex=25
559							; ind3vIndex=26

562							                .virtual $200
563	.0200						vectors:
564	.0200						USERV:
565	>0200						                .fill 2
566	.0202						BRKV:
567	>0202						                .fill 2
568	.0204						IRQ1V:
569	>0204						                .fill 2

571	.0206						IRQ2V:
572	>0206						                .fill 2
573	.0208						CLIV:
574	>0208						                .fill 2
575	.020a						BYTEV:
576	>020a						                .fill 2
577	.020c						WORDV:
578	>020c						                .fill 2
579	.020e						WRCHV:
580	>020e						                .fill 2
581	.0210						RDCHV:
582	>0210						                .fill 2
583	.0212						FILEV:
584	>0212						                .fill 2
585	.0214						ARGSV:
586	>0214						                .fill 2
587	.0216						BGETV:
588	>0216						                .fill 2
589	.0218						BPUTV:
590	>0218						                .fill 2
591	.021a						GBPBV:
592	>021a						                .fill 2
593	.021c						FINDV:
594	>021c						                .fill 2
595	.021e						FSCV:
596	>021e						                .fill 2
597	.0220						EVENTV:
598	>0220						                .fill 2
599	.0222						UPTV:
600	>0222						                .fill 2
601	.0224						NETV:
602	>0224						                .fill 2
603	.0226						VDUV:
604	>0226						                .fill 2
605	.0228						KEYV:
606	>0228						                .fill 2
607	.022a						INSV:
608	>022a						                .fill 2
609	.022c						REMV:
610	>022c						                .fill 2
611	.022e						CNPV:
612	>022e						                .fill 2
613	.0230						IND1V:
614	>0230						                .fill 2
615	.0232						IND2V:
616	>0232						                .fill 2
617	.0234						IND3V:
618	>0234						                .fill 2
619	.0236						mosVariables:

621							; OSBYTE 166 (&A6) Read start address of MOS variables [MasRef D.2-50]
622							; OSBYTE 167 (&A7) Read start address of MOS variablespointer table  [MasRef D.2-50]
623	>0236						mosVariablesAddress: .fill 2

625							; OSBYTE 168 (&A8) Read address of ROM pointer table [MasRef D.2-51]
626							; OSBYTE 169 (&A9) Read address of ROM pointer table [MasRef D.2-51]
627	>0238						extendedVectorSpaceAddress: .fill 2

629							; OSBYTE 170 (&AA) Read address of ROM information table [MasRef D.2-51]
630							; OSBYTE 171 (&AB) Read address of ROM information table [MasRef D.2-51]
631	>023a						romInformationTableAddress: .fill 2

633							; OSBYTE 172 (&AC) Read address of keyboard translation table [MasRef D.2-52]
634							; OSBYTE 173 (&AD) Read address of keyboard translation table [MasRef D.2-52]
635	>023c						keyboardTranslationTableAddress: .fill 2

637							; OSBYTE 174 (&AE) Read address of VDU variables origin [MasRef D.2-52]
638							; OSBYTE 175 (&AF) Read address of VDU variables origin [MasRef D.2-52]
639	>023e						vduVariablesAddress: .fill 2

641							; OSBYTE 176 (&B0) Read/Write CFS timeout counter [MasRef D.2-52]
642	>0240						cfsTimeoutCounter: .fill 1

644							; OSBYTE 177 (&B1) Read/write input source [MasRef D.2-53]
645	>0241						inputSource: .fill 1

647							; OSBYTE 178 (&B2) Read/write keyboard semaphore [MasRef D.2-53]
648	>0242						keyboardSemaphore: .fill 1

650							; OSBYTE 179 (&B3) Read/write ROM polling semaphore [MasRef D.2-54]
651	>0243						romPollingSemaphore: .fill 1

653							; OSBYTE 180 (&B4) Read/write Operating System High [MasRef D.2-54]
654	>0244						oshwm: .fill 1

656							; OSBYTE 181 (&B5) Read/write RS243 input interpretation [MasRef D.2-54]
657	>0245						rs423InputInterpretationStatus: .fill 1

659							; OSBYTE 182 (&B6) Read NOIGNORE state [MasRef D.2-55]
660							;
661							; TODO - not a great name, no matter how official - should probably be usePrinterIgnoreChar or something
662	>0246						noignoreState: .fill 1

664							; OSBYTE 183 (&B7) Read/write cassette/ROM filing system [MasRef D.2-55]
665	>0247						cfsRFSFSSwitch: .fill 1

667							; OSBYTE 184 (&B8) Read OS copy of video ULA control [MasRef D.2-56]
668	>0248						vcontrolRegister: .fill 1

670							; OSBYTE 185 (&B9) Read OS copy of video ULA palette [MasRef D.2-56]
671	>0249						vpaletteRegister: .fill 1

673							; OSBYTE 186 (&BA) Read ROM number active at last BRK [MasRef D.2-56]
674	>024a						romActiveAtLastBRK: .fill 1

676							; OSBYTE 187 (&BB) Read ROM number of socket [MasRef D.2-57]
677	>024b						basicROMNumber: .fill 1

679							; OSBYTE 188 (&BC) Read current ADC channel number [MasRef D.2-57]
680	>024c						currentADCChannel: .fill 1

682							; OSBYTE 189 (&BD) Read maximum ADC channel number [MasRef D.2-57]
683	>024d						maximumADCChannel: .fill 1

685							; OSBYTE 190 (&BE) Read/write ADC conversion type [MasRef D.2-58]
686	>024e						adcConversionType: .fill 1

688							; OSBYTE 191 (&BF) Read/write RS423 busy flag [MasRef D.2-58]
689	>024f						rs423Busy: .fill 1

691							; OSBYTE 192 (&C0) Read serial ACIA control register [MasRef D.2-58]
692	>0250						aciaControlRegister: .fill 1

694							; OSBYTE 193 (&C1) Read/write flash counter [MasRef D.2-59]
695	>0251						flashCounter: .fill 1

697							; OSBYTE 194 (&C2) Read/write duration of first colour [MasRef D.2-59]
698	>0252						firstFlashColourDuration: .fill 1

700							; OSBYTE 195 (&C3) Read/write duration of second colour [MasRef D.2-60]
701	>0253						secondFlashColourDuration: .fill 1

703							; OSBYTE 196 (&C4) Read/write keyboard auto-repeat delay [MasRef D.2-60]
704	>0254						keyboardAutoRepeatDelay: .fill 1

706							; OSBYTE 197 (&C5) Read/write keyboard auto-repeat rate [MasRef D.2-60]
707	>0255						keyboardAutoRepeatRate: .fill 1

709							; OSBYTE 198 (&C6) Read/write *EXEC file handle [MasRef D.2-61]
710	>0256						execFileHandle: .fill 1

712							; OSBYTE 199 (&C7) Read/write *SPOOL file handle [MasRef D.2-62]
713	>0257						spoolFileHandle: .fill 1

715							; OSBYTE 200 (&C8) Read/write BREAK and ESCAPE effect [MasRef D.2-62]
716	>0258						breakAndESCAPEEffect: .fill 1

718							; OSBYTE 201 (&C9) Read/write keyboard status [MasRef D.2-63]
719	>0259						keyboardStatus: .fill 1

721							; OSBYTE 202 (&CA) Read/write keyboard status byte [MasRef D.2-63]
722	.025a						keyboardStatusByte: .block
723	=$8						shiftPressed=%1<<3
724	=%10000						capsLockDisengaged=%1<<4
725	=%100000					shiftLockDisengaged=%1<<5
726	=%1000000					ctrlPressed=%1<<6
727	=$80						shiftEnabled=%1<<7
728	>025a						                .fill 1
729							                .endblock

731							; OSBYTE 203 (&CB) Read/write RS423 input buffer [MasRef D.2-64]
732	>025b						rs423InputBufferMinimumSpace: .fill 1

734							; OSBYTE 204 (&CC) Read/write RS423 ignore flag [MasRef D.2-65]
735	>025c						rs423Ignore: .fill 1

737							; OSBYTE 205 (&CD) Read/write RS423 destination [MasRef D.2-65]
738	>025d						rs423Destination: .fill 1

740							; OSBYTE 206 (&CE) Read/write Econet OS call interception [MasRef D.2-66]
741	>025e						econetInterceptionStatus: .fill 1

743							; OSBYTE 207 (&CF) Read/write Econet input interpretation [MasRef D.2-66]
744	>025f						econetInputInterpretationStatus: .fill 1

746							; OSBYTE 208 (&D0) Read write Econet output [MasRef D.2-67]
747	>0260						econetOutputInterpretationStatus: .fill 1

749							; OSBYTE 209 (&D1) is reserved for the speech system [MasRef D.2-67]
750	>0261						speechSystemByte1:  .fill 1

752							; OSBYTE 210 (&D2) Read/write sound suppression status [MasRef D.2-67]
753	>0262						soundSuppressionStatus: .fill 1

755							; OSBYTE 211 (&D3) Read/write BELL channel [MasRef D.2-67]
756	>0263						bellChannel: .fill 1

758							; OSBYTE 212 (&D4) Read/write BELL sound information [MasRef D.2-68]
759	>0264						bellSound: .fill 1

761							; OSBYTE 213 (&D5) Read/write BELL frequency [MasRef D.2-69]
762	>0265						bellFrequency: .fill 1

764							; OSBYTE 214 (&D6) Read/write BELL duration [MasRef D.2-69]
765	>0266						bellDuration: .fill 1

767							; OSBYTE 215 (&D7) Read/write startup message [MasRef D.2-69]
768	>0267						startupMessageSuppressionStatus: .fill 1

770							; OSBYTE 216 (&D8) Read/write length of soft key string [MasRef D.2-70]
771	>0268						softKeyStringLength: .fill 1

773							; OSBYTE 217 (&D9) Read/write paged mode line count [MasRef D.2-71]
774	>0269						pagedModeCounter: .fill 1

776							; OSBYTE 218 (&DA) Read/write bytes in VDU queue [MasRef D.2-71]
777	>026a						vduQueueNegativeLength: .fill 1

779							; OSBYTE 219 (&DB) Read/write TAB key code [MasRef D.2-72]
780	>026b						tabKeyCode: .fill 1

782							; OSBYTE 220 (&DC) Read/write ESCAPE character [MasRef D.2-72]
783	>026c						escapeCharacter: .fill 1

785							; OSBYTE 221 (&DD) Read/write interpretation of input values 192-207 [MasRef D.2-73]
786	>026d						input192To207Interpretation: .fill 1

788							; OSBYTE 222 (&DE) Read/write interpretation of input values 208-223 [MasRef D.2-73]
789	>026e						input208To223Interpretation: .fill 1

791							; OSBYTE 223 (&DF) Read/write interpretation of input values 224-239 [MasRef D.2-73]
792	>026f						input224To239Interpretation: .fill 1

794							; OSBYTE 224 (&E0) Read/write interpretation of input values 240-255 [MasRef D.2-73]
795	>0270						input240To255Interpretation: .fill 1

797							; OSBYTE 225 (&E1) Read/write soft key interpretation [MasRef D.2-74]
798	>0271						softKeyInterpretation: .fill 1

800							; OSBYTE 226 (&E2) Read/write SHIFT+soft key interpretation [MasRef D.2-74]
801	>0272						shiftSoftKeyInterpretation: .fill 1

803							; OSBYTE 227 (&E3) Read/write CTRL+soft key interpretation [MasRef D.2-74]
804	>0273						ctrlSoftKeyInterpretation: .fill 1

806							; OSBYTE 228 (&E4) Read/write SHIFT+CTRL+soft key interpretation [MasRef D.2-74]
807	>0274						shiftCtrlSoftKeyInterpretation: .fill 1

809							; OSBYTE 229 (&E5) Read/write ESCAPE key status [MasRef D.2-75]
810	>0275						escapeKeyStatus: .fill 1

812							; OSBYTE 230 (&E6) Read/write ESCAPE effects [MasRef D.2-75]
813	>0276						escapeEffects: .fill 1

815							; OSBYTE 231 (&E7) Read/write IRQ bit mask for user 6522 [MasRef D.2-76]
816	>0277						userVIAInterruptMask: .fill 1

818							; OSBYTE 232 (&E8) Read/write IRQ bit mask for 6850 [MasRef D.2-76]
819	>0278						rs423InterruptMask: .fill 1

821							; OSBYTE 233 (&E9) Read write IRQ bit mask for system [MasRef D.2-76]
822	>0279						systemVIAInterruptMask: .fill 1

824							; OSBYTE 234 (&EA) Read flag indicating Tube presence [MasRef D.2-76]
826	>027a						tubePresence: .fill 1

831							; OSBYTE 235 (&EB) is reserved for the speech system. [MasRef D.2-77]
832	>027b						speechSystemByte2: .fill 1

834							; OSBYTE 236 (&EC) Read/write character destination status [MasRef D.2-77]
835	.027c						characterDestinationStatus: .block
836	>027c						                .fill 1
837	=1						rs423_enable=1
838	=2						vdu_disable=2
839	=4						printer_disable=4               ;printer always off
840	=8						printer_enable=8                ;printer always on
841	=16						spool_disable=16
842	=64						printer_maybe=64                ;printer on when VDU 1 only
843							                .endblock

845							; OSBYTE 237 (&ED) Read/write cursor editing status [MasRef D.2-77]
846	.027d						editKeysMode: .block
847	=0						editKeys=0                      ;edit keys do editing
848	=1						asciiKeys=1                     ;edit keys are ASCII 135-139
849	=2						functionKeys=2                  ;edit keys are F keys 11-15
850	>027d						                .fill 1
851							                .endblock

853							;-------------------------------------------------------------------------
854							; variables reset up to here on soft BREAK
855							;-------------------------------------------------------------------------

857							; OSBYTE 238 (&EE) Read/write numeric keypad [MasRef D.2-78]
858	>027e						numericKeypadInterpretation: .fill 1

860							; OSBYTE 239 (&EF) Read/write *SHADOW state [MasRef D.2-78]
861	>027f						shadowRAMState: .fill 1

863							; OSBYTE 240 (&F0) Read country flag [MasRef D.2-79]
864	>0280						countryFlag: .fill 1

866							; OSBYTE 241 (&F1) Read/write user flag [MasRef D.2-79]
867	>0281						userFlag: .fill 1

869							; OSBYTE 242 (&F2) Read copy of serial processor ULA [MasRef D.2-80]
870	>0282						serialULARegister: .fill 1

872							; OSBYTE 243 (&F3) Read timer switch state [MasRef D.2-80]
873							;
874							; The location holds either 5 (initialTimerSwitchState) or 10
875							; (initialTimerSwitchState^15) - i.e., the offset of the byte after
876							; the last of the timer.
877							;
878							; Various offsets are applied to the timer addresses to make this
879							; work.
880	>0283						timerSwitchState: .fill 1

882							; OSBYTE 244 (&F4) Read/write soft key consistency flag [MasRef D.2-81]
883	>0284						softKeyConsistencyFlag: .fill 1

885							; OSBYTE 245 (&F5) Read printer driver type [MasRef D.2-81[
886	>0285						printerDriverType: .fill 1

888							; OSBYTE 246 (&F6) Read/write printer ignore character [MasRef D.2-81]
889	>0286						printerIgnoreChar: .fill 1

891							;-------------------------------------------------------------------------
892							; variables reset up to here on hard BREAK
893							;-------------------------------------------------------------------------

895							; OSBYTE 247 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
896	>0287						breakVectorByte0: .fill 1

898							; OSBYTE 248 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
899	>0288						breakVectorByte1: .fill 1

901							; OSBYTE 249 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
902	>0289						breakVectorByte2: .fill 1

904							; OSBYTE 250 (&FA) Read memory written by VDU driver [MasRef D.2-82]
905	>028a						vduDriverMemory: .fill 1

907							; OSBYTE 251 (&FB) Read memory displayed [MasRef D.2-83]
908	>028b						displayMemory: .fill 1

910							; OSBYTE 252 (&FC) Read/write current language ROM number [MasRef D.2-83]
911	>028c						currentLanguageROM: .fill 1

913							;-------------------------------------------------------------------------
914							; variables reset up to here on power-on reset
915							;-------------------------------------------------------------------------

917							; OSBYTE 253 (&FD) Read last BREAK type [MasRef D.2-83]
918	.028d						lastBREAKType: .block
919	>028d						                .fill 1
920	=0						softBREAK=0
921	=1						powerOn=1
922	=2						hardBREAK=2
923							                .endblock
924							; OSBYTE 254 (&FE) Set effect of SHIFT on numeric keypad [MasRef D.2-84]
925	>028e						numericKeypadShiftEffect: .fill 1
926							; OSBYTE 255 (&FF) Read/write startup options [MasRef D.2-84]
927	>028f						startupOptions: .fill 1
928	=7						modeMask=7

930							                .endvirtual

932	=166						firstMOSVariableOSBYTE=166

934	=5						initialTimerSwitchState=5
935	=$290						tvOffset=$290
936	=$291						tvInterlace=$291
937	=$292						timer0=$292
938	=$297						timer1=$297
939	=$29c						intervalTimer=$29c
940	=$2a1						romInformationTable=$2a1
941	=$2b1						inkeyTimeoutCounter=$2b1
942	=$2b3						osword0MaxLineLength=$2b3
943	=$2b4						osword0MinASCIICharacter=$2b4
944	=$2b5						osword0MaxASCIICharacter=$2b5
945	=$2b6						adcResultLSBs=$2b6
946	=$2ba						adcResultMSBs=$2ba
947	=$2be						adcLastChannelRead=$2be         ;Two names for the same thing!
948	=$2be						adcLastConvertedChannel=$2be    ;Two names for the same thing!
949	=$2bf						eventEnabledFlags=$2bf
950	=$02c9						currentSoftKey=$02c9
951	=$02ca						keyboardFirstAutoRepeatCount=$02ca
952	=$2cb						previousKeyPressedWhenReadingLastKey=$2cb
953	=$2cc						previousKeyPressedWhenReadingFirstKey=$2cc

955							; Anything past $2cd is reset to $ff rather than $00

957							; Not actually a key - some kind of flag to skip double sound
958							; updates?? See LE718.
959	=$2cd						previousKeyPressedWhenReadingOSBYTE=$2cd

961							; soundIsUpdatingFlag=$2ce
962	=$2ce						bufferEmptyFlags=$2ce
963	=$2d7						bufferStartIndices=$2d7
964	=$2e0						bufferEndIndices=$2e0

966	=$2e9						tapeInputCurrentBlockSize=$2e9
967	=$2eb						blockFlagOfCurrentlyResidentBlock=$2eb
968	=$2ec						lastCharacterOfCurrentlyResidentBlock=$2ec

970							; Needs a better name, possibly more than one :(
971							;
972							; Used by various file routines to store OSGBPB and OSFILE parameter
973							; blocks.
974							;
975							; Used by the clock routines to hold a (possibly partial) mirror of
976							; the RTC time/date registers.
977							;
978							; Used when parsing hex addresses from the command line - obviously
979							; designed primarily for convenient use when building up the OSFILE
980							; parameter block for use with *LOAD and *SAVE.
981							;
982							; Used by the SRAM utilities to store working data.
983	=$2ed						osfileParameterBlock=$2ed

985							                .virtual osfileParameterBlock
986	.02ed						sramWorkspace: .block
987	>02ed						temp: .fill 1
988	>02ee						type: .fill 1
989	>02ef						length: .fill 2
990	>02f1						bank: .fill 1
991	>02f2						sramAddress: .fill 4
992	>02f6						dataAddress: .fill 4
993							                .endblock
994							                .endvirtual

996							; rtcTempData=$2ee

998							ExtendedVectorAddress: .function vectorAddress
1000							                .endfunction extendedVectorSpace+(vectorAddress-vectors)/2*3

1002							;-------------------------------------------------------------------------

1004	=$d9f						extendedVectorSpace=$d9f

1006							; internal key numbers
1007	=$62						key_space=$62
1008	=$66						key_comma=$66
1009	=$17						key_minus=$17
1010	=$67						key_stop=$67
1011	=$68						key_slash=$68
1012	=$27						key_0=$27
1013	=$30						key_1=$30
1014	=$31						key_2=$31
1015	=$11						key_3=$11
1016	=$12						key_4=$12
1017	=$13						key_5=$13
1018	=$34						key_6=$34
1019	=$24						key_7=$24
1020	=$15						key_8=$15
1021	=$26						key_9=$26
1022	=$48						key_colon=$48
1023	=$57						key_semicolon=$57
1024	=$47						key_at=$47
1025	=$41						key_a=$41
1026	=$64						key_b=$64
1027	=$52						key_c=$52
1028	=$32						key_d=$32
1029	=$22						key_e=$22
1030	=$43						key_f=$43
1031	=$53						key_g=$53
1032	=$54						key_h=$54
1033	=$25						key_i=$25
1034	=$45						key_j=$45
1035	=$46						key_k=$46
1036	=$56						key_l=$56
1037	=$65						key_m=$65
1038	=$55						key_n=$55
1039	=$36						key_o=$36
1040	=$37						key_p=$37
1041	=$10						key_q=$10
1042	=$33						key_r=$33
1043	=$51						key_s=$51
1044	=$23						key_t=$23
1045	=$35						key_u=$35
1046	=$63						key_v=$63
1047	=$21						key_w=$21
1048	=$42						key_x=$42
1049	=$44						key_y=$44
1050	=$61						key_z=$61
1051	=$38						key_left_square_bracket=$38
1052	=$78						key_backslash=$78
1053	=$58						key_right_square_bracket=$58
1054	=$18						key_caret=$18
1055	=$28						key_underline=$28
1056	=$70						key_escape=$70
1057	=$60						key_tab=$60
1058	=$40						key_caps_lock=$40
1059	=$1						key_ctrl=$1
1060	=$50						key_shift_lock=$50
1061	=$0						key_shift=$0
1062	=$59						key_delete=$59
1063	=$69						key_copy=$69
1064	=$49						key_return=$49
1065	=$39						key_up=$39
1066	=$29						key_down=$29
1067	=$19						key_left=$19
1068	=$79						key_right=$79
1069	=$20						key_f0=$20
1070	=$71						key_f1=$71
1071	=$72						key_f2=$72
1072	=$73						key_f3=$73
1073	=$14						key_f4=$14
1074	=$74						key_f5=$74
1075	=$75						key_f6=$75
1076	=$16						key_f7=$16
1077	=$76						key_f8=$76
1078	=$77						key_f9=$77
1079	=$6a						key_numpad_0=$6a
1080	=$6b						key_numpad_1=$6b
1081	=$7c						key_numpad_2=$7c
1082	=$6c						key_numpad_3=$6c
1083	=$7a						key_numpad_4=$7a
1084	=$7b						key_numpad_5=$7b
1085	=$1a						key_numpad_6=$1a
1086	=$1b						key_numpad_7=$1b
1087	=$2a						key_numpad_8=$2a
1088	=$2b						key_numpad_9=$2b
1089	=$3a						key_numpad_plus=$3a
1090	=$3b						key_numpad_minus=$3b
1091	=$4a						key_numpad_divide=$4a
1092	=$5a						key_numpad_hash=$5a
1093	=$5b						key_numpad_multiply=$5b
1094	=$5c						key_numpad_comma=$5c
1095	=$3c						key_numpad_return=$3c
1096	=$4b						key_numpad_delete=$4b
1097	=$4c						key_numpad_stop=$4c

1099							fsInfoBlock: .struct
1100	>0000						name: .fill 8
1101	>0008						minHandle: .fill 1
1102	>0009						maxHandle: .fill 1
1103	>000a						fsNumber: .fill 1
1104							                .ends

1106							osgbpbBlock: .struct
1107	>0000						handle: .fill 1
1108	>0001						addr: .fill 4
1109	>0005						numBytes: .fill 4
1110	>0009						ptr: .fill 4
1111							                .ends

1113							                ; NAUG p260
1114							                .virtual $dc00
1115	.dc00						hazel: .block
1116	.dc00						commandLine:                    ;dc00
1117	>dc00						                .fill 256
1118	.dd00						ddxx:                           ;dd00
1119	>dd00						                .fill 256
1120	.de00						dexx:
1121	>de00						                .fill 256
1122	.df00						currentFS:                      ;df00
1123	>df00						                .fill 1
1124	.df01						activeFS:                       ;df01
1125	>df01						                .fill 1
1126	.df02						libFS:                          ;df02
1127	>df02						                .fill 1
1128	.df03						currentFSROM:                   ;df03
1129	>df03						                .fill 1
1130	.df04						commandLinePointer:             ;df04
1131	>df04						                .fill 2

1133							                ; 17 info blocks in total, but everything is relative
1134							                ; to the 0th, so there's only a need to instantiate a
1135							                ; struct for that one. Don't think 64tass handles
1136							                ; arrays of structs anyway.
1137	.df06						fsInfoBlocks:   .dstruct fsInfoBlock ;df06
1100	>df06						name: .fill 8
1101	>df0e						minHandle: .fill 1
1102	>df0f						maxHandle: .fill 1
1103	>df10						fsNumber: .fill 1
1104							                .ends
1138	>df11						                .fill 16*size(fsInfoBlock)
1139	.dfc1						fsInfoBlocksTerminator:         ;dfc1
1140							                ; space reserved for the 0 terminator when the full
1141							                ; set of info blocks are filled.
1142	>dfc1						                .fill 1
1143	.dfc2						fsFlags: .block                 ;dfc2
1144	>dfc2						                .fill 1
1145	=$80						useASCII=$80
1146	=$80						isAPPEND=$80
1147	=$40						noLineNumbers=$40
1148							                .bend
1149	.dfc3						lineNumberBCD:                  ;dfc3
1150	>dfc3						                .fill 2
1151	.dfc5						lastCharPrinted:                ;dfc5
1152	>dfc5						                .fill 1
1153	.dfc6						tempFSFlag:                     ;dfc6
1154	>dfc6						                .fill 1
1155	.dfc7						moveOSGBPB: .dstruct osgbpbBlock ;dfc7
1107	>dfc7						handle: .fill 1
1108	>dfc8						addr: .fill 4
1109	>dfcc						numBytes: .fill 4
1110	>dfd0						ptr: .fill 4
1111							                .ends
1156	.dfd4						moveSrcHandle:                  ;dfd4
1157	>dfd4						                .fill 1
1158	.dfd5						moveDestHandle:                 ;dfd5
1159	>dfd5						                .fill 1
1160	.dfd6						moveBufferMSB:                  ;dfd6
1161	>dfd6						                .fill 1
1162	.dfd7						moveNumPages:                   ;dfd7
1163	>dfd7						                .fill 1
1164	.dfd8						moveDestName:                   ;dfd8
1165	>dfd8						                .fill 2
1166	.dfda						activeFSCV:                     ;dfda
1167	>dfda						                .fill 2
1168	.dfdc						oldACCCON:                      ;dfdc
1169	>dfdc						                .fill 1
1170	.dfdd						hasACCCONChanged:                ;dfdd
1171	>dfdd						                .fill 1

1174	.dfde						sramBankModes:
1175							                ; pseudo/absolute bank flags, as queried by OSBYTE $45
1177	>dfde						                .fill 1

1191							                .bend
1192							                .endv

1194							;-------------------------------------------------------------------------
1195							;
1196							; VDU variables
1197							;
1198							; MasRef E.4-1
1199							;
1200							VDUVariables: .struct
1201	.0000						graphicsWindow:
1202							;graphicsWindowLeftBottom:
1203							; &00 2 Graphics window left column. (p)
1204	>0000						graphicsWindowPixelsLeft: .fill 2
1205							; &02 2 Graphics window bottom row. (p)
1206	>0002						graphicsWindowPixelsBottom: .fill 2
1207							;graphicsWindowRightTop:
1208							; &04 2 Graphics window right column. (p)
1209	>0004						graphicsWindowPixelsRight: .fill 2
1210							; &06 2 Graphics window top row. (p)
1211	>0006						graphicsWindowPixelsTop: .fill 2
1212	.0008						textWindow:
1213							; &08 1 Text window left column.
1214	>0008						textWindowLeft: .fill 1
1215							; &09 1 Text window bottom row.
1216	>0009						textWindowBottom: .fill 1
1217							; &0A 1 Text window right column.
1218	>000a						textWindowRight: .fill 1
1219							; &0B 1 Text window top row.
1220	>000b						textWindowTop: .fill 1
1221							; &0C 2 Graphics origin X coordinate. (e)
1222	>000c						graphicsWindowOriginX: .fill 2
1223							; &0E 2 Graphics origin Y coordinate. (e)
1224	>000e						graphicsWindowOriginY: .fill 2
1225							; &10 2 Graphics cursor X coordinate. (e)
1226	>0010						graphicsCursorPositionX: .fill 2
1227							; &12 2 Graphics cursor Y coordinate. (e)
1228	>0012						graphicsCursorPositionY: .fill 2
1229							; &14 2 Previous graphics cursor X coordinate. (p)
1230	.0014						oldGraphicsCursorPixels:
1231	>0014						oldGraphicsCursorPixelsX: .fill 2
1232							; &16 2 Previous graphics cursor Y coordinate. (p)
1233	>0016						oldGraphicsCursorPixelsY: .fill 2
1234							; &18 1 Text cursor X coordinate (from left of screen) when not cursor editing. When cursor editing, normally the input cursor X coordinate, but the output cursor X coordinate within an "unknown PLOT codes" routine.
1235	>0018						textCursorXPosition: .fill 1
1236							; &19 1 Text cursor Y coordinate (from top of screen) when not cursor editing. When cursor editing, normally t.lsthe input cursor Y coordinate, but the output cursor Y coordinate within an "unknown PLOT codes" routine.
1237	>0019						textCursorYPosition: .fill 1
1238							; &1A 1 Y produced by GADDR (see next section) so that (ZMEMG),Y addresses the correct byte.
1239	>001a						graphicsAddressOffset: .fill 1
1240							; &1B-&23 VDU queue: &23 contains last byte of queue, other bytes immediately precede it.
1241	=9						queueSize=9
1242	>001b						queueBegin: .fill queueSize
1243	.0024						queueEnd:
1244	.0024						graphicsCursorPixels:
1245							; &24 2 Graphics cursor X coordinate. (p)
1246	>0024						graphicsCursorPixelsX: .fill 2
1247							; &26 2 Graphics cursor Y coordinate. (p)
1248	>0026						graphicsCursorPixelsY: .fill 2
1249							; &28-&49 Workspace. But variable &38 must not be used in a Teletext mode (mode 7 or 135).
1250							                .union
1251	.0028						ew: .dstruct EllipseWorkspaceVDUVariables
1449							                ; https://tobylobster.github.io/GXR-pages/gxr/S-s3.html#SP4
1450	.0028						aspectRatio:
1451	>0028						                .fill 3
1452	.002b						shear:
1453	>002b						                .fill 3
1454	.002e						halfHeightCounter:
1455	>002e						                .fill 2
1456	.0030						halfHeightSquared:
1457	>0030						                .fill 4
1458	.0034						pointC:
1459	>0034						                .fill 2
1460	.0036						pointD:
1461	>0036						                .fill 2
1462	.0038						leftPoint:
1463	>0038						                .fill 2
1464	.003a						rightPoint:
1465	>003a						                .fill 2
1466	.003c						pointA:
1467	>003c						                .fill 2
1468	.003e						pointB:
1469	>003e						                .fill 2
1470	.0040						pointE:
1471	>0040						                .fill 2
1472	.0042						currentOffsetX:
1473	>0042						                .fill 2
1474	.0044						plotPointX:
1475	.0044						pointF:
1476	>0044						                .fill 2
1477	.0046						plotPointY:
1478	>0046						                .fill 2
1479							                .endstruct
1252	.0028						hlfw: .dstruct HorizontalLineFillWorkspaceVDUVariables
1514	>0028						                .fill 6
1515	.002e						pixelsX:                        ;2e
1516	>002e						                .fill 2
1517	.0030						pixelsY:                        ;30
1518	>0030						                .fill 2
1519	.0032						pixelsRightEndX:
1520	>0032						                .fill 2         ;32
1521	.0034						pixelsLimitX:                   ;34
1522	>0034						                .fill 2
1523							                .endstruct
1253	.0028						mocr: .dstruct MoveOrCopyRectangleWorkspaceVDUVariables
1492	.0028						src: .dstruct VDUAABB
1373	.0028						min: .dstruct VDUCoordinate
1368	>0028						x: .fill 2
1369	>002a						y: .fill 2
1370							                .endstruct
1374	.002c						max: .dstruct VDUCoordinate
1368	>002c						x: .fill 2
1369	>002e						y: .fill 2
1370							                .endstruct
1375							                .endstruct
1493	.0030						L30:
1494	>0030						                .fill 4
1495	.0034						dest: .dstruct VDUAABB
1373	.0034						min: .dstruct VDUCoordinate
1368	>0034						x: .fill 2
1369	>0036						y: .fill 2
1370							                .endstruct
1374	.0038						max: .dstruct VDUCoordinate
1368	>0038						x: .fill 2
1369	>003a						y: .fill 2
1370							                .endstruct
1375							                .endstruct
1496	.003c						L3C:
1497	>003c						                .fill 4
1498	.0040						L40:
1499	>0040						                .fill 2
1500	.0042						shiftToNextByte:
1501	>0042						                .fill 2
1502	.0044						L44:
1503	>0044						                .fill 1
1504	.0045						copy:
1505	>0045						                .fill 1         ;0=move, 2=copy
1506	.0046						L46:
1507	>0046						                .fill 1
1508	.0047						L47:
1509	>0047						                .fill 1

1511							                .endstruct
1254	.0028						workspace: .dstruct GenericWorkspaceVDUVariables
1378	.0028						_28:
1379	>0028						                .fill 1
1380	.0029						_29:
1381	>0029						                .fill 1
1382	.002a						_2A:
1383	>002a						                .fill 1
1384	.002b						_2B:
1385	>002b						                .fill 1
1386	.002c						_2C:
1387	>002c						                .fill 1
1388	.002d						_2D:
1389	>002d						                .fill 1
1390	.002e						_2E:
1391	>002e						                .fill 1
1392	.002f						_2F:
1393	>002f						                .fill 1
1394	.0030						_30:
1395	>0030						                .fill 1
1396	.0031						_31:
1397	>0031						                .fill 1
1398	.0032						_32:
1399	>0032						                .fill 1
1400	.0033						_33:
1401	>0033						                .fill 1
1402	.0034						_34:
1403	>0034						                .fill 1
1404	.0035						_35:
1405	>0035						                .fill 1
1406	.0036						_36:
1407	>0036						                .fill 1
1408	.0037						_37:
1409	>0037						                .fill 1
1410	.0038						_38:
1411	>0038						                .fill 1
1412	.0039						_39:
1413	>0039						                .fill 1
1414	.003a						_3A:
1415	>003a						                .fill 1
1416	.003b						_3B:
1417	>003b						                .fill 1
1418	.003c						_3C:
1419	>003c						                .fill 1
1420	.003d						_3D:
1421	>003d						                .fill 1
1422	.003e						_3E:
1423	>003e						                .fill 1
1424	.003f						_3F:
1425	>003f						                .fill 1
1426	.0040						_40:
1427	>0040						                .fill 1
1428	.0041						_41:
1429	>0041						                .fill 1
1430	.0042						_42:
1431	>0042						                .fill 1
1432	.0043						_43:
1433	>0043						                .fill 1
1434	.0044						_44:
1435	>0044						                .fill 1
1436	.0045						_45:
1437	>0045						                .fill 1
1438	.0046						_46:
1439	>0046						                .fill 1
1440	.0047						_47:
1441	>0047						                .fill 1
1442	.0048						_48:
1443	>0048						                .fill 1
1444	.0049						_49:
1445	>0049						                .fill 1
1446							                .endstruct
1255							                .endunion
1256							; &4A 2 Address at which the 6845 is to display the text cursor.
1257	>004a						textCursorCRTCAddress: .fill 2
1258							; &4C 2 Number of bytes in a character row of the text window.
1259	>004c						textWindowWidthInBytes: .fill 2
1260							; &4E 1 Most significant byte of address of first byte of screen memory.
1261	>004e						startScreenAddressHighByte: .fill 1
1262							; &4F 1 Number of bytes in a character.
1263	>004f						bytesPerCharacter: .fill 1
1264							; &50 2 Address of byte in top left corner of screen display.
1265	>0050						screenTopLeftAddress: .fill 2
1266							; &52 2 Number of bytes in a character row of the whole screen.
1267	>0052						bytesPerCharacterRow: .fill 2
1268							; &54 1 Most significant byte of number of bytes of screen memory.
1269	>0054						screenSizeHighByte: .fill 1
1270							; &55 1 Current screen mode (in range 0-7, i.e. without regard to 'shadowing').
1271	>0055						currentScreenMODE: .fill 1
1272							; &56 1 Memory mode: 0 for 20K modes, 1 for 16K modes, 2 for 10K modes, 3 for 8K modes, 4 for 1K modes.
1273	>0056						currentScreenMODEGroup: .fill 1
1274							; &57 1 Foreground text colour mask.
1275	>0057						foregroundTextColour: .fill 1
1276							; &58 1 Background text colour mask.
1277	>0058						backgroundTextColour: .fill 1
1278							; &59 1 0 if plotting graphics foreground, 8 if plotting graphics background.
1279	>0059						graphicsPlotState: .fill 1
1280							; &5A 1 Current graphics plot mode (usually set to one of following two reduced mod 16).
1281	>005a						graphicsPlotMode: .fill 1
1282							; &5B 1 Current graphics foreground plot mode (as set by VDU 18).
1283	>005b						foregroundGCOLMode: .fill 1
1284							; &5C 1 Current graphics background plot mode (as set by VDU 18).
1285	>005c						backgroundGCOLMode: .fill 1
1286							; &5D 2 Address of routine to process current VDU sequence.
1287	>005d						jumpVector: .fill 2
1288							; &5F 1 Value for 6845 register 10 to revert to on leaving cursor editing.
1289	>005f						lastCursorStartRegisterValue: .fill 1
1290							; &60 1 (Number of logical colours)-1 (0 if Teletext).
1291	>0060						numberOfLogicalColoursMinusOne: .fill 1
1292							; &61 1 (Number of pixels/byte)-1 (0 if not graphics).
1293	>0061						pixelsPerByteMinusOne: .fill 1
1294							; &62 1 Mask for leftmost pixel in a byte.
1295	>0062						colourMaskLeft: .fill 1
1296							; &63 1 Mask for rightmost pixel in a byte.
1297	>0063						colourMaskRight: .fill 1
1298							; &64 1 Output cursor X coordinate when cursor editing, but input cursor X coordinate when cursor editing and inside an 'unknown PLOT codes' routine.
1299	>0064						editCursorXPosition: .fill 1
1300							; &65 1 Output cursor Y coordinate when cursor editing, but input cursor Y coordinate when cursor editing and inside an 'unknown PLOT codes' routine.
1301	>0065						editCursorYPosition: .fill 1
1302							; &66 1 Cursor control flags (as set by VDU 23 16).
1303	.0066						cursorFlags: .block
1304	>0066						                .fill 1
1305							; MasRef E.3-18
1306	=$40						noSpecialVDU5Actions=$40
1307	=$20						noMoveCursorAfterPrint=$20
1308	=$10						noVerticalScroll=$10
1309	=$08						swapAxes=$08                    ;if set, X=vert; if clear, X=horiz
1310	=$04						invertVertical=$04              ;if set, vert=up; if clear, vert=down
1311	=$02						invertHorizontal=$02            ;if set, horiz=left; if clear, horiz=right
1312	=$01						scrollProtect=$01
1313							                .endblock
1314							; &67 1 Dot pattern (as set by VDU 23 6).
1315	>0067						dotPattern: .fill 1
1316							; &68 1 Current state of dot pattern.
1317	>0068						dotPatternState: .fill 1
1318							; &69 1 0 if colour being plotted is solid, non-zero if colour is an ECF
1319	>0069						isColourECF: .fill 1
1320							; &6A 1 0 if graphics foreground colour is solid, non-zero if foreground colour is an ECF
1321	>006a						isForegroundECF: .fill 1
1322							; &6B 1 0 if graphics background colour is solid, non-zero if background colour is an ECF
1323	>006b						isBackgroundECF: .fill 1
1324							; &6C 1 Top bit set when cursor is in "column 81".
1325	>006c						column81: .fill 1
1326							; &6D 1 Current graphics foreground colour (as set by VDU 18).
1327	>006d						foregroundGraphicsColour: .fill 1
1328							; &6E 1 Current graphics background colour (as set by VDU 18)
1329	>006e						backgroundGraphicsColour: .fill 1
1330							; &6F-&7E Software copy of the current palette.
1331	>006f						currentPalette: .fill 16
1332							; &7F 1 Reserved.
1333	>007f						reserved: .fill 1
1334							                .endstruct

1336							                .virtual $300
1337	.0300						vduv: .dstruct VDUVariables
1201	.0300						graphicsWindow:
1202							;graphicsWindowLeftBottom:
1203							; &00 2 Graphics window left column. (p)
1204	>0300						graphicsWindowPixelsLeft: .fill 2
1205							; &02 2 Graphics window bottom row. (p)
1206	>0302						graphicsWindowPixelsBottom: .fill 2
1207							;graphicsWindowRightTop:
1208							; &04 2 Graphics window right column. (p)
1209	>0304						graphicsWindowPixelsRight: .fill 2
1210							; &06 2 Graphics window top row. (p)
1211	>0306						graphicsWindowPixelsTop: .fill 2
1212	.0308						textWindow:
1213							; &08 1 Text window left column.
1214	>0308						textWindowLeft: .fill 1
1215							; &09 1 Text window bottom row.
1216	>0309						textWindowBottom: .fill 1
1217							; &0A 1 Text window right column.
1218	>030a						textWindowRight: .fill 1
1219							; &0B 1 Text window top row.
1220	>030b						textWindowTop: .fill 1
1221							; &0C 2 Graphics origin X coordinate. (e)
1222	>030c						graphicsWindowOriginX: .fill 2
1223							; &0E 2 Graphics origin Y coordinate. (e)
1224	>030e						graphicsWindowOriginY: .fill 2
1225							; &10 2 Graphics cursor X coordinate. (e)
1226	>0310						graphicsCursorPositionX: .fill 2
1227							; &12 2 Graphics cursor Y coordinate. (e)
1228	>0312						graphicsCursorPositionY: .fill 2
1229							; &14 2 Previous graphics cursor X coordinate. (p)
1230	.0314						oldGraphicsCursorPixels:
1231	>0314						oldGraphicsCursorPixelsX: .fill 2
1232							; &16 2 Previous graphics cursor Y coordinate. (p)
1233	>0316						oldGraphicsCursorPixelsY: .fill 2
1234							; &18 1 Text cursor X coordinate (from left of screen) when not cursor editing. When cursor editing, normally the input cursor X coordinate, but the output cursor X coordinate within an "unknown PLOT codes" routine.
1235	>0318						textCursorXPosition: .fill 1
1236							; &19 1 Text cursor Y coordinate (from top of screen) when not cursor editing. When cursor editing, normally t.lsthe input cursor Y coordinate, but the output cursor Y coordinate within an "unknown PLOT codes" routine.
1237	>0319						textCursorYPosition: .fill 1
1238							; &1A 1 Y produced by GADDR (see next section) so that (ZMEMG),Y addresses the correct byte.
1239	>031a						graphicsAddressOffset: .fill 1
1240							; &1B-&23 VDU queue: &23 contains last byte of queue, other bytes immediately precede it.
1241	=9						queueSize=9
1242	>031b						queueBegin: .fill queueSize
1243	.0324						queueEnd:
1244	.0324						graphicsCursorPixels:
1245							; &24 2 Graphics cursor X coordinate. (p)
1246	>0324						graphicsCursorPixelsX: .fill 2
1247							; &26 2 Graphics cursor Y coordinate. (p)
1248	>0326						graphicsCursorPixelsY: .fill 2
1249							; &28-&49 Workspace. But variable &38 must not be used in a Teletext mode (mode 7 or 135).
1250							                .union
1251	.0328						ew: .dstruct EllipseWorkspaceVDUVariables
1449							                ; https://tobylobster.github.io/GXR-pages/gxr/S-s3.html#SP4
1450	.0328						aspectRatio:
1451	>0328						                .fill 3
1452	.032b						shear:
1453	>032b						                .fill 3
1454	.032e						halfHeightCounter:
1455	>032e						                .fill 2
1456	.0330						halfHeightSquared:
1457	>0330						                .fill 4
1458	.0334						pointC:
1459	>0334						                .fill 2
1460	.0336						pointD:
1461	>0336						                .fill 2
1462	.0338						leftPoint:
1463	>0338						                .fill 2
1464	.033a						rightPoint:
1465	>033a						                .fill 2
1466	.033c						pointA:
1467	>033c						                .fill 2
1468	.033e						pointB:
1469	>033e						                .fill 2
1470	.0340						pointE:
1471	>0340						                .fill 2
1472	.0342						currentOffsetX:
1473	>0342						                .fill 2
1474	.0344						plotPointX:
1475	.0344						pointF:
1476	>0344						                .fill 2
1477	.0346						plotPointY:
1478	>0346						                .fill 2
1479							                .endstruct
1252	.0328						hlfw: .dstruct HorizontalLineFillWorkspaceVDUVariables
1514	>0328						                .fill 6
1515	.032e						pixelsX:                        ;2e
1516	>032e						                .fill 2
1517	.0330						pixelsY:                        ;30
1518	>0330						                .fill 2
1519	.0332						pixelsRightEndX:
1520	>0332						                .fill 2         ;32
1521	.0334						pixelsLimitX:                   ;34
1522	>0334						                .fill 2
1523							                .endstruct
1253	.0328						mocr: .dstruct MoveOrCopyRectangleWorkspaceVDUVariables
1492	.0328						src: .dstruct VDUAABB
1373	.0328						min: .dstruct VDUCoordinate
1368	>0328						x: .fill 2
1369	>032a						y: .fill 2
1370							                .endstruct
1374	.032c						max: .dstruct VDUCoordinate
1368	>032c						x: .fill 2
1369	>032e						y: .fill 2
1370							                .endstruct
1375							                .endstruct
1493	.0330						L30:
1494	>0330						                .fill 4
1495	.0334						dest: .dstruct VDUAABB
1373	.0334						min: .dstruct VDUCoordinate
1368	>0334						x: .fill 2
1369	>0336						y: .fill 2
1370							                .endstruct
1374	.0338						max: .dstruct VDUCoordinate
1368	>0338						x: .fill 2
1369	>033a						y: .fill 2
1370							                .endstruct
1375							                .endstruct
1496	.033c						L3C:
1497	>033c						                .fill 4
1498	.0340						L40:
1499	>0340						                .fill 2
1500	.0342						shiftToNextByte:
1501	>0342						                .fill 2
1502	.0344						L44:
1503	>0344						                .fill 1
1504	.0345						copy:
1505	>0345						                .fill 1         ;0=move, 2=copy
1506	.0346						L46:
1507	>0346						                .fill 1
1508	.0347						L47:
1509	>0347						                .fill 1

1511							                .endstruct
1254	.0328						workspace: .dstruct GenericWorkspaceVDUVariables
1378	.0328						_28:
1379	>0328						                .fill 1
1380	.0329						_29:
1381	>0329						                .fill 1
1382	.032a						_2A:
1383	>032a						                .fill 1
1384	.032b						_2B:
1385	>032b						                .fill 1
1386	.032c						_2C:
1387	>032c						                .fill 1
1388	.032d						_2D:
1389	>032d						                .fill 1
1390	.032e						_2E:
1391	>032e						                .fill 1
1392	.032f						_2F:
1393	>032f						                .fill 1
1394	.0330						_30:
1395	>0330						                .fill 1
1396	.0331						_31:
1397	>0331						                .fill 1
1398	.0332						_32:
1399	>0332						                .fill 1
1400	.0333						_33:
1401	>0333						                .fill 1
1402	.0334						_34:
1403	>0334						                .fill 1
1404	.0335						_35:
1405	>0335						                .fill 1
1406	.0336						_36:
1407	>0336						                .fill 1
1408	.0337						_37:
1409	>0337						                .fill 1
1410	.0338						_38:
1411	>0338						                .fill 1
1412	.0339						_39:
1413	>0339						                .fill 1
1414	.033a						_3A:
1415	>033a						                .fill 1
1416	.033b						_3B:
1417	>033b						                .fill 1
1418	.033c						_3C:
1419	>033c						                .fill 1
1420	.033d						_3D:
1421	>033d						                .fill 1
1422	.033e						_3E:
1423	>033e						                .fill 1
1424	.033f						_3F:
1425	>033f						                .fill 1
1426	.0340						_40:
1427	>0340						                .fill 1
1428	.0341						_41:
1429	>0341						                .fill 1
1430	.0342						_42:
1431	>0342						                .fill 1
1432	.0343						_43:
1433	>0343						                .fill 1
1434	.0344						_44:
1435	>0344						                .fill 1
1436	.0345						_45:
1437	>0345						                .fill 1
1438	.0346						_46:
1439	>0346						                .fill 1
1440	.0347						_47:
1441	>0347						                .fill 1
1442	.0348						_48:
1443	>0348						                .fill 1
1444	.0349						_49:
1445	>0349						                .fill 1
1446							                .endstruct
1255							                .endunion
1256							; &4A 2 Address at which the 6845 is to display the text cursor.
1257	>034a						textCursorCRTCAddress: .fill 2
1258							; &4C 2 Number of bytes in a character row of the text window.
1259	>034c						textWindowWidthInBytes: .fill 2
1260							; &4E 1 Most significant byte of address of first byte of screen memory.
1261	>034e						startScreenAddressHighByte: .fill 1
1262							; &4F 1 Number of bytes in a character.
1263	>034f						bytesPerCharacter: .fill 1
1264							; &50 2 Address of byte in top left corner of screen display.
1265	>0350						screenTopLeftAddress: .fill 2
1266							; &52 2 Number of bytes in a character row of the whole screen.
1267	>0352						bytesPerCharacterRow: .fill 2
1268							; &54 1 Most significant byte of number of bytes of screen memory.
1269	>0354						screenSizeHighByte: .fill 1
1270							; &55 1 Current screen mode (in range 0-7, i.e. without regard to 'shadowing').
1271	>0355						currentScreenMODE: .fill 1
1272							; &56 1 Memory mode: 0 for 20K modes, 1 for 16K modes, 2 for 10K modes, 3 for 8K modes, 4 for 1K modes.
1273	>0356						currentScreenMODEGroup: .fill 1
1274							; &57 1 Foreground text colour mask.
1275	>0357						foregroundTextColour: .fill 1
1276							; &58 1 Background text colour mask.
1277	>0358						backgroundTextColour: .fill 1
1278							; &59 1 0 if plotting graphics foreground, 8 if plotting graphics background.
1279	>0359						graphicsPlotState: .fill 1
1280							; &5A 1 Current graphics plot mode (usually set to one of following two reduced mod 16).
1281	>035a						graphicsPlotMode: .fill 1
1282							; &5B 1 Current graphics foreground plot mode (as set by VDU 18).
1283	>035b						foregroundGCOLMode: .fill 1
1284							; &5C 1 Current graphics background plot mode (as set by VDU 18).
1285	>035c						backgroundGCOLMode: .fill 1
1286							; &5D 2 Address of routine to process current VDU sequence.
1287	>035d						jumpVector: .fill 2
1288							; &5F 1 Value for 6845 register 10 to revert to on leaving cursor editing.
1289	>035f						lastCursorStartRegisterValue: .fill 1
1290							; &60 1 (Number of logical colours)-1 (0 if Teletext).
1291	>0360						numberOfLogicalColoursMinusOne: .fill 1
1292							; &61 1 (Number of pixels/byte)-1 (0 if not graphics).
1293	>0361						pixelsPerByteMinusOne: .fill 1
1294							; &62 1 Mask for leftmost pixel in a byte.
1295	>0362						colourMaskLeft: .fill 1
1296							; &63 1 Mask for rightmost pixel in a byte.
1297	>0363						colourMaskRight: .fill 1
1298							; &64 1 Output cursor X coordinate when cursor editing, but input cursor X coordinate when cursor editing and inside an 'unknown PLOT codes' routine.
1299	>0364						editCursorXPosition: .fill 1
1300							; &65 1 Output cursor Y coordinate when cursor editing, but input cursor Y coordinate when cursor editing and inside an 'unknown PLOT codes' routine.
1301	>0365						editCursorYPosition: .fill 1
1302							; &66 1 Cursor control flags (as set by VDU 23 16).
1303	.0366						cursorFlags: .block
1304	>0366						                .fill 1
1305							; MasRef E.3-18
1306	=$40						noSpecialVDU5Actions=$40
1307	=$20						noMoveCursorAfterPrint=$20
1308	=$10						noVerticalScroll=$10
1309	=$08						swapAxes=$08                    ;if set, X=vert; if clear, X=horiz
1310	=$04						invertVertical=$04              ;if set, vert=up; if clear, vert=down
1311	=$02						invertHorizontal=$02            ;if set, horiz=left; if clear, horiz=right
1312	=$01						scrollProtect=$01
1313							                .endblock
1314							; &67 1 Dot pattern (as set by VDU 23 6).
1315	>0367						dotPattern: .fill 1
1316							; &68 1 Current state of dot pattern.
1317	>0368						dotPatternState: .fill 1
1318							; &69 1 0 if colour being plotted is solid, non-zero if colour is an ECF
1319	>0369						isColourECF: .fill 1
1320							; &6A 1 0 if graphics foreground colour is solid, non-zero if foreground colour is an ECF
1321	>036a						isForegroundECF: .fill 1
1322							; &6B 1 0 if graphics background colour is solid, non-zero if background colour is an ECF
1323	>036b						isBackgroundECF: .fill 1
1324							; &6C 1 Top bit set when cursor is in "column 81".
1325	>036c						column81: .fill 1
1326							; &6D 1 Current graphics foreground colour (as set by VDU 18).
1327	>036d						foregroundGraphicsColour: .fill 1
1328							; &6E 1 Current graphics background colour (as set by VDU 18)
1329	>036e						backgroundGraphicsColour: .fill 1
1330							; &6F-&7E Software copy of the current palette.
1331	>036f						currentPalette: .fill 16
1332							; &7F 1 Reserved.
1333	>037f						reserved: .fill 1
1334							                .endstruct
1338							                .endvirtual

1340							; vduQueueItemAddr: .function index
1341							;                 .cerror index<0||index>=vdu.queueSize,"bad VDU queue index"
1342							;                 .endfunction vdu.queue+vdu.queueSize-1-index

1344							; Presumed addresses in ANDY that don't happen to coincide with other
1345							; labels.
1346							;
1347							; MasRef E.4-5, MasRef F.6-10
1348							;
1349							; &8000-83FF  RAM  Soft key expansions buffer
1350							; &8400-87FF  RAM  VDU workspace.
1351							; &8800-07    RAM  ECF pattern 1 definition.
1352							; &8808-0F    RAM  ECF pattern 2 definition.
1353							; &8810-17    RAM  ECF pattern 3 definition.
1354							; &8818-1F    RAM  ECF pattern 4 definition.
1355							; &8820-27    RAM  Current foreground ECF pattern or solid colour.
1356							; &8828-2F    RAM  Current background ECF pattern or solid colour.
1357							; &8830-BF    RAM  VDU workspace.
1358							; &88C0-FF    RAM  Reserved for future expansion.
1359							; &8900-FF    RAM  Current definitions of characters &20-3F.
1360							; &8A00-FF    RAM  Current definitions of characters &40-5F.
1361							; &8B00-FF    RAM  Current definitions of characters &60-7F.
1362							; &8C00-FF    RAM  Current definitions of characters &80-9F.
1363							; &8D00-FF    RAM  Current definitions of characters &A0-BF.
1364							; &8E00-FF    RAM  Current definitions of characters &C0-DF.
1365							; &8F00-FF    RAM  Current definitions of characters &E0-FF.

1367							VDUCoordinate: .struct
1368	>0000						x: .fill 2
1369	>0002						y: .fill 2
1370							                .endstruct

1372							VDUAABB: .struct
1373	.0000						min: .dstruct VDUCoordinate
1368	>0000						x: .fill 2
1369	>0002						y: .fill 2
1370							                .endstruct
1374	.0004						max: .dstruct VDUCoordinate
1368	>0004						x: .fill 2
1369	>0006						y: .fill 2
1370							                .endstruct
1375							                .endstruct

1377							GenericWorkspaceVDUVariables: .struct
1378	.0000						_28:
1379	>0000						                .fill 1
1380	.0001						_29:
1381	>0001						                .fill 1
1382	.0002						_2A:
1383	>0002						                .fill 1
1384	.0003						_2B:
1385	>0003						                .fill 1
1386	.0004						_2C:
1387	>0004						                .fill 1
1388	.0005						_2D:
1389	>0005						                .fill 1
1390	.0006						_2E:
1391	>0006						                .fill 1
1392	.0007						_2F:
1393	>0007						                .fill 1
1394	.0008						_30:
1395	>0008						                .fill 1
1396	.0009						_31:
1397	>0009						                .fill 1
1398	.000a						_32:
1399	>000a						                .fill 1
1400	.000b						_33:
1401	>000b						                .fill 1
1402	.000c						_34:
1403	>000c						                .fill 1
1404	.000d						_35:
1405	>000d						                .fill 1
1406	.000e						_36:
1407	>000e						                .fill 1
1408	.000f						_37:
1409	>000f						                .fill 1
1410	.0010						_38:
1411	>0010						                .fill 1
1412	.0011						_39:
1413	>0011						                .fill 1
1414	.0012						_3A:
1415	>0012						                .fill 1
1416	.0013						_3B:
1417	>0013						                .fill 1
1418	.0014						_3C:
1419	>0014						                .fill 1
1420	.0015						_3D:
1421	>0015						                .fill 1
1422	.0016						_3E:
1423	>0016						                .fill 1
1424	.0017						_3F:
1425	>0017						                .fill 1
1426	.0018						_40:
1427	>0018						                .fill 1
1428	.0019						_41:
1429	>0019						                .fill 1
1430	.001a						_42:
1431	>001a						                .fill 1
1432	.001b						_43:
1433	>001b						                .fill 1
1434	.001c						_44:
1435	>001c						                .fill 1
1436	.001d						_45:
1437	>001d						                .fill 1
1438	.001e						_46:
1439	>001e						                .fill 1
1440	.001f						_47:
1441	>001f						                .fill 1
1442	.0020						_48:
1443	>0020						                .fill 1
1444	.0021						_49:
1445	>0021						                .fill 1
1446							                .endstruct

1448							EllipseWorkspaceVDUVariables: .struct
1449							                ; https://tobylobster.github.io/GXR-pages/gxr/S-s3.html#SP4
1450	.0000						aspectRatio:
1451	>0000						                .fill 3
1452	.0003						shear:
1453	>0003						                .fill 3
1454	.0006						halfHeightCounter:
1455	>0006						                .fill 2
1456	.0008						halfHeightSquared:
1457	>0008						                .fill 4
1458	.000c						pointC:
1459	>000c						                .fill 2
1460	.000e						pointD:
1461	>000e						                .fill 2
1462	.0010						leftPoint:
1463	>0010						                .fill 2
1464	.0012						rightPoint:
1465	>0012						                .fill 2
1466	.0014						pointA:
1467	>0014						                .fill 2
1468	.0016						pointB:
1469	>0016						                .fill 2
1470	.0018						pointE:
1471	>0018						                .fill 2
1472	.001a						currentOffsetX:
1473	>001a						                .fill 2
1474	.001c						plotPointX:
1475	.001c						pointF:
1476	>001c						                .fill 2
1477	.001e						plotPointY:
1478	>001e						                .fill 2
1479							                .endstruct

1481							HorizontalLineFillWorkspaceZP: .struct
1482	>0000						notByteMatch: .fill 1
1483	>0001						a: .fill 1
1484	>0002						b: .fill 2
1485							;c: .fill 2
1486	>0004						pixelsX: .fill 2
1487	>0006						d: .fill 1
1488	>0007						resultEOR: .fill 1
1489							                .endstruct

1491							MoveOrCopyRectangleWorkspaceVDUVariables: .struct
1492	.0000						src: .dstruct VDUAABB
1373	.0000						min: .dstruct VDUCoordinate
1368	>0000						x: .fill 2
1369	>0002						y: .fill 2
1370							                .endstruct
1374	.0004						max: .dstruct VDUCoordinate
1368	>0004						x: .fill 2
1369	>0006						y: .fill 2
1370							                .endstruct
1375							                .endstruct
1493	.0008						L30:
1494	>0008						                .fill 4
1495	.000c						dest: .dstruct VDUAABB
1373	.000c						min: .dstruct VDUCoordinate
1368	>000c						x: .fill 2
1369	>000e						y: .fill 2
1370							                .endstruct
1374	.0010						max: .dstruct VDUCoordinate
1368	>0010						x: .fill 2
1369	>0012						y: .fill 2
1370							                .endstruct
1375							                .endstruct
1496	.0014						L3C:
1497	>0014						                .fill 4
1498	.0018						L40:
1499	>0018						                .fill 2
1500	.001a						shiftToNextByte:
1501	>001a						                .fill 2
1502	.001c						L44:
1503	>001c						                .fill 1
1504	.001d						copy:
1505	>001d						                .fill 1         ;0=move, 2=copy
1506	.001e						L46:
1507	>001e						                .fill 1
1508	.001f						L47:
1509	>001f						                .fill 1

1511							                .endstruct

1513							HorizontalLineFillWorkspaceVDUVariables: .struct
1514	>0000						                .fill 6
1515	.0006						pixelsX:                        ;2e
1516	>0006						                .fill 2
1517	.0008						pixelsY:                        ;30
1518	>0008						                .fill 2
1519	.000a						pixelsRightEndX:
1520	>000a						                .fill 2         ;32
1521	.000c						pixelsLimitX:                   ;34
1522	>000c						                .fill 2
1523							                .endstruct

1525							HorizontalLineFillWorkspaceANDY: .struct
1526	>0000						ecfPattern: .fill 8
1527							                .endstruct

1529	=16						softKeyCount=16
1530	=$400						softKeyDataTotalSize=$400

1532							                .virtual $8000
1533	.8000						andy: .block
1534	.8000						softKeys: .block
1535	>8000						stringLSBs: .fill softKeyCount
1536	>8010						endLSB: .fill 1
1537	>8011						stringMSBs: .fill softKeyCount
1538	>8021						endMSB: .fill 1
1539	.8022						strings:
1540	>8022						                .fill softKeys+$400-*
1541	.8400						end:
1542							                .endblock
1543	>8400						                .fill $8800-*;(softKeyCount*2+1)
1544	.8800						ecfPatterns:
1545	>8800						ecfPattern1: .fill 8
1546	>8808						ecfPattern2: .fill 8
1547	>8810						ecfPattern3: .fill 8
1548	>8818						ecfPattern4: .fill 8
1549	.8820						currentECFPatterns:
1550	>8820						fgECFPattern: .fill 8
1551	>8828						bgECFPattern: .fill 8
1552	.8830						workspace:
1553							                .union
1554	.8830						hlfw: .dstruct HorizontalLineFillWorkspaceANDY
1526	>8830						ecfPattern: .fill 8
1527							                .endstruct
1555	>8830						                .fill 208
1556							                .endunion
1557	.8900						softCharacterDefinitions:
1558	>8900						                .fill (256-32)*8
1561							                .endblock
1562							                .endvirtual

1565	=$8000						L8000=$8000
1566	=$8001						L8001=$8001
1567	=$8002						L8002=$8002
1568	=$8004						L8004=$8004
1569	=$8010						L8010=$8010
1570	=$8011						L8011=$8011
1571	=$8012						L8012=$8012
1572							                ;l8011=$8011
1573							                ;l8012=$8012
1574	=$8021						L8021=$8021

1576							; see $d40d, $d4ae
1577							;
1578							; (suspect these are actually references to $8840-$104 and $8848-$104)
1579	=$873c						L873C=$873c
1580	=$8744						L8744=$8744

1582	=$8400						L8400=$8400
1583	=$8500						L8500=$8500
1584	=$8600						L8600=$8600
1585	=$8700						L8700=$8700
1586	=$87f8						L87F8=$87f8
1587	=$87ff						L87FF=$87FF
1588	=$8800						L8800=$8800
1589	=$8803						L8803=$8803
1590	=$8804						L8804=$8804
1591	=$881e						L881E=$881E
1592	=$8820						L8820=$8820
1593	=$8830						multiplicand=$8830              ; 3 bytes
1594	=$8830						L8830=$8830
1595	=$8831						L8831=$8831
1596	=$8832						L8832=$8832
1597	=$8833						L8833=$8833
1598	=$8834						multiplier=$8834                ; 3 bytes
1599	=$8834						product=$8834                   ; 6 bytes
1600	=$8834						sqrtNumber=$8834                ; 6 bytes
1601	=$8834						L8834=$8834
1602	=$8835						L8835=$8835
1603	=$8836						L8836=$8836
1604	=$8837						L8837=$8837
1605	=$8838						L8838=$8838
1606	=$8839						L8839=$8839
1607							;dividend=$883a                  ; 3 bytes
1608	=$883a						L883A=$883a
1609	=$883b						L883B=$883b
1610	=$883c						L883C=$883C
1611	=$883d						L883D=$883D
1612							;divisor=$883e                   ; 3 bytes
1613	=$883e						L883E=$883e
1614	=$883f						L883F=$883f
1615	=$8840						L8840=$8840
1616	=$8841						ellipseSignFlag=$8841           ; 1 byte
1617	=$8841						L8841=$8841
1618	=$8842						ellipseAccumulatedShear=$8842   ; 3 bytes
1619	=$8842						L8842=$8842
1620	=$8843						L8843=$8843
1621	=$8844						L8844=$8844
1622	=$8845						ellipseCountOddNumbers=$8845    ; 4 bytes
1623	=$8845						L8845=$8845
1624	=$8846						L8846=$8846
1625	=$8847						L8847=$8847
1626	=$8848						L8848=$8848
1627	=$8849						ellipseCountSquares=$8849       ; 4 bytes
1628	=$8849						L8849=$8849
1629	=$884a						L884A=$884a
1630	=$884b						L884B=$884b
1631	=$884c						L884C=$884c
1632	=$884d						ellipseCountHeight=$884d

1634							;-------------------------------------------------------------------------

1645							                .virtual $00
1646							                .union
1647	.0000						tubeOSFILEParameterBlock: .dstruct OSFILEParameterBlock
492	.0000						fileName:
493	>0000						                .fill 2
494	.0002						addresses:
495	.0002						load:
496	>0002						                .fill 4
497	.0006						exec:
498	>0006						                .fill 4
499	.000a						length:
500	.000a						saveStart:
501	>000a						                .fill 4
502	.000e						attributes:
503	.000e						saveEnd:
504	>000e						                .fill 4
505							                .endstruct
1648	.0000						tubeOSGBPBParameterBlock: .dstruct OSGBPBParameterBlock
461	.0000						handle:
462	>0000						                .fill 1
463	.0001						address:
464	>0001						                .fill 4
465	.0005						count:
466	>0005						                .fill 4
467	.0009						ptr:
468	>0009						                .fill 4
469							                .endstruct
1652	>0000						tubeLanguageHostAddr: .fill 2
1654							                .endunion
1655	>0012						tubeTransferAddr: .fill 2
1656	>0014						tubeNotClaimed: .fill 1            ;bit 7 clear if tube claimed
1657	>0015						tubeClaimantID: .fill 1
1665	.0016						tubeZeroPageCodeAddr:
1666							                ; Tube handler zero-page code sits here.
1667							                .endvirtual

1669	=$700						tubeStringBuffer=$700
1670	=$0128						tubeOSWORDBuffer=$0128

1673							                ; Need to tidy these up...
1675	=$53						tubeLanguageParasiteAddr=tubeHost.zeroPageCode.languageParasiteAddr

1683	=$16						tubeHostBrkHandler=tubeHost.zeroPageCode.brkHandler
1684	=$32						tubeHostIdleStartup=tubeHost.zeroPageCode.idleStartup
1685	=$36						tubeHostIdleLoop=tubeHost.zeroPageCode.idleLoop

1690							;-------------------------------------------------------------------------
1691							; MasRef E.4-4
1692							                .virtual $d0
1693	.00d0						STATE: .block
1694	>00d0						                .fill 1
1695							                ; D.2-32
1696	=$01						isPrinterEnabled=$01
1697	=$02						isScrollingDisabled=$02
1698	=$04						isPagedScrolling=$04
1699	=$08						isTextWindow=$08
1700	=$10						isShadowMode=$10
1701	=$20						isVDU5=$20
1702	=$40						isCursorEditing=$40
1703	=$80						isVDU21=$80
1704							                .bend

1706	>00d1						ZMASK: .fill 1                       ;Pixel mask
1707	>00d2						ZORA: .fill 1                        ;Text OR mask
1708	>00d3						ZEOR: .fill 1                        ;Text EOR mask
1709	>00d4						ZGORA: .fill 1                       ;Graphics OR mask
1710	>00d5						ZGEOR: .fill 1                       ;Graphics EOR mask
1711	>00d6						ZMEMG: .fill 2                       ;Graphics pointer
1712	>00d8						ZMEMT: .fill 2                       ;Text pointer
1713	>00da						ZTEMP: .fill 2                       ;Temporary space
1714	>00dc						ZTEMPB: .fill 2                      ;Temporary space
1715	>00de						ZTEMPC: .fill 2                      ;Temporary space
1716	>00e0						ZTEMPD: .fill 2                      ;Temporary space
1717							                .endv

1719							                .virtual ZTEMP
1720	.00da						zhlfw: .dstruct HorizontalLineFillWorkspaceZP
1482	>00da						notByteMatch: .fill 1
1483	>00db						a: .fill 1
1484	>00dc						b: .fill 2
1485							;c: .fill 2
1486	>00de						pixelsX: .fill 2
1487	>00e0						d: .fill 1
1488	>00e1						resultEOR: .fill 1
1489							                .endstruct
1721							                .endv

1724	=$f8						softKeyExpansionPtr=$f8       ;pointer to current char when expanding soft key.
1725	=$fa						SEIWKA=$fa
1726	=$fb						SEIWKB=$fb

1728	=$d8						vduWriteCursor=$d8

1730	=$d00						nmiEntryPoint=$d00

1732	=0						gcolModeOverwrite=0
1733	=1						gcolModeOR=1
1734	=2						gcolModeAND=2
1735	=3						gcolModeEOR=3
1736	=4						gcolModeInvert=4
1737	=5						gcolModeLeave=5

1739							;-------------------------------------------------------------------------

1741							StarKEYWorkspace: .struct
1742	>0000						newStringLength: .fill 1
1743	>0001						destPtr: .fill 2
1744	>0003						srcPtr: .fill 2
1745	>0005						counter: .fill 2
1746							                .endstruct

1748							OSGBPBWorkspace: .struct
1749	>0000						ptr: .fill 2
1750							                .endstruct

1752							ParseFileNameFSWorkspace: .struct
1753	>0000						fsInfoOffset: .fill 1
1754							                .endstruct

1756							OSCLIWorkspace: .struct
1757	>0000						tablePtr: .fill 2
1758							                .endstruct

1760							                ; TODO - could do being renamed, as it's used (in the
1761							                ; same way) by *UNPLUG and *INSERT.
1762							StarROMSWorkspace: .struct
1763	>0000						insertedFlagMask: .fill 1
1764							                .endstruct

1766							TerminalHELPWorkspace: .struct
1767	>0000						tablePtr: .fill 2
1768							                .endstruct

1770							                ; TODO - tediously verbose names. Acronyms work well
1771							                ; enough for the VDU variables. Do the same thing
1772							                ; here.
1773							                .virtual $b0
1774							                .union
1775	.00b0						starKEYWorkspace: .dstruct StarKEYWorkspace
1742	>00b0						newStringLength: .fill 1
1743	>00b1						destPtr: .fill 2
1744	>00b3						srcPtr: .fill 2
1745	>00b5						counter: .fill 2
1746							                .endstruct
1776	.00b0						osgbpbWorkspace: .dstruct OSGBPBWorkspace
1749	>00b0						ptr: .fill 2
1750							                .endstruct
1777	.00b0						parseFileNameFSWorkspace: .dstruct ParseFileNameFSWorkspace
1753	>00b0						fsInfoOffset: .fill 1
1754							                .endstruct
1778	.00b0						oscliWorkspace: .dstruct OSCLIWorkspace
1757	>00b0						tablePtr: .fill 2
1758							                .endstruct
1779	.00b0						starROMSWorkspace: .dstruct StarROMSWorkspace
1763	>00b0						insertedFlagMask: .fill 1
1764							                .endstruct
1780	.00b0						terminalHELPWorkspace: .dstruct TerminalHELPWorkspace
1767	>00b0						tablePtr: .fill 2
1768							                .endstruct
1781							                .endunion
1782							                .endvirtual

1784							;-------------------------------------------------------------------------

1786							; ROM number containing Terminal
1787	=15						terminalROM=15

1789							; ROM number containing the extXXXX entry points
1798	=9						extROM=9

1803							; Base page for VDU routines
1804	=$c0						vduRoutinesPage=$c0

1807	=14						cmosBytesOffset=RTC.ram

1812							; The CMOSBytes struct covers all versions, to ensure that the offsets
1813							; are consistent. This means there are gaps and useless entries in
1814							; some cases!
1815							;
1816							; The 30 bytes reserved for the OS aren't currently in danger of
1817							; running out.
1818							;
1819							; Some of the labels are removed based on configuration. The offsets
1820							; and bits are still reserved.
1821							;
1822							; For allocations, see: https://beebwiki.mdfs.net/CMOS_configuration_RAM_allocation
1823							CMOSBytes: .struct
1824	>0000						econetStationNumber: .fill 1
1825	>0001						fileServerStationNumber: .fill 1
1826	>0002						fileServerNetworkNumber: .fill 1
1827	>0003						printerServerStationNumber: .fill 1
1828	>0004						printerServerNetworkNumber: .fill 1
1829	.0005						defaultROMs: .block
1830	>0005						                .fill 1
1831	=0						fsShift=0
1832	=4						languageShift=4
1833							                .endblock

1835	>0006						insertedROMs: .fill 2

1837	>0008						editROMByte: .fill 1
1838	>0009						telecommsByte: .fill 1

1840	.000a						defaults0: .block
1841	>000a						                .fill 1
1842	=0						modeShift=0
1843	=7						modeMask=7
1844	=8						shadowMask=8
1845	=16						interlaceMask=16
1846	=7						tvMask=7
1847	=5						tvShift=5
1848							                .endblock

1850	.000b						defaults1: .block
1851	>000b						                .fill 1
1852	=0						fdriveShift=0
1853	=7						fdriveMask=7
1854	=8						shiftLockMask=8
1855	=16						noLockMask=16
1856	=32						capsLockMask=32
1857	=64						adfsLoadDirMask=64
1858	=128						floppyDrive=128
1859							                .endblock

1861	>000c						keyboardAutoRepeatDelay: .fill 1
1862	>000d						keyboardAutoRepeatRate: .fill 1
1863	>000e						printerIgnoreChar: .fill 1

1865	.000f						defaults2: .block
1866	>000f						                .fill 1
1868	=1						tubeOnMask=1
1870	=2						usePrinterIgnoreCharMask=2
1871	=7						serialBaudRateIndexMask=7
1872	=2						serialBaudRateIndexShift=2
1873	=7						fx5SettingMask=7
1874	=5						fx5SettingShift=5
1875							                .endblock

1877	.0010						defaults3: .block
1878	>0010						                .fill 1
1879							; bit 0 is for Master Emulation ROM's *CONFIGURE SHADOW
1880	=2						loudMask=2
1882	=4						extTubeMask=4
1884	=8						protectedScrollingMask=8
1885	=16						autoBootMask=16
1886	=7						serialDataFormatMask=7
1887	=5						serialDataFormatShift=5
1888							                .endblock

1894	>0011						                .fill 1

1902	>0012						                .fill 1

1911	>0013						                .fill 1

1921	>0014						                .fill 1

1931	>0015						                .fill 1

1934							                .endstruct

1938							                .elif version==320||version==350||version==400
1939	=17						cmosBytesSize=CMOSBytes.defaults3+1

1946	=$ef						originalA=$ef
1947	=$f0						originalX=$f0
1948	=$f1						originalY=$f1
1949	=$fc						TEMPA=$fc
1950	=$fd						errPtr=$fd                      ;REPTR in OS 1.20
1951	=$ff						escapeFlag=$ff

1953	=$8c0						envelope1Data=$8c0

1955	=$8000						sidewaysROMLanguageEntry=$8000
1956	=$8003						sidewaysROMServiceEntry=$8003
1957							                .virtual $8006
1958	.8006						sidewaysROMType: .block
1959	=32						hasRelocationAddress=32
1960	=64						hasLanguageEntry=64
1961	=128						hasServiceEntry=128
1962							                .endblock
1963							                .endvirtual
1964	=$8007						sidewaysROMCopyrightOffset=$8007
1965	=$8008						sidewaysROMVersion=$8008
1966	=$8009						sidewaysROMName=$8009

1968							;-------------------------------------------------------------------------

1970							                ; [MasRef D.3-22]
1971							ClockStringFormat: .struct
1972	.0000						ddd:
1973	>0000						                .fill 3
1974	>0003						                .fill 1                      ;','
1975	.0004						nn:
1976	>0004						                .fill 2
1977	>0006						                .fill 1                      ;' '
1978	.0007						mmm:
1979	>0007						                .fill 3
1980	>000a						                .fill 1                      ;' '
1981	.000b						yyyy:
1982	>000b						                .fill 4
1983	>000f						                .fill 1                      ;'.'
1984	.0010						hh:
1985	>0010						                .fill 2
1986	>0012						                .fill 1                      ;':'
1987	.0013						mm:
1988	>0013						                .fill 2
1989	>0015						                .fill 1                      ;':'
1990	.0016						ss:
1991	>0016						                .fill 2
1992	.0018						cr:
1993	>0018						                .fill 1                      ;'\n'
1994							                .endstruct

1996							;-------------------------------------------------------------------------

:1	;******  Return to file: mos329.s65

3							                .include "src/terminal_workspace.s65"

:4	;******  Processing file: src/terminal_workspace.s65

1							;-------------------------------------------------------------------------

3							; Not really MOS stuff. This is the Terminal ROM zero page workspace.

5	=$70						oldINSV=$70
6	=$72						oldREMV=$72

9							;-------------------------------------------------------------------------

11							zterm: .struct
12	=$39						numRowsMinusOne=$39
13	=$38						numColumns=$38
14	=$37						numColumnsMinusOne=$37
15							; TODO old INSV and oldREMV should probably go in here too!
16							                .endstruct

:1	;******  Return to file: mos329.s65

5							; Maybe this should have its own version number? But I put "350" in
6							; the code so many times that it'd be a pain to sort it out.
7	=350						version=350
8	=true						finmos329=true
9	="MOS 3.29"					versionString="MOS 3.29"

11							*=$af00
12							                .dsection ext
13							                .cwarn *>$b800,'Ext ROM is too large'

15							*=$8000
16							                .dsection utils
17							                .cwarn *>$c000,'Terminal ROM is too large'

19							*=$c000
20							                .dsection mos
21							                ; there's no need for a size check here - 64tass gives
22							                ; you an error if the code would go past the 64 K
23							                ; barrier.

25							;-------------------------------------------------------------------------

27							                .section ext
28							                .include "src/sound_stuff.s65"

:5	;******  Processing file: src/sound_stuff.s65

1							; Table to convert channel number to the bits required by the chip
2	.af00						soundParameterTable:
3	>af00		e0 c0 a0 80			                .byte $e0,$c0,$a0,$80

5							;-------------------------------------------------------------------------

7	.af04						LF413:
8	.af04		4c 11 b0	jmp $b011	                jmp LF520

10							;-------------------------------------------------------------------------

15	.af07						LF416:
17	.af07		a2 00		ldx #$00	                ldx #$00
18	.af09		ad 38 08	lda $0838	                lda $0838
19	.af0c		d0 04		bne $af12	                bne LF421
20	.af0e		e8		inx		                inx
21	.af0f		ce 38 08	dec $0838	                dec $0838
22	.af12						LF421:
23	.af12		8e 3b 08	stx $083b	                stx $083B
24	.af15		a2 08		ldx #$08	                ldx #$08
25	.af17						LF426:
26	.af17		ca		dex		                dex
27	.af18		bd 00 08	lda $0800,x	                lda $0800,x
28	.af1b		f0 e7		beq $af04	                beq LF413
29	.af1d		bd ce 02	lda $02ce,x	                lda bufferEmptyFlags,x
30	.af20		30 05		bmi $af27	                bmi LF436
31	.af22		bd 18 08	lda $0818,x	                lda $0818,x
32	.af25		d0 08		bne $af2f	                bne LF43E
33	.af27						LF436:
34	.af27		20 19 b0	jsr $b019	                jsr LF528
35	.af2a		bd 18 08	lda $0818,x	                lda $0818,x
36	.af2d		f0 12		beq $af41	                beq LF450
37	.af2f						LF43E:
38	.af2f		1a		inc a		                inc a
39	.af30		f0 12		beq $af44	                beq LF453
40	.af32		de 1c 08	dec $081c,x	                dec $081C,x
41	.af35		d0 0d		bne $af44	                bne LF453
42	.af37		a9 05		lda #$05	                lda #$05
43	.af39		9d 1c 08	sta $081c,x	                sta $081C,x
44	.af3c		de 18 08	dec $0818,x	                dec $0818,x
45	.af3f		d0 03		bne $af44	                bne LF453
46	.af41						LF450:
47	.af41		20 19 b0	jsr $b019	                jsr LF528
48	.af44						LF453:
49	.af44		bd 24 08	lda $0824,x	                lda $0824,x
50	.af47		f0 05		beq $af4e	                beq LF45D
51	.af49		de 24 08	dec $0824,x	                dec $0824,x
52	.af4c		d0 b6		bne $af04	                bne LF413
53	.af4e						LF45D:
54	.af4e		bc 20 08	ldy $0820,x	                ldy $0820,x
55	.af51		c0 ff		cpy #$ff	                cpy #$FF
56	.af53		f0 af		beq $af04	                beq LF413
57	.af55		b9 c0 08	lda $08c0,y	                lda $08C0,y
58	.af58		29 7f		and #$7f	                and #$7F
59	.af5a		9d 24 08	sta $0824,x	                sta $0824,x
60	.af5d		bd 08 08	lda $0808,x	                lda $0808,x
61	.af60		c9 04		cmp #$04	                cmp #$04
62	.af62		f0 5d		beq $afc1	                beq LF4D0
63	.af64		18		clc		                clc
64	.af65		7d 20 08	adc $0820,x	                adc $0820,x
65	.af68		a8		tay		                tay
66	.af69		b9 cb 08	lda $08cb,y	                lda $08CB,y
67	.af6c		38		sec		                sec
68	.af6d		e9 3f		sbc #$3f	                sbc #$3F
69	.af6f		8d 3a 08	sta $083a	                sta $083A
70	.af72		b9 c7 08	lda $08c7,y	                lda $08C7,y
71	.af75		8d 39 08	sta $0839	                sta $0839
72	.af78		bd 04 08	lda $0804,x	                lda $0804,x
73	.af7b						LF48A:
74	.af7b		48		pha		                pha
75	.af7c		18		clc		                clc
76	.af7d		6d 39 08	adc $0839	                adc $0839
77	.af80		50 07		bvc $af89	                bvc LF498
78	.af82		2a		rol a		                rol a
79	.af83		a9 3f		lda #$3f	                lda #$3F
80	.af85		b0 02		bcs $af89	                bcs LF498
81	.af87		49 ff		eor #$ff	                eor #$FF
82	.af89						LF498:
83	.af89		9d 04 08	sta $0804,x	                sta $0804,x
84	.af8c		2a		rol a		                rol a
85	.af8d		5d 04 08	eor $0804,x	                eor $0804,x
86	.af90		10 09		bpl $af9b	                bpl LF4AA
87	.af92		a9 3f		lda #$3f	                lda #$3F
88	.af94		90 02		bcc $af98	                bcc LF4A7
89	.af96		49 ff		eor #$ff	                eor #$FF
90	.af98						LF4A7:
91	.af98		9d 04 08	sta $0804,x	                sta $0804,x
92	.af9b						LF4AA:
93	.af9b		ce 39 08	dec $0839	                dec $0839
94	.af9e		bd 04 08	lda $0804,x	                lda $0804,x
95	.afa1		38		sec		                sec
96	.afa2		ed 3a 08	sbc $083a	                sbc $083A
97	.afa5		4d 39 08	eor $0839	                eor $0839
98	.afa8		30 09		bmi $afb3	                bmi LF4C2
99	.afaa		ad 3a 08	lda $083a	                lda $083A
100	.afad		9d 04 08	sta $0804,x	                sta $0804,x
101	.afb0		fe 08 08	inc $0808,x	                inc $0808,x
102	.afb3						LF4C2:
103	.afb3		68		pla		                pla
104	.afb4		5d 04 08	eor $0804,x	                eor $0804,x
105	.afb7		29 f8		and #$f8	                and #$F8
106	.afb9		f0 06		beq $afc1	                beq LF4D0
107	.afbb		bd 04 08	lda $0804,x	                lda $0804,x
108	.afbe		20 8a b0	jsr $b08a	                jsr LF599
109	.afc1						LF4D0:
110	.afc1		bd 10 08	lda $0810,x	                lda $0810,x
111	.afc4		c9 03		cmp #$03	                cmp #$03
112	.afc6		f0 49		beq $b011	                beq LF520
113	.afc8		bd 14 08	lda $0814,x	                lda $0814,x
114	.afcb		d0 28		bne $aff5	                bne LF504
115	.afcd		fe 10 08	inc $0810,x	                inc $0810,x
116	.afd0		bd 10 08	lda $0810,x	                lda $0810,x
117	.afd3		c9 03		cmp #$03	                cmp #$03
118	.afd5		d0 0e		bne $afe5	                bne LF4F4
119	.afd7		bc 20 08	ldy $0820,x	                ldy $0820,x
120	.afda		b9 c0 08	lda $08c0,y	                lda $08C0,y
121	.afdd		30 32		bmi $b011	                bmi LF520
122	.afdf		9e 30 08	stz $0830,x	                stz $0830,x
123	.afe2		9e 10 08	stz $0810,x	                stz $0810,x
124	.afe5						LF4F4:
125	.afe5		bd 10 08	lda $0810,x	                lda $0810,x
126	.afe8		18		clc		                clc
127	.afe9		7d 20 08	adc $0820,x	                adc $0820,x
128	.afec		a8		tay		                tay
129	.afed		b9 c4 08	lda $08c4,y	                lda $08C4,y
130	.aff0		9d 14 08	sta $0814,x	                sta $0814,x
131	.aff3		f0 1c		beq $b011	                beq LF520
132	.aff5						LF504:
133	.aff5		de 14 08	dec $0814,x	                dec $0814,x
134	.aff8		bd 20 08	lda $0820,x	                lda $0820,x
135	.affb		18		clc		                clc
136	.affc		7d 10 08	adc $0810,x	                adc $0810,x
137	.afff		a8		tay		                tay
138	.b000		b9 c1 08	lda $08c1,y	                lda $08C1,y
139	.b003		18		clc		                clc
140	.b004		7d 30 08	adc $0830,x	                adc $0830,x
141	.b007		9d 30 08	sta $0830,x	                sta $0830,x
142	.b00a		18		clc		                clc
143	.b00b		7d 0c 08	adc $080c,x	                adc $080C,x
144	.b00e		20 c6 b0	jsr $b0c6	                jsr LF5D5
145	.b011						LF520:
146	.b011		e0 04		cpx #$04	                cpx #$04
147	.b013		f0 03		beq $b018	                beq LF527
148	.b015		4c 17 af	jmp $af17	                jmp LF426

150	.b018						LF527:
151	.b018		60		rts		                rts

153	.b019						LF528:
154	.b019		bd 08 08	lda $0808,x	                lda $0808,x
155	.b01c		c9 04		cmp #$04	                cmp #$04
156	.b01e		f0 05		beq $b025	                beq LF534
157	.b020		a9 03		lda #$03	                lda #$03
158	.b022		9d 08 08	sta $0808,x	                sta $0808,x
159	.b025						LF534:
160	.b025		bd ce 02	lda $02ce,x	                lda bufferEmptyFlags,x
161	.b028		f0 14		beq $b03e	                beq LF54D
162	.b02a		a9 00		lda #$00	                lda #$00
163	.b02c		9e ce 02	stz $02ce,x	                stz bufferEmptyFlags,x
164	.b02f		a0 04		ldy #$04	                ldy #$04
165	.b031						LF540:
166	.b031		99 2b 08	sta $082b,y	                sta $082B,y
167	.b034		88		dey		                dey
168	.b035		d0 fa		bne $b031	                bne LF540
169	.b037		9e 18 08	stz $0818,x	                stz $0818,x
170	.b03a		88		dey		                dey
171	.b03b		8c 38 08	sty $0838	                sty $0838
172	.b03e						LF54D:
173	.b03e		bd 28 08	lda $0828,x	                lda $0828,x
174	.b041		f0 60		beq $b0a3	                beq LF5B2
175	.b043		ad 3b 08	lda $083b	                lda $083B
176	.b046		f0 34		beq $b07c	                beq LF58B
177	.b048		9e 28 08	stz $0828,x	                stz $0828,x
178	.b04b						LF55A:
179	.b04b		4c 75 b1	jmp $b175	                jmp LF685

181							;-------------------------------------------------------------------------
182							;
183							; Clear a buffer that's a sound channel.
184							;
185							; https://tobylobster.github.io/mos/mos/S-s16.html#SP7
186							;
187							; Entry:
188							;
189							; X = buffer number (must be a sound channel buffer)
190							;
192							                ; All this stuff is in the top-level namespace in
193							                ; 3.50. Needs a rethink!
194	.b04e						clearSoundChannelBufferInternal:
198							                .block
199	.b04e		20 83 b0	jsr $b083	                jsr LF592
200	.b051		98		tya		                tya
201	.b052		9e 18 08	stz $0818,x	                stz $0818,x
202	.b055		9e ce 02	stz $02ce,x	                stz bufferEmptyFlags,x
203	.b058		9e 00 08	stz $0800,x	                stz $0800,x
204	.b05b		a0 03		ldy #$03	                ldy #$03
205	.b05d						loop:
206	.b05d		99 2c 08	sta $082c,y	                sta $082C,y
207	.b060		88		dey		                dey
208	.b061		10 fa		bpl $b05d	                bpl loop
209	.b063		8c 38 08	sty $0838	                sty $0838
210	.b066		80 63		bra $b0cb	                bra LF5DA
211							                .endblock

213							;-------------------------------------------------------------------------

215	.b068						LF577:
216	.b068		08		php		                php
217	.b069		78		sei		                sei
218	.b06a		bd 08 08	lda $0808,x	                lda $0808,x
219	.b06d		c9 04		cmp #$04	                cmp #$04
220	.b06f		d0 0a		bne $b07b	                bne LF58A
221	.b071		20 b4 e9	jsr $e9b4	                jsr osbyte98
222	.b074		90 05		bcc $b07b	                bcc LF58A
223	.b076		a9 00		lda #$00	                lda #$00
224	.b078		9e 00 08	stz $0800,x	                stz $0800,x
225	.b07b						LF58A:
226	.b07b		28		plp		                plp
227	.b07c						LF58B:
228	.b07c		bc 20 08	ldy $0820,x	                ldy $0820,x
229	.b07f		c0 ff		cpy #$ff	                cpy #$FF
230	.b081		d0 72		bne $b0f5	                bne LF604

232							                ; https://tobylobster.github.io/mos/mos/S-s16.html#SP2
233	.b083						LF592:
234	.b083		a9 04		lda #$04	                lda #$04
235	.b085		9d 08 08	sta $0808,x	                sta $0808,x
236	.b088		a9 c0		lda #$c0	                lda #$C0
237	.b08a						LF599:
238	.b08a		9d 04 08	sta $0804,x	                sta $0804,x
239	.b08d		ac 62 02	ldy $0262	                ldy soundSuppressionStatus
240	.b090		f0 02		beq $b094	                beq LF5A3
241	.b092		a9 c0		lda #$c0	                lda #$C0
242	.b094						LF5A3:
243	.b094		38		sec		                sec
244	.b095		e9 40		sbc #$40	                sbc #$40
245	.b097		4a		lsr a		                lsr a
246	.b098		4a		lsr a		                lsr a
247	.b099		4a		lsr a		                lsr a
248	.b09a		49 0f		eor #$0f	                eor #$0F
249	.b09c		1d fc ae	ora $aefc,x	                ora soundParameterTable-bufferNumberSound0,x
250	.b09f		09 10		ora #$10	                ora #$10
251	.b0a1		80 34		bra $b0d7	                bra LF5E6

253	.b0a3						LF5B2:
254	.b0a3		20 b4 e9	jsr $e9b4	                jsr osbyte98
255	.b0a6		b0 c0		bcs $b068	                bcs LF577
256	.b0a8		29 03		and #$03	                and #$03
257	.b0aa		f0 9f		beq $b04b	                beq LF55A
258	.b0ac		ad 38 08	lda $0838	                lda $0838
259	.b0af		f0 cb		beq $b07c	                beq LF58B
260	.b0b1		fe 28 08	inc $0828,x	                inc $0828,x
261	.b0b4		a8		tay		                tay
262	.b0b5		10 0a		bpl $b0c1	                bpl LF5D0
263	.b0b7		20 b4 e9	jsr $e9b4	                jsr osbyte98
264	.b0ba		29 03		and #$03	                and #$03
265	.b0bc		8d 38 08	sta $0838	                sta $0838
266	.b0bf		80 bb		bra $b07c	                bra LF58B

268	.b0c1						LF5D0:
269	.b0c1		ce 38 08	dec $0838	                dec $0838
270	.b0c4		80 b6		bra $b07c	                bra LF58B

272	.b0c6						LF5D5:
273	.b0c6		dd 2c 08	cmp $082c,x	                cmp $082C,x
274	.b0c9		f0 2a		beq $b0f5	                beq LF604
275	.b0cb						LF5DA:
276	.b0cb		9d 2c 08	sta $082c,x	                sta $082C,x
277	.b0ce		e0 04		cpx #$04	                cpx #$04
278	.b0d0		d0 24		bne $b0f6	                bne LF605
279	.b0d2		29 0f		and #$0f	                and #$0F
280	.b0d4		1d fc ae	ora $aefc,x	                ora soundParameterTable-bufferNumberSound0,x
281	.b0d7						LF5E6:
282	.b0d7		08		php		                php
283	.b0d8						LF5E7:
284	.b0d8		78		sei		                sei
285	.b0d9		a0 ff		ldy #$ff	                ldy #$FF
286	.b0db		8c 43 fe	sty $fe43	                sty systemVIA.ddra
287	.b0de		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake
288	.b0e1		c8		iny		                iny
289	.b0e2		8c 40 fe	sty $fe40	                sty systemVIA.orb
290	.b0e5		a0 02		ldy #$02	                ldy #$02
291	.b0e7						LF5F6:
292	.b0e7		88		dey		                dey
293	.b0e8		d0 fd		bne $b0e7	                bne LF5F6
294	.b0ea		a0 08		ldy #$08	                ldy #$08
295	.b0ec		8c 40 fe	sty $fe40	                sty systemVIA.orb
296	.b0ef		a0 04		ldy #$04	                ldy #$04
297	.b0f1						LF600:
298	.b0f1		88		dey		                dey
299	.b0f2		d0 fd		bne $b0f1	                bne LF600
300	.b0f4		28		plp		                plp
301	.b0f5						LF604:
302	.b0f5		60		rts		                rts

304	.b0f6						LF605:
305	.b0f6		48		pha		                pha
306	.b0f7		29 03		and #$03	                and #$03
307	.b0f9		8d 3c 08	sta $083c	                sta $083C
308	.b0fc		9c 3d 08	stz $083d	                stz $083D
309	.b0ff		68		pla		                pla
310	.b100		4a		lsr a		                lsr a
311	.b101		4a		lsr a		                lsr a
312	.b102						LF611:
313	.b102		c9 0c		cmp #$0c	                cmp #$0C
314	.b104		90 07		bcc $b10d	                bcc LF61C
315	.b106		ee 3d 08	inc $083d	                inc $083D
316	.b109		e9 0c		sbc #$0c	                sbc #$0C
317	.b10b		d0 f5		bne $b102	                bne LF611
318	.b10d						LF61C:
319	.b10d		a8		tay		                tay
320	.b10e		ad 3d 08	lda $083d	                lda $083D
321	.b111		48		pha		                pha
322	.b112		b9 d4 b1	lda $b1d4,y	                lda LF6E4,y
323	.b115		8d 3d 08	sta $083d	                sta $083D
324	.b118		b9 e0 b1	lda $b1e0,y	                lda LF6F0,y
325	.b11b		48		pha		                pha
326	.b11c		29 03		and #$03	                and #$03
327	.b11e		8d 3e 08	sta $083e	                sta $083E
328	.b121		68		pla		                pla
330	.b122		20 21 e5	jsr $e521	                jsr lsr4
337	.b125		8d 3f 08	sta $083f	                sta $083F
338	.b128		ad 3d 08	lda $083d	                lda $083D
339	.b12b		ac 3c 08	ldy $083c	                ldy $083C
340	.b12e		f0 0c		beq $b13c	                beq LF64C
341	.b130						LF640:
342	.b130		38		sec		                sec
343	.b131		ed 3f 08	sbc $083f	                sbc $083F
344	.b134		b0 03		bcs $b139	                bcs LF649
345	.b136		ce 3e 08	dec $083e	                dec $083E
346	.b139						LF649:
347	.b139		88		dey		                dey
348	.b13a		d0 f4		bne $b130	                bne LF640
349	.b13c						LF64C:
350	.b13c		8d 3d 08	sta $083d	                sta $083D
351	.b13f		68		pla		                pla
352	.b140		a8		tay		                tay
353	.b141		f0 09		beq $b14c	                beq LF65C
354	.b143						LF653:
355	.b143		4e 3e 08	lsr $083e	                lsr $083E
356	.b146		6e 3d 08	ror $083d	                ror $083D
357	.b149		88		dey		                dey
358	.b14a		d0 f7		bne $b143	                bne LF653
359	.b14c						LF65C:
360	.b14c		ad 3d 08	lda $083d	                lda $083D
361	.b14f		18		clc		                clc
362	.b150		7d 67 e1	adc $e167,x	                adc LE165,x
363	.b153		8d 3d 08	sta $083d	                sta $083D
364	.b156		90 03		bcc $b15b	                bcc LF66B
365	.b158		ee 3e 08	inc $083e	                inc $083E
366	.b15b						LF66B:
367	.b15b		29 0f		and #$0f	                and #$0F
368	.b15d		1d fc ae	ora $aefc,x	                ora soundParameterTable-bufferNumberSound0,x
369	.b160		08		php		                php
370	.b161		78		sei		                sei
371	.b162		20 d7 b0	jsr $b0d7	                jsr LF5E6
372	.b165		ad 3d 08	lda $083d	                lda $083D
373	.b168		4e 3e 08	lsr $083e	                lsr $083E
374	.b16b		6a		ror a		                ror a
375	.b16c		4e 3e 08	lsr $083e	                lsr $083E
376	.b16f		6a		ror a		                ror a
377	.b170		4a		lsr a		                lsr a
378	.b171		4a		lsr a		                lsr a
379	.b172		4c d8 b0	jmp $b0d8	                jmp LF5E7

381	.b175						LF685:
382	.b175		08		php		                php
383	.b176		78		sei		                sei
384	.b177		20 b9 e9	jsr $e9b9	                jsr osbyte91
385	.b17a		48		pha		                pha
386	.b17b		29 04		and #$04	                and #$04
387	.b17d		f0 13		beq $b192	                beq LF6A2
388	.b17f		68		pla		                pla
389	.b180		bc 20 08	ldy $0820,x	                ldy $0820,x
390	.b183		c8		iny		                iny
391	.b184		d0 03		bne $b189	                bne LF699Sound
392	.b186		20 83 b0	jsr $b083	                jsr LF592
393	.b189						LF699Sound:
394	.b189		20 b9 e9	jsr $e9b9	                jsr osbyte91
395	.b18c		20 b9 e9	jsr $e9b9	                jsr osbyte91
396	.b18f		28		plp		                plp
397	.b190		80 3e		bra $b1d0	                bra LF6E0

399	.b192						LF6A2:
400	.b192		68		pla		                pla
401	.b193		29 f8		and #$f8	                and #$F8
402	.b195		0a		asl a		                asl a
403	.b196		90 0b		bcc $b1a3	                bcc LF6B3Sound
404	.b198		49 ff		eor #$ff	                eor #$FF
405	.b19a		4a		lsr a		                lsr a
406	.b19b		38		sec		                sec
407	.b19c		e9 40		sbc #$40	                sbc #$40
408	.b19e		20 8a b0	jsr $b08a	                jsr LF599
409	.b1a1		a9 ff		lda #$ff	                lda #$FF
410	.b1a3						LF6B3Sound:
411	.b1a3		9d 20 08	sta $0820,x	                sta $0820,x
412	.b1a6		a9 05		lda #$05	                lda #$05
413	.b1a8		9d 1c 08	sta $081c,x	                sta $081C,x
414	.b1ab		a9 01		lda #$01	                lda #$01
415	.b1ad		9d 24 08	sta $0824,x	                sta $0824,x
416	.b1b0		9e 14 08	stz $0814,x	                stz $0814,x
417	.b1b3		9e 08 08	stz $0808,x	                stz $0808,x
418	.b1b6		9e 30 08	stz $0830,x	                stz $0830,x
419	.b1b9		a9 ff		lda #$ff	                lda #$FF
420	.b1bb		9d 10 08	sta $0810,x	                sta $0810,x
421	.b1be		20 b9 e9	jsr $e9b9	                jsr osbyte91
422	.b1c1		9d 0c 08	sta $080c,x	                sta $080C,x
423	.b1c4		20 b9 e9	jsr $e9b9	                jsr osbyte91
424	.b1c7		28		plp		                plp
425	.b1c8		48		pha		                pha
426	.b1c9		bd 0c 08	lda $080c,x	                lda $080C,x
427	.b1cc		20 c6 b0	jsr $b0c6	                jsr LF5D5
428	.b1cf		68		pla		                pla
429	.b1d0						LF6E0:
430	.b1d0		9d 18 08	sta $0818,x	                sta $0818,x
431	.b1d3		60		rts		                rts

433	.b1d4						LF6E4:
434	>b1d4		f0				                .byte $F0
435	>b1d5		b7				                .byte $B7
436	>b1d6		82				                .byte $82
437	>b1d7		4f				                .byte $4F
438	>b1d8		20				                .byte $20
439	>b1d9		f3				                .byte $F3
440	>b1da		c8				                .byte $C8
441	>b1db		a0				                .byte $A0
442	>b1dc		7b				                .byte $7B
443	>b1dd		57				                .byte $57
444	>b1de		35				                .byte $35
445	>b1df		16				                .byte $16
446	.b1e0						LF6F0:
447	>b1e0		e7				                .byte $E7
448	>b1e1		d7				                .byte $D7
449	>b1e2		cb				                .byte $CB
450	>b1e3		c3				                .byte $C3
451	>b1e4		b7				                .byte $B7
452	>b1e5		aa				                .byte $AA
453	>b1e6		a2				                .byte $A2
454	>b1e7		9a				                .byte $9a
455	>b1e8		92				                .byte $92
456	>b1e9		8a				                .byte $8a
457	>b1ea		82				                .byte $82
458	>b1eb		7a				                .byte $7a

:1	;******  Return to file: mos329.s65

29	>b1ec		ff ff ff ff ff ff ff		                .fill 7,255
30							                .include "src/ext.s65"

:6	;******  Processing file: src/ext.s65

1							; -*- comment-column:45; -*-

3	.b1f3						plotEllipseOutline:
4							                ; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP1
5	.b1f3		20 3a b3	jsr $b33a	                jsr     ellipseInitialisation
7	.b1f6		80 03		bra $b1fb	                bra     startEllipseOutline

12	.b1f8						ellipseOutlineLoop:
13	.b1f8		20 f4 b3	jsr $b3f4	                jsr     updateEllipseIncrementally

15	.b1fb						startEllipseOutline:
16	.b1fb		a2 34		ldx #$34	                ldx     #VDUVariables.ew.pointC
17	.b1fd		a0 3c		ldy #$3c	                ldy     #VDUVariables.ew.pointA
18	.b1ff		20 cb d5	jsr $d5cb	                jsr     sortVDUVariableWords
25	.b202		ad 39 03	lda $0339	                lda vduv.ew.leftPoint+1
27	.b205		8d 43 03	sta $0343	                sta     vduv.ew.currentOffsetX+1
32	.b208		ae 38 03	ldx $0338	                ldx vduv.ew.leftPoint+0

35	.b20b						ellipseOutlineContinueRowLoop:
36	.b20b		8e 42 03	stx $0342	                stx     vduv.ew.currentOffsetX+0
37	.b20e		20 2b b5	jsr $b52b	                jsr     outlineEllipsePlotOnePointAndReflection
38	.b211		e8		inx		                inx
39	.b212		d0 03		bne $b217	                bne     +
40	.b214		ee 43 03	inc $0343	                inc     vduv.ew.currentOffsetX+1
41	.b217						+
42	.b217		8a		txa		                txa
43	.b218		d9 00 03	cmp $0300,y	                cmp     vduv+0,y
44	.b21b		ad 43 03	lda $0343	                lda     vduv.ew.currentOffsetX+1
45	.b21e		f9 01 03	sbc $0301,y	                sbc     vduv+1,y
46	.b221		30 e8		bmi $b20b	                bmi     ellipseOutlineContinueRowLoop

78	.b223		ac 43 03	ldy $0343	                ldy vduv.ew.currentOffsetX+1
79	.b226		8a		txa		                txa
80	.b227		d0 01		bne $b22a	                bne +
81	.b229		88		dey		                dey
82	.b22a						+
83	.b22a		ca		dex		                dex
84	.b22b		8e 34 03	stx $0334	                stx vduv.ew.pointC+0
85	.b22e		8c 35 03	sty $0335	                sty vduv.ew.pointC+1
86	.b231		8a		txa		                txa
87	.b232		cd 3a 03	cmp $033a	                cmp vduv.ew.rightPoint+0
88	.b235		98		tya		                tya
89	.b236		ed 3b 03	sbc $033b	                sbc vduv.ew.rightPoint+1
90	.b239		10 30		bpl $b26b	                bpl LAF47
91	.b23b		a2 36		ldx #$36	                ldx #VDUVariables.ew.pointD
92	.b23d		a0 3e		ldy #$3e	                ldy #VDUVariables.ew.pointB
93	.b23f		20 cb d5	jsr $d5cb	                jsr sortVDUVariableWords
94	.b242		a0 34		ldy #$34	                ldy #VDUVariables.ew.pointC
95	.b244		20 cb d5	jsr $d5cb	                jsr sortVDUVariableWords
96	.b247		ad 3b 03	lda $033b	                lda vduv.ew.rightPoint+1
97	.b24a		8d 43 03	sta $0343	                sta vduv.ew.currentOffsetX+1
98	.b24d		ad 3a 03	lda $033a	                lda vduv.ew.rightPoint+0
99	.b250		aa		tax		                tax
100	.b251						LAF2D:
101	.b251		8e 42 03	stx $0342	                stx vduv.ew.currentOffsetX+0
102	.b254						LAF30:
103	.b254		20 2b b5	jsr $b52b	                jsr outlineEllipsePlotOnePointAndReflection
104	.b257		8a		txa		                txa
105	.b258		d0 03		bne $b25d	                bne +
106	.b25a		ce 43 03	dec $0343	                dec vduv.ew.currentOffsetX+1
107	.b25d						+
108	.b25d		ca		dex		                dex
109	.b25e		18		clc		                clc
110	.b25f		8a		txa		                txa
111	.b260		f9 00 03	sbc $0300,y	                sbc vduv+0,y
112	.b263		ad 43 03	lda $0343	                lda vduv.ew.currentOffsetX+1
113	.b266		f9 01 03	sbc $0301,y	                sbc vduv+1,y
114	.b269		10 e6		bpl $b251	                bpl LAF2D

116	.b26b						LAF47:
117	.b26b		ad 2f 03	lda $032f	                lda vduv.ew.halfHeightCounter+1 ; TODO can merge with
118							                                                ; code above...
119							                                                ; probably?
120	.b26e		10 88		bpl $b1f8	                bpl ellipseOutlineLoop
122	.b270		80 14		bra $b286	                bra LBA7B

129							;-------------------------------------------------------------------------

131	.b272						plotEllipseFilled:
132	.b272		20 3a b3	jsr $b33a	                jsr     ellipseInitialisation
133	.b275		80 03		bra $b27a	                bra     startFilledEllipse

136	.b277						filledEllipseLoop:
137	.b277		20 f4 b3	jsr $b3f4	                jsr     updateEllipseIncrementally

139	.b27a						startFilledEllipse:
140	.b27a		a2 3a		ldx #$3a	                ldx     #VDUVariables.ew.rightPoint
141	.b27c		a0 38		ldy #$38	                ldy     #VDUVariables.ew.leftPoint
142	.b27e		20 92 b2	jsr $b292	                jsr     fillEllipseOneRowAndReflection
143	.b281		ad 2f 03	lda $032f	                lda     vduv.ew.halfHeightCounter+1
144	.b284		10 f1		bpl $b277	                bpl     filledEllipseLoop

146	.b286						LBA7B:
147	.b286		ee 4d 88	inc $884d	                inc     ellipseCountHeight+0
148	.b289		d0 03		bne $b28e	                bne     LBA83
149	.b28b		ee 4e 88	inc $884e	                inc     ellipseCountHeight+1

151	.b28e						LBA83:
152	.b28e		a2 3e		ldx #$3e	                ldx     #VDUVariables.ew.pointB
153	.b290		a0 3c		ldy #$3c	                ldy     #VDUVariables.ew.pointA

155							; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP9
156	.b292						fillEllipseOneRowAndReflection:
157	.b292		da		phx		                phx
158	.b293		5a		phy		                phy
159	.b294		18		clc		                clc
160	.b295		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
161	.b298		79 00 03	adc $0300,y	                adc     vduv+0,y
162	.b29b		8d 40 03	sta $0340	                sta     vduv.ew.pointE+0
163	.b29e		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
164	.b2a1		79 01 03	adc $0301,y	                adc     vduv+1,y
165	.b2a4		8d 41 03	sta $0341	                sta     vduv.ew.pointE+1
166	.b2a7		18		clc		                clc
167	.b2a8		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
168	.b2ab		7d 00 03	adc $0300,x	                adc     vduv+0,x
169	.b2ae		8d 44 03	sta $0344	                sta     vduv.ew.plotPointX+0
170	.b2b1		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
171	.b2b4		7d 01 03	adc $0301,x	                adc     vduv+1,x
172	.b2b7		8d 45 03	sta $0345	                sta     vduv.ew.plotPointX+1
173	.b2ba		18		clc		                clc
174	.b2bb		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
175	.b2be		6d 4d 88	adc $884d	                adc     ellipseCountHeight+0
176	.b2c1		a8		tay		                tay
177	.b2c2		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
178	.b2c5		6d 4e 88	adc $884e	                adc     ellipseCountHeight+1
179	.b2c8		20 09 b3	jsr $b309	                jsr     LBAFE
180	.b2cb		7a		ply		                ply
181	.b2cc		fa		plx		                plx
182	.b2cd		ad 4d 88	lda $884d	                lda     ellipseCountHeight+0
183	.b2d0		0d 4e 88	ora $884e	                ora     ellipseCountHeight+1
184	.b2d3		f0 47		beq $b31c	                beq     rtsBB11
185	.b2d5		38		sec		                sec
186	.b2d6		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
187	.b2d9		fd 00 03	sbc $0300,x	                sbc     vduv+0,x
188	.b2dc		8d 40 03	sta $0340	                sta     vduv.ew.pointE+0
189	.b2df		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
190	.b2e2		fd 01 03	sbc $0301,x	                sbc     vduv+1,x
191	.b2e5		8d 41 03	sta $0341	                sta     vduv.ew.pointE+1
192	.b2e8		38		sec		                sec
193	.b2e9		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
194	.b2ec		f9 00 03	sbc $0300,y	                sbc     vduv+0,y
195	.b2ef		8d 44 03	sta $0344	                sta     vduv.ew.pointF+0
196	.b2f2		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
197	.b2f5		f9 01 03	sbc $0301,y	                sbc     vduv+1,y
198	.b2f8		8d 45 03	sta $0345	                sta     vduv.ew.pointF+1
199	.b2fb		38		sec		                sec
200	.b2fc		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
201	.b2ff		ed 4d 88	sbc $884d	                sbc     ellipseCountHeight+0
202	.b302		a8		tay		                tay
203	.b303		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
204	.b306		ed 4e 88	sbc $884e	                sbc     ellipseCountHeight+1

206	.b309						LBAFE:
207	.b309		8c 46 03	sty $0346	                sty     vduv.ew.plotPointY+0
208	.b30c		8c 42 03	sty $0342	                sty     vduv.ew.currentOffsetX+0
209	.b30f		8d 47 03	sta $0347	                sta     vduv.ew.plotPointY+1
210	.b312		8d 43 03	sta $0343	                sta     vduv.ew.currentOffsetX+1
211	.b315		a2 44		ldx #$44	                ldx     #VDUVariables.ew.pointF
212	.b317		a0 40		ldy #$40	                ldy     #VDUVariables.ew.pointE
213	.b319		4c e7 da	jmp $dae7	                jmp     LDAE8

219	.b31c						rtsBB11:
220	.b31c		60		rts		                rts

225	.b31d						LBB12:
226	.b31d		68		pla		                pla
227	.b31e		68		pla		                pla
228	.b31f		9c 4d 88	stz $884d	                stz     ellipseCountHeight+0
229	.b322		9c 4e 88	stz $884e	                stz     ellipseCountHeight+1
230	.b325		a2 29		ldx #$29	                ldx     #VDUVariables.ew.aspectRatio+1
231	.b327		a0 40		ldy #$40	                ldy     #VDUVariables.ew.pointE
232	.b329		20 05 b6	jsr $b605	                jsr     negateVDUVariableXIntoY
233	.b32c		a2 29		ldx #$29	                ldx     #VDUVariables.ew.aspectRatio+1
234	.b32e		a0 44		ldy #$44	                ldy     #VDUVariables.ew.pointF
235	.b330		20 0c c9	jsr $c90c	                jsr     copyTwoBytesWithinVDUVariables
236	.b333		a2 44		ldx #$44	                ldx     #VDUVariables.ew.pointF
237	.b335		a0 40		ldy #$40	                ldy     #VDUVariables.ew.pointE
238	.b337		4c 92 b2	jmp $b292	                jmp     fillEllipseOneRowAndReflection

240	.b33a						ellipseInitialisation:
241							                ; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP5
242	.b33a		a0 24		ldy #$24	                ldy     #VDUVariables.graphicsCursorPixelsX
243	.b33c		a2 14		ldx #$14	                ldx     #VDUVariables.oldGraphicsCursorPixelsX
244	.b33e		a9 29		lda #$29	                lda     #VDUVariables.ew.aspectRatio+1
245	.b340		20 77 d6	jsr $d677	                jsr     LD678
246	.b343		9c 28 03	stz $0328	                stz     vduv.ew.aspectRatio+0
247	.b346		a0 22		ldy #$22	                ldy     #VDUVariables.queueEnd-2
248	.b348		a2 16		ldx #$16	                ldx     #VDUVariables.oldGraphicsCursorPixelsY
249	.b34a		a9 2e		lda #$2e	                lda     #VDUVariables.ew.halfHeightCounter
250	.b34c		20 77 d6	jsr $d677	                jsr     LD678
251	.b34f		ad 2e 03	lda $032e	                lda     vduv.ew.halfHeightCounter+0
252	.b352		0d 2f 03	ora $032f	                ora     vduv.ew.halfHeightCounter+1
253	.b355		f0 c6		beq $b31d	                beq     LBB12
254	.b357		2a		rol a		                rol     a
255	.b358		8d 41 88	sta $8841	                sta     L8841
256	.b35b		a0 20		ldy #$20	                ldy     #VDUVariables.queueEnd-4
257	.b35d		a2 14		ldx #$14	                ldx     #VDUVariables.oldGraphicsCursorPixelsX
258	.b35f		a9 2c		lda #$2c	                lda     #VDUVariables.ew.shear+1
259	.b361		20 77 d6	jsr $d677	                jsr     LD678
260	.b364		9c 2b 03	stz $032b	                stz     vduv.ew.shear+0
261	.b367		2a		rol a		                rol     a
262	.b368		4d 41 88	eor $8841	                eor     ellipseSignFlag
263	.b36b		29 01		and #$01	                and     #1
264	.b36d		8d 41 88	sta $8841	                sta     ellipseSignFlag
265	.b370		a2 28		ldx #$28	                ldx     #VDUVariables.ew.aspectRatio
266	.b372		a0 2e		ldy #$2e	                ldy     #VDUVariables.ew.halfHeightCounter
267	.b374		20 8e b5	jsr $b58e	                jsr     divide24By16Bits
268	.b377		a2 2b		ldx #$2b	                ldx     #VDUVariables.ew.shear
269	.b379		a0 2e		ldy #$2e	                ldy     #VDUVariables.ew.halfHeightCounter
270	.b37b		20 8e b5	jsr $b58e	                jsr     divide24By16Bits
271	.b37e		ad 41 88	lda $8841	                lda     L8841
272	.b381		f0 0e		beq $b391	                beq     LBB86
273	.b383		38		sec		                sec
274	.b384		a0 fd		ldy #$fd	                ldy     #$fd

276	.b386						LBB7B:
277	.b386		a9 00		lda #$00	                lda     #0
278	.b388		f9 2e 02	sbc $022e,y	                sbc     vduv.ew.shear-$fd,y
279	.b38b		99 2e 02	sta $022e,y	                sta     vduv.ew.shear-$fd,y
280	.b38e		c8		iny		                iny
281	.b38f		d0 f5		bne $b386	                bne     LBB7B

283	.b391						LBB86:
284	.b391		ad 2e 03	lda $032e	                lda     vduv.ew.halfHeightCounter+0
285	.b394		8d 3c 88	sta $883c	                sta     L883C
286	.b397		ad 2f 03	lda $032f	                lda     vduv.ew.halfHeightCounter+1
287	.b39a		20 cd d4	jsr $d4cd	                jsr     LD4CE
288	.b39d		a0 03		ldy #$03	                ldy     #3

290	.b39f						LBB94:
291	.b39f		b9 40 88	lda $8840,y	                lda     L8840,y
292	.b3a2		99 30 03	sta $0330,y	                sta     vduv.ew.halfHeightSquared+0,y
293	.b3a5		88		dey		                dey
294	.b3a6		10 f7		bpl $b39f	                bpl     LBB94
295	.b3a8		a2 0a		ldx #$0a	                ldx     #$a

297	.b3aa						LBB9F:
298	.b3aa		9e 42 88	stz $8842,x	                stz     ellipseAccumulatedShear,x
299	.b3ad		ca		dex		                dex
300	.b3ae		10 fa		bpl $b3aa	                bpl     LBB9F
301	.b3b0		ee 45 88	inc $8845	                inc     ellipseCountOddNumbers+0
302	.b3b3		20 23 b4	jsr $b423	                jsr     updateEllipse
303	.b3b6		20 23 b4	jsr $b423	                jsr     updateEllipse
304	.b3b9		9c 4d 88	stz $884d	                stz     ellipseCountHeight+0
305	.b3bc		9c 4e 88	stz $884e	                stz     ellipseCountHeight+1
306	.b3bf		a2 3c		ldx #$3c	                ldx     #VDUVariables.ew.pointA
307	.b3c1		a0 36		ldy #$36	                ldy     #VDUVariables.ew.pointD
308	.b3c3		20 05 b6	jsr $b605	                jsr     negateVDUVariableXIntoY
309	.b3c6		a2 3e		ldx #$3e	                ldx     #VDUVariables.ew.pointB
310	.b3c8		a0 34		ldy #$34	                ldy     #VDUVariables.ew.pointC
311	.b3ca		20 05 b6	jsr $b605	                jsr     negateVDUVariableXIntoY
312	.b3cd		a2 3c		ldx #$3c	                ldx     #VDUVariables.ew.pointA
313	.b3cf		a0 3a		ldy #$3a	                ldy     #VDUVariables.ew.rightPoint
314	.b3d1		20 d5 d5	jsr $d5d5	                jsr     compareVDUVariableWords
315	.b3d4		10 07		bpl $b3dd	                bpl     LBBD2
316	.b3d6		20 0c c9	jsr $c90c	                jsr     copyTwoBytesWithinVDUVariables
317	.b3d9		a2 36		ldx #$36	                ldx     #VDUVariables.ew.pointD
318	.b3db		80 12		bra $b3ef	                bra     LBBE4

321	.b3dd						LBBD2:
322	.b3dd		a2 38		ldx #$38	                ldx     #VDUVariables.ew.leftPoint
323	.b3df		a0 3e		ldy #$3e	                ldy     #VDUVariables.ew.pointB
324	.b3e1		20 d5 d5	jsr $d5d5	                jsr     compareVDUVariableWords
325	.b3e4		10 3c		bpl $b422	                bpl     rtsBC17
326	.b3e6		a2 34		ldx #$34	                ldx     #VDUVariables.ew.pointC
327	.b3e8		a0 3a		ldy #$3a	                ldy     #VDUVariables.ew.rightPoint
328	.b3ea		20 0c c9	jsr $c90c	                jsr     copyTwoBytesWithinVDUVariables
329	.b3ed		a2 3e		ldx #$3e	                ldx     #VDUVariables.ew.pointB

331	.b3ef						LBBE4:
332	.b3ef		a0 38		ldy #$38	                ldy     #VDUVariables.ew.leftPoint
333	.b3f1		4c 0c c9	jmp $c90c	                jmp     copyTwoBytesWithinVDUVariables

335							;-------------------------------------------------------------------------
336							;
337							; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP6
338							;

340	.b3f4						updateEllipseIncrementally:
341	.b3f4		20 23 b4	jsr $b423	                jsr     updateEllipse
342	.b3f7		a0 3a		ldy #$3a	                ldy     #VDUVariables.ew.rightPoint
343	.b3f9		a2 3c		ldx #$3c	                ldx     #VDUVariables.ew.pointA
344	.b3fb		20 d5 d5	jsr $d5d5	                jsr     compareVDUVariableWords
345	.b3fe		10 0d		bpl $b40d	                bpl     LBC02
346	.b400		ad 3c 03	lda $033c	                lda     vduv.ew.pointA+0
347	.b403		8d 3a 03	sta $033a	                sta     vduv.ew.rightPoint+0
348	.b406		ad 3d 03	lda $033d	                lda     vduv.ew.pointA+1
349	.b409		8d 3b 03	sta $033b	                sta     vduv.ew.rightPoint+1
350	.b40c		60		rts		                rts

352	.b40d						LBC02:
353	.b40d		a2 38		ldx #$38	                ldx     #VDUVariables.ew.leftPoint
354	.b40f		a0 3e		ldy #$3e	                ldy     #VDUVariables.ew.pointB
355	.b411		20 d5 d5	jsr $d5d5	                jsr     compareVDUVariableWords
356	.b414		10 0c		bpl $b422	                bpl     rtsBC17
357	.b416		ad 3e 03	lda $033e	                lda     vduv.ew.pointB+0
358	.b419		8d 38 03	sta $0338	                sta     vduv.ew.leftPoint+0
359	.b41c		ad 3f 03	lda $033f	                lda     vduv.ew.pointB+1
360	.b41f		8d 39 03	sta $0339	                sta     vduv.ew.leftPoint+1

362	.b422						rtsBC17:
363	.b422		60		rts		                rts

365							;-------------------------------------------------------------------------
366							;
367							; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP7
368							;

370	.b423						updateEllipse:
371	.b423		a2 38		ldx #$38	                ldx     #VDUVariables.ew.leftPoint
372	.b425		a0 34		ldy #$34	                ldy     #VDUVariables.ew.pointC
373	.b427		20 1e c9	jsr $c91e	                jsr     copyFourBytesWithinVDUVariables
374	.b42a		a2 3c		ldx #$3c	                ldx     #VDUVariables.ew.pointA
375	.b42c		a0 38		ldy #$38	                ldy     #VDUVariables.ew.leftPoint
376	.b42e		20 1e c9	jsr $c91e	                jsr     copyFourBytesWithinVDUVariables

378	.b431		38		sec		                sec
379	.b432		ad 30 03	lda $0330	                lda     vduv.ew.halfHeightSquared+0
380	.b435		ed 49 88	sbc $8849	                sbc     ellipseCountSquares+0
381	.b438		8d 36 88	sta $8836	                sta     sqrtNumber+2
382	.b43b		ad 31 03	lda $0331	                lda     vduv.ew.halfHeightSquared+1
383	.b43e		ed 4a 88	sbc $884a	                sbc     ellipseCountSquares+1
384	.b441		8d 37 88	sta $8837	                sta     sqrtNumber+3
385	.b444		ad 32 03	lda $0332	                lda     vduv.ew.halfHeightSquared+2
386	.b447		ed 4b 88	sbc $884b	                sbc     ellipseCountSquares+2
387	.b44a		8d 38 88	sta $8838	                sta     sqrtNumber+4
388	.b44d		ad 33 03	lda $0333	                lda     vduv.ew.halfHeightSquared+3
389	.b450		ed 4c 88	sbc $884c	                sbc     ellipseCountSquares+3
390	.b453		8d 39 88	sta $8839	                sta     sqrtNumber+5
391	.b456		9c 35 88	stz $8835	                stz     sqrtNumber+1
392	.b459		9c 34 88	stz $8834	                stz     sqrtNumber+0
393	.b45c		20 56 b6	jsr $b656	                jsr     LBE4B

395	.b45f		ad 28 03	lda $0328	                lda     vduv.ew.aspectRatio+0
396	.b462		8d 34 88	sta $8834	                sta     multiplier+0
397	.b465		ad 29 03	lda $0329	                lda     vduv.ew.aspectRatio+1
398	.b468		8d 35 88	sta $8835	                sta     multiplier+1
399	.b46b		ad 2a 03	lda $032a	                lda     vduv.ew.aspectRatio+2
400	.b46e		8d 36 88	sta $8836	                sta     multiplier+2
401	.b471		20 17 b6	jsr $b617	                jsr     multiply24x24

403	.b474		18		clc		                clc
404	.b475		ad 42 88	lda $8842	                lda     ellipseAccumulatedShear+0
405	.b478		6d 35 88	adc $8835	                adc     product+1
406	.b47b		08		php		                php
407	.b47c		ad 43 88	lda $8843	                lda     ellipseAccumulatedShear+1
408	.b47f		6d 36 88	adc $8836	                adc     product+2
409	.b482		8d 3e 03	sta $033e	                sta     vduv.ew.pointB+0
410	.b485		ad 44 88	lda $8844	                lda     ellipseAccumulatedShear+2
411	.b488		6d 37 88	adc $8837	                adc     product+3
412	.b48b		8d 3f 03	sta $033f	                sta     vduv.ew.pointB+1
413	.b48e		28		plp		                plp
414	.b48f		10 08		bpl $b499	                bpl     +
415	.b491		ee 3e 03	inc $033e	                inc     vduv.ew.pointB+0
416	.b494		d0 03		bne $b499	                bne     +
417	.b496		ee 3f 03	inc $033f	                inc     vduv.ew.pointB+1
418	.b499						+
419	.b499		38		sec		                sec
420	.b49a		ad 42 88	lda $8842	                lda     ellipseAccumulatedShear+0
421	.b49d		ed 35 88	sbc $8835	                sbc     product+1
422	.b4a0		08		php		                php
423	.b4a1		ad 43 88	lda $8843	                lda     ellipseAccumulatedShear+1
424	.b4a4		ed 36 88	sbc $8836	                sbc     product+2
425	.b4a7		8d 3c 03	sta $033c	                sta     vduv.ew.pointA+0
426	.b4aa		ad 44 88	lda $8844	                lda     ellipseAccumulatedShear+2
427	.b4ad		ed 37 88	sbc $8837	                sbc     product+3
428	.b4b0		8d 3d 03	sta $033d	                sta     vduv.ew.pointA+1
429	.b4b3		28		plp		                plp
430	.b4b4		10 08		bpl $b4be	                bpl     +
431	.b4b6		ee 3c 03	inc $033c	                inc     vduv.ew.pointA+0
432	.b4b9		d0 03		bne $b4be	                bne     +
433	.b4bb		ee 3d 03	inc $033d	                inc     vduv.ew.pointA+1
434	.b4be						+

436	.b4be		18		clc		                clc
437	.b4bf		ad 45 88	lda $8845	                lda     ellipseCountOddNumbers+0
438	.b4c2		6d 49 88	adc $8849	                adc     ellipseCountSquares+0
439	.b4c5		8d 49 88	sta $8849	                sta     ellipseCountSquares+0
440	.b4c8		ad 46 88	lda $8846	                lda     ellipseCountOddNumbers+1
441	.b4cb		6d 4a 88	adc $884a	                adc     ellipseCountSquares+1
442	.b4ce		8d 4a 88	sta $884a	                sta     ellipseCountSquares+1
443	.b4d1		ad 47 88	lda $8847	                lda     ellipseCountOddNumbers+2
444	.b4d4		6d 4b 88	adc $884b	                adc     ellipseCountSquares+2
445	.b4d7		8d 4b 88	sta $884b	                sta     ellipseCountSquares+2
446	.b4da		ad 48 88	lda $8848	                lda     ellipseCountOddNumbers+3
447	.b4dd		6d 4c 88	adc $884c	                adc     ellipseCountSquares+3
448	.b4e0		8d 4c 88	sta $884c	                sta     ellipseCountSquares+3
449	.b4e3		18		clc		                clc
450	.b4e4		a9 02		lda #$02	                lda     #2
451	.b4e6		6d 45 88	adc $8845	                adc     ellipseCountOddNumbers+0
452	.b4e9		8d 45 88	sta $8845	                sta     ellipseCountOddNumbers+0
453	.b4ec		90 0d		bcc $b4fb	                bcc     +
454	.b4ee		ee 46 88	inc $8846	                inc     ellipseCountOddNumbers+1
455	.b4f1		d0 08		bne $b4fb	                bne     +
456	.b4f3		ee 47 88	inc $8847	                inc     ellipseCountOddNumbers+2
457	.b4f6		d0 03		bne $b4fb	                bne     +
458	.b4f8		ee 48 88	inc $8848	                inc     ellipseCountOddNumbers+3
459	.b4fb						+
460	.b4fb		18		clc		                clc
461	.b4fc		ad 42 88	lda $8842	                lda     ellipseAccumulatedShear+0
462	.b4ff		6d 2b 03	adc $032b	                adc     vduv.ew.shear+0
463	.b502		8d 42 88	sta $8842	                sta     ellipseAccumulatedShear+0
464	.b505		ad 43 88	lda $8843	                lda     ellipseAccumulatedShear+1
465	.b508		6d 2c 03	adc $032c	                adc     vduv.ew.shear+1
466	.b50b		8d 43 88	sta $8843	                sta     ellipseAccumulatedShear+1
467	.b50e		ad 44 88	lda $8844	                lda     ellipseAccumulatedShear+2
468	.b511		6d 2d 03	adc $032d	                adc     vduv.ew.shear+2
469	.b514		8d 44 88	sta $8844	                sta     ellipseAccumulatedShear+2
470	.b517		ee 4d 88	inc $884d	                inc     ellipseCountHeight+0
471	.b51a		d0 03		bne $b51f	                bne     +
472	.b51c		ee 4e 88	inc $884e	                inc     ellipseCountHeight+1
473	.b51f						+
474	.b51f		ad 2e 03	lda $032e	                lda     vduv.ew.halfHeightCounter+0
475	.b522		d0 03		bne $b527	                bne     +
476	.b524		ce 2f 03	dec $032f	                dec     vduv.ew.halfHeightCounter+1
477	.b527						+
478	.b527		ce 2e 03	dec $032e	                dec     vduv.ew.halfHeightCounter+0
479	.b52a		60		rts		                rts

481							;-------------------------------------------------------------------------
482							;
483							; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP8
484							;
485	.b52b						outlineEllipsePlotOnePointAndReflection: .block
486	.b52b		da		phx		                phx
487	.b52c		5a		phy		                phy

489	.b52d		18		clc		                clc
490	.b52e		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
491	.b531		6d 42 03	adc $0342	                adc     vduv.ew.currentOffsetX+0
492	.b534		8d 44 03	sta $0344	                sta     vduv.ew.plotPointX+0
493	.b537		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
494	.b53a		6d 43 03	adc $0343	                adc     vduv.ew.currentOffsetX+1
495	.b53d		8d 45 03	sta $0345	                sta     vduv.ew.plotPointX+1

497	.b540		18		clc		                clc
498	.b541		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
499	.b544		6d 4d 88	adc $884d	                adc     ellipseCountHeight+0
500	.b547		8d 46 03	sta $0346	                sta     vduv.ew.plotPointY+0
501	.b54a		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
502	.b54d		6d 4e 88	adc $884e	                adc     ellipseCountHeight+1
503	.b550		8d 47 03	sta $0347	                sta     vduv.ew.plotPointY+1

505	.b553		a2 44		ldx #$44	                ldx     #VDUVariables.ew.plotPointX
506	.b555		20 4b db	jsr $db4b	                jsr     plotPointInternal

508	.b558		ad 4d 88	lda $884d	                lda     ellipseCountHeight+0
509	.b55b		0d 4e 88	ora $884e	                ora     ellipseCountHeight+1
510	.b55e		f0 2b		beq $b58b	                beq     done

512	.b560		38		sec		                sec
513	.b561		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
514	.b564		ed 42 03	sbc $0342	                sbc     vduv.ew.currentOffsetX+0
515	.b567		8d 44 03	sta $0344	                sta     vduv.ew.plotPointX+0
516	.b56a		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
517	.b56d		ed 43 03	sbc $0343	                sbc     vduv.ew.currentOffsetX+1
518	.b570		8d 45 03	sta $0345	                sta     vduv.ew.plotPointX+1

520	.b573		38		sec		                sec
521	.b574		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
522	.b577		ed 4d 88	sbc $884d	                sbc     ellipseCountHeight+0
523	.b57a		8d 46 03	sta $0346	                sta     vduv.ew.plotPointY+0
524	.b57d		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
525	.b580		ed 4e 88	sbc $884e	                sbc     ellipseCountHeight+1
526	.b583		8d 47 03	sta $0347	                sta     vduv.ew.plotPointY+1

528	.b586		a2 44		ldx #$44	                ldx     #VDUVariables.ew.plotPointX
529	.b588		20 4b db	jsr $db4b	                jsr     plotPointInternal
530	.b58b						done:
531	.b58b		7a		ply		                ply
532	.b58c		fa		plx		                plx
533	.b58d		60		rts		                rts
534							                .endblock

536							;-------------------------------------------------------------------------
537							;
538							; https://tobylobster.github.io/GXR-pages/gxr/S-s24.html#SP1 ?
539							;
540	.b58e						divide24By16Bits:
541	.b58e		da		phx		                phx

543							                ; Copy 16-bit value into workspace
544	.b58f		b9 00 03	lda $0300,y	                lda     vduv+0,y
545	.b592		8d 3f 88	sta $883f	                sta     L883F
546	.b595		b9 01 03	lda $0301,y	                lda     vduv+1,y
547	.b598		8d 40 88	sta $8840	                sta     L8840

549							                ; 24 bits...?
550	.b59b		a0 18		ldy #$18	                ldy     #24

552							                ; Copy 24-bit value into workspace
553	.b59d		bd 00 03	lda $0300,x	                lda     vduv+0,x
554	.b5a0		8d 3a 88	sta $883a	                sta     L883A
555	.b5a3		bd 01 03	lda $0301,x	                lda     vduv+1,x
556	.b5a6		8d 3b 88	sta $883b	                sta     L883B
557	.b5a9		bd 02 03	lda $0302,x	                lda     vduv+2,x
558	.b5ac		30 0c		bmi $b5ba	                bmi     LBDAF

560	.b5ae						LBDA3:
561	.b5ae		88		dey		                dey
562	.b5af		f0 52		beq $b603	                beq     LBDF8

564							                ; shift 24-bit value left 1
565	.b5b1		0e 3a 88	asl $883a	                asl     L883A
566	.b5b4		2e 3b 88	rol $883b	                rol     L883B
567	.b5b7		2a		rol a		                rol     a
568	.b5b8		10 f4		bpl $b5ae	                bpl     LBDA3

570	.b5ba						LBDAF:
571	.b5ba		8d 3c 88	sta $883c	                sta     L883C
572	.b5bd		9c 3d 88	stz $883d	                stz     L883D
573	.b5c0		9c 3e 88	stz $883e	                stz     L883E
574	.b5c3		18		clc		                clc

576	.b5c4						LBDB9:
577							                ; shift 40-bit value left 1
578	.b5c4		2e 3a 88	rol $883a	                rol     L883A
579	.b5c7		2e 3b 88	rol $883b	                rol     L883B
580	.b5ca		2e 3c 88	rol $883c	                rol     L883C
581	.b5cd		2e 3d 88	rol $883d	                rol     L883D
582	.b5d0		2e 3e 88	rol $883e	                rol     L883E
583	.b5d3		38		sec		                sec
584	.b5d4		ad 3d 88	lda $883d	                lda     L883D
585	.b5d7		ed 3f 88	sbc $883f	                sbc     L883F
586	.b5da		aa		tax		                tax
587	.b5db		ad 3e 88	lda $883e	                lda     L883E
588	.b5de		ed 40 88	sbc $8840	                sbc     L8840
589	.b5e1		90 06		bcc $b5e9	                bcc     LBDDE
590	.b5e3		8e 3d 88	stx $883d	                stx     L883D
591	.b5e6		8d 3e 88	sta $883e	                sta     L883E

593	.b5e9						LBDDE:
594	.b5e9		88		dey		                dey
595	.b5ea		d0 d8		bne $b5c4	                bne     LBDB9
596	.b5ec		fa		plx		                plx
597	.b5ed		ad 3a 88	lda $883a	                lda     L883A
598	.b5f0		2a		rol a		                rol     a
599	.b5f1		9d 00 03	sta $0300,x	                sta     vduv+0,x
600	.b5f4		ad 3b 88	lda $883b	                lda     L883B
601	.b5f7		2a		rol a		                rol     a
602	.b5f8		9d 01 03	sta $0301,x	                sta     vduv+1,x
603	.b5fb		ad 3c 88	lda $883c	                lda     L883C
604	.b5fe		2a		rol a		                rol     a
605	.b5ff		9d 02 03	sta $0302,x	                sta     vduv+2,x
606	.b602		60		rts		                rts

609	.b603						LBDF8:
610	.b603		fa		plx		                plx
611	.b604		60		rts		                rts

616							;-------------------------------------------------------------------------
617							;
618							; https://tobylobster.github.io/GXR-pages/gxr/S-s24.html#SP3
619							;

621	.b605						negateVDUVariableXIntoY:
622	.b605		38		sec		                sec
623	.b606		a9 00		lda #$00	                lda     #0
624	.b608		fd 00 03	sbc $0300,x	                sbc     vduv+0,x
625	.b60b		99 00 03	sta $0300,y	                sta     vduv+0,y
626	.b60e		a9 00		lda #$00	                lda     #0
627	.b610		fd 01 03	sbc $0301,x	                sbc     vduv+1,x
628	.b613		99 01 03	sta $0301,y	                sta     vduv+1,y
629	.b616		60		rts		                rts

631							;-------------------------------------------------------------------------

633	.b617						multiply24x24:
634	.b617		a0 17		ldy #$17	                ldy     #23
635	.b619		9c 39 88	stz $8839	                stz     product+5
636	.b61c		9c 38 88	stz $8838	                stz     product+4
637	.b61f		9c 37 88	stz $8837	                stz     product+3
638	.b622		4e 36 88	lsr $8836	                lsr     multiplier+2
639	.b625		6e 35 88	ror $8835	                ror     multiplier+1
640	.b628		6e 34 88	ror $8834	                ror     multiplier+0

642	.b62b						LBE20:
643	.b62b		90 1c		bcc $b649	                bcc     LBE3E
644	.b62d		18		clc		                clc
645	.b62e		ad 30 88	lda $8830	                lda     multiplicand+0
646	.b631		6d 37 88	adc $8837	                adc     product+3
647	.b634		8d 37 88	sta $8837	                sta     product+3
648	.b637		ad 31 88	lda $8831	                lda     multiplicand+1
649	.b63a		6d 38 88	adc $8838	                adc     product+4
650	.b63d		8d 38 88	sta $8838	                sta     product+4
651	.b640		ad 32 88	lda $8832	                lda     multiplicand+2
652	.b643		6d 39 88	adc $8839	                adc     product+5
653	.b646		8d 39 88	sta $8839	                sta     product+5

655	.b649						LBE3E:
656	.b649		18		clc		                clc
657	.b64a		a2 05		ldx #$05	                ldx     #5

659	.b64c						LBE41:
660	.b64c		7e 34 88	ror $8834,x	                ror     product,x
661	.b64f		ca		dex		                dex
662	.b650		10 fa		bpl $b64c	                bpl     LBE41
663	.b652		88		dey		                dey
664	.b653		10 d6		bpl $b62b	                bpl     LBE20
665	.b655		60		rts		                rts

667							;-------------------------------------------------------------------------

669	.b656						LBE4B:
670	.b656		a2 03		ldx #$03	                ldx     #3

672	.b658						LBE4D:
673	.b658		9e 30 88	stz $8830,x	                stz     $8830,x
674	.b65b		74 dc		stz $dc,x	                stz     ZTEMPB,x
675	.b65d		ca		dex		                dex
676	.b65e		10 f8		bpl $b658	                bpl     LBE4D
677	.b660		a0 05		ldy #$05	                ldy     #5

679	.b662						LBE57:
680	.b662		b9 34 88	lda $8834,y	                lda     $8834,y
681	.b665		85 da		sta $da		                sta     ZTEMP+0
682	.b667		5a		phy		                phy
683	.b668		a0 03		ldy #$03	                ldy     #3

685	.b66a						LBE5F:
686	.b66a		5a		phy		                phy
687	.b66b		38		sec		                sec
688	.b66c		2e 30 88	rol $8830	                rol     L8830
689	.b66f		2e 31 88	rol $8831	                rol     L8831
690	.b672		2e 32 88	rol $8832	                rol     L8832
691	.b675		2e 33 88	rol $8833	                rol     L8833
692	.b678		a2 01		ldx #$01	                ldx     #1
693	.b67a		a5 dc		lda $dc		                lda     ZTEMPB+0

695	.b67c						LBE71:
696	.b67c		06 da		asl $da		                asl     ZTEMP+0
697	.b67e		2a		rol a		                rol     a
698	.b67f		26 dd		rol $dd		                rol     ZTEMPB+1
699	.b681		26 de		rol $de		                rol     ZTEMPC+0
700	.b683		26 df		rol $df		                rol     ZTEMPC+1
701	.b685		ca		dex		                dex
702	.b686		10 f4		bpl $b67c	                bpl     LBE71
703	.b688		85 dc		sta $dc		                sta     ZTEMPB+0
704	.b68a		38		sec		                sec
705	.b68b		ed 30 88	sbc $8830	                sbc     L8830
706	.b68e		48		pha		                pha
707	.b68f		a5 dd		lda $dd		                lda     ZTEMPB+1
708	.b691		ed 31 88	sbc $8831	                sbc     L8831
709	.b694		aa		tax		                tax
710	.b695		a5 de		lda $de		                lda     ZTEMPC+0
711	.b697		ed 32 88	sbc $8832	                sbc     L8832
712	.b69a		a8		tay		                tay
713	.b69b		a5 df		lda $df		                lda     ZTEMPC+1
714	.b69d		ed 33 88	sbc $8833	                sbc     L8833
715	.b6a0		90 0e		bcc $b6b0	                bcc     LBEA5
716	.b6a2		85 df		sta $df		                sta     ZTEMPC+1
717	.b6a4		84 de		sty $de		                sty     ZTEMPC+0
718	.b6a6		86 dd		stx $dd		                stx     ZTEMPB+1
719	.b6a8		68		pla		                pla
720	.b6a9		85 dc		sta $dc		                sta     ZTEMPB+0
721	.b6ab		ee 30 88	inc $8830	                inc     L8830
722	.b6ae		80 04		bra $b6b4	                bra     LBEA9

725	.b6b0						LBEA5:
726	.b6b0		68		pla		                pla
727	.b6b1		ce 30 88	dec $8830	                dec     L8830

729	.b6b4						LBEA9:
730	.b6b4		7a		ply		                ply
731	.b6b5		88		dey		                dey
732	.b6b6		10 b2		bpl $b66a	                bpl     LBE5F
733	.b6b8		7a		ply		                ply
734	.b6b9		88		dey		                dey
735	.b6ba		10 a6		bpl $b662	                bpl     LBE57
736	.b6bc		4e 33 88	lsr $8833	                lsr     L8833
737	.b6bf		6e 32 88	ror $8832	                ror     L8832
738	.b6c2		6e 31 88	ror $8831	                ror     L8831
739	.b6c5		6e 30 88	ror $8830	                ror     L8830
740	.b6c8		60		rts		                rts

742							;-------------------------------------------------------------------------
743							;
744							; 184-191 = Move/copy rectangle [MasRef E.3-31]
745							;
746							; The normal interpretation of <p> does not apply in this group of
747							; plot codes and the meanings are as follows:
748							;
749							; 184, 185 - %1011100x - Move rectangle, relative
750							; 186, 187 - %1011101x - Copy rectangle, relative
751							; 188, 189 - %1011110x - Move rectangle, absolute
752							; 190, 191 - %1011111x - Copy rectangle, absolute
753							;
754	.b6c9						plotMoveOrCopyRectangle:
755	.b6c9		29 02		and #$02	                and     #2
756	.b6cb		8d 45 03	sta $0345	                sta     vduv.mocr.copy

758	.b6ce		20 51 c9	jsr $c951	                jsr     prepareForPlotBackground

760	.b6d1		a2 14		ldx #$14	                ldx     #VDUVariables.oldGraphicsCursorPixels
761	.b6d3		20 e6 c8	jsr $c8e6	                jsr     prepareAABB

763							                ; mocr.dest.min = PLOT coordinate
764	.b6d6		a0 34		ldy #$34	                ldy     #VDUVariables.mocr.dest.min
765	.b6d8		20 16 c9	jsr $c916	                jsr     copyLastFourVDUQueueBytes
766	.b6db		84 da		sty $da		                sty     ZTEMP+0              ;Y=VDUVariables.mocr.dest.max

768							                ; dest.max = dest.min + (src.max - src.min)
769	.b6dd		a2 34		ldx #$34	                ldx     #VDUVariables.mocr.dest.min
770	.b6df		a0 2c		ldy #$2c	                ldy     #VDUVariables.mocr.src.max
771	.b6e1		a9 28		lda #$28	                lda     #VDUVariables.mocr.src.min
772	.b6e3		20 7f d5	jsr $d57f	                jsr     addRegionDimensionsToVDUVariableCoordinates

774							                ;
775	.b6e6		a2 28		ldx #$28	                ldx     #VDUVariables.mocr.src.min
776	.b6e8		a0 34		ldy #$34	                ldy     #VDUVariables.mocr.dest
777	.b6ea		20 cb d5	jsr $d5cb	                jsr     sortVDUVariableWords

779	.b6ed		5a		phy		                phy
780	.b6ee		da		phx		                phx
781	.b6ef		a0 00		ldy #$00	                ldy     #0                   ;get outcode for X axis
782	.b6f1		20 b6 d1	jsr $d1b6	                jsr     getOutcodeForAxis
783	.b6f4		f0 08		beq $b6fe	                beq     LBEF3                ;taken if
784	.b6f6		4a		lsr a		                lsr     a
785	.b6f7		f0 03		beq $b6fc	                beq     LBEF1
786	.b6f9		68		pla		                pla

788	.b6fa						LBEEF:
789	.b6fa		68		pla		                pla
790	.b6fb		60		rts		                rts

793	.b6fc						LBEF1:
794	.b6fc		a2 00		ldx #$00	                ldx     #0

796	.b6fe						LBEF3:
797	.b6fe		68		pla		                pla

799	.b6ff		a0 30		ldy #$30	                ldy     #VDUVariables.mocr.L30
800	.b701		84 da		sty $da		                sty     ZTEMP+0
801	.b703		a0 28		ldy #$28	                ldy     #VDUVariables.mocr.src.min
802	.b705		20 8c d5	jsr $d58c	                jsr     addRegionDimensionToVDUVariableCoordinate

804	.b708		a0 3c		ldy #$3c	                ldy     #VDUVariables.ew.pointA
805	.b70a		84 da		sty $da		                sty     ZTEMP+0

807	.b70c		a0 34		ldy #$34	                ldy     #VDUVariables.mocr.dest.min
808	.b70e		20 8c d5	jsr $d58c	                jsr     addRegionDimensionToVDUVariableCoordinate

810	.b711		68		pla		                pla
811	.b712		18		clc		                clc
812	.b713		69 04		adc #$04	                adc     #4
813	.b715		aa		tax		                tax
814	.b716		da		phx		                phx
815	.b717		a0 00		ldy #$00	                ldy     #0
816	.b719		20 b6 d1	jsr $d1b6	                jsr     getOutcodeForAxis
817	.b71c		f0 05		beq $b723	                beq     LBF18
818	.b71e		4a		lsr a		                lsr     a
819	.b71f		f0 d9		beq $b6fa	                beq     LBEEF
820	.b721		a2 04		ldx #$04	                ldx     #4

822	.b723						LBF18:
823	.b723		68		pla		                pla
824	.b724		a0 40		ldy #$40	                ldy     #VDUVariables.mocr.L40
825	.b726		84 da		sty $da		                sty     ZTEMP+0
826	.b728		a0 38		ldy #$38	                ldy     #VDUVariables.mocr.dest.max.x
827	.b72a		20 8c d5	jsr $d58c	                jsr     addRegionDimensionToVDUVariableCoordinate
828	.b72d		ad 40 03	lda $0340	                lda     vduv.mocr.L40
829	.b730		cd 3c 03	cmp $033c	                cmp     vduv.mocr.L3C
830	.b733		ad 41 03	lda $0341	                lda     vduv.mocr.L40+1
831	.b736		ed 3d 03	sbc $033d	                sbc     vduv.mocr.L3C+1
832	.b739		10 10		bpl $b74b	                bpl     LBF40
833	.b73b		ad 45 03	lda $0345	                lda     vduv.mocr.copy
834	.b73e		d0 03		bne $b743	                bne     LBF38
835	.b740		20 1f c4	jsr $c41f	                jsr     LC420

837	.b743						LBF38:
838	.b743		a2 34		ldx #$34	                ldx     #VDUVariables.mocr.dest
839	.b745		20 02 c9	jsr $c902	                jsr     copyEightBytesToWorkspace28
840	.b748		4c 1f c4	jmp $c41f	                jmp     LC420

843	.b74b						LBF40:
844	.b74b		9c 47 03	stz $0347	                stz     vduv.mocr.L47
845	.b74e		ad 30 03	lda $0330	                lda     vduv.mocr.L30
846	.b751		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne
847	.b754		85 da		sta $da		                sta     ZTEMP+0
848	.b756		ad 3c 03	lda $033c	                lda     vduv.mocr.L3C
849	.b759		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne
850	.b75c		38		sec		                sec
851	.b75d		e5 da		sbc $da		                sbc     ZTEMP+0
852	.b75f		10 06		bpl $b767	                bpl     LBF5C
853	.b761		ce 47 03	dec $0347	                dec     vduv.mocr.L47
854	.b764		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne

856	.b767						LBF5C:
857	.b767		8d 43 03	sta $0343	                sta     vduv.ew.currentOffsetX+1
858	.b76a		48		pha		                pha
859	.b76b		49 ff		eor #$ff	                eor     #$ff
860	.b76d		1a		inc a		                inc     a
861	.b76e		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne
862	.b771		8d 42 03	sta $0342	                sta     vduv.mocr.shiftToNextByte
863	.b774		68		pla		                pla
864	.b775		18		clc		                clc
865	.b776		6d 61 03	adc $0361	                adc     vduv.pixelsPerByteMinusOne
866	.b779		aa		tax		                tax
867	.b77a		bd 22 e1	lda $e122,x	                lda     LE120,x
868	.b77d		85 e1		sta $e1		                sta     ZTEMPD+1
869	.b77f		a2 3c		ldx #$3c	                ldx     #VDUVariables.mocr.L3C
870	.b781		a0 40		ldy #$40	                ldy     #VDUVariables.mocr.L40
871	.b783		20 9b da	jsr $da9b	                jsr     LDA9C
872	.b786		8d 44 03	sta $0344	                sta     vduv.mocr.L44
873	.b789		a5 d1		lda $d1		                lda     ZMASK
874	.b78b		8d 46 03	sta $0346	                sta     vduv.mocr.L46
875	.b78e		a5 dc		lda $dc		                lda     ZTEMPB+0
876	.b790		85 e0		sta $e0		                sta     ZTEMPD+0
877	.b792		a2 00		ldx #$00	                ldx     #0
878	.b794		20 f1 b7	jsr $b7f1	                jsr     LBFE6
879	.b797		f0 40		beq $b7d9	                beq     LBFCE
880	.b799		ad 2a 03	lda $032a	                lda     vduv.mocr.src.min.y+0
881	.b79c		cd 36 03	cmp $0336	                cmp     vduv.mocr.dest.min.y+0
882	.b79f		ad 2b 03	lda $032b	                lda     vduv.mocr.src.min.y+1
883	.b7a2		ed 37 03	sbc $0337	                sbc     vduv.mocr.dest.min.y+1
884	.b7a5		50 02		bvc $b7a9	                bvc     LBF9E
885	.b7a7		49 80		eor #$80	                eor     #$80

887	.b7a9						LBF9E:
888	.b7a9		30 11		bmi $b7bc	                bmi     LBFB1

890	.b7ab						LBFA0:
891	.b7ab		20 61 db	jsr $db61	                jsr     LDB62
892	.b7ae		a2 00		ldx #$00	                ldx     #0
893	.b7b0		20 dc b7	jsr $b7dc	                jsr     LBFD1
894	.b7b3		a2 0c		ldx #$0c	                ldx     #$c
895	.b7b5		20 dc b7	jsr $b7dc	                jsr     LBFD1
896	.b7b8		d0 f1		bne $b7ab	                bne     LBFA0
897	.b7ba		80 1d		bra $b7d9	                bra     LBFCE

900	.b7bc						LBFB1:
901	.b7bc		a2 2a		ldx #$2a	                ldx     #VDUVariables.mocr.src.min.y
902	.b7be		a0 2e		ldy #$2e	                ldy     #VDUVariables.mocr.src.max.y
903	.b7c0		20 b4 e2	jsr $e2b4	                jsr     exchangeTwoVDUBytes
904	.b7c3		a2 36		ldx #$36	                ldx     #VDUVariables.mocr.dest.min.y
905	.b7c5		a0 3a		ldy #$3a	                ldy     #VDUVariables.mocr.dest.max.y
906	.b7c7		20 b4 e2	jsr $e2b4	                jsr     exchangeTwoVDUBytes

908	.b7ca						LBFBF:
909	.b7ca		20 61 db	jsr $db61	                jsr     LDB62
910	.b7cd		a2 00		ldx #$00	                ldx     #0
911	.b7cf		20 e6 b7	jsr $b7e6	                jsr     LBFDB
912	.b7d2		a2 0c		ldx #$0c	                ldx     #$c
913	.b7d4		20 e6 b7	jsr $b7e6	                jsr     LBFDB
914	.b7d7		d0 f1		bne $b7ca	                bne     LBFBF

916	.b7d9						LBFCE:
917	.b7d9		4c 61 db	jmp $db61	                jmp     LDB62

919	.b7dc						LBFD1:
920	.b7dc		fe 2a 03	inc $032a,x	                inc     vduv.mocr.src.min.y+0,x
921	.b7df		d0 10		bne $b7f1	                bne     LBFE6
922	.b7e1		fe 2b 03	inc $032b,x	                inc     vduv.mocr.src.min.y+1,x
923	.b7e4		80 0b		bra $b7f1	                bra     LBFE6

925	.b7e6						LBFDB:
926	.b7e6		bd 2a 03	lda $032a,x	                lda     vduv.mocr.src.min.y+0,x
927	.b7e9		d0 03		bne $b7ee	                bne     LBFE3
928	.b7eb		de 2b 03	dec $032b,x	                dec     vduv.mocr.src.min.y+1,x

930	.b7ee						LBFE3:
931	.b7ee		de 2a 03	dec $032a,x	                dec     vduv.mocr.src.min.y+0,x
932	.b7f1						LBFE6:
933	.b7f1		bd 2a 03	lda $032a,x	                lda     vduv.mocr.src.min.y+0,x
934	.b7f4		dd 2e 03	cmp $032e,x	                cmp     vduv.mocr.src.max.y+0,x
935	.b7f7		d0 06		bne $b7ff	                bne     rtsBFF4
936	.b7f9		bd 2b 03	lda $032b,x	                lda     vduv.mocr.src.min.y+1,x
937	.b7fc		dd 2f 03	cmp $032f,x	                cmp     vduv.mocr.src.max.y+1,x

939	.b7ff						rtsBFF4:
940	.b7ff		60		rts		                rts

:1	;******  Return to file: mos329.s65

31							                .endsection

33							                .section utils
34							                .include "src/terminal.s65"

:7	;******  Processing file: src/terminal.s65

1							; -*- comment-column:45; -*-

3	.8000						utilsROMHeader: .block
5	.8000		4c 95 af	jmp $af95	                jmp terminalLanguageEntryPoint ; Language entry point
6	.8003		4c 8d 9d	jmp $9d8d	                jmp utilsServiceEntryPoint  ; Service entry point
7	>8006		c2				                .byte $C2                    ; ROM type=SERV+LANG+6502
8	>8007		11				                .byte copyrightText-1-utilsROMHeader ; (C) offset
9	>8008		01				                .byte $01
10	>8009		54 45 52 4d 49 4e 41 4c		                .text "TERMINAL"
11	>8011		00				                .byte 0
12	.8012						copyrightText:
14	>8012		28 43 29 31 39 38 36 20		                .text "(C)1986 Acorn"
	>801a		41 63 6f 72 6e
18	>801f		00				                .byte 0

66							                .endblock

68							;-------------------------------------------------------------------------

71	.8020						trbACCCON:
72	.8020		20 53 f3	jsr $f353	                jsr withTSTClear
73	.8023		1c 34 fe	trb $fe34	                trb ACCCON
74	.8026		60		rts		                rts

77							;-------------------------------------------------------------------------

80	.8027						tsbACCCON:
81	.8027		20 53 f3	jsr $f353	                jsr withTSTClear
82	.802a		0c 34 fe	tsb $fe34	                tsb ACCCON
83	.802d		60		rts		                rts

86							;-------------------------------------------------------------------------

89	.802e						ldaSystemVIAIER:
90	.802e		20 53 f3	jsr $f353	                jsr withTSTClear
91	.8031		ad 4e fe	lda $fe4e	                lda systemVIA.ier
92	.8034		60		rts		                rts

95							;-------------------------------------------------------------------------

98	.8035						printCMOSRamResetMessage:
99	.8035		20 53 f3	jsr $f353	                jsr withTSTClear
100	.8038		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
101	>803b		0d 0a				                .text 13,10
102	>803d		43 4d 4f 53 20 52 41 4d		                .text "CMOS RAM reset",13,10
	>8045		20 72 65 73 65 74 0d 0a
103	>804d		50 72 65 73 73 20 62 72		                .text "Press break to continue",13,10
	>8055		65 61 6b 20 74 6f 20 63 6f 6e 74 69 6e 75 65 0d
	>8065		0a
104	>8066		00				                .text 0
105	.8067		60		rts		                rts

108							;-------------------------------------------------------------------------

112							                .include "isSecondProcessorPresent.s65"

:23	;******  Processing file: src/isSecondProcessorPresent.s65

1							;-------------------------------------------------------------------------
2							;
3							; Check if a coprocessor is attached to the Tube
4							;
5							; exit:
6							;
7							; C=0 = no Tube
8							;
9							; C=1 = Tube
10							;

12							; (Note that this code is always included in MOS 5.xx, even though
13							; there's no second processor support.)

15	.8068						isSecondProcessorPresent:
17	.8068		20 53 f3	jsr $f353	                jsr withTSTClear
19	.806b						isSecondProcessorPresent2:
20							                ; (+ 6 2 4 4 2 2 4 4 2 6) = 36
21	.806b		a2 01		ldx #$01	                ldx #$01
22	.806d		8e e0 fe	stx $fee0	                stx $fee0       ;tube.status1
23	.8070		ad e0 fe	lda $fee0	                lda $fee0       ;tube.status1
24	.8073		49 01		eor #$01	                eor #$01
25	.8075		a2 81		ldx #$81	                ldx #$81
26	.8077		8e e0 fe	stx $fee0	                stx $fee0       ;tube.status1
27	.807a		2d e0 fe	and $fee0	                and $fee0 ;tube.status1       ; Cy=0 if no Tube, Cy=1 if Tube
28	.807d		6a		ror a		                ror a
29	.807e		60		rts		                rts

31							;-------------------------------------------------------------------------
32							;
33							; Check if a coprocessor is attached to the Tube, with a timeout to
34							; accommodate PiTube bootup time.
35							;
36							; exit:
37							;
38							; C=0 = no Tube
39							;
40							; C=1 = Tube
41							;

:7	;******  Return to file: src/terminal.s65

116							;-------------------------------------------------------------------------

119	.807f						resetCRTC:
120	.807f		a2 1e		ldx #$1e	                ldx #$1e
121	.8081						L8081:
122	.8081		8e 00 fe	stx $fe00	                stx $fe00
123	.8084		9c 01 fe	stz $fe01	                stz $fe01
124	.8087		e8		inx		                inx
125	.8088		e0 21		cpx #$21	                cpx #$21
126	.808a		90 f5		bcc $8081	                bcc L8081
127	.808c		60		rts		                rts

130							;-------------------------------------------------------------------------

132							; STARTUP
133							; =======

135							; This code is officially more than a bit gnarly, as it gets stitched
136							; together in several different ways.

139	.808d						softResetPart2:
140	.808d		20 53 f3	jsr $f353	                jsr withTSTClear
141	.8090		68		pla		                pla
142	.8091		68		pla		                pla
143	.8092		68		pla		                pla

150	.8093		90 0a		bcc $809f	                bcc handleROMWorkspace        ;taken if Tube not found
154	.8095		a2 ff		ldx #$ff	                ldx #romServiceCallTubeMainInitialisation
155	.8097		20 ac ed	jsr $edac	                jsr makeROMServiceCall   ;
156	.809a		d0 03		bne $809f	                bne handleROMWorkspace        ; Not claimed, step past
157	.809c		ce 7a 02	dec $027a	                dec tubePresence ; Tube PreInit claimed, set TubeFlag to &FF, Tube present
162	.809f						handleROMWorkspace:
163	.809f		ad 8d 02	lda $028d	                lda lastBREAKType ; Soft Break, don't ask about workspace
164	.80a2		f0 27		beq $80cb	                beq L82FC
165	.80a4		a0 dc		ldy #$dc	                ldy #$DC                     ; Start high workspace at &DC00 and work downwards
166	.80a6		a2 24		ldx #$24	                ldx #romServiceCallCountDynamicHAZELWorkspace ; Ask ROMs how much private high workspace required
167	.80a8		20 ac ed	jsr $edac	                jsr makeROMServiceCall   ;
168	.80ab		a2 21		ldx #$21	                ldx #romServiceCallAbsoluteHAZELWorkspaceClaim ; Ask ROMs for maximum shared high workspace required
169	.80ad		20 ac ed	jsr $edac	                jsr makeROMServiceCall   ;
170	.80b0		5a		phy		                phy                          ; Save top of shared workspace
171	.80b1		a2 22		ldx #$22	                ldx #romServiceCallPrivateHAZELWorkspaceClam ; Ask ROMs for private high workspace required
172	.80b3		20 ac ed	jsr $edac	                jsr makeROMServiceCall   ;
173	.80b6		a0 0e		ldy #$0e	                ldy #$0E                     ; Start low workspace at &0E00
174	.80b8		a2 01		ldx #$01	                ldx #romServiceCallAbsoluteWorkspaceClaim ; Ask ROMs for maximum shared workspace
175	.80ba		20 ac ed	jsr $edac	                jsr makeROMServiceCall   ;
176	.80bd		a2 02		ldx #$02	                ldx #romServiceCallPrivateWorkspaceClaim ; Ask ROMs for private workspace
177	.80bf		20 ac ed	jsr $edac	                jsr makeROMServiceCall   ;
178	.80c2		8c 44 02	sty $0244	                sty oshwm                    ; Set OSHWM - default PAGE
179	.80c5		7a		ply		                ply                          ; Get top of shared high workspace
180	.80c6		a2 23		ldx #$23	                ldx #romServiceCallTopOfHAZELWorkspace ; Tell ROMs top of shared high workspace
181	.80c8		20 ac ed	jsr $edac	                jsr makeROMServiceCall   ;
182	.80cb						L82FC:
183	.80cb		a2 21		ldx #$21	                ldx #size(defaultFsInfoBlocks)
184	.80cd						L82FE:
185	.80cd		bd 15 81	lda $8115,x	                lda defaultFsInfoBlocks-1,x                ; Copy initial FS info blocks for CFS, TAPE, ROM
186	.80d0		9d 05 df	sta $df05,x	                sta hazel.fsInfoBlocks-1,x
187	.80d3		ca		dex		                dex
188	.80d4		d0 f7		bne $80cd	                bne L82FE
189	.80d6		64 f2		stz $f2		                stz $F2                      ; &F2/3=>FS Info Blocks
190	.80d8		a9 df		lda #$df	                lda #>hazel.fsInfoBlocks
191	.80da		85 f3		sta $f3		                sta $F3
192							                ; Y=>end of FS Info Blocks
193	.80dc		a0 27		ldy #$27	                ldy #<hazel.fsInfoBlocks+size(defaultFsInfoBlocks)
194	.80de		a2 25		ldx #$25	                ldx #romServiceCallRequestFSInfo
195	.80e0		20 ac ed	jsr $edac	                jsr makeROMServiceCall   ;
196	.80e3		a9 00		lda #$00	                lda #$00                     ; Terminate FS Info blocks
197	.80e5		91 f2		sta ($f2),y	                sta ($F2),y

199	.80e7		ad 57 02	lda $0257	                lda spoolFileHandle ; Save Spool handle and disable Spooling
200	.80ea		48		pha		                pha
201	.80eb		9c 57 02	stz $0257	                stz spoolFileHandle
202	.80ee		a2 fe		ldx #$fe	                ldx #romServiceCallTubeSystemPostInitialisation
204	.80f0		ac 7a 02	ldy $027a	                ldy tubePresence
208	.80f3		20 ac ed	jsr $edac	                jsr makeROMServiceCall   ; Tube PostInit
209	.80f6		2d 67 02	and $0267	                and startupMessageSuppressionStatus
210	.80f9		10 14		bpl $810f	                bpl L8340

212							                ; use +$ff rather than -1 to avoid 64tass warning.
213							                ; Only the LSB is used.
214	.80fb		a0 00		ldy #$00	                ldy #((startupMessages.acornMOS-(startupMessages&$ff00))+$ff)&$ff
215	.80fd		20 6e e7	jsr $e76e	                jsr printStartupMessage
216	.8100		ad 8d 02	lda $028d	                lda lastBREAKType            ; Skip past if Soft Break
217	.8103		f0 05		beq $810a	                beq L833B
218	.8105		a0 0f		ldy #$0f	                ldy #((startupMessages.beep-(startupMessages&$ff00))-1)&$ff
219	.8107		20 6e e7	jsr $e76e	                jsr printStartupMessage
220	.810a						L833B:
221	.810a		a0 11		ldy #$11	                ldy #((startupMessages.twoNewlines-(startupMessages&$ff00))-1)&$ff
222	.810c		20 6e e7	jsr $e76e	                jsr printStartupMessage
223	.810f						L8340:
224	.810f		68		pla		                pla                          ; Restore Spool handle
225	.8110		8d 57 02	sta $0257	                sta spoolFileHandle
226	.8113		4c c5 e3	jmp $e3c5	                jmp LE40E                ;

228							;-------------------------------------------------------------------------

250							;-------------------------------------------------------------------------

252							; Default FS Info Blocks
253							; ======================
254	.8116						defaultFsInfoBlocks: .block
256	>8116		43 46 53 20 20 20 20 20		                .text "CFS     "
257	>811e		01				                .byte $01
258	>811f		02				                .byte $02
259	>8120		01				                .byte $01
260	>8121		54 41 50 45 20 20 20 20		                .text "TAPE    "
261	>8129		01				                .byte $01
262	>812a		02				                .byte $02
263	>812b		01				                .byte $01
265	>812c		52 4f 4d 20 20 20 20 20		                .text "ROM     "
266	>8134		03				                .byte $03
267	>8135		03				                .byte $03
268	>8136		03				                .byte $03
269							                .endblock

271							;-------------------------------------------------------------------------
272							;
273							; MOS command table

275							mos_command .macro name,routine,byte1,byte2
292							                .endm

294	.8137						mosCommandTable:
276							                ; Name of command, compared case-insensitively.
277	>8137		43 41 54			                .text "CAT"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>813a		f1				                .byte >callFSCV
168	>813b		47				                .byte <callFSCV

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>813c		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>813d		05				                .byte $05
276							                ; Name of command, compared case-insensitively.
277	>813e		41 44 46 53			                .text "ADFS"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8142		83				                .byte >passStarCommandThrough
168	>8143		79				                .byte <passStarCommandThrough

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8144		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8145		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>8146		41 50 50 45 4e 44		                .text "APPEND"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>814c		8f				                .byte >starAPPEND
168	>814d		ea				                .byte <starAPPEND

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>814e		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>814f		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>8150		42 41 53 49 43			                .text "BASIC"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8155		83				                .byte >starBASIC
168	>8156		71				                .byte <starBASIC

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8157		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8158		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>8159		42 55 49 4c 44			                .text "BUILD"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>815e		8f				                .byte >starBUILD
168	>815f		e5				                .byte <starBUILD

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8160		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8161		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>8162		43 4c 4f 53 45			                .text "CLOSE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8167		94				                .byte >starCLOSE
168	>8168		04				                .byte <starCLOSE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8169		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>816a		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>816b		43 4f 4e 46 49 47 55 52		                .text "CONFIGURE"
	>8173		45

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8174		86				                .byte >starCONFIGUREOrStarSTATUS
168	>8175		23				                .byte <starCONFIGUREOrStarSTATUS

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8176		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8177		80				                .byte $80
276							                ; Name of command, compared case-insensitively.
277	>8178		43 4f 44 45			                .text "CODE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>817c		93				                .byte >starCommandThroughOSBYTE
168	>817d		85				                .byte <starCommandThroughOSBYTE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>817e		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>817f		88				                .byte $88
276							                ; Name of command, compared case-insensitively.
277	>8180		43 52 45 41 54 45		                .text "CREATE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8186		92				                .byte >starCommandThroughOSFILE
168	>8187		b6				                .byte <starCommandThroughOSFILE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8188		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8189		07				                .byte $07
276							                ; Name of command, compared case-insensitively.
277	>818a		44 55 4d 50			                .text "DUMP"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>818e		8f				                .byte >starDUMP
168	>818f		18				                .byte <starDUMP

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8190		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8191		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>8192		44 45 4c 45 54 45		                .text "DELETE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8198		94				                .byte >starDELETE
168	>8199		1a				                .byte <starDELETE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>819a		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>819b		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>819c		45 58 45 43			                .text "EXEC"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>81a0		a5				                .byte >starEXEC
168	>81a1		ab				                .byte <starEXEC

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>81a2		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>81a3		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>81a4		45 58				                .text "EX"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>81a6		f1				                .byte >callFSCV
168	>81a7		47				                .byte <callFSCV

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>81a8		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>81a9		09				                .byte $09
276							                ; Name of command, compared case-insensitively.
277	>81aa		46 58				                .text "FX"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>81ac		93				                .byte >starFX
168	>81ad		7f				                .byte <starFX

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>81ae		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>81af		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>81b0		47 4f 49 4f			                .text "GOIO"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>81b4		92				                .byte >starGOIO
168	>81b5		9b				                .byte <starGOIO

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>81b6		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>81b7		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>81b8		47 4f				                .text "GO"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>81ba		92				                .byte >starGO
168	>81bb		93				                .byte <starGO

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>81bc		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>81bd		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>81be		48 45 4c 50			                .text "HELP"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>81c2		83				                .byte >starHELP
168	>81c3		94				                .byte <starHELP

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>81c4		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>81c5		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>81c6		49 4e 46 4f			                .text "INFO"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>81ca		f1				                .byte >callFSCV
168	>81cb		47				                .byte <callFSCV

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>81cc		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>81cd		0a				                .byte $0A
276							                ; Name of command, compared case-insensitively.
277	>81ce		49 47 4e 4f 52 45		                .text "IGNORE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>81d4		94				                .byte >starIGNORE
168	>81d5		0f				                .byte <starIGNORE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>81d6		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>81d7		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>81d8		49 4e 53 45 52 54		                .text "INSERT"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>81de		84				                .byte >starINSERT
168	>81df		ff				                .byte <starINSERT

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>81e0		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>81e1		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>81e2		4b 45 59			                .text "KEY"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>81e5		97				                .byte >starKEY
168	>81e6		c5				                .byte <starKEY

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>81e7		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>81e8		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>81e9		4c 4f 41 44			                .text "LOAD"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>81ed		92				                .byte >starLOAD
168	>81ee		b4				                .byte <starLOAD

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>81ef		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>81f0		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>81f1		4c 49 53 54			                .text "LIST"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>81f5		8e				                .byte >starLIST
168	>81f6		96				                .byte <starLIST

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>81f7		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>81f8		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>81f9		4c 49 4e 45			                .text "LINE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>81fd		eb				                .byte >callUSERV
168	>81fe		78				                .byte <callUSERV

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>81ff		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8200		01				                .byte $01
276							                ; Name of command, compared case-insensitively.
277	>8201		4c 49 42 46 53			                .text "LIBFS"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8206		e7				                .byte >starLIBFS
168	>8207		c3				                .byte <starLIBFS

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8208		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8209		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>820a		4d 4f 54 4f 52			                .text motorCommandString

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>820f		93				                .byte >starCommandThroughOSBYTE
168	>8210		85				                .byte <starCommandThroughOSBYTE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8211		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8212		89				                .byte $89
276							                ; Name of command, compared case-insensitively.
277	>8213		4d 4f 56 45			                .text "MOVE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8217		90				                .byte >starMOVE
168	>8218		97				                .byte <starMOVE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8219		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>821a		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>821b		4f 50 54			                .text "OPT"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>821e		93				                .byte >starCommandThroughOSBYTE
168	>821f		85				                .byte <starCommandThroughOSBYTE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8220		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8221		8b				                .byte $8B
276							                ; Name of command, compared case-insensitively.
277	>8222		50 52 49 4e 54			                .text "PRINT"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8227		8e				                .byte >starPRINT
168	>8228		8f				                .byte <starPRINT

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8229		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>822a		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>822b		52 55 4e			                .text "RUN"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>822e		f1				                .byte >callFSCV
168	>822f		47				                .byte <callFSCV

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8230		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8231		04				                .byte $04
276							                ; Name of command, compared case-insensitively.
277	>8232		52 45 4d 4f 56 45		                .text "REMOVE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8238		93				                .byte >starREMOVE
168	>8239		0f				                .byte <starREMOVE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>823a		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>823b		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>823c		52 4f 4d			                .text "ROM"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>823f		93				                .byte >starCommandThroughOSBYTE
168	>8240		85				                .byte <starCommandThroughOSBYTE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8241		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8242		8d				                .byte $8D
276							                ; Name of command, compared case-insensitively.
277	>8243		52 4f 4d 53			                .text "ROMS"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8247		84				                .byte >starROMS
168	>8248		6e				                .byte <starROMS

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8249		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>824a		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>824b		53 41 56 45			                .text "SAVE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>824f		92				                .byte >starCommandThroughOSFILE
168	>8250		b6				                .byte <starCommandThroughOSFILE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8251		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8252		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>8253		53 48 41 44 4f 57		                .text "SHADOW"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8259		93				                .byte >starSHADOW
168	>825a		bd				                .byte <starSHADOW

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>825b		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>825c		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>825d		53 48 4f 57			                .text "SHOW"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8261		97				                .byte >starSHOW
168	>8262		65				                .byte <starSHOW

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8263		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8264		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>8265		53 48 55 54			                .text "SHUT"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8269		f2				                .byte >starSHUT
168	>826a		fc				                .byte <starSHUT

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>826b		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>826c		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>826d		53 50 4f 4f 4c			                .text "SPOOL"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8272		93				                .byte >starSPOOL
168	>8273		d1				                .byte <starSPOOL

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8274		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8275		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>8276		53 50 4f 4f 4c 4f 4e		                .text "SPOOLON"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>827d		93				                .byte >starSPOOLON
168	>827e		ba				                .byte <starSPOOLON

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>827f		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8280		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>8281		53 52 44 41 54 41		                .text "SRDATA"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8287		8a				                .byte >starSRDATAOrStarSRROM
168	>8288		83				                .byte <starSRDATAOrStarSRROM

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8289		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>828a		a0				                .byte $a0
276							                ; Name of command, compared case-insensitively.
277	>828b		53 52 4c 4f 41 44		                .text "SRLOAD"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>8291		8b				                .byte >starSRLOADOrStarSRSAVE
168	>8292		d1				                .byte <starSRLOADOrStarSRSAVE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>8293		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>8294		60				                .byte $60
276							                ; Name of command, compared case-insensitively.
277	>8295		53 52 52 45 41 44		                .text "SRREAD"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>829b		8b				                .byte >starSRREADOrStarSRWRITE
168	>829c		55				                .byte <starSRREADOrStarSRWRITE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>829d		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>829e		a0				                .byte $a0
276							                ; Name of command, compared case-insensitively.
277	>829f		53 52 52 4f 4d			                .text "SRROM"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>82a4		8a				                .byte >starSRDATAOrStarSRROM
168	>82a5		83				                .byte <starSRDATAOrStarSRROM

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>82a6		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>82a7		80				                .byte $80
276							                ; Name of command, compared case-insensitively.
277	>82a8		53 52 53 41 56 45		                .text "SRSAVE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>82ae		8b				                .byte >starSRLOADOrStarSRSAVE
168	>82af		d1				                .byte <starSRLOADOrStarSRSAVE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>82b0		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>82b1		20				                .byte $20
276							                ; Name of command, compared case-insensitively.
277	>82b2		53 52 57 52 49 54 45		                .text "SRWRITE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>82b9		8b				                .byte >starSRREADOrStarSRWRITE
168	>82ba		55				                .byte <starSRREADOrStarSRWRITE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>82bb		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>82bc		e0				                .byte $e0
276							                ; Name of command, compared case-insensitively.
277	>82bd		53 54 41 54 55 53		                .text "STATUS"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>82c3		86				                .byte >starCONFIGUREOrStarSTATUS
168	>82c4		23				                .byte <starCONFIGUREOrStarSTATUS

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>82c5		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>82c6		c0				                .byte $c0
276							                ; Name of command, compared case-insensitively.
277	>82c7		54 41 50 45			                .text tapeCommandString

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>82cb		93				                .byte >starCommandThroughOSBYTE
168	>82cc		85				                .byte <starCommandThroughOSBYTE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>82cd		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>82ce		8c				                .byte $8C
276							                ; Name of command, compared case-insensitively.
277	>82cf		54 56				                .text "TV"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>82d1		93				                .byte >starCommandThroughOSBYTE
168	>82d2		85				                .byte <starCommandThroughOSBYTE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>82d3		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>82d4		90				                .byte $90
276							                ; Name of command, compared case-insensitively.
277	>82d5		54 49 4d 45			                .text "TIME"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>82d9		85				                .byte >starTIME
168	>82da		24				                .byte <starTIME

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>82db		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>82dc		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>82dd		54 59 50 45			                .text "TYPE"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>82e1		8e				                .byte >starTYPE
168	>82e2		a1				                .byte <starTYPE

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>82e3		80				                .byte $80

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>82e4		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>82e5		55 4e 50 4c 55 47		                .text "UNPLUG"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>82eb		85				                .byte >starUNPLUG
168	>82ec		02				                .byte <starUNPLUG

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>82ed		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>82ee		ff				                .byte $FF
276							                ; Name of command, compared case-insensitively.
277	>82ef		58				                .text "X"

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>82f0		e7				                .byte >starX
168	>82f1		ca				                .byte <starX

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>82f2		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>82f3		00				                .byte $00
276							                ; Name of command, compared case-insensitively.
277	>82f4						                .text ""

279							                ; Address of command routine, big-endian so that the
280							                ; first byte always has bit 7 set.
167:3	>82f4		f1				                .byte >callFSCV
168	>82f5		47				                .byte <callFSCV

283:7							                ; If bit 7 set, reset the tempFS flag before
284							                ; starting.
285	>82f6		00				                .byte $00

287							                ; If bit 7 set, update string input buffer address
288							                ; before starting.
289							                ;
290							                ; A is set to this value on entry to the routine.
291	>82f7		03				                .byte $03
370	>82f8		00				                .byte $00

372							;-------------------------------------------------------------------------
373							;
374							; Get string input buffer address tail according to table byte.
375							;
376							; Entry:
377							;
378							; oscliWorkspace.tablePtr; = pointer to table byte
379							; (stringInputBufferAddress),y = pointer to input
380							;
381							; Exit:
382							;
383							; A = table byte
384							;
385							; if table byte bit 7 set: Y/X points to command line tail
386	.82f9						maybeGetStringInputBufferAddress:
387	.82f9		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
388	.82fb		30 0c		bmi $8309	                bmi rts84FE
389	.82fd						getStringInputBufferAddressWithYOffset:
390	.82fd		98		tya		                tya
391	.82fe						getStringInputBufferAddressWithAOffset:
392	.82fe		18		clc		                clc
393	.82ff		65 f2		adc $f2		                adc stringInputBufferAddress+0
394	.8301		aa		tax		                tax
395	.8302		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
396	.8304		90 01		bcc $8307	                bcc +
397	.8306		c8		iny		                iny
398	.8307						+
399	.8307		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
400	.8309						rts84FE:
401	.8309		60		rts		                rts

403							; Prepare OSCLI command line
404							; ==========================
405	.830a						oscli:
406	.830a		86 f2		stx $f2		                stx stringInputBufferAddress+0
407	.830c		84 f3		sty $f3		                sty stringInputBufferAddress+1
408	.830e		ad 00 df	lda $df00	                lda hazel.currentFS
409	.8311		20 80 f8	jsr $f880	                jsr selectFS
410	.8314		a9 08		lda #$08	                lda #fscStarCommand
411	.8316		20 47 f1	jsr $f147	                jsr callFSCV
412	.8319		a0 ff		ldy #$ff	                ldy #$FF
413	.831b						L8510:
414	.831b		20 68 f2	jsr $f268	                jsr incAndSkipSpaces
415	.831e		f0 e9		beq $8309	                beq rts84FE
416	.8320		c9 2a		cmp #$2a	                cmp #'*'
417	.8322		f0 f7		beq $831b	                beq L8510
418	.8324		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
419	.8327		f0 e0		beq $8309	                beq rts84FE
420	.8329		c9 7c		cmp #$7c	                cmp #'|'
421	.832b		f0 dc		beq $8309	                beq rts84FE
422	.832d		9c c6 df	stz $dfc6	                stz hazel.tempFSFlag
423	.8330		c9 2d		cmp #$2d	                cmp #'-'
424	.8332		d0 0c		bne $8340	                bne L8535
425	.8334		20 d9 f7	jsr $f7d9	                jsr parseFileNameFS
426	.8337		20 80 f8	jsr $f880	                jsr selectFS
427	.833a		38		sec		                sec
428	.833b		6e c6 df	ror $dfc6	                ror hazel.tempFSFlag
429	.833e		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
430	.8340						L8535:
431	.8340		c9 2f		cmp #$2f	                cmp #'/'
432	.8342		d0 09		bne $834d	                bne L8542
433	.8344		c8		iny		                iny
434	.8345		20 fd 82	jsr $82fd	                jsr getStringInputBufferAddressWithYOffset
435	.8348		a9 02		lda #$02	                lda #fscStarSlash
436	.834a		4c 47 f1	jmp $f147	                jmp callFSCV

438	.834d						L8542:
442	.834d		a9 37		lda #$37	                lda #<mosCommandTable
443	.834f		85 b0		sta $b0		                sta oscliWorkspace.tablePtr+0
444	.8351		a9 81		lda #$81	                lda #>mosCommandTable
445	.8353		85 b1		sta $b1		                sta oscliWorkspace.tablePtr+1
449	.8355		b8		clv		                clv
450	.8356		20 5f 88	jsr $885f	                jsr findCommand
451	.8359		90 1e		bcc $8379	                bcc passStarCommandThrough

489	.835b						L8585:
490	.835b		48		pha		                pha
491	.835c		20 9e 88	jsr $889e	                jsr fetchCommandTableByte
492	.835f		48		pha		                pha
493	.8360		20 9e 88	jsr $889e	                jsr fetchCommandTableByte
494	.8363		30 03		bmi $8368	                bmi L8592
495	.8365		9c c6 df	stz $dfc6	                stz hazel.tempFSFlag
496	.8368						L8592:
497	.8368		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
498	.836b		18		clc		                clc
499	.836c		08		php		                php
500	.836d		20 f9 82	jsr $82f9	                jsr maybeGetStringInputBufferAddress
501	.8370		40		rti		                rti

521							;-------------------------------------------------------------------------

523							; *BASIC
524							; ======
525	.8371						starBASIC:
526	.8371		ae 4b 02	ldx $024b	                ldx basicROMNumber           ; Get BASIC ROM number
527	.8374		30 03		bmi $8379	                bmi passStarCommandThrough ; If no BASIC ROM, jump to pass to ROMs and filing system
529	.8376		4c f0 fa	jmp $faf0	                jmp osbyte8EWithoutRelocation

538							;-------------------------------------------------------------------------

540							; *ADFS - pass straight to ROMs/Filing System
541							; ===========================================
542	.8379						passStarCommandThrough:
543	.8379		2c c6 df	bit $dfc6	                bit hazel.tempFSFlag      ; Check filing system flag
544	.837c		30 0c		bmi $838a	                bmi L85C0                    ; If ... skip ROM service call
545	.837e		9c c6 df	stz $dfc6	                stz hazel.tempFSFlag      ; Clear filing system flag
546	.8381		a4 e6		ldy $e6		                ldy $E6
547	.8383		a2 04		ldx #$04	                ldx #romServiceCallUnrecognisedCommand
548	.8385		20 3d ed	jsr $ed3d	                jsr osbyte8F    ; Service call 4 - Unknown command
550	.8388		f0 4d		beq $83d7	                beq parseDone
554	.838a						L85C0:
555	.838a		a5 e6		lda $e6		                lda $E6
556	.838c		20 fe 82	jsr $82fe	                jsr getStringInputBufferAddressWithAOffset
557	.838f		a9 03		lda #$03	                lda #$03
558	.8391		4c 47 f1	jmp $f147	                jmp callFSCV ; Pass to FSCV,3 - Unknown command

560	.8394						starHELP:
561	.8394		a2 09		ldx #$09	                ldx #romServiceCallHelp      ;
562	.8396		a5 d0		lda $d0		                lda STATE                    ;
563	.8398		48		pha		                pha                          ;save STATE
564	.8399		a9 0e		lda #$0e	                lda #14
565	.839b		20 ee ff	jsr $ffee	                jsr OSWRCH                   ; paged mode ON
566	.839e		20 ac ed	jsr $edac	                jsr makeROMServiceCall   ;
567	.83a1		a2 18		ldx #$18	                ldx #romServiceCallReserved  ;???
568	.83a3		20 ac ed	jsr $edac	                jsr makeROMServiceCall
569	.83a6		68		pla		                pla                          ;restore STATE
570	.83a7		89 04		bit #$04	                bit #STATE.isPagedScrolling  ;was paged mode on originally?
571	.83a9		d0 2c		bne $83d7	                bne parseDone   ;taken if paged mode was originally on
572							                                ;(branch target is an arbitrary nearby
573							                                ;RTS)
574	.83ab		a9 0f		lda #$0f	                lda #15         ;restore non-paged mode
575	.83ad		4c ee ff	jmp $ffee	                jmp OSWRCH

577							;-------------------------------------------------------------------------
578							;
579							; Read a byte value (0-255) from a string. If the number has a '&'
580							; prefix, interpret it as hex.
581							;
582							; entry:
583							;
584							; (stringInputBufferAddress),y - string
585							;
586							; exit:
587							;
588							; X = result
589							; ?$e6 = result
590							; C=0 if error
591							; Z=1 if CR encountered
592							;
593	.83b0						parseNumberFromString:
594	.83b0		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
595	.83b3		c9 26		cmp #$26	                cmp #'&'                     ; hex value incoming?
596	.83b5		d0 21		bne $83d8	                bne parseDecimal             ; taken if not hex value
597	.83b7						parseHex:
598	.83b7		c8		iny		                iny                          ; skip '&'
599	.83b8		20 10 84	jsr $8410	                jsr readHexDigit             ; read first hex digit
600	.83bb		90 51		bcc $840e	                bcc errorReadingString
601	.83bd		85 e6		sta $e6		                sta $E6                      ; save first hex digit
602	.83bf		20 10 84	jsr $8410	                jsr readHexDigit             ; read second hex digih
603	.83c2		90 0e		bcc $83d2	                bcc parsedValue         ; taken if not hex digit
604							                ; The first digit read was actually the high nybble,
605							                ; and the current digit read is therefore the low
606							                ; nybble.
607							                ;
608							                ; Shift saved digit 4 bits left.
609	.83c4		a2 04		ldx #$04	                ldx #$04
610	.83c6						-
611	.83c6		06 e6		asl $e6		                asl $E6
612	.83c8		ca		dex		                dex
613	.83c9		d0 fb		bne $83c6	                bne -
614	.83cb		04 e6		tsb $e6		                tsb $E6                      ; insert low nybble
615	.83cd		20 10 84	jsr $8410	                jsr readHexDigit             ; read third hex digit
616	.83d0		b0 29		bcs $83fb	                bcs errorReadingString2 ; 3+-digit hex values are not valid
617	.83d2						parsedValue:
618	.83d2		a6 e6		ldx $e6		                ldx $E6
619	.83d4		c9 0d		cmp #$0d	                cmp #$0D
620	.83d6		38		sec		                sec
621	.83d7						parseDone:
622	.83d7		60		rts		                rts

624	.83d8						parseDecimal:
625	.83d8		20 fe 83	jsr $83fe	                jsr readDigitFromString
626	.83db		90 31		bcc $840e	                bcc errorReadingString      ;branch taken if not digit
627	.83dd						parseDecimalDigit:
628	.83dd		85 e6		sta $e6		                sta $E6                     ;save current value
629	.83df		20 fd 83	jsr $83fd	                jsr readNextDigitFromString
630	.83e2		90 ee		bcc $83d2	                bcc parsedValue ;branch taken if not digit, meaning number
631							                                     ;parsed successfully
632	.83e4		aa		tax		                tax                         ;X=digit

634							                ; calculate (value*4+value)*2 - i.e., value*10. Carry
635							                ; at any point indicates the value was greater than
636							                ; 255, and therefore an error.
637	.83e5		a5 e6		lda $e6		                lda $E6                     ;value
638	.83e7		0a		asl a		                asl a                       ;value*2
639	.83e8		b0 24		bcs $840e	                bcs errorReadingString
640	.83ea		0a		asl a		                asl a                       ;value*4
641	.83eb		b0 21		bcs $840e	                bcs errorReadingString
642	.83ed		65 e6		adc $e6		                adc $E6                     ;value*5
643	.83ef		b0 1d		bcs $840e	                bcs errorReadingString
644	.83f1		0a		asl a		                asl a                       ;value*10
645	.83f2		b0 1a		bcs $840e	                bcs errorReadingString
646	.83f4		85 e6		sta $e6		                sta $E6                      ;save value*10
647	.83f6		8a		txa		                txa                          ;A=digit
648	.83f7		65 e6		adc $e6		                adc $E6                      ;value*10+digit
649	.83f9		90 e2		bcc $83dd	                bcc parseDecimalDigit
650	.83fb						errorReadingString2:
651	.83fb		18		clc		                clc
652	.83fc		60		rts		                rts

654	.83fd						readNextDigitFromString:
655	.83fd		c8		iny		                iny

657							; check if current string input byte is a digit.
658							;
659							; exit: C=1 if digit; C=0 if not digit
660	.83fe						readDigitFromString:
661	.83fe		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
662	.8400		c9 3a		cmp #$3a	                cmp #'9'+1
663	.8402		b0 0a		bcs $840e	                bcs errorReadingString       ;taken if not ASCII decimal digit
664	.8404		c9 30		cmp #$30	                cmp #'0'
665	.8406		90 06		bcc $840e	                bcc errorReadingString       ;taken if not ASCII decimal digit
666	.8408		29 0f		and #$0f	                and #$0F         ;convert ASCII decimaldigit to number
667	.840a		60		rts		                rts

669	.840b						L8641:
670	.840b		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
674	.840e						errorReadingString:
675	.840e		18		clc		                clc
676	.840f		60		rts		                rts

678							;-------------------------------------------------------------------------
679							;
680							; Read a hex digit from a string
681							;
682							; entry:
683							;
684							; (stringInputBufferAddress),y = next byte to read
685							;
686							; exit:
687							;
688							; C=1 if ok: A = digit read
689							;
690							; C=0 if error: A = value read, Z=1 if CR encountered
691							;
692	.8410						readHexDigit:
693	.8410		20 fe 83	jsr $83fe	                jsr readDigitFromString
694	.8413		b0 0d		bcs $8422	                bcs +                        ; branch taken if digit
695	.8415		29 df		and #$df	                and #$DF                     ; convert to upper case
696	.8417		c9 47		cmp #$47	                cmp #'F'+1
697	.8419		b0 f0		bcs $840b	                bcs L8641    ; branch taken if not ASCII A-F hex digit
698	.841b		c9 41		cmp #$41	                cmp #'A'
699	.841d		90 ec		bcc $840b	                bcc L8641     ;branch taken if not ASCII A-F hex digit
700							                ; convert ASCII A-F hex digit to number.
701	.841f		49 48		eor #$48	                eor #$48
702	.8421		1a		inc a		                inc a
703	.8422						+
704	.8422		c8		iny		                iny
705	.8423		60		rts		                rts

707							;-------------------------------------------------------------------------
708							;
709							; OSWORD 0 control block for *commands
710							; ====================================
711	.8424						commandLineUIOSWORD0Parameters:
712	>8424		00 dc				                .word hazel.commandLine      ; address
713	>8426		f0				                .byte $F0			; max # chars
714	>8427		20				                .byte $20			; min ASCII char
715	>8428		7e				                .byte $7E			; max ASCII char

717							;-------------------------------------------------------------------------

719	.8429						commandLineUI:
720	.8429		a9 55		lda #$55	                lda #<commandLineUIBRKHandler
721	.842b		8d 02 02	sta $0202	                sta BRKV+0
722	.842e		a9 84		lda #$84	                lda #>commandLineUIBRKHandler
723	.8430		8d 03 02	sta $0203	                sta BRKV+1
724	.8433		a9 1f		lda #$1f	                lda #$10|terminalROM         ;????
725	.8435		8d 8c 02	sta $028c	                sta currentLanguageROM
726	.8438						commandLineUILoop:
727	.8438		a2 ff		ldx #$ff	                ldx #$FF
728	.843a		9a		txs		                txs
729	.843b		58		cli		                cli
730	.843c		20 f1 ec	jsr $ecf1	                jsr selectHAZEL
731	.843f		a9 2a		lda #$2a	                lda #'*'
732	.8441		20 ee ff	jsr $ffee	                jsr OSWRCH
733	.8444		20 65 84	jsr $8465	                jsr readCommandLine
734	.8447		90 03		bcc $844c	                bcc +                     ;taken if ESCAPE not pressed
735	.8449		4c d3 a8	jmp $a8d3	                jmp escapeError
736	.844c						+
737	.844c		a2 00		ldx #$00	                ldx #<hazel.commandLine
738	.844e		a0 dc		ldy #$dc	                ldy #>hazel.commandLine
739	.8450		20 f7 ff	jsr $fff7	                jsr OSCLI
740	.8453		80 e3		bra $8438	                bra commandLineUILoop

742	.8455						commandLineUIBRKHandler:
743	.8455		20 e7 ff	jsr $ffe7	                jsr OSNEWL
744	.8458		a0 00		ldy #$00	                ldy #$00
745	.845a		20 74 e7	jsr $e774	                jsr printBRKMessage
746	.845d		20 e7 ff	jsr $ffe7	                jsr OSNEWL
747	.8460		80 c7		bra $8429	                bra commandLineUI

749	.8462						badCommandError869A:
750	.8462		4c 20 f9	jmp $f920	                jmp badCommandError

752	.8465						readCommandLine:
753	.8465		a9 00		lda #$00	                lda #$00
754	.8467		a2 24		ldx #$24	                ldx #<commandLineUIOSWORD0Parameters
755	.8469		a0 84		ldy #$84	                ldy #>commandLineUIOSWORD0Parameters
756	.846b		4c f1 ff	jmp $fff1	                jmp OSWORD

758							;-------------------------------------------------------------------------
759							;
760							; *ROMS [MasRef C.5-10]
761							;
762	.846e						starROMS: .proc
763	.846e		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
764	.8471		d0 ef		bne $8462	                bne badCommandError869A
765	.8473		a0 0f		ldy #$0f	                ldy #$0F
766	.8475						printROMsLoop:
775	.8475		98		tya		                tya
776	.8476		aa		tax		                tax
777	.8477		5a		phy		                phy
778	.8478		20 be f9	jsr $f9be	                jsr isBankROM
779	.847b		b0 0a		bcs $8487	                bcs L86D2
780	.847d		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
781	>8480		52 4f 4d 20 00			                .text "ROM ",0
782	.8485		80 08		bra $848f	                bra L86DA
783	.8487						L86D2:
784	.8487		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
785	>848a		52 41 4d 20 00			                .text "RAM ",0
786	.848f						L86DA:
787	.848f		7a		ply		                ply
788	.8490		98		tya		                tya
790	.8491		20 b5 a8	jsr $a8b5	                jsr printHexDigit            ;print ROM slot
791	.8494		20 28 9f	jsr $9f28	                jsr printSpace
792	.8497		a9 09		lda #$09	                lda #<sidewaysROMName
793	.8499		85 f6		sta $f6		                sta $F6
794	.849b		a9 80		lda #$80	                lda #>sidewaysROMName
795	.849d		85 f7		sta $f7		                sta $F7
799	.849f		20 52 e5	jsr $e552	                jsr isROMValidThenSelectTerminalROM
803	.84a2		90 49		bcc $84ed	                bcc invalidROM
805	.84a4		b9 a1 02	lda $02a1,y	                lda romInformationTable,y
806	.84a7		3a		dec a		                dec a
807	.84a8		f0 43		beq $84ed	                beq invalidROM
809	.84aa						printROMNameLoop:
810	.84aa		20 a0 f3	jsr $f3a0	                jsr osrdscEntryPoint     ;read name byte
811	.84ad		c9 20		cmp #$20	                cmp #' '
812	.84af		90 0f		bcc $84c0	                bcc printROMVersion ;taken if non-printable char, including the terminating 0
813	.84b1		c9 7f		cmp #$7f	                cmp #127
814	.84b3		b0 38		bcs $84ed	                bcs invalidROM  ;taken if bad (bit 7 set) char in name
815	.84b5		20 ee ff	jsr $ffee	                jsr OSWRCH
816	.84b8		e6 f6		inc $f6		                inc $F6
817	.84ba		24 f6		bit $f6		                bit $F6
818	.84bc		50 ec		bvc $84aa	                bvc printROMNameLoop         ;taken if address<$8040
819	.84be		80 2d		bra $84ed	                bra invalidROM               ;taken if name too long

821	.84c0						printROMVersion:
822	.84c0		aa		tax		                tax               ;Z=1 if final char was the expected 0
823	.84c1		d0 2a		bne $84ed	                bne invalidROM    ;taken if bad (control) char in name
824	.84c3		a9 08		lda #$08	                lda #<sidewaysROMVersion
825	.84c5		85 f6		sta $f6		                sta $F6
826	.84c7		a9 80		lda #$80	                lda #>sidewaysROMVersion
827	.84c9		85 f7		sta $f7		                sta $F7
828	.84cb		20 a0 f3	jsr $f3a0	                jsr osrdscEntryPoint
829	.84ce		20 a8 a8	jsr $a8a8	                jsr printSpaceThenPrintHexByte
833	.84d1						printInsertionStatus:
834	.84d1		5a		phy		                phy
844	.84d2		20 f4 84	jsr $84f4	                jsr L873F
849	.84d5		d0 0e		bne $84e5	                bne +
850	.84d7		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
851	>84da		20 75 6e 70 6c 75 67 67		                .text " unplugged",0
	>84e2		65 64 00
857	.84e5						+
868	.84e5		7a		ply		                ply
869	.84e6		20 e7 ff	jsr $ffe7	                jsr OSNEWL
870	.84e9		88		dey		                dey
875	.84ea		10 89		bpl $8475	                bpl printROMsLoop
876	.84ec		60		rts		                rts

879	.84ed						invalidROM:
880	.84ed		a9 3f		lda #$3f	                lda #'?'
881	.84ef		20 ee ff	jsr $ffee	                jsr OSWRCH
885	.84f2		80 dd		bra $84d1	                bra printInsertionStatus

904							                .endproc

906							;-------------------------------------------------------------------------

909	.84f4						L873F:
910	.84f4		20 80 e9	jsr $e980	                jsr getROMInsertedFlagRTCAddressAndMask
911	.84f7		85 b0		sta $b0		                sta starROMSWorkspace.insertedFlagMask
912	.84f9		20 a3 96	jsr $96a3	                jsr readRTCByte
913	.84fc		25 b0		and $b0		                and starROMSWorkspace.insertedFlagMask
914	.84fe		60		rts		                rts

917							;-------------------------------------------------------------------------
918							;
919							; *INSERT [MasRef C.5-8]
920							;
921	.84ff						starINSERT:
922	.84ff		38		sec		                sec
923	.8500		80 01		bra $8503	                bra starINSERTOrStarUNPLUG

925							;-------------------------------------------------------------------------
926							;
927							; *UNPLUG [MasRef C.5-13]
928							;
929	.8502						starUNPLUG:
930	.8502		18		clc		                clc
931	.8503						starINSERTOrStarUNPLUG:
932	.8503		08		php		                php
933	.8504		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
934	.8507		20 20 87	jsr $8720	                jsr parseSingle4BitNumberFromCommandLine
935	.850a		a8		tay		                tay                          ;Y=ROM number
936	.850b		20 80 e9	jsr $e980	                jsr getROMInsertedFlagRTCAddressAndMask
937	.850e		48		pha		                pha
938	.850f		20 a3 96	jsr $96a3	                jsr readRTCByte
939	.8512		84 b0		sty $b0		                sty starROMSWorkspace.insertedFlagMask
940	.8514		68		pla		                pla
941	.8515		28		plp		                plp
942	.8516		90 04		bcc $851c	                bcc unplug                   ;taken if it's *UNPLUG

944							                ; it's *INSERT
945	.8518		05 b0		ora $b0		                ora starROMSWorkspace.insertedFlagMask
946	.851a		80 04		bra $8520	                bra +
947	.851c						unplug:
948	.851c		49 ff		eor #$ff	                eor #$FF
949	.851e		25 b0		and $b0		                and starROMSWorkspace.insertedFlagMask
950	.8520						+
951	.8520		a8		tay		                tay
952	.8521		4c d0 96	jmp $96d0	                jmp writeRTCByte

954							;-------------------------------------------------------------------------
955							;
956							; *TIME [MasRef C.5-12]
957							;
958	.8524						starTIME:
959	.8524		9c 00 dc	stz $dc00	                stz hazel.commandLine
960	.8527		a2 00		ldx #$00	                ldx #<hazel.commandLine
961	.8529		a0 dc		ldy #$dc	                ldy #>hazel.commandLine
962	.852b		a9 0e		lda #$0e	                lda #$0E
963	.852d		20 f1 ff	jsr $fff1	                jsr OSWORD
964	.8530		a2 e7		ldx #$e7	                ldx #256-size(ClockStringFormat)
965	.8532						L8752:
966	.8532		bd 19 db	lda $db19,x	                lda hazel.commandLine-(256-size(ClockStringFormat)),x
967	.8535		20 e3 ff	jsr $ffe3	                jsr OSASCI
968	.8538		e8		inx		                inx
969	.8539		d0 f7		bne $8532	                bne L8752
970	.853b		60		rts		                rts

972							;-------------------------------------------------------------------------

975							                .include "configure_table_driven.s65"

:8	;******  Processing file: src/configure_table_driven.s65

1							Sbyte2: .macro value,value350
7							                .endmacro

9							                ; Metadata layout

11							                ; +0

13							                ;   7   6   5   4   3   2   1   0
14							                ; +---+---+---+---+---+---+---+---+
15							                ; |X  |V0 |MaskCount  |Value      |
16							                ; +---+---+---+---+---+---+---+---+

18							                ; X is unused - it's generally set in the configure
19							                ; table, so that the names can be terminated by a byte
20							                ; with bit 7 set.
21							                ;
22							                ; If V0 is clear, this field is actually the address
23							                ; of a routine.
24							                ;
25							                ; Value is the value for the bitfield when this option
26							                ; is in effect.
27							                ;
28							                ; MaskCount
29							                ;

31							                ; +1

33							                ;   7   6   5   4   3   2   1   0
34							                ; +---+---+---+---+---+---+---+---+
35							                ; |N1 |RTCByteIndex   |ShiftCount |
36							                ; +---+---+---+---+---+---+---+---+
37							                ;
38							                ; N1 is tested when printing stuff. Search for "N1 set"

40							                ; The RTC byte indexes in the table are actually
41							                ; offset.
43							                ; The possible range is 1-16. A bit wasteful as bytes
44							                ; 1-4 are set by ANFS. Though perhaps the original
45							                ; intention was for the MOS to manage them.
46	=15						metadataRTCByteIndexOffset=cmosBytesOffset+CMOSBytes.fileServerStationNumber

52							                ; Entry conditions to the routine:
53							                ;
54							                ; V=1 to print value then newline

56							                ; C=1 to print help string

58							                ; Z=1 to reset value (not sure what the conditions are
59							                ; for this)
60							itemWithAddress: .macro name,addr
65							                .endmacro

67							countLS0s: .function value
87							                .endfunction n

89							;-------------------------------------------------------------------------

91							itemMaskInfo: .macro value
97							                .endmacro

99							;-------------------------------------------------------------------------

108							; TODO: the naming and the constants need some work here! rtcByteIndex
109							; is an index into CMOS RAM. This stuff is all super unclear.

111							itemMetadata: .macro topMask,rtcByteIndex,mask,matchValue,n1
133							                .endmacro

135							itemWithMetadata: .macro name,rtcByteIndex,mask,matchValue,n1
139							                .endmacro

141							;-------------------------------------------------------------------------

143	.853c						configureTable: .block
61	>853c		2e				                .text "."
62	.853d						metadata:
167:3	>853d		87				                .byte >printConfigureOrStatusHeader-1
168	>853e		89				                .byte <printConfigureOrStatusHeader-1
145:8	.853f						baud:
136	>853f		42 61 75 64			                .text ("Baud")
137	.8543						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.8543						info:
92	=2						shift=countLS0s(((CMOSBytes.defaults2.serialBaudRateIndexMask<<CMOSBytes.defaults2.serialBaudRateIndexShift)))
93	=7						unshiftedMask=(((CMOSBytes.defaults2.serialBaudRateIndexMask<<CMOSBytes.defaults2.serialBaudRateIndexShift)))>>shift
95	=3						maskWidth=countLS0s(~unshiftedMask)

131	>8543		d0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>8544		f2				                .byte (((true))?$80:$00)|(((CMOSBytes.defaults2)-(indexOffset-cmosBytesOffset))<<3)|info.shift
146	.8545						boot:
136	>8545		42 6f 6f 74			                .text ("Boot")
137	.8549						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.8549						info:
92	=4						shift=countLS0s(((CMOSBytes.defaults3.autoBootMask)))
93	=1						unshiftedMask=(((CMOSBytes.defaults3.autoBootMask)))>>shift
95	=1						maskWidth=countLS0s(~unshiftedMask)

131	>8549		c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
132	>854a		7c				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(indexOffset-cmosBytesOffset))<<3)|info.shift
136	>854b		43 61 70 73			                .text ("Caps")
137	.854f						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.854f						info:
92	=3						shift=countLS0s((((CMOSBytes.defaults1.capsLockMask|CMOSBytes.defaults1.shiftLockMask|CMOSBytes.defaults1.noLockMask))))
93	=7						unshiftedMask=((((CMOSBytes.defaults1.capsLockMask|CMOSBytes.defaults1.shiftLockMask|CMOSBytes.defaults1.noLockMask))))>>shift
95	=3						maskWidth=countLS0s(~unshiftedMask)

131	>854f		d4				                .byte ($c0)|((info.maskWidth-1)<<3)|((4))
132	>8550		53				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(indexOffset-cmosBytesOffset))<<3)|info.shift
151	.8551						data:
136	>8551		44 61 74 61			                .text ("Data")
137	.8555						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.8555						info:
92	=5						shift=countLS0s(((CMOSBytes.defaults3.serialDataFormatMask<<CMOSBytes.defaults3.serialDataFormatShift)))
93	=7						unshiftedMask=(((CMOSBytes.defaults3.serialDataFormatMask<<CMOSBytes.defaults3.serialDataFormatShift)))>>shift
95	=3						maskWidth=countLS0s(~unshiftedMask)

131	>8555		d0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>8556		fd				                .byte (((true))?$80:$00)|(((CMOSBytes.defaults3)-(indexOffset-cmosBytesOffset))<<3)|info.shift
136	>8557		44 65 6c 61 79			                .text ("Delay")
137	.855c						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.855c						info:
92	=0						shift=countLS0s((($ff)))
93	=$ff						unshiftedMask=((($ff)))>>shift
95	=8						maskWidth=countLS0s(~unshiftedMask)

131	>855c		f8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>855d		d8				                .byte (((true))?$80:$00)|(((CMOSBytes.keyboardAutoRepeatDelay)-(indexOffset-cmosBytesOffset))<<3)|info.shift
153	.855e						dir:
136	>855e		44 69 72			                .text ("Dir")
137	.8561						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.8561						info:
92	=6						shift=countLS0s(((CMOSBytes.defaults1.adfsLoadDirMask)))
93	=1						unshiftedMask=(((CMOSBytes.defaults1.adfsLoadDirMask)))>>shift
95	=1						maskWidth=countLS0s(~unshiftedMask)

131	>8561		c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>8562		56				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(indexOffset-cmosBytesOffset))<<3)|info.shift
154	=$8560						lastDirChar=dir.metadata-1
156	.8563						extube:
136	>8563		45 78 54 75 62 65		                .text ("ExTube")
137	.8569						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.8569						info:
92	=2						shift=countLS0s(((CMOSBytes.defaults3.extTubeMask)))
93	=1						unshiftedMask=(((CMOSBytes.defaults3.extTubeMask)))>>shift
95	=1						maskWidth=countLS0s(~unshiftedMask)

131	>8569		c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
132	>856a		7a				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(indexOffset-cmosBytesOffset))<<3)|info.shift
157	=$8564						lastExChar=extube+1
136	>856b		46 64 72 69 76 65		                .text ("Fdrive")
137	.8571						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.8571						info:
92	=0						shift=countLS0s(((CMOSBytes.defaults1.fdriveMask)))
93	=7						unshiftedMask=(((CMOSBytes.defaults1.fdriveMask)))>>shift
95	=3						maskWidth=countLS0s(~unshiftedMask)

131	>8571		d0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>8572		d0				                .byte (((true))?$80:$00)|(((CMOSBytes.defaults1)-(indexOffset-cmosBytesOffset))<<3)|info.shift
160	.8573						file:
136	>8573		46 69 6c 65			                .text ("File")
137	.8577						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.8577						info:
92	=0						shift=countLS0s((($f<<CMOSBytes.defaultROMs.fsShift)))
93	=$f						unshiftedMask=((($f<<CMOSBytes.defaultROMs.fsShift)))>>shift
95	=4						maskWidth=countLS0s(~unshiftedMask)

131	>8577		d8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>8578		a0				                .byte (((true))?$80:$00)|(((CMOSBytes.defaultROMs)-(indexOffset-cmosBytesOffset))<<3)|info.shift
136	>8579		46 6c 6f 70 70 79		                .text ("Floppy")
137	.857f						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.857f						info:
92	=7						shift=countLS0s(((CMOSBytes.defaults1.floppyDrive)))
93	=1						unshiftedMask=(((CMOSBytes.defaults1.floppyDrive)))>>shift
95	=1						maskWidth=countLS0s(~unshiftedMask)

131	>857f		c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
132	>8580		57				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(indexOffset-cmosBytesOffset))<<3)|info.shift
136	>8581		48 61 72 64			                .text ("Hard")
137	.8585						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.8585						info:
92	=7						shift=countLS0s(((CMOSBytes.defaults1.floppyDrive)))
93	=1						unshiftedMask=(((CMOSBytes.defaults1.floppyDrive)))>>shift
95	=1						maskWidth=countLS0s(~unshiftedMask)

131	>8585		c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>8586		57				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(indexOffset-cmosBytesOffset))<<3)|info.shift
167	.8587						ignore:
61	>8587		49 67 6e 6f 72 65		                .text "Ignore"
62	.858d						metadata:
167:3	>858d		86				                .byte >handlePrinterIgnoreChar-1
168	>858e		df				                .byte <handlePrinterIgnoreChar-1
168:8							                .if includeTubeSupport
169	.858f						intube:
136	>858f		49 6e 54 75 62 65		                .text ("InTube")
137	.8595						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.8595						info:
92	=2						shift=countLS0s(((CMOSBytes.defaults3.extTubeMask)))
93	=1						unshiftedMask=(((CMOSBytes.defaults3.extTubeMask)))>>shift
95	=1						maskWidth=countLS0s(~unshiftedMask)

131	>8595		c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>8596		7a				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(indexOffset-cmosBytesOffset))<<3)|info.shift
170	=$8590						lastInChar=intube+1
172	.8597						lang:
136	>8597		4c 61 6e 67			                .text ("Lang")
137	.859b						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.859b						info:
92	=4						shift=countLS0s((($f<<CMOSBytes.defaultROMs.languageShift)))
93	=$f						unshiftedMask=((($f<<CMOSBytes.defaultROMs.languageShift)))>>shift
95	=4						maskWidth=countLS0s(~unshiftedMask)

131	>859b		d8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>859c		a4				                .byte (((true))?$80:$00)|(((CMOSBytes.defaultROMs)-(indexOffset-cmosBytesOffset))<<3)|info.shift
136	>859d		4c 6f 75 64			                .text ("Loud")
137	.85a1						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.85a1						info:
92	=1						shift=countLS0s(((CMOSBytes.defaults3.loudMask)))
93	=1						unshiftedMask=(((CMOSBytes.defaults3.loudMask)))>>shift
95	=1						maskWidth=countLS0s(~unshiftedMask)

131	>85a1		c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
132	>85a2		79				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(indexOffset-cmosBytesOffset))<<3)|info.shift
174	.85a3						mode:
136	>85a3		4d 6f 64 65			                .text ("Mode")
137	.85a7						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.85a7						info:
92	=0						shift=countLS0s(((CMOSBytes.defaults0.modeMask|CMOSBytes.defaults0.shadowMask)))
93	=15						unshiftedMask=(((CMOSBytes.defaults0.modeMask|CMOSBytes.defaults0.shadowMask)))>>shift
95	=4						maskWidth=countLS0s(~unshiftedMask)

131	>85a7		d8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>85a8		c8				                .byte (((true))?$80:$00)|(((CMOSBytes.defaults0)-(indexOffset-cmosBytesOffset))<<3)|info.shift
136	>85a9		4e 6f 42 6f 6f 74		                .text ("NoBoot")
137	.85af						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.85af						info:
92	=4						shift=countLS0s(((CMOSBytes.defaults3.autoBootMask)))
93	=1						unshiftedMask=(((CMOSBytes.defaults3.autoBootMask)))>>shift
95	=1						maskWidth=countLS0s(~unshiftedMask)

131	>85af		c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>85b0		7c				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(indexOffset-cmosBytesOffset))<<3)|info.shift
136	>85b1		4e 6f 43 61 70 73		                .text ("NoCaps")
137	.85b7						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.85b7						info:
92	=3						shift=countLS0s(((CMOSBytes.defaults1.shiftLockMask|CMOSBytes.defaults1.noLockMask|CMOSBytes.defaults1.capsLockMask)))
93	=7						unshiftedMask=(((CMOSBytes.defaults1.shiftLockMask|CMOSBytes.defaults1.noLockMask|CMOSBytes.defaults1.capsLockMask)))>>shift
95	=3						maskWidth=countLS0s(~unshiftedMask)

131	>85b7		d2				                .byte ($c0)|((info.maskWidth-1)<<3)|((2))
132	>85b8		53				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(indexOffset-cmosBytesOffset))<<3)|info.shift
177	.85b9						noDir:
136	>85b9		4e 6f 44 69 72			                .text ("NoDir")
137	.85be						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.85be						info:
92	=6						shift=countLS0s(((CMOSBytes.defaults1.adfsLoadDirMask)))
93	=1						unshiftedMask=(((CMOSBytes.defaults1.adfsLoadDirMask)))>>shift
95	=1						maskWidth=countLS0s(~unshiftedMask)

131	>85be		c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
132	>85bf		56				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(indexOffset-cmosBytesOffset))<<3)|info.shift
178	=$85bd						lastNoDirChar:=noDir.metadata-1
136	>85c0		4e 6f 53 63 72 6f 6c 6c		                .text ("NoScroll")
137	.85c8						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.85c8						info:
92	=3						shift=countLS0s(((CMOSBytes.defaults3.protectedScrollingMask)))
93	=1						unshiftedMask=(((CMOSBytes.defaults3.protectedScrollingMask)))>>shift
95	=1						maskWidth=countLS0s(~unshiftedMask)

131	>85c8		c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
132	>85c9		7b				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(indexOffset-cmosBytesOffset))<<3)|info.shift
136	>85ca		4e 6f 54 75 62 65		                .text ("NoTube")
137	.85d0						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.85d0						info:
92	=0						shift=countLS0s(((CMOSBytes.defaults2.tubeOnMask)))
93	=1						unshiftedMask=(((CMOSBytes.defaults2.tubeOnMask)))>>shift
95	=1						maskWidth=countLS0s(~unshiftedMask)

131	>85d0		c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>85d1		70				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults2)-(indexOffset-cmosBytesOffset))<<3)|info.shift
186	.85d2						print:
136	>85d2		50 72 69 6e 74			                .text ("Print")
137	.85d7						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.85d7						info:
92	=5						shift=countLS0s(((CMOSBytes.defaults2.fx5SettingMask<<CMOSBytes.defaults2.fx5SettingShift)))
93	=7						unshiftedMask=(((CMOSBytes.defaults2.fx5SettingMask<<CMOSBytes.defaults2.fx5SettingShift)))>>shift
95	=3						maskWidth=countLS0s(~unshiftedMask)

131	>85d7		d0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>85d8		f5				                .byte (((true))?$80:$00)|(((CMOSBytes.defaults2)-(indexOffset-cmosBytesOffset))<<3)|info.shift
136	>85d9		51 75 69 65 74			                .text ("Quiet")
137	.85de						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.85de						info:
92	=1						shift=countLS0s(((CMOSBytes.defaults3.loudMask)))
93	=1						unshiftedMask=(((CMOSBytes.defaults3.loudMask)))>>shift
95	=1						maskWidth=countLS0s(~unshiftedMask)

131	>85de		c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>85df		79				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(indexOffset-cmosBytesOffset))<<3)|info.shift
136	>85e0		52 65 70 65 61 74		                .text ("Repeat")
137	.85e6						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.85e6						info:
92	=0						shift=countLS0s((($ff)))
93	=$ff						unshiftedMask=((($ff)))>>shift
95	=8						maskWidth=countLS0s(~unshiftedMask)

131	>85e6		f8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>85e7		e0				                .byte (((true))?$80:$00)|(((CMOSBytes.keyboardAutoRepeatRate)-(indexOffset-cmosBytesOffset))<<3)|info.shift
136	>85e8		53 63 72 6f 6c 6c		                .text ("Scroll")
137	.85ee						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.85ee						info:
92	=3						shift=countLS0s(((CMOSBytes.defaults3.protectedScrollingMask)))
93	=1						unshiftedMask=(((CMOSBytes.defaults3.protectedScrollingMask)))>>shift
95	=1						maskWidth=countLS0s(~unshiftedMask)

131	>85ee		c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
132	>85ef		7b				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(indexOffset-cmosBytesOffset))<<3)|info.shift
190	.85f0						shCaps:
136	>85f0		53 68 43 61 70 73		                .text ("ShCaps")
137	.85f6						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.85f6						info:
92	=3						shift=countLS0s(((CMOSBytes.defaults1.shiftLockMask|CMOSBytes.defaults1.noLockMask|CMOSBytes.defaults1.capsLockMask)))
93	=7						unshiftedMask=(((CMOSBytes.defaults1.shiftLockMask|CMOSBytes.defaults1.noLockMask|CMOSBytes.defaults1.capsLockMask)))>>shift
95	=3						maskWidth=countLS0s(~unshiftedMask)

131	>85f6		d1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
132	>85f7		53				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(indexOffset-cmosBytesOffset))<<3)|info.shift
191	=$85f1						lastShChar=shCaps+1
136	>85f8		54 75 62 65			                .text ("Tube")
137	.85fc						metadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.85fc						info:
92	=0						shift=countLS0s(((CMOSBytes.defaults2.tubeOnMask)))
93	=1						unshiftedMask=(((CMOSBytes.defaults2.tubeOnMask)))>>shift
95	=1						maskWidth=countLS0s(~unshiftedMask)

131	>85fc		c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
132	>85fd		70				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults2)-(indexOffset-cmosBytesOffset))<<3)|info.shift
61	>85fe		54 56				                .text "TV"
62	.8600						metadata:
167:3	>8600		87				                .byte >handleTV-1
168	>8601		31				                .byte <handleTV-1
212:8							                ; Terminator for data-driven table
213	>8602		00				                .byte 0

215							                ; Metadata entries referred to by routines start here.
216							                ; These aren't associated with any name; code loads
217							                ; the offset so that it can reuse the generic metadata
218							                ; handling routines.
219	.8603						printerIgnoreCharMetadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.8603						info:
92	=1						shift=countLS0s((CMOSBytes.defaults2.usePrinterIgnoreCharMask))
93	=1						unshiftedMask=((CMOSBytes.defaults2.usePrinterIgnoreCharMask))>>shift
95	=1						maskWidth=countLS0s(~unshiftedMask)

131	>8603		00				                .byte ($00)|((info.maskWidth-1)<<3)|(0)
132	>8604		71				                .byte ((false)?$80:$00)|((CMOSBytes.defaults2-(indexOffset-cmosBytesOffset))<<3)|info.shift
226	.8605						tvMetadata:

115	=15						indexOffset:=metadataRTCByteIndexOffset

129	.8605						info:
92	=4						shift=countLS0s((CMOSBytes.defaults0.interlaceMask|(CMOSBytes.defaults0.tvMask<<CMOSBytes.defaults0.tvShift)))
93	=15						unshiftedMask=((CMOSBytes.defaults0.interlaceMask|(CMOSBytes.defaults0.tvMask<<CMOSBytes.defaults0.tvShift)))>>shift
95	=4						maskWidth=countLS0s(~unshiftedMask)

131	>8605		18				                .byte ($00)|((info.maskWidth-1)<<3)|(0)
132	>8606		4c				                .byte ((false)?$80:$00)|((CMOSBytes.defaults0-(indexOffset-cmosBytesOffset))<<3)|info.shift

232							                ; Text snippets.
233	.8607						ectory:
234	>8607		65 63 74 6f 72 79 ff		                .text "ectory",$ff
236	.860e						ternal:
237	>860e		74 65 72 6e 61 6c ff		                .text "ternal",$ff
239	.8615						ift:
240	>8615		69 66 74 ff			                .text "ift",$ff

246							                ; Configure table ends. TODO: rearrange .endblock so
247							                ; this is clearer - and follow through

249							;-------------------------------------------------------------------------

251							;                 .if refreshVersion
252							;                 .if len(highIndexItemMetadataOffsetsList)>0
253							; highIndexItemMetadataOffsets:
254							;                 .byte highIndexItemMetadataOffsetsList
255							;                 .endif
256							;                 .endif

258							;-------------------------------------------------------------------------

260	=[]						_:=[]
261	=[($8560,$8607)]				_..=[(lastDirChar,ectory)]
262	=[($8560,$8607),($85bd,$8607)]			_..=[(lastNoDirChar,ectory)]
264	=[($8560,$8607),($85bd,$8607),($8564,$860e)]	_..=[(lastExChar,ternal)]
265	=[($8560,$8607),($85bd,$8607),($8564,$860e),($8590,$860e)]
							_..=[(lastInChar,ternal)]
267	=[($8560,$8607),($85bd,$8607),($8564,$860e),($8590,$860e),($85f1,$8615)]
							_..=[(lastShChar,ift)]
272	=[($8560,$8607),($85bd,$8607),($8564,$860e),($8590,$860e),($85f1,$8615)]
							textSnippets=_

274	.8619						textSnippetInsertPointOffsets:
275							                .for _i=0,_i<len(textSnippets),_i+=1
276	>8619		24				                .byte textSnippets[_i][0]-configureTable
276	>861a		81				                .byte textSnippets[_i][0]-configureTable
276	>861b		28				                .byte textSnippets[_i][0]-configureTable
276	>861c		54				                .byte textSnippets[_i][0]-configureTable
276	>861d		b5				                .byte textSnippets[_i][0]-configureTable
277							                .endfor

279	.861e						textSnippetOffsets:
280							                .for _i=0,_i<len(textSnippets),_i+=1
281	>861e		cb				                .byte textSnippets[_i][1]-configureTable
281	>861f		cb				                .byte textSnippets[_i][1]-configureTable
281	>8620		d2				                .byte textSnippets[_i][1]-configureTable
281	>8621		d2				                .byte textSnippets[_i][1]-configureTable
281	>8622		d9				                .byte textSnippets[_i][1]-configureTable
282							                .endfor

284							                .endblock

286							;-------------------------------------------------------------------------

288	.8623						starCONFIGUREOrStarSTATUS:
289	.8623		0a		asl a		                asl a
290	.8624		69 80		adc #$80	                adc #$80

292							                ; *STATUS: A=1 V=1 C=1
293							                ; *CONFIGURE: A=0 V=0 C=1
294	.8626		08		php		                php
295	.8627		a9 3c		lda #$3c	                lda #<configureTable
296	.8629		85 b0		sta $b0		                sta oscliWorkspace.tablePtr+0
297	.862b		a9 85		lda #$85	                lda #>configureTable
298	.862d		85 b1		sta $b1		                sta oscliWorkspace.tablePtr+1
299	.862f		a2 ff		ldx #$ff	                ldx #$FF
300	.8631		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
301	.8634		d0 03		bne $8639	                bne L886C
302	.8636		20 9e 88	jsr $889e	                jsr fetchCommandTableByte

304	.8639						L886C:
305	.8639		2c 62 e3	bit $e362	                bit valueFF ; V=1 to indicate 2-byte metadata
306	.863c		20 5f 88	jsr $885f	                jsr findCommand
307	.863f		b0 07		bcs $8648	                bcs foundCONFIGOrSTATUSTopic
308	.8641		28		plp		                plp
309	.8642		20 41 89	jsr $8941	                jsr unknownCONFIGOrStatus
310	.8645		d0 71		bne $86b8	                bne jmpBadCommandError8B68
311	.8647		60		rts		                rts

313							;-------------------------------------------------------------------------

315	.8648						foundCONFIGOrSTATUSTopic:
316	.8648		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
317	.864b		28		plp		                plp
318	.864c		50 03		bvc $8651	                bvc L8884
319	.864e		20 2a 87	jsr $872a	                jsr ensureCommandLineTailEmpty

321							;-------------------------------------------------------------------------

323	.8651						L8884:
324	.8651		bd 3c 85	lda $853c,x	                lda configureTable,x
325	.8654		89 40		bit #$40	                bit #$40
326	.8656		d0 0a		bne $8662	                bne L8895       ;taken if V0 clear
327	.8658		48		pha		                pha
328	.8659		bd 3d 85	lda $853d,x	                lda configureTable+1,x
329	.865c		48		pha		                pha
330	.865d		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
331	.865f		49 0d		eor #$0d	                eor #$D         ;A=0 Z=1 if command line tail is empty
332	.8661		60		rts		                rts             ;call routine, in effect

334							;-------------------------------------------------------------------------

336	.8662						L8895:
337	.8662		29 07		and #$07	                and #7
339	.8664		de 3d 85	dec $853d,x	                dec configureTable+1,x
343	.8667		70 3d		bvs $86a6	                bvs L88D9
344	.8669		b0 30		bcs $869b	                bcs print1NumberHelp
345	.866b		30 05		bmi $8672	                bmi L88A5
346	.866d		20 2a 87	jsr $872a	                jsr ensureCommandLineTailEmpty
347	.8670		80 26		bra $8698	                bra jmpSetConfigurationBitfield

349							;-------------------------------------------------------------------------

351	.8672						L88A5:
352	.8672		da		phx		                phx
353	.8673		20 82 87	jsr $8782	                jsr L89B5
354	.8676		fa		plx		                plx
355	.8677		e0 07		cpx #$07	                cpx #7
356	.8679		d0 06		bne $8681	                bne L88B4
357	.867b		a8		tay		                tay
358	.867c		d0 02		bne $8680	                bne L88B3
359	.867e		a9 07		lda #$07	                lda #7

361	.8680						L88B3:
362	.8680		3a		dec a		                dec a

364	.8681						L88B4:
365	.8681		e0 6b		cpx #$6b	                cpx #configureTable.mode.metadata-configureTable
366	.8683		d0 09		bne $868e	                bne L88C1
367	.8685		89 78		bit #$78	                bit #$78
368	.8687		d0 2f		bne $86b8	                bne jmpBadCommandError8B68
369	.8689		a8		tay		                tay
370	.868a		10 02		bpl $868e	                bpl L88C1
371	.868c		49 88		eor #$88	                eor #$88

373	.868e						L88C1:
374	.868e		20 5d 89	jsr $895d	                jsr getMaskCount
375	.8691		d9 69 89	cmp $8969,y	                cmp maskByBitCount,y
376	.8694		f0 02		beq $8698	                beq jmpSetConfigurationBitfield
377	.8696		b0 20		bcs $86b8	                bcs jmpBadCommandError8B68

380	.8698						jmpSetConfigurationBitfield:
381	.8698		4c bb 86	jmp $86bb	                jmp setConfigurationBitfield

383							;-------------------------------------------------------------------------

385	.869b						print1NumberHelp:
386	.869b		10 08		bpl $86a5	                bpl L88D8
387	.869d						print1NumberHelp2: ; haven't quite figured out the logic for this yet
388	.869d		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
389	>86a0		3c 44 3e 0d 00			                .text "<D>",13,0
390	.86a5						L88D8:
391	.86a5		60		rts		                rts

393							;-------------------------------------------------------------------------

395	.86a6						L88D9:
396	.86a6		30 07		bmi $86af	                bmi printDecimalConfigurationByte
397	.86a8		bd 3d 85	lda $853d,x	                lda configureTable+1,x
398	.86ab		18		clc		                clc
399	.86ac		4c aa 88	jmp $88aa	                jmp L8ADA

401							;-------------------------------------------------------------------------

403	.86af						printDecimalConfigurationByte:
404	.86af		20 34 88	jsr $8834	                jsr readConfigurationByte

406	.86b2						printDecimalByteAThenNewLine:
407	.86b2		20 7d 89	jsr $897d	                jsr printDecimalByteA
408	.86b5		4c e7 ff	jmp $ffe7	                jmp OSNEWL

410							;-------------------------------------------------------------------------

412	.86b8						jmpBadCommandError8B68:
413	.86b8		4c 20 f9	jmp $f920	                jmp badCommandError

415							;-------------------------------------------------------------------------
416							;
417							; Insert value into bitfield for an item and write the value to NVRAM.
418							;
419							; Entry:
420							;
421							; A = value to insert
422							; X = offset into configure table for item's metadata
423							;
424							; Exit:
425							;
426							; NVRAM byte updated appropriately

428	.86bb						setConfigurationBitfield: .block;L88EE: .block
429	.86bb		85 b0		sta $b0		                sta $B0         ;save value
430	.86bd		20 5d 89	jsr $895d	                jsr getMaskCount ; get mask bit count in Y
431	.86c0		b9 69 89	lda $8969,y	                lda maskByBitCount,y ; get appropriate bit mask
432	.86c3		20 54 89	jsr $8954	                jsr getShiftCount    ; get shift count in Y
433	.86c6		80 03		bra $86cb	                bra shift            ; start shifting as required
434	.86c8						shiftLoop:
435	.86c8		0a		asl a		                asl a           ;shift mask
436	.86c9		06 b0		asl $b0		                asl $B0         ;shift value

438	.86cb						shift:
439	.86cb		88		dey		                dey
440	.86cc		10 fa		bpl $86c8	                bpl shiftLoop

442							                ; A = shifted mask, ?$B0=shifted value
443	.86ce		85 b1		sta $b1		                sta $B1         ;store shifted mask
444	.86d0		20 48 89	jsr $8948	                jsr getRTCByteIndex ; get actual RTC byte index in X
445	.86d3		20 a3 96	jsr $96a3	                jsr readRTCByte ;get previous value
446	.86d6		05 b1		ora $b1		                ora $B1         ;set all field's bits to 1
447	.86d8		45 b1		eor $b1		                eor $B1         ;set all field's bits to 0
448	.86da		05 b0		ora $b0		                ora $B0         ;insert field's value
449	.86dc		a8		tay		                tay             ;Y=byte to write
450							                .endblock

452	.86dd						jmpWriteRTCByte:
453	.86dd		4c d0 96	jmp $96d0	                jmp writeRTCByte

455							;-------------------------------------------------------------------------

457	.86e0						handlePrinterIgnoreChar:
458	.86e0		70 18		bvs $86fa	                bvs printDefaultPrinterIgnoreChar ;taken if *STATUS
459	.86e2		b0 31		bcs $8715	                bcs print1OptionalNumberHelp
460	.86e4		f0 0e		beq $86f4	                beq L8927
461	.86e6		20 82 87	jsr $8782	                jsr L89B5
462	.86e9		da		phx		                phx
463	.86ea		a9 00		lda #$00	                lda #0
464	.86ec		20 f6 86	jsr $86f6	                jsr L8929
465	.86ef		7a		ply		                ply
466	.86f0		a2 1c		ldx #$1c	                ldx #CMOSBytes.printerIgnoreChar+cmosBytesOffset
467	.86f2		80 e9		bra $86dd	                bra jmpWriteRTCByte

469							;-------------------------------------------------------------------------

471	.86f4						L8927:
472	.86f4		a9 01		lda #$01	                lda #1
473	.86f6						L8929:
474	.86f6		a2 c7		ldx #$c7	                ldx #configureTable.printerIgnoreCharMetadata-configureTable
475	.86f8						L892B:
476	.86f8		80 9e		bra $8698	                bra jmpSetConfigurationBitfield

478							;-------------------------------------------------------------------------

480	.86fa						printDefaultPrinterIgnoreChar:
481	.86fa		20 74 89	jsr $8974	                jsr readUsePrinterIgnoreChar
482	.86fd		90 0f		bcc $870e	                bcc gotPrinterIgnoreChar
483	.86ff		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
484	>8702		4e 6f 20 49 67 6e 6f 72		                .text "No Ignore",13,0
	>870a		65 0d 00
485	.870d		60		rts		                rts

487							;-------------------------------------------------------------------------

489	.870e						gotPrinterIgnoreChar:
490	.870e		a2 1c		ldx #$1c	                ldx #CMOSBytes.printerIgnoreChar+cmosBytesOffset
491	.8710		20 a3 96	jsr $96a3	                jsr readRTCByte
492	.8713						L8946:
493	.8713		80 9d		bra $86b2	                bra printDecimalByteAThenNewLine

495							;-------------------------------------------------------------------------

497	.8715						print1OptionalNumberHelp:
498	.8715		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
499	>8718		5b 3c 44 3e 5d 0d 00		                .text "[<D>]",13,0
500	.871f		60		rts		                rts

502							;-------------------------------------------------------------------------

504	.8720						parseSingle4BitNumberFromCommandLine:
505	.8720		20 b0 83	jsr $83b0	                jsr parseNumberFromString
506	.8723						bccBadCommandError:
507	.8723		90 93		bcc $86b8	                bcc jmpBadCommandError8B68
508	.8725		8a		txa		                txa
509	.8726		c9 10		cmp #$10	                cmp #$10
510	.8728						bcsBadCommandError:
511	.8728		b0 8e		bcs $86b8	                bcs jmpBadCommandError8B68
512	.872a						ensureCommandLineTailEmpty:
513	.872a		48		pha		                pha
514	.872b		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
515	.872e						bneBadCommandError:
516	.872e		d0 88		bne $86b8	                bne jmpBadCommandError8B68
517	.8730		68		pla		                pla
518	.8731		60		rts		                rts

520							;-------------------------------------------------------------------------

522	.8732						handleTV:
523	.8732		70 2f		bvs $8763	                bvs L8996
524	.8734		b0 3b		bcs $8771	                bcs printTVHelp
525	.8736		f0 27		beq $875f	                beq L8992
526	.8738		20 b0 83	jsr $83b0	                jsr parseNumberFromString
527	.873b		90 e6		bcc $8723	                bcc bccBadCommandError
528	.873d		e0 fc		cpx #$fc	                cpx #$FC
529	.873f		b0 04		bcs $8745	                bcs L8978
530	.8741		e0 04		cpx #$04	                cpx #4
531	.8743		b0 e3		bcs $8728	                bcs bcsBadCommandError

533	.8745						L8978:
534	.8745		8a		txa		                txa
535	.8746		0a		asl a		                asl a
536	.8747		85 b1		sta $b1		                sta $B1
537	.8749		a2 00		ldx #$00	                ldx #0
538	.874b		20 74 f2	jsr $f274	                jsr LF30A
539	.874e		f0 08		beq $8758	                beq L898B
540	.8750		20 82 87	jsr $8782	                jsr L89B5
541	.8753		c9 02		cmp #$02	                cmp #2
542	.8755		b0 d1		bcs $8728	                bcs bcsBadCommandError
543	.8757		aa		tax		                tax

545	.8758						L898B:
546	.8758		8a		txa		                txa
547	.8759		05 b1		ora $b1		                ora $B1

549	.875b						L898E:
550	.875b		a2 c9		ldx #$c9	                ldx #configureTable.tvMetadata-configureTable
551	.875d		80 99		bra $86f8	                bra L892B

553							;-------------------------------------------------------------------------

555	.875f						L8992:
556	.875f		a9 00		lda #$00	                lda #0
557	.8761		80 f8		bra $875b	                bra L898E

559							;-------------------------------------------------------------------------

561	.8763						L8996:
562	.8763		20 ac 89	jsr $89ac	                jsr readDefaultTVSettings
563	.8766		20 7c 89	jsr $897c	                jsr printDecimalByteY
564	.8769		a9 2c		lda #$2c	                lda #','
565	.876b		20 ee ff	jsr $ffee	                jsr OSWRCH
566	.876e		8a		txa		                txa
567	.876f		80 a2		bra $8713	                bra L8946

569							;-------------------------------------------------------------------------

571	.8771						printTVHelp:
572	.8771		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
573	>8774		5b 3c 44 3e 5b 2c 3c 44		                .text "[<D>[,<D>]]",13,0
	>877c		3e 5d 5d 0d 00
574	.8781		60		rts		                rts

576							;-------------------------------------------------------------------------

578	.8782						L89B5:
579	.8782		20 b0 83	jsr $83b0	                jsr parseNumberFromString
580	.8785		90 9c		bcc $8723	                bcc bccBadCommandError
581	.8787		8a		txa		                txa
582	.8788		80 a0		bra $872a	                bra ensureCommandLineTailEmpty

585							;-------------------------------------------------------------------------

587	.878a						printConfigureOrStatusHeader: .block
588	.878a		d0 a2		bne $872e	                bne bneBadCommandError
589	.878c		08		php		                php
590	.878d		5a		phy		                phy
591	.878e		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
592	>8791		43 6f 6e 66 69 67 75 72		                .text "Configuration ",0
	>8799		61 74 69 6f 6e 20 00
593	.87a0		70 0f		bvs $87b1	                bvs printStatusHeader ;taken if *STATUS
594	.87a2		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
595	>87a5		6f 70 74 69 6f 6e 73 3a		                .text "options:",13,0
	>87ad		0d 00
596	.87af		80 0c		bra $87bd	                bra printItems
597	.87b1						printStatusHeader:
598	.87b1		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
599	>87b4		73 74 61 74 75 73 3a 0d		                .text "status:",13,0
	>87bc		00
600	.87bd						printItems:
601	.87bd		38		sec		                sec
602	.87be		20 aa 88	jsr $88aa	                jsr L8ADA
603	.87c1		7a		ply		                ply
604	.87c2		28		plp		                plp
605	.87c3		08		php		                php
606	.87c4		20 41 89	jsr $8941	                jsr unknownCONFIGOrStatus
607	.87c7		28		plp		                plp
608	.87c8		70 66		bvs $8830	                bvs done        ;taken if *STATUS
609	.87ca		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
610	>87cd		57 68 65 72 65 3a 0d		                .text "Where:",13
611	>87d4		44 20 69 73 20 61 20 64		                .text "D is a decimal number, or",13
	>87dc		65 63 69 6d 61 6c 20 6e 75 6d 62 65 72 2c 20 6f
	>87ec		72 0d
612	>87ee		61 20 68 65 78 61 64 65		                .text "a hexadecimal number preceded by &",13
	>87f6		63 69 6d 61 6c 20 6e 75 6d 62 65 72 20 70 72 65
	>8806		63 65 64 65 64 20 62 79 20 26 0d
613	>8811		49 74 65 6d 73 20 77 69		                .text "Items within [ ] are optional",13
	>8819		74 68 69 6e 20 5b 20 5d 20 61 72 65 20 6f 70 74
	>8829		69 6f 6e 61 6c 0d
614	>882f		00				                .byte 0
615	.8830						done:
616	.8830		60		rts		                rts
617							                .endblock

619							;-------------------------------------------------------------------------
620							;
621							; Read configuration byte, given offset of metadata in the configure
622							; table.
623							;
624							; Entry:
625							;
626							; X = offset of metadata in the configure table
627							;
628							; Exit:
629							;
630							; A = value read
631							;
632							; Preserves: X/Y/P

635	.8831						clearTSTAndReadConfigurationByte:
636	.8831		20 53 f3	jsr $f353	                jsr withTSTClear
638	.8834						readConfigurationByte: .block
639	.8834		08		php		                php
640	.8835		5a		phy		                phy
641	.8836		da		phx		                phx
642	.8837		20 48 89	jsr $8948	                jsr getRTCByteIndex ;
643	.883a		20 a3 96	jsr $96a3	                jsr readRTCByte
644	.883d		fa		plx		                plx
645	.883e		20 54 89	jsr $8954	                jsr getShiftCount
646	.8841		80 01		bra $8844	                bra shift

648							;-------------------------------------------------------------------------

650	.8843						shiftLoop:
651	.8843		4a		lsr a		                lsr a

653	.8844						shift:
654	.8844		88		dey		                dey
655	.8845		10 fc		bpl $8843	                bpl shiftLoop

657	.8847		20 5d 89	jsr $895d	                jsr getMaskCount
658	.884a		39 69 89	and $8969,y	                and maskByBitCount,y
659	.884d		e0 07		cpx #$07	                cpx #configureTable.baud.metadata-configureTable
660	.884f		d0 01		bne $8852	                bne gotMaskedByte
661	.8851		1a		inc a		                inc a

663	.8852						gotMaskedByte:
664							                ; If retrieving the MODE value, rearrange things so
665							                ; the shadow modes are 128-135.
666	.8852		e0 6b		cpx #$6b	                cpx #configureTable.mode.metadata-configureTable
667	.8854		d0 06		bne $885c	                bne done        ;taken if not MODE
668	.8856		89 08		bit #$08	                bit #CMOSBytes.defaults0.shadowMask ;test shadow bit
669	.8858		f0 02		beq $885c	                beq done                                   ;taken if not shadow mode
670	.885a		49 88		eor #$88	                eor #$80|CMOSBytes.defaults0.shadowMask ;turn mode|flag into mode|$80

672	.885c						done:
673	.885c		7a		ply		                ply
674	.885d		28		plp		                plp
675	.885e		60		rts		                rts
676							                .endblock

678							;-------------------------------------------------------------------------
679							;
680							; Find command in command table.
681							;
682							; Entry:
683							;
684							; (stringInputBufferAddress),y = input
685							; oscliWorkspace.tablePtr; = address of command table
686							; V = 0 if commands have 4 bytes of metadata
687							;     1 if commands have 2 bytes of metadata
688							;
689							; Exit:
690							;
691							; C=0 = no match
692							;
693							; C=1 = match;
694							;       A holds 1st byte of metadata
695							;       oscliWorkspace.tablePtr; = address of 2nd and following metadata bytes
696							;       (stringInputBufferAddress),y = input following command
697							;
698							; Preserves: X/V

700	.885f						findCommand: .block
701	.885f		84 e6		sty $e6		                sty commandLineY ;save Y
702	.8861		80 0a		bra $886d	                bra checkInput       ;get going...

704	.8863						checkLetter:
705	.8863		52 b0		eor ($b0)	                eor (oscliWorkspace.tablePtr)
706	.8865		29 df		and #$df	                and #$DF
707	.8867		d0 15		bne $887e	                bne noMatch    ; taken if char didn't match
708	.8869		20 9e 88	jsr $889e	                jsr fetchCommandTableByte
709	.886c		c8		iny		                iny

711	.886d						checkInput:
712	.886d		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
713	.886f		20 36 ea	jsr $ea36	                jsr isLetter
714	.8872		90 ef		bcc $8863	                bcc checkLetter ; taken if letter

716							                ; Non-letter input means potentially end of command
717							                ; name.
718	.8874		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr) ; next table byte
719	.8876		30 21		bmi $8899	                bmi commandMatch ; taken if end of string - a match
720	.8878		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
721	.887a		c9 2e		cmp #$2e	                cmp #'.'        ; '.' is the abbreviation char
722	.887c		f0 04		beq $8882	                beq abbreviationMatch ;taken with C=1 if match

724	.887e						noMatch:
725	.887e		18		clc		                clc             ;indicate no match
726	.887f		a4 e6		ldy $e6		                ldy commandLineY ;restore Y
727	.8881		88		dey		                dey             ;compensate for upcoming iny

729	.8882						abbreviationMatch:
730	.8882		c8		iny		                iny             ; skip the '.'

732	.8883						findCommandMetadataLoop:
733	.8883		20 9e 88	jsr $889e	                jsr fetchCommandTableByte
734	.8886		f0 15		beq $889d	                beq rts8ACD
735	.8888		10 f9		bpl $8883	                bpl findCommandMetadataLoop ; keep looping through chars if necessary
736	.888a		b0 11		bcs $889d	                bcs rts8ACD                 ;taken if it was a match
737	.888c		20 9e 88	jsr $889e	                jsr fetchCommandTableByte   ;discard 2nd metadata byte
738	.888f		70 dc		bvs $886d	                bvs checkInput ; if V=1, 2-byte metadata; if V=0, 4-byte metadata
739	.8891		20 9e 88	jsr $889e	                jsr fetchCommandTableByte ;discard 3rd metadata byte
740	.8894		20 9e 88	jsr $889e	                jsr fetchCommandTableByte ;discard 4th metadata byte
741	.8897		80 d4		bra $886d	                bra checkInput

743							;-------------------------------------------------------------------------

745	.8899						commandMatch:
746	.8899		20 9e 88	jsr $889e	                jsr fetchCommandTableByte
747	.889c		38		sec		                sec

749	.889d						rts8ACD:
750	.889d		60		rts		                rts
751							                .endblock

753							;-------------------------------------------------------------------------
754							;
755							; Fetch byte from command table with postincrement.
756							;
757							; Entry:
758							;
759							; oscliWorkspace.tablePtr; = address of byte to fetch
760							;
761							; Exit:
762							;
763							; A = byte fetched
764							; oscliWorkspace.tablePtr; incremented
765							;
766							; Preserves: X/Y/C/V

768	.889e						fetchCommandTableByte:
769	.889e		e8		inx		                inx
770	.889f		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
771	.88a1		48		pha		                pha
772	.88a2		e6 b0		inc $b0		                inc oscliWorkspace.tablePtr+0
773	.88a4		d0 02		bne $88a8	                bne L8AD8
774	.88a6		e6 b1		inc $b1		                inc oscliWorkspace.tablePtr+1

776	.88a8						L8AD8:
777	.88a8		68		pla		                pla
778	.88a9		60		rts		                rts

780							;-------------------------------------------------------------------------
781							;
782							; Print configure table items.
783							;
784							; Entry:
785							;
786							; C = ???
787							;
788							; V=0 if *CONFIGURE; V=1 if *STATUS
789							;
790	.88aa						L8ADA: .block
791	.88aa		48		pha		                pha
792	.88ab		a0 03		ldy #$03	                ldy #configureTable.baud-configureTable
793	.88ad		a2 02		ldx #$02	                ldx #(configureTable.baud-configureTable)-1

795	.88af						loop:
796	.88af		e8		inx		                inx
797	.88b0		bd 3c 85	lda $853c,x	                lda configureTable,x ;get name byte
798	.88b3		f0 5a		beq $890f	                beq done            ;all done if 0
799	.88b5		10 f8		bpl $88af	                bpl loop            ;keep going until end of name
800							                                     ;reached
801	.88b7		50 1f		bvc $88d8	                bvc L8B08            ;taken if *CONFIGURE

803							                ; A = metadata byte 0
804	.88b9		29 40		and #$40	                and #$40
805	.88bb		f0 10		beq $88cd	                beq L8AFD       ;taken if V0 clear

807	.88bd		bd 3d 85	lda $853d,x	                lda configureTable+1,x ;A = metadata byte 1
808	.88c0		30 0b		bmi $88cd	                bmi L8AFD              ;taken if N1 set

810	.88c2		20 34 88	jsr $8834	                jsr readConfigurationByte ;Read the actual value
811	.88c5		5d 3c 85	eor $853c,x	                eor configureTable,x      ;eor with MatchValue
812	.88c8		29 07		and #$07	                and #7                    ;A=0 if value matches MatchValue
813	.88ca		d0 3d		bne $8909	                bne next                  ;taken if value isn't MatchValue
814	.88cc		3a		dec a		                dec a                     ;A=$ff

816	.88cd						L8AFD:
817	.88cd		b0 09		bcs $88d8	                bcs L8B08       ;
818	.88cf		10 38		bpl $8909	                bpl next        ;
819	.88d1		68		pla		                pla
820	.88d2		48		pha		                pha
821	.88d3		5d 3d 85	eor $853d,x	                eor configureTable+1,x
822	.88d6		d0 31		bne $8909	                bne next

824	.88d8						L8B08:
825	.88d8		08		php		                php
826	.88d9		da		phx		                phx
827	.88da		50 09		bvc $88e5	                bvc printOrdinaryItem
828	.88dc		c0 4b		cpy #$4b	                cpy #configureTable.ignore-configureTable
829	.88de		d0 05		bne $88e5	                bne printOrdinaryItem
830	.88e0		20 74 89	jsr $8974	                jsr readUsePrinterIgnoreChar
831	.88e3		b0 1b		bcs $8900	                bcs L8B30

833	.88e5						printOrdinaryItem:
837	.88e5		a2 09		ldx #$09	                ldx #9
839	.88e7		20 3b 89	jsr $893b	                jsr printConfigureTableString
840	.88ea		29 40		and #$40	                and #$40
841	.88ec		f0 0f		beq $88fd	                beq printSpaces       ;taken if V0 clear
842	.88ee		b9 3d 85	lda $853d,y	                lda configureTable+1,y
843	.88f1		30 0a		bmi $88fd	                bmi printSpaces ;taken if N1 set

845							                ; V0 set, N1 clear = newline and next item
846	.88f3		20 e7 ff	jsr $ffe7	                jsr OSNEWL
847	.88f6		80 0f		bra $8907	                bra next2

849	.88f8						printSpacesLoop:
850	.88f8		a9 20		lda #$20	                lda #' '
851	.88fa		20 ee ff	jsr $ffee	                jsr OSWRCH

853	.88fd						printSpaces:
854	.88fd		ca		dex		                dex
855	.88fe		10 f8		bpl $88f8	                bpl printSpacesLoop

857	.8900						L8B30:
858	.8900		fa		plx		                plx
859	.8901		28		plp		                plp
860	.8902		08		php		                php
861	.8903		da		phx		                phx
862	.8904		20 51 86	jsr $8651	                jsr L8884

864	.8907						next2:
865	.8907		fa		plx		                plx
866	.8908		28		plp		                plp

868	.8909						next:
869	.8909		e8		inx		                inx             ;point X just before next item
870	.890a		8a		txa		                txa
871	.890b		a8		tay		                tay
872	.890c		c8		iny		                iny             ;point Y at next item
873	.890d		80 a0		bra $88af	                bra loop

875	.890f						done:
876	.890f		68		pla		                pla
877	.8910		60		rts		                rts
878							                .endblock

880							;-------------------------------------------------------------------------

882	.8911						printConfigureTableStringLoop:
886	.8911		20 ee ff	jsr $ffee	                jsr OSWRCH      ;print char
890	.8914		48		pha		                pha             ;save A (char to print)
891	.8915		5a		phy		                phy             ;save Y (table offset)
892	.8916		98		tya		                tya             ;get table offset in A

897							                ; If we're at a snippet insert point, insert the
898							                ; snippet, recursively.
899	.8917		a0 04		ldy #$04	                ldy #len(configureTable.textSnippets)-1
900	.8919						findSnippetInsertPointLoop:
901	.8919		d9 19 86	cmp $8619,y	                cmp configureTable.textSnippetInsertPointOffsets,y
902	.891c		d0 07		bne $8925	                bne nextSnippetInsertPoint

904							                ; Insert a snippet here. Load the new snippet's offset
905							                ; in Y and repeat.
906	.891e		b9 1e 86	lda $861e,y	                lda configureTable.textSnippetOffsets,y
907	.8921		a8		tay		                tay
908	.8922		20 3b 89	jsr $893b	                jsr printConfigureTableString
909	.8925						nextSnippetInsertPoint
910	.8925		88		dey		                dey
911	.8926		10 f1		bpl $8919	                bpl findSnippetInsertPointLoop
915	.8928		7a		ply		                ply             ;restore Y (table offset)
916	.8929		68		pla		                pla             ;restore A (char to print)
917	.892a		c8		iny		                iny             ;next byte in table
918	.892b		ca		dex		                dex             ;
919	.892c		49 20		eor #$20	                eor #$20
920	.892e		19 3c 85	ora $853c,y	                ora configureTable,y
921	.8931		29 a0		and #$a0	                and #%10100000
922	.8933		d0 06		bne $893b	                bne printConfigureTableString

927							                ; if char case changed, but it wasn't the end of the
928							                ; string, pop a space in.
929	.8935		a9 20		lda #$20	                lda #' '
933	.8937		20 ee ff	jsr $ffee	                jsr OSWRCH
937	.893a		ca		dex		                dex

940							;-------------------------------------------------------------------------
941							;
942							; Print string from configure table, with snippets inserted as
943							; required.
944							;
945							; Entry:
946							;
947							; X = column counter start value
948							; Y = configure table offset
949							;
950							; Exit:
951							;
952							; A = item's metadata byte 0
953							; X decremented for each char printed
954							;
955	.893b						printConfigureTableString:
956	.893b		b9 3c 85	lda $853c,y	                lda configureTable,y
957	.893e		10 d1		bpl $8911	                bpl printConfigureTableStringLoop
958	.8940		60		rts		                rts

961							;-------------------------------------------------------------------------
962							;
963							; Issue ROM service call romServiceCallUnknownCONFIG ($28) or
964							; romServiceCallUnknownSTATUS ($29).
965							;
966							; Entry:
967							;
968							; C=0 for unknown CONFIG, or C=1 for unknown STATUS
969							;
970							; Exit:
971							;
972							; as per appropriate ROM service call
973							;
974	.8941						unknownCONFIGOrStatus:
977	.8941		a9 14		lda #$14	                lda #romServiceCallUnknownCONFIG>>1
978	.8943		2a		rol a		                rol a           ;form $28 or $29 according to C
979	.8944		aa		tax		                tax
980	.8945		4c ac ed	jmp $edac	                jmp makeROMServiceCall

982							;-------------------------------------------------------------------------
983							;
984							; Get actual RTC byte index for configure item, given offset in
985							; configure table to its metadata.
986							;
987							; Entry:
988							;
989							; X = offset into configure table for item's metadata
990							;
991							; Exit:
992							;
993							; X = index of byte
994							;
995							; Preserves: Y

997	.8948						getRTCByteIndex: .proc

1028	.8948		bd 3d 85	lda $853d,x	                lda configureTable+1,x
1029	.894b		29 78		and #$78	                and #%01111000
1030	.894d		4a		lsr a		                lsr a
1031	.894e		4a		lsr a		                lsr a
1032	.894f		4a		lsr a		                lsr a           ; C=0
1033							                ; .if refreshVersion&&len(highIndexItemMetadataOffsetsList)>0
1034							                ; bvc +           ; taken if not high index
1035							                ; adc #16         ; add high index offset
1036							                ; ; C=0
1037							                ; .endif
1053	.8950		69 0f		adc #$0f	                adc #metadataRTCByteIndexOffset
1054	.8952		aa		tax		                tax
1055	.8953		60		rts		                rts
1056							                .endproc

1058							;-------------------------------------------------------------------------
1059							;
1060							; Get shift count for configure item's data, given offset in configure
1061							; table for its metadata.
1062							;
1063							; Entry:
1064							;
1065							; X = offset into configure table for item's metadata
1066							;
1067							; Exit:
1068							;
1069							; Y = shift count
1070							;
1071							; Preserves: A/X/C
1072							;
1073	.8954						getShiftCount:
1074	.8954		48		pha		                pha
1075	.8955		bd 3d 85	lda $853d,x	                lda configureTable+1,x
1076	.8958		29 07		and #$07	                and #%00000111
1077	.895a		a8		tay		                tay
1078	.895b		68		pla		                pla
1079	.895c		60		rts		                rts

1081							;-------------------------------------------------------------------------
1082							;
1083							; Get mask bit count for configure item's data, given offset in
1084							; configure table for its metadata.
1085							;
1086							; Entry:
1087							;
1088							; X = offset into configure table for item's metadata
1089							;
1090							; Exit:
1091							;
1092							; Y = mask bit count, -1 (0 = 1 bits ... 7 = 8 bits)
1093							;
1094							; Preserves: A/X
1095							;
1096	.895d						getMaskCount:
1097	.895d		48		pha		                pha
1098	.895e		bd 3c 85	lda $853c,x	                lda configureTable+0,x; "."
1099	.8961		4a		lsr a		                lsr a                 ; MaskCount<<2|(other stuff)
1100	.8962		4a		lsr a		                lsr a                 ; MaskCount<<1|(other stuff)
1101	.8963		4a		lsr a		                lsr a                 ; MaskCount<<0|(other stuff)
1102	.8964		29 07		and #$07	                and #7                ; MaskCount
1103	.8966		a8		tay		                tay
1104	.8967		68		pla		                pla
1105	.8968		60		rts		                rts

1107	.8969						maskByBitCount:
1108	>8969		01				                .byte %00000001
1109	>896a		03				                .byte %00000011
1110	>896b		07				                .byte %00000111
1111	>896c		0f				                .byte %00001111
1112	>896d		1f				                .byte %00011111
1113	>896e		3f				                .byte %00111111
1114	>896f		7f				                .byte %01111111
1115	>8970		ff				                .byte %11111111

1117							;-------------------------------------------------------------------------
1118							;
1119							; Read the use printer ignore char flag.
1120							;
1121							; Exit:
1122							;
1123							; C=0 if using printer ignore char; C=1 if not.
1124							;
1125							; Preserves: Y

1128	.8971						clearTSTAndReadUsePrinterIgnoreChar:
1129	.8971		20 53 f3	jsr $f353	                jsr withTSTClear
1131	.8974						readUsePrinterIgnoreChar:
1132	.8974		5a		phy		                phy
1133	.8975		20 8f 96	jsr $968f	                jsr readDefaults2
1134	.8978		4a		lsr a		                lsr a
1135	.8979		4a		lsr a		                lsr a
1136	.897a		7a		ply		                ply
1137	.897b		60		rts		                rts

1139							;-------------------------------------------------------------------------
1140							;
1141							; Print decimal byte.
1142							;
1143							; Entry:
1144							;
1145							; (printDecimalByteA) A = value to print
1146							;
1147							; (printDecimalByteY) Y = value to print
1148							;
1149	.897c						printDecimalByteY:
1150	.897c		98		tya		                tya
1151	.897d						printDecimalByteA:
1152	.897d		38		sec		                sec             ;set leading zeros flag
1153	.897e		a0 ff		ldy #$ff	                ldy #$FF        ;reset digit counter
1154	.8980		08		php		                php             ;save leading zeros flag

1156	.8981						countHundredsLoop:
1157	.8981		c8		iny		                iny
1158	.8982		e9 64		sbc #$64	                sbc #100
1159	.8984		b0 fb		bcs $8981	                bcs countHundredsLoop

1161	.8986		69 64		adc #$64	                adc #100        ;put 0 back in the hundreds column
1162	.8988		28		plp		                plp             ;restore leading zeros flag
1163	.8989		20 9d 89	jsr $899d	                jsr maybePrintHexDigit

1165	.898c		a0 ff		ldy #$ff	                ldy #$FF        ;reset digit counter
1166	.898e		08		php		                php             ;save leading zeros flag
1167	.898f		38		sec		                sec

1169	.8990						countTensLoop:
1170	.8990		c8		iny		                iny
1171	.8991		e9 0a		sbc #$0a	                sbc #10
1172	.8993		b0 fb		bcs $8990	                bcs countTensLoop

1174	.8995		69 0a		adc #$0a	                adc #10         ;put 0 back in the tens column
1175	.8997		28		plp		                plp             ;restore leading zeros flag
1176	.8998		20 9d 89	jsr $899d	                jsr maybePrintHexDigit
1177	.899b		18		clc		                clc             ;always clear leading zeros flag for
1178							                                ;units
1179	.899c		a8		tay		                tay             ;Y=3rd digit

1181	.899d						maybePrintHexDigit:
1182	.899d		48		pha		                pha
1183	.899e		98		tya		                tya
1184	.899f		d0 02		bne $89a3	                bne L8BD0       ;always print if non-zero
1185	.89a1		b0 04		bcs $89a7	                bcs L8BD4       ;print non-leading zeros
1186	.89a3						L8BD0:
1187	.89a3		20 b5 a8	jsr $a8b5	                jsr printHexDigit
1188	.89a6		18		clc		                clc             ;indicate non-zero digit printed
1189	.89a7						L8BD4:
1190	.89a7		68		pla		                pla
1191	.89a8		60		rts		                rts

1193							;-------------------------------------------------------------------------

1196	.89a9						clearTSTAndReadDefaultTVSettings
1197	.89a9		20 53 f3	jsr $f353	                jsr withTSTClear
1199	.89ac						readDefaultTVSettings:
1200	.89ac		a2 c9		ldx #$c9	                ldx #configureTable.tvMetadata-configureTable
1201	.89ae		20 34 88	jsr $8834	                jsr readConfigurationByte
1202	.89b1		4a		lsr a		                lsr a
1203	.89b2		89 04		bit #$04	                bit #%00000100
1204	.89b4		f0 02		beq $89b8	                beq L8BE2
1205	.89b6		09 fc		ora #$fc	                ora #%11111100
1206	.89b8						L8BE2:
1207	.89b8		a8		tay		                tay
1208	.89b9		a9 00		lda #$00	                lda #0
1209	.89bb		2a		rol a		                rol a
1210	.89bc		aa		tax		                tax
1211	.89bd		60		rts		                rts

1213							;-------------------------------------------------------------------------

:7	;******  Return to file: src/terminal.s65

976							                .include "sram_utils.s65"

:9	;******  Processing file: src/sram_utils.s65

1							;-------------------------------------------------------------------------

3							; osword42SetupTable[i] is offset into sramWorkspace for OSWORD
4							; parameter block byte i

6	.89be						osword42SetupTable:
8	>89be		01				                .byte sramWorkspace.type-sramWorkspace
10	>89bf		09				                .byte sramWorkspace.dataAddress+0-sramWorkspace
11	>89c0		0a				                .byte sramWorkspace.dataAddress+1-sramWorkspace
12	>89c1		0b				                .byte sramWorkspace.dataAddress+2-sramWorkspace
13	>89c2		0c				                .byte sramWorkspace.dataAddress+3-sramWorkspace
14	>89c3		02				                .byte sramWorkspace.length+0-sramWorkspace
15	>89c4		03				                .byte sramWorkspace.length+1-sramWorkspace
16	>89c5		04				                .byte sramWorkspace.bank-sramWorkspace
17	>89c6		05				                .byte sramWorkspace.sramAddress+0-sramWorkspace
18	>89c7		06				                .byte sramWorkspace.sramAddress+1-sramWorkspace

20							;-------------------------------------------------------------------------
21							;
22							; OSWORD $42 - Sideways RAM Block Transfor (G.7-7)
23							;
24							; Entry: parameter block like this:
25							;
26							;    block?0 - bit 7 clear=sram->memory, set=memory->sram
27							;              bit 6 clear=absolute, set=pseudo
28							;    block!1 - data address
29							;    (block+5); - block length
30							;    block?7 - ROM ID 0-$0f, or $10-$13 for W/X/Y/Z
31							;    (block+8); - sideways RAM address
32							;
33	.89c8						osword42: .proc
39	.89c8		a0 09		ldy #$09	                ldy #9

41	.89ca						copyFromParameterBlockLoop:
42	.89ca		b1 f0		lda ($f0),y	                lda (originalX),y
46	.89cc		be be 89	ldx $89be,y	                ldx osword42SetupTable,y
48	.89cf		9d ed 02	sta $02ed,x	                sta sramWorkspace,x
49	.89d2		88		dey		                dey
53	.89d3		10 f5		bpl $89ca	                bpl copyFromParameterBlockLoop
54	.89d5		c8		iny		                iny             ; Y=0

57	.89d6						saveTransferPointersLoop:
58	.89d6		b9 b0 00	lda $00b0,y	                lda sramTransferPointers,y
59	.89d9		48		pha		                pha
60	.89da		c8		iny		                iny
61	.89db		c0 04		cpy #$04	                cpy #size(sramTransferPointers)
62	.89dd		90 f7		bcc $89d6	                bcc saveTransferPointersLoop

64	.89df		20 8d 8b	jsr $8b8d	                jsr doSidewaysRAMBlockTransfer

66	.89e2		a0 03		ldy #$03	                ldy #size(sramTransferPointers)-1
67	.89e4						restoreTransferPointersLoop:
68	.89e4		68		pla		                pla
69	.89e5		99 b0 00	sta $00b0,y	                sta sramTransferPointers,y
70	.89e8		88		dey		                dey
71	.89e9		10 f9		bpl $89e4	                bpl restoreTransferPointersLoop
72	.89eb		60		rts		                rts
73							                .endproc

75							;-------------------------------------------------------------------------

77	.89ec						convertSidewaysRAMPseudoAddress:
78	.89ec		2c ee 02	bit $02ee	                bit sramWorkspace.type
79	.89ef		50 30		bvc $8a21	                bvc checkROMID ;taken if absolute addressing - nothing to do

81							                ; Sort out pseudo address - see MasRef G.7-5
82	.89f1		a0 04		ldy #$04	                ldy #4          ; 4=first SRAM bank
83	.89f3		ad f2 02	lda $02f2	                lda sramWorkspace.sramAddress+0 ; pseudo address
84	.89f6		ae f3 02	ldx $02f3	                ldx sramWorkspace.sramAddress+1 ; pseudo address
85	.89f9						findStartBankLoop:
86	.89f9		e0 3f		cpx #$3f	                cpx #>dataBankSize
87	.89fb		90 16		bcc $8a13	                bcc foundStartBank ; taken if MSB $00-$3e
88	.89fd		d0 04		bne $8a03	                bne nextBank       ; taken if MSB >=$40

90							                ; Address is 16 KB-the dummy header size
91	.89ff		c9 f0		cmp #$f0	                cmp #<dataBankSize
92	.8a01		90 10		bcc $8a13	                bcc foundStartBank ; taken if address<$3ff0

94	.8a03						nextBank:
95	.8a03		e9 f0		sbc #$f0	                sbc #<dataBankSize
96	.8a05		48		pha		                pha
97	.8a06		8a		txa		                txa
98	.8a07		e9 3f		sbc #$3f	                sbc #>dataBankSize
99	.8a09		aa		tax		                tax
100	.8a0a		68		pla		                pla
101	.8a0b		c8		iny		                iny
102	.8a0c		c0 08		cpy #$08	                cpy #8          ; 8=last SRAM bank
103	.8a0e		90 e9		bcc $89f9	                bcc findStartBankLoop ; taken if more banks to go
104	.8a10		4c e9 92	jmp $92e9	                jmp badAddressError ; taken if pseudo address out of range

106	.8a13						foundStartBank:
107							                ; form actual address in sramAddress!5
108	.8a13		69 10		adc #$10	                adc #<dataBankStart
109	.8a15		8d f2 02	sta $02f2	                sta sramWorkspace.sramAddress+0
110	.8a18		8a		txa		                txa
111	.8a19		69 80		adc #$80	                adc #>dataBankStart
112	.8a1b		8d f3 02	sta $02f3	                sta sramWorkspace.sramAddress+1
113	.8a1e		8c f1 02	sty $02f1	                sty sramWorkspace.bank ; save ROM number

116							;-------------------------------------------------------------------------
117							;
118							; Check ROM ID (as read by readROMID) is valid.
119							;
120							; Entry:
121							;
122							; sramWorkspace.bank = ROM ID
123							;
124							; Exit:
125							;
126							; A=$40 Z=0 if operation addressing mode/bank addressing mode mismatch
127							;
128							; May also generate a "Bad id" error.

130	.8a21						checkROMID: .proc
131	.8a21		ad f1 02	lda $02f1	                lda sramWorkspace.bank
132	.8a24		c9 10		cmp #$10	                cmp #$10
133	.8a26		90 09		bcc $8a31	                bcc gotValidROMID       ; if <16, use as-is

135							                ; convert W/X/Y/Z to 4-7
136	.8a28		c9 14		cmp #$14	                cmp #$14
137	.8a2a		b0 1e		bcs $8a4a	                bcs badIdError  ; bad id if >=$14
138	.8a2c		49 14		eor #$14	                eor #$14        ; $10->$04, $11->$05, $12->$06, $13->$07
139	.8a2e		8d f1 02	sta $02f1	                sta sramWorkspace.bank

141	.8a31						gotValidROMID:
142	.8a31		aa		tax		                tax
143	.8a32		20 be f9	jsr $f9be	                jsr isBankROM
144	.8a35		b0 07		bcs $8a3e	                bcs gotValidBank ; taken if RAM
145	.8a37		2c ee 02	bit $02ee	                bit sramWorkspace.type

147							                ; Don't understand the logic here?
148	.8a3a		10 0e		bpl $8a4a	                bpl badIdError  ; taken if read operation
149	.8a3c		70 0c		bvs $8a4a	                bvs badIdError  ; taken if pseudo addressing

151	.8a3e						gotValidBank:
152	.8a3e		20 95 8d	jsr $8d95	                jsr sramGetBankMode        ; A=$40 if pseudo
153	.8a41		ae f1 02	ldx $02f1	                ldx sramWorkspace.bank
154	.8a44		4d ee 02	eor $02ee	                eor sramWorkspace.type
155	.8a47		29 40		and #$40	                and #$40
156	.8a49		60		rts		                rts
157							                .endproc

159							;-------------------------------------------------------------------------

161	.8a4a						badIdError:
162	.8a4a		20 2f ab	jsr $ab2f	                jsr doFollowingError
163	>8a4d		80				                .byte $80
164	>8a4e		42 61 64 20 69 64		                .text "Bad id"
165	>8a54		00				                .byte 0

167							;-------------------------------------------------------------------------
168							;
169							; Read ROM ID from command line.
170							;
171							; Entry:
172							;
173							; ($f2),y = command line input pointer
174							;
175							; Exit:
176							;
177							; V=1 if invalid
178							;
179							; V=0 if valid
180							;    osfileParameterBlock?1 bit 6 cleared
181							;    osfileParameterBlock?4 is ROM ID
182							;
183							; May also generate a "Bad id" error.
184							;
185	.8a55						readROMID: .proc
186	.8a55		20 10 84	jsr $8410	                jsr readHexDigit ; get char, possibly hex
187	.8a58		2c 62 e3	bit $e362	                bit valueFF      ; V=1
188	.8a5b		b0 0d		bcs $8a6a	                bcs got1CharROMID  ; taken if hex digit encountered
189	.8a5d		29 df		and #$df	                and #$DF         ; redundantly convert to upper case
190	.8a5f		c9 5b		cmp #$5b	                cmp #'Z'+1
191	.8a61		b0 1d		bcs $8a80	                bcs done        ; taken if >'Z' - not valid
192	.8a63		c9 57		cmp #$57	                cmp #'W'
193	.8a65		90 19		bcc $8a80	                bcc done        ; taken if <'W' - not valid
194	.8a67		e9 53		sbc #$53	                sbc #'W'-4      ; adjust: W=4, X=5, Y=6, Z=7
195	.8a69		c8		iny		                iny             ; consume command line char

197	.8a6a						got1CharROMID:
198							                ; Handle decimal numbers: if the bank was 1, it might
199							                ; be "1" or the first char of "10", "11", etc. Handle
200							                ; accordingly.
201							                ;
202							                ; (If using the W/X/Y/Z syntax, the banks are 4-7.)
203	.8a6a		c9 01		cmp #$01	                cmp #1
204	.8a6c		d0 09		bne $8a77	                bne gotROMID
205	.8a6e		88		dey		                dey             ; go back to the got char
206	.8a6f		20 b0 83	jsr $83b0	                jsr parseNumberFromString ; read as number
207	.8a72		8a		txa		                txa                       ; A = result
208	.8a73		c9 10		cmp #$10	                cmp #$10
209	.8a75		b0 d3		bcs $8a4a	                bcs badIdError  ; bad id if >15

211	.8a77						gotROMID:
212							                ; +4 = romid
213	.8a77		8d f1 02	sta $02f1	                sta sramWorkspace.bank

215							                ; clear +1 bit 6 - indicate valid rom id?
216	.8a7a		a9 40		lda #$40	                lda #$40
217	.8a7c		1c ee 02	trb $02ee	                trb sramWorkspace.type
218	.8a7f		b8		clv		                clv             ; V=0

220	.8a80						done:
221	.8a80		4c 69 f2	jmp $f269	                jmp skipSpacesAndCheckForCRInStringInput
222							                .endproc

224							;-------------------------------------------------------------------------

226	.8a83						starSRDATAOrStarSRROM:
227	.8a83		48		pha		                pha
228	.8a84		20 55 8a	jsr $8a55	                jsr readROMID
229	.8a87		70 23		bvs $8aac	                bvs jmpBadCommandError8CD6 ; taken if invalid ROM ID
230	.8a89		d0 21		bne $8aac	                bne jmpBadCommandError8CD6 ; taken if bad command line
231							                                           ; contents
232	.8a8b		68		pla		                pla

234							                ; $80 if *SRDATA; $00 if *SRROM
238	.8a8c		0a		asl a		                asl a
239	.8a8d		8d ee 02	sta $02ee	                sta sramWorkspace.type
241	.8a90		20 21 8a	jsr $8a21	                jsr checkROMID
242	.8a93		b0 b5		bcs $8a4a	                bcs badIdError  ; taken if bank could never be used
243							                                ; with pseudo addressing
244	.8a95		d0 06		bne $8a9d	                bne toggleModeAndInitBank ; taken if switching to other bank mode

246							                ; If bank mode didn't change, but there's nothing in
247							                ; the bank already, set up the dummy ROM header for
248							                ; it.
249	.8a97		1d a1 02	ora $02a1,x	                ora romInformationTable,x
250	.8a9a		f0 0a		beq $8aa6	                beq initBank
251	.8a9c		60		rts		                rts

253	.8a9d						toggleModeAndInitBank:
254	.8a9d		ad de df	lda $dfde	                lda hazel.sramBankModes
255	.8aa0		5d 5d 8d	eor $8d5d,x	                eor sramBank4567ModeMasks-4,x
256	.8aa3		8d de df	sta $dfde	                sta hazel.sramBankModes

258	.8aa6						initBank:
259	.8aa6		20 5b 8d	jsr $8d5b	                jsr setROMXType6502
260	.8aa9		4c a0 f9	jmp $f9a0	                jmp initDummyROMHeader

262							;-------------------------------------------------------------------------

264	.8aac						jmpBadCommandError8CD6:
265	.8aac		4c 20 f9	jmp $f920	                jmp badCommandError

267							;-------------------------------------------------------------------------

269	.8aaf						L8CD9:
270	.8aaf		20 c0 8a	jsr $8ac0	                jsr L8CEA
271	.8ab2		b0 0b		bcs $8abf	                bcs locret_8CE9
272	.8ab4		20 2e f9	jsr $f92e	                jsr transferBetweenSidewaysRAMAndRAM
273	.8ab7		8c f2 02	sty $02f2	                sty sramWorkspace.sramAddress+0
274	.8aba		b5 01		lda $01,x	                lda 1,x
275	.8abc		8d f3 02	sta $02f3	                sta sramWorkspace.sramAddress+1

277	.8abf						locret_8CE9:
278	.8abf		60		rts		                rts

281							;-------------------------------------------------------------------------

283	.8ac0						L8CEA:
284							                ; get sram transfer sram pointer address in X - src if
285							                ; reading from sideways RAM, dest if writing to
286							                ; sideways RAM
287	.8ac0		a2 b0		ldx #$b0	                ldx #sramTransferPointers.src
288	.8ac2		2c ee 02	bit $02ee	                bit sramWorkspace.type
289	.8ac5		10 02		bpl $8ac9	                bpl +           ; taken if reading from sideways RAM
290	.8ac7		a2 b2		ldx #$b2	                ldx #sramTransferPointers.dest
291	.8ac9						+
292	.8ac9		74 00		stz $00,x	                stz 0,x
293	.8acb		ac f2 02	ldy $02f2	                ldy sramWorkspace.sramAddress+0 ; sram address LSB
294	.8ace		98		tya		                tya                        ; Y=sram address LSB
295	.8acf		18		clc		                clc
296	.8ad0		6d ef 02	adc $02ef	                adc sramWorkspace.length+0 ; form end address LSB
297	.8ad3		8d ef 02	sta $02ef	                sta sramWorkspace.length+0
298	.8ad6		ad f3 02	lda $02f3	                lda sramWorkspace.sramAddress+1 ; sram address MSB
299	.8ad9		95 01		sta $01,x	                sta 1,x                    ;
300	.8adb		6d f0 02	adc $02f0	                adc sramWorkspace.length+1 ; form end address MSB
301	.8ade		8d f0 02	sta $02f0	                sta sramWorkspace.length+1
302	.8ae1		38		sec		                sec
303	.8ae2		20 73 8d	jsr $8d73	                jsr initSRAMTransferDataPointer
304	.8ae5						L8D0F:
305	.8ae5		cc ef 02	cpy $02ef	                cpy sramWorkspace.length+0
306	.8ae8		d0 08		bne $8af2	                bne L8D1C
307	.8aea		b5 01		lda $01,x	                lda 1,x
308	.8aec		cd f0 02	cmp $02f0	                cmp sramWorkspace.length+1
309	.8aef		d0 01		bne $8af2	                bne L8D1C
310	.8af1		60		rts		                rts

312	.8af2						L8D1C:
313	.8af2		2c ee 02	bit $02ee	                bit sramWorkspace.type
314	.8af5		50 32		bvc $8b29	                bvc L8D53       ; taken if absolute addressing
315	.8af7		b5 01		lda $01,x	                lda 1,x         ; get sideways RAM pointer
316	.8af9		c9 c0		cmp #$c0	                cmp #>(dataBankStart+dataBankSize) ; gone past end of bank?
317	.8afb		90 2c		bcc $8b29	                bcc L8D53       ; taken if not past end of bank
318	.8afd		a9 80		lda #$80	                lda #>dataBankStart
319	.8aff		95 01		sta $01,x	                sta 1,x                    ; reset pointer MSB
320	.8b01		ee f1 02	inc $02f1	                inc sramWorkspace.bank ; move to next bank
321	.8b04		ad f1 02	lda $02f1	                lda sramWorkspace.bank
322	.8b07		c9 08		cmp #$08	                cmp #8
323	.8b09		b0 2e		bcs $8b39	                bcs jmpBadAddressError ; bad address error if definitely past end of pseudo-addressable area
324	.8b0b		da		phx		                phx
325	.8b0c		20 21 8a	jsr $8a21	                jsr checkROMID  ; perform other ROM ID checks
326	.8b0f		d0 28		bne $8b39	                bne jmpBadAddressError ; bad address error if bad
327	.8b11		fa		plx		                plx
328	.8b12		a0 10		ldy #$10	                ldy #<dataBankStart

330							                ; Subtract dataBankSize from count of bytes remaining
331	.8b14		ad ef 02	lda $02ef	                lda sramWorkspace.length+0
332	.8b17		38		sec		                sec
333	.8b18		e9 f0		sbc #$f0	                sbc #<dataBankSize
334	.8b1a		8d ef 02	sta $02ef	                sta sramWorkspace.length+0
335	.8b1d		ad f0 02	lda $02f0	                lda sramWorkspace.length+1
336	.8b20		e9 3f		sbc #$3f	                sbc #>dataBankSize
337	.8b22		8d f0 02	sta $02f0	                sta sramWorkspace.length+1
338	.8b25		18		clc		                clc
339	.8b26		20 73 8d	jsr $8d73	                jsr initSRAMTransferDataPointer

341	.8b29						L8D53:
342	.8b29		ad f1 02	lda $02f1	                lda sramWorkspace.bank
343	.8b2c		18		clc		                clc

345	.8b2d						locret_8D57:
346	.8b2d		60		rts		                rts

348							;-------------------------------------------------------------------------

350	.8b2e						parse16BitHexAddressFromCommandLine:
351	.8b2e		20 f9 92	jsr $92f9	                jsr parseHexAddressFromCommandLine
352	.8b31						checkParameterBlockAddressIs16Bit:
353	.8b31		bd ef 02	lda $02ef,x	                lda sramWorkspace.length+0,x
354	.8b34		1d f0 02	ora $02f0,x	                ora sramWorkspace.length+1,x
355	.8b37		f0 f4		beq $8b2d	                beq locret_8D57

357	.8b39						jmpBadAddressError:
358	.8b39		4c e9 92	jmp $92e9	                jmp badAddressError

360							;-------------------------------------------------------------------------
361							;
362							; Read I from command line. From Master Compact app note: ``A facility
363							; to load an SRAM image and update the MOS ROM type table has been
364							; added. An "I" should be added to the *SRLOAD command.''
365							;
367	.8b3c						readImmediateFlag:
368	.8b3c		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
369	.8b3f		29 df		and #$df	                and #$DF
370	.8b41		c9 49		cmp #$49	                cmp #'I'
371	.8b43		d0 0d		bne $8b52	                bne L8D7C
372	.8b45		c8		iny		                iny
373	.8b46		ad ee 02	lda $02ee	                lda sramWorkspace.type
374	.8b49		c9 80		cmp #$80	                cmp #$80
375	.8b4b		d0 3d		bne $8b8a	                bne jmpBadCommandError8DB4 ; "Bad command" if not *SRLOAD
376	.8b4d		09 20		ora #$20	                ora #$20                   ; set bit 5 to indicate I
377	.8b4f		8d ee 02	sta $02ee	                sta sramWorkspace.type

379	.8b52						L8D7C:
380	.8b52		4c 69 f2	jmp $f269	                jmp skipSpacesAndCheckForCRInStringInput

383							;-------------------------------------------------------------------------
384							;
385							; C=0 for *SRREAD
386							;
387	.8b55						starSRREADOrStarSRWRITE:
391	.8b55		0a		asl a		                asl a
392	.8b56		8d ee 02	sta $02ee	                sta sramWorkspace.type

395	.8b59		a2 09		ldx #$09	                ldx #sramWorkspace.dataAddress-osfileParameterBlock
396	.8b5b		20 f9 92	jsr $92f9	                jsr parseHexAddressFromCommandLine
397	.8b5e		20 65 8d	jsr $8d65	                jsr checkForPlusInCommandLine
398	.8b61		a2 02		ldx #$02	                ldx #sramWorkspace.length-osfileParameterBlock
399	.8b63		20 f9 92	jsr $92f9	                jsr parseHexAddressFromCommandLine
400	.8b66		70 10		bvs $8b78	                bvs L8DA2 ; taken if + encountered, so +2 is already the length

402							                ; sramWorkspace.length is actually the end address -
403							                ; substract start address to turn it into the length.
404	.8b68		a2 fc		ldx #$fc	                ldx #$FC

406	.8b6a						L8D94:
407	.8b6a		bd f3 01	lda $01f3,x	                lda sramWorkspace.length-$FC,x
408	.8b6d		fd fa 01	sbc $01fa,x	                sbc sramWorkspace.dataAddress-$FC,x
409	.8b70		9d f3 01	sta $01f3,x	                sta sramWorkspace.length-$FC,x
410	.8b73		e8		inx		                inx
411	.8b74		d0 f4		bne $8b6a	                bne L8D94
412	.8b76		90 c1		bcc $8b39	                bcc jmpBadAddressError ; taken if end<start

414	.8b78						L8DA2:
415							                ; Check length is a 16 bit quantity
416	.8b78		a2 02		ldx #$02	                ldx #sramWorkspace.length-osfileParameterBlock
417	.8b7a		20 31 8b	jsr $8b31	                jsr checkParameterBlockAddressIs16Bit

419							                ; Parse SRAM address
420	.8b7d		a2 05		ldx #$05	                ldx #sramWorkspace.sramAddress-osfileParameterBlock
421	.8b7f		20 2e 8b	jsr $8b2e	                jsr parse16BitHexAddressFromCommandLine

423							                ; Read ROM ID
424	.8b82		20 55 8a	jsr $8a55	                jsr readROMID

427	.8b85		20 3c 8b	jsr $8b3c	                jsr readImmediateFlag
429	.8b88		f0 03		beq $8b8d	                beq doSidewaysRAMBlockTransfer

431	.8b8a						jmpBadCommandError8DB4:
432	.8b8a		4c 20 f9	jmp $f920	                jmp badCommandError

434	.8b8d						doSidewaysRAMBlockTransfer:
435	.8b8d		08		php		                php
436	.8b8e		20 ec 89	jsr $89ec	                jsr convertSidewaysRAMPseudoAddress
437	.8b91		f0 03		beq $8b96	                beq L8DC0
438	.8b93		20 4a 8a	jsr $8a4a	                jsr badIdError  ; should be a jmp; will never return
439	.8b96						L8DC0:
440	.8b96		20 51 8d	jsr $8d51	                jsr L8F40
442	.8b99		ad f8 02	lda $02f8	                lda sramWorkspace.dataAddress+2
443	.8b9c		2d f9 02	and $02f9	                and sramWorkspace.dataAddress+3
444	.8b9f		1a		inc a		                inc a
445	.8ba0		2d 7a 02	and $027a	                and tubePresence
446	.8ba3		d0 07		bne $8bac	                bne L8952
448	.8ba5		20 af 8a	jsr $8aaf	                jsr L8CD9
449	.8ba8		28		plp		                plp
453	.8ba9		4c d8 f9	jmp $f9d8	                jmp LF8D1

456							;-------------------------------------------------------------------------

459	.8bac						L8952:
460	.8bac		a9 c8		lda #$c8	                lda #$c8    ; 8 = claimant code for sideways RAM utils
461	.8bae		20 06 04	jsr $0406	                jsr $0406   ; claim Tube
462	.8bb1		90 f9		bcc $8bac	                bcc L8952       ; if it failed, try again
463	.8bb3		a9 00		lda #$00	                lda #0          ; multi byte parasite->host
464	.8bb5		2c ee 02	bit $02ee	                bit sramWorkspace.type
465	.8bb8		30 01		bmi $8bbb	                bmi +           ; taken if writing to sideways RAM
466	.8bba		1a		inc a		                inc a           ; multi byte host->parasite
467	.8bbb						+
468	.8bbb		a2 f6		ldx #$f6	                ldx #<sramWorkspace.dataAddress
469	.8bbd		a0 02		ldy #$02	                ldy #>sramWorkspace.dataAddress
470	.8bbf		20 06 04	jsr $0406	                jsr $0406       ; begin transfer to/from data address
471	.8bc2		20 c0 8a	jsr $8ac0	                jsr L8CEA
472	.8bc5		b0 03		bcs $8bca	                bcs L8970
473	.8bc7		20 5e f9	jsr $f95e	                jsr transferSidewaysRAMOverTube
474	.8bca						L8970:
475	.8bca		a9 88		lda #$88	                lda #$88
476	.8bcc		20 06 04	jsr $0406	                jsr $0406
477	.8bcf		28		plp		                plp
478	.8bd0		60		rts		                rts

481							;-------------------------------------------------------------------------

483	.8bd1						starSRLOADOrStarSRSAVE:
487	.8bd1		0a		asl a		                asl a
488	.8bd2		8d ee 02	sta $02ee	                sta sramWorkspace.type
490	.8bd5		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
491	.8bd8		86 f2		stx $f2		                stx stringInputBufferAddress
492	.8bda		84 f3		sty $f3		                sty stringInputBufferAddress+1
493	.8bdc		8e ef 02	stx $02ef	                stx sramWorkspace.length+0
494	.8bdf		8c f0 02	sty $02f0	                sty sramWorkspace.length+1
495	.8be2		a0 00		ldy #$00	                ldy #0
496	.8be4		20 d7 f1	jsr $f1d7	                jsr gsinitForFilenameParsing

498	.8be7						L8DE0:
499	.8be7		20 e9 f1	jsr $f1e9	                jsr gsreadEntryPoint
500	.8bea		90 fb		bcc $8be7	                bcc L8DE0
501	.8bec		a2 05		ldx #$05	                ldx #5
502	.8bee		20 2e 8b	jsr $8b2e	                jsr parse16BitHexAddressFromCommandLine
503	.8bf1		2c ee 02	bit $02ee	                bit sramWorkspace.type
504	.8bf4		30 1e		bmi $8c14	                bmi L8E0D
505	.8bf6		20 65 8d	jsr $8d65	                jsr checkForPlusInCommandLine
506	.8bf9		a2 07		ldx #$07	                ldx #7
507	.8bfb		20 2e 8b	jsr $8b2e	                jsr parse16BitHexAddressFromCommandLine
508	.8bfe		70 14		bvs $8c14	                bvs L8E0D
509	.8c00		38		sec		                sec
510	.8c01		a2 fe		ldx #$fe	                ldx #$FE

512	.8c03						L8DFC:
513	.8c03		bd f6 01	lda $01f6,x	                lda sramWorkspace.sramAddress+2-$FE,x
514	.8c06		fd f4 01	sbc $01f4,x	                sbc sramWorkspace.sramAddress+0-$FE,x
515	.8c09		9d f6 01	sta $01f6,x	                sta sramWorkspace.sramAddress+2-$FE,x
516	.8c0c		e8		inx		                inx
517	.8c0d		d0 f4		bne $8c03	                bne L8DFC
518	.8c0f		b0 03		bcs $8c14	                bcs L8E0D
519	.8c11		4c 39 8b	jmp $8b39	                jmp jmpBadAddressError

521							;-------------------------------------------------------------------------

523	.8c14						L8E0D:
524	.8c14		20 55 8a	jsr $8a55	                jsr readROMID
525	.8c17		9c f8 02	stz $02f8	                stz sramWorkspace.dataAddress+2
527	.8c1a		a2 ff		ldx #$ff	                ldx #$ff
532	.8c1c		20 3c 8b	jsr $8b3c	                jsr readImmediateFlag
534	.8c1f		29 df		and #$df	                and #$DF
536	.8c21		c8		iny		                iny
538	.8c22		c9 51		cmp #$51	                cmp #'Q'
540	.8c24		f0 0b		beq $8c31	                beq L8E20
545	.8c26		88		dey		                dey
548	.8c27		9c f6 02	stz $02f6	                stz sramWorkspace.dataAddress+0
549	.8c2a		a2 dc		ldx #$dc	                ldx #>hazel.commandLine
550	.8c2c		8e f7 02	stx $02f7	                stx sramWorkspace.dataAddress+1
551	.8c2f		a2 03		ldx #$03	                ldx #$03

557	.8c31						L8E20:
558	.8c31		8e f9 02	stx $02f9	                stx sramWorkspace.dataAddress+3
559	.8c34		ae 34 fe	ldx $fe34	                ldx ACCCON
563	.8c37		20 3c 8b	jsr $8b3c	                jsr readImmediateFlag
565	.8c3a		f0 16		beq $8c52	                beq L8E41
566	.8c3c		4c 8a 8b	jmp $8b8a	                jmp jmpBadCommandError8DB4

568							;-------------------------------------------------------------------------

570	.8c3f						osword43:
571	.8c3f		ae 34 fe	ldx $fe34	                ldx ACCCON
572	.8c42		20 f1 ec	jsr $ecf1	                jsr selectHAZEL
573	.8c45		9c c6 df	stz $dfc6	                stz hazel.tempFSFlag
574	.8c48		a0 0b		ldy #$0b	                ldy #$B

576	.8c4a						L8E39:
577	.8c4a		b1 f0		lda ($f0),y	                lda (originalX),y
578	.8c4c		99 ee 02	sta $02ee,y	                sta sramWorkspace.type,y
579	.8c4f		88		dey		                dey
580	.8c50		10 f8		bpl $8c4a	                bpl L8E39

586	.8c52						L8E41:
587	.8c52		08		php		                php
588	.8c53		da		phx		                phx
589	.8c54		20 ec 89	jsr $89ec	                jsr convertSidewaysRAMPseudoAddress
590	.8c57		f0 03		beq $8c5c	                beq L8E4B
591	.8c59		4c 4a 8a	jmp $8a4a	                jmp badIdError
592	.8c5c						L8E4B:
593	.8c5c		ad f9 02	lda $02f9	                lda sramWorkspace.dataAddress+3
594	.8c5f		30 0b		bmi $8c6c	                bmi L8E5B
595	.8c61		0d f8 02	ora $02f8	                ora sramWorkspace.dataAddress+2
596	.8c64		d0 1d		bne $8c83	                bne L8E72
597	.8c66		a9 02		lda #$02	                lda #2
598	.8c68		a0 dd		ldy #$dd	                ldy #>hazel.ddxx
599	.8c6a		80 0b		bra $8c77	                bra L8E66

601							;-------------------------------------------------------------------------

603	.8c6c						L8E5B:
604	.8c6c		20 1c f1	jsr $f11c	                jsr osbyte84
605	.8c6f		98		tya		                tya
606	.8c70		38		sec		                sec
607	.8c71		ed 44 02	sbc $0244	                sbc oshwm
608	.8c74		ac 44 02	ldy $0244	                ldy oshwm

610	.8c77						L8E66:
611	.8c77		9c f6 02	stz $02f6	                stz sramWorkspace.dataAddress+0
612	.8c7a		8c f7 02	sty $02f7	                sty sramWorkspace.dataAddress+1
613	.8c7d		9c f8 02	stz $02f8	                stz sramWorkspace.dataAddress+2
614	.8c80		8d f9 02	sta $02f9	                sta sramWorkspace.dataAddress+3

616	.8c83						L8E72:
617	.8c83		2c ee 02	bit $02ee	                bit sramWorkspace.type
618	.8c86		10 38		bpl $8cc0	                bpl L8EAF
619	.8c88		a9 40		lda #$40	                lda #findOpenForRead
620	.8c8a		20 2c 8d	jsr $8d2c	                jsr sramOpenFile

622	.8c8d						L8E7C:
623	.8c8d		38		sec		                sec
624	.8c8e		20 fe 8c	jsr $8cfe	                jsr L8EED
625	.8c91		a9 04		lda #$04	                lda #gbpbGetBytesCurrentPTR
626	.8c93		20 25 8d	jsr $8d25	                jsr sramOSGBPB
627	.8c96		08		php		                php
628	.8c97		90 0e		bcc $8ca7	                bcc L8E96
629	.8c99		a2 fe		ldx #$fe	                ldx #$FE

631	.8c9b						L8E8A:
632	.8c9b		bd f1 01	lda $01f1,x	                lda sramWorkspace.length+0-$FE,x

634	.8c9e						L8E8D:
635	.8c9e		fd ce de	sbc $dece,x	                sbc hazel.moveOSGBPB+OSGBPBParameterBlock.count+0-$fe,x
636	.8ca1		9d f1 01	sta $01f1,x	                sta sramWorkspace.length+0-$FE,x
637	.8ca4		e8		inx		                inx
638	.8ca5		d0 f4		bne $8c9b	                bne L8E8A

640	.8ca7						L8E96:
641	.8ca7		20 af 8a	jsr $8aaf	                jsr L8CD9
642	.8caa		28		plp		                plp
643	.8cab		90 e0		bcc $8c8d	                bcc L8E7C

645	.8cad						L8E9C:
646	.8cad		ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle
647	.8cb0		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
648	.8cb3		a9 00		lda #$00	                lda #0
649	.8cb5		20 ce ff	jsr $ffce	                jsr OSFIND
650	.8cb8		68		pla		                pla
651	.8cb9		8d 34 fe	sta $fe34	                sta ACCCON
652	.8cbc		28		plp		                plp
656	.8cbd		4c d8 f9	jmp $f9d8	                jmp LF8D1

659							;-------------------------------------------------------------------------

661	.8cc0						L8EAF:
662	.8cc0		a9 80		lda #$80	                lda #findOpenForWrite
663	.8cc2		20 2c 8d	jsr $8d2c	                jsr sramOpenFile

665	.8cc5						L8EB4:
666	.8cc5		38		sec		                sec
667	.8cc6		a2 fe		ldx #$fe	                ldx #$FE

669	.8cc8						L8EB7:
670	.8cc8		bd f6 01	lda $01f6,x	                lda sramWorkspace.sramAddress+2-$FE,x
671	.8ccb		9d b2 ff	sta $ffb2,x	                sta @w sramTransferPointers-$fe,x
672	.8cce		fd fa 01	sbc $01fa,x	                sbc sramWorkspace.dataAddress+2-$FE,x
673	.8cd1		9d f6 01	sta $01f6,x	                sta sramWorkspace.sramAddress+2-$FE,x
674	.8cd4		e8		inx		                inx
675	.8cd5		d0 f1		bne $8cc8	                bne L8EB7
676	.8cd7		0d f4 02	ora $02f4	                ora sramWorkspace.sramAddress+2
677	.8cda		08		php		                php
678	.8cdb		20 fe 8c	jsr $8cfe	                jsr L8EED
679	.8cde		20 af 8a	jsr $8aaf	                jsr L8CD9
680	.8ce1		a9 02		lda #$02	                lda #gbpbPutBytesCurrentPTR
681	.8ce3		20 25 8d	jsr $8d25	                jsr sramOSGBPB
682	.8ce6		28		plp		                plp
683	.8ce7		90 c4		bcc $8cad	                bcc L8E9C
684	.8ce9		f0 c2		beq $8cad	                beq L8E9C
685	.8ceb		80 d8		bra $8cc5	                bra L8EB4

687							;-------------------------------------------------------------------------

696							;-------------------------------------------------------------------------
697							;
698							; OSBYTE 68 (&44) - Test RAM presence [MasRef D.2-28]
699							;
700	.8ced						osbyte44:
701	.8ced		a9 00		lda #$00	                lda #0
702	.8cef		a2 07		ldx #$07	                ldx #7
703	.8cf1						osbyte44Loop:
704	.8cf1		48		pha		                pha
705	.8cf2		20 be f9	jsr $f9be	                jsr isBankROM
706	.8cf5		68		pla		                pla
707	.8cf6		2a		rol a		                rol a
708	.8cf7		ca		dex		                dex
709	.8cf8		e0 04		cpx #$04	                cpx #4
710	.8cfa		b0 f5		bcs $8cf1	                bcs osbyte44Loop
711	.8cfc		aa		tax		                tax
712	.8cfd		60		rts		                rts

714							;-------------------------------------------------------------------------

716	.8cfe						L8EED:
717	.8cfe		ad d4 df	lda $dfd4	                lda hazel.moveSrcHandle
718	.8d01		8d c7 df	sta $dfc7	                sta hazel.moveOSGBPB.handle
719	.8d04		a2 01		ldx #$01	                ldx #1

721	.8d06						L8EF5:
722	.8d06		bd f6 02	lda $02f6,x	                lda sramWorkspace.dataAddress+0,x
723	.8d09		9d c8 df	sta $dfc8,x	                sta hazel.moveOSGBPB.addr,x
724	.8d0c		bd f8 02	lda $02f8,x	                lda sramWorkspace.dataAddress+2,x
725	.8d0f		b0 02		bcs $8d13	                bcs L8F02
726	.8d11		b5 b0		lda $b0,x	                lda sramTransferPointers.src,x

728	.8d13						L8F02:
729	.8d13		9d cc df	sta $dfcc,x	                sta hazel.moveOSGBPB.numBytes,x
730	.8d16		9d ef 02	sta $02ef,x	                sta sramWorkspace.length+0,x
731	.8d19		a9 ff		lda #$ff	                lda #$FF
732	.8d1b		9d ca df	sta $dfca,x	                sta hazel.moveOSGBPB.addr+2,x ; address is in I/O processor
733	.8d1e		9e ce df	stz $dfce,x	                stz hazel.moveOSGBPB.numBytes+2,x ; size is 16-bit quantity
734	.8d21		ca		dex		                dex
735	.8d22		10 e2		bpl $8d06	                bpl L8EF5
736	.8d24		60		rts		                rts

739							;-------------------------------------------------------------------------

741	.8d25						sramOSGBPB:
742	.8d25		a2 c7		ldx #$c7	                ldx #<hazel.moveOSGBPB
743	.8d27		a0 df		ldy #$df	                ldy #>hazel.moveOSGBPB
744	.8d29		4c d1 ff	jmp $ffd1	                jmp OSGBPB

747							;-------------------------------------------------------------------------

749	.8d2c						sramOpenFile:
750	.8d2c		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
751	.8d2f		ae ef 02	ldx $02ef	                ldx sramWorkspace.length+0
752	.8d32		ac f0 02	ldy $02f0	                ldy sramWorkspace.length+1
753	.8d35		20 ce ff	jsr $ffce	                jsr OSFIND
754	.8d38		aa		tax		                tax
755	.8d39		d0 13		bne $8d4e	                bne sramFileFound
756	.8d3b		20 2f ab	jsr $ab2f	                jsr doFollowingError
757	>8d3e		d6				                .byte $D6
758	>8d3f		46 69 6c 65 20 6e 6f 74		                .text "File not found"
	>8d47		20 66 6f 75 6e 64
759	>8d4d		00				                .byte 0

761	.8d4e						sramFileFound:
762	.8d4e		8d d4 df	sta $dfd4	                sta hazel.moveSrcHandle
763	.8d51						L8F40:
764	.8d51		ae f1 02	ldx $02f1	                ldx sramWorkspace.bank ; ROM number of interest
765	.8d54		2c ee 02	bit $02ee	                bit sramWorkspace.type
766	.8d57		10 07		bpl $8d60	                bpl rts8F4F ; taken if reading
767	.8d59		70 05		bvs $8d60	                bvs rts8F4F ; taken if pseudo addressing

769							                ; writing, absolute addressing
770	.8d5b						setROMXType6502:
771	.8d5b		a9 02		lda #$02	                lda #romType6502
772	.8d5d		9d a1 02	sta $02a1,x	                sta romInformationTable,x

774	.8d60						rts8F4F:
775	.8d60		60		rts		                rts

778							;-------------------------------------------------------------------------

780	.8d61						sramBank4567ModeMasks:
781	>8d61		01				                .byte 1         ; bank 4
782	>8d62		02				                .byte 2         ; bank 5
783	>8d63		04				                .byte 4         ; bank 6
784	>8d64		08				                .byte 8         ; bank 7

786							;-------------------------------------------------------------------------
787							;
788							; Check to see if next char on command line is +.
789							;
790							; Entry:
791							;
792							; (stringInputBufferAddress),y = next char on command line
793							;
794							; Exit:
795							;
796							; V=0 if not +
797							;
798							; V=1 if +. (stringInputBufferAddress),y = next non-space after the +

800	.8d65						checkForPlusInCommandLine:
801	.8d65		b8		clv		                clv
802	.8d66		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
803	.8d68		c9 2b		cmp #$2b	                cmp #'+'
804	.8d6a		d0 06		bne $8d72	                bne locret_8F61
805	.8d6c		2c 62 e3	bit $e362	                bit valueFF
806	.8d6f		20 68 f2	jsr $f268	                jsr incAndSkipSpaces

808	.8d72						locret_8F61:
809	.8d72		60		rts		                rts

812							;-------------------------------------------------------------------------
813							;
814							; Adjust sram transfer data pointer so that the same Y register can be
815							; used for both sram pointer and data pointer.
816							;
817							; Entry:
818							;
819							; X = offset of sram transfer sram pointer (0=src, 2=dest)
820							; Y = value to subtract from sram transfer data pointer
821							;
822							; C=1 = initialise sram transfer data pointer from data address
823							;
824							; Exit:
825							;
826							; sram transfer data pointer has had Y subtracted
827							;
828	.8d73						initSRAMTransferDataPointer: .proc
829	.8d73		da		phx		                phx
830							                ; select the non-sram data pointer
831	.8d74		8a		txa		                txa
832	.8d75		49 02		eor #$02	                eor #sramTransferPointers.src^sramTransferPointers.dest
833	.8d77		aa		tax		                tax
834	.8d78		90 0a		bcc $8d84	                bcc subtractY

836							                ; store data address in the non-sram pointer
837	.8d7a		ad f6 02	lda $02f6	                lda sramWorkspace.dataAddress+0
838	.8d7d		95 00		sta $00,x	                sta 0,x
839	.8d7f		ad f7 02	lda $02f7	                lda sramWorkspace.dataAddress+1
840	.8d82		95 01		sta $01,x	                sta 1,x

842	.8d84						subtractY:
843	.8d84		8c ed 02	sty $02ed	                sty sramWorkspace.temp ; sram address LSB
844	.8d87		b5 00		lda $00,x	                lda 0,x
845	.8d89		38		sec		                sec
846	.8d8a		ed ed 02	sbc $02ed	                sbc sramWorkspace.temp
847	.8d8d		95 00		sta $00,x	                sta 0,x
848	.8d8f		b0 02		bcs $8d93	                bcs +
849	.8d91		d6 01		dec $01,x	                dec 1,x
850	.8d93						+
851	.8d93		fa		plx		                plx
852	.8d94		60		rts		                rts
853							                .endproc

855							;-------------------------------------------------------------------------
856							;
857							; Get bank mode: pseudo, or absolute.
858							;
859							; (Only banks 4-7 can be used with pseudo addressing, but you can test
860							; any.)
861							;
862							; Entry:
863							;
864							; X = bank of interest
865							;
866							; Exit:
867							;
868							; A=$00 if absolute (C=1 as well, if bank could only ever be absolute)
869							;
870							; A=$40 if pseudo

872	.8d95						sramGetBankMode:
873	.8d95		e0 04		cpx #$04	                cpx #4
874	.8d97		90 1c		bcc $8db5	                bcc bankModeIsInherentlyAbsolute ; taken if <4
875	.8d99		e0 08		cpx #$08	                cpx #8
876	.8d9b		b0 18		bcs $8db5	                bcs bankModeIsInherentlyAbsolute ; taken if >=8

878	.8d9d						osbyte45:
879							                ; When entered as OSBYTE $45, the X register is bogus,
880							                ; so the table lookup could read junk and the AND
881							                ; could end up meaningless. But that doesn't matter:
882							                ; it's only the value in X on exit that's important.
883	.8d9d		ac 34 fe	ldy $fe34	                ldy ACCCON
884	.8da0		20 f1 ec	jsr $ecf1	                jsr selectHAZEL ; engage HAZEL
885	.8da3		bd 5d 8d	lda $8d5d,x	                lda sramBank4567ModeMasks-4,x ; acquire mask: 1/2/4/8 for banks
886							                                 ; 4/5/6/7 respectively
887	.8da6		ae de df	ldx $dfde	                ldx hazel.sramBankModes ; load current settings into X, in case this is OSBYTE $45
888	.8da9		2d de df	and $dfde	                and hazel.sramBankModes
889	.8dac		f0 02		beq $8db0	                beq +           ; taken with A=$00 if bank of interest
890							                                ; is absolute
891	.8dae		a9 40		lda #$40	                lda #$40        ; indicate pseudo
892	.8db0						+
893	.8db0		8c 34 fe	sty $fe34	                sty ACCCON
894	.8db3		18		clc		                clc
895	.8db4		60		rts		                rts

897	.8db5						bankModeIsInherentlyAbsolute:
898	.8db5		38		sec		                sec
899	.8db6		a9 00		lda #$00	                lda #0
900	.8db8		60		rts		                rts

:7	;******  Return to file: src/terminal.s65

977							                .include "osbyte_osword_table.s65"

:10	;******  Processing file: src/osbyte_osword_table.s65

1							; OSBYTE Dispatch Table
2							; =====================

4							; TODO structure probably the same as
5							; https://tobylobster.github.io/mos/mos/S-s15.html#SP1...

7							; entry:
8							;
9							; A = OSBYTE A
10							;
11							; X = OSBYTE X
12							;
13							; Y = OSBYTE Y
14							;
15							; ?originalA, ?originalX, ?originalY = OSBYTE arguments
16							;
17							; C=1
18							;
19							; N/Z set as per X
20							;

22	.8db9						osbyteAndOSWORDRoutineTable:
23							                ;Display MOS version D.2-18
24	>8db9		c8 ee				                .word osbyte00

26							                ;Write user flag D.2-18
27	>8dbb		28 f0				                .word osbyte01

29							                ;Specify input stream D.2-18
33	>8dbd		f7 eb				                .word osbyte02

36							                ;Specify output stream D.2-19
37	>8dbf		fd ef				                .word osbyte03

39							                ;Enable/disable cursor editing
40	>8dc1		30 f0				                .word osbyte04

42							                ;Write printer driver type D.2-20
43	>8dc3		16 f0				                .word osbyte05

45							                ;Write printer ignore character D.2-21
46	>8dc5		0d f0				                .word osbyte06

48							                ;Write RS423 receive rate D.2-21
52	>8dc7		b0 eb				                .word osbyte07

55							                ;Write RS423 transmit rate D.2-22
59	>8dc9		ae eb				                .word osbyte08

62							                ;Write duration of first colour D.2-22
63	>8dcb		d5 eb				                .word osbyte09

65							                ;Write duration of second colour D.2-22
66	>8dcd		d7 eb				                .word osbyte0A

68							                ;Write keyboard auto-repeat delay D.2-22
69	>8dcf		2e f0				                .word osbyte0B

71							                ;Write keyboard auto-repeat rate D.2-23
72	>8dd1		2c f0				                .word osbyte0C

74							                ;Disable event D.2-23
75	>8dd3		1d ec				                .word osbyte0D

77							                ;Enable event D.2-24
78	>8dd5		1e ec				                .word osbyte0E

80							                ;Flush buffer D.2-24
81	>8dd7		10 e9				                .word osbyte0F

83							                ;Write number of ADC channels D.2-25
87	>8dd9		2a ec				                .word osbyte10

90							                ;Write next ADC channel to be sampled D.2-25
94	>8ddb		69 e7				                .word osbyte11

97							                ;Reset soft keys D.2-26
98	>8ddd		7c f0				                .word osbyte12

100							                ;Wait for vertical sync D.2-26
101	>8ddf		4f f0				                .word osbyte13

103							                ;Restore default font definitions D.2-26
104	>8de1		38 97				                .word osbyte14

106							                ;Flush selected buffer D.2-27
107	>8de3		1c e9				                .word osbyte15

109							                ;Increment ROM polling semaphore D.2-27
110	>8de5		87 f1				                .word osbyte16

112							                ;Decrement ROM polling semaphore D.2-27
113	>8de7		8b f1				                .word osbyte17

115							                ; Reserved
116	>8de9		c7 ec				                .word osbyteUnused

118							                ;Restore a group of font definitions D.2-28
119	>8deb		78 f1				                .word selectTerminalROMAndOSBYTE19

121							                ; Test RAM presence D.2-28
123	>8ded		ed 8c				                .word osbyte44

128							                ; Test pseudo/absolute use of bank D.2-29
130	>8def		9d 8d				                .word osbyte45

135							                ;Write 1MHz bus selection status D.2-29
136	>8df1		d8 ed				                .word osbyte6B

138							                ;Write usage of main/shadow memory D.2-30
139	>8df3		dc ed				                .word osbyte6C

141							                ;Make temporary Filing System permanent D.2-30
142	>8df5		6b f1				                .word osbyte6D

144							                ;Unused
145	>8df7		c7 ec				                .word osbyteUnused

147							                ;Unused
148	>8df9		c7 ec				                .word osbyteUnused

150							                ;Select main/shadow memory for VDU access D.2-31
151	>8dfb		9b ec				                .word osbyte70

153							                ;Select main/shadow memory for display D.2-31
154	>8dfd		ab ec				                .word osbyte71

156							                ;Write usage of shadow memory D.2-31
157	>8dff		12 f0				                .word osbyte72

159							                ;Unused
160	>8e01		aa ff				                .word rtsFFAA

162							                ;Unused
163	>8e03		aa ff				                .word rtsFFAA

165							                ;Read VDU status D.2-32
166	>8e05		0d ef				                .word osbyte75

168							                ;Reflect keyboard status in keyboard LEDs D.2-33
169	>8e07		9a f1				                .word osbyte76

171							                ;Close all *SPOOL/*SPOOLON or *EXEC files D.2-33
173	>8e09		c1 93				                .word osbyte77

178							                ;Write keys pressed information D.2-33
179	>8e0b		20 f6				                .word osbyte78

181							                ;Keyboard scan D.2-33
182	>8e0d		17 f6				                .word callKEYV

184							                ;Keyboard scan from 16 decimal
185	>8e0f		28 f6				                .word osbyte7A

187							                ;Inform MOS of printer driver going dormant
188	>8e11		fa e8				                .word osbyte7B

190							                ;Clear escape condition
191	>8e13		95 eb				                .word osbyte7C

193							                ;Set escape condition
194	>8e15		96 eb				                .word osbyte7D

196							                ;Acknowledge escape condition
197	>8e17		7b eb				                .word osbyte7E

199							                ;Check for end of file on an opened file
200	>8e19		45 f1				                .word osbyte7F

202							                ;Read ADC channel or get buffer status
206	>8e1b		78 ec				                .word osbyte80

209							                ;Read key with time limit
210	>8e1d		37 ec				                .word osbyte81

212							                ;Read machine high order address
213	>8e1f		4e ec				                .word osbyte82

215							                ;Read Operating System High Water Mark (OSHWM)
216	>8e21		1a f6				                .word osbyte83

218							                ;Read top of user RAM
219	>8e23		1c f1				                .word osbyte84

221							                ;Read top of user RAM for given mode
222	>8e25		32 f1				                .word osbyte85

224							                ;Read text cursor position
225	>8e27		6b e2				                .word osbyte86

227							                ;Read screen mode and character at text cursor position
228	>8e29		3e f1				                .word osbyte87

230							                ;Execute user code
231	>8e2b		76 eb				                .word osbyte88

234	>8e2d		a4 eb				                .word osbyte89 ;Switch cassette motor relay

241							                ;Insert character code into buffer
242	>8e2f		04 ea				                .word osbyte8A

244							                ;Write Filing System options
245	>8e31		44 f1				                .word osbyte8B

248	>8e33		d1 ec				                .word osbyte8C8D ;Select Cassette Filing System

254							                ;Select ROM Filing System
255	>8e35		d1 ec				                .word osbyte8C8D

257							                ;Enter language ROM
258	>8e37		79 e4				                .word osbyte8E

260							                ;Issue paged ROM service request
261	>8e39		3d ed				                .word osbyte8F

263							                ;Set vertical screen shift and interlace option
264	>8e3b		dc f2				                .word osbyte90

266							                ;Get character from buffer
267	>8e3d		b9 e9				                .word osbyte91

269							                ;Read from FRED (&FC00 - &FCFF)
270	>8e3f		b3 f5				                .word osbyte92

272							                ;Write to FRED (&FC00 - &FCFF)
273	>8e41		f7 f2				                .word osbyte93

275							                ;Read from JIM (&FD00 - &FDFF)
276	>8e43		c3 f5				                .word osbyte94

278							                ;Write to JIM (&FD00 - &FDFF)
279	>8e45		ed f2				                .word osbyte95

281							                ;Read from SHEILA (&FE00 - &FEFF)
282	>8e47		ab ff				                .word osbyte96

284							                ;Write to SHEILA (&FE00 - &FEFF)
285	>8e49		f2 f2				                .word osbyte97

287							                ;Examine buffer status
288	>8e4b		b4 e9				                .word osbyte98

290							                ;Insert character code into buffer checking for escape
294	>8e4d		48 ea				                .word osbyte99

297							                ;Write video ULA control register
298	>8e4f		b9 f1				                .word osbyte9A

300							                ;Write to video ULA palette register and copy
301	>8e51		ca f1				                .word osbyte9B

303							                ;Read/write serial ACIA control register and copy
307	>8e53		df e8				                .word osbyte9C

310							                ;Write byte across Tube
311	>8e55		af ff				                .word osbyte9D

313							                ;reserved for the speech system
314	>8e57		c7 ec				                .word osbyteUnused

316							                ;reserved for the speech system
317	>8e59		c7 ec				                .word osbyteUnused

319							                ;Read VDU variable value
320	>8e5b		59 f0				                .word osbyteA0

322							                ;Read CMOS RAM
324	>8e5d		9a 96				                .word readCMOSByte

329							                ;Write CMOS RAM
331	>8e5f		c8 96				                .word writeCMOSByte

336							                ;reserved for applications software
337	>8e61		c7 ec				                .word osbyteUnused

339							                ;Check processor type
340	>8e63		03 e5				                .word osbyteA4

342							                ;Read output cursor position
343	>8e65		3f e2				                .word osbyteA5

345							                ;handle osbyte A6-FF
346	>8e67		35 f0				                .word osbyteA6

348							                ;*LINE - not part of the above table???
349	>8e69		78 eb				                .word callUSERV

351							;-------------------------------------------------------------------------
352							;
353							; OSWORD dispatch table. Must follow on from the OSBYTE table.
354							;
355							; entry:
356							;
357							; A = 0th byte of parameter block
358							;
359							; X = OSWORD X
360							;
361							; Y = 0
362							;
363							; ?originalA, ?originalX, ?originalY = OSWORD arguments
364							;
365							; C=1
366							;
367							; N/Z set as per X
368							;
369	.8e6b						oswordRoutineTable:

371							;Read line from input stream to memory
372	>8e6b		89 ef				                .word osword00

374							                ;Read system clock
375	>8e6d		5c ef				                .word osword01

377							                ;Write system clock
378	>8e6f		6f ef				                .word osword02

380							                ;Read interval timer
381	>8e71		58 ef				                .word osword03

383							                ;Write interval timer
384	>8e73		6b ef				                .word osword04

386							                ;Read byte from I/O processor memory
387	>8e75		b4 ee				                .word osword05

389							                ;Write byte to I/O processor memory
390	>8e77		ea ed				                .word osword06

392							                ;Generate a sound
393	>8e79		d5 ee				                .word osword07

395							                ;Define a sound envelope
396	>8e7b		36 ef				                .word osword08

398							                ;Read pixel logical colour
399	>8e7d		b2 f0				                .word osword09

401							                ;Read a character definition
402	>8e7f		d7 f0				                .word osword0A

404							                ;Read the palette
405	>8e81		a1 f0				                .word osword0B

407							                ;Write the palette
408	>8e83		ef f0				                .word osword0C

410							                ;Read current and previous graphics cursor positions
411	>8e85		fd f0				                .word osword0D

413							                ;Read CMOS clock
414	>8e87		08 ee				                .word selectTerminalROMAndOSWORD0E

416							                ;Write CMOS clock
418	>8e89		39 94				                .word osword0F

424	.8e8b						osword42AndAboveRoutineTable:
425							                ; Sideways RAM Block Transfer
427	>8e8b		c8 89				                .word osword42

432							                ; Sideways RAM Load/Save
434	>8e8d		3f 8c				                .word osword43

:7	;******  Return to file: src/terminal.s65

993							;-------------------------------------------------------------------------

1005							;-------------------------------------------------------------------------

1127							;-------------------------------------------------------------------------
1128							;
1129							; [MasRef G.5-8]
1130							;
1131	.8e8f						starPRINT:
1132	.8e8f		a9 c0		lda #$c0	                lda #$C0
1133	.8e91		8d c2 df	sta $dfc2	                sta hazel.fsFlags
1134	.8e94		80 12		bra $8ea8	                bra L8ED2

1136							;-------------------------------------------------------------------------

1138	.8e96						starLIST:
1139	.8e96		4e c2 df	lsr $dfc2	                lsr hazel.fsFlags
1140	.8e99		9c c3 df	stz $dfc3	                stz hazel.lineNumberBCD+0
1141	.8e9c		9c c4 df	stz $dfc4	                stz hazel.lineNumberBCD+1
1142	.8e9f		80 04		bra $8ea5	                bra L8ECF

1144							;-------------------------------------------------------------------------

1146	.8ea1						starTYPE:
1147	.8ea1		38		sec		                sec
1148	.8ea2		6e c2 df	ror $dfc2	                ror hazel.fsFlags
1149	.8ea5						L8ECF:
1150	.8ea5		4e c2 df	lsr $dfc2	                lsr hazel.fsFlags
1151	.8ea8						L8ED2:
1152	.8ea8		9c c5 df	stz $dfc5	                stz hazel.lastCharPrinted
1153	.8eab		20 5f a5	jsr $a55f	                jsr openFileForReading
1154	.8eae						L8ED8:
1155	.8eae		24 ff		bit $ff		                bit $FF
1156	.8eb0		30 52		bmi $8f04	                bmi handleESCAPEWithFileOpen
1157	.8eb2		20 d7 ff	jsr $ffd7	                jsr OSBGET
1158	.8eb5		b0 2e		bcs $8ee5	                bcs closeFile
1159	.8eb7		2c c2 df	bit $dfc2	                bit hazel.fsFlags
1160	.8eba		70 05		bvs $8ec1	                bvs L8EEB
1161	.8ebc		48		pha		                pha
1162	.8ebd		20 cc 91	jsr $91cc	                jsr printLineNumber
1163	.8ec0		68		pla		                pla
1164	.8ec1						L8EEB:
1165	.8ec1		2c c2 df	bit $dfc2	                bit hazel.fsFlags
1166	.8ec4		30 14		bmi $8eda	                bmi L8F04
1167	.8ec6		c9 0d		cmp #$0d	                cmp #$0D
1168	.8ec8		f0 20		beq $8eea	                beq L8F14
1169	.8eca		c9 0a		cmp #$0a	                cmp #$0A
1170	.8ecc		f0 1c		beq $8eea	                beq L8F14
1171	.8ece		8d c5 df	sta $dfc5	                sta hazel.lastCharPrinted
1172	.8ed1		c9 22		cmp #$22	                cmp #'"'
1173	.8ed3		f0 05		beq $8eda	                beq L8F04
1174	.8ed5		20 04 99	jsr $9904	                jsr printGSREADChar
1175	.8ed8		80 03		bra $8edd	                bra L8F07

1177	.8eda						L8F04:
1178	.8eda		20 ee ff	jsr $ffee	                jsr OSWRCH
1179	.8edd						L8F07:
1180	.8edd		20 10 8f	jsr $8f10	                jsr bgetAndCheckForESCAPE
1181	.8ee0		90 df		bcc $8ec1	                bcc L8EEB
1182	.8ee2						printNewLineThenCloseFile:
1183	.8ee2		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1184	.8ee5						closeFile:
1185	.8ee5		a9 00		lda #$00	                lda #$00
1186	.8ee7		4c ce ff	jmp $ffce	                jmp OSFIND

1188	.8eea						L8F14:
1189	.8eea		cd c5 df	cmp $dfc5	                cmp hazel.lastCharPrinted
1190	.8eed		f0 10		beq $8eff	                beq L8F29
1191	.8eef		48		pha		                pha
1192	.8ef0		ad c5 df	lda $dfc5	                lda hazel.lastCharPrinted
1193	.8ef3		c9 0d		cmp #$0d	                cmp #$0D
1194	.8ef5		f0 13		beq $8f0a	                beq L8F34
1195	.8ef7		c9 0a		cmp #$0a	                cmp #$0A
1196	.8ef9		f0 0f		beq $8f0a	                beq L8F34
1197	.8efb		68		pla		                pla
1198	.8efc		8d c5 df	sta $dfc5	                sta hazel.lastCharPrinted
1199	.8eff						L8F29:
1200	.8eff		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1201	.8f02		80 aa		bra $8eae	                bra L8ED8

1203							;-------------------------------------------------------------------------
1204							;
1205							; Tidily handle ESCAPE when a file is open during *DUMP or whatever.
1206							; Prints a new line, closes the file, then does an Escape error.
1207							;
1208							; entry:
1209							;
1210							; Y = file handle
1211							;
1212	.8f04						handleESCAPEWithFileOpen:
1213	.8f04		20 e2 8e	jsr $8ee2	                jsr printNewLineThenCloseFile
1214	.8f07		4c d3 a8	jmp $a8d3	                jmp escapeError

1216							;-------------------------------------------------------------------------

1218	.8f0a						L8F34:
1219	.8f0a		68		pla		                pla
1220	.8f0b		9c c5 df	stz $dfc5	                stz hazel.lastCharPrinted
1221	.8f0e		80 cd		bra $8edd	                bra L8F07

1223							;-------------------------------------------------------------------------
1224							;
1225							; Does an OSBGET and handles ESCAPE.
1226							;
1227							; entry:
1228							;
1229							; Y = file handle
1230							;
1231							; exit:
1232							;
1233							; A = byte read
1234							; C=1 if EOF
1235							; (as per OSBGET)
1236							;
1237	.8f10						bgetAndCheckForESCAPE:
1238	.8f10		20 d7 ff	jsr $ffd7	                jsr OSBGET
1239	.8f13		24 ff		bit $ff		                bit $FF
1240	.8f15		30 ed		bmi $8f04	                bmi handleESCAPEWithFileOpen
1241	.8f17		60		rts		                rts

1243							;-------------------------------------------------------------------------
1244							;
1245							; *DUMP [MasRef G.5-4]
1246							;
1247	.8f18						starDUMP:
1248	.8f18		86 f2		stx $f2		                stx stringInputBufferAddress+0
1249	.8f1a		84 f3		sty $f3		                sty stringInputBufferAddress+1
1250	.8f1c		a2 00		ldx #$00	                ldx #$00
1251	.8f1e		20 5a 92	jsr $925a	                jsr clearOSFILEParameterBlockDWORD
1252	.8f21		a2 04		ldx #$04	                ldx #$04
1253	.8f23		20 5a 92	jsr $925a	                jsr clearOSFILEParameterBlockDWORD
1254	.8f26		a0 00		ldy #$00	                ldy #$00
1255	.8f28		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
1256	.8f2b		20 d7 f1	jsr $f1d7	                jsr gsinitForFilenameParsing
1257	.8f2e						L8F58:
1258	.8f2e		20 e9 f1	jsr $f1e9	                jsr gsreadEntryPoint
1259	.8f31		90 fb		bcc $8f2e	                bcc L8F58
1260	.8f33		f0 1a		beq $8f4f	                beq L8F79
1261	.8f35		a2 00		ldx #$00	                ldx #$00
1262	.8f37		20 f9 92	jsr $92f9	                jsr parseHexAddressFromCommandLine

1264	.8f3a		a2 03		ldx #$03	                ldx #$03
1265	.8f3c						-
1266	.8f3c		bd ed 02	lda $02ed,x	                lda osfileParameterBlock+0,x
1267	.8f3f		9d f1 02	sta $02f1,x	                sta osfileParameterBlock+4,x
1268	.8f42		ca		dex		                dex
1269	.8f43		10 f7		bpl $8f3c	                bpl -

1271	.8f45		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
1272	.8f48		f0 05		beq $8f4f	                beq L8F79
1273	.8f4a		a2 04		ldx #$04	                ldx #$04
1274	.8f4c		20 f9 92	jsr $92f9	                jsr parseHexAddressFromCommandLine
1275	.8f4f						L8F79:
1276	.8f4f		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
1277	.8f51		a6 f2		ldx $f2		                ldx stringInputBufferAddress+0
1278	.8f53		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
1279	.8f56		20 5f a5	jsr $a55f	                jsr openFileForReading

1281	.8f59		a9 02		lda #$02	                lda #argsFileGetEXT
1282	.8f5b		20 ff 93	jsr $93ff	                jsr callOSARGSWithBuffer

1284	.8f5e		a2 03		ldx #$03	                ldx #$03
1285	.8f60						L8F8A:
1286	.8f60		b5 a8		lda $a8,x	                lda osargsBuffer,x
1287	.8f62		dd ed 02	cmp $02ed,x	                cmp osfileParameterBlock+0,x
1288	.8f65		90 6a		bcc $8fd1	                bcc L8FFB
1289	.8f67		d0 03		bne $8f6c	                bne L8F96
1290	.8f69		ca		dex		                dex
1291	.8f6a		10 f4		bpl $8f60	                bpl L8F8A
1292	.8f6c						L8F96:
1293	.8f6c		a2 03		ldx #$03	                ldx #$03
1294	.8f6e						-
1295	.8f6e		bd ed 02	lda $02ed,x	                lda osfileParameterBlock+0,x
1296	.8f71		95 a8		sta $a8,x	                sta osargsBuffer,x
1297	.8f73		ca		dex		                dex
1298	.8f74		10 f8		bpl $8f6e	                bpl -
1299	.8f76		20 fd 93	jsr $93fd	                jsr setFilePointerFromOSARGSBuffer
1300	.8f79						L8FA3:
1301	.8f79		a2 00		ldx #$00	                ldx #$00
1302	.8f7b		20 d7 ff	jsr $ffd7	                jsr OSBGET
1303	.8f7e		b0 46		bcs $8fc6	                bcs L8FF0
1304	.8f80		20 18 92	jsr $9218	                jsr L9239
1305	.8f83		48		pha		                pha
1306	.8f84		ad f1 02	lda $02f1	                lda osfileParameterBlock+4
1307	.8f87		29 07		and #$07	                and #$07
1308	.8f89		f0 15		beq $8fa0	                beq L8FCA
1309	.8f8b		5a		phy		                phy
1310	.8f8c		a8		tay		                tay
1311	.8f8d						L8FB7:
1312	.8f8d		5a		phy		                phy
1313	.8f8e		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
1314	>8f91		20 20 20 00			                .text "   ",0
1315	.8f95		7a		ply		                ply
1316	.8f96		a9 20		lda #$20	                lda #$20
1317	.8f98		9d f5 02	sta $02f5,x	                sta osfileParameterBlock+8,x
1318	.8f9b		e8		inx		                inx
1319	.8f9c		88		dey		                dey
1320	.8f9d		d0 ee		bne $8f8d	                bne L8FB7
1321	.8f9f		7a		ply		                ply
1322	.8fa0						L8FCA:
1323	.8fa0		68		pla		                pla
1324	.8fa1						L8FCB:
1325	.8fa1		48		pha		                pha
1326	.8fa2		c9 20		cmp #$20	                cmp #32
1327	.8fa4		90 04		bcc $8faa	                bcc nonPrintable
1328	.8fa6		c9 7f		cmp #$7f	                cmp #127
1329	.8fa8		90 02		bcc $8fac	                bcc L8FD6                    ;taken if printable
1330	.8faa						nonPrintable:
1331	.8faa		a9 2e		lda #$2e	                lda #'.'          ;placeholder for non-printable chars
1332	.8fac						L8FD6:
1333	.8fac		9d f5 02	sta $02f5,x	                sta osfileParameterBlock+8,x
1334	.8faf		68		pla		                pla
1335	.8fb0		20 a8 a8	jsr $a8a8	                jsr printSpaceThenPrintHexByte
1336	.8fb3		e8		inx		                inx
1337	.8fb4		20 27 92	jsr $9227	                jsr L9248
1338	.8fb7		ad f1 02	lda $02f1	                lda osfileParameterBlock+4
1339	.8fba		29 07		and #$07	                and #$07
1340	.8fbc		f0 0b		beq $8fc9	                beq L8FF3
1341	.8fbe		20 10 8f	jsr $8f10	                jsr bgetAndCheckForESCAPE
1342	.8fc1		90 de		bcc $8fa1	                bcc L8FCB
1343	.8fc3		20 36 92	jsr $9236	                jsr L9257
1344	.8fc6						L8FF0:
1345	.8fc6		4c e5 8e	jmp $8ee5	                jmp closeFile

1347	.8fc9						L8FF3:
1348	.8fc9		20 36 92	jsr $9236	                jsr L9257
1349	.8fcc		80 ab		bra $8f79	                bra L8FA3

1351	.8fce						L8FF8:
1352	.8fce		4c 67 a5	jmp $a567	                jmp notFoundError

1354	.8fd1						L8FFB:
1355	.8fd1		20 e5 8e	jsr $8ee5	                jsr closeFile
1356	.8fd4		20 2f ab	jsr $ab2f	                jsr doFollowingError
1357	>8fd7		b7 4f 75 74 73 69 64 65		                .text $b7,"Outside file",0
	>8fdf		20 66 69 6c 65 00

1359							;-------------------------------------------------------------------------
1360							;
1361							; *BUILD
1362							;
1363	.8fe5						starBUILD:
1364	.8fe5		4e c2 df	lsr $dfc2	                lsr hazel.fsFlags            ;clear bit 7 of fsFlags
1365	.8fe8		80 04		bra $8fee	                bra starBUILDOrAPPEND

1367							;-------------------------------------------------------------------------
1368							;
1369							; *APPEND
1370							;
1371	.8fea						starAPPEND:
1372	.8fea		38		sec		                sec
1373	.8feb		6e c2 df	ror $dfc2	                ror hazel.fsFlags            ;set bit 7 of fsFlags
1374	.8fee						starBUILDOrAPPEND:
1375							                ; bit 7 of fsFlags indicates *BUILD (clear) or *APPEND
1376							                ; (set).
1377	.8fee		9c c3 df	stz $dfc3	                stz hazel.lineNumberBCD+0    ;reset line number
1378	.8ff1		9c c4 df	stz $dfc4	                stz hazel.lineNumberBCD+1    ;reset line number
1379	.8ff4		a9 80		lda #$80	                lda #$80                     ;open for output. Assume *BUILD
1380	.8ff6		2c c2 df	bit $dfc2	                bit hazel.fsFlags            ;test *BUILD/*APPEND
1381	.8ff9		10 02		bpl $8ffd	                bpl +                        ;branch taken if *BUILD
1382	.8ffb		a9 c0		lda #$c0	                lda #$C0                     ;*APPEND, so open for update
1383	.8ffd						+
1384	.8ffd		20 ce ff	jsr $ffce	                jsr OSFIND                   ;open the file
1385	.9000		a8		tay		                tay                          ;Y=file handle
1386	.9001		f0 cb		beq $8fce	                beq L8FF8                    ;branch taken if open failed
1387	.9003		8c ed 02	sty $02ed	                sty osfileParameterBlock+0   ;save file handle
1388	.9006		20 f8 93	jsr $93f8	                jsr setPTRToEOF ;move to EOF (effective no-op when *BUILD)
1389	.9009						L9033:
1390	.9009		20 cc 91	jsr $91cc	                jsr printLineNumber
1391	.900c						L9036:
1395	.900c		a9 00		lda #$00	                lda #0
1396	.900e		a2 92		ldx #$92	                ldx #<starBuildOrAPPENDOSWORD0Parameters
1397	.9010		a0 90		ldy #$90	                ldy #>starBuildOrAPPENDOSWORD0Parameters
1398	.9012		20 f1 ff	jsr $fff1	                jsr OSWORD
1400	.9015		08		php		                php
1401	.9016		90 0f		bcc $9027	                bcc L904B
1402							                ; Handle ESCAPE
1403	.9018		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1404	.901b		a9 0d		lda #$0d	                lda #$0D
1405	.901d		99 00 dc	sta $dc00,y	                sta hazel.commandLine,y      ;terminate current line
1406	.9020						L9044:
1407	.9020		5a		phy		                phy                          ;save line length
1408	.9021		a9 7e		lda #$7e	                lda #$7E
1409	.9023		20 f4 ff	jsr $fff4	                jsr OSBYTE                   ;acknowledge ESCAPE
1410	.9026		7a		ply		                ply                          ;restore line length
1411	.9027						L904B:
1412	.9027		98		tya		                tya                          ;A=line length
1413	.9028		f0 50		beq $907a	                beq L909E                    ;taken if line empty
1414	.902a		20 87 90	jsr $9087	                jsr setStringInputBufferToCommandLine
1415	.902d		a0 00		ldy #$00	                ldy #$00
1416	.902f		a2 00		ldx #$00	                ldx #$00
1417	.9031						L9055:
1418	.9031		20 06 f2	jsr $f206	                jsr LF29C
1419	.9034		9d 00 dc	sta $dc00,x	                sta hazel.commandLine,x
1420	.9037		a9 01		lda #$01	                lda #stringInputOptions.goodString
1421	.9039		24 e4		bit $e4		                bit stringInputOptions
1422	.903b		d0 0b		bne $9048	                bne L906C
1423	.903d		a9 07		lda #$07	                lda #7
1424	.903f		20 ee ff	jsr $ffee	                jsr OSWRCH                   ;beep
1425	.9042		20 d6 91	jsr $91d6	                jsr L91F5
1426	.9045		28		plp		                plp
1427	.9046		80 c4		bra $900c	                bra L9036

1429	.9048						L906C:
1430	.9048		e8		inx		                inx
1431	.9049		90 e6		bcc $9031	                bcc L9055
1432	.904b		28		plp		                plp
1433	.904c		90 01		bcc $904f	                bcc L9073
1434	.904e		ca		dex		                dex
1435	.904f						L9073:
1436	.904f		08		php		                php
1437	.9050		da		phx		                phx
1438	.9051		a2 0b		ldx #$0b	                ldx #size(OSGBPBParameterBlock)-2
1439	.9053						L9077:
1440	.9053		9e ee 02	stz $02ee,x	                stz osfileParameterBlock+1,x
1441	.9056		ca		dex		                dex
1442	.9057		10 fa		bpl $9053	                bpl L9077
1443	.9059		fa		plx		                plx
1444	.905a		8e f2 02	stx $02f2	                stx osfileParameterBlock+OSGBPBParameterBlock.count+0
1446	.905d		a9 dc		lda #$dc	                lda #>hazel.commandLine
1447	.905f		8d ef 02	sta $02ef	                sta osfileParameterBlock+OSGBPBParameterBlock.address+1
1448	.9062		ce f0 02	dec $02f0	                dec osfileParameterBlock+OSGBPBParameterBlock.address+2
1449	.9065		ce f1 02	dec $02f1	                dec osfileParameterBlock+OSGBPBParameterBlock.address+3
1450	.9068		a9 02		lda #$02	                lda #gbpbPutBytesCurrentPTR
1451	.906a		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
1452	.906c		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1453	.906e		20 d1 ff	jsr $ffd1	                jsr OSGBPB
1454	.9071		28		plp		                plp
1455	.9072		90 95		bcc $9009	                bcc L9033
1456	.9074						L9098:
1457	.9074		ac ed 02	ldy $02ed	                ldy osfileParameterBlock+0
1458	.9077		4c e5 8e	jmp $8ee5	                jmp closeFile

1460	.907a						L909E:
1461	.907a		28		plp		                plp
1462	.907b		b0 f7		bcs $9074	                bcs L9098
1463	.907d		a9 0d		lda #$0d	                lda #13
1464	.907f		ac ed 02	ldy $02ed	                ldy osfileParameterBlock
1465	.9082		20 d4 ff	jsr $ffd4	                jsr OSBPUT
1466	.9085		80 82		bra $9009	                bra L9033

1468	.9087						setStringInputBufferToCommandLine:
1469	.9087		a9 41		lda #$41	                lda #$41
1470	.9089		85 e4		sta $e4		                sta $E4
1472	.908b		64 f2		stz $f2		                stz stringInputBufferAddress+0
1473	.908d		a9 dc		lda #$dc	                lda #>hazel.commandLine
1474	.908f		85 f3		sta $f3		                sta stringInputBufferAddress+1
1475	.9091		60		rts		                rts

1477							;-------------------------------------------------------------------------

1480	.9092						starBuildOrAPPENDOSWORD0Parameters:
1481	>9092		00 dc				                .word hazel.commandLine      ;address
1482	>9094		f0				                .byte $f0                    ;max # chars
1483	>9095		00				                .byte 0                      ;min char
1484	>9096		ff				                .byte 255                    ;max char

1487							;-------------------------------------------------------------------------
1488							;
1489							; *MOVE
1490							;
1491	.9097						starMOVE:
1492	.9097		ad 34 fe	lda $fe34	                lda ACCCON                    ; Save ACCCON
1493	.909a		8d dc df	sta $dfdc	                sta hazel.oldACCCON
1494	.909d		48		pha		                pha                          ; Save ACCCON and command line pointer
1495	.909e		da		phx		                phx
1496	.909f		5a		phy		                phy
1497	.90a0		a0 80		ldy #$80	                ldy #$80                     ; Top of available shadow memory at &8000
1498	.90a2		a5 d0		lda $d0		                lda STATE                      ; Get VDU status
1499	.90a4		89 10		bit #$10	                bit #$10                     ; Jump if not shadow screen, spare up to &8000
1500	.90a6		f0 07		beq $90af	                beq L90CE
1501							; Shadow screen selected
1502	.90a8		20 22 f1	jsr $f122	                jsr LF1C0                ; Get screen bottom to XY
1503	.90ab		c0 30		cpy #$30	                cpy #$30                     ; Screen at &3000, no spare memory, jump to use Hazel
1504	.90ad		f0 14		beq $90c3	                beq L90E2

1506							; Non-shadow or small shadow screen selected
1507							; Y=top of available memory in shadow memory
1508	.90af						L90CE:
1509	.90af		a9 30		lda #$30	                lda #$30                     ; &3000=start of shadow memory
1510	.90b1		8d d6 df	sta $dfd6	                sta hazel.moveBufferMSB
1511	.90b4		a9 04		lda #$04	                lda #ACCCON.X
1512	.90b6		0c 34 fe	tsb $fe34	                tsb ACCCON
1513	.90b9		8d dd df	sta $dfdd	                sta hazel.hasACCCONChanged      ; set 'ACCCON changed'
1514	.90bc		98		tya		                tya                          ; A=length of space in shadow memory
1515	.90bd		38		sec		                sec
1516	.90be		ed d6 df	sbc $dfd6	                sbc hazel.moveBufferMSB
1517	.90c1		80 07		bra $90ca	                bra L90E9

1519							; No shadow memory available, use Hazel
1520	.90c3						L90E2:
1521	.90c3		a9 dd		lda #$dd	                lda #$DD                     ; Buffer at &DD00
1522	.90c5		8d d6 df	sta $dfd6	                sta hazel.moveBufferMSB
1523	.90c8		a9 02		lda #$02	                lda #$02                     ; Buffer length=&200

1525							; &DFD6=high byte of buffer address
1526							; A=high byte of buffer length
1527	.90ca						L90E9:
1528	.90ca		8d d7 df	sta $dfd7	                sta hazel.moveNumPages      ; Store buffer length
1529	.90cd		7a		ply		                ply                          ; Get command line pointer
1530	.90ce		fa		plx		                plx
1531	.90cf		da		phx		                phx
1532	.90d0		5a		phy		                phy
1533	.90d1		a9 40		lda #$40	                lda #$40                     ; Open source file
1534	.90d3		20 ce ff	jsr $ffce	                jsr OSFIND
1535	.90d6		a8		tay		                tay                          ; Store source handle, jump if not found
1536	.90d7		8c d4 df	sty $dfd4	                sty hazel.moveSrcHandle
1537	.90da		f0 39		beq $9115	                beq L9134
1538	.90dc		7a		ply		                ply                          ; Get command line back again
1539	.90dd		fa		plx		                plx
1540	.90de		86 f2		stx $f2		                stx $F2
1541	.90e0		84 f3		sty $f3		                sty $F3
1542	.90e2		da		phx		                phx                          ; And save it again
1543	.90e3		5a		phy		                phy
1544	.90e4		a0 00		ldy #$00	                ldy #$00                     ; Step past first parameter
1545	.90e6		20 d7 f1	jsr $f1d7	                jsr gsinitForFilenameParsing
1546	.90e9						L9108:
1547	.90e9		20 e9 f1	jsr $f1e9	                jsr gsreadEntryPoint     ;
1548	.90ec		90 fb		bcc $90e9	                bcc L9108
1549	.90ee		98		tya		                tya                          ; Save address of dest filename
1550	.90ef		18		clc		                clc
1551	.90f0		65 f2		adc $f2		                adc $F2
1552	.90f2		8d d8 df	sta $dfd8	                sta hazel.moveDestName+0
1553	.90f5		aa		tax		                tax
1554	.90f6		a5 f3		lda $f3		                lda $F3
1555	.90f8		69 00		adc #$00	                adc #$00
1556	.90fa		8d d9 df	sta $dfd9	                sta hazel.moveDestName+1
1557	.90fd		a8		tay		                tay                          ; Temporary filing system flag
1558	.90fe		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
1559	.9101		a9 80		lda #$80	                lda #$80                     ; Open destination file
1560	.9103		20 ce ff	jsr $ffce	                jsr OSFIND
1561	.9106		a8		tay		                tay                          ; Store dest handle, jump if opened
1562	.9107		8c d5 df	sty $dfd5	                sty hazel.moveDestHandle
1563	.910a		d0 0c		bne $9118	                bne L9137

1565							; Couldn't open destination
1566	.910c		ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle      ; Get source handle and clear it
1567	.910f		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
1568	.9112		20 ce ff	jsr $ffce	                jsr OSFIND                   ; Close source file
1569	.9115						L9134:
1570	.9115		4c 67 a5	jmp $a567	                jmp notFoundError                    ; Jump to 'Not found' error

1572							; Source and dest opened
1573							; ----------------------
1574							; Build OSGBPB source file control block at &02ED
1575							; and destination control block at &DFC7
1576	.9118						L9137:
1577	.9118		a2 07		ldx #$07	                ldx #$07
1578	.911a						L9139:
1579	.911a		9e ee 02	stz $02ee,x	                stz @w osfileParameterBlock+OSGBPBParameterBlock.address,x ; Addr=0, Num=0
1580	.911d		9e c8 df	stz $dfc8,x	                stz hazel.moveOSGBPB+1,x
1581	.9120		ca		dex		                dex
1582	.9121		10 f7		bpl $911a	                bpl L9139
1583	.9123		ad d4 df	lda $dfd4	                lda hazel.moveSrcHandle      ; Source handle
1584	.9126		8d ed 02	sta $02ed	                sta osfileParameterBlock+OSGBPBParameterBlock.handle
1585	.9129		ad d6 df	lda $dfd6	                lda hazel.moveBufferMSB      ; Buffer address
1586	.912c		8d ef 02	sta $02ef	                sta osfileParameterBlock+OSGBPBParameterBlock.address+1
1587	.912f		8d c9 df	sta $dfc9	                sta hazel.moveOSGBPB.addr+1
1588	.9132		ad d7 df	lda $dfd7	                lda hazel.moveNumPages
1589	.9135		8d f3 02	sta $02f3	                sta osfileParameterBlock+OSGBPBParameterBlock.count+1
1590	.9138		8d cd df	sta $dfcd	                sta hazel.moveOSGBPB.numBytes+1
1591	.913b		ce f0 02	dec $02f0	                dec osfileParameterBlock+OSGBPBParameterBlock.address+2 ; Source addr=&FFFFxxxx
1592	.913e		ce f1 02	dec $02f1	                dec osfileParameterBlock+OSGBPBParameterBlock.address+3
1593	.9141		ce ca df	dec $dfca	                dec hazel.moveOSGBPB.addr+2
1594	.9144		ce cb df	dec $dfcb	                dec hazel.moveOSGBPB.addr+3

1596							; Should use &FFFExxxx and let filing system select correct memory
1597							; Unfortunately, CFS/RFS and DFS do not recognise &FFFExxxx, so
1598							; *MOVE has to do it itself, causing problems for filing systems
1599							; that /do/ recognise &FFFExxxx where they have to remember to
1600							; *do* *nothing* for &FFFFxxxx instead of select main memory as
1601							; &FFFFxxxx implies.

1603	.9147		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock                     ; XY=>source OSGBPB block
1604	.9149		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1605	.914b		a9 04		lda #$04	                lda #$04                     ; Read data from source
1606	.914d		20 d1 ff	jsr $ffd1	                jsr OSGBPB
1607	.9150		08		php		                php                          ; Jump if not at end of file
1608	.9151		90 11		bcc $9164	                bcc L9183
1609							; End of file, adjust destination buffer length for final part
1610	.9153		a9 00		lda #$00	                lda #$00
1611	.9155		ed f2 02	sbc $02f2	                sbc osfileParameterBlock+OSGBPBParameterBlock.count+0
1612	.9158		8d cc df	sta $dfcc	                sta hazel.moveOSGBPB.numBytes+0
1613	.915b		ad cd df	lda $dfcd	                lda hazel.moveOSGBPB.numBytes+1
1614	.915e		ed f3 02	sbc $02f3	                sbc osfileParameterBlock+OSGBPBParameterBlock.count+1
1615	.9161		8d cd df	sta $dfcd	                sta hazel.moveOSGBPB.numBytes+1
1616	.9164						L9183:
1617	.9164		ad d5 df	lda $dfd5	                lda hazel.moveDestHandle      ; Destination handle
1618	.9167		8d c7 df	sta $dfc7	                sta hazel.moveOSGBPB.handle
1619	.916a		a9 02		lda #$02	                lda #$02                     ; XY=>control block, A=write
1620	.916c		a2 c7		ldx #$c7	                ldx #<hazel.moveOSGBPB
1621	.916e		a0 df		ldy #$df	                ldy #>hazel.moveOSGBPB
1622	.9170		20 d1 ff	jsr $ffd1	                jsr OSGBPB
1623	.9173		28		plp		                plp                          ; Loop until end of file
1624	.9174		90 a2		bcc $9118	                bcc L9137
1625	.9176		a9 00		lda #$00	                lda #$00
1626	.9178		ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle      ; Get and clear source handle
1627	.917b		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
1628	.917e		5a		phy		                phy                          ; Close source file
1629	.917f		20 ce ff	jsr $ffce	                jsr OSFIND
1630	.9182		a9 00		lda #$00	                lda #$00                     ; Get dest handle
1631	.9184		ac d5 df	ldy $dfd5	                ldy hazel.moveDestHandle
1632	.9187		5a		phy		                phy                          ; Clear dest handle and close file
1633	.9188		9c d5 df	stz $dfd5	                stz hazel.moveDestHandle
1634	.918b		20 ce ff	jsr $ffce	                jsr OSFIND
1635	.918e		7a		ply		                ply                          ; Dest not CFS/RFS, jump to...
1636	.918f		c0 04		cpy #$04	                cpy #$04
1637	.9191		b0 0b		bcs $919e	                bcs L91BD
1638	.9193		7a		ply		                ply                          ; Pop source handle
1639	.9194						L91B3:
1640	.9194		7a		ply		                ply                          ; Restore XY
1641	.9195		fa		plx		                plx
1642	.9196						L91B5:
1643	.9196		68		pla		                pla                          ; Clear 'ACCCON changed', restore ACCCON
1644	.9197		9c dd df	stz $dfdd	                stz hazel.hasACCCONChanged
1645	.919a		8d 34 fe	sta $fe34	                sta ACCCON
1646	.919d		60		rts		                rts

1648	.919e						L91BD:
1649	.919e		7a		ply		                ply                          ; Source was CFS/RFS, jump to exit
1650	.919f		c0 04		cpy #$04	                cpy #$04
1651	.91a1		90 f1		bcc $9194	                bcc L91B3
1652	.91a3		7a		ply		                ply                          ; Point to first parameter
1653	.91a4		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
1654	.91a7		fa		plx		                plx
1655	.91a8		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
1656	.91ab		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
1657	.91ad		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1658	.91af		a9 05		lda #$05	                lda #$05                     ; Read info on source file
1659	.91b1		20 dd ff	jsr $ffdd	                jsr OSFILE
1660	.91b4		ad d8 df	lda $dfd8	                lda hazel.moveDestName+0      ; Get address of dest filename
1661	.91b7		8d ed 02	sta $02ed	                sta osfileParameterBlock+OSFILEParameterBlock.fileName+0
1662	.91ba		ad d9 df	lda $dfd9	                lda hazel.moveDestName+1      ;  and put in control block
1663	.91bd		8d ee 02	sta $02ee	                sta osfileParameterBlock+OSFILEParameterBlock.fileName+1
1664	.91c0		a9 f0		lda #$f0	                lda #$F0                     ; Mask out 'public' access bits
1665	.91c2		1c fb 02	trb $02fb	                trb osfileParameterBlock+OSFILEParameterBlock.attributes+0
1666	.91c5		a9 01		lda #$01	                lda #$01                     ; Write info on dest file
1667	.91c7		20 dd ff	jsr $ffdd	                jsr OSFILE
1668	.91ca		80 ca		bra $9196	                bra L91B5                    ; Jump to restore ACCCON and exit

1670	.91cc						printLineNumber:
1671	.91cc		a2 00		ldx #$00	                ldx #$00
1672	.91ce		38		sec		                sec
1673	.91cf		20 0d 92	jsr $920d	                jsr adcLineNumberBCDX        ;increment line number LSB
1674	.91d2		e8		inx		                inx
1675	.91d3		20 0d 92	jsr $920d	                jsr adcLineNumberBCDX        ;carry into line number MSB
1676	.91d6						L91F5:
1677	.91d6		38		sec		                sec                          ;printing leading 0s
1678	.91d7		ad c4 df	lda $dfc4	                lda hazel.lineNumberBCD+1    ;get line number MSB
1679	.91da		20 f1 91	jsr $91f1	                jsr printPossiblyLeading0s
1680	.91dd		ad c3 df	lda $dfc3	                lda hazel.lineNumberBCD+0    ;get line number LSB
1681	.91e0		48		pha		                pha                          ;save line number LSB
1682	.91e1		08		php		                php                          ;save C
1684	.91e2		20 21 e5	jsr $e521	                jsr lsr4
1691	.91e5		28		plp		                plp                          ;restore  C
1692	.91e6		20 fb 91	jsr $91fb	                jsr printPossiblyLeading0    ;print line number 3rd digit
1693	.91e9		68		pla		                pla                          ;restore line number LSB
1694	.91ea		18		clc		                clc                ;always print line number 4th digit
1695	.91eb		20 fb 91	jsr $91fb	                jsr printPossiblyLeading0    ;
1696	.91ee		4c 28 9f	jmp $9f28	                jmp printSpace                    ;

1698	.91f1						printPossiblyLeading0s:
1699	.91f1		48		pha		                pha                          ;save value
1700	.91f2		08		php		                php                          ;save C
1702	.91f3		20 21 e5	jsr $e521	                jsr lsr4
1709	.91f6		28		plp		                plp                          ;restore C
1710	.91f7		20 fb 91	jsr $91fb	                jsr printPossiblyLeading0    ;print 1st digit
1711	.91fa		68		pla		                pla                          ;restore value
1712	.91fb						printPossiblyLeading0:
1713	.91fb		29 0f		and #$0f	                and #$0F                     ;get digit to print
1714	.91fd		d0 09		bne $9208	                bne printNonLeading0         ;always print if non-0
1715	.91ff		90 07		bcc $9208	                bcc printNonLeading0 ;branch taken if not leading 0
1716	.9201		a9 20		lda #$20	                lda #$20             ;print space instead of leading 0
1717	.9203		20 ee ff	jsr $ffee	                jsr OSWRCH
1718	.9206		38		sec		                sec                ;indicate still in leading 0s state
1719	.9207		60		rts		                rts

1721	.9208						printNonLeading0:
1722	.9208		20 b5 a8	jsr $a8b5	                jsr printHexDigit            ;print digit
1723	.920b		18		clc		                clc                          ;no longer in leading 0s state
1724	.920c		60		rts		                rts                          ;

1726	.920d						adcLineNumberBCDX:
1727	.920d		a9 00		lda #$00	                lda #$00
1728	.920f		f8		sed		                sed
1729	.9210		7d c3 df	adc $dfc3,x	                adc hazel.lineNumberBCD,x
1730	.9213		9d c3 df	sta $dfc3,x	                sta hazel.lineNumberBCD,x
1731	.9216		d8		cld		                cld
1732	.9217						rts9238:
1733	.9217		60		rts		                rts

1735							;-------------------------------------------------------------------------

1737	.9218						L9239:
1738	.9218		da		phx		                phx
1739	.9219		48		pha		                pha
1740	.921a		a2 02		ldx #$02	                ldx #$02
1741	.921c						L923D:
1742	.921c		bd f1 02	lda $02f1,x	                lda osfileParameterBlock+4,x
1743	.921f		20 ad a8	jsr $a8ad	                jsr printHexByte
1744	.9222		ca		dex		                dex
1745	.9223		10 f7		bpl $921c	                bpl L923D
1746	.9225		80 0c		bra $9233	                bra L9254

1748							;-------------------------------------------------------------------------

1750	.9227						L9248:
1751	.9227		da		phx		                phx
1752	.9228		48		pha		                pha
1753	.9229		a2 fc		ldx #$fc	                ldx #256-4
1754	.922b						L924C:
1755	.922b		fe f5 01	inc $01f5,x	                inc osfileParameterBlock+4-(256-4),x
1756	.922e		d0 03		bne $9233	                bne L9254
1757	.9230		e8		inx		                inx
1758	.9231		d0 f8		bne $922b	                bne L924C
1759	.9233						L9254:
1760	.9233		68		pla		                pla
1761	.9234		fa		plx		                plx
1762	.9235		60		rts		                rts

1764	.9236						L9257:
1765	.9236		5a		phy		                phy
1766	.9237		da		phx		                phx
1767	.9238						L9259:
1768	.9238		e0 08		cpx #$08	                cpx #$08
1769	.923a		f0 0a		beq $9246	                beq L9267
1770	.923c		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
1771	>923f		20 20 20 00			                .text "   ",0
1772	.9243		e8		inx		                inx
1773	.9244		80 f2		bra $9238	                bra L9259

1775	.9246						L9267:
1776	.9246		fa		plx		                plx
1777	.9247		20 28 9f	jsr $9f28	                jsr printSpace
1778	.924a		a0 00		ldy #$00	                ldy #$00
1779	.924c						L926D:
1780	.924c		b9 f5 02	lda $02f5,y	                lda osfileParameterBlock+8,y
1781	.924f		20 ee ff	jsr $ffee	                jsr OSWRCH
1782	.9252		c8		iny		                iny
1783	.9253		ca		dex		                dex
1784	.9254		d0 f6		bne $924c	                bne L926D
1785	.9256		7a		ply		                ply
1786	.9257		4c e7 ff	jmp $ffe7	                jmp OSNEWL

1788							;-------------------------------------------------------------------------

1798							;-------------------------------------------------------------------------
1799							;
1800							; Clear 4 bytes in the OSFILE parameter block.
1801							;
1802							; entry:
1803							;
1804							; X = offset of the 4 bytes to clear
1805							;
1806	.925a						clearOSFILEParameterBlockDWORD:
1807	.925a		9e ed 02	stz $02ed,x	                stz osfileParameterBlock+0,x
1808	.925d		9e ee 02	stz $02ee,x	                stz osfileParameterBlock+1,x
1809	.9260		9e ef 02	stz $02ef,x	                stz osfileParameterBlock+2,x
1810	.9263		9e f0 02	stz $02f0,x	                stz osfileParameterBlock+3,x
1811	.9266						rts94A4:
1812	.9266		60		rts		                rts

1814							;-------------------------------------------------------------------------
1815							;
1816							; Read a 32-bit hex value from a string.
1817							;
1818							; entry:
1819							;
1820							; X = offset into osfileParameterBlock to store the value
1821							;
1822							; exit:
1823							;
1824							; C=0 if error
1825							;
1826							; preserves: V
1827							;
1828	.9267						parseHexAddressFromString:
1829	.9267		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput ; Skip spaces
1830	.926a		20 10 84	jsr $8410	                jsr readHexDigit
1831	.926d		90 23		bcc $9292	                bcc rts92F4
1832	.926f		20 5a 92	jsr $925a	                jsr clearOSFILEParameterBlockDWORD
1833	.9272						readDigitsLoop:
1834	.9272		5a		phy		                phy
1835	.9273		2a		rol a		                rol a
1836	.9274		2a		rol a		                rol a
1837	.9275		2a		rol a		                rol a
1838	.9276		2a		rol a		                rol a                        ;put digit in top 4 bits
1839	.9277		a0 04		ldy #$04	                ldy #$04
1840	.9279						shiftIn1DigitLoop:
1841	.9279		2a		rol a		                rol a
1842	.927a		3e ed 02	rol $02ed,x	                rol osfileParameterBlock+0,x
1843	.927d		3e ee 02	rol $02ee,x	                rol osfileParameterBlock+1,x
1844	.9280		3e ef 02	rol $02ef,x	                rol osfileParameterBlock+2,x
1845	.9283		3e f0 02	rol $02f0,x	                rol osfileParameterBlock+3,x
1846	.9286		b0 61		bcs $92e9	                bcs badAddressError ;carry out of bit 31 implies too many digits
1847	.9288		88		dey		                dey
1848	.9289		d0 ee		bne $9279	                bne shiftIn1DigitLoop
1849	.928b		7a		ply		                ply
1850	.928c		20 10 84	jsr $8410	                jsr readHexDigit
1851	.928f		b0 e1		bcs $9272	                bcs readDigitsLoop   ;keep going until hex digits stop
1852	.9291		38		sec		                sec       ;got at least 1 hex digit, so result is good
1853	.9292						rts92F4:
1854	.9292		60		rts		                rts

1856							;-------------------------------------------------------------------------
1857							;
1858							; *GO (<addr>) [MasRef C.5-6]
1859							;
1860	.9293						starGO:
1861	.9293		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput ; Skip spaces
1862	.9296		d0 03		bne $929b	                bne starGOIO             ; Jump to read parameters
1863	.9298		4c 29 84	jmp $8429	                jmp commandLineUI        ; No parameters, enter CLICOM

1865							;-------------------------------------------------------------------------
1866							;
1867							; *GOIO <addr> [MasRef C.5-7]
1868							;
1869	.929b						starGOIO:
1870	.929b		a2 00		ldx #$00	                ldx #$00
1871	.929d		20 f9 92	jsr $92f9	                jsr parseHexAddressFromCommandLine ; Read hex address
1872	.92a0		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput ; Skip spaces
1873	.92a3		08		php		                php  ; Update &F2/3 to point to any further parameters
1874	.92a4		98		tya		                tya
1875	.92a5		18		clc		                clc
1876	.92a6		65 f2		adc $f2		                adc stringInputBufferAddress+0
1877	.92a8		85 f2		sta $f2		                sta stringInputBufferAddress+0
1878	.92aa		90 02		bcc $92ae	                bcc +
1879	.92ac		e6 f3		inc $f3		                inc stringInputBufferAddress+1
1880	.92ae						+
1881	.92ae		a0 00		ldy #$00	                ldy #$00    ; (&F2),y=>parameters, EQ if no parameters
1882	.92b0		28		plp		                plp
1883	.92b1		6c ed 02	jmp ($02ed)	                jmp (osfileParameterBlock+0) ; Jump to address

1885							;-------------------------------------------------------------------------

1887	.92b4						starLOAD:
1888	.92b4		a9 ff		lda #$ff	                lda #fileLoad
1889	.92b6						starCommandThroughOSFILE:
1890	.92b6		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
1891	.92b9						L931B:
1892	.92b9		86 f2		stx $f2		                stx stringInputBufferAddress+0
1893	.92bb		84 f3		sty $f3		                sty stringInputBufferAddress+1
1894	.92bd		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
1895	.92c0		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
1896	.92c3		48		pha		                pha                          ;save OSFILE reason
1897	.92c4		a2 02		ldx #$02	                ldx #OSFILEParameterBlock.load
1898	.92c6		20 5a 92	jsr $925a	                jsr clearOSFILEParameterBlockDWORD
1899	.92c9		a2 0a		ldx #$0a	                ldx #OSFILEParameterBlock.length
1900	.92cb		20 5a 92	jsr $925a	                jsr clearOSFILEParameterBlockDWORD
1901	.92ce		a0 ff		ldy #$ff	                ldy #$FF
1902	.92d0		8c f3 02	sty $02f3	                sty osfileParameterBlock+OSFILEParameterBlock.exec+0 ;by default, load to file's load address
1903	.92d3		c8		iny		                iny                                                  ;Y=0
1904	.92d4		20 d7 f1	jsr $f1d7	                jsr gsinitForFilenameParsing
1905	.92d7						L9339:
1906	.92d7		20 e9 f1	jsr $f1e9	                jsr gsreadEntryPoint
1907	.92da		90 fb		bcc $92d7	                bcc L9339
1908	.92dc		68		pla		                pla                          ;restore OSFILE reason
1909	.92dd		48		pha		                pha                          ;save OSFILE reason
1910	.92de		10 4c		bpl $932c	                bpl finishStarSAVE                    ;taken if *SAVE
1911	.92e0		a2 02		ldx #$02	                ldx #OSFILEParameterBlock.load
1912	.92e2		20 67 92	jsr $9267	                jsr parseHexAddressFromString ;parse *LOAD address
1913	.92e5		b0 18		bcs $92ff	                bcs doStarLOADWithExplicitAddress ;taken if good address
1914	.92e7		f0 1b		beq $9304	                beq L9366        ;taken if CR encountered (this is ok)
1915	.92e9						badAddressError:
1916	.92e9		20 2f ab	jsr $ab2f	                jsr doFollowingError
1917	>92ec		fc 42 61 64 20 61 64 64		                .text $fc,"Bad address",0
	>92f4		72 65 73 73 00

1919							;-------------------------------------------------------------------------
1920							;
1921							; Parse hex address from command line.
1922							;
1923	.92f9						parseHexAddressFromCommandLine:
1924	.92f9		20 67 92	jsr $9267	                jsr parseHexAddressFromString ; Read hex address
1925	.92fc		90 eb		bcc $92e9	                bcc badAddressError           ; Jump with bad address
1926	.92fe		60		rts		                rts

1928							;-------------------------------------------------------------------------

1930	.92ff						doStarLOADWithExplicitAddress:
1931	.92ff		d0 7b		bne $937c	                bne badCommandError93E2
1932	.9301		ee f3 02	inc $02f3	                inc osfileParameterBlock+OSFILEParameterBlock.exec+0 ;load to parameter block load address
1933	.9304						L9366:
1934	.9304		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
1935	.9307						callOSFILEWithOSFILEParameterBlock:
1936	.9307		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
1937	.9309		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1938	.930b		68		pla		                pla
1939	.930c		4c dd ff	jmp $ffdd	                jmp OSFILE

1941							;-------------------------------------------------------------------------
1942							;
1943							; *REMOVE [MasRef G.5-9]
1944							;
1945	.930f						starREMOVE:
1946	.930f		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
1947	.9312		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
1949	.9315		86 f2		stx $f2		                stx stringInputBufferAddress+0
1950	.9317		84 f3		sty $f3		                sty stringInputBufferAddress+1
1951	.9319		a0 ff		ldy #$ff	                ldy #$ff
1952	.931b						L9596:
1953	.931b		c8		iny		                iny
1954	.931c		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
1955	.931e		c9 21		cmp #$21	                cmp #'!'
1956	.9320		b0 f9		bcs $931b	                bcs L9596
1957	.9322		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
1958	.9325		d0 55		bne $937c	                bne badCommandError93E2
1960	.9327		a9 06		lda #$06	                lda #fileDelete
1961	.9329		48		pha		                pha
1962	.932a		80 db		bra $9307	                bra callOSFILEWithOSFILEParameterBlock

1964							;-------------------------------------------------------------------------
1976							;-------------------------------------------------------------------------
1991							;-------------------------------------------------------------------------

1993	.932c						finishStarSAVE:
1994	.932c		d0 07		bne $9335	                bne L939B
1995	.932e		a2 0a		ldx #$0a	                ldx #OSFILEParameterBlock.saveStart
1996	.9330		20 67 92	jsr $9267	                jsr parseHexAddressFromString
1997	.9333		90 47		bcc $937c	                bcc badCommandError93E2
1998	.9335						L939B:
1999	.9335		b8		clv		                clv
2000	.9336		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
2001	.9338		c9 2b		cmp #$2b	                cmp #'+'
2002	.933a		d0 04		bne $9340	                bne L93A6                    ;taken if "*SAVE START END..."
2003	.933c		2c 62 e3	bit $e362	                bit valueFF              ;V=1
2004	.933f		c8		iny		                iny
2005	.9340						L93A6:
2006	.9340		a2 0e		ldx #$0e	                ldx #OSFILEParameterBlock.saveEnd
2007	.9342		20 67 92	jsr $9267	                jsr parseHexAddressFromString
2008	.9345		90 35		bcc $937c	                bcc badCommandError93E2
2009	.9347		08		php		                php
2010	.9348		50 0f		bvc $9359	                bvc L93BF                    ;taken if "*SAVE START END"

2012							                ; Get the save end address.
2013	.934a		a2 fc		ldx #$fc	                ldx #256-4
2014	.934c		18		clc		                clc
2015	.934d						-
2016							                ; TODO - not sure why the @w notation is required here?
2017	.934d		bd fb 01	lda $01fb,x	                lda@w osfileParameterBlock+OSFILEParameterBlock.saveStart-(256-4),x
2018	.9350		7d ff 01	adc $01ff,x	                adc@w osfileParameterBlock+OSFILEParameterBlock.saveEnd-(256-4),x
2019	.9353		9d ff 01	sta $01ff,x	                sta@w osfileParameterBlock+OSFILEParameterBlock.saveEnd-(256-4),x
2020	.9356		e8		inx		                inx
2021	.9357		d0 f4		bne $934d	                bne -
2022	.9359						L93BF:

2024							                ; Initialize load and exec addresses to save start
2025							                ; address.
2026	.9359		a2 03		ldx #$03	                ldx #$03
2027	.935b						-
2028	.935b		bd f7 02	lda $02f7,x	                lda@w osfileParameterBlock+OSFILEParameterBlock.saveStart,x
2029	.935e		9d f3 02	sta $02f3,x	                sta@w osfileParameterBlock+OSFILEParameterBlock.exec,x
2030	.9361		9d ef 02	sta $02ef,x	                sta@w osfileParameterBlock+OSFILEParameterBlock.load,x
2031	.9364		ca		dex		                dex
2032	.9365		10 f4		bpl $935b	                bpl -

2034	.9367		28		plp		                plp
2035	.9368		f0 9a		beq $9304	                beq L9366

2037	.936a		a2 06		ldx #$06	                ldx #OSFILEParameterBlock.exec
2038	.936c		20 67 92	jsr $9267	                jsr parseHexAddressFromString
2039	.936f		90 0b		bcc $937c	                bcc badCommandError93E2
2040	.9371		f0 91		beq $9304	                beq L9366

2042	.9373		a2 02		ldx #$02	                ldx #OSFILEParameterBlock.load
2043	.9375		20 67 92	jsr $9267	                jsr parseHexAddressFromString
2044	.9378		90 02		bcc $937c	                bcc badCommandError93E2
2045	.937a		f0 88		beq $9304	                beq L9366

2047	.937c						badCommandError93E2:
2048	.937c		4c 20 f9	jmp $f920	                jmp badCommandError

2050							;-------------------------------------------------------------------------

2052	.937f						starFX:
2053	.937f		20 b0 83	jsr $83b0	                jsr parseNumberFromString
2054	.9382		90 f8		bcc $937c	                bcc badCommandError93E2
2055	.9384		8a		txa		                txa
2056	.9385						starCommandThroughOSBYTE:
2057	.9385		08		php		                php
2058	.9386		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
2059	.9389		28		plp		                plp
2060	.938a		48		pha		                pha
2061	.938b		64 e5		stz $e5		                stz $E5
2062	.938d		64 e4		stz $e4		                stz $E4
2063	.938f		20 72 f2	jsr $f272	                jsr LF308
2064	.9392		f0 18		beq $93ac	                beq L9412
2065	.9394		20 b0 83	jsr $83b0	                jsr parseNumberFromString
2066	.9397		90 e3		bcc $937c	                bcc badCommandError93E2
2067	.9399		86 e5		stx $e5		                stx $E5
2068	.939b		20 74 f2	jsr $f274	                jsr LF30A
2069	.939e		f0 0c		beq $93ac	                beq L9412
2070	.93a0		20 b0 83	jsr $83b0	                jsr parseNumberFromString
2071	.93a3		90 d7		bcc $937c	                bcc badCommandError93E2
2072	.93a5		86 e4		stx $e4		                stx $E4
2073	.93a7		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
2074	.93aa						L9625:
2075	.93aa		d0 d0		bne $937c	                bne badCommandError93E2
2076	.93ac						L9412:
2077	.93ac		a4 e4		ldy $e4		                ldy $E4
2078	.93ae		a6 e5		ldx $e5		                ldx $E5
2079	.93b0		68		pla		                pla
2080	.93b1		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
2081	.93b4		20 f4 ff	jsr $fff4	                jsr OSBYTE
2082	.93b7		70 c3		bvs $937c	                bvs badCommandError93E2
2083	.93b9						rts941F:
2084	.93b9		60		rts		                rts

2086							;-------------------------------------------------------------------------

2088	.93ba						starSPOOLON:
2089	.93ba		38		sec		                sec
2090	.93bb		80 14		bra $93d1	                bra starSPOOL

2092							;-------------------------------------------------------------------------

2095	.93bd						starSHADOW:
2096	.93bd		a9 72		lda #$72	                lda #$72
2097	.93bf						L963A:
2098	.93bf		80 c4		bra $9385	                bra starCommandThroughOSBYTE

2101							;-------------------------------------------------------------------------

2103	.93c1						osbyte77:
2104	.93c1		a2 10		ldx #$10	                ldx #romServiceCallSpoolExecClosureWarning
2105	.93c3		20 ac ed	jsr $edac	                jsr makeROMServiceCall
2106	.93c6		f0 f1		beq $93b9	                beq rts941F
2107	.93c8		20 a5 a5	jsr $a5a5	                jsr LA58B
2108	.93cb		ad 57 02	lda $0257	                lda spoolFileHandle
2109	.93ce		20 85 a5	jsr $a585	                jsr LA56B
2110	.93d1						starSPOOL:
2111	.93d1		08		php		                php
2112	.93d2		5a		phy		                phy
2113	.93d3		ac 57 02	ldy $0257	                ldy spoolFileHandle
2114	.93d6		8d 57 02	sta $0257	                sta spoolFileHandle
2115	.93d9		f0 03		beq $93de	                beq L9440
2116	.93db		20 ce ff	jsr $ffce	                jsr OSFIND
2117	.93de						L9440:
2118	.93de		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
2119	.93e1		7a		ply		                ply
2120	.93e2		28		plp		                plp
2121	.93e3		f0 d4		beq $93b9	                beq rts941F
2122	.93e5		a9 80		lda #$80	                lda #$80
2123	.93e7		90 02		bcc $93eb	                bcc L944D
2124	.93e9		a9 c0		lda #$c0	                lda #$C0
2125	.93eb						L944D:
2126	.93eb		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
2127	.93ee		20 ce ff	jsr $ffce	                jsr OSFIND
2128	.93f1		a8		tay		                tay
2129	.93f2		f0 88		beq $937c	                beq badCommandError93E2
2130	.93f4		8d 57 02	sta $0257	                sta spoolFileHandle
2131	.93f7		a8		tay		                tay
2132	.93f8						setPTRToEOF:
2133	.93f8		a9 02		lda #$02	                lda #argsFileGetEXT
2134	.93fa		20 ff 93	jsr $93ff	                jsr callOSARGSWithBuffer
2135	.93fd						setFilePointerFromOSARGSBuffer:
2136	.93fd		a9 01		lda #$01	                lda #argsFileSetPTR
2137	.93ff						callOSARGSWithBuffer:
2138	.93ff		a2 a8		ldx #$a8	                ldx #osargsBuffer
2139	.9401		4c da ff	jmp $ffda	                jmp OSARGS

2141							;-------------------------------------------------------------------------

2149							;-------------------------------------------------------------------------

2152	.9404						starCLOSE:
2153	.9404		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
2154	.9407		d0 a1		bne $93aa	                bne L9625
2155	.9409		a9 00		lda #$00	                lda #$00
2156	.940b		a8		tay		                tay
2157	.940c		6c 1c 02	jmp ($021c)	                jmp (FINDV)                  ;OSFIND A=0 Y=0

2160							;-------------------------------------------------------------------------

2163	.940f						starIGNORE:
2164	.940f		d0 05		bne $9416	                bne L938E
2165	.9411		38		sec		                sec
2166	.9412		6e 46 02	ror $0246	                ror noignoreState
2167	.9415		60		rts		                rts

2169	.9416						L938E:
2170	.9416		a9 06		lda #$06	                lda #$06
2171	.9418		80 a5		bra $93bf	                bra L963A

2174							;-------------------------------------------------------------------------
2175							;
2176	.941a						starDELETE:
2177	.941a		20 0f 93	jsr $930f	                jsr starREMOVE
2178	.941d		a8		tay		                tay
2179	.941e		d0 99		bne $93b9	                bne rts941F
2180	.9420		4c 67 a5	jmp $a567	                jmp notFoundError

2182							;-------------------------------------------------------------------------

2185							                .include "rtc.s65"

:11	;******  Processing file: src/rtc.s65

2							; Day string not matched
3							; ----------------------
4	.9423						nextDayString:
5	.9423		68		pla		                pla                          ; Drop number of characters matched
6	.9424		68		pla		                pla                          ; Get offset to string table
7	.9425		7a		ply		                ply                          ; Get start of supplied string
8	.9426		18		clc		                clc                          ; Step to next string table entry
9	.9427		69 04		adc #$04	                adc #$04
10	.9429		c9 1c		cmp #$1c	                cmp #size(dayOfWeekStrings) ; If not checked 28/4=7 entries, keep looking
11	.942b		90 1c		bcc $9449	                bcc checkDayString
12	.942d		60		rts		                rts                          ; Otherwise exit silently

14							; Month string not matched
15							; ------------------------
16	.942e						nextMonthString:
17	.942e		68		pla		                pla                          ; Drop number of characters matched
18	.942f		68		pla		                pla                          ; Get offset to string table
19	.9430		7a		ply		                ply                          ; Get start of supplied string
20	.9431		18		clc		                clc                          ; Step to next string table entry
21	.9432		69 04		adc #$04	                adc #$04
22	.9434		c9 30		cmp #$30	                cmp #size(monthStrings) ; If not checked 48/4=12 entries, keep looking
23	.9436		90 43		bcc $947b	                bcc checkMonthString
24	.9438						rts9655:
25	.9438		60		rts		                rts                          ; Otherwise exit silently

27							;-------------------------------------------------------------------------
28							;
29							; OSWORD 15 (&0F) Write CMOS clock [MasRef D.3-24]
30							;
31	.9439						osword0F:
32	.9439		9c ed 02	stz $02ed	                stz osfileParameterBlock     ;got no time, got no date
33	.943c		49 0f		eor #$0f	                eor #15                     ; len=15, set date
34	.943e		f0 08		beq $9448	                beq setDate
35	.9440		49 07		eor #$07	                eor #15^8
36	.9442		f0 76		beq $94ba	                beq setTime
37	.9444		49 10		eor #$10	                eor #(15^8)^23
38	.9446		d0 f0		bne $9438	                bne rts9655

40							; Set date and set date+time
41							; --------------------------
42							; (&F0),1=>"Day,00 Mon 0000"
43							; (&F0),1=>"Day,00 Mon 0000.00:00:00"
44							; A=0, Y=0
45	.9448						setDate:
46	.9448		c8		iny		                iny                          ; Point to supplied data
47							; Translate day string into day number
48	.9449						checkDayString:
49	.9449		5a		phy		                phy                          ; Push pointer to data string
50	.944a		48		pha		                pha                          ; Push offset to match strings
51	.944b		aa		tax		                tax                          ; X=>match strings
52	.944c		a9 03		lda #$03	                lda #$03                     ; A=3 characters to match
53	.944e						checkDayStringLoop:
54	.944e		48		pha		                pha                          ; Save number of characters to match
55	.944f		b1 f0		lda ($f0),y	                lda (originalX),y      ; Get character from string
56	.9451		5d 4b 95	eor $954b,x	                eor dayOfWeekStrings,x ; Compare with day string table
57	.9454		29 df		and #$df	                and #$DF                     ; Force to upper case
58	.9456		d0 cb		bne $9423	                bne nextDayString  ; No match step to check next entry
59	.9458		e8		inx		                inx                          ; Step to next character to match
60	.9459		c8		iny		                iny                          ; Step to next data character
61	.945a		68		pla		                pla                          ; Get character count back
62	.945b		3a		dec a		                dec a                        ; Decrement and loop until 3 characters matched
63	.945c		d0 f0		bne $944e	                bne checkDayStringLoop
64	.945e		bd 4b 95	lda $954b,x	                lda dayOfWeekStrings,x ; Get translation byte from string table
65	.9461		8d f4 02	sta $02f4	                sta osfileParameterBlock+1+RTC.dayOfWeek ; Store it in workspace
66							; Translates Sun,Mon,Tue,etc to &01,&02,&03,etc
67	.9464		fa		plx		                plx                          ; Drop char count and table offset
68	.9465		fa		plx		                plx
69	.9466		b1 f0		lda ($f0),y	                lda ($F0),y                  ; Get next character
70	.9468		c9 2c		cmp #$2c	                cmp #','                     ; Not followed by a comma, so exit silently
71	.946a		d0 cc		bne $9438	                bne rts9655
72	.946c		a2 07		ldx #$07	                ldx #$07                     ; Get day of month
73	.946e		20 13 95	jsr $9513	                jsr readDecimalBCDByte
74	.9471		90 c5		bcc $9438	                bcc rts9655                    ; Bad number, exit silently
75	.9473		c8		iny		                iny                          ; Get next character
76	.9474		b1 f0		lda ($f0),y	                lda ($F0),y
77	.9476		49 20		eor #$20	                eor #' '                     ; Not space, exit silently
78	.9478		d0 be		bne $9438	                bne rts9655
79	.947a		c8		iny		                iny                          ; Step to first character of month
80							; Translate month string into month number
81							; This could use the same code as the Day translation
82	.947b						checkMonthString:
83	.947b		5a		phy		                phy                          ; Push pointer to data string
84	.947c		48		pha		                pha                          ; Push offset to match strings
85	.947d		aa		tax		                tax                          ; X=>match strings
86	.947e		a9 03		lda #$03	                lda #$03                     ; A=3 characters to match
87	.9480						checkMonthStringLoop:
88	.9480		48		pha		                pha
89	.9481		b1 f0		lda ($f0),y	                lda (originalX),y
90	.9483		5d 67 95	eor $9567,x	                eor monthStrings,x
91	.9486		29 df		and #$df	                and #$DF
92	.9488		d0 a4		bne $942e	                bne nextMonthString
93	.948a		e8		inx		                inx
94	.948b		c8		iny		                iny
95	.948c		68		pla		                pla
96	.948d		3a		dec a		                dec a
97	.948e		d0 f0		bne $9480	                bne checkMonthStringLoop
98	.9490		bd 67 95	lda $9567,x	                lda monthStrings,x
99	.9493		8d f6 02	sta $02f6	                sta osfileParameterBlock+1+RTC.month
100							; Translates Jan,Feb,Mar,etc to &01,&02,&03,etc..&09,&10,&11,&12
101	.9496		fa		plx		                plx                          ; Drop char count and table offset
102	.9497		fa		plx		                plx
103	.9498		b1 f0		lda ($f0),y	                lda ($F0),y                  ; Get next character
104	.949a		c9 20		cmp #$20	                cmp #' '                     ; Not followed by space, exit silently
105	.949c		d0 9a		bne $9438	                bne rts9655
106	.949e		a2 09		ldx #$09	                ldx #RTC.year
107	.94a0		20 13 95	jsr $9513	                jsr readDecimalBCDByte
108	.94a3		90 93		bcc $9438	                bcc rts9655                    ; Bad number, exit silently
109	.94a5		20 13 95	jsr $9513	                jsr readDecimalBCDByte                    ; Get year number
110	.94a8		90 8e		bcc $9438	                bcc rts9655                    ; Bad number, exit silently
111	.94aa		6e ed 02	ror $02ed	                ror osfileParameterBlock+0     ;got date
112	.94ad		b2 f0		lda ($f0)	                lda (originalX)        ; Get data length
113	.94af		c9 0f		cmp #$0f	                cmp #$0F                     ; len=15, jump to just set date
114	.94b1		f0 2f		beq $94e2	                beq setRTCDate
115							; Must be len=24 to set date+time
116	.94b3		c8		iny		                iny                          ; Get next character
117	.94b4		b1 f0		lda ($f0),y	                lda (originalX),y
118	.94b6		c9 2e		cmp #$2e	                cmp #'.'                     ; If not full stop, exit silently
119	.94b8		d0 7c		bne $9536	                bne rts9753

121	.94ba						setTime:
122	.94ba		a2 04		ldx #$04	                ldx #RTC.hours
123	.94bc		20 13 95	jsr $9513	                jsr readDecimalBCDByte
124	.94bf		90 75		bcc $9536	                bcc rts9753
125	.94c1		c8		iny		                iny
126	.94c2		b1 f0		lda ($f0),y	                lda (originalX),y
127	.94c4		c9 3a		cmp #$3a	                cmp #':'
128	.94c6		d0 6e		bne $9536	                bne rts9753
129	.94c8		a2 02		ldx #$02	                ldx #RTC.minutes
130	.94ca		20 13 95	jsr $9513	                jsr readDecimalBCDByte
131	.94cd		90 67		bcc $9536	                bcc rts9753
132	.94cf		c8		iny		                iny
133	.94d0		b1 f0		lda ($f0),y	                lda (originalX),y
134	.94d2		c9 3a		cmp #$3a	                cmp #':'
135	.94d4		d0 60		bne $9536	                bne rts9753
136	.94d6		a2 00		ldx #$00	                ldx #RTC.seconds
137	.94d8		20 13 95	jsr $9513	                jsr readDecimalBCDByte
138	.94db		90 59		bcc $9536	                bcc rts9753
139	.94dd		a9 40		lda #$40	                lda #$40
140	.94df		0c ed 02	tsb $02ed	                tsb osfileParameterBlock+0   ;got time
141	.94e2						setRTCDate:
142	.94e2		58		cli		                cli
143	.94e3		78		sei		                sei
144	.94e4		a0 83		ldy #$83	                ldy #RTC.b.set|RTC.b._24h|RTC.b.dse
145	.94e6		a2 0b		ldx #$0b	                ldx #RTC.b
146	.94e8		20 d0 96	jsr $96d0	                jsr writeRTCByte
147	.94eb		2c ed 02	bit $02ed	                bit osfileParameterBlock+0 ;N=1 if got date; V=1 if got time
148	.94ee		10 0f		bpl $94ff	                bpl setRTCTime ;taken if not got date - must then have time
149	.94f0		a2 06		ldx #$06	                ldx #$06
150	.94f2						-
151	.94f2		bc ee 02	ldy $02ee,x	                ldy osfileParameterBlock+1,x
152	.94f5		20 d0 96	jsr $96d0	                jsr writeRTCByte
153	.94f8		e8		inx		                inx
154	.94f9		e0 0a		cpx #$0a	                cpx #RTC.a
155	.94fb		90 f5		bcc $94f2	                bcc -
156	.94fd		50 0d		bvc $950c	                bvc finishRTCUpdate                    ;taken if not got date
157	.94ff						setRTCTime:
158	.94ff		a2 00		ldx #$00	                ldx #RTC.seconds
159	.9501						-
160	.9501		bc ee 02	ldy $02ee,x	                ldy osfileParameterBlock+1,x
161	.9504		20 d0 96	jsr $96d0	                jsr writeRTCByte
162	.9507		e8		inx		                inx
163	.9508		e0 06		cpx #$06	                cpx #RTC.dayOfWeek
164	.950a		90 f5		bcc $9501	                bcc -
165	.950c						finishRTCUpdate:
166	.950c		a2 0b		ldx #$0b	                ldx #RTC.b
167	.950e		a0 02		ldy #$02	                ldy #RTC.b._24h
168	.9510		4c d0 96	jmp $96d0	                jmp writeRTCByte

170	.9513						readDecimalBCDByte:
171	.9513		20 37 95	jsr $9537	                jsr readDecimalDigit
172	.9516		49 20		eor #$20	                eor #$20         ;check for ' '
173	.9518		f0 04		beq $951e	                beq +        ;taken if leading space - that's fine
174	.951a		49 20		eor #$20	                eor #$20         ;reinstate old value
175	.951c		90 18		bcc $9536	                bcc rts9753      ;taken if non-space non-digits
176	.951e						+
177	.951e		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
178	.9521		20 37 95	jsr $9537	                jsr readDecimalDigit
179	.9524		90 10		bcc $9536	                bcc rts9753                  ;taken if invalid digit

181							                ; rotate new digit into place
182	.9526		5a		phy		                phy
183	.9527		a0 04		ldy #$04	                ldy #$04
184	.9529		0a		asl a		                asl a
185	.952a		0a		asl a		                asl a
186	.952b		0a		asl a		                asl a
187	.952c		0a		asl a		                asl a
188	.952d						-
189	.952d		0a		asl a		                asl a
190	.952e		3e ee 02	rol $02ee,x	                rol osfileParameterBlock+1,x
191	.9531		88		dey		                dey
192	.9532		d0 f9		bne $952d	                bne -
193	.9534		7a		ply		                ply
194	.9535		38		sec		                sec
195	.9536						rts9753:
196	.9536		60		rts		                rts

198	.9537						readDecimalDigit:
199	.9537		c8		iny		                iny
200	.9538		b1 f0		lda ($f0),y	                lda (originalX),y
201	.953a		c9 3a		cmp #$3a	                cmp #'9'+1
202	.953c		b0 07		bcs $9545	                bcs notDecimalDigit
203	.953e		c9 30		cmp #$30	                cmp #'0'
204	.9540		90 03		bcc $9545	                bcc notDecimalDigit
205	.9542		29 0f		and #$0f	                and #$0F
206	.9544		60		rts		                rts

208	.9545						notDecimalDigit:
209	.9545		18		clc		                clc
210	.9546		60		rts		                rts

213							;-------------------------------------------------------------------------

215							; TODO - is this necessary?
216							;
217							; There's a reference to dayOfWeekStrings-4, but that seems to be
218							; because days are 1-based. The data here is presumably never
219							; accesssed.
220	>9547		20 20 20 00			                .text "   ",0

222							;-------------------------------------------------------------------------

224	.954b						dayOfWeekStrings: .block
225	>954b		53 75 6e 01			                .text "Sun",$01
226	>954f		4d 6f 6e 02			                .text "Mon",$02
227	>9553		54 75 65 03			                .text "Tue",$03
228	>9557		57 65 64 04			                .text "Wed",$04
229	>955b		54 68 75 05			                .text "Thu",$05
230	>955f		46 72 69 06			                .text "Fri",$06
231	>9563		53 61 74 07			                .text "Sat",$07
232							                .endblock

234							;-------------------------------------------------------------------------

236	.9567						monthStrings: .block
237	>9567		4a 61 6e 01			                .text "Jan",$01
238	>956b		46 65 62 02			                .text "Feb",$02
239	>956f		4d 61 72 03			                .text "Mar",$03
240	>9573		41 70 72 04			                .text "Apr",$04
241	>9577		4d 61 79 05			                .text "May",$05
242	>957b		4a 75 6e 06			                .text "Jun",$06
243	>957f		4a 75 6c 07			                .text "Jul",$07
244	>9583		41 75 67 08			                .text "Aug",$08
245	>9587		53 65 70 09			                .text "Sep",$09
246	>958b		4f 63 74 10			                .text "Oct",$10
247	>958f		4e 6f 76 11			                .text "Nov",$11
248	>9593		44 65 63 12			                .text "Dec",$12
249							                .endblock

251							;-------------------------------------------------------------------------

264							;-------------------------------------------------------------------------

272							;-------------------------------------------------------------------------
273							;
274							; OSWORD 14 (&0E) Read CMOS clock [MasRef D.3-22]
275							;

277	.9597						osword0E:
279	.9597		48		pha		                pha                          ;save reason code
280	.9598		49 02		eor #$02	                eor #$02                     ;
281	.959a		d0 1b		bne $95b7	                bne readClock

327							                ; Convert given time to string. Fill out the RTC temp
328							                ; data with the info from the parameter block, then
329							                ; pass on to the common code.
330	.959c		a0 07		ldy #$07	                ldy #$07

332							                ; Copy hours, mins, secs.
333	.959e		a2 00		ldx #$00	                ldx #$00
334	.95a0						-
335	.95a0		b1 f0		lda ($f0),y	                lda ($F0),y
336	.95a2		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
337	.95a5		88		dey		                dey
338	.95a6		e8		inx		                inx
339	.95a7		e8		inx		                inx
340	.95a8		e0 06		cpx #$06	                cpx #$06
341	.95aa		90 f4		bcc $95a0	                bcc -

343							                ; Copy day of week, day of month, month, year.
344	.95ac						-
345	.95ac		b1 f0		lda ($f0),y	                lda (originalX),y
346	.95ae		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
347	.95b1		e8		inx		                inx
348	.95b2		88		dey		                dey
349	.95b3		d0 f7		bne $95ac	                bne -

352	.95b5		80 30		bra $95e7	                bra maybeConvertToString ; (called from here, there's no maybe about it)

354	.95b7						readClock:
355	.95b7		a5 f0		lda $f0		                lda originalX
356	.95b9		48		pha		                pha
357	.95ba		a5 f1		lda $f1		                lda originalY
358	.95bc		48		pha		                pha
359	.95bd						readRTCClock:
360	.95bd		a2 0c		ldx #$0c	                ldx #RTC.c
361	.95bf		20 a3 96	jsr $96a3	                jsr readRTCByte ;clear the various IRQ flags with a read of register C
362	.95c2		a2 09		ldx #$09	                ldx #RTC.year
363	.95c4						-
364	.95c4		20 a3 96	jsr $96a3	                jsr readRTCByte
365	.95c7		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
366	.95ca		ca		dex		                dex
367	.95cb		10 f7		bpl $95c4	                bpl -
368	.95cd		a2 0a		ldx #$0a	                ldx #RTC.a
369	.95cf		20 a3 96	jsr $96a3	                jsr readRTCByte
370	.95d2		10 04		bpl $95d8	                bpl L97F5 ;taken if update not in progress - result is good
371	.95d4						retryReadRTCClock:
372	.95d4		58		cli		                cli
373	.95d5		78		sei		                sei
374	.95d6		80 e5		bra $95bd	                bra readRTCClock

376	.95d8						L97F5:
377	.95d8		a2 0c		ldx #$0c	                ldx #RTC.c
378	.95da		20 a3 96	jsr $96a3	                jsr readRTCByte
379	.95dd		29 10		and #$10	                and #RTC.c.uf
380	.95df		d0 f3		bne $95d4	                bne retryReadRTCClock
381	.95e1		68		pla		                pla
382	.95e2		85 f1		sta $f1		                sta originalY
383	.95e4		68		pla		                pla
384	.95e5		85 f0		sta $f0		                sta originalX
385	.95e7						maybeConvertToString:
386	.95e7		68		pla		                pla                          ;get reason code
387	.95e8		3a		dec a		                dec a
388	.95e9		d0 1a		bne $9605	                bne convertTimeToString                    ;taken if 0 or 2

390							                ; Copy year, month, day of month, day of week.
391	.95eb		a0 00		ldy #$00	                ldy #$00
392	.95ed		a2 09		ldx #$09	                ldx #RTC.year
393	.95ef						-
394	.95ef		bd ee 02	lda $02ee,x	                lda osfileParameterBlock+1,x
395	.95f2		91 f0		sta ($f0),y	                sta (originalX),y
396	.95f4		c8		iny		                iny
397	.95f5		ca		dex		                dex
398	.95f6		e0 06		cpx #$06	                cpx #RTC.dayOfWeek
399	.95f8		b0 f5		bcs $95ef	                bcs -

401							                ; Copy hours, minutes, seconds.
402	.95fa						-
403	.95fa		bd ed 02	lda $02ed,x	                lda osfileParameterBlock,x
404	.95fd		91 f0		sta ($f0),y	                sta (originalX),y
405	.95ff		c8		iny		                iny
406	.9600		ca		dex		                dex
407	.9601		ca		dex		                dex
408	.9602		10 f6		bpl $95fa	                bpl -
409	.9604		60		rts		                rts

413	.9605						convertTimeToString:
414							                ; Store terminating CR.
415	.9605		a0 18		ldy #$18	                ldy #ClockStringFormat.cr
416	.9607		a9 0d		lda #$0d	                lda #13
417	.9609		91 f0		sta ($f0),y	                sta (originalX),y
418	.960b		a2 00		ldx #$00	                ldx #$00
419	.960d		88		dey		                dey
420	.960e		20 73 96	jsr $9673	                jsr storeRTCDataByteString
421	.9611		a9 3a		lda #$3a	                lda #':'
422	.9613		91 f0		sta ($f0),y	                sta (originalX),y
423	.9615		a0 12		ldy #$12	                ldy #ClockStringFormat.hh+2
424	.9617		91 f0		sta ($f0),y	                sta (originalX),y
425	.9619		a2 02		ldx #$02	                ldx #RTC.minutes
426	.961b		a0 14		ldy #$14	                ldy #ClockStringFormat.mm+1
427	.961d		20 73 96	jsr $9673	                jsr storeRTCDataByteString
428	.9620		a2 04		ldx #$04	                ldx #RTC.hours
429	.9622		a0 11		ldy #$11	                ldy #ClockStringFormat.hh+1
430	.9624		20 73 96	jsr $9673	                jsr storeRTCDataByteString
431	.9627		a9 2e		lda #$2e	                lda #'.'
432	.9629		91 f0		sta ($f0),y	                sta (originalX),y
433	.962b		ad f4 02	lda $02f4	                lda osfileParameterBlock+1+RTC.dayOfWeek;
434	.962e		0a		asl a		                asl a
435	.962f		0a		asl a		                asl a
436	.9630		a0 00		ldy #$00	                ldy #$00
437	.9632		aa		tax		                tax
438	.9633						-
439	.9633		bd 47 95	lda $9547,x	                lda dayOfWeekStrings-4,x     ;-4 as 1=Sunday
440	.9636		91 f0		sta ($f0),y	                sta (originalX),y
441	.9638		e8		inx		                inx
442	.9639		c8		iny		                iny
443	.963a		c0 03		cpy #$03	                cpy #$03
444	.963c		90 f5		bcc $9633	                bcc -
445	.963e		a9 2c		lda #$2c	                lda #','
446	.9640		91 f0		sta ($f0),y	                sta (originalX),y
447	.9642		ad f6 02	lda $02f6	                lda osfileParameterBlock+1+RTC.month
448	.9645		c9 10		cmp #$10	                cmp #$10
449	.9647		90 02		bcc $964b	                bcc +
450	.9649		e9 06		sbc #$06	                sbc #$06            ;convert $10, $11 and $12 from BCD
451	.964b						+
452	.964b		3a		dec a		                dec a                        ;make month 0-based
453	.964c		0a		asl a		                asl a
454	.964d		0a		asl a		                asl a
455	.964e		aa		tax		                tax
456	.964f		a0 07		ldy #$07	                ldy #ClockStringFormat.mmm
457	.9651						-
458	.9651		bd 67 95	lda $9567,x	                lda monthStrings,x
459	.9654		91 f0		sta ($f0),y	                sta ($F0),y
460	.9656		e8		inx		                inx
461	.9657		c8		iny		                iny
462	.9658		c0 0a		cpy #$0a	                cpy #ClockStringFormat.mmm+3
463	.965a		90 f5		bcc $9651	                bcc -
464	.965c		a2 09		ldx #$09	                ldx #RTC.year
465	.965e		a0 0e		ldy #$0e	                ldy #ClockStringFormat.yyyy+3
466	.9660		20 73 96	jsr $9673	                jsr storeRTCDataByteString
467	.9663		a9 19		lda #$19	                lda #assumedRTCCenturyBCD
468	.9665		20 76 96	jsr $9676	                jsr storeBCDByteString
469	.9668		a9 20		lda #$20	                lda #$20
470	.966a		91 f0		sta ($f0),y	                sta ($F0),y
471	.966c		a0 06		ldy #$06	                ldy #ClockStringFormat.nn+2
472	.966e		91 f0		sta ($f0),y	                sta ($F0),y
473	.9670		88		dey		                dey
474	.9671		a2 07		ldx #$07	                ldx #RTC.dayOfMonth
475	.9673						storeRTCDataByteString:
476	.9673		bd ee 02	lda $02ee,x	                lda osfileParameterBlock+1,x
477	.9676						storeBCDByteString:
478	.9676		48		pha		                pha
479	.9677		20 7e 96	jsr $967e	                jsr storeNybbleString
480	.967a		68		pla		                pla
482	.967b		20 21 e5	jsr $e521	                jsr lsr4
489	.967e						storeNybbleString:
490	.967e		29 0f		and #$0f	                and #$0F
491	.9680		09 30		ora #$30	                ora #'0'
492	.9682		c9 3a		cmp #$3a	                cmp #'9'+1
493	.9684		90 02		bcc $9688	                bcc +
494	.9686		69 06		adc #$06	                adc #('A'-'9'-1)-1           ;(-1 because C set)
495	.9688						+
496	.9688		91 f0		sta ($f0),y	                sta (originalX),y
497	.968a		88		dey		                dey
498	.968b		60		rts		                rts

500							;-------------------------------------------------------------------------

504	.968c						clearTSTAndReadDefaults2:
505	.968c		20 53 f3	jsr $f353	                jsr withTSTClear
507	.968f						readDefaults2:
508	.968f		a2 1d		ldx #$1d	                ldx #CMOSBytes.defaults2+cmosBytesOffset
509	.9691		80 10		bra $96a3	                bra readRTCByte

512							;-------------------------------------------------------------------------

516	.9693						clearTSTAndReadDefaults3:
517	.9693		20 53 f3	jsr $f353	                jsr withTSTClear
519	.9696						readDefaults3:
520	.9696		a2 1e		ldx #$1e	                ldx #CMOSBytes.defaults3+cmosBytesOffset
521	.9698		80 09		bra $96a3	                bra readRTCByte

524							;-------------------------------------------------------------------------
525							;
526							; Read byte from RTC, either by 0-based CMOS RAM offset (readCMOSByte)
527							; or by RTC register index (readRTCByte).
528							;
529							; entry:
530							;
531							; X = address to read from
532							;
533							; exit:
534							;
535							; A = byte read
536							;
537							; N,Z = set as per byte read
538							;
540	.969a						readCMOSByte:
541	.969a		20 e9 96	jsr $96e9	                jsr getRTCAddressForCMOSByte
543	.969d		90 04		bcc $96a3	                bcc readRTCByte
544	.969f		60		rts		                rts
549	.96a0						clearTSTAndReadRTCByte:
550	.96a0		20 53 f3	jsr $f353	                jsr withTSTClear
552	.96a3						readRTCByte:
553	.96a3		08		php		                php
554	.96a4		78		sei		                sei
555	.96a5		20 f2 96	jsr $96f2	                jsr setRTCAddress
556	.96a8		a9 49		lda #$49	                lda #$49
557	.96aa		8d 40 fe	sta $fe40	                sta systemVIA.orb
558	.96ad		9c 43 fe	stz $fe43	                stz systemVIA.ddra
559	.96b0		a9 4a		lda #$4a	                lda #$4A
560	.96b2		8d 40 fe	sta $fe40	                sta systemVIA.orb
561	.96b5		ac 4f fe	ldy $fe4f	                ldy systemVIA.iraNoHandshake ;read value
562	.96b8						deselectRTC:
563	.96b8		a9 42		lda #$42	                lda #$42
564	.96ba		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=0
565	.96bd		a9 02		lda #$02	                lda #$02
566	.96bf		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=0 DS=0 R=0
567	.96c2		9c 43 fe	stz $fe43	                stz systemVIA.ddra           ;all bits inputs
568	.96c5		28		plp		                plp
569	.96c6		98		tya		                tya
570	.96c7						rts98DB:
571	.96c7		60		rts		                rts

574							;-------------------------------------------------------------------------
575							;
576							; Write byte to RTC, either by 0-based CMOS RAM offset (writeCMOSByte)
577							; or by RTC register index (writeRTCByte).
578							;
579							; (For some reason, writeCMOSByte can't be used to write to CMOS RAM
580							; offset 0.)
581							;
582							; entry:
583							;
584							; X = address to write to
585							;
586							; Y = value to write
587							;
589	.96c8						writeCMOSByte:
590	.96c8		8a		txa		                txa
591	.96c9		f0 fc		beq $96c7	                beq rts98DB
592	.96cb		20 e9 96	jsr $96e9	                jsr getRTCAddressForCMOSByte
593	.96ce		b0 f7		bcs $96c7	                bcs rts98DB
594	.96d0						writeRTCByte:
595	.96d0		08		php		                php
596	.96d1		78		sei		                sei
597	.96d2		20 f2 96	jsr $96f2	                jsr setRTCAddress            ;X=address
598	.96d5		a9 41		lda #$41	                lda #$41
599	.96d7		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=0
600	.96da		a9 ff		lda #$ff	                lda #$FF
601	.96dc		8d 43 fe	sta $fe43	                sta systemVIA.ddra           ;all bits outputs
602	.96df		a9 4a		lda #$4a	                lda #$4A
603	.96e1		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=1
604	.96e4		8c 4f fe	sty $fe4f	                sty systemVIA.oraNoHandshake ;store value
605	.96e7		80 cf		bra $96b8	                bra deselectRTC

608							;-------------------------------------------------------------------------
609							;
610							; Convert CMOS byte offset to actual RTC address.
611							;
612							; entry:
613							;
614							; X = CMOS byte offset - 0-49
615							;
616							; exit:
617							;
618							; C=1 = invalid address
619							;
620							; C=0 = valid address: X = register index
621							;
623	.96e9						getRTCAddressForCMOSByte:
624	.96e9		e0 32		cpx #$32	                cpx #size(RTC.ram)
625	.96eb		b0 04		bcs $96f1	                bcs rts9905
626	.96ed		8a		txa		                txa
627	.96ee		69 0e		adc #$0e	                adc #RTC.ram
628	.96f0		aa		tax		                tax
629	.96f1						rts9905:
630	.96f1		60		rts		                rts

633							;-------------------------------------------------------------------------
634							;
635							; set RTC address for future read/write operation.
636							;
637							; entry:
638							;
639							; X = address to set
640							;
641							; preserves: Y
642							;
644	.96f2						setRTCAddress:
645	.96f2		a9 02		lda #$02	                lda #$02
646	.96f4		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=0 DS=0 R=0
647	.96f7		a9 82		lda #$82	                lda #$82
648	.96f9		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=1 CS=0 DS=0 R=0
649	.96fc		a9 ff		lda #$ff	                lda #$FF
650	.96fe		8d 43 fe	sta $fe43	                sta systemVIA.ddra           ;all bits outputs
651	.9701		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake ;write RTC address
652	.9704		a9 c2		lda #$c2	                lda #$c2
653	.9706		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=1 CS=1 DS=0 R=0
654	.9709		a9 42		lda #$42	                lda #$42
655	.970b		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=0
656	.970e						rts9922:
657	.970e		60		rts		                rts

:7	;******  Return to file: src/terminal.s65

2189	=$970e						osbyte19Done=rts9922
2194							                .include "restore_font.s65"

:12	;******  Processing file: src/restore_font.s65

1							;-------------------------------------------------------------------------
2							;
3							; restore entire font.
4							;
5	.970f						restoreFont32To255:
6	.970f		a2 07		ldx #$07	                ldx #$07                     ;224 chars - 32-255
8							                ; fall through to restoreFont32ToN

10							;-------------------------------------------------------------------------
11							;
12							; Restore part of the font, starting from char 32.
13							;
14							; entry:
15							;
16							; X = number of pages of font data to restore - X*32 chars will be
17							; restored
18							;
19	.9711						restoreFont32ToN:
20	.9711		08		php		                php
21	.9712		78		sei		                sei
22	.9713		a9 b9		lda #$b9	                lda #>LB900                ;start at beginning of font
23	.9715		85 f1		sta $f1		                sta $F1
24	.9717		a9 89		lda #$89	                lda #>andy.softCharacterDefinitions ;write to beginning of soft character definitions
26							                ; fall through to restoreFontPart

28							;-------------------------------------------------------------------------
29							;
30							; Restore part of the font.
31							;
32							; entry:
33							;
34							; ?$f1 = MSB of font data
35							;
36							; A = MSB of dest page in ANDY - should be part of the soft character
37							; definitions!
38							;
39							; X = number of pages of font data to restore - X*32 chars will be
40							; restored
41							;
42							; preserves: Y

44	.9719						restoreFontPart:
45	.9719		85 fb		sta $fb		                sta $FB                      ;save MSB of dest
46	.971b		20 63 e5	jsr $e563	                jsr selectTerminalROMAndANDY2
47							                .cwarn *<$9000,format("Code inside ANDY at: $%04x",*) ; following code can't be inside the ANDY region!
48	.971e		5a		phy		                phy                          ;
49	.971f		a0 00		ldy #$00	                ldy #$00                     ;
50	.9721		64 fa		stz $fa		                stz $FA                      ;initialize LSB of src
51	.9723		64 f0		stz $f0		                stz $F0                      ;initialize LSB of dest
52	.9725						-
53	.9725		b1 f0		lda ($f0),y	                lda ($F0),y
54	.9727		91 fa		sta ($fa),y	                sta ($FA),y
55	.9729		c8		iny		                iny
56	.972a		d0 f9		bne $9725	                bne -
57	.972c		e6 f1		inc $f1		                inc $F1
58	.972e		e6 fb		inc $fb		                inc $FB
59	.9730		ca		dex		                dex
60	.9731		d0 f2		bne $9725	                bne -
61	.9733		7a		ply		                ply
62	.9734		28		plp		                plp
63	.9735		4c 5b e5	jmp $e55b	                jmp selectTerminalROM

65							;-------------------------------------------------------------------------

68	.9738						osbyte14:
70	.9738						restoreFont32To126:
71	.9738		a2 03		ldx #$03	                ldx #$03                     ;96 chars - 32-126
72	.973a		80 d5		bra $9711	                bra restoreFont32ToN

74							;-------------------------------------------------------------------------
75							;
76							; OSBYTE 25 (&19) Restore a group of font definitions
77							;
78							; MasRef D.2-28
79							;
80	.973c						osbyte19:
81	.973c		8a		txa		                txa                          ;A=group identifier
82	.973d		f0 d0		beq $970f	                beq restoreFont32To255   ;taken if group 0 - all chars
86	.973f		c9 08		cmp #$08	                cmp #$08
88	.9741		b0 cb		bcs $970e	                bcs osbyte19Done
93	.9743		08		php		                php
94	.9744		78		sei		                sei
95	.9745		69 b8		adc #$b8	                adc #(>LB900)-1 ;form address of ROM font data for group
96	.9747		85 f1		sta $f1		                sta $F1
97	.9749		8a		txa		                txa
98	.974a		a2 01		ldx #$01	                ldx #$01                   ;copy 1 page, 32 chars
99	.974c		69 88		adc #$88	                adc #(>andy.softCharacterDefinitions)-1 ;get page in ANDY for group
100	.974e		80 c9		bra $9719	                bra restoreFontPart

:7	;******  Return to file: src/terminal.s65

2197							;-------------------------------------------------------------------------

2200	.9750						parseSoftKeyNumberFromCommandLine:
2201	.9750		20 b0 83	jsr $83b0	                jsr parseNumberFromString
2202	.9753		90 04		bcc $9759	                bcc badKeyError
2203	.9755		e0 10		cpx #$10	                cpx #softKeyCount
2205	.9757		90 b5		bcc $970e	                bcc rts9922
2209	.9759						badKeyError:
2210	.9759		20 2f ab	jsr $ab2f	                jsr doFollowingError
2211	>975c		fb				                .byte $FB
2212	>975d		42 61 64 20 6b 65 79		                .text "Bad key"
2213	>9764		00				                .byte 0

2216							;-------------------------------------------------------------------------

2219	.9765						starSHOW:
2220	.9765		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
2221	.9767		49 0d		eor #$0d	                eor #13
2222	.9769		d0 1b		bne $9786	                bne L96BF
2223	.976b		aa		tax		                tax
2224	.976c						L96A5:
2225	.976c		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
2226	>976f		4b 65 79 20 00			                .text "Key ",0

2228	.9774		da		phx		                phx
2229	.9775		8a		txa		                txa
2230	.9776		20 b5 a8	jsr $a8b5	                jsr printHexDigit
2231	.9779		20 28 9f	jsr $9f28	                jsr printSpace
2232	.977c		20 8e 97	jsr $978e	                jsr printKeyDefinition
2233	.977f		fa		plx		                plx
2234	.9780		e8		inx		                inx
2235	.9781		e0 10		cpx #$10	                cpx #$10
2236	.9783		90 e7		bcc $976c	                bcc L96A5
2237	.9785						L96BE:
2238	.9785		60		rts		                rts

2240	.9786						L96BF:
2241	.9786		20 50 97	jsr $9750	                jsr parseSoftKeyNumberFromCommandLine
2242	.9789		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
2243	.978c						L96C5:
2244	.978c		d0 cb		bne $9759	                bne badKeyError

2247							;-------------------------------------------------------------------------

2266							;-------------------------------------------------------------------------
2267							;
2268							; [MasRef C.5-11]
2269							;

2277	.978e						printKeyDefinition:
2279	.978e		a9 22		lda #$22	                lda #'"'
2280	.9790		20 ee ff	jsr $ffee	                jsr OSWRCH
2281	.9793		a5 f4		lda $f4		                lda $F4
2282	.9795		48		pha		                pha
2283	.9796		20 63 e5	jsr $e563	                jsr selectTerminalROMAndANDY2
2284							                .cwarn *<$9000,format("Code inside ANDY at: $%04x",*)
2285	.9799		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2286	.979c		85 f2		sta $f2		                sta stringInputBufferAddress+0
2287	.979e		bd 11 80	lda $8011,x	                lda andy.softKeys.stringMSBs,x
2288	.97a1		85 f3		sta $f3		                sta stringInputBufferAddress+1
2292	.97a3		8a		txa		                txa
2293	.97a4		a8		tay		                tay
2295	.97a5		20 62 eb	jsr $eb62	                jsr getSoftKeyStringLength
2296	.97a8		a8		tay		                tay                          ;Y = string length
2297	.97a9		f0 0e		beq $97b9	                beq starSHOWDone                    ;done if length=0
2298	.97ab						-
2299	.97ab		b2 f2		lda ($f2)	                lda (stringInputBufferAddress)
2300	.97ad		20 04 99	jsr $9904	                jsr printGSREADChar
2301	.97b0		e6 f2		inc $f2		                inc stringInputBufferAddress+0
2302	.97b2		d0 02		bne $97b6	                bne +
2303	.97b4		e6 f3		inc $f3		                inc stringInputBufferAddress+1
2304	.97b6						+
2305	.97b6		88		dey		                dey
2306	.97b7		d0 f2		bne $97ab	                bne -
2307	.97b9						starSHOWDone:
2308	.97b9		68		pla		                pla
2309	.97ba		20 5d e5	jsr $e55d	                jsr selectROMA
2310	.97bd		a9 22		lda #$22	                lda #'"'
2311	.97bf		20 ee ff	jsr $ffee	                jsr OSWRCH
2312	.97c2		4c e7 ff	jmp $ffe7	                jmp OSNEWL

2314							;-------------------------------------------------------------------------

2329							;-------------------------------------------------------------------------
2330							;
2331							; [MasRef C.5-8]
2332							;
2333	.97c5						starKEY: .proc
2334	.97c5		20 50 97	jsr $9750	                jsr parseSoftKeyNumberFromCommandLine
2335	.97c8		a5 f4		lda $f4		                lda $F4
2336	.97ca		48		pha		                pha
2337	.97cb		20 4a e5	jsr $e54a	                jsr selectTerminalROMAndANDY
2338	.97ce		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
2339	.97d1		64 b0		stz $b0		                stz starKEYWorkspace.newStringLength
2340	.97d3		f0 15		beq $97ea	                beq commandLineTailEmpty
2341	.97d5		a2 00		ldx #$00	                ldx #$00
2342	.97d7		38		sec		                sec
2343	.97d8		20 d8 f1	jsr $f1d8	                jsr gsinitEntryPoint
2344	.97db						-
2345	.97db		20 e9 f1	jsr $f1e9	                jsr gsreadEntryPoint
2346	.97de		b0 06		bcs $97e6	                bcs bneBadKeyError
2347	.97e0		9d 00 dc	sta $dc00,x	                sta hazel.commandLine,x
2348	.97e3		e8		inx		                inx
2349	.97e4		80 f5		bra $97db	                bra -

2351	.97e6						bneBadKeyError:
2353	.97e6		d0 a4		bne $978c	                bne L96C5
2357	.97e8		86 b0		stx $b0		                stx starKEYWorkspace.newStringLength
2358	.97ea						commandLineTailEmpty:
2359	.97ea		a4 e6		ldy $e6		                ldy $E6                        ;Y = soft key number
2360	.97ec		20 62 eb	jsr $eb62	                jsr getSoftKeyStringLength
2361	.97ef		85 b5		sta $b5		                sta starKEYWorkspace.counter+0
2362	.97f1		38		sec		                sec
2363	.97f2		e5 b0		sbc $b0		                sbc starKEYWorkspace.newStringLength ;A=existing len-new len
2364	.97f4		b0 16		bcs $980c	                bcs newStringWillFit            ;taken if new string shorter, meaning it'll definitely fit

2366	.97f6		49 ff		eor #$ff	                eor #$FF
2367	.97f8		69 01		adc #$01	                adc #$01                     ;A=new len-existing len
2368	.97fa		6d 10 80	adc $8010	                adc andy.softKeys.endLSB
2369	.97fd		aa		tax		                tax
2370	.97fe		ad 21 80	lda $8021	                lda andy.softKeys.endMSB
2371	.9801		69 00		adc #$00	                adc #$00
2372	.9803		c9 84		cmp #$84	                cmp #>(andy.softKeys.end)
2373	.9805		90 05		bcc $980c	                bcc newStringWillFit

2375							                ; Produce slightly cryptic "Bad key" if string won't
2376							                ; fit.
2377	.9807		d0 dd		bne $97e6	                bne bneBadKeyError
2378	.9809		8a		txa		                txa
2379	.980a		d0 da		bne $97e6	                bne bneBadKeyError
2380	.980c						newStringWillFit:
2381	.980c		ad 68 02	lda $0268	                lda softKeyStringLength
2382	.980f		f0 32		beq $9843	                beq storeNewString          ;taken if new string empty
2383	.9811		ad c9 02	lda $02c9	                lda currentSoftKey
2384	.9814		c5 e6		cmp $e6		                cmp $E6
2385	.9816		90 2b		bcc $9843	                bcc storeNewString ;taken if current soft key<key - expansion will not need to relocate
2386	.9818		d0 0f		bne $9829	                bne relocateCurrentSoftKeyExpansion ;taken if current soft key>key - expansion must relocate
2387	.981a		20 2f ab	jsr $ab2f	                jsr doFollowingError
2388	>981d		fa 4b 65 79 20 69 6e 20		                .text $fa,"Key in use",0
	>9825		75 73 65 00
2389	.9829						relocateCurrentSoftKeyExpansion:
2390	.9829		64 b2		stz $b2		                stz starKEYWorkspace.destPtr+1
2391	.982b		38		sec		                sec
2392	.982c		a5 b0		lda $b0		                lda starKEYWorkspace.newStringLength
2393	.982e		e5 b5		sbc $b5		                sbc starKEYWorkspace.counter+0
2394	.9830		85 b1		sta $b1		                sta starKEYWorkspace.destPtr+0
2395	.9832		b0 02		bcs $9836	                bcs +
2396	.9834		c6 b2		dec $b2		                dec starKEYWorkspace.destPtr+1
2397	.9836						+
2398	.9836		18		clc		                clc
2399	.9837		a5 f8		lda $f8		                lda softKeyExpansionPtr+0
2400	.9839		65 b1		adc $b1		                adc starKEYWorkspace.destPtr+0
2401	.983b		85 f8		sta $f8		                sta softKeyExpansionPtr+0
2402	.983d		a5 f9		lda $f9		                lda softKeyExpansionPtr+1
2403	.983f		65 b2		adc $b2		                adc starKEYWorkspace.destPtr+1
2404	.9841		85 f9		sta $f9		                sta softKeyExpansionPtr+1
2405	.9843						storeNewString:
2406	.9843		ce 84 02	dec $0284	                dec softKeyConsistencyFlag   ;mark soft keys inconsistent
2407	.9846		a6 e6		ldx $e6		                ldx $E6                      ;X=key number
2408	.9848		a5 b5		lda $b5		                lda starKEYWorkspace.counter+0
2409	.984a		f0 45		beq $9891	                beq makeSpaceForNewString ;taken if no existing string for this soft key

2411							                ; delete existing string
2412	.984c		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2413	.984f		85 b1		sta $b1		                sta starKEYWorkspace.destPtr+0
2414	.9851		bd 11 80	lda $8011,x	                lda andy.softKeys.stringMSBs,x
2415	.9854		85 b2		sta $b2		                sta starKEYWorkspace.destPtr+1
2416	.9856		bd 01 80	lda $8001,x	                lda andy.softKeys.stringLSBs+1,x
2417	.9859		85 b3		sta $b3		                sta starKEYWorkspace.srcPtr+0
2418	.985b		bd 12 80	lda $8012,x	                lda andy.softKeys.stringMSBs+1,x
2419	.985e		85 b4		sta $b4		                sta starKEYWorkspace.srcPtr+1
2420	.9860						deleteExistingStringLoop:
2421							                ; copy byte (with postincrement)
2422	.9860		b2 b3		lda ($b3)	                lda (starKEYWorkspace.srcPtr)
2423	.9862		92 b1		sta ($b1)	                sta (starKEYWorkspace.destPtr)

2425							                ; increment destPtr
2426	.9864		e6 b1		inc $b1		                inc starKEYWorkspace.destPtr+0
2427	.9866		d0 02		bne $986a	                bne +
2428	.9868		e6 b2		inc $b2		                inc starKEYWorkspace.destPtr+1
2429	.986a						+

2431							                ; increment srcPtr
2432	.986a		e6 b3		inc $b3		                inc starKEYWorkspace.srcPtr+0
2433	.986c		d0 02		bne $9870	                bne +
2434	.986e		e6 b4		inc $b4		                inc starKEYWorkspace.srcPtr+1
2435	.9870						+

2437							                ; keep copying until end of buffer reached.
2438	.9870		a5 b3		lda $b3		                lda starKEYWorkspace.srcPtr+0
2439	.9872		cd 10 80	cmp $8010	                cmp andy.softKeys.endLSB
2440	.9875		a5 b4		lda $b4		                lda starKEYWorkspace.srcPtr+1
2441	.9877		ed 21 80	sbc $8021	                sbc andy.softKeys.endMSB
2442	.987a		90 e4		bcc $9860	                bcc deleteExistingStringLoop

2444							                ; update following strings' start addresses, which all
2445							                ; move down by the old string's length.
2446	.987c						updateAddressesLoop:
2447	.987c		e8		inx		                inx
2448	.987d		e0 11		cpx #$11	                cpx #softKeyCount+1
2449	.987f		b0 10		bcs $9891	                bcs makeSpaceForNewString
2450	.9881		38		sec		                sec
2451	.9882		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2452	.9885		e5 b5		sbc $b5		                sbc starKEYWorkspace.counter+0
2453	.9887		9d 00 80	sta $8000,x	                sta andy.softKeys.stringLSBs,x
2454	.988a		b0 f0		bcs $987c	                bcs updateAddressesLoop
2455	.988c		de 11 80	dec $8011,x	                dec andy.softKeys.stringMSBs,x
2456	.988f		80 eb		bra $987c	                bra updateAddressesLoop

2458	.9891						makeSpaceForNewString:
2459	.9891		a6 e6		ldx $e6		                ldx $E6
2460	.9893		a5 b0		lda $b0		                lda starKEYWorkspace.newStringLength
2461	.9895		f0 66		beq $98fd	                beq done
2462	.9897		ad 10 80	lda $8010	                lda andy.softKeys.endLSB
2463	.989a		85 b3		sta $b3		                sta starKEYWorkspace.srcPtr+0
2464	.989c		18		clc		                clc
2465	.989d		65 b0		adc $b0		                adc starKEYWorkspace.newStringLength
2466	.989f		85 b1		sta $b1		                sta starKEYWorkspace.destPtr+0 ;new end ptr LSB
2467	.98a1		ad 21 80	lda $8021	                lda andy.softKeys.endMSB
2468	.98a4		85 b4		sta $b4		                sta starKEYWorkspace.srcPtr+1
2469	.98a6		69 00		adc #$00	                adc #$00
2470	.98a8		85 b2		sta $b2		                sta starKEYWorkspace.destPtr+1 ;new end ptr MSB
2471	.98aa		a5 b3		lda $b3		                lda starKEYWorkspace.srcPtr+0
2472	.98ac		38		sec		                sec
2473	.98ad		fd 00 80	sbc $8000,x	                sbc andy.softKeys.stringLSBs,x
2474	.98b0		85 b5		sta $b5		                sta starKEYWorkspace.counter+0
2475	.98b2		a5 b4		lda $b4		                lda starKEYWorkspace.srcPtr+1
2476	.98b4		fd 11 80	sbc $8011,x	                sbc andy.softKeys.stringMSBs,x
2477	.98b7		85 b6		sta $b6		                sta starKEYWorkspace.counter+1
2478	.98b9						makeSpaceForNewStringLoop:
2479							                ; loop while counter>0
2480	.98b9		a5 b5		lda $b5		                lda starKEYWorkspace.counter+0
2481	.98bb		05 b6		ora $b6		                ora starKEYWorkspace.counter+1
2482	.98bd		f0 1e		beq $98dd	                beq updateAddressesLoop2

2484							                ; decrement destPtr
2485	.98bf		a5 b1		lda $b1		                lda starKEYWorkspace.destPtr+0
2486	.98c1		d0 02		bne $98c5	                bne +
2487	.98c3		c6 b2		dec $b2		                dec starKEYWorkspace.destPtr+1
2488	.98c5						+
2489	.98c5		c6 b1		dec $b1		                dec starKEYWorkspace.destPtr+0

2491							                ; decrement srcPtr
2492	.98c7		a5 b3		lda $b3		                lda starKEYWorkspace.srcPtr+0
2493	.98c9		d0 02		bne $98cd	                bne +
2494	.98cb		c6 b4		dec $b4		                dec starKEYWorkspace.srcPtr+1
2495	.98cd						+
2496	.98cd		c6 b3		dec $b3		                dec starKEYWorkspace.srcPtr+0

2498							                ; copy byte (with predecrement)
2499	.98cf		b2 b3		lda ($b3)	                lda (starKEYWorkspace.srcPtr)
2500	.98d1		92 b1		sta ($b1)	                sta (starKEYWorkspace.destPtr)

2502							                ; decrement counter
2503	.98d3		a5 b5		lda $b5		                lda starKEYWorkspace.counter+0
2504	.98d5		d0 02		bne $98d9	                bne +
2505	.98d7		c6 b6		dec $b6		                dec starKEYWorkspace.counter+1
2506	.98d9						+
2507	.98d9		c6 b5		dec $b5		                dec starKEYWorkspace.counter+0

2509	.98db		80 dc		bra $98b9	                bra makeSpaceForNewStringLoop

2511							                ; update following strings' start addresses, which all
2512							                ; move up by the new string's length.
2513	.98dd						updateAddressesLoop2:
2514	.98dd		e8		inx		                inx
2515	.98de		e0 11		cpx #$11	                cpx #softKeyCount+1
2516	.98e0		b0 0f		bcs $98f1	                bcs copyNewString
2517	.98e2		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2518	.98e5		65 b0		adc $b0		                adc starKEYWorkspace.newStringLength
2519	.98e7		9d 00 80	sta $8000,x	                sta andy.softKeys.stringLSBs,x
2520	.98ea		90 f1		bcc $98dd	                bcc updateAddressesLoop2
2521	.98ec		fe 11 80	inc $8011,x	                inc andy.softKeys.stringMSBs,x
2522	.98ef		80 ec		bra $98dd	                bra updateAddressesLoop2

2524	.98f1						copyNewString:
2525	.98f1		a0 00		ldy #$00	                ldy #$00
2526	.98f3						copyNewStringLoop:
2527	.98f3		b9 00 dc	lda $dc00,y	                lda hazel.commandLine,y
2528	.98f6		91 b3		sta ($b3),y	                sta (starKEYWorkspace.srcPtr),y
2529	.98f8		c8		iny		                iny
2530	.98f9		c6 b0		dec $b0		                dec starKEYWorkspace.newStringLength
2531	.98fb		d0 f6		bne $98f3	                bne copyNewStringLoop
2532	.98fd						done:
2533	.98fd		ee 84 02	inc $0284	                inc softKeyConsistencyFlag   ;mark soft keys consistent
2534	.9900		68		pla		                pla
2535	.9901		4c 5d e5	jmp $e55d	                jmp selectROMA
2536							                .endproc

2538							;-------------------------------------------------------------------------
2539							;
2540							; Print char, printing control codes using the string reader escape
2541							; syntax. [MasRef C.5-8]
2542							;
2543	.9904						printGSREADChar: .proc
2544	.9904		aa		tax		                tax                          ;X=char
2545	.9905		30 28		bmi $992f	                bmi printHighBitChar
2546	.9907		c9 20		cmp #$20	                cmp #$20
2547	.9909		90 1f		bcc $992a	                bcc printControlChar
2548	.990b		e8		inx		                inx
2549	.990c		30 0f		bmi $991d	                bmi vdu127
2550	.990e		ca		dex		                dex                          ;restore old char
2551	.990f		c9 22		cmp #$22	                cmp #'"'
2552	.9911		f0 11		beq $9924	                beq printEscapedX
2553	.9913		c9 7c		cmp #$7c	                cmp #'|'
2554	.9915		d0 03		bne $991a	                bne printA
2555							                ; print "||"
2556	.9917		20 ee ff	jsr $ffee	                jsr OSWRCH
2557	.991a						printA:
2558	.991a		4c ee ff	jmp $ffee	                jmp OSWRCH

2560	.991d						vdu127:
2561							                ; print "|?"
2562	.991d		20 3a 99	jsr $993a	                jsr printEscapeChar
2563	.9920		a9 3f		lda #$3f	                lda #'?'
2564	.9922		80 f6		bra $991a	                bra printA

2566	.9924						printEscapedX:
2567	.9924		20 3a 99	jsr $993a	                jsr printEscapeChar
2568	.9927		8a		txa		                txa
2569	.9928		80 f0		bra $991a	                bra printA

2571	.992a						printControlChar:
2572	.992a		09 40		ora #$40	                ora #$40
2573	.992c		aa		tax		                tax
2574	.992d		80 f5		bra $9924	                bra printEscapedX

2576	.992f						printHighBitChar:
2577	.992f		48		pha		                pha
2578	.9930		a2 21		ldx #$21	                ldx #'!'
2579	.9932		20 24 99	jsr $9924	                jsr printEscapedX
2580	.9935		68		pla		                pla
2581	.9936		29 7f		and #$7f	                and #$7F
2582	.9938		80 ca		bra $9904	                bra printGSREADChar

2584	.993a						printEscapeChar:
2585	.993a		a9 7c		lda #$7c	                lda #'|'
2586	.993c		80 dc		bra $991a	                bra printA
2587							                .endproc

2589							;-------------------------------------------------------------------------

2595							;-------------------------------------------------------------------------

2597	.993e						L9923:
2598	.993e		a9 03		lda #$03	                lda #$03
2599	.9940		20 97 d2	jsr $d297	                jsr LD298
2600	.9943		90 12		bcc $9957	                bcc L993C
2601	.9945		20 4b 99	jsr $994b	                jsr L9930
2602	.9948		20 a8 d8	jsr $d8a8	                jsr LD8A9
2603	.994b						L9930:
2604	.994b		a2 20		ldx #$20	                ldx #$20
2605	.994d		4c ba e2	jmp $e2ba	                jmp LE2B8

2607	.9950						L9935:
2608	.9950		a9 02		lda #$02	                lda #$02
2609	.9952		20 97 d2	jsr $d297	                jsr LD298
2610	.9955		b0 64		bcs $99bb	                bcs L99A0
2611	.9957						L993C:
2612	.9957		20 d1 d3	jsr $d3d1	                jsr LD3D2
2613	.995a		20 da 9a	jsr $9ada	                jsr L9ABF
2614	.995d		80 08		bra $9967	                bra L994C

2616	.995f						L9944:
2617	.995f		20 19 d4	jsr $d419	                jsr LD41A
2618	.9962		f0 57		beq $99bb	                beq L99A0
2619	.9964		20 d1 d3	jsr $d3d1	                jsr LD3D2
2620	.9967						L994C:
2621	.9967		a5 e1		lda $e1		                lda $E1
2622	.9969		89 20		bit #$20	                bit #$20
2623	.996b		f0 05		beq $9972	                beq L9957
2624	.996d		48		pha		                pha
2625	.996e		20 a2 d6	jsr $d6a2	                jsr LD6A3
2626	.9971		68		pla		                pla
2627	.9972						L9957:
2628	.9972		89 10		bit #$10	                bit #$10
2629	.9974		f0 03		beq $9979	                beq L995E
2630	.9976		20 97 d6	jsr $d697	                jsr LD698
2631	.9979						L995E:
2632	.9979		20 17 9a	jsr $9a17	                jsr L99FC
2633	.997c		08		php		                php
2634	.997d		20 75 9a	jsr $9a75	                jsr L9A5A
2635	.9980		a2 42		ldx #$42	                ldx #$42
2636	.9982		a0 46		ldy #$46	                ldy #$46
2637	.9984		a9 20		lda #$20	                lda #$20
2638	.9986		2c 49 88	bit $8849	                bit L8849
2639	.9989		f0 1c		beq $99a7	                beq L998C
2640	.998b		30 18		bmi $99a5	                bmi L998A
2641	.998d		ad 2c 03	lda $032c	                lda $032C
2642	.9990		cd 37 03	cmp $0337	                cmp $0337
2643	.9993		d0 08		bne $999d	                bne L9982
2644	.9995		ad 2d 03	lda $032d	                lda $032D
2645	.9998		cd 38 03	cmp $0338	                cmp $0338
2646	.999b		f0 10		beq $99ad	                beq L9992
2647	.999d						L9982:
2648	.999d		a2 37		ldx #$37	                ldx #$37
2649	.999f		20 4c d2	jsr $d24c	                jsr LD24D
2650	.99a2		a2 42		ldx #$42	                ldx #$42
2651	.99a4		b8		clv		                clv
2652	.99a5						L998A:
2653	.99a5		a0 2c		ldy #$2c	                ldy #$2C
2654	.99a7						L998C:
2655	.99a7		30 07		bmi $99b0	                bmi L9995
2656	.99a9		50 02		bvc $99ad	                bvc L9992
2657	.99ab		a2 37		ldx #$37	                ldx #$37
2658	.99ad						L9992:
2659	.99ad		20 4c d2	jsr $d24c	                jsr LD24D
2660	.99b0						L9995:
2661	.99b0		28		plp		                plp
2662	.99b1		90 b4		bcc $9967	                bcc L994C
2663	.99b3		60		rts		                rts

2665	.99b4						L9999:
2666	.99b4		a9 01		lda #$01	                lda #$01
2667	.99b6		20 97 d2	jsr $d297	                jsr LD298
2668	.99b9		90 09		bcc $99c4	                bcc L99A9
2669	.99bb						L99A0:
2670	.99bb		a2 24		ldx #$24	                ldx #$24
2671	.99bd		80 37		bra $99f6	                bra L99DB

2673	.99bf						L99A4:
2674	.99bf		20 19 d4	jsr $d419	                jsr LD41A
2675	.99c2		f0 f7		beq $99bb	                beq L99A0
2676	.99c4						L99A9:
2677	.99c4		20 d1 d3	jsr $d3d1	                jsr LD3D2
2678	.99c7		20 e4 99	jsr $99e4	                jsr L99C9
2679	.99ca						L99AF:
2680	.99ca		20 e5 d5	jsr $d5e5	                jsr LD5E6
2681	.99cd		20 e4 99	jsr $99e4	                jsr L99C9
2682	.99d0		ad 30 88	lda $8830	                lda L8830
2683	.99d3		0d 31 88	ora $8831	                ora L8831
2684	.99d6		f0 3e		beq $9a16	                beq L99FB
2685	.99d8		2c 48 88	bit $8848	                bit L8848
2686	.99db		70 ed		bvs $99ca	                bvs L99AF
2687	.99dd		a2 42		ldx #$42	                ldx #$42
2688	.99df		20 f1 99	jsr $99f1	                jsr L99D6
2689	.99e2		80 e6		bra $99ca	                bra L99AF

2691	.99e4						L99C9:
2692	.99e4		20 33 d3	jsr $d333	                jsr LD334
2693	.99e7		20 f9 99	jsr $99f9	                jsr L99DE
2694	.99ea		2c 48 88	bit $8848	                bit L8848
2695	.99ed		30 27		bmi $9a16	                bmi L99FB
2696	.99ef		a2 46		ldx #$46	                ldx #$46
2697	.99f1						L99D6:
2698	.99f1		da		phx		                phx
2699	.99f2		20 7f d2	jsr $d27f	                jsr LD280
2700	.99f5		fa		plx		                plx
2701	.99f6						L99DB:
2702	.99f6		4c 4b db	jmp $db4b	                jmp plotPointInternal

2704	.99f9						L99DE:
2705	.99f9		a2 03		ldx #$03	                ldx #$03
2706	.99fb						L99E0:
2707	.99fb		bd 30 88	lda $8830,x	                lda L8830,x
2708	.99fe		9d 42 03	sta $0342,x	                sta $0342,x
2709	.9a01		9d 46 03	sta $0346,x	                sta $0346,x
2710	.9a04		ca		dex		                dex
2711	.9a05		10 f4		bpl $99fb	                bpl L99E0
2712	.9a07						L99EC:
2713	.9a07		ac 42 03	ldy $0342	                ldy $0342
2714	.9a0a		ad 43 03	lda $0343	                lda $0343
2715	.9a0d		20 2e c9	jsr $c92e	                jsr negateAY
2716	.9a10		8c 42 03	sty $0342	                sty $0342
2717	.9a13		8d 43 03	sta $0343	                sta $0343
2718	.9a16						L99FB:
2719	.9a16		60		rts		                rts

2721	.9a17						L99FC:
2722	.9a17		a5 e1		lda $e1		                lda $E1
2723	.9a19		8d 49 88	sta $8849	                sta L8849
2724	.9a1c		20 f9 99	jsr $99f9	                jsr L99DE
2725	.9a1f		a2 01		ldx #$01	                ldx #$01
2726	.9a21						L9A06:
2727	.9a21		9e 42 03	stz $0342,x	                stz $0342,x
2728	.9a24		9e 46 03	stz $0346,x	                stz $0346,x
2729	.9a27		ca		dex		                dex
2730	.9a28		10 f7		bpl $9a21	                bpl L9A06
2731	.9a2a						L9A0F:
2732	.9a2a		20 49 9a	jsr $9a49	                jsr L9A2E
2733	.9a2d		ad 30 88	lda $8830	                lda L8830
2734	.9a30		0d 31 88	ora $8831	                ora L8831
2735	.9a33		d0 06		bne $9a3b	                bne L9A20
2736	.9a35		38		sec		                sec
2737	.9a36		ad 47 88	lda $8847	                lda L8847
2738	.9a39		d0 cc		bne $9a07	                bne L99EC
2739	.9a3b						L9A20:
2740	.9a3b		20 e5 d5	jsr $d5e5	                jsr LD5E6
2741	.9a3e		ad 32 88	lda $8832	                lda L8832
2742	.9a41		cd 44 03	cmp $0344	                cmp $0344
2743	.9a44		f0 e4		beq $9a2a	                beq L9A0F
2744	.9a46		18		clc		                clc
2745	.9a47		80 be		bra $9a07	                bra L99EC

2747	.9a49						L9A2E:
2748	.9a49		20 33 d3	jsr $d333	                jsr LD334
2749	.9a4c		2c 48 88	bit $8848	                bit L8848
2750	.9a4f		30 07		bmi $9a58	                bmi L9A3D
2751	.9a51		08		php		                php
2752	.9a52		a2 46		ldx #$46	                ldx #$46
2753	.9a54		20 5c 9a	jsr $9a5c	                jsr L9A41
2754	.9a57		28		plp		                plp
2755	.9a58						L9A3D:
2756	.9a58		70 1a		bvs $9a74	                bvs L9A59
2757	.9a5a		a2 42		ldx #$42	                ldx #$42
2758	.9a5c						L9A41:
2759	.9a5c		ad 30 88	lda $8830	                lda L8830
2760	.9a5f		a8		tay		                tay
2761	.9a60		dd 00 03	cmp $0300,x	                cmp $0300,x
2762	.9a63		ad 31 88	lda $8831	                lda L8831
2763	.9a66		48		pha		                pha
2764	.9a67		fd 01 03	sbc $0301,x	                sbc $0301,x
2765	.9a6a		68		pla		                pla
2766	.9a6b		90 07		bcc $9a74	                bcc L9A59
2767	.9a6d		9d 01 03	sta $0301,x	                sta $0301,x
2768	.9a70		98		tya		                tya
2769	.9a71		9d 00 03	sta $0300,x	                sta $0300,x
2770	.9a74						L9A59:
2771	.9a74		60		rts		                rts

2773	.9a75						L9A5A:
2774	.9a75		ad 44 03	lda $0344	                lda $0344
2775	.9a78		0d 45 03	ora $0345	                ora $0345
2776	.9a7b		d0 5c		bne $9ad9	                bne L9ABE
2777	.9a7d		a5 e1		lda $e1		                lda $E1
2778	.9a7f		1a		inc a		                inc a
2779	.9a80		29 03		and #$03	                and #$03
2780	.9a82		d0 55		bne $9ad9	                bne L9ABE
2781	.9a84		a9 20		lda #$20	                lda #$20
2782	.9a86		2c 49 88	bit $8849	                bit L8849
2783	.9a89		10 09		bpl $9a94	                bpl L9A79
2784	.9a8b		f0 07		beq $9a94	                beq L9A79
2785	.9a8d		a2 2c		ldx #$2c	                ldx #$2C
2786	.9a8f		a0 46		ldy #$46	                ldy #$46
2787	.9a91		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
2788	.9a94						L9A79:
2789	.9a94		a9 10		lda #$10	                lda #$10
2790	.9a96		2c 49 88	bit $8849	                bit L8849
2791	.9a99		50 09		bvc $9aa4	                bvc L9A89
2792	.9a9b		f0 07		beq $9aa4	                beq L9A89
2793	.9a9d		a2 37		ldx #$37	                ldx #$37
2794	.9a9f		a0 42		ldy #$42	                ldy #$42
2795	.9aa1		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
2796	.9aa4						L9A89:
2797	.9aa4		20 da 9a	jsr $9ada	                jsr L9ABF
2798	.9aa7		a5 e1		lda $e1		                lda $E1
2799	.9aa9		49 3c		eor #$3c	                eor #$3C
2800	.9aab		2a		rol a		                rol a
2801	.9aac		20 6e c6	jsr $c66e	                jsr fixUpVPALETTEFor4Colours
2802	.9aaf		6a		ror a		                ror a
2803	.9ab0		85 e1		sta $e1		                sta $E1
2804	.9ab2		89 20		bit #$20	                bit #$20
2805	.9ab4		f0 10		beq $9ac6	                beq L9AAB
2806	.9ab6		48		pha		                pha
2807	.9ab7		a2 2c		ldx #$2c	                ldx #$2C
2808	.9ab9		a0 46		ldy #$46	                ldy #$46
2809	.9abb		20 cb d5	jsr $d5cb	                jsr sortVDUVariableWords
2810	.9abe		98		tya		                tya
2811	.9abf		aa		tax		                tax
2812	.9ac0		a0 46		ldy #$46	                ldy #$46
2813	.9ac2		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
2814	.9ac5		68		pla		                pla
2815	.9ac6						L9AAB:
2816	.9ac6		89 10		bit #$10	                bit #$10
2817	.9ac8		f0 0c		beq $9ad6	                beq L9ABB
2818	.9aca		a2 37		ldx #$37	                ldx #$37
2819	.9acc		a0 42		ldy #$42	                ldy #$42
2820	.9ace		20 cb d5	jsr $d5cb	                jsr sortVDUVariableWords
2821	.9ad1		a0 42		ldy #$42	                ldy #$42
2822	.9ad3		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
2823	.9ad6						L9ABB:
2824	.9ad6		9c 49 88	stz $8849	                stz L8849
2825	.9ad9						L9ABE:
2826	.9ad9		60		rts		                rts

2828	.9ada						L9ABF:
2829	.9ada		a2 03		ldx #$03	                ldx #$03
2830	.9adc						L9AC1:
2831	.9adc		9e 3b 03	stz $033b,x	                stz $033B,x
2832	.9adf		ca		dex		                dex
2833	.9ae0		10 fa		bpl $9adc	                bpl L9AC1
2834	.9ae2		a0 28		ldy #$28	                ldy #$28
2835	.9ae4		a2 1b		ldx #$1b	                ldx #$1B
2836	.9ae6		a9 2c		lda #$2c	                lda #$2C
2837	.9ae8		20 fa 9a	jsr $9afa	                jsr L9ADF
2838	.9aeb		20 a7 d6	jsr $d6a7	                jsr LD6A8
2839	.9aee		a0 1b		ldy #$1b	                ldy #$1B
2840	.9af0		a2 28		ldx #$28	                ldx #$28
2841	.9af2		a9 37		lda #$37	                lda #$37
2842	.9af4		20 fa 9a	jsr $9afa	                jsr L9ADF
2843	.9af7		4c 9c d6	jmp $d69c	                jmp LD69D

2845	.9afa						L9ADF:
2846	.9afa		48		pha		                pha
2847	.9afb		a5 e1		lda $e1		                lda $E1
2848	.9afd		4a		lsr a		                lsr a
2849	.9afe		90 0b		bcc $9b0b	                bcc L9AF0
2850	.9b00		ad 47 88	lda $8847	                lda L8847
2851	.9b03		d0 04		bne $9b09	                bne L9AEE
2852	.9b05		a2 3b		ldx #$3b	                ldx #$3B
2853	.9b07		80 02		bra $9b0b	                bra L9AF0

2855	.9b09						L9AEE:
2856	.9b09		a0 3b		ldy #$3b	                ldy #$3B
2857	.9b0b						L9AF0:
2858	.9b0b		8a		txa		                txa
2859	.9b0c		fa		plx		                plx
2860	.9b0d		da		phx		                phx
2861	.9b0e		48		pha		                pha
2862	.9b0f		5a		phy		                phy
2863	.9b10		a8		tay		                tay
2864	.9b11		a9 03		lda #$03	                lda #$03
2865	.9b13		85 da		sta $da		                sta $DA
2866	.9b15						L9AFA:
2867	.9b15		b9 00 03	lda $0300,y	                lda $0300,y
2868	.9b18		9d 1e 88	sta $881e,x	                sta L881E,x
2869	.9b1b		c8		iny		                iny
2870	.9b1c		e8		inx		                inx
2871	.9b1d		c6 da		dec $da		                dec $DA
2872	.9b1f		10 f4		bpl $9b15	                bpl L9AFA
2873	.9b21		7a		ply		                ply
2874	.9b22		68		pla		                pla
2875	.9b23		fa		plx		                plx
2876	.9b24						L9B09:
2877	.9b24		48		pha		                pha
2878	.9b25		5a		phy		                phy
2879	.9b26		20 7c 9b	jsr $9b7c	                jsr L9B61
2880	.9b29		ca		dex		                dex
2881	.9b2a		7a		ply		                ply
2882	.9b2b		68		pla		                pla
2883	.9b2c		da		phx		                phx
2884	.9b2d		c8		iny		                iny
2885	.9b2e		c8		iny		                iny
2886	.9b2f		1a		inc a		                inc a
2887	.9b30		1a		inc a		                inc a
2888	.9b31		e8		inx		                inx
2889	.9b32		e8		inx		                inx
2890	.9b33		20 7c 9b	jsr $9b7c	                jsr L9B61
2891	.9b36		fa		plx		                plx
2892	.9b37		20 ab 9b	jsr $9bab	                jsr L9B90
2893	.9b3a		08		php		                php
2894	.9b3b		48		pha		                pha
2895	.9b3c		bd 05 03	lda $0305,x	                lda $0305,x
2896	.9b3f		0a		asl a		                asl a
2897	.9b40		7e 0a 03	ror $030a,x	                ror $030A,x
2898	.9b43		10 03		bpl $9b48	                bpl L9B2D
2899	.9b45		20 9a 9b	jsr $9b9a	                jsr L9B7F
2900	.9b48						L9B2D:
2901	.9b48		68		pla		                pla
2902	.9b49		0a		asl a		                asl a
2903	.9b4a		7e 0a 03	ror $030a,x	                ror $030A,x
2904	.9b4d		10 07		bpl $9b56	                bpl L9B3B
2905	.9b4f		e8		inx		                inx
2906	.9b50		e8		inx		                inx
2907	.9b51		20 9a 9b	jsr $9b9a	                jsr L9B7F
2908	.9b54		ca		dex		                dex
2909	.9b55		ca		dex		                dex
2910	.9b56						L9B3B:
2911	.9b56		20 ab 9b	jsr $9bab	                jsr L9B90
2912	.9b59		10 06		bpl $9b61	                bpl L9B46
2913	.9b5b		bd 05 03	lda $0305,x	                lda $0305,x
2914	.9b5e		bc 04 03	ldy $0304,x	                ldy $0304,x
2915	.9b61						L9B46:
2916	.9b61		28		plp		                plp
2917	.9b62		30 06		bmi $9b6a	                bmi L9B4F
2918	.9b64		c0 00		cpy #$00	                cpy #$00
2919	.9b66		d0 01		bne $9b69	                bne L9B4E
2920	.9b68		3a		dec a		                dec a
2921	.9b69						L9B4E:
2922	.9b69		88		dey		                dey
2923	.9b6a						L9B4F:
2924	.9b6a		4a		lsr a		                lsr a
2925	.9b6b		48		pha		                pha
2926	.9b6c		98		tya		                tya
2927	.9b6d		6a		ror a		                ror a
2928	.9b6e		38		sec		                sec
2929	.9b6f		ca		dex		                dex
2930	.9b70		20 75 9b	jsr $9b75	                jsr L9B5A
2931	.9b73		e8		inx		                inx
2932	.9b74		68		pla		                pla
2933	.9b75						L9B5A:
2934	.9b75		fd 07 03	sbc $0307,x	                sbc $0307,x
2935	.9b78		9d 09 03	sta $0309,x	                sta $0309,x
2936	.9b7b		60		rts		                rts

2938	.9b7c						L9B61:
2939	.9b7c		48		pha		                pha
2940	.9b7d		b9 00 03	lda $0300,y	                lda $0300,y
2941	.9b80		9d 00 03	sta $0300,x	                sta $0300,x
2942	.9b83		b9 01 03	lda $0301,y	                lda $0301,y
2943	.9b86		9d 01 03	sta $0301,x	                sta $0301,x
2944	.9b89		7a		ply		                ply
2945	.9b8a		38		sec		                sec
2946	.9b8b		20 90 9b	jsr $9b90	                jsr L9B75
2947	.9b8e		e8		inx		                inx
2948	.9b8f		c8		iny		                iny
2949	.9b90						L9B75:
2950	.9b90		b9 00 03	lda $0300,y	                lda $0300,y
2951	.9b93		fd 00 03	sbc $0300,x	                sbc $0300,x
2952	.9b96		9d 04 03	sta $0304,x	                sta $0304,x
2953	.9b99		60		rts		                rts

2955	.9b9a						L9B7F:
2956	.9b9a		bd 05 03	lda $0305,x	                lda $0305,x
2957	.9b9d		bc 04 03	ldy $0304,x	                ldy $0304,x
2958	.9ba0		20 2e c9	jsr $c92e	                jsr negateAY
2959	.9ba3		9d 05 03	sta $0305,x	                sta $0305,x
2960	.9ba6		98		tya		                tya
2961	.9ba7		9d 04 03	sta $0304,x	                sta $0304,x
2962	.9baa		60		rts		                rts

2964	.9bab						L9B90:
2965	.9bab		bd 06 03	lda $0306,x	                lda $0306,x
2966	.9bae		a8		tay		                tay
2967	.9baf		dd 04 03	cmp $0304,x	                cmp $0304,x
2968	.9bb2		bd 07 03	lda $0307,x	                lda $0307,x
2969	.9bb5		fd 05 03	sbc $0305,x	                sbc $0305,x
2970	.9bb8		08		php		                php
2971	.9bb9		bd 07 03	lda $0307,x	                lda $0307,x
2972	.9bbc		28		plp		                plp
2973	.9bbd		60		rts		                rts

2975							;-------------------------------------------------------------------------
2976							;
2977							; 112-119 = Plot parallelogram [MasRef E.3-27]
2978							;
2979	.9bbe						plotParallelogram:
2980	.9bbe		a2 28		ldx #$28	                ldx #$28
2981	.9bc0		86 da		stx $da		                stx $DA
2982	.9bc2		a2 14		ldx #$14	                ldx #$14
2983	.9bc4		a0 20		ldy #$20	                ldy #$20
2984	.9bc6		a9 24		lda #$24	                lda #$24
2985	.9bc8		20 7f d5	jsr $d57f	                jsr addRegionDimensionsToVDUVariableCoordinates
2986	.9bcb		a0 14		ldy #$14	                ldy #$14
2987	.9bcd		a2 24		ldx #$24	                ldx #$24
2988	.9bcf		20 b6 d5	jsr $d5b6	                jsr sortVDUVariableCoordinates
2989	.9bd2		8e 30 88	stx $8830	                stx L8830
2990	.9bd5		a2 20		ldx #$20	                ldx #$20
2991	.9bd7		20 b6 d5	jsr $d5b6	                jsr sortVDUVariableCoordinates
2992	.9bda		8e 31 88	stx $8831	                stx L8831
2993	.9bdd		a2 28		ldx #$28	                ldx #$28
2994	.9bdf		20 b6 d5	jsr $d5b6	                jsr sortVDUVariableCoordinates
2995	.9be2		8c 33 88	sty $8833	                sty L8833
2996	.9be5		ac 31 88	ldy $8831	                ldy L8831
2997	.9be8		20 b6 d5	jsr $d5b6	                jsr sortVDUVariableCoordinates
2998	.9beb		8c 32 88	sty $8832	                sty L8832
2999	.9bee		ac 30 88	ldy $8830	                ldy L8830
3000	.9bf1		20 2a 9c	jsr $9c2a	                jsr L9C0F
3001	.9bf4		ad 33 88	lda $8833	                lda L8833
3002	.9bf7		85 e0		sta $e0		                sta $E0
3003	.9bf9		a2 2c		ldx #$2c	                ldx #$2C
3004	.9bfb		20 24 9b	jsr $9b24	                jsr L9B09
3005	.9bfe		a4 e1		ldy $e1		                ldy $E1
3006	.9c00		20 71 9c	jsr $9c71	                jsr L9C56
3007	.9c03		ac 32 88	ldy $8832	                ldy L8832
3008	.9c06		ad 33 88	lda $8833	                lda L8833
3009	.9c09		85 e1		sta $e1		                sta $E1
3010	.9c0b		a2 37		ldx #$37	                ldx #$37
3011	.9c0d		20 6c 9c	jsr $9c6c	                jsr L9C51
3012	.9c10		80 15		bra $9c27	                bra L9C0C

3014	.9c12						L9BF7;
3015	.9c12		a0 14		ldy #$14	                ldy #$14
3016	.9c14		a2 24		ldx #$24	                ldx #$24
3017	.9c16		20 b6 d5	jsr $d5b6	                jsr sortVDUVariableCoordinates
3018	.9c19		8c 32 88	sty $8832	                sty L8832
3019	.9c1c		a0 20		ldy #$20	                ldy #$20
3020	.9c1e		20 2a 9c	jsr $9c2a	                jsr L9C0F
3021	.9c21		ad 32 88	lda $8832	                lda L8832
3022	.9c24		20 68 9c	jsr $9c68	                jsr L9C4D
3023	.9c27						L9C0C:
3024	.9c27		4c e3 da	jmp $dae3	                jmp LDAE4

3026	.9c2a						L9C0F:
3027	.9c2a		20 b6 d5	jsr $d5b6	                jsr sortVDUVariableCoordinates
3028	.9c2d		8e 30 88	stx $8830	                stx L8830
3029	.9c30		ae 32 88	ldx $8832	                ldx L8832
3030	.9c33		20 b6 d5	jsr $d5b6	                jsr sortVDUVariableCoordinates
3031	.9c36		8c 32 88	sty $8832	                sty L8832
3032	.9c39		8e 31 88	stx $8831	                stx L8831
3033	.9c3c		ac 30 88	ldy $8830	                ldy L8830
3034	.9c3f		a2 fc		ldx #$fc	                ldx #$FC
3035	.9c41						L9C26:
3036	.9c41		b9 00 03	lda $0300,y	                lda $0300,y
3037	.9c44		9d 46 02	sta $0246,x	                sta vduv.workspace._42-$fc,x
3038	.9c47		9d 4a 02	sta $024a,x	                sta vduv.workspace._46-$fc,x
3039	.9c4a		c8		iny		                iny
3040	.9c4b		e8		inx		                inx
3041	.9c4c		d0 f3		bne $9c41	                bne L9C26
3042	.9c4e		ac 30 88	ldy $8830	                ldy L8830
3043	.9c51		ad 32 88	lda $8832	                lda L8832
3044	.9c54		85 e1		sta $e1		                sta $E1
3045	.9c56		a2 37		ldx #$37	                ldx #$37
3046	.9c58		20 24 9b	jsr $9b24	                jsr L9B09
3047	.9c5b		ac 30 88	ldy $8830	                ldy L8830
3048	.9c5e		ad 31 88	lda $8831	                lda L8831
3049	.9c61		20 68 9c	jsr $9c68	                jsr L9C4D
3050	.9c64		ac 31 88	ldy $8831	                ldy L8831
3051	.9c67		60		rts		                rts

3053	.9c68						L9C4D:
3054	.9c68		85 e0		sta $e0		                sta $E0
3055	.9c6a		a2 2c		ldx #$2c	                ldx #$2C
3056	.9c6c						L9C51:
3057	.9c6c		20 24 9b	jsr $9b24	                jsr L9B09
3058	.9c6f		a4 e0		ldy $e0		                ldy $E0
3059	.9c71						L9C56:
3060	.9c71		5a		phy		                phy
3061	.9c72		b9 02 03	lda $0302,y	                lda $0302,y
3062	.9c75		cd 44 03	cmp $0344	                cmp $0344
3063	.9c78		d0 08		bne $9c82	                bne L9C67
3064	.9c7a		b9 03 03	lda $0303,y	                lda $0303,y
3065	.9c7d		cd 45 03	cmp $0345	                cmp $0345
3066	.9c80		f0 39		beq $9cbb	                beq L9CA0
3067	.9c82						L9C67:
3068	.9c82		a2 2c		ldx #$2c	                ldx #$2C
3069	.9c84		20 db 9c	jsr $9cdb	                jsr L9CC0
3070	.9c87		a2 37		ldx #$37	                ldx #$37
3071	.9c89		20 db 9c	jsr $9cdb	                jsr L9CC0
3072	.9c8c		20 e3 da	jsr $dae3	                jsr LDAE4
3073	.9c8f		a2 37		ldx #$37	                ldx #$37
3074	.9c91		20 25 d7	jsr $d725	                jsr LD726
3075	.9c94		a2 2c		ldx #$2c	                ldx #$2C
3076	.9c96		20 25 d7	jsr $d725	                jsr LD726
3077	.9c99		a0 37		ldy #$37	                ldy #$37
3078	.9c9b		20 cb d5	jsr $d5cb	                jsr sortVDUVariableWords
3079	.9c9e		da		phx		                phx
3080	.9c9f		a2 fc		ldx #$fc	                ldx #$FC
3081	.9ca1						L9C86:
3082	.9ca1		b9 00 03	lda $0300,y	                lda $0300,y
3083	.9ca4		9d 4a 02	sta $024a,x	                sta vduv.workspace._46-$fc,x
3084	.9ca7		c8		iny		                iny
3085	.9ca8		e8		inx		                inx
3086	.9ca9		d0 f6		bne $9ca1	                bne L9C86
3087	.9cab		fa		plx		                plx
3088	.9cac		a0 fc		ldy #$fc	                ldy #$FC
3089	.9cae						L9C93:
3090	.9cae		bd 00 03	lda $0300,x	                lda $0300,x
3091	.9cb1		99 46 02	sta $0246,y	                sta vduv.workspace._42-$fc,y
3092	.9cb4		e8		inx		                inx
3093	.9cb5		c8		iny		                iny
3094	.9cb6		d0 f6		bne $9cae	                bne L9C93
3095	.9cb8		7a		ply		                ply
3096	.9cb9		80 b6		bra $9c71	                bra L9C56

3098	.9cbb						L9CA0:
3099	.9cbb		a9 2c		lda #$2c	                lda #$2C
3100	.9cbd		a6 e0		ldx $e0		                ldx $E0
3101	.9cbf		20 c7 9c	jsr $9cc7	                jsr L9CAC
3102	.9cc2		7a		ply		                ply
3103	.9cc3		a9 37		lda #$37	                lda #$37
3104	.9cc5		a6 e1		ldx $e1		                ldx $E1
3105	.9cc7						L9CAC:
3106	.9cc7		85 de		sta $de		                sta $DE
3107	.9cc9		bd 02 03	lda $0302,x	                lda vduv.graphicsWindowPixelsBottom+0,x
3108	.9ccc		d9 02 03	cmp $0302,y	                cmp vduv.graphicsWindowPixelsBottom+0,y
3109	.9ccf		d0 08		bne $9cd9	                bne L9CBE
3110	.9cd1		bd 03 03	lda $0303,x	                lda vduv.graphicsWindowPixelsBottom+1,x
3111	.9cd4		d9 03 03	cmp $0303,y	                cmp vduv.graphicsWindowPixelsBottom+1,y
3112	.9cd7		f0 05		beq $9cde	                beq L9CC3
3113	.9cd9						L9CBE:
3114	.9cd9		a6 de		ldx $de		                ldx $DE
3115	.9cdb						L9CC0:
3116	.9cdb		20 1c d7	jsr $d71c	                jsr LD71D
3117	.9cde						L9CC3:
3118	.9cde		bd 00 03	lda $0300,x	                lda $0300,x
3119	.9ce1		cd 42 03	cmp $0342	                cmp $0342
3120	.9ce4		bd 01 03	lda $0301,x	                lda $0301,x
3121	.9ce7		ed 43 03	sbc $0343	                sbc $0343
3122	.9cea		10 0d		bpl $9cf9	                bpl L9CDE
3123	.9cec		bd 00 03	lda $0300,x	                lda $0300,x
3124	.9cef		8d 42 03	sta $0342	                sta $0342
3125	.9cf2		bd 01 03	lda $0301,x	                lda $0301,x
3126	.9cf5		8d 43 03	sta $0343	                sta $0343
3127	.9cf8		60		rts		                rts

3129	.9cf9						L9CDE:
3130	.9cf9		ad 46 03	lda $0346	                lda $0346
3131	.9cfc		dd 00 03	cmp $0300,x	                cmp $0300,x
3132	.9cff		ad 47 03	lda $0347	                lda $0347
3133	.9d02		fd 01 03	sbc $0301,x	                sbc $0301,x
3134	.9d05		10 0c		bpl $9d13	                bpl L9CF8
3135	.9d07		bd 00 03	lda $0300,x	                lda $0300,x
3136	.9d0a		8d 46 03	sta $0346	                sta $0346
3137	.9d0d		bd 01 03	lda $0301,x	                lda $0301,x
3138	.9d10		8d 47 03	sta $0347	                sta $0347
3139	.9d13						L9CF8:
3140	.9d13		60		rts		                rts

3142	.9d14						L9CF9:
3143	.9d14		20 a0 dd	jsr $dda0	                jsr LDDA1
3144	.9d17		9c 36 03	stz $0336	                stz $0336
3145	.9d1a		9c 37 03	stz $0337	                stz $0337
3146	.9d1d		20 af dc	jsr $dcaf	                jsr LDCB0
3147	.9d20		d0 4f		bne $9d71	                bne L9D56
3148	.9d22		20 1b dc	jsr $dc1b	                jsr LDC1C
3149	.9d25						L9D0A:
3150	.9d25		24 ff		bit $ff		                bit $FF
3151	.9d27		30 48		bmi $9d71	                bmi L9D56
3152	.9d29		ad 36 03	lda $0336	                lda $0336
3153	.9d2c		cd 37 03	cmp $0337	                cmp $0337
3154	.9d2f		f0 40		beq $9d71	                beq L9D56
3155	.9d31		1a		inc a		                inc a
3156	.9d32		8d 36 03	sta $0336	                sta $0336
3157	.9d35		aa		tax		                tax
3158	.9d36		bd 00 84	lda $8400,x	                lda L8400,x
3159	.9d39		8d 28 03	sta $0328	                sta $0328
3160	.9d3c		bd 00 85	lda $8500,x	                lda L8500,x
3161	.9d3f		8d 2c 03	sta $032c	                sta $032C
3162	.9d42		bd 00 86	lda $8600,x	                lda L8600,x
3163	.9d45		48		pha		                pha
3164	.9d46		4a		lsr a		                lsr a
3165	.9d47		4a		lsr a		                lsr a
3166	.9d48		8d 29 03	sta $0329	                sta $0329
3167	.9d4b		68		pla		                pla
3168	.9d4c		29 03		and #$03	                and #$03
3169	.9d4e		8d 2d 03	sta $032d	                sta $032D
3170	.9d51		bd 00 87	lda $8700,x	                lda L8700,x
3171	.9d54		9c 2b 03	stz $032b	                stz $032B
3172	.9d57		cd 06 03	cmp $0306	                cmp $0306
3173	.9d5a		f0 0a		beq $9d66	                beq L9D4B
3174	.9d5c		85 e0		sta $e0		                sta $E0
3175	.9d5e		1a		inc a		                inc a
3176	.9d5f		20 47 dc	jsr $dc47	                jsr LDC48
3177	.9d62		b0 0d		bcs $9d71	                bcs L9D56
3178	.9d64		a5 e0		lda $e0		                lda $E0
3179	.9d66						L9D4B:
3180	.9d66		cd 02 03	cmp $0302	                cmp $0302
3181	.9d69		f0 ba		beq $9d25	                beq L9D0A
3182	.9d6b		3a		dec a		                dec a
3183	.9d6c		20 47 dc	jsr $dc47	                jsr LDC48
3184	.9d6f		90 b4		bcc $9d25	                bcc L9D0A
3185	.9d71						L9D56:
3186	.9d71		60		rts		                rts

3188	.9d72						L9D57:
3189	.9d72		ad 32 03	lda $0332	                lda $0332
3190	.9d75		a8		tay		                tay
3191	.9d76		cd 2c 03	cmp $032c	                cmp $032C
3192	.9d79		ad 33 03	lda $0333	                lda $0333
3193	.9d7c		aa		tax		                tax
3194	.9d7d		ed 2d 03	sbc $032d	                sbc $032D
3195	.9d80		b0 0a		bcs $9d8c	                bcs L9D71
3196	.9d82		c8		iny		                iny
3197	.9d83		d0 01		bne $9d86	                bne L9D6B
3198	.9d85		e8		inx		                inx
3199	.9d86						L9D6B:
3200	.9d86		8c 2e 03	sty $032e	                sty $032E
3201	.9d89		8e 2f 03	stx $032f	                stx $032F
3202	.9d8c						L9D71:
3203	.9d8c		60		rts		                rts

3205							;-------------------------------------------------------------------------

3213							;-------------------------------------------------------------------------

3221							;-------------------------------------------------------------------------
3222							;
3223							; Read byte from EEPROM by 0-based CMOS RAM offset (readCMOSByte) or
3224							; RTC register index (readRTCByte).
3225							;
3226							; (The number of RTC registers on the Compact is 0, so readRTCByte and
3227							; readCMOSByte use the same indexes. Nevertheless, the two routines
3228							; behave differently... presumably I still haven't quite got this bit
3229							; right.)
3230							;
3231							; entry:
3232							;
3233							; X = address to read from
3234							;
3235							; exit:
3236							;
3237							; A = Y = byte read

3304							;-------------------------------------------------------------------------

3332							;-------------------------------------------------------------------------
3333							;
3334							; Transmit 1 bit over the I2C bus.
3335							;
3336							; preserves: P
3337							;

3350							;-------------------------------------------------------------------------
3351							;
3352							; Set the I2C clock line high.
3353							;
3354							; preserves: A/X/Y/C
3355							;

3367							;-------------------------------------------------------------------------
3368							;
3369							; Set the I2C clock line low.
3370							;
3371							; preserves: A/X/Y/C
3372							;

3383							;-------------------------------------------------------------------------
3384							;
3385							; "A change in the state of the data line, from HIGH to LOW, while the
3386							; clock is HIGH, defines the START condition."
3387							;
3388							; preserves: X/Y/P

3405							;-------------------------------------------------------------------------
3406							;
3407							; Set the I2C data line low.
3408							;
3409							; preserves: A/X/Y/C
3410							;

3421							;-------------------------------------------------------------------------

3454							;-------------------------------------------------------------------------
3455							;
3456							; Set the I2C data line to a particular value.
3457							;
3458							; entry:
3459							;
3460							; C = state of signal: 1 = high, 0 = low
3461							;
3462							; preserves: C

3470							;-------------------------------------------------------------------------
3471							;
3472							; Set the I2C data line high.
3473							;
3474							; preserves: A/X/Y/C
3475							;

3486							;-------------------------------------------------------------------------
3487							;
3488							; Transmits 1 byte/8 bits over the I2C bus.
3489							;
3490							; entry: A = byte to transmit

3507							;-------------------------------------------------------------------------

3614							;-------------------------------------------------------------------------

3629							;-------------------------------------------------------------------------

3662							;-------------------------------------------------------------------------

3668							;-------------------------------------------------------------------------

3674							;-------------------------------------------------------------------------
3675							;
3676							; Utils/Terminal ROM service entry point.
3677							;
3678	.9d8d						utilsServiceEntryPoint:
3688	.9d8d		c9 fe		cmp #$fe	                cmp #romServiceCallTubeSystemPostInitialisation
3689	.9d8f		90 56		bcc $9de7	                bcc handleNonTube
3690	.9d91		d0 14		bne $9da7	                bne handleTubeMainInitialisation
3691	.9d93						handleTubeSystemPostInitialisation:
3692	.9d93		c0 00		cpy #$00	                cpy #$00
3693	.9d95		f0 50		beq $9de7	                beq handleNonTube

3695							                ; [Tube p28] - write out the startup message that the
3696							                ; second processor has been stuck trying to write out.
3697	.9d97						writeSecondProcessorStartupMessageLoop:
3698	.9d97		2c e0 fe	bit $fee0	                bit tube.status1
3699	.9d9a		10 fb		bpl $9d97	                bpl writeSecondProcessorStartupMessageLoop
3700	.9d9c		ad e1 fe	lda $fee1	                lda tube.data1
3701	.9d9f		f0 44		beq $9de5	                beq L9DCA
3702	.9da1		20 ee ff	jsr $ffee	                jsr OSWRCH
3703	.9da4		4c 97 9d	jmp $9d97	                jmp writeSecondProcessorStartupMessageLoop

3705	.9da7						handleTubeMainInitialisation:
3706	.9da7		a9 82		lda #$82	                lda #<tubeHost.eventHandler
3707	.9da9		8d 20 02	sta $0220	                sta EVENTV+0
3708	.9dac		a9 06		lda #$06	                lda #>tubeHost.eventHandler
3709	.9dae		8d 21 02	sta $0221	                sta EVENTV+1
3710	.9db1		a9 16		lda #$16	                lda #<tubeHostBrkHandler
3711	.9db3		8d 02 02	sta $0202	                sta BRKV+0
3712	.9db6		a9 00		lda #$00	                lda #>tubeHostBrkHandler
3713	.9db8		8d 03 02	sta $0203	                sta BRKV+1
3714	.9dbb		a9 8e		lda #$8e	                lda #tube.status1.S|tube.status1.M|tube.status1.J|tube.status1.I;
3715	.9dbd		8d e0 fe	sta $fee0	                sta tube.status1

3717							                ; Copy Tube host code into main RAM.
3718	.9dc0		a0 00		ldy #$00	                ldy #$00
3719	.9dc2						-
3720	.9dc2		b9 87 ab	lda $ab87,y	                lda tubeHost.codePage0,y
3721	.9dc5		99 00 04	sta $0400,y	                sta tubeHostAddr+0*256,y
3722	.9dc8		b9 7c ac	lda $ac7c,y	                lda tubeHost.codePages12,y
3723	.9dcb		99 00 05	sta $0500,y	                sta tubeHostAddr+1*256,y
3724	.9dce		b9 7c ad	lda $ad7c,y	                lda tubeHost.codePages12+256,y
3725	.9dd1		99 00 06	sta $0600,y	                sta tubeHostAddr+2*256,y
3726	.9dd4		88		dey		                dey
3727	.9dd5		d0 eb		bne $9dc2	                bne -

3729	.9dd7		20 1f 04	jsr $041f	                jsr tubeHost.resetTubeClaim

3731							                ; Copy BRK handler into zero page.
3736	.9dda		a2 41		ldx #$41	                ldx #size(tubeHost.zeroPageCode)
3738	.9ddc						-
3739	.9ddc		bd 46 ab	lda $ab46,x	                lda tubeHost.zeroPageCode,x

3741							                ; can't use .forcew due to the comma in the operand
3745	.9ddf		9d 16 00	sta $0016,x	                sta @w tubeZeroPageCodeAddr,x
3747	.9de2		ca		dex		                dex
3748	.9de3		10 f7		bpl $9ddc	                bpl -

3751	.9de5						L9DCA:
3752	.9de5		a9 00		lda #$00	                lda #$00                     ; Claim call and return

3754	.9de7						handleNonTube:
3765	.9de7		c9 12		cmp #$12	                cmp #romServiceCallInitialiseFilingSystem
3766	.9de9		d0 1a		bne $9e05	                bne handleBreakInstruction
3771	.9deb		c0 04		cpy #$04	                cpy #fsTapeOrROMMax+1
3772	.9ded		b0 42		bcs $9e31	                bcs L9E16                    ; taken if not tape/rom
3773	.9def		c0 00		cpy #$00	                cpy #fsNone
3774	.9df1		f0 3e		beq $9e31	                beq L9E16                    ; taken if no FS
3775	.9df3		a2 03		ldx #$03	                ldx #3                       ; assume tape, 300 baud tape
3776	.9df5		98		tya		                tya                          ; Y = FS number
3777	.9df6		c9 02		cmp #$02	                cmp #fs300BaudTape
3778	.9df8		b0 04		bcs $9dfe	                bcs L9DE3              ; taken if 300 baud tape or ROM
3779	.9dfa		a2 00		ldx #$00	                ldx #$00               ; X=0 for 1200 baud
3780	.9dfc		69 02		adc #$02	                adc #$02            ; adjust so that the result of the
3781							                                    ; following adc will be $8c
3782	.9dfe						L9DE3:
3783	.9dfe		69 89		adc #$89	                adc #$89                     ; Convert to TAPE/ROM select value
3785	.9e00		20 f7 ec	jsr $ecf7	                jsr selectROMOrTAPEByOSBYTE
3786	.9e03		80 e0		bra $9de5	                bra L9DCA                    ; Jump to claim and return

3788	.9e05						handleBreakInstruction:
3789	.9e05		c9 06		cmp #$06	                cmp #romServiceCallBreakInstruction
3790	.9e07		d0 29		bne $9e32	                bne handleCloseAllOpenFiles
3791	.9e09		ad dd df	lda $dfdd	                lda hazel.hasACCCONChanged ; Skip if ACCCON not changed
3792	.9e0c		f0 09		beq $9e17	                beq closeMoveSrcHandle
3793	.9e0e		9c dd df	stz $dfdd	                stz hazel.hasACCCONChanged ; Clear ACCCON changed flag
3794	.9e11		ad dc df	lda $dfdc	                lda hazel.oldACCCON        ; Restore ACCCON
3795	.9e14		8d 34 fe	sta $fe34	                sta ACCCON
3796	.9e17						closeMoveSrcHandle:
3797	.9e17		5a		phy		                phy
3798	.9e18		ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle
3799	.9e1b		f0 06		beq $9e23	                beq closeMoveDestHandle
3800	.9e1d		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
3801	.9e20		20 e5 8e	jsr $8ee5	                jsr closeFile
3802	.9e23						closeMoveDestHandle:
3803	.9e23		ac d5 df	ldy $dfd5	                ldy hazel.moveDestHandle
3804	.9e26		f0 06		beq $9e2e	                beq L9E13
3805	.9e28		9c d5 df	stz $dfd5	                stz hazel.moveDestHandle
3806	.9e2b		20 e5 8e	jsr $8ee5	                jsr closeFile
3807	.9e2e						L9E13:
3808	.9e2e		7a		ply		                ply
3809	.9e2f		a9 06		lda #$06	                lda #romServiceCallBreakInstruction ; restore A
3810	.9e31						L9E16:
3811	.9e31		60		rts		                rts
3812	.9e32						handleCloseAllOpenFiles:
3813	.9e32		c9 26		cmp #$26	                cmp #romServiceCallCloseAllOpenFiles
3814	.9e34		d0 1d		bne $9e53	                bne handleHelp
3816	.9e36		a9 8d		lda #$8d	                lda #$8D
3817	.9e38		20 47 9e	jsr $9e47	                jsr L9E2C
3818	.9e3b		a2 03		ldx #$03	                ldx #$03
3819	.9e3d		a9 04		lda #$04	                lda #$04
3820	.9e3f		24 c6		bit $c6		                bit $C6
3821	.9e41		f0 02		beq $9e45	                beq L9E2A
3822	.9e43		a2 00		ldx #$00	                ldx #$00
3823	.9e45						L9E2A:
3824	.9e45		a9 8c		lda #$8c	                lda #$8C
3825	.9e47						L9E2C:
3827	.9e47		20 f7 ec	jsr $ecf7	                jsr selectROMOrTAPEByOSBYTE
3828	.9e4a		a9 00		lda #$00	                lda #$00
3829	.9e4c		a8		tay		                tay
3830	.9e4d		20 15 a2	jsr $a215	                jsr osfindTapeOrROM
3831	.9e50		a9 26		lda #$26	                lda #$26
3832	.9e52		60		rts		                rts

3834	.9e53						handleHelp
3835	.9e53		c9 09		cmp #$09	                cmp #romServiceCallHelp
3837	.9e55		d0 53		bne $9eaa	                bne handleTerminal
3841	.9e57		5a		phy		                phy
3842	.9e58		b1 f2		lda ($f2),y	                lda ($F2),y
3843	.9e5a		c9 0d		cmp #$0d	                cmp #$0D
3844	.9e5c		d0 1e		bne $9e7c	                bne L9E61
3845	.9e5e		20 17 9f	jsr $9f17	                jsr L9EFC
3846	.9e61		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
3847	>9e64		20 20 4d 4f 53 0d		                .text "  MOS",13
3849	>9e6a		0d 54 45 52 4d 49 4e 41		                .text 13,"TERMINAL 1.20",13
	>9e72		4c 20 31 2e 32 30 0d
3861	>9e79		00				                .text 0
3862	.9e7a		80 2a		bra $9ea6	                bra L9E8B
3863	.9e7c						L9E61:
3864	.9e7c		a2 02		ldx #$02	                ldx #size(mosHelpSubject)-1
3865	.9e7e						L9E63:
3866	.9e7e		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
3867	.9e80		c9 2e		cmp #$2e	                cmp #'.'
3868	.9e82		f0 2c		beq $9eb0	                beq L9E95
3869	.9e84		29 df		and #$df	                and #$DF
3870	.9e86		dd ad 9e	cmp $9ead,x	                cmp mosHelpSubject,x
3871	.9e89		d0 0b		bne $9e96	                bne L9E7B
3872	.9e8b		c8		iny		                iny
3873	.9e8c		ca		dex		                dex
3874	.9e8d		10 ef		bpl $9e7e	                bpl L9E63
3875	.9e8f		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
3876	.9e91		20 36 ea	jsr $ea36	                jsr isLetter
3877	.9e94		b0 1a		bcs $9eb0	                bcs L9E95
3878	.9e96						L9E7B:
3879	.9e96		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
3880	.9e98		c9 0d		cmp #$0d	                cmp #13
3881	.9e9a		f0 0a		beq $9ea6	                beq L9E8B
3882	.9e9c		c8		iny		                iny
3883	.9e9d		c9 20		cmp #$20	                cmp #' '
3884	.9e9f		d0 f5		bne $9e96	                bne L9E7B
3885	.9ea1		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
3886	.9ea4		d0 d6		bne $9e7c	                bne L9E61
3887	.9ea6						L9E8B:
3888	.9ea6		7a		ply		                ply
3889	.9ea7		a9 09		lda #$09	                lda #romServiceCallHelp
3890	.9ea9						LA304:
3891	.9ea9		60		rts		                rts

3894	.9eaa						handleTerminal:
3895	.9eaa		4c 37 ae	jmp $ae37	                jmp terminalServiceEntryPoint

3898	>9ead		53 4f 4d			mosHelpSubject: .text "SOM"

3900	.9eb0						L9E95:
3901	.9eb0		20 17 9f	jsr $9f17	                jsr L9EFC
3902	.9eb3		a9 37		lda #$37	                lda #<mosCommandTable
3903	.9eb5		85 b0		sta $b0		                sta terminalHELPWorkspace.tablePtr+0
3904	.9eb7		a9 81		lda #$81	                lda #>mosCommandTable
3905	.9eb9		85 b1		sta $b1		                sta terminalHELPWorkspace.tablePtr+1
3906	.9ebb						L9EA0:
3907	.9ebb		b2 b0		lda ($b0)	                lda (terminalHELPWorkspace.tablePtr)
3908	.9ebd		30 50		bmi $9f0f	                bmi L9EF4
3913	.9ebf		20 28 9f	jsr $9f28	                jsr printSpace
3914	.9ec2		20 28 9f	jsr $9f28	                jsr printSpace
3915	.9ec5		b2 b0		lda ($b0)	                lda (terminalHELPWorkspace.tablePtr)
3916	.9ec7						L9EAC:
3921	.9ec7		20 2a 9f	jsr $9f2a	                jsr L9F0E
3922	.9eca						LA711:
3923	.9eca		e6 b0		inc $b0		                inc terminalHELPWorkspace.tablePtr+0
3924	.9ecc		d0 02		bne $9ed0	                bne L9EB5
3925	.9ece		e6 b1		inc $b1		                inc terminalHELPWorkspace.tablePtr+1
3926	.9ed0						L9EB5:
3927	.9ed0		b2 b0		lda ($b0)	                lda (terminalHELPWorkspace.tablePtr)
3928	.9ed2		10 f3		bpl $9ec7	                bpl L9EAC

3930							                ; add 4 to tablePtr
3931	.9ed4		a9 04		lda #$04	                lda #$04
3932	.9ed6		18		clc		                clc
3933	.9ed7		65 b0		adc $b0		                adc terminalHELPWorkspace.tablePtr+0
3934	.9ed9		85 b0		sta $b0		                sta terminalHELPWorkspace.tablePtr+0
3935	.9edb		90 02		bcc $9edf	                bcc +
3936	.9edd		e6 b1		inc $b1		                inc terminalHELPWorkspace.tablePtr+1
3937	.9edf						+
3938	.9edf		20 5e e2	jsr $e25e	                jsr LE25C
3939	.9ee2		e0 13		cpx #$13	                cpx #19
3940	.9ee4		f0 24		beq $9f0a	                beq L9EEF
3941	.9ee6						L9ECB:
3942	.9ee6		20 54 e2	jsr $e254	                jsr getTextCursorPositionWithColumn81
3943	.9ee9		8a		txa		                txa
3944	.9eea		f0 cf		beq $9ebb	                beq L9EA0
3945	.9eec		e0 14		cpx #$14	                cpx #20
3946	.9eee		f0 cb		beq $9ebb	                beq L9EA0
3947	.9ef0		90 0d		bcc $9eff	                bcc L9EE4
3948	.9ef2		e0 28		cpx #$28	                cpx #40
3949	.9ef4		f0 c5		beq $9ebb	                beq L9EA0
3950	.9ef6		b0 0c		bcs $9f04	                bcs L9EE9
3951	.9ef8		20 5e e2	jsr $e25e	                jsr LE25C
3952	.9efb		e0 27		cpx #$27	                cpx #39
3953	.9efd		f0 0b		beq $9f0a	                beq L9EEF
3954	.9eff						L9EE4:
3955	.9eff		20 28 9f	jsr $9f28	                jsr printSpace
3956	.9f02		80 e2		bra $9ee6	                bra L9ECB

3958	.9f04						L9EE9:
3959	.9f04		e0 3c		cpx #$3c	                cpx #60
3960	.9f06		90 f7		bcc $9eff	                bcc L9EE4
3961	.9f08		f0 b1		beq $9ebb	                beq L9EA0
3962	.9f0a						L9EEF:
3963	.9f0a		20 3a 9f	jsr $9f3a	                jsr printNewLine
3964	.9f0d		80 ac		bra $9ebb	                bra L9EA0

3966	.9f0f						L9EF4:
3967	.9f0f		20 54 e2	jsr $e254	                jsr getTextCursorPositionWithColumn81
3968	.9f12		8a		txa		                txa
3969	.9f13		f0 91		beq $9ea6	                beq L9E8B
3970	.9f15		80 f3		bra $9f0a	                bra L9EEF

3972	.9f17						L9EFC:
3973	.9f17		5a		phy		                phy
3974	.9f18		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
3975	>9f1b		0d 4d 4f 53 20 33 2e 32		                .text 13,versionString,13,0
	>9f23		39 0d 00
3976	.9f26		7a		ply		                ply
3977	.9f27		60		rts		                rts

3979							;-------------------------------------------------------------------------
3980							;
3981	.9f28						printSpace:
3982	.9f28		a9 20		lda #$20	                lda #$20
3983	.9f2a						L9F0E:
3984	.9f2a		da		phx		                phx
3985	.9f2b		a6 b0		ldx $b0		                ldx $B0
3986	.9f2d		da		phx		                phx
3987	.9f2e		a6 b1		ldx $b1		                ldx $B1
3988	.9f30		20 ee ff	jsr $ffee	                jsr OSWRCH
3989	.9f33						restoreB1AndB0:
3990	.9f33		86 b1		stx $b1		                stx $B1
3991	.9f35		fa		plx		                plx
3992	.9f36		86 b0		stx $b0		                stx $B0
3993	.9f38		fa		plx		                plx
3994	.9f39		60		rts		                rts

3996							;-------------------------------------------------------------------------

3998	.9f3a						printNewLine:
3999	.9f3a		da		phx		                phx
4000	.9f3b		a6 b0		ldx $b0		                ldx $B0
4001	.9f3d		da		phx		                phx
4002	.9f3e		a6 b1		ldx $b1		                ldx $B1
4003	.9f40		20 e7 ff	jsr $ffe7	                jsr OSNEWL
4004	.9f43		80 ee		bra $9f33	                bra restoreB1AndB0

4006							;-------------------------------------------------------------------------

4008							; TAPE/ROM OSARGS handler
4009							; =======================
4010	.9f45						osargsTapeOrROM:
4011	.9f45		c0 00		cpy #$00	                cpy #$00       ; Handle<>0 - read/write open file info
4012	.9f47		d0 0e		bne $9f57	                bne L9F3B
4013	.9f49		09 00		ora #$00	                ora #$00 ; A<>0 - read/write filing system info - exit
4014	.9f4b		d0 09		bne $9f56	                bne L9F3A

4016							; A=0, Y=0 - read current filing system
4017							; -------------------------------------
4018	.9f4d		a9 03		lda #$03	                lda #$03                     ; Prepare A=ROMFS
4020	.9f4f		2c 47 02	bit $0247	                bit cfsRFSFSSwitch           ; If TAPE/ROM switch
4021	.9f52		d0 02		bne $9f56	                bne L9F3A
4022	.9f54		25 c6		and $c6		                and $C6           ; Mask with speed to give A=2 or A=1

4025							; TAPE/ROM FSC 6 - shut down FS
4026							; TAPE/ROM FSC 8 - OS command
4027							; TAPE/ROM FSC 10 - *INFO
4028							; -----------------------------
4029	.9f56						L9F3A:
4030	.9f56		60		rts		                rts

4032							; OSARGS handle<>0 - red/write open file info
4033							; -------------------------------------------
4034	.9f57						L9F3B:
4035	.9f57		c9 00		cmp #$00	                cmp #$00                     ; Not =PTR, exit unsupported
4036	.9f59		d0 fb		bne $9f56	                bne L9F3A
4037	.9f5b		c0 02		cpy #$02	                cpy #$02                     ; =PTR#2 - read PTR on output handle
4038	.9f5d		f0 1d		beq $9f7c	                beq L9F60

4040							; Read PTR on CFS/RFS input file
4041							; ------------------------------
4042	.9f5f		a9 01		lda #$01	                lda #$01                     ; Check if this is input channel and is open
4043	.9f61		20 aa aa	jsr $aaaa	                jsr LAA68
4044	.9f64		ad 9e 03	lda $039e	                lda $039E
4045	.9f67		95 00		sta $00,x	                sta $00,x
4046	.9f69		5a		phy		                phy
4047	.9f6a		ad de 03	lda $03de	                lda $03DE
4048	.9f6d		ac dd 03	ldy $03dd	                ldy $03DD
4049	.9f70		d0 01		bne $9f73	                bne L9F57
4050	.9f72		3a		dec a		                dec a
4051	.9f73						L9F57:
4052	.9f73		88		dey		                dey
4053	.9f74		94 01		sty $01,x	                sty $01,x
4054	.9f76		7a		ply		                ply
4055	.9f77						L9F5B:
4056	.9f77		95 02		sta $02,x	                sta $02,x
4057	.9f79		74 03		stz $03,x	                stz $03,x
4058	.9f7b		60		rts		                rts

4060							; Read PTR on TAPE output file
4061							; ----------------------------
4062	.9f7c						L9F60:
4063	.9f7c		a9 02		lda #$02	                lda #$02                     ; Check if this is output channel and is open
4064	.9f7e		20 aa aa	jsr $aaaa	                jsr LAA68
4065	.9f81		ad 9d 03	lda $039d	                lda $039D                    ; Copy PTR to control block
4066	.9f84		95 00		sta $00,x	                sta $00,x
4067	.9f86		ad 94 03	lda $0394	                lda $0394
4068	.9f89		95 01		sta $01,x	                sta $01,x
4069	.9f8b		ad 95 03	lda $0395	                lda $0395
4070	.9f8e		80 e7		bra $9f77	                bra L9F5B

4072							;-------------------------------------------------------------------------

4074							; TAPE/ROM FSC dispatch table
4075							; ---------------------------

4077							tapeAndROMFSCRoutine: .macro addr,shift
4079							                .endmacro

4081							tapeAndROMFSCRoutinesTable: .macro shift
4094							                .endmacro

4096	.9f90						L9F74:
4078	>9f90		3b				                .byte ((LA422)-1)>>(0)&$ff
4078	>9f91		0a				                .byte ((LA4F1)-1)>>(0)&$ff
4078	>9f92		2b				                .byte ((LA110)-1)>>(0)&$ff
4078	>9f93		44				                .byte ((LA129)-1)>>(0)&$ff
4078	>9f94		2b				                .byte ((LA110)-1)>>(0)&$ff
4078	>9f95		83				                .byte ((LA168)-1)>>(0)&$ff
4078	>9f96		55				                .byte ((L9F3A)-1)>>(0)&$ff
4078	>9f97		b9				                .byte ((L9F9E)-1)>>(0)&$ff
4078	>9f98		55				                .byte ((L9F3A)-1)>>(0)&$ff
4078	>9f99		70				                .byte ((LA155)-1)>>(0)&$ff
4078	>9f9a		55				                .byte ((L9F3A)-1)>>(0)&$ff
4078	>9f9b		2e				                .byte ((LA113)-1)>>(0)&$ff
4098	.9f9c						L9F80:
4078	>9f9c		a4				                .byte ((LA422)-1)>>(8)&$ff
4078	>9f9d		a5				                .byte ((LA4F1)-1)>>(8)&$ff
4078	>9f9e		a1				                .byte ((LA110)-1)>>(8)&$ff
4078	>9f9f		a1				                .byte ((LA129)-1)>>(8)&$ff
4078	>9fa0		a1				                .byte ((LA110)-1)>>(8)&$ff
4078	>9fa1		a1				                .byte ((LA168)-1)>>(8)&$ff
4078	>9fa2		9f				                .byte ((L9F3A)-1)>>(8)&$ff
4078	>9fa3		9f				                .byte ((L9F9E)-1)>>(8)&$ff
4078	>9fa4		9f				                .byte ((L9F3A)-1)>>(8)&$ff
4078	>9fa5		a1				                .byte ((LA155)-1)>>(8)&$ff
4078	>9fa6		9f				                .byte ((L9F3A)-1)>>(8)&$ff
4078	>9fa7		a1				                .byte ((LA113)-1)>>(8)&$ff

4101							;-------------------------------------------------------------------------

4103							; TAPE/ROM FSC
4104							; ============
4105	.9fa8						fscTapeOrROM:
4106	.9fa8		c9 0c		cmp #$0c	                cmp #$0C                     ; function<12 - exit unchanged
4107	.9faa		b0 aa		bcs $9f56	                bcs L9F3A
4108	.9fac		86 bc		stx $bc		                stx $BC                      ; Index into dispatch table
4109	.9fae		aa		tax		                tax
4110	.9faf		bd 9c 9f	lda $9f9c,x	                lda L9F80,x
4111	.9fb2		48		pha		                pha
4112	.9fb3		bd 90 9f	lda $9f90,x	                lda L9F74,x
4113	.9fb6		48		pha		                pha
4114	.9fb7		a6 bc		ldx $bc		                ldx $BC
4115	.9fb9		60		rts		                rts

4117							; TAPE/ROM FSC 7 - obtain file handle range
4118							; -----------------------------------------
4119	.9fba						L9F9E:
4120	.9fba		a2 03		ldx #$03	                ldx #$03
4121	.9fbc		a0 03		ldy #$03	                ldy #$03
4123	.9fbe		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4124	.9fc1		d0 93		bne $9f56	                bne L9F3A
4125	.9fc3		88		dey		                dey
4126	.9fc4		a2 01		ldx #$01	                ldx #$01
4128	.9fc6		60		rts		                rts

4130	.9fc7						L9FAB:
4131	.9fc7		68		pla		                pla
4132	.9fc8		28		plp		                plp
4133	.9fc9		38		sec		                sec
4134	.9fca		60		rts		                rts

4136	.9fcb						L9FAF:
4137	.9fcb		08		php		                php
4138	.9fcc		48		pha		                pha
4139	.9fcd		20 35 aa	jsr $aa35	                jsr LA9F3
4140	.9fd0		ad c2 03	lda $03c2	                lda $03C2
4141	.9fd3		48		pha		                pha
4142	.9fd4		20 1c a5	jsr $a51c	                jsr LA502
4143	.9fd7		68		pla		                pla
4144	.9fd8		b0 ed		bcs $9fc7	                bcs L9FAB
4145	.9fda		f0 19		beq $9ff5	                beq L9FD9
4146	.9fdc		a2 03		ldx #$03	                ldx #$03
4147	.9fde		a9 ff		lda #$ff	                lda #$FF
4148	.9fe0						L9FC4:
4149	.9fe0		48		pha		                pha
4150	.9fe1		bd be 03	lda $03be,x	                lda $03BE,x
4151	.9fe4		95 b0		sta $b0,x	                sta $B0,x
4152	.9fe6		68		pla		                pla
4153	.9fe7		35 b0		and $b0,x	                and $B0,x
4154	.9fe9		ca		dex		                dex
4155	.9fea		10 f4		bpl $9fe0	                bpl L9FC4
4156	.9fec		1a		inc a		                inc a
4157	.9fed		d0 06		bne $9ff5	                bne L9FD9
4158	.9fef		20 f3 a9	jsr $a9f3	                jsr LA9B1
4159	.9ff2		4c e9 92	jmp $92e9	                jmp badAddressError

4161	.9ff5						L9FD9:
4162	.9ff5		ad ca 03	lda $03ca	                lda $03CA
4163	.9ff8		4a		lsr a		                lsr a
4164	.9ff9		68		pla		                pla
4165	.9ffa		48		pha		                pha
4166	.9ffb		f0 10		beq $a00d	                beq L9FF1
4167	.9ffd		90 15		bcc $a014	                bcc L9FF8
4168	.9fff						L9FE3:
4169	.9fff		20 fd a9	jsr $a9fd	                jsr LA9BB
4170	.a002		20 2f ab	jsr $ab2f	                jsr doFollowingError
4171	>a005		d5 4c 6f 63 6b 65 64 00		                .text $d5,"Locked",0
4172	.a00d						L9FF1:
4173	.a00d		90 05		bcc $a014	                bcc L9FF8
4174	.a00f		a9 03		lda #$03	                lda #$03
4175	.a011		8d 58 02	sta $0258	                sta breakAndESCAPEEffect
4176	.a014						L9FF8:
4177	.a014		a9 30		lda #$30	                lda #$30
4178	.a016		25 bb		and $bb		                and $BB
4179	.a018		f0 04		beq $a01e	                beq LA002
4180	.a01a		a5 c1		lda $c1		                lda $C1
4181	.a01c						LA000:
4182	.a01c		d0 08		bne $a026	                bne LA00A
4183	.a01e						LA002:
4185	.a01e		5a		phy		                phy
4186	.a01f		20 e6 aa	jsr $aae6	                jsr initiateCFSRFSHostToParasiteTransfer
4187	.a022		7a		ply		                ply
4189	.a023		20 ec a6	jsr $a6ec	                jsr LA6D2
4190	.a026						LA00A:
4191	.a026		20 e3 a8	jsr $a8e3	                jsr LA8A1
4192	.a029		d0 57		bne $a082	                bne LA066
4193	.a02b		20 77 aa	jsr $aa77	                jsr LAA35
4194	.a02e		2c ca 03	bit $03ca	                bit $03CA
4195	.a031		30 08		bmi $a03b	                bmi LA01F
4196	.a033		20 9e a8	jsr $a89e	                jsr LA85B
4197	.a036		20 92 a6	jsr $a692	                jsr LA678
4198	.a039		80 d9		bra $a014	                bra L9FF8

4200	.a03b						LA01F:
4201	.a03b		68		pla		                pla                          ; RUN, no control block to update
4202	.a03c		f0 33		beq $a071	                beq LA055
4203	.a03e		a0 02		ldy #$02	                ldy #$02
4204	.a040						LA024:
4205	.a040		b9 bc 03	lda $03bc,y	                lda $03BC,y                  ; Copy load/exec to control block
4206	.a043		91 c8		sta ($c8),y	                sta ($C8),y
4207	.a045		c8		iny		                iny
4208	.a046		c0 0a		cpy #$0a	                cpy #$0A
4209	.a048		d0 f6		bne $a040	                bne LA024
4210	.a04a		ad c8 03	lda $03c8	                lda $03C8                    ; Length b0-b7=Block Length b0-b7
4211	.a04d		91 c8		sta ($c8),y	                sta ($C8),y
4212	.a04f		c8		iny		                iny
4213	.a050		ad c9 03	lda $03c9	                lda $03C9
4214	.a053		18		clc		                clc
4215	.a054		6d c6 03	adc $03c6	                adc $03C6                    ; Length b8-b15=Block Number+Block Length b8-b15
4216	.a057		91 c8		sta ($c8),y	                sta ($C8),y
4217	.a059		c8		iny		                iny
4218	.a05a		a9 00		lda #$00	                lda #$00
4219	.a05c		6d c7 03	adc $03c7	                adc $03C7                    ; Length b16-b23=overflow
4220	.a05f		91 c8		sta ($c8),y	                sta ($C8),y
4221	.a061		c8		iny		                iny                          ; Length b24-b31=&00
4222	.a062		a9 00		lda #$00	                lda #$00
4223	.a064		91 c8		sta ($c8),y	                sta ($C8),y
4224	.a066		c8		iny		                iny
4225	.a067						LA04B:
4226	.a067		b9 bd 03	lda $03bd,y	                lda $03BD,y                  ; Attrs=&00000000
4227	.a06a		91 c8		sta ($c8),y	                sta ($C8),y
4228	.a06c		c8		iny		                iny
4229	.a06d		c0 12		cpy #$12	                cpy #$12
4230	.a06f		d0 f6		bne $a067	                bne LA04B
4231	.a071						LA055:
4232	.a071		28		plp		                plp
4233	.a072						LA056:
4234	.a072		20 f3 a9	jsr $a9f3	                jsr LA9B1
4235	.a075						LA059:
4236	.a075		24 ba		bit $ba		                bit $BA                      ; If flag set, skip printing newline
4237	.a077		30 07		bmi $a080	                bmi LA064
4238	.a079						LA05D:
4239	.a079		08		php		                php                          ; Print inline text
4240	.a07a		20 65 a9	jsr $a965	                jsr LA923
4241	>a07d		0d				                .byte 13                     ; Could just do JSR OSNEWL
4242	>a07e		00				                .byte 0
4243	.a07f		28		plp		                plp
4244	.a080						LA064:
4245	.a080		18		clc		                clc
4246	.a081		60		rts		                rts

4248	.a082						LA066:
4249	.a082		20 20 a5	jsr $a520	                jsr LA506
4250	.a085		d0 8d		bne $a014	                bne L9FF8
4251	.a087						LA06B:
4252	.a087		86 f2		stx $f2		                stx $F2
4253	.a089		84 f3		sty $f3		                sty $F3
4254	.a08b		a0 00		ldy #$00	                ldy #$00
4255	.a08d		20 d7 f1	jsr $f1d7	                jsr gsinitForFilenameParsing
4256	.a090		a2 00		ldx #$00	                ldx #$00
4257	.a092						LA076:
4258	.a092		20 e9 f1	jsr $f1e9	                jsr gsreadEntryPoint
4259	.a095		b0 0d		bcs $a0a4	                bcs LA088
4260	.a097		f0 08		beq $a0a1	                beq LA085
4261	.a099		9d d2 03	sta $03d2,x	                sta $03D2,x
4262	.a09c		e8		inx		                inx
4263	.a09d		e0 0b		cpx #$0b	                cpx #$0B
4264	.a09f		d0 f1		bne $a092	                bne LA076
4265	.a0a1						LA085:
4266	.a0a1		4c f9 f1	jmp $f1f9	                jmp badStringError

4268	.a0a4						LA088:
4269	.a0a4		9e d2 03	stz $03d2,x	                stz $03D2,x
4270	.a0a7		60		rts		                rts

4272							; CFS/RFS OSFILE
4273							; ==============
4274	.a0a8						osfileTapeOrROM:
4275	.a0a8		48		pha		                pha
4276	.a0a9		86 c8		stx $c8		                stx $C8                      ; C8/9=>control block
4277	.a0ab		84 c9		sty $c9		                sty $C9
4278	.a0ad		b2 c8		lda ($c8)	                lda ($C8)                    ; Get XY=>filename
4279	.a0af		aa		tax		                tax
4280	.a0b0		a0 01		ldy #$01	                ldy #$01
4281	.a0b2		b1 c8		lda ($c8),y	                lda ($C8),y
4282	.a0b4		a8		tay		                tay
4283	.a0b5		20 87 a0	jsr $a087	                jsr LA06B                    ; Parse filename
4284	.a0b8		a0 02		ldy #$02	                ldy #$02
4285	.a0ba						LA09E:
4286	.a0ba		b1 c8		lda ($c8),y	                lda ($C8),y
4287	.a0bc		99 bc 03	sta $03bc,y	                sta $03BC,y
4288	.a0bf		99 ae 00	sta $00ae,y	                sta $00AE,y
4289	.a0c2		c8		iny		                iny
4290	.a0c3		c0 0a		cpy #$0a	                cpy #$0A
4291	.a0c5		d0 f3		bne $a0ba	                bne LA09E
4292	.a0c7		68		pla		                pla
4293	.a0c8		f0 07		beq $a0d1	                beq LA0B5
4294	.a0ca		c9 ff		cmp #$ff	                cmp #$FF
4295	.a0cc		d0 b2		bne $a080	                bne LA064
4296	.a0ce		4c cb 9f	jmp $9fcb	                jmp L9FAF

4298	.a0d1						LA0B5:
4302	.a0d1		8d c6 03	sta $03c6	                sta $03C6
4303	.a0d4		8d c7 03	sta $03c7	                sta $03C7
4304	.a0d7						LA0BB:
4305	.a0d7		b1 c8		lda ($c8),y	                lda ($C8),y
4306	.a0d9		99 a6 00	sta $00a6,y	                sta $00A6,y
4307	.a0dc		c8		iny		                iny
4308	.a0dd		c0 12		cpy #$12	                cpy #$12
4309	.a0df		d0 f6		bne $a0d7	                bne LA0BB
4310	.a0e1		8a		txa		                txa
4311	.a0e2		f0 bd		beq $a0a1	                beq LA085
4312	.a0e4		20 35 aa	jsr $aa35	                jsr LA9F3
4313	.a0e7		20 3c a8	jsr $a83c	                jsr LA822
4315	.a0ea		a9 00		lda #$00	                lda #tubeReasonMultiByteParasiteToHost
4316	.a0ec		20 e8 aa	jsr $aae8	                jsr LAAA6
4318	.a0ef						LA0D3:
4319	.a0ef		38		sec		                sec
4320	.a0f0		a2 fd		ldx #$fd	                ldx #$fd                     ;-3
4321	.a0f2						LA0D6:
4322	.a0f2		bd b7 ff	lda $ffb7,x	                lda ($b4-$fd)&$ffff,x
4323	.a0f5		fd b3 ff	sbc $ffb3,x	                sbc ($b0-$fd)&$ffff,x
4324	.a0f8		9d cb 02	sta $02cb,x	                sta $3c8-$fd,x
4325	.a0fb		e8		inx		                inx
4326	.a0fc		d0 f4		bne $a0f2	                bne LA0D6
4327	.a0fe		a8		tay		                tay
4328	.a0ff		d0 0e		bne $a10f	                bne LA0F3
4329	.a101		ec c8 03	cpx $03c8	                cpx $03C8
4330	.a104		a9 01		lda #$01	                lda #$01
4331	.a106		ed c9 03	sbc $03c9	                sbc $03C9
4332	.a109		90 04		bcc $a10f	                bcc LA0F3
4333	.a10b		a2 80		ldx #$80	                ldx #$80
4334	.a10d		80 08		bra $a117	                bra LA0FB

4336	.a10f						LA0F3:
4337	.a10f		a9 01		lda #$01	                lda #$01
4338	.a111		8d c9 03	sta $03c9	                sta $03C9
4339	.a114		8e c8 03	stx $03c8	                stx $03C8
4340	.a117						LA0FB:
4341	.a117		8e ca 03	stx $03ca	                stx $03CA
4342	.a11a		20 03 a7	jsr $a703	                jsr LA6E9
4343	.a11d		30 78		bmi $a197	                bmi LA17B
4344	.a11f		20 9e a8	jsr $a89e	                jsr LA85B
4345	.a122		ee c6 03	inc $03c6	                inc $03C6
4346	.a125		d0 c8		bne $a0ef	                bne LA0D3
4347	.a127		ee c7 03	inc $03c7	                inc $03C7
4348	.a12a		80 c3		bra $a0ef	                bra LA0D3

4351							; TAPE/ROM FSC 2 - */
4352							; TAPE/ROM FSC 4 - *RUN
4353							; ---------------------
4354	.a12c						LA110:
4355	.a12c		38		sec		                sec
4356	.a12d		66 ce		ror $ce		                ror $CE
4357							; TAPE/ROM FSC 11 - *RUN command for library
4358							; ------------------------------------------
4359	.a12f						LA113:
4360	.a12f		da		phx		                phx
4361	.a130		5a		phy		                phy
4362	.a131		20 87 a0	jsr $a087	                jsr LA06B
4363	.a134		a9 00		lda #$00	                lda #$00
4364	.a136		a2 ff		ldx #$ff	                ldx #$FF
4365	.a138		8e c2 03	stx $03c2	                stx $03C2
4366	.a13b		20 cb 9f	jsr $9fcb	                jsr L9FAF
4367	.a13e		7a		ply		                ply
4368	.a13f		fa		plx		                plx
4369	.a140		90 08		bcc $a14a	                bcc LA12E
4371	.a142		20 0c aa	jsr $aa0c	                jsr LA9CA

4374							; TAPE/ROM FSC 3 - unknown * command
4375							; ----------------------------------
4376	.a145						LA129:
4377	.a145		a9 0b		lda #$0b	                lda #$0B
4378	.a147		6c 1e 02	jmp ($021e)	                jmp (FSCV)

4380	.a14a						LA12E:
4382	.a14a		2c 7a 02	bit $027a	                bit tubePresence
4383	.a14d		10 09		bpl $a158	                bpl LA13C                    ; taken if no Tube
4384	.a14f		ad c4 03	lda $03c4	                lda $03C4
4385	.a152		2d c5 03	and $03c5	                and $03C5
4386	.a155		1a		inc a		                inc a                     ; A=$00 if !&03c2=&FFFFxxxx
4387	.a156		d0 10		bne $a168	                bne LA14C                 ; taken if copro address
4388	.a158						LA13C:

4391	.a158		ae c2 03	ldx $03c2	                ldx $03C2
4392	.a15b		ac c3 03	ldy $03c3	                ldy $03C3
4393	.a15e		a9 a4		lda #$a4	                lda #$A4
4394	.a160		20 f4 ff	jsr $fff4	                jsr OSBYTE
4395	.a163		a9 01		lda #$01	                lda #$01
4396	.a165		6c c2 03	jmp ($03c2)	                jmp ($03C2)

4399	.a168						LA14C:
4400	.a168		a2 c2		ldx #$c2	                ldx #$C2
4401	.a16a		a0 03		ldy #$03	                ldy #$03
4402	.a16c		a9 04		lda #$04	                lda #tubeReasonExecute
4403	.a16e		4c f2 aa	jmp $aaf2	                jmp initiateCFSRFSTubeTransfer

4406							; TAPE/ROM FSC 9 - *EX
4407							; --------------------
4408	.a171						LA155:
4409	.a171		a9 08		lda #$08	                lda #$08
4410	.a173		04 e2		tsb $e2		                tsb $E2
4411	.a175		a5 e3		lda $e3		                lda $E3
4412	.a177		48		pha		                pha
4413	.a178		09 cc		ora #$cc	                ora #$CC
4414	.a17a		85 e3		sta $e3		                sta $E3
4415	.a17c		20 35 aa	jsr $aa35	                jsr LA9F3
4416	.a17f		68		pla		                pla
4417	.a180		85 e3		sta $e3		                sta $E3
4418	.a182		80 07		bra $a18b	                bra LA16F

4420							; TAPE/ROM FSC 5 - *CAT
4421							; ---------------------
4422	.a184						LA168:
4423	.a184		a9 08		lda #$08	                lda #$08
4424	.a186		04 e2		tsb $e2		                tsb $E2
4425	.a188		20 35 aa	jsr $aa35	                jsr LA9F3
4426	.a18b						LA16F:
4427	.a18b		a9 00		lda #$00	                lda #$00
4428	.a18d		20 98 a1	jsr $a198	                jsr LA17C
4430	.a190		20 0c aa	jsr $aa0c	                jsr LA9CA
4432	.a193						LA177:
4433	.a193		a9 08		lda #$08	                lda #$08
4434	.a195		14 e2		trb $e2		                trb $E2
4435	.a197						LA17B:
4436	.a197		60		rts		                rts

4438	.a198						LA17C:
4439	.a198		48		pha		                pha
4441	.a199		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4442	.a19c		f0 09		beq $a1a7	                beq LA18B
4444	.a19e		20 ce f3	jsr $f3ce	                jsr LF6FC
4445	.a1a1		20 d3 f3	jsr $f3d3	                jsr LF701
4446	.a1a4		b8		clv		                clv
4447	.a1a5		b0 50		bcs $a1f7	                bcs LA1DB
4448	.a1a7						LA18B:
4449	.a1a7		20 92 a6	jsr $a692	                jsr LA678
4450	.a1aa		ad c6 03	lda $03c6	                lda $03C6
4451	.a1ad		85 b4		sta $b4		                sta $B4
4452	.a1af		ad c7 03	lda $03c7	                lda $03C7
4453	.a1b2		85 b5		sta $b5		                sta $B5
4454	.a1b4		a2 ff		ldx #$ff	                ldx #$FF
4455	.a1b6		8e df 03	stx $03df	                stx $03DF
4456	.a1b9		64 ba		stz $ba		                stz $BA
4457	.a1bb		80 16		bra $a1d3	                bra LA1B7

4459	.a1bd						LA1A1:
4461	.a1bd		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4462	.a1c0		f0 37		beq $a1f9	                beq LA1DD
4464	.a1c2						LA1A6:
4465	.a1c2		20 e9 f3	jsr $f3e9	                jsr LF717
4466	.a1c5						LA1A9:
4467	.a1c5		a9 ff		lda #$ff	                lda #$FF
4468	.a1c7		8d c6 03	sta $03c6	                sta $03C6
4469	.a1ca		8d c7 03	sta $03c7	                sta $03C7
4470	.a1cd						LA1B1:
4471	.a1cd		20 77 aa	jsr $aa77	                jsr LAA35
4472	.a1d0		20 92 a6	jsr $a692	                jsr LA678
4473	.a1d3						LA1B7:
4475	.a1d3		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4476	.a1d6		f0 02		beq $a1da	                beq LA1BE
4478	.a1d8		50 1d		bvc $a1f7	                bvc LA1DB
4479	.a1da						LA1BE:
4480	.a1da		68		pla		                pla
4481	.a1db		48		pha		                pha
4482	.a1dc		f0 1b		beq $a1f9	                beq LA1DD
4483	.a1de		20 9e a9	jsr $a99e	                jsr LA95C
4484	.a1e1		d0 da		bne $a1bd	                bne LA1A1
4485	.a1e3		a9 30		lda #$30	                lda #$30
4486	.a1e5		25 bb		and $bb		                and $BB
4487	.a1e7		f0 0e		beq $a1f7	                beq LA1DB
4488	.a1e9		ad c6 03	lda $03c6	                lda $03C6
4489	.a1ec		c5 b6		cmp $b6		                cmp $B6
4490	.a1ee		d0 cd		bne $a1bd	                bne LA1A1
4491	.a1f0		ad c7 03	lda $03c7	                lda $03C7
4492	.a1f3		c5 b7		cmp $b7		                cmp $B7
4493	.a1f5		d0 c6		bne $a1bd	                bne LA1A1
4494	.a1f7						LA1DB:
4495	.a1f7		68		pla		                pla
4496	.a1f8		60		rts		                rts

4498	.a1f9						LA1DD:
4499	.a1f9		50 05		bvc $a200	                bvc LA1E4
4500	.a1fb		a9 ff		lda #$ff	                lda #$FF
4501	.a1fd		20 ee a6	jsr $a6ee	                jsr LA6D4
4502	.a200						LA1E4:
4503	.a200		a2 00		ldx #$00	                ldx #$00
4504	.a202		20 06 a9	jsr $a906	                jsr LA8C4
4506	.a205		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4507	.a208		f0 04		beq $a20e	                beq LA1F2
4509	.a20a		24 bb		bit $bb		                bit $BB
4510	.a20c		50 b4		bvc $a1c2	                bvc LA1A6
4511	.a20e						LA1F2:
4512	.a20e		2c ca 03	bit $03ca	                bit $03CA
4513	.a211		30 b2		bmi $a1c5	                bmi LA1A9
4514	.a213		80 b8		bra $a1cd	                bra LA1B1

4516							; CFS/RFS OSFIND HANDLER
4517							; ======================
4518	.a215						osfindTapeOrROM:
4519	.a215		85 bc		sta $bc		                sta $BC
4520	.a217		da		phx		                phx
4521	.a218		5a		phy		                phy
4522	.a219		09 00		ora #$00	                ora #$00
4523	.a21b		d0 1f		bne $a23c	                bne LA220
4524	.a21d		98		tya		                tya
4525	.a21e		d0 0e		bne $a22e	                bne LA212
4527	.a220		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4528	.a223		d0 03		bne $a228	                bne LA20C
4529	.a225		20 b8 a2	jsr $a2b8	                jsr LA29C
4531	.a228						LA20C:
4532	.a228		a9 01		lda #$01	                lda #$01
4533	.a22a		14 e2		trb $e2		                trb $E2
4537	.a22c		80 0c		bra $a23a	                bra LA21E
4539	.a22e						LA212:
4540	.a22e		4a		lsr a		                lsr a
4541	.a22f		b0 f7		bcs $a228	                bcs LA20C
4543	.a231		4a		lsr a		                lsr a
4544	.a232		b0 03		bcs $a237	                bcs LA21B
4546	.a234		4c c3 aa	jmp $aac3	                jmp LAA81

4549	.a237						LA21B:
4550	.a237		20 b8 a2	jsr $a2b8	                jsr LA29C
4551	.a23a						LA21E:
4552	.a23a		80 77		bra $a2b3	                bra LA297

4555	.a23c						LA220:
4556	.a23c		20 87 a0	jsr $a087	                jsr LA06B
4557	.a23f		24 bc		bit $bc		                bit $BC
4558	.a241		50 39		bvc $a27c	                bvc LA260
4559	.a243		9c 9e 03	stz $039e	                stz $039E
4560	.a246		9c dd 03	stz $03dd	                stz $03DD
4561	.a249		9c de 03	stz $03de	                stz $03DE
4562	.a24c		a9 c1		lda #$c1	                lda #$C1
4563	.a24e		14 e2		trb $e2		                trb $E2
4564	.a250		20 28 aa	jsr $aa28	                jsr LA9E6
4565	.a253		08		php		                php
4566	.a254		20 1c a5	jsr $a51c	                jsr LA502
4567	.a257		20 d1 a5	jsr $a5d1	                jsr LA5B7
4568	.a25a		28		plp		                plp
4569	.a25b		a2 ff		ldx #$ff	                ldx #$FF
4570	.a25d						LA241:
4571	.a25d		e8		inx		                inx
4572	.a25e		bd b2 03	lda $03b2,x	                lda $03B2,x
4573	.a261		9d a7 03	sta $03a7,x	                sta $03A7,x
4574	.a264		d0 f7		bne $a25d	                bne LA241
4575	.a266		1a		inc a		                inc a
4576	.a267		04 e2		tsb $e2		                tsb $E2
4577	.a269		ad e9 02	lda $02e9	                lda tapeInputCurrentBlockSize+0
4578	.a26c		0d ea 02	ora $02ea	                ora tapeInputCurrentBlockSize+1
4579	.a26f		d0 04		bne $a275	                bne LA259
4580	.a271		a9 40		lda #$40	                lda #$40
4581	.a273		04 e2		tsb $e2		                tsb $E2
4582	.a275						LA259:
4589	.a275		a9 01		lda #$01	                lda #$01
4590	.a277		0d 47 02	ora $0247	                ora cfsRFSFSSwitch
4591	.a27a		d0 35		bne $a2b1	                bne LA295
4592	.a27c						LA260:
4593	.a27c		8a		txa		                txa
4594	.a27d		d0 03		bne $a282	                bne LA266
4595	.a27f		4c f9 f1	jmp $f1f9	                jmp badStringError

4597	.a282						LA266:
4598	.a282		a2 ff		ldx #$ff	                ldx #$FF
4599	.a284						LA268:
4600	.a284		e8		inx		                inx
4601	.a285		bd d2 03	lda $03d2,x	                lda $03D2,x
4602	.a288		9d 80 03	sta $0380,x	                sta $0380,x
4603	.a28b		d0 f7		bne $a284	                bne LA268
4604	.a28d		3a		dec a		                dec a
4605	.a28e		a2 08		ldx #$08	                ldx #$08
4606	.a290						LA274:
4607	.a290		9d 8b 03	sta $038b,x	                sta $038B,x
4608	.a293		ca		dex		                dex
4609	.a294		d0 fa		bne $a290	                bne LA274
4610	.a296		8a		txa		                txa
4611	.a297		a2 14		ldx #$14	                ldx #$14
4612	.a299						LA27D:
4613	.a299		9d 80 03	sta $0380,x	                sta $0380,x
4614	.a29c		e8		inx		                inx
4615	.a29d		e0 1e		cpx #$1e	                cpx #$1E
4616	.a29f		d0 f8		bne $a299	                bne LA27D
4617	.a2a1		2e 97 03	rol $0397	                rol $0397
4618	.a2a4		20 35 aa	jsr $aa35	                jsr LA9F3
4619	.a2a7		20 3c a8	jsr $a83c	                jsr LA822
4620	.a2aa		20 fd a9	jsr $a9fd	                jsr LA9BB
4621	.a2ad		a9 02		lda #$02	                lda #$02
4622	.a2af		04 e2		tsb $e2		                tsb $E2
4624	.a2b1						LA295:
4625	.a2b1		85 bc		sta $bc		                sta $BC
4626	.a2b3						LA297:
4627	.a2b3		7a		ply		                ply
4628	.a2b4		fa		plx		                plx
4629	.a2b5		a5 bc		lda $bc		                lda $BC
4630	.a2b7						LA29B:
4631	.a2b7		60		rts		                rts

4634	.a2b8						LA29C:
4635	.a2b8		a9 02		lda #$02	                lda #$02
4636	.a2ba		25 e2		and $e2		                and $E2
4637	.a2bc		f0 f9		beq $a2b7	                beq LA29B
4638	.a2be		9c 97 03	stz $0397	                stz $0397
4639	.a2c1		a9 80		lda #$80	                lda #$80
4640	.a2c3		ae 9d 03	ldx $039d	                ldx $039D
4641	.a2c6		8e 96 03	stx $0396	                stx $0396
4642	.a2c9		8d 98 03	sta $0398	                sta $0398
4643	.a2cc		20 d4 a2	jsr $a2d4	                jsr LA2B8
4644	.a2cf		a9 02		lda #$02	                lda #$02
4645	.a2d1		14 e2		trb $e2		                trb $E2
4646	.a2d3		60		rts		                rts

4648	.a2d4						LA2B8:
4649	.a2d4		20 28 aa	jsr $aa28	                jsr LA9E6
4650	.a2d7		a2 11		ldx #$11	                ldx #$11
4651	.a2d9						LA2BD:
4652	.a2d9		bd 8c 03	lda $038c,x	                lda $038C,x
4653	.a2dc		9d be 03	sta $03be,x	                sta $03BE,x
4654	.a2df		ca		dex		                dex
4655	.a2e0		10 f7		bpl $a2d9	                bpl LA2BD
4656	.a2e2		86 b2		stx $b2		                stx $B2
4657	.a2e4		86 b3		stx $b3		                stx $B3
4658	.a2e6		64 b0		stz $b0		                stz $B0
4659	.a2e8		a9 09		lda #$09	                lda #$09
4660	.a2ea		85 b1		sta $b1		                sta $B1
4661	.a2ec		a2 7f		ldx #$7f	                ldx #$7F
4662	.a2ee		20 8f aa	jsr $aa8f	                jsr LAA4D
4663	.a2f1		8d df 03	sta $03df	                sta $03DF
4664	.a2f4		20 9c aa	jsr $aa9c	                jsr LAA5A
4665	.a2f7		20 e2 aa	jsr $aae2	                jsr LAAA0
4666	.a2fa		20 03 a7	jsr $a703	                jsr LA6E9
4667	.a2fd		ee 94 03	inc $0394	                inc $0394
4668	.a300		d0 03		bne $a305	                bne LA2E9
4669	.a302		ee 95 03	inc $0395	                inc $0395
4670	.a305						LA2E9:
4671	.a305		60		rts		                rts

4674	.a306						bputTapeOrROM:
4675	.a306		da		phx		                phx
4676	.a307		5a		phy		                phy
4677	.a308		a9 01		lda #$01	                lda #$01
4678	.a30a						LA2EE:
4679	.a30a		20 aa aa	jsr $aaaa	                jsr LAA68
4680	.a30d		a5 e2		lda $e2		                lda $E2
4681	.a30f		0a		asl a		                asl a
4682	.a310		b0 4d		bcs $a35f	                bcs LA343
4683	.a312		0a		asl a		                asl a
4684	.a313		90 08		bcc $a31d	                bcc LA301
4685	.a315		a9 80		lda #$80	                lda #$80
4686	.a317		04 e2		tsb $e2		                tsb $E2
4687	.a319		a9 fe		lda #$fe	                lda #$FE
4688	.a31b		b0 3a		bcs $a357	                bcs LA33B
4689	.a31d						LA301:
4690	.a31d		ae 9e 03	ldx $039e	                ldx $039E
4691	.a320		e8		inx		                inx
4692	.a321		ec e9 02	cpx $02e9	                cpx tapeInputCurrentBlockSize+0
4693	.a324		d0 2c		bne $a352	                bne LA336
4694	.a326		2c eb 02	bit $02eb	                bit blockFlagOfCurrentlyResidentBlock
4695	.a329		30 23		bmi $a34e	                bmi LA332
4696	.a32b		ad ec 02	lda $02ec	                lda lastCharacterOfCurrentlyResidentBlock
4697	.a32e		48		pha		                pha
4698	.a32f		20 28 aa	jsr $aa28	                jsr LA9E6
4699	.a332		08		php		                php
4700	.a333		20 c9 a5	jsr $a5c9	                jsr LA5AF
4701	.a336		28		plp		                plp
4702	.a337		68		pla		                pla
4703	.a338		85 bc		sta $bc		                sta $BC
4704	.a33a		18		clc		                clc
4705	.a33b		2c eb 02	bit $02eb	                bit blockFlagOfCurrentlyResidentBlock
4706	.a33e		10 19		bpl $a359	                bpl LA33D
4707	.a340		ad e9 02	lda $02e9	                lda tapeInputCurrentBlockSize+0
4708	.a343		0d ea 02	ora $02ea	                ora tapeInputCurrentBlockSize+1
4709	.a346		d0 11		bne $a359	                bne LA33D
4710	.a348		a9 40		lda #$40	                lda #$40
4711	.a34a		04 e2		tsb $e2		                tsb $E2
4712	.a34c		80 0b		bra $a359	                bra LA33D

4714	.a34e						LA332:
4715	.a34e		a9 40		lda #$40	                lda #$40
4716	.a350		04 e2		tsb $e2		                tsb $E2
4717	.a352						LA336:
4718	.a352		ca		dex		                dex
4719	.a353		18		clc		                clc
4720	.a354		bd 00 0a	lda $0a00,x	                lda $0A00,x
4721	.a357						LA33B:
4722	.a357		85 bc		sta $bc		                sta $BC
4723	.a359						LA33D:
4724	.a359		ee 9e 03	inc $039e	                inc $039E
4725	.a35c		4c b3 a2	jmp $a2b3	                jmp LA297

4727	.a35f						LA343:
4728	.a35f		20 2f ab	jsr $ab2f	                jsr doFollowingError
4729	>a362		df 45 4f 46 00			                .text $df,"EOF",0

4742	.a367						bgetTapeOrROM:
4743	.a367		85 c4		sta $c4		                sta $C4
4744	.a369		da		phx		                phx
4745	.a36a		5a		phy		                phy
4746	.a36b		a9 02		lda #$02	                lda #$02
4747	.a36d		20 aa aa	jsr $aaaa	                jsr LAA68
4748	.a370		ae 9d 03	ldx $039d	                ldx $039D
4749	.a373		a5 c4		lda $c4		                lda $C4
4750	.a375		9d 00 09	sta $0900,x	                sta $0900,x
4751	.a378		e8		inx		                inx
4752	.a379		d0 06		bne $a381	                bne LA365
4753	.a37b		20 d4 a2	jsr $a2d4	                jsr LA2B8
4754	.a37e		20 fd a9	jsr $a9fd	                jsr LA9BB
4755	.a381						LA365:
4756	.a381		ee 9d 03	inc $039d	                inc $039D
4757	.a384		a5 c4		lda $c4		                lda $C4
4758	.a386		4c b1 a2	jmp $a2b1	                jmp LA295

4762							; TAPE/ROM OSGBPB handler
4763							; =======================
4764	.a389						osgbpbTapeOrROM:
4765	.a389		4a		lsr a		                lsr a                        ; Odd numbered calls - change PTR - exit with A=changed, SEC
4766	.a38a		b0 06		bcs $a392	                bcs LA376
4767	.a38c		f0 04		beq $a392	                beq LA376                    ; OSGBPB 0 - exit with A=unchanged, SEC
4768	.a38e		c9 03		cmp #$03	                cmp #$03                     ; function/2<3 - function<6 - function 2 and 4 - jump to do
4769	.a390		90 02		bcc $a394	                bcc LA378
4770	.a392						LA376:
4771	.a392		38		sec		                sec
4772	.a393		60		rts		                rts

4775							; Call Return
4776							;  0    A=0   SEC                        - unsupported
4777							;  1    A=0   SEC  Write using new PTR   - unsupported
4778							;  2    A=         Write with current PTR
4779							;  3    A=1   SEC  Read with new PTR     - unsupported
4780							;  4    A=         Read with current PTR
4781							;  5+   A=A/2 SEC                        - unsupported

4783							; TAPE/ROM OSGBPB 2 and 4 - read/write with current PTR
4784							; -----------------------------------------------------
4785	.a394						LA378:
4787	.a394		4a		lsr a		                lsr a
4789	.a395		86 cc		stx $cc		                stx $CC
4790	.a397		84 cd		sty $cd		                sty $CD
4791	.a399		a0 01		ldy #$01	                ldy #$01
4792	.a39b		b1 cc		lda ($cc),y	                lda ($CC),y
4793	.a39d		85 c8		sta $c8		                sta $C8                      ; address LSB
4794	.a39f		c8		iny		                iny
4795	.a3a0		b1 cc		lda ($cc),y	                lda ($CC),y
4796	.a3a2		85 c9		sta $c9		                sta $C9                      ; address MSB
4798	.a3a4		c8		iny		                iny
4799	.a3a5		b1 cc		lda ($cc),y	                lda ($CC),y
4800	.a3a7		c8		iny		                iny
4801	.a3a8		31 cc		and ($cc),y	                and ($CC),y            ; A=$ff if bits 16-31 are $ffff
4802	.a3aa		1a		inc a		                inc a              ; A!=$00 if bits 16-31 aren't $ffff
4803	.a3ab		2d 7a 02	and $027a	                and tubePresence ; A!=$00 if copro address and copro present
4804	.a3ae		48		pha		                pha              ; save copro usage flag
4806	.a3af		08		php		                php                          ; save C
4808	.a3b0		f0 0f		beq $a3c1	                beq LA3A7
4809	.a3b2		a6 cc		ldx $cc		                ldx $CC
4810	.a3b4		a4 cd		ldy $cd		                ldy $CD
4811	.a3b6		e8		inx		                inx
4812	.a3b7		d0 01		bne $a3ba	                bne LA39E
4813	.a3b9		c8		iny		                iny
4814	.a3ba						LA39E:
4819							                ; if C=1, host->parasite; if C=0, parasite->host
4820	.a3ba		a9 01		lda #$01	                lda #tubeReasonMultiByteHostToParasite
4821	.a3bc		e9 00		sbc #$00	                sbc #0                       ;
4829	.a3be		20 f2 aa	jsr $aaf2	                jsr initiateCFSRFSTubeTransfer
4830	.a3c1						LA3A7:
4832	.a3c1		b2 cc		lda ($cc)	                lda ($CC)                    ; A=handle
4833	.a3c3		a8		tay		                tay                          ; Y=handle
4834	.a3c4		a9 01		lda #$01	                lda #$01
4837	.a3c6		28		plp		                plp                          ; restore C
4839	.a3c7		08		php		                php                          ; save C
4840	.a3c8		69 00		adc #$00	                adc #$00
4842	.a3ca		20 cf aa	jsr $aacf	                jsr LAA8D
4843	.a3cd		b0 0c		bcs $a3db	                bcs LA3C1
4845	.a3cf		28		plp		                plp                          ; restore C
4848	.a3d0		68		pla		                pla                          ; restore copro usage flag
4849	.a3d1		f0 05		beq $a3d8	                beq LA3BE                    ; taken if not copro
4850	.a3d3		a9 80		lda #$80	                lda #$80
4851	.a3d5		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
4852	.a3d8						LA3BE:
4854	.a3d8		4c c3 aa	jmp $aac3	                jmp LAA81

4856	.a3db						LA3C1:
4858	.a3db		28		plp		                plp
4859	.a3dc		b0 3d		bcs $a41b	                bcs LA401
4861	.a3de		24 e2		bit $e2		                bit $E2
4862	.a3e0		10 0b		bpl $a3ed	                bpl LA3D3
4864	.a3e2		68		pla		                pla                          ; restore copro usage flag
4865	.a3e3		f0 05		beq $a3ea	                beq LA3D0                    ; taken if no copro usage
4866	.a3e5		a9 80		lda #$80	                lda #$80                     ; $80 = RFS/CFS release Tube
4867	.a3e7		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
4868	.a3ea						LA3D0:
4870	.a3ea		4c 5f a3	jmp $a35f	                jmp LA343

4872	.a3ed						LA3D3:
4873	.a3ed		20 22 ab	jsr $ab22	                jsr LAAE0
4874	.a3f0		f0 1e		beq $a410	                beq LA3F6
4875	.a3f2		b2 cc		lda ($cc)	                lda ($CC)
4876	.a3f4		a8		tay		                tay
4877	.a3f5		20 06 a3	jsr $a306	                jsr bputTapeOrROM
4878	.a3f8		b0 16		bcs $a410	                bcs LA3F6
4880	.a3fa		fa		plx		                plx                          ; restore copro usage flag
4881	.a3fb		da		phx		                phx                          ; save copro usage flag
4882	.a3fc		f0 05		beq $a403	                beq LA3E9                    ; taken if no copro usage
4883	.a3fe		8d e5 fe	sta $fee5	                sta tube.data3               ; send byte to Tube
4884	.a401		80 08		bra $a40b	                bra LA3F1

4886	.a403						LA3E9:
4888	.a403		92 c8		sta ($c8)	                sta ($C8)                    ; store the byte to I/O RAM
4889	.a405		e6 c8		inc $c8		                inc $C8                      ; next address...
4890	.a407		d0 02		bne $a40b	                bne LA3F1
4891	.a409		e6 c9		inc $c9		                inc $C9
4892	.a40b						LA3F1:
4893	.a40b		20 0c ab	jsr $ab0c	                jsr LAACA
4894	.a40e		80 dd		bra $a3ed	                bra LA3D3

4896	.a410						LA3F6:
4898	.a410		68		pla		                pla                          ; restore copro usage flag
4899	.a411		08		php		                php
4900	.a412		f0 05		beq $a419	                beq LA3FF                    ; taken if not copro usage
4901	.a414		a9 80		lda #$80	                lda #$80                     ; $80 = RFS/CFS release Tube
4902	.a416		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
4903	.a419						LA3FF:
4904	.a419		28		plp		                plp
4906	.a41a		60		rts		                rts

4909	.a41b						LA401:
4910	.a41b		20 22 ab	jsr $ab22	                jsr LAAE0
4911	.a41e		f0 f0		beq $a410	                beq LA3F6
4912	.a420		b2 cc		lda ($cc)	                lda ($CC)
4913	.a422		a8		tay		                tay
4915	.a423		68		pla		                pla                          ; restore copro usage flag
4916	.a424		48		pha		                pha                          ; save copro usage flag
4917	.a425		f0 05		beq $a42c	                beq LA412                    ; taken if not copro usage
4918	.a427		ad e5 fe	lda $fee5	                lda tube.data3               ; receive byte from Tube
4919	.a42a		80 08		bra $a434	                bra LA41A
4920	.a42c						LA412:

4923	.a42c		b2 c8		lda ($c8)	                lda ($C8)                    ; read the byte from I/O RAM
4924	.a42e		e6 c8		inc $c8		                inc $C8                      ; next address...
4925	.a430		d0 02		bne $a434	                bne LA41A
4926	.a432		e6 c9		inc $c9		                inc $C9
4927	.a434						LA41A:
4928	.a434		20 67 a3	jsr $a367	                jsr bgetTapeOrROM
4929	.a437		20 0c ab	jsr $ab0c	                jsr LAACA
4930	.a43a		80 df		bra $a41b	                bra LA401

4933							; TAPE/ROM FSC 0 - *OPT
4934							; ---------------------
4935	.a43c						LA422:
4936	.a43c		8a		txa		                txa                          ; *OPT 0
4937	.a43d		f0 2e		beq $a46d	                beq LA453
4938	.a43f		e0 03		cpx #$03	                cpx #$03                     ; *OPT 3
4939	.a441		f0 1f		beq $a462	                beq LA448
4940	.a443		c0 03		cpy #$03	                cpy #$03                     ; *OPT n,3+ - error Bad command (*BUG* should be Bad option)
4941	.a445		b0 06		bcs $a44d	                bcs LA433
4942	.a447		ca		dex		                dex                          ; *OPT 1
4943	.a448		f0 06		beq $a450	                beq LA436
4944	.a44a		ca		dex		                dex                          ; *OPT 2
4945	.a44b		f0 0a		beq $a457	                beq LA43D
4946	.a44d						LA433:
4947	.a44d		4c 20 f9	jmp $f920	                jmp badCommandError ; *OPT 4+ - error Bad command (*BUG* should be Bad option)

4949							; *OPT 1 - set message level
4950							; --------------------------
4951	.a450						LA436:
4952	.a450		a9 33		lda #$33	                lda #$33
4953	.a452		c8		iny		                iny
4954	.a453		c8		iny		                iny
4955	.a454		c8		iny		                iny
4956	.a455		80 02		bra $a459	                bra LA43F

4958							; *OPT 2 - set error response level
4959							; ---------------------------------
4960	.a457						LA43D:
4961	.a457		a9 cc		lda #$cc	                lda #$CC
4962	.a459						LA43F:
4963	.a459		c8		iny		                iny
4964	.a45a		25 e3		and $e3		                and $E3
4965	.a45c						LA442:
4966	.a45c		19 70 a4	ora $a470,y	                ora LA456,y
4967	.a45f		85 e3		sta $e3		                sta $E3
4968	.a461		60		rts		                rts

4970							; *OPT 3 - set interblock gap
4971							; ---------------------------
4972	.a462						LA448:
4973	.a462		98		tya		                tya                          ; *OPT 3,128+ - set to default
4974	.a463		30 02		bmi $a467	                bmi LA44D    ;
4975	.a465		d0 02		bne $a469	                bne LA44F                    ; *OPT 3,<>0 - use setting
4976	.a467						LA44D:
4977	.a467		a9 19		lda #$19	                lda #$19                     ; *OPT 3,0 or *OPT 3,128+ - use default of 2.5 sec
4978	.a469						LA44F:
4979	.a469		8d d1 03	sta $03d1	                sta $03D1                    ; Set inter-block gap
4980	.a46c		60		rts		                rts

4982	.a46d						LA453:
4983	.a46d		a8		tay		                tay
4984	.a46e		80 ec		bra $a45c	                bra LA442

4986	.a470						LA456:
4987							                ; LDA ($00,x)
4988							                ; EQUB $22
4989							                ; ORA ($00),y
4990							                ; DEY
4991							                ; CPY LC0C6
4992	>a470		a1				                .byte $A1
4993	>a471		00				                .byte $00
4994	>a472		22				                .byte $22
4995	>a473		11				                .byte $11
4996	>a474		00				                .byte $00
4997	>a475		88				                .byte $88
4998	>a476		cc				                .byte $CC

5001	.a477						LA45D:
5002	.a477		c6 c0		dec $c0		                dec $C0
5003	.a479		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5004	.a47c		f0 07		beq $a485	                beq LA46B
5005	.a47e		20 e2 f3	jsr $f3e2	                jsr LF710
5006	.a481		a8		tay		                tay
5007	.a482		18		clc		                clc
5008	.a483		80 1a		bra $a49f	                bra LA485

5010	.a485						LA46B:
5011	.a485		ad 08 fe	lda $fe08	                lda ACIA+0
5012	.a488		48		pha		                pha
5013	.a489		29 02		and #$02	                and #$02
5014	.a48b		f0 0b		beq $a498	                beq LA47E
5015	.a48d		a4 ca		ldy $ca		                ldy $CA
5016	.a48f		f0 07		beq $a498	                beq LA47E
5017	.a491		68		pla		                pla
5018	.a492		a5 bd		lda $bd		                lda $BD
5019	.a494		8d 09 fe	sta $fe09	                sta ACIA+1
5020	.a497		60		rts		                rts

5022	.a498						LA47E:
5023	.a498		ac 09 fe	ldy $fe09	                ldy ACIA+1
5024	.a49b		68		pla		                pla
5025	.a49c		4a		lsr a		                lsr a
5026	.a49d		4a		lsr a		                lsr a
5027	.a49e		4a		lsr a		                lsr a
5028	.a49f						LA485:
5029	.a49f		a6 c2		ldx $c2		                ldx $C2
5030	.a4a1		f0 67		beq $a50a	                beq LA4F0
5031	.a4a3		ca		dex		                dex
5032	.a4a4		d0 06		bne $a4ac	                bne LA492
5033	.a4a6		90 62		bcc $a50a	                bcc LA4F0
5034	.a4a8		a0 02		ldy #$02	                ldy #$02
5035	.a4aa		80 5c		bra $a508	                bra LA4EE

5038	.a4ac						LA492:
5049	.a4ac		ca		dex		                dex
5050	.a4ad		d0 13		bne $a4c2	                bne LA4A8
5051	.a4af		b0 59		bcs $a50a	                bcs LA4F0
5053	.a4b1		98		tya		                tya
5054	.a4b2		20 86 aa	jsr $aa86	                jsr LAA44
5055	.a4b5		a0 03		ldy #$03	                ldy #$03
5056	.a4b7		c9 2a		cmp #$2a	                cmp #$2A
5057	.a4b9		f0 4d		beq $a508	                beq LA4EE
5058	.a4bb		20 5e aa	jsr $aa5e	                jsr LAA1C
5059	.a4be		a0 01		ldy #$01	                ldy #$01
5060	.a4c0		80 46		bra $a508	                bra LA4EE

5062	.a4c2						LA4A8:
5063	.a4c2		ca		dex		                dex
5064	.a4c3		d0 0a		bne $a4cf	                bne LA4B5
5066	.a4c5		b0 03		bcs $a4ca	                bcs LA4B0
5068	.a4c7		84 bd		sty $bd		                sty $BD
5069	.a4c9		60		rts		                rts

5072	.a4ca						LA4B0:
5073	.a4ca		a9 80		lda #$80	                lda #$80
5074	.a4cc		85 c0		sta $c0		                sta $C0
5075	.a4ce		60		rts		                rts

5078	.a4cf						LA4B5:
5079	.a4cf		ca		dex		                dex
5080	.a4d0		d0 29		bne $a4fb	                bne LA4E1
5082	.a4d2		b0 2f		bcs $a503	                bcs LA4E9
5084	.a4d4		98		tya		                tya
5085	.a4d5		20 c3 a6	jsr $a6c3	                jsr LA6A9
5086	.a4d8		a4 bc		ldy $bc		                ldy $BC
5087	.a4da		e6 bc		inc $bc		                inc $BC
5088	.a4dc		24 bd		bit $bd		                bit $BD
5089	.a4de		30 0d		bmi $a4ed	                bmi LA4D3
5091	.a4e0		20 fe aa	jsr $aafe	                jsr isTubeAddress
5092	.a4e3		f0 05		beq $a4ea	                beq LA4D0                    ; taken if not Tube address
5093	.a4e5		8e e5 fe	stx $fee5	                stx tube.data3
5094	.a4e8		80 03		bra $a4ed	                bra LA4D3

5096	.a4ea						LA4D0:
5097	.a4ea		8a		txa		                txa                          ; A=byte to write
5099	.a4eb		91 b0		sta ($b0),y	                sta ($B0),y                  ; store byte to I/O RAM
5100	.a4ed						LA4D3:
5101	.a4ed		c8		iny		                iny
5102	.a4ee		cc c8 03	cpy $03c8	                cpy $03C8
5103	.a4f1		d0 17		bne $a50a	                bne LA4F0
5104	.a4f3		a9 01		lda #$01	                lda #$01
5105	.a4f5		85 bc		sta $bc		                sta $BC
5106	.a4f7		a0 05		ldy #$05	                ldy #$05
5107	.a4f9		80 0d		bra $a508	                bra LA4EE

5109	.a4fb						LA4E1:
5110	.a4fb		98		tya		                tya
5111	.a4fc		20 c3 a6	jsr $a6c3	                jsr LA6A9
5112	.a4ff		c6 bc		dec $bc		                dec $BC
5113	.a501		10 07		bpl $a50a	                bpl LA4F0
5115	.a503						LA4E9:
5116	.a503		20 54 aa	jsr $aa54	                jsr resetACIA
5118	.a506		a0 00		ldy #$00	                ldy #$00
5119	.a508						LA4EE:
5120	.a508		84 c2		sty $c2		                sty $C2
5121	.a50a						LA4F0:
5122	.a50a		60		rts		                rts

5124							; TAPE/ROM FSC 1 - =EOF
5125							; ---------------------
5126	.a50b						LA4F1:
5127	.a50b		48		pha		                pha
5128	.a50c		5a		phy		                phy
5129	.a50d		8a		txa		                txa
5130	.a50e		a8		tay		                tay
5131	.a50f		a9 03		lda #$03	                lda #$03                     ; Check if this channel is open for anything
5132	.a511		20 aa aa	jsr $aaaa	                jsr LAA68
5133	.a514		a5 e2		lda $e2		                lda $E2                      ; Get EOF flag
5134	.a516		29 40		and #$40	                and #$40
5135	.a518		aa		tax		                tax                          ; Return in X
5136	.a519		7a		ply		                ply
5137	.a51a		68		pla		                pla
5138	.a51b		60		rts		                rts

5140	.a51c						LA502:
5141	.a51c		64 b4		stz $b4		                stz $B4
5142	.a51e		64 b5		stz $b5		                stz $B5
5143	.a520						LA506:
5144	.a520		46 ce		lsr $ce		                lsr $CE
5145	.a522		a5 b4		lda $b4		                lda $B4
5146	.a524		48		pha		                pha
5147	.a525		85 b6		sta $b6		                sta $B6
5148	.a527		a5 b5		lda $b5		                lda $B5
5149	.a529		48		pha		                pha
5150	.a52a		85 b7		sta $b7		                sta $B7
5151	.a52c		20 65 a9	jsr $a965	                jsr LA923
5152	>a52f		53 65 61 72 63 68 69 6e		                .text "Searching",13,0
	>a537		67 0d 00
5153	.a53a		a9 ff		lda #$ff	                lda #$ff
5154	.a53c		20 98 a1	jsr $a198	                jsr LA17C
5155	.a53f		68		pla		                pla
5156	.a540		85 b5		sta $b5		                sta $B5
5157	.a542		68		pla		                pla
5158	.a543		85 b4		sta $b4		                sta $B4
5159	.a545		a5 b6		lda $b6		                lda $B6
5160	.a547		05 b7		ora $b7		                ora $B7
5161	.a549		d0 33		bne $a57e	                bne LA564
5162	.a54b		64 b4		stz $b4		                stz $B4
5163	.a54d		64 b5		stz $b5		                stz $B5
5165	.a54f		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5166	.a552		f0 21		beq $a575	                beq LA55B
5168	.a554		70 1f		bvs $a575	                bvs LA55B
5170	.a556		20 0c aa	jsr $aa0c	                jsr LA9CA
5172	.a559		24 ce		bit $ce		                bit $CE
5173	.a55b		50 0a		bvc $a567	                bvc notFoundError
5174	.a55d		38		sec		                sec
5175	.a55e						rtsA544:
5176	.a55e		60		rts		                rts

5178							;-------------------------------------------------------------------------

5180	.a55f						openFileForReading:
5181	.a55f		a9 40		lda #$40	                lda #$40                     ;open for reading
5182	.a561		20 ce ff	jsr $ffce	                jsr OSFIND
5183	.a564		a8		tay		                tay
5184	.a565		d0 f7		bne $a55e	                bne rtsA544
5185	.a567						notFoundError:
5186	.a567		20 2f ab	jsr $ab2f	                jsr doFollowingError
5187	>a56a		d6 4e 6f 74 20 66 6f 75		                .text $d6,"Not found",0
	>a572		6e 64 00

5189							;-------------------------------------------------------------------------

5191	.a575						LA55B:
5192	.a575		a5 c1		lda $c1		                lda $C1
5193	.a577		d0 05		bne $a57e	                bne LA564
5194	.a579		a2 b1		ldx #$b1	                ldx #$B1
5195	.a57b		20 8f aa	jsr $aa8f	                jsr LAA4D
5196	.a57e						LA564:
5197	.a57e		a0 ff		ldy #$ff	                ldy #$FF
5198	.a580		8c df 03	sty $03df	                sty $03DF
5199	.a583		18		clc		                clc
5200	.a584		60		rts		                rts

5202	.a585						LA56B:
5203	.a585		f0 17		beq $a59e	                beq LA584
5204	.a587		48		pha		                pha
5205	.a588		a9 07		lda #$07	                lda #fscFileHandleRange
5206	.a58a		20 47 f1	jsr $f147	                jsr callFSCV
5207	.a58d		68		pla		                pla
5208	.a58e		18		clc		                clc
5209	.a58f		08		php		                php
5210	.a590		78		sei		                sei
5211	.a591		85 fa		sta $fa		                sta $FA
5212	.a593		c4 fa		cpy $fa		                cpy $FA
5213	.a595		90 06		bcc $a59d	                bcc LA583
5214	.a597		e4 fa		cpx $fa		                cpx $FA
5215	.a599		90 06		bcc $a5a1	                bcc LA587
5216	.a59b		f0 04		beq $a5a1	                beq LA587
5217	.a59d						LA583:
5218	.a59d		28		plp		                plp
5219	.a59e						LA584:
5220	.a59e		68		pla		                pla
5221	.a59f		68		pla		                pla
5222	.a5a0		60		rts		                rts

5224	.a5a1						LA587:
5225	.a5a1		28		plp		                plp
5226	.a5a2		a9 00		lda #$00	                lda #$00
5227	.a5a4		60		rts		                rts

5229	.a5a5						LA58B:
5230	.a5a5		ad 56 02	lda $0256	                lda execFileHandle
5231	.a5a8		20 85 a5	jsr $a585	                jsr LA56B
5232	.a5ab						starEXEC:
5233	.a5ab		08		php		                php
5234	.a5ac		5a		phy		                phy
5235	.a5ad		ac 56 02	ldy $0256	                ldy execFileHandle
5236	.a5b0		8d 56 02	sta $0256	                sta execFileHandle
5237	.a5b3		f0 03		beq $a5b8	                beq LA59E
5238	.a5b5		20 ce ff	jsr $ffce	                jsr OSFIND
5239	.a5b8						LA59E:
5240	.a5b8		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
5241	.a5bb		7a		ply		                ply
5242	.a5bc		28		plp		                plp
5243	.a5bd		f0 09		beq $a5c8	                beq LA5AE
5244	.a5bf		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
5245	.a5c2		20 5f a5	jsr $a55f	                jsr openFileForReading
5246	.a5c5		8d 56 02	sta $0256	                sta execFileHandle
5247	.a5c8						LA5AE:
5248	.a5c8		60		rts		                rts

5250	.a5c9						LA5AF:
5251	.a5c9		a2 a6		ldx #$a6	                ldx #$A6
5252	.a5cb		20 8f aa	jsr $aa8f	                jsr LAA4D
5253	.a5ce		20 92 a6	jsr $a692	                jsr LA678
5254	.a5d1						LA5B7:
5255	.a5d1		ad ca 03	lda $03ca	                lda $03CA
5256	.a5d4		4a		lsr a		                lsr a
5257	.a5d5		90 03		bcc $a5da	                bcc LA5C0
5258	.a5d7		4c ff 9f	jmp $9fff	                jmp L9FE3

5260	.a5da						LA5C0:
5261	.a5da		ad dd 03	lda $03dd	                lda $03DD
5262	.a5dd		85 b4		sta $b4		                sta $B4
5263	.a5df		ad de 03	lda $03de	                lda $03DE
5264	.a5e2		85 b5		sta $b5		                sta $B5
5265	.a5e4		64 b0		stz $b0		                stz $B0
5266	.a5e6		a9 0a		lda #$0a	                lda #$0A
5267	.a5e8		85 b1		sta $b1		                sta $B1
5268	.a5ea		a9 ff		lda #$ff	                lda #$FF
5269	.a5ec		85 b2		sta $b2		                sta $B2
5270	.a5ee		85 b3		sta $b3		                sta $B3
5271	.a5f0		20 ec a6	jsr $a6ec	                jsr LA6D2
5272	.a5f3		20 e3 a8	jsr $a8e3	                jsr LA8A1
5273	.a5f6		d0 25		bne $a61d	                bne LA603
5274	.a5f8		ad ff 0a	lda $0aff	                lda $0AFF
5275	.a5fb		8d ec 02	sta $02ec	                sta lastCharacterOfCurrentlyResidentBlock
5276	.a5fe		20 77 aa	jsr $aa77	                jsr LAA35
5277	.a601		8e dd 03	stx $03dd	                stx $03DD
5278	.a604		8c de 03	sty $03de	                sty $03DE
5279	.a607		a2 02		ldx #$02	                ldx #$02
5280	.a609						LA5EF:
5281	.a609		bd c8 03	lda $03c8,x	                lda $03C8,x
5282	.a60c		9d e9 02	sta $02e9,x	                sta tapeInputCurrentBlockSize+0,x
5283	.a60f		ca		dex		                dex
5284	.a610		10 f7		bpl $a609	                bpl LA5EF
5285	.a612		2c eb 02	bit $02eb	                bit blockFlagOfCurrentlyResidentBlock
5286	.a615		10 03		bpl $a61a	                bpl LA600
5287	.a617		20 75 a0	jsr $a075	                jsr LA059
5288	.a61a						LA600:
5289	.a61a		4c 07 aa	jmp $aa07	                jmp LA9C5

5291	.a61d						LA603:
5292	.a61d		20 20 a5	jsr $a520	                jsr LA506
5293	.a620		80 af		bra $a5d1	                bra LA5B7

5295	.a622						LA608:
5296	.a622		c9 2a		cmp #$2a	                cmp #'*'
5297	.a624		f0 37		beq $a65d	                beq LA643
5298	.a626		c9 23		cmp #$23	                cmp #'#'
5299	.a628		d0 0f		bne $a639	                bne LA61F
5300	.a62a		ee c6 03	inc $03c6	                inc $03C6
5301	.a62d		d0 03		bne $a632	                bne LA618
5302	.a62f		ee c7 03	inc $03c7	                inc $03C7
5303	.a632						LA618:
5304	.a632		a2 ff		ldx #$ff	                ldx #$FF
5305	.a634		2c 62 e3	bit $e362	                bit valueFF
5306	.a637		80 51		bra $a68a	                bra LA670

5308	.a639						LA61F:
5309	.a639		20 93 a1	jsr $a193	                jsr LA177
5310	.a63c		20 2f ab	jsr $ab2f	                jsr doFollowingError
5311	>a63f		d7				                .byte $D7
5312	>a640		42 61 64 20 52 4f 4d		                .text "Bad ROM"
5313	>a647		00				                .byte 0

5315	.a648						LA62E:
5317	.a648		a0 ff		ldy #$ff	                ldy #$FF
5318	.a64a		20 9e aa	jsr $aa9e	                jsr LAA5C
5319	.a64d		a9 01		lda #$01	                lda #$01
5320	.a64f		85 c2		sta $c2		                sta $C2
5321	.a651		20 5e aa	jsr $aa5e	                jsr LAA1C
5322	.a654						LA63A:
5323	.a654		20 c2 a8	jsr $a8c2	                jsr LA880
5324	.a657		a9 03		lda #$03	                lda #$03
5325	.a659		c5 c2		cmp $c2		                cmp $C2
5326	.a65b		d0 f7		bne $a654	                bne LA63A
5328	.a65d						LA643:
5329	.a65d		20 88 aa	jsr $aa88	                jsr LAA46
5330	.a660						LA646:
5331	.a660		20 ae a6	jsr $a6ae	                jsr LA694
5332	.a663		50 1a		bvc $a67f	                bvc LA665
5333	.a665		99 b2 03	sta $03b2,y	                sta $03B2,y
5334	.a668		f0 06		beq $a670	                beq LA656
5335	.a66a		c8		iny		                iny
5336	.a66b		c0 0b		cpy #$0b	                cpy #$0B
5337	.a66d		d0 f1		bne $a660	                bne LA646
5338	.a66f		88		dey		                dey
5339	.a670						LA656:
5340	.a670		a2 0c		ldx #$0c	                ldx #$0C
5341	.a672						LA658:
5342	.a672		20 ae a6	jsr $a6ae	                jsr LA694
5343	.a675		50 08		bvc $a67f	                bvc LA665
5344	.a677		9d b2 03	sta $03b2,x	                sta $03B2,x
5345	.a67a		e8		inx		                inx
5346	.a67b		e0 1f		cpx #$1f	                cpx #$1F
5347	.a67d		d0 f3		bne $a672	                bne LA658
5348	.a67f						LA665:
5349	.a67f		98		tya		                tya
5350	.a680		aa		tax		                tax
5351	.a681		9e b2 03	stz $03b2,x	                stz $03B2,x
5352	.a684		a5 be		lda $be		                lda $BE
5353	.a686		05 bf		ora $bf		                ora $BF
5354	.a688		85 c1		sta $c1		                sta $C1
5355	.a68a						LA670:
5356	.a68a		20 86 aa	jsr $aa86	                jsr LAA44
5357	.a68d		84 c2		sty $c2		                sty $C2
5358	.a68f		8a		txa		                txa
5360	.a690		d0 54		bne $a6e6	                bne LA6CC
5364	.a692						LA678:
5366	.a692		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5367	.a695		f0 b1		beq $a648	                beq LA62E
5369	.a697						LA67D:
5370	.a697		20 e2 f3	jsr $f3e2	                jsr LF710
5371	.a69a		c9 2b		cmp #$2b	                cmp #$2B
5372	.a69c		d0 84		bne $a622	                bne LA608
5373	.a69e		a9 08		lda #$08	                lda #$08
5374	.a6a0		25 e2		and $e2		                and $E2
5375	.a6a2		f0 03		beq $a6a7	                beq LA68D
5376	.a6a4		20 79 a0	jsr $a079	                jsr LA05D
5377	.a6a7						LA68D:
5378	.a6a7		20 d3 f3	jsr $f3d3	                jsr LF701
5379	.a6aa		90 eb		bcc $a697	                bcc LA67D
5380	.a6ac		b8		clv		                clv
5381	.a6ad		60		rts		                rts

5383	.a6ae						LA694:
5385	.a6ae		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5386	.a6b1		f0 0d		beq $a6c0	                beq LA6A6
5388	.a6b3		da		phx		                phx
5389	.a6b4		5a		phy		                phy
5390	.a6b5		20 e2 f3	jsr $f3e2	                jsr LF710
5391	.a6b8		85 bd		sta $bd		                sta $BD
5392	.a6ba		a9 ff		lda #$ff	                lda #$FF
5393	.a6bc		85 c0		sta $c0		                sta $C0
5394	.a6be		7a		ply		                ply
5395	.a6bf		fa		plx		                plx
5396	.a6c0						LA6A6:
5397	.a6c0		20 92 a7	jsr $a792	                jsr LA778
5398	.a6c3						LA6A9:
5400	.a6c3		08		php		                php
5401	.a6c4		48		pha		                pha
5402	.a6c5		38		sec		                sec
5403	.a6c6		66 cb		ror $cb		                ror $CB
5404	.a6c8		45 bf		eor $bf		                eor $BF
5405	.a6ca		85 bf		sta $bf		                sta $BF
5406	.a6cc						LA6B2:
5407	.a6cc		a5 bf		lda $bf		                lda $BF
5408	.a6ce		18		clc		                clc
5409	.a6cf		10 0b		bpl $a6dc	                bpl LA6C2
5410	.a6d1		49 08		eor #$08	                eor #$08
5411	.a6d3		85 bf		sta $bf		                sta $BF
5412	.a6d5		a5 be		lda $be		                lda $BE
5413	.a6d7		49 10		eor #$10	                eor #$10
5414	.a6d9		85 be		sta $be		                sta $BE
5415	.a6db		38		sec		                sec
5416	.a6dc						LA6C2:
5417	.a6dc		26 be		rol $be		                rol $BE
5418	.a6de		26 bf		rol $bf		                rol $BF
5419	.a6e0		46 cb		lsr $cb		                lsr $CB
5420	.a6e2		d0 e8		bne $a6cc	                bne LA6B2
5421	.a6e4		68		pla		                pla
5422	.a6e5		28		plp		                plp
5424	.a6e6						LA6CC:
5425	.a6e6		60		rts		                rts

5428	.a6e7						LA6CD:                                       ;AAA6 in MOS 5.00
5429	.a6e7		20 90 a7	jsr $a790	                jsr LA776
5430	.a6ea		80 d7		bra $a6c3	                bra LA6A9

5433	.a6ec						LA6D2:                                       ;AAAB in MOS 5.00
5434	.a6ec		a9 00		lda #$00	                lda #$00
5435	.a6ee						LA6D4:
5436	.a6ee		85 bd		sta $bd		                sta $BD
5437	.a6f0		a2 00		ldx #$00	                ldx #$00
5438	.a6f2		64 bc		stz $bc		                stz $BC
5439	.a6f4		50 0a		bvc $a700	                bvc LA6E6
5440	.a6f6		ad c8 03	lda $03c8	                lda $03C8
5441	.a6f9		0d c9 03	ora $03c9	                ora $03C9
5442	.a6fc		f0 02		beq $a700	                beq LA6E6
5443	.a6fe		a2 04		ldx #$04	                ldx #$04
5444	.a700						LA6E6:
5445	.a700		86 c2		stx $c2		                stx $C2
5446	.a702						rtsAAC1:
5447	.a702		60		rts		                rts

5450	.a703						LA6E9:                                       ;AAC2 in MOS 5.00
5451	.a703		08		php		                php
5452	.a704		a2 03		ldx #$03	                ldx #$03
5453	.a706						LA6EC:
5454	.a706		9e cb 03	stz $03cb,x	                stz $03CB,x
5455	.a709		ca		dex		                dex
5456	.a70a		10 fa		bpl $a706	                bpl LA6EC
5457	.a70c		ad c6 03	lda $03c6	                lda $03C6
5458	.a70f		0d c7 03	ora $03c7	                ora $03C7
5459	.a712		d0 05		bne $a719	                bne LA6FF
5460	.a714		20 9e a7	jsr $a79e	                jsr LA784
5461	.a717		80 03		bra $a71c	                bra LA702

5463	.a719						LA6FF:
5464	.a719		20 a2 a7	jsr $a7a2	                jsr LA788
5465	.a71c						LA702:
5466	.a71c		a9 2a		lda #$2a	                lda #$2A
5467	.a71e		85 bd		sta $bd		                sta $BD
5468	.a720		20 86 aa	jsr $aa86	                jsr LAA44
5469	.a723		20 58 aa	jsr $aa58	                jsr LAA16
5470	.a726		20 92 a7	jsr $a792	                jsr LA778
5471	.a729		88		dey		                dey
5472	.a72a						LA710:
5473	.a72a		c8		iny		                iny
5474	.a72b		b9 d2 03	lda $03d2,y	                lda $03D2,y
5475	.a72e		99 b2 03	sta $03b2,y	                sta $03B2,y
5476	.a731		20 e7 a6	jsr $a6e7	                jsr LA6CD
5477	.a734		d0 f4		bne $a72a	                bne LA710
5478	.a736		a2 0c		ldx #$0c	                ldx #$0C
5479	.a738						LA71E:
5480	.a738		bd b2 03	lda $03b2,x	                lda $03B2,x
5481	.a73b		20 e7 a6	jsr $a6e7	                jsr LA6CD
5482	.a73e		e8		inx		                inx
5483	.a73f		e0 1d		cpx #$1d	                cpx #$1D
5484	.a741		d0 f5		bne $a738	                bne LA71E
5485	.a743		20 89 a7	jsr $a789	                jsr LA76F
5486	.a746		ad c8 03	lda $03c8	                lda $03C8
5487	.a749		0d c9 03	ora $03c9	                ora $03C9
5488	.a74c		f0 1b		beq $a769	                beq LA74F
5489	.a74e		20 88 aa	jsr $aa88	                jsr LAA46
5490	.a751						LA737:
5492	.a751		20 fe aa	jsr $aafe	                jsr isTubeAddress
5493	.a754		f0 05		beq $a75b	                beq LA741                   ; taken if notTube address
5494	.a756		ad e5 fe	lda $fee5	                lda tube.data3              ; load from Tube
5495	.a759		80 02		bra $a75d	                bra LA743
5496	.a75b						LA741:
5498	.a75b		b1 b0		lda ($b0),y	                lda ($B0),y                  ; load from I/O RAM
5499	.a75d						LA743:
5500	.a75d		20 e7 a6	jsr $a6e7	                jsr LA6CD
5501	.a760		c8		iny		                iny
5502	.a761		cc c8 03	cpy $03c8	                cpy $03C8
5503	.a764		d0 eb		bne $a751	                bne LA737
5504	.a766		20 89 a7	jsr $a789	                jsr LA76F
5505	.a769						LA74F:
5506	.a769		20 92 a7	jsr $a792	                jsr LA778
5507	.a76c		20 92 a7	jsr $a792	                jsr LA778
5508	.a76f		20 54 aa	jsr $aa54	                jsr resetACIA
5509	.a772		a9 01		lda #$01	                lda #$01
5510	.a774		20 a4 a7	jsr $a7a4	                jsr LA78A
5511	.a777		28		plp		                plp
5512	.a778		20 c5 a7	jsr $a7c5	                jsr LA7AB
5513	.a77b		2c ca 03	bit $03ca	                bit $03CA
5514	.a77e		10 08		bpl $a788	                bpl LA76E
5515	.a780		08		php		                php
5516	.a781		20 9e a7	jsr $a79e	                jsr LA784
5517	.a784		20 72 a0	jsr $a072	                jsr LA056
5518	.a787		28		plp		                plp
5519	.a788						LA76E:
5520	.a788		60		rts		                rts

5522	.a789						LA76F:
5524	.a789		a5 bf		lda $bf		                lda $BF
5528	.a78b		20 90 a7	jsr $a790	                jsr LA776
5530	.a78e		a5 be		lda $be		                lda $BE
5534	.a790						LA776:
5535	.a790		85 bd		sta $bd		                sta $BD

5538	.a792						LA778:
5539	.a792		20 c2 a8	jsr $a8c2	                jsr LA880
5540	.a795		24 c0		bit $c0		                bit $C0
5541	.a797		10 f9		bpl $a792	                bpl LA778
5542	.a799		64 c0		stz $c0		                stz $C0
5543	.a79b		a5 bd		lda $bd		                lda $BD
5544	.a79d		60		rts		                rts

5547	.a79e						LA784:
5548	.a79e		a9 32		lda #$32	                lda #$32
5549	.a7a0		80 02		bra $a7a4	                bra LA78A

5551	.a7a2						LA788:
5552	.a7a2		a5 c7		lda $c7		                lda $C7
5553	.a7a4						LA78A:
5554	.a7a4		a2 05		ldx #$05	                ldx #$05
5555	.a7a6						LA78C:
5556	.a7a6		8d 40 02	sta $0240	                sta cfsTimeoutCounter
5557	.a7a9						LA78F:
5558	.a7a9		20 c2 a8	jsr $a8c2	                jsr LA880
5559	.a7ac		2c 40 02	bit $0240	                bit cfsTimeoutCounter
5560	.a7af		10 f8		bpl $a7a9	                bpl LA78F
5561	.a7b1		ca		dex		                dex
5562	.a7b2		d0 f2		bne $a7a6	                bne LA78C
5563	.a7b4		60		rts		                rts

5566	.a7b5						LA79B:
5567	.a7b5		ad c6 03	lda $03c6	                lda $03C6
5568	.a7b8		0d c7 03	ora $03c7	                ora $03C7
5569	.a7bb		f0 05		beq $a7c2	                beq LA7A8
5570	.a7bd		2c df 03	bit $03df	                bit $03DF
5571	.a7c0		10 03		bpl $a7c5	                bpl LA7AB
5572	.a7c2						LA7A8:
5573	.a7c2		20 75 a0	jsr $a075	                jsr LA059
5574	.a7c5						LA7AB:
5575	.a7c5		a0 00		ldy #$00	                ldy #$00
5576	.a7c7		64 ba		stz $ba		                stz $BA
5577	.a7c9		ad ca 03	lda $03ca	                lda $03CA
5578	.a7cc		8d df 03	sta $03df	                sta $03DF
5579	.a7cf		20 f4 ed	jsr $edf4	                jsr LEF1B
5580	.a7d2		f0 67		beq $a83b	                beq LA821
5581	.a7d4		a9 0d		lda #$0d	                lda #$0D
5582	.a7d6		20 ee ff	jsr $ffee	                jsr OSWRCH
5583	.a7d9						LA7BF:
5584	.a7d9		b9 b2 03	lda $03b2,y	                lda $03B2,y
5585	.a7dc		f0 10		beq $a7ee	                beq LA7D4
5586	.a7de		c9 20		cmp #$20	                cmp #$20
5587	.a7e0		90 04		bcc $a7e6	                bcc LA7CC
5588	.a7e2		c9 7f		cmp #$7f	                cmp #$7F
5589	.a7e4		90 02		bcc $a7e8	                bcc LA7CE
5590	.a7e6						LA7CC:
5591	.a7e6		a9 3f		lda #$3f	                lda #$3F
5592	.a7e8						LA7CE:
5593	.a7e8		20 ee ff	jsr $ffee	                jsr OSWRCH
5594	.a7eb		c8		iny		                iny
5595	.a7ec		d0 eb		bne $a7d9	                bne LA7BF

5597	.a7ee						LA7D4:
5599	.a7ee		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5600	.a7f1		f0 04		beq $a7f7	                beq LA7DD
5602	.a7f3		24 bb		bit $bb		                bit $BB
5603	.a7f5		50 44		bvc $a83b	                bvc LA821
5604	.a7f7						LA7DD:
5605	.a7f7		20 28 9f	jsr $9f28	                jsr printSpace
5606	.a7fa		c8		iny		                iny
5607	.a7fb		c0 0b		cpy #$0b	                cpy #$0B
5608	.a7fd		90 ef		bcc $a7ee	                bcc LA7D4
5609	.a7ff		ad c6 03	lda $03c6	                lda $03C6
5610	.a802		aa		tax		                tax
5611	.a803		20 ad a8	jsr $a8ad	                jsr printHexByte
5612	.a806		2c ca 03	bit $03ca	                bit $03CA
5613	.a809		10 30		bpl $a83b	                bpl LA821
5614	.a80b		8a		txa		                txa
5615	.a80c		18		clc		                clc
5616	.a80d		6d c9 03	adc $03c9	                adc $03C9
5617	.a810		20 a8 a8	jsr $a8a8	                jsr printSpaceThenPrintHexByte
5618	.a813						LA7F9:
5619	.a813		ad c8 03	lda $03c8	                lda $03C8
5620	.a816		20 ad a8	jsr $a8ad	                jsr printHexByte
5621	.a819		24 bb		bit $bb		                bit $BB
5622	.a81b		50 1e		bvc $a83b	                bvc LA821
5623	.a81d		a2 04		ldx #$04	                ldx #$04
5624	.a81f						LA805:
5625	.a81f		20 28 9f	jsr $9f28	                jsr printSpace
5626	.a822		ca		dex		                dex
5627	.a823		d0 fa		bne $a81f	                bne LA805
5628	.a825		a2 0f		ldx #$0f	                ldx #$0F
5629	.a827		20 2f a8	jsr $a82f	                jsr LA815
5630	.a82a		20 28 9f	jsr $9f28	                jsr printSpace
5631	.a82d		a2 13		ldx #$13	                ldx #$13
5632	.a82f						LA815:
5633	.a82f		a0 04		ldy #$04	                ldy #$04
5634	.a831						LA817:
5635	.a831		bd b2 03	lda $03b2,x	                lda $03B2,x
5636	.a834		20 ad a8	jsr $a8ad	                jsr printHexByte
5637	.a837		ca		dex		                dex
5638	.a838		88		dey		                dey
5639	.a839		d0 f6		bne $a831	                bne LA817
5640	.a83b						LA821:
5641	.a83b		60		rts		                rts

5644	.a83c						LA822:
5645	.a83c		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5646	.a83f		f0 06		beq $a847	                beq LA82D
5647	.a841		20 0c aa	jsr $aa0c	                jsr LA9CA
5648	.a844		4c 20 f9	jmp $f920	                jmp badCommandError

5650	.a847						LA82D:
5651	.a847		20 9c aa	jsr $aa9c	                jsr LAA5A
5652	.a84a		20 e2 aa	jsr $aae2	                jsr LAAA0
5653	.a84d		20 f4 ed	jsr $edf4	                jsr LEF1B
5654	.a850		f0 e9		beq $a83b	                beq LA821
5655	.a852		20 65 a9	jsr $a965	                jsr LA923
5656	>a855		52 45 43 4f 52 44 20 74		                .text "RECORD then RETURN"
	>a85d		68 65 6e 20 52 45 54 55 52 4e
5657	>a867		00				                .byte $00

5659	.a868						LA84E:
5660	.a868		20 c2 a8	jsr $a8c2	                jsr LA880
5661	.a86b		20 e0 ff	jsr $ffe0	                jsr OSRDCH
5662	.a86e		c9 0d		cmp #$0d	                cmp #$0D
5663	.a870		d0 f6		bne $a868	                bne LA84E
5664	.a872		4c e7 ff	jmp $ffe7	                jmp OSNEWL

5667							;-------------------------------------------------------------------------

5670							                .include "cfs_errors.s65"

:13	;******  Processing file: src/cfs_errors.s65

1							                ; The MOS code assumes all these error routines have
2							                ; the same MSB of their start address. (There's a
3							                ; .cerror that checks for this.) They all just fit
4							                ; into 32 bytes, so 32-byte alignment will do the
5							                ; trick.
6							                ;
7							                ; (The alignment directive doesn't take effect in any
8							                ; of the default MOS builds. It springs into action to
9							                ; accommodate modifications to other parts of the
10							                ; code.)

15	.a875						dataError:
16	.a875		20 2f ab	jsr $ab2f	                jsr doFollowingError
17	>a878		d8 0d 44 61 74 61 3f 00		                .text $d8,13,"Data?",0
18	.a880		80 19		bra $a89b	                bra LAB2A

20	.a882						fileError:
21	.a882		20 2f ab	jsr $ab2f	                jsr doFollowingError
22	>a885		db 0d 46 69 6c 65 3f 00		                .text $db,13,"File?",0
23	.a88d		80 0c		bra $a89b	                bra LAB2A

25	.a88f						blockError:
26	.a88f		20 2f ab	jsr $ab2f	                jsr doFollowingError
27	>a892		da 0d 42 6c 6f 63 6b 3f		                .text $da,13,"Block?",0
	>a89a		00
28	.a89b						LAB2A:
29	.a89b		4c ba a9	jmp $a9ba	                jmp LA978

:7	;******  Return to file: src/terminal.s65

5673							;-------------------------------------------------------------------------

5676	.a89e						LA85B:
5677	.a89e		a2 fd		ldx #$fd	                ldx #$FD
5678	.a8a0						LA85D:
5679	.a8a0		f6 b4		inc $b4,x	                inc $B4,x
5680	.a8a2		d0 03		bne $a8a7	                bne LA864
5681	.a8a4		e8		inx		                inx
5682	.a8a5		d0 f9		bne $a8a0	                bne LA85D
5683	.a8a7						LA864:
5684	.a8a7		60		rts		                rts

5686							;-------------------------------------------------------------------------

5688	.a8a8						printSpaceThenPrintHexByte:
5689	.a8a8		48		pha		                pha
5690	.a8a9		20 28 9f	jsr $9f28	                jsr printSpace
5691	.a8ac		68		pla		                pla
5692	.a8ad						printHexByte:
5693	.a8ad		48		pha		                pha
5695	.a8ae		20 21 e5	jsr $e521	                jsr lsr4
5702	.a8b1		20 b5 a8	jsr $a8b5	                jsr printHexDigit
5703	.a8b4		68		pla		                pla
5704	.a8b5						printHexDigit:
5705	.a8b5		29 0f		and #$0f	                and #$0F
5706	.a8b7		09 30		ora #$30	                ora #'0'                     ;+'0'
5707	.a8b9		c9 3a		cmp #$3a	                cmp #'9'+1
5708	.a8bb		90 02		bcc $a8bf	                bcc LA87D                    ;taken if <='9'
5709	.a8bd		69 06		adc #$06	                adc #'A'-('9'+1)-1           ;adjust - -1 because C set
5710	.a8bf						LA87D:
5711	.a8bf		4c ee ff	jmp $ffee	                jmp OSWRCH

5713							;-------------------------------------------------------------------------

5715	.a8c2						LA880:
5716	.a8c2		08		php		                php
5717	.a8c3		24 eb		bit $eb		                bit $EB
5718	.a8c5		30 04		bmi $a8cb	                bmi LA889
5719	.a8c7		24 ff		bit $ff		                bit $FF
5720	.a8c9		30 02		bmi $a8cd	                bmi LA88B
5721	.a8cb						LA889:
5722	.a8cb		28		plp		                plp
5723	.a8cc		60		rts		                rts

5725	.a8cd						LA88B:
5726	.a8cd		20 93 a1	jsr $a193	                jsr LA177
5727	.a8d0		20 fd a9	jsr $a9fd	                jsr LA9BB
5728	.a8d3						escapeError:
5729	.a8d3		a9 7e		lda #$7e	                lda #$7E
5730	.a8d5		20 f4 ff	jsr $fff4	                jsr OSBYTE
5731	.a8d8		20 2f ab	jsr $ab2f	                jsr doFollowingError
5732	>a8db		11				                .byte $11
5733	>a8dc		45 73 63 61 70 65		                .text "Escape"
5734	>a8e2		00				                .byte $00

5736							;-------------------------------------------------------------------------

5738	.a8e3						LA8A1:
5739	.a8e3		98		tya		                tya
5740	.a8e4		f0 0d		beq $a8f3	                beq LA8B1
5741	.a8e6		20 65 a9	jsr $a965	                jsr LA923
5742	>a8e9		0d				                .byte $0D
5743	>a8ea		4c 6f 61 64 69 6e 67		                .text "Loading"
5744	>a8f1		0d				                .byte $0D
5745	>a8f2		00				                .byte $00
5746	.a8f3						LA8B1:
5747	.a8f3		64 ba		stz $ba		                stz $BA                      ; :
5748	.a8f5		a2 ff		ldx #$ff	                ldx #$FF
5749	.a8f7		a5 c1		lda $c1		                lda $C1
5750	.a8f9		d0 0b		bne $a906	                bne LA8C4
5751	.a8fb		20 9e a9	jsr $a99e	                jsr LA95C
5752	.a8fe		08		php		                php
5753	.a8ff		a2 ff		ldx #$ff	                ldx #$FF
5754	.a901		a0 82		ldy #$82	                ldy #<fileError
5755							                .cwarn (>fileError)!=(>dataError),"must be on same page"
5756	.a903		28		plp		                plp
5757	.a904		d0 16		bne $a91c	                bne LA8DA
5758	.a906						LA8C4:
5759	.a906		a0 75		ldy #$75	                ldy #<dataError
5760	.a908		a5 c1		lda $c1		                lda $C1
5761	.a90a		d0 10		bne $a91c	                bne LA8DA
5762	.a90c		ad c6 03	lda $03c6	                lda $03C6
5763	.a90f		c5 b4		cmp $b4		                cmp $B4
5764	.a911		d0 07		bne $a91a	                bne LA8D8
5765	.a913		ad c7 03	lda $03c7	                lda $03C7
5766	.a916		c5 b5		cmp $b5		                cmp $B5
5767	.a918		f0 0b		beq $a925	                beq LA8E3
5768	.a91a						LA8D8:
5769	.a91a		a0 8f		ldy #$8f	                ldy #<blockError
5770							                .cwarn (>blockError)!=(>dataError),"must be on same page"
5771	.a91c						LA8DA:
5772	.a91c		5a		phy		                phy
5773	.a91d		da		phx		                phx
5774	.a91e		20 c2 a7	jsr $a7c2	                jsr LA7A8
5775	.a921		fa		plx		                plx
5776	.a922		7a		ply		                ply
5777	.a923		80 10		bra $a935	                bra LA8F3

5779	.a925						LA8E3:
5780	.a925		da		phx		                phx
5781	.a926		20 b5 a7	jsr $a7b5	                jsr LA79B
5782	.a929		20 e2 a9	jsr $a9e2	                jsr LA9A0
5783	.a92c		fa		plx		                plx
5784	.a92d		a5 be		lda $be		                lda $BE
5785	.a92f		05 bf		ora $bf		                ora $BF
5786	.a931		f0 79		beq $a9ac	                beq LA96A
5787	.a933		a0 75		ldy #$75	                ldy #<dataError
5788	.a935						LA8F3:
5789	.a935		a9 a8		lda #$a8	                lda #>dataError
5790	.a937		c6 ba		dec $ba		                dec $BA
5791	.a939		48		pha		                pha
5792	.a93a		24 eb		bit $eb		                bit $EB
5793	.a93c		30 0d		bmi $a94b	                bmi LA909
5794	.a93e		8a		txa		                txa
5796	.a93f		2d 47 02	and $0247	                and cfsRFSFSSwitch
5797	.a942						LA900:
5799	.a942		d0 07		bne $a94b	                bne LA909
5800	.a944		8a		txa		                txa
5801	.a945		29 11		and #$11	                and #$11
5802	.a947		25 bb		and $bb		                and $BB
5803	.a949		f0 0f		beq $a95a	                beq LA918
5804	.a94b						LA909:
5805	.a94b		68		pla		                pla
5806	.a94c		85 b9		sta $b9		                sta $B9
5807	.a94e		84 b8		sty $b8		                sty $B8
5808	.a950		20 a5 a5	jsr $a5a5	                jsr LA58B
5809	.a953		46 eb		lsr $eb		                lsr $EB
5810	.a955		20 f3 a9	jsr $a9f3	                jsr LA9B1
5811	.a958		80 3d		bra $a997	                bra LA955

5813	.a95a						LA918:
5814	.a95a		98		tya		                tya
5815	.a95b		18		clc		                clc
5816	.a95c		69 03		adc #$03	                adc #$03
5817	.a95e		a8		tay		                tay
5818	.a95f		90 03		bcc $a964	                bcc LA922
5819	.a961		68		pla		                pla
5820	.a962		1a		inc a		                inc a
5821	.a963		48		pha		                pha
5822	.a964						LA922:
5823	.a964		5a		phy		                phy
5824	.a965						LA923:
5825	.a965		20 f4 ed	jsr $edf4	                jsr LEF1B
5826	.a968		a8		tay		                tay

5828							;-------------------------------------------------------------------------
5829							;
5830							; Print 0-terminated message using address from stack.
5831							;
5832							; entry:
5833							;
5834							; S=[StrL; StrH] - where Str = (address of string)-1
5835							; Y = 0 to print message; otherwise, don't print message
5836							;
5837	.a969						printFollowingMessage:                       ;
5838	.a969		68		pla		                pla
5839	.a96a		85 b8		sta $b8		                sta printMessageAddress+0
5840	.a96c		68		pla		                pla
5841	.a96d		85 b9		sta $b9		                sta printMessageAddress+1
5842	.a96f		5a		phy		                phy                          ;save initial Y
5843	.a970		98		tya		                tya                          ;Z=1 if Y=0
5844	.a971		08		php		                php                          ;save Y=0 state
5845	.a972						fetchNextChar:
5846	.a972		e6 b8		inc $b8		                inc printMessageAddress+0
5847	.a974		d0 02		bne $a978	                bne +
5848	.a976		e6 b9		inc $b9		                inc printMessageAddress+1
5849	.a978						+
5850	.a978		b2 b8		lda ($b8)	                lda (printMessageAddress)   ;fetch next char to print
5851	.a97a		f0 13		beq $a98f	                beq printingFinished        ;branch taken if last char
5852	.a97c		28		plp		                plp                         ;restore Y=0 state
5853	.a97d		08		php		                php                         ;save Y=0 state
5854	.a97e		f0 f2		beq $a972	                beq fetchNextChar ;branch taken if Y=0 - i.e., skip the
5855							                                  ;printing

5857							                ; printMessageAddress is in the $b0-$bf area, so it
5858							                ; needs saving in case there's a *SPOOL going on.
5859	.a980		a4 b8		ldy $b8		                ldy printMessageAddress+0
5860	.a982		5a		phy		                phy
5861	.a983		a4 b9		ldy $b9		                ldy printMessageAddress+1
5862	.a985		20 e3 ff	jsr $ffe3	                jsr OSASCI
5863	.a988		84 b9		sty $b9		                sty printMessageAddress+1
5864	.a98a		7a		ply		                ply
5865	.a98b		84 b8		sty $b8		                sty printMessageAddress+0

5867	.a98d		80 e3		bra $a972	                bra fetchNextChar

5869	.a98f						printingFinished:
5870	.a98f		28		plp		                plp                          ;discard Y=0 state
5871	.a990		e6 b8		inc $b8		                inc printMessageAddress+0
5872	.a992		d0 02		bne $a996	                bne +
5873	.a994		e6 b9		inc $b9		                inc printMessageAddress+1
5874	.a996						+
5875	.a996		7a		ply		                ply                          ;restore initial Y
5876	.a997						LA955:
5877	.a997		6c b8 00	jmp ($00b8)	                jmp (printMessageAddress)

5879	.a99a						alwaysPrintFollowingMessage:
5880	.a99a		a0 01		ldy #$01	                ldy #$01
5881	.a99c		80 cb		bra $a969	                bra printFollowingMessage

5883							;-------------------------------------------------------------------------

5885	.a99e						LA95C:
5886	.a99e		a2 ff		ldx #$ff	                ldx #$FF
5887	.a9a0						LA95E:
5888	.a9a0		e8		inx		                inx
5889	.a9a1		bd d2 03	lda $03d2,x	                lda $03D2,x
5890	.a9a4		d0 07		bne $a9ad	                bne LA96B
5891	.a9a6		8a		txa		                txa
5892	.a9a7		f0 03		beq $a9ac	                beq LA96A
5893	.a9a9		bd b2 03	lda $03b2,x	                lda $03B2,x
5894	.a9ac						LA96A:
5895	.a9ac		60		rts		                rts

5897	.a9ad						LA96B:
5898	.a9ad		20 36 ea	jsr $ea36	                jsr isLetter
5899	.a9b0		5d b2 03	eor $03b2,x	                eor $03B2,x
5900	.a9b3		b0 02		bcs $a9b7	                bcs LA975
5901	.a9b5		29 df		and #$df	                and #$DF
5902	.a9b7						LA975:
5903	.a9b7		f0 e7		beq $a9a0	                beq LA95E
5904	.a9b9						LA977:
5905	.a9b9		60		rts		                rts

5907	.a9ba						LA978:
5908	.a9ba		a5 ba		lda $ba		                lda $BA
5909	.a9bc		f0 21		beq $a9df	                beq LA99D
5910	.a9be		8a		txa		                txa
5911	.a9bf		f0 1e		beq $a9df	                beq LA99D
5912	.a9c1		a9 22		lda #$22	                lda #$22
5913	.a9c3		24 bb		bit $bb		                bit $BB
5914	.a9c5		f0 18		beq $a9df	                beq LA99D
5916	.a9c7		20 54 aa	jsr $aa54	                jsr resetACIA
5918	.a9ca		a8		tay		                tay
5919	.a9cb		20 69 a9	jsr $a969	                jsr printFollowingMessage
5920	>a9ce		0d				                .byte $0D
5921	>a9cf		07				                .byte $07
5922	>a9d0		52 65 77 69 6e 64 20 74		                .text "Rewind tape"
	>a9d8		61 70 65
5923	>a9db		0d				                .byte $0D
5924	>a9dc		0d				                .byte $0D
5925	>a9dd		00				                .byte $00
5926	.a9de		60		rts		                rts

5928	.a9df						LA99D:
5929	.a9df		20 79 a0	jsr $a079	                jsr LA05D
5930	.a9e2						LA9A0:
5931	.a9e2		a5 c2		lda $c2		                lda $C2
5932	.a9e4		f0 d3		beq $a9b9	                beq LA977
5933	.a9e6		20 c2 a8	jsr $a8c2	                jsr LA880
5935	.a9e9		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5936	.a9ec		f0 f4		beq $a9e2	                beq LA9A0
5941	.a9ee		20 77 a4	jsr $a477	                jsr LA45D
5943	.a9f1		80 ef		bra $a9e2	                bra LA9A0

5945	.a9f3						LA9B1:
5946	.a9f3		20 f4 ed	jsr $edf4	                jsr LEF1B
5947	.a9f6		f0 05		beq $a9fd	                beq LA9BB
5948	.a9f8						LA9B6:
5949	.a9f8		a9 07		lda #$07	                lda #$07
5950	.a9fa		20 ee ff	jsr $ffee	                jsr OSWRCH
5951	.a9fd						LA9BB:
5953	.a9fd		ad 7a 02	lda $027a	                lda tubePresence
5954	.aa00		f0 05		beq $aa07	                beq LA9C5                  ; taken if copro not present
5955	.aa02		a9 80		lda #$80	                lda #$80                   ; $80 = CFS/RFS release Tube
5956	.aa04		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
5958	.aa07						LA9C5:
5960	.aa07		a2 00		ldx #$00	                ldx #$00
5961	.aa09		20 a3 aa	jsr $aaa3	                jsr LAA61
5962	.aa0c						LA9CA:
5963	.aa0c		08		php		                php
5964	.aa0d		78		sei		                sei
5965	.aa0e		ad 82 02	lda $0282	                lda serialULARegister
5966	.aa11		8d 10 fe	sta $fe10	                sta SERPROC+0
5967	.aa14		64 ea		stz $ea		                stz $EA
5968	.aa16		80 01		bra $aa19	                bra LA9D7

5970							;-------------------------------------------------------------------------

5972	.aa18						resetACIAThenRewriteControlRegister:
5973	.aa18		08		php		                php
5974	.aa19						LA9D7:
5975	.aa19		20 54 aa	jsr $aa54	                jsr resetACIA
5976	.aa1c		ad 50 02	lda $0250	                lda aciaControlRegister
5977	.aa1f		4c ec e8	jmp $e8ec	                jmp writeACIAControlRegisterAndCopy

5979							;-------------------------------------------------------------------------

5981	.aa22						LA9E0:
5982	.aa22		28		plp		                plp
5983	.aa23		24 ff		bit $ff		                bit $FF
5984	.aa25		10 18		bpl $aa3f	                bpl LA9FD
5986	.aa27		60		rts		                rts

5988	.aa28						LA9E6:
5989	.aa28		a5 e3		lda $e3		                lda $E3
5990	.aa2a		0a		asl a		                asl a
5991	.aa2b		0a		asl a		                asl a
5992	.aa2c		0a		asl a		                asl a
5993	.aa2d		0a		asl a		                asl a
5994	.aa2e		85 bb		sta $bb		                sta $BB
5998	.aa30		ad d1 03	lda $03d1	                lda $03D1
5999	.aa33		80 08		bra $aa3d	                bra LA9FB

6002	.aa35						LA9F3:
6003	.aa35		a5 e3		lda $e3		                lda $E3
6004	.aa37		29 f0		and #$f0	                and #$F0
6005	.aa39		85 bb		sta $bb		                sta $BB
6007	.aa3b		a9 06		lda #$06	                lda #$06
6008	.aa3d						LA9FB:
6009	.aa3d		85 c7		sta $c7		                sta $C7
6010	.aa3f						LA9FD:
6011	.aa3f		58		cli		                cli
6012	.aa40						LA9FE:
6013	.aa40		08		php		                php
6014	.aa41		78		sei		                sei
6015	.aa42						LAA00:
6016	.aa42		2c 4f 02	bit $024f	                bit rs423Busy
6017	.aa45		10 db		bpl $aa22	                bpl LA9E0
6018	.aa47		a5 ea		lda $ea		                lda $EA
6019	.aa49		30 d7		bmi $aa22	                bmi LA9E0
6020	.aa4b		a9 01		lda #$01	                lda #$01
6021	.aa4d		85 ea		sta $ea		                sta $EA
6022	.aa4f		20 54 aa	jsr $aa54	                jsr resetACIA
6023	.aa52		28		plp		                plp
6025	.aa53		60		rts		                rts

6027							;-------------------------------------------------------------------------

6030	.aa54						resetACIA:
6031	.aa54		a9 03		lda #$03	                lda #ACIA.control.reset
6032	.aa56		80 1b		bra $aa73	                bra writeACIAControlRegister

6035							;-------------------------------------------------------------------------

6037	.aa58						LAA16:
6039	.aa58		a9 30		lda #$30	                lda #$30
6040	.aa5a		85 ca		sta $ca		                sta $CA
6041	.aa5c		80 13		bra $aa71	                bra LAA2F
6043	.aa5e						LAA1C:
6045	.aa5e		a9 05		lda #$05	                lda #$05
6046	.aa60		8d 10 fe	sta $fe10	                sta SERPROC+0
6047	.aa63		a2 ff		ldx #$ff	                ldx #$FF
6048	.aa65						LAA23:
6049	.aa65		ca		dex		                dex
6050	.aa66		d0 fd		bne $aa65	                bne LAA23
6052	.aa68		64 ca		stz $ca		                stz $CA
6054	.aa6a		a9 d0		lda #$d0	                lda #$D0
6055	.aa6c						LAA2A:
6056	.aa6c		a0 85		ldy #$85	                ldy #$85
6057	.aa6e		8c 10 fe	sty $fe10	                sty SERPROC+0
6058	.aa71						LAA2F:
6059	.aa71		05 c6		ora $c6		                ora $C6
6060	.aa73						writeACIAControlRegister:
6061	.aa73		8d 08 fe	sta $fe08	                sta ACIA+0
6063	.aa76		60		rts		                rts

6065							;-------------------------------------------------------------------------

6067	.aa77						LAA35:
6068	.aa77		ae c6 03	ldx $03c6	                ldx $03C6
6069	.aa7a		ac c7 03	ldy $03c7	                ldy $03C7
6070	.aa7d		e8		inx		                inx
6071	.aa7e		86 b4		stx $b4		                stx $B4
6072	.aa80		d0 01		bne $aa83	                bne LAA41
6073	.aa82		c8		iny		                iny
6074	.aa83						LAA41:
6075	.aa83		84 b5		sty $b5		                sty $B5
6076	.aa85		60		rts		                rts

6078	.aa86						LAA44:
6079	.aa86		64 c0		stz $c0		                stz $C0
6080	.aa88						LAA46:
6081	.aa88		a0 00		ldy #$00	                ldy #$00
6082	.aa8a		64 be		stz $be		                stz $BE
6083	.aa8c		64 bf		stz $bf		                stz $BF
6084	.aa8e		60		rts		                rts

6086	.aa8f						LAA4D:
6087	.aa8f		a0 ff		ldy #$ff	                ldy #$FF
6088	.aa91						LAA4F:
6089	.aa91		c8		iny		                iny
6090	.aa92		e8		inx		                inx
6091	.aa93		bd 00 03	lda $0300,x	                lda $0300,x
6092	.aa96		99 d2 03	sta $03d2,y	                sta $03D2,y
6093	.aa99		d0 f6		bne $aa91	                bne LAA4F
6094	.aa9b		60		rts		                rts

6097	.aa9c						LAA5A:
6098	.aa9c		a0 00		ldy #$00	                ldy #$00
6099	.aa9e						LAA5C:
6100	.aa9e		58		cli		                cli
6101	.aa9f		a2 01		ldx #$01	                ldx #$01
6102	.aaa1		84 c3		sty $c3		                sty $C3
6103	.aaa3						LAA61:
6104	.aaa3		a9 89		lda #$89	                lda #$89
6105	.aaa5		a4 c3		ldy $c3		                ldy $C3
6106	.aaa7		4c f4 ff	jmp $fff4	                jmp OSBYTE

6109							; Check if TAPE/ROM channel is open
6110							; ---------------------------------
6111							; Y=handle to check, A=status mask to use
6112	.aaaa						LAA68:
6113	.aaaa		5a		phy		                phy
6114	.aaab		20 cf aa	jsr $aacf	                jsr LAA8D
6115	.aaae		7a		ply		                ply
6117	.aaaf		b0 5a		bcs $ab0b	                bcs rtsAAC9                    ; Channel open, exit
6121	.aab1		cc 57 02	cpy $0257	                cpy spoolFileHandle                    ; Not SPOOL handle
6122	.aab4		d0 05		bne $aabb	                bne LAA79
6123	.aab6		9c 57 02	stz $0257	                stz spoolFileHandle                    ; Clear the SPOOL handle
6124	.aab9		80 08		bra $aac3	                bra LAA81
6125	.aabb						LAA79:
6126	.aabb		cc 56 02	cpy $0256	                cpy execFileHandle                    ; Not EXEC handle
6127	.aabe		d0 03		bne $aac3	                bne LAA81
6128	.aac0		9c 56 02	stz $0256	                stz execFileHandle                    ; Clear the EXEC handle
6129	.aac3						LAA81:
6130	.aac3		20 2f ab	jsr $ab2f	                jsr doFollowingError                    ; Generate error
6131	>aac6		de				                .byte $DE
6132	>aac7		43 68 61 6e 6e 65 6c		                .text "Channel"
6133	.aace		00		brk #		                brk

6135	.aacf						LAA8D:
6136	.aacf		48		pha		                pha                          ; Toggle channel with CFS/RFS switch
6137	.aad0		98		tya		                tya
6141	.aad1		4d 47 02	eor $0247	                eor cfsRFSFSSwitch
6143	.aad4		a8		tay		                tay                          ; If CFS=unchanged, if RFS 1/2/3->3/0/1
6144	.aad5		68		pla		                pla
6145	.aad6		25 e2		and $e2		                and $E2                      ; Mask with open channels bitmask
6146	.aad8		4a		lsr a		                lsr a                        ; Move 'input open if tested' into Carry
6147	.aad9		88		dey		                dey                          ; Exit if testing CFS#1 or RFS#3
6148	.aada		f0 05		beq $aae1	                beq rtsAA9F
6149	.aadc		4a		lsr a		                lsr a                        ; Move 'output open if tested' into Carry
6150	.aadd		88		dey		                dey                          ; Exit if testing CFS#2
6151	.aade		f0 01		beq $aae1	                beq rtsAA9F
6152	.aae0		18		clc		                clc                          ; Otherwise, Carry=Not Open
6153	.aae1						rtsAA9F:
6154	.aae1		60		rts		                rts

6157	.aae2						LAAA0:
6158	.aae2		a9 10		lda #$10	                lda #$10
6159	.aae4		80 86		bra $aa6c	                bra LAA2A

6163	.aae6						initiateCFSRFSHostToParasiteTransfer:
6164	.aae6		a9 01		lda #$01	                lda #tubeReasonMultiByteHostToParasite
6165	.aae8						LAAA6:
6166	.aae8		20 fe aa	jsr $aafe	                jsr isTubeAddress
6167	.aaeb		f0 1e		beq $ab0b	                beq rtsAAC9
6168	.aaed		8a		txa		                txa                          ; restore transfer type
6169	.aaee		a2 b0		ldx #$b0	                ldx #$B0
6170	.aaf0		a0 00		ldy #$00	                ldy #$00
6171	.aaf2						initiateCFSRFSTubeTransfer:
6172	.aaf2		48		pha		                pha                         ; save transfer type
6173	.aaf3		a9 c0		lda #$c0	                lda #$C0                    ; $c0 = CFS/RFS claim Tube
6174	.aaf5						-
6175	.aaf5		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
6176	.aaf8		90 fb		bcc $aaf5	                bcc -
6177	.aafa		68		pla		                pla                          ; restore transfer type
6178	.aafb		4c 06 04	jmp $0406	                jmp tubeHost.entryPoint      ; initiate transfer

6180	.aafe						isTubeAddress:
6181	.aafe		aa		tax		                tax
6182	.aaff		a5 b2		lda $b2		                lda $B2
6183	.ab01		25 b3		and $b3		                and $B3                 ; $ff if address is $FFFFxxxx
6184	.ab03		1a		inc a		                inc a                   ; $00 if address is $FFFFxxxx
6185	.ab04		f0 05		beq $ab0b	                beq rtsAAC9               ; taken if not Tube address
6186	.ab06		ad 7a 02	lda $027a	                lda tubePresence
6187	.ab09		29 80		and #$80	                and #$80            ; $80 if $FFFFxxxx and Tube active
6188	.ab0b						rtsAAC9:
6189	.ab0b		60		rts		                rts

6192	.ab0c						LAACA:
6193	.ab0c		a0 05		ldy #$05	                ldy #$05
6194	.ab0e						LAACC:
6195	.ab0e		b1 cc		lda ($cc),y	                lda ($CC),y
6196	.ab10		d0 07		bne $ab19	                bne LAAD7
6197	.ab12		c8		iny		                iny
6198	.ab13		c0 08		cpy #$08	                cpy #$08
6199	.ab15		90 f7		bcc $ab0e	                bcc LAACC
6200	.ab17						LAAD5:
6201	.ab17		b1 cc		lda ($cc),y	                lda ($CC),y
6202	.ab19						LAAD7:
6203	.ab19		3a		dec a		                dec a
6204	.ab1a		91 cc		sta ($cc),y	                sta ($CC),y
6205	.ab1c		88		dey		                dey
6206	.ab1d		c0 05		cpy #$05	                cpy #$05
6207	.ab1f		b0 f6		bcs $ab17	                bcs LAAD5
6208	.ab21		60		rts		                rts

6210	.ab22						LAAE0:
6211	.ab22		a0 08		ldy #$08	                ldy #$08
6212	.ab24		a9 00		lda #$00	                lda #$00
6213	.ab26						LAAE4:
6214	.ab26		11 cc		ora ($cc),y	                ora ($CC),y
6215	.ab28		88		dey		                dey
6216	.ab29		c0 05		cpy #$05	                cpy #$05
6217	.ab2b		b0 f9		bcs $ab26	                bcs LAAE4
6218	.ab2d		aa		tax		                tax
6219	.ab2e		60		rts		                rts

6221	.ab2f						doFollowingError:
6222	.ab2f		78		sei		                sei
6223	.ab30		68		pla		                pla
6224	.ab31		85 fa		sta $fa		                sta SEIWKA+0
6225	.ab33		68		pla		                pla
6226	.ab34		85 fb		sta $fb		                sta SEIWKA+1
6227	.ab36		9c 00 01	stz $0100	                stz $0100
6228	.ab39		a0 00		ldy #$00	                ldy #$00
6229	.ab3b						-
6230	.ab3b		c8		iny		                iny
6231	.ab3c		b1 fa		lda ($fa),y	                lda (SEIWKA),y
6232	.ab3e		99 00 01	sta $0100,y	                sta $0100,y
6233	.ab41		d0 f8		bne $ab3b	                bne -
6234	.ab43		4c 00 01	jmp $0100	                jmp $0100

6242							;-------------------------------------------------------------------------
6243							;
6244							; Tube host code
6245							;
6246							; See http://mdfs.net/Software/Tube/M128/Host320.lst
6247							;
6248							; I mostly just copied JGH's comments here.

6250	.ab46						tubeHost: .block          ;tube code

6252	.ab46						zeroPageCode: .block
6253							                .logical tubeZeroPageCodeAddr

6256							                .include "tubeHost_brkHandlerAndIdleLoop.s65"

:24	;******  Processing file: src/tubeHost_brkHandlerAndIdleLoop.s65

1	.ab46	0016					brkHandler:
2	.ab46	0016	a9 ff		lda #$ff	                lda #$FF
3	.ab48	0018	20 73 06	jsr $0673	                jsr sendR4       ;send $ff via R4 to interrupt copro
4	.ab4b	001b	ad e3 fe	lda $fee3	                lda tube.data2   ;get ACK byte from copro
5	.ab4e	001e	a9 00		lda #$00	                lda #$00
6	.ab50	0020	20 68 06	jsr $0668	                jsr sendR2A       ;send $00 via R2 to specify ERROR
7	.ab53	0023	a8		tay		                tay               ;Y=0
8	.ab54	0024	b1 fd		lda ($fd),y	                lda ($FD),y       ;get error number
9	.ab56	0026	20 68 06	jsr $0668	                jsr sendR2A       ;send error number via R2
10	.ab59	0029					-
11	.ab59	0029	c8		iny		                iny             ;next char
12	.ab5a	002a	b1 fd		lda ($fd),y	                lda ($FD),y     ;fetch error string char
13	.ab5c	002c	20 68 06	jsr $0668	                jsr sendR2A     ;send via R2
14	.ab5f	002f	aa		tax		                tax             ;set N/Z as per error string char
15	.ab60	0030	d0 f7		bne $0029	                bne -           ;repeat until terminating $00 sent
16	.ab62	0032					idleStartup:
17	.ab62	0032	a2 ff		ldx #$ff	                ldx #$FF
18	.ab64	0034	9a		txs		                txs             ;clear stack
19	.ab65	0035	58		cli		                cli
20	.ab66	0036					idleLoop:
21	.ab66	0036	2c e0 fe	bit $fee0	                bit tube.status1 ;is there a char in R1?
22	.ab69	0039	10 06		bpl $0041	                bpl LAB58        ;branch taken if no char in R1
23	.ab6b	003b					handleOSWRCH:
24	.ab6b	003b	ad e1 fe	lda $fee1	                lda tube.data1  ;get char from R1
25	.ab6e	003e	20 ee ff	jsr $ffee	                jsr OSWRCH      ;pass to OSWRCH
26	.ab71	0041					LAB58:
27	.ab71	0041	2c e2 fe	bit $fee2	                bit tube.status2 ;is there a command in R2?
28	.ab74	0044	10 f0		bpl $0036	                bpl idleLoop     ;branch taken if no command in R2
29	.ab76	0046	2c e0 fe	bit $fee0	                bit tube.status1 ;is there a char in R1?
30	.ab79	0049	30 f0		bmi $003b	                bmi handleOSWRCH ;branch taken if char in R1
31	.ab7b	004b	ae e3 fe	ldx $fee3	                ldx tube.data2   ;get command from R2

39	.ab7e	004e	86 51		stx $51		                stx callCommandRoutine+1 ;use as index into command
40							                                         ;table
41	.ab80	0050					callCommandRoutine:
42	.ab80	0050	6c 00 05	jmp ($0500)	                jmp (tubeHost.commandRoutines)

:7	;******  Return to file: src/terminal.s65

6260							                ; this doesn't need an initial value, so in the
6261							                ; refresh versions it's best to have it in the
6262							                ; uninitialised zero page area, in case that would
6263							                ; allow the zeroPageCode block to become empty,
6264							                ; eliminating the need to copy it.
6265	.ab83	0053					languageParasiteAddr:
6266	>ab83	0053	00 80 00 00			                .dword $8000

6329							                ; Strictly speaking, the code could use up to $8f, but
6330							                ; safer not to use memory that the Acorn MOS didn't.
6331							                .cwarn *>$57
6332							                .here
6333							                .endblock

6335	.ab87						codePage0:
6336							                .logical tubeHostAddr
6337	.ab87	0400					copyLanguage:
6338	.ab87	0400	4c c1 04	jmp $04c1	                jmp LAC30

6340	.ab8a	0403					copyEscapeStatus:
6341	.ab8a	0403	4c 7c 06	jmp $067c	                jmp LADDA

6343							; Tube transfer/claim/release
6344	.ab8d	0406					entryPoint:
6345	.ab8d	0406	c9 80		cmp #$80	                cmp #$80
6346	.ab8f	0408	90 29		bcc $0433	                bcc dataTransfer
6347	.ab91	040a	c9 c0		cmp #$c0	                cmp #$C0
6348	.ab93	040c	b0 18		bcs $0426	                bcs claim
6349	.ab95	040e	09 40		ora #$40	                ora #$40
6350	.ab97	0410	c5 15		cmp $15		                cmp $15
6351	.ab99	0412	d0 1e		bne $0432	                bne done
6352	.ab9b	0414					release:
6353	.ab9b	0414	08		php		                php
6354	.ab9c	0415	78		sei		                sei
6355	.ab9d	0416	a9 05		lda #$05	                lda #$05
6356	.ab9f	0418	20 73 06	jsr $0673	                jsr sendR4
6357	.aba2	041b	20 71 06	jsr $0671	                jsr sendR4TubeClaimantID
6358	.aba5	041e	28		plp		                plp
6359	.aba6	041f					resetTubeClaim:
6360	.aba6	041f	a9 80		lda #$80	                lda #$80
6361	.aba8	0421	85 15		sta $15		                sta tubeClaimantID
6362	.abaa	0423	85 14		sta $14		                sta tubeNotClaimed
6363	.abac	0425	60		rts		                rts

6365	.abad	0426					claim:
6366	.abad	0426	06 14		asl $14		                asl tubeNotClaimed    ;test if Tube free
6367	.abaf	0428	b0 06		bcs $0430	                bcs claim2         ;taken if Tube free - with C=1 and
6368							                                   ;tube marked as claimed
6369	.abb1	042a	c5 15		cmp $15		                cmp tubeClaimantID
6370	.abb3	042c	f0 04		beq $0432	                beq done       ;taken with C=1 if already claimed
6371	.abb5	042e	18		clc		                clc            ;signal claim failure
6372	.abb6	042f	60		rts		                rts

6374	.abb7	0430					claim2:
6375	.abb7	0430	85 15		sta $15		                sta tubeClaimantID ; store claimant ID
6376	.abb9	0432					done:
6377	.abb9	0432	60		rts		                rts

6379	.abba	0433					dataTransfer:
6380	.abba	0433	08		php		                php
6381	.abbb	0434	78		sei		                sei
6382	.abbc	0435	84 13		sty $13		                sty tubeTransferAddr+1
6383	.abbe	0437	86 12		stx $12		                stx tubeTransferAddr+0
6384	.abc0	0439	20 73 06	jsr $0673	                jsr sendR4      ;send reason code to interrupt copro
6385	.abc3	043c	aa		tax		                tax             ;save reason code
6386	.abc4	043d	a0 03		ldy #$03	                ldy #$03        ;will send 4 bytes
6387	.abc6	043f	20 71 06	jsr $0671	                jsr sendR4TubeClaimantID ;send Tube claimant ID
6388	.abc9	0442					-
6389	.abc9	0442	b1 12		lda ($12),y	                lda (tubeTransferAddr),y
6390	.abcb	0444	20 73 06	jsr $0673	                jsr sendR4
6391	.abce	0447	88		dey		                dey
6392	.abcf	0448	10 f8		bpl $0442	                bpl -

6394							                ; disable R3 FIFO, disable R3 NMI
6395	.abd1	044a	a0 18		ldy #$18	                ldy #tube.status1.V|tube.status1.M
6396	.abd3	044c	8c e0 fe	sty $fee0	                sty tube.status1

6398							                ; disable/enable other per-transfer type flags as
6399							                ; appropriate.
6400	.abd6	044f	bd 18 05	lda $0518,x	                lda dataTransferFlags,x
6401	.abd9	0452	8d e0 fe	sta $fee0	                sta tube.status1 ;STPVMJIQ

6403	.abdc	0455	4a		lsr a		                lsr a           ;0STPVMJI Q
6404	.abdd	0456	4a		lsr a		                lsr a           ;00STPVMJ I
6405	.abde	0457	90 06		bcc $045f	                bcc +           ;branch taken if CoPro->I/O transfer

6407							                ; Read R3 twice to delay and empty FIFO
6408	.abe0	0459	2c e5 fe	bit $fee5	                bit tube.data3
6409	.abe3	045c	2c e5 fe	bit $fee5	                bit tube.data3
6410	.abe6	045f					+
6411	.abe6	045f	20 73 06	jsr $0673	                jsr sendR4      ;send value to synchronize
6412	.abe9	0462					-
6413	.abe9	0462	2c e6 fe	bit $fee6	                bit tube.status4
6414	.abec	0465	50 fb		bvc $0462	                bvc -
6415	.abee	0467	b0 0d		bcs $0476	                bcs LABE4       ;branch taken if I/O->CoPro transfer
6416	.abf0	0469	e0 04		cpx #$04	                cpx #$04        ;$04 = execute in CoPro
6417	.abf2	046b	d0 11		bne $047e	                bne LABEC       ;taken if not execute in CoPro
6418	.abf4	046d					LABDB:
6419	.abf4	046d	20 14 04	jsr $0414	                jsr release
6420	.abf7	0470	20 68 06	jsr $0668	                jsr sendR2A
6421	.abfa	0473	4c 32 00	jmp $0032	                jmp tubeHostIdleStartup

6423	.abfd	0476					LABE4:
6424	.abfd	0476	4a		lsr a		                lsr a            ;000STPVM J
6425	.abfe	0477	90 05		bcc $047e	                bcc LABEC        ;branch taken if J=0
6426	.ac00	0479	a0 88		ldy #$88	                ldy #tube.status1.S|tube.status1.M
6427	.ac02	047b	8c e0 fe	sty $fee0	                sty tube.status1
6428	.ac05	047e					LABEC:
6429	.ac05	047e	28		plp		                plp
6430	.ac06	047f	60		rts		                rts

6432	.ac07	0480					LABEE:
6433	.ac07	0480	ae 8d 02	ldx $028d	                ldx lastBREAKType            ;get last BREAK type
6434	.ac0a	0483	f0 e8		beq $046d	                beq LABDB   ;if soft break, release Tube, send $80 via
6435							                            ;R2, and enter idle loop.

6437							; The current language is not copied across the Tube on soft Break,
6438							; only on Power-On Break and Hard Break, or when entered explicitly
6439							; with OSBYTE 142.

6441	.ac0c	0485					enterNewLanguage: .proc
6442	.ac0c	0485	a9 ff		lda #$ff	                lda #$FF
6443	.ac0e	0487	20 06 04	jsr $0406	                jsr tubeHost.entryPoint ;claim with ID=$3f
6444	.ac11	048a	90 f9		bcc $0485	                bcc enterNewLanguage    ;repeat until claimed
6445	.ac13	048c	20 c8 04	jsr $04c8	                jsr getLanguageParasiteAddr ;sort out addresses

6455	.ac16	048f					transferPage:
6458	.ac16	048f	20 f1 f9	jsr $f9f1	                jsr relocateNextLanguageROMPage
6461	.ac19	0492	08		php		                php
6462	.ac1a	0493	78		sei		                sei

6464							                ; initiate I/O->CoPro 256 bytes, then transfer the
6465							                ; next 256 bytes of the language ROM.
6466	.ac1b	0494	a9 07		lda #$07	                lda #tubeReason256BytesHostToParasite
6467	.ac1d	0496	20 ba 04	jsr $04ba	                jsr doTube

6472	.ac20	0499	a0 00		ldy #$00	                ldy #$00
6474	.ac22	049b					transferPageLoop:
6475	.ac22	049b	b9 00 07	lda $0700,y	                lda tubeRelocationBuffer,y
6476	.ac25	049e	8d e5 fe	sta $fee5	                sta tube.data3
6477	.ac28	04a1	48		pha		                pha
6478	.ac29	04a2	68		pla		                pla
6488	.ac2a	04a3	c8		iny		                iny
6489	.ac2b	04a4	d0 f5		bne $049b	                bne transferPageLoop
6491	.ac2d	04a6	28		plp		                plp

6493							                ; advance to next dest page.
6494	.ac2e	04a7	e6 54		inc $54		                inc tubeLanguageParasiteAddr+1
6495	.ac30	04a9	d0 06		bne $04b1	                bne +
6496	.ac32	04ab	e6 55		inc $55		                inc tubeLanguageParasiteAddr+2
6497	.ac34	04ad	d0 02		bne $04b1	                bne +
6498	.ac36	04af	e6 56		inc $56		                inc tubeLanguageParasiteAddr+3
6499	.ac38	04b1					+

6504	.ac38	04b1	24 01		bit $01		                bit tubeLanguageHostAddr+1
6505	.ac3a	04b3	50 da		bvc $048f	                bvc transferPage ;branch taken if source page $c0 not
6506							                                 ;reached yet

6508							                ; copy done - execute language in parasite
6510	.ac3c	04b5	20 f9 fa	jsr $faf9	                jsr getLanguageParasiteAddrAndAssumeRelocatable
6514	.ac3f	04b8	a9 04		lda #$04	                lda #tubeReasonExecute

6516							                ; call Tube entry point with whatever reason code,
6517							                ; supplying language parasite address as the parasite
6518							                ; address.
6519	.ac41	04ba					doTube:
6520	.ac41	04ba	a0 00		ldy #$00	                ldy #>tubeLanguageParasiteAddr
6521	.ac43	04bc	a2 53		ldx #$53	                ldx #<tubeLanguageParasiteAddr
6522	.ac45	04be	4c 06 04	jmp $0406	                jmp tubeHost.entryPoint
6523							                .pend

6525	.ac48	04c1					LAC30:
6526	.ac48	04c1	58		cli		                cli
6527	.ac49	04c2	b0 c1		bcs $0485	                bcs enterNewLanguage
6528	.ac4b	04c4	d0 ba		bne $0480	                bne LABEE
6529	.ac4d	04c6	80 62		bra $052a	                bra LAC8F

6531	.ac4f	04c8					getLanguageParasiteAddr: .proc
6532	.ac4f	04c8	a9 80		lda #$80	                lda #$80
6533	.ac51	04ca	85 54		sta $54		                sta tubeLanguageParasiteAddr+1 ;$xxxx80xx
6534	.ac53	04cc	85 01		sta $01		                sta tubeLanguageHostAddr+1     ;$80xx
6535	.ac55	04ce	a9 20		lda #$20	                lda #$20
6536	.ac57	04d0	2d 06 80	and $8006	                and $8006  ;test parasite address flag
6537	.ac5a	04d3	a8		tay		                tay        ;Y=0 if $8000, Y=$20 if parasite address
6539	.ac5b	04d4	8c 53 00	sty $0053	                sty @w tubeLanguageParasiteAddr+0
6543	.ac5e	04d7	f0 19		beq $04f2	                beq LAC60       ;branch taken if good to go with A=0
6544							                                ;and Y=0

6546	.ac60	04d9	ae 07 80	ldx $8007	                ldx $8007       ;get copyright offset
6547							                ; skip copyright message
6548	.ac63	04dc					-
6549	.ac63	04dc	e8		inx		                inx
6550	.ac64	04dd	bd 00 80	lda $8000,x	                lda $8000,x
6551	.ac67	04e0	d0 fa		bne $04dc	                bne -

6553	.ac69	04e2	bd 01 80	lda $8001,x	                lda $8000+1,x
6554	.ac6c	04e5	85 53		sta $53		                sta tubeLanguageParasiteAddr+0
6555	.ac6e	04e7	bd 02 80	lda $8002,x	                lda $8000+2,x
6556	.ac71	04ea	85 54		sta $54		                sta tubeLanguageParasiteAddr+1
6557	.ac73	04ec	bc 03 80	ldy $8003,x	                ldy $8000+3,x
6558	.ac76	04ef	bd 04 80	lda $8004,x	                lda $8000+4,x
6559	.ac79	04f2					LAC60:
6560							                ; Y = parasite address bits 16-23
6561							                ; A = parasite address bits 24-31
6563	.ac79	04f2	4c 19 fa	jmp $fa19	                jmp checkForTubeRelocationBitmap
6570							                .endproc
6571	.ac7c	04f5					page4End:
6572							                .here

6574	.ac7c						codePages12:
6575							                .logical tubeHostAddr+256

6577							; names of the indexes here come from app note 004
6578	.ac7c	0500					commandRoutines:
6580	>ac7c	0500	35 05				                .word doRDCH    ;RDCHNO = $00
6581	>ac7e	0502	89 05				                .word doCLI     ;CLINO = $02
6582	>ac80	0504	e0 05				                .word doSBYT    ;SBYTNO = $04
6583	>ac82	0506	f1 05				                .word doBYTE    ;BYTENO = $06
6584	>ac84	0508	0d 06				                .word doWORD    ;WORDNO = $08
6585	>ac86	050a	3c 06				                .word doRDLN    ;RDLNNO = $0a
6586	>ac88	050c	59 05				                .word doARGS     ;ARGSNO = $0c
6587	>ac8a	050e	2c 05				                .word doBGET     ;BGETNO = $0e
6588	>ac8c	0510	20 05				                .word doBPUT     ;BPUTNO = $10
6589	>ac8e	0512	3f 05				                .word doFIND     ;FINDNO = $12
6590	>ac90	0514	b4 05				                .word doFILE    ;FILENO = $14
6591	>ac92	0516	9b 05				                .word doGBPB     ;GBPBNO = $16

6593							                ; Tube data transfer flags
6594	.ac94	0518					dataTransferFlags:
6595							                ; 0 - CoPro->I/O bytes
6596							                ;
6597							                ; Enable: PIRQ from R3, PIRQ from R1
6598	>ac94	0518	86				                .byte tube.status1.S|tube.status1.J|tube.status1.I

6600							                ; 1 - I/O->CoPro bytes
6601							                ;
6602							                ; Enable: PNMI from R3
6603	>ac95	0519	88				                .byte tube.status1.S|tube.status1.M

6605							                ; 2 - CoPro->I/O words
6606							                ;
6607							                ; Enable: 2-byte R3, PIRQ from R2, PIRQ from R1
6608	>ac96	051a	96				                .byte tube.status1.S|tube.status1.V|tube.status1.J|tube.status1.I

6610							                ; 3 - I/O->CoPro words
6611							                ;
6612							                ; Enable: 2-byte R3, PNMI from R3
6613	>ac97	051b	98				                .byte tube.status1.S|tube.status1.V|tube.status1.M

6615							                ; 4 - Execute in CoPro
6616							                ;
6617							                ; Disable: 2-byte R3, PNMI from R3
6618	>ac98	051c	18				                .byte tube.status1.V|tube.status1.M

6620							                ; 5 - Reserved
6621							                ;
6622							                ; Disable: 2-byte R3, PNMI from R3
6623	>ac99	051d	18				                .byte tube.status1.V|tube.status1.M

6625							                ; 6 - CoPro->I/O 256 bytes
6626							                ;
6627							                ; Enable: PIRQ from R1
6628	>ac9a	051e	82				                .byte tube.status1.S|tube.status1.I

6630							                ; 7 - I/O->CoPro 256 bytes
6631							                ;
6632							                ; Disable: 2-byte R3, PNMI from R3
6633	>ac9b	051f	18				                .byte tube.status1.V|tube.status1.M

6635	.ac9c	0520					doBPUT:
6636	.ac9c	0520	20 a8 06	jsr $06a8	                jsr recvR2      ;Receive file handle
6637	.ac9f	0523	a8		tay		                tay             ;Y = file handle
6638	.aca0	0524	20 a8 06	jsr $06a8	                jsr recvR2      ;Receive byte
6639	.aca3	0527	20 d4 ff	jsr $ffd4	                jsr OSBPUT      ;Do OSBPUT
6640	.aca6	052a					LAC8F:
6641	.aca6	052a	80 63		bra $058f	                bra sendR27FThenGoIdle

6643	.aca8	052c					doBGET:
6644	.aca8	052c	20 a8 06	jsr $06a8	                jsr recvR2      ;Receive file handle
6645	.acab	052f	a8		tay		                tay             ;Y = file handle
6646	.acac	0530	20 d7 ff	jsr $ffd7	                jsr OSBGET      ;Do OSBGET
6647	.acaf	0533					LAC98:
6648	.acaf	0533	80 03		bra $0538	                bra sendR2CAThenGoIdle

6650	.acb1	0535					doRDCH:
6651	.acb1	0535	20 e0 ff	jsr $ffe0	                jsr OSRDCH      ;Do OSRDCH
6652	.acb4	0538					sendR2CAThenGoIdle:
6653	.acb4	0538	6a		ror a		                ror a           ;set A bit 7 as per carry
6654	.acb5	0539	20 68 06	jsr $0668	                jsr sendR2A     ;send via R2
6655	.acb8	053c	2a		rol a		                rol a           ;restore A
6656	.acb9	053d	80 52		bra $0591	                bra sendR2AThenGoIdle

6658	.acbb	053f					doFIND: .proc
6659	.acbb	053f	20 a8 06	jsr $06a8	                jsr recvR2            ;Receive reason code
6660	.acbe	0542	f0 0a		beq $054e	                beq close             ;taken if A=$00 - CLOSE#
6661	.acc0	0544	48		pha		                pha                   ;save reason code
6662	.acc1	0545	20 75 05	jsr $0575	                jsr recvR2String      ;receive file name
6663	.acc4	0548	68		pla		                pla                   ;restore reason code
6664	.acc5	0549	20 ce ff	jsr $ffce	                jsr OSFIND            ;call OSFIND
6665	.acc8	054c	80 43		bra $0591	                bra sendR2AThenGoIdle

6667	.acca	054e					close:
6668	.acca	054e	20 a8 06	jsr $06a8	                jsr recvR2      ;Receive file handle
6669	.accd	0551	a8		tay		                tay             ;Y = file handle
6670	.acce	0552	a9 00		lda #$00	                lda #$00        ;A = $00 - CLOSE#
6671	.acd0	0554	20 ce ff	jsr $ffce	                jsr OSFIND      ;call OSFIND
6672	.acd3	0557	80 36		bra $058f	                bra sendR27FThenGoIdle
6673							                .pend

6675							;-------------------------------------------------------------------------
6676							;
6677							; Handle a Tube OSARGS request.
6678							;
6679							; [Tube p24]
6680							;
6681	.acd5	0559					doARGS:
6682	.acd5	0559	20 a8 06	jsr $06a8	                jsr recvR2                   ;receive file handle
6683	.acd8	055c	a8		tay		                tay                          ;Y = file handle
6684	.acd9	055d	a2 04		ldx #$04	                ldx #$04
6685	.acdb	055f	20 9a 06	jsr $069a	                jsr recvR2N ;receive 4 bytes OSARGS data, + operation code
6686	.acde	0562	20 da ff	jsr $ffda	                jsr OSARGS  ;call OSARGS
6687	.ace1	0565	20 68 06	jsr $0668	                jsr sendR2A ;send OSARGS result

6689							                ; send 4 bytes OSARGS data
6690	.ace4	0568	a2 03		ldx #$03	                ldx #$03
6691	.ace6	056a					-
6693	.ace6	056a	bd 00 00	lda $0000,x	                lda @w $00,x
6697	.ace9	056d	20 68 06	jsr $0668	                jsr sendR2A
6698	.acec	0570	ca		dex		                dex
6699	.aced	0571	10 f7		bpl $056a	                bpl -

6701	.acef	0573	80 24		bra $0599	                bra goIdle_0

6703							;-------------------------------------------------------------------------
6704							;
6705							; Receive a CR-terminated string over the Tube via R2.
6706							;
6707							; exit:
6708							; YX = pointer to received string (here, always $0700)
6709							;
6710	.acf1	0575					recvR2String: .proc
6711	.acf1	0575	a2 00		ldx #$00	                ldx #$00
6712	.acf3	0577	a0 00		ldy #$00	                ldy #$00        ;index
6713	.acf5	0579					-
6714	.acf5	0579	20 a8 06	jsr $06a8	                jsr recvR2      ;get next string char
6715	.acf8	057c	99 00 07	sta $0700,y	                sta tubeStringBuffer,y     ;store in string buffer
6716	.acfb	057f	c8		iny		                iny
6717	.acfc	0580	f0 04		beq $0586	                beq +           ;taken if too many bytes received
6718	.acfe	0582	c9 0d		cmp #$0d	                cmp #$0D
6719	.ad00	0584	d0 f3		bne $0579	                bne -           ;taken if end of string data not reached
6720	.ad02	0586					+
6721	.ad02	0586	a0 07		ldy #$07	                ldy #>tubeStringBuffer
6723	.ad04	0588	60		rts		                rts
6724							                .pend

6726							;-------------------------------------------------------------------------
6727							;
6728							; Handle a Tube OSCLI request.
6729							;
6730							; [Tube p22]
6731							;
6732	.ad05	0589					doCLI:
6733	.ad05	0589	20 75 05	jsr $0575	                jsr recvR2String
6734	.ad08	058c	20 f7 ff	jsr $fff7	                jsr OSCLI
6735	.ad0b	058f					sendR27FThenGoIdle:
6736	.ad0b	058f	a9 7f		lda #$7f	                lda #$7F
6737	.ad0d	0591					sendR2AThenGoIdle:
6738	.ad0d	0591					-
6739	.ad0d	0591	2c e2 fe	bit $fee2	                bit tube.status2
6740	.ad10	0594	50 fb		bvc $0591	                bvc -
6741	.ad12	0596	8d e3 fe	sta $fee3	                sta tube.data2
6742	.ad15	0599					goIdle_0:
6743	.ad15	0599	80 53		bra $05ee	                bra goIdle_1

6745							;-------------------------------------------------------------------------
6746							;
6747							; Handle a Tube OSGBPB request.
6748							;
6749							; [Tube p25]
6750							;
6751	.ad17	059b					doGBPB:
6752	.ad17	059b	a2 0d		ldx #$0d	                ldx #size(OSGBPBParameterBlock)
6754	.ad19	059d	20 9a 06	jsr $069a	                jsr recvR2N     ;receive parameter block + reason code
6755	.ad1c	05a0	a0 00		ldy #$00	                ldy #>tubeOSGBPBParameterBlock
6756	.ad1e	05a2	20 d1 ff	jsr $ffd1	                jsr OSGBPB      ;call OSGBPB
6757	.ad21	05a5	48		pha		                pha             ;save OSGBPB A result

6759							                ; Send updated OSGBPB parameter block.
6760	.ad22	05a6	a2 0c		ldx #$0c	                ldx #size(OSGBPBParameterBlock)-1
6761	.ad24	05a8					-
6763	.ad24	05a8	bd 00 00	lda $0000,x	                lda @w tubeOSGBPBParameterBlock,x
6767	.ad27	05ab	20 68 06	jsr $0668	                jsr sendR2A
6768	.ad2a	05ae	ca		dex		                dex
6769	.ad2b	05af	10 f7		bpl $05a8	                bpl -
6770	.ad2d	05b1	68		pla		                pla                          ;restore OSGBPB A result
6771	.ad2e	05b2	80 84		bra $0538	                bra sendR2CAThenGoIdle       ;send OSGBPB full result

6773							;-------------------------------------------------------------------------
6774							;
6775							; Handle a Tube OSFILE request.
6776							;
6777							; [Tube p24]
6778							;
6779	.ad30	05b4					doFILE: .proc
6780							                ; receive non-name part of OSFILE parameter block
6781	.ad30	05b4	a2 10		ldx #$10	                ldx #size(OSFILEParameterBlock)-2
6782	.ad32	05b6					-
6783	.ad32	05b6	20 a8 06	jsr $06a8	                jsr recvR2
6785	.ad35	05b9	9d 01 00	sta $0001,x	                sta @w tubeOSFILEParameterBlock.addresses-1,x
6789	.ad38	05bc	ca		dex		                dex
6790	.ad39	05bd	d0 f7		bne $05b6	                bne -
6791	.ad3b	05bf	20 75 05	jsr $0575	                jsr recvR2String
6793	.ad3e	05c2	8e 00 00	stx $0000	                stx @w tubeOSFILEParameterBlock+0
6794	.ad41	05c5	8c 01 00	sty $0001	                sty @w tubeOSFILEParameterBlock+1
6799	.ad44	05c8	a0 00		ldy #$00	                ldy #>tubeOSFILEParameterBlock
6801	.ad46	05ca	20 a8 06	jsr $06a8	                jsr recvR2                   ;receive OSFILE reason code
6802	.ad49	05cd	20 dd ff	jsr $ffdd	                jsr OSFILE                   ;call OSFILE
6803	.ad4c	05d0	20 68 06	jsr $0668	                jsr sendR2A                  ;send OSFILE result

6805							                ; send non-name part of updated OSFILE parameter block
6806	.ad4f	05d3	a2 10		ldx #$10	                ldx #size(OSFILEParameterBlock)-2
6807	.ad51	05d5					-
6809	.ad51	05d5	bd 01 00	lda $0001,x	                lda @w tubeOSFILEParameterBlock.addresses-1,x
6813	.ad54	05d8	20 68 06	jsr $0668	                jsr sendR2A
6814	.ad57	05db	ca		dex		                dex
6815	.ad58	05dc	d0 f7		bne $05d5	                bne -
6816	.ad5a	05de	80 0e		bra $05ee	                bra goIdle_1
6817							                .pend

6819							;-------------------------------------------------------------------------
6820							;
6821							; Handle a Tube small (A<$80) OSBYTE.
6822							;
6823							; [Tube p22]
6824							;
6825	.ad5c	05e0					doSBYT:
6826	.ad5c	05e0	20 a4 06	jsr $06a4	                jsr recvR2XA    ;receive X and A arguments
6827	.ad5f	05e3	20 f4 ff	jsr $fff4	                jsr OSBYTE
6828	.ad62	05e6					sendR2X:
6829	.ad62	05e6	2c e2 fe	bit $fee2	                bit tube.status2
6830	.ad65	05e9	50 fb		bvc $05e6	                bvc sendR2X
6831	.ad67	05eb	8e e3 fe	stx $fee3	                stx tube.data2
6832	.ad6a	05ee					goIdle_1:
6833	.ad6a	05ee	4c 36 00	jmp $0036	                jmp tubeHostIdleLoop

6835							;-------------------------------------------------------------------------
6836							;
6837							; Handle a Tube non-small OSBYTE.
6838							;
6839							; [Tube p22]
6840	.ad6d	05f1					doBYTE:
6841	.ad6d	05f1	20 a4 06	jsr $06a4	                jsr recvR2XA                ;receive X and Y arguments
6842	.ad70	05f4	a8		tay		                tay                         ;Y = Y argument
6843	.ad71	05f5	20 a8 06	jsr $06a8	                jsr recvR2                  ;receive A argument
6844	.ad74	05f8	20 f4 ff	jsr $fff4	                jsr OSBYTE                  ;call OSBYTE
6845	.ad77	05fb	49 9d		eor #$9d	                eor #$9D                    ;was it Fast Tube BPUT?
6846	.ad79	05fd	f0 ef		beq $05ee	                beq goIdle_1      ;if it was, done.
6847	.ad7b	05ff	6a		ror a		                ror a
6848	.ad7c	0600	20 68 06	jsr $0668	                jsr sendR2A       ;send carry result
6849	.ad7f	0603					-
6850	.ad7f	0603	2c e2 fe	bit $fee2	                bit tube.status2
6851	.ad82	0606	50 fb		bvc $0603	                bvc -
6852	.ad84	0608	8c e3 fe	sty $fee3	                sty tube.data2               ;send Y result
6853	.ad87	060b	80 d9		bra $05e6	                bra sendR2X                  ;send X result

6855							;-------------------------------------------------------------------------
6856							;
6857							; Handle a Tube OSWORD request.
6858							;
6859							; [Tube p22]
6860							;
6861	.ad89	060d					doWORD:
6862	.ad89	060d	20 a8 06	jsr $06a8	                jsr recvR2
6863	.ad8c	0610	a8		tay		                tay
6864	.ad8d	0611	20 b1 06	jsr $06b1	                jsr LAE0F
6865	.ad90	0614	30 0a		bmi $0620	                bmi LAD7F
6866	.ad92	0616					LAD75:
6867	.ad92	0616	20 a8 06	jsr $06a8	                jsr recvR2
6868	.ad95	0619	9d 28 01	sta $0128,x	                sta tubeOSWORDBuffer,x
6869	.ad98	061c	ca		dex		                dex
6870	.ad99	061d	10 f7		bpl $0616	                bpl LAD75
6871	.ad9b	061f	98		tya		                tya
6872	.ad9c	0620					LAD7F:
6873	.ad9c	0620	a2 28		ldx #$28	                ldx #<tubeOSWORDBuffer
6874	.ad9e	0622	a0 01		ldy #$01	                ldy #>tubeOSWORDBuffer
6875	.ada0	0624	20 f1 ff	jsr $fff1	                jsr OSWORD
6876	.ada3	0627	20 b1 06	jsr $06b1	                jsr LAE0F
6877	.ada6	062a	30 c2		bmi $05ee	                bmi goIdle_1
6878	.ada8	062c					LAD8B:
6879	.ada8	062c	bc 28 01	ldy $0128,x	                ldy tubeOSWORDBuffer,x
6880	.adab	062f					LAD8E:
6881	.adab	062f	2c e2 fe	bit $fee2	                bit tube.status2
6882	.adae	0632	50 fb		bvc $062f	                bvc LAD8E
6883	.adb0	0634	8c e3 fe	sty $fee3	                sty tube.data2
6884	.adb3	0637	ca		dex		                dex
6885	.adb4	0638	10 f2		bpl $062c	                bpl LAD8B
6886	.adb6	063a					LAD99:
6887	.adb6	063a	80 b2		bra $05ee	                bra goIdle_1

6889							;-------------------------------------------------------------------------

6891	.adb8	063c					doRDLN:
6892	.adb8	063c	a2 04		ldx #$04	                ldx #$04
6893	.adba	063e					LAD9D:
6894	.adba	063e	20 a8 06	jsr $06a8	                jsr recvR2
6896	.adbd	0641	9d 00 00	sta $0000,x	                sta @w $00,x
6900	.adc0	0644	ca		dex		                dex
6901	.adc1	0645	10 f7		bpl $063e	                bpl LAD9D
6902	.adc3	0647	e8		inx		                inx
6903	.adc4	0648	8a		txa		                txa
6904	.adc5	0649	a8		tay		                tay
6905	.adc6	064a	20 f1 ff	jsr $fff1	                jsr OSWORD
6906	.adc9	064d	90 05		bcc $0654	                bcc LADB2
6907	.adcb	064f	a9 ff		lda #$ff	                lda #$FF
6908	.adcd	0651	4c 91 05	jmp $0591	                jmp sendR2AThenGoIdle

6910	.add0	0654					LADB2:
6911	.add0	0654	a2 00		ldx #$00	                ldx #$00
6912	.add2	0656	a9 7f		lda #$7f	                lda #$7F
6913	.add4	0658	20 68 06	jsr $0668	                jsr sendR2A
6914	.add7	065b					LADB9:
6915	.add7	065b	bd 00 07	lda $0700,x	                lda $0700,x
6916	.adda	065e	20 68 06	jsr $0668	                jsr sendR2A
6917	.addd	0661	e8		inx		                inx
6918	.adde	0662	c9 0d		cmp #$0d	                cmp #$0D
6919	.ade0	0664	d0 f5		bne $065b	                bne LADB9
6920	.ade2	0666	80 d2		bra $063a	                bra LAD99

6922	.ade4	0668					sendR2A:                          ;adc6/0661
6923	.ade4	0668	2c e2 fe	bit $fee2	                bit tube.status2
6924	.ade7	066b	50 fb		bvc $0668	                bvc sendR2A
6925	.ade9	066d	8d e3 fe	sta $fee3	                sta tube.data2
6926	.adec	0670	60		rts		                rts

6928	.aded	0671					sendR4TubeClaimantID:              ;adcf
6929	.aded	0671	a5 15		lda $15		                lda tubeClaimantID ;get Tube ID
6930	.adef	0673					sendR4:                          ;add1/066c
6931	.adef	0673	2c e6 fe	bit $fee6	                bit tube.status4 ;check R4 status
6932	.adf2	0676	50 fb		bvc $0673	                bvc sendR4       ;branch taken if FIFO full
6933	.adf4	0678	8d e7 fe	sta $fee7	                sta tube.data4   ;put byte in FIFO
6934	.adf7	067b	60		rts		                rts

6936	.adf8	067c					LADDA:
6937	.adf8	067c	a5 ff		lda $ff		                lda $FF
6938	.adfa	067e	38		sec		                sec
6939	.adfb	067f	6a		ror a		                ror a
6940	.adfc	0680	80 0f		bra $0691	                bra LADEF

6942	.adfe	0682					eventHandler:
6943	.adfe	0682	48		pha		                pha
6944	.adff	0683	a9 00		lda #$00	                lda #$00
6945	.ae01	0685	20 91 06	jsr $0691	                jsr LADEF
6946	.ae04	0688	98		tya		                tya
6947	.ae05	0689	20 91 06	jsr $0691	                jsr LADEF
6948	.ae08	068c	8a		txa		                txa
6949	.ae09	068d	20 91 06	jsr $0691	                jsr LADEF
6950	.ae0c	0690	68		pla		                pla
6951	.ae0d	0691					LADEF:
6952	.ae0d	0691	2c e0 fe	bit $fee0	                bit tube.status1
6953	.ae10	0694	50 fb		bvc $0691	                bvc LADEF
6954	.ae12	0696	8d e1 fe	sta $fee1	                sta tube.data1
6955	.ae15	0699	60		rts		                rts

6957							;-------------------------------------------------------------------------
6958							;
6959							; Receive multiple bytes via R2: some kind of parameter block,
6960							; followed by the reason code. Store the first N-1 received in zero
6961							; page, starting at $00.
6962							;
6963							; entry:
6964							;
6965							; X = number of bytes to receive, minus 1
6966							;
6967							; exit:
6968							;
6969							; ?$00, ?$01... = first N-1 bytes received
6970							;
6971							; A = final byte received
6972							;
6973							; X = 0
6974							;
6975	.ae16	069a					recvR2N:
6976	.ae16	069a	20 a8 06	jsr $06a8	                jsr recvR2
6977	.ae19	069d	95 ff		sta $ff,x	                sta $ff,x
6978	.ae1b	069f	ca		dex		                dex
6979	.ae1c	06a0	d0 f8		bne $069a	                bne recvR2N
6980	.ae1e	06a2	80 04		bra $06a8	                bra recvR2

6982							;-------------------------------------------------------------------------
6983							;
6984							; Receive 2 bytes via R2.
6985							;
6986							; exit:
6987							;
6988							; X = first byte received
6989							;
6990							; A = second byte received
6991							;
6992	.ae20	06a4					recvR2XA:
6993	.ae20	06a4	20 a8 06	jsr $06a8	                jsr recvR2
6994	.ae23	06a7	aa		tax		                tax

6996							;-------------------------------------------------------------------------
6997							;
6998							; Receive 1 byte via R2.
6999							;
7000							; exit:
7001							;
7002							; A = byte received
7003							;
7004	.ae24	06a8					recvR2:
7005	.ae24	06a8	2c e2 fe	bit $fee2	                bit tube.status2
7006	.ae27	06ab	10 fb		bpl $06a8	                bpl recvR2
7007	.ae29	06ad	ad e3 fe	lda $fee3	                lda tube.data2
7008	.ae2c	06b0	60		rts		                rts

7010							;-------------------------------------------------------------------------

7012	.ae2d	06b1					LAE0F:
7013	.ae2d	06b1	2c e2 fe	bit $fee2	                bit tube.status2
7014	.ae30	06b4	10 fb		bpl $06b1	                bpl LAE0F
7015	.ae32	06b6	ae e3 fe	ldx $fee3	                ldx tube.data2
7016	.ae35	06b9	ca		dex		                dex
7017	.ae36	06ba	60		rts		                rts

7019							;-------------------------------------------------------------------------

7027							                .here
7028							                .bend

7030							;-------------------------------------------------------------------------

7034							                .include "terminal_code.s65"

:14	;******  Processing file: src/terminal_code.s65

1							;-------------------------------------------------------------------------

3	.ae37						terminalServiceEntryPoint:
4	.ae37		08		php		                php
5	.ae38		5a		phy		                phy
6	.ae39		da		phx		                phx
7	.ae3a		48		pha		                pha
8	.ae3b		c9 04		cmp #$04	                cmp #romServiceCallUnrecognisedCommand
9	.ae3d		f0 0d		beq $ae4c	                beq handleUnrecognisedCommand
10	.ae3f		c9 07		cmp #$07	                cmp #romServiceCallUnrecognisedOSBYTE
11	.ae41		f0 25		beq $ae68	                beq handleUnrecognisedOSBYTE
12	.ae43		c9 2a		cmp #$2a	                cmp #romServiceCallLanguageChange
13	.ae45		f0 74		beq $aebb	                beq handleLanguageChange
14	.ae47						LAE29:
15	.ae47		68		pla		                pla
16	.ae48		fa		plx		                plx
17	.ae49		7a		ply		                ply
18	.ae4a		28		plp		                plp
19	.ae4b		60		rts		                rts

21	.ae4c						handleUnrecognisedCommand:
22	.ae4c		20 50 b8	jsr $b850	                jsr LB832
23	.ae4f		c9 0b		cmp #$0b	                cmp #$0B
24	.ae51		d0 f4		bne $ae47	                bne LAE29
25	.ae53		68		pla		                pla
26	.ae54		fa		plx		                plx
27	.ae55		a9 8e		lda #$8e	                lda #$8E
28	.ae57		20 f4 ff	jsr $fff4	                jsr OSBYTE
29	.ae5a						LAE3C:
30	.ae5a		a2 04		ldx #$04	                ldx #$04
31	.ae5c						LAE3E:
32	.ae5c		bd 29 02	lda $0229,x	                lda INSV-1,x
33	.ae5f		dd b0 ae	cmp $aeb0,x	                cmp LAE93-1,x
34	.ae62		d0 03		bne $ae67	                bne LAE49
35	.ae64		ca		dex		                dex
36	.ae65		d0 f5		bne $ae5c	                bne LAE3E
37	.ae67						LAE49:
38	.ae67		60		rts		                rts

40	.ae68						handleUnrecognisedOSBYTE:
41	.ae68		5a		phy		                phy
42	.ae69		7a		ply		                ply
43	.ae6a		d0 db		bne $ae47	                bne LAE29
44	.ae6c		a5 ef		lda $ef		                lda $EF
45	.ae6e		c9 60		cmp #$60	                cmp #$60
46	.ae70		d0 d5		bne $ae47	                bne LAE29

48							                ; handle OSBYTE $60
49	.ae72						osbyte60:
50	.ae72		68		pla		                pla
51	.ae73		5a		phy		                phy
52	.ae74		78		sei		                sei
53	.ae75		a5 f0		lda $f0		                lda $F0
54	.ae77		30 11		bmi $ae8a	                bmi LAE6C
55	.ae79		4a		lsr a		                lsr a
56	.ae7a		d0 08		bne $ae84	                bne LAE66
57	.ae7c		a9 11		lda #$11	                lda #$11
58	.ae7e		85 76		sta $76		                sta $76
59	.ae80		66 74		ror $74		                ror $74
60	.ae82		80 c3		bra $ae47	                bra LAE29

62	.ae84						LAE66:

64	.ae84		64 78		stz $78		                stz $78
65	.ae86		66 77		ror $77		                ror $77

67	.ae88						LAE6A:
68	.ae88		80 bd		bra $ae47	                bra LAE29

70	.ae8a						LAE6C:
71	.ae8a		4a		lsr a		                lsr a
72	.ae8b		90 2e		bcc $aebb	                bcc handleLanguageChange
73	.ae8d		64 75		stz $75		                stz $75
74	.ae8f		20 5a ae	jsr $ae5a	                jsr LAE3C
75	.ae92		f0 b3		beq $ae47	                beq LAE29
76	.ae94		a2 04		ldx #$04	                ldx #$04
77	.ae96						LAE78:
78	.ae96		bd 29 02	lda $0229,x	                lda INSV-1,x
79	.ae99		95 6f		sta $6f,x	                sta oldINSV-1,x
80	.ae9b		bd b0 ae	lda $aeb0,x	                lda LAE93-1,x
81	.ae9e		9d 29 02	sta $0229,x	                sta INSV-1,x
82	.aea1		ca		dex		                dex
83	.aea2		d0 f2		bne $ae96	                bne LAE78
84	.aea4		a2 06		ldx #$06	                ldx #$06
85	.aea6						LAE88:
86	.aea6		bd b4 ae	lda $aeb4,x	                lda LAE97-1,x
87	.aea9		9d dd 0d	sta $0ddd,x	                sta ExtendedVectorAddress(INSV)-1,x
88	.aeac		ca		dex		                dex
89	.aead		d0 f7		bne $aea6	                bne LAE88
90	.aeaf		80 d7		bra $ae88	                bra LAE6A

92	.aeb1						LAE93:
93	>aeb1		3f ff				                .word E_INSV
94	>aeb3		42 ff				                .word E_REMV
95	.aeb5						LAE97:
96	>aeb5		f2 ae				                .word LAED4
97	>aeb7		0f				                .byte terminalROM
98	>aeb8		31 af				                .word LAF13
99	>aeba		0f				                .byte terminalROM

101	.aebb						handleLanguageChange:
102	.aebb		78		sei		                sei
103	.aebc		20 5a ae	jsr $ae5a	                jsr LAE3C
104	.aebf		d0 c7		bne $ae88	                bne LAE6A
105	.aec1		a2 06		ldx #$06	                ldx #$06
106	.aec3						LAEA5:
107	.aec3		bd dd 0d	lda $0ddd,x	                lda ExtendedVectorAddress(INSV)-1,x;extendedVectorSpace+insvIndex*3-1,x
108	.aec6		dd b4 ae	cmp $aeb4,x	                cmp LAE97-1,x
109	.aec9		d0 bd		bne $ae88	                bne LAE6A
110	.aecb		ca		dex		                dex
111	.aecc		d0 f5		bne $aec3	                bne LAEA5
112	.aece		a2 04		ldx #$04	                ldx #$04
113	.aed0						LAEB2:
114	.aed0		b5 6f		lda $6f,x	                lda oldINSV-1,x
115	.aed2		9d 29 02	sta $0229,x	                sta INSV-1,x
116	.aed5		ca		dex		                dex
117	.aed6		d0 f8		bne $aed0	                bne LAEB2
118	.aed8		a9 e6		lda #$e6	                lda #$E6
119	.aeda		20 41 b8	jsr $b841	                jsr osbyteX00Y00
120	.aedd		a9 cb		lda #$cb	                lda #$CB
121	.aedf		a2 09		ldx #$09	                ldx #$09
122	.aee1		20 43 b8	jsr $b843	                jsr osbyteY00
123	.aee4		20 38 b1	jsr $b138	                jsr LB11A
124	.aee7		1a		inc a		                inc a
125	.aee8						LAECA:
126	.aee8		20 41 b8	jsr $b841	                jsr osbyteX00Y00
127	.aeeb		3a		dec a		                dec a
128	.aeec		c9 01		cmp #$01	                cmp #$01
129	.aeee		d0 f8		bne $aee8	                bne LAECA
130	.aef0		80 96		bra $ae88	                bra LAE6A

132	.aef2						LAED4:
133	.aef2		08		php		                php
134	.aef3		78		sei		                sei
135	.aef4		e0 01		cpx #$01	                cpx #$01
136	.aef6		d0 31		bne $af29	                bne LAF0B
137	.aef8		24 77		bit $77		                bit $77
138	.aefa		10 0e		bpl $af0a	                bpl LAEEC
139	.aefc		c9 13		cmp #$13	                cmp #$13
140	.aefe		f0 05		beq $af05	                beq LAEE7
141	.af00		c9 11		cmp #$11	                cmp #$11
142	.af02		d0 06		bne $af0a	                bne LAEEC
143	.af04		18		clc		                clc
144	.af05						LAEE7:
145	.af05		66 78		ror $78		                ror $78
146	.af07						LAEE9:
147	.af07		28		plp		                plp
148	.af08		18		clc		                clc
149	.af09		60		rts		                rts

151	.af0a						LAEEC:
152	.af0a		24 74		bit $74		                bit $74
153	.af0c		10 1b		bpl $af29	                bpl LAF0B
154	.af0e		48		pha		                pha
155	.af0f		38		sec		                sec
156	.af10		20 2d af	jsr $af2d	                jsr LAF0F
157	.af13		98		tya		                tya
158	.af14		d0 10		bne $af26	                bne LAF08
159	.af16		e0 20		cpx #$20	                cpx #$20
160	.af18		b0 0c		bcs $af26	                bcs LAF08
161	.af1a		a9 13		lda #$13	                lda #$13
162	.af1c		e0 10		cpx #$10	                cpx #$10
163	.af1e		90 04		bcc $af24	                bcc LAF06
164	.af20		c5 76		cmp $76		                cmp $76
165	.af22		f0 02		beq $af26	                beq LAF08
166	.af24						LAF06:
167	.af24		85 75		sta $75		                sta $75
168	.af26						LAF08:
169	.af26		68		pla		                pla
170	.af27		a2 01		ldx #$01	                ldx #$01
171	.af29						LAF0B:
172	.af29		28		plp		                plp
173	.af2a		6c 70 00	jmp ($0070)	                jmp ($0070)

175	.af2d						LAF0F:
176	.af2d		b8		clv		                clv
177	.af2e		6c 2e 02	jmp ($022e)	                jmp (CNPV)

179	.af31						LAF13:
180	.af31		08		php		                php
181	.af32		78		sei		                sei
182	.af33		e0 01		cpx #$01	                cpx #$01
183	.af35		d0 1e		bne $af55	                bne LAF37
184	.af37		24 74		bit $74		                bit $74
185	.af39		10 16		bpl $af51	                bpl LAF33
186	.af3b		18		clc		                clc
187	.af3c		20 2d af	jsr $af2d	                jsr LAF0F
188	.af3f		c0 00		cpy #$00	                cpy #$00
189	.af41		d0 0c		bne $af4f	                bne LAF31
190	.af43		e0 20		cpx #$20	                cpx #$20
191	.af45		b0 08		bcs $af4f	                bcs LAF31
192	.af47		a9 11		lda #$11	                lda #$11
193	.af49		c5 76		cmp $76		                cmp $76
194	.af4b		f0 02		beq $af4f	                beq LAF31
195	.af4d		85 75		sta $75		                sta $75
196	.af4f						LAF31:
197	.af4f		a2 01		ldx #$01	                ldx #$01
198	.af51						LAF33:
199	.af51		28		plp		                plp
200	.af52		6c 72 00	jmp ($0072)	                jmp ($0072)

202	.af55						LAF37:
203	.af55		e0 02		cpx #$02	                cpx #$02
204	.af57		d0 f8		bne $af51	                bne LAF33
205	.af59		a5 75		lda $75		                lda $75
206	.af5b		a8		tay		                tay
207	.af5c		f0 08		beq $af66	                beq LAF48
208	.af5e		70 a7		bvs $af07	                bvs LAEE9
209	.af60		64 75		stz $75		                stz $75
210	.af62		85 76		sta $76		                sta $76
211	.af64		80 a1		bra $af07	                bra LAEE9

213	.af66						LAF48:
214	.af66		a5 78		lda $78		                lda $78
215	.af68		10 e7		bpl $af51	                bpl LAF33
216	.af6a		28		plp		                plp
217	.af6b		38		sec		                sec
218	.af6c						LAF4E:
219	.af6c		60		rts		                rts

221							;-------------------------------------------------------------------------

223	.af6d						terminalBRKHandler:
224	.af6d		a9 da		lda #$da	                lda #$DA
225	.af6f		20 41 b8	jsr $b841	                jsr osbyteX00Y00             ;Set VDU queue length to 0
226	.af72		20 52 b6	jsr $b652	                jsr disableESCAPE
227	.af75		a0 00		ldy #$00	                ldy #$00
228	.af77		b1 fd		lda ($fd),y	                lda (errPtr),y
229	.af79		d0 06		bne $af81	                bne LAF63
230	.af7b		64 20		stz $20		                stz $20
231	.af7d		a9 16		lda #$16	                lda #$16
232	.af7f		85 6f		sta $6f		                sta $6F
233	.af81						LAF63:
234	.af81		a9 0d		lda #$0d	                lda #13
235	.af83						-
236	.af83		20 e3 ff	jsr $ffe3	                jsr OSASCI
237	.af86		c8		iny		                iny
238	.af87		b1 fd		lda ($fd),y	                lda (errPtr),y
239	.af89		d0 f8		bne $af83	                bne -
240	.af8b		20 e7 ff	jsr $ffe7	                jsr OSNEWL
241	.af8e		38		sec		                sec
242	.af8f		66 19		ror $19		                ror $19
243	.af91		a5 1a		lda $1a		                lda $1A
244	.af93		d0 7d		bne $b012	                bne LAFF4
245	.af95						terminalLanguageEntryPoint:
246	.af95		3a		dec a		                dec a
247	.af96		d0 d4		bne $af6c	                bne LAF4E
248	.af98		a9 01		lda #$01	                lda #$01
249	.af9a		85 6f		sta $6f		                sta $6F
250	.af9c						LAF7E:
251	.af9c		78		sei		                sei
252	.af9d		a2 fe		ldx #$fe	                ldx #$FE
253	.af9f		9a		txs		                txs
254	.afa0		a9 6d		lda #$6d	                lda #<terminalBRKHandler
255	.afa2		8d 02 02	sta $0202	                sta BRKV+0
256	.afa5		a9 af		lda #$af	                lda #>terminalBRKHandler
257	.afa7		8d 03 02	sta $0203	                sta BRKV+1
258	.afaa		a9 cf		lda #$cf	                lda #<terminalINDnHandler
259	.afac		8d 30 02	sta $0230	                sta IND1V+0
260	.afaf		a9 b7		lda #$b7	                lda #>terminalINDnHandler
261	.afb1		8d 31 02	sta $0231	                sta IND1V+1
262	.afb4		a9 cf		lda #$cf	                lda #<terminalINDnHandler
263	.afb6		8d 32 02	sta $0232	                sta IND2V+0
264	.afb9		a9 b7		lda #$b7	                lda #>terminalINDnHandler
265	.afbb		8d 33 02	sta $0233	                sta IND2V+1

267							                ; Clear zero page
268	.afbe		a2 6e		ldx #$6e	                ldx #$6E
269	.afc0						-
270	.afc0		74 00		stz $00,x	                stz $00,x
271	.afc2		ca		dex		                dex
272	.afc3		10 fb		bpl $afc0	                bpl -

274	.afc5		c6 21		dec $21		                dec $21
275	.afc7		c6 34		dec $34		                dec $34
276	.afc9		c6 36		dec $36		                dec $36
277	.afcb		58		cli		                cli
278	.afcc		a9 0b		lda #$0b	                lda #$0B
279	.afce		20 ae b6	jsr $b6ae	                jsr LB690
280	.afd1		a9 87		lda #$87	                lda #$87
281	.afd3		20 f4 ff	jsr $fff4	                jsr OSBYTE                   ;Read screen mode
282	.afd6		98		tya		                tya                          ;A = screen mode
283	.afd7		20 97 b5	jsr $b597	                jsr reinitDisplayMode
284	.afda		a0 ff		ldy #$ff	                ldy #$FF
285	.afdc						-
286	.afdc		c8		iny		                iny
287	.afdd		b9 ec af	lda $afec,y	                lda initOSBYTEAs,y
288	.afe0		f0 30		beq $b012	                beq LAFF4
289	.afe2		be ff af	ldx $afff,y	                ldx initOSBYTEXs,y
290	.afe5		5a		phy		                phy
291	.afe6		20 43 b8	jsr $b843	                jsr osbyteY00
292	.afe9		7a		ply		                ply
293	.afea		80 f0		bra $afdc	                bra -

295							;-------------------------------------------------------------------------

297	.afec						initOSBYTEAs:
298	>afec		cb				                .byte $CB ;OSBYTE 203 (&CB) Read/write RS423 input buffer [MasRef D.2-64]
299	>afed		60				                .byte $60 ;OSBYTE 96 (&60) ???
300	>afee		60				                .byte $60 ;OSBYTE 96 (&60) ???
301	>afef		60				                .byte $60 ;OSBYTE 96 (&60) ???
302	>aff0		0f				                .byte $0F ;OSBYTE 15 (&0F) Flush buffer [MasRef D.2-24]
303	>aff1		0f				                .byte $0F ;OSBYTE 15 (&0F) Flush buffer [MasRef D.2-24]
304	>aff2		dd				                .byte $dd ;OSBYTE 221 (&DD) Read/write interpretation of input values 192-207 [MasRef D.2-73]
305	>aff3		de				                .byte $de ;OSBYTE 222 (&DE) Read/write interpretation of input values 208-223 [MasRef D.2-73]
306	>aff4		df				                .byte $df ;OSBYTE 223 (&DF) Read/write interpretation of input values 224-239 [MasRef D.2-73]
307	>aff5		e0				                .byte $e0 ;OSBYTE 224 (&E0) Read/write interpretation of input values 240-255 [MasRef D.2-73]
308	>aff6		e1				                .byte $e1 ;OSBYTE 225 (&E1) Read/write soft key interpretation [MasRef D.2-74]
309	>aff7		e2				                .byte $E2 ;OSBYTE 226 (&E2) Read/write SHIFT+soft key interpretation [MasRef D.2-74]
310	>aff8		e3				                .byte $E3 ;OSBYTE 227 (&E3) Read/write CTRL+soft key interpretation [MasRef D.2-74]
311	>aff9		e4				                .byte $e4 ;OSBYTE 228 (&E4) Read/write SHIFT+CTRL+soft key interpretation [MasRef D.2-74]
312	>affa		e5				                .byte $e5 ;OSBYTE 229 (&E5) Read/write ESCAPE key status [MasRef D.2-75]
313	>affb		04				                .byte $04 ;OSBYTE 4 (&04) Enable/disable cursor editing [MasRef D.2-19]
314	>affc		7e				                .byte $7e ;OSBYTE 126 (&7E) Acknowledge escape condition [MasRef D.2-37]
315	>affd		e6				                .byte $e6 ;OSBYTE 230 (&E6) Read/write ESCAPE effects [MasRef D.2-75]
316	>affe		02				                .byte $02 ;OSBYTE 2 (&02) Specify input stream [MasRef D.2-18]

318	.afff						initOSBYTEXs:
319	>afff		00				                .byte $00
320	>b000		01				                .byte $01
321	>b001		03				                .byte $03
322	>b002		ff				                .byte $ff
323	>b003		01				                .byte $01
324	>b004		02				                .byte $02
325	>b005		c0				                .byte $c0
326	>b006		d0				                .byte $d0
327	>b007		e0				                .byte $e0
328	>b008		f0				                .byte $f0
329	>b009		01				                .byte $01
330	>b00a		90				                .byte $90
331	>b00b		a0				                .byte $a0
332	>b00c		a0				                .byte $a0
333	>b00d		01				                .byte $01
334	>b00e		00				                .byte $00
335	>b00f		00				                .byte $00
336	>b010		01				                .byte $01
337	>b011		02				                .byte $02

339							;-------------------------------------------------------------------------

341	.b012						LAFF4:
342	.b012		a2 fe		ldx #$fe	                ldx #$FE
343	.b014		9a		txs		                txs
344	.b015		38		sec		                sec
345	.b016		66 1a		ror $1a		                ror $1A
346	.b018		64 1d		stz $1d		                stz $1D
347	.b01a		20 22 b0	jsr $b022	                jsr LB004
348	.b01d		20 22 b0	jsr $b022	                jsr LB004
349	.b020		80 2c		bra $b04e	                bra LB030

351	.b022						LB004:
352	.b022		20 5f b0	jsr $b05f	                jsr LB041
353	.b025		a0 01		ldy #$01	                ldy #$01
354	.b027		91 1b		sta ($1b),y	                sta ($1B),y
355	.b029		c8		iny		                iny
356	.b02a		8a		txa		                txa
357	.b02b		91 1b		sta ($1b),y	                sta ($1B),y
358	.b02d		c8		iny		                iny
359	.b02e		98		tya		                tya
360	.b02f		91 1b		sta ($1b),y	                sta ($1B),y
361	.b031		0a		asl a		                asl a
362	.b032		92 1b		sta ($1b)	                sta ($1B)
363	.b034		60		rts		                rts

365	.b035						LB017:
366	.b035		08		php		                php
367	.b036		48		pha		                pha
368	.b037		da		phx		                phx
369	.b038		5a		phy		                phy
370	.b039		ba		tsx		                tsx
371	.b03a		e8		inx		                inx
372	.b03b		8a		txa		                txa
373	.b03c		49 ff		eor #$ff	                eor #$FF
374	.b03e		92 1b		sta ($1b)	                sta ($1B)
375	.b040		a8		tay		                tay
376	.b041						LB023:
377	.b041		68		pla		                pla
378	.b042		91 1b		sta ($1b),y	                sta ($1B),y
379	.b044		88		dey		                dey
380	.b045		d0 fa		bne $b041	                bne LB023
381	.b047		a9 20		lda #$20	                lda #$20
382	.b049		85 1e		sta $1e		                sta $1E
383	.b04b		20 5f b0	jsr $b05f	                jsr LB041
384	.b04e						LB030:
385	.b04e		b2 1b		lda ($1b)	                lda ($1B)
386	.b050		aa		tax		                tax
387	.b051		a0 00		ldy #$00	                ldy #$00
388	.b053						LB035:
389	.b053		c8		iny		                iny
390	.b054		b1 1b		lda ($1b),y	                lda ($1B),y
391	.b056		48		pha		                pha
392	.b057		ca		dex		                dex
393	.b058		d0 f9		bne $b053	                bne LB035
394	.b05a		7a		ply		                ply
395	.b05b		fa		plx		                plx
396	.b05c		68		pla		                pla
397	.b05d		28		plp		                plp
398	.b05e		60		rts		                rts

400	.b05f						LB041:
401	.b05f		a0 04		ldy #$04	                ldy #$04
402	.b061		84 1c		sty $1c		                sty $1C
403	.b063		a0 20		ldy #$20	                ldy #$20
404							                ; Is this an adress?
406	.b065		a2 6e		ldx #$6e	                ldx #$6e
410	.b067		a9 b6		lda #$b6	                lda #$B6
411	.b069		46 1d		lsr $1d		                lsr $1D
412	.b06b		b0 0c		bcs $b079	                bcs LB05B
413	.b06d		e6 1d		inc $1d		                inc $1D
414	.b06f		a0 04		ldy #$04	                ldy #$04
415	.b071		84 1c		sty $1c		                sty $1C
416	.b073		a0 00		ldy #$00	                ldy #$00
418	.b075		a2 7b		ldx #$7b	                ldx #$7b
422	.b077		a9 b0		lda #$b0	                lda #$B0
423	.b079						LB05B:
424	.b079		84 1b		sty $1b		                sty $1B
425	.b07b		60		rts		                rts

427	.b07c						LB05E:
428	.b07c		20 81 b0	jsr $b081	                jsr LB063
429	.b07f		80 fb		bra $b07c	                bra LB05E

431	.b081						LB063:
432	.b081		24 20		bit $20		                bit $20
433	.b083		10 05		bpl $b08a	                bpl LB06C
434	.b085		20 b4 b0	jsr $b0b4	                jsr LB096
435	.b088		90 17		bcc $b0a1	                bcc LB083
436	.b08a						LB06C:
437	.b08a		80 a9		bra $b035	                bra LB017

439	.b08c						LB06E:
440	.b08c		c9 0a		cmp #$0a	                cmp #$0A
441	.b08e		90 0f		bcc $b09f	                bcc LB081
442	.b090		a2 00		ldx #$00	                ldx #$00
443	.b092						LB074:
444	.b092		e8		inx		                inx
445	.b093		e9 0a		sbc #$0a	                sbc #$0A
446	.b095		c9 0a		cmp #$0a	                cmp #$0A
447	.b097		b0 f9		bcs $b092	                bcs LB074
448	.b099		48		pha		                pha
449	.b09a		8a		txa		                txa
450	.b09b		20 8c b0	jsr $b08c	                jsr LB06E
451	.b09e		68		pla		                pla
452	.b09f						LB081:
453	.b09f		09 30		ora #$30	                ora #$30
454	.b0a1						LB083:
455	.b0a1		48		pha		                pha
456	.b0a2		5a		phy		                phy
457	.b0a3		a8		tay		                tay
458	.b0a4		a9 8a		lda #$8a	                lda #$8A
459	.b0a6		a2 02		ldx #$02	                ldx #$02
460	.b0a8		20 f4 ff	jsr $fff4	                jsr OSBYTE
461	.b0ab		7a		ply		                ply
462	.b0ac		68		pla		                pla
463	.b0ad		90 1f		bcc $b0ce	                bcc LB0B0
464	.b0af		20 35 b0	jsr $b035	                jsr LB017
465	.b0b2		80 ed		bra $b0a1	                bra LB083

467	.b0b4						LB096:
468	.b0b4		a4 6f		ldy $6f		                ldy $6F
469	.b0b6		f0 17		beq $b0cf	                beq LB0B1
470	.b0b8		e6 6f		inc $6f		                inc $6F
471	.b0ba		b9 69 b1	lda $b169,y	                lda LB14C-1,y
472	.b0bd		10 0d		bpl $b0cc	                bpl LB0AE
473	.b0bf		64 6f		stz $6f		                stz $6F
474	.b0c1		48		pha		                pha
475	.b0c2		a9 d9		lda #$d9	                lda #$D9
476	.b0c4		20 41 b8	jsr $b841	                jsr osbyteX00Y00
477	.b0c7		68		pla		                pla
478	.b0c8		a0 18		ldy #$18	                ldy #$18
479	.b0ca		84 1f		sty $1f		                sty $1F
480	.b0cc						LB0AE:
481	.b0cc		0a		asl a		                asl a
482	.b0cd		4a		lsr a		                lsr a
483	.b0ce						LB0B0:
484	.b0ce		60		rts		                rts

486	.b0cf						LB0B1:
487	.b0cf		a9 81		lda #$81	                lda #$81
488	.b0d1		20 41 b8	jsr $b841	                jsr osbyteX00Y00
489	.b0d4		8a		txa		                txa
490	.b0d5		b0 f7		bcs $b0ce	                bcs LB0B0
491	.b0d7		10 f5		bpl $b0ce	                bpl LB0B0
492	.b0d9		c9 e0		cmp #$e0	                cmp #$E0
493	.b0db		b0 f1		bcs $b0ce	                bcs LB0B0
494	.b0dd		20 e2 b0	jsr $b0e2	                jsr LB0C4
495	.b0e0		38		sec		                sec
496	.b0e1						LB0C3:
497	.b0e1		60		rts		                rts

499	.b0e2						LB0C4:
500	.b0e2		c9 99		cmp #$99	                cmp #$99
501	.b0e4		f0 62		beq $b148	                beq LB12A
502	.b0e6		29 0f		and #$0f	                and #$0F
503	.b0e8		f0 1d		beq $b107	                beq LB0E9
504	.b0ea		c9 02		cmp #$02	                cmp #$02
505	.b0ec		90 1e		bcc $b10c	                bcc LB0EE
506	.b0ee		f0 f1		beq $b0e1	                beq LB0C3
507	.b0f0		c9 04		cmp #$04	                cmp #$04
508	.b0f2		90 40		bcc $b134	                bcc LB116
509	.b0f4		f0 42		beq $b138	                beq LB11A
510	.b0f6		c9 06		cmp #$06	                cmp #$06
511	.b0f8		90 2e		bcc $b128	                bcc LB10A
512	.b0fa		f0 17		beq $b113	                beq LB0F5
513	.b0fc		c9 08		cmp #$08	                cmp #$08
514	.b0fe		90 e1		bcc $b0e1	                bcc LB0C3
515	.b100		f0 3a		beq $b13c	                beq LB11E
516	.b102		c9 09		cmp #$09	                cmp #$09
517	.b104		f0 46		beq $b14c	                beq LB12E
518	.b106		60		rts		                rts

520	.b107						LB0E9:
521	.b107		a9 0c		lda #$0c	                lda #$0C
522	.b109						LB0EB:
523	.b109		4c ee ff	jmp $ffee	                jmp OSWRCH

525	.b10c						LB0EE:
526	.b10c		a9 16		lda #$16	                lda #$16
527	.b10e		85 6f		sta $6f		                sta $6F
528	.b110		64 20		stz $20		                stz $20
529	.b112		60		rts		                rts

531	.b113						LB0F5:
532	.b113		a2 10		ldx #$10	                ldx #$10
533	.b115		20 1f b1	jsr $b11f	                jsr LB101
534	.b118		29 10		and #$10	                and #$10
535	.b11a		d0 15		bne $b131	                bne LB113
536	.b11c						LB0FE:
537	.b11c		4c d4 b7	jmp $b7d4	                jmp LB7B6

539	.b11f						LB101:
540	.b11f		a9 ec		lda #$ec	                lda #$EC
541	.b121		a0 ff		ldy #$ff	                ldy #$FF
542	.b123		20 f4 ff	jsr $fff4	                jsr OSBYTE
543	.b126		8a		txa		                txa
544	.b127		60		rts		                rts

546	.b128						LB10A:
547	.b128		a2 40		ldx #$40	                ldx #$40
548	.b12a		20 1f b1	jsr $b11f	                jsr LB101
549	.b12d		29 40		and #$40	                and #$40
550	.b12f		f0 eb		beq $b11c	                beq LB0FE
551	.b131						LB113:
552	.b131		4c 00 b8	jmp $b800	                jmp LB7E2

554	.b134						LB116:
555	.b134		a9 02		lda #$02	                lda #$02
556	.b136		80 d1		bra $b109	                bra LB0EB

558	.b138						LB11A:
559	.b138		a9 03		lda #$03	                lda #$03
560	.b13a		80 cd		bra $b109	                bra LB0EB

562	.b13c						LB11E:
563	.b13c		a9 ff		lda #$ff	                lda #$FF
564	.b13e		45 21		eor $21		                eor $21
565	.b140		85 21		sta $21		                sta $21
566	.b142		85 20		sta $20		                sta $20
567	.b144		d0 d6		bne $b11c	                bne LB0FE
568	.b146		80 e9		bra $b131	                bra LB113

570	.b148						LB12A:
571	.b148		a2 0c		ldx #$0c	                ldx #$0C
572	.b14a		80 02		bra $b14e	                bra LB130

574	.b14c						LB12E:
575	.b14c		a2 af		ldx #$af	                ldx #$AF
576	.b14e						LB130:
577	.b14e		da		phx		                phx
578	.b14f		a2 60		ldx #$60	                ldx #$60
579	.b151		20 48 b8	jsr $b848	                jsr LB82A
580	.b154		fa		plx		                plx
581	.b155						LB137:
582	.b155		da		phx		                phx
583	.b156		a9 13		lda #$13	                lda #$13
584	.b158		20 f4 ff	jsr $fff4	                jsr OSBYTE
585	.b15b		fa		plx		                plx
586	.b15c		ca		dex		                dex
587	.b15d		d0 f6		bne $b155	                bne LB137
588	.b15f		a2 00		ldx #$00	                ldx #$00
589	.b161		20 48 b8	jsr $b848	                jsr LB82A
590	.b164						LB146:
591	.b164		20 b6 b1	jsr $b1b6	                jsr LB198
592	.b167		90 fb		bcc $b164	                bcc LB146
593	.b169		60		rts		                rts

595	.b16a						LB14C:
596	>b16a		1b				                .byte $1B
597	.b16b		5e 2a 4b	lsr $4b2a,x	                lsr $4B2A,x
598	.b16e		45 59		eor $59		                eor $59
599	.b170		39 7c 21	and $217c,y	                and $217C,y
600	.b173		7c 59 1b	jmp ($1b59,x)	                jmp ($1B59,x)

602	>b176		5c				                .byte $5C
603	>b177		54				                .byte $54
604	.b178		45 52		eor $52		                eor $52
605	.b17a		4d 49 4e	eor $4e49	                eor $4E49
606	.b17d		41 4c		eor ($4c,x)	                eor ($4C,x)
607	.b17f		0d 0a 3d	ora $3d0a	                ora $3D0A
608	>b182		1b				                .byte $1B
609							;BNE LB187        :\ B165= D0 20       P
610							;BVS LB11A        :\ B167= 70 B1       p1
611	>b183		d0				                .byte $D0
612	.b184						LB166:
613	.b184		20 8e b1	jsr $b18e	                jsr LB170
614	.b187		b0 59		bcs $b1e2	                bcs LB1C4
615	.b189		c9 1b		cmp #$1b	                cmp #$1B
616	.b18b		d0 f7		bne $b184	                bne LB166
617	.b18d		60		rts		                rts

619	.b18e						LB170:
620	.b18e		20 98 b1	jsr $b198	                jsr LB17A
621	.b191		c9 7f		cmp #$7f	                cmp #$7F
622	.b193		f0 f9		beq $b18e	                beq LB170
623	.b195		c9 20		cmp #$20	                cmp #$20
624	.b197		60		rts		                rts

626	.b198						LB17A:
627	.b198		da		phx		                phx
628	.b199		5a		phy		                phy
629	.b19a						LB17C:
630	.b19a		20 a7 b1	jsr $b1a7	                jsr LB189
631	.b19d		b0 03		bcs $b1a2	                bcs LB184
632	.b19f		7a		ply		                ply
633	.b1a0		fa		plx		                plx
634	.b1a1		60		rts		                rts

636	.b1a2						LB184:
637	.b1a2		20 35 b0	jsr $b035	                jsr LB017
638	.b1a5						LB187:
639	.b1a5		80 f3		bra $b19a	                bra LB17C

641	.b1a7						LB189:
642	.b1a7		24 20		bit $20		                bit $20
643	.b1a9		30 03		bmi $b1ae	                bmi LB190
644	.b1ab		4c b4 b0	jmp $b0b4	                jmp LB096

646	.b1ae						LB190:
647	.b1ae		24 25		bit $25		                bit $25
648	.b1b0		30 4c		bmi $b1fe	                bmi LB1E0
649	.b1b2		24 23		bit $23		                bit $23
650	.b1b4		30 0b		bmi $b1c1	                bmi LB1A3
651	.b1b6						LB198:
652	.b1b6		a9 91		lda #$91	                lda #$91
653	.b1b8		a2 01		ldx #$01	                ldx #$01
654	.b1ba		20 f4 ff	jsr $fff4	                jsr OSBYTE
655	.b1bd		98		tya		                tya
656	.b1be		25 22		and $22		                and $22
657	.b1c0						LB1A2:
658	.b1c0		60		rts		                rts

660	.b1c1						LB1A3:
661	.b1c1		20 b6 b1	jsr $b1b6	                jsr LB198
662	.b1c4		b0 fa		bcs $b1c0	                bcs LB1A2
663	.b1c6		20 ee b1	jsr $b1ee	                jsr LB1D0
664	.b1c9		90 54		bcc $b21f	                bcc LB201
665	.b1cb		0a		asl a		                asl a
666	.b1cc		0a		asl a		                asl a
667	.b1cd		0a		asl a		                asl a
668	.b1ce		0a		asl a		                asl a
669	.b1cf		85 24		sta $24		                sta $24
670	.b1d1						LB1B3:
671	.b1d1		20 b6 b1	jsr $b1b6	                jsr LB198
672	.b1d4		90 05		bcc $b1db	                bcc LB1BD
673	.b1d6		20 35 b0	jsr $b035	                jsr LB017
674	.b1d9		80 f6		bra $b1d1	                bra LB1B3

676	.b1db						LB1BD:
677	.b1db		20 ee b1	jsr $b1ee	                jsr LB1D0
678	.b1de		90 f1		bcc $b1d1	                bcc LB1B3
679	.b1e0		05 24		ora $24		                ora $24
680	.b1e2						LB1C4:
681	.b1e2		18		clc		                clc
682	.b1e3		60		rts		                rts

684	.b1e4						LB1C6:
685	.b1e4		20 84 b1	jsr $b184	                jsr LB166
686	.b1e7		90 05		bcc $b1ee	                bcc LB1D0
687	.b1e9		fa		plx		                plx
688	.b1ea		fa		plx		                plx
689	.b1eb		4c a7 b3	jmp $b3a7	                jmp LB389

691	.b1ee						LB1D0:
692	.b1ee		c9 3a		cmp #$3a	                cmp #$3A
693	.b1f0		b0 03		bcs $b1f5	                bcs LB1D7
694	.b1f2		e9 2f		sbc #$2f	                sbc #$2F
695	.b1f4		60		rts		                rts

697	.b1f5						LB1D7:
698	.b1f5		e9 37		sbc #$37	                sbc #$37
699	.b1f7		c9 10		cmp #$10	                cmp #$10
700	.b1f9		b0 e7		bcs $b1e2	                bcs LB1C4
701	.b1fb		c9 0a		cmp #$0a	                cmp #$0A
702	.b1fd						LB1DF:
703	.b1fd		60		rts		                rts

705	.b1fe						LB1E0:
706	.b1fe		64 26		stz $26		                stz $26
707	.b200		20 b6 b1	jsr $b1b6	                jsr LB198
708	.b203		b0 f8		bcs $b1fd	                bcs LB1DF
709	.b205		c9 7f		cmp #$7f	                cmp #$7F
710	.b207		b0 f4		bcs $b1fd	                bcs LB1DF
711	.b209		c9 20		cmp #$20	                cmp #$20
712	.b20b		b0 14		bcs $b221	                bcs LB203
713	.b20d		24 27		bit $27		                bit $27
714	.b20f		30 0e		bmi $b21f	                bmi LB201
715	.b211		c9 07		cmp #$07	                cmp #$07
716	.b213		90 0a		bcc $b21f	                bcc LB201
717	.b215		f0 47		beq $b25e	                beq LB240
718	.b217		c9 0b		cmp #$0b	                cmp #$0B
719	.b219		90 43		bcc $b25e	                bcc LB240
720	.b21b		c9 0d		cmp #$0d	                cmp #$0D
721	.b21d		f0 3f		beq $b25e	                beq LB240
722	.b21f						LB201:
723	.b21f		38		sec		                sec
724	.b220		60		rts		                rts

726	.b221						LB203:
727	.b221		64 27		stz $27		                stz $27
728	.b223		c9 7c		cmp #$7c	                cmp #$7C
729	.b225		d0 35		bne $b25c	                bne LB23E
730	.b227						LB209:
731	.b227		20 b6 b1	jsr $b1b6	                jsr LB198
732	.b22a		90 05		bcc $b231	                bcc LB213
733	.b22c		20 35 b0	jsr $b035	                jsr LB017
734	.b22f		80 f6		bra $b227	                bra LB209

736	.b231						LB213:
737	.b231		c9 20		cmp #$20	                cmp #$20
738	.b233		90 2b		bcc $b260	                bcc LB242
739	.b235		c9 21		cmp #$21	                cmp #$21
740	.b237		d0 14		bne $b24d	                bne LB22F
741	.b239		a9 80		lda #$80	                lda #$80
742	.b23b		85 26		sta $26		                sta $26
743	.b23d						LB21F:
744	.b23d		20 b6 b1	jsr $b1b6	                jsr LB198
745	.b240		90 05		bcc $b247	                bcc LB229
746	.b242		20 35 b0	jsr $b035	                jsr LB017
747	.b245		80 f6		bra $b23d	                bra LB21F

749	.b247						LB229:
750	.b247		c9 20		cmp #$20	                cmp #$20
751	.b249		90 f2		bcc $b23d	                bcc LB21F
752	.b24b		80 d4		bra $b221	                bra LB203

754	.b24d						LB22F:
755	.b24d		c9 3f		cmp #$3f	                cmp #$3F
756	.b24f		d0 03		bne $b254	                bne LB236
757	.b251		a9 7f		lda #$7f	                lda #$7F
758	.b253		18		clc		                clc
759	.b254						LB236:
760	.b254		90 06		bcc $b25c	                bcc LB23E
761	.b256		c9 7c		cmp #$7c	                cmp #$7C
762	.b258		f0 02		beq $b25c	                beq LB23E
763	.b25a		29 9f		and #$9f	                and #$9F
764	.b25c						LB23E:
765	.b25c		05 26		ora $26		                ora $26
766	.b25e						LB240:
767	.b25e		18		clc		                clc
768	.b25f		60		rts		                rts

770	.b260						LB242:
771	.b260		38		sec		                sec
772	.b261		66 27		ror $27		                ror $27
773	.b263		38		sec		                sec
774	.b264		60		rts		                rts

776	.b265						LB247:
777	.b265		a9 00		lda #$00	                lda #$00
778	.b267		85 f2		sta $f2		                sta $F2
779	.b269		a9 05		lda #$05	                lda #$05
780	.b26b		85 f3		sta $f3		                sta $F3
781	.b26d		a0 00		ldy #$00	                ldy #$00
782	.b26f						LB251:
783	.b26f		20 98 b1	jsr $b198	                jsr LB17A
784	.b272		a6 1f		ldx $1f		                ldx $1F
785	.b274		f0 3e		beq $b2b4	                beq LB296
786	.b276		64 2b		stz $2b		                stz $2B
787	.b278		c9 1b		cmp #$1b	                cmp #$1B
788	.b27a		d0 04		bne $b280	                bne LB262
789	.b27c		a0 00		ldy #$00	                ldy #$00
790	.b27e		80 04		bra $b284	                bra LB266

792	.b280						LB262:
793	.b280		c9 0d		cmp #$0d	                cmp #$0D
794	.b282		d0 0d		bne $b291	                bne LB273
795	.b284						LB266:
796	.b284		a9 0d		lda #$0d	                lda #$0D
797	.b286		91 f2		sta ($f2),y	                sta ($F2),y
798	.b288		24 2b		bit $2b		                bit $2B
799	.b28a		30 03		bmi $b28f	                bmi LB271
800	.b28c		20 e3 ff	jsr $ffe3	                jsr OSASCI
801	.b28f						LB271:
802	.b28f		18		clc		                clc
803	.b290		60		rts		                rts

805	.b291						LB273:
806	.b291		c9 7f		cmp #$7f	                cmp #$7F
807	.b293		d0 07		bne $b29c	                bne LB27E
808	.b295		c0 00		cpy #$00	                cpy #$00
809	.b297		f0 d6		beq $b26f	                beq LB251
810	.b299		88		dey		                dey
811	.b29a		80 13		bra $b2af	                bra LB291

813	.b29c						LB27E:
814	.b29c		c9 7f		cmp #$7f	                cmp #$7F
815	.b29e		b0 cf		bcs $b26f	                bcs LB251
816	.b2a0		c9 20		cmp #$20	                cmp #$20
817	.b2a2		90 cb		bcc $b26f	                bcc LB251
818	.b2a4		c0 ff		cpy #$ff	                cpy #$FF
819	.b2a6		b0 c7		bcs $b26f	                bcs LB251
820	.b2a8		91 f2		sta ($f2),y	                sta ($F2),y
821	.b2aa		c8		iny		                iny
822	.b2ab		24 2b		bit $2b		                bit $2B
823	.b2ad		30 c0		bmi $b26f	                bmi LB251
824	.b2af						LB291:
825	.b2af		20 46 b7	jsr $b746	                jsr LB728
826	.b2b2		80 bb		bra $b26f	                bra LB251

828	.b2b4						LB296:
829	.b2b4		c9 1b		cmp #$1b	                cmp #$1B
830	.b2b6		d0 e4		bne $b29c	                bne LB27E
831	.b2b8		20 84 b1	jsr $b184	                jsr LB166
832	.b2bb		c9 5c		cmp #$5c	                cmp #$5C
833	.b2bd		f0 c5		beq $b284	                beq LB266
834	.b2bf		38		sec		                sec
835	.b2c0		60		rts		                rts

837	.b2c1						LB2A3:
838	.b2c1		a2 19		ldx #$19	                ldx #$19
839	.b2c3						LB2A5:
840	.b2c3		ca		dex		                dex
841	.b2c4		74 00		stz $00,x	                stz $00,x
842	.b2c6		d0 fb		bne $b2c3	                bne LB2A5
843	.b2c8						LB2AA:
844	.b2c8		64 3a		stz $3a		                stz $3A
845	.b2ca		64 3b		stz $3b		                stz $3B
846	.b2cc						LB2AE:
847	.b2cc		20 84 b1	jsr $b184	                jsr LB166
848	.b2cf		b0 2d		bcs $b2fe	                bcs LB2E0
849	.b2d1		20 cb b8	jsr $b8cb	                jsr LB8AD
850	.b2d4		90 2d		bcc $b303	                bcc LB2E5
851	.b2d6		48		pha		                pha
852	.b2d7		a5 3a		lda $3a		                lda $3A
853	.b2d9		95 02		sta $02,x	                sta $02,x
854	.b2db		a5 3b		lda $3b		                lda $3B
855	.b2dd		95 03		sta $03,x	                sta $03,x
856	.b2df		68		pla		                pla
857	.b2e0		c9 40		cmp #$40	                cmp #$40
858	.b2e2		b0 2f		bcs $b313	                bcs LB2F5
859	.b2e4		c9 30		cmp #$30	                cmp #$30
860	.b2e6		90 0d		bcc $b2f5	                bcc LB2D7
861	.b2e8		c9 3c		cmp #$3c	                cmp #$3C
862	.b2ea		b0 15		bcs $b301	                bcs LB2E3
863	.b2ec		e6 00		inc $00		                inc $00
864	.b2ee		e8		inx		                inx
865	.b2ef		e8		inx		                inx
866	.b2f0		e8		inx		                inx
867	.b2f1		e0 18		cpx #$18	                cpx #$18
868	.b2f3		90 d3		bcc $b2c8	                bcc LB2AA
869	.b2f5						LB2D7:
870	.b2f5		c9 40		cmp #$40	                cmp #$40
871	.b2f7		b0 1a		bcs $b313	                bcs LB2F5
872	.b2f9		20 84 b1	jsr $b184	                jsr LB166
873	.b2fc		90 f7		bcc $b2f5	                bcc LB2D7
874	.b2fe						LB2E0:
875	.b2fe		4c a7 b3	jmp $b3a7	                jmp LB389

877	.b301						LB2E3:
878	.b301		95 01		sta $01,x	                sta $01,x
879	.b303						LB2E5:
880	.b303		a5 00		lda $00		                lda $00
881	.b305		d0 c5		bne $b2cc	                bne LB2AE
882	.b307		e6 00		inc $00		                inc $00
883	.b309		80 c1		bra $b2cc	                bra LB2AE

885	.b30b						LB2ED:
886	.b30b		a9 01		lda #$01	                lda #$01
887	.b30d		85 02		sta $02		                sta $02
888	.b30f		64 01		stz $01		                stz $01
889	.b311		64 03		stz $03		                stz $03
890	.b313						LB2F5:
891	.b313		60		rts		                rts

893	.b314						LB2F6:
894	.b314		a9 03		lda #$03	                lda #$03
895	.b316		80 02		bra $b31a	                bra LB2FC

897	.b318						LB2FA:
898	.b318		a9 00		lda #$00	                lda #$00
899	.b31a						LB2FC:
900	.b31a		da		phx		                phx
901	.b31b		aa		tax		                tax
902	.b31c		b5 01		lda $01,x	                lda $01,x
903	.b31e		c9 01		cmp #$01	                cmp #$01
904	.b320		b5 03		lda $03,x	                lda $03,x
905	.b322		f0 01		beq $b325	                beq LB307
906	.b324		38		sec		                sec
907	.b325						LB307:
908	.b325		b5 02		lda $02,x	                lda $02,x
909	.b327		fa		plx		                plx
910	.b328		29 ff		and #$ff	                and #$FF
911	.b32a		60		rts		                rts

913	.b32b						LB30D:
914	.b32b		68		pla		                pla
915	.b32c		85 28		sta $28		                sta $28
916	.b32e		68		pla		                pla
917	.b32f		85 29		sta $29		                sta $29
918	.b331		a5 01		lda $01		                lda $01
919	.b333		d0 21		bne $b356	                bne LB338
920	.b335		a5 02		lda $02		                lda $02
921	.b337		05 03		ora $03		                ora $03
922	.b339		d0 02		bne $b33d	                bne LB31F
923	.b33b		e6 02		inc $02		                inc $02
924	.b33d						LB31F:
925	.b33d		a5 02		lda $02		                lda $02
926	.b33f		d0 02		bne $b343	                bne LB325
927	.b341		c6 03		dec $03		                dec $03
928	.b343						LB325:
929	.b343		c6 02		dec $02		                dec $02
930	.b345		d0 04		bne $b34b	                bne LB32D
931	.b347		a5 03		lda $03		                lda $03
932	.b349		f0 05		beq $b350	                beq LB332
933	.b34b						LB32D:
934	.b34b		20 50 b3	jsr $b350	                jsr LB332
935	.b34e		80 ed		bra $b33d	                bra LB31F

937	.b350						LB332:
938	.b350		a5 29		lda $29		                lda $29
939	.b352		48		pha		                pha
940	.b353		a5 28		lda $28		                lda $28
941	.b355		48		pha		                pha
942	.b356						LB338:
943	.b356		60		rts		                rts

945	.b357						LB339:
946	.b357		c6 1e		dec $1e		                dec $1E
947	.b359		d0 03		bne $b35e	                bne LB340
948	.b35b		20 35 b0	jsr $b035	                jsr LB017
949	.b35e						LB340:
950	.b35e		a5 6f		lda $6f		                lda $6F
951	.b360		d0 04		bne $b366	                bne LB348
952	.b362		a5 21		lda $21		                lda $21
953	.b364		85 20		sta $20		                sta $20
954	.b366						LB348:
955	.b366		60		rts		                rts

957	.b367						LB349:
958	.b367		20 6c b3	jsr $b36c	                jsr LB34E
959	.b36a		80 fb		bra $b367	                bra LB349

961	.b36c						LB34E:
962	.b36c		20 57 b3	jsr $b357	                jsr LB339
963	.b36f		20 8e b1	jsr $b18e	                jsr LB170
964	.b372						LB354:
965	.b372		c9 20		cmp #$20	                cmp #$20
966	.b374		90 09		bcc $b37f	                bcc LB361
967	.b376		4c 46 b7	jmp $b746	                jmp LB728

969	.b379						LB35B:
970	.b379		4c 8a b4	jmp $b48a	                jmp LB46C

972	.b37c						LB35E:
973	.b37c		4c b1 b4	jmp $b4b1	                jmp LB493

975	.b37f						LB361:
976	.b37f		48		pha		                pha
977	.b380		20 0b b3	jsr $b30b	                jsr LB2ED
978	.b383		68		pla		                pla
979	.b384		c9 07		cmp #$07	                cmp #$07
980	.b386		90 51		bcc $b3d9	                bcc LB3BB
981	.b388		f0 7d		beq $b407	                beq LB3E9
982	.b38a		c9 09		cmp #$09	                cmp #$09
983	.b38c		90 eb		bcc $b379	                bcc LB35B
984	.b38e		f0 ec		beq $b37c	                beq LB35E
985	.b390		c9 0b		cmp #$0b	                cmp #$0B
986	.b392		90 78		bcc $b40c	                bcc LB3EE
987	.b394		c9 0d		cmp #$0d	                cmp #$0D
988	.b396		f0 6f		beq $b407	                beq LB3E9
989	.b398		c9 1b		cmp #$1b	                cmp #$1B
990	.b39a		d0 3d		bne $b3d9	                bne LB3BB
991	.b39c						LB37E:
992	.b39c		a6 6f		ldx $6f		                ldx $6F
993	.b39e		d0 04		bne $b3a4	                bne LB386
994	.b3a0		24 2d		bit $2d		                bit $2D
995	.b3a2		30 35		bmi $b3d9	                bmi LB3BB
996	.b3a4						LB386:
997	.b3a4		20 84 b1	jsr $b184	                jsr LB166
998	.b3a7						LB389:
999	.b3a7		c9 1b		cmp #$1b	                cmp #$1B
1000	.b3a9		f0 f1		beq $b39c	                beq LB37E
1001	.b3ab		c9 25		cmp #$25	                cmp #$25
1002	.b3ad		f0 70		beq $b41f	                beq LB401
1003	.b3af		c9 28		cmp #$28	                cmp #$28
1004	.b3b1		f0 6f		beq $b422	                beq LB404
1005	.b3b3		c9 44		cmp #$44	                cmp #$44
1006	.b3b5		f0 55		beq $b40c	                beq LB3EE
1007	.b3b7		c9 45		cmp #$45	                cmp #$45
1008	.b3b9		f0 4e		beq $b409	                beq LB3EB
1009	.b3bb		c9 4d		cmp #$4d	                cmp #$4D
1010	.b3bd		f0 46		beq $b405	                beq LB3E7
1011	.b3bf		c9 50		cmp #$50	                cmp #$50
1012	.b3c1		f0 20		beq $b3e3	                beq LB3C5
1013	.b3c3		c9 5b		cmp #$5b	                cmp #$5B
1014	.b3c5		f0 5e		beq $b425	                beq LB407
1015	.b3c7		c9 5d		cmp #$5d	                cmp #$5D
1016	.b3c9		64 2b		stz $2b		                stz $2B
1017	.b3cb		f0 47		beq $b414	                beq LB3F6
1018	.b3cd		c9 5e		cmp #$5e	                cmp #$5E
1019	.b3cf		f0 40		beq $b411	                beq LB3F3
1020	.b3d1		c9 5f		cmp #$5f	                cmp #$5F
1021	.b3d3		f0 05		beq $b3da	                beq LB3BC
1022	.b3d5		c9 63		cmp #$63	                cmp #$63
1023	.b3d7		f0 43		beq $b41c	                beq LB3FE
1024	.b3d9						LB3BB:
1025	.b3d9		60		rts		                rts

1027	.b3da						LB3BC:
1028	.b3da		20 65 b2	jsr $b265	                jsr LB247
1029	.b3dd		b0 c8		bcs $b3a7	                bcs LB389
1030	.b3df						LB3C1:
1031	.b3df		38		sec		                sec
1032	.b3e0		6c 32 02	jmp ($0232)	                jmp (IND2V)

1034	.b3e3						LB3C5:
1035	.b3e3		38		sec		                sec
1036	.b3e4		66 2b		ror $2b		                ror $2B
1037	.b3e6		20 65 b2	jsr $b265	                jsr LB247
1038	.b3e9		b0 bc		bcs $b3a7	                bcs LB389
1039	.b3eb		a6 1f		ldx $1f		                ldx $1F
1040	.b3ed		64 1f		stz $1f		                stz $1F
1041	.b3ef		f0 11		beq $b402	                beq LB3E4
1042	.b3f1		a0 00		ldy #$00	                ldy #$00
1043	.b3f3		20 bc b8	jsr $b8bc	                jsr LB89E
1044	.b3f6		f0 e1		beq $b3d9	                beq LB3BB
1045	.b3f8		86 6f		stx $6f		                stx $6F
1046	.b3fa		c9 2a		cmp #$2a	                cmp #$2A
1047	.b3fc		f0 1b		beq $b419	                beq LB3FB
1048	.b3fe		c9 21		cmp #$21	                cmp #$21
1049	.b400		f0 dd		beq $b3df	                beq LB3C1
1050	.b402						LB3E4:
1051	.b402		4c 10 b5	jmp $b510	                jmp LB4F2

1053	.b405						LB3E7:
1054	.b405		a9 0b		lda #$0b	                lda #$0B
1055	.b407						LB3E9:
1056	.b407		80 05		bra $b40e	                bra LB3F0

1058	.b409						LB3EB:
1059	.b409		4c e7 ff	jmp $ffe7	                jmp OSNEWL

1061	.b40c						LB3EE:
1062	.b40c		a9 0a		lda #$0a	                lda #$0A
1063	.b40e						LB3F0:
1064	.b40e		4c ee ff	jmp $ffee	                jmp OSWRCH

1066	.b411						LB3F3:
1067	.b411		38		sec		                sec
1068	.b412		66 2b		ror $2b		                ror $2B
1069	.b414						LB3F6:
1070	.b414		20 65 b2	jsr $b265	                jsr LB247
1071	.b417		b0 8e		bcs $b3a7	                bcs LB389
1072	.b419						LB3FB:
1073	.b419		4c 3d b6	jmp $b63d	                jmp LB61F

1075	.b41c						LB3FE:
1076	.b41c		4c 9c af	jmp $af9c	                jmp LAF7E

1078	.b41f						LB401:
1079	.b41f		4c 5e b6	jmp $b65e	                jmp LB640

1081	.b422						LB404:
1082	.b422		4c a9 b6	jmp $b6a9	                jmp LB68B

1084	.b425						LB407:
1085	.b425		20 c1 b2	jsr $b2c1	                jsr LB2A3
1086	.b428		a2 0e		ldx #$0e	                ldx #$0E
1087	.b42a						LB40C:
1088	.b42a		dd 3b b4	cmp $b43b,x	                cmp LB41E-1,x
1089	.b42d		f0 07		beq $b436	                beq LB418
1090	.b42f		ca		dex		                dex
1091	.b430		d0 f8		bne $b42a	                bne LB40C
1092	.b432		38		sec		                sec
1093	.b433		6c 30 02	jmp ($0230)	                jmp (IND1V)

1095	.b436						LB418:
1096	.b436		8a		txa		                txa
1097	.b437		0a		asl a		                asl a
1098	.b438		aa		tax		                tax
1099	.b439		7c 48 b4	jmp ($b448,x)	                jmp (LB42C-2,x)
1100	.b43c						LB41E:
1101	>b43c		41 42				                .byte $41,$42
1102	>b43e		43				                .byte $43
1103	>b43f		44				                .byte $44
1104	>b440		48				                .byte $48
1105	>b441		4a				                .byte $4a
1106	>b442		4b				                .byte $4B
1107	>b443		53				                .byte $53
1108	>b444		58				                .byte $58
1109	>b445		68				                .byte $68
1110	>b446		6c				                .byte $6C
1111	>b447		6e				                .byte $6E
1112	>b448		66				                .byte $66
1113	>b449		63				                .byte $63
1114	.b44a						LB42C:
1115	>b44a		e3 b4				                .word LB4C5
1116	>b44c		a3 b4				                .word LB485
1117	>b44e		b1 b4				                .word LB493
1118	>b450		8a b4				                .word LB46C
1119	>b452		c5 b4				                .word LB4A7
1120	>b454		1b b6				                .word LB5FD
1121	>b456		2b b6				                .word LB60D
1122	>b458		3e b7				                .word LB720
1123	>b45a		ff b5				                .word LB5E1
1124	>b45c		cf b6				                .word LB6B1
1125	>b45e		cb b6				                .word LB6AD
1126	>b460		c7 b5				                .word LB5A9
1127	>b462		c5 b4				                .word LB4A7
1128	>b464		ef b4				                .word LB4D1
1129	.b466						LB448:
1130	.b466		20 6b b4	jsr $b46b	                jsr LB44D
1131	.b469		80 fb		bra $b466	                bra LB448
1132	.b46b						LB44D:
1133	.b46b		20 57 b3	jsr $b357	                jsr LB339
1134	.b46e		20 98 b1	jsr $b198	                jsr LB17A
1135	.b471		c9 1b		cmp #$1b	                cmp #$1B
1136	.b473		d0 0f		bne $b484	                bne LB466
1137	.b475		a9 da		lda #$da	                lda #$DA
1138	.b477		a0 ff		ldy #$ff	                ldy #$FF
1139	.b479		a2 00		ldx #$00	                ldx #$00
1140	.b47b		20 f4 ff	jsr $fff4	                jsr OSBYTE
1141	.b47e		a9 1b		lda #$1b	                lda #$1B
1142	.b480		e0 00		cpx #$00	                cpx #$00
1143	.b482		f0 03		beq $b487	                beq LB469
1144	.b484						LB466:
1145	.b484		4c ee ff	jmp $ffee	                jmp OSWRCH

1147	.b487						LB469:
1148	.b487		4c 9c b3	jmp $b39c	                jmp LB37E

1150	.b48a						LB46C:
1151	.b48a		a9 08		lda #$08	                lda #$08
1152	.b48c		85 2c		sta $2c		                sta $2C
1153	.b48e		20 2b b3	jsr $b32b	                jsr LB30D
1154	.b491		20 3f b8	jsr $b83f	                jsr LB821
1155	.b494		8a		txa		                txa
1156	.b495		d0 07		bne $b49e	                bne LB480
1157	.b497		24 34		bit $34		                bit $34
1158	.b499		10 65		bpl $b500	                bpl LB4E2
1159	.b49b						LB47D:
1160	.b49b		98		tya		                tya
1161	.b49c						LB47E:
1162	.b49c		f0 62		beq $b500	                beq LB4E2
1163	.b49e						LB480:
1164	.b49e		a5 2c		lda $2c		                lda $2C
1165	.b4a0						LB482:
1166	.b4a0		4c ee ff	jmp $ffee	                jmp OSWRCH

1168	.b4a3						LB485:
1169	.b4a3		a9 0a		lda #$0a	                lda #$0A
1170	.b4a5		85 2c		sta $2c		                sta $2C
1171	.b4a7		20 2b b3	jsr $b32b	                jsr LB30D
1172	.b4aa		20 3f b8	jsr $b83f	                jsr LB821
1173	.b4ad						LB48F:
1174	.b4ad		c4 39		cpy $39		                cpy zterm.numRowsMinusOne
1175	.b4af		80 eb		bra $b49c	                bra LB47E

1177	.b4b1						LB493:
1178	.b4b1		a9 09		lda #$09	                lda #$09
1179	.b4b3		85 2c		sta $2c		                sta $2C
1180	.b4b5		20 2b b3	jsr $b32b	                jsr LB30D
1181	.b4b8		20 3f b8	jsr $b83f	                jsr LB821
1182	.b4bb		e4 37		cpx $37		                cpx zterm.numColumnsMinusOne
1183	.b4bd						LB49F:
1184	.b4bd		90 df		bcc $b49e	                bcc LB480
1185	.b4bf		a5 34		lda $34		                lda $34
1186	.b4c1		f0 3d		beq $b500	                beq LB4E2
1187	.b4c3		80 e8		bra $b4ad	                bra LB48F

1189	.b4c5						LB4A7:
1190	.b4c5		20 18 b3	jsr $b318	                jsr LB2FA
1191	.b4c8		b0 36		bcs $b500	                bcs LB4E2
1192	.b4ca		a8		tay		                tay
1193	.b4cb		f0 01		beq $b4ce	                beq LB4B0
1194	.b4cd		88		dey		                dey
1195	.b4ce						LB4B0:
1196	.b4ce		20 14 b3	jsr $b314	                jsr LB2F6
1197	.b4d1		b0 2d		bcs $b500	                bcs LB4E2
1198	.b4d3		aa		tax		                tax
1199	.b4d4		f0 01		beq $b4d7	                beq LB4B9
1200	.b4d6		ca		dex		                dex
1201	.b4d7						LB4B9:
1202	.b4d7		a9 1f		lda #$1f	                lda #$1F
1203	.b4d9		20 ee ff	jsr $ffee	                jsr OSWRCH
1204	.b4dc		8a		txa		                txa
1205	.b4dd		20 ee ff	jsr $ffee	                jsr OSWRCH
1206	.b4e0		98		tya		                tya
1207	.b4e1		80 bd		bra $b4a0	                bra LB482

1209	.b4e3						LB4C5:
1210	.b4e3		a9 0b		lda #$0b	                lda #$0B
1211	.b4e5		85 2c		sta $2c		                sta $2C
1212	.b4e7		20 2b b3	jsr $b32b	                jsr LB30D
1213	.b4ea		20 3f b8	jsr $b83f	                jsr LB821
1214	.b4ed		80 ac		bra $b49b	                bra LB47D

1216	.b4ef						LB4D1:
1217	.b4ef		20 18 b3	jsr $b318	                jsr LB2FA
1218	.b4f2		d0 0c		bne $b500	                bne LB4E2
1219	.b4f4		a8		tay		                tay
1220	.b4f5						LB4D7:
1221	.b4f5		a9 1b		lda #$1b	                lda #$1B
1222	.b4f7						LB4D9:
1223	.b4f7		c8		iny		                iny
1224	.b4f8		20 a1 b0	jsr $b0a1	                jsr LB083
1225	.b4fb		b9 00 b5	lda $b500,y	                lda LB4E2,y
1226	.b4fe		d0 f7		bne $b4f7	                bne LB4D9
1227	.b500						LB4E2:
1228	.b500		60		rts		                rts

1230	>b501		5b				                .byte $5B
1231	>b502		3e 35 63			                .byte $3e,$35,$63
1232	>b505		00				                .byte $00
1233	>b506		5b				                .byte $5B
1234	>b507		30 6e				                .byte $30,$6e
1235	>b509		00				                .byte $00
1236	>b50a		5b				                .byte $5B
1237	>b50b		33				                .byte $33
1238	>b50c		6e 00 5b			                .byte $6e,$00,$5b
1239	>b50f		00				                .byte $00
1240	.b510						LB4F2:
1241	.b510		20 4e b8	jsr $b84e	                jsr LB830
1242	.b513		b0 50		bcs $b565	                bcs LB547
1243	.b515		c9 07		cmp #$07	                cmp #$07
1244	.b517		b0 1d		bcs $b536	                bcs LB518
1245	.b519		48		pha		                pha
1246	.b51a		20 50 b8	jsr $b850	                jsr LB832
1247	.b51d		64 2e		stz $2e		                stz $2E
1248	.b51f		c9 0a		cmp #$0a	                cmp #$0A
1249	.b521		f0 06		beq $b529	                beq LB50B
1250	.b523		c6 2e		dec $2e		                dec $2E
1251	.b525		c9 09		cmp #$09	                cmp #$09
1252	.b527		d0 3b		bne $b564	                bne LB546
1253	.b529						LB50B:
1254	.b529		7a		ply		                ply
1255	.b52a		c0 06		cpy #$06	                cpy #$06
1256	.b52c		d0 05		bne $b533	                bne LB515
1257	.b52e		a5 2e		lda $2e		                lda $2E
1258	.b530		85 34		sta $34		                sta $34
1259	.b532						LB514:
1260	.b532		60		rts		                rts

1262	.b533						LB515:
1263	.b533		4c fe b6	jmp $b6fe	                jmp LB6E0

1265	.b536						LB518:
1266	.b536		c9 08		cmp #$08	                cmp #$08
1267	.b538		f0 1e		beq $b558	                beq LB53A
1268	.b53a		b0 2c		bcs $b568	                bcs LB54A
1269	.b53c						LB51E:
1270	.b53c		20 bc b8	jsr $b8bc	                jsr LB89E
1271	.b53f		f0 f1		beq $b532	                beq LB514
1272	.b541		20 83 b5	jsr $b583	                jsr LB565
1273	.b544		20 bc b8	jsr $b8bc	                jsr LB89E
1274	.b547		f0 0a		beq $b553	                beq LB535
1275	.b549		c9 2c		cmp #$2c	                cmp #$2C
1276	.b54b		d0 18		bne $b565	                bne LB547
1277	.b54d		c8		iny		                iny
1278	.b54e		20 53 b5	jsr $b553	                jsr LB535
1279	.b551		80 e9		bra $b53c	                bra LB51E

1281	.b553						LB535:
1282	.b553		a5 3a		lda $3a		                lda $3A
1283	.b555		4c ee ff	jmp $ffee	                jmp OSWRCH

1285	.b558						LB53A:
1286	.b558		20 bc b8	jsr $b8bc	                jsr LB89E
1287	.b55b		20 83 b5	jsr $b583	                jsr LB565
1288	.b55e		b0 05		bcs $b565	                bcs LB547
1289	.b560		a5 3a		lda $3a		                lda $3A
1290	.b562		80 33		bra $b597	                bra reinitDisplayMode

1292	.b564						LB546:
1293	.b564		68		pla		                pla
1294	.b565						LB547:
1295	.b565		4c d1 b7	jmp $b7d1	                jmp LB7B3

1297	.b568						LB54A:
1298	.b568		a0 00		ldy #$00	                ldy #$00
1299	.b56a		c9 0b		cmp #$0b	                cmp #$0B
1300	.b56c		90 f7		bcc $b565	                bcc LB547
1301	.b56e		f0 0f		beq $b57f	                beq LB561
1302	.b570		c8		iny		                iny
1303	.b571		c9 0e		cmp #$0e	                cmp #$0E
1304	.b573		f0 0a		beq $b57f	                beq LB561
1305	.b575		b0 ee		bcs $b565	                bcs LB547
1306	.b577		a0 04		ldy #$04	                ldy #$04
1307	.b579		c9 0c		cmp #$0c	                cmp #$0C
1308	.b57b		f0 02		beq $b57f	                beq LB561
1309	.b57d		a0 05		ldy #$05	                ldy #$05
1310	.b57f						LB561:
1311	.b57f		98		tya		                tya
1312	.b580		4c 6d b6	jmp $b66d	                jmp LB64F

1314	.b583						LB565:
1315	.b583		20 c7 b8	jsr $b8c7	                jsr LB8A9
1316	.b586		b0 09		bcs $b591	                bcs LB573
1317	.b588						LB56A:
1318	.b588		c8		iny		                iny
1319	.b589		b1 f2		lda ($f2),y	                lda ($F2),y
1320	.b58b		20 cb b8	jsr $b8cb	                jsr LB8AD
1321	.b58e		90 f8		bcc $b588	                bcc LB56A
1322	.b590		18		clc		                clc
1323	.b591						LB573:
1324	.b591		60		rts		                rts

1326	.b592		20 18 b3	jsr $b318	                jsr LB2FA
1327	.b595		b0 ce		bcs $b565	                bcs LB547
1328	.b597						reinitDisplayMode:
1329	.b597		a8		tay		                tay              ;Y = screen mode
1330	.b598		29 7f		and #$7f	                and #$7F         ;mask off shadow bit (unnecessarily!)
1331	.b59a		c9 08		cmp #$08	                cmp #$08
1332	.b59c		b0 c7		bcs $b565	                bcs LB547                    ;branch taken if mode>=8
1333	.b59e		aa		tax		                tax                          ;X = mode number
1334	.b59f		bd bf b5	lda $b5bf,x	                lda screenDimensionsForMode,x                  ;
1335	.b5a2		4a		lsr a		                lsr a       ;A = width -1; C = height flag (1=32 rows,
1336							                            ;0=25 rows)
1337	.b5a3		a2 1f		ldx #$1f	                ldx #$1F                     ;assume 32 rows
1338	.b5a5		b0 02		bcs $b5a9	                bcs +                        ;taken if 32 rows
1339	.b5a7		a2 18		ldx #$18	                ldx #$18                     ;25 rows
1340	.b5a9						+
1341	.b5a9		86 39		stx $39		                stx zterm.numRowsMinusOne    ;store rows
1342	.b5ab		85 37		sta $37		                sta zterm.numColumnsMinusOne ;store columns
1343	.b5ad		1a		inc a		                inc a                        ;compute column count
1344	.b5ae		85 38		sta $38		                sta zterm.numColumns

1346							                ; re-select mode
1347	.b5b0		a9 16		lda #$16	                lda #22
1348	.b5b2		20 ee ff	jsr $ffee	                jsr OSWRCH
1349	.b5b5		98		tya		                tya
1350	.b5b6		20 ee ff	jsr $ffee	                jsr OSWRCH

1352	.b5b9		0a		asl a		                asl a
1353	.b5ba		c9 0e		cmp #$0e	                cmp #$0E                     ;C=1 if Mode 7
1354	.b5bc		66 30		ror $30		                ror $30                      ;?$30 bit 7 set if Mode 7
1355	.b5be		60		rts		                rts

1357	.b5bf						screenDimensionsForMode:
1358	>b5bf		9f				                .byte 79<<1|1 ;mode 0 - 80 columns, 32 rows
1359	>b5c0		4f				                .byte 39<<1|1 ;mode 1 - 40 columns, 32 rows
1360	>b5c1		27				                .byte 19<<1|1 ;mode 2 - 20 columns, 32 rows
1361	>b5c2		9e				                .byte 79<<1|0 ;mode 3 - 80 columns, 25 rows
1362	>b5c3		4f				                .byte 39<<1|1 ;mode 4 - 40 columns, 32 rows
1363	>b5c4		27				                .byte 19<<1|1 ;mode 5 - 20 columns, 32 rows
1364	>b5c5		4e				                .byte 39<<1|0 ;mode 6 - 40 columns, 25 rows
1365	>b5c6		4e				                .byte 39<<1|0 ;mode 7 - 40 columns, 25 rows

1367	.b5c7						LB5A9:
1368	.b5c7		20 18 b3	jsr $b318	                jsr LB2FA
1369	.b5ca		b0 58		bcs $b624	                bcs LB606
1370	.b5cc		c9 05		cmp #$05	                cmp #$05
1371	.b5ce		f0 22		beq $b5f2	                beq LB5D4
1372	.b5d0		c9 06		cmp #$06	                cmp #$06
1373	.b5d2						LB5B4:
1374	.b5d2		d0 50		bne $b624	                bne LB606
1375	.b5d4		20 3f b8	jsr $b83f	                jsr LB821
1376	.b5d7		e8		inx		                inx
1377	.b5d8		da		phx		                phx
1378	.b5d9		c8		iny		                iny
1379	.b5da		5a		phy		                phy
1380	.b5db		a0 0d		ldy #$0d	                ldy #$0D
1381	.b5dd		20 f5 b4	jsr $b4f5	                jsr LB4D7
1382	.b5e0		68		pla		                pla
1383	.b5e1		20 8c b0	jsr $b08c	                jsr LB06E
1384	.b5e4		a9 3b		lda #$3b	                lda #$3B
1385	.b5e6		20 a1 b0	jsr $b0a1	                jsr LB083
1386	.b5e9		68		pla		                pla
1387	.b5ea		20 8c b0	jsr $b08c	                jsr LB06E
1388	.b5ed		a9 52		lda #$52	                lda #$52
1389	.b5ef		4c a1 b0	jmp $b0a1	                jmp LB083

1391	.b5f2						LB5D4:
1392	.b5f2		a0 05		ldy #$05	                ldy #$05
1393	.b5f4		24 19		bit $19		                bit $19
1394	.b5f6		64 19		stz $19		                stz $19
1395	.b5f8		10 02		bpl $b5fc	                bpl LB5DE
1396	.b5fa		a0 09		ldy #$09	                ldy #$09
1397	.b5fc						LB5DE:
1398	.b5fc		4c f5 b4	jmp $b4f5	                jmp LB4D7

1400	.b5ff						LB5E1:
1401	.b5ff		20 3f b8	jsr $b83f	                jsr LB821
1402	.b602		da		phx		                phx
1403	.b603		5a		phy		                phy
1404	.b604		a9 20		lda #$20	                lda #$20
1405	.b606		85 2c		sta $2c		                sta $2C
1406	.b608		20 10 b6	jsr $b610	                jsr LB5F2
1407	.b60b		7a		ply		                ply
1408	.b60c		fa		plx		                plx
1409	.b60d		4c d7 b4	jmp $b4d7	                jmp LB4B9

1411	.b610						LB5F2:
1412	.b610		20 2b b3	jsr $b32b	                jsr LB30D
1413	.b613		20 3f b8	jsr $b83f	                jsr LB821
1414	.b616		e4 38		cpx $38		                cpx zterm.numColumns
1415	.b618		4c bd b4	jmp $b4bd	                jmp LB49F

1417	.b61b						LB5FD:
1418	.b61b		20 18 b3	jsr $b318	                jsr LB2FA
1419	.b61e		b0 04		bcs $b624	                bcs LB606
1420	.b620		c9 03		cmp #$03	                cmp #$03
1421	.b622		90 12		bcc $b636	                bcc LB618
1422	.b624						LB606:
1423	.b624		60		rts		                rts

1425	.b625						LB607:
1426	>b625		0f				                .byte $0F
1427	>b626		13				                .byte $13
1428	.b627		1a		inc a		                inc a
1429	.b628		00		brk #		                brk
1430	.b629		04 0b		tsb $0b		                tsb $0B
1431	.b62b						LB60D:
1432	.b62b		20 18 b3	jsr $b318	                jsr LB2FA
1433	.b62e		b0 f4		bcs $b624	                bcs LB606
1434	.b630		c9 03		cmp #$03	                cmp #$03
1435	.b632		b0 f0		bcs $b624	                bcs LB606
1436	.b634		69 03		adc #$03	                adc #$03
1437	.b636						LB618:
1438	.b636		aa		tax		                tax
1439	.b637		bd 25 b6	lda $b625,x	                lda LB607,x
1440	.b63a		4c 04 b8	jmp $b804	                jmp LB7E6

1442	.b63d						LB61F:
1443	.b63d		a5 20		lda $20		                lda $20
1444	.b63f		25 36		and $36		                and $36
1445	.b641		10 03		bpl $b646	                bpl LB628
1446	.b643		4c d1 b7	jmp $b7d1	                jmp LB7B3

1448	.b646						LB628:
1449	.b646		a9 e5		lda #$e5	                lda #$E5
1450	.b648		20 41 b8	jsr $b841	                jsr osbyteX00Y00
1451	.b64b		a2 00		ldx #$00	                ldx #$00
1452	.b64d		a0 05		ldy #$05	                ldy #$05
1453	.b64f		20 f7 ff	jsr $fff7	                jsr OSCLI
1454	.b652						disableESCAPE:
1455	.b652		a9 e5		lda #$e5	                lda #$E5
1456	.b654		a2 01		ldx #$01	                ldx #$01
1457	.b656		20 43 b8	jsr $b843	                jsr osbyteY00                ;disable ESCAPE key
1458	.b659		a9 7e		lda #$7e	                lda #$7E
1459	.b65b		4c f4 ff	jmp $fff4	                jmp OSBYTE                   ;acknowledge ESCAPE

1461	.b65e						LB640:
1462	.b65e		20 e4 b1	jsr $b1e4	                jsr LB1C6
1463	.b661		c9 07		cmp #$07	                cmp #$07
1464	.b663		90 08		bcc $b66d	                bcc LB64F
1465	.b665		d0 bd		bne $b624	                bne LB606
1466	.b667		20 84 b1	jsr $b184	                jsr LB166
1467	.b66a		4c 72 b3	jmp $b372	                jmp LB354

1469	.b66d						LB64F:
1470	.b66d		85 2a		sta $2a		                sta $2A
1471	.b66f		64 25		stz $25		                stz $25
1472	.b671		64 23		stz $23		                stz $23
1473	.b673		a2 fe		ldx #$fe	                ldx #$FE
1474	.b675		9a		txs		                txs
1475	.b676		e8		inx		                inx
1476	.b677		86 22		stx $22		                stx $22
1477	.b679		a5 2a		lda $2a		                lda $2A
1478	.b67b		c9 06		cmp #$06	                cmp #$06
1479	.b67d		90 04		bcc $b683	                bcc LB665
1480	.b67f		66 23		ror $23		                ror $23
1481	.b681		80 08		bra $b68b	                bra LB66D

1483	.b683						LB665:
1484	.b683		c9 04		cmp #$04	                cmp #$04
1485	.b685		90 12		bcc $b699	                bcc LB67B
1486	.b687		f0 06		beq $b68f	                beq LB671
1487	.b689		66 25		ror $25		                ror $25
1488	.b68b						LB66D:
1489	.b68b		64 27		stz $27		                stz $27
1490	.b68d		46 22		lsr $22		                lsr $22
1491	.b68f						LB671:
1492	.b68f		66 30		ror $30		                ror $30
1493	.b691		a9 21		lda #$21	                lda #$21
1494	.b693		20 04 b8	jsr $b804	                jsr LB7E6
1495	.b696		4c 66 b4	jmp $b466	                jmp LB448

1497	.b699						LB67B:
1498	.b699		64 30		stz $30		                stz $30
1499	.b69b		4a		lsr a		                lsr a
1500	.b69c		66 2d		ror $2d		                ror $2D
1501	.b69e		4a		lsr a		                lsr a
1502	.b69f		66 22		ror $22		                ror $22
1503	.b6a1		a9 1e		lda #$1e	                lda #$1E
1504	.b6a3		20 04 b8	jsr $b804	                jsr LB7E6
1505	.b6a6		4c 67 b3	jmp $b367	                jmp LB349

1507	.b6a9						LB68B:
1508	.b6a9		20 e4 b1	jsr $b1e4	                jsr LB1C6
1509	.b6ac		90 0b		bcc $b6b9	                bcc LB69B
1510	.b6ae						LB690:
1511	.b6ae		4a		lsr a		                lsr a
1512	.b6af		29 04		and #$04	                and #$04
1513	.b6b1		d0 07		bne $b6ba	                bne LB69C
1514	.b6b3		6a		ror a		                ror a
1515	.b6b4		4a		lsr a		                lsr a
1516	.b6b5		69 40		adc #$40	                adc #$40
1517	.b6b7		85 33		sta $33		                sta $33
1518	.b6b9						LB69B:
1519	.b6b9		60		rts		                rts

1521	.b6ba						LB69C:
1522	.b6ba		64 33		stz $33		                stz $33
1523	.b6bc		a2 60		ldx #$60	                ldx #$60
1524	.b6be		a0 23		ldy #$23	                ldy #$23
1525	.b6c0		90 04		bcc $b6c6	                bcc LB6A8
1526	.b6c2		da		phx		                phx
1527	.b6c3		5a		phy		                phy
1528	.b6c4		fa		plx		                plx
1529	.b6c5		7a		ply		                ply
1530	.b6c6						LB6A8:
1531	.b6c6		86 31		stx $31		                stx $31
1532	.b6c8		84 32		sty $32		                sty $32
1533	.b6ca		60		rts		                rts

1535	.b6cb						LB6AD:
1536	.b6cb		a9 00		lda #$00	                lda #$00
1537	.b6cd		80 02		bra $b6d1	                bra LB6B3

1539	.b6cf						LB6B1:
1540	.b6cf		a9 ff		lda #$ff	                lda #$FF
1541	.b6d1						LB6B3:
1542	.b6d1		85 2e		sta $2e		                sta $2E
1543	.b6d3		64 2f		stz $2f		                stz $2F
1544	.b6d5						LB6B7:
1545	.b6d5		a6 2f		ldx $2f		                ldx $2F
1546	.b6d7		e8		inx		                inx
1547	.b6d8		e8		inx		                inx
1548	.b6d9		e8		inx		                inx
1549	.b6da		e0 1b		cpx #$1b	                cpx #$1B
1550	.b6dc		f0 1f		beq $b6fd	                beq LB6DF
1551	.b6de		86 2f		stx $2f		                stx $2F
1552	.b6e0		20 e5 b6	jsr $b6e5	                jsr LB6C7
1553	.b6e3		80 f0		bra $b6d5	                bra LB6B7

1555	.b6e5						LB6C7:
1556	.b6e5		bc ff ff	ldy $ffff,x	                ldy $FFFF,x
1557	.b6e8		b5 00		lda $00,x	                lda $00,x
1558	.b6ea		d0 11		bne $b6fd	                bne LB6DF
1559	.b6ec		bd fe ff	lda $fffe,x	                lda LFFFE,x
1560	.b6ef		c9 3e		cmp #$3e	                cmp #$3E
1561	.b6f1		90 0a		bcc $b6fd	                bcc LB6DF
1562	.b6f3		f0 09		beq $b6fe	                beq LB6E0
1563	.b6f5		a5 2e		lda $2e		                lda $2E
1564	.b6f7		c0 07		cpy #$07	                cpy #$07
1565	.b6f9		d0 02		bne $b6fd	                bne LB6DF
1566	.b6fb		85 34		sta $34		                sta $34
1567	.b6fd						LB6DF:
1568	.b6fd		60		rts		                rts

1570	.b6fe						LB6E0:
1571	.b6fe		a5 2e		lda $2e		                lda $2E
1572	.b700		c0 01		cpy #$01	                cpy #$01
1573	.b702		b0 07		bcs $b70b	                bcs LB6ED
1574	.b704		1a		inc a		                inc a
1575	.b705		0a		asl a		                asl a
1576	.b706		aa		tax		                tax
1577	.b707		a9 04		lda #$04	                lda #$04
1578	.b709		80 09		bra $b714	                bra LB6F6

1580	.b70b						LB6ED:
1581	.b70b		d0 0a		bne $b717	                bne LB6F9
1582	.b70d		aa		tax		                tax
1583	.b70e		f0 02		beq $b712	                beq LB6F4
1584	.b710		a2 21		ldx #$21	                ldx #$21
1585	.b712						LB6F4:
1586	.b712		a9 cb		lda #$cb	                lda #$CB
1587	.b714						LB6F6:
1588	.b714		4c 43 b8	jmp $b843	                jmp osbyteY00

1590	.b717						LB6F9:
1591	.b717		c0 03		cpy #$03	                cpy #$03
1592	.b719		b0 0a		bcs $b725	                bcs LB707
1593	.b71b		24 20		bit $20		                bit $20
1594	.b71d		10 03		bpl $b722	                bpl LB704
1595	.b71f		a8		tay		                tay
1596	.b720		f0 db		beq $b6fd	                beq LB6DF
1597	.b722						LB704:
1598	.b722		85 36		sta $36		                sta $36
1599	.b724						LB706:
1600	.b724		60		rts		                rts

1602	.b725						LB707:
1603	.b725		d0 09		bne $b730	                bne LB712
1604	.b727		2a		rol a		                rol a
1605	.b728		a9 00		lda #$00	                lda #$00
1606	.b72a						LB70C:
1607	.b72a		2a		rol a		                rol a
1608	.b72b		aa		tax		                tax
1609	.b72c		a9 60		lda #$60	                lda #$60
1610	.b72e		80 e4		bra $b714	                bra LB6F6

1612	.b730						LB712:
1613	.b730		c0 05		cpy #$05	                cpy #$05
1614	.b732		b0 05		bcs $b739	                bcs LB71B
1615	.b734		2a		rol a		                rol a
1616	.b735		a9 01		lda #$01	                lda #$01
1617	.b737		80 f1		bra $b72a	                bra LB70C

1619	.b739						LB71B:
1620	.b739		d0 e9		bne $b724	                bne LB706
1621	.b73b		85 35		sta $35		                sta $35
1622	.b73d		60		rts		                rts

1624	.b73e						LB720:
1625	.b73e		20 2b b3	jsr $b32b	                jsr LB30D
1626	.b741		a9 23		lda #$23	                lda #$23
1627	.b743		4c 04 b8	jmp $b804	                jmp LB7E6

1629	.b746						LB728:
1630	.b746		5a		phy		                phy
1631	.b747		da		phx		                phx
1632	.b748		48		pha		                pha
1633	.b749		24 30		bit $30		                bit $30
1634	.b74b		30 1d		bmi $b76a	                bmi LB74C
1635	.b74d		c9 40		cmp #$40	                cmp #$40
1636	.b74f		90 06		bcc $b757	                bcc LB739
1637	.b751		a8		tay		                tay
1638	.b752		30 03		bmi $b757	                bmi LB739
1639	.b754		18		clc		                clc
1640	.b755		65 33		adc $33		                adc $33
1641	.b757						LB739:
1642	.b757		a8		tay		                tay
1643	.b758		c0 60		cpy #$60	                cpy #$60
1644	.b75a		d0 02		bne $b75e	                bne LB740
1645	.b75c		a9 bb		lda #$bb	                lda #$BB
1646	.b75e						LB740:
1647	.b75e		c0 bb		cpy #$bb	                cpy #$BB
1648	.b760		d0 02		bne $b764	                bne LB746
1649	.b762		a5 32		lda $32		                lda $32
1650	.b764						LB746:
1651	.b764		c0 23		cpy #$23	                cpy #$23
1652	.b766		d0 02		bne $b76a	                bne LB74C
1653	.b768		a5 31		lda $31		                lda $31
1654	.b76a						LB74C:
1655	.b76a		48		pha		                pha
1656	.b76b		20 3f b8	jsr $b83f	                jsr LB821
1657	.b76e		e4 38		cpx $38		                cpx zterm.numColumns
1658	.b770		f0 0a		beq $b77c	                beq LB75E
1659	.b772						LB754:
1660	.b772		68		pla		                pla
1661	.b773		20 ee ff	jsr $ffee	                jsr OSWRCH
1662	.b776		48		pha		                pha
1663	.b777						LB759:
1664	.b777		68		pla		                pla
1665	.b778		68		pla		                pla
1666	.b779		fa		plx		                plx
1667	.b77a		7a		ply		                ply
1668	.b77b		60		rts		                rts

1670	.b77c						LB75E:
1671	.b77c		24 34		bit $34		                bit $34
1672	.b77e		10 f7		bpl $b777	                bpl LB759
1673	.b780		24 35		bit $35		                bit $35
1674	.b782		10 ee		bpl $b772	                bpl LB754
1675	.b784		68		pla		                pla
1676	.b785		48		pha		                pha
1677	.b786		c9 20		cmp #$20	                cmp #$20
1678	.b788		90 e8		bcc $b772	                bcc LB754
1679	.b78a		d0 05		bne $b791	                bne LB773
1680	.b78c		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1681	.b78f		80 e6		bra $b777	                bra LB759

1683	.b791						LB773:
1684	.b791		a9 0d		lda #$0d	                lda #$0D
1685	.b793		20 ee ff	jsr $ffee	                jsr OSWRCH
1686	.b796		20 d7 b4	jsr $b4d7	                jsr LB4B9
1687	.b799		a0 00		ldy #$00	                ldy #$00
1688	.b79b						LB77D:
1689	.b79b		5a		phy		                phy
1690	.b79c		a9 08		lda #$08	                lda #$08
1691	.b79e		20 ee ff	jsr $ffee	                jsr OSWRCH
1692	.b7a1		a9 87		lda #$87	                lda #$87
1693	.b7a3		20 f4 ff	jsr $fff4	                jsr OSBYTE
1694	.b7a6		7a		ply		                ply
1695	.b7a7		8a		txa		                txa
1696	.b7a8		c9 20		cmp #$20	                cmp #$20
1697	.b7aa		f0 0d		beq $b7b9	                beq LB79B
1698	.b7ac		99 40 04	sta $0440,y	                sta $0440,y
1699	.b7af		c8		iny		                iny
1700	.b7b0		c4 38		cpy $38		                cpy zterm.numColumns
1701	.b7b2		d0 e7		bne $b79b	                bne LB77D
1702	.b7b4		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1703	.b7b7		80 b9		bra $b772	                bra LB754

1705	.b7b9						LB79B:
1706	.b7b9		5a		phy		                phy
1707	.b7ba		a9 00		lda #$00	                lda #$00
1708	.b7bc		20 04 b8	jsr $b804	                jsr LB7E6
1709	.b7bf		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1710	.b7c2		7a		ply		                ply
1711	.b7c3		c8		iny		                iny
1712	.b7c4						LB7A6:
1713	.b7c4		88		dey		                dey
1714	.b7c5		f0 ab		beq $b772	                beq LB754
1715	.b7c7		b9 3f 04	lda $043f,y	                lda $043F,y
1716	.b7ca		20 ee ff	jsr $ffee	                jsr OSWRCH
1717	.b7cd		80 f5		bra $b7c4	                bra LB7A6

1719	.b7cf						terminalINDnHandler:
1720	.b7cf		90 46		bcc $b817	                bcc LB7F9
1721	.b7d1						LB7B3:
1722	.b7d1		38		sec		                sec
1723	.b7d2		66 19		ror $19		                ror $19
1724	.b7d4						LB7B6:
1725	.b7d4		a2 32		ldx #$32	                ldx #$32
1726	.b7d6						LB7B8:
1727	.b7d6		a9 d5		lda #$d5	                lda #$D5
1728	.b7d8		20 43 b8	jsr $b843	                jsr osbyteY00
1729	.b7db		da		phx		                phx
1730	.b7dc		a2 01		ldx #$01	                ldx #$01
1731	.b7de		a9 d6		lda #$d6	                lda #$D6
1732	.b7e0		20 43 b8	jsr $b843	                jsr osbyteY00
1733	.b7e3		da		phx		                phx
1734	.b7e4		a9 ec		lda #$ec	                lda #$EC
1735	.b7e6		a2 14		ldx #$14	                ldx #$14
1736	.b7e8		20 43 b8	jsr $b843	                jsr osbyteY00
1737	.b7eb		a9 07		lda #$07	                lda #$07
1738	.b7ed		20 ee ff	jsr $ffee	                jsr OSWRCH
1739	.b7f0		a9 ec		lda #$ec	                lda #$EC
1740	.b7f2		20 43 b8	jsr $b843	                jsr osbyteY00
1741	.b7f5		fa		plx		                plx
1742	.b7f6		a9 d6		lda #$d6	                lda #$D6
1743	.b7f8		20 43 b8	jsr $b843	                jsr osbyteY00
1744	.b7fb		fa		plx		                plx
1745	.b7fc		a9 d5		lda #$d5	                lda #$D5
1746	.b7fe		80 43		bra $b843	                bra osbyteY00

1748	.b800						LB7E2:
1749	.b800		a2 8c		ldx #$8c	                ldx #$8C
1750	.b802		80 d2		bra $b7d6	                bra LB7B8

1752	.b804						LB7E6:
1753	.b804		a8		tay		                tay
1754	.b805		a2 0a		ldx #$0a	                ldx #$0A
1755	.b807		a9 97		lda #$97	                lda #$97
1756	.b809						LB7EB:
1757	.b809		0a		asl a		                asl a
1758	.b80a		b0 01		bcs $b80d	                bcs LB7EF
1759	.b80c		c8		iny		                iny
1760	.b80d						LB7EF:
1761	.b80d		4a		lsr a		                lsr a
1762	.b80e		20 ee ff	jsr $ffee	                jsr OSWRCH
1763	.b811		b9 18 b8	lda $b818,y	                lda LB7FA,y
1764	.b814		ca		dex		                dex
1765	.b815		d0 f2		bne $b809	                bne LB7EB
1766	.b817						LB7F9:
1767	.b817		60		rts		                rts

1769	.b818						LB7FA:
1770							                ; PHP
1771							                ; ORA $06
1772							                ; BRA LB807

1774							                ; TSB $05
1775							                ; BRK
1776							                ; BRK
1777							                ; ORA ($80,x)
1778							                ; PHP
1779							                ; TSB $06
1780							                ; BRA LB812

1782							                ; ORA $0A
1783							                ; BRA LB816

1785							                ; BRK
1786							                ; ORA $00
1787							                ; BRK
1788	>b818		08				                .byte $08
1789	>b819		05				                .byte $05
1790	>b81a		06				                .byte $06
1791	>b81b		80				                .byte $80
1792	>b81c		08				                .byte $08
1793	>b81d		04				                .byte $04
1794	>b81e		05				                .byte $05
1795	>b81f		00				                .byte $00
1796	>b820		00				                .byte $00
1797	>b821		01				                .byte $01
1798	>b822		80				                .byte $80
1799	>b823		08				                .byte $08
1800	>b824		04				                .byte $04
1801	>b825		06				                .byte $06
1802	>b826		80				                .byte $80
1803	>b827		08				                .byte $08
1804	>b828		05				                .byte $05
1805	>b829		0a				                .byte $0A
1806	>b82a		80				                .byte $80
1807	>b82b		08				                .byte $08
1808	>b82c		00				                .byte $00
1809	>b82d		05				                .byte $05
1810	>b82e		00				                .byte $00
1811	>b82f		00				                .byte $00

1813	.b830						LB812:
1814							;ORA (&80,x)      :\ B812= 01 80       ..
1815	>b830		01				                .byte $01
1816	>b831		80				                .byte $80
1817							;PHP              :\ B814= 08          .
1818	>b832		08				                .byte $08
1819							;BRK              :\ B815= 00          .
1820	>b833		00				                .byte $00
1821							;.LB816
1822							;ASL A            :\ B816= 0A          .
1823	>b834		0a				                .byte $0A
1824							;BRA LB829        :\ B817= 80 10       ..
1825	>b835		80				                .byte $80
1826	>b836		10				                .byte $10
1827							;ORA (&80,x)      :\ B819= 01 80       ..
1828	>b837		01				                .byte $01
1829	>b838		80				                .byte $80
1830							;BPL LB79D        :\ B81B= 10 80       ..
1831	>b839		10				                .byte $10
1832	>b83a		80				                .byte $80
1833	>b83b		07				                .byte $07
1834	>b83c		00				                .byte $00
1835	>b83d		03				                .byte $03
1836							;BRA LB7CB        :\ B820= 80 A9       .)
1837							; LDA &A2          :\ B822= A5 A2       %"
1838							; BRK              :\ B824= 00          .
1839	>b83e		80				                .byte $80
1840	.b83f						LB821:
1841	.b83f		a9 a5		lda #$a5	                lda #$A5
1842	.b841						osbyteX00Y00:
1843	.b841		a2 00		ldx #$00	                ldx #$00
1844	.b843						osbyteY00:
1845	.b843		a0 00		ldy #$00	                ldy #$00
1846	.b845						-
1847	.b845		4c f4 ff	jmp $fff4	                jmp OSBYTE

1849	.b848						LB82A:
1850	.b848		a9 9c		lda #$9c	                lda #$9C
1851	.b84a		a0 9f		ldy #$9f	                ldy #$9F
1852	.b84c		80 f7		bra $b845	                bra -

1854	.b84e						LB830:
1855	.b84e		a0 00		ldy #$00	                ldy #$00
1856	.b850						LB832:
1857	.b850		a2 ff		ldx #$ff	                ldx #$FF
1858	.b852		da		phx		                phx
1859	.b853						LB835:
1860	.b853		68		pla		                pla
1861	.b854		1a		inc a		                inc a
1862	.b855		48		pha		                pha
1863	.b856		5a		phy		                phy
1864	.b857		20 bc b8	jsr $b8bc	                jsr LB89E
1865	.b85a						LB83C:
1866	.b85a		c9 2e		cmp #$2e	                cmp #'.'
1867	.b85c		f0 18		beq $b876	                beq LB858
1868	.b85e		c9 40		cmp #$40	                cmp #'@'
1869	.b860		b0 02		bcs $b864	                bcs LB846
1870	.b862		a9 00		lda #$00	                lda #$00
1871	.b864						LB846:
1872	.b864		29 5f		and #$5f	                and #$5F
1873	.b866		e8		inx		                inx
1874	.b867		5d 89 b8	eor $b889,x	                eor LB86B,x
1875	.b86a		f0 05		beq $b871	                beq LB853
1876	.b86c		0a		asl a		                asl a
1877	.b86d		f0 07		beq $b876	                beq LB858
1878	.b86f		80 0a		bra $b87b	                bra LB85D

1880	.b871						LB853:
1881	.b871		c8		iny		                iny
1882	.b872		b1 f2		lda ($f2),y	                lda ($F2),y
1883	.b874		80 e4		bra $b85a	                bra LB83C

1885	.b876						LB858:
1886	.b876		c8		iny		                iny
1887	.b877		68		pla		                pla
1888	.b878		68		pla		                pla
1889	.b879		18		clc		                clc
1890	.b87a		60		rts		                rts

1892	.b87b						LB85D:
1893	.b87b		7a		ply		                ply
1894	.b87c						LB85E:
1895	.b87c		bd 89 b8	lda $b889,x	                lda LB86B,x
1896	.b87f		d0 03		bne $b884	                bne LB866
1897	.b881		38		sec		                sec
1898	.b882		68		pla		                pla
1899	.b883		60		rts		                rts

1901	.b884						LB866:
1902	.b884		30 cd		bmi $b853	                bmi LB835
1903	.b886		e8		inx		                inx
1904	.b887		80 f3		bra $b87c	                bra LB85E

1906	.b889						LB86B:
1907	>b889		43				                .byte $43
1908	>b88a		4b				                .byte $4B
1909	>b88b		cc 4d 43			                .byte $cc,$4d,$43
1910	>b88e		cc 50 52			                .byte $cc,$50,$52
1911	>b891		4f				                .byte $4F
1912	>b892		d4				                .byte $D4
1913	>b893		52 46				                .byte $52,$46
1914	>b895		c3				                .byte $C3
1915	>b896		54				                .byte $54
1916	>b897		46 c3				                .byte $46,$c3
1917	>b899		57				                .byte $57
1918	>b89a		57				                .byte $57
1919	>b89b		cd 41 57			                .byte $cd,$41,$57
1920	>b89e		cd 56 44			                .byte $cd,$56,$44
1921	>b8a1		d5 4d				                .byte $d5,$4d
1922	>b8a3		4f				                .byte $4F
1923	>b8a4		44				                .byte $44
1924	>b8a5		c5 4f				                .byte $c5,$4f
1925	>b8a7		ce 4f 46			                .byte $ce,$4f,$46
1926	>b8aa		c6 54				                .byte $c6,$54
1927	>b8ac		45 52				                .byte $45,$52
1928	>b8ae		4d 49 4e			                .byte $4d,$49,$4e
1929	>b8b1		41 cc				                .byte $41,$cc
1930	>b8b3		42				                .byte $42
1931	>b8b4		42				                .byte $42
1932	>b8b5		c3				                .byte $C3
1933	>b8b6		47				                .byte $47
1934	>b8b7		d3				                .byte $D3
1935	>b8b8		54				                .byte $54
1936	>b8b9		54				                .byte $54
1937	>b8ba		d9				                .byte $D9
1938	>b8bb		00				                .byte $00
1939	.b8bc						LB89E:
1940	.b8bc		88		dey		                dey
1941	.b8bd						LB89F:
1942	.b8bd		c8		iny		                iny
1943	.b8be		b1 f2		lda ($f2),y	                lda ($F2),y
1944	.b8c0		c9 20		cmp #$20	                cmp #$20
1945	.b8c2		f0 f9		beq $b8bd	                beq LB89F
1946	.b8c4		c9 0d		cmp #$0d	                cmp #$0D
1947	.b8c6		60		rts		                rts

1949	.b8c7						LB8A9:
1950	.b8c7		64 3a		stz $3a		                stz $3A
1951	.b8c9		64 3b		stz $3b		                stz $3B
1952	.b8cb						LB8AD:
1953	.b8cb		c9 30		cmp #$30	                cmp #$30
1954	.b8cd		90 04		bcc $b8d3	                bcc LB8B5
1955	.b8cf		c9 3a		cmp #$3a	                cmp #$3A
1956	.b8d1		90 02		bcc $b8d5	                bcc LB8B7
1957	.b8d3						LB8B5:
1958	.b8d3		38		sec		                sec
1959	.b8d4		60		rts		                rts

1961	.b8d5						LB8B7:
1962	.b8d5		e9 2f		sbc #$2f	                sbc #$2F
1963	.b8d7		48		pha		                pha
1964	.b8d8		a5 3b		lda $3b		                lda $3B
1965	.b8da		48		pha		                pha
1966	.b8db		a5 3a		lda $3a		                lda $3A
1967	.b8dd		0a		asl a		                asl a
1968	.b8de		26 3b		rol $3b		                rol $3B
1969	.b8e0		0a		asl a		                asl a
1970	.b8e1		26 3b		rol $3b		                rol $3B
1971	.b8e3		18		clc		                clc
1972	.b8e4		65 3a		adc $3a		                adc $3A
1973	.b8e6		85 3a		sta $3a		                sta $3A
1974	.b8e8		68		pla		                pla
1975	.b8e9		65 3b		adc $3b		                adc $3B
1976	.b8eb		85 3b		sta $3b		                sta $3B
1977	.b8ed		06 3a		asl $3a		                asl $3A
1978	.b8ef		26 3b		rol $3b		                rol $3B
1979	.b8f1		68		pla		                pla
1980	.b8f2		18		clc		                clc
1981	.b8f3		65 3a		adc $3a		                adc $3A
1982	.b8f5		85 3a		sta $3a		                sta $3A
1983	.b8f7		90 03		bcc $b8fc	                bcc LB8DE
1984	.b8f9		e6 3b		inc $3b		                inc $3B
1985	.b8fb		18		clc		                clc
1986	.b8fc						LB8DE:
1987	.b8fc		60		rts		                rts

:7	;******  Return to file: src/terminal.s65

7045							;-------------------------------------------------------------------------

7047							; Unused space
7048							; ============
7049	.b8fd						terminalUnusedBegin:
7050	>b8fd		ff ff ff			                .fill $b900-*,$ff
7051	=3						terminalUnusedSize=*-terminalUnusedBegin

7053							; Default font
7054							; ============
7055	.b900						LB900:
7057							                ; CHR$32 -
7058	>b900		00				                .byte %00000000
7059	>b901		00				                .byte %00000000
7060	>b902		00				                .byte %00000000
7061	>b903		00				                .byte %00000000
7062	>b904		00				                .byte %00000000
7063	>b905		00				                .byte %00000000
7064	>b906		00				                .byte %00000000
7065	>b907		00				                .byte %00000000

7067							                ; CHR$33 - !
7068	>b908		18				                .byte %00011000
7069	>b909		18				                .byte %00011000
7070	>b90a		18				                .byte %00011000
7071	>b90b		18				                .byte %00011000
7072	>b90c		18				                .byte %00011000
7073	>b90d		00				                .byte %00000000
7074	>b90e		18				                .byte %00011000
7075	>b90f		00				                .byte %00000000

7077							                ; CHR$34 - "
7078	>b910		6c				                .byte %01101100
7079	>b911		6c				                .byte %01101100
7080	>b912		6c				                .byte %01101100
7081	>b913		00				                .byte %00000000
7082	>b914		00				                .byte %00000000
7083	>b915		00				                .byte %00000000
7084	>b916		00				                .byte %00000000
7085	>b917		00				                .byte %00000000

7087							                ; CHR$35 - #
7088	>b918		36				                .byte %00110110
7089	>b919		36				                .byte %00110110
7090	>b91a		7f				                .byte %01111111
7091	>b91b		36				                .byte %00110110
7092	>b91c		7f				                .byte %01111111
7093	>b91d		36				                .byte %00110110
7094	>b91e		36				                .byte %00110110
7095	>b91f		00				                .byte %00000000

7097							                ; CHR$36 - $
7098	>b920		0c				                .byte %00001100
7099	>b921		3f				                .byte %00111111
7100	>b922		68				                .byte %01101000
7101	>b923		3e				                .byte %00111110
7102	>b924		0b				                .byte %00001011
7103	>b925		7e				                .byte %01111110
7104	>b926		18				                .byte %00011000
7105	>b927		00				                .byte %00000000

7107							                ; CHR$37 - %
7108	>b928		60				                .byte %01100000
7109	>b929		66				                .byte %01100110
7110	>b92a		0c				                .byte %00001100
7111	>b92b		18				                .byte %00011000
7112	>b92c		30				                .byte %00110000
7113	>b92d		66				                .byte %01100110
7114	>b92e		06				                .byte %00000110
7115	>b92f		00				                .byte %00000000

7117							                ; CHR$38 - &
7118	>b930		38				                .byte %00111000
7119	>b931		6c				                .byte %01101100
7120	>b932		6c				                .byte %01101100
7121	>b933		38				                .byte %00111000
7122	>b934		6d				                .byte %01101101
7123	>b935		66				                .byte %01100110
7124	>b936		3b				                .byte %00111011
7125	>b937		00				                .byte %00000000

7127							                ; CHR$39 - '
7128	>b938		0c				                .byte %00001100
7129	>b939		18				                .byte %00011000
7130	>b93a		30				                .byte %00110000
7131	>b93b		00				                .byte %00000000
7132	>b93c		00				                .byte %00000000
7133	>b93d		00				                .byte %00000000
7134	>b93e		00				                .byte %00000000
7135	>b93f		00				                .byte %00000000

7137							                ; CHR$40 - (
7138	>b940		0c				                .byte %00001100
7139	>b941		18				                .byte %00011000
7140	>b942		30				                .byte %00110000
7141	>b943		30				                .byte %00110000
7142	>b944		30				                .byte %00110000
7143	>b945		18				                .byte %00011000
7144	>b946		0c				                .byte %00001100
7145	>b947		00				                .byte %00000000

7147							                ; CHR$41 - )
7148	>b948		30				                .byte %00110000
7149	>b949		18				                .byte %00011000
7150	>b94a		0c				                .byte %00001100
7151	>b94b		0c				                .byte %00001100
7152	>b94c		0c				                .byte %00001100
7153	>b94d		18				                .byte %00011000
7154	>b94e		30				                .byte %00110000
7155	>b94f		00				                .byte %00000000

7157							                ; CHR$42 - *
7158	>b950		00				                .byte %00000000
7159	>b951		18				                .byte %00011000
7160	>b952		7e				                .byte %01111110
7161	>b953		3c				                .byte %00111100
7162	>b954		7e				                .byte %01111110
7163	>b955		18				                .byte %00011000
7164	>b956		00				                .byte %00000000
7165	>b957		00				                .byte %00000000

7167							                ; CHR$43 - +
7168	>b958		00				                .byte %00000000
7169	>b959		18				                .byte %00011000
7170	>b95a		18				                .byte %00011000
7171	>b95b		7e				                .byte %01111110
7172	>b95c		18				                .byte %00011000
7173	>b95d		18				                .byte %00011000
7174	>b95e		00				                .byte %00000000
7175	>b95f		00				                .byte %00000000

7177							                ; CHR$44 - ,
7178	>b960		00				                .byte %00000000
7179	>b961		00				                .byte %00000000
7180	>b962		00				                .byte %00000000
7181	>b963		00				                .byte %00000000
7182	>b964		00				                .byte %00000000
7183	>b965		18				                .byte %00011000
7184	>b966		18				                .byte %00011000
7185	>b967		30				                .byte %00110000

7187							                ; CHR$45 - -
7188	>b968		00				                .byte %00000000
7189	>b969		00				                .byte %00000000
7190	>b96a		00				                .byte %00000000
7191	>b96b		7e				                .byte %01111110
7192	>b96c		00				                .byte %00000000
7193	>b96d		00				                .byte %00000000
7194	>b96e		00				                .byte %00000000
7195	>b96f		00				                .byte %00000000

7197							                ; CHR$46 - .
7198	>b970		00				                .byte %00000000
7199	>b971		00				                .byte %00000000
7200	>b972		00				                .byte %00000000
7201	>b973		00				                .byte %00000000
7202	>b974		00				                .byte %00000000
7203	>b975		18				                .byte %00011000
7204	>b976		18				                .byte %00011000
7205	>b977		00				                .byte %00000000

7207							                ; CHR$47 - /
7208	>b978		00				                .byte %00000000
7209	>b979		06				                .byte %00000110
7210	>b97a		0c				                .byte %00001100
7211	>b97b		18				                .byte %00011000
7212	>b97c		30				                .byte %00110000
7213	>b97d		60				                .byte %01100000
7214	>b97e		00				                .byte %00000000
7215	>b97f		00				                .byte %00000000

7217							                ; CHR$48 - 0
7218	>b980		3c				                .byte %00111100
7219	>b981		66				                .byte %01100110
7220	>b982		6e				                .byte %01101110
7221	>b983		7e				                .byte %01111110
7222	>b984		76				                .byte %01110110
7223	>b985		66				                .byte %01100110
7224	>b986		3c				                .byte %00111100
7225	>b987		00				                .byte %00000000

7227							                ; CHR$49 - 1
7228	>b988		18				                .byte %00011000
7229	>b989		38				                .byte %00111000
7230	>b98a		18				                .byte %00011000
7231	>b98b		18				                .byte %00011000
7232	>b98c		18				                .byte %00011000
7233	>b98d		18				                .byte %00011000
7234	>b98e		7e				                .byte %01111110
7235	>b98f		00				                .byte %00000000

7237							                ; CHR$50 - 2
7238	>b990		3c				                .byte %00111100
7239	>b991		66				                .byte %01100110
7240	>b992		06				                .byte %00000110
7241	>b993		0c				                .byte %00001100
7242	>b994		18				                .byte %00011000
7243	>b995		30				                .byte %00110000
7244	>b996		7e				                .byte %01111110
7245	>b997		00				                .byte %00000000

7247							                ; CHR$51 - 3
7248	>b998		3c				                .byte %00111100
7249	>b999		66				                .byte %01100110
7250	>b99a		06				                .byte %00000110
7251	>b99b		1c				                .byte %00011100
7252	>b99c		06				                .byte %00000110
7253	>b99d		66				                .byte %01100110
7254	>b99e		3c				                .byte %00111100
7255	>b99f		00				                .byte %00000000

7257							                ; CHR$52 - 4
7258	>b9a0		0c				                .byte %00001100
7259	>b9a1		1c				                .byte %00011100
7260	>b9a2		3c				                .byte %00111100
7261	>b9a3		6c				                .byte %01101100
7262	>b9a4		7e				                .byte %01111110
7263	>b9a5		0c				                .byte %00001100
7264	>b9a6		0c				                .byte %00001100
7265	>b9a7		00				                .byte %00000000

7267							                ; CHR$53 - 5
7268	>b9a8		7e				                .byte %01111110
7269	>b9a9		60				                .byte %01100000
7270	>b9aa		7c				                .byte %01111100
7271	>b9ab		06				                .byte %00000110
7272	>b9ac		06				                .byte %00000110
7273	>b9ad		66				                .byte %01100110
7274	>b9ae		3c				                .byte %00111100
7275	>b9af		00				                .byte %00000000

7277							                ; CHR$54 - 6
7278	>b9b0		1c				                .byte %00011100
7279	>b9b1		30				                .byte %00110000
7280	>b9b2		60				                .byte %01100000
7281	>b9b3		7c				                .byte %01111100
7282	>b9b4		66				                .byte %01100110
7283	>b9b5		66				                .byte %01100110
7284	>b9b6		3c				                .byte %00111100
7285	>b9b7		00				                .byte %00000000

7287							                ; CHR$55 - 7
7288	>b9b8		7e				                .byte %01111110
7289	>b9b9		06				                .byte %00000110
7290	>b9ba		0c				                .byte %00001100
7291	>b9bb		18				                .byte %00011000
7292	>b9bc		30				                .byte %00110000
7293	>b9bd		30				                .byte %00110000
7294	>b9be		30				                .byte %00110000
7295	>b9bf		00				                .byte %00000000

7297							                ; CHR$56 - 8
7298	>b9c0		3c				                .byte %00111100
7299	>b9c1		66				                .byte %01100110
7300	>b9c2		66				                .byte %01100110
7301	>b9c3		3c				                .byte %00111100
7302	>b9c4		66				                .byte %01100110
7303	>b9c5		66				                .byte %01100110
7304	>b9c6		3c				                .byte %00111100
7305	>b9c7		00				                .byte %00000000

7307							                ; CHR$57 - 9
7308	>b9c8		3c				                .byte %00111100
7309	>b9c9		66				                .byte %01100110
7310	>b9ca		66				                .byte %01100110
7311	>b9cb		3e				                .byte %00111110
7312	>b9cc		06				                .byte %00000110
7313	>b9cd		0c				                .byte %00001100
7314	>b9ce		38				                .byte %00111000
7315	>b9cf		00				                .byte %00000000

7317							                ; CHR$58 - :
7318	>b9d0		00				                .byte %00000000
7319	>b9d1		00				                .byte %00000000
7320	>b9d2		18				                .byte %00011000
7321	>b9d3		18				                .byte %00011000
7322	>b9d4		00				                .byte %00000000
7323	>b9d5		18				                .byte %00011000
7324	>b9d6		18				                .byte %00011000
7325	>b9d7		00				                .byte %00000000

7327							                ; CHR$59 - ;
7328	>b9d8		00				                .byte %00000000
7329	>b9d9		00				                .byte %00000000
7330	>b9da		18				                .byte %00011000
7331	>b9db		18				                .byte %00011000
7332	>b9dc		00				                .byte %00000000
7333	>b9dd		18				                .byte %00011000
7334	>b9de		18				                .byte %00011000
7335	>b9df		30				                .byte %00110000

7337							                ; CHR$60 - <
7338	>b9e0		0c				                .byte %00001100
7339	>b9e1		18				                .byte %00011000
7340	>b9e2		30				                .byte %00110000
7341	>b9e3		60				                .byte %01100000
7342	>b9e4		30				                .byte %00110000
7343	>b9e5		18				                .byte %00011000
7344	>b9e6		0c				                .byte %00001100
7345	>b9e7		00				                .byte %00000000

7347							                ; CHR$61 - =
7348	>b9e8		00				                .byte %00000000
7349	>b9e9		00				                .byte %00000000
7350	>b9ea		7e				                .byte %01111110
7351	>b9eb		00				                .byte %00000000
7352	>b9ec		7e				                .byte %01111110
7353	>b9ed		00				                .byte %00000000
7354	>b9ee		00				                .byte %00000000
7355	>b9ef		00				                .byte %00000000

7357							                ; CHR$62 - >
7358	>b9f0		30				                .byte %00110000
7359	>b9f1		18				                .byte %00011000
7360	>b9f2		0c				                .byte %00001100
7361	>b9f3		06				                .byte %00000110
7362	>b9f4		0c				                .byte %00001100
7363	>b9f5		18				                .byte %00011000
7364	>b9f6		30				                .byte %00110000
7365	>b9f7		00				                .byte %00000000

7367							                ; CHR$63 - ?
7368	>b9f8		3c				                .byte %00111100
7369	>b9f9		66				                .byte %01100110
7370	>b9fa		0c				                .byte %00001100
7371	>b9fb		18				                .byte %00011000
7372	>b9fc		18				                .byte %00011000
7373	>b9fd		00				                .byte %00000000
7374	>b9fe		18				                .byte %00011000
7375	>b9ff		00				                .byte %00000000

7377							                ; CHR$64 - @
7378	>ba00		3c				                .byte %00111100
7379	>ba01		66				                .byte %01100110
7380	>ba02		6e				                .byte %01101110
7381	>ba03		6a				                .byte %01101010
7382	>ba04		6e				                .byte %01101110
7383	>ba05		60				                .byte %01100000
7384	>ba06		3c				                .byte %00111100
7385	>ba07		00				                .byte %00000000

7387							                ; CHR$65 - A
7388	>ba08		3c				                .byte %00111100
7389	>ba09		66				                .byte %01100110
7390	>ba0a		66				                .byte %01100110
7391	>ba0b		7e				                .byte %01111110
7392	>ba0c		66				                .byte %01100110
7393	>ba0d		66				                .byte %01100110
7394	>ba0e		66				                .byte %01100110
7395	>ba0f		00				                .byte %00000000

7397							                ; CHR$66 - B
7398	>ba10		7c				                .byte %01111100
7399	>ba11		66				                .byte %01100110
7400	>ba12		66				                .byte %01100110
7401	>ba13		7c				                .byte %01111100
7402	>ba14		66				                .byte %01100110
7403	>ba15		66				                .byte %01100110
7404	>ba16		7c				                .byte %01111100
7405	>ba17		00				                .byte %00000000

7407							                ; CHR$67 - C
7408	>ba18		3c				                .byte %00111100
7409	>ba19		66				                .byte %01100110
7410	>ba1a		60				                .byte %01100000
7411	>ba1b		60				                .byte %01100000
7412	>ba1c		60				                .byte %01100000
7413	>ba1d		66				                .byte %01100110
7414	>ba1e		3c				                .byte %00111100
7415	>ba1f		00				                .byte %00000000

7417							                ; CHR$68 - D
7418	>ba20		78				                .byte %01111000
7419	>ba21		6c				                .byte %01101100
7420	>ba22		66				                .byte %01100110
7421	>ba23		66				                .byte %01100110
7422	>ba24		66				                .byte %01100110
7423	>ba25		6c				                .byte %01101100
7424	>ba26		78				                .byte %01111000
7425	>ba27		00				                .byte %00000000

7427							                ; CHR$69 - E
7428	>ba28		7e				                .byte %01111110
7429	>ba29		60				                .byte %01100000
7430	>ba2a		60				                .byte %01100000
7431	>ba2b		7c				                .byte %01111100
7432	>ba2c		60				                .byte %01100000
7433	>ba2d		60				                .byte %01100000
7434	>ba2e		7e				                .byte %01111110
7435	>ba2f		00				                .byte %00000000

7437							                ; CHR$70 - F
7438	>ba30		7e				                .byte %01111110
7439	>ba31		60				                .byte %01100000
7440	>ba32		60				                .byte %01100000
7441	>ba33		7c				                .byte %01111100
7442	>ba34		60				                .byte %01100000
7443	>ba35		60				                .byte %01100000
7444	>ba36		60				                .byte %01100000
7445	>ba37		00				                .byte %00000000

7447							                ; CHR$71 - G
7448	>ba38		3c				                .byte %00111100
7449	>ba39		66				                .byte %01100110
7450	>ba3a		60				                .byte %01100000
7451	>ba3b		6e				                .byte %01101110
7452	>ba3c		66				                .byte %01100110
7453	>ba3d		66				                .byte %01100110
7454	>ba3e		3c				                .byte %00111100
7455	>ba3f		00				                .byte %00000000

7457							                ; CHR$72 - H
7458	>ba40		66				                .byte %01100110
7459	>ba41		66				                .byte %01100110
7460	>ba42		66				                .byte %01100110
7461	>ba43		7e				                .byte %01111110
7462	>ba44		66				                .byte %01100110
7463	>ba45		66				                .byte %01100110
7464	>ba46		66				                .byte %01100110
7465	>ba47		00				                .byte %00000000

7467							                ; CHR$73 - I
7468	>ba48		7e				                .byte %01111110
7469	>ba49		18				                .byte %00011000
7470	>ba4a		18				                .byte %00011000
7471	>ba4b		18				                .byte %00011000
7472	>ba4c		18				                .byte %00011000
7473	>ba4d		18				                .byte %00011000
7474	>ba4e		7e				                .byte %01111110
7475	>ba4f		00				                .byte %00000000

7477							                ; CHR$74 - J
7478	>ba50		3e				                .byte %00111110
7479	>ba51		0c				                .byte %00001100
7480	>ba52		0c				                .byte %00001100
7481	>ba53		0c				                .byte %00001100
7482	>ba54		0c				                .byte %00001100
7483	>ba55		6c				                .byte %01101100
7484	>ba56		38				                .byte %00111000
7485	>ba57		00				                .byte %00000000

7487							                ; CHR$75 - K
7488	>ba58		66				                .byte %01100110
7489	>ba59		6c				                .byte %01101100
7490	>ba5a		78				                .byte %01111000
7491	>ba5b		70				                .byte %01110000
7492	>ba5c		78				                .byte %01111000
7493	>ba5d		6c				                .byte %01101100
7494	>ba5e		66				                .byte %01100110
7495	>ba5f		00				                .byte %00000000

7497							                ; CHR$76 - L
7498	>ba60		60				                .byte %01100000
7499	>ba61		60				                .byte %01100000
7500	>ba62		60				                .byte %01100000
7501	>ba63		60				                .byte %01100000
7502	>ba64		60				                .byte %01100000
7503	>ba65		60				                .byte %01100000
7504	>ba66		7e				                .byte %01111110
7505	>ba67		00				                .byte %00000000

7507							                ; CHR$77 - M
7508	>ba68		63				                .byte %01100011
7509	>ba69		77				                .byte %01110111
7510	>ba6a		7f				                .byte %01111111
7511	>ba6b		6b				                .byte %01101011
7512	>ba6c		6b				                .byte %01101011
7513	>ba6d		63				                .byte %01100011
7514	>ba6e		63				                .byte %01100011
7515	>ba6f		00				                .byte %00000000

7517							                ; CHR$78 - N
7518	>ba70		66				                .byte %01100110
7519	>ba71		66				                .byte %01100110
7520	>ba72		76				                .byte %01110110
7521	>ba73		7e				                .byte %01111110
7522	>ba74		6e				                .byte %01101110
7523	>ba75		66				                .byte %01100110
7524	>ba76		66				                .byte %01100110
7525	>ba77		00				                .byte %00000000

7527							                ; CHR$79 - O
7528	>ba78		3c				                .byte %00111100
7529	>ba79		66				                .byte %01100110
7530	>ba7a		66				                .byte %01100110
7531	>ba7b		66				                .byte %01100110
7532	>ba7c		66				                .byte %01100110
7533	>ba7d		66				                .byte %01100110
7534	>ba7e		3c				                .byte %00111100
7535	>ba7f		00				                .byte %00000000

7537							                ; CHR$80 - P
7538	>ba80		7c				                .byte %01111100
7539	>ba81		66				                .byte %01100110
7540	>ba82		66				                .byte %01100110
7541	>ba83		7c				                .byte %01111100
7542	>ba84		60				                .byte %01100000
7543	>ba85		60				                .byte %01100000
7544	>ba86		60				                .byte %01100000
7545	>ba87		00				                .byte %00000000

7547							                ; CHR$81 - Q
7548	>ba88		3c				                .byte %00111100
7549	>ba89		66				                .byte %01100110
7550	>ba8a		66				                .byte %01100110
7551	>ba8b		66				                .byte %01100110
7552	>ba8c		6a				                .byte %01101010
7553	>ba8d		6c				                .byte %01101100
7554	>ba8e		36				                .byte %00110110
7555	>ba8f		00				                .byte %00000000

7557							                ; CHR$82 - R
7558	>ba90		7c				                .byte %01111100
7559	>ba91		66				                .byte %01100110
7560	>ba92		66				                .byte %01100110
7561	>ba93		7c				                .byte %01111100
7562	>ba94		6c				                .byte %01101100
7563	>ba95		66				                .byte %01100110
7564	>ba96		66				                .byte %01100110
7565	>ba97		00				                .byte %00000000

7567							                ; CHR$83 - S
7568	>ba98		3c				                .byte %00111100
7569	>ba99		66				                .byte %01100110
7570	>ba9a		60				                .byte %01100000
7571	>ba9b		3c				                .byte %00111100
7572	>ba9c		06				                .byte %00000110
7573	>ba9d		66				                .byte %01100110
7574	>ba9e		3c				                .byte %00111100
7575	>ba9f		00				                .byte %00000000

7577							                ; CHR$84 - T
7578	>baa0		7e				                .byte %01111110
7579	>baa1		18				                .byte %00011000
7580	>baa2		18				                .byte %00011000
7581	>baa3		18				                .byte %00011000
7582	>baa4		18				                .byte %00011000
7583	>baa5		18				                .byte %00011000
7584	>baa6		18				                .byte %00011000
7585	>baa7		00				                .byte %00000000

7587							                ; CHR$85 - U
7588	>baa8		66				                .byte %01100110
7589	>baa9		66				                .byte %01100110
7590	>baaa		66				                .byte %01100110
7591	>baab		66				                .byte %01100110
7592	>baac		66				                .byte %01100110
7593	>baad		66				                .byte %01100110
7594	>baae		3c				                .byte %00111100
7595	>baaf		00				                .byte %00000000

7597							                ; CHR$86 - V
7598	>bab0		66				                .byte %01100110
7599	>bab1		66				                .byte %01100110
7600	>bab2		66				                .byte %01100110
7601	>bab3		66				                .byte %01100110
7602	>bab4		66				                .byte %01100110
7603	>bab5		3c				                .byte %00111100
7604	>bab6		18				                .byte %00011000
7605	>bab7		00				                .byte %00000000

7607							                ; CHR$87 - W
7608	>bab8		63				                .byte %01100011
7609	>bab9		63				                .byte %01100011
7610	>baba		6b				                .byte %01101011
7611	>babb		6b				                .byte %01101011
7612	>babc		7f				                .byte %01111111
7613	>babd		77				                .byte %01110111
7614	>babe		63				                .byte %01100011
7615	>babf		00				                .byte %00000000

7617							                ; CHR$88 - X
7618	>bac0		66				                .byte %01100110
7619	>bac1		66				                .byte %01100110
7620	>bac2		3c				                .byte %00111100
7621	>bac3		18				                .byte %00011000
7622	>bac4		3c				                .byte %00111100
7623	>bac5		66				                .byte %01100110
7624	>bac6		66				                .byte %01100110
7625	>bac7		00				                .byte %00000000

7627							                ; CHR$89 - Y
7628	>bac8		66				                .byte %01100110
7629	>bac9		66				                .byte %01100110
7630	>baca		66				                .byte %01100110
7631	>bacb		3c				                .byte %00111100
7632	>bacc		18				                .byte %00011000
7633	>bacd		18				                .byte %00011000
7634	>bace		18				                .byte %00011000
7635	>bacf		00				                .byte %00000000

7637							                ; CHR$90 - Z
7638	>bad0		7e				                .byte %01111110
7639	>bad1		06				                .byte %00000110
7640	>bad2		0c				                .byte %00001100
7641	>bad3		18				                .byte %00011000
7642	>bad4		30				                .byte %00110000
7643	>bad5		60				                .byte %01100000
7644	>bad6		7e				                .byte %01111110
7645	>bad7		00				                .byte %00000000

7647							                ; CHR$91 - [
7648	>bad8		7c				                .byte %01111100
7649	>bad9		60				                .byte %01100000
7650	>bada		60				                .byte %01100000
7651	>badb		60				                .byte %01100000
7652	>badc		60				                .byte %01100000
7653	>badd		60				                .byte %01100000
7654	>bade		7c				                .byte %01111100
7655	>badf		00				                .byte %00000000

7657							                ; CHR$92 - \
7658	>bae0		00				                .byte %00000000
7659	>bae1		60				                .byte %01100000
7660	>bae2		30				                .byte %00110000
7661	>bae3		18				                .byte %00011000
7662	>bae4		0c				                .byte %00001100
7663	>bae5		06				                .byte %00000110
7664	>bae6		00				                .byte %00000000
7665	>bae7		00				                .byte %00000000

7667							                ; CHR$93 - ]
7668	>bae8		3e				                .byte %00111110
7669	>bae9		06				                .byte %00000110
7670	>baea		06				                .byte %00000110
7671	>baeb		06				                .byte %00000110
7672	>baec		06				                .byte %00000110
7673	>baed		06				                .byte %00000110
7674	>baee		3e				                .byte %00111110
7675	>baef		00				                .byte %00000000

7677							                ; CHR$94 - ^
7678	>baf0		18				                .byte %00011000
7679	>baf1		3c				                .byte %00111100
7680	>baf2		66				                .byte %01100110
7681	>baf3		42				                .byte %01000010
7682	>baf4		00				                .byte %00000000
7683	>baf5		00				                .byte %00000000
7684	>baf6		00				                .byte %00000000
7685	>baf7		00				                .byte %00000000

7687							                ; CHR$95 - _
7688	>baf8		00				                .byte %00000000
7689	>baf9		00				                .byte %00000000
7690	>bafa		00				                .byte %00000000
7691	>bafb		00				                .byte %00000000
7692	>bafc		00				                .byte %00000000
7693	>bafd		00				                .byte %00000000
7694	>bafe		00				                .byte %00000000
7695	>baff		ff				                .byte %11111111

7697							                ; CHR$96
7698	>bb00		1c				                .byte %00011100
7699	>bb01		36				                .byte %00110110
7700	>bb02		30				                .byte %00110000
7701	>bb03		7c				                .byte %01111100
7702	>bb04		30				                .byte %00110000
7703	>bb05		30				                .byte %00110000
7704	>bb06		7e				                .byte %01111110
7705	>bb07		00				                .byte %00000000

7707							                ; CHR$97 - a
7708	>bb08		00				                .byte %00000000
7709	>bb09		00				                .byte %00000000
7710	>bb0a		3c				                .byte %00111100
7711	>bb0b		06				                .byte %00000110
7712	>bb0c		3e				                .byte %00111110
7713	>bb0d		66				                .byte %01100110
7714	>bb0e		3e				                .byte %00111110
7715	>bb0f		00				                .byte %00000000

7717							                ; CHR$98 - b
7718	>bb10		60				                .byte %01100000
7719	>bb11		60				                .byte %01100000
7720	>bb12		7c				                .byte %01111100
7721	>bb13		66				                .byte %01100110
7722	>bb14		66				                .byte %01100110
7723	>bb15		66				                .byte %01100110
7724	>bb16		7c				                .byte %01111100
7725	>bb17		00				                .byte %00000000

7727							                ; CHR$99 - c
7728	>bb18		00				                .byte %00000000
7729	>bb19		00				                .byte %00000000
7730	>bb1a		3c				                .byte %00111100
7731	>bb1b		66				                .byte %01100110
7732	>bb1c		60				                .byte %01100000
7733	>bb1d		66				                .byte %01100110
7734	>bb1e		3c				                .byte %00111100
7735	>bb1f		00				                .byte %00000000

7737							                ; CHR$100 - d
7738	>bb20		06				                .byte %00000110
7739	>bb21		06				                .byte %00000110
7740	>bb22		3e				                .byte %00111110
7741	>bb23		66				                .byte %01100110
7742	>bb24		66				                .byte %01100110
7743	>bb25		66				                .byte %01100110
7744	>bb26		3e				                .byte %00111110
7745	>bb27		00				                .byte %00000000

7747							                ; CHR$101 - e
7748	>bb28		00				                .byte %00000000
7749	>bb29		00				                .byte %00000000
7750	>bb2a		3c				                .byte %00111100
7751	>bb2b		66				                .byte %01100110
7752	>bb2c		7e				                .byte %01111110
7753	>bb2d		60				                .byte %01100000
7754	>bb2e		3c				                .byte %00111100
7755	>bb2f		00				                .byte %00000000

7757							                ; CHR$102 - f
7758	>bb30		1c				                .byte %00011100
7759	>bb31		30				                .byte %00110000
7760	>bb32		30				                .byte %00110000
7761	>bb33		7c				                .byte %01111100
7762	>bb34		30				                .byte %00110000
7763	>bb35		30				                .byte %00110000
7764	>bb36		30				                .byte %00110000
7765	>bb37		00				                .byte %00000000

7767							                ; CHR$103 - g
7768	>bb38		00				                .byte %00000000
7769	>bb39		00				                .byte %00000000
7770	>bb3a		3e				                .byte %00111110
7771	>bb3b		66				                .byte %01100110
7772	>bb3c		66				                .byte %01100110
7773	>bb3d		3e				                .byte %00111110
7774	>bb3e		06				                .byte %00000110
7775	>bb3f		3c				                .byte %00111100

7777							                ; CHR$104 - h
7778	>bb40		60				                .byte %01100000
7779	>bb41		60				                .byte %01100000
7780	>bb42		7c				                .byte %01111100
7781	>bb43		66				                .byte %01100110
7782	>bb44		66				                .byte %01100110
7783	>bb45		66				                .byte %01100110
7784	>bb46		66				                .byte %01100110
7785	>bb47		00				                .byte %00000000

7787							                ; CHR$105 - i
7788	>bb48		18				                .byte %00011000
7789	>bb49		00				                .byte %00000000
7790	>bb4a		38				                .byte %00111000
7791	>bb4b		18				                .byte %00011000
7792	>bb4c		18				                .byte %00011000
7793	>bb4d		18				                .byte %00011000
7794	>bb4e		3c				                .byte %00111100
7795	>bb4f		00				                .byte %00000000

7797							                ; CHR$106 - j
7798	>bb50		18				                .byte %00011000
7799	>bb51		00				                .byte %00000000
7800	>bb52		38				                .byte %00111000
7801	>bb53		18				                .byte %00011000
7802	>bb54		18				                .byte %00011000
7803	>bb55		18				                .byte %00011000
7804	>bb56		18				                .byte %00011000
7805	>bb57		70				                .byte %01110000

7807							                ; CHR$107 - k
7808	>bb58		60				                .byte %01100000
7809	>bb59		60				                .byte %01100000
7810	>bb5a		66				                .byte %01100110
7811	>bb5b		6c				                .byte %01101100
7812	>bb5c		78				                .byte %01111000
7813	>bb5d		6c				                .byte %01101100
7814	>bb5e		66				                .byte %01100110
7815	>bb5f		00				                .byte %00000000

7817							                ; CHR$108 - l
7818	>bb60		38				                .byte %00111000
7819	>bb61		18				                .byte %00011000
7820	>bb62		18				                .byte %00011000
7821	>bb63		18				                .byte %00011000
7822	>bb64		18				                .byte %00011000
7823	>bb65		18				                .byte %00011000
7824	>bb66		3c				                .byte %00111100
7825	>bb67		00				                .byte %00000000

7827							                ; CHR$109 - m
7828	>bb68		00				                .byte %00000000
7829	>bb69		00				                .byte %00000000
7830	>bb6a		36				                .byte %00110110
7831	>bb6b		7f				                .byte %01111111
7832	>bb6c		6b				                .byte %01101011
7833	>bb6d		6b				                .byte %01101011
7834	>bb6e		63				                .byte %01100011
7835	>bb6f		00				                .byte %00000000

7837							                ; CHR$110 - n
7838	>bb70		00				                .byte %00000000
7839	>bb71		00				                .byte %00000000
7840	>bb72		7c				                .byte %01111100
7841	>bb73		66				                .byte %01100110
7842	>bb74		66				                .byte %01100110
7843	>bb75		66				                .byte %01100110
7844	>bb76		66				                .byte %01100110
7845	>bb77		00				                .byte %00000000

7847							                ; CHR$111 - o
7848	>bb78		00				                .byte %00000000
7849	>bb79		00				                .byte %00000000
7850	>bb7a		3c				                .byte %00111100
7851	>bb7b		66				                .byte %01100110
7852	>bb7c		66				                .byte %01100110
7853	>bb7d		66				                .byte %01100110
7854	>bb7e		3c				                .byte %00111100
7855	>bb7f		00				                .byte %00000000

7857							                ; CHR$112 - p
7858	>bb80		00				                .byte %00000000
7859	>bb81		00				                .byte %00000000
7860	>bb82		7c				                .byte %01111100
7861	>bb83		66				                .byte %01100110
7862	>bb84		66				                .byte %01100110
7863	>bb85		7c				                .byte %01111100
7864	>bb86		60				                .byte %01100000
7865	>bb87		60				                .byte %01100000

7867							                ; CHR$113 - q
7868	>bb88		00				                .byte %00000000
7869	>bb89		00				                .byte %00000000
7870	>bb8a		3e				                .byte %00111110
7871	>bb8b		66				                .byte %01100110
7872	>bb8c		66				                .byte %01100110
7873	>bb8d		3e				                .byte %00111110
7874	>bb8e		06				                .byte %00000110
7875	>bb8f		07				                .byte %00000111

7877							                ; CHR$114 - r
7878	>bb90		00				                .byte %00000000
7879	>bb91		00				                .byte %00000000
7880	>bb92		6c				                .byte %01101100
7881	>bb93		76				                .byte %01110110
7882	>bb94		60				                .byte %01100000
7883	>bb95		60				                .byte %01100000
7884	>bb96		60				                .byte %01100000
7885	>bb97		00				                .byte %00000000

7887							                ; CHR$115 - s
7888	>bb98		00				                .byte %00000000
7889	>bb99		00				                .byte %00000000
7890	>bb9a		3e				                .byte %00111110
7891	>bb9b		60				                .byte %01100000
7892	>bb9c		3c				                .byte %00111100
7893	>bb9d		06				                .byte %00000110
7894	>bb9e		7c				                .byte %01111100
7895	>bb9f		00				                .byte %00000000

7897							                ; CHR$116 - t
7898	>bba0		30				                .byte %00110000
7899	>bba1		30				                .byte %00110000
7900	>bba2		7c				                .byte %01111100
7901	>bba3		30				                .byte %00110000
7902	>bba4		30				                .byte %00110000
7903	>bba5		30				                .byte %00110000
7904	>bba6		1c				                .byte %00011100
7905	>bba7		00				                .byte %00000000

7907							                ; CHR$117 - u
7908	>bba8		00				                .byte %00000000
7909	>bba9		00				                .byte %00000000
7910	>bbaa		66				                .byte %01100110
7911	>bbab		66				                .byte %01100110
7912	>bbac		66				                .byte %01100110
7913	>bbad		66				                .byte %01100110
7914	>bbae		3e				                .byte %00111110
7915	>bbaf		00				                .byte %00000000

7917							                ; CHR$118 - v
7918	>bbb0		00				                .byte %00000000
7919	>bbb1		00				                .byte %00000000
7920	>bbb2		66				                .byte %01100110
7921	>bbb3		66				                .byte %01100110
7922	>bbb4		66				                .byte %01100110
7923	>bbb5		3c				                .byte %00111100
7924	>bbb6		18				                .byte %00011000
7925	>bbb7		00				                .byte %00000000

7927							                ; CHR$119 - w
7928	>bbb8		00				                .byte %00000000
7929	>bbb9		00				                .byte %00000000
7930	>bbba		63				                .byte %01100011
7931	>bbbb		6b				                .byte %01101011
7932	>bbbc		6b				                .byte %01101011
7933	>bbbd		7f				                .byte %01111111
7934	>bbbe		36				                .byte %00110110
7935	>bbbf		00				                .byte %00000000

7937							                ; CHR$120 - x
7938	>bbc0		00				                .byte %00000000
7939	>bbc1		00				                .byte %00000000
7940	>bbc2		66				                .byte %01100110
7941	>bbc3		3c				                .byte %00111100
7942	>bbc4		18				                .byte %00011000
7943	>bbc5		3c				                .byte %00111100
7944	>bbc6		66				                .byte %01100110
7945	>bbc7		00				                .byte %00000000

7947							                ; CHR$121 - y
7948	>bbc8		00				                .byte %00000000
7949	>bbc9		00				                .byte %00000000
7950	>bbca		66				                .byte %01100110
7951	>bbcb		66				                .byte %01100110
7952	>bbcc		66				                .byte %01100110
7953	>bbcd		3e				                .byte %00111110
7954	>bbce		06				                .byte %00000110
7955	>bbcf		3c				                .byte %00111100

7957							                ; CHR$122 - z
7958	>bbd0		00				                .byte %00000000
7959	>bbd1		00				                .byte %00000000
7960	>bbd2		7e				                .byte %01111110
7961	>bbd3		0c				                .byte %00001100
7962	>bbd4		18				                .byte %00011000
7963	>bbd5		30				                .byte %00110000
7964	>bbd6		7e				                .byte %01111110
7965	>bbd7		00				                .byte %00000000

7967							                ; CHR$123 - {
7968	>bbd8		0c				                .byte %00001100
7969	>bbd9		18				                .byte %00011000
7970	>bbda		18				                .byte %00011000
7971	>bbdb		70				                .byte %01110000
7972	>bbdc		18				                .byte %00011000
7973	>bbdd		18				                .byte %00011000
7974	>bbde		0c				                .byte %00001100
7975	>bbdf		00				                .byte %00000000

7977							                ; CHR$124 - |
7978	>bbe0		18				                .byte %00011000
7979	>bbe1		18				                .byte %00011000
7980	>bbe2		18				                .byte %00011000
7981	>bbe3		00				                .byte %00000000
7982	>bbe4		18				                .byte %00011000
7983	>bbe5		18				                .byte %00011000
7984	>bbe6		18				                .byte %00011000
7985	>bbe7		00				                .byte %00000000

7987							                ; CHR$125 - }
7988	>bbe8		30				                .byte %00110000
7989	>bbe9		18				                .byte %00011000
7990	>bbea		18				                .byte %00011000
7991	>bbeb		0e				                .byte %00001110
7992	>bbec		18				                .byte %00011000
7993	>bbed		18				                .byte %00011000
7994	>bbee		30				                .byte %00110000
7995	>bbef		00				                .byte %00000000

7997							                ; CHR$126 - ~
7998	>bbf0		31				                .byte %00110001
7999	>bbf1		6b				                .byte %01101011
8000	>bbf2		46				                .byte %01000110
8001	>bbf3		00				                .byte %00000000
8002	>bbf4		00				                .byte %00000000
8003	>bbf5		00				                .byte %00000000
8004	>bbf6		00				                .byte %00000000
8005	>bbf7		00				                .byte %00000000

8007							                ; CHR$127
8008	.bbf8						chr127:
8009	>bbf8		ff				                .byte %11111111
8010	>bbf9		ff				                .byte %11111111
8011	>bbfa		ff				                .byte %11111111
8012	>bbfb		ff				                .byte %11111111
8013	>bbfc		ff				                .byte %11111111
8014	>bbfd		ff				                .byte %11111111
8015	>bbfe		ff				                .byte %11111111
8016	>bbff		ff				                .byte %11111111

8018							                ; CHR$128
8020	>bc00		66				                .byte %01100110
8021	>bc01		66				                .byte %01100110
8022	>bc02		00				                .byte %00000000
8023	>bc03		3c				                .byte %00111100
8024	>bc04		66				                .byte %01100110
8025	>bc05		7e				                .byte %01111110
8026	>bc06		66				                .byte %01100110
8027	>bc07		00				                .byte %00000000

8039							                ; CHR$129
8041	>bc08		3c				                .byte %00111100
8042	>bc09		66				                .byte %01100110
8043	>bc0a		3c				                .byte %00111100
8044	>bc0b		3c				                .byte %00111100
8045	>bc0c		66				                .byte %01100110
8046	>bc0d		7e				                .byte %01111110
8047	>bc0e		66				                .byte %01100110
8048	>bc0f		00				                .byte %00000000

8060							                ; CHR$130
8061	>bc10		3f				                .byte %00111111
8062	>bc11		66				                .byte %01100110
8063	>bc12		66				                .byte %01100110
8064	>bc13		7f				                .byte %01111111
8065	>bc14		66				                .byte %01100110
8066	>bc15		66				                .byte %01100110
8067	>bc16		67				                .byte %01100111
8068	>bc17		00				                .byte %00000000

8070							                ; CHR$131
8072	>bc18		3c				                .byte %00111100
8073	>bc19		66				                .byte %01100110
8074	>bc1a		60				                .byte %01100000
8075	>bc1b		60				                .byte %01100000
8076	>bc1c		66				                .byte %01100110
8077	>bc1d		3c				                .byte %00111100
8078	>bc1e		30				                .byte %00110000
8079	>bc1f		60				                .byte %01100000

8091							                ; CHR$132
8092	>bc20		0c				                .byte %00001100
8093	>bc21		18				                .byte %00011000
8094	>bc22		7e				                .byte %01111110
8095	>bc23		60				                .byte %01100000
8096	>bc24		7c				                .byte %01111100
8097	>bc25		60				                .byte %01100000
8098	>bc26		7e				                .byte %01111110
8099	>bc27		00				                .byte %00000000

8101							                ; CHR$133
8103	>bc28		66				                .byte %01100110
8104	>bc29		00				                .byte %00000000
8105	>bc2a		3c				                .byte %00111100
8106	>bc2b		66				                .byte %01100110
8107	>bc2c		66				                .byte %01100110
8108	>bc2d		66				                .byte %01100110
8109	>bc2e		3c				                .byte %00111100
8110	>bc2f		00				                .byte %00000000

8122							                ; CHR$134
8123	>bc30		66				                .byte %01100110
8124	>bc31		00				                .byte %00000000
8125	>bc32		66				                .byte %01100110
8126	>bc33		66				                .byte %01100110
8127	>bc34		66				                .byte %01100110
8128	>bc35		66				                .byte %01100110
8129	>bc36		3c				                .byte %00111100
8130	>bc37		00				                .byte %00000000

8132							                ; CHR$135
8134	>bc38		3c				                .byte %00111100
8135	>bc39		42				                .byte %01000010
8136	>bc3a		99				                .byte %10011001
8137	>bc3b		a1				                .byte %10100001
8138	>bc3c		a1				                .byte %10100001
8139	>bc3d		99				                .byte %10011001
8140	>bc3e		42				                .byte %01000010
8141	>bc3f		3c				                .byte %00111100

8153							                ; CHR$136
8154	>bc40		00				                .byte %00000000
8155	>bc41		18				                .byte %00011000
8156	>bc42		38				                .byte %00111000
8157	>bc43		7f				                .byte %01111111
8158	>bc44		38				                .byte %00111000
8159	>bc45		18				                .byte %00011000
8160	>bc46		00				                .byte %00000000
8161	>bc47		00				                .byte %00000000

8163							                ; CHR$137
8164	>bc48		00				                .byte %00000000
8165	>bc49		18				                .byte %00011000
8166	>bc4a		1c				                .byte %00011100
8167	>bc4b		fe				                .byte %11111110
8168	>bc4c		1c				                .byte %00011100
8169	>bc4d		18				                .byte %00011000
8170	>bc4e		00				                .byte %00000000
8171	>bc4f		00				                .byte %00000000

8173							                ; CHR$138
8174	>bc50		18				                .byte %00011000
8175	>bc51		18				                .byte %00011000
8176	>bc52		18				                .byte %00011000
8177	>bc53		18				                .byte %00011000
8178	>bc54		7e				                .byte %01111110
8179	>bc55		3c				                .byte %00111100
8180	>bc56		18				                .byte %00011000
8181	>bc57		00				                .byte %00000000

8183							                ; CHR$139
8184	>bc58		00				                .byte %00000000
8185	>bc59		18				                .byte %00011000
8186	>bc5a		3c				                .byte %00111100
8187	>bc5b		7e				                .byte %01111110
8188	>bc5c		18				                .byte %00011000
8189	>bc5d		18				                .byte %00011000
8190	>bc5e		18				                .byte %00011000
8191	>bc5f		18				                .byte %00011000

8193							                ; CHR$140
8194	>bc60		30				                .byte %00110000
8195	>bc61		18				                .byte %00011000
8196	>bc62		3c				                .byte %00111100
8197	>bc63		06				                .byte %00000110
8198	>bc64		3e				                .byte %00111110
8199	>bc65		66				                .byte %01100110
8200	>bc66		3e				                .byte %00111110
8201	>bc67		00				                .byte %00000000

8203							                ; CHR$141
8204	>bc68		30				                .byte %00110000
8205	>bc69		18				                .byte %00011000
8206	>bc6a		3c				                .byte %00111100
8207	>bc6b		66				                .byte %01100110
8208	>bc6c		7e				                .byte %01111110
8209	>bc6d		60				                .byte %01100000
8210	>bc6e		3c				                .byte %00111100
8211	>bc6f		00				                .byte %00000000

8213							                ; CHR$142
8214	>bc70		66				                .byte %01100110
8215	>bc71		00				                .byte %00000000
8216	>bc72		3c				                .byte %00111100
8217	>bc73		66				                .byte %01100110
8218	>bc74		7e				                .byte %01111110
8219	>bc75		60				                .byte %01100000
8220	>bc76		3c				                .byte %00111100
8221	>bc77		00				                .byte %00000000

8223							                ; CHR$143
8224	>bc78		3c				                .byte %00111100
8225	>bc79		66				                .byte %01100110
8226	>bc7a		3c				                .byte %00111100
8227	>bc7b		66				                .byte %01100110
8228	>bc7c		7e				                .byte %01111110
8229	>bc7d		60				                .byte %01100000
8230	>bc7e		3c				                .byte %00111100
8231	>bc7f		00				                .byte %00000000

8233							                ; CHR$144
8234	>bc80		66				                .byte %01100110
8235	>bc81		00				                .byte %00000000
8236	>bc82		3c				                .byte %00111100
8237	>bc83		06				                .byte %00000110
8238	>bc84		3e				                .byte %00111110
8239	>bc85		66				                .byte %01100110
8240	>bc86		3e				                .byte %00111110
8241	>bc87		00				                .byte %00000000

8243							                ; CHR$145
8244	>bc88		3c				                .byte %00111100
8245	>bc89		66				                .byte %01100110
8246	>bc8a		3c				                .byte %00111100
8247	>bc8b		06				                .byte %00000110
8248	>bc8c		3e				                .byte %00111110
8249	>bc8d		66				                .byte %01100110
8250	>bc8e		3e				                .byte %00111110
8251	>bc8f		00				                .byte %00000000

8253							                ; CHR$146
8254	>bc90		00				                .byte %00000000
8255	>bc91		00				                .byte %00000000
8256	>bc92		3f				                .byte %00111111
8257	>bc93		0d				                .byte %00001101
8258	>bc94		3f				                .byte %00111111
8259	>bc95		6c				                .byte %01101100
8260	>bc96		3f				                .byte %00111111
8261	>bc97		00				                .byte %00000000

8263							                ; CHR$147
8264	>bc98		00				                .byte %00000000
8265	>bc99		00				                .byte %00000000
8266	>bc9a		3c				                .byte %00111100
8267	>bc9b		66				                .byte %01100110
8268	>bc9c		60				                .byte %01100000
8269	>bc9d		66				                .byte %01100110
8270	>bc9e		3c				                .byte %00111100
8271	>bc9f		60				                .byte %01100000

8273							                ; CHR$148
8274	>bca0		0c				                .byte %00001100
8275	>bca1		18				                .byte %00011000
8276	>bca2		3c				                .byte %00111100
8277	>bca3		66				                .byte %01100110
8278	>bca4		7e				                .byte %01111110
8279	>bca5		60				                .byte %01100000
8280	>bca6		3c				                .byte %00111100
8281	>bca7		00				                .byte %00000000

8283							                ; CHR$149
8285	>bca8		66				                .byte %01100110
8286	>bca9		00				                .byte %00000000
8287	>bcaa		00				                .byte %00000000
8288	>bcab		3c				                .byte %00111100
8289	>bcac		66				                .byte %01100110
8290	>bcad		66				                .byte %01100110
8291	>bcae		3c				                .byte %00111100
8292	>bcaf		00				                .byte %00000000

8304							                ; CHR$150
8306	>bcb0		66				                .byte %01100110
8307	>bcb1		00				                .byte %00000000
8308	>bcb2		00				                .byte %00000000
8309	>bcb3		66				                .byte %01100110
8310	>bcb4		66				                .byte %01100110
8311	>bcb5		66				                .byte %01100110
8312	>bcb6		3e				                .byte %00111110
8313	>bcb7		00				                .byte %00000000

8325							                ; CHR$151
8326	>bcb8		30				                .byte %00110000
8327	>bcb9		18				                .byte %00011000
8328	>bcba		00				                .byte %00000000
8329	>bcbb		38				                .byte %00111000
8330	>bcbc		18				                .byte %00011000
8331	>bcbd		18				                .byte %00011000
8332	>bcbe		3c				                .byte %00111100
8333	>bcbf		00				                .byte %00000000

8335							                ; CHR$152
8336	>bcc0		3c				                .byte %00111100
8337	>bcc1		66				                .byte %01100110
8338	>bcc2		00				                .byte %00000000
8339	>bcc3		38				                .byte %00111000
8340	>bcc4		18				                .byte %00011000
8341	>bcc5		18				                .byte %00011000
8342	>bcc6		3c				                .byte %00111100
8343	>bcc7		00				                .byte %00000000

8345							                ; CHR$153
8346	>bcc8		30				                .byte %00110000
8347	>bcc9		18				                .byte %00011000
8348	>bcca		00				                .byte %00000000
8349	>bccb		3c				                .byte %00111100
8350	>bccc		66				                .byte %01100110
8351	>bccd		66				                .byte %01100110
8352	>bcce		3c				                .byte %00111100
8353	>bccf		00				                .byte %00000000

8355							                ; CHR$154
8356	>bcd0		3c				                .byte %00111100
8357	>bcd1		66				                .byte %01100110
8358	>bcd2		00				                .byte %00000000
8359	>bcd3		3c				                .byte %00111100
8360	>bcd4		66				                .byte %01100110
8361	>bcd5		66				                .byte %01100110
8362	>bcd6		3c				                .byte %00111100
8363	>bcd7		00				                .byte %00000000

8365							                ; CHR$155
8366	>bcd8		30				                .byte %00110000
8367	>bcd9		18				                .byte %00011000
8368	>bcda		00				                .byte %00000000
8369	>bcdb		66				                .byte %01100110
8370	>bcdc		66				                .byte %01100110
8371	>bcdd		66				                .byte %01100110
8372	>bcde		3e				                .byte %00111110
8373	>bcdf		00				                .byte %00000000

8375							                ; CHR$156
8376	>bce0		3c				                .byte %00111100
8377	>bce1		66				                .byte %01100110
8378	>bce2		00				                .byte %00000000
8379	>bce3		66				                .byte %01100110
8380	>bce4		66				                .byte %01100110
8381	>bce5		66				                .byte %01100110
8382	>bce6		3e				                .byte %00111110
8383	>bce7		00				                .byte %00000000

8385							                ; CHR$157
8386	>bce8		66				                .byte %01100110
8387	>bce9		00				                .byte %00000000
8388	>bcea		66				                .byte %01100110
8389	>bceb		66				                .byte %01100110
8390	>bcec		66				                .byte %01100110
8391	>bced		3e				                .byte %00111110
8392	>bcee		06				                .byte %00000110
8393	>bcef		3c				                .byte %00111100

8395							                ; CHR$158
8396	>bcf0		00				                .byte %00000000
8397	>bcf1		66				                .byte %01100110
8398	>bcf2		3c				                .byte %00111100
8399	>bcf3		66				                .byte %01100110
8400	>bcf4		66				                .byte %01100110
8401	>bcf5		3c				                .byte %00111100
8402	>bcf6		66				                .byte %01100110
8403	>bcf7		00				                .byte %00000000

8405							                ; CHR$159
8406	>bcf8		3c				                .byte %00111100
8407	>bcf9		60				                .byte %01100000
8408	>bcfa		3c				                .byte %00111100
8409	>bcfb		66				                .byte %01100110
8410	>bcfc		3c				                .byte %00111100
8411	>bcfd		06				                .byte %00000110
8412	>bcfe		3c				                .byte %00111100
8413	>bcff		00				                .byte %00000000

8415							                ; CHR$160
8416	>bd00		3c				                .byte %00111100
8417	>bd01		66				                .byte %01100110
8418	>bd02		3c				                .byte %00111100
8419	>bd03		00				                .byte %00000000
8420	>bd04		00				                .byte %00000000
8421	>bd05		00				                .byte %00000000
8422	>bd06		00				                .byte %00000000
8423	>bd07		00				                .byte %00000000

8425							                ; CHR$161
8426	>bd08		00				                .byte %00000000
8427	>bd09		00				                .byte %00000000
8428	>bd0a		00				                .byte %00000000
8429	>bd0b		18				                .byte %00011000
8430	>bd0c		18				                .byte %00011000
8431	>bd0d		18				                .byte %00011000
8432	>bd0e		18				                .byte %00011000
8433	>bd0f		18				                .byte %00011000

8435							                ; CHR$162
8436	>bd10		00				                .byte %00000000
8437	>bd11		00				                .byte %00000000
8438	>bd12		00				                .byte %00000000
8439	>bd13		1f				                .byte %00011111
8440	>bd14		00				                .byte %00000000
8441	>bd15		00				                .byte %00000000
8442	>bd16		00				                .byte %00000000
8443	>bd17		00				                .byte %00000000

8445							                ; CHR$163
8446	>bd18		00				                .byte %00000000
8447	>bd19		00				                .byte %00000000
8448	>bd1a		00				                .byte %00000000
8449	>bd1b		1f				                .byte %00011111
8450	>bd1c		18				                .byte %00011000
8451	>bd1d		18				                .byte %00011000
8452	>bd1e		18				                .byte %00011000
8453	>bd1f		18				                .byte %00011000

8455							                ; CHR$164
8456	>bd20		00				                .byte %00000000
8457	>bd21		00				                .byte %00000000
8458	>bd22		00				                .byte %00000000
8459	>bd23		f8				                .byte %11111000
8460	>bd24		00				                .byte %00000000
8461	>bd25		00				                .byte %00000000
8462	>bd26		00				                .byte %00000000
8463	>bd27		00				                .byte %00000000

8465							                ; CHR$165
8466	>bd28		00				                .byte %00000000
8467	>bd29		00				                .byte %00000000
8468	>bd2a		00				                .byte %00000000
8469	>bd2b		f8				                .byte %11111000
8470	>bd2c		18				                .byte %00011000
8471	>bd2d		18				                .byte %00011000
8472	>bd2e		18				                .byte %00011000
8473	>bd2f		18				                .byte %00011000

8475							                ; CHR$166
8476	>bd30		00				                .byte %00000000
8477	>bd31		00				                .byte %00000000
8478	>bd32		00				                .byte %00000000
8479	>bd33		ff				                .byte %11111111
8480	>bd34		00				                .byte %00000000
8481	>bd35		00				                .byte %00000000
8482	>bd36		00				                .byte %00000000
8483	>bd37		00				                .byte %00000000

8485							                ; CHR$167
8486	>bd38		00				                .byte %00000000
8487	>bd39		00				                .byte %00000000
8488	>bd3a		00				                .byte %00000000
8489	>bd3b		ff				                .byte %11111111
8490	>bd3c		18				                .byte %00011000
8491	>bd3d		18				                .byte %00011000
8492	>bd3e		18				                .byte %00011000
8493	>bd3f		18				                .byte %00011000

8495							                ; CHR$168
8496	>bd40		18				                .byte %00011000
8497	>bd41		18				                .byte %00011000
8498	>bd42		18				                .byte %00011000
8499	>bd43		18				                .byte %00011000
8500	>bd44		00				                .byte %00000000
8501	>bd45		00				                .byte %00000000
8502	>bd46		00				                .byte %00000000
8503	>bd47		00				                .byte %00000000

8505							                ; CHR$169
8506	>bd48		18				                .byte %00011000
8507	>bd49		18				                .byte %00011000
8508	>bd4a		18				                .byte %00011000
8509	>bd4b		18				                .byte %00011000
8510	>bd4c		18				                .byte %00011000
8511	>bd4d		18				                .byte %00011000
8512	>bd4e		18				                .byte %00011000
8513	>bd4f		18				                .byte %00011000

8515							                ; CHR$170
8516	>bd50		18				                .byte %00011000
8517	>bd51		18				                .byte %00011000
8518	>bd52		18				                .byte %00011000
8519	>bd53		1f				                .byte %00011111
8520	>bd54		00				                .byte %00000000
8521	>bd55		00				                .byte %00000000
8522	>bd56		00				                .byte %00000000
8523	>bd57		00				                .byte %00000000

8525							                ; CHR$171
8526	>bd58		18				                .byte %00011000
8527	>bd59		18				                .byte %00011000
8528	>bd5a		18				                .byte %00011000
8529	>bd5b		1f				                .byte %00011111
8530	>bd5c		18				                .byte %00011000
8531	>bd5d		18				                .byte %00011000
8532	>bd5e		18				                .byte %00011000
8533	>bd5f		18				                .byte %00011000

8535							                ; CHR$172
8536	>bd60		18				                .byte %00011000
8537	>bd61		18				                .byte %00011000
8538	>bd62		18				                .byte %00011000
8539	>bd63		f8				                .byte %11111000
8540	>bd64		00				                .byte %00000000
8541	>bd65		00				                .byte %00000000
8542	>bd66		00				                .byte %00000000
8543	>bd67		00				                .byte %00000000

8545							                ; CHR$173
8546	>bd68		18				                .byte %00011000
8547	>bd69		18				                .byte %00011000
8548	>bd6a		18				                .byte %00011000
8549	>bd6b		f8				                .byte %11111000
8550	>bd6c		18				                .byte %00011000
8551	>bd6d		18				                .byte %00011000
8552	>bd6e		18				                .byte %00011000
8553	>bd6f		18				                .byte %00011000

8555							                ; CHR$174
8556	>bd70		18				                .byte %00011000
8557	>bd71		18				                .byte %00011000
8558	>bd72		18				                .byte %00011000
8559	>bd73		ff				                .byte %11111111
8560	>bd74		00				                .byte %00000000
8561	>bd75		00				                .byte %00000000
8562	>bd76		00				                .byte %00000000
8563	>bd77		00				                .byte %00000000

8565							                ; CHR$175
8566	>bd78		18				                .byte %00011000
8567	>bd79		18				                .byte %00011000
8568	>bd7a		18				                .byte %00011000
8569	>bd7b		ff				                .byte %11111111
8570	>bd7c		18				                .byte %00011000
8571	>bd7d		18				                .byte %00011000
8572	>bd7e		18				                .byte %00011000
8573	>bd7f		18				                .byte %00011000

8575							                ; CHR$176
8576	>bd80		00				                .byte %00000000
8577	>bd81		00				                .byte %00000000
8578	>bd82		00				                .byte %00000000
8579	>bd83		07				                .byte %00000111
8580	>bd84		0c				                .byte %00001100
8581	>bd85		18				                .byte %00011000
8582	>bd86		18				                .byte %00011000
8583	>bd87		18				                .byte %00011000

8585							                ; CHR$177
8586	>bd88		00				                .byte %00000000
8587	>bd89		00				                .byte %00000000
8588	>bd8a		00				                .byte %00000000
8589	>bd8b		e0				                .byte %11100000
8590	>bd8c		30				                .byte %00110000
8591	>bd8d		18				                .byte %00011000
8592	>bd8e		18				                .byte %00011000
8593	>bd8f		18				                .byte %00011000

8595							                ; CHR$178
8596	>bd90		18				                .byte %00011000
8597	>bd91		18				                .byte %00011000
8598	>bd92		0c				                .byte %00001100
8599	>bd93		07				                .byte %00000111
8600	>bd94		00				                .byte %00000000
8601	>bd95		00				                .byte %00000000
8602	>bd96		00				                .byte %00000000
8603	>bd97		00				                .byte %00000000

8605							                ; CHR$179
8606	>bd98		18				                .byte %00011000
8607	>bd99		18				                .byte %00011000
8608	>bd9a		30				                .byte %00110000
8609	>bd9b		e0				                .byte %11100000
8610	>bd9c		00				                .byte %00000000
8611	>bd9d		00				                .byte %00000000
8612	>bd9e		00				                .byte %00000000
8613	>bd9f		00				                .byte %00000000

8615							                ; CHR$180
8616	>bda0		18				                .byte %00011000
8617	>bda1		00				                .byte %00000000
8618	>bda2		18				                .byte %00011000
8619	>bda3		18				                .byte %00011000
8620	>bda4		30				                .byte %00110000
8621	>bda5		66				                .byte %01100110
8622	>bda6		3c				                .byte %00111100
8623	>bda7		00				                .byte %00000000

8625							                ; CHR$181
8626	>bda8		18				                .byte %00011000
8627	>bda9		00				                .byte %00000000
8628	>bdaa		18				                .byte %00011000
8629	>bdab		18				                .byte %00011000
8630	>bdac		18				                .byte %00011000
8631	>bdad		18				                .byte %00011000
8632	>bdae		18				                .byte %00011000
8633	>bdaf		00				                .byte %00000000

8635							                ; CHR$182
8636	>bdb0		36				                .byte %00110110
8637	>bdb1		6c				                .byte %01101100
8638	>bdb2		00				                .byte %00000000
8639	>bdb3		66				                .byte %01100110
8640	>bdb4		76				                .byte %01110110
8641	>bdb5		6e				                .byte %01101110
8642	>bdb6		66				                .byte %01100110
8643	>bdb7		00				                .byte %00000000

8645							                ; CHR$183
8646	>bdb8		36				                .byte %00110110
8647	>bdb9		6c				                .byte %01101100
8648	>bdba		00				                .byte %00000000
8649	>bdbb		7c				                .byte %01111100
8650	>bdbc		66				                .byte %01100110
8651	>bdbd		66				                .byte %01100110
8652	>bdbe		66				                .byte %01100110
8653	>bdbf		00				                .byte %00000000

8655							                ; CHR$184
8656	>bdc0		18				                .byte %00011000
8657	>bdc1		7e				                .byte %01111110
8658	>bdc2		18				                .byte %00011000
8659	>bdc3		18				                .byte %00011000
8660	>bdc4		18				                .byte %00011000
8661	>bdc5		18				                .byte %00011000
8662	>bdc6		18				                .byte %00011000
8663	>bdc7		00				                .byte %00000000

8665							                ; CHR$185
8666	>bdc8		18				                .byte %00011000
8667	>bdc9		7e				                .byte %01111110
8668	>bdca		18				                .byte %00011000
8669	>bdcb		18				                .byte %00011000
8670	>bdcc		18				                .byte %00011000
8671	>bdcd		7e				                .byte %01111110
8672	>bdce		18				                .byte %00011000
8673	>bdcf		00				                .byte %00000000

8675							                ; CHR$186
8677	>bdd0		18				                .byte %00011000
8678	>bdd1		00				                .byte %00000000
8679	>bdd2		00				                .byte %00000000
8680	>bdd3		00				                .byte %00000000
8681	>bdd4		00				                .byte %00000000
8682	>bdd5		00				                .byte %00000000
8683	>bdd6		00				                .byte %00000000
8684	>bdd7		00				                .byte %00000000

8696							                ; CHR$187
8698	>bdd8		30				                .byte %00110000
8699	>bdd9		18				                .byte %00011000
8700	>bdda		00				                .byte %00000000
8701	>bddb		00				                .byte %00000000
8702	>bddc		00				                .byte %00000000
8703	>bddd		00				                .byte %00000000
8704	>bdde		00				                .byte %00000000
8705	>bddf		00				                .byte %00000000

8717							                ; CHR$188
8719	>bde0		03				                .byte %00000011
8720	>bde1		3e				                .byte %00111110
8721	>bde2		76				                .byte %01110110
8722	>bde3		76				                .byte %01110110
8723	>bde4		36				                .byte %00110110
8724	>bde5		36				                .byte %00110110
8725	>bde6		3e				                .byte %00111110
8726	>bde7		00				                .byte %00000000

8738							                ; CHR$189
8739	>bde8		00				                .byte %00000000
8740	>bde9		00				                .byte %00000000
8741	>bdea		00				                .byte %00000000
8742	>bdeb		18				                .byte %00011000
8743	>bdec		18				                .byte %00011000
8744	>bded		00				                .byte %00000000
8745	>bdee		00				                .byte %00000000
8746	>bdef		00				                .byte %00000000

8748							                ; CHR$190
8749	>bdf0		03				                .byte %00000011
8750	>bdf1		03				                .byte %00000011
8751	>bdf2		06				                .byte %00000110
8752	>bdf3		06				                .byte %00000110
8753	>bdf4		76				                .byte %01110110
8754	>bdf5		1c				                .byte %00011100
8755	>bdf6		0c				                .byte %00001100
8756	>bdf7		00				                .byte %00000000

8758							                ; CHR$191
8759	>bdf8		aa				                .byte %10101010
8760	>bdf9		55				                .byte %01010101
8761	>bdfa		aa				                .byte %10101010
8762	>bdfb		55				                .byte %01010101
8763	>bdfc		aa				                .byte %10101010
8764	>bdfd		55				                .byte %01010101
8765	>bdfe		aa				                .byte %10101010
8766	>bdff		55				                .byte %01010101

8768							                ; CHR$192
8769	>be00		3e				                .byte %00111110
8770	>be01		63				                .byte %01100011
8771	>be02		67				                .byte %01100111
8772	>be03		6b				                .byte %01101011
8773	>be04		73				                .byte %01110011
8774	>be05		63				                .byte %01100011
8775	>be06		3e				                .byte %00111110
8776	>be07		00				                .byte %00000000

8778							                ; CHR$193
8779	>be08		1c				                .byte %00011100
8780	>be09		36				                .byte %00110110
8781	>be0a		63				                .byte %01100011
8782	>be0b		63				                .byte %01100011
8783	>be0c		7f				                .byte %01111111
8784	>be0d		63				                .byte %01100011
8785	>be0e		63				                .byte %01100011
8786	>be0f		00				                .byte %00000000

8788							                ; CHR$194
8789	>be10		7e				                .byte %01111110
8790	>be11		33				                .byte %00110011
8791	>be12		33				                .byte %00110011
8792	>be13		3e				                .byte %00111110
8793	>be14		33				                .byte %00110011
8794	>be15		33				                .byte %00110011
8795	>be16		7e				                .byte %01111110
8796	>be17		00				                .byte %00000000

8798							                ; CHR$195
8799	>be18		7f				                .byte %01111111
8800	>be19		63				                .byte %01100011
8801	>be1a		60				                .byte %01100000
8802	>be1b		60				                .byte %01100000
8803	>be1c		60				                .byte %01100000
8804	>be1d		60				                .byte %01100000
8805	>be1e		60				                .byte %01100000
8806	>be1f		00				                .byte %00000000

8808							                ; CHR$196
8809	>be20		1c				                .byte %00011100
8810	>be21		1c				                .byte %00011100
8811	>be22		36				                .byte %00110110
8812	>be23		36				                .byte %00110110
8813	>be24		63				                .byte %01100011
8814	>be25		63				                .byte %01100011
8815	>be26		7f				                .byte %01111111
8816	>be27		00				                .byte %00000000

8818							                ; CHR$197
8819	>be28		7f				                .byte %01111111
8820	>be29		33				                .byte %00110011
8821	>be2a		30				                .byte %00110000
8822	>be2b		3e				                .byte %00111110
8823	>be2c		30				                .byte %00110000
8824	>be2d		33				                .byte %00110011
8825	>be2e		7f				                .byte %01111111
8826	>be2f		00				                .byte %00000000

8828							                ; CHR$198
8829	>be30		7e				                .byte %01111110
8830	>be31		66				                .byte %01100110
8831	>be32		0c				                .byte %00001100
8832	>be33		18				                .byte %00011000
8833	>be34		30				                .byte %00110000
8834	>be35		66				                .byte %01100110
8835	>be36		7e				                .byte %01111110
8836	>be37		00				                .byte %00000000

8838							                ; CHR$199
8839	>be38		77				                .byte %01110111
8840	>be39		33				                .byte %00110011
8841	>be3a		33				                .byte %00110011
8842	>be3b		3f				                .byte %00111111
8843	>be3c		33				                .byte %00110011
8844	>be3d		33				                .byte %00110011
8845	>be3e		77				                .byte %01110111
8846	>be3f		00				                .byte %00000000

8848							                ; CHR$200
8849	>be40		3e				                .byte %00111110
8850	>be41		63				                .byte %01100011
8851	>be42		63				                .byte %01100011
8852	>be43		7f				                .byte %01111111
8853	>be44		63				                .byte %01100011
8854	>be45		63				                .byte %01100011
8855	>be46		3e				                .byte %00111110
8856	>be47		00				                .byte %00000000

8858							                ; CHR$201
8859	>be48		3c				                .byte %00111100
8860	>be49		18				                .byte %00011000
8861	>be4a		18				                .byte %00011000
8862	>be4b		18				                .byte %00011000
8863	>be4c		18				                .byte %00011000
8864	>be4d		18				                .byte %00011000
8865	>be4e		3c				                .byte %00111100
8866	>be4f		00				                .byte %00000000

8868							                ; CHR$202
8869	>be50		63				                .byte %01100011
8870	>be51		66				                .byte %01100110
8871	>be52		6c				                .byte %01101100
8872	>be53		78				                .byte %01111000
8873	>be54		6c				                .byte %01101100
8874	>be55		66				                .byte %01100110
8875	>be56		63				                .byte %01100011
8876	>be57		00				                .byte %00000000

8878							                ; CHR$203
8879	>be58		1c				                .byte %00011100
8880	>be59		1c				                .byte %00011100
8881	>be5a		36				                .byte %00110110
8882	>be5b		36				                .byte %00110110
8883	>be5c		63				                .byte %01100011
8884	>be5d		63				                .byte %01100011
8885	>be5e		63				                .byte %01100011
8886	>be5f		00				                .byte %00000000

8888							                ; CHR$204
8889	>be60		63				                .byte %01100011
8890	>be61		77				                .byte %01110111
8891	>be62		7f				                .byte %01111111
8892	>be63		6b				                .byte %01101011
8893	>be64		63				                .byte %01100011
8894	>be65		63				                .byte %01100011
8895	>be66		63				                .byte %01100011
8896	>be67		00				                .byte %00000000

8898							                ; CHR$205
8899	>be68		63				                .byte %01100011
8900	>be69		73				                .byte %01110011
8901	>be6a		7b				                .byte %01111011
8902	>be6b		6f				                .byte %01101111
8903	>be6c		67				                .byte %01100111
8904	>be6d		63				                .byte %01100011
8905	>be6e		63				                .byte %01100011
8906	>be6f		00				                .byte %00000000

8908							                ; CHR$206
8909	>be70		7e				                .byte %01111110
8910	>be71		00				                .byte %00000000
8911	>be72		00				                .byte %00000000
8912	>be73		3c				                .byte %00111100
8913	>be74		00				                .byte %00000000
8914	>be75		00				                .byte %00000000
8915	>be76		7e				                .byte %01111110
8916	>be77		00				                .byte %00000000

8918							                ; CHR$207
8919	>be78		3e				                .byte %00111110
8920	>be79		63				                .byte %01100011
8921	>be7a		63				                .byte %01100011
8922	>be7b		63				                .byte %01100011
8923	>be7c		63				                .byte %01100011
8924	>be7d		63				                .byte %01100011
8925	>be7e		3e				                .byte %00111110
8926	>be7f		00				                .byte %00000000

8928							                ; CHR$208
8929	>be80		7f				                .byte %01111111
8930	>be81		36				                .byte %00110110
8931	>be82		36				                .byte %00110110
8932	>be83		36				                .byte %00110110
8933	>be84		36				                .byte %00110110
8934	>be85		36				                .byte %00110110
8935	>be86		36				                .byte %00110110
8936	>be87		00				                .byte %00000000

8938							                ; CHR$209
8939	>be88		7e				                .byte %01111110
8940	>be89		33				                .byte %00110011
8941	>be8a		33				                .byte %00110011
8942	>be8b		3e				                .byte %00111110
8943	>be8c		30				                .byte %00110000
8944	>be8d		30				                .byte %00110000
8945	>be8e		78				                .byte %01111000
8946	>be8f		00				                .byte %00000000

8948							                ; CHR$210
8949	>be90		7f				                .byte %01111111
8950	>be91		63				                .byte %01100011
8951	>be92		30				                .byte %00110000
8952	>be93		18				                .byte %00011000
8953	>be94		30				                .byte %00110000
8954	>be95		63				                .byte %01100011
8955	>be96		7f				                .byte %01111111
8956	>be97		00				                .byte %00000000

8958							                ; CHR$211
8959	>be98		7e				                .byte %01111110
8960	>be99		5a				                .byte %01011010
8961	>be9a		18				                .byte %00011000
8962	>be9b		18				                .byte %00011000
8963	>be9c		18				                .byte %00011000
8964	>be9d		18				                .byte %00011000
8965	>be9e		18				                .byte %00011000
8966	>be9f		00				                .byte %00000000

8968							                ; CHR$212
8969	>bea0		66				                .byte %01100110
8970	>bea1		66				                .byte %01100110
8971	>bea2		66				                .byte %01100110
8972	>bea3		3c				                .byte %00111100
8973	>bea4		18				                .byte %00011000
8974	>bea5		18				                .byte %00011000
8975	>bea6		3c				                .byte %00111100
8976	>bea7		00				                .byte %00000000

8978							                ; CHR$213
8979	>bea8		3e				                .byte %00111110
8980	>bea9		08				                .byte %00001000
8981	>beaa		3e				                .byte %00111110
8982	>beab		6b				                .byte %01101011
8983	>beac		3e				                .byte %00111110
8984	>bead		08				                .byte %00001000
8985	>beae		3e				                .byte %00111110
8986	>beaf		00				                .byte %00000000

8988							                ; CHR$214
8989	>beb0		63				                .byte %01100011
8990	>beb1		63				                .byte %01100011
8991	>beb2		36				                .byte %00110110
8992	>beb3		1c				                .byte %00011100
8993	>beb4		36				                .byte %00110110
8994	>beb5		63				                .byte %01100011
8995	>beb6		63				                .byte %01100011
8996	>beb7		00				                .byte %00000000

8998							                ; CHR$215
8999	>beb8		3e				                .byte %00111110
9000	>beb9		08				                .byte %00001000
9001	>beba		6b				                .byte %01101011
9002	>bebb		6b				                .byte %01101011
9003	>bebc		3e				                .byte %00111110
9004	>bebd		08				                .byte %00001000
9005	>bebe		3e				                .byte %00111110
9006	>bebf		00				                .byte %00000000

9008							                ; CHR$216
9009	>bec0		3e				                .byte %00111110
9010	>bec1		63				                .byte %01100011
9011	>bec2		63				                .byte %01100011
9012	>bec3		63				                .byte %01100011
9013	>bec4		36				                .byte %00110110
9014	>bec5		36				                .byte %00110110
9015	>bec6		63				                .byte %01100011
9016	>bec7		00				                .byte %00000000

9018							                ; CHR$217
9019	>bec8		7f				                .byte %01111111
9020	>bec9		63				                .byte %01100011
9021	>beca		63				                .byte %01100011
9022	>becb		36				                .byte %00110110
9023	>becc		36				                .byte %00110110
9024	>becd		1c				                .byte %00011100
9025	>bece		1c				                .byte %00011100
9026	>becf		00				                .byte %00000000

9028							                ; CHR$218
9029	>bed0		18				                .byte %00011000
9030	>bed1		18				                .byte %00011000
9031	>bed2		7e				                .byte %01111110
9032	>bed3		18				                .byte %00011000
9033	>bed4		18				                .byte %00011000
9034	>bed5		00				                .byte %00000000
9035	>bed6		7e				                .byte %01111110
9036	>bed7		00				                .byte %00000000

9038							                ; CHR$219
9039	>bed8		00				                .byte %00000000
9040	>bed9		7e				                .byte %01111110
9041	>beda		00				                .byte %00000000
9042	>bedb		18				                .byte %00011000
9043	>bedc		18				                .byte %00011000
9044	>bedd		7e				                .byte %01111110
9045	>bede		18				                .byte %00011000
9046	>bedf		18				                .byte %00011000

9048							                ; CHR$220
9049	>bee0		18				                .byte %00011000
9050	>bee1		18				                .byte %00011000
9051	>bee2		18				                .byte %00011000
9052	>bee3		18				                .byte %00011000
9053	>bee4		18				                .byte %00011000
9054	>bee5		18				                .byte %00011000
9055	>bee6		18				                .byte %00011000
9056	>bee7		00				                .byte %00000000

9058							                ; CHR$221
9059	>bee8		36				                .byte %00110110
9060	>bee9		36				                .byte %00110110
9061	>beea		36				                .byte %00110110
9062	>beeb		36				                .byte %00110110
9063	>beec		36				                .byte %00110110
9064	>beed		36				                .byte %00110110
9065	>beee		36				                .byte %00110110
9066	>beef		00				                .byte %00000000

9068							                ; CHR$222
9069	>bef0		00				                .byte %00000000
9070	>bef1		66				                .byte %01100110
9071	>bef2		66				                .byte %01100110
9072	>bef3		66				                .byte %01100110
9073	>bef4		66				                .byte %01100110
9074	>bef5		66				                .byte %01100110
9075	>bef6		3c				                .byte %00111100
9076	>bef7		00				                .byte %00000000

9078							                ; CHR$223
9079	>bef8		00				                .byte %00000000
9080	>bef9		3c				                .byte %00111100
9081	>befa		66				                .byte %01100110
9082	>befb		66				                .byte %01100110
9083	>befc		66				                .byte %01100110
9084	>befd		66				                .byte %01100110
9085	>befe		66				                .byte %01100110
9086	>beff		00				                .byte %00000000

9088							                ; CHR$224
9090	>bf00		00				                .byte %00000000
9091	>bf01		02				                .byte %00000010
9092	>bf02		3c				                .byte %00111100
9093	>bf03		6e				                .byte %01101110
9094	>bf04		76				                .byte %01110110
9095	>bf05		66				                .byte %01100110
9096	>bf06		bc				                .byte %10111100
9097	>bf07		00				                .byte %00000000

9109							                ; CHR$225
9110	>bf08		00				                .byte %00000000
9111	>bf09		00				                .byte %00000000
9112	>bf0a		3b				                .byte %00111011
9113	>bf0b		6e				                .byte %01101110
9114	>bf0c		66				                .byte %01100110
9115	>bf0d		6e				                .byte %01101110
9116	>bf0e		3b				                .byte %00111011
9117	>bf0f		00				                .byte %00000000

9119							                ; CHR$226
9120	>bf10		1e				                .byte %00011110
9121	>bf11		33				                .byte %00110011
9122	>bf12		33				                .byte %00110011
9123	>bf13		3e				                .byte %00111110
9124	>bf14		33				                .byte %00110011
9125	>bf15		33				                .byte %00110011
9126	>bf16		3e				                .byte %00111110
9127	>bf17		60				                .byte %01100000

9129							                ; CHR$227
9130	>bf18		00				                .byte %00000000
9131	>bf19		00				                .byte %00000000
9132	>bf1a		66				                .byte %01100110
9133	>bf1b		36				                .byte %00110110
9134	>bf1c		1c				                .byte %00011100
9135	>bf1d		18				                .byte %00011000
9136	>bf1e		30				                .byte %00110000
9137	>bf1f		30				                .byte %00110000

9139							                ; CHR$228
9140	>bf20		3c				                .byte %00111100
9141	>bf21		60				                .byte %01100000
9142	>bf22		30				                .byte %00110000
9143	>bf23		3c				                .byte %00111100
9144	>bf24		66				                .byte %01100110
9145	>bf25		66				                .byte %01100110
9146	>bf26		3c				                .byte %00111100
9147	>bf27		00				                .byte %00000000

9149							                ; CHR$229
9150	>bf28		00				                .byte %00000000
9151	>bf29		00				                .byte %00000000
9152	>bf2a		1e				                .byte %00011110
9153	>bf2b		30				                .byte %00110000
9154	>bf2c		1c				                .byte %00011100
9155	>bf2d		30				                .byte %00110000
9156	>bf2e		1e				                .byte %00011110
9157	>bf2f		00				                .byte %00000000

9159							                ; CHR$230
9160	>bf30		3e				                .byte %00111110
9161	>bf31		0c				                .byte %00001100
9162	>bf32		18				                .byte %00011000
9163	>bf33		30				                .byte %00110000
9164	>bf34		60				                .byte %01100000
9165	>bf35		60				                .byte %01100000
9166	>bf36		3e				                .byte %00111110
9167	>bf37		06				                .byte %00000110

9169							                ; CHR$231
9170	>bf38		00				                .byte %00000000
9171	>bf39		00				                .byte %00000000
9172	>bf3a		7c				                .byte %01111100
9173	>bf3b		66				                .byte %01100110
9174	>bf3c		66				                .byte %01100110
9175	>bf3d		66				                .byte %01100110
9176	>bf3e		06				                .byte %00000110
9177	>bf3f		06				                .byte %00000110

9179							                ; CHR$232
9180	>bf40		3c				                .byte %00111100
9181	>bf41		66				                .byte %01100110
9182	>bf42		66				                .byte %01100110
9183	>bf43		7e				                .byte %01111110
9184	>bf44		66				                .byte %01100110
9185	>bf45		66				                .byte %01100110
9186	>bf46		3c				                .byte %00111100
9187	>bf47		00				                .byte %00000000

9189							                ; CHR$233
9190	>bf48		00				                .byte %00000000
9191	>bf49		00				                .byte %00000000
9192	>bf4a		18				                .byte %00011000
9193	>bf4b		18				                .byte %00011000
9194	>bf4c		18				                .byte %00011000
9195	>bf4d		18				                .byte %00011000
9196	>bf4e		0c				                .byte %00001100
9197	>bf4f		00				                .byte %00000000

9199							                ; CHR$234
9200	>bf50		00				                .byte %00000000
9201	>bf51		00				                .byte %00000000
9202	>bf52		66				                .byte %01100110
9203	>bf53		6c				                .byte %01101100
9204	>bf54		78				                .byte %01111000
9205	>bf55		6c				                .byte %01101100
9206	>bf56		66				                .byte %01100110
9207	>bf57		00				                .byte %00000000

9209							                ; CHR$235
9210	>bf58		60				                .byte %01100000
9211	>bf59		30				                .byte %00110000
9212	>bf5a		18				                .byte %00011000
9213	>bf5b		1c				                .byte %00011100
9214	>bf5c		36				                .byte %00110110
9215	>bf5d		63				                .byte %01100011
9216	>bf5e		63				                .byte %01100011
9217	>bf5f		00				                .byte %00000000

9219							                ; CHR$236
9220	>bf60		00				                .byte %00000000
9221	>bf61		00				                .byte %00000000
9222	>bf62		33				                .byte %00110011
9223	>bf63		33				                .byte %00110011
9224	>bf64		33				                .byte %00110011
9225	>bf65		33				                .byte %00110011
9226	>bf66		3e				                .byte %00111110
9227	>bf67		60				                .byte %01100000

9229							                ; CHR$237
9230	>bf68		00				                .byte %00000000
9231	>bf69		00				                .byte %00000000
9232	>bf6a		63				                .byte %01100011
9233	>bf6b		33				                .byte %00110011
9234	>bf6c		1b				                .byte %00011011
9235	>bf6d		1e				                .byte %00011110
9236	>bf6e		1c				                .byte %00011100
9237	>bf6f		00				                .byte %00000000

9239							                ; CHR$238
9241	>bf70		0c				                .byte %00001100
9242	>bf71		3e				                .byte %00111110
9243	>bf72		60				                .byte %01100000
9244	>bf73		3c				                .byte %00111100
9245	>bf74		60				                .byte %01100000
9246	>bf75		3e				                .byte %00111110
9247	>bf76		06				                .byte %00000110
9248	>bf77		0c				                .byte %00001100

9260							                ; CHR$239
9261	>bf78		00				                .byte %00000000
9262	>bf79		00				                .byte %00000000
9263	>bf7a		3e				                .byte %00111110
9264	>bf7b		63				                .byte %01100011
9265	>bf7c		63				                .byte %01100011
9266	>bf7d		63				                .byte %01100011
9267	>bf7e		3e				                .byte %00111110
9268	>bf7f		00				                .byte %00000000

9270							                ; CHR$240
9271	>bf80		00				                .byte %00000000
9272	>bf81		00				                .byte %00000000
9273	>bf82		7f				                .byte %01111111
9274	>bf83		36				                .byte %00110110
9275	>bf84		36				                .byte %00110110
9276	>bf85		36				                .byte %00110110
9277	>bf86		36				                .byte %00110110
9278	>bf87		00				                .byte %00000000

9280							                ; CHR$241
9281	>bf88		00				                .byte %00000000
9282	>bf89		00				                .byte %00000000
9283	>bf8a		3c				                .byte %00111100
9284	>bf8b		66				                .byte %01100110
9285	>bf8c		66				                .byte %01100110
9286	>bf8d		7c				                .byte %01111100
9287	>bf8e		60				                .byte %01100000
9288	>bf8f		60				                .byte %01100000

9290							                ; CHR$242
9291	>bf90		00				                .byte %00000000
9292	>bf91		00				                .byte %00000000
9293	>bf92		3f				                .byte %00111111
9294	>bf93		66				                .byte %01100110
9295	>bf94		66				                .byte %01100110
9296	>bf95		66				                .byte %01100110
9297	>bf96		3c				                .byte %00111100
9298	>bf97		00				                .byte %00000000

9300							                ; CHR$243
9301	>bf98		00				                .byte %00000000
9302	>bf99		00				                .byte %00000000
9303	>bf9a		7e				                .byte %01111110
9304	>bf9b		18				                .byte %00011000
9305	>bf9c		18				                .byte %00011000
9306	>bf9d		18				                .byte %00011000
9307	>bf9e		0c				                .byte %00001100
9308	>bf9f		00				                .byte %00000000

9310							                ; CHR$244
9311	>bfa0		00				                .byte %00000000
9312	>bfa1		00				                .byte %00000000
9313	>bfa2		73				                .byte %01110011
9314	>bfa3		33				                .byte %00110011
9315	>bfa4		33				                .byte %00110011
9316	>bfa5		33				                .byte %00110011
9317	>bfa6		1e				                .byte %00011110
9318	>bfa7		00				                .byte %00000000

9320							                ; CHR$245
9321	>bfa8		00				                .byte %00000000
9322	>bfa9		00				                .byte %00000000
9323	>bfaa		3e				                .byte %00111110
9324	>bfab		6b				                .byte %01101011
9325	>bfac		6b				                .byte %01101011
9326	>bfad		3e				                .byte %00111110
9327	>bfae		18				                .byte %00011000
9328	>bfaf		18				                .byte %00011000

9330							                ; CHR$246
9331	>bfb0		00				                .byte %00000000
9332	>bfb1		00				                .byte %00000000
9333	>bfb2		66				                .byte %01100110
9334	>bfb3		36				                .byte %00110110
9335	>bfb4		1c				                .byte %00011100
9336	>bfb5		1c				                .byte %00011100
9337	>bfb6		36				                .byte %00110110
9338	>bfb7		33				                .byte %00110011

9340							                ; CHR$247
9341	>bfb8		00				                .byte %00000000
9342	>bfb9		00				                .byte %00000000
9343	>bfba		63				                .byte %01100011
9344	>bfbb		6b				                .byte %01101011
9345	>bfbc		6b				                .byte %01101011
9346	>bfbd		3e				                .byte %00111110
9347	>bfbe		18				                .byte %00011000
9348	>bfbf		18				                .byte %00011000

9350							                ; CHR$248
9352	>bfc0		00				                .byte %00000000
9353	>bfc1		00				                .byte %00000000
9354	>bfc2		63				                .byte %01100011
9355	>bfc3		63				                .byte %01100011
9356	>bfc4		6b				                .byte %01101011
9357	>bfc5		7f				                .byte %01111111
9358	>bfc6		36				                .byte %00110110
9359	>bfc7		00				                .byte %00000000

9371							                ; CHR$249
9372	>bfc8		38				                .byte %00111000
9373	>bfc9		0c				                .byte %00001100
9374	>bfca		06				                .byte %00000110
9375	>bfcb		3e				                .byte %00111110
9376	>bfcc		66				                .byte %01100110
9377	>bfcd		66				                .byte %01100110
9378	>bfce		3c				                .byte %00111100
9379	>bfcf		00				                .byte %00000000

9381							                ; CHR$250
9382	>bfd0		00				                .byte %00000000
9383	>bfd1		31				                .byte %00110001
9384	>bfd2		6b				                .byte %01101011
9385	>bfd3		46				                .byte %01000110
9386	>bfd4		00				                .byte %00000000
9387	>bfd5		7f				                .byte %01111111
9388	>bfd6		00				                .byte %00000000
9389	>bfd7		00				                .byte %00000000

9391							                ; CHR$251
9392	>bfd8		00				                .byte %00000000
9393	>bfd9		7e				                .byte %01111110
9394	>bfda		00				                .byte %00000000
9395	>bfdb		7e				                .byte %01111110
9396	>bfdc		00				                .byte %00000000
9397	>bfdd		7e				                .byte %01111110
9398	>bfde		00				                .byte %00000000
9399	>bfdf		00				                .byte %00000000

9401							                ; CHR$252
9402	>bfe0		07				                .byte %00000111
9403	>bfe1		1c				                .byte %00011100
9404	>bfe2		70				                .byte %01110000
9405	>bfe3		1c				                .byte %00011100
9406	>bfe4		07				                .byte %00000111
9407	>bfe5		00				                .byte %00000000
9408	>bfe6		7f				                .byte %01111111
9409	>bfe7		00				                .byte %00000000

9411							                ; CHR$253
9412	>bfe8		06				                .byte %00000110
9413	>bfe9		0c				                .byte %00001100
9414	>bfea		7e				                .byte %01111110
9415	>bfeb		18				                .byte %00011000
9416	>bfec		7e				                .byte %01111110
9417	>bfed		30				                .byte %00110000
9418	>bfee		60				                .byte %01100000
9419	>bfef		00				                .byte %00000000

9421							                ; CHR$254
9422	>bff0		70				                .byte %01110000
9423	>bff1		1c				                .byte %00011100
9424	>bff2		07				                .byte %00000111
9425	>bff3		1c				                .byte %00011100
9426	>bff4		70				                .byte %01110000
9427	>bff5		00				                .byte %00000000
9428	>bff6		7f				                .byte %01111111
9429	>bff7		00				                .byte %00000000

9431							                ; CHR$255
9432	>bff8		ff				                .byte %11111111
9433	>bff9		ff				                .byte %11111111
9434	>bffa		ff				                .byte %11111111
9435	>bffb		ff				                .byte %11111111
9436	>bffc		ff				                .byte %11111111
9437	>bffd		ff				                .byte %11111111
9438	>bffe		ff				                .byte %11111111
9439	>bfff		ff				                .byte %11111111

:1	;******  Return to file: mos329.s65

35							                .endsection

37							                .section mos
38							                .include "src/mos.s65"

:15	;******  Processing file: src/mos.s65

1							; -*- comment-column:45; -*-

3							testVDU5State: .macro
10							                .endmacro

12							; VDU driver entry block
13							; ======================
14	.c000						LC000:                                       ; Read from VDU memory
15	.c000		b1 d6		lda ($d6),y	                lda (ZMEMG),y
16	.c002		60		rts		                rts
17	.c003						LC003:                                       ; Write to VDU memory
18	.c003		91 d6		sta ($d6),y	                sta (ZMEMG),y
19	.c005		60		rts		                rts

21							; MasRef E.4-6
22							;
23							; JSR PLBYTE plots the mask held in ZMASK into the byte pointed to by
24							; (ZMEMG),y, using ZGORA and ZGEOR as colour masks. See GADDR below
25							; for an example of its use.
26							;
27							; PLBYTE uses ZTEMP as workspace and preserves X, Y, V and C.
28	.c006						PLBYTE:
29	.c006		4c 50 db	jmp $db50	                jmp plbyteEntryPoint

31							; MasRef E.4-6
32							;
33							; JSR HPLOT plots a fast horizontal line in the current graphics
34							; colour or ECF and the current graphics mode (all as set by VDU 18)
35							; between two specified points. It is the low level primitive used by
36							; all the MOS area fill commands.
37							;
38							; On entry, two 4 byte areas at &300+X and &300+Y contain the
39							; coordinates of the two endpoints, in the standard
40							; lowX,highX,lowY,highY order. Should the Y coordinates differ, the Y
41							; coordinate of the line plotted is taken from the leftmost of the two
42							; points specified.
43							;
44							; Only portions of the line inside the graphics window are plotted.
45							; Subject to this, both endpoints of the line are plotted.
46							;
47							; HPLOT uses ZGORA, ZGEOR, ZMASK, ZMEMG, ZTEMP (but not ZTEMP+1),
48							; ZTEMPB, ZTEMPB+1, ZTEMPC and ZTEMPC+1 as workspace. No registers or
49							; flags are preserved.
50	.c009						HPLOT:
51	.c009		4c e7 da	jmp $dae7	                jmp LDAE8

53							; MasRef E.4-6
54							;
55							; JSR EIGABS converts the 4 byte pair of external coordinates at
56							; &300+X where X>=2 (in standard lowX,highX,lowY,highY order) into the
57							; corresponding pair of pixel coordinates by offsetting by the
58							; graphics origin, then dividing by an appropriate power of 2.
59							;
60							; EIGABS uses ZTEMP as workspace, and corrupts all registers and
61							; flags.
62	.c00c						EIGABS:
63	.c00c		4c dd d1	jmp $d1dd	                jmp eigabsEntryPoint

65							; MasRef E.4-7
66							;
67							; JSR WIND windows the 4 byte pair of pixel coordinates (in standard
68							; lowX,highX,lowY,highY order) at &300+X, and returns a result in A
69							; according to its position with respect to the window:

71							; 9 | 8 | 10
72							; --+---+---
73							; 1 | 0 | 2
74							; --+---+---
75							; 5 | 4 | 6

77							; WIND uses ZTEMP as workspace, preserves X and sets N and Z according
78							; to A.
79	.c00f						WIND:
80	.c00f		4c a7 d1	jmp $d1a7	                jmp windEntryPoint

82							; MasRef E.4-7
83							;
84							; JSR GADDR addresses the pixel whose 4 byte pair of pixel coordinates
85							; (in standard lowX,highX,lowY,highY order) is at &300+X. GADDR should
86							; not be called without first ensuring (typically by means of WIND)
87							; that the point concerned does lie within the screen.
88							;
89							; GADDR initialises the following variables:
90							;
91							; . ZMEMG to the start of the page of memory containing the pixel.
92							;
93							; . Y and VDU variable &1A (i.e. location &31A) to contain the offset
94							; of the byte containing the pixel within this page - i.e. (ZMEMG),y
95							; points to the byte containing the pixel.
96							;
97							; . ZMASK to a mask indicating which bits of this byte constitute the
98							; pixel.
99							;
100							; . ZGORA and ZGEOR to the correct colour masks for the current
101							; graphics plot mode (found in VDU variable &5A) and colour/ECF
102							;
103							; . X to Y MOD 7, i.e. the scan line within a character row of the
104							; pixel.
105							;
106							; Additionally, GADDR uses ZTEMP as workspace and returns A=0, Z=1.
107							;
108							; An example of the use of PLBYTE, WIND and GADDR is the following
109							; code, which effectively re-implements the VDU 25 64-71 (plot a
110							; point) calls. It assumes that the routine addresses have been
111							; previously defined and that the graphics plot mode, etc. were set up
112							; by the VDU 25 code before the unknown PLOT codes vector was entered:

114							; .POINT
115							;  LDX #&20   ;Addresses new point within VDU queue, as
116							;             ;left on entry to the unknown PLOT codes
117							;             ;vector.
118							;  JSR WIND   ;Is the point inside the window?
119							;  BNE END    ;Return if not.
120							;  JSR GADDR  ;Address the point now we know it's on
121							;             ;screen.
122							;  JSR PLBYTE ;And plot the point.
123							; .END
124							;  RTS
125	.c012						GADDR:
126	.c012		4c c8 de	jmp $dec8	                jmp gaddrEntryPoint

128							; MasRef E.4-8
129							;
130							; JSR IEG takes the internal pixel coordinates of the graphics cursor
131							; (in VDU variables &24-&27), converts it back to external coordinates
132							; and stores the result in VDU variables &10-&13.
133							;
134							; It should be called whenever the graphics code generates a new
135							; graphics cursor position (e.g. in the VDU drivers, it is called
136							; after a character is printed in VDU 5 mode). Its purpose is to make
137							; the two versions of the graphics cursor agree again, and thus
138							; prevent errors occurring with relative plots.
139							;
140							; IEG uses no page zero locations and corrupts all registers and
141							; flags.
142	.c015						IEG:
143	.c015		4c de c4	jmp $c4de	                jmp LC4DF

145							;-------------------------------------------------------------------------

147	.c018						LC018:                                       ; Fetch byte from ROM Y
148	.c018		a6 f4		ldx $f4		                ldx $F4                      ; Get current ROM
149	.c01a		84 f4		sty $f4		                sty $F4                      ; Select ROM in Y
150	.c01c		8c 30 fe	sty $fe30	                sty ROMSEL
151	.c01f		b2 f6		lda ($f6)	                lda ($F6)                    ; Get byte with ROM Y paged in
152	.c021		4c 4c e5	jmp $e54c	                jmp selectROMX                    ; Page in ROM X and return

154	.c024						LC024:
155	.c024		6c 5d 03	jmp ($035d)	                jmp (vduv.jumpVector)

157							;-------------------------------------------------------------------------
158							;
159							; VDU driver entry point
160							;
161							; Output to VDU.
162							;
163	.c027						outputToVDU:
164	.c027		ae 6a 02	ldx $026a	                ldx vduQueueNegativeLength  ;get VDU queue length
165	.c02a		f0 2d		beq $c059	                beq outputCharToVDU         ;taken if empty
166	.c02c		9d 24 02	sta $0224,x	                sta vduv.queueEnd-1-255,x   ;add to queue
167	.c02f		ee 6a 02	inc $026a	                inc vduQueueNegativeLength  ;one more in the queue...
168	.c032		f0 02		beq $c036	                beq outputQueueToVDU        ;taken if queue now filled
169	.c034						clc_rts_c034:
170	.c034		18		clc		                clc

172							;-------------------------------------------------------------------------
173							;
174							; VDU 0 (&00) Null [MasRef E.3-1]
175							; VDU 6 (&06) Enable VDU driver [MasRef E.3-3]
176							; VDU 27 (&1B) Null [MasRef E.3-34]
177							;
178	.c035						vdu0EntryPoint:
179	.c035						vdu6EntryPoint:
180	.c035						vdu27EntryPoint:
181	.c035						rtsC035:
182	.c035		60		rts		                rts

184							;-------------------------------------------------------------------------

186	.c036						outputQueueToVDU:
187	.c036		24 d0		bit $d0		                bit STATE
188	.c038		10 19		bpl $c053	                bpl LC053              ;branch taken if not VDU21 mode

190							                ; VDU disabled. But if outputting to printer
191							                ; specifically with VDU1, let the char through,
192	.c03a		ac 5e 03	ldy $035e	                ldy vduv.jumpVector+1
193	.c03d		c0 c0		cpy #$c0	                cpy #>vdu1EntryPoint
194	.c03f		d0 f3		bne $c034	                bne clc_rts_c034
195	.c041		ac 5d 03	ldy $035d	                ldy vduv.jumpVector+0
196	.c044		c0 e1		cpy #$e1	                cpy #<vdu1EntryPoint
197	.c046		d0 ec		bne $c034	                bne clc_rts_c034

199	.c048						outputCharToPrinter:
200	.c048		aa		tax		                tax                          ;save char to print
201	.c049		a5 d0		lda $d0		                lda STATE
202	.c04b		4a		lsr a		                lsr a                       ;C set if isPrinterEnabled
203	.c04c		90 e7		bcc $c035	                bcc rtsC035 ;taken if printer disabled - VDU 1 then a no-op
204	.c04e		8a		txa		                txa                          ;restore char to print
205	.c04f		18		clc		                clc
209	.c050		4c df e2	jmp $e2df	                jmp LE2ED

212	.c053						LC053:
213	.c053		20 f9 c0	jsr $c0f9	                jsr stopCursorEditing
214	.c056		18		clc		                clc
215	.c057		80 66		bra $c0bf	                bra LC0C0

217	.c059						outputCharToVDU:
223	.c059		20 f9 c0	jsr $c0f9	                jsr stopCursorEditing
227	.c05c		50 0f		bvc $c06d	                bvc LC06D             ;taken if not previously editing
229	.c05e		30 0d		bmi $c06d	                bmi LC06D             ;taken if VDU 21
230	.c060		c9 0d		cmp #$0d	                cmp #$0D
231	.c062		d0 09		bne $c06d	                bne LC06D                  ;taken if not printing a CR
232	.c064		48		pha		                pha                        ;save char to print
233	.c065		a9 42		lda #$42	                lda #STATE.isCursorEditing|STATE.isScrollingDisabled
234	.c067		14 d0		trb $d0		                trb STATE
235	.c069		20 4f cf	jsr $cf4f	                jsr showCursor
236	.c06c		68		pla		                pla                          ;restore char to print
237	.c06d						LC06D:
238	.c06d		c9 20		cmp #$20	                cmp #$20
239	.c06f		90 06		bcc $c077	                bcc handleControlChar
240	.c071		c9 7f		cmp #$7f	                cmp #$7F
241	.c073		d0 20		bne $c095	                bne handlePrintableChar       ;taken if not backspace
242	.c075		a9 20		lda #$20	                lda #$20 ;backspace is entry 32 in the VDU routines table
243	.c077						handleControlChar:
244	.c077		a8		tay		                tay                          ;Y=index in table
245	.c078		b9 29 e0	lda $e029,y	                lda vduRoutinesLSBTable,y
246	.c07b		8d 5d 03	sta $035d	                sta vduv.jumpVector+0 ; Store jump address LSB (see MasRef E.4-3)
247	.c07e		b9 4a e0	lda $e04a,y	                lda vduRoutinesMSBTable,y
248	.c081		30 2f		bmi $c0b2	                bmi LC0B3           ;branch taken if MSB directly
249	.c083		aa		tax		                tax                          ; Save original MSB value
250	.c084		09 f0		ora #$f0	                ora #$F0
251	.c086		8d 6a 02	sta $026a	                sta vduQueueNegativeLength ;initialise initial VDU queue length
252	.c089		8a		txa		                txa                          ; Restore original MSB value
254	.c08a		20 21 e5	jsr $e521	                jsr lsr4
261	.c08d		18		clc		                clc                          ;
262	.c08e		69 c0		adc #$c0	                adc #vduRoutinesPage         ; form MSB
263	.c090		8d 5e 03	sta $035e	                sta vduv.jumpVector+1
264	.c093		80 34		bra $c0c9	                bra reinstateCursorEditing                    ; Continue

266	.c095						handlePrintableChar:
267	.c095		24 d0		bit $d0		                bit STATE
268	.c097		30 2d		bmi $c0c6	                bmi LC0C7                    ;taken if VDU21
269	.c099		20 0c ce	jsr $ce0c	                jsr plotCharAtTextCursor
270	.c09c		a9 20		lda #$20	                lda #vduv.cursorFlags.noMoveCursorAfterPrint
271	.c09e		2c 66 03	bit $0366	                bit vduv.cursorFlags
272	.c0a1		d0 23		bne $c0c6	                bne LC0C7                    ; taken if not moving cursor
277	.c0a3		20 75 c2	jsr $c275	                jsr LC276
279	.c0a6		80 1e		bra $c0c6	                bra LC0C7

281	.c0a8						LC0A9:
282	.c0a8		49 06		eor #$06	                eor #$06                     ; compare to VDU6?
283	.c0aa		d0 18		bne $c0c4	                bne LC0C5                    ; taken if not VUD6
284	.c0ac		a9 80		lda #$80	                lda #STATE.isVDU21
285	.c0ae		14 d0		trb $d0		                trb STATE                    ; reset VDU21 flag
286	.c0b0		80 17		bra $c0c9	                bra reinstateCursorEditing

288	.c0b2						LC0B3:
289	.c0b2		8d 5e 03	sta $035e	                sta vduv.jumpVector+1

292	.c0b5		98		tya		                tya
293	.c0b6		49 f7		eor #$f7	                eor #$F7
294	.c0b8		c9 fa		cmp #$fa	                cmp #$FA

297	.c0ba		98		tya		                tya
298	.c0bb		24 d0		bit $d0		                bit STATE
299	.c0bd		30 e9		bmi $c0a8	                bmi LC0A9             ;branch taken if VDU21 in effect
300	.c0bf						LC0C0:
301	.c0bf		08		php		                php
302	.c0c0		20 24 c0	jsr $c024	                jsr LC024
303	.c0c3		28		plp		                plp
304	.c0c4						LC0C5:
305	.c0c4		90 03		bcc $c0c9	                bcc reinstateCursorEditing
306	.c0c6						LC0C7:
307	.c0c6		a5 d0		lda $d0		                lda STATE
308	.c0c8		4a		lsr a		                lsr a                          ;C=1 if printer enabled
309	.c0c9						reinstateCursorEditing:
310	.c0c9		24 d0		bit $d0		                bit STATE
311	.c0cb		50 13		bvc $c0e0	                bvc rtsC0E1               ;taken if not cursor editing
312	.c0cd		20 04 c1	jsr $c104	                jsr activateEditCursor
313	.c0d0						exchangeCursors:
314	.c0d0		08		php		                php
315	.c0d1		48		pha		                pha
316	.c0d2		a5 d0		lda $d0		                lda STATE
317	.c0d4		49 02		eor #$02	                eor #STATE.isScrollingDisabled
318	.c0d6		85 d0		sta $d0		                sta STATE
319	.c0d8		20 b0 e2	jsr $e2b0	                jsr exchangeEditCursorPositionAndTextCursorPosition
320	.c0db		20 d7 c6	jsr $c6d7	                jsr updateCRTCTextCursor
321	.c0de		68		pla		                pla
322	.c0df		28		plp		                plp
323	.c0e0						rtsC0E1:
324	.c0e0		60		rts		                rts

326							;-------------------------------------------------------------------------
327							;
328							; VDU 1 (&01) Send next character to printer only [MasRef E.3-2]
329							;
330	.c0e1						vdu1EntryPoint:
331	.c0e1		20 c9 c0	jsr $c0c9	                jsr reinstateCursorEditing
332	.c0e4		20 48 c0	jsr $c048	                jsr outputCharToPrinter
333	.c0e7		80 10		bra $c0f9	                bra stopCursorEditing

335							;-------------------------------------------------------------------------
336							;
337							; VDU 2 (&02) Enable printer [MasRef E.3-2]
338							; VDU 3 (&03) Disable printer [MasRef E.3-3]
339							;
340	.c0e9						vdu2EntryPoint:
341	.c0e9						vdu3EntryPoint:
342	.c0e9		48		pha		                pha                          ;
343	.c0ea		20 c9 c0	jsr $c0c9	                jsr reinstateCursorEditing
347	.c0ed		20 d9 e2	jsr $e2d9	                jsr LE2E7
349	.c0f0		a9 01		lda #$01	                lda #STATE.isPrinterEnabled  ;
350	.c0f2		04 d0		tsb $d0		                tsb STATE
351	.c0f4		68		pla		                pla
352	.c0f5		29 01		and #$01	                and #STATE.isPrinterEnabled
353	.c0f7		14 d0		trb $d0		                trb STATE

355							;-------------------------------------------------------------------------
356							;
357							; Stop cursor editing, if it's on.
358							;
359							; exit:
360							;
361							; V=1 if cursor editing previous on
362							; N=1 if VDU 21 on
363							;
364	.c0f9						stopCursorEditing:
365	.c0f9		24 d0		bit $d0		                bit STATE
366	.c0fb		50 e3		bvc $c0e0	                bvc rtsC0E1                    ;taken if not cursor editing
367	.c0fd		20 d0 c0	jsr $c0d0	                jsr exchangeCursors
368	.c100		08		php		                php
369	.c101						deactivateEditCursor:
370	.c101		38		sec		                sec
371	.c102		80 02		bra $c106	                bra updateEditCursorState

373							;-------------------------------------------------------------------------

375	.c104						activateEditCursor:
376	.c104		08		php		                php
377	.c105		18		clc		                clc

379							;-------------------------------------------------------------------------
380							;
381							; Handle cursor editing on/off.
382							;
383							; entry:
384							;
385							; C=0 - cursor editing on; add fake cursor
386							;
387							; C=1 = cursor editing off; remove fake cursor and restore screen
388							;
389	.c106						updateEditCursorState: .proc
390	.c106		48		pha		                pha
391	.c107		a5 d8		lda $d8		                lda ZMEMT+0
392	.c109		85 e0		sta $e0		                sta ZTEMPD+0
393	.c10b		a5 d9		lda $d9		                lda ZMEMT+1
394	.c10d		85 e1		sta $e1		                sta ZTEMPD+1
395	.c10f		ac 4f 03	ldy $034f	                ldy vduv.bytesPerCharacter
396	.c112		88		dey		                dey
397	.c113		d0 0e		bne $c123	                bne bitmap

399	.c115						teletext:
400	.c115		ad 38 03	lda $0338	                lda vduv.workspace._38 ;get old byte under fake cursor (may be bogus)
401	.c118		b0 17		bcs $c131	                bcs storeToScreen      ;taken if switching off
402	.c11a		b2 d8		lda ($d8)	                lda (ZMEMT)            ;get screen byte
403	.c11c		8d 38 03	sta $0338	                sta vduv.workspace._38 ;store old byte
404	.c11f		a9 7f		lda #$7f	                lda #$7F               ;store solid block to screen
405	.c121		80 0e		bra $c131	                bra storeToScreen

407	.c123						bitmap:
408	.c123		a9 ff		lda #$ff	                lda #%11111111          ;invert all bits
409	.c125		c0 1f		cpy #$1f	                cpy #$1F      ;check for 32 chars/byte - i.e., MODE 2
410	.c127		d0 02		bne $c12b	                bne +         ;taken if not MODE 2
411	.c129		a9 3f		lda #$3f	                lda #%00111111       ;avoid flashing colours in MODE 2
412	.c12b						+
413	.c12b		85 da		sta $da		                sta ZTEMP
414	.c12d						loop:
415	.c12d		b2 e0		lda ($e0)	                lda (ZTEMPD)
416	.c12f		45 da		eor $da		                eor ZTEMP
417	.c131						storeToScreen:
418	.c131		92 e0		sta ($e0)	                sta (ZTEMPD)
419	.c133		e6 e0		inc $e0		                inc ZTEMPD+0
420	.c135		d0 09		bne $c140	                bne +                    ;taken if no carry out of LSB
421	.c137		e6 e1		inc $e1		                inc ZTEMPD+1
422	.c139		10 05		bpl $c140	                bpl +                 ;taken if no screen address wrap
423	.c13b		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
424	.c13e		85 e1		sta $e1		                sta ZTEMPD+1
425	.c140						+
426	.c140		88		dey		                dey               ;Y=$ff after 1 iteration in teletext
427	.c141		10 ea		bpl $c12d	                bpl loop
428	.c143		68		pla		                pla
429	.c144		28		plp		                plp
430	.c145		60		rts		                rts
431							                .endproc

433							;-------------------------------------------------------------------------

435	.c146						LC147:
436	>c146		bd c1				                .word LC1BE
437	>c148		b0 c1				                .word LC1B1
438	>c14a		bd c1				                .word LC1BE
439	>c14c		b0 c1				                .word LC1B1
440	>c14e		94 c1				                .word LC195
441	>c150		94 c1				                .word LC195
442	>c152		a1 c1				                .word LC1A2
443	>c154		a1 c1				                .word LC1A2

445							;-------------------------------------------------------------------------

447	.c156						LC157:
448	>c156		00 c2				                .word LC201
449	>c158		ed c1				                .word LC1EE
450	>c15a		00 c2				                .word LC201
451	>c15c		ed c1				                .word LC1EE
452	>c15e		20 c2				                .word LC221
453	>c160		20 c2				                .word LC221
454	>c162		0f c2				                .word LC210
455	>c164		0f c2				                .word LC210

457							;-------------------------------------------------------------------------
458							;
459							; Indexed by the swapAxes, invertVertical and invertHorizontal cursor
460							; flags bits.
461							;
462	.c166						setTextCursorXPositionRoutinesTable:
463	>c166		d2 c2				                .word setTextCursorXPosition           ;0
464	>c168		ca c2				                .word setTextCursorXPositionInvertHorizontal ;invertHorizontal
465	>c16a		d2 c2				                .word setTextCursorXPosition ;invertVertical
466	>c16c		ca c2				                .word setTextCursorXPositionInvertHorizontal ;invertVertical|invertHorizontal
467	>c16e		e1 c2				                .word setTextCursorXPositionSwapAxes         ;swapAxes
468	>c170		e1 c2				                .word setTextCursorXPositionSwapAxes ;swapAxes|invertHorizontal
469	>c172		d9 c2				                .word setTextCursorXPositionSwapAxesInvertVertical ;swapAxes|invertVertical
470	>c174		d9 c2				                .word setTextCursorXPositionSwapAxesInvertVertical ;swapAxes|invertVertical|invertHorizontal

472							;-------------------------------------------------------------------------

474	.c176						moveTextCursorRoutinesTable:
475	>c176		0f c3				                .word moveTextCursorPositiveX
476	>c178		f1 c2				                .word moveTextCursorNegativeX
477	>c17a		0f c3				                .word moveTextCursorPositiveX
478	>c17c		f1 c2				                .word moveTextCursorNegativeX
479	>c17e		59 c3				                .word moveTextCursorPositiveY
480	>c180		59 c3				                .word moveTextCursorPositiveY
481	>c182		37 c3				                .word moveTextCursorNegativeY
482	>c184		37 c3				                .word moveTextCursorNegativeY

484							;-------------------------------------------------------------------------

486	.c186						LC187:
487	.c186		4d 66 03	eor $0366	                eor vduv.cursorFlags
488	.c189		29 0e		and #$0e	                and #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal)
489	.c18b		48		pha		                pha
490	.c18c		20 a5 d1	jsr $d1a5	                jsr LD1A6
491	.c18f		fa		plx		                plx
492	.c190		38		sec		                sec
493	.c191		7c 46 c1	jmp ($c146,x)	                jmp (LC147,x)

495	.c194						LC195:
496	.c194		ad 26 03	lda $0326	                lda $0326
497	.c197		e9 08		sbc #$08	                sbc #$08
498	.c199		8d 26 03	sta $0326	                sta $0326
499	.c19c		ce 27 03	dec $0327	                dec $0327
500	.c19f		80 08		bra $c1a9	                bra LC1AA

502	.c1a1						LC1A2:
503	.c1a1		ad 26 03	lda $0326	                lda $0326
504	.c1a4		69 07		adc #$07	                adc #$07
505	.c1a6		8d 26 03	sta $0326	                sta $0326
506	.c1a9						LC1AA:
507	.c1a9		90 1f		bcc $c1ca	                bcc LC1CB
508	.c1ab		ee 27 03	inc $0327	                inc $0327
509	.c1ae		80 1a		bra $c1ca	                bra LC1CB

511	.c1b0						LC1B1:
512	.c1b0		ad 24 03	lda $0324	                lda $0324
513	.c1b3		e9 08		sbc #$08	                sbc #$08
514	.c1b5		8d 24 03	sta $0324	                sta $0324
515	.c1b8		ce 25 03	dec $0325	                dec $0325
516	.c1bb		80 08		bra $c1c5	                bra LC1C6

518	.c1bd						LC1BE:
519	.c1bd		ad 24 03	lda $0324	                lda $0324
520	.c1c0		69 07		adc #$07	                adc #$07
521	.c1c2		8d 24 03	sta $0324	                sta $0324
522	.c1c5						LC1C6:
523	.c1c5		90 03		bcc $c1ca	                bcc LC1CB
524	.c1c7		ee 25 03	inc $0325	                inc $0325
525	.c1ca						LC1CB:
526	.c1ca		a5 da		lda $da		                lda $DA
527	.c1cc		d0 0c		bne $c1da	                bne LC1DB
528	.c1ce		2c 66 03	bit $0366	                bit $0366
529	.c1d1		70 07		bvs $c1da	                bvs LC1DB
530	.c1d3		da		phx		                phx
531	.c1d4		20 a5 d1	jsr $d1a5	                jsr LD1A6
532	.c1d7		fa		plx		                plx
533	.c1d8		a8		tay		                tay
534	.c1d9		60		rts		                rts

536	.c1da						LC1DB:
537	.c1da		a9 00		lda #$00	                lda #$00
538	.c1dc		60		rts		                rts

540	.c1dd						LC1DE:
541	.c1dd		a9 00		lda #$00	                lda #$00
542	.c1df						LC1E0:
543	.c1df		64 da		stz $da		                stz $DA
544	.c1e1		0a		asl a		                asl a
545	.c1e2		26 da		rol $da		                rol $DA
546	.c1e4		0a		asl a		                asl a
547	.c1e5		26 da		rol $da		                rol $DA
548	.c1e7		0a		asl a		                asl a
549	.c1e8		26 da		rol $da		                rol $DA
550	.c1ea		7c 56 c1	jmp ($c156,x)	                jmp (LC157,x)

552	.c1ed						LC1EE:
553	.c1ed		49 f9		eor #$f9	                eor #$F9
554	.c1ef		6d 04 03	adc $0304	                adc $0304
555	.c1f2		8d 24 03	sta $0324	                sta $0324
556	.c1f5		a5 da		lda $da		                lda $DA
557	.c1f7		49 ff		eor #$ff	                eor #$FF
558	.c1f9		6d 05 03	adc $0305	                adc $0305
559	.c1fc		8d 25 03	sta $0325	                sta $0325
560	.c1ff		60		rts		                rts

562	.c200						LC201:
563	.c200		6d 00 03	adc $0300	                adc $0300
564	.c203		8d 24 03	sta $0324	                sta $0324
565	.c206		a5 da		lda $da		                lda $DA
566	.c208		6d 01 03	adc $0301	                adc $0301
567	.c20b		8d 25 03	sta $0325	                sta $0325
568	.c20e		60		rts		                rts

570	.c20f						LC210:
571	.c20f		49 07		eor #$07	                eor #$07
572	.c211		6d 02 03	adc $0302	                adc $0302
573	.c214		8d 26 03	sta $0326	                sta $0326
574	.c217		a5 da		lda $da		                lda $DA
575	.c219		6d 03 03	adc $0303	                adc $0303
576	.c21c		8d 27 03	sta $0327	                sta $0327
577	.c21f		60		rts		                rts

579	.c220						LC221:
580	.c220		38		sec		                sec
581	.c221		49 ff		eor #$ff	                eor #$FF
582	.c223		6d 06 03	adc $0306	                adc $0306
583	.c226		8d 26 03	sta $0326	                sta $0326
584	.c229		a5 da		lda $da		                lda $DA
585	.c22b		49 ff		eor #$ff	                eor #$FF
586	.c22d		6d 07 03	adc $0307	                adc $0307
587	.c230		8d 27 03	sta $0327	                sta $0327
588	.c233		60		rts		                rts

590	.c234						LC235:
591	.c234		a9 00		lda #$00	                lda #$00
592	.c236		20 86 c1	jsr $c186	                jsr LC187
593	.c239		f0 0d		beq $c248	                beq LC249
594	.c23b		20 dd c1	jsr $c1dd	                jsr LC1DE
595	.c23e						LC23F:
596	.c23e		a9 08		lda #$08	                lda #$08
597	.c240						LC241:
598	.c240		20 86 c1	jsr $c186	                jsr LC187
599	.c243		f0 03		beq $c248	                beq LC249
600	.c245		20 dd c1	jsr $c1dd	                jsr LC1DE
601	.c248						LC249:
602	.c248		4c de c4	jmp $c4de	                jmp LC4DF

604	.c24b						vdu9EntryPoint:
605	.c24b		20 2c d1	jsr $d12c	                jsr handleColumn81
606	.c24e		b0 e4		bcs $c234	                bcs LC235
607	.c250		a9 00		lda #$00	                lda #$00                     ; X+
608	.c252		20 e8 c2	jsr $c2e8	                jsr moveTextCursor
609	.c255		90 1b		bcc $c272	                bcc LC273
610	.c257						LC258:
611	.c257		20 8e c3	jsr $c38e	                jsr LC38F
612	.c25a						vdu10EntryPoint:
8	.c25a		20 d4 e2	jsr $e2d4	                jsr testVDU5StateNonInlined
614	.c25d		d0 df		bne $c23e	                bne LC23F
615	.c25f		18		clc		                clc
616	.c260		20 90 c8	jsr $c890	                jsr LC88E
617	.c263		a9 08		lda #$08	                lda #$08
618	.c265		20 e8 c2	jsr $c2e8	                jsr moveTextCursor           ; Y-
619	.c268						LC269:
620	.c268		90 08		bcc $c272	                bcc LC273
621	.c26a		20 7a c3	jsr $c37a	                jsr LC37B
622	.c26d		90 03		bcc $c272	                bcc LC273
623	.c26f		4c 50 d0	jmp $d050	                jmp LD051

625	.c272						LC273:
626	.c272		4c ec c6	jmp $c6ec	                jmp updateCRTCCursorAddress

628	.c275						LC276:
635	.c275		20 d4 e2	jsr $e2d4	                jsr testVDU5StateNonInlined
637							                ; .testVDU5State
638	.c278		d0 ba		bne $c234	                bne LC235                    ; taken if VDU5
639	.c27a		20 e8 c2	jsr $c2e8	                jsr moveTextCursor           ; A=0, so X+
640	.c27d		90 f3		bcc $c272	                bcc LC273
641	.c27f		a9 01		lda #$01	                lda #vduv.cursorFlags.scrollProtect
642	.c281		2c 66 03	bit $0366	                bit vduv.cursorFlags
643	.c284		f0 d1		beq $c257	                beq LC258
644	.c286		38		sec		                sec
645	.c287		6e 6c 03	ror $036c	                ror vduv.column81
646	.c28a						LC28B:
647	.c28a		60		rts		                rts

649	.c28b						LC28C:
650	.c28b		a9 06		lda #$06	                lda #$06
651	.c28d		20 86 c1	jsr $c186	                jsr LC187
652	.c290		f0 b6		beq $c248	                beq LC249
653	.c292		20 dd c1	jsr $c1dd	                jsr LC1DE
654	.c295						LC296:
655	.c295		a9 0e		lda #$0e	                lda #$0E
656	.c297		80 a7		bra $c240	                bra LC241

658	.c299						vdu8EntryPoint:
8	.c299		20 d4 e2	jsr $e2d4	                jsr testVDU5StateNonInlined
660	.c29c		d0 ed		bne $c28b	                bne LC28C
661	.c29e		4e 6c 03	lsr $036c	                lsr $036C
662	.c2a1		2c 6c 03	bit $036c	                bit $036C
663	.c2a4		70 e4		bvs $c28a	                bvs LC28B
664	.c2a6		a9 06		lda #$06	                lda #$06
665	.c2a8		20 e8 c2	jsr $c2e8	                jsr moveTextCursor           ; X-
666	.c2ab		90 c5		bcc $c272	                bcc LC273
667	.c2ad		20 8e c3	jsr $c38e	                jsr LC38F
668	.c2b0						vdu11EntryPoint:
8	.c2b0		20 d4 e2	jsr $e2d4	                jsr testVDU5StateNonInlined
670	.c2b3		d0 e0		bne $c295	                bne LC296
671	.c2b5		ce 69 02	dec $0269	                dec pagedModeCounter
672	.c2b8		10 03		bpl $c2bd	                bpl LC2BE
673	.c2ba		ee 69 02	inc $0269	                inc pagedModeCounter
674	.c2bd						LC2BE:
675	.c2bd		a9 0e		lda #$0e	                lda #$0E
676	.c2bf		20 e8 c2	jsr $c2e8	                jsr moveTextCursor           ; Y+
677	.c2c2		80 a4		bra $c268	                bra LC269

679							;-------------------------------------------------------------------------
680							;
681							; Set/reset cursor position, taking cursor flags into account.
682							;
683							; entry:
684							;
685							; (set only) A = cursor position
686							;
687							; X = cursorFlags bits: swapAxes, invertVertical, invertHorizontal
688							;
689	.c2c4						resetTextCursorXPositionWithCursorFlags:
690	.c2c4		a9 00		lda #$00	                lda #$00
691	.c2c6						setTextCursorXPositionWithCursorFlags:
692	.c2c6		18		clc		                clc
693	.c2c7		7c 66 c1	jmp ($c166,x)	                jmp (setTextCursorXPositionRoutinesTable,x)

695							;-------------------------------------------------------------------------

697	.c2ca						setTextCursorXPositionInvertHorizontal:
698	.c2ca		38		sec		                sec                          ;+1
699	.c2cb		49 ff		eor #$ff	                eor #$FF          ;^$ff+1 (i.e., adc will add the -ve)
700	.c2cd		6d 0a 03	adc $030a	                adc vduv.textWindowRight
701	.c2d0		80 03		bra $c2d5	                bra staTextCursorXPosition

703							;-------------------------------------------------------------------------

705	.c2d2						setTextCursorXPosition:
706	.c2d2		6d 08 03	adc $0308	                adc vduv.textWindowLeft
707	.c2d5						staTextCursorXPosition:
708	.c2d5		8d 18 03	sta $0318	                sta vduv.textCursorXPosition
709	.c2d8		60		rts		                rts

711							;-------------------------------------------------------------------------

713	.c2d9						setTextCursorXPositionSwapAxesInvertVertical:
714	.c2d9		38		sec		                sec
715	.c2da		49 ff		eor #$ff	                eor #$FF
716	.c2dc		6d 09 03	adc $0309	                adc vduv.textWindowBottom
717	.c2df		80 03		bra $c2e4	                bra staTextCursorYPosition

719	.c2e1						setTextCursorXPositionSwapAxes:
720	.c2e1		6d 0b 03	adc $030b	                adc vduv.textWindowTop
721	.c2e4						staTextCursorYPosition:
722	.c2e4		8d 19 03	sta $0319	                sta vduv.textCursorYPosition
723	.c2e7		60		rts		                rts

725							;-------------------------------------------------------------------------
726							;
727							; Move text cursor.
728							;
729							; Entry:
730							;
731							; A = direction to move: 0 = X+
732							;                        2 = X-
733							;                        4 = X+
734							;                        6 = X-
735							;                        8 = Y-
736							;                        10 = Y-
737							;                        12 = Y+
738							;                        14 = Y+
739							;
740							; Exit:
741							;
742							; X = actual jump table index
743							; C = something...

746	.c2e8						moveTextCursor:
747	.c2e8		4d 66 03	eor $0366	                eor vduv.cursorFlags
748	.c2eb		29 0e		and #$0e	                and #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal)
749	.c2ed		aa		tax		                tax
752	.c2ee						callMoveTextCursorRoutine:
753	.c2ee		7c 76 c1	jmp ($c176,x)	                jmp (moveTextCursorRoutinesTable,x)

755							;-------------------------------------------------------------------------

757	.c2f1						moveTextCursorNegativeX:
758	.c2f1		ad 08 03	lda $0308	                lda vduv.textWindowLeft
759	.c2f4		cd 18 03	cmp $0318	                cmp vduv.textCursorXPosition
760	.c2f7		b0 3d		bcs $c336	                bcs rtsC337
761	.c2f9		ce 18 03	dec $0318	                dec vduv.textCursorXPosition
762	.c2fc		38		sec		                sec
763	.c2fd		ad 4a 03	lda $034a	                lda vduv.textCursorCRTCAddress+0
764	.c300		ed 4f 03	sbc $034f	                sbc vduv.bytesPerCharacter
765	.c303		8d 4a 03	sta $034a	                sta vduv.textCursorCRTCAddress+0
766	.c306		85 d8		sta $d8		                sta ZMEMT+0
767	.c308		b0 2b		bcs $c335	                bcs clc_rts_C336
768	.c30a		ce 4b 03	dec $034b	                dec vduv.textCursorCRTCAddress+1
769	.c30d		80 1b		bra $c32a	                bra fixUpZMEMTHiFromTextCursorCRTCAddressHi

771							;-------------------------------------------------------------------------

782	.c30f						moveTextCursorPositiveX:
783	.c30f		ad 18 03	lda $0318	                lda vduv.textCursorXPosition
784	.c312		cd 0a 03	cmp $030a	                cmp vduv.textWindowRight
785	.c315		b0 1f		bcs $c336	                bcs rtsC337
786	.c317		ee 18 03	inc $0318	                inc vduv.textCursorXPosition
787	.c31a		ad 4a 03	lda $034a	                lda vduv.textCursorCRTCAddress+0
788	.c31d		6d 4f 03	adc $034f	                adc vduv.bytesPerCharacter
789	.c320		8d 4a 03	sta $034a	                sta vduv.textCursorCRTCAddress+0
790	.c323		85 d8		sta $d8		                sta ZMEMT+0
791	.c325		90 0f		bcc $c336	                bcc rtsC337
792	.c327		ee 4b 03	inc $034b	                inc vduv.textCursorCRTCAddress+1
793	.c32a						fixUpZMEMTHiFromTextCursorCRTCAddressHi:
794	.c32a		ad 4b 03	lda $034b	                lda vduv.textCursorCRTCAddress+1
795	.c32d						fixUpZMEMTHi:
796	.c32d		10 04		bpl $c333	                bpl LC334
797	.c32f		38		sec		                sec
798	.c330		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte
799	.c333						LC334:
800	.c333		85 d9		sta $d9		                sta ZMEMT+1
801	.c335						clc_rts_C336:
802	.c335		18		clc		                clc
803	.c336						rtsC337:
804	.c336		60		rts		                rts

806							;-------------------------------------------------------------------------

808	.c337						moveTextCursorNegativeY:
809	.c337		ad 0b 03	lda $030b	                lda vduv.textWindowTop
810	.c33a		cd 19 03	cmp $0319	                cmp vduv.textCursorYPosition
811	.c33d		b0 f7		bcs $c336	                bcs rtsC337
812	.c33f		ce 19 03	dec $0319	                dec vduv.textCursorYPosition
813	.c342		38		sec		                sec
814	.c343		ad 4a 03	lda $034a	                lda vduv.textCursorCRTCAddress+0
815	.c346		ed 52 03	sbc $0352	                sbc $0352
816	.c349		8d 4a 03	sta $034a	                sta vduv.textCursorCRTCAddress+0
817	.c34c		85 d8		sta $d8		                sta ZMEMT+0
818	.c34e		ad 4b 03	lda $034b	                lda vduv.textCursorCRTCAddress+1
819	.c351		ed 53 03	sbc $0353	                sbc $0353
820	.c354		8d 4b 03	sta $034b	                sta vduv.textCursorCRTCAddress+1
821	.c357		80 d4		bra $c32d	                bra fixUpZMEMTHi

823							;-------------------------------------------------------------------------

825	.c359						moveTextCursorPositiveY:
826	.c359		ad 19 03	lda $0319	                lda vduv.textCursorYPosition
827	.c35c		cd 09 03	cmp $0309	                cmp vduv.textWindowBottom
828	.c35f		b0 d5		bcs $c336	                bcs rtsC337
829	.c361		ee 19 03	inc $0319	                inc vduv.textCursorYPosition
830	.c364		ad 4a 03	lda $034a	                lda vduv.textCursorCRTCAddress+0
831	.c367		6d 52 03	adc $0352	                adc vduv.bytesPerCharacterRow+0
832	.c36a		8d 4a 03	sta $034a	                sta vduv.textCursorCRTCAddress+0
833	.c36d		85 d8		sta $d8		                sta ZMEMT+0
834	.c36f		ad 4b 03	lda $034b	                lda vduv.textCursorCRTCAddress+1
835	.c372		6d 53 03	adc $0353	                adc vduv.bytesPerCharacterRow+1
836	.c375		8d 4b 03	sta $034b	                sta vduv.textCursorCRTCAddress+1
837	.c378		80 b3		bra $c32d	                bra fixUpZMEMTHi

839							;-------------------------------------------------------------------------

841	.c37a						LC37B:
842	.c37a		a9 10		lda #$10	                lda #vduv.cursorFlags.noVerticalScroll
843	.c37c		2c 66 03	bit $0366	                bit vduv.cursorFlags
844	.c37f		d0 0d		bne $c38e	                bne LC38F
845	.c381		8a		txa		                txa
846	.c382		49 06		eor #$06	                eor #$06
847	.c384		48		pha		                pha
848	.c385		a9 42		lda #$42	                lda #STATE.isCursorEditing|STATE.isScrollingDisabled
849	.c387		24 d0		bit $d0		                bit STATE
850	.c389		f0 16		beq $c3a1	                beq LC3A2
851	.c38b		70 09		bvs $c396	                bvs LC397
852	.c38d		68		pla		                pla
853	.c38e						LC38F:
854	.c38e		20 c4 c2	jsr $c2c4	                jsr resetTextCursorXPositionWithCursorFlags
855	.c391		20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
856	.c394		18		clc		                clc
857	.c395		60		rts		                rts

859	.c396						LC397:
860	.c396		20 b0 e2	jsr $e2b0	                jsr exchangeEditCursorPositionAndTextCursorPosition
861	.c399		fa		plx		                plx
862	.c39a		da		phx		                phx
863	.c39b		20 ee c2	jsr $c2ee	                jsr callMoveTextCursorRoutine
864	.c39e		20 b0 e2	jsr $e2b0	                jsr exchangeEditCursorPositionAndTextCursorPosition
865	.c3a1						LC3A2:
866	.c3a1		fa		plx		                plx
867	.c3a2		38		sec		                sec
868	.c3a3						rtsC3A4:
869	.c3a3		60		rts		                rts

871							;-------------------------------------------------------------------------

873	.c3a4						vdu28EntryPoint:
874	.c3a4		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
875	.c3a7		ad 21 03	lda $0321	                lda vduv.queueEnd-3          ; max Y
876	.c3aa		cd 23 03	cmp $0323	                cmp vduv.queueEnd-1          ; min Y
877	.c3ad		90 f4		bcc $c3a3	                bcc rtsC3A4                  ; bail if max Y<min Y
878	.c3af		dd 03 e1	cmp $e103,x	                cmp modeMaxRow,x             ;
879	.c3b2		f0 02		beq $c3b6	                beq +                        ; taken if max Y==max row
880	.c3b4		b0 ed		bcs $c3a3	                bcs rtsC3A4                  ; bail if max Y>max row
881	.c3b6						+
882	.c3b6		ad 22 03	lda $0322	                lda vduv.queueEnd-2          ; max X
883	.c3b9		dd 0b e1	cmp $e10b,x	                cmp modeMaxColumn,x
884	.c3bc		f0 03		beq $c3c1	                beq +                        ; taken if max X==max col
885	.c3be		b0 e3		bcs $c3a3	                bcs rtsC3A4                  ; bail if max X>max col
886	.c3c0		38		sec		                sec
887	.c3c1						+
888	.c3c1		ed 20 03	sbc $0320	                sbc vduv.queueEnd-4          ; form window width
889	.c3c4		90 dd		bcc $c3a3	                bcc rtsC3A4                  ; bail if negative
890	.c3c6		20 7f c7	jsr $c77f	                jsr setTextWindowWidthInBytes
891	.c3c9		a9 08		lda #$08	                lda #STATE.isTextWindow
892	.c3cb		04 d0		tsb $d0		                tsb STATE                    ; set isTextWIndow bit

894							                ; set text window value from the 4 VDU 28 argument
895							                ; bytes in the VDU queue
896	.c3cd		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
897	.c3cf		a0 08		ldy #$08	                ldy #VDUVariables.textWindowLeft
898	.c3d1		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables

900	.c3d4		20 b0 e2	jsr $e2b0	                jsr exchangeEditCursorPositionAndTextCursorPosition
901	.c3d7		20 da cc	jsr $ccda	                jsr updateZMEMTWithTextCursorPositionIfValid
902	.c3da		90 03		bcc $c3df	                bcc LC3E0         ; taken if text cursor pos was valid
903	.c3dc		20 e7 c3	jsr $c3e7	                jsr resetTextCursorPosition
904	.c3df						LC3E0:
905	.c3df		20 b0 e2	jsr $e2b0	                jsr exchangeEditCursorPositionAndTextCursorPosition
906	.c3e2		20 da cc	jsr $ccda	                jsr updateZMEMTWithTextCursorPositionIfValid
907	.c3e5		90 1f		bcc $c406	                bcc LC407         ; taken if text cursor pos was valid
908	.c3e7						resetTextCursorPosition:
909	.c3e7		a5 d0		lda $d0		                lda STATE
910	.c3e9		48		pha		                pha
911	.c3ea		29 df		and #$df	                and #~STATE.isVDU5
912	.c3ec		85 d0		sta $d0		                sta STATE
913	.c3ee		20 7b c4	jsr $c47b	                jsr vdu30EntryPoint
914	.c3f1		68		pla		                pla
915	.c3f2		85 d0		sta $d0		                sta STATE
916	.c3f4		60		rts		                rts

918	.c3f5						vdu13EntryPoint:
919	.c3f5		ad 66 03	lda $0366	                lda vduv.cursorFlags
920	.c3f8		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal;$0E
921	.c3fa		aa		tax		                tax
8	.c3fb		20 d4 e2	jsr $e2d4	                jsr testVDU5StateNonInlined
923	.c3fe		d0 09		bne $c409	                bne LC40A
924	.c400		4e 6c 03	lsr $036c	                lsr vduv.column81
925	.c403		20 8e c3	jsr $c38e	                jsr LC38F
926	.c406						LC407:
927	.c406		4c ec c6	jmp $c6ec	                jmp updateCRTCCursorAddress

929	.c409						LC40A:
930	.c409		20 dd c1	jsr $c1dd	                jsr LC1DE
931	.c40c		4c de c4	jmp $c4de	                jmp LC4DF

933	.c40f						jsrVDU30EntryPoint:
934	.c40f		20 7b c4	jsr $c47b	                jsr vdu30EntryPoint

936							;-------------------------------------------------------------------------
937							;
938							; VDU 16 (&10) Clear graphics window [MasRef E.3-7]
939							;
940	.c412						vdu16EntryPoint:
941	.c412		ad 61 03	lda $0361	                lda vduv.pixelsPerByteMinusOne
942	.c415		f0 8c		beq $c3a3	                beq rtsC3A4                    ;taken if MODE 7
943	.c417		a2 00		ldx #$00	                ldx #VDUVariables.graphicsWindowPixelsLeft
944	.c419		20 02 c9	jsr $c902	                jsr copyEightBytesToWorkspace28
945	.c41c		20 51 c9	jsr $c951	                jsr prepareForPlotBackground
946	.c41f						LC420:
947	.c41f		a2 2a		ldx #$2a	                ldx #$2A
948	.c421		a0 2e		ldy #$2e	                ldy #$2E
949	.c423		20 b4 e2	jsr $e2b4	                jsr exchangeTwoVDUBytes
950	.c426						LC427:
951	.c426		a2 28		ldx #$28	                ldx #$28
952	.c428		a0 2c		ldy #$2c	                ldy #$2C
953	.c42a		20 e7 da	jsr $dae7	                jsr LDAE8
954	.c42d		ad 2a 03	lda $032a	                lda $032A
955	.c430		d0 03		bne $c435	                bne LC436
956	.c432		ce 2b 03	dec $032b	                dec $032B
957	.c435						LC436:
958	.c435		ce 2a 03	dec $032a	                dec $032A
959	.c438		ad 2a 03	lda $032a	                lda $032A
960	.c43b		cd 2e 03	cmp $032e	                cmp $032E
961	.c43e		ad 2b 03	lda $032b	                lda $032B
962	.c441		ed 2f 03	sbc $032f	                sbc $032F
963	.c444		10 e0		bpl $c426	                bpl LC427
964	.c446		60		rts		                rts

966	.c447						LC448:
967	.c447		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
968	.c449		20 e6 c8	jsr $c8e6	                jsr prepareAABB
969	.c44c		80 d1		bra $c41f	                bra LC420

971							;-------------------------------------------------------------------------
972							;
973							; VDU 12 (&0C) Clear text window [MasRef E.3-5]
974							;
975	.c44e						vdu12EntryPoint:
976	.c44e		a9 20		lda #$20	                lda #STATE.isVDU5
977	.c450		24 d0		bit $d0		                bit STATE
978	.c452		d0 bb		bne $c40f	                bne jsrVDU30EntryPoint       ;taken if VDU 5 mode
979	.c454		a9 08		lda #$08	                lda #STATE.isTextWindow
980	.c456		24 d0		bit $d0		                bit STATE
981	.c458		d0 03		bne $c45d	                bne clearTextWindow                    ;taken if text window
982	.c45a		4c 68 c8	jmp $c868	                jmp clsFastPath

984							                ; Clear screen within text window
985							                ; -------------------------------
986	.c45d						clearTextWindow:
987	.c45d		20 08 c9	jsr $c908	                jsr copyTextWindowWidthInBytesToWorkspace28
988	.c460		ae 08 03	ldx $0308	                ldx vduv.textWindowLeft
989	.c463		8e 18 03	stx $0318	                stx vduv.textCursorXPosition
990	.c466		ae 0b 03	ldx $030b	                ldx vduv.textWindowTop
991	.c469						clearTextWindowRowsLoop:
992	.c469		8e 19 03	stx $0319	                stx vduv.textCursorYPosition
993	.c46c		20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
994	.c46f		20 e8 ca	jsr $cae8	                jsr LCAE8
995	.c472		ae 19 03	ldx $0319	                ldx vduv.textCursorYPosition
996	.c475		ec 09 03	cpx $0309	                cpx vduv.textWindowBottom
997	.c478		e8		inx		                inx
998	.c479		90 ee		bcc $c469	                bcc clearTextWindowRowsLoop

1000							;-------------------------------------------------------------------------
1001							;
1002							; VDU 30 (&1E) Home cursor [MasRef E.3-36]
1003							;
1004	.c47b						vdu30EntryPoint:
1005							                ; pretend it's VDU 31,0,0
1006	.c47b		9c 23 03	stz $0323	                stz vduv.queueEnd-1
1007	.c47e		9c 22 03	stz $0322	                stz vduv.queueEnd-2

1009							;-------------------------------------------------------------------------
1010							;
1011							; VDU 31 (&1F) Tab cursor [MasRef E.3-36]
1012							;
1013	.c481						vdu31EntryPoint:
1014	.c481		ad 66 03	lda $0366	                lda vduv.cursorFlags
1015	.c484		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
1016	.c486		aa		tax		                tax
1017	.c487						LC488:
8	.c487		20 d4 e2	jsr $e2d4	                jsr testVDU5StateNonInlined
1019	.c48a		d0 42		bne $c4ce	                bne LC4CF                    ;taken if VDU 5
1020	.c48c		ad 18 03	lda $0318	                lda vduv.textCursorXPosition
1021	.c48f		48		pha		                pha                          ;save old X pos
1022	.c490		ad 19 03	lda $0319	                lda vduv.textCursorYPosition
1023	.c493		48		pha		                pha                          ;save old Y pos
1024	.c494		ad 22 03	lda $0322	                lda vduv.queueEnd-2          ;X coordinate
1025	.c497		20 c6 c2	jsr $c2c6	                jsr setTextCursorXPositionWithCursorFlags
1026	.c49a		da		phx		                phx                          ;save true cursorFlags bits
1027	.c49b		8a		txa		                txa
1028	.c49c		49 08		eor #$08	                eor #vduv.cursorFlags.swapAxes ;cheekily do the other axis by just changing the cursor flags
1029	.c49e		aa		tax		                tax
1030	.c49f		ad 23 03	lda $0323	                lda vduv.queueEnd-1          ;Y coordinate
1031	.c4a2		20 d7 cc	jsr $ccd7	                jsr LCCD7
1032	.c4a5		fa		plx		                plx                    ;restore true cursorFlags bits
1033	.c4a6		90 11		bcc $c4b9	                bcc LC4BA              ;taken if no scrolling required
1034	.c4a8		a9 01		lda #$01	                lda #vduv.cursorFlags.scrollProtect
1035	.c4aa		2c 66 03	bit $0366	                bit $0366
1036	.c4ad		f0 11		beq $c4c0	                beq LC4C1                 ;taken if scroll protect off

1038							                ; Wrap text cursor X.
1039	.c4af		ad 22 03	lda $0322	                lda vduv.queueEnd-2       ;X coordinate
1040	.c4b2		3a		dec a		                dec a
1041	.c4b3		20 d7 cc	jsr $ccd7	                jsr LCCD7
1042	.c4b6		b0 08		bcs $c4c0	                bcs LC4C1
1043	.c4b8		38		sec		                sec
1044	.c4b9						LC4BA:
1045	.c4b9		6e 6c 03	ror $036c	                ror vduv.column81
1046	.c4bc		68		pla		                pla                          ;discard old Y pos
1047	.c4bd		68		pla		                pla                          ;discard old X pos
1048	.c4be		80 0b		bra $c4cb	                bra LC4CC

1050	.c4c0						LC4C1:
1051	.c4c0		68		pla		                pla
1052	.c4c1		8d 19 03	sta $0319	                sta vduv.textCursorYPosition ;restore old Y pos
1053	.c4c4		68		pla		                pla
1054	.c4c5		8d 18 03	sta $0318	                sta vduv.textCursorXPosition ;restore old X pos
1055	.c4c8		20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
1056	.c4cb						LC4CC:
1057	.c4cb		4c ec c6	jmp $c6ec	                jmp updateCRTCCursorAddress

1059	.c4ce						LC4CF:
1060	.c4ce		ad 22 03	lda $0322	                lda $0322
1061	.c4d1		20 df c1	jsr $c1df	                jsr LC1E0
1062	.c4d4		8a		txa		                txa
1063	.c4d5		49 08		eor #$08	                eor #$08
1064	.c4d7		aa		tax		                tax
1065	.c4d8		ad 23 03	lda $0323	                lda $0323
1066	.c4db		20 df c1	jsr $c1df	                jsr LC1E0
1067	.c4de						LC4DF:
1068	.c4de		a0 10		ldy #$10	                ldy #$10
1069	.c4e0		20 1c c9	jsr $c91c	                jsr copyGraphicsCursorPixels
1070	.c4e3		a2 02		ldx #$02	                ldx #$02
1071	.c4e5		a0 02		ldy #$02	                ldy #$02
1072	.c4e7		20 fb c4	jsr $c4fb	                jsr LC4FC
1073	.c4ea		a2 00		ldx #$00	                ldx #$00
1074	.c4ec		a0 04		ldy #$04	                ldy #$04
1075	.c4ee		ad 61 03	lda $0361	                lda $0361
1076	.c4f1						LC4F2:
1077	.c4f1		88		dey		                dey
1078	.c4f2		4a		lsr a		                lsr a
1079	.c4f3		d0 fc		bne $c4f1	                bne LC4F2
1080	.c4f5		ad 56 03	lda $0356	                lda $0356
1081	.c4f8		f0 01		beq $c4fb	                beq LC4FC
1082	.c4fa		c8		iny		                iny
1083	.c4fb						LC4FC:
1084	.c4fb		1e 10 03	asl $0310,x	                asl $0310,x
1085	.c4fe		3e 11 03	rol $0311,x	                rol $0311,x
1086	.c501		88		dey		                dey
1087	.c502		d0 f7		bne $c4fb	                bne LC4FC
1088	.c504		38		sec		                sec
1089	.c505		20 09 c5	jsr $c509	                jsr LC50A
1090	.c508		e8		inx		                inx
1091	.c509						LC50A:
1092	.c509		bd 10 03	lda $0310,x	                lda $0310,x
1093	.c50c		fd 0c 03	sbc $030c,x	                sbc $030C,x
1094	.c50f		9d 10 03	sta $0310,x	                sta $0310,x
1095	.c512		60		rts		                rts

1097							;-------------------------------------------------------------------------
1098							;
1099							; VDU 14 (&0E) Page mode on [MasRef E.3-6]
1100							;
1101	.c513						vdu14EntryPoint:
1102	.c513		9c 69 02	stz $0269	                stz pagedModeCounter
1103	.c516		a9 91		lda #$91	                lda #$91

1105							;-------------------------------------------------------------------------
1106							;
1107							; VDU 21 (&15) Disable VDU driver [MasRef E.3-11]
1108							;
1109	.c518						vdu21EntryPoint:
1110	.c518		49 95		eor #$95	                eor #$95
1111	.c51a						LC51B:
1112	.c51a		04 d0		tsb $d0		                tsb STATE
1113	.c51c		60		rts		                rts

1115							;-------------------------------------------------------------------------
1116							;
1117							; VDU 4 (&04) Print at text cursor [MasRef E.3-2]
1118							;
1119	.c51d						vdu4EntryPoint:
1120	.c51d		ad 61 03	lda $0361	                lda $0361
1121	.c520		f0 09		beq $c52b	                beq LC52C
1122	.c522		20 4f cf	jsr $cf4f	                jsr showCursor
1123	.c525		a9 2b		lda #$2b	                lda #$2B

1125							                ; fall through to vdu15EntryPoint

1127							;-------------------------------------------------------------------------
1128							;
1129							; VDU 15 (&0F) Page mode off [MasRef E.3-6]
1130							;
1131	.c527						vdu15EntryPoint:
1132	.c527		49 0b		eor #$0b	                eor #$0B
1133	.c529		14 d0		trb $d0		                trb STATE
1134	.c52b						LC52C:
1135	.c52b		60		rts		                rts

1137							;-------------------------------------------------------------------------
1138							;
1139							; VDU 5 (&05) Print text at graphics cursor [MasRef E.3-3]
1140							;
1141	.c52c						vdu5EntryPoint:
1142	.c52c		ad 61 03	lda $0361	                lda $0361
1143	.c52f		f0 fa		beq $c52b	                beq LC52C
1144	.c531		a9 20		lda #$20	                lda #$20
1145	.c533		20 52 cf	jsr $cf52	                jsr setCRTCRegister10
1146	.c536		80 e2		bra $c51a	                bra LC51B

1148							;-------------------------------------------------------------------------
1149							;
1150							; VDU 17 (&11) Define text colour [MasRef E.3-7]
1151							;
1152	.c538						vdu17EntryPoint:
1153	.c538		a0 00		ldy #$00	                ldy #$00
1154	.c53a		ad 23 03	lda $0323	                lda $0323
1155	.c53d		10 01		bpl $c540	                bpl LC541
1156	.c53f		c8		iny		                iny
1157	.c540						LC541:
1158	.c540		2d 60 03	and $0360	                and $0360
1159	.c543		85 da		sta $da		                sta $DA
1160	.c545		ad 60 03	lda $0360	                lda $0360
1161	.c548		f0 18		beq $c562	                beq LC563
1162	.c54a		29 07		and #$07	                and #$07
1163	.c54c		18		clc		                clc
1164	.c54d		65 da		adc $da		                adc $DA
1165	.c54f		aa		tax		                tax
1166	.c550		bd 4d e1	lda $e14d,x	                lda solidColoursTable-1,x
1167	.c553		99 57 03	sta $0357,y	                sta $0357,y
1168	.c556		ad 57 03	lda $0357	                lda $0357
1169	.c559		49 ff		eor #$ff	                eor #$FF
1170	.c55b		85 d3		sta $d3		                sta ZEOR
1171	.c55d		4d 58 03	eor $0358	                eor $0358
1172	.c560		85 d2		sta $d2		                sta ZORA
1173	.c562						LC563:
1174	.c562		60		rts		                rts

1176							;-------------------------------------------------------------------------
1177							;
1178							; VDU 18 (&12) Define graphics colour [MasRef E.3-7]
1179							;
1180	.c563						vdu18EntryPoint:
1181	.c563		a0 00		ldy #$00	                ldy #$00                    ;assume setting foreground
1182	.c565		ad 23 03	lda $0323	                lda vduv.queueEnd-1         ;get colour
1183	.c568		10 01		bpl $c56b	                bpl +                     ;taken if setting foreground
1184	.c56a		c8		iny		                iny                       ;setting background
1185	.c56b						+
1186	.c56b		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne
1187	.c56e		99 6d 03	sta $036d,y	                sta vduv.foregroundGraphicsColour,y
1188	.c571		ad 22 03	lda $0322	                lda vduv.queueEnd-2          ;get GCOL mode
1189	.c574		99 5b 03	sta $035b,y	                sta vduv.foregroundGCOLMode,y
1190	.c577		29 f0		and #$f0	                and #$F0                     ;non-zero if ECF
1191	.c579		99 6a 03	sta $036a,y	                sta vduv.isForegroundECF,y
1192	.c57c						initializeCurrentECFPatterns:
1193	.c57c		ad 5b 03	lda $035b	                lda vduv.foregroundGCOLMode
1194	.c57f		ae 6d 03	ldx $036d	                ldx vduv.foregroundGraphicsColour
1195	.c582		a0 00		ldy #$00	                ldy #andy.fgECFPattern-andy.currentECFPatterns
1196	.c584		20 8f c5	jsr $c58f	                jsr initializeCurrentECFPattern
1197	.c587		ad 5c 03	lda $035c	                lda vduv.backgroundGCOLMode
1198	.c58a		ae 6e 03	ldx $036e	                ldx vduv.backgroundGraphicsColour
1199	.c58d		a0 08		ldy #$08	                ldy #andy.bgECFPattern-andy.currentECFPatterns
1200	.c58f						initializeCurrentECFPattern:
1201	.c58f		29 f0		and #$f0	                and #$F0                     ;GCOL mode ECF bits
1202	.c591		d0 18		bne $c5ab	                bne initializeECFPatternFromPattern

1204	.c593						initializeECFPatternFromColour:
1205	.c593		86 da		stx $da		                stx ZTEMP+0                  ;colour low bits
1206	.c595		ad 60 03	lda $0360	                lda vduv.numberOfLogicalColoursMinusOne
1207	.c598		29 07		and #$07	                and #$07
1208	.c59a		18		clc		                clc
1209	.c59b		65 da		adc $da		                adc ZTEMP+0
1210	.c59d		aa		tax		                tax
1211							                ; use solid colour as ECF "pattern".
1212	.c59e		bd 4d e1	lda $e14d,x	                lda solidColoursTable-1,x
1213	.c5a1		a2 07		ldx #$07	                ldx #$07
1214	.c5a3						-
1215	.c5a3		99 20 88	sta $8820,y	                sta andy.fgECFPattern,y
1216	.c5a6		c8		iny		                iny
1217	.c5a7		ca		dex		                dex
1218	.c5a8		10 f9		bpl $c5a3	                bpl -
1219	.c5aa		60		rts		                rts

1221	.c5ab						initializeECFPatternFromPattern:
1222	.c5ab		4a		lsr a		                lsr a                        ;(index+1)*8
1223	.c5ac		aa		tax		                tax
1224	.c5ad		a9 07		lda #$07	                lda #$07
1225	.c5af		85 da		sta $da		                sta ZTEMP+0
1226	.c5b1						-
1227	.c5b1		bd f8 87	lda $87f8,x	                lda andy.ecfPatterns-8,x     ;-8 due to index+1 above
1228	.c5b4		99 20 88	sta $8820,y	                sta andy.fgECFPattern,y
1229	.c5b7		e8		inx		                inx
1230	.c5b8		c8		iny		                iny
1231	.c5b9		c6 da		dec $da		                dec ZTEMP+0
1232	.c5bb		10 f4		bpl $c5b1	                bpl -
1233	.c5bd		60		rts		                rts

1235							;-------------------------------------------------------------------------
1236							;
1237							; VDU 20 (&14) Restore default logical colours [MasRef E.3-10]
1238							;
1239	.c5be						setBackgroundTextColourForTeletext:
1240	.c5be		a9 20		lda #$20	                lda #' '
1241	.c5c0		8d 58 03	sta $0358	                sta vduv.backgroundTextColour
1242	.c5c3		60		rts		                rts

1244	.c5c4						vdu20EntryPoint:
1245	.c5c4		a2 05		ldx #$05	                ldx #$05
1246	.c5c6						-
1247	.c5c6		9e 57 03	stz $0357,x	                stz vduv.foregroundTextColour,x
1248	.c5c9		ca		dex		                dex
1249	.c5ca		10 fa		bpl $c5c6	                bpl -
1250	.c5cc		9c 6e 03	stz $036e	                stz vduv.backgroundGraphicsColour
1251	.c5cf		9c 6b 03	stz $036b	                stz vduv.isBackgroundECF
1252	.c5d2		a9 ff		lda #$ff	                lda #%11111111
1253	.c5d4		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
1254	.c5d7		f0 e5		beq $c5be	                beq setBackgroundTextColourForTeletext
1255	.c5d9		e0 0f		cpx #$0f	                cpx #$0F
1256	.c5db		d0 02		bne $c5df	                bne +                        ;taken unless MODE 2
1257	.c5dd		a9 3f		lda #$3f	                lda #%00111111               ;MODE 2 default foreground colour is 7
1258	.c5df						+
1259	.c5df		8d 57 03	sta $0357	                sta vduv.foregroundTextColour
1260	.c5e2		49 ff		eor #$ff	                eor #$FF
1261	.c5e4		85 d2		sta $d2		                sta ZORA
1262	.c5e6		85 d3		sta $d3		                sta ZEOR
1263	.c5e8		8a		txa		                txa
1264	.c5e9		29 07		and #$07	                and #$07
1265	.c5eb		8d 6d 03	sta $036d	                sta vduv.foregroundGraphicsColour
1266	.c5ee		9c 6a 03	stz $036a	                stz vduv.isForegroundECF
1267	.c5f1		da		phx		                phx                          ;save numberOfLogicalColoursMinusOne
1268	.c5f2		20 7c c5	jsr $c57c	                jsr initializeCurrentECFPatterns
1269	.c5f5		fa		plx		                plx                          ;restore numberOfLogicalColoursMinusOne
1270	.c5f6		8e 1f 03	stx $031f	                stx vduv.queueEnd-5          ;Prepare VDU19,<max logical colour>
1271	.c5f9		e0 03		cpx #$03	                cpx #$03
1272	.c5fb		f0 11		beq $c60e	                beq reset4Colours            ;taken if MODE 1/5
1273	.c5fd		90 20		bcc $c61f	                bcc reset2Colours            ;taken if MODE 0/3/4/6
1274	.c5ff						reset16Colours:
1275	.c5ff		8e 20 03	stx $0320	                stx vduv.queueEnd-4          ;start with VDU19,15,15,_,_,_
1276	.c602						-
1277	.c602		20 2c c6	jsr $c62c	                jsr vdu19EntryPoint
1278	.c605		ce 20 03	dec $0320	                dec vduv.queueEnd-4
1279	.c608		ce 1f 03	dec $031f	                dec vduv.queueEnd-5
1280	.c60b		10 f5		bpl $c602	                bpl -
1281	.c60d		60		rts		                rts

1283	.c60e						reset4Colours:
1284	.c60e		a2 07		ldx #$07	                ldx #$07
1285	.c610		8e 20 03	stx $0320	                stx vduv.queueEnd-4          ;start with VDU19,3,7,_,_,_
1286	.c613						-
1287	.c613		20 2c c6	jsr $c62c	                jsr vdu19EntryPoint          ;2,3, then 1,1, then 0,0
1288	.c616		4e 20 03	lsr $0320	                lsr vduv.queueEnd-4
1289	.c619		ce 1f 03	dec $031f	                dec vduv.queueEnd-5
1290	.c61c		10 f5		bpl $c613	                bpl -
1291	.c61e		60		rts		                rts

1293	.c61f						reset2Colours:
1294	.c61f		a2 07		ldx #$07	                ldx #$07
1295	.c621		20 29 c6	jsr $c629	                jsr +                        ;VDU19,1,7,_,_,_
1296	.c624		a2 00		ldx #$00	                ldx #$00
1297	.c626		9c 1f 03	stz $031f	                stz vduv.queueEnd-5          ;VDU19,0,0,_,_,_
1298	.c629						+
1299	.c629		8e 20 03	stx $0320	                stx vduv.queueEnd-4          ;VDU19,N,X,_,_,_

1301							                ; fall through to VDU19

1303							;-------------------------------------------------------------------------
1304							;
1305							; VDU 19 (&13) Define logical colour [MasRef E.3-9]
1306							;
1307	.c62c						vdu19EntryPoint:
1308	.c62c		08		php		                php
1309	.c62d		78		sei		                sei
1310	.c62e		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get logical colour
1311	.c631		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne ;apply logical colour limit
1312	.c634		aa		tax		                tax                        ;X = clamped logical colour
1313	.c635		ad 20 03	lda $0320	                lda vduv.queueEnd-4        ;get physical colour
1314	.c638						LC639:
1315	.c638		29 0f		and #$0f	                and #$0F                     ;apply physical colour limit
1316	.c63a		9d 6f 03	sta $036f,x	                sta vduv.currentPalette,x    ;update palette
1317	.c63d		a8		tay		                tay                          ;Y = physical colour
1318	.c63e		ad 60 03	lda $0360	                lda vduv.numberOfLogicalColoursMinusOne
1319	.c641		85 fa		sta $fa		                sta SEIWKA
1320	.c643		c9 03		cmp #$03	                cmp #$03 ;Z=1 C=1 if 4 colour; Z=0 C=1 if 16 colour; Z=0 C=0 if 2 colour
1321	.c645		08		php		                php      ;save flags
1322	.c646		8a		txa		                txa                          ;A = logical colour

1324							                ;put the logical colour value in the top 1, 2 or 4
1325							                ;bits of SEIWKA, depending on the colour depth.
1326							                ;
1327							                ; 2 colours: turn %0000000a into %a0000000
1328							                ; 4 colours: turn %000000ab into %ab000000
1329							                ;16 colours: turn %0000abcd into %abcd0000
1330	.c647						-
1331	.c647		4a		lsr a		                lsr a
1332	.c648		66 fa		ror $fa		                ror SEIWKA
1333	.c64a		b0 fb		bcs $c647	                bcs -
1334	.c64c		06 fa		asl $fa		                asl SEIWKA

1336	.c64e		98		tya		                tya                          ;A = physical colour
1337	.c64f		05 fa		ora $fa		                ora SEIWKA                   ;mix in logical colour
1338	.c651		aa		tax		                tax                          ;X = VPALETTE value
1339	.c652		a0 f0		ldy #$f0	                ldy #$F0 ;counts up to zero - counter for setting
1340							                         ;multiple logical colours [AUG p380]
1341	.c654						LC655:
1342	.c654		28		plp		                plp                          ;restore flags
1343	.c655		08		php		                php                          ;save flags
1344	.c656		d0 03		bne $c65b	                bne +                     ;taken if 2 colour/16 colour
1345	.c658		20 6e c6	jsr $c66e	                jsr fixUpVPALETTEFor4Colours
1346	.c65b						+
1347	.c65b		20 cb f1	jsr $f1cb	                jsr writeVPALETTE
1348	.c65e		18		clc		                clc
1349	.c65f		98		tya		                tya
1350	.c660		6d 60 03	adc $0360	                adc vduv.numberOfLogicalColoursMinusOne
1351	.c663		a8		tay		                tay
1352	.c664		8a		txa		                txa
1353	.c665		69 10		adc #$10	                adc #$10                     ;next logical colour
1354	.c667		aa		tax		                tax
1355	.c668		c8		iny		                iny                          ;Y+=numberOfLogicalColours
1356	.c669		d0 e9		bne $c654	                bne LC655                    ;all logical colours set once zero
1357	.c66b		28		plp		                plp
1358	.c66c		28		plp		                plp
1359	.c66d		60		rts		                rts

1361	.c66e						fixUpVPALETTEFor4Colours:
1362	.c66e		2a		rol a		                rol a                        ;A BCDabcd1
1363	.c66f		85 da		sta $da		                sta ZTEMP+0                  ;  BCDabcd1
1364	.c671		2a		rol a		                rol a                        ;B CDabcd1A
1365	.c672		2a		rol a		                rol a                        ;C Dabcd1AB
1366	.c673		08		php		                php                          ;C
1367	.c674		26 da		rol $da		                rol ZTEMP+0                  ;B CDabcd1C
1368	.c676		6a		ror a		                ror a                        ;B BDabcd1A
1369	.c677		28		plp		                plp                          ;C BDabcd1A
1370	.c678		6a		ror a		                ror a                        ;A CBDabcd1
1371	.c679		6a		ror a		                ror a                        ;1 ACBDabcd
1372	.c67a		60		rts		                rts                          ;

1374							;-------------------------------------------------------------------------
1375							;
1376							; VDU 23 (&17) Various functions [MasRef E.3-12]
1377							;
1378	.c67b						vdu23EntryPoint:
1379	.c67b		ad 1b 03	lda $031b	                lda vduv.queueEnd-9           ;get VDU 23 code
1380	.c67e		c9 20		cmp #$20	                cmp #$20
1381	.c680		90 0e		bcc $c690	                bcc LC691         ;branch taken if <32 - i.e., special

1383							                ; copy the 8 bytes of character definition to the
1384							                ; appropriate place.
1385	.c682		20 2e e2	jsr $e22e	                jsr getSoftCharacterDefinitionAddress
1386	.c685		a0 07		ldy #$07	                ldy #$07
1387	.c687						LC688:
1388	.c687		b9 1c 03	lda $031c,y	                lda vduv.queueEnd-8,y
1389	.c68a		91 de		sta ($de),y	                sta ($DE),y
1390	.c68c		88		dey		                dey
1391	.c68d		10 f8		bpl $c687	                bpl LC688
1392	.c68f		60		rts		                rts

1394	.c690						LC691:
1395	.c690		0a		asl a		                asl a
1396	.c691		aa		tax		                tax
1397	.c692		4a		lsr a		                lsr a
1398	.c693		c9 11		cmp #$11	                cmp #$11
1399	.c695		b0 0f		bcs $c6a6	                bcs callVDUV    ;call with C=1 - invalid code [MasRef
1400							                                ;E.3-19]
1401	.c697		7c 6b e0	jmp ($e06b,x)	                jmp (vdu23EntryPointTable,x)

1403							;-------------------------------------------------------------------------
1404							;
1405							; VDU 25 (&19) PLOT commands [MasRef E.3-21]
1406							;
1407	.c69a						vdu25EntryPoint:
1408	.c69a		ae 61 03	ldx $0361	                ldx vduv.pixelsPerByteMinusOne
1409	.c69d		f0 03		beq $c6a2	                beq callVDUVForPLOT          ;non-graphics PLOT
1410	.c69f		4c 45 d1	jmp $d145	                jmp handlePLOT

1412							;-------------------------------------------------------------------------
1413							;
1414							; Call VDUV for a PLOT call, either to handle non-graphics PLOT
1415							; [MasRef E.3-21] or PLOT 240-255 [MasRef E.3-34].
1416							;
1417	.c6a2						callVDUVForPLOT:
1418	.c6a2		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT code
1419	.c6a5		18		clc		                clc ;call with C=0 - non-graphics PLOT [MasRef E.3-21]

1421							;-------------------------------------------------------------------------
1422							;
1423							; Call VDUV.
1424							;
1425	.c6a6						callVDUV:
1429	.c6a6		4c e5 e2	jmp $e2e5	                jmp LE2F3

1432							;-------------------------------------------------------------------------
1433							;
1434							; VDU 26 (&1A) Restore default windows [MasRef E.3-34]
1435							;
1436	.c6a9						vdu26EntryPoint:
1437	.c6a9		a2 2c		ldx #$2c	                ldx #VDUVariables.workspace._2C
1438	.c6ab						-
1439	.c6ab		9e 00 03	stz $0300,x	                stz vduv,x                    ;reset workspace
1440	.c6ae		ca		dex		                dex
1441	.c6af		10 fa		bpl $c6ab	                bpl -

1443	.c6b1		20 a4 e2	jsr $e2a4	                jsr getDefaultBoundsForCurrentScreenMODE
1444	.c6b4		8e 0a 03	stx $030a	                stx vduv.textWindowRight
1445	.c6b7		8c 09 03	sty $0309	                sty vduv.textWindowBottom

1447	.c6ba		8a		txa		                txa
1448	.c6bb		20 7f c7	jsr $c77f	                jsr setTextWindowWidthInBytes

1450							                ; Set up the VDU queue as if VDU 24,0;0;1279;1023;,
1451							                ; then call the VDU 24 entry point.

1453							                ; 1c - ll - $00
1454							                ; 1d - lh - $00
1455							                ; 1e - tl - $00
1456							                ; 1f - th - $00
1457							                ; 20 - rl - $ff
1458							                ; 21 - rh - $04
1459							                ; 22 - tl - $ff
1460							                ; 23 - th - $03

1462	.c6be		a0 03		ldy #$03	                ldy #$03
1463	.c6c0		8c 23 03	sty $0323	                sty $0323
1464	.c6c3		c8		iny		                iny
1465	.c6c4		8c 21 03	sty $0321	                sty $0321
1466	.c6c7		ce 22 03	dec $0322	                dec $0322
1467	.c6ca		ce 20 03	dec $0320	                dec $0320
1468	.c6cd		20 1e c7	jsr $c71e	                jsr vdu24EntryPoint

1470	.c6d0		a9 08		lda #$08	                lda #STATE.isTextWindow
1471	.c6d2		14 d0		trb $d0		                trb STATE                    ;reset isTextWindow

1473	.c6d4		4c 7b c4	jmp $c47b	                jmp vdu30EntryPoint          ;reset text cursor

1475							;-------------------------------------------------------------------------
1476							;
1477							; Update CRTC cursor address to reflect text cursor position.
1478							;
1479	.c6d7						updateCRTCTextCursor:
1480	.c6d7		20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
1481	.c6da		80 10		bra $c6ec	                bra updateCRTCCursorAddress

1483							;-------------------------------------------------------------------------

1485	.c6dc						setCRTCCursorAddress:
1486	.c6dc		8e 4a 03	stx $034a	                stx vduv.textCursorCRTCAddress+0
1487	.c6df		8d 4b 03	sta $034b	                sta vduv.textCursorCRTCAddress+1
1488	.c6e2		10 04		bpl $c6e8	                bpl +
1489	.c6e4		38		sec		                sec
1490	.c6e5		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte
1491	.c6e8						+
1492	.c6e8		86 d8		stx $d8		                stx ZMEMT+0
1493	.c6ea		85 d9		sta $d9		                sta ZMEMT+1

1495							;-------------------------------------------------------------------------
1496							;
1497							;
1498	.c6ec						updateCRTCCursorAddress:
1504	.c6ec		ae 4a 03	ldx $034a	                ldx vduv.textCursorCRTCAddress+0
1505	.c6ef		ad 4b 03	lda $034b	                lda vduv.textCursorCRTCAddress+1
1506	.c6f2		a0 0e		ldy #$0e	                ldy #$0E

1508							;-------------------------------------------------------------------------
1509							;
1510							; Set CRTC address - cursor, or screen start.
1511							;
1512							; entry:
1513							;
1514							; A (msb), X (msb) = 6502 address to set
1515							;
1516							; Y = first CRTC register to set
1517							;
1519							; C = 1 if in Mode 7
1521							;
1522	.c6f4						setCRTCAddress:
1524	.c6f4		48		pha		                pha                          ;save screen address MSB
1525	.c6f5		ad 55 03	lda $0355	                lda vduv.currentScreenMODE
1526	.c6f8		c9 07		cmp #$07	                cmp #$07
1527	.c6fa		68		pla		                pla                        ;restore screen address MSB
1529	.c6fb		b0 0f		bcs $c70c	                bcs adjustAddressForMODE7
1530	.c6fd		86 da		stx $da		                stx ZTEMP+0
1531	.c6ff		4a		lsr a		                lsr a
1532	.c700		66 da		ror $da		                ror ZTEMP+0                  ;/2
1533	.c702		4a		lsr a		                lsr a
1534	.c703		66 da		ror $da		                ror ZTEMP+0                  ;/4
1535	.c705		4a		lsr a		                lsr a
1536	.c706		66 da		ror $da		                ror ZTEMP+0                  ;/8
1537	.c708		a6 da		ldx $da		                ldx ZTEMP+0
1538	.c70a		80 04		bra $c710	                bra setCRTCAddressRegisters

1540	.c70c						adjustAddressForMODE7:
1541							                ; C=1
1548	.c70c		e9 74		sbc #$74	                sbc #$74                 ;adjust for Mode 7 addressing
1549	.c70e		49 20		eor #$20	                eor #$20                 ;adjust for Mode 7 addressing
1551	.c710						setCRTCAddressRegisters:
1552	.c710		8c 00 fe	sty $fe00	                sty CRTC+0
1553	.c713		8d 01 fe	sta $fe01	                sta CRTC+1
1554	.c716		c8		iny		                iny
1555	.c717		8c 00 fe	sty $fe00	                sty CRTC+0
1556	.c71a		8e 01 fe	stx $fe01	                stx CRTC+1
1557	.c71d		60		rts		                rts

1559							;-------------------------------------------------------------------------
1560							;
1561							; VDU 24 (&18) Define graphics window [MasRef E.3-21]
1562							;
1563							; VDU queue:
1564							;
1565							; -8 = <left
1566							; -7 = >left
1567							; -6 = <bottom
1568							; -5 = >bottom
1569							; -4 = <right
1570							; -3 = >right
1571							; -2 = <top
1572							; -1 = >top
1573							;
1574	.c71e						vdu24EntryPoint:
1575	.c71e		20 78 c7	jsr $c778	                jsr LC779

1577	.c721		a2 02		ldx #$02	                ldx #2
1578	.c723						-
1579	.c723		38		sec		                sec

1581							                ; <height when X=2, then <width when X=0
1582	.c724		bd 20 03	lda $0320,x	                lda vduv.queueEnd-4+0,x
1583	.c727		fd 1c 03	sbc $031c,x	                sbc vduv.queueEnd-8+0,x
1584	.c72a		9d 2c 03	sta $032c,x	                sta vduv.workspace._2C+0,x

1586							                ; >height when X=2, then >width when X=0
1587	.c72d		bd 21 03	lda $0321,x	                lda vduv.queueEnd-4+1,x
1588	.c730		fd 1d 03	sbc $031d,x	                sbc vduv.queueEnd-8+1,x
1589	.c733		9d 2d 03	sta $032d,x	                sta vduv.workspace._2C+1,x

1591	.c736		ca		dex		                dex
1592	.c737		ca		dex		                dex
1593	.c738		10 e9		bpl $c723	                bpl -

1595	.c73a		0d 2f 03	ora $032f	                ora vduv.workspace._2C+3     ;A=>width|>height
1596	.c73d		30 39		bmi $c778	                bmi LC779 ;taken if either dimension negative - window invalid
1597	.c73f		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4 ;left bottom
1598	.c741		20 dd d1	jsr $d1dd	                jsr eigabsEntryPoint         ;convert to pixels
1599	.c744		a2 1c		ldx #$1c	                ldx #VDUVariables.queueEnd-8 ;right top
1600	.c746		20 dd d1	jsr $d1dd	                jsr eigabsEntryPoint         ;convert to pixels
1601	.c749		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;>bottom
1602	.c74c		0d 1d 03	ora $031d	                ora vduv.queueEnd-7          ;>left
1603	.c74f		30 27		bmi $c778	                bmi LC779 ;taken if either bottom or left negative - window invalid
1604	.c751		ad 23 03	lda $0323	                lda vduv.queueEnd-1          ;>top
1605	.c754		d0 22		bne $c778	                bne LC779          ;taken if top>=256 - window invalid
1606	.c756		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
1607	.c759		ad 21 03	lda $0321	                lda vduv.queueEnd-3          ;>right
1608	.c75c		85 da		sta $da		                sta ZTEMP+0
1609	.c75e		ad 20 03	lda $0320	                lda vduv.queueEnd-4          ;<right
1610	.c761		46 da		lsr $da		                lsr ZTEMP+0                  ;>(right/2)
1611	.c763		6a		ror a		                ror a                        ;<(right/2)
1612	.c764		46 da		lsr $da		                lsr ZTEMP+0                  ;>(right/4)

1614							                ; 639>>2=159 - so any valid pixel X in any mode will
1615							                ; have an MSB of 0 after being shifted right 2.
1616	.c766		d0 10		bne $c778	                bne LC779 ;taken if right edge definitely off screen - window invalid
1617	.c768		6a		ror a		                ror a     ;<(right/4)
1618	.c769		4a		lsr a		                lsr a     ;<(right/8)
1619	.c76a		dd 0b e1	cmp $e10b,x	                cmp modeMaxColumn,x
1620	.c76d		f0 02		beq $c771	                beq LC772                    ;taken if right edge just on screen
1621	.c76f		10 07		bpl $c778	                bpl LC779 ;taken if right edge off screen - window definitely invalid
1622	.c771						LC772:
1623	.c771		a0 00		ldy #$00	                ldy #VDUVariables.graphicsWindowPixelsLeft
1624	.c773		a2 1c		ldx #$1c	                ldx #VDUVariables.queueEnd-8
1625	.c775		20 04 c9	jsr $c904	                jsr copyEightBytesWithinVDUVariables
1626	.c778						LC779:
1627	.c778		a2 10		ldx #$10	                ldx #VDUVariables.graphicsCursorPositionX
1628	.c77a		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
1629	.c77c		4c bc e2	jmp $e2bc	                jmp exchangeFourVDUBytes

1631							;-------------------------------------------------------------------------
1632							;
1633							; Call getBytesPerInclusiveTextRow, and store the result in the
1634							; textWindowWidthInBytes VDU variable.
1635							;
1636	.c77f						setTextWindowWidthInBytes:
1637	.c77f		20 3b c9	jsr $c93b	                jsr getBytesPerInclusiveTextRow
1638	.c782		8d 4c 03	sta $034c	                sta vduv.textWindowWidthInBytes+0
1639	.c785		8e 4d 03	stx $034d	                stx vduv.textWindowWidthInBytes+1
1640	.c788		60		rts		                rts

1642							;-------------------------------------------------------------------------
1643							;
1644							; VDU 29 (&1D) Define graphics origin [MasRef E.3-35]
1645							;
1646	.c789						vdu29EntryPoint:
1647	.c789		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
1648	.c78b		a0 0c		ldy #$0c	                ldy #VDUVariables.graphicsWindowOriginX
1649	.c78d		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
1650	.c790		4c de c4	jmp $c4de	                jmp LC4DF

1652							;-------------------------------------------------------------------------
1653							;
1654							; VDU 22 (&16) Select screen mode [MasRef E.3-11]
1655							;
1656	.c793						vdu22EntryPoint:
1657	.c793		ad 23 03	lda $0323	                lda vduv.queueEnd-1          ;get MODE number
1658	.c796		80 26		bra $c7be	                bra setMODE

1660							;-------------------------------------------------------------------------
1661							;
1662	.c798						setStartupMODE:
1664	.c798		20 53 f3	jsr $f353	                jsr withTSTClear
1666	.c79b		85 da		sta $da		                sta ZTEMP+0                  ;save MODE
1667	.c79d		a5 f4		lda $f4		                lda $F4
1668	.c79f		48		pha		                pha
1669	.c7a0		09 80		ora #$80	                ora #$80                     ;page in ANDY
1670	.c7a2		20 5d e5	jsr $e55d	                jsr selectROMA
1671	.c7a5		20 ac c7	jsr $c7ac	                jsr +
1672	.c7a8		68		pla		                pla
1673	.c7a9		4c 5d e5	jmp $e55d	                jmp selectROMA               ;restore old ROM

1675	.c7ac						+
1676							                ; TODO but what of the reserved byte here?
1677	.c7ac		a2 7f		ldx #$7f	                ldx #size(VDUVariables)-1
1678	.c7ae		64 d0		stz $d0		                stz STATE
1679	.c7b0		ad 66 03	lda $0366	                lda vduv.cursorFlags
1680	.c7b3						-
1681	.c7b3		9e ff 02	stz $02ff,x	                stz vduv-1,x
1682	.c7b6		ca		dex		                dex
1683	.c7b7		d0 fa		bne $c7b3	                bne -
1684	.c7b9		8d 66 03	sta $0366	                sta vduv.cursorFlags
1685	.c7bc		a5 da		lda $da		                lda ZTEMP                    ;restore MODE

1687							                ; fall through to setMODE

1689							;-------------------------------------------------------------------------
1690							;
1691							;
1692							;
1693	.c7be						setMODE:
1694	.c7be		9c 8a 02	stz $028a	                stz vduDriverMemory
1695	.c7c1		9c 8b 02	stz $028b	                stz displayMemory
1696	.c7c4		a8		tay		                tay                          ;Y=mode
1697	.c7c5		30 10		bmi $c7d7	                bmi setShadowMODE
1698	.c7c7		ae 7f 02	ldx $027f	                ldx shadowRAMState
1699	.c7ca		f0 0b		beq $c7d7	                beq setShadowMODE
1700	.c7cc		a9 10		lda #$10	                lda #STATE.isShadowMode
1701	.c7ce		14 d0		trb $d0		                trb STATE
1702	.c7d0		a9 03		lda #$03	                lda #ACCCON.D|ACCCON.E
1703	.c7d2		1c 34 fe	trb $fe34	                trb ACCCON ;display main RAM, VDU code accesses main RAM
1704	.c7d5		80 09		bra $c7e0	                bra +

1706	.c7d7						setShadowMODE:
1707	.c7d7		a9 10		lda #$10	                lda #STATE.isShadowMode
1708	.c7d9		04 d0		tsb $d0		                tsb STATE
1709	.c7db		a9 03		lda #$03	                lda #ACCCON.D|ACCCON.E
1710	.c7dd		0c 34 fe	tsb $fe34	                tsb ACCCON ;display shadow RAM, VDU code accesses shadow RAM
1711	.c7e0						+
1712	.c7e0		98		tya		                tya                          ;A=mode
1713	.c7e1		29 07		and #$07	                and #$07                     ;get MODE 0-7
1714	.c7e3		aa		tax		                tax                          ;X=MODE 0-7
1715	.c7e4		8e 55 03	stx $0355	                stx vduv.currentScreenMODE
1716	.c7e7		bd 3e e1	lda $e13e,x	                lda numberOfLogicalColoursMinusOneForMODE,x
1717	.c7ea		8d 60 03	sta $0360	                sta vduv.numberOfLogicalColoursMinusOne
1718	.c7ed		bd 1b e1	lda $e11b,x	                lda bytesPerCharacterForMODE,x
1719	.c7f0		8d 4f 03	sta $034f	                sta vduv.bytesPerCharacter
1720	.c7f3		bd 64 e1	lda $e164,x	                lda pixelsPerByteMinusOneForMODE,x
1721	.c7f6		8d 61 03	sta $0361	                sta vduv.pixelsPerByteMinusOne
1722	.c7f9		d0 02		bne $c7fd	                bne +                        ;taken if graphics mode
1723	.c7fb		a9 07		lda #$07	                lda #$07                     ;assume 8 px/byte for non-graphics modes
1724	.c7fd						+
1725	.c7fd		0a		asl a		                asl a            ;convert to pixelMasks index for rightmost pixel
1726	.c7fe		a8		tay		                tay
1727	.c7ff		b9 30 e1	lda $e130,y	                lda pixelMasks-1,y
1728	.c802		8d 63 03	sta $0363	                sta vduv.colourMaskRight
1729	.c805						-
1730	.c805		0a		asl a		                asl a
1731	.c806		10 fd		bpl $c805	                bpl -   ;keep shifting until leftmost pixel mask found
1732	.c808		8d 62 03	sta $0362	                sta vduv.colourMaskLeft
1733	.c80b		bc 6a e1	ldy $e16a,x	                ldy screenMODEGroupForMODE,x
1734	.c80e		8c 56 03	sty $0356	                sty vduv.currentScreenMODEGroup
1735	.c811		b9 76 e1	lda $e176,y	                lda latchBit4ForScreenMODEGroup,y
1736	.c814		08		php		                php
1737	.c815		78		sei		                sei
1738	.c816		8d 40 fe	sta $fe40	                sta systemVIA.orb
1739	.c819		b9 72 e1	lda $e172,y	                lda latchBit5ForScreenMODEGroup,y
1740	.c81c		8d 40 fe	sta $fe40	                sta systemVIA.orb
1741	.c81f		28		plp		                plp
1742	.c820		b9 7b e1	lda $e17b,y	                lda screenSizeHighByteForScreenMODEGroup,y
1743	.c823		8d 54 03	sta $0354	                sta vduv.screenSizeHighByte
1744	.c826		b9 80 e1	lda $e180,y	                lda startScreenAddressHighByteForScreenMODEGroup,y
1745	.c829		8d 4e 03	sta $034e	                sta vduv.startScreenAddressHighByte
1746	.c82c		a9 ee		lda #$ee	                lda #STATE.isVDU21|STATE.isCursorEditing|STATE.isVDU5|STATE.isTextWindow|STATE.isPagedScrolling|STATE.isScrollingDisabled
1747	.c82e		14 d0		trb $d0		                trb STATE
1748	.c830		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
1749	.c833		bd 13 e1	lda $e113,x	                lda vcontrolForScreenMODE,x
1750	.c836		20 ba f1	jsr $f1ba	                jsr setVCONTROL
1751	.c839		08		php		                php
1752	.c83a		78		sei		                sei
1753	.c83b		be 85 e1	ldx $e185,y	                ldx crtcRegisterLastIndexForScreenMODEGroup,y
1754	.c83e		a0 0b		ldy #$0b	                ldy #$0B
1755	.c840						-
1756	.c840		bd 8a e1	lda $e18a,x	                lda crtcRegisterValues,x
1757	.c843		20 00 cf	jsr $cf00	                jsr setCRTCRegister
1758	.c846		ca		dex		                dex
1759	.c847		88		dey		                dey
1760	.c848		10 f6		bpl $c840	                bpl -
1761	.c84a		28		plp		                plp
1762	.c84b		20 c4 c5	jsr $c5c4	                jsr vdu20EntryPoint
1763	.c84e		20 6c cf	jsr $cf6c	                jsr vdu23_11_EntryPoint
1764	.c851		a9 aa		lda #$aa	                lda #%10101010
1765	.c853		8d 67 03	sta $0367	                sta vduv.dotPattern
1766	.c856		8d 68 03	sta $0368	                sta vduv.dotPatternState
1767	.c859		20 a9 c6	jsr $c6a9	                jsr vdu26EntryPoint
1768	.c85c		ad 4c 03	lda $034c	                lda vduv.textWindowWidthInBytes+0
1769	.c85f		ae 4d 03	ldx $034d	                ldx vduv.textWindowWidthInBytes+1
1770	.c862		8d 52 03	sta $0352	                sta vduv.bytesPerCharacterRow+0
1771	.c865		8e 53 03	stx $0353	                stx vduv.bytesPerCharacterRow+1

1773							                ; Do a fast hardware CLS of the whole screen
1774							                ; ------------------------------------------
1775	.c868						clsFastPath:
1776	.c868		a2 00		ldx #$00	                ldx #$00
1777	.c86a		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
1778	.c86d		9c 50 03	stz $0350	                stz vduv.screenTopLeftAddress+0
1779	.c870		8d 51 03	sta $0351	                sta vduv.screenTopLeftAddress+1
1780	.c873		20 dc c6	jsr $c6dc	                jsr setCRTCCursorAddress
1781	.c876		a0 0c		ldy #$0c	                ldy #$0C
1782	.c878		20 10 c7	jsr $c710	                jsr setCRTCAddressRegisters
1783	.c87b		9c 69 02	stz $0269	                stz pagedModeCounter
1784	.c87e		38		sec		                sec
1785	.c87f		a9 80		lda #$80	                lda #$80
1786	.c881		ed 4e 03	sbc $034e	                sbc vduv.startScreenAddressHighByte
1787	.c884		aa		tax		                tax
1788	.c885		a0 00		ldy #$00	                ldy #$00
1789	.c887		20 84 cb	jsr $cb84	                jsr clearTextMemory
1790	.c88a		4c 7b c4	jmp $c47b	                jmp vdu30EntryPoint

1792	.c88d						LC88B:
1793	.c88d		20 d0 c8	jsr $c8d0	                jsr LC8CF                    ; Clear paged mode counter
1794	.c890						LC88E:
1795	.c890		20 9a f1	jsr $f19a	                jsr osbyte76    ; Call KEYV to test Shift & Ctrl keys
1796	.c893		90 02		bcc $c897	                bcc LC895                    ; Ctrl not pressed, exit loop
1797	.c895		30 f6		bmi $c88d	                bmi LC88B                    ; Shift pressed, loop back
1798	.c897						LC895:
1799	.c897		a5 d0		lda $d0		                lda STATE
1800	.c899		49 04		eor #$04	                eor #STATE.isPagedScrolling
1801	.c89b		29 46		and #$46	                and #STATE.isCursorEditing|STATE.isPagedScrolling|STATE.isScrollingDisabled;
1802	.c89d		d0 37		bne $c8d6	                bne LC8D6
1803	.c89f		20 d7 c8	jsr $c8d7	                jsr LC8D7
1804	.c8a2		b9 18 03	lda $0318,y	                lda vduv.textCursorXPosition,y
1805	.c8a5		dd 08 03	cmp $0308,x	                cmp vduv.textWindowLeft,x
1806	.c8a8		d0 29		bne $c8d3	                bne LC8D3
1808	.c8aa		c0 00		cpy #$00	                cpy #0                       ; also sets C
1814	.c8ac		d0 08		bne $c8b6	                bne LC8B5
1815	.c8ae		ad 0a 03	lda $030a	                lda vduv.textWindowRight
1816	.c8b1		ed 08 03	sbc $0308	                sbc vduv.textWindowLeft
1817	.c8b4		80 06		bra $c8bc	                bra LC8BB

1819	.c8b6						LC8B5:
1820	.c8b6		ad 09 03	lda $0309	                lda vduv.textWindowBottom
1821	.c8b9		ed 0b 03	sbc $030b	                sbc vduv.textWindowTop
1822	.c8bc						LC8BB:
1823	.c8bc		48		pha		                pha
1824	.c8bd		4a		lsr a		                lsr a
1825	.c8be		4a		lsr a		                lsr a
1826	.c8bf		85 da		sta $da		                sta ZTEMP+0
1827	.c8c1		38		sec		                sec
1828	.c8c2		68		pla		                pla
1829	.c8c3		e5 da		sbc $da		                sbc ZTEMP+0
1830	.c8c5		cd 69 02	cmp $0269	                cmp pagedModeCounter
1831	.c8c8		b0 09		bcs $c8d3	                bcs LC8D3
1832	.c8ca						LC8C9:
1833	.c8ca		20 9a f1	jsr $f19a	                jsr osbyte76
1834	.c8cd		38		sec		                sec
1835	.c8ce		10 fa		bpl $c8ca	                bpl LC8C9

1837	.c8d0						LC8CF:
1838	.c8d0		9c 69 02	stz $0269	                stz pagedModeCounter        ; Clear paged mode counter
1842	.c8d3						LC8D3:
1843	.c8d3		ee 69 02	inc $0269	                inc pagedModeCounter
1844	.c8d6						LC8D6:
1845	.c8d6		60		rts		                rts

1847	.c8d7						LC8D7:
1848	.c8d7		ad 66 03	lda $0366	                lda vduv.cursorFlags
1849	.c8da		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
1850	.c8dc		4a		lsr a		                lsr a                        ;xvh
1851	.c8dd		aa		tax		                tax
1852	.c8de		bd 06 e2	lda $e206,x	                lda LE204,x
1853	.c8e1		aa		tax		                tax
1854	.c8e2		29 01		and #$01	                and #$01
1855	.c8e4		a8		tay		                tay
1856	.c8e5		60		rts		                rts

1858							;-------------------------------------------------------------------------
1859							;
1860							; Prepare AABB based on the current graphics cursor and some other
1861							; coordinate.
1862							;
1863							; entry:
1864							;
1865							; X = VDU variable offset of other coordinate (4 bytes: X;Y;)
1866							;
1867							; exit:
1868							;
1869							; vduv.workspace._28 = minimum
1870							;
1871							; vduv.workspace._2c = maximum
1872							;
1873	.c8e6						prepareAABB:
1874	.c8e6		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixels
1875	.c8e8		20 b6 d5	jsr $d5b6	                jsr sortVDUVariableCoordinates
1876	.c8eb		5a		phy		                phy                          ;save greater Y
1877	.c8ec		da		phx		                phx                          ;save lesser Y
1878	.c8ed		20 cb d5	jsr $d5cb	                jsr sortVDUVariableWords     ;X=lesser X, Y=greater X
1879	.c8f0		68		pla		                pla                          ;A=lesser Y
1880	.c8f1		5a		phy		                phy                          ;save greater X
1881	.c8f2		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
1882	.c8f4		20 f9 c8	jsr $c8f9	                jsr +
1883	.c8f7		fa		plx		                plx                          ;X=greater X
1884	.c8f8		68		pla		                pla                          ;A=greater Y
1885	.c8f9						+
1886							                ; Copy VDU variable word +X to VDU variable word+Y.
1887							                ; Then cropy VDU variable word +A+2 to VDU variable
1888							                ; word+Y+2. Return with updated Y.
1889	.c8f9		48		pha		                pha
1890	.c8fa		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
1891	.c8fd		fa		plx		                plx
1892	.c8fe		e8		inx		                inx
1893	.c8ff		e8		inx		                inx
1894	.c900		80 0a		bra $c90c	                bra copyTwoBytesWithinVDUVariables

1896							;-------------------------------------------------------------------------
1897							;
1898							; Copy 8 bytes to workspace 28 in the VDU variables.
1899							;
1900							; entry:
1901							;
1902							; X = source offset
1903							;
1904	.c902						copyEightBytesToWorkspace28:
1905	.c902		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28

1907							;-------------------------------------------------------------------------
1908							;
1909							; Copy 8 bytes in the VDU variables.
1910							;
1911							; entry:
1912							;
1913							; X = source offset
1914							;
1915							; Y = dest offset
1916							;
1917	.c904						copyEightBytesWithinVDUVariables:
1918	.c904		a9 08		lda #$08	                lda #$08
1919	.c906		80 18		bra $c920	                bra copyABytesWithinVDUVariables

1921							;-------------------------------------------------------------------------
1922							;
1923							; copyTextWindowWidthInBytesToWorkspace28
1924	.c908						copyTextWindowWidthInBytesToWorkspace28:
1925	.c908		a2 4c		ldx #$4c	                ldx #VDUVariables.textWindowWidthInBytes
1926	.c90a		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28

1928							;-------------------------------------------------------------------------
1929							;
1930							;
1931	.c90c						copyTwoBytesWithinVDUVariables:
1932	.c90c		a9 02		lda #$02	                lda #$02
1933	.c90e		80 10		bra $c920	                bra copyABytesWithinVDUVariables

1935							;-------------------------------------------------------------------------
1936							;
1937							; Copy text window info to workspace2C.
1938							;
1939	.c910						copyTextWindowToWorkspace2C:
1940	.c910		a2 08		ldx #$08	                ldx #VDUVariables.textWindowLeft
1941	.c912		a0 2c		ldy #$2c	                ldy #VDUVariables.workspace._2C
1942	.c914		80 08		bra $c91e	                bra copyFourBytesWithinVDUVariables

1944							;-------------------------------------------------------------------------
1945							;
1946							; Copy last 4 bytes of VDU queue somewhere.
1947							;
1948	.c916						copyLastFourVDUQueueBytes:
1949	.c916		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
1950	.c918		80 04		bra $c91e	                bra copyFourBytesWithinVDUVariables

1952							;-------------------------------------------------------------------------
1953							;
1954							; Copy old graphics cursor position to current graphics cursor position.
1955							;
1956	.c91a						copyGraphicsCursorPixelsToOldGraphicsCursorPixels:
1957	.c91a		a0 14		ldy #$14	                ldy #VDUVariables.oldGraphicsCursorPixelsX

1959							;-------------------------------------------------------------------------
1960							;
1961							; Copy the graphics cursor position somewhere.
1962							;
1963	.c91c						copyGraphicsCursorPixels:
1964	.c91c		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX

1966							;-------------------------------------------------------------------------
1967							;
1968							; Copy 4 bytes in the VDU variables.
1969							;
1970							; entry:
1971							;
1972							; X = source offset
1973							;
1974							; Y = dest offset
1975							;
1976	.c91e						copyFourBytesWithinVDUVariables:
1977	.c91e		a9 04		lda #$04	                lda #$04

1979							                ; fall through to copyABytesWithinVDUVariables

1981							;-------------------------------------------------------------------------
1982							;
1983							; Copy some bytes in the VDU variables.
1984							;
1985							; entry:
1986							;
1987							; A = number of bytes
1988							;
1989							; X = source offset
1990							;
1991							; Y = dest offset
1992							;
1993							; exit:
1994							;
1995							; X = updated source offset
1996							;
1997							; Y = updated dest offset
1998							;
1999	.c920						copyABytesWithinVDUVariables:
2000	.c920		48		pha		                pha
2001	.c921		bd 00 03	lda $0300,x	                lda vduv,x
2002	.c924		99 00 03	sta $0300,y	                sta vduv,y
2003	.c927		e8		inx		                inx
2004	.c928		c8		iny		                iny
2005	.c929		68		pla		                pla
2006	.c92a		3a		dec a		                dec a
2007	.c92b		d0 f3		bne $c920	                bne copyABytesWithinVDUVariables
2008	.c92d		60		rts		                rts

2010							;-------------------------------------------------------------------------
2011							;
2012							; Negate a 16-bit value stored in Y/A
2013							;
2014							; entry:
2015							;
2016							; Y (LSB), A (MSB) = value
2017							;
2018							; exit:
2019							;
2020							; Y (LSB), A (MSB) = -value
2021							;
2022	.c92e						negateAY:
2023	.c92e		48		pha		                pha
2024	.c92f		98		tya		                tya
2025	.c930		49 ff		eor #$ff	                eor #$FF
2026	.c932		a8		tay		                tay
2027	.c933		68		pla		                pla
2028	.c934		49 ff		eor #$ff	                eor #$FF
2029	.c936		c8		iny		                iny
2030	.c937		d0 01		bne $c93a	                bne +
2031	.c939		1a		inc a		                inc a
2032	.c93a						+
2033	.c93a		60		rts		                rts

2035							;-------------------------------------------------------------------------
2036							;
2037							; Multiply a text window width by the number of bytes per char. There
2038							; are inclusive and exclusive versions, depending on how the width was
2039							; calculated.
2040							;
2041							; entry:
2042							;
2043							; A = value-1 to multiply (inclusive), value to multiply (exclusive)
2044							;
2045							; exit:
2046							;
2047							; A (lsb), X (msb) = value*vduv.bytesPerCharacter
2048							;
2049	.c93b						getBytesPerInclusiveTextRow:
2050	.c93b		1a		inc a		                inc a
2051	.c93c						getBytesPerExclusiveTextRow:
2052	.c93c		85 da		sta $da		                sta $DA
2053	.c93e		64 db		stz $db		                stz $DB
2054	.c940		ad 4f 03	lda $034f	                lda vduv.bytesPerCharacter    ;A=1/8/16/32
2055	.c943						-
2056	.c943		4a		lsr a		                lsr a
2057	.c944		b0 06		bcs $c94c	                bcs +                     ;taken when multiply is done
2058	.c946		06 da		asl $da		                asl $DA              ;shift size LSB
2059	.c948		26 db		rol $db		                rol $DB              ;carry into size MSB
2060	.c94a		80 f7		bra $c943	                bra -

2062	.c94c						+
2063	.c94c		a5 da		lda $da		                lda $DA
2064	.c94e		a6 db		ldx $db		                ldx $DB
2065	.c950		60		rts		                rts

2067							;-------------------------------------------------------------------------
2068							;
2069							;
2070	.c951						prepareForPlotBackground:
2071	.c951		a2 08		ldx #$08	                ldx #$08                     ;plot background
2072	.c953		8e 59 03	stx $0359	                stx vduv.graphicsPlotState
2073	.c956		ad 5c 03	lda $035c	                lda vduv.backgroundGCOLMode
2074	.c959		29 0f		and #$0f	                and #$0F
2075	.c95b		8d 5a 03	sta $035a	                sta vduv.graphicsPlotMode
2076	.c95e		60		rts		                rts

2078							;-------------------------------------------------------------------------

2080	.c95f						LC95F:
2081	.c95f		a9 00		lda #$00	                lda #$00
2082	.c961		48		pha		                pha
2083	.c962		48		pha		                pha
2084	.c963		ae 2a 03	ldx $032a	                ldx $032A
2085	.c966		20 7d cc	jsr $cc7d	                jsr LCC7D
2086	.c969		80 14		bra $c97f	                bra LC97F

2088	.c96b						LC96B:
2089	.c96b		38		sec		                sec
2090	.c96c		ad 4f 03	lda $034f	                lda $034F
2091	.c96f		ed 2a 03	sbc $032a	                sbc $032A
2092	.c972		48		pha		                pha
2093	.c973		20 a4 e2	jsr $e2a4	                jsr getDefaultBoundsForCurrentScreenMODE
2094	.c976		da		phx		                phx
2095	.c977		a9 00		lda #$00	                lda #$00
2096	.c979		ae 2a 03	ldx $032a	                ldx $032A
2097	.c97c		20 5d cc	jsr $cc5d	                jsr LCC5D
2098	.c97f						LC97F:
2099							                ; scroll left/right
2100	.c97f		8e 50 03	stx $0350	                stx vduv.screenTopLeftAddress+0
2101	.c982		8d 51 03	sta $0351	                sta vduv.screenTopLeftAddress+1
2102	.c985		fa		plx		                plx
2103	.c986		a0 00		ldy #$00	                ldy #$00
2104	.c988		20 b0 cc	jsr $ccb0	                jsr getAddressForTextPosition
2105	.c98b		fa		plx		                plx
2106	.c98c		a9 00		lda #$00	                lda #$00
2107	.c98e		20 5d cc	jsr $cc5d	                jsr LCC5D
2108	.c991		86 d8		stx $d8		                stx ZMEMT+0
2109	.c993		85 d9		sta $d9		                sta ZMEMT+1
2110	.c995		20 a4 e2	jsr $e2a4	                jsr getDefaultBoundsForCurrentScreenMODE
2111	.c998		20 ae ca	jsr $caae	                jsr LCAAE
2112	.c99b		80 1b		bra $c9b8	                bra LC9B8

2114	.c99d						LC99D:
2115	.c99d		a0 00		ldy #$00	                ldy #$00
2116	.c99f		20 77 cc	jsr $cc77	                jsr LCC77
2117	.c9a2		80 06		bra $c9aa	                bra LC9AA

2119	.c9a4						LC9A4:
2120	.c9a4		20 a4 e2	jsr $e2a4	                jsr getDefaultBoundsForCurrentScreenMODE
2121	.c9a7		20 57 cc	jsr $cc57	                jsr LCC57
2122	.c9aa						LC9AA:
2123	.c9aa		8e 50 03	stx $0350	                stx vduv.screenTopLeftAddress+0
2124	.c9ad		8d 51 03	sta $0351	                sta vduv.screenTopLeftAddress+1
2125	.c9b0		a2 00		ldx #$00	                ldx #$00
2126	.c9b2		20 b0 cc	jsr $ccb0	                jsr getAddressForTextPosition
2127	.c9b5		20 e8 ca	jsr $cae8	                jsr LCAE8
2128	.c9b8						LC9B8:
2134	.c9b8		a0 0c		ldy #$0c	                ldy #$0C
2135	.c9ba		ad 51 03	lda $0351	                lda vduv.screenTopLeftAddress+1
2136	.c9bd		ae 50 03	ldx $0350	                ldx vduv.screenTopLeftAddress+0
2137	.c9c0		4c f4 c6	jmp $c6f4	                jmp setCRTCAddress

2139	.c9c3						LC9C3:
2140	.c9c3		20 a0 cc	jsr $cca0	                jsr LCCA0
2141	.c9c6						LC9C6:
2142	.c9c6		85 dd		sta $dd		                sta $DD
2143	.c9c8		86 dc		stx $dc		                stx $DC
2144	.c9ca		20 2c cc	jsr $cc2c	                jsr LCC2C
2145	.c9cd		ad 29 03	lda $0329	                lda $0329
2146	.c9d0		ae 28 03	ldx $0328	                ldx $0328
2147	.c9d3		20 5d cc	jsr $cc5d	                jsr LCC5D
2148	.c9d6		20 88 cc	jsr $cc88	                jsr LCC88
2149	.c9d9		86 d8		stx $d8		                stx ZMEMT+0
2150	.c9db		85 d9		sta $d9		                sta ZMEMT+1
2151	.c9dd		a9 00		lda #$00	                lda #$00
2152	.c9df		ae 2a 03	ldx $032a	                ldx $032A
2153	.c9e2		20 7d cc	jsr $cc7d	                jsr LCC7D
2154	.c9e5		20 88 cc	jsr $cc88	                jsr LCC88
2155	.c9e8		86 da		stx $da		                stx $DA
2156	.c9ea		85 db		sta $db		                sta $DB
2157	.c9ec		ac 28 03	ldy $0328	                ldy $0328
2158	.c9ef		ae 29 03	ldx $0329	                ldx $0329
2159	.c9f2		50 23		bvc $ca17	                bvc LCA17
2160	.c9f4		a4 e0		ldy $e0		                ldy $E0
2161	.c9f6		a6 e1		ldx $e1		                ldx $E1
2162	.c9f8		20 e7 cb	jsr $cbe7	                jsr LCBE7
2163	.c9fb		a4 e0		ldy $e0		                ldy $E0
2164	.c9fd		90 09		bcc $ca08	                bcc LCA08
2165	.c9ff		a2 80		ldx #$80	                ldx #$80
2166	.ca01		86 db		stx $db		                stx $DB
2167	.ca03		64 da		stz $da		                stz $DA
2168	.ca05		ac 2a 03	ldy $032a	                ldy $032A
2169	.ca08						LCA08:
2170	.ca08		a2 00		ldx #$00	                ldx #$00
2171	.ca0a		20 f3 cb	jsr $cbf3	                jsr LCBF3
2172	.ca0d		a2 80		ldx #$80	                ldx #$80
2173	.ca0f		86 d9		stx $d9		                stx ZMEMT+1
2174	.ca11		64 d8		stz $d8		                stz ZMEMT+0
2175	.ca13		a4 de		ldy $de		                ldy $DE
2176	.ca15		a6 df		ldx $df		                ldx $DF
2177	.ca17						LCA17:
2178	.ca17		20 e7 cb	jsr $cbe7	                jsr LCBE7
2179	.ca1a		20 97 cc	jsr $cc97	                jsr LCC97
2180	.ca1d		20 94 cc	jsr $cc94	                jsr LCC94
2181	.ca20		20 57 cc	jsr $cc57	                jsr LCC57
2182	.ca23		86 d8		stx $d8		                stx ZMEMT+0
2183	.ca25		85 d9		sta $d9		                sta ZMEMT+1
2184	.ca27		ce 2b 03	dec $032b	                dec $032B
2185	.ca2a		10 9a		bpl $c9c6	                bpl LC9C6
2186	.ca2c		60		rts		                rts

2188	.ca2d						LCA2D:
2189	.ca2d		20 a0 cc	jsr $cca0	                jsr LCCA0
2190	.ca30						LCA30:
2191	.ca30		20 2c cc	jsr $cc2c	                jsr LCC2C
2192	.ca33		a9 00		lda #$00	                lda #$00
2193	.ca35		ae 2a 03	ldx $032a	                ldx $032A
2194	.ca38		20 5d cc	jsr $cc5d	                jsr LCC5D
2195	.ca3b		86 da		stx $da		                stx $DA
2196	.ca3d		85 db		sta $db		                sta $DB
2197	.ca3f		20 57 cc	jsr $cc57	                jsr LCC57
2198	.ca42		86 dc		stx $dc		                stx $DC
2199	.ca44		85 dd		sta $dd		                sta $DD
2200	.ca46		ac 28 03	ldy $0328	                ldy $0328
2201	.ca49		ae 29 03	ldx $0329	                ldx $0329
2202	.ca4c		50 25		bvc $ca73	                bvc LCA73
2203	.ca4e		a4 de		ldy $de		                ldy $DE
2204	.ca50		a6 df		ldx $df		                ldx $DF
2205	.ca52		20 a8 cb	jsr $cba8	                jsr LCBA8
2206	.ca55		a4 de		ldy $de		                ldy $DE
2207	.ca57		90 0a		bcc $ca63	                bcc LCA63
2208	.ca59		ae 4e 03	ldx $034e	                ldx $034E
2209	.ca5c		86 db		stx $db		                stx $DB
2210	.ca5e		64 da		stz $da		                stz $DA
2211	.ca60		ac 2a 03	ldy $032a	                ldy $032A
2212	.ca63						LCA63:
2213	.ca63		a2 00		ldx #$00	                ldx #$00
2214	.ca65		20 b4 cb	jsr $cbb4	                jsr LCBB4
2215	.ca68		ae 4e 03	ldx $034e	                ldx $034E
2216	.ca6b		86 d9		stx $d9		                stx ZMEMT+1
2217	.ca6d		64 d8		stz $d8		                stz ZMEMT+0
2218	.ca6f		a4 e0		ldy $e0		                ldy $E0
2219	.ca71		a6 e1		ldx $e1		                ldx $E1
2220	.ca73						LCA73:
2221	.ca73		20 a8 cb	jsr $cba8	                jsr LCBA8
2222	.ca76		20 94 cc	jsr $cc94	                jsr LCC94
2223	.ca79		ce 2b 03	dec $032b	                dec $032B
2224	.ca7c		10 b2		bpl $ca30	                bpl LCA30
2225	.ca7e						LCA7E:
2226	.ca7e		60		rts		                rts

2228	.ca7f						LCA7F:
2229	.ca7f		86 dc		stx $dc		                stx $DC
2230	.ca81		aa		tax		                tax
2231	.ca82		38		sec		                sec
2232	.ca83		e5 dc		sbc $dc		                sbc $DC
2233	.ca85		f0 f7		beq $ca7e	                beq LCA7E
2234	.ca87		85 dd		sta $dd		                sta $DD
2235	.ca89		da		phx		                phx
2236	.ca8a		20 3c c9	jsr $c93c	                jsr getBytesPerExclusiveTextRow
2237	.ca8d		fa		plx		                plx
2238	.ca8e		ad 66 03	lda $0366	                lda $0366
2239	.ca91		89 08		bit #$08	                bit #$08
2240	.ca93		d0 0b		bne $caa0	                bne LCAA0
2241	.ca95		89 02		bit #$02	                bit #$02
2242	.ca97		20 ca cc	jsr $ccca	                jsr LCCCA
2243	.ca9a		a4 da		ldy $da		                ldy $DA
2244	.ca9c		a6 db		ldx $db		                ldx $DB
2245	.ca9e		80 2e		bra $cace	                bra LCACE

2247	.caa0						LCAA0:
2248	.caa0		89 04		bit #$04	                bit #$04
2249	.caa2		20 ca cc	jsr $ccca	                jsr LCCCA
2250	.caa5		ad 4f 03	lda $034f	                lda $034F
2251	.caa8		8d 2a 03	sta $032a	                sta $032A
2252	.caab		a4 dd		ldy $dd		                ldy $DD
2253	.caad		88		dey		                dey
2254	.caae						LCAAE:
2255	.caae		98		tya		                tya
2256	.caaf		f0 18		beq $cac9	                beq LCAC9
2257	.cab1		84 dc		sty $dc		                sty $DC
2258	.cab3						LCAB3:
2259	.cab3		20 57 cc	jsr $cc57	                jsr LCC57
2260	.cab6		86 da		stx $da		                stx $DA
2261	.cab8		85 db		sta $db		                sta $DB
2262	.caba		20 c9 ca	jsr $cac9	                jsr LCAC9
2263	.cabd		a6 da		ldx $da		                ldx $DA
2264	.cabf		86 d8		stx $d8		                stx ZMEMT+0
2265	.cac1		a5 db		lda $db		                lda $DB
2266	.cac3		85 d9		sta $d9		                sta ZMEMT+1
2267	.cac5		c6 dc		dec $dc		                dec $DC
2268	.cac7		d0 ea		bne $cab3	                bne LCAB3
2269	.cac9						LCAC9:
2270	.cac9		a2 00		ldx #$00	                ldx #$00
2271	.cacb		ac 2a 03	ldy $032a	                ldy $032A
2272	.cace						LCACE:
2273	.cace		ad 28 03	lda $0328	                lda $0328
2274	.cad1		48		pha		                pha
2275	.cad2		ad 29 03	lda $0329	                lda $0329
2276	.cad5		48		pha		                pha
2277	.cad6		8c 28 03	sty $0328	                sty $0328
2278	.cad9		8e 29 03	stx $0329	                stx $0329
2279	.cadc		20 e8 ca	jsr $cae8	                jsr LCAE8
2280	.cadf		68		pla		                pla
2281	.cae0		8d 29 03	sta $0329	                sta $0329
2282	.cae3		68		pla		                pla
2283	.cae4		8d 28 03	sta $0328	                sta $0328
2284	.cae7		60		rts		                rts

2286							;-------------------------------------------------------------------------

2288	.cae8						LCAE8:
2289	.cae8		a6 d8		ldx $d8		                ldx ZMEMT+0
2290	.caea		a5 d9		lda $d9		                lda ZMEMT+1
2291	.caec		20 2c cc	jsr $cc2c	                jsr LCC2C
2292	.caef		80 79		bra $cb6a	                bra LCB6A

2294							;-------------------------------------------------------------------------

2296	.caf1						LCAF1:
2297	.caf1		a2 77		ldx #$77	                ldx #<LCC77
2298	.caf3		a9 cc		lda #$cc	                lda #>LCC77
2299	.caf5		ac 2d 03	ldy $032d	                ldy $032D
2300	.caf8		80 07		bra $cb01	                bra LCB01

2302	.cafa						LCAFA:
2303	.cafa		a2 57		ldx #$57	                ldx #<LCC57
2304	.cafc		a9 cc		lda #$cc	                lda #>LCC57
2305	.cafe		ac 2f 03	ldy $032f	                ldy $032F
2306	.cb01						LCB01:
2307	.cb01		8e 5d 03	stx $035d	                stx $035D
2308	.cb04		8d 5e 03	sta $035e	                sta $035E
2309	.cb07		38		sec		                sec
2310	.cb08		ad 2d 03	lda $032d	                lda $032D
2311	.cb0b		ed 2f 03	sbc $032f	                sbc $032F
2312	.cb0e		8d 2b 03	sta $032b	                sta $032B
2313	.cb11		ae 2c 03	ldx $032c	                ldx $032C
2314	.cb14		20 b0 cc	jsr $ccb0	                jsr getAddressForTextPosition
2315	.cb17		85 dd		sta $dd		                sta $DD
2316	.cb19		86 dc		stx $dc		                stx $DC
2317	.cb1b		20 2c cc	jsr $cc2c	                jsr LCC2C
2318	.cb1e		ad 2b 03	lda $032b	                lda $032B
2319	.cb21		f0 47		beq $cb6a	                beq LCB6A
2320	.cb23						LCB23:
2321	.cb23		08		php		                php
2322	.cb24		20 24 c0	jsr $c024	                jsr LC024
2323	.cb27		86 da		stx $da		                stx $DA
2324	.cb29		85 db		sta $db		                sta $DB
2325	.cb2b		86 dc		stx $dc		                stx $DC
2326	.cb2d		85 dd		sta $dd		                sta $DD
2327	.cb2f		28		plp		                plp
2328	.cb30		50 1d		bvc $cb4f	                bvc LCB4F
2329	.cb32		b8		clv		                clv
2330	.cb33						LCB33:
2331	.cb33		a6 df		ldx $df		                ldx $DF
2332	.cb35		a4 de		ldy $de		                ldy $DE
2333	.cb37		20 b4 cb	jsr $cbb4	                jsr LCBB4
2334	.cb3a		ad 4e 03	lda $034e	                lda $034E
2335	.cb3d		70 06		bvs $cb45	                bvs LCB45
2336	.cb3f		85 d9		sta $d9		                sta ZMEMT+1
2337	.cb41		64 d8		stz $d8		                stz ZMEMT+0
2338	.cb43		80 04		bra $cb49	                bra LCB49

2340	.cb45						LCB45:
2341	.cb45		85 db		sta $db		                sta $DB
2342	.cb47		64 da		stz $da		                stz $DA
2343	.cb49						LCB49:
2344	.cb49		a6 e1		ldx $e1		                ldx $E1
2345	.cb4b		a4 e0		ldy $e0		                ldy $E0
2346	.cb4d		80 0b		bra $cb5a	                bra LCB5A

2348	.cb4f						LCB4F:
2349	.cb4f		20 2c cc	jsr $cc2c	                jsr LCC2C
2350	.cb52		70 df		bvs $cb33	                bvs LCB33
2351	.cb54		ae 29 03	ldx $0329	                ldx $0329
2352	.cb57		ac 28 03	ldy $0328	                ldy $0328
2353	.cb5a						LCB5A:
2354	.cb5a		20 b4 cb	jsr $cbb4	                jsr LCBB4
2355	.cb5d		a6 dc		ldx $dc		                ldx $DC
2356	.cb5f		86 d8		stx $d8		                stx ZMEMT+0
2357	.cb61		a5 dd		lda $dd		                lda $DD
2358	.cb63		85 d9		sta $d9		                sta ZMEMT+1
2359	.cb65		ce 2b 03	dec $032b	                dec $032B
2360	.cb68		d0 b9		bne $cb23	                bne LCB23
2361	.cb6a						LCB6A:
2362	.cb6a		ae 29 03	ldx $0329	                ldx $0329
2363	.cb6d		ac 28 03	ldy $0328	                ldy $0328
2364	.cb70		50 12		bvc $cb84	                bvc clearTextMemory
2365	.cb72		a6 df		ldx $df		                ldx $DF
2366	.cb74		a4 de		ldy $de		                ldy $DE
2367	.cb76		20 84 cb	jsr $cb84	                jsr clearTextMemory
2368	.cb79		ad 4e 03	lda $034e	                lda $034E
2369	.cb7c		85 d9		sta $d9		                sta ZMEMT+1
2370	.cb7e		64 d8		stz $d8		                stz ZMEMT+0
2371	.cb80		a6 e1		ldx $e1		                ldx $E1
2372	.cb82		a4 e0		ldy $e0		                ldy $E0

2374							;-------------------------------------------------------------------------
2375							;
2376							; Clear a block of text screen memory.
2377							;
2378							; entry:
2379							;
2380							; (ZMEMT),y - first byte to clear
2381							;
2382							; X = number of pages (including first, possibly partial page) to clear
2383							;
2384	.cb84						clearTextMemory:
2385							                ; align memory so that Y=0 on each page boundary
2386							                ; crossing.
2387							                ;
2388							                ; e.g., on entry ZMEMT=$30f8, Y=$08 - then after,
2389							                ; ZMEMT=$3000, Y=$F7; or, ZMEMT=$30f0, Y=$08 -> ZMEMT=$2ff8, Y=$F7.
2390	.cb84		98		tya		                tya                          ;A=initial offset
2391	.cb85		18		clc		                clc
2392	.cb86		65 d8		adc $d8		                adc ZMEMT+0                  ;add to dest address
2393	.cb88		85 d8		sta $d8		                sta ZMEMT+0
2394	.cb8a		b0 02		bcs $cb8e	                bcs +
2395	.cb8c		c6 d9		dec $d9		                dec ZMEMT+1
2396	.cb8e						+
2397	.cb8e		98		tya		                tya
2398	.cb8f		49 ff		eor #$ff	                eor #$FF
2399	.cb91		a8		tay		                tay
2400	.cb92		4a		lsr a		                lsr a                        ;C set if odd
2401	.cb93		ad 58 03	lda $0358	                lda vduv.backgroundTextColour
2402	.cb96		b0 07		bcs $cb9f	                bcs nextByte                    ;taken if odd - slightly different loop
2403	.cb98		80 02		bra $cb9c	                bra clearTextMemoryByte

2405	.cb9a						clearTextMemoryLoop:
2406	.cb9a		91 d8		sta ($d8),y	                sta (ZMEMT),y
2407	.cb9c						clearTextMemoryByte:
2408	.cb9c		c8		iny		                iny
2409	.cb9d		91 d8		sta ($d8),y	                sta (ZMEMT),y
2410	.cb9f						nextByte:
2411	.cb9f		c8		iny		                iny
2412	.cba0		d0 f8		bne $cb9a	                bne clearTextMemoryLoop
2413	.cba2		e6 d9		inc $d9		                inc ZMEMT+1
2414	.cba4		ca		dex		                dex
2415	.cba5		10 f3		bpl $cb9a	                bpl clearTextMemoryLoop
2416	.cba7		60		rts		                rts

2418							;-------------------------------------------------------------------------

2420	.cba8						LCBA8:
2421	.cba8		38		sec		                sec
2422	.cba9		98		tya		                tya
2423	.cbaa		ed 2a 03	sbc $032a	                sbc $032A
2424	.cbad		a8		tay		                tay
2425	.cbae		b0 04		bcs $cbb4	                bcs LCBB4
2426	.cbb0		ca		dex		                dex
2427	.cbb1		30 33		bmi $cbe6	                bmi LCBE6
2428	.cbb3		38		sec		                sec
2429	.cbb4						LCBB4:
2430	.cbb4		08		php		                php
2431	.cbb5		98		tya		                tya
2432	.cbb6		18		clc		                clc
2433	.cbb7		65 da		adc $da		                adc ZTEMP+0
2434	.cbb9		85 da		sta $da		                sta ZTEMP+0
2435	.cbbb		b0 02		bcs $cbbf	                bcs LCBBF
2436	.cbbd		c6 db		dec $db		                dec ZTEMP+1
2437	.cbbf						LCBBF:
2438	.cbbf		98		tya		                tya
2439	.cbc0		18		clc		                clc
2440	.cbc1		65 d8		adc $d8		                adc ZMEMT+0
2441	.cbc3		85 d8		sta $d8		                sta ZMEMT+0
2442	.cbc5		b0 02		bcs $cbc9	                bcs LCBC9
2443	.cbc7		c6 d9		dec $d9		                dec ZMEMT+1
2444	.cbc9						LCBC9:
2445	.cbc9		98		tya		                tya
2446	.cbca		49 ff		eor #$ff	                eor #$FF
2447	.cbcc		a8		tay		                tay
2448	.cbcd		4a		lsr a		                lsr a
2449	.cbce		b0 0b		bcs $cbdb	                bcs LCBDB
2450	.cbd0		80 04		bra $cbd6	                bra LCBD6

2452	.cbd2						LCBD2:
2453	.cbd2		b1 da		lda ($da),y	                lda ($DA),y
2454	.cbd4		91 d8		sta ($d8),y	                sta (ZMEMT),y
2455	.cbd6						LCBD6:
2456	.cbd6		c8		iny		                iny
2457	.cbd7		b1 da		lda ($da),y	                lda ($DA),y
2458	.cbd9		91 d8		sta ($d8),y	                sta (ZMEMT),y
2459	.cbdb						LCBDB:
2460	.cbdb		c8		iny		                iny
2461	.cbdc		d0 f4		bne $cbd2	                bne LCBD2
2462	.cbde		e6 db		inc $db		                inc $DB
2463	.cbe0		e6 d9		inc $d9		                inc ZMEMT+1
2464	.cbe2		ca		dex		                dex
2465	.cbe3		10 ed		bpl $cbd2	                bpl LCBD2
2466	.cbe5						LCBE5:
2467	.cbe5		28		plp		                plp
2468	.cbe6						LCBE6:
2469	.cbe6		60		rts		                rts

2471	.cbe7						LCBE7:
2472	.cbe7		38		sec		                sec
2473	.cbe8		98		tya		                tya
2474	.cbe9		ed 2a 03	sbc $032a	                sbc $032A
2475	.cbec		a8		tay		                tay
2476	.cbed		b0 04		bcs $cbf3	                bcs LCBF3
2477	.cbef		ca		dex		                dex
2478	.cbf0		30 f4		bmi $cbe6	                bmi LCBE6
2479	.cbf2		38		sec		                sec
2480	.cbf3						LCBF3:
2481	.cbf3		08		php		                php
2482	.cbf4		98		tya		                tya
2483	.cbf5		49 ff		eor #$ff	                eor #$FF
2484	.cbf7		48		pha		                pha
2485	.cbf8		38		sec		                sec
2486	.cbf9		65 da		adc $da		                adc $DA
2487	.cbfb		85 da		sta $da		                sta $DA
2488	.cbfd		b0 02		bcs $cc01	                bcs LCC01
2489	.cbff		c6 db		dec $db		                dec $DB
2490	.cc01						LCC01:
2491	.cc01		68		pla		                pla
2492	.cc02		38		sec		                sec
2493	.cc03		65 d8		adc $d8		                adc ZMEMT+0
2494	.cc05		85 d8		sta $d8		                sta ZMEMT+0
2495	.cc07		b0 02		bcs $cc0b	                bcs LCC0B
2496	.cc09		c6 d9		dec $d9		                dec ZMEMT+1
2497	.cc0b						LCC0B:
2498	.cc0b		98		tya		                tya
2499	.cc0c		4a		lsr a		                lsr a
2500	.cc0d		b0 14		bcs $cc23	                bcs LCC23
2501	.cc0f		d0 0d		bne $cc1e	                bne LCC1E
2502	.cc11						LCC11:
2503	.cc11		ca		dex		                dex
2504	.cc12		30 d1		bmi $cbe5	                bmi LCBE5
2505	.cc14		c6 db		dec $db		                dec $DB
2506	.cc16		c6 d9		dec $d9		                dec ZMEMT+1
2507	.cc18		80 04		bra $cc1e	                bra LCC1E

2509	.cc1a						LCC1A:
2510	.cc1a		b1 da		lda ($da),y	                lda ($DA),y
2511	.cc1c		91 d8		sta ($d8),y	                sta (ZMEMT),y
2512	.cc1e						LCC1E:
2513	.cc1e		88		dey		                dey
2514	.cc1f		b1 da		lda ($da),y	                lda ($DA),y
2515	.cc21		91 d8		sta ($d8),y	                sta (ZMEMT),y
2516	.cc23						LCC23:
2517	.cc23		88		dey		                dey
2518	.cc24		d0 f4		bne $cc1a	                bne LCC1A
2519	.cc26		b2 da		lda ($da)	                lda ($DA)
2520	.cc28		92 d8		sta ($d8)	                sta (ZMEMT)
2521	.cc2a		80 e5		bra $cc11	                bra LCC11

2523							;-------------------------------------------------------------------------
2524							;
2525							; Get pointers for a text window row.
2526							;
2527							; entry:
2528							;
2529							; vduv.workspace._28; = text window stride, in bytes
2530							;
2531							; >A, <X = address
2532							;
2533							; exit:
2534							;
2535							; V=0: >A, <X = new address
2536							;
2537							; V=1: (ZTEMPC) =

2539	.cc2c						LCC2C:
2540	.cc2c		48		pha		                pha                          ;save >address
2541	.cc2d		8a		txa		                txa                          ;A=<address
2542	.cc2e		18		clc		                clc
2543	.cc2f		6d 28 03	adc $0328	                adc vduv.workspace._28       ;A=<(new address)
2544	.cc32		aa		tax		                tax                          ;X=<(new address)
2545	.cc33		68		pla		                pla                          ;restore >addcess
2546	.cc34		6d 29 03	adc $0329	                adc vduv.workspace._29       ;A=>(new address)
2547	.cc37		50 1d		bvc $cc56	                bvc rtsCC56                  ;taken if no address wrap
2548	.cc39		86 e0		stx $e0		                stx ZTEMPD+0
2549	.cc3b		29 7f		and #$7f	                and #$7F                     ;
2550	.cc3d		85 e1		sta $e1		                sta ZTEMPD+1
2551	.cc3f		05 e0		ora $e0		                ora ZTEMPD+0
2552	.cc41		f0 12		beq $cc55	                beq clv_rts
2553	.cc43		08		php		                php
2554	.cc44		38		sec		                sec
2555	.cc45		ad 28 03	lda $0328	                lda vduv.workspace._28
2556	.cc48		e5 e0		sbc $e0		                sbc ZTEMPD+0
2557	.cc4a		85 de		sta $de		                sta ZTEMPC+0
2558	.cc4c		ad 29 03	lda $0329	                lda vduv.workspace._29
2559	.cc4f		e5 e1		sbc $e1		                sbc ZTEMPD+1
2560	.cc51		85 df		sta $df		                sta ZTEMPC+1
2561	.cc53		28		plp		                plp
2562	.cc54		60		rts		                rts

2564							;-------------------------------------------------------------------------

2566	.cc55						clv_rts:
2567	.cc55		b8		clv		                clv
2568	.cc56						rtsCC56:
2569	.cc56		60		rts		                rts

2571	.cc57						LCC57:
2572	.cc57		ad 53 03	lda $0353	                lda vduv.bytesPerCharacterRow+1
2573	.cc5a		ae 52 03	ldx $0352	                ldx vduv.bytesPerCharacterRow+0
2574	.cc5d						LCC5D:
2575	.cc5d		18		clc		                clc
2576	.cc5e						LCC5E:
2577	.cc5e		08		php		                php
2578	.cc5f		48		pha		                pha
2579	.cc60		8a		txa		                txa
2580	.cc61		65 d8		adc $d8		                adc ZMEMT+0
2581	.cc63		aa		tax		                tax
2582	.cc64		68		pla		                pla
2583	.cc65		65 d9		adc $d9		                adc ZMEMT+1
2584	.cc67		10 04		bpl $cc6d	                bpl +
2585	.cc69		38		sec		                sec
2586	.cc6a		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte ;handle wraparound at end
2587	.cc6d						+
2588	.cc6d		cd 4e 03	cmp $034e	                cmp vduv.startScreenAddressHighByte
2589	.cc70		b0 03		bcs $cc75	                bcs +
2590	.cc72		6d 54 03	adc $0354	                adc vduv.screenSizeHighByte ;handle wraparound at start
2591	.cc75						+
2592	.cc75		28		plp		                plp
2593	.cc76		60		rts		                rts

2595	.cc77						LCC77:
2596	.cc77		ad 53 03	lda $0353	                lda $0353
2597	.cc7a		ae 52 03	ldx $0352	                ldx $0352
2598	.cc7d						LCC7D:
2599	.cc7d		48		pha		                pha
2600	.cc7e		8a		txa		                txa
2601	.cc7f		49 ff		eor #$ff	                eor #$FF
2602	.cc81		aa		tax		                tax
2603	.cc82		68		pla		                pla
2604	.cc83		49 ff		eor #$ff	                eor #$FF
2605	.cc85		38		sec		                sec
2606	.cc86		80 d6		bra $cc5e	                bra LCC5E

2608	.cc88						LCC88:
2609	.cc88		cd 4e 03	cmp $034e	                cmp $034E
2610	.cc8b		d0 06		bne $cc93	                bne LCC93
2611	.cc8d		e0 00		cpx #$00	                cpx #$00
2612	.cc8f		d0 02		bne $cc93	                bne LCC93
2613	.cc91		a9 80		lda #$80	                lda #$80
2614	.cc93						LCC93:
2615	.cc93		60		rts		                rts

2617	.cc94						LCC94:
2618	.cc94		20 c9 ca	jsr $cac9	                jsr LCAC9
2619	.cc97						LCC97:
2620	.cc97		a6 dc		ldx $dc		                ldx $DC
2621	.cc99		86 d8		stx $d8		                stx ZMEMT+0
2622	.cc9b		a5 dd		lda $dd		                lda $DD
2623	.cc9d		85 d9		sta $d9		                sta ZMEMT+1
2624	.cc9f		60		rts		                rts

2626	.cca0						LCCA0:
2627	.cca0		38		sec		                sec
2628	.cca1		ad 2d 03	lda $032d	                lda $032D
2629	.cca4		ed 2f 03	sbc $032f	                sbc $032F
2630	.cca7		8d 2b 03	sta $032b	                sta $032B
2631	.ccaa		ae 2c 03	ldx $032c	                ldx $032C
2632	.ccad		ac 2f 03	ldy $032f	                ldy $032F

2634							;-------------------------------------------------------------------------
2635							;
2636							; Get display address for a text position.
2637							;
2638	.ccb0						getAddressForTextPosition:
2639	.ccb0		ad 18 03	lda $0318	                lda vduv.textCursorXPosition
2640	.ccb3		48		pha		                pha
2641	.ccb4		ad 19 03	lda $0319	                lda vduv.textCursorYPosition
2642	.ccb7		48		pha		                pha
2643	.ccb8		8e 18 03	stx $0318	                stx vduv.textCursorXPosition
2644	.ccbb		8c 19 03	sty $0319	                sty vduv.textCursorYPosition
2645	.ccbe		20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
2646	.ccc1		7a		ply		                ply
2647	.ccc2		8c 19 03	sty $0319	                sty vduv.textCursorYPosition
2648	.ccc5		7a		ply		                ply
2649	.ccc6		8c 18 03	sty $0318	                sty vduv.textCursorXPosition
2650	.ccc9		60		rts		                rts

2652							;-------------------------------------------------------------------------

2654	.ccca						LCCCA:
2655	.ccca		f0 03		beq $cccf	                beq LCCCF
2656	.cccc		ca		dex		                dex
2657	.cccd		86 dc		stx $dc		                stx ZTEMPB+0
2658	.cccf						LCCCF:
2659	.cccf		ad 66 03	lda $0366	                lda vduv.cursorFlags
2660	.ccd2		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
2661	.ccd4		aa		tax		                tax
2662	.ccd5		a5 dc		lda $dc		                lda ZTEMPB+0
2663	.ccd7						LCCD7:
2664	.ccd7		20 c6 c2	jsr $c2c6	                jsr setTextCursorXPositionWithCursorFlags

2666	.ccda						updateZMEMTWithTextCursorPositionIfValid:
2667	.ccda						LCCDA:
2668	.ccda		ae 18 03	ldx $0318	                ldx vduv.textCursorXPosition
2669	.ccdd		ec 08 03	cpx $0308	                cpx vduv.textWindowLeft
2670	.cce0		30 16		bmi $ccf8	                bmi LCCF8            ;taken if off left edge of window
2671	.cce2		ec 0a 03	cpx $030a	                cpx vduv.textWindowRight
2672	.cce5		f0 02		beq $cce9	                beq LCCE9            ;taken if at right edge of window
2673	.cce7		10 0f		bpl $ccf8	                bpl LCCF8            ;taken if off right edge of window
2674	.cce9						LCCE9:
2675	.cce9		ae 19 03	ldx $0319	                ldx vduv.textCursorYPosition
2676	.ccec		ec 0b 03	cpx $030b	                cpx vduv.textWindowTop
2677	.ccef		30 07		bmi $ccf8	                bmi LCCF8
2678	.ccf1		ec 09 03	cpx $0309	                cpx vduv.textWindowBottom
2679	.ccf4		30 04		bmi $ccfa	                bmi updateZMEMTWithTextCursorPosition
2680	.ccf6		f0 02		beq $ccfa	                beq updateZMEMTWithTextCursorPosition
2681	.ccf8						LCCF8:
2682	.ccf8		38		sec		                sec
2683	.ccf9		60		rts		                rts

2685							;-------------------------------------------------------------------------
2686							;
2687							; Get display address for current text cursor position.
2688							;
2689							; Set up display address without using BBC lookup table at &E0/1
2690							;
2691							; Exit: C=0
2692							;
2693	.ccfa						updateZMEMTWithTextCursorPosition:
2694	.ccfa		ad 56 03	lda $0356	                lda vduv.currentScreenMODEGroup
2695	.ccfd		29 fe		and #$fe	                and #$fe                     ; Reduce to 0,0,2,2,4
2696	.ccff		aa		tax		                tax                          ; Index into jump table
2697	.cd00		ac 19 03	ldy $0319	                ldy vduv.textCursorYPosition  ; Get current line
2698	.cd03		7c 06 cd	jmp ($cd06,x)	                jmp (multiplyRoutinesTable,x) ; Jump to calculation setup

2700	.cd06						multiplyRoutinesTable:
2701	>cd06		21 cd				                .word multiplyBy640     ; Memory map 0,1  MODE 0,1,2,3
2702	>cd08		15 cd				                .word multiplyBy320       ; Memory map 2,3  MODE 4,5,6
2703	>cd0a		0c cd				                .word multiplyBy40        ; Memory map 4    MODE 7

2705	.cd0c						multiplyBy40:
2706	.cd0c		be b1 e0	ldx $e0b1,y	                ldx multiplyBy40TableHigh,y ; Get offset high byte for start of this line
2707	.cd0f		b9 ca e0	lda $e0ca,y	                lda multiplyBy40TableLow,y ; Get offset low byte for start of this line
2708	.cd12		18		clc		                clc
2709	.cd13		80 14		bra $cd29	                bra LCD29

2711	.cd15						multiplyBy320:
2712	.cd15		b9 e3 e0	lda $e0e3,y	                lda multiplyBy640TableHigh,y
2713	.cd18		4a		lsr a		                lsr a
2714	.cd19		aa		tax		                tax
2715	.cd1a		98		tya		                tya
2716	.cd1b		29 03		and #$03	                and #$03
2717	.cd1d		4a		lsr a		                lsr a
2718	.cd1e		6a		ror a		                ror a
2719	.cd1f		80 07		bra $cd28	                bra LCD28

2721	.cd21						multiplyBy640:
2722	.cd21		be e3 e0	ldx $e0e3,y	                ldx multiplyBy640TableHigh,y
2723	.cd24		98		tya		                tya
2724	.cd25		29 01		and #$01	                and #$01
2725	.cd27		4a		lsr a		                lsr a
2726	.cd28						LCD28:
2727	.cd28		6a		ror a		                ror a                        ; A=A/2 +(128*carry)

2729	.cd29						LCD29:
2730	.cd29		6d 50 03	adc $0350	                adc vduv.screenTopLeftAddress+0
2731	.cd2c		85 d8		sta $d8		                sta ZMEMT+0                      ; store it
2732	.cd2e		8a		txa		                txa
2733	.cd2f		6d 51 03	adc $0351	                adc vduv.screenTopLeftAddress+1 ; window start address hi
2734	.cd32		a8		tay		                tay
2735	.cd33		ad 18 03	lda $0318	                lda vduv.textCursorXPosition  ; text column
2736	.cd36		ae 4f 03	ldx $034f	                ldx vduv.bytesPerCharacter    ; bytes per character
2737	.cd39		ca		dex		                dex
2738	.cd3a		f0 12		beq $cd4e	                beq LCD4E                    ; 1 colour, MODE 7
2739	.cd3c		e0 0f		cpx #$0f	                cpx #$0F
2740	.cd3e		f0 03		beq $cd43	                beq LCD43                    ; 4 colours, MODE 1 or MODE 5
2741	.cd40		90 02		bcc $cd44	                bcc LCD44                    ; 2 colours, MODE 0,3,4,6
2742	.cd42		0a		asl a		                asl a                        ; 16 colours, MODE 2
2743	.cd43						LCD43:
2744	.cd43		0a		asl a		                asl a
2745	.cd44						LCD44:
2746	.cd44		0a		asl a		                asl a
2747	.cd45		0a		asl a		                asl a
2748	.cd46		90 02		bcc $cd4a	                bcc LCD4A
2749	.cd48		c8		iny		                iny
2750	.cd49		c8		iny		                iny
2751	.cd4a						LCD4A:
2752	.cd4a		0a		asl a		                asl a
2753	.cd4b		90 02		bcc $cd4f	                bcc LCD4F
2754	.cd4d		c8		iny		                iny
2755	.cd4e						LCD4E:
2756	.cd4e		18		clc		                clc
2757	.cd4f						LCD4F:
2758	.cd4f		65 d8		adc $d8		                adc ZMEMT+0
2759	.cd51		85 d8		sta $d8		                sta ZMEMT+0
2760	.cd53		8d 4a 03	sta $034a	                sta vduv.textCursorCRTCAddress+0
2761	.cd56		aa		tax		                tax
2762	.cd57		98		tya		                tya
2763	.cd58		69 00		adc #$00	                adc #$00
2764	.cd5a		8d 4b 03	sta $034b	                sta vduv.textCursorCRTCAddress+1
2765	.cd5d		10 04		bpl $cd63	                bpl LCD63
2766	.cd5f		38		sec		                sec
2767	.cd60		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte
2768	.cd63						LCD63:
2769	.cd63		85 d9		sta $d9		                sta ZMEMT+1
2770	.cd65		18		clc		                clc
2771	.cd66		60		rts		                rts

2773							;-------------------------------------------------------------------------

2775	.cd67						nextMaskedCharColumn
2776	.cd67		ee 24 03	inc $0324	                inc vduv.graphicsCursorPixelsX+0
2777	.cd6a		d0 03		bne $cd6f	                bne +
2778	.cd6c		ee 25 03	inc $0325	                inc vduv.graphicsCursorPixelsX+1
2779	.cd6f						+
2780	.cd6f		0a		asl a		                asl a
2781	.cd70						plotMaskedCharRow:
2782							                ; find next pixel to plot, updating graphics cursor X
2783							                ; as it goes. A is non-zero, so this loop will finish
2784							                ; eventually.
2785	.cd70		10 f5		bpl $cd67	                bpl nextMaskedCharColumn
2786	.cd72		5a		phy		                phy
2787	.cd73		85 dd		sta $dd		                sta ZTEMPB+1                 ;
2788	.cd75		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixels
2789	.cd77		20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
2790	.cd7a		80 02		bra $cd7e	                bra plotMaskedCharPixel

2792	.cd7c						plotMaskedCharPixelsLoop:
2793	.cd7c		10 03		bpl $cd81	                bpl nextMaskedCharPixel
2794	.cd7e						plotMaskedCharPixel:
2795	.cd7e		20 50 db	jsr $db50	                jsr plbyteEntryPoint
2796	.cd81						nextMaskedCharPixel
2797	.cd81		46 d1		lsr $d1		                lsr ZMASK
2798	.cd83		90 03		bcc $cd88	                bcc +
2799	.cd85		20 66 da	jsr $da66	                jsr nextColumnAndResetMask
2800	.cd88						+
2801	.cd88		06 dd		asl $dd		                asl ZTEMPB+1
2802	.cd8a		d0 f0		bne $cd7c	                bne plotMaskedCharPixelsLoop
2803	.cd8c		a2 28		ldx #$28	                ldx #VDUVariables.workspace._28
2804	.cd8e		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixelsX
2805	.cd90		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
2806	.cd93		7a		ply		                ply
2807	.cd94		80 50		bra $cde6	                bra nextMaskedCharY

2809	.cd96						plotCharAtGraphicsCursor:
2810	.cd96		20 2e e2	jsr $e22e	                jsr getSoftCharacterDefinitionAddress
2811	.cd99		9c 59 03	stz $0359	                stz vduv.graphicsPlotState   ;plot in foreground colour
2812	.cd9c		ad 5b 03	lda $035b	                lda vduv.foregroundGCOLMode
2813	.cd9f		29 0f		and #$0f	                and #$0F
2814	.cda1						plotFontDataAtGraphicsCursorWithPlotMode:
2815	.cda1		8d 5a 03	sta $035a	                sta vduv.graphicsPlotMode
2816	.cda4		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
2817	.cda6		20 1c c9	jsr $c91c	                jsr copyGraphicsCursorPixels
2818	.cda9		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixelsX
2819	.cdab		a2 00		ldx #$00	                ldx #VDUVariables.graphicsWindowPixelsLeft
2820	.cdad		20 b3 ce	jsr $ceb3	                jsr getDistanceMask
2821	.cdb0		85 dc		sta $dc		                sta ZTEMPB+0
2822	.cdb2		a2 04		ldx #$04	                ldx #VDUVariables.graphicsWindowPixelsRight
2823	.cdb4		20 b3 ce	jsr $ceb3	                jsr getDistanceMask
2824	.cdb7		6a		ror a		                ror a
2825	.cdb8		14 dc		trb $dc		                trb ZTEMPB+0
2826	.cdba		a2 26		ldx #$26	                ldx #VDUVariables.graphicsCursorPixelsY
2827	.cdbc		a0 06		ldy #$06	                ldy #VDUVariables.graphicsWindowPixelsTop
2828	.cdbe		20 b3 ce	jsr $ceb3	                jsr getDistanceMask
2829	.cdc1		85 dd		sta $dd		                sta ZTEMPB+1
2830	.cdc3		a2 26		ldx #$26	                ldx #VDUVariables.graphicsCursorPixelsY
2831	.cdc5		a0 02		ldy #$02	                ldy #VDUVariables.graphicsWindowPixelsBottom
2832	.cdc7		20 b3 ce	jsr $ceb3	                jsr getDistanceMask
2833	.cdca		6a		ror a		                ror a
2834	.cdcb		14 dd		trb $dd		                trb ZTEMPB+1
2835	.cdcd		a0 07		ldy #$07	                ldy #$07
2836	.cdcf						copyMaskedCharLoop:
2837	.cdcf		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte
2838	.cdd1		25 dc		and $dc		                and ZTEMPB+0                 ;mask out columns
2839	.cdd3		46 dd		lsr $dd		                lsr ZTEMPB+1                 ;test row
2840	.cdd5		b0 02		bcs $cdd9	                bcs +
2841	.cdd7		a9 00		lda #$00	                lda #$00                     ;mask out this row
2842	.cdd9						+
2843	.cdd9		99 2c 03	sta $032c,y	                sta vduv.workspace._2C,y
2844	.cddc		88		dey		                dey
2845	.cddd		10 f0		bpl $cdcf	                bpl copyMaskedCharLoop
2846	.cddf		a0 f8		ldy #$f8	                ldy #$F8
2847	.cde1						plotMaskedCharLoop:
2848	.cde1		b9 34 02	lda $0234,y	                lda vduv.workspace._2C-$f8,y ;get masked byte
2849	.cde4		d0 8a		bne $cd70	                bne plotMaskedCharRow        ;taken if data to write
2850	.cde6						nextMaskedCharY:
2851	.cde6		ae 26 03	ldx $0326	                ldx vduv.graphicsCursorPixelsY+0
2852	.cde9		d0 03		bne $cdee	                bne +
2853	.cdeb		ce 27 03	dec $0327	                dec vduv.graphicsCursorPixelsY+1
2854	.cdee						+
2855	.cdee		ce 26 03	dec $0326	                dec vduv.graphicsCursorPixelsY+0
2856	.cdf1		c8		iny		                iny
2857	.cdf2		d0 ed		bne $cde1	                bne plotMaskedCharLoop
2858	.cdf4		a2 2a		ldx #$2a	                ldx #VDUVariables.workspace._2A
2859	.cdf6		a0 26		ldy #$26	                ldy #VDUVariables.graphicsCursorPixelsY
2860	.cdf8		4c 0c c9	jmp $c90c	                jmp copyTwoBytesWithinVDUVariables

2862	.cdfb						vdu127AtGraphicsCursor:
2863							                ; CHR$127 is a solid block, not a backspace.
2864	.cdfb		a9 f8		lda #$f8	                lda #<chr127
2865	.cdfd		85 de		sta $de		                sta ZTEMPC+0
2866	.cdff		a9 bb		lda #$bb	                lda #>chr127
2867	.ce01		85 df		sta $df		                sta ZTEMPC+1
2868	.ce03		a2 08		ldx #$08	                ldx #$08
2869	.ce05		8e 59 03	stx $0359	                stx vduv.graphicsPlotState   ;plot in background colour
2870	.ce08		a9 00		lda #$00	                lda #$00
2871	.ce0a		80 95		bra $cda1	                bra plotFontDataAtGraphicsCursorWithPlotMode

2873	.ce0c						plotCharAtTextCursor:
2874	.ce0c		20 2c d1	jsr $d12c	                jsr handleColumn81
2875	.ce0f		b0 85		bcs $cd96	                bcs plotCharAtGraphicsCursor          ;taken if VDU5
2876	.ce11		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
2899	.ce14		f0 37		beq $ce4d	                beq writeTeletextChar
2901	.ce16						writeBitmapSoftCharacter:
2902	.ce16		20 2e e2	jsr $e22e	                jsr getSoftCharacterDefinitionAddress
2903	.ce19						writeBitmapChar:
2904	.ce19		a0 07		ldy #$07	                ldy #$07
2905	.ce1b		e0 03		cpx #$03	                cpx #$03
2906	.ce1d		f0 34		beq $ce53	                beq write2bppChar            ;taken if MODE 1/5
2907	.ce1f		b0 5a		bcs $ce7b	                bcs write4bppChar                    ;taken if MODE 2
2908	.ce21						write1bppChar:
2909	.ce21		b1 de		lda ($de),y	                lda (ZTEMPC),y
2910	.ce23		05 d2		ora $d2		                ora ZORA
2911	.ce25		45 d3		eor $d3		                eor ZEOR
2912	.ce27		91 d8		sta ($d8),y	                sta (ZMEMT),y
2913	.ce29		88		dey		                dey
2921	.ce2a		10 f5		bpl $ce21	                bpl write1bppChar
2922	.ce2c		60		rts		                rts

2924	.ce2d						vdu127EntryPoint:
2925	.ce2d		a9 20		lda #$20	                lda #$20
2926	.ce2f		2c 66 03	bit $0366	                bit $0366
2927	.ce32		d0 03		bne $ce37	                bne LCE37
2928	.ce34		20 99 c2	jsr $c299	                jsr vdu8EntryPoint
2929	.ce37						LCE37:
8	.ce37		20 d4 e2	jsr $e2d4	                jsr testVDU5StateNonInlined
2931	.ce3a		d0 bf		bne $cdfb	                bne vdu127AtGraphicsCursor
2932	.ce3c		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
2933	.ce3f		f0 0a		beq $ce4b	                beq writeTeletextSpaceChar   ;taken if teletext mode

2935							                ; Address of space char is known.
2936	.ce41		a9 00		lda #$00	                lda #<LB900
2937	.ce43		85 de		sta $de		                sta ZTEMPC+0
2938	.ce45		a9 b9		lda #$b9	                lda #>LB900
2939	.ce47		85 df		sta $df		                sta ZTEMPC+1
2940	.ce49		80 ce		bra $ce19	                bra writeBitmapChar

2942	.ce4b						writeTeletextSpaceChar:
2943	.ce4b		a9 20		lda #$20	                lda #$20
2948	.ce4d						writeTeletextChar:
2949	.ce4d		20 e4 dd	jsr $dde4	                jsr getSAA5050FromASCII
2950	.ce50		92 d8		sta ($d8)	                sta (ZMEMT)
2951	.ce52		60		rts		                rts

2954	.ce53						write2bppChar:
2955	.ce53		a5 d9		lda $d9		                lda ZMEMT+1
2956	.ce55		a6 d8		ldx $d8		                ldx ZMEMT+0
2957	.ce57		20 e6 ce	jsr $cee6	                jsr getNextColumnAddress
2958	.ce5a						-
2959	.ce5a		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte
2960	.ce5c		29 0f		and #$0f	                and #$0F                     ;get data for right 4 pixels
2961	.ce5e		aa		tax		                tax
2962	.ce5f		bd 15 e0	lda $e015,x	                lda LE013,x                  ;form byte
2963	.ce62		05 d2		ora $d2		                ora ZORA
2964	.ce64		45 d3		eor $d3		                eor ZEOR
2965	.ce66		91 e0		sta ($e0),y	                sta (ZTEMPD),y               ;write to right column
2966	.ce68		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte
2968	.ce6a		20 21 e5	jsr $e521	                jsr lsr4
2975	.ce6d		aa		tax		                tax                          ;
2976	.ce6e		bd 15 e0	lda $e015,x	                lda LE013,x                  ;form byte
2977	.ce71		05 d2		ora $d2		                ora ZORA
2978	.ce73		45 d3		eor $d3		                eor ZEOR
2979	.ce75		91 d8		sta ($d8),y	                sta (ZMEMT),y                ;write to left column
2980	.ce77		88		dey		                dey
2981	.ce78		10 e0		bpl $ce5a	                bpl -
2982	.ce7a		60		rts		                rts

2984							get4bppScreenByteFor2Pixels: .macro
2989							                .endm

2991	.ce7b						write4bppChar:
2992	.ce7b		a5 d9		lda $d9		                lda ZMEMT+1
2993	.ce7d		a6 d8		ldx $d8		                ldx ZMEMT+0
2994	.ce7f		20 d8 ce	jsr $ced8	                jsr getNext3ColumnAddresses
2995	.ce82						-
2996	.ce82		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte - %abcdefgh
3001	.ce84		20 a8 ce	jsr $cea8	                jsr get4bppScreenByteFor2PixelsNonInlined ;pixels g and h
3003	.ce87		91 e0		sta ($e0),y	                sta (ZTEMPD),y
3004	.ce89		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte - %abcdefgh
3005	.ce8b		4a		lsr a		                lsr a                        ;%0abcdefg
3006	.ce8c		4a		lsr a		                lsr a                        ;%00abcdef
3007	.ce8d		48		pha		                pha                          ;save %00abcdef
3012	.ce8e		20 a8 ce	jsr $cea8	                jsr get4bppScreenByteFor2PixelsNonInlined ;pixels e and f
3014	.ce91		91 dc		sta ($dc),y	                sta (ZTEMPB),y
3015	.ce93		68		pla		                pla                          ;restore %00abcdef
3016	.ce94		4a		lsr a		                lsr a                        ;%000abcde
3017	.ce95		4a		lsr a		                lsr a                        ;%0000abcd
3018	.ce96		48		pha		                pha                          ;save %0000abcd
3023	.ce97		20 a8 ce	jsr $cea8	                jsr get4bppScreenByteFor2PixelsNonInlined ;pixels c and d
3025	.ce9a		91 da		sta ($da),y	                sta (ZTEMP),y
3026	.ce9c		68		pla		                pla                          ;restore %0000abcd
3027	.ce9d		4a		lsr a		                lsr a                        ;%00000abc
3028	.ce9e		4a		lsr a		                lsr a                        ;%000000ab
3032	.ce9f		20 a8 ce	jsr $cea8	                jsr get4bppScreenByteFor2PixelsNonInlined ;pixels a and b
3034	.cea2		91 d8		sta ($d8),y	                sta (ZMEMT),y
3035	.cea4		88		dey		                dey
3036	.cea5		10 db		bpl $ce82	                bpl -
3037	.cea7		60		rts		                rts

3040	.cea8						get4bppScreenByteFor2PixelsNonInlined:
3041	.cea8		29 03		and #$03	                and #$03                     ;mask out 2 pixels
2985	.ceaa		aa		tax		                tax
2986	.ceab		bd 25 e0	lda $e025,x	                lda LE023,x                  ;form byte
2987	.ceae		05 d2		ora $d2		                ora ZORA
2988	.ceb0		45 d3		eor $d3		                eor ZEOR
3043	.ceb2		60		rts		                rts

3046							;-------------------------------------------------------------------------
3047							;
3048							; Get mask indicating the distance between two 16-bit VDU variable
3049							; values - >=8, or some amount less than that.
3050							;
3051							; (These can be used for masking pixels, or counting loops, or
3052							; whatever.)
3053							;
3054							; entry:
3055							;
3056							; X = offset of value A in VDU variables
3057							;
3058							; Y = offset of value B in VDU variables
3059							;
3060							; exit:
3061							;
3062							; if distance<=0, A=255, C=1
3063							;
3064							; if distance>=8, A=0, C=0
3065							;
3066							; otherwise, A=255>>distance, C=0
3067							;
3068	.ceb3						getDistanceMask:
3069	.ceb3		38		sec		                sec
3070	.ceb4		bd 00 03	lda $0300,x	                lda vduv+0,x
3071	.ceb7		f9 00 03	sbc $0300,y	                sbc vduv+0,y
3072	.ceba		85 da		sta $da		                sta ZTEMP                    ;get result LSB
3073	.cebc		bd 01 03	lda $0301,x	                lda vduv+1,x
3074	.cebf		f9 01 03	sbc $0301,y	                sbc vduv+1,y
3075	.cec2		30 0c		bmi $ced0	                bmi distanceMask255                  ;taken if result -ve
3076	.cec4		d0 0e		bne $ced4	                bne distanceMask0                  ;taken if result >=256
3077	.cec6		a6 da		ldx $da		                ldx ZTEMP
3078	.cec8		e0 08		cpx #$08	                cpx #$08
3079	.ceca		b0 08		bcs $ced4	                bcs distanceMask0                    ;taken if result>=8
3080	.cecc		bd 29 e1	lda $e129,x	                lda distanceMasksTable,x             ;get mask for <8 items
3081	.cecf		60		rts		                rts

3083	.ced0						distanceMask255:
3084	.ced0		a9 ff		lda #$ff	                lda #%11111111
3085	.ced2		38		sec		                sec
3086	.ced3		60		rts		                rts

3088	.ced4						distanceMask0:
3089	.ced4		a9 00		lda #$00	                lda #$00
3090	.ced6		18		clc		                clc
3091	.ced7		60		rts		                rts

3093							;-------------------------------------------------------------------------
3094							;
3095							; Get addresses of next 3 columns on screen.
3096							;
3097							; entry:
3098							;
3099							; A (MSB)/X (LSB) = address
3100							;
3101							; exit:
3102							;
3103							; (ZTEMP) = column N+1
3104							; (ZTEMPB) = column N+2
3105							; (ZTEMPD) = column N+3
3106							;
3107	.ced8						getNext3ColumnAddresses:
3108	.ced8		20 e6 ce	jsr $cee6	                jsr getNextColumnAddress
3109	.cedb		86 da		stx $da		                stx ZTEMP+0
3110	.cedd		85 db		sta $db		                sta ZTEMP+1
3111	.cedf		20 e6 ce	jsr $cee6	                jsr getNextColumnAddress
3112	.cee2		86 dc		stx $dc		                stx ZTEMPB+0
3113	.cee4		85 dd		sta $dd		                sta ZTEMPB+1

3116							;-------------------------------------------------------------------------
3117							;
3118							; Get address of next column on screen.
3119							;
3120							; entry:
3121							;
3122							; A (MSB)/X (LSB) = address
3123							;
3124							; exit:
3125							;
3126							; A (MSB)/X (LSB) = address of next column
3127							; (ZTEMPD) = address of next column
3128							;
3129	.cee6						getNextColumnAddress:
3130	.cee6		48		pha		                pha
3131	.cee7		8a		txa		                txa
3132	.cee8		18		clc		                clc
3133	.cee9		69 08		adc #$08	                adc #$08                     ;next column...
3134	.ceeb		aa		tax		                tax
3135	.ceec		68		pla		                pla
3136	.ceed		90 06		bcc $cef5	                bcc +                        ;taken if no carry
3137	.ceef		1a		inc a		                inc a
3138	.cef0		10 03		bpl $cef5	                bpl +           ;taken if no screen address wraparound
3139	.cef2		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
3140	.cef5						+
3141	.cef5		86 e0		stx $e0		                stx ZTEMPD+0
3142	.cef7		85 e1		sta $e1		                sta ZTEMPD+1
3143	.cef9		60		rts		                rts

3145							;-------------------------------------------------------------------------
3146							;
3147							; VDU 23 0 Control 6845 CRTC directly [MasRef E.3-12]
3148							;
3149	.cefa						vdu23_0_EntryPoint:
3150	.cefa		ad 1d 03	lda $031d	                lda vduv.queueEnd-7           ;get value
3151	.cefd		ac 1c 03	ldy $031c	                ldy vduv.queueEnd-8           ;get register

3153							                ; fall through to setCRTCRegister

3155							;-------------------------------------------------------------------------
3156							;
3157							; Set a CRTC register, adjusting and/or noting values if appropriate.
3158							;
3159							; entry:
3160							;
3161							; Y = register to set
3162							;
3163							; A = value

3165	.cf00						setCRTCRegister:
3166	.cf00		c0 07		cpy #$07	                cpy #$07
3167	.cf02		90 1f		bcc $cf23	                bcc setCRTCRegisterRaw
3168	.cf04		d0 03		bne $cf09	                bne +        ;taken if not setting R7

3170							                ; Setting R7 (vsync position), so apply the *TV offset.
3171	.cf06		6d 90 02	adc $0290	                adc tvOffset
3172	.cf09						+
3173	.cf09		c0 08		cpy #$08	                cpy #$08
3174	.cf0b		d0 07		bne $cf14	                bne +                    ;taken if not setting R8

3176							                ; Setting R8 (interlace/delay register), so apply the
3177							                ; *TV interlace setting.
3178	.cf0d		09 00		ora #$00	                ora #$00
3179	.cf0f		30 03		bmi $cf14	                bmi +       ;branch taken if bit 7 set - this is taken
3180							                            ;to imply the mode being set is Mode 7
3181	.cf11		4d 91 02	eor $0291	                eor tvInterlace ;apply *TV interlace setting
3182	.cf14						+
3183	.cf14		c0 0a		cpy #$0a	                cpy #$0A
3184	.cf16		d0 0b		bne $cf23	                bne setCRTCRegisterRaw

3186							                ; Setting R10 (cursor start register). Note the new
3187							                ; setting in the VDU variable. If in VDU5 mode, reuse
3188							                ; the result of testVDU5State - i.e., 32 - as the
3189							                ; setting, hiding the cursor.
3190	.cf18		8d 5f 03	sta $035f	                sta vduv.lastCursorStartRegisterValue
8	.cf1b		20 d4 e2	jsr $e2d4	                jsr testVDU5StateNonInlined
3192	.cf1e		d0 09		bne $cf29	                bne rtsCF2A
3193	.cf20		ad 5f 03	lda $035f	                lda vduv.lastCursorStartRegisterValue

3195							                ; fall through to setCRTCRegisterRaw

3197							;-------------------------------------------------------------------------
3198							;
3199							; Set a CRTC register.
3200							;
3201	.cf23						setCRTCRegisterRaw:
3202	.cf23		8c 00 fe	sty $fe00	                sty CRTC+0
3203	.cf26		8d 01 fe	sta $fe01	                sta CRTC+1
3204	.cf29						rtsCF2A:
3205	.cf29		60		rts		                rts

3207							;-------------------------------------------------------------------------
3208							;
3209							; VDU 23 1 Turn cursor on/off [MasRef E.3-12]
3210							;
3211	.cf2a						vdu23_1_EntryPoint:
8	.cf2a		20 d4 e2	jsr $e2d4	                jsr testVDU5StateNonInlined
3213	.cf2d		d0 fa		bne $cf29	                bne rtsCF2A                  ;taken if VDU5
3214	.cf2f		ad 1c 03	lda $031c	                lda vduv.queueEnd-8           ;get new cursor state
3215	.cf32		29 03		and #$03	                and #$03                     ;mask off bits of interest
3216	.cf34		0a		asl a		                asl a
3217	.cf35		aa		tax		                tax
3218	.cf36		a9 20		lda #$20	                lda #$20 ;R10 value for hiding the cursor - save a few
3219							                         ;bytes by loading this here
3220	.cf38		7c 3b cf	jmp ($cf3b,x)	                jmp (LCF3C,x)

3222	.cf3b						LCF3C:
3223	>cf3b		52 cf				                .word setCRTCRegister10            ; 23,1,0... - hide
3224	>cf3d		4f cf				                .word showCursor            ; 23,1,1... - show
3225	>cf3f		43 cf				                .word steadyCursor          ; 23,1,2... - steady
3226	>cf41		4a cf				                .word slowFlashCursor       ; 23,1,3... - flash slowly

3228	.cf43						steadyCursor:
3229	.cf43		a9 60		lda #$60	                lda #%01100000
3230	.cf45		1c 5f 03	trb $035f	                trb vduv.lastCursorStartRegisterValue ;steady cursor
3231	.cf48		80 05		bra $cf4f	                bra showCursor

3233	.cf4a						slowFlashCursor:
3234	.cf4a		a9 60		lda #$60	                lda #%01100000
3235	.cf4c		0c 5f 03	tsb $035f	                tsb vduv.lastCursorStartRegisterValue ;slow blink cursor
3236	.cf4f						showCursor:
3237	.cf4f		ad 5f 03	lda $035f	                lda vduv.lastCursorStartRegisterValue
3238	.cf52						setCRTCRegister10:
3239	.cf52		a0 0a		ldy #$0a	                ldy #$0A
3240	.cf54		80 cd		bra $cf23	                bra setCRTCRegisterRaw

3242							;-------------------------------------------------------------------------
3243							;
3244							; VDU 23 2-5 Set ECF patterns [MasRef E.3-13]
3245							;
3246	.cf56						vdu23_2_EntryPoint:
3247	.cf56						vdu23_3_EntryPoint:
3248	.cf56						vdu23_4_EntryPoint:
3249	.cf56						vdu23_5_EntryPoint:
3250	.cf56		e9 01		sbc #$01	                sbc #$01  ;subtract 2 (C=0 on entry...) to get pattern
3251							                          ;index
3252	.cf58		0a		asl a		                asl a
3253	.cf59		0a		asl a		                asl a
3254	.cf5a		0a		asl a		                asl a                        ;index*8
3255	.cf5b		69 07		adc #$07	                adc #$07                     ;index*8+7
3256	.cf5d		a8		tay		                tay
3257	.cf5e		a2 07		ldx #$07	                ldx #$07
3258	.cf60						-
3259	.cf60		bd 1c 03	lda $031c,x	                lda vduv.queueEnd-8,x
3260	.cf63		99 00 88	sta $8800,y	                sta andy.ecfPatterns,y
3261	.cf66		88		dey		                dey
3262	.cf67		ca		dex		                dex
3263	.cf68		10 f6		bpl $cf60	                bpl -
3264	.cf6a		80 26		bra $cf92	                bra LCF93

3266							;-------------------------------------------------------------------------

3268	.cf6c						vdu23_11_EntryPoint:
3269	.cf6c		ad 55 03	lda $0355	                lda vduv.currentScreenMODE
3270	.cf6f		d0 01		bne $cf72	                bne +
3271							                ; Use a different table for MODE 0 - see MasRef E.3-16.
3272	.cf71		3a		dec a		                dec a                        ;
3273	.cf72						+
3274	.cf72		29 03		and #$03	                and #$03 ;index=0 (mode 4); 1 (mode 1/5); 2 (mode 2);
3275							                         ;3 (mode 0)
3276	.cf74		1a		inc a		                inc a
3277	.cf75		0a		asl a		                asl a
3278	.cf76		0a		asl a		                asl a
3279	.cf77		0a		asl a		                asl a
3280	.cf78		0a		asl a		                asl a                        ;(index+1)*16
3281	.cf79		aa		tax		                tax
3282	.cf7a		a0 1c		ldy #$1c	                ldy #32-4
3283	.cf7c						setDefaultECFPatterns:
3284	.cf7c		bd c5 e1	lda $e1c5,x	                lda defaultECFPatterns-1,x
3285	.cf7f		99 ff 87	sta $87ff,y	                sta andy.ecfPatterns-1,y     ;copy first repeat
3286	.cf82		99 03 88	sta $8803,y	                sta andy.ecfPatterns+4-1,y   ;copy second repeat
3287	.cf85		ca		dex		                dex                          ;next byte in defaults table
3288	.cf86		88		dey		                dey
3289	.cf87		98		tya		                tya
3290	.cf88		89 07		bit #$07	                bit #$07
3291	.cf8a		d0 f0		bne $cf7c	                bne setDefaultECFPatterns ;taken if pattern not filled
3292							                ; skip to start of previous pattern
3293	.cf8c		88		dey		                dey
3294	.cf8d		88		dey		                dey
3295	.cf8e		88		dey		                dey
3296	.cf8f		88		dey		                dey
3297	.cf90		10 ea		bpl $cf7c	                bpl setDefaultECFPatterns
3298	.cf92						LCF93:
3299	.cf92		4c 7c c5	jmp $c57c	                jmp initializeCurrentECFPatterns

3301							;-------------------------------------------------------------------------
3302							;
3303							; VDU 23 12-15 Set simple ECF pattern [MasRef E.3-17]
3304							;
3305	.cf95						vdu23_12_EntryPoint:
3306	.cf95						vdu23_13_EntryPoint:
3307	.cf95						vdu23_14_EntryPoint:
3308	.cf95						vdu23_15_EntryPoint:
3309	.cf95		e9 0b		sbc #$0b	                sbc #$0B                     ;-12 to get pattern index
3310	.cf97		0a		asl a		                asl a                        ;index*2
3311	.cf98		0a		asl a		                asl a                        ;index*4
3312	.cf99		0a		asl a		                asl a                        ;index*8, C=0
3313	.cf9a		69 03		adc #$03	                adc #$03                     ;index*8+3, C=0
3314	.cf9c		48		pha		                pha                          ;save offset
3315	.cf9d		a2 07		ldx #$07	                ldx #$07                     ;
3316	.cf9f						LCFA0:
3317	.cf9f		bd 1c 03	lda $031c,x	                lda vduv.queueEnd-8,x        ;get simple pattern byte
3318	.cfa2		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne ;apply logical colour limit
3319	.cfa5		85 da		sta $da		                sta ZTEMP+0
3320	.cfa7		ad 60 03	lda $0360	                lda vduv.numberOfLogicalColoursMinusOne
3321	.cfaa		29 07		and #$07	                and #$07                     ;1/3/7
3322	.cfac		65 da		adc $da		                adc ZTEMP+0                  ;select 2/4/16 colour table
3323	.cfae		a8		tay		                tay
3324	.cfaf		b9 4d e1	lda $e14d,y	                lda solidColoursTable-1,y
3325	.cfb2		9d 1c 03	sta $031c,x	                sta vduv.queueEnd-8,x
3326	.cfb5		ca		dex		                dex
3327	.cfb6		10 e7		bpl $cf9f	                bpl LCFA0
3328	.cfb8		a9 55		lda #$55	                lda #%01010101
3329	.cfba		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
3330	.cfbd		d0 02		bne $cfc1	                bne +                 ;taken if not MODE 0
3331	.cfbf		a9 33		lda #$33	                lda #%00110011        ;double-width pattern for MODE 0
3332	.cfc1						+
3333	.cfc1		85 da		sta $da		                sta ZTEMP+0
3334	.cfc3		7a		ply		                ply
3335	.cfc4		a2 07		ldx #$07	                ldx #$07
3336	.cfc6						LCFC7:
3337	.cfc6		bd 1c 03	lda $031c,x	                lda vduv.queueEnd-8,x
3338	.cfc9		ca		dex		                dex
3339	.cfca		5d 1c 03	eor $031c,x	                eor vduv.queueEnd-8,x
3340	.cfcd		25 da		and $da		                and ZTEMP+0
3341	.cfcf		5d 1c 03	eor $031c,x	                eor vduv.queueEnd-8,x
3342	.cfd2		99 00 88	sta $8800,y	                sta andy.ecfPatterns+0,y
3343	.cfd5		99 04 88	sta $8804,y	                sta andy.ecfPatterns+4,y
3344	.cfd8		88		dey		                dey
3345	.cfd9		ca		dex		                dex
3346	.cfda		10 ea		bpl $cfc6	                bpl LCFC7
3347	.cfdc		80 b4		bra $cf92	                bra LCF93

3349							;-------------------------------------------------------------------------
3350							;
3351							; VDU 23 6 Set dotted lines pattern [MasRef E.3-13]
3352							;
3353	.cfde						vdu23_6_EntryPoint:
3354	.cfde		ad 1c 03	lda $031c	                lda vduv.queueEnd-8
3355	.cfe1		8d 67 03	sta $0367	                sta vduv.dotPattern
3356	.cfe4		60		rts		                rts

3358							;-------------------------------------------------------------------------
3359							;
3360							; VDU 23 7 Scroll window directly [MasRef E.3-14]
3361							;
3362	.cfe5						vdu23_7_EntryPoint:
3363	.cfe5		ad 1c 03	lda $031c	                lda vduv.queueEnd-8           ;get <m>
3364	.cfe8		d0 0a		bne $cff4	                bne scrollEntireScreen
3365	.cfea		20 10 c9	jsr $c910	                jsr copyTextWindowToWorkspace2C
3366	.cfed		a5 d0		lda $d0		                lda STATE
3367	.cfef		29 08		and #$08	                and #STATE.isTextWindow
3368	.cff1		0a		asl a		                asl a ;A=$10 (text window active) or $00 (no text window)
3369	.cff2		80 11		bra $d005	                bra +

3371	.cff4						scrollEntireScreen:
3372	.cff4		a9 00		lda #$00	                lda #$00
3373	.cff6		8d 2c 03	sta $032c	                sta vduv.workspace._2C          ;left
3374	.cff9		8d 2f 03	sta $032f	                sta vduv.workspace._2F          ;top
3375	.cffc		20 a4 e2	jsr $e2a4	                jsr getDefaultBoundsForCurrentScreenMODE
3376	.cfff		8e 2e 03	stx $032e	                stx vduv.workspace._2E          ;right
3377	.d002		8c 2d 03	sty $032d	                sty vduv.workspace._2D          ;bottom
3378	.d005						+
3379	.d005		85 dc		sta $dc		                sta ZTEMPB+0
3380	.d007		38		sec		                sec
3381	.d008		ad 2e 03	lda $032e	                lda vduv.workspace._2E          ;right
3382	.d00b		ed 2c 03	sbc $032c	                sbc vduv.workspace._2C          ;right-left
3383	.d00e		20 3b c9	jsr $c93b	                jsr getBytesPerInclusiveTextRow
3384	.d011		8d 28 03	sta $0328	                sta vduv.workspace._28+0        ;bytes per row LSB
3385	.d014		8e 29 03	stx $0329	                stx vduv.workspace._28+1        ;bytes per row MSB
3386	.d017		ae 4f 03	ldx $034f	                ldx vduv.bytesPerCharacter
3387	.d01a		e0 01		cpx #$01	                cpx #$01
3388	.d01c		f0 07		beq $d025	                beq +  ;when 1 byte/char, no cell/byte distinction
3389	.d01e		ad 1e 03	lda $031e	                lda vduv.queueEnd-6       ;get <z>
3390	.d021		f0 02		beq $d025	                beq +                ;taken if scrolling by 1 cell
3391	.d023		a2 08		ldx #$08	                ldx #$08                 ;scroll by 1 horizontal byte
3392	.d025						+
3393	.d025		8e 2a 03	stx $032a	                stx vduv.workspace._2A

3395							; <d> is a bitmask - %00000AVN.
3396							;
3397							; A is set if scrolling by axis (controlled by the VDU cursor flags)
3398							; rather than by direction.
3399							;
3400							; V is set to scroll vertically/in Y rather than horizontally/in X.
3401							;
3402							; N is set to scroll in the negative direction.

3404	.d028		ad 1d 03	lda $031d	                lda vduv.queueEnd-7           ;00000avn C=?
3405	.d02b		4a		lsr a		                lsr a                        ;000000av C=n
3406	.d02c		08		php		                php
3407	.d02d		2a		rol a		                rol a                        ;00000avn C=0
3408	.d02e		28		plp		                plp                          ;00000avn C=n
3409	.d02f		2a		rol a		                rol a                        ;0000avnn C=0
3410	.d030		0a		asl a		                asl a                        ;000avnn0 C=0
3411	.d031		c9 10		cmp #$10	                cmp #$10                     ;$10 = 000a0000
3412	.d033		90 03		bcc $d038	                bcc LD039                 ;taken if scrolling by direction
3413	.d035		4d 66 03	eor $0366	                eor vduv.cursorFlags       ;adjust axes
3414	.d038						LD039:
3415	.d038		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
3416	.d03a		05 dc		ora $dc		                ora ZTEMPB+0
3417	.d03c						LD03D:
3418	.d03c		aa		tax		                tax
3419	.d03d		ad 50 03	lda $0350	                lda vduv.screenTopLeftAddress+0
3420	.d040		85 d8		sta $d8		                sta ZMEMT+0
3421	.d042		ad 51 03	lda $0351	                lda vduv.screenTopLeftAddress+1
3422	.d045		85 d9		sta $d9		                sta ZMEMT+1
3423	.d047		20 4d d0	jsr $d04d	                jsr callScrollRoutine
3424	.d04a		4c d7 c6	jmp $c6d7	                jmp updateCRTCTextCursor

3426	.d04d						callScrollRoutine:
3427	.d04d		7c 0e e2	jmp ($e20e,x)	                jmp (scrollRoutinesTable,x)

3429	.d050						LD051:
3430	.d050		da		phx		                phx
3431	.d051		20 10 c9	jsr $c910	                jsr copyTextWindowToWorkspace2C
3432	.d054		20 08 c9	jsr $c908	                jsr copyTextWindowWidthInBytesToWorkspace28
3433	.d057		ae 4f 03	ldx $034f	                ldx $034F
3434	.d05a		8e 2a 03	stx $032a	                stx $032A
3435	.d05d		68		pla		                pla
3436	.d05e		4a		lsr a		                lsr a
3437	.d05f		45 d0		eor $d0		                eor STATE
3438	.d061		29 f7		and #$f7	                and #(~STATE.isTextWindow)&$ff
3439	.d063		45 d0		eor $d0		                eor STATE
3440	.d065		0a		asl a		                asl a
3441	.d066		80 d4		bra $d03c	                bra LD03D

3443							;-------------------------------------------------------------------------
3444							;
3445							; VDU 23 8 Clear block [MasRef E.3-15]
3446							;
3447	.d068						vdu23_8_EntryPoint:
3448	.d068		9c 34 03	stz $0334	                stz $0334
3449	.d06b		9c 35 03	stz $0335	                stz $0335
3450	.d06e		20 54 e2	jsr $e254	                jsr getTextCursorPositionWithColumn81
3451	.d071		8e 36 03	stx $0336	                stx $0336
3452	.d074		8c 37 03	sty $0337	                sty $0337
3453	.d077		20 5e e2	jsr $e25e	                jsr LE25C
3454	.d07a		e8		inx		                inx
3455	.d07b		8e 38 03	stx $0338	                stx $0338
3456	.d07e		8c 39 03	sty $0339	                sty $0339
3457	.d081		a0 00		ldy #$00	                ldy #$00
3458	.d083		ad 1c 03	lda $031c	                lda $031C
3459	.d086		20 e4 d0	jsr $d0e4	                jsr LD0E5
3460	.d089		ad 1d 03	lda $031d	                lda $031D
3461	.d08c		20 e4 d0	jsr $d0e4	                jsr LD0E5
3462	.d08f		ad 33 03	lda $0333	                lda $0333
3463	.d092		cd 31 03	cmp $0331	                cmp $0331
3464	.d095		90 76		bcc $d10d	                bcc LD10E
3465	.d097		d0 08		bne $d0a1	                bne LD0A2
3466	.d099		ad 30 03	lda $0330	                lda $0330
3467	.d09c		cd 32 03	cmp $0332	                cmp $0332
3468	.d09f		b0 6c		bcs $d10d	                bcs LD10E
3469	.d0a1						LD0A2:
3470	.d0a1		ad 18 03	lda $0318	                lda $0318
3471	.d0a4		48		pha		                pha
3472	.d0a5		ad 19 03	lda $0319	                lda $0319
3473	.d0a8		48		pha		                pha
3474	.d0a9		ac 31 03	ldy $0331	                ldy $0331
3475	.d0ac						LD0AD:
3476	.d0ac		5a		phy		                phy
3477	.d0ad		ad 66 03	lda $0366	                lda $0366
3478	.d0b0		49 08		eor #$08	                eor #$08
3479	.d0b2		29 0e		and #$0e	                and #$0E
3480	.d0b4		aa		tax		                tax
3481	.d0b5		98		tya		                tya
3482	.d0b6		20 c6 c2	jsr $c2c6	                jsr setTextCursorXPositionWithCursorFlags
3483	.d0b9		a2 00		ldx #$00	                ldx #$00
3484	.d0bb		ad 38 03	lda $0338	                lda $0338
3485	.d0be		cc 31 03	cpy $0331	                cpy $0331
3486	.d0c1		d0 03		bne $d0c6	                bne LD0C7
3487	.d0c3		ae 30 03	ldx $0330	                ldx $0330
3488	.d0c6						LD0C7:
3489	.d0c6		cc 33 03	cpy $0333	                cpy $0333
3490	.d0c9		f0 07		beq $d0d2	                beq LD0D3
3491	.d0cb		20 7f ca	jsr $ca7f	                jsr LCA7F
3492	.d0ce		7a		ply		                ply
3493	.d0cf		c8		iny		                iny
3494	.d0d0		80 da		bra $d0ac	                bra LD0AD

3496	.d0d2						LD0D3:
3497	.d0d2		ad 32 03	lda $0332	                lda $0332
3498	.d0d5		20 7f ca	jsr $ca7f	                jsr LCA7F
3499	.d0d8		7a		ply		                ply
3500	.d0d9		68		pla		                pla
3501	.d0da		8d 19 03	sta $0319	                sta $0319
3502	.d0dd		68		pla		                pla
3503	.d0de		8d 18 03	sta $0318	                sta $0318
3504	.d0e1		4c fa cc	jmp $ccfa	                jmp updateZMEMTWithTextCursorPosition

3506	.d0e4						LD0E5:
3507	.d0e4		48		pha		                pha
3508	.d0e5		29 03		and #$03	                and #$03
3509	.d0e7		0a		asl a		                asl a
3510	.d0e8		20 ef d0	jsr $d0ef	                jsr LD0F0
3511	.d0eb		68		pla		                pla
3512	.d0ec		4a		lsr a		                lsr a
3513	.d0ed		09 01		ora #$01	                ora #$01
3514	.d0ef						LD0F0:
3515	.d0ef		aa		tax		                tax
3516	.d0f0		29 01		and #$01	                and #$01
3517	.d0f2		48		pha		                pha
3518	.d0f3		bd 34 03	lda $0334,x	                lda $0334,x
3519	.d0f6		fa		plx		                plx
3520	.d0f7		18		clc		                clc
3521	.d0f8		c8		iny		                iny
3522	.d0f9		79 1d 03	adc $031d,y	                adc $031D,y
3523	.d0fc		30 0a		bmi $d108	                bmi LD109
3524	.d0fe		dd 38 03	cmp $0338,x	                cmp $0338,x
3525	.d101		90 07		bcc $d10a	                bcc LD10B
3526	.d103		bd 38 03	lda $0338,x	                lda $0338,x
3527	.d106		80 02		bra $d10a	                bra LD10B

3529	.d108						LD109:
3530	.d108		a9 00		lda #$00	                lda #$00
3531	.d10a						LD10B:
3532	.d10a		99 2f 03	sta $032f,y	                sta $032F,y
3533	.d10d						LD10E:
3534	.d10d		60		rts		                rts

3536							;-------------------------------------------------------------------------
3537							;
3538							; VDU 23 9 Set 1st flash time [MasRef E.3-16]
3539							;
3540	.d10e						vdu23_9_EntryPoint:
3541	.d10e		38		sec		                sec

3543							;-------------------------------------------------------------------------
3544							;
3545							; VDU 23 10 Set 2nd flash time [MasRef E.3-16]
3546							;
3547	.d10f						vdu23_10_EntryPoint:
3548	.d10f		ae 1c 03	ldx $031c	                ldx vduv.queueEnd-8          ;get flash value
3549	.d112		a0 00		ldy #$00	                ldy #$00                     ;Y=0 for OSBYTE call
3550	.d114		90 03		bcc $d119	                bcc doOSBYTE0A               ;taken if VDU23,10
3551	.d116		4c d5 eb	jmp $ebd5	                jmp osbyte09
3552	.d119						doOSBYTE0A:
3553	.d119		38		sec		                sec
3554	.d11a		4c d7 eb	jmp $ebd7	                jmp osbyte0A

3556							;-------------------------------------------------------------------------
3557							;
3558							; VDU 23 16 Cursor movement control [MasRef E.3-17]
3559							;
3560	.d11d						vdu23_16_EntryPoint:
3561	.d11d		ad 66 03	lda $0366	                lda vduv.cursorFlags
3562	.d120		2d 1d 03	and $031d	                and vduv.queueEnd-7          ;value AND <y>
3563	.d123		4d 1c 03	eor $031c	                eor vduv.queueEnd-8          ;(value AND <y>) EOR <x>
3564	.d126		8d 66 03	sta $0366	                sta vduv.cursorFlags
3565	.d129		4a		lsr a		                lsr a
3566	.d12a		b0 18		bcs $d144	                bcs rtsD145            ;taken if scrollProtect flag on
3567							                ; scroll protect flag is off, so handle column 81 if
3568							                ; necessary.

3570							;-------------------------------------------------------------------------
3571							;
3572							; Handle column 81, if necessary.
3573							;
3574							; TODO - probably misnamed due to the return value
3575							;
3576							; exit:
3577							;
3578							; C=0 if not VDU 5
3579							;
3580							; C=1 if VDU 5
3581							;
3582	.d12c						handleColumn81:

3610	.d12c		48		pha		                pha
3611	.d12d		da		phx		                phx
3612	.d12e		20 d4 e2	jsr $e2d4	                jsr testVDU5StateNonInlined
3613	.d131		38		sec		                sec
3614	.d132		d0 0e		bne $d142	                bne plx_pla_rts        ;taken if VDU5
3615	.d134		18		clc		                clc
3616	.d135		2c 6c 03	bit $036c	                bit vduv.column81
3617	.d138		10 08		bpl $d142	                bpl plx_pla_rts        ;taken if not column 81
3618	.d13a		08		php		                php
3619	.d13b		20 f5 c3	jsr $c3f5	                jsr vdu13EntryPoint          ;CR
3620	.d13e		20 5a c2	jsr $c25a	                jsr vdu10EntryPoint          ;LF
3621	.d141		28		plp		                plp
3622	.d142						plx_pla_rts:
3623	.d142		fa		plx		                plx
3624	.d143		68		pla		                pla
3625	.d144						rtsD145:
3626	.d144		60		rts		                rts

3630							;-------------------------------------------------------------------------
3631							;
3632							; Handle PLOT. [MasRef E.3-21]
3633							;
3634							; PLOT numbers are of the form %pppppamm, where %ppppp is the PLOT
3635							; type, %a the absolute flag and %mm the PLOT mode.
3636							;
3637							; Absolute flag and mode are clear enough from [MasRef E.3-22]. The
3638							; %ppppp part isn't documented as such, so here's a list:
3639							;
3640							; %00000 =  0 = 0-7 = Plot solid line (both endpoints included) [MasRef E.3-23]
3641							; %00001 =  1 = 8-15 = Plot solid line (final point omitted) [MasRef E.3-23]
3642							; %00010 =  2 = 16-23 = Plot solid line (final point omitted) [MasRef E.3-23]
3643							; %00011 =  3 = 24-31 = Plot dotted line (final point omitted) [MasRef E.3-23]
3644							; %00100 =  4 = 32-39 = Plot solid line (initial point omitted) [MasRef E.3-24]
3645							; %00101 =  5 = 40-47 = Plot solid line (both endpoints omitted) [MasRef E.3-24]
3646							; %00110 =  6 = 48-55 = Plot dotted line (initial point omitted) [MasRef E.3-24]
3647							; %00111 =  7 = 56-63 = Plot dotted line (both endpoints omitted) [MasRef E.3-24]
3648							; %01000 =  8 = 64-71 = Plot point [MasRef E.3-24]
3649							; %01001 =  9 = 72-79 = Horizontal line fill (left and right to non-background) [MasRef E.3-24]
3650							; %01010 = 10 = 80-87 = Plot triangle [MasRef E.3-25]
3651							; %01011 = 11 = 88-95 = Horizontal line fill (right to background) [MasRef E.3-25]
3652							; %01100 = 12 = 96-103 = Plot rectangle [MasRef E.3-26]
3653							; %01101 = 13 = 104-111 = Horizontal line fill (left and right to foreground) [MasRef E.3-26]
3654							; %01110 = 14 = 112-119 = Plot parallelogram [MasRef E.3-27]
3655							; %01111 = 15 = 120-127 = Horizontal line fill (right to non-foreground) [MasRef E.3-27]
3656							; %10000 = 16 = 128-135 = Flood fill to non-background [MasRef E.3-28]
3657							; %10001 = 17 = 136-143 = Flood fill to foreground [MasRef E.3-28]
3658							; %10010 = 18 = 144-151 = Plot circle outline [MasRef E.3-28]
3659							; %10011 = 19 = 152-159 = Plot filled circle [MasRef E.3-29]
3660							; %10100 = 20 = 160-167 = Plot circular arc [MasRef E.3-29]
3661							; %10101 = 21 = 168-175 = Plot filled chord segment [MasRef E.3-30]
3662							; %10110 = 22 = 176-183 = Plot filled sector [MasRef E.3-30]
3663							; %10111 = 23 = 184-191 = Move/copy rectangle [MasRef E.3-31]
3664							; %11000 = 24 = 192-199 = Plot ellipse outline [MasRef E.3-32]
3665							; %11001 = 25 = 200-207 = Plot solid ellipse [MasRef E.3-32]
3666							; %11010 = 26 = 208-215 = Reserved [MasRef E.3-34]
3667							; %11011 = 27 = 215-223 = Reserved [MasRef E.3-34]
3668							; %11100 = 28 = 224-231 = Reserved [MasRef E.3-34]
3669							; %11101 = 29 = 232-239 = Reserved for Acornsoft sprites [MasRef E.3-34]
3670							; %11110 = 30 = 240-247 = User program calls [MasRef E.3-34]
3671							; %11111 = 31 = 248-255 = User program calls [MasRef E.3-34]
3672							;
3673							; entry:
3674							;
3675							; vduQueueEnd-5 = PLOT number
3676							;
3677							; vduQueueEnd-3 = X coordinate
3678							;
3679							; vduQueueEnd-1 = Y coordinate
3680							;;

3682	.d145						handlePLOT:
3683	.d145		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
3684	.d147		20 e1 d1	jsr $d1e1	                jsr eigabsForPLOT
3685	.d14a		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number
3686	.d14d		a0 05		ldy #$05	                ldy #gcolModeLeave                     ;
3687	.d14f		29 03		and #$03	                and #$03                     ;mask out colour/plot mode [MasRef E.3-22]
3688	.d151		f0 0c		beq $d15f	                beq LD160 ;taken if <p> MOD 4=0 - early out
3689	.d153		4a		lsr a		                lsr a                        ;C=1 if using VDU18 settings
3690	.d154		88		dey		                dey                          ;Y=gcolModeInvert
3691	.d155		90 08		bcc $d15f	                bcc LD160                    ;taken if invert mode
3692	.d157		aa		tax		                tax              ;X=0 if fg settings, 1 if bg settings
3693	.d158		bc 5b 03	ldy $035b,x	                ldy vduv.foregroundGCOLMode,x
3694	.d15b		0a		asl a		                asl a
3695	.d15c		0a		asl a		                asl a
3696	.d15d		0a		asl a		                asl a
3697	.d15e		aa		tax		                tax              ;X=0 if fg settings, 8 if bg settings
3698	.d15f						LD160:
3699	.d15f		8e 59 03	stx $0359	                stx vduv.graphicsPlotState
3700	.d162		98		tya		                tya
3701	.d163		29 0f		and #$0f	                and #$0F
3702	.d165		8d 5a 03	sta $035a	                sta vduv.graphicsPlotMode
3703	.d168		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number pppppmmm
3704	.d16b		4a		lsr a		                lsr a                        ;0pppppmm
3705	.d16c		4a		lsr a		                lsr a                        ;00pppppm
3706	.d16d		29 fe		and #$fe	                and #$fe                     ;00ppppp0
3707	.d16f		aa		tax		                tax
3708	.d170		c9 34		cmp #$34	                cmp #208/4
3709	.d172		b0 1b		bcs $d18f	                bcs LD190                    ;taken if reserved PLOT
3710	.d174		29 f3		and #$f3	                and #$F3                     ;00pp00p0
3711	.d176		c9 12		cmp #$12	                cmp #$12                     ;
3712	.d178		08		php		                php                          ;
3713	.d179		f0 08		beq $d183	                beq LD184                ;taken if horizonal line fill
3714	.d17b		e0 2e		cpx #$2e	                cpx #184/4
3715	.d17d		f0 04		beq $d183	                beq LD184                ;taken if move/copy rectangle
3716	.d17f		c0 05		cpy #$05	                cpy #gcolModeLeave
3717	.d181		f0 19		beq $d19c	                beq LD19D
3718	.d183						LD184:
3719	.d183		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number
3720	.d186		20 92 d1	jsr $d192	                jsr LD193
3721	.d189		28		plp		                plp
3722	.d18a		d0 11		bne $d19d	                bne LD19E
3723	.d18c		4c de c4	jmp $c4de	                jmp LC4DF

3725	.d18f						LD190:
3726	.d18f		4c a2 c6	jmp $c6a2	                jmp callVDUVForPLOT

3728	.d192						LD193:
3729	.d192		e0 10		cpx #$10	                cpx #64/4
3730	.d194		b0 03		bcs $d199	                bcs LD19A                     ;taken if PLOT >=64
3731	.d196		4c a8 d8	jmp $d8a8	                jmp LD8A9                    ;handle line PLOTs

3733	.d199						LD19A:
3734	.d199		7c 7d e0	jmp ($e07d,x)	                jmp (plotEntryPointTable-8*2,x)

3736	.d19c						LD19D:
3737	.d19c		68		pla		                pla
3738	.d19d						LD19E:
3739	.d19d		20 1a c9	jsr $c91a	                jsr copyGraphicsCursorPixelsToOldGraphicsCursorPixels
3740	.d1a0		a0 24		ldy #$24	                ldy #$24
3741	.d1a2		4c 16 c9	jmp $c916	                jmp copyLastFourVDUQueueBytes

3743	.d1a5						LD1A6:
3744	.d1a5		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX

3746							;-------------------------------------------------------------------------
3747							;
3748							; WIND [MasRef E.4-7]. The result is a bit field, %vvhh, where %vv is
3749							; the outcode for the vertical axis and %hh the outcode for the
3750							; horizontal axis. Each outcode is %xn, where x is set if point above
3751							; maximum and n set if point below minimum. (Of course, %11 is then
3752							; not possible.)
3753							;
3754							; See https://en.wikipedia.org/wiki/Cohen%E2%80%93Sutherland_algorithm
3755							;
3756							; So the possible results, in binary, are:
3757							;
3758							; %1001 | %1000 | %1010
3759							; ------+-------+------
3760							; %0001 | %0000 | %0010
3761							; ------+-------+------
3762							; %0101 | %0100 | %0110
3763							;
3764	.d1a7						windEntryPoint:
3765	.d1a7		e8		inx		                inx
3766	.d1a8		e8		inx		                inx                          ;point to Y coordinate
3767	.d1a9		20 b4 d1	jsr $d1b4	                jsr getOutcodeForYAxis                    ;process Y coordinate
3768	.d1ac		ca		dex		                dex
3769	.d1ad		ca		dex		                dex                          ;point to X coordinate
3770	.d1ae		0a		asl a		                asl a
3771	.d1af		0a		asl a		                asl a                        ;shift Y outcode into bits 2/3
3772	.d1b0		a0 00		ldy #$00	                ldy #$00                     ;doing Y axis
3773	.d1b2		80 04		bra $d1b8	                bra updateOutcodeForAxis

3775							;-------------------------------------------------------------------------
3776							;
3777	.d1b4						getOutcodeForYAxis:
3778	.d1b4		a0 02		ldy #$02	                ldy #$02                     ;Y=2 for Y coordinate
3779							;-------------------------------------------------------------------------
3780							;
3781							; Get outcode for X or Y axis.
3782							;
3783							; entry:
3784							;
3785							; X = offset in VDU variables of coordinate
3786							;
3787							; Y = 0 if X axis, 2 if Y axis
3788							;
3789							; exit:
3790							;
3791							; ZTEMP?0 = outcode - 0, 1 or 2
3792							;
3793							; A = outcode
3794							;
3795							; N/Z set as per outcode
3796							;
3797	.d1b6						getOutcodeForAxis:
3798	.d1b6		a9 00		lda #$00	                lda #$00                     ;initialize result

3800							;-------------------------------------------------------------------------
3801							;
3802							; Update outcode for X or Y axis
3803							;
3804							; entry: as per getOutcodeForAxis
3805							;
3806							; exit:
3807							;
3808							; ZTEMP?0 = updated; outcode is added to its existing value
3809							;
3810	.d1b8						updateOutcodeForAxis:
3811	.d1b8		85 da		sta $da		                sta ZTEMP+0                  ;save current result
3812							                ; set flags for coordinate-minimum
3813	.d1ba		bd 00 03	lda $0300,x	                lda vduv+0,x
3814	.d1bd		d9 00 03	cmp $0300,y	                cmp vduv.graphicsWindowPixelsLeft+0,y
3815	.d1c0		bd 01 03	lda $0301,x	                lda vduv+1,x
3816	.d1c3		f9 01 03	sbc $0301,y	                sbc vduv.graphicsWindowPixelsLeft+1,y
3817	.d1c6		30 10		bmi $d1d8	                bmi add1ToOutcode ;taken if point below minimum - outcode is 1

3819							                ; set flags for maximum-coordinate
3820	.d1c8		b9 04 03	lda $0304,y	                lda vduv.graphicsWindowPixelsRight+0,y
3821	.d1cb		dd 00 03	cmp $0300,x	                cmp vduv+0,x
3822	.d1ce		b9 05 03	lda $0305,y	                lda vduv.graphicsWindowPixelsRight+1,y
3823	.d1d1		fd 01 03	sbc $0301,x	                sbc vduv+1,x
3824	.d1d4		10 04		bpl $d1da	                bpl gotOutcode ;taken if point below maximum - axis outcode is 0
3825							                ; point is above maximum - axis outcode is 2
3826	.d1d6						add2ToOutcode:
3827	.d1d6		e6 da		inc $da		                inc ZTEMP+0
3828	.d1d8						add1ToOutcode:
3829	.d1d8		e6 da		inc $da		                inc ZTEMP+0
3830	.d1da						gotOutcode:
3831	.d1da		a5 da		lda $da		                lda ZTEMP+0
3832	.d1dc		60		rts		                rts

3834							;-------------------------------------------------------------------------
3835							;
3836							; EIGABS entry point.
3837							;
3838	.d1dd						eigabsEntryPoint:
3839	.d1dd		a9 ff		lda #$ff	                lda #$FF ;pretend it's PLOT 255 (as that would be absolute coordinates)
3840	.d1df		80 03		bra $d1e4	                bra eigabsCommon

3842							;-------------------------------------------------------------------------
3843							;
3844							; EIGABS, but for a VDU 25. Handles relative/absolute addressing,
3845							; based on the PLOT number in the VDU queue.
3846							;
3847	.d1e1						eigabsForPLOT:
3848	.d1e1		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number

3850							;-------------------------------------------------------------------------
3851							;
3852							; EIGABS shared code.
3853							;
3854	.d1e4						eigabsCommon:
3855	.d1e4		85 da		sta $da		                sta ZTEMP+0                  ;save PLOT number
3856	.d1e6		a0 02		ldy #$02	                ldy #$02                     ;process Y
3857	.d1e8		20 0a d2	jsr $d20a	                jsr handleExternalCoordinate
3858	.d1eb		20 41 d2	jsr $d241	                jsr divideCoordinatesBy2     ;divide Y by 4 - convert 0-1023 to 0-255
3859	.d1ee		a0 00		ldy #$00	                ldy #$00                     ;process X
3860	.d1f0		ca		dex		                dex                          ;...
3861	.d1f1		ca		dex		                dex                          ;...
3862	.d1f2		20 0a d2	jsr $d20a	                jsr handleExternalCoordinate
3863	.d1f5		ac 61 03	ldy $0361	                ldy vduv.pixelsPerByteMinusOne
3864	.d1f8		c0 03		cpy #$03	                cpy #$03  ;
3865	.d1fa		f0 05		beq $d201	                beq +     ;branch taken if mode 1/5 - divide by 4 or 8
3866	.d1fc		b0 06		bcs $d204	                bcs ++    ;branch taken if mode 0/4 - divide by 2 or 4
3867	.d1fe		20 41 d2	jsr $d241	                jsr divideCoordinatesBy2     ;mode 2 - divide by 8
3868	.d201						+
3869	.d201		20 41 d2	jsr $d241	                jsr divideCoordinatesBy2
3870	.d204						+
3871	.d204		ad 56 03	lda $0356	                lda vduv.currentScreenMODEGroup
3872	.d207		d0 38		bne $d241	                bne divideCoordinatesBy2     ;branch taken if MODE 4/5
3873	.d209		60		rts		                rts

3875							;-------------------------------------------------------------------------
3876							;
3877							; Handle external coordinate.
3878							;
3879							; 1. Deal with absolute or relative PLOTting
3880							;
3881							; 2. Update graphics cursor position
3882							;
3883							; 3. Handle window origin
3884							;
3885							; 4. Update input coordinate
3886							;
3887							; 5. Divide result by 2 (as this always needs doing at least once)
3888							;
3889							; entry:
3890							;
3891							; ZTEMP?0 = PLOT number
3892							;
3893							; X = offset-2 of external coordinates
3894							;
3895							; Y = 0 to process X coordinate, 2 to process Y coordinate
3896							;
3897	.d20a						handleExternalCoordinate:
3898	.d20a		18		clc		                clc
3899	.d20b		a5 da		lda $da		                lda ZTEMP+0                  ;get PLOT number
3900	.d20d		29 04		and #$04	                and #$04                     ;get absolute/relative flag
3901	.d20f		f0 09		beq $d21a	                beq relativePLOT             ;branch taken if relative
3902	.d211						absolutePLOT:
3903	.d211		bd 02 03	lda $0302,x	                lda vduv+2,x                 ;get coordinate LSB
3904	.d214		48		pha		                pha                          ;save coordinate LSB
3905	.d215		bd 03 03	lda $0303,x	                lda vduv+3,x                 ;get coordinate MSB
3906	.d218		80 0e		bra $d228	                bra LD229                    ;

3908	.d21a						relativePLOT:
3909	.d21a		bd 02 03	lda $0302,x	                lda vduv+2,x                 ;get coordinate LSB
3910	.d21d		79 10 03	adc $0310,y	                adc vduv.graphicsCursorPositionX+0,y ;add current position LSB
3911	.d220		48		pha		                pha                                  ;save coordinate LSB
3912	.d221		bd 03 03	lda $0303,x	                lda vduv+3,x                 ;get coordinate MSB
3913	.d224		79 11 03	adc $0311,y	                adc vduv.graphicsCursorPositionX+1,y ;add current position MSB
3914	.d227		18		clc		                clc
3915	.d228						LD229:
3916	.d228		99 11 03	sta $0311,y	                sta vduv.graphicsCursorPositionX+1,y ;update current position MSB
3917	.d22b		79 0d 03	adc $030d,y	                adc vduv.graphicsWindowOriginX+1,y   ;add window origin MSB
3918	.d22e		9d 03 03	sta $0303,x	                sta vduv+3,x                  ;update coordinate MSB
3919	.d231		68		pla		                pla                          ;restore coordinate LSB
3920	.d232		99 10 03	sta $0310,y	                sta vduv.graphicsCursorPositionX+0,y ;update current position LSB
3921	.d235		18		clc		                clc
3922	.d236		79 0c 03	adc $030c,y	                adc vduv.graphicsWindowOriginX+0,y ;add window origin LSB
3923	.d239		9d 02 03	sta $0302,x	                sta vduv+2,x                       ;update coordinate LSB
3924	.d23c		90 03		bcc $d241	                bcc +
3925	.d23e		fe 03 03	inc $0303,x	                inc vduv+3,x       ;handle carry, ignored earlier
3926	.d241						+

3928	.d241						divideCoordinatesBy2:
3929	.d241		bd 03 03	lda $0303,x	                lda vduv+3,x
3930	.d244		0a		asl a		                asl a                        ;C=bit 7
3931	.d245		7e 03 03	ror $0303,x	                ror vduv+3,x                  ;signed divide by 2
3932	.d248		7e 02 03	ror $0302,x	                ror vduv+2,x                  ;signed divide by 2
3933	.d24b		60		rts		                rts

3935							;-------------------------------------------------------------------------

3937	.d24c						LD24D:
3938	.d24c		da		phx		                phx
3939	.d24d		5a		phy		                phy
3940	.d24e		5a		phy		                phy
3941	.d24f		da		phx		                phx
3942	.d250		5a		phy		                phy
3943	.d251		20 7f d2	jsr $d27f	                jsr LD280
3944	.d254		fa		plx		                plx
3945	.d255		20 7f d2	jsr $d27f	                jsr LD280
3946	.d258		fa		plx		                plx
3947	.d259		7a		ply		                ply
3948	.d25a		20 e7 da	jsr $dae7	                jsr LDAE8
3949	.d25d		fa		plx		                plx
3950	.d25e		20 67 d2	jsr $d267	                jsr LD268
3951	.d261		fa		plx		                plx
3952	.d262		80 03		bra $d267	                bra LD268

3954	.d264						LD265:
3955	.d264		20 24 9b	jsr $9b24	                jsr L9B09
3956	.d267						LD268:
3957	.d267		a0 00		ldy #$00	                ldy #$00
3958	.d269		20 6f d2	jsr $d26f	                jsr LD270
3959	.d26c		e8		inx		                inx
3960	.d26d		a0 02		ldy #$02	                ldy #$02
3961	.d26f						LD270:
3962	.d26f		38		sec		                sec
3963	.d270		20 75 d2	jsr $d275	                jsr LD276
3964	.d273		e8		inx		                inx
3965	.d274		c8		iny		                iny
3966	.d275						LD276:
3967	.d275		bd 00 03	lda $0300,x	                lda $0300,x
3968	.d278		f9 14 03	sbc $0314,y	                sbc $0314,y
3969	.d27b		9d 00 03	sta $0300,x	                sta $0300,x
3970	.d27e						LD27F:
3971	.d27e		60		rts		                rts

3973	.d27f						LD280:
3974	.d27f		a0 00		ldy #$00	                ldy #$00
3975	.d281		20 87 d2	jsr $d287	                jsr LD288
3976	.d284		e8		inx		                inx
3977	.d285		a0 02		ldy #$02	                ldy #$02
3978	.d287						LD288:
3979	.d287		18		clc		                clc
3980	.d288		20 8d d2	jsr $d28d	                jsr LD28E
3981	.d28b		e8		inx		                inx
3982	.d28c		c8		iny		                iny
3983	.d28d						LD28E:
3984	.d28d		bd 00 03	lda $0300,x	                lda $0300,x
3985	.d290		79 14 03	adc $0314,y	                adc $0314,y
3986	.d293		9d 00 03	sta $0300,x	                sta $0300,x
3987	.d296		60		rts		                rts

3989	.d297						LD298:
3990	.d297		85 e1		sta $e1		                sta $E1
3991	.d299		20 24 d4	jsr $d424	                jsr LD425
3992	.d29c		f0 e0		beq $d27e	                beq LD27F
3993	.d29e		a0 14		ldy #$14	                ldy #$14
3994	.d2a0		a9 20		lda #$20	                lda #$20
3995	.d2a2		a2 2c		ldx #$2c	                ldx #$2C
3996	.d2a4		20 64 d2	jsr $d264	                jsr LD265
3997	.d2a7		20 a9 d3	jsr $d3a9	                jsr LD3AA
3998	.d2aa		a9 01		lda #$01	                lda #$01
3999	.d2ac						LD2AD:
4000	.d2ac		84 e0		sty $e0		                sty $E0
4001	.d2ae		04 e0		tsb $e0		                tsb $E0
4002	.d2b0		a2 2c		ldx #$2c	                ldx #VDUVariables.workspace._2C
4003	.d2b2		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
4004	.d2b4		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
4005	.d2b7		2c 35 03	bit $0335	                bit $0335
4006	.d2ba		08		php		                php
4007	.d2bb		a2 2c		ldx #$2c	                ldx #$2C
4008	.d2bd		20 25 d7	jsr $d725	                jsr LD726
4009	.d2c0		28		plp		                plp
4010	.d2c1		10 03		bpl $d2c6	                bpl LD2C7
4011	.d2c3		20 a9 d3	jsr $d3a9	                jsr LD3AA
4012	.d2c6						LD2C7:
4013	.d2c6		ac 2c 03	ldy $032c	                ldy $032C
4014	.d2c9		ad 2d 03	lda $032d	                lda $032D
4015	.d2cc		30 03		bmi $d2d1	                bmi LD2D2
4016	.d2ce		20 2e c9	jsr $c92e	                jsr negateAY
4017	.d2d1						LD2D2:
4018	.d2d1		48		pha		                pha
4019	.d2d2		18		clc		                clc
4020	.d2d3		98		tya		                tya
4021	.d2d4		6d 30 88	adc $8830	                adc L8830
4022	.d2d7		a8		tay		                tay
4023	.d2d8		68		pla		                pla
4024	.d2d9		6d 31 88	adc $8831	                adc L8831
4025	.d2dc		10 ce		bpl $d2ac	                bpl LD2AD
4026	.d2de		1a		inc a		                inc a
4027	.d2df		d0 23		bne $d304	                bne LD305
4028	.d2e1		c8		iny		                iny
4029	.d2e2		d0 20		bne $d304	                bne LD305
4030	.d2e4		a5 e0		lda $e0		                lda $E0
4031	.d2e6		f0 1c		beq $d304	                beq LD305
4032	.d2e8		ad 2c 03	lda $032c	                lda $032C
4033	.d2eb		cd 28 03	cmp $0328	                cmp $0328
4034	.d2ee		f0 14		beq $d304	                beq LD305
4035	.d2f0		a2 2c		ldx #$2c	                ldx #$2C
4036	.d2f2		a0 28		ldy #$28	                ldy #$28
4037	.d2f4		ad 36 03	lda $0336	                lda $0336
4038	.d2f7		0a		asl a		                asl a
4039	.d2f8		4d 36 03	eor $0336	                eor $0336
4040	.d2fb		10 04		bpl $d301	                bpl LD302
4041	.d2fd		e8		inx		                inx
4042	.d2fe		e8		inx		                inx
4043	.d2ff		c8		iny		                iny
4044	.d300		c8		iny		                iny
4045	.d301						LD302:
4046	.d301		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
4047	.d304						LD305:
4048	.d304		20 24 d4	jsr $d424	                jsr LD425
4049	.d307		ad 29 03	lda $0329	                lda $0329
4050	.d30a		aa		tax		                tax
4051	.d30b		4d 1c 03	eor $031c	                eor $031C
4052	.d30e		30 18		bmi $d328	                bmi LD329
4053	.d310		a0 02		ldy #$02	                ldy #$02
4054	.d312		20 6e d4	jsr $d46e	                jsr LD46F
4055	.d315		d0 0c		bne $d323	                bne LD324
4056	.d317		ae 2b 03	ldx $032b	                ldx $032B
4057	.d31a		a0 00		ldy #$00	                ldy #$00
4058	.d31c		20 6e d4	jsr $d46e	                jsr LD46F
4059	.d31f		f0 11		beq $d332	                beq LD333
4060	.d321		49 80		eor #$80	                eor #$80
4061	.d323						LD324:
4062	.d323		86 da		stx $da		                stx $DA
4063	.d325		45 da		eor $da		                eor $DA
4064	.d327		aa		tax		                tax
4065	.d328						LD329:
4066	.d328		8a		txa		                txa
4067	.d329		29 80		and #$80	                and #$80
4068	.d32b		f0 02		beq $d32f	                beq LD330
4069	.d32d		a9 c0		lda #$c0	                lda #$C0
4070	.d32f						LD330:
4071	.d32f		04 e1		tsb $e1		                tsb $E1
4072	.d331		18		clc		                clc
4073	.d332						LD333:
4074	.d332		60		rts		                rts

4076	.d333						LD334:
4077	.d333		a5 e1		lda $e1		                lda $E1
4078	.d335		8d 48 88	sta $8848	                sta L8848
4079	.d338		89 03		bit #$03	                bit #$03
4080	.d33a		f0 f6		beq $d332	                beq LD333
4081	.d33c		a9 10		lda #$10	                lda #$10
4082	.d33e		85 dc		sta $dc		                sta $DC
4083	.d340		0a		asl a		                asl a
4084	.d341		85 dd		sta $dd		                sta $DD
4085	.d343		a2 1b		ldx #$1b	                ldx #$1B
4086	.d345		20 4e d3	jsr $d34e	                jsr LD34F
4087	.d348		06 dc		asl $dc		                asl $DC
4088	.d34a		46 dd		lsr $dd		                lsr $DD
4089	.d34c		a2 28		ldx #$28	                ldx #$28
4090	.d34e						LD34F:
4091	.d34e		a9 80		lda #$80	                lda #$80
4092	.d350		85 da		sta $da		                sta $DA
4093	.d352		bd 02 03	lda $0302,x	                lda $0302,x
4094	.d355		cd 32 88	cmp $8832	                cmp L8832
4095	.d358		d0 d8		bne $d332	                bne LD333
4096	.d35a		bd 03 03	lda $0303,x	                lda $0303,x
4097	.d35d		cd 33 88	cmp $8833	                cmp L8833
4098	.d360		d0 d0		bne $d332	                bne LD333
4099	.d362		bc 00 03	ldy $0300,x	                ldy $0300,x
4100	.d365		bd 01 03	lda $0301,x	                lda $0301,x
4101	.d368		10 05		bpl $d36f	                bpl LD370
4102	.d36a		46 da		lsr $da		                lsr $DA
4103	.d36c		20 2e c9	jsr $c92e	                jsr negateAY
4104	.d36f						LD370:
4105	.d36f		cc 30 88	cpy $8830	                cpy L8830
4106	.d372		d0 be		bne $d332	                bne LD333
4107	.d374		cd 31 88	cmp $8831	                cmp L8831
4108	.d377		d0 b9		bne $d332	                bne LD333
4109	.d379		a5 e1		lda $e1		                lda $E1
4110	.d37b		89 02		bit #$02	                bit #$02
4111	.d37d		f0 19		beq $d398	                beq LD399
4112	.d37f		a0 30		ldy #$30	                ldy #$30
4113	.d381		89 01		bit #$01	                bit #$01
4114	.d383		f0 02		beq $d387	                beq LD388
4115	.d385		a4 dc		ldy $dc		                ldy $DC
4116	.d387						LD388:
4117	.d387		98		tya		                tya
4118	.d388		4a		lsr a		                lsr a
4119	.d389		4a		lsr a		                lsr a
4120	.d38a		24 e1		bit $e1		                bit $E1
4121	.d38c		d0 06		bne $d394	                bne LD395
4122	.d38e		05 dc		ora $dc		                ora $DC
4123	.d390		04 e1		tsb $e1		                tsb $E1
4124	.d392		80 04		bra $d398	                bra LD399

4126	.d394						LD395:
4127	.d394		05 dd		ora $dd		                ora $DD
4128	.d396		14 e1		trb $e1		                trb $E1
4129	.d398						LD399:
4130	.d398		a5 da		lda $da		                lda $DA
4131	.d39a		24 e1		bit $e1		                bit $E1
4132	.d39c		f0 91		beq $d32f	                beq LD330
4133	.d39e		14 e1		trb $e1		                trb $E1
4134	.d3a0		a5 e1		lda $e1		                lda $E1
4135	.d3a2		8d 48 88	sta $8848	                sta L8848
4136	.d3a5		8d 49 88	sta $8849	                sta L8849
4137	.d3a8		60		rts		                rts

4139	.d3a9						LD3AA:
4140	.d3a9		ad 2e 03	lda $032e	                lda $032E
4141	.d3ac		8d 32 88	sta $8832	                sta L8832
4142	.d3af		ad 2f 03	lda $032f	                lda $032F
4143	.d3b2		8d 33 88	sta $8833	                sta L8833
4144	.d3b5		20 fb d3	jsr $d3fb	                jsr LD3FC
4145	.d3b8		20 12 d5	jsr $d512	                jsr LD513
4146	.d3bb		8c 30 88	sty $8830	                sty L8830
4147	.d3be		ad 46 88	lda $8846	                lda L8846
4148	.d3c1		4a		lsr a		                lsr a
4149	.d3c2		ad 3d 88	lda $883d	                lda L883D
4150	.d3c5		90 06		bcc $d3cd	                bcc LD3CE
4151	.d3c7		c9 80		cmp #$80	                cmp #$80
4152	.d3c9		6a		ror a		                ror a
4153	.d3ca		6e 30 88	ror $8830	                ror L8830
4154	.d3cd						LD3CE:
4155	.d3cd		8d 31 88	sta $8831	                sta L8831
4156	.d3d0		60		rts		                rts

4158	.d3d1						LD3D2:
4159	.d3d1		9c 47 88	stz $8847	                stz L8847
4160	.d3d4		9c 30 88	stz $8830	                stz L8830
4161	.d3d7		9c 31 88	stz $8831	                stz L8831
4162	.d3da		9c 34 88	stz $8834	                stz L8834
4163	.d3dd		9c 35 88	stz $8835	                stz L8835
4164	.d3e0		ad 32 88	lda $8832	                lda L8832
4165	.d3e3		0a		asl a		                asl a
4166	.d3e4		8d 36 88	sta $8836	                sta L8836
4167	.d3e7		ad 33 88	lda $8833	                lda L8833
4168	.d3ea		2a		rol a		                rol a
4169	.d3eb		8d 37 88	sta $8837	                sta L8837
4170	.d3ee		ad 46 88	lda $8846	                lda L8846
4171	.d3f1		89 02		bit #$02	                bit #$02
4172	.d3f3		f0 06		beq $d3fb	                beq LD3FC
4173	.d3f5		0e 36 88	asl $8836	                asl L8836
4174	.d3f8		2e 37 88	rol $8837	                rol L8837
4175	.d3fb						LD3FC:
4176	.d3fb		ad 46 88	lda $8846	                lda L8846
4177	.d3fe		4a		lsr a		                lsr a
4178	.d3ff		4a		lsr a		                lsr a
4179	.d400		ac 32 88	ldy $8832	                ldy L8832
4180	.d403		ad 33 88	lda $8833	                lda L8833
4181	.d406		20 c4 d4	jsr $d4c4	                jsr LD4C5
4182	.d409		38		sec		                sec
4183	.d40a		a2 fc		ldx #$fc	                ldx #$FC
4184	.d40c						LD40D:
4185	.d40c		bd 3c 87	lda $873c,x	                lda L873C,x
4186	.d40f		fd 44 87	sbc $8744,x	                sbc L8744,x
4187	.d412		9d 44 87	sta $8744,x	                sta L8744,x
4188	.d415		e8		inx		                inx
4189	.d416		d0 f4		bne $d40c	                bne LD40D
4190	.d418		60		rts		                rts

4192	.d419						LD41A:
4193	.d419		20 1a c9	jsr $c91a	                jsr copyGraphicsCursorPixelsToOldGraphicsCursorPixels
4194	.d41c		64 e1		stz $e1		                stz $E1
4195	.d41e		a2 20		ldx #$20	                ldx #$20
4196	.d420		20 26 d4	jsr $d426	                jsr LD427
4197	.d423		60		rts		                rts

4199	.d424						LD425:
4200	.d424		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX
4201	.d426						LD427:
4202	.d426		a0 1b		ldy #$1b	                ldy #VDUVariables.queueEnd-9
4203	.d428		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
4204	.d42b		a2 1b		ldx #$1b	                ldx #$1B
4205	.d42d		20 67 d2	jsr $d267	                jsr LD268
4206	.d430		20 85 d4	jsr $d485	                jsr LD486
4207	.d433		20 12 d5	jsr $d512	                jsr LD513
4208	.d436		a0 0c		ldy #$0c	                ldy #$0C
4209	.d438		20 aa d4	jsr $d4aa	                jsr LD4AB
4210	.d43b		20 12 d5	jsr $d512	                jsr LD513
4211	.d43e		c9 20		cmp #$20	                cmp #$20
4212	.d440		90 05		bcc $d447	                bcc LD448
4213	.d442		68		pla		                pla
4214	.d443		68		pla		                pla
4215	.d444		68		pla		                pla
4216	.d445		68		pla		                pla
4217	.d446		60		rts		                rts

4219	.d447						LD448:
4220	.d447		8c 44 88	sty $8844	                sty L8844
4221	.d44a		8d 45 88	sta $8845	                sta L8845
4222	.d44d		ad 46 88	lda $8846	                lda L8846
4223	.d450		89 02		bit #$02	                bit #$02
4224	.d452		f0 06		beq $d45a	                beq LD45B
4225	.d454		4e 45 88	lsr $8845	                lsr L8845
4226	.d457		6e 44 88	ror $8844	                ror L8844
4227	.d45a						LD45B:
4228	.d45a		ac 44 88	ldy $8844	                ldy L8844
4229	.d45d		ad 45 88	lda $8845	                lda L8845
4230	.d460		20 2e c9	jsr $c92e	                jsr negateAY
4231	.d463		8c 32 88	sty $8832	                sty L8832
4232	.d466		8d 33 88	sta $8833	                sta L8833
4233	.d469		0d 32 88	ora $8832	                ora L8832
4234	.d46c		38		sec		                sec
4235	.d46d		60		rts		                rts

4237	.d46e						LD46F:
4238	.d46e		64 da		stz $da		                stz $DA
4239	.d470		b9 1b 03	lda $031b,y	                lda $031B,y
4240	.d473		d9 28 03	cmp $0328,y	                cmp $0328,y
4241	.d476		f0 02		beq $d47a	                beq LD47B
4242	.d478		e6 da		inc $da		                inc $DA
4243	.d47a						LD47B:
4244	.d47a		b9 1c 03	lda $031c,y	                lda $031C,y
4245	.d47d		f9 29 03	sbc $0329,y	                sbc $0329,y
4246	.d480		d0 02		bne $d484	                bne LD485
4247	.d482		a5 da		lda $da		                lda $DA
4248	.d484						LD485:
4249	.d484		60		rts		                rts

4251	.d485						LD486:
4252	.d485		ae 55 03	ldx $0355	                ldx $0355
4253	.d488		bd be d4	lda $d4be,x	                lda LD4BF,x
4254	.d48b		8d 46 88	sta $8846	                sta L8846
4255	.d48e		4a		lsr a		                lsr a
4256	.d48f		48		pha		                pha
4257	.d490		a2 04		ldx #$04	                ldx #$04
4258	.d492						LD493:
4259	.d492		9e 37 88	stz $8837,x	                stz L8837,x
4260	.d495		ca		dex		                dex
4261	.d496		d0 fa		bne $d492	                bne LD493
4262	.d498		20 9f d4	jsr $d49f	                jsr LD4A0
4263	.d49b		68		pla		                pla
4264	.d49c		4a		lsr a		                lsr a
4265	.d49d		a2 02		ldx #$02	                ldx #$02
4266	.d49f						LD4A0:
4267	.d49f		bc 1b 03	ldy $031b,x	                ldy $031B,x
4268	.d4a2		bd 1c 03	lda $031c,x	                lda $031C,x
4269	.d4a5		20 c4 d4	jsr $d4c4	                jsr LD4C5
4270	.d4a8		a0 10		ldy #$10	                ldy #$10
4271	.d4aa						LD4AB:
4272	.d4aa		18		clc		                clc
4273	.d4ab		a2 fc		ldx #$fc	                ldx #$FC
4274	.d4ad						LD4AE:
4275	.d4ad		bd 3c 87	lda $873c,x	                lda L873C,x
4276	.d4b0		79 30 88	adc $8830,y	                adc L8830,y
4277	.d4b3		9d 3c 87	sta $873c,x	                sta L873C,x
4278	.d4b6		9d 44 87	sta $8744,x	                sta L8744,x
4279	.d4b9		c8		iny		                iny
4280	.d4ba		e8		inx		                inx
4281	.d4bb		d0 f0		bne $d4ad	                bne LD4AE
4282	.d4bd		60		rts		                rts

4284	.d4be						LD4BF:
4285	>d4be		02				                .byte $02
4286	.d4bf		00		brk #		                brk
4287	.d4c0		01 ff		ora ($ff,x)	                ora ($FF,x)
4288	.d4c2		00		brk #		                brk
4289							;ORA (&8C,x)      :\ D4C4= 01       ..
4290	>d4c3		01				                .byte $01
4291	.d4c4						LD4C5:
4292	.d4c4		8c 3c 88	sty $883c	                sty L883C
4293	.d4c7		90 04		bcc $d4cd	                bcc LD4CE
4294	.d4c9		0e 3c 88	asl $883c	                asl L883C
4295	.d4cc		2a		rol a		                rol a
4296	.d4cd						LD4CE:
4297	.d4cd		8d 3d 88	sta $883d	                sta L883D
4298	.d4d0		ac 3c 88	ldy $883c	                ldy L883C
4299	.d4d3		aa		tax		                tax
4300	.d4d4		10 03		bpl $d4d9	                bpl LD4DA
4301	.d4d6		20 2e c9	jsr $c92e	                jsr negateAY
4302	.d4d9						LD4DA:
4303	.d4d9		8c 3c 88	sty $883c	                sty L883C
4304	.d4dc		8d 3d 88	sta $883d	                sta L883D
4305	.d4df		8c 40 88	sty $8840	                sty L8840
4306	.d4e2		9c 42 88	stz $8842	                stz L8842
4307	.d4e5		9c 43 88	stz $8843	                stz L8843
4308	.d4e8		a0 0f		ldy #$0f	                ldy #$0F
4309	.d4ea		4a		lsr a		                lsr a
4310	.d4eb		8d 41 88	sta $8841	                sta L8841
4311	.d4ee		6e 40 88	ror $8840	                ror L8840
4312	.d4f1						LD4F2:
4313	.d4f1		90 13		bcc $d506	                bcc LD507
4314	.d4f3		18		clc		                clc
4315	.d4f4		ad 3c 88	lda $883c	                lda L883C
4316	.d4f7		6d 42 88	adc $8842	                adc L8842
4317	.d4fa		8d 42 88	sta $8842	                sta L8842
4318	.d4fd		ad 3d 88	lda $883d	                lda L883D
4319	.d500		6d 43 88	adc $8843	                adc L8843
4320	.d503		8d 43 88	sta $8843	                sta L8843
4321	.d506						LD507:
4322	.d506		a2 03		ldx #$03	                ldx #$03
4323	.d508						LD509:
4324	.d508		7e 40 88	ror $8840,x	                ror L8840,x
4325	.d50b		ca		dex		                dex
4326	.d50c		10 fa		bpl $d508	                bpl LD509
4327	.d50e		88		dey		                dey
4328	.d50f		10 e0		bpl $d4f1	                bpl LD4F2
4329	.d511		60		rts		                rts

4331	.d512						LD513:
4332	.d512		a2 02		ldx #$02	                ldx #$02
4333	.d514						LD515:
4334	.d514		9e 3c 88	stz $883c,x	                stz L883C,x
4335	.d517		74 db		stz $db,x	                stz $DB,x
4336	.d519		ca		dex		                dex
4337	.d51a		10 f8		bpl $d514	                bpl LD515
4338	.d51c		a0 03		ldy #$03	                ldy #$03
4339	.d51e						LD51F:
4340	.d51e		b9 40 88	lda $8840,y	                lda L8840,y
4341	.d521		85 da		sta $da		                sta $DA
4342	.d523		5a		phy		                phy
4343	.d524		a0 03		ldy #$03	                ldy #$03
4344	.d526						LD527:
4345	.d526		5a		phy		                phy
4346	.d527		38		sec		                sec
4347	.d528		2e 3c 88	rol $883c	                rol L883C
4348	.d52b		2e 3d 88	rol $883d	                rol L883D
4349	.d52e		2e 3e 88	rol $883e	                rol L883E
4350	.d531		a2 01		ldx #$01	                ldx #$01
4351	.d533		a5 db		lda $db		                lda $DB
4352	.d535						LD536:
4353	.d535		06 da		asl $da		                asl $DA
4354	.d537		2a		rol a		                rol a
4355	.d538		26 dc		rol $dc		                rol $DC
4356	.d53a		26 dd		rol $dd		                rol $DD
4357	.d53c		ca		dex		                dex
4358	.d53d		10 f6		bpl $d535	                bpl LD536
4359	.d53f		85 db		sta $db		                sta $DB
4360	.d541		38		sec		                sec
4361	.d542		ed 3c 88	sbc $883c	                sbc L883C
4362	.d545		aa		tax		                tax
4363	.d546		a5 dc		lda $dc		                lda $DC
4364	.d548		ed 3d 88	sbc $883d	                sbc L883D
4365	.d54b		a8		tay		                tay
4366	.d54c		a5 dd		lda $dd		                lda $DD
4367	.d54e		ed 3e 88	sbc $883e	                sbc L883E
4368	.d551		90 0b		bcc $d55e	                bcc LD55F
4369	.d553		85 dd		sta $dd		                sta $DD
4370	.d555		84 dc		sty $dc		                sty $DC
4371	.d557		86 db		stx $db		                stx $DB
4372	.d559		ee 3c 88	inc $883c	                inc L883C
4373	.d55c		80 03		bra $d561	                bra LD562

4375	.d55e						LD55F:
4376	.d55e		ce 3c 88	dec $883c	                dec L883C
4377	.d561						LD562:
4378	.d561		7a		ply		                ply
4379	.d562		88		dey		                dey
4380	.d563		10 c1		bpl $d526	                bpl LD527
4381	.d565		7a		ply		                ply
4382	.d566		88		dey		                dey
4383	.d567		10 b5		bpl $d51e	                bpl LD51F
4384	.d569		4e 3e 88	lsr $883e	                lsr L883E
4385	.d56c		6e 3d 88	ror $883d	                ror L883D
4386	.d56f		6e 3c 88	ror $883c	                ror L883C
4387	.d572		9c 3e 88	stz $883e	                stz L883E
4388	.d575		9c 3f 88	stz $883f	                stz L883F
4389	.d578		ac 3c 88	ldy $883c	                ldy L883C
4390	.d57b		ad 3d 88	lda $883d	                lda L883D
4391	.d57e		60		rts		                rts

4393							;-------------------------------------------------------------------------
4394							;
4395							; Add dimension of region to a coordinate.
4396							;
4397							; entry:
4398							;
4399							; X = VDU variable offset of coordinate
4400							;
4401							; A = VDU variable offset of minimum coordinate of region
4402							;
4403							; Y = VDU variable offset of maximum coordinate of region
4404							;
4405							; ZTEMP?0 = VDU variable offset for result
4406							;
4407							; exit:
4408							;
4409							; result variable = coordinate+(min-max)
4410							;
4411	.d57f						addRegionDimensionsToVDUVariableCoordinates:
4412	.d57f		20 8c d5	jsr $d58c	                jsr addRegionDimensionToVDUVariableCoordinate ;do X

4414							                ; bump offsets to do Y.
4415	.d582		c8		iny		                iny
4416	.d583		c8		iny		                iny
4417	.d584		e8		inx		                inx
4418	.d585		e8		inx		                inx
4419	.d586		1a		inc a		                inc a
4420	.d587		1a		inc a		                inc a
4421	.d588		e6 da		inc $da		                inc ZTEMP+0
4422	.d58a		e6 da		inc $da		                inc ZTEMP+0

4424							                ; TODO - not a great name. Could probably just be
4425							                ; addDifference, or something.
4426	.d58c						addRegionDimensionToVDUVariableCoordinate:
4427	.d58c		da		phx		                phx                          ;save VX
4428	.d58d		5a		phy		                phy                          ;save VY
4429	.d58e		48		pha		                pha                          ;save VA
4430	.d58f		18		clc		                clc
4431	.d590		bd 00 03	lda $0300,x	                lda vduv+0,x                 ;<VX
4432	.d593		79 00 03	adc $0300,y	                adc vduv+0,y                 ;<(VX+VY)
4433	.d596		85 de		sta $de		                sta ZTEMPC+0                 ;ZTEMPC?0=<(VX+VY)
4434	.d598		bd 01 03	lda $0301,x	                lda vduv+1,x                 ;>VX
4435	.d59b		79 01 03	adc $0301,y	                adc vduv+1,y                 ;>(VX+VY)
4436	.d59e		fa		plx		                plx                          ;X=VA
4437	.d59f		48		pha		                pha                          ;save >(VX+VY)
4438	.d5a0		a4 da		ldy $da		                ldy ZTEMP+0                  ;Y=VT
4439	.d5a2		38		sec		                sec
4440	.d5a3		a5 de		lda $de		                lda ZTEMPC+0                 ;<(VX+VY)
4441	.d5a5		fd 00 03	sbc $0300,x	                sbc vduv+0,x                 ;<(VX+VY-VA)
4442	.d5a8		99 00 03	sta $0300,y	                sta vduv+0,y                 ;<VT=<(VX+VY-VA)
4443	.d5ab		68		pla		                pla                          ;>(VX+VY)
4444	.d5ac		fd 01 03	sbc $0301,x	                sbc vduv+1,x                 ;>(VX+VY-VA)
4445	.d5af		99 01 03	sta $0301,y	                sta vduv+1,y                 ;>VT=<(VX+VY-VA)
4446	.d5b2		8a		txa		                txa                          ;restore old A
4447	.d5b3		7a		ply		                ply                          ;restore old Y
4448	.d5b4		fa		plx		                plx                          ;restore old X
4449	.d5b5		60		rts		                rts

4451							;-------------------------------------------------------------------------
4452							;
4453							; Sort points by Y coordinate, then X.
4454							;
4455							; entry:
4456							;
4457							; X = VDU variable offset of point A (4 bytes: X;Y;)
4458							;
4459							; Y = VDU variable offset of point B (4 bytes: X;Y;)
4460							;
4461							; exit:
4462							;
4463							; X = offset of point with lesser Y (or lesser X, if same Y)
4464							;
4465							; Y = offset of point with greater Y (or greater X, if same Y)
4466							;
4467	.d5b6						sortVDUVariableCoordinates:
4468	.d5b6		38		sec		                sec
4469	.d5b7		b9 02 03	lda $0302,y	                lda vduv+2,y
4470	.d5ba		fd 02 03	sbc $0302,x	                sbc vduv+2,x
4471	.d5bd		85 de		sta $de		                sta ZTEMPC
4472	.d5bf		b9 03 03	lda $0303,y	                lda vduv+3,y
4473	.d5c2		fd 03 03	sbc $0303,x	                sbc vduv+3,x
4474	.d5c5		30 09		bmi $d5d0	                bmi exchangeXAndY           ;taken if PX.y>PY.y
4475	.d5c7		05 de		ora $de		                ora ZTEMPC
4476	.d5c9		d0 09		bne $d5d4	                bne rtsD5D5                  ;taken if PX.y<PY.y

4478							;-------------------------------------------------------------------------
4479							;
4480							; Sort words by value.
4481							;
4482							; entry:
4483							;
4484							; X = VDU variable offset of word A
4485							;
4486							; Y = VDU variable offset of word B
4487							;
4488							; exit:
4489							;
4490							; X = offset of lesser value
4491							;
4492							; Y = offset of greater value
4493							;
4494	.d5cb						sortVDUVariableWords:
4495	.d5cb		20 d5 d5	jsr $d5d5	                jsr compareVDUVariableWords
4496	.d5ce		10 04		bpl $d5d4	                bpl rtsD5D5
4497	.d5d0						exchangeXAndY:
4498	.d5d0		8a		txa		                txa
4499	.d5d1		5a		phy		                phy
4500	.d5d2		fa		plx		                plx
4501	.d5d3		a8		tay		                tay
4502	.d5d4						rtsD5D5:
4503	.d5d4		60		rts		                rts

4505							;-------------------------------------------------------------------------
4506							;
4507							; Compare 2 16-bit VDU variable values.
4508							;
4509							; entry:
4510							;
4511							; X = offset of one variable
4512							;
4513							; Y = offset of the other variable
4514							;
4515							; exit:
4516							;
4517							; N=1 if X>Y
4518							;
4519	.d5d5						compareVDUVariableWords:
4520	.d5d5		b9 00 03	lda $0300,y	                lda vduv+0,y
4521	.d5d8		dd 00 03	cmp $0300,x	                cmp vduv+0,x
4522	.d5db		b9 01 03	lda $0301,y	                lda vduv+1,y
4523	.d5de		fd 01 03	sbc $0301,x	                sbc vduv+1,x
4524	.d5e1		60		rts		                rts

4526							;-------------------------------------------------------------------------

4528	.d5e2						LD5E3:
4529	.d5e2		ee 47 88	inc $8847	                inc L8847
4530	.d5e5						LD5E6:
4531	.d5e5		ad 47 88	lda $8847	                lda L8847
4532	.d5e8		d0 0f		bne $d5f9	                bne LD5FA
4533	.d5ea		ad 32 88	lda $8832	                lda L8832
4534	.d5ed		0d 33 88	ora $8833	                ora L8833
4535	.d5f0		f0 f0		beq $d5e2	                beq LD5E3
4536	.d5f2		a2 00		ldx #$00	                ldx #$00
4537	.d5f4		20 43 d6	jsr $d643	                jsr LD644
4538	.d5f7		10 49		bpl $d642	                bpl LD643
4539	.d5f9						LD5FA:
4540	.d5f9		a2 02		ldx #$02	                ldx #$02
4541	.d5fb		20 43 d6	jsr $d643	                jsr LD644
4542	.d5fe		10 42		bpl $d642	                bpl LD643
4543	.d600		a2 00		ldx #$00	                ldx #$00
4544	.d602		20 09 d6	jsr $d609	                jsr LD60A
4545	.d605		10 3b		bpl $d642	                bpl LD643
4546	.d607		a2 02		ldx #$02	                ldx #$02
4547	.d609						LD60A:
4548	.d609		bd 30 88	lda $8830,x	                lda L8830,x
4549	.d60c		d0 03		bne $d611	                bne LD612
4550	.d60e		de 31 88	dec $8831,x	                dec L8831,x
4551	.d611						LD612:
4552	.d611		de 30 88	dec $8830,x	                dec L8830,x
4553	.d614		8a		txa		                txa
4554	.d615		4a		lsr a		                lsr a
4555	.d616		1a		inc a		                inc a
4556	.d617		2c 46 88	bit $8846	                bit L8846
4557	.d61a		f0 03		beq $d61f	                beq LD620
4558	.d61c		20 1f d6	jsr $d61f	                jsr LD620
4559	.d61f						LD620:
4560	.d61f		20 35 d6	jsr $d635	                jsr LD636
4561	.d622		18		clc		                clc
4562	.d623		ad 40 88	lda $8840	                lda L8840
4563	.d626		7d 34 88	adc $8834,x	                adc L8834,x
4564	.d629		8d 40 88	sta $8840	                sta L8840
4565	.d62c		ad 41 88	lda $8841	                lda L8841
4566	.d62f		7d 35 88	adc $8835,x	                adc L8835,x
4567	.d632		8d 41 88	sta $8841	                sta L8841
4568	.d635						LD636:
4569	.d635		08		php		                php
4570	.d636		bd 34 88	lda $8834,x	                lda L8834,x
4571	.d639		d0 03		bne $d63e	                bne LD63F
4572	.d63b		de 35 88	dec $8835,x	                dec L8835,x
4573	.d63e						LD63F:
4574	.d63e		de 34 88	dec $8834,x	                dec L8834,x
4575	.d641		28		plp		                plp
4576	.d642						LD643:
4577	.d642		60		rts		                rts

4579	.d643						LD644:
4580	.d643		fe 30 88	inc $8830,x	                inc L8830,x
4581	.d646		d0 03		bne $d64b	                bne LD64C
4582	.d648		fe 31 88	inc $8831,x	                inc L8831,x
4583	.d64b						LD64C:
4584	.d64b		8a		txa		                txa
4585	.d64c		4a		lsr a		                lsr a
4586	.d64d		1a		inc a		                inc a
4587	.d64e		2c 46 88	bit $8846	                bit L8846
4588	.d651		f0 03		beq $d656	                beq LD657
4589	.d653		20 56 d6	jsr $d656	                jsr LD657
4590	.d656						LD657:
4591	.d656		20 6c d6	jsr $d66c	                jsr LD66D
4592	.d659		38		sec		                sec
4593	.d65a		ad 40 88	lda $8840	                lda L8840
4594	.d65d		fd 34 88	sbc $8834,x	                sbc L8834,x
4595	.d660		8d 40 88	sta $8840	                sta L8840
4596	.d663		ad 41 88	lda $8841	                lda L8841
4597	.d666		fd 35 88	sbc $8835,x	                sbc L8835,x
4598	.d669		8d 41 88	sta $8841	                sta L8841
4599	.d66c						LD66D:
4600	.d66c		08		php		                php
4601	.d66d		fe 34 88	inc $8834,x	                inc L8834,x
4602	.d670		d0 03		bne $d675	                bne LD676
4603	.d672		fe 35 88	inc $8835,x	                inc L8835,x
4604	.d675						LD676:
4605	.d675		28		plp		                plp
4606	.d676		60		rts		                rts

4608	.d677						LD678:
4609	.d677		48		pha		                pha
4610	.d678		38		sec		                sec
4611	.d679		b9 00 03	lda $0300,y	                lda $0300,y
4612	.d67c		fd 00 03	sbc $0300,x	                sbc $0300,x
4613	.d67f		48		pha		                pha
4614	.d680		b9 01 03	lda $0301,y	                lda $0301,y
4615	.d683		fd 01 03	sbc $0301,x	                sbc $0301,x
4616	.d686		7a		ply		                ply
4617	.d687		c9 80		cmp #$80	                cmp #$80
4618	.d689		90 03		bcc $d68e	                bcc LD68F
4619	.d68b		20 2e c9	jsr $c92e	                jsr negateAY
4620	.d68e						LD68F:
4621	.d68e		fa		plx		                plx
4622	.d68f		9d 01 03	sta $0301,x	                sta $0301,x
4623	.d692		98		tya		                tya
4624	.d693		9d 00 03	sta $0300,x	                sta $0300,x
4625	.d696		60		rts		                rts

4627	.d697						LD698:
4628	.d697		a2 37		ldx #$37	                ldx #$37
4629	.d699		20 22 d7	jsr $d722	                jsr LD723
4630	.d69c						LD69D:
4631	.d69c		3c 0a 03	bit $030a,x	                bit $030A,x
4632	.d69f		70 10		bvs $d6b1	                bvs LD6B2
4633	.d6a1		60		rts		                rts

4635	.d6a2						LD6A3:
4636	.d6a2		a2 2c		ldx #$2c	                ldx #$2C
4637	.d6a4		20 22 d7	jsr $d722	                jsr LD723
4638	.d6a7						LD6A8:
4639	.d6a7		3c 0a 03	bit $030a,x	                bit $030A,x
4640	.d6aa		50 05		bvc $d6b1	                bvc LD6B2
4641	.d6ac		60		rts		                rts

4643	.d6ad						LD6AE:
4644	.d6ad		fa		plx		                plx
4645	.d6ae		20 25 d7	jsr $d725	                jsr LD726
4646	.d6b1						LD6B2:
4647	.d6b1		bd 09 03	lda $0309,x	                lda $0309,x
4648	.d6b4		30 10		bmi $d6c6	                bmi LD6C7
4649	.d6b6		a0 03		ldy #$03	                ldy #$03
4650	.d6b8		da		phx		                phx
4651	.d6b9						LD6BA:
4652	.d6b9		bd 00 03	lda $0300,x	                lda $0300,x
4653	.d6bc		dd 1e 88	cmp $881e,x	                cmp L881E,x
4654	.d6bf		d0 ec		bne $d6ad	                bne LD6AE
4655	.d6c1		e8		inx		                inx
4656	.d6c2		88		dey		                dey
4657	.d6c3		10 f4		bpl $d6b9	                bpl LD6BA
4658	.d6c5		fa		plx		                plx
4659	.d6c6						LD6C7:
4660	.d6c6		60		rts		                rts

4662	.d6c7						LD6C8:
4663	.d6c7		20 fc d6	jsr $d6fc	                jsr LD6FD
4664	.d6ca		bd 0a 03	lda $030a,x	                lda $030A,x
4665	.d6cd		0a		asl a		                asl a
4666	.d6ce		0a		asl a		                asl a
4667	.d6cf		bd 0a 03	lda $030a,x	                lda $030A,x
4668	.d6d2		6a		ror a		                ror a
4669	.d6d3		85 da		sta $da		                sta $DA
4670	.d6d5		18		clc		                clc
4671	.d6d6		10 0f		bpl $d6e7	                bpl LD6E8
4672	.d6d8		bd 02 03	lda $0302,x	                lda $0302,x
4673	.d6db		ed 04 03	sbc $0304	                sbc $0304
4674	.d6de		a8		tay		                tay
4675	.d6df		bd 03 03	lda $0303,x	                lda $0303,x
4676	.d6e2		ed 05 03	sbc $0305	                sbc $0305
4677	.d6e5		80 0d		bra $d6f4	                bra LD6F5

4679	.d6e7						LD6E8:
4680	.d6e7		ad 00 03	lda $0300	                lda $0300
4681	.d6ea		fd 02 03	sbc $0302,x	                sbc $0302,x
4682	.d6ed		a8		tay		                tay
4683	.d6ee		ad 01 03	lda $0301	                lda $0301
4684	.d6f1		fd 03 03	sbc $0303,x	                sbc $0303,x
4685	.d6f4						LD6F5:
4686	.d6f4		20 a3 d7	jsr $d7a3	                jsr LD7A4
4687	.d6f7		20 fc d6	jsr $d6fc	                jsr LD6FD
4688	.d6fa		80 58		bra $d754	                bra LD755

4690	.d6fc						LD6FD:
4691	.d6fc		8a		txa		                txa
4692	.d6fd		1a		inc a		                inc a
4693	.d6fe		48		pha		                pha
4694	.d6ff		1a		inc a		                inc a
4695	.d700		a8		tay		                tay
4696	.d701		20 b4 e2	jsr $e2b4	                jsr exchangeTwoVDUBytes
4697	.d704		e8		inx		                inx
4698	.d705		e8		inx		                inx
4699	.d706		c8		iny		                iny
4700	.d707		c8		iny		                iny
4701	.d708		20 b4 e2	jsr $e2b4	                jsr exchangeTwoVDUBytes
4702	.d70b		fa		plx		                plx
4703	.d70c		20 10 d7	jsr $d710	                jsr LD711
4704	.d70f		ca		dex		                dex
4705	.d710						LD711:
4706	.d710		bd 08 03	lda $0308,x	                lda $0308,x
4707	.d713		49 ff		eor #$ff	                eor #$FF
4708	.d715		9d 08 03	sta $0308,x	                sta $0308,x
4709	.d718		60		rts		                rts

4711	.d719						LD71A:
4712	.d719		20 25 d7	jsr $d725	                jsr LD726
4713	.d71c						LD71D:
4714	.d71c		bd 09 03	lda $0309,x	                lda $0309,x
4715	.d71f		10 f8		bpl $d719	                bpl LD71A
4716	.d721		60		rts		                rts

4718	.d722						LD723:
4719	.d722		20 1c d7	jsr $d71c	                jsr LD71D
4720	.d725						LD726:
4721	.d725		bd 09 03	lda $0309,x	                lda $0309,x
4722	.d728		10 2a		bpl $d754	                bpl LD755
4723	.d72a						LD72B:
4724	.d72a		18		clc		                clc
4725	.d72b		bd 08 03	lda $0308,x	                lda $0308,x
4726	.d72e		7d 04 03	adc $0304,x	                adc $0304,x
4727	.d731		9d 08 03	sta $0308,x	                sta $0308,x
4728	.d734		bd 09 03	lda $0309,x	                lda $0309,x
4729	.d737		7d 05 03	adc $0305,x	                adc $0305,x
4730	.d73a		9d 09 03	sta $0309,x	                sta $0309,x
4731	.d73d		30 03		bmi $d742	                bmi LD743
4732	.d73f		20 54 d7	jsr $d754	                jsr LD755
4733	.d742						LD743:
4734	.d742		da		phx		                phx
4735	.d743		e8		inx		                inx
4736	.d744		e8		inx		                inx
4737	.d745		3c 08 03	bit $0308,x	                bit $0308,x
4738	.d748		30 23		bmi $d76d	                bmi LD76E
4739	.d74a						LD74B:
4740	.d74a		fe 00 03	inc $0300,x	                inc $0300,x
4741	.d74d		d0 03		bne $d752	                bne LD753
4742	.d74f		fe 01 03	inc $0301,x	                inc $0301,x
4743	.d752						LD753:
4744	.d752		fa		plx		                plx
4745	.d753		60		rts		                rts

4747	.d754						LD755:
4748	.d754		38		sec		                sec
4749	.d755		bd 08 03	lda $0308,x	                lda $0308,x
4750	.d758		fd 06 03	sbc $0306,x	                sbc $0306,x
4751	.d75b		9d 08 03	sta $0308,x	                sta $0308,x
4752	.d75e		bd 09 03	lda $0309,x	                lda $0309,x
4753	.d761		fd 07 03	sbc $0307,x	                sbc $0307,x
4754	.d764		9d 09 03	sta $0309,x	                sta $0309,x
4755	.d767		da		phx		                phx
4756	.d768		3c 0a 03	bit $030a,x	                bit $030A,x
4757	.d76b		50 dd		bvc $d74a	                bvc LD74B
4758	.d76d						LD76E:
4759	.d76d		bd 00 03	lda $0300,x	                lda $0300,x
4760	.d770		d0 03		bne $d775	                bne LD776
4761	.d772		de 01 03	dec $0301,x	                dec $0301,x
4762	.d775						LD776:
4763	.d775		de 00 03	dec $0300,x	                dec $0300,x
4764	.d778		fa		plx		                plx
4765	.d779		60		rts		                rts

4767	.d77a						LD77B:
4768	.d77a		18		clc		                clc
4769	.d77b		bd 0a 03	lda $030a,x	                lda $030A,x
4770	.d77e		85 da		sta $da		                sta $DA
4771	.d780		10 0f		bpl $d791	                bpl LD792
4772	.d782		bd 02 03	lda $0302,x	                lda $0302,x
4773	.d785		ed 06 03	sbc $0306	                sbc $0306
4774	.d788		a8		tay		                tay
4775	.d789		bd 03 03	lda $0303,x	                lda $0303,x
4776	.d78c		ed 07 03	sbc $0307	                sbc $0307
4777	.d78f		80 0d		bra $d79e	                bra LD79F

4779	.d791						LD792:
4780	.d791		ad 02 03	lda $0302	                lda $0302
4781	.d794		fd 02 03	sbc $0302,x	                sbc $0302,x
4782	.d797		a8		tay		                tay
4783	.d798		ad 03 03	lda $0303	                lda $0303
4784	.d79b		fd 03 03	sbc $0303,x	                sbc $0303,x
4785	.d79e						LD79F:
4786	.d79e		20 a3 d7	jsr $d7a3	                jsr LD7A4
4787	.d7a1		80 87		bra $d72a	                bra LD72B

4789	.d7a3						LD7A4:
4790	.d7a3		84 de		sty $de		                sty $DE
4791	.d7a5		85 df		sta $df		                sta $DF
4792	.d7a7		bd 02 03	lda $0302,x	                lda $0302,x
4793	.d7aa		bc 03 03	ldy $0303,x	                ldy $0303,x
4794	.d7ad		06 da		asl $da		                asl $DA
4795	.d7af		b0 0a		bcs $d7bb	                bcs LD7BC
4796	.d7b1		65 de		adc $de		                adc $DE
4797	.d7b3		9d 02 03	sta $0302,x	                sta $0302,x
4798	.d7b6		98		tya		                tya
4799	.d7b7		65 df		adc $df		                adc $DF
4800	.d7b9		80 08		bra $d7c3	                bra LD7C4

4802	.d7bb						LD7BC:
4803	.d7bb		e5 de		sbc $de		                sbc $DE
4804	.d7bd		9d 02 03	sta $0302,x	                sta $0302,x
4805	.d7c0		98		tya		                tya
4806	.d7c1		e5 df		sbc $df		                sbc $DF
4807	.d7c3						LD7C4:
4808	.d7c3		9d 03 03	sta $0303,x	                sta $0303,x
4809	.d7c6		a9 00		lda #$00	                lda #$00
4810	.d7c8		3c 09 03	bit $0309,x	                bit $0309,x
4811	.d7cb		10 01		bpl $d7ce	                bpl LD7CF
4812	.d7cd		3a		dec a		                dec a
4813	.d7ce						LD7CF:
4814	.d7ce		85 dc		sta $dc		                sta $DC
4815	.d7d0		4a		lsr a		                lsr a
4816	.d7d1		85 dd		sta $dd		                sta $DD
4817	.d7d3		a0 10		ldy #$10	                ldy #$10
4818	.d7d5						LD7D6:
4819	.d7d5		a5 dd		lda $dd		                lda $DD
4820	.d7d7		0a		asl a		                asl a
4821	.d7d8		3e 08 03	rol $0308,x	                rol $0308,x
4822	.d7db		3e 09 03	rol $0309,x	                rol $0309,x
4823	.d7de		26 dc		rol $dc		                rol $DC
4824	.d7e0		26 dd		rol $dd		                rol $DD
4825	.d7e2		06 de		asl $de		                asl $DE
4826	.d7e4		26 df		rol $df		                rol $DF
4827	.d7e6		90 19		bcc $d801	                bcc LD802
4828	.d7e8		18		clc		                clc
4829	.d7e9		a5 dc		lda $dc		                lda $DC
4830	.d7eb		7d 04 03	adc $0304,x	                adc $0304,x
4831	.d7ee		85 dc		sta $dc		                sta $DC
4832	.d7f0		a5 dd		lda $dd		                lda $DD
4833	.d7f2		7d 05 03	adc $0305,x	                adc $0305,x
4834	.d7f5		85 dd		sta $dd		                sta $DD
4835	.d7f7		90 08		bcc $d801	                bcc LD802
4836	.d7f9		fe 08 03	inc $0308,x	                inc $0308,x
4837	.d7fc		d0 03		bne $d801	                bne LD802
4838	.d7fe		fe 09 03	inc $0309,x	                inc $0309,x
4839	.d801						LD802:
4840	.d801		88		dey		                dey
4841	.d802		d0 d1		bne $d7d5	                bne LD7D6
4842	.d804		3c 09 03	bit $0309,x	                bit $0309,x
4843	.d807		50 0b		bvc $d814	                bvc LD815
4844	.d809		a5 dc		lda $dc		                lda $DC
4845	.d80b		9d 08 03	sta $0308,x	                sta $0308,x
4846	.d80e		a5 dd		lda $dd		                lda $DD
4847	.d810		9d 09 03	sta $0309,x	                sta $0309,x
4848	.d813		60		rts		                rts

4850	.d814						LD815:
4851	.d814		a0 10		ldy #$10	                ldy #$10
4852	.d816						LD817:
4853	.d816		26 dc		rol $dc		                rol $DC
4854	.d818		26 dd		rol $dd		                rol $DD
4855	.d81a		3e 08 03	rol $0308,x	                rol $0308,x
4856	.d81d		3e 09 03	rol $0309,x	                rol $0309,x
4857	.d820		38		sec		                sec
4858	.d821		bd 08 03	lda $0308,x	                lda $0308,x
4859	.d824		fd 06 03	sbc $0306,x	                sbc $0306,x
4860	.d827		85 de		sta $de		                sta $DE
4861	.d829		bd 09 03	lda $0309,x	                lda $0309,x
4862	.d82c		fd 07 03	sbc $0307,x	                sbc $0307,x
4863	.d82f		90 08		bcc $d839	                bcc LD83A
4864	.d831		9d 09 03	sta $0309,x	                sta $0309,x
4865	.d834		a5 de		lda $de		                lda $DE
4866	.d836		9d 08 03	sta $0308,x	                sta $0308,x
4867	.d839						LD83A:
4868	.d839		88		dey		                dey
4869	.d83a		d0 da		bne $d816	                bne LD817
4870	.d83c		26 dc		rol $dc		                rol $DC
4871	.d83e		26 dd		rol $dd		                rol $DD
4872	.d840		38		sec		                sec
4873	.d841		bd 08 03	lda $0308,x	                lda $0308,x
4874	.d844		fd 06 03	sbc $0306,x	                sbc $0306,x
4875	.d847		9d 08 03	sta $0308,x	                sta $0308,x
4876	.d84a		bd 09 03	lda $0309,x	                lda $0309,x
4877	.d84d		fd 07 03	sbc $0307,x	                sbc $0307,x
4878	.d850		9d 09 03	sta $0309,x	                sta $0309,x
4879	.d853		bd 00 03	lda $0300,x	                lda $0300,x
4880	.d856		bc 01 03	ldy $0301,x	                ldy $0301,x
4881	.d859		06 da		asl $da		                asl $DA
4882	.d85b		b0 0b		bcs $d868	                bcs LD869
4883	.d85d		38		sec		                sec
4884	.d85e		65 dc		adc $dc		                adc $DC
4885	.d860		9d 00 03	sta $0300,x	                sta $0300,x
4886	.d863		98		tya		                tya
4887	.d864		65 dd		adc $dd		                adc $DD
4888	.d866		80 09		bra $d871	                bra LD872

4890	.d868						LD869:
4891	.d868		18		clc		                clc
4892	.d869		e5 dc		sbc $dc		                sbc $DC
4893	.d86b		9d 00 03	sta $0300,x	                sta $0300,x
4894	.d86e		98		tya		                tya
4895	.d86f		e5 dd		sbc $dd		                sbc $DD
4896	.d871						LD872:
4897	.d871		9d 01 03	sta $0301,x	                sta $0301,x
4898	.d874						LD875:
4899	.d874		60		rts		                rts

4901	.d875						LD876:
4902	.d875		0e 32 03	asl $0332	                asl $0332
4903	.d878		a0 2c		ldy #$2c	                ldy #$2C
4904	.d87a		20 16 c9	jsr $c916	                jsr copyLastFourVDUQueueBytes
4905	.d87d		06 db		asl $db		                asl $DB
4906	.d87f		90 0d		bcc $d88e	                bcc LD88F
4907	.d881		20 25 da	jsr $da25	                jsr LDA26
4908	.d884		f0 ee		beq $d874	                beq LD875
4909	.d886		a2 00		ldx #$00	                ldx #$00
4910	.d888		ad 32 03	lda $0332	                lda $0332
4911	.d88b		20 0e da	jsr $da0e	                jsr LDA0F
4912	.d88e						LD88F:
4913	.d88e		24 db		bit $db		                bit $DB
4914	.d890		50 0f		bvc $d8a1	                bvc LD8A2
4915	.d892		20 25 da	jsr $da25	                jsr LDA26
4916	.d895		f0 dd		beq $d874	                beq LD875
4917	.d897		a2 04		ldx #$04	                ldx #$04
4918	.d899		ad 32 03	lda $0332	                lda $0332
4919	.d89c		49 80		eor #$80	                eor #$80
4920	.d89e		20 0e da	jsr $da0e	                jsr LDA0F
4921	.d8a1						LD8A2:
4922	.d8a1		a2 28		ldx #$28	                ldx #$28
4923	.d8a3		a0 2c		ldy #$2c	                ldy #$2C
4924	.d8a5		4c e7 da	jmp $dae7	                jmp LDAE8

4926	.d8a8						LD8A9:
4927	.d8a8		0a		asl a		                asl a
4928	.d8a9		0a		asl a		                asl a
4929	.d8aa		85 db		sta $db		                sta $DB
4930	.d8ac		29 c0		and #$c0	                and #$C0
4931	.d8ae		49 40		eor #$40	                eor #$40
4932	.d8b0		d0 06		bne $d8b8	                bne LD8B9
4933	.d8b2		ad 67 03	lda $0367	                lda $0367
4934	.d8b5		8d 68 03	sta $0368	                sta $0368
4935	.d8b8						LD8B9:
4936	.d8b8		20 a5 d1	jsr $d1a5	                jsr LD1A6
4937	.d8bb		85 dc		sta $dc		                sta $DC
4938	.d8bd		f0 04		beq $d8c3	                beq LD8C4
4939	.d8bf		a9 80		lda #$80	                lda #$80
4940	.d8c1		14 db		trb $db		                trb $DB
4941	.d8c3						LD8C4:
4942	.d8c3		a2 20		ldx #$20	                ldx #$20
4943	.d8c5		20 a7 d1	jsr $d1a7	                jsr windEntryPoint
4944	.d8c8		85 e0		sta $e0		                sta $E0
4945	.d8ca		f0 0a		beq $d8d6	                beq LD8D7
4946	.d8cc		aa		tax		                tax
4947	.d8cd		a9 20		lda #$20	                lda #$20
4948	.d8cf		14 db		trb $db		                trb $DB
4949	.d8d1		8a		txa		                txa
4950	.d8d2		24 dc		bit $dc		                bit $DC
4951	.d8d4						LD8D5:
4952	.d8d4		d0 9e		bne $d874	                bne LD875
4953	.d8d6						LD8D7:
4954	.d8d6		a0 24		ldy #$24	                ldy #$24
4955	.d8d8		a9 20		lda #$20	                lda #$20
4956	.d8da		a2 28		ldx #$28	                ldx #$28
4957	.d8dc		20 24 9b	jsr $9b24	                jsr L9B09
4958	.d8df		24 db		bit $db		                bit $DB
4959	.d8e1		70 08		bvs $d8eb	                bvs LD8EC
4960	.d8e3		ad 2e 03	lda $032e	                lda $032E
4961	.d8e6		0d 2f 03	ora $032f	                ora $032F
4962	.d8e9		f0 8a		beq $d875	                beq LD876
4963	.d8eb						LD8EC:
4964	.d8eb		a5 dc		lda $dc		                lda $DC
4965	.d8ed		89 0c		bit #$0c	                bit #$0C
4966	.d8ef		f0 0e		beq $d8ff	                beq LD900
4967	.d8f1		a2 28		ldx #$28	                ldx #$28
4968	.d8f3		20 7a d7	jsr $d77a	                jsr LD77B
4969	.d8f6		a2 28		ldx #$28	                ldx #$28
4970	.d8f8		20 a7 d1	jsr $d1a7	                jsr windEntryPoint
4971	.d8fb		24 e0		bit $e0		                bit $E0
4972	.d8fd		d0 d5		bne $d8d4	                bne LD8D5
4973	.d8ff						LD900:
4974	.d8ff		89 03		bit #$03	                bit #$03
4975	.d901		f0 0a		beq $d90d	                beq LD90E
4976	.d903		a2 28		ldx #$28	                ldx #$28
4977	.d905		20 c7 d6	jsr $d6c7	                jsr LD6C8
4978	.d908		a2 28		ldx #$28	                ldx #$28
4979	.d90a		20 a7 d1	jsr $d1a7	                jsr windEntryPoint
4980	.d90d						LD90E:
4981	.d90d		a8		tay		                tay
4982	.d90e		d0 c4		bne $d8d4	                bne LD8D5
4983	.d910		a0 20		ldy #$20	                ldy #$20
4984	.d912		a2 22		ldx #$22	                ldx #$22
4985	.d914		a5 e0		lda $e0		                lda $E0
4986	.d916		f0 0f		beq $d927	                beq LD928
4987	.d918		a0 04		ldy #$04	                ldy #$04
4988	.d91a		a2 06		ldx #$06	                ldx #$06
4989	.d91c		2c 32 03	bit $0332	                bit $0332
4990	.d91f		10 02		bpl $d923	                bpl LD924
4991	.d921		a2 02		ldx #$02	                ldx #$02
4992	.d923						LD924:
4993	.d923		50 02		bvc $d927	                bvc LD928
4994	.d925		a0 00		ldy #$00	                ldy #$00
4995	.d927						LD928:
4996	.d927		18		clc		                clc
4997	.d928		bd 00 03	lda $0300,x	                lda $0300,x
4998	.d92b		ed 2a 03	sbc $032a	                sbc $032A
4999	.d92e		90 03		bcc $d933	                bcc LD934
5000	.d930		1a		inc a		                inc a
5001	.d931		49 ff		eor #$ff	                eor #$FF
5002	.d933						LD934:
5003	.d933		85 dc		sta $dc		                sta $DC
5004	.d935		18		clc		                clc
5005	.d936		b9 00 03	lda $0300,y	                lda $0300,y
5006	.d939		ed 28 03	sbc $0328	                sbc $0328
5007	.d93c		aa		tax		                tax
5008	.d93d		b9 01 03	lda $0301,y	                lda $0301,y
5009	.d940		ed 29 03	sbc $0329	                sbc $0329
5010	.d943		30 0c		bmi $d951	                bmi LD952
5011	.d945		e8		inx		                inx
5012	.d946		d0 01		bne $d949	                bne LD94A
5013	.d948		1a		inc a		                inc a
5014	.d949						LD94A:
5015	.d949		49 ff		eor #$ff	                eor #$FF
5016	.d94b		a8		tay		                tay
5017	.d94c		8a		txa		                txa
5018	.d94d		49 ff		eor #$ff	                eor #$FF
5019	.d94f		aa		tax		                tax
5020	.d950		98		tya		                tya
5021	.d951						LD952:
5022	.d951		85 dd		sta $dd		                sta $DD
5023	.d953		86 e0		stx $e0		                stx $E0
5024	.d955		a2 28		ldx #$28	                ldx #$28
5025	.d957		20 41 df	jsr $df41	                jsr LDF41
5026	.d95a		06 db		asl $db		                asl $DB
5027	.d95c		b0 2a		bcs $d988	                bcs LD989
5028	.d95e						LD95F:
5029	.d95e		24 db		bit $db		                bit $DB
5030	.d960		50 0b		bvc $d96d	                bvc LD96E
5031	.d962		a5 e0		lda $e0		                lda $E0
5032	.d964		25 dc		and $dc		                and $DC
5033	.d966		25 dd		and $dd		                and $DD
5034	.d968		1a		inc a		                inc a
5035	.d969		f0 34		beq $d99f	                beq LD9A0
5036	.d96b		24 db		bit $db		                bit $DB
5037	.d96d						LD96E:
5038	.d96d		10 09		bpl $d978	                bpl LD979
5039	.d96f		ad 68 03	lda $0368	                lda $0368
5040	.d972		0a		asl a		                asl a
5041	.d973		2e 68 03	rol $0368	                rol $0368
5042	.d976		90 10		bcc $d988	                bcc LD989
5043	.d978						LD979:
5044	.d978		a5 d1		lda $d1		                lda ZMASK
5045	.d97a		25 d4		and $d4		                and ZGORA
5046	.d97c		11 d6		ora ($d6),y	                ora (ZMEMG),y
5047	.d97e		85 da		sta $da		                sta $DA
5048	.d980		a5 d1		lda $d1		                lda ZMASK
5049	.d982		25 d5		and $d5		                and ZGEOR
5050	.d984		45 da		eor $da		                eor $DA
5051	.d986		91 d6		sta ($d6),y	                sta (ZMEMG),y
5052	.d988						LD989:
5053	.d988		ad 31 03	lda $0331	                lda $0331
5054	.d98b		10 4e		bpl $d9db	                bpl LD9DC
5055	.d98d		e6 dc		inc $dc		                inc $DC
5056	.d98f		f0 0e		beq $d99f	                beq LD9A0
5057	.d991		2c 32 03	bit $0332	                bit $0332
5058	.d994		30 0a		bmi $d9a0	                bmi LD9A1
5059	.d996		88		dey		                dey
5060	.d997		ca		dex		                dex
5061	.d998		10 24		bpl $d9be	                bpl LD9BF
5062	.d99a		20 4b da	jsr $da4b	                jsr LDA4C
5063	.d99d		80 1f		bra $d9be	                bra LD9BF

5065	.d99f						LD9A0:
5066	.d99f		60		rts		                rts

5068	.d9a0						LD9A1:
5069	.d9a0		c8		iny		                iny
5070	.d9a1		e8		inx		                inx
5071	.d9a2		e0 08		cpx #$08	                cpx #$08
5072	.d9a4		d0 18		bne $d9be	                bne LD9BF
5073	.d9a6		38		sec		                sec
5074	.d9a7		98		tya		                tya
5075	.d9a8		e9 08		sbc #$08	                sbc #$08
5076	.d9aa		18		clc		                clc
5077	.d9ab		6d 52 03	adc $0352	                adc $0352
5078	.d9ae		a8		tay		                tay
5079	.d9af		a5 d7		lda $d7		                lda ZMEMG+1
5080	.d9b1		6d 53 03	adc $0353	                adc $0353
5081	.d9b4		10 04		bpl $d9ba	                bpl LD9BB
5082	.d9b6		38		sec		                sec
5083	.d9b7		ed 54 03	sbc $0354	                sbc $0354
5084	.d9ba						LD9BB:
5085	.d9ba		85 d7		sta $d7		                sta ZMEMG+1
5086	.d9bc		a2 00		ldx #$00	                ldx #$00
5087	.d9be						LD9BF:
5088	.d9be		ad 69 03	lda $0369	                lda $0369
5089	.d9c1		f0 03		beq $d9c6	                beq LD9C7
5090	.d9c3		20 7b da	jsr $da7b	                jsr setupColourMasks
5091	.d9c6						LD9C7:
5092	.d9c6		18		clc		                clc
5093	.d9c7		ad 30 03	lda $0330	                lda $0330
5094	.d9ca		6d 2c 03	adc $032c	                adc $032C
5095	.d9cd		8d 30 03	sta $0330	                sta $0330
5096	.d9d0		ad 31 03	lda $0331	                lda $0331
5097	.d9d3		6d 2d 03	adc $032d	                adc $032D
5098	.d9d6		8d 31 03	sta $0331	                sta $0331
5099	.d9d9		30 83		bmi $d95e	                bmi LD95F
5100	.d9db						LD9DC:
5101	.d9db		e6 e0		inc $e0		                inc $E0
5102	.d9dd		d0 04		bne $d9e3	                bne LD9E4
5103	.d9df		e6 dd		inc $dd		                inc $DD
5104	.d9e1		f0 bc		beq $d99f	                beq LD9A0
5105	.d9e3						LD9E4:
5106	.d9e3		2c 32 03	bit $0332	                bit $0332
5107	.d9e6		70 09		bvs $d9f1	                bvs LD9F2
5108	.d9e8		46 d1		lsr $d1		                lsr ZMASK
5109	.d9ea		90 0c		bcc $d9f8	                bcc LD9F9
5110	.d9ec		20 66 da	jsr $da66	                jsr nextColumnAndResetMask
5111	.d9ef		80 07		bra $d9f8	                bra LD9F9

5113	.d9f1						LD9F2:
5114	.d9f1		06 d1		asl $d1		                asl ZMASK
5115	.d9f3		90 03		bcc $d9f8	                bcc LD9F9
5116	.d9f5		20 33 da	jsr $da33	                jsr previousColumnAndResetMask
5117	.d9f8						LD9F9:
5118	.d9f8		38		sec		                sec
5119	.d9f9		ad 30 03	lda $0330	                lda $0330
5120	.d9fc		ed 2e 03	sbc $032e	                sbc $032E
5121	.d9ff		8d 30 03	sta $0330	                sta $0330
5122	.da02		ad 31 03	lda $0331	                lda $0331
5123	.da05		ed 2f 03	sbc $032f	                sbc $032F
5124	.da08		8d 31 03	sta $0331	                sta $0331
5125	.da0b		4c 5e d9	jmp $d95e	                jmp LD95F

5127	.da0e						LDA0F:
5128	.da0e		30 09		bmi $da19	                bmi LDA1A
5129	.da10		fe 28 03	inc $0328,x	                inc $0328,x
5130	.da13		d0 0f		bne $da24	                bne LDA25
5131	.da15		fe 29 03	inc $0329,x	                inc $0329,x
5132	.da18		60		rts		                rts

5134	.da19						LDA1A:
5135	.da19		bd 28 03	lda $0328,x	                lda $0328,x
5136	.da1c		d0 03		bne $da21	                bne LDA22
5137	.da1e		de 29 03	dec $0329,x	                dec $0329,x
5138	.da21						LDA22:
5139	.da21		de 28 03	dec $0328,x	                dec $0328,x
5140	.da24						LDA25:
5141	.da24		60		rts		                rts

5143	.da25						LDA26:
5144	.da25		a0 04		ldy #$04	                ldy #$04
5145	.da27						LDA28:
5146	.da27		b9 27 03	lda $0327,y	                lda $0327,y
5147	.da2a		d9 2b 03	cmp $032b,y	                cmp $032B,y
5148	.da2d		d0 03		bne $da32	                bne LDA33
5149	.da2f		88		dey		                dey
5150	.da30		d0 f5		bne $da27	                bne LDA28
5151	.da32						LDA33:
5152	.da32		60		rts		                rts

5154							;-------------------------------------------------------------------------

5156	.da33						previousColumnAndResetMask:
5157	.da33		ad 63 03	lda $0363	                lda vduv.colourMaskRight
5158	.da36		85 d1		sta $d1		                sta ZMASK
5159	.da38		98		tya		                tya
5160	.da39		e9 08		sbc #$08	                sbc #$08
5161	.da3b		a8		tay		                tay
5162	.da3c		b0 0c		bcs $da4a	                bcs rtsDA4B
5163	.da3e		a5 d7		lda $d7		                lda ZMEMG+1
5164	.da40		3a		dec a		                dec a
5165	.da41		cd 4e 03	cmp $034e	                cmp vduv.startScreenAddressHighByte
5166	.da44		b0 02		bcs $da48	                bcs +
5167	.da46		a9 7f		lda #$7f	                lda #$7F
5168	.da48						+
5169	.da48		85 d7		sta $d7		                sta ZMEMG+1
5170	.da4a						rtsDA4B:
5171	.da4a		60		rts		                rts

5173							;-------------------------------------------------------------------------

5175	.da4b						LDA4C:
5176	.da4b		18		clc		                clc
5177	.da4c		98		tya		                tya
5178	.da4d		69 08		adc #$08	                adc #$08
5179	.da4f		38		sec		                sec
5180	.da50		ed 52 03	sbc $0352	                sbc $0352
5181	.da53		a8		tay		                tay
5182	.da54		a5 d7		lda $d7		                lda ZMEMG+1
5183	.da56		ed 53 03	sbc $0353	                sbc $0353
5184	.da59		cd 4e 03	cmp $034e	                cmp $034E
5185	.da5c		b0 03		bcs $da61	                bcs LDA62
5186	.da5e		6d 54 03	adc $0354	                adc $0354
5187	.da61						LDA62:
5188	.da61		85 d7		sta $d7		                sta ZMEMG+1
5189	.da63		a2 07		ldx #$07	                ldx #$07
5190	.da65		60		rts		                rts

5192							;-------------------------------------------------------------------------
5193							;
5194	.da66						nextColumnAndResetMask:
5195	.da66		ad 62 03	lda $0362	                lda vduv.colourMaskLeft
5196	.da69		85 d1		sta $d1		                sta ZMASK

5198							;-------------------------------------------------------------------------
5199							;
5200							; Add 8 to (ZMEMG),Y, taking into account screen wrap.
5201							;
5202							; entry:
5203							;
5204							; C=1
5205							;
5206							; (ZMEMG),Y = screen address
5207							;
5208							; exit:
5209							;
5210							; (ZMEMG),Y = new screen address
5211							;
5212	.da6b						nextColumn:
5213	.da6b		98		tya		                tya
5214	.da6c		69 07		adc #$07	                adc #$07
5215	.da6e		a8		tay		                tay
5216	.da6f		90 09		bcc $da7a	                bcc +
5217	.da71		e6 d7		inc $d7		                inc ZMEMG+1
5218	.da73		10 05		bpl $da7a	                bpl +
5219	.da75		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
5220	.da78		85 d7		sta $d7		                sta ZMEMG+1
5221	.da7a						+
5222	.da7a		60		rts		                rts

5224							;-------------------------------------------------------------------------
5225							;
5226							; Set up colour masks, taking into account ECF pattern.
5227							;
5228							; entry:
5229							;
5230							; X = scanline in row, 0-7
5231							;
5232	.da7b						setupColourMasks:
5233	.da7b		da		phx		                phx                          ;save scanline
5234	.da7c		8a		txa		                txa                          ;A=scanline
5235	.da7d		0d 59 03	ora $0359	                ora vduv.graphicsPlotState   ;0-7 if fg, 8-15 if bg
5236	.da80		aa		tax		                tax
5237	.da81		bd 20 88	lda $8820,x	                lda andy.fgECFPattern,x      ;get appropriate ECF byte
5238	.da84		ae 5a 03	ldx $035a	                ldx vduv.graphicsPlotMode
5239	.da87		48		pha		                pha
5240	.da88		1d 46 e1	ora $e146,x	                ora zgoraORTable,x
5241	.da8b		5d 47 e1	eor $e147,x	                eor zgoraEORTable,x
5242	.da8e		85 d4		sta $d4		                sta ZGORA
5243	.da90		68		pla		                pla
5244	.da91		1d 45 e1	ora $e145,x	                ora zgeorORTable,x
5245	.da94		5d 4a e1	eor $e14a,x	                eor zgeorEORTable,x
5246	.da97		85 d5		sta $d5		                sta ZGEOR
5247	.da99		fa		plx		                plx
5248	.da9a		60		rts		                rts

5250							;-------------------------------------------------------------------------

5252	.da9b						LDA9C:
5253	.da9b		b9 01 03	lda $0301,y	                lda $0301,y
5254	.da9e		48		pha		                pha
5255	.da9f		b9 00 03	lda $0300,y	                lda $0300,y
5256	.daa2		48		pha		                pha
5257	.daa3		2d 61 03	and $0361	                and $0361
5258	.daa6		18		clc		                clc
5259	.daa7		6d 61 03	adc $0361	                adc $0361
5260	.daaa		a8		tay		                tay
5261	.daab		b9 30 e1	lda $e130,y	                lda pixelMasks-1,y
5262	.daae		59 22 e1	eor $e122,y	                eor LE120,y
5263	.dab1		85 dc		sta $dc		                sta $DC
5264	.dab3		bd 00 03	lda $0300,x	                lda $0300,x
5265	.dab6		2d 61 03	and $0361	                and $0361
5266	.dab9		6d 61 03	adc $0361	                adc $0361
5267	.dabc		a8		tay		                tay
5268	.dabd		b9 22 e1	lda $e122,y	                lda LE120,y
5269	.dac0		85 d1		sta $d1		                sta ZMASK
5270	.dac2		38		sec		                sec
5271	.dac3		68		pla		                pla
5272	.dac4		0d 61 03	ora $0361	                ora $0361
5273	.dac7		fd 00 03	sbc $0300,x	                sbc $0300,x
5274	.daca		a8		tay		                tay
5275	.dacb		68		pla		                pla
5276	.dacc		fd 01 03	sbc $0301,x	                sbc $0301,x
5277	.dacf		85 dd		sta $dd		                sta $DD
5278	.dad1		98		tya		                tya
5279	.dad2		ac 61 03	ldy $0361	                ldy $0361
5280	.dad5		c0 03		cpy #$03	                cpy #$03
5281	.dad7		f0 05		beq $dade	                beq LDADF
5282	.dad9		90 06		bcc $dae1	                bcc LDAE2
5283	.dadb		46 dd		lsr $dd		                lsr $DD
5284	.dadd		6a		ror a		                ror a
5285	.dade						LDADF:
5286	.dade		46 dd		lsr $dd		                lsr $DD
5287	.dae0		6a		ror a		                ror a
5288	.dae1						LDAE2:
5289	.dae1		4a		lsr a		                lsr a
5290	.dae2						LDAE3:
5291	.dae2		60		rts		                rts

5293	.dae3						LDAE4:                                       ; fillRow?
5294	.dae3		a2 42		ldx #$42	                ldx #$42
5295	.dae5		a0 46		ldy #$46	                ldy #$46
5296	.dae7						LDAE8:                                       ; fillRowInternal?
5297	.dae7		20 cb d5	jsr $d5cb	                jsr sortVDUVariableWords
5298	.daea		86 de		stx $de		                stx $DE
5299	.daec		84 df		sty $df		                sty $DF
5300	.daee		a6 df		ldx $df		                ldx $DF
5301	.daf0		a0 00		ldy #$00	                ldy #$00
5302	.daf2		20 b6 d1	jsr $d1b6	                jsr getOutcodeForAxis
5303	.daf5		f0 07		beq $dafe	                beq LDAFF
5304	.daf7		4a		lsr a		                lsr a
5305	.daf8		f0 e8		beq $dae2	                beq LDAE3
5306	.dafa		a2 04		ldx #$04	                ldx #$04
5307	.dafc		86 df		stx $df		                stx $DF
5308	.dafe						LDAFF:
5309	.dafe		a6 de		ldx $de		                ldx $DE
5310	.db00		20 a7 d1	jsr $d1a7	                jsr windEntryPoint
5311	.db03		4a		lsr a		                lsr a
5312	.db04		d0 dc		bne $dae2	                bne LDAE3
5313	.db06		bd 02 03	lda $0302,x	                lda $0302,x
5314	.db09		90 04		bcc $db0f	                bcc LDB10
5315	.db0b		a2 00		ldx #$00	                ldx #$00
5316	.db0d		86 de		stx $de		                stx $DE
5317	.db0f						LDB10:
5318	.db0f		20 cb de	jsr $decb	                jsr LDECB
5319	.db12		a6 de		ldx $de		                ldx $DE
5320	.db14		a4 df		ldy $df		                ldy $DF
5321	.db16		20 9b da	jsr $da9b	                jsr LDA9C
5322	.db19		aa		tax		                tax
5323	.db1a		ac 1a 03	ldy $031a	                ldy $031A
5324	.db1d		8a		txa		                txa
5325	.db1e		f0 23		beq $db43	                beq LDB44
5326	.db20		20 50 db	jsr $db50	                jsr plbyteEntryPoint
5327	.db23		80 08		bra $db2d	                bra LDB2E

5329	.db25						LDB26:
5330	.db25		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5331	.db27		05 d4		ora $d4		                ora ZGORA
5332	.db29		45 d5		eor $d5		                eor ZGEOR
5333	.db2b		91 d6		sta ($d6),y	                sta (ZMEMG),y
5334	.db2d						LDB2E:
5335	.db2d		98		tya		                tya
5336	.db2e		18		clc		                clc
5337	.db2f		69 08		adc #$08	                adc #$08
5338	.db31		a8		tay		                tay
5339	.db32		90 09		bcc $db3d	                bcc LDB3E
5340	.db34		e6 d7		inc $d7		                inc ZMEMG+1
5341	.db36		10 05		bpl $db3d	                bpl LDB3E
5342	.db38		ad 4e 03	lda $034e	                lda $034E
5343	.db3b		85 d7		sta $d7		                sta ZMEMG+1
5344	.db3d						LDB3E:
5345	.db3d		ca		dex		                dex
5346	.db3e		d0 e5		bne $db25	                bne LDB26
5347	.db40		ca		dex		                dex
5348	.db41		86 d1		stx $d1		                stx ZMASK
5349	.db43						LDB44:
5350	.db43		a5 dc		lda $dc		                lda $DC
5351	.db45		14 d1		trb $d1		                trb ZMASK
5352	.db47		80 07		bra $db50	                bra plbyteEntryPoint

5354							;-------------------------------------------------------------------------
5355							;
5356							; mem mask ora eor | result
5357							; --- ---- --- --- | ------
5358							;  0    0   0   0  |   0
5359							;  0    0   0   1  |   0
5360							;  0    0   1   0  |   0
5361							;  0    0   1   1  |   0
5362							;  0    1   0   0  |   0
5363							;  0    1   0   1  |   1
5364							;  0    1   1   0  |   1
5365							;  0    1   1   1  |   0
5366							;  1    0   0   0  |   1
5367							;  1    0   0   1  |   1
5368							;  1    0   1   0  |   1
5369							;  1    0   1   1  |   1
5370							;  1    1   0   0  |   1
5371							;  1    1   0   1  |   0
5372							;  1    1   1   0  |   1
5373							;  1    1   1   1  |   0
5374							;
5375	.db49						plotPoint:
5376	.db49		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
5377	.db4b						plotPointInternal:
5378	.db4b		20 c3 de	jsr $dec3	                jsr windGADDR
5379	.db4e		d0 10		bne $db60	                bne rtsDB61                  ;taken if point outside window
5380	.db50						plbyteEntryPoint:
5381	.db50		a5 d1		lda $d1		                lda ZMASK
5382	.db52		25 d4		and $d4		                and ZGORA
5383	.db54		11 d6		ora ($d6),y	                ora (ZMEMG),y
5384	.db56		85 da		sta $da		                sta ZTEMP+0
5385	.db58		a5 d5		lda $d5		                lda ZGEOR
5386	.db5a		25 d1		and $d1		                and ZMASK
5387	.db5c		45 da		eor $da		                eor ZTEMP+0
5388	.db5e						oswrscCode:
5389	.db5e		91 d6		sta ($d6),y	                sta (ZMEMG),y
5390	.db60						rtsDB61:
5391	.db60		60		rts		                rts

5393							;-------------------------------------------------------------------------

5395	.db61						LDB62:
5396	.db61		a2 2a		ldx #$2a	                ldx #VDUVariables.workspace._2A
5397	.db63		a0 32		ldy #$32	                ldy #VDUVariables.workspace._32
5398	.db65		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5399	.db68		a2 36		ldx #$36	                ldx #VDUVariables.workspace._36
5400	.db6a		a0 3e		ldy #$3e	                ldy #VDUVariables.workspace._3E
5401	.db6c		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5402	.db6f		a2 2a		ldx #$2a	                ldx #$2A
5403	.db71		20 b4 d1	jsr $d1b4	                jsr getOutcodeForYAxis
5404	.db74		48		pha		                pha
5405	.db75		a2 36		ldx #$36	                ldx #$36
5406	.db77		20 b4 d1	jsr $d1b4	                jsr getOutcodeForYAxis
5407	.db7a		f0 0f		beq $db8b	                beq LDB8C
5408	.db7c		68		pla		                pla
5409	.db7d		d0 05		bne $db84	                bne LDB85
5410	.db7f		ad 45 03	lda $0345	                lda $0345
5411	.db82		f0 01		beq $db85	                beq LDB86
5412	.db84						LDB85:
5413	.db84		60		rts		                rts

5415	.db85						LDB86:
5416	.db85		a2 28		ldx #$28	                ldx #$28
5417	.db87		a0 2c		ldy #$2c	                ldy #$2C
5418	.db89		80 07		bra $db92	                bra LDB93

5420	.db8b						LDB8C:
5421	.db8b		68		pla		                pla
5422	.db8c		f0 07		beq $db95	                beq LDB96
5423	.db8e		a2 34		ldx #$34	                ldx #$34
5424	.db90		a0 38		ldy #$38	                ldy #$38
5425	.db92						LDB93:
5426	.db92		4c e7 da	jmp $dae7	                jmp LDAE8

5428	.db95						LDB96:
5429	.db95		a2 30		ldx #$30	                ldx #$30
5430	.db97		20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
5431	.db9a		2c 47 03	bit $0347	                bit $0347
5432	.db9d		30 09		bmi $dba8	                bmi LDBA9
5433	.db9f		98		tya		                tya
5434	.dba0		38		sec		                sec
5435	.dba1		e9 08		sbc #$08	                sbc #$08
5436	.dba3		a8		tay		                tay
5437	.dba4		b0 02		bcs $dba8	                bcs LDBA9
5438	.dba6		c6 d7		dec $d7		                dec ZMEMG+1
5439	.dba8						LDBA9:
5440	.dba8		ad 44 03	lda $0344	                lda $0344
5441	.dbab		85 dd		sta $dd		                sta $DD
5442	.dbad						LDBAE:
5443	.dbad		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5444	.dbaf		ae 42 03	ldx $0342	                ldx $0342
5445	.dbb2		f0 04		beq $dbb8	                beq LDBB9
5446	.dbb4						LDBB5:
5447	.dbb4		0a		asl a		                asl a
5448	.dbb5		ca		dex		                dex
5449	.dbb6		d0 fc		bne $dbb4	                bne LDBB5
5450	.dbb8						LDBB9:
5451	.dbb8		85 da		sta $da		                sta $DA
5452	.dbba		38		sec		                sec
5453	.dbbb		20 6b da	jsr $da6b	                jsr nextColumn
5454	.dbbe		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5455	.dbc0		ae 43 03	ldx $0343	                ldx $0343
5456	.dbc3		f0 04		beq $dbc9	                beq LDBCA
5457	.dbc5						LDBC6:
5458	.dbc5		4a		lsr a		                lsr a
5459	.dbc6		ca		dex		                dex
5460	.dbc7		d0 fc		bne $dbc5	                bne LDBC6
5461	.dbc9						LDBCA:
5462	.dbc9		45 da		eor $da		                eor $DA
5463	.dbcb		25 e1		and $e1		                and $E1
5464	.dbcd		45 da		eor $da		                eor $DA
5465	.dbcf		a6 dd		ldx $dd		                ldx $DD
5466	.dbd1		9d 30 88	sta $8830,x	                sta L8830,x
5467	.dbd4		c6 dd		dec $dd		                dec $DD
5468	.dbd6		10 d5		bpl $dbad	                bpl LDBAE
5469	.dbd8		a2 34		ldx #$34	                ldx #$34
5470	.dbda		a0 38		ldy #$38	                ldy #$38
5471	.dbdc		20 e7 da	jsr $dae7	                jsr LDAE8
5472	.dbdf		ad 45 03	lda $0345	                lda $0345
5473	.dbe2		d0 03		bne $dbe7	                bne LDBE8
5474	.dbe4		20 85 db	jsr $db85	                jsr LDB86
5475	.dbe7						LDBE8:
5476	.dbe7		a2 3c		ldx #$3c	                ldx #$3C
5477	.dbe9		20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
5478	.dbec		ad 46 03	lda $0346	                lda $0346
5479	.dbef		85 da		sta $da		                sta $DA
5480	.dbf1		ae 44 03	ldx $0344	                ldx $0344
5481	.dbf4		f0 15		beq $dc0b	                beq LDC0C
5482	.dbf6		20 0f dc	jsr $dc0f	                jsr LDC10
5483	.dbf9		a9 ff		lda #$ff	                lda #$FF
5484	.dbfb		85 da		sta $da		                sta $DA
5485	.dbfd		80 05		bra $dc04	                bra LDC05

5487	.dbff						LDC00_code:
5488	.dbff		bd 30 88	lda $8830,x	                lda L8830,x
5489	.dc02		91 d6		sta ($d6),y	                sta (ZMEMG),y
5490	.dc04						LDC05:
5491	.dc04		38		sec		                sec
5492	.dc05		20 6b da	jsr $da6b	                jsr nextColumn
5493	.dc08		ca		dex		                dex
5494	.dc09		d0 f4		bne $dbff	                bne LDC00_code
5495	.dc0b						LDC0C:
5496	.dc0b		a5 e0		lda $e0		                lda $E0
5497	.dc0d		14 da		trb $da		                trb $DA
5498	.dc0f						LDC10:
5499	.dc0f		bd 30 88	lda $8830,x	                lda L8830,x
5500	.dc12		51 d6		eor ($d6),y	                eor (ZMEMG),y
5501	.dc14		25 da		and $da		                and $DA
5502	.dc16		51 d6		eor ($d6),y	                eor (ZMEMG),y
5503	.dc18		91 d6		sta ($d6),y	                sta (ZMEMG),y
5504	.dc1a		60		rts		                rts

5506	.dc1b						LDC1C:
5507	.dc1b		ad 37 03	lda $0337	                lda $0337
5508	.dc1e		1a		inc a		                inc a
5509	.dc1f		cd 36 03	cmp $0336	                cmp $0336
5510	.dc22		f0 22		beq $dc46	                beq LDC47
5511	.dc24		8d 37 03	sta $0337	                sta $0337
5512	.dc27		aa		tax		                tax
5513	.dc28		ad 2e 03	lda $032e	                lda $032E
5514	.dc2b		9d 00 84	sta $8400,x	                sta L8400,x
5515	.dc2e		ad 32 03	lda $0332	                lda $0332
5516	.dc31		9d 00 85	sta $8500,x	                sta L8500,x
5517	.dc34		ad 2f 03	lda $032f	                lda $032F
5518	.dc37		0a		asl a		                asl a
5519	.dc38		0a		asl a		                asl a
5520	.dc39		0d 33 03	ora $0333	                ora $0333
5521	.dc3c		9d 00 86	sta $8600,x	                sta L8600,x
5522	.dc3f		ad 30 03	lda $0330	                lda $0330
5523	.dc42		9d 00 87	sta $8700,x	                sta L8700,x
5524	.dc45						LDC46:
5525	.dc45		18		clc		                clc
5526	.dc46						LDC47:
5527	.dc46		60		rts		                rts

5529	.dc47						LDC48:
5530	.dc47		8d 2a 03	sta $032a	                sta $032A
5531	.dc4a		a2 28		ldx #$28	                ldx #$28
5532	.dc4c		20 af dc	jsr $dcaf	                jsr LDCB0
5533	.dc4f		d0 0a		bne $dc5b	                bne LDC5C
5534	.dc51						LDC52:
5535	.dc51		20 1b dc	jsr $dc1b	                jsr LDC1C
5536	.dc54		b0 f0		bcs $dc46	                bcs LDC47
5537	.dc56		20 72 9d	jsr $9d72	                jsr L9D57
5538	.dc59		b0 ea		bcs $dc45	                bcs LDC46
5539	.dc5b						LDC5C:
5540	.dc5b		20 c0 dc	jsr $dcc0	                jsr LDCC1
5541	.dc5e		20 72 9d	jsr $9d72	                jsr L9D57
5542	.dc61		b0 e2		bcs $dc45	                bcs LDC46
5543	.dc63		20 d6 dc	jsr $dcd6	                jsr LDCD7
5544	.dc66		20 b7 dc	jsr $dcb7	                jsr LDCB8
5545	.dc69		80 e6		bra $dc51	                bra LDC52

5547							;-------------------------------------------------------------------------
5548							;
5549							; 72-79 = Horizontal line fill (left and right to non-background) [MasRef E.3-24]
5550							; 88-95 = Horizontal line fill (right to background) [MasRef E.3-25]
5551							; 104-111 = Horizontal line fill (left and right to foreground) [MasRef E.3-26]
5552							; 120-127 = Horizontal line fill (right to non-foreground) [MasRef E.3-27]
5553							;
5554	.dc6b						plotHorizontalLineFill:
5555	.dc6b		20 9e dd	jsr $dd9e	                jsr copyECFPatternForLineFill
5556	.dc6e		20 af dc	jsr $dcaf	                jsr LDCB0
5557	.dc71		18		clc		                clc
5558	.dc72		80 0e		bra $dc82	                bra LDC83

5560	.dc74						plotHorizontalLineFillRight:
5561	.dc74		20 9e dd	jsr $dd9e	                jsr copyECFPatternForLineFill
5562	.dc77		20 c8 dc	jsr $dcc8	                jsr LDCC9
5563	.dc7a		20 d1 dc	jsr $dcd1	                jsr LDCD2
5564	.dc7d		d0 03		bne $dc82	                bne LDC83
5565	.dc7f		20 b7 dc	jsr $dcb7	                jsr LDCB8
5566	.dc82						LDC83:
5567	.dc82		08		php		                php
5568	.dc83		a2 2e		ldx #$2e	                ldx #VDUVariables.hlfw.pixelsX
5569	.dc85		a0 14		ldy #$14	                ldy #VDUVariables.oldGraphicsCursorPixelsX
5570	.dc87		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
5571	.dc8a		28		plp		                plp
5572	.dc8b		08		php		                php
5573	.dc8c		f0 02		beq $dc90	                beq LDC91
5574	.dc8e		a2 2e		ldx #$2e	                ldx #VDUVariables.hlfw.pixelsX
5575	.dc90						LDC91:
5576	.dc90		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixelsX
5577	.dc92		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5578	.dc95		a2 30		ldx #$30	                ldx #VDUVariables.hlfw.pixelsY
5579	.dc97		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5580	.dc9a		28		plp		                plp
5581	.dc9b		f0 05		beq $dca2	                beq LDCA3
5582	.dc9d		b0 04		bcs $dca3	                bcs LDCA4
5583	.dc9f		ee 16 03	inc $0316	                inc $0316
5584	.dca2						LDCA3:
5585	.dca2		60		rts		                rts

5587	.dca3						LDCA4:
5588	.dca3		ad 24 03	lda $0324	                lda $0324
5589	.dca6		d0 03		bne $dcab	                bne LDCAC
5590	.dca8		ce 25 03	dec $0325	                dec $0325
5591	.dcab						LDCAC:
5592	.dcab		ce 24 03	dec $0324	                dec $0324
5593	.dcae		60		rts		                rts

5595							;-------------------------------------------------------------------------

5597	.dcaf						LDCB0:
5598	.dcaf		20 d1 dc	jsr $dcd1	                jsr LDCD2
5599	.dcb2		d0 55		bne $dd09	                bne rtsDD0A
5600	.dcb4		20 0a dd	jsr $dd0a	                jsr LDD0B
5601	.dcb7						LDCB8:
5602	.dcb7		a2 2e		ldx #$2e	                ldx #$2E
5603	.dcb9		a0 32		ldy #$32	                ldy #$32
5604	.dcbb		20 e7 da	jsr $dae7	                jsr LDAE8
5605	.dcbe		80 46		bra $dd06	                bra LDD07

5607	.dcc0						LDCC1:
5608	.dcc0		20 c8 dc	jsr $dcc8	                jsr LDCC9
5609	.dcc3		a2 2c		ldx #$2c	                ldx #$2C
5610	.dcc5		20 d8 dc	jsr $dcd8	                jsr LDCD9
5611	.dcc8						LDCC9:
5612	.dcc8		08		php		                php
5613	.dcc9		a5 e1		lda $e1		                lda $E1
5614	.dccb		49 08		eor #$08	                eor #$08
5615	.dccd		85 e1		sta $e1		                sta $E1
5616	.dccf		28		plp		                plp
5617	.dcd0		60		rts		                rts

5619							;-------------------------------------------------------------------------

5621	.dcd1						LDCD2:
5622	.dcd1		a0 2e		ldy #$2e	                ldy #VDUVariables.hlfw.pixelsX
5623	.dcd3		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
5624	.dcd6						LDCD7:
5625	.dcd6		a2 04		ldx #$04	                ldx #VDUVariables.graphicsWindowPixelsRight
5626	.dcd8						LDCD9:
5627	.dcd8		a0 34		ldy #$34	                ldy #VDUVariables.hlfw.pixelsLimitX
5628	.dcda		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5629	.dcdd		a2 34		ldx #$34	                ldx #VDUVariables.hlfw.pixelsLimitX
5630	.dcdf		20 34 dd	jsr $dd34	                jsr shouldFillPixel
5631	.dce2		d0 25		bne $dd09	                bne rtsDD0A  ;taken if pixel not to be filled, so done
5632	.dce4						LDCE5:
5633	.dce4		46 d1		lsr $d1		                lsr ZMASK                    ;next pixel
5634	.dce6		90 08		bcc $dcf0	                bcc LDCF1                    ;taken if still in same byte
5635	.dce8						LDCE9:
5636	.dce8		20 66 da	jsr $da66	                jsr nextColumnAndResetMask
5637	.dceb		20 64 dd	jsr $dd64	                jsr shouldFillByte
5638	.dcee		b0 f8		bcs $dce8	                bcs LDCE9
5639	.dcf0						LDCF1:
5640	.dcf0		20 84 dd	jsr $dd84	                jsr LDD85
5641	.dcf3		b0 ef		bcs $dce4	                bcs LDCE5
5642	.dcf5		38		sec		                sec
5643	.dcf6		ad 34 03	lda $0334	                lda vduv.hlfw.pixelsLimitX+0
5644	.dcf9		e5 de		sbc $de		                sbc zhlfw.pixelsX+0
5645	.dcfb		8d 32 03	sta $0332	                sta vduv.hlfw.pixelsRightEndX+0
5646	.dcfe		ad 35 03	lda $0335	                lda vduv.hlfw.pixelsLimitX+1
5647	.dd01		e5 df		sbc $df		                sbc zhlfw.pixelsX+1
5648	.dd03		8d 33 03	sta $0333	                sta vduv.hlfw.pixelsRightEndX+1
5649	.dd06						LDD07:
5650	.dd06		a9 00		lda #$00	                lda #$00
5651	.dd08		38		sec		                sec
5652	.dd09						rtsDD0A:
5653	.dd09		60		rts		                rts

5655	.dd0a						LDD0B:
5656	.dd0a		a2 00		ldx #$00	                ldx #VDUVariables.graphicsWindowPixelsLeft
5657	.dd0c		20 34 dd	jsr $dd34	                jsr shouldFillPixel
5658	.dd0f		d0 f8		bne $dd09	                bne rtsDD0A                    ;taken if pixel not to be filled, so done
5659	.dd11						LDD12:
5660	.dd11		06 d1		asl $d1		                asl ZMASK                      ;next pixel
5661	.dd13		90 08		bcc $dd1d	                bcc LDD1E                    ;taken if still in same byte
5662	.dd15						LDD16:
5663	.dd15		20 33 da	jsr $da33	                jsr previousColumnAndResetMask
5664	.dd18		20 64 dd	jsr $dd64	                jsr shouldFillByte
5665	.dd1b		b0 f8		bcs $dd15	                bcs LDD16
5666	.dd1d						LDD1E:
5667	.dd1d		20 84 dd	jsr $dd84	                jsr LDD85
5668	.dd20		b0 ef		bcs $dd11	                bcs LDD12
5669	.dd22		ad 00 03	lda $0300	                lda vduv.graphicsWindowPixelsLeft+0
5670	.dd25		65 de		adc $de		                adc zhlfw.pixelsX+0
5671	.dd27		8d 2e 03	sta $032e	                sta vduv.hlfw.pixelsX+0
5672	.dd2a		ad 01 03	lda $0301	                lda vduv.graphicsWindowPixelsLeft+1
5673	.dd2d		65 df		adc $df		                adc zhlfw.pixelsX+1
5674	.dd2f		8d 2f 03	sta $032f	                sta vduv.hlfw.pixelsX+1
5675	.dd32		80 d2		bra $dd06	                bra LDD07

5677							;-------------------------------------------------------------------------
5678							;
5679							; Check whether line fill should fill a pixel.
5680							;
5681							; entry:
5682							;
5683							; X = VDU variable offset of edge of window
5684							;
5685							; vduv.workspace._2E - pixel X, Y coordinates
5686							;
5687							; exit:
5688							;
5689							; Z=1 if pixel should be filled
5690							;
5691							; ZTEMPC = ???
5692							;
5693	.dd34						shouldFillPixel:
5694	.dd34		38		sec		                sec
5695	.dd35		ad 2e 03	lda $032e	                lda vduv.workspace._2E+0
5696	.dd38		fd 00 03	sbc $0300,x	                sbc vduv+0,x
5697	.dd3b		a8		tay		                tay
5698	.dd3c		ad 2f 03	lda $032f	                lda vduv.workspace._2E+1
5699	.dd3f		fd 01 03	sbc $0301,x	                sbc vduv+1,x
5700	.dd42		10 03		bpl $dd47	                bpl +
5701	.dd44		20 2e c9	jsr $c92e	                jsr negateAY
5702	.dd47						+
5703	.dd47		84 de		sty $de		                sty zhlfw.pixelsX+0
5704	.dd49		85 df		sta $df		                sta zhlfw.pixelsX+1
5705	.dd4b		a2 2e		ldx #$2e	                ldx #VDUVariables.workspace._2E
5706	.dd4d		20 c3 de	jsr $dec3	                jsr windGADDR
5707	.dd50		18		clc		                clc
5708	.dd51		d0 10		bne $dd63	                bne rtsDD64                    ;taken if point outside window
5709	.dd53		b1 d6		lda ($d6),y	                lda (ZMEMG),y                  ;get screen byte
5710	.dd55		5d 30 88	eor $8830,x	                eor andy.hlfw.ecfPattern,x     ;EOR with appropriate pattern
5711	.dd58		85 da		sta $da		                sta zhlfw.notByteMatch ;0 if whole byte matches
5712	.dd5a		25 d1		and $d1		                and ZMASK                      ;0 if masked byte matches
5713	.dd5c		f0 02		beq $dd60	                beq +              ;taken if masked byte matches - A=0
5714	.dd5e		a9 08		lda #$08	                lda #$08              ;masked byte doesn't match - A=8
5715	.dd60						+
5716	.dd60		45 e1		eor $e1		                eor zhlfw.resultEOR ;maybe invert result
5717	.dd62		38		sec		                sec
5718	.dd63						rtsDD64:
5719	.dd63		60		rts		                rts

5721							;-------------------------------------------------------------------------

5723	.dd64						shouldFillByte:
5724	.dd64		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5725	.dd66		5d 30 88	eor $8830,x	                eor andy.hlfw.ecfPattern,x
5726	.dd69		85 da		sta $da		                sta zhlfw.notByteMatch
5727	.dd6b		05 e1		ora $e1		                ora zhlfw.resultEOR
5728	.dd6d		18		clc		                clc
5729	.dd6e		d0 13		bne $dd83	                bne rtsDD84
5730	.dd70		a5 de		lda $de		                lda zhlfw.pixelsX+0
5731	.dd72		ed 61 03	sbc $0361	                sbc vduv.pixelsPerByteMinusOne
5732	.dd75		48		pha		                pha
5733	.dd76		a5 df		lda $df		                lda zhlfw.pixelsX+1
5734	.dd78		e9 00		sbc #$00	                sbc #$00
5735	.dd7a		90 06		bcc $dd82	                bcc pla_rts_DD83             ;taken if past X=0
5736	.dd7c		85 df		sta $df		                sta zhlfw.pixelsX+1
5737	.dd7e		68		pla		                pla
5738	.dd7f		85 de		sta $de		                sta zhlfw.pixelsX+0
5739	.dd81		60		rts		                rts

5741	.dd82						pla_rts_DD83:
5742	.dd82		68		pla		                pla
5743	.dd83						rtsDD84:
5744	.dd83		60		rts		                rts

5746							;-------------------------------------------------------------------------

5748	.dd84						LDD85:
5749	.dd84		a5 da		lda $da		                lda zhlfw.notByteMatch
5750	.dd86		25 d1		and $d1		                and ZMASK
5751	.dd88		f0 02		beq $dd8c	                beq +
5752	.dd8a		a9 08		lda #$08	                lda #$08
5753	.dd8c						+
5754	.dd8c		45 e1		eor $e1		                eor zhlfw.resultEOR
5755	.dd8e		d0 0d		bne $dd9d	                bne rtsDD9E

5757							                ; pixelsX -= 1
5758	.dd90		a5 de		lda $de		                lda zhlfw.pixelsX+0
5759	.dd92		d0 06		bne $dd9a	                bne +
5760	.dd94		a5 df		lda $df		                lda zhlfw.pixelsX+1
5761	.dd96		f0 05		beq $dd9d	                beq rtsDD9E
5762	.dd98		c6 df		dec $df		                dec zhlfw.pixelsX+1
5763	.dd9a						+
5764	.dd9a		c6 de		dec $de		                dec zhlfw.pixelsX+0
5765	.dd9c		38		sec		                sec
5766	.dd9d						rtsDD9E:
5767	.dd9d		60		rts		                rts

5769							;-------------------------------------------------------------------------
5770							;
5771							; Copy appropriate ECF pattern for line fill.
5772							;
5773							; entry:
5774							;
5775							; A = horizontal line fill PLOT code
5776							;
5777							; exit:
5778							;
5779							; andy.hlfw.ecfPattern = holds bg/fg ECF pattern as required
5780							;
5781							; ZTEMPD?1 = 0 for fill to matching, 8 to fill to non-matching
5782							;
5783	.dd9e						copyECFPatternForLineFill:
5784	.dd9e		4a		lsr a		                lsr a                        ;36-39; 44-47; 52-55; 60-63
5785	.dd9f		4a		lsr a		                lsr a                        ;18-19; 42-43; 26-27; 30-31
5786	.dda0						LDDA1:
5787	.dda0		29 08		and #$08	                and #$08                     ;8 if PLOT >= 104
5788	.dda2		85 e1		sta $e1		                sta zhlfw.resultEOR
5789	.dda4		49 0f		eor #$0f	                eor #$0F                     ;
5790	.dda6		aa		tax		                tax
5791	.dda7		a0 07		ldy #$07	                ldy #$07
5792	.dda9						-
5793	.dda9		bd 20 88	lda $8820,x	                lda andy.currentECFPatterns,x
5794	.ddac		99 30 88	sta $8830,y	                sta andy.hlfw.ecfPattern,y
5795	.ddaf		ca		dex		                dex
5796	.ddb0		88		dey		                dey
5797	.ddb1		10 f6		bpl $dda9	                bpl -
5798	.ddb3		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
5799	.ddb5		60		rts		                rts

5801							;-------------------------------------------------------------------------
5802							;
5803							;
5804							; entry:
5805							;
5806							; A = offset into VDU variables of coordinates
5807							;
5808							; exit:
5809							;
5810							; A = colour, or $ff if off screen/teletext (as per OSWORD $09)
5811							;
5812	.ddb6						readPixelColour: .proc
5813	.ddb6		20 f9 c0	jsr $c0f9	                jsr stopCursorEditing
5814	.ddb9		ae 61 03	ldx $0361	                ldx vduv.pixelsPerByteMinusOne
5815	.ddbc		f0 21		beq $dddf	                beq invalid             ;taken if teletext
5816	.ddbe		48		pha		                pha
5817	.ddbf		aa		tax		                tax
5818	.ddc0		20 dd d1	jsr $d1dd	                jsr eigabsEntryPoint
5819	.ddc3		fa		plx		                plx
5820	.ddc4		20 c3 de	jsr $dec3	                jsr windGADDR
5821	.ddc7		d0 16		bne $dddf	                bne invalid             ;taken if off screen
5822	.ddc9		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5823	.ddcb		64 da		stz $da		                stz ZTEMP+0
5824	.ddcd		80 01		bra $ddd0	                bra shiftMask

5826							                ; Keep shifting the byte and the mask. When a 1 bit is
5827							                ; shifted out of the mask, shift the corresponding
5828							                ; byte bit bit into ZTEMP+0, building up the pixel
5829							                ; colour a bit at a time.
5830							                ;
5831							                ; When the mask becomes 0, done.
5832	.ddcf						shiftByteAndMask:
5833	.ddcf		0a		asl a		                asl a
5834	.ddd0						shiftMask:
5835	.ddd0		06 d1		asl $d1		                asl ZMASK
5836	.ddd2		90 fb		bcc $ddcf	                bcc shiftByteAndMask
5837	.ddd4		0a		asl a		                asl a
5838	.ddd5		26 da		rol $da		                rol ZTEMP+0
5839	.ddd7		a6 d1		ldx $d1		                ldx ZMASK
5840	.ddd9		d0 f5		bne $ddd0	                bne shiftMask
5841	.dddb		a5 da		lda $da		                lda ZTEMP+0
5842	.dddd		80 02		bra $dde1	                bra done

5844	.dddf						invalid:
5845	.dddf		a9 ff		lda #$ff	                lda #$FF
5846	.dde1						done:
5847	.dde1		4c c9 c0	jmp $c0c9	                jmp reinstateCursorEditing
5848							                .endproc

5850							;-------------------------------------------------------------------------
5851							;
5852							; Translate ASCII char to the SAA5050 character set.
5853							;
5854							; # ($23) becomes $5f
5855							; _ ($5f) becomes $60
5856							; GBP ($60) becomes $23
5857							;
5858							; Because the mapping is a kind of cycle, you can call this routine
5859							; twice to translate from SAA5050 to ASCII.
5860							;
5861							; entry:
5862							;
5863							; A = ASCII char
5864							;
5865							; exit:
5866							;
5867							; A = SAA550 char
5868							;
5869	.dde4						getSAA5050FromASCII: .block
5870	.dde4		c9 23		cmp #$23	                cmp #$23
5871	.dde6		f0 0a		beq $ddf2	                beq translateHash
5872	.dde8		c9 5f		cmp #$5f	                cmp #$5F
5873	.ddea		f0 08		beq $ddf4	                beq translateUnderscore
5874	.ddec		c9 60		cmp #$60	                cmp #$60
5875	.ddee		d0 06		bne $ddf6	                bne rtsDDF7
5876	.ddf0						translateGBP:
5877	.ddf0		49 3f		eor #$3f	                eor #$3F                     ;0x60->0x5f
5878	.ddf2						translateHash:
5879	.ddf2		49 43		eor #$43	                eor #$43                     ;0x23->0x5f or 0x5f->0x1c
5880	.ddf4						translateUnderscore:
5881	.ddf4		49 3f		eor #$3f	                eor #$3F                     ;0x5f->0x60 or 0x1c->0x23
5882	.ddf6						rtsDDF7:
5883	.ddf6		60		rts		                rts
5884							                .endblock

5886							;-------------------------------------------------------------------------

5888	.ddf7						readCharacterAtTextCursor: .proc
5889	.ddf7		58		cli		                cli
5890	.ddf8		24 d0		bit $d0		                bit STATE
5891	.ddfa		50 06		bvc $de02	                bvc +                      ;taken if not cursor editing
5892	.ddfc		20 f9 c0	jsr $c0f9	                jsr stopCursorEditing
5893	.ddff		20 d0 c0	jsr $c0d0	                jsr exchangeCursors
5894	.de02						+
5895	.de02		ac 60 03	ldy $0360	                ldy vduv.numberOfLogicalColoursMinusOne
5896	.de05		d0 17		bne $de1e	                bne bitmapMode
5897	.de07						readTeletextChar:
5898	.de07		b2 d8		lda ($d8)	                lda (ZMEMT)                  ;read character from screen
5899	.de09		20 e4 dd	jsr $dde4	                jsr getSAA5050FromASCII      ;call 2x to convert to ASCII
5900	.de0c		20 e4 dd	jsr $dde4	                jsr getSAA5050FromASCII      ;call 2x to convert to ASCII
5901	.de0f						done:
5902	.de0f		24 d0		bit $d0		                bit STATE
5903	.de11		50 06		bvc $de19	                bvc +                     ;taken if not cursor editing
5904	.de13		20 d0 c0	jsr $c0d0	                jsr exchangeCursors
5905	.de16		20 c9 c0	jsr $c0c9	                jsr reinstateCursorEditing
5906	.de19						+
5907	.de19		ac 55 03	ldy $0355	                ldy vduv.currentScreenMODE
5908	.de1c		aa		tax		                tax
5909	.de1d		60		rts		                rts

5911	.de1e						bitmapMode:
5912	.de1e		20 56 de	jsr $de56	                jsr LDE56
5913	.de21		a5 f4		lda $f4		                lda $F4
5914	.de23		48		pha		                pha
5915	.de24		20 4a e5	jsr $e54a	                jsr selectTerminalROMAndANDY
5916	.de27		a9 20		lda #$20	                lda #$20
5917	.de29		aa		tax		                tax                          ;X = ASCII code for char
5918	.de2a		20 2e e2	jsr $e22e	                jsr getSoftCharacterDefinitionAddress
5919	.de2d						compare:
5920	.de2d		a0 07		ldy #$07	                ldy #$07
5921	.de2f						-
5922	.de2f		b9 28 03	lda $0328,y	                lda vduv.workspace._28,y
5923	.de32		51 de		eor ($de),y	                eor (ZTEMPC),y
5924	.de34		d0 0e		bne $de44	                bne nextFontChar ;taken if no match - can't be this char
5925	.de36		88		dey		                dey
5926	.de37		10 f6		bpl $de2f	                bpl -

5928	.de39		8a		txa		                txa                          ;A = char found
5930	.de3a		10 02		bpl $de3e	                bpl bitmapModeDone
5931	.de3c		49 7f		eor #$7f	                eor #$7f
5933	.de3e						bitmapModeDone:
5934	.de3e		fa		plx		                plx
5935	.de3f		20 4c e5	jsr $e54c	                jsr selectROMX
5936	.de42		80 cb		bra $de0f	                bra done

5938	.de44						nextFontChar:
5939	.de44		e8		inx		                inx                          ;next ASCII code
5941	.de45		8a		txa		                txa
5942	.de46		10 02		bpl $de4a	                bpl LDE4A
5943	.de48		49 7f		eor #$7f	                eor #$7f
5944	.de4a						LDE4A:
5945	.de4a		20 2e e2	jsr $e22e	                jsr getSoftCharacterDefinitionAddress
5954	.de4d						gotCharAddress:
5955	.de4d		e0 7f		cpx #$7f	                cpx #$7F
5956	.de4f		f0 f3		beq $de44	                beq nextFontChar                 ;skip CHR$127
5957	.de51		8a		txa		                txa
5958	.de52		d0 d9		bne $de2d	                bne compare           ;taken if more chars to consider
5959	.de54		80 e8		bra $de3e	                bra bitmapModeDone ;finish with A=0 - i.e., no match found
5960							                .endproc

5962							;-------------------------------------------------------------------------
5963							;
5964							; Copy character out of screen memory, and store as a 1 bpp bitmap in
5965							; VDU variables workspace.
5966							;
5967	.de56						LDE56: .proc
5968	.de56		a6 d8		ldx $d8		                ldx ZMEMT+0
5969	.de58		a5 d9		lda $d9		                lda ZMEMT+1
5970	.de5a		20 d8 ce	jsr $ced8	                jsr getNext3ColumnAddresses
5971	.de5d		a0 07		ldy #$07	                ldy #$07
5972	.de5f						loop:
5973	.de5f		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
5974	.de62		e0 03		cpx #$03	                cpx #$03
5975	.de64		f0 09		beq $de6f	                beq read2bppChar
5976	.de66		b0 13		bcs $de7b	                bcs read4bppChar
5977	.de68						read1bppChar:
5978	.de68		b1 d8		lda ($d8),y	                lda (ZMEMT),y
5979	.de6a		4d 58 03	eor $0358	                eor vduv.backgroundTextColour
5980	.de6d		80 22		bra $de91	                bra next

5982	.de6f						read2bppChar:
5983	.de6f		b1 d8		lda ($d8),y	                lda (ZMEMT),y                ;get pixels 0-3
5984	.de71		20 a2 de	jsr $dea2	                jsr get4Pixels
5985	.de74		b1 da		lda ($da),y	                lda (ZTEMP),y                  ;get pixels 4-7
5986	.de76		20 a2 de	jsr $dea2	                jsr get4Pixels
5987	.de79		80 14		bra $de8f	                bra LDE8F

5989	.de7b						read4bppChar:
5990	.de7b		b1 d8		lda ($d8),y	                lda (ZMEMT),y                ;get pixels 0/1
5991	.de7d		20 98 de	jsr $de98	                jsr get2Pixels
5992	.de80		b1 da		lda ($da),y	                lda (ZTEMP),y                ;get pixels 2/3
5993	.de82		20 98 de	jsr $de98	                jsr get2Pixels
5994	.de85		b1 dc		lda ($dc),y	                lda (ZTEMPB),y               ;get pixels 4/5
5995	.de87		20 98 de	jsr $de98	                jsr get2Pixels
5996	.de8a		b1 e0		lda ($e0),y	                lda (ZTEMPD),y               ;get pixels 6/7
5997	.de8c		20 98 de	jsr $de98	                jsr get2Pixels
5998	.de8f						LDE8F:
5999	.de8f		a5 df		lda $df		                lda ZTEMPC+1
6000	.de91						next:
6001	.de91		99 28 03	sta $0328,y	                sta vduv.workspace._28,y
6002	.de94		88		dey		                dey
6003	.de95		10 c8		bpl $de5f	                bpl loop
6004	.de97		60		rts		                rts

6006	.de98						get2Pixels:
6007	.de98		4d 58 03	eor $0358	                eor vduv.backgroundTextColour ;reset background pixel bits
6008	.de9b		20 b5 de	jsr $deb5	                jsr or2Pixels
6009	.de9e		29 03		and #$03	                and #%00000011               ;2 pixels/byte
6010	.dea0		80 0c		bra $deae	                bra shiftIn2

6012	.dea2						get4Pixels:
6013	.dea2		4d 58 03	eor $0358	                eor vduv.backgroundTextColour ;
6014	.dea5		20 ba de	jsr $deba	                jsr or4Pixels
6015	.dea8		29 0f		and #$0f	                and #%00001111               ;4 pixels/byte

6017							                ; Build up the 1bpp char row in ZTEMPC?1, 2 or 4 bits
6018							                ; at a time.
6019	.deaa		06 df		asl $df		                asl ZTEMPC+1
6020	.deac		06 df		asl $df		                asl ZTEMPC+1
6021	.deae						shiftIn2:
6022	.deae		06 df		asl $df		                asl ZTEMPC+1
6023	.deb0		06 df		asl $df		                asl ZTEMPC+1
6024	.deb2		04 df		tsb $df		                tsb ZTEMPC+1
6025	.deb4		60		rts		                rts

6027							                ; OR together all the N bits for each pixel, making a
6028							                ; byte in which the bottom N bits have a bit set for
6029							                ; each non-0 pixel in the byte.
6030	.deb5						or2Pixels:
6031	.deb5		85 de		sta $de		                sta ZTEMPC+0
6032	.deb7		20 be de	jsr $debe	                jsr shiftOut2
6033	.deba						or4Pixels:
6034	.deba		85 de		sta $de		                sta ZTEMPC+0                 ;%abcdABCD
6035	.debc		4a		lsr a		                lsr a                        ;%0abcdABC
6036	.debd		4a		lsr a		                lsr a                        ;%00abcdAB
6037	.debe						shiftOut2:
6038	.debe		4a		lsr a		                lsr a                        ;%000abcdA
6039	.debf		4a		lsr a		                lsr a                        ;%0000abcd
6040	.dec0		05 de		ora $de		                ora ZTEMPC+0                 ;%0000abcd|%abcdABCD
6041							                .endproc
6042	.dec2						rtsDEC2:
6043	.dec2		60		rts		                rts

6045							;-------------------------------------------------------------------------
6046							;
6047							; Do WIND. If point not in window, return with Z=0. Otherwise, call
6048							; GADDR and return with Z=1.
6049							;
6050	.dec3						windGADDR:
6051	.dec3		20 a7 d1	jsr $d1a7	                jsr windEntryPoint
6052	.dec6		d0 fa		bne $dec2	                bne rtsDEC2                  ;taken if point outside window
6053	.dec8						gaddrEntryPoint:
6054	.dec8		bd 02 03	lda $0302,x	                lda vduv+2,x                 ;get Y coordinate
6055	.decb						LDECB:
6056	.decb		49 ff		eor #$ff	                eor #$FF                     ;invert Y coordinate
6057	.decd		a8		tay		                tay                          ;Y=Y coordinate
6058	.dece		29 07		and #$07	                and #$07                ;get scanline in character row
6059	.ded0		85 da		sta $da		                sta ZTEMP+0             ;save scanline
6060	.ded2		98		tya		                tya                          ;A=Y coordinate
6061	.ded3		29 f8		and #$f8	                and #$F8                     ;row*8
6062	.ded5		4a		lsr a		                lsr a                        ;row*4
6063	.ded6		85 d7		sta $d7		                sta ZMEMG+1                  ;>(row*1024)
6064	.ded8		4a		lsr a		                lsr a                        ;>(row*512)
6065	.ded9		4a		lsr a		                lsr a                        ;>(row*256)
6066	.deda		65 d7		adc $d7		                adc ZMEMG+1                  ;>(row*1280)
6067	.dedc		4a		lsr a		                lsr a                        ;>(row*640)
6068	.dedd		85 d7		sta $d7		                sta ZMEMG+1                  ;
6069	.dedf		a9 00		lda #$00	                lda #$00                     ;
6070	.dee1		6a		ror a		                ror a                        ;<(row*640) - $00/$80
6071	.dee2		ac 56 03	ldy $0356	                ldy vduv.currentScreenMODEGroup
6072	.dee5		f0 03		beq $deea	                beq +                      ;taken if 640 bytes per row
6073	.dee7		46 d7		lsr $d7		                lsr ZMEMG+1                ;>(row*320)
6074	.dee9		6a		ror a		                ror a                    ;<(row*320) - $00/$40/$80/$c0
6075	.deea						+
6076	.deea		05 da		ora $da		                ora ZTEMP+0               ;include the scanline offset
6077	.deec		6d 50 03	adc $0350	                adc vduv.screenTopLeftAddress+0 ;include LSB of screen base
6078	.deef		8d 1a 03	sta $031a	                sta vduv.graphicsAddressOffset

6080							                ; add MSB of screen base to ZMEMG+1
6081	.def2		a5 d7		lda $d7		                lda ZMEMG+1
6082	.def4		6d 51 03	adc $0351	                adc vduv.screenTopLeftAddress+1
6083	.def7		85 d7		sta $d7		                sta ZMEMG+1

6085	.def9		bd 01 03	lda $0301,x	                lda vduv+1,x                 ;get >X
6086	.defc		85 d6		sta $d6		                sta ZMEMG+0                  ;save >X
6087	.defe		bd 00 03	lda $0300,x	                lda vduv+0,x                 ;get <X
6088	.df01		2d 61 03	and $0361	                and vduv.pixelsPerByteMinusOne ;index for pixel
6089	.df04		6d 61 03	adc $0361	                adc vduv.pixelsPerByteMinusOne ;offset into pixel mask table
6090	.df07		a8		tay		                tay
6091	.df08		b9 30 e1	lda $e130,y	                lda pixelMasks-1,y
6092	.df0b		85 d1		sta $d1		                sta ZMASK

6094							                ; Form 16-bit column address offset (LSB in A, MSB in
6095							                ; ZMEMG+0), assuming 8 bits/pixel. No adjustment
6096							                ; needed if MODE 0/4, but scale up by 2 if MODE 1/5 or
6097							                ; 4 if MODE 2.

6099	.df0d		bd 00 03	lda $0300,x	                lda vduv+0,x                 ;A = <X
6100	.df10		ac 61 03	ldy $0361	                ldy vduv.pixelsPerByteMinusOne
6101	.df13		c0 03		cpy #$03	                cpy #$03
6102	.df15		f0 05		beq $df1c	                beq LDF1C         ;taken if 4 px/byte - i.e., MODE 1/5
6103	.df17		b0 06		bcs $df1f	                bcs LDF1F        ;taken if >4 px/byte - i.e., MODE 0/4
6104	.df19		0a		asl a		                asl a
6105	.df1a		26 d6		rol $d6		                rol ZMEMG+0
6106	.df1c						LDF1C:
6107	.df1c		0a		asl a		                asl a
6108	.df1d		26 d6		rol $d6		                rol ZMEMG+0
6109	.df1f						LDF1F:
6110	.df1f		29 f8		and #$f8	                and #$F8                     ;<column offset
6111	.df21		18		clc		                clc
6112	.df22		6d 1a 03	adc $031a	                adc vduv.graphicsAddressOffset
6113	.df25		8d 1a 03	sta $031a	                sta vduv.graphicsAddressOffset
6114	.df28		a5 d6		lda $d6		                lda ZMEMG+0                  ;>column offset
6115	.df2a		65 d7		adc $d7		                adc ZMEMG+1                  ;add to address MSB
6116	.df2c		10 04		bpl $df32	                bpl +                        ;taken if no wrap
6117	.df2e		38		sec		                sec
6118	.df2f		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte ;handle wrap at end of screen
6119	.df32						+
6120	.df32		85 d7		sta $d7		                sta ZMEMG+1                  ;got MSB
6121	.df34		64 d6		stz $d6		                stz ZMEMG+0 ;LSB always 0 - the offset takes care of this
6122	.df36		a6 da		ldx $da		                ldx ZTEMP+0 ;get scanline in row
6123	.df38		20 7b da	jsr $da7b	                jsr setupColourMasks
6124	.df3b		ac 1a 03	ldy $031a	                ldy vduv.graphicsAddressOffset
6125	.df3e						ldaim00_rts_DF3E:
6126	.df3e		a9 00		lda #$00	                lda #$00                     ;return with Z=1, as per WIND
6127	.df40		60		rts		                rts

6129							;-------------------------------------------------------------------------

6131	.df41						LDF41:
6132	.df41		20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
6133	.df44		da		phx		                phx
6134	.df45		a2 00		ldx #$00	                ldx #$00
6135	.df47		ad 5a 03	lda $035a	                lda $035A
6136	.df4a		c9 04		cmp #$04	                cmp #$04
6137	.df4c		b0 0b		bcs $df59	                bcs LDF59
6138	.df4e		ae 6a 03	ldx $036a	                ldx $036A
6139	.df51		ad 59 03	lda $0359	                lda $0359
6140	.df54		f0 03		beq $df59	                beq LDF59
6141	.df56		ae 6b 03	ldx $036b	                ldx $036B
6142	.df59						LDF59:
6143	.df59		8e 69 03	stx $0369	                stx $0369
6144	.df5c		fa		plx		                plx
6145	.df5d		60		rts		                rts

6147							;-------------------------------------------------------------------------

6149	.df5e						handleCopyKey:
6150	.df5e		a9 20		lda #$20	                lda #STATE.isVDU5
6151	.df60		24 d0		bit $d0		                bit STATE
6152	.df62		50 da		bvc $df3e	                bvc ldaim00_rts_DF3E      ;taken if not cursor editing
6153	.df64		d0 d8		bne $df3e	                bne ldaim00_rts_DF3E      ;taken if VDU5
6159	.df66		a9 87		lda #$87	                lda #$87
6160	.df68		20 f4 ff	jsr $fff4	                jsr OSBYTE
6161	.df6b		8a		txa		                txa
6163	.df6c		f0 0c		beq $df7a	                beq rtsDF77              ;taken if char not recognised
6164	.df6e		48		pha		                pha                      ;save char recognised
6165	.df6f		20 d8 df	jsr $dfd8	                jsr isCursorEditingPossible
6166	.df72		d0 05		bne $df79	                bne pla_rts_DF76
6167	.df74		a9 09		lda #$09	                lda #$09
6168	.df76		20 bf df	jsr $dfbf	                jsr moveEditCursor
6169	.df79						pla_rts_DF76:
6170	.df79		68		pla		                pla
6171	.df7a						rtsDF77:
6172	.df7a		60		rts		                rts

6174							;-------------------------------------------------------------------------
6175							;
6176							; Handle cursor key press.
6177							;
6178							; Entry: A = one of the cursor key codes:
6179							;            $88 = left
6180							;            $89 = right
6181							;            $8a = down
6182							;            $8b = up

6184	.df7b						handleCursorKey:
6185	.df7b		48		pha		                pha                          ;save cursor key code
6186	.df7c		20 d8 df	jsr $dfd8	                jsr isCursorEditingPossible
6187	.df7f		d0 f8		bne $df79	                bne pla_rts_DF76             ;bail if editing not possible
6188	.df81		70 16		bvs $df99	                bvs editing                  ;taken if already editing
6189	.df83						beginEditing:
6190	.df83		ad 5f 03	lda $035f	                lda vduv.lastCursorStartRegisterValue
6191	.df86		29 df		and #$df	                and #%11011111
6192	.df88		20 52 cf	jsr $cf52	                jsr setCRTCRegister10        ;hide cursor
6193	.df8b		a2 18		ldx #$18	                ldx #VDUVariables.textCursorXPosition
6194	.df8d		a0 64		ldy #$64	                ldy #VDUVariables.editCursorXPosition
6195	.df8f		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables ;edit cursor pos =
6196							                                                   ;text cursor pos
6197	.df92		20 04 c1	jsr $c104	                jsr activateEditCursor
6198	.df95		a9 02		lda #$02	                lda #STATE.isScrollingDisabled
6199	.df97		04 d0		tsb $d0		                tsb STATE
6200	.df99						editing:
6201	.df99		68		pla		                pla                          ;restore cursor key code

6203							                ; Form appropriate VDU command (8/9/10/11) for the
6204							                ; key, assuming no VDU axis rearrangement.
6205	.df9a		29 7f		and #$7f	                and #$7F
6206	.df9c		85 da		sta $da		                sta ZTEMP                    ;save VDU command

6208							                ; Adjust VDU command based on axis swap/inversion.
6209	.df9e		c9 0a		cmp #$0a	                cmp #$0A
6210	.dfa0		b0 0e		bcs $dfb0	                bcs handleCursorUpOrDown     ;taken if up/down
6211	.dfa2						handleCursorLeftOrRightOrCopy:
6212	.dfa2		ad 66 03	lda $0366	                lda vduv.cursorFlags
6213	.dfa5		4a		lsr a		                lsr a
6214	.dfa6		29 05		and #$05	                and #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertHorizontal)>>1
6215	.dfa8		89 04		bit #$04	                bit #vduv.cursorFlags.swapAxes>>1
6216	.dfaa		f0 11		beq $dfbd	                beq gotActualMoveCommand

6218	.dfac		49 07		eor #$07	                eor #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal)>>1
6219	.dfae		80 0d		bra $dfbd	                bra gotActualMoveCommand

6221	.dfb0						handleCursorUpOrDown:
6222	.dfb0		ad 66 03	lda $0366	                lda vduv.cursorFlags
6223	.dfb3		4a		lsr a		                lsr a
6224	.dfb4		4a		lsr a		                lsr a
6225	.dfb5		29 03		and #$03	                and #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical)>>2 ;000000SV
6226	.dfb7		89 02		bit #$02	                bit #vduv.cursorFlags.swapAxes>>2
6227	.dfb9		f0 02		beq $dfbd	                beq gotActualMoveCommand

6229	.dfbb		49 01		eor #$01	                eor #vduv.cursorFlags.invertVertical>>2
6230	.dfbd						gotActualMoveCommand:
6231	.dfbd		45 da		eor $da		                eor ZTEMP
6232	.dfbf						moveEditCursor:
6233	.dfbf		a8		tay		                tay                          ;save command
6234	.dfc0		a9 40		lda #$40	                lda #STATE.isCursorEditing
6235	.dfc2		14 d0		trb $d0		                trb STATE            ;temporarily disable edit mode
6236	.dfc4		98		tya		                tya                  ;restore command
6237	.dfc5		ae 6c 03	ldx $036c	                ldx vduv.column81
6238	.dfc8		da		phx		                phx                  ;save old column 81 flag
6239	.dfc9		4e 6c 03	lsr $036c	                lsr vduv.column81    ;temporarily reset column 81 flag
6240	.dfcc		20 27 c0	jsr $c027	                jsr outputToVDU      ;print the cursor movement command
6241	.dfcf		68		pla		                pla
6242	.dfd0		8d 6c 03	sta $036c	                sta vduv.column81            ;restore column 81 flag
6243	.dfd3		a9 40		lda #$40	                lda #STATE.isCursorEditing
6244	.dfd5		04 d0		tsb $d0		                tsb STATE                    ;reinstate edit mode
6245	.dfd7		60		rts		                rts

6247							; Check if cursor editing is possible.
6248							;
6249							; Exit: Z=1 - editing is possible
6250							;             V reflects current STATE.isCursorEditing bit
6251							;       Z=0 - editing not possible
6252	.dfd8						isCursorEditingPossible:
6253	.dfd8		ae 6a 02	ldx $026a	                ldx vduQueueNegativeLength
6254	.dfdb		d0 04		bne $dfe1	                bne +                        ;return with Z=0 if VDU
6255							                                             ;queue not empty
6256	.dfdd		a9 a0		lda #$a0	                lda #STATE.isVDU21|STATE.isVDU5
6257	.dfdf		24 d0		bit $d0		                bit STATE   ;return with Z=0 if neither VDU21 nor VDU5
6258	.dfe1						+
6259	.dfe1		60		rts		                rts

6261							;-------------------------------------------------------------------------
6262							;
6263							; 184-191 = Move/copy rectangle [MasRef E.3-31]
6264							;
6266	.dfe2						selectExtROMAndPlotMoveOrCopyRectangle:
6267	.dfe2		a2 89		ldx #$89	                ldx #$80|extROM   ; select VIEW+ANDY
6268	.dfe4		20 4c e5	jsr $e54c	                jsr selectROMX
6269	.dfe7		20 c9 b6	jsr $b6c9	                jsr plotMoveOrCopyRectangle
6270	.dfea		80 08		bra $dff4	                bra LDFF1

6273							;-------------------------------------------------------------------------
6274							;
6275							; 192-199 = Plot ellipse outline [MasRef E.3-32]
6276							;
6278	.dfec						selectExtROMAndPlotEllipseOutline:
6279	.dfec		a2 89		ldx #$89	                ldx #$80|extROM
6280	.dfee		20 4c e5	jsr $e54c	                jsr selectROMX
6281	.dff1		20 f3 b1	jsr $b1f3	                jsr plotEllipseOutline
6282	.dff4						LDFF1:
6283	.dff4		4c 4a e5	jmp $e54a	                jmp selectTerminalROMAndANDY

6286							;-------------------------------------------------------------------------
6287							;
6288							; 200-207 = Plot solid ellipse [MasRef E.3-32]
6289							;
6291	.dff7						selectExtROMAndPlotEllipseFilled:
6292	.dff7		a2 89		ldx #$89	                ldx #$80|extROM
6293	.dff9		20 4c e5	jsr $e54c	                jsr selectROMX
6294	.dffc		20 72 b2	jsr $b272	                jsr plotEllipseFilled
6295	.dfff		80 f3		bra $dff4	                bra LDFF1

6302							;-------------------------------------------------------------------------

6304							; Pretty sure I have the logic for this all wrong...

6309	.e001						startupMessages: .block

6317	.e001						acornMOS:
6318	>e001		0d				                .text 13

6328	>e002		41 63 6f 72 6e 20 46 69		                .text "Acorn FinMOS"
	>e00a		6e 4d 4f 53
6336	>e00e		20				                .text " "
6338	>e00f		00				                .byte 0
6339	.e010						beep:
6340	>e010		07				                .byte 7
6341	>e011		00				                .byte 0

6346	.e012						twoNewlines:
6347	>e012		08				                .byte 8
6348	>e013		0d				                .byte $0D
6349	>e014		0d				                .byte $0D
6350							                ; terminating 0 comes from following table!
6352							                .endblock
6353	.e015						LE013:
6354	>e015		00				                .byte %00000000;$00
6355	>e016		11				                .byte %00010001;$11
6356	>e017		22				                .byte %00100010;$22
6357	>e018		33				                .byte %00110011;$33
6358	>e019		44				                .byte %01000100;$44
6359	>e01a		55				                .byte %01010101;$55
6360	>e01b		66				                .byte %01100110;$66
6361	>e01c		77				                .byte %01110111;$77
6362	>e01d		88				                .byte %10001000;$88
6363	>e01e		99				                .byte %10011001;$99
6364	>e01f		aa				                .byte %10101010;$AA
6365	>e020		bb				                .byte %10111011;$BB
6366	>e021		cc				                .byte %11001100;$CC
6367	>e022		dd				                .byte %11011101;$DD
6368	>e023		ee				                .byte %11101110;$EE
6369	>e024		ff				                .byte %11111111;$FF
6370	.e025						LE023:
6371	>e025		00				                .byte %00000000;$00
6372	>e026		55				                .byte %01010101;$55
6373	>e027		aa				                .byte %10101010;$AA
6374	>e028		ff				                .byte %11111111;$FF

6376							; VDU control code dispatch tables
6377							; ================================
6378							;
6379							; entry:
6380							;
6381							;

6383							; each routine is (address, number of additional VDU bytes)
6384	=[($c035,0)]					_:=[(vdu0EntryPoint,0)] ; VDU0
6385	=[($c035,0),($c0e1,1)]				_..=[(vdu1EntryPoint,1)] ; VDU1
6386	=[($c035,0),($c0e1,1),($c0e9,0)]		_..=[(vdu2EntryPoint,0)] ; VDU2
6387	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0)]	_..=[(vdu3EntryPoint,0)] ; VDU3
6388	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0)]
							_..=[(vdu4EntryPoint,0)] ; VDU4
6389	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0)]
							_..=[(vdu5EntryPoint,0)] ; VDU5
6390	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0)]
							_..=[(vdu6EntryPoint,0)] ; VDU6
6391	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0)]
							_..=[(vdu7EntryPoint,0)] ; VDU7
6392	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0)]
							_..=[(vdu8EntryPoint,0)] ; VDU8
6393	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0)]
							_..=[(vdu9EntryPoint,0)] ; VDU9
6394	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0)]
							_..=[(vdu10EntryPoint,0)] ; VDU10
6395	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0)]
							_..=[(vdu11EntryPoint,0)] ; VDU11
6396	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0)]
							_..=[(vdu12EntryPoint,0)] ; VDU12
6397	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0)]
							_..=[(vdu13EntryPoint,0)] ; VDU13
6398	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0)]
							_..=[(vdu14EntryPoint,0)] ; VDU14
6399	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0)]
							_..=[(vdu15EntryPoint,0)] ; VDU15
6400	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0)]
							_..=[(vdu16EntryPoint,0)] ; VDU16
6401	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1)]
							_..=[(vdu17EntryPoint,1)] ; VDU17
6402	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2)]
							_..=[(vdu18EntryPoint,2)] ; VDU18
6403	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5)]
							_..=[(vdu19EntryPoint,5)] ; VDU19
6404	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0)]
							_..=[(vdu20EntryPoint,0)] ; VDU20
6405	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0)]
							_..=[(vdu21EntryPoint,0)] ; VDU21
6406	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1)]
							_..=[(vdu22EntryPoint,1)] ; VDU22
6407	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9)]
							_..=[(vdu23EntryPoint,9)] ; VDU23
6408	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8)]
							_..=[(vdu24EntryPoint,8)] ; VDU24
6409	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5)]
							_..=[(vdu25EntryPoint,5)] ; VDU25
6410	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0)]
							_..=[(vdu26EntryPoint,0)] ; VDU26
6411	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0),($c035,0)]
							_..=[(vdu27EntryPoint,0)] ; VDU27
6412	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0),($c035,0),($c3a4,4)]
							_..=[(vdu28EntryPoint,4)] ; VDU28
6413	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0),($c035,0),($c3a4,4),($c789,4)]
							_..=[(vdu29EntryPoint,4)] ; VDU29
6414	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0),($c035,0),($c3a4,4),($c789,4),($c47b,0)]
							_..=[(vdu30EntryPoint,0)] ; VDU30
6415	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0),($c035,0),($c3a4,4),($c789,4),($c47b,0),($c481,2)]
							_..=[(vdu31EntryPoint,2)] ; VDU31
6416	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0),($c035,0),($c3a4,4),($c789,4),($c47b,0),($c481,2),($ce2d,0)]
							_..=[(vdu127EntryPoint,0)] ; VDU127
6417	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef10,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0),($c035,0),($c3a4,4),($c789,4),($c47b,0),($c481,2),($ce2d,0)]
							vdu_routines=_

6419							; LSB of routine address
6420	.e029						vduRoutinesLSBTable:
6421							                .for _i=0,_i<len(vdu_routines),_i+=1
6422	>e029		35				                .byte <vdu_routines[_i][0]
6422	>e02a		e1				                .byte <vdu_routines[_i][0]
6422	>e02b		e9				                .byte <vdu_routines[_i][0]
6422	>e02c		e9				                .byte <vdu_routines[_i][0]
6422	>e02d		1d				                .byte <vdu_routines[_i][0]
6422	>e02e		2c				                .byte <vdu_routines[_i][0]
6422	>e02f		35				                .byte <vdu_routines[_i][0]
6422	>e030		10				                .byte <vdu_routines[_i][0]
6422	>e031		99				                .byte <vdu_routines[_i][0]
6422	>e032		4b				                .byte <vdu_routines[_i][0]
6422	>e033		5a				                .byte <vdu_routines[_i][0]
6422	>e034		b0				                .byte <vdu_routines[_i][0]
6422	>e035		4e				                .byte <vdu_routines[_i][0]
6422	>e036		f5				                .byte <vdu_routines[_i][0]
6422	>e037		13				                .byte <vdu_routines[_i][0]
6422	>e038		27				                .byte <vdu_routines[_i][0]
6422	>e039		12				                .byte <vdu_routines[_i][0]
6422	>e03a		38				                .byte <vdu_routines[_i][0]
6422	>e03b		63				                .byte <vdu_routines[_i][0]
6422	>e03c		2c				                .byte <vdu_routines[_i][0]
6422	>e03d		c4				                .byte <vdu_routines[_i][0]
6422	>e03e		18				                .byte <vdu_routines[_i][0]
6422	>e03f		93				                .byte <vdu_routines[_i][0]
6422	>e040		7b				                .byte <vdu_routines[_i][0]
6422	>e041		1e				                .byte <vdu_routines[_i][0]
6422	>e042		9a				                .byte <vdu_routines[_i][0]
6422	>e043		a9				                .byte <vdu_routines[_i][0]
6422	>e044		35				                .byte <vdu_routines[_i][0]
6422	>e045		a4				                .byte <vdu_routines[_i][0]
6422	>e046		89				                .byte <vdu_routines[_i][0]
6422	>e047		7b				                .byte <vdu_routines[_i][0]
6422	>e048		81				                .byte <vdu_routines[_i][0]
6422	>e049		2d				                .byte <vdu_routines[_i][0]
6423							                .next

6425							; If bit 7 set: MSB of routine address
6426							;
6427							; If bit 7 clear:
6428							;
6429							; Top 4 bits are bits 8-11 of routine address (bits 12-15 are %1010,
6430							; so address is $C0xx to $C7xx)
6431							;
6432							; Bottom 4 bits are ORed with $f0 and stored in $26a - -ve bytes left
6433							; in VDU queue.
6434	.e04a						vduRoutinesMSBTable:
6435							                .for _i=0,_i<len(vdu_routines),_i+=1
6437	>e04a		c0				                .byte >vdu_routines[_i][0]
6441	>e04b		0f				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6437	>e04c		c0				                .byte >vdu_routines[_i][0]
6437	>e04d		c0				                .byte >vdu_routines[_i][0]
6437	>e04e		c5				                .byte >vdu_routines[_i][0]
6437	>e04f		c5				                .byte >vdu_routines[_i][0]
6437	>e050		c0				                .byte >vdu_routines[_i][0]
6437	>e051		ef				                .byte >vdu_routines[_i][0]
6437	>e052		c2				                .byte >vdu_routines[_i][0]
6437	>e053		c2				                .byte >vdu_routines[_i][0]
6437	>e054		c2				                .byte >vdu_routines[_i][0]
6437	>e055		c2				                .byte >vdu_routines[_i][0]
6437	>e056		c4				                .byte >vdu_routines[_i][0]
6437	>e057		c3				                .byte >vdu_routines[_i][0]
6437	>e058		c5				                .byte >vdu_routines[_i][0]
6437	>e059		c5				                .byte >vdu_routines[_i][0]
6437	>e05a		c4				                .byte >vdu_routines[_i][0]
6441	>e05b		5f				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6441	>e05c		5e				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6441	>e05d		6b				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6437	>e05e		c5				                .byte >vdu_routines[_i][0]
6437	>e05f		c5				                .byte >vdu_routines[_i][0]
6441	>e060		7f				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6441	>e061		67				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6441	>e062		78				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6441	>e063		6b				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6437	>e064		c6				                .byte >vdu_routines[_i][0]
6437	>e065		c0				                .byte >vdu_routines[_i][0]
6441	>e066		3c				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6441	>e067		7c				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6437	>e068		c4				                .byte >vdu_routines[_i][0]
6441	>e069		4e				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6437	>e06a		ce				                .byte >vdu_routines[_i][0]
6443							                .next

6445							;-------------------------------------------------------------------------
6446							;
6447							; entry:
6448							;
6449							; C=0
6450							;
6451							; A = vdu 23 code
6452							;
6453							; VDU queue = the full 9 bytes of the VDU 23
6454							;
6455	.e06b						vdu23EntryPointTable:
6456	>e06b		fa ce				                .word vdu23_0_EntryPoint
6457	>e06d		2a cf				                .word vdu23_1_EntryPoint
6458	>e06f		56 cf				                .word vdu23_2_EntryPoint
6459	>e071		56 cf				                .word vdu23_3_EntryPoint
6460	>e073		56 cf				                .word vdu23_4_EntryPoint
6461	>e075		56 cf				                .word vdu23_5_EntryPoint
6462	>e077		de cf				                .word vdu23_6_EntryPoint
6463	>e079		e5 cf				                .word vdu23_7_EntryPoint
6464	>e07b		68 d0				                .word vdu23_8_EntryPoint
6465	>e07d		0e d1				                .word vdu23_9_EntryPoint
6466	>e07f		0f d1				                .word vdu23_10_EntryPoint
6467	>e081		6c cf				                .word vdu23_11_EntryPoint
6468	>e083		95 cf				                .word vdu23_12_EntryPoint
6469	>e085		95 cf				                .word vdu23_13_EntryPoint
6470	>e087		95 cf				                .word vdu23_14_EntryPoint
6471	>e089		95 cf				                .word vdu23_15_EntryPoint
6472	>e08b		1d d1				                .word vdu23_16_EntryPoint

6474							;-------------------------------------------------------------------------
6475							;
6476							; entry:
6477							;
6478							; A = plot number
6479							;
6480	.e08d						plotEntryPointTable:
6481	>e08d		49 db				                .word plotPoint    ;64-71 = Plot point [MasRef E.3-24]
6482	>e08f		6b dc				                .word plotHorizontalLineFill ;72-79 = Horizontal line fill (left and right to non-background) [MasRef E.3-24]
6483	>e091		12 9c				                .word L9BF7 ;80-87 = Plot triangle [MasRef E.3-25]
6484	>e093		74 dc				                .word plotHorizontalLineFillRight ;88-95 = Horizontal line fill (right to background) [MasRef E.3-25]
6485	>e095		47 c4				                .word LC448 ;96-103 = Plot rectangle [MasRef E.3-26]
6486	>e097		6b dc				                .word plotHorizontalLineFill ;104-111 = Horizontal line fill (left and right to foreground) [MasRef E.3-26]
6487	>e099		be 9b				                .word plotParallelogram ;112-119 = Plot parallelogram [MasRef E.3-27]
6488	>e09b		74 dc				                .word plotHorizontalLineFillRight ;120-127 = Horizontal line fill (right to non-foreground) [MasRef E.3-27]
6489	>e09d		14 9d				                .word L9CF9 ;128-135 = Flood fill to non-background [MasRef E.3-28]
6490	>e09f		14 9d				                .word L9CF9 ;136-143 = Flood fill to foreground [MasRef E.3-28]
6491	>e0a1		bf 99				                .word L99A4 ;144-151 = Plot circle outline [MasRef E.3-28]
6492	>e0a3		5f 99				                .word L9944 ;152-159 = Plot filled circle [MasRef E.3-29]
6493	>e0a5		b4 99				                .word L9999 ;160-167 = Plot circular arc [MasRef E.3-29]
6494	>e0a7		50 99				                .word L9935 ;168-175 = Plot filled chord segment [MasRef E.3-30]
6495	>e0a9		3e 99				                .word L9923 ;176-183 = Plot filled sector [MasRef E.3-30]
6496	>e0ab		e2 df				                .word selectExtROMAndPlotMoveOrCopyRectangle ;184-191 = Move/copy rectangle [MasRef E.3-31]
6497	>e0ad		ec df				                .word selectExtROMAndPlotEllipseOutline ;192-199 = Plot ellipse outline [MasRef E.3-32]
6498	>e0af		f7 df				                .word selectExtROMAndPlotEllipseFilled ;200-207 = Plot solid ellipse [MasRef E.3-32]

6500							; Times 40 lookup table, high bytes
6501	.e0b1						multiplyBy40TableHigh:
6502							                .for _i=0,_i<25,_i+=1
6503	>e0b1		00				                .byte >_i*40
6503	>e0b2		00				                .byte >_i*40
6503	>e0b3		00				                .byte >_i*40
6503	>e0b4		00				                .byte >_i*40
6503	>e0b5		00				                .byte >_i*40
6503	>e0b6		00				                .byte >_i*40
6503	>e0b7		00				                .byte >_i*40
6503	>e0b8		01				                .byte >_i*40
6503	>e0b9		01				                .byte >_i*40
6503	>e0ba		01				                .byte >_i*40
6503	>e0bb		01				                .byte >_i*40
6503	>e0bc		01				                .byte >_i*40
6503	>e0bd		01				                .byte >_i*40
6503	>e0be		02				                .byte >_i*40
6503	>e0bf		02				                .byte >_i*40
6503	>e0c0		02				                .byte >_i*40
6503	>e0c1		02				                .byte >_i*40
6503	>e0c2		02				                .byte >_i*40
6503	>e0c3		02				                .byte >_i*40
6503	>e0c4		02				                .byte >_i*40
6503	>e0c5		03				                .byte >_i*40
6503	>e0c6		03				                .byte >_i*40
6503	>e0c7		03				                .byte >_i*40
6503	>e0c8		03				                .byte >_i*40
6503	>e0c9		03				                .byte >_i*40
6504							                .next

6506							; Times 40 lookup table, low bytes
6507	.e0ca						multiplyBy40TableLow:
6508							                .for _i=0,_i<25,_i+=1
6509	>e0ca		00				                .byte <_i*40
6509	>e0cb		28				                .byte <_i*40
6509	>e0cc		50				                .byte <_i*40
6509	>e0cd		78				                .byte <_i*40
6509	>e0ce		a0				                .byte <_i*40
6509	>e0cf		c8				                .byte <_i*40
6509	>e0d0		f0				                .byte <_i*40
6509	>e0d1		18				                .byte <_i*40
6509	>e0d2		40				                .byte <_i*40
6509	>e0d3		68				                .byte <_i*40
6509	>e0d4		90				                .byte <_i*40
6509	>e0d5		b8				                .byte <_i*40
6509	>e0d6		e0				                .byte <_i*40
6509	>e0d7		08				                .byte <_i*40
6509	>e0d8		30				                .byte <_i*40
6509	>e0d9		58				                .byte <_i*40
6509	>e0da		80				                .byte <_i*40
6509	>e0db		a8				                .byte <_i*40
6509	>e0dc		d0				                .byte <_i*40
6509	>e0dd		f8				                .byte <_i*40
6509	>e0de		20				                .byte <_i*40
6509	>e0df		48				                .byte <_i*40
6509	>e0e0		70				                .byte <_i*40
6509	>e0e1		98				                .byte <_i*40
6509	>e0e2		c0				                .byte <_i*40
6510							                .next

6512							; Times 640 lookup table, high bytes
6513	.e0e3						multiplyBy640TableHigh:
6514							                .for _i=0,_i<32,_i+=1
6515	>e0e3		00				                .byte >_i*640
6515	>e0e4		02				                .byte >_i*640
6515	>e0e5		05				                .byte >_i*640
6515	>e0e6		07				                .byte >_i*640
6515	>e0e7		0a				                .byte >_i*640
6515	>e0e8		0c				                .byte >_i*640
6515	>e0e9		0f				                .byte >_i*640
6515	>e0ea		11				                .byte >_i*640
6515	>e0eb		14				                .byte >_i*640
6515	>e0ec		16				                .byte >_i*640
6515	>e0ed		19				                .byte >_i*640
6515	>e0ee		1b				                .byte >_i*640
6515	>e0ef		1e				                .byte >_i*640
6515	>e0f0		20				                .byte >_i*640
6515	>e0f1		23				                .byte >_i*640
6515	>e0f2		25				                .byte >_i*640
6515	>e0f3		28				                .byte >_i*640
6515	>e0f4		2a				                .byte >_i*640
6515	>e0f5		2d				                .byte >_i*640
6515	>e0f6		2f				                .byte >_i*640
6515	>e0f7		32				                .byte >_i*640
6515	>e0f8		34				                .byte >_i*640
6515	>e0f9		37				                .byte >_i*640
6515	>e0fa		39				                .byte >_i*640
6515	>e0fb		3c				                .byte >_i*640
6515	>e0fc		3e				                .byte >_i*640
6515	>e0fd		41				                .byte >_i*640
6515	>e0fe		43				                .byte >_i*640
6515	>e0ff		46				                .byte >_i*640
6515	>e100		48				                .byte >_i*640
6515	>e101		4b				                .byte >_i*640
6515	>e102		4d				                .byte >_i*640
6516							                .next

6518							;-------------------------------------------------------------------------

6520	.e103						modeMaxRow:
6521	>e103		1f				                .byte 31                     ;MODE 0 = 32 rows
6522	>e104		1f				                .byte 31                     ;MODE 1 = 32 rows
6523	>e105		1f				                .byte 31                     ;MODE 2 = 32 rows
6524	>e106		18				                .byte 24                     ;MODE 3 = 25 rows
6525	>e107		1f				                .byte 31                     ;MODE 4 = 32 rows
6526	>e108		1f				                .byte 31                     ;MODE 5 = 32 rows
6527	>e109		18				                .byte 24                     ;MODE 6 = 25 rows
6528	>e10a		18				                .byte 24                     ;MODE 7 = 25 rows

6530							;-------------------------------------------------------------------------

6532	.e10b						modeMaxColumn:
6533	>e10b		4f				                .byte 79                     ;MODE 0 = 80 columns
6534	>e10c		27				                .byte 39                     ;MODE 1 = 40 columns
6535	>e10d		13				                .byte 19                     ;MODE 2 = 20 columns
6536	>e10e		4f				                .byte 79                     ;MODE 3 = 80 columns
6537	>e10f		27				                .byte 39                     ;MODE 4 = 40 columns
6538	>e110		13				                .byte 19                     ;MODE 5 = 20 columns
6539	>e111		27				                .byte 39                     ;MODE 6 = 40 columns
6540	>e112		27				                .byte 39                     ;MODE 7 = 40 columns

6542							;-------------------------------------------------------------------------

6544	.e113						vcontrolForScreenMODE:
6545	>e113		9c				                .byte VCONTROL.cursorX___|VCONTROL.crtc2MHz|VCONTROL.shift16MHz ; $9C - MODE 0
6546	>e114		d8				                .byte VCONTROL.cursorXX__|VCONTROL.crtc2MHz|VCONTROL.shift8MHz ; $d8 - MODE 1
6547	>e115		f4				                .byte VCONTROL.cursorXXXX|VCONTROL.crtc2MHz|VCONTROL.shift4MHz ; $F4 - MODE 2
6548	>e116		9c				                .byte VCONTROL.cursorX___|VCONTROL.crtc2MHz|VCONTROL.shift16MHz ; $9C - MODE 3
6549	>e117		88				                .byte VCONTROL.cursorX___|VCONTROL.crtc1MHz|VCONTROL.shift8MHz ; $88 - MODE 4
6550	>e118		c4				                .byte VCONTROL.cursorXX__|VCONTROL.crtc1MHz|VCONTROL.shift4MHz ; $C4 - MODE 5
6551	>e119		88				                .byte VCONTROL.cursorX___|VCONTROL.crtc1MHz|VCONTROL.shift8MHz ; $88 - MODE 6
6552	>e11a		4b				                .byte VCONTROL.cursor_X__|VCONTROL.crtc1MHz|VCONTROL.shift8MHz|VCONTROL.isTeletext|VCONTROL.flash ; $4B - MODE 7

6554							;-------------------------------------------------------------------------

6556	.e11b						bytesPerCharacterForMODE:
6557	>e11b		08				                .byte 8                      ;MODE 0
6558	>e11c		10				                .byte 16                     ;MODE 1
6559	>e11d		20				                .byte 32                     ;MODE 2
6560	>e11e		08				                .byte 8                      ;MODE 3
6561	>e11f		08				                .byte 8                      ;MODE 4
6562	>e120		10				                .byte 16                     ;MODE 5
6563	>e121		08				                .byte 8                      ;MODE 6
6564	.e122						LE120:
6565	>e122		01				                .byte %00000001              ;MODE 7
6566	>e123		ff				                .byte %11111111
6567	>e124		55				                .byte %01010101
6568	>e125		ff				                .byte %11111111
6569	>e126		77				                .byte %01110111
6570	>e127		33				                .byte %00110011
6571	>e128		11				                .byte %00010001

6573							;-------------------------------------------------------------------------

6575	.e129						distanceMasksTable:
6576	>e129		ff				                .byte %11111111
6577	>e12a		7f				                .byte %01111111
6578	>e12b		3f				                .byte %00111111
6579	>e12c		1f				                .byte %00011111
6580	>e12d		0f				                .byte %00001111
6581	>e12e		07				                .byte %00000111
6582	>e12f		03				                .byte %00000011
6583	>e130		01				                .byte %00000001

6585							;-------------------------------------------------------------------------
6586							;
6587							; These graphics tables often overlap. I haven't always bothered
6588							; commenting the MODEs for the MODE-indexed tables, as even those
6589							; sometimes overlap.
6590							;
6591							;------------------------------------------------------------------------

6593							;-------------------------------------------------------------------------
6594							;
6595							; This is 3 tables in one. Use the numberOfLogicalColoursMinusOne VDU
6596							; variable to access it:
6597							; pixelMasks[(numberOfLogicalColoursMinusOne&7)-1+colour&numberOfLogicalColoursMinusOne=
6598							;
6599	.e131						pixelMasks:
6600	>e131		aa				                .byte %10101010
6601	>e132		55				                .byte %01010101

6603	>e133		88				                .byte %10001000
6604	>e134		44				                .byte %01000100
6605	>e135		22				                .byte %00100010
6606	>e136		11				                .byte %00010001

6608	>e137		80				                .byte %10000000
6609	>e138		40				                .byte %01000000
6610	>e139		20				                .byte %00100000
6611	>e13a		10				                .byte %00010000
6612	>e13b		08				                .byte %00001000
6613	>e13c		04				                .byte %00000100
6614	>e13d		02				                .byte %00000010
6615	.e13e						numberOfLogicalColoursMinusOneForMODE:
6616	>e13e		01				                .byte %00000001              ;MODE 0 (also part of pixelMasks)
6617	>e13f		03				                .byte 3                      ;MODE 1
6618	>e140		0f				                .byte 15                     ;MODE 2
6619	>e141		01				                .byte 1                      ;MODE 3
6620	>e142		01				                .byte 1                      ;MODE 4
6621	>e143		03				                .byte 3                      ;MODE 5
6622	>e144		01				                .byte 1                      ;MODE 6
6623							                ; MODE 7 value (0) is in next table

6625							;-------------------------------------------------------------------------
6626							;
6627							; Overwrite: ZGORA=$ff, ZGEOR=$ff
6628							; OR: ZGORA=value, ZGEOR=$00
6629							; AND: ZGORA=~value, ZGEOR=$00
6630							; EOR: ZGORA=$00, ZGEOR=value
6631							; Invert: ZGORA=$00, ZGEOR=$ff
6632							; Leave: ZGORA=$00, ZGEOR=$ff
6633							;
6634	.e145						zgeorORTable:
6635	>e145		00				                .byte $00
6636	.e146						zgoraORTable:
6637	>e146		ff				                .byte $FF
6638	.e147						zgoraEORTable:
6639	>e147		00				                .byte $00
6640	>e148		00				                .byte $00
6641	>e149		ff				                .byte $FF
6642	.e14a						zgeorEORTable:
6643	>e14a		ff				                .byte $FF
6644	>e14b		ff				                .byte $FF
6645	>e14c		ff				                .byte $FF
6646	>e14d		00				                .byte $00

6648							;-------------------------------------------------------------------------
6649							;
6650							; Index using logical colour value to get a byte with that colour
6651							; value in every pixel.
6652							;
6653							; This is 3 tables in one. Use the numberOfLogicalColoursMinusOne VDU
6654							; variable to access it:
6655							; solidColoursTable[(numberOfLogicalColoursMinusOne&7)-1+colour&numberOfLogicalColoursMinusOne=
6656							;
6657	.e14e						solidColoursTable:

6659							                ; 1 bpp
6660	>e14e		00				                .byte %00000000
6661	>e14f		ff				                .byte %11111111

6663							                ; 2 bpp
6664	>e150		00				                .byte %00000000
6665	>e151		0f				                .byte %00001111
6666	>e152		f0				                .byte %11110000
6667	>e153		ff				                .byte %11111111

6669							                ; 4 bpp
6670	>e154		00				                .byte %00000000
6671	>e155		03				                .byte %00000011
6672	>e156		0c				                .byte %00001100
6673	>e157		0f				                .byte %00001111
6674	>e158		30				                .byte %00110000
6675	>e159		33				                .byte %00110011
6676	>e15a		3c				                .byte %00111100
6677	>e15b		3f				                .byte %00111111
6678	>e15c		c0				                .byte %11000000
6679	>e15d		c3				                .byte %11000011
6680	>e15e		cc				                .byte %11001100
6681	>e15f		cf				                .byte %11001111
6682	>e160		f0				                .byte %11110000
6683	>e161		f3				                .byte %11110011
6684	>e162		fc				                .byte %11111100
6685	>e163		ff				                .byte %11111111

6687	.e164						pixelsPerByteMinusOneForMODE:
6688	>e164		07				                .byte 7
6689	>e165		03				                .byte 3
6690	>e166		01				                .byte 1
6691	.e167						LE165:
6692	>e167		00				                .byte 0
6693	>e168		07				                .byte 7
6694	>e169		03				                .byte 3
6695	.e16a						screenMODEGroupForMODE:
6696	>e16a		00				                .byte 0
6697	>e16b		00				                .byte 0
6698	.e16c		00		brk #		                brk
6699	.e16d		01 02		ora ($02,x)	                ora ($02,x)
6700	>e16f		02				                .byte $02
6701	>e170		03				                .byte $03
6702							;TSB &0D          :\ E16F= 04 0D       ..
6703	>e171		04				                .byte $04

6705							;-------------------------------------------------------------------------
6706							;
6707							; Hardware scrolling wraparound size settings for screen mode group.
6708							;
6709							; The values for group 4 (1 KB) are bogus - the Mode 7 addressing
6710							; wraparound is handled differently.
6711							;
6712	.e172						latchBit5ForScreenMODEGroup:
6713	>e172		0d				                .byte 5|8                    ;20 KB
6714	>e173		05				                .byte 5|0                    ;16 KB
6715	>e174		0d				                .byte 5|8                    ;10 KB
6716	>e175		05				                .byte 5|0                    ; 8 KB
6717	.e176						latchBit4ForScreenMODEGroup:
6718	>e176		04				                .byte 4|0                    ;20 KB (also benign value for 1 KB)
6719	>e177		04				                .byte 4|0                    ;16 KB
6720	>e178		0c				                .byte 4|8                    ;10 KB
6721	>e179		0c				                .byte 4|8                    ; 8 KB
6722	>e17a		04				                .byte 4|0                    ;(benign value for 1 KB)

6724							;-------------------------------------------------------------------------

6726	.e17b						screenSizeHighByteForScreenMODEGroup:
6727	>e17b		50				                .byte $50
6728	>e17c		40				                .byte $40
6729	>e17d		28				                .byte $28
6730	>e17e		20				                .byte $20
6731	>e17f		04				                .byte $04
6732	.e180						startScreenAddressHighByteForScreenMODEGroup:
6733	>e180		30				                .byte $30
6734	>e181		40				                .byte $40
6735	>e182		58				                .byte $58
6736	>e183		60				                .byte $60
6737	>e184		7c				                .byte $7c
6738	.e185						crtcRegisterLastIndexForScreenMODEGroup:
6739	>e185		0b				                .byte (crtcRegisterValues20KB-crtcRegisterValues)+$0B
6740	>e186		17				                .byte (crtcRegisterValues16KB-crtcRegisterValues)+$0B
6741	>e187		23				                .byte (crtcRegisterValues10KB-crtcRegisterValues)+$0B
6742	>e188		2f				                .byte (crtcRegisterValues8KB-crtcRegisterValues)+$0B
6743	>e189		3b				                .byte (crtcRegisterValues1KB-crtcRegisterValues)+$0B
6744	.e18a						crtcRegisterValues:
6745	.e18a						crtcRegisterValues20KB:                   ;MODEs 0/1/2
6746	>e18a		7f				                .byte $7F            ;R0 - Horizontal Total
6747	>e18b		50				                .byte $50            ;R1 - Horizontal Displayed
6748	>e18c		62				                .byte $62            ;R2 - Horizontal Sync
6749	>e18d		28				                .byte $28            ;R3 - Sync Width (%vvvvhhhh)
6750	>e18e		26				                .byte $26            ;R4 - Vertical Total
6751	>e18f		00				                .byte $00            ;R5 - Vertical Total Adjust
6752	>e190		20				                .byte $20            ;R6 - Vertical Displayed
6753	>e191		22				                .byte $22            ;R7 - Vertical Sync Position
6754	>e192		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6755	>e193		07				                .byte $07               ;R9 - Scan lines per character
6756	>e194		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6757	>e195		08				                .byte 8                    ;R11 - Cursor End
6758	.e196						crtcRegisterValues16KB:                    ;MODE 3
6759	>e196		7f				                .byte $7F                 ;R0 - Horizontal Total
6760	>e197		50				                .byte $50                 ;R1 - Horizontal Displayed
6761	>e198		62				                .byte $62                 ;R2 - Horizontal Sync
6762	>e199		28				                .byte $28                 ;R3 - Sync Width (%vvvvhhhh)
6763	>e19a		1e				                .byte $1e                 ;R4 - Vertical Total
6764	>e19b		02				                .byte $02                 ;R5 - Vertical Total Adjust
6765	>e19c		19				                .byte $19                 ;R6 - Vertical Displayed
6766	>e19d		1b				                .byte $1B                 ;R7 - Vertical Sync Position
6767	>e19e		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6768	>e19f		09				                .byte $09               ;R9 - Scan lines per character
6769	>e1a0		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6770	>e1a1		09				                .byte 9                      ;R11 - Cursor End
6771	.e1a2						crtcRegisterValues10KB:                      ;MODEs 4/5
6772	>e1a2		3f				                .byte $3f                 ;R0 - Horizontal Total
6773	>e1a3		28				                .byte $28                 ;R1 - Horizontal Displayed
6774	>e1a4		31				                .byte $31                 ;R2 - Horizontal Sync
6775	>e1a5		24				                .byte $24                 ;R3 - Sync Width (%vvvvhhhh)
6776	>e1a6		26				                .byte $26                 ;R4 - Vertical Total
6777	>e1a7		00				                .byte $00                 ;R5 - Vertical Total Adjust
6778	>e1a8		20				                .byte $20                 ;R6 - Vertical Displayed
6779	>e1a9		22				                .byte $22                 ;R7 - Vertical Sync Position
6780	>e1aa		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6781	>e1ab		07				                .byte $07               ;R9 - Scan lines per character
6782	>e1ac		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6783	>e1ad		08				                .byte 8                      ;R11 - Cursor End
6784	.e1ae						crtcRegisterValues8KB:                       ;MODE 6
6785	>e1ae		3f				                .byte $3F                 ;R0 - Horizontal Total
6786	>e1af		28				                .byte $28                 ;R1 - Horizontal Displayed
6787	>e1b0		31				                .byte $31                 ;R2 - Horizontal Sync
6788	>e1b1		24				                .byte $24                 ;R3 - Sync Width (%vvvvhhhh)
6789	>e1b2		1e				                .byte $1e                 ;R4 - Vertical Total
6790	>e1b3		02				                .byte $02                 ;R5 - Vertical Total Adjust
6791	>e1b4		19				                .byte $19                 ;R6 - Vertical Displayed
6792	>e1b5		1b				                .byte $1B                 ;R7 - Vertical Sync Position
6793	>e1b6		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6794	>e1b7		09				                .byte $09               ;R9 - Scan lines per character
6795	>e1b8		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6796	>e1b9		09				                .byte 9                      ;R11 - Cursor End
6797	.e1ba						crtcRegisterValues1KB:                       ;MODE 7
6798	>e1ba		3f				                .byte $3f                 ;R0 - Horizontal Total
6799	>e1bb		28				                .byte $28                 ;R1 - Horizontal Displayed
6800	>e1bc		33				                .byte $33                 ;R2 - Horizontal Sync
6801	>e1bd		24				                .byte $24                 ;R3 - Sync Width (%vvvvhhhh)
6802	>e1be		1e				                .byte $1e                 ;R4 - Vertical Total
6803	>e1bf		02				                .byte $02                 ;R5 - Vertical Total Adjust
6804	>e1c0		19				                .byte $19                 ;R6 - Vertical Displayed
6805	>e1c1		1b				                .byte $1b                 ;R7 - Vertical Sync Position
6806	>e1c2		93				                .byte CRTC.R8.cursorDelay2|CRTC.R8.displayDelay1|CRTC.R8.interlaceSyncAndVideo ;R8 - Interlace/Delay
6807	>e1c3		12				                .byte $12               ;R9 - Scan lines per character
6808	>e1c4		72				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|18 ;R10 - Cursor blink/start
6809	>e1c5		13				                .byte 19                     ;R11 - Cursor End

6811							;-------------------------------------------------------------------------
6812							;
6813							; Default ECF patterns [MasRef E.3-16]
6814							;
6815							; Only half the pattern is stored. Each pattern repeats every 4
6816							; scanlines.
6817							;
6818	.e1c6						defaultECFPatterns:
6819							                ; MODE 4
6820	>e1c6		aa 00 aa 00			                .byte $aa,$00,$aa,$00        ;1 - Dark grey
6821	>e1ca		aa 55 aa 55			                .byte $aa,$55,$aa,$55        ;2 - Grey
6822	>e1ce		ff 55 ff 55			                .byte $ff,$55,$ff,$55        ;3 - Light grey
6823	>e1d2		11 22 44 88			                .byte $11,$22,$44,$88        ;4 - Hatching

6825							                ; MODE 1/5
6826	>e1d6		a5 0f a5 0f			                .byte $a5,$0f,$a5,$0f        ;1 - Red-orange
6827	>e1da		a5 5a a5 5a			                .byte $a5,$5a,$a5,$5a        ;2 - Orange
6828	>e1de		f0 5a f0 5a			                .byte $f0,$5a,$f0,$5a        ;3 - Yellow-orange
6829	>e1e2		f5 fa f5 fa			                .byte $f5,$fa,$f5,$fa        ;4 - Cream

6831							                ; MODE 2
6832	>e1e6		0b 07 0b 07			                .byte $0b,$07,$0b,$07        ;1 - Orange
6833	>e1ea		23 13 23 13			                .byte $23,$13,$23,$13        ;2 - Pink
6834	>e1ee		0e 0d 0e 0d			                .byte $0e,$0d,$0e,$0d        ;3 - Yellow-green
6835	>e1f2		1f 2f 1f 2f			                .byte $1f,$2f,$1f,$2f        ;4 - Cream

6837							                ; MODE 0
6838	>e1f6		cc 00 cc 00			                .byte $cc,$00,$cc,$00        ;0 - Dark grey
6839	>e1fa		cc 33 cc 33			                .byte $cc,$33,$cc,$33        ;1 - Grey
6840	>e1fe		ff 33 ff 33			                .byte $ff,$33,$ff,$33        ;2 - Light grey
6841	>e202		03 0c 30 c0			                .byte $03,$0c,$30,$c0        ;4 - Hatching

6843	.e206						LE204:
6844	>e206		01				                .byte $01                    ;---
6845	>e207		01				                .byte $01                    ;--h
6846	>e208		03				                .byte $03                    ;-v-
6847	>e209		03				                .byte $03                    ;-vh
6848	>e20a		02				                .byte $02                    ;x--
6849	>e20b		00				                .byte $00                    ;x-h
6850	>e20c		02				                .byte $02                    ;xv-
6851	>e20d		00				                .byte $00                    ;xvh

6853	.e20e						scrollRoutinesTable:
6854	>e20e		5f c9				                .word LC95F
6855	>e210		6b c9				                .word LC96B
6856	>e212		5f c9				                .word LC95F
6857	>e214		6b c9				                .word LC96B
6858	>e216		9d c9				                .word LC99D
6859	>e218		9d c9				                .word LC99D
6860	>e21a		a4 c9				                .word LC9A4
6861	>e21c		a4 c9				                .word LC9A4
6862	>e21e		c3 c9				                .word LC9C3
6863	>e220		2d ca				                .word LCA2D
6864	>e222		c3 c9				                .word LC9C3
6865	>e224		2d ca				                .word LCA2D
6866	>e226		f1 ca				                .word LCAF1
6867	>e228		f1 ca				                .word LCAF1
6868	>e22a		fa ca				                .word LCAFA
6869	>e22c		fa ca				                .word LCAFA

6871							;-------------------------------------------------------------------------
6872							;
6873							; Get address of soft character definition.
6874							;
6875							; entry:
6876							;
6877							; A = character (32-255)
6878							;
6879							; exit:
6880							;
6881							; (ZTEMPC) = address
6882							;
6883	.e22e						getSoftCharacterDefinitionAddress:
6884	.e22e		0a		asl a		                asl a                        ;a bcdefgh0
6885	.e22f		2a		rol a		                rol a                        ;b cdefgh0a
6886	.e230		2a		rol a		                rol a                        ;c defgh0ab
6887	.e231		a8		tay		                tay
6888	.e232		29 03		and #$03	                and #$03                     ;c 000000ab
6889	.e234		2a		rol a		                rol a                        ;0 00000abc
6890	.e235		69 88		adc #$88	                adc #(>andy.softCharacterDefinitions)-1
6891	.e237		85 df		sta $df		                sta ZTEMPC+1
6892	.e239		98		tya		                tya                          ;0 defgh0ab
6893	.e23a		29 f8		and #$f8	                and #$F8                     ;0 defgh000
6894	.e23c		85 de		sta $de		                sta ZTEMPC+0
6895	.e23e		60		rts		                rts                          ;

6897							;-------------------------------------------------------------------------
6898							;
6899							; OSBYTE 165 (&A5) Read output cursor position [MasRef D.2-50]
6900							;
6901	.e23f						osbyteA5:
6902	.e23f		20 24 f3	jsr $f324	                jsr withMOSROM
6903	.e242		24 d0		bit $d0		                bit STATE
6904	.e244		50 0e		bvc $e254	                bvc getTextCursorPositionWithColumn81                    ;taken if cursor editing
6905	.e246		20 b0 e2	jsr $e2b0	                jsr exchangeEditCursorPositionAndTextCursorPosition
6906	.e249		20 54 e2	jsr $e254	                jsr getTextCursorPositionWithColumn81
6907	.e24c		da		phx		                phx
6908	.e24d		5a		phy		                phy
6909	.e24e		20 b0 e2	jsr $e2b0	                jsr exchangeEditCursorPositionAndTextCursorPosition
6910	.e251		7a		ply		                ply
6911	.e252		fa		plx		                plx
6912	.e253		60		rts		                rts

6914							;-------------------------------------------------------------------------
6915							;
6916							; Get text cursor position, taking the column 81 flag into account and
6917							; reporting the X coordinate as N+1 in that case.
6918							;
6919	.e254						getTextCursorPositionWithColumn81:
6920	.e254		20 6f e2	jsr $e26f	                jsr getTextCursorPosition
6921	.e257		2c 6c 03	bit $036c	                bit vduv.column81
6922	.e25a		10 01		bpl $e25d	                bpl +                       ;taken if not at column 81
6923	.e25c		e8		inx		                inx                         ;X=81
6924	.e25d						+
6925	.e25d		60		rts		                rts

6927							;-------------------------------------------------------------------------

6929	.e25e						LE25C:
6930	.e25e		38		sec		                sec
6931	.e25f		ad 0a 03	lda $030a	                lda vduv.textWindowRight
6932	.e262		ed 08 03	sbc $0308	                sbc vduv.textWindowLeft
6933	.e265		48		pha		                pha
6934	.e266		a9 00		lda #$00	                lda #$00
6935	.e268		a8		tay		                tay
6936	.e269		80 10		bra $e27b	                bra LE279

6938							;-------------------------------------------------------------------------
6939							;
6940							; OSBYTE 134 (&86) Read text cursor position [MasRef D.2-41]
6941							;
6942	.e26b						osbyte86:
6943	.e26b		24 d0		bit $d0		                bit STATE
6944	.e26d		50 d0		bvc $e23f	                bvc osbyteA5       ;taken if not cursor editing
6945	.e26f						getTextCursorPosition:
6946	.e26f		a9 02		lda #$02	                lda #VDUVariables.cursorFlags.invertHorizontal
6947	.e271		a0 10		ldy #$10	                ldy #VDUVariables.textCursorXPosition-VDUVariables.textWindow
6948	.e273		a2 00		ldx #$00	                ldx #VDUVariables.textWindowLeft-VDUVariables.textWindow
6949	.e275		20 8c e2	jsr $e28c	                jsr getTextWindowRelativePosition
6950	.e278		48		pha		                pha                          ;save X position
6951	.e279		a9 04		lda #$04	                lda #VDUVariables.cursorFlags.invertVertical
6952	.e27b						LE279:
6953	.e27b		c8		iny		                iny               ;i.e., offset of textCursorYPosition
6954	.e27c		a2 03		ldx #$03	                ldx #VDUVariables.textWindowTop-VDUVariables.textWindow
6955	.e27e		20 8c e2	jsr $e28c	                jsr getTextWindowRelativePosition
6956	.e281		aa		tax		                tax                          ;X = Y position
6957	.e282		a8		tay		                tay                          ;Y = Y position
6958	.e283		a9 08		lda #$08	                lda #vduv.cursorFlags.swapAxes
6959	.e285		2c 66 03	bit $0366	                bit vduv.cursorFlags
6960	.e288		f0 24		beq $e2ae	                beq plx_rts ;taken if axes unswapped - so X = X position, Y = Y position
6961	.e28a		7a		ply		                ply                          ;Y = Y position, X = X position
6962	.e28b		60		rts		                rts

6964							;-------------------------------------------------------------------------
6965							;
6966							; Get text window-relative cursor position, taking into account cursor
6967							; flags.
6968							;
6969							; entry:
6970							;
6971							; A = cursorFlags bit for axis of interest - invertHorizontal or invertVertical
6972							;
6973							; X = offset in VDU variables of text window minimum for axis of interest
6974							;
6975							; Y = offset in VDU variables of cursor position for axis of interest
6976							;
6977							; exit:
6978							;
6979							; A = text window-relative coordinate
6980							;
6981	.e28c						getTextWindowRelativePosition:
6982	.e28c		38		sec		                sec                     ;C=1 ready for the subtraction
6983	.e28d		2c 66 03	bit $0366	                bit vduv.cursorFlags ;test cursor flags inversion bit of interest
6984	.e290		f0 0b		beq $e29d	                beq axisNotInverted
6985	.e292						axisInverted:
6986	.e292		8a		txa		                txa
6987	.e293		49 02		eor #$02	                eor #$02                     ;swap min and max
6988	.e295		aa		tax		                tax
6989	.e296		bd 08 03	lda $0308,x	                lda vduv.textWindow,x
6990	.e299		f9 08 03	sbc $0308,y	                sbc vduv.textWindow,y
6991	.e29c		60		rts		                rts

6993	.e29d						axisNotInverted:
6994	.e29d		b9 08 03	lda $0308,y	                lda vduv.textWindow,y
6995	.e2a0		fd 08 03	sbc $0308,x	                sbc vduv.textWindow,x
6996	.e2a3		60		rts		                rts

6998							;-------------------------------------------------------------------------
6999							;
7000							; Get default bounds for current mode.
7001							;
7002							; exit:
7003							;
7004							; X = max column (19, 39 or 79)
7005							;
7006							; Y = max row (24 or 31)
7007							;
7008							; preserves: A, C
7009							;
7010	.e2a4						getDefaultBoundsForCurrentScreenMODE:
7011	.e2a4		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
7012	.e2a7		bc 0b e1	ldy $e10b,x	                ldy modeMaxColumn,x          ;Y = max column
7013	.e2aa		5a		phy		                phy                          ;save max column
7014	.e2ab		bc 03 e1	ldy $e103,x	                ldy modeMaxRow,x             ;Y = max row
7015	.e2ae						plx_rts:
7016	.e2ae		fa		plx		                plx                          ;X = max column
7017	.e2af		60		rts		                rts

7019							;-------------------------------------------------------------------------
7020							;
7021							; Swap edit cursor position and text cursor position.
7022							;
7023	.e2b0						exchangeEditCursorPositionAndTextCursorPosition:
7024	.e2b0		a2 18		ldx #$18	                ldx #VDUVariables.textCursorXPosition
7025	.e2b2		a0 64		ldy #$64	                ldy #VDUVariables.editCursorXPosition

7027							;-------------------------------------------------------------------------
7028							;
7029							; Swap 2 bytes in the VDU variables.
7030							;
7031							; entry:
7032							;
7033							; X = offset of one set of 2 bytes
7034							;
7035							; Y = offset of the other set of 2 bytes
7036							;
7037	.e2b4						exchangeTwoVDUBytes:
7038	.e2b4		a9 02		lda #$02	                lda #$02
7039	.e2b6		80 06		bra $e2be	                bra exchangeVDUVariables

7041							;-------------------------------------------------------------------------
7042							;
7043							; Swap graphics cursor and old graphics cursor.
7044							;
7045	.e2b8						LE2B6:
7046	.e2b8		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX
7047	.e2ba						LE2B8:
7048	.e2ba		a0 14		ldy #$14	                ldy #VDUVariables.oldGraphicsCursorPixelsX

7050							;-------------------------------------------------------------------------
7051							;
7052							; Swap 4 bytes in the VDU variables.
7053							;
7054							; entry:
7055							;
7056							; X = offset of one set of 4 bytes
7057							;
7058							; Y = offset of the other set of 4 bytes
7059							;
7060	.e2bc						exchangeFourVDUBytes:
7061	.e2bc		a9 04		lda #$04	                lda #$04

7063							;-------------------------------------------------------------------------
7064							;
7065							; Swap bytes in the VDU variables.
7066							;
7067							; entry:
7068							;
7069							; A = number of bytes to swap
7070							;
7071							; X = offset of one set of bytes
7072							;
7073							; Y = offset of the other set of bytes
7074							;
7075	.e2be						exchangeVDUVariables:
7076	.e2be		48		pha		                pha                          ;save count remaining
7077	.e2bf		bd 00 03	lda $0300,x	                lda vduv,x
7078	.e2c2		48		pha		                pha
7079	.e2c3		b9 00 03	lda $0300,y	                lda vduv,y
7080	.e2c6		9d 00 03	sta $0300,x	                sta vduv,x
7081	.e2c9		68		pla		                pla
7082	.e2ca		99 00 03	sta $0300,y	                sta vduv,y
7083	.e2cd		e8		inx		                inx
7084	.e2ce		c8		iny		                iny
7085	.e2cf		68		pla		                pla
7086	.e2d0		3a		dec a		                dec a
7087	.e2d1		d0 eb		bne $e2be	                bne exchangeVDUVariables
7088	.e2d3		60		rts		                rts

7090							;-------------------------------------------------------------------------
7091							;
7092							; Test current VDU4/VDU5 status.
7093							;
7094							; exit:
7095							;
7096							; Z=0 if VDU5 mode
7097	.e2d4						testVDU5StateNonInlined:
7098	.e2d4		a5 d0		lda $d0		                lda STATE
7099	.e2d6		29 20		and #$20	                and #STATE.isVDU5
7100	.e2d8		60		rts		                rts

7102							;-------------------------------------------------------------------------

7105	.e2d9						LE2E7:
7106	.e2d9		20 24 f3	jsr $f324	                jsr withMOSROM
7107	.e2dc		4c 05 e9	jmp $e905	                jmp callPrinterDriverWithPrinterBuffer

7110							;-------------------------------------------------------------------------

7113	.e2df						LE2ED:
7114	.e2df		20 24 f3	jsr $f324	                jsr withMOSROM
7115	.e2e2		4c 84 e8	jmp $e884	                jmp LE8B9

7118							;-------------------------------------------------------------------------

7121	.e2e5						LE2F3:
7122	.e2e5		20 24 f3	jsr $f324	                jsr withMOSROM
7123	.e2e8		6c 26 02	jmp ($0226)	                jmp (VDUV)

7126							;-------------------------------------------------------------------------

7128							; Default vector table
7129							; ====================
7130	.e2eb						defaultVectorTable: .block
7131	>e2eb		20 f9				                .word badCommandError        ; USERV=$200
7132	>e2ed		30 e5				                .word defaultBRKHandler      ; BRKV=$202
7133	>e2ef		ca e5				                .word irq1EntryPoint         ; IRQ1V=$204
7134	>e2f1		d7 e5				                .word irq2EntryPoint         ; IRQ2V=$206
7135	>e2f3		cf e7				                .word oscliEntryPoint        ; CLIV=$208
7136	>e2f5		18 ee				                .word osbyteEntryPoint       ; BYTEV=$20a
7137	>e2f7		8f ee				                .word oswordEntryPoint       ; WORDV=$20c
7138	>e2f9		ef e7				                .word oswrchEntryPoint       ; WRCHV=$20e
7139	>e2fb		89 e7				                .word osrdchEntryPoint       ; RDCHV=$210
7140	.e2fd						fsVectors: .block
7141	>e2fd		1b ff				                .word E_FILEV                ; FILEV=$212
7142	>e2ff		1e ff				                .word E_ARGSV                ; ARGSV=$214
7143	>e301		21 ff				                .word E_BGETV                ; BGETV=$216
7144	>e303		24 ff				                .word E_BPUTV                ; BPUTV=$218
7145	>e305		27 ff				                .word E_GBPBV                ; GBPBV=$21a
7146	>e307		2a ff				                .word E_FINDV                ; FINDV=$21c
7147	>e309		2d ff				                .word E_FSCV                 ; FSCV=$21e
7148	.e30b						end:
7149							                .bend
7150	>e30b		aa ff				                .word rtsFFAA                ; EVENTV=$220
7151	>e30d		aa ff				                .word rtsFFAA                ; UPTV=$222
7152	>e30f		aa ff				                .word rtsFFAA                ; NETV=$224
7153	>e311		aa ff				                .word rtsFFAA                ; VDUV=$226
7154	>e313		1e f4				                .word keyEntryPoint          ; KEYV=$228
7155	>e315		08 ea				                .word insEntryPoint          ; INSV=$22a
7156	>e317		bd e9				                .word remEntryPoint          ; REMV=$22c
7157	>e319		46 e9				                .word cnpEntryPoint          ; CNPV=$22e
7158	>e31b		aa ff				                .word rtsFFAA                ; IND1V=$230
7159	>e31d		aa ff				                .word rtsFFAA                ; IND2V=$232
7160	>e31f		aa ff				                .word rtsFFAA                ; IND3V=$234
7161	.e321						end:
7162							                .bend

7164							                ; valueFF is a (presumably arbitrary) byte with the
7165							                ; value 255, that's BIT'd in a few places to set the V
7166							                ; flag.
7167	.e321						defaultMOSVariables:
7168	>e321		90 01				                .word mosVariables-166       ;mosVariablesAddress
7169	>e323		9f 0d				                .word extendedVectorSpace    ;extendedVectorSpaceAddress
7170	>e325		a1 02				                .word romInformationTable  ;romInformationTableAddress
7171	>e327		97 f5				                .word keyTranslationTable-16 ;keyboardTranslationTableAddress
7172	>e329		00 03				                .word vduv                   ;vduVariablesAddress
7173	>e32b		00				                .byte $00                    ;cfsTimeoutCounter
7174	>e32c		00				                .byte $00                    ;inputSource
7175	>e32d		ff				                .byte $FF                    ;keyboardSemaphore
7176	>e32e		00				                .byte $00                    ;romPollingSemaphore
7177	>e32f		00				                .byte $00                    ;oshwm
7178	>e330		01				                .byte $01                    ;rs423InputInterpretationStatus
7179	>e331		00				                .byte $00                    ;noignoreState
7180	>e332		00				                .byte $00                    ;cfsRFSFSSwitch
7181	>e333		00				                .byte $00                    ;vcontrolRegister
7182	>e334		00				                .byte $00                    ;vpaletteRegister
7183	>e335		00				                .byte $00                    ;romActiveAtLastBRK
7184	>e336		ff				                .byte $FF                    ;basicROMNumber
7186	>e337		04				                .byte $04                    ;currentADCChannel
7187	>e338		04				                .byte $04                    ;maximumADCChannel
7192	>e339		00				                .byte $00                    ;adcConversionType
7193	>e33a		ff				                .byte $FF                    ;rs423Busy
7197	>e33b		42				                .byte $42                    ;aciaControlRegister
7199	>e33c		19				                .byte $19                    ;flashCounter
7200	>e33d		19				                .byte $19                    ;firstFlashColourDuration
7201	>e33e		19				                .byte $19                    ;secondFlashColourDuration
7202	>e33f		32				                .byte $32                    ;keyboardAutoRepeatDelay
7203	>e340		08				                .byte $08                    ;keyboardAutoRepeatRate
7204	>e341		00				                .byte $00                    ;execFileHandle
7205	>e342		00				                .byte $00                    ;spoolFileHandle
7206	>e343		00				                .byte $00                    ;breakAndESCAPEEffect
7207	>e344		00				                .byte $00                    ;keyboardStatus
7208	>e345		20				                .byte $20                    ;keyboardStatusByte
7209	>e346		09				                .byte $09                    ;rs423InputBufferMinimumSpace
7210	>e347		00				                .byte $00                    ;rs423Ignore
7211	>e348		00				                .byte $00                    ;rs423Destination
7212	>e349		00				                .byte $00                    ;econetInterceptionStatus
7213	>e34a		00				                .byte $00                    ;econetInputInterpretationStatus
7214	>e34b		00				                .byte $00                    ;econetOutputInterpretationStatus
7215	>e34c		00				                .byte $00                    ;speechSystemByte1
7216	>e34d		00				                .byte $00                    ;soundSuppressionStatus
7217	>e34e		03				                .byte $03                    ;bellChannel
7218	>e34f		90				                .byte $90                    ;bellSound
7219	>e350		64				                .byte $64                    ;bellFrequency
7220	>e351		06				                .byte $06                    ;bellDuration
7221	>e352		81				                .byte $81                    ;startupMessageSuppressionStatus
7222	>e353		00				                .byte $00                    ;softKeyStringLength
7223	>e354		00				                .byte $00                    ;pagedModeCounter
7224	>e355		00				                .byte $00                    ;vduQueueNegativeLength
7225	>e356		09				                .byte $09                    ;tabKeyCode
7226	>e357		1b				                .byte $1B                    ;escapeCharacter
7227	>e358		01				                .byte $01                    ;input192To207Interpretation
7228	>e359		d0				                .byte $D0                    ;input208To223Interpretation
7229	>e35a		e0				                .byte $E0                    ;input224To239Interpretation
7230	>e35b		f0				                .byte $F0                    ;input240To255Interpretation
7231	>e35c		01				                .byte $01                    ;softKeyInterpretation
7232	>e35d		80				                .byte $80                    ;shiftSoftKeyInterpretation
7233	>e35e		90				                .byte $90                    ;ctrlSoftKeyInterpretation
7234	>e35f		00				                .byte $00                    ;shiftCtrlSoftKeyInterpretation
7235	>e360		00				                .byte $00                    ;escapeKeyStatus
7236	>e361		00				                .byte $00                    ;escapeEffects
7237	>e362		ff				valueFF:        .byte $FF                    ;userVIAInterruptMask
7238	>e363		ff				                .byte $FF                    ;rs423InterruptMask
7239	>e364		ff				                .byte $FF                    ;systemVIAInterruptMask
7240	>e365		00				                .byte $00                    ;tubePresence
7241	>e366		00				                .byte $00                    ;speechSystemByte2
7242	>e367		00				                .byte $00                    ;characterDestinationStatus
7243	>e368		00				                .byte editKeysMode.editKeys  ;editKeysMode
7244	>e369		30				                .byte $30                    ;numericKeypadInterpretation
7245	>e36a		01				                .byte $01                    ;shadowRAMState
7246	>e36b		00				                .byte $00                    ;countryFlag
7247	>e36c		00				                .byte $00                    ;userFlag
7251	>e36d		64				                .byte $64                    ;serialULARegister
7253	>e36e		05				                .byte initialTimerSwitchState ;timerSwitchState
7254	>e36f		ff				                .byte $FF                    ;softKeyConsistencyFlag
7258	>e370		01				                .byte $01                    ;printerDriverType
7260	>e371		0a				                .byte $0a                    ;printerIgnoreChar
7261	>e372		00				                .byte $00                    ;breakVectorByte0
7262	>e373		00				                .byte $00                    ;breakVectorByte1
7263	>e374		00				                .byte $00                    ;breakVectorByte2
7264	>e375		00				                .byte $00                    ;vduDriverMemory
7265	>e376		00				                .byte $00                    ;displayMemory
7266	>e377		ff				                .byte $FF                    ;currentLanguageROM

7268							;-------------------------------------------------------------------------
7269							;
7270							; STARTUP
7271							; =======
7272							;
7273	.e378						resetEntryPoint:                ;e364
7274	.e378		a9 40		lda #$40	                lda #$40        ; $40 = RTI
7275	.e37a		8d 00 0d	sta $0d00	                sta nmiEntryPoint ; make NMI routine a no-op
7276	.e37d		78		sei		                sei
7278							                ; https://www.stardot.org.uk/forums/viewtopic.php?p=329122
7279	.e37e		a9 53		lda #$53	                lda #$53                 ; ???
7280	.e380		8d 8e fe	sta $fe8e	                sta $FE8E                ; ???
7283	.e383		a9 fe		lda #$fe	                lda #~ACCCON.D
7284	.e385		1c 34 fe	trb $fe34	                trb ACCCON
7285	.e388		1c 66 03	trb $0366	                trb vduv.cursorFlags
7286	.e38b		ad 34 fe	lda $fe34	                lda ACCCON
7287	.e38e		09 4c		ora #$4c	                ora #ACCCON.TST|ACCCON.Y|ACCCON.X
7290	.e390		20 96 e3	jsr $e396	                jsr staTEMPAAndACCCON
7291	.e393		4c 00 fc	jmp $fc00	                jmp reset

7297							;-------------------------------------------------------------------------

7300	.e396						staTEMPAAndACCCON:
7301	.e396		85 fc		sta $fc		                sta TEMPA
7302	.e398		8d 34 fe	sta $fe34	                sta ACCCON
7303	.e39b		60		rts		                rts

7306							;-------------------------------------------------------------------------

7312							;-------------------------------------------------------------------------
7313							;
7314							;
7315							;
7317	.e39c						clearTSTAndLE389:
7318	.e39c		20 53 f3	jsr $f353	                jsr withTSTClear

7321	.e39f						LE389:
7322	.e39f		5a		phy		                phy
7323	.e3a0		da		phx		                phx
7325	.e3a1		20 5b e5	jsr $e55b	                jsr selectTerminalROM
7326	.e3a4		20 f4 84	jsr $84f4	                jsr L873F
7335	.e3a7		c9 01		cmp #$01	                cmp #$01                     ;C set if ROM is inserted
7336	.e3a9		fa		plx		                plx
7337	.e3aa		7a		ply		                ply
7338	.e3ab		4c 4c e5	jmp $e54c	                jmp selectROMX

7340							;-------------------------------------------------------------------------
7341							;
7342							; Scan ROMs and fill in the rom information table.
7343							;
7344							; entry:
7345							;
7346							; X = first ROM to scan
7347							;

7355							;-------------------------------------------------------------------------
7356							;
7357							; Checks a ROM is valid - i.e., has a valid-looking copyright string.
7358							;
7359							; Entry:
7360							;
7361							; X = ROM to check
7362							;
7363							; Exit:
7364							;
7365							; C=0 if ROM invalid; C=1 if ROM valid
7366							;
7367							; ROM of interest is selected
7368							;
7369	.e3ae						isROMValid: .proc ;e3f7
7370	.e3ae		20 4c e5	jsr $e54c	                jsr selectROMX
7371	.e3b1		a2 03		ldx #$03	                ldx #$03
7372	.e3b3		ac 07 80	ldy $8007	                ldy $8007       ; fetch ROM copyright offset pointer
7373	.e3b6		18		clc		                clc             ; assume no match
7374	.e3b7						-
7375	.e3b7		b9 00 80	lda $8000,y	                lda $8000,y     ; fetch possible ROM copyright char
7376	.e3ba		5d cf e4	eor $e4cf,x	                eor sidewaysROMCopyrightPrefix,x     ; Z=1 if it matches "\x0(C)"
7377	.e3bd		d0 05		bne $e3c4	                bne +           ; branch taken if no match
7378	.e3bf		c8		iny		                iny             ; next copyright byte
7379	.e3c0		ca		dex		                dex             ; count 4 chars
7380	.e3c1		10 f4		bpl $e3b7	                bpl -
7381	.e3c3		38		sec		                sec             ; C=1 means a match
7382	.e3c4						+
7383	.e3c4		60		rts		                rts
7384							                .pend

7386							;-------------------------------------------------------------------------

7388							; End of STARTUP code
7389							; ===================
7390	.e3c5						LE40E:
7391	.e3c5		38		sec		                sec                      ; Call Break Intercept Vector
7392	.e3c6		20 cf f2	jsr $f2cf	                jsr osbyte247EntryPoint
7393	.e3c9		a2 27		ldx #$27	                ldx #romServiceCallInformReset
7394	.e3cb		20 ac ed	jsr $edac	                jsr makeROMServiceCall
7395	.e3ce		ac 56 02	ldy $0256	                ldy execFileHandle ; Get Exec handle, skip past if closed
7396	.e3d1		f0 08		beq $e3db	                beq LE424
7397	.e3d3		9c 56 02	stz $0256	                stz execFileHandle           ; Clear Exec handle
7398	.e3d6		a9 00		lda #$00	                lda #$00                     ; Close Exec channel
7399	.e3d8		20 ce ff	jsr $ffce	                jsr OSFIND
7400	.e3db						LE424:
7401	.e3db		38		sec		                sec                          ;
7402	.e3dc		6e 00 df	ror $df00	                ror hazel.currentFS
7403	.e3df		ad 8d 02	lda $028d	                lda lastBREAKType            ; Soft Break
7404	.e3e2		f0 04		beq $e3e8	                beq LE431
7405	.e3e4		38		sec		                sec                          ;
7406	.e3e5		6e 02 df	ror $df02	                ror hazel.libFS
7407	.e3e8						LE431:
7408	.e3e8		20 9e ed	jsr $ed9e	                jsr LEE64                    ; Set default ROMFS/TAPEFS settings
7409	.e3eb		20 9a f1	jsr $f19a	                jsr osbyte76                    ; Test Shift and Ctrl keys
7411	.e3ee		20 21 e5	jsr $e521	                jsr lsr4
7418	.e3f1		4d 8f 02	eor $028f	                eor startupOptions ; Toggle with OSBYTE 255 boot status
7419	.e3f4		29 08		and #$08	                and #$08
7420	.e3f6		a8		tay		                tay
7421	.e3f7		ae 03 df	ldx $df03	                ldx hazel.currentFSROM
7422	.e3fa		ad 8d 02	lda $028d	                lda lastBREAKType ; Soft Break, use current filing system
7423	.e3fd		f0 09		beq $e408	                beq LE454         ; taken if soft BREAK
7435	.e3ff		20 5b e5	jsr $e55b	                jsr selectTerminalROM
7437	.e402		a2 3b		ldx #$3b	                ldx #configureTable.file.metadata-configureTable
7438	.e404		20 34 88	jsr $8834	                jsr readConfigurationByte

7446	.e407		aa		tax		                tax
7447	.e408						LE454:
7448	.e408		3c a1 02	bit $02a1,x	                bit romInformationTable,x    ; check ROM of interest
7449	.e40b		10 1f		bpl $e42c	                bpl LE478                    ; taken if no service entry
7450	.e40d		20 4c e5	jsr $e54c	                jsr selectROMX               ; select ROM of interest
7451	.e410		e0 0f		cpx #$0f	                cpx #terminalROM             ; is it the terminal ROM?
7452	.e412		d0 0c		bne $e420	                bne LE46C                    ; taken if not terminal ROM

7454							                ; SPACE+BREAK = RFS *RUN !BOOT when RFS is the default
7455							                ; FS
7456	.e414		20 28 f6	jsr $f628	                jsr osbyte7A
7457	.e417		e8		inx		                inx
7458	.e418		f0 19		beq $e433	                beq LE47F                    ; taken if no key pressed
7459	.e41a		e0 63		cpx #$63	                cpx #key_space+1             ; +1 due to previous inx
7460	.e41c		f0 15		beq $e433	                beq LE47F                    ; taken if SPACE held
7461	.e41e		80 0c		bra $e42c	                bra LE478                    ; wasn't space - just
7462							                                             ; ordinary ROM auto boot

7464	.e420						LE46C:
7465	.e420		a9 03		lda #$03	                lda #romServiceCallAutoBoot  ; Filing System selection
7466	.e422		20 03 80	jsr $8003	                jsr $8003                    ; pass to specific ROM
7467	.e425		aa		tax		                tax                          ; save service call result
7468	.e426		20 5b e5	jsr $e55b	                jsr selectTerminalROM
7469	.e429		8a		txa		                txa                          ; restore service call result
7470	.e42a		f0 2b		beq $e457	                beq LE4A3                    ; taken if call was handled
7471	.e42c						LE478:
7472	.e42c		a2 03		ldx #$03	                ldx #romServiceCallAutoBoot
7473	.e42e		20 ac ed	jsr $edac	                jsr makeROMServiceCall     ; pass to highest priority ROM
7474	.e431		f0 24		beq $e457	                beq LE4A3                    ; taken if call was handled
7475	.e433						LE47F:
7476	.e433		98		tya		                tya                          ; A = boot file flag
7477	.e434		d0 17		bne $e44d	                bne LE499                    ; taken if not booting

7479							                ; Handle SPACE+BREAK, or boot mode in the absence of
7480							                ; any non-MOS FS.
7481	.e436		a9 8d		lda #$8d	                lda #$8D                     ; select ROM filing system
7482	.e438		20 d1 ec	jsr $ecd1	                jsr osbyte8C8D
7483	.e43b		a2 ac		ldx #$ac	                ldx #<starRunBOOT
7484	.e43d		a0 f3		ldy #$f3	                ldy #>starRunBOOT
7485	.e43f		ce 67 02	dec $0267	                dec startupMessageSuppressionStatus
7486	.e442		20 f7 ff	jsr $fff7	                jsr OSCLI
7487	.e445		ee 67 02	inc $0267	                inc startupMessageSuppressionStatus
7488	.e448		80 0d		bra $e457	                bra LE4A3

7490							;-------------------------------------------------------------------------

7492	.e44a						LE496:
7493	.e44a		ee 67 02	inc $0267	                inc startupMessageSuppressionStatus ;set bit 0
7494	.e44d						LE499:
7495	.e44d		38		sec		                sec
7496	.e44e		6e 00 df	ror $df00	                ror hazel.currentFS
7498	.e451		a9 00		lda #$00	                lda #$00
7499	.e453		aa		tax		                tax
7500	.e454		20 f9 ec	jsr $ecf9	                jsr selectROMOrTAPE
7507	.e457						LE4A3:
7508	.e457		a9 05		lda #$05	                lda #$05                     ;
7509	.e459		ae 85 02	ldx $0285	                ldx printerDriverType        ; *FX5,<current printer>
7510	.e45c		20 18 ee	jsr $ee18	                jsr osbyteEntryPoint
7516	.e45f		ad 8d 02	lda $028d	                lda lastBREAKType ; If not Soft Break, select default language
7517	.e462		d0 0b		bne $e46f	                bne LE4BB         ; taken if hard break or power on
7518	.e464		ae 8c 02	ldx $028c	                ldx currentLanguageROM      ; Get current language ROM
7524	.e467		e0 10		cpx #$10	                cpx #$10                     ; <16, normal ROM number, use it
7526	.e469		90 0d		bcc $e478	                bcc LE4C2
7530	.e46b		e0 1f		cpx #$1f	                cpx #$10+terminalROM ; 16+UTILS ROM, re-enter Supervisor or Tube CLI
7532	.e46d		f0 56		beq $e4c5	                beq LE509
7533	.e46f						LE4BB:
7534	.e46f		20 5b e5	jsr $e55b	                jsr selectTerminalROM     ; Page in ROM 15 - UTILS ROM
7536	.e472		a2 5f		ldx #$5f	                ldx #configureTable.lang.metadata-configureTable
7537	.e474		20 34 88	jsr $8834	                jsr readConfigurationByte
7541	.e477		aa		tax		                tax
7542	.e478						LE4C2:
7543	.e478		18		clc		                clc

7545							;-------------------------------------------------------------------------
7546							;
7547							; OSBYTE 142 (&8E) Enter language ROM [MasRef D.2-44]
7548							;
7549	.e479						osbyte8E:
7551	.e479		da		phx		                phx
7552	.e47a		8a		txa		                txa
7553	.e47b		29 0f		and #$0f	                and #$f
7554	.e47d		aa		tax		                tax
7556	.e47e		3c a1 02	bit $02a1,x	                bit romInformationTable,x ; b6=0, error Not a language
7558	.e481		fa		plx		                plx
7560	.e482		50 4e		bvc $e4d2	                bvc thisIsNotALanguageError
7561	.e484		08		php		                php
7562	.e485		90 16		bcc $e49d	                bcc LE4E1 ;taken if not OSBYTE 142 - so skip ROM check
7563	.e487		20 4c e5	jsr $e54c	                jsr selectROMX
7564	.e48a		ad 06 80	lda $8006	                lda sidewaysROMType
7565	.e48d		29 0d		and #$0d	                and #%00001101
7566	.e48f		f0 05		beq $e496	                beq is6502ROM ;taken if low nybble is 0 (6502 BASIC) or 2 (other 6502 ROM)
7568	.e491		2c 7a 02	bit $027a	                bit tubePresence
7572	.e494		10 54		bpl $e4ea	                bpl iCannotRunThisCodeError  ;taken if no Tube - assume impossible to run
7573	.e496						is6502ROM:
7574	.e496		da		phx		                phx                          ;save ROM slot
7575	.e497		a2 2a		ldx #$2a	                ldx #romServiceCallLanguageChange
7576	.e499		20 ac ed	jsr $edac	                jsr makeROMServiceCall
7577	.e49c		fa		plx		                plx                          ;restore ROM slot
7578	.e49d						LE4E1:
7579	.e49d		8e 8c 02	stx $028c	                stx currentLanguageROM
7580	.e4a0		20 4c e5	jsr $e54c	                jsr selectROMX
7581	.e4a3		a9 80		lda #$80	                lda #>sidewaysROMName
7582	.e4a5		a0 08		ldy #$08	                ldy #(<sidewaysROMName)-1
7583	.e4a7		20 70 e7	jsr $e770	                jsr print0TerminatedString
7584	.e4aa		84 fd		sty $fd		                sty errPtr+0
7585	.e4ac		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7586	.e4af		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7587	.e4b2		28		plp		                plp
7589	.e4b3		a9 01		lda #$01	                lda #$01               ; A=1 on default language entry
7590	.e4b5		2c 7a 02	bit $027a	                bit tubePresence
7591	.e4b8		30 12		bmi $e4cc	                bmi copyLanguageOverTube     ;taken if Tube is present
7593	.e4ba		ad 06 80	lda $8006	                lda sidewaysROMType
7594	.e4bd		29 0d		and #$0d	                and #%00001101
7595	.e4bf		d0 29		bne $e4ea	                bne iCannotRunThisCodeError ;taken if low nybble isn't 0 (6502 BASIC) or 2 (other 6502 ROM)
7596	.e4c1		1a		inc a		                inc a                   ;A=1 on default language entry
7597	.e4c2		4c 00 80	jmp $8000	                jmp sidewaysROMLanguageEntry

7599	.e4c5						LE509:
7600	.e4c5		a9 00		lda #$00	                lda #$00
7602	.e4c7		2c 7a 02	bit $027a	                bit tubePresence
7603	.e4ca		10 78		bpl $e544	                bpl startCommandLineUI
7604	.e4cc						copyLanguageOverTube:
7605	.e4cc		4c 00 04	jmp $0400	                jmp tubeHost.copyLanguage

7610							;-------------------------------------------------------------------------

7612	.e4cf						sidewaysROMCopyrightPrefix: .block
7613	>e4cf		29 43 28			                .text ")C("
7614	.e4d2						end:
7615							                .endblock

7617							;-------------------------------------------------------------------------

7619	.e4d2						thisIsNotALanguageError:
7620	.e4d2		00		brk #		                brk
7621	>e4d3		00 54 68 69 73 20 69 73		                .text 0,"This is not a language"
	>e4db		20 6e 6f 74 20 61 20 6c 61 6e 67 75 61 67 65

7623							;-------------------------------------------------------------------------

7625	.e4ea						iCannotRunThisCodeError:
7626	.e4ea		00		brk #		                brk
7627	>e4eb		00 49 20 63 61 6e 6e 6f		                .text 0,"I cannot run this code",0
	>e4f3		74 20 72 75 6e 20 74 68 69 73 20 63 6f 64 65 00

7629							;-------------------------------------------------------------------------
7630							;
7631							; OSBYTE 164 (&A4) Check processor type [MasRef D.2-50]
7632							;
7633	.e503						osbyteA4:
7634	.e503		a2 03		ldx #$03	                ldx #sidewaysROMCopyrightPrefix.end-sidewaysROMCopyrightPrefix
7635	.e505		a0 07		ldy #$07	                ldy #<sidewaysROMCopyrightOffset
7636	.e507		b1 f0		lda ($f0),y	                lda (originalX),y
7637	.e509		a8		tay		                tay
7638	.e50a						-
7639	.e50a		b1 f0		lda ($f0),y	                lda (originalX),y
7640	.e50c		dd cf e4	cmp $e4cf,x	                cmp sidewaysROMCopyrightPrefix,x
7641	.e50f		d0 0f		bne $e520	                bne rtsE564 ;taken if (C) not found - must be OK, if it's not a ROM?
7642	.e511		c8		iny		                iny
7643	.e512		ca		dex		                dex
7644	.e513		10 f5		bpl $e50a	                bpl -
7645	.e515		a0 06		ldy #$06	                ldy #<sidewaysROMType
7646	.e517		b1 f0		lda ($f0),y	                lda (originalX),y
7647	.e519		0a		asl a		                asl a
7648	.e51a		10 b6		bpl $e4d2	                bpl thisIsNotALanguageError ;taken if no language entry point
7649	.e51c		29 1a		and #$1a	                and #%00001101<<1
7650	.e51e		d0 ca		bne $e4ea	                bne iCannotRunThisCodeError ;taken if low nybble wasn't 0 (6502 BASIC) or 2 (other 6502 ROM)
7651	.e520						rtsE564:
7652	.e520		60		rts		                rts

7654							;-------------------------------------------------------------------------

7657	.e521						lsr4:
7658	.e521		4a		lsr a		                lsr a
7659	.e522		4a		lsr a		                lsr a
7660	.e523		4a		lsr a		                lsr a
7661	.e524		4a		lsr a		                lsr a
7662	.e525		60		rts		                rts

7665							;-------------------------------------------------------------------------

7668	.e526						LE525:
7669	.e526		a2 2c		ldx #$2c	                ldx #$2c                     ;???
7670	.e528		a0 03		ldy #$03	                ldy #$03
7671	.e52a		20 c8 96	jsr $96c8	                jsr writeCMOSByte
7672	.e52d		4c 35 80	jmp $8035	                jmp printCMOSRamResetMessage

7675							;-------------------------------------------------------------------------

7677	.e530						defaultBRKHandler:
7678	.e530		a0 00		ldy #$00	                ldy #$00
7679	.e532		20 74 e7	jsr $e774	                jsr printBRKMessage
7680	.e535		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7681	.e538		ad 67 02	lda $0267	                lda startupMessageSuppressionStatus
7682	.e53b		6a		ror a		                ror a
7683	.e53c		b0 06		bcs $e544	                bcs startCommandLineUI                   ;taken if bit 0 was set
7684	.e53e		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7685	.e541		4c 4a e4	jmp $e44a	                jmp LE496

7687							;-------------------------------------------------------------------------

7689	.e544						startCommandLineUI:
7690	.e544		20 5b e5	jsr $e55b	                jsr selectTerminalROM
7691	.e547		4c 29 84	jmp $8429	                jmp commandLineUI

7693							;-------------------------------------------------------------------------
7694							;
7695							; Select paged ROM bank 15 - TERMINAL - with ANDY paged in,
7696							;
7697							; Preserves A/Y
7698	.e54a						selectTerminalROMAndANDY:   ;e57f
7699	.e54a		a2 8f		ldx #$8f	                ldx #$80|terminalROM
7700							                ; fall through into selectROMX

7702							;-------------------------------------------------------------------------
7703							;-------------------------------------------------------------------------
7704							;
7705							; Select paged ROM bank.
7706							;
7707							; Entry:
7708							;
7709							; X = bank to select.
7710							;
7711							; Preserves A/X/Y/P
7712	.e54c						selectROMX:   ;e581
7713	.e54c		86 f4		stx $f4		                stx $F4
7714	.e54e		8e 30 fe	stx $fe30	                stx ROMSEL
7715	.e551		60		rts		                rts

7717							;-------------------------------------------------------------------------
7718							;
7719	.e552						isROMValidThenSelectTerminalROM:
7720	.e552		5a		phy		                phy
7721	.e553		20 ae e3	jsr $e3ae	                jsr isROMValid
7722	.e556		20 5b e5	jsr $e55b	                jsr selectTerminalROM
7723	.e559		7a		ply		                ply
7724	.e55a		60		rts		                rts

7726							;-------------------------------------------------------------------------
7727							;
7728							; Select paged ROM bank 15 -
7729							;
7730							; Preserves X/Y
7731	.e55b						selectTerminalROM:            ;e590
7732	.e55b		a9 0f		lda #$0f	                lda #terminalROM
7733							                ; fall through into selectROMA

7735							;-------------------------------------------------------------------------
7736							;
7737							; Select paged ROM bank.
7738							;
7739							; A = bank to select.
7740							;
7741							; Preserves A/X/Y/P
7742	.e55d						selectROMA:                   ;e592
7743	.e55d		85 f4		sta $f4		                sta $F4         ;update ROMSEL copy
7744	.e55f		8d 30 fe	sta $fe30	                sta ROMSEL
7745	.e562		60		rts		                rts

7747							;-------------------------------------------------------------------------
7748							;
7749							; Select paged ROM bank 15 - TERMINAL - with ANDY paged in,
7750							;
7751							; Preserves A/X/Y

7753	.e563						selectTerminalROMAndANDY2:
7754	.e563		da		phx		                phx
7755	.e564		20 4a e5	jsr $e54a	                jsr selectTerminalROMAndANDY
7756	.e567		fa		plx		                plx
7757	.e568		60		rts		                rts

7759							;-------------------------------------------------------------------------

7761	.e569						irqEntryPoint:
7762	.e569		85 fc		sta $fc		                sta TEMPA
7763	.e56b		68		pla		                pla                          ;restore P
7764	.e56c		48		pha		                pha                          ;save P
7765	.e56d		29 10		and #$10	                and #$10
7766	.e56f		d0 03		bne $e574	                bne brkEntryPoint
7767	.e571		6c 04 02	jmp ($0204)	                jmp (IRQ1V)

7769	.e574						brkEntryPoint:
7770	.e574		da		phx		                phx
7771	.e575		ba		tsx		                tsx
7772	.e576		bd 03 01	lda $0103,x	                lda $0103,x                  ;get BRK address+1 LSB
7773	.e579		d8		cld		                cld                          ;
7774	.e57a		38		sec		                sec                          ;
7775	.e57b		e9 01		sbc #$01	                sbc #$01                     ;get BRK address LSB
7776	.e57d		85 fd		sta $fd		                sta errPtr+0
7777	.e57f		bd 04 01	lda $0104,x	                lda $0104,x                  ;get BRK address+1 MSB
7778	.e582		e9 00		sbc #$00	                sbc #$00                     ;get BRK address MSB
7779	.e584		85 fe		sta $fe		                sta errPtr+1
7780	.e586		a5 f4		lda $f4		                lda $F4
7781	.e588		8d 4a 02	sta $024a	                sta romActiveAtLastBRK
7782	.e58b		86 f0		stx $f0		                stx originalX
7783	.e58d		a2 06		ldx #$06	                ldx #romServiceCallBreakInstruction
7784	.e58f		20 ac ed	jsr $edac	                jsr makeROMServiceCall
7785	.e592		ae 8c 02	ldx $028c	                ldx currentLanguageROM
7786	.e595		20 4c e5	jsr $e54c	                jsr selectROMX
7787	.e598		fa		plx		                plx
7788	.e599		a5 fc		lda $fc		                lda TEMPA
7789	.e59b		58		cli		                cli
7790	.e59c		6c 02 02	jmp ($0202)	                jmp (BRKV)

7792							;-------------------------------------------------------------------------

7795	.e59f						LE5D4:
7796	.e59f		38		sec		                sec
7797	.e5a0		6e 4f 02	ror $024f	                ror rs423Busy
7798	.e5a3		2c 50 02	bit $0250	                bit aciaControlRegister
7799	.e5a6		10 07		bpl $e5af	                bpl LE5E4
7800	.e5a8		20 6a ec	jsr $ec6a	                jsr getRS423InputBufferFreeBytes
7801	.e5ab		a2 00		ldx #$00	                ldx #$00
7802	.e5ad		b0 02		bcs $e5b1	                bcs LE5E6
7803	.e5af						LE5E4:
7804	.e5af		a2 40		ldx #$40	                ldx #$40
7805	.e5b1						LE5E6:
7806	.e5b1		4c dd e8	jmp $e8dd	                jmp resetACIAState

7808	.e5b4						LE5E9:
7809	.e5b4		ac 09 fe	ldy $fe09	                ldy ACIA+1
7810	.e5b7		29 3a		and #$3a	                and #$3A
7811	.e5b9		d0 38		bne $e5f3	                bne LE628
7812	.e5bb		ae 5c 02	ldx $025c	                ldx rs423Ignore
7813	.e5be		d0 09		bne $e5c9	                bne LE5FE
7814	.e5c0		e8		inx		                inx
7815	.e5c1		20 48 ea	jsr $ea48	                jsr osbyte99
7816	.e5c4		20 6a ec	jsr $ec6a	                jsr getRS423InputBufferFreeBytes
7817	.e5c7		90 e6		bcc $e5af	                bcc LE5E4
7818	.e5c9						LE5FE:
7819	.e5c9		60		rts		                rts

7822							;-------------------------------------------------------------------------

7824	.e5ca						irq1EntryPoint:
7825	.e5ca		a5 fc		lda $fc		                lda TEMPA
7826	.e5cc		48		pha		                pha
7827	.e5cd		da		phx		                phx
7828	.e5ce		5a		phy		                phy
7830	.e5cf		b8		clv		                clv
7832	.e5d0		20 da e5	jsr $e5da	                jsr irq1Handler
7833	.e5d3		7a		ply		                ply
7834	.e5d4		fa		plx		                plx
7835	.e5d5		68		pla		                pla
7836	.e5d6		40		rti		                rti

7838							;-------------------------------------------------------------------------

7840	.e5d7						irq2EntryPoint:
7841	.e5d7		a5 fc		lda $fc		                lda TEMPA
7842	.e5d9		40		rti		                rti

7844							;-------------------------------------------------------------------------

7850	.e5da						irq1Handler:
7851	.e5da		ad 08 fe	lda $fe08	                lda ACIA+0
7855	.e5dd		70 02		bvs $e5e1	                bvs LE616
7856	.e5df		10 5e		bpl $e63f	                bpl checkForSystemVIAInterrupt
7857	.e5e1						LE616:
7858	.e5e1		a6 ea		ldx $ea		                ldx $EA
7859	.e5e3		ca		dex		                dex
7860	.e5e4		30 33		bmi $e619	                bmi LE64E
7861	.e5e6		70 30		bvs $e618	                bvs rtsE64D
7862	.e5e8		20 0d f3	jsr $f30d	                jsr withTerminalROM
7863	.e5eb		4c 77 a4	jmp $a477	                jmp LA45D

7865	.e5ee						LE623:
7866	.e5ee		ac 09 fe	ldy $fe09	                ldy ACIA+1
7867	.e5f1		2a		rol a		                rol a
7868	.e5f2		0a		asl a		                asl a
7869	.e5f3						LE628:
7870	.e5f3		aa		tax		                tax
7871	.e5f4		98		tya		                tya
7872	.e5f5		a0 07		ldy #$07	                ldy #$07
7873	.e5f7		4c ed e9	jmp $e9ed	                jmp eventEntryPoint

7875	.e5fa						LE62F:
7876	.e5fa		a2 02		ldx #$02	                ldx #$02
7877	.e5fc		20 b9 e9	jsr $e9b9	                jsr osbyte91
7878	.e5ff		90 10		bcc $e611	                bcc LE646
7879	.e601		ad 85 02	lda $0285	                lda printerDriverType
7880	.e604		c9 02		cmp #$02	                cmp #$02
7881	.e606		d0 97		bne $e59f	                bne LE5D4
7882	.e608		e8		inx		                inx
7883	.e609		20 b9 e9	jsr $e9b9	                jsr osbyte91
7884	.e60c		6e d1 02	ror $02d1	                ror bufferEmptyFlags+bufferPrinter
7885	.e60f		30 8e		bmi $e59f	                bmi LE5D4
7886	.e611						LE646:
7887	.e611		8d 09 fe	sta $fe09	                sta ACIA+1
7888	.e614		a9 e7		lda #$e7	                lda #$E7
7889	.e616		85 ea		sta $ea		                sta $EA
7890	.e618						rtsE64D:
7891	.e618		60		rts		                rts

7893	.e619						LE64E:
7895	.e619		2d 78 02	and $0278	                and rs423InterruptMask
7897	.e61c		4a		lsr a		                lsr a
7898	.e61d		90 07		bcc $e626	                bcc LE65B
7899	.e61f		70 05		bvs $e626	                bvs LE65B
7900	.e621		ac 50 02	ldy $0250	                ldy aciaControlRegister
7901	.e624		30 8e		bmi $e5b4	                bmi LE5E9
7902	.e626						LE65B:
7903	.e626		4a		lsr a		                lsr a
7904	.e627		6a		ror a		                ror a
7905	.e628		b0 c4		bcs $e5ee	                bcs LE623
7906	.e62a		30 ce		bmi $e5fa	                bmi LE62F
7907	.e62c		70 ea		bvs $e618	                bvs rtsE64D

7910							;-------------------------------------------------------------------------

7912	.e62e						handleUnrecogisedInterrupt:
7913	.e62e		a2 05		ldx #$05	                ldx #romServiceCallUnrecognisedInterrupt
7914	.e630		20 ac ed	jsr $edac	                jsr makeROMServiceCall
7915	.e633		f0 e3		beq $e618	                beq rtsE64D                  ;taken if handled

7917							                ; Pass unrecognised, unhandled interrupts to IRQ2V.
7918	.e635		68		pla		                pla
7919	.e636		68		pla		                pla
7920	.e637		7a		ply		                ply
7921	.e638		fa		plx		                plx
7922	.e639		68		pla		                pla
7924	.e63a		85 fc		sta $fc		                sta TEMPA
7926	.e63c		6c 06 02	jmp ($0206)	                jmp (IRQ2V)

7928							;-------------------------------------------------------------------------

7933	.e63f						checkForSystemVIAInterrupt:
7935	.e63f		ad 4d fe	lda $fe4d	                lda systemVIA.ifr
7939	.e642		10 3c		bpl $e680	                bpl checkForUserVIAInterrupt
7941	.e644		2d 79 02	and $0279	                and systemVIAInterruptMask
7942	.e647		2d 4e fe	and $fe4e	                and systemVIA.ier
7943	.e64a		89 02		bit #$02	                bit #VIA.irq.ca1
7944	.e64c		f0 54		beq $e6a2	                beq checkForSystemVIAT1Interrupt

7946							                ; Handle CA1 interrupt - CRTC vsync.

7948	.e64e		ce 40 02	dec $0240	                dec cfsTimeoutCounter
7950	.e651		a5 ea		lda $ea		                lda $EA
7951	.e653		10 02		bpl $e657	                bpl +
7952	.e655		e6 ea		inc $ea		                inc $EA
7953	.e657						+
7955	.e657		ad 51 02	lda $0251	                lda flashCounter
7956	.e65a		f0 1a		beq $e676	                beq flashDone                    ;taken if no flash
7957	.e65c		ce 51 02	dec $0251	                dec flashCounter             ;count down
7958	.e65f		d0 15		bne $e676	                bne flashDone
7959	.e661		ae 52 02	ldx $0252	                ldx firstFlashColourDuration ;assume first flash colour is next
7960	.e664		ad 48 02	lda $0248	                lda vcontrolRegister
7961	.e667		4a		lsr a		                lsr a                        ;C=flash bit
7962	.e668		90 03		bcc $e66d	                bcc +                        ;taken if first flash colour is next
7963	.e66a		ae 53 02	ldx $0253	                ldx secondFlashColourDuration ;actually, second flash colour is next
7964	.e66d						+
7965	.e66d		2a		rol a		                rol a                        ;reinstate old register value
7966	.e66e		49 01		eor #$01	                eor #VCONTROL.flash          ;toggle flash bit
7967	.e670		20 ba f1	jsr $f1ba	                jsr setVCONTROL
7968	.e673		8e 51 02	stx $0251	                stx flashCounter
7969	.e676						flashDone:
7970	.e676		a0 04		ldy #$04	                ldy #eventStartOfVerticalSync
7971	.e678		20 ed e9	jsr $e9ed	                jsr eventEntryPoint
7972	.e67b		a9 02		lda #$02	                lda #VIA.irq.ca1
7976	.e67d		4c 57 e7	jmp $e757	                jmp staSystemVIAIFR          ;acknowledge CA1

7980	.e680						checkForUserVIAInterrupt:
7981	.e680		ad 6d fe	lda $fe6d	                lda userVIA.ifr
7982	.e683		10 a9		bpl $e62e	                bpl handleUnrecogisedInterrupt
7983	.e685		2d 77 02	and $0277	                and userVIAInterruptMask
7984	.e688		2d 6e fe	and $fe6e	                and userVIA.ier
7985	.e68b		6a		ror a		                ror a                        ;C=CA2
7986	.e68c		6a		ror a		                ror a                        ;C=CA1
7987	.e68d		90 9f		bcc $e62e	                bcc handleUnrecogisedInterrupt
7988	.e68f		ac 85 02	ldy $0285	                ldy printerDriverType
7989	.e692		88		dey		                dey
7990	.e693		d0 99		bne $e62e	                bne handleUnrecogisedInterrupt ;taken if printerDriverType not 1
7991	.e695		a9 02		lda #$02	                lda #VIA.irq.ca1
7992	.e697		8d 6d fe	sta $fe6d	                sta userVIA.ifr              ;acknowledge CA1
7993	.e69a		8d 6e fe	sta $fe6e	                sta userVIA.ier              ;inhibit CA1
7994	.e69d		a2 03		ldx #$03	                ldx #bufferPrinter
7995	.e69f		4c a0 e8	jmp $e8a0	                jmp LE8D5

7998	.e6a2						checkForSystemVIAT1Interrupt:
7999	.e6a2		89 40		bit #$40	                bit #VIA.irq.t1
8001	.e6a4		f0 75		beq $e71b	                beq checkForSystemVIACB1Interrupt

8006							                ; Handle T1 interrupt - 100 Hz timer.

8008	.e6a6		a9 40		lda #$40	                lda #VIA.irq.t1
8009	.e6a8		8d 4d fe	sta $fe4d	                sta systemVIA.ifr            ;acknowledge T1 interrupt
8010	.e6ab		ad 83 02	lda $0283	                lda timerSwitchState
8011	.e6ae		aa		tax		                tax                          ;X=old timerSwitchState
8012	.e6af		49 0f		eor #$0f	                eor #$0F
8013	.e6b1		48		pha		                pha                          ;save new timerSwitchState
8014	.e6b2		a8		tay		                tay                          ;Y=new timerSwitchState
8015	.e6b3		38		sec		                sec                          ;C=1 - increment
8016	.e6b4						updateTIMELoop:
8017	.e6b4		bd 91 02	lda $0291,x	                lda timer0-1,x
8018	.e6b7		69 00		adc #$00	                adc #$00
8019	.e6b9		99 91 02	sta $0291,y	                sta timer0-1,y

8021							                ; one of X or Y will get to 0 to indicate the end of
8022							                ; the loop.
8023	.e6bc		ca		dex		                dex
8024	.e6bd		f0 03		beq $e6c2	                beq updateTIMEDone
8025	.e6bf		88		dey		                dey
8026	.e6c0		d0 f2		bne $e6b4	                bne updateTIMELoop
8027	.e6c2						updateTIMEDone:
8028	.e6c2		68		pla		                pla                          ;restore new timerSwitchState
8029	.e6c3		8d 83 02	sta $0283	                sta timerSwitchState
8030	.e6c6		a2 05		ldx #$05	                ldx #$05
8031	.e6c8						incrementIntervalTimer:
8032	.e6c8		fe 9b 02	inc $029b,x	                inc intervalTimer-1,x
8033	.e6cb		d0 08		bne $e6d5	                bne intervalTimerDone
8034	.e6cd		ca		dex		                dex
8035	.e6ce		d0 f8		bne $e6c8	                bne incrementIntervalTimer
8036	.e6d0		a0 05		ldy #$05	                ldy #eventIntervalTimerCrossingZero
8037	.e6d2		20 ed e9	jsr $e9ed	                jsr eventEntryPoint
8038	.e6d5						intervalTimerDone:
8039	.e6d5		ad b1 02	lda $02b1	                lda inkeyTimeoutCounter+0
8040	.e6d8		d0 08		bne $e6e2	                bne LE715
8041	.e6da		ad b2 02	lda $02b2	                lda inkeyTimeoutCounter+1
8042	.e6dd		f0 06		beq $e6e5	                beq LE718
8043	.e6df		ce b2 02	dec $02b2	                dec inkeyTimeoutCounter+1
8044	.e6e2						LE715:
8045	.e6e2		ce b1 02	dec $02b1	                dec inkeyTimeoutCounter+0
8046	.e6e5						LE718:
8047	.e6e5		2c cd 02	bit $02cd	                bit previousKeyPressedWhenReadingOSBYTE
8048	.e6e8		10 0b		bpl $e6f5	                bpl LE728
8049	.e6ea		ee cd 02	inc $02cd	                inc previousKeyPressedWhenReadingOSBYTE
8050	.e6ed		58		cli		                cli
8052	.e6ee		20 bc f3	jsr $f3bc	                jsr LF3C5_350
8056	.e6f1		78		sei		                sei
8057	.e6f2		ce cd 02	dec $02cd	                dec previousKeyPressedWhenReadingOSBYTE
8058	.e6f5						LE728:
8059	.e6f5		2c 62 e3	bit $e362	                bit valueFF                  ;V=1
8061	.e6f8		20 da e5	jsr $e5da	                jsr irq1Handler
8063	.e6fb		a5 ec		lda $ec		                lda lastKeyPressedInternal
8064	.e6fd		05 ed		ora $ed		                ora firstKeyPressedInternal
8065	.e6ff		2d 42 02	and $0242	                and keyboardSemaphore
8066	.e702		f0 04		beq $e708	                beq +
8067	.e704		38		sec		                sec
8068	.e705		20 14 f6	jsr $f614	                jsr LF8FF
8069	.e708						+
8073	.e708		20 fe e8	jsr $e8fe	                jsr pollPrinterDriver
8074	.e70b		ac 43 02	ldy $0243	                ldy romPollingSemaphore
8078	.e70e		f0 05		beq $e715	                beq LE748
8080	.e710		a2 15		ldx #$15	                ldx #romServiceCallPollingInterrupt
8084	.e712		20 ac ed	jsr $edac	                jsr makeROMServiceCall
8085	.e715						LE748:
8087	.e715		2c 18 fe	bit $fe18	                bit HADC+0
8088	.e718		70 05		bvs $e71f	                bvs LE752
8090	.e71a		60		rts		                rts

8094	.e71b						checkForSystemVIACB1Interrupt:
8096	.e71b		89 10		bit #$10	                bit #VIA.irq.cb1
8097	.e71d		f0 3c		beq $e75b	                beq checkForSystemVIACA2Interrupt

8099							                ; Handle CB1 interrupt - ADC conversion complete.
8100	.e71f						LE752:
8101	.e71f		ae 4c 02	ldx $024c	                ldx currentADCChannel
8102	.e722		f0 31		beq $e755	                beq acknowledgeSystemVIACB1Interrupt
8103	.e724		ad 1a fe	lda $fe1a	                lda HADC+2
8104	.e727		9d b5 02	sta $02b5,x	                sta adcResultLSBs-1,x
8105	.e72a		ad 19 fe	lda $fe19	                lda HADC+1
8106	.e72d		9d b9 02	sta $02b9,x	                sta adcResultMSBs-1,x
8107	.e730		8e be 02	stx $02be	                stx adcLastConvertedChannel
8108	.e733		a0 03		ldy #$03	                ldy #eventADCConversionComplete
8109	.e735		20 ed e9	jsr $e9ed	                jsr eventEntryPoint
8110	.e738		ca		dex		                dex                          ;next ADC channel
8111	.e739		d0 03		bne $e73e	                bne initiateADCConversion
8112	.e73b		ae 4d 02	ldx $024d	                ldx maximumADCChannel
8113	.e73e						initiateADCConversion:
8114	.e73e		e0 05		cpx #$05	                cpx #$05
8115	.e740		90 02		bcc $e744	                bcc +
8116	.e742		a2 04		ldx #$04	                ldx #$04                     ;clamp ADC channel
8117	.e744						+
8118	.e744		8e 4c 02	stx $024c	                stx currentADCChannel
8119	.e747		ad 4e 02	lda $024e	                lda adcConversionType
8120	.e74a		3a		dec a		                dec a            ;$FF=default, $07=8 bits, $0b=12 bits
8121	.e74b		29 08		and #$08	                and #$08         ;8=12 bits, 0=8 bits
8122	.e74d		18		clc		                clc
8123	.e74e		6d 4c 02	adc $024c	                adc currentADCChannel        ;mix in ADC channel, 1-4
8124	.e751		3a		dec a		                dec a ;convert to hardware ADC channel, 0-3 (no risk of borrow)
8125	.e752		8d 18 fe	sta $fe18	                sta HADC+0                   ;initiate conversion
8126	.e755						acknowledgeSystemVIACB1Interrupt:
8127	.e755		a9 10		lda #$10	                lda #$10
8128	.e757						staSystemVIAIFR:
8129	.e757		8d 4d fe	sta $fe4d	                sta systemVIA.ifr
8130	.e75a		60		rts		                rts

8137	.e75b						checkForSystemVIACA2Interrupt:
8138	.e75b		4a		lsr a		                lsr a                        ;C = CA2
8139	.e75c		90 08		bcc $e766	                bcc handleUnrecognisedInterruptE799

8141							                ; Handle CA2 interrupt - keyboard.

8143	.e75e		18		clc		                clc
8144	.e75f		20 14 f6	jsr $f614	                jsr LF8FF
8145	.e762		a9 01		lda #$01	                lda #VIA.irq.ca2
8147	.e764		80 f1		bra $e757	                bra staSystemVIAIFR

8155	.e766						handleUnrecognisedInterruptE799:
8156	.e766		4c 2e e6	jmp $e62e	                jmp handleUnrecogisedInterrupt

8158							;-------------------------------------------------------------------------
8159							;
8160							; OSBYTE 17 (&11) Write next ADC channel to be sampled [MasRef D.2-25]
8161							;
8162	.e769						osbyte11:
8165	.e769		8c be 02	sty $02be	                sty adcLastConvertedChannel
8169	.e76c		80 d0		bra $e73e	                bra initiateADCConversion

8172							;-------------------------------------------------------------------------
8173							;
8174							; Print a 0-terminated string at some offset from startupMessages.
8175							;
8176							; entry:
8177							;
8178							; Y = offset-1 of message
8179							;
8180	.e76e						printStartupMessage:
8181	.e76e		a9 e0		lda #$e0	                lda #>startupMessages
8182							                ; .cerror (<startupMessages)!=0,"startupMessages must be page-aligned" ;it's more flexible than this, but this'll do for now

8184							;-------------------------------------------------------------------------
8185							;
8186							; Print a 0-terminated string.
8187							;
8188							; entry:
8189							;
8190							; A = address MSB
8191							;
8192							; Y = (address LSB)-1
8193							;
8194	.e770						print0TerminatedString:
8195	.e770		85 fe		sta $fe		                sta errPtr+1
8196	.e772		64 fd		stz $fd		                stz errPtr+0

8198							;-------------------------------------------------------------------------
8199							;
8200							; Print the BRK message.
8201							;
8202							; entry:
8203							;
8204							; (errPtr) = pointer to the error number (as will be the case after a
8205							; BRK)
8206							;
8207							; Y=0
8208							;
8209	.e774						printBRKMessage:
8210	.e774		c8		iny		                iny
8211	.e775		b1 fd		lda ($fd),y	                lda (errPtr),y
8212	.e777		20 e3 ff	jsr $ffe3	                jsr OSASCI
8213	.e77a		aa		tax		                tax
8214	.e77b		d0 f7		bne $e774	                bne printBRKMessage
8215	.e77d						rtsE7B0:
8216	.e77d		60		rts		                rts

8218							;-------------------------------------------------------------------------

8462							;-------------------------------------------------------------------------

8464	.e77e						osbyte81Timed:
8465	.e77e		8e b1 02	stx $02b1	                stx inkeyTimeoutCounter+0
8466	.e781		8c b2 02	sty $02b2	                sty inkeyTimeoutCounter+1
8467	.e784		66 e6		ror $e6		                ror readCharacterTimedFlag   ;set the timed flag
8468	.e786		58		cli		                cli
8469	.e787		80 02		bra $e78b	                bra osrdchWithTimeout

8471							;-------------------------------------------------------------------------

8473	.e789						osrdchEntryPoint:
8474	.e789		64 e6		stz $e6		                stz readCharacterTimedFlag   ;clear the timed flag
8475	.e78b						osrdchWithTimeout:
8476	.e78b		da		phx		                phx
8477	.e78c		5a		phy		                phy
8478	.e78d		ac 56 02	ldy $0256	                ldy execFileHandle
8479	.e790		f0 12		beq $e7a4	                beq osrdchLoop               ;taken if not *EXEC'ing
8480	.e792		38		sec		                sec
8481	.e793		66 eb		ror $eb		                ror tapeCritical
8482	.e795		20 d7 ff	jsr $ffd7	                jsr OSBGET             ;get 1 byte from the *EXEC file
8483	.e798		64 eb		stz $eb		                stz tapeCritical
8484	.e79a		90 24		bcc $e7c0	                bcc osrdchDone                    ;taken if byte valid
8485	.e79c		a9 00		lda #$00	                lda #$00                     ;OSFIND close file
8486	.e79e		9c 56 02	stz $0256	                stz execFileHandle           ;reset *EXEC handle
8487	.e7a1		20 ce ff	jsr $ffce	                jsr OSFIND                   ;close *EXEC file
8488	.e7a4						osrdchLoop:
8489	.e7a4		a5 ff		lda $ff		                lda escapeFlag               ;b7 set if ESCAPE pressed
8490	.e7a6		0a		asl a		                asl a                        ;C=1 if ESCAPE pressed
8491	.e7a7		a9 1b		lda #$1b	                lda #27                      ;ASCII for ESCAPE
8492	.e7a9		b0 15		bcs $e7c0	                bcs osrdchDone               ;exit with C=1 if ESCAPE
8493							                                             ;pressed
8495	.e7ab		ae 41 02	ldx $0241	                ldx inputSource
8497	.e7ae		20 f8 ea	jsr $eaf8	                jsr readFromEconetOrSoftKeyOrInputBufferA ;handle Econet/soft key stuff???
8498	.e7b1		90 0d		bcc $e7c0	                bcc osrdchDone
8499	.e7b3		24 e6		bit $e6		                bit readCharacterTimedFlag
8500	.e7b5		10 ed		bpl $e7a4	                bpl osrdchLoop     ;taken if no timeout - keep looping
8501	.e7b7		ad b2 02	lda $02b2	                lda inkeyTimeoutCounter+1
8502	.e7ba		0d b1 02	ora $02b1	                ora inkeyTimeoutCounter+0
8503	.e7bd		d0 e5		bne $e7a4	                bne osrdchLoop     ;taken if timeout not timed out yet
8504	.e7bf		3a		dec a		                dec a              ;timed out: A=$ff, C=1
8505	.e7c0						osrdchDone:
8506	.e7c0		7a		ply		                ply
8507	.e7c1		fa		plx		                plx
8508	.e7c2		60		rts		                rts

8510							;-------------------------------------------------------------------------

8512	.e7c3						starLIBFS:
8513	.e7c3		ad 01 df	lda $df01	                lda hazel.activeFS
8514	.e7c6		8d 02 df	sta $df02	                sta hazel.libFS
8515	.e7c9		60		rts		                rts

8517							;-------------------------------------------------------------------------

8520	.e7ca						starX:
8521	.e7ca		8d e8 fe	sta $fee8	                sta TUBE+8
8522	.e7cd						LE800:
8523	.e7cd		80 fe		bra $e7cd	                bra LE800

8526							;-------------------------------------------------------------------------
8527							;
8528							; OSCLI
8529							;
8530							; MasRef D.4-1
8531							;

8533	.e7cf						oscliEntryPoint: .block
8534	.e7cf		20 f1 ec	jsr $ecf1	                jsr selectHAZEL
8535	.e7d2		86 f2		stx $f2		                stx stringInputBufferAddress+0
8536	.e7d4		84 f3		sty $f3		                sty stringInputBufferAddress+1
8537	.e7d6		a0 00		ldy #$00	                ldy #$00
8538	.e7d8						-
8539	.e7d8		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
8540	.e7da		99 00 dc	sta $dc00,y	                sta hazel.commandLine,y
8541	=$e7de						emptyCommandLine=*+1                         ;arbitrary place that's
8542							                                             ;just a 13 byte...
8543	.e7dd		c9 0d		cmp #$0d	                cmp #$0D
8544	.e7df		f0 04		beq $e7e5	                beq +     ;branch taken if end of command line reached
8545	.e7e1		c8		iny		                iny
8546	.e7e2		d0 f4		bne $e7d8	                bne -

8548							                ; OSCLI is a no-op if the command line is too long.
8549	.e7e4		60		rts		                rts

8551	.e7e5						+
8552	.e7e5		a0 dc		ldy #$dc	                ldy #>hazel.commandLine
8553	.e7e7		a2 00		ldx #$00	                ldx #<hazel.commandLine
8554	.e7e9		20 0d f3	jsr $f30d	                jsr withTerminalROM
8555	.e7ec		4c 0a 83	jmp $830a	                jmp oscli
8556							                .endblock

8558	=$e7de						emptyCommandLine=oscliEntryPoint.emptyCommandLine

8560							;-------------------------------------------------------------------------

8562							                ; OSWRCH
8563							                ; ======
8564	.e7ef						oswrchEntryPoint:
8565	.e7ef		48		pha		                pha                          ;S=[ch]
8566	.e7f0		da		phx		                phx                          ;S=[x; ch]
8567	.e7f1		5a		phy		                phy                          ;S=[y; x; ch]
8568	.e7f2		48		pha		                pha                          ;S=[ch; y; x; ch]
8569	.e7f3		2c 60 02	bit $0260	                bit econetOutputInterpretationStatus
8570	.e7f6		10 08		bpl $e800	                bpl LE833
8571	.e7f8		a8		tay		                tay
8572	.e7f9		a9 04		lda #$04	                lda #netWriteCharacterAttempted
8573	.e7fb		20 ff ea	jsr $eaff	                jsr callNETV
8574	.e7fe		b0 70		bcs $e870	                bcs LE8A5
8575	.e800						LE833:
8576	.e800		a9 02		lda #$02	                lda #characterDestinationStatus.vdu_disable
8577	.e802		2c 7c 02	bit $027c	                bit characterDestinationStatus
8578	.e805		d0 26		bne $e82d	                bne LE862                ; taken if VDU disabled
8583	.e807		68		pla		                pla                          ;restore char to print
8584	.e808		48		pha		                pha                          ;save it again
8585	.e809		aa		tax		                tax                          ;X=char to print
8587	.e80a		ad 34 fe	lda $fe34	                lda ACCCON                   ;
8588	.e80d		48		pha		                pha                          ;S=[old ACCCON; ch; y; x; ch]
8594	.e80e		20 eb ec	jsr $eceb	                jsr selectMOS
8599	.e811		a5 f4		lda $f4		                lda $F4
8600	.e813		48		pha		                pha          ;S=[old ROMSEL; old ACCCON; ch; y; x; ch]
8601	.e814		a9 8f		lda #$8f	                lda #$80|terminalROM
8602	.e816		85 f4		sta $f4		                sta $F4
8603	.e818		8d 30 fe	sta $fe30	                sta ROMSEL                   ;page in ANDY+Terminal
8604	.e81b		8a		txa		                txa                          ;A=char to print
8605	.e81c		20 27 c0	jsr $c027	                jsr outputToVDU
8606	.e81f		68		pla		                pla
8607	.e820		85 f4		sta $f4		                sta $F4
8608	.e822		8d 30 fe	sta $fe30	                sta ROMSEL
8609	.e825		68		pla		                pla
8610							                ; Only the saved Y bit is valid. For example, a mode
8611							                ; change might have adjusted the shadow RAM setup.
8612	.e826		29 08		and #$08	                and #ACCCON.Y
8613	.e828		0c 34 fe	tsb $fe34	                tsb ACCCON

8626	.e82b		b0 07		bcs $e834	                bcs LE869
8627	.e82d						LE862:
8628	.e82d		a9 08		lda #$08	                lda #characterDestinationStatus.printer_enable
8629	.e82f		2c 7c 02	bit $027c	                bit characterDestinationStatus
8630	.e832		f0 05		beq $e839	                beq LE86E                    ; taken if printer disabled
8631	.e834						LE869:
8632	.e834		68		pla		                pla
8633	.e835		48		pha		                pha
8634	.e836		20 75 e8	jsr $e875	                jsr LE8AA
8635	.e839						LE86E:
8637	.e839		ad 7c 02	lda $027c	                lda characterDestinationStatus
8638	.e83c		6a		ror a		                ror a                      ; extract rs423_enable flag
8639	.e83d		90 1b		bcc $e85a	                bcc LE88F                  ; taken if RS423 disabled
8640	.e83f		a4 ea		ldy $ea		                ldy $EA
8641	.e841		88		dey		                dey
8642	.e842		10 16		bpl $e85a	                bpl LE88F
8643	.e844		68		pla		                pla
8644	.e845		48		pha		                pha
8645	.e846		08		php		                php
8646	.e847		78		sei		                sei
8647	.e848		a2 02		ldx #$02	                ldx #$02
8648	.e84a		48		pha		                pha
8649	.e84b		20 b4 e9	jsr $e9b4	                jsr osbyte98
8650	.e84e		90 03		bcc $e853	                bcc LE888
8651	.e850		20 d3 e8	jsr $e8d3	                jsr clearRS423BusyAndSetRS423Active
8652	.e853						LE888:
8653	.e853		68		pla		                pla
8654	.e854		a2 02		ldx #$02	                ldx #$02
8655	.e856		20 6e e9	jsr $e96e	                jsr LE9A3
8656	.e859		28		plp		                plp
8657	.e85a						LE88F:

8660	.e85a		a9 10		lda #$10	                lda #characterDestinationStatus.spool_disable
8661	.e85c		2c 7c 02	bit $027c	                bit characterDestinationStatus
8662	.e85f		d0 0f		bne $e870	                bne LE8A5
8663	.e861		ac 57 02	ldy $0257	                ldy spoolFileHandle
8664	.e864		f0 0a		beq $e870	                beq LE8A5
8665	.e866		68		pla		                pla
8666	.e867		48		pha		                pha
8667	.e868		38		sec		                sec
8668	.e869		66 eb		ror $eb		                ror tapeCritical
8669	.e86b		20 d4 ff	jsr $ffd4	                jsr OSBPUT
8670	.e86e		46 eb		lsr $eb		                lsr tapeCritical
8671	.e870						LE8A5:
8672	.e870		68		pla		                pla
8673	.e871		7a		ply		                ply
8674	.e872		fa		plx		                plx
8675	.e873		68		pla		                pla
8676	.e874		60		rts		                rts

8678	.e875						LE8AA:
8679	.e875		2c 7c 02	bit $027c	                bit characterDestinationStatus
8680	.e878		70 25		bvs $e89f	                bvs LE8D4
8681	.e87a		cd 86 02	cmp $0286	                cmp printerIgnoreChar
8682	.e87d		d0 05		bne $e884	                bne LE8B9
8683	.e87f		2c 46 02	bit $0246	                bit noignoreState
8684	.e882		10 1b		bpl $e89f	                bpl LE8D4
8685	.e884						LE8B9:
8686	.e884		08		php		                php
8687	.e885		78		sei		                sei
8688	.e886		aa		tax		                tax
8689	.e887		a9 04		lda #$04	                lda #characterDestinationStatus.printer_disable
8690	.e889		2c 7c 02	bit $027c	                bit characterDestinationStatus
8691	.e88c		d0 10		bne $e89e	                bne LE8D3
8692	.e88e		8a		txa		                txa
8693	.e88f		a2 03		ldx #$03	                ldx #$03
8694	.e891		20 6e e9	jsr $e96e	                jsr LE9A3
8695	.e894		b0 08		bcs $e89e	                bcs LE8D3
8696	.e896		2c d1 02	bit $02d1	                bit bufferEmptyFlags+bufferPrinter
8697	.e899		10 03		bpl $e89e	                bpl LE8D3
8698	.e89b		20 a0 e8	jsr $e8a0	                jsr LE8D5
8699	.e89e						LE8D3:
8700	.e89e		28		plp		                plp
8701	.e89f						LE8D4:
8702	.e89f		60		rts		                rts

8704	.e8a0						LE8D5:                                       ;E7CA in MOS 4.00
8705	.e8a0		ad 85 02	lda $0285	                lda printerDriverType
8707	.e8a3		f0 7f		beq $e924	                beq LE959
8708	.e8a5		3a		dec a		                dec a
8709	.e8a6		d0 20		bne $e8c8	                bne LE8FD
8710	.e8a8		20 b9 e9	jsr $e9b9	                jsr osbyte91
8711	.e8ab		6e d1 02	ror $02d1	                ror bufferEmptyFlags+bufferPrinter
8712	.e8ae		30 43		bmi $e8f3	                bmi rtsE928
8713	.e8b0		a0 82		ldy #$82	                ldy #$82
8714	.e8b2		8c 6e fe	sty $fe6e	                sty userVIA.ier
8715	.e8b5		8d 61 fe	sta $fe61	                sta userVIA.ora
8716	.e8b8		ad 6c fe	lda $fe6c	                lda userVIA.pcr
8717	.e8bb		29 f1		and #$f1	                and #$F1
8718	.e8bd		09 0c		ora #$0c	                ora #$0C
8719	.e8bf		8d 6c fe	sta $fe6c	                sta userVIA.pcr
8720	.e8c2		09 0e		ora #$0e	                ora #$0E
8721	.e8c4		8d 6c fe	sta $fe6c	                sta userVIA.pcr
8722	.e8c7		60		rts		                rts

8724	.e8c8						LE8FD:
8725	.e8c8		3a		dec a		                dec a
8726	.e8c9		d0 29		bne $e8f4	                bne activatePrinterDriver
8727	.e8cb		a4 ea		ldy $ea		                ldy $EA
8728	.e8cd		88		dey		                dey
8729	.e8ce		10 54		bpl $e924	                bpl LE959
8730	.e8d0		4e d1 02	lsr $02d1	                lsr bufferEmptyFlags+bufferPrinter
8731	.e8d3						clearRS423BusyAndSetRS423Active:
8732	.e8d3		4e 4f 02	lsr $024f	                lsr rs423Busy
8733	.e8d6						setRS423Active:
8734	.e8d6		20 6a ec	jsr $ec6a	                jsr getRS423InputBufferFreeBytes
8735	.e8d9		90 18		bcc $e8f3	                bcc rtsE928
8736	.e8db		a2 20		ldx #$20	                ldx #ACIA.control.rtsLowTXInterruptEnabled
8737	.e8dd						resetACIAState:
8738	.e8dd		a0 9f		ldy #$9f	                ldy #ACIA.control.rtsRTSInterruptEnabled|ACIA.control.word8DataOddParity1Stop|ACIA.control.reset

8740							;-------------------------------------------------------------------------
8741							;
8742							; OSBYTE 156 (&9C) Read/write serial ACIA control [MasRef D.2-47]
8743							;
8744	.e8df						osbyte9C:
8745	.e8df		08		php		                php
8746	.e8e0		78		sei		                sei
8747	.e8e1		98		tya		                tya
8748	.e8e2		86 fa		stx $fa		                stx SEIWKA
8749	.e8e4		2d 50 02	and $0250	                and aciaControlRegister
8750	.e8e7		45 fa		eor $fa		                eor SEIWKA
8751	.e8e9		ae 50 02	ldx $0250	                ldx aciaControlRegister
8752	.e8ec						writeACIAControlRegisterAndCopy:
8753	.e8ec		8d 50 02	sta $0250	                sta aciaControlRegister
8754	.e8ef		8d 08 fe	sta $fe08	                sta ACIA.control
8755	.e8f2		28		plp		                plp
8756	.e8f3						rtsE928:
8757	.e8f3		60		rts		                rts

8770							;-------------------------------------------------------------------------

8772	.e8f4						activatePrinterDriver:
8773	.e8f4		18		clc		                clc
8774	.e8f5		a9 01		lda #$01	                lda #printerDriverActivate
8775	.e8f7		20 05 e9	jsr $e905	                jsr callPrinterDriverWithPrinterBuffer

8777							                ; printer driver will set C=0 if active, C=1 if
8778							                ; inactive.

8780							;-------------------------------------------------------------------------
8781							;
8782							; OSBYTE 123 (&7B) Inform MOS of printer driver going dormant [MasRef
8783							; D.2-36]
8784							;
8785	.e8fa						osbyte7B:
8786	.e8fa		6e d1 02	ror $02d1	                ror bufferEmptyFlags+bufferPrinter   ;C=1 on entry, so set bit 7
8787	.e8fd						rtsE932:
8788	.e8fd		60		rts		                rts

8790							;-------------------------------------------------------------------------

8792	.e8fe						pollPrinterDriver:
8793	.e8fe		2c d1 02	bit $02d1	                bit bufferEmptyFlags+bufferPrinter
8794	.e901		30 fa		bmi $e8fd	                bmi rtsE932           ;taken if printer driver dormant
8795	.e903		a9 00		lda #$00	                lda #printerDriverPoll
8796	.e905						callPrinterDriverWithPrinterBuffer:
8797	.e905		a2 03		ldx #$03	                ldx #bufferPrinter
8798	.e907						callPrinterDriver:
8799	.e907		ac 85 02	ldy $0285	                ldy printerDriverType
8800	.e90a		20 ff ea	jsr $eaff	                jsr callNETV
8801	.e90d		6c 22 02	jmp ($0222)	                jmp (UPTV)

8803							;-------------------------------------------------------------------------
8804							;
8805							; OSBYTE 15 (&0F) Flush buffer
8806							;
8807	.e910						osbyte0F:
8808	.e910		d0 0f		bne $e921	                bne LE956
8809	.e912						LE947:
8810	.e912		a2 08		ldx #$08	                ldx #$08
8811	.e914						LE949:
8812	.e914		58		cli		                cli
8813	.e915		78		sei		                sei
8814	.e916		20 1c e9	jsr $e91c	                jsr osbyte15
8815	.e919		ca		dex		                dex
8816	.e91a		10 f8		bpl $e914	                bpl LE949

8818							;-------------------------------------------------------------------------
8819							;
8820							; OSBYTE 21 (&15) Flush selected buffer
8821							;
8822	.e91c						osbyte15:                                    ;e951
8823	.e91c		e0 09		cpx #$09	                cpx #bufferMax+1
8824	.e91e		90 04		bcc $e924	                bcc LE959
8825	.e920		60		rts		                rts

8827	.e921						LE956:
8828	.e921		ae 41 02	ldx $0241	                ldx inputSource
8829	.e924						LE959:
8830	.e924		18		clc		                clc
8831	.e925						LE95A:
8832	.e925		48		pha		                pha
8833	.e926		08		php		                php
8834	.e927		78		sei		                sei
8835	.e928		b0 08		bcs $e932	                bcs LE967
8836	.e92a		8a		txa		                txa
8837	.e92b		29 04		and #$04	                and #$04                     ;buffer 4-7?
8838	.e92d		f0 03		beq $e932	                beq LE967                    ;taken if not sound buffer
8839	.e92f		20 b3 f3	jsr $f3b3	                jsr clearSoundChannelBuffer
8840	.e932						LE967:
8841	.e932		38		sec		                sec
8842	.e933		7e ce 02	ror $02ce,x	                ror bufferEmptyFlags,x
8843	.e936		e0 02		cpx #$02	                cpx #bufferFirstOutput
8844	.e938		b0 06		bcs $e940	                bcs LE975                    ;taken if output buffer
8845	.e93a		9c 68 02	stz $0268	                stz softKeyStringLength
8846	.e93d		9c 6a 02	stz $026a	                stz vduQueueNegativeLength
8847	.e940						LE975:
8848	.e940		20 64 ec	jsr $ec64	                jsr purgeBufferViaCNPV
8849	.e943		28		plp		                plp
8850	.e944		68		pla		                pla
8851	.e945		60		rts		                rts

8853							;-------------------------------------------------------------------------
8854							;
8855							; Count/purge entry point [AUG p264]
8856							;
8857	.e946						cnpEntryPoint:
8858	.e946		50 07		bvc $e94f	                bvc countBuffer
8859	.e948						purgeBuffer:
8860	.e948		bd d7 02	lda $02d7,x	                lda bufferStartIndices,x
8861	.e94b		9d e0 02	sta $02e0,x	                sta bufferEndIndices,x
8862	.e94e		60		rts		                rts

8864	.e94f						countBuffer:
8865	.e94f		08		php		                php
8866	.e950		78		sei		                sei
8867	.e951		08		php		                php
8868	.e952		38		sec		                sec
8869	.e953		bd e0 02	lda $02e0,x	                lda bufferEndIndices,x
8870	.e956		fd d7 02	sbc $02d7,x	                sbc bufferStartIndices,x
8871	.e959		b0 04		bcs $e95f	                bcs LE994
8872	.e95b		38		sec		                sec
8873	.e95c		fd a0 e9	sbc $e9a0,x	                sbc bufferIndex0Offsets,x
8874	.e95f						LE994:
8875	.e95f		28		plp		                plp
8876	.e960		90 06		bcc $e968	                bcc LE99D
8877	.e962		18		clc		                clc
8878	.e963		7d a0 e9	adc $e9a0,x	                adc bufferIndex0Offsets,x
8879	.e966		49 ff		eor #$ff	                eor #$FF
8880	.e968						LE99D:
8881	.e968		a0 00		ldy #$00	                ldy #$00
8882	.e96a		aa		tax		                tax
8883	.e96b		28		plp		                plp
8884	.e96c						rtsE9A1:
8885	.e96c		60		rts		                rts

8887							;-------------------------------------------------------------------------

8889	.e96d						LE9A2:
8890	.e96d		58		cli		                cli
8891	.e96e						LE9A3:
8892	.e96e		78		sei		                sei
8893	.e96f						LE9A4:
8894	.e96f		20 05 ea	jsr $ea05	                jsr callINSV
8895	.e972		90 f8		bcc $e96c	                bcc rtsE9A1
8896	.e974		20 ab f1	jsr $f1ab	                jsr LF241
8897	.e977		48		pha		                pha
8898	.e978		20 07 f4	jsr $f407	                jsr updateKeyboardLEDs
8899	.e97b		0a		asl a		                asl a
8900	.e97c		68		pla		                pla
8901	.e97d		90 ee		bcc $e96d	                bcc LE9A2
8902	.e97f		60		rts		                rts

8904							;-------------------------------------------------------------------------
8905							;
8906							; OSBYTE $77
8907							;
8908							; D.2-33
8909							;

8916							;-------------------------------------------------------------------------
8917							;
8918							; Get *IGNORE CMOS byte offset and mask for a given ROM.
8919							;
8920							; entry:
8921							;
8922							; Y = ROM number
8923							;
8924							; exit:
8925							;
8926							; A = mask
8927							;
8928							; X = RTC address of byte
8929							;
8930	.e980						getROMInsertedFlagRTCAddressAndMask:
8931	.e980		a9 00		lda #$00	                lda #$00
8932	.e982		38		sec		                sec
8933	.e983		a2 14		ldx #$14	                ldx #CMOSBytes.insertedROMs+0+cmosBytesOffset
8934	.e985						-
8935	.e985		2a		rol a		                rol a
8936	.e986		d0 02		bne $e98a	                bne +
8937	.e988		e8		inx		                inx
8938	.e989		2a		rol a		                rol a
8939	.e98a						+
8940	.e98a		88		dey		                dey
8941	.e98b		10 f8		bpl $e985	                bpl -
8942	.e98d		60		rts		                rts

8944							;-------------------------------------------------------------------------

8946	=[]						_:=[]
8947	=[($03e0,32)]					_..=[(bufferKeyboardAddress,bufferKeyboardSize)]
8948	=[($03e0,32),($0a00,256)]			_..=[(bufferRS423InputAddress,bufferRS423InputSize)]
8949	=[($03e0,32),($0a00,256),($0900,192)]		_..=[(bufferRS423OutputAddress,bufferRS423OutputSize)]
8950	=[($03e0,32),($0a00,256),($0900,192),($0880,64)]
							_..=[(bufferPrinterAddress,bufferPrinterSize)]
8951	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16)]
							_..=[(bufferSoundChannel0Address,bufferSoundChannel0Size)]
8952	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16)]
							_..=[(bufferSoundChannel1Address,bufferSoundChannel1Size)]
8953	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16)]
							_..=[(bufferSoundChannel2Address,bufferSoundChannel2Size)]
8954	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16),($0870,16)]
							_..=[(bufferSoundChannel3Address,bufferSoundChannel3Size)]
8955	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16),($0870,16),($09c0,64)]
							_..=[(buffer8Address,buffer8Size)]
8956	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16),($0870,16),($09c0,64)]
							buffers=_

8958							BufferTableIndex0Offset: .function buffer
8959							                .endfunction 256-buffer[1]

8961							BufferTableBase: .function buffer
8962							                .endfunction buffer[0]-BufferTableIndex0Offset(buffer)

8964							;-------------------------------------------------------------------------
8965							;
8966							; Buffer base addresses - each buffer's address, offset by the offset
8967							; for index 0 (see bufferIndex0Offsets).
8968							;
8969	.e98e						bufferBaseAddressMSBs:
8970							                .for _i=0,_i<len(buffers),_i+=1
8971	>e98e		03				                .byte >BufferTableBase(buffers[_i])
8971	>e98f		0a				                .byte >BufferTableBase(buffers[_i])
8971	>e990		08				                .byte >BufferTableBase(buffers[_i])
8971	>e991		07				                .byte >BufferTableBase(buffers[_i])
8971	>e992		07				                .byte >BufferTableBase(buffers[_i])
8971	>e993		07				                .byte >BufferTableBase(buffers[_i])
8971	>e994		07				                .byte >BufferTableBase(buffers[_i])
8971	>e995		07				                .byte >BufferTableBase(buffers[_i])
8971	>e996		09				                .byte >BufferTableBase(buffers[_i])
8972							                .endfor

8974	.e997						bufferBaseAddressLSBs:
8975							                .for _i=0,_i<len(buffers),_i+=1
8976	>e997		00				                .byte <BufferTableBase(buffers[_i])
8976	>e998		00				                .byte <BufferTableBase(buffers[_i])
8976	>e999		c0				                .byte <BufferTableBase(buffers[_i])
8976	>e99a		c0				                .byte <BufferTableBase(buffers[_i])
8976	>e99b		50				                .byte <BufferTableBase(buffers[_i])
8976	>e99c		60				                .byte <BufferTableBase(buffers[_i])
8976	>e99d		70				                .byte <BufferTableBase(buffers[_i])
8976	>e99e		80				                .byte <BufferTableBase(buffers[_i])
8976	>e99f		00				                .byte <BufferTableBase(buffers[_i])
8977							                .endfor

8979							;-------------------------------------------------------------------------

8981							; Offset of buffer index 0 for each buffer. Index 0 is (-buffer size)
8982							; - buffer indexes count up, and wrap once they reach 0.

8984	.e9a0						bufferIndex0Offsets:
8985							                .for _i=0,_i<len(buffers),_i+=1
8986	>e9a0		e0				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9a1		00				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9a2		40				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9a3		c0				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9a4		f0				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9a5		f0				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9a6		f0				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9a7		f0				                .byte BufferTableIndex0Offset(buffers[_i])
8986	>e9a8		c0				                .byte BufferTableIndex0Offset(buffers[_i])
8987							                .endfor

8989							;-------------------------------------------------------------------------
8990							;
8991							; Get base address for a buffer.
8992							;
8993							; entry:
8994							;
8995							; X = buffer number
8996							;
8997							; exit:
8998							;
8999							; (SEIWKA) = buffer base address
9000							;
9001	.e9a9						getBufferBaseAddress:
9002	.e9a9		bd 97 e9	lda $e997,x	                lda bufferBaseAddressLSBs,x
9003	.e9ac		85 fa		sta $fa		                sta SEIWKA
9004	.e9ae		bd 8e e9	lda $e98e,x	                lda bufferBaseAddressMSBs,x
9005	.e9b1		85 fb		sta $fb		                sta SEIWKB
9006	.e9b3		60		rts		                rts

9008							;-------------------------------------------------------------------------
9009							;
9010							; OSBYTE 152 (&98) Examine buffer status [MasRef D.2-45]
9011							;
9012	.e9b4						osbyte98:
9013	.e9b4		2c 62 e3	bit $e362	                bit valueFF                  ;V=1
9014	.e9b7		80 01		bra $e9ba	                bra callREMV

9016							;-------------------------------------------------------------------------
9017							;
9018							; OSBYTE 145 (&91) Get character from buffer [MasRef D.2-45]
9019							;
9020							; X = buffer number
9021	.e9b9						osbyte91:
9022	.e9b9		b8		clv		                clv                          ;remove
9023	.e9ba						callREMV:
9024	.e9ba		6c 2c 02	jmp ($022c)	                jmp (REMV)

9026							;-------------------------------------------------------------------------
9027							;
9028							; Buffer remove entry point. [AUG p263]
9029							;
9030							; Even in remove mode, A is the character removed on exit. Some of the
9031							; other MOS routines rely on this.
9032							;
9033	.e9bd						remEntryPoint:
9034	.e9bd		08		php		                php
9035	.e9be		78		sei		                sei
9036	.e9bf		bd d7 02	lda $02d7,x	                lda bufferStartIndices,x
9037	.e9c2		dd e0 02	cmp $02e0,x	                cmp bufferEndIndices,x
9038	.e9c5		f0 6c		beq $ea33	                beq plp_sec_rts  ;taken if buffer empty
9039	.e9c7		a8		tay		                tay                          ;Y=start index
9040	.e9c8		20 a9 e9	jsr $e9a9	                jsr getBufferBaseAddress
9041	.e9cb		b1 fa		lda ($fa),y	                lda (SEIWKA),y               ;get byte from buffer
9042	.e9cd		70 1a		bvs $e9e9	                bvs tay_plp_clc_rts                  ;taken if only looking
9043	.e9cf		48		pha		                pha                          ;save buffered byte
9044	.e9d0		c8		iny		                iny                          ;next char in buffer
9045	.e9d1		98		tya		                tya                          ;set Z if wrap
9046	.e9d2		d0 03		bne $e9d7	                bne +                        ;branch taken if no wrap
9047	.e9d4		bd a0 e9	lda $e9a0,x	                lda bufferIndex0Offsets,x    ;reset index on wrap
9048	.e9d7						+
9049	.e9d7		9d d7 02	sta $02d7,x	                sta bufferStartIndices,x

9051							                ; Issue output buffer empty event when appropriate.
9052	.e9da		e0 02		cpx #$02	                cpx #bufferFirstOutput
9053	.e9dc		90 0a		bcc $e9e8	                bcc pla_tay_plp_clc_rts ;taken if keyboard or RS423
9054							                                        ;input - i.e., buffer is input
9055	.e9de		dd e0 02	cmp $02e0,x	                cmp bufferEndIndices,x       ;buffer now empty?
9056	.e9e1		d0 05		bne $e9e8	                bne pla_tay_plp_clc_rts           ;taken if not empty
9057	.e9e3		a0 00		ldy #$00	                ldy #eventOutputBufferEmpty
9058	.e9e5		20 ed e9	jsr $e9ed	                jsr eventEntryPoint
9059	.e9e8						pla_tay_plp_clc_rts:
9060	.e9e8		68		pla		                pla                          ;restore buffered byte
9061	.e9e9						tay_plp_clc_rts:
9062	.e9e9		a8		tay		                tay                          ;Y=buffered byte
9063	.e9ea						plp_clc_rts:
9064	.e9ea		28		plp		                plp
9065	.e9eb		18		clc		                clc
9066	.e9ec		60		rts		                rts

9068							;-------------------------------------------------------------------------
9069							;
9070							; [MasRef D.9-1]
9071							;
9072	.e9ed						eventEntryPoint:
9073	.e9ed		08		php		                php
9074	.e9ee		78		sei		                sei
9075	.e9ef		48		pha		                pha
9076	.e9f0		b9 bf 02	lda $02bf,y	                lda eventEnabledFlags,y      ;is the event enabled?
9077	.e9f3		f0 3d		beq $ea32	                beq pla_plp_sec_rts                    ;
9078	.e9f5		98		tya		                tya
9079	.e9f6		7a		ply		                ply
9080	.e9f7		5a		phy		                phy
9081	.e9f8		20 d4 f5	jsr $f5d4	                jsr LF8BF
9082	.e9fb		80 eb		bra $e9e8	                bra pla_tay_plp_clc_rts

9084							;-------------------------------------------------------------------------
9085							;
9086							; Insert character into buffer and issue an event for it.
9087							;
9088							; entry:
9089							;
9090							; Y = buffer number
9091							;
9092	.e9fd						insertCharacterIntoBuffer:
9093	.e9fd		98		tya		                tya
9094	.e9fe		a0 02		ldy #$02	                ldy #eventCharacterEnteringBuffer
9095	.ea00		20 ed e9	jsr $e9ed	                jsr eventEntryPoint
9096	.ea03		a8		tay		                tay

9098							;-------------------------------------------------------------------------
9099							;
9100							; OSBYTE 138 (&8A) Insert character code into buffer [MasRef D.2-43]
9101							;
9102	.ea04						osbyte8A:
9103	.ea04		98		tya		                tya
9104	.ea05						callINSV:
9105	.ea05		6c 2a 02	jmp ($022a)	                jmp (INSV)

9107							;-------------------------------------------------------------------------
9108							;
9109							; Default INSV entry point [AUG p263]
9110							;
9111	.ea08						insEntryPoint:
9112	.ea08		08		php		                php
9113	.ea09		78		sei		                sei
9114	.ea0a		48		pha		                pha                          ;save value to insert
9115	.ea0b		bd e0 02	lda $02e0,x	                lda bufferEndIndices,x       ;get buffer index
9116	.ea0e		1a		inc a		                inc a                        ;bump index
9117	.ea0f		d0 03		bne $ea14	                bne +          ;taken if index hasn't wrapped around
9118	.ea11		bd a0 e9	lda $e9a0,x	                lda bufferIndex0Offsets,x        ;reset index due to wrap
9119	.ea14						+
9120	.ea14		dd d7 02	cmp $02d7,x	                cmp bufferStartIndices,x     ;are we at the start index?
9121	.ea17		f0 0e		beq $ea27	                beq bufferFull       ;taken if yes - i.e., buffer full
9122	.ea19		bc e0 02	ldy $02e0,x	                ldy bufferEndIndices,x       ;note old buffer end
9123	.ea1c		9d e0 02	sta $02e0,x	                sta bufferEndIndices,x       ;update buffer end
9124	.ea1f		20 a9 e9	jsr $e9a9	                jsr getBufferBaseAddress
9125	.ea22		68		pla		                pla                          ;restore value to insert
9126	.ea23		91 fa		sta ($fa),y	                sta (SEIWKA),y               ;store byte in buffer
9127	.ea25		80 c3		bra $e9ea	                bra plp_clc_rts              ;done

9129	.ea27						bufferFull
9130							                ; Issue input buffer full event when appropriate.
9131	.ea27		68		pla		                pla
9132	.ea28		e0 02		cpx #$02	                cpx #bufferFirstOutput
9133	.ea2a		b0 07		bcs $ea33	                bcs plp_sec_rts  ;taken if output buffer
9134	.ea2c		a0 01		ldy #$01	                ldy #eventInputBufferFull
9135	.ea2e		20 ed e9	jsr $e9ed	                jsr eventEntryPoint
9136	.ea31		48		pha		                pha
9137	.ea32						pla_plp_sec_rts:
9138	.ea32		68		pla		                pla
9139	.ea33						plp_sec_rts:
9140	.ea33		28		plp		                plp
9141	.ea34		38		sec		                sec
9142	.ea35		60		rts		                rts

9144							;-------------------------------------------------------------------------
9145							;
9146							; Check if character is a letter - A-Z or a-z.
9147							;
9148							; Entry:
9149							;
9150							; A = character to test
9151							;
9152							; Exit:
9153							;
9154							; C=0 if character is letter, C=1 otherwise
9155							;
9156							; Preserves: A/X/Y
9157	.ea36						isLetter: .proc                 ;EA71
9158	.ea36		48		pha		                pha
9159	.ea37		29 df		and #$df	                and #$DF        ;convert to upper case
9160	.ea39		c9 5b		cmp #$5b	                cmp #'Z'+1
9161	.ea3b		b0 04		bcs $ea41	                bcs +           ;branch taken with C=1 if past Z
9162	.ea3d		49 ff		eor #$ff	                eor #$FF
9163	.ea3f		c9 bf		cmp #$bf	                cmp #-'A'       ;C=1 if past A
9164	.ea41						+
9165	.ea41		68		pla		                pla
9166	.ea42		60		rts		                rts
9167							                .pend

9169							;-------------------------------------------------------------------------
9170							;
9171							; OSBYTE 153 (&99) Insert character code into buffer, checking for
9172							; ESCAPE [MasRef D.2-46]
9173							;
9175	.ea43						clearTSTAndInsertCharacterIntoKeyboardBuffer:
9176	.ea43		20 53 f3	jsr $f353	                jsr withTSTClear
9178	.ea46						insertCharacterIntoKeyboardBuffer:
9179	.ea46		a2 00		ldx #$00	                ldx #$00
9180	.ea48						osbyte99:
9182	.ea48		8a		txa		                txa                          ;X=1 if RS423, 0 if keyboard
9183	.ea49		2d 45 02	and $0245	                and rs423InputInterpretationStatus ;A=0 if RS423 simulates keyboard, 1=default
9184	.ea4c		d0 b6		bne $ea04	                bne osbyte8A ;taken if default - don't treat RS423 as keyboard
9186	.ea4e		98		tya		                tya          ;A=char
9187	.ea4f		4d 6c 02	eor $026c	                eor escapeCharacter
9188	.ea52		0d 75 02	ora $0275	                ora escapeKeyStatus
9189	.ea55		d0 a6		bne $e9fd	                bne insertCharacterIntoBuffer
9190	.ea57		ad 58 02	lda $0258	                lda breakAndESCAPEEffect
9191	.ea5a		6a		ror a		                ror a                        ;C=0 if normal ESCAPE action
9192	.ea5b		98		tya		                tya                          ;A=char
9193	.ea5c		b0 0a		bcs $ea68	                bcs osbyte99Done             ;taken if ESCAPE inhibited
9194	.ea5e		a0 06		ldy #$06	                ldy #eventESCAPEPressed
9195	.ea60		20 ed e9	jsr $e9ed	                jsr eventEntryPoint
9196	.ea63		90 03		bcc $ea68	                bcc osbyte99Done             ;taken if event handled
9197	.ea65		20 96 eb	jsr $eb96	                jsr osbyte7D
9198	.ea68						osbyte99Done:
9199	.ea68		18		clc		                clc
9200	.ea69		60		rts		                rts

9202							;-------------------------------------------------------------------------

9204							; A = 0 (edit keys)/1 (ascii keys)/2 (F keys)
9205	.ea6a						handleCursorKeysAndCopy:
9207	.ea6a		6a		ror a		                ror a                        ;test edit keys mode bit 0
9208	.ea6b		68		pla		                pla                          ;restore translated value
9209	.ea6c		b0 28		bcs $ea96	                bcs clc_rts_EABD       ;taken if value was asciiKeys

9216	.ea6e						handleFunctionKey:
9217	.ea6e		98		tya		                tya
9222	.ea6f		48		pha		                pha
9223	.ea70		20 21 e5	jsr $e521	                jsr lsr4
9232	.ea73		49 04		eor #$04	                eor #$04
9233	.ea75		a8		tay		                tay
9234	.ea76		b9 65 02	lda $0265,y	                lda input192To207Interpretation-8,y
9235	.ea79		4a		lsr a		                lsr a
9242	.ea7a		d0 03		bne $ea7f	                bne +
9243	.ea7c		4c 3a eb	jmp $eb3a	                jmp LEC99
9244	.ea7f						+
9245	.ea7f		2a		rol a		                rol a
9246	.ea80		c9 02		cmp #$02	                cmp #2
9247	.ea82		d0 0b		bne $ea8f	                bne LEBF5
9248	.ea84						LEBEA:
9249	.ea84		68		pla		                pla
9250	.ea85		85 f8		sta $f8		                sta softKeyExpansionPtr
9251	.ea87		a9 ff		lda #$ff	                lda #$ff
9252	.ea89		8d 68 02	sta $0268	                sta softKeyStringLength
9253	.ea8c		1a		inc a		                inc a
9254	.ea8d		80 07		bra $ea96	                bra clc_rts_EABD

9256	.ea8f						LEBF5:
9257	.ea8f		68		pla		                pla
9258	.ea90		29 0f		and #$0f	                and #$0f
9259	.ea92		18		clc		                clc
9260	.ea93		79 65 02	adc $0265,y	                adc input192To207Interpretation-8,y

9263	.ea96						clc_rts_EABD:
9264	.ea96		18		clc		                clc
9265	.ea97		60		rts		                rts

9267							;-------------------------------------------------------------------------

9269	.ea98						copyCharNotRecognised:
9270	.ea98		20 10 ef	jsr $ef10	                jsr vdu7EntryPoint           ;beep
9271	.ea9b		fa		plx		                plx
9272	.ea9c						readFromInputBufferX:
9273	.ea9c		20 b9 e9	jsr $e9b9	                jsr osbyte91          ;extract character from buffer X
9277	.ea9f		b0 0c		bcs $eaad	                bcs LEC0D                    ; taken if buffer empty
9278	.eaa1		a8		tay		                tay                          ; Y=char removed???
9279	.eaa2		d0 1f		bne $eac3	                bne LEAC8                    ; taken if non-zero
9281	.eaa4		8a		txa		                txa                          ; A=buffer number
9282	.eaa5		2d 45 02	and $0245	                and rs423InputInterpretationStatus ;
9283	.eaa8		d0 18		bne $eac2	                bne LEC29
9288	.eaaa		20 b9 e9	jsr $e9b9	                jsr osbyte91
9290	.eaad						LEC0D:
9291	.eaad		b0 7e		bcs $eb2d	                bcs rtsEB28
9292	.eaaf		a8		tay		                tay
9293	.eab0		d0 e4		bne $ea96	                bne clc_rts_EABD
9294	.eab2		48		pha		                pha
9295	.eab3		a0 08		ldy #$08	                ldy #8

9297	.eab5						LEC15:
9298	.eab5		b9 6c 02	lda $026c,y	                lda shiftCtrlSoftKeyInterpretation-8,y
9299	.eab8		c9 02		cmp #$02	                cmp #2
9300	.eaba		f0 c8		beq $ea84	                beq LEBEA
9301	.eabc		88		dey		                dey
9302	.eabd		d0 f6		bne $eab5	                bne LEC15
9303	.eabf		68		pla		                pla
9304	.eac0		80 d4		bra $ea96	                bra clc_rts_EABD

9308	.eac2						LEC29:
9309	.eac2		98		tya		                tya

9313	.eac3						LEAC8:
9314	.eac3		48		pha		                pha                   ;save character extracted
9315	.eac4		e0 01		cpx #$01	                cpx #bufferRS423Input ;was it RS423 input buffer?
9316	.eac6		d0 06		bne $eace	                bne LEAD3             ;taken if not RS423 input buffer
9317	.eac8		20 d6 e8	jsr $e8d6	                jsr setRS423Active
9318	.eacb		38		sec		                sec
9319	.eacc		a2 01		ldx #$01	                ldx #bufferRS423Input

9321	.eace						LEAD3:
9322	.eace		68		pla		                pla                          ;restore char extracted
9323	.eacf		90 05		bcc $ead6	                bcc LEADB                    ;taken if keyboard buffer
9324	.ead1		ac 45 02	ldy $0245	                ldy rs423InputInterpretationStatus ;D.2-54
9325	.ead4		d0 56		bne $eb2c	                bne clc_rts_EB27             ;taken if default mode

9328	.ead6						LEADB:
9329	.ead6		a8		tay		                tay                          ;Y = char
9330	.ead7		10 53		bpl $eb2c	                bpl clc_rts_EB27             ;if normal char, all good
9331	.ead9		29 0f		and #$0f	                and #$0F
9332	.eadb		c9 0b		cmp #$0b	                cmp #$0B
9333	.eadd		90 8f		bcc $ea6e	                bcc handleFunctionKey        ;taken if F key
9334	.eadf		69 7b		adc #$7b	                adc #$7B    ;C=1, so +$7c - convert $0b-0$f to $87-$8B
9335	.eae1		48		pha		                pha         ;save translated value
9336	.eae2		ad 7d 02	lda $027d	                lda editKeysMode
9337	.eae5		d0 83		bne $ea6a	                bne handleCursorKeysAndCopy  ;taken if not editKeys
9338	.eae7		ad 7c 02	lda $027c	                lda characterDestinationStatus
9339	.eaea		6a		ror a		                ror a                        ;C=rs423_enable
9340	.eaeb		6a		ror a		                ror a                        ;C=vdu_disable
9341	.eaec		68		pla		                pla                          ;restore translated value
9342	.eaed		b0 ad		bcs $ea9c	                bcs readFromInputBufferX     ;taken if VDU output disabled
9343	.eaef		c9 87		cmp #$87	                cmp #$87                     ;COPY?
9344	.eaf1		f0 3b		beq $eb2e	                beq readCopyChar
9345	.eaf3		da		phx		                phx                          ;save buffer number
9346	.eaf4		20 6a eb	jsr $eb6a	                jsr handleCursorKeyThunk     ;handle cursor key
9347	.eaf7		fa		plx		                plx
9348	.eaf8						readFromEconetOrSoftKeyOrInputBufferA:
9352	.eaf8		2c 5f 02	bit $025f	                bit econetInputInterpretationStatus
9353	.eafb		10 05		bpl $eb02	                bpl readFromSoftKeyOrInputBufferA
9354	.eafd		a9 06		lda #$06	                lda #netReadCharacterAttempted
9355	.eaff						callNETV:
9356	.eaff		6c 24 02	jmp ($0224)	                jmp (NETV)

9358	.eb02						readFromSoftKeyOrInputBufferA:
9359	.eb02		ad 68 02	lda $0268	                lda softKeyStringLength
9360	.eb05		f0 95		beq $ea9c	                beq readFromInputBufferX
9362	.eb07		1a		inc a		                inc a
9363	.eb08		d0 07		bne $eb11	                bne LEC70
9364	.eb0a		9c 68 02	stz $0268	                stz softKeyStringLength
9365	.eb0d		a5 f8		lda $f8		                lda softKeyExpansionPtr
9366	.eb0f		80 1b		bra $eb2c	                bra clc_rts_EB27
9367	.eb11						LEC70:
9370	.eb11		8a		txa		                txa
9371	.eb12		2d 45 02	and $0245	                and rs423InputInterpretationStatus
9372	.eb15		d0 85		bne $ea9c	                bne readFromInputBufferX
9374	.eb17		a5 f4		lda $f4		                lda $F4
9375	.eb19		48		pha		                pha
9376	.eb1a		20 63 e5	jsr $e563	                jsr selectTerminalROMAndANDY2
9377	.eb1d		b2 f8		lda ($f8)	                lda (softKeyExpansionPtr)
9378	.eb1f		fa		plx		                plx
9379	.eb20		20 4c e5	jsr $e54c	                jsr selectROMX
9380	.eb23		ce 68 02	dec $0268	                dec softKeyStringLength
9381	.eb26		e6 f8		inc $f8		                inc softKeyExpansionPtr+0
9382	.eb28		d0 02		bne $eb2c	                bne clc_rts_EB27
9383	.eb2a		e6 f9		inc $f9		                inc softKeyExpansionPtr+1
9384	.eb2c						clc_rts_EB27:
9385	.eb2c		18		clc		                clc
9386	.eb2d						rtsEB28:
9387	.eb2d		60		rts		                rts

9389	.eb2e						readCopyChar:
9390	.eb2e		da		phx		                phx
9391	.eb2f		20 70 eb	jsr $eb70	                jsr handleCopyKeyThunk
9395	.eb32		d0 03		bne $eb37	                bne +
9396	.eb34		4c 98 ea	jmp $ea98	                jmp copyCharNotRecognised
9397	.eb37						+
9399	.eb37		fa		plx		                plx
9400	.eb38		18		clc		                clc
9401	.eb39						rtsEB31:
9402	.eb39		60		rts		                rts

9405	.eb3a						LEC99:
9406	.eb3a		68		pla		                pla
9407	.eb3b		29 0f		and #$0f	                and #$0f
9408	.eb3d		a8		tay		                tay
9409	.eb3e		b0 03		bcs $eb43	                bcs LECA2
9410	.eb40		4c 9c ea	jmp $ea9c	                jmp readFromInputBufferX

9412	.eb43						LECA2:
9413	.eb43		8d c9 02	sta $02c9	                sta currentSoftKey

9425	.eb46		a5 f4		lda $f4		                lda $F4
9426	.eb48		48		pha		                pha                           ;save old ROMSEL
9427	.eb49		20 63 e5	jsr $e563	                jsr selectTerminalROMAndANDY2
9428	.eb4c		20 62 eb	jsr $eb62	                jsr getSoftKeyStringLength
9429	.eb4f		8d 68 02	sta $0268	                sta softKeyStringLength
9430	.eb52		b9 00 80	lda $8000,y	                lda andy.softKeys.stringLSBs,y
9431	.eb55		85 f8		sta $f8		                sta softKeyExpansionPtr+0
9432	.eb57		b9 11 80	lda $8011,y	                lda andy.softKeys.stringMSBs,y
9433	.eb5a		85 f9		sta $f9		                sta softKeyExpansionPtr+1
9434	.eb5c		68		pla		                pla
9435	.eb5d		20 5d e5	jsr $e55d	                jsr selectROMA               ;restore old ROMSEL
9436	.eb60		80 96		bra $eaf8	                bra readFromEconetOrSoftKeyOrInputBufferA

9438							;-------------------------------------------------------------------------

9440	.eb62						getSoftKeyStringLength:
9441	.eb62		b9 01 80	lda $8001,y	                lda andy.softKeys.stringLSBs+1,y
9442	.eb65		38		sec		                sec
9443	.eb66		f9 00 80	sbc $8000,y	                sbc andy.softKeys.stringLSBs+0,y
9444	.eb69		60		rts		                rts

9446							;-------------------------------------------------------------------------
9447							;
9448							; Page HAZEL out, page MOS in, call handleCursorKey.
9449							;
9450	.eb6a						handleCursorKeyThunk:
9451	.eb6a		20 24 f3	jsr $f324	                jsr withMOSROM
9452	.eb6d		4c 7b df	jmp $df7b	                jmp handleCursorKey

9454							;-------------------------------------------------------------------------
9455							;
9456							; Page HAZEL out, page MOS in, call handleCopyKey.
9457							;
9458	.eb70						handleCopyKeyThunk:
9459	.eb70		20 24 f3	jsr $f324	                jsr withMOSROM
9460	.eb73		4c 5e df	jmp $df5e	                jmp handleCopyKey

9462							;-------------------------------------------------------------------------
9463							;
9464							; Call OSBYTE $91 (Get character from buffer) (MasRef D.2-45) in a
9465							; loop, until a character is extracted or ESCAPE is pressed.
9466							;
9467							; Entry:
9468							;
9469							; X = buffer number
9470							;
9471							; Exit:
9472							;
9473							; C=0 - character was extracted
9474							; C=1 - ESCAPE was pressed

9487							;-------------------------------------------------------------------------

9493							;-------------------------------------------------------------------------

9495	.eb76						osbyte88: ;LEC37:
9496	.eb76		a9 00		lda #$00	                lda #$00

9498	.eb78						callUSERV:
9499	.eb78		6c 00 02	jmp ($0200)	                jmp (USERV)

9501	.eb7b						osbyte7E:                       ;ec3c
9502	.eb7b		a2 00		ldx #$00	                ldx #$00
9503	.eb7d		24 ff		bit $ff		                bit $FF
9504	.eb7f		10 14		bpl $eb95	                bpl osbyte7C
9505	.eb81		ad 76 02	lda $0276	                lda escapeEffects
9506	.eb84		d0 0d		bne $eb93	                bne LEC54
9507	.eb86		58		cli		                cli
9508	.eb87		9c 69 02	stz $0269	                stz pagedModeCounter
9509	.eb8a		20 0d f3	jsr $f30d	                jsr withTerminalROM
9510	.eb8d		20 ab a5	jsr $a5ab	                jsr starEXEC
9511	.eb90		20 12 e9	jsr $e912	                jsr LE947
9512	.eb93						LEC54:
9513	.eb93		a2 ff		ldx #$ff	                ldx #$FF
9514	.eb95						osbyte7C: ;EC56
9515	.eb95		18		clc		                clc
9516	.eb96						osbyte7D: ;EC57
9519	.eb96		08		php		                php
9520	.eb97		26 ff		rol $ff		                rol escapeFlag
9521	.eb99		28		plp		                plp
9523	.eb9a		66 ff		ror $ff		                ror escapeFlag
9524	.eb9c		2c 7a 02	bit $027a	                bit tubePresence
9525	.eb9f		10 7b		bpl $ec1c	                bpl LECD9
9526	.eba1		4c 03 04	jmp $0403	                jmp tubeHost.copyEscapeStatus

9538							;-------------------------------------------------------------------------

9541	.eba4						osbyte89:
9542	.eba4		ad 82 02	lda $0282	                lda serialULARegister
9543	.eba7		a8		tay		                tay
9544	.eba8		2a		rol a		                rol a
9545	.eba9		e0 01		cpx #$01	                cpx #$01
9546	.ebab		6a		ror a		                ror a
9547	.ebac		80 1e		bra $ebcc	                bra LEC89

9550							;-------------------------------------------------------------------------
9551							;
9552							; ;OSBYTE 8 (&08) Write RS423 transmit rate
9553							;
9554							; This call sets the RS423 baud rate for transmitting data. The actual format of
9555							; the data is set using OSBYTE 156/&9C (see below).
9556							;
9557							; Entry parameters :
9558							; X=0 selects 9600 baud
9559							; X=1 selects 75 baud
9560							; X=2 selects 150 baud
9561							; X=3 selects 300 baud
9562							; X=4 selects 1200 baud
9563							; X=5 selects 2400 baud
9564							; X=6 selects 4800 baud
9565							; X=7 selects 9600 baud
9566							; X=8 selects 19200 baud
9567							; Y=0
9568							;
9569							; On exit : X=Y=<old serial ACIA control register contents>

9572	.ebae						osbyte08:
9573	.ebae		a9 38		lda #$38	                lda #$38
9574							                ; fall through to OSBYTE &07

9577							;-------------------------------------------------------------------------
9578							;
9579							; OSBYTE 7 (&07) Write RS423 receive rate
9580							;
9581							; This call sets the RS423 baud rate for receiving data. The actual
9582							; format of the data is set using OSBYTE 156/&9C (see below).
9583							;
9584							; Entry parameters :
9585							; X=0 selects 9600 baud
9586							; X=1 selects 75 baud
9587							; X=2 selects 150 baud
9588							; X=3 selects 300 baud
9589							; X=4 selects 1200 baud
9590							; X=5 selects 2400 baud
9591							; X=6 selects 4800 baud
9592							; X=7 selects 9600 baud
9593							; X=8 selects 19200 baud
9594							; Y=0
9595							;
9596							; On exit : X=Y=<old serial ACIA control register contents>

9599	.ebb0						osbyte07:                                    ;ec6d
9600	.ebb0		49 3f		eor #$3f	                eor #$3F                     ;if OSBYTE 8,
9601							                                             ;A=%00000111, mask for
9602							                                             ;transmit rate; if OSBYTE
9603							                                             ;8, A=%000111000, mask
9604							                                             ;for receive rate.
9605	.ebb2		85 fa		sta $fa		                sta $FA                      ;save mask
9606	.ebb4		ac 82 02	ldy $0282	                ldy serialULARegister                    ;
9607	.ebb7		e0 09		cpx #$09	                cpx #$09                     ;check for invalid baud rate
9608	.ebb9		b0 17		bcs $ebd2	                bcs LEC8F                    ;branch taken if invalid
9609	.ebbb		3d 46 f0	and $f046,x	                and serialBaudRatesTable,x   ;get setting in A
9610	.ebbe		85 fb		sta $fb		                sta $FB                      ;store setting
9611	.ebc0		98		tya		                tya                          ;
9612	.ebc1		05 fa		ora $fa		                ora $FA
9613	.ebc3		45 fa		eor $fa		                eor $FA
9614	.ebc5		05 fb		ora $fb		                ora $FB
9615	.ebc7		09 40		ora #$40	                ora #$40
9616	.ebc9		4d 5d 02	eor $025d	                eor rs423Destination ;mask in tape/serial flag set by OSBYTE 205ac
9617	.ebcc						LEC89:
9618	.ebcc		8d 82 02	sta $0282	                sta serialULARegister
9619	.ebcf		8d 10 fe	sta $fe10	                sta SERPROC+0
9620	.ebd2						LEC8F:
9621	.ebd2		98		tya		                tya
9622	.ebd3						LEC90:
9623	.ebd3		aa		tax		                tax
9624	.ebd4		60		rts		                rts

9634							;-------------------------------------------------------------------------

9636							; Y=0 on entry.

9638	.ebd5						osbyte09:                       ;ec92
9639	.ebd5		c8		iny		                iny
9640	.ebd6		18		clc		                clc
9641	.ebd7						osbyte0A:                                    ;ec94
9642	.ebd7		b9 52 02	lda $0252,y	                lda firstFlashColourDuration,y
9643	.ebda		48		pha		                pha
9644	.ebdb		8a		txa		                txa
9645	.ebdc		99 52 02	sta $0252,y	                sta firstFlashColourDuration,y
9646	.ebdf		7a		ply		                ply
9647	.ebe0		ad 51 02	lda $0251	                lda flashCounter
9648	.ebe3		d0 ed		bne $ebd2	                bne LEC8F
9649	.ebe5		8e 51 02	stx $0251	                stx flashCounter
9650	.ebe8		ad 48 02	lda $0248	                lda vcontrolRegister
9651	.ebeb		08		php		                php
9652	.ebec		6a		ror a		                ror a
9653	.ebed		28		plp		                plp
9654	.ebee		2a		rol a		                rol a
9655	.ebef		8d 48 02	sta $0248	                sta vcontrolRegister
9656	.ebf2		8d 20 fe	sta $fe20	                sta VCONTROL
9657	.ebf5		80 db		bra $ebd2	                bra LEC8F

9659							;-------------------------------------------------------------------------
9660							;
9661							; OSBYTE 2 (&02) Specify input stream
9662							;
9663							; Input may be taken from either the keyboard (by default) or the
9664							; RS423 port. This call specifies the selection for all subsequent
9665							; input.
9666							;
9667							; Entry parameters :
9668							; X=0 selects keyboard input and disables RS423
9669							; X=1 selects and enables RS423 input
9670							; X=2 selects keyboard input and enables RS423
9671							; Y=0
9672							;
9673							; On exit : X=0 indicates previous input was from the keyboard
9674							;           X=1 indicates previous input was from RS423
9675							;           Y is undefined
9676							;
9677							; D.2-18
9679	.ebf7						osbyte02:                       ;ecb4
9680	.ebf7		8a		txa		                txa
9681	.ebf8		29 01		and #$01	                and #$01
9682	.ebfa		48		pha		                pha
9683	.ebfb		ad 50 02	lda $0250	                lda aciaControlRegister
9684	.ebfe		2a		rol a		                rol a
9685	.ebff		e0 01		cpx #$01	                cpx #$01
9686	.ec01		6a		ror a		                ror a
9687	.ec02		cd 50 02	cmp $0250	                cmp aciaControlRegister
9688	.ec05		08		php		                php
9689	.ec06		8d 50 02	sta $0250	                sta aciaControlRegister
9690	.ec09		8d 08 fe	sta $fe08	                sta ACIA+0
9691	.ec0c		20 d6 e8	jsr $e8d6	                jsr setRS423Active
9692	.ec0f		28		plp		                plp
9693	.ec10		f0 03		beq $ec15	                beq LECD2
9694	.ec12		2c 09 fe	bit $fe09	                bit ACIA+1
9695	.ec15						LECD2:
9696	.ec15		ae 41 02	ldx $0241	                ldx inputSource
9697	.ec18		68		pla		                pla
9698	.ec19		8d 41 02	sta $0241	                sta inputSource
9699	.ec1c						LECD9:
9700	.ec1c		60		rts		                rts

9703							;-------------------------------------------------------------------------
9704							;
9705							; OSBYTE 13 (&0D) Disable event
9706							;
9707							; All events are assigned a unique number and this call provides a
9708							; means of disabling specific events.
9709							;
9710							; Entry parameters:
9711							; X = event number
9712							;
9713							; On exit: X = Y = <old enable state> (0=disabled)
9714	.ec1d						osbyte0D:
9715	.ec1d		98		tya		                tya             ;A=0

9717							;-------------------------------------------------------------------------
9718							;
9719							; OSBYTE 14 (&0E) Enable event
9720							;
9721							; This call provides a means of enabling specific events.
9722							;
9723							;
9724	.ec1e						osbyte0E:
9725	.ec1e		e0 0a		cpx #$0a	                cpx #eventMax+1
9727	.ec20		b0 b1		bcs $ebd3	                bcs LEC90
9731	.ec22		bc bf 02	ldy $02bf,x	                ldy eventEnabledFlags,x
9732	.ec25		9d bf 02	sta $02bf,x	                sta eventEnabledFlags,x
9734	.ec28		80 a8		bra $ebd2	                bra LEC8F

9745							;-------------------------------------------------------------------------
9746							;
9747							; OSBYTE 16 (&10) Write number of ADC channels
9748							;
9749							; By default, each of the four ADC channels is sampled and converted
9750							; in turn so that each reading is updated every 40 milliseconds. This
9751							; call enables the number of channels to be changed so that if, for
9752							; example, only two channels are required, each will be updated every
9753							; 20 milliseconds.
9754							;
9756	.ec2a						osbyte10:
9758	.ec2a		f0 03		beq $ec2f	                beq +                        ;taken if X=0
9759	.ec2c		20 69 e7	jsr $e769	                jsr osbyte11
9760	.ec2f						+
9762	.ec2f		ad 4d 02	lda $024d	                lda maximumADCChannel
9763	.ec32		8e 4d 02	stx $024d	                stx maximumADCChannel
9764	.ec35		aa		tax		                tax
9765	.ec36		60		rts		                rts

9768							;-------------------------------------------------------------------------
9769							;
9770							; OSBYTE 129 (&81) Read key with time limit
9771							;
9772							; This call may be used to read a key from the keyboard subject to a
9773							; specified time limit or to perform a keyboard scan for a specified
9774							; key depression.

9776	.ec37						osbyte81:
9777	.ec37		98		tya		                tya
9778	.ec38		30 0a		bmi $ec44	                bmi LED01          ;taken if scanning for specific key
9779	.ec3a		20 7e e7	jsr $e77e	                jsr osbyte81Timed
9780	.ec3d		b0 03		bcs $ec42	                bcs LECFF                 ;taken if timed out or error
9781	.ec3f		aa		tax		                tax                       ;X = ASCII char
9782	.ec40						LECFD:
9783	.ec40		a9 00		lda #$00	                lda #$00
9784	.ec42						LECFF:
9785	.ec42		a8		tay		                tay
9786	.ec43		60		rts		                rts

9788	.ec44						LED01:
9789	.ec44		8a		txa		                txa
9790	.ec45		f0 10		beq $ec57	                beq LED14
9791	.ec47		49 7f		eor #$7f	                eor #$7F
9792	.ec49		aa		tax		                tax
9793	.ec4a		20 17 f6	jsr $f617	                jsr callKEYV
9794	.ec4d		2a		rol a		                rol a
9795							                ; fall through

9797							;-------------------------------------------------------------------------

9799	.ec4e						osbyte82:
9800	.ec4e		a2 ff		ldx #$ff	                ldx #$FF
9801	.ec50		a0 ff		ldy #$ff	                ldy #$FF
9802	.ec52		b0 02		bcs $ec56	                bcs LEB13                    ;if OSBYTE $82, done
9803	.ec54		e8		inx		                inx
9804	.ec55		c8		iny		                iny
9805	.ec56						LEB13:
9806	.ec56		60		rts		                rts

9808	.ec57						LED14:
9816	.ec57		a2 f4		ldx #$f4	                ldx #$f4
9820	.ec59		80 e5		bra $ec40	                bra LECFD

9822	.ec5b						LED18:
9826	.ec5b		8a		txa		                txa
9827	.ec5c		49 ff		eor #$ff	                eor #$FF
9828	.ec5e		aa		tax		                tax
9829	.ec5f		e0 02		cpx #$02	                cpx #$02
9830							                ; fall through

9832							;-------------------------------------------------------------------------

9834	.ec61						countBufferViaCNPV:
9835	.ec61		b8		clv		                clv
9836	.ec62		80 03		bra $ec67	                bra callCNPV

9838	.ec64						purgeBufferViaCNPV:
9839	.ec64		2c 62 e3	bit $e362	                bit valueFF                  ;V=1
9840	.ec67						callCNPV:
9841	.ec67		6c 2e 02	jmp ($022e)	                jmp (CNPV)

9843							;-------------------------------------------------------------------------

9846	.ec6a						getRS423InputBufferFreeBytes:
9847	.ec6a		38		sec		                sec
9848	.ec6b		a2 01		ldx #$01	                ldx #bufferRS423Input
9849	.ec6d		20 61 ec	jsr $ec61	                jsr countBufferViaCNPV
9850	.ec70		c0 01		cpy #$01	                cpy #$01                     ;check MSB
9851	.ec72		b0 03		bcs $ec77	                bcs +                        ;if >= 256 bytes, all good
9852	.ec74		ec 5b 02	cpx $025b	                cpx rs423InputBufferMinimumSpace ;compare to min space
9853	.ec77						+
9854	.ec77		60		rts		                rts

9857							;-------------------------------------------------------------------------

9860	.ec78						osbyte80:
9861	.ec78		30 e1		bmi $ec5b	                bmi LED18
9862	.ec7a		f0 0c		beq $ec88	                beq LED45
9864	.ec7c		e0 05		cpx #$05	                cpx #$05
9865	.ec7e		b0 ce		bcs $ec4e	                bcs osbyte82                 ;return with X=$ff Y=$ff
9866	.ec80		bc b9 02	ldy $02b9,x	                ldy adcResultMSBs-1,x
9867	.ec83		bd b5 02	lda $02b5,x	                lda adcResultLSBs-1,x
9868	.ec86		aa		tax		                tax
9879	.ec87		60		rts		                rts

9882							;-------------------------------------------------------------------------

9885	.ec88						LED45:
9887							                ; Put joystick buttons in bits 0/1.
9888	.ec88		ad 40 fe	lda $fe40	                lda systemVIA.irb
9889	.ec8b		6a		ror a		                ror a
9890	.ec8c		6a		ror a		                ror a
9891	.ec8d		6a		ror a		                ror a
9892	.ec8e		6a		ror a		                ror a
9893	.ec8f		49 ff		eor #$ff	                eor #$FF
9894	.ec91		29 03		and #$03	                and #$03
9895	.ec93		ac be 02	ldy $02be	                ldy adcLastChannelRead
9896	.ec96		8e be 02	stx $02be	                stx adcLastChannelRead
9897	.ec99		aa		tax		                tax
9902	.ec9a		60		rts		                rts

9905							;-------------------------------------------------------------------------
9906							;
9907							; OSBYTE $70
9908							;
9909							; D.2-31
9910							;
9911	.ec9b						osbyte70:                       ;ed58
9912	.ec9b		20 b3 ec	jsr $ecb3	                jsr osbyte7071
9913	.ec9e		0a		asl a		                asl a
9914	.ec9f		f0 04		beq $eca5	                beq clearACCCCONE
9915	.eca1						LED5E:
9916	.eca1		0c 34 fe	tsb $fe34	                tsb ACCCON
9917	.eca4		60		rts		                rts

9919	.eca5						clearACCCCONE:
9920	.eca5		a9 02		lda #$02	                lda #ACCCON.E
9921	.eca7						LED64:
9922	.eca7		1c 34 fe	trb $fe34	                trb ACCCON
9923	.ecaa		60		rts		                rts

9925							;-------------------------------------------------------------------------

9927	.ecab						osbyte71:                       ;ed68
9928	.ecab		20 b3 ec	jsr $ecb3	                jsr osbyte7071
9929	.ecae		d0 f1		bne $eca1	                bne LED5E
9930	.ecb0		1a		inc a		                inc a
9931	.ecb1		80 f4		bra $eca7	                bra LED64

9933							;-------------------------------------------------------------------------
9934							;
9935							; Handle OSBYTE $70 or OSBYTE $71
9936							;
9937							; Entry: A=$70 or $71
9938							;
9939	.ecb3						osbyte7071:
9940	.ecb3		a8		tay		                tay
9941	.ecb4		8a		txa		                txa
9943	.ecb5		99 1a 02	sta $021a,y	                sta vduDriverMemory-$70,y
9944	.ecb8		d0 09		bne $ecc3	                bne LED80
9945	.ecba		a5 d0		lda $d0		                lda STATE
9946	.ecbc		29 10		and #$10	                and #STATE.isShadowMode
9947	.ecbe		f0 06		beq $ecc6	                beq LED83
9948	.ecc0						LED7D:
9949	.ecc0		a9 01		lda #$01	                lda #$01
9950	.ecc2		60		rts		                rts

9952	.ecc3						LED80:
9953	.ecc3		3a		dec a		                dec a
9954	.ecc4		d0 fa		bne $ecc0	                bne LED7D
9955	.ecc6						LED83:
9956	.ecc6		60		rts		                rts

9958							;-------------------------------------------------------------------------

9960							; OSBYTE &6E (110), &6F (111)
9961							; ===========================
9962							; Pass to sideways ROMs
9963	.ecc7						osbyteUnused:                   ;ed84
9964	.ecc7		a2 07		ldx #$07	                ldx #romServiceCallUnrecognisedOSBYTE
9965	.ecc9		20 ac ed	jsr $edac	                jsr makeROMServiceCall
9966	.eccc		a6 f0		ldx $f0		                ldx originalX
9968	.ecce		49 00		eor #$00	                eor #$00
9970	.ecd0		60		rts		                rts

9972							;-------------------------------------------------------------------------

9980							;-------------------------------------------------------------------------

9988							;-------------------------------------------------------------------------
9989							;
9990							; OSBYTE 140 (&8C) Select Cassette Filing System [MasRef D.2-43]
9991							; OSBYTE 141 (&8D) Select ROM Filing System [MasRef D.2-43]
9992							;
9993	.ecd1						osbyte8C8D:
9994	.ecd1		20 f7 ec	jsr $ecf7	                jsr selectROMOrTAPEByOSBYTE
9995	.ecd4		ad 34 fe	lda $fe34	                lda ACCCON                    ; Save ACCON register
9996	.ecd7		48		pha		                pha
9997	.ecd8		20 f1 ec	jsr $ecf1	                jsr selectHAZEL         ; Page Hazel workspace in
9998	.ecdb		ae 01 df	ldx $df01	                ldx hazel.activeFS
9999	.ecde		8e 00 df	stx $df00	                stx hazel.currentFS
10000	.ece1		a9 0f		lda #$0f	                lda #terminalROM
10001	.ece3		8d 03 df	sta $df03	                sta hazel.currentFSROM
10002	.ece6		68		pla		                pla                          ; Restore ACCON
10003	.ece7						selectMOSOrHAZEL:                                       ;edb0
10004	.ece7		29 08		and #$08	                and #ACCCON.Y   ;get just the HAZEL/MOS bit
10005	.ece9		d0 08		bne $ecf3	                bne setACCCONBits      ;branch taken if HAZEL at $c000
10006	.eceb						selectMOS:
10007	.eceb		a9 08		lda #$08	                lda #ACCCON.Y
10008	.eced		1c 34 fe	trb $fe34	                trb ACCCON      ;page in MOS at $c000
10009	.ecf0		60		rts		                rts

10011	.ecf1						selectHAZEL:
10012	.ecf1		a9 08		lda #$08	                lda #ACCCON.Y
10013	.ecf3						setACCCONBits:
10014	.ecf3		0c 34 fe	tsb $fe34	                tsb ACCCON      ;page in HAZEL at $c000
10015	.ecf6		60		rts		                rts

10017							;-------------------------------------------------------------------------

10025							;-------------------------------------------------------------------------
10026							;
10027							; Select ROM or TAPE.
10028							;
10029							; Two entry points: selectROMOrTAPEByOSBYTE picks FS by OSBYTE number
10030							; ($8c=TAPE, $8d=ROM), and selectROMOrTAPE picks FS by number (0=TAPE,
10031							; 1=ROM).
10032							;
10033							; entry:
10034							;
10035							; A = FS to select
10036							;
10037	.ecf7						selectROMOrTAPEByOSBYTE:

10051	.ecf7		49 8c		eor #$8c	                eor #$8C                     ;A=0 if tape, A=1 if ROM
10052	.ecf9						selectROMOrTAPE:
10053	.ecf9		0a		asl a		                asl a           ; Set CFS/RFS switch to 0=CFS or 2=RFS
10054	.ecfa		8d 47 02	sta $0247	                sta cfsRFSFSSwitch
10055	.ecfd		d0 04		bne $ed03	                bne LEDCC                    ;taken if ROM
10056	.ecff		a9 04		lda #$04	                lda #$04                     ; CFS, clear b2 of status
10057	.ed01		14 e2		trb $e2		                trb $E2
10058	.ed03						LEDCC:
10059	.ed03		e0 03		cpx #$03	                cpx #$03                     ; EQ=TAPE 300, NE=TAPE 1200
10060	.ed05		80 09		bra $ed10	                bra LEDD6

10062	.ed07						LEDD0:
10064	.ed07		20 53 f3	jsr $f353	                jsr withTSTClear
10066	.ed0a		20 9e ed	jsr $ed9e	                jsr LEE64
10067	.ed0d		20 4a f1	jsr $f14a	                jsr LF1EE
10068	.ed10						LEDD6:
10069	.ed10		08		php		                php                          ; Save baud flag in Carry
10070	.ed11		a9 06		lda #$06	                lda #$06                     ; Vectors about to change
10071	.ed13		20 47 f1	jsr $f147	                jsr callFSCV
10072	.ed16		ad 47 02	lda $0247	                lda cfsRFSFSSwitch           ; Jump if RFS selected
10073	.ed19		d0 0d		bne $ed28	                bne LEDEE
10074	.ed1b		a2 06		ldx #$06	                ldx #$06                     ; Prepare baud=6 for TAPE300
10075	.ed1d		28		plp		                plp                          ; Skip past if TAPE300
10076	.ed1e		f0 05		beq $ed25	                beq LEDEB
10077	.ed20		a9 04		lda #$04	                lda #$04                     ; TAPE1200, set bit 2 of status
10078	.ed22		04 e2		tsb $e2		                tsb $E2
10079	.ed24		ca		dex		                dex                          ; Change to baud=5 for TAPE1200
10080	.ed25						LEDEB:
10081	.ed25		86 c6		stx $c6		                stx $C6                      ; Store baud rate setting
10082	.ed27		08		php		                php
10083	.ed28						LEDEE:
10084	.ed28		64 ce		stz $ce		                stz $CE                      ; Clear byte (unused on BBC)
10085	.ed2a		28		plp		                plp

10088	.ed2b		a2 0e		ldx #$0e	                ldx #defaultVectorTable.fsVectors.end-defaultVectorTable.fsVectors ; Prepare to set 7 vectors
10089	.ed2d						LEDF3:
10090	.ed2d		bd fc e2	lda $e2fc,x	                lda defaultVectorTable.fsVectors-1,x ; Set filing
10091							                                                     ; system vectors
10092							                                                     ; to point to
10093							                                                     ; extended
10094							                                                     ; vectors
10095	.ed30		9d 11 02	sta $0211,x	                sta FILEV-1,x
10096	.ed33		ca		dex		                dex
10097	.ed34		d0 f7		bne $ed2d	                bne LEDF3
10098	.ed36		20 4a f1	jsr $f14a	                jsr LF1EE                    ; Set extended vectors
10099	.ed39		64 c2		stz $c2		                stz $C2                      ; Set Progress=idle
10100	.ed3b		a2 0f		ldx #$0f	                ldx #romServiceCallVectorsClaimed ; Send service call &0F - vectors changed

10102							;-------------------------------------------------------------------------
10103							;
10104							; OSBYTE 143 (&8F) Issue paged ROM service request [MasRef D.2-44]
10105							;
10106	.ed3d						osbyte8F: .proc                    ;ee03
10107	.ed3d		5a		phy		                phy
10108	.ed3e		da		phx		                phx                          ; Send service call
10109	.ed3f		20 ac ed	jsr $edac	                jsr makeROMServiceCall
10110	.ed42		fa		plx		                plx
10111	.ed43		e0 0f		cpx #$0f	                cpx #romServiceCallVectorsClaimed ; If VectorsClaimed,
10112							                                                  ; hook FileSwitch
10113							                                                  ; back in
10114	.ed45		f0 36		beq $ed7d	                beq handleVectorsClaimed
10115	.ed47		1a		inc a		                inc a       ; If claimed, check for
10116							                            ; InitialiseFilingSystem or
10117							                            ; UnrecognisedCommand
10118	.ed48		3a		dec a		                dec a       ;Z=1 if claimed
10119	.ed49		f0 03		beq $ed4e	                beq wasClaimed  ;branch taken if claimed
10120	.ed4b						done:
10121	.ed4b		fa		plx		                plx             ; Return with result in X, EQ=Claimed
10122	.ed4c		aa		tax		                tax
10123	.ed4d		60		rts		                rts

10125	.ed4e						wasClaimed:
10126	.ed4e		e0 12		cpx #$12	                cpx #romServiceCallInitialiseFilingSystem
10127	.ed50		f0 04		beq $ed56	                beq +
10128	.ed52		e0 04		cpx #$04	                cpx #romServiceCallUnrecognisedCommand
10129	.ed54		d0 f5		bne $ed4b	                bne done
10130	.ed56						+

10132							; handle InitialiseFilingSystem ($12) or UnrecognisedCommand ($04)

10134	.ed56		7a		ply		                ply                     ;Y=service call arg
10135	.ed57		48		pha		                pha                     ;save A (though actually it's
10136							                                        ;always $00...)
10137	.ed58		ad 34 fe	lda $fe34	                lda ACCCON
10138	.ed5b		48		pha		                pha                     ;save ACCCON
10139	.ed5c		20 f1 ec	jsr $ecf1	                jsr selectHAZEL
10140	.ed5f		38		sec		                sec
10141	.ed60		6e 00 df	ror $df00	                ror hazel.currentFS ;set currentFS bit 7
10142	.ed63						LEE29:
10143	.ed63		5a		phy		                phy             ;save ROM service call argument
10144	.ed64		a9 00		lda #$00	                lda #$00
10145	.ed66		a8		tay		                tay
10146	.ed67		20 4b f7	jsr $f74b	                jsr callARGSV   ;A=0, Y=0 - get active FS number
10147	.ed6a		8d 01 df	sta $df01	                sta hazel.activeFS ;save active FS number
10148	.ed6d		2c 00 df	bit $df00	                bit hazel.currentFS
10149	.ed70		10 03		bpl $ed75	                bpl LEE3B
10150	.ed72		20 6b f1	jsr $f16b	                jsr osbyte6D
10151	.ed75						LEE3B:
10152	.ed75		7a		ply		                ply
10153	.ed76		68		pla		                pla
10154	.ed77		20 e7 ec	jsr $ece7	                jsr selectMOSOrHAZEL
10155	.ed7a		68		pla		                pla
10156	.ed7b		aa		tax		                tax
10157	.ed7c		60		rts		                rts

10159	.ed7d						handleVectorsClaimed:
10160	.ed7d		7a		ply		                ply
10161	.ed7e		48		pha		                pha
10162	.ed7f		ad 34 fe	lda $fe34	                lda ACCCON
10163	.ed82		48		pha		                pha
10164	.ed83		20 f1 ec	jsr $ecf1	                jsr selectHAZEL
10165	.ed86		ad 1e 02	lda $021e	                lda FSCV+0
10166	.ed89		8d da df	sta $dfda	                sta hazel.activeFSCV+0
10167	.ed8c		ad 1f 02	lda $021f	                lda FSCV+1
10168	.ed8f		8d db df	sta $dfdb	                sta hazel.activeFSCV+1
10169	.ed92		a9 9c		lda #$9c	                lda #<fileswitchFSCEntryPoint
10170	.ed94		8d 1e 02	sta $021e	                sta FSCV+0
10171	.ed97		a9 f8		lda #$f8	                lda #>fileswitchFSCEntryPoint
10172	.ed99		8d 1f 02	sta $021f	                sta FSCV+1
10173	.ed9c		80 c5		bra $ed63	                bra LEE29
10174							                .pend

10176							;-------------------------------------------------------------------------

10178	.ed9e						LEE64:
10179	.ed9e		a9 a1		lda #$a1	                lda #$A1
10180	.eda0		85 e3		sta $e3		                sta $E3
10181	.eda2		a9 19		lda #$19	                lda #$19
10182	.eda4		8d d1 03	sta $03d1	                sta $03D1
10183	.eda7		a9 04		lda #$04	                lda #$04
10184	.eda9		04 e2		tsb $e2		                tsb $E2
10185	.edab		60		rts		                rts

10187							;-------------------------------------------------------------------------
10188							;
10189							; Pass service call around sideways ROMs
10190							;
10191							; Entry:
10192							; X=service call number
10193							; Y=any parameters
10194							;
10195							; Exit:
10196							; X=0 or preserved
10197							; Y=any returned parameters
10198							; EQ=call claimed if called directly
10199							;
10200	.edac						makeROMServiceCall: .proc                    ;ee72
10201	.edac		a5 f4		lda $f4		                lda $F4         ; Save current ROM
10202	.edae		48		pha		                pha
10203	.edaf		ad 34 fe	lda $fe34	                lda ACCCON      ; Save current paging state
10204	.edb2		48		pha		                pha
10205	.edb3		20 f1 ec	jsr $ecf1	                jsr selectHAZEL ; Page in Hazel
10206	.edb6		8a		txa		                txa             ; Pass service call number to A
10207	.edb7		a2 0f		ldx #$0f	                ldx #$0F     ; Start at ROM 15, and always call ROM 15
10208	.edb9		80 05		bra $edc0	                bra callServiceEntry
10209	.edbb						callServiceEntriesLoop:
10210	.edbb		3c a1 02	bit $02a1,x	                bit romInformationTable,x ;check if ROM X has a service entry
10211	.edbe		10 0b		bpl $edcb	                bpl nextROM       ;branch taken if no service entry
10212	.edc0						callServiceEntry:
10213	.edc0		20 4c e5	jsr $e54c	                jsr selectROMX  ; Page in ROM X
10214	.edc3		20 03 80	jsr $8003	                jsr $8003       ; Call ROM service entry point
10215	.edc6		aa		tax		                tax             ; X = service call result
10216	.edc7		f0 05		beq $edce	                beq done       ;branch taken if service call claimed
10217	.edc9		a6 f4		ldx $f4		                ldx $F4         ; Get ROM number
10218	.edcb						nextROM:
10219	.edcb		ca		dex		                dex       ; Step down to next ROM, loop until all done
10220	.edcc		10 ed		bpl $edbb	                bpl callServiceEntriesLoop

10222	.edce						done:
10223	.edce		68		pla		                pla                          ; Restore paging state
10224	.edcf		20 e7 ec	jsr $ece7	                jsr selectMOSOrHAZEL
10225	.edd2		68		pla		                pla                          ; Restore current ROM
10226	.edd3		20 5d e5	jsr $e55d	                jsr selectROMA
10227	.edd6		8a		txa		                txa                          ; Pass claim/noclaim to A
10228	.edd7		60		rts		                rts
10229							                .pend

10231							;-------------------------------------------------------------------------

10233							; OSBYTE &6B (107) - Select memory for direct access
10234							; ==============================================
10235	.edd8						osbyte6B:                       ;ee9e
10236	.edd8		a0 20		ldy #$20	                ldy #$20                     ; Y=&20 to change 1MHz bit
10237	.edda		80 02		bra $edde	                bra LEEA4

10239							;-------------------------------------------------------------------------

10241							; OSBYTE &6C (108) - Select memory for direct access
10242							; ==============================================
10243	.eddc						osbyte6C:
10244	.eddc		a0 04		ldy #$04	                ldy #ACCCON.X                ; Y=&04 to change RAM bit
10245	.edde						LEEA4:
10246	.edde		98		tya		                tya                          ; Clear RAM or 1MHz bit
10247	.eddf		1c 34 fe	trb $fe34	                trb ACCCON
10248	.ede2		8a		txa		                txa                          ; If X=0, exit with normal RAM/1MHz selected
10249	.ede3		f0 04		beq $ede9	                beq LEEB0
10251	.ede5		98		tya		                tya
10255	.ede6		0c 34 fe	tsb $fe34	                tsb ACCCON                   ; Page in shadow RAM
10256	.ede9						LEEB0:
10257	.ede9		60		rts		                rts                          ; X preserved, Y=&04 or &20

10259							;-------------------------------------------------------------------------

10261							osword06Macro: .macro
10268							                .endmacro

10270							LEF1BMacro: .macro
10282							                .endmacro

10284							;-------------------------------------------------------------------------

10287	.edea						osword06:
10262	.edea		20 bc ee	jsr $eebc	                jsr getAddressFromOSWORDParameterBlock
10263	.eded		b1 f0		lda ($f0),y	                lda (originalX),y
10264	.edef		92 fa		sta ($fa)	                sta (SEIWKA)
10265	.edf1						ret:
10266	.edf1		a9 00		lda #$00	                lda #$00
10267	.edf3		60		rts		                rts
10288	.edf4						LEF1B:
10271	.edf4		a5 eb		lda $eb		                lda $EB
10272	.edf6		30 f9		bmi $edf1	                bmi osword06.ret
10273	.edf8		ad 57 02	lda $0257	                lda spoolFileHandle
10274	.edfb		d0 f4		bne $edf1	                bne osword06.ret
10275	.edfd		a9 08		lda #$08	                lda #$08
10276	.edff		25 e2		and $e2		                and $E2
10277	.ee01		d0 04		bne $ee07	                bne LEF2E
10278	.ee03		a9 88		lda #$88	                lda #$88
10279	.ee05		25 bb		and $bb		                and $BB
10280	.ee07						LEF2E:
10281	.ee07		60		rts		                rts

10291							;-------------------------------------------------------------------------

10325							;-------------------------------------------------------------------------

10328	.ee08						selectTerminalROMAndOSWORD0E:
10329	.ee08		c9 03		cmp #$03	                cmp #3
10330	.ee0a		b0 76		bcs $ee82	                bcs handleUnrecognisedOSWORD
10331	.ee0c		20 0d f3	jsr $f30d	                jsr withTerminalROM
10332	.ee0f		4c 97 95	jmp $9597	                jmp osword0E

10335							;-------------------------------------------------------------------------

10338	.ee12						LEF85:
10339	.ee12		28		plp		                plp
10340	.ee13		68		pla		                pla
10341	.ee14		2c 62 e3	bit $e362	                bit valueFF
10342	.ee17		60		rts		                rts

10345							;-------------------------------------------------------------------------

10348							; OSBYTE
10349							; ======
10350	.ee18						osbyteEntryPoint:
10351	.ee18		48		pha		                pha
10352	.ee19		08		php		                php
10353	.ee1a		78		sei		                sei
10354	.ee1b		85 ef		sta $ef		                sta originalA
10355	.ee1d		86 f0		stx $f0		                stx originalX
10356	.ee1f		84 f1		sty $f1		                sty originalY
10357	.ee21		a2 07		ldx #$07	                ldx #romServiceCallUnrecognisedOSBYTE
10358	.ee23		c9 6b		cmp #$6b	                cmp #$6B
10359	.ee25		90 4b		bcc $ee72	                bcc osbyte00To6A
10360	.ee27		c9 a6		cmp #$a6	                cmp #$A6
10361	.ee29		90 09		bcc $ee34	                bcc osbyte6BToA5
10362	.ee2b		c9 a6		cmp #$a6	                cmp #$A6
10363	.ee2d		90 57		bcc $ee86	                bcc handleUnrecognisedOSBYTEOrOSWORD       ;??? - wait... didn't we just do this?

10365	.ee2f						osbyteA6ToFF:
10366	.ee2f		18		clc		                clc
10367	.ee30						osbyteOrUSERV:      ;call OSBYTE A6+ routine if C=0; call USERV if C=1
10368	.ee30		a9 a6		lda #$a6	                lda #$A6
10369	.ee32		69 00		adc #$00	                adc #$00
10374	.ee34						osbyte6BToA5:
10375							                ; map $6b-$a5 to $46-$80
10376	.ee34		e9 24		sbc #$24	                sbc #$24
10377	.ee36						osbyte44To45:
10378							                ; map $44-$80 $1a-$56
10379	.ee36		e9 2a		sbc #$2a	                sbc #$2A
10381	.ee38						osbyteUseTable:
10382	.ee38		0a		asl a		                asl a           ;table is of words
10383	.ee39		38		sec		                sec
10384	.ee3a						callOSBYTEOrOSWORDFromTable:
10385	.ee3a		84 f1		sty $f1		                sty originalY
10386	.ee3c		a8		tay		                tay             ;get table offset in Y
10387	.ee3d		2c 5e 02	bit $025e	                bit econetInterceptionStatus
10388	.ee40		10 07		bpl $ee49	                bpl LEEE0             ;taken if no Econet interception
10389	.ee42		8a		txa		                txa
10392	.ee43		b8		clv		                clv
10393	.ee44		20 ff ea	jsr $eaff	                jsr callNETV
10394	.ee47		70 23		bvs $ee6c	                bvs LEEFA
10395	.ee49						LEEE0:
10401	.ee49		a6 f4		ldx $f4		                ldx $f4
10402	.ee4b		20 5b e5	jsr $e55b	                jsr selectTerminalROM
10405	.ee4e		b9 b9 8d	lda $8db9,y	                lda osbyteAndOSWORDRoutineTable,y
10406	.ee51		85 fa		sta $fa		                sta SEIWKA
10407	.ee53		b9 ba 8d	lda $8dba,y	                lda osbyteAndOSWORDRoutineTable+1,y
10408	.ee56		85 fb		sta $fb		                sta SEIWKB
10419	.ee58		20 4c e5	jsr $e54c	                jsr selectROMX
10420	.ee5b		29 40		and #$40	                and #$40
10421	.ee5d		aa		tax		                tax
10423	.ee5e		a5 ef		lda $ef		                lda originalA
10424	.ee60		a4 f1		ldy $f1		                ldy originalY
10425	.ee62		b0 04		bcs $ee68	                bcs +
10426	.ee64		a0 00		ldy #$00	                ldy #$00            ;??? - is this actually desirable?
10427	.ee66		b2 f0		lda ($f0)	                lda (originalX)     ;fetch 0th byte of parameter block
10428	.ee68						+
10429	.ee68		38		sec		                sec
10431	.ee69		20 8f f1	jsr $f18f	                jsr LF198
10439	.ee6c						LEEFA:
10440	.ee6c		6a		ror a		                ror a
10441	.ee6d		28		plp		                plp
10442	.ee6e		2a		rol a		                rol a
10443	.ee6f		68		pla		                pla
10444	.ee70		b8		clv		                clv
10445	.ee71		60		rts		                rts

10447	.ee72						osbyte00To6A:
10448	.ee72		a0 00		ldy #$00	                ldy #$00        ;Y=0 on entry for this lot
10449	.ee74		c9 1a		cmp #$1a	                cmp #$1A        ;OSBYTE <=$19 is table-driven
10450	.ee76		90 c0		bcc $ee38	                bcc osbyteUseTable ;taken if OSBYTE $00-$19
10452	.ee78		c9 44		cmp #$44	                cmp #$44
10453	.ee7a		f0 ba		beq $ee36	                beq osbyte44To45
10454	.ee7c		c9 45		cmp #$45	                cmp #$45
10455	.ee7e		f0 b6		beq $ee36	                beq osbyte44To45
10457	.ee80		80 04		bra $ee86	                bra handleUnrecognisedOSBYTEOrOSWORD

10459	.ee82						handleUnrecognisedOSWORD:
10460	.ee82		a2 08		ldx #$08	                ldx #romServiceCallUnrecognisedOSWORD
10461	.ee84		68		pla		                pla
10462	.ee85		68		pla		                pla
10463	.ee86						handleUnrecognisedOSBYTEOrOSWORD:
10464	.ee86		20 ac ed	jsr $edac	                jsr makeROMServiceCall
10468	.ee89		d0 87		bne $ee12	                bne LEF85
10470	.ee8b		a6 f0		ldx $f0		                ldx originalX
10471	.ee8d		80 dd		bra $ee6c	                bra LEEFA

10480							;-------------------------------------------------------------------------

10486							;-------------------------------------------------------------------------
10487							;
10488							; OSWORD 14 (&0E) Read CMOS clock [MasRef D.3-22]
10489							;

10498							;-------------------------------------------------------------------------
10499							;
10500							; Entry point for OSWORD.
10501							;
10502							; D.3-3
10503							;
10505	.ee8f						oswordEntryPoint:
10506	.ee8f		48		pha		                pha             ;save OSWORD request
10507	.ee90		08		php		                php
10508	.ee91		78		sei		                sei
10509	.ee92		85 ef		sta $ef		                sta originalA
10510	.ee94		86 f0		stx $f0		                stx originalX
10511	.ee96		84 f1		sty $f1		                sty originalY
10512	.ee98		a2 08		ldx #$08	                ldx #romServiceCallUnrecognisedOSWORD
10513	.ee9a		c9 e0		cmp #$e0	                cmp #$E0
10514	.ee9c		b0 92		bcs $ee30	                bcs osbyteOrUSERV ;taken if OSWORD $E0 or higher -
10515							                                  ;these go via USERV

10530	.ee9e		c9 10		cmp #$10	                cmp #$10
10531	.eea0		90 0d		bcc $eeaf	                bcc osword00To0F
10532	.eea2		c9 44		cmp #$44	                cmp #$44
10533	.eea4		b0 e0		bcs $ee86	                bcs handleUnrecognisedOSBYTEOrOSWORD
10534	.eea6		c9 42		cmp #$42	                cmp #$42
10535	.eea8		b0 03		bcs $eead	                bcs osword42To43
10536	.eeaa		38		sec		                sec
10537	.eeab		80 d9		bra $ee86	                bra handleUnrecognisedOSBYTEOrOSWORD

10539	.eead						osword42To43:
10541	.eead		e9 33		sbc #$33	                sbc #$42-((osword42AndAboveRoutineTable-oswordRoutineTable)/2-1)
10542	.eeaf						osword00To0F:
10544	.eeaf		69 59		adc #$59	                adc #(oswordRoutineTable-osbyteAndOSWORDRoutineTable)/2
10545	.eeb1		0a		asl a		                asl a
10546	.eeb2		80 86		bra $ee3a	                bra callOSBYTEOrOSWORDFromTable

10550							;-------------------------------------------------------------------------
10551							;
10552							; OSWORD 5 (&05) Read byte from I/O processor memory [MasRef D.3-9]
10553							;
10554	.eeb4						osword05:
10555	.eeb4		20 bc ee	jsr $eebc	                jsr getAddressFromOSWORDParameterBlock
10556	.eeb7		b2 fa		lda ($fa)	                lda (SEIWKA)                 ;read byte from the address
10557	.eeb9		91 f0		sta ($f0),y	                sta (originalX),y                  ;update parameter block
10558	.eebb		60		rts		                rts

10560							;-------------------------------------------------------------------------
10561							;
10562							; OSWORD 6 (&06) Write byte to I/O processor memory [MasRef D.3-9]
10563							;

10569							;-------------------------------------------------------------------------
10570							;
10571							; Get address from OSWORD parameter block.
10572							;
10573							; entry:
10574							;
10575							; A = 0th byte of parameter block
10576							;
10577							; Y = 0
10578							;
10579							; (originalX) = parameter block
10580							;
10581							; exit:
10582							;
10583							; (SEIWKA) = address, first two bytes from parameter block
10584							;
10585							; Y = 4 (this is just convenient for both callers)
10586							;
10587	.eebc						getAddressFromOSWORDParameterBlock:
10588	.eebc		85 fa		sta $fa		                sta SEIWKA
10589	.eebe		c8		iny		                iny
10590	.eebf		b1 f0		lda ($f0),y	                lda (originalX),y
10591	.eec1		85 fb		sta $fb		                sta SEIWKA+1
10592	.eec3		a0 04		ldy #$04	                ldy #$04
10593	.eec5						ldxim03_rts:
10595	.eec5		a2 03		ldx #$03	                ldx #$03
10601	.eec7		60		rts		                rts

10603							;-------------------------------------------------------------------------
10604							;
10605							; OSBYTE 0 (&00) Display MOS version
10606							;
10607							; OSBYTE 0 has the effect of performing a BRK instruction and
10608							; displaying the MOS version number.
10609							;
10610							; Entry parameters :
10611							;
10612							; X=0 executes a BRK and displays the OS version
10613							;
10614							; X=1 executes an RTS and returns the Operating system version
10615							;
10616							; On exit : X=<OS version>
10617							;
10618							; D.2-18
10619							;
10620	.eec8						osbyte00:                       ;ef6f
10621	.eec8		d0 fb		bne $eec5	                bne ldxim03_rts ;branch taken if X<>0 - return with
10622							                                 ;X=3

10624							; do a BRK and print MOS version number.

10626	.eeca		00		brk #		                brk
10627	>eecb		f7 4d 4f 53 20 33 2e 32		                .text $f7,versionString,0
	>eed3		39 00

10629							;-------------------------------------------------------------------------
10630							;
10631							; OSWORD 7 (&07) Generate a sound [MasRef D.3-10]
10632							;
10633	.eed5						osword07:
10634	.eed5		c8		iny		                iny
10635	.eed6		b1 f0		lda ($f0),y	                lda ($F0),y
10636	.eed8		c9 20		cmp #$20	                cmp #$20
10637	.eeda		b0 a6		bcs $ee82	                bcs handleUnrecognisedOSWORD
10638	.eedc		88		dey		                dey
10639	.eedd		20 50 ef	jsr $ef50	                jsr LEFF6
10640	.eee0		09 04		ora #$04	                ora #$04
10641	.eee2		aa		tax		                tax
10642	.eee3		90 05		bcc $eeea	                bcc LEF90
10643	.eee5		20 25 e9	jsr $e925	                jsr LE95A
10644	.eee8		a0 01		ldy #$01	                ldy #$01
10645	.eeea						LEF90:
10646	.eeea		20 50 ef	jsr $ef50	                jsr LEFF6
10647	.eeed		85 fa		sta $fa		                sta $FA
10648	.eeef		08		php		                php
10649	.eef0		a0 06		ldy #$06	                ldy #$06
10650	.eef2		b1 f0		lda ($f0),y	                lda ($F0),y
10651	.eef4		48		pha		                pha
10652	.eef5		a0 04		ldy #$04	                ldy #$04
10653	.eef7		b1 f0		lda ($f0),y	                lda ($F0),y
10654	.eef9		48		pha		                pha
10655	.eefa		a0 02		ldy #$02	                ldy #$02
10656	.eefc		b1 f0		lda ($f0),y	                lda ($F0),y
10657	.eefe		2a		rol a		                rol a
10658	.eeff		3a		dec a		                dec a
10659	.ef00		3a		dec a		                dec a
10660	.ef01		0a		asl a		                asl a
10661	.ef02		0a		asl a		                asl a
10662	.ef03		05 fa		ora $fa		                ora $FA
10663	.ef05		20 6e e9	jsr $e96e	                jsr LE9A3
10664	.ef08		90 1e		bcc $ef28	                bcc LEFCE
10665	.ef0a		68		pla		                pla
10666	.ef0b		68		pla		                pla
10667	.ef0c		28		plp		                plp

10669							                ; WTF... fall through to OSBYTE $75!

10671							;-------------------------------------------------------------------------
10672							;
10673							; OSBYTE 117 (&75) Read VDU status [MasRef D.2-32]
10674							;
10675	.ef0d						osbyte75:
10676	.ef0d		a6 d0		ldx $d0		                ldx STATE
10677	.ef0f		60		rts		                rts

10679							;-------------------------------------------------------------------------
10680							;
10681							; VDU 7 (&07) Produce BELL sound [MasRef E.3-4]
10682							;
10683	.ef10						vdu7EntryPoint:
10684	.ef10		08		php		                php
10685	.ef11		78		sei		                sei
10686	.ef12		ad 63 02	lda $0263	                lda bellChannel
10687	.ef15		29 07		and #$07	                and #$07
10688	.ef17		09 04		ora #$04	                ora #$04
10689	.ef19		aa		tax		                tax
10690	.ef1a		ad 64 02	lda $0264	                lda bellSound
10691	.ef1d		20 05 ea	jsr $ea05	                jsr callINSV
10692	.ef20		ad 66 02	lda $0266	                lda bellDuration
10693	.ef23		48		pha		                pha
10694	.ef24		ad 65 02	lda $0265	                lda bellFrequency
10695	.ef27		48		pha		                pha
10696	.ef28						LEFCE:
10697	.ef28		38		sec		                sec
10698	.ef29		7e 00 08	ror $0800,x	                ror $0800,x
10699	.ef2c		68		pla		                pla
10700	.ef2d		20 05 ea	jsr $ea05	                jsr callINSV
10701	.ef30		68		pla		                pla
10702	.ef31		20 05 ea	jsr $ea05	                jsr callINSV
10703	.ef34		28		plp		                plp
10704	.ef35		60		rts		                rts

10706							;-------------------------------------------------------------------------
10707							;
10708							; OSWORD 8 (&08) Define a sound envelope [MasRef D.3-14]
10709							;
10710	.ef36						osword08:
10711	.ef36		3a		dec a		                dec a                   ;get index of 1-based envelope
10712	.ef37		0a		asl a		                asl a
10713	.ef38		0a		asl a		                asl a
10714	.ef39		0a		asl a		                asl a
10715	.ef3a		0a		asl a		                asl a                        ;index*16
10716	.ef3b		09 0f		ora #$0f	                ora #$0F                     ;index*16+15
10717	.ef3d		aa		tax		                tax                          ;
10718	.ef3e		a9 00		lda #$00	                lda #$00                     ;
10719	.ef40		a0 10		ldy #$10	                ldy #16             ;16 bytes of envelope data get set
10720	.ef42						-
10721	.ef42		c0 0e		cpy #$0e	                cpy #$0E                     ;
10722	.ef44		b0 02		bcs $ef48	                bcs + ;taken if last 2 bytes of data - they get initialized to $00
10723	.ef46		b1 f0		lda ($f0),y	                lda (originalX),y        ;fetch byte from OSWORD block
10724	.ef48						+
10725	.ef48		9d c0 08	sta $08c0,x	                sta envelope1Data,x          ;set envelope data bytes
10726	.ef4b		ca		dex		                dex
10727	.ef4c		88		dey		                dey
10728	.ef4d		d0 f3		bne $ef42	                bne -
10729	.ef4f		60		rts		                rts

10731							;-------------------------------------------------------------------------

10733	.ef50						LEFF6:
10734	.ef50		b1 f0		lda ($f0),y	                lda ($F0),y
10735	.ef52		c9 10		cmp #$10	                cmp #$10
10736	.ef54		29 03		and #$03	                and #$03
10737	.ef56		c8		iny		                iny
10738	.ef57		60		rts		                rts

10740							;-------------------------------------------------------------------------
10741							;
10742							; OSWORD 3 (&03) Read interval timer [MasRef D.3-8]
10743							;
10744	.ef58						osword03:
10745	.ef58		a2 0f		ldx #$0f	                ldx #$0F
10746	.ef5a		80 03		bra $ef5f	                bra LF005

10748							;-------------------------------------------------------------------------
10749							;
10750							; OSWORD 1 (&01) Read system clock [MasRef D.3-7]
10751							;
10752	.ef5c						osword01:
10753	.ef5c		ae 83 02	ldx $0283	                ldx timerSwitchState
10754	.ef5f						LF005:
10755	.ef5f		a0 04		ldy #$04	                ldy #$04
10756	.ef61						-
10757	.ef61		bd 8d 02	lda $028d,x	                lda timer0-initialTimerSwitchState,x
10758	.ef64		91 f0		sta ($f0),y	                sta (originalX),y
10759	.ef66		e8		inx		                inx
10760	.ef67		88		dey		                dey
10761	.ef68		10 f7		bpl $ef61	                bpl -
10762	.ef6a						rtsF010:
10763	.ef6a		60		rts		                rts

10765							;-------------------------------------------------------------------------
10766							;
10767							; OSWORD 4 (&04) Write interval timer [MasRef D.3-9]
10768							;
10769	.ef6b						osword04:
10770	.ef6b		a9 0f		lda #$0f	                lda #intervalTimer-(timer0-initialTimerSwitchState)
10771	.ef6d		80 06		bra $ef75	                bra copyTIMEValue

10773							;-------------------------------------------------------------------------
10774							;
10775							; OSWORD 2 (&02) Write system clock [MasRef D.3-8]
10776							;
10777	.ef6f						osword02:
10778	.ef6f		ad 83 02	lda $0283	                lda timerSwitchState
10779	.ef72		49 0f		eor #$0f	                eor #$0F       ;select the timer that isn't being used
10780	.ef74		18		clc		                clc
10781	.ef75						copyTIMEValue:
10782	.ef75		48		pha		                pha
10783	.ef76		aa		tax		                tax
10784	.ef77		a0 04		ldy #$04	                ldy #$04
10785	.ef79						-
10786	.ef79		b1 f0		lda ($f0),y	                lda (originalX),y
10787	.ef7b		9d 8d 02	sta $028d,x	                sta timer0-initialTimerSwitchState,x
10788	.ef7e		e8		inx		                inx
10789	.ef7f		88		dey		                dey
10790	.ef80		10 f7		bpl $ef79	                bpl -
10791	.ef82		68		pla		                pla
10792	.ef83		b0 e5		bcs $ef6a	                bcs rtsF010
10793	.ef85		8d 83 02	sta $0283	                sta timerSwitchState
10794	.ef88		60		rts		                rts

10796							;-------------------------------------------------------------------------
10797							;
10798							; OSWORD 0 (&00) Read line from input stream to memory [MasRef D.3-6]
10799							;
10800	.ef89						osword00:
10801	.ef89		a0 04		ldy #$04	                ldy #$04
10802	.ef8b						LF031:
10803	.ef8b		b1 f0		lda ($f0),y	                lda (originalX),y
10806	.ef8d		99 b1 02	sta $02b1,y	                sta osword0MaxLineLength-2,y
10807	.ef90		88		dey		                dey
10808	.ef91		c0 02		cpy #$02	                cpy #$02
10809	.ef93		b0 f6		bcs $ef8b	                bcs LF031
10810	.ef95		b1 f0		lda ($f0),y	                lda ($F0),y
10811	.ef97		85 e9		sta $e9		                sta $E9
10812	.ef99		88		dey		                dey
10813	.ef9a		9c 69 02	stz $0269	                stz pagedModeCounter
10814	.ef9d		b2 f0		lda ($f0)	                lda ($F0)
10815	.ef9f		85 e8		sta $e8		                sta $E8
10816	.efa1		58		cli		                cli
10817	.efa2		80 07		bra $efab	                bra LF051

10819	.efa4						LF04A:
10820	.efa4		a9 07		lda #$07	                lda #$07
10821	.efa6						LF04C:
10822	.efa6		88		dey		                dey
10823	.efa7						LF04D:
10824	.efa7		c8		iny		                iny
10825	.efa8						LF04E:
10826	.efa8		20 ee ff	jsr $ffee	                jsr OSWRCH
10827	.efab						LF051:
10828	.efab		20 e0 ff	jsr $ffe0	                jsr OSRDCH
10829	.efae		b0 49		bcs $eff9	                bcs LF09F
10830	.efb0		aa		tax		                tax
10831	.efb1		ad 7c 02	lda $027c	                lda characterDestinationStatus
10832	.efb4		6a		ror a		                ror a
10833	.efb5		6a		ror a		                ror a
10834	.efb6		8a		txa		                txa
10835	.efb7		b0 05		bcs $efbe	                bcs LF064
10836	.efb9		ae 6a 02	ldx $026a	                ldx vduQueueNegativeLength
10837	.efbc		d0 ea		bne $efa8	                bne LF04E
10838	.efbe						LF064:
10839	.efbe		c9 7f		cmp #$7f	                cmp #$7F
10840	.efc0		d0 07		bne $efc9	                bne LF06F
10841	.efc2		c0 00		cpy #$00	                cpy #$00
10842	.efc4		f0 e5		beq $efab	                beq LF051
10843	.efc6		88		dey		                dey
10844	.efc7		80 df		bra $efa8	                bra LF04E

10846	.efc9						LF06F:
10847	.efc9		c9 15		cmp #$15	                cmp #$15
10848	.efcb		d0 0d		bne $efda	                bne LF080
10849	.efcd		98		tya		                tya
10850	.efce		f0 db		beq $efab	                beq LF051
10851	.efd0		a9 7f		lda #$7f	                lda #$7F
10852	.efd2						LF078:
10853	.efd2		20 ee ff	jsr $ffee	                jsr OSWRCH
10854	.efd5		88		dey		                dey
10855	.efd6		d0 fa		bne $efd2	                bne LF078
10856	.efd8		80 d1		bra $efab	                bra LF051

10858	.efda						LF080:
10859	.efda		91 e8		sta ($e8),y	                sta ($E8),y
10860	.efdc		c9 0d		cmp #$0d	                cmp #$0D
10861	.efde		f0 13		beq $eff3	                beq LF099
10862	.efe0		cc b3 02	cpy $02b3	                cpy osword0MaxLineLength
10863	.efe3		b0 bf		bcs $efa4	                bcs LF04A
10864	.efe5		cd b4 02	cmp $02b4	                cmp osword0MinASCIICharacter
10865	.efe8		90 bc		bcc $efa6	                bcc LF04C
10866	.efea		cd b5 02	cmp $02b5	                cmp osword0MaxASCIICharacter
10867	.efed		f0 b8		beq $efa7	                beq LF04D
10868	.efef		90 b6		bcc $efa7	                bcc LF04D
10869	.eff1		80 b3		bra $efa6	                bra LF04C

10871	.eff3						LF099:
10872	.eff3		20 e7 ff	jsr $ffe7	                jsr OSNEWL
10873	.eff6		20 ff ea	jsr $eaff	                jsr callNETV
10874	.eff9						LF09F:
10875	.eff9		a5 ff		lda $ff		                lda $FF
10876	.effb		2a		rol a		                rol a
10877	.effc		60		rts		                rts

10879							;-------------------------------------------------------------------------
10880							;
10881							; OSBYTE 3 (&03) Specify output stream [MasRef D.2-19]
10882							;
10883	.effd						osbyte03:
10884	.effd		da		phx		                phx
10885	.effe		ae 7c 02	ldx $027c	                ldx characterDestinationStatus
10886	.f001		a9 0a		lda #$0a	                lda #printerDriverFX3
10887	.f003		20 07 e9	jsr $e907	                jsr callPrinterDriver
10888	.f006		fa		plx		                plx
10889	.f007		a9 03		lda #$03	                lda #$03
10890	.f009		a0 00		ldy #$00	                ldy #$00
10891	.f00b		80 23		bra $f030	                bra osbyte04

10893							;-------------------------------------------------------------------------
10894							;
10895							; OSBYTE 6 (&06) Write printer ignore character [MasRef D.2-21]
10896							;
10897	.f00d						osbyte06:                       ;f0b3
10898	.f00d		4e 46 02	lsr $0246	                lsr noignoreState
10899	.f010		80 16		bra $f028	                bra osbyte01

10901							;-------------------------------------------------------------------------
10902							;
10903							; OSBYTE 114 (&72) Write usage of shadow memory [MasRef D.2-32]
10904							;
10905	.f012						osbyte72:                       ;f0b8
10906	.f012		a9 1f		lda #$1f	                lda #<(shadowRAMState-mosVariables+firstMOSVariableOSBYTE^osbyte01.magic)

10908							                ; $1f;<shadowRAMState^osbyte01.magic
10909	.f014		80 10		bra $f026	                bra LF0CC

10911							;-------------------------------------------------------------------------
10912							;
10913							; OSBYTE 5 (&05) Write printer driver type [MasRef D.2-20]
10914							;
10915	.f016						osbyte05:
10916	.f016						waitForPrinterDriverDormant:
10917	.f016		58		cli		                cli
10918	.f017		78		sei		                sei
10919	.f018		24 ff		bit $ff		                bit $FF                      ;test for ESCAPE
10920	.f01a		30 29		bmi $f045	                bmi rtsF0EB                  ;taken if ESCAPE pressed
10921	.f01c		2c d1 02	bit $02d1	                bit bufferEmptyFlags+bufferPrinter
10922	.f01f		10 f5		bpl $f016	                bpl waitForPrinterDriverDormant ;taken if printer driver active
10923	.f021		20 07 e9	jsr $e907	                jsr callPrinterDriver    ;call with A=printerDriverFX5
10924	.f024		a0 00		ldy #$00	                ldy #$00
10925	.f026						LF0CC:
10926	.f026		64 f1		stz $f1		                stz $F1

10928							                ; fall through to standard MOS variable handling,
10929							                ; affecting printerDriverType

10931							;-------------------------------------------------------------------------
10932							;
10933							; OSBYTE 1 (&01) Write user flag [MasRef D.2-18]
10934							;
10935	.f028						osbyte01: .block
10936							; Magic value that turns 1 into the OSBYTE number for the user flag.
10937	=240						magic=firstMOSVariableOSBYTE+(userFlag-mosVariables)-1
10938	.f028		49 f0		eor #$f0	                eor #magic
10939	.f02a		80 07		bra $f033	                bra osbyteA6X  ;jump to standard MOS variable handling
10940							                .endblock

10942							;-------------------------------------------------------------------------
10943							;
10944							; OSBYTE 12 (&0C) Write keyboard auto-repeat rate [MasRef D.2-23]
10945							;
10946	.f02c						osbyte0C:
10947	.f02c		f0 36		beq $f064	                beq resetKeyRepeat    ;taken if X=0

10949							;-------------------------------------------------------------------------
10950							;
10951							; OSBYTE 11 (&0B) Write keyboard auto-repeat delay [MasRef D.2-22]
10952							;
10953	.f02e						osbyte0B:
10954	.f02e		69 cf		adc #$cf	                adc #firstMOSVariableOSBYTE+(keyboardAutoRepeatDelay-mosVariables)+$b

10956							                ;if osbyte0C, A=$db
10957							                ;if osbyteOD, A=$dc

10959							;-------------------------------------------------------------------------
10960							;
10961							; OSBYTE 4 (&04) Enable/disable cursor editing [MasRef D.2-19]
10962							;
10963	.f030						osbyte04:
10964	.f030		18		clc		                clc
10965	.f031		69 e9		adc #$e9	                adc #firstMOSVariableOSBYTE+(editKeysMode-mosVariables)-4 ;-4 because OSBYTE 4

10967							                ;if originally OSBYTE 4 (&04) Enable/disable cursor
10968							                ;editing [MasRef D.2-19], it's now OSBYTE 237 (&ED)
10969							                ;Read/write cursor editing status [MasRef D.2-77].
10970							                ;
10971							                ;if originally OSBYTE 12 (&0C) Write keyboard
10972							                ;auto-repeat rate [MasRef D.2-23], it's now OSBYTE 197
10973							                ;(&C5) Read/write keyboard auto-repeat rate [MasRef
10974							                ;D.2-60].
10975							                ;
10976							                ;if originally OSBYTE 11 (&0B) Write keyboard
10977							                ;auto-repeat delay [MasRef D.2-22], it's now OSBYTE
10978							                ;196 (&C4) Read/write keyboard auto-repeat delay
10979							                ;[MasRef D.2-60].

10981	.f033						osbyteA6X:
10982	.f033		86 f0		stx $f0		                stx originalX

10984							;-------------------------------------------------------------------------
10985							;
10986							; OSBYTE 166 (&A6) Read start address of MOS variables [MasRef D.2-50]
10987							;
10988	.f035						osbyteA6:
10989	.f035		a8		tay		                tay             ;
10990	.f036		b9 90 01	lda $0190,y	                lda mosVariables-firstMOSVariableOSBYTE,y;
10991	.f039		aa		tax		                tax             ;save old value
10992	.f03a		25 f1		and $f1		                and originalY   ;AND old value with Y
10993	.f03c		45 f0		eor $f0		                eor originalX   ;EOR old value with X
10994	.f03e		99 90 01	sta $0190,y	                sta mosVariables-firstMOSVariableOSBYTE,y     ;set new variable value
10995	.f041		b9 91 01	lda $0191,y	                lda mosVariables-firstMOSVariableOSBYTE+1,y
10996	.f044		a8		tay		                tay             ;Y=contents of next location
10997	.f045						rtsF0EB:
10998	.f045		60		rts		                rts

11000							;-------------------------------------------------------------------------
11001							;
11002							; This table is used to set the serial baud rate.
11003							;
11004							;   - bit 7 is not used (always clear)
11005							;   - bit 6 is not used (always set)
11006							;   - bits 3,4,5 indicate the serial receive baud rate
11007							;   - bits 0,1,2 indicate the serial transmit baud rate
11008							;
11009							;       111 =    75 baud
11010							;       011 =   150 baud
11011							;       101 =   300 baud
11012							;       001 =  1200 baud
11013							;       110 =  2400 baud
11014							;       010 =  4800 baud
11015							;       100 =  9600 baud
11016							;       000 = 19200 baud
11017							;
11019	.f046						serialBaudRatesTable:
11020	>f046		64				                .byte %01100100;$64
11021	>f047		7f				                .byte %01111111;$7f
11022	>f048		5b				                .byte %01011011;$5b
11023	>f049		6d				                .byte %01101101;$6d
11024	>f04a		49				                .byte %01001001;$49
11025	>f04b		76				                .byte %01110110;$76
11026	>f04c		52				                .byte %01010010;$52
11027	>f04d		64				                .byte %01100100;$64
11028	>f04e		40				                .byte %01000000;$40

11031							;-------------------------------------------------------------------------
11032							;
11033							; OSBYTE 19 (&13) Wait for vertical sync [MasRef D.2-26]
11034							;
11035	.f04f						osbyte13:
11036	.f04f		ad 40 02	lda $0240	                lda cfsTimeoutCounter
11037	.f052						-
11038	.f052		58		cli		                cli
11039	.f053		78		sei		                sei
11040	.f054		cd 40 02	cmp $0240	                cmp cfsTimeoutCounter
11041	.f057		f0 f9		beq $f052	                beq -

11043							                ; fall through to OSBYTE $a0 (!!)

11045							;-------------------------------------------------------------------------
11046							;
11047							; OSBYTE 160 (&A0) Read VDU variable value [MasRef D.2-49]
11048							;
11049	.f059						osbyteA0:
11050	.f059		bc 01 03	ldy $0301,x	                ldy vduv+1,x
11051	.f05c		bd 00 03	lda $0300,x	                lda vduv+0,x
11052	.f05f		aa		tax		                tax
11053	.f060		60		rts		                rts

11055							;-------------------------------------------------------------------------
11056							;
11057							; Reset key auto repeat settings to the defaults set in CMOS.
11058							;
11060	.f061						clearTSTAndResetKeyRepeat:
11061	.f061		20 53 f3	jsr $f353	                jsr withTSTClear
11063	.f064						resetKeyRepeat:
11064	.f064		20 0d f3	jsr $f30d	                jsr withTerminalROM
11066	.f067		a2 1a		ldx #$1a	                ldx #CMOSBytes.keyboardAutoRepeatDelay+cmosBytesOffset
11067	.f069		20 a3 96	jsr $96a3	                jsr readRTCByte
11068	.f06c		8d 54 02	sta $0254	                sta keyboardAutoRepeatDelay
11069	.f06f		a2 1b		ldx #$1b	                ldx #CMOSBytes.keyboardAutoRepeatRate+cmosBytesOffset
11070	.f071		20 a3 96	jsr $96a3	                jsr readRTCByte
11071	.f074		a8		tay		                tay
11077	.f075		ae 55 02	ldx $0255	                ldx keyboardAutoRepeatRate
11078	.f078		8c 55 02	sty $0255	                sty keyboardAutoRepeatRate
11079	.f07b		60		rts		                rts

11081							;-------------------------------------------------------------------------
11082							;
11083							; OSBYTE 18 (&12) Reset soft keys [MasRef D.2-26]
11084							;
11085							; MasRef says X undefined on exit; in fact, X=0, and scanROMs
11086							; relies on this.
11087							;
11088	.f07c						osbyte12:
11089	.f07c		38		sec		                sec
11090	.f07d		6e 84 02	ror $0284	                ror softKeyConsistencyFlag   ;mark soft keys inconsistent
11091	.f080		a5 f4		lda $f4		                lda $F4
11092	.f082		48		pha		                pha                          ;push selected paged ROM
11093	.f083		20 4a e5	jsr $e54a	                jsr selectTerminalROMAndANDY

11095							                ; point each soft key at the 0th byte of the strings -
11096							                ; they all then have length 0.
11097	.f086		a2 10		ldx #$10	                ldx #softKeyCount
11098	.f088						-
11099	.f088		a9 22		lda #$22	                lda #<andy.softKeys.strings
11100	.f08a		9d 00 80	sta $8000,x	                sta andy.softKeys.stringLSBs,x
11101	.f08d		a9 80		lda #$80	                lda #>andy.softKeys.strings
11102	.f08f		9d 11 80	sta $8011,x	                sta andy.softKeys.stringMSBs,x
11103	.f092		ca		dex		                dex
11104	.f093		10 f3		bpl $f088	                bpl -

11106	.f095		68		pla		                pla                 ;pop previously selected paged ROM
11107	.f096		20 5d e5	jsr $e55d	                jsr selectROMA

11109	.f099		9c 68 02	stz $0268	                stz softKeyStringLength
11110	.f09c		9c 84 02	stz $0284	                stz softKeyConsistencyFlag   ;mark soft keys consistent
11111	.f09f		e8		inx		                inx
11112	.f0a0		60		rts		                rts

11114							;-------------------------------------------------------------------------
11115							;
11116							; OSWORD 11 (&0B) Read the palette [MasRef D.3-20]
11117							;
11118	.f0a1						osword0B:
11119	.f0a1		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne
11120	.f0a4		aa		tax		                tax
11121	.f0a5		bd 6f 03	lda $036f,x	                lda vduv.currentPalette,x
11122	.f0a8						LF146:
11123	.f0a8		c8		iny		                iny
11124	.f0a9						LF147:
11125	.f0a9		91 f0		sta ($f0),y	                sta (originalX),y
11126	.f0ab		a9 00		lda #$00	                lda #$00                     ;fill last 3 bytes with 0
11127	.f0ad		c0 04		cpy #$04	                cpy #$04
11128	.f0af		d0 f7		bne $f0a8	                bne LF146
11129	.f0b1		60		rts		                rts

11131							;-------------------------------------------------------------------------
11132							;
11133							; OSWORD 9 (&09) Read pixel logical colour [MasRef D.3-19]
11134							;
11135	.f0b2						osword09:                                    ;f150
11136	.f0b2		20 24 f3	jsr $f324	                jsr withMOSROM               ; sF150= 20 AB F3     +s
11137	.f0b5		a0 03		ldy #$03	                ldy #$03
11138	.f0b7						-
11139	.f0b7		b1 f0		lda ($f0),y	                lda (originalX),y
11140	.f0b9		99 28 03	sta $0328,y	                sta vduv.workspace._28,y
11141	.f0bc		b9 10 03	lda $0310,y	                lda $0310,y
11142	.f0bf		48		pha		                pha
11143	.f0c0		88		dey		                dey
11144	.f0c1		10 f4		bpl $f0b7	                bpl -
11145	.f0c3		a9 28		lda #$28	                lda #VDUVariables.workspace._28
11146	.f0c5		20 b6 dd	jsr $ddb6	                jsr readPixelColour
11147	.f0c8		aa		tax		                tax
11148	.f0c9		a0 00		ldy #$00	                ldy #$00
11149	.f0cb						LF169:
11150	.f0cb		68		pla		                pla
11151	.f0cc		99 10 03	sta $0310,y	                sta $0310,y
11152	.f0cf		c8		iny		                iny
11153	.f0d0		c0 04		cpy #$04	                cpy #$04
11154	.f0d2		d0 f7		bne $f0cb	                bne LF169
11155	.f0d4		8a		txa		                txa
11156	.f0d5		80 d2		bra $f0a9	                bra LF147

11158	.f0d7						osword0A:                                    ;f175
11159	.f0d7		20 2e e2	jsr $e22e	                jsr getSoftCharacterDefinitionAddress
11160	.f0da		a0 00		ldy #$00	                ldy #$00
11161	.f0dc		a5 f4		lda $f4		                lda $F4
11162	.f0de		48		pha		                pha
11163	.f0df		20 4a e5	jsr $e54a	                jsr selectTerminalROMAndANDY
11164	.f0e2						LF180:
11165	.f0e2		b1 de		lda ($de),y	                lda ($DE),y
11166	.f0e4		c8		iny		                iny
11167	.f0e5		91 f0		sta ($f0),y	                sta ($F0),y
11168	.f0e7		c0 08		cpy #$08	                cpy #$08
11169	.f0e9		d0 f7		bne $f0e2	                bne LF180
11170	.f0eb		fa		plx		                plx
11171	.f0ec		4c 4c e5	jmp $e54c	                jmp selectROMX

11173	.f0ef						osword0C:                                    ;f18d
11174	.f0ef		20 24 f3	jsr $f324	                jsr withMOSROM
11175	.f0f2		08		php		                php
11176	.f0f3		2d 60 03	and $0360	                and $0360
11177	.f0f6		aa		tax		                tax
11178	.f0f7		c8		iny		                iny
11179	.f0f8		b1 f0		lda ($f0),y	                lda ($F0),y
11180	.f0fa		4c 38 c6	jmp $c638	                jmp LC639

11182	.f0fd						osword0D:                                    ;f19b
11183	.f0fd		20 24 f3	jsr $f324	                jsr withMOSROM
11184	.f100		a9 03		lda #$03	                lda #$03
11185	.f102		20 07 f1	jsr $f107	                jsr LF1A5
11186	.f105		a9 07		lda #$07	                lda #$07
11187	.f107						LF1A5:
11188	.f107		48		pha		                pha
11189	.f108		20 b8 e2	jsr $e2b8	                jsr LE2B6
11190	.f10b		20 de c4	jsr $c4de	                jsr LC4DF
11191	.f10e		a2 03		ldx #$03	                ldx #$03
11192	.f110		68		pla		                pla
11193	.f111		a8		tay		                tay
11194	.f112						LF1B0:
11195	.f112		bd 10 03	lda $0310,x	                lda $0310,x
11196	.f115		91 f0		sta ($f0),y	                sta ($F0),y
11197	.f117		88		dey		                dey
11198	.f118		ca		dex		                dex
11199	.f119		10 f7		bpl $f112	                bpl LF1B0
11200	.f11b		60		rts		                rts

11202							; Read address of bottom of screen/top of user memory
11203							; ===================================================
11204	.f11c						osbyte84:                     ;f1ba
11205	.f11c		a5 d0		lda $d0		                lda STATE     ; Get VDU status
11206	.f11e		89 10		bit #$10	                bit #STATE.isShadowMode ; If shadow screen, jump to return &8000
11207	.f120		d0 18		bne $f13a	                bne LF1D8
11208	.f122						LF1C0:
11209	.f122		ad 55 03	lda $0355	                lda $0355                    ; Get current screen MODE

11211							; Return start of screen for non-shadow MODE in X
11212							; -----------------------------------------------
11213	.f125						LF1C3:
11214	.f125		29 07		and #$07	                and #$07
11215	.f127		a8		tay		                tay
11216	.f128		be 6a e1	ldx $e16a,y	                ldx screenMODEGroupForMODE,y ; Get screen map for supplied MODE
11217	.f12b		bd 80 e1	lda $e180,x	                lda startScreenAddressHighByteForScreenMODEGroup,x ; Get address top byte for this screen map
11218	.f12e						LF1CC:
11219	.f12e		a2 00		ldx #$00	                ldx #$00                     ; Address=&xx00
11220	.f130		a8		tay		                tay
11221	.f131		60		rts		                rts

11223							;-------------------------------------------------------------------------
11224							;
11225							; OSBYTE 133 (&85) Read top of user RAM for given mode [MasRef D.2-41]
11226							;
11227	.f132						osbyte85:
11228	.f132		8a		txa		                txa                          ; If MODE &80+n, return &8000
11229	.f133		30 05		bmi $f13a	                bmi LF1D8
11230	.f135		ae 7f 02	ldx $027f	                ldx shadowRAMState ; If *SHADOW<>0, jump to return non-shadow address
11231	.f138		d0 eb		bne $f125	                bne LF1C3
11232	.f13a						LF1D8:
11233	.f13a		a9 80		lda #$80	                lda #$80                     ; Return &8000
11234	.f13c		80 f0		bra $f12e	                bra LF1CC

11236							;-------------------------------------------------------------------------
11237							;
11238							; OSBYTE 135 (&87) Read screen mode and character at text cursor
11239							; position [MasRef D.2-42]
11240							;
11241	.f13e						osbyte87: ;F1DC:
11242	.f13e		20 24 f3	jsr $f324	                jsr withMOSROM
11243	.f141		4c f7 dd	jmp $ddf7	                jmp readCharacterAtTextCursor

11245							;-------------------------------------------------------------------------
11246							;
11247							; OSBYTE 139 (&8B) Write Filing System options [MasRef D.2-43]
11248							;
11249	.f144						osbyte8B:
11250	.f144		0a		asl a		                asl a

11252							;-------------------------------------------------------------------------
11253							;
11254							; OSBYTE 127 (&7F) Check for end of file on an opened file [MasRef D.2-37]
11255							;
11256	.f145						osbyte7F:
11257	.f145		29 01		and #$01	                and #$01

11259							;-------------------------------------------------------------------------
11260							;
11261							; Call OSFSC. There's no entry point for this.
11262							;
11263	.f147						callFSCV:
11264	.f147		6c 1e 02	jmp ($021e)	                jmp (FSCV)

11266							;-------------------------------------------------------------------------
11267							;
11268							; OSWORD 15 (&0F) Write CMOS clock [MasRef D.3-24]
11269							;

11276							;-------------------------------------------------------------------------

11278							; Set TAPE/ROM extended vectors
11279							; =============================
11280	.f14a						LF1EE:
11281	.f14a		a2 15		ldx #$15	                ldx #$15
11282	.f14c						LF1F0:
11283	.f14c		bd 55 f1	lda $f155,x	                lda LF1FA-1,x
11284	.f14f		9d b9 0d	sta $0db9,x	                sta ExtendedVectorAddress(FILEV)-1,x
11285	.f152		ca		dex		                dex
11286	.f153		d0 f7		bne $f14c	                bne LF1F0
11287	.f155						LF1F9:
11288	.f155		60		rts		                rts

11290							; TAPE/ROM extended vector values
11291							; -------------------------------
11292	.f156						LF1FA:
11293	>f156		a8 a0				                .word osfileTapeOrROM ; FILEV
11294	>f158		0f				                .byte terminalROM
11295	>f159		45 9f				                .word osargsTapeOrROM ; ARGSV
11296	>f15b		0f				                .byte terminalROM
11297	>f15c		06 a3				                .word bputTapeOrROM ; BPUTV
11298	>f15e		0f				                .byte terminalROM
11302	>f15f		67 a3				                .word bgetTapeOrROM ; BGETV
11304	>f161		0f				                .byte terminalROM
11305	>f162		89 a3				                .word osgbpbTapeOrROM ; GBPBV
11306	>f164		0f				                .byte terminalROM
11307	>f165		15 a2				                .word osfindTapeOrROM ; FINDV
11308	>f167		0f				                .byte terminalROM
11309	>f168		a8 9f				                .word fscTapeOrROM  ; FSCV
11310	>f16a		0f				                .byte terminalROM

11312							;-------------------------------------------------------------------------
11313							;
11314							; OSBYTE 109 (&6D) Make temporary Filing System permanent
11315							;
11316							; MasRef D.2-30
11317							;
11318	.f16b						osbyte6D:;f20f
11319	.f16b		ae 01 df	ldx $df01	                ldx hazel.activeFS; Copy active FS to current FS
11320	.f16e		8e 00 df	stx $df00	                stx hazel.currentFS
11321	.f171		ad bc 0d	lda $0dbc	                lda ExtendedVectorAddress(FILEV)+2 ; Copy XFILEV ROM to current FS ROM number
11322	.f174		8d 03 df	sta $df03	                sta hazel.currentFSROM
11323	.f177						rtsF180:
11324	.f177		60		rts		                rts

11326							;-------------------------------------------------------------------------
11327							;
11328							; OSBYTE 20 (&14) Restore default font definitions
11329							;
11330							; MasRef D.2-24
11331							;

11338							;-------------------------------------------------------------------------
11339							;
11340							; OSBYTE 25 (&19) Restore a group of font definitions
11341							;
11342							; MasRef D.2-28
11343							;
11344	.f178						selectTerminalROMAndOSBYTE19:                ;f222
11346	.f178		a2 07		ldx #$07	                ldx #romServiceCallUnrecognisedOSBYTE
11347	.f17a		20 ac ed	jsr $edac	                jsr makeROMServiceCall
11349	.f17d		f0 f8		beq $f177	                beq rtsF180
11353	.f17f		a6 f0		ldx $f0		                ldx originalX
11355	.f181		20 0d f3	jsr $f30d	                jsr withTerminalROM
11356	.f184		4c 3c 97	jmp $973c	                jmp osbyte19

11358							;-------------------------------------------------------------------------

11360							; OSBYTE &16 - Increment ROM polling semaphore
11361							; ========================================
11362	.f187						osbyte16:                       ;f228
11363	.f187		ee 43 02	inc $0243	                inc romPollingSemaphore
11364	.f18a						LF2EB:
11365	.f18a		60		rts		                rts

11367							;-------------------------------------------------------------------------

11369							; OSBYTE &17 - Decrement ROM polling semaphore
11370	.f18b						osbyte17:                       ;f22c
11371							; ========================================
11372	.f18b		ce 43 02	dec $0243	                dec romPollingSemaphore
11373	.f18e		60		rts		                rts

11375							;-------------------------------------------------------------------------

11378	.f18f						LF198:
11379	.f18f		ca		dex		                dex
11380	.f190		10 03		bpl $f195	                bpl LF19E
11381	.f192		20 0d f3	jsr $f30d	                jsr withTerminalROM
11382	.f195						LF19E:
11383	.f195		a6 f0		ldx $f0		                ldx originalX
11384	.f197		6c fa 00	jmp ($00fa)	                jmp (SEIWKA)

11387							;-------------------------------------------------------------------------

11389							; OSBYTE &76 - Set LEDs to keyboard state
11390							; =======================================
11391	.f19a						osbyte76:
11392	.f19a		08		php		                php                          ; Disable IRQs
11393	.f19b		78		sei		                sei
11394	.f19c		a9 40		lda #$40	                lda #$40                     ; Turn on LEDs
11395	.f19e		20 ab f1	jsr $f1ab	                jsr LF241
11396	.f1a1		30 05		bmi $f1a8	                bmi LF23E                    ; Exit if Escape pending
11397	.f1a3		18		clc		                clc                          ; Call KEYV to read SHIFT and CTRL
11398	.f1a4		b8		clv		                clv
11399	.f1a5		20 17 f6	jsr $f617	                jsr callKEYV
11400							; Returns A.b7=CTRL, A.b6=SHIFT, MI=CTRL, VS=SHIFT
11401	.f1a8						LF23E:
11402	.f1a8		28		plp		                plp                          ; Restore IRQs
11403	.f1a9		2a		rol a		                rol a                        ; Set Carry from A bit 7 and return
11404	.f1aa		60		rts		                rts
11405							; Returns A.b7=SHIFT, CS=CTRL

11407							; Set keyboard LEDs
11408							; -----------------
11409	.f1ab						LF241:
11410	.f1ab		90 09		bcc $f1b6	                bcc LF24C                    ; Skip if not called from OSBYTE
11411	.f1ad		a0 07		ldy #$07	                ldy #$07                     ; Turn ShiftLock LED on
11412	.f1af		8c 40 fe	sty $fe40	                sty systemVIA.orb
11413	.f1b2		88		dey		                dey                          ; Turn CapsLock LED on
11414	.f1b3		8c 40 fe	sty $fe40	                sty systemVIA.orb
11415	.f1b6						LF24C:
11416	.f1b6		24 ff		bit $ff		                bit $FF                      ; Test Escape and return
11417	.f1b8		60		rts		                rts

11419							;-------------------------------------------------------------------------

11421	.f1b9						osbyte9A:
11422	.f1b9		8a		txa		                txa
11423	.f1ba						setVCONTROL:
11424	.f1ba		08		php		                php
11425	.f1bb		78		sei		                sei
11426	.f1bc		8d 48 02	sta $0248	                sta vcontrolRegister
11427	.f1bf		8d 20 fe	sta $fe20	                sta VCONTROL
11428	.f1c2		ad 53 02	lda $0253	                lda secondFlashColourDuration
11429	.f1c5		8d 51 02	sta $0251	                sta flashCounter
11430	.f1c8		28		plp		                plp
11431	.f1c9		60		rts		                rts

11433							;-------------------------------------------------------------------------
11434							;
11435							; OSBYTE 155 (&9B) Write to video ULA palette register and copy
11436							;
11437	.f1ca						osbyte9B:
11438	.f1ca		8a		txa		                txa
11439	.f1cb						writeVPALETTE:
11440	.f1cb		49 07		eor #$07	                eor #$07
11441	.f1cd		08		php		                php
11442	.f1ce		78		sei		                sei
11443	.f1cf		8d 49 02	sta $0249	                sta vpaletteRegister
11444	.f1d2		8d 21 fe	sta $fe21	                sta VPALETTE
11445	.f1d5		28		plp		                plp
11446	.f1d6		60		rts		                rts

11448							;-------------------------------------------------------------------------

11450	.f1d7						gsinitForFilenameParsing:
11451	.f1d7		18		clc		                clc

11454							;-------------------------------------------------------------------------
11455							;
11456							; GSINIT
11457							;
11458							; MasRef D.10-1
11459							;
11460	.f1d8						gsinitEntryPoint:
11461	.f1d8		66 e4		ror $e4		                ror stringInputOptions    ;put C into bit 7
11462	.f1da		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
11463	.f1dd		c8		iny		                iny
11464	.f1de		c9 22		cmp #$22	                cmp #'"'
11465	.f1e0		f0 02		beq $f1e4	                beq +                       ; C=1 if double quotes
11466	.f1e2		88		dey		                dey
11467	.f1e3		18		clc		                clc                         ; clear double quotes flag
11468	.f1e4						+
11469	.f1e4		66 e4		ror $e4		                ror stringInputOptions ; set doubleQuotes; move bit 7 into spaceNotATerminator
11470	.f1e6		c9 0d		cmp #$0d	                cmp #$0D                     ; set Z if initial CR
11471	.f1e8		60		rts		                rts

11473							;-------------------------------------------------------------------------
11474							;
11475							; GSREAD
11476							;
11477							; MasRef D.10-2
11478							; MasRef C.5-8 has the | syntax
11479							;
11480	.f1e9						gsreadEntryPoint:
11481	.f1e9		a9 01		lda #$01	                lda #stringInputOptions.goodString
11482	.f1eb		04 e4		tsb $e4		                tsb stringInputOptions
11483	.f1ed		20 06 f2	jsr $f206	                jsr LF29C
11484	.f1f0		08		php		                php                          ; save flags
11485	.f1f1		46 e4		lsr $e4		                lsr stringInputOptions       ; move goodString into C
11486	.f1f3		90 04		bcc $f1f9	                bcc badStringError           ; branch taken if bad string
11487	.f1f5		26 e4		rol $e4		                rol stringInputOptions       ; reinstate goodString
11488	.f1f7		28		plp		                plp                          ; restore flags
11489	.f1f8		60		rts		                rts                          ;

11491	.f1f9						badStringError:
11492	.f1f9		00		brk #		                brk                          ;
11493	>f1fa		fd 42 61 64 20 73 74 72		                .text $fd,"Bad string",0
	>f202		69 6e 67 00
11494	.f206						LF29C:
11495	.f206		18		clc		                clc                          ; last char not !
11496	.f207						LF29D:
11497							                ; C=1 at this point if |! was the last sequence seen.
11498	.f207		64 e5		stz $e5		                stz stringInputPlingFlag
11499	.f209		66 e5		ror $e5		                ror stringInputPlingFlag     ; set ! flag as required
11500	.f20b		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11501	.f20d		c9 0d		cmp #$0d	                cmp #13                      ;EOL?
11502	.f20f		d0 09		bne $f21a	                bne notRETURN                ;taken if not EOL
11503	.f211		24 e4		bit $e4		                bit stringInputOptions
11504	.f213		10 20		bpl $f235	                bpl finishedString           ;taken if !doubleQuotes
11505	.f215						badString:
11506	.f215		a9 01		lda #$01	                lda #stringInputOptions.goodString
11507	.f217		14 e4		trb $e4		                trb stringInputOptions
11508	.f219		60		rts		                rts

11510	.f21a						notRETURN:
11511	.f21a		c9 20		cmp #$20	                cmp #' '
11512	.f21c		90 f7		bcc $f215	                bcc badString ;taken if unprintable control char
11513	.f21e		d0 06		bne $f226	                bne notSPACE
11514	.f220		24 e4		bit $e4		                bit stringInputOptions ;N=doubleQuotes, V=spaceNotATerminator
11515	.f222		30 3e		bmi $f262	                bmi finishUpReadClearV ;taken if quoted
11516	.f224		50 0f		bvc $f235	                bvc finishedString ;taken if space is a terminator
11517	.f226						notSPACE:
11518	.f226		c9 22		cmp #$22	                cmp #'"'
11519	.f228		d0 10		bne $f23a	                bne notDOUBLEQUOTE         ;taken if not quotes
11520	.f22a		24 e4		bit $e4		                bit stringInputOptions ;N=doubleQuotes, V=spaceNotATerminator
11521	.f22c		10 34		bpl $f262	                bpl finishUpReadClearV ;taken if not double quotes
11522	.f22e		c8		iny		                iny
11523	.f22f		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11524	.f231		c9 22		cmp #$22	                cmp #'"'
11525	.f233		f0 2d		beq $f262	                beq finishUpReadClearV       ;taken if quotes
11526	.f235						finishedString:
11527	.f235		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
11528	.f238		38		sec		                sec
11529	.f239		60		rts		                rts

11531	.f23a						notDOUBLEQUOTE:
11532	.f23a		c9 7c		cmp #$7c	                cmp #'|'
11533	.f23c		d0 24		bne $f262	                bne finishUpReadClearV       ;taken if not |
11534	.f23e		c8		iny		                iny                          ;skip |
11535	.f23f		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11536	.f241		c9 7c		cmp #$7c	                cmp #'|'
11537	.f243		f0 1d		beq $f262	                beq finishUpReadClearV ;branch taken if "||" - literal |
11538	.f245		c9 22		cmp #$22	                cmp #'"'
11539	.f247		f0 19		beq $f262	                beq finishUpReadClearV ;branch taken if "|\"" - literal "
11540	.f249		c9 21		cmp #$21	                cmp #'!'
11541	.f24b		d0 03		bne $f250	                bne LF2E6                    ;taken if not "|!"

11543							                ; Handle |! - ASCII 128-255
11544	.f24d		c8		iny		                iny                          ;skip !
11545	.f24e		80 b7		bra $f207	                bra LF29D

11547	.f250						LF2E6:
11548	.f250		c9 20		cmp #$20	                cmp #' '
11549	.f252		90 c1		bcc $f215	                bcc badString ;taken if | followed by a non-printable char
11550	.f254		c9 3f		cmp #$3f	                cmp #'?'
11551	.f256		f0 08		beq $f260	                beq ascii127                 ;taken if "|?" - CHR$127
11552	.f258		20 a9 f2	jsr $f2a9	                jsr implementCTRLCodes
11553	.f25b		2c 62 e3	bit $e362	                bit valueFF
11554	.f25e		80 03		bra $f263	                bra LF2F9

11556	.f260						ascii127:
11557	.f260		a9 7f		lda #$7f	                lda #$7F
11558	.f262						finishUpReadClearV:
11559	.f262		b8		clv		                clv
11560	.f263						LF2F9:
11561	.f263		c8		iny		                iny
11562	.f264		05 e5		ora $e5		                ora stringInputPlingFlag ;if it was a |! char, set bit 7
11563	.f266		18		clc		                clc
11564	.f267		60		rts		                rts

11566							;-------------------------------------------------------------------------

11568	.f268						incAndSkipSpaces:
11569	.f268		c8		iny		                iny
11570	.f269						skipSpacesAndCheckForCRInStringInput:
11571	.f269		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11572	.f26b		c9 20		cmp #$20	                cmp #' '
11573	.f26d		f0 f9		beq $f268	                beq incAndSkipSpaces
11574	.f26f						checkForCR:
11575	.f26f		c9 0d		cmp #$0d	                cmp #13
11576	.f271		60		rts		                rts

11578							;-------------------------------------------------------------------------

11580	.f272						LF308:
11581	.f272		90 f5		bcc $f269	                bcc skipSpacesAndCheckForCRInStringInput
11582	.f274						LF30A:
11583	.f274		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
11584	.f277		c9 2c		cmp #$2c	                cmp #','
11585	.f279		d0 f4		bne $f26f	                bne checkForCR
11586	.f27b		c8		iny		                iny
11587	.f27c		60		rts		                rts

11589							;-------------------------------------------------------------------------

11682							;-------------------------------------------------------------------------
11683							;
11684							; Modify character in A as if the SHIFT key is being pressed.
11685							;

11687	.f27d						implementShift:

11716	.f27d		a2 02		ldx #$02	                ldx #2
11717	.f27f		50 00		bvc $f281	                bvc LF3C5
11718	.f281						LF3C5:
11719	.f281		dd a4 f2	cmp $f2a4,x	                cmp LF3E7-1,x
11720	.f284		f0 1a		beq $f2a0	                beq LF3E2
11721	.f286		ca		dex		                dex
11722	.f287		d0 f8		bne $f281	                bne LF3C5
11723	.f289		50 14		bvc $f29f	                bvc LF3E1
11724	.f28b		c9 21		cmp #$21	                cmp #'!'
11725	.f28d		90 10		bcc $f29f	                bcc LF3E1
11726	.f28f		c9 40		cmp #$40	                cmp #'@'
11728	.f291		f0 0c		beq $f29f	                beq LF3E1
11730	.f293		90 08		bcc $f29d	                bcc LF3DF
11731	.f295		c9 7f		cmp #$7f	                cmp #$7f
11732	.f297		f0 06		beq $f29f	                beq LF3E1
11733	.f299		b0 02		bcs $f29d	                bcs LF3DF

11735	.f29b						LF3DD:
11736	.f29b		49 30		eor #$30	                eor #$30
11737	.f29d						LF3DF:
11738	.f29d		49 10		eor #$10	                eor #$10
11739	.f29f						LF3E1:
11740	.f29f		60		rts		                rts

11742	.f2a0						LF3E2:
11743	.f2a0		b8		clv		                clv
11744	.f2a1		bd a6 f2	lda $f2a6,x	                lda LF3E9-1,x
11745	.f2a4		60		rts		                rts

11747	.f2a5						LF3E7:
11748	>f2a5		5f				                .byte '_'
11749	>f2a6		30				                .byte '0'
11750	.f2a7						LF3E9:
11751	>f2a7		60				                .byte '`'
11753	>f2a8		30				                .byte '0'

11760							;-------------------------------------------------------------------------
11761							;
11762							; See MasRef C.5-8
11763							;
11764							;
11765	.f2a9						implementCTRLCodes:

11783	.f2a9		da		phx		                phx
11784	.f2aa		a2 02		ldx #$02	                ldx #2
11785	.f2ac						LF3EE:
11786	.f2ac		dd c7 f2	cmp $f2c7,x	                cmp LF40A-1,x
11787	.f2af		f0 11		beq $f2c2	                beq LF404
11788	.f2b1		ca		dex		                dex
11789	.f2b2		d0 f8		bne $f2ac	                bne LF3EE
11790	.f2b4		fa		plx		                plx
11791	.f2b5		c9 3f		cmp #$3f	                cmp #'?'
11792	.f2b7		90 08		bcc $f2c1	                bcc LF403
11793	.f2b9		c9 7f		cmp #$7f	                cmp #$7f
11794	.f2bb		f0 04		beq $f2c1	                beq LF403
11795	.f2bd		b0 dc		bcs $f29b	                bcs LF3DD
11796	.f2bf		29 1f		and #$1f	                and #$1f
11797	.f2c1						LF403:
11798	.f2c1		60		rts		                rts

11800	.f2c2						LF404:
11801	.f2c2		b8		clv		                clv
11802	.f2c3		bd c9 f2	lda $f2c9,x	                lda LF40C-1,x
11803	.f2c6		fa		plx		                plx
11804	.f2c7		60		rts		                rts

11806	.f2c8						LF40A:
11807	>f2c8		30 40				                .text '0','@'
11808	.f2ca						LF40C:
11809	>f2ca		00 00				                .text 0,0

11813							;-------------------------------------------------------------------------

11816	.f2cc						clearTSTAndOSBYTE247EntryPoint:
11817	.f2cc		20 53 f3	jsr $f353	                jsr withTSTClear
11819	.f2cf						osbyte247EntryPoint:
11820	.f2cf		ad 87 02	lda $0287	                lda breakVectorByte0
11821	.f2d2		49 4c		eor #$4c	                eor #$4C                     ; JMP abs
11822	.f2d4		d0 16		bne $f2ec	                bne rtsF363
11824	.f2d6		20 87 02	jsr $0287	                jsr breakVectorByte0
11825	.f2d9		4c 5b e5	jmp $e55b	                jmp selectTerminalROM

11837							;-------------------------------------------------------------------------
11838							;
11839							; OSBYTE 144 (&90)
11840							; Set vertical screen shift and interlace
11841							;
11842							; MasRef D.2-44
11843							;
11844	.f2dc						osbyte90:
11845	.f2dc		ad 90 02	lda $0290	                lda tvOffset
11846	.f2df		8e 90 02	stx $0290	                stx tvOffset
11847	.f2e2		aa		tax		                tax
11848	.f2e3		98		tya		                tya
11849	.f2e4		29 01		and #$01	                and #$01
11850	.f2e6		ac 91 02	ldy $0291	                ldy tvInterlace
11851	.f2e9		8d 91 02	sta $0291	                sta tvInterlace
11852	.f2ec						rtsF363:
11853	.f2ec		60		rts		                rts

11855							;-------------------------------------------------------------------------
11856							;
11857							; OSBYTE 149 (&95) - write to JIM
11858							;
11859							; MasRef D.2-45
11860							;
11861	.f2ed						osbyte95:
11862	.f2ed		98		tya		                tya
11863	.f2ee		9d 00 fd	sta $fd00,x	                sta $FD00,x
11864	.f2f1		60		rts		                rts

11866							;-------------------------------------------------------------------------
11867							;
11868							; OSBYTE 151 (&97) - write to SHEILA
11869							;
11870							; MasRef D.2-45
11871							;
11872	.f2f2						osbyte97:
11873	.f2f2		98		tya		                tya
11874	.f2f3		9d 00 fe	sta $fe00,x	                sta $FE00,x
11875	.f2f6		60		rts		                rts

11877							;-------------------------------------------------------------------------
11878							;
11879							; OSBYTE 147 (&93) - write to FRED
11880							;
11881							; MasRef D.2-45
11882							;
11883	.f2f7						osbyte93:
11884	.f2f7		98		tya		                tya
11885	.f2f8		9d 00 fc	sta $fc00,x	                sta $FC00,x
11886	.f2fb		60		rts		                rts

11888							;-------------------------------------------------------------------------
11889							;
11890							; *SHUT [MasRef G.5-10]
11891							;
11892	.f2fc						starSHUT:
11893	.f2fc		a2 26		ldx #$26	                ldx #romServiceCallCloseAllOpenFiles
11894	.f2fe		4c ac ed	jmp $edac	                jmp makeROMServiceCall

11896							;-------------------------------------------------------------------------
11897							;
11898							; Return thunk used by withTerminalROM.
11899							;
11900							; On entry here, the old value of $f4 is at the top of the stack.
11901							;
11902	.f301						withTerminalROMReturnThunk:
11903	.f301		08		php		                php                          ; S=[p; old ROMSEL]
11904	.f302		48		pha		                pha                          ; S=[a; p; old ROMSEL]
11905	.f303		da		phx		                phx                          ; S=[x; a; p; old ROMSEL]
11906	.f304		ba		tsx		                tsx
11907	.f305		bd 04 01	lda $0104,x	                lda $0104,x                  ; get old ROMSEL
11908	.f308		20 5d e5	jsr $e55d	                jsr selectROMA               ; re-select old ROM
11909	.f30b		80 3b		bra $f348	                bra returnThunkSuffix

11911							;-------------------------------------------------------------------------
11912							;
11913							; Select the Terminal ROM. Rearrange the stack so that the original
11914							; ROM is re-selected when withTerminalROM's caller itself returns.
11915							;
11916	.f30d						withTerminalROM:
11918	.f30d		20 78 f3	jsr $f378	                jsr initWithRoutineStack
11919	.f310		a5 f4		lda $f4		                lda $f4
11920	.f312		9d 09 01	sta $0109,x	                sta $109,x
11921	.f315		a9 f3		lda #$f3	                lda #>(withTerminalROMReturnThunk-1)
11922	.f317		9d 08 01	sta $0108,x	                sta $108,x
11923	.f31a		a9 00		lda #$00	                lda #<(withTerminalROMReturnThunk-1)
11924	.f31c		9d 07 01	sta $0107,x	                sta $107,x
11946	.f31f		20 5b e5	jsr $e55b	                jsr selectTerminalROM
11947	.f322		80 16		bra $f33a	                bra plx_pla_plp_rts

11949							;-------------------------------------------------------------------------
11950							;
11951							; Select the MOS ROM (i.e., no HAZEL). Rearrange the stack so that the
11952							; original HAZEL state is restored when withMOSROM's caller itself
11953							; returns.
11954							;
11955	.f324						withMOSROM:
11957	.f324		20 78 f3	jsr $f378	                jsr initWithRoutineStack
11958	.f327		a9 f3		lda #$f3	                lda #>(withMOSROMReturnThunk-1)
11959	.f329		9d 08 01	sta $0108,x	                sta $108,x
11960	.f32c		a9 3d		lda #$3d	                lda #<(withMOSROMReturnThunk-1)
11961	.f32e		9d 07 01	sta $0107,x	                sta $107,x
11962	.f331		ad 34 fe	lda $fe34	                lda ACCCON
11963	.f334		9d 09 01	sta $0109,x	                sta $109,x
11964	.f337		20 eb ec	jsr $eceb	                jsr selectMOS
11990	.f33a						plx_pla_plp_rts:
11991							                ; S=[X; A; P; RL; RH; thunkRL; thunkRH; old ACCCON/ROMSEL]
11992	.f33a		fa		plx		                plx
11993	.f33b		68		pla		                pla
11994	.f33c		28		plp		                plp
11995	.f33d		60		rts		                rts

11997	.f33e						withMOSROMReturnThunk:
11998	.f33e		08		php		                php                          ; S=[P]
11999	.f33f		48		pha		                pha                          ; S=[A; P]
12000	.f340		da		phx		                phx                          ; S=[X; A; P]
12001	.f341		ba		tsx		                tsx                          ; S=[X; A; P; old ACCCON]
12002	.f342		bd 04 01	lda $0104,x	                lda $0104,x                  ; get old ACCCON
12003	.f345		20 e7 ec	jsr $ece7	                jsr selectMOSOrHAZEL         ; re-select old HAZEL state
12004	.f348						returnThunkSuffix:
12005							                ; double up P, as that's the easiest way of ending up
12006							                ; discarding the TOS without affecting the flags.
12007	.f348		bd 03 01	lda $0103,x	                lda $0103,x
12008	.f34b		9d 04 01	sta $0104,x	                sta $0104,x
12009	.f34e		fa		plx		                plx
12010	.f34f		68		pla		                pla
12011	.f350		28		plp		                plp
12012	.f351		28		plp		                plp
12013	.f352		60		rts		                rts

12015							;-------------------------------------------------------------------------
12016							;
12017							; Clear ACCCON TST bit (paging in I/O for reads, rather than ROM, at
12018							; $fc00...$feff), and restore it on exit from the current routine.
12019							;
12021							                ; Should be called something more like runWithTST
12022	.f353						withTSTClear:
12023	.f353		20 78 f3	jsr $f378	                jsr initWithRoutineStack
12024	.f356		a5 fc		lda $fc		                lda TEMPA
12025	.f358		29 bf		and #$bf	                and #(~ACCCON.TST)&$ff       ; clear TST
12026	.f35a		8d 34 fe	sta $fe34	                sta ACCCON
12027	.f35d		a9 68		lda #$68	                lda #<(withTSTClearReturnThunk-1)
12028	.f35f		9d 07 01	sta $0107,x	                sta $107,x
12029	.f362		a9 f3		lda #$f3	                lda #>(withTSTClearReturnThunk-1)
12030	.f364		9d 08 01	sta $0108,x	                sta $108,x
12031	.f367		80 d1		bra $f33a	                bra plx_pla_plp_rts

12033	.f369						withTSTClearReturnThunk:
12034	.f369		08		php		                php
12035	.f36a		48		pha		                pha
12036	.f36b		da		phx		                phx
12037	.f36c		ba		tsx		                tsx
12038	.f36d		78		sei		                sei
12039	.f36e		ad 34 fe	lda $fe34	                lda ACCCON
12040	.f371		09 40		ora #$40	                ora #ACCCON.TST
12041	.f373		20 96 e3	jsr $e396	                jsr staTEMPAAndACCCON
12042	.f376		80 d0		bra $f348	                bra returnThunkSuffix

12045							;-------------------------------------------------------------------------
12046							;
12047							; Sort out stack for one of the withXXX routines, that set up some
12048							; state and then automatically restore the original state on exit from
12049							; the calling routine.
12050							;
12052	.f378						initWithRoutineStack:
12053	.f378		48		pha		                pha                          ; A RL RH R^L R^H
12054	.f379		08		php		                php                          ; P A RL RH R^L R^H
12055	.f37a		48		pha		                pha                          ; A P A RL RH R^L R^H
12056	.f37b		da		phx		                phx                          ; X A P A RL RH R^L R^H
12057	.f37c		ba		tsx		                tsx                          ; | X A P A RL RH R^L R^H
12058	.f37d		bd 06 01	lda $0106,x	                lda $106,x                   ; get RH
12059	.f380		48		pha		                pha                          ; RH | X A P A RL RH R^L R^H
12060	.f381		bd 05 01	lda $0105,x	                lda $105,x                   ; get RL
12061	.f384		48		pha		                pha                          ; RL RH | X A P A RL RH R^L R^H
12062	.f385		20 89 f3	jsr $f389	                jsr LF392
12063	.f388		ca		dex		                dex
12064	.f389						LF392:
12065	.f389		bd 08 01	lda $0108,x	                lda $108,x                   ; get R^L or R^H
12066	.f38c		9d 05 01	sta $0105,x	                sta $105,x                   ; replace RL or RH
12067	.f38f		60		rts		                rts

12070							;-------------------------------------------------------------------------

12072	.f390						vduChrEntryPoint:
12073	.f390		20 24 f3	jsr $f324	                jsr withMOSROM
12074	.f393		a6 f4		ldx $f4		                ldx $F4
12075	.f395		da		phx		                phx
12076	.f396		20 4a e5	jsr $e54a	                jsr selectTerminalROMAndANDY
12077	.f399		20 27 c0	jsr $c027	                jsr outputToVDU
12078	.f39c		fa		plx		                plx
12079	.f39d		4c 4c e5	jmp $e54c	                jmp selectROMX

12081							;-------------------------------------------------------------------------
12082							;
12083							; OSRDSC [MasRef D.6-1]
12084							;
12085	.f3a0						osrdscEntryPoint:
12086	.f3a0		20 24 f3	jsr $f324	                jsr withMOSROM
12087	.f3a3		4c 18 c0	jmp $c018	                jmp LC018

12089							;-------------------------------------------------------------------------
12090							;
12091							; OSWRSC [MasRef D.8-1]
12092							;
12093	.f3a6						oswrscEntryPoint:
12094	.f3a6		20 24 f3	jsr $f324	                jsr withMOSROM
12095	.f3a9		4c 5e db	jmp $db5e	                jmp oswrscCode

12097							;-------------------------------------------------------------------------

12099	.f3ac						starRunBOOT:
12100	>f3ac		2f 21 42 4f 4f 54 0d		                .text "/!BOOT",13

12102							;-------------------------------------------------------------------------

12108							;-------------------------------------------------------------------------

12133							;-------------------------------------------------------------------------

12136	.f3b3						clearSoundChannelBuffer:
12137	.f3b3		20 c7 f3	jsr $f3c7	                jsr selectExtROM
12138	.f3b6		5a		phy		                phy
12139	.f3b7		20 4e b0	jsr $b04e	                jsr clearSoundChannelBufferInternal
12140	.f3ba		80 07		bra $f3c3	                bra selectOldROM

12143							;-------------------------------------------------------------------------

12146	.f3bc						LF3C5_350:
12147	.f3bc		20 c7 f3	jsr $f3c7	                jsr selectExtROM
12148	.f3bf		5a		phy		                phy
12149	.f3c0		20 07 af	jsr $af07	                jsr LF416
12150	.f3c3						selectOldROM:
12151	.f3c3		68		pla		                pla
12152	.f3c4		4c 5d e5	jmp $e55d	                jmp selectROMA

12155							;-------------------------------------------------------------------------

12158	.f3c7						selectExtROM:
12159	.f3c7		a4 f4		ldy $f4		                ldy $f4
12160	.f3c9		a9 09		lda #$09	                lda #extROM
12161	.f3cb		4c 5d e5	jmp $e55d	                jmp selectROMA

12164							;-------------------------------------------------------------------------

12166	.f3ce						LF6FC:
12167	.f3ce		a9 ff		lda #$ff	                lda #$FF
12168	.f3d0		85 f5		sta $f5		                sta $F5
12169	.f3d2		60		rts		                rts

12171	.f3d3						LF701:
12172	.f3d3		e6 f5		inc $f5		                inc $F5
12173	.f3d5		a4 f5		ldy $f5		                ldy $F5
12174	.f3d7		a2 0d		ldx #$0d	                ldx #romServiceCallROMFilingSystemInitialize
12175	.f3d9						LF707:
12176	.f3d9		08		php		                php
12177	.f3da		20 ac ed	jsr $edac	                jsr makeROMServiceCall
12178	.f3dd		28		plp		                plp
12179	.f3de		c9 01		cmp #$01	                cmp #$01
12180	.f3e0		98		tya		                tya
12181	.f3e1		60		rts		                rts

12183	.f3e2						LF710:
12184	.f3e2		a2 0e		ldx #$0e	                ldx #$0E
12185	.f3e4		a0 ff		ldy #$ff	                ldy #$FF
12186	.f3e6		4c d9 f3	jmp $f3d9	                jmp LF707

12188	.f3e9						LF717:
12189	.f3e9		ad cb 03	lda $03cb	                lda $03CB
12190	.f3ec		85 f6		sta $f6		                sta $F6
12191	.f3ee		ad cc 03	lda $03cc	                lda $03CC
12192	.f3f1		85 f7		sta $f7		                sta $F7
12193	.f3f3		a5 f5		lda $f5		                lda $F5
12194	.f3f5		60		rts		                rts

12196	.f3f6						tidyUpAfterKeyboardProcessing:
12197	.f3f6		a2 ff		ldx #$ff	                ldx #$FF
12198	.f3f8		a5 ec		lda $ec		                lda lastKeyPressedInternal
12199	.f3fa		05 ed		ora $ed		                ora firstKeyPressedInternal
12200	.f3fc		d0 06		bne $f404	                bne +                    ;taken if any keys pressed
12201	.f3fe		a9 81		lda #$81	                lda #$81
12202	.f400		8d 4e fe	sta $fe4e	                sta systemVIA.ier            ;re-enable keyboard IRQ
12203	.f403		e8		inx		                inx                          ;X=0
12204	.f404						+
12205	.f404		8e 42 02	stx $0242	                stx keyboardSemaphore
12206	.f407						updateKeyboardLEDs:
12207	.f407		08		php		                php
12208	.f408		ad 5a 02	lda $025a	                lda keyboardStatusByte
12209	.f40b		4a		lsr a		                lsr a

12211							                ; bit 3 = caps lock off
12212							                ; bit 4 = shift lock off
12213	.f40c		29 18		and #$18	                and #(keyboardStatusByte.capsLockDisengaged|keyboardStatusByte.shiftLockDisengaged)>>1
12214	.f40e		09 06		ora #$06	                ora #$06                     ;latch B6 - caps lock
12215	.f410		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;update caps lock LED
12216	.f413		4a		lsr a		                lsr a                        ;bit 3 = shift lock off
12217	.f414		09 07		ora #$07	                ora #$07                     ;latch B7 - shift lock
12218	.f416		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;update shift lock LED
12219	.f419		20 34 f6	jsr $f634	                jsr enableKeyboardScanning
12220	.f41c		68		pla		                pla
12221	.f41d		60		rts		                rts

12223							; KEYV handler
12224							; ============
12225	.f41e						keyEntryPoint:
12226	.f41e		50 0a		bvc $f42a	                bvc keyVClear
12227	.f420		a9 01		lda #$01	                lda #$01
12228	.f422		8d 4e fe	sta $fe4e	                sta systemVIA.ier
12229	.f425		b0 08		bcs $f42f	                bcs keyboardTimerInterrupt
12230	.f427		4c 77 f5	jmp $f577	                jmp keyPressedInterrupt

12232	.f42a						keyVClear:
12233	.f42a		90 06		bcc $f432	                bcc keyTestSHIFTAndCTRLOrTimerInterrupt
12234	.f42c		4c 2e f6	jmp $f62e	                jmp scanKeyboard

12236	.f42f						keyboardTimerInterrupt:
12237	.f42f		ee 42 02	inc $0242	                inc keyboardSemaphore

12239							;-------------------------------------------------------------------------
12240							;
12241							; Test Shift & Ctrl keys, or deal with timer interrupt.
12242							;
12243							; Entry: C=0 if KEYV V=0 C=0 - test SHIFT+CTRL keys
12244							;        C=1 if KEYV V=1 C=1 - keyboard timer interrupt
12245							;
12246	.f432						keyTestSHIFTAndCTRLOrTimerInterrupt:
12247	.f432		ad 5a 02	lda $025a	                lda keyboardStatusByte
12248	.f435		29 b7		and #$b7	                and #~(keyboardStatusByte.shiftPressed|keyboardStatusByte.ctrlPressed)
12249	.f437		a2 00		ldx #$00	                ldx #key_shift
12250	.f439		20 95 f5	jsr $f595	                jsr interrogateKeyboard      ;X=$80 if SHIFT pressed
12251	.f43c		90 02		bcc $f440	                bcc +                        ;taken if testing
12252							                                             ;SHIFT+CTRL only
12253	.f43e		86 fa		stx $fa		                stx SEIWKA                   ;b7 set if SHIFT pressed
12254	.f440						+
12255	.f440		b8		clv		                clv                        ;V=0
12256	.f441		10 05		bpl $f448	                bpl testCTRL               ;taken if SHIFT not pressed
12257	.f443		2c 62 e3	bit $e362	                bit valueFF                ;V=1 N=1
12258	.f446		09 08		ora #$08	                ora #keyboardStatusByte.shiftPressed
12259	.f448						testCTRL:
12260	.f448		e8		inx		                inx                          ;X=1 - key_ctrl
12261	.f449		20 95 f5	jsr $f595	                jsr interrogateKeyboard
12262	.f44c		90 b9		bcc $f407	                bcc updateKeyboardLEDs ;taken if testing SHIFT+CTRL only
12263	.f44e		10 02		bpl $f452	                bpl updateKeyboardStatusByte ;taken if CTRL not pressed
12264	.f450		09 40		ora #$40	                ora #keyboardStatusByte.ctrlPressed
12265	.f452						updateKeyboardStatusByte:
12266	.f452		8d 5a 02	sta $025a	                sta keyboardStatusByte
12267	.f455		a6 ec		ldx $ec		                ldx lastKeyPressedInternal
12268	.f457		f0 4d		beq $f4a6	                beq braRolloverChecks        ;taken if no key pressed
12269	.f459		20 95 f5	jsr $f595	                jsr interrogateKeyboard      ;still pressed?
12270	.f45c		30 0d		bmi $f46b	                bmi checkForKeyAutoRepeat    ;taken if still pressed
12271	.f45e		e4 ec		cpx $ec		                cpx lastKeyPressedInternal   ;X=0 at this point
12272	.f460						storeLastKeyPressed:
12273	.f460		86 ec		stx $ec		                stx lastKeyPressedInternal   ;update last key pressed
12274	.f462		d0 42		bne $f4a6	                bne braRolloverChecks  ;taken if still nothing pressed
12275	.f464		64 ec		stz $ec		                stz lastKeyPressedInternal   ;reset last key pressed
12276	.f466						resetAutoRepeatAndContinue:
12277	.f466		20 87 f5	jsr $f587	                jsr resetAutoRepeatCounters
12278	.f469		80 3b		bra $f4a6	                bra braRolloverChecks

12280	.f46b						checkForKeyAutoRepeat:
12281	.f46b		e4 ec		cpx $ec		                cpx lastKeyPressedInternal
12282	.f46d		d0 f1		bne $f460	                bne storeLastKeyPressed      ;taken if new key pressed
12283	.f46f		a5 e7		lda $e7		                lda autoRepeatCountdownTimer
12284	.f471		f0 33		beq $f4a6	                beq braRolloverChecks      ;taken if countdown timer 0
12285	.f473		c6 e7		dec $e7		                dec autoRepeatCountdownTimer ;timer--
12286	.f475		d0 2f		bne $f4a6	                bne braRolloverChecks        ;taken if timer newly 0
12287	.f477		ad ca 02	lda $02ca	                lda keyboardFirstAutoRepeatCount
12288	.f47a		85 e7		sta $e7		                sta autoRepeatCountdownTimer
12289	.f47c		ad 55 02	lda $0255	                lda keyboardAutoRepeatRate
12290	.f47f		8d ca 02	sta $02ca	                sta keyboardFirstAutoRepeatCount
12291	.f482		ad 5a 02	lda $025a	                lda keyboardStatusByte
12292	.f485		a6 ec		ldx $ec		                ldx lastKeyPressedInternal
12293	.f487		e0 d0		cpx #$d0	                cpx #$80|key_shift_lock
12294	.f489		f0 12		beq $f49d	                beq shiftLockPressed
12295	.f48b		e0 c0		cpx #$c0	                cpx #$80|key_caps_lock
12297	.f48d		d0 1a		bne $f4a9	                bne LF5E5_511
12301	.f48f						capsLockPressed:
12302	.f48f		09 a0		ora #$a0	                ora #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
12303	.f491		24 fa		bit $fa		                bit SEIWKA                   ;test SHIFT status
12304	.f493		10 04		bpl $f499	                bpl +                        ;taken if SHIFT not pressed
12305							                ; Do the SHIFT+CAPS LOCK thing
12306	.f495		09 10		ora #$10	                ora #keyboardStatusByte.capsLockDisengaged
12307	.f497		49 80		eor #$80	                eor #keyboardStatusByte.shiftEnabled
12308	.f499						+
12309	.f499		49 90		eor #$90	                eor #keyboardStatusByte.shiftEnabled|keyboardStatusByte.capsLockDisengaged
12310	.f49b		80 04		bra $f4a1	                bra resetKeyboardStatusAndTimer

12312	.f49d						shiftLockPressed:
12313	.f49d		09 90		ora #$90	                ora #keyboardStatusByte.shiftEnabled|keyboardStatusByte.capsLockDisengaged
12314	.f49f		49 a0		eor #$a0	                eor #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
12315	.f4a1						resetKeyboardStatusAndTimer:
12316	.f4a1		8d 5a 02	sta $025a	                sta keyboardStatusByte
12317	.f4a4		64 e7		stz $e7		                stz autoRepeatCountdownTimer
12318	.f4a6						braRolloverChecks:
12322	.f4a6		4c 57 f5	jmp $f557	                jmp keyboardRolloverChecks

12325							;-------------------------------------------------------------------------

12328	.f4a9						LF5E5_511:
12329	.f4a9		2c 3d 02	bit $023d	                bit keyboardTranslationTableAddress+1
12330	.f4ac		30 1e		bmi $f4cc	                bmi getASCIICode
12331	.f4ae		da		phx		                phx
12332	.f4af		da		phx		                phx
12333	.f4b0		7a		ply		                ply
12334	.f4b1		a2 30		ldx #$30	                ldx #romServiceCall30
12335	.f4b3		20 ac ed	jsr $edac	                jsr makeROMServiceCall
12336	.f4b6		d0 13		bne $f4cb	                bne LF607
12337	.f4b8		fa		plx		                plx
12338	.f4b9		98		tya		                tya
12339	.f4ba		6a		ror a		                ror a
12340	.f4bb		6a		ror a		                ror a
12341	.f4bc		90 02		bcc $f4c0	                bcc LF5FC
12342	.f4be		64 e7		stz $e7		                stz autoRepeatCountdownTimer
12343	.f4c0						LF5FC:
12344	.f4c0		30 e4		bmi $f4a6	                bmi braRolloverChecks
12345	.f4c2		ad 3c 02	lda $023c	                lda keyboardTranslationTableAddress+0
12346	.f4c5		2c 3d 02	bit $023d	                bit keyboardTranslationTableAddress+1
12348	.f4c8		4c 3c f5	jmp $f53c	                jmp LF839

12353	.f4cb						LF607:
12354	.f4cb		fa		plx		                plx
12356							;-------------------------------------------------------------------------
12357							;
12358							; Convert internal key number (with bit 7 set) to ASCII code, taking
12359							; into account state of CTRL, SHIFT, CAPS LOCK and SHIFT LOCK.
12360							;
12361	.f4cc						getASCIICode:
12362							                ; -$80 to adjust for bit 7 set; -16 because
12363							                ; interesting keys start at 16
12364	.f4cc		bd 17 f5	lda $f517,x	                lda keyTranslationTable-$80-16,x
12382	.f4cf		f0 08		beq $f4d9	                beq handleTAB                ;taken if TAB
12383	.f4d1		c9 9d		cmp #$9d	                cmp #$9D                     ;was it key_numpad_return?
12387	.f4d3		d0 07		bne $f4dc	                bne LF5FD

12390							                ;Transform $9d into $8d, aka 13|$80. ($8d is already
12391							                ; used in the table for right arrow.)
12392	.f4d5		49 10		eor #$10	                eor #$10
12393	.f4d7		80 0f		bra $f4e8	                bra getNumpadASCIICode

12395	.f4d9						handleTAB:
12396	.f4d9		ad 6b 02	lda $026b	                lda tabKeyCode
12425	.f4dc						LF5FD:
12426	.f4dc		2c 62 e3	bit $e362	                bit valueFF
12427	.f4df		c9 90		cmp #$90	                cmp #$90
12428	.f4e1		90 01		bcc $f4e4	                bcc handleKey
12429	.f4e3		b8		clv		                clv
12431	.f4e4						handleKey:
12432	.f4e4		c9 a0		cmp #$a0	                cmp #$A0                     ;numpad key?
12433	.f4e6		90 0e		bcc $f4f6	                bcc processModifiers         ;taken if not
12434	.f4e8						getNumpadASCIICode:
12436	.f4e8		08		php		                php
12438							                ; C=1 at this point
12439	.f4e9		e9 31		sbc #$31	                sbc #'0'+1      ;+1 to compensate for C=1 in the next
12440							                                ;addition
12441	.f4eb		6d 7e 02	adc $027e	                adc numericKeypadInterpretation ;form actual ASCII value
12443	.f4ee		28		plp		                plp
12445	.f4ef		49 80		eor #$80	                eor #$80                     ;clear bit 7
12446	.f4f1		ae 8e 02	ldx $028e	                ldx numericKeypadShiftEffect ;does SHIFT affect the
12447							                                             ;keypad?
12448	.f4f4		d0 46		bne $f53c	                bne LF839                    ;taken if no
12449	.f4f6						processModifiers:
12450	.f4f6		ae 5a 02	ldx $025a	                ldx keyboardStatusByte
12451	.f4f9		86 fa		stx $fa		                stx SEIWKA
12452	.f4fb		26 fa		rol $fa		                rol SEIWKA                  ;b7 = ctrlPressed
12453	.f4fd		10 0a		bpl $f509	                bpl testShiftLock           ;taken if ctrl not pressed
12454	.f4ff		a6 ed		ldx $ed		                ldx firstKeyPressedInternal
12455	.f501						localResetAutoRepeatAndContinue:
12460	.f501		f0 03		beq $f506	                beq +
12461	.f503		4c 66 f4	jmp $f466	                jmp resetAutoRepeatAndContinue
12462	.f506						+
12463	.f506		20 a9 f2	jsr $f2a9	                jsr implementCTRLCodes
12465	.f509						testShiftLock:
12466	.f509		26 fa		rol $fa		                rol SEIWKA                   ;b7 = shiftLockDisengaged
12467	.f50b		30 07		bmi $f514	                bmi testCapsLock             ;taken if shift lock off
12468	.f50d		20 7d f2	jsr $f27d	                jsr implementShift           ;shift lock on - apply shift
12469	.f510		26 fa		rol $fa		                rol SEIWKA                   ;b7 = capsLockDisengaged
12470	.f512		80 0c		bra $f520	                bra testShiftEnabled

12472	.f514						testCapsLock:
12473	.f514		26 fa		rol $fa		                rol SEIWKA                   ;b7 = capsLockDisengaged
12474	.f516		30 0d		bmi $f525	                bmi testShift                ;taken if caps lock off
12475	.f518		20 36 ea	jsr $ea36	                jsr isLetter
12476	.f51b		b0 08		bcs $f525	                bcs testShift                ;taken if not a letter
12477	.f51d		20 7d f2	jsr $f27d	                jsr implementShift ;letter + caps lock - make upper case
12478	.f520						testShiftEnabled:
12479	.f520		ae 5a 02	ldx $025a	                ldx keyboardStatusByte       ;b7 = shiftEnabled
12480	.f523		10 0b		bpl $f530	                bpl testEscape               ;taken if not shiftEnabled
12481	.f525						testShift:
12482	.f525		26 fa		rol $fa		                rol SEIWKA                   ;b7 = shiftPressed
12483	.f527		10 07		bpl $f530	                bpl testEscape               ;taken if not shiftPressed
12484	.f529		a6 ed		ldx $ed		                ldx firstKeyPressedInternal
12485	.f52b		d0 d4		bne $f501	                bne localResetAutoRepeatAndContinue
12486	.f52d		20 7d f2	jsr $f27d	                jsr implementShift
12487	.f530						testEscape:
12488	.f530		cd 6c 02	cmp $026c	                cmp escapeCharacter
12489	.f533		d0 07		bne $f53c	                bne LF839
12490	.f535		ae 75 02	ldx $0275	                ldx escapeKeyStatus
12491	.f538		d0 02		bne $f53c	                bne LF839
12492	.f53a		64 e7		stz $e7		                stz autoRepeatCountdownTimer

12494	.f53c						LF839:

12498	.f53c		a8		tay		                tay
12499	.f53d		50 02		bvc $f541	                bvc LF54A
12500	.f53f		d0 0b		bne $f54c	                bne LF555
12501	.f541						LF54A:
12502	.f541		98		tya		                tya
12503	.f542		f0 02		beq $f546	                beq LF54F
12504	.f544		10 06		bpl $f54c	                bpl LF555
12505	.f546						LF54F:
12506	.f546		20 ca f6	jsr $f6ca	                jsr insertCharacterIntoKeyboardBufferIfPossible
12507	.f549		90 09		bcc $f554	                bcc LF55D_350
12508	.f54b		a8		tay		                tay
12509	.f54c						LF555:
12510	.f54c		ad 59 02	lda $0259	                lda keyboardStatus
12511	.f54f		d0 03		bne $f554	                bne LF55D_350
12512	.f551		20 46 ea	jsr $ea46	                jsr insertCharacterIntoKeyboardBuffer
12513	.f554						LF55D_350:
12514	.f554		20 be f6	jsr $f6be	                jsr enableKeyboardScanningFlippingInterrupts

12614	.f557						keyboardRolloverChecks:
12615	.f557		a6 ed		ldx $ed		                ldx firstKeyPressedInternal
12616	.f559		f0 09		beq $f564	                beq LF852                    ;taken if 1 key down
12617	.f55b		20 95 f5	jsr $f595	                jsr interrogateKeyboard      ;test first key pressed
12618	.f55e		86 ed		stx $ed		                stx firstKeyPressedInternal  ;save it
12619	.f560		30 18		bmi $f57a	                bmi LF868                    ;taken if still pressed
12620	.f562		64 ed		stz $ed		                stz firstKeyPressedInternal  ;reset first key
12621	.f564						LF852:
12622	.f564		a0 ec		ldy #$ec	                ldy #lastKeyPressedInternal
12623	.f566		20 84 f6	jsr $f684	                jsr scanKeyboardWithExclusion
12624	.f569		30 09		bmi $f574	                bmi LF862
12625	.f56b		a5 ec		lda $ec		                lda lastKeyPressedInternal
12626	.f56d		85 ed		sta $ed		                sta firstKeyPressedInternal
12627	.f56f						updateLastKeyPressedInternal:
12628	.f56f		86 ec		stx $ec		                stx lastKeyPressedInternal
12629	.f571		20 87 f5	jsr $f587	                jsr resetAutoRepeatCounters
12630	.f574						LF862:
12631	.f574		4c f6 f3	jmp $f3f6	                jmp tidyUpAfterKeyboardProcessing

12633	.f577						keyPressedInterrupt:
12634	.f577		20 95 f5	jsr $f595	                jsr interrogateKeyboard
12635	.f57a						LF868:
12636	.f57a		a5 ec		lda $ec		                lda lastKeyPressedInternal
12637	.f57c		d0 f6		bne $f574	                bne LF862
12638	.f57e		a0 ed		ldy #$ed	                ldy #firstKeyPressedInternal
12639	.f580		20 84 f6	jsr $f684	                jsr scanKeyboardWithExclusion
12640	.f583		30 ef		bmi $f574	                bmi LF862
12641	.f585		80 e8		bra $f56f	                bra updateLastKeyPressedInternal

12643	.f587						resetAutoRepeatCounters:
12644	.f587		a2 01		ldx #$01	                ldx #$01
12645	.f589		86 e7		stx $e7		                stx autoRepeatCountdownTimer
12646	.f58b		ae 54 02	ldx $0254	                ldx keyboardAutoRepeatDelay
12647	.f58e		8e ca 02	stx $02ca	                stx keyboardFirstAutoRepeatCount
12648	.f591		60		rts		                rts

12650							;-------------------------------------------------------------------------
12651							;
12652							; Read a single key's state from the keyboard
12653							;
12654							; Entry:
12655							;
12656							; X = key to test
12657							;
12658							; Exit:
12659							;
12660							; X=$80, N=1 if key pressed; X=$00, N=0 if key not pressed
12661							;
12662							; Keyboard remains in manual scan mode
12663							;
12664							; Preserves: A/C
12665							;
12667	.f592						clearTSTAndInterrogateKeyboard:
12668	.f592		20 53 f3	jsr $f353	                jsr withTSTClear
12670	.f595						interrogateKeyboard:
12671	.f595		a0 03		ldy #$03	                ldy #0|3            ;reset latch B3 - manual scan mode
12672	.f597		8c 40 fe	sty $fe40	                sty systemVIA.orb
12673	.f59a		a0 7f		ldy #$7f	                ldy #$7F
12674	.f59c		8c 43 fe	sty $fe43	                sty systemVIA.ddra           ;bit 7=input, bits 6-0=output
12675	.f59f		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake ;store key value
12676	.f5a2		ea		nop		                nop
12677	.f5a3		ae 4f fe	ldx $fe4f	                ldx systemVIA.iraNoHandshake ;read key state
12678	.f5a6		60		rts		                rts

12680							; Default keyboard table
12681							; ======================

12683	.f5a7						keyTranslationTable:
12684	>f5a7		71				                .text "q"                    ;10 q
12685	>f5a8		33				                .byte "3"                    ;11 3
12686	>f5a9		34				                .byte "4"                    ;12 4
12687	>f5aa		35				                .byte "5"                    ;13 5
12688	>f5ab		84				                .byte $84                    ;14 f4
12689	>f5ac		38				                .text "8"                    ;15 8
12690	>f5ad		87				                .byte $87                    ;16 f7
12691	>f5ae		2d				                .text "-"                    ;17 minus
12692	>f5af		5e				                .text "^"                    ;18 caret
12693	>f5b0		8c				                .byte $8C                    ;19 left
12694	>f5b1		b6				                .byte "6"|$80                ;1a numpad_6
12695	>f5b2		b7				                .byte "7"|$80                ;1b numpad_7
12696	.f5b3						osbyte92:
12697	.f5b3		bc 00 fc	ldy $fc00,x	                ldy $FC00,x                  ;1c 1d 1e
12698	.f5b6		60		rts		                rts                          ;1f

12701	>f5b7		80				                .byte $80                    ;20 f0
12702	>f5b8		77				                .text "w"                    ;21 w
12703	>f5b9		65				                .text "e"                    ;22 e
12704	>f5ba		74				                .text "t"                    ;23 t
12705	>f5bb		37				                .text "7"                    ;24 7
12706	>f5bc		69				                .text "i"                    ;25 i
12707	>f5bd		39				                .text "9"                    ;26 9
12708	>f5be		30				                .text "0"                    ;27 0
12709	>f5bf		5f				                .text "_"                    ;28 underline
12710	>f5c0		8e				                .byte $8E                    ;29 down
12711	>f5c1		b8				                .byte "8"|$80                ;2a numpad_8
12712	>f5c2		b9				                .byte "9"|$80                ;2b numpad_9
12713	.f5c3						osbyte94:
12714	.f5c3		bc 00 fd	ldy $fd00,x	                ldy $FD00,x                  ;2c 2d 2e
12715	.f5c6		60		rts		                rts                          ;2f

12718	>f5c7		31				                .text "1"                    ;30 1
12719	>f5c8		32				                .text "2"                    ;31 2
12720	>f5c9		64				                .text "d"                    ;32 d
12721	>f5ca		72				                .text "r"                    ;33 r
12722	>f5cb		36				                .text "6"                    ;34 6
12723	>f5cc		75				                .text "u"                    ;35 u
12724	>f5cd		6f				                .text "o"                    ;36 o
12725	>f5ce		70				                .text "p"                    ;37 p
12726	>f5cf		5b				                .text "["                    ;38 left_square_bracket
12727	>f5d0		8f				                .byte $8F                    ;39 up
12728	>f5d1		ab				                .byte "+"|$80                ;3a numpad_plus
12729	>f5d2		ad				                .byte "-"|$80                ;3b numpad_minus
12730	>f5d3		9d				                .byte $9D                    ;3c numpad_return
12731	.f5d4						LF8BF:
12732	.f5d4		6c 20 02	jmp ($0220)	                jmp (EVENTV)                 ;3d 3e 3f
12734	>f5d7		01				                .byte 1                      ;40 caps_lock
12735	>f5d8		61				                .text "a"                    ;41 a
12736	>f5d9		78				                .text "x"                    ;42 x
12737	>f5da		66				                .text "f"                    ;43 f
12738	>f5db		79				                .text "y"                    ;44 y
12739	>f5dc		6a				                .text "j"                    ;45 j
12740	>f5dd		6b				                .text "k"                    ;46 k
12742	>f5de		40				                .text "@"                    ;47 at
12746	>f5df		3a				                .text ":"                    ;48 colon
12747	>f5e0		0d				                .byte $0D                    ;49 return
12748	>f5e1		af				                .byte "/"|$80                ;4a numpad_divide
12749	>f5e2		ff				                .byte 127|$80                ;4b numpad_delete
12750	>f5e3		ae				                .byte "."|$80                ;4c numpad_stop
12751	.f5e4						call1MHzBusHook:
12752	.f5e4		6c fe fd	jmp ($fdfe)	                jmp ($FDFE)                  ;4d 4e 4f

12755	>f5e7		02				                .byte 2                      ;50 shift_lock
12756	>f5e8		73				                .text "s"                    ;51 s
12757	>f5e9		63				                .text "c"                    ;52 c
12758	>f5ea		67				                .text "g"                    ;53 g
12759	>f5eb		68				                .text "h"                    ;54 h
12760	>f5ec		6e				                .text "n"                    ;55 n
12761	>f5ed		6c				                .text "l"                    ;56 l
12762	>f5ee		3b				                .text ";"                    ;57 semicolon
12763	>f5ef		5d				                .text "]"                    ;58 right_square_bracket
12764	>f5f0		7f				                .byte $7F                    ;59 delete
12765	>f5f1		a3				                .byte "#"|$80                ;5a numpad_hash
12766	>f5f2		aa				                .byte "*"|$80                ;5b numpad_multiply
12767	>f5f3		ac				                .byte ","|$80                ;5c numpad_comma
12768	.f5f4						callSEIWKA:
12769	.f5f4		6c fa 00	jmp ($00fa)	                jmp (SEIWKA)                 ;5d 5e 5f
12771	>f5f7		00				                .byte 0                      ;60 tab
12772	>f5f8		7a				                .text "z"                    ;61 z
12773	>f5f9		20				                .text " "                    ;62 space
12774	>f5fa		76				                .text "v"                    ;63 v
12775	>f5fb		62				                .text "b"                    ;64 b
12776	>f5fc		6d				                .text "m"                    ;65 m
12777	>f5fd		2c				                .text ","                    ;66 comma
12778	>f5fe		2e				                .text "."                    ;67 stop
12779	>f5ff		2f				                .text "/"                    ;68 divide
12780	>f600		8b				                .byte $8B                    ;69 copy
12781	>f601		b0				                .byte "0"|$80                ;6a numpad_0
12782	>f602		b1				                .byte "1"|$80                ;6b numpad_1
12783	>f603		b3				                .byte "3"|$80                ;6c numpad_3
12784	>f604		00				                .byte 0                      ;6d
12785	>f605		00				                .byte 0                      ;6e
12786	>f606		00				                .byte 0                      ;6f
12788	>f607		1b				                .byte 27                     ;70 escape
12789	>f608		81				                .byte $81                    ;71 f1
12790	>f609		82				                .byte $82                    ;72 f2
12791	>f60a		83				                .byte $83                    ;73 f3
12792	>f60b		85				                .byte $85                    ;74 f5
12793	>f60c		86				                .byte $86                    ;75 f6
12794	>f60d		88				                .byte $88                    ;76 f8
12795	>f60e		89				                .byte $89                    ;77 f9
12796	>f60f		5c				                .byte $5C                    ;78 backslash
12797	>f610		8d				                .byte $8D                    ;79 right
12798	>f611		b4				                .byte "4"|$80                ;7a numpad_4
12799	>f612		b5				                .byte "5"|$80                ;7b numpad_5
12800	>f613		b2				                .byte "2"|$80                ;7c numpad_2
12801	.f614						LF8FF:
12802	.f614		2c 62 e3	bit $e362	                bit valueFF                  ; Set V
12803	.f617						callKEYV:
12804	.f617		6c 28 02	jmp ($0228)	                jmp (KEYV)                   ; Jump to KEYV

12806							;-------------------------------------------------------------------------
12807							;
12808							; OSBYTE 131 (&83) - Read Operating System High Water Mark (OSHWM)
12809							;
12810							; MasRef D.2-40
12811							;
12812	.f61a						osbyte83:
12813	.f61a		ac 44 02	ldy $0244	                ldy oshwm
12814	.f61d		a2 00		ldx #$00	                ldx #$00
12815	.f61f		60		rts		                rts

12817							;-------------------------------------------------------------------------
12818							;
12819							; OSBYTE 120 ($78) - Write keys pressed information
12820							;
12821							; MasRef D.2-33
12822							;
12823	.f620						osbyte78:                          ;f90b
12824	.f620		84 ec		sty $ec		                sty lastKeyPressedInternal
12825	.f622		86 ed		stx $ed		                stx firstKeyPressedInternal
12826	.f624		60		rts		                rts

12828							;-------------------------------------------------------------------------
12829							;
12830							; OSBYTE 122 (&7A) Keyboard scan from 16 decimal
12831							;
12832							; MasRef D.2-36
12833							;
12835	.f625						clearTSTAndOSBYTE7A:
12836	.f625		20 53 f3	jsr $f353	                jsr withTSTClear
12838	.f628						osbyte7A:
12839	.f628		a2 10		ldx #$10	                ldx #$10
12840	.f62a		b8		clv		                clv
12841	.f62b		38		sec		                sec
12842	.f62c		80 e9		bra $f617	                bra callKEYV                 ; C=1, V=0 - scan keyboard

12844							;-------------------------------------------------------------------------

12846	.f62e						scanKeyboard:
12847	.f62e		8a		txa		                txa                          ; A=start key
12848	.f62f		10 0a		bpl $f63b	                bpl scanKeyboardFromKey  ; taken if full keyboard scan
12849	.f631		20 95 f5	jsr $f595	                jsr interrogateKeyboard      ; query specific key
12850	.f634						enableKeyboardScanning:
12851							                ; Reinstate auto scan mode on exit
12852	.f634		a9 0b		lda #$0b	                lda #8|3                     ;set latch B3 - auto scan mode
12853	.f636		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;set auto scan mode
12854	.f639		8a		txa		                txa
12855	.f63a		60		rts		                rts

12857	.f63b						scanKeyboardFromKey:
12858	.f63b		8e cb 02	stx $02cb	                stx previousKeyPressedWhenReadingLastKey ; save start key
12859	.f63e		a9 ff		lda #$ff	                lda #$FF
12860	.f640		8d cc 02	sta $02cc	                sta previousKeyPressedWhenReadingFirstKey
12861	.f643		a2 0c		ldx #$0c	                ldx #$0C
12862	.f645		a9 7f		lda #$7f	                lda #$7F
12863	.f647		8d 43 fe	sta $fe43	                sta systemVIA.ddra  ;bit 7=input, bits0-6=output
12864	.f64a		a9 03		lda #$03	                lda #0|3            ;reset latch B3 - manual scan mode
12865	.f64c		8d 40 fe	sta $fe40	                sta systemVIA.orb
12866	.f64f						loopKeyboardColumns:
12867	.f64f		a9 0f		lda #$0f	                lda #$0F
12868	.f651		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;select a non-existent column
12869	.f654		a9 01		lda #$01	                lda #$01
12870	.f656		8d 4d fe	sta $fe4d	                sta systemVIA.ifr            ;cancel keyboard interrupts
12871	.f659		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake ;select column
12872	.f65c		2c 4d fe	bit $fe4d	                bit systemVIA.ifr            ;any key in this column
12873							                                             ;pressed?
12874	.f65f		f0 1b		beq $f67c	                beq tryNextKeyboardColumn    ;taken if no key
12875	.f661		8a		txa		                txa                          ;A = first key in column
12876	.f662						loopKeyboardRows:
12877	.f662		18		clc		                clc
12878	.f663		69 10		adc #$10	                adc #$10                     ;next row
12879	.f665		30 15		bmi $f67c	                bmi tryNextKeyboardColumn    ;taken if done
12880	.f667		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;store key
12881	.f66a		2c 4f fe	bit $fe4f	                bit systemVIA.iraNoHandshake ;pressed?
12882	.f66d		10 f3		bpl $f662	                bpl loopKeyboardRows         ;taken if not
12883							                ; Key is pressed...
12884	.f66f		cd cb 02	cmp $02cb	                cmp previousKeyPressedWhenReadingLastKey
12885	.f672		90 ee		bcc $f662	                bcc loopKeyboardRows         ;Taken if key<start key
12886							                                             ;value. The scan excludes
12887							                                             ;this key.
12888	.f674		cd cc 02	cmp $02cc	                cmp previousKeyPressedWhenReadingFirstKey
12889	.f677		b0 e9		bcs $f662	                bcs loopKeyboardRows         ;Taken if key>=first key
12890							                                             ;value. Not sure why not
12891							                                             ;to simply break out of
12892							                                             ;thel loop though?
12893	.f679		8d cc 02	sta $02cc	                sta previousKeyPressedWhenReadingFirstKey
12894	.f67c						tryNextKeyboardColumn:
12895	.f67c		ca		dex		                dex
12896	.f67d		10 d0		bpl $f64f	                bpl loopKeyboardColumns
12897	.f67f		ae cc 02	ldx $02cc	                ldx previousKeyPressedWhenReadingFirstKey ; X=key
12898							                                                          ; found, or
12899							                                                          ; $ff if
12900							                                                          ; none
12901	.f682		80 b0		bra $f634	                bra enableKeyboardScanning

12903	.f684						scanKeyboardWithExclusion:
12904	.f684		a2 0c		ldx #$0c	                ldx #$0c
12905	.f686						LF96E:
12906	.f686		20 be f6	jsr $f6be	                jsr enableKeyboardScanningFlippingInterrupts
12907	.f689		a9 7f		lda #$7f	                lda #$7F
12908	.f68b		8d 43 fe	sta $fe43	                sta systemVIA.ddra
12909	.f68e		a9 03		lda #$03	                lda #0|3
12910	.f690		8d 40 fe	sta $fe40	                sta systemVIA.orb
12911	.f693		a9 0f		lda #$0f	                lda #$0F
12912	.f695		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;select non-existent column
12913	.f698		a9 01		lda #$01	                lda #$01
12914	.f69a		8d 4d fe	sta $fe4d	                sta systemVIA.ifr            ;cancel keyboard interrupts
12915	.f69d		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake
12916	.f6a0		2c 4d fe	bit $fe4d	                bit systemVIA.ifr
12917	.f6a3		f0 20		beq $f6c5	                beq LF9AD
12918	.f6a5		8a		txa		                txa
12919	.f6a6						LF98E:
12920	.f6a6		18		clc		                clc
12921	.f6a7		69 10		adc #$10	                adc #$10
12922	.f6a9		30 1a		bmi $f6c5	                bmi LF9AD                    ;taken if done
12923	.f6ab		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;test key
12924	.f6ae		2c 4f fe	bit $fe4f	                bit systemVIA.iraNoHandshake ;pressed?
12925	.f6b1		10 f3		bpl $f6a6	                bpl LF98E                    ;taken if not
12926	.f6b3		48		pha		                pha                          ;save key number
12927	.f6b4						LF99C:
12928	.f6b4		59 00 00	eor $0000,y	                eor $0000,y                  ;compare to value
12929	.f6b7		0a		asl a		                asl a                        ;discard irrelevant bit 7
12930	.f6b8		c9 01		cmp #$01	                cmp #$01                     ;C set if different
12931	.f6ba		68		pla		                pla                          ;restore key number
12932	.f6bb		90 e9		bcc $f6a6	                bcc LF98E                    ;same key found - keep going
12933	.f6bd		aa		tax		                tax
12934	.f6be						enableKeyboardScanningFlippingInterrupts:
12935	.f6be		20 34 f6	jsr $f634	                jsr enableKeyboardScanning
12936	.f6c1		58		cli		                cli
12937	.f6c2		78		sei		                sei
12938	.f6c3		8a		txa		                txa
12939	.f6c4		60		rts		                rts

12941	.f6c5						LF9AD:
12942	.f6c5		ca		dex		                dex
12943	.f6c6		10 be		bpl $f686	                bpl LF96E
12944	.f6c8		80 f4		bra $f6be	                bra enableKeyboardScanningFlippingInterrupts

12946							;-------------------------------------------------------------------------

12952							;-------------------------------------------------------------------------

12958							;-------------------------------------------------------------------------

12960							                ; Ugly condition...

12984							;-------------------------------------------------------------------------

12990							;-------------------------------------------------------------------------

13019							;-------------------------------------------------------------------------

13025							;-------------------------------------------------------------------------

13033							;-------------------------------------------------------------------------

13041							;-------------------------------------------------------------------------

13049							;-------------------------------------------------------------------------

13057							;-------------------------------------------------------------------------

13060							                .include "insertCharacterIntoKeyboardBufferIfPossible.s65"

:16	;******  Processing file: src/insertCharacterIntoKeyboardBufferIfPossible.s65

1							                ; dup of what's called LF82B in MOS 5.00+
2	.f6ca						insertCharacterIntoKeyboardBufferIfPossible:
3	.f6ca		48		pha		                pha
4	.f6cb		a2 00		ldx #$00	                ldx #bufferKeyboard          ; buffer number
5	.f6cd		b8		clv		                clv                          ; count buffer
6	.f6ce		38		sec		                sec                          ; return space remaining
7	.f6cf		20 61 ec	jsr $ec61	                jsr countBufferViaCNPV       ; do the thing...
8	.f6d2		98		tya		                tya                          ; A=MSB of space remaining
9	.f6d3		d0 04		bne $f6d9	                bne LF6E2              ; taken if >256 bytes remaining
10	.f6d5		e0 02		cpx #$02	                cpx #2                 ; X=LSB of space remaining
11	.f6d7		90 0a		bcc $f6e3	                bcc LF6EC            ; taken if 1 or 0 bytes remaining
12	.f6d9						LF6E2:
13	.f6d9		ac 59 02	ldy $0259	                ldy keyboardStatus
14	.f6dc		18		clc		                clc                       ; assume char not inserted
15	.f6dd		d0 04		bne $f6e3	                bne LF6EC                 ; taken if keyboard disabled
16	.f6df		20 46 ea	jsr $ea46	                jsr insertCharacterIntoKeyboardBuffer
17	.f6e2		38		sec		                sec                          ; indicate char inserted
18	.f6e3						LF6EC:
19	.f6e3		68		pla		                pla
20	.f6e4		60		rts		                rts

:15	;******  Return to file: src/mos.s65

13063							;-------------------------------------------------------------------------
13064							;
13065							; OSBPUT [AUG p339]
13066							;
13067	.f6e5						osbputEntryPoint:
13068	.f6e5		20 ca f7	jsr $f7ca	                jsr selectFSForHandle
13069	.f6e8		6c 18 02	jmp ($0218)	                jmp (BPUTV)

13071							;-------------------------------------------------------------------------
13072							;
13073							; OSBGET [AUG p338]
13074							;
13075	.f6eb						osbgetEntryPoint:
13076	.f6eb		20 ca f7	jsr $f7ca	                jsr selectFSForHandle
13077	.f6ee		6c 16 02	jmp ($0216)	                jmp (BGETV)

13079							;-------------------------------------------------------------------------
13080							;
13081							; OSGBPB [AUG p339]
13082							;
13083	.f6f1						osgbpbEntryPoint: .proc
13084	.f6f1		c9 05		cmp #$05	                cmp #gbpbGetMediaMetadata
13085	.f6f3		b0 15		bcs $f70a	                bcs nonFileOperation
13086	.f6f5		c9 00		cmp #$00	                cmp #$00
13087	.f6f7		f0 11		beq $f70a	                beq nonFileOperation

13089							                ; Handle OSGBPB call that's an operation on a file
13090							                ; handle. Select the appropriate FS, given the file
13091							                ; handle, and pass the request along.
13092	.f6f9		5a		phy		                phy                          ;save OSGBPB Y
13093	.f6fa		48		pha		                pha                          ;save OSGBPB A
13094	.f6fb		86 b0		stx $b0		                stx osgbpbWorkspace.ptr+0
13095	.f6fd		84 b1		sty $b1		                sty osgbpbWorkspace.ptr+1
13096	.f6ff		b2 b0		lda ($b0)	                lda (osgbpbWorkspace.ptr)    ;get file handle
13097	.f701		a8		tay		                tay
13098	.f702		68		pla		                pla                          ;restore OSGBPB A
13099	.f703		20 ca f7	jsr $f7ca	                jsr selectFSForHandle
13100	.f706						passToCurrentFS:
13101	.f706		7a		ply		                ply                          ;restore OSGBPB Y
13102	.f707		6c 1a 02	jmp ($021a)	                jmp (GBPBV)

13104							;-------------------------------------------------------------------------
13105							;
13106							; Handle OSGBPB call that isn't an operation on a file handle. Select
13107							; current FS and pass the request along.
13108							;
13109	.f70a						nonFileOperation:
13110	.f70a		5a		phy		                phy
13111	.f70b		da		phx		                phx
13112	.f70c		48		pha		                pha
13113	.f70d		20 f1 ec	jsr $ecf1	                jsr selectHAZEL
13114	.f710		ad 00 df	lda $df00	                lda hazel.currentFS
13115	.f713		20 80 f8	jsr $f880	                jsr selectFS
13116	.f716		68		pla		                pla
13117	.f717		fa		plx		                plx
13118	.f718		80 ec		bra $f706	                bra passToCurrentFS
13119							                .endproc

13121							;-------------------------------------------------------------------------
13122							;
13123							; OSARGS [AUG p337[
13124							;
13125							;
13126	.f71a						osargsEntryPoint: .proc
13127	.f71a		c0 00		cpy #$00	                cpy #$00
13128	.f71c		d0 2a		bne $f748	                bne fileOperation            ;taken if file operation
13129	.f71e		c9 04		cmp #$04	                cmp #$04
13130	.f720		b0 26		bcs $f748	                bcs fileOperation ;taken if Y=0, A>=4 - honorary file operation
13131	.f722		48		pha		                pha
13132	.f723		20 f1 ec	jsr $ecf1	                jsr selectHAZEL
13133	.f726		68		pla		                pla
13134	.f727		d0 04		bne $f72d	                bne notGetFS
13135	.f729						getFS:
13136							                ; OSARGS Y=0 A=0 - read current FS number
13137	.f729		ad 00 df	lda $df00	                lda hazel.currentFS
13138	.f72c		60		rts		                rts

13140	.f72d						notGetFS:
13141	.f72d		3a		dec a		                dec a
13142	.f72e		d0 10		bne $f740	                bne notGetCommandLine
13143	.f730						getCommandLine:
13144							                ; OSARGS Y=0 A=1 - read command line tail address
13145	.f730		3a		dec a		                dec a                        ;A=$ff
13146	.f731		95 02		sta $02,x	                sta 2,x                    ;store full 32-bit address
13147	.f733		95 03		sta $03,x	                sta 3,x                    ;store full 32-bit address
13148	.f735		ad 04 df	lda $df04	                lda hazel.commandLinePointer+0
13149	.f738		95 00		sta $00,x	                sta 0,x                    ;
13150	.f73a		ad 05 df	lda $df05	                lda hazel.commandLinePointer+1
13151	.f73d		95 01		sta $01,x	                sta 1,x
13152	.f73f		60		rts		                rts

13154	.f740						notGetCommandLine:
13155	.f740		c9 01		cmp #$01	                cmp #argsCheckANFS-1    ;-1 due to the dec a above
13156	.f742		f0 03		beq $f747	                beq rtsFA14            ; OSARGS Y=0 A=2 - Read OldNFS flag
13157	.f744						getLibFS:
13158	.f744		ad 02 df	lda $df02	                lda hazel.libFS      ;OSARGS Y=0 A=3 - Read libfs filing system number
13159	.f747						rtsFA14:
13160	.f747		60		rts		                rts

13162	.f748						fileOperation:
13163							                ; Operating on a file. Select appropriate FS first.
13164	.f748		20 ca f7	jsr $f7ca	                jsr selectFSForHandle
13165							                .endproc

13168							;-------------------------------------------------------------------------
13169							;
13170							; Call current FS's OSARGS routine, bypassing the FileSwitch stuff.
13171							;
13172	.f74b						callARGSV:                      ;fa18
13173	.f74b		6c 14 02	jmp ($0214)	                jmp (ARGSV)

13175							;-------------------------------------------------------------------------
13176							;
13177							; OSFIND [AUG p342]
13178							;
13179	.f74e						osfindEntryPoint: .proc
13180	.f74e		09 00		ora #$00	                ora #$00        ;A=$00 if a file is to be closed
13181	.f750		f0 05		beq $f757	                beq close       ;branch taken if closing a file
13182	.f752		20 a1 f7	jsr $f7a1	                jsr parseFileNameAndSelectFS       ;handle something other than a file close
13183	.f755		80 03		bra $f75a	                bra callFINDV

13185	.f757						close:
13186	.f757		20 ca f7	jsr $f7ca	                jsr selectFSForHandle
13187	.f75a						callFINDV:
13188	.f75a		6c 1c 02	jmp ($021c)	                jmp (FINDV)
13189							                .pend

13191							;-------------------------------------------------------------------------
13192							;
13193							; OSFILE [AUG p335]
13194							;
13195	.f75d						osfileEntryPoint:               ;fa2a
13196	.f75d		da		phx		                phx
13197	.f75e		5a		phy		                phy
13198	.f75f		48		pha		                pha
13199	.f760		86 f2		stx $f2		                stx stringInputBufferAddress+0
13200	.f762		84 f3		sty $f3		                sty stringInputBufferAddress+1
13201	.f764		a0 11		ldy #$11	                ldy #size(OSFILEParameterBlock)-1
13202	.f766						-
13203	.f766		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
13204	.f768		99 ed 02	sta $02ed,y	                sta osfileParameterBlock,y
13205	.f76b		88		dey		                dey
13206	.f76c		10 f8		bpl $f766	                bpl -
13207	.f76e		ae ed 02	ldx $02ed	                ldx osfileParameterBlock+OSFILEParameterBlock.fileName+0
13208	.f771		ac ee 02	ldy $02ee	                ldy osfileParameterBlock+OSFILEParameterBlock.fileName+1
13209	.f774		20 a1 f7	jsr $f7a1	                jsr parseFileNameAndSelectFS
13210	.f777		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
13211	.f77a		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
13212	.f77d		68		pla		                pla
13213	.f77e		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
13214	.f780		a0 02		ldy #$02	                ldy #>osfileParameterBlock
13215	.f782		20 9e f7	jsr $f79e	                jsr callFILEV
13216	.f785		7a		ply		                ply
13217	.f786		84 f3		sty $f3		                sty stringInputBufferAddress+1
13218	.f788		fa		plx		                plx
13219	.f789		86 f2		stx $f2		                stx stringInputBufferAddress+0
13220	.f78b		48		pha		                pha
13221	.f78c		a0 11		ldy #$11	                ldy #size(OSFILEParameterBlock)-1
13222	.f78e						-
13223	.f78e		b9 ed 02	lda $02ed,y	                lda osfileParameterBlock,y
13224	.f791		91 f2		sta ($f2),y	                sta (stringInputBufferAddress),y
13225	.f793		88		dey		                dey
13226	.f794		c0 02		cpy #$02	                cpy #$02                     ;don't overwrite file name
13227	.f796		b0 f6		bcs $f78e	                bcs -
13228	.f798		68		pla		                pla
13229	.f799		a6 f2		ldx $f2		                ldx stringInputBufferAddress+0
13230	.f79b		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
13231	.f79d		60		rts		                rts

13233	.f79e						callFILEV:
13234	.f79e		6c 12 02	jmp ($0212)	                jmp (FILEV)

13236							;-------------------------------------------------------------------------
13237							;
13238							; Parse file name. Handle (and skip) any -FS- tempfs syntax, selecting
13239							; the FS specified if required.
13240							;
13241							; entry:
13242							;
13243							; Y (MSB)/X (LSB) = address of file name string
13244							;
13245							; exit:
13246							;
13247							; Y (MSB)/X (LSB) = address of file name part
13248							;
13249							; - New FS may have been selected
13250							;
13251	.f7a1						parseFileNameAndSelectFS:
13252	.f7a1		48		pha		                pha
13253	.f7a2		a5 f2		lda $f2		                lda stringInputBufferAddress+0
13254	.f7a4		48		pha		                pha
13255	.f7a5		a5 f3		lda $f3		                lda stringInputBufferAddress+1
13256	.f7a7		48		pha		                pha
13257	.f7a8		20 f1 ec	jsr $ecf1	                jsr selectHAZEL
13258	.f7ab		86 f2		stx $f2		                stx stringInputBufferAddress+0
13259	.f7ad		84 f3		sty $f3		                sty stringInputBufferAddress+1
13260	.f7af		a0 00		ldy #$00	                ldy #$00
13261	.f7b1		20 d9 f7	jsr $f7d9	                jsr parseFileNameFS      ;find -FS- prefix, if any
13262	.f7b4		5a		phy		                phy                      ;save offset
13263	.f7b5		20 80 f8	jsr $f880	                jsr selectFS                 ;select desired FS
13264	.f7b8		68		pla		                pla
13265	.f7b9		18		clc		                clc
13266	.f7ba		65 f2		adc $f2		                adc stringInputBufferAddress+0
13267	.f7bc		aa		tax		                tax                          ;save string address LSB
13268	.f7bd		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
13269	.f7bf		90 01		bcc $f7c2	                bcc +
13270	.f7c1		c8		iny		                iny
13271	.f7c2						+
13272	.f7c2		68		pla		                pla
13273	.f7c3		85 f3		sta $f3		                sta stringInputBufferAddress+1
13274	.f7c5		68		pla		                pla
13275	.f7c6		85 f2		sta $f2		                sta stringInputBufferAddress+0
13276	.f7c8		68		pla		                pla
13277	.f7c9		60		rts		                rts

13279							;-------------------------------------------------------------------------
13280							;
13281							; Select appropriate FS for the given file handle.
13282							;
13283							; entry:
13284							;
13285							; Y = file handle
13286							;
13287							; exit:
13288							;
13289							; - appropriate FS selected
13290							;
13291							; preserves: Y/X/A

13293	.f7ca						selectFSForHandle:
13294	.f7ca		da		phx		                phx
13295	.f7cb		48		pha		                pha
13296	.f7cc		20 f1 ec	jsr $ecf1	                jsr selectHAZEL
13297	.f7cf		20 56 f8	jsr $f856	                jsr findFSForHandle
13298	.f7d2		8a		txa		                txa
13299	.f7d3		20 80 f8	jsr $f880	                jsr selectFS
13300	.f7d6		68		pla		                pla
13301	.f7d7		fa		plx		                plx
13302	.f7d8		60		rts		                rts

13304							;-------------------------------------------------------------------------
13305							;
13306							; Parse the FS part of a file name, if any, and return the filing
13307							; system to use.
13308							;
13309							; Entry:
13310							;
13311							; (stringInputBufferAddress),y = the string
13312							;
13313							; Exit:
13314							;
13315							; A = FS number to use
13316							;
13317							; (stringInputBufferAddress),y = next char after any tempfs prefix has
13318							; been consumed
13319	.f7d9						parseFileNameFS: .proc

13321	.f7d9		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
13322	.f7dc		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput
13323	.f7df		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
13324	.f7e1		c9 2d		cmp #$2d	                cmp #'-'
13325	.f7e3		f0 0c		beq $f7f1	                beq parseFSNamePrefix ; branch taken if tempfs syntax
13326	.f7e5		2c c6 df	bit $dfc6	                bit hazel.tempFSFlag
13327	.f7e8		ad 00 df	lda $df00	                lda hazel.currentFS
13328	.f7eb		50 03		bvc $f7f0	                bvc +
13329	.f7ed		ad 01 df	lda $df01	                lda hazel.activeFS
13330	.f7f0						+
13331	.f7f0		60		rts		                rts

13333	.f7f1						parseFSNamePrefix:
13334	.f7f1		c8		iny		                iny
13335	.f7f2		a2 00		ldx #$00	                ldx #$00
13336	.f7f4						LFAC1:
13337	.f7f4		bd 06 df	lda $df06,x	                lda hazel.fsInfoBlocks,x ;get FS name char
13338	.f7f7		f0 44		beq $f83d	                beq badFilingSystemName
13339	.f7f9		8a		txa		                txa                      ;A=offset in info blocks
13340	.f7fa		18		clc		                clc
13341	.f7fb		69 08		adc #$08	                adc #size(fsInfoBlock.name)
13342	.f7fd		85 b0		sta $b0		                sta parseFileNameFSWorkspace.fsInfoOffset
13343	.f7ff		5a		phy		                phy
13344	.f800						compareFSNameLoop:
13345	.f800		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y

13347							; validate FS name char. Must be letter or digit.

13349	.f802		20 36 ea	jsr $ea36	                jsr isLetter
13350	.f805		90 08		bcc $f80f	                bcc validFSNameChar           ;branch taken if letter
13351	.f807		c9 30		cmp #$30	                cmp #'0'
13352	.f809		90 1b		bcc $f826	                bcc notValidFSNameChar       ;branch taken if not digit
13353	.f80b		c9 3a		cmp #$3a	                cmp #'9'+1
13354	.f80d		b0 17		bcs $f826	                bcs notValidFSNameChar       ;branch taken if not digit
13355	.f80f						validFSNameChar:
13356	.f80f		e4 b0		cpx $b0		                cpx parseFileNameFSWorkspace.fsInfoOffset
13357	.f811		b0 0b		bcs $f81e	                bcs nextFSInfoBlock ;branch taken if end of FS
13358							                                         ;info block name was reached
13359	.f813		5d 06 df	eor $df06,x	                eor hazel.fsInfoBlocks,x
13360	.f816		29 df		and #$df	                and #$DF                 ;Z=1 if char matches FS name
13361	.f818		d0 04		bne $f81e	                bne nextFSInfoBlock      ;branch taken if not a match
13362	.f81a		e8		inx		                inx                      ;next fs info block byte
13363	.f81b		c8		iny		                iny                      ;next input string byte
13364	.f81c		80 e2		bra $f800	                bra compareFSNameLoop

13366	.f81e						nextFSInfoBlock:
13367	.f81e		7a		ply		                ply
13368	.f81f		a6 b0		ldx $b0		                ldx parseFileNameFSWorkspace.fsInfoOffset ;offset of end of name
13369	.f821		e8		inx		                inx
13370	.f822		e8		inx		                inx
13371	.f823		e8		inx		                inx             ;advance to next entry
13372	.f824		80 ce		bra $f7f4	                bra LFAC1

13374	.f826						notValidFSNameChar:

13376							; Matching FS name must be terminated with -. Otherwise, it's bad
13377							; syntax, or perhaps an overly long name.

13379	.f826		c9 2d		cmp #$2d	                cmp #'-'
13380	.f828		d0 13		bne $f83d	                bne badFilingSystemName
13381	.f82a		c8		iny		                iny                       ;consume input '-'
13382	.f82b		e4 b0		cpx $b0		                cpx parseFileNameFSWorkspace.fsInfoOffset
13383	.f82d		f0 07		beq $f836	                beq foundFSInfoBlock     ;branch taken if a match due
13384							                                         ;to being right at end of the
13385							                                         ;FS info block name
13386	.f82f		bd 06 df	lda $df06,x	                lda hazel.fsInfoBlocks,x ;
13387	.f832		c9 20		cmp #$20	                cmp #' '
13388	.f834		d0 e8		bne $f81e	                bne nextFSInfoBlock      ;branch taken if not a match
13389							                                         ;as tthe supplied name was a
13390							                                         ;prefix of this FS's name
13391	.f836						foundFSInfoBlock:
13392	.f836		68		pla		                pla
13393	.f837		a6 b0		ldx $b0		                ldx parseFileNameFSWorkspace.fsInfoOffset
13394	.f839		bd 08 df	lda $df08,x	                lda hazel.fsInfoBlocks+(fsInfoBlock.fsNumber-(fsInfoBlock.name+size(fsInfoBlock.name))),x
13395	.f83c		60		rts		                rts

13397	.f83d						badFilingSystemName:
13398	.f83d		00		brk #		                brk
13399	>f83e		f8 42 61 64 20 66 69 6c		                .text $f8,'Bad filing system name',0
	>f846		69 6e 67 20 73 79 73 74 65 6d 20 6e 61 6d 65 00
13400							                .pend

13402							;-------------------------------------------------------------------------
13403							;
13404							; Find FS for the given handle
13405							;
13406							; entry:
13407							;
13408							; Y = file handle
13409							;
13410							; exit:
13411							;
13412							; X = FS number - will just use current FS if none suitable found
13413							;
13414	.f856						findFSForHandle: .proc
13415	.f856		48		pha		                pha                          ;
13416	.f857		5a		phy		                phy                          ;
13417	.f858		98		tya		                tya                          ;A = handle to search for
13418	.f859		a0 00		ldy #$00	                ldy #$00                     ;
13419	.f85b						loop:
13420	.f85b		be 06 df	ldx $df06,y	                ldx hazel.fsInfoBlocks.name+0,y
13421	.f85e		f0 15		beq $f875	                beq notFound                  ;taken if terminating entry
13422	.f860		d9 0e df	cmp $df0e,y	                cmp hazel.fsInfoBlocks.minHandle,y
13423	.f863		90 07		bcc $f86c	                bcc next                     ;taken if not this FS
13424	.f865		d9 0f df	cmp $df0f,y	                cmp hazel.fsInfoBlocks.maxHandle,y
13425	.f868		90 10		bcc $f87a	                bcc found                    ;taken if this FS
13426	.f86a		f0 0e		beq $f87a	                beq found                    ;taken if this FS

13428	.f86c						next:
13429	.f86c		48		pha		                pha
13430	.f86d		98		tya		                tya
13431	.f86e		18		clc		                clc
13432	.f86f		69 0b		adc #$0b	                adc #size(fsInfoBlock)
13433	.f871		a8		tay		                tay
13434	.f872		68		pla		                pla
13435	.f873		80 e6		bra $f85b	                bra loop

13437	.f875						notFound:
13438	.f875		ae 00 df	ldx $df00	                ldx hazel.currentFS
13439	.f878		80 03		bra $f87d	                bra done

13441	.f87a						found:
13442	.f87a		be 10 df	ldx $df10,y	                ldx hazel.fsInfoBlocks.fsNumber,y
13443	.f87d						done:
13444	.f87d		7a		ply		                ply
13445	.f87e		68		pla		                pla
13446	.f87f		60		rts		                rts
13447							                .endproc

13449							;-------------------------------------------------------------------------
13450							;
13451							; Select filing system in A.
13452							;
13453							; Entry:
13454							;
13455							; A = FS number
13456							;
13457	.f880						selectFS:                               ;fb4d
13458	.f880		cd 01 df	cmp $df01	                cmp hazel.activeFS      ; Check active fs
13459	.f883		f0 16		beq $f89b	                beq rtsFB68               ; Already active fs, return
13460	.f885		5a		phy		                phy
13461	.f886		da		phx		                phx
13462	.f887		a8		tay		                tay
13463	.f888		3a		dec a		                dec a
13464	.f889		d0 07		bne $f892	                bne LFB5F       ;taken if not FS 1 (tape)

13466							; ??? - only if trying to select tape FS

13468	.f88b		a9 04		lda #$04	                lda #$04
13469	.f88d		24 e2		bit $e2		                bit $E2
13470	.f88f		d0 01		bne $f892	                bne LFB5F
13471	.f891		c8		iny		                iny
13472	.f892						LFB5F:
13473	.f892		5a		phy		                phy
13474	.f893		a2 12		ldx #$12	                ldx #romServiceCallInitialiseFilingSystem
13475	.f895		20 ac ed	jsr $edac	                jsr makeROMServiceCall
13476	.f898		68		pla		                pla
13477	.f899		fa		plx		                plx
13478	.f89a		7a		ply		                ply
13479	.f89b						rtsFB68:
13480	.f89b		60		rts		                rts

13482							;-------------------------------------------------------------------------
13483							;
13484							; FileSwitch FSC
13485							; ==============
13486							;
13487	.f89c						fileswitchFSCEntryPoint:
13488	.f89c		48		pha		                pha                          ;save request type
13489	.f89d		20 f1 ec	jsr $ecf1	                jsr selectHAZEL
13490	.f8a0		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
13491	.f8a3		68		pla		                pla                          ;restore request type
13492	.f8a4		48		pha		                pha                          ;save request type
13493	.f8a5		da		phx		                phx                          ;save request X
13494	.f8a6		0a		asl a		                asl a
13495	.f8a7		aa		tax		                tax
13496	.f8a8		c9 17		cmp #$17	                cmp #11*2+1
13497	.f8aa		b0 03		bcs $f8af	                bcs fileswitchPassFSCToCurrentFS ;taken if out of range
13498	.f8ac		7c b4 f8	jmp ($f8b4,x)	                jmp (fileswitchFSCRoutinesTable,x)

13500							;-------------------------------------------------------------------------
13501							;
13502							; Pass to filing system's FSC
13503							;
13504							; There's 2 entry points - fileswitchPassFSCToCurrentFS, for
13505							; when X and A are both on the stack, and
13506							; fileswitchPassFSCToCurrentFS_X, for when only A is on the
13507							; stack.
13508							;
13509	.f8af						fileswitchPassFSCToCurrentFS:
13510	.f8af						fileswitchFSCNewFS:
13511	.f8af						fileswitchFSCFileHandleRange:
13512	.f8af						fileswitchFSCStarCommand:
13513	.f8af		fa		plx		                plx                          ;restore request X
13514	.f8b0						fileswitchPassFSCToCurrentFS_X:
13515	.f8b0		68		pla		                pla                          ;restore request type
13516	.f8b1		6c da df	jmp ($dfda)	                jmp (hazel.activeFSCV) ;call active FS's real FSCV entry point

13518							;-------------------------------------------------------------------------
13519							;
13520							; FileSwitch FSC table
13521							;
13522	.f8b4						fileswitchFSCRoutinesTable:
13523	>f8b4		d9 f8				                .word fileswitchFSCOPT
13524	>f8b6		d2 f8				                .word fileswitchFSCCheckEOF
13525	>f8b8		e6 f8				                .word fileswitchFSCStarSlash
13526	>f8ba		cc f8				                .word fileswitchFSCUnknownCommand
13527	>f8bc		e6 f8				                .word fileswitchFSCStarRUN
13528	>f8be		eb f8				                .word fileswitchFSCStarCAT
13529	>f8c0		af f8				                .word fileswitchFSCNewFS
13530	>f8c2		af f8				                .word fileswitchFSCFileHandleRange
13531	>f8c4		af f8				                .word fileswitchFSCStarCommand
13532	>f8c6		eb f8				                .word fileswitchFSCStarEX
13533	>f8c8		eb f8				                .word fileswitchFSCStarINFO
13534	>f8ca		1b f9				                .word fileswitchFSCRUNLibrary

13536							;-------------------------------------------------------------------------
13537							;
13538							; FSC 3 - *command [AUG p344]
13539							;
13540	.f8cc						fileswitchFSCUnknownCommand:
13541	.f8cc		fa		plx		                plx
13542	.f8cd		20 f4 f8	jsr $f8f4	                jsr getCommandLinePointer
13543	.f8d0		80 de		bra $f8b0	                bra fileswitchPassFSCToCurrentFS_X

13545							;-------------------------------------------------------------------------
13546							;
13547							; FSC 1 - check EOF [AUG p343]
13548							;
13549	.f8d2						fileswitchFSCCheckEOF:
13550	.f8d2		7a		ply		                ply                         ;Y = file handle
13551	.f8d3		5a		phy		                phy                         ;restore stack arrangement
13552	.f8d4		20 ca f7	jsr $f7ca	                jsr selectFSForHandle
13553	.f8d7		80 d6		bra $f8af	                bra fileswitchPassFSCToCurrentFS

13555							;-------------------------------------------------------------------------
13556							;
13557							; FSC 0 - *OPT [AUG p343]
13558							;
13559	.f8d9						fileswitchFSCOPT:
13560	.f8d9		2c c6 df	bit $dfc6	                bit hazel.tempFSFlag   ; Check temporary fs flag
13561	.f8dc		70 d1		bvs $f8af	                bvs fileswitchPassFSCToCurrentFS
13562	.f8de		ad 00 df	lda $df00	                lda hazel.currentFS ; Get current filing system number

13564							;-------------------------------------------------------------------------
13565							;
13566							; Pass FSCV request through to a particular FS.
13567							;
13568							; entry:
13569							;
13570							; A = FS to select
13571							;
13572							; Y = FSCV Y
13573							;
13574							; S = [FSCV X; FSCV A]
13575							;
13576	.f8e1						fileswitchPassFSCToSpecificFS:
13577	.f8e1		20 80 f8	jsr $f880	                jsr selectFS        ; Select filing system
13578	.f8e4		80 c9		bra $f8af	                bra fileswitchPassFSCToCurrentFS

13580							;-------------------------------------------------------------------------
13581							;
13582							; FSC 2 - */filename [AUG p343]
13583							; FSC 4 - *RUN filename [AUG p344]
13584							;
13585	.f8e6						fileswitchFSCStarSlash:
13586	.f8e6						fileswitchFSCStarRUN:
13587	.f8e6		fa		plx		                plx
13588	.f8e7		20 f4 f8	jsr $f8f4	                jsr getCommandLinePointer ; Skip '*'s and spaces, set command line address
13589	.f8ea		da		phx		                phx             ; Continue on to pass to filing system

13592							;-------------------------------------------------------------------------
13593							;
13594							; FSC 5 - *CAT [AUG p344]
13595							; FSC 9 - *EX [NAUG p257]
13596							; FSC, 10 - *INFO [NAUG p257]
13597							;
13598	.f8eb						fileswitchFSCStarCAT:
13599	.f8eb						fileswitchFSCStarEX:
13600	.f8eb						fileswitchFSCStarINFO:
13601	.f8eb		fa		plx		                plx
13602	.f8ec		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
13603	.f8ef		20 a1 f7	jsr $f7a1	                jsr parseFileNameAndSelectFS
13604	.f8f2		80 bc		bra $f8b0	                bra fileswitchPassFSCToCurrentFS_X

13606							;-------------------------------------------------------------------------
13607							;
13608							; Get command line pointer.
13609							;
13610							; Entry:
13611							;
13612							; X/Y - pointer to CR-terminated command line string
13613							;
13614							; Exit:
13615							;
13616							; X/Y, (hazel.commandLinePointer) - pointer to first non-space char in
13617							; command line string
13618	.f8f4						getCommandLinePointer: .proc ;fbc1
13619	.f8f4		86 f2		stx $f2		                stx stringInputBufferAddress+0
13620	.f8f6		84 f3		sty $f3		                sty stringInputBufferAddress+1

13622							; skip spaces. Stop if terminating CR encountered.

13624	.f8f8		a0 ff		ldy #$ff	                ldy #$FF
13625	.f8fa						-
13626	.f8fa		c8		iny		                iny
13627	.f8fb		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
13628	.f8fd		c9 0d		cmp #$0d	                cmp #$0D
13629	.f8ff		f0 04		beq $f905	                beq +
13630	.f901		c9 20		cmp #$20	                cmp #' '
13631	.f903		d0 f5		bne $f8fa	                bne -

13633	.f905						+

13635							; Hmm. Didn't we just do this bit already?

13637	.f905		20 69 f2	jsr $f269	                jsr skipSpacesAndCheckForCRInStringInput

13639							; Store address of first non-space char in the HAZEL command line
13640							; pointer.

13642	.f908		98		tya		                tya
13643	.f909		18		clc		                clc
13644	.f90a		65 f2		adc $f2		                adc stringInputBufferAddress+0
13645	.f90c		8d 04 df	sta $df04	                sta hazel.commandLinePointer+0
13646	.f90f		a5 f3		lda $f3		                lda stringInputBufferAddress+1
13647	.f911		69 00		adc #$00	                adc #$00
13648	.f913		8d 05 df	sta $df05	                sta hazel.commandLinePointer+1
13649	.f916		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
13650	.f918		a6 f2		ldx $f2		                ldx stringInputBufferAddress+0
13651	.f91a		60		rts		                rts
13652							                .pend

13654							;-------------------------------------------------------------------------
13655							;
13656							; FSC 11 - RUN from libfs [NAUG p257]
13657							;
13658	.f91b						fileswitchFSCRUNLibrary:
13659	.f91b		ad 02 df	lda $df02	                lda hazel.libFS      ; Is a libfs set?
13660	.f91e		10 c1		bpl $f8e1	                bpl fileswitchPassFSCToSpecificFS
13661	.f920						badCommandError:
13662	.f920		00		brk #		                brk
13663	>f921		fe				                .byte 254
13664	>f922		42 61 64 20 63 6f 6d 6d		                .text "Bad command"
	>f92a		61 6e 64
13665	.f92d		00		brk #		                brk

13667							;-------------------------------------------------------------------------

13671							                .include "sram_access_helpers_tube.s65"

:25	;******  Processing file: src/sram_access_helpers_tube.s65

1							; There's a no-Tube version of transferBetweenSidewaysRAMAndRAM in
2							; mos.s65, that's worth using if Tube not supported as it doesn't do a
3							; jsr on every iteration.

5	.f92e						transferBetweenSidewaysRAMAndRAM:
6	.f92e		20 5d e5	jsr $e55d	                jsr selectROMA
7	.f931						transferBetweenSidewaysRAMAndRAMLoop:
8	.f931		b1 b0		lda ($b0),y	                lda (sramTransferPointers.src),y
9	.f933		91 b2		sta ($b2),y	                sta (sramTransferPointers.dest),y
10	.f935		20 7d f9	jsr $f97d	                jsr transferSidewaysRAMLoopUpdate
11	.f938		d0 f7		bne $f931	                bne transferBetweenSidewaysRAMAndRAMLoop
12	.f93a		b5 01		lda $01,x	                lda 1,x
13	.f93c		cd f0 02	cmp $02f0	                cmp sramWorkspace.length+1
14	.f93f		d0 f0		bne $f931	                bne transferBetweenSidewaysRAMAndRAMLoop
15	.f941		4c 5b e5	jmp $e55b	                jmp selectTerminalROM

17							;-------------------------------------------------------------------------

19	.f944						transferParasiteToSidewaysRAM:
20	.f944		20 5d e5	jsr $e55d	                jsr selectROMA
21	.f947						transferParasiteToSidewaysRAMLoop:
22	.f947		ad e5 fe	lda $fee5	                lda tube.data3
23	.f94a		91 b2		sta ($b2),y	                sta (sramTransferPointers.dest),y
24	.f94c		20 8d f9	jsr $f98d	                jsr LF800
25	.f94f		20 7d f9	jsr $f97d	                jsr transferSidewaysRAMLoopUpdate
26	.f952		d0 f3		bne $f947	                bne transferParasiteToSidewaysRAMLoop
27	.f954		b5 01		lda $01,x	                lda 1,x
28	.f956		cd f0 02	cmp $02f0	                cmp sramWorkspace.length+1
29	.f959		d0 ec		bne $f947	                bne transferParasiteToSidewaysRAMLoop
30	.f95b		4c 5b e5	jmp $e55b	                jmp selectTerminalROM

32							;-------------------------------------------------------------------------

34	.f95e						transferSidewaysRAMOverTube:
35	.f95e		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
36	.f961		30 e1		bmi $f944	                bmi transferParasiteToSidewaysRAM
37	.f963		20 5d e5	jsr $e55d	                jsr selectROMA  ; select ROM of interest
38	.f966						transferSidewaysRAMToParasiteLoop:
39	.f966		b1 b0		lda ($b0),y	                lda (sramTransferPointers.src),y ; load byte from sideways RAM
40	.f968		8d e5 fe	sta $fee5	                sta tube.data3  ; send byte to coprocessor
41	.f96b		20 8d f9	jsr $f98d	                jsr LF800       ;
42	.f96e		20 7d f9	jsr $f97d	                jsr transferSidewaysRAMLoopUpdate
43	.f971		d0 f3		bne $f966	                bne transferSidewaysRAMToParasiteLoop
44	.f973		b5 01		lda $01,x	                lda 1,x
45	.f975		cd f0 02	cmp $02f0	                cmp sramWorkspace.length+1
46	.f978		d0 ec		bne $f966	                bne transferSidewaysRAMToParasiteLoop
47	.f97a		4c 5b e5	jmp $e55b	                jmp selectTerminalROM

49							;-------------------------------------------------------------------------

51	.f97d						transferSidewaysRAMLoopUpdate:
52	.f97d		c8		iny		                iny
53	.f97e		d0 0d		bne $f98d	                bne LF800
54	.f980		e6 b1		inc $b1		                inc sramTransferPointers.src+1
55	.f982		e6 b3		inc $b3		                inc sramTransferPointers.dest+1
56	.f984		20 5b e5	jsr $e55b	                jsr selectTerminalROM
57	.f987		20 e5 8a	jsr $8ae5	                jsr L8D0F
58	.f98a		20 5d e5	jsr $e55d	                jsr selectROMA
59	.f98d						LF800:
60	.f98d		cc ef 02	cpy $02ef	                cpy osfileParameterBlock+2
61							                ; the dummy ROM header's first byte is the RTS for
62							                ; this routine...

:15	;******  Return to file: src/mos.s65

13673							                .include "sram_access_helpers_2.s65"

:17	;******  Processing file: src/sram_access_helpers_2.s65

1	.f990						dummyROMHeader: .block
2	.f990		60		rts		                rts
3	>f991		00 00				                .byte 0,0
4	.f993		60		rts		                rts
5	>f994		00 00				                .byte 0,0
6	>f996		02				                .byte romType6502
7	>f997		0c				                .byte copyright-dummyROMHeader
8	>f998		ff				                .byte $ff
9	>f999		52				                .text "R"
10	.f99a						ram_or_rom_char:
11	>f99a		41				                .text "A"
12	>f99b		4d				                .text "M"
13	.f99c						copyright:
14	>f99c		00				                .byte 0
15	>f99d		28 43 29			                .text "(C)"
16	=16						size=*-dummyROMHeader
17							                ; I doubt I've caught all the implied 16s...

20							                ; in any event, this ROM header must be <=16 bytes, as
21							                ; the total pseudo-addressable area has a o documented
22							                ; size of 4*(16384-16)
24							                .endblock

26	=32784						dataBankStart=$8000+16
27	=16368						dataBankSize=16384-16

29							;-------------------------------------------------------------------------
30							;
31							;
32	.f9a0						initDummyROMHeader:
33	.f9a0		20 4c e5	jsr $e54c	                jsr selectROMX
34	.f9a3		a0 0f		ldy #$0f	                ldy #size(dummyROMHeader)-1
35	.f9a5						LF881:
36	.f9a5		b9 90 f9	lda $f990,y	                lda dummyROMHeader,y
37	.f9a8		99 00 80	sta $8000,y	                sta $8000,y
38	.f9ab		88		dey		                dey
39	.f9ac		10 f7		bpl $f9a5	                bpl LF881
40	.f9ae		2c ee 02	bit $02ee	                bit sramWorkspace.type
41	.f9b1		70 05		bvs $f9b8	                bvs LF894       ; taken if called by *SRDATA
42	.f9b3		a9 4f		lda #$4f	                lda #'O'
43	.f9b5		8d 0a 80	sta $800a	                sta $8000+(dummyROMHeader.ram_or_rom_char-dummyROMHeader)
44	.f9b8						LF894:
45	.f9b8		8e 01 80	stx $8001	                stx $8001
46	.f9bb		4c 5b e5	jmp $e55b	                jmp selectTerminalROM

48							;-------------------------------------------------------------------------
49							;
50							; Check if a ROM bank is writeable.
51							;
52							; Entry:
53							;
54							; X = ROM bank of interest
55							;
56							; Exit:
57							;
58							; C=0 if ROM, C=1 if RAM
59							;
60							; Terminal ROM selected
61							;
62							; Preserves: X
63							;
64	.f9be						isBankROM:
65	.f9be		20 4c e5	jsr $e54c	                jsr selectROMX

67							                ; Modify the version number byte - if a valid
68							                ; writeable sideways ROM, don't leave it in a bad
69							                ; state if reset partway through (not much you can do
70							                ; for non-ROMs of course...)
71	.f9c1		ad 08 80	lda $8008	                lda $8008
72	.f9c4		a8		tay		                tay             ; Y = original value
73	.f9c5		49 ff		eor #$ff	                eor #$ff
74	.f9c7		78		sei		                sei
75	.f9c8		8d 08 80	sta $8008	                sta $8008       ; store modified value

95	.f9cb		cd 08 80	cmp $8008	                cmp $8008       ; did it take? Z=1 if RAM
96	.f9ce		8c 08 80	sty $8008	                sty $8008       ; restore original value
97	.f9d1		58		cli		                cli
98	.f9d2		f0 01		beq $f9d5	                beq jmpSelectTerminalROM ; taken if RAM
99	.f9d4		18		clc		                clc
100	.f9d5						jmpSelectTerminalROM:
101	.f9d5		4c 5b e5	jmp $e55b	                jmp selectTerminalROM

105							;-------------------------------------------------------------------------

:15	;******  Return to file: src/mos.s65

13674							                .include "sram_access_helpers_3.s65"

:18	;******  Processing file: src/sram_access_helpers_3.s65

1	.f9d8						LF8D1:
2	.f9d8		ad ee 02	lda $02ee	                lda sramWorkspace.type
3	.f9db		c9 a0		cmp #$a0	                cmp #$a0
4	.f9dd		d0 f6		bne $f9d5	                bne jmpSelectTerminalROM
5	.f9df		ac f1 02	ldy $02f1	                ldy sramWorkspace.bank
6	.f9e2		98		tya		                tya
7	.f9e3		aa		tax		                tax
8	.f9e4		20 9f e3	jsr $e39f	                jsr LE389
9	.f9e7		90 ec		bcc $f9d5	                bcc jmpSelectTerminalROM
10	.f9e9		ad 06 80	lda $8006	                lda $8006
11	.f9ec		9d a1 02	sta $02a1,x	                sta romInformationTable,x
12	.f9ef		80 e4		bra $f9d5	                bra jmpSelectTerminalROM

:15	;******  Return to file: src/mos.s65

13677							;-------------------------------------------------------------------------
13678							;
13679							; Tube 6502 language ROM relocation
13680							;

13684	.f9f1						relocateNextLanguageROMPage: .block

13719	.f9f1		a0 00		ldy #$00	                ldy #0
13720	.f9f3		84 00		sty $00		                sty tubeLanguageHostAddr+0
13721	.f9f5						loop:
13722	.f9f5		b1 00		lda ($00),y	                lda (tubeLanguageHostAddr),y ; fetch byte from language ROM
13723	.f9f7		ae f9 04	ldx $04f9	                ldx tubeRelocationPageOffset
13724	.f9fa		f0 13		beq $fa0f	                beq gotByte                  ; taken if not relocating
13726	.f9fc		c9 80		cmp #$80	                cmp #$80
13733	.f9fe		90 0f		bcc $fa0f	                bcc gotByte ; taken if not potentially-relocatable byte
13734	.fa00		c9 c0		cmp #$c0	                cmp #$C0
13735	.fa02		b0 0b		bcs $fa0f	                bcs gotByte ; taken if not potentially-relocatable byte

13737	.fa04		48		pha		                pha
13738	.fa05		20 c5 fa	jsr $fac5	                jsr fetchTubeRelocationBitmapBit
13739	.fa08		68		pla		                pla
13740	.fa09		90 04		bcc $fa0f	                bcc gotByte ; taken if byte isn't actually to be relocated
13741	.fa0b		18		clc		                clc
13742	.fa0c		6d f9 04	adc $04f9	                adc tubeRelocationPageOffset

13744	.fa0f						gotByte:
13745	.fa0f		99 00 07	sta $0700,y	                sta tubeRelocationBuffer,y
13746	.fa12		c8		iny		                iny
13747	.fa13		d0 e0		bne $f9f5	                bne loop
214:3							                .if refreshVersion
217	.fa15		ee 01 00	inc $0001	                inc @w tubeLanguageHostAddr+1
13749:15
	.fa18		60		rts		                rts

13753							                .endblock

13755							;-------------------------------------------------------------------------

13757	.fa19						checkForTubeRelocationBitmap:
214:3							                .if refreshVersion
217	.fa19		8d 56 00	sta $0056	                sta @w tubeLanguageParasiteAddr+3
217	.fa1c		8c 55 00	sty $0055	                sty @w tubeLanguageParasiteAddr+2
13760:15
	.fa1f		24 f4		bit $f4		                bit $f4
13761	.fa21		70 71		bvs $fa94	                bvs setTubeLanguageParasiteAddr00008000 ; taken if don't-relocate bit set
13762	.fa23		ad 06 80	lda $8006	                lda sidewaysROMType
13763	.fa26		29 0d		and #$0d	                and #~%0010&$0f              ; Z=1 if 6502 code
13764	.fa28		d0 78		bne $faa2	                bne noTubeRelocationBitmap                    ; taken if not 6502 code
214:3							                .if refreshVersion
217	.fa2a		ad 56 00	lda $0056	                lda @w tubeLanguageParasiteAddr+3
217	.fa2d		8d 03 00	sta $0003	                sta @w tubeRelocationBitmapPtr+1
217	.fa30		0d 55 00	ora $0055	                ora @w tubeLanguageParasiteAddr+2
13768:15
	.fa33		f0 6d		beq $faa2	                beq noTubeRelocationBitmap     ; taken if parasite address is $0000xxxx
214:3							                .if refreshVersion
217	.fa35		ad 55 00	lda $0055	                lda @w tubeLanguageParasiteAddr+2
217	.fa38		8d 02 00	sta $0002	                sta @w tubeRelocationBitmapPtr+0
13771:15						                ; (2) is address of bitmap descriptor table
13772	.fa3b		a0 02		ldy #$02	                ldy #2
13773	.fa3d		b1 02		lda ($02),y	                lda (tubeRelocationBitmapPtr),y ; get bitmap ROM number
13774	.fa3f		aa		tax		                tax                          ; X = bitmap ROM number
13775	.fa40		88		dey		                dey
13776	.fa41		b1 02		lda ($02),y	                lda (tubeRelocationBitmapPtr),y ; get pointer to byte after bitmap, MSB
13777	.fa43		a8		tay		                tay            ; Y = pointer to byte after bitmap, MSB
13778	.fa44		b2 02		lda ($02)	                lda (tubeRelocationBitmapPtr) ; get pointer to byte after bitmap, LSB
13779							                ; (tubeRelocationBitmapPtr) = pointer to byte after bitmap
214:3							                .if refreshVersion
217	.fa46		8d 02 00	sta $0002	                sta @w tubeRelocationBitmapPtr+0
217	.fa49		8c 03 00	sty $0003	                sty @w tubeRelocationBitmapPtr+1
217	.fa4c		ad 54 00	lda $0054	                lda @w tubeLanguageParasiteAddr+1
13783:15
	.fa4f		38		sec		                sec
13784	.fa50		e9 80		sbc #$80	                sbc #$80 ; $80 is of course the base page for a language ROM
13785	.fa52		8d f9 04	sta $04f9	                sta tubeRelocationPageOffset
214:3							                .if refreshVersion
217	.fa55		9c 56 00	stz $0056	                stz @w tubeLanguageParasiteAddr+3
217	.fa58		9c 55 00	stz $0055	                stz @w tubeLanguageParasiteAddr+2
13788:15
	.fa5b		8a		txa		                txa                     ; A = bitmap ROM number
13789	.fa5c		10 03		bpl $fa61	                bpl gotRelocationBitmapROMBank ; taken if absolute ROM number
13790	.fa5e		18		clc		                clc
13791	.fa5f		65 f4		adc $f4		                adc $f4     ; form ROM number from relative ROM number
13792	.fa61						gotRelocationBitmapROMBank:
13793	.fa61		29 0f		and #$0f	                and #$F                      ; ROM numbers are 4 bits
13794	.fa63		8d f8 04	sta $04f8	                sta tubeRelocationBitmapROMBank ; store ROM number containing relocation bitmap
13795	.fa66		a6 f4		ldx $f4		                ldx $f4
13796	.fa68		da		phx		                phx
13797	.fa69		20 5d e5	jsr $e55d	                jsr selectROMA          ; select ROM containing bitmap
13798	.fa6c		20 a6 fa	jsr $faa6	                jsr fetchTubeRelocationBitmapByte ; fetch hopefully $DE
13799	.fa6f		49 de		eor #$de	                eor #$DE                  ; check for $CODE identifier
13800	.fa71		d0 1b		bne $fa8e	                bne invalidTubeRelocationBitmap                 ; taken if $CODE not found
13801	.fa73		20 a6 fa	jsr $faa6	                jsr fetchTubeRelocationBitmapByte ;fetch hopefully $C0
13802	.fa76		49 c0		eor #$c0	                eor #$C0                  ; check for $CODE identifier
13803	.fa78		d0 14		bne $fa8e	                bne invalidTubeRelocationBitmap ; taken if $CODE not found
13811	.fa7a		8d f7 04	sta $04f7	                sta tubeRelocationBitmapByte
13812	.fa7d		20 a6 fa	jsr $faa6	                jsr fetchTubeRelocationBitmapByte ; fetch bitmap size MSB
13813	.fa80		8d f6 04	sta $04f6	                sta tubeRelocationBitmapSizeBytes+1
13814	.fa83		20 a6 fa	jsr $faa6	                jsr fetchTubeRelocationBitmapByte ; fetch bitmap size LSB
13815	.fa86		8d f5 04	sta $04f5	                sta tubeRelocationBitmapSizeBytes+0
13816	.fa89		68		pla		                pla
13817	.fa8a		20 5d e5	jsr $e55d	                jsr selectROMA
13818	.fa8d		60		rts		                rts

13820							;-------------------------------------------------------------------------

13822	.fa8e						invalidTubeRelocationBitmap:
13823	.fa8e		68		pla		                pla
13824	.fa8f		20 5d e5	jsr $e55d	                jsr selectROMA
13828	.fa92		80 0e		bra $faa2	                bra noTubeRelocationBitmap

13831							;-------------------------------------------------------------------------

13833	.fa94						setTubeLanguageParasiteAddr00008000:
13834	.fa94		a9 80		lda #$80	                lda #$80
214:3							                .if refreshVersion
217	.fa96		8d 54 00	sta $0054	                sta @w tubeLanguageParasiteAddr+1
217	.fa99		9c 53 00	stz $0053	                stz @w tubeLanguageParasiteAddr+0
217	.fa9c		9c 55 00	stz $0055	                stz @w tubeLanguageParasiteAddr+2
217	.fa9f		9c 56 00	stz $0056	                stz @w tubeLanguageParasiteAddr+3
13839:15
	.faa2						noTubeRelocationBitmap:
13840	.faa2		9c f9 04	stz $04f9	                stz tubeRelocationPageOffset
13841	.faa5		60		rts		                rts

13843							;-------------------------------------------------------------------------

13851	.faa6						fetchTubeRelocationBitmapByte: .block
214:3							                .if refreshVersion
217	.faa6		ad 02 00	lda $0002	                lda @w tubeRelocationBitmapPtr+0
13853:15
	.faa9		08		php		                php
214:3							                .if refreshVersion
217	.faaa		ce 02 00	dec $0002	                dec @w tubeRelocationBitmapPtr+0
13855:15
	.faad		28		plp		                plp
13856	.faae		d0 03		bne $fab3	                bne +
214:3							                .if refreshVersion
217	.fab0		ce 03 00	dec $0003	                dec @w tubeRelocationBitmapPtr+1
13858:15
	.fab3						+

13869	.fab3		a5 f4		lda $f4		                lda $f4
13870	.fab5		48		pha		                pha
13871	.fab6		ad f8 04	lda $04f8	                lda tubeRelocationBitmapROMBank ; get ROM number containing relocation bitmap
13872	.fab9		20 5d e5	jsr $e55d	                jsr selectROMA ; select ROM containing relocation bitmap
13873	.fabc		b2 02		lda ($02)	                lda (tubeRelocationBitmapPtr)        ; get bitmap byte
13874	.fabe		aa		tax		                tax            ; X = bitmap byte
13875	.fabf		68		pla		                pla            ;
13876	.fac0		20 5d e5	jsr $e55d	                jsr selectROMA ; restore old ROM
13877	.fac3		8a		txa		                txa            ; A = bitmap byte
13879	.fac4		60		rts		                rts
13880							                .endblock

13882							;-------------------------------------------------------------------------

13885	.fac5						fetchTubeRelocationBitmapBit: .block
13886	.fac5		0e f7 04	asl $04f7	                asl tubeRelocationBitmapByte ; put next bit in carry, possibly the terminator
13887	.fac8		d0 0a		bne $fad4	                bne +                        ; taken if bit was valid
13888							                ; the bit shifted out was the terminator, so fetch
13889							                ; next one.
13890	.faca		20 d5 fa	jsr $fad5	                jsr fetchTubeRelocationBitmapByte2 ; fetch next byte
13891	.facd		18		clc		                clc                         ; report bit clear
13892	.face		f0 04		beq $fad4	                beq +                       ; taken if end of table??
13893							                ; fetch next bit into carry, and set shifted-in bit 0
13894							                ; by way of terminator.
13895	.fad0		38		sec		                sec
13896	.fad1		2e f7 04	rol $04f7	                rol tubeRelocationBitmapByte
13897	.fad4						+
13898	.fad4		60		rts		                rts
13899							                .endblock

13902							;-------------------------------------------------------------------------
13903							;
13904							; Terrible naming...
13905							;
13907	.fad5						fetchTubeRelocationBitmapByte2: .block
13908	.fad5		20 a6 fa	jsr $faa6	                jsr fetchTubeRelocationBitmapByte ; fetch next byte from bitmap
13909	.fad8		8d f7 04	sta $04f7	                sta tubeRelocationBitmapByte      ; store it

13911							                ; decrement (tubeRelocationBitmapSizeBytes)
13912	.fadb		ad f5 04	lda $04f5	                lda tubeRelocationBitmapSizeBytes+0
13913	.fade		08		php		                php
13914	.fadf		ce f5 04	dec $04f5	                dec tubeRelocationBitmapSizeBytes+0
13915	.fae2		28		plp		                plp
13916	.fae3		d0 03		bne $fae8	                bne +
13917	.fae5		ce f6 04	dec $04f6	                dec tubeRelocationBitmapSizeBytes+1
13918	.fae8						+
13919							                ; Set Z if the remaining size went negative.

13921	.fae8		ad f6 04	lda $04f6	                lda tubeRelocationBitmapSizeBytes+1 ; N=1 if run out
13922	.faeb		49 80		eor #$80	                eor #$80                            ; N=0 if run out
13923	.faed		29 80		and #$80	                and #$80                            ; Z=1 if run out
13924	.faef		60		rts		                rts
13925							                .endblock

13928							;-------------------------------------------------------------------------

13930	.faf0						osbyte8EWithoutRelocation:
13931	.faf0		8a		txa		                txa
13932	.faf1		09 40		ora #$40	                ora #$40                  ; set the don't-relocate bit
13933	.faf3		aa		tax		                tax
13934	.faf4		a9 8e		lda #$8e	                lda #$8E                     ; enter language ROM
13935	.faf6		4c f4 ff	jmp $fff4	                jmp OSBYTE

13937							;-------------------------------------------------------------------------

13939	.faf9						getLanguageParasiteAddrAndAssumeRelocatable:
13940	.faf9		20 c8 04	jsr $04c8	                jsr tubeHost.getLanguageParasiteAddr
13941	.fafc		a9 40		lda #$40	                lda #$40
13942	.fafe		14 f4		trb $f4		                trb $f4                 ; clear the don't-relocate bit
13943	.fb00		60		rts		                rts

13945							;-------------------------------------------------------------------------

13988							;-------------------------------------------------------------------------
13989							;
13990							; Delay after a possible EEPROM write, to give the device time to time
13991							; out out of write mode. Trying to stay reasonably under 10 ms. Don't
13992							; interfere with the 100 Hz timer, but give the 100 Hz routine at
13993							; least a bit of time to run.
13994							;
13995							; 256 times round inner loop=2+256*2+255*3+2=1281 cycles
13996							;
13997							; 1281 cycles = 0.6405 ms
13998							;
13999							; 12 iterations = 15372+(a bit) cycles=~7.7 ms
14000							;
14001							; This can be revisited if required.
14002							;
14003							; Preserves: A/X/P

14024							;-------------------------------------------------------------------------

14026	.fb01						mosUnusedBegin:
14027	>fb01		ff ff ff ff ff ff ff ff		                .fill $fc00-*,$ff
	>fb09		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb19		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb29		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb39		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb49		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb59		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb69		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb79		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb89		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb99		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fba9		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbb9		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbc9		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbd9		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbe9		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbf9		ff ff ff ff ff ff ff
14028	=255						mosUnusedSize=*-mosUnusedBegin

14032							;-------------------------------------------------------------------------
14033							;
14034							; Some init code - normally hidden by the I/O region

14036	.fc00						reset: .block
14037							                .include "reset.s65"

:19	;******  Processing file: src/reset.s65

2	.fc00		20 5b e5	jsr $e55b	                jsr selectTerminalROM
9	.fc03		9c dd df	stz $dfdd	                stz hazel.hasACCCONChanged
14	.fc06		d8		cld		                cld
15	.fc07		a2 ff		ldx #$ff	                ldx #$FF
16	.fc09		9a		txs		                txs              ;reset stack
17	.fc0a		8e 63 fe	stx $fe63	                stx userVIA.ddra ;port A all outputs
18	.fc0d		a9 cf		lda #$cf	                lda #%11001111
19	.fc0f		8d 42 fe	sta $fe42	                sta systemVIA.ddrb
21	.fc12		20 34 f6	jsr $f634	                jsr enableKeyboardScanning
22	.fc15		20 f5 fe	jsr $fef5	                jsr clearAllSoundChannelBuffers
25	.fc18		a0 20		ldy #$20	                ldy #RTC.a.dv32768Hz
26	.fc1a		a2 0a		ldx #$0a	                ldx #RTC.a
27	.fc1c		20 d0 96	jsr $96d0	                jsr writeRTCByte
28	.fc1f		20 0c 95	jsr $950c	                jsr finishRTCUpdate
41	.fc22		ad eb e2	lda $e2eb	                lda defaultVectorTable+0 ;what is this.
42	.fc25		ad eb e2	lda $e2eb	                lda defaultVectorTable+0 ;what is this.
46	.fc28		20 2e 80	jsr $802e	                jsr ldaSystemVIAIER
50	.fc2b		0a		asl a		                asl a
51	.fc2c		48		pha		                pha             ; save initial IER<<1. 0 if power on
53	.fc2d		d0 4a		bne $fc79	                bne nonPowerOnReset
54	.fc2f		20 7f 80	jsr $807f	                jsr resetCRTC
62	.fc32		a2 07		ldx #$07	                ldx #7
63	.fc34						clearSidewaysRAMLoop:
64	.fc34		20 4c e5	jsr $e54c	                jsr selectROMX
65	.fc37		a0 80		ldy #$80	                ldy #$80        ; ''
66	.fc39		84 01		sty $01		                sty 1
67	.fc3b		64 00		stz $00		                stz 0
68	.fc3d		a8		tay		                tay

70	.fc3e						clearSidewaysRAMBankLoop:
71	.fc3e		91 00		sta ($00),y	                sta (0),y
72	.fc40		c8		iny		                iny
73	.fc41		d0 fb		bne $fc3e	                bne clearSidewaysRAMBankLoop
74	.fc43		e6 01		inc $01		                inc 1
75	.fc45		24 01		bit $01		                bit 1
76	.fc47		50 f5		bvc $fc3e	                bvc clearSidewaysRAMBankLoop
77	.fc49		ca		dex		                dex
78	.fc4a		e0 04		cpx #$04	                cpx #4
79	.fc4c		b0 e6		bcs $fc34	                bcs clearSidewaysRAMLoop

86	.fc4e		20 5b e5	jsr $e55b	                jsr selectTerminalROM

95	.fc51		98		tya		                tya
96	.fc52						startClearRAM:
97	.fc52		a8		tay		                tay

100	.fc53						LFC53:
101	.fc53		a6 fc		ldx $fc		                ldx TEMPA
102	.fc55		98		tya		                tya
103	.fc56		64 01		stz $01		                stz 1
104	.fc58		64 00		stz $00		                stz 0

106	.fc5a						LFC5A:
107	.fc5a		91 00		sta ($00),y	                sta (0),y
108	.fc5c		c8		iny		                iny
109	.fc5d		d0 fb		bne $fc5a	                bne LFC5A
110	.fc5f		e6 01		inc $01		                inc 1
111	.fc61		a0 40		ldy #$40	                ldy #$40        ; '@'
112	.fc63		8c 00 0d	sty $0d00	                sty $d00
113	.fc66		a4 01		ldy $01		                ldy 1
114	.fc68		c0 e0		cpy #$e0	                cpy #$E0        ; ''
115	.fc6a		a8		tay		                tay
116	.fc6b		90 ed		bcc $fc5a	                bcc LFC5A
117	.fc6d		86 fc		stx $fc		                stx TEMPA
118	.fc6f		a9 04		lda #$04	                lda #ACCCON.X
119	.fc71		20 20 80	jsr $8020	                jsr trbACCCON
120	.fc74		d0 dd		bne $fc53	                bne LFC53
121	.fc76		20 5b e5	jsr $e55b	                jsr selectTerminalROM
172	.fc79						nonPowerOnReset:
174	.fc79		ad 58 02	lda $0258	                lda breakAndESCAPEEffect
175	.fc7c		4a		lsr a		                lsr a
176	.fc7d		3a		dec a		                dec a
177	.fc7e		f0 d2		beq $fc52	                beq startClearRAM
179	.fc80		a9 de		lda #$de	                lda #<emptyCommandLine
180	.fc82		8d 04 df	sta $df04	                sta hazel.commandLinePointer+0
181	.fc85		a9 e7		lda #$e7	                lda #>emptyCommandLine
182	.fc87		8d 05 df	sta $df05	                sta hazel.commandLinePointer+1
183	.fc8a		a9 0c		lda #$0c	                lda #ACCCON.Y|ACCCON.X ; page in MOS ROM, page in main
184							                                       ; RAM
186	.fc8c		20 20 80	jsr $8020	                jsr trbACCCON
190	.fc8f		a9 0f		lda #$0f	                lda #$0F
191	.fc91		8d 8e 02	sta $028e	                sta numericKeypadShiftEffect
199	.fc94		a2 01		ldx #$01	                ldx #key_ctrl
201	.fc96		20 92 f5	jsr $f592	                jsr clearTSTAndInterrogateKeyboard
218	.fc99		e0 80		cpx #$80	                cpx #$80        ; C=1 if hard reset
219	.fc9b		20 07 f4	jsr $f407	                jsr updateKeyboardLEDs
220	.fc9e		9c 8d 02	stz $028d	                stz lastBREAKType            ;assume softBREAK
221	.fca1		6a		ror a		                ror a                        ;restore C=1 if hard reset
222	.fca2		a2 9c		ldx #$9c	                ldx #<intervalTimer ; retain TIME, but reset everything else
223	.fca4		a0 8d		ldy #$8d	                ldy #<currentLanguageROM+1 ; reset all the MOS variables
224	.fca6		68		pla		                pla             ; restore initial IER<<1
225	.fca7		f0 09		beq $fcb2	                beq isPowerOnBREAK
226	.fca9						isHardBREAK:
227	.fca9		a0 7e		ldy #$7e	                ldy #<editKeysMode+1 ; assume reset the soft BREAK set
228	.fcab		90 39		bcc $fce6	                bcc L80DF            ; taken if soft reset
229	.fcad		a0 87		ldy #$87	                ldy #<printerIgnoreChar+1 ; hard reset - reset the
230							                                          ; hard BREAK set
231	.fcaf		ee 8d 02	inc $028d	                inc lastBREAKType
232	.fcb2						isPowerOnBREAK:
233	.fcb2		ee 8d 02	inc $028d	                inc lastBREAKType
234	.fcb5		5a		phy		                phy

247	.fcb6		a2 6b		ldx #$6b	                ldx #configureTable.mode.metadata-configureTable
249	.fcb8		20 31 88	jsr $8831	                jsr clearTSTAndReadConfigurationByte

257	.fcbb		09 08		ora #$08	                ora #CMOSBytes.defaults0.shadowMask
258	.fcbd		8d 8f 02	sta $028f	                sta startupOptions
260	.fcc0		20 93 96	jsr $9693	                jsr clearTSTAndReadDefaults3
264	.fcc3		29 10		and #$10	                and #CMOSBytes.defaults3.autoBootMask
265	.fcc5		4a		lsr a		                lsr a         ; Reset OSBYTE 255 boot bit (b3) if BOOT
266	.fcc6		1c 8f 02	trb $028f	                trb startupOptions
268	.fcc9		20 a9 89	jsr $89a9	                jsr clearTSTAndReadDefaultTVSettings
272	.fccc		8c 90 02	sty $0290	                sty tvOffset
273	.fccf		8e 91 02	stx $0291	                stx tvInterlace
275	.fcd2		20 93 96	jsr $9693	                jsr clearTSTAndReadDefaults3
279	.fcd5		29 08		and #$08	                and #CMOSBytes.defaults3.protectedScrollingMask
280	.fcd7		f0 02		beq $fcdb	                beq L80D4
281	.fcd9		a9 01		lda #$01	                lda #VDUVariables.cursorFlags.scrollProtect
282	.fcdb						L80D4:
283	.fcdb		8d 66 03	sta $0366	                sta vduv.cursorFlags
284	.fcde		20 0f 97	jsr $970f	                jsr restoreFont32To255
285	.fce1		7a		ply		                ply             ; restore Y=what is this
286	.fce2		a2 92		ldx #$92	                ldx #<timer0    ; reset everything, TIME included
287	.fce4		80 18		bra $fcfe	                bra initializePage2Loop

289	.fce6						L80DF:
293	.fce6		a9 87		lda #$87	                lda #$87             ; Clear MODE bits from OSBYTE 255
294	.fce8		1c 8f 02	trb $028f	                trb startupOptions
295	.fceb		ad 55 03	lda $0355	                lda vduv.currentScreenMODE ; Get current screen MODE b0-b2
296	.fcee		29 07		and #$07	                and #$07
297	.fcf0		0c 8f 02	tsb $028f	                tsb startupOptions           ; Copy to OSBYTE 255
298	.fcf3		a9 10		lda #$10	                lda #STATE.isShadowMode ; Test shadow screen bit in VDU flags
299	.fcf5		24 d0		bit $d0		                bit STATE                      ; Not shadow screen
300	.fcf7		f0 05		beq $fcfe	                beq initializePage2Loop
301	.fcf9		a9 80		lda #$80	                lda #$80                     ; Set shadow screen bit in OSBYTE 255
302	.fcfb		0c 8f 02	tsb $028f	                tsb startupOptions

304	.fcfe						initializePage2Loop:
305	.fcfe		ad 8d 02	lda $028d	                lda lastBREAKType
306	.fd01		d0 08		bne $fd0b	                bne clearPage2Byte           ;taken unless soft BREAK

308							                ; leave the ROM information table alone on a soft
309							                ; BREAK.
310	.fd03		e0 b1		cpx #$b1	                cpx #<romInformationTable+16
311	.fd05		b0 04		bcs $fd0b	                bcs clearPage2Byte
312	.fd07		e0 a1		cpx #$a1	                cpx #<romInformationTable
313	.fd09		b0 0a		bcs $fd15	                bcs nextPage2Byte
314	.fd0b						clearPage2Byte:
315	.fd0b		9e 00 02	stz $0200,x	                stz $0200,x
316	.fd0e		e0 cd		cpx #$cd	                cpx #$CD        ; how to derive this value??
317	.fd10		90 03		bcc $fd15	                bcc nextPage2Byte
318	.fd12		de 00 02	dec $0200,x	                dec $0200,x                  ;initialize later values to $ff
319	.fd15						nextPage2Byte:
320	.fd15		e8		inx		                inx
321	.fd16		d0 e6		bne $fcfe	                bne initializePage2Loop

324	.fd18		a5 fc		lda $fc		                lda TEMPA

327							                ; Is this a bug? This will clear $CF, part of FS
328							                ; persistent workspace. Surely it should clear all of
329							                ; it or none of it!
330	.fd1a		a2 cf		ldx #$cf	                ldx #$CF
331	.fd1c						initializeZeroPageLoop:
332	.fd1c		74 00		stz $00,x	                stz $00,x
333	.fd1e		e8		inx		                inx
334	.fd1f		d0 fb		bne $fd1c	                bne initializeZeroPageLoop
336	.fd21		85 fc		sta $fc		                sta TEMPA
337	.fd23		20 5b e5	jsr $e55b	                jsr selectTerminalROM

340	.fd26		ad 8d 02	lda $028d	                lda lastBREAKType
341	.fd29		d0 20		bne $fd4b	                bne L813D                    ;taken if not soft BREAK

344	.fd2b		ad 46 02	lda $0246	                lda noignoreState
345	.fd2e		48		pha		                pha
347	.fd2f		ad 4b 02	lda $024b	                lda basicROMNumber
348	.fd32		48		pha		                pha
349	.fd33		ad 44 02	lda $0244	                lda oshwm
350	.fd36		48		pha		                pha
351	.fd37		ad 57 02	lda $0257	                lda spoolFileHandle
352	.fd3a		48		pha		                pha
353	.fd3b		ae 56 02	ldx $0256	                ldx execFileHandle

355	.fd3e						L8130:
356	.fd3e		b9 ea e2	lda $e2ea,y	                lda defaultVectorTable-1,y
357	.fd41		99 ff 01	sta $01ff,y	                sta vectors-1,y
358	.fd44		88		dey		                dey
359	.fd45		c0 21		cpy #$21	                cpy #EVENTV+1-vectors
360	.fd47		b0 f5		bcs $fd3e	                bcs L8130

362	.fd49		a0 12		ldy #$12	                ldy #FILEV-vectors

364	.fd4b						L813D:
365	.fd4b		b9 ea e2	lda $e2ea,y	                lda defaultVectorTable-1,y
366	.fd4e		99 ff 01	sta $01ff,y	                sta vectors-1,y
367	.fd51		88		dey		                dey
368	.fd52		d0 f7		bne $fd4b	                bne L813D

370	.fd54		ad 8d 02	lda $028d	                lda lastBREAKType
371	.fd57		d0 18		bne $fd71	                bne L8164       ; taken if power on or hard BREAK
372	.fd59		8e 56 02	stx $0256	                stx execFileHandle
373	.fd5c		68		pla		                pla                          ;restore *SPOOL file handle
374	.fd5d		c9 04		cmp #$04	                cmp #$04                     ;is it a TAPE or ROM handle?
375	.fd5f		b0 01		bcs $fd62	                bcs L8155                    ;taken if no - keep it

378	.fd61		98		tya		                tya
382	.fd62						L8155:
383	.fd62		8d 57 02	sta $0257	                sta spoolFileHandle
384	.fd65		68		pla		                pla
385	.fd66		8d 44 02	sta $0244	                sta oshwm
386	.fd69		68		pla		                pla
387	.fd6a		8d 4b 02	sta $024b	                sta basicROMNumber
389	.fd6d		68		pla		                pla
390	.fd6e		8d 46 02	sta $0246	                sta noignoreState

393	.fd71						L8164:
395	.fd71		a2 19		ldx #$19	                ldx #cmosBytesOffset+CMOSBytes.defaults1
397	.fd73		20 a0 96	jsr $96a0	                jsr clearTSTAndReadRTCByte
404	.fd76		a2 20		ldx #$20	                ldx #keyboardStatusByte.shiftLockDisengaged
405	.fd78		0a		asl a		                asl a
406	.fd79		0a		asl a		                asl a                        ;N=defaultCapsLockMask
407	.fd7a		30 07		bmi $fd83	                bmi gotKeyboardStatusByte                    ;taken if defaultCapsLock
408	.fd7c		a2 30		ldx #$30	                ldx #keyboardStatusByte.shiftLockDisengaged|keyboardStatusByte.capsLockDisengaged
409	.fd7e		0a		asl a		                asl a                        ;N=defaultNoLockMask
410	.fd7f		30 02		bmi $fd83	                bmi gotKeyboardStatusByte
411	.fd81		a2 a0		ldx #$a0	                ldx #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
412	.fd83						gotKeyboardStatusByte:
413	.fd83		8e 5a 02	stx $025a	                stx keyboardStatusByte
415	.fd86		20 61 f0	jsr $f061	                jsr clearTSTAndResetKeyRepeat
420	.fd89		ad 8d 02	lda $028d	                lda lastBREAKType
421	.fd8c		f0 16		beq $fda4	                beq L8196
423	.fd8e		a2 1c		ldx #$1c	                ldx #cmosBytesOffset+CMOSBytes.printerIgnoreChar
425	.fd90		20 a0 96	jsr $96a0	                jsr clearTSTAndReadRTCByte
432	.fd93		8d 86 02	sta $0286	                sta printerIgnoreChar
434	.fd96		20 71 89	jsr $8971	                jsr clearTSTAndReadUsePrinterIgnoreChar
442	.fd99		6e 46 02	ror $0246	                ror noignoreState

445	.fd9c		a2 9b		ldx #$9b	                ldx #configureTable.print.metadata-configureTable
447	.fd9e		20 31 88	jsr $8831	                jsr clearTSTAndReadConfigurationByte

455	.fda1		8d 85 02	sta $0285	                sta printerDriverType
456	.fda4						L8196:

462	.fda4		a2 19		ldx #$19	                ldx #configureTable.data.metadata-configureTable
464	.fda6		20 31 88	jsr $8831	                jsr clearTSTAndReadConfigurationByte

472	.fda9		0a		asl a		                asl a                        ;
473	.fdaa		0a		asl a		                asl a       ;shift into the control registerword field
474	.fdab		09 42		ora #$42	                ora #ACIA.control.rtsHighTXInterruptDisabled|ACIA.control.counterDivide64
475	.fdad		8d 50 02	sta $0250	                sta aciaControlRegister

478	.fdb0		20 18 aa	jsr $aa18	                jsr resetACIAThenRewriteControlRegister
479	.fdb3		a2 01		ldx #$01	                ldx #$01

512	.fdb5		a9 7f		lda #$7f	                lda #$7F
513	.fdb7						initializeVIAInterruptsLoop:
514	.fdb7		9d 4d fe	sta $fe4d,x	                sta systemVIA.ifr,x
515	.fdba		9d 6d fe	sta $fe6d,x	                sta userVIA.ifr,x
516	.fdbd		ca		dex		                dex
517	.fdbe		10 f7		bpl $fdb7	                bpl initializeVIAInterruptsLoop

533	.fdc0		a2 d2		ldx #$d2	                ldx #$80|VIA.irq.t1|VIA.irq.cb1|VIA.irq.ca1
537	.fdc2		8e 4e fe	stx $fe4e	                stx systemVIA.ier

544	.fdc5		a2 04		ldx #$04	                ldx #VIA.pcr.cb2InputNegativeActiveEdge|VIA.pcr.cb1NegativeActiveEdge|VIA.pcr.ca2InputPositiveEdge|VIA.pcr.ca1NegativeActiveEdge
545	.fdc7		8e 4c fe	stx $fe4c	                stx systemVIA.pcr
546	.fdca		a9 40		lda #$40	                lda #VIA.acr.t1Continuous|VIA.acr.t2Timer|VIA.acr.srDisabled|VIA.acr.pbLatchDisabled|VIA.acr.paLatchDisabled
547	.fdcc		8d 4b fe	sta $fe4b	                sta systemVIA.acr
548	.fdcf		a9 0e		lda #$0e	                lda #$0E
549	.fdd1		8d 46 fe	sta $fe46	                sta systemVIA.t1lL
550	.fdd4		8d 6c fe	sta $fe6c	                sta userVIA.pcr              ;VIA.pcr.cb2InputNegativeActiveEdge|VIA.pcr.cb1NegativeActiveEdge|VIA.pcr.ca2HighOutput|VIA.pcr.ca1NegativeActiveEdge
552	.fdd7		8d 18 fe	sta $fe18	                sta HADC.status
556	.fdda		a9 27		lda #$27	                lda #$27
557	.fddc		8d 47 fe	sta $fe47	                sta systemVIA.t1lH
558	.fddf		8d 45 fe	sta $fe45	                sta systemVIA.t1cH

561	.fde2		20 f5 fe	jsr $fef5	                jsr clearAllSoundChannelBuffers

572	.fde5		20 25 f6	jsr $f625	                jsr clearTSTAndOSBYTE7A
576	.fde8		86 ed		stx $ed		                stx firstKeyPressedInternal
577	.fdea		a2 00		ldx #$00	                ldx #$00
581	.fdec		20 48 e9	jsr $e948	                jsr purgeBuffer

584	.fdef		ad 82 02	lda $0282	                lda serialULARegister
585	.fdf2		29 7f		and #$7f	                and #$7F
586	.fdf4		20 cc eb	jsr $ebcc	                jsr LEC89

589	.fdf7		a2 07		ldx #$07	                ldx #configureTable.baud.metadata-configureTable
591	.fdf9		20 31 88	jsr $8831	                jsr clearTSTAndReadConfigurationByte

599	.fdfc		48		pha		                pha
600	.fdfd		aa		tax		                tax
601	.fdfe		20 ae eb	jsr $ebae	                jsr osbyte08
602	.fe01		fa		plx		                plx
603	.fe02		a9 07		lda #$07	                lda #$07
604	.fe04		20 b0 eb	jsr $ebb0	                jsr osbyte07

608	.fe07		20 93 96	jsr $9693	                jsr clearTSTAndReadDefaults3
612	.fe0a		89 02		bit #$02	                bit #CMOSBytes.defaults3.loudMask
613	.fe0c		d0 05		bne $fe13	                bne L8211
614	.fe0e		a9 f0		lda #$f0	                lda #$F0
615	.fe10		8d 64 02	sta $0264	                sta bellSound
616	.fe13						L8211:

645	.fe13		ae 84 02	ldx $0284	                ldx softKeyConsistencyFlag
646	.fe16		f0 03		beq $fe1b	                beq checkResetType
647	.fe18		20 7c f0	jsr $f07c	                jsr osbyte12
648	.fe1b						checkResetType:
649	.fe1b		ad 8d 02	lda $028d	                lda lastBREAKType
650	.fe1e		f0 53		beq $fe73	                beq romsScanned                    ;taken if soft BREAK

653	.fe20						scanROMs: .block
654							                .include "scan_roms.s65"

:20	;******  Processing file: src/scan_roms.s65

1	.fe20		8a		txa		                txa               ;A = ROM of interest
2	.fe21		a8		tay		                tay               ;Y = ROM of interest
7	.fe22		20 ae e3	jsr $e3ae	                jsr isROMValid
8	.fe25		90 2c		bcc $fe53	                bcc currentROMInvalid        ;taken if ROM invalid
9	.fe27		a6 f4		ldx $f4		                ldx $F4                      ;start from current ROM
10	.fe29		a4 f4		ldy $f4		                ldy $F4                      ;start from current ROM
24	.fe2b						nextOtherROM:
25	.fe2b		c8		iny		                iny                          ;next other ROM
26	.fe2c		c0 10		cpy #$10	                cpy #$10                     ;out of other ROMs?
27	.fe2e		b0 27		bcs $fe57	                bcs currentROMValid       ;taken if no more other ROMs
33	.fe30		64 fa		stz $fa		                stz SEIWKA
34	.fe32		a9 80		lda #$80	                lda #$80        ; ''
35	.fe34		85 fb		sta $fb		                sta SEIWKA+1
45	.fe36						compareLoop:
46	.fe36		8c 30 fe	sty $fe30	                sty ROMSEL                   ;select other ROM
48	.fe39		b2 fa		lda ($fa)	                lda (SEIWKA)
52	.fe3b		8e 30 fe	stx $fe30	                stx ROMSEL                   ;select ROM
54	.fe3e		d2 fa		cmp ($fa)	                cmp (SEIWKA)
58	.fe40		d0 e9		bne $fe2b	                bne nextOtherROM             ;taken if other ROM is good
59	.fe42		e6 fa		inc $fa		                inc SEIWKA+0
60	.fe44		d0 f0		bne $fe36	                bne compareLoop
61	.fe46		e6 fb		inc $fb		                inc SEIWKA+1
62	.fe48		a5 fb		lda $fb		                lda SEIWKA+1
69	.fe4a		c9 84		cmp #$84	                cmp #$84                  ;compare only the first 1 KB
70	.fe4c		90 e8		bcc $fe36	                bcc compareLoop
71							                ; The first 1 KB of the current ROM matches the first
72							                ; 1 KB of some higher-priority ROM, so the current ROM
73							                ; is invalid.
75	.fe4e		a9 01		lda #$01	                lda #1
76	.fe50		9d a1 02	sta $02a1,x	                sta romInformationTable,x

79	.fe53						currentROMInvalid:
80	.fe53		a6 f4		ldx $f4		                ldx $F4
81	.fe55		80 14		bra $fe6b	                bra nextROM

83	.fe57						currentROMValid:
85	.fe57		8a		txa		                txa
86	.fe58		a8		tay		                tay
88	.fe59		20 9c e3	jsr $e39c	                jsr clearTSTAndLE389
92	.fe5c		90 0d		bcc $fe6b	                bcc nextROM
94	.fe5e		ad 06 80	lda $8006	                lda sidewaysROMType
95	.fe61		9d a1 02	sta $02a1,x	                sta romInformationTable,x
96	.fe64		29 8f		and #$8f	                and #$8F
97	.fe66		d0 03		bne $fe6b	                bne nextROM       ;taken if any mandatory bits are set

99							                ; A bogus ROM type means this ROM is the BASIC ROM.

105	.fe68		8e 4b 02	stx $024b	                stx basicROMNumber

107	.fe6b						nextROM:
108	.fe6b		e8		inx		                inx
109	.fe6c		e0 10		cpx #$10	                cpx #$10
110	.fe6e		90 b0		bcc $fe20	                bcc scanROMs
111	.fe70		20 5b e5	jsr $e55b	                jsr selectTerminalROM

:19	;******  Return to file: src/reset.s65

655							                .endblock

660	.fe73						romsScanned:
661	.fe73		ad 8f 02	lda $028f	                lda startupOptions
662	.fe76		20 98 c7	jsr $c798	                jsr setStartupMODE
663	.fe79		ad 8d 02	lda $028d	                lda lastBREAKType ; $00=soft; $01=power-on; $02=hard
664	.fe7c		3a		dec a		                dec a             ; $ff=soft; $00=power-on; $01=hard
669	.fe7d		d0 33		bne $feb2	                bne softReset                    ;taken if not power-on reset

672	.fe7f						powerOnReset:
690	.fe7f						checkForNVRAMReset:

714	.fe7f		a5 ed		lda $ed		                lda firstKeyPressedInternal
716	.fe81						checkForResetKey:
717	.fe81		c9 33		cmp #$33	                cmp #key_r
718	.fe83		d0 2d		bne $feb2	                bne softReset                    ;taken if R not pressed

724							                ; Reset CMOS RAM
725	.fe85						resetCMOSRAM:
726	.fe85		a2 31		ldx #$31	                ldx #size(RTC.ram)-1
727	.fe87						resetCMOSRAMLoop:
728	.fe87		da		phx		                phx
729	.fe88		a0 00		ldy #$00	                ldy #$00
731	.fe8a		e0 11		cpx #$11	                cpx #cmosBytesSize
732	.fe8c		b0 03		bcs $fe91	                bcs LFE91
733	.fe8e		bc a1 fe	ldy $fea1,x	                ldy LFEA2-1,x
734	.fe91						LFE91:
736	.fe91		20 c8 96	jsr $96c8	                jsr writeCMOSByte
737	.fe94		fa		plx		                plx
738	.fe95		ca		dex		                dex
740	.fe96		d0 ef		bne $fe87	                bne resetCMOSRAMLoop

769	.fe98		20 26 e5	jsr $e526	                jsr LE525

803	.fe9b		a9 03		lda #$03	                lda #$03
804	.fe9d		8d 58 02	sta $0258	                sta breakAndESCAPEEffect
805	.fea0						hang:
806	.fea0		80 fe		bra $fea0	                bra hang

808							;-------------------------------------------------------------------------

811	.fea2						LFEA2:
812							                .include "default_nvram_contents.s65"

:21	;******  Processing file: src/default_nvram_contents.s65

1							; Excludes econet station number.

3							; fileServerStationNumber
4	>fea2		fe				                .byte $fe

6							; fileServerNetworkNumber
7	>fea3		00				                .byte $00

9							; printerServerStationNumber
10	>fea4		eb				                .byte $eb

12							; printerServerNetworkNumber
13	>fea5		00				                .byte $00

15							; defaultROMs
21	>fea6		cd				                .byte 12<<CMOSBytes.defaultROMs.languageShift|13<<CMOSBytes.defaultROMs.fsShift

24							; insertedROMs
25	>fea7		ff				                .byte $FF       ; insertedROMs 8-15
26	>fea8		ff				                .byte $FF       ; insertedROMs 0-7

28							; editROMByte
32	>fea9		15				                .byte $15

35							; telecommsByte
36	>feaa		00				                .byte 0

38							; defaults0
44	>feab		17				                .byte 7<<CMOSBytes.defaults0.modeShift|CMOSBytes.defaults0.interlaceMask|0<<CMOSBytes.defaults0.tvShift

47							; defaults1
51	>feac		60				                .byte CMOSBytes.defaults1.adfsLoadDirMask|CMOSBytes.defaults1.capsLockMask

54							; keyboardAutoRepeatDelay
58	>fead		32				                .byte $32

61							; keyboardAutoRepeatRate
62	>feae		08				                .byte 8

64							; printerIgnoreChar
65	>feaf		0a				                .byte $A

67							; defaults2
73	>feb0		2d				                .byte 1<<CMOSBytes.defaults2.fx5SettingShift|3<<CMOSBytes.defaults2.serialBaudRateIndexShift|CMOSBytes.defaults2.tubeOnMask ; defaults2

78							; defaults3
82	>feb1		82				                .byte 4<<CMOSBytes.defaults3.serialDataFormatShift|CMOSBytes.defaults3.loudMask

85							; unknown11

90							; joystick

97							; country

104							; defaults4

113							; defaults5

:19	;******  Return to file: src/reset.s65

813							                .cwarn *-LFEA2!=cmosBytesSize-1

817							;-------------------------------------------------------------------------

819	.feb2						softReset:
821	.feb2		a9 08		lda #$08	                lda #ACCCON.Y
822	.feb4		20 27 80	jsr $8027	                jsr tsbACCCON
830	.feb7		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
831	.feba		9c d5 df	stz $dfd5	                stz hazel.moveDestHandle
832	.febd		a0 ca		ldy #$ca	                ldy #$CA
834	.febf		20 43 ea	jsr $ea43	                jsr clearTSTAndInsertCharacterIntoKeyboardBuffer
839	.fec2		20 cc f2	jsr $f2cc	                jsr clearTSTAndOSBYTE247EntryPoint
843	.fec5		ad 8d 02	lda $028d	                lda lastBREAKType
844	.fec8		f0 03		beq $fecd	                beq L829D
848	.feca		20 07 ed	jsr $ed07	                jsr LEDD0
850	.fecd						L829D:
853	.fecd		20 8c 96	jsr $968c	                jsr clearTSTAndReadDefaults2
857	.fed0		4a		lsr a		                lsr a
858	.fed1		90 1f		bcc $fef2	                bcc continueSoftReset

861	.fed3		20 93 96	jsr $9693	                jsr clearTSTAndReadDefaults3

867	.fed6		4a		lsr a		                lsr a
868	.fed7		4a		lsr a		                lsr a
869	.fed8		4a		lsr a		                lsr a
870	.fed9		a9 10		lda #$10	                lda #ACCCON.ITU
871	.fedb		20 20 80	jsr $8020	                jsr trbACCCON
872	.fede		b0 03		bcs $fee3	                bcs L82B4
873	.fee0		20 27 80	jsr $8027	                jsr tsbACCCON
883	.fee3						L82B4:
887	.fee3		20 68 80	jsr $8068	                jsr isSecondProcessorPresent
889	.fee6		b0 0a		bcs $fef2	                bcs foundTube

892	.fee8		a5 fc		lda $fc		                lda TEMPA
896	.feea		49 10		eor #$10	                eor #ACCCON.ITU
898	.feec		20 96 e3	jsr $e396	                jsr staTEMPAAndACCCON

903							                ; Don't do a timed version for the other Tube. If the
904							                ; preferred one times out, the delay for the other one
905							                ; is covered.
906	.feef		20 68 80	jsr $8068	                jsr isSecondProcessorPresent

:15	;******  Return to file: src/mos.s65

14038	.fef2						foundTube:
14039	.fef2						continueSoftReset:
14040	.fef2		4c 8d 80	jmp $808d	                jmp softResetPart2
14041							                .endblock

14048							;-------------------------------------------------------------------------

14050	.fef5						clearAllSoundChannelBuffers: .block
14051	.fef5		a2 08		ldx #$08	                ldx #8
14052	.fef7						loop:
14053	.fef7		ca		dex		                dex
14054	.fef8		20 b3 f3	jsr $f3b3	                jsr clearSoundChannelBuffer
14055	.fefb		e0 04		cpx #$04	                cpx #4
14056	.fefd		d0 f8		bne $fef7	                bne loop
14057	.feff		60		rts		                rts
14058							                .endblock

14060	>ff00						                .fill $ff00-*

14062							;-------------------------------------------------------------------------

14238							;-------------------------------------------------------------------------

14240	.ff00						E_USERV: ; ff00
14241	.ff00		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14242	.ff03						E_BRKV: ; ff03
14243	.ff03		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14244	.ff06						E_IRQ1V: ; ff06
14245	.ff06		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14246	.ff09						E_IRQ2V: ; ff09
14247	.ff09		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14248	.ff0c						E_CLIV: ; ff0c
14249	.ff0c		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14250	.ff0f						E_BYTEV: ; ff0f
14251	.ff0f		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14252	.ff12						E_WORDV: ; ff12
14253	.ff12		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14254	.ff15						E_WRCHV: ; ff15
14255	.ff15		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14256	.ff18						E_RDCHV: ; ff18
14257	.ff18		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14258	.ff1b						E_FILEV: ; ff1b
14259	.ff1b		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14260	.ff1e						E_ARGSV: ; ff1e
14261	.ff1e		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14262	.ff21						E_BGETV: ; ff21
14263	.ff21		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14264	.ff24						E_BPUTV: ; ff24
14265	.ff24		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14266	.ff27						E_GBPBV: ; ff27
14267	.ff27		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14268	.ff2a						E_FINDV: ; ff2a
14269	.ff2a		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14270	.ff2d						E_FSCV: ; ff2d
14271	.ff2d		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14272	.ff30						E_EVENTV: ; ff30
14273	.ff30		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14274	.ff33						E_UPTV: ; ff33
14275	.ff33		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14276	.ff36						E_NETV: ; ff36
14277	.ff36		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14278	.ff39						E_VDUV: ; ff39
14279	.ff39		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14280	.ff3c						E_KEYV: ; ff3c
14281	.ff3c		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14282	.ff3f						E_INSV: ; ff3f
14283	.ff3f		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14284	.ff42						E_REMV: ; ff42
14285	.ff42		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14286	.ff45						E_CNPV: ; ff45
14287	.ff45		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14288	.ff48						E_IND1V: ; ff48
14289	.ff48		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14290	.ff4b						E_IND2V: ; ff4b
14291	.ff4b		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
14292	.ff4e						E_IND3V: ; ff4e
14293	.ff4e		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint

14295							;-------------------------------------------------------------------------

14297	.ff51						extendedVectorEntryPoint:
14298							                ; .if CFA3000
14299							                ; ;...
14300							                ; .else
14301							                ; $10b,x = rL
14302	.ff51		48		pha		                pha                 ; $10a,x  (old ROMSEL)
14303	.ff52		48		pha		                pha                 ; $109,x  (old ACCCON)
14304	.ff53		48		pha		                pha                 ; $108,x  (thunk rH)
14305	.ff54		48		pha		                pha                 ; $107,x  (thunk rL)
14306	.ff55		48		pha		                pha                 ; $106,x  (jump dest MSB)
14307	.ff56		48		pha		                pha                 ; $105,x  (jump dest LSB)
14308	.ff57		08		php		                php                 ; $104,x  (P for RTI)
14309	.ff58		48		pha		                pha                 ; $103,x  (old A)
14310	.ff59		da		phx		                phx                 ; $102,x  (old X)
14311	.ff5a		5a		phy		                phy                 ; $101,x  (old Y)
14312	.ff5b		ba		tsx		                tsx
14313	.ff5c		a9 ff		lda #$ff	                lda #>extendedVectorReturnThunk-1
14314	.ff5e		9d 08 01	sta $0108,x	                sta $0108,x
14315	.ff61		a9 8c		lda #$8c	                lda #<extendedVectorReturnThunk-1
14316	.ff63		9d 07 01	sta $0107,x	                sta $0107,x

14318							                ; this routine is only ever called from $ff00, $ff03,
14319							                ; $ff06, etc. - so rL holds vectorIndex*3+2, suitable
14320							                ; for indexing into the extended vector space.
14321	.ff66		bc 0b 01	ldy $010b,x	                ldy $010B,x                  ;Y=vectorIndex*3+2
14322	.ff69		b9 9d 0d	lda $0d9d,y	                lda extendedVectorSpace-2,y  ;get vector LSB
14323	.ff6c		9d 05 01	sta $0105,x	                sta $0105,x                  ;
14324	.ff6f		b9 9e 0d	lda $0d9e,y	                lda extendedVectorSpace-1,y  ;get vector MSB
14325	.ff72		9d 06 01	sta $0106,x	                sta $0106,x
14326	.ff75		a5 f4		lda $f4		                lda $F4
14327	.ff77		9d 0a 01	sta $010a,x	                sta $010A,x
14328	.ff7a		ad 34 fe	lda $fe34	                lda ACCCON
14329	.ff7d		9d 09 01	sta $0109,x	                sta $0109,x

14331							                ; New stack layout:
14332							                ;
14333							                ; $10a,x - old ROMSEL
14334							                ; $109,x - old ACCCON
14335							                ; $108,x - thunk rH
14336							                ; $107,x - thunk rL
14337							                ; $106,x - jump dest MSB
14338							                ; $105,x - jump dest LSB
14339							                ; $104,x - P (for RTI)
14340							                ; $103,x - old A
14341							                ; $102,x - old X
14342							                ; $101,x - old Y

14344	.ff80		20 f1 ec	jsr $ecf1	                jsr selectHAZEL
14345	.ff83		b9 9f 0d	lda $0d9f,y	                lda extendedVectorSpace,y    ;get vector ROM number
14346	.ff86		20 5d e5	jsr $e55d	                jsr selectROMA
14347	.ff89		7a		ply		                ply
14348	.ff8a		fa		plx		                plx
14349	.ff8b		68		pla		                pla
14350	.ff8c		40		rti		                rti
14351							;                .endif

14353							;-------------------------------------------------------------------------

14355	.ff8d						extendedVectorReturnThunk:
14356	.ff8d		08		php		                php
14357	.ff8e		48		pha		                pha
14358	.ff8f		da		phx		                phx
14359	.ff90		ba		tsx		                tsx
14360	.ff91		bd 02 01	lda $0102,x	                lda $0102,x
14361	.ff94		9d 06 01	sta $0106,x	                sta $0106,x
14362	.ff97		bd 03 01	lda $0103,x	                lda $0103,x
14363	.ff9a		9d 07 01	sta $0107,x	                sta $0107,x
14364	.ff9d		fa		plx		                plx
14365	.ff9e		68		pla		                pla
14366	.ff9f		68		pla		                pla
14367	.ffa0		68		pla		                pla
14368	.ffa1		20 e7 ec	jsr $ece7	                jsr selectMOSOrHAZEL
14369	.ffa4		68		pla		                pla
14370	.ffa5		20 5d e5	jsr $e55d	                jsr selectROMA
14371	.ffa8		68		pla		                pla
14372	.ffa9		28		plp		                plp
14373	.ffaa						rtsFFAA:
14374	.ffaa		60		rts		                rts

14376							;-------------------------------------------------------------------------
14377							;
14378							; OSBYTE 150 (&96) Read from SHEILA (&FE00 - &FEFF) [MasRef D.2-45]
14379							;
14380	.ffab						osbyte96:
14381	.ffab		bc 00 fe	ldy $fe00,x	                ldy $fe00,x
14382	.ffae		60		rts		                rts

14384							;-------------------------------------------------------------------------
14385							;
14386							; OSBYTE 157 (&9D) Write byte across Tube [MasRef D.2-48]
14387							;
14388	.ffaf						osbyte9D:
14389	.ffaf		8a		txa		                txa
14390	.ffb0		80 22		bra $ffd4	                bra OSBPUT

14392	.ffb2		00		brk #		                brk

14394							;-------------------------------------------------------------------------
14395	.ffb3						OSWRSC:
14396	.ffb3		4c a6 f3	jmp $f3a6	                jmp oswrscEntryPoint ; FFB3
14397	>ffb6		36				                .byte defaultVectorTable.end-defaultVectorTable ;
14398	>ffb7		eb e2				                .word defaultVectorTable ;
14399	.ffb9						OSRDSC:
14400	.ffb9		4c a0 f3	jmp $f3a0	                jmp osrdscEntryPoint ; FFB9
14401	.ffbc						VDUCHR:
14402	.ffbc		4c 90 f3	jmp $f390	                jmp vduChrEntryPoint ; FFBC
14403	.ffbf						OSEVEN:
14404	.ffbf		4c ed e9	jmp $e9ed	                jmp eventEntryPoint ; FFBF
14405	.ffc2						GSINIT:
14406	.ffc2		4c d8 f1	jmp $f1d8	                jmp gsinitEntryPoint ; FFC2
14407	.ffc5						GSREAD:
14408	.ffc5		4c e9 f1	jmp $f1e9	                jmp gsreadEntryPoint ; FFC5
14409	.ffc8						NVRDCH:
14410	.ffc8		4c 89 e7	jmp $e789	                jmp osrdchEntryPoint                    ; FFC8
14411	.ffcb						NVWRCH:
14412	.ffcb		4c ef e7	jmp $e7ef	                jmp oswrchEntryPoint                    ; FFCB
14413	.ffce						OSFIND:
14414	.ffce		4c 4e f7	jmp $f74e	                jmp osfindEntryPoint                    ; FFCE
14415	.ffd1						OSGBPB:
14416	.ffd1		4c f1 f6	jmp $f6f1	                jmp osgbpbEntryPoint                    ; FFD1
14417	.ffd4						OSBPUT:
14418	.ffd4		4c e5 f6	jmp $f6e5	                jmp osbputEntryPoint                    ; FFD4
14419	.ffd7						OSBGET:
14420	.ffd7		4c eb f6	jmp $f6eb	                jmp osbgetEntryPoint                    ; FFD7
14421	.ffda						OSARGS:
14422	.ffda		4c 1a f7	jmp $f71a	                jmp osargsEntryPoint ; FFDA
14423	.ffdd						OSFILE:
14424	.ffdd		4c 5d f7	jmp $f75d	                jmp osfileEntryPoint ; FFDD
14425	.ffe0						OSRDCH:
14426	.ffe0		6c 10 02	jmp ($0210)	                jmp (RDCHV)                  ; FFE0
14427	.ffe3						OSASCI:
14428	.ffe3		c9 0d		cmp #$0d	                cmp #$0D                     ; FFE3
14429	.ffe5		d0 07		bne $ffee	                bne OSWRCH                   ; FFE5
14430	.ffe7						OSNEWL:
14431	.ffe7		a9 0a		lda #$0a	                lda #$0A                     ; FFE7
14432	.ffe9		20 ee ff	jsr $ffee	                jsr OSWRCH                   ; FFE9
14433	.ffec						printCR:
14434							                ; not an official entry point, but saves 2 bytes if
14435							                ; you just want to print a 13.
14436	.ffec		a9 0d		lda #$0d	                lda #$0D                     ; FFEC
14437	.ffee						OSWRCH:
14438	.ffee		6c 0e 02	jmp ($020e)	                jmp (WRCHV)                  ; FFEE
14439	.fff1						OSWORD:
14440	.fff1		6c 0c 02	jmp ($020c)	                jmp (WORDV)                  ; FFF1
14441	.fff4						OSBYTE:
14442	.fff4		6c 0a 02	jmp ($020a)	                jmp (BYTEV)                  ; FFF4
14443	.fff7						OSCLI:
14444	.fff7		6c 08 02	jmp ($0208)	                jmp (CLIV)                  ; FFF7

14446	.fffa						LFFFA:                                       ; FFFA NMIV
14447	>fffa		00 0d				                .word nmiEntryPoint
14448	.fffc						LFFFC:                                       ; FFFB RESETV
14449	>fffc		78 e3				                .word resetEntryPoint
14450	.fffe						LFFFE:                                       ; FFFE IRQV
14451	>fffe		69 e5				                .word irqEntryPoint

:1	;******  Return to file: mos329.s65

39							                .endsection

;******  End of listing