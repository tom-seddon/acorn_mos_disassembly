
; 64tass Turbo Assembler Macro V1.59.3120+ listing file
; 64tass --m65c02 --nostart -Wall -q --case-sensitive --line-numbers --verbose-list -Lbuild/mos400.lst --output-section mos -o build/400/mos.rom --output-section utils -o build/400/utils.rom mos400.s65
; Wed Nov 15 16:53:59 2023

;Line	;Offset	;PC	;Hex		;Monitor	;Source

:1	;******  Processing input file: mos400.s65

1							                .include "src/hardware.s65"

:2	;******  Processing file: src/hardware.s65

1							;-------------------------------------------------------------------------

3							                .virtual $fe00

5	.fe00						CRTC: .block

7							                .virtual 8
8	.0008						R8: .block
9	=$00						normalSync=%00000000
10	=$01						interlaceSync=%00000001
11	=$02						normalSyncAlt=%00000010
12	=$03						interlaceSyncAndVideo=%00000011

14	=0						displayDelay0=0<<4
15	=16						displayDelay1=1<<4
16	=32						displayDelay2=2<<4
17	=48						displayDisable=3<<4

19	=0						cursorDelay0=0<<6
20	=64						cursorDelay1=1<<6
21	=128						cursorDelay2=2<<6
22	=192						cursorDisable=3<<6
23							                .endblock
24							                .endvirtual

26							                .virtual 10
27	.000a						R10: .block
28	=$40						blink=$40
29	=$20						slowBlink=$20
30							                .endblock
31							                .endvirtual

33							                .endblock

35							                .endvirtual

37							;-------------------------------------------------------------------------
38							; ACIA=$fe08
39	=$fe10						SERPROC=$fe10
40							;HADC=$fe18
41	=$fee0						TUBE=$fee0
42	=$fe30						ROMSEL=$fe30
43							;ACCCON=$fe34
44							                .virtual $fe20
45	.fe20						VCONTROL: .block
46	=$01						flash=$01
47	=$02						isTeletext=$02
48	=$00						shift2MHz=$00
49	=$04						shift4MHz=$04
50	=$08						shift8MHz=$08
51	=$0c						shift16MHz=$0c
52	=$00						crtc1MHz=$00
53	=$10						crtc2MHz=$10
54	=$00						cursor____=$00
55	=$20						cursor__XX=$20
56	=$40						cursor_X__=$40
57	=$60						cursor_XXX=$60
58	=$80						cursorX___=$80
59	=$a0						cursorX_XX=$a0
60	=$c0						cursorXX__=$c0
61	=$e0						cursorXXXX=$e0
62							                .endblock
63							                .endvirtual
64	=$fe21						VPALETTE=$fe21

66							;-------------------------------------------------------------------------

68							                .virtual $fe08
69	.fe08						ACIA: .block

71	.fe08						control: .block
72	=0						counterDivide1=0<<0
73	=1						counterDivide16=1<<0
74	=2						counterDivide64=2<<0
75	=3						reset=3<<0

77	=0						word7DataEventParity2Stop=0<<2
78	=4						word7DataOddParity2Stop=1<<2
79	=8						word7DataEvenParity1Stop=2<<2
80	=12						word7DataOddParity1Stop=3<<2
81	=16						word8DataNoParity2Stop=4<<2
82	=20						word8DataNoParity1Stop=5<<2
83	=24						word8DataEvenParity1Stop=6<<2
84	=28						word8DataOddParity1Stop=7<<2

86	=0						rtsLowTXInterruptDisabled=0<<5
87	=32						rtsLowTXInterruptEnabled=1<<5
88	=64						rtsHighTXInterruptDisabled=2<<5
89	=96						rtsLowBreakTXInterruptDisabled=3<<5

91	=0						rtsRXInterruptDisabled=0<<7
92	=128						rtsRTSInterruptEnabled=1<<7

94							                .endblock
95	.fe08						status: .block
96							                .endblock

98	>fe08						                .fill 1
99	.fe09						tdr:
100	.fe09						rdr:
101	>fe09						                .fill 1
102							                .endblock
103							                .endvirtual

105							;-------------------------------------------------------------------------

107							                .virtual $fe18
108	.fe18						HADC: .block
109	.fe18						status: .block
110							                .endblock
111	.fe18						latch: .block
112							                .endblock
113	>fe18						                .fill 1

115							                .endblock
116							                .endvirtual

118							;-------------------------------------------------------------------------

120							                .virtual $fe34
121	.fe34						ACCCON: .block
122							;D=1 = display shadow RAM; D=0 = display main RAM
123	=$01						D=$01

125							;E=1 = VDU code ($c000-$dfff in MOS ROM) accesses shadow RAM; E=0 =
126							;VDU code accesses main RAM
127	=$02						E=$02

129							;X=1 = shadow RAM at $3000; X=0 = main RAM at $3000
130	=$04						X=$04

132							;Y=1 = HAZEL at $c000; Y=0 = MOS ROM at $c000
133	=$08						Y=$08

135							;ITU=1 = access internal Tube; ITU=0 = access external Tube
136	=$10						ITU=$10

138							;IFJ=1 = $fc00...$fdff accesses cartridge; IFJ=0 = $fc00...$fdff
139							;accesses 1MHz bus
140	=$20						IFJ=$20

142							; TST=1 = read MOS ROM at $fc00...$feff; TST=0 = read I/O at
143							; $fc00...$feff
144	=$40						TST=$40

146							;IRR=1 = IRQ to CPU
147	=$80						IRR=$80
148							                .bend
149							                .endv

151							                VIA: .struct                    ;
152	.0000						orb:
153	.0000						irb:
154	>0000						                .fill 1         ;0
155	.0001						ora:
156	.0001						ira:
157	>0001						                .fill 1         ;1
158	.0002						ddrb:
159	>0002						                .fill 1         ;2
160	.0003						ddra:
161	>0003						                .fill 1         ;3
162	.0004						t1cL:
163	>0004						                .fill 1         ;4
164	.0005						t1cH:
165	>0005						                .fill 1         ;5
166	.0006						t1lL:
167	>0006						                .fill 1         ;6
168	.0007						t1lH:
169	>0007						                .fill 1         ;7
170	.0008						t2cL:
171	>0008						                .fill 1         ;8
172	.0009						t2cH:
173	>0009						                .fill 1         ;9
174	.000a						sr:
175	>000a						                .fill 1         ;10
176	.000b						acr: .block
177	=0						t1OneShot=0<<6
178	=64						t1Continuous=1<<6
179	=128						t1OneShotPB7=2<<6
180	=192						t1ContinuousPB7=3<<6

182	=0						t2Timer=0<<5
183	=32						t2CountPB6=1<<5

185	=0						srDisabled=0<<2
186	=4						srShiftInT2=1<<2
187	=8						srShiftInVIAClock=2<<2
188	=12						srShiftInExtClock=3<<2
189	=16						srShiftOutT2FreeRun=4<<2
190	=20						srShiftOutT2=5<<2
191	=24						srShiftOutVIAClock=6<<2
192	=28						srShiftOutExtClock=7<<2

194	=0						pbLatchDisabled=0<<1
195	=2						pbLatchEnabled=1<<1

197	=0						paLatchDisabled=0<<0
198	=1						paLatchEnabled=1<<0

200	>000b						                .fill 1         ;11
201							                .endblock
202	.000c						pcr: .block

204	=0						cb2InputNegativeActiveEdge=0<<5
205	=32						cb2IndependentInterruptInputNegativeEdge=1<<5
206	=64						cb2InputPositiveEdge=2<<5
207	=96						cb2IndependentInterruptInputPositiveEdge=3<<5
208	=128						cb2HandshakeOutput=4<<5
209	=160						cb2PulseOutput=5<<5
210	=192						cb2LowOutput=6<<5
211	=224						cb2HighOutput=7<<5

213	=0						cb1NegativeActiveEdge=0<<4
214	=16						cb1PositiveActiveEdge=1<<4

216	=0						ca2InputNegativeActiveEdge=0<<1
217	=2						ca2IndependentInterruptInputNegativeEdge=1<<1
218	=4						ca2InputPositiveEdge=2<<1
219	=6						ca2IndependentInterruptInputPositiveEdge=3<<1
220	=8						ca2HandshakeOutput=4<<1
221	=10						ca2PulseOutput=5<<1
222	=12						ca2LowOutput=6<<1
223	=14						ca2HighOutput=7<<1

225	=0						ca1NegativeActiveEdge=0<<0
226	=1						ca1PositiveActiveEdge=1<<0

228	>000c						                .fill 1         ;12
229							                .endblock
230	.000d						ifr:
231	>000d						                .fill 1         ;13
232	.000e						ier:
233	>000e						                .fill 1         ;14
234	.000f						oraNoHandshake:
235	.000f						iraNoHandshake:
236	>000f						                .fill 1         ;15

238	.0010						irq: .block
239	=1						ca2=1
240	=2						ca1=2
241	=4						sr=4
242	=8						cb2=8
243	=16						cb1=16
244	=32						t2=32
245	=64						t1=64
246							                .endblock
247							                .ends

249							                                .virtual $fe40
250	.fe40						systemVIA: .dstruct VIA
152	.fe40						orb:
153	.fe40						irb:
154	>fe40						                .fill 1         ;0
155	.fe41						ora:
156	.fe41						ira:
157	>fe41						                .fill 1         ;1
158	.fe42						ddrb:
159	>fe42						                .fill 1         ;2
160	.fe43						ddra:
161	>fe43						                .fill 1         ;3
162	.fe44						t1cL:
163	>fe44						                .fill 1         ;4
164	.fe45						t1cH:
165	>fe45						                .fill 1         ;5
166	.fe46						t1lL:
167	>fe46						                .fill 1         ;6
168	.fe47						t1lH:
169	>fe47						                .fill 1         ;7
170	.fe48						t2cL:
171	>fe48						                .fill 1         ;8
172	.fe49						t2cH:
173	>fe49						                .fill 1         ;9
174	.fe4a						sr:
175	>fe4a						                .fill 1         ;10
176	.fe4b						acr: .block
177	=0						t1OneShot=0<<6
178	=64						t1Continuous=1<<6
179	=128						t1OneShotPB7=2<<6
180	=192						t1ContinuousPB7=3<<6

182	=0						t2Timer=0<<5
183	=32						t2CountPB6=1<<5

185	=0						srDisabled=0<<2
186	=4						srShiftInT2=1<<2
187	=8						srShiftInVIAClock=2<<2
188	=12						srShiftInExtClock=3<<2
189	=16						srShiftOutT2FreeRun=4<<2
190	=20						srShiftOutT2=5<<2
191	=24						srShiftOutVIAClock=6<<2
192	=28						srShiftOutExtClock=7<<2

194	=0						pbLatchDisabled=0<<1
195	=2						pbLatchEnabled=1<<1

197	=0						paLatchDisabled=0<<0
198	=1						paLatchEnabled=1<<0

200	>fe4b						                .fill 1         ;11
201							                .endblock
202	.fe4c						pcr: .block

204	=0						cb2InputNegativeActiveEdge=0<<5
205	=32						cb2IndependentInterruptInputNegativeEdge=1<<5
206	=64						cb2InputPositiveEdge=2<<5
207	=96						cb2IndependentInterruptInputPositiveEdge=3<<5
208	=128						cb2HandshakeOutput=4<<5
209	=160						cb2PulseOutput=5<<5
210	=192						cb2LowOutput=6<<5
211	=224						cb2HighOutput=7<<5

213	=0						cb1NegativeActiveEdge=0<<4
214	=16						cb1PositiveActiveEdge=1<<4

216	=0						ca2InputNegativeActiveEdge=0<<1
217	=2						ca2IndependentInterruptInputNegativeEdge=1<<1
218	=4						ca2InputPositiveEdge=2<<1
219	=6						ca2IndependentInterruptInputPositiveEdge=3<<1
220	=8						ca2HandshakeOutput=4<<1
221	=10						ca2PulseOutput=5<<1
222	=12						ca2LowOutput=6<<1
223	=14						ca2HighOutput=7<<1

225	=0						ca1NegativeActiveEdge=0<<0
226	=1						ca1PositiveActiveEdge=1<<0

228	>fe4c						                .fill 1         ;12
229							                .endblock
230	.fe4d						ifr:
231	>fe4d						                .fill 1         ;13
232	.fe4e						ier:
233	>fe4e						                .fill 1         ;14
234	.fe4f						oraNoHandshake:
235	.fe4f						iraNoHandshake:
236	>fe4f						                .fill 1         ;15

238	.fe50						irq: .block
239	=1						ca2=1
240	=2						ca1=2
241	=4						sr=4
242	=8						cb2=8
243	=16						cb1=16
244	=32						t2=32
245	=64						t1=64
246							                .endblock
247							                .ends
251							                .endv

253							                .virtual $fe60
254	.fe60						userVIA: .dstruct VIA
152	.fe60						orb:
153	.fe60						irb:
154	>fe60						                .fill 1         ;0
155	.fe61						ora:
156	.fe61						ira:
157	>fe61						                .fill 1         ;1
158	.fe62						ddrb:
159	>fe62						                .fill 1         ;2
160	.fe63						ddra:
161	>fe63						                .fill 1         ;3
162	.fe64						t1cL:
163	>fe64						                .fill 1         ;4
164	.fe65						t1cH:
165	>fe65						                .fill 1         ;5
166	.fe66						t1lL:
167	>fe66						                .fill 1         ;6
168	.fe67						t1lH:
169	>fe67						                .fill 1         ;7
170	.fe68						t2cL:
171	>fe68						                .fill 1         ;8
172	.fe69						t2cH:
173	>fe69						                .fill 1         ;9
174	.fe6a						sr:
175	>fe6a						                .fill 1         ;10
176	.fe6b						acr: .block
177	=0						t1OneShot=0<<6
178	=64						t1Continuous=1<<6
179	=128						t1OneShotPB7=2<<6
180	=192						t1ContinuousPB7=3<<6

182	=0						t2Timer=0<<5
183	=32						t2CountPB6=1<<5

185	=0						srDisabled=0<<2
186	=4						srShiftInT2=1<<2
187	=8						srShiftInVIAClock=2<<2
188	=12						srShiftInExtClock=3<<2
189	=16						srShiftOutT2FreeRun=4<<2
190	=20						srShiftOutT2=5<<2
191	=24						srShiftOutVIAClock=6<<2
192	=28						srShiftOutExtClock=7<<2

194	=0						pbLatchDisabled=0<<1
195	=2						pbLatchEnabled=1<<1

197	=0						paLatchDisabled=0<<0
198	=1						paLatchEnabled=1<<0

200	>fe6b						                .fill 1         ;11
201							                .endblock
202	.fe6c						pcr: .block

204	=0						cb2InputNegativeActiveEdge=0<<5
205	=32						cb2IndependentInterruptInputNegativeEdge=1<<5
206	=64						cb2InputPositiveEdge=2<<5
207	=96						cb2IndependentInterruptInputPositiveEdge=3<<5
208	=128						cb2HandshakeOutput=4<<5
209	=160						cb2PulseOutput=5<<5
210	=192						cb2LowOutput=6<<5
211	=224						cb2HighOutput=7<<5

213	=0						cb1NegativeActiveEdge=0<<4
214	=16						cb1PositiveActiveEdge=1<<4

216	=0						ca2InputNegativeActiveEdge=0<<1
217	=2						ca2IndependentInterruptInputNegativeEdge=1<<1
218	=4						ca2InputPositiveEdge=2<<1
219	=6						ca2IndependentInterruptInputPositiveEdge=3<<1
220	=8						ca2HandshakeOutput=4<<1
221	=10						ca2PulseOutput=5<<1
222	=12						ca2LowOutput=6<<1
223	=14						ca2HighOutput=7<<1

225	=0						ca1NegativeActiveEdge=0<<0
226	=1						ca1PositiveActiveEdge=1<<0

228	>fe6c						                .fill 1         ;12
229							                .endblock
230	.fe6d						ifr:
231	>fe6d						                .fill 1         ;13
232	.fe6e						ier:
233	>fe6e						                .fill 1         ;14
234	.fe6f						oraNoHandshake:
235	.fe6f						iraNoHandshake:
236	>fe6f						                .fill 1         ;15

238	.fe70						irq: .block
239	=1						ca2=1
240	=2						ca1=2
241	=4						sr=4
242	=8						cb2=8
243	=16						cb1=16
244	=32						t2=32
245	=64						t1=64
246							                .endblock
247							                .ends
255							                .endv

257							                .virtual $fee0
258	.fee0						tube: .block
259							; Parasite to Host: Carries the OSWRCH call. Data register is a FIFO
260							; that can handle a VDU command length (10 bytes).
261							;
262							; Host to Parasite: There is a 1 byte buffer. It is used to generate
263							; IRQ's in the parasite from events in the host.

265							; write/read (clears IRQ)
266	.fee0						status1: .block
267							; [Tube p13]
268	=$01						Q=$01                           ;enable HIRQ from R4
269	=$02						I=$02                           ;enable PIRQ from R1
270	=$04						J=$04                           ;enable PIRQ from R3
271	=$08						M=$08                           ;enable PNMI from R3
272	=$10						V=$10                           ;2-byte R3
273	=$20						P=$20                           ;activate PRST
274	=$40						T=$40                           ;clear all Tube registers
275	=$80						S=$80                           ;set/clear bits
276							                .bend
277	>fee0						                .fill 1

279							; bit 7 - data available/IRQ
280							; bit 6 - not full
281	.fee1						data1:
282	>fee1						                .fill 1

284							; Used to implement OS calls that take a long time or that cannot
285							; interrupt Host tasks. The parasite passes a byte describing the
286							; required task. The two processors then exchange data until the task
287							; is complete. OS calls handled through this register include: OSRDCH,
288							; OSCLI, OSBYTE, OSWORD, OSBPUT, OSBGET, OSFIND, OSARGS, OSFILE,
289							; OSGBPB.

291							; write/read
292	.fee2						status2:
293	>fee2						                .fill 1

295							; bit 7 - data available
296							; bit 6 - not full
297	.fee3						data2:
298	>fee3						                .fill 1

300							; Used for the background task of fast data transfer between the two
301							; processors.

303							; write/read
304	.fee4						status3:
305	>fee4						                .fill 1

307							; bit 7 - data available/NMI
308							; bit 6 - not full
309	.fee5						data3:
310	>fee5						                .fill 1

312							; Used as the control channel for block transfers going through
313							; Register 3, and also the transfer register for error strings from
314							; host to parasite. In both cases, the host interrupts the parasite by
315							; placing a byte into the Register. In the former case it is a byte
316							; describing the required action, in the latter it is an error code.

318							; write (sets IRQ)/read (clears IRQ)
319	.fee6						status4:
320	>fee6						                .fill 1

322							; bit 7 - data available/IRQ
323							; bit 6 - not full/IRQ
324	.fee7						data4:
325	>fee7						                .fill 1
326							                .bend
327							                .endv

329							RTC: .struct
330	>0000						seconds: .fill 1
331	>0001						secondsAlarm: .fill 1
332	>0002						minutes: .fill 1
333	>0003						minutesAlarm: .fill 1
334	>0004						hours: .fill 1
335	>0005						hoursAlarm: .fill 1
336	>0006						dayOfWeek: .fill 1
337	>0007						dayOfMonth: .fill 1
338	>0008						month: .fill 1
339	>0009						year: .fill 1
340	.000a						a: .block
341	=7						dvMask=7
342	=4						dvShift=4
343	=0						dv4194304Hz=0<<dvShift
344	=16						dv1048576Hz=1<<dvShift
345	=32						dv32768Hz=2<<dvShift
346	>000a						                .fill 1
347							                .endblock
348	.000b						b: .block
349	=$80						set=$80
350	=$02						_24h=$02
351	=$01						dse=$01
352	>000b						                .fill 1
353							                .endblock
354	.000c						c: .block
355	=$10						uf=$10
356	>000c						                .fill 1
357							                .endblock
358	.000d						d: .block
359	>000d						                .fill 1
360							                .endblock
361	=50						ram_size=50
362	>000e						ram: .fill ram_size
363							                .endstruct

:1	;******  Return to file: mos400.s65

2							                .include "src/mos_workspace.s65"

:3	;******  Processing file: src/mos_workspace.s65


2							;-------------------------------------------------------------------------
3							;
4							; Disorganized jumble of constants. They'll get tidied up at some
5							; point... promise...
6							;
7							;-------------------------------------------------------------------------

9							; These variant flags are applicable to the stated versions only, and
10							; may or may not be separable from the various .if/.endif constructs
11							; for that version. If they're set for any other version, the output
12							; may not make sense.

14							                .weak
15							                ; Set if building Olivetti MOS, a variant of 5.10.
16	=false						olivetti=false

18							                ; Set if building CFA3000 MOS, a variant of 3.50.
19	=false						CFA3000=false

21							                ; Set if building Autocue 1500 MOS, a variant of 5.11.
22	=false						autocue=false

24							                ; Set if building MOS 3.29 (Acorn FinMOS), a variant
25							                ; of 3.50.
26	=false						finmos329=false
27							                .endweak

29							;-------------------------------------------------------------------------


32	=$400						tubeHostAddr=$400

34							                .if version==350
41							                .endif

43							;-------------------------------------------------------------------------

45	=$a8						osargsBuffer=$a8                ;4-byte ZP buffer for use with OSARGS
46	=$b8						printMessageAddress=$b8

48							                .virtual $bb
49	.00bb						tapeCurrentOptionsByte: .block
50							                .endblock
51							                .endvirtual

53							                .virtual $f2
54	.00f2						fsStatusByte: .block
55	=$01						inputFileOpen=$01
56	=$02						outputFileOpen=$02
57	=$08						catStatus=$08
58	=$40						eofReached=$40
59	=$80						eofWarningGiven=$80
60							                .endblock
61							                .endvirtual

63							                .virtual $e4
64	.00e4						stringInputOptions: .block
65	=$80						doubleQuotes=$80
66	=$40						spaceNotATerminator=$40
67	=$01						goodString=$01
68							                .endblock
69							                .endvirtual
70	=$e5						stringInputPlingFlag=$e5        ;bit 7 set if last char was '!'
71	=$e6						readCharacterTimedFlag=$e6
72	=$e7						autoRepeatCountdownTimer=$e7
73	=$eb						tapeCritical=$eb
74	=$ec						lastKeyPressedInternal=$ec
75	=$ed						firstKeyPressedInternal=$ed
76	=$f2						stringInputBufferAddress=$f2    ;word

78							;-------------------------------------------------------------------------

80	=$01						romServiceCallAbsoluteWorkspaceClaim=$01 ; memory used only when ROM is paged in
81	=$02						romServiceCallPrivateWorkspaceClaim=$02 ; memory used even when ROM is not paged in
82	=$03						romServiceCallAutoBoot=$03              ;
83	=$04						romServiceCallUnrecognisedCommand=$04   ; star command not recognised
84	=$05						romServiceCallUnrecognisedInterrupt=$05 ;
85	=$06						romServiceCallBreakInstruction=$06      ;
86	=$07						romServiceCallUnrecognisedOSBYTE=$07    ;
87	=$08						romServiceCallUnrecognisedOSWORD=$08    ;
88	=$09						romServiceCallHelp=$09                  ;
89	=$0a						romServiceCallClaimStaticWorkspace=$0A ; (Issued by paged ROMs, not the OS)
90	=$0b						romServiceCallNMIRelease=$0B    ; (Issued by paged ROMs, not the OS)
91	=$0c						romServiceCallNMIClaim=$0C      ; (Issued by paged ROMs, not the OS)
92	=$0d						romServiceCallROMFilingSystemInitialize=$0D    ;
93	=$0e						romServiceCallROMFilingSystemByteGet=$0E    ;
94	=$0f						romServiceCallVectorsClaimed=$0F    ; Used when a filing system starts
95	=$10						romServiceCallSpoolExecClosureWarning=$10    ;
96							;romServiceCallFontImplosionExplosionWarning=$11    ;
97	=$12						romServiceCallInitialiseFilingSystem=$12    ; (Issued from paged ROMs, not the OS)
98	=$15						romServiceCallPollingInterrupt=$15
99	=$18						romServiceCallReserved=$18
100	=$21						romServiceCallAbsoluteHAZELWorkspaceClaim=$21
101	=$22						romServiceCallPrivateHAZELWorkspaceClam=$22
102	=$23						romServiceCallTopOfHAZELWorkspace=$23
103	=$24						romServiceCallCountDynamicHAZELWorkspace=$24
104	=$25						romServiceCallRequestFSInfo=$25
105	=$26						romServiceCallCloseAllOpenFiles=$26
106	=$27						romServiceCallInformReset=$27
107	=$28						romServiceCallUnknownCONFIG=$28
108	=$29						romServiceCallUnknownSTATUS=$29
109	=$2a						romServiceCallLanguageChange=$2a
110	=$30						romServiceCall30=$30
111	=$fe						romServiceCallTubeSystemPostInitialisation=$FE    ;
112	=$ff						romServiceCallTubeMainInitialisation=$FF    ;

114							;-------------------------------------------------------------------------

116							; [MasRef D.2-24]

118	=0						eventOutputBufferEmpty=0
119	=1						eventInputBufferFull=1
120	=2						eventCharacterEnteringBuffer=2
121	=3						eventADCConversionComplete=3
122	=4						eventStartOfVerticalSync=4
123	=5						eventIntervalTimerCrossingZero=5
124	=6						eventESCAPEPressed=6
125	=7						eventRS423Error=7
126	=8						eventNetworkError=8
127	=9						eventUser=9
128	=9						eventMax=9

130							;-------------------------------------------------------------------------

132							; [MasRef D.2-27]

134							; Input buffers
135	=0						bufferKeyboard=0
136	=1						bufferRS423Input=1

138							; Output buffers
139	=2						bufferFirstOutput=2
140	=2						bufferRS423Output=2
141	=3						bufferPrinter=3
142	=4						bufferSoundChannel0=4
143	=5						bufferSoundChannel1=5
144	=6						bufferSoundChannel2=6
145	=7						bufferSoundChannel3=7
146							; What's buffer 8? Previously speech on OS 1.20. There's indices
147							; allocated for it...
148	=8						bufferMax=8


151	=$03e0						bufferKeyboardAddress=$03e0
152	=32						bufferKeyboardSize=32
153	=$0a00						bufferRS423InputAddress=$0a00
154	=256						bufferRS423InputSize=256
155	=$0900						bufferRS423OutputAddress=$0900
156	=192						bufferRS423OutputSize=192
157	=$0880						bufferPrinterAddress=$0880
158	=64						bufferPrinterSize=64
159	=$0840						bufferSoundChannel0Address=$0840
160	=16						bufferSoundChannel0Size=16
161	=$0850						bufferSoundChannel1Address=$0850
162	=16						bufferSoundChannel1Size=16
163	=$0860						bufferSoundChannel2Address=$0860
164	=16						bufferSoundChannel2Size=16
165	=$0870						bufferSoundChannel3Address=$0870
166	=16						bufferSoundChannel3Size=16
167	=$09c0						buffer8Address=$09c0
168	=64						buffer8Size=64



172							; BufferInfo: .function bufferAddress,bufferSizeByte
173							;                 .endfunction (bufferAddress,256-bufferSizeByte)

175							; ; buffer info is (base address,size)
176							;  _:=[]
177							; _..=[BufferInfo($0300,32)];bufferKeyboard=0
178							; _..=[BufferInfo($0a00,256)];bufferRS423Input=1
179							; _..=[BufferInfo($08c0,192)];bufferRS423Output=2
180							; _..=[BufferInfo($07c0,64)];bufferPrinter=3
181							; _..=[BufferInfo($0750,16)];bufferSoundChannel0=4
182							; _..=[BufferInfo($0760,16)];bufferSoundChannel1=5
183							; _..=[BufferInfo($0770,16)];bufferSoundChannel2=6
184							; _..=[BufferInfo($0780,16)];bufferSoundChannel3=7
185							; _..=[BufferInfo($0900,64)];What's buffer 8?

187							;-------------------------------------------------------------------------

189							; [MasRef C.5-5]

191	=0						printerDriverTypeSink=0
192	=1						printerDriverTypeParallel=1
193	=2						printerDriverTypeSerial=2
194	=3						printerDriverTypeUser=3
195	=4						printerDriverTypeNetwork=4

197							; AUG p259

199	=0						printerDriverPoll=0
200	=1						printerDriverActivate=1
201	=2						printerDriverVDU2=2
202	=3						printerDriverVDU3=3
203	=5						printerDriverFX5=5

205	=10						printerDriverFX3=10             ;undocumented???

207							;-------------------------------------------------------------------------

209							; AUG p261

211	=0						netPrinterRequest0=0
212	=1						netPrinterRequest1=1
213	=2						netPrinterRequest2=2
214	=3						netPrinterRequest3=3
215	=4						netWriteCharacterAttempted=4
216	=5						netPrinterRequest5=5
217	=6						netReadCharacterAttempted=6
218	=7						netOSBYTEAttempted=7
219	=8						netOSWORDAttempted=8
220	=13						netOSWORD0Complete=13

222							;-------------------------------------------------------------------------

224	=0						fscOPT=0
225	=1						fscCheckEOF=1
226	=2						fscStarSlash=2
227	=3						fscUnknownCommand=3
228	=4						fscStarRUN=4
229	=5						fscStarCAT=5
230	=6						fscNewFS=6
231	=7						fscFileHandleRange=7
232	=8						fscStarCommand=8
233	=9						fscStarEX=9
234	=10						fscStarINFO=10
235	=11						fscRUNLibrary=11

237							; NAUG mentions this. But it doesn't appear to
238							; actually exist in the code.
239							;
240							; Maybe it's present in MOS 3.50 or later?
241	=12						fscRENAME=12

243	=1						gbpbPutBytesNewPTR=1            ;[AUG p340]
244	=2						gbppPutBytesCurrentPTR=2        ;[AUG p340]
245	=3						gbpbGetBytesNewPTR=3            ;[AUG p341]
246	=4						gbpbGetBytesCurrentPTR=4        ;[AUG p341]
247	=5						gbpbGetMediaMetadata=5          ;[AUG p341]
248	=6						gbpbGetCurrentDevice=6          ;[AUG p341]
249	=7						gbpbGetLibraryDevice=7          ;[AUG p341]
250	=8						gbpbReadFileNames=8             ;[AUG p341]

252							OSGBPBParameterBlock: .struct
253	.0000						handle:
254	>0000						                .fill 1
255	.0001						address:
256	>0001						                .fill 4
257	.0005						count:
258	>0005						                .fill 4
259	.0009						ptr:
260	>0009						                .fill 4
261							                .endstruct

263	=0						argsGetFS=0                     ;[AUG p337]
264	=1						argsGetCommandLine=1            ;[AUG p338]
265	=2						argsCheckANFS=2                 ;https://beebwiki.mdfs.net/OSARGS
266	=3						argsGetLibFS=3                  ;
267	=$ff						argsFlushBuffers=$ff            ;[AUG p338]

269	=0						argsFileGetPTR=0
270	=1						argsFileSetPTR=1
271	=2						argsFileGetEXT=2
272	=$ff						argsFileFlush=$ff

274	=0						fileSave=0                      ;[AUG p336]
275	=1						fileWriteMetadata=1             ;[AUG p336]
276	=2						fileWriteLoadAddress=2          ;[AUG p336]
277	=3						fileWriteExecAddress=3          ;[AUG p336]
278	=4						fileWritettributes=4            ;[AUG p336]
279	=5						fileReadMetadata=5              ;[AUG p336]
280	=6						fileDelete=6                    ;[AUG p336]
281	=$ff						fileLoad=$ff                    ;[AUG p336]

283							OSFILEParameterBlock: .struct
284	.0000						fileName:
285	>0000						                .fill 2
286	.0002						addresses:
287	.0002						load:
288	>0002						                .fill 4
289	.0006						exec:
290	>0006						                .fill 4
291	.000a						length:
292	.000a						saveStart:
293	>000a						                .fill 4
294	.000e						attributes:
295	.000e						saveEnd:
296	>000e						                .fill 4
297							                .endstruct

299							;-------------------------------------------------------------------------

301	=0						bufferNumberKeyboard=0          ;
302	=1						bufferNumberRS423Input=1        ;
303	=2						bufferNumberRS423Output=2       ;
304	=3						bufferNumberPrinter=3           ;
305	=4						bufferNumberSound0=4            ; Noise channel
306	=5						bufferNumberSound1=5            ;
307	=6						bufferNumberSound2=6            ;
308	=7						bufferNumberSound3=7            ;
309							; bufferNumberSpeech=8            ;
310	=8						bufferNumberHighest=8           ;

312							;-------------------------------------------------------------------------

314							; uservIndex=0
315							; brkvIndex=1
316							; irq1vIndex=2
317							; irq2vIndex=3
318							; clivIndex=4
319							; bytevIndex=5
320							; wordvIndex=6
321							; wrchvIndex=7
322							; rdchvIndex=8
323							; filevIndex=9
324							; argsvIndex=10
325							; bgetvIndex=11
326							; bputvIndex=12
327							; gbpbvIndex=13
328							; findvIndex=14
329							; fscvIndex=15
330							; eventvIndex=16
331							; uptvIndex=17
332							; netvIndex=18
333							; vduvIndex=19
334							; keyvIndex=20
335							; insvIndex=21
336							; remvIndex=22
337							; cnpvIndex=23
338							; ind1vIndex=24
339							; ind2vIndex=25
340							; ind3vIndex=26


343							                .virtual $200
344	.0200						vectors:
345	.0200						USERV:
346	>0200						                .fill 2
347	.0202						BRKV:
348	>0202						                .fill 2
349	.0204						IRQ1V:
350	>0204						                .fill 2
351	.0206						IRQ2V:
352	>0206						                .fill 2
353	.0208						CLIV:
354	>0208						                .fill 2
355	.020a						BYTEV:
356	>020a						                .fill 2
357	.020c						WORDV:
358	>020c						                .fill 2
359	.020e						WRCHV:
360	>020e						                .fill 2
361	.0210						RDCHV:
362	>0210						                .fill 2
363	.0212						FILEV:
364	>0212						                .fill 2
365	.0214						ARGSV:
366	>0214						                .fill 2
367	.0216						BGETV:
368	>0216						                .fill 2
369	.0218						BPUTV:
370	>0218						                .fill 2
371	.021a						GBPBV:
372	>021a						                .fill 2
373	.021c						FINDV:
374	>021c						                .fill 2
375	.021e						FSCV:
376	>021e						                .fill 2
377	.0220						EVENTV:
378	>0220						                .fill 2
379	.0222						UPTV:
380	>0222						                .fill 2
381	.0224						NETV:
382	>0224						                .fill 2
383	.0226						VDUV:
384	>0226						                .fill 2
385	.0228						KEYV:
386	>0228						                .fill 2
387	.022a						INSV:
388	>022a						                .fill 2
389	.022c						REMV:
390	>022c						                .fill 2
391	.022e						CNPV:
392	>022e						                .fill 2
393	.0230						IND1V:
394	>0230						                .fill 2
395	.0232						IND2V:
396	>0232						                .fill 2
397	.0234						IND3V:
398	>0234						                .fill 2
399	.0236						mosVariables:

401							; OSBYTE 166 (&A6) Read start address of MOS variables [MasRef D.2-50]
402							; OSBYTE 167 (&A7) Read start address of MOS variablespointer table  [MasRef D.2-50]
403	>0236						mosVariablesAddress: .fill 2

405							; OSBYTE 168 (&A8) Read address of ROM pointer table [MasRef D.2-51]
406							; OSBYTE 169 (&A9) Read address of ROM pointer table [MasRef D.2-51]
407	>0238						extendedVectorSpaceAddress: .fill 2

409							; OSBYTE 170 (&AA) Read address of ROM information table [MasRef D.2-51]
410							; OSBYTE 171 (&AB) Read address of ROM information table [MasRef D.2-51]
411	>023a						romInformationTableAddress: .fill 2

413							; OSBYTE 172 (&AC) Read address of keyboard translation table [MasRef D.2-52]
414							; OSBYTE 173 (&AD) Read address of keyboard translation table [MasRef D.2-52]
415	>023c						keyboardTranslationTableAddress: .fill 2

417							; OSBYTE 174 (&AE) Read address of VDU variables origin [MasRef D.2-52]
418							; OSBYTE 175 (&AF) Read address of VDU variables origin [MasRef D.2-52]
419	>023e						vduVariablesAddress: .fill 2

421							; OSBYTE 176 (&B0) Read/Write CFS timeout counter [MasRef D.2-52]
422	>0240						cfsTimeoutCounter: .fill 1

424							; OSBYTE 177 (&B1) Read/write input source [MasRef D.2-53]
425	>0241						inputSource: .fill 1

427							; OSBYTE 178 (&B2) Read/write keyboard semaphore [MasRef D.2-53]
428	>0242						keyboardSemaphore: .fill 1

430							; OSBYTE 179 (&B3) Read/write ROM polling semaphore [MasRef D.2-54]
431	>0243						romPollingSemaphore: .fill 1

433							; OSBYTE 180 (&B4) Read/write Operating System High [MasRef D.2-54]
434	>0244						oshwm: .fill 1

436							; OSBYTE 181 (&B5) Read/write RS243 input interpretation [MasRef D.2-54]
437	>0245						rs423InputInterpretationStatus: .fill 1

439							; OSBYTE 182 (&B6) Read NOIGNORE state [MasRef D.2-55]
440							;
441							; TODO - not a great name, no matter how official - should probably be usePrinterIgnoreChar or something
442	>0246						noignoreState: .fill 1

444							; OSBYTE 183 (&B7) Read/write cassette/ROM filing system [MasRef D.2-55]
445	>0247						cfsRFSFSSwitch: .fill 1

447							; OSBYTE 184 (&B8) Read OS copy of video ULA control [MasRef D.2-56]
448	>0248						vcontrolRegister: .fill 1

450							; OSBYTE 185 (&B9) Read OS copy of video ULA palette [MasRef D.2-56]
451	>0249						vpaletteRegister: .fill 1

453							; OSBYTE 186 (&BA) Read ROM number active at last BRK [MasRef D.2-56]
454	>024a						romActiveAtLastBRK: .fill 1

456							; OSBYTE 187 (&BB) Read ROM number of socket [MasRef D.2-57]
457	>024b						basicROMNumber: .fill 1

459							; OSBYTE 188 (&BC) Read current ADC channel number [MasRef D.2-57]
460	>024c						currentADCChannel: .fill 1

462							; OSBYTE 189 (&BD) Read maximum ADC channel number [MasRef D.2-57]
463	>024d						maximumADCChannel: .fill 1

465							; OSBYTE 190 (&BE) Read/write ADC conversion type [MasRef D.2-58]
466	>024e						adcConversionType: .fill 1

468							; OSBYTE 191 (&BF) Read/write RS423 busy flag [MasRef D.2-58]
469	>024f						rs423Busy: .fill 1

471							; OSBYTE 192 (&C0) Read serial ACIA control register [MasRef D.2-58]
472	>0250						aciaControlRegister: .fill 1

474							; OSBYTE 193 (&C1) Read/write flash counter [MasRef D.2-59]
475	>0251						flashCounter: .fill 1

477							; OSBYTE 194 (&C2) Read/write duration of first colour [MasRef D.2-59]
478	>0252						firstFlashColourDuration: .fill 1

480							; OSBYTE 195 (&C3) Read/write duration of second colour [MasRef D.2-60]
481	>0253						secondFlashColourDuration: .fill 1

483							; OSBYTE 196 (&C4) Read/write keyboard auto-repeat delay [MasRef D.2-60]
484	>0254						keyboardAutoRepeatDelay: .fill 1

486							; OSBYTE 197 (&C5) Read/write keyboard auto-repeat rate [MasRef D.2-60]
487	>0255						keyboardAutoRepeatRate: .fill 1

489							; OSBYTE 198 (&C6) Read/write *EXEC file handle [MasRef D.2-61]
490	>0256						execFileHandle: .fill 1

492							; OSBYTE 199 (&C7) Read/write *SPOOL file handle [MasRef D.2-62]
493	>0257						spoolFileHandle: .fill 1

495							; OSBYTE 200 (&C8) Read/write BREAK and ESCAPE effect [MasRef D.2-62]
496	>0258						breakAndESCAPEEffect: .fill 1

498							; OSBYTE 201 (&C9) Read/write keyboard status [MasRef D.2-63]
499	>0259						keyboardStatus: .fill 1

501							; OSBYTE 202 (&CA) Read/write keyboard status byte [MasRef D.2-63]
502	.025a						keyboardStatusByte: .block
503	=$8						shiftPressed=%1<<3
504	=%10000						capsLockDisengaged=%1<<4
505	=%100000					shiftLockDisengaged=%1<<5
506	=%1000000					ctrlPressed=%1<<6
507	=$80						shiftEnabled=%1<<7
508	>025a						                .fill 1
509							                .endblock

511							; OSBYTE 203 (&CB) Read/write RS423 input buffer [MasRef D.2-64]
512	>025b						rs423InputBufferMinimumSpace: .fill 1

514							; OSBYTE 204 (&CC) Read/write RS423 ignore flag [MasRef D.2-65]
515	>025c						rs423Ignore: .fill 1

517							; OSBYTE 205 (&CD) Read/write RS423 destination [MasRef D.2-65]
518	>025d						rs423Destination: .fill 1

520							; OSBYTE 206 (&CE) Read/write Econet OS call interception [MasRef D.2-66]
521	>025e						econetInterceptionStatus: .fill 1

523							; OSBYTE 207 (&CF) Read/write Econet input interpretation [MasRef D.2-66]
524	>025f						econetInputInterpretationStatus: .fill 1

526							; OSBYTE 208 (&D0) Read write Econet output [MasRef D.2-67]
527	>0260						econetOutputInterpretationStatus: .fill 1

529							; OSBYTE 209 (&D1) is reserved for the speech system [MasRef D.2-67]
530	>0261						speechSystemByte1:  .fill 1

532							; OSBYTE 210 (&D2) Read/write sound suppression status [MasRef D.2-67]
533	>0262						soundSuppressionStatus: .fill 1

535							; OSBYTE 211 (&D3) Read/write BELL channel [MasRef D.2-67]
536	>0263						bellChannel: .fill 1

538							; OSBYTE 212 (&D4) Read/write BELL sound information [MasRef D.2-68]
539	>0264						bellSound: .fill 1

541							; OSBYTE 213 (&D5) Read/write BELL frequency [MasRef D.2-69]
542	>0265						bellFrequency: .fill 1

544							; OSBYTE 214 (&D6) Read/write BELL duration [MasRef D.2-69]
545	>0266						bellDuration: .fill 1

547							; OSBYTE 215 (&D7) Read/write startup message [MasRef D.2-69]
548	>0267						startupMessageSuppressionStatus: .fill 1

550							; OSBYTE 216 (&D8) Read/write length of soft key string [MasRef D.2-70]
551	>0268						softKeyStringLength: .fill 1

553							; OSBYTE 217 (&D9) Read/write paged mode line count [MasRef D.2-71]
554	>0269						pagedModeCounter: .fill 1

556							; OSBYTE 218 (&DA) Read/write bytes in VDU queue [MasRef D.2-71]
557	>026a						vduQueueNegativeLength: .fill 1

559							; OSBYTE 219 (&DB) Read/write TAB key code [MasRef D.2-72]
560	>026b						tabKeyCode: .fill 1

562							; OSBYTE 220 (&DC) Read/write ESCAPE character [MasRef D.2-72]
563	>026c						escapeCharacter: .fill 1

565							; OSBYTE 221 (&DD) Read/write interpretation of input values 192-207 [MasRef D.2-73]
566	>026d						input192To207Interpretation: .fill 1

568							; OSBYTE 222 (&DE) Read/write interpretation of input values 208-223 [MasRef D.2-73]
569	>026e						input208To223Interpretation: .fill 1

571							; OSBYTE 223 (&DF) Read/write interpretation of input values 224-239 [MasRef D.2-73]
572	>026f						input224To239Interpretation: .fill 1

574							; OSBYTE 224 (&E0) Read/write interpretation of input values 240-255 [MasRef D.2-73]
575	>0270						input240To255Interpretation: .fill 1

577							; OSBYTE 225 (&E1) Read/write soft key interpretation [MasRef D.2-74]
578	>0271						softKeyInterpretation: .fill 1

580							; OSBYTE 226 (&E2) Read/write SHIFT+soft key interpretation [MasRef D.2-74]
581	>0272						shiftSoftKeyInterpretation: .fill 1

583							; OSBYTE 227 (&E3) Read/write CTRL+soft key interpretation [MasRef D.2-74]
584	>0273						ctrlSoftKeyInterpretation: .fill 1

586							; OSBYTE 228 (&E4) Read/write SHIFT+CTRL+soft key interpretation [MasRef D.2-74]
587	>0274						shiftCtrlSoftKeyInterpretation: .fill 1

589							; OSBYTE 229 (&E5) Read/write ESCAPE key status [MasRef D.2-75]
590	>0275						escapeKeyStatus: .fill 1

592							; OSBYTE 230 (&E6) Read/write ESCAPE effects [MasRef D.2-75]
593	>0276						escapeEffects: .fill 1

595							; OSBYTE 231 (&E7) Read/write IRQ bit mask for user 6522 [MasRef D.2-76]
596	>0277						userVIAInterruptMask: .fill 1

598							; OSBYTE 232 (&E8) Read/write IRQ bit mask for 6850 [MasRef D.2-76]
599	>0278						rs423InterruptMask: .fill 1

601							; OSBYTE 233 (&E9) Read write IRQ bit mask for system [MasRef D.2-76]
602	>0279						systemVIAInterruptMask: .fill 1

604							; OSBYTE 234 (&EA) Read flag indicating Tube presence [MasRef D.2-76]
605	>027a						tubePresence: .fill 1

607							; OSBYTE 235 (&EB) is reserved for the speech system. [MasRef D.2-77]
608	>027b						speechSystemByte2: .fill 1

610							; OSBYTE 236 (&EC) Read/write character destination status [MasRef D.2-77]
611	.027c						characterDestinationStatus: .block
612	>027c						                .fill 1
613	=1						rs423_enable=1
614	=2						vdu_disable=2
615	=4						printer_disable=4               ;printer always off
616	=8						printer_enable=8                ;printer always on
617	=16						spool_disable=16
618	=64						printer_maybe=64                ;printer on when VDU 1 only
619							                .endblock

621							; OSBYTE 237 (&ED) Read/write cursor editing status [MasRef D.2-77]
622	.027d						editKeysMode: .block
623	=0						editKeys=0                      ;edit keys do editing
624	=1						asciiKeys=1                     ;edit keys are ASCII 135-139
625	=2						functionKeys=2                  ;edit keys are F keys 11-15
626	>027d						                .fill 1
627							                .endblock

629							; OSBYTE 238 (&EE) Read/write numeric keypad [MasRef D.2-78]
630	>027e						numericKeypadInterpretation: .fill 1

632							; OSBYTE 239 (&EF) Read/write *SHADOW state [MasRef D.2-78]
633	>027f						shadowRAMState: .fill 1

635							; OSBYTE 240 (&F0) Read country flag [MasRef D.2-79]
636	>0280						countryFlag: .fill 1

638							; OSBYTE 241 (&F1) Read/write user flag [MasRef D.2-79]
639	>0281						userFlag: .fill 1

641							; OSBYTE 242 (&F2) Read copy of serial processor ULA [MasRef D.2-80]
642	>0282						serialULARegister: .fill 1

644							; OSBYTE 243 (&F3) Read timer switch state [MasRef D.2-80]
645							;
646							; The location holds either 5 (initialTimerSwitchState) or 10
647							; (initialTimerSwitchState^15) - i.e., the offset of the byte after
648							; the last of the timer.
649							;
650							; Various offsets are applied to the timer addresses to make this
651							; work.
652	>0283						timerSwitchState: .fill 1

654							; OSBYTE 244 (&F4) Read/write soft key consistency flag [MasRef D.2-81]
655	>0284						softKeyConsistencyFlag: .fill 1

657							; OSBYTE 245 (&F5) Read printer driver type [MasRef D.2-81[
658	>0285						printerDriverType: .fill 1

660							; OSBYTE 246 (&F6) Read/write printer ignore character [MasRef D.2-81]
661	>0286						printerIgnoreChar: .fill 1

663							; OSBYTE 247 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
664	>0287						breakVectorByte0: .fill 1

666							; OSBYTE 248 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
667	>0288						breakVectorByte1: .fill 1

669							; OSBYTE 249 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
670	>0289						breakVectorByte2: .fill 1

672							; OSBYTE 250 (&FA) Read memory written by VDU driver [MasRef D.2-82]
673	>028a						vduDriverMemory: .fill 1

675							; OSBYTE 251 (&FB) Read memory displayed [MasRef D.2-83]
676	>028b						displayMemory: .fill 1

678							; OSBYTE 252 (&FC) Read/write current language ROM number [MasRef D.2-83]
679	>028c						currentLanguageROM: .fill 1

681							; OSBYTE 253 (&FD) Read last BREAK type [MasRef D.2-83]
682	.028d						lastBREAKType: .block
683	>028d						                .fill 1
684	=0						softBREAK=0
685	=1						powerOn=1
686	=2						hardBREAK=2
687							                .endblock
688							; OSBYTE 254 (&FE) Set effect of SHIFT on numeric keypad [MasRef D.2-84]
689	>028e						numericKeypadShiftEffect: .fill 1
690							; OSBYTE 255 (&FF) Read/write startup options [MasRef D.2-84]
691	>028f						startupOptions: .fill 1
692	=7						modeMask=7

694							                .endvirtual

696	=166						firstMOSVariableOSBYTE=166

698	=5						initialTimerSwitchState=5
699	=$290						tvOffset=$290
700	=$291						tvInterlace=$291
701	=$292						timer0=$292
702	=$297						timer1=$297
703	=$29c						intervalTimer=$29c
704	=$2a1						romInformationTable=$2a1
705	=$2b1						inkeyTimeoutCounter=$2b1
706	=$2b3						osword0MaxLineLength=$2b3
707	=$2b4						osword0MinASCIICharacter=$2b4
708	=$2b5						osword0MaxASCIICharacter=$2b5
709	=$2b6						adcResultLSBs=$2b6
710	=$2ba						adcResultMSBs=$2ba
711	=$2be						adcLastChannelRead=$2be         ;Two names for the same thing!
712	=$2be						adcLastConvertedChannel=$2be    ;Two names for the same thing!
713	=$2bf						eventEnabledFlags=$2bf
714	=$02c9						currentSoftKey=$02c9
715	=$02ca						keyboardFirstAutoRepeatCount=$02ca
716	=$2cb						previousKeyPressedWhenReadingLastKey=$2cb
717	=$2cc						previousKeyPressedWhenReadingFirstKey=$2cc
718	=$2cd						previousKeyPressedWhenReadingOSBYTE=$2cd
719							; soundIsUpdatingFlag=$2ce
720	=$2ce						bufferEmptyFlags=$2ce
721	=$2d7						bufferStartIndices=$2d7
722	=$2e0						bufferEndIndices=$2e0

724	=$2e9						tapeInputCurrentBlockSize=$2e9
725	=$2eb						blockFlagOfCurrentlyResidentBlock=$2eb
726	=$2ec						lastCharacterOfCurrentlyResidentBlock=$2ec

728							; Probably needs a better name :(
729							;
730							; Used by various file routines to store OSGBPB and OSFILE parameter
731							; blocks.
732							;
733							; Used by the clock routines to hold a (possibly partial) mirror of
734							; the RTC time/date registers.
735							;
736							; Used when parsing hex addresses from the command line - obviously
737							; designed primarily for convenient use when building up the OSFILE
738							; parameter block for use with *LOAD and *SAVE.
739	=$2ed						osfileParameterBlock=$2ed

741							; rtcTempData=$2ee

743							ExtendedVectorAddress: .function vectorAddress
745							                .endfunction extendedVectorSpace+(vectorAddress-vectors)/2*3

747							;-------------------------------------------------------------------------

749	=$d9f						extendedVectorSpace=$d9f

751	=$62						key_space=$62
752	=$66						key_comma=$66
753	=$17						key_minus=$17
754	=$67						key_stop=$67
755	=$68						key_slash=$68
756	=$27						key_0=$27
757	=$30						key_1=$30
758	=$31						key_2=$31
759	=$11						key_3=$11
760	=$12						key_4=$12
761	=$13						key_5=$13
762	=$34						key_6=$34
763	=$24						key_7=$24
764	=$15						key_8=$15
765	=$26						key_9=$26
766	=$48						key_colon=$48
767	=$57						key_semicolon=$57
768	=$47						key_at=$47
769	=$41						key_a=$41
770	=$64						key_b=$64
771	=$52						key_c=$52
772	=$32						key_d=$32
773	=$22						key_e=$22
774	=$43						key_f=$43
775	=$53						key_g=$53
776	=$54						key_h=$54
777	=$25						key_i=$25
778	=$45						key_j=$45
779	=$46						key_k=$46
780	=$56						key_l=$56
781	=$65						key_m=$65
782	=$55						key_n=$55
783	=$36						key_o=$36
784	=$37						key_p=$37
785	=$10						key_q=$10
786	=$33						key_r=$33
787	=$51						key_s=$51
788	=$23						key_t=$23
789	=$35						key_u=$35
790	=$63						key_v=$63
791	=$21						key_w=$21
792	=$42						key_x=$42
793	=$44						key_y=$44
794	=$61						key_z=$61
795	=$38						key_left_square_bracket=$38
796	=$78						key_backslash=$78
797	=$58						key_right_square_bracket=$58
798	=$18						key_caret=$18
799	=$28						key_underline=$28
800	=$70						key_escape=$70
801	=$60						key_tab=$60
802	=$40						key_caps_lock=$40
803	=$1						key_ctrl=$1
804	=$50						key_shift_lock=$50
805	=$0						key_shift=$0
806	=$59						key_delete=$59
807	=$69						key_copy=$69
808	=$49						key_return=$49
809	=$39						key_up=$39
810	=$29						key_down=$29
811	=$19						key_left=$19
812	=$79						key_right=$79
813	=$20						key_f0=$20
814	=$71						key_f1=$71
815	=$72						key_f2=$72
816	=$73						key_f3=$73
817	=$14						key_f4=$14
818	=$74						key_f5=$74
819	=$75						key_f6=$75
820	=$16						key_f7=$16
821	=$76						key_f8=$76
822	=$77						key_f9=$77
823	=$6a						key_numpad_0=$6a
824	=$6b						key_numpad_1=$6b
825	=$7c						key_numpad_2=$7c
826	=$6c						key_numpad_3=$6c
827	=$7a						key_numpad_4=$7a
828	=$7b						key_numpad_5=$7b
829	=$1a						key_numpad_6=$1a
830	=$1b						key_numpad_7=$1b
831	=$2a						key_numpad_8=$2a
832	=$2b						key_numpad_9=$2b
833	=$3a						key_numpad_plus=$3a
834	=$3b						key_numpad_minus=$3b
835	=$4a						key_numpad_divide=$4a
836	=$5a						key_numpad_hash=$5a
837	=$5b						key_numpad_multiply=$5b
838	=$5c						key_numpad_comma=$5c
839	=$3c						key_numpad_return=$3c
840	=$4b						key_numpad_delete=$4b
841	=$4c						key_numpad_stop=$4c

843							fsInfoBlock: .struct
844	>0000						name: .fill 8
845	>0008						minHandle: .fill 1
846	>0009						maxHandle: .fill 1
847	>000a						fsNumber: .fill 1
848							                .ends

850							osgbpbBlock: .struct
851	>0000						handle: .fill 1
852	>0001						addr: .fill 4
853	>0005						numBytes: .fill 4
854	>0009						ptr: .fill 4
855							                .ends

857							                ; NAUG p260
858							                .virtual $dc00
859	.dc00						hazel: .block
860	.dc00						commandLine:                    ;dc00
861	>dc00						                .fill 256
862	.dd00						ddxx:                           ;dd00
863	>dd00						                .fill 256
864	.de00						dexx:
865	>de00						                .fill 256
866	.df00						currentFS:                      ;df00
867	>df00						                .fill 1
868	.df01						activeFS:                       ;df01
869	>df01						                .fill 1
870	.df02						libFS:                          ;df02
871	>df02						                .fill 1
872	.df03						currentFSROM:                   ;df03
873	>df03						                .fill 1
874	.df04						commandLinePointer:             ;df04
875	>df04						                .fill 2

877							                ; 17 info blocks in total, but everything is relative
878							                ; to the 0th, so there's only a need to instantiate a
879							                ; struct for that one. Don't think 64tass handles
880							                ; arrays of structs anyway.
881	.df06						fsInfoBlocks:   .dstruct fsInfoBlock ;df06
844	>df06						name: .fill 8
845	>df0e						minHandle: .fill 1
846	>df0f						maxHandle: .fill 1
847	>df10						fsNumber: .fill 1
848							                .ends
882	>df11						                .fill 16*size(fsInfoBlock)
883	.dfc1						fsInfoBlocksTerminator:         ;dfc1
884							                ; space reserved for the 0 terminator when the full
885							                ; set of info blocks are filled.
886	>dfc1						                .fill 1
887	.dfc2						fsFlags: .block                 ;dfc2
888	>dfc2						                .fill 1
889	=$80						useASCII=$80
890	=$80						isAPPEND=$80
891	=$40						noLineNumbers=$40
892							                .bend
893	.dfc3						lineNumberBCD:                  ;dfc3
894	>dfc3						                .fill 2
895	.dfc5						lastCharPrinted:                ;dfc5
896	>dfc5						                .fill 1
897	.dfc6						tempFSFlag:                     ;dfc6
898	>dfc6						                .fill 1
899	.dfc7						moveOSGBPB: .dstruct osgbpbBlock ;dfc7
851	>dfc7						handle: .fill 1
852	>dfc8						addr: .fill 4
853	>dfcc						numBytes: .fill 4
854	>dfd0						ptr: .fill 4
855							                .ends
900	.dfd4						moveSrcHandle:                  ;dfd4
901	>dfd4						                .fill 1
902	.dfd5						moveDestHandle:                 ;dfd5
903	>dfd5						                .fill 1
904	.dfd6						moveBufferMSB:                  ;dfd6
905	>dfd6						                .fill 1
906	.dfd7						moveNumPages:                   ;dfd7
907	>dfd7						                .fill 1
908	.dfd8						moveDestName:                   ;dfd8
909	>dfd8						                .fill 2
910	.dfda						activeFSCV:                     ;dfda
911	>dfda						                .fill 2
912	.dfdc						oldACCCON:                      ;dfdc
913	>dfdc						                .fill 1
914	.dfdd						hasACCCONChanged:                ;dfdd
915	>dfdd						                .fill 1
916	.dfde						dfde:
917	>dfde						                .fill 1
918							                .bend
919							                .endv

921							;-------------------------------------------------------------------------
922							;
923							; VDU variables
924							;
925							; MasRef E.4-1
926							;
927							VDUVariables: .struct
928	.0000						graphicsWindow:
929							;graphicsWindowLeftBottom:
930							; &00 2 Graphics window left column. (p)
931	>0000						graphicsWindowPixelsLeft: .fill 2
932							; &02 2 Graphics window bottom row. (p)
933	>0002						graphicsWindowPixelsBottom: .fill 2
934							;graphicsWindowRightTop:
935							; &04 2 Graphics window right column. (p)
936	>0004						graphicsWindowPixelsRight: .fill 2
937							; &06 2 Graphics window top row. (p)
938	>0006						graphicsWindowPixelsTop: .fill 2
939	.0008						textWindow:
940							; &08 1 Text window left column.
941	>0008						textWindowLeft: .fill 1
942							; &09 1 Text window bottom row.
943	>0009						textWindowBottom: .fill 1
944							; &0A 1 Text window right column.
945	>000a						textWindowRight: .fill 1
946							; &0B 1 Text window top row.
947	>000b						textWindowTop: .fill 1
948							; &0C 2 Graphics origin X coordinate. (e)
949	>000c						graphicsWindowOriginX: .fill 2
950							; &0E 2 Graphics origin Y coordinate. (e)
951	>000e						graphicsWindowOriginY: .fill 2
952							; &10 2 Graphics cursor X coordinate. (e)
953	>0010						graphicsCursorPositionX: .fill 2
954							; &12 2 Graphics cursor Y coordinate. (e)
955	>0012						graphicsCursorPositionY: .fill 2
956							; &14 2 Previous graphics cursor X coordinate. (p)
957	.0014						oldGraphicsCursorPixels:
958	>0014						oldGraphicsCursorPixelsX: .fill 2
959							; &16 2 Previous graphics cursor Y coordinate. (p)
960	>0016						oldGraphicsCursorPixelsY: .fill 2
961							; &18 1 Text cursor X coordinate (from left of screen) when not cursor editing. When cursor editing, normally the input cursor X coordinate, but the output cursor X coordinate within an â<80><9C>unknown PLOT codesâ<80><9D> routine.
962	>0018						textCursorXPosition: .fill 1
963							; &19 1 Text cursor Y coordinate (from top of screen) when not cursor editing. When cursor editing, normally t.lsthe input cursor Y coordinate, but the output cursor Y coordinate within an â<80><9C>unknown PLOT codesâ<80><9D> routine.
964	>0019						textCursorYPosition: .fill 1
965							; &1A 1 Y produced by GADDR (see next section) so that (ZMEMG),Y addresses the correct byte.
966	>001a						graphicsAddressOffset: .fill 1
967							; &1Bâ<80><93>&23 VDU queue: &23 contains last byte of queue, other bytes immediately precede it.
968	=9						queueSize=9
969	>001b						queueBegin: .fill queueSize
970	.0024						queueEnd:
971	.0024						graphicsCursorPixels:
972							; &24 2 Graphics cursor X coordinate. (p)
973	>0024						graphicsCursorPixelsX: .fill 2
974							; &26 2 Graphics cursor Y coordinate. (p)
975	>0026						graphicsCursorPixelsY: .fill 2
976							; &28â<80><93>&49 Workspace. But variable &38 must not be used in a Teletext mode (mode 7 or 135).
977							                .union
978	.0028						hlfw: .dstruct HorizontalLineFillWorkspaceVDUVariables
1194	>0028						                .fill 6
1195	.002e						pixelsX:                        ;2e
1196	>002e						                .fill 2
1197	.0030						pixelsY:                        ;30
1198	>0030						                .fill 2
1199	.0032						pixelsRightEndX:
1200	>0032						                .fill 2         ;32
1201	.0034						pixelsLimitX:                   ;34
1202	>0034						                .fill 2
1203							                .endstruct
979	.0028						mocr: .dstruct MoveOrCopyRectangleWorkspaceVDUVariables
1185	.0028						src: .dstruct VDUAABB
1099	.0028						min: .dstruct VDUCoordinate
1094	>0028						x: .fill 2
1095	>002a						y: .fill 2
1096							                .endstruct
1100	.002c						max: .dstruct VDUCoordinate
1094	>002c						x: .fill 2
1095	>002e						y: .fill 2
1096							                .endstruct
1101							                .endstruct
1186	>0030						                .fill 4
1187	.0034						dest: .dstruct VDUAABB
1099	.0034						min: .dstruct VDUCoordinate
1094	>0034						x: .fill 2
1095	>0036						y: .fill 2
1096							                .endstruct
1100	.0038						max: .dstruct VDUCoordinate
1094	>0038						x: .fill 2
1095	>003a						y: .fill 2
1096							                .endstruct
1101							                .endstruct
1188	>003c						                .fill 9
1189	.0045						copy:
1190	>0045						                .fill 1         ;0=move, 2=copy
1191							                .endstruct
980	.0028						workspace: .dstruct GenericWorkspaceVDUVariables
1104	.0028						_28:
1105	>0028						                .fill 1
1106	.0029						_29:
1107	>0029						                .fill 1
1108	.002a						_2A:
1109	>002a						                .fill 1
1110	.002b						_2B:
1111	>002b						                .fill 1
1112	.002c						_2C:
1113	>002c						                .fill 1
1114	.002d						_2D:
1115	>002d						                .fill 1
1116	.002e						_2E:
1117	>002e						                .fill 1
1118	.002f						_2F:
1119	>002f						                .fill 1
1120	.0030						_30:
1121	>0030						                .fill 1
1122	.0031						_31:
1123	>0031						                .fill 1
1124	.0032						_32:
1125	>0032						                .fill 1
1126	.0033						_33:
1127	>0033						                .fill 1
1128	.0034						_34:
1129	>0034						                .fill 1
1130	.0035						_35:
1131	>0035						                .fill 1
1132	.0036						_36:
1133	>0036						                .fill 1
1134	.0037						_37:
1135	>0037						                .fill 1
1136	.0038						_38:
1137	>0038						                .fill 1
1138	.0039						_39:
1139	>0039						                .fill 1
1140	.003a						_3A:
1141	>003a						                .fill 1
1142	.003b						_3B:
1143	>003b						                .fill 1
1144	.003c						_3C:
1145	>003c						                .fill 1
1146	.003d						_3D:
1147	>003d						                .fill 1
1148	.003e						_3E:
1149	>003e						                .fill 1
1150	.003f						_3F:
1151	>003f						                .fill 1
1152	.0040						_40:
1153	>0040						                .fill 1
1154	.0041						_41:
1155	>0041						                .fill 1
1156	.0042						_42:
1157	>0042						                .fill 1
1158	.0043						_43:
1159	>0043						                .fill 1
1160	.0044						_44:
1161	>0044						                .fill 1
1162	.0045						_45:
1163	>0045						                .fill 1
1164	.0046						_46:
1165	>0046						                .fill 1
1166	.0047						_47:
1167	>0047						                .fill 1
1168	.0048						_48:
1169	>0048						                .fill 1
1170	.0049						_49:
1171	>0049						                .fill 1
1172							                .endstruct
981							                .endunion
982							; &4A 2 Address at which the 6845 is to display the text cursor.
983	>004a						textCursorCRTCAddress: .fill 2
984							; &4C 2 Number of bytes in a character row of the text window.
985	>004c						textWindowWidthInBytes: .fill 2
986							; &4E 1 Most significant byte of address of first byte of screen memory.
987	>004e						startScreenAddressHighByte: .fill 1
988							; &4F 1 Number of bytes in a character.
989	>004f						bytesPerCharacter: .fill 1
990							; &50 2 Address of byte in top left corner of screen display.
991	>0050						screenTopLeftAddress: .fill 2
992							; &52 2 Number of bytes in a character row of the whole screen.
993	>0052						bytesPerCharacterRow: .fill 2
994							; &54 1 Most significant byte of number of bytes of screen memory.
995	>0054						screenSizeHighByte: .fill 1
996							; &55 1 Current screen mode (in range 0â<80><93>7, i.e. without regard to â<80><98>shadowingâ<80><99>).
997	>0055						currentScreenMODE: .fill 1
998							; &56 1 Memory mode: 0 for 20K modes, 1 for 16K modes, 2 for 10K modes, 3 for 8K modes, 4 for 1K modes.
999	>0056						currentScreenMODEGroup: .fill 1
1000							; &57 1 Foreground text colour mask.
1001	>0057						foregroundTextColour: .fill 1
1002							; &58 1 Background text colour mask.
1003	>0058						backgroundTextColour: .fill 1
1004							; &59 1 0 if plotting graphics foreground, 8 if plotting graphics background.
1005	>0059						graphicsPlotState: .fill 1
1006							; &5A 1 Current graphics plot mode (usually set to one of following two reduced mod 16).
1007	>005a						graphicsPlotMode: .fill 1
1008							; &5B 1 Current graphics foreground plot mode (as set by VDU 18).
1009	>005b						foregroundGCOLMode: .fill 1
1010							; &5C 1 Current graphics background plot mode (as set by VDU 18).
1011	>005c						backgroundGCOLMode: .fill 1
1012							; &5D 2 Address of routine to process current VDU sequence.
1013	>005d						jumpVector: .fill 2
1014							; &5F 1 Value for 6845 register 10 to revert to on leaving cursor editing.
1015	>005f						lastCursorStartRegisterValue: .fill 1
1016							; &60 1 (Number of logical colours)â<88><92>1 (0 if Teletext).
1017	>0060						numberOfLogicalColoursMinusOne: .fill 1
1018							; &61 1 (Number of pixels/byte)â<88><92>1 (0 if not graphics).
1019	>0061						pixelsPerByteMinusOne: .fill 1
1020							; &62 1 Mask for leftmost pixel in a byte.
1021	>0062						colourMaskLeft: .fill 1
1022							; &63 1 Mask for rightmost pixel in a byte.
1023	>0063						colourMaskRight: .fill 1
1024							; &64 1 Output cursor X coordinate when cursor editing, but input cursor X coordinate when cursor editing and inside an â<80><98>unknown PLOT codesâ<80><99> routine.
1025	>0064						editCursorXPosition: .fill 1
1026							; &65 1 Output cursor Y coordinate when cursor editing, but input cursor Y coordinate when cursor editing and inside an â<80><98>unknown PLOT codesâ<80><99> routine.
1027	>0065						editCursorYPosition: .fill 1
1028							; &66 1 Cursor control flags (as set by VDU 23 16).
1029	.0066						cursorFlags: .block
1030	>0066						                .fill 1
1031							; MasRef E.3-18
1032	=$40						noSpecialVDU5Actions=$40
1033	=$20						noMoveCursorAfterPrint=$20
1034	=$10						noVerticalScroll=$10
1035	=$08						swapAxes=$08                    ;if set, X=vert; if clear, X=horiz
1036	=$04						invertVertical=$04              ;if set, vert=up; if clear, vert=down
1037	=$02						invertHorizontal=$02            ;if set, horiz=left; if clear, horiz=right
1038	=$01						scrollProtect=$01
1039							                .endblock
1040							; &67 1 Dot pattern (as set by VDU 23 6).
1041	>0067						dotPattern: .fill 1
1042							; &68 1 Current state of dot pattern.
1043	>0068						dotPatternState: .fill 1
1044							; &69 1 0 if colour being plotted is solid, non-zero if colour is an ECF
1045	>0069						isColourECF: .fill 1
1046							; &6A 1 0 if graphics foreground colour is solid, non-zero if foreground colour is an ECF
1047	>006a						isForegroundECF: .fill 1
1048							; &6B 1 0 if graphics background colour is solid, non-zero if background colour is an ECF
1049	>006b						isBackgroundECF: .fill 1
1050							; &6C 1 Top bit set when cursor is in "column 81".
1051	>006c						column81: .fill 1
1052							; &6D 1 Current graphics foreground colour (as set by VDU 18).
1053	>006d						foregroundGraphicsColour: .fill 1
1054							; &6E 1 Current graphics background colour (as set by VDU 18)
1055	>006e						backgroundGraphicsColour: .fill 1
1056							; &6Fâ<80><93>&7E Software copy of the current palette.
1057	>006f						currentPalette: .fill 16
1058							; &7F 1 Reserved.
1059	>007f						reserved: .fill 1
1060							                .endstruct

1062							                .virtual $300
1063	.0300						vduv: .dstruct VDUVariables
928	.0300						graphicsWindow:
929							;graphicsWindowLeftBottom:
930							; &00 2 Graphics window left column. (p)
931	>0300						graphicsWindowPixelsLeft: .fill 2
932							; &02 2 Graphics window bottom row. (p)
933	>0302						graphicsWindowPixelsBottom: .fill 2
934							;graphicsWindowRightTop:
935							; &04 2 Graphics window right column. (p)
936	>0304						graphicsWindowPixelsRight: .fill 2
937							; &06 2 Graphics window top row. (p)
938	>0306						graphicsWindowPixelsTop: .fill 2
939	.0308						textWindow:
940							; &08 1 Text window left column.
941	>0308						textWindowLeft: .fill 1
942							; &09 1 Text window bottom row.
943	>0309						textWindowBottom: .fill 1
944							; &0A 1 Text window right column.
945	>030a						textWindowRight: .fill 1
946							; &0B 1 Text window top row.
947	>030b						textWindowTop: .fill 1
948							; &0C 2 Graphics origin X coordinate. (e)
949	>030c						graphicsWindowOriginX: .fill 2
950							; &0E 2 Graphics origin Y coordinate. (e)
951	>030e						graphicsWindowOriginY: .fill 2
952							; &10 2 Graphics cursor X coordinate. (e)
953	>0310						graphicsCursorPositionX: .fill 2
954							; &12 2 Graphics cursor Y coordinate. (e)
955	>0312						graphicsCursorPositionY: .fill 2
956							; &14 2 Previous graphics cursor X coordinate. (p)
957	.0314						oldGraphicsCursorPixels:
958	>0314						oldGraphicsCursorPixelsX: .fill 2
959							; &16 2 Previous graphics cursor Y coordinate. (p)
960	>0316						oldGraphicsCursorPixelsY: .fill 2
961							; &18 1 Text cursor X coordinate (from left of screen) when not cursor editing. When cursor editing, normally the input cursor X coordinate, but the output cursor X coordinate within an â<80><9C>unknown PLOT codesâ<80><9D> routine.
962	>0318						textCursorXPosition: .fill 1
963							; &19 1 Text cursor Y coordinate (from top of screen) when not cursor editing. When cursor editing, normally t.lsthe input cursor Y coordinate, but the output cursor Y coordinate within an â<80><9C>unknown PLOT codesâ<80><9D> routine.
964	>0319						textCursorYPosition: .fill 1
965							; &1A 1 Y produced by GADDR (see next section) so that (ZMEMG),Y addresses the correct byte.
966	>031a						graphicsAddressOffset: .fill 1
967							; &1Bâ<80><93>&23 VDU queue: &23 contains last byte of queue, other bytes immediately precede it.
968	=9						queueSize=9
969	>031b						queueBegin: .fill queueSize
970	.0324						queueEnd:
971	.0324						graphicsCursorPixels:
972							; &24 2 Graphics cursor X coordinate. (p)
973	>0324						graphicsCursorPixelsX: .fill 2
974							; &26 2 Graphics cursor Y coordinate. (p)
975	>0326						graphicsCursorPixelsY: .fill 2
976							; &28â<80><93>&49 Workspace. But variable &38 must not be used in a Teletext mode (mode 7 or 135).
977							                .union
978	.0328						hlfw: .dstruct HorizontalLineFillWorkspaceVDUVariables
1194	>0328						                .fill 6
1195	.032e						pixelsX:                        ;2e
1196	>032e						                .fill 2
1197	.0330						pixelsY:                        ;30
1198	>0330						                .fill 2
1199	.0332						pixelsRightEndX:
1200	>0332						                .fill 2         ;32
1201	.0334						pixelsLimitX:                   ;34
1202	>0334						                .fill 2
1203							                .endstruct
979	.0328						mocr: .dstruct MoveOrCopyRectangleWorkspaceVDUVariables
1185	.0328						src: .dstruct VDUAABB
1099	.0328						min: .dstruct VDUCoordinate
1094	>0328						x: .fill 2
1095	>032a						y: .fill 2
1096							                .endstruct
1100	.032c						max: .dstruct VDUCoordinate
1094	>032c						x: .fill 2
1095	>032e						y: .fill 2
1096							                .endstruct
1101							                .endstruct
1186	>0330						                .fill 4
1187	.0334						dest: .dstruct VDUAABB
1099	.0334						min: .dstruct VDUCoordinate
1094	>0334						x: .fill 2
1095	>0336						y: .fill 2
1096							                .endstruct
1100	.0338						max: .dstruct VDUCoordinate
1094	>0338						x: .fill 2
1095	>033a						y: .fill 2
1096							                .endstruct
1101							                .endstruct
1188	>033c						                .fill 9
1189	.0345						copy:
1190	>0345						                .fill 1         ;0=move, 2=copy
1191							                .endstruct
980	.0328						workspace: .dstruct GenericWorkspaceVDUVariables
1104	.0328						_28:
1105	>0328						                .fill 1
1106	.0329						_29:
1107	>0329						                .fill 1
1108	.032a						_2A:
1109	>032a						                .fill 1
1110	.032b						_2B:
1111	>032b						                .fill 1
1112	.032c						_2C:
1113	>032c						                .fill 1
1114	.032d						_2D:
1115	>032d						                .fill 1
1116	.032e						_2E:
1117	>032e						                .fill 1
1118	.032f						_2F:
1119	>032f						                .fill 1
1120	.0330						_30:
1121	>0330						                .fill 1
1122	.0331						_31:
1123	>0331						                .fill 1
1124	.0332						_32:
1125	>0332						                .fill 1
1126	.0333						_33:
1127	>0333						                .fill 1
1128	.0334						_34:
1129	>0334						                .fill 1
1130	.0335						_35:
1131	>0335						                .fill 1
1132	.0336						_36:
1133	>0336						                .fill 1
1134	.0337						_37:
1135	>0337						                .fill 1
1136	.0338						_38:
1137	>0338						                .fill 1
1138	.0339						_39:
1139	>0339						                .fill 1
1140	.033a						_3A:
1141	>033a						                .fill 1
1142	.033b						_3B:
1143	>033b						                .fill 1
1144	.033c						_3C:
1145	>033c						                .fill 1
1146	.033d						_3D:
1147	>033d						                .fill 1
1148	.033e						_3E:
1149	>033e						                .fill 1
1150	.033f						_3F:
1151	>033f						                .fill 1
1152	.0340						_40:
1153	>0340						                .fill 1
1154	.0341						_41:
1155	>0341						                .fill 1
1156	.0342						_42:
1157	>0342						                .fill 1
1158	.0343						_43:
1159	>0343						                .fill 1
1160	.0344						_44:
1161	>0344						                .fill 1
1162	.0345						_45:
1163	>0345						                .fill 1
1164	.0346						_46:
1165	>0346						                .fill 1
1166	.0347						_47:
1167	>0347						                .fill 1
1168	.0348						_48:
1169	>0348						                .fill 1
1170	.0349						_49:
1171	>0349						                .fill 1
1172							                .endstruct
981							                .endunion
982							; &4A 2 Address at which the 6845 is to display the text cursor.
983	>034a						textCursorCRTCAddress: .fill 2
984							; &4C 2 Number of bytes in a character row of the text window.
985	>034c						textWindowWidthInBytes: .fill 2
986							; &4E 1 Most significant byte of address of first byte of screen memory.
987	>034e						startScreenAddressHighByte: .fill 1
988							; &4F 1 Number of bytes in a character.
989	>034f						bytesPerCharacter: .fill 1
990							; &50 2 Address of byte in top left corner of screen display.
991	>0350						screenTopLeftAddress: .fill 2
992							; &52 2 Number of bytes in a character row of the whole screen.
993	>0352						bytesPerCharacterRow: .fill 2
994							; &54 1 Most significant byte of number of bytes of screen memory.
995	>0354						screenSizeHighByte: .fill 1
996							; &55 1 Current screen mode (in range 0â<80><93>7, i.e. without regard to â<80><98>shadowingâ<80><99>).
997	>0355						currentScreenMODE: .fill 1
998							; &56 1 Memory mode: 0 for 20K modes, 1 for 16K modes, 2 for 10K modes, 3 for 8K modes, 4 for 1K modes.
999	>0356						currentScreenMODEGroup: .fill 1
1000							; &57 1 Foreground text colour mask.
1001	>0357						foregroundTextColour: .fill 1
1002							; &58 1 Background text colour mask.
1003	>0358						backgroundTextColour: .fill 1
1004							; &59 1 0 if plotting graphics foreground, 8 if plotting graphics background.
1005	>0359						graphicsPlotState: .fill 1
1006							; &5A 1 Current graphics plot mode (usually set to one of following two reduced mod 16).
1007	>035a						graphicsPlotMode: .fill 1
1008							; &5B 1 Current graphics foreground plot mode (as set by VDU 18).
1009	>035b						foregroundGCOLMode: .fill 1
1010							; &5C 1 Current graphics background plot mode (as set by VDU 18).
1011	>035c						backgroundGCOLMode: .fill 1
1012							; &5D 2 Address of routine to process current VDU sequence.
1013	>035d						jumpVector: .fill 2
1014							; &5F 1 Value for 6845 register 10 to revert to on leaving cursor editing.
1015	>035f						lastCursorStartRegisterValue: .fill 1
1016							; &60 1 (Number of logical colours)â<88><92>1 (0 if Teletext).
1017	>0360						numberOfLogicalColoursMinusOne: .fill 1
1018							; &61 1 (Number of pixels/byte)â<88><92>1 (0 if not graphics).
1019	>0361						pixelsPerByteMinusOne: .fill 1
1020							; &62 1 Mask for leftmost pixel in a byte.
1021	>0362						colourMaskLeft: .fill 1
1022							; &63 1 Mask for rightmost pixel in a byte.
1023	>0363						colourMaskRight: .fill 1
1024							; &64 1 Output cursor X coordinate when cursor editing, but input cursor X coordinate when cursor editing and inside an â<80><98>unknown PLOT codesâ<80><99> routine.
1025	>0364						editCursorXPosition: .fill 1
1026							; &65 1 Output cursor Y coordinate when cursor editing, but input cursor Y coordinate when cursor editing and inside an â<80><98>unknown PLOT codesâ<80><99> routine.
1027	>0365						editCursorYPosition: .fill 1
1028							; &66 1 Cursor control flags (as set by VDU 23 16).
1029	.0366						cursorFlags: .block
1030	>0366						                .fill 1
1031							; MasRef E.3-18
1032	=$40						noSpecialVDU5Actions=$40
1033	=$20						noMoveCursorAfterPrint=$20
1034	=$10						noVerticalScroll=$10
1035	=$08						swapAxes=$08                    ;if set, X=vert; if clear, X=horiz
1036	=$04						invertVertical=$04              ;if set, vert=up; if clear, vert=down
1037	=$02						invertHorizontal=$02            ;if set, horiz=left; if clear, horiz=right
1038	=$01						scrollProtect=$01
1039							                .endblock
1040							; &67 1 Dot pattern (as set by VDU 23 6).
1041	>0367						dotPattern: .fill 1
1042							; &68 1 Current state of dot pattern.
1043	>0368						dotPatternState: .fill 1
1044							; &69 1 0 if colour being plotted is solid, non-zero if colour is an ECF
1045	>0369						isColourECF: .fill 1
1046							; &6A 1 0 if graphics foreground colour is solid, non-zero if foreground colour is an ECF
1047	>036a						isForegroundECF: .fill 1
1048							; &6B 1 0 if graphics background colour is solid, non-zero if background colour is an ECF
1049	>036b						isBackgroundECF: .fill 1
1050							; &6C 1 Top bit set when cursor is in "column 81".
1051	>036c						column81: .fill 1
1052							; &6D 1 Current graphics foreground colour (as set by VDU 18).
1053	>036d						foregroundGraphicsColour: .fill 1
1054							; &6E 1 Current graphics background colour (as set by VDU 18)
1055	>036e						backgroundGraphicsColour: .fill 1
1056							; &6Fâ<80><93>&7E Software copy of the current palette.
1057	>036f						currentPalette: .fill 16
1058							; &7F 1 Reserved.
1059	>037f						reserved: .fill 1
1060							                .endstruct
1064							                .endvirtual

1066							; vduQueueItemAddr: .function index
1067							;                 .cerror index<0||index>=vdu.queueSize,"bad VDU queue index"
1068							;                 .endfunction vdu.queue+vdu.queueSize-1-index

1070							; Presumed addresses in ANDY that don't happen to coincide with other
1071							; labels.
1072							;
1073							; MasRef E.4-5, MasRef F.6-10
1074							;
1075							; &8000-83FF  RAM  Soft key expansions buffer
1076							; &8400â<80><93>87FF  RAM  VDU workspace.
1077							; &8800â<80><93>07    RAM  ECF pattern 1 definition.
1078							; &8808â<80><93>0F    RAM  ECF pattern 2 definition.
1079							; &8810â<80><93>17    RAM  ECF pattern 3 definition.
1080							; &8818â<80><93>1F    RAM  ECF pattern 4 definition.
1081							; &8820â<80><93>27    RAM  Current foreground ECF pattern or solid colour.
1082							; &8828â<80><93>2F    RAM  Current background ECF pattern or solid colour.
1083							; &8830â<80><93>BF    RAM  VDU workspace.
1084							; &88C0â<80><93>FF    RAM  Reserved for future expansion.
1085							; &8900â<80><93>FF    RAM  Current definitions of characters &20â<80><93>3F.
1086							; &8A00â<80><93>FF    RAM  Current definitions of characters &40â<80><93>5F.
1087							; &8B00â<80><93>FF    RAM  Current definitions of characters &60â<80><93>7F.
1088							; &8C00â<80><93>FF    RAM  Current definitions of characters &80â<80><93>9F.
1089							; &8D00â<80><93>FF    RAM  Current definitions of characters &A0â<80><93>BF.
1090							; &8E00â<80><93>FF    RAM  Current definitions of characters &C0â<80><93>DF.
1091							; &8F00â<80><93>FF    RAM  Current definitions of characters &E0â<80><93>FF.

1093							VDUCoordinate: .struct
1094	>0000						x: .fill 2
1095	>0002						y: .fill 2
1096							                .endstruct

1098							VDUAABB: .struct
1099	.0000						min: .dstruct VDUCoordinate
1094	>0000						x: .fill 2
1095	>0002						y: .fill 2
1096							                .endstruct
1100	.0004						max: .dstruct VDUCoordinate
1094	>0004						x: .fill 2
1095	>0006						y: .fill 2
1096							                .endstruct
1101							                .endstruct

1103							GenericWorkspaceVDUVariables: .struct
1104	.0000						_28:
1105	>0000						                .fill 1
1106	.0001						_29:
1107	>0001						                .fill 1
1108	.0002						_2A:
1109	>0002						                .fill 1
1110	.0003						_2B:
1111	>0003						                .fill 1
1112	.0004						_2C:
1113	>0004						                .fill 1
1114	.0005						_2D:
1115	>0005						                .fill 1
1116	.0006						_2E:
1117	>0006						                .fill 1
1118	.0007						_2F:
1119	>0007						                .fill 1
1120	.0008						_30:
1121	>0008						                .fill 1
1122	.0009						_31:
1123	>0009						                .fill 1
1124	.000a						_32:
1125	>000a						                .fill 1
1126	.000b						_33:
1127	>000b						                .fill 1
1128	.000c						_34:
1129	>000c						                .fill 1
1130	.000d						_35:
1131	>000d						                .fill 1
1132	.000e						_36:
1133	>000e						                .fill 1
1134	.000f						_37:
1135	>000f						                .fill 1
1136	.0010						_38:
1137	>0010						                .fill 1
1138	.0011						_39:
1139	>0011						                .fill 1
1140	.0012						_3A:
1141	>0012						                .fill 1
1142	.0013						_3B:
1143	>0013						                .fill 1
1144	.0014						_3C:
1145	>0014						                .fill 1
1146	.0015						_3D:
1147	>0015						                .fill 1
1148	.0016						_3E:
1149	>0016						                .fill 1
1150	.0017						_3F:
1151	>0017						                .fill 1
1152	.0018						_40:
1153	>0018						                .fill 1
1154	.0019						_41:
1155	>0019						                .fill 1
1156	.001a						_42:
1157	>001a						                .fill 1
1158	.001b						_43:
1159	>001b						                .fill 1
1160	.001c						_44:
1161	>001c						                .fill 1
1162	.001d						_45:
1163	>001d						                .fill 1
1164	.001e						_46:
1165	>001e						                .fill 1
1166	.001f						_47:
1167	>001f						                .fill 1
1168	.0020						_48:
1169	>0020						                .fill 1
1170	.0021						_49:
1171	>0021						                .fill 1
1172							                .endstruct

1174							HorizontalLineFillWorkspaceZP: .struct
1175	>0000						notByteMatch: .fill 1
1176	>0001						a: .fill 1
1177	>0002						b: .fill 2
1178							;c: .fill 2
1179	>0004						pixelsX: .fill 2
1180	>0006						d: .fill 1
1181	>0007						resultEOR: .fill 1
1182							                .endstruct

1184							MoveOrCopyRectangleWorkspaceVDUVariables: .struct
1185	.0000						src: .dstruct VDUAABB
1099	.0000						min: .dstruct VDUCoordinate
1094	>0000						x: .fill 2
1095	>0002						y: .fill 2
1096							                .endstruct
1100	.0004						max: .dstruct VDUCoordinate
1094	>0004						x: .fill 2
1095	>0006						y: .fill 2
1096							                .endstruct
1101							                .endstruct
1186	>0008						                .fill 4
1187	.000c						dest: .dstruct VDUAABB
1099	.000c						min: .dstruct VDUCoordinate
1094	>000c						x: .fill 2
1095	>000e						y: .fill 2
1096							                .endstruct
1100	.0010						max: .dstruct VDUCoordinate
1094	>0010						x: .fill 2
1095	>0012						y: .fill 2
1096							                .endstruct
1101							                .endstruct
1188	>0014						                .fill 9
1189	.001d						copy:
1190	>001d						                .fill 1         ;0=move, 2=copy
1191							                .endstruct

1193							HorizontalLineFillWorkspaceVDUVariables: .struct
1194	>0000						                .fill 6
1195	.0006						pixelsX:                        ;2e
1196	>0006						                .fill 2
1197	.0008						pixelsY:                        ;30
1198	>0008						                .fill 2
1199	.000a						pixelsRightEndX:
1200	>000a						                .fill 2         ;32
1201	.000c						pixelsLimitX:                   ;34
1202	>000c						                .fill 2
1203							                .endstruct

1205							HorizontalLineFillWorkspaceANDY: .struct
1206	>0000						ecfPattern: .fill 8
1207							                .endstruct

1209	=16						softKeyCount=16
1210	=$400						softKeyDataTotalSize=$400

1212							                .virtual $8000
1213	.8000						andy: .block
1214	.8000						softKeys: .block
1215	>8000						stringLSBs: .fill softKeyCount
1216	>8010						endLSB: .fill 1
1217	>8011						stringMSBs: .fill softKeyCount
1218	>8021						endMSB: .fill 1
1219	.8022						strings:
1220	>8022						                .fill softKeys+$400-*
1221	.8400						end:
1222							                .endblock
1223	>8400						                .fill $8800-*;(softKeyCount*2+1)
1224	.8800						ecfPatterns:
1225	>8800						ecfPattern1: .fill 8
1226	>8808						ecfPattern2: .fill 8
1227	>8810						ecfPattern3: .fill 8
1228	>8818						ecfPattern4: .fill 8
1229	.8820						currentECFPatterns:
1230	>8820						fgECFPattern: .fill 8
1231	>8828						bgECFPattern: .fill 8
1232	.8830						workspace:
1233							                .union
1234	.8830						hlfw: .dstruct HorizontalLineFillWorkspaceANDY
1206	>8830						ecfPattern: .fill 8
1207							                .endstruct
1235	>8830						                .fill 208
1236							                .endunion
1237	.8900						softCharacterDefinitions:
1238	>8900						                .fill (256-32)*8
1239							                .cerror (<andy.softCharacterDefinitions)!=0,"Soft character definitions must be page aligned"
1240							                .cerror *!=$9000,"ANDY is the wrong size"
1241							                .endblock
1242							                .endvirtual


1245	=$8000						L8000=$8000
1246	=$8001						L8001=$8001
1247	=$8002						L8002=$8002
1248	=$8004						L8004=$8004
1249	=$8010						L8010=$8010
1250	=$8011						L8011=$8011
1251	=$8012						L8012=$8012
1252							                ;l8011=$8011
1253							                ;l8012=$8012
1254	=$8021						L8021=$8021

1256							; see $d40d, $d4ae
1257							;
1258							; (suspect these are actually references to $8840-$104 and $8848-$104)
1259	=$873c						L873C=$873c
1260	=$8744						L8744=$8744

1262	=$8400						L8400=$8400
1263	=$8500						L8500=$8500
1264	=$8600						L8600=$8600
1265	=$8700						L8700=$8700
1266	=$87f8						L87F8=$87f8
1267	=$87ff						L87FF=$87FF
1268	=$8800						L8800=$8800
1269	=$8803						L8803=$8803
1270	=$8804						L8804=$8804
1271	=$881e						L881E=$881E
1272	=$8820						L8820=$8820
1273	=$8830						L8830=$8830
1274	=$8831						L8831=$8831
1275	=$8832						L8832=$8832
1276	=$8833						L8833=$8833
1277	=$8834						L8834=$8834
1278	=$8835						L8835=$8835
1279	=$8836						L8836=$8836
1280	=$8837						L8837=$8837
1281	=$8838						L8838=$8838
1282	=$8839						L8839=$8839
1283	=$883a						L883A=$883a
1284	=$883b						L883B=$883b
1285	=$883c						L883C=$883C
1286	=$883d						L883D=$883D
1287	=$883e						L883E=$883e
1288	=$883f						L883F=$883f
1289	=$8840						L8840=$8840
1290	=$8841						L8841=$8841
1291	=$8842						L8842=$8842
1292	=$8843						L8843=$8843
1293	=$8844						L8844=$8844
1294	=$8845						L8845=$8845
1295	=$8846						L8846=$8846
1296	=$8847						L8847=$8847
1297	=$8848						L8848=$8848
1298	=$8849						L8849=$8849
1299	=$884a						L884A=$884a
1300	=$884b						L884B=$884b
1301	=$884c						L884C=$884c
1302	=$884d						L884D=$884d
1303	=$884e						L884E=$884e

1305							                ; written to during startup
1306	=$fe8e						LFE8E=$fe8e

1308							;-------------------------------------------------------------------------

1310							                .virtual $00
1311							                .union
1312	.0000						tubeOSFILEParameterBlock: .dstruct OSFILEParameterBlock
284	.0000						fileName:
285	>0000						                .fill 2
286	.0002						addresses:
287	.0002						load:
288	>0002						                .fill 4
289	.0006						exec:
290	>0006						                .fill 4
291	.000a						length:
292	.000a						saveStart:
293	>000a						                .fill 4
294	.000e						attributes:
295	.000e						saveEnd:
296	>000e						                .fill 4
297							                .endstruct
1313	.0000						tubeOSGBPBParameterBlock: .dstruct OSGBPBParameterBlock
253	.0000						handle:
254	>0000						                .fill 1
255	.0001						address:
256	>0001						                .fill 4
257	.0005						count:
258	>0005						                .fill 4
259	.0009						ptr:
260	>0009						                .fill 4
261							                .endstruct
1314	>0000						tubeLanguageHostAddr: .fill 2
1315							                .endunion
1316	>0012						tubeTransferAddr: .fill 2
1317	>0014						tubeNotClaimed: .fill 1            ;bit 7 clear if tube claimed
1318	>0015						tubeClaimantID: .fill 1
1319	.0016						tubeBrkHandlerAddr:
1320							                ; Tube BRK handler sits here.
1321							                .endv

1323	=$700						tubeStringBuffer=$700
1324	=$0128						tubeOSWORDBuffer=$0128

1326							;-------------------------------------------------------------------------

1328							                .virtual $53
1329	>0053						tubeLanguageParasiteAddr: .fill 4
1330							                .endv

1332							; MasRef E.4-4
1333							                .virtual $d0
1334	.00d0						STATE: .block
1335	>00d0						                .fill 1
1336							                ; D.2-32
1337	=$01						isPrinterEnabled=$01
1338	=$02						isScrollingDisabled=$02
1339	=$04						isPagedScrolling=$04
1340	=$08						isTextWindow=$08
1341	=$10						isShadowMode=$10
1342	=$20						isVDU5=$20
1343	=$40						isCursorEditing=$40
1344	=$80						isVDU21=$80
1345							                .bend

1347	>00d1						ZMASK: .fill 1                       ;Pixel mask
1348	>00d2						ZORA: .fill 1                        ;Text OR mask
1349	>00d3						ZEOR: .fill 1                        ;Text EOR mask
1350	>00d4						ZGORA: .fill 1                       ;Graphics OR mask
1351	>00d5						ZGEOR: .fill 1                       ;Graphics EOR mask
1352	>00d6						ZMEMG: .fill 2                       ;Graphics pointer
1353	>00d8						ZMEMT: .fill 2                       ;Text pointer
1354	>00da						ZTEMP: .fill 2                       ;Temporary space
1355	>00dc						ZTEMPB: .fill 2                      ;Temporary space
1356	>00de						ZTEMPC: .fill 2                      ;Temporary space
1357	>00e0						ZTEMPD: .fill 2                      ;Temporary space
1358							                .endv

1360							                .virtual ZTEMP
1361	.00da						zhlfw: .dstruct HorizontalLineFillWorkspaceZP
1175	>00da						notByteMatch: .fill 1
1176	>00db						a: .fill 1
1177	>00dc						b: .fill 2
1178							;c: .fill 2
1179	>00de						pixelsX: .fill 2
1180	>00e0						d: .fill 1
1181	>00e1						resultEOR: .fill 1
1182							                .endstruct
1362							                .endv


1365	=$f8						softKeyExpansionPtr=$f8       ;pointer to current char when expanding soft key.
1366	=$fa						SEIWKA=$fa
1367	=$fb						SEIWKB=$fb

1369	=$d8						vduWriteCursor=$d8

1371	=$d00						nmiEntryPoint=$d00

1373	=0						gcolModeOverwrite=0
1374	=1						gcolModeOR=1
1375	=2						gcolModeAND=2
1376	=3						gcolModeEOR=3
1377	=4						gcolModeInvert=4
1378	=5						gcolModeLeave=5

1380							;-------------------------------------------------------------------------

1382							StarKEYWorkspace: .struct
1383	>0000						newStringLength: .fill 1
1384	>0001						destPtr: .fill 2
1385	>0003						srcPtr: .fill 2
1386	>0005						counter: .fill 2
1387							                .endstruct

1389							OSGBPBWorkspace: .struct
1390	>0000						ptr: .fill 2
1391							                .endstruct

1393							ParseFileNameFSWorkspace: .struct
1394	>0000						fsInfoOffset: .fill 1
1395							                .endstruct

1397							OSCLIWorkspace: .struct
1398	>0000						tablePtr: .fill 2
1399							                .endstruct

1401							                ; TODO - could do being renamed, as it's used (in the
1402							                ; same way) by *UNPLUG and *INSERT.
1403							StarROMSWorkspace: .struct
1404	>0000						insertedFlagMask: .fill 1
1405							                .endstruct

1407							TerminalHELPWorkspace: .struct
1408	>0000						tablePtr: .fill 2
1409							                .endstruct

1411							                ; TODO - tediously verbose names. Acronyms work well
1412							                ; enough for the VDU variables. Do the same thing
1413							                ; here.
1414							                .virtual $b0
1415							                .union
1416	.00b0						starKEYWorkspace: .dstruct StarKEYWorkspace
1383	>00b0						newStringLength: .fill 1
1384	>00b1						destPtr: .fill 2
1385	>00b3						srcPtr: .fill 2
1386	>00b5						counter: .fill 2
1387							                .endstruct
1417	.00b0						osgbpbWorkspace: .dstruct OSGBPBWorkspace
1390	>00b0						ptr: .fill 2
1391							                .endstruct
1418	.00b0						parseFileNameFSWorkspace: .dstruct ParseFileNameFSWorkspace
1394	>00b0						fsInfoOffset: .fill 1
1395							                .endstruct
1419	.00b0						oscliWorkspace: .dstruct OSCLIWorkspace
1398	>00b0						tablePtr: .fill 2
1399							                .endstruct
1420	.00b0						starROMSWorkspace: .dstruct StarROMSWorkspace
1404	>00b0						insertedFlagMask: .fill 1
1405							                .endstruct
1421	.00b0						terminalHELPWorkspace: .dstruct TerminalHELPWorkspace
1408	>00b0						tablePtr: .fill 2
1409							                .endstruct
1422							                .endunion
1423							                .endvirtual

1425							;-------------------------------------------------------------------------

1427							; ROM number containing Terminal
1428	=15						terminalROM=15

1430							; ROM number containing the extXXXX entry points
1431							                .if version==320
1435							                .elsif version>=400
1436	=15						extROM=15
1437							                .endif

1439							; Base page for VDU routines
1440	=$c0						vduRoutinesPage=$c0

1442							                .if version<500
1443	=14						cmosBytesOffset=RTC.ram
1446							                .endif

1448							CMOSBytes: .struct
1449	>0000						econetStationNumber: .fill 1
1450	>0001						fileServerStationNumber: .fill 1
1451	>0002						fileServerNetworkNumber: .fill 1
1452	>0003						printerServerStationNumber: .fill 1
1453	>0004						printerServerNetworkNumber: .fill 1
1454	.0005						defaultROMs: .block
1455	>0005						                .fill 1
1456	=0						fsShift=0
1457	=4						languageShift=4
1458							                .endblock

1460	>0006						insertedROMs: .fill 2

1462	>0008						editROMByte: .fill 1
1463	>0009						telecommsByte: .fill 1

1465							                ; TODO - don't need to say "default" so much...
1466	.000a						defaults0: .block
1467	>000a						                .fill 1
1468	=7						defaultMODEMask=7
1469	=8						defaultSHADOWMask=8
1470	=16						defaultInterlaceMask=16
1471	=7						defaultTVMask=7
1472	=5						defaultTVShift=5
1473							                .endblock

1475	.000b						defaults1: .block
1476	>000b						                .fill 1
1477	=7						defaultFDRIVEMask=7
1478	=8						defaultShiftLockMask=8
1479	=16						defaultNoLockMask=16
1480	=32						defaultCapsLockMask=32
1481	=64						defaultADFSLoadDirMask=64
1482	=128						defaultFloppyDrive=128
1483							                .endblock

1485	>000c						keyboardAutoRepeatDelay: .fill 1
1486	>000d						keyboardAutoRepeatRate: .fill 1
1487	>000e						printerIgnoreChar: .fill 1

1489	.000f						defaults2: .block
1490	>000f						                .fill 1
1491	=1						tubeOnMask=1
1492	=2						usePrinterIgnoreCharMask=2
1493	=7						serialBaudRateIndexMask=7
1494	=2						serialBaudRateIndexShift=2
1495	=7						fx5SettingMask=7
1496	=5						fx5SettingShift=5
1497							                .endblock

1499	.0010						defaults3: .block
1500	>0010						                .fill 1
1501	=2						loudMask=2
1502	=4						extTubeMask=4
1503	=8						protectedScrollingMask=8
1504	=16						autoBootMask=16
1505	=7						defaultSerialDataFormatMask=7
1506	=5						defaultSerialDataFormatShift=5
1507							                .endblock

1509							                .if version>=500
1528							                .endif

1530							                .endstruct

1532	=$ef						originalA=$ef
1533	=$f0						originalX=$f0
1534	=$f1						originalY=$f1
1535	=$fc						irqTempA=$fc
1536	=$fd						errPtr=$fd                      ;REPTR in OS 1.20
1537	=$ff						escapeFlag=$ff

1539	=$8c0						envelope1Data=$8c0

1541	=$8000						sidewaysROMLanguageEntry=$8000
1542	=$8003						sidewaysROMServiceEntry=$8003
1543							                .virtual $8006
1544	.8006						sidewaysROMType: .block
1545	=32						hasRelocationAddress=32
1546	=64						hasLanguageEntry=64
1547	=128						hasServiceEntry=128
1548							                .endblock
1549							                .endvirtual
1550	=$8007						sidewaysROMCopyrightOffset=$8007
1551	=$8008						sidewaysROMVersion=$8008
1552	=$8009						sidewaysROMName=$8009

1554							;-------------------------------------------------------------------------

1556							                ; [MasRef D.3-22]
1557							ClockStringFormat: .struct
1558	.0000						ddd:
1559	>0000						                .fill 3
1560	>0003						                .fill 1                      ;','
1561	.0004						nn:
1562	>0004						                .fill 2
1563	>0006						                .fill 1                      ;' '
1564	.0007						mmm:
1565	>0007						                .fill 3
1566	>000a						                .fill 1                      ;' '
1567	.000b						yyyy:
1568	>000b						                .fill 4
1569	>000f						                .fill 1                      ;'.'
1570	.0010						hh:
1571	>0010						                .fill 2
1572	>0012						                .fill 1                      ;':'
1573	.0013						mm:
1574	>0013						                .fill 2
1575	>0015						                .fill 1                      ;':'
1576	.0016						ss:
1577	>0016						                .fill 2
1578	.0018						cr:
1579	>0018						                .fill 1                      ;'\n'
1580							                .endstruct

1582							;-------------------------------------------------------------------------

:1	;******  Return to file: mos400.s65

3							                .include "src/terminal_workspace.s65"

:4	;******  Processing file: src/terminal_workspace.s65

1							;-------------------------------------------------------------------------

3							; Not really MOS stuff. This is the Terminal ROM zero page workspace.

5	=$70						oldINSV=$70
6	=$72						oldREMV=$72
7							                .cerror oldREMV!=oldINSV+2,"oldREMV and oldINSV must be adjacent"

9							;-------------------------------------------------------------------------

11							beword .macro value
14							                .endm

16							;-------------------------------------------------------------------------

18							zterm: .struct
19	=$39						numRowsMinusOne=$39
20	=$38						numColumns=$38
21	=$37						numColumnsMinusOne=$37
22							; TODO old INSV and oldREMV should probably go in here too!
23							                .endstruct


:1	;******  Return to file: mos400.s65


5	=400						version=400

7							*=$8000
8							                .dsection utils
9							                .cwarn *>$c000,'utils ROM is too large'

11							*=$c000
12							                .dsection mos
13							                ; there's no need for a size check here - 64tass gives
14							                ; you an error if the code would go past the 64 K
15							                ; barrier.

17							;-------------------------------------------------------------------------

19							; Is there a better way of doing this?
20	=$a006						ext=terminal.ext
21	=$a4c4						plotMoveOrCopyRectangle=ext.plotMoveOrCopyRectangle
22	=$a006						plotEllipseOutline=ext.plotEllipseOutline
23	=$a06d						plotSolidEllipse=ext.plotSolidEllipse

25							;-------------------------------------------------------------------------

27							                .section utils
28							                .include "src/terminal.s65"

:5	;******  Processing file: src/terminal.s65

1							; -*- comment-column:45; -*-

3	.8000						terminal: .block
4							                .if version==320||version==350
21							                .elsif version==400

23	.8000		00		brk #		                brk
24	.8001		00		brk #		                brk
25	.8002		00		brk #		                brk
26	.8003		4c fb a5	jmp $a5fb	                jmp utilsServiceEntryPoint
27	>8006		82				                .byte $82
28	>8007		0c				                .byte copyrightText-1-terminal
29	>8008		00				                .byte $00
30	>8009		4d 4f 53			                .text "MOS"
31	>800c		00				                .byte 0
32	.800d						copyrightText:
33	>800d		28 43 29 31 39 38 34 20		                .text "(C)1984 Acorn"
	>8015		41 63 6f 72 6e
34	>801a		00				                .byte 0

66							                .endif

68							;-------------------------------------------------------------------------

70							                .if version==350
75							                .endif

77							;-------------------------------------------------------------------------

79							                .if version==350
84							                .endif

86							;-------------------------------------------------------------------------

88							                .if version==350
93							                .endif

95							;-------------------------------------------------------------------------

97							                .if version==350
106							                .endif

108							;-------------------------------------------------------------------------

110							                .if version==350
123							                .endif

125							;-------------------------------------------------------------------------

127							                .if version==350
137							                .endif

139							;-------------------------------------------------------------------------

141							; STARTUP
142							; =======


145							                .if version==350             ;stripped_out_reset
151							                .else                        ;stripped_out_reset
152	.801b						reset:                          ;8020
153							                .include "reset.s65"

:6	;******  Processing file: src/reset.s65

1							                .if version==350
3							                .endif
4							                .if version!=350
5	.801b		a9 fe		lda #$fe	                lda #~ACCCON.D
6	.801d		1c 34 fe	trb $fe34	                trb ACCCON
7							                .endif
8							                .if version<500
9	.8020		9c dd df	stz $dfdd	                stz hazel.hasACCCONChanged
10							                .endif
11							                .if version!=350
12	.8023		1c 66 03	trb $0366	                trb $0366
13							                .endif
14	.8026		d8		cld		                cld
15	.8027		a2 ff		ldx #$ff	                ldx #$FF
16	.8029		9a		txs		                txs              ;reset stack
17	.802a		8e 63 fe	stx $fe63	                stx userVIA.ddra ;port A all outputs
18	.802d		a9 cf		lda #$cf	                lda #%11001111
19	.802f		8d 42 fe	sta $fe42	                sta systemVIA.ddrb
20							                .if version==350
23							                .endif
24							                .if version<500
25	.8032		a0 20		ldy #$20	                ldy #RTC.a.dv32768Hz
26	.8034		a2 0a		ldx #$0a	                ldx #RTC.a
27	.8036		20 78 9b	jsr $9b78	                jsr terminal.writeRTCByte
28	.8039		20 bd 99	jsr $99bd	                jsr terminal.finishRTCUpdate
29							                .endif
30							                .if version!=350
31	.803c		a9 0c		lda #$0c	                lda #ACCCON.Y|ACCCON.X       ; page in HAZEL+shadow
32	.803e		0c 34 fe	tsb $fe34	                tsb ACCCON
33							                .if version>=500
36							                .elsif version>=400
37	.8041		20 1d 83	jsr $831d	                jsr clearAllSoundChannelBuffers
38							                .endif
42							                .endif
43							                .if version==350
45							                .else
46	.8044		ad 4e fe	lda $fe4e	                lda systemVIA.ier
47							                .endif
48	.8047		0a		asl a		                asl a
49	.8048		48		pha		                pha
50							                .if version==350
100							                .else
101							                .if version<400
111							                .else
112	.8049		d0 2c		bne $8077	                bne nonPowerOnReset
113	.804b		a2 07		ldx #$07	                ldx #7
114	.804d		20 4b f8	jsr $f84b	                jsr mos.LF8B4
115							                .if version==400
116	.8050		a9 00		lda #$00	                lda #0
119							                .endif
120							                .endif
121	.8052						startClearRAM:
122	.8052		a8		tay		                tay             ;Y=0
123	.8053						clearRAM:
124	.8053		98		tya		                tya             ;A=0
125	.8054		64 01		stz $01		                stz $01
126	.8056		64 00		stz $00		                stz $00         ;start at $0000
127	.8058						clearRAMPageLoop:
128	.8058		91 00		sta ($00),y	                sta ($00),y     ;clear RAM
129	.805a		c8		iny		                iny
130	.805b		d0 fb		bne $8058	                bne clearRAMPageLoop
131	.805d		e6 01		inc $01		                inc $01
132	.805f		a2 40		ldx #$40	                ldx #$40          ;$40=RTI
133	.8061		8e 00 0d	stx $0d00	                stx nmiEntryPoint ;restore the RTI previously written,
134							                                  ;as each iteration will potentially
135							                                  ;overwrite it
136	.8064		a6 01		ldx $01		                ldx $01
137	.8066		e0 e0		cpx #$e0	                cpx #$E0        ;hit the end of RAM?
138	.8068		90 ee		bcc $8058	                bcc clearRAMPageLoop ;branch taken if still more to go
139	.806a		a9 04		lda #$04	                lda #ACCCON.X   ;page out shadow RAM
140	.806c		1c 34 fe	trb $fe34	                trb ACCCON
141	.806f		d0 e2		bne $8053	                bne clearRAM    ;branch taken if shadow RAM bit
142							                             ;previously set - i.e., that was the
143							                             ;first iteration, and we need to go back
144							                             ;to do main RAM
145							                .if version>=400
146	.8071		ad 28 fe	lda $fe28	                lda $fe28
147	.8074		ad 2b fe	lda $fe2b	                lda $fe2b
148							                .endif
149							                .endif
150	.8077						nonPowerOnReset:
151							                .if version>=350
152	.8077		ad 58 02	lda $0258	                lda breakAndESCAPEEffect
153	.807a		4a		lsr a		                lsr a
154	.807b		3a		dec a		                dec a
155	.807c		f0 d4		beq $8052	                beq startClearRAM
156							                .endif
157	.807e		a9 27		lda #$27	                lda #<mos.emptyCommandLine
158	.8080		8d 04 df	sta $df04	                sta hazel.commandLinePointer+0
159	.8083		a9 e7		lda #$e7	                lda #>mos.emptyCommandLine
160	.8085		8d 05 df	sta $df05	                sta hazel.commandLinePointer+1
161	.8088		a9 0c		lda #$0c	                lda #ACCCON.Y|ACCCON.X ; page in MOS ROM, page in main
162							                                       ; RAM
163							                .if version==350
165							                .else
166	.808a		1c 34 fe	trb $fe34	                trb ACCCON
167							                .endif
168	.808d		a9 0f		lda #$0f	                lda #$0F
169	.808f		8d 8e 02	sta $028e	                sta numericKeypadShiftEffect
170							                .if version<500&&version!=350
171	.8092						-
172	.8092		3a		dec a		                dec a
173	.8093		8d 40 fe	sta $fe40	                sta systemVIA.orb
174	.8096		c9 09		cmp #$09	                cmp #$09
175	.8098		b0 f8		bcs $8092	                bcs -
176							                .endif
177	.809a		a2 01		ldx #$01	                ldx #key_ctrl
178							                .if version==350
180							                .else
181	.809c		20 6f f6	jsr $f66f	                jsr mos.interrogateKeyboard
182							                .endif
183	.809f		e0 80		cpx #$80	                cpx #$80        ;Z=0 C=1 if CTRL+BREAK
184	.80a1		20 24 f5	jsr $f524	                jsr mos.updateKeyboardLEDs
185	.80a4		9c 8d 02	stz $028d	                stz lastBREAKType            ;softBREAK
186	.80a7		6a		ror a		                ror a
187	.80a8		a2 9c		ldx #$9c	                ldx #$9c                     ;what is this?
188	.80aa		a0 8d		ldy #$8d	                ldy #$8D                     ;what is this?
189	.80ac		68		pla		                pla
190	.80ad		f0 09		beq $80b8	                beq L80AD
191	.80af		a0 7e		ldy #$7e	                ldy #$7E                     ;what is this?
192	.80b1		90 37		bcc $80ea	                bcc L80DF
193	.80b3		a0 87		ldy #$87	                ldy #$87                     ;what is this?
194	.80b5		ee 8d 02	inc $028d	                inc lastBREAKType
195	.80b8						L80AD:
196	.80b8		ee 8d 02	inc $028d	                inc lastBREAKType
197	.80bb		5a		phy		                phy
198							                .if version==350&&CFA3000
204							                .endif
205							                .if version==350
208							                .elsif version<500
209	.80bc		20 18 91	jsr $9118	                jsr readDefaultMODE          ; Read configured MODE
214							                .endif
215	.80bf		09 08		ora #$08	                ora #CMOSBytes.defaults0.defaultSHADOWMask
216	.80c1		8d 8f 02	sta $028f	                sta startupOptions
217	.80c4		20 42 9b	jsr $9b42	                jsr terminal.readDefaults3 ; Read configured BOOT
218	.80c7		29 10		and #$10	                and #CMOSBytes.defaults3.autoBootMask
219	.80c9		4a		lsr a		                lsr a         ; Reset OSBYTE 255 boot bit (b3) if BOOT
220	.80ca		1c 8f 02	trb $028f	                trb startupOptions
221							                .if version==350
223							                .else
224	.80cd		20 fc 90	jsr $90fc	                jsr terminal.readDefaultTVSettings
225							                .endif
226	.80d0		8c 90 02	sty $0290	                sty tvOffset
227	.80d3		8e 91 02	stx $0291	                stx tvInterlace
228	.80d6		20 42 9b	jsr $9b42	                jsr terminal.readDefaults3
229	.80d9		29 08		and #$08	                and #CMOSBytes.defaults3.protectedScrollingMask
230	.80db		f0 02		beq $80df	                beq L80D4
231	.80dd		a9 01		lda #$01	                lda #VDUVariables.cursorFlags.scrollProtect
232	.80df						L80D4:
233	.80df		8d 66 03	sta $0366	                sta vduv.cursorFlags
234	.80e2		20 0f 95	jsr $950f	                jsr terminal.restoreFont32To255
235	.80e5		7a		ply		                ply
236	.80e6		a2 92		ldx #$92	                ldx #$92
237	.80e8		80 18		bra $8102	                bra initializePage2Loop
238	.80ea						L80DF:
239							                .if version>=500
241							                .endif
242	.80ea		a9 87		lda #$87	                lda #$87             ; Clear MODE bits from OSBYTE 255
243	.80ec		1c 8f 02	trb $028f	                trb startupOptions
244	.80ef		ad 55 03	lda $0355	                lda vduv.currentScreenMODE ; Get current screen MODE b0-b2
245	.80f2		29 07		and #$07	                and #$07
246	.80f4		0c 8f 02	tsb $028f	                tsb startupOptions           ; Copy to OSBYTE 255
247	.80f7		a9 10		lda #$10	                lda #STATE.isShadowMode ; Test shadow screen bit in VDU flags
248	.80f9		24 d0		bit $d0		                bit STATE                      ; Not shadow screen
249	.80fb		f0 05		beq $8102	                beq initializePage2Loop
250	.80fd		a9 80		lda #$80	                lda #$80                     ; Set shadow screen bit in OSBYTE 255
251	.80ff		0c 8f 02	tsb $028f	                tsb startupOptions

253	.8102						initializePage2Loop:
254	.8102		ad 8d 02	lda $028d	                lda lastBREAKType
255	.8105		d0 08		bne $810f	                bne clearPage2Byte           ;taken unless soft BREAK

257							                ; leave the ROM information table alone on a soft
258							                ; BREAK.
259	.8107		e0 b1		cpx #$b1	                cpx #<romInformationTable+16
260	.8109		b0 04		bcs $810f	                bcs clearPage2Byte
261	.810b		e0 a1		cpx #$a1	                cpx #<romInformationTable
262	.810d		b0 0a		bcs $8119	                bcs nextPage2Byte
263	.810f						clearPage2Byte:
264	.810f		9e 00 02	stz $0200,x	                stz $0200,x
265	.8112		e0 cd		cpx #$cd	                cpx #$CD
266	.8114		90 03		bcc $8119	                bcc nextPage2Byte
267	.8116		de 00 02	dec $0200,x	                dec $0200,x                  ;initialize later values to $ff
268	.8119						nextPage2Byte:
269	.8119		e8		inx		                inx
270	.811a		d0 e6		bne $8102	                bne initializePage2Loop

272							                .if version==350
274							                .endif
275	.811c		a2 cf		ldx #$cf	                ldx #$CF
276	.811e						initializeZeroPageLoop:
277	.811e		74 00		stz $00,x	                stz $00,x
278	.8120		e8		inx		                inx
279	.8121		d0 fb		bne $811e	                bne initializeZeroPageLoop
280							                .if version==350
283							                .endif

285	.8123		ad 8d 02	lda $028d	                lda lastBREAKType
286	.8126		d0 1c		bne $8144	                bne L813D                    ;taken if not soft BREAK

288							                .if version!=400
291							                .endif
292	.8128		ad 4b 02	lda $024b	                lda basicROMNumber
293	.812b		48		pha		                pha
294	.812c		ad 44 02	lda $0244	                lda oshwm
295	.812f		48		pha		                pha
296	.8130		ad 57 02	lda $0257	                lda spoolFileHandle
297	.8133		48		pha		                pha
298	.8134		ae 56 02	ldx $0256	                ldx execFileHandle

300	.8137						L8130:
301	.8137		b9 e6 e2	lda $e2e6,y	                lda mos.defaultVectorTable-1,y
302	.813a		99 ff 01	sta $01ff,y	                sta vectors-1,y
303	.813d		88		dey		                dey
304	.813e		c0 21		cpy #$21	                cpy #EVENTV+1-vectors
305	.8140		b0 f5		bcs $8137	                bcs L8130

307	.8142		a0 12		ldy #$12	                ldy #FILEV-vectors

309	.8144						L813D:
310	.8144		b9 e6 e2	lda $e2e6,y	                lda mos.defaultVectorTable-1,y
311	.8147		99 ff 01	sta $01ff,y	                sta vectors-1,y
312	.814a		88		dey		                dey
313	.814b		d0 f7		bne $8144	                bne L813D

315	.814d		ad 8d 02	lda $028d	                lda lastBREAKType
316	.8150		d0 15		bne $8167	                bne L8164
317	.8152		8e 56 02	stx $0256	                stx execFileHandle
318	.8155		68		pla		                pla                          ;restore *SPOOL file handle
319	.8156		c9 04		cmp #$04	                cmp #$04                     ;is it a TAPE or ROM handle?
320	.8158		b0 02		bcs $815c	                bcs L8155                    ;taken if no - keep it

322							                .if version==350
324							                .else
325	.815a		a9 00		lda #$00	                lda #$00          ;auto-close it if TAPE or ROM handle
326							                .endif
327	.815c						L8155:
328	.815c		8d 57 02	sta $0257	                sta spoolFileHandle
329	.815f		68		pla		                pla
330	.8160		8d 44 02	sta $0244	                sta oshwm
331	.8163		68		pla		                pla
332	.8164		8d 4b 02	sta $024b	                sta basicROMNumber
333							                .if version!=400
336							                .endif

338	.8167						L8164:
339							                .if version==350
342							                .elsif version<500
343	.8167		20 41 91	jsr $9141	                jsr readDefaults1
347							                .endif
348	.816a		a2 20		ldx #$20	                ldx #keyboardStatusByte.shiftLockDisengaged
349	.816c		0a		asl a		                asl a
350	.816d		0a		asl a		                asl a                        ;N=defaultCapsLockMask
351	.816e		30 07		bmi $8177	                bmi gotKeyboardStatusByte                    ;taken if defaultCapsLock
352	.8170		a2 30		ldx #$30	                ldx #keyboardStatusByte.shiftLockDisengaged|keyboardStatusByte.capsLockDisengaged
353	.8172		0a		asl a		                asl a                        ;N=defaultNoLockMask
354	.8173		30 02		bmi $8177	                bmi gotKeyboardStatusByte
355	.8175		a2 a0		ldx #$a0	                ldx #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
356	.8177						gotKeyboardStatusByte:
357	.8177		8e 5a 02	stx $025a	                stx keyboardStatusByte
358							                .if version==350
360							                .else
361	.817a		20 9d e5	jsr $e59d	                jsr mos.selectTerminalROM
362	.817d		20 f6 ee	jsr $eef6	                jsr mos.resetKeyRepeat
363							                .endif
364	.8180		ad 8d 02	lda $028d	                lda lastBREAKType
365	.8183		f0 14		beq $8199	                beq L8196
366							                .if version==350
369							                .elsif version<500
370	.8185		20 3c 91	jsr $913c	                jsr readDefaultPrinterIgnoreChar
374							                .endif
375	.8188		8d 86 02	sta $0286	                sta printerIgnoreChar
376							                .if version==350
378							                .elsif version<500
379	.818b		20 3e 9b	jsr $9b3e	                jsr readDefaults2
380	.818e		4a		lsr a		                lsr a                        ;C=tubeOn
381	.818f		4a		lsr a		                lsr a                        ;C=usePrinterIgnoreChar
384							                .endif
385	.8190		6e 46 02	ror $0246	                ror noignoreState
386							                .if version==350
389							                .elsif version<500
390	.8193		20 26 91	jsr $9126	                jsr readDefaultFX5Settings
394							                .endif
395	.8196		8d 85 02	sta $0285	                sta printerDriverType
396	.8199						L8196:
397							                .if version==400
398	.8199		a2 01		ldx #$01	                ldx #1
447							                .endif

449	.819b		a9 7f		lda #$7f	                lda #$7F
450	.819d						initializeVIAInterruptsLoop:
451	.819d		9d 4d fe	sta $fe4d,x	                sta systemVIA.ifr,x
452	.81a0		9d 6d fe	sta $fe6d,x	                sta userVIA.ifr,x
453	.81a3		ca		dex		                dex
454	.81a4		10 f7		bpl $819d	                bpl initializeVIAInterruptsLoop

456							                .if version!=350
457							                ; Let through 1 IRQ.
458	.81a6		58		cli		                cli
459	.81a7		78		sei		                sei

461							                ; $FC was cleared above, so if bit 6 is set, there
462							                ; must have been an IRQ (as A=$7f).
463	.81a8		24 fc		bit $fc		                bit $FC
464	.81aa		50 03		bvc $81af	                bvc +
465	.81ac		20 be f6	jsr $f6be	                jsr mos.call1MHzBusHook
466	.81af						+
467							                .endif

469							                .if version!=400
471							                .else
472	.81af		a2 c2		ldx #$c2	                ldx #$80|VIA.irq.t1|VIA.irq.ca1
473							                .endif
474	.81b1		8e 4e fe	stx $fe4e	                stx systemVIA.ier

476							                .if version>=500
479							                .endif

481	.81b4		a2 04		ldx #$04	                ldx #VIA.pcr.cb2InputNegativeActiveEdge|VIA.pcr.cb1NegativeActiveEdge|VIA.pcr.ca2InputPositiveEdge|VIA.pcr.ca1NegativeActiveEdge
482	.81b6		8e 4c fe	stx $fe4c	                stx systemVIA.pcr
483	.81b9		a9 40		lda #$40	                lda #VIA.acr.t1Continuous|VIA.acr.t2Timer|VIA.acr.srDisabled|VIA.acr.pbLatchDisabled|VIA.acr.paLatchDisabled
484	.81bb		8d 4b fe	sta $fe4b	                sta systemVIA.acr
485	.81be		a9 0e		lda #$0e	                lda #$0E
486	.81c0		8d 46 fe	sta $fe46	                sta systemVIA.t1lL
487	.81c3		8d 6c fe	sta $fe6c	                sta userVIA.pcr              ;VIA.pcr.cb2InputNegativeActiveEdge|VIA.pcr.cb1NegativeActiveEdge|VIA.pcr.ca2HighOutput|VIA.pcr.ca1NegativeActiveEdge
488							                .if version==350
492							                .endif
493	.81c6		a9 27		lda #$27	                lda #$27
494	.81c8		8d 47 fe	sta $fe47	                sta systemVIA.t1lH
495	.81cb		8d 45 fe	sta $fe45	                sta systemVIA.t1cH

497							                .if version==350||version>=400
498	.81ce		20 1d 83	jsr $831d	                jsr clearAllSoundChannelBuffers
506							                .endif

508							                .if version==350
510							                .else
511	.81d1		20 ff f6	jsr $f6ff	                jsr mos.osbyte7A
512							                .endif
513	.81d4		86 ed		stx $ed		                stx firstKeyPressedInternal
514	.81d6		a2 00		ldx #$00	                ldx #$00
515							                .if version>=500
517							                .endif
518	.81d8		20 25 e8	jsr $e825	                jsr mos.purgeBuffer

520							                .if version!=400
540							                .endif

542	.81db		20 42 9b	jsr $9b42	                jsr terminal.readDefaults3
543	.81de		89 02		bit #$02	                bit #CMOSBytes.defaults3.loudMask
544	.81e0		d0 05		bne $81e7	                bne L8211
545	.81e2		a9 f0		lda #$f0	                lda #$F0
546	.81e4		8d 64 02	sta $0264	                sta bellSound
547	.81e7						L8211:
548							                .if version!=350
549	.81e7		20 9d e5	jsr $e59d	                jsr mos.selectTerminalROM
550							                .endif

552	.81ea		ae 84 02	ldx $0284	                ldx softKeyConsistencyFlag
553	.81ed		f0 03		beq $81f2	                beq checkResetType
554	.81ef		20 09 ef	jsr $ef09	                jsr mos.osbyte12
555	.81f2						checkResetType:
556	.81f2		ad 8d 02	lda $028d	                lda lastBREAKType
557	.81f5		f0 03		beq $81fa	                beq romsScanned                    ;taken if soft BREAK

559							                .if version==350
562							                .else
563	.81f7		4c b0 e3	jmp $e3b0	                jmp mos.scanROMs
564							                .endif

566	.81fa						romsScanned:
567	.81fa		ad 8f 02	lda $028f	                lda startupOptions
568	.81fd		20 99 c7	jsr $c799	                jsr mos.setStartupMODE
569	.8200		ad 8d 02	lda $028d	                lda lastBREAKType
570	.8203		3a		dec a		                dec a
571							                .if version>=510
574							                .else
575	.8204		d0 54		bne $825a	                bne softReset                    ;taken if not power-on reset
576							                .endif

578	.8206						powerOnReset:
579							                .if version>=500
595							                .endif
596	.8206						checkForNVRAMReset:

598							                .if version>=510
617							                .endif

619							                .if version<510
620	.8206		a5 ed		lda $ed		                lda firstKeyPressedInternal
621							                .endif
622	.8208						checkForResetKey:
623	.8208		c9 33		cmp #$33	                cmp #key_r
624	.820a		d0 4e		bne $825a	                bne softReset                    ;taken if R not pressed

626							                .if version<500
627							                .if CFA3000
629							                .else
630							                ; Reset CMOS RAM
631	.820c						resetCMOSRAM:
632	.820c		a2 31		ldx #$31	                ldx #size(RTC.ram)-1
633	.820e						resetCMOSRAMLoop:
634	.820e		da		phx		                phx
635	.820f		a0 00		ldy #$00	                ldy #$00
636							                .if version==350
641							                .endif
642	.8211		20 70 9b	jsr $9b70	                jsr terminal.writeCMOSByte
643	.8214		fa		plx		                plx
644	.8215		ca		dex		                dex
645							                .if version==350
647							                .else
648	.8216		10 f6		bpl $820e	                bpl resetCMOSRAMLoop
649							                .endif

651							                .if version!=350
652							                ; Initialize ROM insertion flags.
653	.8218		a0 ff		ldy #$ff	                ldy #$FF
654	.821a		a2 06		ldx #$06	                ldx #CMOSBytes.insertedROMs+0
655	.821c		20 70 9b	jsr $9b70	                jsr writeCMOSByte
656	.821f		a2 07		ldx #$07	                ldx #CMOSBytes.insertedROMs+1
657	.8221		20 70 9b	jsr $9b70	                jsr writeCMOSByte
658							                .endif

660							                .endif
672							                .endif

674							                .if version==350
676							                .else

678							                .if version>=500
691							                .endif

693	.8224		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
694							                .if version>=500
696							                .endif
697	>8227		0d 0a				                .text 13,10
698							                .if version<500
699	>8229		43 4d 4f 53 20 52 41 4d		                .text "CMOS RAM reset"
	>8231		20 72 65 73 65 74
702							                .endif
703	>8237		0d 0a 50 72 65 73 73 20		                .text 13,10,"Press break to continue"
	>823f		62 72 65 61 6b 20 74 6f 20 63 6f 6e 74 69 6e 75
	>824f		65
704	>8250		0d 0a 00			                .text 13,10,0
705							                .endif

707	.8253		a9 03		lda #$03	                lda #$03
708	.8255		8d 58 02	sta $0258	                sta breakAndESCAPEEffect
709	.8258						hang:
710	.8258		80 fe		bra $8258	                bra hang

712							;-------------------------------------------------------------------------

714							                .if version==350
741							.endif

743							;-------------------------------------------------------------------------

745	.825a						softReset:
746							                .if version==350
749							                .else
750	.825a		20 b9 eb	jsr $ebb9	                jsr mos.selectHAZEL
751							                .endif
752	.825d		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
753	.8260		9c d5 df	stz $dfd5	                stz hazel.moveDestHandle
754	.8263		a0 ca		ldy #$ca	                ldy #$CA
755	.8265		20 26 e9	jsr $e926	                jsr mos.insertCharacterIntoKeyboardBuffer
756	.8268		20 38 f1	jsr $f138	                jsr mos.osbyte247EntryPoint
757	.826b		ad 8d 02	lda $028d	                lda lastBREAKType
758	.826e		f0 03		beq $8273	                beq L829D
759							                .if version==400
760	.8270		20 bf eb	jsr $ebbf	                jsr mos.LEBBF
763							                .endif
764	.8273						L829D:
765							                .if version<500
766							                .if version==350
768							                .else
769	.8273		20 3e 9b	jsr $9b3e	                jsr readDefaults2
770							                .endif
771	.8276		4a		lsr a		                lsr a
772	.8277		90 2d		bcc $82a6	                bcc continueSoftReset
773	.8279		20 42 9b	jsr $9b42	                jsr terminal.readDefaults3

775							                .if version==350
783							                .else
784	.827c		89 04		bit #$04	                bit #CMOSBytes.defaults3.extTubeMask
785	.827e		08		php		                php
786	.827f		a9 10		lda #$10	                lda #ACCCON.ITU
787	.8281		1c 34 fe	trb $fe34	                trb ACCCON
788	.8284		28		plp		                plp
789	.8285		d0 03		bne $828a	                bne L82B4
790	.8287		0c 34 fe	tsb $fe34	                tsb ACCCON
791							                .endif
792	.828a						L82B4:
793							                .if version==350
795							                .else
796	.828a		20 85 e3	jsr $e385	                jsr mos.LE375
797							                .endif

799	.828d		b0 0d		bcs $829c	                bcs foundTube

801							                .if version==350
803							                .else
804	.828f		ad 34 fe	lda $fe34	                lda ACCCON                    ; Toggle Internal/External Tube
805							                .endif
806	.8292		49 10		eor #$10	                eor #ACCCON.ITU
807							                .if version==350
809							                .else
810	.8294		8d 34 fe	sta $fe34	                sta ACCCON
811							                .endif

813							                .if version==350
815							                .else
816	.8297		20 85 e3	jsr $e385	                jsr mos.LE375
817							                .endif

819							                .endif

:5	;******  Return to file: src/terminal.s65

154							                .endif

156							                .if version<500
157	.829a		90 0a		bcc $82a6	                bcc continueSoftReset        ;taken if Tube not found
158	.829c						foundTube:
159	.829c		a2 ff		ldx #$ff	                ldx #romServiceCallTubeMainInitialisation
160	.829e		20 52 ec	jsr $ec52	                jsr mos.makeROMServiceCall   ;
161	.82a1		d0 03		bne $82a6	                bne continueSoftReset        ; Not claimed, step past
162	.82a3		ce 7a 02	dec $027a	                dec tubePresence ; Tube PreInit claimed, set TubeFlag to &FF, Tube present
163							                .endif
164	.82a6						continueSoftReset:
165	.82a6		ad 8d 02	lda $028d	                lda lastBREAKType ; Soft Break, don't ask about workspace
166	.82a9		f0 27		beq $82d2	                beq L82FC
167	.82ab		a0 dc		ldy #$dc	                ldy #$DC                     ; Start high workspace at &DC00 and work downwards
168	.82ad		a2 24		ldx #$24	                ldx #romServiceCallCountDynamicHAZELWorkspace ; Ask ROMs how much private high workspace required
169	.82af		20 52 ec	jsr $ec52	                jsr mos.makeROMServiceCall   ;
170	.82b2		a2 21		ldx #$21	                ldx #romServiceCallAbsoluteHAZELWorkspaceClaim ; Ask ROMs for maximum shared high workspace required
171	.82b4		20 52 ec	jsr $ec52	                jsr mos.makeROMServiceCall   ;
172	.82b7		5a		phy		                phy                          ; Save top of shared workspace
173	.82b8		a2 22		ldx #$22	                ldx #romServiceCallPrivateHAZELWorkspaceClam ; Ask ROMs for private high workspace required
174	.82ba		20 52 ec	jsr $ec52	                jsr mos.makeROMServiceCall   ;
175	.82bd		a0 0e		ldy #$0e	                ldy #$0E                     ; Start low workspace at &0E00
176	.82bf		a2 01		ldx #$01	                ldx #romServiceCallAbsoluteWorkspaceClaim ; Ask ROMs for maximum shared workspace
177	.82c1		20 52 ec	jsr $ec52	                jsr mos.makeROMServiceCall   ;
178	.82c4		a2 02		ldx #$02	                ldx #romServiceCallPrivateWorkspaceClaim ; Ask ROMs for private workspace
179	.82c6		20 52 ec	jsr $ec52	                jsr mos.makeROMServiceCall   ;
180	.82c9		8c 44 02	sty $0244	                sty oshwm                    ; Set OSHWM - default PAGE
181	.82cc		7a		ply		                ply                          ; Get top of shared high workspace
182	.82cd		a2 23		ldx #$23	                ldx #romServiceCallTopOfHAZELWorkspace ; Tell ROMs top of shared high workspace
183	.82cf		20 52 ec	jsr $ec52	                jsr mos.makeROMServiceCall   ;
184	.82d2						L82FC:
185	.82d2		a2 21		ldx #$21	                ldx #size(defaultFsInfoBlocks)
186	.82d4						L82FE:
187	.82d4		bd 27 83	lda $8327,x	                lda defaultFsInfoBlocks-1,x                ; Copy initial FS info blocks for CFS, TAPE, ROM
188	.82d7		9d 05 df	sta $df05,x	                sta hazel.fsInfoBlocks-1,x
189	.82da		ca		dex		                dex
190	.82db		d0 f7		bne $82d4	                bne L82FE
191	.82dd		64 f2		stz $f2		                stz $F2                      ; &F2/3=>FS Info Blocks
192	.82df		a9 df		lda #$df	                lda #>hazel.fsInfoBlocks
193	.82e1		85 f3		sta $f3		                sta $F3
194							                ; Y=>end of FS Info Blocks
195	.82e3		a0 27		ldy #$27	                ldy #<hazel.fsInfoBlocks+size(defaultFsInfoBlocks)
196	.82e5		a2 25		ldx #$25	                ldx #$25                     ; Ask ROMs for FS Info Blocks
197	.82e7		20 52 ec	jsr $ec52	                jsr mos.makeROMServiceCall   ;
198	.82ea		a9 00		lda #$00	                lda #$00                     ; Terminate FS Info blocks
199	.82ec		91 f2		sta ($f2),y	                sta ($F2),y

201	.82ee		ad 57 02	lda $0257	                lda spoolFileHandle ; Save Spool handle and disable Spooling
202	.82f1		48		pha		                pha
203	.82f2		9c 57 02	stz $0257	                stz spoolFileHandle
204	.82f5		a2 fe		ldx #$fe	                ldx #romServiceCallTubeSystemPostInitialisation
205	.82f7		ac 7a 02	ldy $027a	                ldy tubePresence
206	.82fa		20 52 ec	jsr $ec52	                jsr mos.makeROMServiceCall   ; Tube PostInit
207	.82fd		2d 67 02	and $0267	                and startupMessageSuppressionStatus
208	.8300		10 14		bpl $8316	                bpl L8340

210							                ; use +$ff rather than -1 to avoid 64tass warning.
211							                ; Only the LSB is used.
212	.8302		a0 ff		ldy #$ff	                ldy #((mos.startupMessages.acornMOS-(mos.startupMessages&$ff00))+$ff)&$ff
213	.8304		20 ba e6	jsr $e6ba	                jsr mos.printStartupMessage
214	.8307		ad 8d 02	lda $028d	                lda lastBREAKType            ; Skip past if Soft Break
215	.830a		f0 05		beq $8311	                beq L833B
216	.830c		a0 0b		ldy #$0b	                ldy #((mos.startupMessages.beep-(mos.startupMessages&$ff00))-1)&$ff
217	.830e		20 ba e6	jsr $e6ba	                jsr mos.printStartupMessage
218	.8311						L833B:
219	.8311		a0 0d		ldy #$0d	                ldy #((mos.startupMessages.twoNewlines-(mos.startupMessages&$ff00))-1)&$ff
220	.8313		20 ba e6	jsr $e6ba	                jsr mos.printStartupMessage
221	.8316						L8340:
222	.8316		68		pla		                pla                          ; Restore Spool handle
223	.8317		8d 57 02	sta $0257	                sta spoolFileHandle
224	.831a		4c 1e e4	jmp $e41e	                jmp mos.LE40E                ;

226							;-------------------------------------------------------------------------

228							                .if version>=500
236							                .endif
237							                .if version>=400
238	.831d						clearAllSoundChannelBuffers:
239	.831d		a2 08		ldx #$08	                ldx #8
240	.831f						L836F:
241	.831f		ca		dex		                dex
242	.8320		20 4c f3	jsr $f34c	                jsr mos.clearSoundChannelBuffer
243	.8323		e0 04		cpx #$04	                cpx #4
244	.8325		d0 f8		bne $831f	                bne L836F
245	.8327		60		rts		                rts
246							                .endif

248							;-------------------------------------------------------------------------

250							; Default FS Info Blocks
251							; ======================
252	.8328						defaultFsInfoBlocks: .block
253							                .if version<500
254	>8328		43 46 53 20 20 20 20 20		                .text "CFS     "
255	>8330		01				                .byte $01
256	>8331		02				                .byte $02
257	>8332		01				                .byte $01
258	>8333		54 41 50 45 20 20 20 20		                .text "TAPE    "
259	>833b		01				                .byte $01
260	>833c		02				                .byte $02
261	>833d		01				                .byte $01
262							                .endif
263	>833e		52 4f 4d 20 20 20 20 20		                .text "ROM     "
264	>8346		03				                .byte $03
265	>8347		03				                .byte $03
266	>8348		03				                .byte $03
267							                .endblock

269							;-------------------------------------------------------------------------
270							;
271							; MOS command table

273							mos_command .macro name,routine,byte1,byte2
290							                .endm

292	.8349						mosCommandTable:
274							                ; Name of command, compared case-insensitively.
275	>8349		43 41 54			                .text "CAT"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>834c		ef				                .byte >mos.callFSCV
13	>834d		d4				                .byte <mos.callFSCV

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>834e		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>834f		05				                .byte $05
294							                .if version!=400
296							                .endif
274							                ; Name of command, compared case-insensitively.
275	>8350		41 50 50 45 4e 44		                .text "APPEND"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8356		92				                .byte >starAPPEND
13	>8357		a8				                .byte <starAPPEND

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8358		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8359		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>835a		42 41 53 49 43			                .text "BASIC"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>835f		85				                .byte >starBASIC
13	>8360		bb				                .byte <starBASIC

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8361		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8362		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>8363		42 55 49 4c 44			                .text "BUILD"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8368		92				                .byte >starBUILD
13	>8369		a3				                .byte <starBUILD

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>836a		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>836b		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>836c		43 4c 4f 53 45			                .text "CLOSE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8371		96				                .byte >starCLOSE
13	>8372		10				                .byte <starCLOSE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8373		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8374		ff				                .byte $FF
301							                .if version<500&&version!=350
274							                ; Name of command, compared case-insensitively.
275	>8375		43 4f 4e 46 49 47 55 52		                .text "CONFIGURE"
	>837d		45

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>837e		8c				                .byte >starCONFIGURE
13	>837f		1e				                .byte <starCONFIGURE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8380		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8381		ff				                .byte $FF
305							                .endif
274							                ; Name of command, compared case-insensitively.
275	>8382		43 4f 44 45			                .text "CODE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8386		96				                .byte >starCommandThroughOSBYTE
13	>8387		7f				                .byte <starCommandThroughOSBYTE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8388		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8389		88				                .byte $88
274							                ; Name of command, compared case-insensitively.
275	>838a		43 52 45 41 54 45		                .text "CREATE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8390		95				                .byte >starCommandThroughOSFILE
13	>8391		ac				                .byte <starCommandThroughOSFILE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8392		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8393		07				                .byte $07
274							                ; Name of command, compared case-insensitively.
275	>8394		44 55 4d 50			                .text "DUMP"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8398		91				                .byte >starDUMP
13	>8399		d6				                .byte <starDUMP

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>839a		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>839b		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>839c		44 45 4c 45 54 45		                .text "DELETE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>83a2		96				                .byte >starDELETE
13	>83a3		fe				                .byte <starDELETE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>83a4		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>83a5		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>83a6		45 58 45 43			                .text "EXEC"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>83aa		ac				                .byte >starEXEC
13	>83ab		49				                .byte <starEXEC

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>83ac		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>83ad		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>83ae		45 58				                .text "EX"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>83b0		ef				                .byte >mos.callFSCV
13	>83b1		d4				                .byte <mos.callFSCV

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>83b2		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>83b3		09				                .byte $09
274							                ; Name of command, compared case-insensitively.
275	>83b4		46 58				                .text "FX"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>83b6		96				                .byte >starFX
13	>83b7		79				                .byte <starFX

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>83b8		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>83b9		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>83ba		47 4f 49 4f			                .text "GOIO"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>83be		95				                .byte >starGOIO
13	>83bf		91				                .byte <starGOIO

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>83c0		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>83c1		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>83c2		47 4f				                .text "GO"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>83c4		95				                .byte >starGO
13	>83c5		89				                .byte <starGO

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>83c6		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>83c7		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>83c8		48 45 4c 50			                .text "HELP"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>83cc		85				                .byte >starHELP
13	>83cd		df				                .byte <starHELP

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>83ce		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>83cf		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>83d0		49 4e 46 4f			                .text "INFO"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>83d4		ef				                .byte >mos.callFSCV
13	>83d5		d4				                .byte <mos.callFSCV

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>83d6		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>83d7		0a				                .byte $0A
274							                ; Name of command, compared case-insensitively.
275	>83d8		49 47 4e 4f 52 45		                .text "IGNORE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>83de		96				                .byte >starIGNORE
13	>83df		1b				                .byte <starIGNORE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>83e0		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>83e1		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>83e2		49 4e 53 45 52 54		                .text "INSERT"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>83e8		87				                .byte >starINSERT
13	>83e9		42				                .byte <starINSERT

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>83ea		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>83eb		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>83ec		4b 45 59			                .text "KEY"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>83ef		97				                .byte >starKEY
13	>83f0		5b				                .byte <starKEY

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>83f1		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>83f2		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>83f3		4c 4f 41 44			                .text "LOAD"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>83f7		95				                .byte >starLOAD
13	>83f8		aa				                .byte <starLOAD

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>83f9		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>83fa		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>83fb		4c 49 53 54			                .text "LIST"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>83ff		91				                .byte >starLIST
13	>8400		54				                .byte <starLIST

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8401		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8402		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>8403		4c 49 4e 45			                .text "LINE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8407		ea				                .byte >mos.callUSERV
13	>8408		cc				                .byte <mos.callUSERV

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8409		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>840a		01				                .byte $01
274							                ; Name of command, compared case-insensitively.
275	>840b		4c 49 42 46 53			                .text "LIBFS"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8410		e7				                .byte >mos.starLIBFS
13	>8411		0c				                .byte <mos.starLIBFS

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8412		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8413		00				                .byte $00
324							                .if version<400
326							                .elsif version==400
274							                ; Name of command, compared case-insensitively.
275	>8414		6d 6f 74 6f 72			                .text "motor"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8419		96				                .byte >starCommandThroughOSBYTE
13	>841a		7f				                .byte <starCommandThroughOSBYTE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>841b		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>841c		89				                .byte $89
330							                .endif
274							                ; Name of command, compared case-insensitively.
275	>841d		4d 4f 56 45			                .text "MOVE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8421		93				                .byte >starMOVE
13	>8422		4a				                .byte <starMOVE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8423		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8424		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>8425		4f 50 54			                .text "OPT"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8428		96				                .byte >starCommandThroughOSBYTE
13	>8429		7f				                .byte <starCommandThroughOSBYTE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>842a		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>842b		8b				                .byte $8B
274							                ; Name of command, compared case-insensitively.
275	>842c		50 52 49 4e 54			                .text "PRINT"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8431		91				                .byte >starPRINT
13	>8432		4d				                .byte <starPRINT

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8433		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8434		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>8435		52 55 4e			                .text "RUN"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8438		ef				                .byte >mos.callFSCV
13	>8439		d4				                .byte <mos.callFSCV

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>843a		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>843b		04				                .byte $04
274							                ; Name of command, compared case-insensitively.
275	>843c		52 45 4d 4f 56 45		                .text "REMOVE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8442		96				                .byte >starREMOVE
13	>8443		05				                .byte <starREMOVE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8444		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8445		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>8446		52 4f 4d			                .text "ROM"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8449		96				                .byte >starCommandThroughOSBYTE
13	>844a		7f				                .byte <starCommandThroughOSBYTE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>844b		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>844c		8d				                .byte $8D
274							                ; Name of command, compared case-insensitively.
275	>844d		52 4f 4d 53			                .text "ROMS"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8451		86				                .byte >starROMS
13	>8452		bb				                .byte <starROMS

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8453		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8454		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>8455		53 41 56 45			                .text "SAVE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8459		95				                .byte >starCommandThroughOSFILE
13	>845a		ac				                .byte <starCommandThroughOSFILE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>845b		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>845c		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>845d		53 48 41 44 4f 57		                .text "SHADOW"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8463		96				                .byte >starSHADOW
13	>8464		fa				                .byte <starSHADOW

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8465		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8466		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>8467		53 48 4f 57			                .text "SHOW"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>846b		97				                .byte >starSHOW
13	>846c		1c				                .byte <starSHOW

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>846d		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>846e		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>846f		53 48 55 54			                .text "SHUT"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8473		f1				                .byte >mos.starSHUT
13	>8474		62				                .byte <mos.starSHUT

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8475		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8476		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>8477		53 50 4f 4f 4c			                .text "SPOOL"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>847c		96				                .byte >starSPOOL
13	>847d		c7				                .byte <starSPOOL

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>847e		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>847f		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>8480		53 50 4f 4f 4c 4f 4e		                .text "SPOOLON"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8487		96				                .byte >starSPOOLON
13	>8488		b4				                .byte <starSPOOLON

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8489		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>848a		00				                .byte $00
344							                .if version>=350
274							                ; Name of command, compared case-insensitively.
275	>848b		53 52 44 41 54 41		                .text "SRDATA"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8491		88				                .byte >starSRDATAOrStarSRROM
13	>8492		49				                .byte <starSRDATAOrStarSRROM

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8493		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8494		a0				                .byte $a0
274							                ; Name of command, compared case-insensitively.
275	>8495		53 52 4c 4f 41 44		                .text "SRLOAD"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>849b		89				                .byte >starSRLOADOrStarSRSAVE
13	>849c		77				                .byte <starSRLOADOrStarSRSAVE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>849d		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>849e		60				                .byte $60
274							                ; Name of command, compared case-insensitively.
275	>849f		53 52 52 45 41 44		                .text "SRREAD"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>84a5		89				                .byte >starSRREADOrStarSRWRITE
13	>84a6		01				                .byte <starSRREADOrStarSRWRITE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>84a7		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>84a8		a0				                .byte $a0
274							                ; Name of command, compared case-insensitively.
275	>84a9		53 52 52 4f 4d			                .text "SRROM"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>84ae		88				                .byte >starSRDATAOrStarSRROM
13	>84af		49				                .byte <starSRDATAOrStarSRROM

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>84b0		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>84b1		80				                .byte $80
274							                ; Name of command, compared case-insensitively.
275	>84b2		53 52 53 41 56 45		                .text "SRSAVE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>84b8		89				                .byte >starSRLOADOrStarSRSAVE
13	>84b9		77				                .byte <starSRLOADOrStarSRSAVE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>84ba		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>84bb		20				                .byte $20
274							                ; Name of command, compared case-insensitively.
275	>84bc		53 52 57 52 49 54 45		                .text "SRWRITE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>84c3		89				                .byte >starSRREADOrStarSRWRITE
13	>84c4		01				                .byte <starSRREADOrStarSRWRITE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>84c5		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>84c6		e0				                .byte $e0
351							                .endif
352							                .if version<500&&version!=350
274							                ; Name of command, compared case-insensitively.
275	>84c7		53 54 41 54 55 53		                .text "STATUS"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>84cd		8c				                .byte >starSTATUS
13	>84ce		35				                .byte <starSTATUS

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>84cf		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>84d0		ff				                .byte $FF
356							                .endif
357							                .if version<400
359							                .elsif version==400
274							                ; Name of command, compared case-insensitively.
275	>84d1		74 61 70 65			                .text "tape"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>84d5		96				                .byte >starCommandThroughOSBYTE
13	>84d6		7f				                .byte <starCommandThroughOSBYTE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>84d7		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>84d8		8c				                .byte $8c
363							                .endif
274							                ; Name of command, compared case-insensitively.
275	>84d9		54 56				                .text "TV"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>84db		96				                .byte >starCommandThroughOSBYTE
13	>84dc		7f				                .byte <starCommandThroughOSBYTE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>84dd		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>84de		90				                .byte $90
274							                ; Name of command, compared case-insensitively.
275	>84df		54 49 4d 45			                .text "TIME"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>84e3		87				                .byte >starTIME
13	>84e4		67				                .byte <starTIME

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>84e5		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>84e6		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>84e7		54 59 50 45			                .text "TYPE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>84eb		91				                .byte >starTYPE
13	>84ec		5f				                .byte <starTYPE

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>84ed		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>84ee		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>84ef		55 4e 50 4c 55 47		                .text "UNPLUG"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>84f5		87				                .byte >starUNPLUG
13	>84f6		45				                .byte <starUNPLUG

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>84f7		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>84f8		ff				                .byte $FF
368							                .if version<500
274							                ; Name of command, compared case-insensitively.
275	>84f9		58				                .text "X"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>84fa		e7				                .byte >mos.starX
13	>84fb		13				                .byte <mos.starX

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>84fc		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>84fd		00				                .byte $00
370							                .endif
274							                ; Name of command, compared case-insensitively.
275	>84fe						                .text ""

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>84fe		ef				                .byte >mos.callFSCV
13	>84ff		d4				                .byte <mos.callFSCV

281:5							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8500		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8501		03				                .byte $03
372	>8502		00				                .byte $00

374							;-------------------------------------------------------------------------
375							;
376							; Get string input buffer address tail according to table byte.
377							;
378							; Entry:
379							;
380							; oscliWorkspace.tablePtr; = pointer to table byte
381							; (stringInputBufferAddress),y = pointer to input
382							;
383							; Exit:
384							;
385							; A = table byte
386							;
387							; if table byte bit 7 set: Y/X points to command line tail
388	.8503						maybeGetStringInputBufferAddress:
389	.8503		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
390	.8505		30 0c		bmi $8513	                bmi rts84FE
391	.8507						getStringInputBufferAddressWithYOffset:
392	.8507		98		tya		                tya
393	.8508						getStringInputBufferAddressWithAOffset:
394	.8508		18		clc		                clc
395	.8509		65 f2		adc $f2		                adc stringInputBufferAddress+0
396	.850b		aa		tax		                tax
397	.850c		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
398	.850e		90 01		bcc $8511	                bcc +
399	.8510		c8		iny		                iny
400	.8511						+
401	.8511		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
402	.8513						rts84FE:
403	.8513		60		rts		                rts

405							; Prepare OSCLI command line
406							; ==========================
407	.8514						oscli:
408	.8514		86 f2		stx $f2		                stx stringInputBufferAddress+0
409	.8516		84 f3		sty $f3		                sty stringInputBufferAddress+1
410	.8518		ad 00 df	lda $df00	                lda hazel.currentFS
411	.851b		20 1d fa	jsr $fa1d	                jsr mos.selectFS
412	.851e		a9 08		lda #$08	                lda #fscStarCommand
413	.8520		20 d4 ef	jsr $efd4	                jsr mos.callFSCV
414	.8523		a0 ff		ldy #$ff	                ldy #$FF
415	.8525						L8510:
416	.8525		20 ed f0	jsr $f0ed	                jsr mos.incAndSkipSpaces
417	.8528		f0 e9		beq $8513	                beq rts84FE
418	.852a		c9 2a		cmp #$2a	                cmp #'*'
419	.852c		f0 f7		beq $8525	                beq L8510
420	.852e		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
421	.8531		f0 e0		beq $8513	                beq rts84FE
422	.8533		c9 7c		cmp #$7c	                cmp #'|'
423	.8535		f0 dc		beq $8513	                beq rts84FE
424	.8537		9c c6 df	stz $dfc6	                stz hazel.tempFSFlag
425	.853a		c9 2d		cmp #$2d	                cmp #'-'
426	.853c		d0 0c		bne $854a	                bne L8535
427	.853e		20 76 f9	jsr $f976	                jsr mos.parseFileNameFS
428	.8541		20 1d fa	jsr $fa1d	                jsr mos.selectFS
429	.8544		38		sec		                sec
430	.8545		6e c6 df	ror $dfc6	                ror hazel.tempFSFlag
431	.8548		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
432	.854a						L8535:
433	.854a		c9 2f		cmp #$2f	                cmp #'/'
434	.854c		d0 09		bne $8557	                bne L8542
435	.854e		c8		iny		                iny
436	.854f		20 07 85	jsr $8507	                jsr getStringInputBufferAddressWithYOffset
437	.8552		a9 02		lda #$02	                lda #fscStarSlash
438	.8554		4c d4 ef	jmp $efd4	                jmp mos.callFSCV

440	.8557						L8542:
441							                .if version<500&&version!=350
442	.8557		84 e6		sty $e6		                sty $E6
443							                .endif
444	.8559		a9 49		lda #$49	                lda #<mosCommandTable
445	.855b		85 b0		sta $b0		                sta oscliWorkspace.tablePtr+0
446	.855d		a9 83		lda #$83	                lda #>mosCommandTable
447	.855f		85 b1		sta $b1		                sta oscliWorkspace.tablePtr+1
448							                .if version<500&&version!=350
449	.8561		80 0a		bra $856d	                bra L8558
454							                .endif

456							                .if version<500&&version!=350
457	.8563						L854E:
458	.8563		52 b0		eor ($b0)	                eor (oscliWorkspace.tablePtr)
459	.8565		29 df		and #$df	                and #$DF
460	.8567		d0 15		bne $857e	                bne L8569
461	.8569		20 b0 85	jsr $85b0	                jsr fetchCommandTableByte
462	.856c		c8		iny		                iny
463	.856d						L8558:
464	.856d		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
465	.856f		20 19 e9	jsr $e919	                jsr mos.isLetter
466	.8572		90 ef		bcc $8563	                bcc L854E                    ;taken if letter
467	.8574		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
468	.8576		30 1f		bmi $8597	                bmi L8582                ;taken if end of command name
469	.8578		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
470	.857a		c9 2e		cmp #$2e	                cmp #'.'
471	.857c		f0 04		beq $8582	                beq L856D                    ;taken if input abbreviated
472	.857e						L8569:
473	.857e		18		clc		                clc
474	.857f		a4 e6		ldy $e6		                ldy $E6
475	.8581		88		dey		                dey
476	.8582						L856D:
477	.8582		c8		iny		                iny
478	.8583						L856E:
479	.8583		20 b0 85	jsr $85b0	                jsr fetchCommandTableByte ; Get byte from table, update pointer
480	.8586		f0 3c		beq $85c4	                beq passStarCommandThrough   ; Zero byte
481	.8588		10 f9		bpl $8583	                bpl L856E                    ; Loop until b7 set
482	.858a		b0 0e		bcs $859a	                bcs L8585
483	.858c		20 b0 85	jsr $85b0	                jsr fetchCommandTableByte
484	.858f		20 b0 85	jsr $85b0	                jsr fetchCommandTableByte
485	.8592		20 b0 85	jsr $85b0	                jsr fetchCommandTableByte
486	.8595		80 d6		bra $856d	                bra L8558

488	.8597						L8582:
489	.8597		20 b0 85	jsr $85b0	                jsr fetchCommandTableByte
490							                .endif
491	.859a						L8585:
492	.859a		48		pha		                pha
493	.859b		20 b0 85	jsr $85b0	                jsr fetchCommandTableByte
494	.859e		48		pha		                pha
495	.859f		20 b0 85	jsr $85b0	                jsr fetchCommandTableByte
496	.85a2		30 03		bmi $85a7	                bmi L8592
497	.85a4		9c c6 df	stz $dfc6	                stz hazel.tempFSFlag
498	.85a7						L8592:
499	.85a7		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
500	.85aa		18		clc		                clc
501	.85ab		08		php		                php
502	.85ac		20 03 85	jsr $8503	                jsr maybeGetStringInputBufferAddress
503	.85af		40		rti		                rti

505							                .if version<500&&version!=350
506	.85b0						fetchCommandTableByte:
507	.85b0		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
508	.85b2		48		pha		                pha
509	.85b3		e6 b0		inc $b0		                inc oscliWorkspace.tablePtr+0
510	.85b5		d0 02		bne $85b9	                bne +
511	.85b7		e6 b1		inc $b1		                inc oscliWorkspace.tablePtr+1
512	.85b9						+
513	.85b9		68		pla		                pla
514	.85ba						rts85A5:
515	.85ba		60		rts		                rts
516							                .endif

518							;-------------------------------------------------------------------------

520							; *BASIC
521							; ======
522	.85bb						starBASIC:
523	.85bb		ae 4b 02	ldx $024b	                ldx basicROMNumber           ; Get BASIC ROM number
524	.85be		30 04		bmi $85c4	                bmi passStarCommandThrough ; If no BASIC ROM, jump to pass to ROMs and filing system
525							                .if version==350
527							                .elsif version<500
528	.85c0		38		sec		                sec                          ;
529	.85c1		4c d0 e4	jmp $e4d0	                jmp mos.osbyte8E             ; Enter ROM as a language
533							                .endif

535							;-------------------------------------------------------------------------

537							; *ADFS - pass straight to ROMs/Filing System
538							; ===========================================
539	.85c4						passStarCommandThrough:
540	.85c4		2c c6 df	bit $dfc6	                bit hazel.tempFSFlag      ; Check filing system flag
541	.85c7		30 0c		bmi $85d5	                bmi L85C0                    ; If ... skip ROM service call
542	.85c9		9c c6 df	stz $dfc6	                stz hazel.tempFSFlag      ; Clear filing system flag
543	.85cc		a4 e6		ldy $e6		                ldy $E6
544	.85ce		a2 04		ldx #$04	                ldx #romServiceCallUnrecognisedCommand
545	.85d0		20 e3 eb	jsr $ebe3	                jsr mos.osbyte8F    ; Service call 4 - Unknown command
546							                .if version<500&&version!=350
547	.85d3		f0 e5		beq $85ba	                beq rts85A5                    ; Claimed, return
550							                .endif
551	.85d5						L85C0:
552	.85d5		a5 e6		lda $e6		                lda $E6
553	.85d7		20 08 85	jsr $8508	                jsr getStringInputBufferAddressWithAOffset
554	.85da		a9 03		lda #$03	                lda #$03
555	.85dc		4c d4 ef	jmp $efd4	                jmp mos.callFSCV ; mos.Pass to FSCV,3 - Unknown command

557	.85df						starHELP:
558	.85df		a2 09		ldx #$09	                ldx #romServiceCallHelp      ;
559	.85e1		a5 d0		lda $d0		                lda STATE                    ;
560	.85e3		48		pha		                pha                          ;save STATE
561	.85e4		a9 0e		lda #$0e	                lda #14
562	.85e6		20 ee ff	jsr $ffee	                jsr OSWRCH                   ; paged mode ON
563	.85e9		20 52 ec	jsr $ec52	                jsr mos.makeROMServiceCall   ;
564	.85ec		a2 18		ldx #$18	                ldx #romServiceCallReserved  ;???
565	.85ee		20 52 ec	jsr $ec52	                jsr mos.makeROMServiceCall
566	.85f1		68		pla		                pla                          ;restore STATE
567	.85f2		89 04		bit #$04	                bit #STATE.isPagedScrolling  ;was paged mode on originally?
568	.85f4		d0 2c		bne $8622	                bne parseDone   ;taken if paged mode was originally on
569							                                ;(branch target is an arbitrary nearby
570							                                ;RTS)
571	.85f6		a9 0f		lda #$0f	                lda #15         ;restore non-paged mode
572	.85f8		4c ee ff	jmp $ffee	                jmp OSWRCH

574							;-------------------------------------------------------------------------
575							;
576							; Read a byte value (0-255) from a string. If the number has a '&'
577							; prefix, interpret it as hex.
578							;
579							; entry:
580							;
581							; (stringInputBufferAddress),y - string
582							;
583							; exit:
584							;
585							; X = result
586							; ?$e6 = result
587							; C=0 if error
588							; Z=1 if CR encountered
589							;
590	.85fb						parseNumberFromString:
591	.85fb		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
592	.85fe		c9 26		cmp #$26	                cmp #'&'                     ; hex value incoming?
593	.8600		d0 21		bne $8623	                bne parseDecimal             ; taken if not hex value
594	.8602						parseHex:
595	.8602		c8		iny		                iny                          ; skip '&'
596	.8603		20 5d 86	jsr $865d	                jsr readHexDigit             ; read first hex digit
597	.8606		90 53		bcc $865b	                bcc errorReadingString
598	.8608		85 e6		sta $e6		                sta $E6                      ; save first hex digit
599	.860a		20 5d 86	jsr $865d	                jsr readHexDigit             ; read second hex digih
600	.860d		90 0e		bcc $861d	                bcc parsedValue         ; taken if not hex digit
601							                ; The first digit read was actually the high nybble,
602							                ; and the current digit read is therefore the low
603							                ; nybble.
604							                ;
605							                ; Shift saved digit 4 bits left.
606	.860f		a2 04		ldx #$04	                ldx #$04
607	.8611						-
608	.8611		06 e6		asl $e6		                asl $E6
609	.8613		ca		dex		                dex
610	.8614		d0 fb		bne $8611	                bne -
611	.8616		04 e6		tsb $e6		                tsb $E6                      ; insert low nybble
612	.8618		20 5d 86	jsr $865d	                jsr readHexDigit             ; read third hex digit
613	.861b		b0 29		bcs $8646	                bcs errorReadingString2 ; 3+-digit hex values are not valid
614	.861d						parsedValue:
615	.861d		a6 e6		ldx $e6		                ldx $E6
616	.861f		c9 0d		cmp #$0d	                cmp #$0D
617	.8621		38		sec		                sec
618	.8622						parseDone:
619	.8622		60		rts		                rts

621	.8623						parseDecimal:
622	.8623		20 49 86	jsr $8649	                jsr readDigitFromString
623	.8626		90 33		bcc $865b	                bcc errorReadingString      ;branch taken if not digit
624	.8628						parseDecimalDigit:
625	.8628		85 e6		sta $e6		                sta $E6                     ;save current value
626	.862a		20 48 86	jsr $8648	                jsr readNextDigitFromString
627	.862d		90 ee		bcc $861d	                bcc parsedValue ;branch taken if not digit, meaning number
628							                                     ;parsed successfully
629	.862f		aa		tax		                tax                         ;X=digit

631							                ; calculate (value*4+value)*2 - i.e., value*10. Carry
632							                ; at any point indicates the value was greater than
633							                ; 255, and therefore an error.
634	.8630		a5 e6		lda $e6		                lda $E6                     ;value
635	.8632		0a		asl a		                asl a                       ;value*2
636	.8633		b0 26		bcs $865b	                bcs errorReadingString
637	.8635		0a		asl a		                asl a                       ;value*4
638	.8636		b0 23		bcs $865b	                bcs errorReadingString
639	.8638		65 e6		adc $e6		                adc $E6                     ;value*5
640	.863a		b0 1f		bcs $865b	                bcs errorReadingString
641	.863c		0a		asl a		                asl a                       ;value*10
642	.863d		b0 1c		bcs $865b	                bcs errorReadingString
643	.863f		85 e6		sta $e6		                sta $E6                      ;save value*10
644	.8641		8a		txa		                txa                          ;A=digit
645	.8642		65 e6		adc $e6		                adc $E6                      ;value*10+digit
646	.8644		90 e2		bcc $8628	                bcc parseDecimalDigit
647	.8646						errorReadingString2:
648	.8646		18		clc		                clc
649	.8647		60		rts		                rts

651	.8648						readNextDigitFromString:
652	.8648		c8		iny		                iny

654							; check if current string input byte is a digit.
655							;
656							; exit: C=1 if digit; C=0 if not digit
657	.8649						readDigitFromString:
658	.8649		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
659	.864b		c9 3a		cmp #$3a	                cmp #'9'+1
660	.864d		b0 0c		bcs $865b	                bcs errorReadingString       ;taken if not ASCII decimal digit
661	.864f		c9 30		cmp #$30	                cmp #'0'
662	.8651		90 08		bcc $865b	                bcc errorReadingString       ;taken if not ASCII decimal digit
663	.8653		29 0f		and #$0f	                and #$0F         ;convert ASCII decimaldigit to number
664	.8655		60		rts		                rts

666	.8656						L8641:
667	.8656		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
668							                .if version!=350
669	.8659		c9 0d		cmp #$0d	                cmp #$0D
670							                .endif
671	.865b						errorReadingString:
672	.865b		18		clc		                clc
673	.865c		60		rts		                rts

675							;-------------------------------------------------------------------------
676							;
677							; Read a hex digit from a string
678							;
679							; entry:
680							;
681							; (stringInputBufferAddress),y = next byte to read
682							;
683							; exit:
684							;
685							; C=1 if ok: A = digit read
686							;
687							; C=0 if error: Z=1 if CR encountered
688							;
689	.865d						readHexDigit:
690	.865d		20 49 86	jsr $8649	                jsr readDigitFromString
691	.8660		b0 0d		bcs $866f	                bcs +                        ; branch taken if digit
692	.8662		29 df		and #$df	                and #$DF                     ; convert to upper case
693	.8664		c9 47		cmp #$47	                cmp #'F'+1
694	.8666		b0 ee		bcs $8656	                bcs L8641    ; branch taken if not ASCII A-F hex digit
695	.8668		c9 41		cmp #$41	                cmp #'A'
696	.866a		90 ea		bcc $8656	                bcc L8641     ;branch taken if not ASCII A-F hex digit
697							                ; convert ASCII A-F hex digit to number.
698	.866c		49 48		eor #$48	                eor #$48
699	.866e		1a		inc a		                inc a
700	.866f						+
701	.866f		c8		iny		                iny
702	.8670		60		rts		                rts

704							;-------------------------------------------------------------------------
705							;
706							; OSWORD 0 control block for *commands
707							; ====================================
708	.8671						commandLineUIOSWORD0Parameters:
709	>8671		00 dc				                .word hazel.commandLine      ; address
710	>8673		f0				                .byte $F0			; max # chars
711	>8674		20				                .byte $20			; min ASCII char
712	>8675		7e				                .byte $7E			; max ASCII char

714							;-------------------------------------------------------------------------

716	.8676						commandLineUI:
717	.8676		a9 a2		lda #$a2	                lda #<commandLineUIBRKHandler
718	.8678		8d 02 02	sta $0202	                sta BRKV+0
719	.867b		a9 86		lda #$86	                lda #>commandLineUIBRKHandler
720	.867d		8d 03 02	sta $0203	                sta BRKV+1
721	.8680		a9 1f		lda #$1f	                lda #$10|terminalROM         ;????
722	.8682		8d 8c 02	sta $028c	                sta currentLanguageROM
723	.8685						commandLineUILoop:
724	.8685		a2 ff		ldx #$ff	                ldx #$FF
725	.8687		9a		txs		                txs
726	.8688		58		cli		                cli
727	.8689		20 b9 eb	jsr $ebb9	                jsr mos.selectHAZEL
728	.868c		a9 2a		lda #$2a	                lda #'*'
729	.868e		20 ee ff	jsr $ffee	                jsr OSWRCH
730	.8691		20 b2 86	jsr $86b2	                jsr readCommandLine
731	.8694		90 03		bcc $8699	                bcc +                     ;taken if ESCAPE not pressed
732	.8696		4c 41 ae	jmp $ae41	                jmp escapeError
733	.8699						+
734	.8699		a2 00		ldx #$00	                ldx #<hazel.commandLine
735	.869b		a0 dc		ldy #$dc	                ldy #>hazel.commandLine
736	.869d		20 f7 ff	jsr $fff7	                jsr OSCLI
737	.86a0		80 e3		bra $8685	                bra commandLineUILoop

739	.86a2						commandLineUIBRKHandler:
740	.86a2		20 e7 ff	jsr $ffe7	                jsr OSNEWL
741	.86a5		a0 00		ldy #$00	                ldy #$00
742	.86a7		20 c0 e6	jsr $e6c0	                jsr mos.printBRKMessage
743	.86aa		20 e7 ff	jsr $ffe7	                jsr OSNEWL
744	.86ad		80 c7		bra $8676	                bra commandLineUI

746	.86af						badCommandError869A:
747	.86af		4c bd fa	jmp $fabd	                jmp mos.badCommandError

749	.86b2						readCommandLine:
750	.86b2		a9 00		lda #$00	                lda #$00
751	.86b4		a2 71		ldx #$71	                ldx #<commandLineUIOSWORD0Parameters
752	.86b6		a0 86		ldy #$86	                ldy #>commandLineUIOSWORD0Parameters
753	.86b8		4c f1 ff	jmp $fff1	                jmp OSWORD

755							;-------------------------------------------------------------------------
756							;
757							; *ROMS [MasRef C.5-10]
758							;
759	.86bb						starROMS:
760	.86bb		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
761	.86be		d0 ef		bne $86af	                bne badCommandError869A
762	.86c0		a0 0f		ldy #$0f	                ldy #$0F
763	.86c2						printROMsLoop:
764							                .if version<400&&version!=350
771							                .else
772	.86c2		98		tya		                tya
773	.86c3		aa		tax		                tax
774	.86c4		5a		phy		                phy
775	.86c5		20 31 f8	jsr $f831	                jsr mos.LF89A
776	.86c8		b0 0a		bcs $86d4	                bcs L86D2
777	.86ca		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
778	>86cd		52 4f 4d 20 00			                .text "ROM ",0
779	.86d2		80 08		bra $86dc	                bra L86DA
780	.86d4						L86D2:
781	.86d4		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
782	>86d7		52 41 4d 20 00			                .text "RAM ",0
783	.86dc						L86DA:
784	.86dc		7a		ply		                ply
785	.86dd		98		tya		                tya
786							                .endif
787	.86de		20 23 ae	jsr $ae23	                jsr printHexDigit            ;print ROM slot
788	.86e1		20 6f a7	jsr $a76f	                jsr printSpace
789	.86e4		a9 09		lda #$09	                lda #<sidewaysROMName
790	.86e6		85 f6		sta $f6		                sta $F6
791	.86e8		a9 80		lda #$80	                lda #>sidewaysROMName
792	.86ea		85 f7		sta $f7		                sta $F7
793							                .if version<400&&version!=350
795							                .endif
796	.86ec		20 94 e5	jsr $e594	                jsr mos.isROMValidThenSelectTerminalROM
797							                .if version<400&&version!=350
799							                .endif
800	.86ef		90 4a		bcc $873b	                bcc invalidROM
801							                .if version>=500||version==350
805							                .endif
806	.86f1						printROMNameLoop:
807	.86f1		20 eb f1	jsr $f1eb	                jsr mos.osrdscEntryPoint     ;read name byte
808	.86f4		c9 20		cmp #$20	                cmp #' '
809	.86f6		90 0f		bcc $8707	                bcc printROMVersion ;taken if non-printable char, including the terminating 0
810	.86f8		c9 7f		cmp #$7f	                cmp #127
811	.86fa		b0 3f		bcs $873b	                bcs invalidROM  ;taken if bad (bit 7 set) char in name
812	.86fc		20 ee ff	jsr $ffee	                jsr OSWRCH
813	.86ff		e6 f6		inc $f6		                inc $F6
814	.8701		24 f6		bit $f6		                bit $F6
815	.8703		50 ec		bvc $86f1	                bvc printROMNameLoop         ;taken if address<$8040
816	.8705		80 34		bra $873b	                bra invalidROM               ;taken if name too long

818	.8707						printROMVersion:
819	.8707		aa		tax		                tax               ;Z=1 if final char was the expected 0
820	.8708		d0 31		bne $873b	                bne invalidROM    ;taken if bad (control) char in name
821	.870a		a9 08		lda #$08	                lda #<sidewaysROMVersion
822	.870c		85 f6		sta $f6		                sta $F6
823	.870e		a9 80		lda #$80	                lda #>sidewaysROMVersion
824	.8710		85 f7		sta $f7		                sta $F7
825	.8712		20 eb f1	jsr $f1eb	                jsr mos.osrdscEntryPoint
826	.8715		20 15 ae	jsr $ae15	                jsr printSpaceThenPrintHexByte
827	.8718						printInsertionStatus:
828	.8718		5a		phy		                phy
829							                .if version<500&&version!=350
830	.8719		20 63 e8	jsr $e863	                jsr mos.getROMInsertedFlagRTCAddressAndMask
831	.871c		85 b0		sta $b0		                sta starROMSWorkspace.insertedFlagMask
832	.871e		20 4b 9b	jsr $9b4b	                jsr readRTCByte
833	.8721		25 b0		and $b0		                and starROMSWorkspace.insertedFlagMask
836							                .endif
837	.8723		d0 0e		bne $8733	                bne +
838	.8725		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
839	>8728		20 75 6e 70 6c 75 67 67		                .text " unplugged",0
	>8730		65 64 00
840	.8733						+
841	.8733		7a		ply		                ply
842	.8734		20 e7 ff	jsr $ffe7	                jsr OSNEWL
843	.8737		88		dey		                dey
844	.8738		10 88		bpl $86c2	                bpl printROMsLoop
845	.873a		60		rts		                rts

847	.873b						invalidROM:
848	.873b		a9 3f		lda #$3f	                lda #'?'
849	.873d		20 ee ff	jsr $ffee	                jsr OSWRCH
850	.8740		80 d6		bra $8718	                bra printInsertionStatus

852							;-------------------------------------------------------------------------

854							                .if version>=500||version==350
861							                .endif

863							;-------------------------------------------------------------------------
864							;
865							; *INSERT [MasRef C.5-8]
866							;
867	.8742						starINSERT:
868	.8742		38		sec		                sec
869	.8743		80 01		bra $8746	                bra starINSERTOrStarUNPLUG

871							;-------------------------------------------------------------------------
872							;
873							; *UNPLUG [MasRef C.5-13]
874							;
875	.8745						starUNPLUG:
876	.8745		18		clc		                clc
877	.8746						starINSERTOrStarUNPLUG:
878	.8746		08		php		                php
879	.8747		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
880							                .if version<500&&version!=350
881	.874a		20 f5 8c	jsr $8cf5	                jsr parseSingle4BitNumberFromCommandLine
884							                .endif
885	.874d		a8		tay		                tay                          ;Y=ROM number
886	.874e		20 63 e8	jsr $e863	                jsr mos.getROMInsertedFlagRTCAddressAndMask
887	.8751		48		pha		                pha
888	.8752		20 4b 9b	jsr $9b4b	                jsr readRTCByte
889	.8755		84 b0		sty $b0		                sty starROMSWorkspace.insertedFlagMask
890	.8757		68		pla		                pla
891	.8758		28		plp		                plp
892	.8759		90 04		bcc $875f	                bcc unplug                   ;taken if it's *UNPLUG

894							                ; it's *INSERT
895	.875b		05 b0		ora $b0		                ora starROMSWorkspace.insertedFlagMask
896	.875d		80 04		bra $8763	                bra +
897	.875f						unplug:
898	.875f		49 ff		eor #$ff	                eor #$FF
899	.8761		25 b0		and $b0		                and starROMSWorkspace.insertedFlagMask
900	.8763						+
901	.8763		a8		tay		                tay
902	.8764		4c 78 9b	jmp $9b78	                jmp writeRTCByte

904							;-------------------------------------------------------------------------
905							;
906							; *TIME [MasRef C.5-12]
907							;
908	.8767						starTIME:
909	.8767		9c 00 dc	stz $dc00	                stz hazel.commandLine
910	.876a		a2 00		ldx #$00	                ldx #<hazel.commandLine
911	.876c		a0 dc		ldy #$dc	                ldy #>hazel.commandLine
912	.876e		a9 0e		lda #$0e	                lda #$0E
913	.8770		20 f1 ff	jsr $fff1	                jsr OSWORD
914	.8773		a2 e7		ldx #$e7	                ldx #256-size(ClockStringFormat)
915	.8775						L8752:
916	.8775		bd 19 db	lda $db19,x	                lda hazel.commandLine-(256-size(ClockStringFormat)),x
917	.8778		20 e3 ff	jsr $ffe3	                jsr OSASCI
918	.877b		e8		inx		                inx
919	.877c		d0 f7		bne $8775	                bne L8752
920	.877e		60		rts		                rts

922							;-------------------------------------------------------------------------

924							                .if version==350
930							                .elsif version<500
931							                .include "sram_utils.s65"

:7	;******  Processing file: src/sram_utils.s65

1							;-------------------------------------------------------------------------

3	.877f						unk_8BE8:
4							                .if version>=500||version==350
6							                .endif
7	>877f		09				                .byte 9
8	>8780		0a				                .byte $A
9	>8781		0b				                .byte $B
10	>8782		0c				                .byte $C
11	>8783		02				                .byte 2
12	>8784		03				                .byte 3
13	>8785		04				                .byte 4
14	>8786		05				                .byte 5
15	>8787		06				                .byte 6

17							;-------------------------------------------------------------------------

19	.8788						L8BF2:
20							                .if version==400
21	.8788		b2 f0		lda ($f0)	                lda ($f0)
22	.878a		29 c0		and #$c0	                and #$c0
23	.878c		8d ee 02	sta $02ee	                sta osfileParameterBlock+1
24							                .endif
25	.878f		a0 09		ldy #$09	                ldy #9

27	.8791						L8BF4:
28	.8791		b1 f0		lda ($f0),y	                lda ($F0),y
29							                .if version==400
30	.8793		be 7e 87	ldx $877e,y	                ldx unk_8BE8-1,y
33							                .endif
34	.8796		9d ed 02	sta $02ed,x	                sta osfileParameterBlock,x
35	.8799		88		dey		                dey
36							                .if version==400
37	.879a		d0 f5		bne $8791	                bne L8BF4
41							                .endif

43	.879c						L8C00:
44	.879c		b9 b0 00	lda $00b0,y	                lda $B0,y
45	.879f		48		pha		                pha
46	.87a0		c8		iny		                iny
47	.87a1		c0 04		cpy #$04	                cpy #4
48	.87a3		90 f7		bcc $879c	                bcc L8C00
49	.87a5		20 35 89	jsr $8935	                jsr L8DB7
50	.87a8		a0 03		ldy #$03	                ldy #3

52	.87aa						L8C0E:
53	.87aa		68		pla		                pla
54	.87ab		99 b0 00	sta $00b0,y	                sta $B0,y
55	.87ae		88		dey		                dey
56	.87af		10 f9		bpl $87aa	                bpl L8C0E
57	.87b1		60		rts		                rts

59							;-------------------------------------------------------------------------

61	.87b2						L8C16:
62	.87b2		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
63	.87b5		50 30		bvc $87e7	                bvc L8C4B
64	.87b7		a0 04		ldy #$04	                ldy #4
65	.87b9		ad f2 02	lda $02f2	                lda osfileParameterBlock+5
66	.87bc		ae f3 02	ldx $02f3	                ldx osfileParameterBlock+6

68	.87bf						L8C23:
69	.87bf		e0 3f		cpx #$3f	                cpx #$3F
70	.87c1		90 16		bcc $87d9	                bcc L8C3D
71	.87c3		d0 04		bne $87c9	                bne L8C2D
72	.87c5		c9 f0		cmp #$f0	                cmp #$F0
73	.87c7		90 10		bcc $87d9	                bcc L8C3D

75	.87c9						L8C2D:
76	.87c9		e9 f0		sbc #$f0	                sbc #$F0
77	.87cb		48		pha		                pha
78	.87cc		8a		txa		                txa
79	.87cd		e9 3f		sbc #$3f	                sbc #$3F
80	.87cf		aa		tax		                tax
81	.87d0		68		pla		                pla
82	.87d1		c8		iny		                iny
83	.87d2		c0 08		cpy #$08	                cpy #8
84	.87d4		90 e9		bcc $87bf	                bcc L8C23
85	.87d6		4c df 95	jmp $95df	                jmp badAddressError

87							;-------------------------------------------------------------------------

89	.87d9						L8C3D:
90	.87d9		69 10		adc #$10	                adc #$10
91	.87db		8d f2 02	sta $02f2	                sta osfileParameterBlock+5
92	.87de		8a		txa		                txa
93	.87df		69 80		adc #$80	                adc #$80
94	.87e1		8d f3 02	sta $02f3	                sta osfileParameterBlock+6
95	.87e4		8c f1 02	sty $02f1	                sty osfileParameterBlock+4

97	.87e7						L8C4B:
98	.87e7		ad f1 02	lda $02f1	                lda osfileParameterBlock+4
99	.87ea		c9 10		cmp #$10	                cmp #$10
100	.87ec		90 09		bcc $87f7	                bcc L8C5B
101	.87ee		c9 14		cmp #$14	                cmp #$14
102	.87f0		b0 1e		bcs $8810	                bcs L8C74
103	.87f2		49 14		eor #$14	                eor #$14
104	.87f4		8d f1 02	sta $02f1	                sta osfileParameterBlock+4

106	.87f7						L8C5B:
107	.87f7		aa		tax		                tax
108	.87f8		20 31 f8	jsr $f831	                jsr mos.LF89A
109	.87fb		b0 07		bcs $8804	                bcs L8C68
110	.87fd		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
111	.8800		10 0e		bpl $8810	                bpl L8C74
112	.8802		70 0c		bvs $8810	                bvs L8C74

114	.8804						L8C68:
115	.8804		20 35 8b	jsr $8b35	                jsr L8F84
116	.8807		ae f1 02	ldx $02f1	                ldx osfileParameterBlock+4
117	.880a		4d ee 02	eor $02ee	                eor osfileParameterBlock+1
118	.880d		29 40		and #$40	                and #$40
119	.880f		60		rts		                rts

121							;-------------------------------------------------------------------------

123	.8810						L8C74:
124	.8810		20 23 b0	jsr $b023	                jsr doFollowingError

126							;-------------------------------------------------------------------------

128	>8813		80				                .byte $80
129	>8814		42 61 64 20 69 64		                .text "Bad id"
130	>881a		00				                .byte 0

132							;-------------------------------------------------------------------------

134	.881b						L8C7F:
135	.881b		20 5d 86	jsr $865d	                jsr readHexDigit
136	.881e		2c 5e e3	bit $e35e	                bit mos.valueFF
137	.8821		b0 0d		bcs $8830	                bcs L8C94
138	.8823		29 df		and #$df	                and #$DF
139	.8825		c9 5b		cmp #$5b	                cmp #$5B
140	.8827		b0 1d		bcs $8846	                bcs L8CAA
141	.8829		c9 57		cmp #$57	                cmp #'W'
142	.882b		90 19		bcc $8846	                bcc L8CAA
143	.882d		e9 53		sbc #$53	                sbc #'S'
144	.882f		c8		iny		                iny

146	.8830						L8C94:
147	.8830		c9 01		cmp #$01	                cmp #1
148	.8832		d0 09		bne $883d	                bne L8CA1
149	.8834		88		dey		                dey
150	.8835		20 fb 85	jsr $85fb	                jsr parseNumberFromString
151	.8838		8a		txa		                txa
152	.8839		c9 10		cmp #$10	                cmp #$10
153	.883b		b0 d3		bcs $8810	                bcs L8C74

155	.883d						L8CA1:
156	.883d		8d f1 02	sta $02f1	                sta osfileParameterBlock+4
157	.8840		a9 40		lda #$40	                lda #$40
158	.8842		1c ee 02	trb $02ee	                trb osfileParameterBlock+1
159	.8845		b8		clv		                clv

161	.8846						L8CAA:
162	.8846		4c ee f0	jmp $f0ee	                jmp mos.skipSpacesAndCheckForCRInStringInput


165							;-------------------------------------------------------------------------

167	.8849						starSRDATAOrStarSRROM:
168	.8849		48		pha		                pha
169	.884a		20 1b 88	jsr $881b	                jsr L8C7F
170	.884d		70 22		bvs $8871	                bvs L8CD6
171	.884f		d0 20		bne $8871	                bne L8CD6
172	.8851		68		pla		                pla
173							                .if version==400
174	.8852		20 88 8a	jsr $8a88	                jsr L8A88
178							                .endif
179	.8855		20 e7 87	jsr $87e7	                jsr L8C4B
180	.8858		b0 b6		bcs $8810	                bcs L8C74
181	.885a		d0 06		bne $8862	                bne L8CC7
182	.885c		1d a1 02	ora $02a1,x	                ora romInformationTable,x
183	.885f		f0 0a		beq $886b	                beq L8CD0
184	.8861		60		rts		                rts

186							;-------------------------------------------------------------------------

188	.8862						L8CC7:
189	.8862		ad de df	lda $dfde	                lda hazel.dfde
190	.8865		5d fd 8a	eor $8afd,x	                eor L8F4C,x
191	.8868		8d de df	sta $dfde	                sta hazel.dfde

193	.886b						L8CD0:
194	.886b		20 fb 8a	jsr $8afb	                jsr L8F4A
195	.886e		4c 13 f8	jmp $f813	                jmp mos.LF87C

197							;-------------------------------------------------------------------------

199	.8871						L8CD6:
200	.8871		4c bd fa	jmp $fabd	                jmp mos.badCommandError

202							;-------------------------------------------------------------------------

204	.8874						L8CD9:
205	.8874		20 85 88	jsr $8885	                jsr L8CEA
206	.8877		b0 0b		bcs $8884	                bcs locret_8CE9
207	.8879		20 a1 f7	jsr $f7a1	                jsr mos.LF846
208	.887c		8c f2 02	sty $02f2	                sty osfileParameterBlock+5
209	.887f		b5 01		lda $01,x	                lda 1,x
210	.8881		8d f3 02	sta $02f3	                sta osfileParameterBlock+6

212	.8884						locret_8CE9:
213	.8884		60		rts		                rts


216							;-------------------------------------------------------------------------

218	.8885						L8CEA:
219	.8885		a2 b0		ldx #$b0	                ldx #$B0
220	.8887		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
221	.888a		10 02		bpl $888e	                bpl L8CF3
222	.888c		a2 b2		ldx #$b2	                ldx #$B2

224	.888e						L8CF3:
225	.888e		74 00		stz $00,x	                stz 0,x
226	.8890		ac f2 02	ldy $02f2	                ldy osfileParameterBlock+5
227	.8893		98		tya		                tya
228	.8894		18		clc		                clc
229	.8895		6d ef 02	adc $02ef	                adc osfileParameterBlock+2
230	.8898		8d ef 02	sta $02ef	                sta osfileParameterBlock+2
231	.889b		ad f3 02	lda $02f3	                lda osfileParameterBlock+6
232	.889e		95 01		sta $01,x	                sta 1,x
233	.88a0		6d f0 02	adc $02f0	                adc osfileParameterBlock+3
234	.88a3		8d f0 02	sta $02f0	                sta osfileParameterBlock+3
235	.88a6		38		sec		                sec
236	.88a7		20 13 8b	jsr $8b13	                jsr L8F62


239							;-------------------------------------------------------------------------

241	.88aa						L8D0F:

243	.88aa		cc ef 02	cpy $02ef	                cpy osfileParameterBlock+2
244	.88ad		d0 08		bne $88b7	                bne L8D1C
245	.88af		b5 01		lda $01,x	                lda 1,x
246	.88b1		cd f0 02	cmp $02f0	                cmp osfileParameterBlock+3
247	.88b4		d0 01		bne $88b7	                bne L8D1C
248	.88b6		60		rts		                rts

250							;-------------------------------------------------------------------------

252	.88b7						L8D1C:
253	.88b7		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
254	.88ba		50 32		bvc $88ee	                bvc L8D53
255	.88bc		b5 01		lda $01,x	                lda 1,x
256	.88be		c9 c0		cmp #$c0	                cmp #$C0
257	.88c0		90 2c		bcc $88ee	                bcc L8D53
258	.88c2		a9 80		lda #$80	                lda #$80
259	.88c4		95 01		sta $01,x	                sta 1,x
260	.88c6		ee f1 02	inc $02f1	                inc osfileParameterBlock+4
261	.88c9		ad f1 02	lda $02f1	                lda osfileParameterBlock+4
262	.88cc		c9 08		cmp #$08	                cmp #8
263	.88ce		b0 2e		bcs $88fe	                bcs L8D63
264	.88d0		da		phx		                phx
265	.88d1		20 e7 87	jsr $87e7	                jsr L8C4B
266	.88d4		d0 28		bne $88fe	                bne L8D63
267	.88d6		fa		plx		                plx
268	.88d7		a0 10		ldy #$10	                ldy #$10
269	.88d9		ad ef 02	lda $02ef	                lda osfileParameterBlock+2
270	.88dc		38		sec		                sec
271	.88dd		e9 f0		sbc #$f0	                sbc #$F0
272	.88df		8d ef 02	sta $02ef	                sta osfileParameterBlock+2
273	.88e2		ad f0 02	lda $02f0	                lda osfileParameterBlock+3
274	.88e5		e9 3f		sbc #$3f	                sbc #$3F
275	.88e7		8d f0 02	sta $02f0	                sta osfileParameterBlock+3
276	.88ea		18		clc		                clc
277	.88eb		20 13 8b	jsr $8b13	                jsr L8F62

279	.88ee						L8D53:
280	.88ee		ad f1 02	lda $02f1	                lda osfileParameterBlock+4
281	.88f1		18		clc		                clc

283	.88f2						locret_8D57:
284	.88f2		60		rts		                rts

286							;-------------------------------------------------------------------------

288	.88f3						L8D58:
289	.88f3		20 ef 95	jsr $95ef	                jsr parseHexAddressFromCommandLine

291	.88f6						L8D5B:
292	.88f6		bd ef 02	lda $02ef,x	                lda osfileParameterBlock+2,x
293	.88f9		1d f0 02	ora $02f0,x	                ora osfileParameterBlock+3,x
294	.88fc		f0 f4		beq $88f2	                beq locret_8D57

296	.88fe						L8D63:
297	.88fe		4c df 95	jmp $95df	                jmp badAddressError

299							;-------------------------------------------------------------------------

301	.8901						L8D66:
302							                .if version!=400
316							                .endif

318							;-------------------------------------------------------------------------

320	.8901						starSRREADOrStarSRWRITE:
321							                .if version==400
322	.8901		20 88 8a	jsr $8a88	                jsr L8A88
326							                .endif
327	.8904		a2 09		ldx #$09	                ldx #9
328	.8906		20 ef 95	jsr $95ef	                jsr parseHexAddressFromCommandLine
329	.8909		20 05 8b	jsr $8b05	                jsr L8F54
330	.890c		a2 02		ldx #$02	                ldx #2
331	.890e		20 ef 95	jsr $95ef	                jsr parseHexAddressFromCommandLine
332	.8911		70 10		bvs $8923	                bvs L8DA2
333	.8913		a2 fc		ldx #$fc	                ldx #$FC

335	.8915						L8D94:
336	.8915		bd f3 01	lda $01f3,x	                lda osfileParameterBlock+2-$FC,x
337	.8918		fd fa 01	sbc $01fa,x	                sbc osfileParameterBlock+9-$FC,x
338	.891b		9d f3 01	sta $01f3,x	                sta osfileParameterBlock+2-$FC,x
339	.891e		e8		inx		                inx
340	.891f		d0 f4		bne $8915	                bne L8D94
341	.8921		90 db		bcc $88fe	                bcc L8D63

343	.8923						L8DA2:
344	.8923		a2 02		ldx #$02	                ldx #2
345	.8925		20 f6 88	jsr $88f6	                jsr L8D5B
346	.8928		a2 05		ldx #$05	                ldx #5
347	.892a		20 f3 88	jsr $88f3	                jsr L8D58
348	.892d		20 1b 88	jsr $881b	                jsr L8C7F
349							                .if version>=500||version==350
351							                .endif
352	.8930		f0 03		beq $8935	                beq L8DB7

354	.8932						L8DB4:
355	.8932		4c bd fa	jmp $fabd	                jmp mos.badCommandError

357							;-------------------------------------------------------------------------

359	.8935						L8DB7:

361	.8935		08		php		                php
362	.8936		20 b2 87	jsr $87b2	                jsr L8C16
363	.8939		f0 03		beq $893e	                beq L8DC0
364	.893b		20 10 88	jsr $8810	                jsr L8C74

366	.893e						L8DC0:
367	.893e		20 f1 8a	jsr $8af1	                jsr L8F40
368							                .if version==400||version==350
369	.8941		ad f8 02	lda $02f8	                lda osfileParameterBlock+11
370	.8944		2d f9 02	and $02f9	                and osfileParameterBlock+12
371	.8947		1a		inc a		                inc a
372	.8948		2d 7a 02	and $027a	                and tubePresence
373	.894b		d0 05		bne $8952	                bne L8952
374							                .endif
375	.894d		20 74 88	jsr $8874	                jsr L8CD9
376	.8950		28		plp		                plp
377							                .if version==400
378	.8951		60		rts		                rts
381							                .endif

383							;-------------------------------------------------------------------------

385							                .if version<500
386	.8952						L8952:
387	.8952		a9 c8		lda #$c8	                lda #$c8
388	.8954		20 06 04	jsr $0406	                jsr $0406
389	.8957		90 f9		bcc $8952	                bcc L8952
390	.8959		a9 00		lda #$00	                lda #0
391	.895b		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
392	.895e		30 01		bmi $8961	                bmi L8961_sram
393	.8960		1a		inc a		                inc a
394	.8961						L8961_sram:
395	.8961		a2 f6		ldx #$f6	                ldx #$f6        ;TODO
396	.8963		a0 02		ldy #$02	                ldy #$02        ;TODO
397	.8965		20 06 04	jsr $0406	                jsr $0406
398	.8968		20 85 88	jsr $8885	                jsr L8CEA
399	.896b		b0 03		bcs $8970	                bcs L8970
400	.896d		20 d1 f7	jsr $f7d1	                jsr mos.LF7D1
401	.8970						L8970:
402	.8970		a9 88		lda #$88	                lda #$88
403	.8972		20 06 04	jsr $0406	                jsr $0406
404	.8975		28		plp		                plp
405	.8976		60		rts		                rts
406							                .endif

408							;-------------------------------------------------------------------------

410	.8977						starSRLOADOrStarSRSAVE:
411							                .if version==400
412	.8977		20 88 8a	jsr $8a88	                jsr L8A88
416							                .endif
417	.897a		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
418	.897d		86 f2		stx $f2		                stx stringInputBufferAddress
419	.897f		84 f3		sty $f3		                sty stringInputBufferAddress+1
420	.8981		8e ef 02	stx $02ef	                stx osfileParameterBlock+2
421	.8984		8c f0 02	sty $02f0	                sty osfileParameterBlock+3
422	.8987		a0 00		ldy #$00	                ldy #0
423	.8989		20 5c f0	jsr $f05c	                jsr mos.gsinitForFilenameParsing

425	.898c						L8DE0:
426	.898c		20 6e f0	jsr $f06e	                jsr mos.gsreadEntryPoint
427	.898f		90 fb		bcc $898c	                bcc L8DE0
428	.8991		a2 05		ldx #$05	                ldx #5
429	.8993		20 f3 88	jsr $88f3	                jsr L8D58
430	.8996		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
431	.8999		30 1e		bmi $89b9	                bmi L8E0D
432	.899b		20 05 8b	jsr $8b05	                jsr L8F54
433	.899e		a2 07		ldx #$07	                ldx #7
434	.89a0		20 f3 88	jsr $88f3	                jsr L8D58
435	.89a3		70 14		bvs $89b9	                bvs L8E0D
436	.89a5		38		sec		                sec
437	.89a6		a2 fe		ldx #$fe	                ldx #$FE

439	.89a8						L8DFC:
440	.89a8		bd f6 01	lda $01f6,x	                lda osfileParameterBlock+7-$FE,x
441	.89ab		fd f4 01	sbc $01f4,x	                sbc osfileParameterBlock+5-$FE,x
442	.89ae		9d f6 01	sta $01f6,x	                sta osfileParameterBlock+7-$FE,x
443	.89b1		e8		inx		                inx
444	.89b2		d0 f4		bne $89a8	                bne L8DFC
445	.89b4		b0 03		bcs $89b9	                bcs L8E0D
446	.89b6		4c fe 88	jmp $88fe	                jmp L8D63

448							;-------------------------------------------------------------------------

450	.89b9						L8E0D:
451	.89b9		20 1b 88	jsr $881b	                jsr L8C7F
452	.89bc		9c f8 02	stz $02f8	                stz osfileParameterBlock+$B
453							                .if version==350
455							                .else
456	.89bf		a2 00		ldx #$00	                ldx #0
457							                .endif
458							                .if version>=500||version==350
460							                .endif
461	.89c1		29 df		and #$df	                and #$DF
462							                .if version==350
464							                .endif
465	.89c3		c9 51		cmp #$51	                cmp #'Q'
466							                .if version==350
468							                .else
469	.89c5		d0 02		bne $89c9	                bne L8E20
470							                .endif
471							                .if version==350
473							                .endif
474							                .if version==350
479							                .else
480	.89c7		ca		dex		                dex
481	.89c8		c8		iny		                iny
482							                .endif

484	.89c9						L8E20:
485	.89c9		8e f9 02	stx $02f9	                stx osfileParameterBlock+$C
486	.89cc		ae 34 fe	ldx $fe34	                ldx ACCCON
487							                .if version==400
488	.89cf		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
491							                .endif
492	.89d2		f0 1b		beq $89ef	                beq L8E41
493	.89d4		4c 32 89	jmp $8932	                jmp L8DB4

495							;-------------------------------------------------------------------------

497	.89d7						L8E2E:
498	.89d7		ae 34 fe	ldx $fe34	                ldx ACCCON
499	.89da		20 b9 eb	jsr $ebb9	                jsr mos.selectHAZEL
500	.89dd		9c c6 df	stz $dfc6	                stz hazel.tempFSFlag
501	.89e0		a0 0b		ldy #$0b	                ldy #$B

503	.89e2						L8E39:
504	.89e2		b1 f0		lda ($f0),y	                lda ($F0),y
505	.89e4		99 ee 02	sta $02ee,y	                sta osfileParameterBlock+1,y
506	.89e7		88		dey		                dey
507	.89e8		10 f8		bpl $89e2	                bpl L8E39
508							                .if version==400
509	.89ea		a9 3f		lda #$3f	                lda #$3f
510	.89ec		1c ee 02	trb $02ee	                trb osfileParameterBlock+1
511							                .endif

513	.89ef						L8E41:
514	.89ef		08		php		                php
515	.89f0		da		phx		                phx
516	.89f1		20 b2 87	jsr $87b2	                jsr L8C16
517	.89f4		f0 03		beq $89f9	                beq L8E4B
518	.89f6		4c 10 88	jmp $8810	                jmp L8C74

520							;-------------------------------------------------------------------------

522	.89f9						L8E4B:
523	.89f9		ad f9 02	lda $02f9	                lda osfileParameterBlock+$C
524	.89fc		30 0b		bmi $8a09	                bmi L8E5B
525	.89fe		0d f8 02	ora $02f8	                ora osfileParameterBlock+$B
526	.8a01		d0 1d		bne $8a20	                bne L8E72
527	.8a03		a9 02		lda #$02	                lda #2
528	.8a05		a0 dd		ldy #$dd	                ldy #$DD
529	.8a07		80 0b		bra $8a14	                bra L8E66

531							;-------------------------------------------------------------------------

533	.8a09						L8E5B:
534	.8a09		20 a9 ef	jsr $efa9	                jsr mos.osbyte84
535	.8a0c		98		tya		                tya
536	.8a0d		38		sec		                sec
537	.8a0e		ed 44 02	sbc $0244	                sbc oshwm
538	.8a11		ac 44 02	ldy $0244	                ldy oshwm

540	.8a14						L8E66:
541	.8a14		9c f6 02	stz $02f6	                stz osfileParameterBlock+9
542	.8a17		8c f7 02	sty $02f7	                sty osfileParameterBlock+$A
543	.8a1a		9c f8 02	stz $02f8	                stz osfileParameterBlock+$B
544	.8a1d		8d f9 02	sta $02f9	                sta osfileParameterBlock+$C

546	.8a20						L8E72:
547	.8a20		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
548	.8a23		10 36		bpl $8a5b	                bpl L8EAF
549	.8a25		a9 40		lda #$40	                lda #$40
550	.8a27		20 cc 8a	jsr $8acc	                jsr L8F1B

552	.8a2a						L8E7C:
553	.8a2a		38		sec		                sec
554	.8a2b		20 9e 8a	jsr $8a9e	                jsr L8EED
555	.8a2e		a9 04		lda #$04	                lda #4
556	.8a30		20 c5 8a	jsr $8ac5	                jsr L8F14_500
557	.8a33		08		php		                php
558	.8a34		90 0e		bcc $8a44	                bcc L8E96
559	.8a36		a2 fe		ldx #$fe	                ldx #$FE

561	.8a38						L8E8A:
562	.8a38		bd f1 01	lda $01f1,x	                lda osfileParameterBlock+2-$FE,x

564	.8a3b						L8E8D:
565	.8a3b		fd ce de	sbc $dece,x	                sbc hazel.moveOSGBPB+OSGBPBParameterBlock.count+0-$fe,x
566	.8a3e		9d f1 01	sta $01f1,x	                sta osfileParameterBlock+2-$FE,x
567	.8a41		e8		inx		                inx
568	.8a42		d0 f4		bne $8a38	                bne L8E8A

570	.8a44						L8E96:
571	.8a44		20 74 88	jsr $8874	                jsr L8CD9
572	.8a47		28		plp		                plp
573	.8a48		90 e0		bcc $8a2a	                bcc L8E7C

575	.8a4a						L8E9C:
576	.8a4a		ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle
577	.8a4d		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
578	.8a50		a9 00		lda #$00	                lda #0
579	.8a52		20 ce ff	jsr $ffce	                jsr OSFIND
580	.8a55		68		pla		                pla
581	.8a56		8d 34 fe	sta $fe34	                sta ACCCON
582	.8a59		28		plp		                plp
583							                .if version==400
584	.8a5a		60		rts		                rts
587							                .endif

589							;-------------------------------------------------------------------------

591	.8a5b						L8EAF:
592	.8a5b		a9 80		lda #$80	                lda #$80
593	.8a5d		20 cc 8a	jsr $8acc	                jsr L8F1B

595	.8a60						L8EB4:
596	.8a60		38		sec		                sec
597	.8a61		a2 fe		ldx #$fe	                ldx #$FE

599	.8a63						L8EB7:
600	.8a63		bd f6 01	lda $01f6,x	                lda osfileParameterBlock+7-$FE,x
601	.8a66		9d b2 ff	sta $ffb2,x	                sta ($B0-$FE)&$ffff,x
602	.8a69		fd fa 01	sbc $01fa,x	                sbc osfileParameterBlock+$B-$FE,x
603	.8a6c		9d f6 01	sta $01f6,x	                sta osfileParameterBlock+7-$FE,x
604	.8a6f		e8		inx		                inx
605	.8a70		d0 f1		bne $8a63	                bne L8EB7
606	.8a72		0d f4 02	ora $02f4	                ora osfileParameterBlock+7
607	.8a75		08		php		                php
608	.8a76		20 9e 8a	jsr $8a9e	                jsr L8EED
609	.8a79		20 74 88	jsr $8874	                jsr L8CD9
610	.8a7c		a9 02		lda #$02	                lda #2
611	.8a7e		20 c5 8a	jsr $8ac5	                jsr L8F14_500
612	.8a81		28		plp		                plp
613	.8a82		90 c6		bcc $8a4a	                bcc L8E9C
614	.8a84		f0 c4		beq $8a4a	                beq L8E9C
615	.8a86		80 d8		bra $8a60	                bra L8EB4

617							;-------------------------------------------------------------------------

619							                .if version==400
620	.8a88						L8A88:
621	.8a88		0a		asl a		                asl a
622	.8a89		8d ee 02	sta $02ee	                sta osfileParameterBlock+1
623	.8a8c		60		rts		                rts
624							                .endif

626							;-------------------------------------------------------------------------

628	.8a8d						L8EDC:
629	.8a8d		a9 00		lda #$00	                lda #0
630	.8a8f		a2 07		ldx #$07	                ldx #7

632	.8a91						L8EE0:
633	.8a91		48		pha		                pha
634	.8a92		20 31 f8	jsr $f831	                jsr mos.LF89A
635	.8a95		68		pla		                pla
636	.8a96		2a		rol a		                rol a
637	.8a97		ca		dex		                dex
638	.8a98		e0 04		cpx #$04	                cpx #4
639	.8a9a		b0 f5		bcs $8a91	                bcs L8EE0
640	.8a9c		aa		tax		                tax
641	.8a9d		60		rts		                rts

643							;-------------------------------------------------------------------------

645	.8a9e						L8EED:
646	.8a9e		ad d4 df	lda $dfd4	                lda hazel.moveSrcHandle
647	.8aa1		8d c7 df	sta $dfc7	                sta hazel.moveOSGBPB+0
648	.8aa4		a2 01		ldx #$01	                ldx #1

650	.8aa6						L8EF5:
651	.8aa6		bd f6 02	lda $02f6,x	                lda osfileParameterBlock+9,x
652	.8aa9		9d c8 df	sta $dfc8,x	                sta $DFC8,x
653	.8aac		bd f8 02	lda $02f8,x	                lda osfileParameterBlock+$B,x
654	.8aaf		b0 02		bcs $8ab3	                bcs L8F02
655	.8ab1		b5 b0		lda $b0,x	                lda $B0,x

657	.8ab3						L8F02:
658	.8ab3		9d cc df	sta $dfcc,x	                sta $DFCC,x
659	.8ab6		9d ef 02	sta $02ef,x	                sta osfileParameterBlock+2,x
660	.8ab9		a9 ff		lda #$ff	                lda #$FF
661	.8abb		9d ca df	sta $dfca,x	                sta $DFCA,x
662	.8abe		9e ce df	stz $dfce,x	                stz $DFCE,x
663	.8ac1		ca		dex		                dex
664	.8ac2		10 e2		bpl $8aa6	                bpl L8EF5
665	.8ac4		60		rts		                rts


668							;-------------------------------------------------------------------------

670	.8ac5						L8F14_500:
671	.8ac5		a2 c7		ldx #$c7	                ldx #<hazel.moveOSGBPB
672	.8ac7		a0 df		ldy #$df	                ldy #>hazel.moveOSGBPB
673	.8ac9		4c d1 ff	jmp $ffd1	                jmp OSGBPB


676							;-------------------------------------------------------------------------

678	.8acc						L8F1B:
679	.8acc		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
680	.8acf		ae ef 02	ldx $02ef	                ldx osfileParameterBlock+2
681	.8ad2		ac f0 02	ldy $02f0	                ldy osfileParameterBlock+3
682	.8ad5		20 ce ff	jsr $ffce	                jsr OSFIND
683	.8ad8		aa		tax		                tax
684	.8ad9		d0 13		bne $8aee	                bne L8F3D
685	.8adb		20 23 b0	jsr $b023	                jsr doFollowingError

687							;-------------------------------------------------------------------------

689	>8ade		d6				                .byte $D6
690	>8adf		46 69 6c 65 20 6e 6f 74		                .text "File not found"
	>8ae7		20 66 6f 75 6e 64
691	>8aed		00				                .byte 0

693							;-------------------------------------------------------------------------

695	.8aee						L8F3D:
696	.8aee		8d d4 df	sta $dfd4	                sta hazel.moveSrcHandle


699							;-------------------------------------------------------------------------

701	.8af1						L8F40:
702	.8af1		ae f1 02	ldx $02f1	                ldx osfileParameterBlock+4
703	.8af4		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
704	.8af7		10 07		bpl $8b00	                bpl locret_8F4F
705	.8af9		70 05		bvs $8b00	                bvs locret_8F4F

707	.8afb						L8F4A:
708	.8afb		a9 02		lda #$02	                lda #2

710	.8afd						L8F4C:
711	.8afd		9d a1 02	sta $02a1,x	                sta romInformationTable,x

713	.8b00						locret_8F4F:
714	.8b00		60		rts		                rts


717							;-------------------------------------------------------------------------

719	>8b01		01				unk_8F50:       .byte 1
720	>8b02		02				                .byte 2
721	>8b03		04				                .byte 4
722	>8b04		08				                .byte 8

724							;-------------------------------------------------------------------------

726	.8b05						L8F54:
727	.8b05		b8		clv		                clv
728	.8b06		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
729	.8b08		c9 2b		cmp #$2b	                cmp #'+'
730	.8b0a		d0 06		bne $8b12	                bne locret_8F61
731	.8b0c		2c 5e e3	bit $e35e	                bit mos.valueFF
732	.8b0f		20 ed f0	jsr $f0ed	                jsr mos.incAndSkipSpaces

734	.8b12						locret_8F61:
735	.8b12		60		rts		                rts


738							;-------------------------------------------------------------------------

740	.8b13						L8F62:
741	.8b13		da		phx		                phx
742	.8b14		8a		txa		                txa
743	.8b15		49 02		eor #$02	                eor #2
744	.8b17		aa		tax		                tax
745	.8b18		90 0a		bcc $8b24	                bcc L8F73
746	.8b1a		ad f6 02	lda $02f6	                lda osfileParameterBlock+9
747	.8b1d		95 00		sta $00,x	                sta 0,x
748	.8b1f		ad f7 02	lda $02f7	                lda osfileParameterBlock+$A
749	.8b22		95 01		sta $01,x	                sta 1,x

751	.8b24						L8F73:
752	.8b24		8c ed 02	sty $02ed	                sty osfileParameterBlock
753	.8b27		b5 00		lda $00,x	                lda 0,x
754	.8b29		38		sec		                sec
755	.8b2a		ed ed 02	sbc $02ed	                sbc osfileParameterBlock
756	.8b2d		95 00		sta $00,x	                sta 0,x
757	.8b2f		b0 02		bcs $8b33	                bcs L8F82
758	.8b31		d6 01		dec $01,x	                dec 1,x

760	.8b33						L8F82:
761	.8b33		fa		plx		                plx
762	.8b34		60		rts		                rts


765							;-------------------------------------------------------------------------

767	.8b35						L8F84:
768	.8b35		e0 04		cpx #$04	                cpx #4
769	.8b37		90 1c		bcc $8b55	                bcc L8FA4
770	.8b39		e0 08		cpx #$08	                cpx #8
771	.8b3b		b0 18		bcs $8b55	                bcs L8FA4

773	.8b3d						L8F8C:
774	.8b3d		ac 34 fe	ldy $fe34	                ldy ACCCON
775	.8b40		20 b9 eb	jsr $ebb9	                jsr mos.selectHAZEL
776	.8b43		bd fd 8a	lda $8afd,x	                lda unk_8F50-4,x
777	.8b46		ae de df	ldx $dfde	                ldx hazel.dfde
778	.8b49		2d de df	and $dfde	                and hazel.dfde
779	.8b4c		f0 02		beq $8b50	                beq L8F9F
780	.8b4e		a9 40		lda #$40	                lda #$40

782	.8b50						L8F9F:
783	.8b50		8c 34 fe	sty $fe34	                sty ACCCON
784	.8b53		18		clc		                clc
785	.8b54		60		rts		                rts

787							;-------------------------------------------------------------------------

789	.8b55						L8FA4:
790	.8b55		38		sec		                sec
791	.8b56		a9 00		lda #$00	                lda #0
792	.8b58		60		rts		                rts


:5	;******  Return to file: src/terminal.s65

932							                .include "configure320.s65"

:8	;******  Processing file: src/configure320.s65

1	=[]						_:=[]
2	=[(".",$8f01,$9053)]				_..=[(".",printCONFIGUREHelp,printSTATUSHelp)]
3							                .if version<400
5							                .endif
6	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38)]	_..=[("BOOT",setDefaultAutoBoot,printDefaultAutoBoot)]
7	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd)]
							_..=[("CAPS",setDefaultsCapsLock,printDefaultCaps)]
8							                .if version<400
10							                .endif
11	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85)]
							_..=[("DELAY",setDefaultKeyboardAutoRepeatDelay,printDefaultKeyboardAutoRepeatDelay)]
12							                .if version<400
14							                .endif
15	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12)]
							_..=[("EXTUBE",setDefaultExtTube,printDefaultExtTube)]
16							                .if version<400
18							                .endif
19	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67)]
							_..=[("FILE",setDefaultFSROM,printDefaultFSROM)]
20							                .if version<400
22							                .endif
23							                .if version<400
25							                .endif
26	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b)]
							_..=[("IGNORE",setDefaultPrinterIgnoreChar,printDefaultPrinterIgnoreChar)]
27	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12)]
							_..=[("INTUBE",setDefaultIntTube,printDefaultExtTube)]
28	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12),("LANG",$8da9,$8e5f)]
							_..=[("LANG",setDefaultLanguageROM,printDefaultLanguageROM)]
29	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12),("LANG",$8da9,$8e5f),("LOUD",$8d75,$8df6)]
							_..=[("LOUD",setDefaultLoud,printDefaultLoud)]
30	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12),("LANG",$8da9,$8e5f),("LOUD",$8d75,$8df6),("MODE",$8c64,$8e7c)]
							_..=[("MODE",setDefaultMODE,printDefaultMODE)]
31	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12),("LANG",$8da9,$8e5f),("LOUD",$8d75,$8df6),("MODE",$8c64,$8e7c),("NOBOOT",$8d85,$8e38)]
							_..=[("NOBOOT",setDefaultNoAutoBoot,printDefaultAutoBoot)]
32	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12),("LANG",$8da9,$8e5f),("LOUD",$8d75,$8df6),("MODE",$8c64,$8e7c),("NOBOOT",$8d85,$8e38),("NOCAPS",$8c4e,$8dbd)]
							_..=[("NOCAPS",setDefaultNoLock,printDefaultCaps)]
33							                .if version<400
35							                .endif
36	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12),("LANG",$8da9,$8e5f),("LOUD",$8d75,$8df6),("MODE",$8c64,$8e7c),("NOBOOT",$8d85,$8e38),("NOCAPS",$8c4e,$8dbd),("NOSCROLL",$8d93,$8de0)]
							_..=[("NOSCROLL",setDefaultNoProtectedScrolling,printDefaultProtectedScrolling)]
37	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12),("LANG",$8da9,$8e5f),("LOUD",$8d75,$8df6),("MODE",$8c64,$8e7c),("NOBOOT",$8d85,$8e38),("NOCAPS",$8c4e,$8dbd),("NOSCROLL",$8d93,$8de0),("NOTUBE",$8d5c,$8e4c)]
							_..=[("NOTUBE",setDefaultTubeOff,printDefaultTubeOn)]
38	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12),("LANG",$8da9,$8e5f),("LOUD",$8d75,$8df6),("MODE",$8c64,$8e7c),("NOBOOT",$8d85,$8e38),("NOCAPS",$8c4e,$8dbd),("NOSCROLL",$8d93,$8de0),("NOTUBE",$8d5c,$8e4c),("PRINT",$8d3f,$8ecf)]
							_..=[("PRINT",setDefaultFX5Settings,printDefaultFX5Settings)]
39	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12),("LANG",$8da9,$8e5f),("LOUD",$8d75,$8df6),("MODE",$8c64,$8e7c),("NOBOOT",$8d85,$8e38),("NOCAPS",$8c4e,$8dbd),("NOSCROLL",$8d93,$8de0),("NOTUBE",$8d5c,$8e4c),("PRINT",$8d3f,$8ecf),("QUIET",$8d6f,$8df6)]
							_..=[("QUIET",setDefaultQuiet,printDefaultLoud)]
40	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12),("LANG",$8da9,$8e5f),("LOUD",$8d75,$8df6),("MODE",$8c64,$8e7c),("NOBOOT",$8d85,$8e38),("NOCAPS",$8c4e,$8dbd),("NOSCROLL",$8d93,$8de0),("NOTUBE",$8d5c,$8e4c),("PRINT",$8d3f,$8ecf),("QUIET",$8d6f,$8df6),("REPEAT",$8d19,$8e8b)]
							_..=[("REPEAT",setDefaultKeyboardAutoRepeatRate,printDefaultKeyboardRepeatRate)]
41	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12),("LANG",$8da9,$8e5f),("LOUD",$8d75,$8df6),("MODE",$8c64,$8e7c),("NOBOOT",$8d85,$8e38),("NOCAPS",$8c4e,$8dbd),("NOSCROLL",$8d93,$8de0),("NOTUBE",$8d5c,$8e4c),("PRINT",$8d3f,$8ecf),("QUIET",$8d6f,$8df6),("REPEAT",$8d19,$8e8b),("SCROLL",$8d8d,$8de0)]
							_..=[("SCROLL",setDefaultProtectedScrolling,printDefaultProtectedScrolling)]
42	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12),("LANG",$8da9,$8e5f),("LOUD",$8d75,$8df6),("MODE",$8c64,$8e7c),("NOBOOT",$8d85,$8e38),("NOCAPS",$8c4e,$8dbd),("NOSCROLL",$8d93,$8de0),("NOTUBE",$8d5c,$8e4c),("PRINT",$8d3f,$8ecf),("QUIET",$8d6f,$8df6),("REPEAT",$8d19,$8e8b),("SCROLL",$8d8d,$8de0),("SHCAPS",$8c54,$8dbd)]
							_..=[("SHCAPS",setDefaultShiftLock,printDefaultCaps)]
43	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12),("LANG",$8da9,$8e5f),("LOUD",$8d75,$8df6),("MODE",$8c64,$8e7c),("NOBOOT",$8d85,$8e38),("NOCAPS",$8c4e,$8dbd),("NOSCROLL",$8d93,$8de0),("NOTUBE",$8d5c,$8e4c),("PRINT",$8d3f,$8ecf),("QUIET",$8d6f,$8df6),("REPEAT",$8d19,$8e8b),("SCROLL",$8d8d,$8de0),("SHCAPS",$8c54,$8dbd),("TUBE",$8d66,$8e4c)]
							_..=[("TUBE",setDefaultTubeOn,printDefaultTubeOn)]
44	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12),("LANG",$8da9,$8e5f),("LOUD",$8d75,$8df6),("MODE",$8c64,$8e7c),("NOBOOT",$8d85,$8e38),("NOCAPS",$8c4e,$8dbd),("NOSCROLL",$8d93,$8de0),("NOTUBE",$8d5c,$8e4c),("PRINT",$8d3f,$8ecf),("QUIET",$8d6f,$8df6),("REPEAT",$8d19,$8e8b),("SCROLL",$8d8d,$8de0),("SHCAPS",$8c54,$8dbd),("TUBE",$8d66,$8e4c),("TV",$8c7a,$8e6e)]
							_..=[("TV",setDefaultTVSettings,printDefaultTVSettings)]
45	=[(".",$8f01,$9053),("BOOT",$8d7f,$8e38),("CAPS",$8c5a,$8dbd),("DELAY",$8d17,$8e85),("EXTUBE",$8d9b,$8e12),("FILE",$8db6,$8e67),("IGNORE",$8d2c,$8e9b),("INTUBE",$8da1,$8e12),("LANG",$8da9,$8e5f),("LOUD",$8d75,$8df6),("MODE",$8c64,$8e7c),("NOBOOT",$8d85,$8e38),("NOCAPS",$8c4e,$8dbd),("NOSCROLL",$8d93,$8de0),("NOTUBE",$8d5c,$8e4c),("PRINT",$8d3f,$8ecf),("QUIET",$8d6f,$8df6),("REPEAT",$8d19,$8e8b),("SCROLL",$8d8d,$8de0),("SHCAPS",$8c54,$8dbd),("TUBE",$8d66,$8e4c),("TV",$8c7a,$8e6e)]
							configureData=_

47							                .if version<400
60							                .else
61	.8b59						configureTable:
62							                .for i=0,i<len(configureData),i+=1
63	>8b59		2e				                .text configureData[i][0]
12:4	>8b5a		8f				                .byte >configureData[i][1]-1
13	>8b5b		00				                .byte <configureData[i][1]-1
12	>8b5c		90				                .byte >configureData[i][2]-1
13	>8b5d		52				                .byte <configureData[i][2]-1
63:8	>8b5e		42 4f 4f 54			                .text configureData[i][0]
12:4	>8b62		8d				                .byte >configureData[i][1]-1
13	>8b63		7e				                .byte <configureData[i][1]-1
12	>8b64		8e				                .byte >configureData[i][2]-1
13	>8b65		37				                .byte <configureData[i][2]-1
63:8	>8b66		43 41 50 53			                .text configureData[i][0]
12:4	>8b6a		8c				                .byte >configureData[i][1]-1
13	>8b6b		59				                .byte <configureData[i][1]-1
12	>8b6c		8d				                .byte >configureData[i][2]-1
13	>8b6d		bc				                .byte <configureData[i][2]-1
63:8	>8b6e		44 45 4c 41 59			                .text configureData[i][0]
12:4	>8b73		8d				                .byte >configureData[i][1]-1
13	>8b74		16				                .byte <configureData[i][1]-1
12	>8b75		8e				                .byte >configureData[i][2]-1
13	>8b76		84				                .byte <configureData[i][2]-1
63:8	>8b77		45 58 54 55 42 45		                .text configureData[i][0]
12:4	>8b7d		8d				                .byte >configureData[i][1]-1
13	>8b7e		9a				                .byte <configureData[i][1]-1
12	>8b7f		8e				                .byte >configureData[i][2]-1
13	>8b80		11				                .byte <configureData[i][2]-1
63:8	>8b81		46 49 4c 45			                .text configureData[i][0]
12:4	>8b85		8d				                .byte >configureData[i][1]-1
13	>8b86		b5				                .byte <configureData[i][1]-1
12	>8b87		8e				                .byte >configureData[i][2]-1
13	>8b88		66				                .byte <configureData[i][2]-1
63:8	>8b89		49 47 4e 4f 52 45		                .text configureData[i][0]
12:4	>8b8f		8d				                .byte >configureData[i][1]-1
13	>8b90		2b				                .byte <configureData[i][1]-1
12	>8b91		8e				                .byte >configureData[i][2]-1
13	>8b92		9a				                .byte <configureData[i][2]-1
63:8	>8b93		49 4e 54 55 42 45		                .text configureData[i][0]
12:4	>8b99		8d				                .byte >configureData[i][1]-1
13	>8b9a		a0				                .byte <configureData[i][1]-1
12	>8b9b		8e				                .byte >configureData[i][2]-1
13	>8b9c		11				                .byte <configureData[i][2]-1
63:8	>8b9d		4c 41 4e 47			                .text configureData[i][0]
12:4	>8ba1		8d				                .byte >configureData[i][1]-1
13	>8ba2		a8				                .byte <configureData[i][1]-1
12	>8ba3		8e				                .byte >configureData[i][2]-1
13	>8ba4		5e				                .byte <configureData[i][2]-1
63:8	>8ba5		4c 4f 55 44			                .text configureData[i][0]
12:4	>8ba9		8d				                .byte >configureData[i][1]-1
13	>8baa		74				                .byte <configureData[i][1]-1
12	>8bab		8d				                .byte >configureData[i][2]-1
13	>8bac		f5				                .byte <configureData[i][2]-1
63:8	>8bad		4d 4f 44 45			                .text configureData[i][0]
12:4	>8bb1		8c				                .byte >configureData[i][1]-1
13	>8bb2		63				                .byte <configureData[i][1]-1
12	>8bb3		8e				                .byte >configureData[i][2]-1
13	>8bb4		7b				                .byte <configureData[i][2]-1
63:8	>8bb5		4e 4f 42 4f 4f 54		                .text configureData[i][0]
12:4	>8bbb		8d				                .byte >configureData[i][1]-1
13	>8bbc		84				                .byte <configureData[i][1]-1
12	>8bbd		8e				                .byte >configureData[i][2]-1
13	>8bbe		37				                .byte <configureData[i][2]-1
63:8	>8bbf		4e 4f 43 41 50 53		                .text configureData[i][0]
12:4	>8bc5		8c				                .byte >configureData[i][1]-1
13	>8bc6		4d				                .byte <configureData[i][1]-1
12	>8bc7		8d				                .byte >configureData[i][2]-1
13	>8bc8		bc				                .byte <configureData[i][2]-1
63:8	>8bc9		4e 4f 53 43 52 4f 4c 4c		                .text configureData[i][0]
12:4	>8bd1		8d				                .byte >configureData[i][1]-1
13	>8bd2		92				                .byte <configureData[i][1]-1
12	>8bd3		8d				                .byte >configureData[i][2]-1
13	>8bd4		df				                .byte <configureData[i][2]-1
63:8	>8bd5		4e 4f 54 55 42 45		                .text configureData[i][0]
12:4	>8bdb		8d				                .byte >configureData[i][1]-1
13	>8bdc		5b				                .byte <configureData[i][1]-1
12	>8bdd		8e				                .byte >configureData[i][2]-1
13	>8bde		4b				                .byte <configureData[i][2]-1
63:8	>8bdf		50 52 49 4e 54			                .text configureData[i][0]
12:4	>8be4		8d				                .byte >configureData[i][1]-1
13	>8be5		3e				                .byte <configureData[i][1]-1
12	>8be6		8e				                .byte >configureData[i][2]-1
13	>8be7		ce				                .byte <configureData[i][2]-1
63:8	>8be8		51 55 49 45 54			                .text configureData[i][0]
12:4	>8bed		8d				                .byte >configureData[i][1]-1
13	>8bee		6e				                .byte <configureData[i][1]-1
12	>8bef		8d				                .byte >configureData[i][2]-1
13	>8bf0		f5				                .byte <configureData[i][2]-1
63:8	>8bf1		52 45 50 45 41 54		                .text configureData[i][0]
12:4	>8bf7		8d				                .byte >configureData[i][1]-1
13	>8bf8		18				                .byte <configureData[i][1]-1
12	>8bf9		8e				                .byte >configureData[i][2]-1
13	>8bfa		8a				                .byte <configureData[i][2]-1
63:8	>8bfb		53 43 52 4f 4c 4c		                .text configureData[i][0]
12:4	>8c01		8d				                .byte >configureData[i][1]-1
13	>8c02		8c				                .byte <configureData[i][1]-1
12	>8c03		8d				                .byte >configureData[i][2]-1
13	>8c04		df				                .byte <configureData[i][2]-1
63:8	>8c05		53 48 43 41 50 53		                .text configureData[i][0]
12:4	>8c0b		8c				                .byte >configureData[i][1]-1
13	>8c0c		53				                .byte <configureData[i][1]-1
12	>8c0d		8d				                .byte >configureData[i][2]-1
13	>8c0e		bc				                .byte <configureData[i][2]-1
63:8	>8c0f		54 55 42 45			                .text configureData[i][0]
12:4	>8c13		8d				                .byte >configureData[i][1]-1
13	>8c14		65				                .byte <configureData[i][1]-1
12	>8c15		8e				                .byte >configureData[i][2]-1
13	>8c16		4b				                .byte <configureData[i][2]-1
63:8	>8c17		54 56				                .text configureData[i][0]
12:4	>8c19		8c				                .byte >configureData[i][1]-1
13	>8c1a		79				                .byte <configureData[i][1]-1
12	>8c1b		8e				                .byte >configureData[i][2]-1
13	>8c1c		6d				                .byte <configureData[i][2]-1
66:8							                .next
67	>8c1d		00				                .byte 0
68							                .endif

70							;-------------------------------------------------------------------------
71							;
72							; *CONFIGURE [MasRef C.5-2]
73							;
74	.8c1e						starCONFIGURE:
75	.8c1e		20 a8 8c	jsr $8ca8	                jsr L8934                    ;get configure param
76	.8c21		b0 0a		bcs $8c2d	                bcs callSetRoutine           ;taken if known
77	.8c23		a2 28		ldx #$28	                ldx #romServiceCallUnknownCONFIG
78	.8c25						L8881:
79	.8c25		a4 e6		ldy $e6		                ldy $E6
80	.8c27		20 52 ec	jsr $ec52	                jsr mos.makeROMServiceCall
81	.8c2a		d0 1f		bne $8c4b	                bne badCommandError88AC
82	.8c2c		60		rts		                rts

84	.8c2d						callSetRoutine:
85							                .if version<400
91							                .else
92	.8c2d		48		pha		                pha
93	.8c2e		bd 5a 8b	lda $8b5a,x	                lda configureTable+1,x
94	.8c31		48		pha		                pha
95							                .endif
96	.8c32						L8892:
97	.8c32		4c ee f0	jmp $f0ee	                jmp mos.skipSpacesAndCheckForCRInStringInput

99	.8c35						starSTATUS:
100	.8c35		20 a8 8c	jsr $8ca8	                jsr L8934
101	.8c38		b0 04		bcs $8c3e	                bcs L889E
102	.8c3a		a2 29		ldx #$29	                ldx #romServiceCallUnknownSTATUS
103	.8c3c		80 e7		bra $8c25	                bra L8881

105	.8c3e						L889E:
106							                .if version<400
112							                .else
113	.8c3e		bd 5b 8b	lda $8b5b,x	                lda configureTable+2,x
114	.8c41		48		pha		                pha
115	.8c42		bd 5c 8b	lda $8b5c,x	                lda configureTable+3,x
116	.8c45		48		pha		                pha
117							                .endif
118	.8c46		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
119	.8c49		f0 e7		beq $8c32	                beq L8892
120	.8c4b						badCommandError88AC:
121	.8c4b		4c ee 8c	jmp $8cee	                jmp badCommandError8976

123							;-------------------------------------------------------------------------

125							                .if version<400
130							                .endif

132							;-------------------------------------------------------------------------

134							                .if version<400
141							                .endif

143							;-------------------------------------------------------------------------

145							                .if version<400
150							                .endif

152							;-------------------------------------------------------------------------

154							                .if version<400
161							                .endif

163							;-------------------------------------------------------------------------

165							                .if version<400
176							                .endif

178							;-------------------------------------------------------------------------

180	.8c4e						setDefaultNoLock:
181	.8c4e		d0 fb		bne $8c4b	                bne badCommandError88AC
182	.8c50		a9 10		lda #$10	                lda #CMOSBytes.defaults1.defaultNoLockMask
183	.8c52		80 0a		bra $8c5e	                bra setDefaultLock

185							;-------------------------------------------------------------------------

187	.8c54						setDefaultShiftLock:
188	.8c54		d0 f5		bne $8c4b	                bne badCommandError88AC
189	.8c56		a9 08		lda #$08	                lda #CMOSBytes.defaults1.defaultShiftLockMask
190	.8c58		80 04		bra $8c5e	                bra setDefaultLock

192							;-------------------------------------------------------------------------

194	.8c5a						setDefaultsCapsLock:
195	.8c5a		d0 ef		bne $8c4b	                bne badCommandError88AC
196	.8c5c		a9 20		lda #$20	                lda #CMOSBytes.defaults1.defaultCapsLockMask
197	.8c5e						setDefaultLock:
198	.8c5e		a0 c7		ldy #$c7	                ldy #~(CMOSBytes.defaults1.defaultCapsLockMask|CMOSBytes.defaults1.defaultNoLockMask|CMOSBytes.defaults1.defaultShiftLockMask)&$ff
199							                .if version<400
201							                .else
202	.8c60						writeDefaults1Bits:
203	.8c60		a2 19		ldx #$19	                ldx #CMOSBytes.defaults1+cmosBytesOffset
204	.8c62		80 3d		bra $8ca1	                bra jmpWriteRTCBits892D
205							                .endif

207							;-------------------------------------------------------------------------

209	.8c64						setDefaultMODE:
210	.8c64		20 e9 8c	jsr $8ce9	                jsr parseNumberFromCommandLine
211	.8c67		20 ff 8c	jsr $8cff	                jsr ensureCommandLineTailEmpty
212	.8c6a		8a		txa		                txa
213	.8c6b		29 7f		and #$7f	                and #$7F
214	.8c6d		c9 08		cmp #$08	                cmp #$08                     ;only 0-7 is valid
215	.8c6f		b0 14		bcs $8c85	                bcs bcsBadCommandError8911
216	.8c71		e8		inx		                inx    ;set N as per X value - bit 6 is never set, so the result is valid for the original value
217	.8c72		10 02		bpl $8c76	                bpl +
218	.8c74		09 08		ora #$08	                ora #CMOSBytes.defaults0.defaultSHADOWMask
219	.8c76						+
220	.8c76		a0 f0		ldy #$f0	                ldy #~(CMOSBytes.defaults0.defaultSHADOWMask|CMOSBytes.defaults0.defaultMODEMask)&$ff
221	.8c78		80 25		bra $8c9f	                bra writeDefaults0Bits

223							;-------------------------------------------------------------------------

225	.8c7a						setDefaultTVSettings:
226	.8c7a		f0 28		beq $8ca4	                beq resetDefaultTVSettings        ;reset to 0,0 if no values supplied
227	.8c7c		20 e9 8c	jsr $8ce9	                jsr parseNumberFromCommandLine
228							                ; valid range is 252-255 or 0-3
229	.8c7f		e0 fc		cpx #$fc	                cpx #252
230	.8c81		b0 04		bcs $8c87	                bcs +
231	.8c83		e0 04		cpx #$04	                cpx #$04
232	.8c85						bcsBadCommandError8911:
233	.8c85		b0 67		bcs $8cee	                bcs badCommandError8976
234	.8c87						+
235	.8c87		8a		txa		                txa
236	.8c88		0a		asl a		                asl a                   ;make space for interlace flag
237	.8c89		85 b1		sta $b1		                sta $B1
238	.8c8b		a2 00		ldx #$00	                ldx #$00
239	.8c8d		20 f9 f0	jsr $f0f9	                jsr mos.LF30A
240	.8c90		f0 04		beq $8c96	                beq +                  ;taken if only 1 value supplied
241	.8c92		20 07 8d	jsr $8d07	                jsr parseSingle1BitNumberFromCommandLine ;get interlace flag
242	.8c95		aa		tax		                tax                          ;X=interlace flag
243	.8c96						+
244	.8c96		8a		txa		                txa                          ;
245	.8c97		05 b1		ora $b1		                ora $B1                      ;OR in the TV setting
246	.8c99		0a		asl a		                asl a
247	.8c9a		0a		asl a		                asl a
248	.8c9b		0a		asl a		                asl a
249	.8c9c		0a		asl a		                asl a                        ; shift into place
250	.8c9d						writeDefaultTVSettings:
251	.8c9d		a0 0f		ldy #$0f	                ldy #~(CMOSBytes.defaults0.defaultTVMask<<CMOSBytes.defaults0.defaultTVShift|CMOSBytes.defaults0.defaultInterlaceMask)&$ff
252	.8c9f						writeDefaults0Bits:
253	.8c9f		a2 18		ldx #$18	                ldx #CMOSBytes.defaults0+cmosBytesOffset
254	.8ca1						jmpWriteRTCBits892D:
255	.8ca1		4c 4e 8d	jmp $8d4e	                jmp writeRTCBits

257	.8ca4						resetDefaultTVSettings:
258	.8ca4		a9 00		lda #$00	                lda #$00
259	.8ca6		80 f5		bra $8c9d	                bra writeDefaultTVSettings

261							;-------------------------------------------------------------------------
262							;-------------------------------------------------------------------------
263							;
264							;
265	.8ca8						L8934:
266	.8ca8		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
267	.8cab		84 e6		sty $e6		                sty $E6
268	.8cad		f0 42		beq $8cf1	                beq L8979                    ;taken if input ends with CR
269	.8caf		a2 00		ldx #$00	                ldx #$00
270	.8cb1		80 0b		bra $8cbe	                bra L894A

272	.8cb3						L893F:
273							                .if version==400
274	.8cb3		5d 59 8b	eor $8b59,x	                eor configureTable,x
277							                .endif
278	.8cb6		29 df		and #$df	                and #$DF              ;case-insensitive
279	.8cb8		d0 16		bne $8cd0	                bne L895C             ;taken if no match
280	.8cba		c8		iny		                iny
281	.8cbb						L8947:
282	.8cbb		b0 24		bcs $8ce1	                bcs L896C
283	.8cbd		e8		inx		                inx
284	.8cbe						L894A:
285	.8cbe		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
286	.8cc0		20 19 e9	jsr $e919	                jsr mos.isLetter
287	.8cc3		90 ee		bcc $8cb3	                bcc L893F                    ;taken if letter
288	.8cc5						L8951:
289							                .if version==400
290	.8cc5		bd 59 8b	lda $8b59,x	                lda configureTable,x
291	.8cc8		30 1a		bmi $8ce4	                bmi L8CE4
295							                .endif
296	.8cca		b1 f2		lda ($f2),y	                lda ($F2),y
297	.8ccc		c9 2e		cmp #$2e	                cmp #'.'
298	.8cce		f0 04		beq $8cd4	                beq L8960                    ;accept abbreviations
299	.8cd0						L895C:
300	.8cd0		18		clc		                clc
301	.8cd1		a4 e6		ldy $e6		                ldy $E6
302	.8cd3		88		dey		                dey
303	.8cd4						L8960:
304	.8cd4		c8		iny		                iny
305							                .if version==400
306	.8cd5		e8		inx		                inx
307	.8cd6		e8		inx		                inx
310							                .endif
311	.8cd7						L8962:
312	.8cd7		e8		inx		                inx
313							                .if version==400
314	.8cd8		bd 56 8b	lda $8b56,x	                lda configureTable-3,x
317							                .endif
318	.8cdb		f0 09		beq $8ce6	                beq L896E
319	.8cdd		10 f8		bpl $8cd7	                bpl L8962
320	.8cdf		80 da		bra $8cbb	                bra L8947

322	.8ce1						L896C:
323							                .if version==400
324	.8ce1		ca		dex		                dex
325	.8ce2		ca		dex		                dex
326	.8ce3		ca		dex		                dex
327							                .endif
328	.8ce4						L8CE4:
329	.8ce4		38		sec		                sec
330	.8ce5		60		rts		                rts

332	.8ce6						L896E:
333	.8ce6		b0 f9		bcs $8ce1	                bcs L896C
334	.8ce8						rts8970:
335	.8ce8		60		rts		                rts

337							;-------------------------------------------------------------------------

339	.8ce9						parseNumberFromCommandLine:
340	.8ce9		20 fb 85	jsr $85fb	                jsr parseNumberFromString
341	.8cec		b0 fa		bcs $8ce8	                bcs rts8970
342	.8cee						badCommandError8976:
343	.8cee		4c bd fa	jmp $fabd	                jmp mos.badCommandError

345							;-------------------------------------------------------------------------

347	.8cf1						L8979:
348	.8cf1		a2 01		ldx #$01	                ldx #$01
349	.8cf3		80 d0		bra $8cc5	                bra L8951

351							;-------------------------------------------------------------------------

353	.8cf5						parseSingle4BitNumberFromCommandLine:
354	.8cf5		20 fb 85	jsr $85fb	                jsr parseNumberFromString
355	.8cf8		90 f4		bcc $8cee	                bcc badCommandError8976
356	.8cfa		8a		txa		                txa
357	.8cfb		c9 10		cmp #$10	                cmp #$10
358	.8cfd		b0 ef		bcs $8cee	                bcs badCommandError8976
359	.8cff						ensureCommandLineTailEmpty:
360	.8cff		48		pha		                pha                          ;save value parsed
361	.8d00		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
362	.8d03						bneBadCommandError898B:
363	.8d03		d0 e9		bne $8cee	                bne badCommandError8976      ;taken if followed up by anything other than CR
364	.8d05		68		pla		                pla                          ;restore value parsed
365	.8d06		60		rts		                rts

367							;-------------------------------------------------------------------------

369	.8d07						parseSingle1BitNumberFromCommandLine:
370	.8d07		20 0f 8d	jsr $8d0f	                jsr parseSingleNumberFromCommandLine
371	.8d0a		c9 02		cmp #$02	                cmp #$02
372	.8d0c		b0 e0		bcs $8cee	                bcs badCommandError8976
373	.8d0e		60		rts		                rts

375							;-------------------------------------------------------------------------
376							;
377							; Parse single number from command line. Produce Bad Command error if
378							; the number is invalid or if there's more than one number.
379							;
380							; exit:
381							;
382							; A = value
383							;
384							; N/Z set as per A
385							;
386	.8d0f						parseSingleNumberFromCommandLine:
387	.8d0f		20 fb 85	jsr $85fb	                jsr parseNumberFromString
388	.8d12		90 da		bcc $8cee	                bcc badCommandError8976      ;taken if error
389	.8d14		8a		txa		                txa                          ;A=value
390	.8d15		80 e8		bra $8cff	                bra ensureCommandLineTailEmpty

392							;-------------------------------------------------------------------------

394	.8d17						setDefaultKeyboardAutoRepeatDelay:
395	.8d17		18		clc		                clc
396	>8d18		24				                .byte $24                    ; BIT zp (make SEC mostly
397							                                             ; a NOP, in effect)
398	.8d19						setDefaultKeyboardAutoRepeatRate:
399	.8d19		38		sec		                sec
400	.8d1a		08		php		                php                          ;save C
401	.8d1b		20 e9 8c	jsr $8ce9	                jsr parseNumberFromCommandLine
402	.8d1e		20 ff 8c	jsr $8cff	                jsr ensureCommandLineTailEmpty
403	.8d21		28		plp		                plp                          ;restore C
404	.8d22		8a		txa		                txa
405	.8d23		a8		tay		                tay
406							                .cerror CMOSBytes.keyboardAutoRepeatDelay+1!=CMOSBytes.keyboardAutoRepeatRate,"keyboard auto repeat settings CMOS bytes must be adjacent"
407	.8d24		a9 1a		lda #$1a	                lda #CMOSBytes.keyboardAutoRepeatDelay+cmosBytesOffset
408	.8d26		69 00		adc #$00	                adc #$00             ;pick appropriate byte based on C
409	.8d28		aa		tax		                tax                  ;X=RTC address
410	.8d29						jmpWriteRTCByte:
411	.8d29		4c 78 9b	jmp $9b78	                jmp writeRTCByte

413							;-------------------------------------------------------------------------

415	.8d2c						setDefaultPrinterIgnoreChar:
416	.8d2c		f0 3b		beq $8d69	                beq writeDefaultUsePrinterIgnoreCharTrue
417	.8d2e		20 e9 8c	jsr $8ce9	                jsr parseNumberFromCommandLine
418	.8d31		da		phx		                phx
419	.8d32		20 ff 8c	jsr $8cff	                jsr ensureCommandLineTailEmpty
420	.8d35		a9 00		lda #$00	                lda #$00
421	.8d37		20 6b 8d	jsr $8d6b	                jsr writeDefaultUsePrinterIgnoreChar
422	.8d3a		7a		ply		                ply
423	.8d3b		a2 1c		ldx #$1c	                ldx #CMOSBytes.printerIgnoreChar+cmosBytesOffset
424	.8d3d		80 ea		bra $8d29	                bra jmpWriteRTCByte

426							;-------------------------------------------------------------------------

428	.8d3f						setDefaultFX5Settings:
429	.8d3f		20 0f 8d	jsr $8d0f	                jsr parseSingleNumberFromCommandLine
430	.8d42		c9 05		cmp #$05	                cmp #$05
431	.8d44						bcsBadCommandError:
432	.8d44		b0 a8		bcs $8cee	                bcs badCommandError8976
433	.8d46		a0 1f		ldy #$1f	                ldy #~(CMOSBytes.defaults2.fx5SettingMask<<CMOSBytes.defaults2.fx5SettingShift)&$ff
434	.8d48		4a		lsr a		                lsr a
435	.8d49		6a		ror a		                ror a
436	.8d4a		6a		ror a		                ror a
437	.8d4b		6a		ror a		                ror a
438	.8d4c						writeDefaults2Bits:
439	.8d4c		a2 1d		ldx #$1d	                ldx #CMOSBytes.defaults2+cmosBytesOffset
440	.8d4e						writeRTCBits:
441	.8d4e		85 b1		sta $b1		                sta $B1
442	.8d50		84 b2		sty $b2		                sty $B2
443	.8d52		20 4b 9b	jsr $9b4b	                jsr readRTCByte
444	.8d55		25 b2		and $b2		                and $B2
445	.8d57		05 b1		ora $b1		                ora $B1
446	.8d59		a8		tay		                tay
447	.8d5a		80 cd		bra $8d29	                bra jmpWriteRTCByte

449							;-------------------------------------------------------------------------

451	.8d5c						setDefaultTubeOff:
452	.8d5c		18		clc		                clc
453	.8d5d						bneBadCommandError89E5:
454	.8d5d		d0 a4		bne $8d03	                bne bneBadCommandError898B
455	.8d5f		a0 fe		ldy #$fe	                ldy #~(CMOSBytes.defaults2.tubeOnMask)&$ff
456	.8d61		a9 00		lda #$00	                lda #$00
457	.8d63		2a		rol a		                rol a
458	.8d64		80 e6		bra $8d4c	                bra writeDefaults2Bits

460							;-------------------------------------------------------------------------

462	.8d66						setDefaultTubeOn:
463	.8d66		38		sec		                sec
464	.8d67		80 f4		bra $8d5d	                bra bneBadCommandError89E5

466							;-------------------------------------------------------------------------

468							                .if version<400
481							                .endif

483							;-------------------------------------------------------------------------

485	.8d69						writeDefaultUsePrinterIgnoreCharTrue:
486	.8d69		a9 02		lda #$02	                lda #CMOSBytes.defaults2.usePrinterIgnoreCharMask
487	.8d6b						writeDefaultUsePrinterIgnoreChar:
488	.8d6b		a0 fd		ldy #$fd	                ldy #(~CMOSBytes.defaults2.usePrinterIgnoreCharMask)&$ff
489	.8d6d		80 dd		bra $8d4c	                bra writeDefaults2Bits

491							;-------------------------------------------------------------------------

493	.8d6f						setDefaultQuiet:
494	.8d6f		d0 ec		bne $8d5d	                bne bneBadCommandError89E5
495	.8d71		a9 00		lda #$00	                lda #$00
496	.8d73		80 04		bra $8d79	                bra writeDefaultLoud

498							;-------------------------------------------------------------------------

500	.8d75						setDefaultLoud:
501	.8d75		d0 e6		bne $8d5d	                bne bneBadCommandError89E5
502	.8d77		a9 02		lda #$02	                lda #CMOSBytes.defaults3.loudMask
503	.8d79						writeDefaultLoud:
504	.8d79		a0 fd		ldy #$fd	                ldy #~(CMOSBytes.defaults3.loudMask)&$ff
505							                .if version<400
507							                .else
508	.8d7b						writeDefaults3Bits:
509	.8d7b		a2 1e		ldx #$1e	                ldx #CMOSBytes.defaults3+cmosBytesOffset
510	.8d7d						jmpWriteRTCBits8A26:
511	.8d7d		80 cf		bra $8d4e	                bra writeRTCBits
512							                .endif

514							;-------------------------------------------------------------------------

516							                .if version<400
530							                .endif

532							;-------------------------------------------------------------------------

534	.8d7f						setDefaultAutoBoot:
535	.8d7f		d0 dc		bne $8d5d	                bne bneBadCommandError89E5
536	.8d81		a9 10		lda #$10	                lda #CMOSBytes.defaults3.autoBootMask
537	.8d83		80 04		bra $8d89	                bra writeDefaultAutoBoot

539							;-------------------------------------------------------------------------

541	.8d85						setDefaultNoAutoBoot:
542	.8d85		d0 d6		bne $8d5d	                bne bneBadCommandError89E5
543	.8d87		a9 00		lda #$00	                lda #$00                     ;no boot
544	.8d89						writeDefaultAutoBoot:
545	.8d89		a0 ef		ldy #$ef	                ldy #(~CMOSBytes.defaults3.autoBootMask)&$ff
546	.8d8b		80 ee		bra $8d7b	                bra writeDefaults3Bits

548							;-------------------------------------------------------------------------

550	.8d8d						setDefaultProtectedScrolling:
551	.8d8d		d0 ce		bne $8d5d	                bne bneBadCommandError89E5
552	.8d8f		a9 00		lda #$00	                lda #$00
553	.8d91		80 04		bra $8d97	                bra writeDefaultProtectedScrolling

555							;-------------------------------------------------------------------------

557	.8d93						setDefaultNoProtectedScrolling:
558	.8d93		d0 c8		bne $8d5d	                bne bneBadCommandError89E5
559	.8d95		a9 08		lda #$08	                lda #CMOSBytes.defaults3.protectedScrollingMask
560	.8d97						writeDefaultProtectedScrolling:
561	.8d97		a0 f7		ldy #$f7	                ldy #~(CMOSBytes.defaults3.protectedScrollingMask)&$ff
562	.8d99		80 e0		bra $8d7b	                bra writeDefaults3Bits

564							;-------------------------------------------------------------------------

566	.8d9b						setDefaultExtTube:
567	.8d9b		d0 a7		bne $8d44	                bne bcsBadCommandError
568	.8d9d		a9 04		lda #$04	                lda #CMOSBytes.defaults3.extTubeMask
569	.8d9f		80 04		bra $8da5	                bra writeDefaultExtTube

571							;-------------------------------------------------------------------------

573	.8da1						setDefaultIntTube:
574	.8da1		d0 a1		bne $8d44	                bne bcsBadCommandError
575	.8da3		a9 00		lda #$00	                lda #$00
576	.8da5						writeDefaultExtTube:
577	.8da5		a0 fb		ldy #$fb	                ldy #~(CMOSBytes.defaults3.extTubeMask)&$ff
578	.8da7		80 d2		bra $8d7b	                bra writeDefaults3Bits

580							;-------------------------------------------------------------------------

582	.8da9						setDefaultLanguageROM:
583	.8da9		20 f5 8c	jsr $8cf5	                jsr parseSingle4BitNumberFromCommandLine
584	.8dac		0a		asl a		                asl a
585	.8dad		0a		asl a		                asl a
586	.8dae		0a		asl a		                asl a
587	.8daf		0a		asl a		                asl a
588	.8db0		a0 0f		ldy #$0f	                ldy #~(15<<CMOSBytes.defaultROMs.languageShift)&$ff
589	.8db2						writeDefaultROM:
590	.8db2		a2 13		ldx #$13	                ldx #CMOSBytes.defaultROMs+cmosBytesOffset
591	.8db4		80 c7		bra $8d7d	                bra jmpWriteRTCBits8A26

593							;-------------------------------------------------------------------------

595	.8db6						setDefaultFSROM:
596	.8db6		20 f5 8c	jsr $8cf5	                jsr parseSingle4BitNumberFromCommandLine
597	.8db9		a0 f0		ldy #$f0	                ldy #~(15<<CMOSBytes.defaultROMs.fsShift)&$ff
598	.8dbb		80 f5		bra $8db2	                bra writeDefaultROM

600							;-------------------------------------------------------------------------

602	.8dbd						printDefaultCaps:
603	.8dbd		20 41 91	jsr $9141	                jsr readDefaults1            ;%fdCNSfff
604	.8dc0		0a		asl a		                asl a                        ;%dCNSfff0
605	.8dc1		0a		asl a		                asl a                        ;%CNSfff00
606	.8dc2		30 0d		bmi $8dd1	                bmi printCaps
607	.8dc4		0a		asl a		                asl a                        ;%NSfff000
608	.8dc5		30 14		bmi $8ddb	                bmi printNoCaps
609	.8dc7		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
610	>8dca		53 68 69 66 74 20 00		                .text "Shift ",0
611	.8dd1						printCaps:
612	.8dd1		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
613	>8dd4		43 61 70 73 0d 00		                .text "Caps",13,0
614	.8dda		60		rts		                rts
615	.8ddb						printNoCaps:
616	.8ddb		20 45 91	jsr $9145	                jsr printNo_
617	.8dde		80 f1		bra $8dd1	                bra printCaps

619							;-------------------------------------------------------------------------

621	.8de0						printDefaultProtectedScrolling:
622	.8de0		20 42 9b	jsr $9b42	                jsr readDefaults3
623	.8de3		89 08		bit #$08	                bit #CMOSBytes.defaults3.protectedScrollingMask
624	.8de5		f0 03		beq $8dea	                beq +
625	.8de7		20 45 91	jsr $9145	                jsr printNo_
626	.8dea						+
627	.8dea		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
628	>8ded		53 63 72 6f 6c 6c 0d 00		                .text "Scroll",13,0
629	.8df5		60		rts		                rts

631							;-------------------------------------------------------------------------

633	.8df6						printDefaultLoud:
634	.8df6		20 42 9b	jsr $9b42	                jsr readDefaults3
635	.8df9		89 02		bit #$02	                bit #CMOSBytes.defaults3.loudMask
636	.8dfb		d0 0b		bne $8e08	                bne printLoud
637	.8dfd		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
638	>8e00		51 75 69 65 74 0d 00		                .text "Quiet",13,0
639	.8e07		60		rts		                rts

641	.8e08						printLoud:
642	.8e08		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
643	>8e0b		4c 6f 75 64 0d 00		                .text "Loud",13,0
644	.8e11		60		rts		                rts

646							;-------------------------------------------------------------------------

648	.8e12						printDefaultExtTube:
649	.8e12		20 42 9b	jsr $9b42	                jsr readDefaults3
650	.8e15		89 04		bit #$04	                bit #CMOSBytes.defaults3.extTubeMask
651	.8e17		d0 08		bne $8e21	                bne printExternalTube
652	.8e19		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
653	>8e1c		49 6e 00			                .text "In",0
654	.8e1f		80 06		bra $8e27	                bra printTernalTube

656	.8e21						printExternalTube:
657	.8e21		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
658	>8e24		45 78 00			                .text "Ex",0
659	.8e27						printTernalTube:
660	.8e27		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
661	>8e2a		74 65 72 6e 61 6c 20 54		                .text "ternal Tube",13,0
	>8e32		75 62 65 0d 00
662	.8e37		60		rts		                rts

664							;-------------------------------------------------------------------------

666	.8e38						printDefaultAutoBoot:
667	.8e38		20 42 9b	jsr $9b42	                jsr readDefaults3
668	.8e3b		89 10		bit #$10	                bit #CMOSBytes.defaults3.autoBootMask
669	.8e3d		d0 03		bne $8e42	                bne +
670	.8e3f		20 45 91	jsr $9145	                jsr printNo_
671	.8e42						+
672	.8e42		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
673	>8e45		42 6f 6f 74 0d 00		                .text "Boot",13,0
674	.8e4b		60		rts		                rts

676							;-------------------------------------------------------------------------

678	.8e4c						printDefaultTubeOn:
679	.8e4c		20 3e 9b	jsr $9b3e	                jsr readDefaults2
680	.8e4f		4a		lsr a		                lsr a                        ;C=tubeOn
681	.8e50		b0 03		bcs $8e55	                bcs +
682	.8e52		20 45 91	jsr $9145	                jsr printNo_
683	.8e55						+
684	.8e55		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
685	>8e58		54 75 62 65 0d 00		                .text "Tube",13,0
686	.8e5e		60		rts		                rts

688							;-------------------------------------------------------------------------

690	.8e5f						printDefaultLanguageROM:
691	.8e5f		20 30 91	jsr $9130	                jsr readDefaultLanguageROM
692	.8e62						printROMNumber:
693	.8e62		20 d5 8e	jsr $8ed5	                jsr printDecimalByte
694	.8e65		80 1b		bra $8e82	                bra printNewLine8B2B

696							;-------------------------------------------------------------------------

698	.8e67						printDefaultFSROM:
699	.8e67		20 38 91	jsr $9138	                jsr readDefaultROMs
700	.8e6a		29 0f		and #$0f	                and #$0F
701	.8e6c		80 f4		bra $8e62	                bra printROMNumber

703							;-------------------------------------------------------------------------

705	.8e6e						printDefaultTVSettings:
706	.8e6e		20 fc 90	jsr $90fc	                jsr readDefaultTVSettings
707	.8e71		20 d4 8e	jsr $8ed4	                jsr printDecimalByteY
708	.8e74		a9 2c		lda #$2c	                lda #','
709	.8e76		20 ee ff	jsr $ffee	                jsr OSWRCH
710	.8e79		8a		txa		                txa
711	.8e7a		80 03		bra $8e7f	                bra printDecimalByteThenNewLine

713							;-------------------------------------------------------------------------

715	.8e7c						printDefaultMODE:
716	.8e7c		20 18 91	jsr $9118	                jsr readDefaultMODE
717	.8e7f						printDecimalByteThenNewLine:
718	.8e7f		20 d5 8e	jsr $8ed5	                jsr printDecimalByte
719	.8e82						printNewLine8B2B:
720	.8e82		4c e7 ff	jmp $ffe7	                jmp OSNEWL

722							;-------------------------------------------------------------------------

724	.8e85						printDefaultKeyboardAutoRepeatDelay:
725	.8e85		20 91 8e	jsr $8e91	                jsr getDefaultKeyboardAutoRepeatDelay
726	.8e88		98		tya		                tya
727	.8e89		80 f4		bra $8e7f	                bra printDecimalByteThenNewLine

729							;-------------------------------------------------------------------------

731	.8e8b						printDefaultKeyboardRepeatRate:
732	.8e8b		20 96 8e	jsr $8e96	                jsr getDefaultKeyboardAutoRepeatRate
733	.8e8e		98		tya		                tya
734	.8e8f		80 ee		bra $8e7f	                bra printDecimalByteThenNewLine

736							;-------------------------------------------------------------------------
737							;
738							; Read default keyboard auto repeat delay from CMOS RAM.
739							;
740							; exit:
741							;
742							; Y = default keyboard auto repeat delay
743							;
744	.8e91						getDefaultKeyboardAutoRepeatDelay:
745	.8e91		a2 1a		ldx #$1a	                ldx #CMOSBytes.keyboardAutoRepeatDelay+cmosBytesOffset
746	.8e93		4c 4b 9b	jmp $9b4b	                jmp readRTCByte

748							;-------------------------------------------------------------------------
749							;
750							; Read default keyboard auto repeat rate from CMOS RAM.
751							;
752							; exit:
753							;
754							; Y = default keyboard auto repeat rate
755							;
756	.8e96						getDefaultKeyboardAutoRepeatRate:
757	.8e96		a2 1b		ldx #$1b	                ldx #CMOSBytes.keyboardAutoRepeatRate+cmosBytesOffset
758	.8e98		4c 4b 9b	jmp $9b4b	                jmp readRTCByte

760							;-------------------------------------------------------------------------

762	.8e9b						printDefaultPrinterIgnoreChar:
763	.8e9b		20 3e 9b	jsr $9b3e	                jsr readDefaults2
764	.8e9e		89 02		bit #$02	                bit #CMOSBytes.defaults2.usePrinterIgnoreCharMask
765	.8ea0		f0 0f		beq $8eb1	                beq showDefaultPrinterIgnoreChar
766	.8ea2						printNoIgnore:
767	.8ea2		20 45 91	jsr $9145	                jsr printNo_
768	.8ea5		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
769	>8ea8		49 67 6e 6f 72 65 0d 00		                .text "Ignore",13,0
770	.8eb0		60		rts		                rts

772	.8eb1						showDefaultPrinterIgnoreChar:
773	.8eb1		20 3c 91	jsr $913c	                jsr readDefaultPrinterIgnoreChar
774	.8eb4		20 d5 8e	jsr $8ed5	                jsr printDecimalByte
775	.8eb7		80 c9		bra $8e82	                bra printNewLine8B2B

777	.8eb9						printDefaultPrinterIgnoreChar2:
778	.8eb9		20 3e 9b	jsr $9b3e	                jsr readDefaults2
779	.8ebc		89 02		bit #$02	                bit #CMOSBytes.defaults2.usePrinterIgnoreCharMask
780	.8ebe		d0 e2		bne $8ea2	                bne printNoIgnore
781	.8ec0		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
782	>8ec3		49 67 6e 6f 72 65 20 20		                .text "Ignore   ",0
	>8ecb		20 00
783	.8ecd		80 e2		bra $8eb1	                bra showDefaultPrinterIgnoreChar

785							;-------------------------------------------------------------------------

787	.8ecf						printDefaultFX5Settings:
788	.8ecf		20 26 91	jsr $9126	                jsr readDefaultFX5Settings
789	.8ed2		80 ab		bra $8e7f	                bra printDecimalByteThenNewLine

791							;-------------------------------------------------------------------------

793							                .if version<400
797							                .endif

799							;-------------------------------------------------------------------------

801							                .if version<400
805							                .endif

807							;-------------------------------------------------------------------------

809							                .if version<400
814							                .endif

816							;-------------------------------------------------------------------------

818							                .if version<400
831							                .endif

833							;-------------------------------------------------------------------------

835							                .if version<400
846							                .endif

848							;-------------------------------------------------------------------------
849							;
850							;
851							;
852	.8ed4						printDecimalByteY:
853	.8ed4		98		tya		                tya
854	.8ed5						printDecimalByte:
855	.8ed5		38		sec		                sec                          ;in leading 0s state
856	.8ed6		a0 ff		ldy #$ff	                ldy #$FF                     ;digit = -1
857	.8ed8		08		php		                php                          ;save leading 0s state
858	.8ed9						hundredsLoop:
859	.8ed9		c8		iny		                iny
860	.8eda		e9 64		sbc #$64	                sbc #100
861	.8edc		b0 fb		bcs $8ed9	                bcs hundredsLoop
862	.8ede		69 64		adc #$64	                adc #100                     ;undo the step too far
863	.8ee0		28		plp		                plp                        ;restore leading 0s state
864	.8ee1		20 f5 8e	jsr $8ef5	                jsr printDecimalDigit
865	.8ee4		a0 ff		ldy #$ff	                ldy #$FF
866	.8ee6		08		php		                php
867	.8ee7		38		sec		                sec
868	.8ee8						tensLoop:
869	.8ee8		c8		iny		                iny
870	.8ee9		e9 0a		sbc #$0a	                sbc #10
871	.8eeb		b0 fb		bcs $8ee8	                bcs tensLoop
872	.8eed		69 0a		adc #$0a	                adc #10                      ;undo the step too far
873	.8eef		28		plp		                plp                          ;restore leading 0s state
874	.8ef0		20 f5 8e	jsr $8ef5	                jsr printDecimalDigit
875	.8ef3		18		clc		                clc                      ;definitely not leading 0 now
876	.8ef4		a8		tay		                tay
877	.8ef5						printDecimalDigit:
878	.8ef5		48		pha		                pha
879	.8ef6		98		tya		                tya                          ;A=digit index
880	.8ef7		d0 02		bne $8efb	                bne +             ;taken if definitely not a leading 0
881	.8ef9		b0 04		bcs $8eff	                bcs ++            ;skip the print if a leading 0
882	.8efb						+
883	.8efb		20 23 ae	jsr $ae23	                jsr printHexDigit
884	.8efe		18		clc		                clc                          ;clear leading 0 flag
885	.8eff						+
886	.8eff		68		pla		                pla
887	.8f00		60		rts		                rts

889							;-------------------------------------------------------------------------
890							;
891							; Print *CONFIGURE help
892							;
893	.8f01						printCONFIGUREHelp:
894	.8f01		20 ff 8c	jsr $8cff	                jsr ensureCommandLineTailEmpty
895	.8f04		5a		phy		                phy
896	.8f05		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
897	>8f08		43 6f 6e 66 69 67 75 72		                .text "Configuration options:",13
	>8f10		61 74 69 6f 6e 20 6f 70 74 69 6f 6e 73 3a 0d
898							                .if version<400
900							                .endif
901	>8f1f		42 6f 6f 74 0d			                .text "Boot",13
902	>8f24		43 61 70 73 0d			                .text "Caps",13
903							                .if version<400
905							                .endif
906	>8f29		44 65 6c 61 79 20 20 20		                .text "Delay    <D>",13
	>8f31		20 3c 44 3e 0d
907							                .if version<400
909							                .endif
910	>8f36		45 78 54 75 62 65 0d		                .text "ExTube",13
911							                .if version<400
913							                .endif
914	>8f3d		46 69 6c 65 20 20 20 20		                .text "File     <D>",13
	>8f45		20 3c 44 3e 0d
915							                .if version<400
917							                .endif
918							                .if version<400
920							                .endif
921	>8f4a		49 67 6e 6f 72 65 20 20		                .text "Ignore   [<D>]",13
	>8f52		20 5b 3c 44 3e 5d 0d
922	>8f59		49 6e 54 75 62 65 0d		                .text "InTube",13
923	>8f60		4c 61 6e 67 20 20 20 20		                .text "Lang     <D>",13
	>8f68		20 3c 44 3e 0d
924	>8f6d		4c 6f 75 64 0d			                .text "Loud",13
925	>8f72		4d 6f 64 65 20 20 20 20		                .text "Mode     <D>",13
	>8f7a		20 3c 44 3e 0d
926	>8f7f		4e 6f 42 6f 6f 74 0d		                .text "NoBoot",13
927	>8f86		4e 6f 43 61 70 73 0d		                .text "NoCaps",13
928							                .if version<400
930							                .endif
931	>8f8d		4e 6f 53 63 72 6f 6c 6c		                .text "NoScroll",13
	>8f95		0d
932	>8f96		4e 6f 54 75 62 65 0d		                .text "NoTube",13
933	>8f9d		50 72 69 6e 74 20 20 20		                .text "Print    <D>",13
	>8fa5		20 3c 44 3e 0d
934	>8faa		51 75 69 65 74 0d		                .text "Quiet",13
935	>8fb0		52 65 70 65 61 74 20 20		                .text "Repeat   <D>",13
	>8fb8		20 3c 44 3e 0d
936	>8fbd		53 63 72 6f 6c 6c 0d		                .text "Scroll",13
937	>8fc4		53 68 43 61 70 73 0d		                .text "ShCaps",13
938	>8fcb		54 75 62 65 0d			                .text "Tube",13
939	>8fd0		54 56 20 20 20 20 20 20		                .text "TV       [<D>[,<D>]]",13
	>8fd8		20 5b 3c 44 3e 5b 2c 3c 44 3e 5d 5d 0d
940	>8fe5		00				                .byte 0
941	.8fe6		7a		ply		                ply
942	.8fe7		a2 28		ldx #$28	                ldx #romServiceCallUnknownCONFIG
943	.8fe9		20 52 ec	jsr $ec52	                jsr mos.makeROMServiceCall
944	.8fec		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
945	>8fef		57 68 65 72 65 3a 0d		                .text "Where:",13
946	>8ff6		44 20 69 73 20 61 20 64		                .text "D is a decimal number, or",13
	>8ffe		65 63 69 6d 61 6c 20 6e 75 6d 62 65 72 2c 20 6f
	>900e		72 0d
947	>9010		61 20 68 65 78 61 64 65		                .text "a hexadecimal number preceded by &",13
	>9018		63 69 6d 61 6c 20 6e 75 6d 62 65 72 20 70 72 65
	>9028		63 65 64 65 64 20 62 79 20 26 0d
948	>9033		49 74 65 6d 73 20 77 69		                .text "Items within [ ] are optional",13
	>903b		74 68 69 6e 20 5b 20 5d 20 61 72 65 20 6f 70 74
	>904b		69 6f 6e 61 6c 0d
949	>9051		00				                .byte $00
950	.9052		60		rts		                rts

952							;-------------------------------------------------------------------------
953							;
954							;
955	.9053						printSTATUSHelp:
956	.9053		20 ff 8c	jsr $8cff	                jsr ensureCommandLineTailEmpty
957	.9056		5a		phy		                phy

959	.9057		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
960	>905a		43 6f 6e 66 69 67 75 72		                .text "Configuration status:",13
	>9062		61 74 69 6f 6e 20 73 74 61 74 75 73 3a 0d
961							                .if version<400
964							                .else
965	>9070		00				                .byte 0
966							                .endif

968	.9071		20 38 8e	jsr $8e38	                jsr printDefaultAutoBoot

970	.9074		20 bd 8d	jsr $8dbd	                jsr printDefaultCaps

972							                .if version<400
976							                .endif

978	.9077		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
979	>907a		44 65 6c 61 79 20 20 20		                .text "Delay    ",0
	>9082		20 00
980	.9084		20 85 8e	jsr $8e85	                jsr printDefaultKeyboardAutoRepeatDelay

982							                .if version<400
984							                .endif

986	.9087		20 12 8e	jsr $8e12	                jsr printDefaultExtTube

988							                .if version<400
992							                .endif

994	.908a		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
995	>908d		46 69 6c 65 20 20 20 20		                .text "File     ",0
	>9095		20 00
996	.9097		20 67 8e	jsr $8e67	                jsr printDefaultFSROM

998							                .if version<400
1000							                .endif

1002	.909a		20 b9 8e	jsr $8eb9	                jsr printDefaultPrinterIgnoreChar2

1004	.909d		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
1005	>90a0		4c 61 6e 67 20 20 20 20		                .text "Lang     ",0
	>90a8		20 00
1006	.90aa		20 5f 8e	jsr $8e5f	                jsr printDefaultLanguageROM

1008	.90ad		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
1009	>90b0		4d 6f 64 65 20 20 20 20		                .text "Mode     ",0
	>90b8		20 00
1010	.90ba		20 7c 8e	jsr $8e7c	                jsr printDefaultMODE

1012	.90bd		20 4c 8e	jsr $8e4c	                jsr printDefaultTubeOn

1014	.90c0		20 f6 8d	jsr $8df6	                jsr printDefaultLoud

1016	.90c3		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
1017	>90c6		50 72 69 6e 74 20 20 20		                .text "Print    "
	>90ce		20
1018	>90cf		00				                .byte 0
1019	.90d0		20 cf 8e	jsr $8ecf	                jsr printDefaultFX5Settings

1021	.90d3		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
1022	>90d6		52 65 70 65 61 74 20 20		                .text "Repeat   ",0
	>90de		20 00
1023	.90e0		20 8b 8e	jsr $8e8b	                jsr printDefaultKeyboardRepeatRate

1025	.90e3		20 e0 8d	jsr $8de0	                jsr printDefaultProtectedScrolling

1027	.90e6		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
1028	>90e9		54 56 20 20 20 20 20 20		                .text "TV       ",0
	>90f1		20 00
1029	.90f3		20 6e 8e	jsr $8e6e	                jsr printDefaultTVSettings

1031	.90f6		7a		ply		                ply
1032	.90f7		a2 29		ldx #$29	                ldx #romServiceCallUnknownSTATUS
1033	.90f9		4c 52 ec	jmp $ec52	                jmp mos.makeROMServiceCall


:5	;******  Return to file: src/terminal.s65

937							                .endif

939							;-------------------------------------------------------------------------

941							                .if version>=500
949							                .endif

951							;-------------------------------------------------------------------------

953							                .if version<500&&version!=350
954							;-------------------------------------------------------------------------
955							;
956							; Read default *TV settings.
957							;
958							; exit:
959							;
960							; X = interlace flag (0=off, 1=on)
961							;
962							; Y = *TV offset
963	.90fc						readDefaultTVSettings:
964	.90fc		a2 18		ldx #$18	                ldx #CMOSBytes.defaults0+cmosBytesOffset
965	.90fe		20 4b 9b	jsr $9b4b	                jsr readRTCByte
966	.9101		5a		phy		                phy
967	.9102		29 e0		and #$e0	                and #%11100000
968	.9104		0a		asl a		                asl a
969	.9105		2a		rol a		                rol a
970	.9106		2a		rol a		                rol a
971	.9107		2a		rol a		                rol a                        ;move into bottom 3 bits
972	.9108		89 04		bit #$04	                bit #$04                     ;sign bit?
973	.910a		f0 02		beq $910e	                beq +                        ;taken if positive
974	.910c		09 fc		ora #$fc	                ora #%11111100               ;sign extent from bit 2
975	.910e						+
976	.910e		a8		tay		                tay
977	.910f		68		pla		                pla
978	.9110		a2 00		ldx #$00	                ldx #$00                     ;X=0 - interlace off
979	.9112		89 10		bit #$10	                bit #CMOSBytes.defaults0.defaultInterlaceMask
980	.9114		f0 01		beq $9117	                beq +
981	.9116		e8		inx		                inx                          ;X=1 - interlace on
982	.9117						+
983	.9117		60		rts		                rts

985							;-------------------------------------------------------------------------
986							;
987							; Read configured MODE
988							; --------------------
989	.9118						readDefaultMODE:
990	.9118		a2 18		ldx #$18	                ldx #CMOSBytes.defaults0+cmosBytesOffset
991	.911a		20 4b 9b	jsr $9b4b	                jsr readRTCByte
992	.911d		29 0f		and #$0f	                and #CMOSBytes.defaults0.defaultMODEMask|CMOSBytes.defaults0.defaultSHADOWMask
993	.911f		89 08		bit #$08	                bit #CMOSBytes.defaults0.defaultSHADOWMask
994	.9121		f0 02		beq $9125	                beq +
995	.9123		49 88		eor #$88	                eor #$80|CMOSBytes.defaults0.defaultSHADOWMask ;reset defaultSHADOWMask bit, set bit 7
996	.9125						+
997	.9125		60		rts		                rts

999							;-------------------------------------------------------------------------
1000							;
1001							;
1002							                .if version!=400
1010							                .endif

1012							;-------------------------------------------------------------------------

1014	.9126						readDefaultFX5Settings:
1015	.9126		20 3e 9b	jsr $9b3e	                jsr readDefaults2
1016	.9129						getTop3Bits:
1017	.9129		29 e0		and #$e0	                and #%11100000               ;? %abc00000
1018	.912b		0a		asl a		                asl a                        ;a %bc000000
1019	.912c		2a		rol a		                rol a                        ;b %c000000a
1020	.912d		2a		rol a		                rol a                        ;c %000000ab
1021	.912e		2a		rol a		                rol a                        ;0 %00000abc
1022	.912f		60		rts		                rts

1024							;-------------------------------------------------------------------------
1025							;
1026							;
1027							                .if version!=400
1031							                .endif

1033							;-------------------------------------------------------------------------

1035	.9130						readDefaultLanguageROM:
1036	.9130		20 38 91	jsr $9138	                jsr readDefaultROMs
1037	.9133		4a		lsr a		                lsr a
1038	.9134		4a		lsr a		                lsr a
1039	.9135		4a		lsr a		                lsr a
1040	.9136		4a		lsr a		                lsr a
1041	.9137		60		rts		                rts

1043							;-------------------------------------------------------------------------
1044							;
1045							;
1046	.9138						readDefaultROMs:
1047	.9138		a2 13		ldx #$13	                ldx #CMOSBytes.defaultROMs+cmosBytesOffset;
1048	.913a		80 02		bra $913e	                bra jmpReadRTCByte

1050							;-------------------------------------------------------------------------

1052	.913c						readDefaultPrinterIgnoreChar:
1053	.913c		a2 1c		ldx #$1c	                ldx #CMOSBytes.printerIgnoreChar+cmosBytesOffset
1054	.913e						jmpReadRTCByte:
1055	.913e		4c 4b 9b	jmp $9b4b	                jmp readRTCByte

1057							;-------------------------------------------------------------------------

1059	.9141						readDefaults1:
1060	.9141		a2 19		ldx #$19	                ldx #CMOSBytes.defaults1+cmosBytesOffset
1061	.9143		80 f9		bra $913e	                bra jmpReadRTCByte

1063							;-------------------------------------------------------------------------

1065	.9145						printNo_:
1066	.9145		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
1067	>9148		4e 6f 20 00			                .text "No ",0
1068	.914c		60		rts		                rts

1070							;-------------------------------------------------------------------------
1071							                .endif

1073							;-------------------------------------------------------------------------
1074							;
1075							; [MasRef G.5-8]
1076							;
1077	.914d						starPRINT:
1078	.914d		a9 c0		lda #$c0	                lda #$C0
1079	.914f		8d c2 df	sta $dfc2	                sta hazel.fsFlags
1080	.9152		80 12		bra $9166	                bra L8ED2

1082							;-------------------------------------------------------------------------

1084	.9154						starLIST:
1085	.9154		4e c2 df	lsr $dfc2	                lsr hazel.fsFlags
1086	.9157		9c c3 df	stz $dfc3	                stz hazel.lineNumberBCD+0
1087	.915a		9c c4 df	stz $dfc4	                stz hazel.lineNumberBCD+1
1088	.915d		80 04		bra $9163	                bra L8ECF

1090							;-------------------------------------------------------------------------

1092	.915f						starTYPE:
1093	.915f		38		sec		                sec
1094	.9160		6e c2 df	ror $dfc2	                ror hazel.fsFlags
1095	.9163						L8ECF:
1096	.9163		4e c2 df	lsr $dfc2	                lsr hazel.fsFlags
1097	.9166						L8ED2:
1098	.9166		9c c5 df	stz $dfc5	                stz hazel.lastCharPrinted
1099	.9169		20 fd ab	jsr $abfd	                jsr openFileForReading
1100	.916c						L8ED8:
1101	.916c		24 ff		bit $ff		                bit $FF
1102	.916e		30 52		bmi $91c2	                bmi handleESCAPEWithFileOpen
1103	.9170		20 d7 ff	jsr $ffd7	                jsr OSBGET
1104	.9173		b0 2e		bcs $91a3	                bcs closeFile
1105	.9175		2c c2 df	bit $dfc2	                bit hazel.fsFlags
1106	.9178		70 05		bvs $917f	                bvs L8EEB
1107	.917a		48		pha		                pha
1108	.917b		20 7f 94	jsr $947f	                jsr printLineNumber
1109	.917e		68		pla		                pla
1110	.917f						L8EEB:
1111	.917f		2c c2 df	bit $dfc2	                bit hazel.fsFlags
1112	.9182		30 14		bmi $9198	                bmi L8F04
1113	.9184		c9 0d		cmp #$0d	                cmp #$0D
1114	.9186		f0 20		beq $91a8	                beq L8F14
1115	.9188		c9 0a		cmp #$0a	                cmp #$0A
1116	.918a		f0 1c		beq $91a8	                beq L8F14
1117	.918c		8d c5 df	sta $dfc5	                sta hazel.lastCharPrinted
1118	.918f		c9 22		cmp #$22	                cmp #'"'
1119	.9191		f0 05		beq $9198	                beq L8F04
1120	.9193		20 9a 98	jsr $989a	                jsr printGSREADChar
1121	.9196		80 03		bra $919b	                bra L8F07

1123	.9198						L8F04:
1124	.9198		20 ee ff	jsr $ffee	                jsr OSWRCH
1125	.919b						L8F07:
1126	.919b		20 ce 91	jsr $91ce	                jsr bgetAndCheckForESCAPE
1127	.919e		90 df		bcc $917f	                bcc L8EEB
1128	.91a0						printNewLineThenCloseFile:
1129	.91a0		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1130	.91a3						closeFile:
1131	.91a3		a9 00		lda #$00	                lda #$00
1132	.91a5		4c ce ff	jmp $ffce	                jmp OSFIND

1134	.91a8						L8F14:
1135	.91a8		cd c5 df	cmp $dfc5	                cmp hazel.lastCharPrinted
1136	.91ab		f0 10		beq $91bd	                beq L8F29
1137	.91ad		48		pha		                pha
1138	.91ae		ad c5 df	lda $dfc5	                lda hazel.lastCharPrinted
1139	.91b1		c9 0d		cmp #$0d	                cmp #$0D
1140	.91b3		f0 13		beq $91c8	                beq L8F34
1141	.91b5		c9 0a		cmp #$0a	                cmp #$0A
1142	.91b7		f0 0f		beq $91c8	                beq L8F34
1143	.91b9		68		pla		                pla
1144	.91ba		8d c5 df	sta $dfc5	                sta hazel.lastCharPrinted
1145	.91bd						L8F29:
1146	.91bd		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1147	.91c0		80 aa		bra $916c	                bra L8ED8

1149							;-------------------------------------------------------------------------
1150							;
1151							; Tidily handle ESCAPE when a file is open during *DUMP or whatever.
1152							; Prints a new line, closes the file, then does an Escape error.
1153							;
1154							; entry:
1155							;
1156							; Y = file handle
1157							;
1158	.91c2						handleESCAPEWithFileOpen:
1159	.91c2		20 a0 91	jsr $91a0	                jsr printNewLineThenCloseFile
1160	.91c5		4c 41 ae	jmp $ae41	                jmp escapeError

1162							;-------------------------------------------------------------------------

1164	.91c8						L8F34:
1165	.91c8		68		pla		                pla
1166	.91c9		9c c5 df	stz $dfc5	                stz hazel.lastCharPrinted
1167	.91cc		80 cd		bra $919b	                bra L8F07

1169							;-------------------------------------------------------------------------
1170							;
1171							; Does an OSBGET and handles ESCAPE.
1172							;
1173							; entry:
1174							;
1175							; Y = file handle
1176							;
1177							; exit:
1178							;
1179							; A = byte read
1180							; C=1 if EOF
1181							; (as per OSBGET)
1182							;
1183	.91ce						bgetAndCheckForESCAPE:
1184	.91ce		20 d7 ff	jsr $ffd7	                jsr OSBGET
1185	.91d1		24 ff		bit $ff		                bit $FF
1186	.91d3		30 ed		bmi $91c2	                bmi handleESCAPEWithFileOpen
1187	.91d5		60		rts		                rts

1189							;-------------------------------------------------------------------------
1190							;
1191							; *DUMP [MasRef G.5-4]
1192							;
1193	.91d6						starDUMP:
1194	.91d6		86 f2		stx $f2		                stx stringInputBufferAddress+0
1195	.91d8		84 f3		sty $f3		                sty stringInputBufferAddress+1
1196	.91da		a2 00		ldx #$00	                ldx #$00
1197	.91dc		20 50 95	jsr $9550	                jsr clearOSFILEParameterBlockDWORD
1198	.91df		a2 04		ldx #$04	                ldx #$04
1199	.91e1		20 50 95	jsr $9550	                jsr clearOSFILEParameterBlockDWORD
1200	.91e4		a0 00		ldy #$00	                ldy #$00
1201	.91e6		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
1202	.91e9		20 5c f0	jsr $f05c	                jsr mos.gsinitForFilenameParsing
1203	.91ec						L8F58:
1204	.91ec		20 6e f0	jsr $f06e	                jsr mos.gsreadEntryPoint
1205	.91ef		90 fb		bcc $91ec	                bcc L8F58
1206	.91f1		f0 1a		beq $920d	                beq L8F79
1207	.91f3		a2 00		ldx #$00	                ldx #$00
1208	.91f5		20 ef 95	jsr $95ef	                jsr parseHexAddressFromCommandLine

1210	.91f8		a2 03		ldx #$03	                ldx #$03
1211	.91fa						-
1212	.91fa		bd ed 02	lda $02ed,x	                lda osfileParameterBlock+0,x
1213	.91fd		9d f1 02	sta $02f1,x	                sta osfileParameterBlock+4,x
1214	.9200		ca		dex		                dex
1215	.9201		10 f7		bpl $91fa	                bpl -

1217	.9203		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
1218	.9206		f0 05		beq $920d	                beq L8F79
1219	.9208		a2 04		ldx #$04	                ldx #$04
1220	.920a		20 ef 95	jsr $95ef	                jsr parseHexAddressFromCommandLine
1221	.920d						L8F79:
1222	.920d		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
1223	.920f		a6 f2		ldx $f2		                ldx stringInputBufferAddress+0
1224	.9211		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
1225	.9214		20 fd ab	jsr $abfd	                jsr openFileForReading

1227	.9217		a9 02		lda #$02	                lda #argsFileGetEXT
1228	.9219		20 f5 96	jsr $96f5	                jsr callOSARGSWithBuffer

1230	.921c		a2 03		ldx #$03	                ldx #$03
1231	.921e						L8F8A:
1232	.921e		b5 a8		lda $a8,x	                lda osargsBuffer,x
1233	.9220		dd ed 02	cmp $02ed,x	                cmp osfileParameterBlock+0,x
1234	.9223		90 6a		bcc $928f	                bcc L8FFB
1235	.9225		d0 03		bne $922a	                bne L8F96
1236	.9227		ca		dex		                dex
1237	.9228		10 f4		bpl $921e	                bpl L8F8A
1238	.922a						L8F96:
1239	.922a		a2 03		ldx #$03	                ldx #$03
1240	.922c						-
1241	.922c		bd ed 02	lda $02ed,x	                lda osfileParameterBlock+0,x
1242	.922f		95 a8		sta $a8,x	                sta osargsBuffer,x
1243	.9231		ca		dex		                dex
1244	.9232		10 f8		bpl $922c	                bpl -
1245	.9234		20 f3 96	jsr $96f3	                jsr setFilePointerFromOSARGSBuffer
1246	.9237						L8FA3:
1247	.9237		a2 00		ldx #$00	                ldx #$00
1248	.9239		20 d7 ff	jsr $ffd7	                jsr OSBGET
1249	.923c		b0 46		bcs $9284	                bcs L8FF0
1250	.923e		20 cd 94	jsr $94cd	                jsr L9239
1251	.9241		48		pha		                pha
1252	.9242		ad f1 02	lda $02f1	                lda osfileParameterBlock+4
1253	.9245		29 07		and #$07	                and #$07
1254	.9247		f0 15		beq $925e	                beq L8FCA
1255	.9249		5a		phy		                phy
1256	.924a		a8		tay		                tay
1257	.924b						L8FB7:
1258	.924b		5a		phy		                phy
1259	.924c		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
1260	>924f		20 20 20 00			                .text "   ",0
1261	.9253		7a		ply		                ply
1262	.9254		a9 20		lda #$20	                lda #$20
1263	.9256		9d f5 02	sta $02f5,x	                sta osfileParameterBlock+8,x
1264	.9259		e8		inx		                inx
1265	.925a		88		dey		                dey
1266	.925b		d0 ee		bne $924b	                bne L8FB7
1267	.925d		7a		ply		                ply
1268	.925e						L8FCA:
1269	.925e		68		pla		                pla
1270	.925f						L8FCB:
1271	.925f		48		pha		                pha
1272	.9260		c9 20		cmp #$20	                cmp #32
1273	.9262		90 04		bcc $9268	                bcc nonPrintable
1274	.9264		c9 7f		cmp #$7f	                cmp #127
1275	.9266		90 02		bcc $926a	                bcc L8FD6                    ;taken if printable
1276	.9268						nonPrintable:
1277	.9268		a9 2e		lda #$2e	                lda #'.'          ;placeholder for non-printable chars
1278	.926a						L8FD6:
1279	.926a		9d f5 02	sta $02f5,x	                sta osfileParameterBlock+8,x
1280	.926d		68		pla		                pla
1281	.926e		20 15 ae	jsr $ae15	                jsr printSpaceThenPrintHexByte
1282	.9271		e8		inx		                inx
1283	.9272		20 dc 94	jsr $94dc	                jsr L9248
1284	.9275		ad f1 02	lda $02f1	                lda osfileParameterBlock+4
1285	.9278		29 07		and #$07	                and #$07
1286	.927a		f0 0b		beq $9287	                beq L8FF3
1287	.927c		20 ce 91	jsr $91ce	                jsr bgetAndCheckForESCAPE
1288	.927f		90 de		bcc $925f	                bcc L8FCB
1289	.9281		20 eb 94	jsr $94eb	                jsr L9257
1290	.9284						L8FF0:
1291	.9284		4c a3 91	jmp $91a3	                jmp closeFile

1293	.9287						L8FF3:
1294	.9287		20 eb 94	jsr $94eb	                jsr L9257
1295	.928a		80 ab		bra $9237	                bra L8FA3

1297	.928c						L8FF8:
1298	.928c		4c 05 ac	jmp $ac05	                jmp notFoundError

1300	.928f						L8FFB:
1301	.928f		20 a3 91	jsr $91a3	                jsr closeFile
1302	.9292		20 23 b0	jsr $b023	                jsr doFollowingError
1303	>9295		b7 4f 75 74 73 69 64 65		                .text $b7,"Outside file",0
	>929d		20 66 69 6c 65 00

1305							;-------------------------------------------------------------------------
1306							;
1307							; *BUILD
1308							;
1309	.92a3						starBUILD:
1310	.92a3		4e c2 df	lsr $dfc2	                lsr hazel.fsFlags            ;clear bit 7 of fsFlags
1311	.92a6		80 04		bra $92ac	                bra starBUILDOrAPPEND

1313							;-------------------------------------------------------------------------
1314							;
1315							; *APPEND
1316							;
1317	.92a8						starAPPEND:
1318	.92a8		38		sec		                sec
1319	.92a9		6e c2 df	ror $dfc2	                ror hazel.fsFlags            ;set bit 7 of fsFlags
1320	.92ac						starBUILDOrAPPEND:
1321							                ; bit 7 of fsFlags indicates *BUILD (clear) or *APPEND
1322							                ; (set).
1323	.92ac		9c c3 df	stz $dfc3	                stz hazel.lineNumberBCD+0    ;reset line number
1324	.92af		9c c4 df	stz $dfc4	                stz hazel.lineNumberBCD+1    ;reset line number
1325	.92b2		a9 80		lda #$80	                lda #$80                     ;open for output. Assume *BUILD
1326	.92b4		2c c2 df	bit $dfc2	                bit hazel.fsFlags            ;test *BUILD/*APPEND
1327	.92b7		10 02		bpl $92bb	                bpl +                        ;branch taken if *BUILD
1328	.92b9		a9 c0		lda #$c0	                lda #$C0                     ;*APPEND, so open for update
1329	.92bb						+
1330	.92bb		20 ce ff	jsr $ffce	                jsr OSFIND                   ;open the file
1331	.92be		a8		tay		                tay                          ;Y=file handle
1332	.92bf		f0 cb		beq $928c	                beq L8FF8                    ;branch taken if open failed
1333	.92c1		8c ed 02	sty $02ed	                sty osfileParameterBlock+0   ;save file handle
1334	.92c4		20 ee 96	jsr $96ee	                jsr setPTRToEOF ;move to EOF (effective no-op when *BUILD)
1335	.92c7						L9033:
1336	.92c7		20 7f 94	jsr $947f	                jsr printLineNumber
1337	.92ca						L9036:
1338							                .if version<500&&version!=350
1339	.92ca		20 b2 86	jsr $86b2	                jsr readCommandLine
1345							                .endif
1346	.92cd		08		php		                php
1347	.92ce		90 0f		bcc $92df	                bcc L904B
1348							                ; Handle ESCAPE
1349	.92d0		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1350	.92d3		a9 0d		lda #$0d	                lda #$0D
1351	.92d5		99 00 dc	sta $dc00,y	                sta hazel.commandLine,y      ;terminate current line
1352	.92d8						L9044:
1353	.92d8		5a		phy		                phy                          ;save line length
1354	.92d9		a9 7e		lda #$7e	                lda #$7E
1355	.92db		20 f4 ff	jsr $fff4	                jsr OSBYTE                   ;acknowledge ESCAPE
1356	.92de		7a		ply		                ply                          ;restore line length
1357	.92df						L904B:
1358	.92df		98		tya		                tya                          ;A=line length
1359	.92e0		f0 50		beq $9332	                beq L909E                    ;taken if line empty
1360	.92e2		20 3f 93	jsr $933f	                jsr setStringInputBufferToCommandLine
1361	.92e5		a0 00		ldy #$00	                ldy #$00
1362	.92e7		a2 00		ldx #$00	                ldx #$00
1363	.92e9						L9055:
1364	.92e9		20 8b f0	jsr $f08b	                jsr mos.LF29C
1365	.92ec		9d 00 dc	sta $dc00,x	                sta hazel.commandLine,x
1366	.92ef		a9 01		lda #$01	                lda #stringInputOptions.goodString
1367	.92f1		24 e4		bit $e4		                bit stringInputOptions
1368	.92f3		d0 0b		bne $9300	                bne L906C
1369	.92f5		a9 07		lda #$07	                lda #7
1370	.92f7		20 ee ff	jsr $ffee	                jsr OSWRCH                   ;beep
1371	.92fa		20 89 94	jsr $9489	                jsr L91F5
1372	.92fd		28		plp		                plp
1373	.92fe		80 ca		bra $92ca	                bra L9036

1375	.9300						L906C:
1376	.9300		e8		inx		                inx
1377	.9301		90 e6		bcc $92e9	                bcc L9055
1378	.9303		28		plp		                plp
1379	.9304		90 01		bcc $9307	                bcc L9073
1380	.9306		ca		dex		                dex
1381	.9307						L9073:
1382	.9307		08		php		                php
1383	.9308		da		phx		                phx
1384	.9309		a2 0b		ldx #$0b	                ldx #size(OSGBPBParameterBlock)-2
1385	.930b						L9077:
1386	.930b		9e ee 02	stz $02ee,x	                stz osfileParameterBlock+1,x
1387	.930e		ca		dex		                dex
1388	.930f		10 fa		bpl $930b	                bpl L9077
1389	.9311		fa		plx		                plx
1390	.9312		8e f2 02	stx $02f2	                stx osfileParameterBlock+OSGBPBParameterBlock.count+0
1391							                .cerror (<hazel.commandLine)!=0,"hazel.commandLine must be page aligned"
1392	.9315		a9 dc		lda #$dc	                lda #>hazel.commandLine
1393	.9317		8d ef 02	sta $02ef	                sta osfileParameterBlock+OSGBPBParameterBlock.address+1
1394	.931a		ce f0 02	dec $02f0	                dec osfileParameterBlock+OSGBPBParameterBlock.address+2
1395	.931d		ce f1 02	dec $02f1	                dec osfileParameterBlock+OSGBPBParameterBlock.address+3
1396	.9320		a9 02		lda #$02	                lda #gbppPutBytesCurrentPTR
1397	.9322		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
1398	.9324		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1399	.9326		20 d1 ff	jsr $ffd1	                jsr OSGBPB
1400	.9329		28		plp		                plp
1401	.932a		90 9b		bcc $92c7	                bcc L9033
1402	.932c						L9098:
1403	.932c		ac ed 02	ldy $02ed	                ldy osfileParameterBlock+0
1404	.932f		4c a3 91	jmp $91a3	                jmp closeFile

1406	.9332						L909E:
1407	.9332		28		plp		                plp
1408	.9333		b0 f7		bcs $932c	                bcs L9098
1409	.9335		a9 0d		lda #$0d	                lda #13
1410	.9337		ac ed 02	ldy $02ed	                ldy osfileParameterBlock
1411	.933a		20 d4 ff	jsr $ffd4	                jsr OSBPUT
1412	.933d		80 88		bra $92c7	                bra L9033

1414	.933f						setStringInputBufferToCommandLine:
1415	.933f		a9 41		lda #$41	                lda #$41
1416	.9341		85 e4		sta $e4		                sta $E4
1417							                .cerror (<hazel.commandLine)!=0,"hazel.commandLine must be page aligned"
1418	.9343		64 f2		stz $f2		                stz stringInputBufferAddress+0
1419	.9345		a9 dc		lda #$dc	                lda #>hazel.commandLine
1420	.9347		85 f3		sta $f3		                sta stringInputBufferAddress+1
1421	.9349		60		rts		                rts

1423							;-------------------------------------------------------------------------

1425							                .if version>=500||version==350
1431							                .endif

1433							;-------------------------------------------------------------------------
1434							;
1435							; *MOVE
1436							;
1437	.934a						starMOVE:
1438	.934a		ad 34 fe	lda $fe34	                lda ACCCON                    ; Save ACCCON
1439	.934d		8d dc df	sta $dfdc	                sta hazel.oldACCCON
1440	.9350		48		pha		                pha                          ; Save ACCCON and command line pointer
1441	.9351		da		phx		                phx
1442	.9352		5a		phy		                phy
1443	.9353		a0 80		ldy #$80	                ldy #$80                     ; Top of available shadow memory at &8000
1444	.9355		a5 d0		lda $d0		                lda STATE                      ; Get VDU status
1445	.9357		89 10		bit #$10	                bit #$10                     ; Jump if not shadow screen, spare up to &8000
1446	.9359		f0 07		beq $9362	                beq L90CE
1447							; Shadow screen selected
1448	.935b		20 af ef	jsr $efaf	                jsr mos.LF1C0                ; Get screen bottom to XY
1449	.935e		c0 30		cpy #$30	                cpy #$30                     ; Screen at &3000, no spare memory, jump to use Hazel
1450	.9360		f0 14		beq $9376	                beq L90E2

1452							; Non-shadow or small shadow screen selected
1453							; Y=top of available memory in shadow memory
1454	.9362						L90CE:
1455	.9362		a9 30		lda #$30	                lda #$30                     ; &3000=start of shadow memory
1456	.9364		8d d6 df	sta $dfd6	                sta hazel.moveBufferMSB
1457	.9367		a9 04		lda #$04	                lda #ACCCON.X
1458	.9369		0c 34 fe	tsb $fe34	                tsb ACCCON
1459	.936c		8d dd df	sta $dfdd	                sta hazel.hasACCCONChanged      ; set 'ACCCON changed'
1460	.936f		98		tya		                tya                          ; A=length of space in shadow memory
1461	.9370		38		sec		                sec
1462	.9371		ed d6 df	sbc $dfd6	                sbc hazel.moveBufferMSB
1463	.9374		80 07		bra $937d	                bra L90E9

1465							; No shadow memory available, use Hazel
1466	.9376						L90E2:
1467	.9376		a9 dd		lda #$dd	                lda #$DD                     ; Buffer at &DD00
1468	.9378		8d d6 df	sta $dfd6	                sta hazel.moveBufferMSB
1469	.937b		a9 02		lda #$02	                lda #$02                     ; Buffer length=&200

1471							; &DFD6=high byte of buffer address
1472							; A=high byte of buffer length
1473	.937d						L90E9:
1474	.937d		8d d7 df	sta $dfd7	                sta hazel.moveNumPages      ; Store buffer length
1475	.9380		7a		ply		                ply                          ; Get command line pointer
1476	.9381		fa		plx		                plx
1477	.9382		da		phx		                phx
1478	.9383		5a		phy		                phy
1479	.9384		a9 40		lda #$40	                lda #$40                     ; Open source file
1480	.9386		20 ce ff	jsr $ffce	                jsr OSFIND
1481	.9389		a8		tay		                tay                          ; Store source handle, jump if not found
1482	.938a		8c d4 df	sty $dfd4	                sty hazel.moveSrcHandle
1483	.938d		f0 39		beq $93c8	                beq L9134
1484	.938f		7a		ply		                ply                          ; Get command line back again
1485	.9390		fa		plx		                plx
1486	.9391		86 f2		stx $f2		                stx $F2
1487	.9393		84 f3		sty $f3		                sty $F3
1488	.9395		da		phx		                phx                          ; And save it again
1489	.9396		5a		phy		                phy
1490	.9397		a0 00		ldy #$00	                ldy #$00                     ; Step past first parameter
1491	.9399		20 5c f0	jsr $f05c	                jsr mos.gsinitForFilenameParsing
1492	.939c						L9108:
1493	.939c		20 6e f0	jsr $f06e	                jsr mos.gsreadEntryPoint     ;
1494	.939f		90 fb		bcc $939c	                bcc L9108
1495	.93a1		98		tya		                tya                          ; Save address of dest filename
1496	.93a2		18		clc		                clc
1497	.93a3		65 f2		adc $f2		                adc $F2
1498	.93a5		8d d8 df	sta $dfd8	                sta hazel.moveDestName+0
1499	.93a8		aa		tax		                tax
1500	.93a9		a5 f3		lda $f3		                lda $F3
1501	.93ab		69 00		adc #$00	                adc #$00
1502	.93ad		8d d9 df	sta $dfd9	                sta hazel.moveDestName+1
1503	.93b0		a8		tay		                tay                          ; Temporary filing system flag
1504	.93b1		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
1505	.93b4		a9 80		lda #$80	                lda #$80                     ; Open destination file
1506	.93b6		20 ce ff	jsr $ffce	                jsr OSFIND
1507	.93b9		a8		tay		                tay                          ; Store dest handle, jump if opened
1508	.93ba		8c d5 df	sty $dfd5	                sty hazel.moveDestHandle
1509	.93bd		d0 0c		bne $93cb	                bne L9137

1511							; Couldn't open destination
1512	.93bf		ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle      ; Get source handle and clear it
1513	.93c2		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
1514	.93c5		20 ce ff	jsr $ffce	                jsr OSFIND                   ; Close source file
1515	.93c8						L9134:
1516	.93c8		4c 05 ac	jmp $ac05	                jmp notFoundError                    ; Jump to 'Not found' error

1518							; Source and dest opened
1519							; ----------------------
1520							; Build OSGBPB source file control block at &02ED
1521							; and destination control block at &DFC7
1522	.93cb						L9137:
1523	.93cb		a2 07		ldx #$07	                ldx #$07
1524	.93cd						L9139:
1525	.93cd		9e ee 02	stz $02ee,x	                stz @w osfileParameterBlock+OSGBPBParameterBlock.address,x ; Addr=0, Num=0
1526	.93d0		9e c8 df	stz $dfc8,x	                stz hazel.moveOSGBPB+1,x
1527	.93d3		ca		dex		                dex
1528	.93d4		10 f7		bpl $93cd	                bpl L9139
1529	.93d6		ad d4 df	lda $dfd4	                lda hazel.moveSrcHandle      ; Source handle
1530	.93d9		8d ed 02	sta $02ed	                sta osfileParameterBlock+OSGBPBParameterBlock.handle
1531	.93dc		ad d6 df	lda $dfd6	                lda hazel.moveBufferMSB      ; Buffer address
1532	.93df		8d ef 02	sta $02ef	                sta osfileParameterBlock+OSGBPBParameterBlock.address+1
1533	.93e2		8d c9 df	sta $dfc9	                sta hazel.moveOSGBPB.addr+1
1534	.93e5		ad d7 df	lda $dfd7	                lda hazel.moveNumPages
1535	.93e8		8d f3 02	sta $02f3	                sta osfileParameterBlock+OSGBPBParameterBlock.count+1
1536	.93eb		8d cd df	sta $dfcd	                sta hazel.moveOSGBPB.numBytes+1
1537	.93ee		ce f0 02	dec $02f0	                dec osfileParameterBlock+OSGBPBParameterBlock.address+2 ; Source addr=&FFFFxxxx
1538	.93f1		ce f1 02	dec $02f1	                dec osfileParameterBlock+OSGBPBParameterBlock.address+3
1539	.93f4		ce ca df	dec $dfca	                dec hazel.moveOSGBPB.addr+2
1540	.93f7		ce cb df	dec $dfcb	                dec hazel.moveOSGBPB.addr+3

1542							; Should use &FFFExxxx and let filing system select correct memory
1543							; Unfortunately, CFS/RFS and DFS do not recognise &FFFExxxx, so
1544							; *MOVE has to do it itself, causing problems for filing systems
1545							; that /do/ recognise &FFFExxxx where they have to remember to
1546							; *do* *nothing* for &FFFFxxxx instead of select main memory as
1547							; &FFFFxxxx implies.

1549	.93fa		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock                     ; XY=>source OSGBPB block
1550	.93fc		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1551	.93fe		a9 04		lda #$04	                lda #$04                     ; Read data from source
1552	.9400		20 d1 ff	jsr $ffd1	                jsr OSGBPB
1553	.9403		08		php		                php                          ; Jump if not at end of file
1554	.9404		90 11		bcc $9417	                bcc L9183
1555							; End of file, adjust destination buffer length for final part
1556	.9406		a9 00		lda #$00	                lda #$00
1557	.9408		ed f2 02	sbc $02f2	                sbc osfileParameterBlock+OSGBPBParameterBlock.count+0
1558	.940b		8d cc df	sta $dfcc	                sta hazel.moveOSGBPB.numBytes+0
1559	.940e		ad cd df	lda $dfcd	                lda hazel.moveOSGBPB.numBytes+1
1560	.9411		ed f3 02	sbc $02f3	                sbc osfileParameterBlock+OSGBPBParameterBlock.count+1
1561	.9414		8d cd df	sta $dfcd	                sta hazel.moveOSGBPB.numBytes+1
1562	.9417						L9183:
1563	.9417		ad d5 df	lda $dfd5	                lda hazel.moveDestHandle      ; Destination handle
1564	.941a		8d c7 df	sta $dfc7	                sta hazel.moveOSGBPB.handle
1565	.941d		a9 02		lda #$02	                lda #$02                     ; XY=>control block, A=write
1566	.941f		a2 c7		ldx #$c7	                ldx #<hazel.moveOSGBPB
1567	.9421		a0 df		ldy #$df	                ldy #>hazel.moveOSGBPB
1568	.9423		20 d1 ff	jsr $ffd1	                jsr OSGBPB
1569	.9426		28		plp		                plp                          ; Loop until end of file
1570	.9427		90 a2		bcc $93cb	                bcc L9137
1571	.9429		a9 00		lda #$00	                lda #$00
1572	.942b		ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle      ; Get and clear source handle
1573	.942e		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
1574	.9431		5a		phy		                phy                          ; Close source file
1575	.9432		20 ce ff	jsr $ffce	                jsr OSFIND
1576	.9435		a9 00		lda #$00	                lda #$00                     ; Get dest handle
1577	.9437		ac d5 df	ldy $dfd5	                ldy hazel.moveDestHandle
1578	.943a		5a		phy		                phy                          ; Clear dest handle and close file
1579	.943b		9c d5 df	stz $dfd5	                stz hazel.moveDestHandle
1580	.943e		20 ce ff	jsr $ffce	                jsr OSFIND
1581	.9441		7a		ply		                ply                          ; Dest not CFS/RFS, jump to...
1582	.9442		c0 04		cpy #$04	                cpy #$04
1583	.9444		b0 0b		bcs $9451	                bcs L91BD
1584	.9446		7a		ply		                ply                          ; Pop source handle
1585	.9447						L91B3:
1586	.9447		7a		ply		                ply                          ; Restore XY
1587	.9448		fa		plx		                plx
1588	.9449						L91B5:
1589	.9449		68		pla		                pla                          ; Clear 'ACCCON changed', restore ACCCON
1590	.944a		9c dd df	stz $dfdd	                stz hazel.hasACCCONChanged
1591	.944d		8d 34 fe	sta $fe34	                sta ACCCON
1592	.9450		60		rts		                rts

1594	.9451						L91BD:
1595	.9451		7a		ply		                ply                          ; Source was CFS/RFS, jump to exit
1596	.9452		c0 04		cpy #$04	                cpy #$04
1597	.9454		90 f1		bcc $9447	                bcc L91B3
1598	.9456		7a		ply		                ply                          ; Point to first parameter
1599	.9457		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
1600	.945a		fa		plx		                plx
1601	.945b		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
1602	.945e		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
1603	.9460		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1604	.9462		a9 05		lda #$05	                lda #$05                     ; Read info on source file
1605	.9464		20 dd ff	jsr $ffdd	                jsr OSFILE
1606	.9467		ad d8 df	lda $dfd8	                lda hazel.moveDestName+0      ; Get address of dest filename
1607	.946a		8d ed 02	sta $02ed	                sta osfileParameterBlock+OSFILEParameterBlock.fileName+0
1608	.946d		ad d9 df	lda $dfd9	                lda hazel.moveDestName+1      ;  and put in control block
1609	.9470		8d ee 02	sta $02ee	                sta osfileParameterBlock+OSFILEParameterBlock.fileName+1
1610	.9473		a9 f0		lda #$f0	                lda #$F0                     ; Mask out 'public' access bits
1611	.9475		1c fb 02	trb $02fb	                trb osfileParameterBlock+OSFILEParameterBlock.attributes+0
1612	.9478		a9 01		lda #$01	                lda #$01                     ; Write info on dest file
1613	.947a		20 dd ff	jsr $ffdd	                jsr OSFILE
1614	.947d		80 ca		bra $9449	                bra L91B5                    ; Jump to restore ACCCON and exit

1616	.947f						printLineNumber:
1617	.947f		a2 00		ldx #$00	                ldx #$00
1618	.9481		38		sec		                sec
1619	.9482		20 c2 94	jsr $94c2	                jsr adcLineNumberBCDX        ;increment line number LSB
1620	.9485		e8		inx		                inx
1621	.9486		20 c2 94	jsr $94c2	                jsr adcLineNumberBCDX        ;carry into line number MSB
1622	.9489						L91F5:
1623	.9489		38		sec		                sec                          ;printing leading 0s
1624	.948a		ad c4 df	lda $dfc4	                lda hazel.lineNumberBCD+1    ;get line number MSB
1625	.948d		20 a5 94	jsr $94a5	                jsr printPossiblyLeading0s
1626	.9490		ad c3 df	lda $dfc3	                lda hazel.lineNumberBCD+0    ;get line number LSB
1627	.9493		48		pha		                pha                          ;save line number LSB
1628	.9494		08		php		                php                          ;save C
1629							                .if version==350
1631							                .else
1632	.9495		4a		lsr a		                lsr a
1633	.9496		4a		lsr a		                lsr a
1634	.9497		4a		lsr a		                lsr a
1635	.9498		4a		lsr a		                lsr a
1636							                .endif
1637	.9499		28		plp		                plp                          ;restore  C
1638	.949a		20 b0 94	jsr $94b0	                jsr printPossiblyLeading0    ;print line number 3rd digit
1639	.949d		68		pla		                pla                          ;restore line number LSB
1640	.949e		18		clc		                clc                ;always print line number 4th digit
1641	.949f		20 b0 94	jsr $94b0	                jsr printPossiblyLeading0    ;
1642	.94a2		4c 6f a7	jmp $a76f	                jmp printSpace                    ;

1644	.94a5						printPossiblyLeading0s:
1645	.94a5		48		pha		                pha                          ;save value
1646	.94a6		08		php		                php                          ;save C
1647							                .if version==350
1649							                .else
1650	.94a7		4a		lsr a		                lsr a
1651	.94a8		4a		lsr a		                lsr a
1652	.94a9		4a		lsr a		                lsr a
1653	.94aa		4a		lsr a		                lsr a
1654							                .endif
1655	.94ab		28		plp		                plp                          ;restore C
1656	.94ac		20 b0 94	jsr $94b0	                jsr printPossiblyLeading0    ;print 1st digit
1657	.94af		68		pla		                pla                          ;restore value
1658	.94b0						printPossiblyLeading0:
1659	.94b0		29 0f		and #$0f	                and #$0F                     ;get digit to print
1660	.94b2		d0 09		bne $94bd	                bne printNonLeading0         ;always print if non-0
1661	.94b4		90 07		bcc $94bd	                bcc printNonLeading0 ;branch taken if not leading 0
1662	.94b6		a9 20		lda #$20	                lda #$20             ;print space instead of leading 0
1663	.94b8		20 ee ff	jsr $ffee	                jsr OSWRCH
1664	.94bb		38		sec		                sec                ;indicate still in leading 0s state
1665	.94bc		60		rts		                rts

1667	.94bd						printNonLeading0:
1668	.94bd		20 23 ae	jsr $ae23	                jsr printHexDigit            ;print digit
1669	.94c0		18		clc		                clc                          ;no longer in leading 0s state
1670	.94c1		60		rts		                rts                          ;

1672	.94c2						adcLineNumberBCDX:
1673	.94c2		a9 00		lda #$00	                lda #$00
1674	.94c4		f8		sed		                sed
1675	.94c5		7d c3 df	adc $dfc3,x	                adc hazel.lineNumberBCD,x
1676	.94c8		9d c3 df	sta $dfc3,x	                sta hazel.lineNumberBCD,x
1677	.94cb		d8		cld		                cld
1678	.94cc						rts9238:
1679	.94cc		60		rts		                rts

1681							;-------------------------------------------------------------------------

1683	.94cd						L9239:
1684	.94cd		da		phx		                phx
1685	.94ce		48		pha		                pha
1686	.94cf		a2 02		ldx #$02	                ldx #$02
1687	.94d1						L923D:
1688	.94d1		bd f1 02	lda $02f1,x	                lda osfileParameterBlock+4,x
1689	.94d4		20 1a ae	jsr $ae1a	                jsr printHexByte
1690	.94d7		ca		dex		                dex
1691	.94d8		10 f7		bpl $94d1	                bpl L923D
1692	.94da		80 0c		bra $94e8	                bra L9254

1694							;-------------------------------------------------------------------------

1696	.94dc						L9248:
1697	.94dc		da		phx		                phx
1698	.94dd		48		pha		                pha
1699	.94de		a2 fc		ldx #$fc	                ldx #256-4
1700	.94e0						L924C:
1701	.94e0		fe f5 01	inc $01f5,x	                inc osfileParameterBlock+4-(256-4),x
1702	.94e3		d0 03		bne $94e8	                bne L9254
1703	.94e5		e8		inx		                inx
1704	.94e6		d0 f8		bne $94e0	                bne L924C
1705	.94e8						L9254:
1706	.94e8		68		pla		                pla
1707	.94e9		fa		plx		                plx
1708	.94ea		60		rts		                rts

1710	.94eb						L9257:
1711	.94eb		5a		phy		                phy
1712	.94ec		da		phx		                phx
1713	.94ed						L9259:
1714	.94ed		e0 08		cpx #$08	                cpx #$08
1715	.94ef		f0 0a		beq $94fb	                beq L9267
1716	.94f1		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
1717	>94f4		20 20 20 00			                .text "   ",0
1718	.94f8		e8		inx		                inx
1719	.94f9		80 f2		bra $94ed	                bra L9259

1721	.94fb						L9267:
1722	.94fb		fa		plx		                plx
1723	.94fc		20 6f a7	jsr $a76f	                jsr printSpace
1724	.94ff		a0 00		ldy #$00	                ldy #$00
1725	.9501						L926D:
1726	.9501		b9 f5 02	lda $02f5,y	                lda osfileParameterBlock+8,y
1727	.9504		20 ee ff	jsr $ffee	                jsr OSWRCH
1728	.9507		c8		iny		                iny
1729	.9508		ca		dex		                dex
1730	.9509		d0 f6		bne $9501	                bne L926D
1731	.950b		7a		ply		                ply
1732	.950c		4c e7 ff	jmp $ffe7	                jmp OSNEWL

1734							;-------------------------------------------------------------------------

1736							                .if version!=350
1737							                .include "restore_font.s65"

:9	;******  Processing file: src/restore_font.s65

1							;-------------------------------------------------------------------------
2							;
3							; restore entire font.
4							;
5	.950f						restoreFont32To255:
6	.950f		a2 07		ldx #$07	                ldx #$07                     ;224 chars - 32-255
7							                .cerror *!=restoreFont32ToN
8							                ; fall through to restoreFont32ToN

10							;-------------------------------------------------------------------------
11							;
12							; Restore part of the font, starting from char 32.
13							;
14							; entry:
15							;
16							; X = number of pages of font data to restore - X*32 chars will be
17							; restored
18							;
19	.9511						restoreFont32ToN:
20	.9511		08		php		                php
21	.9512		78		sei		                sei
22	.9513		a9 b9		lda #$b9	                lda #>LB900                ;start at beginning of font
23	.9515		85 f1		sta $f1		                sta $F1
24	.9517		a9 89		lda #$89	                lda #>andy.softCharacterDefinitions ;write to beginning of soft character definitions
25							                .cerror *!=restoreFontPart
26							                ; fall through to restoreFontPart

28							;-------------------------------------------------------------------------
29							;
30							; Restore part of the font.
31							;
32							; entry:
33							;
34							; ?$f1 = MSB of font data
35							;
36							; A = MSB of dest page in ANDY - should be part of the soft character
37							; definitions!
38							;
39							; X = number of pages of font data to restore - X*32 chars will be
40							; restored
41							;
42							; preserves: Y

44	.9519						restoreFontPart:
45	.9519		85 fb		sta $fb		                sta $FB                      ;save MSB of dest
46	.951b		20 a5 e5	jsr $e5a5	                jsr mos.selectTerminalROMAndANDY2
47	.951e		5a		phy		                phy                          ;
48	.951f		a0 00		ldy #$00	                ldy #$00                     ;
49	.9521		64 fa		stz $fa		                stz $FA                      ;initialize LSB of src
50	.9523		64 f0		stz $f0		                stz $F0                      ;initialize LSB of dest
51	.9525						-
52	.9525		b1 f0		lda ($f0),y	                lda ($F0),y
53	.9527		91 fa		sta ($fa),y	                sta ($FA),y
54	.9529		c8		iny		                iny
55	.952a		d0 f9		bne $9525	                bne -
56	.952c		e6 f1		inc $f1		                inc $F1
57	.952e		e6 fb		inc $fb		                inc $FB
58	.9530		ca		dex		                dex
59	.9531		d0 f2		bne $9525	                bne -
60	.9533		7a		ply		                ply
61	.9534		28		plp		                plp
62	.9535		4c 9d e5	jmp $e59d	                jmp mos.selectTerminalROM

64							;-------------------------------------------------------------------------

66							                .if version==350
68							                .endif
69	.9538						restoreFont32To126:
70	.9538		a2 03		ldx #$03	                ldx #$03                     ;96 chars - 32-126
71	.953a		80 d5		bra $9511	                bra restoreFont32ToN

73							;-------------------------------------------------------------------------
74							;
75							; OSBYTE 25 (&19) Restore a group of font definitions
76							;
77							; MasRef D.2-28
78							;
79	.953c						osbyte19:
80	.953c		8a		txa		                txa                          ;A=group identifier
81	.953d		f0 d0		beq $950f	                beq restoreFont32To255   ;taken if group 0 - all chars
82							                .if version<500
83	.953f		c9 08		cmp #$08	                cmp #$08
84							                .if version==350
86							                .else
87	.9541		b0 89		bcs $94cc	                bcs rts9238         ;taken if group >= 8 (not invalid)
88							                .endif
94							                .endif
95	.9543		08		php		                php
96	.9544		78		sei		                sei
97	.9545		69 b8		adc #$b8	                adc #(>LB900)-1 ;form address of ROM font data for group
98	.9547		85 f1		sta $f1		                sta $F1
99	.9549		8a		txa		                txa
100	.954a		a2 01		ldx #$01	                ldx #$01                   ;copy 1 page, 32 chars
101	.954c		69 88		adc #$88	                adc #(>andy.softCharacterDefinitions)-1 ;get page in ANDY for group
102	.954e		80 c9		bra $9519	                bra restoreFontPart


:5	;******  Return to file: src/terminal.s65

1738							                .endif

1740							;-------------------------------------------------------------------------
1741							;
1742							; Clear 4 bytes in the OSFILE parameter block.
1743							;
1744							; entry:
1745							;
1746							; X = offset of the 4 bytes to clear
1747							;
1748	.9550						clearOSFILEParameterBlockDWORD:
1749	.9550		9e ed 02	stz $02ed,x	                stz osfileParameterBlock+0,x
1750	.9553		9e ee 02	stz $02ee,x	                stz osfileParameterBlock+1,x
1751	.9556		9e ef 02	stz $02ef,x	                stz osfileParameterBlock+2,x
1752	.9559		9e f0 02	stz $02f0,x	                stz osfileParameterBlock+3,x
1753	.955c						rts94A4:
1754	.955c		60		rts		                rts

1756							;-------------------------------------------------------------------------
1757							;
1758							; Read a 32-bit hex value from a string.
1759							;
1760							; entry:
1761							;
1762							; X = offset into osfileParameterBlock to store the value
1763							;
1764							; exit:
1765							;
1766							; C=0 if error

1768	.955d						parseHexAddressFromString:
1769	.955d		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput ; Skip spaces
1770	.9560		20 5d 86	jsr $865d	                jsr readHexDigit
1771	.9563		90 23		bcc $9588	                bcc rts92F4
1772	.9565		20 50 95	jsr $9550	                jsr clearOSFILEParameterBlockDWORD
1773	.9568						readDigitsLoop:
1774	.9568		5a		phy		                phy
1775	.9569		2a		rol a		                rol a
1776	.956a		2a		rol a		                rol a
1777	.956b		2a		rol a		                rol a
1778	.956c		2a		rol a		                rol a                        ;put digit in top 4 bits
1779	.956d		a0 04		ldy #$04	                ldy #$04
1780	.956f						shiftIn1DigitLoop:
1781	.956f		2a		rol a		                rol a
1782	.9570		3e ed 02	rol $02ed,x	                rol osfileParameterBlock+0,x
1783	.9573		3e ee 02	rol $02ee,x	                rol osfileParameterBlock+1,x
1784	.9576		3e ef 02	rol $02ef,x	                rol osfileParameterBlock+2,x
1785	.9579		3e f0 02	rol $02f0,x	                rol osfileParameterBlock+3,x
1786	.957c		b0 61		bcs $95df	                bcs badAddressError ;carry out of bit 31 implies too many digits
1787	.957e		88		dey		                dey
1788	.957f		d0 ee		bne $956f	                bne shiftIn1DigitLoop
1789	.9581		7a		ply		                ply
1790	.9582		20 5d 86	jsr $865d	                jsr readHexDigit
1791	.9585		b0 e1		bcs $9568	                bcs readDigitsLoop   ;keep going until hex digits stop
1792	.9587		38		sec		                sec       ;got at least 1 hex digit, so result is good
1793	.9588						rts92F4:
1794	.9588		60		rts		                rts

1796							;-------------------------------------------------------------------------
1797							;
1798							; *GO (<addr>) [MasRef C.5-6]
1799							;
1800	.9589						starGO:
1801	.9589		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput ; Skip spaces
1802	.958c		d0 03		bne $9591	                bne starGOIO             ; Jump to read parameters
1803	.958e		4c 76 86	jmp $8676	                jmp commandLineUI        ; No parameters, enter CLICOM

1805							;-------------------------------------------------------------------------
1806							;
1807							; *GOIO <addr> [MasRef C.5-7]
1808							;
1809	.9591						starGOIO:
1810	.9591		a2 00		ldx #$00	                ldx #$00
1811	.9593		20 ef 95	jsr $95ef	                jsr parseHexAddressFromCommandLine ; Read hex address
1812	.9596		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput ; Skip spaces
1813	.9599		08		php		                php  ; Update &F2/3 to point to any further parameters
1814	.959a		98		tya		                tya
1815	.959b		18		clc		                clc
1816	.959c		65 f2		adc $f2		                adc stringInputBufferAddress+0
1817	.959e		85 f2		sta $f2		                sta stringInputBufferAddress+0
1818	.95a0		90 02		bcc $95a4	                bcc +
1819	.95a2		e6 f3		inc $f3		                inc stringInputBufferAddress+1
1820	.95a4						+
1821	.95a4		a0 00		ldy #$00	                ldy #$00    ; (&F2),y=>parameters, EQ if no parameters
1822	.95a6		28		plp		                plp
1823	.95a7		6c ed 02	jmp ($02ed)	                jmp (osfileParameterBlock+0) ; Jump to address

1825							;-------------------------------------------------------------------------

1827	.95aa						starLOAD:
1828	.95aa		a9 ff		lda #$ff	                lda #fileLoad
1829	.95ac						starCommandThroughOSFILE:
1830	.95ac		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
1831	.95af						L931B:
1832	.95af		86 f2		stx $f2		                stx stringInputBufferAddress+0
1833	.95b1		84 f3		sty $f3		                sty stringInputBufferAddress+1
1834	.95b3		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
1835	.95b6		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
1836	.95b9		48		pha		                pha                          ;save OSFILE reason
1837	.95ba		a2 02		ldx #$02	                ldx #OSFILEParameterBlock.load
1838	.95bc		20 50 95	jsr $9550	                jsr clearOSFILEParameterBlockDWORD
1839	.95bf		a2 0a		ldx #$0a	                ldx #OSFILEParameterBlock.length
1840	.95c1		20 50 95	jsr $9550	                jsr clearOSFILEParameterBlockDWORD
1841	.95c4		a0 ff		ldy #$ff	                ldy #$FF
1842	.95c6		8c f3 02	sty $02f3	                sty osfileParameterBlock+OSFILEParameterBlock.exec+0 ;by default, load to file's load address
1843	.95c9		c8		iny		                iny                                                  ;Y=0
1844	.95ca		20 5c f0	jsr $f05c	                jsr mos.gsinitForFilenameParsing
1845	.95cd						L9339:
1846	.95cd		20 6e f0	jsr $f06e	                jsr mos.gsreadEntryPoint
1847	.95d0		90 fb		bcc $95cd	                bcc L9339
1848	.95d2		68		pla		                pla                          ;restore OSFILE reason
1849	.95d3		48		pha		                pha                          ;save OSFILE reason
1850	.95d4		10 50		bpl $9626	                bpl finishStarSAVE                    ;taken if *SAVE
1851	.95d6		a2 02		ldx #$02	                ldx #OSFILEParameterBlock.load
1852	.95d8		20 5d 95	jsr $955d	                jsr parseHexAddressFromString ;parse *LOAD address
1853	.95db		b0 18		bcs $95f5	                bcs doStarLOADWithExplicitAddress ;taken if good address
1854	.95dd		f0 1b		beq $95fa	                beq L9366        ;taken if CR encountered (this is ok)
1855	.95df						badAddressError:
1856	.95df		20 23 b0	jsr $b023	                jsr doFollowingError
1857	>95e2		fc 42 61 64 20 61 64 64		                .text $fc,"Bad address",0
	>95ea		72 65 73 73 00

1859							;-------------------------------------------------------------------------
1860							;
1861							; Parse hex address from command line.
1862							;
1863	.95ef						parseHexAddressFromCommandLine:
1864	.95ef		20 5d 95	jsr $955d	                jsr parseHexAddressFromString ; Read hex address
1865	.95f2		90 eb		bcc $95df	                bcc badAddressError           ; Jump with bad address
1866	.95f4		60		rts		                rts

1868							;-------------------------------------------------------------------------

1870	.95f5						doStarLOADWithExplicitAddress:
1871	.95f5		d0 7f		bne $9676	                bne badCommandError93E2
1872	.95f7		ee f3 02	inc $02f3	                inc osfileParameterBlock+OSFILEParameterBlock.exec+0 ;load to parameter block load address
1873	.95fa						L9366:
1874	.95fa		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
1875	.95fd						callOSFILEWithOSFILEParameterBlock:
1876	.95fd		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
1877	.95ff		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1878	.9601		68		pla		                pla
1879	.9602		4c dd ff	jmp $ffdd	                jmp OSFILE

1881							;-------------------------------------------------------------------------
1882							;
1883							; *REMOVE [MasRef G.5-9]
1884							;
1885	.9605						starREMOVE:
1886	.9605		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
1887	.9608		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
1888							                .if version>=510||version==350
1899							                .endif
1900	.960b		a9 06		lda #$06	                lda #fileDelete
1901	.960d		48		pha		                pha
1902	.960e		80 ed		bra $95fd	                bra callOSFILEWithOSFILEParameterBlock

1904							;-------------------------------------------------------------------------
1905							                .if version<510&&version!=350
1906							;
1907							; *CLOSE [MasRef G.5-3]
1908							;
1909	.9610						starCLOSE:
1910	.9610		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
1911	.9613		d0 61		bne $9676	                bne badCommandError93E2
1912	.9615		a9 00		lda #$00	                lda #$00
1913	.9617		a8		tay		                tay
1914	.9618		6c 1c 02	jmp ($021c)	                jmp (FINDV)                  ;OSFIND A=0 Y=0
1915							                .endif
1916							;-------------------------------------------------------------------------
1917							                .if version<510&&version!=350
1918							;
1919							; *IGNORE [MasRef C.5-7]
1920							;
1921	.961b						starIGNORE:
1922	.961b		d0 05		bne $9622	                bne L938E
1923	.961d		38		sec		                sec
1924	.961e		6e 46 02	ror $0246	                ror noignoreState
1925	.9621		60		rts		                rts

1927	.9622						L938E:
1928	.9622		a9 06		lda #$06	                lda #$06
1929	.9624		80 59		bra $967f	                bra starCommandThroughOSBYTE
1930							                .endif
1931							;-------------------------------------------------------------------------

1933	.9626						finishStarSAVE:
1934	.9626		d0 07		bne $962f	                bne L939B
1935	.9628		a2 0a		ldx #$0a	                ldx #OSFILEParameterBlock.saveStart
1936	.962a		20 5d 95	jsr $955d	                jsr parseHexAddressFromString
1937	.962d		90 47		bcc $9676	                bcc badCommandError93E2
1938	.962f						L939B:
1939	.962f		b8		clv		                clv
1940	.9630		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
1941	.9632		c9 2b		cmp #$2b	                cmp #'+'
1942	.9634		d0 04		bne $963a	                bne L93A6                    ;taken if "*SAVE START END..."
1943	.9636		2c 5e e3	bit $e35e	                bit mos.valueFF              ;V=1
1944	.9639		c8		iny		                iny
1945	.963a						L93A6:
1946	.963a		a2 0e		ldx #$0e	                ldx #OSFILEParameterBlock.saveEnd
1947	.963c		20 5d 95	jsr $955d	                jsr parseHexAddressFromString
1948	.963f		90 35		bcc $9676	                bcc badCommandError93E2
1949	.9641		08		php		                php
1950	.9642		50 0f		bvc $9653	                bvc L93BF                    ;taken if "*SAVE START END"

1952							                ; Get the save end address.
1953	.9644		a2 fc		ldx #$fc	                ldx #256-4
1954	.9646		18		clc		                clc
1955	.9647						-
1956							                ; TODO - not sure why the @w notation is required here?
1957	.9647		bd fb 01	lda $01fb,x	                lda@w osfileParameterBlock+OSFILEParameterBlock.saveStart-(256-4),x
1958	.964a		7d ff 01	adc $01ff,x	                adc@w osfileParameterBlock+OSFILEParameterBlock.saveEnd-(256-4),x
1959	.964d		9d ff 01	sta $01ff,x	                sta@w osfileParameterBlock+OSFILEParameterBlock.saveEnd-(256-4),x
1960	.9650		e8		inx		                inx
1961	.9651		d0 f4		bne $9647	                bne -
1962	.9653						L93BF:

1964							                ; Initialize load and exec addresses to save start
1965							                ; address.
1966	.9653		a2 03		ldx #$03	                ldx #$03
1967	.9655						-
1968	.9655		bd f7 02	lda $02f7,x	                lda@w osfileParameterBlock+OSFILEParameterBlock.saveStart,x
1969	.9658		9d f3 02	sta $02f3,x	                sta@w osfileParameterBlock+OSFILEParameterBlock.exec,x
1970	.965b		9d ef 02	sta $02ef,x	                sta@w osfileParameterBlock+OSFILEParameterBlock.load,x
1971	.965e		ca		dex		                dex
1972	.965f		10 f4		bpl $9655	                bpl -

1974	.9661		28		plp		                plp
1975	.9662		f0 96		beq $95fa	                beq L9366

1977	.9664		a2 06		ldx #$06	                ldx #OSFILEParameterBlock.exec
1978	.9666		20 5d 95	jsr $955d	                jsr parseHexAddressFromString
1979	.9669		90 0b		bcc $9676	                bcc badCommandError93E2
1980	.966b		f0 8d		beq $95fa	                beq L9366

1982	.966d		a2 02		ldx #$02	                ldx #OSFILEParameterBlock.load
1983	.966f		20 5d 95	jsr $955d	                jsr parseHexAddressFromString
1984	.9672		90 02		bcc $9676	                bcc badCommandError93E2
1985	.9674		f0 84		beq $95fa	                beq L9366

1987	.9676						badCommandError93E2:
1988	.9676		4c bd fa	jmp $fabd	                jmp mos.badCommandError

1990							;-------------------------------------------------------------------------

1992	.9679						starFX:
1993	.9679		20 fb 85	jsr $85fb	                jsr parseNumberFromString
1994	.967c		90 f8		bcc $9676	                bcc badCommandError93E2
1995	.967e		8a		txa		                txa
1996	.967f						starCommandThroughOSBYTE:
1997	.967f		08		php		                php
1998	.9680		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
1999	.9683		28		plp		                plp
2000	.9684		48		pha		                pha
2001	.9685		64 e5		stz $e5		                stz $E5
2002	.9687		64 e4		stz $e4		                stz $E4
2003	.9689		20 f7 f0	jsr $f0f7	                jsr mos.LF308
2004	.968c		f0 18		beq $96a6	                beq L9412
2005	.968e		20 fb 85	jsr $85fb	                jsr parseNumberFromString
2006	.9691		90 e3		bcc $9676	                bcc badCommandError93E2
2007	.9693		86 e5		stx $e5		                stx $E5
2008	.9695		20 f9 f0	jsr $f0f9	                jsr mos.LF30A
2009	.9698		f0 0c		beq $96a6	                beq L9412
2010	.969a		20 fb 85	jsr $85fb	                jsr parseNumberFromString
2011	.969d		90 d7		bcc $9676	                bcc badCommandError93E2
2012	.969f		86 e4		stx $e4		                stx $E4
2013	.96a1		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
2014	.96a4						L9625:
2015	.96a4		d0 d0		bne $9676	                bne badCommandError93E2
2016	.96a6						L9412:
2017	.96a6		a4 e4		ldy $e4		                ldy $E4
2018	.96a8		a6 e5		ldx $e5		                ldx $E5
2019	.96aa		68		pla		                pla
2020	.96ab		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
2021	.96ae		20 f4 ff	jsr $fff4	                jsr OSBYTE
2022	.96b1		70 c3		bvs $9676	                bvs badCommandError93E2
2023	.96b3						L941F:
2024	.96b3		60		rts		                rts

2026							;-------------------------------------------------------------------------

2028	.96b4						starSPOOLON:
2029	.96b4		38		sec		                sec
2030	.96b5		80 10		bra $96c7	                bra starSPOOL

2032							;-------------------------------------------------------------------------

2034							                .if version>=510||version==350
2039							                .endif

2041							;-------------------------------------------------------------------------

2043	.96b7						L9423:
2044	.96b7		a2 10		ldx #$10	                ldx #romServiceCallSpoolExecClosureWarning
2045	.96b9		20 52 ec	jsr $ec52	                jsr mos.makeROMServiceCall
2046	.96bc		f0 f5		beq $96b3	                beq L941F
2047	.96be		20 43 ac	jsr $ac43	                jsr LA58B
2048	.96c1		ad 57 02	lda $0257	                lda spoolFileHandle
2049	.96c4		20 23 ac	jsr $ac23	                jsr LA56B
2050	.96c7						starSPOOL:
2051	.96c7		08		php		                php
2052	.96c8		5a		phy		                phy
2053	.96c9		ac 57 02	ldy $0257	                ldy spoolFileHandle
2054	.96cc		8d 57 02	sta $0257	                sta spoolFileHandle
2055	.96cf		f0 03		beq $96d4	                beq L9440
2056	.96d1		20 ce ff	jsr $ffce	                jsr OSFIND
2057	.96d4						L9440:
2058	.96d4		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
2059	.96d7		7a		ply		                ply
2060	.96d8		28		plp		                plp
2061	.96d9		f0 d8		beq $96b3	                beq L941F
2062	.96db		a9 80		lda #$80	                lda #$80
2063	.96dd		90 02		bcc $96e1	                bcc L944D
2064	.96df		a9 c0		lda #$c0	                lda #$C0
2065	.96e1						L944D:
2066	.96e1		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
2067	.96e4		20 ce ff	jsr $ffce	                jsr OSFIND
2068	.96e7		a8		tay		                tay
2069	.96e8		f0 8c		beq $9676	                beq badCommandError93E2
2070	.96ea		8d 57 02	sta $0257	                sta spoolFileHandle
2071	.96ed		a8		tay		                tay
2072	.96ee						setPTRToEOF:
2073	.96ee		a9 02		lda #$02	                lda #argsFileGetEXT
2074	.96f0		20 f5 96	jsr $96f5	                jsr callOSARGSWithBuffer
2075	.96f3						setFilePointerFromOSARGSBuffer:
2076	.96f3		a9 01		lda #$01	                lda #argsFileSetPTR
2077	.96f5						callOSARGSWithBuffer:
2078	.96f5		a2 a8		ldx #$a8	                ldx #osargsBuffer
2079	.96f7		4c da ff	jmp $ffda	                jmp OSARGS

2081							;-------------------------------------------------------------------------

2083							                .if version<510&&version!=350
2084	.96fa						starSHADOW:
2085	.96fa		a9 72		lda #$72	                lda #$72
2086	.96fc		80 81		bra $967f	                bra starCommandThroughOSBYTE
2087							                .endif

2089							;-------------------------------------------------------------------------

2091							                .if version>=510||version==350
2098							                .endif

2100							;-------------------------------------------------------------------------

2102							                .if version>=510||version==350
2112							                .endif

2114							;-------------------------------------------------------------------------
2115							;
2116	.96fe						starDELETE:
2117	.96fe		20 05 96	jsr $9605	                jsr starREMOVE
2118	.9701		a8		tay		                tay
2119	.9702		d0 af		bne $96b3	                bne L941F
2120	.9704		4c 05 ac	jmp $ac05	                jmp notFoundError

2122							;-------------------------------------------------------------------------

2124							                .if version==350
2127							                .endif

2129							;-------------------------------------------------------------------------

2131							                .if version==350
2146							                .endif

2148							;-------------------------------------------------------------------------

2150							                .if version>=510||version==350
2177							                .endif

2179							;-------------------------------------------------------------------------

2181							                .if version<510&&version!=350
2182	.9707						parseSoftKeyNumberFromCommandLine:
2183	.9707		20 fb 85	jsr $85fb	                jsr parseNumberFromString
2184	.970a		90 04		bcc $9710	                bcc badKeyError
2185	.970c		e0 10		cpx #$10	                cpx #softKeyCount
2186	.970e		90 a3		bcc $96b3	                bcc L941F
2187	.9710						badKeyError:
2188	.9710		20 23 b0	jsr $b023	                jsr doFollowingError
2189	>9713		fb				                .byte $FB
2190	>9714		42 61 64 20 6b 65 79		                .text "Bad key"
2191	>971b		00				                .byte 0
2192							                .endif

2194							;-------------------------------------------------------------------------
2195							;
2196							; [MasRef C.5-11]
2197							;

2199							                .if version<510&&version!=350
2200	.971c						starSHOW:
2201	.971c		20 07 97	jsr $9707	                jsr parseSoftKeyNumberFromCommandLine
2202	.971f		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
2203	.9722		d0 ec		bne $9710	                bne badKeyError
2206							                .endif
2207	.9724		a9 22		lda #$22	                lda #'"'
2208	.9726		20 ee ff	jsr $ffee	                jsr OSWRCH
2209	.9729		a5 f4		lda $f4		                lda $F4
2210	.972b		48		pha		                pha
2211	.972c		20 a5 e5	jsr $e5a5	                jsr mos.selectTerminalROMAndANDY2
2212	.972f		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2213	.9732		85 f2		sta $f2		                sta stringInputBufferAddress+0
2214	.9734		bd 11 80	lda $8011,x	                lda andy.softKeys.stringMSBs,x
2215	.9737		85 f3		sta $f3		                sta stringInputBufferAddress+1
2216							                .if version<510&&version!=350
2217	.9739		a4 e6		ldy $e6		                ldy $E6
2221							                .endif
2222	.973b		20 e0 e9	jsr $e9e0	                jsr mos.getSoftKeyStringLength
2223	.973e		a8		tay		                tay                          ;Y = string length
2224	.973f		f0 0e		beq $974f	                beq starSHOWDone                    ;done if length=0
2225	.9741						-
2226	.9741		b2 f2		lda ($f2)	                lda (stringInputBufferAddress)
2227	.9743		20 9a 98	jsr $989a	                jsr printGSREADChar
2228	.9746		e6 f2		inc $f2		                inc stringInputBufferAddress+0
2229	.9748		d0 02		bne $974c	                bne +
2230	.974a		e6 f3		inc $f3		                inc stringInputBufferAddress+1
2231	.974c						+
2232	.974c		88		dey		                dey
2233	.974d		d0 f2		bne $9741	                bne -
2234	.974f						starSHOWDone:
2235	.974f		68		pla		                pla
2236	.9750		20 9f e5	jsr $e59f	                jsr mos.selectROMA
2237	.9753		a9 22		lda #$22	                lda #'"'
2238	.9755		20 ee ff	jsr $ffee	                jsr OSWRCH
2239	.9758		4c e7 ff	jmp $ffe7	                jmp OSNEWL

2241							;-------------------------------------------------------------------------

2243							                .if version>=510
2254							                .endif

2256							;-------------------------------------------------------------------------
2257							;
2258							; [MasRef C.5-8]
2259							;
2260	.975b						starKEY: .proc
2261	.975b		20 07 97	jsr $9707	                jsr parseSoftKeyNumberFromCommandLine
2262	.975e		a5 f4		lda $f4		                lda $F4
2263	.9760		48		pha		                pha
2264	.9761		20 8c e5	jsr $e58c	                jsr mos.selectTerminalROMAndANDY
2265	.9764		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
2266	.9767		64 b0		stz $b0		                stz starKEYWorkspace.newStringLength
2267	.9769		f0 15		beq $9780	                beq commandLineTailEmpty
2268	.976b		a2 00		ldx #$00	                ldx #$00
2269	.976d		38		sec		                sec
2270	.976e		20 5d f0	jsr $f05d	                jsr mos.gsinitEntryPoint
2271	.9771						-
2272	.9771		20 6e f0	jsr $f06e	                jsr mos.gsreadEntryPoint
2273	.9774		b0 06		bcs $977c	                bcs bneBadKeyError
2274	.9776		9d 00 dc	sta $dc00,x	                sta hazel.commandLine,x
2275	.9779		e8		inx		                inx
2276	.977a		80 f5		bra $9771	                bra -

2278	.977c						bneBadKeyError:
2279							                .if version==350
2281							                .else
2282	.977c		d0 92		bne $9710	                bne badKeyError
2283							                .endif
2284	.977e		86 b0		stx $b0		                stx starKEYWorkspace.newStringLength
2285	.9780						commandLineTailEmpty:
2286	.9780		a4 e6		ldy $e6		                ldy $E6                        ;Y = soft key number
2287	.9782		20 e0 e9	jsr $e9e0	                jsr mos.getSoftKeyStringLength
2288	.9785		85 b5		sta $b5		                sta starKEYWorkspace.counter+0
2289	.9787		38		sec		                sec
2290	.9788		e5 b0		sbc $b0		                sbc starKEYWorkspace.newStringLength ;A=existing len-new len
2291	.978a		b0 16		bcs $97a2	                bcs newStringWillFit            ;taken if new string shorter, meaning it'll definitely fit

2293	.978c		49 ff		eor #$ff	                eor #$FF
2294	.978e		69 01		adc #$01	                adc #$01                     ;A=new len-existing len
2295	.9790		6d 10 80	adc $8010	                adc andy.softKeys.endLSB
2296	.9793		aa		tax		                tax
2297	.9794		ad 21 80	lda $8021	                lda andy.softKeys.endMSB
2298	.9797		69 00		adc #$00	                adc #$00
2299	.9799		c9 84		cmp #$84	                cmp #>(andy.softKeys.end)
2300	.979b		90 05		bcc $97a2	                bcc newStringWillFit

2302							                ; Produce slightly cryptic "Bad key" if string won't
2303							                ; fit.
2304	.979d		d0 dd		bne $977c	                bne bneBadKeyError
2305	.979f		8a		txa		                txa
2306	.97a0		d0 da		bne $977c	                bne bneBadKeyError
2307	.97a2						newStringWillFit:
2308	.97a2		ad 68 02	lda $0268	                lda softKeyStringLength
2309	.97a5		f0 32		beq $97d9	                beq storeNewString          ;taken if new string empty
2310	.97a7		ad c9 02	lda $02c9	                lda currentSoftKey
2311	.97aa		c5 e6		cmp $e6		                cmp $E6
2312	.97ac		90 2b		bcc $97d9	                bcc storeNewString ;taken if current soft key<key - expansion will not need to relocate
2313	.97ae		d0 0f		bne $97bf	                bne relocateCurrentSoftKeyExpansion ;taken if current soft key>key - expansion must relocate
2314	.97b0		20 23 b0	jsr $b023	                jsr doFollowingError
2315	>97b3		fa 4b 65 79 20 69 6e 20		                .text $fa,"Key in use",0
	>97bb		75 73 65 00
2316	.97bf						relocateCurrentSoftKeyExpansion:
2317	.97bf		64 b2		stz $b2		                stz starKEYWorkspace.destPtr+1
2318	.97c1		38		sec		                sec
2319	.97c2		a5 b0		lda $b0		                lda starKEYWorkspace.newStringLength
2320	.97c4		e5 b5		sbc $b5		                sbc starKEYWorkspace.counter+0
2321	.97c6		85 b1		sta $b1		                sta starKEYWorkspace.destPtr+0
2322	.97c8		b0 02		bcs $97cc	                bcs +
2323	.97ca		c6 b2		dec $b2		                dec starKEYWorkspace.destPtr+1
2324	.97cc						+
2325	.97cc		18		clc		                clc
2326	.97cd		a5 f8		lda $f8		                lda softKeyExpansionPtr+0
2327	.97cf		65 b1		adc $b1		                adc starKEYWorkspace.destPtr+0
2328	.97d1		85 f8		sta $f8		                sta softKeyExpansionPtr+0
2329	.97d3		a5 f9		lda $f9		                lda softKeyExpansionPtr+1
2330	.97d5		65 b2		adc $b2		                adc starKEYWorkspace.destPtr+1
2331	.97d7		85 f9		sta $f9		                sta softKeyExpansionPtr+1
2332	.97d9						storeNewString:
2333	.97d9		ce 84 02	dec $0284	                dec softKeyConsistencyFlag   ;mark soft keys inconsistent
2334	.97dc		a6 e6		ldx $e6		                ldx $E6                      ;X=key number
2335	.97de		a5 b5		lda $b5		                lda starKEYWorkspace.counter+0
2336	.97e0		f0 45		beq $9827	                beq makeSpaceForNewString ;taken if no existing string for this soft key

2338							                ; delete existing string
2339	.97e2		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2340	.97e5		85 b1		sta $b1		                sta starKEYWorkspace.destPtr+0
2341	.97e7		bd 11 80	lda $8011,x	                lda andy.softKeys.stringMSBs,x
2342	.97ea		85 b2		sta $b2		                sta starKEYWorkspace.destPtr+1
2343	.97ec		bd 01 80	lda $8001,x	                lda andy.softKeys.stringLSBs+1,x
2344	.97ef		85 b3		sta $b3		                sta starKEYWorkspace.srcPtr+0
2345	.97f1		bd 12 80	lda $8012,x	                lda andy.softKeys.stringMSBs+1,x
2346	.97f4		85 b4		sta $b4		                sta starKEYWorkspace.srcPtr+1
2347	.97f6						deleteExistingStringLoop:
2348							                ; copy byte (with postincrement)
2349	.97f6		b2 b3		lda ($b3)	                lda (starKEYWorkspace.srcPtr)
2350	.97f8		92 b1		sta ($b1)	                sta (starKEYWorkspace.destPtr)

2352							                ; increment destPtr
2353	.97fa		e6 b1		inc $b1		                inc starKEYWorkspace.destPtr+0
2354	.97fc		d0 02		bne $9800	                bne +
2355	.97fe		e6 b2		inc $b2		                inc starKEYWorkspace.destPtr+1
2356	.9800						+

2358							                ; increment srcPtr
2359	.9800		e6 b3		inc $b3		                inc starKEYWorkspace.srcPtr+0
2360	.9802		d0 02		bne $9806	                bne +
2361	.9804		e6 b4		inc $b4		                inc starKEYWorkspace.srcPtr+1
2362	.9806						+

2364							                ; keep copying until end of buffer reached.
2365	.9806		a5 b3		lda $b3		                lda starKEYWorkspace.srcPtr+0
2366	.9808		cd 10 80	cmp $8010	                cmp andy.softKeys.endLSB
2367	.980b		a5 b4		lda $b4		                lda starKEYWorkspace.srcPtr+1
2368	.980d		ed 21 80	sbc $8021	                sbc andy.softKeys.endMSB
2369	.9810		90 e4		bcc $97f6	                bcc deleteExistingStringLoop

2371							                ; update following strings' start addresses, which all
2372							                ; move down by the old string's length.
2373	.9812						updateAddressesLoop:
2374	.9812		e8		inx		                inx
2375	.9813		e0 11		cpx #$11	                cpx #softKeyCount+1
2376	.9815		b0 10		bcs $9827	                bcs makeSpaceForNewString
2377	.9817		38		sec		                sec
2378	.9818		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2379	.981b		e5 b5		sbc $b5		                sbc starKEYWorkspace.counter+0
2380	.981d		9d 00 80	sta $8000,x	                sta andy.softKeys.stringLSBs,x
2381	.9820		b0 f0		bcs $9812	                bcs updateAddressesLoop
2382	.9822		de 11 80	dec $8011,x	                dec andy.softKeys.stringMSBs,x
2383	.9825		80 eb		bra $9812	                bra updateAddressesLoop

2385	.9827						makeSpaceForNewString:
2386	.9827		a6 e6		ldx $e6		                ldx $E6
2387	.9829		a5 b0		lda $b0		                lda starKEYWorkspace.newStringLength
2388	.982b		f0 66		beq $9893	                beq done
2389	.982d		ad 10 80	lda $8010	                lda andy.softKeys.endLSB
2390	.9830		85 b3		sta $b3		                sta starKEYWorkspace.srcPtr+0
2391	.9832		18		clc		                clc
2392	.9833		65 b0		adc $b0		                adc starKEYWorkspace.newStringLength
2393	.9835		85 b1		sta $b1		                sta starKEYWorkspace.destPtr+0 ;new end ptr LSB
2394	.9837		ad 21 80	lda $8021	                lda andy.softKeys.endMSB
2395	.983a		85 b4		sta $b4		                sta starKEYWorkspace.srcPtr+1
2396	.983c		69 00		adc #$00	                adc #$00
2397	.983e		85 b2		sta $b2		                sta starKEYWorkspace.destPtr+1 ;new end ptr MSB
2398	.9840		a5 b3		lda $b3		                lda starKEYWorkspace.srcPtr+0
2399	.9842		38		sec		                sec
2400	.9843		fd 00 80	sbc $8000,x	                sbc andy.softKeys.stringLSBs,x
2401	.9846		85 b5		sta $b5		                sta starKEYWorkspace.counter+0
2402	.9848		a5 b4		lda $b4		                lda starKEYWorkspace.srcPtr+1
2403	.984a		fd 11 80	sbc $8011,x	                sbc andy.softKeys.stringMSBs,x
2404	.984d		85 b6		sta $b6		                sta starKEYWorkspace.counter+1
2405	.984f						makeSpaceForNewStringLoop:
2406							                ; loop while counter>0
2407	.984f		a5 b5		lda $b5		                lda starKEYWorkspace.counter+0
2408	.9851		05 b6		ora $b6		                ora starKEYWorkspace.counter+1
2409	.9853		f0 1e		beq $9873	                beq updateAddressesLoop2

2411							                ; decrement destPtr
2412	.9855		a5 b1		lda $b1		                lda starKEYWorkspace.destPtr+0
2413	.9857		d0 02		bne $985b	                bne +
2414	.9859		c6 b2		dec $b2		                dec starKEYWorkspace.destPtr+1
2415	.985b						+
2416	.985b		c6 b1		dec $b1		                dec starKEYWorkspace.destPtr+0

2418							                ; decrement srcPtr
2419	.985d		a5 b3		lda $b3		                lda starKEYWorkspace.srcPtr+0
2420	.985f		d0 02		bne $9863	                bne +
2421	.9861		c6 b4		dec $b4		                dec starKEYWorkspace.srcPtr+1
2422	.9863						+
2423	.9863		c6 b3		dec $b3		                dec starKEYWorkspace.srcPtr+0

2425							                ; copy byte (with predecrement)
2426	.9865		b2 b3		lda ($b3)	                lda (starKEYWorkspace.srcPtr)
2427	.9867		92 b1		sta ($b1)	                sta (starKEYWorkspace.destPtr)

2429							                ; decrement counter
2430	.9869		a5 b5		lda $b5		                lda starKEYWorkspace.counter+0
2431	.986b		d0 02		bne $986f	                bne +
2432	.986d		c6 b6		dec $b6		                dec starKEYWorkspace.counter+1
2433	.986f						+
2434	.986f		c6 b5		dec $b5		                dec starKEYWorkspace.counter+0

2436	.9871		80 dc		bra $984f	                bra makeSpaceForNewStringLoop

2438							                ; update following strings' start addresses, which all
2439							                ; move up by the new string's length.
2440	.9873						updateAddressesLoop2:
2441	.9873		e8		inx		                inx
2442	.9874		e0 11		cpx #$11	                cpx #softKeyCount+1
2443	.9876		b0 0f		bcs $9887	                bcs copyNewString
2444	.9878		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2445	.987b		65 b0		adc $b0		                adc starKEYWorkspace.newStringLength
2446	.987d		9d 00 80	sta $8000,x	                sta andy.softKeys.stringLSBs,x
2447	.9880		90 f1		bcc $9873	                bcc updateAddressesLoop2
2448	.9882		fe 11 80	inc $8011,x	                inc andy.softKeys.stringMSBs,x
2449	.9885		80 ec		bra $9873	                bra updateAddressesLoop2

2451	.9887						copyNewString:
2452	.9887		a0 00		ldy #$00	                ldy #$00
2453	.9889						copyNewStringLoop:
2454	.9889		b9 00 dc	lda $dc00,y	                lda hazel.commandLine,y
2455	.988c		91 b3		sta ($b3),y	                sta (starKEYWorkspace.srcPtr),y
2456	.988e		c8		iny		                iny
2457	.988f		c6 b0		dec $b0		                dec starKEYWorkspace.newStringLength
2458	.9891		d0 f6		bne $9889	                bne copyNewStringLoop
2459	.9893						done:
2460	.9893		ee 84 02	inc $0284	                inc softKeyConsistencyFlag   ;mark soft keys consistent
2461	.9896		68		pla		                pla
2462	.9897		4c 9f e5	jmp $e59f	                jmp mos.selectROMA
2463							                .endproc

2465							;-------------------------------------------------------------------------
2466							;
2467							; Print char, printing control codes using the string reader escape
2468							; syntax. [MasRef C.5-8]
2469							;
2470	.989a						printGSREADChar: .proc
2471	.989a		aa		tax		                tax                          ;X=char
2472	.989b		30 28		bmi $98c5	                bmi printHighBitChar
2473	.989d		c9 20		cmp #$20	                cmp #$20
2474	.989f		90 1f		bcc $98c0	                bcc printControlChar
2475	.98a1		e8		inx		                inx
2476	.98a2		30 0f		bmi $98b3	                bmi vdu127
2477	.98a4		ca		dex		                dex                          ;restore old char
2478	.98a5		c9 22		cmp #$22	                cmp #'"'
2479	.98a7		f0 11		beq $98ba	                beq printEscapedX
2480	.98a9		c9 7c		cmp #$7c	                cmp #'|'
2481	.98ab		d0 03		bne $98b0	                bne printA
2482							                ; print "||"
2483	.98ad		20 ee ff	jsr $ffee	                jsr OSWRCH
2484	.98b0						printA:
2485	.98b0		4c ee ff	jmp $ffee	                jmp OSWRCH

2487	.98b3						vdu127:
2488							                ; print "|?"
2489	.98b3		20 d0 98	jsr $98d0	                jsr printEscapeChar
2490	.98b6		a9 3f		lda #$3f	                lda #'?'
2491	.98b8		80 f6		bra $98b0	                bra printA

2493	.98ba						printEscapedX:
2494	.98ba		20 d0 98	jsr $98d0	                jsr printEscapeChar
2495	.98bd		8a		txa		                txa
2496	.98be		80 f0		bra $98b0	                bra printA

2498	.98c0						printControlChar:
2499	.98c0		09 40		ora #$40	                ora #$40
2500	.98c2		aa		tax		                tax
2501	.98c3		80 f5		bra $98ba	                bra printEscapedX

2503	.98c5						printHighBitChar:
2504	.98c5		48		pha		                pha
2505	.98c6		a2 21		ldx #$21	                ldx #'!'
2506	.98c8		20 ba 98	jsr $98ba	                jsr printEscapedX
2507	.98cb		68		pla		                pla
2508	.98cc		29 7f		and #$7f	                and #$7F
2509	.98ce		80 ca		bra $989a	                bra printGSREADChar

2511	.98d0						printEscapeChar:
2512	.98d0		a9 7c		lda #$7c	                lda #'|'
2513	.98d2		80 dc		bra $98b0	                bra printA
2514							                .endproc

2516							;-------------------------------------------------------------------------

2518							                .if version!=350
2519							                .include "rtc.s65"

:10	;******  Processing file: src/rtc.s65

1							                .if version<500
2							; Day string not matched
3							; ----------------------
4	.98d4						nextDayString:
5	.98d4		68		pla		                pla                          ; Drop number of characters matched
6	.98d5		68		pla		                pla                          ; Get offset to string table
7	.98d6		7a		ply		                ply                          ; Get start of supplied string
8	.98d7		18		clc		                clc                          ; Step to next string table entry
9	.98d8		69 04		adc #$04	                adc #$04
10	.98da		c9 1c		cmp #$1c	                cmp #size(dayOfWeekStrings) ; If not checked 28/4=7 entries, keep looking
11	.98dc		90 1c		bcc $98fa	                bcc checkDayString
12	.98de		60		rts		                rts                          ; Otherwise exit silently

14							; Month string not matched
15							; ------------------------
16	.98df						nextMonthString:
17	.98df		68		pla		                pla                          ; Drop number of characters matched
18	.98e0		68		pla		                pla                          ; Get offset to string table
19	.98e1		7a		ply		                ply                          ; Get start of supplied string
20	.98e2		18		clc		                clc                          ; Step to next string table entry
21	.98e3		69 04		adc #$04	                adc #$04
22	.98e5		c9 30		cmp #$30	                cmp #size(monthStrings) ; If not checked 48/4=12 entries, keep looking
23	.98e7		90 43		bcc $992c	                bcc checkMonthString
24	.98e9						rts9655:
25	.98e9		60		rts		                rts                          ; Otherwise exit silently

27							;-------------------------------------------------------------------------
28							;
29							; OSWORD 15 (&0F) Write CMOS clock [MasRef D.3-24]
30							;
31	.98ea						osword0F:
32	.98ea		9c ed 02	stz $02ed	                stz osfileParameterBlock     ;got no time, got no date
33	.98ed		49 0f		eor #$0f	                eor #15                     ; len=15, set date
34	.98ef		f0 08		beq $98f9	                beq setDate
35	.98f1		49 07		eor #$07	                eor #15^8
36	.98f3		f0 76		beq $996b	                beq setTime
37	.98f5		49 10		eor #$10	                eor #(15^8)^23
38	.98f7		d0 f0		bne $98e9	                bne rts9655

40							; Set date and set date+time
41							; --------------------------
42							; (&F0),1=>"Day,00 Mon 0000"
43							; (&F0),1=>"Day,00 Mon 0000.00:00:00"
44							; A=0, Y=0
45	.98f9						setDate:
46	.98f9		c8		iny		                iny                          ; Point to supplied data
47							; Translate day string into day number
48	.98fa						checkDayString:
49	.98fa		5a		phy		                phy                          ; Push pointer to data string
50	.98fb		48		pha		                pha                          ; Push offset to match strings
51	.98fc		aa		tax		                tax                          ; X=>match strings
52	.98fd		a9 03		lda #$03	                lda #$03                     ; A=3 characters to match
53	.98ff						checkDayStringLoop:
54	.98ff		48		pha		                pha                          ; Save number of characters to match
55	.9900		b1 f0		lda ($f0),y	                lda (originalX),y      ; Get character from string
56	.9902		5d fc 99	eor $99fc,x	                eor dayOfWeekStrings,x ; Compare with day string table
57	.9905		29 df		and #$df	                and #$DF                     ; Force to upper case
58	.9907		d0 cb		bne $98d4	                bne nextDayString  ; No match step to check next entry
59	.9909		e8		inx		                inx                          ; Step to next character to match
60	.990a		c8		iny		                iny                          ; Step to next data character
61	.990b		68		pla		                pla                          ; Get character count back
62	.990c		3a		dec a		                dec a                        ; Decrement and loop until 3 characters matched
63	.990d		d0 f0		bne $98ff	                bne checkDayStringLoop
64	.990f		bd fc 99	lda $99fc,x	                lda dayOfWeekStrings,x ; Get translation byte from string table
65	.9912		8d f4 02	sta $02f4	                sta osfileParameterBlock+1+RTC.dayOfWeek ; Store it in workspace
66							; Translates Sun,Mon,Tue,etc to &01,&02,&03,etc
67	.9915		fa		plx		                plx                          ; Drop char count and table offset
68	.9916		fa		plx		                plx
69	.9917		b1 f0		lda ($f0),y	                lda ($F0),y                  ; Get next character
70	.9919		c9 2c		cmp #$2c	                cmp #','                     ; Not followed by a comma, so exit silently
71	.991b		d0 cc		bne $98e9	                bne rts9655
72	.991d		a2 07		ldx #$07	                ldx #$07                     ; Get day of month
73	.991f		20 c4 99	jsr $99c4	                jsr readDecimalBCDByte
74	.9922		90 c5		bcc $98e9	                bcc rts9655                    ; Bad number, exit silently
75	.9924		c8		iny		                iny                          ; Get next character
76	.9925		b1 f0		lda ($f0),y	                lda ($F0),y
77	.9927		49 20		eor #$20	                eor #' '                     ; Not space, exit silently
78	.9929		d0 be		bne $98e9	                bne rts9655
79	.992b		c8		iny		                iny                          ; Step to first character of month
80							; Translate month string into month number
81							; This could use the same code as the Day translation
82	.992c						checkMonthString:
83	.992c		5a		phy		                phy                          ; Push pointer to data string
84	.992d		48		pha		                pha                          ; Push offset to match strings
85	.992e		aa		tax		                tax                          ; X=>match strings
86	.992f		a9 03		lda #$03	                lda #$03                     ; A=3 characters to match
87	.9931						checkMonthStringLoop:
88	.9931		48		pha		                pha
89	.9932		b1 f0		lda ($f0),y	                lda (originalX),y
90	.9934		5d 18 9a	eor $9a18,x	                eor monthStrings,x
91	.9937		29 df		and #$df	                and #$DF
92	.9939		d0 a4		bne $98df	                bne nextMonthString
93	.993b		e8		inx		                inx
94	.993c		c8		iny		                iny
95	.993d		68		pla		                pla
96	.993e		3a		dec a		                dec a
97	.993f		d0 f0		bne $9931	                bne checkMonthStringLoop
98	.9941		bd 18 9a	lda $9a18,x	                lda monthStrings,x
99	.9944		8d f6 02	sta $02f6	                sta osfileParameterBlock+1+RTC.month
100							; Translates Jan,Feb,Mar,etc to &01,&02,&03,etc..&09,&10,&11,&12
101	.9947		fa		plx		                plx                          ; Drop char count and table offset
102	.9948		fa		plx		                plx
103	.9949		b1 f0		lda ($f0),y	                lda ($F0),y                  ; Get next character
104	.994b		c9 20		cmp #$20	                cmp #' '                     ; Not followed by space, exit silently
105	.994d		d0 9a		bne $98e9	                bne rts9655
106	.994f		a2 09		ldx #$09	                ldx #RTC.year
107	.9951		20 c4 99	jsr $99c4	                jsr readDecimalBCDByte
108	.9954		90 93		bcc $98e9	                bcc rts9655                    ; Bad number, exit silently
109	.9956		20 c4 99	jsr $99c4	                jsr readDecimalBCDByte                    ; Get year number
110	.9959		90 8e		bcc $98e9	                bcc rts9655                    ; Bad number, exit silently
111	.995b		6e ed 02	ror $02ed	                ror osfileParameterBlock+0     ;got date
112	.995e		b2 f0		lda ($f0)	                lda (originalX)        ; Get data length
113	.9960		c9 0f		cmp #$0f	                cmp #$0F                     ; len=15, jump to just set date
114	.9962		f0 2f		beq $9993	                beq setRTCDate
115							; Must be len=24 to set date+time
116	.9964		c8		iny		                iny                          ; Get next character
117	.9965		b1 f0		lda ($f0),y	                lda (originalX),y
118	.9967		c9 2e		cmp #$2e	                cmp #'.'                     ; If not full stop, exit silently
119	.9969		d0 7c		bne $99e7	                bne rts9753

121	.996b						setTime:
122	.996b		a2 04		ldx #$04	                ldx #RTC.hours
123	.996d		20 c4 99	jsr $99c4	                jsr readDecimalBCDByte
124	.9970		90 75		bcc $99e7	                bcc rts9753
125	.9972		c8		iny		                iny
126	.9973		b1 f0		lda ($f0),y	                lda (originalX),y
127	.9975		c9 3a		cmp #$3a	                cmp #':'
128	.9977		d0 6e		bne $99e7	                bne rts9753
129	.9979		a2 02		ldx #$02	                ldx #RTC.minutes
130	.997b		20 c4 99	jsr $99c4	                jsr readDecimalBCDByte
131	.997e		90 67		bcc $99e7	                bcc rts9753
132	.9980		c8		iny		                iny
133	.9981		b1 f0		lda ($f0),y	                lda (originalX),y
134	.9983		c9 3a		cmp #$3a	                cmp #':'
135	.9985		d0 60		bne $99e7	                bne rts9753
136	.9987		a2 00		ldx #$00	                ldx #RTC.seconds
137	.9989		20 c4 99	jsr $99c4	                jsr readDecimalBCDByte
138	.998c		90 59		bcc $99e7	                bcc rts9753
139	.998e		a9 40		lda #$40	                lda #$40
140	.9990		0c ed 02	tsb $02ed	                tsb osfileParameterBlock+0   ;got time
141	.9993						setRTCDate:
142	.9993		58		cli		                cli
143	.9994		78		sei		                sei
144	.9995		a0 83		ldy #$83	                ldy #RTC.b.set|RTC.b._24h|RTC.b.dse
145	.9997		a2 0b		ldx #$0b	                ldx #RTC.b
146	.9999		20 78 9b	jsr $9b78	                jsr writeRTCByte
147	.999c		2c ed 02	bit $02ed	                bit osfileParameterBlock+0 ;N=1 if got date; V=1 if got time
148	.999f		10 0f		bpl $99b0	                bpl setRTCTime ;taken if not got date - must then have time
149	.99a1		a2 06		ldx #$06	                ldx #$06
150	.99a3						-
151	.99a3		bc ee 02	ldy $02ee,x	                ldy osfileParameterBlock+1,x
152	.99a6		20 78 9b	jsr $9b78	                jsr writeRTCByte
153	.99a9		e8		inx		                inx
154	.99aa		e0 0a		cpx #$0a	                cpx #RTC.a
155	.99ac		90 f5		bcc $99a3	                bcc -
156	.99ae		50 0d		bvc $99bd	                bvc finishRTCUpdate                    ;taken if not got date
157	.99b0						setRTCTime:
158	.99b0		a2 00		ldx #$00	                ldx #RTC.seconds
159	.99b2						-
160	.99b2		bc ee 02	ldy $02ee,x	                ldy osfileParameterBlock+1,x
161	.99b5		20 78 9b	jsr $9b78	                jsr writeRTCByte
162	.99b8		e8		inx		                inx
163	.99b9		e0 06		cpx #$06	                cpx #RTC.dayOfWeek
164	.99bb		90 f5		bcc $99b2	                bcc -
165	.99bd						finishRTCUpdate:
166	.99bd		a2 0b		ldx #$0b	                ldx #RTC.b
167	.99bf		a0 02		ldy #$02	                ldy #RTC.b._24h
168	.99c1		4c 78 9b	jmp $9b78	                jmp writeRTCByte

170	.99c4						readDecimalBCDByte:
171	.99c4		20 e8 99	jsr $99e8	                jsr readDecimalDigit
172	.99c7		49 20		eor #$20	                eor #$20         ;check for ' '
173	.99c9		f0 04		beq $99cf	                beq +        ;taken if leading space - that's fine
174	.99cb		49 20		eor #$20	                eor #$20         ;reinstate old value
175	.99cd		90 18		bcc $99e7	                bcc rts9753      ;taken if non-space non-digits
176	.99cf						+
177	.99cf		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
178	.99d2		20 e8 99	jsr $99e8	                jsr readDecimalDigit
179	.99d5		90 10		bcc $99e7	                bcc rts9753                  ;taken if invalid digit

181							                ; rotate new digit into place
182	.99d7		5a		phy		                phy
183	.99d8		a0 04		ldy #$04	                ldy #$04
184	.99da		0a		asl a		                asl a
185	.99db		0a		asl a		                asl a
186	.99dc		0a		asl a		                asl a
187	.99dd		0a		asl a		                asl a
188	.99de						-
189	.99de		0a		asl a		                asl a
190	.99df		3e ee 02	rol $02ee,x	                rol osfileParameterBlock+1,x
191	.99e2		88		dey		                dey
192	.99e3		d0 f9		bne $99de	                bne -
193	.99e5		7a		ply		                ply
194	.99e6		38		sec		                sec
195	.99e7						rts9753:
196	.99e7		60		rts		                rts

198	.99e8						readDecimalDigit:
199	.99e8		c8		iny		                iny
200	.99e9		b1 f0		lda ($f0),y	                lda (originalX),y
201	.99eb		c9 3a		cmp #$3a	                cmp #'9'+1
202	.99ed		b0 07		bcs $99f6	                bcs notDecimalDigit
203	.99ef		c9 30		cmp #$30	                cmp #'0'
204	.99f1		90 03		bcc $99f6	                bcc notDecimalDigit
205	.99f3		29 0f		and #$0f	                and #$0F
206	.99f5		60		rts		                rts

208	.99f6						notDecimalDigit:
209	.99f6		18		clc		                clc
210	.99f7		60		rts		                rts
211							                .endif

213							;-------------------------------------------------------------------------

215							; TODO - is this necessary?
216							;
217							; There's a reference to dayOfWeekStrings-4, but that seems to be
218							; because days are 1-based. The data here is presumably never
219							; accesssed.
220	>99f8		20 20 20 00			                .text "   ",0

222							;-------------------------------------------------------------------------

224	.99fc						dayOfWeekStrings: .block
225	>99fc		53 75 6e 01			                .text "Sun",$01
226	>9a00		4d 6f 6e 02			                .text "Mon",$02
227	>9a04		54 75 65 03			                .text "Tue",$03
228	>9a08		57 65 64 04			                .text "Wed",$04
229	>9a0c		54 68 75 05			                .text "Thu",$05
230	>9a10		46 72 69 06			                .text "Fri",$06
231	>9a14		53 61 74 07			                .text "Sat",$07
232							                .endblock

234							;-------------------------------------------------------------------------

236	.9a18						monthStrings: .block
237	>9a18		4a 61 6e 01			                .text "Jan",$01
238	>9a1c		46 65 62 02			                .text "Feb",$02
239	>9a20		4d 61 72 03			                .text "Mar",$03
240	>9a24		41 70 72 04			                .text "Apr",$04
241	>9a28		4d 61 79 05			                .text "May",$05
242	>9a2c		4a 75 6e 06			                .text "Jun",$06
243	>9a30		4a 75 6c 07			                .text "Jul",$07
244	>9a34		41 75 67 08			                .text "Aug",$08
245	>9a38		53 65 70 09			                .text "Sep",$09
246	>9a3c		4f 63 74 10			                .text "Oct",$10
247	>9a40		4e 6f 76 11			                .text "Nov",$11
248	>9a44		44 65 63 12			                .text "Dec",$12
249							                .endblock

251							;-------------------------------------------------------------------------

253							                .if version>=500
262							                .endif

264							;-------------------------------------------------------------------------

266							                .if version>=500
270							                .endif

272							;-------------------------------------------------------------------------
273							;
274							; OSWORD 14 (&0E) Read CMOS clock [MasRef D.3-22]
275							;

277	.9a48						osword0E:
278							                .if version<500
279	.9a48		48		pha		                pha                          ;save reason code
280	.9a49		49 02		eor #$02	                eor #$02                     ;
281	.9a4b		d0 1b		bne $9a68	                bne readClock
325							                .endif

327							                ; Convert given time to string. Fill out the RTC temp
328							                ; data with the info from the parameter block, then
329							                ; pass on to the common code.
330	.9a4d		a0 07		ldy #$07	                ldy #$07

332							                ; Copy hours, mins, secs.
333	.9a4f		a2 00		ldx #$00	                ldx #$00
334	.9a51						-
335	.9a51		b1 f0		lda ($f0),y	                lda ($F0),y
336	.9a53		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
337	.9a56		88		dey		                dey
338	.9a57		e8		inx		                inx
339	.9a58		e8		inx		                inx
340	.9a59		e0 06		cpx #$06	                cpx #$06
341	.9a5b		90 f4		bcc $9a51	                bcc -

343							                ; Copy day of week, day of month, month, year.
344	.9a5d						-
345	.9a5d		b1 f0		lda ($f0),y	                lda (originalX),y
346	.9a5f		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
347	.9a62		e8		inx		                inx
348	.9a63		88		dey		                dey
349	.9a64		d0 f7		bne $9a5d	                bne -

351							                .if version<500
352	.9a66		80 30		bra $9a98	                bra maybeConvertToString ; (called from here, there's no maybe about it)

354	.9a68						readClock:
355	.9a68		a5 f0		lda $f0		                lda originalX
356	.9a6a		48		pha		                pha
357	.9a6b		a5 f1		lda $f1		                lda originalY
358	.9a6d		48		pha		                pha
359	.9a6e						readRTCClock:
360	.9a6e		a2 0c		ldx #$0c	                ldx #RTC.c
361	.9a70		20 4b 9b	jsr $9b4b	                jsr readRTCByte ;clear the various IRQ flags with a read of register C
362	.9a73		a2 09		ldx #$09	                ldx #RTC.year
363	.9a75						-
364	.9a75		20 4b 9b	jsr $9b4b	                jsr readRTCByte
365	.9a78		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
366	.9a7b		ca		dex		                dex
367	.9a7c		10 f7		bpl $9a75	                bpl -
368	.9a7e		a2 0a		ldx #$0a	                ldx #RTC.a
369	.9a80		20 4b 9b	jsr $9b4b	                jsr readRTCByte
370	.9a83		10 04		bpl $9a89	                bpl L97F5 ;taken if update not in progress - result is good
371	.9a85						retryReadRTCClock:
372	.9a85		58		cli		                cli
373	.9a86		78		sei		                sei
374	.9a87		80 e5		bra $9a6e	                bra readRTCClock

376	.9a89						L97F5:
377	.9a89		a2 0c		ldx #$0c	                ldx #RTC.c
378	.9a8b		20 4b 9b	jsr $9b4b	                jsr readRTCByte
379	.9a8e		29 10		and #$10	                and #RTC.c.uf
380	.9a90		d0 f3		bne $9a85	                bne retryReadRTCClock
381	.9a92		68		pla		                pla
382	.9a93		85 f1		sta $f1		                sta originalY
383	.9a95		68		pla		                pla
384	.9a96		85 f0		sta $f0		                sta originalX
385	.9a98						maybeConvertToString:
386	.9a98		68		pla		                pla                          ;get reason code
387	.9a99		3a		dec a		                dec a
388	.9a9a		d0 1a		bne $9ab6	                bne convertTimeToString                    ;taken if 0 or 2

390							                ; Copy year, month, day of month, day of week.
391	.9a9c		a0 00		ldy #$00	                ldy #$00
392	.9a9e		a2 09		ldx #$09	                ldx #RTC.year
393	.9aa0						-
394	.9aa0		bd ee 02	lda $02ee,x	                lda osfileParameterBlock+1,x
395	.9aa3		91 f0		sta ($f0),y	                sta (originalX),y
396	.9aa5		c8		iny		                iny
397	.9aa6		ca		dex		                dex
398	.9aa7		e0 06		cpx #$06	                cpx #RTC.dayOfWeek
399	.9aa9		b0 f5		bcs $9aa0	                bcs -

401							                ; Copy hours, minutes, seconds.
402	.9aab						-
403	.9aab		bd ed 02	lda $02ed,x	                lda osfileParameterBlock,x
404	.9aae		91 f0		sta ($f0),y	                sta (originalX),y
405	.9ab0		c8		iny		                iny
406	.9ab1		ca		dex		                dex
407	.9ab2		ca		dex		                dex
408	.9ab3		10 f6		bpl $9aab	                bpl -
409	.9ab5		60		rts		                rts

411							                .endif

413	.9ab6						convertTimeToString:
414							                ; Store terminating CR.
415	.9ab6		a0 18		ldy #$18	                ldy #ClockStringFormat.cr
416	.9ab8		a9 0d		lda #$0d	                lda #13
417	.9aba		91 f0		sta ($f0),y	                sta (originalX),y
418	.9abc		a2 00		ldx #$00	                ldx #$00
419	.9abe		88		dey		                dey
420	.9abf		20 24 9b	jsr $9b24	                jsr storeRTCDataByteString
421	.9ac2		a9 3a		lda #$3a	                lda #':'
422	.9ac4		91 f0		sta ($f0),y	                sta (originalX),y
423	.9ac6		a0 12		ldy #$12	                ldy #ClockStringFormat.hh+2
424	.9ac8		91 f0		sta ($f0),y	                sta (originalX),y
425	.9aca		a2 02		ldx #$02	                ldx #RTC.minutes
426	.9acc		a0 14		ldy #$14	                ldy #ClockStringFormat.mm+1
427	.9ace		20 24 9b	jsr $9b24	                jsr storeRTCDataByteString
428	.9ad1		a2 04		ldx #$04	                ldx #RTC.hours
429	.9ad3		a0 11		ldy #$11	                ldy #ClockStringFormat.hh+1
430	.9ad5		20 24 9b	jsr $9b24	                jsr storeRTCDataByteString
431	.9ad8		a9 2e		lda #$2e	                lda #'.'
432	.9ada		91 f0		sta ($f0),y	                sta (originalX),y
433	.9adc		ad f4 02	lda $02f4	                lda osfileParameterBlock+1+RTC.dayOfWeek;
434	.9adf		0a		asl a		                asl a
435	.9ae0		0a		asl a		                asl a
436	.9ae1		a0 00		ldy #$00	                ldy #$00
437	.9ae3		aa		tax		                tax
438	.9ae4						-
439	.9ae4		bd f8 99	lda $99f8,x	                lda dayOfWeekStrings-4,x     ;-4 as 1=Sunday
440	.9ae7		91 f0		sta ($f0),y	                sta (originalX),y
441	.9ae9		e8		inx		                inx
442	.9aea		c8		iny		                iny
443	.9aeb		c0 03		cpy #$03	                cpy #$03
444	.9aed		90 f5		bcc $9ae4	                bcc -
445	.9aef		a9 2c		lda #$2c	                lda #','
446	.9af1		91 f0		sta ($f0),y	                sta (originalX),y
447	.9af3		ad f6 02	lda $02f6	                lda osfileParameterBlock+1+RTC.month
448	.9af6		c9 10		cmp #$10	                cmp #$10
449	.9af8		90 02		bcc $9afc	                bcc +
450	.9afa		e9 06		sbc #$06	                sbc #$06            ;convert $10, $11 and $12 from BCD
451	.9afc						+
452	.9afc		3a		dec a		                dec a                        ;make month 0-based
453	.9afd		0a		asl a		                asl a
454	.9afe		0a		asl a		                asl a
455	.9aff		aa		tax		                tax
456	.9b00		a0 07		ldy #$07	                ldy #ClockStringFormat.mmm
457	.9b02						-
458	.9b02		bd 18 9a	lda $9a18,x	                lda monthStrings,x
459	.9b05		91 f0		sta ($f0),y	                sta ($F0),y
460	.9b07		e8		inx		                inx
461	.9b08		c8		iny		                iny
462	.9b09		c0 0a		cpy #$0a	                cpy #ClockStringFormat.mmm+3
463	.9b0b		90 f5		bcc $9b02	                bcc -
464	.9b0d		a2 09		ldx #$09	                ldx #RTC.year
465	.9b0f		a0 0e		ldy #$0e	                ldy #ClockStringFormat.yyyy+3
466	.9b11		20 24 9b	jsr $9b24	                jsr storeRTCDataByteString
467	.9b14		a9 19		lda #$19	                lda #$19                     ;it's always 19xx... right?
468	.9b16		20 27 9b	jsr $9b27	                jsr storeBCDByteString
469	.9b19		a9 20		lda #$20	                lda #$20
470	.9b1b		91 f0		sta ($f0),y	                sta ($F0),y
471	.9b1d		a0 06		ldy #$06	                ldy #ClockStringFormat.nn+2
472	.9b1f		91 f0		sta ($f0),y	                sta ($F0),y
473	.9b21		88		dey		                dey
474	.9b22		a2 07		ldx #$07	                ldx #RTC.dayOfMonth
475	.9b24						storeRTCDataByteString:
476	.9b24		bd ee 02	lda $02ee,x	                lda osfileParameterBlock+1,x
477	.9b27						storeBCDByteString:
478	.9b27		48		pha		                pha
479	.9b28		20 30 9b	jsr $9b30	                jsr storeNybbleString
480	.9b2b		68		pla		                pla
481							                .if version==350
483							                .else
484	.9b2c		4a		lsr a		                lsr a
485	.9b2d		4a		lsr a		                lsr a
486	.9b2e		4a		lsr a		                lsr a
487	.9b2f		4a		lsr a		                lsr a
488							                .endif
489	.9b30						storeNybbleString:
490	.9b30		29 0f		and #$0f	                and #$0F
491	.9b32		09 30		ora #$30	                ora #'0'
492	.9b34		c9 3a		cmp #$3a	                cmp #'9'+1
493	.9b36		90 02		bcc $9b3a	                bcc +
494	.9b38		69 06		adc #$06	                adc #('A'-'9'-1)-1           ;(-1 because C set)
495	.9b3a						+
496	.9b3a		91 f0		sta ($f0),y	                sta (originalX),y
497	.9b3c		88		dey		                dey
498	.9b3d		60		rts		                rts

500							;-------------------------------------------------------------------------

502							                .if version<500
503							                .if version==350
506							                .endif
507	.9b3e						readDefaults2:
508	.9b3e		a2 1d		ldx #$1d	                ldx #CMOSBytes.defaults2+cmosBytesOffset
509	.9b40		80 09		bra $9b4b	                bra readRTCByte
510							                .endif

512							;-------------------------------------------------------------------------

514							                .if version<500
515	.9b42						readDefaults3:
516							                .if version==350
519							                .endif
520	.9b42		a2 1e		ldx #$1e	                ldx #CMOSBytes.defaults3+cmosBytesOffset
521	.9b44		80 05		bra $9b4b	                bra readRTCByte
522							                .endif

524							;-------------------------------------------------------------------------
525							;
526							; Read byte from RTC, either by 0-based CMOS RAM offset (readCMOSByte)
527							; or by RTC register index (readRTCByte).
528							;
529							; entry:
530							;
531							; X = address to read from
532							;
533							; exit:
534							;
535							; A = byte read
536							;
537							; N,Z = set as per byte read
538							;
539							                .if version<500
540	.9b46						readCMOSByte:
541	.9b46		20 91 9b	jsr $9b91	                jsr getRTCAddressForCMOSByte
542							                .if version==350
545							                .else
546	.9b49		b0 24		bcs $9b6f	                bcs rts98DB                  ;taken if invalid address
547							                .endif
548							                .if version==350
551							                .endif
552	.9b4b						readRTCByte:
553	.9b4b		08		php		                php
554	.9b4c		78		sei		                sei
555	.9b4d		20 9a 9b	jsr $9b9a	                jsr setRTCAddress
556	.9b50		a9 49		lda #$49	                lda #$49
557	.9b52		8d 40 fe	sta $fe40	                sta systemVIA.orb
558	.9b55		9c 43 fe	stz $fe43	                stz systemVIA.ddra
559	.9b58		a9 4a		lda #$4a	                lda #$4A
560	.9b5a		8d 40 fe	sta $fe40	                sta systemVIA.orb
561	.9b5d		ac 4f fe	ldy $fe4f	                ldy systemVIA.iraNoHandshake ;read value
562	.9b60						deselectRTC:
563	.9b60		a9 42		lda #$42	                lda #$42
564	.9b62		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=0
565	.9b65		a9 02		lda #$02	                lda #$02
566	.9b67		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=0 DS=0 R=0
567	.9b6a		9c 43 fe	stz $fe43	                stz systemVIA.ddra           ;all bits inputs
568	.9b6d		28		plp		                plp
569	.9b6e		98		tya		                tya
570	.9b6f						rts98DB:
571	.9b6f		60		rts		                rts
572							                .endif

574							;-------------------------------------------------------------------------
575							;
576							; Write byte to RTC, either by 0-based CMOS RAM offset (writeCMOSByte)
577							; or by RTC register index (writeRTCByte).
578							;
579							; (For some reason, writeCMOSByte can't be used to write to CMOS RAM
580							; offset 0.)
581							;
582							; entry:
583							;
584							; X = address to write to
585							;
586							; Y = value to write
587							;
588							                .if version<500
589	.9b70						writeCMOSByte:
590	.9b70		8a		txa		                txa
591	.9b71		f0 fc		beq $9b6f	                beq rts98DB
592	.9b73		20 91 9b	jsr $9b91	                jsr getRTCAddressForCMOSByte
593	.9b76		b0 f7		bcs $9b6f	                bcs rts98DB
594	.9b78						writeRTCByte:
595	.9b78		08		php		                php
596	.9b79		78		sei		                sei
597	.9b7a		20 9a 9b	jsr $9b9a	                jsr setRTCAddress            ;X=address
598	.9b7d		a9 41		lda #$41	                lda #$41
599	.9b7f		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=0
600	.9b82		a9 ff		lda #$ff	                lda #$FF
601	.9b84		8d 43 fe	sta $fe43	                sta systemVIA.ddra           ;all bits outputs
602	.9b87		a9 4a		lda #$4a	                lda #$4A
603	.9b89		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=1
604	.9b8c		8c 4f fe	sty $fe4f	                sty systemVIA.oraNoHandshake ;store value
605	.9b8f		80 cf		bra $9b60	                bra deselectRTC
606							                .endif

608							;-------------------------------------------------------------------------
609							;
610							; Convert CMOS byte offset to actual RTC address.
611							;
612							; entry:
613							;
614							; X = CMOS byte offset - 0-49
615							;
616							; exit:
617							;
618							; C=1 = invalid address
619							;
620							; C=0 = valid address: X = register index
621							;
622							                .if version<500
623	.9b91						getRTCAddressForCMOSByte:
624	.9b91		e0 32		cpx #$32	                cpx #size(RTC.ram)
625	.9b93		b0 04		bcs $9b99	                bcs rts9905
626	.9b95		8a		txa		                txa
627	.9b96		69 0e		adc #$0e	                adc #RTC.ram
628	.9b98		aa		tax		                tax
629	.9b99						rts9905:
630	.9b99		60		rts		                rts
631							                .endif

633							;-------------------------------------------------------------------------
634							;
635							; set RTC address for future read/write operation.
636							;
637							; entry:
638							;
639							; X = address to set
640							;
641							; preserves: Y
642							;
643							                .if version<500
644	.9b9a						setRTCAddress:
645	.9b9a		a9 02		lda #$02	                lda #$02
646	.9b9c		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=0 DS=0 R=0
647	.9b9f		a9 82		lda #$82	                lda #$82
648	.9ba1		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=1 CS=0 DS=0 R=0
649	.9ba4		a9 ff		lda #$ff	                lda #$FF
650	.9ba6		8d 43 fe	sta $fe43	                sta systemVIA.ddra           ;all bits outputs
651	.9ba9		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake ;write RTC address
652	.9bac		a9 c2		lda #$c2	                lda #$c2
653	.9bae		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=1 CS=1 DS=0 R=0
654	.9bb1		a9 42		lda #$42	                lda #$42
655	.9bb3		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=0
656	.9bb6						rts9922:
657	.9bb6		60		rts		                rts
658							                .endif

:5	;******  Return to file: src/terminal.s65

2520							                .endif

2522							;-------------------------------------------------------------------------

2524	.9bb7						L9923:
2525	.9bb7		a9 03		lda #$03	                lda #$03
2526	.9bb9		20 96 d2	jsr $d296	                jsr mos.LD298
2527	.9bbc		90 12		bcc $9bd0	                bcc L993C
2528	.9bbe		20 c4 9b	jsr $9bc4	                jsr L9930
2529	.9bc1		20 a7 d8	jsr $d8a7	                jsr mos.LD8A9
2530	.9bc4						L9930:
2531	.9bc4		a2 20		ldx #$20	                ldx #$20
2532	.9bc6		4c b6 e2	jmp $e2b6	                jmp mos.LE2B8

2534	.9bc9						L9935:
2535	.9bc9		a9 02		lda #$02	                lda #$02
2536	.9bcb		20 96 d2	jsr $d296	                jsr mos.LD298
2537	.9bce		b0 64		bcs $9c34	                bcs L99A0
2538	.9bd0						L993C:
2539	.9bd0		20 d0 d3	jsr $d3d0	                jsr mos.LD3D2
2540	.9bd3		20 53 9d	jsr $9d53	                jsr L9ABF
2541	.9bd6		80 08		bra $9be0	                bra L994C

2543	.9bd8						L9944:
2544	.9bd8		20 18 d4	jsr $d418	                jsr mos.LD41A
2545	.9bdb		f0 57		beq $9c34	                beq L99A0
2546	.9bdd		20 d0 d3	jsr $d3d0	                jsr mos.LD3D2
2547	.9be0						L994C:
2548	.9be0		a5 e1		lda $e1		                lda $E1
2549	.9be2		89 20		bit #$20	                bit #$20
2550	.9be4		f0 05		beq $9beb	                beq L9957
2551	.9be6		48		pha		                pha
2552	.9be7		20 a1 d6	jsr $d6a1	                jsr mos.LD6A3
2553	.9bea		68		pla		                pla
2554	.9beb						L9957:
2555	.9beb		89 10		bit #$10	                bit #$10
2556	.9bed		f0 03		beq $9bf2	                beq L995E
2557	.9bef		20 96 d6	jsr $d696	                jsr mos.LD698
2558	.9bf2						L995E:
2559	.9bf2		20 90 9c	jsr $9c90	                jsr L99FC
2560	.9bf5		08		php		                php
2561	.9bf6		20 ee 9c	jsr $9cee	                jsr L9A5A
2562	.9bf9		a2 42		ldx #$42	                ldx #$42
2563	.9bfb		a0 46		ldy #$46	                ldy #$46
2564	.9bfd		a9 20		lda #$20	                lda #$20
2565	.9bff		2c 49 88	bit $8849	                bit L8849
2566	.9c02		f0 1c		beq $9c20	                beq L998C
2567	.9c04		30 18		bmi $9c1e	                bmi L998A
2568	.9c06		ad 2c 03	lda $032c	                lda $032C
2569	.9c09		cd 37 03	cmp $0337	                cmp $0337
2570	.9c0c		d0 08		bne $9c16	                bne L9982
2571	.9c0e		ad 2d 03	lda $032d	                lda $032D
2572	.9c11		cd 38 03	cmp $0338	                cmp $0338
2573	.9c14		f0 10		beq $9c26	                beq L9992
2574	.9c16						L9982:
2575	.9c16		a2 37		ldx #$37	                ldx #$37
2576	.9c18		20 4b d2	jsr $d24b	                jsr mos.LD24D
2577	.9c1b		a2 42		ldx #$42	                ldx #$42
2578	.9c1d		b8		clv		                clv
2579	.9c1e						L998A:
2580	.9c1e		a0 2c		ldy #$2c	                ldy #$2C
2581	.9c20						L998C:
2582	.9c20		30 07		bmi $9c29	                bmi L9995
2583	.9c22		50 02		bvc $9c26	                bvc L9992
2584	.9c24		a2 37		ldx #$37	                ldx #$37
2585	.9c26						L9992:
2586	.9c26		20 4b d2	jsr $d24b	                jsr mos.LD24D
2587	.9c29						L9995:
2588	.9c29		28		plp		                plp
2589	.9c2a		90 b4		bcc $9be0	                bcc L994C
2590	.9c2c		60		rts		                rts

2592	.9c2d						L9999:
2593	.9c2d		a9 01		lda #$01	                lda #$01
2594	.9c2f		20 96 d2	jsr $d296	                jsr mos.LD298
2595	.9c32		90 09		bcc $9c3d	                bcc L99A9
2596	.9c34						L99A0:
2597	.9c34		a2 24		ldx #$24	                ldx #$24
2598	.9c36		80 37		bra $9c6f	                bra L99DB

2600	.9c38						L99A4:
2601	.9c38		20 18 d4	jsr $d418	                jsr mos.LD41A
2602	.9c3b		f0 f7		beq $9c34	                beq L99A0
2603	.9c3d						L99A9:
2604	.9c3d		20 d0 d3	jsr $d3d0	                jsr mos.LD3D2
2605	.9c40		20 5d 9c	jsr $9c5d	                jsr L99C9
2606	.9c43						L99AF:
2607	.9c43		20 e4 d5	jsr $d5e4	                jsr mos.LD5E6
2608	.9c46		20 5d 9c	jsr $9c5d	                jsr L99C9
2609	.9c49		ad 30 88	lda $8830	                lda L8830
2610	.9c4c		0d 31 88	ora $8831	                ora L8831
2611	.9c4f		f0 3e		beq $9c8f	                beq L99FB
2612	.9c51		2c 48 88	bit $8848	                bit L8848
2613	.9c54		70 ed		bvs $9c43	                bvs L99AF
2614	.9c56		a2 42		ldx #$42	                ldx #$42
2615	.9c58		20 6a 9c	jsr $9c6a	                jsr L99D6
2616	.9c5b		80 e6		bra $9c43	                bra L99AF

2618	.9c5d						L99C9:
2619	.9c5d		20 32 d3	jsr $d332	                jsr mos.LD334
2620	.9c60		20 72 9c	jsr $9c72	                jsr L99DE
2621	.9c63		2c 48 88	bit $8848	                bit L8848
2622	.9c66		30 27		bmi $9c8f	                bmi L99FB
2623	.9c68		a2 46		ldx #$46	                ldx #$46
2624	.9c6a						L99D6:
2625	.9c6a		da		phx		                phx
2626	.9c6b		20 7e d2	jsr $d27e	                jsr mos.LD280
2627	.9c6e		fa		plx		                plx
2628	.9c6f						L99DB:
2629	.9c6f		4c 4a db	jmp $db4a	                jmp mos.LDB4C

2631	.9c72						L99DE:
2632	.9c72		a2 03		ldx #$03	                ldx #$03
2633	.9c74						L99E0:
2634	.9c74		bd 30 88	lda $8830,x	                lda L8830,x
2635	.9c77		9d 42 03	sta $0342,x	                sta $0342,x
2636	.9c7a		9d 46 03	sta $0346,x	                sta $0346,x
2637	.9c7d		ca		dex		                dex
2638	.9c7e		10 f4		bpl $9c74	                bpl L99E0
2639	.9c80						L99EC:
2640	.9c80		ac 42 03	ldy $0342	                ldy $0342
2641	.9c83		ad 43 03	lda $0343	                lda $0343
2642	.9c86		20 2c c9	jsr $c92c	                jsr mos.negateAY
2643	.9c89		8c 42 03	sty $0342	                sty $0342
2644	.9c8c		8d 43 03	sta $0343	                sta $0343
2645	.9c8f						L99FB:
2646	.9c8f		60		rts		                rts

2648	.9c90						L99FC:
2649	.9c90		a5 e1		lda $e1		                lda $E1
2650	.9c92		8d 49 88	sta $8849	                sta L8849
2651	.9c95		20 72 9c	jsr $9c72	                jsr L99DE
2652	.9c98		a2 01		ldx #$01	                ldx #$01
2653	.9c9a						L9A06:
2654	.9c9a		9e 42 03	stz $0342,x	                stz $0342,x
2655	.9c9d		9e 46 03	stz $0346,x	                stz $0346,x
2656	.9ca0		ca		dex		                dex
2657	.9ca1		10 f7		bpl $9c9a	                bpl L9A06
2658	.9ca3						L9A0F:
2659	.9ca3		20 c2 9c	jsr $9cc2	                jsr L9A2E
2660	.9ca6		ad 30 88	lda $8830	                lda L8830
2661	.9ca9		0d 31 88	ora $8831	                ora L8831
2662	.9cac		d0 06		bne $9cb4	                bne L9A20
2663	.9cae		38		sec		                sec
2664	.9caf		ad 47 88	lda $8847	                lda L8847
2665	.9cb2		d0 cc		bne $9c80	                bne L99EC
2666	.9cb4						L9A20:
2667	.9cb4		20 e4 d5	jsr $d5e4	                jsr mos.LD5E6
2668	.9cb7		ad 32 88	lda $8832	                lda L8832
2669	.9cba		cd 44 03	cmp $0344	                cmp $0344
2670	.9cbd		f0 e4		beq $9ca3	                beq L9A0F
2671	.9cbf		18		clc		                clc
2672	.9cc0		80 be		bra $9c80	                bra L99EC

2674	.9cc2						L9A2E:
2675	.9cc2		20 32 d3	jsr $d332	                jsr mos.LD334
2676	.9cc5		2c 48 88	bit $8848	                bit L8848
2677	.9cc8		30 07		bmi $9cd1	                bmi L9A3D
2678	.9cca		08		php		                php
2679	.9ccb		a2 46		ldx #$46	                ldx #$46
2680	.9ccd		20 d5 9c	jsr $9cd5	                jsr L9A41
2681	.9cd0		28		plp		                plp
2682	.9cd1						L9A3D:
2683	.9cd1		70 1a		bvs $9ced	                bvs L9A59
2684	.9cd3		a2 42		ldx #$42	                ldx #$42
2685	.9cd5						L9A41:
2686	.9cd5		ad 30 88	lda $8830	                lda L8830
2687	.9cd8		a8		tay		                tay
2688	.9cd9		dd 00 03	cmp $0300,x	                cmp $0300,x
2689	.9cdc		ad 31 88	lda $8831	                lda L8831
2690	.9cdf		48		pha		                pha
2691	.9ce0		fd 01 03	sbc $0301,x	                sbc $0301,x
2692	.9ce3		68		pla		                pla
2693	.9ce4		90 07		bcc $9ced	                bcc L9A59
2694	.9ce6		9d 01 03	sta $0301,x	                sta $0301,x
2695	.9ce9		98		tya		                tya
2696	.9cea		9d 00 03	sta $0300,x	                sta $0300,x
2697	.9ced						L9A59:
2698	.9ced		60		rts		                rts

2700	.9cee						L9A5A:
2701	.9cee		ad 44 03	lda $0344	                lda $0344
2702	.9cf1		0d 45 03	ora $0345	                ora $0345
2703	.9cf4		d0 5c		bne $9d52	                bne L9ABE
2704	.9cf6		a5 e1		lda $e1		                lda $E1
2705	.9cf8		1a		inc a		                inc a
2706	.9cf9		29 03		and #$03	                and #$03
2707	.9cfb		d0 55		bne $9d52	                bne L9ABE
2708	.9cfd		a9 20		lda #$20	                lda #$20
2709	.9cff		2c 49 88	bit $8849	                bit L8849
2710	.9d02		10 09		bpl $9d0d	                bpl L9A79
2711	.9d04		f0 07		beq $9d0d	                beq L9A79
2712	.9d06		a2 2c		ldx #$2c	                ldx #$2C
2713	.9d08		a0 46		ldy #$46	                ldy #$46
2714	.9d0a		20 1c c9	jsr $c91c	                jsr mos.copyFourBytesWithinVDUVariables
2715	.9d0d						L9A79:
2716	.9d0d		a9 10		lda #$10	                lda #$10
2717	.9d0f		2c 49 88	bit $8849	                bit L8849
2718	.9d12		50 09		bvc $9d1d	                bvc L9A89
2719	.9d14		f0 07		beq $9d1d	                beq L9A89
2720	.9d16		a2 37		ldx #$37	                ldx #$37
2721	.9d18		a0 42		ldy #$42	                ldy #$42
2722	.9d1a		20 1c c9	jsr $c91c	                jsr mos.copyFourBytesWithinVDUVariables
2723	.9d1d						L9A89:
2724	.9d1d		20 53 9d	jsr $9d53	                jsr L9ABF
2725	.9d20		a5 e1		lda $e1		                lda $E1
2726	.9d22		49 3c		eor #$3c	                eor #$3C
2727	.9d24		2a		rol a		                rol a
2728	.9d25		20 6f c6	jsr $c66f	                jsr mos.fixUpVPALETTEFor4Colours
2729	.9d28		6a		ror a		                ror a
2730	.9d29		85 e1		sta $e1		                sta $E1
2731	.9d2b		89 20		bit #$20	                bit #$20
2732	.9d2d		f0 10		beq $9d3f	                beq L9AAB
2733	.9d2f		48		pha		                pha
2734	.9d30		a2 2c		ldx #$2c	                ldx #$2C
2735	.9d32		a0 46		ldy #$46	                ldy #$46
2736	.9d34		20 ca d5	jsr $d5ca	                jsr mos.sortVDUVariableWords
2737	.9d37		98		tya		                tya
2738	.9d38		aa		tax		                tax
2739	.9d39		a0 46		ldy #$46	                ldy #$46
2740	.9d3b		20 1c c9	jsr $c91c	                jsr mos.copyFourBytesWithinVDUVariables
2741	.9d3e		68		pla		                pla
2742	.9d3f						L9AAB:
2743	.9d3f		89 10		bit #$10	                bit #$10
2744	.9d41		f0 0c		beq $9d4f	                beq L9ABB
2745	.9d43		a2 37		ldx #$37	                ldx #$37
2746	.9d45		a0 42		ldy #$42	                ldy #$42
2747	.9d47		20 ca d5	jsr $d5ca	                jsr mos.sortVDUVariableWords
2748	.9d4a		a0 42		ldy #$42	                ldy #$42
2749	.9d4c		20 1c c9	jsr $c91c	                jsr mos.copyFourBytesWithinVDUVariables
2750	.9d4f						L9ABB:
2751	.9d4f		9c 49 88	stz $8849	                stz L8849
2752	.9d52						L9ABE:
2753	.9d52		60		rts		                rts

2755	.9d53						L9ABF:
2756	.9d53		a2 03		ldx #$03	                ldx #$03
2757	.9d55						L9AC1:
2758	.9d55		9e 3b 03	stz $033b,x	                stz $033B,x
2759	.9d58		ca		dex		                dex
2760	.9d59		10 fa		bpl $9d55	                bpl L9AC1
2761	.9d5b		a0 28		ldy #$28	                ldy #$28
2762	.9d5d		a2 1b		ldx #$1b	                ldx #$1B
2763	.9d5f		a9 2c		lda #$2c	                lda #$2C
2764	.9d61		20 73 9d	jsr $9d73	                jsr L9ADF
2765	.9d64		20 a6 d6	jsr $d6a6	                jsr mos.LD6A8
2766	.9d67		a0 1b		ldy #$1b	                ldy #$1B
2767	.9d69		a2 28		ldx #$28	                ldx #$28
2768	.9d6b		a9 37		lda #$37	                lda #$37
2769	.9d6d		20 73 9d	jsr $9d73	                jsr L9ADF
2770	.9d70		4c 9b d6	jmp $d69b	                jmp mos.LD69D

2772	.9d73						L9ADF:
2773	.9d73		48		pha		                pha
2774	.9d74		a5 e1		lda $e1		                lda $E1
2775	.9d76		4a		lsr a		                lsr a
2776	.9d77		90 0b		bcc $9d84	                bcc L9AF0
2777	.9d79		ad 47 88	lda $8847	                lda L8847
2778	.9d7c		d0 04		bne $9d82	                bne L9AEE
2779	.9d7e		a2 3b		ldx #$3b	                ldx #$3B
2780	.9d80		80 02		bra $9d84	                bra L9AF0

2782	.9d82						L9AEE:
2783	.9d82		a0 3b		ldy #$3b	                ldy #$3B
2784	.9d84						L9AF0:
2785	.9d84		8a		txa		                txa
2786	.9d85		fa		plx		                plx
2787	.9d86		da		phx		                phx
2788	.9d87		48		pha		                pha
2789	.9d88		5a		phy		                phy
2790	.9d89		a8		tay		                tay
2791	.9d8a		a9 03		lda #$03	                lda #$03
2792	.9d8c		85 da		sta $da		                sta $DA
2793	.9d8e						L9AFA:
2794	.9d8e		b9 00 03	lda $0300,y	                lda $0300,y
2795	.9d91		9d 1e 88	sta $881e,x	                sta L881E,x
2796	.9d94		c8		iny		                iny
2797	.9d95		e8		inx		                inx
2798	.9d96		c6 da		dec $da		                dec $DA
2799	.9d98		10 f4		bpl $9d8e	                bpl L9AFA
2800	.9d9a		7a		ply		                ply
2801	.9d9b		68		pla		                pla
2802	.9d9c		fa		plx		                plx
2803	.9d9d						L9B09:
2804	.9d9d		48		pha		                pha
2805	.9d9e		5a		phy		                phy
2806	.9d9f		20 f5 9d	jsr $9df5	                jsr L9B61
2807	.9da2		ca		dex		                dex
2808	.9da3		7a		ply		                ply
2809	.9da4		68		pla		                pla
2810	.9da5		da		phx		                phx
2811	.9da6		c8		iny		                iny
2812	.9da7		c8		iny		                iny
2813	.9da8		1a		inc a		                inc a
2814	.9da9		1a		inc a		                inc a
2815	.9daa		e8		inx		                inx
2816	.9dab		e8		inx		                inx
2817	.9dac		20 f5 9d	jsr $9df5	                jsr L9B61
2818	.9daf		fa		plx		                plx
2819	.9db0		20 24 9e	jsr $9e24	                jsr L9B90
2820	.9db3		08		php		                php
2821	.9db4		48		pha		                pha
2822	.9db5		bd 05 03	lda $0305,x	                lda $0305,x
2823	.9db8		0a		asl a		                asl a
2824	.9db9		7e 0a 03	ror $030a,x	                ror $030A,x
2825	.9dbc		10 03		bpl $9dc1	                bpl L9B2D
2826	.9dbe		20 13 9e	jsr $9e13	                jsr L9B7F
2827	.9dc1						L9B2D:
2828	.9dc1		68		pla		                pla
2829	.9dc2		0a		asl a		                asl a
2830	.9dc3		7e 0a 03	ror $030a,x	                ror $030A,x
2831	.9dc6		10 07		bpl $9dcf	                bpl L9B3B
2832	.9dc8		e8		inx		                inx
2833	.9dc9		e8		inx		                inx
2834	.9dca		20 13 9e	jsr $9e13	                jsr L9B7F
2835	.9dcd		ca		dex		                dex
2836	.9dce		ca		dex		                dex
2837	.9dcf						L9B3B:
2838	.9dcf		20 24 9e	jsr $9e24	                jsr L9B90
2839	.9dd2		10 06		bpl $9dda	                bpl L9B46
2840	.9dd4		bd 05 03	lda $0305,x	                lda $0305,x
2841	.9dd7		bc 04 03	ldy $0304,x	                ldy $0304,x
2842	.9dda						L9B46:
2843	.9dda		28		plp		                plp
2844	.9ddb		30 06		bmi $9de3	                bmi L9B4F
2845	.9ddd		c0 00		cpy #$00	                cpy #$00
2846	.9ddf		d0 01		bne $9de2	                bne L9B4E
2847	.9de1		3a		dec a		                dec a
2848	.9de2						L9B4E:
2849	.9de2		88		dey		                dey
2850	.9de3						L9B4F:
2851	.9de3		4a		lsr a		                lsr a
2852	.9de4		48		pha		                pha
2853	.9de5		98		tya		                tya
2854	.9de6		6a		ror a		                ror a
2855	.9de7		38		sec		                sec
2856	.9de8		ca		dex		                dex
2857	.9de9		20 ee 9d	jsr $9dee	                jsr L9B5A
2858	.9dec		e8		inx		                inx
2859	.9ded		68		pla		                pla
2860	.9dee						L9B5A:
2861	.9dee		fd 07 03	sbc $0307,x	                sbc $0307,x
2862	.9df1		9d 09 03	sta $0309,x	                sta $0309,x
2863	.9df4		60		rts		                rts

2865	.9df5						L9B61:
2866	.9df5		48		pha		                pha
2867	.9df6		b9 00 03	lda $0300,y	                lda $0300,y
2868	.9df9		9d 00 03	sta $0300,x	                sta $0300,x
2869	.9dfc		b9 01 03	lda $0301,y	                lda $0301,y
2870	.9dff		9d 01 03	sta $0301,x	                sta $0301,x
2871	.9e02		7a		ply		                ply
2872	.9e03		38		sec		                sec
2873	.9e04		20 09 9e	jsr $9e09	                jsr L9B75
2874	.9e07		e8		inx		                inx
2875	.9e08		c8		iny		                iny
2876	.9e09						L9B75:
2877	.9e09		b9 00 03	lda $0300,y	                lda $0300,y
2878	.9e0c		fd 00 03	sbc $0300,x	                sbc $0300,x
2879	.9e0f		9d 04 03	sta $0304,x	                sta $0304,x
2880	.9e12		60		rts		                rts

2882	.9e13						L9B7F:
2883	.9e13		bd 05 03	lda $0305,x	                lda $0305,x
2884	.9e16		bc 04 03	ldy $0304,x	                ldy $0304,x
2885	.9e19		20 2c c9	jsr $c92c	                jsr mos.negateAY
2886	.9e1c		9d 05 03	sta $0305,x	                sta $0305,x
2887	.9e1f		98		tya		                tya
2888	.9e20		9d 04 03	sta $0304,x	                sta $0304,x
2889	.9e23		60		rts		                rts

2891	.9e24						L9B90:
2892	.9e24		bd 06 03	lda $0306,x	                lda $0306,x
2893	.9e27		a8		tay		                tay
2894	.9e28		dd 04 03	cmp $0304,x	                cmp $0304,x
2895	.9e2b		bd 07 03	lda $0307,x	                lda $0307,x
2896	.9e2e		fd 05 03	sbc $0305,x	                sbc $0305,x
2897	.9e31		08		php		                php
2898	.9e32		bd 07 03	lda $0307,x	                lda $0307,x
2899	.9e35		28		plp		                plp
2900	.9e36		60		rts		                rts

2902							;-------------------------------------------------------------------------
2903							;
2904							; 112â<80><93>119 = Plot parallelogram [MasRef E.3-27]
2905							;
2906	.9e37						plotParallelogram:
2907	.9e37		a2 28		ldx #$28	                ldx #$28
2908	.9e39		86 da		stx $da		                stx $DA
2909	.9e3b		a2 14		ldx #$14	                ldx #$14
2910	.9e3d		a0 20		ldy #$20	                ldy #$20
2911	.9e3f		a9 24		lda #$24	                lda #$24
2912	.9e41		20 7e d5	jsr $d57e	                jsr mos.addRegionDimensionsToVDUVariableCoordinates
2913	.9e44		a0 14		ldy #$14	                ldy #$14
2914	.9e46		a2 24		ldx #$24	                ldx #$24
2915	.9e48		20 b5 d5	jsr $d5b5	                jsr mos.sortVDUVariableCoordinates
2916	.9e4b		8e 30 88	stx $8830	                stx L8830
2917	.9e4e		a2 20		ldx #$20	                ldx #$20
2918	.9e50		20 b5 d5	jsr $d5b5	                jsr mos.sortVDUVariableCoordinates
2919	.9e53		8e 31 88	stx $8831	                stx L8831
2920	.9e56		a2 28		ldx #$28	                ldx #$28
2921	.9e58		20 b5 d5	jsr $d5b5	                jsr mos.sortVDUVariableCoordinates
2922	.9e5b		8c 33 88	sty $8833	                sty L8833
2923	.9e5e		ac 31 88	ldy $8831	                ldy L8831
2924	.9e61		20 b5 d5	jsr $d5b5	                jsr mos.sortVDUVariableCoordinates
2925	.9e64		8c 32 88	sty $8832	                sty L8832
2926	.9e67		ac 30 88	ldy $8830	                ldy L8830
2927	.9e6a		20 a3 9e	jsr $9ea3	                jsr L9C0F
2928	.9e6d		ad 33 88	lda $8833	                lda L8833
2929	.9e70		85 e0		sta $e0		                sta $E0
2930	.9e72		a2 2c		ldx #$2c	                ldx #$2C
2931	.9e74		20 9d 9d	jsr $9d9d	                jsr L9B09
2932	.9e77		a4 e1		ldy $e1		                ldy $E1
2933	.9e79		20 ea 9e	jsr $9eea	                jsr L9C56
2934	.9e7c		ac 32 88	ldy $8832	                ldy L8832
2935	.9e7f		ad 33 88	lda $8833	                lda L8833
2936	.9e82		85 e1		sta $e1		                sta $E1
2937	.9e84		a2 37		ldx #$37	                ldx #$37
2938	.9e86		20 e5 9e	jsr $9ee5	                jsr L9C51
2939	.9e89		80 15		bra $9ea0	                bra L9C0C

2941	.9e8b						L9BF7;
2942	.9e8b		a0 14		ldy #$14	                ldy #$14
2943	.9e8d		a2 24		ldx #$24	                ldx #$24
2944	.9e8f		20 b5 d5	jsr $d5b5	                jsr mos.sortVDUVariableCoordinates
2945	.9e92		8c 32 88	sty $8832	                sty L8832
2946	.9e95		a0 20		ldy #$20	                ldy #$20
2947	.9e97		20 a3 9e	jsr $9ea3	                jsr L9C0F
2948	.9e9a		ad 32 88	lda $8832	                lda L8832
2949	.9e9d		20 e1 9e	jsr $9ee1	                jsr L9C4D
2950	.9ea0						L9C0C:
2951	.9ea0		4c e2 da	jmp $dae2	                jmp mos.LDAE4

2953	.9ea3						L9C0F:
2954	.9ea3		20 b5 d5	jsr $d5b5	                jsr mos.sortVDUVariableCoordinates
2955	.9ea6		8e 30 88	stx $8830	                stx L8830
2956	.9ea9		ae 32 88	ldx $8832	                ldx L8832
2957	.9eac		20 b5 d5	jsr $d5b5	                jsr mos.sortVDUVariableCoordinates
2958	.9eaf		8c 32 88	sty $8832	                sty L8832
2959	.9eb2		8e 31 88	stx $8831	                stx L8831
2960	.9eb5		ac 30 88	ldy $8830	                ldy L8830
2961	.9eb8		a2 fc		ldx #$fc	                ldx #$FC
2962	.9eba						L9C26:
2963	.9eba		b9 00 03	lda $0300,y	                lda $0300,y
2964	.9ebd		9d 46 02	sta $0246,x	                sta vduv.workspace._42-$fc,x
2965	.9ec0		9d 4a 02	sta $024a,x	                sta vduv.workspace._46-$fc,x
2966	.9ec3		c8		iny		                iny
2967	.9ec4		e8		inx		                inx
2968	.9ec5		d0 f3		bne $9eba	                bne L9C26
2969	.9ec7		ac 30 88	ldy $8830	                ldy L8830
2970	.9eca		ad 32 88	lda $8832	                lda L8832
2971	.9ecd		85 e1		sta $e1		                sta $E1
2972	.9ecf		a2 37		ldx #$37	                ldx #$37
2973	.9ed1		20 9d 9d	jsr $9d9d	                jsr L9B09
2974	.9ed4		ac 30 88	ldy $8830	                ldy L8830
2975	.9ed7		ad 31 88	lda $8831	                lda L8831
2976	.9eda		20 e1 9e	jsr $9ee1	                jsr L9C4D
2977	.9edd		ac 31 88	ldy $8831	                ldy L8831
2978	.9ee0		60		rts		                rts

2980	.9ee1						L9C4D:
2981	.9ee1		85 e0		sta $e0		                sta $E0
2982	.9ee3		a2 2c		ldx #$2c	                ldx #$2C
2983	.9ee5						L9C51:
2984	.9ee5		20 9d 9d	jsr $9d9d	                jsr L9B09
2985	.9ee8		a4 e0		ldy $e0		                ldy $E0
2986	.9eea						L9C56:
2987	.9eea		5a		phy		                phy
2988	.9eeb		b9 02 03	lda $0302,y	                lda $0302,y
2989	.9eee		cd 44 03	cmp $0344	                cmp $0344
2990	.9ef1		d0 08		bne $9efb	                bne L9C67
2991	.9ef3		b9 03 03	lda $0303,y	                lda $0303,y
2992	.9ef6		cd 45 03	cmp $0345	                cmp $0345
2993	.9ef9		f0 39		beq $9f34	                beq L9CA0
2994	.9efb						L9C67:
2995	.9efb		a2 2c		ldx #$2c	                ldx #$2C
2996	.9efd		20 54 9f	jsr $9f54	                jsr L9CC0
2997	.9f00		a2 37		ldx #$37	                ldx #$37
2998	.9f02		20 54 9f	jsr $9f54	                jsr L9CC0
2999	.9f05		20 e2 da	jsr $dae2	                jsr mos.LDAE4
3000	.9f08		a2 37		ldx #$37	                ldx #$37
3001	.9f0a		20 24 d7	jsr $d724	                jsr mos.LD726
3002	.9f0d		a2 2c		ldx #$2c	                ldx #$2C
3003	.9f0f		20 24 d7	jsr $d724	                jsr mos.LD726
3004	.9f12		a0 37		ldy #$37	                ldy #$37
3005	.9f14		20 ca d5	jsr $d5ca	                jsr mos.sortVDUVariableWords
3006	.9f17		da		phx		                phx
3007	.9f18		a2 fc		ldx #$fc	                ldx #$FC
3008	.9f1a						L9C86:
3009	.9f1a		b9 00 03	lda $0300,y	                lda $0300,y
3010	.9f1d		9d 4a 02	sta $024a,x	                sta vduv.workspace._46-$fc,x
3011	.9f20		c8		iny		                iny
3012	.9f21		e8		inx		                inx
3013	.9f22		d0 f6		bne $9f1a	                bne L9C86
3014	.9f24		fa		plx		                plx
3015	.9f25		a0 fc		ldy #$fc	                ldy #$FC
3016	.9f27						L9C93:
3017	.9f27		bd 00 03	lda $0300,x	                lda $0300,x
3018	.9f2a		99 46 02	sta $0246,y	                sta vduv.workspace._42-$fc,y
3019	.9f2d		e8		inx		                inx
3020	.9f2e		c8		iny		                iny
3021	.9f2f		d0 f6		bne $9f27	                bne L9C93
3022	.9f31		7a		ply		                ply
3023	.9f32		80 b6		bra $9eea	                bra L9C56

3025	.9f34						L9CA0:
3026	.9f34		a9 2c		lda #$2c	                lda #$2C
3027	.9f36		a6 e0		ldx $e0		                ldx $E0
3028	.9f38		20 40 9f	jsr $9f40	                jsr L9CAC
3029	.9f3b		7a		ply		                ply
3030	.9f3c		a9 37		lda #$37	                lda #$37
3031	.9f3e		a6 e1		ldx $e1		                ldx $E1
3032	.9f40						L9CAC:
3033	.9f40		85 de		sta $de		                sta $DE
3034	.9f42		bd 02 03	lda $0302,x	                lda vduv.graphicsWindowPixelsBottom+0,x
3035	.9f45		d9 02 03	cmp $0302,y	                cmp vduv.graphicsWindowPixelsBottom+0,y
3036	.9f48		d0 08		bne $9f52	                bne L9CBE
3037	.9f4a		bd 03 03	lda $0303,x	                lda vduv.graphicsWindowPixelsBottom+1,x
3038	.9f4d		d9 03 03	cmp $0303,y	                cmp vduv.graphicsWindowPixelsBottom+1,y
3039	.9f50		f0 05		beq $9f57	                beq L9CC3
3040	.9f52						L9CBE:
3041	.9f52		a6 de		ldx $de		                ldx $DE
3042	.9f54						L9CC0:
3043	.9f54		20 1b d7	jsr $d71b	                jsr mos.LD71D
3044	.9f57						L9CC3:
3045	.9f57		bd 00 03	lda $0300,x	                lda $0300,x
3046	.9f5a		cd 42 03	cmp $0342	                cmp $0342
3047	.9f5d		bd 01 03	lda $0301,x	                lda $0301,x
3048	.9f60		ed 43 03	sbc $0343	                sbc $0343
3049	.9f63		10 0d		bpl $9f72	                bpl L9CDE
3050	.9f65		bd 00 03	lda $0300,x	                lda $0300,x
3051	.9f68		8d 42 03	sta $0342	                sta $0342
3052	.9f6b		bd 01 03	lda $0301,x	                lda $0301,x
3053	.9f6e		8d 43 03	sta $0343	                sta $0343
3054	.9f71		60		rts		                rts

3056	.9f72						L9CDE:
3057	.9f72		ad 46 03	lda $0346	                lda $0346
3058	.9f75		dd 00 03	cmp $0300,x	                cmp $0300,x
3059	.9f78		ad 47 03	lda $0347	                lda $0347
3060	.9f7b		fd 01 03	sbc $0301,x	                sbc $0301,x
3061	.9f7e		10 0c		bpl $9f8c	                bpl L9CF8
3062	.9f80		bd 00 03	lda $0300,x	                lda $0300,x
3063	.9f83		8d 46 03	sta $0346	                sta $0346
3064	.9f86		bd 01 03	lda $0301,x	                lda $0301,x
3065	.9f89		8d 47 03	sta $0347	                sta $0347
3066	.9f8c						L9CF8:
3067	.9f8c		60		rts		                rts

3069	.9f8d						L9CF9:
3070	.9f8d		20 9f dd	jsr $dd9f	                jsr mos.LDDA1
3071	.9f90		9c 36 03	stz $0336	                stz $0336
3072	.9f93		9c 37 03	stz $0337	                stz $0337
3073	.9f96		20 ae dc	jsr $dcae	                jsr mos.LDCB0
3074	.9f99		d0 4f		bne $9fea	                bne L9D56
3075	.9f9b		20 1a dc	jsr $dc1a	                jsr mos.LDC1C
3076	.9f9e						L9D0A:
3077	.9f9e		24 ff		bit $ff		                bit $FF
3078	.9fa0		30 48		bmi $9fea	                bmi L9D56
3079	.9fa2		ad 36 03	lda $0336	                lda $0336
3080	.9fa5		cd 37 03	cmp $0337	                cmp $0337
3081	.9fa8		f0 40		beq $9fea	                beq L9D56
3082	.9faa		1a		inc a		                inc a
3083	.9fab		8d 36 03	sta $0336	                sta $0336
3084	.9fae		aa		tax		                tax
3085	.9faf		bd 00 84	lda $8400,x	                lda L8400,x
3086	.9fb2		8d 28 03	sta $0328	                sta $0328
3087	.9fb5		bd 00 85	lda $8500,x	                lda L8500,x
3088	.9fb8		8d 2c 03	sta $032c	                sta $032C
3089	.9fbb		bd 00 86	lda $8600,x	                lda L8600,x
3090	.9fbe		48		pha		                pha
3091	.9fbf		4a		lsr a		                lsr a
3092	.9fc0		4a		lsr a		                lsr a
3093	.9fc1		8d 29 03	sta $0329	                sta $0329
3094	.9fc4		68		pla		                pla
3095	.9fc5		29 03		and #$03	                and #$03
3096	.9fc7		8d 2d 03	sta $032d	                sta $032D
3097	.9fca		bd 00 87	lda $8700,x	                lda L8700,x
3098	.9fcd		9c 2b 03	stz $032b	                stz $032B
3099	.9fd0		cd 06 03	cmp $0306	                cmp $0306
3100	.9fd3		f0 0a		beq $9fdf	                beq L9D4B
3101	.9fd5		85 e0		sta $e0		                sta $E0
3102	.9fd7		1a		inc a		                inc a
3103	.9fd8		20 46 dc	jsr $dc46	                jsr mos.LDC48
3104	.9fdb		b0 0d		bcs $9fea	                bcs L9D56
3105	.9fdd		a5 e0		lda $e0		                lda $E0
3106	.9fdf						L9D4B:
3107	.9fdf		cd 02 03	cmp $0302	                cmp $0302
3108	.9fe2		f0 ba		beq $9f9e	                beq L9D0A
3109	.9fe4		3a		dec a		                dec a
3110	.9fe5		20 46 dc	jsr $dc46	                jsr mos.LDC48
3111	.9fe8		90 b4		bcc $9f9e	                bcc L9D0A
3112	.9fea						L9D56:
3113	.9fea		60		rts		                rts

3115	.9feb						L9D57:
3116	.9feb		ad 32 03	lda $0332	                lda $0332
3117	.9fee		a8		tay		                tay
3118	.9fef		cd 2c 03	cmp $032c	                cmp $032C
3119	.9ff2		ad 33 03	lda $0333	                lda $0333
3120	.9ff5		aa		tax		                tax
3121	.9ff6		ed 2d 03	sbc $032d	                sbc $032D
3122	.9ff9		b0 0a		bcs $a005	                bcs L9D71
3123	.9ffb		c8		iny		                iny
3124	.9ffc		d0 01		bne $9fff	                bne L9D6B
3125	.9ffe		e8		inx		                inx
3126	.9fff						L9D6B:
3127	.9fff		8c 2e 03	sty $032e	                sty $032E
3128	.a002		8e 2f 03	stx $032f	                stx $032F
3129	.a005						L9D71:
3130	.a005		60		rts		                rts

3132							;-------------------------------------------------------------------------

3134							                .if version>=500
3138							                .endif

3140							;-------------------------------------------------------------------------

3142							                .if version>=500
3146							                .endif

3148							;-------------------------------------------------------------------------

3150							                .if version>=500
3168							                .endif

3170							                .if version>=500
3227							                .endif

3229							;-------------------------------------------------------------------------

3231							                .if version>=500
3234							                .endif

3236							;-------------------------------------------------------------------------

3238							                .if version>=500
3253							                .endif

3255							;-------------------------------------------------------------------------

3257							                .if version>=500
3267							                .endif

3269							;-------------------------------------------------------------------------

3271							                .if version>=500
3280							                .endif

3282							;-------------------------------------------------------------------------

3284							                .if version>=500
3292							                .endif

3294							;-------------------------------------------------------------------------

3296							                .if version>=500
3310							                .endif

3312							;-------------------------------------------------------------------------

3314							                .if version>=500
3322							                .endif

3324							;-------------------------------------------------------------------------

3326							                .if version>=500
3346							                .endif

3348							;-------------------------------------------------------------------------

3350							                .if version>=500
3360							                .endif

3362							;-------------------------------------------------------------------------

3364							                .if version>=500
3376							                .endif

3378							;-------------------------------------------------------------------------

3380							                .if version>=500
3455							                .endif

3457							;-------------------------------------------------------------------------

3459							                .if version>=500
3470							                .endif

3472							;-------------------------------------------------------------------------

3474							                .if version>=500
3503							                .endif

3505							;-------------------------------------------------------------------------

3507							                .if version>=500
3509							                .endif

3511							;-------------------------------------------------------------------------

3513							                .if version==400
3514							                .include "ext.s65"

:11	;******  Processing file: src/ext.s65

1							; -*- comment-column:45; -*-

3	.a006						ext: .block

5	.a006						plotEllipseOutline:
6	.a006		20 35 a1	jsr $a135	                jsr     LBB2F
7							                .if version<500
8	.a009		80 03		bra $a00e	                bra     LBA08
11							                .endif

13	.a00b						LBA05:
14	.a00b		20 ef a1	jsr $a1ef	                jsr     LBBE9

16	.a00e						LBA08:
17	.a00e		a2 34		ldx #$34	                ldx     #VDUVariables.workspace._34
18	.a010		a0 3c		ldy #$3c	                ldy     #VDUVariables.workspace._3C
19	.a012		20 ca d5	jsr $d5ca	                jsr     mos.sortVDUVariableWords
20							                .if version!=350
21	.a015		a2 38		ldx #$38	                ldx     #VDUVariables.workspace._38
22							                .endif
23							                .if version<500&&version!=350
24	.a017		bd 01 03	lda $0301,x	                lda     vduv+1,x
27							                .endif
28	.a01a		8d 43 03	sta $0343	                sta     vduv.workspace._43
29							                .if version<500&&version!=350
30	.a01d		bd 00 03	lda $0300,x	                lda     vduv+0,x
31	.a020		aa		tax		                tax
34							                .endif

36	.a021						LBA1B:
37	.a021		8e 42 03	stx $0342	                stx     vduv.workspace._42
38	.a024		20 26 a3	jsr $a326	                jsr     LBD20
39	.a027		e8		inx		                inx
40	.a028		d0 03		bne $a02d	                bne     LBA27
41	.a02a		ee 43 03	inc $0343	                inc     vduv.workspace._43

43	.a02d						LBA27:
44	.a02d		8a		txa		                txa
45	.a02e		d9 00 03	cmp $0300,y	                cmp     vduv+0,y
46	.a031		ad 43 03	lda $0343	                lda     vduv.workspace._43
47	.a034		f9 01 03	sbc $0301,y	                sbc     vduv+1,y
48	.a037		30 e8		bmi $a021	                bmi     LBA1B
49							                .if version<500&&version!=350
50	.a039		a2 36		ldx #$36	                ldx     #VDUVariables.workspace._36
51	.a03b		a0 3e		ldy #$3e	                ldy     #VDUVariables.workspace._3E
52	.a03d		20 ca d5	jsr $d5ca	                jsr     mos.sortVDUVariableWords
53	.a040		a0 3a		ldy #$3a	                ldy     #VDUVariables.workspace._3A
54	.a042		b9 01 03	lda $0301,y	                lda     vduv+1,y
55	.a045		8d 43 03	sta $0343	                sta     vduv.workspace._43
56	.a048		b9 00 03	lda $0300,y	                lda     vduv+0,y
57	.a04b		a8		tay		                tay

59	.a04c						LBA46:
60	.a04c		8c 42 03	sty $0342	                sty     vduv.workspace._42
61	.a04f		20 26 a3	jsr $a326	                jsr     LBD20
62	.a052		98		tya		                tya
63	.a053		d0 03		bne $a058	                bne     LBA52
64	.a055		ce 43 03	dec $0343	                dec     vduv.workspace._43

66	.a058						LBA52:
67	.a058		88		dey		                dey
68	.a059		18		clc		                clc
69	.a05a		98		tya		                tya
70	.a05b		fd 00 03	sbc $0300,x	                sbc     vduv+0,x
71	.a05e		ad 43 03	lda $0343	                lda     vduv.workspace._43
72	.a061		fd 01 03	sbc $0301,x	                sbc     vduv+1,x
73	.a064		10 e6		bpl $a04c	                bpl     LBA46
74	.a066		ad 2f 03	lda $032f	                lda     vduv.workspace._2F
75	.a069		10 a0		bpl $a00b	                bpl     LBA05
76	.a06b		80 14		bra $a081	                bra     LBA7B

128							                .endif

130	.a06d						plotSolidEllipse:
131	.a06d		20 35 a1	jsr $a135	                jsr     LBB2F
132	.a070		80 03		bra $a075	                bra     LBA6F


135	.a072						LBA6C:
136	.a072		20 ef a1	jsr $a1ef	                jsr     LBBE9

138	.a075						LBA6F:
139	.a075		a2 3a		ldx #$3a	                ldx     #VDUVariables.workspace._3A
140	.a077		a0 38		ldy #$38	                ldy     #VDUVariables.workspace._38
141	.a079		20 8d a0	jsr $a08d	                jsr     LBA87
142	.a07c		ad 2f 03	lda $032f	                lda     vduv.workspace._2F
143	.a07f		10 f1		bpl $a072	                bpl     LBA6C

145	.a081						LBA7B:
146	.a081		ee 4d 88	inc $884d	                inc     L884D
147	.a084		d0 03		bne $a089	                bne     LBA83
148	.a086		ee 4e 88	inc $884e	                inc     L884E

150	.a089						LBA83:
151	.a089		a2 3e		ldx #$3e	                ldx     #VDUVariables.workspace._3E
152	.a08b		a0 3c		ldy #$3c	                ldy     #VDUVariables.workspace._3C




157	.a08d						LBA87:



161	.a08d		da		phx		                phx
162	.a08e		5a		phy		                phy
163	.a08f		18		clc		                clc
164	.a090		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
165	.a093		79 00 03	adc $0300,y	                adc     vduv+0,y
166	.a096		8d 40 03	sta $0340	                sta     vduv.workspace._40
167	.a099		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
168	.a09c		79 01 03	adc $0301,y	                adc     vduv+1,y
169	.a09f		8d 41 03	sta $0341	                sta     vduv.workspace._41
170	.a0a2		18		clc		                clc
171	.a0a3		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
172	.a0a6		7d 00 03	adc $0300,x	                adc     vduv+0,x
173	.a0a9		8d 44 03	sta $0344	                sta     vduv.workspace._44
174	.a0ac		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
175	.a0af		7d 01 03	adc $0301,x	                adc     vduv+1,x
176	.a0b2		8d 45 03	sta $0345	                sta     vduv.workspace._45
177	.a0b5		18		clc		                clc
178	.a0b6		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
179	.a0b9		6d 4d 88	adc $884d	                adc     L884D
180	.a0bc		a8		tay		                tay
181	.a0bd		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
182	.a0c0		6d 4e 88	adc $884e	                adc     L884E
183	.a0c3		20 04 a1	jsr $a104	                jsr     LBAFE
184	.a0c6		7a		ply		                ply
185	.a0c7		fa		plx		                plx
186	.a0c8		ad 4d 88	lda $884d	                lda     L884D
187	.a0cb		0d 4e 88	ora $884e	                ora     L884E
188	.a0ce		f0 47		beq $a117	                beq     rtsBB11
189	.a0d0		38		sec		                sec
190	.a0d1		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
191	.a0d4		fd 00 03	sbc $0300,x	                sbc     vduv+0,x
192	.a0d7		8d 40 03	sta $0340	                sta     vduv.workspace._40
193	.a0da		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
194	.a0dd		fd 01 03	sbc $0301,x	                sbc     vduv+1,x
195	.a0e0		8d 41 03	sta $0341	                sta     vduv.workspace._41
196	.a0e3		38		sec		                sec
197	.a0e4		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
198	.a0e7		f9 00 03	sbc $0300,y	                sbc     vduv+0,y
199	.a0ea		8d 44 03	sta $0344	                sta     vduv.workspace._44
200	.a0ed		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
201	.a0f0		f9 01 03	sbc $0301,y	                sbc     vduv+1,y
202	.a0f3		8d 45 03	sta $0345	                sta     vduv.workspace._45
203	.a0f6		38		sec		                sec
204	.a0f7		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
205	.a0fa		ed 4d 88	sbc $884d	                sbc     L884D
206	.a0fd		a8		tay		                tay
207	.a0fe		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
208	.a101		ed 4e 88	sbc $884e	                sbc     L884E






215	.a104						LBAFE:
216	.a104		8c 46 03	sty $0346	                sty     vduv.workspace._46
217	.a107		8c 42 03	sty $0342	                sty     vduv.workspace._42
218	.a10a		8d 47 03	sta $0347	                sta     vduv.workspace._47
219	.a10d		8d 43 03	sta $0343	                sta     vduv.workspace._43
220	.a110		a2 44		ldx #$44	                ldx     #VDUVariables.workspace._44
221	.a112		a0 40		ldy #$40	                ldy     #VDUVariables.workspace._40
222	.a114		4c e6 da	jmp $dae6	                jmp     mos.LDAE8





228	.a117						rtsBB11:
229	.a117		60		rts		                rts




234	.a118						LBB12:
235	.a118		68		pla		                pla
236	.a119		68		pla		                pla
237	.a11a		9c 4d 88	stz $884d	                stz     L884D
238	.a11d		9c 4e 88	stz $884e	                stz     L884E
239	.a120		a2 29		ldx #$29	                ldx     #VDUVariables.workspace._29
240	.a122		a0 40		ldy #$40	                ldy     #VDUVariables.workspace._40
241	.a124		20 00 a4	jsr $a400	                jsr     LBDFA
242	.a127		a2 29		ldx #$29	                ldx     #VDUVariables.workspace._29
243	.a129		a0 44		ldy #$44	                ldy     #VDUVariables.workspace._44
244	.a12b		20 0a c9	jsr $c90a	                jsr     mos.copyTwoBytesWithinVDUVariables
245	.a12e		a2 44		ldx #$44	                ldx     #VDUVariables.workspace._44
246	.a130		a0 40		ldy #$40	                ldy     #VDUVariables.workspace._40
247	.a132		4c 8d a0	jmp $a08d	                jmp     LBA87





253	.a135						LBB2F:



257	.a135		a0 24		ldy #$24	                ldy     #VDUVariables.graphicsCursorPixelsX
258	.a137		a2 14		ldx #$14	                ldx     #VDUVariables.oldGraphicsCursorPixelsX
259	.a139		a9 29		lda #$29	                lda     #VDUVariables.workspace._29
260	.a13b		20 76 d6	jsr $d676	                jsr     mos.LD678
261	.a13e		9c 28 03	stz $0328	                stz     vduv.workspace._28
262	.a141		a0 22		ldy #$22	                ldy     #VDUVariables.queueEnd-2
263	.a143		a2 16		ldx #$16	                ldx     #VDUVariables.oldGraphicsCursorPixelsY
264	.a145		a9 2e		lda #$2e	                lda     #VDUVariables.workspace._2E
265	.a147		20 76 d6	jsr $d676	                jsr     mos.LD678
266	.a14a		ad 2e 03	lda $032e	                lda     vduv.workspace._2E
267	.a14d		0d 2f 03	ora $032f	                ora     vduv.workspace._2F
268	.a150		f0 c6		beq $a118	                beq     LBB12
269	.a152		2a		rol a		                rol     a
270	.a153		8d 41 88	sta $8841	                sta     L8841
271	.a156		a0 20		ldy #$20	                ldy     #VDUVariables.queueEnd-4
272	.a158		a2 14		ldx #$14	                ldx     #VDUVariables.oldGraphicsCursorPixelsX
273	.a15a		a9 2c		lda #$2c	                lda     #VDUVariables.workspace._2C
274	.a15c		20 76 d6	jsr $d676	                jsr     mos.LD678
275	.a15f		9c 2b 03	stz $032b	                stz     vduv.workspace._2B
276	.a162		2a		rol a		                rol     a
277	.a163		4d 41 88	eor $8841	                eor     L8841
278	.a166		29 01		and #$01	                and     #1
279	.a168		8d 41 88	sta $8841	                sta     L8841
280	.a16b		a2 28		ldx #$28	                ldx     #VDUVariables.workspace._28
281	.a16d		a0 2e		ldy #$2e	                ldy     #VDUVariables.workspace._2E
282	.a16f		20 89 a3	jsr $a389	                jsr     LBD83
283	.a172		a2 2b		ldx #$2b	                ldx     #VDUVariables.workspace._2B
284	.a174		a0 2e		ldy #$2e	                ldy     #VDUVariables.workspace._2E
285	.a176		20 89 a3	jsr $a389	                jsr     LBD83
286	.a179		ad 41 88	lda $8841	                lda     L8841
287	.a17c		f0 0e		beq $a18c	                beq     LBB86
288	.a17e		38		sec		                sec
289	.a17f		a0 fd		ldy #$fd	                ldy     #$fd

291	.a181						LBB7B:
292	.a181		a9 00		lda #$00	                lda     #0
293	.a183		f9 2e 02	sbc $022e,y	                sbc     vduv.workspace._2B-$fd,y
294	.a186		99 2e 02	sta $022e,y	                sta     vduv.workspace._2B-$fd,y
295	.a189		c8		iny		                iny
296	.a18a		d0 f5		bne $a181	                bne     LBB7B

298	.a18c						LBB86:
299	.a18c		ad 2e 03	lda $032e	                lda     vduv.workspace._2E
300	.a18f		8d 3c 88	sta $883c	                sta     L883C
301	.a192		ad 2f 03	lda $032f	                lda     vduv.workspace._2F
302	.a195		20 cc d4	jsr $d4cc	                jsr     mos.LD4CE
303	.a198		a0 03		ldy #$03	                ldy     #3

305	.a19a						LBB94:
306	.a19a		b9 40 88	lda $8840,y	                lda     $8840,y
307	.a19d		99 30 03	sta $0330,y	                sta     vduv.workspace._30,y
308	.a1a0		88		dey		                dey
309	.a1a1		10 f7		bpl $a19a	                bpl     LBB94
310	.a1a3		a2 0a		ldx #$0a	                ldx     #$a

312	.a1a5						LBB9F:
313	.a1a5		9e 42 88	stz $8842,x	                stz     $8842,x
314	.a1a8		ca		dex		                dex
315	.a1a9		10 fa		bpl $a1a5	                bpl     LBB9F
316	.a1ab		ee 45 88	inc $8845	                inc     L8845
317	.a1ae		20 1e a2	jsr $a21e	                jsr     LBC18
318	.a1b1		20 1e a2	jsr $a21e	                jsr     LBC18
319	.a1b4		9c 4d 88	stz $884d	                stz     L884D
320	.a1b7		9c 4e 88	stz $884e	                stz     L884E
321	.a1ba		a2 3c		ldx #$3c	                ldx     #VDUVariables.workspace._3C
322	.a1bc		a0 36		ldy #$36	                ldy     #VDUVariables.workspace._36
323	.a1be		20 00 a4	jsr $a400	                jsr     LBDFA
324	.a1c1		a2 3e		ldx #$3e	                ldx     #VDUVariables.workspace._3E
325	.a1c3		a0 34		ldy #$34	                ldy     #VDUVariables.workspace._34
326	.a1c5		20 00 a4	jsr $a400	                jsr     LBDFA
327	.a1c8		a2 3c		ldx #$3c	                ldx     #VDUVariables.workspace._3C
328	.a1ca		a0 3a		ldy #$3a	                ldy     #VDUVariables.workspace._3A
329	.a1cc		20 d4 d5	jsr $d5d4	                jsr     mos.compareVDUVariableWords
330	.a1cf		10 07		bpl $a1d8	                bpl     LBBD2
331	.a1d1		20 0a c9	jsr $c90a	                jsr     mos.copyTwoBytesWithinVDUVariables
332	.a1d4		a2 36		ldx #$36	                ldx     #VDUVariables.workspace._36
333	.a1d6		80 12		bra $a1ea	                bra     LBBE4


336	.a1d8						LBBD2:
337	.a1d8		a2 38		ldx #$38	                ldx     #VDUVariables.workspace._38
338	.a1da		a0 3e		ldy #$3e	                ldy     #VDUVariables.workspace._3E
339	.a1dc		20 d4 d5	jsr $d5d4	                jsr     mos.compareVDUVariableWords
340	.a1df		10 3c		bpl $a21d	                bpl     rtsBC17
341	.a1e1		a2 34		ldx #$34	                ldx     #VDUVariables.workspace._34
342	.a1e3		a0 3a		ldy #$3a	                ldy     #VDUVariables.workspace._3A
343	.a1e5		20 0a c9	jsr $c90a	                jsr     mos.copyTwoBytesWithinVDUVariables
344	.a1e8		a2 3e		ldx #$3e	                ldx     #VDUVariables.workspace._3E

346	.a1ea						LBBE4:
347	.a1ea		a0 38		ldy #$38	                ldy     #VDUVariables.workspace._38
348	.a1ec		4c 0a c9	jmp $c90a	                jmp     mos.copyTwoBytesWithinVDUVariables






355	.a1ef						LBBE9:

357	.a1ef		20 1e a2	jsr $a21e	                jsr     LBC18
358	.a1f2		a0 3a		ldy #$3a	                ldy     #VDUVariables.workspace._3A
359	.a1f4		a2 3c		ldx #$3c	                ldx     #VDUVariables.workspace._3C
360	.a1f6		20 d4 d5	jsr $d5d4	                jsr     mos.compareVDUVariableWords
361	.a1f9		10 0d		bpl $a208	                bpl     LBC02
362	.a1fb		ad 3c 03	lda $033c	                lda     vduv.workspace._3C
363	.a1fe		8d 3a 03	sta $033a	                sta     vduv.workspace._3A
364	.a201		ad 3d 03	lda $033d	                lda     vduv.workspace._3D
365	.a204		8d 3b 03	sta $033b	                sta     vduv.workspace._3B
366	.a207		60		rts		                rts


369	.a208						LBC02:
370	.a208		a2 38		ldx #$38	                ldx     #VDUVariables.workspace._38
371	.a20a		a0 3e		ldy #$3e	                ldy     #VDUVariables.workspace._3E
372	.a20c		20 d4 d5	jsr $d5d4	                jsr     mos.compareVDUVariableWords
373	.a20f		10 0c		bpl $a21d	                bpl     rtsBC17
374	.a211		ad 3e 03	lda $033e	                lda     vduv.workspace._3E
375	.a214		8d 38 03	sta $0338	                sta     vduv.workspace._38
376	.a217		ad 3f 03	lda $033f	                lda     vduv.workspace._3F
377	.a21a		8d 39 03	sta $0339	                sta     vduv.workspace._39

379	.a21d						rtsBC17:
380	.a21d		60		rts		                rts






387	.a21e						LBC18:
388	.a21e		a2 38		ldx #$38	                ldx     #VDUVariables.workspace._38
389	.a220		a0 34		ldy #$34	                ldy     #VDUVariables.workspace._34
390	.a222		20 1c c9	jsr $c91c	                jsr     mos.copyFourBytesWithinVDUVariables
391	.a225		a2 3c		ldx #$3c	                ldx     #VDUVariables.workspace._3C
392	.a227		a0 38		ldy #$38	                ldy     #VDUVariables.workspace._38
393	.a229		20 1c c9	jsr $c91c	                jsr     mos.copyFourBytesWithinVDUVariables
394	.a22c		38		sec		                sec
395	.a22d		ad 30 03	lda $0330	                lda     vduv.workspace._30
396	.a230		ed 49 88	sbc $8849	                sbc     L8849
397	.a233		8d 36 88	sta $8836	                sta     L8836
398	.a236		ad 31 03	lda $0331	                lda     vduv.workspace._31
399	.a239		ed 4a 88	sbc $884a	                sbc     L884A
400	.a23c		8d 37 88	sta $8837	                sta     L8837
401	.a23f		ad 32 03	lda $0332	                lda     vduv.workspace._32
402	.a242		ed 4b 88	sbc $884b	                sbc     L884B
403	.a245		8d 38 88	sta $8838	                sta     L8838
404	.a248		ad 33 03	lda $0333	                lda     vduv.workspace._33
405	.a24b		ed 4c 88	sbc $884c	                sbc     L884C
406	.a24e		8d 39 88	sta $8839	                sta     L8839
407	.a251		9c 35 88	stz $8835	                stz     L8835
408	.a254		9c 34 88	stz $8834	                stz     L8834
409	.a257		20 51 a4	jsr $a451	                jsr     LBE4B
410	.a25a		ad 28 03	lda $0328	                lda     vduv.workspace._28
411	.a25d		8d 34 88	sta $8834	                sta     L8834
412	.a260		ad 29 03	lda $0329	                lda     vduv.workspace._29
413	.a263		8d 35 88	sta $8835	                sta     L8835
414	.a266		ad 2a 03	lda $032a	                lda     vduv.workspace._2A
415	.a269		8d 36 88	sta $8836	                sta     L8836
416	.a26c		20 12 a4	jsr $a412	                jsr     LBE0C
417	.a26f		18		clc		                clc
418	.a270		ad 42 88	lda $8842	                lda     L8842
419	.a273		6d 35 88	adc $8835	                adc     L8835
420	.a276		08		php		                php
421	.a277		ad 43 88	lda $8843	                lda     L8843
422	.a27a		6d 36 88	adc $8836	                adc     L8836
423	.a27d		8d 3e 03	sta $033e	                sta     vduv.workspace._3E
424	.a280		ad 44 88	lda $8844	                lda     L8844
425	.a283		6d 37 88	adc $8837	                adc     L8837
426	.a286		8d 3f 03	sta $033f	                sta     vduv.workspace._3F
427	.a289		28		plp		                plp
428	.a28a		10 08		bpl $a294	                bpl     LBC8E
429	.a28c		ee 3e 03	inc $033e	                inc     vduv.workspace._3E
430	.a28f		d0 03		bne $a294	                bne     LBC8E
431	.a291		ee 3f 03	inc $033f	                inc     vduv.workspace._3F

433	.a294						LBC8E:
434	.a294		38		sec		                sec
435	.a295		ad 42 88	lda $8842	                lda     L8842
436	.a298		ed 35 88	sbc $8835	                sbc     L8835
437	.a29b		08		php		                php
438	.a29c		ad 43 88	lda $8843	                lda     L8843
439	.a29f		ed 36 88	sbc $8836	                sbc     L8836
440	.a2a2		8d 3c 03	sta $033c	                sta     vduv.workspace._3C
441	.a2a5		ad 44 88	lda $8844	                lda     L8844
442	.a2a8		ed 37 88	sbc $8837	                sbc     L8837
443	.a2ab		8d 3d 03	sta $033d	                sta     vduv.workspace._3D
444	.a2ae		28		plp		                plp
445	.a2af		10 08		bpl $a2b9	                bpl     LBCB3
446	.a2b1		ee 3c 03	inc $033c	                inc     vduv.workspace._3C
447	.a2b4		d0 03		bne $a2b9	                bne     LBCB3
448	.a2b6		ee 3d 03	inc $033d	                inc     vduv.workspace._3D

450	.a2b9						LBCB3:
451	.a2b9		18		clc		                clc
452	.a2ba		ad 45 88	lda $8845	                lda     L8845
453	.a2bd		6d 49 88	adc $8849	                adc     L8849
454	.a2c0		8d 49 88	sta $8849	                sta     L8849
455	.a2c3		ad 46 88	lda $8846	                lda     L8846
456	.a2c6		6d 4a 88	adc $884a	                adc     L884A
457	.a2c9		8d 4a 88	sta $884a	                sta     L884A
458	.a2cc		ad 47 88	lda $8847	                lda     L8847
459	.a2cf		6d 4b 88	adc $884b	                adc     L884B
460	.a2d2		8d 4b 88	sta $884b	                sta     L884B
461	.a2d5		ad 48 88	lda $8848	                lda     L8848
462	.a2d8		6d 4c 88	adc $884c	                adc     L884C
463	.a2db		8d 4c 88	sta $884c	                sta     L884C
464	.a2de		18		clc		                clc
465	.a2df		a9 02		lda #$02	                lda     #2
466	.a2e1		6d 45 88	adc $8845	                adc     L8845
467	.a2e4		8d 45 88	sta $8845	                sta     L8845
468	.a2e7		90 0d		bcc $a2f6	                bcc     LBCF0
469	.a2e9		ee 46 88	inc $8846	                inc     L8846
470	.a2ec		d0 08		bne $a2f6	                bne     LBCF0
471	.a2ee		ee 47 88	inc $8847	                inc     L8847
472	.a2f1		d0 03		bne $a2f6	                bne     LBCF0
473	.a2f3		ee 48 88	inc $8848	                inc     L8848

475	.a2f6						LBCF0:
476	.a2f6		18		clc		                clc
477	.a2f7		ad 42 88	lda $8842	                lda     L8842
478	.a2fa		6d 2b 03	adc $032b	                adc     vduv.workspace._2B
479	.a2fd		8d 42 88	sta $8842	                sta     L8842
480	.a300		ad 43 88	lda $8843	                lda     L8843
481	.a303		6d 2c 03	adc $032c	                adc     vduv.workspace._2C
482	.a306		8d 43 88	sta $8843	                sta     L8843
483	.a309		ad 44 88	lda $8844	                lda     L8844
484	.a30c		6d 2d 03	adc $032d	                adc     vduv.workspace._2D
485	.a30f		8d 44 88	sta $8844	                sta     L8844
486	.a312		ee 4d 88	inc $884d	                inc     L884D
487	.a315		d0 03		bne $a31a	                bne     LBD14
488	.a317		ee 4e 88	inc $884e	                inc     L884E

490	.a31a						LBD14:
491	.a31a		ad 2e 03	lda $032e	                lda     vduv.workspace._2E
492	.a31d		d0 03		bne $a322	                bne     LBD1C
493	.a31f		ce 2f 03	dec $032f	                dec     vduv.workspace._2F

495	.a322						LBD1C:
496	.a322		ce 2e 03	dec $032e	                dec     vduv.workspace._2E
497	.a325		60		rts		                rts






504	.a326						LBD20:
505	.a326		da		phx		                phx
506	.a327		5a		phy		                phy
507	.a328		18		clc		                clc
508	.a329		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
509	.a32c		6d 42 03	adc $0342	                adc     vduv.workspace._42
510	.a32f		8d 44 03	sta $0344	                sta     vduv.workspace._44
511	.a332		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
512	.a335		6d 43 03	adc $0343	                adc     vduv.workspace._43
513	.a338		8d 45 03	sta $0345	                sta     vduv.workspace._45
514	.a33b		18		clc		                clc
515	.a33c		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
516	.a33f		6d 4d 88	adc $884d	                adc     L884D
517	.a342		8d 46 03	sta $0346	                sta     vduv.workspace._46
518	.a345		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
519	.a348		6d 4e 88	adc $884e	                adc     L884E
520	.a34b		8d 47 03	sta $0347	                sta     vduv.workspace._47
521	.a34e		a2 44		ldx #$44	                ldx     #VDUVariables.workspace._44
522	.a350		20 4a db	jsr $db4a	                jsr     mos.LDB4C
523	.a353		ad 4d 88	lda $884d	                lda     L884D
524	.a356		0d 4e 88	ora $884e	                ora     L884E
525	.a359		f0 2b		beq $a386	                beq     LBD80
526	.a35b		38		sec		                sec
527	.a35c		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
528	.a35f		ed 42 03	sbc $0342	                sbc     vduv.workspace._42
529	.a362		8d 44 03	sta $0344	                sta     vduv.workspace._44
530	.a365		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
531	.a368		ed 43 03	sbc $0343	                sbc     vduv.workspace._43
532	.a36b		8d 45 03	sta $0345	                sta     vduv.workspace._45
533	.a36e		38		sec		                sec
534	.a36f		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
535	.a372		ed 4d 88	sbc $884d	                sbc     L884D
536	.a375		8d 46 03	sta $0346	                sta     vduv.workspace._46
537	.a378		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
538	.a37b		ed 4e 88	sbc $884e	                sbc     L884E
539	.a37e		8d 47 03	sta $0347	                sta     vduv.workspace._47
540	.a381		a2 44		ldx #$44	                ldx     #VDUVariables.workspace._44
541	.a383		20 4a db	jsr $db4a	                jsr     mos.LDB4C

543	.a386						LBD80:
544	.a386		7a		ply		                ply
545	.a387		fa		plx		                plx
546	.a388		60		rts		                rts






553	.a389						LBD83:
554	.a389		da		phx		                phx
555	.a38a		b9 00 03	lda $0300,y	                lda     vduv+0,y
556	.a38d		8d 3f 88	sta $883f	                sta     L883F
557	.a390		b9 01 03	lda $0301,y	                lda     vduv+1,y
558	.a393		8d 40 88	sta $8840	                sta     L8840
559	.a396		a0 18		ldy #$18	                ldy     #$18 ;not VDUVariables.textCursorXPosition?
560	.a398		bd 00 03	lda $0300,x	                lda     vduv+0,x
561	.a39b		8d 3a 88	sta $883a	                sta     L883A
562	.a39e		bd 01 03	lda $0301,x	                lda     vduv+1,x
563	.a3a1		8d 3b 88	sta $883b	                sta     L883B
564	.a3a4		bd 02 03	lda $0302,x	                lda     vduv+2,x
565	.a3a7		30 0c		bmi $a3b5	                bmi     LBDAF

567	.a3a9						LBDA3:
568	.a3a9		88		dey		                dey
569	.a3aa		f0 52		beq $a3fe	                beq     LBDF8
570	.a3ac		0e 3a 88	asl $883a	                asl     L883A
571	.a3af		2e 3b 88	rol $883b	                rol     L883B
572	.a3b2		2a		rol a		                rol     a
573	.a3b3		10 f4		bpl $a3a9	                bpl     LBDA3

575	.a3b5						LBDAF:
576	.a3b5		8d 3c 88	sta $883c	                sta     L883C
577	.a3b8		9c 3d 88	stz $883d	                stz     L883D
578	.a3bb		9c 3e 88	stz $883e	                stz     L883E
579	.a3be		18		clc		                clc

581	.a3bf						LBDB9:
582	.a3bf		2e 3a 88	rol $883a	                rol     L883A
583	.a3c2		2e 3b 88	rol $883b	                rol     L883B
584	.a3c5		2e 3c 88	rol $883c	                rol     L883C
585	.a3c8		2e 3d 88	rol $883d	                rol     L883D
586	.a3cb		2e 3e 88	rol $883e	                rol     L883E
587	.a3ce		38		sec		                sec
588	.a3cf		ad 3d 88	lda $883d	                lda     L883D
589	.a3d2		ed 3f 88	sbc $883f	                sbc     L883F
590	.a3d5		aa		tax		                tax
591	.a3d6		ad 3e 88	lda $883e	                lda     L883E
592	.a3d9		ed 40 88	sbc $8840	                sbc     L8840
593	.a3dc		90 06		bcc $a3e4	                bcc     LBDDE
594	.a3de		8e 3d 88	stx $883d	                stx     L883D
595	.a3e1		8d 3e 88	sta $883e	                sta     L883E

597	.a3e4						LBDDE:
598	.a3e4		88		dey		                dey
599	.a3e5		d0 d8		bne $a3bf	                bne     LBDB9
600	.a3e7		fa		plx		                plx
601	.a3e8		ad 3a 88	lda $883a	                lda     L883A
602	.a3eb		2a		rol a		                rol     a
603	.a3ec		9d 00 03	sta $0300,x	                sta     vduv+0,x
604	.a3ef		ad 3b 88	lda $883b	                lda     L883B
605	.a3f2		2a		rol a		                rol     a
606	.a3f3		9d 01 03	sta $0301,x	                sta     vduv+1,x
607	.a3f6		ad 3c 88	lda $883c	                lda     L883C
608	.a3f9		2a		rol a		                rol     a
609	.a3fa		9d 02 03	sta $0302,x	                sta     vduv+2,x
610	.a3fd		60		rts		                rts


613	.a3fe						LBDF8:
614	.a3fe		fa		plx		                plx
615	.a3ff		60		rts		                rts






622	.a400						LBDFA:
623	.a400		38		sec		                sec
624	.a401		a9 00		lda #$00	                lda     #0
625	.a403		fd 00 03	sbc $0300,x	                sbc     vduv+0,x
626	.a406		99 00 03	sta $0300,y	                sta     vduv+0,y
627	.a409		a9 00		lda #$00	                lda     #0
628	.a40b		fd 01 03	sbc $0301,x	                sbc     vduv+1,x
629	.a40e		99 01 03	sta $0301,y	                sta     vduv+1,y
630	.a411		60		rts		                rts






637	.a412						LBE0C:
638	.a412		a0 17		ldy #$17	                ldy     #$17
639	.a414		9c 39 88	stz $8839	                stz     L8839
640	.a417		9c 38 88	stz $8838	                stz     L8838
641	.a41a		9c 37 88	stz $8837	                stz     L8837
642	.a41d		4e 36 88	lsr $8836	                lsr     L8836
643	.a420		6e 35 88	ror $8835	                ror     L8835
644	.a423		6e 34 88	ror $8834	                ror     L8834

646	.a426						LBE20:
647	.a426		90 1c		bcc $a444	                bcc     LBE3E
648	.a428		18		clc		                clc
649	.a429		ad 30 88	lda $8830	                lda     L8830
650	.a42c		6d 37 88	adc $8837	                adc     L8837
651	.a42f		8d 37 88	sta $8837	                sta     L8837
652	.a432		ad 31 88	lda $8831	                lda     L8831
653	.a435		6d 38 88	adc $8838	                adc     L8838
654	.a438		8d 38 88	sta $8838	                sta     L8838
655	.a43b		ad 32 88	lda $8832	                lda     L8832
656	.a43e		6d 39 88	adc $8839	                adc     L8839
657	.a441		8d 39 88	sta $8839	                sta     L8839

659	.a444						LBE3E:
660	.a444		18		clc		                clc
661	.a445		a2 05		ldx #$05	                ldx     #5

663	.a447						LBE41:
664	.a447		7e 34 88	ror $8834,x	                ror     $8834,x
665	.a44a		ca		dex		                dex
666	.a44b		10 fa		bpl $a447	                bpl     LBE41
667	.a44d		88		dey		                dey
668	.a44e		10 d6		bpl $a426	                bpl     LBE20
669	.a450		60		rts		                rts






676	.a451						LBE4B:
677	.a451		a2 03		ldx #$03	                ldx     #3

679	.a453						LBE4D:
680	.a453		9e 30 88	stz $8830,x	                stz     $8830,x
681	.a456		74 dc		stz $dc,x	                stz     ZTEMPB,x
682	.a458		ca		dex		                dex
683	.a459		10 f8		bpl $a453	                bpl     LBE4D
684	.a45b		a0 05		ldy #$05	                ldy     #5

686	.a45d						LBE57:
687	.a45d		b9 34 88	lda $8834,y	                lda     $8834,y
688	.a460		85 da		sta $da		                sta     ZTEMP+0
689	.a462		5a		phy		                phy
690	.a463		a0 03		ldy #$03	                ldy     #3

692	.a465						LBE5F:
693	.a465		5a		phy		                phy
694	.a466		38		sec		                sec
695	.a467		2e 30 88	rol $8830	                rol     L8830
696	.a46a		2e 31 88	rol $8831	                rol     L8831
697	.a46d		2e 32 88	rol $8832	                rol     L8832
698	.a470		2e 33 88	rol $8833	                rol     L8833
699	.a473		a2 01		ldx #$01	                ldx     #1
700	.a475		a5 dc		lda $dc		                lda     ZTEMPB+0

702	.a477						LBE71:
703	.a477		06 da		asl $da		                asl     ZTEMP+0
704	.a479		2a		rol a		                rol     a
705	.a47a		26 dd		rol $dd		                rol     ZTEMPB+1
706	.a47c		26 de		rol $de		                rol     ZTEMPC+0
707	.a47e		26 df		rol $df		                rol     ZTEMPC+1
708	.a480		ca		dex		                dex
709	.a481		10 f4		bpl $a477	                bpl     LBE71
710	.a483		85 dc		sta $dc		                sta     ZTEMPB+0
711	.a485		38		sec		                sec
712	.a486		ed 30 88	sbc $8830	                sbc     L8830
713	.a489		48		pha		                pha
714	.a48a		a5 dd		lda $dd		                lda     ZTEMPB+1
715	.a48c		ed 31 88	sbc $8831	                sbc     L8831
716	.a48f		aa		tax		                tax
717	.a490		a5 de		lda $de		                lda     ZTEMPC+0
718	.a492		ed 32 88	sbc $8832	                sbc     L8832
719	.a495		a8		tay		                tay
720	.a496		a5 df		lda $df		                lda     ZTEMPC+1
721	.a498		ed 33 88	sbc $8833	                sbc     L8833
722	.a49b		90 0e		bcc $a4ab	                bcc     LBEA5
723	.a49d		85 df		sta $df		                sta     ZTEMPC+1
724	.a49f		84 de		sty $de		                sty     ZTEMPC+0
725	.a4a1		86 dd		stx $dd		                stx     ZTEMPB+1
726	.a4a3		68		pla		                pla
727	.a4a4		85 dc		sta $dc		                sta     ZTEMPB+0
728	.a4a6		ee 30 88	inc $8830	                inc     L8830
729	.a4a9		80 04		bra $a4af	                bra     LBEA9


732	.a4ab						LBEA5:
733	.a4ab		68		pla		                pla
734	.a4ac		ce 30 88	dec $8830	                dec     L8830

736	.a4af						LBEA9:
737	.a4af		7a		ply		                ply
738	.a4b0		88		dey		                dey
739	.a4b1		10 b2		bpl $a465	                bpl     LBE5F
740	.a4b3		7a		ply		                ply
741	.a4b4		88		dey		                dey
742	.a4b5		10 a6		bpl $a45d	                bpl     LBE57
743	.a4b7		4e 33 88	lsr $8833	                lsr     L8833
744	.a4ba		6e 32 88	ror $8832	                ror     L8832
745	.a4bd		6e 31 88	ror $8831	                ror     L8831
746	.a4c0		6e 30 88	ror $8830	                ror     L8830
747	.a4c3		60		rts		                rts

749							;-------------------------------------------------------------------------
750							;
751							; 184â<80><93>191 = Move/copy rectangle [MasRef E.3-31]
752							;
753							; The normal interpretation of <p> does not apply in this group of
754							; plot codes and the meanings are as follows:
755							;
756							; 184, 185 - %1011100x - Move rectangle, relative
757							; 186, 187 - %1011101x - Copy rectangle, relative
758							; 188, 189 - %1011110x - Move rectangle, absolute
759							; 190, 191 - %1011111x - Copy rectangle, absolute
760							;
761	.a4c4						plotMoveOrCopyRectangle:
762	.a4c4		29 02		and #$02	                and     #2
763	.a4c6		8d 45 03	sta $0345	                sta     vduv.mocr.copy

765	.a4c9		20 4f c9	jsr $c94f	                jsr     mos.prepareForPlotBackground

767	.a4cc		a2 14		ldx #$14	                ldx     #VDUVariables.oldGraphicsCursorPixels
768	.a4ce		20 e4 c8	jsr $c8e4	                jsr     mos.prepareAABB

770							                ; mocr.dest.min = PLOT coordinate
771	.a4d1		a0 34		ldy #$34	                ldy     #VDUVariables.mocr.dest.min
772	.a4d3		20 14 c9	jsr $c914	                jsr     mos.copyLastFourVDUQueueBytes
773	.a4d6		84 da		sty $da		                sty     ZTEMP+0              ;Y=VDUVariables.mocr.dest.max

775							                ; dest.max = dest.min + (src.max - src.min)
776	.a4d8		a2 34		ldx #$34	                ldx     #VDUVariables.mocr.dest.min
777	.a4da		a0 2c		ldy #$2c	                ldy     #VDUVariables.mocr.src.max
778	.a4dc		a9 28		lda #$28	                lda     #VDUVariables.mocr.src.min
779	.a4de		20 7e d5	jsr $d57e	                jsr     mos.addRegionDimensionsToVDUVariableCoordinates

781							                ;
782	.a4e1		a2 28		ldx #$28	                ldx     #VDUVariables.mocr.src.min
783	.a4e3		a0 34		ldy #$34	                ldy     #VDUVariables.mocr.dest
784	.a4e5		20 ca d5	jsr $d5ca	                jsr     mos.sortVDUVariableWords

786	.a4e8		5a		phy		                phy
787	.a4e9		da		phx		                phx
788	.a4ea		a0 00		ldy #$00	                ldy     #0                   ;get outcode for X axis
789	.a4ec		20 b5 d1	jsr $d1b5	                jsr     mos.getOutcodeForAxis
790	.a4ef		f0 08		beq $a4f9	                beq     LBEF3                ;taken if
791	.a4f1		4a		lsr a		                lsr     a
792	.a4f2		f0 03		beq $a4f7	                beq     LBEF1
793	.a4f4		68		pla		                pla

795	.a4f5						LBEEF:
796	.a4f5		68		pla		                pla
797	.a4f6		60		rts		                rts


800	.a4f7						LBEF1:
801	.a4f7		a2 00		ldx #$00	                ldx     #0

803	.a4f9						LBEF3:
804	.a4f9		68		pla		                pla

806	.a4fa		a0 30		ldy #$30	                ldy     #VDUVariables.workspace._30
807	.a4fc		84 da		sty $da		                sty     ZTEMP+0
808	.a4fe		a0 28		ldy #$28	                ldy     #VDUVariables.mocr.src.min
809	.a500		20 8b d5	jsr $d58b	                jsr     mos.addRegionDimensionToVDUVariableCoordinate

811	.a503		a0 3c		ldy #$3c	                ldy     #VDUVariables.workspace._3C
812	.a505		84 da		sty $da		                sty     ZTEMP+0

814	.a507		a0 34		ldy #$34	                ldy     #VDUVariables.mocr.dest.min
815	.a509		20 8b d5	jsr $d58b	                jsr     mos.addRegionDimensionToVDUVariableCoordinate

817	.a50c		68		pla		                pla
818	.a50d		18		clc		                clc
819	.a50e		69 04		adc #$04	                adc     #4
820	.a510		aa		tax		                tax
821	.a511		da		phx		                phx
822	.a512		a0 00		ldy #$00	                ldy     #0
823	.a514		20 b5 d1	jsr $d1b5	                jsr     mos.getOutcodeForAxis
824	.a517		f0 05		beq $a51e	                beq     LBF18
825	.a519		4a		lsr a		                lsr     a
826	.a51a		f0 d9		beq $a4f5	                beq     LBEEF
827	.a51c		a2 04		ldx #$04	                ldx     #4

829	.a51e						LBF18:
830	.a51e		68		pla		                pla
831	.a51f		a0 40		ldy #$40	                ldy     #VDUVariables.workspace._40
832	.a521		84 da		sty $da		                sty     ZTEMP+0
833	.a523		a0 38		ldy #$38	                ldy     #VDUVariables.workspace._38
834	.a525		20 8b d5	jsr $d58b	                jsr     mos.addRegionDimensionToVDUVariableCoordinate
835	.a528		ad 40 03	lda $0340	                lda     vduv.workspace._40
836	.a52b		cd 3c 03	cmp $033c	                cmp     vduv.workspace._3C
837	.a52e		ad 41 03	lda $0341	                lda     vduv.workspace._41
838	.a531		ed 3d 03	sbc $033d	                sbc     vduv.workspace._3D
839	.a534		10 10		bpl $a546	                bpl     LBF40
840	.a536		ad 45 03	lda $0345	                lda     vduv.workspace._45
841	.a539		d0 03		bne $a53e	                bne     LBF38
842	.a53b		20 20 c4	jsr $c420	                jsr     mos.LC420

844	.a53e						LBF38:
845	.a53e		a2 34		ldx #$34	                ldx     #VDUVariables.mocr.dest
846	.a540		20 00 c9	jsr $c900	                jsr     mos.copyEightBytesToWorkspace28
847	.a543		4c 20 c4	jmp $c420	                jmp     mos.LC420


850	.a546						LBF40:
851	.a546		9c 47 03	stz $0347	                stz     vduv.workspace._47
852	.a549		ad 30 03	lda $0330	                lda     vduv.workspace._30
853	.a54c		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne
854	.a54f		85 da		sta $da		                sta     ZTEMP+0
855	.a551		ad 3c 03	lda $033c	                lda     vduv.workspace._3C
856	.a554		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne
857	.a557		38		sec		                sec
858	.a558		e5 da		sbc $da		                sbc     ZTEMP+0
859	.a55a		10 06		bpl $a562	                bpl     LBF5C
860	.a55c		ce 47 03	dec $0347	                dec     vduv.workspace._47
861	.a55f		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne

863	.a562						LBF5C:
864	.a562		8d 43 03	sta $0343	                sta     vduv.workspace._43
865	.a565		48		pha		                pha
866	.a566		49 ff		eor #$ff	                eor     #$ff
867	.a568		1a		inc a		                inc     a
868	.a569		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne
869	.a56c		8d 42 03	sta $0342	                sta     vduv.workspace._42
870	.a56f		68		pla		                pla
871	.a570		18		clc		                clc
872	.a571		6d 61 03	adc $0361	                adc     vduv.pixelsPerByteMinusOne
873	.a574		aa		tax		                tax
874	.a575		bd 1e e1	lda $e11e,x	                lda     mos.LE120,x
875	.a578		85 e1		sta $e1		                sta     ZTEMPD+1
876	.a57a		a2 3c		ldx #$3c	                ldx     #VDUVariables.workspace._3C
877	.a57c		a0 40		ldy #$40	                ldy     #VDUVariables.workspace._40
878	.a57e		20 9a da	jsr $da9a	                jsr     mos.LDA9C
879	.a581		8d 44 03	sta $0344	                sta     vduv.workspace._44
880	.a584		a5 d1		lda $d1		                lda     ZMASK
881	.a586		8d 46 03	sta $0346	                sta     vduv.workspace._46
882	.a589		a5 dc		lda $dc		                lda     ZTEMPB+0
883	.a58b		85 e0		sta $e0		                sta     ZTEMPD+0
884	.a58d		a2 00		ldx #$00	                ldx     #0
885	.a58f		20 ec a5	jsr $a5ec	                jsr     LBFE6
886	.a592		f0 40		beq $a5d4	                beq     LBFCE
887	.a594		ad 2a 03	lda $032a	                lda     vduv.workspace._2A
888	.a597		cd 36 03	cmp $0336	                cmp     vduv.workspace._36
889	.a59a		ad 2b 03	lda $032b	                lda     vduv.workspace._2B
890	.a59d		ed 37 03	sbc $0337	                sbc     vduv.workspace._37
891	.a5a0		50 02		bvc $a5a4	                bvc     LBF9E
892	.a5a2		49 80		eor #$80	                eor     #$80

894	.a5a4						LBF9E:
895	.a5a4		30 11		bmi $a5b7	                bmi     LBFB1

897	.a5a6						LBFA0:
898	.a5a6		20 60 db	jsr $db60	                jsr     mos.LDB62
899	.a5a9		a2 00		ldx #$00	                ldx     #0
900	.a5ab		20 d7 a5	jsr $a5d7	                jsr     LBFD1
901	.a5ae		a2 0c		ldx #$0c	                ldx     #$c
902	.a5b0		20 d7 a5	jsr $a5d7	                jsr     LBFD1
903	.a5b3		d0 f1		bne $a5a6	                bne     LBFA0
904	.a5b5		80 1d		bra $a5d4	                bra     LBFCE


907	.a5b7						LBFB1:
908	.a5b7		a2 2a		ldx #$2a	                ldx     #VDUVariables.mocr.src.min.y
909	.a5b9		a0 2e		ldy #$2e	                ldy     #VDUVariables.mocr.src.max.y
910	.a5bb		20 b0 e2	jsr $e2b0	                jsr     mos.exchangeTwoVDUBytes
911	.a5be		a2 36		ldx #$36	                ldx     #VDUVariables.mocr.dest.min.y
912	.a5c0		a0 3a		ldy #$3a	                ldy     #VDUVariables.mocr.dest.max.y
913	.a5c2		20 b0 e2	jsr $e2b0	                jsr     mos.exchangeTwoVDUBytes

915	.a5c5						LBFBF:
916	.a5c5		20 60 db	jsr $db60	                jsr     mos.LDB62
917	.a5c8		a2 00		ldx #$00	                ldx     #0
918	.a5ca		20 e1 a5	jsr $a5e1	                jsr     LBFDB
919	.a5cd		a2 0c		ldx #$0c	                ldx     #$c
920	.a5cf		20 e1 a5	jsr $a5e1	                jsr     LBFDB
921	.a5d2		d0 f1		bne $a5c5	                bne     LBFBF

923	.a5d4						LBFCE:
924	.a5d4		4c 60 db	jmp $db60	                jmp     mos.LDB62




929	.a5d7						LBFD1:
930	.a5d7		fe 2a 03	inc $032a,x	                inc     vduv.workspace._2A,x
931	.a5da		d0 10		bne $a5ec	                bne     LBFE6
932	.a5dc		fe 2b 03	inc $032b,x	                inc     vduv.workspace._2B,x
933	.a5df		80 0b		bra $a5ec	                bra     LBFE6






940	.a5e1						LBFDB:
941	.a5e1		bd 2a 03	lda $032a,x	                lda     vduv.workspace._2A,x
942	.a5e4		d0 03		bne $a5e9	                bne     LBFE3
943	.a5e6		de 2b 03	dec $032b,x	                dec     vduv.workspace._2B,x

945	.a5e9						LBFE3:
946	.a5e9		de 2a 03	dec $032a,x	                dec     vduv.workspace._2A,x






953	.a5ec						LBFE6:
954	.a5ec		bd 2a 03	lda $032a,x	                lda     vduv.workspace._2A,x
955	.a5ef		dd 2e 03	cmp $032e,x	                cmp     vduv.workspace._2E,x
956	.a5f2		d0 06		bne $a5fa	                bne     rtsBFF4
957	.a5f4		bd 2b 03	lda $032b,x	                lda     vduv.workspace._2B,x
958	.a5f7		dd 2f 03	cmp $032f,x	                cmp     vduv.workspace._2F,x

960	.a5fa						rtsBFF4:
961	.a5fa		60		rts		                rts

963							                .if version!=400&&version!=350
976							                .endif

978							                .endblock

:5	;******  Return to file: src/terminal.s65

3515							                .endif

3517							;-------------------------------------------------------------------------
3518							;
3519							; Utils/Terminal ROM service entry point.
3520							;
3521	.a5fb						utilsServiceEntryPoint:
3522							                .if version==400
3523							                ; this is the same as the MOS 5.00 code, but I didn't
3524							                ; get the if arrangement right. This needs improving.
3525	.a5fb		e0 0f		cpx #$0f	                cpx #15
3526	.a5fd		f0 01		beq $a600	                beq utilsInCorrectBank
3527	.a5ff		60		rts		                rts
3528	.a600						utilsInCorrectBank:
3529							                .endif
3530							                .if version<500
3531	.a600		c9 fe		cmp #$fe	                cmp #romServiceCallTubeSystemPostInitialisation
3532	.a602		90 56		bcc $a65a	                bcc L9DCC        ;taken if definitely not Tube-related
3533	.a604		d0 14		bne $a61a	                bne handleTubeMainInitialisation
3534	.a606						handleTubeSystemPostInitialisation:
3535	.a606		c0 00		cpy #$00	                cpy #$00
3536	.a608		f0 50		beq $a65a	                beq L9DCC

3538							                ; [Tube p28] - write out the startup message that the
3539							                ; second processor has been stuck trying to write out.
3540	.a60a						writeSecondProcessorStartupMessageLoop:
3541	.a60a		2c e0 fe	bit $fee0	                bit tube.status1
3542	.a60d		10 fb		bpl $a60a	                bpl writeSecondProcessorStartupMessageLoop
3543	.a60f		ad e1 fe	lda $fee1	                lda tube.data1
3544	.a612		f0 44		beq $a658	                beq L9DCA
3545	.a614		20 ee ff	jsr $ffee	                jsr OSWRCH
3546	.a617		4c 0a a6	jmp $a60a	                jmp writeSecondProcessorStartupMessageLoop

3548	.a61a						handleTubeMainInitialisation:
3549	.a61a		a9 7b		lda #$7b	                lda #<tubeHost.eventHandler
3550	.a61c		8d 20 02	sta $0220	                sta EVENTV+0
3551	.a61f		a9 06		lda #$06	                lda #>tubeHost.eventHandler
3552	.a621		8d 21 02	sta $0221	                sta EVENTV+1
3553	.a624		a9 16		lda #$16	                lda #<tubeBrkHandlerAddr
3554	.a626		8d 02 02	sta $0202	                sta BRKV+0
3555	.a629		a9 00		lda #$00	                lda #>tubeBrkHandlerAddr
3556	.a62b		8d 03 02	sta $0203	                sta BRKV+1
3557	.a62e		a9 8e		lda #$8e	                lda #tube.status1.S|tube.status1.M|tube.status1.J|tube.status1.I;
3558	.a630		8d e0 fe	sta $fee0	                sta tube.status1

3560							                ; Copy Tube host code into main RAM.
3561	.a633		a0 00		ldy #$00	                ldy #$00
3562	.a635						-
3563	.a635		b9 a4 b0	lda $b0a4,y	                lda tubeHost.codePage0,y
3564	.a638		99 00 04	sta $0400,y	                sta tubeHostAddr+0*256,y
3565	.a63b		b9 9b b1	lda $b19b,y	                lda tubeHost.codePages12,y
3566	.a63e		99 00 05	sta $0500,y	                sta tubeHostAddr+1*256,y
3567	.a641		b9 9b b2	lda $b29b,y	                lda tubeHost.codePages12+256,y
3568	.a644		99 00 06	sta $0600,y	                sta tubeHostAddr+2*256,y
3569	.a647		88		dey		                dey
3570	.a648		d0 eb		bne $a635	                bne -

3572	.a64a		20 1f 04	jsr $041f	                jsr tubeHost.resetTubeClaim

3574							                ; Copy BRK handler into zero page.
3575	.a64d		a2 41		ldx #$41	                ldx #size(tubeHost.brkHandler)
3576	.a64f						-
3577	.a64f		bd 63 b0	lda $b063,x	                lda tubeHost.brkHandler,x
3578	.a652		9d 16 00	sta $0016,x	                sta @w tubeBrkHandlerAddr,x
3579	.a655		ca		dex		                dex
3580	.a656		10 f7		bpl $a64f	                bpl -

3582	.a658						L9DCA:
3583	.a658		a9 00		lda #$00	                lda #$00                     ; Claim call and return

3585	.a65a						L9DCC:
3595							                .endif
3596	.a65a		c9 12		cmp #$12	                cmp #romServiceCallInitialiseFilingSystem
3597	.a65c		d0 09		bne $a667	                bne L9DEA
3598							                .if version==400
3599	.a65e		c0 03		cpy #$03	                cpy #3
3600	.a660		d0 31		bne $a693	                bne L9E16
3614							                .endif
3615	.a662		20 c5 eb	jsr $ebc5	                jsr mos.selectROMOrTAPEByOSBYTE
3616	.a665		80 f1		bra $a658	                bra L9DCA                    ; Jump to claim and return

3618	.a667						L9DEA:
3619	.a667		c9 06		cmp #$06	                cmp #romServiceCallBreakInstruction
3620	.a669		d0 29		bne $a694	                bne L9E17
3621	.a66b		ad dd df	lda $dfdd	                lda hazel.hasACCCONChanged ; Skip if ACCCON not changed
3622	.a66e		f0 09		beq $a679	                beq L9DFC
3623	.a670		9c dd df	stz $dfdd	                stz hazel.hasACCCONChanged ; Clear ACCCON changed flag
3624	.a673		ad dc df	lda $dfdc	                lda hazel.oldACCCON        ; Restore ACCCON
3625	.a676		8d 34 fe	sta $fe34	                sta ACCCON
3626	.a679						L9DFC:
3627	.a679		5a		phy		                phy
3628	.a67a		ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle
3629	.a67d		f0 06		beq $a685	                beq L9E08
3630	.a67f		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
3631	.a682		20 a3 91	jsr $91a3	                jsr closeFile
3632	.a685						L9E08:
3633	.a685		ac d5 df	ldy $dfd5	                ldy hazel.moveDestHandle
3634	.a688		f0 06		beq $a690	                beq L9E13
3635	.a68a		9c d5 df	stz $dfd5	                stz hazel.moveDestHandle
3636	.a68d		20 a3 91	jsr $91a3	                jsr closeFile
3637	.a690						L9E13:
3638	.a690		7a		ply		                ply
3639	.a691		a9 06		lda #$06	                lda #$06
3640	.a693						L9E16:
3641	.a693		60		rts		                rts
3642	.a694						L9E17:
3643	.a694		c9 26		cmp #$26	                cmp #romServiceCallCloseAllOpenFiles
3644	.a696		d0 0c		bne $a6a4	                bne L9E38
3645							                .if version!=400
3656							                .endif
3657	.a698		20 c5 eb	jsr $ebc5	                jsr mos.selectROMOrTAPEByOSBYTE
3658	.a69b		a9 00		lda #$00	                lda #$00
3659	.a69d		a8		tay		                tay
3660	.a69e		20 db a9	jsr $a9db	                jsr osfindTapeOrROM
3661	.a6a1		a9 26		lda #$26	                lda #$26
3662	.a6a3		60		rts		                rts

3664	.a6a4						L9E38:
3665	.a6a4		c9 09		cmp #$09	                cmp #romServiceCallHelp
3666							                .if version<400
3668							                .elsif version>=400
3669	.a6a6		d0 43		bne $a6eb	                bne LA304
3670							                .endif
3671	.a6a8		5a		phy		                phy
3672	.a6a9		b1 f2		lda ($f2),y	                lda ($F2),y
3673	.a6ab		c9 0d		cmp #$0d	                cmp #$0D
3674	.a6ad		d0 0f		bne $a6be	                bne L9E61
3675	.a6af		20 5e a7	jsr $a75e	                jsr L9EFC
3676	.a6b2		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
3677	>a6b5		20 20 4d 4f 53 0d		                .text "  MOS",13
3678							                .if version<400
3690							                .endif
3691	>a6bb		00				                .text 0
3692	.a6bc		80 2a		bra $a6e8	                bra L9E8B
3693	.a6be						L9E61:
3694	.a6be		a2 02		ldx #$02	                ldx #size(mosHelpSubject)-1
3695	.a6c0						L9E63:
3696	.a6c0		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
3697	.a6c2		c9 2e		cmp #$2e	                cmp #'.'
3698	.a6c4		f0 29		beq $a6ef	                beq L9E95
3699	.a6c6		29 df		and #$df	                and #$DF
3700	.a6c8		dd ec a6	cmp $a6ec,x	                cmp mosHelpSubject,x
3701	.a6cb		d0 0b		bne $a6d8	                bne L9E7B
3702	.a6cd		c8		iny		                iny
3703	.a6ce		ca		dex		                dex
3704	.a6cf		10 ef		bpl $a6c0	                bpl L9E63
3705	.a6d1		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
3706	.a6d3		20 19 e9	jsr $e919	                jsr mos.isLetter
3707	.a6d6		b0 17		bcs $a6ef	                bcs L9E95
3708	.a6d8						L9E7B:
3709	.a6d8		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
3710	.a6da		c9 0d		cmp #$0d	                cmp #13
3711	.a6dc		f0 0a		beq $a6e8	                beq L9E8B
3712	.a6de		c8		iny		                iny
3713	.a6df		c9 20		cmp #$20	                cmp #' '
3714	.a6e1		d0 f5		bne $a6d8	                bne L9E7B
3715	.a6e3		20 ee f0	jsr $f0ee	                jsr mos.skipSpacesAndCheckForCRInStringInput
3716	.a6e6		d0 d6		bne $a6be	                bne L9E61
3717	.a6e8						L9E8B:
3718	.a6e8		7a		ply		                ply
3719	.a6e9		a9 09		lda #$09	                lda #romServiceCallHelp
3720	.a6eb						LA304:
3721	.a6eb		60		rts		                rts

3723							                .if version<400
3726							                .endif

3728	>a6ec		53 4f 4d			mosHelpSubject: .text "SOM"

3730	.a6ef						L9E95:
3731	.a6ef		20 5e a7	jsr $a75e	                jsr L9EFC
3732	.a6f2		a9 49		lda #$49	                lda #<mosCommandTable
3733	.a6f4		85 b0		sta $b0		                sta terminalHELPWorkspace.tablePtr+0
3734	.a6f6		a9 83		lda #$83	                lda #>mosCommandTable
3735	.a6f8		85 b1		sta $b1		                sta terminalHELPWorkspace.tablePtr+1
3736	.a6fa						L9EA0:
3737	.a6fa		b2 b0		lda ($b0)	                lda (terminalHELPWorkspace.tablePtr)
3738	.a6fc		30 58		bmi $a756	                bmi L9EF4
3739							                .if version==400
3740	.a6fe		c9 61		cmp #$61	                cmp #'a'
3741	.a700		b0 0f		bcs $a711	                bcs LA711
3742							                .endif
3743	.a702		20 6f a7	jsr $a76f	                jsr printSpace
3744	.a705		20 6f a7	jsr $a76f	                jsr printSpace
3745	.a708		b2 b0		lda ($b0)	                lda (terminalHELPWorkspace.tablePtr)
3746	.a70a						L9EAC:
3747							                .if version==400
3748	.a70a		c9 61		cmp #$61	                cmp #'a'
3749	.a70c		b0 03		bcs $a711	                bcs LA711
3750							                .endif
3751	.a70e		20 71 a7	jsr $a771	                jsr L9F0E
3752	.a711						LA711:
3753	.a711		e6 b0		inc $b0		                inc terminalHELPWorkspace.tablePtr+0
3754	.a713		d0 02		bne $a717	                bne L9EB5
3755	.a715		e6 b1		inc $b1		                inc terminalHELPWorkspace.tablePtr+1
3756	.a717						L9EB5:
3757	.a717		b2 b0		lda ($b0)	                lda (terminalHELPWorkspace.tablePtr)
3758	.a719		10 ef		bpl $a70a	                bpl L9EAC

3760							                ; add 4 to tablePtr
3761	.a71b		a9 04		lda #$04	                lda #$04
3762	.a71d		18		clc		                clc
3763	.a71e		65 b0		adc $b0		                adc terminalHELPWorkspace.tablePtr+0
3764	.a720		85 b0		sta $b0		                sta terminalHELPWorkspace.tablePtr+0
3765	.a722		90 02		bcc $a726	                bcc +
3766	.a724		e6 b1		inc $b1		                inc terminalHELPWorkspace.tablePtr+1
3767	.a726						+
3768	.a726		20 5a e2	jsr $e25a	                jsr mos.LE25C
3769	.a729		e0 13		cpx #$13	                cpx #19
3770	.a72b		f0 24		beq $a751	                beq L9EEF
3771	.a72d						L9ECB:
3772	.a72d		20 50 e2	jsr $e250	                jsr mos.getTextCursorPositionWithColumn81
3773	.a730		8a		txa		                txa
3774	.a731		f0 c7		beq $a6fa	                beq L9EA0
3775	.a733		e0 14		cpx #$14	                cpx #20
3776	.a735		f0 c3		beq $a6fa	                beq L9EA0
3777	.a737		90 0d		bcc $a746	                bcc L9EE4
3778	.a739		e0 28		cpx #$28	                cpx #40
3779	.a73b		f0 bd		beq $a6fa	                beq L9EA0
3780	.a73d		b0 0c		bcs $a74b	                bcs L9EE9
3781	.a73f		20 5a e2	jsr $e25a	                jsr mos.LE25C
3782	.a742		e0 27		cpx #$27	                cpx #39
3783	.a744		f0 0b		beq $a751	                beq L9EEF
3784	.a746						L9EE4:
3785	.a746		20 6f a7	jsr $a76f	                jsr printSpace
3786	.a749		80 e2		bra $a72d	                bra L9ECB

3788	.a74b						L9EE9:
3789	.a74b		e0 3c		cpx #$3c	                cpx #60
3790	.a74d		90 f7		bcc $a746	                bcc L9EE4
3791	.a74f		f0 a9		beq $a6fa	                beq L9EA0
3792	.a751						L9EEF:
3793	.a751		20 81 a7	jsr $a781	                jsr printNewLine
3794	.a754		80 a4		bra $a6fa	                bra L9EA0

3796	.a756						L9EF4:
3797	.a756		20 50 e2	jsr $e250	                jsr mos.getTextCursorPositionWithColumn81
3798	.a759		8a		txa		                txa
3799	.a75a		f0 8c		beq $a6e8	                beq L9E8B
3800	.a75c		80 f3		bra $a751	                bra L9EEF

3802	.a75e						L9EFC:
3803	.a75e		5a		phy		                phy
3804	.a75f		20 05 af	jsr $af05	                jsr alwaysPrintFollowingMessage
3805	>a762		0d				                .text 13
3806							                .if version==320
3816							                .elsif version==400
3817	>a763		4d 4f 53 20 34 2e 30 30		                .text "MOS 4.00"
3834							                .endif
3835	>a76b		0d 00				                .text 13,0
3836	.a76d		7a		ply		                ply
3837	.a76e		60		rts		                rts

3839							;-------------------------------------------------------------------------
3840							;
3841	.a76f						printSpace:
3842	.a76f		a9 20		lda #$20	                lda #$20
3843	.a771						L9F0E:
3844	.a771		da		phx		                phx
3845	.a772		a6 b0		ldx $b0		                ldx $B0
3846	.a774		da		phx		                phx
3847	.a775		a6 b1		ldx $b1		                ldx $B1
3848	.a777		20 ee ff	jsr $ffee	                jsr OSWRCH
3849	.a77a						restoreB1AndB0:
3850	.a77a		86 b1		stx $b1		                stx $B1
3851	.a77c		fa		plx		                plx
3852	.a77d		86 b0		stx $b0		                stx $B0
3853	.a77f		fa		plx		                plx
3854	.a780		60		rts		                rts

3856							;-------------------------------------------------------------------------

3858	.a781						printNewLine:
3859	.a781		da		phx		                phx
3860	.a782		a6 b0		ldx $b0		                ldx $B0
3861	.a784		da		phx		                phx
3862	.a785		a6 b1		ldx $b1		                ldx $B1
3863	.a787		20 e7 ff	jsr $ffe7	                jsr OSNEWL
3864	.a78a		80 ee		bra $a77a	                bra restoreB1AndB0

3866							;-------------------------------------------------------------------------

3868							; TAPE/ROM OSARGS handler
3869							; =======================
3870	.a78c						osargsTapeOrROM:
3871	.a78c		c0 00		cpy #$00	                cpy #$00       ; Handle<>0 - read/write open file info
3872	.a78e		d0 07		bne $a797	                bne L9F3B
3873	.a790		09 00		ora #$00	                ora #$00 ; A<>0 - read/write filing system info - exit
3874	.a792		d0 02		bne $a796	                bne L9F3A

3876							; A=0, Y=0 - read current filing system
3877							; -------------------------------------
3878	.a794		a9 03		lda #$03	                lda #$03                     ; Prepare A=ROMFS
3879							                .if version!=400
3883							                .endif

3885							; TAPE/ROM FSC 6 - shut down FS
3886							; TAPE/ROM FSC 8 - OS command
3887							; TAPE/ROM FSC 10 - *INFO
3888							; -----------------------------
3889	.a796						L9F3A:
3890	.a796		60		rts		                rts

3892							; OSARGS handle<>0 - red/write open file info
3893							; -------------------------------------------
3894	.a797						L9F3B:
3895	.a797		c9 00		cmp #$00	                cmp #$00                     ; Not =PTR, exit unsupported
3896	.a799		d0 fb		bne $a796	                bne L9F3A
3897	.a79b		c0 02		cpy #$02	                cpy #$02                     ; =PTR#2 - read PTR on output handle
3898	.a79d		f0 1d		beq $a7bc	                beq L9F60

3900							; Read PTR on CFS/RFS input file
3901							; ------------------------------
3902	.a79f		a9 01		lda #$01	                lda #$01                     ; Check if this is input channel and is open
3903	.a7a1		20 a3 af	jsr $afa3	                jsr LAA68
3904	.a7a4		ad 9e 03	lda $039e	                lda $039E
3905	.a7a7		95 00		sta $00,x	                sta $00,x
3906	.a7a9		5a		phy		                phy
3907	.a7aa		ad de 03	lda $03de	                lda $03DE
3908	.a7ad		ac dd 03	ldy $03dd	                ldy $03DD
3909	.a7b0		d0 01		bne $a7b3	                bne L9F57
3910	.a7b2		3a		dec a		                dec a
3911	.a7b3						L9F57:
3912	.a7b3		88		dey		                dey
3913	.a7b4		94 01		sty $01,x	                sty $01,x
3914	.a7b6		7a		ply		                ply
3915	.a7b7						L9F5B:
3916	.a7b7		95 02		sta $02,x	                sta $02,x
3917	.a7b9		74 03		stz $03,x	                stz $03,x
3918	.a7bb		60		rts		                rts

3920							; Read PTR on TAPE output file
3921							; ----------------------------
3922	.a7bc						L9F60:
3923	.a7bc		a9 02		lda #$02	                lda #$02                     ; Check if this is output channel and is open
3924	.a7be		20 a3 af	jsr $afa3	                jsr LAA68
3925	.a7c1		ad 9d 03	lda $039d	                lda $039D                    ; Copy PTR to control block
3926	.a7c4		95 00		sta $00,x	                sta $00,x
3927	.a7c6		ad 94 03	lda $0394	                lda $0394
3928	.a7c9		95 01		sta $01,x	                sta $01,x
3929	.a7cb		ad 95 03	lda $0395	                lda $0395
3930	.a7ce		80 e7		bra $a7b7	                bra L9F5B

3932							; TAPE/ROM FSC dispatch table
3933							; ---------------------------

3935	=[]						_:=[]
3936	=[$ab1b]					_..=[LA422]          ;0 - *OPT
3937	=[$ab1b,$abb1]					_..=[LA4F1]          ;1 - EOF
3938	=[$ab1b,$abb1,$a90c]				_..=[LA110]          ;2 - */
3939	=[$ab1b,$abb1,$a90c,$a922]			_..=[LA129]          ;3 - unknown * command
3940	=[$ab1b,$abb1,$a90c,$a922,$a90c]		_..=[LA110]          ;4 - *RUN
3941	=[$ab1b,$abb1,$a90c,$a922,$a90c,$a961]		_..=[LA168]          ;5 - *CAT
3942	=[$ab1b,$abb1,$a90c,$a922,$a90c,$a961,$a796]	_..=[L9F3A]          ;6 - shut down FS
3943	=[$ab1b,$abb1,$a90c,$a922,$a90c,$a961,$a796,$a7fa]
							_..=[L9F9E]          ;7 - obtain file handle range
3944	=[$ab1b,$abb1,$a90c,$a922,$a90c,$a961,$a796,$a7fa,$a796]
							_..=[L9F3A]          ;8 - OS command
3945	=[$ab1b,$abb1,$a90c,$a922,$a90c,$a961,$a796,$a7fa,$a796,$a94e]
							_..=[LA155]          ;9 - *EX
3946	=[$ab1b,$abb1,$a90c,$a922,$a90c,$a961,$a796,$a7fa,$a796,$a94e,$a796]
							_..=[L9F3A]          ;10 - *INFO
3947	=[$ab1b,$abb1,$a90c,$a922,$a90c,$a961,$a796,$a7fa,$a796,$a94e,$a796,$a90f]
							_..=[LA113]          ;11 - *RUN command for library
3948	=[$ab1b,$abb1,$a90c,$a922,$a90c,$a961,$a796,$a7fa,$a796,$a94e,$a796,$a90f]
							tape_and_rom_dispatch_fsc_routines=_

3950	.a7d0						L9F74:
3951	>a7d0		1a b0 0b 21 0b 60 95 f9		                .byte <tape_and_rom_dispatch_fsc_routines-1
	>a7d8		95 4d 95 0e
3952	.a7dc						L9F80:
3953	>a7dc		ab ab a9 a9 a9 a9 a7 a7		                .byte >tape_and_rom_dispatch_fsc_routines-1
	>a7e4		a7 a9 a7 a9

3955							; TAPE/ROM FSC
3956							; ============
3957	.a7e8						fscTapeOrROM:
3958	.a7e8		c9 0c		cmp #$0c	                cmp #$0C                     ; function<12 - exit unchanged
3959	.a7ea		b0 aa		bcs $a796	                bcs L9F3A
3960	.a7ec		86 bc		stx $bc		                stx $BC                      ; Index into dispatch table
3961	.a7ee		aa		tax		                tax
3962	.a7ef		bd dc a7	lda $a7dc,x	                lda L9F80,x
3963	.a7f2		48		pha		                pha
3964	.a7f3		bd d0 a7	lda $a7d0,x	                lda L9F74,x
3965	.a7f6		48		pha		                pha
3966	.a7f7		a6 bc		ldx $bc		                ldx $BC
3967	.a7f9		60		rts		                rts

3969							; TAPE/ROM FSC 7 - obtain file handle range
3970							; -----------------------------------------
3971	.a7fa						L9F9E:
3972	.a7fa		a2 03		ldx #$03	                ldx #$03
3973	.a7fc		a0 03		ldy #$03	                ldy #$03
3974							                .if version!=400
3979							                .endif
3980	.a7fe		60		rts		                rts

3982	.a7ff						L9FAB:
3983	.a7ff		68		pla		                pla
3984	.a800		28		plp		                plp
3985	.a801		38		sec		                sec
3986	.a802		60		rts		                rts

3988	.a803						L9FAF:
3989	.a803		08		php		                php
3990	.a804		48		pha		                pha
3991	.a805		20 74 af	jsr $af74	                jsr LA9F3
3992	.a808		ad c2 03	lda $03c2	                lda $03C2
3993	.a80b		48		pha		                pha
3994	.a80c		20 c2 ab	jsr $abc2	                jsr LA502
3995	.a80f		68		pla		                pla
3996	.a810		b0 ed		bcs $a7ff	                bcs L9FAB
3997	.a812		f0 19		beq $a82d	                beq L9FD9
3998	.a814		a2 03		ldx #$03	                ldx #$03
3999	.a816		a9 ff		lda #$ff	                lda #$FF
4000	.a818						L9FC4:
4001	.a818		48		pha		                pha
4002	.a819		bd be 03	lda $03be,x	                lda $03BE,x
4003	.a81c		95 b0		sta $b0,x	                sta $B0,x
4004	.a81e		68		pla		                pla
4005	.a81f		35 b0		and $b0,x	                and $B0,x
4006	.a821		ca		dex		                dex
4007	.a822		10 f4		bpl $a818	                bpl L9FC4
4008	.a824		1a		inc a		                inc a
4009	.a825		d0 06		bne $a82d	                bne L9FD9
4010	.a827		20 56 af	jsr $af56	                jsr LA9B1
4011	.a82a		4c df 95	jmp $95df	                jmp badAddressError

4013	.a82d						L9FD9:
4014	.a82d		ad ca 03	lda $03ca	                lda $03CA
4015	.a830		4a		lsr a		                lsr a
4016	.a831		68		pla		                pla
4017	.a832		48		pha		                pha
4018	.a833		f0 10		beq $a845	                beq L9FF1
4019	.a835		90 15		bcc $a84c	                bcc L9FF8
4020	.a837						L9FE3:
4021	.a837		20 60 af	jsr $af60	                jsr LA9BB
4022	.a83a		20 23 b0	jsr $b023	                jsr doFollowingError
4023	>a83d		d5 4c 6f 63 6b 65 64 00		                .text $d5,"Locked",0
4024	.a845						L9FF1:
4025	.a845		90 05		bcc $a84c	                bcc L9FF8
4026	.a847		a9 03		lda #$03	                lda #$03
4027	.a849		8d 58 02	sta $0258	                sta breakAndESCAPEEffect
4028	.a84c						L9FF8:
4029	.a84c		a9 30		lda #$30	                lda #$30
4030	.a84e		25 bb		and $bb		                and $BB
4031	.a850		f0 04		beq $a856	                beq LA002
4032	.a852		a5 c1		lda $c1		                lda $C1
4033	.a854						LA000:
4034	.a854		d0 08		bne $a85e	                bne LA00A
4035	.a856						LA002:
4036							                .if version<500
4037	.a856		5a		phy		                phy
4038	.a857		20 da af	jsr $afda	                jsr LAAA4
4039	.a85a		7a		ply		                ply
4040							                .endif
4041	.a85b		20 66 ad	jsr $ad66	                jsr LA6D2
4042	.a85e						LA00A:
4043	.a85e		20 51 ae	jsr $ae51	                jsr LA8A1
4044	.a861		d0 57		bne $a8ba	                bne LA066
4045	.a863		20 7e af	jsr $af7e	                jsr LAA35
4046	.a866		2c ca 03	bit $03ca	                bit $03CA
4047	.a869		30 08		bmi $a873	                bmi LA01F
4048	.a86b		20 0b ae	jsr $ae0b	                jsr LA85B
4049	.a86e		20 1b ad	jsr $ad1b	                jsr LA678
4050	.a871		80 d9		bra $a84c	                bra L9FF8

4052	.a873						LA01F:
4053	.a873		68		pla		                pla                          ; RUN, no control block to update
4054	.a874		f0 33		beq $a8a9	                beq LA055
4055	.a876		a0 02		ldy #$02	                ldy #$02
4056	.a878						LA024:
4057	.a878		b9 bc 03	lda $03bc,y	                lda $03BC,y                  ; Copy load/exec to control block
4058	.a87b		91 c8		sta ($c8),y	                sta ($C8),y
4059	.a87d		c8		iny		                iny
4060	.a87e		c0 0a		cpy #$0a	                cpy #$0A
4061	.a880		d0 f6		bne $a878	                bne LA024
4062	.a882		ad c8 03	lda $03c8	                lda $03C8                    ; Length b0-b7=Block Length b0-b7
4063	.a885		91 c8		sta ($c8),y	                sta ($C8),y
4064	.a887		c8		iny		                iny
4065	.a888		ad c9 03	lda $03c9	                lda $03C9
4066	.a88b		18		clc		                clc
4067	.a88c		6d c6 03	adc $03c6	                adc $03C6                    ; Length b8-b15=Block Number+Block Length b8-b15
4068	.a88f		91 c8		sta ($c8),y	                sta ($C8),y
4069	.a891		c8		iny		                iny
4070	.a892		a9 00		lda #$00	                lda #$00
4071	.a894		6d c7 03	adc $03c7	                adc $03C7                    ; Length b16-b23=overflow
4072	.a897		91 c8		sta ($c8),y	                sta ($C8),y
4073	.a899		c8		iny		                iny                          ; Length b24-b31=&00
4074	.a89a		a9 00		lda #$00	                lda #$00
4075	.a89c		91 c8		sta ($c8),y	                sta ($C8),y
4076	.a89e		c8		iny		                iny
4077	.a89f						LA04B:
4078	.a89f		b9 bd 03	lda $03bd,y	                lda $03BD,y                  ; Attrs=&00000000
4079	.a8a2		91 c8		sta ($c8),y	                sta ($C8),y
4080	.a8a4		c8		iny		                iny
4081	.a8a5		c0 12		cpy #$12	                cpy #$12
4082	.a8a7		d0 f6		bne $a89f	                bne LA04B
4083	.a8a9						LA055:
4084	.a8a9		28		plp		                plp
4085	.a8aa						LA056:
4086	.a8aa		20 56 af	jsr $af56	                jsr LA9B1
4087	.a8ad						LA059:
4088	.a8ad		24 ba		bit $ba		                bit $BA                      ; If flag set, skip printing newline
4089	.a8af		30 07		bmi $a8b8	                bmi LA064
4090	.a8b1						LA05D:
4091	.a8b1		08		php		                php                          ; Print inline text
4092	.a8b2		20 d0 ae	jsr $aed0	                jsr LA923
4093	>a8b5		0d				                .byte 13                     ; Could just do JSR OSNEWL
4094	>a8b6		00				                .byte 0
4095	.a8b7		28		plp		                plp
4096	.a8b8						LA064:
4097	.a8b8		18		clc		                clc
4098	.a8b9		60		rts		                rts

4100	.a8ba						LA066:
4101	.a8ba		20 c6 ab	jsr $abc6	                jsr LA506
4102	.a8bd		d0 8d		bne $a84c	                bne L9FF8
4103	.a8bf						LA06B:
4104	.a8bf		86 f2		stx $f2		                stx $F2
4105	.a8c1		84 f3		sty $f3		                sty $F3
4106	.a8c3		a0 00		ldy #$00	                ldy #$00
4107	.a8c5		20 5c f0	jsr $f05c	                jsr mos.gsinitForFilenameParsing
4108	.a8c8		a2 00		ldx #$00	                ldx #$00
4109	.a8ca						LA076:
4110	.a8ca		20 6e f0	jsr $f06e	                jsr mos.gsreadEntryPoint
4111	.a8cd		b0 0d		bcs $a8dc	                bcs LA088
4112	.a8cf		f0 08		beq $a8d9	                beq LA085
4113	.a8d1		9d d2 03	sta $03d2,x	                sta $03D2,x
4114	.a8d4		e8		inx		                inx
4115	.a8d5		e0 0b		cpx #$0b	                cpx #$0B
4116	.a8d7		d0 f1		bne $a8ca	                bne LA076
4117	.a8d9						LA085:
4118	.a8d9		4c 7e f0	jmp $f07e	                jmp mos.badStringError

4120	.a8dc						LA088:
4121	.a8dc		9e d2 03	stz $03d2,x	                stz $03D2,x
4122	.a8df		60		rts		                rts

4124							; CFS/RFS OSFILE
4125							; ==============
4126	.a8e0						osfileTapeOrROM:
4127	.a8e0		48		pha		                pha
4128	.a8e1		86 c8		stx $c8		                stx $C8                      ; C8/9=>control block
4129	.a8e3		84 c9		sty $c9		                sty $C9
4130	.a8e5		b2 c8		lda ($c8)	                lda ($C8)                    ; Get XY=>filename
4131	.a8e7		aa		tax		                tax
4132	.a8e8		a0 01		ldy #$01	                ldy #$01
4133	.a8ea		b1 c8		lda ($c8),y	                lda ($C8),y
4134	.a8ec		a8		tay		                tay
4135	.a8ed		20 bf a8	jsr $a8bf	                jsr LA06B                    ; Parse filename
4136	.a8f0		a0 02		ldy #$02	                ldy #$02
4137	.a8f2						LA09E:
4138	.a8f2		b1 c8		lda ($c8),y	                lda ($C8),y
4139	.a8f4		99 bc 03	sta $03bc,y	                sta $03BC,y
4140	.a8f7		99 ae 00	sta $00ae,y	                sta $00AE,y
4141	.a8fa		c8		iny		                iny
4142	.a8fb		c0 0a		cpy #$0a	                cpy #$0A
4143	.a8fd		d0 f3		bne $a8f2	                bne LA09E
4144	.a8ff		68		pla		                pla
4145	.a900		f0 07		beq $a909	                beq LA0B5
4146	.a902		c9 ff		cmp #$ff	                cmp #$FF
4147	.a904		d0 b2		bne $a8b8	                bne LA064
4148	.a906		4c 03 a8	jmp $a803	                jmp L9FAF

4150	.a909						LA0B5:
4151							                .if version==400
4152	.a909		4c bd fa	jmp $fabd	                jmp mos.badCommandError
4201							                .endif

4203							; TAPE/ROM FSC 2 - */
4204							; TAPE/ROM FSC 4 - *RUN
4205							; ---------------------
4206	.a90c						LA110:
4207	.a90c		38		sec		                sec
4208	.a90d		66 ce		ror $ce		                ror $CE
4209							; TAPE/ROM FSC 11 - *RUN command for library
4210							; ------------------------------------------
4211	.a90f						LA113:
4212	.a90f		da		phx		                phx
4213	.a910		5a		phy		                phy
4214	.a911		20 bf a8	jsr $a8bf	                jsr LA06B
4215	.a914		a9 00		lda #$00	                lda #$00
4216	.a916		a2 ff		ldx #$ff	                ldx #$FF
4217	.a918		8e c2 03	stx $03c2	                stx $03C2
4218	.a91b		20 03 a8	jsr $a803	                jsr L9FAF
4219	.a91e		7a		ply		                ply
4220	.a91f		fa		plx		                plx
4221	.a920		90 05		bcc $a927	                bcc LA12E
4222							                .if version!=400
4224							                .endif

4226							; TAPE/ROM FSC 3 - unknown * command
4227							; ----------------------------------
4228	.a922						LA129:
4229	.a922		a9 0b		lda #$0b	                lda #$0B
4230	.a924		6c 1e 02	jmp ($021e)	                jmp (FSCV)

4232	.a927						LA12E:
4233							                .if version<500
4234	.a927		2c 7a 02	bit $027a	                bit tubePresence
4235	.a92a		10 09		bpl $a935	                bpl LA13C
4236	.a92c		ad c4 03	lda $03c4	                lda $03C4
4237	.a92f		2d c5 03	and $03c5	                and $03C5
4238	.a932		1a		inc a		                inc a
4239	.a933		d0 10		bne $a945	                bne LA14C
4240	.a935						LA13C:
4241							                .endif

4243	.a935		ae c2 03	ldx $03c2	                ldx $03C2
4244	.a938		ac c3 03	ldy $03c3	                ldy $03C3
4245	.a93b		a9 a4		lda #$a4	                lda #$A4
4246	.a93d		20 f4 ff	jsr $fff4	                jsr OSBYTE
4247	.a940		a9 01		lda #$01	                lda #$01
4248	.a942		6c c2 03	jmp ($03c2)	                jmp ($03C2)

4250							                .if version<500
4251	.a945						LA14C:
4252	.a945		a2 c2		ldx #$c2	                ldx #$C2
4253	.a947		a0 03		ldy #$03	                ldy #$03
4254	.a949		a9 04		lda #$04	                lda #$04
4255	.a94b		4c e6 af	jmp $afe6	                jmp LAAB0
4256							                .endif

4258							; TAPE/ROM FSC 9 - *EX
4259							; --------------------
4260	.a94e						LA155:
4261	.a94e		a9 08		lda #$08	                lda #$08
4262	.a950		04 e2		tsb $e2		                tsb $E2
4263	.a952		a5 e3		lda $e3		                lda $E3
4264	.a954		48		pha		                pha
4265	.a955		09 cc		ora #$cc	                ora #$CC
4266	.a957		85 e3		sta $e3		                sta $E3
4267	.a959		20 74 af	jsr $af74	                jsr LA9F3
4268	.a95c		68		pla		                pla
4269	.a95d		85 e3		sta $e3		                sta $E3
4270	.a95f		80 07		bra $a968	                bra LA16F

4272							; TAPE/ROM FSC 5 - *CAT
4273							; ---------------------
4274	.a961						LA168:
4275	.a961		a9 08		lda #$08	                lda #$08
4276	.a963		04 e2		tsb $e2		                tsb $E2
4277	.a965		20 74 af	jsr $af74	                jsr LA9F3
4278	.a968						LA16F:
4279	.a968		a9 00		lda #$00	                lda #$00
4280	.a96a		20 72 a9	jsr $a972	                jsr LA17C
4281							                .if version!=400
4283							                .endif
4284	.a96d						LA177:
4285	.a96d		a9 08		lda #$08	                lda #$08
4286	.a96f		14 e2		trb $e2		                trb $E2
4287	.a971						LA17B:
4288	.a971		60		rts		                rts

4290	.a972						LA17C:
4291	.a972		48		pha		                pha
4292							                .if version!=400
4295							                .endif
4296	.a973		20 eb f4	jsr $f4eb	                jsr mos.LF6FC
4297	.a976		20 f0 f4	jsr $f4f0	                jsr mos.LF701
4298	.a979		b8		clv		                clv
4299	.a97a		b0 46		bcs $a9c2	                bcs LA1DB
4300	.a97c						LA18B:
4301	.a97c		20 1b ad	jsr $ad1b	                jsr LA678
4302	.a97f		ad c6 03	lda $03c6	                lda $03C6
4303	.a982		85 b4		sta $b4		                sta $B4
4304	.a984		ad c7 03	lda $03c7	                lda $03C7
4305	.a987		85 b5		sta $b5		                sta $B5
4306	.a989		a2 ff		ldx #$ff	                ldx #$FF
4307	.a98b		8e df 03	stx $03df	                stx $03DF
4308	.a98e		64 ba		stz $ba		                stz $BA
4309	.a990		80 11		bra $a9a3	                bra LA1B7

4311	.a992						LA1A1:
4312							                .if version!=400
4315							                .endif
4316	.a992						LA1A6:
4317	.a992		20 06 f5	jsr $f506	                jsr mos.LF717
4318	.a995						LA1A9:
4319	.a995		a9 ff		lda #$ff	                lda #$FF
4320	.a997		8d c6 03	sta $03c6	                sta $03C6
4321	.a99a		8d c7 03	sta $03c7	                sta $03C7
4322	.a99d						LA1B1:
4323	.a99d		20 7e af	jsr $af7e	                jsr LAA35
4324	.a9a0		20 1b ad	jsr $ad1b	                jsr LA678
4325	.a9a3						LA1B7:
4326							                .if version!=400
4329							                .endif
4330	.a9a3		50 1d		bvc $a9c2	                bvc LA1DB
4331	.a9a5						LA1BE:
4332	.a9a5		68		pla		                pla
4333	.a9a6		48		pha		                pha
4334	.a9a7		f0 1b		beq $a9c4	                beq LA1DD
4335	.a9a9		20 09 af	jsr $af09	                jsr LA95C
4336	.a9ac		d0 e4		bne $a992	                bne LA1A1
4337	.a9ae		a9 30		lda #$30	                lda #$30
4338	.a9b0		25 bb		and $bb		                and $BB
4339	.a9b2		f0 0e		beq $a9c2	                beq LA1DB
4340	.a9b4		ad c6 03	lda $03c6	                lda $03C6
4341	.a9b7		c5 b6		cmp $b6		                cmp $B6
4342	.a9b9		d0 d7		bne $a992	                bne LA1A1
4343	.a9bb		ad c7 03	lda $03c7	                lda $03C7
4344	.a9be		c5 b7		cmp $b7		                cmp $B7
4345	.a9c0		d0 d0		bne $a992	                bne LA1A1
4346	.a9c2						LA1DB:
4347	.a9c2		68		pla		                pla
4348	.a9c3		60		rts		                rts

4350	.a9c4						LA1DD:
4351	.a9c4		50 05		bvc $a9cb	                bvc LA1E4
4352	.a9c6		a9 ff		lda #$ff	                lda #$FF
4353	.a9c8		20 68 ad	jsr $ad68	                jsr LA6D4
4354	.a9cb						LA1E4:
4355	.a9cb		a2 00		ldx #$00	                ldx #$00
4356	.a9cd		20 74 ae	jsr $ae74	                jsr LA8C4
4357							                .if version!=400
4360							                .endif
4361	.a9d0		24 bb		bit $bb		                bit $BB
4362	.a9d2		50 be		bvc $a992	                bvc LA1A6
4363	.a9d4						LA1F2:
4364	.a9d4		2c ca 03	bit $03ca	                bit $03CA
4365	.a9d7		30 bc		bmi $a995	                bmi LA1A9
4366	.a9d9		80 c2		bra $a99d	                bra LA1B1

4368							; CFS/RFS OSFIND HANDLER
4369							; ======================
4370	.a9db						osfindTapeOrROM:
4371	.a9db		85 bc		sta $bc		                sta $BC
4372	.a9dd		da		phx		                phx
4373	.a9de		5a		phy		                phy
4374	.a9df		09 00		ora #$00	                ora #$00
4375	.a9e1		d0 0f		bne $a9f2	                bne LA220
4376	.a9e3		98		tya		                tya
4377	.a9e4		d0 06		bne $a9ec	                bne LA212
4378							                .if version!=400
4382							                .endif
4383	.a9e6						LA20C:
4384	.a9e6		a9 01		lda #$01	                lda #$01
4385	.a9e8		14 e2		trb $e2		                trb $E2
4386							                .if version==400
4387	.a9ea		80 48		bra $aa34	                bra LA297
4390							                .endif
4391	.a9ec						LA212:
4392	.a9ec		4a		lsr a		                lsr a
4393	.a9ed		b0 f7		bcs $a9e6	                bcs LA20C
4394							                .if version!=400
4397							                .endif
4398	.a9ef		4c bc af	jmp $afbc	                jmp LAA81

4400							                .if version!=400
4405							                .endif

4407	.a9f2						LA220:
4408	.a9f2		20 bf a8	jsr $a8bf	                jsr LA06B
4409	.a9f5		24 bc		bit $bc		                bit $BC
4410	.a9f7		50 36		bvc $aa2f	                bvc LA260
4411	.a9f9		9c 9e 03	stz $039e	                stz $039E
4412	.a9fc		9c dd 03	stz $03dd	                stz $03DD
4413	.a9ff		9c de 03	stz $03de	                stz $03DE
4414	.aa02		a9 c1		lda #$c1	                lda #$C1
4415	.aa04		14 e2		trb $e2		                trb $E2
4416	.aa06		20 6b af	jsr $af6b	                jsr LA9E6
4417	.aa09		08		php		                php
4418	.aa0a		20 c2 ab	jsr $abc2	                jsr LA502
4419	.aa0d		20 6f ac	jsr $ac6f	                jsr LA5B7
4420	.aa10		28		plp		                plp
4421	.aa11		a2 ff		ldx #$ff	                ldx #$FF
4422	.aa13						LA241:
4423	.aa13		e8		inx		                inx
4424	.aa14		bd b2 03	lda $03b2,x	                lda $03B2,x
4425	.aa17		9d a7 03	sta $03a7,x	                sta $03A7,x
4426	.aa1a		d0 f7		bne $aa13	                bne LA241
4427	.aa1c		1a		inc a		                inc a
4428	.aa1d		04 e2		tsb $e2		                tsb $E2
4429	.aa1f		ad e9 02	lda $02e9	                lda tapeInputCurrentBlockSize+0
4430	.aa22		0d ea 02	ora $02ea	                ora tapeInputCurrentBlockSize+1
4431	.aa25		d0 04		bne $aa2b	                bne LA259
4432	.aa27		a9 40		lda #$40	                lda #$40
4433	.aa29		04 e2		tsb $e2		                tsb $E2
4434	.aa2b						LA259:
4435							                .if version==400
4436	.aa2b		a9 03		lda #$03	                lda #3
4437	.aa2d		d0 03		bne $aa32	                bne LA295
4438	.aa2f						LA260:
4439	.aa2f		4c bd fa	jmp $fabd	                jmp mos.badCommandError
4475							                .endif
4476	.aa32						LA295:
4477	.aa32		85 bc		sta $bc		                sta $BC
4478	.aa34						LA297:
4479	.aa34		7a		ply		                ply
4480	.aa35		fa		plx		                plx
4481	.aa36		a5 bc		lda $bc		                lda $BC
4482	.aa38						LA29B:
4483	.aa38		60		rts		                rts

4485							                .if version!=400
4524							                .endif

4526	.aa39						bputTapeOrROM:
4527	.aa39		da		phx		                phx
4528	.aa3a		5a		phy		                phy
4529	.aa3b		a9 01		lda #$01	                lda #$01
4530	.aa3d						LA2EE:
4531	.aa3d		20 a3 af	jsr $afa3	                jsr LAA68
4532	.aa40		a5 e2		lda $e2		                lda $E2
4533	.aa42		0a		asl a		                asl a
4534	.aa43		b0 4d		bcs $aa92	                bcs LA343
4535	.aa45		0a		asl a		                asl a
4536	.aa46		90 08		bcc $aa50	                bcc LA301
4537	.aa48		a9 80		lda #$80	                lda #$80
4538	.aa4a		04 e2		tsb $e2		                tsb $E2
4539	.aa4c		a9 fe		lda #$fe	                lda #$FE
4540	.aa4e		b0 3a		bcs $aa8a	                bcs LA33B
4541	.aa50						LA301:
4542	.aa50		ae 9e 03	ldx $039e	                ldx $039E
4543	.aa53		e8		inx		                inx
4544	.aa54		ec e9 02	cpx $02e9	                cpx tapeInputCurrentBlockSize+0
4545	.aa57		d0 2c		bne $aa85	                bne LA336
4546	.aa59		2c eb 02	bit $02eb	                bit blockFlagOfCurrentlyResidentBlock
4547	.aa5c		30 23		bmi $aa81	                bmi LA332
4548	.aa5e		ad ec 02	lda $02ec	                lda lastCharacterOfCurrentlyResidentBlock
4549	.aa61		48		pha		                pha
4550	.aa62		20 6b af	jsr $af6b	                jsr LA9E6
4551	.aa65		08		php		                php
4552	.aa66		20 67 ac	jsr $ac67	                jsr LA5AF
4553	.aa69		28		plp		                plp
4554	.aa6a		68		pla		                pla
4555	.aa6b		85 bc		sta $bc		                sta $BC
4556	.aa6d		18		clc		                clc
4557	.aa6e		2c eb 02	bit $02eb	                bit blockFlagOfCurrentlyResidentBlock
4558	.aa71		10 19		bpl $aa8c	                bpl LA33D
4559	.aa73		ad e9 02	lda $02e9	                lda tapeInputCurrentBlockSize+0
4560	.aa76		0d ea 02	ora $02ea	                ora tapeInputCurrentBlockSize+1
4561	.aa79		d0 11		bne $aa8c	                bne LA33D
4562	.aa7b		a9 40		lda #$40	                lda #$40
4563	.aa7d		04 e2		tsb $e2		                tsb $E2
4564	.aa7f		80 0b		bra $aa8c	                bra LA33D

4566	.aa81						LA332:
4567	.aa81		a9 40		lda #$40	                lda #$40
4568	.aa83		04 e2		tsb $e2		                tsb $E2
4569	.aa85						LA336:
4570	.aa85		ca		dex		                dex
4571	.aa86		18		clc		                clc
4572	.aa87		bd 00 0a	lda $0a00,x	                lda $0A00,x
4573	.aa8a						LA33B:
4574	.aa8a		85 bc		sta $bc		                sta $BC
4575	.aa8c						LA33D:
4576	.aa8c		ee 9e 03	inc $039e	                inc $039E
4577	.aa8f		4c 34 aa	jmp $aa34	                jmp LA297

4579	.aa92						LA343:
4580	.aa92		20 23 b0	jsr $b023	                jsr doFollowingError
4581	>aa95		df 45 4f 46 00			                .text $df,"EOF",0

4583							                .if version==400
4584	.aa9a						osgbpbTapeOrROM:
4585	.aa9a						bgetTapeOrROM:
4586	.aa9a						LAA9A:
4587	.aa9a		c9 04		cmp #$04	                cmp #4
4588	.aa9c		f0 02		beq $aaa0	                beq LA378
4589	.aa9e		38		sec		                sec
4590	.aa9f		60		rts		                rts
4591							                .endif

4593							                .if version!=400
4611							                .endif

4613							                .if version!=400
4625							                .endif

4627							; Call Return
4628							;  0    A=0   SEC                        - unsupported
4629							;  1    A=0   SEC  Write using new PTR   - unsupported
4630							;  2    A=         Write with current PTR
4631							;  3    A=1   SEC  Read with new PTR     - unsupported
4632							;  4    A=         Read with current PTR
4633							;  5+   A=A/2 SEC                        - unsupported

4635							; TAPE/ROM OSGBPB 2 and 4 - read/write with current PTR
4636							; -----------------------------------------------------
4637	.aaa0						LA378:
4638							                .if version!=400
4640							                .endif
4641	.aaa0		86 cc		stx $cc		                stx $CC
4642	.aaa2		84 cd		sty $cd		                sty $CD
4643	.aaa4		a0 01		ldy #$01	                ldy #$01
4644	.aaa6		b1 cc		lda ($cc),y	                lda ($CC),y
4645	.aaa8		85 c8		sta $c8		                sta $C8
4646	.aaaa		c8		iny		                iny
4647	.aaab		b1 cc		lda ($cc),y	                lda ($CC),y
4648	.aaad		85 c9		sta $c9		                sta $C9
4649							                .if version<500
4650	.aaaf		c8		iny		                iny
4651	.aab0		b1 cc		lda ($cc),y	                lda ($CC),y
4652	.aab2		c8		iny		                iny
4653	.aab3		31 cc		and ($cc),y	                and ($CC),y
4654	.aab5		1a		inc a		                inc a
4655	.aab6		2d 7a 02	and $027a	                and tubePresence
4656	.aab9		48		pha		                pha
4657							                .if version!=400
4659							                .endif
4660	.aaba		f0 0d		beq $aac9	                beq LA3A7
4661	.aabc		a6 cc		ldx $cc		                ldx $CC
4662	.aabe		a4 cd		ldy $cd		                ldy $CD
4663	.aac0		e8		inx		                inx
4664	.aac1		d0 01		bne $aac4	                bne LA39E
4665	.aac3		c8		iny		                iny
4666	.aac4						LA39E:
4667							                .if version==400
4668	.aac4		a9 01		lda #$01	                lda #1
4677							                .endif
4678	.aac6		20 e6 af	jsr $afe6	                jsr LAAB0
4679	.aac9						LA3A7:
4680							                .endif
4681	.aac9		b2 cc		lda ($cc)	                lda ($CC)
4682	.aacb		a8		tay		                tay
4683	.aacc		a9 01		lda #$01	                lda #$01
4684							                .if version!=400
4690							                .endif
4691	.aace		20 c8 af	jsr $afc8	                jsr LAA8D
4692	.aad1		b0 0b		bcs $aade	                bcs LA3C1
4693							                .if version!=400
4695							                .endif
4696							                .if version<500
4697	.aad3		68		pla		                pla
4698	.aad4		f0 05		beq $aadb	                beq LA3BE
4699	.aad6		a9 80		lda #$80	                lda #$80
4700	.aad8		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
4701	.aadb						LA3BE:
4702							                .endif
4703	.aadb		4c bc af	jmp $afbc	                jmp LAA81

4705	.aade						LA3C1:
4706							                .if version!=400
4709							                .endif
4710	.aade		24 e2		bit $e2		                bit $E2
4711	.aae0		10 0b		bpl $aaed	                bpl LA3D3
4712							                .if version<500
4713	.aae2		68		pla		                pla
4714	.aae3		f0 05		beq $aaea	                beq LA3D0
4715	.aae5		a9 80		lda #$80	                lda #$80
4716	.aae7		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
4717	.aaea						LA3D0:
4718							                .endif
4719	.aaea		4c 92 aa	jmp $aa92	                jmp LA343

4721	.aaed						LA3D3:
4722	.aaed		20 16 b0	jsr $b016	                jsr LAAE0
4723	.aaf0		f0 1e		beq $ab10	                beq LA3F6
4724	.aaf2		b2 cc		lda ($cc)	                lda ($CC)
4725	.aaf4		a8		tay		                tay
4726	.aaf5		20 39 aa	jsr $aa39	                jsr bputTapeOrROM
4727	.aaf8		b0 16		bcs $ab10	                bcs LA3F6
4728							                .if version<500
4729	.aafa		fa		plx		                plx
4730	.aafb		da		phx		                phx
4731	.aafc		f0 05		beq $ab03	                beq LA3E9
4732	.aafe		8d e5 fe	sta $fee5	                sta tube.data3
4733	.ab01		80 08		bra $ab0b	                bra LA3F1

4735	.ab03						LA3E9:
4736							                .endif
4737	.ab03		92 c8		sta ($c8)	                sta ($C8)
4738	.ab05		e6 c8		inc $c8		                inc $C8
4739	.ab07		d0 02		bne $ab0b	                bne LA3F1
4740	.ab09		e6 c9		inc $c9		                inc $C9
4741	.ab0b						LA3F1:
4742	.ab0b		20 00 b0	jsr $b000	                jsr LAACA
4743	.ab0e		80 dd		bra $aaed	                bra LA3D3

4745	.ab10						LA3F6:
4746							                .if version<500
4747	.ab10		68		pla		                pla
4748	.ab11		08		php		                php
4749	.ab12		f0 05		beq $ab19	                beq LA3FF
4750	.ab14		a9 80		lda #$80	                lda #$80
4751	.ab16		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
4752	.ab19						LA3FF:
4753	.ab19		28		plp		                plp
4754							                .endif
4755	.ab1a		60		rts		                rts

4757							                .if version!=400
4780							                .endif

4782							; TAPE/ROM FSC 0 - *OPT
4783							; ---------------------
4784	.ab1b						LA422:
4785	.ab1b		8a		txa		                txa                          ; *OPT 0
4786	.ab1c		f0 2e		beq $ab4c	                beq LA453
4787	.ab1e		e0 03		cpx #$03	                cpx #$03                     ; *OPT 3
4788	.ab20		f0 1f		beq $ab41	                beq LA448
4789	.ab22		c0 03		cpy #$03	                cpy #$03                     ; *OPT n,3+ - error Bad command (*BUG* should be Bad option)
4790	.ab24		b0 06		bcs $ab2c	                bcs LA433
4791	.ab26		ca		dex		                dex                          ; *OPT 1
4792	.ab27		f0 06		beq $ab2f	                beq LA436
4793	.ab29		ca		dex		                dex                          ; *OPT 2
4794	.ab2a		f0 0a		beq $ab36	                beq LA43D
4795	.ab2c						LA433:
4796	.ab2c		4c bd fa	jmp $fabd	                jmp mos.badCommandError ; *OPT 4+ - error Bad command (*BUG* should be Bad option)

4798							; *OPT 1 - set message level
4799							; --------------------------
4800	.ab2f						LA436:
4801	.ab2f		a9 33		lda #$33	                lda #$33
4802	.ab31		c8		iny		                iny
4803	.ab32		c8		iny		                iny
4804	.ab33		c8		iny		                iny
4805	.ab34		80 02		bra $ab38	                bra LA43F

4807							; *OPT 2 - set error response level
4808							; ---------------------------------
4809	.ab36						LA43D:
4810	.ab36		a9 cc		lda #$cc	                lda #$CC
4811	.ab38						LA43F:
4812	.ab38		c8		iny		                iny
4813	.ab39		25 e3		and $e3		                and $E3
4814	.ab3b						LA442:
4815	.ab3b		19 4f ab	ora $ab4f,y	                ora LA456,y
4816	.ab3e		85 e3		sta $e3		                sta $E3
4817	.ab40		60		rts		                rts

4819							; *OPT 3 - set interblock gap
4820							; ---------------------------
4821	.ab41						LA448:
4822	.ab41		98		tya		                tya                          ; *OPT 3,128+ - set to default
4823	.ab42		30 02		bmi $ab46	                bmi LA44D    ;
4824	.ab44		d0 02		bne $ab48	                bne LA44F                    ; *OPT 3,<>0 - use setting
4825	.ab46						LA44D:
4826	.ab46		a9 19		lda #$19	                lda #$19                     ; *OPT 3,0 or *OPT 3,128+ - use default of 2.5 sec
4827	.ab48						LA44F:
4828	.ab48		8d d1 03	sta $03d1	                sta $03D1                    ; Set inter-block gap
4829	.ab4b		60		rts		                rts

4831	.ab4c						LA453:
4832	.ab4c		a8		tay		                tay
4833	.ab4d		80 ec		bra $ab3b	                bra LA442

4835	.ab4f						LA456:
4836							                ; LDA ($00,x)
4837							                ; EQUB $22
4838							                ; ORA ($00),y
4839							                ; DEY
4840							                ; CPY LC0C6
4841	>ab4f		a1				                .byte $A1
4842	>ab50		00				                .byte $00
4843	>ab51		22				                .byte $22
4844	>ab52		11				                .byte $11
4845	>ab53		00				                .byte $00
4846	>ab54		88				                .byte $88
4847	>ab55		cc				                .byte $CC

4849							                .if version!=400
4885							                .endif

4887	.ab56						LA492:
4888							                .if version==400
4889	.ab56		20 ff f4	jsr $f4ff	                jsr $f4ff
4890	.ab59		a8		tay		                tay
4891	.ab5a		18		clc		                clc
4892	.ab5b		a6 c2		ldx $c2		                ldx $c2
4893	.ab5d		ca		dex		                dex
4894	.ab5e		f0 50		beq $abb0	                beq LA4F0
4895	.ab60		ca		dex		                dex
4896	.ab61		d0 11		bne $ab74	                bne LA4A8
4901							                .endif
4902	.ab63		98		tya		                tya
4903	.ab64		20 8d af	jsr $af8d	                jsr LAA44
4904	.ab67		a0 03		ldy #$03	                ldy #$03
4905	.ab69		c9 2a		cmp #$2a	                cmp #$2A
4906	.ab6b		f0 41		beq $abae	                beq LA4EE
4907	.ab6d		20 7b af	jsr $af7b	                jsr LAA1C
4908	.ab70		a0 01		ldy #$01	                ldy #$01
4909	.ab72		80 3a		bra $abae	                bra LA4EE

4911	.ab74						LA4A8:
4912	.ab74		ca		dex		                dex
4913	.ab75		d0 03		bne $ab7a	                bne LA4B5
4914							                .if version!=400
4916							                .endif
4917	.ab77		84 bd		sty $bd		                sty $BD
4918	.ab79		60		rts		                rts

4920							                .if version!=400
4925							                .endif

4927	.ab7a						LA4B5:
4928	.ab7a		ca		dex		                dex
4929	.ab7b		d0 27		bne $aba4	                bne LA4E1
4930							                .if version!=400
4932							                .endif
4933	.ab7d		98		tya		                tya
4934	.ab7e		20 42 ad	jsr $ad42	                jsr LA6A9
4935	.ab81		a4 bc		ldy $bc		                ldy $BC
4936	.ab83		e6 bc		inc $bc		                inc $BC
4937	.ab85		24 bd		bit $bd		                bit $BD
4938	.ab87		30 0d		bmi $ab96	                bmi LA4D3
4939							                .if version<500
4940	.ab89		20 f2 af	jsr $aff2	                jsr LAABC
4941	.ab8c		f0 05		beq $ab93	                beq LA4D0
4942	.ab8e		8e e5 fe	stx $fee5	                stx tube.data3
4943	.ab91		80 03		bra $ab96	                bra LA4D3

4945	.ab93						LA4D0:
4946	.ab93		8a		txa		                txa
4947							                .endif
4948	.ab94		91 b0		sta ($b0),y	                sta ($B0),y
4949	.ab96						LA4D3:
4950	.ab96		c8		iny		                iny
4951	.ab97		cc c8 03	cpy $03c8	                cpy $03C8
4952	.ab9a		d0 14		bne $abb0	                bne LA4F0
4953	.ab9c		a9 01		lda #$01	                lda #$01
4954	.ab9e		85 bc		sta $bc		                sta $BC
4955	.aba0		a0 05		ldy #$05	                ldy #$05
4956	.aba2		80 0a		bra $abae	                bra LA4EE

4958	.aba4						LA4E1:
4959	.aba4		98		tya		                tya
4960	.aba5		20 42 ad	jsr $ad42	                jsr LA6A9
4961	.aba8		c6 bc		dec $bc		                dec $BC
4962	.abaa		10 04		bpl $abb0	                bpl LA4F0
4963							                .if version!=400
4966							                .endif
4967	.abac		a0 00		ldy #$00	                ldy #$00
4968	.abae						LA4EE:
4969	.abae		84 c2		sty $c2		                sty $C2
4970	.abb0						LA4F0:
4971	.abb0		60		rts		                rts

4973							; TAPE/ROM FSC 1 - =EOF
4974							; ---------------------
4975	.abb1						LA4F1:
4976	.abb1		48		pha		                pha
4977	.abb2		5a		phy		                phy
4978	.abb3		8a		txa		                txa
4979	.abb4		a8		tay		                tay
4980	.abb5		a9 03		lda #$03	                lda #$03                     ; Check if this channel is open for anything
4981	.abb7		20 a3 af	jsr $afa3	                jsr LAA68
4982	.abba		a5 e2		lda $e2		                lda $E2                      ; Get EOF flag
4983	.abbc		29 40		and #$40	                and #$40
4984	.abbe		aa		tax		                tax                          ; Return in X
4985	.abbf		7a		ply		                ply
4986	.abc0		68		pla		                pla
4987	.abc1		60		rts		                rts

4989	.abc2						LA502:
4990	.abc2		64 b4		stz $b4		                stz $B4
4991	.abc4		64 b5		stz $b5		                stz $B5
4992	.abc6						LA506:
4993	.abc6		46 ce		lsr $ce		                lsr $CE
4994	.abc8		a5 b4		lda $b4		                lda $B4
4995	.abca		48		pha		                pha
4996	.abcb		85 b6		sta $b6		                sta $B6
4997	.abcd		a5 b5		lda $b5		                lda $B5
4998	.abcf		48		pha		                pha
4999	.abd0		85 b7		sta $b7		                sta $B7
5000	.abd2		20 d0 ae	jsr $aed0	                jsr LA923
5001	>abd5		53 65 61 72 63 68 69 6e		                .text "Searching",13,0
	>abdd		67 0d 00
5002	.abe0		a9 ff		lda #$ff	                lda #$ff
5003	.abe2		20 72 a9	jsr $a972	                jsr LA17C
5004	.abe5		68		pla		                pla
5005	.abe6		85 b5		sta $b5		                sta $B5
5006	.abe8		68		pla		                pla
5007	.abe9		85 b4		sta $b4		                sta $B4
5008	.abeb		a5 b6		lda $b6		                lda $B6
5009	.abed		05 b7		ora $b7		                ora $B7
5010	.abef		d0 2b		bne $ac1c	                bne LA564
5011	.abf1		64 b4		stz $b4		                stz $B4
5012	.abf3		64 b5		stz $b5		                stz $B5
5013							                .if version!=400
5016							                .endif
5017	.abf5		70 1c		bvs $ac13	                bvs LA55B
5018							                .if version!=400
5020							                .endif
5021	.abf7		24 ce		bit $ce		                bit $CE
5022	.abf9		50 0a		bvc $ac05	                bvc notFoundError
5023	.abfb		38		sec		                sec
5024	.abfc						rtsA544:
5025	.abfc		60		rts		                rts

5027							;-------------------------------------------------------------------------

5029	.abfd						openFileForReading:
5030	.abfd		a9 40		lda #$40	                lda #$40                     ;open for reading
5031	.abff		20 ce ff	jsr $ffce	                jsr OSFIND
5032	.ac02		a8		tay		                tay
5033	.ac03		d0 f7		bne $abfc	                bne rtsA544
5034	.ac05						notFoundError:
5035	.ac05		20 23 b0	jsr $b023	                jsr doFollowingError
5036	>ac08		d6 4e 6f 74 20 66 6f 75		                .text $d6,"Not found",0
	>ac10		6e 64 00

5038							;-------------------------------------------------------------------------

5040	.ac13						LA55B:
5041	.ac13		a5 c1		lda $c1		                lda $C1
5042	.ac15		d0 05		bne $ac1c	                bne LA564
5043	.ac17		a2 b1		ldx #$b1	                ldx #$B1
5044	.ac19		20 96 af	jsr $af96	                jsr LAA4D
5045	.ac1c						LA564:
5046	.ac1c		a0 ff		ldy #$ff	                ldy #$FF
5047	.ac1e		8c df 03	sty $03df	                sty $03DF
5048	.ac21		18		clc		                clc
5049	.ac22		60		rts		                rts

5051	.ac23						LA56B:
5052	.ac23		f0 17		beq $ac3c	                beq LA584
5053	.ac25		48		pha		                pha
5054	.ac26		a9 07		lda #$07	                lda #fscFileHandleRange
5055	.ac28		20 d4 ef	jsr $efd4	                jsr mos.callFSCV
5056	.ac2b		68		pla		                pla
5057	.ac2c		18		clc		                clc
5058	.ac2d		08		php		                php
5059	.ac2e		78		sei		                sei
5060	.ac2f		85 fa		sta $fa		                sta $FA
5061	.ac31		c4 fa		cpy $fa		                cpy $FA
5062	.ac33		90 06		bcc $ac3b	                bcc LA583
5063	.ac35		e4 fa		cpx $fa		                cpx $FA
5064	.ac37		90 06		bcc $ac3f	                bcc LA587
5065	.ac39		f0 04		beq $ac3f	                beq LA587
5066	.ac3b						LA583:
5067	.ac3b		28		plp		                plp
5068	.ac3c						LA584:
5069	.ac3c		68		pla		                pla
5070	.ac3d		68		pla		                pla
5071	.ac3e		60		rts		                rts

5073	.ac3f						LA587:
5074	.ac3f		28		plp		                plp
5075	.ac40		a9 00		lda #$00	                lda #$00
5076	.ac42		60		rts		                rts

5078	.ac43						LA58B:
5079	.ac43		ad 56 02	lda $0256	                lda execFileHandle
5080	.ac46		20 23 ac	jsr $ac23	                jsr LA56B
5081	.ac49						starEXEC:
5082	.ac49		08		php		                php
5083	.ac4a		5a		phy		                phy
5084	.ac4b		ac 56 02	ldy $0256	                ldy execFileHandle
5085	.ac4e		8d 56 02	sta $0256	                sta execFileHandle
5086	.ac51		f0 03		beq $ac56	                beq LA59E
5087	.ac53		20 ce ff	jsr $ffce	                jsr OSFIND
5088	.ac56						LA59E:
5089	.ac56		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
5090	.ac59		7a		ply		                ply
5091	.ac5a		28		plp		                plp
5092	.ac5b		f0 09		beq $ac66	                beq LA5AE
5093	.ac5d		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
5094	.ac60		20 fd ab	jsr $abfd	                jsr openFileForReading
5095	.ac63		8d 56 02	sta $0256	                sta execFileHandle
5096	.ac66						LA5AE:
5097	.ac66		60		rts		                rts

5099	.ac67						LA5AF:
5100	.ac67		a2 a6		ldx #$a6	                ldx #$A6
5101	.ac69		20 96 af	jsr $af96	                jsr LAA4D
5102	.ac6c		20 1b ad	jsr $ad1b	                jsr LA678
5103	.ac6f						LA5B7:
5104	.ac6f		ad ca 03	lda $03ca	                lda $03CA
5105	.ac72		4a		lsr a		                lsr a
5106	.ac73		90 03		bcc $ac78	                bcc LA5C0
5107	.ac75		4c 37 a8	jmp $a837	                jmp L9FE3

5109	.ac78						LA5C0:
5110	.ac78		ad dd 03	lda $03dd	                lda $03DD
5111	.ac7b		85 b4		sta $b4		                sta $B4
5112	.ac7d		ad de 03	lda $03de	                lda $03DE
5113	.ac80		85 b5		sta $b5		                sta $B5
5114	.ac82		64 b0		stz $b0		                stz $B0
5115	.ac84		a9 0a		lda #$0a	                lda #$0A
5116	.ac86		85 b1		sta $b1		                sta $B1
5117	.ac88		a9 ff		lda #$ff	                lda #$FF
5118	.ac8a		85 b2		sta $b2		                sta $B2
5119	.ac8c		85 b3		sta $b3		                sta $B3
5120	.ac8e		20 66 ad	jsr $ad66	                jsr LA6D2
5121	.ac91		20 51 ae	jsr $ae51	                jsr LA8A1
5122	.ac94		d0 25		bne $acbb	                bne LA603
5123	.ac96		ad ff 0a	lda $0aff	                lda $0AFF
5124	.ac99		8d ec 02	sta $02ec	                sta lastCharacterOfCurrentlyResidentBlock
5125	.ac9c		20 7e af	jsr $af7e	                jsr LAA35
5126	.ac9f		8e dd 03	stx $03dd	                stx $03DD
5127	.aca2		8c de 03	sty $03de	                sty $03DE
5128	.aca5		a2 02		ldx #$02	                ldx #$02
5129	.aca7						LA5EF:
5130	.aca7		bd c8 03	lda $03c8,x	                lda $03C8,x
5131	.acaa		9d e9 02	sta $02e9,x	                sta tapeInputCurrentBlockSize+0,x
5132	.acad		ca		dex		                dex
5133	.acae		10 f7		bpl $aca7	                bpl LA5EF
5134	.acb0		2c eb 02	bit $02eb	                bit blockFlagOfCurrentlyResidentBlock
5135	.acb3		10 03		bpl $acb8	                bpl LA600
5136	.acb5		20 ad a8	jsr $a8ad	                jsr LA059
5137	.acb8						LA600:
5138	.acb8		4c 6a af	jmp $af6a	                jmp LA9C5

5140	.acbb						LA603:
5141	.acbb		20 c6 ab	jsr $abc6	                jsr LA506
5142	.acbe		80 af		bra $ac6f	                bra LA5B7

5144	.acc0						LA608:
5145	.acc0		c9 2a		cmp #$2a	                cmp #'*'
5146	.acc2		f0 22		beq $ace6	                beq LA643
5147	.acc4		c9 23		cmp #$23	                cmp #'#'
5148	.acc6		d0 0f		bne $acd7	                bne LA61F
5149	.acc8		ee c6 03	inc $03c6	                inc $03C6
5150	.accb		d0 03		bne $acd0	                bne LA618
5151	.accd		ee c7 03	inc $03c7	                inc $03C7
5152	.acd0						LA618:
5153	.acd0		a2 ff		ldx #$ff	                ldx #$FF
5154	.acd2		2c 5e e3	bit $e35e	                bit mos.valueFF
5155	.acd5		80 3c		bra $ad13	                bra LA670

5157	.acd7						LA61F:
5158	.acd7		20 6d a9	jsr $a96d	                jsr LA177
5159	.acda		20 23 b0	jsr $b023	                jsr doFollowingError
5160	>acdd		d7				                .byte $D7
5161	>acde		42 61 64 20 52 4f 4d		                .text "Bad ROM"
5162	>ace5		00				                .byte 0

5164	.ace6						LA62E:
5165							                .if version!=400
5176							                .endif
5177	.ace6						LA643:
5178	.ace6		20 8f af	jsr $af8f	                jsr LAA46
5179	.ace9						LA646:
5180	.ace9		20 32 ad	jsr $ad32	                jsr LA694
5181	.acec		50 1a		bvc $ad08	                bvc LA665
5182	.acee		99 b2 03	sta $03b2,y	                sta $03B2,y
5183	.acf1		f0 06		beq $acf9	                beq LA656
5184	.acf3		c8		iny		                iny
5185	.acf4		c0 0b		cpy #$0b	                cpy #$0B
5186	.acf6		d0 f1		bne $ace9	                bne LA646
5187	.acf8		88		dey		                dey
5188	.acf9						LA656:
5189	.acf9		a2 0c		ldx #$0c	                ldx #$0C
5190	.acfb						LA658:
5191	.acfb		20 32 ad	jsr $ad32	                jsr LA694
5192	.acfe		50 08		bvc $ad08	                bvc LA665
5193	.ad00		9d b2 03	sta $03b2,x	                sta $03B2,x
5194	.ad03		e8		inx		                inx
5195	.ad04		e0 1f		cpx #$1f	                cpx #$1F
5196	.ad06		d0 f3		bne $acfb	                bne LA658
5197	.ad08						LA665:
5198	.ad08		98		tya		                tya
5199	.ad09		aa		tax		                tax
5200	.ad0a		9e b2 03	stz $03b2,x	                stz $03B2,x
5201	.ad0d		a5 be		lda $be		                lda $BE
5202	.ad0f		05 bf		ora $bf		                ora $BF
5203	.ad11		85 c1		sta $c1		                sta $C1
5204	.ad13						LA670:
5205	.ad13		20 8d af	jsr $af8d	                jsr LAA44
5206	.ad16		84 c2		sty $c2		                sty $C2
5207	.ad18		8a		txa		                txa
5208							                .if version<500
5209	.ad19		d0 4a		bne $ad65	                bne LA6CC
5212							                .endif
5213	.ad1b						LA678:
5214							                .if version!=400
5217							                .endif
5218	.ad1b						LA67D:
5219	.ad1b		20 ff f4	jsr $f4ff	                jsr mos.LF710
5220	.ad1e		c9 2b		cmp #$2b	                cmp #$2B
5221	.ad20		d0 9e		bne $acc0	                bne LA608
5222	.ad22		a9 08		lda #$08	                lda #$08
5223	.ad24		25 e2		and $e2		                and $E2
5224	.ad26		f0 03		beq $ad2b	                beq LA68D
5225	.ad28		20 b1 a8	jsr $a8b1	                jsr LA05D
5226	.ad2b						LA68D:
5227	.ad2b		20 f0 f4	jsr $f4f0	                jsr mos.LF701
5228	.ad2e		90 eb		bcc $ad1b	                bcc LA67D
5229	.ad30		b8		clv		                clv
5230	.ad31		60		rts		                rts

5232	.ad32						LA694:
5233							                .if version!=400
5236							                .endif
5237	.ad32		da		phx		                phx
5238	.ad33		5a		phy		                phy
5239	.ad34		20 ff f4	jsr $f4ff	                jsr mos.LF710
5240	.ad37		85 bd		sta $bd		                sta $BD
5241	.ad39		a9 ff		lda #$ff	                lda #$FF
5242	.ad3b		85 c0		sta $c0		                sta $C0
5243	.ad3d		7a		ply		                ply
5244	.ad3e		fa		plx		                plx
5245	.ad3f						LA6A6:
5246	.ad3f		20 7d ad	jsr $ad7d	                jsr LA778
5247	.ad42						LA6A9:
5248							                .if version<500
5249	.ad42		08		php		                php
5250	.ad43		48		pha		                pha
5251	.ad44		38		sec		                sec
5252	.ad45		66 cb		ror $cb		                ror $CB
5253	.ad47		45 bf		eor $bf		                eor $BF
5254	.ad49		85 bf		sta $bf		                sta $BF
5255	.ad4b						LA6B2:
5256	.ad4b		a5 bf		lda $bf		                lda $BF
5257	.ad4d		18		clc		                clc
5258	.ad4e		10 0b		bpl $ad5b	                bpl LA6C2
5259	.ad50		49 08		eor #$08	                eor #$08
5260	.ad52		85 bf		sta $bf		                sta $BF
5261	.ad54		a5 be		lda $be		                lda $BE
5262	.ad56		49 10		eor #$10	                eor #$10
5263	.ad58		85 be		sta $be		                sta $BE
5264	.ad5a		38		sec		                sec
5265	.ad5b						LA6C2:
5266	.ad5b		26 be		rol $be		                rol $BE
5267	.ad5d		26 bf		rol $bf		                rol $BF
5268	.ad5f		46 cb		lsr $cb		                lsr $CB
5269	.ad61		d0 e8		bne $ad4b	                bne LA6B2
5270	.ad63		68		pla		                pla
5271	.ad64		28		plp		                plp
5272							                .endif
5273	.ad65						LA6CC:
5274	.ad65		60		rts		                rts

5276							                .if version!=400
5280							                .endif

5282	.ad66						LA6D2:                                       ;AAAB in MOS 5.00
5283	.ad66		a9 00		lda #$00	                lda #$00
5284	.ad68						LA6D4:
5285	.ad68		85 bd		sta $bd		                sta $BD
5286	.ad6a		a2 00		ldx #$00	                ldx #$00
5287	.ad6c		64 bc		stz $bc		                stz $BC
5288	.ad6e		50 0a		bvc $ad7a	                bvc LA6E6
5289	.ad70		ad c8 03	lda $03c8	                lda $03C8
5290	.ad73		0d c9 03	ora $03c9	                ora $03C9
5291	.ad76		f0 02		beq $ad7a	                beq LA6E6
5292	.ad78		a2 04		ldx #$04	                ldx #$04
5293	.ad7a						LA6E6:
5294	.ad7a		86 c2		stx $c2		                stx $C2
5295	.ad7c						rtsAAC1:
5296	.ad7c		60		rts		                rts

5298							                .if version!=400
5385							                .endif

5387	.ad7d						LA778:
5388	.ad7d		20 30 ae	jsr $ae30	                jsr LA880
5389	.ad80		24 c0		bit $c0		                bit $C0
5390	.ad82		10 f9		bpl $ad7d	                bpl LA778
5391	.ad84		64 c0		stz $c0		                stz $C0
5392	.ad86		a5 bd		lda $bd		                lda $BD
5393	.ad88		60		rts		                rts

5395							                .if version!=400
5413							                .endif

5415	.ad89						LA79B:
5416	.ad89		ad c6 03	lda $03c6	                lda $03C6
5417	.ad8c		0d c7 03	ora $03c7	                ora $03C7
5418	.ad8f		f0 05		beq $ad96	                beq LA7A8
5419	.ad91		2c df 03	bit $03df	                bit $03DF
5420	.ad94		10 03		bpl $ad99	                bpl LA7AB
5421	.ad96						LA7A8:
5422	.ad96		20 ad a8	jsr $a8ad	                jsr LA059
5423	.ad99						LA7AB:
5424	.ad99		a0 00		ldy #$00	                ldy #$00
5425	.ad9b		64 ba		stz $ba		                stz $BA
5426	.ad9d		ad ca 03	lda $03ca	                lda $03CA
5427	.ada0		8d df 03	sta $03df	                sta $03DF
5428	.ada3		20 9b ec	jsr $ec9b	                jsr mos.LEF1B
5429	.ada6		f0 62		beq $ae0a	                beq LA821
5430	.ada8		a9 0d		lda #$0d	                lda #$0D
5431	.adaa		20 ee ff	jsr $ffee	                jsr OSWRCH
5432	.adad						LA7BF:
5433	.adad		b9 b2 03	lda $03b2,y	                lda $03B2,y
5434	.adb0		f0 10		beq $adc2	                beq LA7D4
5435	.adb2		c9 20		cmp #$20	                cmp #$20
5436	.adb4		90 04		bcc $adba	                bcc LA7CC
5437	.adb6		c9 7f		cmp #$7f	                cmp #$7F
5438	.adb8		90 02		bcc $adbc	                bcc LA7CE
5439	.adba						LA7CC:
5440	.adba		a9 3f		lda #$3f	                lda #$3F
5441	.adbc						LA7CE:
5442	.adbc		20 ee ff	jsr $ffee	                jsr OSWRCH
5443	.adbf		c8		iny		                iny
5444	.adc0		d0 eb		bne $adad	                bne LA7BF

5446	.adc2						LA7D4:
5447							                .if version!=400
5450							                .endif
5451	.adc2		24 bb		bit $bb		                bit $BB
5452	.adc4		50 44		bvc $ae0a	                bvc LA821
5453	.adc6						LA7DD:
5454	.adc6		20 6f a7	jsr $a76f	                jsr printSpace
5455	.adc9		c8		iny		                iny
5456	.adca		c0 0b		cpy #$0b	                cpy #$0B
5457	.adcc		90 f4		bcc $adc2	                bcc LA7D4
5458	.adce		ad c6 03	lda $03c6	                lda $03C6
5459	.add1		aa		tax		                tax
5460	.add2		20 1a ae	jsr $ae1a	                jsr printHexByte
5461	.add5		2c ca 03	bit $03ca	                bit $03CA
5462	.add8		10 30		bpl $ae0a	                bpl LA821
5463	.adda		8a		txa		                txa
5464	.addb		18		clc		                clc
5465	.addc		6d c9 03	adc $03c9	                adc $03C9
5466	.addf		20 15 ae	jsr $ae15	                jsr printSpaceThenPrintHexByte
5467	.ade2						LA7F9:
5468	.ade2		ad c8 03	lda $03c8	                lda $03C8
5469	.ade5		20 1a ae	jsr $ae1a	                jsr printHexByte
5470	.ade8		24 bb		bit $bb		                bit $BB
5471	.adea		50 1e		bvc $ae0a	                bvc LA821
5472	.adec		a2 04		ldx #$04	                ldx #$04
5473	.adee						LA805:
5474	.adee		20 6f a7	jsr $a76f	                jsr printSpace
5475	.adf1		ca		dex		                dex
5476	.adf2		d0 fa		bne $adee	                bne LA805
5477	.adf4		a2 0f		ldx #$0f	                ldx #$0F
5478	.adf6		20 fe ad	jsr $adfe	                jsr LA815
5479	.adf9		20 6f a7	jsr $a76f	                jsr printSpace
5480	.adfc		a2 13		ldx #$13	                ldx #$13
5481	.adfe						LA815:
5482	.adfe		a0 04		ldy #$04	                ldy #$04
5483	.ae00						LA817:
5484	.ae00		bd b2 03	lda $03b2,x	                lda $03B2,x
5485	.ae03		20 1a ae	jsr $ae1a	                jsr printHexByte
5486	.ae06		ca		dex		                dex
5487	.ae07		88		dey		                dey
5488	.ae08		d0 f6		bne $ae00	                bne LA817
5489	.ae0a						LA821:
5490	.ae0a		60		rts		                rts

5492							                .if version!=400
5514							                .endif

5516							;-------------------------------------------------------------------------

5518							                .if version==350
5520							                .endif

5522							;-------------------------------------------------------------------------


5525	.ae0b						LA85B:
5526	.ae0b		a2 fd		ldx #$fd	                ldx #$FD
5527	.ae0d						LA85D:
5528	.ae0d		f6 b4		inc $b4,x	                inc $B4,x
5529	.ae0f		d0 03		bne $ae14	                bne LA864
5530	.ae11		e8		inx		                inx
5531	.ae12		d0 f9		bne $ae0d	                bne LA85D
5532	.ae14						LA864:
5533	.ae14		60		rts		                rts

5535							;-------------------------------------------------------------------------

5537	.ae15						printSpaceThenPrintHexByte:
5538	.ae15		48		pha		                pha
5539	.ae16		20 6f a7	jsr $a76f	                jsr printSpace
5540	.ae19		68		pla		                pla
5541	.ae1a						printHexByte:
5542	.ae1a		48		pha		                pha
5543							                .if version==350
5545							                .else
5546	.ae1b		4a		lsr a		                lsr a
5547	.ae1c		4a		lsr a		                lsr a
5548	.ae1d		4a		lsr a		                lsr a
5549	.ae1e		4a		lsr a		                lsr a
5550							                .endif
5551	.ae1f		20 23 ae	jsr $ae23	                jsr printHexDigit
5552	.ae22		68		pla		                pla
5553	.ae23						printHexDigit:
5554	.ae23		29 0f		and #$0f	                and #$0F
5555	.ae25		09 30		ora #$30	                ora #'0'                     ;+'0'
5556	.ae27		c9 3a		cmp #$3a	                cmp #'9'+1
5557	.ae29		90 02		bcc $ae2d	                bcc LA87D                    ;taken if <='9'
5558	.ae2b		69 06		adc #$06	                adc #'A'-('9'+1)-1           ;adjust - -1 because C set
5559	.ae2d						LA87D:
5560	.ae2d		4c ee ff	jmp $ffee	                jmp OSWRCH

5562							;-------------------------------------------------------------------------

5564	.ae30						LA880:
5565	.ae30		08		php		                php
5566	.ae31		24 eb		bit $eb		                bit $EB
5567	.ae33		30 04		bmi $ae39	                bmi LA889
5568	.ae35		24 ff		bit $ff		                bit $FF
5569	.ae37		30 02		bmi $ae3b	                bmi LA88B
5570	.ae39						LA889:
5571	.ae39		28		plp		                plp
5572	.ae3a		60		rts		                rts

5574	.ae3b						LA88B:
5575	.ae3b		20 6d a9	jsr $a96d	                jsr LA177
5576	.ae3e		20 60 af	jsr $af60	                jsr LA9BB
5577	.ae41						escapeError:
5578	.ae41		a9 7e		lda #$7e	                lda #$7E
5579	.ae43		20 f4 ff	jsr $fff4	                jsr OSBYTE
5580	.ae46		20 23 b0	jsr $b023	                jsr doFollowingError
5581	>ae49		11				                .byte $11
5582	>ae4a		45 73 63 61 70 65		                .text "Escape"
5583	>ae50		00				                .byte $00

5585							;-------------------------------------------------------------------------

5587	.ae51						LA8A1:
5588	.ae51		98		tya		                tya
5589	.ae52		f0 0d		beq $ae61	                beq LA8B1
5590	.ae54		20 d0 ae	jsr $aed0	                jsr LA923
5591	>ae57		0d				                .byte $0D
5592	>ae58		4c 6f 61 64 69 6e 67		                .text "Loading"
5593	>ae5f		0d				                .byte $0D
5594	>ae60		00				                .byte $00
5595	.ae61						LA8B1:
5596	.ae61		64 ba		stz $ba		                stz $BA                      ; :
5597	.ae63		a2 ff		ldx #$ff	                ldx #$FF
5598	.ae65		a5 c1		lda $c1		                lda $C1
5599	.ae67		d0 0b		bne $ae74	                bne LA8C4
5600	.ae69		20 09 af	jsr $af09	                jsr LA95C
5601	.ae6c		08		php		                php
5602	.ae6d		a2 ff		ldx #$ff	                ldx #$FF
5603	.ae6f		a0 47		ldy #$47	                ldy #<fileError
5604							                .cwarn (>fileError)!=(>dataError),"must be on same page"
5605	.ae71		28		plp		                plp
5606	.ae72		d0 16		bne $ae8a	                bne LA8DA
5607	.ae74						LA8C4:
5608	.ae74		a0 3a		ldy #$3a	                ldy #<dataError
5609	.ae76		a5 c1		lda $c1		                lda $C1
5610	.ae78		d0 10		bne $ae8a	                bne LA8DA
5611	.ae7a		ad c6 03	lda $03c6	                lda $03C6
5612	.ae7d		c5 b4		cmp $b4		                cmp $B4
5613	.ae7f		d0 07		bne $ae88	                bne LA8D8
5614	.ae81		ad c7 03	lda $03c7	                lda $03C7
5615	.ae84		c5 b5		cmp $b5		                cmp $B5
5616	.ae86		f0 0b		beq $ae93	                beq LA8E3
5617	.ae88						LA8D8:
5618	.ae88		a0 54		ldy #$54	                ldy #<blockError
5619							                .cwarn (>blockError)!=(>dataError),"must be on same page"
5620	.ae8a						LA8DA:
5621	.ae8a		5a		phy		                phy
5622	.ae8b		da		phx		                phx
5623	.ae8c		20 96 ad	jsr $ad96	                jsr LA7A8
5624	.ae8f		fa		plx		                plx
5625	.ae90		7a		ply		                ply
5626	.ae91		80 10		bra $aea3	                bra LA8F3

5628	.ae93						LA8E3:
5629	.ae93		da		phx		                phx
5630	.ae94		20 89 ad	jsr $ad89	                jsr LA79B
5631	.ae97		20 4a af	jsr $af4a	                jsr LA9A0
5632	.ae9a		fa		plx		                plx
5633	.ae9b		a5 be		lda $be		                lda $BE
5634	.ae9d		05 bf		ora $bf		                ora $BF
5635	.ae9f		f0 76		beq $af17	                beq LA96A
5636	.aea1		a0 3a		ldy #$3a	                ldy #<dataError
5637	.aea3						LA8F3:
5638	.aea3		a9 b0		lda #$b0	                lda #>dataError
5639	.aea5		c6 ba		dec $ba		                dec $BA
5640	.aea7		48		pha		                pha
5641	.aea8		24 eb		bit $eb		                bit $EB
5642	.aeaa		30 0a		bmi $aeb6	                bmi LA909
5643	.aeac		8a		txa		                txa
5644							                .if version!=400
5647							                .endif
5648	.aead		d0 07		bne $aeb6	                bne LA909
5649	.aeaf		8a		txa		                txa
5650	.aeb0		29 11		and #$11	                and #$11
5651	.aeb2		25 bb		and $bb		                and $BB
5652	.aeb4		f0 0f		beq $aec5	                beq LA918
5653	.aeb6						LA909:
5654	.aeb6		68		pla		                pla
5655	.aeb7		85 b9		sta $b9		                sta $B9
5656	.aeb9		84 b8		sty $b8		                sty $B8
5657	.aebb		20 43 ac	jsr $ac43	                jsr LA58B
5658	.aebe		46 eb		lsr $eb		                lsr $EB
5659	.aec0		20 56 af	jsr $af56	                jsr LA9B1
5660	.aec3		80 3d		bra $af02	                bra LA955

5662	.aec5						LA918:
5663	.aec5		98		tya		                tya
5664	.aec6		18		clc		                clc
5665	.aec7		69 03		adc #$03	                adc #$03
5666	.aec9		a8		tay		                tay
5667	.aeca		90 03		bcc $aecf	                bcc LA922
5668	.aecc		68		pla		                pla
5669	.aecd		1a		inc a		                inc a
5670	.aece		48		pha		                pha
5671	.aecf						LA922:
5672	.aecf		5a		phy		                phy
5673	.aed0						LA923:
5674	.aed0		20 9b ec	jsr $ec9b	                jsr mos.LEF1B
5675	.aed3		a8		tay		                tay

5677							;-------------------------------------------------------------------------
5678							;
5679							; Print 0-terminated message using address from stack.
5680							;
5681							; entry:
5682							;
5683							; S=[StrL; StrH] - where Str = (address of string)-1
5684							; Y = 0 to print message; otherwise, don't print message
5685							;
5686	.aed4						printFollowingMessage:                       ;
5687	.aed4		68		pla		                pla
5688	.aed5		85 b8		sta $b8		                sta printMessageAddress+0
5689	.aed7		68		pla		                pla
5690	.aed8		85 b9		sta $b9		                sta printMessageAddress+1
5691	.aeda		5a		phy		                phy                          ;save initial Y
5692	.aedb		98		tya		                tya                          ;Z=1 if Y=0
5693	.aedc		08		php		                php                          ;save Y=0 state
5694	.aedd						fetchNextChar:
5695	.aedd		e6 b8		inc $b8		                inc printMessageAddress+0
5696	.aedf		d0 02		bne $aee3	                bne +
5697	.aee1		e6 b9		inc $b9		                inc printMessageAddress+1
5698	.aee3						+
5699	.aee3		b2 b8		lda ($b8)	                lda (printMessageAddress)   ;fetch next char to print
5700	.aee5		f0 13		beq $aefa	                beq printingFinished        ;branch taken if last char
5701	.aee7		28		plp		                plp                         ;restore Y=0 state
5702	.aee8		08		php		                php                         ;save Y=0 state
5703	.aee9		f0 f2		beq $aedd	                beq fetchNextChar ;branch taken if Y=0 - i.e., skip the
5704							                                  ;printing

5706							                ; printMessageAddress is in the $b0-$bf area, so it
5707							                ; needs saving in case there's a *SPOOL going on.
5708	.aeeb		a4 b8		ldy $b8		                ldy printMessageAddress+0
5709	.aeed		5a		phy		                phy
5710	.aeee		a4 b9		ldy $b9		                ldy printMessageAddress+1
5711	.aef0		20 e3 ff	jsr $ffe3	                jsr OSASCI
5712	.aef3		84 b9		sty $b9		                sty printMessageAddress+1
5713	.aef5		7a		ply		                ply
5714	.aef6		84 b8		sty $b8		                sty printMessageAddress+0

5716	.aef8		80 e3		bra $aedd	                bra fetchNextChar

5718	.aefa						printingFinished:
5719	.aefa		28		plp		                plp                          ;discard Y=0 state
5720	.aefb		e6 b8		inc $b8		                inc printMessageAddress+0
5721	.aefd		d0 02		bne $af01	                bne +
5722	.aeff		e6 b9		inc $b9		                inc printMessageAddress+1
5723	.af01						+
5724	.af01		7a		ply		                ply                          ;restore initial Y
5725	.af02						LA955:
5726	.af02		6c b8 00	jmp ($00b8)	                jmp (printMessageAddress)

5728	.af05						alwaysPrintFollowingMessage:
5729	.af05		a0 01		ldy #$01	                ldy #$01
5730	.af07		80 cb		bra $aed4	                bra printFollowingMessage

5732							;-------------------------------------------------------------------------

5734	.af09						LA95C:
5735	.af09		a2 ff		ldx #$ff	                ldx #$FF
5736	.af0b						LA95E:
5737	.af0b		e8		inx		                inx
5738	.af0c		bd d2 03	lda $03d2,x	                lda $03D2,x
5739	.af0f		d0 07		bne $af18	                bne LA96B
5740	.af11		8a		txa		                txa
5741	.af12		f0 03		beq $af17	                beq LA96A
5742	.af14		bd b2 03	lda $03b2,x	                lda $03B2,x
5743	.af17						LA96A:
5744	.af17		60		rts		                rts

5746	.af18						LA96B:
5747	.af18		20 19 e9	jsr $e919	                jsr mos.isLetter
5748	.af1b		5d b2 03	eor $03b2,x	                eor $03B2,x
5749	.af1e		b0 02		bcs $af22	                bcs LA975
5750	.af20		29 df		and #$df	                and #$DF
5751	.af22						LA975:
5752	.af22		f0 e7		beq $af0b	                beq LA95E
5753	.af24						LA977:
5754	.af24		60		rts		                rts

5756	.af25						LA978:
5757	.af25		a5 ba		lda $ba		                lda $BA
5758	.af27		f0 1e		beq $af47	                beq LA99D
5759	.af29		8a		txa		                txa
5760	.af2a		f0 1b		beq $af47	                beq LA99D
5761	.af2c		a9 22		lda #$22	                lda #$22
5762	.af2e		24 bb		bit $bb		                bit $BB
5763	.af30		f0 15		beq $af47	                beq LA99D
5764							                .if version!=400
5766							                .endif
5767	.af32		a8		tay		                tay
5768	.af33		20 d4 ae	jsr $aed4	                jsr printFollowingMessage
5769	>af36		0d				                .byte $0D
5770	>af37		07				                .byte $07
5771	>af38		52 65 77 69 6e 64 20 74		                .text "Rewind tape"
	>af40		61 70 65
5772	>af43		0d				                .byte $0D
5773	>af44		0d				                .byte $0D
5774	>af45		00				                .byte $00
5775	.af46		60		rts		                rts

5777	.af47						LA99D:
5778	.af47		20 b1 a8	jsr $a8b1	                jsr LA05D
5779	.af4a						LA9A0:
5780	.af4a		a5 c2		lda $c2		                lda $C2
5781	.af4c		f0 d6		beq $af24	                beq LA977
5782	.af4e		20 30 ae	jsr $ae30	                jsr LA880
5783							                .if version!=400
5786							                .endif
5787							                .if version==400
5788	.af51		20 56 ab	jsr $ab56	                jsr LA492
5791							                .endif
5792	.af54		80 f4		bra $af4a	                bra LA9A0

5794	.af56						LA9B1:
5795	.af56		20 9b ec	jsr $ec9b	                jsr mos.LEF1B
5796	.af59		f0 05		beq $af60	                beq LA9BB
5797	.af5b						LA9B6:
5798	.af5b		a9 07		lda #$07	                lda #$07
5799	.af5d		20 ee ff	jsr $ffee	                jsr OSWRCH
5800	.af60						LA9BB:
5801							                .if version<500
5802	.af60		ad 7a 02	lda $027a	                lda tubePresence
5803	.af63		f0 05		beq $af6a	                beq LA9C5
5804	.af65		a9 80		lda #$80	                lda #$80
5805	.af67		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
5806							                .endif
5807	.af6a						LA9C5:
5808							                .if version!=400
5834							                .endif
5835	.af6a		60		rts		                rts

5837	.af6b						LA9E6:
5838	.af6b		a5 e3		lda $e3		                lda $E3
5839	.af6d		0a		asl a		                asl a
5840	.af6e		0a		asl a		                asl a
5841	.af6f		0a		asl a		                asl a
5842	.af70		0a		asl a		                asl a
5843	.af71		85 bb		sta $bb		                sta $BB
5844							                .if version==400
5845	.af73		60		rts		                rts
5849							                .endif

5851	.af74						LA9F3:
5852	.af74		a5 e3		lda $e3		                lda $E3
5853	.af76		29 f0		and #$f0	                and #$F0
5854	.af78		85 bb		sta $bb		                sta $BB
5855							                .if version!=400
5873							                .endif
5874	.af7a		60		rts		                rts

5876							;-------------------------------------------------------------------------

5878							                .if version!=400
5882							                .endif

5884							;-------------------------------------------------------------------------

5886	.af7b						LAA16:
5887							                .if version!=400
5891							                .endif
5892	.af7b						LAA1C:
5893							                .if version!=400
5900							                .endif
5901	.af7b		64 ca		stz $ca		                stz $CA
5902							                .if version!=400
5911							                .endif
5912	.af7d		60		rts		                rts

5914							;-------------------------------------------------------------------------

5916	.af7e						LAA35:
5917	.af7e		ae c6 03	ldx $03c6	                ldx $03C6
5918	.af81		ac c7 03	ldy $03c7	                ldy $03C7
5919	.af84		e8		inx		                inx
5920	.af85		86 b4		stx $b4		                stx $B4
5921	.af87		d0 01		bne $af8a	                bne LAA41
5922	.af89		c8		iny		                iny
5923	.af8a						LAA41:
5924	.af8a		84 b5		sty $b5		                sty $B5
5925	.af8c		60		rts		                rts

5927	.af8d						LAA44:
5928	.af8d		64 c0		stz $c0		                stz $C0
5929	.af8f						LAA46:
5930	.af8f		a0 00		ldy #$00	                ldy #$00
5931	.af91		64 be		stz $be		                stz $BE
5932	.af93		64 bf		stz $bf		                stz $BF
5933	.af95		60		rts		                rts

5935	.af96						LAA4D:
5936	.af96		a0 ff		ldy #$ff	                ldy #$FF
5937	.af98						LAA4F:
5938	.af98		c8		iny		                iny
5939	.af99		e8		inx		                inx
5940	.af9a		bd 00 03	lda $0300,x	                lda $0300,x
5941	.af9d		99 d2 03	sta $03d2,y	                sta $03D2,y
5942	.afa0		d0 f6		bne $af98	                bne LAA4F
5943	.afa2		60		rts		                rts

5945							                .if version!=400
5956							                .endif

5958							; Check if TAPE/ROM channel is open
5959							; ---------------------------------
5960							; Y=handle to check, A=status mask to use
5961	.afa3						LAA68:
5962	.afa3		5a		phy		                phy
5963	.afa4		20 c8 af	jsr $afc8	                jsr LAA8D
5964	.afa7		7a		ply		                ply
5965							                .if version<500
5966	.afa8		b0 55		bcs $afff	                bcs LAAC9                    ; Channel open, exit
5969							                .endif
5970	.afaa		cc 57 02	cpy $0257	                cpy spoolFileHandle                    ; Not SPOOL handle
5971	.afad		d0 05		bne $afb4	                bne LAA79
5972	.afaf		9c 57 02	stz $0257	                stz spoolFileHandle                    ; Clear the SPOOL handle
5973	.afb2		80 08		bra $afbc	                bra LAA81
5974	.afb4						LAA79:
5975	.afb4		cc 56 02	cpy $0256	                cpy execFileHandle                    ; Not EXEC handle
5976	.afb7		d0 03		bne $afbc	                bne LAA81
5977	.afb9		9c 56 02	stz $0256	                stz execFileHandle                    ; Clear the EXEC handle
5978	.afbc						LAA81:
5979	.afbc		20 23 b0	jsr $b023	                jsr doFollowingError                    ; Generate error
5980	>afbf		de				                .byte $DE
5981	>afc0		43 68 61 6e 6e 65 6c		                .text "Channel"
5982	.afc7		00		brk #		                brk

5984	.afc8						LAA8D:
5985	.afc8		48		pha		                pha                          ; Toggle channel with CFS/RFS switch
5986	.afc9		98		tya		                tya
5987							                .if version==400
5988	.afca		49 02		eor #$02	                eor #2
5991							                .endif
5992	.afcc		a8		tay		                tay                          ; If CFS=unchanged, if RFS 1/2/3->3/0/1
5993	.afcd		68		pla		                pla
5994	.afce		25 e2		and $e2		                and $E2                      ; Mask with open channels bitmask
5995	.afd0		4a		lsr a		                lsr a                        ; Move 'input open if tested' into Carry
5996	.afd1		88		dey		                dey                          ; Exit if testing CFS#1 or RFS#3
5997	.afd2		f0 05		beq $afd9	                beq LAA9F
5998	.afd4		4a		lsr a		                lsr a                        ; Move 'output open if tested' into Carry
5999	.afd5		88		dey		                dey                          ; Exit if testing CFS#2
6000	.afd6		f0 01		beq $afd9	                beq LAA9F
6001	.afd8		18		clc		                clc                          ; Otherwise, Carry=Not Open
6002	.afd9						LAA9F:
6003	.afd9		60		rts		                rts

6005							                .if version!=400
6009							                .endif

6011							                .if version<500
6012	.afda						LAAA4:
6013	.afda		a9 01		lda #$01	                lda #$01
6014	.afdc						LAAA6:
6015	.afdc		20 f2 af	jsr $aff2	                jsr LAABC
6016	.afdf		f0 1e		beq $afff	                beq LAAC9
6017	.afe1		8a		txa		                txa
6018	.afe2		a2 b0		ldx #$b0	                ldx #$B0
6019	.afe4		a0 00		ldy #$00	                ldy #$00
6020	.afe6						LAAB0:
6021	.afe6		48		pha		                pha
6022	.afe7		a9 c0		lda #$c0	                lda #$C0
6023	.afe9						LAAB3:
6024	.afe9		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
6025	.afec		90 fb		bcc $afe9	                bcc LAAB3
6026	.afee		68		pla		                pla
6027	.afef		4c 06 04	jmp $0406	                jmp tubeHost.entryPoint

6029	.aff2						LAABC:
6030	.aff2		aa		tax		                tax
6031	.aff3		a5 b2		lda $b2		                lda $B2
6032	.aff5		25 b3		and $b3		                and $B3
6033	.aff7		1a		inc a		                inc a
6034	.aff8		f0 05		beq $afff	                beq LAAC9
6035	.affa		ad 7a 02	lda $027a	                lda tubePresence
6036	.affd		29 80		and #$80	                and #$80
6037	.afff						LAAC9:
6038	.afff		60		rts		                rts
6039							                .endif

6041	.b000						LAACA:
6042	.b000		a0 05		ldy #$05	                ldy #$05
6043	.b002						LAACC:
6044	.b002		b1 cc		lda ($cc),y	                lda ($CC),y
6045	.b004		d0 07		bne $b00d	                bne LAAD7
6046	.b006		c8		iny		                iny
6047	.b007		c0 08		cpy #$08	                cpy #$08
6048	.b009		90 f7		bcc $b002	                bcc LAACC
6049	.b00b						LAAD5:
6050	.b00b		b1 cc		lda ($cc),y	                lda ($CC),y
6051	.b00d						LAAD7:
6052	.b00d		3a		dec a		                dec a
6053	.b00e		91 cc		sta ($cc),y	                sta ($CC),y
6054	.b010		88		dey		                dey
6055	.b011		c0 05		cpy #$05	                cpy #$05
6056	.b013		b0 f6		bcs $b00b	                bcs LAAD5
6057	.b015		60		rts		                rts

6059	.b016						LAAE0:
6060	.b016		a0 08		ldy #$08	                ldy #$08
6061	.b018		a9 00		lda #$00	                lda #$00
6062	.b01a						LAAE4:
6063	.b01a		11 cc		ora ($cc),y	                ora ($CC),y
6064	.b01c		88		dey		                dey
6065	.b01d		c0 05		cpy #$05	                cpy #$05
6066	.b01f		b0 f9		bcs $b01a	                bcs LAAE4
6067	.b021		aa		tax		                tax
6068	.b022		60		rts		                rts

6070	.b023						doFollowingError:
6071	.b023		78		sei		                sei
6072	.b024		68		pla		                pla
6073	.b025		85 fa		sta $fa		                sta SEIWKA+0
6074	.b027		68		pla		                pla
6075	.b028		85 fb		sta $fb		                sta SEIWKA+1
6076	.b02a		9c 00 01	stz $0100	                stz $0100
6077	.b02d		a0 00		ldy #$00	                ldy #$00
6078	.b02f						-
6079	.b02f		c8		iny		                iny
6080	.b030		b1 fa		lda ($fa),y	                lda (SEIWKA),y
6081	.b032		99 00 01	sta $0100,y	                sta $0100,y
6082	.b035		d0 f8		bne $b02f	                bne -
6083	.b037		4c 00 01	jmp $0100	                jmp $0100


6086							                .if version!=350
6087							                .include "cfs_errors.s65"

:12	;******  Processing file: src/cfs_errors.s65

1	.b03a						dataError:
2	.b03a		20 23 b0	jsr $b023	                jsr doFollowingError
3	>b03d		d8 0d 44 61 74 61 3f 00		                .text $d8,13,"Data?",0
4	.b045		80 19		bra $b060	                bra LAB2A

6	.b047						fileError:
7	.b047		20 23 b0	jsr $b023	                jsr doFollowingError
8	>b04a		db 0d 46 69 6c 65 3f 00		                .text $db,13,"File?",0
9	.b052		80 0c		bra $b060	                bra LAB2A

11	.b054						blockError:
12	.b054		20 23 b0	jsr $b023	                jsr doFollowingError
13	>b057		da 0d 42 6c 6f 63 6b 3f		                .text $da,13,"Block?",0
	>b05f		00
14	.b060						LAB2A:
15	.b060		4c 25 af	jmp $af25	                jmp LA978

:5	;******  Return to file: src/terminal.s65

6088							                .endif

6090							                .if version<500
6091							;-------------------------------------------------------------------------
6092							;
6093							; Tube host code
6094							;
6095							; See http://mdfs.net/Software/Tube/M128/Host320.lst
6096							;
6097							; I mostly just copied JGH's comments here.

6099	.b063						tubeHost: .block          ;tube code

6101	.b063						brkHandler: .block
6102							                .logical tubeBrkHandlerAddr
6103	.b063	0016	a9 ff		lda #$ff	                lda #$FF
6104	.b065	0018	20 6c 06	jsr $066c	                jsr sendR4       ;send $ff via R4 to interrupt copro
6105	.b068	001b	ad e3 fe	lda $fee3	                lda tube.data2   ;get ACK byte from copro
6106	.b06b	001e	a9 00		lda #$00	                lda #$00
6107	.b06d	0020	20 61 06	jsr $0661	                jsr sendR2A       ;send $00 via R2 to specify ERROR
6108	.b070	0023	a8		tay		                tay               ;Y=0
6109	.b071	0024	b1 fd		lda ($fd),y	                lda ($FD),y       ;get error number
6110	.b073	0026	20 61 06	jsr $0661	                jsr sendR2A       ;send error number via R2
6111	.b076	0029					-
6112	.b076	0029	c8		iny		                iny             ;next char
6113	.b077	002a	b1 fd		lda ($fd),y	                lda ($FD),y     ;fetch error string char
6114	.b079	002c	20 61 06	jsr $0661	                jsr sendR2A     ;send via R2
6115	.b07c	002f	aa		tax		                tax             ;set N/Z as per error string char
6116	.b07d	0030	d0 f7		bne $0029	                bne -           ;repeat until terminating $00 sent
6117	.b07f	0032					idleStartup:
6118	.b07f	0032	a2 ff		ldx #$ff	                ldx #$FF
6119	.b081	0034	9a		txs		                txs             ;clear stack
6120	.b082	0035	58		cli		                cli
6121	.b083	0036					idleLoop:
6122	.b083	0036	2c e0 fe	bit $fee0	                bit tube.status1 ;is there a char in R1?
6123	.b086	0039	10 06		bpl $0041	                bpl LAB58        ;branch taken if no char in R1
6124	.b088	003b					handleOSWRCH:
6125	.b088	003b	ad e1 fe	lda $fee1	                lda tube.data1  ;get char from R1
6126	.b08b	003e	20 ee ff	jsr $ffee	                jsr OSWRCH      ;pass to OSWRCH
6127	.b08e	0041					LAB58:
6128	.b08e	0041	2c e2 fe	bit $fee2	                bit tube.status2 ;is there a command in R2?
6129	.b091	0044	10 f0		bpl $0036	                bpl idleLoop     ;branch taken if no command in R2
6130	.b093	0046	2c e0 fe	bit $fee0	                bit tube.status1 ;is there a char in R1?
6131	.b096	0049	30 f0		bmi $003b	                bmi handleOSWRCH ;branch taken if char in R1
6132	.b098	004b	ae e3 fe	ldx $fee3	                ldx tube.data2   ;get command from R2
6133	.b09b	004e	86 51		stx $51		                stx callCommandRoutine+1 ;use as index into command
6134							                                         ;table
6135	.b09d	0050					callCommandRoutine:
6136							                ; not sure why this can't be jmp
6137							                ; (tubeHost.commandRoutines,x)? - and then the table
6138							                ; wouldn't have to be page-aligned.
6139	.b09d	0050	6c 00 05	jmp ($0500)	                jmp (tubeHost.commandRoutines)

6141							                ; ???
6142	>b0a0	0053	00 80 00 00			                .dword $8000
6143							                .here
6144							                .endblock

6146							; Slightly ugly aliases for inner symbol :(
6147	=$32						idleStartup=brkHandler.idleStartup
6148	=$36						idleLoop=brkHandler.idleLoop

6150	.b0a4						codePage0:
6151							                .logical tubeHostAddr
6152	.b0a4	0400					copyLanguage:
6153	.b0a4	0400	4c c2 04	jmp $04c2	                jmp LAC30

6155	.b0a7	0403					copyEscapeStatus:
6156	.b0a7	0403	4c 75 06	jmp $0675	                jmp LADDA

6158							; Tube transfer/claim/release
6159	.b0aa	0406					entryPoint:
6160	.b0aa	0406	c9 80		cmp #$80	                cmp #$80
6161	.b0ac	0408	90 29		bcc $0433	                bcc dataTransfer
6162	.b0ae	040a	c9 c0		cmp #$c0	                cmp #$C0
6163	.b0b0	040c	b0 18		bcs $0426	                bcs claim
6164	.b0b2	040e	09 40		ora #$40	                ora #$40
6165	.b0b4	0410	c5 15		cmp $15		                cmp $15
6166	.b0b6	0412	d0 1e		bne $0432	                bne done
6167	.b0b8	0414					release:
6168	.b0b8	0414	08		php		                php
6169	.b0b9	0415	78		sei		                sei
6170	.b0ba	0416	a9 05		lda #$05	                lda #$05
6171	.b0bc	0418	20 6c 06	jsr $066c	                jsr sendR4
6172	.b0bf	041b	20 6a 06	jsr $066a	                jsr sendR4TubeClaimantID
6173	.b0c2	041e	28		plp		                plp
6174	.b0c3	041f					resetTubeClaim:
6175	.b0c3	041f	a9 80		lda #$80	                lda #$80
6176	.b0c5	0421	85 15		sta $15		                sta tubeClaimantID
6177	.b0c7	0423	85 14		sta $14		                sta tubeNotClaimed
6178	.b0c9	0425	60		rts		                rts

6180	.b0ca	0426					claim:
6181	.b0ca	0426	06 14		asl $14		                asl tubeNotClaimed    ;test if Tube free
6182	.b0cc	0428	b0 06		bcs $0430	                bcs claim2         ;taken if Tube free - with C=1 and
6183							                                   ;tube marked as claimed
6184	.b0ce	042a	c5 15		cmp $15		                cmp tubeClaimantID
6185	.b0d0	042c	f0 04		beq $0432	                beq done       ;taken with C=1 if already claimed
6186	.b0d2	042e	18		clc		                clc            ;signal claim failure
6187	.b0d3	042f	60		rts		                rts

6189	.b0d4	0430					claim2:
6190	.b0d4	0430	85 15		sta $15		                sta tubeClaimantID ; store claimant ID
6191	.b0d6	0432					done:
6192	.b0d6	0432	60		rts		                rts

6194	.b0d7	0433					dataTransfer:
6195	.b0d7	0433	08		php		                php
6196	.b0d8	0434	78		sei		                sei
6197	.b0d9	0435	84 13		sty $13		                sty tubeTransferAddr+1
6198	.b0db	0437	86 12		stx $12		                stx tubeTransferAddr+0
6199	.b0dd	0439	20 6c 06	jsr $066c	                jsr sendR4      ;send reason code to interrupt copro
6200	.b0e0	043c	aa		tax		                tax             ;save reason code
6201	.b0e1	043d	a0 03		ldy #$03	                ldy #$03        ;will send 4 bytes
6202	.b0e3	043f	20 6a 06	jsr $066a	                jsr sendR4TubeClaimantID ;send Tube claimant ID
6203	.b0e6	0442					-
6204	.b0e6	0442	b1 12		lda ($12),y	                lda (tubeTransferAddr),y
6205	.b0e8	0444	20 6c 06	jsr $066c	                jsr sendR4
6206	.b0eb	0447	88		dey		                dey
6207	.b0ec	0448	10 f8		bpl $0442	                bpl -

6209							                ; disable R3 FIFO, disable R3 NMI
6210	.b0ee	044a	a0 18		ldy #$18	                ldy #tube.status1.V|tube.status1.M
6211	.b0f0	044c	8c e0 fe	sty $fee0	                sty tube.status1

6213							                ; disable/enable other per-transfer type flags as
6214							                ; appropriate.
6215	.b0f3	044f	bd 18 05	lda $0518,x	                lda dataTransferFlags,x
6216	.b0f6	0452	8d e0 fe	sta $fee0	                sta tube.status1 ;STPVMJIQ

6218	.b0f9	0455	4a		lsr a		                lsr a           ;0STPVMJI Q
6219	.b0fa	0456	4a		lsr a		                lsr a           ;00STPVMJ I
6220	.b0fb	0457	90 06		bcc $045f	                bcc +           ;branch taken if CoPro->I/O transfer

6222							                ; Read R3 twice to delay and empty FIFO
6223	.b0fd	0459	2c e5 fe	bit $fee5	                bit tube.data3
6224	.b100	045c	2c e5 fe	bit $fee5	                bit tube.data3
6225	.b103	045f					+
6226	.b103	045f	20 6c 06	jsr $066c	                jsr sendR4      ;send value to synchronize
6227	.b106	0462					-
6228	.b106	0462	2c e6 fe	bit $fee6	                bit tube.status4
6229	.b109	0465	50 fb		bvc $0462	                bvc -
6230	.b10b	0467	b0 0d		bcs $0476	                bcs LABE4       ;branch taken if I/O->CoPro transfer
6231	.b10d	0469	e0 04		cpx #$04	                cpx #$04        ;$04 = execute in CoPro
6232	.b10f	046b	d0 11		bne $047e	                bne LABEC       ;taken if not execute in CoPro
6233	.b111	046d					LABDB:
6234	.b111	046d	20 14 04	jsr $0414	                jsr release
6235	.b114	0470	20 61 06	jsr $0661	                jsr sendR2A
6236	.b117	0473	4c 32 00	jmp $0032	                jmp idleStartup

6238	.b11a	0476					LABE4:
6239	.b11a	0476	4a		lsr a		                lsr a            ;000STPVM J
6240	.b11b	0477	90 05		bcc $047e	                bcc LABEC        ;branch taken if J=0
6241	.b11d	0479	a0 88		ldy #$88	                ldy #tube.status1.S|tube.status1.M
6242	.b11f	047b	8c e0 fe	sty $fee0	                sty tube.status1
6243	.b122	047e					LABEC:
6244	.b122	047e	28		plp		                plp
6245	.b123	047f	60		rts		                rts

6247	.b124	0480					LABEE:
6248	.b124	0480	ae 8d 02	ldx $028d	                ldx lastBREAKType            ;get last BREAK type
6249	.b127	0483	f0 e8		beq $046d	                beq LABDB   ;if soft break, release Tube, send $80 via
6250							                            ;R2, and enter idle loop.

6252							; The current language is not copied across the Tube on soft Break,
6253							; only on Power-On Break and Hard Break, or when entered explicitly
6254							; with OSBYTE 142.

6256	.b129	0485					enterNewLanguage: .proc
6257	.b129	0485	a9 ff		lda #$ff	                lda #$FF
6258	.b12b	0487	20 06 04	jsr $0406	                jsr tubeHost.entryPoint ;claim with ID=$3f
6259	.b12e	048a	90 f9		bcc $0485	                bcc enterNewLanguage    ;repeat until claimed
6260	.b130	048c	20 c9 04	jsr $04c9	                jsr getLanguageParasiteAddr ;sort out addresses

6262	.b133	048f					transferPage:
6263							                .if version==350
6265							                .endif
6266	.b133	048f	08		php		                php
6267	.b134	0490	78		sei		                sei

6269							                ; initiate I/O->CoPro 256 bytes, then transfer the
6270							                ; next 256 bytes of the language ROM.
6271	.b135	0491	a9 07		lda #$07	                lda #$07
6272	.b137	0493	20 bb 04	jsr $04bb	                jsr doTube

6274	.b13a	0496	a0 00		ldy #$00	                ldy #$00
6275							                .if version==350
6281							                .else
6282	.b13c	0498	64 00		stz $00		                stz tubeLanguageHostAddr+0
6283	.b13e	049a					transferPageLoop:
6284	.b13e	049a	b1 00		lda ($00),y	                lda (tubeLanguageHostAddr),y
6285	.b140	049c	8d e5 fe	sta $fee5	                sta tube.data3
6286	.b143	049f	ea		nop		                nop
6287	.b144	04a0	ea		nop		                nop
6288	.b145	04a1	ea		nop		                nop
6289							                .endif
6290	.b146	04a2	c8		iny		                iny
6291	.b147	04a3	d0 f5		bne $049a	                bne transferPageLoop
6292	.b149	04a5	28		plp		                plp

6294							                ; advance to next dest page.
6295	.b14a	04a6	e6 54		inc $54		                inc tubeLanguageParasiteAddr+1
6296	.b14c	04a8	d0 06		bne $04b0	                bne +
6297	.b14e	04aa	e6 55		inc $55		                inc tubeLanguageParasiteAddr+2
6298	.b150	04ac	d0 02		bne $04b0	                bne +
6299	.b152	04ae	e6 56		inc $56		                inc tubeLanguageParasiteAddr+3
6300	.b154	04b0					+

6302							                .if version!=350
6303	.b154	04b0	e6 01		inc $01		                inc tubeLanguageHostAddr+1 ;next source page
6304							                .endif
6305	.b156	04b2	24 01		bit $01		                bit tubeLanguageHostAddr+1
6306	.b158	04b4	50 d9		bvc $048f	                bvc transferPage ;branch taken if source page $c0 not
6307							                                 ;reached yet

6309							                ; copy done - execute language in parasite
6310							                .if version==350
6312							                .else
6313	.b15a	04b6	20 c9 04	jsr $04c9	                jsr getLanguageParasiteAddr
6314							                .endif
6315	.b15d	04b9	a9 04		lda #$04	                lda #$04        ;execute in copro

6317							                ; call Tube entry point with whatever reason code,
6318							                ; supplying language parasite address as the parasite
6319							                ; address.
6320	.b15f	04bb					doTube:
6321	.b15f	04bb	a0 00		ldy #$00	                ldy #>tubeLanguageParasiteAddr
6322	.b161	04bd	a2 53		ldx #$53	                ldx #<tubeLanguageParasiteAddr
6323	.b163	04bf	4c 06 04	jmp $0406	                jmp tubeHost.entryPoint
6324							                .pend

6326	.b166	04c2					LAC30:
6327	.b166	04c2	58		cli		                cli
6328	.b167	04c3	b0 c0		bcs $0485	                bcs enterNewLanguage
6329	.b169	04c5	d0 b9		bne $0480	                bne LABEE
6330	.b16b	04c7	80 61		bra $052a	                bra LAC8F

6332	.b16d	04c9					getLanguageParasiteAddr: .proc
6333	.b16d	04c9	a9 80		lda #$80	                lda #$80
6334	.b16f	04cb	85 54		sta $54		                sta tubeLanguageParasiteAddr+1 ;$xxxx80xx
6335	.b171	04cd	85 01		sta $01		                sta tubeLanguageHostAddr+1     ;$80xx
6336	.b173	04cf	a9 20		lda #$20	                lda #$20
6337	.b175	04d1	2d 06 80	and $8006	                and $8006  ;test parasite address flag
6338	.b178	04d4	a8		tay		                tay        ;Y=0 if $8000, Y=$20 if parasite address
6339							                .if version==350
6341							                .else
6342	.b179	04d5	84 53		sty $53		                sty tubeLanguageParasiteAddr+0
6343							                .endif
6344	.b17b	04d7	f0 19		beq $04f2	                beq LAC60       ;branch taken if good to go with A=0
6345							                                ;and Y=0

6347	.b17d	04d9	ae 07 80	ldx $8007	                ldx $8007       ;get copyright offset
6348							                ; skip copyright message
6349	.b180	04dc					-
6350	.b180	04dc	e8		inx		                inx
6351	.b181	04dd	bd 00 80	lda $8000,x	                lda $8000,x
6352	.b184	04e0	d0 fa		bne $04dc	                bne -

6354	.b186	04e2	bd 01 80	lda $8001,x	                lda $8000+1,x
6355	.b189	04e5	85 53		sta $53		                sta tubeLanguageParasiteAddr+0
6356	.b18b	04e7	bd 02 80	lda $8002,x	                lda $8000+2,x
6357	.b18e	04ea	85 54		sta $54		                sta tubeLanguageParasiteAddr+1
6358	.b190	04ec	bc 03 80	ldy $8003,x	                ldy $8000+3,x
6359	.b193	04ef	bd 04 80	lda $8004,x	                lda $8000+4,x
6360	.b196	04f2					LAC60:
6361							                .if version==350
6363							                .else
6364	.b196	04f2	85 56		sta $56		                sta tubeLanguageParasiteAddr+3
6365	.b198	04f4	84 55		sty $55		                sty tubeLanguageParasiteAddr+2
6366	.b19a	04f6	60		rts		                rts

6368							                .endif
6369							                .pend
6370							                .here

6372	.b19b						codePages12:
6373							                .logical tubeHostAddr+256

6375							; names of the indexes here come from app note 004
6376	.b19b	0500					commandRoutines:
6377							                .cerror (*&$ff)!=0,"commandRoutines must be paged aligned"
6378	>b19b	0500	35 05				                .word doRDCH    ;RDCHNO = $00
6379	>b19d	0502	88 05				                .word doCLI     ;CLINO = $02
6380	>b19f	0504	da 05				                .word doSBYT    ;SBYTNO = $04
6381	>b1a1	0506	eb 05				                .word doBYTE    ;BYTENO = $06
6382	>b1a3	0508	07 06				                .word doWORD    ;WORDNO = $08
6383	>b1a5	050a	36 06				                .word doRDLN    ;RDLNNO = $0a
6384	>b1a7	050c	59 05				                .word doARGS     ;ARGSNO = $0c
6385	>b1a9	050e	2c 05				                .word doBGET     ;BGETNO = $0e
6386	>b1ab	0510	20 05				                .word doBPUT     ;BPUTNO = $10
6387	>b1ad	0512	3f 05				                .word doFIND     ;FINDNO = $12
6388	>b1af	0514	b2 05				                .word doFILE    ;FILENO = $14
6389	>b1b1	0516	9a 05				                .word doGBPB     ;GBPBNO = $16

6391							                ; Tube data transfer flags
6392	.b1b3	0518					dataTransferFlags:
6393							                ; 0 - CoPro->I/O bytes
6394							                ;
6395							                ; Enable: PIRQ from R3, PIRQ from R1
6396	>b1b3	0518	86				                .byte tube.status1.S|tube.status1.J|tube.status1.I

6398							                ; 1 - I/O->CoPro bytes
6399							                ;
6400							                ; Enable: PNMI from R3
6401	>b1b4	0519	88				                .byte tube.status1.S|tube.status1.M

6403							                ; 2 - CoPro->I/O words
6404							                ;
6405							                ; Enable: 2-byte R3, PIRQ from R2, PIRQ from R1
6406	>b1b5	051a	96				                .byte tube.status1.S|tube.status1.V|tube.status1.J|tube.status1.I

6408							                ; 3 - I/O->CoPro words
6409							                ;
6410							                ; Enable: 2-byte R3, PNMI from R3
6411	>b1b6	051b	98				                .byte tube.status1.S|tube.status1.V|tube.status1.M

6413							                ; 4 - Execute in CoPro
6414							                ;
6415							                ; Disable: 2-byte R3, PNMI from R3
6416	>b1b7	051c	18				                .byte tube.status1.V|tube.status1.M

6418							                ; 5 - Reserved
6419							                ;
6420							                ; Disable: 2-byte R3, PNMI from R3
6421	>b1b8	051d	18				                .byte tube.status1.V|tube.status1.M

6423							                ; 6 - CoPro->I/O 256 bytes
6424							                ;
6425							                ; Enable: PIRQ from R1
6426	>b1b9	051e	82				                .byte tube.status1.S|tube.status1.I

6428							                ; 7 - I/O->CoPro 256 bytes
6429							                ;
6430							                ; Disable: 2-byte R3, PNMI from R3
6431	>b1ba	051f	18				                .byte tube.status1.V|tube.status1.M

6433	.b1bb	0520					doBPUT:
6434	.b1bb	0520	20 a1 06	jsr $06a1	                jsr recvR2      ;Receive file handle
6435	.b1be	0523	a8		tay		                tay             ;Y = file handle
6436	.b1bf	0524	20 a1 06	jsr $06a1	                jsr recvR2      ;Receive byte
6437	.b1c2	0527	20 d4 ff	jsr $ffd4	                jsr OSBPUT      ;Do OSBPUT
6438	.b1c5	052a					LAC8F:
6439	.b1c5	052a	80 62		bra $058e	                bra sendR27FThenGoIdle

6441	.b1c7	052c					doBGET:
6442	.b1c7	052c	20 a1 06	jsr $06a1	                jsr recvR2      ;Receive file handle
6443	.b1ca	052f	a8		tay		                tay             ;Y = file handle
6444	.b1cb	0530	20 d7 ff	jsr $ffd7	                jsr OSBGET      ;Do OSBGET
6445	.b1ce	0533					LAC98:
6446	.b1ce	0533	80 03		bra $0538	                bra sendR2CAThenGoIdle

6448	.b1d0	0535					doRDCH:
6449	.b1d0	0535	20 e0 ff	jsr $ffe0	                jsr OSRDCH      ;Do OSRDCH
6450	.b1d3	0538					sendR2CAThenGoIdle:
6451	.b1d3	0538	6a		ror a		                ror a           ;set A bit 7 as per carry
6452	.b1d4	0539	20 61 06	jsr $0661	                jsr sendR2A     ;send via R2
6453	.b1d7	053c	2a		rol a		                rol a           ;restore A
6454	.b1d8	053d	80 51		bra $0590	                bra sendR2AThenGoIdle

6456	.b1da	053f					doFIND: .proc
6457	.b1da	053f	20 a1 06	jsr $06a1	                jsr recvR2            ;Receive reason code
6458	.b1dd	0542	f0 0a		beq $054e	                beq close             ;taken if A=$00 - CLOSE#
6459	.b1df	0544	48		pha		                pha                   ;save reason code
6460	.b1e0	0545	20 74 05	jsr $0574	                jsr recvR2String      ;receive file name
6461	.b1e3	0548	68		pla		                pla                   ;restore reason code
6462	.b1e4	0549	20 ce ff	jsr $ffce	                jsr OSFIND            ;call OSFIND
6463	.b1e7	054c	80 42		bra $0590	                bra sendR2AThenGoIdle

6465	.b1e9	054e					close:
6466	.b1e9	054e	20 a1 06	jsr $06a1	                jsr recvR2      ;Receive file handle
6467	.b1ec	0551	a8		tay		                tay             ;Y = file handle
6468	.b1ed	0552	a9 00		lda #$00	                lda #$00        ;A = $00 - CLOSE#
6469	.b1ef	0554	20 ce ff	jsr $ffce	                jsr OSFIND      ;call OSFIND
6470	.b1f2	0557	80 35		bra $058e	                bra sendR27FThenGoIdle
6471							                .pend

6473							;-------------------------------------------------------------------------
6474							;
6475							; Handle a Tube OSARGS request.
6476							;
6477							; [Tube p24]
6478							;
6479	.b1f4	0559					doARGS:
6480	.b1f4	0559	20 a1 06	jsr $06a1	                jsr recvR2                   ;receive file handle
6481	.b1f7	055c	a8		tay		                tay                          ;Y = file handle
6482	.b1f8	055d	a2 04		ldx #$04	                ldx #$04
6483	.b1fa	055f	20 93 06	jsr $0693	                jsr recvR2N ;receive 4 bytes OSARGS data, + operation code
6484	.b1fd	0562	20 da ff	jsr $ffda	                jsr OSARGS  ;call OSARGS
6485	.b200	0565	20 61 06	jsr $0661	                jsr sendR2A ;send OSARGS result

6487							                ; send 4 bytes OSARGS data
6488	.b203	0568	a2 03		ldx #$03	                ldx #$03
6489	.b205	056a					-
6490							                .if version==350
6492							                .else
6493	.b205	056a	b5 00		lda $00,x	                lda $00,x
6494							                .endif
6495	.b207	056c	20 61 06	jsr $0661	                jsr sendR2A
6496	.b20a	056f	ca		dex		                dex
6497	.b20b	0570	10 f8		bpl $056a	                bpl -

6499	.b20d	0572	80 24		bra $0598	                bra goIdle_0

6501							;-------------------------------------------------------------------------
6502							;
6503							; Receive a CR-terminated string over the Tube via R2.
6504							;
6505							; exit:
6506							; YX = pointer to received string (here, always $0700)
6507							;
6508	.b20f	0574					recvR2String: .proc
6509	.b20f	0574	a2 00		ldx #$00	                ldx #$00
6510	.b211	0576	a0 00		ldy #$00	                ldy #$00        ;index
6511	.b213	0578					-
6512	.b213	0578	20 a1 06	jsr $06a1	                jsr recvR2      ;get next string char
6513	.b216	057b	99 00 07	sta $0700,y	                sta tubeStringBuffer,y     ;store in string buffer
6514	.b219	057e	c8		iny		                iny
6515	.b21a	057f	f0 04		beq $0585	                beq +           ;taken if too many bytes received
6516	.b21c	0581	c9 0d		cmp #$0d	                cmp #$0D
6517	.b21e	0583	d0 f3		bne $0578	                bne -           ;taken if end of string data not reached
6518	.b220	0585					+
6519	.b220	0585	a0 07		ldy #$07	                ldy #>tubeStringBuffer
6520							                .cerror (<tubeStringBuffer)!=0,"tubeStringBuffer must be page-aligned"
6521	.b222	0587	60		rts		                rts
6522							                .pend

6524							;-------------------------------------------------------------------------
6525							;
6526							; Handle a Tube OSCLI request.
6527							;
6528							; [Tube p22]
6529							;
6530	.b223	0588					doCLI:
6531	.b223	0588	20 74 05	jsr $0574	                jsr recvR2String
6532	.b226	058b	20 f7 ff	jsr $fff7	                jsr OSCLI
6533	.b229	058e					sendR27FThenGoIdle:
6534	.b229	058e	a9 7f		lda #$7f	                lda #$7F
6535	.b22b	0590					sendR2AThenGoIdle:
6536	.b22b	0590					-
6537	.b22b	0590	2c e2 fe	bit $fee2	                bit tube.status2
6538	.b22e	0593	50 fb		bvc $0590	                bvc -
6539	.b230	0595	8d e3 fe	sta $fee3	                sta tube.data2
6540	.b233	0598					goIdle_0:
6541	.b233	0598	80 4e		bra $05e8	                bra goIdle_1

6543							;-------------------------------------------------------------------------
6544							;
6545							; Handle a Tube OSGBPB request.
6546							;
6547							; [Tube p25]
6548							;
6549	.b235	059a					doGBPB:
6550	.b235	059a	a2 0d		ldx #$0d	                ldx #size(OSGBPBParameterBlock)
6551							                .cerror tubeOSGBPBParameterBlock!=0,"Tube OSGBPB parameter block must be at $0000"
6552	.b237	059c	20 93 06	jsr $0693	                jsr recvR2N     ;receive parameter block + reason code
6553	.b23a	059f	a0 00		ldy #$00	                ldy #>tubeOSGBPBParameterBlock
6554	.b23c	05a1	20 d1 ff	jsr $ffd1	                jsr OSGBPB      ;call OSGBPB
6555	.b23f	05a4	48		pha		                pha             ;save OSGBPB A result

6557							                ; Send updated OSGBPB parameter block.
6558	.b240	05a5	a2 0c		ldx #$0c	                ldx #size(OSGBPBParameterBlock)-1
6559	.b242	05a7					-
6560							                .if version==350
6562							                .else
6563	.b242	05a7	b5 00		lda $00,x	                lda tubeOSGBPBParameterBlock,x
6564							                .endif
6565	.b244	05a9	20 61 06	jsr $0661	                jsr sendR2A
6566	.b247	05ac	ca		dex		                dex
6567	.b248	05ad	10 f8		bpl $05a7	                bpl -
6568	.b24a	05af	68		pla		                pla                          ;restore OSGBPB A result
6569	.b24b	05b0	80 86		bra $0538	                bra sendR2CAThenGoIdle       ;send OSGBPB full result

6571							;-------------------------------------------------------------------------
6572							;
6573							; Handle a Tube OSFILE request.
6574							;
6575							; [Tube p24]
6576							;
6577	.b24d	05b2					doFILE: .proc
6578							                ; receive non-name part of OSFILE parameter block
6579	.b24d	05b2	a2 10		ldx #$10	                ldx #size(OSFILEParameterBlock)-2
6580	.b24f	05b4					-
6581	.b24f	05b4	20 a1 06	jsr $06a1	                jsr recvR2
6582							                .if version==350
6584							                .else
6585	.b252	05b7	95 01		sta $01,x	                sta tubeOSFILEParameterBlock.addresses-1,x
6586							                .endif
6587	.b254	05b9	ca		dex		                dex
6588	.b255	05ba	d0 f8		bne $05b4	                bne -
6589	.b257	05bc	20 74 05	jsr $0574	                jsr recvR2String
6590							                .if version==350
6593							                .else
6594	.b25a	05bf	86 00		stx $00		                stx tubeOSFILEParameterBlock+0
6595	.b25c	05c1	84 01		sty $01		                sty tubeOSFILEParameterBlock+1
6596							                .endif
6597	.b25e	05c3	a0 00		ldy #$00	                ldy #>tubeOSFILEParameterBlock
6598							                .cerror (<tubeOSFILEParameterBlock)!=0,"Tube OSFILE parameter block must be at $0000"
6599	.b260	05c5	20 a1 06	jsr $06a1	                jsr recvR2                   ;receive OSFILE reason code
6600	.b263	05c8	20 dd ff	jsr $ffdd	                jsr OSFILE                   ;call OSFILE
6601	.b266	05cb	20 61 06	jsr $0661	                jsr sendR2A                  ;send OSFILE result

6603							                ; send non-name part of updated OSFILE parameter block
6604	.b269	05ce	a2 10		ldx #$10	                ldx #size(OSFILEParameterBlock)-2
6605	.b26b	05d0					-
6606							                .if version==350
6608							                .else
6609	.b26b	05d0	b5 01		lda $01,x	                lda tubeOSFILEParameterBlock.addresses-1,x
6610							                .endif
6611	.b26d	05d2	20 61 06	jsr $0661	                jsr sendR2A
6612	.b270	05d5	ca		dex		                dex
6613	.b271	05d6	d0 f8		bne $05d0	                bne -
6614	.b273	05d8	80 0e		bra $05e8	                bra goIdle_1
6615							                .pend

6617							;-------------------------------------------------------------------------
6618							;
6619							; Handle a Tube small (A<$80) OSBYTE.
6620							;
6621							; [Tube p22]
6622							;
6623	.b275	05da					doSBYT:
6624	.b275	05da	20 9d 06	jsr $069d	                jsr recvR2XA    ;receive X and A arguments
6625	.b278	05dd	20 f4 ff	jsr $fff4	                jsr OSBYTE
6626	.b27b	05e0					sendR2X:
6627	.b27b	05e0	2c e2 fe	bit $fee2	                bit tube.status2
6628	.b27e	05e3	50 fb		bvc $05e0	                bvc sendR2X
6629	.b280	05e5	8e e3 fe	stx $fee3	                stx tube.data2
6630	.b283	05e8					goIdle_1:
6631	.b283	05e8	4c 36 00	jmp $0036	                jmp idleLoop

6633							;-------------------------------------------------------------------------
6634							;
6635							; Handle a Tube non-small OSBYTE.
6636							;
6637							; [Tube p22]
6638	.b286	05eb					doBYTE:
6639	.b286	05eb	20 9d 06	jsr $069d	                jsr recvR2XA                ;receive X and Y arguments
6640	.b289	05ee	a8		tay		                tay                         ;Y = Y argument
6641	.b28a	05ef	20 a1 06	jsr $06a1	                jsr recvR2                  ;receive A argument
6642	.b28d	05f2	20 f4 ff	jsr $fff4	                jsr OSBYTE                  ;call OSBYTE
6643	.b290	05f5	49 9d		eor #$9d	                eor #$9D                    ;was it Fast Tube BPUT?
6644	.b292	05f7	f0 ef		beq $05e8	                beq goIdle_1      ;if it was, done.
6645	.b294	05f9	6a		ror a		                ror a
6646	.b295	05fa	20 61 06	jsr $0661	                jsr sendR2A       ;send carry result
6647	.b298	05fd					-
6648	.b298	05fd	2c e2 fe	bit $fee2	                bit tube.status2
6649	.b29b	0600	50 fb		bvc $05fd	                bvc -
6650	.b29d	0602	8c e3 fe	sty $fee3	                sty tube.data2               ;send Y result
6651	.b2a0	0605	80 d9		bra $05e0	                bra sendR2X                  ;send X result

6653							;-------------------------------------------------------------------------
6654							;
6655							; Handle a Tube OSWORD request.
6656							;
6657							; [Tube p22]
6658							;
6659	.b2a2	0607					doWORD:
6660	.b2a2	0607	20 a1 06	jsr $06a1	                jsr recvR2
6661	.b2a5	060a	a8		tay		                tay
6662	.b2a6	060b	20 aa 06	jsr $06aa	                jsr LAE0F
6663	.b2a9	060e	30 0a		bmi $061a	                bmi LAD7F
6664	.b2ab	0610					LAD75:
6665	.b2ab	0610	20 a1 06	jsr $06a1	                jsr recvR2
6666	.b2ae	0613	9d 28 01	sta $0128,x	                sta tubeOSWORDBuffer,x
6667	.b2b1	0616	ca		dex		                dex
6668	.b2b2	0617	10 f7		bpl $0610	                bpl LAD75
6669	.b2b4	0619	98		tya		                tya
6670	.b2b5	061a					LAD7F:
6671	.b2b5	061a	a2 28		ldx #$28	                ldx #<tubeOSWORDBuffer
6672	.b2b7	061c	a0 01		ldy #$01	                ldy #>tubeOSWORDBuffer
6673	.b2b9	061e	20 f1 ff	jsr $fff1	                jsr OSWORD
6674	.b2bc	0621	20 aa 06	jsr $06aa	                jsr LAE0F
6675	.b2bf	0624	30 c2		bmi $05e8	                bmi goIdle_1
6676	.b2c1	0626					LAD8B:
6677	.b2c1	0626	bc 28 01	ldy $0128,x	                ldy tubeOSWORDBuffer,x
6678	.b2c4	0629					LAD8E:
6679	.b2c4	0629	2c e2 fe	bit $fee2	                bit tube.status2
6680	.b2c7	062c	50 fb		bvc $0629	                bvc LAD8E
6681	.b2c9	062e	8c e3 fe	sty $fee3	                sty tube.data2
6682	.b2cc	0631	ca		dex		                dex
6683	.b2cd	0632	10 f2		bpl $0626	                bpl LAD8B
6684	.b2cf	0634					LAD99:
6685	.b2cf	0634	80 b2		bra $05e8	                bra goIdle_1

6687							;-------------------------------------------------------------------------

6689	.b2d1	0636					doRDLN:
6690	.b2d1	0636	a2 04		ldx #$04	                ldx #$04
6691	.b2d3	0638					LAD9D:
6692	.b2d3	0638	20 a1 06	jsr $06a1	                jsr recvR2
6693							                .if version==350
6695							                .else
6696	.b2d6	063b	95 00		sta $00,x	                sta $00,x
6697							                .endif
6698	.b2d8	063d	ca		dex		                dex
6699	.b2d9	063e	10 f8		bpl $0638	                bpl LAD9D
6700	.b2db	0640	e8		inx		                inx
6701	.b2dc	0641	8a		txa		                txa
6702	.b2dd	0642	a8		tay		                tay
6703	.b2de	0643	20 f1 ff	jsr $fff1	                jsr OSWORD
6704	.b2e1	0646	90 05		bcc $064d	                bcc LADB2
6705	.b2e3	0648	a9 ff		lda #$ff	                lda #$FF
6706	.b2e5	064a	4c 90 05	jmp $0590	                jmp sendR2AThenGoIdle

6708	.b2e8	064d					LADB2:
6709	.b2e8	064d	a2 00		ldx #$00	                ldx #$00
6710	.b2ea	064f	a9 7f		lda #$7f	                lda #$7F
6711	.b2ec	0651	20 61 06	jsr $0661	                jsr sendR2A
6712	.b2ef	0654					LADB9:
6713	.b2ef	0654	bd 00 07	lda $0700,x	                lda $0700,x
6714	.b2f2	0657	20 61 06	jsr $0661	                jsr sendR2A
6715	.b2f5	065a	e8		inx		                inx
6716	.b2f6	065b	c9 0d		cmp #$0d	                cmp #$0D
6717	.b2f8	065d	d0 f5		bne $0654	                bne LADB9
6718	.b2fa	065f	80 d3		bra $0634	                bra LAD99

6720	.b2fc	0661					sendR2A:                          ;adc6/0661
6721	.b2fc	0661	2c e2 fe	bit $fee2	                bit tube.status2
6722	.b2ff	0664	50 fb		bvc $0661	                bvc sendR2A
6723	.b301	0666	8d e3 fe	sta $fee3	                sta tube.data2
6724	.b304	0669	60		rts		                rts

6726	.b305	066a					sendR4TubeClaimantID:              ;adcf
6727	.b305	066a	a5 15		lda $15		                lda tubeClaimantID ;get Tube ID
6728	.b307	066c					sendR4:                          ;add1/066c
6729	.b307	066c	2c e6 fe	bit $fee6	                bit tube.status4 ;check R4 status
6730	.b30a	066f	50 fb		bvc $066c	                bvc sendR4       ;branch taken if FIFO full
6731	.b30c	0671	8d e7 fe	sta $fee7	                sta tube.data4   ;put byte in FIFO
6732	.b30f	0674	60		rts		                rts

6734	.b310	0675					LADDA:
6735	.b310	0675	a5 ff		lda $ff		                lda $FF
6736	.b312	0677	38		sec		                sec
6737	.b313	0678	6a		ror a		                ror a
6738	.b314	0679	80 0f		bra $068a	                bra LADEF

6740	.b316	067b					eventHandler:
6741	.b316	067b	48		pha		                pha
6742	.b317	067c	a9 00		lda #$00	                lda #$00
6743	.b319	067e	20 8a 06	jsr $068a	                jsr LADEF
6744	.b31c	0681	98		tya		                tya
6745	.b31d	0682	20 8a 06	jsr $068a	                jsr LADEF
6746	.b320	0685	8a		txa		                txa
6747	.b321	0686	20 8a 06	jsr $068a	                jsr LADEF
6748	.b324	0689	68		pla		                pla
6749	.b325	068a					LADEF:
6750	.b325	068a	2c e0 fe	bit $fee0	                bit tube.status1
6751	.b328	068d	50 fb		bvc $068a	                bvc LADEF
6752	.b32a	068f	8d e1 fe	sta $fee1	                sta tube.data1
6753	.b32d	0692	60		rts		                rts

6755							;-------------------------------------------------------------------------
6756							;
6757							; Receive multiple bytes via R2: some kind of parameter block,
6758							; followed by the reason code. Store the first N-1 received in zero
6759							; page, starting at $00.
6760							;
6761							; entry:
6762							;
6763							; X = number of bytes to receive, minus 1
6764							;
6765							; exit:
6766							;
6767							; ?$00, ?$01... = first N-1 bytes received
6768							;
6769							; A = final byte received
6770							;
6771							; X = 0
6772							;
6773	.b32e	0693					recvR2N:
6774	.b32e	0693	20 a1 06	jsr $06a1	                jsr recvR2
6775	.b331	0696	95 ff		sta $ff,x	                sta $ff,x
6776	.b333	0698	ca		dex		                dex
6777	.b334	0699	d0 f8		bne $0693	                bne recvR2N
6778	.b336	069b	80 04		bra $06a1	                bra recvR2

6780							;-------------------------------------------------------------------------
6781							;
6782							; Receive 2 bytes via R2.
6783							;
6784							; exit:
6785							;
6786							; X = first byte received
6787							;
6788							; A = second byte received
6789							;
6790	.b338	069d					recvR2XA:
6791	.b338	069d	20 a1 06	jsr $06a1	                jsr recvR2
6792	.b33b	06a0	aa		tax		                tax

6794							;-------------------------------------------------------------------------
6795							;
6796							; Receive 1 byte via R2.
6797							;
6798							; exit:
6799							;
6800							; A = byte received
6801							;
6802	.b33c	06a1					recvR2:
6803	.b33c	06a1	2c e2 fe	bit $fee2	                bit tube.status2
6804	.b33f	06a4	10 fb		bpl $06a1	                bpl recvR2
6805	.b341	06a6	ad e3 fe	lda $fee3	                lda tube.data2
6806	.b344	06a9	60		rts		                rts

6808							;-------------------------------------------------------------------------

6810	.b345	06aa					LAE0F:
6811	.b345	06aa	2c e2 fe	bit $fee2	                bit tube.status2
6812	.b348	06ad	10 fb		bpl $06aa	                bpl LAE0F
6813	.b34a	06af	ae e3 fe	ldx $fee3	                ldx tube.data2
6814	.b34d	06b2	ca		dex		                dex
6815	.b34e	06b3	60		rts		                rts
6816							                .here
6817							                .bend

6819							;-------------------------------------------------------------------------
6820							                .endif

6822							                .if version<400
6824							                .endif

6826							                .if version>=500
6828							                .endif

6830							;-------------------------------------------------------------------------

6832							; Unused space
6833							; ============
6834	>b34f		ff ff ff ff ff ff ff ff		                .fill $b900-*,$ff
	>b357		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b367		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b377		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b387		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b397		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b3a7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b3b7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b3c7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b3d7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b3e7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b3f7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b407		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b417		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b427		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b437		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b447		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b457		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b467		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b477		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b487		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b497		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b4a7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b4b7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b4c7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b4d7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b4e7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b4f7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b507		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b517		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b527		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b537		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b547		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b557		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b567		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b577		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b587		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b597		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b5a7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b5b7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b5c7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b5d7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b5e7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b5f7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b607		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b617		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b627		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b637		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b647		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b657		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b667		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b677		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b687		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b697		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b6a7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b6b7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b6c7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b6d7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b6e7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b6f7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b707		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b717		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b727		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b737		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b747		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b757		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b767		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b777		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b787		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b797		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b7a7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b7b7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b7c7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b7d7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b7e7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b7f7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b807		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b817		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b827		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b837		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b847		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b857		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b867		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b877		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b887		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b897		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b8a7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b8b7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b8c7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b8d7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b8e7		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b8f7		ff ff ff ff ff ff ff ff ff

6836							; Default font
6837							; ============
6838	.b900						LB900:
6839							                .cerror (<LB900)!=0,"font data must be page aligned"
6840							                ; CHR$32 -
6841	>b900		00				                .byte %00000000
6842	>b901		00				                .byte %00000000
6843	>b902		00				                .byte %00000000
6844	>b903		00				                .byte %00000000
6845	>b904		00				                .byte %00000000
6846	>b905		00				                .byte %00000000
6847	>b906		00				                .byte %00000000
6848	>b907		00				                .byte %00000000

6850							                ; CHR$33 - !
6851	>b908		18				                .byte %00011000
6852	>b909		18				                .byte %00011000
6853	>b90a		18				                .byte %00011000
6854	>b90b		18				                .byte %00011000
6855	>b90c		18				                .byte %00011000
6856	>b90d		00				                .byte %00000000
6857	>b90e		18				                .byte %00011000
6858	>b90f		00				                .byte %00000000

6860							                ; CHR$34 - "
6861	>b910		6c				                .byte %01101100
6862	>b911		6c				                .byte %01101100
6863	>b912		6c				                .byte %01101100
6864	>b913		00				                .byte %00000000
6865	>b914		00				                .byte %00000000
6866	>b915		00				                .byte %00000000
6867	>b916		00				                .byte %00000000
6868	>b917		00				                .byte %00000000

6870							                ; CHR$35 - #
6871	>b918		36				                .byte %00110110
6872	>b919		36				                .byte %00110110
6873	>b91a		7f				                .byte %01111111
6874	>b91b		36				                .byte %00110110
6875	>b91c		7f				                .byte %01111111
6876	>b91d		36				                .byte %00110110
6877	>b91e		36				                .byte %00110110
6878	>b91f		00				                .byte %00000000

6880							                ; CHR$36 - $
6881	>b920		0c				                .byte %00001100
6882	>b921		3f				                .byte %00111111
6883	>b922		68				                .byte %01101000
6884	>b923		3e				                .byte %00111110
6885	>b924		0b				                .byte %00001011
6886	>b925		7e				                .byte %01111110
6887	>b926		18				                .byte %00011000
6888	>b927		00				                .byte %00000000

6890							                ; CHR$37 - %
6891	>b928		60				                .byte %01100000
6892	>b929		66				                .byte %01100110
6893	>b92a		0c				                .byte %00001100
6894	>b92b		18				                .byte %00011000
6895	>b92c		30				                .byte %00110000
6896	>b92d		66				                .byte %01100110
6897	>b92e		06				                .byte %00000110
6898	>b92f		00				                .byte %00000000

6900							                ; CHR$38 - &
6901	>b930		38				                .byte %00111000
6902	>b931		6c				                .byte %01101100
6903	>b932		6c				                .byte %01101100
6904	>b933		38				                .byte %00111000
6905	>b934		6d				                .byte %01101101
6906	>b935		66				                .byte %01100110
6907	>b936		3b				                .byte %00111011
6908	>b937		00				                .byte %00000000

6910							                ; CHR$39 - '
6911	>b938		0c				                .byte %00001100
6912	>b939		18				                .byte %00011000
6913	>b93a		30				                .byte %00110000
6914	>b93b		00				                .byte %00000000
6915	>b93c		00				                .byte %00000000
6916	>b93d		00				                .byte %00000000
6917	>b93e		00				                .byte %00000000
6918	>b93f		00				                .byte %00000000

6920							                ; CHR$40 - (
6921	>b940		0c				                .byte %00001100
6922	>b941		18				                .byte %00011000
6923	>b942		30				                .byte %00110000
6924	>b943		30				                .byte %00110000
6925	>b944		30				                .byte %00110000
6926	>b945		18				                .byte %00011000
6927	>b946		0c				                .byte %00001100
6928	>b947		00				                .byte %00000000

6930							                ; CHR$41 - )
6931	>b948		30				                .byte %00110000
6932	>b949		18				                .byte %00011000
6933	>b94a		0c				                .byte %00001100
6934	>b94b		0c				                .byte %00001100
6935	>b94c		0c				                .byte %00001100
6936	>b94d		18				                .byte %00011000
6937	>b94e		30				                .byte %00110000
6938	>b94f		00				                .byte %00000000

6940							                ; CHR$42 - *
6941	>b950		00				                .byte %00000000
6942	>b951		18				                .byte %00011000
6943	>b952		7e				                .byte %01111110
6944	>b953		3c				                .byte %00111100
6945	>b954		7e				                .byte %01111110
6946	>b955		18				                .byte %00011000
6947	>b956		00				                .byte %00000000
6948	>b957		00				                .byte %00000000

6950							                ; CHR$43 - +
6951	>b958		00				                .byte %00000000
6952	>b959		18				                .byte %00011000
6953	>b95a		18				                .byte %00011000
6954	>b95b		7e				                .byte %01111110
6955	>b95c		18				                .byte %00011000
6956	>b95d		18				                .byte %00011000
6957	>b95e		00				                .byte %00000000
6958	>b95f		00				                .byte %00000000

6960							                ; CHR$44 - ,
6961	>b960		00				                .byte %00000000
6962	>b961		00				                .byte %00000000
6963	>b962		00				                .byte %00000000
6964	>b963		00				                .byte %00000000
6965	>b964		00				                .byte %00000000
6966	>b965		18				                .byte %00011000
6967	>b966		18				                .byte %00011000
6968	>b967		30				                .byte %00110000

6970							                ; CHR$45 - -
6971	>b968		00				                .byte %00000000
6972	>b969		00				                .byte %00000000
6973	>b96a		00				                .byte %00000000
6974	>b96b		7e				                .byte %01111110
6975	>b96c		00				                .byte %00000000
6976	>b96d		00				                .byte %00000000
6977	>b96e		00				                .byte %00000000
6978	>b96f		00				                .byte %00000000

6980							                ; CHR$46 - .
6981	>b970		00				                .byte %00000000
6982	>b971		00				                .byte %00000000
6983	>b972		00				                .byte %00000000
6984	>b973		00				                .byte %00000000
6985	>b974		00				                .byte %00000000
6986	>b975		18				                .byte %00011000
6987	>b976		18				                .byte %00011000
6988	>b977		00				                .byte %00000000

6990							                ; CHR$47 - /
6991	>b978		00				                .byte %00000000
6992	>b979		06				                .byte %00000110
6993	>b97a		0c				                .byte %00001100
6994	>b97b		18				                .byte %00011000
6995	>b97c		30				                .byte %00110000
6996	>b97d		60				                .byte %01100000
6997	>b97e		00				                .byte %00000000
6998	>b97f		00				                .byte %00000000

7000							                ; CHR$48 - 0
7001	>b980		3c				                .byte %00111100
7002	>b981		66				                .byte %01100110
7003	>b982		6e				                .byte %01101110
7004	>b983		7e				                .byte %01111110
7005	>b984		76				                .byte %01110110
7006	>b985		66				                .byte %01100110
7007	>b986		3c				                .byte %00111100
7008	>b987		00				                .byte %00000000

7010							                ; CHR$49 - 1
7011	>b988		18				                .byte %00011000
7012	>b989		38				                .byte %00111000
7013	>b98a		18				                .byte %00011000
7014	>b98b		18				                .byte %00011000
7015	>b98c		18				                .byte %00011000
7016	>b98d		18				                .byte %00011000
7017	>b98e		7e				                .byte %01111110
7018	>b98f		00				                .byte %00000000

7020							                ; CHR$50 - 2
7021	>b990		3c				                .byte %00111100
7022	>b991		66				                .byte %01100110
7023	>b992		06				                .byte %00000110
7024	>b993		0c				                .byte %00001100
7025	>b994		18				                .byte %00011000
7026	>b995		30				                .byte %00110000
7027	>b996		7e				                .byte %01111110
7028	>b997		00				                .byte %00000000

7030							                ; CHR$51 - 3
7031	>b998		3c				                .byte %00111100
7032	>b999		66				                .byte %01100110
7033	>b99a		06				                .byte %00000110
7034	>b99b		1c				                .byte %00011100
7035	>b99c		06				                .byte %00000110
7036	>b99d		66				                .byte %01100110
7037	>b99e		3c				                .byte %00111100
7038	>b99f		00				                .byte %00000000

7040							                ; CHR$52 - 4
7041	>b9a0		0c				                .byte %00001100
7042	>b9a1		1c				                .byte %00011100
7043	>b9a2		3c				                .byte %00111100
7044	>b9a3		6c				                .byte %01101100
7045	>b9a4		7e				                .byte %01111110
7046	>b9a5		0c				                .byte %00001100
7047	>b9a6		0c				                .byte %00001100
7048	>b9a7		00				                .byte %00000000

7050							                ; CHR$53 - 5
7051	>b9a8		7e				                .byte %01111110
7052	>b9a9		60				                .byte %01100000
7053	>b9aa		7c				                .byte %01111100
7054	>b9ab		06				                .byte %00000110
7055	>b9ac		06				                .byte %00000110
7056	>b9ad		66				                .byte %01100110
7057	>b9ae		3c				                .byte %00111100
7058	>b9af		00				                .byte %00000000

7060							                ; CHR$54 - 6
7061	>b9b0		1c				                .byte %00011100
7062	>b9b1		30				                .byte %00110000
7063	>b9b2		60				                .byte %01100000
7064	>b9b3		7c				                .byte %01111100
7065	>b9b4		66				                .byte %01100110
7066	>b9b5		66				                .byte %01100110
7067	>b9b6		3c				                .byte %00111100
7068	>b9b7		00				                .byte %00000000

7070							                ; CHR$55 - 7
7071	>b9b8		7e				                .byte %01111110
7072	>b9b9		06				                .byte %00000110
7073	>b9ba		0c				                .byte %00001100
7074	>b9bb		18				                .byte %00011000
7075	>b9bc		30				                .byte %00110000
7076	>b9bd		30				                .byte %00110000
7077	>b9be		30				                .byte %00110000
7078	>b9bf		00				                .byte %00000000

7080							                ; CHR$56 - 8
7081	>b9c0		3c				                .byte %00111100
7082	>b9c1		66				                .byte %01100110
7083	>b9c2		66				                .byte %01100110
7084	>b9c3		3c				                .byte %00111100
7085	>b9c4		66				                .byte %01100110
7086	>b9c5		66				                .byte %01100110
7087	>b9c6		3c				                .byte %00111100
7088	>b9c7		00				                .byte %00000000

7090							                ; CHR$57 - 9
7091	>b9c8		3c				                .byte %00111100
7092	>b9c9		66				                .byte %01100110
7093	>b9ca		66				                .byte %01100110
7094	>b9cb		3e				                .byte %00111110
7095	>b9cc		06				                .byte %00000110
7096	>b9cd		0c				                .byte %00001100
7097	>b9ce		38				                .byte %00111000
7098	>b9cf		00				                .byte %00000000

7100							                ; CHR$58 - :
7101	>b9d0		00				                .byte %00000000
7102	>b9d1		00				                .byte %00000000
7103	>b9d2		18				                .byte %00011000
7104	>b9d3		18				                .byte %00011000
7105	>b9d4		00				                .byte %00000000
7106	>b9d5		18				                .byte %00011000
7107	>b9d6		18				                .byte %00011000
7108	>b9d7		00				                .byte %00000000

7110							                ; CHR$59 - ;
7111	>b9d8		00				                .byte %00000000
7112	>b9d9		00				                .byte %00000000
7113	>b9da		18				                .byte %00011000
7114	>b9db		18				                .byte %00011000
7115	>b9dc		00				                .byte %00000000
7116	>b9dd		18				                .byte %00011000
7117	>b9de		18				                .byte %00011000
7118	>b9df		30				                .byte %00110000

7120							                ; CHR$60 - <
7121	>b9e0		0c				                .byte %00001100
7122	>b9e1		18				                .byte %00011000
7123	>b9e2		30				                .byte %00110000
7124	>b9e3		60				                .byte %01100000
7125	>b9e4		30				                .byte %00110000
7126	>b9e5		18				                .byte %00011000
7127	>b9e6		0c				                .byte %00001100
7128	>b9e7		00				                .byte %00000000

7130							                ; CHR$61 - =
7131	>b9e8		00				                .byte %00000000
7132	>b9e9		00				                .byte %00000000
7133	>b9ea		7e				                .byte %01111110
7134	>b9eb		00				                .byte %00000000
7135	>b9ec		7e				                .byte %01111110
7136	>b9ed		00				                .byte %00000000
7137	>b9ee		00				                .byte %00000000
7138	>b9ef		00				                .byte %00000000

7140							                ; CHR$62 - >
7141	>b9f0		30				                .byte %00110000
7142	>b9f1		18				                .byte %00011000
7143	>b9f2		0c				                .byte %00001100
7144	>b9f3		06				                .byte %00000110
7145	>b9f4		0c				                .byte %00001100
7146	>b9f5		18				                .byte %00011000
7147	>b9f6		30				                .byte %00110000
7148	>b9f7		00				                .byte %00000000

7150							                ; CHR$63 - ?
7151	>b9f8		3c				                .byte %00111100
7152	>b9f9		66				                .byte %01100110
7153	>b9fa		0c				                .byte %00001100
7154	>b9fb		18				                .byte %00011000
7155	>b9fc		18				                .byte %00011000
7156	>b9fd		00				                .byte %00000000
7157	>b9fe		18				                .byte %00011000
7158	>b9ff		00				                .byte %00000000

7160							                ; CHR$64 - @
7161	>ba00		3c				                .byte %00111100
7162	>ba01		66				                .byte %01100110
7163	>ba02		6e				                .byte %01101110
7164	>ba03		6a				                .byte %01101010
7165	>ba04		6e				                .byte %01101110
7166	>ba05		60				                .byte %01100000
7167	>ba06		3c				                .byte %00111100
7168	>ba07		00				                .byte %00000000

7170							                ; CHR$65 - A
7171	>ba08		3c				                .byte %00111100
7172	>ba09		66				                .byte %01100110
7173	>ba0a		66				                .byte %01100110
7174	>ba0b		7e				                .byte %01111110
7175	>ba0c		66				                .byte %01100110
7176	>ba0d		66				                .byte %01100110
7177	>ba0e		66				                .byte %01100110
7178	>ba0f		00				                .byte %00000000

7180							                ; CHR$66 - B
7181	>ba10		7c				                .byte %01111100
7182	>ba11		66				                .byte %01100110
7183	>ba12		66				                .byte %01100110
7184	>ba13		7c				                .byte %01111100
7185	>ba14		66				                .byte %01100110
7186	>ba15		66				                .byte %01100110
7187	>ba16		7c				                .byte %01111100
7188	>ba17		00				                .byte %00000000

7190							                ; CHR$67 - C
7191	>ba18		3c				                .byte %00111100
7192	>ba19		66				                .byte %01100110
7193	>ba1a		60				                .byte %01100000
7194	>ba1b		60				                .byte %01100000
7195	>ba1c		60				                .byte %01100000
7196	>ba1d		66				                .byte %01100110
7197	>ba1e		3c				                .byte %00111100
7198	>ba1f		00				                .byte %00000000

7200							                ; CHR$68 - D
7201	>ba20		78				                .byte %01111000
7202	>ba21		6c				                .byte %01101100
7203	>ba22		66				                .byte %01100110
7204	>ba23		66				                .byte %01100110
7205	>ba24		66				                .byte %01100110
7206	>ba25		6c				                .byte %01101100
7207	>ba26		78				                .byte %01111000
7208	>ba27		00				                .byte %00000000

7210							                ; CHR$69 - E
7211	>ba28		7e				                .byte %01111110
7212	>ba29		60				                .byte %01100000
7213	>ba2a		60				                .byte %01100000
7214	>ba2b		7c				                .byte %01111100
7215	>ba2c		60				                .byte %01100000
7216	>ba2d		60				                .byte %01100000
7217	>ba2e		7e				                .byte %01111110
7218	>ba2f		00				                .byte %00000000

7220							                ; CHR$70 - F
7221	>ba30		7e				                .byte %01111110
7222	>ba31		60				                .byte %01100000
7223	>ba32		60				                .byte %01100000
7224	>ba33		7c				                .byte %01111100
7225	>ba34		60				                .byte %01100000
7226	>ba35		60				                .byte %01100000
7227	>ba36		60				                .byte %01100000
7228	>ba37		00				                .byte %00000000

7230							                ; CHR$71 - G
7231	>ba38		3c				                .byte %00111100
7232	>ba39		66				                .byte %01100110
7233	>ba3a		60				                .byte %01100000
7234	>ba3b		6e				                .byte %01101110
7235	>ba3c		66				                .byte %01100110
7236	>ba3d		66				                .byte %01100110
7237	>ba3e		3c				                .byte %00111100
7238	>ba3f		00				                .byte %00000000

7240							                ; CHR$72 - H
7241	>ba40		66				                .byte %01100110
7242	>ba41		66				                .byte %01100110
7243	>ba42		66				                .byte %01100110
7244	>ba43		7e				                .byte %01111110
7245	>ba44		66				                .byte %01100110
7246	>ba45		66				                .byte %01100110
7247	>ba46		66				                .byte %01100110
7248	>ba47		00				                .byte %00000000

7250							                ; CHR$73 - I
7251	>ba48		7e				                .byte %01111110
7252	>ba49		18				                .byte %00011000
7253	>ba4a		18				                .byte %00011000
7254	>ba4b		18				                .byte %00011000
7255	>ba4c		18				                .byte %00011000
7256	>ba4d		18				                .byte %00011000
7257	>ba4e		7e				                .byte %01111110
7258	>ba4f		00				                .byte %00000000

7260							                ; CHR$74 - J
7261	>ba50		3e				                .byte %00111110
7262	>ba51		0c				                .byte %00001100
7263	>ba52		0c				                .byte %00001100
7264	>ba53		0c				                .byte %00001100
7265	>ba54		0c				                .byte %00001100
7266	>ba55		6c				                .byte %01101100
7267	>ba56		38				                .byte %00111000
7268	>ba57		00				                .byte %00000000

7270							                ; CHR$75 - K
7271	>ba58		66				                .byte %01100110
7272	>ba59		6c				                .byte %01101100
7273	>ba5a		78				                .byte %01111000
7274	>ba5b		70				                .byte %01110000
7275	>ba5c		78				                .byte %01111000
7276	>ba5d		6c				                .byte %01101100
7277	>ba5e		66				                .byte %01100110
7278	>ba5f		00				                .byte %00000000

7280							                ; CHR$76 - L
7281	>ba60		60				                .byte %01100000
7282	>ba61		60				                .byte %01100000
7283	>ba62		60				                .byte %01100000
7284	>ba63		60				                .byte %01100000
7285	>ba64		60				                .byte %01100000
7286	>ba65		60				                .byte %01100000
7287	>ba66		7e				                .byte %01111110
7288	>ba67		00				                .byte %00000000

7290							                ; CHR$77 - M
7291	>ba68		63				                .byte %01100011
7292	>ba69		77				                .byte %01110111
7293	>ba6a		7f				                .byte %01111111
7294	>ba6b		6b				                .byte %01101011
7295	>ba6c		6b				                .byte %01101011
7296	>ba6d		63				                .byte %01100011
7297	>ba6e		63				                .byte %01100011
7298	>ba6f		00				                .byte %00000000

7300							                ; CHR$78 - N
7301	>ba70		66				                .byte %01100110
7302	>ba71		66				                .byte %01100110
7303	>ba72		76				                .byte %01110110
7304	>ba73		7e				                .byte %01111110
7305	>ba74		6e				                .byte %01101110
7306	>ba75		66				                .byte %01100110
7307	>ba76		66				                .byte %01100110
7308	>ba77		00				                .byte %00000000

7310							                ; CHR$79 - O
7311	>ba78		3c				                .byte %00111100
7312	>ba79		66				                .byte %01100110
7313	>ba7a		66				                .byte %01100110
7314	>ba7b		66				                .byte %01100110
7315	>ba7c		66				                .byte %01100110
7316	>ba7d		66				                .byte %01100110
7317	>ba7e		3c				                .byte %00111100
7318	>ba7f		00				                .byte %00000000

7320							                ; CHR$80 - P
7321	>ba80		7c				                .byte %01111100
7322	>ba81		66				                .byte %01100110
7323	>ba82		66				                .byte %01100110
7324	>ba83		7c				                .byte %01111100
7325	>ba84		60				                .byte %01100000
7326	>ba85		60				                .byte %01100000
7327	>ba86		60				                .byte %01100000
7328	>ba87		00				                .byte %00000000

7330							                ; CHR$81 - Q
7331	>ba88		3c				                .byte %00111100
7332	>ba89		66				                .byte %01100110
7333	>ba8a		66				                .byte %01100110
7334	>ba8b		66				                .byte %01100110
7335	>ba8c		6a				                .byte %01101010
7336	>ba8d		6c				                .byte %01101100
7337	>ba8e		36				                .byte %00110110
7338	>ba8f		00				                .byte %00000000

7340							                ; CHR$82 - R
7341	>ba90		7c				                .byte %01111100
7342	>ba91		66				                .byte %01100110
7343	>ba92		66				                .byte %01100110
7344	>ba93		7c				                .byte %01111100
7345	>ba94		6c				                .byte %01101100
7346	>ba95		66				                .byte %01100110
7347	>ba96		66				                .byte %01100110
7348	>ba97		00				                .byte %00000000

7350							                ; CHR$83 - S
7351	>ba98		3c				                .byte %00111100
7352	>ba99		66				                .byte %01100110
7353	>ba9a		60				                .byte %01100000
7354	>ba9b		3c				                .byte %00111100
7355	>ba9c		06				                .byte %00000110
7356	>ba9d		66				                .byte %01100110
7357	>ba9e		3c				                .byte %00111100
7358	>ba9f		00				                .byte %00000000

7360							                ; CHR$84 - T
7361	>baa0		7e				                .byte %01111110
7362	>baa1		18				                .byte %00011000
7363	>baa2		18				                .byte %00011000
7364	>baa3		18				                .byte %00011000
7365	>baa4		18				                .byte %00011000
7366	>baa5		18				                .byte %00011000
7367	>baa6		18				                .byte %00011000
7368	>baa7		00				                .byte %00000000

7370							                ; CHR$85 - U
7371	>baa8		66				                .byte %01100110
7372	>baa9		66				                .byte %01100110
7373	>baaa		66				                .byte %01100110
7374	>baab		66				                .byte %01100110
7375	>baac		66				                .byte %01100110
7376	>baad		66				                .byte %01100110
7377	>baae		3c				                .byte %00111100
7378	>baaf		00				                .byte %00000000

7380							                ; CHR$86 - V
7381	>bab0		66				                .byte %01100110
7382	>bab1		66				                .byte %01100110
7383	>bab2		66				                .byte %01100110
7384	>bab3		66				                .byte %01100110
7385	>bab4		66				                .byte %01100110
7386	>bab5		3c				                .byte %00111100
7387	>bab6		18				                .byte %00011000
7388	>bab7		00				                .byte %00000000

7390							                ; CHR$87 - W
7391	>bab8		63				                .byte %01100011
7392	>bab9		63				                .byte %01100011
7393	>baba		6b				                .byte %01101011
7394	>babb		6b				                .byte %01101011
7395	>babc		7f				                .byte %01111111
7396	>babd		77				                .byte %01110111
7397	>babe		63				                .byte %01100011
7398	>babf		00				                .byte %00000000

7400							                ; CHR$88 - X
7401	>bac0		66				                .byte %01100110
7402	>bac1		66				                .byte %01100110
7403	>bac2		3c				                .byte %00111100
7404	>bac3		18				                .byte %00011000
7405	>bac4		3c				                .byte %00111100
7406	>bac5		66				                .byte %01100110
7407	>bac6		66				                .byte %01100110
7408	>bac7		00				                .byte %00000000

7410							                ; CHR$89 - Y
7411	>bac8		66				                .byte %01100110
7412	>bac9		66				                .byte %01100110
7413	>baca		66				                .byte %01100110
7414	>bacb		3c				                .byte %00111100
7415	>bacc		18				                .byte %00011000
7416	>bacd		18				                .byte %00011000
7417	>bace		18				                .byte %00011000
7418	>bacf		00				                .byte %00000000

7420							                ; CHR$90 - Z
7421	>bad0		7e				                .byte %01111110
7422	>bad1		06				                .byte %00000110
7423	>bad2		0c				                .byte %00001100
7424	>bad3		18				                .byte %00011000
7425	>bad4		30				                .byte %00110000
7426	>bad5		60				                .byte %01100000
7427	>bad6		7e				                .byte %01111110
7428	>bad7		00				                .byte %00000000

7430							                ; CHR$91 - [
7431	>bad8		7c				                .byte %01111100
7432	>bad9		60				                .byte %01100000
7433	>bada		60				                .byte %01100000
7434	>badb		60				                .byte %01100000
7435	>badc		60				                .byte %01100000
7436	>badd		60				                .byte %01100000
7437	>bade		7c				                .byte %01111100
7438	>badf		00				                .byte %00000000

7440							                ; CHR$92 - \
7441	>bae0		00				                .byte %00000000
7442	>bae1		60				                .byte %01100000
7443	>bae2		30				                .byte %00110000
7444	>bae3		18				                .byte %00011000
7445	>bae4		0c				                .byte %00001100
7446	>bae5		06				                .byte %00000110
7447	>bae6		00				                .byte %00000000
7448	>bae7		00				                .byte %00000000

7450							                ; CHR$93 - ]
7451	>bae8		3e				                .byte %00111110
7452	>bae9		06				                .byte %00000110
7453	>baea		06				                .byte %00000110
7454	>baeb		06				                .byte %00000110
7455	>baec		06				                .byte %00000110
7456	>baed		06				                .byte %00000110
7457	>baee		3e				                .byte %00111110
7458	>baef		00				                .byte %00000000

7460							                ; CHR$94 - ^
7461	>baf0		18				                .byte %00011000
7462	>baf1		3c				                .byte %00111100
7463	>baf2		66				                .byte %01100110
7464	>baf3		42				                .byte %01000010
7465	>baf4		00				                .byte %00000000
7466	>baf5		00				                .byte %00000000
7467	>baf6		00				                .byte %00000000
7468	>baf7		00				                .byte %00000000

7470							                ; CHR$95 - _
7471	>baf8		00				                .byte %00000000
7472	>baf9		00				                .byte %00000000
7473	>bafa		00				                .byte %00000000
7474	>bafb		00				                .byte %00000000
7475	>bafc		00				                .byte %00000000
7476	>bafd		00				                .byte %00000000
7477	>bafe		00				                .byte %00000000
7478	>baff		ff				                .byte %11111111

7480							                ; CHR$96
7481	>bb00		1c				                .byte %00011100
7482	>bb01		36				                .byte %00110110
7483	>bb02		30				                .byte %00110000
7484	>bb03		7c				                .byte %01111100
7485	>bb04		30				                .byte %00110000
7486	>bb05		30				                .byte %00110000
7487	>bb06		7e				                .byte %01111110
7488	>bb07		00				                .byte %00000000

7490							                ; CHR$97 - a
7491	>bb08		00				                .byte %00000000
7492	>bb09		00				                .byte %00000000
7493	>bb0a		3c				                .byte %00111100
7494	>bb0b		06				                .byte %00000110
7495	>bb0c		3e				                .byte %00111110
7496	>bb0d		66				                .byte %01100110
7497	>bb0e		3e				                .byte %00111110
7498	>bb0f		00				                .byte %00000000

7500							                ; CHR$98 - b
7501	>bb10		60				                .byte %01100000
7502	>bb11		60				                .byte %01100000
7503	>bb12		7c				                .byte %01111100
7504	>bb13		66				                .byte %01100110
7505	>bb14		66				                .byte %01100110
7506	>bb15		66				                .byte %01100110
7507	>bb16		7c				                .byte %01111100
7508	>bb17		00				                .byte %00000000

7510							                ; CHR$99 - c
7511	>bb18		00				                .byte %00000000
7512	>bb19		00				                .byte %00000000
7513	>bb1a		3c				                .byte %00111100
7514	>bb1b		66				                .byte %01100110
7515	>bb1c		60				                .byte %01100000
7516	>bb1d		66				                .byte %01100110
7517	>bb1e		3c				                .byte %00111100
7518	>bb1f		00				                .byte %00000000

7520							                ; CHR$100 - d
7521	>bb20		06				                .byte %00000110
7522	>bb21		06				                .byte %00000110
7523	>bb22		3e				                .byte %00111110
7524	>bb23		66				                .byte %01100110
7525	>bb24		66				                .byte %01100110
7526	>bb25		66				                .byte %01100110
7527	>bb26		3e				                .byte %00111110
7528	>bb27		00				                .byte %00000000

7530							                ; CHR$101 - e
7531	>bb28		00				                .byte %00000000
7532	>bb29		00				                .byte %00000000
7533	>bb2a		3c				                .byte %00111100
7534	>bb2b		66				                .byte %01100110
7535	>bb2c		7e				                .byte %01111110
7536	>bb2d		60				                .byte %01100000
7537	>bb2e		3c				                .byte %00111100
7538	>bb2f		00				                .byte %00000000

7540							                ; CHR$102 - f
7541	>bb30		1c				                .byte %00011100
7542	>bb31		30				                .byte %00110000
7543	>bb32		30				                .byte %00110000
7544	>bb33		7c				                .byte %01111100
7545	>bb34		30				                .byte %00110000
7546	>bb35		30				                .byte %00110000
7547	>bb36		30				                .byte %00110000
7548	>bb37		00				                .byte %00000000

7550							                ; CHR$103 - g
7551	>bb38		00				                .byte %00000000
7552	>bb39		00				                .byte %00000000
7553	>bb3a		3e				                .byte %00111110
7554	>bb3b		66				                .byte %01100110
7555	>bb3c		66				                .byte %01100110
7556	>bb3d		3e				                .byte %00111110
7557	>bb3e		06				                .byte %00000110
7558	>bb3f		3c				                .byte %00111100

7560							                ; CHR$104 - h
7561	>bb40		60				                .byte %01100000
7562	>bb41		60				                .byte %01100000
7563	>bb42		7c				                .byte %01111100
7564	>bb43		66				                .byte %01100110
7565	>bb44		66				                .byte %01100110
7566	>bb45		66				                .byte %01100110
7567	>bb46		66				                .byte %01100110
7568	>bb47		00				                .byte %00000000

7570							                ; CHR$105 - i
7571	>bb48		18				                .byte %00011000
7572	>bb49		00				                .byte %00000000
7573	>bb4a		38				                .byte %00111000
7574	>bb4b		18				                .byte %00011000
7575	>bb4c		18				                .byte %00011000
7576	>bb4d		18				                .byte %00011000
7577	>bb4e		3c				                .byte %00111100
7578	>bb4f		00				                .byte %00000000

7580							                ; CHR$106 - j
7581	>bb50		18				                .byte %00011000
7582	>bb51		00				                .byte %00000000
7583	>bb52		38				                .byte %00111000
7584	>bb53		18				                .byte %00011000
7585	>bb54		18				                .byte %00011000
7586	>bb55		18				                .byte %00011000
7587	>bb56		18				                .byte %00011000
7588	>bb57		70				                .byte %01110000

7590							                ; CHR$107 - k
7591	>bb58		60				                .byte %01100000
7592	>bb59		60				                .byte %01100000
7593	>bb5a		66				                .byte %01100110
7594	>bb5b		6c				                .byte %01101100
7595	>bb5c		78				                .byte %01111000
7596	>bb5d		6c				                .byte %01101100
7597	>bb5e		66				                .byte %01100110
7598	>bb5f		00				                .byte %00000000

7600							                ; CHR$108 - l
7601	>bb60		38				                .byte %00111000
7602	>bb61		18				                .byte %00011000
7603	>bb62		18				                .byte %00011000
7604	>bb63		18				                .byte %00011000
7605	>bb64		18				                .byte %00011000
7606	>bb65		18				                .byte %00011000
7607	>bb66		3c				                .byte %00111100
7608	>bb67		00				                .byte %00000000

7610							                ; CHR$109 - m
7611	>bb68		00				                .byte %00000000
7612	>bb69		00				                .byte %00000000
7613	>bb6a		36				                .byte %00110110
7614	>bb6b		7f				                .byte %01111111
7615	>bb6c		6b				                .byte %01101011
7616	>bb6d		6b				                .byte %01101011
7617	>bb6e		63				                .byte %01100011
7618	>bb6f		00				                .byte %00000000

7620							                ; CHR$110 - n
7621	>bb70		00				                .byte %00000000
7622	>bb71		00				                .byte %00000000
7623	>bb72		7c				                .byte %01111100
7624	>bb73		66				                .byte %01100110
7625	>bb74		66				                .byte %01100110
7626	>bb75		66				                .byte %01100110
7627	>bb76		66				                .byte %01100110
7628	>bb77		00				                .byte %00000000

7630							                ; CHR$111 - o
7631	>bb78		00				                .byte %00000000
7632	>bb79		00				                .byte %00000000
7633	>bb7a		3c				                .byte %00111100
7634	>bb7b		66				                .byte %01100110
7635	>bb7c		66				                .byte %01100110
7636	>bb7d		66				                .byte %01100110
7637	>bb7e		3c				                .byte %00111100
7638	>bb7f		00				                .byte %00000000

7640							                ; CHR$112 - p
7641	>bb80		00				                .byte %00000000
7642	>bb81		00				                .byte %00000000
7643	>bb82		7c				                .byte %01111100
7644	>bb83		66				                .byte %01100110
7645	>bb84		66				                .byte %01100110
7646	>bb85		7c				                .byte %01111100
7647	>bb86		60				                .byte %01100000
7648	>bb87		60				                .byte %01100000

7650							                ; CHR$113 - q
7651	>bb88		00				                .byte %00000000
7652	>bb89		00				                .byte %00000000
7653	>bb8a		3e				                .byte %00111110
7654	>bb8b		66				                .byte %01100110
7655	>bb8c		66				                .byte %01100110
7656	>bb8d		3e				                .byte %00111110
7657	>bb8e		06				                .byte %00000110
7658	>bb8f		07				                .byte %00000111

7660							                ; CHR$114 - r
7661	>bb90		00				                .byte %00000000
7662	>bb91		00				                .byte %00000000
7663	>bb92		6c				                .byte %01101100
7664	>bb93		76				                .byte %01110110
7665	>bb94		60				                .byte %01100000
7666	>bb95		60				                .byte %01100000
7667	>bb96		60				                .byte %01100000
7668	>bb97		00				                .byte %00000000

7670							                ; CHR$115 - s
7671	>bb98		00				                .byte %00000000
7672	>bb99		00				                .byte %00000000
7673	>bb9a		3e				                .byte %00111110
7674	>bb9b		60				                .byte %01100000
7675	>bb9c		3c				                .byte %00111100
7676	>bb9d		06				                .byte %00000110
7677	>bb9e		7c				                .byte %01111100
7678	>bb9f		00				                .byte %00000000

7680							                ; CHR$116 - t
7681	>bba0		30				                .byte %00110000
7682	>bba1		30				                .byte %00110000
7683	>bba2		7c				                .byte %01111100
7684	>bba3		30				                .byte %00110000
7685	>bba4		30				                .byte %00110000
7686	>bba5		30				                .byte %00110000
7687	>bba6		1c				                .byte %00011100
7688	>bba7		00				                .byte %00000000

7690							                ; CHR$117 - u
7691	>bba8		00				                .byte %00000000
7692	>bba9		00				                .byte %00000000
7693	>bbaa		66				                .byte %01100110
7694	>bbab		66				                .byte %01100110
7695	>bbac		66				                .byte %01100110
7696	>bbad		66				                .byte %01100110
7697	>bbae		3e				                .byte %00111110
7698	>bbaf		00				                .byte %00000000

7700							                ; CHR$118 - v
7701	>bbb0		00				                .byte %00000000
7702	>bbb1		00				                .byte %00000000
7703	>bbb2		66				                .byte %01100110
7704	>bbb3		66				                .byte %01100110
7705	>bbb4		66				                .byte %01100110
7706	>bbb5		3c				                .byte %00111100
7707	>bbb6		18				                .byte %00011000
7708	>bbb7		00				                .byte %00000000

7710							                ; CHR$119 - w
7711	>bbb8		00				                .byte %00000000
7712	>bbb9		00				                .byte %00000000
7713	>bbba		63				                .byte %01100011
7714	>bbbb		6b				                .byte %01101011
7715	>bbbc		6b				                .byte %01101011
7716	>bbbd		7f				                .byte %01111111
7717	>bbbe		36				                .byte %00110110
7718	>bbbf		00				                .byte %00000000

7720							                ; CHR$120 - x
7721	>bbc0		00				                .byte %00000000
7722	>bbc1		00				                .byte %00000000
7723	>bbc2		66				                .byte %01100110
7724	>bbc3		3c				                .byte %00111100
7725	>bbc4		18				                .byte %00011000
7726	>bbc5		3c				                .byte %00111100
7727	>bbc6		66				                .byte %01100110
7728	>bbc7		00				                .byte %00000000

7730							                ; CHR$121 - y
7731	>bbc8		00				                .byte %00000000
7732	>bbc9		00				                .byte %00000000
7733	>bbca		66				                .byte %01100110
7734	>bbcb		66				                .byte %01100110
7735	>bbcc		66				                .byte %01100110
7736	>bbcd		3e				                .byte %00111110
7737	>bbce		06				                .byte %00000110
7738	>bbcf		3c				                .byte %00111100

7740							                ; CHR$122 - z
7741	>bbd0		00				                .byte %00000000
7742	>bbd1		00				                .byte %00000000
7743	>bbd2		7e				                .byte %01111110
7744	>bbd3		0c				                .byte %00001100
7745	>bbd4		18				                .byte %00011000
7746	>bbd5		30				                .byte %00110000
7747	>bbd6		7e				                .byte %01111110
7748	>bbd7		00				                .byte %00000000

7750							                ; CHR$123 - {
7751	>bbd8		0c				                .byte %00001100
7752	>bbd9		18				                .byte %00011000
7753	>bbda		18				                .byte %00011000
7754	>bbdb		70				                .byte %01110000
7755	>bbdc		18				                .byte %00011000
7756	>bbdd		18				                .byte %00011000
7757	>bbde		0c				                .byte %00001100
7758	>bbdf		00				                .byte %00000000

7760							                ; CHR$124 - |
7761	>bbe0		18				                .byte %00011000
7762	>bbe1		18				                .byte %00011000
7763	>bbe2		18				                .byte %00011000
7764	>bbe3		00				                .byte %00000000
7765	>bbe4		18				                .byte %00011000
7766	>bbe5		18				                .byte %00011000
7767	>bbe6		18				                .byte %00011000
7768	>bbe7		00				                .byte %00000000

7770							                ; CHR$125 - }
7771	>bbe8		30				                .byte %00110000
7772	>bbe9		18				                .byte %00011000
7773	>bbea		18				                .byte %00011000
7774	>bbeb		0e				                .byte %00001110
7775	>bbec		18				                .byte %00011000
7776	>bbed		18				                .byte %00011000
7777	>bbee		30				                .byte %00110000
7778	>bbef		00				                .byte %00000000

7780							                ; CHR$126 - ~
7781	>bbf0		31				                .byte %00110001
7782	>bbf1		6b				                .byte %01101011
7783	>bbf2		46				                .byte %01000110
7784	>bbf3		00				                .byte %00000000
7785	>bbf4		00				                .byte %00000000
7786	>bbf5		00				                .byte %00000000
7787	>bbf6		00				                .byte %00000000
7788	>bbf7		00				                .byte %00000000

7790							                ; CHR$127
7791	.bbf8						chr127:
7792	>bbf8		ff				                .byte %11111111
7793	>bbf9		ff				                .byte %11111111
7794	>bbfa		ff				                .byte %11111111
7795	>bbfb		ff				                .byte %11111111
7796	>bbfc		ff				                .byte %11111111
7797	>bbfd		ff				                .byte %11111111
7798	>bbfe		ff				                .byte %11111111
7799	>bbff		ff				                .byte %11111111

7801							                ; CHR$128
7802							                .if version==350
7811							                .else
7812	>bc00		66				                .byte %01100110
7813	>bc01		00				                .byte %00000000
7814	>bc02		3c				                .byte %00111100
7815	>bc03		66				                .byte %01100110
7816	>bc04		7e				                .byte %01111110
7817	>bc05		66				                .byte %01100110
7818	>bc06		66				                .byte %01100110
7819	>bc07		00				                .byte %00000000
7820							                .endif

7822							                ; CHR$129
7823							                .if version==350
7832							                .else
7833	>bc08		3c				                .byte %00111100
7834	>bc09		66				                .byte %01100110
7835	>bc0a		3c				                .byte %00111100
7836	>bc0b		66				                .byte %01100110
7837	>bc0c		7e				                .byte %01111110
7838	>bc0d		66				                .byte %01100110
7839	>bc0e		66				                .byte %01100110
7840	>bc0f		00				                .byte %00000000
7841							                .endif

7843							                ; CHR$130
7844	>bc10		3f				                .byte %00111111
7845	>bc11		66				                .byte %01100110
7846	>bc12		66				                .byte %01100110
7847	>bc13		7f				                .byte %01111111
7848	>bc14		66				                .byte %01100110
7849	>bc15		66				                .byte %01100110
7850	>bc16		67				                .byte %01100111
7851	>bc17		00				                .byte %00000000

7853							                ; CHR$131
7854							                .if version==350
7863							                .else
7864	>bc18		3c				                .byte %00111100
7865	>bc19		66				                .byte %01100110
7866	>bc1a		60				                .byte %01100000
7867	>bc1b		60				                .byte %01100000
7868	>bc1c		60				                .byte %01100000
7869	>bc1d		66				                .byte %01100110
7870	>bc1e		3c				                .byte %00111100
7871	>bc1f		60				                .byte %01100000
7872							                .endif

7874							                ; CHR$132
7875	>bc20		0c				                .byte %00001100
7876	>bc21		18				                .byte %00011000
7877	>bc22		7e				                .byte %01111110
7878	>bc23		60				                .byte %01100000
7879	>bc24		7c				                .byte %01111100
7880	>bc25		60				                .byte %01100000
7881	>bc26		7e				                .byte %01111110
7882	>bc27		00				                .byte %00000000

7884							                ; CHR$133
7885							                .if version==350
7894							                .else
7895	>bc28		66				                .byte %01100110
7896	>bc29		3c				                .byte %00111100
7897	>bc2a		66				                .byte %01100110
7898	>bc2b		66				                .byte %01100110
7899	>bc2c		66				                .byte %01100110
7900	>bc2d		66				                .byte %01100110
7901	>bc2e		3c				                .byte %00111100
7902	>bc2f		00				                .byte %00000000
7903							                .endif

7905							                ; CHR$134
7906	>bc30		66				                .byte %01100110
7907	>bc31		00				                .byte %00000000
7908	>bc32		66				                .byte %01100110
7909	>bc33		66				                .byte %01100110
7910	>bc34		66				                .byte %01100110
7911	>bc35		66				                .byte %01100110
7912	>bc36		3c				                .byte %00111100
7913	>bc37		00				                .byte %00000000

7915							                ; CHR$135
7916							                .if version==350
7925							                .else
7926	>bc38		7e				                .byte %01111110
7927	>bc39		c3				                .byte %11000011
7928	>bc3a		9d				                .byte %10011101
7929	>bc3b		b1				                .byte %10110001
7930	>bc3c		9d				                .byte %10011101
7931	>bc3d		c3				                .byte %11000011
7932	>bc3e		7e				                .byte %01111110
7933	>bc3f		00				                .byte %00000000
7934							                .endif

7936							                ; CHR$136
7937	>bc40		00				                .byte %00000000
7938	>bc41		18				                .byte %00011000
7939	>bc42		38				                .byte %00111000
7940	>bc43		7f				                .byte %01111111
7941	>bc44		38				                .byte %00111000
7942	>bc45		18				                .byte %00011000
7943	>bc46		00				                .byte %00000000
7944	>bc47		00				                .byte %00000000

7946							                ; CHR$137
7947	>bc48		00				                .byte %00000000
7948	>bc49		18				                .byte %00011000
7949	>bc4a		1c				                .byte %00011100
7950	>bc4b		fe				                .byte %11111110
7951	>bc4c		1c				                .byte %00011100
7952	>bc4d		18				                .byte %00011000
7953	>bc4e		00				                .byte %00000000
7954	>bc4f		00				                .byte %00000000

7956							                ; CHR$138
7957	>bc50		18				                .byte %00011000
7958	>bc51		18				                .byte %00011000
7959	>bc52		18				                .byte %00011000
7960	>bc53		18				                .byte %00011000
7961	>bc54		7e				                .byte %01111110
7962	>bc55		3c				                .byte %00111100
7963	>bc56		18				                .byte %00011000
7964	>bc57		00				                .byte %00000000

7966							                ; CHR$139
7967	>bc58		00				                .byte %00000000
7968	>bc59		18				                .byte %00011000
7969	>bc5a		3c				                .byte %00111100
7970	>bc5b		7e				                .byte %01111110
7971	>bc5c		18				                .byte %00011000
7972	>bc5d		18				                .byte %00011000
7973	>bc5e		18				                .byte %00011000
7974	>bc5f		18				                .byte %00011000

7976							                ; CHR$140
7977	>bc60		30				                .byte %00110000
7978	>bc61		18				                .byte %00011000
7979	>bc62		3c				                .byte %00111100
7980	>bc63		06				                .byte %00000110
7981	>bc64		3e				                .byte %00111110
7982	>bc65		66				                .byte %01100110
7983	>bc66		3e				                .byte %00111110
7984	>bc67		00				                .byte %00000000

7986							                ; CHR$141
7987	>bc68		30				                .byte %00110000
7988	>bc69		18				                .byte %00011000
7989	>bc6a		3c				                .byte %00111100
7990	>bc6b		66				                .byte %01100110
7991	>bc6c		7e				                .byte %01111110
7992	>bc6d		60				                .byte %01100000
7993	>bc6e		3c				                .byte %00111100
7994	>bc6f		00				                .byte %00000000

7996							                ; CHR$142
7997	>bc70		66				                .byte %01100110
7998	>bc71		00				                .byte %00000000
7999	>bc72		3c				                .byte %00111100
8000	>bc73		66				                .byte %01100110
8001	>bc74		7e				                .byte %01111110
8002	>bc75		60				                .byte %01100000
8003	>bc76		3c				                .byte %00111100
8004	>bc77		00				                .byte %00000000

8006							                ; CHR$143
8007	>bc78		3c				                .byte %00111100
8008	>bc79		66				                .byte %01100110
8009	>bc7a		3c				                .byte %00111100
8010	>bc7b		66				                .byte %01100110
8011	>bc7c		7e				                .byte %01111110
8012	>bc7d		60				                .byte %01100000
8013	>bc7e		3c				                .byte %00111100
8014	>bc7f		00				                .byte %00000000

8016							                ; CHR$144
8017	>bc80		66				                .byte %01100110
8018	>bc81		00				                .byte %00000000
8019	>bc82		3c				                .byte %00111100
8020	>bc83		06				                .byte %00000110
8021	>bc84		3e				                .byte %00111110
8022	>bc85		66				                .byte %01100110
8023	>bc86		3e				                .byte %00111110
8024	>bc87		00				                .byte %00000000

8026							                ; CHR$145
8027	>bc88		3c				                .byte %00111100
8028	>bc89		66				                .byte %01100110
8029	>bc8a		3c				                .byte %00111100
8030	>bc8b		06				                .byte %00000110
8031	>bc8c		3e				                .byte %00111110
8032	>bc8d		66				                .byte %01100110
8033	>bc8e		3e				                .byte %00111110
8034	>bc8f		00				                .byte %00000000

8036							                ; CHR$146
8037	>bc90		00				                .byte %00000000
8038	>bc91		00				                .byte %00000000
8039	>bc92		3f				                .byte %00111111
8040	>bc93		0d				                .byte %00001101
8041	>bc94		3f				                .byte %00111111
8042	>bc95		6c				                .byte %01101100
8043	>bc96		3f				                .byte %00111111
8044	>bc97		00				                .byte %00000000

8046							                ; CHR$147
8047	>bc98		00				                .byte %00000000
8048	>bc99		00				                .byte %00000000
8049	>bc9a		3c				                .byte %00111100
8050	>bc9b		66				                .byte %01100110
8051	>bc9c		60				                .byte %01100000
8052	>bc9d		66				                .byte %01100110
8053	>bc9e		3c				                .byte %00111100
8054	>bc9f		60				                .byte %01100000

8056							                ; CHR$148
8057	>bca0		0c				                .byte %00001100
8058	>bca1		18				                .byte %00011000
8059	>bca2		3c				                .byte %00111100
8060	>bca3		66				                .byte %01100110
8061	>bca4		7e				                .byte %01111110
8062	>bca5		60				                .byte %01100000
8063	>bca6		3c				                .byte %00111100
8064	>bca7		00				                .byte %00000000

8066							                ; CHR$149
8067							                .if version==350
8076							                .else
8077	>bca8		66				                .byte %01100110
8078	>bca9		00				                .byte %00000000
8079	>bcaa		3c				                .byte %00111100
8080	>bcab		66				                .byte %01100110
8081	>bcac		66				                .byte %01100110
8082	>bcad		66				                .byte %01100110
8083	>bcae		3c				                .byte %00111100
8084	>bcaf		00				                .byte %00000000
8085							                .endif

8087							                ; CHR$150
8088							                .if version==350
8097							                .else
8098	>bcb0		66				                .byte %01100110
8099	>bcb1		00				                .byte %00000000
8100	>bcb2		66				                .byte %01100110
8101	>bcb3		66				                .byte %01100110
8102	>bcb4		66				                .byte %01100110
8103	>bcb5		66				                .byte %01100110
8104	>bcb6		3e				                .byte %00111110
8105	>bcb7		00				                .byte %00000000
8106							                .endif

8108							                ; CHR$151
8109	>bcb8		30				                .byte %00110000
8110	>bcb9		18				                .byte %00011000
8111	>bcba		00				                .byte %00000000
8112	>bcbb		38				                .byte %00111000
8113	>bcbc		18				                .byte %00011000
8114	>bcbd		18				                .byte %00011000
8115	>bcbe		3c				                .byte %00111100
8116	>bcbf		00				                .byte %00000000

8118							                ; CHR$152
8119	>bcc0		3c				                .byte %00111100
8120	>bcc1		66				                .byte %01100110
8121	>bcc2		00				                .byte %00000000
8122	>bcc3		38				                .byte %00111000
8123	>bcc4		18				                .byte %00011000
8124	>bcc5		18				                .byte %00011000
8125	>bcc6		3c				                .byte %00111100
8126	>bcc7		00				                .byte %00000000

8128							                ; CHR$153
8129	>bcc8		30				                .byte %00110000
8130	>bcc9		18				                .byte %00011000
8131	>bcca		00				                .byte %00000000
8132	>bccb		3c				                .byte %00111100
8133	>bccc		66				                .byte %01100110
8134	>bccd		66				                .byte %01100110
8135	>bcce		3c				                .byte %00111100
8136	>bccf		00				                .byte %00000000

8138							                ; CHR$154
8139	>bcd0		3c				                .byte %00111100
8140	>bcd1		66				                .byte %01100110
8141	>bcd2		00				                .byte %00000000
8142	>bcd3		3c				                .byte %00111100
8143	>bcd4		66				                .byte %01100110
8144	>bcd5		66				                .byte %01100110
8145	>bcd6		3c				                .byte %00111100
8146	>bcd7		00				                .byte %00000000

8148							                ; CHR$155
8149	>bcd8		30				                .byte %00110000
8150	>bcd9		18				                .byte %00011000
8151	>bcda		00				                .byte %00000000
8152	>bcdb		66				                .byte %01100110
8153	>bcdc		66				                .byte %01100110
8154	>bcdd		66				                .byte %01100110
8155	>bcde		3e				                .byte %00111110
8156	>bcdf		00				                .byte %00000000

8158							                ; CHR$156
8159	>bce0		3c				                .byte %00111100
8160	>bce1		66				                .byte %01100110
8161	>bce2		00				                .byte %00000000
8162	>bce3		66				                .byte %01100110
8163	>bce4		66				                .byte %01100110
8164	>bce5		66				                .byte %01100110
8165	>bce6		3e				                .byte %00111110
8166	>bce7		00				                .byte %00000000

8168							                ; CHR$157
8169	>bce8		66				                .byte %01100110
8170	>bce9		00				                .byte %00000000
8171	>bcea		66				                .byte %01100110
8172	>bceb		66				                .byte %01100110
8173	>bcec		66				                .byte %01100110
8174	>bced		3e				                .byte %00111110
8175	>bcee		06				                .byte %00000110
8176	>bcef		3c				                .byte %00111100

8178							                ; CHR$158
8179	>bcf0		00				                .byte %00000000
8180	>bcf1		66				                .byte %01100110
8181	>bcf2		3c				                .byte %00111100
8182	>bcf3		66				                .byte %01100110
8183	>bcf4		66				                .byte %01100110
8184	>bcf5		3c				                .byte %00111100
8185	>bcf6		66				                .byte %01100110
8186	>bcf7		00				                .byte %00000000

8188							                ; CHR$159
8189	>bcf8		3c				                .byte %00111100
8190	>bcf9		60				                .byte %01100000
8191	>bcfa		3c				                .byte %00111100
8192	>bcfb		66				                .byte %01100110
8193	>bcfc		3c				                .byte %00111100
8194	>bcfd		06				                .byte %00000110
8195	>bcfe		3c				                .byte %00111100
8196	>bcff		00				                .byte %00000000

8198							                ; CHR$160
8199	>bd00		3c				                .byte %00111100
8200	>bd01		66				                .byte %01100110
8201	>bd02		3c				                .byte %00111100
8202	>bd03		00				                .byte %00000000
8203	>bd04		00				                .byte %00000000
8204	>bd05		00				                .byte %00000000
8205	>bd06		00				                .byte %00000000
8206	>bd07		00				                .byte %00000000

8208							                ; CHR$161
8209	>bd08		00				                .byte %00000000
8210	>bd09		00				                .byte %00000000
8211	>bd0a		00				                .byte %00000000
8212	>bd0b		18				                .byte %00011000
8213	>bd0c		18				                .byte %00011000
8214	>bd0d		18				                .byte %00011000
8215	>bd0e		18				                .byte %00011000
8216	>bd0f		18				                .byte %00011000

8218							                ; CHR$162
8219	>bd10		00				                .byte %00000000
8220	>bd11		00				                .byte %00000000
8221	>bd12		00				                .byte %00000000
8222	>bd13		1f				                .byte %00011111
8223	>bd14		00				                .byte %00000000
8224	>bd15		00				                .byte %00000000
8225	>bd16		00				                .byte %00000000
8226	>bd17		00				                .byte %00000000

8228							                ; CHR$163
8229	>bd18		00				                .byte %00000000
8230	>bd19		00				                .byte %00000000
8231	>bd1a		00				                .byte %00000000
8232	>bd1b		1f				                .byte %00011111
8233	>bd1c		18				                .byte %00011000
8234	>bd1d		18				                .byte %00011000
8235	>bd1e		18				                .byte %00011000
8236	>bd1f		18				                .byte %00011000

8238							                ; CHR$164
8239	>bd20		00				                .byte %00000000
8240	>bd21		00				                .byte %00000000
8241	>bd22		00				                .byte %00000000
8242	>bd23		f8				                .byte %11111000
8243	>bd24		00				                .byte %00000000
8244	>bd25		00				                .byte %00000000
8245	>bd26		00				                .byte %00000000
8246	>bd27		00				                .byte %00000000

8248							                ; CHR$165
8249	>bd28		00				                .byte %00000000
8250	>bd29		00				                .byte %00000000
8251	>bd2a		00				                .byte %00000000
8252	>bd2b		f8				                .byte %11111000
8253	>bd2c		18				                .byte %00011000
8254	>bd2d		18				                .byte %00011000
8255	>bd2e		18				                .byte %00011000
8256	>bd2f		18				                .byte %00011000

8258							                ; CHR$166
8259	>bd30		00				                .byte %00000000
8260	>bd31		00				                .byte %00000000
8261	>bd32		00				                .byte %00000000
8262	>bd33		ff				                .byte %11111111
8263	>bd34		00				                .byte %00000000
8264	>bd35		00				                .byte %00000000
8265	>bd36		00				                .byte %00000000
8266	>bd37		00				                .byte %00000000

8268							                ; CHR$167
8269	>bd38		00				                .byte %00000000
8270	>bd39		00				                .byte %00000000
8271	>bd3a		00				                .byte %00000000
8272	>bd3b		ff				                .byte %11111111
8273	>bd3c		18				                .byte %00011000
8274	>bd3d		18				                .byte %00011000
8275	>bd3e		18				                .byte %00011000
8276	>bd3f		18				                .byte %00011000

8278							                ; CHR$168
8279	>bd40		18				                .byte %00011000
8280	>bd41		18				                .byte %00011000
8281	>bd42		18				                .byte %00011000
8282	>bd43		18				                .byte %00011000
8283	>bd44		00				                .byte %00000000
8284	>bd45		00				                .byte %00000000
8285	>bd46		00				                .byte %00000000
8286	>bd47		00				                .byte %00000000

8288							                ; CHR$169
8289	>bd48		18				                .byte %00011000
8290	>bd49		18				                .byte %00011000
8291	>bd4a		18				                .byte %00011000
8292	>bd4b		18				                .byte %00011000
8293	>bd4c		18				                .byte %00011000
8294	>bd4d		18				                .byte %00011000
8295	>bd4e		18				                .byte %00011000
8296	>bd4f		18				                .byte %00011000

8298							                ; CHR$170
8299	>bd50		18				                .byte %00011000
8300	>bd51		18				                .byte %00011000
8301	>bd52		18				                .byte %00011000
8302	>bd53		1f				                .byte %00011111
8303	>bd54		00				                .byte %00000000
8304	>bd55		00				                .byte %00000000
8305	>bd56		00				                .byte %00000000
8306	>bd57		00				                .byte %00000000

8308							                ; CHR$171
8309	>bd58		18				                .byte %00011000
8310	>bd59		18				                .byte %00011000
8311	>bd5a		18				                .byte %00011000
8312	>bd5b		1f				                .byte %00011111
8313	>bd5c		18				                .byte %00011000
8314	>bd5d		18				                .byte %00011000
8315	>bd5e		18				                .byte %00011000
8316	>bd5f		18				                .byte %00011000

8318							                ; CHR$172
8319	>bd60		18				                .byte %00011000
8320	>bd61		18				                .byte %00011000
8321	>bd62		18				                .byte %00011000
8322	>bd63		f8				                .byte %11111000
8323	>bd64		00				                .byte %00000000
8324	>bd65		00				                .byte %00000000
8325	>bd66		00				                .byte %00000000
8326	>bd67		00				                .byte %00000000

8328							                ; CHR$173
8329	>bd68		18				                .byte %00011000
8330	>bd69		18				                .byte %00011000
8331	>bd6a		18				                .byte %00011000
8332	>bd6b		f8				                .byte %11111000
8333	>bd6c		18				                .byte %00011000
8334	>bd6d		18				                .byte %00011000
8335	>bd6e		18				                .byte %00011000
8336	>bd6f		18				                .byte %00011000

8338							                ; CHR$174
8339	>bd70		18				                .byte %00011000
8340	>bd71		18				                .byte %00011000
8341	>bd72		18				                .byte %00011000
8342	>bd73		ff				                .byte %11111111
8343	>bd74		00				                .byte %00000000
8344	>bd75		00				                .byte %00000000
8345	>bd76		00				                .byte %00000000
8346	>bd77		00				                .byte %00000000

8348							                ; CHR$175
8349	>bd78		18				                .byte %00011000
8350	>bd79		18				                .byte %00011000
8351	>bd7a		18				                .byte %00011000
8352	>bd7b		ff				                .byte %11111111
8353	>bd7c		18				                .byte %00011000
8354	>bd7d		18				                .byte %00011000
8355	>bd7e		18				                .byte %00011000
8356	>bd7f		18				                .byte %00011000

8358							                ; CHR$176
8359	>bd80		00				                .byte %00000000
8360	>bd81		00				                .byte %00000000
8361	>bd82		00				                .byte %00000000
8362	>bd83		07				                .byte %00000111
8363	>bd84		0c				                .byte %00001100
8364	>bd85		18				                .byte %00011000
8365	>bd86		18				                .byte %00011000
8366	>bd87		18				                .byte %00011000

8368							                ; CHR$177
8369	>bd88		00				                .byte %00000000
8370	>bd89		00				                .byte %00000000
8371	>bd8a		00				                .byte %00000000
8372	>bd8b		e0				                .byte %11100000
8373	>bd8c		30				                .byte %00110000
8374	>bd8d		18				                .byte %00011000
8375	>bd8e		18				                .byte %00011000
8376	>bd8f		18				                .byte %00011000

8378							                ; CHR$178
8379	>bd90		18				                .byte %00011000
8380	>bd91		18				                .byte %00011000
8381	>bd92		0c				                .byte %00001100
8382	>bd93		07				                .byte %00000111
8383	>bd94		00				                .byte %00000000
8384	>bd95		00				                .byte %00000000
8385	>bd96		00				                .byte %00000000
8386	>bd97		00				                .byte %00000000

8388							                ; CHR$179
8389	>bd98		18				                .byte %00011000
8390	>bd99		18				                .byte %00011000
8391	>bd9a		30				                .byte %00110000
8392	>bd9b		e0				                .byte %11100000
8393	>bd9c		00				                .byte %00000000
8394	>bd9d		00				                .byte %00000000
8395	>bd9e		00				                .byte %00000000
8396	>bd9f		00				                .byte %00000000

8398							                ; CHR$180
8399	>bda0		18				                .byte %00011000
8400	>bda1		00				                .byte %00000000
8401	>bda2		18				                .byte %00011000
8402	>bda3		18				                .byte %00011000
8403	>bda4		30				                .byte %00110000
8404	>bda5		66				                .byte %01100110
8405	>bda6		3c				                .byte %00111100
8406	>bda7		00				                .byte %00000000

8408							                ; CHR$181
8409	>bda8		18				                .byte %00011000
8410	>bda9		00				                .byte %00000000
8411	>bdaa		18				                .byte %00011000
8412	>bdab		18				                .byte %00011000
8413	>bdac		18				                .byte %00011000
8414	>bdad		18				                .byte %00011000
8415	>bdae		18				                .byte %00011000
8416	>bdaf		00				                .byte %00000000

8418							                ; CHR$182
8419	>bdb0		36				                .byte %00110110
8420	>bdb1		6c				                .byte %01101100
8421	>bdb2		00				                .byte %00000000
8422	>bdb3		66				                .byte %01100110
8423	>bdb4		76				                .byte %01110110
8424	>bdb5		6e				                .byte %01101110
8425	>bdb6		66				                .byte %01100110
8426	>bdb7		00				                .byte %00000000

8428							                ; CHR$183
8429	>bdb8		36				                .byte %00110110
8430	>bdb9		6c				                .byte %01101100
8431	>bdba		00				                .byte %00000000
8432	>bdbb		7c				                .byte %01111100
8433	>bdbc		66				                .byte %01100110
8434	>bdbd		66				                .byte %01100110
8435	>bdbe		66				                .byte %01100110
8436	>bdbf		00				                .byte %00000000

8438							                ; CHR$184
8439	>bdc0		18				                .byte %00011000
8440	>bdc1		7e				                .byte %01111110
8441	>bdc2		18				                .byte %00011000
8442	>bdc3		18				                .byte %00011000
8443	>bdc4		18				                .byte %00011000
8444	>bdc5		18				                .byte %00011000
8445	>bdc6		18				                .byte %00011000
8446	>bdc7		00				                .byte %00000000

8448							                ; CHR$185
8449	>bdc8		18				                .byte %00011000
8450	>bdc9		7e				                .byte %01111110
8451	>bdca		18				                .byte %00011000
8452	>bdcb		18				                .byte %00011000
8453	>bdcc		18				                .byte %00011000
8454	>bdcd		7e				                .byte %01111110
8455	>bdce		18				                .byte %00011000
8456	>bdcf		00				                .byte %00000000

8458							                ; CHR$186
8459							                .if version==350
8468							                .else
8469	>bdd0		18				                .byte %00011000
8470	>bdd1		18				                .byte %00011000
8471	>bdd2		18				                .byte %00011000
8472	>bdd3		00				                .byte %00000000
8473	>bdd4		00				                .byte %00000000
8474	>bdd5		00				                .byte %00000000
8475	>bdd6		00				                .byte %00000000
8476	>bdd7		00				                .byte %00000000
8477							                .endif

8479							                ; CHR$187
8480							                .if version==350
8489							                .else
8490	>bdd8		30				                .byte %00110000
8491	>bdd9		18				                .byte %00011000
8492	>bdda		0c				                .byte %00001100
8493	>bddb		00				                .byte %00000000
8494	>bddc		00				                .byte %00000000
8495	>bddd		00				                .byte %00000000
8496	>bdde		00				                .byte %00000000
8497	>bddf		00				                .byte %00000000
8498							                .endif

8500							                ; CHR$188
8501							                .if version==350
8510							                .else
8511	>bde0		3f				                .byte %00111111
8512	>bde1		7b				                .byte %01111011
8513	>bde2		7b				                .byte %01111011
8514	>bde3		3b				                .byte %00111011
8515	>bde4		1b				                .byte %00011011
8516	>bde5		1b				                .byte %00011011
8517	>bde6		1f				                .byte %00011111
8518	>bde7		00				                .byte %00000000
8519							                .endif

8521							                ; CHR$189
8522	>bde8		00				                .byte %00000000
8523	>bde9		00				                .byte %00000000
8524	>bdea		00				                .byte %00000000
8525	>bdeb		18				                .byte %00011000
8526	>bdec		18				                .byte %00011000
8527	>bded		00				                .byte %00000000
8528	>bdee		00				                .byte %00000000
8529	>bdef		00				                .byte %00000000

8531							                ; CHR$190
8532	>bdf0		03				                .byte %00000011
8533	>bdf1		03				                .byte %00000011
8534	>bdf2		06				                .byte %00000110
8535	>bdf3		06				                .byte %00000110
8536	>bdf4		76				                .byte %01110110
8537	>bdf5		1c				                .byte %00011100
8538	>bdf6		0c				                .byte %00001100
8539	>bdf7		00				                .byte %00000000

8541							                ; CHR$191
8542	>bdf8		aa				                .byte %10101010
8543	>bdf9		55				                .byte %01010101
8544	>bdfa		aa				                .byte %10101010
8545	>bdfb		55				                .byte %01010101
8546	>bdfc		aa				                .byte %10101010
8547	>bdfd		55				                .byte %01010101
8548	>bdfe		aa				                .byte %10101010
8549	>bdff		55				                .byte %01010101

8551							                ; CHR$192
8552	>be00		3e				                .byte %00111110
8553	>be01		63				                .byte %01100011
8554	>be02		67				                .byte %01100111
8555	>be03		6b				                .byte %01101011
8556	>be04		73				                .byte %01110011
8557	>be05		63				                .byte %01100011
8558	>be06		3e				                .byte %00111110
8559	>be07		00				                .byte %00000000

8561							                ; CHR$193
8562	>be08		1c				                .byte %00011100
8563	>be09		36				                .byte %00110110
8564	>be0a		63				                .byte %01100011
8565	>be0b		63				                .byte %01100011
8566	>be0c		7f				                .byte %01111111
8567	>be0d		63				                .byte %01100011
8568	>be0e		63				                .byte %01100011
8569	>be0f		00				                .byte %00000000

8571							                ; CHR$194
8572	>be10		7e				                .byte %01111110
8573	>be11		33				                .byte %00110011
8574	>be12		33				                .byte %00110011
8575	>be13		3e				                .byte %00111110
8576	>be14		33				                .byte %00110011
8577	>be15		33				                .byte %00110011
8578	>be16		7e				                .byte %01111110
8579	>be17		00				                .byte %00000000

8581							                ; CHR$195
8582	>be18		7f				                .byte %01111111
8583	>be19		63				                .byte %01100011
8584	>be1a		60				                .byte %01100000
8585	>be1b		60				                .byte %01100000
8586	>be1c		60				                .byte %01100000
8587	>be1d		60				                .byte %01100000
8588	>be1e		60				                .byte %01100000
8589	>be1f		00				                .byte %00000000

8591							                ; CHR$196
8592	>be20		1c				                .byte %00011100
8593	>be21		1c				                .byte %00011100
8594	>be22		36				                .byte %00110110
8595	>be23		36				                .byte %00110110
8596	>be24		63				                .byte %01100011
8597	>be25		63				                .byte %01100011
8598	>be26		7f				                .byte %01111111
8599	>be27		00				                .byte %00000000

8601							                ; CHR$197
8602	>be28		7f				                .byte %01111111
8603	>be29		33				                .byte %00110011
8604	>be2a		30				                .byte %00110000
8605	>be2b		3e				                .byte %00111110
8606	>be2c		30				                .byte %00110000
8607	>be2d		33				                .byte %00110011
8608	>be2e		7f				                .byte %01111111
8609	>be2f		00				                .byte %00000000

8611							                ; CHR$198
8612	>be30		7e				                .byte %01111110
8613	>be31		66				                .byte %01100110
8614	>be32		0c				                .byte %00001100
8615	>be33		18				                .byte %00011000
8616	>be34		30				                .byte %00110000
8617	>be35		66				                .byte %01100110
8618	>be36		7e				                .byte %01111110
8619	>be37		00				                .byte %00000000

8621							                ; CHR$199
8622	>be38		77				                .byte %01110111
8623	>be39		33				                .byte %00110011
8624	>be3a		33				                .byte %00110011
8625	>be3b		3f				                .byte %00111111
8626	>be3c		33				                .byte %00110011
8627	>be3d		33				                .byte %00110011
8628	>be3e		77				                .byte %01110111
8629	>be3f		00				                .byte %00000000

8631							                ; CHR$200
8632	>be40		3e				                .byte %00111110
8633	>be41		63				                .byte %01100011
8634	>be42		63				                .byte %01100011
8635	>be43		7f				                .byte %01111111
8636	>be44		63				                .byte %01100011
8637	>be45		63				                .byte %01100011
8638	>be46		3e				                .byte %00111110
8639	>be47		00				                .byte %00000000

8641							                ; CHR$201
8642	>be48		3c				                .byte %00111100
8643	>be49		18				                .byte %00011000
8644	>be4a		18				                .byte %00011000
8645	>be4b		18				                .byte %00011000
8646	>be4c		18				                .byte %00011000
8647	>be4d		18				                .byte %00011000
8648	>be4e		3c				                .byte %00111100
8649	>be4f		00				                .byte %00000000

8651							                ; CHR$202
8652	>be50		63				                .byte %01100011
8653	>be51		66				                .byte %01100110
8654	>be52		6c				                .byte %01101100
8655	>be53		78				                .byte %01111000
8656	>be54		6c				                .byte %01101100
8657	>be55		66				                .byte %01100110
8658	>be56		63				                .byte %01100011
8659	>be57		00				                .byte %00000000

8661							                ; CHR$203
8662	>be58		1c				                .byte %00011100
8663	>be59		1c				                .byte %00011100
8664	>be5a		36				                .byte %00110110
8665	>be5b		36				                .byte %00110110
8666	>be5c		63				                .byte %01100011
8667	>be5d		63				                .byte %01100011
8668	>be5e		63				                .byte %01100011
8669	>be5f		00				                .byte %00000000

8671							                ; CHR$204
8672	>be60		63				                .byte %01100011
8673	>be61		77				                .byte %01110111
8674	>be62		7f				                .byte %01111111
8675	>be63		6b				                .byte %01101011
8676	>be64		63				                .byte %01100011
8677	>be65		63				                .byte %01100011
8678	>be66		63				                .byte %01100011
8679	>be67		00				                .byte %00000000

8681							                ; CHR$205
8682	>be68		63				                .byte %01100011
8683	>be69		73				                .byte %01110011
8684	>be6a		7b				                .byte %01111011
8685	>be6b		6f				                .byte %01101111
8686	>be6c		67				                .byte %01100111
8687	>be6d		63				                .byte %01100011
8688	>be6e		63				                .byte %01100011
8689	>be6f		00				                .byte %00000000

8691							                ; CHR$206
8692	>be70		7e				                .byte %01111110
8693	>be71		00				                .byte %00000000
8694	>be72		00				                .byte %00000000
8695	>be73		3c				                .byte %00111100
8696	>be74		00				                .byte %00000000
8697	>be75		00				                .byte %00000000
8698	>be76		7e				                .byte %01111110
8699	>be77		00				                .byte %00000000

8701							                ; CHR$207
8702	>be78		3e				                .byte %00111110
8703	>be79		63				                .byte %01100011
8704	>be7a		63				                .byte %01100011
8705	>be7b		63				                .byte %01100011
8706	>be7c		63				                .byte %01100011
8707	>be7d		63				                .byte %01100011
8708	>be7e		3e				                .byte %00111110
8709	>be7f		00				                .byte %00000000

8711							                ; CHR$208
8712	>be80		7f				                .byte %01111111
8713	>be81		36				                .byte %00110110
8714	>be82		36				                .byte %00110110
8715	>be83		36				                .byte %00110110
8716	>be84		36				                .byte %00110110
8717	>be85		36				                .byte %00110110
8718	>be86		36				                .byte %00110110
8719	>be87		00				                .byte %00000000

8721							                ; CHR$209
8722	>be88		7e				                .byte %01111110
8723	>be89		33				                .byte %00110011
8724	>be8a		33				                .byte %00110011
8725	>be8b		3e				                .byte %00111110
8726	>be8c		30				                .byte %00110000
8727	>be8d		30				                .byte %00110000
8728	>be8e		78				                .byte %01111000
8729	>be8f		00				                .byte %00000000

8731							                ; CHR$210
8732	>be90		7f				                .byte %01111111
8733	>be91		63				                .byte %01100011
8734	>be92		30				                .byte %00110000
8735	>be93		18				                .byte %00011000
8736	>be94		30				                .byte %00110000
8737	>be95		63				                .byte %01100011
8738	>be96		7f				                .byte %01111111
8739	>be97		00				                .byte %00000000

8741							                ; CHR$211
8742	>be98		7e				                .byte %01111110
8743	>be99		5a				                .byte %01011010
8744	>be9a		18				                .byte %00011000
8745	>be9b		18				                .byte %00011000
8746	>be9c		18				                .byte %00011000
8747	>be9d		18				                .byte %00011000
8748	>be9e		18				                .byte %00011000
8749	>be9f		00				                .byte %00000000

8751							                ; CHR$212
8752	>bea0		66				                .byte %01100110
8753	>bea1		66				                .byte %01100110
8754	>bea2		66				                .byte %01100110
8755	>bea3		3c				                .byte %00111100
8756	>bea4		18				                .byte %00011000
8757	>bea5		18				                .byte %00011000
8758	>bea6		3c				                .byte %00111100
8759	>bea7		00				                .byte %00000000

8761							                ; CHR$213
8762	>bea8		3e				                .byte %00111110
8763	>bea9		08				                .byte %00001000
8764	>beaa		3e				                .byte %00111110
8765	>beab		6b				                .byte %01101011
8766	>beac		3e				                .byte %00111110
8767	>bead		08				                .byte %00001000
8768	>beae		3e				                .byte %00111110
8769	>beaf		00				                .byte %00000000

8771							                ; CHR$214
8772	>beb0		63				                .byte %01100011
8773	>beb1		63				                .byte %01100011
8774	>beb2		36				                .byte %00110110
8775	>beb3		1c				                .byte %00011100
8776	>beb4		36				                .byte %00110110
8777	>beb5		63				                .byte %01100011
8778	>beb6		63				                .byte %01100011
8779	>beb7		00				                .byte %00000000

8781							                ; CHR$215
8782	>beb8		3e				                .byte %00111110
8783	>beb9		08				                .byte %00001000
8784	>beba		6b				                .byte %01101011
8785	>bebb		6b				                .byte %01101011
8786	>bebc		3e				                .byte %00111110
8787	>bebd		08				                .byte %00001000
8788	>bebe		3e				                .byte %00111110
8789	>bebf		00				                .byte %00000000

8791							                ; CHR$216
8792	>bec0		3e				                .byte %00111110
8793	>bec1		63				                .byte %01100011
8794	>bec2		63				                .byte %01100011
8795	>bec3		63				                .byte %01100011
8796	>bec4		36				                .byte %00110110
8797	>bec5		36				                .byte %00110110
8798	>bec6		63				                .byte %01100011
8799	>bec7		00				                .byte %00000000

8801							                ; CHR$217
8802	>bec8		7f				                .byte %01111111
8803	>bec9		63				                .byte %01100011
8804	>beca		63				                .byte %01100011
8805	>becb		36				                .byte %00110110
8806	>becc		36				                .byte %00110110
8807	>becd		1c				                .byte %00011100
8808	>bece		1c				                .byte %00011100
8809	>becf		00				                .byte %00000000

8811							                ; CHR$218
8812	>bed0		18				                .byte %00011000
8813	>bed1		18				                .byte %00011000
8814	>bed2		7e				                .byte %01111110
8815	>bed3		18				                .byte %00011000
8816	>bed4		18				                .byte %00011000
8817	>bed5		00				                .byte %00000000
8818	>bed6		7e				                .byte %01111110
8819	>bed7		00				                .byte %00000000

8821							                ; CHR$219
8822	>bed8		00				                .byte %00000000
8823	>bed9		7e				                .byte %01111110
8824	>beda		00				                .byte %00000000
8825	>bedb		18				                .byte %00011000
8826	>bedc		18				                .byte %00011000
8827	>bedd		7e				                .byte %01111110
8828	>bede		18				                .byte %00011000
8829	>bedf		18				                .byte %00011000

8831							                ; CHR$220
8832	>bee0		18				                .byte %00011000
8833	>bee1		18				                .byte %00011000
8834	>bee2		18				                .byte %00011000
8835	>bee3		18				                .byte %00011000
8836	>bee4		18				                .byte %00011000
8837	>bee5		18				                .byte %00011000
8838	>bee6		18				                .byte %00011000
8839	>bee7		00				                .byte %00000000

8841							                ; CHR$221
8842	>bee8		36				                .byte %00110110
8843	>bee9		36				                .byte %00110110
8844	>beea		36				                .byte %00110110
8845	>beeb		36				                .byte %00110110
8846	>beec		36				                .byte %00110110
8847	>beed		36				                .byte %00110110
8848	>beee		36				                .byte %00110110
8849	>beef		00				                .byte %00000000

8851							                ; CHR$222
8852	>bef0		00				                .byte %00000000
8853	>bef1		66				                .byte %01100110
8854	>bef2		66				                .byte %01100110
8855	>bef3		66				                .byte %01100110
8856	>bef4		66				                .byte %01100110
8857	>bef5		66				                .byte %01100110
8858	>bef6		3c				                .byte %00111100
8859	>bef7		00				                .byte %00000000

8861							                ; CHR$223
8862	>bef8		00				                .byte %00000000
8863	>bef9		3c				                .byte %00111100
8864	>befa		66				                .byte %01100110
8865	>befb		66				                .byte %01100110
8866	>befc		66				                .byte %01100110
8867	>befd		66				                .byte %01100110
8868	>befe		66				                .byte %01100110
8869	>beff		00				                .byte %00000000

8871							                ; CHR$224
8872							                .if version==350
8881							                .else
8882	>bf00		00				                .byte %00000000
8883	>bf01		03				                .byte %00000011
8884	>bf02		3e				                .byte %00111110
8885	>bf03		67				                .byte %01100111
8886	>bf04		6b				                .byte %01101011
8887	>bf05		73				                .byte %01110011
8888	>bf06		3e				                .byte %00111110
8889	>bf07		60				                .byte %01100000
8890							                .endif

8892							                ; CHR$225
8893	>bf08		00				                .byte %00000000
8894	>bf09		00				                .byte %00000000
8895	>bf0a		3b				                .byte %00111011
8896	>bf0b		6e				                .byte %01101110
8897	>bf0c		66				                .byte %01100110
8898	>bf0d		6e				                .byte %01101110
8899	>bf0e		3b				                .byte %00111011
8900	>bf0f		00				                .byte %00000000

8902							                ; CHR$226
8903	>bf10		1e				                .byte %00011110
8904	>bf11		33				                .byte %00110011
8905	>bf12		33				                .byte %00110011
8906	>bf13		3e				                .byte %00111110
8907	>bf14		33				                .byte %00110011
8908	>bf15		33				                .byte %00110011
8909	>bf16		3e				                .byte %00111110
8910	>bf17		60				                .byte %01100000

8912							                ; CHR$227
8913	>bf18		00				                .byte %00000000
8914	>bf19		00				                .byte %00000000
8915	>bf1a		66				                .byte %01100110
8916	>bf1b		36				                .byte %00110110
8917	>bf1c		1c				                .byte %00011100
8918	>bf1d		18				                .byte %00011000
8919	>bf1e		30				                .byte %00110000
8920	>bf1f		30				                .byte %00110000

8922							                ; CHR$228
8923	>bf20		3c				                .byte %00111100
8924	>bf21		60				                .byte %01100000
8925	>bf22		30				                .byte %00110000
8926	>bf23		3c				                .byte %00111100
8927	>bf24		66				                .byte %01100110
8928	>bf25		66				                .byte %01100110
8929	>bf26		3c				                .byte %00111100
8930	>bf27		00				                .byte %00000000

8932							                ; CHR$229
8933	>bf28		00				                .byte %00000000
8934	>bf29		00				                .byte %00000000
8935	>bf2a		1e				                .byte %00011110
8936	>bf2b		30				                .byte %00110000
8937	>bf2c		1c				                .byte %00011100
8938	>bf2d		30				                .byte %00110000
8939	>bf2e		1e				                .byte %00011110
8940	>bf2f		00				                .byte %00000000

8942							                ; CHR$230
8943	>bf30		3e				                .byte %00111110
8944	>bf31		0c				                .byte %00001100
8945	>bf32		18				                .byte %00011000
8946	>bf33		30				                .byte %00110000
8947	>bf34		60				                .byte %01100000
8948	>bf35		60				                .byte %01100000
8949	>bf36		3e				                .byte %00111110
8950	>bf37		06				                .byte %00000110

8952							                ; CHR$231
8953	>bf38		00				                .byte %00000000
8954	>bf39		00				                .byte %00000000
8955	>bf3a		7c				                .byte %01111100
8956	>bf3b		66				                .byte %01100110
8957	>bf3c		66				                .byte %01100110
8958	>bf3d		66				                .byte %01100110
8959	>bf3e		06				                .byte %00000110
8960	>bf3f		06				                .byte %00000110

8962							                ; CHR$232
8963	>bf40		3c				                .byte %00111100
8964	>bf41		66				                .byte %01100110
8965	>bf42		66				                .byte %01100110
8966	>bf43		7e				                .byte %01111110
8967	>bf44		66				                .byte %01100110
8968	>bf45		66				                .byte %01100110
8969	>bf46		3c				                .byte %00111100
8970	>bf47		00				                .byte %00000000

8972							                ; CHR$233
8973	>bf48		00				                .byte %00000000
8974	>bf49		00				                .byte %00000000
8975	>bf4a		18				                .byte %00011000
8976	>bf4b		18				                .byte %00011000
8977	>bf4c		18				                .byte %00011000
8978	>bf4d		18				                .byte %00011000
8979	>bf4e		0c				                .byte %00001100
8980	>bf4f		00				                .byte %00000000

8982							                ; CHR$234
8983	>bf50		00				                .byte %00000000
8984	>bf51		00				                .byte %00000000
8985	>bf52		66				                .byte %01100110
8986	>bf53		6c				                .byte %01101100
8987	>bf54		78				                .byte %01111000
8988	>bf55		6c				                .byte %01101100
8989	>bf56		66				                .byte %01100110
8990	>bf57		00				                .byte %00000000

8992							                ; CHR$235
8993	>bf58		60				                .byte %01100000
8994	>bf59		30				                .byte %00110000
8995	>bf5a		18				                .byte %00011000
8996	>bf5b		1c				                .byte %00011100
8997	>bf5c		36				                .byte %00110110
8998	>bf5d		63				                .byte %01100011
8999	>bf5e		63				                .byte %01100011
9000	>bf5f		00				                .byte %00000000

9002							                ; CHR$236
9003	>bf60		00				                .byte %00000000
9004	>bf61		00				                .byte %00000000
9005	>bf62		33				                .byte %00110011
9006	>bf63		33				                .byte %00110011
9007	>bf64		33				                .byte %00110011
9008	>bf65		33				                .byte %00110011
9009	>bf66		3e				                .byte %00111110
9010	>bf67		60				                .byte %01100000

9012							                ; CHR$237
9013	>bf68		00				                .byte %00000000
9014	>bf69		00				                .byte %00000000
9015	>bf6a		63				                .byte %01100011
9016	>bf6b		33				                .byte %00110011
9017	>bf6c		1b				                .byte %00011011
9018	>bf6d		1e				                .byte %00011110
9019	>bf6e		1c				                .byte %00011100
9020	>bf6f		00				                .byte %00000000

9022							                ; CHR$238
9023							                .if version==350
9032							                .else
9033	>bf70		3c				                .byte %00111100
9034	>bf71		60				                .byte %01100000
9035	>bf72		60				                .byte %01100000
9036	>bf73		3c				                .byte %00111100
9037	>bf74		60				                .byte %01100000
9038	>bf75		60				                .byte %01100000
9039	>bf76		3e				                .byte %00111110
9040	>bf77		06				                .byte %00000110
9041							                .endif

9043							                ; CHR$239
9044	>bf78		00				                .byte %00000000
9045	>bf79		00				                .byte %00000000
9046	>bf7a		3e				                .byte %00111110
9047	>bf7b		63				                .byte %01100011
9048	>bf7c		63				                .byte %01100011
9049	>bf7d		63				                .byte %01100011
9050	>bf7e		3e				                .byte %00111110
9051	>bf7f		00				                .byte %00000000

9053							                ; CHR$240
9054	>bf80		00				                .byte %00000000
9055	>bf81		00				                .byte %00000000
9056	>bf82		7f				                .byte %01111111
9057	>bf83		36				                .byte %00110110
9058	>bf84		36				                .byte %00110110
9059	>bf85		36				                .byte %00110110
9060	>bf86		36				                .byte %00110110
9061	>bf87		00				                .byte %00000000

9063							                ; CHR$241
9064	>bf88		00				                .byte %00000000
9065	>bf89		00				                .byte %00000000
9066	>bf8a		3c				                .byte %00111100
9067	>bf8b		66				                .byte %01100110
9068	>bf8c		66				                .byte %01100110
9069	>bf8d		7c				                .byte %01111100
9070	>bf8e		60				                .byte %01100000
9071	>bf8f		60				                .byte %01100000

9073							                ; CHR$242
9074	>bf90		00				                .byte %00000000
9075	>bf91		00				                .byte %00000000
9076	>bf92		3f				                .byte %00111111
9077	>bf93		66				                .byte %01100110
9078	>bf94		66				                .byte %01100110
9079	>bf95		66				                .byte %01100110
9080	>bf96		3c				                .byte %00111100
9081	>bf97		00				                .byte %00000000

9083							                ; CHR$243
9084	>bf98		00				                .byte %00000000
9085	>bf99		00				                .byte %00000000
9086	>bf9a		7e				                .byte %01111110
9087	>bf9b		18				                .byte %00011000
9088	>bf9c		18				                .byte %00011000
9089	>bf9d		18				                .byte %00011000
9090	>bf9e		0c				                .byte %00001100
9091	>bf9f		00				                .byte %00000000

9093							                ; CHR$244
9094	>bfa0		00				                .byte %00000000
9095	>bfa1		00				                .byte %00000000
9096	>bfa2		73				                .byte %01110011
9097	>bfa3		33				                .byte %00110011
9098	>bfa4		33				                .byte %00110011
9099	>bfa5		33				                .byte %00110011
9100	>bfa6		1e				                .byte %00011110
9101	>bfa7		00				                .byte %00000000

9103							                ; CHR$245
9104	>bfa8		00				                .byte %00000000
9105	>bfa9		00				                .byte %00000000
9106	>bfaa		3e				                .byte %00111110
9107	>bfab		6b				                .byte %01101011
9108	>bfac		6b				                .byte %01101011
9109	>bfad		3e				                .byte %00111110
9110	>bfae		18				                .byte %00011000
9111	>bfaf		18				                .byte %00011000

9113							                ; CHR$246
9114	>bfb0		00				                .byte %00000000
9115	>bfb1		00				                .byte %00000000
9116	>bfb2		66				                .byte %01100110
9117	>bfb3		36				                .byte %00110110
9118	>bfb4		1c				                .byte %00011100
9119	>bfb5		1c				                .byte %00011100
9120	>bfb6		36				                .byte %00110110
9121	>bfb7		33				                .byte %00110011

9123							                ; CHR$247
9124	>bfb8		00				                .byte %00000000
9125	>bfb9		00				                .byte %00000000
9126	>bfba		63				                .byte %01100011
9127	>bfbb		6b				                .byte %01101011
9128	>bfbc		6b				                .byte %01101011
9129	>bfbd		3e				                .byte %00111110
9130	>bfbe		18				                .byte %00011000
9131	>bfbf		18				                .byte %00011000

9133							                ; CHR$248
9134							                .if version==350
9143							                .else
9144	>bfc0		00				                .byte %00000000
9145	>bfc1		00				                .byte %00000000
9146	>bfc2		36				                .byte %00110110
9147	>bfc3		63				                .byte %01100011
9148	>bfc4		6b				                .byte %01101011
9149	>bfc5		7f				                .byte %01111111
9150	>bfc6		36				                .byte %00110110
9151	>bfc7		00				                .byte %00000000
9152							                .endif

9154							                ; CHR$249
9155	>bfc8		38				                .byte %00111000
9156	>bfc9		0c				                .byte %00001100
9157	>bfca		06				                .byte %00000110
9158	>bfcb		3e				                .byte %00111110
9159	>bfcc		66				                .byte %01100110
9160	>bfcd		66				                .byte %01100110
9161	>bfce		3c				                .byte %00111100
9162	>bfcf		00				                .byte %00000000

9164							                ; CHR$250
9165	>bfd0		00				                .byte %00000000
9166	>bfd1		31				                .byte %00110001
9167	>bfd2		6b				                .byte %01101011
9168	>bfd3		46				                .byte %01000110
9169	>bfd4		00				                .byte %00000000
9170	>bfd5		7f				                .byte %01111111
9171	>bfd6		00				                .byte %00000000
9172	>bfd7		00				                .byte %00000000

9174							                ; CHR$251
9175	>bfd8		00				                .byte %00000000
9176	>bfd9		7e				                .byte %01111110
9177	>bfda		00				                .byte %00000000
9178	>bfdb		7e				                .byte %01111110
9179	>bfdc		00				                .byte %00000000
9180	>bfdd		7e				                .byte %01111110
9181	>bfde		00				                .byte %00000000
9182	>bfdf		00				                .byte %00000000

9184							                ; CHR$252
9185	>bfe0		07				                .byte %00000111
9186	>bfe1		1c				                .byte %00011100
9187	>bfe2		70				                .byte %01110000
9188	>bfe3		1c				                .byte %00011100
9189	>bfe4		07				                .byte %00000111
9190	>bfe5		00				                .byte %00000000
9191	>bfe6		7f				                .byte %01111111
9192	>bfe7		00				                .byte %00000000

9194							                ; CHR$253
9195	>bfe8		06				                .byte %00000110
9196	>bfe9		0c				                .byte %00001100
9197	>bfea		7e				                .byte %01111110
9198	>bfeb		18				                .byte %00011000
9199	>bfec		7e				                .byte %01111110
9200	>bfed		30				                .byte %00110000
9201	>bfee		60				                .byte %01100000
9202	>bfef		00				                .byte %00000000

9204							                ; CHR$254
9205	>bff0		70				                .byte %01110000
9206	>bff1		1c				                .byte %00011100
9207	>bff2		07				                .byte %00000111
9208	>bff3		1c				                .byte %00011100
9209	>bff4		70				                .byte %01110000
9210	>bff5		00				                .byte %00000000
9211	>bff6		7f				                .byte %01111111
9212	>bff7		00				                .byte %00000000

9214							                ; CHR$255
9215	>bff8		ff				                .byte %11111111
9216	>bff9		ff				                .byte %11111111
9217	>bffa		ff				                .byte %11111111
9218	>bffb		ff				                .byte %11111111
9219	>bffc		ff				                .byte %11111111
9220	>bffd		ff				                .byte %11111111
9221	>bffe		ff				                .byte %11111111
9222	>bfff		ff				                .byte %11111111

9224							                .endblock



:1	;******  Return to file: mos400.s65

29							                .endsection

31							                .section mos
32							                .include "src/mos.s65"

:13	;******  Processing file: src/mos.s65

1							; -*- comment-column:45; -*-

3	.c000						mos: .block

5							; VDU driver entry block
6							; ======================
7	.c000						LC000:                                       ; Read from VDU memory
8	.c000		b1 d6		lda ($d6),y	                lda (ZMEMG),y
9	.c002		60		rts		                rts
10	.c003						LC003:                                       ; Write to VDU memory
11	.c003		91 d6		sta ($d6),y	                sta (ZMEMG),y
12	.c005		60		rts		                rts

14							; MasRef E.4-6
15							;
16							; JSR PLBYTE plots the mask held in ZMASK into the byte pointed to by
17							; (ZMEMG),y, using ZGORA and ZGEOR as colour masks. See GADDR below
18							; for an example of its use.
19							;
20							; PLBYTE uses ZTEMP as workspace and preserves X, Y, V and C.
21	.c006						PLBYTE:
22	.c006		4c 4f db	jmp $db4f	                jmp plbyteEntryPoint

24							; MasRef E.4-6
25							;
26							; JSR HPLOT plots a fast horizontal line in the current graphics
27							; colour or ECF and the current graphics mode (all as set by VDU 18)
28							; between two specified points. It is the low level primitive used by
29							; all the MOS area fill commands.
30							;
31							; On entry, two 4 byte areas at &300+X and &300+Y contain the
32							; coordinates of the two endpoints, in the standard
33							; lowX,highX,lowY,highY order. Should the Y coordinates differ, the Y
34							; coordinate of the line plotted is taken from the leftmost of the two
35							; points specified.
36							;
37							; Only portions of the line inside the graphics window are plotted.
38							; Subject to this, both endpoints of the line are plotted.
39							;
40							; HPLOT uses ZGORA, ZGEOR, ZMASK, ZMEMG, ZTEMP (but not ZTEMP+1),
41							; ZTEMPB, ZTEMPB+1, ZTEMPC and ZTEMPC+1 as workspace. No registers or
42							; flags are preserved.
43	.c009						HPLOT:
44	.c009		4c e6 da	jmp $dae6	                jmp LDAE8

46							; MasRef E.4-6
47							;
48							; JSR EIGABS converts the 4 byte pair of external coordinates at
49							; &300+X where X>=2 (in standard lowX,highX,lowY,highY order) into the
50							; corresponding pair of pixel coordinates by offsetting by the
51							; graphics origin, then dividing by an appropriate power of 2.
52							;
53							; EIGABS uses ZTEMP as workspace, and corrupts all registers and
54							; flags.
55	.c00c						EIGABS:
56	.c00c		4c dc d1	jmp $d1dc	                jmp eigabsEntryPoint

58							; MasRef E.4-7
59							;
60							; JSR WIND windows the 4 byte pair of pixel coordinates (in standard
61							; lowX,highX,lowY,highY order) at &300+X, and returns a result in A
62							; according to its position with respect to the window:

64							; 9 | 8 | 10
65							; --+---+---
66							; 1 | 0 | 2
67							; --+---+---
68							; 5 | 4 | 6

70							; WIND uses ZTEMP as workspace, preserves X and sets N and Z according
71							; to A.
72	.c00f						WIND:
73	.c00f		4c a6 d1	jmp $d1a6	                jmp windEntryPoint

75							; MasRef E.4-7
76							;
77							; JSR GADDR addresses the pixel whose 4 byte pair of pixel coordinates
78							; (in standard lowX,highX,lowY,highY order) is at &300+X. GADDR should
79							; not be called without first ensuring (typically by means of WIND)
80							; that the point concerned does lie within the screen.
81							;
82							; GADDR initialises the following variables:
83							;
84							; . ZMEMG to the start of the page of memory containing the pixel.
85							;
86							; . Y and VDU variable &1A (i.e. location &31A) to contain the offset
87							; of the byte containing the pixel within this page â<80><93> i.e. (ZMEMG),y
88							; points to the byte containing the pixel.
89							;
90							; . ZMASK to a mask indicating which bits of this byte constitute the
91							; pixel.
92							;
93							; . ZGORA and ZGEOR to the correct colour masks for the current
94							; graphics plot mode (found in VDU variable &5A) and colour/ECF
95							;
96							; . X to Y MOD 7, i.e. the scan line within a character row of the
97							; pixel.
98							;
99							; Additionally, GADDR uses ZTEMP as workspace and returns A=0, Z=1.
100							;
101							; An example of the use of PLBYTE, WIND and GADDR is the following
102							; code, which effectively re-implements the VDU 25 64â<80><93>71 (plot a
103							; point) calls. It assumes that the routine addresses have been
104							; previously defined and that the graphics plot mode, etc. were set up
105							; by the VDU 25 code before the unknown PLOT codes vector was entered:

107							; .POINT
108							;  LDX #&20   ;Addresses new point within VDU queue, as
109							;             ;left on entry to the unknown PLOT codes
110							;             ;vector.
111							;  JSR WIND   ;Is the point inside the window?
112							;  BNE END    ;Return if not.
113							;  JSR GADDR  ;Address the point now we know it's on
114							;             ;screen.
115							;  JSR PLBYTE ;And plot the point.
116							; .END
117							;  RTS
118	.c012						GADDR:
119	.c012		4c c6 de	jmp $dec6	                jmp gaddrEntryPoint

121							; MasRef E.4-8
122							;
123							; JSR IEG takes the internal pixel coordinates of the graphics cursor
124							; (in VDU variables &24â<80><93>&27), converts it back to external coordinates
125							; and stores the result in VDU variables &10â<80><93>&13.
126							;
127							; It should be called whenever the graphics code generates a new
128							; graphics cursor position (e.g. in the VDU drivers, it is called
129							; after a character is printed in VDU 5 mode). Its purpose is to make
130							; the two versions of the graphics cursor agree again, and thus
131							; prevent errors occurring with relative plots.
132							;
133							; IEG uses no page zero locations and corrupts all registers and
134							; flags.
135	.c015						IEG:
136	.c015		4c df c4	jmp $c4df	                jmp LC4DF

138							;-------------------------------------------------------------------------

140	.c018						LC018:                                       ; Fetch byte from ROM Y
141	.c018		a6 f4		ldx $f4		                ldx $F4                      ; Get current ROM
142	.c01a		84 f4		sty $f4		                sty $F4                      ; Select ROM in Y
143	.c01c		8c 30 fe	sty $fe30	                sty ROMSEL
144	.c01f		b2 f6		lda ($f6)	                lda ($F6)                    ; Get byte with ROM Y paged in
145	.c021		4c 8e e5	jmp $e58e	                jmp selectROMX                    ; Page in ROM X and return

147	.c024						LC024:
148	.c024		6c 5d 03	jmp ($035d)	                jmp ($035D)

150							;-------------------------------------------------------------------------
151							;
152							; VDU driver entry point
153							;
154							; Output to VDU.
155							;
156	.c027						outputToVDU:
157	.c027		ae 6a 02	ldx $026a	                ldx vduQueueNegativeLength  ;get VDU queue length
158	.c02a		f0 2d		beq $c059	                beq outputCharToVDU         ;taken if empty
159	.c02c		9d 24 02	sta $0224,x	                sta vduv.queueEnd-1-255,x   ;add to queue
160	.c02f		ee 6a 02	inc $026a	                inc vduQueueNegativeLength  ;one more in the queue...
161	.c032		f0 02		beq $c036	                beq outputQueueToVDU        ;taken if queue now filled
162	.c034						clc_rts_c034:
163	.c034		18		clc		                clc

165							;-------------------------------------------------------------------------
166							;
167							; VDU 0 (&00) Null [MasRef E.3-1]
168							; VDU 6 (&06) Enable VDU driver [MasRef E.3-3]
169							; VDU 27 (&1B) Null [MasRef E.3-34]
170							;
171	.c035						vdu0EntryPoint:
172	.c035						vdu6EntryPoint:
173	.c035						vdu27EntryPoint:
174	.c035						rtsC035:
175	.c035		60		rts		                rts

177							;-------------------------------------------------------------------------

179	.c036						outputQueueToVDU:
180	.c036		24 d0		bit $d0		                bit STATE
181	.c038		10 19		bpl $c053	                bpl LC053              ;branch taken if not VDU21 mode

183							                ; ????
184	.c03a		ac 5e 03	ldy $035e	                ldy vduv.jumpVector+1
185	.c03d		c0 c0		cpy #$c0	                cpy #>vdu1EntryPoint
186	.c03f		d0 f3		bne $c034	                bne clc_rts_c034
187	.c041		ac 5d 03	ldy $035d	                ldy vduv.jumpVector+0
188	.c044		c0 e2		cpy #$e2	                cpy #<vdu1EntryPoint
189	.c046		d0 ec		bne $c034	                bne clc_rts_c034

191	.c048						outputCharToPrinter:
192	.c048		aa		tax		                tax                          ;save char to print
193	.c049		a5 d0		lda $d0		                lda STATE
194	.c04b		4a		lsr a		                lsr a                       ;C set if isPrinterEnabled
195	.c04c		90 e7		bcc $c035	                bcc rtsC035 ;taken if printer disabled - VDU 1 then a no-op
196	.c04e		8a		txa		                txa                          ;restore char to print
197	.c04f		18		clc		                clc
198							                .if version<350
200							                .else
201	.c050		4c db e2	jmp $e2db	                jmp LE2ED
202							                .endif

204	.c053						LC053:
205	.c053		20 fa c0	jsr $c0fa	                jsr stopCursorEditing
206	.c056		18		clc		                clc
207	.c057		80 67		bra $c0c0	                bra LC0C0

209	.c059						outputCharToVDU:
210	.c059		20 fa c0	jsr $c0fa	                jsr stopCursorEditing
211	.c05c		50 0f		bvc $c06d	                bvc LC06D             ;taken if not previously editing
212	.c05e		30 0d		bmi $c06d	                bmi LC06D             ;taken if VDU 21
213	.c060		c9 0d		cmp #$0d	                cmp #$0D
214	.c062		d0 09		bne $c06d	                bne LC06D                  ;taken if not printing a CR
215	.c064		48		pha		                pha                        ;save char to print
216	.c065		a9 42		lda #$42	                lda #STATE.isCursorEditing|STATE.isScrollingDisabled
217	.c067		14 d0		trb $d0		                trb STATE
218	.c069		20 4e cf	jsr $cf4e	                jsr showCursor
219	.c06c		68		pla		                pla                          ;restore char to print
220	.c06d						LC06D:
221	.c06d		c9 20		cmp #$20	                cmp #$20
222	.c06f		90 06		bcc $c077	                bcc handleControlChar
223	.c071		c9 7f		cmp #$7f	                cmp #$7F
224	.c073		d0 21		bne $c096	                bne LC096                    ;taken if not backspace
225	.c075		a9 20		lda #$20	                lda #$20 ;backspace is entry 32 in the VDU routines table
226	.c077						handleControlChar:
227	.c077		a8		tay		                tay                          ;Y=index in table
228	.c078		b9 25 e0	lda $e025,y	                lda vduRoutinesLSBTable,y
229	.c07b		8d 5d 03	sta $035d	                sta vduv.jumpVector+0 ; Store jump address LSB (see MasRef E.4-3)
230	.c07e		b9 46 e0	lda $e046,y	                lda vduRoutinesMSBTable,y
231	.c081		30 30		bmi $c0b3	                bmi LC0B3           ;branch taken if MSB directly
232	.c083		aa		tax		                tax                          ; Save original MSB value
233	.c084		09 f0		ora #$f0	                ora #$F0
234	.c086		8d 6a 02	sta $026a	                sta vduQueueNegativeLength ;initialise initial VDU queue length
235	.c089		8a		txa		                txa                          ; Restore original MSB value
236							                .if version==350
238							                .else
239	.c08a		4a		lsr a		                lsr a                        ;
240	.c08b		4a		lsr a		                lsr a                        ;
241	.c08c		4a		lsr a		                lsr a                        ;
242	.c08d		4a		lsr a		                lsr a                        ; Extract value in top 4 bits
243							                .endif
244	.c08e		18		clc		                clc                          ;
245	.c08f		69 c0		adc #$c0	                adc #vduRoutinesPage         ; form MSB
246	.c091		8d 5e 03	sta $035e	                sta vduv.jumpVector+1
247	.c094		80 34		bra $c0ca	                bra reinstateCursorEditing                    ; Continue

249	.c096						LC096:
250	.c096		24 d0		bit $d0		                bit STATE
251	.c098		30 2d		bmi $c0c7	                bmi LC0C7                    ;taken if VDU21
252	.c09a		20 0a ce	jsr $ce0a	                jsr LCE0C
253	.c09d		a9 20		lda #$20	                lda #$20
254	.c09f		2c 66 03	bit $0366	                bit $0366
255	.c0a2		d0 23		bne $c0c7	                bne LC0C7
256	.c0a4		20 76 c2	jsr $c276	                jsr LC276
257	.c0a7		80 1e		bra $c0c7	                bra LC0C7

259	.c0a9						LC0A9:
260	.c0a9		49 06		eor #$06	                eor #$06
261	.c0ab		d0 18		bne $c0c5	                bne LC0C5
262	.c0ad		a9 80		lda #$80	                lda #STATE.isVDU21
263	.c0af		14 d0		trb $d0		                trb STATE
264	.c0b1		80 17		bra $c0ca	                bra reinstateCursorEditing

266	.c0b3						LC0B3:
267	.c0b3		8d 5e 03	sta $035e	                sta vduv.jumpVector+1
268	.c0b6		98		tya		                tya
269	.c0b7		49 f7		eor #$f7	                eor #$F7
270	.c0b9		c9 fa		cmp #$fa	                cmp #$FA
271	.c0bb		98		tya		                tya
272	.c0bc		24 d0		bit $d0		                bit STATE
273	.c0be		30 e9		bmi $c0a9	                bmi LC0A9             ;branch taken if VDU21 in effect
274	.c0c0						LC0C0:
275	.c0c0		08		php		                php
276	.c0c1		20 24 c0	jsr $c024	                jsr LC024
277	.c0c4		28		plp		                plp
278	.c0c5						LC0C5:
279	.c0c5		90 03		bcc $c0ca	                bcc reinstateCursorEditing
280	.c0c7						LC0C7:
281	.c0c7		a5 d0		lda $d0		                lda STATE
282	.c0c9		4a		lsr a		                lsr a                          ;C=1 if printer enabled
283	.c0ca						reinstateCursorEditing:
284	.c0ca		24 d0		bit $d0		                bit STATE
285	.c0cc		50 13		bvc $c0e1	                bvc rtsC0E1               ;taken if not cursor editing
286	.c0ce		20 05 c1	jsr $c105	                jsr activateEditCursor
287	.c0d1						exchangeCursors:
288	.c0d1		08		php		                php
289	.c0d2		48		pha		                pha
290	.c0d3		a5 d0		lda $d0		                lda STATE
291	.c0d5		49 02		eor #$02	                eor #STATE.isScrollingDisabled
292	.c0d7		85 d0		sta $d0		                sta STATE
293	.c0d9		20 ac e2	jsr $e2ac	                jsr exchangeEditCursorPositionAndTextCursorPosition
294	.c0dc		20 d8 c6	jsr $c6d8	                jsr updateCRTCTextCursor
295	.c0df		68		pla		                pla
296	.c0e0		28		plp		                plp
297	.c0e1						rtsC0E1:
298	.c0e1		60		rts		                rts

300							;-------------------------------------------------------------------------
301							;
302							; VDU 1 (&01) Send next character to printer only [MasRef E.3-2]
303							;
304	.c0e2						vdu1EntryPoint:
305	.c0e2		20 ca c0	jsr $c0ca	                jsr reinstateCursorEditing
306	.c0e5		20 48 c0	jsr $c048	                jsr outputCharToPrinter
307	.c0e8		80 10		bra $c0fa	                bra stopCursorEditing

309							;-------------------------------------------------------------------------
310							;
311							; VDU 2 (&02) Enable printer [MasRef E.3-2]
312							; VDU 3 (&03) Disable printer [MasRef E.3-3]
313							;
314	.c0ea						vdu2EntryPoint:
315	.c0ea						vdu3EntryPoint:
316	.c0ea		48		pha		                pha                          ;
317	.c0eb		20 ca c0	jsr $c0ca	                jsr reinstateCursorEditing
318							                .if version<350
320							                .else
321	.c0ee		20 d5 e2	jsr $e2d5	                jsr LE2E7
322							                .endif
323	.c0f1		a9 01		lda #$01	                lda #STATE.isPrinterEnabled  ;
324	.c0f3		04 d0		tsb $d0		                tsb STATE
325	.c0f5		68		pla		                pla
326	.c0f6		29 01		and #$01	                and #STATE.isPrinterEnabled
327	.c0f8		14 d0		trb $d0		                trb STATE

329							;-------------------------------------------------------------------------
330							;
331							; Stop cursor editing, if it's on.
332							;
333							; exit:
334							;
335							; V=1 if cursor editing previous on
336							; N=1 if VDU 21 on
337							;
338	.c0fa						stopCursorEditing:
339	.c0fa		24 d0		bit $d0		                bit STATE
340	.c0fc		50 e3		bvc $c0e1	                bvc rtsC0E1                    ;taken if not cursor editing
341	.c0fe		20 d1 c0	jsr $c0d1	                jsr exchangeCursors
342	.c101		08		php		                php
343	.c102						deactivateEditCursor:
344	.c102		38		sec		                sec
345	.c103		80 02		bra $c107	                bra updateEditCursorState

347							;-------------------------------------------------------------------------

349	.c105						activateEditCursor:
350	.c105		08		php		                php
351	.c106		18		clc		                clc

353							;-------------------------------------------------------------------------
354							;
355							; Handle cursor editing on/off.
356							;
357							; entry:
358							;
359							; C=0 - cursor editing on; add fake cursor
360							;
361							; C=1 = cursor editing off; remove fake cursor and restore screen
362							;
363	.c107						updateEditCursorState: .proc
364	.c107		48		pha		                pha
365	.c108		a5 d8		lda $d8		                lda ZMEMT+0
366	.c10a		85 e0		sta $e0		                sta ZTEMPD+0
367	.c10c		a5 d9		lda $d9		                lda ZMEMT+1
368	.c10e		85 e1		sta $e1		                sta ZTEMPD+1
369	.c110		ac 4f 03	ldy $034f	                ldy vduv.bytesPerCharacter
370	.c113		88		dey		                dey
371	.c114		d0 0e		bne $c124	                bne bitmap

373	.c116						teletext:
374	.c116		ad 38 03	lda $0338	                lda vduv.workspace._38 ;get old byte under fake cursor (may be bogus)
375	.c119		b0 17		bcs $c132	                bcs storeToScreen      ;taken if switching off
376	.c11b		b2 d8		lda ($d8)	                lda (ZMEMT)            ;get screen byte
377	.c11d		8d 38 03	sta $0338	                sta vduv.workspace._38 ;store old byte
378	.c120		a9 7f		lda #$7f	                lda #$7F               ;store solid block to screen
379	.c122		80 0e		bra $c132	                bra storeToScreen

381	.c124						bitmap:
382	.c124		a9 ff		lda #$ff	                lda #%11111111          ;invert all bits
383	.c126		c0 1f		cpy #$1f	                cpy #$1F      ;check for 32 chars/byte - i.e., MODE 2
384	.c128		d0 02		bne $c12c	                bne +         ;taken if not MODE 2
385	.c12a		a9 3f		lda #$3f	                lda #%00111111       ;avoid flashing colours in MODE 2
386	.c12c						+
387	.c12c		85 da		sta $da		                sta ZTEMP
388	.c12e						loop:
389	.c12e		b2 e0		lda ($e0)	                lda (ZTEMPD)
390	.c130		45 da		eor $da		                eor ZTEMP
391	.c132						storeToScreen:
392	.c132		92 e0		sta ($e0)	                sta (ZTEMPD)
393	.c134		e6 e0		inc $e0		                inc ZTEMPD+0
394	.c136		d0 09		bne $c141	                bne +                    ;taken if no carry out of LSB
395	.c138		e6 e1		inc $e1		                inc ZTEMPD+1
396	.c13a		10 05		bpl $c141	                bpl +                 ;taken if no screen address wrap
397	.c13c		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
398	.c13f		85 e1		sta $e1		                sta ZTEMPD+1
399	.c141						+
400	.c141		88		dey		                dey               ;Y=$ff after 1 iteration in teletext
401	.c142		10 ea		bpl $c12e	                bpl loop
402	.c144		68		pla		                pla
403	.c145		28		plp		                plp
404	.c146		60		rts		                rts
405							                .endproc

407							;-------------------------------------------------------------------------

409	.c147						LC147:
410	>c147		be c1				                .word LC1BE
411	>c149		b1 c1				                .word LC1B1
412	>c14b		be c1				                .word LC1BE
413	>c14d		b1 c1				                .word LC1B1
414	>c14f		95 c1				                .word LC195
415	>c151		95 c1				                .word LC195
416	>c153		a2 c1				                .word LC1A2
417	>c155		a2 c1				                .word LC1A2

419							;-------------------------------------------------------------------------

421	.c157						LC157:
422	>c157		01 c2				                .word LC201
423	>c159		ee c1				                .word LC1EE
424	>c15b		01 c2				                .word LC201
425	>c15d		ee c1				                .word LC1EE
426	>c15f		21 c2				                .word LC221
427	>c161		21 c2				                .word LC221
428	>c163		10 c2				                .word LC210
429	>c165		10 c2				                .word LC210

431							;-------------------------------------------------------------------------
432							;
433							; Indexed by the swapAxes, invertVertical and invertHorizontal cursor
434							; flags bits.
435							;
436	.c167						setTextCursorXPositionRoutinesTable:
437	>c167		d3 c2				                .word setTextCursorXPosition           ;0
438	>c169		cb c2				                .word setTextCursorXPositionInvertHorizontal ;invertHorizontal
439	>c16b		d3 c2				                .word setTextCursorXPosition ;invertVertical
440	>c16d		cb c2				                .word setTextCursorXPositionInvertHorizontal ;invertVertical|invertHorizontal
441	>c16f		e2 c2				                .word setTextCursorXPositionSwapAxes         ;swapAxes
442	>c171		e2 c2				                .word setTextCursorXPositionSwapAxes ;swapAxes|invertHorizontal
443	>c173		da c2				                .word setTextCursorXPositionSwapAxesInvertVertical ;swapAxes|invertVertical
444	>c175		da c2				                .word setTextCursorXPositionSwapAxesInvertVertical ;swapAxes|invertVertical|invertHorizontal

446							;-------------------------------------------------------------------------

448	.c177						LC177:
449	>c177		10 c3				                .word LC310
450	>c179		f2 c2				                .word LC2F2
451	>c17b		10 c3				                .word LC310
452	>c17d		f2 c2				                .word LC2F2
453	>c17f		5a c3				                .word LC35A
454	>c181		5a c3				                .word LC35A
455	>c183		38 c3				                .word LC338
456	>c185		38 c3				                .word LC338

458							;-------------------------------------------------------------------------

460	.c187						LC187:
461	.c187		4d 66 03	eor $0366	                eor $0366
462	.c18a		29 0e		and #$0e	                and #$0E
463	.c18c		48		pha		                pha
464	.c18d		20 a4 d1	jsr $d1a4	                jsr LD1A6
465	.c190		fa		plx		                plx
466	.c191		38		sec		                sec
467	.c192		7c 47 c1	jmp ($c147,x)	                jmp (LC147,x)

469	.c195						LC195:
470	.c195		ad 26 03	lda $0326	                lda $0326
471	.c198		e9 08		sbc #$08	                sbc #$08
472	.c19a		8d 26 03	sta $0326	                sta $0326
473	.c19d		ce 27 03	dec $0327	                dec $0327
474	.c1a0		80 08		bra $c1aa	                bra LC1AA

476	.c1a2						LC1A2:
477	.c1a2		ad 26 03	lda $0326	                lda $0326
478	.c1a5		69 07		adc #$07	                adc #$07
479	.c1a7		8d 26 03	sta $0326	                sta $0326
480	.c1aa						LC1AA:
481	.c1aa		90 1f		bcc $c1cb	                bcc LC1CB
482	.c1ac		ee 27 03	inc $0327	                inc $0327
483	.c1af		80 1a		bra $c1cb	                bra LC1CB

485	.c1b1						LC1B1:
486	.c1b1		ad 24 03	lda $0324	                lda $0324
487	.c1b4		e9 08		sbc #$08	                sbc #$08
488	.c1b6		8d 24 03	sta $0324	                sta $0324
489	.c1b9		ce 25 03	dec $0325	                dec $0325
490	.c1bc		80 08		bra $c1c6	                bra LC1C6

492	.c1be						LC1BE:
493	.c1be		ad 24 03	lda $0324	                lda $0324
494	.c1c1		69 07		adc #$07	                adc #$07
495	.c1c3		8d 24 03	sta $0324	                sta $0324
496	.c1c6						LC1C6:
497	.c1c6		90 03		bcc $c1cb	                bcc LC1CB
498	.c1c8		ee 25 03	inc $0325	                inc $0325
499	.c1cb						LC1CB:
500	.c1cb		a5 da		lda $da		                lda $DA
501	.c1cd		d0 0c		bne $c1db	                bne LC1DB
502	.c1cf		2c 66 03	bit $0366	                bit $0366
503	.c1d2		70 07		bvs $c1db	                bvs LC1DB
504	.c1d4		da		phx		                phx
505	.c1d5		20 a4 d1	jsr $d1a4	                jsr LD1A6
506	.c1d8		fa		plx		                plx
507	.c1d9		a8		tay		                tay
508	.c1da		60		rts		                rts

510	.c1db						LC1DB:
511	.c1db		a9 00		lda #$00	                lda #$00
512	.c1dd		60		rts		                rts

514	.c1de						LC1DE:
515	.c1de		a9 00		lda #$00	                lda #$00
516	.c1e0						LC1E0:
517	.c1e0		64 da		stz $da		                stz $DA
518	.c1e2		0a		asl a		                asl a
519	.c1e3		26 da		rol $da		                rol $DA
520	.c1e5		0a		asl a		                asl a
521	.c1e6		26 da		rol $da		                rol $DA
522	.c1e8		0a		asl a		                asl a
523	.c1e9		26 da		rol $da		                rol $DA
524	.c1eb		7c 57 c1	jmp ($c157,x)	                jmp (LC157,x)

526	.c1ee						LC1EE:
527	.c1ee		49 f9		eor #$f9	                eor #$F9
528	.c1f0		6d 04 03	adc $0304	                adc $0304
529	.c1f3		8d 24 03	sta $0324	                sta $0324
530	.c1f6		a5 da		lda $da		                lda $DA
531	.c1f8		49 ff		eor #$ff	                eor #$FF
532	.c1fa		6d 05 03	adc $0305	                adc $0305
533	.c1fd		8d 25 03	sta $0325	                sta $0325
534	.c200		60		rts		                rts

536	.c201						LC201:
537	.c201		6d 00 03	adc $0300	                adc $0300
538	.c204		8d 24 03	sta $0324	                sta $0324
539	.c207		a5 da		lda $da		                lda $DA
540	.c209		6d 01 03	adc $0301	                adc $0301
541	.c20c		8d 25 03	sta $0325	                sta $0325
542	.c20f		60		rts		                rts

544	.c210						LC210:
545	.c210		49 07		eor #$07	                eor #$07
546	.c212		6d 02 03	adc $0302	                adc $0302
547	.c215		8d 26 03	sta $0326	                sta $0326
548	.c218		a5 da		lda $da		                lda $DA
549	.c21a		6d 03 03	adc $0303	                adc $0303
550	.c21d		8d 27 03	sta $0327	                sta $0327
551	.c220		60		rts		                rts

553	.c221						LC221:
554	.c221		38		sec		                sec
555	.c222		49 ff		eor #$ff	                eor #$FF
556	.c224		6d 06 03	adc $0306	                adc $0306
557	.c227		8d 26 03	sta $0326	                sta $0326
558	.c22a		a5 da		lda $da		                lda $DA
559	.c22c		49 ff		eor #$ff	                eor #$FF
560	.c22e		6d 07 03	adc $0307	                adc $0307
561	.c231		8d 27 03	sta $0327	                sta $0327
562	.c234		60		rts		                rts

564	.c235						LC235:
565	.c235		a9 00		lda #$00	                lda #$00
566	.c237		20 87 c1	jsr $c187	                jsr LC187
567	.c23a		f0 0d		beq $c249	                beq LC249
568	.c23c		20 de c1	jsr $c1de	                jsr LC1DE
569	.c23f						LC23F:
570	.c23f		a9 08		lda #$08	                lda #$08
571	.c241						LC241:
572	.c241		20 87 c1	jsr $c187	                jsr LC187
573	.c244		f0 03		beq $c249	                beq LC249
574	.c246		20 de c1	jsr $c1de	                jsr LC1DE
575	.c249						LC249:
576	.c249		4c df c4	jmp $c4df	                jmp LC4DF

578	.c24c						vdu9EntryPoint:
579	.c24c		20 2b d1	jsr $d12b	                jsr handleColumn81
580	.c24f		b0 e4		bcs $c235	                bcs LC235
581	.c251		a9 00		lda #$00	                lda #$00
582	.c253		20 e9 c2	jsr $c2e9	                jsr LC2E9
583	.c256		90 1b		bcc $c273	                bcc LC273
584	.c258						LC258:
585	.c258		20 8f c3	jsr $c38f	                jsr LC38F
586	.c25b						vdu10EntryPoint:
587	.c25b		20 d0 e2	jsr $e2d0	                jsr testVDU5State
588	.c25e		d0 df		bne $c23f	                bne LC23F
589	.c260		18		clc		                clc
590	.c261		20 8e c8	jsr $c88e	                jsr LC88E
591	.c264		a9 08		lda #$08	                lda #$08
592	.c266		20 e9 c2	jsr $c2e9	                jsr LC2E9
593	.c269						LC269:
594	.c269		90 08		bcc $c273	                bcc LC273
595	.c26b		20 7b c3	jsr $c37b	                jsr LC37B
596	.c26e		90 03		bcc $c273	                bcc LC273
597	.c270		4c 4f d0	jmp $d04f	                jmp LD051

599	.c273						LC273:
600	.c273		4c ed c6	jmp $c6ed	                jmp updateCRTCCursorAddress

602	.c276						LC276:
603	.c276		20 d0 e2	jsr $e2d0	                jsr testVDU5State
604	.c279		d0 ba		bne $c235	                bne LC235
605	.c27b		20 e9 c2	jsr $c2e9	                jsr LC2E9
606	.c27e		90 f3		bcc $c273	                bcc LC273
607	.c280		a9 01		lda #$01	                lda #$01
608	.c282		2c 66 03	bit $0366	                bit $0366
609	.c285		f0 d1		beq $c258	                beq LC258
610	.c287		38		sec		                sec
611	.c288		6e 6c 03	ror $036c	                ror $036C
612	.c28b						LC28B:
613	.c28b		60		rts		                rts

615	.c28c						LC28C:
616	.c28c		a9 06		lda #$06	                lda #$06
617	.c28e		20 87 c1	jsr $c187	                jsr LC187
618	.c291		f0 b6		beq $c249	                beq LC249
619	.c293		20 de c1	jsr $c1de	                jsr LC1DE
620	.c296						LC296:
621	.c296		a9 0e		lda #$0e	                lda #$0E
622	.c298		80 a7		bra $c241	                bra LC241

624	.c29a						vdu8EntryPoint:
625	.c29a		20 d0 e2	jsr $e2d0	                jsr testVDU5State
626	.c29d		d0 ed		bne $c28c	                bne LC28C
627	.c29f		4e 6c 03	lsr $036c	                lsr $036C
628	.c2a2		2c 6c 03	bit $036c	                bit $036C
629	.c2a5		70 e4		bvs $c28b	                bvs LC28B
630	.c2a7		a9 06		lda #$06	                lda #$06
631	.c2a9		20 e9 c2	jsr $c2e9	                jsr LC2E9
632	.c2ac		90 c5		bcc $c273	                bcc LC273
633	.c2ae		20 8f c3	jsr $c38f	                jsr LC38F
634	.c2b1						vdu11EntryPoint:
635	.c2b1		20 d0 e2	jsr $e2d0	                jsr testVDU5State
636	.c2b4		d0 e0		bne $c296	                bne LC296
637	.c2b6		ce 69 02	dec $0269	                dec pagedModeCounter
638	.c2b9		10 03		bpl $c2be	                bpl LC2BE
639	.c2bb		ee 69 02	inc $0269	                inc pagedModeCounter
640	.c2be						LC2BE:
641	.c2be		a9 0e		lda #$0e	                lda #$0E
642	.c2c0		20 e9 c2	jsr $c2e9	                jsr LC2E9
643	.c2c3		80 a4		bra $c269	                bra LC269

645							;-------------------------------------------------------------------------
646							;
647							; Set/reset cursor position, taking cursor flags into account.
648							;
649							; entry:
650							;
651							; (set only) A = cursor position
652							;
653							; X = cursorFlags bits: swapAxes, invertVertical, invertHorizontal
654							;
655	.c2c5						resetTextCursorXPositionWithCursorFlags:
656	.c2c5		a9 00		lda #$00	                lda #$00
657	.c2c7						setTextCursorXPositionWithCursorFlags:
658	.c2c7		18		clc		                clc
659	.c2c8		7c 67 c1	jmp ($c167,x)	                jmp (setTextCursorXPositionRoutinesTable,x)

661							;-------------------------------------------------------------------------

663	.c2cb						setTextCursorXPositionInvertHorizontal:
664	.c2cb		38		sec		                sec                          ;+1
665	.c2cc		49 ff		eor #$ff	                eor #$FF          ;^$ff+1 (i.e., adc will add the -ve)
666	.c2ce		6d 0a 03	adc $030a	                adc vduv.textWindowRight
667	.c2d1		80 03		bra $c2d6	                bra staTextCursorXPosition

669							;-------------------------------------------------------------------------

671	.c2d3						setTextCursorXPosition:
672	.c2d3		6d 08 03	adc $0308	                adc vduv.textWindowLeft
673	.c2d6						staTextCursorXPosition:
674	.c2d6		8d 18 03	sta $0318	                sta vduv.textCursorXPosition
675	.c2d9		60		rts		                rts

677							;-------------------------------------------------------------------------

679	.c2da						setTextCursorXPositionSwapAxesInvertVertical:
680	.c2da		38		sec		                sec
681	.c2db		49 ff		eor #$ff	                eor #$FF
682	.c2dd		6d 09 03	adc $0309	                adc vduv.textWindowBottom
683	.c2e0		80 03		bra $c2e5	                bra staTextCursorYPosition

685	.c2e2						setTextCursorXPositionSwapAxes:
686	.c2e2		6d 0b 03	adc $030b	                adc vduv.textWindowTop
687	.c2e5						staTextCursorYPosition:
688	.c2e5		8d 19 03	sta $0319	                sta vduv.textCursorYPosition
689	.c2e8		60		rts		                rts

691							;-------------------------------------------------------------------------

693	.c2e9						LC2E9:
694	.c2e9		4d 66 03	eor $0366	                eor $0366
695	.c2ec		29 0e		and #$0e	                and #$0E
696	.c2ee		aa		tax		                tax
697	.c2ef						LC2EF:
698	.c2ef		7c 77 c1	jmp ($c177,x)	                jmp (LC177,x)

700	.c2f2						LC2F2:
701	.c2f2		ad 08 03	lda $0308	                lda $0308
702	.c2f5		cd 18 03	cmp $0318	                cmp $0318
703	.c2f8		b0 3d		bcs $c337	                bcs LC337
704	.c2fa		ce 18 03	dec $0318	                dec $0318
705	.c2fd		38		sec		                sec
706	.c2fe		ad 4a 03	lda $034a	                lda $034A
707	.c301		ed 4f 03	sbc $034f	                sbc $034F
708	.c304		8d 4a 03	sta $034a	                sta $034A
709	.c307		85 d8		sta $d8		                sta ZMEMT+0
710	.c309		b0 2b		bcs $c336	                bcs LC336
711	.c30b		ce 4b 03	dec $034b	                dec $034B
712	.c30e		80 1b		bra $c32b	                bra LC32B

714	.c310						LC310:
715	.c310		ad 18 03	lda $0318	                lda $0318
716	.c313		cd 0a 03	cmp $030a	                cmp $030A
717	.c316		b0 1f		bcs $c337	                bcs LC337
718	.c318		ee 18 03	inc $0318	                inc $0318
719	.c31b		ad 4a 03	lda $034a	                lda $034A
720	.c31e		6d 4f 03	adc $034f	                adc $034F
721	.c321		8d 4a 03	sta $034a	                sta $034A
722	.c324		85 d8		sta $d8		                sta ZMEMT+0
723	.c326		90 0f		bcc $c337	                bcc LC337
724	.c328		ee 4b 03	inc $034b	                inc $034B
725	.c32b						LC32B:
726	.c32b		ad 4b 03	lda $034b	                lda $034B
727	.c32e						LC32E:
728	.c32e		10 04		bpl $c334	                bpl LC334
729	.c330		38		sec		                sec
730	.c331		ed 54 03	sbc $0354	                sbc $0354
731	.c334						LC334:
732	.c334		85 d9		sta $d9		                sta ZMEMT+1
733	.c336						LC336:
734	.c336		18		clc		                clc
735	.c337						LC337:
736	.c337		60		rts		                rts

738	.c338						LC338:
739	.c338		ad 0b 03	lda $030b	                lda $030B
740	.c33b		cd 19 03	cmp $0319	                cmp $0319
741	.c33e		b0 f7		bcs $c337	                bcs LC337
742	.c340		ce 19 03	dec $0319	                dec $0319
743	.c343		38		sec		                sec
744	.c344		ad 4a 03	lda $034a	                lda $034A
745	.c347		ed 52 03	sbc $0352	                sbc $0352
746	.c34a		8d 4a 03	sta $034a	                sta $034A
747	.c34d		85 d8		sta $d8		                sta ZMEMT+0
748	.c34f		ad 4b 03	lda $034b	                lda $034B
749	.c352		ed 53 03	sbc $0353	                sbc $0353
750	.c355		8d 4b 03	sta $034b	                sta $034B
751	.c358		80 d4		bra $c32e	                bra LC32E

753	.c35a						LC35A:
754	.c35a		ad 19 03	lda $0319	                lda $0319
755	.c35d		cd 09 03	cmp $0309	                cmp $0309
756	.c360		b0 d5		bcs $c337	                bcs LC337
757	.c362		ee 19 03	inc $0319	                inc $0319
758	.c365		ad 4a 03	lda $034a	                lda $034A
759	.c368		6d 52 03	adc $0352	                adc $0352
760	.c36b		8d 4a 03	sta $034a	                sta $034A
761	.c36e		85 d8		sta $d8		                sta ZMEMT+0
762	.c370		ad 4b 03	lda $034b	                lda $034B
763	.c373		6d 53 03	adc $0353	                adc $0353
764	.c376		8d 4b 03	sta $034b	                sta $034B
765	.c379		80 b3		bra $c32e	                bra LC32E

767	.c37b						LC37B:
768	.c37b		a9 10		lda #$10	                lda #$10
769	.c37d		2c 66 03	bit $0366	                bit $0366
770	.c380		d0 0d		bne $c38f	                bne LC38F
771	.c382		8a		txa		                txa
772	.c383		49 06		eor #$06	                eor #$06
773	.c385		48		pha		                pha
774	.c386		a9 42		lda #$42	                lda #$42
775	.c388		24 d0		bit $d0		                bit STATE
776	.c38a		f0 16		beq $c3a2	                beq LC3A2
777	.c38c		70 09		bvs $c397	                bvs LC397
778	.c38e		68		pla		                pla
779	.c38f						LC38F:
780	.c38f		20 c5 c2	jsr $c2c5	                jsr resetTextCursorXPositionWithCursorFlags
781	.c392		20 f8 cc	jsr $ccf8	                jsr updateZMEMTWithTextCursorPosition
782	.c395		18		clc		                clc
783	.c396		60		rts		                rts

785	.c397						LC397:
786	.c397		20 ac e2	jsr $e2ac	                jsr exchangeEditCursorPositionAndTextCursorPosition
787	.c39a		fa		plx		                plx
788	.c39b		da		phx		                phx
789	.c39c		20 ef c2	jsr $c2ef	                jsr LC2EF
790	.c39f		20 ac e2	jsr $e2ac	                jsr exchangeEditCursorPositionAndTextCursorPosition
791	.c3a2						LC3A2:
792	.c3a2		fa		plx		                plx
793	.c3a3		38		sec		                sec
794	.c3a4						LC3A4:
795	.c3a4		60		rts		                rts

797	.c3a5						vdu28EntryPoint:
798	.c3a5		ae 55 03	ldx $0355	                ldx $0355
799	.c3a8		ad 21 03	lda $0321	                lda $0321
800	.c3ab		cd 23 03	cmp $0323	                cmp $0323
801	.c3ae		90 f4		bcc $c3a4	                bcc LC3A4
802	.c3b0		dd ff e0	cmp $e0ff,x	                cmp modeMaxRow,x
803	.c3b3		f0 02		beq $c3b7	                beq LC3B7
804	.c3b5		b0 ed		bcs $c3a4	                bcs LC3A4
805	.c3b7						LC3B7:
806	.c3b7		ad 22 03	lda $0322	                lda $0322
807	.c3ba		dd 07 e1	cmp $e107,x	                cmp modeMaxColumn,x
808	.c3bd		f0 03		beq $c3c2	                beq LC3C2
809	.c3bf		b0 e3		bcs $c3a4	                bcs LC3A4
810	.c3c1		38		sec		                sec
811	.c3c2						LC3C2:
812	.c3c2		ed 20 03	sbc $0320	                sbc $0320
813	.c3c5		90 dd		bcc $c3a4	                bcc LC3A4
814	.c3c7		20 80 c7	jsr $c780	                jsr setTextWindowWidthInBytes
815	.c3ca		a9 08		lda #$08	                lda #$08
816	.c3cc		04 d0		tsb $d0		                tsb STATE
817	.c3ce		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
818	.c3d0		a0 08		ldy #$08	                ldy #VDUVariables.textWindowLeft
819	.c3d2		20 1c c9	jsr $c91c	                jsr copyFourBytesWithinVDUVariables
820	.c3d5		20 ac e2	jsr $e2ac	                jsr exchangeEditCursorPositionAndTextCursorPosition
821	.c3d8		20 d8 cc	jsr $ccd8	                jsr LCCDA
822	.c3db		90 03		bcc $c3e0	                bcc LC3E0
823	.c3dd		20 e8 c3	jsr $c3e8	                jsr LC3E8
824	.c3e0						LC3E0:
825	.c3e0		20 ac e2	jsr $e2ac	                jsr exchangeEditCursorPositionAndTextCursorPosition
826	.c3e3		20 d8 cc	jsr $ccd8	                jsr LCCDA
827	.c3e6		90 1f		bcc $c407	                bcc LC407
828	.c3e8						LC3E8:
829	.c3e8		a5 d0		lda $d0		                lda STATE
830	.c3ea		48		pha		                pha
831	.c3eb		29 df		and #$df	                and #$DF
832	.c3ed		85 d0		sta $d0		                sta STATE
833	.c3ef		20 7c c4	jsr $c47c	                jsr vdu30EntryPoint
834	.c3f2		68		pla		                pla
835	.c3f3		85 d0		sta $d0		                sta STATE
836	.c3f5		60		rts		                rts

838	.c3f6						vdu13EntryPoint:
839	.c3f6		ad 66 03	lda $0366	                lda $0366
840	.c3f9		29 0e		and #$0e	                and #$0E
841	.c3fb		aa		tax		                tax
842	.c3fc		20 d0 e2	jsr $e2d0	                jsr testVDU5State
843	.c3ff		d0 09		bne $c40a	                bne LC40A
844	.c401		4e 6c 03	lsr $036c	                lsr $036C
845	.c404		20 8f c3	jsr $c38f	                jsr LC38F
846	.c407						LC407:
847	.c407		4c ed c6	jmp $c6ed	                jmp updateCRTCCursorAddress

849	.c40a						LC40A:
850	.c40a		20 de c1	jsr $c1de	                jsr LC1DE
851	.c40d		4c df c4	jmp $c4df	                jmp LC4DF

853	.c410						LC410:
854	.c410		20 7c c4	jsr $c47c	                jsr vdu30EntryPoint

856							;-------------------------------------------------------------------------
857							;
858							; VDU 16 (&10) Clear graphics window [MasRef E.3-7]
859							;
860	.c413						vdu16EntryPoint:
861	.c413		ad 61 03	lda $0361	                lda vduv.pixelsPerByteMinusOne
862	.c416		f0 8c		beq $c3a4	                beq LC3A4                    ;taken if MODE 7
863	.c418		a2 00		ldx #$00	                ldx #VDUVariables.graphicsWindowPixelsLeft
864	.c41a		20 00 c9	jsr $c900	                jsr copyEightBytesToWorkspace28
865	.c41d		20 4f c9	jsr $c94f	                jsr prepareForPlotBackground
866	.c420						LC420:
867	.c420		a2 2a		ldx #$2a	                ldx #$2A
868	.c422		a0 2e		ldy #$2e	                ldy #$2E
869	.c424		20 b0 e2	jsr $e2b0	                jsr exchangeTwoVDUBytes
870	.c427						LC427:
871	.c427		a2 28		ldx #$28	                ldx #$28
872	.c429		a0 2c		ldy #$2c	                ldy #$2C
873	.c42b		20 e6 da	jsr $dae6	                jsr LDAE8
874	.c42e		ad 2a 03	lda $032a	                lda $032A
875	.c431		d0 03		bne $c436	                bne LC436
876	.c433		ce 2b 03	dec $032b	                dec $032B
877	.c436						LC436:
878	.c436		ce 2a 03	dec $032a	                dec $032A
879	.c439		ad 2a 03	lda $032a	                lda $032A
880	.c43c		cd 2e 03	cmp $032e	                cmp $032E
881	.c43f		ad 2b 03	lda $032b	                lda $032B
882	.c442		ed 2f 03	sbc $032f	                sbc $032F
883	.c445		10 e0		bpl $c427	                bpl LC427
884	.c447		60		rts		                rts

886	.c448						LC448:
887	.c448		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
888	.c44a		20 e4 c8	jsr $c8e4	                jsr prepareAABB
889	.c44d		80 d1		bra $c420	                bra LC420

891							;-------------------------------------------------------------------------
892							;
893							; VDU 12 (&0C) Clear text window [MasRef E.3-5]
894							;
895	.c44f						vdu12EntryPoint:
896	.c44f		a9 20		lda #$20	                lda #STATE.isVDU5
897	.c451		24 d0		bit $d0		                bit STATE
898	.c453		d0 bb		bne $c410	                bne LC410                    ;taken if VDU 5 mode
899	.c455		a9 08		lda #$08	                lda #STATE.isTextWindow
900	.c457		24 d0		bit $d0		                bit STATE
901	.c459		d0 03		bne $c45e	                bne clearTextWindow                    ;taken if text window
902	.c45b		4c 66 c8	jmp $c866	                jmp clsFastPath

904							                ; Clear screen within text window
905							                ; -------------------------------
906	.c45e						clearTextWindow:
907	.c45e		20 06 c9	jsr $c906	                jsr copyTextWindowWidthInBytesToWorkspace28
908	.c461		ae 08 03	ldx $0308	                ldx vduv.textWindowLeft
909	.c464		8e 18 03	stx $0318	                stx vduv.textCursorXPosition
910	.c467		ae 0b 03	ldx $030b	                ldx vduv.textWindowTop
911	.c46a						clearTextWindowRowsLoop:
912	.c46a		8e 19 03	stx $0319	                stx vduv.textCursorYPosition
913	.c46d		20 f8 cc	jsr $ccf8	                jsr updateZMEMTWithTextCursorPosition
914	.c470		20 e6 ca	jsr $cae6	                jsr LCAE8
915	.c473		ae 19 03	ldx $0319	                ldx vduv.textCursorYPosition
916	.c476		ec 09 03	cpx $0309	                cpx vduv.textWindowBottom
917	.c479		e8		inx		                inx
918	.c47a		90 ee		bcc $c46a	                bcc clearTextWindowRowsLoop

920							;-------------------------------------------------------------------------
921							;
922							; VDU 30 (&1E) Home cursor [MasRef E.3-36]
923							;
924	.c47c						vdu30EntryPoint:
925							                ; pretend it's VDU 31,0,0
926	.c47c		9c 23 03	stz $0323	                stz vduv.queueEnd-1
927	.c47f		9c 22 03	stz $0322	                stz vduv.queueEnd-2

929							;-------------------------------------------------------------------------
930							;
931							; VDU 31 (&1F) Tab cursor [MasRef E.3-36]
932							;
933	.c482						vdu31EntryPoint:
934	.c482		ad 66 03	lda $0366	                lda vduv.cursorFlags
935	.c485		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
936	.c487		aa		tax		                tax
937	.c488						LC488:
938	.c488		20 d0 e2	jsr $e2d0	                jsr testVDU5State
939	.c48b		d0 42		bne $c4cf	                bne LC4CF                    ;taken if VDU 5
940	.c48d		ad 18 03	lda $0318	                lda vduv.textCursorXPosition
941	.c490		48		pha		                pha                          ;save old X pos
942	.c491		ad 19 03	lda $0319	                lda vduv.textCursorYPosition
943	.c494		48		pha		                pha                          ;save old Y pos
944	.c495		ad 22 03	lda $0322	                lda vduv.queueEnd-2          ;X coordinate
945	.c498		20 c7 c2	jsr $c2c7	                jsr setTextCursorXPositionWithCursorFlags
946	.c49b		da		phx		                phx                          ;save true cursorFlags bits
947	.c49c		8a		txa		                txa
948	.c49d		49 08		eor #$08	                eor #vduv.cursorFlags.swapAxes ;cheekily do the other axis by just changing the cursor flags
949	.c49f		aa		tax		                tax
950	.c4a0		ad 23 03	lda $0323	                lda vduv.queueEnd-1          ;Y coordinate
951	.c4a3		20 d5 cc	jsr $ccd5	                jsr LCCD7
952	.c4a6		fa		plx		                plx                    ;restore true cursorFlags bits
953	.c4a7		90 11		bcc $c4ba	                bcc LC4BA              ;taken if no scrolling required
954	.c4a9		a9 01		lda #$01	                lda #vduv.cursorFlags.scrollProtect
955	.c4ab		2c 66 03	bit $0366	                bit $0366
956	.c4ae		f0 11		beq $c4c1	                beq LC4C1                 ;taken if scroll protect off

958							                ; Wrap text cursor X.
959	.c4b0		ad 22 03	lda $0322	                lda vduv.queueEnd-2       ;X coordinate
960	.c4b3		3a		dec a		                dec a
961	.c4b4		20 d5 cc	jsr $ccd5	                jsr LCCD7
962	.c4b7		b0 08		bcs $c4c1	                bcs LC4C1
963	.c4b9		38		sec		                sec
964	.c4ba						LC4BA:
965	.c4ba		6e 6c 03	ror $036c	                ror vduv.column81
966	.c4bd		68		pla		                pla                          ;discard old Y pos
967	.c4be		68		pla		                pla                          ;discard old X pos
968	.c4bf		80 0b		bra $c4cc	                bra LC4CC

970	.c4c1						LC4C1:
971	.c4c1		68		pla		                pla
972	.c4c2		8d 19 03	sta $0319	                sta vduv.textCursorYPosition ;restore old Y pos
973	.c4c5		68		pla		                pla
974	.c4c6		8d 18 03	sta $0318	                sta vduv.textCursorXPosition ;restore old X pos
975	.c4c9		20 f8 cc	jsr $ccf8	                jsr updateZMEMTWithTextCursorPosition
976	.c4cc						LC4CC:
977	.c4cc		4c ed c6	jmp $c6ed	                jmp updateCRTCCursorAddress

979	.c4cf						LC4CF:
980	.c4cf		ad 22 03	lda $0322	                lda $0322
981	.c4d2		20 e0 c1	jsr $c1e0	                jsr LC1E0
982	.c4d5		8a		txa		                txa
983	.c4d6		49 08		eor #$08	                eor #$08
984	.c4d8		aa		tax		                tax
985	.c4d9		ad 23 03	lda $0323	                lda $0323
986	.c4dc		20 e0 c1	jsr $c1e0	                jsr LC1E0
987	.c4df						LC4DF:
988	.c4df		a0 10		ldy #$10	                ldy #$10
989	.c4e1		20 1a c9	jsr $c91a	                jsr copyGraphicsCursorPixels
990	.c4e4		a2 02		ldx #$02	                ldx #$02
991	.c4e6		a0 02		ldy #$02	                ldy #$02
992	.c4e8		20 fc c4	jsr $c4fc	                jsr LC4FC
993	.c4eb		a2 00		ldx #$00	                ldx #$00
994	.c4ed		a0 04		ldy #$04	                ldy #$04
995	.c4ef		ad 61 03	lda $0361	                lda $0361
996	.c4f2						LC4F2:
997	.c4f2		88		dey		                dey
998	.c4f3		4a		lsr a		                lsr a
999	.c4f4		d0 fc		bne $c4f2	                bne LC4F2
1000	.c4f6		ad 56 03	lda $0356	                lda $0356
1001	.c4f9		f0 01		beq $c4fc	                beq LC4FC
1002	.c4fb		c8		iny		                iny
1003	.c4fc						LC4FC:
1004	.c4fc		1e 10 03	asl $0310,x	                asl $0310,x
1005	.c4ff		3e 11 03	rol $0311,x	                rol $0311,x
1006	.c502		88		dey		                dey
1007	.c503		d0 f7		bne $c4fc	                bne LC4FC
1008	.c505		38		sec		                sec
1009	.c506		20 0a c5	jsr $c50a	                jsr LC50A
1010	.c509		e8		inx		                inx
1011	.c50a						LC50A:
1012	.c50a		bd 10 03	lda $0310,x	                lda $0310,x
1013	.c50d		fd 0c 03	sbc $030c,x	                sbc $030C,x
1014	.c510		9d 10 03	sta $0310,x	                sta $0310,x
1015	.c513		60		rts		                rts

1017							;-------------------------------------------------------------------------
1018							;
1019							; VDU 14 (&0E) Page mode on [MasRef E.3-6]
1020							;
1021	.c514						vdu14EntryPoint:
1022	.c514		9c 69 02	stz $0269	                stz pagedModeCounter
1023	.c517		a9 91		lda #$91	                lda #$91

1025							;-------------------------------------------------------------------------
1026							;
1027							; VDU 21 (&15) Disable VDU driver [MasRef E.3-11]
1028							;
1029	.c519						vdu21EntryPoint:
1030	.c519		49 95		eor #$95	                eor #$95
1031	.c51b						LC51B:
1032	.c51b		04 d0		tsb $d0		                tsb STATE
1033	.c51d		60		rts		                rts

1035							;-------------------------------------------------------------------------
1036							;
1037							; VDU 4 (&04) Print at text cursor [MasRef E.3-2]
1038							;
1039	.c51e						vdu4EntryPoint:
1040	.c51e		ad 61 03	lda $0361	                lda $0361
1041	.c521		f0 09		beq $c52c	                beq LC52C
1042	.c523		20 4e cf	jsr $cf4e	                jsr showCursor
1043	.c526		a9 2b		lda #$2b	                lda #$2B

1045							                ; fall through to vdu15EntryPoint

1047							;-------------------------------------------------------------------------
1048							;
1049							; VDU 15 (&0F) Page mode off [MasRef E.3-6]
1050							;
1051	.c528						vdu15EntryPoint:
1052	.c528		49 0b		eor #$0b	                eor #$0B
1053	.c52a		14 d0		trb $d0		                trb STATE
1054	.c52c						LC52C:
1055	.c52c		60		rts		                rts

1057							;-------------------------------------------------------------------------
1058							;
1059							; VDU 5 (&05) Print text at graphics cursor [MasRef E.3-3]
1060							;
1061	.c52d						vdu5EntryPoint:
1062	.c52d		ad 61 03	lda $0361	                lda $0361
1063	.c530		f0 fa		beq $c52c	                beq LC52C
1064	.c532		a9 20		lda #$20	                lda #$20
1065	.c534		20 51 cf	jsr $cf51	                jsr setCRTCRegister10
1066	.c537		80 e2		bra $c51b	                bra LC51B

1068							;-------------------------------------------------------------------------
1069							;
1070							; VDU 17 (&11) Define text colour [MasRef E.3-7]
1071							;
1072	.c539						vdu17EntryPoint:
1073	.c539		a0 00		ldy #$00	                ldy #$00
1074	.c53b		ad 23 03	lda $0323	                lda $0323
1075	.c53e		10 01		bpl $c541	                bpl LC541
1076	.c540		c8		iny		                iny
1077	.c541						LC541:
1078	.c541		2d 60 03	and $0360	                and $0360
1079	.c544		85 da		sta $da		                sta $DA
1080	.c546		ad 60 03	lda $0360	                lda $0360
1081	.c549		f0 18		beq $c563	                beq LC563
1082	.c54b		29 07		and #$07	                and #$07
1083	.c54d		18		clc		                clc
1084	.c54e		65 da		adc $da		                adc $DA
1085	.c550		aa		tax		                tax
1086	.c551		bd 49 e1	lda $e149,x	                lda solidColoursTable-1,x
1087	.c554		99 57 03	sta $0357,y	                sta $0357,y
1088	.c557		ad 57 03	lda $0357	                lda $0357
1089	.c55a		49 ff		eor #$ff	                eor #$FF
1090	.c55c		85 d3		sta $d3		                sta ZEOR
1091	.c55e		4d 58 03	eor $0358	                eor $0358
1092	.c561		85 d2		sta $d2		                sta ZORA
1093	.c563						LC563:
1094	.c563		60		rts		                rts

1096							;-------------------------------------------------------------------------
1097							;
1098							; VDU 18 (&12) Define graphics colour [MasRef E.3-7]
1099							;
1100	.c564						vdu18EntryPoint:
1101	.c564		a0 00		ldy #$00	                ldy #$00                    ;assume setting foreground
1102	.c566		ad 23 03	lda $0323	                lda vduv.queueEnd-1         ;get colour
1103	.c569		10 01		bpl $c56c	                bpl +                     ;taken if setting foreground
1104	.c56b		c8		iny		                iny                       ;setting background
1105	.c56c						+
1106	.c56c		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne
1107	.c56f		99 6d 03	sta $036d,y	                sta vduv.foregroundGraphicsColour,y
1108	.c572		ad 22 03	lda $0322	                lda vduv.queueEnd-2          ;get GCOL mode
1109	.c575		99 5b 03	sta $035b,y	                sta vduv.foregroundGCOLMode,y
1110	.c578		29 f0		and #$f0	                and #$F0                     ;non-zero if ECF
1111	.c57a		99 6a 03	sta $036a,y	                sta vduv.isForegroundECF,y
1112	.c57d						initializeCurrentECFPatterns:
1113	.c57d		ad 5b 03	lda $035b	                lda vduv.foregroundGCOLMode
1114	.c580		ae 6d 03	ldx $036d	                ldx vduv.foregroundGraphicsColour
1115	.c583		a0 00		ldy #$00	                ldy #andy.fgECFPattern-andy.currentECFPatterns
1116	.c585		20 90 c5	jsr $c590	                jsr initializeCurrentECFPattern
1117	.c588		ad 5c 03	lda $035c	                lda vduv.backgroundGCOLMode
1118	.c58b		ae 6e 03	ldx $036e	                ldx vduv.backgroundGraphicsColour
1119	.c58e		a0 08		ldy #$08	                ldy #andy.bgECFPattern-andy.currentECFPatterns
1120	.c590						initializeCurrentECFPattern:
1121	.c590		29 f0		and #$f0	                and #$F0                     ;GCOL mode ECF bits
1122	.c592		d0 18		bne $c5ac	                bne initializeECFPatternFromPattern

1124	.c594						initializeECFPatternFromColour:
1125	.c594		86 da		stx $da		                stx ZTEMP+0                  ;colour low bits
1126	.c596		ad 60 03	lda $0360	                lda vduv.numberOfLogicalColoursMinusOne
1127	.c599		29 07		and #$07	                and #$07
1128	.c59b		18		clc		                clc
1129	.c59c		65 da		adc $da		                adc ZTEMP+0
1130	.c59e		aa		tax		                tax
1131							                ; use solid colour as ECF "pattern".
1132	.c59f		bd 49 e1	lda $e149,x	                lda solidColoursTable-1,x
1133	.c5a2		a2 07		ldx #$07	                ldx #$07
1134	.c5a4						-
1135	.c5a4		99 20 88	sta $8820,y	                sta andy.fgECFPattern,y
1136	.c5a7		c8		iny		                iny
1137	.c5a8		ca		dex		                dex
1138	.c5a9		10 f9		bpl $c5a4	                bpl -
1139	.c5ab		60		rts		                rts

1141	.c5ac						initializeECFPatternFromPattern:
1142	.c5ac		4a		lsr a		                lsr a                        ;(index+1)*8
1143	.c5ad		aa		tax		                tax
1144	.c5ae		a9 07		lda #$07	                lda #$07
1145	.c5b0		85 da		sta $da		                sta ZTEMP+0
1146	.c5b2						-
1147	.c5b2		bd f8 87	lda $87f8,x	                lda andy.ecfPatterns-8,x     ;-8 due to index+1 above
1148	.c5b5		99 20 88	sta $8820,y	                sta andy.fgECFPattern,y
1149	.c5b8		e8		inx		                inx
1150	.c5b9		c8		iny		                iny
1151	.c5ba		c6 da		dec $da		                dec ZTEMP+0
1152	.c5bc		10 f4		bpl $c5b2	                bpl -
1153	.c5be		60		rts		                rts

1155							;-------------------------------------------------------------------------
1156							;
1157							; VDU 20 (&14) Restore default logical colours [MasRef E.3-10]
1158							;
1159	.c5bf						setBackgroundTextColourForTeletext:
1160	.c5bf		a9 20		lda #$20	                lda #' '
1161	.c5c1		8d 58 03	sta $0358	                sta vduv.backgroundTextColour
1162	.c5c4		60		rts		                rts

1164	.c5c5						vdu20EntryPoint:
1165	.c5c5		a2 05		ldx #$05	                ldx #$05
1166	.c5c7						-
1167	.c5c7		9e 57 03	stz $0357,x	                stz vduv.foregroundTextColour,x
1168	.c5ca		ca		dex		                dex
1169	.c5cb		10 fa		bpl $c5c7	                bpl -
1170	.c5cd		9c 6e 03	stz $036e	                stz vduv.backgroundGraphicsColour
1171	.c5d0		9c 6b 03	stz $036b	                stz vduv.isBackgroundECF
1172	.c5d3		a9 ff		lda #$ff	                lda #%11111111
1173	.c5d5		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
1174	.c5d8		f0 e5		beq $c5bf	                beq setBackgroundTextColourForTeletext
1175	.c5da		e0 0f		cpx #$0f	                cpx #$0F
1176	.c5dc		d0 02		bne $c5e0	                bne +                        ;taken unless MODE 2
1177	.c5de		a9 3f		lda #$3f	                lda #%00111111               ;MODE 2 default foreground colour is 7
1178	.c5e0						+
1179	.c5e0		8d 57 03	sta $0357	                sta vduv.foregroundTextColour
1180	.c5e3		49 ff		eor #$ff	                eor #$FF
1181	.c5e5		85 d2		sta $d2		                sta ZORA
1182	.c5e7		85 d3		sta $d3		                sta ZEOR
1183	.c5e9		8a		txa		                txa
1184	.c5ea		29 07		and #$07	                and #$07
1185	.c5ec		8d 6d 03	sta $036d	                sta vduv.foregroundGraphicsColour
1186	.c5ef		9c 6a 03	stz $036a	                stz vduv.isForegroundECF
1187	.c5f2		da		phx		                phx                          ;save numberOfLogicalColoursMinusOne
1188	.c5f3		20 7d c5	jsr $c57d	                jsr initializeCurrentECFPatterns
1189	.c5f6		fa		plx		                plx                          ;restore numberOfLogicalColoursMinusOne
1190	.c5f7		8e 1f 03	stx $031f	                stx vduv.queueEnd-5          ;Prepare VDU19,<max logical colour>
1191	.c5fa		e0 03		cpx #$03	                cpx #$03
1192	.c5fc		f0 11		beq $c60f	                beq reset4Colours            ;taken if MODE 1/5
1193	.c5fe		90 20		bcc $c620	                bcc reset2Colours            ;taken if MODE 0/3/4/6
1194	.c600						reset16Colours:
1195	.c600		8e 20 03	stx $0320	                stx vduv.queueEnd-4          ;start with VDU19,15,15,_,_,_
1196	.c603						-
1197	.c603		20 2d c6	jsr $c62d	                jsr vdu19EntryPoint
1198	.c606		ce 20 03	dec $0320	                dec vduv.queueEnd-4
1199	.c609		ce 1f 03	dec $031f	                dec vduv.queueEnd-5
1200	.c60c		10 f5		bpl $c603	                bpl -
1201	.c60e		60		rts		                rts

1203	.c60f						reset4Colours:
1204	.c60f		a2 07		ldx #$07	                ldx #$07
1205	.c611		8e 20 03	stx $0320	                stx vduv.queueEnd-4          ;start with VDU19,3,7,_,_,_
1206	.c614						-
1207	.c614		20 2d c6	jsr $c62d	                jsr vdu19EntryPoint          ;2,3, then 1,1, then 0,0
1208	.c617		4e 20 03	lsr $0320	                lsr vduv.queueEnd-4
1209	.c61a		ce 1f 03	dec $031f	                dec vduv.queueEnd-5
1210	.c61d		10 f5		bpl $c614	                bpl -
1211	.c61f		60		rts		                rts

1213	.c620						reset2Colours:
1214	.c620		a2 07		ldx #$07	                ldx #$07
1215	.c622		20 2a c6	jsr $c62a	                jsr +                        ;VDU19,1,7,_,_,_
1216	.c625		a2 00		ldx #$00	                ldx #$00
1217	.c627		9c 1f 03	stz $031f	                stz vduv.queueEnd-5          ;VDU19,0,0,_,_,_
1218	.c62a						+
1219	.c62a		8e 20 03	stx $0320	                stx vduv.queueEnd-4          ;VDU19,N,X,_,_,_

1221							                ; fall through to VDU19

1223							;-------------------------------------------------------------------------
1224							;
1225							; VDU 19 (&13) Define logical colour [MasRef E.3-9]
1226							;
1227	.c62d						vdu19EntryPoint:
1228	.c62d		08		php		                php
1229	.c62e		78		sei		                sei
1230	.c62f		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get logical colour
1231	.c632		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne ;apply logical colour limit
1232	.c635		aa		tax		                tax                        ;X = clamped logical colour
1233	.c636		ad 20 03	lda $0320	                lda vduv.queueEnd-4        ;get physical colour
1234	.c639						LC639:
1235	.c639		29 0f		and #$0f	                and #$0F                     ;apply physical colour limit
1236	.c63b		9d 6f 03	sta $036f,x	                sta vduv.currentPalette,x    ;update palette
1237	.c63e		a8		tay		                tay                          ;Y = physical colour
1238	.c63f		ad 60 03	lda $0360	                lda vduv.numberOfLogicalColoursMinusOne
1239	.c642		85 fa		sta $fa		                sta SEIWKA
1240	.c644		c9 03		cmp #$03	                cmp #$03 ;Z=1 C=1 if 4 colour; Z=0 C=1 if 16 colour; Z=0 C=0 if 2 colour
1241	.c646		08		php		                php      ;save flags
1242	.c647		8a		txa		                txa                          ;A = logical colour

1244							                ;put the logical colour value in the top 1, 2 or 4
1245							                ;bits of SEIWKA, depending on the colour depth.
1246							                ;
1247							                ; 2 colours: turn %0000000a into %a0000000
1248							                ; 4 colours: turn %000000ab into %ab000000
1249							                ;16 colours: turn %0000abcd into %abcd0000
1250	.c648						-
1251	.c648		4a		lsr a		                lsr a
1252	.c649		66 fa		ror $fa		                ror SEIWKA
1253	.c64b		b0 fb		bcs $c648	                bcs -
1254	.c64d		06 fa		asl $fa		                asl SEIWKA

1256	.c64f		98		tya		                tya                          ;A = physical colour
1257	.c650		05 fa		ora $fa		                ora SEIWKA                   ;mix in logical colour
1258	.c652		aa		tax		                tax                          ;X = VPALETTE value
1259	.c653		a0 f0		ldy #$f0	                ldy #$F0 ;counts up to zero - counter for setting
1260							                         ;multiple logical colours [AUG p380]
1261	.c655						LC655:
1262	.c655		28		plp		                plp                          ;restore flags
1263	.c656		08		php		                php                          ;save flags
1264	.c657		d0 03		bne $c65c	                bne +                     ;taken if 2 colour/16 colour
1265	.c659		20 6f c6	jsr $c66f	                jsr fixUpVPALETTEFor4Colours
1266	.c65c						+
1267	.c65c		20 50 f0	jsr $f050	                jsr writeVPALETTE
1268	.c65f		18		clc		                clc
1269	.c660		98		tya		                tya
1270	.c661		6d 60 03	adc $0360	                adc vduv.numberOfLogicalColoursMinusOne
1271	.c664		a8		tay		                tay
1272	.c665		8a		txa		                txa
1273	.c666		69 10		adc #$10	                adc #$10                     ;next logical colour
1274	.c668		aa		tax		                tax
1275	.c669		c8		iny		                iny                          ;Y+=numberOfLogicalColours
1276	.c66a		d0 e9		bne $c655	                bne LC655                    ;all logical colours set once zero
1277	.c66c		28		plp		                plp
1278	.c66d		28		plp		                plp
1279	.c66e		60		rts		                rts

1281	.c66f						fixUpVPALETTEFor4Colours:
1282	.c66f		2a		rol a		                rol a                        ;A BCDabcd1
1283	.c670		85 da		sta $da		                sta ZTEMP+0                  ;  BCDabcd1
1284	.c672		2a		rol a		                rol a                        ;B CDabcd1A
1285	.c673		2a		rol a		                rol a                        ;C Dabcd1AB
1286	.c674		08		php		                php                          ;C
1287	.c675		26 da		rol $da		                rol ZTEMP+0                  ;B CDabcd1C
1288	.c677		6a		ror a		                ror a                        ;B BDabcd1A
1289	.c678		28		plp		                plp                          ;C BDabcd1A
1290	.c679		6a		ror a		                ror a                        ;A CBDabcd1
1291	.c67a		6a		ror a		                ror a                        ;1 ACBDabcd
1292	.c67b		60		rts		                rts                          ;

1294							;-------------------------------------------------------------------------
1295							;
1296							; VDU 23 (&17) Various functions [MasRef E.3-12]
1297							;
1298	.c67c						vdu23EntryPoint:
1299	.c67c		ad 1b 03	lda $031b	                lda vduv.queueEnd-9           ;get VDU 23 code
1300	.c67f		c9 20		cmp #$20	                cmp #$20
1301	.c681		90 0e		bcc $c691	                bcc LC691         ;branch taken if <32 - i.e., special

1303							                ; copy the 8 bytes of character definition to the
1304							                ; appropriate place.
1305	.c683		20 2a e2	jsr $e22a	                jsr getSoftCharacterDefinitionAddress
1306	.c686		a0 07		ldy #$07	                ldy #$07
1307	.c688						LC688:
1308	.c688		b9 1c 03	lda $031c,y	                lda vduv.queueEnd-8,y
1309	.c68b		91 de		sta ($de),y	                sta ($DE),y
1310	.c68d		88		dey		                dey
1311	.c68e		10 f8		bpl $c688	                bpl LC688
1312	.c690		60		rts		                rts

1314	.c691						LC691:
1315	.c691		0a		asl a		                asl a
1316	.c692		aa		tax		                tax
1317	.c693		4a		lsr a		                lsr a
1318	.c694		c9 11		cmp #$11	                cmp #$11
1319	.c696		b0 0f		bcs $c6a7	                bcs callVDUV    ;call with C=1 - invalid code [MasRef
1320							                                ;E.3-19]
1321	.c698		7c 67 e0	jmp ($e067,x)	                jmp (vdu23EntryPointTable,x)

1323							;-------------------------------------------------------------------------
1324							;
1325							; VDU 25 (&19) PLOT commands [MasRef E.3-21]
1326							;
1327	.c69b						vdu25EntryPoint:
1328	.c69b		ae 61 03	ldx $0361	                ldx vduv.pixelsPerByteMinusOne
1329	.c69e		f0 03		beq $c6a3	                beq callVDUVForPLOT          ;non-graphics PLOT
1330	.c6a0		4c 44 d1	jmp $d144	                jmp handlePLOT

1332							;-------------------------------------------------------------------------
1333							;
1334							; Call VDUV for a PLOT call, either to handle non-graphics PLOT
1335							; [MasRef E.3-21] or PLOT 240-255 [MasRef E.3-34].
1336							;
1337	.c6a3						callVDUVForPLOT:
1338	.c6a3		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT code
1339	.c6a6		18		clc		                clc ;call with C=0 - non-graphics PLOT [MasRef E.3-21]

1341							;-------------------------------------------------------------------------
1342							;
1343							; Call VDUV.
1344							;
1345	.c6a7						callVDUV:
1346							                .if version<350
1348							                .else
1349	.c6a7		4c e1 e2	jmp $e2e1	                jmp LE2F3
1350							                .endif

1352							;-------------------------------------------------------------------------
1353							;
1354							; VDU 26 (&1A) Restore default windows [MasRef E.3-34]
1355							;
1356	.c6aa						vdu26EntryPoint:
1357	.c6aa		a2 2c		ldx #$2c	                ldx #VDUVariables.workspace._2C
1358	.c6ac						-
1359	.c6ac		9e 00 03	stz $0300,x	                stz vduv,x                    ;reset workspace
1360	.c6af		ca		dex		                dex
1361	.c6b0		10 fa		bpl $c6ac	                bpl -

1363	.c6b2		20 a0 e2	jsr $e2a0	                jsr getDefaultBoundsForCurrentScreenMODE
1364	.c6b5		8e 0a 03	stx $030a	                stx vduv.textWindowRight
1365	.c6b8		8c 09 03	sty $0309	                sty vduv.textWindowBottom

1367	.c6bb		8a		txa		                txa
1368	.c6bc		20 80 c7	jsr $c780	                jsr setTextWindowWidthInBytes

1370							                ; Set up the VDU queue as if VDU 24,0;0;1279;1023;,
1371							                ; then call the VDU 24 entry point.

1373							                ; 1c - ll - $00
1374							                ; 1d - lh - $00
1375							                ; 1e - tl - $00
1376							                ; 1f - th - $00
1377							                ; 20 - rl - $ff
1378							                ; 21 - rh - $04
1379							                ; 22 - tl - $ff
1380							                ; 23 - th - $03

1382	.c6bf		a0 03		ldy #$03	                ldy #$03
1383	.c6c1		8c 23 03	sty $0323	                sty $0323
1384	.c6c4		c8		iny		                iny
1385	.c6c5		8c 21 03	sty $0321	                sty $0321
1386	.c6c8		ce 22 03	dec $0322	                dec $0322
1387	.c6cb		ce 20 03	dec $0320	                dec $0320
1388	.c6ce		20 1f c7	jsr $c71f	                jsr vdu24EntryPoint

1390	.c6d1		a9 08		lda #$08	                lda #STATE.isTextWindow
1391	.c6d3		14 d0		trb $d0		                trb STATE                    ;reset isTextWindow

1393	.c6d5		4c 7c c4	jmp $c47c	                jmp vdu30EntryPoint          ;reset text cursor

1395							;-------------------------------------------------------------------------
1396							;
1397							; Update CRTC cursor address to reflect text cursor position.
1398							;
1399	.c6d8						updateCRTCTextCursor:
1400	.c6d8		20 f8 cc	jsr $ccf8	                jsr updateZMEMTWithTextCursorPosition
1401	.c6db		80 10		bra $c6ed	                bra updateCRTCCursorAddress

1403							;-------------------------------------------------------------------------

1405	.c6dd						setCRTCCursorAddress:
1406	.c6dd		8e 4a 03	stx $034a	                stx vduv.textCursorCRTCAddress+0
1407	.c6e0		8d 4b 03	sta $034b	                sta vduv.textCursorCRTCAddress+1
1408	.c6e3		10 04		bpl $c6e9	                bpl +
1409	.c6e5		38		sec		                sec
1410	.c6e6		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte
1411	.c6e9						+
1412	.c6e9		86 d8		stx $d8		                stx ZMEMT+0
1413	.c6eb		85 d9		sta $d9		                sta ZMEMT+1

1415							;-------------------------------------------------------------------------
1416							;
1417							;
1418	.c6ed						updateCRTCCursorAddress:
1419	.c6ed		ae 4a 03	ldx $034a	                ldx vduv.textCursorCRTCAddress+0
1420	.c6f0		ad 4b 03	lda $034b	                lda vduv.textCursorCRTCAddress+1
1421	.c6f3		a0 0e		ldy #$0e	                ldy #$0E

1423							;-------------------------------------------------------------------------
1424							;
1425							; Set CRTC address - cursor, or screen start.
1426							;
1427							; entry:
1428							;
1429							; A (msb), X (msb) = 6502 address to set
1430							;
1431							; Y = first CRTC register to set
1432							;
1433	.c6f5						setCRTCAddress:
1434	.c6f5		48		pha		                pha                          ;save screen address MSB
1435	.c6f6		ad 55 03	lda $0355	                lda vduv.currentScreenMODE
1436	.c6f9		c9 07		cmp #$07	                cmp #$07
1437	.c6fb		68		pla		                pla                        ;restore screen address MSB
1438	.c6fc		b0 0f		bcs $c70d	                bcs adjustAddressForMODE7
1439	.c6fe		86 da		stx $da		                stx ZTEMP+0
1440	.c700		4a		lsr a		                lsr a
1441	.c701		66 da		ror $da		                ror ZTEMP+0                  ;/2
1442	.c703		4a		lsr a		                lsr a
1443	.c704		66 da		ror $da		                ror ZTEMP+0                  ;/4
1444	.c706		4a		lsr a		                lsr a
1445	.c707		66 da		ror $da		                ror ZTEMP+0                  ;/8
1446	.c709		a6 da		ldx $da		                ldx ZTEMP+0
1447	.c70b		80 04		bra $c711	                bra setCRTCAddressRegisters

1449	.c70d						adjustAddressForMODE7:
1450							                ; C=1
1451	.c70d		e9 74		sbc #$74	                sbc #$74                 ;adjust for Mode 7 addressing
1452	.c70f		49 20		eor #$20	                eor #$20                 ;adjust for Mode 7 addressing
1453	.c711						setCRTCAddressRegisters:
1454	.c711		8c 00 fe	sty $fe00	                sty CRTC+0
1455	.c714		8d 01 fe	sta $fe01	                sta CRTC+1
1456	.c717		c8		iny		                iny
1457	.c718		8c 00 fe	sty $fe00	                sty CRTC+0
1458	.c71b		8e 01 fe	stx $fe01	                stx CRTC+1
1459	.c71e		60		rts		                rts

1461							;-------------------------------------------------------------------------
1462							;
1463							; VDU 24 (&18) Define graphics window [MasRef E.3-21]
1464							;
1465							; VDU queue:
1466							;
1467							; -8 = <left
1468							; -7 = >left
1469							; -6 = <bottom
1470							; -5 = >bottom
1471							; -4 = <right
1472							; -3 = >right
1473							; -2 = <top
1474							; -1 = >top
1475							;
1476	.c71f						vdu24EntryPoint:
1477	.c71f		20 79 c7	jsr $c779	                jsr LC779

1479	.c722		a2 02		ldx #$02	                ldx #2
1480	.c724						-
1481	.c724		38		sec		                sec

1483							                ; <height when X=2, then <width when X=0
1484	.c725		bd 20 03	lda $0320,x	                lda vduv.queueEnd-4+0,x
1485	.c728		fd 1c 03	sbc $031c,x	                sbc vduv.queueEnd-8+0,x
1486	.c72b		9d 2c 03	sta $032c,x	                sta vduv.workspace._2C+0,x

1488							                ; >height when X=2, then >width when X=0
1489	.c72e		bd 21 03	lda $0321,x	                lda vduv.queueEnd-4+1,x
1490	.c731		fd 1d 03	sbc $031d,x	                sbc vduv.queueEnd-8+1,x
1491	.c734		9d 2d 03	sta $032d,x	                sta vduv.workspace._2C+1,x

1493	.c737		ca		dex		                dex
1494	.c738		ca		dex		                dex
1495	.c739		10 e9		bpl $c724	                bpl -

1497	.c73b		0d 2f 03	ora $032f	                ora vduv.workspace._2C+3     ;A=>width|>height
1498	.c73e		30 39		bmi $c779	                bmi LC779 ;taken if either dimension negative - window invalid
1499	.c740		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4 ;left bottom
1500	.c742		20 dc d1	jsr $d1dc	                jsr eigabsEntryPoint         ;convert to pixels
1501	.c745		a2 1c		ldx #$1c	                ldx #VDUVariables.queueEnd-8 ;right top
1502	.c747		20 dc d1	jsr $d1dc	                jsr eigabsEntryPoint         ;convert to pixels
1503	.c74a		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;>bottom
1504	.c74d		0d 1d 03	ora $031d	                ora vduv.queueEnd-7          ;>left
1505	.c750		30 27		bmi $c779	                bmi LC779 ;taken if either bottom or left negative - window invalid
1506	.c752		ad 23 03	lda $0323	                lda vduv.queueEnd-1          ;>top
1507	.c755		d0 22		bne $c779	                bne LC779          ;taken if top>=256 - window invalid
1508	.c757		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
1509	.c75a		ad 21 03	lda $0321	                lda vduv.queueEnd-3          ;>right
1510	.c75d		85 da		sta $da		                sta ZTEMP+0
1511	.c75f		ad 20 03	lda $0320	                lda vduv.queueEnd-4          ;<right
1512	.c762		46 da		lsr $da		                lsr ZTEMP+0                  ;>(right/2)
1513	.c764		6a		ror a		                ror a                        ;<(right/2)
1514	.c765		46 da		lsr $da		                lsr ZTEMP+0                  ;>(right/4)

1516							                ; 639>>2=159 - so any valid pixel X in any mode will
1517							                ; have an MSB of 0 after being shifted right 2.
1518	.c767		d0 10		bne $c779	                bne LC779 ;taken if right edge definitely off screen - window invalid
1519	.c769		6a		ror a		                ror a     ;<(right/4)
1520	.c76a		4a		lsr a		                lsr a     ;<(right/8)
1521	.c76b		dd 07 e1	cmp $e107,x	                cmp modeMaxColumn,x
1522	.c76e		f0 02		beq $c772	                beq LC772                    ;taken if right edge just on screen
1523	.c770		10 07		bpl $c779	                bpl LC779 ;taken if right edge off screen - window definitely invalid
1524	.c772						LC772:
1525	.c772		a0 00		ldy #$00	                ldy #VDUVariables.graphicsWindowPixelsLeft
1526	.c774		a2 1c		ldx #$1c	                ldx #VDUVariables.queueEnd-8
1527	.c776		20 02 c9	jsr $c902	                jsr copyEightBytesWithinVDUVariables
1528	.c779						LC779:
1529	.c779		a2 10		ldx #$10	                ldx #VDUVariables.graphicsCursorPositionX
1530	.c77b		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
1531	.c77d		4c b8 e2	jmp $e2b8	                jmp exchangeFourVDUBytes

1533							;-------------------------------------------------------------------------
1534							;
1535							; Call getBytesPerInclusiveTextRow, and store the result in the
1536							; textWindowWidthInBytes VDU variable.
1537							;
1538	.c780						setTextWindowWidthInBytes:
1539	.c780		20 39 c9	jsr $c939	                jsr getBytesPerInclusiveTextRow
1540	.c783		8d 4c 03	sta $034c	                sta vduv.textWindowWidthInBytes+0
1541	.c786		8e 4d 03	stx $034d	                stx vduv.textWindowWidthInBytes+1
1542	.c789		60		rts		                rts

1544							;-------------------------------------------------------------------------
1545							;
1546							; VDU 29 (&1D) Define graphics origin [MasRef E.3-35]
1547							;
1548	.c78a						vdu29EntryPoint:
1549	.c78a		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
1550	.c78c		a0 0c		ldy #$0c	                ldy #VDUVariables.graphicsWindowOriginX
1551	.c78e		20 1c c9	jsr $c91c	                jsr copyFourBytesWithinVDUVariables
1552	.c791		4c df c4	jmp $c4df	                jmp LC4DF

1554							;-------------------------------------------------------------------------
1555							;
1556							; VDU 22 (&16) Select screen mode [MasRef E.3-11]
1557							;
1558	.c794						vdu22EntryPoint:
1559	.c794		ad 23 03	lda $0323	                lda vduv.queueEnd-1          ;get MODE number
1560	.c797		80 23		bra $c7bc	                bra setMODE

1562							;-------------------------------------------------------------------------
1563							;
1564	.c799						setStartupMODE:
1565							                .if version==350
1567							                .endif
1568	.c799		85 da		sta $da		                sta ZTEMP+0                  ;save MODE
1569	.c79b		a5 f4		lda $f4		                lda $F4
1570	.c79d		48		pha		                pha
1571	.c79e		09 80		ora #$80	                ora #$80                     ;page in ANDY
1572	.c7a0		20 9f e5	jsr $e59f	                jsr selectROMA
1573	.c7a3		20 aa c7	jsr $c7aa	                jsr +
1574	.c7a6		68		pla		                pla
1575	.c7a7		4c 9f e5	jmp $e59f	                jmp selectROMA               ;restore old ROM

1577	.c7aa						+
1578							                ; TODO but what of the reserved byte here?
1579	.c7aa		a2 7f		ldx #$7f	                ldx #size(VDUVariables)-1
1580	.c7ac		64 d0		stz $d0		                stz STATE
1581	.c7ae		ad 66 03	lda $0366	                lda vduv.cursorFlags
1582	.c7b1						-
1583	.c7b1		9e ff 02	stz $02ff,x	                stz vduv-1,x
1584	.c7b4		ca		dex		                dex
1585	.c7b5		d0 fa		bne $c7b1	                bne -
1586	.c7b7		8d 66 03	sta $0366	                sta vduv.cursorFlags
1587	.c7ba		a5 da		lda $da		                lda ZTEMP                    ;restore MODE

1589							                ; fall through to setMODE

1591							;-------------------------------------------------------------------------
1592							;
1593							;
1594							;
1595	.c7bc						setMODE:
1596	.c7bc		9c 8a 02	stz $028a	                stz vduDriverMemory
1597	.c7bf		9c 8b 02	stz $028b	                stz displayMemory
1598	.c7c2		a8		tay		                tay                          ;Y=mode
1599	.c7c3		30 10		bmi $c7d5	                bmi setShadowMODE
1600	.c7c5		ae 7f 02	ldx $027f	                ldx shadowRAMState
1601	.c7c8		f0 0b		beq $c7d5	                beq setShadowMODE
1602	.c7ca		a9 10		lda #$10	                lda #STATE.isShadowMode
1603	.c7cc		14 d0		trb $d0		                trb STATE
1604	.c7ce		a9 03		lda #$03	                lda #ACCCON.D|ACCCON.E
1605	.c7d0		1c 34 fe	trb $fe34	                trb ACCCON ;display main RAM, VDU code accesses main RAM
1606	.c7d3		80 09		bra $c7de	                bra +

1608	.c7d5						setShadowMODE:
1609	.c7d5		a9 10		lda #$10	                lda #STATE.isShadowMode
1610	.c7d7		04 d0		tsb $d0		                tsb STATE
1611	.c7d9		a9 03		lda #$03	                lda #ACCCON.D|ACCCON.E
1612	.c7db		0c 34 fe	tsb $fe34	                tsb ACCCON ;display shadow RAM, VDU code accesses shadow RAM
1613	.c7de						+
1614	.c7de		98		tya		                tya                          ;A=mode
1615	.c7df		29 07		and #$07	                and #$07                     ;get MODE 0-7
1616	.c7e1		aa		tax		                tax                          ;X=MODE 0-7
1617	.c7e2		8e 55 03	stx $0355	                stx vduv.currentScreenMODE
1618	.c7e5		bd 3a e1	lda $e13a,x	                lda numberOfLogicalColoursMinusOneForMODE,x
1619	.c7e8		8d 60 03	sta $0360	                sta vduv.numberOfLogicalColoursMinusOne
1620	.c7eb		bd 17 e1	lda $e117,x	                lda bytesPerCharacterForMODE,x
1621	.c7ee		8d 4f 03	sta $034f	                sta vduv.bytesPerCharacter
1622	.c7f1		bd 60 e1	lda $e160,x	                lda pixelsPerByteMinusOneForMODE,x
1623	.c7f4		8d 61 03	sta $0361	                sta vduv.pixelsPerByteMinusOne
1624	.c7f7		d0 02		bne $c7fb	                bne +                        ;taken if graphics mode
1625	.c7f9		a9 07		lda #$07	                lda #$07                     ;assume 8 px/byte for non-graphics modes
1626	.c7fb						+
1627	.c7fb		0a		asl a		                asl a            ;convert to pixelMasks index for rightmost pixel
1628	.c7fc		a8		tay		                tay
1629	.c7fd		b9 2c e1	lda $e12c,y	                lda pixelMasks-1,y
1630	.c800		8d 63 03	sta $0363	                sta vduv.colourMaskRight
1631	.c803						-
1632	.c803		0a		asl a		                asl a
1633	.c804		10 fd		bpl $c803	                bpl -   ;keep shifting until leftmost pixel mask found
1634	.c806		8d 62 03	sta $0362	                sta vduv.colourMaskLeft
1635	.c809		bc 66 e1	ldy $e166,x	                ldy screenMODEGroupForMODE,x
1636	.c80c		8c 56 03	sty $0356	                sty vduv.currentScreenMODEGroup
1637	.c80f		b9 72 e1	lda $e172,y	                lda latchBit4ForScreenMODEGroup,y
1638	.c812		08		php		                php
1639	.c813		78		sei		                sei
1640	.c814		8d 40 fe	sta $fe40	                sta systemVIA.orb
1641	.c817		b9 6e e1	lda $e16e,y	                lda latchBit5ForScreenMODEGroup,y
1642	.c81a		8d 40 fe	sta $fe40	                sta systemVIA.orb
1643	.c81d		28		plp		                plp
1644	.c81e		b9 77 e1	lda $e177,y	                lda screenSizeHighByteForScreenMODEGroup,y
1645	.c821		8d 54 03	sta $0354	                sta vduv.screenSizeHighByte
1646	.c824		b9 7c e1	lda $e17c,y	                lda startScreenAddressHighByteForScreenMODEGroup,y
1647	.c827		8d 4e 03	sta $034e	                sta vduv.startScreenAddressHighByte
1648	.c82a		a9 ee		lda #$ee	                lda #STATE.isVDU21|STATE.isCursorEditing|STATE.isVDU5|STATE.isTextWindow|STATE.isPagedScrolling|STATE.isScrollingDisabled
1649	.c82c		14 d0		trb $d0		                trb STATE
1650	.c82e		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
1651	.c831		bd 0f e1	lda $e10f,x	                lda vcontrolForScreenMODE,x
1652	.c834		20 3f f0	jsr $f03f	                jsr setVCONTROL
1653	.c837		08		php		                php
1654	.c838		78		sei		                sei
1655	.c839		be 81 e1	ldx $e181,y	                ldx crtcRegisterLastIndexForScreenMODEGroup,y
1656	.c83c		a0 0b		ldy #$0b	                ldy #$0B
1657	.c83e						-
1658	.c83e		bd 86 e1	lda $e186,x	                lda crtcRegisterValues,x
1659	.c841		20 ff ce	jsr $ceff	                jsr setCRTCRegister
1660	.c844		ca		dex		                dex
1661	.c845		88		dey		                dey
1662	.c846		10 f6		bpl $c83e	                bpl -
1663	.c848		28		plp		                plp
1664	.c849		20 c5 c5	jsr $c5c5	                jsr vdu20EntryPoint
1665	.c84c		20 6b cf	jsr $cf6b	                jsr vdu23_11_EntryPoint
1666	.c84f		a9 aa		lda #$aa	                lda #%10101010
1667	.c851		8d 67 03	sta $0367	                sta vduv.dotPattern
1668	.c854		8d 68 03	sta $0368	                sta vduv.dotPatternState
1669	.c857		20 aa c6	jsr $c6aa	                jsr vdu26EntryPoint
1670	.c85a		ad 4c 03	lda $034c	                lda vduv.textWindowWidthInBytes+0
1671	.c85d		ae 4d 03	ldx $034d	                ldx vduv.textWindowWidthInBytes+1
1672	.c860		8d 52 03	sta $0352	                sta vduv.bytesPerCharacterRow+0
1673	.c863		8e 53 03	stx $0353	                stx vduv.bytesPerCharacterRow+1

1675							                ; Do a fast hardware CLS of the whole screen
1676							                ; ------------------------------------------
1677	.c866						clsFastPath:
1678	.c866		a2 00		ldx #$00	                ldx #$00
1679	.c868		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
1680	.c86b		9c 50 03	stz $0350	                stz vduv.screenTopLeftAddress+0
1681	.c86e		8d 51 03	sta $0351	                sta vduv.screenTopLeftAddress+1
1682	.c871		20 dd c6	jsr $c6dd	                jsr setCRTCCursorAddress
1683	.c874		a0 0c		ldy #$0c	                ldy #$0C
1684	.c876		20 11 c7	jsr $c711	                jsr setCRTCAddressRegisters
1685	.c879		9c 69 02	stz $0269	                stz pagedModeCounter
1686	.c87c		38		sec		                sec
1687	.c87d		a9 80		lda #$80	                lda #$80
1688	.c87f		ed 4e 03	sbc $034e	                sbc vduv.startScreenAddressHighByte
1689	.c882		aa		tax		                tax
1690	.c883		a0 00		ldy #$00	                ldy #$00
1691	.c885		20 82 cb	jsr $cb82	                jsr clearTextMemory
1692	.c888		4c 7c c4	jmp $c47c	                jmp vdu30EntryPoint

1694	.c88b						LC88B:
1695	.c88b		20 ce c8	jsr $c8ce	                jsr LC8CF                    ; Clear paged mode counter
1696	.c88e						LC88E:
1697	.c88e		20 1f f0	jsr $f01f	                jsr osbyte76    ; Call KEYV to test Shift & Ctrl keys
1698	.c891		90 02		bcc $c895	                bcc LC895                    ; Ctrl not pressed, exit loop
1699	.c893		30 f6		bmi $c88b	                bmi LC88B                    ; Shift pressed, loop back
1700	.c895						LC895:
1701	.c895		a5 d0		lda $d0		                lda STATE
1702	.c897		49 04		eor #$04	                eor #STATE.isPagedScrolling
1703	.c899		29 46		and #$46	                and #STATE.isCursorEditing|STATE.isPagedScrolling|STATE.isScrollingDisabled;
1704	.c89b		d0 37		bne $c8d4	                bne LC8D6
1705	.c89d		20 d5 c8	jsr $c8d5	                jsr LC8D7
1706	.c8a0		b9 18 03	lda $0318,y	                lda vduv.textCursorXPosition,y
1707	.c8a3		dd 08 03	cmp $0308,x	                cmp vduv.textWindowLeft,x
1708	.c8a6		d0 29		bne $c8d1	                bne LC8D3
1709							                .if version==400||version==350
1710	.c8a8		c0 00		cpy #$00	                cpy #0
1715							                .endif
1716	.c8aa		d0 08		bne $c8b4	                bne LC8B5
1717	.c8ac		ad 0a 03	lda $030a	                lda vduv.textWindowRight
1718	.c8af		ed 08 03	sbc $0308	                sbc vduv.textWindowLeft
1719	.c8b2		80 06		bra $c8ba	                bra LC8BB

1721	.c8b4						LC8B5:
1722	.c8b4		ad 09 03	lda $0309	                lda vduv.textWindowBottom
1723	.c8b7		ed 0b 03	sbc $030b	                sbc vduv.textWindowTop
1724	.c8ba						LC8BB:
1725	.c8ba		48		pha		                pha
1726	.c8bb		4a		lsr a		                lsr a
1727	.c8bc		4a		lsr a		                lsr a
1728	.c8bd		85 da		sta $da		                sta ZTEMP+0
1729	.c8bf		38		sec		                sec
1730	.c8c0		68		pla		                pla
1731	.c8c1		e5 da		sbc $da		                sbc ZTEMP+0
1732	.c8c3		cd 69 02	cmp $0269	                cmp pagedModeCounter
1733	.c8c6		b0 09		bcs $c8d1	                bcs LC8D3
1734	.c8c8						LC8C9:
1735	.c8c8		20 1f f0	jsr $f01f	                jsr osbyte76
1736	.c8cb		38		sec		                sec
1737	.c8cc		10 fa		bpl $c8c8	                bpl LC8C9

1739	.c8ce						LC8CF:
1740	.c8ce		9c 69 02	stz $0269	                stz pagedModeCounter        ; Clear paged mode counter
1741							                .if version!=400&&version!=350
1743							                .endif
1744	.c8d1						LC8D3:
1745	.c8d1		ee 69 02	inc $0269	                inc pagedModeCounter
1746	.c8d4						LC8D6:
1747	.c8d4		60		rts		                rts

1749	.c8d5						LC8D7:
1750	.c8d5		ad 66 03	lda $0366	                lda vduv.cursorFlags
1751	.c8d8		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
1752	.c8da		4a		lsr a		                lsr a                        ;xvh
1753	.c8db		aa		tax		                tax
1754	.c8dc		bd 02 e2	lda $e202,x	                lda LE204,x
1755	.c8df		aa		tax		                tax
1756	.c8e0		29 01		and #$01	                and #$01
1757	.c8e2		a8		tay		                tay
1758	.c8e3		60		rts		                rts

1760							;-------------------------------------------------------------------------
1761							;
1762							; Prepare AABB based on the current graphics cursor and some other
1763							; coordinate.
1764							;
1765							; entry:
1766							;
1767							; X = VDU variable offset of other coordinate (4 bytes: X;Y;)
1768							;
1769							; exit:
1770							;
1771							; vduv.workspace._28 = minimum
1772							;
1773							; vduv.workspace._2c = maximum
1774							;
1775	.c8e4						prepareAABB:
1776	.c8e4		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixels
1777	.c8e6		20 b5 d5	jsr $d5b5	                jsr sortVDUVariableCoordinates
1778	.c8e9		5a		phy		                phy                          ;save greater Y
1779	.c8ea		da		phx		                phx                          ;save lesser Y
1780	.c8eb		20 ca d5	jsr $d5ca	                jsr sortVDUVariableWords     ;X=lesser X, Y=greater X
1781	.c8ee		68		pla		                pla                          ;A=lesser Y
1782	.c8ef		5a		phy		                phy                          ;save greater X
1783	.c8f0		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
1784	.c8f2		20 f7 c8	jsr $c8f7	                jsr +
1785	.c8f5		fa		plx		                plx                          ;X=greater X
1786	.c8f6		68		pla		                pla                          ;A=greater Y
1787	.c8f7						+
1788							                ; Copy VDU variable word +X to VDU variable word+Y.
1789							                ; Then cropy VDU variable word +A+2 to VDU variable
1790							                ; word+Y+2. Return with updated Y.
1791	.c8f7		48		pha		                pha
1792	.c8f8		20 0a c9	jsr $c90a	                jsr copyTwoBytesWithinVDUVariables
1793	.c8fb		fa		plx		                plx
1794	.c8fc		e8		inx		                inx
1795	.c8fd		e8		inx		                inx
1796	.c8fe		80 0a		bra $c90a	                bra copyTwoBytesWithinVDUVariables

1798							;-------------------------------------------------------------------------
1799							;
1800							; Copy 8 bytes to workspace 28 in the VDU variables.
1801							;
1802							; entry:
1803							;
1804							; X = source offset
1805							;
1806	.c900						copyEightBytesToWorkspace28:
1807	.c900		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28

1809							;-------------------------------------------------------------------------
1810							;
1811							; Copy 8 bytes in the VDU variables.
1812							;
1813							; entry:
1814							;
1815							; X = source offset
1816							;
1817							; Y = dest offset
1818							;
1819	.c902						copyEightBytesWithinVDUVariables:
1820	.c902		a9 08		lda #$08	                lda #$08
1821	.c904		80 18		bra $c91e	                bra copyABytesWithinVDUVariables

1823							;-------------------------------------------------------------------------
1824							;
1825							; copyTextWindowWidthInBytesToWorkspace28
1826	.c906						copyTextWindowWidthInBytesToWorkspace28:
1827	.c906		a2 4c		ldx #$4c	                ldx #VDUVariables.textWindowWidthInBytes
1828	.c908		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28

1830							;-------------------------------------------------------------------------
1831							;
1832							;
1833	.c90a						copyTwoBytesWithinVDUVariables:
1834	.c90a		a9 02		lda #$02	                lda #$02
1835	.c90c		80 10		bra $c91e	                bra copyABytesWithinVDUVariables

1837							;-------------------------------------------------------------------------
1838							;
1839							; Copy text window info to workspace2C.
1840							;
1841	.c90e						copyTextWindowToWorkspace2C:
1842	.c90e		a2 08		ldx #$08	                ldx #VDUVariables.textWindowLeft
1843	.c910		a0 2c		ldy #$2c	                ldy #VDUVariables.workspace._2C
1844	.c912		80 08		bra $c91c	                bra copyFourBytesWithinVDUVariables

1846							;-------------------------------------------------------------------------
1847							;
1848							; Copy last 4 bytes of VDU queue somewhere.
1849							;
1850	.c914						copyLastFourVDUQueueBytes:
1851	.c914		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
1852	.c916		80 04		bra $c91c	                bra copyFourBytesWithinVDUVariables

1854							;-------------------------------------------------------------------------
1855							;
1856							; Copy old graphics cursor position to current graphics cursor position.
1857							;
1858	.c918						copyGraphicsCursorPixelsToOldGraphicsCursorPixels:
1859	.c918		a0 14		ldy #$14	                ldy #VDUVariables.oldGraphicsCursorPixelsX

1861							;-------------------------------------------------------------------------
1862							;
1863							; Copy the graphics cursor position somewhere.
1864							;
1865	.c91a						copyGraphicsCursorPixels:
1866	.c91a		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX

1868							;-------------------------------------------------------------------------
1869							;
1870							; Copy 4 bytes in the VDU variables.
1871							;
1872							; entry:
1873							;
1874							; X = source offset
1875							;
1876							; Y = dest offset
1877							;
1878	.c91c						copyFourBytesWithinVDUVariables:
1879	.c91c		a9 04		lda #$04	                lda #$04

1881							                ; fall through to copyABytesWithinVDUVariables

1883							;-------------------------------------------------------------------------
1884							;
1885							; Copy some bytes in the VDU variables.
1886							;
1887							; entry:
1888							;
1889							; A = number of bytes
1890							;
1891							; X = source offset
1892							;
1893							; Y = dest offset
1894							;
1895							; exit:
1896							;
1897							; X = updated source offset
1898							;
1899							; Y = updated dest offset
1900							;
1901	.c91e						copyABytesWithinVDUVariables:
1902	.c91e		48		pha		                pha
1903	.c91f		bd 00 03	lda $0300,x	                lda vduv,x
1904	.c922		99 00 03	sta $0300,y	                sta vduv,y
1905	.c925		e8		inx		                inx
1906	.c926		c8		iny		                iny
1907	.c927		68		pla		                pla
1908	.c928		3a		dec a		                dec a
1909	.c929		d0 f3		bne $c91e	                bne copyABytesWithinVDUVariables
1910	.c92b		60		rts		                rts

1912							;-------------------------------------------------------------------------
1913							;
1914							; Negate a 16-bit value stored in Y/A
1915							;
1916							; entry:
1917							;
1918							; Y (LSB), A (MSB) = value
1919							;
1920							; exit:
1921							;
1922							; Y (LSB), A (MSB) = -value
1923							;
1924	.c92c						negateAY:
1925	.c92c		48		pha		                pha
1926	.c92d		98		tya		                tya
1927	.c92e		49 ff		eor #$ff	                eor #$FF
1928	.c930		a8		tay		                tay
1929	.c931		68		pla		                pla
1930	.c932		49 ff		eor #$ff	                eor #$FF
1931	.c934		c8		iny		                iny
1932	.c935		d0 01		bne $c938	                bne +
1933	.c937		1a		inc a		                inc a
1934	.c938						+
1935	.c938		60		rts		                rts

1937							;-------------------------------------------------------------------------
1938							;
1939							; Multiply a text window width by the number of bytes per char. There
1940							; are inclusive and exclusive versions, depending on how the width was
1941							; calculated.
1942							;
1943							; entry:
1944							;
1945							; A = value-1 to multiply (inclusive), value to multiply (exclusive)
1946							;
1947							; exit:
1948							;
1949							; A (lsb), X (msb) = value*vduv.bytesPerCharacter
1950							;
1951	.c939						getBytesPerInclusiveTextRow:
1952	.c939		1a		inc a		                inc a
1953	.c93a						getBytesPerExclusiveTextRow:
1954	.c93a		85 da		sta $da		                sta $DA
1955	.c93c		64 db		stz $db		                stz $DB
1956	.c93e		ad 4f 03	lda $034f	                lda vduv.bytesPerCharacter    ;A=1/8/16/32
1957	.c941						-
1958	.c941		4a		lsr a		                lsr a
1959	.c942		b0 06		bcs $c94a	                bcs +                     ;taken when multiply is done
1960	.c944		06 da		asl $da		                asl $DA              ;shift size LSB
1961	.c946		26 db		rol $db		                rol $DB              ;carry into size MSB
1962	.c948		80 f7		bra $c941	                bra -

1964	.c94a						+
1965	.c94a		a5 da		lda $da		                lda $DA
1966	.c94c		a6 db		ldx $db		                ldx $DB
1967	.c94e		60		rts		                rts

1969							;-------------------------------------------------------------------------
1970							;
1971							;
1972	.c94f						prepareForPlotBackground:
1973	.c94f		a2 08		ldx #$08	                ldx #$08                     ;plot background
1974	.c951		8e 59 03	stx $0359	                stx vduv.graphicsPlotState
1975	.c954		ad 5c 03	lda $035c	                lda vduv.backgroundGCOLMode
1976	.c957		29 0f		and #$0f	                and #$0F
1977	.c959		8d 5a 03	sta $035a	                sta vduv.graphicsPlotMode
1978	.c95c		60		rts		                rts

1980							;-------------------------------------------------------------------------

1982	.c95d						LC95F:
1983	.c95d		a9 00		lda #$00	                lda #$00
1984	.c95f		48		pha		                pha
1985	.c960		48		pha		                pha
1986	.c961		ae 2a 03	ldx $032a	                ldx $032A
1987	.c964		20 7b cc	jsr $cc7b	                jsr LCC7D
1988	.c967		80 14		bra $c97d	                bra LC97F

1990	.c969						LC96B:
1991	.c969		38		sec		                sec
1992	.c96a		ad 4f 03	lda $034f	                lda $034F
1993	.c96d		ed 2a 03	sbc $032a	                sbc $032A
1994	.c970		48		pha		                pha
1995	.c971		20 a0 e2	jsr $e2a0	                jsr getDefaultBoundsForCurrentScreenMODE
1996	.c974		da		phx		                phx
1997	.c975		a9 00		lda #$00	                lda #$00
1998	.c977		ae 2a 03	ldx $032a	                ldx $032A
1999	.c97a		20 5b cc	jsr $cc5b	                jsr LCC5D
2000	.c97d						LC97F:
2001							                ; scroll left/right
2002	.c97d		8e 50 03	stx $0350	                stx vduv.screenTopLeftAddress+0
2003	.c980		8d 51 03	sta $0351	                sta vduv.screenTopLeftAddress+1
2004	.c983		fa		plx		                plx
2005	.c984		a0 00		ldy #$00	                ldy #$00
2006	.c986		20 ae cc	jsr $ccae	                jsr getAddressForTextPosition
2007	.c989		fa		plx		                plx
2008	.c98a		a9 00		lda #$00	                lda #$00
2009	.c98c		20 5b cc	jsr $cc5b	                jsr LCC5D
2010	.c98f		86 d8		stx $d8		                stx ZMEMT+0
2011	.c991		85 d9		sta $d9		                sta ZMEMT+1
2012	.c993		20 a0 e2	jsr $e2a0	                jsr getDefaultBoundsForCurrentScreenMODE
2013	.c996		20 ac ca	jsr $caac	                jsr LCAAE
2014	.c999		80 1b		bra $c9b6	                bra LC9B8

2016	.c99b						LC99D:
2017	.c99b		a0 00		ldy #$00	                ldy #$00
2018	.c99d		20 75 cc	jsr $cc75	                jsr LCC77
2019	.c9a0		80 06		bra $c9a8	                bra LC9AA

2021	.c9a2						LC9A4:
2022	.c9a2		20 a0 e2	jsr $e2a0	                jsr getDefaultBoundsForCurrentScreenMODE
2023	.c9a5		20 55 cc	jsr $cc55	                jsr LCC57
2024	.c9a8						LC9AA:
2025	.c9a8		8e 50 03	stx $0350	                stx vduv.screenTopLeftAddress+0
2026	.c9ab		8d 51 03	sta $0351	                sta vduv.screenTopLeftAddress+1
2027	.c9ae		a2 00		ldx #$00	                ldx #$00
2028	.c9b0		20 ae cc	jsr $ccae	                jsr getAddressForTextPosition
2029	.c9b3		20 e6 ca	jsr $cae6	                jsr LCAE8
2030	.c9b6						LC9B8:
2031	.c9b6		a0 0c		ldy #$0c	                ldy #$0C
2032	.c9b8		ad 51 03	lda $0351	                lda vduv.screenTopLeftAddress+1
2033	.c9bb		ae 50 03	ldx $0350	                ldx vduv.screenTopLeftAddress+0
2034	.c9be		4c f5 c6	jmp $c6f5	                jmp setCRTCAddress

2036	.c9c1						LC9C3:
2037	.c9c1		20 9e cc	jsr $cc9e	                jsr LCCA0
2038	.c9c4						LC9C6:
2039	.c9c4		85 dd		sta $dd		                sta $DD
2040	.c9c6		86 dc		stx $dc		                stx $DC
2041	.c9c8		20 2a cc	jsr $cc2a	                jsr LCC2C
2042	.c9cb		ad 29 03	lda $0329	                lda $0329
2043	.c9ce		ae 28 03	ldx $0328	                ldx $0328
2044	.c9d1		20 5b cc	jsr $cc5b	                jsr LCC5D
2045	.c9d4		20 86 cc	jsr $cc86	                jsr LCC88
2046	.c9d7		86 d8		stx $d8		                stx ZMEMT+0
2047	.c9d9		85 d9		sta $d9		                sta ZMEMT+1
2048	.c9db		a9 00		lda #$00	                lda #$00
2049	.c9dd		ae 2a 03	ldx $032a	                ldx $032A
2050	.c9e0		20 7b cc	jsr $cc7b	                jsr LCC7D
2051	.c9e3		20 86 cc	jsr $cc86	                jsr LCC88
2052	.c9e6		86 da		stx $da		                stx $DA
2053	.c9e8		85 db		sta $db		                sta $DB
2054	.c9ea		ac 28 03	ldy $0328	                ldy $0328
2055	.c9ed		ae 29 03	ldx $0329	                ldx $0329
2056	.c9f0		50 23		bvc $ca15	                bvc LCA17
2057	.c9f2		a4 e0		ldy $e0		                ldy $E0
2058	.c9f4		a6 e1		ldx $e1		                ldx $E1
2059	.c9f6		20 e5 cb	jsr $cbe5	                jsr LCBE7
2060	.c9f9		a4 e0		ldy $e0		                ldy $E0
2061	.c9fb		90 09		bcc $ca06	                bcc LCA08
2062	.c9fd		a2 80		ldx #$80	                ldx #$80
2063	.c9ff		86 db		stx $db		                stx $DB
2064	.ca01		64 da		stz $da		                stz $DA
2065	.ca03		ac 2a 03	ldy $032a	                ldy $032A
2066	.ca06						LCA08:
2067	.ca06		a2 00		ldx #$00	                ldx #$00
2068	.ca08		20 f1 cb	jsr $cbf1	                jsr LCBF3
2069	.ca0b		a2 80		ldx #$80	                ldx #$80
2070	.ca0d		86 d9		stx $d9		                stx ZMEMT+1
2071	.ca0f		64 d8		stz $d8		                stz ZMEMT+0
2072	.ca11		a4 de		ldy $de		                ldy $DE
2073	.ca13		a6 df		ldx $df		                ldx $DF
2074	.ca15						LCA17:
2075	.ca15		20 e5 cb	jsr $cbe5	                jsr LCBE7
2076	.ca18		20 95 cc	jsr $cc95	                jsr LCC97
2077	.ca1b		20 92 cc	jsr $cc92	                jsr LCC94
2078	.ca1e		20 55 cc	jsr $cc55	                jsr LCC57
2079	.ca21		86 d8		stx $d8		                stx ZMEMT+0
2080	.ca23		85 d9		sta $d9		                sta ZMEMT+1
2081	.ca25		ce 2b 03	dec $032b	                dec $032B
2082	.ca28		10 9a		bpl $c9c4	                bpl LC9C6
2083	.ca2a		60		rts		                rts

2085	.ca2b						LCA2D:
2086	.ca2b		20 9e cc	jsr $cc9e	                jsr LCCA0
2087	.ca2e						LCA30:
2088	.ca2e		20 2a cc	jsr $cc2a	                jsr LCC2C
2089	.ca31		a9 00		lda #$00	                lda #$00
2090	.ca33		ae 2a 03	ldx $032a	                ldx $032A
2091	.ca36		20 5b cc	jsr $cc5b	                jsr LCC5D
2092	.ca39		86 da		stx $da		                stx $DA
2093	.ca3b		85 db		sta $db		                sta $DB
2094	.ca3d		20 55 cc	jsr $cc55	                jsr LCC57
2095	.ca40		86 dc		stx $dc		                stx $DC
2096	.ca42		85 dd		sta $dd		                sta $DD
2097	.ca44		ac 28 03	ldy $0328	                ldy $0328
2098	.ca47		ae 29 03	ldx $0329	                ldx $0329
2099	.ca4a		50 25		bvc $ca71	                bvc LCA73
2100	.ca4c		a4 de		ldy $de		                ldy $DE
2101	.ca4e		a6 df		ldx $df		                ldx $DF
2102	.ca50		20 a6 cb	jsr $cba6	                jsr LCBA8
2103	.ca53		a4 de		ldy $de		                ldy $DE
2104	.ca55		90 0a		bcc $ca61	                bcc LCA63
2105	.ca57		ae 4e 03	ldx $034e	                ldx $034E
2106	.ca5a		86 db		stx $db		                stx $DB
2107	.ca5c		64 da		stz $da		                stz $DA
2108	.ca5e		ac 2a 03	ldy $032a	                ldy $032A
2109	.ca61						LCA63:
2110	.ca61		a2 00		ldx #$00	                ldx #$00
2111	.ca63		20 b2 cb	jsr $cbb2	                jsr LCBB4
2112	.ca66		ae 4e 03	ldx $034e	                ldx $034E
2113	.ca69		86 d9		stx $d9		                stx ZMEMT+1
2114	.ca6b		64 d8		stz $d8		                stz ZMEMT+0
2115	.ca6d		a4 e0		ldy $e0		                ldy $E0
2116	.ca6f		a6 e1		ldx $e1		                ldx $E1
2117	.ca71						LCA73:
2118	.ca71		20 a6 cb	jsr $cba6	                jsr LCBA8
2119	.ca74		20 92 cc	jsr $cc92	                jsr LCC94
2120	.ca77		ce 2b 03	dec $032b	                dec $032B
2121	.ca7a		10 b2		bpl $ca2e	                bpl LCA30
2122	.ca7c						LCA7E:
2123	.ca7c		60		rts		                rts

2125	.ca7d						LCA7F:
2126	.ca7d		86 dc		stx $dc		                stx $DC
2127	.ca7f		aa		tax		                tax
2128	.ca80		38		sec		                sec
2129	.ca81		e5 dc		sbc $dc		                sbc $DC
2130	.ca83		f0 f7		beq $ca7c	                beq LCA7E
2131	.ca85		85 dd		sta $dd		                sta $DD
2132	.ca87		da		phx		                phx
2133	.ca88		20 3a c9	jsr $c93a	                jsr getBytesPerExclusiveTextRow
2134	.ca8b		fa		plx		                plx
2135	.ca8c		ad 66 03	lda $0366	                lda $0366
2136	.ca8f		89 08		bit #$08	                bit #$08
2137	.ca91		d0 0b		bne $ca9e	                bne LCAA0
2138	.ca93		89 02		bit #$02	                bit #$02
2139	.ca95		20 c8 cc	jsr $ccc8	                jsr LCCCA
2140	.ca98		a4 da		ldy $da		                ldy $DA
2141	.ca9a		a6 db		ldx $db		                ldx $DB
2142	.ca9c		80 2e		bra $cacc	                bra LCACE

2144	.ca9e						LCAA0:
2145	.ca9e		89 04		bit #$04	                bit #$04
2146	.caa0		20 c8 cc	jsr $ccc8	                jsr LCCCA
2147	.caa3		ad 4f 03	lda $034f	                lda $034F
2148	.caa6		8d 2a 03	sta $032a	                sta $032A
2149	.caa9		a4 dd		ldy $dd		                ldy $DD
2150	.caab		88		dey		                dey
2151	.caac						LCAAE:
2152	.caac		98		tya		                tya
2153	.caad		f0 18		beq $cac7	                beq LCAC9
2154	.caaf		84 dc		sty $dc		                sty $DC
2155	.cab1						LCAB3:
2156	.cab1		20 55 cc	jsr $cc55	                jsr LCC57
2157	.cab4		86 da		stx $da		                stx $DA
2158	.cab6		85 db		sta $db		                sta $DB
2159	.cab8		20 c7 ca	jsr $cac7	                jsr LCAC9
2160	.cabb		a6 da		ldx $da		                ldx $DA
2161	.cabd		86 d8		stx $d8		                stx ZMEMT+0
2162	.cabf		a5 db		lda $db		                lda $DB
2163	.cac1		85 d9		sta $d9		                sta ZMEMT+1
2164	.cac3		c6 dc		dec $dc		                dec $DC
2165	.cac5		d0 ea		bne $cab1	                bne LCAB3
2166	.cac7						LCAC9:
2167	.cac7		a2 00		ldx #$00	                ldx #$00
2168	.cac9		ac 2a 03	ldy $032a	                ldy $032A
2169	.cacc						LCACE:
2170	.cacc		ad 28 03	lda $0328	                lda $0328
2171	.cacf		48		pha		                pha
2172	.cad0		ad 29 03	lda $0329	                lda $0329
2173	.cad3		48		pha		                pha
2174	.cad4		8c 28 03	sty $0328	                sty $0328
2175	.cad7		8e 29 03	stx $0329	                stx $0329
2176	.cada		20 e6 ca	jsr $cae6	                jsr LCAE8
2177	.cadd		68		pla		                pla
2178	.cade		8d 29 03	sta $0329	                sta $0329
2179	.cae1		68		pla		                pla
2180	.cae2		8d 28 03	sta $0328	                sta $0328
2181	.cae5		60		rts		                rts

2183							;-------------------------------------------------------------------------

2185	.cae6						LCAE8:
2186	.cae6		a6 d8		ldx $d8		                ldx ZMEMT+0
2187	.cae8		a5 d9		lda $d9		                lda ZMEMT+1
2188	.caea		20 2a cc	jsr $cc2a	                jsr LCC2C
2189	.caed		80 79		bra $cb68	                bra LCB6A

2191							;-------------------------------------------------------------------------

2193	.caef						LCAF1:
2194	.caef		a2 75		ldx #$75	                ldx #<LCC77
2195	.caf1		a9 cc		lda #$cc	                lda #>LCC77
2196	.caf3		ac 2d 03	ldy $032d	                ldy $032D
2197	.caf6		80 07		bra $caff	                bra LCB01

2199	.caf8						LCAFA:
2200	.caf8		a2 55		ldx #$55	                ldx #<LCC57
2201	.cafa		a9 cc		lda #$cc	                lda #>LCC57
2202	.cafc		ac 2f 03	ldy $032f	                ldy $032F
2203	.caff						LCB01:
2204	.caff		8e 5d 03	stx $035d	                stx $035D
2205	.cb02		8d 5e 03	sta $035e	                sta $035E
2206	.cb05		38		sec		                sec
2207	.cb06		ad 2d 03	lda $032d	                lda $032D
2208	.cb09		ed 2f 03	sbc $032f	                sbc $032F
2209	.cb0c		8d 2b 03	sta $032b	                sta $032B
2210	.cb0f		ae 2c 03	ldx $032c	                ldx $032C
2211	.cb12		20 ae cc	jsr $ccae	                jsr getAddressForTextPosition
2212	.cb15		85 dd		sta $dd		                sta $DD
2213	.cb17		86 dc		stx $dc		                stx $DC
2214	.cb19		20 2a cc	jsr $cc2a	                jsr LCC2C
2215	.cb1c		ad 2b 03	lda $032b	                lda $032B
2216	.cb1f		f0 47		beq $cb68	                beq LCB6A
2217	.cb21						LCB23:
2218	.cb21		08		php		                php
2219	.cb22		20 24 c0	jsr $c024	                jsr LC024
2220	.cb25		86 da		stx $da		                stx $DA
2221	.cb27		85 db		sta $db		                sta $DB
2222	.cb29		86 dc		stx $dc		                stx $DC
2223	.cb2b		85 dd		sta $dd		                sta $DD
2224	.cb2d		28		plp		                plp
2225	.cb2e		50 1d		bvc $cb4d	                bvc LCB4F
2226	.cb30		b8		clv		                clv
2227	.cb31						LCB33:
2228	.cb31		a6 df		ldx $df		                ldx $DF
2229	.cb33		a4 de		ldy $de		                ldy $DE
2230	.cb35		20 b2 cb	jsr $cbb2	                jsr LCBB4
2231	.cb38		ad 4e 03	lda $034e	                lda $034E
2232	.cb3b		70 06		bvs $cb43	                bvs LCB45
2233	.cb3d		85 d9		sta $d9		                sta ZMEMT+1
2234	.cb3f		64 d8		stz $d8		                stz ZMEMT+0
2235	.cb41		80 04		bra $cb47	                bra LCB49

2237	.cb43						LCB45:
2238	.cb43		85 db		sta $db		                sta $DB
2239	.cb45		64 da		stz $da		                stz $DA
2240	.cb47						LCB49:
2241	.cb47		a6 e1		ldx $e1		                ldx $E1
2242	.cb49		a4 e0		ldy $e0		                ldy $E0
2243	.cb4b		80 0b		bra $cb58	                bra LCB5A

2245	.cb4d						LCB4F:
2246	.cb4d		20 2a cc	jsr $cc2a	                jsr LCC2C
2247	.cb50		70 df		bvs $cb31	                bvs LCB33
2248	.cb52		ae 29 03	ldx $0329	                ldx $0329
2249	.cb55		ac 28 03	ldy $0328	                ldy $0328
2250	.cb58						LCB5A:
2251	.cb58		20 b2 cb	jsr $cbb2	                jsr LCBB4
2252	.cb5b		a6 dc		ldx $dc		                ldx $DC
2253	.cb5d		86 d8		stx $d8		                stx ZMEMT+0
2254	.cb5f		a5 dd		lda $dd		                lda $DD
2255	.cb61		85 d9		sta $d9		                sta ZMEMT+1
2256	.cb63		ce 2b 03	dec $032b	                dec $032B
2257	.cb66		d0 b9		bne $cb21	                bne LCB23
2258	.cb68						LCB6A:
2259	.cb68		ae 29 03	ldx $0329	                ldx $0329
2260	.cb6b		ac 28 03	ldy $0328	                ldy $0328
2261	.cb6e		50 12		bvc $cb82	                bvc clearTextMemory
2262	.cb70		a6 df		ldx $df		                ldx $DF
2263	.cb72		a4 de		ldy $de		                ldy $DE
2264	.cb74		20 82 cb	jsr $cb82	                jsr clearTextMemory
2265	.cb77		ad 4e 03	lda $034e	                lda $034E
2266	.cb7a		85 d9		sta $d9		                sta ZMEMT+1
2267	.cb7c		64 d8		stz $d8		                stz ZMEMT+0
2268	.cb7e		a6 e1		ldx $e1		                ldx $E1
2269	.cb80		a4 e0		ldy $e0		                ldy $E0

2271							;-------------------------------------------------------------------------
2272							;
2273							; Clear a block of text screen memory.
2274							;
2275							; entry:
2276							;
2277							; (ZMEMT),y - first byte to clear
2278							;
2279							; X = number of pages (including first, possibly partial page) to clear
2280							;
2281	.cb82						clearTextMemory:
2282							                ; align memory so that Y=0 on each page boundary
2283							                ; crossing.
2284							                ;
2285							                ; e.g., on entry ZMEMT=$30f8, Y=$08 - then after,
2286							                ; ZMEMT=$3000, Y=$F7; or, ZMEMT=$30f0, Y=$08 -> ZMEMT=$2ff8, Y=$F7.
2287	.cb82		98		tya		                tya                          ;A=initial offset
2288	.cb83		18		clc		                clc
2289	.cb84		65 d8		adc $d8		                adc ZMEMT+0                  ;add to dest address
2290	.cb86		85 d8		sta $d8		                sta ZMEMT+0
2291	.cb88		b0 02		bcs $cb8c	                bcs +
2292	.cb8a		c6 d9		dec $d9		                dec ZMEMT+1
2293	.cb8c						+
2294	.cb8c		98		tya		                tya
2295	.cb8d		49 ff		eor #$ff	                eor #$FF
2296	.cb8f		a8		tay		                tay
2297	.cb90		4a		lsr a		                lsr a                        ;C set if odd
2298	.cb91		ad 58 03	lda $0358	                lda vduv.backgroundTextColour
2299	.cb94		b0 07		bcs $cb9d	                bcs nextByte                    ;taken if odd - slightly different loop
2300	.cb96		80 02		bra $cb9a	                bra clearTextMemoryByte

2302	.cb98						clearTextMemoryLoop:
2303	.cb98		91 d8		sta ($d8),y	                sta (ZMEMT),y
2304	.cb9a						clearTextMemoryByte:
2305	.cb9a		c8		iny		                iny
2306	.cb9b		91 d8		sta ($d8),y	                sta (ZMEMT),y
2307	.cb9d						nextByte:
2308	.cb9d		c8		iny		                iny
2309	.cb9e		d0 f8		bne $cb98	                bne clearTextMemoryLoop
2310	.cba0		e6 d9		inc $d9		                inc ZMEMT+1
2311	.cba2		ca		dex		                dex
2312	.cba3		10 f3		bpl $cb98	                bpl clearTextMemoryLoop
2313	.cba5		60		rts		                rts

2315							;-------------------------------------------------------------------------

2317	.cba6						LCBA8:
2318	.cba6		38		sec		                sec
2319	.cba7		98		tya		                tya
2320	.cba8		ed 2a 03	sbc $032a	                sbc $032A
2321	.cbab		a8		tay		                tay
2322	.cbac		b0 04		bcs $cbb2	                bcs LCBB4
2323	.cbae		ca		dex		                dex
2324	.cbaf		30 33		bmi $cbe4	                bmi LCBE6
2325	.cbb1		38		sec		                sec
2326	.cbb2						LCBB4:
2327	.cbb2		08		php		                php
2328	.cbb3		98		tya		                tya
2329	.cbb4		18		clc		                clc
2330	.cbb5		65 da		adc $da		                adc ZTEMP+0
2331	.cbb7		85 da		sta $da		                sta ZTEMP+0
2332	.cbb9		b0 02		bcs $cbbd	                bcs LCBBF
2333	.cbbb		c6 db		dec $db		                dec ZTEMP+1
2334	.cbbd						LCBBF:
2335	.cbbd		98		tya		                tya
2336	.cbbe		18		clc		                clc
2337	.cbbf		65 d8		adc $d8		                adc ZMEMT+0
2338	.cbc1		85 d8		sta $d8		                sta ZMEMT+0
2339	.cbc3		b0 02		bcs $cbc7	                bcs LCBC9
2340	.cbc5		c6 d9		dec $d9		                dec ZMEMT+1
2341	.cbc7						LCBC9:
2342	.cbc7		98		tya		                tya
2343	.cbc8		49 ff		eor #$ff	                eor #$FF
2344	.cbca		a8		tay		                tay
2345	.cbcb		4a		lsr a		                lsr a
2346	.cbcc		b0 0b		bcs $cbd9	                bcs LCBDB
2347	.cbce		80 04		bra $cbd4	                bra LCBD6

2349	.cbd0						LCBD2:
2350	.cbd0		b1 da		lda ($da),y	                lda ($DA),y
2351	.cbd2		91 d8		sta ($d8),y	                sta (ZMEMT),y
2352	.cbd4						LCBD6:
2353	.cbd4		c8		iny		                iny
2354	.cbd5		b1 da		lda ($da),y	                lda ($DA),y
2355	.cbd7		91 d8		sta ($d8),y	                sta (ZMEMT),y
2356	.cbd9						LCBDB:
2357	.cbd9		c8		iny		                iny
2358	.cbda		d0 f4		bne $cbd0	                bne LCBD2
2359	.cbdc		e6 db		inc $db		                inc $DB
2360	.cbde		e6 d9		inc $d9		                inc ZMEMT+1
2361	.cbe0		ca		dex		                dex
2362	.cbe1		10 ed		bpl $cbd0	                bpl LCBD2
2363	.cbe3						LCBE5:
2364	.cbe3		28		plp		                plp
2365	.cbe4						LCBE6:
2366	.cbe4		60		rts		                rts

2368	.cbe5						LCBE7:
2369	.cbe5		38		sec		                sec
2370	.cbe6		98		tya		                tya
2371	.cbe7		ed 2a 03	sbc $032a	                sbc $032A
2372	.cbea		a8		tay		                tay
2373	.cbeb		b0 04		bcs $cbf1	                bcs LCBF3
2374	.cbed		ca		dex		                dex
2375	.cbee		30 f4		bmi $cbe4	                bmi LCBE6
2376	.cbf0		38		sec		                sec
2377	.cbf1						LCBF3:
2378	.cbf1		08		php		                php
2379	.cbf2		98		tya		                tya
2380	.cbf3		49 ff		eor #$ff	                eor #$FF
2381	.cbf5		48		pha		                pha
2382	.cbf6		38		sec		                sec
2383	.cbf7		65 da		adc $da		                adc $DA
2384	.cbf9		85 da		sta $da		                sta $DA
2385	.cbfb		b0 02		bcs $cbff	                bcs LCC01
2386	.cbfd		c6 db		dec $db		                dec $DB
2387	.cbff						LCC01:
2388	.cbff		68		pla		                pla
2389	.cc00		38		sec		                sec
2390	.cc01		65 d8		adc $d8		                adc ZMEMT+0
2391	.cc03		85 d8		sta $d8		                sta ZMEMT+0
2392	.cc05		b0 02		bcs $cc09	                bcs LCC0B
2393	.cc07		c6 d9		dec $d9		                dec ZMEMT+1
2394	.cc09						LCC0B:
2395	.cc09		98		tya		                tya
2396	.cc0a		4a		lsr a		                lsr a
2397	.cc0b		b0 14		bcs $cc21	                bcs LCC23
2398	.cc0d		d0 0d		bne $cc1c	                bne LCC1E
2399	.cc0f						LCC11:
2400	.cc0f		ca		dex		                dex
2401	.cc10		30 d1		bmi $cbe3	                bmi LCBE5
2402	.cc12		c6 db		dec $db		                dec $DB
2403	.cc14		c6 d9		dec $d9		                dec ZMEMT+1
2404	.cc16		80 04		bra $cc1c	                bra LCC1E

2406	.cc18						LCC1A:
2407	.cc18		b1 da		lda ($da),y	                lda ($DA),y
2408	.cc1a		91 d8		sta ($d8),y	                sta (ZMEMT),y
2409	.cc1c						LCC1E:
2410	.cc1c		88		dey		                dey
2411	.cc1d		b1 da		lda ($da),y	                lda ($DA),y
2412	.cc1f		91 d8		sta ($d8),y	                sta (ZMEMT),y
2413	.cc21						LCC23:
2414	.cc21		88		dey		                dey
2415	.cc22		d0 f4		bne $cc18	                bne LCC1A
2416	.cc24		b2 da		lda ($da)	                lda ($DA)
2417	.cc26		92 d8		sta ($d8)	                sta (ZMEMT)
2418	.cc28		80 e5		bra $cc0f	                bra LCC11

2420							;-------------------------------------------------------------------------
2421							;
2422							; Get pointers for a text window row.
2423							;
2424							; entry:
2425							;
2426							; vduv.workspace._28; = text window stride, in bytes
2427							;
2428							; >A, <X = address
2429							;
2430							; exit:
2431							;
2432							; V=0: >A, <X = new address
2433							;
2434							; V=1: (ZTEMPC) =

2436	.cc2a						LCC2C:
2437	.cc2a		48		pha		                pha                          ;save >address
2438	.cc2b		8a		txa		                txa                          ;A=<address
2439	.cc2c		18		clc		                clc
2440	.cc2d		6d 28 03	adc $0328	                adc vduv.workspace._28       ;A=<(new address)
2441	.cc30		aa		tax		                tax                          ;X=<(new address)
2442	.cc31		68		pla		                pla                          ;restore >addcess
2443	.cc32		6d 29 03	adc $0329	                adc vduv.workspace._29       ;A=>(new address)
2444	.cc35		50 1d		bvc $cc54	                bvc rtsCC56                  ;taken if no address wrap
2445	.cc37		86 e0		stx $e0		                stx ZTEMPD+0
2446	.cc39		29 7f		and #$7f	                and #$7F                     ;
2447	.cc3b		85 e1		sta $e1		                sta ZTEMPD+1
2448	.cc3d		05 e0		ora $e0		                ora ZTEMPD+0
2449	.cc3f		f0 12		beq $cc53	                beq clv_rts
2450	.cc41		08		php		                php
2451	.cc42		38		sec		                sec
2452	.cc43		ad 28 03	lda $0328	                lda vduv.workspace._28
2453	.cc46		e5 e0		sbc $e0		                sbc ZTEMPD+0
2454	.cc48		85 de		sta $de		                sta ZTEMPC+0
2455	.cc4a		ad 29 03	lda $0329	                lda vduv.workspace._29
2456	.cc4d		e5 e1		sbc $e1		                sbc ZTEMPD+1
2457	.cc4f		85 df		sta $df		                sta ZTEMPC+1
2458	.cc51		28		plp		                plp
2459	.cc52		60		rts		                rts

2461							;-------------------------------------------------------------------------

2463	.cc53						clv_rts:
2464	.cc53		b8		clv		                clv
2465	.cc54						rtsCC56:
2466	.cc54		60		rts		                rts

2468	.cc55						LCC57:
2469	.cc55		ad 53 03	lda $0353	                lda vduv.bytesPerCharacterRow+1
2470	.cc58		ae 52 03	ldx $0352	                ldx vduv.bytesPerCharacterRow+0
2471	.cc5b						LCC5D:
2472	.cc5b		18		clc		                clc
2473	.cc5c						LCC5E:
2474	.cc5c		08		php		                php
2475	.cc5d		48		pha		                pha
2476	.cc5e		8a		txa		                txa
2477	.cc5f		65 d8		adc $d8		                adc ZMEMT+0
2478	.cc61		aa		tax		                tax
2479	.cc62		68		pla		                pla
2480	.cc63		65 d9		adc $d9		                adc ZMEMT+1
2481	.cc65		10 04		bpl $cc6b	                bpl +
2482	.cc67		38		sec		                sec
2483	.cc68		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte ;handle wraparound at end
2484	.cc6b						+
2485	.cc6b		cd 4e 03	cmp $034e	                cmp vduv.startScreenAddressHighByte
2486	.cc6e		b0 03		bcs $cc73	                bcs +
2487	.cc70		6d 54 03	adc $0354	                adc vduv.screenSizeHighByte ;handle wraparound at start
2488	.cc73						+
2489	.cc73		28		plp		                plp
2490	.cc74		60		rts		                rts

2492	.cc75						LCC77:
2493	.cc75		ad 53 03	lda $0353	                lda $0353
2494	.cc78		ae 52 03	ldx $0352	                ldx $0352
2495	.cc7b						LCC7D:
2496	.cc7b		48		pha		                pha
2497	.cc7c		8a		txa		                txa
2498	.cc7d		49 ff		eor #$ff	                eor #$FF
2499	.cc7f		aa		tax		                tax
2500	.cc80		68		pla		                pla
2501	.cc81		49 ff		eor #$ff	                eor #$FF
2502	.cc83		38		sec		                sec
2503	.cc84		80 d6		bra $cc5c	                bra LCC5E

2505	.cc86						LCC88:
2506	.cc86		cd 4e 03	cmp $034e	                cmp $034E
2507	.cc89		d0 06		bne $cc91	                bne LCC93
2508	.cc8b		e0 00		cpx #$00	                cpx #$00
2509	.cc8d		d0 02		bne $cc91	                bne LCC93
2510	.cc8f		a9 80		lda #$80	                lda #$80
2511	.cc91						LCC93:
2512	.cc91		60		rts		                rts

2514	.cc92						LCC94:
2515	.cc92		20 c7 ca	jsr $cac7	                jsr LCAC9
2516	.cc95						LCC97:
2517	.cc95		a6 dc		ldx $dc		                ldx $DC
2518	.cc97		86 d8		stx $d8		                stx ZMEMT+0
2519	.cc99		a5 dd		lda $dd		                lda $DD
2520	.cc9b		85 d9		sta $d9		                sta ZMEMT+1
2521	.cc9d		60		rts		                rts

2523	.cc9e						LCCA0:
2524	.cc9e		38		sec		                sec
2525	.cc9f		ad 2d 03	lda $032d	                lda $032D
2526	.cca2		ed 2f 03	sbc $032f	                sbc $032F
2527	.cca5		8d 2b 03	sta $032b	                sta $032B
2528	.cca8		ae 2c 03	ldx $032c	                ldx $032C
2529	.ccab		ac 2f 03	ldy $032f	                ldy $032F

2531							;-------------------------------------------------------------------------
2532							;
2533							; Get display address for a text position.
2534							;
2535	.ccae						getAddressForTextPosition:
2536	.ccae		ad 18 03	lda $0318	                lda vduv.textCursorXPosition
2537	.ccb1		48		pha		                pha
2538	.ccb2		ad 19 03	lda $0319	                lda vduv.textCursorYPosition
2539	.ccb5		48		pha		                pha
2540	.ccb6		8e 18 03	stx $0318	                stx vduv.textCursorXPosition
2541	.ccb9		8c 19 03	sty $0319	                sty vduv.textCursorYPosition
2542	.ccbc		20 f8 cc	jsr $ccf8	                jsr updateZMEMTWithTextCursorPosition
2543	.ccbf		7a		ply		                ply
2544	.ccc0		8c 19 03	sty $0319	                sty vduv.textCursorYPosition
2545	.ccc3		7a		ply		                ply
2546	.ccc4		8c 18 03	sty $0318	                sty vduv.textCursorXPosition
2547	.ccc7		60		rts		                rts

2549							;-------------------------------------------------------------------------

2551	.ccc8						LCCCA:
2552	.ccc8		f0 03		beq $cccd	                beq LCCCF
2553	.ccca		ca		dex		                dex
2554	.cccb		86 dc		stx $dc		                stx ZTEMPB+0
2555	.cccd						LCCCF:
2556	.cccd		ad 66 03	lda $0366	                lda vduv.cursorFlags
2557	.ccd0		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
2558	.ccd2		aa		tax		                tax
2559	.ccd3		a5 dc		lda $dc		                lda ZTEMPB+0
2560	.ccd5						LCCD7:
2561	.ccd5		20 c7 c2	jsr $c2c7	                jsr setTextCursorXPositionWithCursorFlags
2562	.ccd8						LCCDA:
2563	.ccd8		ae 18 03	ldx $0318	                ldx vduv.textCursorXPosition
2564	.ccdb		ec 08 03	cpx $0308	                cpx vduv.textWindowLeft
2565	.ccde		30 16		bmi $ccf6	                bmi LCCF8            ;taken if off left edge of window
2566	.cce0		ec 0a 03	cpx $030a	                cpx vduv.textWindowRight
2567	.cce3		f0 02		beq $cce7	                beq LCCE9            ;taken if at right edge of window
2568	.cce5		10 0f		bpl $ccf6	                bpl LCCF8            ;taken if off right edge of window
2569	.cce7						LCCE9:
2570	.cce7		ae 19 03	ldx $0319	                ldx vduv.textCursorYPosition
2571	.ccea		ec 0b 03	cpx $030b	                cpx vduv.textWindowTop
2572	.cced		30 07		bmi $ccf6	                bmi LCCF8
2573	.ccef		ec 09 03	cpx $0309	                cpx vduv.textWindowBottom
2574	.ccf2		30 04		bmi $ccf8	                bmi updateZMEMTWithTextCursorPosition
2575	.ccf4		f0 02		beq $ccf8	                beq updateZMEMTWithTextCursorPosition
2576	.ccf6						LCCF8:
2577	.ccf6		38		sec		                sec
2578	.ccf7		60		rts		                rts

2580							;-------------------------------------------------------------------------
2581							;
2582							; Get display address for current text cursor position.
2583							;
2584							; Set up display address without using BBC lookup table at &E0/1
2585							;
2586	.ccf8						updateZMEMTWithTextCursorPosition:
2587	.ccf8		ad 56 03	lda $0356	                lda vduv.currentScreenMODEGroup
2588	.ccfb		29 fe		and #$fe	                and #$fe                     ; Reduce to 0,0,2,2,4
2589	.ccfd		aa		tax		                tax                          ; Index into jump table
2590	.ccfe		ac 19 03	ldy $0319	                ldy vduv.textCursorYPosition  ; Get current line
2591	.cd01		7c 04 cd	jmp ($cd04,x)	                jmp (multiplyRoutinesTable,x) ; Jump to calculation setup

2593	.cd04						multiplyRoutinesTable:
2594	>cd04		1f cd				                .word multiplyBy640     ; Memory map 0,1  MODE 0,1,2,3
2595	>cd06		13 cd				                .word multiplyBy320       ; Memory map 2,3  MODE 4,5,6
2596	>cd08		0a cd				                .word multiplyBy40        ; Memory map 4    MODE 7

2598	.cd0a						multiplyBy40:
2599	.cd0a		be ad e0	ldx $e0ad,y	                ldx multiplyBy40TableHigh,y ; Get offset high byte for start of this line
2600	.cd0d		b9 c6 e0	lda $e0c6,y	                lda multiplyBy40TableLow,y ; Get offset low byte for start of this line
2601	.cd10		18		clc		                clc
2602	.cd11		80 14		bra $cd27	                bra LCD29

2604	.cd13						multiplyBy320:
2605	.cd13		b9 df e0	lda $e0df,y	                lda multiplyBy640TableHigh,y
2606	.cd16		4a		lsr a		                lsr a
2607	.cd17		aa		tax		                tax
2608	.cd18		98		tya		                tya
2609	.cd19		29 03		and #$03	                and #$03
2610	.cd1b		4a		lsr a		                lsr a
2611	.cd1c		6a		ror a		                ror a
2612	.cd1d		80 07		bra $cd26	                bra LCD28

2614	.cd1f						multiplyBy640:
2615	.cd1f		be df e0	ldx $e0df,y	                ldx multiplyBy640TableHigh,y
2616	.cd22		98		tya		                tya
2617	.cd23		29 01		and #$01	                and #$01
2618	.cd25		4a		lsr a		                lsr a
2619	.cd26						LCD28:
2620	.cd26		6a		ror a		                ror a                        ; A=A/2 +(128*carry)

2622	.cd27						LCD29:
2623	.cd27		6d 50 03	adc $0350	                adc vduv.screenTopLeftAddress+0
2624	.cd2a		85 d8		sta $d8		                sta ZMEMT+0                      ; store it
2625	.cd2c		8a		txa		                txa
2626	.cd2d		6d 51 03	adc $0351	                adc vduv.screenTopLeftAddress+1 ; window start address hi
2627	.cd30		a8		tay		                tay
2628	.cd31		ad 18 03	lda $0318	                lda vduv.textCursorXPosition  ; text column
2629	.cd34		ae 4f 03	ldx $034f	                ldx vduv.bytesPerCharacter    ; bytes per character
2630	.cd37		ca		dex		                dex
2631	.cd38		f0 12		beq $cd4c	                beq LCD4E                    ; 1 colour, MODE 7
2632	.cd3a		e0 0f		cpx #$0f	                cpx #$0F
2633	.cd3c		f0 03		beq $cd41	                beq LCD43                    ; 4 colours, MODE 1 or MODE 5
2634	.cd3e		90 02		bcc $cd42	                bcc LCD44                    ; 2 colours, MODE 0,3,4,6
2635	.cd40		0a		asl a		                asl a                        ; 16 colours, MODE 2
2636	.cd41						LCD43:
2637	.cd41		0a		asl a		                asl a
2638	.cd42						LCD44:
2639	.cd42		0a		asl a		                asl a
2640	.cd43		0a		asl a		                asl a
2641	.cd44		90 02		bcc $cd48	                bcc LCD4A
2642	.cd46		c8		iny		                iny
2643	.cd47		c8		iny		                iny
2644	.cd48						LCD4A:
2645	.cd48		0a		asl a		                asl a
2646	.cd49		90 02		bcc $cd4d	                bcc LCD4F
2647	.cd4b		c8		iny		                iny
2648	.cd4c						LCD4E:
2649	.cd4c		18		clc		                clc
2650	.cd4d						LCD4F:
2651	.cd4d		65 d8		adc $d8		                adc ZMEMT+0
2652	.cd4f		85 d8		sta $d8		                sta ZMEMT+0
2653	.cd51		8d 4a 03	sta $034a	                sta vduv.textCursorCRTCAddress+0
2654	.cd54		aa		tax		                tax
2655	.cd55		98		tya		                tya
2656	.cd56		69 00		adc #$00	                adc #$00
2657	.cd58		8d 4b 03	sta $034b	                sta vduv.textCursorCRTCAddress+1
2658	.cd5b		10 04		bpl $cd61	                bpl LCD63
2659	.cd5d		38		sec		                sec
2660	.cd5e		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte
2661	.cd61						LCD63:
2662	.cd61		85 d9		sta $d9		                sta ZMEMT+1
2663	.cd63		18		clc		                clc
2664	.cd64		60		rts		                rts

2666							;-------------------------------------------------------------------------

2668	.cd65						nextMaskedCharColumn
2669	.cd65		ee 24 03	inc $0324	                inc vduv.graphicsCursorPixelsX+0
2670	.cd68		d0 03		bne $cd6d	                bne +
2671	.cd6a		ee 25 03	inc $0325	                inc vduv.graphicsCursorPixelsX+1
2672	.cd6d						+
2673	.cd6d		0a		asl a		                asl a
2674	.cd6e						plotMaskedCharRow:
2675							                ; find next pixel to plot, updating graphics cursor X
2676							                ; as it goes. A is non-zero, so this loop will finish
2677							                ; eventually.
2678	.cd6e		10 f5		bpl $cd65	                bpl nextMaskedCharColumn
2679	.cd70		5a		phy		                phy
2680	.cd71		85 dd		sta $dd		                sta ZTEMPB+1                 ;
2681	.cd73		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixels
2682	.cd75		20 c6 de	jsr $dec6	                jsr gaddrEntryPoint
2683	.cd78		80 02		bra $cd7c	                bra plotMaskedCharPixel

2685	.cd7a						plotMaskedCharPixelsLoop:
2686	.cd7a		10 03		bpl $cd7f	                bpl nextMaskedCharPixel
2687	.cd7c						plotMaskedCharPixel:
2688	.cd7c		20 4f db	jsr $db4f	                jsr plbyteEntryPoint
2689	.cd7f						nextMaskedCharPixel
2690	.cd7f		46 d1		lsr $d1		                lsr ZMASK
2691	.cd81		90 03		bcc $cd86	                bcc +
2692	.cd83		20 65 da	jsr $da65	                jsr nextColumnAndResetMask
2693	.cd86						+
2694	.cd86		06 dd		asl $dd		                asl ZTEMPB+1
2695	.cd88		d0 f0		bne $cd7a	                bne plotMaskedCharPixelsLoop
2696	.cd8a		a2 28		ldx #$28	                ldx #VDUVariables.workspace._28
2697	.cd8c		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixelsX
2698	.cd8e		20 0a c9	jsr $c90a	                jsr copyTwoBytesWithinVDUVariables
2699	.cd91		7a		ply		                ply
2700	.cd92		80 50		bra $cde4	                bra nextMaskedCharY

2702	.cd94						plotCharAtGraphicsCursor:
2703	.cd94		20 2a e2	jsr $e22a	                jsr getSoftCharacterDefinitionAddress
2704	.cd97		9c 59 03	stz $0359	                stz vduv.graphicsPlotState   ;plot in foreground colour
2705	.cd9a		ad 5b 03	lda $035b	                lda vduv.foregroundGCOLMode
2706	.cd9d		29 0f		and #$0f	                and #$0F
2707	.cd9f						plotFontDataAtGraphicsCursorWithPlotMode:
2708	.cd9f		8d 5a 03	sta $035a	                sta vduv.graphicsPlotMode
2709	.cda2		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
2710	.cda4		20 1a c9	jsr $c91a	                jsr copyGraphicsCursorPixels
2711	.cda7		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixelsX
2712	.cda9		a2 00		ldx #$00	                ldx #VDUVariables.graphicsWindowPixelsLeft
2713	.cdab		20 b2 ce	jsr $ceb2	                jsr getDistanceMask
2714	.cdae		85 dc		sta $dc		                sta ZTEMPB+0
2715	.cdb0		a2 04		ldx #$04	                ldx #VDUVariables.graphicsWindowPixelsRight
2716	.cdb2		20 b2 ce	jsr $ceb2	                jsr getDistanceMask
2717	.cdb5		6a		ror a		                ror a
2718	.cdb6		14 dc		trb $dc		                trb ZTEMPB+0
2719	.cdb8		a2 26		ldx #$26	                ldx #VDUVariables.graphicsCursorPixelsY
2720	.cdba		a0 06		ldy #$06	                ldy #VDUVariables.graphicsWindowPixelsTop
2721	.cdbc		20 b2 ce	jsr $ceb2	                jsr getDistanceMask
2722	.cdbf		85 dd		sta $dd		                sta ZTEMPB+1
2723	.cdc1		a2 26		ldx #$26	                ldx #VDUVariables.graphicsCursorPixelsY
2724	.cdc3		a0 02		ldy #$02	                ldy #VDUVariables.graphicsWindowPixelsBottom
2725	.cdc5		20 b2 ce	jsr $ceb2	                jsr getDistanceMask
2726	.cdc8		6a		ror a		                ror a
2727	.cdc9		14 dd		trb $dd		                trb ZTEMPB+1
2728	.cdcb		a0 07		ldy #$07	                ldy #$07
2729	.cdcd						copyMaskedCharLoop:
2730	.cdcd		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte
2731	.cdcf		25 dc		and $dc		                and ZTEMPB+0                 ;mask out columns
2732	.cdd1		46 dd		lsr $dd		                lsr ZTEMPB+1                 ;test row
2733	.cdd3		b0 02		bcs $cdd7	                bcs +
2734	.cdd5		a9 00		lda #$00	                lda #$00                     ;mask out this row
2735	.cdd7						+
2736	.cdd7		99 2c 03	sta $032c,y	                sta vduv.workspace._2C,y
2737	.cdda		88		dey		                dey
2738	.cddb		10 f0		bpl $cdcd	                bpl copyMaskedCharLoop
2739	.cddd		a0 f8		ldy #$f8	                ldy #$F8
2740	.cddf						plotMaskedCharLoop:
2741	.cddf		b9 34 02	lda $0234,y	                lda vduv.workspace._2C-$f8,y ;get masked byte
2742	.cde2		d0 8a		bne $cd6e	                bne plotMaskedCharRow        ;taken if data to write
2743	.cde4						nextMaskedCharY:
2744	.cde4		ae 26 03	ldx $0326	                ldx vduv.graphicsCursorPixelsY+0
2745	.cde7		d0 03		bne $cdec	                bne +
2746	.cde9		ce 27 03	dec $0327	                dec vduv.graphicsCursorPixelsY+1
2747	.cdec						+
2748	.cdec		ce 26 03	dec $0326	                dec vduv.graphicsCursorPixelsY+0
2749	.cdef		c8		iny		                iny
2750	.cdf0		d0 ed		bne $cddf	                bne plotMaskedCharLoop
2751	.cdf2		a2 2a		ldx #$2a	                ldx #VDUVariables.workspace._2A
2752	.cdf4		a0 26		ldy #$26	                ldy #VDUVariables.graphicsCursorPixelsY
2753	.cdf6		4c 0a c9	jmp $c90a	                jmp copyTwoBytesWithinVDUVariables

2755	.cdf9						vdu127AtGraphicsCursor:
2756							                ; CHR$127 is a solid block, not a backspace.
2757	.cdf9		a9 f8		lda #$f8	                lda #<terminal.chr127
2758	.cdfb		85 de		sta $de		                sta ZTEMPC+0
2759	.cdfd		a9 bb		lda #$bb	                lda #>terminal.chr127
2760	.cdff		85 df		sta $df		                sta ZTEMPC+1
2761	.ce01		a2 08		ldx #$08	                ldx #$08
2762	.ce03		8e 59 03	stx $0359	                stx vduv.graphicsPlotState   ;plot in background colour
2763	.ce06		a9 00		lda #$00	                lda #$00
2764	.ce08		80 95		bra $cd9f	                bra plotFontDataAtGraphicsCursorWithPlotMode

2766	.ce0a						LCE0C:
2767	.ce0a		20 2b d1	jsr $d12b	                jsr handleColumn81
2768	.ce0d		b0 85		bcs $cd94	                bcs plotCharAtGraphicsCursor          ;taken if VDU5
2769	.ce0f		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
2770	.ce12		f0 37		beq $ce4b	                beq writeTeletextChar
2771	.ce14		20 2a e2	jsr $e22a	                jsr getSoftCharacterDefinitionAddress
2772	.ce17						writeBitmapChar:
2773	.ce17		a0 07		ldy #$07	                ldy #$07
2774	.ce19		e0 03		cpx #$03	                cpx #$03
2775	.ce1b		f0 34		beq $ce51	                beq write2bppChar            ;taken if MODE 1/5
2776	.ce1d		b0 5b		bcs $ce7a	                bcs write4bppChar                    ;taken if MODE 2
2777	.ce1f						write1bppChar:
2778	.ce1f		b1 de		lda ($de),y	                lda (ZTEMPC),y
2779	.ce21		05 d2		ora $d2		                ora ZORA
2780	.ce23		45 d3		eor $d3		                eor ZEOR
2781	.ce25		91 d8		sta ($d8),y	                sta (ZMEMT),y
2782	.ce27		88		dey		                dey
2783	.ce28		10 f5		bpl $ce1f	                bpl write1bppChar
2784	.ce2a		60		rts		                rts

2786	.ce2b						vdu127EntryPoint:
2787	.ce2b		a9 20		lda #$20	                lda #$20
2788	.ce2d		2c 66 03	bit $0366	                bit $0366
2789	.ce30		d0 03		bne $ce35	                bne LCE37
2790	.ce32		20 9a c2	jsr $c29a	                jsr vdu8EntryPoint
2791	.ce35						LCE37:
2792	.ce35		20 d0 e2	jsr $e2d0	                jsr testVDU5State
2793	.ce38		d0 bf		bne $cdf9	                bne vdu127AtGraphicsCursor
2794	.ce3a		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
2795	.ce3d		f0 0a		beq $ce49	                beq writeTeletextSpaceChar   ;taken if teletext mode

2797							                ; Address of space char is known.
2798	.ce3f		a9 00		lda #$00	                lda #<terminal.LB900
2799	.ce41		85 de		sta $de		                sta ZTEMPC+0
2800	.ce43		a9 b9		lda #$b9	                lda #>terminal.LB900
2801	.ce45		85 df		sta $df		                sta ZTEMPC+1
2802	.ce47		80 ce		bra $ce17	                bra writeBitmapChar

2804	.ce49						writeTeletextSpaceChar:
2805	.ce49		a9 20		lda #$20	                lda #$20
2806	.ce4b						writeTeletextChar:
2807	.ce4b		20 e3 dd	jsr $dde3	                jsr getSAA5050FromASCII
2808	.ce4e		92 d8		sta ($d8)	                sta (ZMEMT)
2809	.ce50		60		rts		                rts

2811	.ce51						write2bppChar:
2812	.ce51		a5 d9		lda $d9		                lda ZMEMT+1
2813	.ce53		a6 d8		ldx $d8		                ldx ZMEMT+0
2814	.ce55		20 e5 ce	jsr $cee5	                jsr getNextColumnAddress
2815	.ce58						-
2816	.ce58		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte
2817	.ce5a		29 0f		and #$0f	                and #$0F                     ;get data for right 4 pixels
2818	.ce5c		aa		tax		                tax
2819	.ce5d		bd 11 e0	lda $e011,x	                lda LE013,x                  ;form byte
2820	.ce60		05 d2		ora $d2		                ora ZORA
2821	.ce62		45 d3		eor $d3		                eor ZEOR
2822	.ce64		91 e0		sta ($e0),y	                sta (ZTEMPD),y               ;write to right column
2823	.ce66		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte
2824							                .if version==350
2826							                .else
2827	.ce68		4a		lsr a		                lsr a                        ;
2828	.ce69		4a		lsr a		                lsr a                        ;
2829	.ce6a		4a		lsr a		                lsr a                        ;
2830	.ce6b		4a		lsr a		                lsr a                        ;get data for left 4 pixels
2831							                .endif
2832	.ce6c		aa		tax		                tax                          ;
2833	.ce6d		bd 11 e0	lda $e011,x	                lda LE013,x                  ;form byte
2834	.ce70		05 d2		ora $d2		                ora ZORA
2835	.ce72		45 d3		eor $d3		                eor ZEOR
2836	.ce74		91 d8		sta ($d8),y	                sta (ZMEMT),y                ;write to left column
2837	.ce76		88		dey		                dey
2838	.ce77		10 df		bpl $ce58	                bpl -
2839	.ce79		60		rts		                rts

2841	.ce7a						write4bppChar:
2842	.ce7a		a5 d9		lda $d9		                lda ZMEMT+1
2843	.ce7c		a6 d8		ldx $d8		                ldx ZMEMT+0
2844	.ce7e		20 d7 ce	jsr $ced7	                jsr getNext3ColumnAddresses
2845	.ce81						-
2846	.ce81		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte - %abcdefgh
2847	.ce83		20 a7 ce	jsr $cea7	                jsr get4bppScreenByteFor2Pixels ;pixels g and h
2848	.ce86		91 e0		sta ($e0),y	                sta ($E0),y
2849	.ce88		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte - %abcdefgh
2850	.ce8a		4a		lsr a		                lsr a                        ;%0abcdefg
2851	.ce8b		4a		lsr a		                lsr a                        ;%00abcdef
2852	.ce8c		48		pha		                pha                          ;save %00abcdef
2853	.ce8d		20 a7 ce	jsr $cea7	                jsr get4bppScreenByteFor2Pixels ;pixels e and f
2854	.ce90		91 dc		sta ($dc),y	                sta (ZTEMPB),y
2855	.ce92		68		pla		                pla                          ;restore %00abcdef
2856	.ce93		4a		lsr a		                lsr a                        ;%000abcde
2857	.ce94		4a		lsr a		                lsr a                        ;%0000abcd
2858	.ce95		48		pha		                pha                          ;save %0000abcd
2859	.ce96		20 a7 ce	jsr $cea7	                jsr get4bppScreenByteFor2Pixels ;pixels c and d
2860	.ce99		91 da		sta ($da),y	                sta (ZTEMP),y
2861	.ce9b		68		pla		                pla                          ;restore %0000abcd
2862	.ce9c		4a		lsr a		                lsr a                        ;%00000abc
2863	.ce9d		4a		lsr a		                lsr a                        ;%000000ab
2864	.ce9e		20 a7 ce	jsr $cea7	                jsr get4bppScreenByteFor2Pixels ;pixels a and b
2865	.cea1		91 d8		sta ($d8),y	                sta (ZMEMT),y
2866	.cea3		88		dey		                dey
2867	.cea4		10 db		bpl $ce81	                bpl -
2868	.cea6		60		rts		                rts

2870	.cea7						get4bppScreenByteFor2Pixels:
2871	.cea7		29 03		and #$03	                and #$03                     ;mask out 2 pixels
2872	.cea9		aa		tax		                tax
2873	.ceaa		bd 21 e0	lda $e021,x	                lda LE023,x                  ;form byte
2874	.cead		05 d2		ora $d2		                ora ZORA
2875	.ceaf		45 d3		eor $d3		                eor ZEOR
2876	.ceb1		60		rts		                rts

2878							;-------------------------------------------------------------------------
2879							;
2880							; Get mask indicating the distance between two 16-bit VDU variable
2881							; values - >=8, or some amount less than that.
2882							;
2883							; (These can be used for masking pixels, or counting loops, or
2884							; whatever.)
2885							;
2886							; entry:
2887							;
2888							; X = offset of value A in VDU variables
2889							;
2890							; Y = offset of value B in VDU variables
2891							;
2892							; exit:
2893							;
2894							; if distance<=0, A=255, C=1
2895							;
2896							; if distance>=8, A=0, C=0
2897							;
2898							; otherwise, A=255>>distance, C=0
2899							;
2900	.ceb2						getDistanceMask:
2901	.ceb2		38		sec		                sec
2902	.ceb3		bd 00 03	lda $0300,x	                lda vduv+0,x
2903	.ceb6		f9 00 03	sbc $0300,y	                sbc vduv+0,y
2904	.ceb9		85 da		sta $da		                sta ZTEMP                    ;get result LSB
2905	.cebb		bd 01 03	lda $0301,x	                lda vduv+1,x
2906	.cebe		f9 01 03	sbc $0301,y	                sbc vduv+1,y
2907	.cec1		30 0c		bmi $cecf	                bmi distanceMask255                  ;taken if result -ve
2908	.cec3		d0 0e		bne $ced3	                bne distanceMask0                  ;taken if result >=256
2909	.cec5		a6 da		ldx $da		                ldx ZTEMP
2910	.cec7		e0 08		cpx #$08	                cpx #$08
2911	.cec9		b0 08		bcs $ced3	                bcs distanceMask0                    ;taken if result>=8
2912	.cecb		bd 25 e1	lda $e125,x	                lda distanceMasksTable,x             ;get mask for <8 items
2913	.cece		60		rts		                rts

2915	.cecf						distanceMask255:
2916	.cecf		a9 ff		lda #$ff	                lda #%11111111
2917	.ced1		38		sec		                sec
2918	.ced2		60		rts		                rts

2920	.ced3						distanceMask0:
2921	.ced3		a9 00		lda #$00	                lda #$00
2922	.ced5		18		clc		                clc
2923	.ced6		60		rts		                rts

2925							;-------------------------------------------------------------------------
2926							;
2927							; Get addresses of next 3 columns on screen.
2928							;
2929							; entry:
2930							;
2931							; A (MSB)/X (LSB) = address
2932							;
2933							; exit:
2934							;
2935							; (ZTEMP) = column N+1
2936							; (ZTEMPB) = column N+2
2937							; (ZTEMPC) = column N+3
2938							;
2939	.ced7						getNext3ColumnAddresses:
2940	.ced7		20 e5 ce	jsr $cee5	                jsr getNextColumnAddress
2941	.ceda		86 da		stx $da		                stx ZTEMP+0
2942	.cedc		85 db		sta $db		                sta ZTEMP+1
2943	.cede		20 e5 ce	jsr $cee5	                jsr getNextColumnAddress
2944	.cee1		86 dc		stx $dc		                stx ZTEMPB+0
2945	.cee3		85 dd		sta $dd		                sta ZTEMPB+1

2947							;-------------------------------------------------------------------------
2948							;
2949							; Get address of next column on screen.
2950							;
2951							; entry:
2952							;
2953							; A (MSB)/X (LSB) = address
2954							;
2955							; exit:
2956							;
2957							; A (MSB)/X (LSB) = address of next column
2958							; (ZTEMPD) = address of next column
2959							;
2960	.cee5						getNextColumnAddress:
2961	.cee5		48		pha		                pha
2962	.cee6		8a		txa		                txa
2963	.cee7		18		clc		                clc
2964	.cee8		69 08		adc #$08	                adc #$08                     ;next column...
2965	.ceea		aa		tax		                tax
2966	.ceeb		68		pla		                pla
2967	.ceec		90 06		bcc $cef4	                bcc +                        ;taken if no carry
2968	.ceee		1a		inc a		                inc a
2969	.ceef		10 03		bpl $cef4	                bpl +           ;taken if no screen address wraparound
2970	.cef1		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
2971	.cef4						+
2972	.cef4		86 e0		stx $e0		                stx ZTEMPD+0
2973	.cef6		85 e1		sta $e1		                sta ZTEMPD+1
2974	.cef8		60		rts		                rts

2976							;-------------------------------------------------------------------------
2977							;
2978							; VDU 23 0 Control 6845 CRTC directly [MasRef E.3-12]
2979							;
2980	.cef9						vdu23_0_EntryPoint:
2981	.cef9		ad 1d 03	lda $031d	                lda vduv.queueEnd-7           ;get value
2982	.cefc		ac 1c 03	ldy $031c	                ldy vduv.queueEnd-8           ;get register

2984							                ; fall through to setCRTCRegister

2986							;-------------------------------------------------------------------------
2987							;
2988							; Set a CRTC register, adjusting and/or noting values if appropriate.
2989							;
2990							; entry:
2991							;
2992							; Y = register to set
2993							;
2994							; A = value

2996	.ceff						setCRTCRegister:
2997	.ceff		c0 07		cpy #$07	                cpy #$07
2998	.cf01		90 1f		bcc $cf22	                bcc setCRTCRegisterRaw
2999	.cf03		d0 03		bne $cf08	                bne +        ;taken if not setting R7

3001							                ; Setting R7 (vsync position), so apply the *TV offset.
3002	.cf05		6d 90 02	adc $0290	                adc tvOffset
3003	.cf08						+
3004	.cf08		c0 08		cpy #$08	                cpy #$08
3005	.cf0a		d0 07		bne $cf13	                bne +                    ;taken if not setting R8

3007							                ; Setting R8 (interlace/delay register), so apply the
3008							                ; *TV interlace setting.
3009	.cf0c		09 00		ora #$00	                ora #$00
3010	.cf0e		30 03		bmi $cf13	                bmi +       ;branch taken if bit 7 set - this is taken
3011							                            ;to imply the mode being set is Mode 7
3012	.cf10		4d 91 02	eor $0291	                eor tvInterlace ;apply *TV interlace setting
3013	.cf13						+
3014	.cf13		c0 0a		cpy #$0a	                cpy #$0A
3015	.cf15		d0 0b		bne $cf22	                bne setCRTCRegisterRaw

3017							                ; Setting R10 (cursor start register). Note the new
3018							                ; setting in the VDU variable. If in VDU5 mode, reuse
3019							                ; the result of testVDU5State - i.e., 32 - as the
3020							                ; setting, hiding the cursor.
3021	.cf17		8d 5f 03	sta $035f	                sta vduv.lastCursorStartRegisterValue
3022	.cf1a		20 d0 e2	jsr $e2d0	                jsr testVDU5State
3023	.cf1d		d0 09		bne $cf28	                bne rtsCF2A
3024	.cf1f		ad 5f 03	lda $035f	                lda vduv.lastCursorStartRegisterValue

3026							                ; fall through to setCRTCRegisterRaw

3028							;-------------------------------------------------------------------------
3029							;
3030							; Set a CRTC register.
3031							;
3032	.cf22						setCRTCRegisterRaw:
3033	.cf22		8c 00 fe	sty $fe00	                sty CRTC+0
3034	.cf25		8d 01 fe	sta $fe01	                sta CRTC+1
3035	.cf28						rtsCF2A:
3036	.cf28		60		rts		                rts

3038							;-------------------------------------------------------------------------
3039							;
3040							; VDU 23 1 Turn cursor on/off [MasRef E.3-12]
3041							;
3042	.cf29						vdu23_1_EntryPoint:
3043	.cf29		20 d0 e2	jsr $e2d0	                jsr testVDU5State
3044	.cf2c		d0 fa		bne $cf28	                bne rtsCF2A                  ;taken if VDU5
3045	.cf2e		ad 1c 03	lda $031c	                lda vduv.queueEnd-8           ;get new cursor state
3046	.cf31		29 03		and #$03	                and #$03                     ;mask off bits of interest
3047	.cf33		0a		asl a		                asl a
3048	.cf34		aa		tax		                tax
3049	.cf35		a9 20		lda #$20	                lda #$20 ;R10 value for hiding the cursor - save a few
3050							                         ;bytes by loading this here
3051	.cf37		7c 3a cf	jmp ($cf3a,x)	                jmp (LCF3C,x)

3053	.cf3a						LCF3C:
3054	>cf3a		51 cf				                .word setCRTCRegister10            ; 23,1,0... - hide
3055	>cf3c		4e cf				                .word showCursor            ; 23,1,1... - show
3056	>cf3e		42 cf				                .word steadyCursor          ; 23,1,2... - steady
3057	>cf40		49 cf				                .word slowFlashCursor       ; 23,1,3... - flash slowly

3059	.cf42						steadyCursor:
3060	.cf42		a9 60		lda #$60	                lda #%01100000
3061	.cf44		1c 5f 03	trb $035f	                trb vduv.lastCursorStartRegisterValue ;steady cursor
3062	.cf47		80 05		bra $cf4e	                bra showCursor

3064	.cf49						slowFlashCursor:
3065	.cf49		a9 60		lda #$60	                lda #%01100000
3066	.cf4b		0c 5f 03	tsb $035f	                tsb vduv.lastCursorStartRegisterValue ;slow blink cursor
3067	.cf4e						showCursor:
3068	.cf4e		ad 5f 03	lda $035f	                lda vduv.lastCursorStartRegisterValue
3069	.cf51						setCRTCRegister10:
3070	.cf51		a0 0a		ldy #$0a	                ldy #$0A
3071	.cf53		80 cd		bra $cf22	                bra setCRTCRegisterRaw

3073							;-------------------------------------------------------------------------
3074							;
3075							; VDU 23 2â<80><93>5 Set ECF patterns [MasRef E.3-13]
3076							;
3077	.cf55						vdu23_2_EntryPoint:
3078	.cf55						vdu23_3_EntryPoint:
3079	.cf55						vdu23_4_EntryPoint:
3080	.cf55						vdu23_5_EntryPoint:
3081	.cf55		e9 01		sbc #$01	                sbc #$01  ;subtract 2 (C=0 on entry...) to get pattern
3082							                          ;index
3083	.cf57		0a		asl a		                asl a
3084	.cf58		0a		asl a		                asl a
3085	.cf59		0a		asl a		                asl a                        ;index*8
3086	.cf5a		69 07		adc #$07	                adc #$07                     ;index*8+7
3087	.cf5c		a8		tay		                tay
3088	.cf5d		a2 07		ldx #$07	                ldx #$07
3089	.cf5f						-
3090	.cf5f		bd 1c 03	lda $031c,x	                lda vduv.queueEnd-8,x
3091	.cf62		99 00 88	sta $8800,y	                sta andy.ecfPatterns,y
3092	.cf65		88		dey		                dey
3093	.cf66		ca		dex		                dex
3094	.cf67		10 f6		bpl $cf5f	                bpl -
3095	.cf69		80 26		bra $cf91	                bra LCF93

3097							;-------------------------------------------------------------------------

3099	.cf6b						vdu23_11_EntryPoint:
3100	.cf6b		ad 55 03	lda $0355	                lda vduv.currentScreenMODE
3101	.cf6e		d0 01		bne $cf71	                bne +
3102							                ; Use a different table for MODE 0 - see MasRef E.3-16.
3103	.cf70		3a		dec a		                dec a                        ;
3104	.cf71						+
3105	.cf71		29 03		and #$03	                and #$03 ;index=0 (mode 4); 1 (mode 1/5); 2 (mode 2);
3106							                         ;3 (mode 0)
3107	.cf73		1a		inc a		                inc a
3108	.cf74		0a		asl a		                asl a
3109	.cf75		0a		asl a		                asl a
3110	.cf76		0a		asl a		                asl a
3111	.cf77		0a		asl a		                asl a                        ;(index+1)*16
3112	.cf78		aa		tax		                tax
3113	.cf79		a0 1c		ldy #$1c	                ldy #32-4
3114	.cf7b						setDefaultECFPatterns:
3115	.cf7b		bd c1 e1	lda $e1c1,x	                lda defaultECFPatterns-1,x
3116	.cf7e		99 ff 87	sta $87ff,y	                sta andy.ecfPatterns-1,y     ;copy first repeat
3117	.cf81		99 03 88	sta $8803,y	                sta andy.ecfPatterns+4-1,y   ;copy second repeat
3118	.cf84		ca		dex		                dex                          ;next byte in defaults table
3119	.cf85		88		dey		                dey
3120	.cf86		98		tya		                tya
3121	.cf87		89 07		bit #$07	                bit #$07
3122	.cf89		d0 f0		bne $cf7b	                bne setDefaultECFPatterns ;taken if pattern not filled
3123							                ; skip to start of previous pattern
3124	.cf8b		88		dey		                dey
3125	.cf8c		88		dey		                dey
3126	.cf8d		88		dey		                dey
3127	.cf8e		88		dey		                dey
3128	.cf8f		10 ea		bpl $cf7b	                bpl setDefaultECFPatterns
3129	.cf91						LCF93:
3130	.cf91		4c 7d c5	jmp $c57d	                jmp initializeCurrentECFPatterns

3132							;-------------------------------------------------------------------------
3133							;
3134							; VDU 23 12â<80><93>15 Set simple ECF pattern [MasRef E.3-17]
3135							;
3136	.cf94						vdu23_12_EntryPoint:
3137	.cf94						vdu23_13_EntryPoint:
3138	.cf94						vdu23_14_EntryPoint:
3139	.cf94						vdu23_15_EntryPoint:
3140	.cf94		e9 0b		sbc #$0b	                sbc #$0B                     ;-12 to get pattern index
3141	.cf96		0a		asl a		                asl a                        ;index*2
3142	.cf97		0a		asl a		                asl a                        ;index*4
3143	.cf98		0a		asl a		                asl a                        ;index*8, C=0
3144	.cf99		69 03		adc #$03	                adc #$03                     ;index*8+3, C=0
3145	.cf9b		48		pha		                pha                          ;save offset
3146	.cf9c		a2 07		ldx #$07	                ldx #$07                     ;
3147	.cf9e						LCFA0:
3148	.cf9e		bd 1c 03	lda $031c,x	                lda vduv.queueEnd-8,x        ;get simple pattern byte
3149	.cfa1		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne ;apply logical colour limit
3150	.cfa4		85 da		sta $da		                sta ZTEMP+0
3151	.cfa6		ad 60 03	lda $0360	                lda vduv.numberOfLogicalColoursMinusOne
3152	.cfa9		29 07		and #$07	                and #$07                     ;1/3/7
3153	.cfab		65 da		adc $da		                adc ZTEMP+0                  ;select 2/4/16 colour table
3154	.cfad		a8		tay		                tay
3155	.cfae		b9 49 e1	lda $e149,y	                lda solidColoursTable-1,y
3156	.cfb1		9d 1c 03	sta $031c,x	                sta vduv.queueEnd-8,x
3157	.cfb4		ca		dex		                dex
3158	.cfb5		10 e7		bpl $cf9e	                bpl LCFA0
3159	.cfb7		a9 55		lda #$55	                lda #%01010101
3160	.cfb9		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
3161	.cfbc		d0 02		bne $cfc0	                bne +                 ;taken if not MODE 0
3162	.cfbe		a9 33		lda #$33	                lda #%00110011        ;double-width pattern for MODE 0
3163	.cfc0						+
3164	.cfc0		85 da		sta $da		                sta ZTEMP+0
3165	.cfc2		7a		ply		                ply
3166	.cfc3		a2 07		ldx #$07	                ldx #$07
3167	.cfc5						LCFC7:
3168	.cfc5		bd 1c 03	lda $031c,x	                lda vduv.queueEnd-8,x
3169	.cfc8		ca		dex		                dex
3170	.cfc9		5d 1c 03	eor $031c,x	                eor vduv.queueEnd-8,x
3171	.cfcc		25 da		and $da		                and ZTEMP+0
3172	.cfce		5d 1c 03	eor $031c,x	                eor vduv.queueEnd-8,x
3173	.cfd1		99 00 88	sta $8800,y	                sta andy.ecfPatterns+0,y
3174	.cfd4		99 04 88	sta $8804,y	                sta andy.ecfPatterns+4,y
3175	.cfd7		88		dey		                dey
3176	.cfd8		ca		dex		                dex
3177	.cfd9		10 ea		bpl $cfc5	                bpl LCFC7
3178	.cfdb		80 b4		bra $cf91	                bra LCF93

3180							;-------------------------------------------------------------------------
3181							;
3182							; VDU 23 6 Set dotted lines pattern [MasRef E.3-13]
3183							;
3184	.cfdd						vdu23_6_EntryPoint:
3185	.cfdd		ad 1c 03	lda $031c	                lda vduv.queueEnd-8
3186	.cfe0		8d 67 03	sta $0367	                sta vduv.dotPattern
3187	.cfe3		60		rts		                rts

3189							;-------------------------------------------------------------------------
3190							;
3191							; VDU 23 7 Scroll window directly [MasRef E.3-14]
3192							;
3193	.cfe4						vdu23_7_EntryPoint:
3194	.cfe4		ad 1c 03	lda $031c	                lda vduv.queueEnd-8           ;get <m>
3195	.cfe7		d0 0a		bne $cff3	                bne scrollEntireScreen
3196	.cfe9		20 0e c9	jsr $c90e	                jsr copyTextWindowToWorkspace2C
3197	.cfec		a5 d0		lda $d0		                lda STATE
3198	.cfee		29 08		and #$08	                and #STATE.isTextWindow
3199	.cff0		0a		asl a		                asl a ;A=$10 (text window active) or $00 (no text window)
3200	.cff1		80 11		bra $d004	                bra +

3202	.cff3						scrollEntireScreen:
3203	.cff3		a9 00		lda #$00	                lda #$00
3204	.cff5		8d 2c 03	sta $032c	                sta vduv.workspace._2C          ;left
3205	.cff8		8d 2f 03	sta $032f	                sta vduv.workspace._2F          ;top
3206	.cffb		20 a0 e2	jsr $e2a0	                jsr getDefaultBoundsForCurrentScreenMODE
3207	.cffe		8e 2e 03	stx $032e	                stx vduv.workspace._2E          ;right
3208	.d001		8c 2d 03	sty $032d	                sty vduv.workspace._2D          ;bottom
3209	.d004						+
3210	.d004		85 dc		sta $dc		                sta ZTEMPB+0
3211	.d006		38		sec		                sec
3212	.d007		ad 2e 03	lda $032e	                lda vduv.workspace._2E          ;right
3213	.d00a		ed 2c 03	sbc $032c	                sbc vduv.workspace._2C          ;right-left
3214	.d00d		20 39 c9	jsr $c939	                jsr getBytesPerInclusiveTextRow
3215	.d010		8d 28 03	sta $0328	                sta vduv.workspace._28+0        ;bytes per row LSB
3216	.d013		8e 29 03	stx $0329	                stx vduv.workspace._28+1        ;bytes per row MSB
3217	.d016		ae 4f 03	ldx $034f	                ldx vduv.bytesPerCharacter
3218	.d019		e0 01		cpx #$01	                cpx #$01
3219	.d01b		f0 07		beq $d024	                beq +  ;when 1 byte/char, no cell/byte distinction
3220	.d01d		ad 1e 03	lda $031e	                lda vduv.queueEnd-6       ;get <z>
3221	.d020		f0 02		beq $d024	                beq +                ;taken if scrolling by 1 cell
3222	.d022		a2 08		ldx #$08	                ldx #$08                 ;scroll by 1 horizontal byte
3223	.d024						+
3224	.d024		8e 2a 03	stx $032a	                stx vduv.workspace._2A

3226							; <d> is a bitmask - %00000AVN.
3227							;
3228							; A is set if scrolling by axis (controlled by the VDU cursor flags)
3229							; rather than by direction.
3230							;
3231							; V is set to scroll vertically/in Y rather than horizontally/in X.
3232							;
3233							; N is set to scroll in the negative direction.

3235	.d027		ad 1d 03	lda $031d	                lda vduv.queueEnd-7           ;00000avn C=?
3236	.d02a		4a		lsr a		                lsr a                        ;000000av C=n
3237	.d02b		08		php		                php
3238	.d02c		2a		rol a		                rol a                        ;00000avn C=0
3239	.d02d		28		plp		                plp                          ;00000avn C=n
3240	.d02e		2a		rol a		                rol a                        ;0000avnn C=0
3241	.d02f		0a		asl a		                asl a                        ;000avnn0 C=0
3242	.d030		c9 10		cmp #$10	                cmp #$10                     ;$10 = 000a0000
3243	.d032		90 03		bcc $d037	                bcc LD039                 ;taken if scrolling by direction
3244	.d034		4d 66 03	eor $0366	                eor vduv.cursorFlags       ;adjust axes
3245	.d037						LD039:
3246	.d037		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
3247	.d039		05 dc		ora $dc		                ora ZTEMPB+0
3248	.d03b						LD03D:
3249	.d03b		aa		tax		                tax
3250	.d03c		ad 50 03	lda $0350	                lda vduv.screenTopLeftAddress+0
3251	.d03f		85 d8		sta $d8		                sta ZMEMT+0
3252	.d041		ad 51 03	lda $0351	                lda vduv.screenTopLeftAddress+1
3253	.d044		85 d9		sta $d9		                sta ZMEMT+1
3254	.d046		20 4c d0	jsr $d04c	                jsr callScrollRoutine
3255	.d049		4c d8 c6	jmp $c6d8	                jmp updateCRTCTextCursor

3257	.d04c						callScrollRoutine:
3258	.d04c		7c 0a e2	jmp ($e20a,x)	                jmp (scrollRoutinesTable,x)

3260	.d04f						LD051:
3261	.d04f		da		phx		                phx
3262	.d050		20 0e c9	jsr $c90e	                jsr copyTextWindowToWorkspace2C
3263	.d053		20 06 c9	jsr $c906	                jsr copyTextWindowWidthInBytesToWorkspace28
3264	.d056		ae 4f 03	ldx $034f	                ldx $034F
3265	.d059		8e 2a 03	stx $032a	                stx $032A
3266	.d05c		68		pla		                pla
3267	.d05d		4a		lsr a		                lsr a
3268	.d05e		45 d0		eor $d0		                eor STATE
3269	.d060		29 f7		and #$f7	                and #(~STATE.isTextWindow)&$ff
3270	.d062		45 d0		eor $d0		                eor STATE
3271	.d064		0a		asl a		                asl a
3272	.d065		80 d4		bra $d03b	                bra LD03D

3274							;-------------------------------------------------------------------------
3275							;
3276							; VDU 23 8 Clear block [MasRef E.3-15]
3277							;
3278	.d067						vdu23_8_EntryPoint:
3279	.d067		9c 34 03	stz $0334	                stz $0334
3280	.d06a		9c 35 03	stz $0335	                stz $0335
3281	.d06d		20 50 e2	jsr $e250	                jsr getTextCursorPositionWithColumn81
3282	.d070		8e 36 03	stx $0336	                stx $0336
3283	.d073		8c 37 03	sty $0337	                sty $0337
3284	.d076		20 5a e2	jsr $e25a	                jsr LE25C
3285	.d079		e8		inx		                inx
3286	.d07a		8e 38 03	stx $0338	                stx $0338
3287	.d07d		8c 39 03	sty $0339	                sty $0339
3288	.d080		a0 00		ldy #$00	                ldy #$00
3289	.d082		ad 1c 03	lda $031c	                lda $031C
3290	.d085		20 e3 d0	jsr $d0e3	                jsr LD0E5
3291	.d088		ad 1d 03	lda $031d	                lda $031D
3292	.d08b		20 e3 d0	jsr $d0e3	                jsr LD0E5
3293	.d08e		ad 33 03	lda $0333	                lda $0333
3294	.d091		cd 31 03	cmp $0331	                cmp $0331
3295	.d094		90 76		bcc $d10c	                bcc LD10E
3296	.d096		d0 08		bne $d0a0	                bne LD0A2
3297	.d098		ad 30 03	lda $0330	                lda $0330
3298	.d09b		cd 32 03	cmp $0332	                cmp $0332
3299	.d09e		b0 6c		bcs $d10c	                bcs LD10E
3300	.d0a0						LD0A2:
3301	.d0a0		ad 18 03	lda $0318	                lda $0318
3302	.d0a3		48		pha		                pha
3303	.d0a4		ad 19 03	lda $0319	                lda $0319
3304	.d0a7		48		pha		                pha
3305	.d0a8		ac 31 03	ldy $0331	                ldy $0331
3306	.d0ab						LD0AD:
3307	.d0ab		5a		phy		                phy
3308	.d0ac		ad 66 03	lda $0366	                lda $0366
3309	.d0af		49 08		eor #$08	                eor #$08
3310	.d0b1		29 0e		and #$0e	                and #$0E
3311	.d0b3		aa		tax		                tax
3312	.d0b4		98		tya		                tya
3313	.d0b5		20 c7 c2	jsr $c2c7	                jsr setTextCursorXPositionWithCursorFlags
3314	.d0b8		a2 00		ldx #$00	                ldx #$00
3315	.d0ba		ad 38 03	lda $0338	                lda $0338
3316	.d0bd		cc 31 03	cpy $0331	                cpy $0331
3317	.d0c0		d0 03		bne $d0c5	                bne LD0C7
3318	.d0c2		ae 30 03	ldx $0330	                ldx $0330
3319	.d0c5						LD0C7:
3320	.d0c5		cc 33 03	cpy $0333	                cpy $0333
3321	.d0c8		f0 07		beq $d0d1	                beq LD0D3
3322	.d0ca		20 7d ca	jsr $ca7d	                jsr LCA7F
3323	.d0cd		7a		ply		                ply
3324	.d0ce		c8		iny		                iny
3325	.d0cf		80 da		bra $d0ab	                bra LD0AD

3327	.d0d1						LD0D3:
3328	.d0d1		ad 32 03	lda $0332	                lda $0332
3329	.d0d4		20 7d ca	jsr $ca7d	                jsr LCA7F
3330	.d0d7		7a		ply		                ply
3331	.d0d8		68		pla		                pla
3332	.d0d9		8d 19 03	sta $0319	                sta $0319
3333	.d0dc		68		pla		                pla
3334	.d0dd		8d 18 03	sta $0318	                sta $0318
3335	.d0e0		4c f8 cc	jmp $ccf8	                jmp updateZMEMTWithTextCursorPosition

3337	.d0e3						LD0E5:
3338	.d0e3		48		pha		                pha
3339	.d0e4		29 03		and #$03	                and #$03
3340	.d0e6		0a		asl a		                asl a
3341	.d0e7		20 ee d0	jsr $d0ee	                jsr LD0F0
3342	.d0ea		68		pla		                pla
3343	.d0eb		4a		lsr a		                lsr a
3344	.d0ec		09 01		ora #$01	                ora #$01
3345	.d0ee						LD0F0:
3346	.d0ee		aa		tax		                tax
3347	.d0ef		29 01		and #$01	                and #$01
3348	.d0f1		48		pha		                pha
3349	.d0f2		bd 34 03	lda $0334,x	                lda $0334,x
3350	.d0f5		fa		plx		                plx
3351	.d0f6		18		clc		                clc
3352	.d0f7		c8		iny		                iny
3353	.d0f8		79 1d 03	adc $031d,y	                adc $031D,y
3354	.d0fb		30 0a		bmi $d107	                bmi LD109
3355	.d0fd		dd 38 03	cmp $0338,x	                cmp $0338,x
3356	.d100		90 07		bcc $d109	                bcc LD10B
3357	.d102		bd 38 03	lda $0338,x	                lda $0338,x
3358	.d105		80 02		bra $d109	                bra LD10B

3360	.d107						LD109:
3361	.d107		a9 00		lda #$00	                lda #$00
3362	.d109						LD10B:
3363	.d109		99 2f 03	sta $032f,y	                sta $032F,y
3364	.d10c						LD10E:
3365	.d10c		60		rts		                rts

3367							;-------------------------------------------------------------------------
3368							;
3369							; VDU 23 9 Set 1st flash time [MasRef E.3-16]
3370							;
3371	.d10d						vdu23_9_EntryPoint:
3372	.d10d		38		sec		                sec

3374							;-------------------------------------------------------------------------
3375							;
3376							; VDU 23 10 Set 2nd flash time [MasRef E.3-16]
3377							;
3378	.d10e						vdu23_10_EntryPoint:
3379	.d10e		ae 1c 03	ldx $031c	                ldx vduv.queueEnd-8          ;get flash value
3380	.d111		a0 00		ldy #$00	                ldy #$00                     ;Y=0 for OSBYTE call
3381	.d113		90 03		bcc $d118	                bcc doOSBYTE0A               ;taken if VDU23,10
3382	.d115		4c f4 ea	jmp $eaf4	                jmp osbyte09
3383	.d118						doOSBYTE0A:
3384	.d118		38		sec		                sec
3385	.d119		4c f6 ea	jmp $eaf6	                jmp osbyte0A

3387							;-------------------------------------------------------------------------
3388							;
3389							; VDU 23 16 Cursor movement control [MasRef E.3-17]
3390							;
3391	.d11c						vdu23_16_EntryPoint:
3392	.d11c		ad 66 03	lda $0366	                lda vduv.cursorFlags
3393	.d11f		2d 1d 03	and $031d	                and vduv.queueEnd-7          ;value AND <y>
3394	.d122		4d 1c 03	eor $031c	                eor vduv.queueEnd-8          ;(value AND <y>) EOR <x>
3395	.d125		8d 66 03	sta $0366	                sta vduv.cursorFlags
3396	.d128		4a		lsr a		                lsr a
3397	.d129		b0 18		bcs $d143	                bcs rtsD145            ;taken if scrollProtect flag on
3398							                ; scroll protect flag is off, so handle column 81 if
3399							                ; necessary.

3401							;-------------------------------------------------------------------------
3402							;
3403							; Handle column 81, if necessary.
3404							;
3405							; TODO - probably misnamed due to the return value
3406							;
3407							; exit:
3408							;
3409							; C=0 if not VDU 5
3410							;
3411							; C=1 if VDU 5
3412							;
3413	.d12b						handleColumn81:
3414	.d12b		48		pha		                pha
3415	.d12c		da		phx		                phx
3416	.d12d		20 d0 e2	jsr $e2d0	                jsr testVDU5State
3417	.d130		38		sec		                sec
3418	.d131		d0 0e		bne $d141	                bne plx_pla_rts        ;taken if VDU5
3419	.d133		18		clc		                clc
3420	.d134		2c 6c 03	bit $036c	                bit vduv.column81
3421	.d137		10 08		bpl $d141	                bpl plx_pla_rts        ;taken if not column 81
3422	.d139		08		php		                php
3423	.d13a		20 f6 c3	jsr $c3f6	                jsr vdu13EntryPoint          ;CR
3424	.d13d		20 5b c2	jsr $c25b	                jsr vdu10EntryPoint          ;LF
3425	.d140		28		plp		                plp
3426	.d141						plx_pla_rts:
3427	.d141		fa		plx		                plx
3428	.d142		68		pla		                pla
3429	.d143						rtsD145:
3430	.d143		60		rts		                rts

3432							;-------------------------------------------------------------------------
3433							;
3434							; Handle PLOT. [MasRef E.3-21]
3435							;
3436							; PLOT numbers are of the form %pppppamm, where %ppppp is the PLOT
3437							; type, %a the absolute flag and %mm the PLOT mode.
3438							;
3439							; Absolute flag and mode are clear enough from [MasRef E.3-22]. The
3440							; %ppppp part isn't documented as such, so here's a list:
3441							;
3442							; %00000 =  0 = 0-7 = Plot solid line (both endpoints included) [MasRef E.3-23]
3443							; %00001 =  1 = 8-15 = Plot solid line (final point omitted) [MasRef E.3-23]
3444							; %00010 =  2 = 16-23 = Plot solid line (final point omitted) [MasRef E.3-23]
3445							; %00011 =  3 = 24-31 = Plot dotted line (final point omitted) [MasRef E.3-23]
3446							; %00100 =  4 = 32-39 = Plot solid line (initial point omitted) [MasRef E.3-24]
3447							; %00101 =  5 = 40-47 = Plot solid line (both endpoints omitted) [MasRef E.3-24]
3448							; %00110 =  6 = 48-55 = Plot dotted line (initial point omitted) [MasRef E.3-24]
3449							; %00111 =  7 = 56â<80><93>63 = Plot dotted line (both endpoints omitted) [MasRef E.3-24]
3450							; %01000 =  8 = 64â<80><93>71 = Plot point [MasRef E.3-24]
3451							; %01001 =  9 = 72â<80><93>79 = Horizontal line fill (left and right to non-background) [MasRef E.3-24]
3452							; %01010 = 10 = 80â<80><93>87 = Plot triangle [MasRef E.3-25]
3453							; %01011 = 11 = 88â<80><93>95 = Horizontal line fill (right to background) [MasRef E.3-25]
3454							; %01100 = 12 = 96â<80><93>103 = Plot rectangle [MasRef E.3-26]
3455							; %01101 = 13 = 104â<80><93>111 = Horizontal line fill (left and right to foreground) [MasRef E.3-26]
3456							; %01110 = 14 = 112â<80><93>119 = Plot parallelogram [MasRef E.3-27]
3457							; %01111 = 15 = 120â<80><93>127 = Horizontal line fill (right to non-foreground) [MasRef E.3-27]
3458							; %10000 = 16 = 128â<80><93>135 = Flood fill to non-background [MasRef E.3-28]
3459							; %10001 = 17 = 136â<80><93>143 = Flood fill to foreground [MasRef E.3-28]
3460							; %10010 = 18 = 144â<80><93>151 = Plot circle outline [MasRef E.3-28]
3461							; %10011 = 19 = 152â<80><93>159 = Plot filled circle [MasRef E.3-29]
3462							; %10100 = 20 = 160â<80><93>167 = Plot circular arc [MasRef E.3-29]
3463							; %10101 = 21 = 168â<80><93>175 = Plot filled chord segment [MasRef E.3-30]
3464							; %10110 = 22 = 176â<80><93>183 = Plot filled sector [MasRef E.3-30]
3465							; %10111 = 23 = 184â<80><93>191 = Move/copy rectangle [MasRef E.3-31]
3466							; %11000 = 24 = 192â<80><93>199 = Plot ellipse outline [MasRef E.3-32]
3467							; %11001 = 25 = 200â<80><93>207 = Plot solid ellipse [MasRef E.3-32]
3468							; %11010 = 26 = 208-215 = Reserved [MasRef E.3-34]
3469							; %11011 = 27 = 215-223 = Reserved [MasRef E.3-34]
3470							; %11100 = 28 = 224-231 = Reserved [MasRef E.3-34]
3471							; %11101 = 29 = 232-239 = Reserved for Acornsoft sprites [MasRef E.3-34]
3472							; %11110 = 30 = 240-247 = User program calls [MasRef E.3-34]
3473							; %11111 = 31 = 248-255 = User program calls [MasRef E.3-34]
3474							;
3475							; entry:
3476							;
3477							; vduQueueEnd-5 = PLOT number
3478							;
3479							; vduQueueEnd-3 = X coordinate
3480							;
3481							; vduQueueEnd-1 = Y coordinate
3482							;;

3484	.d144						handlePLOT:
3485	.d144		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
3486	.d146		20 e0 d1	jsr $d1e0	                jsr eigabsForPLOT
3487	.d149		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number
3488	.d14c		a0 05		ldy #$05	                ldy #gcolModeLeave                     ;
3489	.d14e		29 03		and #$03	                and #$03                     ;mask out colour/plot mode [MasRef E.3-22]
3490	.d150		f0 0c		beq $d15e	                beq LD160 ;taken if <p> MOD 4=0 - early out
3491	.d152		4a		lsr a		                lsr a                        ;C=1 if using VDU18 settings
3492	.d153		88		dey		                dey                          ;Y=gcolModeInvert
3493	.d154		90 08		bcc $d15e	                bcc LD160                    ;taken if invert mode
3494	.d156		aa		tax		                tax              ;X=0 if fg settings, 1 if bg settings
3495	.d157		bc 5b 03	ldy $035b,x	                ldy vduv.foregroundGCOLMode,x
3496	.d15a		0a		asl a		                asl a
3497	.d15b		0a		asl a		                asl a
3498	.d15c		0a		asl a		                asl a
3499	.d15d		aa		tax		                tax              ;X=0 if fg settings, 8 if bg settings
3500	.d15e						LD160:
3501	.d15e		8e 59 03	stx $0359	                stx vduv.graphicsPlotState
3502	.d161		98		tya		                tya
3503	.d162		29 0f		and #$0f	                and #$0F
3504	.d164		8d 5a 03	sta $035a	                sta vduv.graphicsPlotMode
3505	.d167		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number pppppmmm
3506	.d16a		4a		lsr a		                lsr a                        ;0pppppmm
3507	.d16b		4a		lsr a		                lsr a                        ;00pppppm
3508	.d16c		29 fe		and #$fe	                and #$fe                     ;00ppppp0
3509	.d16e		aa		tax		                tax
3510	.d16f		c9 34		cmp #$34	                cmp #208/4
3511	.d171		b0 1b		bcs $d18e	                bcs LD190                    ;taken if reserved PLOT
3512	.d173		29 f3		and #$f3	                and #$F3                     ;00pp00p0
3513	.d175		c9 12		cmp #$12	                cmp #$12                     ;
3514	.d177		08		php		                php                          ;
3515	.d178		f0 08		beq $d182	                beq LD184                ;taken if horizonal line fill
3516	.d17a		e0 2e		cpx #$2e	                cpx #184/4
3517	.d17c		f0 04		beq $d182	                beq LD184                ;taken if move/copy rectangle
3518	.d17e		c0 05		cpy #$05	                cpy #gcolModeLeave
3519	.d180		f0 19		beq $d19b	                beq LD19D
3520	.d182						LD184:
3521	.d182		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number
3522	.d185		20 91 d1	jsr $d191	                jsr LD193
3523	.d188		28		plp		                plp
3524	.d189		d0 11		bne $d19c	                bne LD19E
3525	.d18b		4c df c4	jmp $c4df	                jmp LC4DF

3527	.d18e						LD190:
3528	.d18e		4c a3 c6	jmp $c6a3	                jmp callVDUVForPLOT

3530	.d191						LD193:
3531	.d191		e0 10		cpx #$10	                cpx #64/4
3532	.d193		b0 03		bcs $d198	                bcs LD19A                     ;taken if PLOT >=64
3533	.d195		4c a7 d8	jmp $d8a7	                jmp LD8A9                    ;handle line PLOTs

3535	.d198						LD19A:
3536	.d198		7c 79 e0	jmp ($e079,x)	                jmp (plotEntryPointTable-8*2,x)

3538	.d19b						LD19D:
3539	.d19b		68		pla		                pla
3540	.d19c						LD19E:
3541	.d19c		20 18 c9	jsr $c918	                jsr copyGraphicsCursorPixelsToOldGraphicsCursorPixels
3542	.d19f		a0 24		ldy #$24	                ldy #$24
3543	.d1a1		4c 14 c9	jmp $c914	                jmp copyLastFourVDUQueueBytes

3545	.d1a4						LD1A6:
3546	.d1a4		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX

3548							;-------------------------------------------------------------------------
3549							;
3550							; WIND [MasRef E.4-7]. The result is a bit field, %vvhh, where %vv is
3551							; the outcode for the vertical axis and %hh the outcode for the
3552							; horizontal axis. Each outcode is %xn, where x is set if point above
3553							; maximum and n set if point below minimum. (Of course, %11 is then
3554							; not possible.)
3555							;
3556							; See https://en.wikipedia.org/wiki/Cohen%E2%80%93Sutherland_algorithm
3557							;
3558							; So the possible results, in binary, are:
3559							;
3560							; %1001 | %1000 | %1010
3561							; ------+-------+------
3562							; %0001 | %0000 | %0010
3563							; ------+-------+------
3564							; %0101 | %0100 | %0110
3565							;
3566	.d1a6						windEntryPoint:
3567	.d1a6		e8		inx		                inx
3568	.d1a7		e8		inx		                inx                          ;point to Y coordinate
3569	.d1a8		20 b3 d1	jsr $d1b3	                jsr getOutcodeForYAxis                    ;process Y coordinate
3570	.d1ab		ca		dex		                dex
3571	.d1ac		ca		dex		                dex                          ;point to X coordinate
3572	.d1ad		0a		asl a		                asl a
3573	.d1ae		0a		asl a		                asl a                        ;shift Y outcode into bits 2/3
3574	.d1af		a0 00		ldy #$00	                ldy #$00                     ;doing Y axis
3575	.d1b1		80 04		bra $d1b7	                bra updateOutcodeForAxis

3577							;-------------------------------------------------------------------------
3578							;
3579	.d1b3						getOutcodeForYAxis:
3580	.d1b3		a0 02		ldy #$02	                ldy #$02                     ;Y=2 for Y coordinate
3581							;-------------------------------------------------------------------------
3582							;
3583							; Get outcode for X or Y axis.
3584							;
3585							; entry:
3586							;
3587							; X = offset in VDU variables of coordinate
3588							;
3589							; Y = 0 if X axis, 2 if Y axis
3590							;
3591							; exit:
3592							;
3593							; ZTEMP?0 = outcode - 0, 1 or 2
3594							;
3595							; A = outcode
3596							;
3597							; N/Z set as per outcode
3598							;
3599	.d1b5						getOutcodeForAxis:
3600	.d1b5		a9 00		lda #$00	                lda #$00                     ;initialize result

3602							;-------------------------------------------------------------------------
3603							;
3604							; Update outcode for X or Y axis
3605							;
3606							; entry: as per getOutcodeForAxis
3607							;
3608							; exit:
3609							;
3610							; ZTEMP?0 = updated; outcode is added to its existing value
3611							;
3612	.d1b7						updateOutcodeForAxis:
3613	.d1b7		85 da		sta $da		                sta ZTEMP+0                  ;save current result
3614							                ; set flags for coordinate-minimum
3615	.d1b9		bd 00 03	lda $0300,x	                lda vduv+0,x
3616	.d1bc		d9 00 03	cmp $0300,y	                cmp vduv.graphicsWindowPixelsLeft+0,y
3617	.d1bf		bd 01 03	lda $0301,x	                lda vduv+1,x
3618	.d1c2		f9 01 03	sbc $0301,y	                sbc vduv.graphicsWindowPixelsLeft+1,y
3619	.d1c5		30 10		bmi $d1d7	                bmi add1ToOutcode ;taken if point below minimum - outcode is 1

3621							                ; set flags for maximum-coordinate
3622	.d1c7		b9 04 03	lda $0304,y	                lda vduv.graphicsWindowPixelsRight+0,y
3623	.d1ca		dd 00 03	cmp $0300,x	                cmp vduv+0,x
3624	.d1cd		b9 05 03	lda $0305,y	                lda vduv.graphicsWindowPixelsRight+1,y
3625	.d1d0		fd 01 03	sbc $0301,x	                sbc vduv+1,x
3626	.d1d3		10 04		bpl $d1d9	                bpl gotOutcode ;taken if point below maximum - axis outcode is 0
3627							                ; point is above maximum - axis outcode is 2
3628	.d1d5						add2ToOutcode:
3629	.d1d5		e6 da		inc $da		                inc ZTEMP+0
3630	.d1d7						add1ToOutcode:
3631	.d1d7		e6 da		inc $da		                inc ZTEMP+0
3632	.d1d9						gotOutcode:
3633	.d1d9		a5 da		lda $da		                lda ZTEMP+0
3634	.d1db		60		rts		                rts

3636							;-------------------------------------------------------------------------
3637							;
3638							; EIGABS entry point.
3639							;
3640	.d1dc						eigabsEntryPoint:
3641	.d1dc		a9 ff		lda #$ff	                lda #$FF ;pretend it's PLOT 255 (as that would be absolute coordinates)
3642	.d1de		80 03		bra $d1e3	                bra eigabsCommon

3644							;-------------------------------------------------------------------------
3645							;
3646							; EIGABS, but for a VDU 25. Handles relative/absolute addressing,
3647							; based on the PLOT number in the VDU queue.
3648							;
3649	.d1e0						eigabsForPLOT:
3650	.d1e0		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number

3652							;-------------------------------------------------------------------------
3653							;
3654							; EIGABS shared code.
3655							;
3656	.d1e3						eigabsCommon:
3657	.d1e3		85 da		sta $da		                sta ZTEMP+0                  ;save PLOT number
3658	.d1e5		a0 02		ldy #$02	                ldy #$02                     ;process Y
3659	.d1e7		20 09 d2	jsr $d209	                jsr handleExternalCoordinate
3660	.d1ea		20 40 d2	jsr $d240	                jsr divideCoordinatesBy2     ;divide Y by 4 - convert 0-1023 to 0-255
3661	.d1ed		a0 00		ldy #$00	                ldy #$00                     ;process X
3662	.d1ef		ca		dex		                dex                          ;...
3663	.d1f0		ca		dex		                dex                          ;...
3664	.d1f1		20 09 d2	jsr $d209	                jsr handleExternalCoordinate
3665	.d1f4		ac 61 03	ldy $0361	                ldy vduv.pixelsPerByteMinusOne
3666	.d1f7		c0 03		cpy #$03	                cpy #$03  ;
3667	.d1f9		f0 05		beq $d200	                beq +     ;branch taken if mode 1/5 - divide by 4 or 8
3668	.d1fb		b0 06		bcs $d203	                bcs ++    ;branch taken if mode 0/4 - divide by 2 or 4
3669	.d1fd		20 40 d2	jsr $d240	                jsr divideCoordinatesBy2     ;mode 2 - divide by 8
3670	.d200						+
3671	.d200		20 40 d2	jsr $d240	                jsr divideCoordinatesBy2
3672	.d203						+
3673	.d203		ad 56 03	lda $0356	                lda vduv.currentScreenMODEGroup
3674	.d206		d0 38		bne $d240	                bne divideCoordinatesBy2     ;branch taken if MODE 4/5
3675	.d208		60		rts		                rts

3677							;-------------------------------------------------------------------------
3678							;
3679							; Handle external coordinate.
3680							;
3681							; 1. Deal with absolute or relative PLOTting
3682							;
3683							; 2. Update graphics cursor position
3684							;
3685							; 3. Handle window origin
3686							;
3687							; 4. Update input coordinate
3688							;
3689							; 5. Divide result by 2 (as this always needs doing at least once)
3690							;
3691							; entry:
3692							;
3693							; ZTEMP?0 = PLOT number
3694							;
3695							; X = offset-2 of external coordinates
3696							;
3697							; Y = 0 to process X coordinate, 2 to process Y coordinate
3698							;
3699	.d209						handleExternalCoordinate:
3700	.d209		18		clc		                clc
3701	.d20a		a5 da		lda $da		                lda ZTEMP+0                  ;get PLOT number
3702	.d20c		29 04		and #$04	                and #$04                     ;get absolute/relative flag
3703	.d20e		f0 09		beq $d219	                beq relativePLOT             ;branch taken if relative
3704	.d210						absolutePLOT:
3705	.d210		bd 02 03	lda $0302,x	                lda vduv+2,x                 ;get coordinate LSB
3706	.d213		48		pha		                pha                          ;save coordinate LSB
3707	.d214		bd 03 03	lda $0303,x	                lda vduv+3,x                 ;get coordinate MSB
3708	.d217		80 0e		bra $d227	                bra LD229                    ;

3710	.d219						relativePLOT:
3711	.d219		bd 02 03	lda $0302,x	                lda vduv+2,x                 ;get coordinate LSB
3712	.d21c		79 10 03	adc $0310,y	                adc vduv.graphicsCursorPositionX+0,y ;add current position LSB
3713	.d21f		48		pha		                pha                                  ;save coordinate LSB
3714	.d220		bd 03 03	lda $0303,x	                lda vduv+3,x                 ;get coordinate MSB
3715	.d223		79 11 03	adc $0311,y	                adc vduv.graphicsCursorPositionX+1,y ;add current position MSB
3716	.d226		18		clc		                clc
3717	.d227						LD229:
3718	.d227		99 11 03	sta $0311,y	                sta vduv.graphicsCursorPositionX+1,y ;update current position MSB
3719	.d22a		79 0d 03	adc $030d,y	                adc vduv.graphicsWindowOriginX+1,y   ;add window origin MSB
3720	.d22d		9d 03 03	sta $0303,x	                sta vduv+3,x                  ;update coordinate MSB
3721	.d230		68		pla		                pla                          ;restore coordinate LSB
3722	.d231		99 10 03	sta $0310,y	                sta vduv.graphicsCursorPositionX+0,y ;update current position LSB
3723	.d234		18		clc		                clc
3724	.d235		79 0c 03	adc $030c,y	                adc vduv.graphicsWindowOriginX+0,y ;add window origin LSB
3725	.d238		9d 02 03	sta $0302,x	                sta vduv+2,x                       ;update coordinate LSB
3726	.d23b		90 03		bcc $d240	                bcc +
3727	.d23d		fe 03 03	inc $0303,x	                inc vduv+3,x       ;handle carry, ignored earlier
3728	.d240						+

3730	.d240						divideCoordinatesBy2:
3731	.d240		bd 03 03	lda $0303,x	                lda vduv+3,x
3732	.d243		0a		asl a		                asl a                        ;C=bit 7
3733	.d244		7e 03 03	ror $0303,x	                ror vduv+3,x                  ;signed divide by 2
3734	.d247		7e 02 03	ror $0302,x	                ror vduv+2,x                  ;signed divide by 2
3735	.d24a		60		rts		                rts

3737							;-------------------------------------------------------------------------

3739	.d24b						LD24D:
3740	.d24b		da		phx		                phx
3741	.d24c		5a		phy		                phy
3742	.d24d		5a		phy		                phy
3743	.d24e		da		phx		                phx
3744	.d24f		5a		phy		                phy
3745	.d250		20 7e d2	jsr $d27e	                jsr LD280
3746	.d253		fa		plx		                plx
3747	.d254		20 7e d2	jsr $d27e	                jsr LD280
3748	.d257		fa		plx		                plx
3749	.d258		7a		ply		                ply
3750	.d259		20 e6 da	jsr $dae6	                jsr LDAE8
3751	.d25c		fa		plx		                plx
3752	.d25d		20 66 d2	jsr $d266	                jsr LD268
3753	.d260		fa		plx		                plx
3754	.d261		80 03		bra $d266	                bra LD268

3756	.d263						LD265:
3757	.d263		20 9d 9d	jsr $9d9d	                jsr terminal.L9B09
3758	.d266						LD268:
3759	.d266		a0 00		ldy #$00	                ldy #$00
3760	.d268		20 6e d2	jsr $d26e	                jsr LD270
3761	.d26b		e8		inx		                inx
3762	.d26c		a0 02		ldy #$02	                ldy #$02
3763	.d26e						LD270:
3764	.d26e		38		sec		                sec
3765	.d26f		20 74 d2	jsr $d274	                jsr LD276
3766	.d272		e8		inx		                inx
3767	.d273		c8		iny		                iny
3768	.d274						LD276:
3769	.d274		bd 00 03	lda $0300,x	                lda $0300,x
3770	.d277		f9 14 03	sbc $0314,y	                sbc $0314,y
3771	.d27a		9d 00 03	sta $0300,x	                sta $0300,x
3772	.d27d						LD27F:
3773	.d27d		60		rts		                rts

3775	.d27e						LD280:
3776	.d27e		a0 00		ldy #$00	                ldy #$00
3777	.d280		20 86 d2	jsr $d286	                jsr LD288
3778	.d283		e8		inx		                inx
3779	.d284		a0 02		ldy #$02	                ldy #$02
3780	.d286						LD288:
3781	.d286		18		clc		                clc
3782	.d287		20 8c d2	jsr $d28c	                jsr LD28E
3783	.d28a		e8		inx		                inx
3784	.d28b		c8		iny		                iny
3785	.d28c						LD28E:
3786	.d28c		bd 00 03	lda $0300,x	                lda $0300,x
3787	.d28f		79 14 03	adc $0314,y	                adc $0314,y
3788	.d292		9d 00 03	sta $0300,x	                sta $0300,x
3789	.d295		60		rts		                rts

3791	.d296						LD298:
3792	.d296		85 e1		sta $e1		                sta $E1
3793	.d298		20 23 d4	jsr $d423	                jsr LD425
3794	.d29b		f0 e0		beq $d27d	                beq LD27F
3795	.d29d		a0 14		ldy #$14	                ldy #$14
3796	.d29f		a9 20		lda #$20	                lda #$20
3797	.d2a1		a2 2c		ldx #$2c	                ldx #$2C
3798	.d2a3		20 63 d2	jsr $d263	                jsr LD265
3799	.d2a6		20 a8 d3	jsr $d3a8	                jsr LD3AA
3800	.d2a9		a9 01		lda #$01	                lda #$01
3801	.d2ab						LD2AD:
3802	.d2ab		84 e0		sty $e0		                sty $E0
3803	.d2ad		04 e0		tsb $e0		                tsb $E0
3804	.d2af		a2 2c		ldx #$2c	                ldx #VDUVariables.workspace._2C
3805	.d2b1		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
3806	.d2b3		20 1c c9	jsr $c91c	                jsr copyFourBytesWithinVDUVariables
3807	.d2b6		2c 35 03	bit $0335	                bit $0335
3808	.d2b9		08		php		                php
3809	.d2ba		a2 2c		ldx #$2c	                ldx #$2C
3810	.d2bc		20 24 d7	jsr $d724	                jsr LD726
3811	.d2bf		28		plp		                plp
3812	.d2c0		10 03		bpl $d2c5	                bpl LD2C7
3813	.d2c2		20 a8 d3	jsr $d3a8	                jsr LD3AA
3814	.d2c5						LD2C7:
3815	.d2c5		ac 2c 03	ldy $032c	                ldy $032C
3816	.d2c8		ad 2d 03	lda $032d	                lda $032D
3817	.d2cb		30 03		bmi $d2d0	                bmi LD2D2
3818	.d2cd		20 2c c9	jsr $c92c	                jsr negateAY
3819	.d2d0						LD2D2:
3820	.d2d0		48		pha		                pha
3821	.d2d1		18		clc		                clc
3822	.d2d2		98		tya		                tya
3823	.d2d3		6d 30 88	adc $8830	                adc L8830
3824	.d2d6		a8		tay		                tay
3825	.d2d7		68		pla		                pla
3826	.d2d8		6d 31 88	adc $8831	                adc L8831
3827	.d2db		10 ce		bpl $d2ab	                bpl LD2AD
3828	.d2dd		1a		inc a		                inc a
3829	.d2de		d0 23		bne $d303	                bne LD305
3830	.d2e0		c8		iny		                iny
3831	.d2e1		d0 20		bne $d303	                bne LD305
3832	.d2e3		a5 e0		lda $e0		                lda $E0
3833	.d2e5		f0 1c		beq $d303	                beq LD305
3834	.d2e7		ad 2c 03	lda $032c	                lda $032C
3835	.d2ea		cd 28 03	cmp $0328	                cmp $0328
3836	.d2ed		f0 14		beq $d303	                beq LD305
3837	.d2ef		a2 2c		ldx #$2c	                ldx #$2C
3838	.d2f1		a0 28		ldy #$28	                ldy #$28
3839	.d2f3		ad 36 03	lda $0336	                lda $0336
3840	.d2f6		0a		asl a		                asl a
3841	.d2f7		4d 36 03	eor $0336	                eor $0336
3842	.d2fa		10 04		bpl $d300	                bpl LD302
3843	.d2fc		e8		inx		                inx
3844	.d2fd		e8		inx		                inx
3845	.d2fe		c8		iny		                iny
3846	.d2ff		c8		iny		                iny
3847	.d300						LD302:
3848	.d300		20 0a c9	jsr $c90a	                jsr copyTwoBytesWithinVDUVariables
3849	.d303						LD305:
3850	.d303		20 23 d4	jsr $d423	                jsr LD425
3851	.d306		ad 29 03	lda $0329	                lda $0329
3852	.d309		aa		tax		                tax
3853	.d30a		4d 1c 03	eor $031c	                eor $031C
3854	.d30d		30 18		bmi $d327	                bmi LD329
3855	.d30f		a0 02		ldy #$02	                ldy #$02
3856	.d311		20 6d d4	jsr $d46d	                jsr LD46F
3857	.d314		d0 0c		bne $d322	                bne LD324
3858	.d316		ae 2b 03	ldx $032b	                ldx $032B
3859	.d319		a0 00		ldy #$00	                ldy #$00
3860	.d31b		20 6d d4	jsr $d46d	                jsr LD46F
3861	.d31e		f0 11		beq $d331	                beq LD333
3862	.d320		49 80		eor #$80	                eor #$80
3863	.d322						LD324:
3864	.d322		86 da		stx $da		                stx $DA
3865	.d324		45 da		eor $da		                eor $DA
3866	.d326		aa		tax		                tax
3867	.d327						LD329:
3868	.d327		8a		txa		                txa
3869	.d328		29 80		and #$80	                and #$80
3870	.d32a		f0 02		beq $d32e	                beq LD330
3871	.d32c		a9 c0		lda #$c0	                lda #$C0
3872	.d32e						LD330:
3873	.d32e		04 e1		tsb $e1		                tsb $E1
3874	.d330		18		clc		                clc
3875	.d331						LD333:
3876	.d331		60		rts		                rts

3878	.d332						LD334:
3879	.d332		a5 e1		lda $e1		                lda $E1
3880	.d334		8d 48 88	sta $8848	                sta L8848
3881	.d337		89 03		bit #$03	                bit #$03
3882	.d339		f0 f6		beq $d331	                beq LD333
3883	.d33b		a9 10		lda #$10	                lda #$10
3884	.d33d		85 dc		sta $dc		                sta $DC
3885	.d33f		0a		asl a		                asl a
3886	.d340		85 dd		sta $dd		                sta $DD
3887	.d342		a2 1b		ldx #$1b	                ldx #$1B
3888	.d344		20 4d d3	jsr $d34d	                jsr LD34F
3889	.d347		06 dc		asl $dc		                asl $DC
3890	.d349		46 dd		lsr $dd		                lsr $DD
3891	.d34b		a2 28		ldx #$28	                ldx #$28
3892	.d34d						LD34F:
3893	.d34d		a9 80		lda #$80	                lda #$80
3894	.d34f		85 da		sta $da		                sta $DA
3895	.d351		bd 02 03	lda $0302,x	                lda $0302,x
3896	.d354		cd 32 88	cmp $8832	                cmp L8832
3897	.d357		d0 d8		bne $d331	                bne LD333
3898	.d359		bd 03 03	lda $0303,x	                lda $0303,x
3899	.d35c		cd 33 88	cmp $8833	                cmp L8833
3900	.d35f		d0 d0		bne $d331	                bne LD333
3901	.d361		bc 00 03	ldy $0300,x	                ldy $0300,x
3902	.d364		bd 01 03	lda $0301,x	                lda $0301,x
3903	.d367		10 05		bpl $d36e	                bpl LD370
3904	.d369		46 da		lsr $da		                lsr $DA
3905	.d36b		20 2c c9	jsr $c92c	                jsr negateAY
3906	.d36e						LD370:
3907	.d36e		cc 30 88	cpy $8830	                cpy L8830
3908	.d371		d0 be		bne $d331	                bne LD333
3909	.d373		cd 31 88	cmp $8831	                cmp L8831
3910	.d376		d0 b9		bne $d331	                bne LD333
3911	.d378		a5 e1		lda $e1		                lda $E1
3912	.d37a		89 02		bit #$02	                bit #$02
3913	.d37c		f0 19		beq $d397	                beq LD399
3914	.d37e		a0 30		ldy #$30	                ldy #$30
3915	.d380		89 01		bit #$01	                bit #$01
3916	.d382		f0 02		beq $d386	                beq LD388
3917	.d384		a4 dc		ldy $dc		                ldy $DC
3918	.d386						LD388:
3919	.d386		98		tya		                tya
3920	.d387		4a		lsr a		                lsr a
3921	.d388		4a		lsr a		                lsr a
3922	.d389		24 e1		bit $e1		                bit $E1
3923	.d38b		d0 06		bne $d393	                bne LD395
3924	.d38d		05 dc		ora $dc		                ora $DC
3925	.d38f		04 e1		tsb $e1		                tsb $E1
3926	.d391		80 04		bra $d397	                bra LD399

3928	.d393						LD395:
3929	.d393		05 dd		ora $dd		                ora $DD
3930	.d395		14 e1		trb $e1		                trb $E1
3931	.d397						LD399:
3932	.d397		a5 da		lda $da		                lda $DA
3933	.d399		24 e1		bit $e1		                bit $E1
3934	.d39b		f0 91		beq $d32e	                beq LD330
3935	.d39d		14 e1		trb $e1		                trb $E1
3936	.d39f		a5 e1		lda $e1		                lda $E1
3937	.d3a1		8d 48 88	sta $8848	                sta L8848
3938	.d3a4		8d 49 88	sta $8849	                sta L8849
3939	.d3a7		60		rts		                rts

3941	.d3a8						LD3AA:
3942	.d3a8		ad 2e 03	lda $032e	                lda $032E
3943	.d3ab		8d 32 88	sta $8832	                sta L8832
3944	.d3ae		ad 2f 03	lda $032f	                lda $032F
3945	.d3b1		8d 33 88	sta $8833	                sta L8833
3946	.d3b4		20 fa d3	jsr $d3fa	                jsr LD3FC
3947	.d3b7		20 11 d5	jsr $d511	                jsr LD513
3948	.d3ba		8c 30 88	sty $8830	                sty L8830
3949	.d3bd		ad 46 88	lda $8846	                lda L8846
3950	.d3c0		4a		lsr a		                lsr a
3951	.d3c1		ad 3d 88	lda $883d	                lda L883D
3952	.d3c4		90 06		bcc $d3cc	                bcc LD3CE
3953	.d3c6		c9 80		cmp #$80	                cmp #$80
3954	.d3c8		6a		ror a		                ror a
3955	.d3c9		6e 30 88	ror $8830	                ror L8830
3956	.d3cc						LD3CE:
3957	.d3cc		8d 31 88	sta $8831	                sta L8831
3958	.d3cf		60		rts		                rts

3960	.d3d0						LD3D2:
3961	.d3d0		9c 47 88	stz $8847	                stz L8847
3962	.d3d3		9c 30 88	stz $8830	                stz L8830
3963	.d3d6		9c 31 88	stz $8831	                stz L8831
3964	.d3d9		9c 34 88	stz $8834	                stz L8834
3965	.d3dc		9c 35 88	stz $8835	                stz L8835
3966	.d3df		ad 32 88	lda $8832	                lda L8832
3967	.d3e2		0a		asl a		                asl a
3968	.d3e3		8d 36 88	sta $8836	                sta L8836
3969	.d3e6		ad 33 88	lda $8833	                lda L8833
3970	.d3e9		2a		rol a		                rol a
3971	.d3ea		8d 37 88	sta $8837	                sta L8837
3972	.d3ed		ad 46 88	lda $8846	                lda L8846
3973	.d3f0		89 02		bit #$02	                bit #$02
3974	.d3f2		f0 06		beq $d3fa	                beq LD3FC
3975	.d3f4		0e 36 88	asl $8836	                asl L8836
3976	.d3f7		2e 37 88	rol $8837	                rol L8837
3977	.d3fa						LD3FC:
3978	.d3fa		ad 46 88	lda $8846	                lda L8846
3979	.d3fd		4a		lsr a		                lsr a
3980	.d3fe		4a		lsr a		                lsr a
3981	.d3ff		ac 32 88	ldy $8832	                ldy L8832
3982	.d402		ad 33 88	lda $8833	                lda L8833
3983	.d405		20 c3 d4	jsr $d4c3	                jsr LD4C5
3984	.d408		38		sec		                sec
3985	.d409		a2 fc		ldx #$fc	                ldx #$FC
3986	.d40b						LD40D:
3987	.d40b		bd 3c 87	lda $873c,x	                lda L873C,x
3988	.d40e		fd 44 87	sbc $8744,x	                sbc L8744,x
3989	.d411		9d 44 87	sta $8744,x	                sta L8744,x
3990	.d414		e8		inx		                inx
3991	.d415		d0 f4		bne $d40b	                bne LD40D
3992	.d417		60		rts		                rts

3994	.d418						LD41A:
3995	.d418		20 18 c9	jsr $c918	                jsr copyGraphicsCursorPixelsToOldGraphicsCursorPixels
3996	.d41b		64 e1		stz $e1		                stz $E1
3997	.d41d		a2 20		ldx #$20	                ldx #$20
3998	.d41f		20 25 d4	jsr $d425	                jsr LD427
3999	.d422		60		rts		                rts

4001	.d423						LD425:
4002	.d423		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX
4003	.d425						LD427:
4004	.d425		a0 1b		ldy #$1b	                ldy #VDUVariables.queueEnd-9
4005	.d427		20 1c c9	jsr $c91c	                jsr copyFourBytesWithinVDUVariables
4006	.d42a		a2 1b		ldx #$1b	                ldx #$1B
4007	.d42c		20 66 d2	jsr $d266	                jsr LD268
4008	.d42f		20 84 d4	jsr $d484	                jsr LD486
4009	.d432		20 11 d5	jsr $d511	                jsr LD513
4010	.d435		a0 0c		ldy #$0c	                ldy #$0C
4011	.d437		20 a9 d4	jsr $d4a9	                jsr LD4AB
4012	.d43a		20 11 d5	jsr $d511	                jsr LD513
4013	.d43d		c9 20		cmp #$20	                cmp #$20
4014	.d43f		90 05		bcc $d446	                bcc LD448
4015	.d441		68		pla		                pla
4016	.d442		68		pla		                pla
4017	.d443		68		pla		                pla
4018	.d444		68		pla		                pla
4019	.d445		60		rts		                rts

4021	.d446						LD448:
4022	.d446		8c 44 88	sty $8844	                sty L8844
4023	.d449		8d 45 88	sta $8845	                sta L8845
4024	.d44c		ad 46 88	lda $8846	                lda L8846
4025	.d44f		89 02		bit #$02	                bit #$02
4026	.d451		f0 06		beq $d459	                beq LD45B
4027	.d453		4e 45 88	lsr $8845	                lsr L8845
4028	.d456		6e 44 88	ror $8844	                ror L8844
4029	.d459						LD45B:
4030	.d459		ac 44 88	ldy $8844	                ldy L8844
4031	.d45c		ad 45 88	lda $8845	                lda L8845
4032	.d45f		20 2c c9	jsr $c92c	                jsr negateAY
4033	.d462		8c 32 88	sty $8832	                sty L8832
4034	.d465		8d 33 88	sta $8833	                sta L8833
4035	.d468		0d 32 88	ora $8832	                ora L8832
4036	.d46b		38		sec		                sec
4037	.d46c		60		rts		                rts

4039	.d46d						LD46F:
4040	.d46d		64 da		stz $da		                stz $DA
4041	.d46f		b9 1b 03	lda $031b,y	                lda $031B,y
4042	.d472		d9 28 03	cmp $0328,y	                cmp $0328,y
4043	.d475		f0 02		beq $d479	                beq LD47B
4044	.d477		e6 da		inc $da		                inc $DA
4045	.d479						LD47B:
4046	.d479		b9 1c 03	lda $031c,y	                lda $031C,y
4047	.d47c		f9 29 03	sbc $0329,y	                sbc $0329,y
4048	.d47f		d0 02		bne $d483	                bne LD485
4049	.d481		a5 da		lda $da		                lda $DA
4050	.d483						LD485:
4051	.d483		60		rts		                rts

4053	.d484						LD486:
4054	.d484		ae 55 03	ldx $0355	                ldx $0355
4055	.d487		bd bd d4	lda $d4bd,x	                lda LD4BF,x
4056	.d48a		8d 46 88	sta $8846	                sta L8846
4057	.d48d		4a		lsr a		                lsr a
4058	.d48e		48		pha		                pha
4059	.d48f		a2 04		ldx #$04	                ldx #$04
4060	.d491						LD493:
4061	.d491		9e 37 88	stz $8837,x	                stz L8837,x
4062	.d494		ca		dex		                dex
4063	.d495		d0 fa		bne $d491	                bne LD493
4064	.d497		20 9e d4	jsr $d49e	                jsr LD4A0
4065	.d49a		68		pla		                pla
4066	.d49b		4a		lsr a		                lsr a
4067	.d49c		a2 02		ldx #$02	                ldx #$02
4068	.d49e						LD4A0:
4069	.d49e		bc 1b 03	ldy $031b,x	                ldy $031B,x
4070	.d4a1		bd 1c 03	lda $031c,x	                lda $031C,x
4071	.d4a4		20 c3 d4	jsr $d4c3	                jsr LD4C5
4072	.d4a7		a0 10		ldy #$10	                ldy #$10
4073	.d4a9						LD4AB:
4074	.d4a9		18		clc		                clc
4075	.d4aa		a2 fc		ldx #$fc	                ldx #$FC
4076	.d4ac						LD4AE:
4077	.d4ac		bd 3c 87	lda $873c,x	                lda L873C,x
4078	.d4af		79 30 88	adc $8830,y	                adc L8830,y
4079	.d4b2		9d 3c 87	sta $873c,x	                sta L873C,x
4080	.d4b5		9d 44 87	sta $8744,x	                sta L8744,x
4081	.d4b8		c8		iny		                iny
4082	.d4b9		e8		inx		                inx
4083	.d4ba		d0 f0		bne $d4ac	                bne LD4AE
4084	.d4bc		60		rts		                rts

4086	.d4bd						LD4BF:
4087	>d4bd		02				                .byte $02
4088	.d4be		00		brk #		                brk
4089	.d4bf		01 ff		ora ($ff,x)	                ora ($FF,x)
4090	.d4c1		00		brk #		                brk
4091							;ORA (&8C,x)      :\ D4C4= 01       ..
4092	>d4c2		01				                .byte $01
4093	.d4c3						LD4C5:
4094	.d4c3		8c 3c 88	sty $883c	                sty L883C
4095	.d4c6		90 04		bcc $d4cc	                bcc LD4CE
4096	.d4c8		0e 3c 88	asl $883c	                asl L883C
4097	.d4cb		2a		rol a		                rol a
4098	.d4cc						LD4CE:
4099	.d4cc		8d 3d 88	sta $883d	                sta L883D
4100	.d4cf		ac 3c 88	ldy $883c	                ldy L883C
4101	.d4d2		aa		tax		                tax
4102	.d4d3		10 03		bpl $d4d8	                bpl LD4DA
4103	.d4d5		20 2c c9	jsr $c92c	                jsr negateAY
4104	.d4d8						LD4DA:
4105	.d4d8		8c 3c 88	sty $883c	                sty L883C
4106	.d4db		8d 3d 88	sta $883d	                sta L883D
4107	.d4de		8c 40 88	sty $8840	                sty L8840
4108	.d4e1		9c 42 88	stz $8842	                stz L8842
4109	.d4e4		9c 43 88	stz $8843	                stz L8843
4110	.d4e7		a0 0f		ldy #$0f	                ldy #$0F
4111	.d4e9		4a		lsr a		                lsr a
4112	.d4ea		8d 41 88	sta $8841	                sta L8841
4113	.d4ed		6e 40 88	ror $8840	                ror L8840
4114	.d4f0						LD4F2:
4115	.d4f0		90 13		bcc $d505	                bcc LD507
4116	.d4f2		18		clc		                clc
4117	.d4f3		ad 3c 88	lda $883c	                lda L883C
4118	.d4f6		6d 42 88	adc $8842	                adc L8842
4119	.d4f9		8d 42 88	sta $8842	                sta L8842
4120	.d4fc		ad 3d 88	lda $883d	                lda L883D
4121	.d4ff		6d 43 88	adc $8843	                adc L8843
4122	.d502		8d 43 88	sta $8843	                sta L8843
4123	.d505						LD507:
4124	.d505		a2 03		ldx #$03	                ldx #$03
4125	.d507						LD509:
4126	.d507		7e 40 88	ror $8840,x	                ror L8840,x
4127	.d50a		ca		dex		                dex
4128	.d50b		10 fa		bpl $d507	                bpl LD509
4129	.d50d		88		dey		                dey
4130	.d50e		10 e0		bpl $d4f0	                bpl LD4F2
4131	.d510		60		rts		                rts

4133	.d511						LD513:
4134	.d511		a2 02		ldx #$02	                ldx #$02
4135	.d513						LD515:
4136	.d513		9e 3c 88	stz $883c,x	                stz L883C,x
4137	.d516		74 db		stz $db,x	                stz $DB,x
4138	.d518		ca		dex		                dex
4139	.d519		10 f8		bpl $d513	                bpl LD515
4140	.d51b		a0 03		ldy #$03	                ldy #$03
4141	.d51d						LD51F:
4142	.d51d		b9 40 88	lda $8840,y	                lda L8840,y
4143	.d520		85 da		sta $da		                sta $DA
4144	.d522		5a		phy		                phy
4145	.d523		a0 03		ldy #$03	                ldy #$03
4146	.d525						LD527:
4147	.d525		5a		phy		                phy
4148	.d526		38		sec		                sec
4149	.d527		2e 3c 88	rol $883c	                rol L883C
4150	.d52a		2e 3d 88	rol $883d	                rol L883D
4151	.d52d		2e 3e 88	rol $883e	                rol L883E
4152	.d530		a2 01		ldx #$01	                ldx #$01
4153	.d532		a5 db		lda $db		                lda $DB
4154	.d534						LD536:
4155	.d534		06 da		asl $da		                asl $DA
4156	.d536		2a		rol a		                rol a
4157	.d537		26 dc		rol $dc		                rol $DC
4158	.d539		26 dd		rol $dd		                rol $DD
4159	.d53b		ca		dex		                dex
4160	.d53c		10 f6		bpl $d534	                bpl LD536
4161	.d53e		85 db		sta $db		                sta $DB
4162	.d540		38		sec		                sec
4163	.d541		ed 3c 88	sbc $883c	                sbc L883C
4164	.d544		aa		tax		                tax
4165	.d545		a5 dc		lda $dc		                lda $DC
4166	.d547		ed 3d 88	sbc $883d	                sbc L883D
4167	.d54a		a8		tay		                tay
4168	.d54b		a5 dd		lda $dd		                lda $DD
4169	.d54d		ed 3e 88	sbc $883e	                sbc L883E
4170	.d550		90 0b		bcc $d55d	                bcc LD55F
4171	.d552		85 dd		sta $dd		                sta $DD
4172	.d554		84 dc		sty $dc		                sty $DC
4173	.d556		86 db		stx $db		                stx $DB
4174	.d558		ee 3c 88	inc $883c	                inc L883C
4175	.d55b		80 03		bra $d560	                bra LD562

4177	.d55d						LD55F:
4178	.d55d		ce 3c 88	dec $883c	                dec L883C
4179	.d560						LD562:
4180	.d560		7a		ply		                ply
4181	.d561		88		dey		                dey
4182	.d562		10 c1		bpl $d525	                bpl LD527
4183	.d564		7a		ply		                ply
4184	.d565		88		dey		                dey
4185	.d566		10 b5		bpl $d51d	                bpl LD51F
4186	.d568		4e 3e 88	lsr $883e	                lsr L883E
4187	.d56b		6e 3d 88	ror $883d	                ror L883D
4188	.d56e		6e 3c 88	ror $883c	                ror L883C
4189	.d571		9c 3e 88	stz $883e	                stz L883E
4190	.d574		9c 3f 88	stz $883f	                stz L883F
4191	.d577		ac 3c 88	ldy $883c	                ldy L883C
4192	.d57a		ad 3d 88	lda $883d	                lda L883D
4193	.d57d		60		rts		                rts

4195							;-------------------------------------------------------------------------
4196							;
4197							; Add dimension of region to a coordinate.
4198							;
4199							; entry:
4200							;
4201							; X = VDU variable offset of coordinate
4202							;
4203							; A = VDU variable offset of minimum coordinate of region
4204							;
4205							; Y = VDU variable offset of maximum coordinate of region
4206							;
4207							; ZTEMP?0 = VDU variable offset for result
4208							;
4209							; exit:
4210							;
4211							; result variable = coordinate+(min-max)
4212							;
4213	.d57e						addRegionDimensionsToVDUVariableCoordinates:
4214	.d57e		20 8b d5	jsr $d58b	                jsr addRegionDimensionToVDUVariableCoordinate ;do X

4216							                ; bump offsets to do Y.
4217	.d581		c8		iny		                iny
4218	.d582		c8		iny		                iny
4219	.d583		e8		inx		                inx
4220	.d584		e8		inx		                inx
4221	.d585		1a		inc a		                inc a
4222	.d586		1a		inc a		                inc a
4223	.d587		e6 da		inc $da		                inc ZTEMP+0
4224	.d589		e6 da		inc $da		                inc ZTEMP+0

4226							                ; TODO - not a great name. Could probably just be
4227							                ; addDifference, or something.
4228	.d58b						addRegionDimensionToVDUVariableCoordinate:
4229	.d58b		da		phx		                phx                          ;save VX
4230	.d58c		5a		phy		                phy                          ;save VY
4231	.d58d		48		pha		                pha                          ;save VA
4232	.d58e		18		clc		                clc
4233	.d58f		bd 00 03	lda $0300,x	                lda vduv+0,x                 ;<VX
4234	.d592		79 00 03	adc $0300,y	                adc vduv+0,y                 ;<(VX+VY)
4235	.d595		85 de		sta $de		                sta ZTEMPC+0                 ;ZTEMPC?0=<(VX+VY)
4236	.d597		bd 01 03	lda $0301,x	                lda vduv+1,x                 ;>VX
4237	.d59a		79 01 03	adc $0301,y	                adc vduv+1,y                 ;>(VX+VY)
4238	.d59d		fa		plx		                plx                          ;X=VA
4239	.d59e		48		pha		                pha                          ;save >(VX+VY)
4240	.d59f		a4 da		ldy $da		                ldy ZTEMP+0                  ;Y=VT
4241	.d5a1		38		sec		                sec
4242	.d5a2		a5 de		lda $de		                lda ZTEMPC+0                 ;<(VX+VY)
4243	.d5a4		fd 00 03	sbc $0300,x	                sbc vduv+0,x                 ;<(VX+VY-VA)
4244	.d5a7		99 00 03	sta $0300,y	                sta vduv+0,y                 ;<VT=<(VX+VY-VA)
4245	.d5aa		68		pla		                pla                          ;>(VX+VY)
4246	.d5ab		fd 01 03	sbc $0301,x	                sbc vduv+1,x                 ;>(VX+VY-VA)
4247	.d5ae		99 01 03	sta $0301,y	                sta vduv+1,y                 ;>VT=<(VX+VY-VA)
4248	.d5b1		8a		txa		                txa                          ;restore old A
4249	.d5b2		7a		ply		                ply                          ;restore old Y
4250	.d5b3		fa		plx		                plx                          ;restore old X
4251	.d5b4		60		rts		                rts

4253							;-------------------------------------------------------------------------
4254							;
4255							; Sort points by Y coordinate, then X.
4256							;
4257							; entry:
4258							;
4259							; X = VDU variable offset of point A (4 bytes: X;Y;)
4260							;
4261							; Y = VDU variable offset of point B (4 bytes: X;Y;)
4262							;
4263							; exit:
4264							;
4265							; X = offset of point with lesser Y (or lesser X, if same Y)
4266							;
4267							; Y = offset of point with greater Y (or greater X, if same Y)
4268							;
4269	.d5b5						sortVDUVariableCoordinates:
4270	.d5b5		38		sec		                sec
4271	.d5b6		b9 02 03	lda $0302,y	                lda vduv+2,y
4272	.d5b9		fd 02 03	sbc $0302,x	                sbc vduv+2,x
4273	.d5bc		85 de		sta $de		                sta ZTEMPC
4274	.d5be		b9 03 03	lda $0303,y	                lda vduv+3,y
4275	.d5c1		fd 03 03	sbc $0303,x	                sbc vduv+3,x
4276	.d5c4		30 09		bmi $d5cf	                bmi exchangeXAndY           ;taken if PX.y>PY.y
4277	.d5c6		05 de		ora $de		                ora ZTEMPC
4278	.d5c8		d0 09		bne $d5d3	                bne rtsD5D5                  ;taken if PX.y<PY.y

4280							;-------------------------------------------------------------------------
4281							;
4282							; Sort words by value.
4283							;
4284							; entry:
4285							;
4286							; X = VDU variable offset of word A
4287							;
4288							; Y = VDU variable offset of word B
4289							;
4290							; exit:
4291							;
4292							; X = offset of lesser value
4293							;
4294							; Y = offset of greater value
4295							;
4296	.d5ca						sortVDUVariableWords:
4297	.d5ca		20 d4 d5	jsr $d5d4	                jsr compareVDUVariableWords
4298	.d5cd		10 04		bpl $d5d3	                bpl rtsD5D5
4299	.d5cf						exchangeXAndY:
4300	.d5cf		8a		txa		                txa
4301	.d5d0		5a		phy		                phy
4302	.d5d1		fa		plx		                plx
4303	.d5d2		a8		tay		                tay
4304	.d5d3						rtsD5D5:
4305	.d5d3		60		rts		                rts

4307							;-------------------------------------------------------------------------
4308							;
4309							; Compare 2 16-bit VDU variable values.
4310							;
4311							; entry:
4312							;
4313							; X = offset of one variable
4314							;
4315							; Y = offset of the other variable
4316							;
4317							; exit:
4318							;
4319							; N=1 if X>Y
4320							;
4321	.d5d4						compareVDUVariableWords:
4322	.d5d4		b9 00 03	lda $0300,y	                lda vduv+0,y
4323	.d5d7		dd 00 03	cmp $0300,x	                cmp vduv+0,x
4324	.d5da		b9 01 03	lda $0301,y	                lda vduv+1,y
4325	.d5dd		fd 01 03	sbc $0301,x	                sbc vduv+1,x
4326	.d5e0		60		rts		                rts

4328							;-------------------------------------------------------------------------

4330	.d5e1						LD5E3:
4331	.d5e1		ee 47 88	inc $8847	                inc L8847
4332	.d5e4						LD5E6:
4333	.d5e4		ad 47 88	lda $8847	                lda L8847
4334	.d5e7		d0 0f		bne $d5f8	                bne LD5FA
4335	.d5e9		ad 32 88	lda $8832	                lda L8832
4336	.d5ec		0d 33 88	ora $8833	                ora L8833
4337	.d5ef		f0 f0		beq $d5e1	                beq LD5E3
4338	.d5f1		a2 00		ldx #$00	                ldx #$00
4339	.d5f3		20 42 d6	jsr $d642	                jsr LD644
4340	.d5f6		10 49		bpl $d641	                bpl LD643
4341	.d5f8						LD5FA:
4342	.d5f8		a2 02		ldx #$02	                ldx #$02
4343	.d5fa		20 42 d6	jsr $d642	                jsr LD644
4344	.d5fd		10 42		bpl $d641	                bpl LD643
4345	.d5ff		a2 00		ldx #$00	                ldx #$00
4346	.d601		20 08 d6	jsr $d608	                jsr LD60A
4347	.d604		10 3b		bpl $d641	                bpl LD643
4348	.d606		a2 02		ldx #$02	                ldx #$02
4349	.d608						LD60A:
4350	.d608		bd 30 88	lda $8830,x	                lda L8830,x
4351	.d60b		d0 03		bne $d610	                bne LD612
4352	.d60d		de 31 88	dec $8831,x	                dec L8831,x
4353	.d610						LD612:
4354	.d610		de 30 88	dec $8830,x	                dec L8830,x
4355	.d613		8a		txa		                txa
4356	.d614		4a		lsr a		                lsr a
4357	.d615		1a		inc a		                inc a
4358	.d616		2c 46 88	bit $8846	                bit L8846
4359	.d619		f0 03		beq $d61e	                beq LD620
4360	.d61b		20 1e d6	jsr $d61e	                jsr LD620
4361	.d61e						LD620:
4362	.d61e		20 34 d6	jsr $d634	                jsr LD636
4363	.d621		18		clc		                clc
4364	.d622		ad 40 88	lda $8840	                lda L8840
4365	.d625		7d 34 88	adc $8834,x	                adc L8834,x
4366	.d628		8d 40 88	sta $8840	                sta L8840
4367	.d62b		ad 41 88	lda $8841	                lda L8841
4368	.d62e		7d 35 88	adc $8835,x	                adc L8835,x
4369	.d631		8d 41 88	sta $8841	                sta L8841
4370	.d634						LD636:
4371	.d634		08		php		                php
4372	.d635		bd 34 88	lda $8834,x	                lda L8834,x
4373	.d638		d0 03		bne $d63d	                bne LD63F
4374	.d63a		de 35 88	dec $8835,x	                dec L8835,x
4375	.d63d						LD63F:
4376	.d63d		de 34 88	dec $8834,x	                dec L8834,x
4377	.d640		28		plp		                plp
4378	.d641						LD643:
4379	.d641		60		rts		                rts

4381	.d642						LD644:
4382	.d642		fe 30 88	inc $8830,x	                inc L8830,x
4383	.d645		d0 03		bne $d64a	                bne LD64C
4384	.d647		fe 31 88	inc $8831,x	                inc L8831,x
4385	.d64a						LD64C:
4386	.d64a		8a		txa		                txa
4387	.d64b		4a		lsr a		                lsr a
4388	.d64c		1a		inc a		                inc a
4389	.d64d		2c 46 88	bit $8846	                bit L8846
4390	.d650		f0 03		beq $d655	                beq LD657
4391	.d652		20 55 d6	jsr $d655	                jsr LD657
4392	.d655						LD657:
4393	.d655		20 6b d6	jsr $d66b	                jsr LD66D
4394	.d658		38		sec		                sec
4395	.d659		ad 40 88	lda $8840	                lda L8840
4396	.d65c		fd 34 88	sbc $8834,x	                sbc L8834,x
4397	.d65f		8d 40 88	sta $8840	                sta L8840
4398	.d662		ad 41 88	lda $8841	                lda L8841
4399	.d665		fd 35 88	sbc $8835,x	                sbc L8835,x
4400	.d668		8d 41 88	sta $8841	                sta L8841
4401	.d66b						LD66D:
4402	.d66b		08		php		                php
4403	.d66c		fe 34 88	inc $8834,x	                inc L8834,x
4404	.d66f		d0 03		bne $d674	                bne LD676
4405	.d671		fe 35 88	inc $8835,x	                inc L8835,x
4406	.d674						LD676:
4407	.d674		28		plp		                plp
4408	.d675		60		rts		                rts

4410	.d676						LD678:
4411	.d676		48		pha		                pha
4412	.d677		38		sec		                sec
4413	.d678		b9 00 03	lda $0300,y	                lda $0300,y
4414	.d67b		fd 00 03	sbc $0300,x	                sbc $0300,x
4415	.d67e		48		pha		                pha
4416	.d67f		b9 01 03	lda $0301,y	                lda $0301,y
4417	.d682		fd 01 03	sbc $0301,x	                sbc $0301,x
4418	.d685		7a		ply		                ply
4419	.d686		c9 80		cmp #$80	                cmp #$80
4420	.d688		90 03		bcc $d68d	                bcc LD68F
4421	.d68a		20 2c c9	jsr $c92c	                jsr negateAY
4422	.d68d						LD68F:
4423	.d68d		fa		plx		                plx
4424	.d68e		9d 01 03	sta $0301,x	                sta $0301,x
4425	.d691		98		tya		                tya
4426	.d692		9d 00 03	sta $0300,x	                sta $0300,x
4427	.d695		60		rts		                rts

4429	.d696						LD698:
4430	.d696		a2 37		ldx #$37	                ldx #$37
4431	.d698		20 21 d7	jsr $d721	                jsr LD723
4432	.d69b						LD69D:
4433	.d69b		3c 0a 03	bit $030a,x	                bit $030A,x
4434	.d69e		70 10		bvs $d6b0	                bvs LD6B2
4435	.d6a0		60		rts		                rts

4437	.d6a1						LD6A3:
4438	.d6a1		a2 2c		ldx #$2c	                ldx #$2C
4439	.d6a3		20 21 d7	jsr $d721	                jsr LD723
4440	.d6a6						LD6A8:
4441	.d6a6		3c 0a 03	bit $030a,x	                bit $030A,x
4442	.d6a9		50 05		bvc $d6b0	                bvc LD6B2
4443	.d6ab		60		rts		                rts

4445	.d6ac						LD6AE:
4446	.d6ac		fa		plx		                plx
4447	.d6ad		20 24 d7	jsr $d724	                jsr LD726
4448	.d6b0						LD6B2:
4449	.d6b0		bd 09 03	lda $0309,x	                lda $0309,x
4450	.d6b3		30 10		bmi $d6c5	                bmi LD6C7
4451	.d6b5		a0 03		ldy #$03	                ldy #$03
4452	.d6b7		da		phx		                phx
4453	.d6b8						LD6BA:
4454	.d6b8		bd 00 03	lda $0300,x	                lda $0300,x
4455	.d6bb		dd 1e 88	cmp $881e,x	                cmp L881E,x
4456	.d6be		d0 ec		bne $d6ac	                bne LD6AE
4457	.d6c0		e8		inx		                inx
4458	.d6c1		88		dey		                dey
4459	.d6c2		10 f4		bpl $d6b8	                bpl LD6BA
4460	.d6c4		fa		plx		                plx
4461	.d6c5						LD6C7:
4462	.d6c5		60		rts		                rts

4464	.d6c6						LD6C8:
4465	.d6c6		20 fb d6	jsr $d6fb	                jsr LD6FD
4466	.d6c9		bd 0a 03	lda $030a,x	                lda $030A,x
4467	.d6cc		0a		asl a		                asl a
4468	.d6cd		0a		asl a		                asl a
4469	.d6ce		bd 0a 03	lda $030a,x	                lda $030A,x
4470	.d6d1		6a		ror a		                ror a
4471	.d6d2		85 da		sta $da		                sta $DA
4472	.d6d4		18		clc		                clc
4473	.d6d5		10 0f		bpl $d6e6	                bpl LD6E8
4474	.d6d7		bd 02 03	lda $0302,x	                lda $0302,x
4475	.d6da		ed 04 03	sbc $0304	                sbc $0304
4476	.d6dd		a8		tay		                tay
4477	.d6de		bd 03 03	lda $0303,x	                lda $0303,x
4478	.d6e1		ed 05 03	sbc $0305	                sbc $0305
4479	.d6e4		80 0d		bra $d6f3	                bra LD6F5

4481	.d6e6						LD6E8:
4482	.d6e6		ad 00 03	lda $0300	                lda $0300
4483	.d6e9		fd 02 03	sbc $0302,x	                sbc $0302,x
4484	.d6ec		a8		tay		                tay
4485	.d6ed		ad 01 03	lda $0301	                lda $0301
4486	.d6f0		fd 03 03	sbc $0303,x	                sbc $0303,x
4487	.d6f3						LD6F5:
4488	.d6f3		20 a2 d7	jsr $d7a2	                jsr LD7A4
4489	.d6f6		20 fb d6	jsr $d6fb	                jsr LD6FD
4490	.d6f9		80 58		bra $d753	                bra LD755

4492	.d6fb						LD6FD:
4493	.d6fb		8a		txa		                txa
4494	.d6fc		1a		inc a		                inc a
4495	.d6fd		48		pha		                pha
4496	.d6fe		1a		inc a		                inc a
4497	.d6ff		a8		tay		                tay
4498	.d700		20 b0 e2	jsr $e2b0	                jsr exchangeTwoVDUBytes
4499	.d703		e8		inx		                inx
4500	.d704		e8		inx		                inx
4501	.d705		c8		iny		                iny
4502	.d706		c8		iny		                iny
4503	.d707		20 b0 e2	jsr $e2b0	                jsr exchangeTwoVDUBytes
4504	.d70a		fa		plx		                plx
4505	.d70b		20 0f d7	jsr $d70f	                jsr LD711
4506	.d70e		ca		dex		                dex
4507	.d70f						LD711:
4508	.d70f		bd 08 03	lda $0308,x	                lda $0308,x
4509	.d712		49 ff		eor #$ff	                eor #$FF
4510	.d714		9d 08 03	sta $0308,x	                sta $0308,x
4511	.d717		60		rts		                rts

4513	.d718						LD71A:
4514	.d718		20 24 d7	jsr $d724	                jsr LD726
4515	.d71b						LD71D:
4516	.d71b		bd 09 03	lda $0309,x	                lda $0309,x
4517	.d71e		10 f8		bpl $d718	                bpl LD71A
4518	.d720		60		rts		                rts

4520	.d721						LD723:
4521	.d721		20 1b d7	jsr $d71b	                jsr LD71D
4522	.d724						LD726:
4523	.d724		bd 09 03	lda $0309,x	                lda $0309,x
4524	.d727		10 2a		bpl $d753	                bpl LD755
4525	.d729						LD72B:
4526	.d729		18		clc		                clc
4527	.d72a		bd 08 03	lda $0308,x	                lda $0308,x
4528	.d72d		7d 04 03	adc $0304,x	                adc $0304,x
4529	.d730		9d 08 03	sta $0308,x	                sta $0308,x
4530	.d733		bd 09 03	lda $0309,x	                lda $0309,x
4531	.d736		7d 05 03	adc $0305,x	                adc $0305,x
4532	.d739		9d 09 03	sta $0309,x	                sta $0309,x
4533	.d73c		30 03		bmi $d741	                bmi LD743
4534	.d73e		20 53 d7	jsr $d753	                jsr LD755
4535	.d741						LD743:
4536	.d741		da		phx		                phx
4537	.d742		e8		inx		                inx
4538	.d743		e8		inx		                inx
4539	.d744		3c 08 03	bit $0308,x	                bit $0308,x
4540	.d747		30 23		bmi $d76c	                bmi LD76E
4541	.d749						LD74B:
4542	.d749		fe 00 03	inc $0300,x	                inc $0300,x
4543	.d74c		d0 03		bne $d751	                bne LD753
4544	.d74e		fe 01 03	inc $0301,x	                inc $0301,x
4545	.d751						LD753:
4546	.d751		fa		plx		                plx
4547	.d752		60		rts		                rts

4549	.d753						LD755:
4550	.d753		38		sec		                sec
4551	.d754		bd 08 03	lda $0308,x	                lda $0308,x
4552	.d757		fd 06 03	sbc $0306,x	                sbc $0306,x
4553	.d75a		9d 08 03	sta $0308,x	                sta $0308,x
4554	.d75d		bd 09 03	lda $0309,x	                lda $0309,x
4555	.d760		fd 07 03	sbc $0307,x	                sbc $0307,x
4556	.d763		9d 09 03	sta $0309,x	                sta $0309,x
4557	.d766		da		phx		                phx
4558	.d767		3c 0a 03	bit $030a,x	                bit $030A,x
4559	.d76a		50 dd		bvc $d749	                bvc LD74B
4560	.d76c						LD76E:
4561	.d76c		bd 00 03	lda $0300,x	                lda $0300,x
4562	.d76f		d0 03		bne $d774	                bne LD776
4563	.d771		de 01 03	dec $0301,x	                dec $0301,x
4564	.d774						LD776:
4565	.d774		de 00 03	dec $0300,x	                dec $0300,x
4566	.d777		fa		plx		                plx
4567	.d778		60		rts		                rts

4569	.d779						LD77B:
4570	.d779		18		clc		                clc
4571	.d77a		bd 0a 03	lda $030a,x	                lda $030A,x
4572	.d77d		85 da		sta $da		                sta $DA
4573	.d77f		10 0f		bpl $d790	                bpl LD792
4574	.d781		bd 02 03	lda $0302,x	                lda $0302,x
4575	.d784		ed 06 03	sbc $0306	                sbc $0306
4576	.d787		a8		tay		                tay
4577	.d788		bd 03 03	lda $0303,x	                lda $0303,x
4578	.d78b		ed 07 03	sbc $0307	                sbc $0307
4579	.d78e		80 0d		bra $d79d	                bra LD79F

4581	.d790						LD792:
4582	.d790		ad 02 03	lda $0302	                lda $0302
4583	.d793		fd 02 03	sbc $0302,x	                sbc $0302,x
4584	.d796		a8		tay		                tay
4585	.d797		ad 03 03	lda $0303	                lda $0303
4586	.d79a		fd 03 03	sbc $0303,x	                sbc $0303,x
4587	.d79d						LD79F:
4588	.d79d		20 a2 d7	jsr $d7a2	                jsr LD7A4
4589	.d7a0		80 87		bra $d729	                bra LD72B

4591	.d7a2						LD7A4:
4592	.d7a2		84 de		sty $de		                sty $DE
4593	.d7a4		85 df		sta $df		                sta $DF
4594	.d7a6		bd 02 03	lda $0302,x	                lda $0302,x
4595	.d7a9		bc 03 03	ldy $0303,x	                ldy $0303,x
4596	.d7ac		06 da		asl $da		                asl $DA
4597	.d7ae		b0 0a		bcs $d7ba	                bcs LD7BC
4598	.d7b0		65 de		adc $de		                adc $DE
4599	.d7b2		9d 02 03	sta $0302,x	                sta $0302,x
4600	.d7b5		98		tya		                tya
4601	.d7b6		65 df		adc $df		                adc $DF
4602	.d7b8		80 08		bra $d7c2	                bra LD7C4

4604	.d7ba						LD7BC:
4605	.d7ba		e5 de		sbc $de		                sbc $DE
4606	.d7bc		9d 02 03	sta $0302,x	                sta $0302,x
4607	.d7bf		98		tya		                tya
4608	.d7c0		e5 df		sbc $df		                sbc $DF
4609	.d7c2						LD7C4:
4610	.d7c2		9d 03 03	sta $0303,x	                sta $0303,x
4611	.d7c5		a9 00		lda #$00	                lda #$00
4612	.d7c7		3c 09 03	bit $0309,x	                bit $0309,x
4613	.d7ca		10 01		bpl $d7cd	                bpl LD7CF
4614	.d7cc		3a		dec a		                dec a
4615	.d7cd						LD7CF:
4616	.d7cd		85 dc		sta $dc		                sta $DC
4617	.d7cf		4a		lsr a		                lsr a
4618	.d7d0		85 dd		sta $dd		                sta $DD
4619	.d7d2		a0 10		ldy #$10	                ldy #$10
4620	.d7d4						LD7D6:
4621	.d7d4		a5 dd		lda $dd		                lda $DD
4622	.d7d6		0a		asl a		                asl a
4623	.d7d7		3e 08 03	rol $0308,x	                rol $0308,x
4624	.d7da		3e 09 03	rol $0309,x	                rol $0309,x
4625	.d7dd		26 dc		rol $dc		                rol $DC
4626	.d7df		26 dd		rol $dd		                rol $DD
4627	.d7e1		06 de		asl $de		                asl $DE
4628	.d7e3		26 df		rol $df		                rol $DF
4629	.d7e5		90 19		bcc $d800	                bcc LD802
4630	.d7e7		18		clc		                clc
4631	.d7e8		a5 dc		lda $dc		                lda $DC
4632	.d7ea		7d 04 03	adc $0304,x	                adc $0304,x
4633	.d7ed		85 dc		sta $dc		                sta $DC
4634	.d7ef		a5 dd		lda $dd		                lda $DD
4635	.d7f1		7d 05 03	adc $0305,x	                adc $0305,x
4636	.d7f4		85 dd		sta $dd		                sta $DD
4637	.d7f6		90 08		bcc $d800	                bcc LD802
4638	.d7f8		fe 08 03	inc $0308,x	                inc $0308,x
4639	.d7fb		d0 03		bne $d800	                bne LD802
4640	.d7fd		fe 09 03	inc $0309,x	                inc $0309,x
4641	.d800						LD802:
4642	.d800		88		dey		                dey
4643	.d801		d0 d1		bne $d7d4	                bne LD7D6
4644	.d803		3c 09 03	bit $0309,x	                bit $0309,x
4645	.d806		50 0b		bvc $d813	                bvc LD815
4646	.d808		a5 dc		lda $dc		                lda $DC
4647	.d80a		9d 08 03	sta $0308,x	                sta $0308,x
4648	.d80d		a5 dd		lda $dd		                lda $DD
4649	.d80f		9d 09 03	sta $0309,x	                sta $0309,x
4650	.d812		60		rts		                rts

4652	.d813						LD815:
4653	.d813		a0 10		ldy #$10	                ldy #$10
4654	.d815						LD817:
4655	.d815		26 dc		rol $dc		                rol $DC
4656	.d817		26 dd		rol $dd		                rol $DD
4657	.d819		3e 08 03	rol $0308,x	                rol $0308,x
4658	.d81c		3e 09 03	rol $0309,x	                rol $0309,x
4659	.d81f		38		sec		                sec
4660	.d820		bd 08 03	lda $0308,x	                lda $0308,x
4661	.d823		fd 06 03	sbc $0306,x	                sbc $0306,x
4662	.d826		85 de		sta $de		                sta $DE
4663	.d828		bd 09 03	lda $0309,x	                lda $0309,x
4664	.d82b		fd 07 03	sbc $0307,x	                sbc $0307,x
4665	.d82e		90 08		bcc $d838	                bcc LD83A
4666	.d830		9d 09 03	sta $0309,x	                sta $0309,x
4667	.d833		a5 de		lda $de		                lda $DE
4668	.d835		9d 08 03	sta $0308,x	                sta $0308,x
4669	.d838						LD83A:
4670	.d838		88		dey		                dey
4671	.d839		d0 da		bne $d815	                bne LD817
4672	.d83b		26 dc		rol $dc		                rol $DC
4673	.d83d		26 dd		rol $dd		                rol $DD
4674	.d83f		38		sec		                sec
4675	.d840		bd 08 03	lda $0308,x	                lda $0308,x
4676	.d843		fd 06 03	sbc $0306,x	                sbc $0306,x
4677	.d846		9d 08 03	sta $0308,x	                sta $0308,x
4678	.d849		bd 09 03	lda $0309,x	                lda $0309,x
4679	.d84c		fd 07 03	sbc $0307,x	                sbc $0307,x
4680	.d84f		9d 09 03	sta $0309,x	                sta $0309,x
4681	.d852		bd 00 03	lda $0300,x	                lda $0300,x
4682	.d855		bc 01 03	ldy $0301,x	                ldy $0301,x
4683	.d858		06 da		asl $da		                asl $DA
4684	.d85a		b0 0b		bcs $d867	                bcs LD869
4685	.d85c		38		sec		                sec
4686	.d85d		65 dc		adc $dc		                adc $DC
4687	.d85f		9d 00 03	sta $0300,x	                sta $0300,x
4688	.d862		98		tya		                tya
4689	.d863		65 dd		adc $dd		                adc $DD
4690	.d865		80 09		bra $d870	                bra LD872

4692	.d867						LD869:
4693	.d867		18		clc		                clc
4694	.d868		e5 dc		sbc $dc		                sbc $DC
4695	.d86a		9d 00 03	sta $0300,x	                sta $0300,x
4696	.d86d		98		tya		                tya
4697	.d86e		e5 dd		sbc $dd		                sbc $DD
4698	.d870						LD872:
4699	.d870		9d 01 03	sta $0301,x	                sta $0301,x
4700	.d873						LD875:
4701	.d873		60		rts		                rts

4703	.d874						LD876:
4704	.d874		0e 32 03	asl $0332	                asl $0332
4705	.d877		a0 2c		ldy #$2c	                ldy #$2C
4706	.d879		20 14 c9	jsr $c914	                jsr copyLastFourVDUQueueBytes
4707	.d87c		06 db		asl $db		                asl $DB
4708	.d87e		90 0d		bcc $d88d	                bcc LD88F
4709	.d880		20 24 da	jsr $da24	                jsr LDA26
4710	.d883		f0 ee		beq $d873	                beq LD875
4711	.d885		a2 00		ldx #$00	                ldx #$00
4712	.d887		ad 32 03	lda $0332	                lda $0332
4713	.d88a		20 0d da	jsr $da0d	                jsr LDA0F
4714	.d88d						LD88F:
4715	.d88d		24 db		bit $db		                bit $DB
4716	.d88f		50 0f		bvc $d8a0	                bvc LD8A2
4717	.d891		20 24 da	jsr $da24	                jsr LDA26
4718	.d894		f0 dd		beq $d873	                beq LD875
4719	.d896		a2 04		ldx #$04	                ldx #$04
4720	.d898		ad 32 03	lda $0332	                lda $0332
4721	.d89b		49 80		eor #$80	                eor #$80
4722	.d89d		20 0d da	jsr $da0d	                jsr LDA0F
4723	.d8a0						LD8A2:
4724	.d8a0		a2 28		ldx #$28	                ldx #$28
4725	.d8a2		a0 2c		ldy #$2c	                ldy #$2C
4726	.d8a4		4c e6 da	jmp $dae6	                jmp LDAE8

4728	.d8a7						LD8A9:
4729	.d8a7		0a		asl a		                asl a
4730	.d8a8		0a		asl a		                asl a
4731	.d8a9		85 db		sta $db		                sta $DB
4732	.d8ab		29 c0		and #$c0	                and #$C0
4733	.d8ad		49 40		eor #$40	                eor #$40
4734	.d8af		d0 06		bne $d8b7	                bne LD8B9
4735	.d8b1		ad 67 03	lda $0367	                lda $0367
4736	.d8b4		8d 68 03	sta $0368	                sta $0368
4737	.d8b7						LD8B9:
4738	.d8b7		20 a4 d1	jsr $d1a4	                jsr LD1A6
4739	.d8ba		85 dc		sta $dc		                sta $DC
4740	.d8bc		f0 04		beq $d8c2	                beq LD8C4
4741	.d8be		a9 80		lda #$80	                lda #$80
4742	.d8c0		14 db		trb $db		                trb $DB
4743	.d8c2						LD8C4:
4744	.d8c2		a2 20		ldx #$20	                ldx #$20
4745	.d8c4		20 a6 d1	jsr $d1a6	                jsr windEntryPoint
4746	.d8c7		85 e0		sta $e0		                sta $E0
4747	.d8c9		f0 0a		beq $d8d5	                beq LD8D7
4748	.d8cb		aa		tax		                tax
4749	.d8cc		a9 20		lda #$20	                lda #$20
4750	.d8ce		14 db		trb $db		                trb $DB
4751	.d8d0		8a		txa		                txa
4752	.d8d1		24 dc		bit $dc		                bit $DC
4753	.d8d3						LD8D5:
4754	.d8d3		d0 9e		bne $d873	                bne LD875
4755	.d8d5						LD8D7:
4756	.d8d5		a0 24		ldy #$24	                ldy #$24
4757	.d8d7		a9 20		lda #$20	                lda #$20
4758	.d8d9		a2 28		ldx #$28	                ldx #$28
4759	.d8db		20 9d 9d	jsr $9d9d	                jsr terminal.L9B09
4760	.d8de		24 db		bit $db		                bit $DB
4761	.d8e0		70 08		bvs $d8ea	                bvs LD8EC
4762	.d8e2		ad 2e 03	lda $032e	                lda $032E
4763	.d8e5		0d 2f 03	ora $032f	                ora $032F
4764	.d8e8		f0 8a		beq $d874	                beq LD876
4765	.d8ea						LD8EC:
4766	.d8ea		a5 dc		lda $dc		                lda $DC
4767	.d8ec		89 0c		bit #$0c	                bit #$0C
4768	.d8ee		f0 0e		beq $d8fe	                beq LD900
4769	.d8f0		a2 28		ldx #$28	                ldx #$28
4770	.d8f2		20 79 d7	jsr $d779	                jsr LD77B
4771	.d8f5		a2 28		ldx #$28	                ldx #$28
4772	.d8f7		20 a6 d1	jsr $d1a6	                jsr windEntryPoint
4773	.d8fa		24 e0		bit $e0		                bit $E0
4774	.d8fc		d0 d5		bne $d8d3	                bne LD8D5
4775	.d8fe						LD900:
4776	.d8fe		89 03		bit #$03	                bit #$03
4777	.d900		f0 0a		beq $d90c	                beq LD90E
4778	.d902		a2 28		ldx #$28	                ldx #$28
4779	.d904		20 c6 d6	jsr $d6c6	                jsr LD6C8
4780	.d907		a2 28		ldx #$28	                ldx #$28
4781	.d909		20 a6 d1	jsr $d1a6	                jsr windEntryPoint
4782	.d90c						LD90E:
4783	.d90c		a8		tay		                tay
4784	.d90d		d0 c4		bne $d8d3	                bne LD8D5
4785	.d90f		a0 20		ldy #$20	                ldy #$20
4786	.d911		a2 22		ldx #$22	                ldx #$22
4787	.d913		a5 e0		lda $e0		                lda $E0
4788	.d915		f0 0f		beq $d926	                beq LD928
4789	.d917		a0 04		ldy #$04	                ldy #$04
4790	.d919		a2 06		ldx #$06	                ldx #$06
4791	.d91b		2c 32 03	bit $0332	                bit $0332
4792	.d91e		10 02		bpl $d922	                bpl LD924
4793	.d920		a2 02		ldx #$02	                ldx #$02
4794	.d922						LD924:
4795	.d922		50 02		bvc $d926	                bvc LD928
4796	.d924		a0 00		ldy #$00	                ldy #$00
4797	.d926						LD928:
4798	.d926		18		clc		                clc
4799	.d927		bd 00 03	lda $0300,x	                lda $0300,x
4800	.d92a		ed 2a 03	sbc $032a	                sbc $032A
4801	.d92d		90 03		bcc $d932	                bcc LD934
4802	.d92f		1a		inc a		                inc a
4803	.d930		49 ff		eor #$ff	                eor #$FF
4804	.d932						LD934:
4805	.d932		85 dc		sta $dc		                sta $DC
4806	.d934		18		clc		                clc
4807	.d935		b9 00 03	lda $0300,y	                lda $0300,y
4808	.d938		ed 28 03	sbc $0328	                sbc $0328
4809	.d93b		aa		tax		                tax
4810	.d93c		b9 01 03	lda $0301,y	                lda $0301,y
4811	.d93f		ed 29 03	sbc $0329	                sbc $0329
4812	.d942		30 0c		bmi $d950	                bmi LD952
4813	.d944		e8		inx		                inx
4814	.d945		d0 01		bne $d948	                bne LD94A
4815	.d947		1a		inc a		                inc a
4816	.d948						LD94A:
4817	.d948		49 ff		eor #$ff	                eor #$FF
4818	.d94a		a8		tay		                tay
4819	.d94b		8a		txa		                txa
4820	.d94c		49 ff		eor #$ff	                eor #$FF
4821	.d94e		aa		tax		                tax
4822	.d94f		98		tya		                tya
4823	.d950						LD952:
4824	.d950		85 dd		sta $dd		                sta $DD
4825	.d952		86 e0		stx $e0		                stx $E0
4826	.d954		a2 28		ldx #$28	                ldx #$28
4827	.d956		20 3f df	jsr $df3f	                jsr LDF41
4828	.d959		06 db		asl $db		                asl $DB
4829	.d95b		b0 2a		bcs $d987	                bcs LD989
4830	.d95d						LD95F:
4831	.d95d		24 db		bit $db		                bit $DB
4832	.d95f		50 0b		bvc $d96c	                bvc LD96E
4833	.d961		a5 e0		lda $e0		                lda $E0
4834	.d963		25 dc		and $dc		                and $DC
4835	.d965		25 dd		and $dd		                and $DD
4836	.d967		1a		inc a		                inc a
4837	.d968		f0 34		beq $d99e	                beq LD9A0
4838	.d96a		24 db		bit $db		                bit $DB
4839	.d96c						LD96E:
4840	.d96c		10 09		bpl $d977	                bpl LD979
4841	.d96e		ad 68 03	lda $0368	                lda $0368
4842	.d971		0a		asl a		                asl a
4843	.d972		2e 68 03	rol $0368	                rol $0368
4844	.d975		90 10		bcc $d987	                bcc LD989
4845	.d977						LD979:
4846	.d977		a5 d1		lda $d1		                lda ZMASK
4847	.d979		25 d4		and $d4		                and ZGORA
4848	.d97b		11 d6		ora ($d6),y	                ora (ZMEMG),y
4849	.d97d		85 da		sta $da		                sta $DA
4850	.d97f		a5 d1		lda $d1		                lda ZMASK
4851	.d981		25 d5		and $d5		                and ZGEOR
4852	.d983		45 da		eor $da		                eor $DA
4853	.d985		91 d6		sta ($d6),y	                sta (ZMEMG),y
4854	.d987						LD989:
4855	.d987		ad 31 03	lda $0331	                lda $0331
4856	.d98a		10 4e		bpl $d9da	                bpl LD9DC
4857	.d98c		e6 dc		inc $dc		                inc $DC
4858	.d98e		f0 0e		beq $d99e	                beq LD9A0
4859	.d990		2c 32 03	bit $0332	                bit $0332
4860	.d993		30 0a		bmi $d99f	                bmi LD9A1
4861	.d995		88		dey		                dey
4862	.d996		ca		dex		                dex
4863	.d997		10 24		bpl $d9bd	                bpl LD9BF
4864	.d999		20 4a da	jsr $da4a	                jsr LDA4C
4865	.d99c		80 1f		bra $d9bd	                bra LD9BF

4867	.d99e						LD9A0:
4868	.d99e		60		rts		                rts

4870	.d99f						LD9A1:
4871	.d99f		c8		iny		                iny
4872	.d9a0		e8		inx		                inx
4873	.d9a1		e0 08		cpx #$08	                cpx #$08
4874	.d9a3		d0 18		bne $d9bd	                bne LD9BF
4875	.d9a5		38		sec		                sec
4876	.d9a6		98		tya		                tya
4877	.d9a7		e9 08		sbc #$08	                sbc #$08
4878	.d9a9		18		clc		                clc
4879	.d9aa		6d 52 03	adc $0352	                adc $0352
4880	.d9ad		a8		tay		                tay
4881	.d9ae		a5 d7		lda $d7		                lda ZMEMG+1
4882	.d9b0		6d 53 03	adc $0353	                adc $0353
4883	.d9b3		10 04		bpl $d9b9	                bpl LD9BB
4884	.d9b5		38		sec		                sec
4885	.d9b6		ed 54 03	sbc $0354	                sbc $0354
4886	.d9b9						LD9BB:
4887	.d9b9		85 d7		sta $d7		                sta ZMEMG+1
4888	.d9bb		a2 00		ldx #$00	                ldx #$00
4889	.d9bd						LD9BF:
4890	.d9bd		ad 69 03	lda $0369	                lda $0369
4891	.d9c0		f0 03		beq $d9c5	                beq LD9C7
4892	.d9c2		20 7a da	jsr $da7a	                jsr setupColourMasks
4893	.d9c5						LD9C7:
4894	.d9c5		18		clc		                clc
4895	.d9c6		ad 30 03	lda $0330	                lda $0330
4896	.d9c9		6d 2c 03	adc $032c	                adc $032C
4897	.d9cc		8d 30 03	sta $0330	                sta $0330
4898	.d9cf		ad 31 03	lda $0331	                lda $0331
4899	.d9d2		6d 2d 03	adc $032d	                adc $032D
4900	.d9d5		8d 31 03	sta $0331	                sta $0331
4901	.d9d8		30 83		bmi $d95d	                bmi LD95F
4902	.d9da						LD9DC:
4903	.d9da		e6 e0		inc $e0		                inc $E0
4904	.d9dc		d0 04		bne $d9e2	                bne LD9E4
4905	.d9de		e6 dd		inc $dd		                inc $DD
4906	.d9e0		f0 bc		beq $d99e	                beq LD9A0
4907	.d9e2						LD9E4:
4908	.d9e2		2c 32 03	bit $0332	                bit $0332
4909	.d9e5		70 09		bvs $d9f0	                bvs LD9F2
4910	.d9e7		46 d1		lsr $d1		                lsr ZMASK
4911	.d9e9		90 0c		bcc $d9f7	                bcc LD9F9
4912	.d9eb		20 65 da	jsr $da65	                jsr nextColumnAndResetMask
4913	.d9ee		80 07		bra $d9f7	                bra LD9F9

4915	.d9f0						LD9F2:
4916	.d9f0		06 d1		asl $d1		                asl ZMASK
4917	.d9f2		90 03		bcc $d9f7	                bcc LD9F9
4918	.d9f4		20 32 da	jsr $da32	                jsr previousColumnAndResetMask
4919	.d9f7						LD9F9:
4920	.d9f7		38		sec		                sec
4921	.d9f8		ad 30 03	lda $0330	                lda $0330
4922	.d9fb		ed 2e 03	sbc $032e	                sbc $032E
4923	.d9fe		8d 30 03	sta $0330	                sta $0330
4924	.da01		ad 31 03	lda $0331	                lda $0331
4925	.da04		ed 2f 03	sbc $032f	                sbc $032F
4926	.da07		8d 31 03	sta $0331	                sta $0331
4927	.da0a		4c 5d d9	jmp $d95d	                jmp LD95F

4929	.da0d						LDA0F:
4930	.da0d		30 09		bmi $da18	                bmi LDA1A
4931	.da0f		fe 28 03	inc $0328,x	                inc $0328,x
4932	.da12		d0 0f		bne $da23	                bne LDA25
4933	.da14		fe 29 03	inc $0329,x	                inc $0329,x
4934	.da17		60		rts		                rts

4936	.da18						LDA1A:
4937	.da18		bd 28 03	lda $0328,x	                lda $0328,x
4938	.da1b		d0 03		bne $da20	                bne LDA22
4939	.da1d		de 29 03	dec $0329,x	                dec $0329,x
4940	.da20						LDA22:
4941	.da20		de 28 03	dec $0328,x	                dec $0328,x
4942	.da23						LDA25:
4943	.da23		60		rts		                rts

4945	.da24						LDA26:
4946	.da24		a0 04		ldy #$04	                ldy #$04
4947	.da26						LDA28:
4948	.da26		b9 27 03	lda $0327,y	                lda $0327,y
4949	.da29		d9 2b 03	cmp $032b,y	                cmp $032B,y
4950	.da2c		d0 03		bne $da31	                bne LDA33
4951	.da2e		88		dey		                dey
4952	.da2f		d0 f5		bne $da26	                bne LDA28
4953	.da31						LDA33:
4954	.da31		60		rts		                rts

4956							;-------------------------------------------------------------------------

4958	.da32						previousColumnAndResetMask:
4959	.da32		ad 63 03	lda $0363	                lda vduv.colourMaskRight
4960	.da35		85 d1		sta $d1		                sta ZMASK
4961	.da37		98		tya		                tya
4962	.da38		e9 08		sbc #$08	                sbc #$08
4963	.da3a		a8		tay		                tay
4964	.da3b		b0 0c		bcs $da49	                bcs rtsDA4B
4965	.da3d		a5 d7		lda $d7		                lda ZMEMG+1
4966	.da3f		3a		dec a		                dec a
4967	.da40		cd 4e 03	cmp $034e	                cmp vduv.startScreenAddressHighByte
4968	.da43		b0 02		bcs $da47	                bcs +
4969	.da45		a9 7f		lda #$7f	                lda #$7F
4970	.da47						+
4971	.da47		85 d7		sta $d7		                sta ZMEMG+1
4972	.da49						rtsDA4B:
4973	.da49		60		rts		                rts

4975							;-------------------------------------------------------------------------

4977	.da4a						LDA4C:
4978	.da4a		18		clc		                clc
4979	.da4b		98		tya		                tya
4980	.da4c		69 08		adc #$08	                adc #$08
4981	.da4e		38		sec		                sec
4982	.da4f		ed 52 03	sbc $0352	                sbc $0352
4983	.da52		a8		tay		                tay
4984	.da53		a5 d7		lda $d7		                lda ZMEMG+1
4985	.da55		ed 53 03	sbc $0353	                sbc $0353
4986	.da58		cd 4e 03	cmp $034e	                cmp $034E
4987	.da5b		b0 03		bcs $da60	                bcs LDA62
4988	.da5d		6d 54 03	adc $0354	                adc $0354
4989	.da60						LDA62:
4990	.da60		85 d7		sta $d7		                sta ZMEMG+1
4991	.da62		a2 07		ldx #$07	                ldx #$07
4992	.da64		60		rts		                rts

4994							;-------------------------------------------------------------------------
4995							;
4996	.da65						nextColumnAndResetMask:
4997	.da65		ad 62 03	lda $0362	                lda vduv.colourMaskLeft
4998	.da68		85 d1		sta $d1		                sta ZMASK

5000							;-------------------------------------------------------------------------
5001							;
5002							; Add 8 to (ZMEMG),Y, taking into account screen wrap.
5003							;
5004							; entry:
5005							;
5006							; C=1
5007							;
5008							; (ZMEMG),Y = screen address
5009							;
5010							; exit:
5011							;
5012							; (ZMEMG),Y = new screen address
5013							;
5014	.da6a						nextColumn:
5015	.da6a		98		tya		                tya
5016	.da6b		69 07		adc #$07	                adc #$07
5017	.da6d		a8		tay		                tay
5018	.da6e		90 09		bcc $da79	                bcc +
5019	.da70		e6 d7		inc $d7		                inc ZMEMG+1
5020	.da72		10 05		bpl $da79	                bpl +
5021	.da74		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
5022	.da77		85 d7		sta $d7		                sta ZMEMG+1
5023	.da79						+
5024	.da79		60		rts		                rts

5026							;-------------------------------------------------------------------------
5027							;
5028							; Set up colour masks, taking into account ECF pattern.
5029							;
5030							; entry:
5031							;
5032							; X = scanline in row, 0-7
5033							;
5034	.da7a						setupColourMasks:
5035	.da7a		da		phx		                phx                          ;save scanline
5036	.da7b		8a		txa		                txa                          ;A=scanline
5037	.da7c		0d 59 03	ora $0359	                ora vduv.graphicsPlotState   ;0-7 if fg, 8-15 if bg
5038	.da7f		aa		tax		                tax
5039	.da80		bd 20 88	lda $8820,x	                lda andy.fgECFPattern,x      ;get appropriate ECF byte
5040	.da83		ae 5a 03	ldx $035a	                ldx vduv.graphicsPlotMode
5041	.da86		48		pha		                pha
5042	.da87		1d 42 e1	ora $e142,x	                ora zgoraORTable,x
5043	.da8a		5d 43 e1	eor $e143,x	                eor zgoraEORTable,x
5044	.da8d		85 d4		sta $d4		                sta ZGORA
5045	.da8f		68		pla		                pla
5046	.da90		1d 41 e1	ora $e141,x	                ora zgeorORTable,x
5047	.da93		5d 46 e1	eor $e146,x	                eor zgeorEORTable,x
5048	.da96		85 d5		sta $d5		                sta ZGEOR
5049	.da98		fa		plx		                plx
5050	.da99		60		rts		                rts

5052							;-------------------------------------------------------------------------

5054	.da9a						LDA9C:
5055	.da9a		b9 01 03	lda $0301,y	                lda $0301,y
5056	.da9d		48		pha		                pha
5057	.da9e		b9 00 03	lda $0300,y	                lda $0300,y
5058	.daa1		48		pha		                pha
5059	.daa2		2d 61 03	and $0361	                and $0361
5060	.daa5		18		clc		                clc
5061	.daa6		6d 61 03	adc $0361	                adc $0361
5062	.daa9		a8		tay		                tay
5063	.daaa		b9 2c e1	lda $e12c,y	                lda pixelMasks-1,y
5064	.daad		59 1e e1	eor $e11e,y	                eor LE120,y
5065	.dab0		85 dc		sta $dc		                sta $DC
5066	.dab2		bd 00 03	lda $0300,x	                lda $0300,x
5067	.dab5		2d 61 03	and $0361	                and $0361
5068	.dab8		6d 61 03	adc $0361	                adc $0361
5069	.dabb		a8		tay		                tay
5070	.dabc		b9 1e e1	lda $e11e,y	                lda LE120,y
5071	.dabf		85 d1		sta $d1		                sta ZMASK
5072	.dac1		38		sec		                sec
5073	.dac2		68		pla		                pla
5074	.dac3		0d 61 03	ora $0361	                ora $0361
5075	.dac6		fd 00 03	sbc $0300,x	                sbc $0300,x
5076	.dac9		a8		tay		                tay
5077	.daca		68		pla		                pla
5078	.dacb		fd 01 03	sbc $0301,x	                sbc $0301,x
5079	.dace		85 dd		sta $dd		                sta $DD
5080	.dad0		98		tya		                tya
5081	.dad1		ac 61 03	ldy $0361	                ldy $0361
5082	.dad4		c0 03		cpy #$03	                cpy #$03
5083	.dad6		f0 05		beq $dadd	                beq LDADF
5084	.dad8		90 06		bcc $dae0	                bcc LDAE2
5085	.dada		46 dd		lsr $dd		                lsr $DD
5086	.dadc		6a		ror a		                ror a
5087	.dadd						LDADF:
5088	.dadd		46 dd		lsr $dd		                lsr $DD
5089	.dadf		6a		ror a		                ror a
5090	.dae0						LDAE2:
5091	.dae0		4a		lsr a		                lsr a
5092	.dae1						LDAE3:
5093	.dae1		60		rts		                rts

5095	.dae2						LDAE4:
5096	.dae2		a2 42		ldx #$42	                ldx #$42
5097	.dae4		a0 46		ldy #$46	                ldy #$46
5098	.dae6						LDAE8:
5099	.dae6		20 ca d5	jsr $d5ca	                jsr sortVDUVariableWords
5100	.dae9		86 de		stx $de		                stx $DE
5101	.daeb		84 df		sty $df		                sty $DF
5102	.daed		a6 df		ldx $df		                ldx $DF
5103	.daef		a0 00		ldy #$00	                ldy #$00
5104	.daf1		20 b5 d1	jsr $d1b5	                jsr getOutcodeForAxis
5105	.daf4		f0 07		beq $dafd	                beq LDAFF
5106	.daf6		4a		lsr a		                lsr a
5107	.daf7		f0 e8		beq $dae1	                beq LDAE3
5108	.daf9		a2 04		ldx #$04	                ldx #$04
5109	.dafb		86 df		stx $df		                stx $DF
5110	.dafd						LDAFF:
5111	.dafd		a6 de		ldx $de		                ldx $DE
5112	.daff		20 a6 d1	jsr $d1a6	                jsr windEntryPoint
5113	.db02		4a		lsr a		                lsr a
5114	.db03		d0 dc		bne $dae1	                bne LDAE3
5115	.db05		bd 02 03	lda $0302,x	                lda $0302,x
5116	.db08		90 04		bcc $db0e	                bcc LDB10
5117	.db0a		a2 00		ldx #$00	                ldx #$00
5118	.db0c		86 de		stx $de		                stx $DE
5119	.db0e						LDB10:
5120	.db0e		20 c9 de	jsr $dec9	                jsr LDECB
5121	.db11		a6 de		ldx $de		                ldx $DE
5122	.db13		a4 df		ldy $df		                ldy $DF
5123	.db15		20 9a da	jsr $da9a	                jsr LDA9C
5124	.db18		aa		tax		                tax
5125	.db19		ac 1a 03	ldy $031a	                ldy $031A
5126	.db1c		8a		txa		                txa
5127	.db1d		f0 23		beq $db42	                beq LDB44
5128	.db1f		20 4f db	jsr $db4f	                jsr plbyteEntryPoint
5129	.db22		80 08		bra $db2c	                bra LDB2E

5131	.db24						LDB26:
5132	.db24		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5133	.db26		05 d4		ora $d4		                ora ZGORA
5134	.db28		45 d5		eor $d5		                eor ZGEOR
5135	.db2a		91 d6		sta ($d6),y	                sta (ZMEMG),y
5136	.db2c						LDB2E:
5137	.db2c		98		tya		                tya
5138	.db2d		18		clc		                clc
5139	.db2e		69 08		adc #$08	                adc #$08
5140	.db30		a8		tay		                tay
5141	.db31		90 09		bcc $db3c	                bcc LDB3E
5142	.db33		e6 d7		inc $d7		                inc ZMEMG+1
5143	.db35		10 05		bpl $db3c	                bpl LDB3E
5144	.db37		ad 4e 03	lda $034e	                lda $034E
5145	.db3a		85 d7		sta $d7		                sta ZMEMG+1
5146	.db3c						LDB3E:
5147	.db3c		ca		dex		                dex
5148	.db3d		d0 e5		bne $db24	                bne LDB26
5149	.db3f		ca		dex		                dex
5150	.db40		86 d1		stx $d1		                stx ZMASK
5151	.db42						LDB44:
5152	.db42		a5 dc		lda $dc		                lda $DC
5153	.db44		14 d1		trb $d1		                trb ZMASK
5154	.db46		80 07		bra $db4f	                bra plbyteEntryPoint

5156							;-------------------------------------------------------------------------
5157							;
5158							; mem mask ora eor | result
5159							; --- ---- --- --- | ------
5160							;  0    0   0   0  |   0
5161							;  0    0   0   1  |   0
5162							;  0    0   1   0  |   0
5163							;  0    0   1   1  |   0
5164							;  0    1   0   0  |   0
5165							;  0    1   0   1  |   1
5166							;  0    1   1   0  |   1
5167							;  0    1   1   1  |   0
5168							;  1    0   0   0  |   1
5169							;  1    0   0   1  |   1
5170							;  1    0   1   0  |   1
5171							;  1    0   1   1  |   1
5172							;  1    1   0   0  |   1
5173							;  1    1   0   1  |   0
5174							;  1    1   1   0  |   1
5175							;  1    1   1   1  |   0
5176							;
5177	.db48						plotPoint:
5178	.db48		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
5179	.db4a						LDB4C:
5180	.db4a		20 c1 de	jsr $dec1	                jsr windGADDR
5181	.db4d		d0 10		bne $db5f	                bne rtsDB61                  ;taken if point outside window
5182	.db4f						plbyteEntryPoint:
5183	.db4f		a5 d1		lda $d1		                lda ZMASK
5184	.db51		25 d4		and $d4		                and ZGORA
5185	.db53		11 d6		ora ($d6),y	                ora (ZMEMG),y
5186	.db55		85 da		sta $da		                sta ZTEMP+0
5187	.db57		a5 d5		lda $d5		                lda ZGEOR
5188	.db59		25 d1		and $d1		                and ZMASK
5189	.db5b		45 da		eor $da		                eor ZTEMP+0
5190	.db5d						oswrscCode:
5191	.db5d		91 d6		sta ($d6),y	                sta (ZMEMG),y
5192	.db5f						rtsDB61:
5193	.db5f		60		rts		                rts

5195							;-------------------------------------------------------------------------

5197	.db60						LDB62:
5198	.db60		a2 2a		ldx #$2a	                ldx #VDUVariables.workspace._2A
5199	.db62		a0 32		ldy #$32	                ldy #VDUVariables.workspace._32
5200	.db64		20 0a c9	jsr $c90a	                jsr copyTwoBytesWithinVDUVariables
5201	.db67		a2 36		ldx #$36	                ldx #VDUVariables.workspace._36
5202	.db69		a0 3e		ldy #$3e	                ldy #VDUVariables.workspace._3E
5203	.db6b		20 0a c9	jsr $c90a	                jsr copyTwoBytesWithinVDUVariables
5204	.db6e		a2 2a		ldx #$2a	                ldx #$2A
5205	.db70		20 b3 d1	jsr $d1b3	                jsr getOutcodeForYAxis
5206	.db73		48		pha		                pha
5207	.db74		a2 36		ldx #$36	                ldx #$36
5208	.db76		20 b3 d1	jsr $d1b3	                jsr getOutcodeForYAxis
5209	.db79		f0 0f		beq $db8a	                beq LDB8C
5210	.db7b		68		pla		                pla
5211	.db7c		d0 05		bne $db83	                bne LDB85
5212	.db7e		ad 45 03	lda $0345	                lda $0345
5213	.db81		f0 01		beq $db84	                beq LDB86
5214	.db83						LDB85:
5215	.db83		60		rts		                rts

5217	.db84						LDB86:
5218	.db84		a2 28		ldx #$28	                ldx #$28
5219	.db86		a0 2c		ldy #$2c	                ldy #$2C
5220	.db88		80 07		bra $db91	                bra LDB93

5222	.db8a						LDB8C:
5223	.db8a		68		pla		                pla
5224	.db8b		f0 07		beq $db94	                beq LDB96
5225	.db8d		a2 34		ldx #$34	                ldx #$34
5226	.db8f		a0 38		ldy #$38	                ldy #$38
5227	.db91						LDB93:
5228	.db91		4c e6 da	jmp $dae6	                jmp LDAE8

5230	.db94						LDB96:
5231	.db94		a2 30		ldx #$30	                ldx #$30
5232	.db96		20 c6 de	jsr $dec6	                jsr gaddrEntryPoint
5233	.db99		2c 47 03	bit $0347	                bit $0347
5234	.db9c		30 09		bmi $dba7	                bmi LDBA9
5235	.db9e		98		tya		                tya
5236	.db9f		38		sec		                sec
5237	.dba0		e9 08		sbc #$08	                sbc #$08
5238	.dba2		a8		tay		                tay
5239	.dba3		b0 02		bcs $dba7	                bcs LDBA9
5240	.dba5		c6 d7		dec $d7		                dec ZMEMG+1
5241	.dba7						LDBA9:
5242	.dba7		ad 44 03	lda $0344	                lda $0344
5243	.dbaa		85 dd		sta $dd		                sta $DD
5244	.dbac						LDBAE:
5245	.dbac		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5246	.dbae		ae 42 03	ldx $0342	                ldx $0342
5247	.dbb1		f0 04		beq $dbb7	                beq LDBB9
5248	.dbb3						LDBB5:
5249	.dbb3		0a		asl a		                asl a
5250	.dbb4		ca		dex		                dex
5251	.dbb5		d0 fc		bne $dbb3	                bne LDBB5
5252	.dbb7						LDBB9:
5253	.dbb7		85 da		sta $da		                sta $DA
5254	.dbb9		38		sec		                sec
5255	.dbba		20 6a da	jsr $da6a	                jsr nextColumn
5256	.dbbd		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5257	.dbbf		ae 43 03	ldx $0343	                ldx $0343
5258	.dbc2		f0 04		beq $dbc8	                beq LDBCA
5259	.dbc4						LDBC6:
5260	.dbc4		4a		lsr a		                lsr a
5261	.dbc5		ca		dex		                dex
5262	.dbc6		d0 fc		bne $dbc4	                bne LDBC6
5263	.dbc8						LDBCA:
5264	.dbc8		45 da		eor $da		                eor $DA
5265	.dbca		25 e1		and $e1		                and $E1
5266	.dbcc		45 da		eor $da		                eor $DA
5267	.dbce		a6 dd		ldx $dd		                ldx $DD
5268	.dbd0		9d 30 88	sta $8830,x	                sta L8830,x
5269	.dbd3		c6 dd		dec $dd		                dec $DD
5270	.dbd5		10 d5		bpl $dbac	                bpl LDBAE
5271	.dbd7		a2 34		ldx #$34	                ldx #$34
5272	.dbd9		a0 38		ldy #$38	                ldy #$38
5273	.dbdb		20 e6 da	jsr $dae6	                jsr LDAE8
5274	.dbde		ad 45 03	lda $0345	                lda $0345
5275	.dbe1		d0 03		bne $dbe6	                bne LDBE8
5276	.dbe3		20 84 db	jsr $db84	                jsr LDB86
5277	.dbe6						LDBE8:
5278	.dbe6		a2 3c		ldx #$3c	                ldx #$3C
5279	.dbe8		20 c6 de	jsr $dec6	                jsr gaddrEntryPoint
5280	.dbeb		ad 46 03	lda $0346	                lda $0346
5281	.dbee		85 da		sta $da		                sta $DA
5282	.dbf0		ae 44 03	ldx $0344	                ldx $0344
5283	.dbf3		f0 15		beq $dc0a	                beq LDC0C
5284	.dbf5		20 0e dc	jsr $dc0e	                jsr LDC10
5285	.dbf8		a9 ff		lda #$ff	                lda #$FF
5286	.dbfa		85 da		sta $da		                sta $DA
5287	.dbfc		80 05		bra $dc03	                bra LDC05

5289	.dbfe						LDC00_code:
5290	.dbfe		bd 30 88	lda $8830,x	                lda L8830,x
5291	.dc01		91 d6		sta ($d6),y	                sta (ZMEMG),y
5292	.dc03						LDC05:
5293	.dc03		38		sec		                sec
5294	.dc04		20 6a da	jsr $da6a	                jsr nextColumn
5295	.dc07		ca		dex		                dex
5296	.dc08		d0 f4		bne $dbfe	                bne LDC00_code
5297	.dc0a						LDC0C:
5298	.dc0a		a5 e0		lda $e0		                lda $E0
5299	.dc0c		14 da		trb $da		                trb $DA
5300	.dc0e						LDC10:
5301	.dc0e		bd 30 88	lda $8830,x	                lda L8830,x
5302	.dc11		51 d6		eor ($d6),y	                eor (ZMEMG),y
5303	.dc13		25 da		and $da		                and $DA
5304	.dc15		51 d6		eor ($d6),y	                eor (ZMEMG),y
5305	.dc17		91 d6		sta ($d6),y	                sta (ZMEMG),y
5306	.dc19		60		rts		                rts

5308	.dc1a						LDC1C:
5309	.dc1a		ad 37 03	lda $0337	                lda $0337
5310	.dc1d		1a		inc a		                inc a
5311	.dc1e		cd 36 03	cmp $0336	                cmp $0336
5312	.dc21		f0 22		beq $dc45	                beq LDC47
5313	.dc23		8d 37 03	sta $0337	                sta $0337
5314	.dc26		aa		tax		                tax
5315	.dc27		ad 2e 03	lda $032e	                lda $032E
5316	.dc2a		9d 00 84	sta $8400,x	                sta L8400,x
5317	.dc2d		ad 32 03	lda $0332	                lda $0332
5318	.dc30		9d 00 85	sta $8500,x	                sta L8500,x
5319	.dc33		ad 2f 03	lda $032f	                lda $032F
5320	.dc36		0a		asl a		                asl a
5321	.dc37		0a		asl a		                asl a
5322	.dc38		0d 33 03	ora $0333	                ora $0333
5323	.dc3b		9d 00 86	sta $8600,x	                sta L8600,x
5324	.dc3e		ad 30 03	lda $0330	                lda $0330
5325	.dc41		9d 00 87	sta $8700,x	                sta L8700,x
5326	.dc44						LDC46:
5327	.dc44		18		clc		                clc
5328	.dc45						LDC47:
5329	.dc45		60		rts		                rts

5331	.dc46						LDC48:
5332	.dc46		8d 2a 03	sta $032a	                sta $032A
5333	.dc49		a2 28		ldx #$28	                ldx #$28
5334	.dc4b		20 ae dc	jsr $dcae	                jsr LDCB0
5335	.dc4e		d0 0a		bne $dc5a	                bne LDC5C
5336	.dc50						LDC52:
5337	.dc50		20 1a dc	jsr $dc1a	                jsr LDC1C
5338	.dc53		b0 f0		bcs $dc45	                bcs LDC47
5339	.dc55		20 eb 9f	jsr $9feb	                jsr terminal.L9D57
5340	.dc58		b0 ea		bcs $dc44	                bcs LDC46
5341	.dc5a						LDC5C:
5342	.dc5a		20 bf dc	jsr $dcbf	                jsr LDCC1
5343	.dc5d		20 eb 9f	jsr $9feb	                jsr terminal.L9D57
5344	.dc60		b0 e2		bcs $dc44	                bcs LDC46
5345	.dc62		20 d5 dc	jsr $dcd5	                jsr LDCD7
5346	.dc65		20 b6 dc	jsr $dcb6	                jsr LDCB8
5347	.dc68		80 e6		bra $dc50	                bra LDC52

5349							;-------------------------------------------------------------------------
5350							;
5351							; 72â<80><93>79 = Horizontal line fill (left and right to non-background) [MasRef E.3-24]
5352							; 88â<80><93>95 = Horizontal line fill (right to background) [MasRef E.3-25]
5353							; 104â<80><93>111 = Horizontal line fill (left and right to foreground) [MasRef E.3-26]
5354							; 120â<80><93>127 = Horizontal line fill (right to non-foreground) [MasRef E.3-27]
5355							;
5356	.dc6a						plotHorizontalLineFill:
5357	.dc6a		20 9d dd	jsr $dd9d	                jsr copyECFPatternForLineFill
5358	.dc6d		20 ae dc	jsr $dcae	                jsr LDCB0
5359	.dc70		18		clc		                clc
5360	.dc71		80 0e		bra $dc81	                bra LDC83

5362	.dc73						plotHorizontalLineFillRight:
5363	.dc73		20 9d dd	jsr $dd9d	                jsr copyECFPatternForLineFill
5364	.dc76		20 c7 dc	jsr $dcc7	                jsr LDCC9
5365	.dc79		20 d0 dc	jsr $dcd0	                jsr LDCD2
5366	.dc7c		d0 03		bne $dc81	                bne LDC83
5367	.dc7e		20 b6 dc	jsr $dcb6	                jsr LDCB8
5368	.dc81						LDC83:
5369	.dc81		08		php		                php
5370	.dc82		a2 2e		ldx #$2e	                ldx #VDUVariables.hlfw.pixelsX
5371	.dc84		a0 14		ldy #$14	                ldy #VDUVariables.oldGraphicsCursorPixelsX
5372	.dc86		20 1c c9	jsr $c91c	                jsr copyFourBytesWithinVDUVariables
5373	.dc89		28		plp		                plp
5374	.dc8a		08		php		                php
5375	.dc8b		f0 02		beq $dc8f	                beq LDC91
5376	.dc8d		a2 2e		ldx #$2e	                ldx #VDUVariables.hlfw.pixelsX
5377	.dc8f						LDC91:
5378	.dc8f		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixelsX
5379	.dc91		20 0a c9	jsr $c90a	                jsr copyTwoBytesWithinVDUVariables
5380	.dc94		a2 30		ldx #$30	                ldx #VDUVariables.hlfw.pixelsY
5381	.dc96		20 0a c9	jsr $c90a	                jsr copyTwoBytesWithinVDUVariables
5382	.dc99		28		plp		                plp
5383	.dc9a		f0 05		beq $dca1	                beq LDCA3
5384	.dc9c		b0 04		bcs $dca2	                bcs LDCA4
5385	.dc9e		ee 16 03	inc $0316	                inc $0316
5386	.dca1						LDCA3:
5387	.dca1		60		rts		                rts

5389	.dca2						LDCA4:
5390	.dca2		ad 24 03	lda $0324	                lda $0324
5391	.dca5		d0 03		bne $dcaa	                bne LDCAC
5392	.dca7		ce 25 03	dec $0325	                dec $0325
5393	.dcaa						LDCAC:
5394	.dcaa		ce 24 03	dec $0324	                dec $0324
5395	.dcad		60		rts		                rts

5397							;-------------------------------------------------------------------------

5399	.dcae						LDCB0:
5400	.dcae		20 d0 dc	jsr $dcd0	                jsr LDCD2
5401	.dcb1		d0 55		bne $dd08	                bne rtsDD0A
5402	.dcb3		20 09 dd	jsr $dd09	                jsr LDD0B
5403	.dcb6						LDCB8:
5404	.dcb6		a2 2e		ldx #$2e	                ldx #$2E
5405	.dcb8		a0 32		ldy #$32	                ldy #$32
5406	.dcba		20 e6 da	jsr $dae6	                jsr LDAE8
5407	.dcbd		80 46		bra $dd05	                bra LDD07

5409	.dcbf						LDCC1:
5410	.dcbf		20 c7 dc	jsr $dcc7	                jsr LDCC9
5411	.dcc2		a2 2c		ldx #$2c	                ldx #$2C
5412	.dcc4		20 d7 dc	jsr $dcd7	                jsr LDCD9
5413	.dcc7						LDCC9:
5414	.dcc7		08		php		                php
5415	.dcc8		a5 e1		lda $e1		                lda $E1
5416	.dcca		49 08		eor #$08	                eor #$08
5417	.dccc		85 e1		sta $e1		                sta $E1
5418	.dcce		28		plp		                plp
5419	.dccf		60		rts		                rts

5421							;-------------------------------------------------------------------------

5423	.dcd0						LDCD2:
5424	.dcd0		a0 2e		ldy #$2e	                ldy #VDUVariables.hlfw.pixelsX
5425	.dcd2		20 1c c9	jsr $c91c	                jsr copyFourBytesWithinVDUVariables
5426	.dcd5						LDCD7:
5427	.dcd5		a2 04		ldx #$04	                ldx #VDUVariables.graphicsWindowPixelsRight
5428	.dcd7						LDCD9:
5429	.dcd7		a0 34		ldy #$34	                ldy #VDUVariables.hlfw.pixelsLimitX
5430	.dcd9		20 0a c9	jsr $c90a	                jsr copyTwoBytesWithinVDUVariables
5431	.dcdc		a2 34		ldx #$34	                ldx #VDUVariables.hlfw.pixelsLimitX
5432	.dcde		20 33 dd	jsr $dd33	                jsr shouldFillPixel
5433	.dce1		d0 25		bne $dd08	                bne rtsDD0A  ;taken if pixel not to be filled, so done
5434	.dce3						LDCE5:
5435	.dce3		46 d1		lsr $d1		                lsr ZMASK                    ;next pixel
5436	.dce5		90 08		bcc $dcef	                bcc LDCF1                    ;taken if still in same byte
5437	.dce7						LDCE9:
5438	.dce7		20 65 da	jsr $da65	                jsr nextColumnAndResetMask
5439	.dcea		20 63 dd	jsr $dd63	                jsr shouldFillByte
5440	.dced		b0 f8		bcs $dce7	                bcs LDCE9
5441	.dcef						LDCF1:
5442	.dcef		20 83 dd	jsr $dd83	                jsr LDD85
5443	.dcf2		b0 ef		bcs $dce3	                bcs LDCE5
5444	.dcf4		38		sec		                sec
5445	.dcf5		ad 34 03	lda $0334	                lda vduv.hlfw.pixelsLimitX+0
5446	.dcf8		e5 de		sbc $de		                sbc zhlfw.pixelsX+0
5447	.dcfa		8d 32 03	sta $0332	                sta vduv.hlfw.pixelsRightEndX+0
5448	.dcfd		ad 35 03	lda $0335	                lda vduv.hlfw.pixelsLimitX+1
5449	.dd00		e5 df		sbc $df		                sbc zhlfw.pixelsX+1
5450	.dd02		8d 33 03	sta $0333	                sta vduv.hlfw.pixelsRightEndX+1
5451	.dd05						LDD07:
5452	.dd05		a9 00		lda #$00	                lda #$00
5453	.dd07		38		sec		                sec
5454	.dd08						rtsDD0A:
5455	.dd08		60		rts		                rts

5457	.dd09						LDD0B:
5458	.dd09		a2 00		ldx #$00	                ldx #VDUVariables.graphicsWindowPixelsLeft
5459	.dd0b		20 33 dd	jsr $dd33	                jsr shouldFillPixel
5460	.dd0e		d0 f8		bne $dd08	                bne rtsDD0A                    ;taken if pixel not to be filled, so done
5461	.dd10						LDD12:
5462	.dd10		06 d1		asl $d1		                asl ZMASK                      ;next pixel
5463	.dd12		90 08		bcc $dd1c	                bcc LDD1E                    ;taken if still in same byte
5464	.dd14						LDD16:
5465	.dd14		20 32 da	jsr $da32	                jsr previousColumnAndResetMask
5466	.dd17		20 63 dd	jsr $dd63	                jsr shouldFillByte
5467	.dd1a		b0 f8		bcs $dd14	                bcs LDD16
5468	.dd1c						LDD1E:
5469	.dd1c		20 83 dd	jsr $dd83	                jsr LDD85
5470	.dd1f		b0 ef		bcs $dd10	                bcs LDD12
5471	.dd21		ad 00 03	lda $0300	                lda vduv.graphicsWindowPixelsLeft+0
5472	.dd24		65 de		adc $de		                adc zhlfw.pixelsX+0
5473	.dd26		8d 2e 03	sta $032e	                sta vduv.hlfw.pixelsX+0
5474	.dd29		ad 01 03	lda $0301	                lda vduv.graphicsWindowPixelsLeft+1
5475	.dd2c		65 df		adc $df		                adc zhlfw.pixelsX+1
5476	.dd2e		8d 2f 03	sta $032f	                sta vduv.hlfw.pixelsX+1
5477	.dd31		80 d2		bra $dd05	                bra LDD07

5479							;-------------------------------------------------------------------------
5480							;
5481							; Check whether line fill should fill a pixel.
5482							;
5483							; entry:
5484							;
5485							; X = VDU variable offset of edge of window
5486							;
5487							; vduv.workspace._2E - pixel X, Y coordinates
5488							;
5489							; exit:
5490							;
5491							; Z=1 if pixel should be filled
5492							;
5493							; ZTEMPC = ???
5494							;
5495	.dd33						shouldFillPixel:
5496	.dd33		38		sec		                sec
5497	.dd34		ad 2e 03	lda $032e	                lda vduv.workspace._2E+0
5498	.dd37		fd 00 03	sbc $0300,x	                sbc vduv+0,x
5499	.dd3a		a8		tay		                tay
5500	.dd3b		ad 2f 03	lda $032f	                lda vduv.workspace._2E+1
5501	.dd3e		fd 01 03	sbc $0301,x	                sbc vduv+1,x
5502	.dd41		10 03		bpl $dd46	                bpl +
5503	.dd43		20 2c c9	jsr $c92c	                jsr negateAY
5504	.dd46						+
5505	.dd46		84 de		sty $de		                sty zhlfw.pixelsX+0
5506	.dd48		85 df		sta $df		                sta zhlfw.pixelsX+1
5507	.dd4a		a2 2e		ldx #$2e	                ldx #VDUVariables.workspace._2E
5508	.dd4c		20 c1 de	jsr $dec1	                jsr windGADDR
5509	.dd4f		18		clc		                clc
5510	.dd50		d0 10		bne $dd62	                bne rtsDD64                    ;taken if point outside window
5511	.dd52		b1 d6		lda ($d6),y	                lda (ZMEMG),y                  ;get screen byte
5512	.dd54		5d 30 88	eor $8830,x	                eor andy.hlfw.ecfPattern,x     ;EOR with appropriate pattern
5513	.dd57		85 da		sta $da		                sta zhlfw.notByteMatch ;0 if whole byte matches
5514	.dd59		25 d1		and $d1		                and ZMASK                      ;0 if masked byte matches
5515	.dd5b		f0 02		beq $dd5f	                beq +              ;taken if masked byte matches - A=0
5516	.dd5d		a9 08		lda #$08	                lda #$08              ;masked byte doesn't match - A=8
5517	.dd5f						+
5518	.dd5f		45 e1		eor $e1		                eor zhlfw.resultEOR ;maybe invert result
5519	.dd61		38		sec		                sec
5520	.dd62						rtsDD64:
5521	.dd62		60		rts		                rts

5523							;-------------------------------------------------------------------------

5525	.dd63						shouldFillByte:
5526	.dd63		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5527	.dd65		5d 30 88	eor $8830,x	                eor andy.hlfw.ecfPattern,x
5528	.dd68		85 da		sta $da		                sta zhlfw.notByteMatch
5529	.dd6a		05 e1		ora $e1		                ora zhlfw.resultEOR
5530	.dd6c		18		clc		                clc
5531	.dd6d		d0 13		bne $dd82	                bne rtsDD84
5532	.dd6f		a5 de		lda $de		                lda zhlfw.pixelsX+0
5533	.dd71		ed 61 03	sbc $0361	                sbc vduv.pixelsPerByteMinusOne
5534	.dd74		48		pha		                pha
5535	.dd75		a5 df		lda $df		                lda zhlfw.pixelsX+1
5536	.dd77		e9 00		sbc #$00	                sbc #$00
5537	.dd79		90 06		bcc $dd81	                bcc pla_rts_DD83             ;taken if past X=0
5538	.dd7b		85 df		sta $df		                sta zhlfw.pixelsX+1
5539	.dd7d		68		pla		                pla
5540	.dd7e		85 de		sta $de		                sta zhlfw.pixelsX+0
5541	.dd80		60		rts		                rts

5543	.dd81						pla_rts_DD83:
5544	.dd81		68		pla		                pla
5545	.dd82						rtsDD84:
5546	.dd82		60		rts		                rts

5548							;-------------------------------------------------------------------------

5550	.dd83						LDD85:
5551	.dd83		a5 da		lda $da		                lda zhlfw.notByteMatch
5552	.dd85		25 d1		and $d1		                and ZMASK
5553	.dd87		f0 02		beq $dd8b	                beq +
5554	.dd89		a9 08		lda #$08	                lda #$08
5555	.dd8b						+
5556	.dd8b		45 e1		eor $e1		                eor zhlfw.resultEOR
5557	.dd8d		d0 0d		bne $dd9c	                bne rtsDD9E

5559							                ; pixelsX -= 1
5560	.dd8f		a5 de		lda $de		                lda zhlfw.pixelsX+0
5561	.dd91		d0 06		bne $dd99	                bne +
5562	.dd93		a5 df		lda $df		                lda zhlfw.pixelsX+1
5563	.dd95		f0 05		beq $dd9c	                beq rtsDD9E
5564	.dd97		c6 df		dec $df		                dec zhlfw.pixelsX+1
5565	.dd99						+
5566	.dd99		c6 de		dec $de		                dec zhlfw.pixelsX+0
5567	.dd9b		38		sec		                sec
5568	.dd9c						rtsDD9E:
5569	.dd9c		60		rts		                rts

5571							;-------------------------------------------------------------------------
5572							;
5573							; Copy appropriate ECF pattern for line fill.
5574							;
5575							; entry:
5576							;
5577							; A = horizontal line fill PLOT code
5578							;
5579							; exit:
5580							;
5581							; andy.hlfw.ecfPattern = holds bg/fg ECF pattern as required
5582							;
5583							; ZTEMPD?1 = 0 for fill to matching, 8 to fill to non-matching
5584							;
5585	.dd9d						copyECFPatternForLineFill:
5586	.dd9d		4a		lsr a		                lsr a                        ;36-39; 44-47; 52-55; 60-63
5587	.dd9e		4a		lsr a		                lsr a                        ;18-19; 42-43; 26-27; 30-31
5588	.dd9f						LDDA1:
5589	.dd9f		29 08		and #$08	                and #$08                     ;8 if PLOT >= 104
5590	.dda1		85 e1		sta $e1		                sta zhlfw.resultEOR
5591	.dda3		49 0f		eor #$0f	                eor #$0F                     ;
5592	.dda5		aa		tax		                tax
5593	.dda6		a0 07		ldy #$07	                ldy #$07
5594	.dda8						-
5595	.dda8		bd 20 88	lda $8820,x	                lda andy.currentECFPatterns,x
5596	.ddab		99 30 88	sta $8830,y	                sta andy.hlfw.ecfPattern,y
5597	.ddae		ca		dex		                dex
5598	.ddaf		88		dey		                dey
5599	.ddb0		10 f6		bpl $dda8	                bpl -
5600	.ddb2		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
5601	.ddb4		60		rts		                rts

5603							;-------------------------------------------------------------------------
5604							;
5605							;
5606							; entry:
5607							;
5608							; A = offset into VDU variables of coordinates
5609							;
5610							; exit:
5611							;
5612							; A = colour, or $ff if off screen/teletext (as per OSWORD $09)
5613							;
5614	.ddb5						readPixelColour: .proc
5615	.ddb5		20 fa c0	jsr $c0fa	                jsr stopCursorEditing
5616	.ddb8		ae 61 03	ldx $0361	                ldx vduv.pixelsPerByteMinusOne
5617	.ddbb		f0 21		beq $ddde	                beq invalid             ;taken if teletext
5618	.ddbd		48		pha		                pha
5619	.ddbe		aa		tax		                tax
5620	.ddbf		20 dc d1	jsr $d1dc	                jsr eigabsEntryPoint
5621	.ddc2		fa		plx		                plx
5622	.ddc3		20 c1 de	jsr $dec1	                jsr windGADDR
5623	.ddc6		d0 16		bne $ddde	                bne invalid             ;taken if off screen
5624	.ddc8		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5625	.ddca		64 da		stz $da		                stz ZTEMP+0
5626	.ddcc		80 01		bra $ddcf	                bra shiftMask

5628							                ; Keep shifting the byte and the mask. When a 1 bit is
5629							                ; shifted out of the mask, shift the corresponding
5630							                ; byte bit bit into ZTEMP+0, building up the pixel
5631							                ; colour a bit at a time.
5632							                ;
5633							                ; When the mask becomes 0, done.
5634	.ddce						shiftByteAndMask:
5635	.ddce		0a		asl a		                asl a
5636	.ddcf						shiftMask:
5637	.ddcf		06 d1		asl $d1		                asl ZMASK
5638	.ddd1		90 fb		bcc $ddce	                bcc shiftByteAndMask
5639	.ddd3		0a		asl a		                asl a
5640	.ddd4		26 da		rol $da		                rol ZTEMP+0
5641	.ddd6		a6 d1		ldx $d1		                ldx ZMASK
5642	.ddd8		d0 f5		bne $ddcf	                bne shiftMask
5643	.ddda		a5 da		lda $da		                lda ZTEMP+0
5644	.dddc		80 02		bra $dde0	                bra done

5646	.ddde						invalid:
5647	.ddde		a9 ff		lda #$ff	                lda #$FF
5648	.dde0						done:
5649	.dde0		4c ca c0	jmp $c0ca	                jmp reinstateCursorEditing
5650							                .endproc

5652							;-------------------------------------------------------------------------
5653							;
5654							; Translate ASCII char to the SAA5050 character set.
5655							;
5656							; # ($23) becomes $5f
5657							; _ ($5f) becomes $60
5658							; GBP ($60) becomes $23
5659							;
5660							; Because the mapping is a kind of cycle, you can call this routine
5661							; twice to translate from SAA5050 to ASCII.
5662							;
5663							; entry:
5664							;
5665							; A = ASCII char
5666							;
5667							; exit:
5668							;
5669							; A = SAA550 char
5670							;
5671	.dde3						getSAA5050FromASCII:
5672	.dde3		c9 23		cmp #$23	                cmp #$23
5673	.dde5		f0 0a		beq $ddf1	                beq translateHash
5674	.dde7		c9 5f		cmp #$5f	                cmp #$5F
5675	.dde9		f0 08		beq $ddf3	                beq translateUnderscore
5676	.ddeb		c9 60		cmp #$60	                cmp #$60
5677	.dded		d0 06		bne $ddf5	                bne rtsDDF7
5678	.ddef						translateGBP:
5679	.ddef		49 3f		eor #$3f	                eor #$3F                     ;0x60->0x5f
5680	.ddf1						translateHash:
5681	.ddf1		49 43		eor #$43	                eor #$43                     ;0x23->0x5f or 0x5f->0x1c
5682	.ddf3						translateUnderscore:
5683	.ddf3		49 3f		eor #$3f	                eor #$3F                     ;0x5f->0x60 or 0x1c->0x23
5684	.ddf5						rtsDDF7:
5685	.ddf5		60		rts		                rts

5687							;-------------------------------------------------------------------------

5689	.ddf6						readCharacterAtTextCursor: .proc
5690	.ddf6		58		cli		                cli
5691	.ddf7		24 d0		bit $d0		                bit STATE
5692	.ddf9		50 06		bvc $de01	                bvc +                      ;taken if not cursor editing
5693	.ddfb		20 fa c0	jsr $c0fa	                jsr stopCursorEditing
5694	.ddfe		20 d1 c0	jsr $c0d1	                jsr exchangeCursors
5695	.de01						+
5696	.de01		ac 60 03	ldy $0360	                ldy vduv.numberOfLogicalColoursMinusOne
5697	.de04		d0 17		bne $de1d	                bne bitmapMode
5698	.de06						readTeletextChar:
5699	.de06		b2 d8		lda ($d8)	                lda (ZMEMT)                  ;read character from screen
5700	.de08		20 e3 dd	jsr $dde3	                jsr getSAA5050FromASCII      ;call 2x to convert to ASCII
5701	.de0b		20 e3 dd	jsr $dde3	                jsr getSAA5050FromASCII      ;call 2x to convert to ASCII
5702	.de0e						done:
5703	.de0e		24 d0		bit $d0		                bit STATE
5704	.de10		50 06		bvc $de18	                bvc +                     ;taken if not cursor editing
5705	.de12		20 d1 c0	jsr $c0d1	                jsr exchangeCursors
5706	.de15		20 ca c0	jsr $c0ca	                jsr reinstateCursorEditing
5707	.de18						+
5708	.de18		ac 55 03	ldy $0355	                ldy vduv.currentScreenMODE
5709	.de1b		aa		tax		                tax
5710	.de1c		60		rts		                rts

5712	.de1d						bitmapMode:
5713	.de1d		20 54 de	jsr $de54	                jsr LDE56
5714	.de20		a5 f4		lda $f4		                lda $F4
5715	.de22		48		pha		                pha
5716	.de23		20 8c e5	jsr $e58c	                jsr selectTerminalROMAndANDY
5717	.de26		a9 20		lda #$20	                lda #$20
5718	.de28		aa		tax		                tax                          ;X = ASCII code for char
5719	.de29		20 2a e2	jsr $e22a	                jsr getSoftCharacterDefinitionAddress
5720	.de2c						compare:
5721	.de2c		a0 07		ldy #$07	                ldy #$07
5722	.de2e						-
5723	.de2e		b9 28 03	lda $0328,y	                lda vduv.workspace._28,y
5724	.de31		51 de		eor ($de),y	                eor (ZTEMPC),y
5725	.de33		d0 0a		bne $de3f	                bne nextFontChar ;taken if no match - can't be this char
5726	.de35		88		dey		                dey
5727	.de36		10 f6		bpl $de2e	                bpl -

5729	.de38		8a		txa		                txa                          ;A = char found
5730							                .if version==350
5733							                .endif
5734	.de39						bitmapModeDone:
5735	.de39		fa		plx		                plx
5736	.de3a		20 8e e5	jsr $e58e	                jsr selectROMX
5737	.de3d		80 cf		bra $de0e	                bra done

5739	.de3f						nextFontChar:
5740	.de3f		e8		inx		                inx                          ;next ASCII code
5741							                .if version==350
5747							                .else
5748	.de40		18		clc		                clc
5749	.de41		a5 de		lda $de		                lda ZTEMPC+0
5750	.de43		69 08		adc #$08	                adc #$08                     ;8 bytes/font char
5751	.de45		85 de		sta $de		                sta ZTEMPC+0
5752	.de47		90 02		bcc $de4b	                bcc gotCharAddress
5753	.de49		e6 df		inc $df		                inc ZTEMPC+1
5754							                .endif
5755	.de4b						gotCharAddress:
5756	.de4b		e0 7f		cpx #$7f	                cpx #$7F
5757	.de4d		f0 f0		beq $de3f	                beq nextFontChar                 ;skip CHR$127
5758	.de4f		8a		txa		                txa
5759	.de50		d0 da		bne $de2c	                bne compare           ;taken if more chars to consider
5760	.de52		80 e5		bra $de39	                bra bitmapModeDone ;finish with A=0 - i.e., no match found
5761							                .endproc

5763							;-------------------------------------------------------------------------
5764							;
5765							; Copy character out of screen memory, and store as a 1 bpp bitmap in
5766							; VDU variables workspace.
5767							;
5768	.de54						LDE56: .proc
5769	.de54		a6 d8		ldx $d8		                ldx ZMEMT+0
5770	.de56		a5 d9		lda $d9		                lda ZMEMT+1
5771	.de58		20 d7 ce	jsr $ced7	                jsr getNext3ColumnAddresses
5772	.de5b		a0 07		ldy #$07	                ldy #$07
5773	.de5d						loop:
5774	.de5d		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
5775	.de60		e0 03		cpx #$03	                cpx #$03
5776	.de62		f0 09		beq $de6d	                beq read2bppChar
5777	.de64		b0 13		bcs $de79	                bcs read4bppChar
5778	.de66						read1bppChar:
5779	.de66		b1 d8		lda ($d8),y	                lda (ZMEMT),y
5780	.de68		4d 58 03	eor $0358	                eor vduv.backgroundTextColour
5781	.de6b		80 22		bra $de8f	                bra next

5783	.de6d						read2bppChar:
5784	.de6d		b1 d8		lda ($d8),y	                lda (ZMEMT),y                ;get pixels 0-3
5785	.de6f		20 a0 de	jsr $dea0	                jsr get4Pixels
5786	.de72		b1 da		lda ($da),y	                lda (ZTEMP),y                  ;get pixels 4-7
5787	.de74		20 a0 de	jsr $dea0	                jsr get4Pixels
5788	.de77		80 14		bra $de8d	                bra LDE8F

5790	.de79						read4bppChar:
5791	.de79		b1 d8		lda ($d8),y	                lda (ZMEMT),y                ;get pixels 0/1
5792	.de7b		20 96 de	jsr $de96	                jsr get2Pixels
5793	.de7e		b1 da		lda ($da),y	                lda (ZTEMP),y                ;get pixels 2/3
5794	.de80		20 96 de	jsr $de96	                jsr get2Pixels
5795	.de83		b1 dc		lda ($dc),y	                lda (ZTEMPB),y               ;get pixels 4/5
5796	.de85		20 96 de	jsr $de96	                jsr get2Pixels
5797	.de88		b1 e0		lda ($e0),y	                lda (ZTEMPD),y               ;get pixels 6/7
5798	.de8a		20 96 de	jsr $de96	                jsr get2Pixels
5799	.de8d						LDE8F:
5800	.de8d		a5 df		lda $df		                lda ZTEMPC+1
5801	.de8f						next:
5802	.de8f		99 28 03	sta $0328,y	                sta vduv.workspace._28,y
5803	.de92		88		dey		                dey
5804	.de93		10 c8		bpl $de5d	                bpl loop
5805	.de95		60		rts		                rts

5807	.de96						get2Pixels:
5808	.de96		4d 58 03	eor $0358	                eor vduv.backgroundTextColour ;reset background pixel bits
5809	.de99		20 b3 de	jsr $deb3	                jsr or2Pixels
5810	.de9c		29 03		and #$03	                and #%00000011               ;2 pixels/byte
5811	.de9e		80 0c		bra $deac	                bra shiftIn2

5813	.dea0						get4Pixels:
5814	.dea0		4d 58 03	eor $0358	                eor vduv.backgroundTextColour ;
5815	.dea3		20 b8 de	jsr $deb8	                jsr or4Pixels
5816	.dea6		29 0f		and #$0f	                and #%00001111               ;4 pixels/byte

5818							                ; Build up the 1bpp char row in ZTEMPC?1, 2 or 4 bits
5819							                ; at a time.
5820	.dea8		06 df		asl $df		                asl ZTEMPC+1
5821	.deaa		06 df		asl $df		                asl ZTEMPC+1
5822	.deac						shiftIn2:
5823	.deac		06 df		asl $df		                asl ZTEMPC+1
5824	.deae		06 df		asl $df		                asl ZTEMPC+1
5825	.deb0		04 df		tsb $df		                tsb ZTEMPC+1
5826	.deb2		60		rts		                rts

5828							                ; OR together all the N bits for each pixel, making a
5829							                ; byte in which the bottom N bits have a bit set for
5830							                ; each non-0 pixel in the byte.
5831	.deb3						or2Pixels:
5832	.deb3		85 de		sta $de		                sta ZTEMPC+0
5833	.deb5		20 bc de	jsr $debc	                jsr shiftOut2
5834	.deb8						or4Pixels:
5835	.deb8		85 de		sta $de		                sta ZTEMPC+0                 ;%abcdABCD
5836	.deba		4a		lsr a		                lsr a                        ;%0abcdABC
5837	.debb		4a		lsr a		                lsr a                        ;%00abcdAB
5838	.debc						shiftOut2:
5839	.debc		4a		lsr a		                lsr a                        ;%000abcdA
5840	.debd		4a		lsr a		                lsr a                        ;%0000abcd
5841	.debe		05 de		ora $de		                ora ZTEMPC+0                 ;%0000abcd|%abcdABCD
5842							                .endproc
5843	.dec0						rtsDEC2:
5844	.dec0		60		rts		                rts

5846							;-------------------------------------------------------------------------
5847							;
5848							; Do WIND. If point not in window, return with Z=0. Otherwise, call
5849							; GADDR and return with Z=1.
5850							;
5851	.dec1						windGADDR:
5852	.dec1		20 a6 d1	jsr $d1a6	                jsr windEntryPoint
5853	.dec4		d0 fa		bne $dec0	                bne rtsDEC2                  ;taken if point outside window
5854	.dec6						gaddrEntryPoint:
5855	.dec6		bd 02 03	lda $0302,x	                lda vduv+2,x                 ;get Y coordinate
5856	.dec9						LDECB:
5857	.dec9		49 ff		eor #$ff	                eor #$FF                     ;invert Y coordinate
5858	.decb		a8		tay		                tay                          ;Y=Y coordinate
5859	.decc		29 07		and #$07	                and #$07                ;get scanline in character row
5860	.dece		85 da		sta $da		                sta ZTEMP+0             ;save scanline
5861	.ded0		98		tya		                tya                          ;A=Y coordinate
5862	.ded1		29 f8		and #$f8	                and #$F8                     ;row*8
5863	.ded3		4a		lsr a		                lsr a                        ;row*4
5864	.ded4		85 d7		sta $d7		                sta ZMEMG+1                  ;>(row*1024)
5865	.ded6		4a		lsr a		                lsr a                        ;>(row*512)
5866	.ded7		4a		lsr a		                lsr a                        ;>(row*256)
5867	.ded8		65 d7		adc $d7		                adc ZMEMG+1                  ;>(row*1280)
5868	.deda		4a		lsr a		                lsr a                        ;>(row*640)
5869	.dedb		85 d7		sta $d7		                sta ZMEMG+1                  ;
5870	.dedd		a9 00		lda #$00	                lda #$00                     ;
5871	.dedf		6a		ror a		                ror a                        ;<(row*640) - $00/$80
5872	.dee0		ac 56 03	ldy $0356	                ldy vduv.currentScreenMODEGroup
5873	.dee3		f0 03		beq $dee8	                beq +                      ;taken if 640 bytes per row
5874	.dee5		46 d7		lsr $d7		                lsr ZMEMG+1                ;>(row*320)
5875	.dee7		6a		ror a		                ror a                    ;<(row*320) - $00/$40/$80/$c0
5876	.dee8						+
5877	.dee8		05 da		ora $da		                ora ZTEMP+0               ;include the scanline offset
5878	.deea		6d 50 03	adc $0350	                adc vduv.screenTopLeftAddress+0 ;include LSB of screen base
5879	.deed		8d 1a 03	sta $031a	                sta vduv.graphicsAddressOffset

5881							                ; add MSB of screen base to ZMEMG+1
5882	.def0		a5 d7		lda $d7		                lda ZMEMG+1
5883	.def2		6d 51 03	adc $0351	                adc vduv.screenTopLeftAddress+1
5884	.def5		85 d7		sta $d7		                sta ZMEMG+1

5886	.def7		bd 01 03	lda $0301,x	                lda vduv+1,x                 ;get >X
5887	.defa		85 d6		sta $d6		                sta ZMEMG+0                  ;save >X
5888	.defc		bd 00 03	lda $0300,x	                lda vduv+0,x                 ;get <X
5889	.deff		2d 61 03	and $0361	                and vduv.pixelsPerByteMinusOne ;index for pixel
5890	.df02		6d 61 03	adc $0361	                adc vduv.pixelsPerByteMinusOne ;offset into pixel mask table
5891	.df05		a8		tay		                tay
5892	.df06		b9 2c e1	lda $e12c,y	                lda pixelMasks-1,y
5893	.df09		85 d1		sta $d1		                sta ZMASK

5895							                ; Form 16-bit column address offset (LSB in A, MSB in
5896							                ; ZMEMG+0), assuming 8 bits/pixel. No adjustment
5897							                ; needed if MODE 0/4, but scale up by 2 if MODE 1/5 or
5898							                ; 4 if MODE 2.

5900	.df0b		bd 00 03	lda $0300,x	                lda vduv+0,x                 ;A = <X
5901	.df0e		ac 61 03	ldy $0361	                ldy vduv.pixelsPerByteMinusOne
5902	.df11		c0 03		cpy #$03	                cpy #$03
5903	.df13		f0 05		beq $df1a	                beq LDF1C         ;taken if 4 px/byte - i.e., MODE 1/5
5904	.df15		b0 06		bcs $df1d	                bcs LDF1F        ;taken if >4 px/byte - i.e., MODE 0/4
5905	.df17		0a		asl a		                asl a
5906	.df18		26 d6		rol $d6		                rol ZMEMG+0
5907	.df1a						LDF1C:
5908	.df1a		0a		asl a		                asl a
5909	.df1b		26 d6		rol $d6		                rol ZMEMG+0
5910	.df1d						LDF1F:
5911	.df1d		29 f8		and #$f8	                and #$F8                     ;<column offset
5912	.df1f		18		clc		                clc
5913	.df20		6d 1a 03	adc $031a	                adc vduv.graphicsAddressOffset
5914	.df23		8d 1a 03	sta $031a	                sta vduv.graphicsAddressOffset
5915	.df26		a5 d6		lda $d6		                lda ZMEMG+0                  ;>column offset
5916	.df28		65 d7		adc $d7		                adc ZMEMG+1                  ;add to address MSB
5917	.df2a		10 04		bpl $df30	                bpl +                        ;taken if no wrap
5918	.df2c		38		sec		                sec
5919	.df2d		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte ;handle wrap at end of screen
5920	.df30						+
5921	.df30		85 d7		sta $d7		                sta ZMEMG+1                  ;got MSB
5922	.df32		64 d6		stz $d6		                stz ZMEMG+0 ;LSB always 0 - the offset takes care of this
5923	.df34		a6 da		ldx $da		                ldx ZTEMP+0 ;get scanline in row
5924	.df36		20 7a da	jsr $da7a	                jsr setupColourMasks
5925	.df39		ac 1a 03	ldy $031a	                ldy vduv.graphicsAddressOffset
5926	.df3c						ldaim00_rts_DF3E:
5927	.df3c		a9 00		lda #$00	                lda #$00                     ;return with Z=1, as per WIND
5928	.df3e		60		rts		                rts

5930							;-------------------------------------------------------------------------

5932	.df3f						LDF41:
5933	.df3f		20 c6 de	jsr $dec6	                jsr gaddrEntryPoint
5934	.df42		da		phx		                phx
5935	.df43		a2 00		ldx #$00	                ldx #$00
5936	.df45		ad 5a 03	lda $035a	                lda $035A
5937	.df48		c9 04		cmp #$04	                cmp #$04
5938	.df4a		b0 0b		bcs $df57	                bcs LDF59
5939	.df4c		ae 6a 03	ldx $036a	                ldx $036A
5940	.df4f		ad 59 03	lda $0359	                lda $0359
5941	.df52		f0 03		beq $df57	                beq LDF59
5942	.df54		ae 6b 03	ldx $036b	                ldx $036B
5943	.df57						LDF59:
5944	.df57		8e 69 03	stx $0369	                stx $0369
5945	.df5a		fa		plx		                plx
5946	.df5b		60		rts		                rts

5948							;-------------------------------------------------------------------------

5950	.df5c						handleCopyKey:
5951	.df5c		a9 20		lda #$20	                lda #STATE.isVDU5
5952	.df5e		24 d0		bit $d0		                bit STATE
5953	.df60		50 da		bvc $df3c	                bvc ldaim00_rts_DF3E      ;taken if not cursor editing
5954	.df62		d0 d8		bne $df3c	                bne ldaim00_rts_DF3E      ;taken if VDU5
5955							                .if version==350&&!finmos329
5957							                .elsif (version<511||autocue)&&!finmos329
5958	.df64		20 f6 dd	jsr $ddf6	                jsr readCharacterAtTextCursor
5963							                .endif
5964	.df67		f0 0c		beq $df75	                beq rtsDF77              ;taken if char not recognised
5965	.df69		48		pha		                pha                      ;save char recognised
5966	.df6a		20 d3 df	jsr $dfd3	                jsr isCursorEditingPossible
5967	.df6d		d0 05		bne $df74	                bne pla_rts_DF76
5968	.df6f		a9 09		lda #$09	                lda #$09
5969	.df71		20 ba df	jsr $dfba	                jsr moveEditCursor
5970	.df74						pla_rts_DF76:
5971	.df74		68		pla		                pla
5972	.df75						rtsDF77:
5973	.df75		60		rts		                rts

5975							;-------------------------------------------------------------------------
5976							;
5977							; Handle cursor key press.
5978							;
5979							; Entry: A = one of the cursor key codes:
5980							;            $88 = left
5981							;            $89 = right
5982							;            $8a = down
5983							;            $8b = up

5985	.df76						handleCursorKey:
5986	.df76		48		pha		                pha                          ;save cursor key code
5987	.df77		20 d3 df	jsr $dfd3	                jsr isCursorEditingPossible
5988	.df7a		d0 f8		bne $df74	                bne pla_rts_DF76             ;bail if editing not possible
5989	.df7c		70 16		bvs $df94	                bvs editing                  ;taken if already editing
5990	.df7e						beginEditing:
5991	.df7e		ad 5f 03	lda $035f	                lda vduv.lastCursorStartRegisterValue
5992	.df81		29 df		and #$df	                and #%11011111
5993	.df83		20 51 cf	jsr $cf51	                jsr setCRTCRegister10        ;hide cursor
5994	.df86		a2 18		ldx #$18	                ldx #VDUVariables.textCursorXPosition
5995	.df88		a0 64		ldy #$64	                ldy #VDUVariables.editCursorXPosition
5996	.df8a		20 0a c9	jsr $c90a	                jsr copyTwoBytesWithinVDUVariables ;edit cursor pos =
5997							                                                   ;text cursor pos
5998	.df8d		20 05 c1	jsr $c105	                jsr activateEditCursor
5999	.df90		a9 02		lda #$02	                lda #STATE.isScrollingDisabled
6000	.df92		04 d0		tsb $d0		                tsb STATE
6001	.df94						editing:
6002	.df94		68		pla		                pla                          ;restore cursor key code

6004							                ; Form appropriate VDU command (8/9/10/11) for the
6005							                ; key, assuming no VDU axis rearrangement.
6006	.df95		29 7f		and #$7f	                and #$7F
6007	.df97		85 da		sta $da		                sta ZTEMP                    ;save VDU command

6009							                ; Adjust VDU command based on axis swap/inversion.
6010	.df99		c9 0a		cmp #$0a	                cmp #$0A
6011	.df9b		b0 0e		bcs $dfab	                bcs handleCursorUpOrDown     ;taken if up/down
6012	.df9d						handleCursorLeftOrRightOrCopy:
6013	.df9d		ad 66 03	lda $0366	                lda vduv.cursorFlags
6014	.dfa0		4a		lsr a		                lsr a
6015	.dfa1		29 05		and #$05	                and #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertHorizontal)>>1
6016	.dfa3		89 04		bit #$04	                bit #vduv.cursorFlags.swapAxes>>1
6017	.dfa5		f0 11		beq $dfb8	                beq gotActualMoveCommand

6019	.dfa7		49 07		eor #$07	                eor #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal)>>1
6020	.dfa9		80 0d		bra $dfb8	                bra gotActualMoveCommand

6022	.dfab						handleCursorUpOrDown:
6023	.dfab		ad 66 03	lda $0366	                lda vduv.cursorFlags
6024	.dfae		4a		lsr a		                lsr a
6025	.dfaf		4a		lsr a		                lsr a
6026	.dfb0		29 03		and #$03	                and #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical)>>2 ;000000SV
6027	.dfb2		89 02		bit #$02	                bit #vduv.cursorFlags.swapAxes>>2
6028	.dfb4		f0 02		beq $dfb8	                beq gotActualMoveCommand

6030	.dfb6		49 01		eor #$01	                eor #vduv.cursorFlags.invertVertical>>2
6031	.dfb8						gotActualMoveCommand:
6032	.dfb8		45 da		eor $da		                eor ZTEMP
6033	.dfba						moveEditCursor:
6034	.dfba		a8		tay		                tay                          ;save command
6035	.dfbb		a9 40		lda #$40	                lda #STATE.isCursorEditing
6036	.dfbd		14 d0		trb $d0		                trb STATE            ;temporarily disable edit mode
6037	.dfbf		98		tya		                tya                  ;restore command
6038	.dfc0		ae 6c 03	ldx $036c	                ldx vduv.column81
6039	.dfc3		da		phx		                phx                  ;save old column 81 flag
6040	.dfc4		4e 6c 03	lsr $036c	                lsr vduv.column81    ;temporarily reset column 81 flag
6041	.dfc7		20 27 c0	jsr $c027	                jsr outputToVDU      ;print the cursor movement command
6042	.dfca		68		pla		                pla
6043	.dfcb		8d 6c 03	sta $036c	                sta vduv.column81            ;restore column 81 flag
6044	.dfce		a9 40		lda #$40	                lda #STATE.isCursorEditing
6045	.dfd0		04 d0		tsb $d0		                tsb STATE                    ;reinstate edit mode
6046	.dfd2		60		rts		                rts

6048							; Check if cursor editing is possible.
6049							;
6050							; Exit: Z=1 - editing is possible
6051							;             V reflects current STATE.isCursorEditing bit
6052							;       Z=0 - editing not possible
6053	.dfd3						isCursorEditingPossible:
6054	.dfd3		ae 6a 02	ldx $026a	                ldx vduQueueNegativeLength
6055	.dfd6		d0 04		bne $dfdc	                bne +                        ;return with Z=0 if VDU
6056							                                             ;queue not empty
6057	.dfd8		a9 a0		lda #$a0	                lda #STATE.isVDU21|STATE.isVDU5
6058	.dfda		24 d0		bit $d0		                bit STATE   ;return with Z=0 if neither VDU21 nor VDU5
6059	.dfdc						+
6060	.dfdc		60		rts		                rts

6062							;-------------------------------------------------------------------------
6063							;
6064							; 184â<80><93>191 = Move/copy rectangle [MasRef E.3-31]
6065							;
6066							                .if version!=400
6072							                .endif

6074							;-------------------------------------------------------------------------
6075							;
6076							; 192â<80><93>199 = Plot ellipse outline [MasRef E.3-32]
6077							;
6078							                .if version!=400
6085							                .endif

6087							;-------------------------------------------------------------------------
6088							;
6089							; 200â<80><93>207 = Plot solid ellipse [MasRef E.3-32]
6090							;
6091							                .if version!=400
6097							                .endif

6099							                .if version==400
6100	>dfdd						                .align 256
6101							                .endif

6103							;-------------------------------------------------------------------------

6105							; Pretty sure I have the logic for this all wrong...

6107							                .if !finmos329
6109							                .endif
6110	.e000						startupMessages: .block
6111							                .if version==500||version==510||autocue
6113							                .endif

6115							                .if version>=511&&!autocue
6117							                .endif
6118	.e000						acornMOS:
6119	>e000		0d				                .text 13
6120							                .if olivetti
6130							                .else
6131	>e001		41 63 6f 72 6e 20 4d 4f		                .text "Acorn MOS"
	>e009		53
6132							                .endif
6133							                .if version==400||version==350
6134	>e00a		20				                .text " "
6135							                .endif
6136	>e00b		00				                .byte 0
6137	.e00c						beep:
6138	>e00c		07				                .byte 7
6139	>e00d		00				                .byte 0
6140							                .if version!=400&&version!=350
6142							                .endif

6144	.e00e						twoNewlines:
6145	>e00e		08				                .byte 8
6146	>e00f		0d				                .byte $0D
6147	>e010		0d				                .byte $0D
6148							                ; terminating 0 comes from following table!
6149							                .cerror *!=LE013,"startupMessages needs a terminating 0"
6150							                .endblock
6151	.e011						LE013:
6152	>e011		00				                .byte %00000000;$00
6153	>e012		11				                .byte %00010001;$11
6154	>e013		22				                .byte %00100010;$22
6155	>e014		33				                .byte %00110011;$33
6156	>e015		44				                .byte %01000100;$44
6157	>e016		55				                .byte %01010101;$55
6158	>e017		66				                .byte %01100110;$66
6159	>e018		77				                .byte %01110111;$77
6160	>e019		88				                .byte %10001000;$88
6161	>e01a		99				                .byte %10011001;$99
6162	>e01b		aa				                .byte %10101010;$AA
6163	>e01c		bb				                .byte %10111011;$BB
6164	>e01d		cc				                .byte %11001100;$CC
6165	>e01e		dd				                .byte %11011101;$DD
6166	>e01f		ee				                .byte %11101110;$EE
6167	>e020		ff				                .byte %11111111;$FF
6168	.e021						LE023:
6169	>e021		00				                .byte %00000000;$00
6170	>e022		55				                .byte %01010101;$55
6171	>e023		aa				                .byte %10101010;$AA
6172	>e024		ff				                .byte %11111111;$FF

6174							; VDU control code dispatch tables
6175							; ================================
6176							;
6177							; entry:
6178							;
6179							;

6181							; each routine is (address, number of additional VDU bytes)
6182	=[($c035,0)]					_:=[(vdu0EntryPoint,0)] ; VDU0
6183	=[($c035,0),($c0e2,1)]				_..=[(vdu1EntryPoint,1)] ; VDU1
6184	=[($c035,0),($c0e2,1),($c0ea,0)]		_..=[(vdu2EntryPoint,0)] ; VDU2
6185	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0)]	_..=[(vdu3EntryPoint,0)] ; VDU3
6186	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0)]
							_..=[(vdu4EntryPoint,0)] ; VDU4
6187	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0)]
							_..=[(vdu5EntryPoint,0)] ; VDU5
6188	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0)]
							_..=[(vdu6EntryPoint,0)] ; VDU6
6189	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0)]
							_..=[(vdu7EntryPoint,0)] ; VDU7
6190	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0)]
							_..=[(vdu8EntryPoint,0)] ; VDU8
6191	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0)]
							_..=[(vdu9EntryPoint,0)] ; VDU9
6192	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0)]
							_..=[(vdu10EntryPoint,0)] ; VDU10
6193	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0)]
							_..=[(vdu11EntryPoint,0)] ; VDU11
6194	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0)]
							_..=[(vdu12EntryPoint,0)] ; VDU12
6195	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0)]
							_..=[(vdu13EntryPoint,0)] ; VDU13
6196	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0)]
							_..=[(vdu14EntryPoint,0)] ; VDU14
6197	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0)]
							_..=[(vdu15EntryPoint,0)] ; VDU15
6198	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0)]
							_..=[(vdu16EntryPoint,0)] ; VDU16
6199	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1)]
							_..=[(vdu17EntryPoint,1)] ; VDU17
6200	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2)]
							_..=[(vdu18EntryPoint,2)] ; VDU18
6201	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5)]
							_..=[(vdu19EntryPoint,5)] ; VDU19
6202	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0)]
							_..=[(vdu20EntryPoint,0)] ; VDU20
6203	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0)]
							_..=[(vdu21EntryPoint,0)] ; VDU21
6204	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1)]
							_..=[(vdu22EntryPoint,1)] ; VDU22
6205	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9)]
							_..=[(vdu23EntryPoint,9)] ; VDU23
6206	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8)]
							_..=[(vdu24EntryPoint,8)] ; VDU24
6207	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5)]
							_..=[(vdu25EntryPoint,5)] ; VDU25
6208	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0)]
							_..=[(vdu26EntryPoint,0)] ; VDU26
6209	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0)]
							_..=[(vdu27EntryPoint,0)] ; VDU27
6210	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4)]
							_..=[(vdu28EntryPoint,4)] ; VDU28
6211	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4),($c78a,4)]
							_..=[(vdu29EntryPoint,4)] ; VDU29
6212	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4),($c78a,4),($c47c,0)]
							_..=[(vdu30EntryPoint,0)] ; VDU30
6213	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4),($c78a,4),($c47c,0),($c482,2)]
							_..=[(vdu31EntryPoint,2)] ; VDU31
6214	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4),($c78a,4),($c47c,0),($c482,2),($ce2b,0)]
							_..=[(vdu127EntryPoint,0)] ; VDU127
6215	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($edae,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4),($c78a,4),($c47c,0),($c482,2),($ce2b,0)]
							vdu_routines=_

6217							; LSB of routine address
6218	.e025						vduRoutinesLSBTable:
6219							                .for i=0,i<len(vdu_routines),i+=1
6220	>e025		35				                .byte <vdu_routines[i][0]
6220	>e026		e2				                .byte <vdu_routines[i][0]
6220	>e027		ea				                .byte <vdu_routines[i][0]
6220	>e028		ea				                .byte <vdu_routines[i][0]
6220	>e029		1e				                .byte <vdu_routines[i][0]
6220	>e02a		2d				                .byte <vdu_routines[i][0]
6220	>e02b		35				                .byte <vdu_routines[i][0]
6220	>e02c		ae				                .byte <vdu_routines[i][0]
6220	>e02d		9a				                .byte <vdu_routines[i][0]
6220	>e02e		4c				                .byte <vdu_routines[i][0]
6220	>e02f		5b				                .byte <vdu_routines[i][0]
6220	>e030		b1				                .byte <vdu_routines[i][0]
6220	>e031		4f				                .byte <vdu_routines[i][0]
6220	>e032		f6				                .byte <vdu_routines[i][0]
6220	>e033		14				                .byte <vdu_routines[i][0]
6220	>e034		28				                .byte <vdu_routines[i][0]
6220	>e035		13				                .byte <vdu_routines[i][0]
6220	>e036		39				                .byte <vdu_routines[i][0]
6220	>e037		64				                .byte <vdu_routines[i][0]
6220	>e038		2d				                .byte <vdu_routines[i][0]
6220	>e039		c5				                .byte <vdu_routines[i][0]
6220	>e03a		19				                .byte <vdu_routines[i][0]
6220	>e03b		94				                .byte <vdu_routines[i][0]
6220	>e03c		7c				                .byte <vdu_routines[i][0]
6220	>e03d		1f				                .byte <vdu_routines[i][0]
6220	>e03e		9b				                .byte <vdu_routines[i][0]
6220	>e03f		aa				                .byte <vdu_routines[i][0]
6220	>e040		35				                .byte <vdu_routines[i][0]
6220	>e041		a5				                .byte <vdu_routines[i][0]
6220	>e042		8a				                .byte <vdu_routines[i][0]
6220	>e043		7c				                .byte <vdu_routines[i][0]
6220	>e044		82				                .byte <vdu_routines[i][0]
6220	>e045		2b				                .byte <vdu_routines[i][0]
6221							                .next

6223							; If bit 7 set: MSB of routine address
6224							;
6225							; If bit 7 clear:
6226							;
6227							; Top 4 bits are bits 8-11 of routine address (bits 12-15 are %1010,
6228							; so address is $C0xx to $C7xx)
6229							;
6230							; Bottom 4 bits are ORed with $f0 and stored in $26a - -ve bytes left
6231							; in VDU queue.
6232	.e046						vduRoutinesMSBTable:
6233							                .for i=0,i<len(vdu_routines),i+=1
6234							                .if vdu_routines[i][1]==0
6235	>e046		c0				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e047		0f				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e048		c0				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e049		c0				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e04a		c5				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e04b		c5				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e04c		c0				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e04d		ed				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e04e		c2				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e04f		c2				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e050		c2				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e051		c2				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e052		c4				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e053		c3				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e054		c5				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e055		c5				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e056		c4				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e057		5f				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e058		5e				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e059		6b				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e05a		c5				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e05b		c5				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e05c		7f				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e05d		67				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e05e		78				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e05f		6b				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e060		c6				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e061		c0				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e062		3c				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e063		7c				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e064		c4				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e065		4e				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e066		ce				                .byte >vdu_routines[i][0]
6240							                .endif
6241							                .next

6243							;-------------------------------------------------------------------------
6244							;
6245							; entry:
6246							;
6247							; C=0
6248							;
6249							; A = vdu 23 code
6250							;
6251							; VDU queue = the full 9 bytes of the VDU 23
6252							;
6253	.e067						vdu23EntryPointTable:
6254	>e067		f9 ce				                .word vdu23_0_EntryPoint
6255	>e069		29 cf				                .word vdu23_1_EntryPoint
6256	>e06b		55 cf				                .word vdu23_2_EntryPoint
6257	>e06d		55 cf				                .word vdu23_3_EntryPoint
6258	>e06f		55 cf				                .word vdu23_4_EntryPoint
6259	>e071		55 cf				                .word vdu23_5_EntryPoint
6260	>e073		dd cf				                .word vdu23_6_EntryPoint
6261	>e075		e4 cf				                .word vdu23_7_EntryPoint
6262	>e077		67 d0				                .word vdu23_8_EntryPoint
6263	>e079		0d d1				                .word vdu23_9_EntryPoint
6264	>e07b		0e d1				                .word vdu23_10_EntryPoint
6265	>e07d		6b cf				                .word vdu23_11_EntryPoint
6266	>e07f		94 cf				                .word vdu23_12_EntryPoint
6267	>e081		94 cf				                .word vdu23_13_EntryPoint
6268	>e083		94 cf				                .word vdu23_14_EntryPoint
6269	>e085		94 cf				                .word vdu23_15_EntryPoint
6270	>e087		1c d1				                .word vdu23_16_EntryPoint

6272							;-------------------------------------------------------------------------
6273							;
6274							; entry:
6275							;
6276							; A = plot number
6277							;
6278	.e089						plotEntryPointTable:
6279	>e089		48 db				                .word plotPoint    ;64â<80><93>71 = Plot point [MasRef E.3-24]
6280	>e08b		6a dc				                .word plotHorizontalLineFill ;72â<80><93>79 = Horizontal line fill (left and right to non-background) [MasRef E.3-24]
6281	>e08d		8b 9e				                .word terminal.L9BF7 ;80â<80><93>87 = Plot triangle [MasRef E.3-25]
6282	>e08f		73 dc				                .word plotHorizontalLineFillRight ;88â<80><93>95 = Horizontal line fill (right to background) [MasRef E.3-25]
6283	>e091		48 c4				                .word LC448 ;96â<80><93>103 = Plot rectangle [MasRef E.3-26]
6284	>e093		6a dc				                .word plotHorizontalLineFill ;104â<80><93>111 = Horizontal line fill (left and right to foreground) [MasRef E.3-26]
6285	>e095		37 9e				                .word terminal.plotParallelogram ;112â<80><93>119 = Plot parallelogram [MasRef E.3-27]
6286	>e097		73 dc				                .word plotHorizontalLineFillRight ;120â<80><93>127 = Horizontal line fill (right to non-foreground) [MasRef E.3-27]
6287	>e099		8d 9f				                .word terminal.L9CF9 ;128â<80><93>135 = Flood fill to non-background [MasRef E.3-28]
6288	>e09b		8d 9f				                .word terminal.L9CF9 ;136â<80><93>143 = Flood fill to foreground [MasRef E.3-28]
6289	>e09d		38 9c				                .word terminal.L99A4 ;144â<80><93>151 = Plot circle outline [MasRef E.3-28]
6290	>e09f		d8 9b				                .word terminal.L9944 ;152â<80><93>159 = Plot filled circle [MasRef E.3-29]
6291	>e0a1		2d 9c				                .word terminal.L9999 ;160â<80><93>167 = Plot circular arc [MasRef E.3-29]
6292	>e0a3		c9 9b				                .word terminal.L9935 ;168â<80><93>175 = Plot filled chord segment [MasRef E.3-30]
6293	>e0a5		b7 9b				                .word terminal.L9923 ;176â<80><93>183 = Plot filled sector [MasRef E.3-30]
6294	>e0a7		c4 a4				                .word plotMoveOrCopyRectangle ;184â<80><93>191 = Move/copy rectangle [MasRef E.3-31]
6295	>e0a9		06 a0				                .word plotEllipseOutline ;192â<80><93>199 = Plot ellipse outline [MasRef E.3-32]
6296	>e0ab		6d a0				                .word plotSolidEllipse ;200â<80><93>207 = Plot solid ellipse [MasRef E.3-32]

6298							; Times 40 lookup table, high bytes
6299	.e0ad						multiplyBy40TableHigh:
6300							                .for i=0,i<25,i+=1
6301	>e0ad		00				                .byte >i*40
6301	>e0ae		00				                .byte >i*40
6301	>e0af		00				                .byte >i*40
6301	>e0b0		00				                .byte >i*40
6301	>e0b1		00				                .byte >i*40
6301	>e0b2		00				                .byte >i*40
6301	>e0b3		00				                .byte >i*40
6301	>e0b4		01				                .byte >i*40
6301	>e0b5		01				                .byte >i*40
6301	>e0b6		01				                .byte >i*40
6301	>e0b7		01				                .byte >i*40
6301	>e0b8		01				                .byte >i*40
6301	>e0b9		01				                .byte >i*40
6301	>e0ba		02				                .byte >i*40
6301	>e0bb		02				                .byte >i*40
6301	>e0bc		02				                .byte >i*40
6301	>e0bd		02				                .byte >i*40
6301	>e0be		02				                .byte >i*40
6301	>e0bf		02				                .byte >i*40
6301	>e0c0		02				                .byte >i*40
6301	>e0c1		03				                .byte >i*40
6301	>e0c2		03				                .byte >i*40
6301	>e0c3		03				                .byte >i*40
6301	>e0c4		03				                .byte >i*40
6301	>e0c5		03				                .byte >i*40
6302							                .next

6304							; Times 40 lookup table, low bytes
6305	.e0c6						multiplyBy40TableLow:
6306							                .for i=0,i<25,i+=1
6307	>e0c6		00				                .byte <i*40
6307	>e0c7		28				                .byte <i*40
6307	>e0c8		50				                .byte <i*40
6307	>e0c9		78				                .byte <i*40
6307	>e0ca		a0				                .byte <i*40
6307	>e0cb		c8				                .byte <i*40
6307	>e0cc		f0				                .byte <i*40
6307	>e0cd		18				                .byte <i*40
6307	>e0ce		40				                .byte <i*40
6307	>e0cf		68				                .byte <i*40
6307	>e0d0		90				                .byte <i*40
6307	>e0d1		b8				                .byte <i*40
6307	>e0d2		e0				                .byte <i*40
6307	>e0d3		08				                .byte <i*40
6307	>e0d4		30				                .byte <i*40
6307	>e0d5		58				                .byte <i*40
6307	>e0d6		80				                .byte <i*40
6307	>e0d7		a8				                .byte <i*40
6307	>e0d8		d0				                .byte <i*40
6307	>e0d9		f8				                .byte <i*40
6307	>e0da		20				                .byte <i*40
6307	>e0db		48				                .byte <i*40
6307	>e0dc		70				                .byte <i*40
6307	>e0dd		98				                .byte <i*40
6307	>e0de		c0				                .byte <i*40
6308							                .next

6310							; Times 640 lookup table, high bytes
6311	.e0df						multiplyBy640TableHigh:
6312							                .for i=0,i<32,i+=1
6313	>e0df		00				                .byte >i*640
6313	>e0e0		02				                .byte >i*640
6313	>e0e1		05				                .byte >i*640
6313	>e0e2		07				                .byte >i*640
6313	>e0e3		0a				                .byte >i*640
6313	>e0e4		0c				                .byte >i*640
6313	>e0e5		0f				                .byte >i*640
6313	>e0e6		11				                .byte >i*640
6313	>e0e7		14				                .byte >i*640
6313	>e0e8		16				                .byte >i*640
6313	>e0e9		19				                .byte >i*640
6313	>e0ea		1b				                .byte >i*640
6313	>e0eb		1e				                .byte >i*640
6313	>e0ec		20				                .byte >i*640
6313	>e0ed		23				                .byte >i*640
6313	>e0ee		25				                .byte >i*640
6313	>e0ef		28				                .byte >i*640
6313	>e0f0		2a				                .byte >i*640
6313	>e0f1		2d				                .byte >i*640
6313	>e0f2		2f				                .byte >i*640
6313	>e0f3		32				                .byte >i*640
6313	>e0f4		34				                .byte >i*640
6313	>e0f5		37				                .byte >i*640
6313	>e0f6		39				                .byte >i*640
6313	>e0f7		3c				                .byte >i*640
6313	>e0f8		3e				                .byte >i*640
6313	>e0f9		41				                .byte >i*640
6313	>e0fa		43				                .byte >i*640
6313	>e0fb		46				                .byte >i*640
6313	>e0fc		48				                .byte >i*640
6313	>e0fd		4b				                .byte >i*640
6313	>e0fe		4d				                .byte >i*640
6314							                .next

6316							;-------------------------------------------------------------------------

6318	.e0ff						modeMaxRow:
6319	>e0ff		1f				                .byte 31                     ;MODE 0 = 32 rows
6320	>e100		1f				                .byte 31                     ;MODE 1 = 32 rows
6321	>e101		1f				                .byte 31                     ;MODE 2 = 32 rows
6322	>e102		18				                .byte 24                     ;MODE 3 = 25 rows
6323	>e103		1f				                .byte 31                     ;MODE 4 = 32 rows
6324	>e104		1f				                .byte 31                     ;MODE 5 = 32 rows
6325	>e105		18				                .byte 24                     ;MODE 6 = 25 rows
6326	>e106		18				                .byte 24                     ;MODE 7 = 25 rows

6328							;-------------------------------------------------------------------------

6330	.e107						modeMaxColumn:
6331	>e107		4f				                .byte 79                     ;MODE 0 = 80 columns
6332	>e108		27				                .byte 39                     ;MODE 1 = 40 columns
6333	>e109		13				                .byte 19                     ;MODE 2 = 20 columns
6334	>e10a		4f				                .byte 79                     ;MODE 3 = 80 columns
6335	>e10b		27				                .byte 39                     ;MODE 4 = 40 columns
6336	>e10c		13				                .byte 19                     ;MODE 5 = 20 columns
6337	>e10d		27				                .byte 39                     ;MODE 6 = 40 columns
6338	>e10e		27				                .byte 39                     ;MODE 7 = 40 columns

6340							;-------------------------------------------------------------------------

6342	.e10f						vcontrolForScreenMODE:
6343	>e10f		9c				                .byte VCONTROL.cursorX___|VCONTROL.crtc2MHz|VCONTROL.shift16MHz ; $9C - MODE 0
6344	>e110		d8				                .byte VCONTROL.cursorXX__|VCONTROL.crtc2MHz|VCONTROL.shift8MHz ; $d8 - MODE 1
6345	>e111		f4				                .byte VCONTROL.cursorXXXX|VCONTROL.crtc2MHz|VCONTROL.shift4MHz ; $F4 - MODE 2
6346	>e112		9c				                .byte VCONTROL.cursorX___|VCONTROL.crtc2MHz|VCONTROL.shift16MHz ; $9C - MODE 3
6347	>e113		88				                .byte VCONTROL.cursorX___|VCONTROL.crtc1MHz|VCONTROL.shift8MHz ; $88 - MODE 4
6348	>e114		c4				                .byte VCONTROL.cursorXX__|VCONTROL.crtc1MHz|VCONTROL.shift4MHz ; $C4 - MODE 5
6349	>e115		88				                .byte VCONTROL.cursorX___|VCONTROL.crtc1MHz|VCONTROL.shift8MHz ; $88 - MODE 6
6350	>e116		4b				                .byte VCONTROL.cursor_X__|VCONTROL.crtc1MHz|VCONTROL.shift8MHz|VCONTROL.isTeletext|VCONTROL.flash ; $4B - MODE 7

6352							;-------------------------------------------------------------------------

6354	.e117						bytesPerCharacterForMODE:
6355	>e117		08				                .byte 8                      ;MODE 0
6356	>e118		10				                .byte 16                     ;MODE 1
6357	>e119		20				                .byte 32                     ;MODE 2
6358	>e11a		08				                .byte 8                      ;MODE 3
6359	>e11b		08				                .byte 8                      ;MODE 4
6360	>e11c		10				                .byte 16                     ;MODE 5
6361	>e11d		08				                .byte 8                      ;MODE 6
6362	.e11e						LE120:
6363	>e11e		01				                .byte %00000001              ;MODE 7
6364	>e11f		ff				                .byte %11111111
6365	>e120		55				                .byte %01010101
6366	>e121		ff				                .byte %11111111
6367	>e122		77				                .byte %01110111
6368	>e123		33				                .byte %00110011
6369	>e124		11				                .byte %00010001

6371							;-------------------------------------------------------------------------

6373	.e125						distanceMasksTable:
6374	>e125		ff				                .byte %11111111
6375	>e126		7f				                .byte %01111111
6376	>e127		3f				                .byte %00111111
6377	>e128		1f				                .byte %00011111
6378	>e129		0f				                .byte %00001111
6379	>e12a		07				                .byte %00000111
6380	>e12b		03				                .byte %00000011
6381	>e12c		01				                .byte %00000001

6383							;-------------------------------------------------------------------------
6384							;
6385							; These graphics tables often overlap. I haven't always bothered
6386							; commenting the MODEs for the MODE-indexed tables, as even those
6387							; sometimes overlap.
6388							;
6389							;------------------------------------------------------------------------

6391							;-------------------------------------------------------------------------
6392							;
6393							; This is 3 tables in one. Use the numberOfLogicalColoursMinusOne VDU
6394							; variable to access it:
6395							; pixelMasks[(numberOfLogicalColoursMinusOne&7)-1+colour&numberOfLogicalColoursMinusOne=
6396							;
6397	.e12d						pixelMasks:
6398	>e12d		aa				                .byte %10101010
6399	>e12e		55				                .byte %01010101

6401	>e12f		88				                .byte %10001000
6402	>e130		44				                .byte %01000100
6403	>e131		22				                .byte %00100010
6404	>e132		11				                .byte %00010001

6406	>e133		80				                .byte %10000000
6407	>e134		40				                .byte %01000000
6408	>e135		20				                .byte %00100000
6409	>e136		10				                .byte %00010000
6410	>e137		08				                .byte %00001000
6411	>e138		04				                .byte %00000100
6412	>e139		02				                .byte %00000010
6413	.e13a						numberOfLogicalColoursMinusOneForMODE:
6414	>e13a		01				                .byte %00000001              ;MODE 0 (also part of pixelMasks)
6415	>e13b		03				                .byte 3                      ;MODE 1
6416	>e13c		0f				                .byte 15                     ;MODE 2
6417	>e13d		01				                .byte 1                      ;MODE 3
6418	>e13e		01				                .byte 1                      ;MODE 4
6419	>e13f		03				                .byte 3                      ;MODE 5
6420	>e140		01				                .byte 1                      ;MODE 6
6421							                ; MODE 7 value (0) is in next table

6423							;-------------------------------------------------------------------------
6424							;
6425							; Overwrite: ZGORA=$ff, ZGEOR=$ff
6426							; OR: ZGORA=value, ZGEOR=$00
6427							; AND: ZGORA=~value, ZGEOR=$00
6428							; EOR: ZGORA=$00, ZGEOR=value
6429							; Invert: ZGORA=$00, ZGEOR=$ff
6430							; Leave: ZGORA=$00, ZGEOR=$ff
6431							;
6432	.e141						zgeorORTable:
6433	>e141		00				                .byte $00
6434	.e142						zgoraORTable:
6435	>e142		ff				                .byte $FF
6436	.e143						zgoraEORTable:
6437	>e143		00				                .byte $00
6438	>e144		00				                .byte $00
6439	>e145		ff				                .byte $FF
6440	.e146						zgeorEORTable:
6441	>e146		ff				                .byte $FF
6442	>e147		ff				                .byte $FF
6443	>e148		ff				                .byte $FF
6444	>e149		00				                .byte $00

6446							;-------------------------------------------------------------------------
6447							;
6448							; Index using logical colour value to get a byte with that colour
6449							; value in every pixel.
6450							;
6451							; This is 3 tables in one. Use the numberOfLogicalColoursMinusOne VDU
6452							; variable to access it:
6453							; solidColoursTable[(numberOfLogicalColoursMinusOne&7)-1+colour&numberOfLogicalColoursMinusOne=
6454							;
6455	.e14a						solidColoursTable:

6457							                ; 1 bpp
6458	>e14a		00				                .byte %00000000
6459	>e14b		ff				                .byte %11111111

6461							                ; 2 bpp
6462	>e14c		00				                .byte %00000000
6463	>e14d		0f				                .byte %00001111
6464	>e14e		f0				                .byte %11110000
6465	>e14f		ff				                .byte %11111111

6467							                ; 4 bpp
6468	>e150		00				                .byte %00000000
6469	>e151		03				                .byte %00000011
6470	>e152		0c				                .byte %00001100
6471	>e153		0f				                .byte %00001111
6472	>e154		30				                .byte %00110000
6473	>e155		33				                .byte %00110011
6474	>e156		3c				                .byte %00111100
6475	>e157		3f				                .byte %00111111
6476	>e158		c0				                .byte %11000000
6477	>e159		c3				                .byte %11000011
6478	>e15a		cc				                .byte %11001100
6479	>e15b		cf				                .byte %11001111
6480	>e15c		f0				                .byte %11110000
6481	>e15d		f3				                .byte %11110011
6482	>e15e		fc				                .byte %11111100
6483	>e15f		ff				                .byte %11111111

6485	.e160						pixelsPerByteMinusOneForMODE:
6486	>e160		07				                .byte 7
6487	>e161		03				                .byte 3
6488	>e162		01				                .byte 1
6489	.e163						LE165:
6490	>e163		00				                .byte 0
6491	>e164		07				                .byte 7
6492	>e165		03				                .byte 3
6493	.e166						screenMODEGroupForMODE:
6494	>e166		00				                .byte 0
6495	>e167		00				                .byte 0
6496	.e168		00		brk #		                brk
6497	.e169		01 02		ora ($02,x)	                ora ($02,x)
6498	>e16b		02				                .byte $02
6499	>e16c		03				                .byte $03
6500							;TSB &0D          :\ E16F= 04 0D       ..
6501	>e16d		04				                .byte $04

6503							;-------------------------------------------------------------------------
6504							;
6505							; Hardware scrolling wraparound size settings for screen mode group.
6506							;
6507							; The values for group 4 (1 KB) are bogus - the Mode 7 addressing
6508							; wraparound is handled differently.
6509							;
6510	.e16e						latchBit5ForScreenMODEGroup:
6511	>e16e		0d				                .byte 5|8                    ;20 KB
6512	>e16f		05				                .byte 5|0                    ;16 KB
6513	>e170		0d				                .byte 5|8                    ;10 KB
6514	>e171		05				                .byte 5|0                    ; 8 KB
6515	.e172						latchBit4ForScreenMODEGroup:
6516	>e172		04				                .byte 4|0                    ;20 KB (also benign value for 1 KB)
6517	>e173		04				                .byte 4|0                    ;16 KB
6518	>e174		0c				                .byte 4|8                    ;10 KB
6519	>e175		0c				                .byte 4|8                    ; 8 KB
6520	>e176		04				                .byte 4|0                    ;(benign value for 1 KB)

6522							;-------------------------------------------------------------------------

6524	.e177						screenSizeHighByteForScreenMODEGroup:
6525	>e177		50				                .byte $50
6526	>e178		40				                .byte $40
6527	>e179		28				                .byte $28
6528	>e17a		20				                .byte $20
6529	>e17b		04				                .byte $04
6530	.e17c						startScreenAddressHighByteForScreenMODEGroup:
6531	>e17c		30				                .byte $30
6532	>e17d		40				                .byte $40
6533	>e17e		58				                .byte $58
6534	>e17f		60				                .byte $60
6535	>e180		7c				                .byte $7c
6536	.e181						crtcRegisterLastIndexForScreenMODEGroup:
6537	>e181		0b				                .byte (crtcRegisterValues20KB-crtcRegisterValues)+$0B
6538	>e182		17				                .byte (crtcRegisterValues16KB-crtcRegisterValues)+$0B
6539	>e183		23				                .byte (crtcRegisterValues10KB-crtcRegisterValues)+$0B
6540	>e184		2f				                .byte (crtcRegisterValues8KB-crtcRegisterValues)+$0B
6541	>e185		3b				                .byte (crtcRegisterValues1KB-crtcRegisterValues)+$0B
6542	.e186						crtcRegisterValues:
6543	.e186						crtcRegisterValues20KB:                   ;MODEs 0/1/2
6544	>e186		7f				                .byte $7F            ;R0 - Horizontal Total
6545	>e187		50				                .byte $50            ;R1 - Horizontal Displayed
6546	>e188		62				                .byte $62            ;R2 - Horizontal Sync
6547	>e189		28				                .byte $28            ;R3 - Sync Width (%vvvvhhhh)
6548	>e18a		26				                .byte $26            ;R4 - Vertical Total
6549	>e18b		00				                .byte $00            ;R5 - Vertical Total Adjust
6550	>e18c		20				                .byte $20            ;R6 - Vertical Displayed
6551	>e18d		22				                .byte $22            ;R7 - Vertical Sync Position
6552	>e18e		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6553	>e18f		07				                .byte $07               ;R9 - Scan lines per character
6554	>e190		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6555	>e191		08				                .byte 8                    ;R11 - Cursor End
6556	.e192						crtcRegisterValues16KB:                    ;MODE 3
6557	>e192		7f				                .byte $7F                 ;R0 - Horizontal Total
6558	>e193		50				                .byte $50                 ;R1 - Horizontal Displayed
6559	>e194		62				                .byte $62                 ;R2 - Horizontal Sync
6560	>e195		28				                .byte $28                 ;R3 - Sync Width (%vvvvhhhh)
6561	>e196		1e				                .byte $1e                 ;R4 - Vertical Total
6562	>e197		02				                .byte $02                 ;R5 - Vertical Total Adjust
6563	>e198		19				                .byte $19                 ;R6 - Vertical Displayed
6564	>e199		1b				                .byte $1B                 ;R7 - Vertical Sync Position
6565	>e19a		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6566	>e19b		09				                .byte $09               ;R9 - Scan lines per character
6567	>e19c		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6568	>e19d		09				                .byte 9                      ;R11 - Cursor End
6569	.e19e						crtcRegisterValues10KB:                      ;MODEs 4/5
6570	>e19e		3f				                .byte $3f                 ;R0 - Horizontal Total
6571	>e19f		28				                .byte $28                 ;R1 - Horizontal Displayed
6572	>e1a0		31				                .byte $31                 ;R2 - Horizontal Sync
6573	>e1a1		24				                .byte $24                 ;R3 - Sync Width (%vvvvhhhh)
6574	>e1a2		26				                .byte $26                 ;R4 - Vertical Total
6575	>e1a3		00				                .byte $00                 ;R5 - Vertical Total Adjust
6576	>e1a4		20				                .byte $20                 ;R6 - Vertical Displayed
6577	>e1a5		22				                .byte $22                 ;R7 - Vertical Sync Position
6578	>e1a6		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6579	>e1a7		07				                .byte $07               ;R9 - Scan lines per character
6580	>e1a8		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6581	>e1a9		08				                .byte 8                      ;R11 - Cursor End
6582	.e1aa						crtcRegisterValues8KB:                       ;MODE 6
6583	>e1aa		3f				                .byte $3F                 ;R0 - Horizontal Total
6584	>e1ab		28				                .byte $28                 ;R1 - Horizontal Displayed
6585	>e1ac		31				                .byte $31                 ;R2 - Horizontal Sync
6586	>e1ad		24				                .byte $24                 ;R3 - Sync Width (%vvvvhhhh)
6587	>e1ae		1e				                .byte $1e                 ;R4 - Vertical Total
6588	>e1af		02				                .byte $02                 ;R5 - Vertical Total Adjust
6589	>e1b0		19				                .byte $19                 ;R6 - Vertical Displayed
6590	>e1b1		1b				                .byte $1B                 ;R7 - Vertical Sync Position
6591	>e1b2		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6592	>e1b3		09				                .byte $09               ;R9 - Scan lines per character
6593	>e1b4		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6594	>e1b5		09				                .byte 9                      ;R11 - Cursor End
6595	.e1b6						crtcRegisterValues1KB:                       ;MODE 7
6596	>e1b6		3f				                .byte $3f                 ;R0 - Horizontal Total
6597	>e1b7		28				                .byte $28                 ;R1 - Horizontal Displayed
6598	>e1b8		33				                .byte $33                 ;R2 - Horizontal Sync
6599	>e1b9		24				                .byte $24                 ;R3 - Sync Width (%vvvvhhhh)
6600	>e1ba		1e				                .byte $1e                 ;R4 - Vertical Total
6601	>e1bb		02				                .byte $02                 ;R5 - Vertical Total Adjust
6602	>e1bc		19				                .byte $19                 ;R6 - Vertical Displayed
6603	>e1bd		1b				                .byte $1b                 ;R7 - Vertical Sync Position
6604	>e1be		93				                .byte CRTC.R8.cursorDelay2|CRTC.R8.displayDelay1|CRTC.R8.interlaceSyncAndVideo ;R8 - Interlace/Delay
6605	>e1bf		12				                .byte $12               ;R9 - Scan lines per character
6606	>e1c0		72				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|18 ;R10 - Cursor blink/start
6607	>e1c1		13				                .byte 19                     ;R11 - Cursor End

6609							;-------------------------------------------------------------------------
6610							;
6611							; Default ECF patterns [MasRef E.3-16]
6612							;
6613							; Only half the pattern is stored. Each pattern repeats every 4
6614							; scanlines.
6615							;
6616	.e1c2						defaultECFPatterns:
6617							                ; MODE 4
6618	>e1c2		aa 00 aa 00			                .byte $aa,$00,$aa,$00        ;1 - Dark grey
6619	>e1c6		aa 55 aa 55			                .byte $aa,$55,$aa,$55        ;2 - Grey
6620	>e1ca		ff 55 ff 55			                .byte $ff,$55,$ff,$55        ;3 - Light grey
6621	>e1ce		11 22 44 88			                .byte $11,$22,$44,$88        ;4 - Hatching

6623							                ; MODE 1/5
6624	>e1d2		a5 0f a5 0f			                .byte $a5,$0f,$a5,$0f        ;1 - Red-orange
6625	>e1d6		a5 5a a5 5a			                .byte $a5,$5a,$a5,$5a        ;2 - Orange
6626	>e1da		f0 5a f0 5a			                .byte $f0,$5a,$f0,$5a        ;3 - Yellow-orange
6627	>e1de		f5 fa f5 fa			                .byte $f5,$fa,$f5,$fa        ;4 - Cream

6629							                ; MODE 2
6630	>e1e2		0b 07 0b 07			                .byte $0b,$07,$0b,$07        ;1 - Orange
6631	>e1e6		23 13 23 13			                .byte $23,$13,$23,$13        ;2 - Pink
6632	>e1ea		0e 0d 0e 0d			                .byte $0e,$0d,$0e,$0d        ;3 - Yellow-green
6633	>e1ee		1f 2f 1f 2f			                .byte $1f,$2f,$1f,$2f        ;4 - Cream

6635							                ; MODE 0
6636	>e1f2		cc 00 cc 00			                .byte $cc,$00,$cc,$00        ;0 - Dark grey
6637	>e1f6		cc 33 cc 33			                .byte $cc,$33,$cc,$33        ;1 - Grey
6638	>e1fa		ff 33 ff 33			                .byte $ff,$33,$ff,$33        ;2 - Light grey
6639	>e1fe		03 0c 30 c0			                .byte $03,$0c,$30,$c0        ;4 - Hatching

6641	.e202						LE204:
6642	>e202		01				                .byte $01                    ;---
6643	>e203		01				                .byte $01                    ;--h
6644	>e204		03				                .byte $03                    ;-v-
6645	>e205		03				                .byte $03                    ;-vh
6646	>e206		02				                .byte $02                    ;x--
6647	>e207		00				                .byte $00                    ;x-h
6648	>e208		02				                .byte $02                    ;xv-
6649	>e209		00				                .byte $00                    ;xvh

6651	.e20a						scrollRoutinesTable:
6652	>e20a		5d c9				                .word LC95F
6653	>e20c		69 c9				                .word LC96B
6654	>e20e		5d c9				                .word LC95F
6655	>e210		69 c9				                .word LC96B
6656	>e212		9b c9				                .word LC99D
6657	>e214		9b c9				                .word LC99D
6658	>e216		a2 c9				                .word LC9A4
6659	>e218		a2 c9				                .word LC9A4
6660	>e21a		c1 c9				                .word LC9C3
6661	>e21c		2b ca				                .word LCA2D
6662	>e21e		c1 c9				                .word LC9C3
6663	>e220		2b ca				                .word LCA2D
6664	>e222		ef ca				                .word LCAF1
6665	>e224		ef ca				                .word LCAF1
6666	>e226		f8 ca				                .word LCAFA
6667	>e228		f8 ca				                .word LCAFA

6669							;-------------------------------------------------------------------------
6670							;
6671							; Get address of soft character definition.
6672							;
6673							; entry:
6674							;
6675							; A = character (32-255)
6676							;
6677							; exit:
6678							;
6679							; (ZTEMPC) = address
6680							;
6681	.e22a						getSoftCharacterDefinitionAddress:
6682	.e22a		0a		asl a		                asl a                        ;a bcdefgh0
6683	.e22b		2a		rol a		                rol a                        ;b cdefgh0a
6684	.e22c		2a		rol a		                rol a                        ;c defgh0ab
6685	.e22d		a8		tay		                tay
6686	.e22e		29 03		and #$03	                and #$03                     ;c 000000ab
6687	.e230		2a		rol a		                rol a                        ;0 00000abc
6688	.e231		69 88		adc #$88	                adc #(>andy.softCharacterDefinitions)-1
6689	.e233		85 df		sta $df		                sta ZTEMPC+1
6690	.e235		98		tya		                tya                          ;0 defgh0ab
6691	.e236		29 f8		and #$f8	                and #$F8                     ;0 defgh000
6692	.e238		85 de		sta $de		                sta ZTEMPC+0
6693	.e23a		60		rts		                rts                          ;

6695							;-------------------------------------------------------------------------
6696							;
6697							; OSBYTE 165 (&A5) Read output cursor position [MasRef D.2-50]
6698							;
6699	.e23b						osbyteA5:
6700	.e23b		20 9a f1	jsr $f19a	                jsr withMOSROM
6701	.e23e		24 d0		bit $d0		                bit STATE
6702	.e240		50 0e		bvc $e250	                bvc getTextCursorPositionWithColumn81                    ;taken if cursor editing
6703	.e242		20 ac e2	jsr $e2ac	                jsr exchangeEditCursorPositionAndTextCursorPosition
6704	.e245		20 50 e2	jsr $e250	                jsr getTextCursorPositionWithColumn81
6705	.e248		da		phx		                phx
6706	.e249		5a		phy		                phy
6707	.e24a		20 ac e2	jsr $e2ac	                jsr exchangeEditCursorPositionAndTextCursorPosition
6708	.e24d		7a		ply		                ply
6709	.e24e		fa		plx		                plx
6710	.e24f		60		rts		                rts

6712							;-------------------------------------------------------------------------
6713							;
6714							; Get text cursor position, taking the column 81 flag into account and
6715							; reporting the X coordinate as N+1 in that case.
6716							;
6717	.e250						getTextCursorPositionWithColumn81:
6718	.e250		20 6b e2	jsr $e26b	                jsr getTextCursorPosition
6719	.e253		2c 6c 03	bit $036c	                bit vduv.column81
6720	.e256		10 01		bpl $e259	                bpl +                       ;taken if not at column 81
6721	.e258		e8		inx		                inx                         ;X=81
6722	.e259						+
6723	.e259		60		rts		                rts

6725							;-------------------------------------------------------------------------

6727	.e25a						LE25C:
6728	.e25a		38		sec		                sec
6729	.e25b		ad 0a 03	lda $030a	                lda vduv.textWindowRight
6730	.e25e		ed 08 03	sbc $0308	                sbc vduv.textWindowLeft
6731	.e261		48		pha		                pha
6732	.e262		a9 00		lda #$00	                lda #$00
6733	.e264		a8		tay		                tay
6734	.e265		80 10		bra $e277	                bra LE279

6736							;-------------------------------------------------------------------------
6737							;
6738							; OSBYTE 134 (&86) Read text cursor position [MasRef D.2-41]
6739							;
6740	.e267						osbyte86:
6741	.e267		24 d0		bit $d0		                bit STATE
6742	.e269		50 d0		bvc $e23b	                bvc osbyteA5       ;taken if not cursor editing
6743	.e26b						getTextCursorPosition:
6744	.e26b		a9 02		lda #$02	                lda #VDUVariables.cursorFlags.invertHorizontal
6745	.e26d		a0 10		ldy #$10	                ldy #VDUVariables.textCursorXPosition-VDUVariables.textWindow
6746	.e26f		a2 00		ldx #$00	                ldx #VDUVariables.textWindowLeft-VDUVariables.textWindow
6747	.e271		20 88 e2	jsr $e288	                jsr getTextWindowRelativePosition
6748	.e274		48		pha		                pha                          ;save X position
6749	.e275		a9 04		lda #$04	                lda #VDUVariables.cursorFlags.invertVertical
6750	.e277						LE279:
6751	.e277		c8		iny		                iny               ;i.e., offset of textCursorYPosition
6752	.e278		a2 03		ldx #$03	                ldx #VDUVariables.textWindowTop-VDUVariables.textWindow
6753	.e27a		20 88 e2	jsr $e288	                jsr getTextWindowRelativePosition
6754	.e27d		aa		tax		                tax                          ;X = Y position
6755	.e27e		a8		tay		                tay                          ;Y = Y position
6756	.e27f		a9 08		lda #$08	                lda #vduv.cursorFlags.swapAxes
6757	.e281		2c 66 03	bit $0366	                bit vduv.cursorFlags
6758	.e284		f0 24		beq $e2aa	                beq plx_rts ;taken if axes unswapped - so X = X position, Y = Y position
6759	.e286		7a		ply		                ply                          ;Y = Y position, X = X position
6760	.e287		60		rts		                rts

6762							;-------------------------------------------------------------------------
6763							;
6764							; Get text window-relative cursor position, taking into account cursor
6765							; flags.
6766							;
6767							; entry:
6768							;
6769							; A = cursorFlags bit for axis of interest - invertHorizontal or invertVertical
6770							;
6771							; X = offset in VDU variables of text window minimum for axis of interest
6772							;
6773							; Y = offset in VDU variables of cursor position for axis of interest
6774							;
6775							; exit:
6776							;
6777							; A = text window-relative coordinate
6778							;
6779	.e288						getTextWindowRelativePosition:
6780	.e288		38		sec		                sec                     ;C=1 ready for the subtraction
6781	.e289		2c 66 03	bit $0366	                bit vduv.cursorFlags ;test cursor flags inversion bit of interest
6782	.e28c		f0 0b		beq $e299	                beq axisNotInverted
6783	.e28e						axisInverted:
6784	.e28e		8a		txa		                txa
6785	.e28f		49 02		eor #$02	                eor #$02                     ;swap min and max
6786	.e291		aa		tax		                tax
6787	.e292		bd 08 03	lda $0308,x	                lda vduv.textWindow,x
6788	.e295		f9 08 03	sbc $0308,y	                sbc vduv.textWindow,y
6789	.e298		60		rts		                rts

6791	.e299						axisNotInverted:
6792	.e299		b9 08 03	lda $0308,y	                lda vduv.textWindow,y
6793	.e29c		fd 08 03	sbc $0308,x	                sbc vduv.textWindow,x
6794	.e29f		60		rts		                rts

6796							;-------------------------------------------------------------------------
6797							;
6798							; Get default bounds for current mode.
6799							;
6800							; exit:
6801							;
6802							; X = max column (19, 39 or 79)
6803							;
6804							; Y = max row (24 or 31)
6805							;
6806							; preserves: A, C
6807							;
6808	.e2a0						getDefaultBoundsForCurrentScreenMODE:
6809	.e2a0		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
6810	.e2a3		bc 07 e1	ldy $e107,x	                ldy modeMaxColumn,x          ;Y = max column
6811	.e2a6		5a		phy		                phy                          ;save max column
6812	.e2a7		bc ff e0	ldy $e0ff,x	                ldy modeMaxRow,x             ;Y = max row
6813	.e2aa						plx_rts:
6814	.e2aa		fa		plx		                plx                          ;X = max column
6815	.e2ab		60		rts		                rts

6817							;-------------------------------------------------------------------------
6818							;
6819							; Swap edit cursor position and text cursor position.
6820							;
6821	.e2ac						exchangeEditCursorPositionAndTextCursorPosition:
6822	.e2ac		a2 18		ldx #$18	                ldx #VDUVariables.textCursorXPosition
6823	.e2ae		a0 64		ldy #$64	                ldy #VDUVariables.editCursorXPosition

6825							;-------------------------------------------------------------------------
6826							;
6827							; Swap 2 bytes in the VDU variables.
6828							;
6829							; entry:
6830							;
6831							; X = offset of one set of 2 bytes
6832							;
6833							; Y = offset of the other set of 2 bytes
6834							;
6835	.e2b0						exchangeTwoVDUBytes:
6836	.e2b0		a9 02		lda #$02	                lda #$02
6837	.e2b2		80 06		bra $e2ba	                bra exchangeVDUVariables

6839							;-------------------------------------------------------------------------
6840							;
6841							; Swap graphics cursor and old graphics cursor.
6842							;
6843	.e2b4						LE2B6:
6844	.e2b4		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX
6845	.e2b6						LE2B8:
6846	.e2b6		a0 14		ldy #$14	                ldy #VDUVariables.oldGraphicsCursorPixelsX

6848							;-------------------------------------------------------------------------
6849							;
6850							; Swap 4 bytes in the VDU variables.
6851							;
6852							; entry:
6853							;
6854							; X = offset of one set of 4 bytes
6855							;
6856							; Y = offset of the other set of 4 bytes
6857							;
6858	.e2b8						exchangeFourVDUBytes:
6859	.e2b8		a9 04		lda #$04	                lda #$04

6861							;-------------------------------------------------------------------------
6862							;
6863							; Swap bytes in the VDU variables.
6864							;
6865							; entry:
6866							;
6867							; A = number of bytes to swap
6868							;
6869							; X = offset of one set of bytes
6870							;
6871							; Y = offset of the other set of bytes
6872							;
6873	.e2ba						exchangeVDUVariables:
6874	.e2ba		48		pha		                pha                          ;save count remaining
6875	.e2bb		bd 00 03	lda $0300,x	                lda vduv,x
6876	.e2be		48		pha		                pha
6877	.e2bf		b9 00 03	lda $0300,y	                lda vduv,y
6878	.e2c2		9d 00 03	sta $0300,x	                sta vduv,x
6879	.e2c5		68		pla		                pla
6880	.e2c6		99 00 03	sta $0300,y	                sta vduv,y
6881	.e2c9		e8		inx		                inx
6882	.e2ca		c8		iny		                iny
6883	.e2cb		68		pla		                pla
6884	.e2cc		3a		dec a		                dec a
6885	.e2cd		d0 eb		bne $e2ba	                bne exchangeVDUVariables
6886	.e2cf		60		rts		                rts

6888							;-------------------------------------------------------------------------
6889							;
6890							; Test current VDU4/VDU5 status.
6891							;
6892							; exit:
6893							;
6894							; Z=0 if VDU5 mode
6895	.e2d0						testVDU5State:
6896	.e2d0		a5 d0		lda $d0		                lda STATE
6897	.e2d2		29 20		and #$20	                and #STATE.isVDU5
6898	.e2d4		60		rts		                rts

6900							;-------------------------------------------------------------------------

6902							                .if version>=350
6903	.e2d5						LE2E7:
6904	.e2d5		20 9a f1	jsr $f19a	                jsr withMOSROM
6905	.e2d8		4c e2 e7	jmp $e7e2	                jmp callPrinterDriverWithPrinterBuffer
6906							                .endif

6908							;-------------------------------------------------------------------------

6910							                .if version>=350
6911	.e2db						LE2ED:
6912	.e2db		20 9a f1	jsr $f19a	                jsr withMOSROM
6913	.e2de		4c ae e7	jmp $e7ae	                jmp LE8B9
6914							                .endif

6916							;-------------------------------------------------------------------------

6918							                .if version>=350
6919	.e2e1						LE2F3:
6920	.e2e1		20 9a f1	jsr $f19a	                jsr withMOSROM
6921	.e2e4		6c 26 02	jmp ($0226)	                jmp (VDUV)
6922							                .endif

6924							;-------------------------------------------------------------------------

6926							; Default vector table
6927							; ====================
6928	.e2e7						defaultVectorTable: .block
6929	>e2e7		bd fa				                .word badCommandError        ; USERV=$200
6930	>e2e9		72 e5				                .word defaultBRKHandler      ; BRKV=$202
6931	>e2eb		e1 e5				                .word irq1EntryPoint         ; IRQ1V=$204
6932	>e2ed		ed e5				                .word irq2EntryPoint         ; IRQ2V=$206
6933	>e2ef		18 e7				                .word oscliEntryPoint        ; CLIV=$208
6934	>e2f1		b9 ec				                .word osbyteEntryPoint       ; BYTEV=$20a
6935	>e2f3		2d ed				                .word oswordEntryPoint       ; WORDV=$20c
6936	>e2f5		38 e7				                .word oswrchEntryPoint       ; WRCHV=$20e
6937	>e2f7		d5 e6				                .word osrdchEntryPoint       ; RDCHV=$210
6938	.e2f9						fsVectors: .block
6939	>e2f9		1b ff				                .word E_FILEV                ; FILEV=$212
6940	>e2fb		1e ff				                .word E_ARGSV                ; ARGSV=$214
6941	>e2fd		21 ff				                .word E_BGETV                ; BGETV=$216
6942	>e2ff		24 ff				                .word E_BPUTV                ; BPUTV=$218
6943	>e301		27 ff				                .word E_GBPBV                ; GBPBV=$21a
6944	>e303		2a ff				                .word E_FINDV                ; FINDV=$21c
6945	>e305		2d ff				                .word E_FSCV                 ; FSCV=$21e
6946	.e307						end:
6947							                .bend
6948	>e307		aa ff				                .word rtsFFAA                ; EVENTV=$220
6949	>e309		aa ff				                .word rtsFFAA                ; UPTV=$222
6950	>e30b		aa ff				                .word rtsFFAA                ; NETV=$224
6951	>e30d		aa ff				                .word rtsFFAA                ; VDUV=$226
6952	>e30f		3b f5				                .word keyEntryPoint          ; KEYV=$228
6953	>e311		eb e8				                .word insEntryPoint          ; INSV=$22a
6954	>e313		a0 e8				                .word remEntryPoint          ; REMV=$22c
6955	>e315		23 e8				                .word cnpEntryPoint          ; CNPV=$22e
6956	>e317		aa ff				                .word rtsFFAA                ; IND1V=$230
6957	>e319		aa ff				                .word rtsFFAA                ; IND2V=$232
6958	>e31b		aa ff				                .word rtsFFAA                ; IND3V=$234
6959	.e31d						end:
6960							                .bend

6962							                ; valueFF is a (presumably arbitrary) byte with the
6963							                ; value 255, that's BIT'd in a few places to set the V
6964							                ; flag.
6965	.e31d						defaultMOSVariables:
6966	>e31d		90 01				                .word mosVariables-166       ;mosVariablesAddress
6967	>e31f		9f 0d				                .word extendedVectorSpace    ;extendedVectorSpaceAddress
6968	>e321		a1 02				                .word romInformationTable  ;romInformationTableAddress
6969	>e323		71 f6				                .word keyTranslationTable-16 ;keyboardTranslationTableAddress
6970	>e325		00 03				                .word vduv                   ;vduVariablesAddress
6971	>e327		00				                .byte $00                    ;cfsTimeoutCounter
6972	>e328		00				                .byte $00                    ;inputSource
6973	>e329		ff				                .byte $FF                    ;keyboardSemaphore
6974	>e32a		00				                .byte $00                    ;romPollingSemaphore
6975	>e32b		00				                .byte $00                    ;oshwm
6976	>e32c		01				                .byte $01                    ;rs423InputInterpretationStatus
6977	>e32d		00				                .byte $00                    ;noignoreState
6978	>e32e		00				                .byte $00                    ;cfsRFSFSSwitch
6979	>e32f		00				                .byte $00                    ;vcontrolRegister
6980	>e330		00				                .byte $00                    ;vpaletteRegister
6981	>e331		00				                .byte $00                    ;romActiveAtLastBRK
6982	>e332		ff				                .byte $FF                    ;basicROMNumber
6983							                .if version<500
6984	>e333		04				                .byte $04                    ;currentADCChannel
6985	>e334		04				                .byte $04                    ;maximumADCChannel
6989							                .endif
6990	>e335		00				                .byte $00                    ;adcConversionType
6991	>e336		ff				                .byte $FF                    ;rs423Busy
6992							                .if version==400
6993	>e337		00				                .byte $00                    ;aciaControlRegister
6996							                .endif
6997	>e338		19				                .byte $19                    ;flashCounter
6998	>e339		19				                .byte $19                    ;firstFlashColourDuration
6999	>e33a		19				                .byte $19                    ;secondFlashColourDuration
7000	>e33b		32				                .byte $32                    ;keyboardAutoRepeatDelay
7001	>e33c		08				                .byte $08                    ;keyboardAutoRepeatRate
7002	>e33d		00				                .byte $00                    ;execFileHandle
7003	>e33e		00				                .byte $00                    ;spoolFileHandle
7004	>e33f		00				                .byte $00                    ;breakAndESCAPEEffect
7005	>e340		00				                .byte $00                    ;keyboardStatus
7006	>e341		20				                .byte $20                    ;keyboardStatusByte
7007	>e342		09				                .byte $09                    ;rs423InputBufferMinimumSpace
7008	>e343		00				                .byte $00                    ;rs423Ignore
7009	>e344		00				                .byte $00                    ;rs423Destination
7010	>e345		00				                .byte $00                    ;econetInterceptionStatus
7011	>e346		00				                .byte $00                    ;econetInputInterpretationStatus
7012	>e347		00				                .byte $00                    ;econetOutputInterpretationStatus
7013	>e348		00				                .byte $00                    ;speechSystemByte1
7014	>e349		00				                .byte $00                    ;soundSuppressionStatus
7015	>e34a		03				                .byte $03                    ;bellChannel
7016	>e34b		90				                .byte $90                    ;bellSound
7017	>e34c		64				                .byte $64                    ;bellFrequency
7018	>e34d		06				                .byte $06                    ;bellDuration
7019	>e34e		81				                .byte $81                    ;startupMessageSuppressionStatus
7020	>e34f		00				                .byte $00                    ;softKeyStringLength
7021	>e350		00				                .byte $00                    ;pagedModeCounter
7022	>e351		00				                .byte $00                    ;vduQueueNegativeLength
7023	>e352		09				                .byte $09                    ;tabKeyCode
7024	>e353		1b				                .byte $1B                    ;escapeCharacter
7025	>e354		01				                .byte $01                    ;input192To207Interpretation
7026	>e355		d0				                .byte $D0                    ;input208To223Interpretation
7027	>e356		e0				                .byte $E0                    ;input224To239Interpretation
7028	>e357		f0				                .byte $F0                    ;input240To255Interpretation
7029	>e358		01				                .byte $01                    ;softKeyInterpretation
7030	>e359		80				                .byte $80                    ;shiftSoftKeyInterpretation
7031	>e35a		90				                .byte $90                    ;ctrlSoftKeyInterpretation
7032	>e35b		00				                .byte $00                    ;shiftCtrlSoftKeyInterpretation
7033	>e35c		00				                .byte $00                    ;escapeKeyStatus
7034	>e35d		00				                .byte $00                    ;escapeEffects
7035	>e35e		ff				valueFF:        .byte $FF                    ;userVIAInterruptMask
7036	>e35f		ff				                .byte $FF                    ;rs423InterruptMask
7037	>e360		ff				                .byte $FF                    ;systemVIAInterruptMask
7038	>e361		00				                .byte $00                    ;tubePresence
7039	>e362		00				                .byte $00                    ;speechSystemByte2
7040	>e363		00				                .byte $00                    ;characterDestinationStatus
7041	>e364		00				                .byte editKeysMode.editKeys  ;editKeysMode
7042	>e365		30				                .byte $30                    ;numericKeypadInterpretation
7043	>e366		01				                .byte $01                    ;shadowRAMState
7044	>e367		00				                .byte $00                    ;countryFlag
7045	>e368		00				                .byte $00                    ;userFlag
7046							                .if version==400
7047	>e369		00				                .byte $00                    ;serialULARegister
7050							                .endif
7051	>e36a		05				                .byte initialTimerSwitchState ;timerSwitchState
7052	>e36b		ff				                .byte $FF                    ;softKeyConsistencyFlag
7053							                .if version==400
7054	>e36c		00				                .byte $00                    ;printerDriverType
7057							                .endif
7058	>e36d		0a				                .byte $0a                    ;printerIgnoreChar
7059	>e36e		00				                .byte $00                    ;breakVectorByte0
7060	>e36f		00				                .byte $00                    ;breakVectorByte1
7061	>e370		00				                .byte $00                    ;breakVectorByte2
7062	>e371		00				                .byte $00                    ;vduDriverMemory
7063	>e372		00				                .byte $00                    ;displayMemory
7064	>e373		ff				                .byte $FF                    ;currentLanguageROM

7066							;-------------------------------------------------------------------------
7067							;
7068							; STARTUP
7069							; =======
7070							;
7071	.e374						resetEntryPoint:                ;e364
7072	.e374		a9 40		lda #$40	                lda #$40        ; $40 = RTI
7073	.e376		8d 00 0d	sta $0d00	                sta nmiEntryPoint ; make NMI routine a no-op
7074	.e379		78		sei		                sei
7075	.e37a		a9 53		lda #$53	                lda #$53                 ; ???
7076	.e37c		8d 8e fe	sta $fe8e	                sta LFE8E                ; ???
7077							                .if version==350
7083							                .endif
7084							                .if version==350
7087							                .else
7088	.e37f		20 9d e5	jsr $e59d	                jsr selectTerminalROM ; Page in ROM 15 and continue
7089	.e382		4c 1b 80	jmp $801b	                jmp terminal.reset
7090							                .endif

7092							;-------------------------------------------------------------------------

7094							                .if version==350
7101							                .endif

7103							;-------------------------------------------------------------------------
7104							;
7105							; Check if a coprocessor is attached to the Tube
7106							;
7107							; exit:
7108							;
7109							; C=0 = no Tube
7110							;
7111							; C=1 = Tube
7112							;
7113							                .if version!=350
7114	.e385						LE375:
7115	.e385		a2 01		ldx #$01	                ldx #$01
7116	.e387		8e e0 fe	stx $fee0	                stx tube.status1
7117	.e38a		ad e0 fe	lda $fee0	                lda tube.status1
7118	.e38d		49 01		eor #$01	                eor #$01
7119	.e38f		a2 81		ldx #$81	                ldx #$81
7120	.e391		8e e0 fe	stx $fee0	                stx tube.status1
7121	.e394		2d e0 fe	and $fee0	                and tube.status1       ; Cy=0 if no Tube, Cy=1 if Tube
7122	.e397		6a		ror a		                ror a
7123	.e398		60		rts		                rts
7124							                .endif

7126							;-------------------------------------------------------------------------
7127							;
7128							;
7129							;
7130							                .if version==350
7133							                .endif

7135	.e399						LE389:
7136	.e399		5a		phy		                phy
7137	.e39a		da		phx		                phx
7138							                .if version==350
7141							                .elsif version<500
7142	.e39b		20 63 e8	jsr $e863	                jsr getROMInsertedFlagRTCAddressAndMask
7143	.e39e		85 fc		sta $fc		                sta $FC                      ;save mask
7144	.e3a0		20 9d e5	jsr $e59d	                jsr selectTerminalROM
7145	.e3a3		20 4b 9b	jsr $9b4b	                jsr terminal.readRTCByte     ;read inserted flag
7146	.e3a6		98		tya		                tya                          ;A = byte read
7147	.e3a7		25 fc		and $fc		                and $FC                      ;do mask
7151							                .endif
7152	.e3a9		c9 01		cmp #$01	                cmp #$01                     ;C set if ROM is inserted
7153	.e3ab		fa		plx		                plx
7154	.e3ac		7a		ply		                ply
7155	.e3ad		4c 8e e5	jmp $e58e	                jmp selectROMX

7157							;-------------------------------------------------------------------------
7158							;
7159							; Scan ROMs and fill in the rom information table.
7160							;
7161							; entry:
7162							;
7163							; X = first ROM to scan
7164							;
7165							                .if version!=350
7166	.e3b0						scanROMs: .proc
7167							                .include "scan_roms.s65"

:14	;******  Processing file: src/scan_roms.s65

1	.e3b0		8a		txa		                txa               ;A = ROM of interest
2	.e3b1		a8		tay		                tay               ;Y = ROM of interest
3							                .if version<500&&version!=350
4	.e3b2		20 99 e3	jsr $e399	                jsr LE389         ;select ROM and check insertion flag
5	.e3b5		90 34		bcc $e3eb	                bcc currentROMInvalid ;taken if ROM not actually inserted
6							                .endif
7	.e3b7		20 07 e4	jsr $e407	                jsr isROMValid
8	.e3ba		90 2f		bcc $e3eb	                bcc currentROMInvalid        ;taken if ROM invalid
9	.e3bc		a6 f4		ldx $f4		                ldx $F4                      ;start from current ROM
10	.e3be		a4 f4		ldy $f4		                ldy $F4                      ;start from current ROM
11	.e3c0						nextOtherROM:
12	.e3c0		c8		iny		                iny                          ;next other ROM
13	.e3c1		c0 10		cpy #$10	                cpy #$10                     ;out of other ROMs?
14	.e3c3		b0 2a		bcs $e3ef	                bcs currentROMValid       ;taken if no more other ROMs
15							                .if version<500&&version!=350
16	.e3c5		20 99 e3	jsr $e399	                jsr LE389   ;select other ROM and check insertion flag
17	.e3c8		90 f6		bcc $e3c0	                bcc nextOtherROM ;taken if other ROM not actually inserted
18							                .endif
19							                .if version==350
23							                .else
24							                ; Start address is $8000-Y, so that there's no need to
25							                ; save Y.
26	.e3ca		98		tya		                tya
27	.e3cb		49 ff		eor #$ff	                eor #$FF
28	.e3cd		85 fa		sta $fa		                sta SEIWKA+0
29	.e3cf		a9 7f		lda #$7f	                lda #$7F
30	.e3d1		85 fb		sta $fb		                sta SEIWKA+1
31							                .endif
32	.e3d3						compareLoop:
33	.e3d3		8c 30 fe	sty $fe30	                sty ROMSEL                   ;select other ROM
34							                .if version==350
36							                .else
37	.e3d6		b1 fa		lda ($fa),y	                lda (SEIWKA),y               ;get byte from other ROM
38							                .endif
39	.e3d8		8e 30 fe	stx $fe30	                stx ROMSEL                   ;select ROM
40							                .if version==350
42							                .else
43	.e3db		d1 fa		cmp ($fa),y	                cmp (SEIWKA),y               ;same as other ROM?
44							                .endif
45	.e3dd		d0 e1		bne $e3c0	                bne nextOtherROM             ;taken if other ROM is good
46	.e3df		e6 fa		inc $fa		                inc SEIWKA+0
47	.e3e1		d0 f0		bne $e3d3	                bne compareLoop
48	.e3e3		e6 fb		inc $fb		                inc SEIWKA+1
49	.e3e5		a5 fb		lda $fb		                lda SEIWKA+1
50							                .if version>=500
55							                .endif
56	.e3e7		c9 84		cmp #$84	                cmp #$84                  ;compare only the first 1 KB
57	.e3e9		90 e8		bcc $e3d3	                bcc compareLoop
58							                ; The first 1 KB of the current ROM matches the first
59							                ; 1 KB of some higher-priority ROM, so the current ROM
60							                ; is invalid.
61							                .if version>=500||version==350
64							                .endif

66	.e3eb						currentROMInvalid:
67	.e3eb		a6 f4		ldx $f4		                ldx $F4
68	.e3ed		80 0d		bra $e3fc	                bra nextROM

70	.e3ef						currentROMValid:
71							                .if version>=500||version==350
80							                .endif
81	.e3ef		ad 06 80	lda $8006	                lda $8006
82	.e3f2		9d a1 02	sta $02a1,x	                sta romInformationTable,x
83	.e3f5		29 8f		and #$8f	                and #$8F
84	.e3f7		d0 03		bne $e3fc	                bne nextROM       ;taken if any mandatory bits are set

86							                ; A bogus ROM type means this ROM is the BASIC ROM.
87							                .if version>=500&&version!=350
90							                .endif

92	.e3f9		8e 4b 02	stx $024b	                stx basicROMNumber

94	.e3fc						nextROM:
95	.e3fc		e8		inx		                inx
96	.e3fd		e0 10		cpx #$10	                cpx #$10
97	.e3ff		90 af		bcc $e3b0	                bcc scanROMs
98	.e401		20 9d e5	jsr $e59d	                jsr selectTerminalROM


:13	;******  Return to file: src/mos.s65

7168	.e404		4c fa 81	jmp $81fa	                jmp terminal.romsScanned     ;not sure why not RTS.
7169							                .endproc
7170							                .endif

7172							;-------------------------------------------------------------------------
7173							;
7174							; Checks a ROM is valid - i.e., has a valid-looking copyright string.
7175							;
7176							; Entry:
7177							;
7178							; X = ROM to check
7179							;
7180							; Exit:
7181							;
7182							; C=0 if ROM invalid; C=1 if ROM valid
7183							;
7184							; ROM of interest is selected
7185							;
7186	.e407						isROMValid: .proc ;e3f7
7187	.e407		20 8e e5	jsr $e58e	                jsr selectROMX
7188	.e40a		a2 03		ldx #$03	                ldx #$03
7189	.e40c		ac 07 80	ldy $8007	                ldy $8007       ; fetch ROM copyright offset pointer
7190	.e40f		18		clc		                clc             ; assume no match
7191	.e410						-
7192	.e410		b9 00 80	lda $8000,y	                lda $8000,y     ; fetch possible ROM copyright char
7193	.e413		5d 20 e5	eor $e520,x	                eor sidewaysROMCopyrightPrefix,x     ; Z=1 if it matches "\x0(C)"
7194	.e416		d0 05		bne $e41d	                bne +           ; branch taken if no match
7195	.e418		c8		iny		                iny             ; next copyright byte
7196	.e419		ca		dex		                dex             ; count 4 chars
7197	.e41a		10 f4		bpl $e410	                bpl -
7198	.e41c		38		sec		                sec             ; C=1 means a match
7199	.e41d						+
7200	.e41d		60		rts		                rts
7201							                .pend

7203							;-------------------------------------------------------------------------

7205							; End of STARTUP code
7206							; ===================
7207	.e41e						LE40E:
7208	.e41e		38		sec		                sec                      ; Call Break Intercept Vector
7209							                .if version==350
7211							                .else
7212	.e41f		20 38 f1	jsr $f138	                jsr osbyte247EntryPoint
7213							                .endif
7214	.e422		a2 27		ldx #$27	                ldx #romServiceCallInformReset
7215	.e424		20 52 ec	jsr $ec52	                jsr makeROMServiceCall
7216	.e427		ac 56 02	ldy $0256	                ldy execFileHandle ; Get Exec handle, skip past if closed
7217	.e42a		f0 08		beq $e434	                beq LE424
7218	.e42c		9c 56 02	stz $0256	                stz execFileHandle           ; Clear Exec handle
7219	.e42f		a9 00		lda #$00	                lda #$00                     ; Close Exec channel
7220	.e431		20 ce ff	jsr $ffce	                jsr OSFIND
7221	.e434						LE424:
7222	.e434		38		sec		                sec                          ;
7223	.e435		6e 00 df	ror $df00	                ror hazel.currentFS
7224	.e438		ad 8d 02	lda $028d	                lda lastBREAKType            ; Soft Break
7225	.e43b		f0 04		beq $e441	                beq LE431
7226	.e43d		38		sec		                sec                          ;
7227	.e43e		6e 02 df	ror $df02	                ror hazel.libFS
7228	.e441						LE431:
7229	.e441		20 44 ec	jsr $ec44	                jsr LEE64                    ; Set default ROMFS/TAPEFS settings
7230	.e444		20 1f f0	jsr $f01f	                jsr osbyte76                    ; Test Shift and Ctrl keys
7231							                .if version==350
7233							                .else
7234	.e447		4a		lsr a		                lsr a                        ; Move SHIFT status from b7 to b3
7235	.e448		4a		lsr a		                lsr a
7236	.e449		4a		lsr a		                lsr a
7237	.e44a		4a		lsr a		                lsr a
7238							                .endif
7239	.e44b		4d 8f 02	eor $028f	                eor startupOptions ; Toggle with OSBYTE 255 boot status
7240	.e44e		29 08		and #$08	                and #$08
7241	.e450		a8		tay		                tay
7242	.e451		ae 03 df	ldx $df03	                ldx hazel.currentFSROM
7243	.e454		ad 8d 02	lda $028d	                lda lastBREAKType ; Soft Break, use current filing system
7244	.e457		f0 0b		beq $e464	                beq LE454
7245	.e459		20 9d e5	jsr $e59d	                jsr selectTerminalROM
7246							                .if version<500&&version!=350
7247	.e45c		5a		phy		                phy
7248	.e45d		20 38 91	jsr $9138	                jsr terminal.readDefaultROMs
7249	.e460		29 0f		and #$0f	                and #$0F                     ;get default FS ROM
7250	.e462		7a		ply		                ply
7254							                .endif

7256	.e463		aa		tax		                tax
7257	.e464						LE454:
7258	.e464		3c a1 02	bit $02a1,x	                bit romInformationTable,x
7259	.e467		10 1f		bpl $e488	                bpl LE478
7260	.e469		20 8e e5	jsr $e58e	                jsr selectROMX
7261	.e46c		e0 0f		cpx #$0f	                cpx #terminalROM
7262	.e46e		d0 0c		bne $e47c	                bne LE46C
7263	.e470		20 ff f6	jsr $f6ff	                jsr osbyte7A
7264	.e473		e8		inx		                inx
7265	.e474		f0 19		beq $e48f	                beq LE47F
7266	.e476		e0 63		cpx #$63	                cpx #$63
7267	.e478		f0 15		beq $e48f	                beq LE47F
7268	.e47a		80 0c		bra $e488	                bra LE478

7270	.e47c						LE46C:
7271	.e47c		a9 03		lda #$03	                lda #romServiceCallAutoBoot  ; Filing System selection
7272	.e47e		20 03 80	jsr $8003	                jsr $8003
7273	.e481		aa		tax		                tax
7274	.e482		20 9d e5	jsr $e59d	                jsr selectTerminalROM
7275	.e485		8a		txa		                txa
7276	.e486		f0 28		beq $e4b0	                beq LE4A3
7277	.e488						LE478:
7278	.e488		a2 03		ldx #$03	                ldx #romServiceCallAutoBoot
7279	.e48a		20 52 ec	jsr $ec52	                jsr makeROMServiceCall
7280	.e48d		f0 21		beq $e4b0	                beq LE4A3
7281	.e48f						LE47F:
7282	.e48f		98		tya		                tya
7283	.e490		d0 17		bne $e4a9	                bne LE499
7284	.e492		a9 8d		lda #$8d	                lda #$8D
7285	.e494		20 99 eb	jsr $eb99	                jsr osbyte8C8D
7286	.e497		a2 f7		ldx #$f7	                ldx #<starRunBOOT
7287	.e499		a0 f1		ldy #$f1	                ldy #>starRunBOOT
7288	.e49b		ce 67 02	dec $0267	                dec startupMessageSuppressionStatus
7289	.e49e		20 f7 ff	jsr $fff7	                jsr OSCLI
7290	.e4a1		ee 67 02	inc $0267	                inc startupMessageSuppressionStatus
7291	.e4a4		80 0a		bra $e4b0	                bra LE4A3

7293							;-------------------------------------------------------------------------

7295	.e4a6						LE496:
7296	.e4a6		ee 67 02	inc $0267	                inc startupMessageSuppressionStatus ;set bit 0
7297	.e4a9						LE499:
7298	.e4a9		38		sec		                sec
7299	.e4aa		6e 00 df	ror $df00	                ror hazel.currentFS
7300							                .if version<400
7304							                .elsif version<500
7305	.e4ad		20 c5 eb	jsr $ebc5	                jsr selectROMOrTAPEByOSBYTE
7309							                .endif
7310	.e4b0						LE4A3:
7311	.e4b0		a9 05		lda #$05	                lda #$05                     ;
7312	.e4b2		ae 85 02	ldx $0285	                ldx printerDriverType        ; *FX5,<current printer>
7313	.e4b5		20 b9 ec	jsr $ecb9	                jsr osbyteEntryPoint
7314	.e4b8		ad 8d 02	lda $028d	                lda lastBREAKType ; If not Soft Break, select default language
7315	.e4bb		d0 0b		bne $e4c8	                bne LE4BB
7316	.e4bd		ae 8c 02	ldx $028c	                ldx currentLanguageROM      ; Get current language ROM
7317							                .if version==350&&!finmos329
7321							                .else
7322	.e4c0		e0 10		cpx #$10	                cpx #$10                     ; <16, normal ROM number, use it
7323							                .endif
7324	.e4c2		90 0b		bcc $e4cf	                bcc LE4C2
7325							                .if version==350&&!finmos329
7327							                .else
7328	.e4c4		e0 1f		cpx #$1f	                cpx #$1F                     ; 16+UTILS ROM, re-enter Supervisor or Tube CLI
7329							                .endif
7330	.e4c6		f0 4e		beq $e516	                beq LE509
7331	.e4c8						LE4BB:
7332	.e4c8		20 9d e5	jsr $e59d	                jsr selectTerminalROM     ; Page in ROM 15 - UTILS ROM
7333							                .if version<500&&version!=350
7334	.e4cb		20 30 91	jsr $9130	                jsr terminal.readDefaultLanguageROM        ; Read configured LANG
7338							                .endif
7339	.e4ce		aa		tax		                tax
7340	.e4cf						LE4C2:
7341	.e4cf		18		clc		                clc

7343							;-------------------------------------------------------------------------
7344							;
7345							; OSBYTE 142 (&8E) Enter language ROM [MasRef D.2-44]
7346							;
7347	.e4d0						osbyte8E:
7348							                .if version==350
7353							                .endif
7354	.e4d0		3c a1 02	bit $02a1,x	                bit romInformationTable,x ; b6=0, error Not a language
7355							                .if version==350
7357							                .endif
7358	.e4d3		50 4e		bvc $e523	                bvc thisIsNotALanguageError
7359	.e4d5		08		php		                php
7360	.e4d6		90 16		bcc $e4ee	                bcc LE4E1 ;taken if not OSBYTE 142 - so skip ROM check
7361	.e4d8		20 8e e5	jsr $e58e	                jsr selectROMX
7362	.e4db		ad 06 80	lda $8006	                lda sidewaysROMType
7363	.e4de		29 0d		and #$0d	                and #%00001101
7364	.e4e0		f0 05		beq $e4e7	                beq is6502ROM ;taken if low nybble is 0 (6502 BASIC) or 2 (other 6502 ROM)
7365	.e4e2		2c 7a 02	bit $027a	                bit tubePresence
7366	.e4e5		10 54		bpl $e53b	                bpl iCannotRunThisCodeError  ;taken if no Tube - assume impossible to run
7367	.e4e7						is6502ROM:
7368	.e4e7		da		phx		                phx                          ;save ROM slot
7369	.e4e8		a2 2a		ldx #$2a	                ldx #romServiceCallLanguageChange
7370	.e4ea		20 52 ec	jsr $ec52	                jsr makeROMServiceCall
7371	.e4ed		fa		plx		                plx                          ;restore ROM slot
7372	.e4ee						LE4E1:
7373	.e4ee		8e 8c 02	stx $028c	                stx currentLanguageROM
7374	.e4f1		20 8e e5	jsr $e58e	                jsr selectROMX
7375	.e4f4		a9 80		lda #$80	                lda #>sidewaysROMName
7376	.e4f6		a0 08		ldy #$08	                ldy #(<sidewaysROMName)-1
7377	.e4f8		20 bc e6	jsr $e6bc	                jsr print0TerminatedString
7378	.e4fb		84 fd		sty $fd		                sty errPtr+0
7379	.e4fd		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7380	.e500		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7381	.e503		28		plp		                plp
7382							                .if version<500
7383	.e504		a9 01		lda #$01	                lda #$01
7384	.e506		2c 7a 02	bit $027a	                bit tubePresence
7385	.e509		30 12		bmi $e51d	                bmi copyLanguageOverTube     ;taken if Tube is present
7386							                .endif
7387	.e50b		ad 06 80	lda $8006	                lda sidewaysROMType
7388	.e50e		29 0d		and #$0d	                and #%00001101
7389	.e510		d0 29		bne $e53b	                bne iCannotRunThisCodeError ;taken if low nybble isn't 0 (6502 BASIC) or 2 (other 6502 ROM)
7390	.e512		1a		inc a		                inc a                       ;
7391	.e513		4c 00 80	jmp $8000	                jmp sidewaysROMLanguageEntry

7393	.e516						LE509:
7394	.e516		a9 00		lda #$00	                lda #$00
7395							                .if version<500
7396	.e518		2c 7a 02	bit $027a	                bit tubePresence
7397	.e51b		10 69		bpl $e586	                bpl startCommandLineUI
7398	.e51d						copyLanguageOverTube:
7399	.e51d		4c 00 04	jmp $0400	                jmp terminal.tubeHost.copyLanguage
7402							                .endif

7404							;-------------------------------------------------------------------------

7406	.e520						sidewaysROMCopyrightPrefix: .block
7407	>e520		29 43 28			                .text ")C("
7408	.e523						end:
7409							                .endblock

7411							;-------------------------------------------------------------------------

7413	.e523						thisIsNotALanguageError:
7414	.e523		00		brk #		                brk
7415	>e524		00 54 68 69 73 20 69 73		                .text 0,"This is not a language"
	>e52c		20 6e 6f 74 20 61 20 6c 61 6e 67 75 61 67 65

7417							;-------------------------------------------------------------------------

7419	.e53b						iCannotRunThisCodeError:
7420	.e53b		00		brk #		                brk
7421	>e53c		00 49 20 63 61 6e 6e 6f		                .text 0,"I cannot run this code",0
	>e544		74 20 72 75 6e 20 74 68 69 73 20 63 6f 64 65 00

7423							;-------------------------------------------------------------------------
7424							;
7425							; OSBYTE 164 (&A4) Check processor type [MasRef D.2-50]
7426							;
7427	.e554						osbyteA4:
7428	.e554		a2 03		ldx #$03	                ldx #sidewaysROMCopyrightPrefix.end-sidewaysROMCopyrightPrefix
7429	.e556		a0 07		ldy #$07	                ldy #<sidewaysROMCopyrightOffset
7430	.e558		b1 f0		lda ($f0),y	                lda (originalX),y
7431	.e55a		a8		tay		                tay
7432	.e55b						-
7433	.e55b		b1 f0		lda ($f0),y	                lda (originalX),y
7434	.e55d		dd 20 e5	cmp $e520,x	                cmp sidewaysROMCopyrightPrefix,x
7435	.e560		d0 0f		bne $e571	                bne rtsE564 ;taken if (C) not found - must be OK, if it's not a ROM?
7436	.e562		c8		iny		                iny
7437	.e563		ca		dex		                dex
7438	.e564		10 f5		bpl $e55b	                bpl -
7439	.e566		a0 06		ldy #$06	                ldy #<sidewaysROMType
7440	.e568		b1 f0		lda ($f0),y	                lda (originalX),y
7441	.e56a		0a		asl a		                asl a
7442	.e56b		10 b6		bpl $e523	                bpl thisIsNotALanguageError ;taken if no language entry point
7443	.e56d		29 1a		and #$1a	                and #%00001101<<1
7444	.e56f		d0 ca		bne $e53b	                bne iCannotRunThisCodeError ;taken if low nybble wasn't 0 (6502 BASIC) or 2 (other 6502 ROM)
7445	.e571						rtsE564:
7446	.e571		60		rts		                rts

7448							;-------------------------------------------------------------------------

7450							                .if version==350
7457							                .endif

7459							;-------------------------------------------------------------------------

7461							                .if version==350
7467							                .endif

7469							;-------------------------------------------------------------------------

7471	.e572						defaultBRKHandler:
7472	.e572		a0 00		ldy #$00	                ldy #$00
7473	.e574		20 c0 e6	jsr $e6c0	                jsr printBRKMessage
7474	.e577		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7475	.e57a		ad 67 02	lda $0267	                lda startupMessageSuppressionStatus
7476	.e57d		6a		ror a		                ror a
7477	.e57e		b0 06		bcs $e586	                bcs startCommandLineUI                   ;taken if bit 0 was set
7478	.e580		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7479	.e583		4c a6 e4	jmp $e4a6	                jmp LE496

7481							;-------------------------------------------------------------------------

7483	.e586						startCommandLineUI:
7484	.e586		20 9d e5	jsr $e59d	                jsr selectTerminalROM
7485	.e589		4c 76 86	jmp $8676	                jmp terminal.commandLineUI

7487							;-------------------------------------------------------------------------
7488							;
7489							; Select paged ROM bank 15 - TERMINAL - with ANDY paged in,
7490							;
7491							; Preserves A/Y
7492	.e58c						selectTerminalROMAndANDY:   ;e57f
7493	.e58c		a2 8f		ldx #$8f	                ldx #$80|terminalROM
7494							                ; fall through into selectROMX

7496							;-------------------------------------------------------------------------
7497							;-------------------------------------------------------------------------
7498							;
7499							; Select paged ROM bank.
7500							;
7501							; Entry:
7502							;
7503							; X = bank to select.
7504							;
7505							; Preserves A/X/Y/P
7506	.e58e						selectROMX:   ;e581
7507	.e58e		86 f4		stx $f4		                stx $F4
7508	.e590		8e 30 fe	stx $fe30	                stx ROMSEL
7509	.e593		60		rts		                rts

7511							;-------------------------------------------------------------------------
7512							;
7513	.e594						isROMValidThenSelectTerminalROM:
7514	.e594		5a		phy		                phy
7515	.e595		20 07 e4	jsr $e407	                jsr isROMValid
7516	.e598		20 9d e5	jsr $e59d	                jsr selectTerminalROM
7517	.e59b		7a		ply		                ply
7518	.e59c		60		rts		                rts

7520							;-------------------------------------------------------------------------
7521							;
7522							; Select paged ROM bank 15 - TERMINAL.
7523							;
7524							; Preserves X/Y
7525	.e59d						selectTerminalROM:            ;e590
7526	.e59d		a9 0f		lda #$0f	                lda #terminalROM
7527							                ; fall through into selectROMA

7529							;-------------------------------------------------------------------------
7530							;
7531							; Select paged ROM bank.
7532							;
7533							; A = bank to select.
7534							;
7535							; Preserves A/X/Y/P
7536	.e59f						selectROMA:                   ;e592
7537	.e59f		85 f4		sta $f4		                sta $F4         ;update ROMSEL copy
7538	.e5a1		8d 30 fe	sta $fe30	                sta ROMSEL
7539	.e5a4		60		rts		                rts

7541							;-------------------------------------------------------------------------
7542							;
7543							; Select paged ROM bank 15 - TERMINAL - with ANDY paged in,
7544							;
7545							; Preserves A/X/Y

7547	.e5a5						selectTerminalROMAndANDY2:
7548	.e5a5		da		phx		                phx
7549	.e5a6		20 8c e5	jsr $e58c	                jsr selectTerminalROMAndANDY
7550	.e5a9		fa		plx		                plx
7551	.e5aa		60		rts		                rts

7553							;-------------------------------------------------------------------------

7555	.e5ab						irqEntryPoint:
7556	.e5ab		85 fc		sta $fc		                sta irqTempA
7557	.e5ad		68		pla		                pla                          ;restore P
7558	.e5ae		48		pha		                pha                          ;save P
7559	.e5af		29 10		and #$10	                and #$10
7560	.e5b1		d0 03		bne $e5b6	                bne brkEntryPoint
7561	.e5b3		6c 04 02	jmp ($0204)	                jmp (IRQ1V)

7563	.e5b6						brkEntryPoint:
7564	.e5b6		da		phx		                phx
7565	.e5b7		ba		tsx		                tsx
7566	.e5b8		bd 03 01	lda $0103,x	                lda $0103,x                  ;get BRK address+1 LSB
7567	.e5bb		d8		cld		                cld                          ;
7568	.e5bc		38		sec		                sec                          ;
7569	.e5bd		e9 01		sbc #$01	                sbc #$01                     ;get BRK address LSB
7570	.e5bf		85 fd		sta $fd		                sta errPtr+0
7571	.e5c1		bd 04 01	lda $0104,x	                lda $0104,x                  ;get BRK address+1 MSB
7572	.e5c4		e9 00		sbc #$00	                sbc #$00                     ;get BRK address MSB
7573	.e5c6		85 fe		sta $fe		                sta errPtr+1
7574	.e5c8		a5 f4		lda $f4		                lda $F4
7575	.e5ca		8d 4a 02	sta $024a	                sta romActiveAtLastBRK
7576	.e5cd		86 f0		stx $f0		                stx originalX
7577	.e5cf		a2 06		ldx #$06	                ldx #romServiceCallBreakInstruction
7578	.e5d1		20 52 ec	jsr $ec52	                jsr makeROMServiceCall
7579	.e5d4		ae 8c 02	ldx $028c	                ldx currentLanguageROM
7580	.e5d7		20 8e e5	jsr $e58e	                jsr selectROMX
7581	.e5da		fa		plx		                plx
7582	.e5db		a5 fc		lda $fc		                lda irqTempA
7583	.e5dd		58		cli		                cli
7584	.e5de		6c 02 02	jmp ($0202)	                jmp (BRKV)

7586							;-------------------------------------------------------------------------

7588							                .if version!=400
7614							                .endif

7616							;-------------------------------------------------------------------------

7618	.e5e1						irq1EntryPoint:
7619	.e5e1		a5 fc		lda $fc		                lda irqTempA
7620	.e5e3		48		pha		                pha
7621	.e5e4		da		phx		                phx
7622	.e5e5		5a		phy		                phy
7623							                .if version!=400
7625							                .endif
7626	.e5e6		20 00 e6	jsr $e600	                jsr irq1Handler
7627	.e5e9		7a		ply		                ply
7628	.e5ea		fa		plx		                plx
7629	.e5eb		68		pla		                pla
7630	.e5ec		40		rti		                rti

7632							;-------------------------------------------------------------------------

7634	.e5ed						irq2EntryPoint:
7635	.e5ed		a5 fc		lda $fc		                lda irqTempA
7636	.e5ef		40		rti		                rti

7638							;-------------------------------------------------------------------------

7640							                .if version==400
7641	.e5f0						rtsE64D:
7642	.e5f0		60		rts		                rts
7702							                .endif

7704							;-------------------------------------------------------------------------

7706	.e5f1						handleUnrecogisedInterrupt:
7707	.e5f1		a2 05		ldx #$05	                ldx #romServiceCallUnrecognisedInterrupt
7708	.e5f3		20 52 ec	jsr $ec52	                jsr makeROMServiceCall
7709	.e5f6		f0 f8		beq $e5f0	                beq rtsE64D                  ;taken if handled

7711							                ; Pass unrecognised, unhandled interrupts to IRQ2V.
7712	.e5f8		68		pla		                pla
7713	.e5f9		68		pla		                pla
7714	.e5fa		7a		ply		                ply
7715	.e5fb		fa		plx		                plx
7716	.e5fc		68		pla		                pla
7717							                .if version==350
7719							                .endif
7720	.e5fd		6c 06 02	jmp ($0206)	                jmp (IRQ2V)

7722							;-------------------------------------------------------------------------

7724							                .if version==400
7725	.e600						irq1Handler:
7728							                .endif
7729	.e600		ad 4d fe	lda $fe4d	                lda systemVIA.ifr
7730							                .if version==400
7731	.e603		10 ec		bpl $e5f1	                bpl handleUnrecogisedInterrupt
7734							                .endif
7735	.e605		2d 79 02	and $0279	                and systemVIAInterruptMask
7736	.e608		2d 4e fe	and $fe4e	                and systemVIA.ier
7737	.e60b		89 02		bit #$02	                bit #VIA.irq.ca1
7738	.e60d		f0 2b		beq $e63a	                beq checkForSystemVIAT1Interrupt

7740							                ; Handle CA1 interrupt - CRTC vsync.

7742	.e60f		ce 40 02	dec $0240	                dec cfsTimeoutCounter
7743							                .if version!=400
7748							                .endif
7749	.e612		ad 51 02	lda $0251	                lda flashCounter
7750	.e615		f0 1a		beq $e631	                beq flashDone                    ;taken if no flash
7751	.e617		ce 51 02	dec $0251	                dec flashCounter             ;count down
7752	.e61a		d0 15		bne $e631	                bne flashDone
7753	.e61c		ae 52 02	ldx $0252	                ldx firstFlashColourDuration ;assume first flash colour is next
7754	.e61f		ad 48 02	lda $0248	                lda vcontrolRegister
7755	.e622		4a		lsr a		                lsr a                        ;C=flash bit
7756	.e623		90 03		bcc $e628	                bcc +                        ;taken if first flash colour is next
7757	.e625		ae 53 02	ldx $0253	                ldx secondFlashColourDuration ;actually, second flash colour is next
7758	.e628						+
7759	.e628		2a		rol a		                rol a                        ;reinstate old register value
7760	.e629		49 01		eor #$01	                eor #VCONTROL.flash          ;toggle flash bit
7761	.e62b		20 3f f0	jsr $f03f	                jsr setVCONTROL
7762	.e62e		8e 51 02	stx $0251	                stx flashCounter
7763	.e631						flashDone:
7764	.e631		a0 04		ldy #$04	                ldy #eventStartOfVerticalSync
7765	.e633		20 d0 e8	jsr $e8d0	                jsr eventEntryPoint
7766	.e636		a9 02		lda #$02	                lda #VIA.irq.ca1
7767							                .if version==400
7768	.e638		80 79		bra $e6b3	                bra staSystemVIAIFR
7771							                .endif

7773							                .if version!=400
7790							                .endif

7792	.e63a						checkForSystemVIAT1Interrupt:
7793	.e63a		89 40		bit #$40	                bit #VIA.irq.t1
7794							                .if version<400
7796							                .else
7797	.e63c		f0 6c		beq $e6aa	                beq checkForSystemVIACA2Interrupt
7798							                .endif

7800							                ; Handle T1 interrupt - 100 Hz timer.

7802	.e63e		a9 40		lda #$40	                lda #VIA.irq.t1
7803	.e640		8d 4d fe	sta $fe4d	                sta systemVIA.ifr            ;acknowledge T1 interrupt
7804	.e643		ad 83 02	lda $0283	                lda timerSwitchState
7805	.e646		aa		tax		                tax                          ;X=old timerSwitchState
7806	.e647		49 0f		eor #$0f	                eor #$0F
7807	.e649		48		pha		                pha                          ;save new timerSwitchState
7808	.e64a		a8		tay		                tay                          ;Y=new timerSwitchState
7809	.e64b		38		sec		                sec                          ;C=1 - increment
7810	.e64c						updateTIMELoop:
7811	.e64c		bd 91 02	lda $0291,x	                lda timer0-1,x
7812	.e64f		69 00		adc #$00	                adc #$00
7813	.e651		99 91 02	sta $0291,y	                sta timer0-1,y

7815							                ; one of X or Y will get to 0 to indicate the end of
7816							                ; the loop.
7817	.e654		ca		dex		                dex
7818	.e655		f0 03		beq $e65a	                beq updateTIMEDone
7819	.e657		88		dey		                dey
7820	.e658		d0 f2		bne $e64c	                bne updateTIMELoop
7821	.e65a						updateTIMEDone:
7822	.e65a		68		pla		                pla                          ;restore new timerSwitchState
7823	.e65b		8d 83 02	sta $0283	                sta timerSwitchState
7824	.e65e		a2 05		ldx #$05	                ldx #$05
7825	.e660						incrementIntervalTimer:
7826	.e660		fe 9b 02	inc $029b,x	                inc intervalTimer-1,x
7827	.e663		d0 08		bne $e66d	                bne intervalTimerDone
7828	.e665		ca		dex		                dex
7829	.e666		d0 f8		bne $e660	                bne incrementIntervalTimer
7830	.e668		a0 05		ldy #$05	                ldy #eventIntervalTimerCrossingZero
7831	.e66a		20 d0 e8	jsr $e8d0	                jsr eventEntryPoint
7832	.e66d						intervalTimerDone:
7833	.e66d		ad b1 02	lda $02b1	                lda inkeyTimeoutCounter+0
7834	.e670		d0 08		bne $e67a	                bne LE715
7835	.e672		ad b2 02	lda $02b2	                lda inkeyTimeoutCounter+1
7836	.e675		f0 06		beq $e67d	                beq LE718
7837	.e677		ce b2 02	dec $02b2	                dec inkeyTimeoutCounter+1
7838	.e67a						LE715:
7839	.e67a		ce b1 02	dec $02b1	                dec inkeyTimeoutCounter+0
7840	.e67d						LE718:
7841	.e67d		2c cd 02	bit $02cd	                bit previousKeyPressedWhenReadingOSBYTE
7842	.e680		10 0b		bpl $e68d	                bpl LE728
7843	.e682		ee cd 02	inc $02cd	                inc previousKeyPressedWhenReadingOSBYTE
7844	.e685		58		cli		                cli
7845							                .if version==350
7847							                .else
7848	.e686		20 05 f2	jsr $f205	                jsr LF416                    ;update sound???
7849							                .endif
7850	.e689		78		sei		                sei
7851	.e68a		ce cd 02	dec $02cd	                dec previousKeyPressedWhenReadingOSBYTE
7852	.e68d						LE728:
7853	.e68d		2c 5e e3	bit $e35e	                bit valueFF                  ;V=1
7854							                .if version!=400
7856							                .endif
7857	.e690		a5 ec		lda $ec		                lda lastKeyPressedInternal
7858	.e692		05 ed		ora $ed		                ora firstKeyPressedInternal
7859	.e694		2d 42 02	and $0242	                and keyboardSemaphore
7860	.e697		f0 04		beq $e69d	                beq +
7861	.e699		38		sec		                sec
7862	.e69a		20 ee f6	jsr $f6ee	                jsr LF8FF
7863	.e69d						+
7864							                .if version>=500
7866							                .endif
7867	.e69d		20 db e7	jsr $e7db	                jsr pollPrinterDriver
7868	.e6a0		ac 43 02	ldy $0243	                ldy romPollingSemaphore
7869							                .if version==400
7870	.e6a3		f0 11		beq $e6b6	                beq rtsE6B6
7873							                .endif
7874	.e6a5		a2 15		ldx #$15	                ldx #romServiceCallPollingInterrupt
7875							                .if version==400
7876	.e6a7		4c 52 ec	jmp $ec52	                jmp makeROMServiceCall
7885							                .endif

7887							                .if version!=400
7929							                .endif

7931	.e6aa						checkForSystemVIACA2Interrupt:
7932	.e6aa		4a		lsr a		                lsr a                        ;C = CA2
7933	.e6ab		90 0a		bcc $e6b7	                bcc handleUnrecognisedInterruptE799

7935							                ; Handle CA2 interrupt - keyboard.

7937	.e6ad		18		clc		                clc
7938	.e6ae		20 ee f6	jsr $f6ee	                jsr LF8FF
7939	.e6b1		a9 01		lda #$01	                lda #VIA.irq.ca2
7940							                .if version<400
7942							                .else
7943	.e6b3						staSystemVIAIFR:
7944	.e6b3		8d 4d fe	sta $fe4d	                sta systemVIA.ifr
7945	.e6b6						rtsE6B6:
7946	.e6b6		60		rts		                rts
7947							                .endif

7949	.e6b7						handleUnrecognisedInterruptE799:
7950	.e6b7		4c f1 e5	jmp $e5f1	                jmp handleUnrecogisedInterrupt

7952							;-------------------------------------------------------------------------
7953							;
7954							; OSBYTE 17 (&11) Write next ADC channel to be sampled [MasRef D.2-25]
7955							;
7956	.e6ba						osbyte11:
7957							                .if version!=400
7964							                .endif

7966							;-------------------------------------------------------------------------
7967							;
7968							; Print a 0-terminated string at some offset from startupMessages.
7969							;
7970							; entry:
7971							;
7972							; Y = offset-1 of message
7973							;
7974	.e6ba						printStartupMessage:
7975	.e6ba		a9 e0		lda #$e0	                lda #>startupMessages
7976							                ; .cerror (<startupMessages)!=0,"startupMessages must be page-aligned" ;it's more flexible than this, but this'll do for now

7978							;-------------------------------------------------------------------------
7979							;
7980							; Print a 0-terminated string.
7981							;
7982							; entry:
7983							;
7984							; A = address MSB
7985							;
7986							; Y = (address LSB)-1
7987							;
7988	.e6bc						print0TerminatedString:
7989	.e6bc		85 fe		sta $fe		                sta errPtr+1
7990	.e6be		64 fd		stz $fd		                stz errPtr+0

7992							;-------------------------------------------------------------------------
7993							;
7994							; Print the BRK message.
7995							;
7996							; entry:
7997							;
7998							; (errPtr) = pointer to the error number (as will be the case after a
7999							; BRK)
8000							;
8001							; Y=0
8002							;
8003	.e6c0						printBRKMessage:
8004	.e6c0		c8		iny		                iny
8005	.e6c1		b1 fd		lda ($fd),y	                lda (errPtr),y
8006	.e6c3		20 e3 ff	jsr $ffe3	                jsr OSASCI
8007	.e6c6		aa		tax		                tax
8008	.e6c7		d0 f7		bne $e6c0	                bne printBRKMessage
8009	.e6c9						rtsE7B0:
8010	.e6c9		60		rts		                rts

8012							;-------------------------------------------------------------------------

8014							                .if version>=500
8254							                .endif

8256							;-------------------------------------------------------------------------

8258	.e6ca						osbyte81Timed:
8259	.e6ca		8e b1 02	stx $02b1	                stx inkeyTimeoutCounter+0
8260	.e6cd		8c b2 02	sty $02b2	                sty inkeyTimeoutCounter+1
8261	.e6d0		66 e6		ror $e6		                ror readCharacterTimedFlag   ;set the timed flag
8262	.e6d2		58		cli		                cli
8263	.e6d3		80 02		bra $e6d7	                bra osrdchWithTimeout

8265							;-------------------------------------------------------------------------

8267	.e6d5						osrdchEntryPoint:
8268	.e6d5		64 e6		stz $e6		                stz readCharacterTimedFlag   ;clear the timed flag
8269	.e6d7						osrdchWithTimeout:
8270	.e6d7		da		phx		                phx
8271	.e6d8		5a		phy		                phy
8272	.e6d9		ac 56 02	ldy $0256	                ldy execFileHandle
8273	.e6dc		f0 12		beq $e6f0	                beq osrdchLoop               ;taken if not *EXEC'ing
8274	.e6de		38		sec		                sec
8275	.e6df		66 eb		ror $eb		                ror tapeCritical
8276	.e6e1		20 d7 ff	jsr $ffd7	                jsr OSBGET             ;get 1 byte from the *EXEC file
8277	.e6e4		64 eb		stz $eb		                stz tapeCritical
8278	.e6e6		90 21		bcc $e709	                bcc osrdchDone                    ;taken if byte valid
8279	.e6e8		a9 00		lda #$00	                lda #$00                     ;OSFIND close file
8280	.e6ea		9c 56 02	stz $0256	                stz execFileHandle           ;reset *EXEC handle
8281	.e6ed		20 ce ff	jsr $ffce	                jsr OSFIND                   ;close *EXEC file
8282	.e6f0						osrdchLoop:
8283	.e6f0		a5 ff		lda $ff		                lda escapeFlag               ;b7 set if ESCAPE pressed
8284	.e6f2		0a		asl a		                asl a                        ;C=1 if ESCAPE pressed
8285	.e6f3		a9 1b		lda #$1b	                lda #27                      ;ASCII for ESCAPE
8286	.e6f5		b0 12		bcs $e709	                bcs osrdchDone               ;exit with C=1 if ESCAPE
8287							                                             ;pressed
8288							                .if version!=400
8290							                .endif
8291	.e6f7		20 8c e9	jsr $e98c	                jsr readFromEconetOrSoftKeyOrInputBufferA ;handle Econet/soft key stuff???
8292	.e6fa		90 0d		bcc $e709	                bcc osrdchDone
8293	.e6fc		24 e6		bit $e6		                bit readCharacterTimedFlag
8294	.e6fe		10 f0		bpl $e6f0	                bpl osrdchLoop     ;taken if no timeout - keep looping
8295	.e700		ad b2 02	lda $02b2	                lda inkeyTimeoutCounter+1
8296	.e703		0d b1 02	ora $02b1	                ora inkeyTimeoutCounter+0
8297	.e706		d0 e8		bne $e6f0	                bne osrdchLoop     ;taken if timeout not timed out yet
8298	.e708		3a		dec a		                dec a              ;timed out: A=$ff, C=1
8299	.e709						osrdchDone:
8300	.e709		7a		ply		                ply
8301	.e70a		fa		plx		                plx
8302	.e70b		60		rts		                rts

8304							;-------------------------------------------------------------------------

8306	.e70c						starLIBFS:
8307	.e70c		ad 01 df	lda $df01	                lda hazel.activeFS
8308	.e70f		8d 02 df	sta $df02	                sta hazel.libFS
8309	.e712		60		rts		                rts

8311							;-------------------------------------------------------------------------

8313							                .if version<500
8314	.e713						starX:
8315	.e713		8d e8 fe	sta $fee8	                sta TUBE+8
8316	.e716						LE800:
8317	.e716		80 fe		bra $e716	                bra LE800
8318							                .endif

8320							;-------------------------------------------------------------------------
8321							;
8322							; OSCLI
8323							;
8324							; MasRef D.4-1
8325							;

8327	.e718						oscliEntryPoint: .block
8328	.e718		20 b9 eb	jsr $ebb9	                jsr selectHAZEL
8329	.e71b		86 f2		stx $f2		                stx stringInputBufferAddress+0
8330	.e71d		84 f3		sty $f3		                sty stringInputBufferAddress+1
8331	.e71f		a0 00		ldy #$00	                ldy #$00
8332	.e721						-
8333	.e721		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
8334	.e723		99 00 dc	sta $dc00,y	                sta hazel.commandLine,y
8335	=$e727						emptyCommandLine=*+1                         ;arbitrary place that's
8336							                                             ;just a 13 byte...
8337	.e726		c9 0d		cmp #$0d	                cmp #$0D
8338	.e728		f0 04		beq $e72e	                beq +     ;branch taken if end of command line reached
8339	.e72a		c8		iny		                iny
8340	.e72b		d0 f4		bne $e721	                bne -

8342							                ; OSCLI is a no-op if the command line is too long.
8343	.e72d		60		rts		                rts

8345	.e72e						+
8346	.e72e		a0 dc		ldy #$dc	                ldy #>hazel.commandLine
8347	.e730		a2 00		ldx #$00	                ldx #<hazel.commandLine
8348	.e732		20 73 f1	jsr $f173	                jsr withTerminalROM
8349	.e735		4c 14 85	jmp $8514	                jmp terminal.oscli
8350							                .endblock

8352	=$e727						emptyCommandLine=oscliEntryPoint.emptyCommandLine

8354							                ; OSWRCH
8355							                ; ======
8356	.e738						oswrchEntryPoint:
8357	.e738		48		pha		                pha                          ;S=[ch]
8358	.e739		da		phx		                phx                          ;S=[x; ch]
8359	.e73a		5a		phy		                phy                          ;S=[y; x; ch]
8360	.e73b		48		pha		                pha                          ;S=[ch; y; x; ch]
8361	.e73c		2c 60 02	bit $0260	                bit econetOutputInterpretationStatus
8362	.e73f		10 08		bpl $e749	                bpl LE833
8363	.e741		a8		tay		                tay
8364	.e742		a9 04		lda #$04	                lda #netWriteCharacterAttempted
8365	.e744		20 95 e9	jsr $e995	                jsr callNETV
8366	.e747		b0 51		bcs $e79a	                bcs LE8A5
8367	.e749						LE833:
8368	.e749		a9 02		lda #$02	                lda #$02
8369	.e74b		2c 7c 02	bit $027c	                bit characterDestinationStatus
8370	.e74e		d0 28		bne $e778	                bne LE862
8371	.e750		68		pla		                pla                          ;restore char to print
8372	.e751		48		pha		                pha                          ;save it again
8373	.e752		aa		tax		                tax                          ;X=char to print
8374	.e753		ad 34 fe	lda $fe34	                lda ACCCON                   ;
8375	.e756		48		pha		                pha                          ;S=[old ACCCON; ch; y; x; ch]
8376							                .if version==350
8378							                .else
8379	.e757		a9 08		lda #$08	                lda #ACCCON.Y
8380	.e759		1c 34 fe	trb $fe34	                trb ACCCON                   ;MOS ROM at $c000
8381							                .endif
8382	.e75c		a5 f4		lda $f4		                lda $F4
8383	.e75e		48		pha		                pha          ;S=[old ROMSEL; old ACCCON; ch; y; x; ch]
8384	.e75f		a9 8f		lda #$8f	                lda #$80|terminalROM
8385	.e761		85 f4		sta $f4		                sta $F4
8386	.e763		8d 30 fe	sta $fe30	                sta ROMSEL                   ;page in ANDY+Terminal
8387	.e766		8a		txa		                txa                          ;A=char to print
8388	.e767		20 27 c0	jsr $c027	                jsr outputToVDU
8389	.e76a		68		pla		                pla
8390	.e76b		85 f4		sta $f4		                sta $F4
8391	.e76d		8d 30 fe	sta $fe30	                sta ROMSEL
8392	.e770		68		pla		                pla
8393	.e771		29 08		and #$08	                and #ACCCON.Y
8394	.e773		0c 34 fe	tsb $fe34	                tsb ACCCON
8395	.e776		b0 07		bcs $e77f	                bcs LE869
8396	.e778						LE862:
8397	.e778		a9 08		lda #$08	                lda #$08
8398	.e77a		2c 7c 02	bit $027c	                bit characterDestinationStatus
8399	.e77d		f0 05		beq $e784	                beq LE86E
8400	.e77f						LE869:
8401	.e77f		68		pla		                pla
8402	.e780		48		pha		                pha
8403	.e781		20 9f e7	jsr $e79f	                jsr LE8AA
8404	.e784						LE86E:
8405							                .if version!=400
8427							                .endif

8429	.e784		a9 10		lda #$10	                lda #$10
8430	.e786		2c 7c 02	bit $027c	                bit characterDestinationStatus
8431	.e789		d0 0f		bne $e79a	                bne LE8A5
8432	.e78b		ac 57 02	ldy $0257	                ldy spoolFileHandle
8433	.e78e		f0 0a		beq $e79a	                beq LE8A5
8434	.e790		68		pla		                pla
8435	.e791		48		pha		                pha
8436	.e792		38		sec		                sec
8437	.e793		66 eb		ror $eb		                ror $EB
8438	.e795		20 d4 ff	jsr $ffd4	                jsr OSBPUT
8439	.e798		46 eb		lsr $eb		                lsr $EB
8440	.e79a						LE8A5:
8441	.e79a		68		pla		                pla
8442	.e79b		7a		ply		                ply
8443	.e79c		fa		plx		                plx
8444	.e79d		68		pla		                pla
8445	.e79e		60		rts		                rts

8447	.e79f						LE8AA:
8448	.e79f		2c 7c 02	bit $027c	                bit characterDestinationStatus
8449	.e7a2		70 25		bvs $e7c9	                bvs LE8D4
8450	.e7a4		cd 86 02	cmp $0286	                cmp printerIgnoreChar
8451	.e7a7		d0 05		bne $e7ae	                bne LE8B9
8452	.e7a9		2c 46 02	bit $0246	                bit noignoreState
8453	.e7ac		10 1b		bpl $e7c9	                bpl LE8D4
8454	.e7ae						LE8B9:
8455	.e7ae		08		php		                php
8456	.e7af		78		sei		                sei
8457	.e7b0		aa		tax		                tax
8458	.e7b1		a9 04		lda #$04	                lda #$04
8459	.e7b3		2c 7c 02	bit $027c	                bit characterDestinationStatus
8460	.e7b6		d0 10		bne $e7c8	                bne LE8D3
8461	.e7b8		8a		txa		                txa
8462	.e7b9		a2 03		ldx #$03	                ldx #$03
8463	.e7bb		20 4b e8	jsr $e84b	                jsr LE9A3
8464	.e7be		b0 08		bcs $e7c8	                bcs LE8D3
8465	.e7c0		2c d1 02	bit $02d1	                bit bufferEmptyFlags+bufferPrinter
8466	.e7c3		10 03		bpl $e7c8	                bpl LE8D3
8467	.e7c5		20 ca e7	jsr $e7ca	                jsr LE8D5
8468	.e7c8						LE8D3:
8469	.e7c8		28		plp		                plp
8470	.e7c9						LE8D4:
8471	.e7c9		60		rts		                rts

8473	.e7ca						LE8D5:                                       ;E7CA in MOS 4.00
8474	.e7ca		ad 85 02	lda $0285	                lda printerDriverType
8475							                .if version!=400
8528							                .else

8530	.e7cd		c9 03		cmp #$03	                cmp #printerDriverTypeUser
8531	.e7cf		90 30		bcc $e801	                bcc LE959

8533	.e7d1						writeACIAControlRegister:
8534	.e7d1						osbyte9C:
8535	.e7d1						setRS423Active:

8537							                .endif

8539							;-------------------------------------------------------------------------

8541	.e7d1						activatePrinterDriver:
8542	.e7d1		18		clc		                clc
8543	.e7d2		a9 01		lda #$01	                lda #printerDriverActivate
8544	.e7d4		20 e2 e7	jsr $e7e2	                jsr callPrinterDriverWithPrinterBuffer

8546							                ; printer driver will set C=0 if active, C=1 if
8547							                ; inactive.

8549							;-------------------------------------------------------------------------
8550							;
8551							; OSBYTE 123 (&7B) Inform MOS of printer driver going dormant [MasRef
8552							; D.2-36]
8553							;
8554	.e7d7						osbyte7B:
8555	.e7d7		6e d1 02	ror $02d1	                ror bufferEmptyFlags+bufferPrinter   ;C=1 on entry, so set bit 7
8556	.e7da						rtsE932:
8557	.e7da		60		rts		                rts

8559							;-------------------------------------------------------------------------

8561	.e7db						pollPrinterDriver:
8562	.e7db		2c d1 02	bit $02d1	                bit bufferEmptyFlags+bufferPrinter
8563	.e7de		30 fa		bmi $e7da	                bmi rtsE932           ;taken if printer driver dormant
8564	.e7e0		a9 00		lda #$00	                lda #printerDriverPoll
8565	.e7e2						callPrinterDriverWithPrinterBuffer:
8566	.e7e2		a2 03		ldx #$03	                ldx #bufferPrinter
8567	.e7e4						callPrinterDriver:
8568	.e7e4		ac 85 02	ldy $0285	                ldy printerDriverType
8569	.e7e7		20 95 e9	jsr $e995	                jsr callNETV
8570	.e7ea		6c 22 02	jmp ($0222)	                jmp (UPTV)

8572							;-------------------------------------------------------------------------
8573							;
8574							; OSBYTE 15 (&0F) Flush buffer
8575							;
8576	.e7ed						osbyte0F:
8577	.e7ed		d0 0f		bne $e7fe	                bne LE956
8578	.e7ef						LE947:
8579	.e7ef		a2 08		ldx #$08	                ldx #$08
8580	.e7f1						LE949:
8581	.e7f1		58		cli		                cli
8582	.e7f2		78		sei		                sei
8583	.e7f3		20 f9 e7	jsr $e7f9	                jsr osbyte15
8584	.e7f6		ca		dex		                dex
8585	.e7f7		10 f8		bpl $e7f1	                bpl LE949

8587							;-------------------------------------------------------------------------
8588							;
8589							; OSBYTE 21 (&15) Flush selected buffer
8590							;
8591	.e7f9						osbyte15:                                    ;e951
8592	.e7f9		e0 09		cpx #$09	                cpx #bufferMax+1
8593	.e7fb		90 04		bcc $e801	                bcc LE959
8594	.e7fd		60		rts		                rts

8596	.e7fe						LE956:
8597	.e7fe		ae 41 02	ldx $0241	                ldx inputSource
8598	.e801						LE959:
8599	.e801		18		clc		                clc
8600	.e802						LE95A:
8601	.e802		48		pha		                pha
8602	.e803		08		php		                php
8603	.e804		78		sei		                sei
8604	.e805		b0 08		bcs $e80f	                bcs LE967
8605	.e807		8a		txa		                txa
8606	.e808		29 04		and #$04	                and #$04                     ;buffer 4-7?
8607	.e80a		f0 03		beq $e80f	                beq LE967                    ;taken if not sound buffer
8608	.e80c		20 4c f3	jsr $f34c	                jsr clearSoundChannelBuffer
8609	.e80f						LE967:
8610	.e80f		38		sec		                sec
8611	.e810		7e ce 02	ror $02ce,x	                ror bufferEmptyFlags,x
8612	.e813		e0 02		cpx #$02	                cpx #bufferFirstOutput
8613	.e815		b0 06		bcs $e81d	                bcs LE975                    ;taken if output buffer
8614	.e817		9c 68 02	stz $0268	                stz softKeyStringLength
8615	.e81a		9c 6a 02	stz $026a	                stz vduQueueNegativeLength
8616	.e81d						LE975:
8617	.e81d		20 53 eb	jsr $eb53	                jsr purgeBufferViaCNPV
8618	.e820		28		plp		                plp
8619	.e821		68		pla		                pla
8620	.e822		60		rts		                rts

8622							;-------------------------------------------------------------------------
8623							;
8624							; Count/purge entry point [AUG p264]
8625							;
8626	.e823						cnpEntryPoint:
8627	.e823		50 07		bvc $e82c	                bvc countBuffer
8628	.e825						purgeBuffer:
8629	.e825		bd d7 02	lda $02d7,x	                lda bufferStartIndices,x
8630	.e828		9d e0 02	sta $02e0,x	                sta bufferEndIndices,x
8631	.e82b		60		rts		                rts

8633	.e82c						countBuffer:
8634	.e82c		08		php		                php
8635	.e82d		78		sei		                sei
8636	.e82e		08		php		                php
8637	.e82f		38		sec		                sec
8638	.e830		bd e0 02	lda $02e0,x	                lda bufferEndIndices,x
8639	.e833		fd d7 02	sbc $02d7,x	                sbc bufferStartIndices,x
8640	.e836		b0 04		bcs $e83c	                bcs LE994
8641	.e838		38		sec		                sec
8642	.e839		fd 83 e8	sbc $e883,x	                sbc bufferIndex0Offsets,x
8643	.e83c						LE994:
8644	.e83c		28		plp		                plp
8645	.e83d		90 06		bcc $e845	                bcc LE99D
8646	.e83f		18		clc		                clc
8647	.e840		7d 83 e8	adc $e883,x	                adc bufferIndex0Offsets,x
8648	.e843		49 ff		eor #$ff	                eor #$FF
8649	.e845						LE99D:
8650	.e845		a0 00		ldy #$00	                ldy #$00
8651	.e847		aa		tax		                tax
8652	.e848		28		plp		                plp
8653	.e849						rtsE9A1:
8654	.e849		60		rts		                rts

8656							;-------------------------------------------------------------------------

8658	.e84a						LE9A2:
8659	.e84a		58		cli		                cli
8660	.e84b						LE9A3:
8661	.e84b		78		sei		                sei
8662	.e84c						LE9A4:
8663	.e84c		20 e8 e8	jsr $e8e8	                jsr callINSV
8664	.e84f		90 f8		bcc $e849	                bcc rtsE9A1
8665	.e851		20 30 f0	jsr $f030	                jsr LF241
8666	.e854		48		pha		                pha
8667	.e855		20 24 f5	jsr $f524	                jsr updateKeyboardLEDs
8668	.e858		0a		asl a		                asl a
8669	.e859		68		pla		                pla
8670	.e85a		90 ee		bcc $e84a	                bcc LE9A2
8671	.e85c		60		rts		                rts

8673							;-------------------------------------------------------------------------
8674							;
8675							; OSBYTE $77
8676							;
8677							; D.2-33
8678							;
8679							                .if version!=350
8680	.e85d						osbyte77:                       ;e9b5
8681	.e85d		20 73 f1	jsr $f173	                jsr withTerminalROM
8682	.e860		4c b7 96	jmp $96b7	                jmp terminal.L9423
8683							                .endif

8685							;-------------------------------------------------------------------------
8686							;
8687							; Get *IGNORE CMOS byte offset and mask for a given ROM.
8688							;
8689							; entry:
8690							;
8691							; Y = ROM number
8692							;
8693							; exit:
8694							;
8695							; A = mask
8696							;
8697							; X = RTC address of byte
8698							;
8699	.e863						getROMInsertedFlagRTCAddressAndMask:
8700	.e863		a9 00		lda #$00	                lda #$00
8701	.e865		38		sec		                sec
8702	.e866		a2 14		ldx #$14	                ldx #CMOSBytes.insertedROMs+0+cmosBytesOffset
8703	.e868						-
8704	.e868		2a		rol a		                rol a
8705	.e869		d0 02		bne $e86d	                bne +
8706	.e86b		e8		inx		                inx
8707	.e86c		2a		rol a		                rol a
8708	.e86d						+
8709	.e86d		88		dey		                dey
8710	.e86e		10 f8		bpl $e868	                bpl -
8711	.e870		60		rts		                rts

8713							;-------------------------------------------------------------------------

8715	=[]						_:=[]
8716	=[($03e0,32)]					_..=[(bufferKeyboardAddress,bufferKeyboardSize)]
8717	=[($03e0,32),($0a00,256)]			_..=[(bufferRS423InputAddress,bufferRS423InputSize)]
8718	=[($03e0,32),($0a00,256),($0900,192)]		_..=[(bufferRS423OutputAddress,bufferRS423OutputSize)]
8719	=[($03e0,32),($0a00,256),($0900,192),($0880,64)]
							_..=[(bufferPrinterAddress,bufferPrinterSize)]
8720	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16)]
							_..=[(bufferSoundChannel0Address,bufferSoundChannel0Size)]
8721	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16)]
							_..=[(bufferSoundChannel1Address,bufferSoundChannel1Size)]
8722	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16)]
							_..=[(bufferSoundChannel2Address,bufferSoundChannel2Size)]
8723	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16),($0870,16)]
							_..=[(bufferSoundChannel3Address,bufferSoundChannel3Size)]
8724	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16),($0870,16),($09c0,64)]
							_..=[(buffer8Address,buffer8Size)]
8725	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16),($0870,16),($09c0,64)]
							buffers=_

8727							BufferTableIndex0Offset: .function buffer
8728							                .endfunction 256-buffer[1]

8730							BufferTableBase: .function buffer
8731							                .endfunction buffer[0]-BufferTableIndex0Offset(buffer)

8733							;-------------------------------------------------------------------------
8734							;
8735							; Buffer base addresses - each buffer's address, offset by the offset
8736							; for index 0 (see bufferIndex0Offsets).
8737							;
8738	.e871						bufferBaseAddressMSBs:
8739							                .for i=0,i<len(buffers),i+=1
8740	>e871		03				                .byte >BufferTableBase(buffers[i])
8740	>e872		0a				                .byte >BufferTableBase(buffers[i])
8740	>e873		08				                .byte >BufferTableBase(buffers[i])
8740	>e874		07				                .byte >BufferTableBase(buffers[i])
8740	>e875		07				                .byte >BufferTableBase(buffers[i])
8740	>e876		07				                .byte >BufferTableBase(buffers[i])
8740	>e877		07				                .byte >BufferTableBase(buffers[i])
8740	>e878		07				                .byte >BufferTableBase(buffers[i])
8740	>e879		09				                .byte >BufferTableBase(buffers[i])
8741							                .endfor

8743	.e87a						bufferBaseAddressLSBs:
8744							                .for i=0,i<len(buffers),i+=1
8745	>e87a		00				                .byte <BufferTableBase(buffers[i])
8745	>e87b		00				                .byte <BufferTableBase(buffers[i])
8745	>e87c		c0				                .byte <BufferTableBase(buffers[i])
8745	>e87d		c0				                .byte <BufferTableBase(buffers[i])
8745	>e87e		50				                .byte <BufferTableBase(buffers[i])
8745	>e87f		60				                .byte <BufferTableBase(buffers[i])
8745	>e880		70				                .byte <BufferTableBase(buffers[i])
8745	>e881		80				                .byte <BufferTableBase(buffers[i])
8745	>e882		00				                .byte <BufferTableBase(buffers[i])
8746							                .endfor

8748							;-------------------------------------------------------------------------

8750							; Offset of buffer index 0 for each buffer. Index 0 is (-buffer size)
8751							; - buffer indexes count up, and wrap once they reach 0.

8753	.e883						bufferIndex0Offsets:
8754							                .for i=0,i<len(buffers),i+=1
8755	>e883		e0				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e884		00				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e885		40				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e886		c0				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e887		f0				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e888		f0				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e889		f0				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e88a		f0				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e88b		c0				                .byte BufferTableIndex0Offset(buffers[i])
8756							                .endfor

8758							;-------------------------------------------------------------------------
8759							;
8760							; Get base address for a buffer.
8761							;
8762							; entry:
8763							;
8764							; X = buffer number
8765							;
8766							; exit:
8767							;
8768							; (SEIWKA) = buffer base address
8769							;
8770	.e88c						getBufferBaseAddress:
8771	.e88c		bd 7a e8	lda $e87a,x	                lda bufferBaseAddressLSBs,x
8772	.e88f		85 fa		sta $fa		                sta SEIWKA
8773	.e891		bd 71 e8	lda $e871,x	                lda bufferBaseAddressMSBs,x
8774	.e894		85 fb		sta $fb		                sta SEIWKB
8775	.e896		60		rts		                rts

8777							;-------------------------------------------------------------------------
8778							;
8779							; OSBYTE 152 (&98) Examine buffer status [MasRef D.2-45]
8780							;
8781	.e897						osbyte98:
8782	.e897		2c 5e e3	bit $e35e	                bit valueFF                  ;V=1
8783	.e89a		80 01		bra $e89d	                bra callREMV

8785							;-------------------------------------------------------------------------
8786							;
8787							; OSBYTE 145 (&91) Get character from buffer [MasRef D.2-45]
8788							;
8789							; X = buffer number
8790	.e89c						osbyte91:
8791	.e89c		b8		clv		                clv                          ;remove
8792	.e89d						callREMV:
8793	.e89d		6c 2c 02	jmp ($022c)	                jmp (REMV)

8795							;-------------------------------------------------------------------------
8796							;
8797							; Buffer remove entry point. [AUG p263]
8798							;
8799							; Even in remove mode, A is the character removed on exit. Some of the
8800							; other MOS routines rely on this.
8801							;
8802	.e8a0						remEntryPoint:
8803	.e8a0		08		php		                php
8804	.e8a1		78		sei		                sei
8805	.e8a2		bd d7 02	lda $02d7,x	                lda bufferStartIndices,x
8806	.e8a5		dd e0 02	cmp $02e0,x	                cmp bufferEndIndices,x
8807	.e8a8		f0 6c		beq $e916	                beq plp_sec_rts  ;taken if buffer empty
8808	.e8aa		a8		tay		                tay                          ;Y=start index
8809	.e8ab		20 8c e8	jsr $e88c	                jsr getBufferBaseAddress
8810	.e8ae		b1 fa		lda ($fa),y	                lda (SEIWKA),y               ;get byte from buffer
8811	.e8b0		70 1a		bvs $e8cc	                bvs tay_plp_clc_rts                  ;taken if only looking
8812	.e8b2		48		pha		                pha                          ;save buffered byte
8813	.e8b3		c8		iny		                iny                          ;next char in buffer
8814	.e8b4		98		tya		                tya                          ;set Z if wrap
8815	.e8b5		d0 03		bne $e8ba	                bne +                        ;branch taken if no wrap
8816	.e8b7		bd 83 e8	lda $e883,x	                lda bufferIndex0Offsets,x    ;reset index on wrap
8817	.e8ba						+
8818	.e8ba		9d d7 02	sta $02d7,x	                sta bufferStartIndices,x

8820							                ; Issue output buffer empty event when appropriate.
8821	.e8bd		e0 02		cpx #$02	                cpx #bufferFirstOutput
8822	.e8bf		90 0a		bcc $e8cb	                bcc pla_tay_plp_clc_rts ;taken if keyboard or RS423
8823							                                        ;input - i.e., buffer is input
8824	.e8c1		dd e0 02	cmp $02e0,x	                cmp bufferEndIndices,x       ;buffer now empty?
8825	.e8c4		d0 05		bne $e8cb	                bne pla_tay_plp_clc_rts           ;taken if not empty
8826	.e8c6		a0 00		ldy #$00	                ldy #eventOutputBufferEmpty
8827	.e8c8		20 d0 e8	jsr $e8d0	                jsr eventEntryPoint
8828	.e8cb						pla_tay_plp_clc_rts:
8829	.e8cb		68		pla		                pla                          ;restore buffered byte
8830	.e8cc						tay_plp_clc_rts:
8831	.e8cc		a8		tay		                tay                          ;Y=buffered byte
8832	.e8cd						plp_clc_rts:
8833	.e8cd		28		plp		                plp
8834	.e8ce		18		clc		                clc
8835	.e8cf		60		rts		                rts

8837							;-------------------------------------------------------------------------
8838							;
8839							; [MasRef D.9-1]
8840							;
8841	.e8d0						eventEntryPoint:
8842	.e8d0		08		php		                php
8843	.e8d1		78		sei		                sei
8844	.e8d2		48		pha		                pha
8845	.e8d3		b9 bf 02	lda $02bf,y	                lda eventEnabledFlags,y      ;is the event enabled?
8846	.e8d6		f0 3d		beq $e915	                beq pla_plp_sec_rts                    ;
8847	.e8d8		98		tya		                tya
8848	.e8d9		7a		ply		                ply
8849	.e8da		5a		phy		                phy
8850	.e8db		20 ae f6	jsr $f6ae	                jsr LF8BF
8851	.e8de		80 eb		bra $e8cb	                bra pla_tay_plp_clc_rts

8853							;-------------------------------------------------------------------------
8854							;
8855							; Insert character into buffer and issue an event for it.
8856							;
8857							; entry:
8858							;
8859							; Y = buffer number
8860							;
8861	.e8e0						insertCharacterIntoBuffer:
8862	.e8e0		98		tya		                tya
8863	.e8e1		a0 02		ldy #$02	                ldy #eventCharacterEnteringBuffer
8864	.e8e3		20 d0 e8	jsr $e8d0	                jsr eventEntryPoint
8865	.e8e6		a8		tay		                tay

8867							;-------------------------------------------------------------------------
8868							;
8869							; OSBYTE 138 (&8A) Insert character code into buffer [MasRef D.2-43]
8870							;
8871	.e8e7						osbyte8A:
8872	.e8e7		98		tya		                tya
8873	.e8e8						callINSV:
8874	.e8e8		6c 2a 02	jmp ($022a)	                jmp (INSV)

8876							;-------------------------------------------------------------------------
8877							;
8878							; Default INSV entry point [AUG p263]
8879							;
8880	.e8eb						insEntryPoint:
8881	.e8eb		08		php		                php
8882	.e8ec		78		sei		                sei
8883	.e8ed		48		pha		                pha                          ;save value to insert
8884	.e8ee		bd e0 02	lda $02e0,x	                lda bufferEndIndices,x       ;get buffer index
8885	.e8f1		1a		inc a		                inc a                        ;bump index
8886	.e8f2		d0 03		bne $e8f7	                bne +          ;taken if index hasn't wrapped around
8887	.e8f4		bd 83 e8	lda $e883,x	                lda bufferIndex0Offsets,x        ;reset index due to wrap
8888	.e8f7						+
8889	.e8f7		dd d7 02	cmp $02d7,x	                cmp bufferStartIndices,x     ;are we at the start index?
8890	.e8fa		f0 0e		beq $e90a	                beq bufferFull       ;taken if yes - i.e., buffer full
8891	.e8fc		bc e0 02	ldy $02e0,x	                ldy bufferEndIndices,x       ;note old buffer end
8892	.e8ff		9d e0 02	sta $02e0,x	                sta bufferEndIndices,x       ;update buffer end
8893	.e902		20 8c e8	jsr $e88c	                jsr getBufferBaseAddress
8894	.e905		68		pla		                pla                          ;restore value to insert
8895	.e906		91 fa		sta ($fa),y	                sta (SEIWKA),y               ;store byte in buffer
8896	.e908		80 c3		bra $e8cd	                bra plp_clc_rts              ;done

8898	.e90a						bufferFull
8899							                ; Issue input buffer full event when appropriate.
8900	.e90a		68		pla		                pla
8901	.e90b		e0 02		cpx #$02	                cpx #bufferFirstOutput
8902	.e90d		b0 07		bcs $e916	                bcs plp_sec_rts  ;taken if output buffer
8903	.e90f		a0 01		ldy #$01	                ldy #eventInputBufferFull
8904	.e911		20 d0 e8	jsr $e8d0	                jsr eventEntryPoint
8905	.e914		48		pha		                pha
8906	.e915						pla_plp_sec_rts:
8907	.e915		68		pla		                pla
8908	.e916						plp_sec_rts:
8909	.e916		28		plp		                plp
8910	.e917		38		sec		                sec
8911	.e918		60		rts		                rts

8913							;-------------------------------------------------------------------------
8914							;
8915							; Check if character is a letter - A-Z or a-z.
8916							;
8917							; Entry:
8918							;
8919							; A = character to test
8920							;
8921							; Exit:
8922							;
8923							; C=0 if character is letter, C=1 otherwise
8924							;
8925							; Preserves: A/X/Y
8926	.e919						isLetter: .proc                 ;EA71
8927	.e919		48		pha		                pha
8928	.e91a		29 df		and #$df	                and #$DF        ;convert to upper case
8929	.e91c		c9 5b		cmp #$5b	                cmp #'Z'+1
8930	.e91e		b0 04		bcs $e924	                bcs +           ;branch taken with C=1 if past Z
8931	.e920		49 ff		eor #$ff	                eor #$FF
8932	.e922		c9 bf		cmp #$bf	                cmp #-'A'       ;C=1 if past A
8933	.e924						+
8934	.e924		68		pla		                pla
8935	.e925		60		rts		                rts
8936							                .pend

8938							;-------------------------------------------------------------------------
8939							;
8940							; OSBYTE 153 (&99) Insert character code into buffer, checking for
8941							; ESCAPE [MasRef D.2-46]
8942							;
8943	.e926						insertCharacterIntoKeyboardBuffer:
8944							                .if version==350
8947							                .endif
8948	.e926		a2 00		ldx #$00	                ldx #$00
8949	.e928						osbyte99:
8950							                .if version!=400
8954							                .endif
8955	.e928		98		tya		                tya          ;A=char
8956	.e929		4d 6c 02	eor $026c	                eor escapeCharacter
8957	.e92c		0d 75 02	ora $0275	                ora escapeKeyStatus
8958	.e92f		d0 af		bne $e8e0	                bne insertCharacterIntoBuffer
8959	.e931		ad 58 02	lda $0258	                lda breakAndESCAPEEffect
8960	.e934		6a		ror a		                ror a                        ;C=0 if normal ESCAPE action
8961	.e935		98		tya		                tya                          ;A=char
8962	.e936		b0 0a		bcs $e942	                bcs osbyte99Done             ;taken if ESCAPE inhibited
8963	.e938		a0 06		ldy #$06	                ldy #eventESCAPEPressed
8964	.e93a		20 d0 e8	jsr $e8d0	                jsr eventEntryPoint
8965	.e93d		90 03		bcc $e942	                bcc osbyte99Done             ;taken if event handled
8966	.e93f		20 ea ea	jsr $eaea	                jsr osbyte7D
8967	.e942						osbyte99Done:
8968	.e942		18		clc		                clc
8969	.e943		60		rts		                rts

8971							;-------------------------------------------------------------------------

8973							; A = 0 (edit keys)/1 (ascii keys)/2 (F keys)
8974	.e944						handleCursorKeysAndCopy:
8975							                .if version<500
8976	.e944		6a		ror a		                ror a                        ;test edit keys mode bit 0
8977	.e945		68		pla		                pla                          ;restore translated value
8978	.e946		b0 17		bcs $e95f	                bcs clc_rts_EABD       ;taken if value was asciiKeys
8983							                .endif

8985	.e948						handleFunctionKey:
8986	.e948		98		tya		                tya
8987							                .if version<500&&version!=350
8988	.e949		29 0f		and #$0f	                and #$0F
8989							                .endif
8990							                .if version==350
8993							                .else
8994	.e94b		48		pha		                pha
8995	.e94c		98		tya		                tya
8996	.e94d		4a		lsr a		                lsr a
8997	.e94e		4a		lsr a		                lsr a
8998	.e94f		4a		lsr a		                lsr a
8999	.e950		4a		lsr a		                lsr a
9000							                .endif
9001	.e951		49 04		eor #$04	                eor #$04
9002	.e953		a8		tay		                tay
9003	.e954		b9 65 02	lda $0265,y	                lda input192To207Interpretation-8,y
9004	.e957		4a		lsr a		                lsr a
9005							                .if version<500&&version!=350
9006	.e958		f0 63		beq $e9bd	                beq LEB32
9007	.e95a		68		pla		                pla
9008	.e95b		18		clc		                clc
9009	.e95c		79 65 02	adc $0265,y	                adc input192To207Interpretation-8,y
9030							                .endif

9032	.e95f						clc_rts_EABD:
9033	.e95f		18		clc		                clc
9034	.e960		60		rts		                rts

9036							;-------------------------------------------------------------------------

9038	.e961						copyCharNotRecognised:
9039	.e961		20 ae ed	jsr $edae	                jsr vdu7EntryPoint           ;beep
9040	.e964		fa		plx		                plx
9041	.e965						readFromInputBufferX:
9042	.e965		20 9c e8	jsr $e89c	                jsr osbyte91          ;extract character from buffer X
9043							                .if version<500&&version!=350
9044	.e968		b0 49		bcs $e9b3	                bcs rtsEB28           ;taken if buffer empty
9074							                .endif

9076							                .if version>=511||version==350
9079							                .endif

9081							                .if version!=400
9095							                .endif

9097	.e96a						LEADB:
9098	.e96a		a8		tay		                tay                          ;Y = char
9099	.e96b		10 45		bpl $e9b2	                bpl clc_rts_EB27             ;if normal char, all good
9100	.e96d		29 0f		and #$0f	                and #$0F
9101	.e96f		c9 0b		cmp #$0b	                cmp #$0B
9102	.e971		90 d5		bcc $e948	                bcc handleFunctionKey        ;taken if F key
9103	.e973		69 7b		adc #$7b	                adc #$7B    ;C=1, so +$7c - convert $0b-0$f to $87-$8B
9104	.e975		48		pha		                pha         ;save translated value
9105	.e976		ad 7d 02	lda $027d	                lda editKeysMode
9106	.e979		d0 c9		bne $e944	                bne handleCursorKeysAndCopy  ;taken if not editKeys
9107	.e97b		ad 7c 02	lda $027c	                lda characterDestinationStatus
9108	.e97e		6a		ror a		                ror a                        ;C=rs423_enable
9109	.e97f		6a		ror a		                ror a                        ;C=vdu_disable
9110	.e980		68		pla		                pla                          ;restore translated value
9111	.e981		b0 e2		bcs $e965	                bcs readFromInputBufferX     ;taken if VDU output disabled
9112	.e983		c9 87		cmp #$87	                cmp #$87                     ;COPY?
9113	.e985		f0 2d		beq $e9b4	                beq readCopyChar
9114	.e987		da		phx		                phx                          ;save buffer number
9115	.e988		20 e8 e9	jsr $e9e8	                jsr handleCursorKeyThunk     ;handle cursor key
9116	.e98b		fa		plx		                plx
9117	.e98c						readFromEconetOrSoftKeyOrInputBufferA:
9118							                .if version==400
9119	.e98c		a2 00		ldx #$00	                ldx #0
9120							                .endif
9121	.e98e		2c 5f 02	bit $025f	                bit econetInputInterpretationStatus
9122	.e991		10 05		bpl $e998	                bpl readFromSoftKeyOrInputBufferA
9123	.e993		a9 06		lda #$06	                lda #netReadCharacterAttempted
9124	.e995						callNETV:
9125	.e995		6c 24 02	jmp ($0224)	                jmp (NETV)

9127	.e998						readFromSoftKeyOrInputBufferA:
9128	.e998		ad 68 02	lda $0268	                lda softKeyStringLength
9129	.e99b		f0 c8		beq $e965	                beq readFromInputBufferX
9130							                .if version>=500||version==350
9137							                .endif
9138							                .if version!=400
9142							                .endif
9143	.e99d		a5 f4		lda $f4		                lda $F4
9144	.e99f		48		pha		                pha
9145	.e9a0		20 a5 e5	jsr $e5a5	                jsr selectTerminalROMAndANDY2
9146	.e9a3		b2 f8		lda ($f8)	                lda (softKeyExpansionPtr)
9147	.e9a5		fa		plx		                plx
9148	.e9a6		20 8e e5	jsr $e58e	                jsr selectROMX
9149	.e9a9		ce 68 02	dec $0268	                dec softKeyStringLength
9150	.e9ac		e6 f8		inc $f8		                inc softKeyExpansionPtr+0
9151	.e9ae		d0 02		bne $e9b2	                bne clc_rts_EB27
9152	.e9b0		e6 f9		inc $f9		                inc softKeyExpansionPtr+1
9153	.e9b2						clc_rts_EB27:
9154	.e9b2		18		clc		                clc
9155	.e9b3						rtsEB28:
9156	.e9b3		60		rts		                rts

9158	.e9b4						readCopyChar:
9159	.e9b4		da		phx		                phx
9160	.e9b5		20 ee e9	jsr $e9ee	                jsr handleCopyKeyThunk
9161							                .if version<500&&version!=350
9162	.e9b8		f0 a7		beq $e961	                beq copyCharNotRecognised
9167							                .endif
9168	.e9ba		fa		plx		                plx
9169	.e9bb		18		clc		                clc
9170	.e9bc						rtsEB31:
9171	.e9bc		60		rts		                rts

9173							                .if version>=500||version==350
9184							                .elsif version<500

9186	.e9bd						LEB32:
9187	.e9bd		7a		ply		                ply
9188	.e9be		90 a5		bcc $e965	                bcc readFromInputBufferX
9189	.e9c0		98		tya		                tya
9190	.e9c1		8d c9 02	sta $02c9	                sta currentSoftKey

9192							                .endif

9194	.e9c4		a5 f4		lda $f4		                lda $F4
9195	.e9c6		48		pha		                pha                           ;save old ROMSEL
9196	.e9c7		20 a5 e5	jsr $e5a5	                jsr selectTerminalROMAndANDY2
9197	.e9ca		20 e0 e9	jsr $e9e0	                jsr getSoftKeyStringLength
9198	.e9cd		8d 68 02	sta $0268	                sta softKeyStringLength
9199	.e9d0		b9 00 80	lda $8000,y	                lda andy.softKeys.stringLSBs,y
9200	.e9d3		85 f8		sta $f8		                sta softKeyExpansionPtr+0
9201	.e9d5		b9 11 80	lda $8011,y	                lda andy.softKeys.stringMSBs,y
9202	.e9d8		85 f9		sta $f9		                sta softKeyExpansionPtr+1
9203	.e9da		68		pla		                pla
9204	.e9db		20 9f e5	jsr $e59f	                jsr selectROMA               ;restore old ROMSEL
9205	.e9de		80 ac		bra $e98c	                bra readFromEconetOrSoftKeyOrInputBufferA

9207							;-------------------------------------------------------------------------

9209	.e9e0						getSoftKeyStringLength:
9210	.e9e0		b9 01 80	lda $8001,y	                lda andy.softKeys.stringLSBs+1,y
9211	.e9e3		38		sec		                sec
9212	.e9e4		f9 00 80	sbc $8000,y	                sbc andy.softKeys.stringLSBs+0,y
9213	.e9e7		60		rts		                rts

9215							;-------------------------------------------------------------------------
9216							;
9217							; Page HAZEL out, page MOS in, call handleCursorKey.
9218							;
9219	.e9e8						handleCursorKeyThunk:
9220	.e9e8		20 9a f1	jsr $f19a	                jsr withMOSROM
9221	.e9eb		4c 76 df	jmp $df76	                jmp handleCursorKey

9223							;-------------------------------------------------------------------------
9224							;
9225							; Page HAZEL out, page MOS in, call handleCopyKey.
9226							;
9227	.e9ee						handleCopyKeyThunk:
9228	.e9ee		20 9a f1	jsr $f19a	                jsr withMOSROM
9229	.e9f1		4c 5c df	jmp $df5c	                jmp handleCopyKey

9231							;-------------------------------------------------------------------------

9233							                .if version==350&&!finmos329
9241							                .endif

9243							;-------------------------------------------------------------------------

9245							                .if version<500&&version!=350
9246							                .include "osbyte_osword_table.s65"

:15	;******  Processing file: src/osbyte_osword_table.s65

1							; OSBYTE Dispatch Table
2							; =====================

4							; TODO structure probably the same as
5							; https://tobylobster.github.io/mos/mos/S-s15.html#SP1...

7							; entry:
8							;
9							; A = OSBYTE A
10							;
11							; X = OSBYTE X
12							;
13							; Y = OSBYTE Y
14							;
15							; ?originalA, ?originalX, ?originalY = OSBYTE arguments
16							;
17							; C=1
18							;
19							; N/Z set as per X
20							;

22	.e9f4						osbyteAndOSWORDRoutineTable:
23							                ;Display MOS version D.2-18
24	>e9f4		66 ed				                .word mos.osbyte00

26							                ;Write user flag D.2-18
27	>e9f6		c6 ee				                .word mos.osbyte01

29							                ;Specify input stream D.2-18
30							                .if version==400
31	>e9f8		85 eb				                .word mos.osbyteUnused
34							                .endif

36							                ;Specify output stream D.2-19
37	>e9fa		9b ee				                .word mos.osbyte03

39							                ;Enable/disable cursor editing
40	>e9fc		ce ee				                .word mos.osbyte04

42							                ;Write printer driver type D.2-20
43	>e9fe		b4 ee				                .word mos.osbyte05

45							                ;Write printer ignore character D.2-21
46	>ea00		ab ee				                .word mos.osbyte06

48							                ;Write RS423 receive rate D.2-21
49							                .if version==400
50	>ea02		85 eb				                .word mos.osbyteUnused
53							                .endif

55							                ;Write RS423 transmit rate D.2-22
56							                .if version==400
57	>ea04		85 eb				                .word mos.osbyteUnused
60							                .endif

62							                ;Write duration of first colour D.2-22
63	>ea06		f4 ea				                .word mos.osbyte09

65							                ;Write duration of second colour D.2-22
66	>ea08		f6 ea				                .word mos.osbyte0A

68							                ;Write keyboard auto-repeat delay D.2-22
69	>ea0a		cc ee				                .word mos.osbyte0B

71							                ;Write keyboard auto-repeat rate D.2-23
72	>ea0c		ca ee				                .word mos.osbyte0C

74							                ;Disable event D.2-23
75	>ea0e		16 eb				                .word mos.osbyte0D

77							                ;Enable event D.2-24
78	>ea10		17 eb				                .word mos.osbyte0E

80							                ;Flush buffer D.2-24
81	>ea12		ed e7				                .word mos.osbyte0F

83							                ;Write number of ADC channels D.2-25
84							                .if version==400
85	>ea14		85 eb				                .word mos.osbyteUnused
88							                .endif

90							                ;Write next ADC channel to be sampled D.2-25
91							                .if version==400
92	>ea16		85 eb				                .word mos.osbyteUnused
95							                .endif

97							                ;Reset soft keys D.2-26
98	>ea18		09 ef				                .word mos.osbyte12

100							                ;Wait for vertical sync D.2-26
101	>ea1a		e4 ee				                .word mos.osbyte13

103							                ;Restore default font definitions D.2-26
104	>ea1c		0b f0				                .word osbyte14

106							                ;Flush selected buffer D.2-27
107	>ea1e		f9 e7				                .word mos.osbyte15

109							                ;Increment ROM polling semaphore D.2-27
110	>ea20		17 f0				                .word mos.osbyte16

112							                ;Decrement ROM polling semaphore D.2-27
113	>ea22		1b f0				                .word mos.osbyte17

115							                ; Reserved
116	>ea24		85 eb				                .word mos.osbyteUnused

118							                ;Restore a group of font definitions D.2-28
119	>ea26		11 f0				                .word mos.osbyte19

121							                ; Not sure...
122							                .if version==350
124							                .elsif version>=400
125	>ea28		6a f8				                .word mos.LF8EA
126							                .endif

128							                ; Not sure...
129							                .if version==350
131							                .elsif version>=400
132	>ea2a		70 f8				                .word mos.LF8F0
133							                .endif

135							                ;Write 1MHz bus selection status D.2-29
136	>ea2c		7e ec				                .word mos.osbyte6B

138							                ;Write usage of main/shadow memory D.2-30
139	>ea2e		82 ec				                .word mos.osbyte6C

141							                ;Make temporary Filing System permanent D.2-30
142	>ea30		fe ef				                .word mos.osbyte6D

144							                ;Unused
145	>ea32		85 eb				                .word mos.osbyteUnused

147							                ;Unused
148	>ea34		85 eb				                .word mos.osbyteUnused

150							                ;Select main/shadow memory for VDU access D.2-31
151	>ea36		59 eb				                .word mos.osbyte70

153							                ;Select main/shadow memory for display D.2-31
154	>ea38		69 eb				                .word mos.osbyte71

156							                ;Write usage of shadow memory D.2-31
157	>ea3a		b0 ee				                .word mos.osbyte72

159							                ;Unused
160	>ea3c		aa ff				                .word mos.rtsFFAA

162							                ;Unused
163	>ea3e		aa ff				                .word mos.rtsFFAA

165							                ;Read VDU status D.2-32
166	>ea40		ab ed				                .word mos.osbyte75

168							                ;Reflect keyboard status in keyboard LEDs D.2-33
169	>ea42		1f f0				                .word mos.osbyte76

171							                ;Close all *SPOOL/*SPOOLON or *EXEC files D.2-33
172							                .if version==350
174							                .else
175	>ea44		5d e8				                .word mos.osbyte77
176							                .endif

178							                ;Write keys pressed information D.2-33
179	>ea46		fa f6				                .word mos.osbyte78

181							                ;Keyboard scan D.2-33
182	>ea48		f1 f6				                .word mos.callKEYV

184							                ;Keyboard scan from 16 decimal
185	>ea4a		ff f6				                .word mos.osbyte7A

187							                ;Inform MOS of printer driver going dormant
188	>ea4c		d7 e7				                .word mos.osbyte7B

190							                ;Clear escape condition
191	>ea4e		e9 ea				                .word mos.osbyte7C

193							                ;Set escape condition
194	>ea50		ea ea				                .word mos.osbyte7D

196							                ;Acknowledge escape condition
197	>ea52		cf ea				                .word mos.osbyte7E

199							                ;Check for end of file on an opened file
200	>ea54		d2 ef				                .word mos.osbyte7F

202							                ;Read ADC channel or get buffer status
203							                .if version==400
204	>ea56		48 eb				                .word mos.LED18
207							                .endif

209							                ;Read key with time limit
210	>ea58		24 eb				                .word mos.osbyte81

212							                ;Read machine high order address
213	>ea5a		3b eb				                .word mos.osbyte82

215							                ;Read Operating System High Water Mark (OSHWM)
216	>ea5c		f4 f6				                .word mos.osbyte83

218							                ;Read top of user RAM
219	>ea5e		a9 ef				                .word mos.osbyte84

221							                ;Read top of user RAM for given mode
222	>ea60		bf ef				                .word mos.osbyte85

224							                ;Read text cursor position
225	>ea62		67 e2				                .word mos.osbyte86

227							                ;Read screen mode and character at text cursor position
228	>ea64		cb ef				                .word mos.osbyte87

230							                ;Execute user code
231	>ea66		ca ea				                .word mos.osbyte88

233							                .if version<400
235							                .elsif version<500
236	>ea68		23 eb				                .word LECD9
239							                .endif

241							                ;Insert character code into buffer
242	>ea6a		e7 e8				                .word mos.osbyte8A

244							                ;Write Filing System options
245	>ea6c		d1 ef				                .word mos.osbyte8B

247							                .if version<400
249							                .else
250	>ea6e		85 eb				                .word mos.osbyteUnused
251							                .endif


254							                ;Select ROM Filing System
255	>ea70		99 eb				                .word mos.osbyte8C8D

257							                ;Enter language ROM
258	>ea72		d0 e4				                .word mos.osbyte8E

260							                ;Issue paged ROM service request
261	>ea74		e3 eb				                .word mos.osbyte8F

263							                ;Set vertical screen shift and interlace option
264	>ea76		42 f1				                .word mos.osbyte90

266							                ;Get character from buffer
267	>ea78		9c e8				                .word mos.osbyte91

269							                ;Read from FRED (&FC00 â<80><93> &FCFF)
270	>ea7a		8d f6				                .word mos.osbyte92

272							                ;Write to FRED (&FC00 â<80><93> &FCFF)
273	>ea7c		5d f1				                .word mos.osbyte93

275							                ;Read from JIM (&FD00 - &FDFF)
276	>ea7e		9d f6				                .word mos.osbyte94

278							                ;Write to JIM (&FD00 - &FDFF)
279	>ea80		53 f1				                .word mos.osbyte95

281							                ;Read from SHEILA (&FE00 - &FEFF)
282	>ea82		ab ff				                .word mos.osbyte96

284							                ;Write to SHEILA (&FE00 - &FEFF)
285	>ea84		58 f1				                .word mos.osbyte97

287							                ;Examine buffer status
288	>ea86		97 e8				                .word mos.osbyte98

290							                ;Insert character code into buffer checking for escape
291							                .if version==400
292	>ea88		26 e9				                .word mos.insertCharacterIntoKeyboardBuffer
295							                .endif

297							                ;Write video ULA control register
298	>ea8a		3e f0				                .word mos.osbyte9A

300							                ;Write to video ULA palette register and copy
301	>ea8c		4f f0				                .word mos.osbyte9B

303							                ;Read/write serial ACIA control register and copy
304							                .if version==400
305	>ea8e		85 eb				                .word mos.osbyteUnused
308							                .endif

310							                ;Write byte across Tube
311	>ea90		af ff				                .word mos.osbyte9D

313							                ;reserved for the speech system
314	>ea92		85 eb				                .word mos.osbyteUnused

316							                ;reserved for the speech system
317	>ea94		85 eb				                .word mos.osbyteUnused

319							                ;Read VDU variable value
320	>ea96		ee ee				                .word mos.osbyteA0

322							                ;Read CMOS RAM
323							                .if version==350
325							                .else
326	>ea98		8d eb				                .word mos.osbyteA1
327							                .endif

329							                ;Write CMOS RAM
330							                .if version==350
332							                .else
333	>ea9a		93 eb				                .word mos.osbyteA2
334							                .endif

336							                ;reserved for applications software
337	>ea9c		85 eb				                .word mos.osbyteUnused

339							                ;Check processor type
340	>ea9e		54 e5				                .word mos.osbyteA4

342							                ;Read output cursor position
343	>eaa0		3b e2				                .word mos.osbyteA5

345							                ;handle osbyte A6-FF
346	>eaa2		d3 ee				                .word mos.osbyteA6

348							                ;*LINE - not part of the above table???
349	>eaa4		cc ea				                .word mos.callUSERV

351							;-------------------------------------------------------------------------
352							;
353							; OSWORD dispatch table. Must follow on from the OSBYTE table.
354							;
355							; entry:
356							;
357							; A = 0th byte of parameter block
358							;
359							; X = OSWORD X
360							;
361							; Y = 0
362							;
363							; ?originalA, ?originalX, ?originalY = OSWORD arguments
364							;
365							; C=1
366							;
367							; N/Z set as per X
368							;
369	.eaa6						oswordRoutineTable:

371							;Read line from input stream to memory
372	>eaa6		27 ee				                .word mos.osword00

374							                ;Read system clock
375	>eaa8		fa ed				                .word mos.osword01

377							                ;Write system clock
378	>eaaa		0d ee				                .word mos.osword02

380							                ;Read interval timer
381	>eaac		f6 ed				                .word mos.osword03

383							                ;Write interval timer
384	>eaae		09 ee				                .word mos.osword04

386							                ;Read byte from I/O processor memory
387	>eab0		52 ed				                .word mos.osword05

389							                ;Write byte to I/O processor memory
390	>eab2		91 ec				                .word mos.osword06

392							                ;Generate a sound
393	>eab4		73 ed				                .word mos.osword07

395							                ;Define a sound envelope
396	>eab6		d4 ed				                .word mos.osword08

398							                ;Read pixel logical colour
399	>eab8		3f ef				                .word mos.osword09

401							                ;Read a character definition
402	>eaba		64 ef				                .word mos.osword0A

404							                ;Read the palette
405	>eabc		2e ef				                .word mos.osword0B

407							                ;Write the palette
408	>eabe		7c ef				                .word mos.osword0C

410							                ;Read current and previous graphics cursor positions
411	>eac0		8a ef				                .word mos.osword0D

413							                ;Read CMOS clock
414	>eac2		af ec				                .word mos.osword0E

416							                ;Write CMOS clock
417							                .if version==350
419							                .else
420	>eac4		d7 ef				                .word mos.osword0F
421							                .endif

423							                .if version==350
425							                .elsif version>=400
426	>eac6		76 f8				                .word mos.osword10
427							                .endif

429							                .if version==350
431							                .elsif version>=400
432	>eac8		7c f8				                .word mos.osword11
433							                .endif


:13	;******  Return to file: src/mos.s65

9247							                .endif

9249							;-------------------------------------------------------------------------

9251	.eaca						osbyte88: ;LEC37:
9252	.eaca		a9 00		lda #$00	                lda #$00

9254	.eacc						callUSERV:
9255	.eacc		6c 00 02	jmp ($0200)	                jmp (USERV)

9257	.eacf						osbyte7E:                       ;ec3c
9258	.eacf		a2 00		ldx #$00	                ldx #$00
9259	.ead1		24 ff		bit $ff		                bit $FF
9260	.ead3		10 14		bpl $eae9	                bpl osbyte7C
9261	.ead5		ad 76 02	lda $0276	                lda escapeEffects
9262	.ead8		d0 0d		bne $eae7	                bne LEC54
9263	.eada		58		cli		                cli
9264	.eadb		9c 69 02	stz $0269	                stz pagedModeCounter
9265	.eade		20 73 f1	jsr $f173	                jsr withTerminalROM
9266	.eae1		20 49 ac	jsr $ac49	                jsr terminal.starEXEC
9267	.eae4		20 ef e7	jsr $e7ef	                jsr LE947
9268	.eae7						LEC54:
9269	.eae7		a2 ff		ldx #$ff	                ldx #$FF
9270	.eae9						osbyte7C: ;EC56
9271	.eae9		18		clc		                clc
9272	.eaea						osbyte7D: ;EC57
9273							                .if version<500
9274							                .if version==350
9278							                .endif
9279	.eaea		66 ff		ror $ff		                ror $FF
9280	.eaec		2c 7a 02	bit $027a	                bit tubePresence
9281	.eaef		10 32		bpl $eb23	                bpl LECD9
9282	.eaf1		4c 03 04	jmp $0403	                jmp terminal.tubeHost.copyEscapeStatus
9292							                .endif

9294							;-------------------------------------------------------------------------

9296							                .if version<400
9304							                .endif

9306							;-------------------------------------------------------------------------
9307							;
9308							; ;OSBYTE 8 (&08) Write RS423 transmit rate
9309							;
9310							; This call sets the RS423 baud rate for transmitting data. The actual format of
9311							; the data is set using OSBYTE 156/&9C (see below).
9312							;
9313							; Entry parameters :
9314							; X=0 selects 9600 baud
9315							; X=1 selects 75 baud
9316							; X=2 selects 150 baud
9317							; X=3 selects 300 baud
9318							; X=4 selects 1200 baud
9319							; X=5 selects 2400 baud
9320							; X=6 selects 4800 baud
9321							; X=7 selects 9600 baud
9322							; X=8 selects 19200 baud
9323							; Y=0
9324							;
9325							; On exit : X=Y=<old serial ACIA control register contents>

9327							                .if version!=400
9331							                .endif

9333							;-------------------------------------------------------------------------
9334							;
9335							; OSBYTE 7 (&07) Write RS423 receive rate
9336							;
9337							; This call sets the RS423 baud rate for receiving data. The actual
9338							; format of the data is set using OSBYTE 156/&9C (see below).
9339							;
9340							; Entry parameters :
9341							; X=0 selects 9600 baud
9342							; X=1 selects 75 baud
9343							; X=2 selects 150 baud
9344							; X=3 selects 300 baud
9345							; X=4 selects 1200 baud
9346							; X=5 selects 2400 baud
9347							; X=6 selects 4800 baud
9348							; X=7 selects 9600 baud
9349							; X=8 selects 19200 baud
9350							; Y=0
9351							;
9352							; On exit : X=Y=<old serial ACIA control register contents>

9354							                .if version!=400
9381							                .endif

9383							                .if version==400
9384	.eaf4						osbyte08:
9385	.eaf4						osbyte07:
9386	.eaf4						LEC89:
9387	.eaf4						LEC90:
9388							                .endif

9390							;-------------------------------------------------------------------------

9392							; Y=0 on entry.

9394	.eaf4						osbyte09:                       ;ec92
9395	.eaf4		c8		iny		                iny
9396	.eaf5		18		clc		                clc
9397	.eaf6						osbyte0A:                                    ;ec94
9398	.eaf6		b9 52 02	lda $0252,y	                lda firstFlashColourDuration,y
9399	.eaf9		48		pha		                pha
9400	.eafa		8a		txa		                txa
9401	.eafb		99 52 02	sta $0252,y	                sta firstFlashColourDuration,y
9402	.eafe		7a		ply		                ply
9403	.eaff		ad 51 02	lda $0251	                lda flashCounter
9404	.eb02		d0 1d		bne $eb21	                bne LEC8F
9405	.eb04		8e 51 02	stx $0251	                stx flashCounter
9406	.eb07		ad 48 02	lda $0248	                lda vcontrolRegister
9407	.eb0a		08		php		                php
9408	.eb0b		6a		ror a		                ror a
9409	.eb0c		28		plp		                plp
9410	.eb0d		2a		rol a		                rol a
9411	.eb0e		8d 48 02	sta $0248	                sta vcontrolRegister
9412	.eb11		8d 20 fe	sta $fe20	                sta VCONTROL
9413	.eb14		80 0b		bra $eb21	                bra LEC8F

9415							;-------------------------------------------------------------------------
9416							;
9417							; OSBYTE 2 (&02) Specify input stream
9418							;
9419							; Input may be taken from either the keyboard (by default) or the
9420							; RS423 port. This call specifies the selection for all subsequent
9421							; input.
9422							;
9423							; Entry parameters :
9424							; X=0 selects keyboard input and disables RS423
9425							; X=1 selects and enables RS423 input
9426							; X=2 selects keyboard input and enables RS423
9427							; Y=0
9428							;
9429							; On exit : X=0 indicates previous input was from the keyboard
9430							;           X=1 indicates previous input was from RS423
9431							;           Y is undefined
9432							;
9433							; D.2-18
9434							                .if version!=400
9457							                .endif

9459							;-------------------------------------------------------------------------
9460							;
9461							; OSBYTE 13 (&0D) Disable event
9462							;
9463							; All events are assigned a unique number and this call provides a
9464							; means of disabling specific events.
9465							;
9466							; Entry parameters:
9467							; X = event number
9468							;
9469							; On exit: X = Y = <old enable state> (0=disabled)
9470	.eb16						osbyte0D:
9471	.eb16		98		tya		                tya             ;A=0

9473							;-------------------------------------------------------------------------
9474							;
9475							; OSBYTE 14 (&0E) Enable event
9476							;
9477							; This call provides a means of enabling specific events.
9478							;
9479							;
9480	.eb17						osbyte0E:
9481	.eb17		e0 0a		cpx #$0a	                cpx #eventMax+1
9482							                .if version!=400
9484							                .else
9485	.eb19		b0 07		bcs $eb22	                bcs LEB22
9486							                .endif
9487	.eb1b		bc bf 02	ldy $02bf,x	                ldy eventEnabledFlags,x
9488	.eb1e		9d bf 02	sta $02bf,x	                sta eventEnabledFlags,x
9489							                .if version!=400
9491							                .else
9492	.eb21						LEC8F:
9493	.eb21						LEB21:
9494	.eb21		98		tya		                tya
9495	.eb22						LEB22:
9496	.eb22		aa		tax		                tax
9497	.eb23						LECD9:
9498	.eb23		60		rts		                rts
9499							                .endif

9501							;-------------------------------------------------------------------------
9502							;
9503							; OSBYTE 16 (&10) Write number of ADC channels
9504							;
9505							; By default, each of the four ADC channels is sampled and converted
9506							; in turn so that each reading is updated every 40 milliseconds. This
9507							; call enables the number of channels to be changed so that if, for
9508							; example, only two channels are required, each will be updated every
9509							; 20 milliseconds.
9510							;
9511							                .if version!=400
9522							                .endif

9524							;-------------------------------------------------------------------------
9525							;
9526							; OSBYTE 129 (&81) Read key with time limit
9527							;
9528							; This call may be used to read a key from the keyboard subject to a
9529							; specified time limit or to perform a keyboard scan for a specified
9530							; key depression.

9532	.eb24						osbyte81:
9533	.eb24		98		tya		                tya
9534	.eb25		30 0a		bmi $eb31	                bmi LED01          ;taken if scanning for specific key
9535	.eb27		20 ca e6	jsr $e6ca	                jsr osbyte81Timed
9536	.eb2a		b0 03		bcs $eb2f	                bcs LECFF                 ;taken if timed out or error
9537	.eb2c		aa		tax		                tax                       ;X = ASCII char
9538	.eb2d						LECFD:
9539	.eb2d		a9 00		lda #$00	                lda #$00
9540	.eb2f						LECFF:
9541	.eb2f		a8		tay		                tay
9542	.eb30		60		rts		                rts

9544	.eb31						LED01:
9545	.eb31		8a		txa		                txa
9546	.eb32		f0 10		beq $eb44	                beq LED14
9547	.eb34		49 7f		eor #$7f	                eor #$7F
9548	.eb36		aa		tax		                tax
9549	.eb37		20 f1 f6	jsr $f6f1	                jsr callKEYV
9550	.eb3a		2a		rol a		                rol a
9551							                ; fall through

9553							;-------------------------------------------------------------------------

9555	.eb3b						osbyte82:
9556	.eb3b		a2 ff		ldx #$ff	                ldx #$FF
9557	.eb3d		a0 ff		ldy #$ff	                ldy #$FF
9558	.eb3f		b0 02		bcs $eb43	                bcs LEB13                    ;if OSBYTE $82, done
9559	.eb41		e8		inx		                inx
9560	.eb42		c8		iny		                iny
9561	.eb43						LEB13:
9562	.eb43		60		rts		                rts

9564	.eb44						LED14:
9565							                .if version==320
9567							                .elsif version==400
9568	.eb44		a2 f7		ldx #$f7	                ldx #$f7
9575							                .endif
9576	.eb46		80 e5		bra $eb2d	                bra LECFD

9578	.eb48						LED18:
9579							                .if version==400
9580	.eb48		10 f9		bpl $eb43	                bpl LEB13
9581							                .endif
9582	.eb4a		8a		txa		                txa
9583	.eb4b		49 ff		eor #$ff	                eor #$FF
9584	.eb4d		aa		tax		                tax
9585	.eb4e		e0 02		cpx #$02	                cpx #$02
9586							                ; fall through

9588							;-------------------------------------------------------------------------

9590	.eb50						countBufferViaCNPV:
9591	.eb50		b8		clv		                clv
9592	.eb51		80 03		bra $eb56	                bra callCNPV

9594	.eb53						purgeBufferViaCNPV:
9595	.eb53		2c 5e e3	bit $e35e	                bit valueFF                  ;V=1
9596	.eb56						callCNPV:
9597	.eb56		6c 2e 02	jmp ($022e)	                jmp (CNPV)

9599							;-------------------------------------------------------------------------

9601							                .if version!=400
9611							                .endif

9613							;-------------------------------------------------------------------------

9615							                .if version!=400
9636							                .endif

9638							;-------------------------------------------------------------------------

9640							                .if version!=400
9659							                .endif

9661							;-------------------------------------------------------------------------
9662							;
9663							; OSBYTE $70
9664							;
9665							; D.2-31
9666							;
9667	.eb59						osbyte70:                       ;ed58
9668	.eb59		20 71 eb	jsr $eb71	                jsr osbyte7071
9669	.eb5c		0a		asl a		                asl a
9670	.eb5d		f0 04		beq $eb63	                beq clearACCCCONE
9671	.eb5f						LED5E:
9672	.eb5f		0c 34 fe	tsb $fe34	                tsb ACCCON
9673	.eb62		60		rts		                rts

9675	.eb63						clearACCCCONE:
9676	.eb63		a9 02		lda #$02	                lda #ACCCON.E
9677	.eb65						LED64:
9678	.eb65		1c 34 fe	trb $fe34	                trb ACCCON
9679	.eb68		60		rts		                rts

9681							;-------------------------------------------------------------------------

9683	.eb69						osbyte71:                       ;ed68
9684	.eb69		20 71 eb	jsr $eb71	                jsr osbyte7071
9685	.eb6c		d0 f1		bne $eb5f	                bne LED5E
9686	.eb6e		1a		inc a		                inc a
9687	.eb6f		80 f4		bra $eb65	                bra LED64

9689							;-------------------------------------------------------------------------
9690							;
9691							; Handle OSBYTE $70 or OSBYTE $71
9692							;
9693							; Entry: A=$70 or $71
9694							;
9695	.eb71						osbyte7071:
9696	.eb71		a8		tay		                tay
9697	.eb72		8a		txa		                txa
9698							                .cerror vduDriverMemory+1!=displayMemory
9699	.eb73		99 1a 02	sta $021a,y	                sta vduDriverMemory-$70,y
9700	.eb76		d0 09		bne $eb81	                bne LED80
9701	.eb78		a5 d0		lda $d0		                lda STATE
9702	.eb7a		29 10		and #$10	                and #STATE.isShadowMode
9703	.eb7c		f0 06		beq $eb84	                beq LED83
9704	.eb7e						LED7D:
9705	.eb7e		a9 01		lda #$01	                lda #$01
9706	.eb80		60		rts		                rts

9708	.eb81						LED80:
9709	.eb81		3a		dec a		                dec a
9710	.eb82		d0 fa		bne $eb7e	                bne LED7D
9711	.eb84						LED83:
9712	.eb84		60		rts		                rts

9714							;-------------------------------------------------------------------------

9716							; OSBYTE &6E (110), &6F (111)
9717							; ===========================
9718							; Pass to sideways ROMs
9719	.eb85						osbyteUnused:                   ;ed84
9720	.eb85		a2 07		ldx #$07	                ldx #romServiceCallUnrecognisedOSBYTE
9721	.eb87		20 52 ec	jsr $ec52	                jsr makeROMServiceCall
9722	.eb8a		a6 f0		ldx $f0		                ldx originalX
9723							                .if version!=400
9725							                .endif
9726	.eb8c		60		rts		                rts

9728							;-------------------------------------------------------------------------

9730							                .if version!=350
9731	.eb8d						osbyteA1:
9732	.eb8d		20 73 f1	jsr $f173	                jsr withTerminalROM
9733	.eb90		4c 46 9b	jmp $9b46	                jmp terminal.readCMOSByte
9734							                .endif

9736							;-------------------------------------------------------------------------

9738							                .if version!=350
9739	.eb93						osbyteA2:
9740	.eb93		20 73 f1	jsr $f173	                jsr withTerminalROM
9741	.eb96		4c 70 9b	jmp $9b70	                jmp terminal.writeCMOSByte
9742							                .endif

9744							;-------------------------------------------------------------------------
9745							;
9746							; OSBYTE 140 (&8C) Select Cassette Filing System [MasRef D.2-43]
9747							; OSBYTE 141 (&8D) Select ROM Filing System [MasRef D.2-43]
9748							;
9749	.eb99						osbyte8C8D:
9750	.eb99		20 c5 eb	jsr $ebc5	                jsr selectROMOrTAPEByOSBYTE
9751	.eb9c		ad 34 fe	lda $fe34	                lda ACCCON                    ; Save ACCON register
9752	.eb9f		48		pha		                pha
9753	.eba0		20 b9 eb	jsr $ebb9	                jsr selectHAZEL         ; Page Hazel workspace in
9754	.eba3		ae 01 df	ldx $df01	                ldx hazel.activeFS
9755	.eba6		8e 00 df	stx $df00	                stx hazel.currentFS
9756	.eba9		a9 0f		lda #$0f	                lda #terminalROM
9757	.ebab		8d 03 df	sta $df03	                sta hazel.currentFSROM
9758	.ebae		68		pla		                pla                          ; Restore ACCON
9759	.ebaf						selectMOSOrHAZEL:                                       ;edb0
9760	.ebaf		29 08		and #$08	                and #ACCCON.Y   ;get just the HAZEL/MOS bit
9761	.ebb1		d0 08		bne $ebbb	                bne tsbACCCON   ;branch taken if HAZEL at $c000
9762	.ebb3						selectMOS:
9763	.ebb3		a9 08		lda #$08	                lda #ACCCON.Y
9764	.ebb5		1c 34 fe	trb $fe34	                trb ACCCON      ;page in MOS at $c000
9765	.ebb8		60		rts		                rts

9767	.ebb9						selectHAZEL:
9768	.ebb9		a9 08		lda #$08	                lda #ACCCON.Y
9769	.ebbb						tsbACCCON:
9770	.ebbb		0c 34 fe	tsb $fe34	                tsb ACCCON      ;page in HAZEL at $c000
9771	.ebbe		60		rts		                rts

9773							;-------------------------------------------------------------------------

9775							                .if version==400
9776	.ebbf						LEBBF:
9777	.ebbf		20 44 ec	jsr $ec44	                jsr LEE64
9778	.ebc2		20 dd ef	jsr $efdd	                jsr LF1EE
9779							                .endif

9781							;-------------------------------------------------------------------------
9782							;
9783							; Select ROM or TAPE.
9784							;
9785							; Two entry points: selectROMOrTAPEByOSBYTE picks FS by OSBYTE number
9786							; ($8c=TAPE, $8d=ROM), and selectROMOrTAPE picks FS by number (0=TAPE,
9787							; 1=ROM).
9788							;
9789							; entry:
9790							;
9791							; A = FS to select
9792							;
9793	.ebc5						selectROMOrTAPEByOSBYTE:
9794							                .if version==400

9796	.ebc5						LEDD0:
9797	.ebc5		a9 02		lda #$02	                lda #2
9798	.ebc7		8d 47 02	sta $0247	                sta cfsRFSFSSwitch

9800	.ebca		a9 06		lda #$06	                lda #6
9801	.ebcc		20 d4 ef	jsr $efd4	                jsr callFSCV

9803	.ebcf		64 ce		stz $ce		                stz $ce

9842							                .endif

9844	.ebd1		a2 0e		ldx #$0e	                ldx #defaultVectorTable.fsVectors.end-defaultVectorTable.fsVectors ; Prepare to set 7 vectors
9845	.ebd3						LEDF3:
9846	.ebd3		bd f8 e2	lda $e2f8,x	                lda defaultVectorTable.fsVectors-1,x ; Set filing
9847							                                                     ; system vectors
9848							                                                     ; to point to
9849							                                                     ; extended
9850							                                                     ; vectors
9851	.ebd6		9d 11 02	sta $0211,x	                sta FILEV-1,x
9852	.ebd9		ca		dex		                dex
9853	.ebda		d0 f7		bne $ebd3	                bne LEDF3
9854	.ebdc		20 dd ef	jsr $efdd	                jsr LF1EE                    ; Set extended vectors
9855	.ebdf		64 c2		stz $c2		                stz $C2                      ; Set Progress=idle
9856	.ebe1		a2 0f		ldx #$0f	                ldx #romServiceCallVectorsClaimed ; Send service call &0F - vectors changed

9858							;-------------------------------------------------------------------------
9859							;
9860							; OSBYTE 143 (&8F) Issue paged ROM service request [MasRef D.2-44]
9861							;
9862	.ebe3						osbyte8F: .proc                    ;ee03
9863	.ebe3		5a		phy		                phy
9864	.ebe4		da		phx		                phx                          ; Send service call
9865	.ebe5		20 52 ec	jsr $ec52	                jsr makeROMServiceCall
9866	.ebe8		fa		plx		                plx
9867	.ebe9		e0 0f		cpx #$0f	                cpx #romServiceCallVectorsClaimed ; If VectorsClaimed,
9868							                                                  ; hook FileSwitch
9869							                                                  ; back in
9870	.ebeb		f0 36		beq $ec23	                beq handleVectorsClaimed
9871	.ebed		1a		inc a		                inc a       ; If claimed, check for
9872							                            ; InitialiseFilingSystem or
9873							                            ; UnrecognisedCommand
9874	.ebee		3a		dec a		                dec a       ;Z=1 if claimed
9875	.ebef		f0 03		beq $ebf4	                beq wasClaimed  ;branch taken if claimed
9876	.ebf1						done:
9877	.ebf1		fa		plx		                plx             ; Return with result in X, EQ=Claimed
9878	.ebf2		aa		tax		                tax
9879	.ebf3		60		rts		                rts

9881	.ebf4						wasClaimed:
9882	.ebf4		e0 12		cpx #$12	                cpx #romServiceCallInitialiseFilingSystem
9883	.ebf6		f0 04		beq $ebfc	                beq +
9884	.ebf8		e0 04		cpx #$04	                cpx #romServiceCallUnrecognisedCommand
9885	.ebfa		d0 f5		bne $ebf1	                bne done
9886	.ebfc						+

9888							; handle InitialiseFilingSystem ($12) or UnrecognisedCommand ($04)

9890	.ebfc		7a		ply		                ply                     ;Y=service call arg
9891	.ebfd		48		pha		                pha                     ;save A (though actually it's
9892							                                        ;always $00...)
9893	.ebfe		ad 34 fe	lda $fe34	                lda ACCCON
9894	.ec01		48		pha		                pha                     ;save ACCCON
9895	.ec02		20 b9 eb	jsr $ebb9	                jsr selectHAZEL
9896	.ec05		38		sec		                sec
9897	.ec06		6e 00 df	ror $df00	                ror hazel.currentFS ;set currentFS bit 7
9898	.ec09						LEE29:
9899	.ec09		5a		phy		                phy             ;save ROM service call argument
9900	.ec0a		a9 00		lda #$00	                lda #$00
9901	.ec0c		a8		tay		                tay
9902	.ec0d		20 e8 f8	jsr $f8e8	                jsr callARGSV   ;A=0, Y=0 - get active FS number
9903	.ec10		8d 01 df	sta $df01	                sta hazel.activeFS ;save active FS number
9904	.ec13		2c 00 df	bit $df00	                bit hazel.currentFS
9905	.ec16		10 03		bpl $ec1b	                bpl LEE3B
9906	.ec18		20 fe ef	jsr $effe	                jsr osbyte6D
9907	.ec1b						LEE3B:
9908	.ec1b		7a		ply		                ply
9909	.ec1c		68		pla		                pla
9910	.ec1d		20 af eb	jsr $ebaf	                jsr selectMOSOrHAZEL
9911	.ec20		68		pla		                pla
9912	.ec21		aa		tax		                tax
9913	.ec22		60		rts		                rts

9915	.ec23						handleVectorsClaimed:
9916	.ec23		7a		ply		                ply
9917	.ec24		48		pha		                pha
9918	.ec25		ad 34 fe	lda $fe34	                lda ACCCON
9919	.ec28		48		pha		                pha
9920	.ec29		20 b9 eb	jsr $ebb9	                jsr selectHAZEL
9921	.ec2c		ad 1e 02	lda $021e	                lda FSCV+0
9922	.ec2f		8d da df	sta $dfda	                sta hazel.activeFSCV+0
9923	.ec32		ad 1f 02	lda $021f	                lda FSCV+1
9924	.ec35		8d db df	sta $dfdb	                sta hazel.activeFSCV+1
9925	.ec38		a9 39		lda #$39	                lda #<fileswitchFSCEntryPoint
9926	.ec3a		8d 1e 02	sta $021e	                sta FSCV+0
9927	.ec3d		a9 fa		lda #$fa	                lda #>fileswitchFSCEntryPoint
9928	.ec3f		8d 1f 02	sta $021f	                sta FSCV+1
9929	.ec42		80 c5		bra $ec09	                bra LEE29
9930							                .pend

9932							;-------------------------------------------------------------------------

9934	.ec44						LEE64:
9935	.ec44		a9 a1		lda #$a1	                lda #$A1
9936	.ec46		85 e3		sta $e3		                sta $E3
9937	.ec48		a9 19		lda #$19	                lda #$19
9938	.ec4a		8d d1 03	sta $03d1	                sta $03D1
9939	.ec4d		a9 04		lda #$04	                lda #$04
9940	.ec4f		04 e2		tsb $e2		                tsb $E2
9941	.ec51		60		rts		                rts

9943							;-------------------------------------------------------------------------
9944							;
9945							; Pass service call around sideways ROMs
9946							;
9947							; Entry:
9948							; X=service call number
9949							; Y=any parameters
9950							;
9951							; Exit:
9952							; X=0 or preserved
9953							; Y=any returned parameters
9954							; EQ=call claimed if called directly
9955							;
9956	.ec52						makeROMServiceCall: .proc                    ;ee72
9957	.ec52		a5 f4		lda $f4		                lda $F4         ; Save current ROM
9958	.ec54		48		pha		                pha
9959	.ec55		ad 34 fe	lda $fe34	                lda ACCCON      ; Save current paging state
9960	.ec58		48		pha		                pha
9961	.ec59		20 b9 eb	jsr $ebb9	                jsr selectHAZEL ; Page in Hazel
9962	.ec5c		8a		txa		                txa             ; Pass service call number to A
9963	.ec5d		a2 0f		ldx #$0f	                ldx #$0F     ; Start at ROM 15, and always call ROM 15
9964	.ec5f		80 05		bra $ec66	                bra callServiceEntry
9965	.ec61						callServiceEntriesLoop:
9966	.ec61		3c a1 02	bit $02a1,x	                bit romInformationTable,x ;check if ROM X has a service entry
9967	.ec64		10 0b		bpl $ec71	                bpl nextROM       ;branch taken if no service entry
9968	.ec66						callServiceEntry:
9969	.ec66		20 8e e5	jsr $e58e	                jsr selectROMX  ; Page in ROM X
9970	.ec69		20 03 80	jsr $8003	                jsr $8003       ; Call ROM service entry point
9971	.ec6c		aa		tax		                tax             ; X = service call result
9972	.ec6d		f0 05		beq $ec74	                beq done       ;branch taken if service call claimed
9973	.ec6f		a6 f4		ldx $f4		                ldx $F4         ; Get ROM number
9974	.ec71						nextROM:
9975	.ec71		ca		dex		                dex       ; Step down to next ROM, loop until all done
9976	.ec72		10 ed		bpl $ec61	                bpl callServiceEntriesLoop

9978	.ec74						done:
9979	.ec74		68		pla		                pla                          ; Restore paging state
9980	.ec75		20 af eb	jsr $ebaf	                jsr selectMOSOrHAZEL
9981	.ec78		68		pla		                pla                          ; Restore current ROM
9982	.ec79		20 9f e5	jsr $e59f	                jsr selectROMA
9983	.ec7c		8a		txa		                txa                          ; Pass claim/noclaim to A
9984	.ec7d		60		rts		                rts
9985							                .pend

9987							;-------------------------------------------------------------------------

9989							; OSBYTE &6B (107) - Select memory for direct access
9990							; ==============================================
9991	.ec7e						osbyte6B:                       ;ee9e
9992	.ec7e		a0 20		ldy #$20	                ldy #$20                     ; Y=&20 to change 1MHz bit
9993	.ec80		80 02		bra $ec84	                bra LEEA4

9995							;-------------------------------------------------------------------------

9997							; OSBYTE &6C (108) - Select memory for direct access
9998							; ==============================================
9999	.ec82						osbyte6C:
10000	.ec82		a0 04		ldy #$04	                ldy #ACCCON.X                ; Y=&04 to change RAM bit
10001	.ec84						LEEA4:
10002	.ec84		98		tya		                tya                          ; Clear RAM or 1MHz bit
10003	.ec85		1c 34 fe	trb $fe34	                trb ACCCON
10004	.ec88		8a		txa		                txa                          ; If X=0, exit with normal RAM/1MHz selected
10005	.ec89		f0 05		beq $ec90	                beq LEEB0
10006							                .if version==350
10008							                .else
10009	.ec8b		a9 04		lda #$04	                lda #ACCCON.X                ; BUG! This should be TYA
10010							                .endif
10011	.ec8d		0c 34 fe	tsb $fe34	                tsb ACCCON                   ; Page in shadow RAM
10012	.ec90						LEEB0:
10013	.ec90		60		rts		                rts                          ; X preserved, Y=&04 or &20

10015							;-------------------------------------------------------------------------

10017							osword06Macro: .macro
10024							                .endmacro

10026							LEF1BMacro: .macro
10038							                .endmacro

10040							;-------------------------------------------------------------------------

10042							                .if version>=350
10043	.ec91						osword06:
10018	.ec91		20 5a ed	jsr $ed5a	                jsr getAddressFromOSWORDParameterBlock
10019	.ec94		b1 f0		lda ($f0),y	                lda (originalX),y
10020	.ec96		92 fa		sta ($fa)	                sta (SEIWKA)
10021	.ec98						ret:
10022	.ec98		a9 00		lda #$00	                lda #$00
10023	.ec9a		60		rts		                rts
10044	.ec9b						LEF1B:
10027	.ec9b		a5 eb		lda $eb		                lda $EB
10028	.ec9d		30 f9		bmi $ec98	                bmi osword06.ret
10029	.ec9f		ad 57 02	lda $0257	                lda spoolFileHandle
10030	.eca2		d0 f4		bne $ec98	                bne osword06.ret
10031	.eca4		a9 08		lda #$08	                lda #$08
10032	.eca6		25 e2		and $e2		                and $E2
10033	.eca8		d0 04		bne $ecae	                bne LEF2E
10034	.ecaa		a9 88		lda #$88	                lda #$88
10035	.ecac		25 bb		and $bb		                and $BB
10036	.ecae						LEF2E:
10037	.ecae		60		rts		                rts
10045							                .endif

10047							;-------------------------------------------------------------------------

10049							                .if version>=500
10082							                .endif

10084							;-------------------------------------------------------------------------

10086							                .if version>=350
10087	.ecaf						osword0E:
10088	.ecaf		c9 03		cmp #$03	                cmp #3
10089	.ecb1		b0 67		bcs $ed1a	                bcs handleUnrecognisedOSWORD
10090	.ecb3		20 73 f1	jsr $f173	                jsr withTerminalROM
10091	.ecb6		4c 48 9a	jmp $9a48	                jmp terminal.osword0E
10092							                .endif

10094							;-------------------------------------------------------------------------

10096							                .if version>=500||version==350
10102							                .endif

10104							;-------------------------------------------------------------------------


10107							; OSBYTE
10108							; ======
10109	.ecb9						osbyteEntryPoint:
10110	.ecb9		48		pha		                pha
10111	.ecba		08		php		                php
10112	.ecbb		78		sei		                sei
10113	.ecbc		85 ef		sta $ef		                sta originalA
10114	.ecbe		86 f0		stx $f0		                stx originalX
10115	.ecc0		84 f1		sty $f1		                sty originalY
10116	.ecc2		a2 07		ldx #$07	                ldx #romServiceCallUnrecognisedOSBYTE
10117	.ecc4		c9 6b		cmp #$6b	                cmp #$6B
10118	.ecc6		90 42		bcc $ed0a	                bcc osbyte00To6A
10119	.ecc8		c9 a6		cmp #$a6	                cmp #$A6
10120	.ecca		90 09		bcc $ecd5	                bcc osbyte6BToA5
10121	.eccc		c9 a6		cmp #$a6	                cmp #$A6
10122	.ecce		90 4e		bcc $ed1e	                bcc handleUnrecognisedOSBYTEOrOSWORD       ;??? - wait... didn't we just do this?

10124	.ecd0						osbyteA6ToFF:
10125	.ecd0		18		clc		                clc
10126	.ecd1						osbyteOrUSERV:      ;call OSBYTE A6+ routine if C=0; call USERV if C=1
10127	.ecd1		a9 a6		lda #$a6	                lda #$A6
10128	.ecd3		69 00		adc #$00	                adc #$00
10129							                .if version<350
10132							                .elsif version>=350
10133	.ecd5						osbyte6BToA5:
10134	.ecd5		e9 24		sbc #$24	                sbc #$24
10135	.ecd7						LEFA9:
10136	.ecd7		e9 2a		sbc #$2a	                sbc #$2A
10137							                .endif
10138	.ecd9						osbyteUseTable:
10139	.ecd9		0a		asl a		                asl a           ;table is of words
10140	.ecda		38		sec		                sec
10141	.ecdb						callOSBYTEOrOSWORDFromTable:
10142	.ecdb		84 f1		sty $f1		                sty originalY
10143	.ecdd		a8		tay		                tay             ;get table offset in Y
10144	.ecde		2c 5e 02	bit $025e	                bit econetInterceptionStatus
10145	.ece1		10 07		bpl $ecea	                bpl LEEE0             ;taken if no Econet interception
10146	.ece3		8a		txa		                txa
10147							                .cerror (netOSBYTEAttempted!=romServiceCallUnrecognisedOSBYTE),"net/rom reason codes mismatch"
10148							                .cerror (netOSWORDAttempted!=romServiceCallUnrecognisedOSWORD),"net/rom reason codes mismatch"
10149	.ece4		b8		clv		                clv
10150	.ece5		20 95 e9	jsr $e995	                jsr callNETV
10151	.ece8		70 1a		bvs $ed04	                bvs LEEFA
10152	.ecea						LEEE0:
10153							                .if version>=500
10160							                .endif
10161							                .if version==350
10166							                .else
10167	.ecea		b9 f5 e9	lda $e9f5,y	                lda osbyteAndOSWORDRoutineTable+1,y
10168	.eced		85 fb		sta $fb		                sta SEIWKB
10169	.ecef		b9 f4 e9	lda $e9f4,y	                lda osbyteAndOSWORDRoutineTable,y
10170	.ecf2		85 fa		sta $fa		                sta SEIWKA
10171							                .endif
10172							                .if version>=500
10179							                .endif
10180	.ecf4		a5 ef		lda $ef		                lda originalA
10181	.ecf6		a4 f1		ldy $f1		                ldy originalY
10182	.ecf8		b0 04		bcs $ecfe	                bcs +
10183	.ecfa		a0 00		ldy #$00	                ldy #$00            ;??? - is this actually desirable?
10184	.ecfc		b2 f0		lda ($f0)	                lda ($F0)           ;fetch 0th byte of parameter block
10185	.ecfe						+
10186	.ecfe		38		sec		                sec
10187							                .if version==350
10189							                .else
10190	.ecff		a6 f0		ldx $f0		                ldx originalX

10192							; on entry to the OSBYTE handlers, C=1, N/Z set as per X.

10194	.ed01		20 ce f6	jsr $f6ce	                jsr callSEIWKA
10195							                .endif
10196	.ed04						LEEFA:
10197	.ed04		6a		ror a		                ror a
10198	.ed05		28		plp		                plp
10199	.ed06		2a		rol a		                rol a
10200	.ed07		68		pla		                pla
10201	.ed08		b8		clv		                clv
10202	.ed09		60		rts		                rts

10204	.ed0a						osbyte00To6A:
10205	.ed0a		a0 00		ldy #$00	                ldy #$00        ;Y=0 on entry for this lot
10206	.ed0c		c9 1a		cmp #$1a	                cmp #$1A        ;OSBYTE <=$19 is table-driven
10207	.ed0e		90 c9		bcc $ecd9	                bcc osbyteUseTable ;taken if OSBYTE $00-$19
10208							                .if version>=350
10209	.ed10		c9 44		cmp #$44	                cmp #$44
10210	.ed12		f0 c3		beq $ecd7	                beq LEFA9
10211	.ed14		c9 45		cmp #$45	                cmp #$45
10212	.ed16		f0 bf		beq $ecd7	                beq LEFA9
10213							                .endif
10214	.ed18		80 04		bra $ed1e	                bra handleUnrecognisedOSBYTEOrOSWORD

10216	.ed1a						handleUnrecognisedOSWORD:
10217	.ed1a		a2 08		ldx #$08	                ldx #romServiceCallUnrecognisedOSWORD
10218	.ed1c		68		pla		                pla
10219	.ed1d		68		pla		                pla
10220	.ed1e						handleUnrecognisedOSBYTEOrOSWORD:
10221	.ed1e		20 52 ec	jsr $ec52	                jsr makeROMServiceCall
10222							                .if version<500&&version!=350
10223	.ed21		d0 04		bne $ed27	                bne LEF15
10226							                .endif
10227	.ed23		a6 f0		ldx $f0		                ldx originalX
10228	.ed25		80 dd		bra $ed04	                bra LEEFA
10229							                .if version<500&&version!=350
10230	.ed27						LEF15:
10231	.ed27		28		plp		                plp
10232	.ed28		68		pla		                pla
10233	.ed29		2c 5e e3	bit $e35e	                bit valueFF
10234	.ed2c		60		rts		                rts
10235							                .endif

10237							;-------------------------------------------------------------------------

10239							                .if version<350
10241							                .endif

10243							;-------------------------------------------------------------------------
10244							;
10245							; OSWORD 14 (&0E) Read CMOS clock [MasRef D.3-22]
10246							;
10247							                .if version<350
10253							                .endif

10255							;-------------------------------------------------------------------------
10256							;
10257							; Entry point for OSWORD.
10258							;
10259							; D.3-3
10260							;
10261							                .if version<500
10262	.ed2d						oswordEntryPoint:
10263	.ed2d		48		pha		                pha             ;save OSWORD request
10264	.ed2e		08		php		                php
10265	.ed2f		78		sei		                sei
10266	.ed30		85 ef		sta $ef		                sta originalA
10267	.ed32		86 f0		stx $f0		                stx originalX
10268	.ed34		84 f1		sty $f1		                sty originalY
10269	.ed36		a2 08		ldx #$08	                ldx #romServiceCallUnrecognisedOSWORD
10270	.ed38		c9 e0		cmp #$e0	                cmp #$E0
10271	.ed3a		b0 95		bcs $ecd1	                bcs osbyteOrUSERV ;taken if OSWORD $E0 or higher -
10272							                                  ;these go via USERV

10274							                .if version<350
10285							                .else

10287	.ed3c		c9 10		cmp #$10	                cmp #16
10288	.ed3e		90 0d		bcc $ed4d	                bcc LED4D
10289	.ed40		c9 44		cmp #$44	                cmp #$44
10290	.ed42		b0 da		bcs $ed1e	                bcs handleUnrecognisedOSBYTEOrOSWORD
10291	.ed44		c9 42		cmp #$42	                cmp #$42
10292	.ed46		b0 03		bcs $ed4b	                bcs LED4B
10293	.ed48		38		sec		                sec
10294	.ed49		80 d3		bra $ed1e	                bra handleUnrecognisedOSBYTEOrOSWORD

10296	.ed4b						LED4B:
10297	.ed4b		e9 33		sbc #$33	                sbc #$33
10298	.ed4d						LED4D:
10299	.ed4d		69 59		adc #$59	                adc #$59
10300	.ed4f		0a		asl a		                asl a
10301	.ed50		80 89		bra $ecdb	                bra callOSBYTEOrOSWORDFromTable
10302							                .endif
10303							                .endif

10305							;-------------------------------------------------------------------------
10306							;
10307							; OSWORD 5 (&05) Read byte from I/O processor memory [MasRef D.3-9]
10308							;
10309	.ed52						osword05:
10310	.ed52		20 5a ed	jsr $ed5a	                jsr getAddressFromOSWORDParameterBlock
10311	.ed55		b2 fa		lda ($fa)	                lda (SEIWKA)                 ;read byte from the address
10312	.ed57		91 f0		sta ($f0),y	                sta (originalX),y                  ;update parameter block
10313	.ed59		60		rts		                rts

10315							;-------------------------------------------------------------------------
10316							;
10317							; OSWORD 6 (&06) Write byte to I/O processor memory [MasRef D.3-9]
10318							;

10320							                .if version<350
10322							                .endif

10324							;-------------------------------------------------------------------------
10325							;
10326							; Get address from OSWORD parameter block.
10327							;
10328							; entry:
10329							;
10330							; A = 0th byte of parameter block
10331							;
10332							; Y = 0
10333							;
10334							; (originalX) = parameter block
10335							;
10336							; exit:
10337							;
10338							; (SEIWKA) = address, first two bytes from parameter block
10339							;
10340							; Y = 4 (this is just convenient for both callers)
10341							;
10342	.ed5a						getAddressFromOSWORDParameterBlock:
10343	.ed5a		85 fa		sta $fa		                sta SEIWKA
10344	.ed5c		c8		iny		                iny
10345	.ed5d		b1 f0		lda ($f0),y	                lda (originalX),y
10346	.ed5f		85 fb		sta $fb		                sta SEIWKA+1
10347	.ed61		a0 04		ldy #$04	                ldy #$04
10348	.ed63						ldxim03_rts:
10349							                .if version<400
10351							                .elsif version<500
10352	.ed63		a2 04		ldx #$04	                ldx #$04
10355							                .endif
10356	.ed65		60		rts		                rts

10358							;-------------------------------------------------------------------------
10359							;
10360							; OSBYTE 0 (&00) Display MOS version
10361							;
10362							; OSBYTE 0 has the effect of performing a BRK instruction and
10363							; displaying the MOS version number.
10364							;
10365							; Entry parameters :
10366							;
10367							; X=0 executes a BRK and displays the OS version
10368							;
10369							; X=1 executes an RTS and returns the Operating system version
10370							;
10371							; On exit : X=<OS version>
10372							;
10373							; D.2-18
10374							;
10375	.ed66						osbyte00:                       ;ef6f
10376	.ed66		d0 fb		bne $ed63	                bne ldxim03_rts ;branch taken if X<>0 - return with
10377							                                 ;X=3

10379							; do a BRK and print MOS version number.

10381	.ed68		00		brk #		                brk
10382	>ed69		f7				                .byte $f7
10383							                .if version==320
10385							                .elsif version==400
10386	>ed6a		4d 4f 53 20 34 2e 30 30		                .text "MOS 4.00"
10409							                .endif
10410	>ed72		00				                .byte 0

10412							;-------------------------------------------------------------------------
10413							;
10414							; OSWORD 7 (&07) Generate a sound [MasRef D.3-10]
10415							;
10416	.ed73						osword07:
10417	.ed73		c8		iny		                iny
10418	.ed74		b1 f0		lda ($f0),y	                lda ($F0),y
10419	.ed76		c9 20		cmp #$20	                cmp #$20
10420	.ed78		b0 a0		bcs $ed1a	                bcs handleUnrecognisedOSWORD
10421	.ed7a		88		dey		                dey
10422	.ed7b		20 ee ed	jsr $edee	                jsr LEFF6
10423	.ed7e		09 04		ora #$04	                ora #$04
10424	.ed80		aa		tax		                tax
10425	.ed81		90 05		bcc $ed88	                bcc LEF90
10426	.ed83		20 02 e8	jsr $e802	                jsr LE95A
10427	.ed86		a0 01		ldy #$01	                ldy #$01
10428	.ed88						LEF90:
10429	.ed88		20 ee ed	jsr $edee	                jsr LEFF6
10430	.ed8b		85 fa		sta $fa		                sta $FA
10431	.ed8d		08		php		                php
10432	.ed8e		a0 06		ldy #$06	                ldy #$06
10433	.ed90		b1 f0		lda ($f0),y	                lda ($F0),y
10434	.ed92		48		pha		                pha
10435	.ed93		a0 04		ldy #$04	                ldy #$04
10436	.ed95		b1 f0		lda ($f0),y	                lda ($F0),y
10437	.ed97		48		pha		                pha
10438	.ed98		a0 02		ldy #$02	                ldy #$02
10439	.ed9a		b1 f0		lda ($f0),y	                lda ($F0),y
10440	.ed9c		2a		rol a		                rol a
10441	.ed9d		3a		dec a		                dec a
10442	.ed9e		3a		dec a		                dec a
10443	.ed9f		0a		asl a		                asl a
10444	.eda0		0a		asl a		                asl a
10445	.eda1		05 fa		ora $fa		                ora $FA
10446	.eda3		20 4b e8	jsr $e84b	                jsr LE9A3
10447	.eda6		90 1e		bcc $edc6	                bcc LEFCE
10448	.eda8		68		pla		                pla
10449	.eda9		68		pla		                pla
10450	.edaa		28		plp		                plp

10452							                ; WTF... fall through to OSBYTE $75!

10454							;-------------------------------------------------------------------------
10455							;
10456							; OSBYTE 117 (&75) Read VDU status [MasRef D.2-32]
10457							;
10458	.edab						osbyte75:
10459	.edab		a6 d0		ldx $d0		                ldx STATE
10460	.edad		60		rts		                rts

10462							;-------------------------------------------------------------------------
10463							;
10464							; VDU 7 (&07) Produce BELL sound [MasRef E.3-4]
10465							;
10466	.edae						vdu7EntryPoint:
10467	.edae		08		php		                php
10468	.edaf		78		sei		                sei
10469	.edb0		ad 63 02	lda $0263	                lda bellChannel
10470	.edb3		29 07		and #$07	                and #$07
10471	.edb5		09 04		ora #$04	                ora #$04
10472	.edb7		aa		tax		                tax
10473	.edb8		ad 64 02	lda $0264	                lda bellSound
10474	.edbb		20 e8 e8	jsr $e8e8	                jsr callINSV
10475	.edbe		ad 66 02	lda $0266	                lda bellDuration
10476	.edc1		48		pha		                pha
10477	.edc2		ad 65 02	lda $0265	                lda bellFrequency
10478	.edc5		48		pha		                pha
10479	.edc6						LEFCE:
10480	.edc6		38		sec		                sec
10481	.edc7		7e 00 08	ror $0800,x	                ror $0800,x
10482	.edca		68		pla		                pla
10483	.edcb		20 e8 e8	jsr $e8e8	                jsr callINSV
10484	.edce		68		pla		                pla
10485	.edcf		20 e8 e8	jsr $e8e8	                jsr callINSV
10486	.edd2		28		plp		                plp
10487	.edd3		60		rts		                rts

10489							;-------------------------------------------------------------------------
10490							;
10491							; OSWORD 8 (&08) Define a sound envelope [MasRef D.3-14]
10492							;
10493	.edd4						osword08:
10494	.edd4		3a		dec a		                dec a                   ;get index of 1-based envelope
10495	.edd5		0a		asl a		                asl a
10496	.edd6		0a		asl a		                asl a
10497	.edd7		0a		asl a		                asl a
10498	.edd8		0a		asl a		                asl a                        ;index*16
10499	.edd9		09 0f		ora #$0f	                ora #$0F                     ;index*16+15
10500	.eddb		aa		tax		                tax                          ;
10501	.eddc		a9 00		lda #$00	                lda #$00                     ;
10502	.edde		a0 10		ldy #$10	                ldy #16             ;16 bytes of envelope data get set
10503	.ede0						-
10504	.ede0		c0 0e		cpy #$0e	                cpy #$0E                     ;
10505	.ede2		b0 02		bcs $ede6	                bcs + ;taken if last 2 bytes of data - they get initialized to $00
10506	.ede4		b1 f0		lda ($f0),y	                lda (originalX),y        ;fetch byte from OSWORD block
10507	.ede6						+
10508	.ede6		9d c0 08	sta $08c0,x	                sta envelope1Data,x          ;set envelope data bytes
10509	.ede9		ca		dex		                dex
10510	.edea		88		dey		                dey
10511	.edeb		d0 f3		bne $ede0	                bne -
10512	.eded		60		rts		                rts

10514							;-------------------------------------------------------------------------

10516	.edee						LEFF6:
10517	.edee		b1 f0		lda ($f0),y	                lda ($F0),y
10518	.edf0		c9 10		cmp #$10	                cmp #$10
10519	.edf2		29 03		and #$03	                and #$03
10520	.edf4		c8		iny		                iny
10521	.edf5		60		rts		                rts

10523							;-------------------------------------------------------------------------
10524							;
10525							; OSWORD 3 (&03) Read interval timer [MasRef D.3-8]
10526							;
10527	.edf6						osword03:
10528	.edf6		a2 0f		ldx #$0f	                ldx #$0F
10529	.edf8		80 03		bra $edfd	                bra LF005

10531							;-------------------------------------------------------------------------
10532							;
10533							; OSWORD 1 (&01) Read system clock [MasRef D.3-7]
10534							;
10535	.edfa						osword01:
10536	.edfa		ae 83 02	ldx $0283	                ldx timerSwitchState
10537	.edfd						LF005:
10538	.edfd		a0 04		ldy #$04	                ldy #$04
10539	.edff						-
10540	.edff		bd 8d 02	lda $028d,x	                lda timer0-initialTimerSwitchState,x
10541	.ee02		91 f0		sta ($f0),y	                sta (originalX),y
10542	.ee04		e8		inx		                inx
10543	.ee05		88		dey		                dey
10544	.ee06		10 f7		bpl $edff	                bpl -
10545	.ee08						rtsF010:
10546	.ee08		60		rts		                rts

10548							;-------------------------------------------------------------------------
10549							;
10550							; OSWORD 4 (&04) Write interval timer [MasRef D.3-9]
10551							;
10552	.ee09						osword04:
10553	.ee09		a9 0f		lda #$0f	                lda #intervalTimer-(timer0-initialTimerSwitchState)
10554	.ee0b		80 06		bra $ee13	                bra copyTIMEValue

10556							;-------------------------------------------------------------------------
10557							;
10558							; OSWORD 2 (&02) Write system clock [MasRef D.3-8]
10559							;
10560	.ee0d						osword02:
10561	.ee0d		ad 83 02	lda $0283	                lda timerSwitchState
10562	.ee10		49 0f		eor #$0f	                eor #$0F       ;select the timer that isn't being used
10563	.ee12		18		clc		                clc
10564	.ee13						copyTIMEValue:
10565	.ee13		48		pha		                pha
10566	.ee14		aa		tax		                tax
10567	.ee15		a0 04		ldy #$04	                ldy #$04
10568	.ee17						-
10569	.ee17		b1 f0		lda ($f0),y	                lda (originalX),y
10570	.ee19		9d 8d 02	sta $028d,x	                sta timer0-initialTimerSwitchState,x
10571	.ee1c		e8		inx		                inx
10572	.ee1d		88		dey		                dey
10573	.ee1e		10 f7		bpl $ee17	                bpl -
10574	.ee20		68		pla		                pla
10575	.ee21		b0 e5		bcs $ee08	                bcs rtsF010
10576	.ee23		8d 83 02	sta $0283	                sta timerSwitchState
10577	.ee26		60		rts		                rts

10579							;-------------------------------------------------------------------------
10580							;
10581							; OSWORD 0 (&00) Read line from input stream to memory [MasRef D.3-6]
10582							;
10583	.ee27						osword00:
10584	.ee27		a0 04		ldy #$04	                ldy #$04
10585	.ee29						LF031:
10586	.ee29		b1 f0		lda ($f0),y	                lda (originalX),y
10587							                .cerror osword0MaxLineLength+1!=osword0MinASCIICharacter
10588							                .cerror osword0MinASCIICharacter+1!=osword0MaxASCIICharacter
10589	.ee2b		99 b1 02	sta $02b1,y	                sta osword0MaxLineLength-2,y
10590	.ee2e		88		dey		                dey
10591	.ee2f		c0 02		cpy #$02	                cpy #$02
10592	.ee31		b0 f6		bcs $ee29	                bcs LF031
10593	.ee33		b1 f0		lda ($f0),y	                lda ($F0),y
10594	.ee35		85 e9		sta $e9		                sta $E9
10595	.ee37		88		dey		                dey
10596	.ee38		9c 69 02	stz $0269	                stz pagedModeCounter
10597	.ee3b		b2 f0		lda ($f0)	                lda ($F0)
10598	.ee3d		85 e8		sta $e8		                sta $E8
10599	.ee3f		58		cli		                cli
10600	.ee40		80 07		bra $ee49	                bra LF051

10602	.ee42						LF04A:
10603	.ee42		a9 07		lda #$07	                lda #$07
10604	.ee44						LF04C:
10605	.ee44		88		dey		                dey
10606	.ee45						LF04D:
10607	.ee45		c8		iny		                iny
10608	.ee46						LF04E:
10609	.ee46		20 ee ff	jsr $ffee	                jsr OSWRCH
10610	.ee49						LF051:
10611	.ee49		20 e0 ff	jsr $ffe0	                jsr OSRDCH
10612	.ee4c		b0 49		bcs $ee97	                bcs LF09F
10613	.ee4e		aa		tax		                tax
10614	.ee4f		ad 7c 02	lda $027c	                lda characterDestinationStatus
10615	.ee52		6a		ror a		                ror a
10616	.ee53		6a		ror a		                ror a
10617	.ee54		8a		txa		                txa
10618	.ee55		b0 05		bcs $ee5c	                bcs LF064
10619	.ee57		ae 6a 02	ldx $026a	                ldx vduQueueNegativeLength
10620	.ee5a		d0 ea		bne $ee46	                bne LF04E
10621	.ee5c						LF064:
10622	.ee5c		c9 7f		cmp #$7f	                cmp #$7F
10623	.ee5e		d0 07		bne $ee67	                bne LF06F
10624	.ee60		c0 00		cpy #$00	                cpy #$00
10625	.ee62		f0 e5		beq $ee49	                beq LF051
10626	.ee64		88		dey		                dey
10627	.ee65		80 df		bra $ee46	                bra LF04E

10629	.ee67						LF06F:
10630	.ee67		c9 15		cmp #$15	                cmp #$15
10631	.ee69		d0 0d		bne $ee78	                bne LF080
10632	.ee6b		98		tya		                tya
10633	.ee6c		f0 db		beq $ee49	                beq LF051
10634	.ee6e		a9 7f		lda #$7f	                lda #$7F
10635	.ee70						LF078:
10636	.ee70		20 ee ff	jsr $ffee	                jsr OSWRCH
10637	.ee73		88		dey		                dey
10638	.ee74		d0 fa		bne $ee70	                bne LF078
10639	.ee76		80 d1		bra $ee49	                bra LF051

10641	.ee78						LF080:
10642	.ee78		91 e8		sta ($e8),y	                sta ($E8),y
10643	.ee7a		c9 0d		cmp #$0d	                cmp #$0D
10644	.ee7c		f0 13		beq $ee91	                beq LF099
10645	.ee7e		cc b3 02	cpy $02b3	                cpy osword0MaxLineLength
10646	.ee81		b0 bf		bcs $ee42	                bcs LF04A
10647	.ee83		cd b4 02	cmp $02b4	                cmp osword0MinASCIICharacter
10648	.ee86		90 bc		bcc $ee44	                bcc LF04C
10649	.ee88		cd b5 02	cmp $02b5	                cmp osword0MaxASCIICharacter
10650	.ee8b		f0 b8		beq $ee45	                beq LF04D
10651	.ee8d		90 b6		bcc $ee45	                bcc LF04D
10652	.ee8f		80 b3		bra $ee44	                bra LF04C

10654	.ee91						LF099:
10655	.ee91		20 e7 ff	jsr $ffe7	                jsr OSNEWL
10656	.ee94		20 95 e9	jsr $e995	                jsr callNETV
10657	.ee97						LF09F:
10658	.ee97		a5 ff		lda $ff		                lda $FF
10659	.ee99		2a		rol a		                rol a
10660	.ee9a		60		rts		                rts

10662							;-------------------------------------------------------------------------
10663							;
10664							; OSBYTE 3 (&03) Specify output stream [MasRef D.2-19]
10665							;
10666	.ee9b						osbyte03:
10667	.ee9b		da		phx		                phx
10668	.ee9c		ae 7c 02	ldx $027c	                ldx characterDestinationStatus
10669	.ee9f		a9 0a		lda #$0a	                lda #printerDriverFX3
10670	.eea1		20 e4 e7	jsr $e7e4	                jsr callPrinterDriver
10671	.eea4		fa		plx		                plx
10672	.eea5		a9 03		lda #$03	                lda #$03
10673	.eea7		a0 00		ldy #$00	                ldy #$00
10674	.eea9		80 23		bra $eece	                bra osbyte04

10676							;-------------------------------------------------------------------------
10677							;
10678							; OSBYTE 6 (&06) Write printer ignore character [MasRef D.2-21]
10679							;
10680	.eeab						osbyte06:                       ;f0b3
10681	.eeab		4e 46 02	lsr $0246	                lsr noignoreState
10682	.eeae		80 16		bra $eec6	                bra osbyte01

10684							;-------------------------------------------------------------------------
10685							;
10686							; OSBYTE 114 (&72) Write usage of shadow memory [MasRef D.2-32]
10687							;
10688	.eeb0						osbyte72:                       ;f0b8
10689	.eeb0		a9 1f		lda #$1f	                lda #$1F
10690	.eeb2		80 10		bra $eec4	                bra LF0CC

10692							;-------------------------------------------------------------------------
10693							;
10694							; OSBYTE 5 (&05) Write printer driver type [MasRef D.2-20]
10695							;
10696	.eeb4						osbyte05:
10697	.eeb4						waitForPrinterDriverDormant:
10698	.eeb4		58		cli		                cli
10699	.eeb5		78		sei		                sei
10700	.eeb6		24 ff		bit $ff		                bit $FF                      ;test for ESCAPE
10701	.eeb8		30 29		bmi $eee3	                bmi rtsF0EB                  ;taken if ESCAPE pressed
10702	.eeba		2c d1 02	bit $02d1	                bit bufferEmptyFlags+bufferPrinter
10703	.eebd		10 f5		bpl $eeb4	                bpl waitForPrinterDriverDormant ;taken if printer driver active
10704	.eebf		20 e4 e7	jsr $e7e4	                jsr callPrinterDriver    ;call with A=printerDriverFX5
10705	.eec2		a0 00		ldy #$00	                ldy #$00
10706	.eec4						LF0CC:
10707	.eec4		64 f1		stz $f1		                stz $F1

10709							                ; fall through to standard MOS variable handling,
10710							                ; affecting printerDriverType

10712							;-------------------------------------------------------------------------
10713							;
10714							; OSBYTE 1 (&01) Write user flag [MasRef D.2-18]
10715							;
10716	.eec6						osbyte01:
10717	.eec6		49 f0		eor #$f0	                eor #firstMOSVariableOSBYTE+(userFlag-mosVariables)-1 ;-1 because OSBYTE 1
10718	.eec8		80 07		bra $eed1	                bra osbyteA6X  ;jump to standard MOS variable handling

10720							;-------------------------------------------------------------------------
10721							;
10722							; OSBYTE 12 (&0C) Write keyboard auto-repeat rate [MasRef D.2-23]
10723							;
10724	.eeca						osbyte0C:
10725	.eeca		f0 2a		beq $eef6	                beq resetKeyRepeat    ;taken if X=0

10727							;-------------------------------------------------------------------------
10728							;
10729							; OSBYTE 11 (&0B) Write keyboard auto-repeat delay [MasRef D.2-22]
10730							;
10731	.eecc						osbyte0B:
10732							                ; TODO - turn this constant into an expression
10733	.eecc		69 cf		adc #$cf	                adc #$CF

10735							                ;if osbyte0C, A=$db
10736							                ;if osbyteOD, A=$dc

10738							;-------------------------------------------------------------------------
10739							;
10740							; OSBYTE 4 (&04) Enable/disable cursor editing [MasRef D.2-19]
10741							;
10742	.eece						osbyte04:
10743	.eece		18		clc		                clc
10744	.eecf		69 e9		adc #$e9	                adc #firstMOSVariableOSBYTE+(editKeysMode-mosVariables)-4 ;-4 because OSBYTE 4

10746							                ;if originally OSBYTE 4 (&04) Enable/disable cursor
10747							                ;editing [MasRef D.2-19], it's now OSBYTE 237 (&ED)
10748							                ;Read/write cursor editing status [MasRef D.2-77].
10749							                ;
10750							                ;if originally OSBYTE 12 (&0C) Write keyboard
10751							                ;auto-repeat rate [MasRef D.2-23], it's now OSBYTE 197
10752							                ;(&C5) Read/write keyboard auto-repeat rate [MasRef
10753							                ;D.2-60].
10754							                ;
10755							                ;if originally OSBYTE 11 (&0B) Write keyboard
10756							                ;auto-repeat delay [MasRef D.2-22], it's now OSBYTE
10757							                ;196 (&C4) Read/write keyboard auto-repeat delay
10758							                ;[MasRef D.2-60].

10760	.eed1						osbyteA6X:
10761	.eed1		86 f0		stx $f0		                stx originalX

10763							;-------------------------------------------------------------------------
10764							;
10765							; OSBYTE 166 (&A6) Read start address of MOS variables [MasRef D.2-50]
10766							;
10767	.eed3						osbyteA6:
10768	.eed3		a8		tay		                tay             ;
10769	.eed4		b9 90 01	lda $0190,y	                lda mosVariables-firstMOSVariableOSBYTE,y;
10770	.eed7		aa		tax		                tax             ;save old value
10771	.eed8		25 f1		and $f1		                and originalY   ;AND old value with Y
10772	.eeda		45 f0		eor $f0		                eor originalX   ;EOR old value with X
10773	.eedc		99 90 01	sta $0190,y	                sta mosVariables-firstMOSVariableOSBYTE,y     ;set new variable value
10774	.eedf		b9 91 01	lda $0191,y	                lda mosVariables-firstMOSVariableOSBYTE+1,y
10775	.eee2		a8		tay		                tay             ;Y=contents of next location
10776	.eee3						rtsF0EB:
10777	.eee3		60		rts		                rts

10779							;-------------------------------------------------------------------------
10780							;
10781							; This table is used to set the serial baud rate.
10782							;
10783							;   - bit 7 is not used (always clear)
10784							;   - bit 6 is not used (always set)
10785							;   - bits 3,4,5 indicate the serial receive baud rate
10786							;   - bits 0,1,2 indicate the serial transmit baud rate
10787							;
10788							;       111 =    75 baud
10789							;       011 =   150 baud
10790							;       101 =   300 baud
10791							;       001 =  1200 baud
10792							;       110 =  2400 baud
10793							;       010 =  4800 baud
10794							;       100 =  9600 baud
10795							;       000 = 19200 baud
10796							;
10797							                .if version!=400
10808							                .endif

10810							;-------------------------------------------------------------------------
10811							;
10812							; OSBYTE 19 (&13) Wait for vertical sync [MasRef D.2-26]
10813							;
10814	.eee4						osbyte13:
10815	.eee4		ad 40 02	lda $0240	                lda cfsTimeoutCounter
10816	.eee7						-
10817	.eee7		58		cli		                cli
10818	.eee8		78		sei		                sei
10819	.eee9		cd 40 02	cmp $0240	                cmp cfsTimeoutCounter
10820	.eeec		f0 f9		beq $eee7	                beq -

10822							                ; fall through to OSBYTE $a0 (!!)

10824							;-------------------------------------------------------------------------
10825							;
10826							; OSBYTE 160 (&A0) Read VDU variable value [MasRef D.2-49]
10827							;
10828	.eeee						osbyteA0:
10829	.eeee		bc 01 03	ldy $0301,x	                ldy vduv+1,x
10830	.eef1		bd 00 03	lda $0300,x	                lda vduv+0,x
10831	.eef4		aa		tax		                tax
10832	.eef5		60		rts		                rts

10834							;-------------------------------------------------------------------------
10835							;
10836							; Reset key auto repeat settings to the defaults set in CMOS.
10837							;
10838							                .if version==350
10841							                .endif
10842	.eef6						resetKeyRepeat:
10843	.eef6		20 73 f1	jsr $f173	                jsr withTerminalROM
10844							                .if version<500&&version!=350
10845	.eef9		20 91 8e	jsr $8e91	                jsr terminal.getDefaultKeyboardAutoRepeatDelay
10846	.eefc		8c 54 02	sty $0254	                sty keyboardAutoRepeatDelay
10847	.eeff		20 96 8e	jsr $8e96	                jsr terminal.getDefaultKeyboardAutoRepeatRate
10855							                .endif
10856	.ef02		ae 55 02	ldx $0255	                ldx keyboardAutoRepeatRate
10857	.ef05		8c 55 02	sty $0255	                sty keyboardAutoRepeatRate
10858	.ef08		60		rts		                rts

10860							;-------------------------------------------------------------------------
10861							;
10862							; OSBYTE 18 (&12) Reset soft keys [MasRef D.2-26]
10863							;
10864							; MasRef says X undefined on exit; in fact, X=0, and terminal.scanROMs
10865							; relies on this.
10866							;
10867	.ef09						osbyte12:
10868	.ef09		38		sec		                sec
10869	.ef0a		6e 84 02	ror $0284	                ror softKeyConsistencyFlag   ;mark soft keys inconsistent
10870	.ef0d		a5 f4		lda $f4		                lda $F4
10871	.ef0f		48		pha		                pha                          ;push selected paged ROM
10872	.ef10		20 8c e5	jsr $e58c	                jsr selectTerminalROMAndANDY

10874							                ; point each soft key at the 0th byte of the strings -
10875							                ; they all then have length 0.
10876	.ef13		a2 10		ldx #$10	                ldx #softKeyCount
10877	.ef15						-
10878	.ef15		a9 22		lda #$22	                lda #<andy.softKeys.strings
10879	.ef17		9d 00 80	sta $8000,x	                sta andy.softKeys.stringLSBs,x
10880	.ef1a		a9 80		lda #$80	                lda #>andy.softKeys.strings
10881	.ef1c		9d 11 80	sta $8011,x	                sta andy.softKeys.stringMSBs,x
10882	.ef1f		ca		dex		                dex
10883	.ef20		10 f3		bpl $ef15	                bpl -

10885	.ef22		68		pla		                pla                 ;pop previously selected paged ROM
10886	.ef23		20 9f e5	jsr $e59f	                jsr selectROMA

10888	.ef26		9c 68 02	stz $0268	                stz softKeyStringLength
10889	.ef29		9c 84 02	stz $0284	                stz softKeyConsistencyFlag   ;mark soft keys consistent
10890	.ef2c		e8		inx		                inx
10891	.ef2d		60		rts		                rts

10893							;-------------------------------------------------------------------------
10894							;
10895							; OSWORD 11 (&0B) Read the palette [MasRef D.3-20]
10896							;
10897	.ef2e						osword0B:
10898	.ef2e		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne
10899	.ef31		aa		tax		                tax
10900	.ef32		bd 6f 03	lda $036f,x	                lda vduv.currentPalette,x
10901	.ef35						LF146:
10902	.ef35		c8		iny		                iny
10903	.ef36						LF147:
10904	.ef36		91 f0		sta ($f0),y	                sta (originalX),y
10905	.ef38		a9 00		lda #$00	                lda #$00                     ;fill last 3 bytes with 0
10906	.ef3a		c0 04		cpy #$04	                cpy #$04
10907	.ef3c		d0 f7		bne $ef35	                bne LF146
10908	.ef3e		60		rts		                rts

10910							;-------------------------------------------------------------------------
10911							;
10912							; OSWORD 9 (&09) Read pixel logical colour [MasRef D.3-19]
10913							;
10914	.ef3f						osword09:                                    ;f150
10915	.ef3f		20 9a f1	jsr $f19a	                jsr withMOSROM               ; sF150= 20 AB F3     +s
10916	.ef42		a0 03		ldy #$03	                ldy #$03
10917	.ef44						-
10918	.ef44		b1 f0		lda ($f0),y	                lda (originalX),y
10919	.ef46		99 28 03	sta $0328,y	                sta vduv.workspace._28,y
10920	.ef49		b9 10 03	lda $0310,y	                lda $0310,y
10921	.ef4c		48		pha		                pha
10922	.ef4d		88		dey		                dey
10923	.ef4e		10 f4		bpl $ef44	                bpl -
10924	.ef50		a9 28		lda #$28	                lda #VDUVariables.workspace._28
10925	.ef52		20 b5 dd	jsr $ddb5	                jsr readPixelColour
10926	.ef55		aa		tax		                tax
10927	.ef56		a0 00		ldy #$00	                ldy #$00
10928	.ef58						LF169:
10929	.ef58		68		pla		                pla
10930	.ef59		99 10 03	sta $0310,y	                sta $0310,y
10931	.ef5c		c8		iny		                iny
10932	.ef5d		c0 04		cpy #$04	                cpy #$04
10933	.ef5f		d0 f7		bne $ef58	                bne LF169
10934	.ef61		8a		txa		                txa
10935	.ef62		80 d2		bra $ef36	                bra LF147

10937	.ef64						osword0A:                                    ;f175
10938	.ef64		20 2a e2	jsr $e22a	                jsr getSoftCharacterDefinitionAddress
10939	.ef67		a0 00		ldy #$00	                ldy #$00
10940	.ef69		a5 f4		lda $f4		                lda $F4
10941	.ef6b		48		pha		                pha
10942	.ef6c		20 8c e5	jsr $e58c	                jsr selectTerminalROMAndANDY
10943	.ef6f						LF180:
10944	.ef6f		b1 de		lda ($de),y	                lda ($DE),y
10945	.ef71		c8		iny		                iny
10946	.ef72		91 f0		sta ($f0),y	                sta ($F0),y
10947	.ef74		c0 08		cpy #$08	                cpy #$08
10948	.ef76		d0 f7		bne $ef6f	                bne LF180
10949	.ef78		fa		plx		                plx
10950	.ef79		4c 8e e5	jmp $e58e	                jmp selectROMX

10952	.ef7c						osword0C:                                    ;f18d
10953	.ef7c		20 9a f1	jsr $f19a	                jsr withMOSROM
10954	.ef7f		08		php		                php
10955	.ef80		2d 60 03	and $0360	                and $0360
10956	.ef83		aa		tax		                tax
10957	.ef84		c8		iny		                iny
10958	.ef85		b1 f0		lda ($f0),y	                lda ($F0),y
10959	.ef87		4c 39 c6	jmp $c639	                jmp LC639

10961	.ef8a						osword0D:                                    ;f19b
10962	.ef8a		20 9a f1	jsr $f19a	                jsr withMOSROM
10963	.ef8d		a9 03		lda #$03	                lda #$03
10964	.ef8f		20 94 ef	jsr $ef94	                jsr LF1A5
10965	.ef92		a9 07		lda #$07	                lda #$07
10966	.ef94						LF1A5:
10967	.ef94		48		pha		                pha
10968	.ef95		20 b4 e2	jsr $e2b4	                jsr LE2B6
10969	.ef98		20 df c4	jsr $c4df	                jsr LC4DF
10970	.ef9b		a2 03		ldx #$03	                ldx #$03
10971	.ef9d		68		pla		                pla
10972	.ef9e		a8		tay		                tay
10973	.ef9f						LF1B0:
10974	.ef9f		bd 10 03	lda $0310,x	                lda $0310,x
10975	.efa2		91 f0		sta ($f0),y	                sta ($F0),y
10976	.efa4		88		dey		                dey
10977	.efa5		ca		dex		                dex
10978	.efa6		10 f7		bpl $ef9f	                bpl LF1B0
10979	.efa8		60		rts		                rts

10981							; Read address of bottom of screen/top of user memory
10982							; ===================================================
10983	.efa9						osbyte84:                     ;f1ba
10984	.efa9		a5 d0		lda $d0		                lda STATE     ; Get VDU status
10985	.efab		89 10		bit #$10	                bit #STATE.isShadowMode ; If shadow screen, jump to return &8000
10986	.efad		d0 18		bne $efc7	                bne LF1D8
10987	.efaf						LF1C0:
10988	.efaf		ad 55 03	lda $0355	                lda $0355                    ; Get current screen MODE

10990							; Return start of screen for non-shadow MODE in X
10991							; -----------------------------------------------
10992	.efb2						LF1C3:
10993	.efb2		29 07		and #$07	                and #$07
10994	.efb4		a8		tay		                tay
10995	.efb5		be 66 e1	ldx $e166,y	                ldx screenMODEGroupForMODE,y ; Get screen map for supplied MODE
10996	.efb8		bd 7c e1	lda $e17c,x	                lda startScreenAddressHighByteForScreenMODEGroup,x ; Get address top byte for this screen map
10997	.efbb						LF1CC:
10998	.efbb		a2 00		ldx #$00	                ldx #$00                     ; Address=&xx00
10999	.efbd		a8		tay		                tay
11000	.efbe		60		rts		                rts

11002							;-------------------------------------------------------------------------
11003							;
11004							; OSBYTE 133 (&85) Read top of user RAM for given mode [MasRef D.2-41]
11005							;
11006	.efbf						osbyte85:
11007	.efbf		8a		txa		                txa                          ; If MODE &80+n, return &8000
11008	.efc0		30 05		bmi $efc7	                bmi LF1D8
11009	.efc2		ae 7f 02	ldx $027f	                ldx shadowRAMState ; If *SHADOW<>0, jump to return non-shadow address
11010	.efc5		d0 eb		bne $efb2	                bne LF1C3
11011	.efc7						LF1D8:
11012	.efc7		a9 80		lda #$80	                lda #$80                     ; Return &8000
11013	.efc9		80 f0		bra $efbb	                bra LF1CC

11015							;-------------------------------------------------------------------------
11016							;
11017							; OSBYTE 135 (&87) Read screen mode and character at text cursor
11018							; position [MasRef D.2-42]
11019							;
11020	.efcb						osbyte87: ;F1DC:
11021	.efcb		20 9a f1	jsr $f19a	                jsr withMOSROM
11022	.efce		4c f6 dd	jmp $ddf6	                jmp readCharacterAtTextCursor

11024							;-------------------------------------------------------------------------
11025							;
11026							; OSBYTE 139 (&8B) Write Filing System options [MasRef D.2-43]
11027							;
11028	.efd1						osbyte8B:
11029	.efd1		0a		asl a		                asl a

11031							;-------------------------------------------------------------------------
11032							;
11033							; OSBYTE 127 (&7F) Check for end of file on an opened file [MasRef D.2-37]
11034							;
11035	.efd2						osbyte7F:
11036	.efd2		29 01		and #$01	                and #$01

11038							;-------------------------------------------------------------------------
11039							;
11040							; Call OSFSC. There's no entry point for this.
11041							;
11042	.efd4						callFSCV:
11043	.efd4		6c 1e 02	jmp ($021e)	                jmp (FSCV)

11045							;-------------------------------------------------------------------------
11046							;
11047							; OSWORD 15 (&0F) Write CMOS clock [MasRef D.3-24]
11048							;
11049							                .if version!=350
11050	.efd7						osword0F:
11051	.efd7		20 73 f1	jsr $f173	                jsr withTerminalROM       ; Page in ROM 15
11052	.efda		4c ea 98	jmp $98ea	                jmp terminal.osword0F
11053							                .endif

11055							;-------------------------------------------------------------------------

11057							; Set TAPE/ROM extended vectors
11058							; =============================
11059	.efdd						LF1EE:
11060	.efdd		a2 15		ldx #$15	                ldx #$15
11061	.efdf						LF1F0:
11062	.efdf		bd e8 ef	lda $efe8,x	                lda LF1FA-1,x
11063	.efe2		9d b9 0d	sta $0db9,x	                sta ExtendedVectorAddress(FILEV)-1,x
11064	.efe5		ca		dex		                dex
11065	.efe6		d0 f7		bne $efdf	                bne LF1F0
11066	.efe8						LF1F9:
11067	.efe8		60		rts		                rts

11069							; TAPE/ROM extended vector values
11070							; -------------------------------
11071	.efe9						LF1FA:
11072	>efe9		e0 a8				                .word terminal.osfileTapeOrROM ; FILEV
11073	>efeb		0f				                .byte terminalROM
11074	>efec		8c a7				                .word terminal.osargsTapeOrROM ; ARGSV
11075	>efee		0f				                .byte terminalROM
11076	>efef		39 aa				                .word terminal.bputTapeOrROM ; BPUTV
11077	>eff1		0f				                .byte terminalROM
11078							                .if version==400
11079	>eff2		bd fa				                .word mos.badCommandError
11082							                .endif
11083	>eff4		0f				                .byte terminalROM
11084	>eff5		9a aa				                .word terminal.osgbpbTapeOrROM ; GBPBV
11085	>eff7		0f				                .byte terminalROM
11086	>eff8		db a9				                .word terminal.osfindTapeOrROM ; FINDV
11087	>effa		0f				                .byte terminalROM
11088	>effb		e8 a7				                .word terminal.fscTapeOrROM  ; FSCV
11089	>effd		0f				                .byte terminalROM

11091							;-------------------------------------------------------------------------
11092							;
11093							; OSBYTE 109 (&6D) Make temporary Filing System permanent
11094							;
11095							; MasRef D.2-30
11096							;
11097	.effe						osbyte6D:;f20f
11098	.effe		ae 01 df	ldx $df01	                ldx hazel.activeFS; Copy active FS to current FS
11099	.f001		8e 00 df	stx $df00	                stx hazel.currentFS
11100	.f004		ad bc 0d	lda $0dbc	                lda ExtendedVectorAddress(FILEV)+2 ; Copy XFILEV ROM to current FS ROM number
11101	.f007		8d 03 df	sta $df03	                sta hazel.currentFSROM
11102	.f00a						rtsF180:
11103	.f00a		60		rts		                rts

11105							;-------------------------------------------------------------------------
11106							;
11107							; OSBYTE 20 (&14) Restore default font definitions
11108							;
11109							; MasRef D.2-24
11110							;
11111							                .if version!=350
11112	.f00b						osbyte14:                       ;f21c
11113	.f00b		20 73 f1	jsr $f173	                jsr withTerminalROM
11114	.f00e		4c 38 95	jmp $9538	                jmp terminal.restoreFont32To126
11115							                .endif

11117							;-------------------------------------------------------------------------
11118							;
11119							; OSBYTE 25 (&19) Restore a group of font definitions
11120							;
11121							; MasRef D.2-28
11122							;
11123	.f011						osbyte19:                       ;f222
11124							                .if version>=511||version==350
11133							                .endif
11134	.f011		20 73 f1	jsr $f173	                jsr withTerminalROM
11135	.f014		4c 3c 95	jmp $953c	                jmp terminal.osbyte19

11137							;-------------------------------------------------------------------------

11139							; OSBYTE &16 - Increment ROM polling semaphore
11140							; ========================================
11141	.f017						osbyte16:                       ;f228
11142	.f017		ee 43 02	inc $0243	                inc romPollingSemaphore
11143	.f01a						LF2EB:
11144	.f01a		60		rts		                rts

11146							;-------------------------------------------------------------------------

11148							; OSBYTE &17 - Decrement ROM polling semaphore
11149	.f01b						osbyte17:                       ;f22c
11150							; ========================================
11151	.f01b		ce 43 02	dec $0243	                dec romPollingSemaphore
11152	.f01e		60		rts		                rts

11154							;-------------------------------------------------------------------------

11156							                .if version==350
11164							                .endif

11166							;-------------------------------------------------------------------------

11168							; OSBYTE &76 - Set LEDs to keyboard state
11169							; =======================================
11170	.f01f						osbyte76:
11171	.f01f		08		php		                php                          ; Disable IRQs
11172	.f020		78		sei		                sei
11173	.f021		a9 40		lda #$40	                lda #$40                     ; Turn on LEDs
11174	.f023		20 30 f0	jsr $f030	                jsr LF241
11175	.f026		30 05		bmi $f02d	                bmi LF23E                    ; Exit if Escape pending
11176	.f028		18		clc		                clc                          ; Call KEYV to read SHIFT and CTRL
11177	.f029		b8		clv		                clv
11178	.f02a		20 f1 f6	jsr $f6f1	                jsr callKEYV
11179							; Returns A.b7=CTRL, A.b6=SHIFT, MI=CTRL, VS=SHIFT
11180	.f02d						LF23E:
11181	.f02d		28		plp		                plp                          ; Restore IRQs
11182	.f02e		2a		rol a		                rol a                        ; Set Carry from A bit 7 and return
11183	.f02f		60		rts		                rts
11184							; Returns A.b7=SHIFT, CS=CTRL

11186							; Set keyboard LEDs
11187							; -----------------
11188	.f030						LF241:
11189	.f030		90 09		bcc $f03b	                bcc LF24C                    ; Skip if not called from OSBYTE
11190	.f032		a0 07		ldy #$07	                ldy #$07                     ; Turn ShiftLock LED on
11191	.f034		8c 40 fe	sty $fe40	                sty systemVIA.orb
11192	.f037		88		dey		                dey                          ; Turn CapsLock LED on
11193	.f038		8c 40 fe	sty $fe40	                sty systemVIA.orb
11194	.f03b						LF24C:
11195	.f03b		24 ff		bit $ff		                bit $FF                      ; Test Escape and return
11196	.f03d		60		rts		                rts

11198							;-------------------------------------------------------------------------

11200	.f03e						osbyte9A:
11201	.f03e		8a		txa		                txa
11202	.f03f						setVCONTROL:
11203	.f03f		08		php		                php
11204	.f040		78		sei		                sei
11205	.f041		8d 48 02	sta $0248	                sta vcontrolRegister
11206	.f044		8d 20 fe	sta $fe20	                sta VCONTROL
11207	.f047		ad 53 02	lda $0253	                lda secondFlashColourDuration
11208	.f04a		8d 51 02	sta $0251	                sta flashCounter
11209	.f04d		28		plp		                plp
11210	.f04e		60		rts		                rts

11212							;-------------------------------------------------------------------------
11213							;
11214							; OSBYTE 155 (&9B) Write to video ULA palette register and copy
11215							;
11216	.f04f						osbyte9B:
11217	.f04f		8a		txa		                txa
11218	.f050						writeVPALETTE:
11219	.f050		49 07		eor #$07	                eor #$07
11220	.f052		08		php		                php
11221	.f053		78		sei		                sei
11222	.f054		8d 49 02	sta $0249	                sta vpaletteRegister
11223	.f057		8d 21 fe	sta $fe21	                sta VPALETTE
11224	.f05a		28		plp		                plp
11225	.f05b		60		rts		                rts

11227							;-------------------------------------------------------------------------

11229	.f05c						gsinitForFilenameParsing:
11230	.f05c		18		clc		                clc


11233							;-------------------------------------------------------------------------
11234							;
11235							; GSINIT
11236							;
11237							; MasRef D.10-1
11238							;
11239	.f05d						gsinitEntryPoint:
11240	.f05d		66 e4		ror $e4		                ror stringInputOptions    ;put C into bit 7
11241	.f05f		20 ee f0	jsr $f0ee	                jsr skipSpacesAndCheckForCRInStringInput
11242	.f062		c8		iny		                iny
11243	.f063		c9 22		cmp #$22	                cmp #'"'
11244	.f065		f0 02		beq $f069	                beq +                       ; C=1 if double quotes
11245	.f067		88		dey		                dey
11246	.f068		18		clc		                clc                         ; clear double quotes flag
11247	.f069						+
11248	.f069		66 e4		ror $e4		                ror stringInputOptions ; set doubleQuotes; move bit 7 into spaceNotATerminator
11249	.f06b		c9 0d		cmp #$0d	                cmp #$0D                     ; set Z if initial CR
11250	.f06d		60		rts		                rts

11252							;-------------------------------------------------------------------------
11253							;
11254							; GSREAD
11255							;
11256							; MasRef D.10-2
11257							; MasRef C.5-8 has the | syntax
11258							;
11259	.f06e						gsreadEntryPoint:
11260	.f06e		a9 01		lda #$01	                lda #stringInputOptions.goodString
11261	.f070		04 e4		tsb $e4		                tsb stringInputOptions
11262	.f072		20 8b f0	jsr $f08b	                jsr LF29C
11263	.f075		08		php		                php                          ; save flags
11264	.f076		46 e4		lsr $e4		                lsr stringInputOptions       ; move goodString into C
11265	.f078		90 04		bcc $f07e	                bcc badStringError           ; branch taken if bad string
11266	.f07a		26 e4		rol $e4		                rol stringInputOptions       ; reinstate goodString
11267	.f07c		28		plp		                plp                          ; restore flags
11268	.f07d		60		rts		                rts                          ;

11270	.f07e						badStringError:
11271	.f07e		00		brk #		                brk                          ;
11272	>f07f		fd 42 61 64 20 73 74 72		                .text $fd,"Bad string",0
	>f087		69 6e 67 00
11273	.f08b						LF29C:
11274	.f08b		18		clc		                clc                          ; last char not !
11275	.f08c						LF29D:
11276							                ; C=1 at this point if |! was the last sequence seen.
11277	.f08c		64 e5		stz $e5		                stz stringInputPlingFlag
11278	.f08e		66 e5		ror $e5		                ror stringInputPlingFlag     ; set ! flag as required
11279	.f090		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11280	.f092		c9 0d		cmp #$0d	                cmp #13                      ;EOL?
11281	.f094		d0 09		bne $f09f	                bne notRETURN                ;taken if not EOL
11282	.f096		24 e4		bit $e4		                bit stringInputOptions
11283	.f098		10 20		bpl $f0ba	                bpl finishedString           ;taken if !doubleQuotes
11284	.f09a						badString:
11285	.f09a		a9 01		lda #$01	                lda #stringInputOptions.goodString
11286	.f09c		14 e4		trb $e4		                trb stringInputOptions
11287	.f09e		60		rts		                rts

11289	.f09f						notRETURN:
11290	.f09f		c9 20		cmp #$20	                cmp #' '
11291	.f0a1		90 f7		bcc $f09a	                bcc badString ;taken if unprintable control char
11292	.f0a3		d0 06		bne $f0ab	                bne notSPACE
11293	.f0a5		24 e4		bit $e4		                bit stringInputOptions ;N=doubleQuotes, V=spaceNotATerminator
11294	.f0a7		30 3e		bmi $f0e7	                bmi finishUpReadClearV ;taken if quoted
11295	.f0a9		50 0f		bvc $f0ba	                bvc finishedString ;taken if space is a terminator
11296	.f0ab						notSPACE:
11297	.f0ab		c9 22		cmp #$22	                cmp #'"'
11298	.f0ad		d0 10		bne $f0bf	                bne notDOUBLEQUOTE         ;taken if not quotes
11299	.f0af		24 e4		bit $e4		                bit stringInputOptions ;N=doubleQuotes, V=spaceNotATerminator
11300	.f0b1		10 34		bpl $f0e7	                bpl finishUpReadClearV ;taken if not double quotes
11301	.f0b3		c8		iny		                iny
11302	.f0b4		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11303	.f0b6		c9 22		cmp #$22	                cmp #'"'
11304	.f0b8		f0 2d		beq $f0e7	                beq finishUpReadClearV       ;taken if quotes
11305	.f0ba						finishedString:
11306	.f0ba		20 ee f0	jsr $f0ee	                jsr skipSpacesAndCheckForCRInStringInput
11307	.f0bd		38		sec		                sec
11308	.f0be		60		rts		                rts

11310	.f0bf						notDOUBLEQUOTE:
11311	.f0bf		c9 7c		cmp #$7c	                cmp #'|'
11312	.f0c1		d0 24		bne $f0e7	                bne finishUpReadClearV       ;taken if not |
11313	.f0c3		c8		iny		                iny                          ;skip |
11314	.f0c4		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11315	.f0c6		c9 7c		cmp #$7c	                cmp #'|'
11316	.f0c8		f0 1d		beq $f0e7	                beq finishUpReadClearV ;branch taken if "||" - literal |
11317	.f0ca		c9 22		cmp #$22	                cmp #'"'
11318	.f0cc		f0 19		beq $f0e7	                beq finishUpReadClearV ;branch taken if "|\"" - literal "
11319	.f0ce		c9 21		cmp #$21	                cmp #'!'
11320	.f0d0		d0 03		bne $f0d5	                bne LF2E6                    ;taken if not "|!"

11322							                ; Handle |! - ASCII 128-255
11323	.f0d2		c8		iny		                iny                          ;skip !
11324	.f0d3		80 b7		bra $f08c	                bra LF29D

11326	.f0d5						LF2E6:
11327	.f0d5		c9 20		cmp #$20	                cmp #' '
11328	.f0d7		90 c1		bcc $f09a	                bcc badString ;taken if | followed by a non-printable char
11329	.f0d9		c9 3f		cmp #$3f	                cmp #'?'
11330	.f0db		f0 08		beq $f0e5	                beq ascii127                 ;taken if "|?" - CHR$127
11331	.f0dd		20 25 f1	jsr $f125	                jsr implementCTRLCodes
11332	.f0e0		2c 5e e3	bit $e35e	                bit valueFF
11333	.f0e3		80 03		bra $f0e8	                bra LF2F9

11335	.f0e5						ascii127:
11336	.f0e5		a9 7f		lda #$7f	                lda #$7F
11337	.f0e7						finishUpReadClearV:
11338	.f0e7		b8		clv		                clv
11339	.f0e8						LF2F9:
11340	.f0e8		c8		iny		                iny
11341	.f0e9		05 e5		ora $e5		                ora stringInputPlingFlag ;if it was a |! char, set bit 7
11342	.f0eb		18		clc		                clc
11343	.f0ec		60		rts		                rts

11345							;-------------------------------------------------------------------------

11347	.f0ed						incAndSkipSpaces:
11348	.f0ed		c8		iny		                iny
11349	.f0ee						skipSpacesAndCheckForCRInStringInput:
11350	.f0ee		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11351	.f0f0		c9 20		cmp #$20	                cmp #' '
11352	.f0f2		f0 f9		beq $f0ed	                beq incAndSkipSpaces
11353	.f0f4						checkForCR:
11354	.f0f4		c9 0d		cmp #$0d	                cmp #13
11355	.f0f6		60		rts		                rts

11357							;-------------------------------------------------------------------------

11359	.f0f7						LF308:
11360	.f0f7		90 f5		bcc $f0ee	                bcc skipSpacesAndCheckForCRInStringInput
11361	.f0f9						LF30A:
11362	.f0f9		20 ee f0	jsr $f0ee	                jsr skipSpacesAndCheckForCRInStringInput
11363	.f0fc		c9 2c		cmp #$2c	                cmp #','
11364	.f0fe		d0 f4		bne $f0f4	                bne checkForCR
11365	.f100		c8		iny		                iny
11366	.f101		60		rts		                rts

11368							;-------------------------------------------------------------------------

11370							                .if version==510&&olivetti
11459							                .endif

11461							;-------------------------------------------------------------------------
11462							;
11463							; Modify character in A as if the SHIFT key is being pressed.
11464							;

11466	.f102						implementShift:
11467							                .if version<500&&version!=350

11469	.f102		c9 30		cmp #$30	                cmp #'0'
11470	.f104		f0 1e		beq $f124	                beq gotShiftedChar           ;taken if SHIFT+0 - no change
11471	.f106		c9 40		cmp #$40	                cmp #$40
11472	.f108		f0 1a		beq $f124	                beq gotShiftedChar           ;taken if SHIFT+@ - no change
11473	.f10a		90 12		bcc $f11e	                bcc shiftMaybeNumber ;taken if probably a "number" (ASCII 33-63)
11474	.f10c		c9 7f		cmp #$7f	                cmp #$7F
11475	.f10e		f0 14		beq $f124	                beq gotShiftedChar  ;taken if SHIFT+DELETE - no change
11476	.f110		b0 10		bcs $f122	                bcs shiftNumber     ;taken if SHIFT+CHR$>=127 - ???
11477	.f112						flipBitsForShift:
11478	.f112		49 30		eor #$30	                eor #$30                     ;
11479	.f114		c9 6f		cmp #$6f	                cmp #$6F                     ;
11480	.f116		f0 04		beq $f11c	                beq +                        ;taken if originally _
11481	.f118		c9 50		cmp #$50	                cmp #$50                     ;
11482	.f11a		d0 02		bne $f11e	                bne shiftMaybeNumber         ;taken if not originally GBP
11483	.f11c						+
11484	.f11c		49 1f		eor #$1f	                eor #$1F                     ;extra step for GBP/_ toggle
11485	.f11e						shiftMaybeNumber:
11486	.f11e		c9 21		cmp #$21	                cmp #' '+1
11487	.f120		90 02		bcc $f124	                bcc gotShiftedChar         ;taken if non-printing char
11488	.f122						shiftNumber:
11489	.f122		49 10		eor #$10	                eor #$10                     ;
11490	.f124						gotShiftedChar:
11491	.f124		60		rts		                rts

11537							                .endif

11539							;-------------------------------------------------------------------------
11540							;
11541							; See MasRef C.5-8
11542							;
11543							;
11544	.f125						implementCTRLCodes:
11545							                .if version<500&&version!=350

11547	.f125		c9 7f		cmp #$7f	                cmp #$7F
11548	.f127		f0 0e		beq $f137	                beq gotCtrlChar
11549	.f129		b0 e7		bcs $f112	                bcs flipBitsForShift         ;taken if CHR$>=128
11550	.f12b		c9 60		cmp #$60	                cmp #$60
11551	.f12d		d0 02		bne $f131	                bne +                        ;taken if not GBP
11552	.f12f		a9 5f		lda #$5f	                lda #'_'                     ;GBP and _ are equivalent
11553	.f131						+
11554	.f131		c9 40		cmp #$40	                cmp #$40                     ;
11555	.f133		90 02		bcc $f137	                bcc gotCtrlChar              ;taken if CHR$<64
11556	.f135		29 1f		and #$1f	                and #$1F                     ;|@=0, |A=1, |a=1, etc.
11557	.f137						gotCtrlChar:
11558	.f137		60		rts		                rts

11590							                .endif

11592							;-------------------------------------------------------------------------

11594	.f138						osbyte247EntryPoint:
11595							                .if version==350
11598							                .endif
11599	.f138		ad 87 02	lda $0287	                lda breakVectorByte0
11600	.f13b		49 4c		eor #$4c	                eor #$4C                     ; JMP abs
11601	.f13d		d0 13		bne $f152	                bne rtsF363
11602							                .if version==350
11605							                .elsif version<500
11606	.f13f		4c 87 02	jmp $0287	                jmp breakVectorByte0
11614							                .endif

11616							;-------------------------------------------------------------------------
11617							;
11618							; OSBYTE 144 (&90)
11619							; Set vertical screen shift and interlace
11620							;
11621							; MasRef D.2-44
11622							;
11623	.f142						osbyte90:
11624	.f142		ad 90 02	lda $0290	                lda tvOffset
11625	.f145		8e 90 02	stx $0290	                stx tvOffset
11626	.f148		aa		tax		                tax
11627	.f149		98		tya		                tya
11628	.f14a		29 01		and #$01	                and #$01
11629	.f14c		ac 91 02	ldy $0291	                ldy tvInterlace
11630	.f14f		8d 91 02	sta $0291	                sta tvInterlace
11631	.f152						rtsF363:
11632	.f152		60		rts		                rts

11634							;-------------------------------------------------------------------------
11635							;
11636							; OSBYTE 149 (&95) â<80><93> write to JIM
11637							;
11638							; MasRef D.2-45
11639							;
11640	.f153						osbyte95:
11641	.f153		98		tya		                tya
11642	.f154		9d 00 fd	sta $fd00,x	                sta $FD00,x
11643	.f157		60		rts		                rts

11645							;-------------------------------------------------------------------------
11646							;
11647							; OSBYTE 151 (&97) â<80><93> write to SHEILA
11648							;
11649							; MasRef D.2-45
11650							;
11651	.f158						osbyte97:
11652	.f158		98		tya		                tya
11653	.f159		9d 00 fe	sta $fe00,x	                sta $FE00,x
11654	.f15c		60		rts		                rts

11656							;-------------------------------------------------------------------------
11657							;
11658							; OSBYTE 147 (&93) â<80><93> write to FRED
11659							;
11660							; MasRef D.2-45
11661							;
11662	.f15d						osbyte93:
11663	.f15d		98		tya		                tya
11664	.f15e		9d 00 fc	sta $fc00,x	                sta $FC00,x
11665	.f161		60		rts		                rts

11667							;-------------------------------------------------------------------------
11668							;
11669							; *SHUT [MasRef G.5-10]
11670							;
11671	.f162						starSHUT:
11672	.f162		a2 26		ldx #$26	                ldx #romServiceCallCloseAllOpenFiles
11673	.f164		4c 52 ec	jmp $ec52	                jmp makeROMServiceCall

11675							;-------------------------------------------------------------------------
11676							;
11677							; Return thunk used by withTerminalROM.
11678							;
11679							; On entry here, the old value of $f4 is at the top of the stack.
11680							;
11681	.f167						withTerminalROMReturnThunk:
11682	.f167		08		php		                php                          ; S=[p; old ROMSEL]
11683	.f168		48		pha		                pha                          ; S=[a; p; old ROMSEL]
11684	.f169		da		phx		                phx                          ; S=[x; a; p; old ROMSEL]
11685	.f16a		ba		tsx		                tsx
11686	.f16b		bd 04 01	lda $0104,x	                lda $0104,x                  ; get old ROMSEL
11687	.f16e		20 9f e5	jsr $e59f	                jsr selectROMA               ; re-select old ROM
11688	.f171		80 5d		bra $f1d0	                bra returnThunkSuffix

11690							;-------------------------------------------------------------------------
11691							;
11692							; Select the Terminal ROM. Rearrange the stack so that the original
11693							; ROM is re-selected when withTerminalROM's caller itself returns.
11694							;
11695	.f173						withTerminalROM:
11696							                .if version==350
11704							                .else
11705	.f173		48		pha		                pha                          ; S=[A]
11706	.f174		48		pha		                pha                          ; S=[A; A]
11707	.f175		48		pha		                pha                          ; S=[A; A; A]
11708	.f176		08		php		                php                          ; S=[P; A; A; A]
11709	.f177		48		pha		                pha                          ; S=[A; P; A; A; A]
11710	.f178		da		phx		                phx                          ; S=[X; A; P; A; A; A]
11711	.f179		ba		tsx		                tsx                          ; S=[X; A; P; A; A; A; RL; RH]
11712	.f17a		bd 07 01	lda $0107,x	                lda $0107,x                  ; get RL
11713	.f17d		9d 04 01	sta $0104,x	                sta $0104,x                  ; overwrite placeholder A
11714	.f180		bd 08 01	lda $0108,x	                lda $0108,x                  ; get RH
11715	.f183		9d 05 01	sta $0105,x	                sta $0105,x                  ; overwrite placeholder A
11716	.f186		a5 f4		lda $f4		                lda $F4                      ; get ROMSEL
11717	.f188		9d 08 01	sta $0108,x	                sta $0108,x                  ; overwrite RH

11719							                ; put return thunk in the right spot
11720	.f18b		a9 f1		lda #$f1	                lda #>withTerminalROMReturnThunk-1
11721	.f18d		9d 07 01	sta $0107,x	                sta $0107,x
11722	.f190		a9 66		lda #$66	                lda #<withTerminalROMReturnThunk-1
11723	.f192		9d 06 01	sta $0106,x	                sta $0106,x
11724							                .endif
11725	.f195		20 9d e5	jsr $e59d	                jsr selectTerminalROM
11726	.f198		80 28		bra $f1c2	                bra plx_pla_plp_rts

11728							;-------------------------------------------------------------------------
11729							;
11730							; Select the MOS ROM (i.e., no HAZEL). Rearrange the stack so that the
11731							; original HAZEL state is restored when withMOSROM's caller itself
11732							; returns.
11733							;
11734	.f19a						withMOSROM:
11735							                .if version==350
11744							                .else
11745	.f19a		48		pha		                pha                          ; S=[A]
11746	.f19b		48		pha		                pha                          ; S=[A; A]
11747	.f19c		48		pha		                pha                          ; S=[A; A; A]
11748	.f19d		08		php		                php                          ; S=[P; A; A; A]
11749	.f19e		48		pha		                pha                          ; S=[A; P; A; A; A]
11750	.f19f		da		phx		                phx                          ; S=[X; A; P; A; A; A]
11751	.f1a0		ba		tsx		                tsx                          ; S=[X; A; P; A; A; A; RL; RH]
11752	.f1a1		bd 08 01	lda $0108,x	                lda $0108,x                  ; get RH
11753	.f1a4		9d 05 01	sta $0105,x	                sta $0105,x                  ; overwrite placeholder A
11754	.f1a7		bd 07 01	lda $0107,x	                lda $0107,x                  ; get RL
11755	.f1aa		9d 04 01	sta $0104,x	                sta $0104,x                  ; overwrite placeholder A

11757							                ; put return thunk in the right spot
11758	.f1ad		a9 f1		lda #$f1	                lda #>withMOSROMReturnThunk-1
11759	.f1af		9d 07 01	sta $0107,x	                sta $0107,x
11760	.f1b2		a9 c5		lda #$c5	                lda #<withMOSROMReturnThunk-1
11761	.f1b4		9d 06 01	sta $0106,x	                sta $0106,x

11763	.f1b7		ad 34 fe	lda $fe34	                lda ACCCON                   ; get ACCCON
11764	.f1ba		9d 08 01	sta $0108,x	                sta $0108,x                  ; overwrite RH
11765	.f1bd		a9 08		lda #$08	                lda #ACCCON.Y
11766	.f1bf		1c 34 fe	trb $fe34	                trb ACCCON
11767							                ; HAZEL off
11768							                .endif
11769	.f1c2						plx_pla_plp_rts:
11770							                ; S=[X; A; P; RL; RH; thunkRL; thunkRH; old ACCCON/ROMSEL]
11771	.f1c2		fa		plx		                plx
11772	.f1c3		68		pla		                pla
11773	.f1c4		28		plp		                plp
11774	.f1c5		60		rts		                rts

11776	.f1c6						withMOSROMReturnThunk:
11777	.f1c6		08		php		                php                          ; S=[P]
11778	.f1c7		48		pha		                pha                          ; S=[A; P]
11779	.f1c8		da		phx		                phx                          ; S=[X; A; P]
11780	.f1c9		ba		tsx		                tsx                          ; S=[X; A; P; old ACCCON]
11781	.f1ca		bd 04 01	lda $0104,x	                lda $0104,x                  ; get old ACCCON
11782	.f1cd		20 af eb	jsr $ebaf	                jsr selectMOSOrHAZEL         ; re-select old HAZEL state
11783	.f1d0						returnThunkSuffix:
11784							                ; double up P, as that's the easiest way of ending up
11785							                ; discarding the TOS without affecting the flags.
11786	.f1d0		bd 03 01	lda $0103,x	                lda $0103,x
11787	.f1d3		9d 04 01	sta $0104,x	                sta $0104,x
11788	.f1d6		fa		plx		                plx
11789	.f1d7		68		pla		                pla
11790	.f1d8		28		plp		                plp
11791	.f1d9		28		plp		                plp
11792	.f1da		60		rts		                rts

11794							;-------------------------------------------------------------------------

11796							                .if version==350
11819							                .endif

11821							;-------------------------------------------------------------------------

11823							                .if version==350
11840							                .endif

11842							;-------------------------------------------------------------------------

11844	.f1db						vduChrEntryPoint:
11845	.f1db		20 9a f1	jsr $f19a	                jsr withMOSROM
11846	.f1de		a6 f4		ldx $f4		                ldx $F4
11847	.f1e0		da		phx		                phx
11848	.f1e1		20 8c e5	jsr $e58c	                jsr selectTerminalROMAndANDY
11849	.f1e4		20 27 c0	jsr $c027	                jsr outputToVDU
11850	.f1e7		fa		plx		                plx
11851	.f1e8		4c 8e e5	jmp $e58e	                jmp selectROMX

11853							;-------------------------------------------------------------------------
11854							;
11855							; OSRDSC [MasRef D.6-1]
11856							;
11857	.f1eb						osrdscEntryPoint:
11858	.f1eb		20 9a f1	jsr $f19a	                jsr withMOSROM
11859	.f1ee		4c 18 c0	jmp $c018	                jmp LC018

11861							;-------------------------------------------------------------------------
11862							;
11863							; OSWRSC [MasRef D.8-1]
11864							;
11865	.f1f1						oswrscEntryPoint:
11866	.f1f1		20 9a f1	jsr $f19a	                jsr withMOSROM
11867	.f1f4		4c 5d db	jmp $db5d	                jmp oswrscCode

11869							;-------------------------------------------------------------------------

11871	.f1f7						starRunBOOT:
11872	>f1f7		2f 21 42 4f 4f 54 0d		                .text "/!BOOT",13

11874							;-------------------------------------------------------------------------

11876							                .if version<500&&version!=350
11877							                .include "sound_stuff.s65"

:16	;******  Processing file: src/sound_stuff.s65

1							; Table to convert channel number to the bits required by the chip
2	.f1fe						soundParameterTable:
3	>f1fe		e0 c0 a0 80			                .byte $e0,$c0,$a0,$80

5							;-------------------------------------------------------------------------

7	.f202						LF413:
8	.f202		4c 0f f3	jmp $f30f	                jmp LF520

10							;-------------------------------------------------------------------------

12	.f205						LF416:
13	.f205		a2 00		ldx #$00	                ldx #$00
14	.f207		ad 38 08	lda $0838	                lda $0838
15	.f20a		d0 04		bne $f210	                bne LF421
16	.f20c		e8		inx		                inx
17	.f20d		ce 38 08	dec $0838	                dec $0838
18	.f210						LF421:
19	.f210		8e 3b 08	stx $083b	                stx $083B
20	.f213		a2 08		ldx #$08	                ldx #$08
21	.f215						LF426:
22	.f215		ca		dex		                dex
23	.f216		bd 00 08	lda $0800,x	                lda $0800,x
24	.f219		f0 e7		beq $f202	                beq LF413
25	.f21b		bd ce 02	lda $02ce,x	                lda bufferEmptyFlags,x
26	.f21e		30 05		bmi $f225	                bmi LF436
27	.f220		bd 18 08	lda $0818,x	                lda $0818,x
28	.f223		d0 08		bne $f22d	                bne LF43E
29	.f225						LF436:
30	.f225		20 17 f3	jsr $f317	                jsr LF528
31	.f228		bd 18 08	lda $0818,x	                lda $0818,x
32	.f22b		f0 12		beq $f23f	                beq LF450
33	.f22d						LF43E:
34	.f22d		1a		inc a		                inc a
35	.f22e		f0 12		beq $f242	                beq LF453
36	.f230		de 1c 08	dec $081c,x	                dec $081C,x
37	.f233		d0 0d		bne $f242	                bne LF453
38	.f235		a9 05		lda #$05	                lda #$05
39	.f237		9d 1c 08	sta $081c,x	                sta $081C,x
40	.f23a		de 18 08	dec $0818,x	                dec $0818,x
41	.f23d		d0 03		bne $f242	                bne LF453
42	.f23f						LF450:
43	.f23f		20 17 f3	jsr $f317	                jsr LF528
44	.f242						LF453:
45	.f242		bd 24 08	lda $0824,x	                lda $0824,x
46	.f245		f0 05		beq $f24c	                beq LF45D
47	.f247		de 24 08	dec $0824,x	                dec $0824,x
48	.f24a		d0 b6		bne $f202	                bne LF413
49	.f24c						LF45D:
50	.f24c		bc 20 08	ldy $0820,x	                ldy $0820,x
51	.f24f		c0 ff		cpy #$ff	                cpy #$FF
52	.f251		f0 af		beq $f202	                beq LF413
53	.f253		b9 c0 08	lda $08c0,y	                lda $08C0,y
54	.f256		29 7f		and #$7f	                and #$7F
55	.f258		9d 24 08	sta $0824,x	                sta $0824,x
56	.f25b		bd 08 08	lda $0808,x	                lda $0808,x
57	.f25e		c9 04		cmp #$04	                cmp #$04
58	.f260		f0 5d		beq $f2bf	                beq LF4D0
59	.f262		18		clc		                clc
60	.f263		7d 20 08	adc $0820,x	                adc $0820,x
61	.f266		a8		tay		                tay
62	.f267		b9 cb 08	lda $08cb,y	                lda $08CB,y
63	.f26a		38		sec		                sec
64	.f26b		e9 3f		sbc #$3f	                sbc #$3F
65	.f26d		8d 3a 08	sta $083a	                sta $083A
66	.f270		b9 c7 08	lda $08c7,y	                lda $08C7,y
67	.f273		8d 39 08	sta $0839	                sta $0839
68	.f276		bd 04 08	lda $0804,x	                lda $0804,x
69	.f279						LF48A:
70	.f279		48		pha		                pha
71	.f27a		18		clc		                clc
72	.f27b		6d 39 08	adc $0839	                adc $0839
73	.f27e		50 07		bvc $f287	                bvc LF498
74	.f280		2a		rol a		                rol a
75	.f281		a9 3f		lda #$3f	                lda #$3F
76	.f283		b0 02		bcs $f287	                bcs LF498
77	.f285		49 ff		eor #$ff	                eor #$FF
78	.f287						LF498:
79	.f287		9d 04 08	sta $0804,x	                sta $0804,x
80	.f28a		2a		rol a		                rol a
81	.f28b		5d 04 08	eor $0804,x	                eor $0804,x
82	.f28e		10 09		bpl $f299	                bpl LF4AA
83	.f290		a9 3f		lda #$3f	                lda #$3F
84	.f292		90 02		bcc $f296	                bcc LF4A7
85	.f294		49 ff		eor #$ff	                eor #$FF
86	.f296						LF4A7:
87	.f296		9d 04 08	sta $0804,x	                sta $0804,x
88	.f299						LF4AA:
89	.f299		ce 39 08	dec $0839	                dec $0839
90	.f29c		bd 04 08	lda $0804,x	                lda $0804,x
91	.f29f		38		sec		                sec
92	.f2a0		ed 3a 08	sbc $083a	                sbc $083A
93	.f2a3		4d 39 08	eor $0839	                eor $0839
94	.f2a6		30 09		bmi $f2b1	                bmi LF4C2
95	.f2a8		ad 3a 08	lda $083a	                lda $083A
96	.f2ab		9d 04 08	sta $0804,x	                sta $0804,x
97	.f2ae		fe 08 08	inc $0808,x	                inc $0808,x
98	.f2b1						LF4C2:
99	.f2b1		68		pla		                pla
100	.f2b2		5d 04 08	eor $0804,x	                eor $0804,x
101	.f2b5		29 f8		and #$f8	                and #$F8
102	.f2b7		f0 06		beq $f2bf	                beq LF4D0
103	.f2b9		bd 04 08	lda $0804,x	                lda $0804,x
104	.f2bc		20 88 f3	jsr $f388	                jsr LF599
105	.f2bf						LF4D0:
106	.f2bf		bd 10 08	lda $0810,x	                lda $0810,x
107	.f2c2		c9 03		cmp #$03	                cmp #$03
108	.f2c4		f0 49		beq $f30f	                beq LF520
109	.f2c6		bd 14 08	lda $0814,x	                lda $0814,x
110	.f2c9		d0 28		bne $f2f3	                bne LF504
111	.f2cb		fe 10 08	inc $0810,x	                inc $0810,x
112	.f2ce		bd 10 08	lda $0810,x	                lda $0810,x
113	.f2d1		c9 03		cmp #$03	                cmp #$03
114	.f2d3		d0 0e		bne $f2e3	                bne LF4F4
115	.f2d5		bc 20 08	ldy $0820,x	                ldy $0820,x
116	.f2d8		b9 c0 08	lda $08c0,y	                lda $08C0,y
117	.f2db		30 32		bmi $f30f	                bmi LF520
118	.f2dd		9e 30 08	stz $0830,x	                stz $0830,x
119	.f2e0		9e 10 08	stz $0810,x	                stz $0810,x
120	.f2e3						LF4F4:
121	.f2e3		bd 10 08	lda $0810,x	                lda $0810,x
122	.f2e6		18		clc		                clc
123	.f2e7		7d 20 08	adc $0820,x	                adc $0820,x
124	.f2ea		a8		tay		                tay
125	.f2eb		b9 c4 08	lda $08c4,y	                lda $08C4,y
126	.f2ee		9d 14 08	sta $0814,x	                sta $0814,x
127	.f2f1		f0 1c		beq $f30f	                beq LF520
128	.f2f3						LF504:
129	.f2f3		de 14 08	dec $0814,x	                dec $0814,x
130	.f2f6		bd 20 08	lda $0820,x	                lda $0820,x
131	.f2f9		18		clc		                clc
132	.f2fa		7d 10 08	adc $0810,x	                adc $0810,x
133	.f2fd		a8		tay		                tay
134	.f2fe		b9 c1 08	lda $08c1,y	                lda $08C1,y
135	.f301		18		clc		                clc
136	.f302		7d 30 08	adc $0830,x	                adc $0830,x
137	.f305		9d 30 08	sta $0830,x	                sta $0830,x
138	.f308		18		clc		                clc
139	.f309		7d 0c 08	adc $080c,x	                adc $080C,x
140	.f30c		20 c4 f3	jsr $f3c4	                jsr LF5D5
141	.f30f						LF520:
142	.f30f		e0 04		cpx #$04	                cpx #$04
143	.f311		f0 03		beq $f316	                beq LF527
144	.f313		4c 15 f2	jmp $f215	                jmp LF426

146	.f316						LF527:
147	.f316		60		rts		                rts

149	.f317						LF528:
150	.f317		bd 08 08	lda $0808,x	                lda $0808,x
151	.f31a		c9 04		cmp #$04	                cmp #$04
152	.f31c		f0 05		beq $f323	                beq LF534
153	.f31e		a9 03		lda #$03	                lda #$03
154	.f320		9d 08 08	sta $0808,x	                sta $0808,x
155	.f323						LF534:
156	.f323		bd ce 02	lda $02ce,x	                lda bufferEmptyFlags,x
157	.f326		f0 14		beq $f33c	                beq LF54D
158	.f328		a9 00		lda #$00	                lda #$00
159	.f32a		9e ce 02	stz $02ce,x	                stz bufferEmptyFlags,x
160	.f32d		a0 04		ldy #$04	                ldy #$04
161	.f32f						LF540:
162	.f32f		99 2b 08	sta $082b,y	                sta $082B,y
163	.f332		88		dey		                dey
164	.f333		d0 fa		bne $f32f	                bne LF540
165	.f335		9e 18 08	stz $0818,x	                stz $0818,x
166	.f338		88		dey		                dey
167	.f339		8c 38 08	sty $0838	                sty $0838
168	.f33c						LF54D:
169	.f33c		bd 28 08	lda $0828,x	                lda $0828,x
170	.f33f		f0 60		beq $f3a1	                beq LF5B2
171	.f341		ad 3b 08	lda $083b	                lda $083B
172	.f344		f0 34		beq $f37a	                beq LF58B
173	.f346		9e 28 08	stz $0828,x	                stz $0828,x
174	.f349						LF55A:
175	.f349		4c 74 f4	jmp $f474	                jmp LF685

177							;-------------------------------------------------------------------------
178							;
179							; Clear a buffer that's a sound channel.
180							;
181							; https://tobylobster.github.io/mos/mos/S-s16.html#SP7
182							;
183							; Entry:
184							;
185							; X = buffer number (must be a sound channel buffer)
186							;
187							                .if version==350
191							                .else
192	.f34c						clearSoundChannelBuffer:
193							                .endif
194							                .block
195	.f34c		20 81 f3	jsr $f381	                jsr LF592
196	.f34f		98		tya		                tya
197	.f350		9e 18 08	stz $0818,x	                stz $0818,x
198	.f353		9e ce 02	stz $02ce,x	                stz bufferEmptyFlags,x
199	.f356		9e 00 08	stz $0800,x	                stz $0800,x
200	.f359		a0 03		ldy #$03	                ldy #$03
201	.f35b						loop:
202	.f35b		99 2c 08	sta $082c,y	                sta $082C,y
203	.f35e		88		dey		                dey
204	.f35f		10 fa		bpl $f35b	                bpl loop
205	.f361		8c 38 08	sty $0838	                sty $0838
206	.f364		80 63		bra $f3c9	                bra LF5DA
207							                .endblock

209							;-------------------------------------------------------------------------

211	.f366						LF577:
212	.f366		08		php		                php
213	.f367		78		sei		                sei
214	.f368		bd 08 08	lda $0808,x	                lda $0808,x
215	.f36b		c9 04		cmp #$04	                cmp #$04
216	.f36d		d0 0a		bne $f379	                bne LF58A
217	.f36f		20 97 e8	jsr $e897	                jsr mos.osbyte98
218	.f372		90 05		bcc $f379	                bcc LF58A
219	.f374		a9 00		lda #$00	                lda #$00
220	.f376		9e 00 08	stz $0800,x	                stz $0800,x
221	.f379						LF58A:
222	.f379		28		plp		                plp
223	.f37a						LF58B:
224	.f37a		bc 20 08	ldy $0820,x	                ldy $0820,x
225	.f37d		c0 ff		cpy #$ff	                cpy #$FF
226	.f37f		d0 72		bne $f3f3	                bne LF604

228							                ; https://tobylobster.github.io/mos/mos/S-s16.html#SP2
229	.f381						LF592:
230	.f381		a9 04		lda #$04	                lda #$04
231	.f383		9d 08 08	sta $0808,x	                sta $0808,x
232	.f386		a9 c0		lda #$c0	                lda #$C0
233	.f388						LF599:
234	.f388		9d 04 08	sta $0804,x	                sta $0804,x
235	.f38b		ac 62 02	ldy $0262	                ldy soundSuppressionStatus
236	.f38e		f0 02		beq $f392	                beq LF5A3
237	.f390		a9 c0		lda #$c0	                lda #$C0
238	.f392						LF5A3:
239	.f392		38		sec		                sec
240	.f393		e9 40		sbc #$40	                sbc #$40
241	.f395		4a		lsr a		                lsr a
242	.f396		4a		lsr a		                lsr a
243	.f397		4a		lsr a		                lsr a
244	.f398		49 0f		eor #$0f	                eor #$0F
245	.f39a		1d fa f1	ora $f1fa,x	                ora soundParameterTable-bufferNumberSound0,x
246	.f39d		09 10		ora #$10	                ora #$10
247	.f39f		80 34		bra $f3d5	                bra LF5E6

249	.f3a1						LF5B2:
250	.f3a1		20 97 e8	jsr $e897	                jsr mos.osbyte98
251	.f3a4		b0 c0		bcs $f366	                bcs LF577
252	.f3a6		29 03		and #$03	                and #$03
253	.f3a8		f0 9f		beq $f349	                beq LF55A
254	.f3aa		ad 38 08	lda $0838	                lda $0838
255	.f3ad		f0 cb		beq $f37a	                beq LF58B
256	.f3af		fe 28 08	inc $0828,x	                inc $0828,x
257	.f3b2		a8		tay		                tay
258	.f3b3		10 0a		bpl $f3bf	                bpl LF5D0
259	.f3b5		20 97 e8	jsr $e897	                jsr mos.osbyte98
260	.f3b8		29 03		and #$03	                and #$03
261	.f3ba		8d 38 08	sta $0838	                sta $0838
262	.f3bd		80 bb		bra $f37a	                bra LF58B

264	.f3bf						LF5D0:
265	.f3bf		ce 38 08	dec $0838	                dec $0838
266	.f3c2		80 b6		bra $f37a	                bra LF58B

268	.f3c4						LF5D5:
269	.f3c4		dd 2c 08	cmp $082c,x	                cmp $082C,x
270	.f3c7		f0 2a		beq $f3f3	                beq LF604
271	.f3c9						LF5DA:
272	.f3c9		9d 2c 08	sta $082c,x	                sta $082C,x
273	.f3cc		e0 04		cpx #$04	                cpx #$04
274	.f3ce		d0 24		bne $f3f4	                bne LF605
275	.f3d0		29 0f		and #$0f	                and #$0F
276	.f3d2		1d fa f1	ora $f1fa,x	                ora soundParameterTable-bufferNumberSound0,x
277	.f3d5						LF5E6:
278	.f3d5		08		php		                php
279	.f3d6						LF5E7:
280	.f3d6		78		sei		                sei
281	.f3d7		a0 ff		ldy #$ff	                ldy #$FF
282	.f3d9		8c 43 fe	sty $fe43	                sty systemVIA.ddra
283	.f3dc		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake
284	.f3df		c8		iny		                iny
285	.f3e0		8c 40 fe	sty $fe40	                sty systemVIA.orb
286	.f3e3		a0 02		ldy #$02	                ldy #$02
287	.f3e5						LF5F6:
288	.f3e5		88		dey		                dey
289	.f3e6		d0 fd		bne $f3e5	                bne LF5F6
290	.f3e8		a0 08		ldy #$08	                ldy #$08
291	.f3ea		8c 40 fe	sty $fe40	                sty systemVIA.orb
292	.f3ed		a0 04		ldy #$04	                ldy #$04
293	.f3ef						LF600:
294	.f3ef		88		dey		                dey
295	.f3f0		d0 fd		bne $f3ef	                bne LF600
296	.f3f2		28		plp		                plp
297	.f3f3						LF604:
298	.f3f3		60		rts		                rts

300	.f3f4						LF605:
301	.f3f4		48		pha		                pha
302	.f3f5		29 03		and #$03	                and #$03
303	.f3f7		8d 3c 08	sta $083c	                sta $083C
304	.f3fa		9c 3d 08	stz $083d	                stz $083D
305	.f3fd		68		pla		                pla
306	.f3fe		4a		lsr a		                lsr a
307	.f3ff		4a		lsr a		                lsr a
308	.f400						LF611:
309	.f400		c9 0c		cmp #$0c	                cmp #$0C
310	.f402		90 07		bcc $f40b	                bcc LF61C
311	.f404		ee 3d 08	inc $083d	                inc $083D
312	.f407		e9 0c		sbc #$0c	                sbc #$0C
313	.f409		d0 f5		bne $f400	                bne LF611
314	.f40b						LF61C:
315	.f40b		a8		tay		                tay
316	.f40c		ad 3d 08	lda $083d	                lda $083D
317	.f40f		48		pha		                pha
318	.f410		b9 d3 f4	lda $f4d3,y	                lda LF6E4,y
319	.f413		8d 3d 08	sta $083d	                sta $083D
320	.f416		b9 df f4	lda $f4df,y	                lda LF6F0,y
321	.f419		48		pha		                pha
322	.f41a		29 03		and #$03	                and #$03
323	.f41c		8d 3e 08	sta $083e	                sta $083E
324	.f41f		68		pla		                pla
325							                .if version==350
327							                .else
328	.f420		4a		lsr a		                lsr a
329	.f421		4a		lsr a		                lsr a
330	.f422		4a		lsr a		                lsr a
331	.f423		4a		lsr a		                lsr a
332							                .endif
333	.f424		8d 3f 08	sta $083f	                sta $083F
334	.f427		ad 3d 08	lda $083d	                lda $083D
335	.f42a		ac 3c 08	ldy $083c	                ldy $083C
336	.f42d		f0 0c		beq $f43b	                beq LF64C
337	.f42f						LF640:
338	.f42f		38		sec		                sec
339	.f430		ed 3f 08	sbc $083f	                sbc $083F
340	.f433		b0 03		bcs $f438	                bcs LF649
341	.f435		ce 3e 08	dec $083e	                dec $083E
342	.f438						LF649:
343	.f438		88		dey		                dey
344	.f439		d0 f4		bne $f42f	                bne LF640
345	.f43b						LF64C:
346	.f43b		8d 3d 08	sta $083d	                sta $083D
347	.f43e		68		pla		                pla
348	.f43f		a8		tay		                tay
349	.f440		f0 09		beq $f44b	                beq LF65C
350	.f442						LF653:
351	.f442		4e 3e 08	lsr $083e	                lsr $083E
352	.f445		6e 3d 08	ror $083d	                ror $083D
353	.f448		88		dey		                dey
354	.f449		d0 f7		bne $f442	                bne LF653
355	.f44b						LF65C:
356	.f44b		ad 3d 08	lda $083d	                lda $083D
357	.f44e		18		clc		                clc
358	.f44f		7d 63 e1	adc $e163,x	                adc mos.LE165,x
359	.f452		8d 3d 08	sta $083d	                sta $083D
360	.f455		90 03		bcc $f45a	                bcc LF66B
361	.f457		ee 3e 08	inc $083e	                inc $083E
362	.f45a						LF66B:
363	.f45a		29 0f		and #$0f	                and #$0F
364	.f45c		1d fa f1	ora $f1fa,x	                ora soundParameterTable-bufferNumberSound0,x
365	.f45f		08		php		                php
366	.f460		78		sei		                sei
367	.f461		20 d5 f3	jsr $f3d5	                jsr LF5E6
368	.f464		ad 3d 08	lda $083d	                lda $083D
369	.f467		4e 3e 08	lsr $083e	                lsr $083E
370	.f46a		6a		ror a		                ror a
371	.f46b		4e 3e 08	lsr $083e	                lsr $083E
372	.f46e		6a		ror a		                ror a
373	.f46f		4a		lsr a		                lsr a
374	.f470		4a		lsr a		                lsr a
375	.f471		4c d6 f3	jmp $f3d6	                jmp LF5E7

377	.f474						LF685:
378	.f474		08		php		                php
379	.f475		78		sei		                sei
380	.f476		20 9c e8	jsr $e89c	                jsr mos.osbyte91
381	.f479		48		pha		                pha
382	.f47a		29 04		and #$04	                and #$04
383	.f47c		f0 13		beq $f491	                beq LF6A2
384	.f47e		68		pla		                pla
385	.f47f		bc 20 08	ldy $0820,x	                ldy $0820,x
386	.f482		c8		iny		                iny
387	.f483		d0 03		bne $f488	                bne LF699
388	.f485		20 81 f3	jsr $f381	                jsr LF592
389	.f488						LF699:
390	.f488		20 9c e8	jsr $e89c	                jsr mos.osbyte91
391	.f48b		20 9c e8	jsr $e89c	                jsr mos.osbyte91
392	.f48e		28		plp		                plp
393	.f48f		80 3e		bra $f4cf	                bra LF6E0

395	.f491						LF6A2:
396	.f491		68		pla		                pla
397	.f492		29 f8		and #$f8	                and #$F8
398	.f494		0a		asl a		                asl a
399	.f495		90 0b		bcc $f4a2	                bcc LF6B3
400	.f497		49 ff		eor #$ff	                eor #$FF
401	.f499		4a		lsr a		                lsr a
402	.f49a		38		sec		                sec
403	.f49b		e9 40		sbc #$40	                sbc #$40
404	.f49d		20 88 f3	jsr $f388	                jsr LF599
405	.f4a0		a9 ff		lda #$ff	                lda #$FF
406	.f4a2						LF6B3:
407	.f4a2		9d 20 08	sta $0820,x	                sta $0820,x
408	.f4a5		a9 05		lda #$05	                lda #$05
409	.f4a7		9d 1c 08	sta $081c,x	                sta $081C,x
410	.f4aa		a9 01		lda #$01	                lda #$01
411	.f4ac		9d 24 08	sta $0824,x	                sta $0824,x
412	.f4af		9e 14 08	stz $0814,x	                stz $0814,x
413	.f4b2		9e 08 08	stz $0808,x	                stz $0808,x
414	.f4b5		9e 30 08	stz $0830,x	                stz $0830,x
415	.f4b8		a9 ff		lda #$ff	                lda #$FF
416	.f4ba		9d 10 08	sta $0810,x	                sta $0810,x
417	.f4bd		20 9c e8	jsr $e89c	                jsr mos.osbyte91
418	.f4c0		9d 0c 08	sta $080c,x	                sta $080C,x
419	.f4c3		20 9c e8	jsr $e89c	                jsr mos.osbyte91
420	.f4c6		28		plp		                plp
421	.f4c7		48		pha		                pha
422	.f4c8		bd 0c 08	lda $080c,x	                lda $080C,x
423	.f4cb		20 c4 f3	jsr $f3c4	                jsr LF5D5
424	.f4ce		68		pla		                pla
425	.f4cf						LF6E0:
426	.f4cf		9d 18 08	sta $0818,x	                sta $0818,x
427	.f4d2		60		rts		                rts

429	.f4d3						LF6E4:
430	>f4d3		f0				                .byte $F0
431	>f4d4		b7				                .byte $B7
432	>f4d5		82				                .byte $82
433	>f4d6		4f				                .byte $4F
434	>f4d7		20				                .byte $20
435	>f4d8		f3				                .byte $F3
436	>f4d9		c8				                .byte $C8
437	>f4da		a0				                .byte $A0
438	>f4db		7b				                .byte $7B
439	>f4dc		57				                .byte $57
440	>f4dd		35				                .byte $35
441	>f4de		16				                .byte $16
442	.f4df						LF6F0:
443	>f4df		e7				                .byte $E7
444	>f4e0		d7				                .byte $D7
445	>f4e1		cb				                .byte $CB
446	>f4e2		c3				                .byte $C3
447	>f4e3		b7				                .byte $B7
448	>f4e4		aa				                .byte $AA
449	>f4e5		a2				                .byte $A2
450	>f4e6		9a				                .byte $9a
451	>f4e7		92				                .byte $92
452	>f4e8		8a				                .byte $8a
453	>f4e9		82				                .byte $82
454	>f4ea		7a				                .byte $7a

:13	;******  Return to file: src/mos.s65

11878							                .endif

11880							;-------------------------------------------------------------------------

11882							                .if version>=500
11903							                .endif

11905							;-------------------------------------------------------------------------

11907							                .if version==350
11913							                .endif

11915							;-------------------------------------------------------------------------

11917							                .if version==350
11925							                .endif

11927							;-------------------------------------------------------------------------

11929							                .if version==350
11934							                .endif

11936							;-------------------------------------------------------------------------

11938	.f4eb						LF6FC:
11939	.f4eb		a9 ff		lda #$ff	                lda #$FF
11940	.f4ed		85 f5		sta $f5		                sta $F5
11941	.f4ef		60		rts		                rts

11943	.f4f0						LF701:
11944	.f4f0		e6 f5		inc $f5		                inc $F5
11945	.f4f2		a4 f5		ldy $f5		                ldy $F5
11946	.f4f4		a2 0d		ldx #$0d	                ldx #romServiceCallROMFilingSystemInitialize
11947	.f4f6						LF707:
11948	.f4f6		08		php		                php
11949	.f4f7		20 52 ec	jsr $ec52	                jsr makeROMServiceCall
11950	.f4fa		28		plp		                plp
11951	.f4fb		c9 01		cmp #$01	                cmp #$01
11952	.f4fd		98		tya		                tya
11953	.f4fe		60		rts		                rts

11955	.f4ff						LF710:
11956	.f4ff		a2 0e		ldx #$0e	                ldx #$0E
11957	.f501		a0 ff		ldy #$ff	                ldy #$FF
11958	.f503		4c f6 f4	jmp $f4f6	                jmp LF707

11960	.f506						LF717:
11961	.f506		ad cb 03	lda $03cb	                lda $03CB
11962	.f509		85 f6		sta $f6		                sta $F6
11963	.f50b		ad cc 03	lda $03cc	                lda $03CC
11964	.f50e		85 f7		sta $f7		                sta $F7
11965	.f510		a5 f5		lda $f5		                lda $F5
11966	.f512		60		rts		                rts

11968	.f513						tidyUpAfterKeyboardProcessing:
11969	.f513		a2 ff		ldx #$ff	                ldx #$FF
11970	.f515		a5 ec		lda $ec		                lda lastKeyPressedInternal
11971	.f517		05 ed		ora $ed		                ora firstKeyPressedInternal
11972	.f519		d0 06		bne $f521	                bne +                    ;taken if any keys pressed
11973	.f51b		a9 81		lda #$81	                lda #$81
11974	.f51d		8d 4e fe	sta $fe4e	                sta systemVIA.ier            ;re-enable keyboard IRQ
11975	.f520		e8		inx		                inx                          ;X=0
11976	.f521						+
11977	.f521		8e 42 02	stx $0242	                stx keyboardSemaphore
11978	.f524						updateKeyboardLEDs:
11979	.f524		08		php		                php
11980	.f525		ad 5a 02	lda $025a	                lda keyboardStatusByte
11981	.f528		4a		lsr a		                lsr a

11983							                ; bit 3 = caps lock off
11984							                ; bit 4 = shift lock off
11985	.f529		29 18		and #$18	                and #(keyboardStatusByte.capsLockDisengaged|keyboardStatusByte.shiftLockDisengaged)>>1
11986	.f52b		09 06		ora #$06	                ora #$06                     ;latch B6 - caps lock
11987	.f52d		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;update caps lock LED
11988	.f530		4a		lsr a		                lsr a                        ;bit 3 = shift lock off
11989	.f531		09 07		ora #$07	                ora #$07                     ;latch B7 - shift lock
11990	.f533		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;update shift lock LED
11991	.f536		20 0b f7	jsr $f70b	                jsr enableKeyboardScanning
11992	.f539		68		pla		                pla
11993	.f53a		60		rts		                rts

11995							; KEYV handler
11996							; ============
11997	.f53b						keyEntryPoint:
11998	.f53b		50 0a		bvc $f547	                bvc keyVClear
11999	.f53d		a9 01		lda #$01	                lda #$01
12000	.f53f		8d 4e fe	sta $fe4e	                sta systemVIA.ier
12001	.f542		b0 08		bcs $f54c	                bcs keyboardTimerInterrupt
12002	.f544		4c 54 f6	jmp $f654	                jmp keyPressedInterrupt

12004	.f547						keyVClear:
12005	.f547		90 06		bcc $f54f	                bcc keyTestSHIFTAndCTRLOrTimerInterrupt
12006	.f549		4c 05 f7	jmp $f705	                jmp scanKeyboard

12008	.f54c						keyboardTimerInterrupt:
12009	.f54c		ee 42 02	inc $0242	                inc keyboardSemaphore

12011							;-------------------------------------------------------------------------
12012							;
12013							; Test Shift & Ctrl keys, or deal with timer interrupt.
12014							;
12015							; Entry: C=0 if KEYV V=0 C=0 - test SHIFT+CTRL keys
12016							;        C=1 if KEYV V=1 C=1 - keyboard timer interrupt
12017							;
12018	.f54f						keyTestSHIFTAndCTRLOrTimerInterrupt:
12019	.f54f		ad 5a 02	lda $025a	                lda keyboardStatusByte
12020	.f552		29 b7		and #$b7	                and #~(keyboardStatusByte.shiftPressed|keyboardStatusByte.ctrlPressed)
12021	.f554		a2 00		ldx #$00	                ldx #key_shift
12022	.f556		20 6f f6	jsr $f66f	                jsr interrogateKeyboard      ;X=$80 if SHIFT pressed
12023	.f559		90 02		bcc $f55d	                bcc +                        ;taken if testing
12024							                                             ;SHIFT+CTRL only
12025	.f55b		86 fa		stx $fa		                stx SEIWKA                   ;b7 set if SHIFT pressed
12026	.f55d						+
12027	.f55d		b8		clv		                clv                        ;V=0
12028	.f55e		10 05		bpl $f565	                bpl testCTRL               ;taken if SHIFT not pressed
12029	.f560		2c 5e e3	bit $e35e	                bit valueFF                ;V=1 N=1
12030	.f563		09 08		ora #$08	                ora #keyboardStatusByte.shiftPressed
12031	.f565						testCTRL:
12032	.f565		e8		inx		                inx                          ;X=1 - key_ctrl
12033	.f566		20 6f f6	jsr $f66f	                jsr interrogateKeyboard
12034	.f569		90 b9		bcc $f524	                bcc updateKeyboardLEDs ;taken if testing SHIFT+CTRL only
12035	.f56b		10 02		bpl $f56f	                bpl updateKeyboardStatusByte ;taken if CTRL not pressed
12036	.f56d		09 40		ora #$40	                ora #keyboardStatusByte.ctrlPressed
12037	.f56f						updateKeyboardStatusByte:
12038	.f56f		8d 5a 02	sta $025a	                sta keyboardStatusByte
12039	.f572		a6 ec		ldx $ec		                ldx lastKeyPressedInternal
12040	.f574		f0 4d		beq $f5c3	                beq braRolloverChecks        ;taken if no key pressed
12041	.f576		20 6f f6	jsr $f66f	                jsr interrogateKeyboard      ;still pressed?
12042	.f579		30 0d		bmi $f588	                bmi checkForKeyAutoRepeat    ;taken if still pressed
12043	.f57b		e4 ec		cpx $ec		                cpx lastKeyPressedInternal   ;X=0 at this point
12044	.f57d						storeLastKeyPressed:
12045	.f57d		86 ec		stx $ec		                stx lastKeyPressedInternal   ;update last key pressed
12046	.f57f		d0 42		bne $f5c3	                bne braRolloverChecks  ;taken if still nothing pressed
12047	.f581		64 ec		stz $ec		                stz lastKeyPressedInternal   ;reset last key pressed
12048	.f583						resetAutoRepeatAndContinue:
12049	.f583		20 64 f6	jsr $f664	                jsr resetAutoRepeatCounters
12050	.f586		80 3b		bra $f5c3	                bra braRolloverChecks

12052	.f588						checkForKeyAutoRepeat:
12053	.f588		e4 ec		cpx $ec		                cpx lastKeyPressedInternal
12054	.f58a		d0 f1		bne $f57d	                bne storeLastKeyPressed      ;taken if new key pressed
12055	.f58c		a5 e7		lda $e7		                lda autoRepeatCountdownTimer
12056	.f58e		f0 33		beq $f5c3	                beq braRolloverChecks      ;taken if countdown timer 0
12057	.f590		c6 e7		dec $e7		                dec autoRepeatCountdownTimer ;timer--
12058	.f592		d0 2f		bne $f5c3	                bne braRolloverChecks        ;taken if timer newly 0
12059	.f594		ad ca 02	lda $02ca	                lda keyboardFirstAutoRepeatCount
12060	.f597		85 e7		sta $e7		                sta autoRepeatCountdownTimer
12061	.f599		ad 55 02	lda $0255	                lda keyboardAutoRepeatRate
12062	.f59c		8d ca 02	sta $02ca	                sta keyboardFirstAutoRepeatCount
12063	.f59f		ad 5a 02	lda $025a	                lda keyboardStatusByte
12064	.f5a2		a6 ec		ldx $ec		                ldx lastKeyPressedInternal
12065	.f5a4		e0 d0		cpx #$d0	                cpx #$80|key_shift_lock
12066	.f5a6		f0 12		beq $f5ba	                beq shiftLockPressed
12067	.f5a8		e0 c0		cpx #$c0	                cpx #$80|key_caps_lock
12068							                .if version>=511||version==350
12070							                .else
12071	.f5aa		d0 19		bne $f5c5	                bne getASCIICode
12072							                .endif
12073	.f5ac						capsLockPressed:
12074	.f5ac		09 a0		ora #$a0	                ora #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
12075	.f5ae		24 fa		bit $fa		                bit SEIWKA                   ;test SHIFT status
12076	.f5b0		10 04		bpl $f5b6	                bpl +                        ;taken if SHIFT not pressed
12077							                ; Do the SHIFT+CAPS LOCK thing
12078	.f5b2		09 10		ora #$10	                ora #keyboardStatusByte.capsLockDisengaged
12079	.f5b4		49 80		eor #$80	                eor #keyboardStatusByte.shiftEnabled
12080	.f5b6						+
12081	.f5b6		49 90		eor #$90	                eor #keyboardStatusByte.shiftEnabled|keyboardStatusByte.capsLockDisengaged
12082	.f5b8		80 04		bra $f5be	                bra resetKeyboardStatusAndTimer

12084	.f5ba						shiftLockPressed:
12085	.f5ba		09 90		ora #$90	                ora #keyboardStatusByte.shiftEnabled|keyboardStatusByte.capsLockDisengaged
12086	.f5bc		49 a0		eor #$a0	                eor #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
12087	.f5be						resetKeyboardStatusAndTimer:
12088	.f5be		8d 5a 02	sta $025a	                sta keyboardStatusByte
12089	.f5c1		64 e7		stz $e7		                stz autoRepeatCountdownTimer
12090	.f5c3						braRolloverChecks:
12091							                .if version<500&&version!=350
12092	.f5c3		80 6f		bra $f634	                bra keyboardRolloverChecks
12095							                .endif

12097							;-------------------------------------------------------------------------

12099							                .if version>=511||version==350
12127							                .endif
12128							;-------------------------------------------------------------------------
12129							;
12130							; Convert internal key number (with bit 7 set) to ASCII code, taking
12131							; into account state of CTRL, SHIFT, CAPS LOCK and SHIFT LOCK.
12132							;
12133	.f5c5						getASCIICode:
12134							                ; -$80 to adjust for bit 7 set; -16 because
12135							                ; interesting keys start at 16
12136	.f5c5		bd f1 f5	lda $f5f1,x	                lda keyTranslationTable-$80-16,x
12137							                .if version>=500
12153							                .endif
12154	.f5c8		f0 08		beq $f5d2	                beq handleTAB                ;taken if TAB
12155	.f5ca		c9 9d		cmp #$9d	                cmp #$9D                     ;was it key_numpad_return?
12156							                .if version<500&&version!=350
12157	.f5cc		d0 07		bne $f5d5	                bne handleKey                ;taken if not
12160							                .endif

12162							                ;Transform $9d into $8d, aka 13|$80. ($8d is already
12163							                ; used in the table for right arrow.)
12164	.f5ce		49 10		eor #$10	                eor #$10
12165	.f5d0		80 07		bra $f5d9	                bra getNumpadASCIICode

12167	.f5d2						handleTAB:
12168	.f5d2		ad 6b 02	lda $026b	                lda tabKeyCode
12169							                .if version>=500
12202							                .endif
12203	.f5d5						handleKey:
12204	.f5d5		c9 a0		cmp #$a0	                cmp #$A0                     ;numpad key?
12205	.f5d7		90 0c		bcc $f5e5	                bcc processModifiers         ;taken if not
12206	.f5d9						getNumpadASCIICode:
12207							                .if version>=500||version==350
12209							                .endif
12210							                ; C=1 at this point
12211	.f5d9		e9 31		sbc #$31	                sbc #'0'+1      ;+1 to compensate for C=1 in the next
12212							                                ;addition
12213	.f5db		6d 7e 02	adc $027e	                adc numericKeypadInterpretation ;form actual ASCII value
12214							                .if version>=500||version==350
12216							                .endif
12217	.f5de		49 80		eor #$80	                eor #$80                     ;clear bit 7
12218	.f5e0		ae 8e 02	ldx $028e	                ldx numericKeypadShiftEffect ;does SHIFT affect the
12219							                                             ;keypad?
12220	.f5e3		d0 43		bne $f628	                bne LF839                    ;taken if no
12221	.f5e5						processModifiers:
12222	.f5e5		ae 5a 02	ldx $025a	                ldx keyboardStatusByte
12223	.f5e8		86 fa		stx $fa		                stx SEIWKA
12224	.f5ea		26 fa		rol $fa		                rol SEIWKA                  ;b7 = ctrlPressed
12225	.f5ec		10 07		bpl $f5f5	                bpl testShiftLock           ;taken if ctrl not pressed
12226	.f5ee		a6 ed		ldx $ed		                ldx firstKeyPressedInternal
12227	.f5f0						localResetAutoRepeatAndContinue:
12228							                .if version<500&&version!=350
12229	.f5f0		d0 91		bne $f583	                bne resetAutoRepeatAndContinue
12230	.f5f2		20 25 f1	jsr $f125	                jsr implementCTRLCodes
12236							                .endif
12237	.f5f5						testShiftLock:
12238	.f5f5		26 fa		rol $fa		                rol SEIWKA                   ;b7 = shiftLockDisengaged
12239	.f5f7		30 07		bmi $f600	                bmi testCapsLock             ;taken if shift lock off
12240	.f5f9		20 02 f1	jsr $f102	                jsr implementShift           ;shift lock on - apply shift
12241	.f5fc		26 fa		rol $fa		                rol SEIWKA                   ;b7 = capsLockDisengaged
12242	.f5fe		80 0c		bra $f60c	                bra testShiftEnabled

12244	.f600						testCapsLock:
12245	.f600		26 fa		rol $fa		                rol SEIWKA                   ;b7 = capsLockDisengaged
12246	.f602		30 0d		bmi $f611	                bmi testShift                ;taken if caps lock off
12247	.f604		20 19 e9	jsr $e919	                jsr isLetter
12248	.f607		b0 08		bcs $f611	                bcs testShift                ;taken if not a letter
12249	.f609		20 02 f1	jsr $f102	                jsr implementShift ;letter + caps lock - make upper case
12250	.f60c						testShiftEnabled:
12251	.f60c		ae 5a 02	ldx $025a	                ldx keyboardStatusByte       ;b7 = shiftEnabled
12252	.f60f		10 0b		bpl $f61c	                bpl testEscape               ;taken if not shiftEnabled
12253	.f611						testShift:
12254	.f611		26 fa		rol $fa		                rol SEIWKA                   ;b7 = shiftPressed
12255	.f613		10 07		bpl $f61c	                bpl testEscape               ;taken if not shiftPressed
12256	.f615		a6 ed		ldx $ed		                ldx firstKeyPressedInternal
12257	.f617		d0 d7		bne $f5f0	                bne localResetAutoRepeatAndContinue
12258	.f619		20 02 f1	jsr $f102	                jsr implementShift
12259	.f61c						testEscape:
12260	.f61c		cd 6c 02	cmp $026c	                cmp escapeCharacter
12261	.f61f		d0 07		bne $f628	                bne LF839
12262	.f621		ae 75 02	ldx $0275	                ldx escapeKeyStatus
12263	.f624		d0 02		bne $f628	                bne LF839
12264	.f626		64 e7		stz $e7		                stz autoRepeatCountdownTimer

12266	.f628						LF839:

12268							                .if version==350
12288							                .elsif version<500

12290	.f628		a8		tay		                tay
12291	.f629		20 95 f7	jsr $f795	                jsr enableKeyboardScanningFlippingInterrupts
12292	.f62c		ad 59 02	lda $0259	                lda keyboardStatus
12293	.f62f		d0 03		bne $f634	                bne keyboardRolloverChecks
12294	.f631		20 26 e9	jsr $e926	                jsr insertCharacterIntoKeyboardBuffer

12384							                .endif

12386	.f634						keyboardRolloverChecks:
12387	.f634		a6 ed		ldx $ed		                ldx firstKeyPressedInternal
12388	.f636		f0 09		beq $f641	                beq LF852                    ;taken if 1 key down
12389	.f638		20 6f f6	jsr $f66f	                jsr interrogateKeyboard      ;test first key pressed
12390	.f63b		86 ed		stx $ed		                stx firstKeyPressedInternal  ;save it
12391	.f63d		30 18		bmi $f657	                bmi LF868                    ;taken if still pressed
12392	.f63f		64 ed		stz $ed		                stz firstKeyPressedInternal  ;reset first key
12393	.f641						LF852:
12394	.f641		a0 ec		ldy #$ec	                ldy #lastKeyPressedInternal
12395	.f643		20 5b f7	jsr $f75b	                jsr scanKeyboardWithExclusion
12396	.f646		30 09		bmi $f651	                bmi LF862
12397	.f648		a5 ec		lda $ec		                lda lastKeyPressedInternal
12398	.f64a		85 ed		sta $ed		                sta firstKeyPressedInternal
12399	.f64c						updateLastKeyPressedInternal:
12400	.f64c		86 ec		stx $ec		                stx lastKeyPressedInternal
12401	.f64e		20 64 f6	jsr $f664	                jsr resetAutoRepeatCounters
12402	.f651						LF862:
12403	.f651		4c 13 f5	jmp $f513	                jmp tidyUpAfterKeyboardProcessing

12405	.f654						keyPressedInterrupt:
12406	.f654		20 6f f6	jsr $f66f	                jsr interrogateKeyboard
12407	.f657						LF868:
12408	.f657		a5 ec		lda $ec		                lda lastKeyPressedInternal
12409	.f659		d0 f6		bne $f651	                bne LF862
12410	.f65b		a0 ed		ldy #$ed	                ldy #firstKeyPressedInternal
12411	.f65d		20 5b f7	jsr $f75b	                jsr scanKeyboardWithExclusion
12412	.f660		30 ef		bmi $f651	                bmi LF862
12413	.f662		80 e8		bra $f64c	                bra updateLastKeyPressedInternal

12415	.f664						resetAutoRepeatCounters:
12416	.f664		a2 01		ldx #$01	                ldx #$01
12417	.f666		86 e7		stx $e7		                stx autoRepeatCountdownTimer
12418	.f668		ae 54 02	ldx $0254	                ldx keyboardAutoRepeatDelay
12419	.f66b		8e ca 02	stx $02ca	                stx keyboardFirstAutoRepeatCount
12420	.f66e		60		rts		                rts

12422							;-------------------------------------------------------------------------
12423							;
12424							; Read a single key's state from the keyboard
12425							;
12426							; Entry:
12427							;
12428							; X = key to test
12429							;
12430							; Exit:
12431							;
12432							; X=$80, N=1 if key pressed; X=$00, N=0 if key not pressed
12433							;
12434							; Preserves: A/C
12435							;
12436							                .if version==350
12439							                .endif
12440	.f66f						interrogateKeyboard:
12441	.f66f		a0 03		ldy #$03	                ldy #$03                     ;write to keyboard
12442	.f671		8c 40 fe	sty $fe40	                sty systemVIA.orb
12443	.f674		a0 7f		ldy #$7f	                ldy #$7F
12444	.f676		8c 43 fe	sty $fe43	                sty systemVIA.ddra           ;bit 7=input, bits 6-0=output
12445	.f679		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake ;store key value
12446	.f67c		ea		nop		                nop
12447	.f67d		ae 4f fe	ldx $fe4f	                ldx systemVIA.iraNoHandshake ;read key state
12448	.f680		60		rts		                rts

12450							; Default keyboard table
12451							; ======================

12453	.f681						keyTranslationTable:
12454	>f681		71				                .text "q"                    ;10 q
12455	>f682		33				                .byte "3"                    ;11 3
12456	>f683		34				                .byte "4"                    ;12 4
12457	>f684		35				                .byte "5"                    ;13 5
12458	>f685		84				                .byte $84                    ;14 f4
12459	>f686		38				                .text "8"                    ;15 8
12460	>f687		87				                .byte $87                    ;16 f7
12461	>f688		2d				                .text "-"                    ;17 minus
12462	>f689		5e				                .text "^"                    ;18 caret
12463	>f68a		8c				                .byte $8C                    ;19 left
12464	>f68b		b6				                .byte "6"|$80                ;1a numpad_6
12465	>f68c		b7				                .byte "7"|$80                ;1b numpad_7
12466	.f68d						osbyte92:
12467	.f68d		bc 00 fc	ldy $fc00,x	                ldy $FC00,x                  ;1c 1d 1e
12468	.f690		60		rts		                rts                          ;1f

12470							                .cerror *-keyTranslationTable!=16,'oops'
12471	>f691		80				                .byte $80                    ;20 f0
12472	>f692		77				                .text "w"                    ;21 w
12473	>f693		65				                .text "e"                    ;22 e
12474	>f694		74				                .text "t"                    ;23 t
12475	>f695		37				                .text "7"                    ;24 7
12476	>f696		69				                .text "i"                    ;25 i
12477	>f697		39				                .text "9"                    ;26 9
12478	>f698		30				                .text "0"                    ;27 0
12479	>f699		5f				                .text "_"                    ;28 underline
12480	>f69a		8e				                .byte $8E                    ;29 down
12481	>f69b		b8				                .byte "8"|$80                ;2a numpad_8
12482	>f69c		b9				                .byte "9"|$80                ;2b numpad_9
12483	.f69d						osbyte94:
12484	.f69d		bc 00 fd	ldy $fd00,x	                ldy $FD00,x                  ;2c 2d 2e
12485	.f6a0		60		rts		                rts                          ;2f

12487							                .cerror *-keyTranslationTable!=32,'oops'
12488	>f6a1		31				                .text "1"                    ;30 1
12489	>f6a2		32				                .text "2"                    ;31 2
12490	>f6a3		64				                .text "d"                    ;32 d
12491	>f6a4		72				                .text "r"                    ;33 r
12492	>f6a5		36				                .text "6"                    ;34 6
12493	>f6a6		75				                .text "u"                    ;35 u
12494	>f6a7		6f				                .text "o"                    ;36 o
12495	>f6a8		70				                .text "p"                    ;37 p
12496	>f6a9		5b				                .text "["                    ;38 left_square_bracket
12497	>f6aa		8f				                .byte $8F                    ;39 up
12498	>f6ab		ab				                .byte "+"|$80                ;3a numpad_plus
12499	>f6ac		ad				                .byte "-"|$80                ;3b numpad_minus
12500	>f6ad		9d				                .byte $9D                    ;3c numpad_return
12501	.f6ae						LF8BF:
12502	.f6ae		6c 20 02	jmp ($0220)	                jmp (EVENTV)                 ;3d 3e 3f
12503							                .cerror *-keyTranslationTable!=48,'oops'
12504	>f6b1		01				                .byte 1                      ;40 caps_lock
12505	>f6b2		61				                .text "a"                    ;41 a
12506	>f6b3		78				                .text "x"                    ;42 x
12507	>f6b4		66				                .text "f"                    ;43 f
12508	>f6b5		79				                .text "y"                    ;44 y
12509	>f6b6		6a				                .text "j"                    ;45 j
12510	>f6b7		6b				                .text "k"                    ;46 k
12511							                .if version<500
12512	>f6b8		40				                .text "@"                    ;47 at
12515							                .endif
12516	>f6b9		3a				                .text ":"                    ;48 colon
12517	>f6ba		0d				                .byte $0D                    ;49 return
12518	>f6bb		af				                .byte "/"|$80                ;4a numpad_divide
12519	>f6bc		ff				                .byte 127|$80                ;4b numpad_delete
12520	>f6bd		ae				                .byte "."|$80                ;4c numpad_stop
12521	.f6be						call1MHzBusHook:
12522	.f6be		6c fe fd	jmp ($fdfe)	                jmp ($FDFE)                  ;4d 4e 4f

12524							                .cerror *-keyTranslationTable!=64,'oops'
12525	>f6c1		02				                .byte 2                      ;50 shift_lock
12526	>f6c2		73				                .text "s"                    ;51 s
12527	>f6c3		63				                .text "c"                    ;52 c
12528	>f6c4		67				                .text "g"                    ;53 g
12529	>f6c5		68				                .text "h"                    ;54 h
12530	>f6c6		6e				                .text "n"                    ;55 n
12531	>f6c7		6c				                .text "l"                    ;56 l
12532	>f6c8		3b				                .text ";"                    ;57 semicolon
12533	>f6c9		5d				                .text "]"                    ;58 right_square_bracket
12534	>f6ca		7f				                .byte $7F                    ;59 delete
12535	>f6cb		a3				                .byte "#"|$80                ;5a numpad_hash
12536	>f6cc		aa				                .byte "*"|$80                ;5b numpad_multiply
12537	>f6cd		ac				                .byte ","|$80                ;5c numpad_comma
12538	.f6ce						callSEIWKA:
12539	.f6ce		6c fa 00	jmp ($00fa)	                jmp (SEIWKA)                 ;5d 5e 5f
12540							                .cerror *-keyTranslationTable!=80,'oops'
12541	>f6d1		00				                .byte 0                      ;60 tab
12542	>f6d2		7a				                .text "z"                    ;61 z
12543	>f6d3		20				                .text " "                    ;62 space
12544	>f6d4		76				                .text "v"                    ;63 v
12545	>f6d5		62				                .text "b"                    ;64 b
12546	>f6d6		6d				                .text "m"                    ;65 m
12547	>f6d7		2c				                .text ","                    ;66 comma
12548	>f6d8		2e				                .text "."                    ;67 stop
12549	>f6d9		2f				                .text "/"                    ;68 divide
12550	>f6da		8b				                .byte $8B                    ;69 copy
12551	>f6db		b0				                .byte "0"|$80                ;6a numpad_0
12552	>f6dc		b1				                .byte "1"|$80                ;6b numpad_1
12553	>f6dd		b3				                .byte "3"|$80                ;6c numpad_3
12554	>f6de		00				                .byte 0                      ;6d
12555	>f6df		00				                .byte 0                      ;6e
12556	>f6e0		00				                .byte 0                      ;6f
12557							                .cerror *-keyTranslationTable!=96,'oops'
12558	>f6e1		1b				                .byte 27                     ;70 escape
12559	>f6e2		81				                .byte $81                    ;71 f1
12560	>f6e3		82				                .byte $82                    ;72 f2
12561	>f6e4		83				                .byte $83                    ;73 f3
12562	>f6e5		85				                .byte $85                    ;74 f5
12563	>f6e6		86				                .byte $86                    ;75 f6
12564	>f6e7		88				                .byte $88                    ;76 f8
12565	>f6e8		89				                .byte $89                    ;77 f9
12566	>f6e9		5c				                .byte $5C                    ;78 backslash
12567	>f6ea		8d				                .byte $8D                    ;79 right
12568	>f6eb		b4				                .byte "4"|$80                ;7a numpad_4
12569	>f6ec		b5				                .byte "5"|$80                ;7b numpad_5
12570	>f6ed		b2				                .byte "2"|$80                ;7c numpad_2
12571	.f6ee						LF8FF:
12572	.f6ee		2c 5e e3	bit $e35e	                bit valueFF                  ; Set V
12573	.f6f1						callKEYV:
12574	.f6f1		6c 28 02	jmp ($0228)	                jmp (KEYV)                   ; Jump to KEYV

12576							;-------------------------------------------------------------------------
12577							;
12578							; OSBYTE 131 (&83) - Read Operating System High Water Mark (OSHWM)
12579							;
12580							; MasRef D.2-40
12581							;
12582	.f6f4						osbyte83:
12583	.f6f4		ac 44 02	ldy $0244	                ldy oshwm
12584	.f6f7		a2 00		ldx #$00	                ldx #$00
12585	.f6f9		60		rts		                rts

12587							;-------------------------------------------------------------------------
12588							;
12589							; OSBYTE 120 ($78) - Write keys pressed information
12590							;
12591							; MasRef D.2-33
12592							;
12593	.f6fa						osbyte78:                          ;f90b
12594	.f6fa		84 ec		sty $ec		                sty lastKeyPressedInternal
12595	.f6fc		86 ed		stx $ed		                stx firstKeyPressedInternal
12596	.f6fe		60		rts		                rts

12598							;-------------------------------------------------------------------------
12599							;
12600							; OSBYTE 122 (&7A) Keyboard scan from 16 decimal
12601							;
12602							; MasRef D.2-36
12603							;
12604							                .if version==350
12607							                .endif
12608	.f6ff						osbyte7A:
12609	.f6ff		a2 10		ldx #$10	                ldx #$10
12610	.f701		b8		clv		                clv
12611	.f702		38		sec		                sec
12612	.f703		80 ec		bra $f6f1	                bra callKEYV

12614							;-------------------------------------------------------------------------

12616	.f705						scanKeyboard:
12617	.f705		8a		txa		                txa
12618	.f706		10 0a		bpl $f712	                bpl LF923
12619	.f708		20 6f f6	jsr $f66f	                jsr interrogateKeyboard
12620	.f70b						enableKeyboardScanning:
12621	.f70b		a9 0b		lda #$0b	                lda #8|3                     ;set latch B3 - auto scan mode
12622	.f70d		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;set auto scan mode
12623	.f710		8a		txa		                txa
12624	.f711		60		rts		                rts

12626	.f712						LF923:
12627	.f712		8e cb 02	stx $02cb	                stx previousKeyPressedWhenReadingLastKey
12628	.f715		a9 ff		lda #$ff	                lda #$FF
12629	.f717		8d cc 02	sta $02cc	                sta previousKeyPressedWhenReadingFirstKey
12630	.f71a		a2 0c		ldx #$0c	                ldx #$0C
12631	.f71c		a9 7f		lda #$7f	                lda #$7F
12632	.f71e		8d 43 fe	sta $fe43	                sta systemVIA.ddra
12633	.f721		a9 03		lda #$03	                lda #0|3            ;reset latch B3 - manual scan mode
12634	.f723		8d 40 fe	sta $fe40	                sta systemVIA.orb
12635	.f726						loopKeyboardColumns:
12636	.f726		a9 0f		lda #$0f	                lda #$0F
12637	.f728		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;select a non-existent column
12638	.f72b		a9 01		lda #$01	                lda #$01
12639	.f72d		8d 4d fe	sta $fe4d	                sta systemVIA.ifr            ;cancel keyboard interrupts
12640	.f730		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake ;select column
12641	.f733		2c 4d fe	bit $fe4d	                bit systemVIA.ifr            ;any key in this column
12642							                                             ;pressed?
12643	.f736		f0 1b		beq $f753	                beq tryNextKeyboardColumn    ;taken if no key
12644	.f738		8a		txa		                txa                          ;A = first key in column
12645	.f739						loopKeyboardRows:
12646	.f739		18		clc		                clc
12647	.f73a		69 10		adc #$10	                adc #$10                     ;next row
12648	.f73c		30 15		bmi $f753	                bmi tryNextKeyboardColumn    ;taken if done
12649	.f73e		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;store key
12650	.f741		2c 4f fe	bit $fe4f	                bit systemVIA.iraNoHandshake ;pressed?
12651	.f744		10 f3		bpl $f739	                bpl loopKeyboardRows         ;taken if not
12652	.f746		cd cb 02	cmp $02cb	                cmp previousKeyPressedWhenReadingLastKey
12653	.f749		90 ee		bcc $f739	                bcc loopKeyboardRows
12654	.f74b		cd cc 02	cmp $02cc	                cmp previousKeyPressedWhenReadingFirstKey
12655	.f74e		b0 e9		bcs $f739	                bcs loopKeyboardRows
12656	.f750		8d cc 02	sta $02cc	                sta previousKeyPressedWhenReadingFirstKey
12657	.f753						tryNextKeyboardColumn:
12658	.f753		ca		dex		                dex
12659	.f754		10 d0		bpl $f726	                bpl loopKeyboardColumns
12660	.f756		ae cc 02	ldx $02cc	                ldx previousKeyPressedWhenReadingFirstKey
12661	.f759		80 b0		bra $f70b	                bra enableKeyboardScanning

12663	.f75b						scanKeyboardWithExclusion:
12664	.f75b		a2 0c		ldx #$0c	                ldx #$0c
12665	.f75d						LF96E:
12666	.f75d		20 95 f7	jsr $f795	                jsr enableKeyboardScanningFlippingInterrupts
12667	.f760		a9 7f		lda #$7f	                lda #$7F
12668	.f762		8d 43 fe	sta $fe43	                sta systemVIA.ddra
12669	.f765		a9 03		lda #$03	                lda #0|3
12670	.f767		8d 40 fe	sta $fe40	                sta systemVIA.orb
12671	.f76a		a9 0f		lda #$0f	                lda #$0F
12672	.f76c		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;select non-existent column
12673	.f76f		a9 01		lda #$01	                lda #$01
12674	.f771		8d 4d fe	sta $fe4d	                sta systemVIA.ifr            ;cancel keyboard interrupts
12675	.f774		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake
12676	.f777		2c 4d fe	bit $fe4d	                bit systemVIA.ifr
12677	.f77a		f0 20		beq $f79c	                beq LF9AD
12678	.f77c		8a		txa		                txa
12679	.f77d						LF98E:
12680	.f77d		18		clc		                clc
12681	.f77e		69 10		adc #$10	                adc #$10
12682	.f780		30 1a		bmi $f79c	                bmi LF9AD                    ;taken if done
12683	.f782		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;test key
12684	.f785		2c 4f fe	bit $fe4f	                bit systemVIA.iraNoHandshake ;pressed?
12685	.f788		10 f3		bpl $f77d	                bpl LF98E                    ;taken if not
12686	.f78a		48		pha		                pha                          ;save key number
12687	.f78b						LF99C:
12688	.f78b		59 00 00	eor $0000,y	                eor $0000,y                  ;compare to value
12689	.f78e		0a		asl a		                asl a                        ;discard irrelevant bit 7
12690	.f78f		c9 01		cmp #$01	                cmp #$01                     ;C set if different
12691	.f791		68		pla		                pla                          ;restore key number
12692	.f792		90 e9		bcc $f77d	                bcc LF98E                    ;same key found - keep going
12693	.f794		aa		tax		                tax
12694	.f795						enableKeyboardScanningFlippingInterrupts:
12695	.f795		20 0b f7	jsr $f70b	                jsr enableKeyboardScanning
12696	.f798		58		cli		                cli
12697	.f799		78		sei		                sei
12698	.f79a		8a		txa		                txa
12699	.f79b		60		rts		                rts

12701	.f79c						LF9AD:
12702	.f79c		ca		dex		                dex
12703	.f79d		10 be		bpl $f75d	                bpl LF96E
12704	.f79f		80 f4		bra $f795	                bra enableKeyboardScanningFlippingInterrupts

12706							;-------------------------------------------------------------------------

12708							                .if version==400
12709							                .include "sram_access_helpers.s65"

:17	;******  Processing file: src/sram_access_helpers.s65

1	.f7a1						LF846:
2	.f7a1		20 9f e5	jsr $e59f	                jsr selectROMA
3	.f7a4						LF7A4:
4	.f7a4		b1 b0		lda ($b0),y	                lda ($b0),y
5	.f7a6		91 b2		sta ($b2),y	                sta ($b2),y
6	.f7a8		20 f0 f7	jsr $f7f0	                jsr LF7F0
7	.f7ab		d0 f7		bne $f7a4	                bne LF7A4
8	.f7ad		b5 01		lda $01,x	                lda 1,x
9	.f7af		cd f0 02	cmp $02f0	                cmp osfileParameterBlock+3
10	.f7b2		d0 f0		bne $f7a4	                bne LF7A4
11	.f7b4		4c 9d e5	jmp $e59d	                jmp selectTerminalROM

13							;-------------------------------------------------------------------------

15	.f7b7						LF7B7:
16	.f7b7		20 9f e5	jsr $e59f	                jsr selectROMA
17	.f7ba						LF7BA:
18	.f7ba		ad e5 fe	lda $fee5	                lda tube.data3
19	.f7bd		91 b2		sta ($b2),y	                sta ($b2),y
20	.f7bf		20 00 f8	jsr $f800	                jsr LF800
21	.f7c2		20 f0 f7	jsr $f7f0	                jsr LF7F0
22	.f7c5		d0 f3		bne $f7ba	                bne LF7BA
23	.f7c7		b5 01		lda $01,x	                lda 1,x
24	.f7c9		cd f0 02	cmp $02f0	                cmp osfileParameterBlock+3
25	.f7cc		d0 ec		bne $f7ba	                bne LF7BA
26	.f7ce		4c 9d e5	jmp $e59d	                jmp selectTerminalROM

28							;-------------------------------------------------------------------------

30	.f7d1						LF7D1:
31	.f7d1		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
32	.f7d4		30 e1		bmi $f7b7	                bmi LF7B7
33	.f7d6		20 9f e5	jsr $e59f	                jsr selectROMA
34	.f7d9						LF7D9:
35	.f7d9		b1 b0		lda ($b0),y	                lda ($b0),y
36	.f7db		8d e5 fe	sta $fee5	                sta tube.data3
37	.f7de		20 00 f8	jsr $f800	                jsr LF800
38	.f7e1		20 f0 f7	jsr $f7f0	                jsr LF7F0
39	.f7e4		d0 f3		bne $f7d9	                bne LF7D9
40	.f7e6		b5 01		lda $01,x	                lda 1,x
41	.f7e8		cd f0 02	cmp $02f0	                cmp osfileParameterBlock+3
42	.f7eb		d0 ec		bne $f7d9	                bne LF7D9
43	.f7ed		4c 9d e5	jmp $e59d	                jmp selectTerminalROM

45							;-------------------------------------------------------------------------

47	.f7f0						LF7F0:
48	.f7f0		c8		iny		                iny
49	.f7f1		d0 0d		bne $f800	                bne LF800
50	.f7f3		e6 b1		inc $b1		                inc $b1
51	.f7f5		e6 b3		inc $b3		                inc $b3
52	.f7f7		20 9d e5	jsr $e59d	                jsr selectTerminalROM
53	.f7fa		20 aa 88	jsr $88aa	                jsr terminal.L8D0F
54	.f7fd		20 9f e5	jsr $e59f	                jsr selectROMA

56							;-------------------------------------------------------------------------

58	.f800						LF800:
59	.f800		cc ef 02	cpy $02ef	                cpy osfileParameterBlock+2
60	.f803						LF803:
61							                ; the dummy ROM header's first byte is the RTS for
62							                ; this routine...
63							                .cerror *!=dummy_rom_header

:13	;******  Return to file: src/mos.s65

12710							                .endif

12712							;-------------------------------------------------------------------------

12714							                .if version>=500
12735							                .endif

12737							;-------------------------------------------------------------------------

12739							                .if version>=500
12760							                .endif

12762							;-------------------------------------------------------------------------

12764							                .if version>=400
12765							                .include "sram_access_helpers_2.s65"

:18	;******  Processing file: src/sram_access_helpers_2.s65

1	.f803						dummy_rom_header: .block
2	.f803		60		rts		                rts
3	>f804		00 00				                .byte 0,0
4	.f806		60		rts		                rts
5	>f807		00 00				                .byte 0,0
6	>f809		02				                .byte 2
7	>f80a		0c				                .byte copyright-dummy_rom_header
8	>f80b		ff				                .byte $ff
9	>f80c		52				                .text "R"
10	.f80d						ram_or_rom_char:
11	>f80d		41				                .text "A"
12	>f80e		4d				                .text "M"
13	.f80f						copyright:
14	>f80f		00				                .byte 0
15	>f810		28 43 29			                .text "(C)"
16							                .endblock

18	.f813						LF87C:
19	.f813		20 8e e5	jsr $e58e	                jsr selectROMX
20	.f816		a0 0f		ldy #$0f	                ldy #size(dummy_rom_header)-1
21	.f818						LF881:
22	.f818		b9 03 f8	lda $f803,y	                lda dummy_rom_header,y
23	.f81b		99 00 80	sta $8000,y	                sta $8000,y
24	.f81e		88		dey		                dey
25	.f81f		10 f7		bpl $f818	                bpl LF881
26	.f821		2c ee 02	bit $02ee	                bit $2ee
27	.f824		70 05		bvs $f82b	                bvs LF894
28	.f826		a9 4f		lda #$4f	                lda #'O'
29	.f828		8d 0a 80	sta $800a	                sta $8000+(dummy_rom_header.ram_or_rom_char-dummy_rom_header)
30	.f82b						LF894:
31	.f82b		8e 01 80	stx $8001	                stx $8001
32	.f82e		4c 9d e5	jmp $e59d	                jmp selectTerminalROM

34							;-------------------------------------------------------------------------

36	.f831						LF89A:
37	.f831		20 8e e5	jsr $e58e	                jsr selectROMX
38	.f834		ad 08 80	lda $8008	                lda $8008
39	.f837		a8		tay		                tay
40	.f838		49 ff		eor #$ff	                eor #$ff
41	.f83a		78		sei		                sei
42	.f83b		8d 08 80	sta $8008	                sta $8008
43	.f83e		cd 08 80	cmp $8008	                cmp $8008
44	.f841		8c 08 80	sty $8008	                sty $8008
45	.f844		58		cli		                cli
46	.f845		f0 01		beq $f848	                beq LF8B1
47	.f847		18		clc		                clc
48	.f848						LF8B1:
49	.f848		4c 9d e5	jmp $e59d	                jmp selectTerminalROM

51							;-------------------------------------------------------------------------


:13	;******  Return to file: src/mos.s65

12766							                .endif

12768							;-------------------------------------------------------------------------

12770							                .if version>=400
12771	.f84b						LF8B4:
12772	.f84b		20 8e e5	jsr $e58e	                jsr selectROMX
12773							                .if version==400
12774	.f84e		a9 80		lda #$80	                lda #$80
12775	.f850		85 01		sta $01		                sta 1
12776	.f852		64 00		stz $00		                stz 0
12777	.f854		a9 00		lda #$00	                lda #0
12782							                .endif
12783	.f856		a8		tay		                tay
12784	.f857						LF8BE:
12785	.f857		91 00		sta ($00),y	                sta (0),y
12786	.f859		c8		iny		                iny
12787	.f85a		d0 fb		bne $f857	                bne LF8BE
12788	.f85c		e6 01		inc $01		                inc 1
12789	.f85e		24 01		bit $01		                bit 1
12790	.f860		50 f5		bvc $f857	                bvc LF8BE
12791	.f862		ca		dex		                dex
12792	.f863		e0 04		cpx #$04	                cpx #4
12793	.f865		b0 e4		bcs $f84b	                bcs LF8B4
12794	.f867		4c 9d e5	jmp $e59d	                jmp selectTerminalROM
12795							                .endif

12797							;-------------------------------------------------------------------------

12799							LF8D1Macro: .macro
12811							                .endmacro

12813							                .if version>=500
12815							                .endif

12817							;-------------------------------------------------------------------------

12819							                .if version>=400
12820	.f86a						LF8EA:
12821	.f86a		20 73 f1	jsr $f173	                jsr withTerminalROM
12822	.f86d		4c 8d 8a	jmp $8a8d	                jmp terminal.L8EDC
12823							                .endif

12825							;-------------------------------------------------------------------------

12827							                .if version>=400
12828	.f870						LF8F0:
12829	.f870		20 73 f1	jsr $f173	                jsr withTerminalROM
12830	.f873		4c 3d 8b	jmp $8b3d	                jmp terminal.L8F8C
12831							                .endif

12833							;-------------------------------------------------------------------------

12835							                .if version>=400
12836	.f876						osword10:
12837	.f876		20 73 f1	jsr $f173	                jsr withTerminalROM
12838	.f879		4c 88 87	jmp $8788	                jmp terminal.L8BF2
12839							                .endif

12841							;-------------------------------------------------------------------------

12843							                .if version>=400
12844	.f87c						osword11:
12845	.f87c		20 73 f1	jsr $f173	                jsr withTerminalROM
12846	.f87f		4c d7 89	jmp $89d7	                jmp terminal.L8E2E
12847							                .endif

12849							;-------------------------------------------------------------------------

12851							                .if version==350
12872							                .endif

12874							;-------------------------------------------------------------------------
12875							;
12876							; OSBPUT [AUG p339]
12877							;
12878	.f882						osbputEntryPoint:
12879	.f882		20 67 f9	jsr $f967	                jsr selectFSForHandle
12880	.f885		6c 18 02	jmp ($0218)	                jmp (BPUTV)

12882							;-------------------------------------------------------------------------
12883							;
12884							; OSBGET [AUG p338]
12885							;
12886	.f888						osbgetEntryPoint:
12887	.f888		20 67 f9	jsr $f967	                jsr selectFSForHandle
12888	.f88b		6c 16 02	jmp ($0216)	                jmp (BGETV)

12890							;-------------------------------------------------------------------------
12891							;
12892							; OSGBPB [AUG p339]
12893							;
12894	.f88e						osgbpbEntryPoint: .proc
12895	.f88e		c9 05		cmp #$05	                cmp #gbpbGetMediaMetadata
12896	.f890		b0 15		bcs $f8a7	                bcs nonFileOperation
12897	.f892		c9 00		cmp #$00	                cmp #$00
12898	.f894		f0 11		beq $f8a7	                beq nonFileOperation

12900							                ; Handle OSGBPB call that's an operation on a file
12901							                ; handle. Select the appropriate FS, given the file
12902							                ; handle, and pass the request along.
12903	.f896		5a		phy		                phy                          ;save OSGBPB Y
12904	.f897		48		pha		                pha                          ;save OSGBPB A
12905	.f898		86 b0		stx $b0		                stx osgbpbWorkspace.ptr+0
12906	.f89a		84 b1		sty $b1		                sty osgbpbWorkspace.ptr+1
12907	.f89c		b2 b0		lda ($b0)	                lda (osgbpbWorkspace.ptr)    ;get file handle
12908	.f89e		a8		tay		                tay
12909	.f89f		68		pla		                pla                          ;restore OSGBPB A
12910	.f8a0		20 67 f9	jsr $f967	                jsr selectFSForHandle
12911	.f8a3						passToCurrentFS:
12912	.f8a3		7a		ply		                ply                          ;restore OSGBPB Y
12913	.f8a4		6c 1a 02	jmp ($021a)	                jmp (GBPBV)

12915							;-------------------------------------------------------------------------
12916							;
12917							; Handle OSGBPB call that isn't an operation on a file handle. Select
12918							; current FS and pass the request along.
12919							;
12920	.f8a7						nonFileOperation:
12921	.f8a7		5a		phy		                phy
12922	.f8a8		da		phx		                phx
12923	.f8a9		48		pha		                pha
12924	.f8aa		20 b9 eb	jsr $ebb9	                jsr selectHAZEL
12925	.f8ad		ad 00 df	lda $df00	                lda hazel.currentFS
12926	.f8b0		20 1d fa	jsr $fa1d	                jsr selectFS
12927	.f8b3		68		pla		                pla
12928	.f8b4		fa		plx		                plx
12929	.f8b5		80 ec		bra $f8a3	                bra passToCurrentFS
12930							                .endproc

12932							;-------------------------------------------------------------------------
12933							;
12934							; OSARGS [AUG p337[
12935							;
12936							;
12937	.f8b7						osargsEntryPoint: .proc
12938	.f8b7		c0 00		cpy #$00	                cpy #$00
12939	.f8b9		d0 2a		bne $f8e5	                bne fileOperation            ;taken if file operation
12940	.f8bb		c9 04		cmp #$04	                cmp #$04
12941	.f8bd		b0 26		bcs $f8e5	                bcs fileOperation ;taken if Y=0, A>=4 - honorary file operation
12942	.f8bf		48		pha		                pha
12943	.f8c0		20 b9 eb	jsr $ebb9	                jsr selectHAZEL
12944	.f8c3		68		pla		                pla
12945	.f8c4		d0 04		bne $f8ca	                bne notGetFS
12946	.f8c6						getFS:
12947							                ; OSARGS Y=0 A=0 - read current FS number
12948	.f8c6		ad 00 df	lda $df00	                lda hazel.currentFS
12949	.f8c9		60		rts		                rts

12951	.f8ca						notGetFS:
12952	.f8ca		3a		dec a		                dec a
12953	.f8cb		d0 10		bne $f8dd	                bne notGetCommandLine
12954	.f8cd						getCommandLine:
12955							                ; OSARGS Y=0 A=1 - read command line tail address
12956	.f8cd		3a		dec a		                dec a                        ;A=$ff
12957	.f8ce		95 02		sta $02,x	                sta 2,x                    ;store full 32-bit address
12958	.f8d0		95 03		sta $03,x	                sta 3,x                    ;store full 32-bit address
12959	.f8d2		ad 04 df	lda $df04	                lda hazel.commandLinePointer+0
12960	.f8d5		95 00		sta $00,x	                sta 0,x                    ;
12961	.f8d7		ad 05 df	lda $df05	                lda hazel.commandLinePointer+1
12962	.f8da		95 01		sta $01,x	                sta 1,x
12963	.f8dc		60		rts		                rts

12965	.f8dd						notGetCommandLine:
12966	.f8dd		c9 01		cmp #$01	                cmp #argsCheckANFS-1    ;-1 due to the dec a above
12967	.f8df		f0 03		beq $f8e4	                beq rtsFA14            ; OSARGS Y=0 A=2 - Read OldNFS flag
12968	.f8e1						getLibFS:
12969	.f8e1		ad 02 df	lda $df02	                lda hazel.libFS      ;OSARGS Y=0 A=3 - Read libfs filing system number
12970	.f8e4						rtsFA14:
12971	.f8e4		60		rts		                rts

12973	.f8e5						fileOperation:
12974							                ; Operating on a file. Select appropriate FS first.
12975	.f8e5		20 67 f9	jsr $f967	                jsr selectFSForHandle
12976							                .endproc


12979							;-------------------------------------------------------------------------
12980							;
12981							; Call current FS's OSARGS routine, bypassing the FileSwitch stuff.
12982							;
12983	.f8e8						callARGSV:                      ;fa18
12984	.f8e8		6c 14 02	jmp ($0214)	                jmp (ARGSV)

12986							;-------------------------------------------------------------------------
12987							;
12988							; OSFIND [AUG p342]
12989							;
12990	.f8eb						osfindEntryPoint: .proc
12991	.f8eb		09 00		ora #$00	                ora #$00        ;A=$00 if a file is to be closed
12992	.f8ed		f0 05		beq $f8f4	                beq close       ;branch taken if closing a file
12993	.f8ef		20 3e f9	jsr $f93e	                jsr parseFileNameAndSelectFS       ;handle something other than a file close
12994	.f8f2		80 03		bra $f8f7	                bra callFINDV

12996	.f8f4						close:
12997	.f8f4		20 67 f9	jsr $f967	                jsr selectFSForHandle
12998	.f8f7						callFINDV:
12999	.f8f7		6c 1c 02	jmp ($021c)	                jmp (FINDV)
13000							                .pend

13002							;-------------------------------------------------------------------------
13003							;
13004							; OSFILE [AUG p335]
13005							;
13006	.f8fa						osfileEntryPoint:               ;fa2a
13007	.f8fa		da		phx		                phx
13008	.f8fb		5a		phy		                phy
13009	.f8fc		48		pha		                pha
13010	.f8fd		86 f2		stx $f2		                stx stringInputBufferAddress+0
13011	.f8ff		84 f3		sty $f3		                sty stringInputBufferAddress+1
13012	.f901		a0 11		ldy #$11	                ldy #size(OSFILEParameterBlock)-1
13013	.f903						-
13014	.f903		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
13015	.f905		99 ed 02	sta $02ed,y	                sta osfileParameterBlock,y
13016	.f908		88		dey		                dey
13017	.f909		10 f8		bpl $f903	                bpl -
13018	.f90b		ae ed 02	ldx $02ed	                ldx osfileParameterBlock+OSFILEParameterBlock.fileName+0
13019	.f90e		ac ee 02	ldy $02ee	                ldy osfileParameterBlock+OSFILEParameterBlock.fileName+1
13020	.f911		20 3e f9	jsr $f93e	                jsr parseFileNameAndSelectFS
13021	.f914		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
13022	.f917		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
13023	.f91a		68		pla		                pla
13024	.f91b		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
13025	.f91d		a0 02		ldy #$02	                ldy #>osfileParameterBlock
13026	.f91f		20 3b f9	jsr $f93b	                jsr callFILEV
13027	.f922		7a		ply		                ply
13028	.f923		84 f3		sty $f3		                sty stringInputBufferAddress+1
13029	.f925		fa		plx		                plx
13030	.f926		86 f2		stx $f2		                stx stringInputBufferAddress+0
13031	.f928		48		pha		                pha
13032	.f929		a0 11		ldy #$11	                ldy #size(OSFILEParameterBlock)-1
13033	.f92b						-
13034	.f92b		b9 ed 02	lda $02ed,y	                lda osfileParameterBlock,y
13035	.f92e		91 f2		sta ($f2),y	                sta (stringInputBufferAddress),y
13036	.f930		88		dey		                dey
13037	.f931		c0 02		cpy #$02	                cpy #$02                     ;don't overwrite file name
13038	.f933		b0 f6		bcs $f92b	                bcs -
13039	.f935		68		pla		                pla
13040	.f936		a6 f2		ldx $f2		                ldx stringInputBufferAddress+0
13041	.f938		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
13042	.f93a		60		rts		                rts

13044	.f93b						callFILEV:
13045	.f93b		6c 12 02	jmp ($0212)	                jmp (FILEV)

13047							;-------------------------------------------------------------------------
13048							;
13049							; Parse file name. Handle (and skip) any -FS- tempfs syntax, selecting
13050							; the FS specified if required.
13051							;
13052							; entry:
13053							;
13054							; Y (MSB)/X (LSB) = address of file name string
13055							;
13056							; exit:
13057							;
13058							; Y (MSB)/X (LSB) = address of file name part
13059							;
13060							; - New FS may have been selected
13061							;
13062	.f93e						parseFileNameAndSelectFS:
13063	.f93e		48		pha		                pha
13064	.f93f		a5 f2		lda $f2		                lda stringInputBufferAddress+0
13065	.f941		48		pha		                pha
13066	.f942		a5 f3		lda $f3		                lda stringInputBufferAddress+1
13067	.f944		48		pha		                pha
13068	.f945		20 b9 eb	jsr $ebb9	                jsr selectHAZEL
13069	.f948		86 f2		stx $f2		                stx stringInputBufferAddress+0
13070	.f94a		84 f3		sty $f3		                sty stringInputBufferAddress+1
13071	.f94c		a0 00		ldy #$00	                ldy #$00
13072	.f94e		20 76 f9	jsr $f976	                jsr parseFileNameFS      ;find -FS- prefix, if any
13073	.f951		5a		phy		                phy                      ;save offset
13074	.f952		20 1d fa	jsr $fa1d	                jsr selectFS                 ;select desired FS
13075	.f955		68		pla		                pla
13076	.f956		18		clc		                clc
13077	.f957		65 f2		adc $f2		                adc stringInputBufferAddress+0
13078	.f959		aa		tax		                tax                          ;save string address LSB
13079	.f95a		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
13080	.f95c		90 01		bcc $f95f	                bcc +
13081	.f95e		c8		iny		                iny
13082	.f95f						+
13083	.f95f		68		pla		                pla
13084	.f960		85 f3		sta $f3		                sta stringInputBufferAddress+1
13085	.f962		68		pla		                pla
13086	.f963		85 f2		sta $f2		                sta stringInputBufferAddress+0
13087	.f965		68		pla		                pla
13088	.f966		60		rts		                rts

13090							;-------------------------------------------------------------------------
13091							;
13092							; Select appropriate FS for the given file handle.
13093							;
13094							; entry:
13095							;
13096							; Y = file handle
13097							;
13098							; exit:
13099							;
13100							; - appropriate FS selected
13101							;
13102							; preserves: Y/X/A

13104	.f967						selectFSForHandle:
13105	.f967		da		phx		                phx
13106	.f968		48		pha		                pha
13107	.f969		20 b9 eb	jsr $ebb9	                jsr selectHAZEL
13108	.f96c		20 f3 f9	jsr $f9f3	                jsr findFSForHandle
13109	.f96f		8a		txa		                txa
13110	.f970		20 1d fa	jsr $fa1d	                jsr selectFS
13111	.f973		68		pla		                pla
13112	.f974		fa		plx		                plx
13113	.f975		60		rts		                rts

13115							;-------------------------------------------------------------------------
13116							;
13117							; Parse the FS part of a file name, if any, and return the filing
13118							; system to use.
13119							;
13120							; Entry:
13121							;
13122							; (stringInputBufferAddress),y = the string
13123							;
13124							; Exit:
13125							;
13126							; A = FS number to use
13127							;
13128							; (stringInputBufferAddress),y = next char after any tempfs prefix has
13129							; been consumed
13130	.f976						parseFileNameFS: .proc

13132	.f976		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
13133	.f979		20 ee f0	jsr $f0ee	                jsr skipSpacesAndCheckForCRInStringInput
13134	.f97c		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
13135	.f97e		c9 2d		cmp #$2d	                cmp #'-'
13136	.f980		f0 0c		beq $f98e	                beq parseFSNamePrefix ; branch taken if tempfs syntax
13137	.f982		2c c6 df	bit $dfc6	                bit hazel.tempFSFlag
13138	.f985		ad 00 df	lda $df00	                lda hazel.currentFS
13139	.f988		50 03		bvc $f98d	                bvc +
13140	.f98a		ad 01 df	lda $df01	                lda hazel.activeFS
13141	.f98d						+
13142	.f98d		60		rts		                rts

13144	.f98e						parseFSNamePrefix:
13145	.f98e		c8		iny		                iny
13146	.f98f		a2 00		ldx #$00	                ldx #$00
13147	.f991						LFAC1:
13148	.f991		bd 06 df	lda $df06,x	                lda hazel.fsInfoBlocks,x ;get FS name char
13149	.f994		f0 44		beq $f9da	                beq badFilingSystemName
13150	.f996		8a		txa		                txa                      ;A=offset in info blocks
13151	.f997		18		clc		                clc
13152	.f998		69 08		adc #$08	                adc #size(fsInfoBlock.name)
13153	.f99a		85 b0		sta $b0		                sta parseFileNameFSWorkspace.fsInfoOffset
13154	.f99c		5a		phy		                phy
13155	.f99d						compareFSNameLoop:
13156	.f99d		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y

13158							; validate FS name char. Must be letter or digit.

13160	.f99f		20 19 e9	jsr $e919	                jsr isLetter
13161	.f9a2		90 08		bcc $f9ac	                bcc validFSNameChar           ;branch taken if letter
13162	.f9a4		c9 30		cmp #$30	                cmp #'0'
13163	.f9a6		90 1b		bcc $f9c3	                bcc notValidFSNameChar       ;branch taken if not digit
13164	.f9a8		c9 3a		cmp #$3a	                cmp #'9'+1
13165	.f9aa		b0 17		bcs $f9c3	                bcs notValidFSNameChar       ;branch taken if not digit
13166	.f9ac						validFSNameChar:
13167	.f9ac		e4 b0		cpx $b0		                cpx parseFileNameFSWorkspace.fsInfoOffset
13168	.f9ae		b0 0b		bcs $f9bb	                bcs nextFSInfoBlock ;branch taken if end of FS
13169							                                         ;info block name was reached
13170	.f9b0		5d 06 df	eor $df06,x	                eor hazel.fsInfoBlocks,x
13171	.f9b3		29 df		and #$df	                and #$DF                 ;Z=1 if char matches FS name
13172	.f9b5		d0 04		bne $f9bb	                bne nextFSInfoBlock      ;branch taken if not a match
13173	.f9b7		e8		inx		                inx                      ;next fs info block byte
13174	.f9b8		c8		iny		                iny                      ;next input string byte
13175	.f9b9		80 e2		bra $f99d	                bra compareFSNameLoop

13177	.f9bb						nextFSInfoBlock:
13178	.f9bb		7a		ply		                ply
13179	.f9bc		a6 b0		ldx $b0		                ldx parseFileNameFSWorkspace.fsInfoOffset ;offset of end of name
13180	.f9be		e8		inx		                inx
13181	.f9bf		e8		inx		                inx
13182	.f9c0		e8		inx		                inx             ;advance to next entry
13183	.f9c1		80 ce		bra $f991	                bra LFAC1

13185	.f9c3						notValidFSNameChar:

13187							; Matching FS name must be terminated with -. Otherwise, it's bad
13188							; syntax, or perhaps an overly long name.

13190	.f9c3		c9 2d		cmp #$2d	                cmp #'-'
13191	.f9c5		d0 13		bne $f9da	                bne badFilingSystemName
13192	.f9c7		c8		iny		                iny                       ;consume input '-'
13193	.f9c8		e4 b0		cpx $b0		                cpx parseFileNameFSWorkspace.fsInfoOffset
13194	.f9ca		f0 07		beq $f9d3	                beq foundFSInfoBlock     ;branch taken if a match due
13195							                                         ;to being right at end of the
13196							                                         ;FS info block name
13197	.f9cc		bd 06 df	lda $df06,x	                lda hazel.fsInfoBlocks,x ;
13198	.f9cf		c9 20		cmp #$20	                cmp #' '
13199	.f9d1		d0 e8		bne $f9bb	                bne nextFSInfoBlock      ;branch taken if not a match
13200							                                         ;as tthe supplied name was a
13201							                                         ;prefix of this FS's name
13202	.f9d3						foundFSInfoBlock:
13203	.f9d3		68		pla		                pla
13204	.f9d4		a6 b0		ldx $b0		                ldx parseFileNameFSWorkspace.fsInfoOffset
13205	.f9d6		bd 08 df	lda $df08,x	                lda hazel.fsInfoBlocks+(fsInfoBlock.fsNumber-(fsInfoBlock.name+size(fsInfoBlock.name))),x
13206	.f9d9		60		rts		                rts

13208	.f9da						badFilingSystemName:
13209	.f9da		00		brk #		                brk
13210	>f9db		f8 42 61 64 20 66 69 6c		                .text $f8,'Bad filing system name',0
	>f9e3		69 6e 67 20 73 79 73 74 65 6d 20 6e 61 6d 65 00
13211							                .pend

13213							;-------------------------------------------------------------------------
13214							;
13215							; Find FS for the given handle
13216							;
13217							; entry:
13218							;
13219							; Y = file handle
13220							;
13221							; exit:
13222							;
13223							; X = FS number - will just use current FS if none suitable found
13224							;
13225	.f9f3						findFSForHandle: .proc
13226	.f9f3		48		pha		                pha                          ;
13227	.f9f4		5a		phy		                phy                          ;
13228	.f9f5		98		tya		                tya                          ;A = handle to search for
13229	.f9f6		a0 00		ldy #$00	                ldy #$00                     ;
13230	.f9f8						loop:
13231	.f9f8		be 06 df	ldx $df06,y	                ldx hazel.fsInfoBlocks.name+0,y
13232	.f9fb		f0 15		beq $fa12	                beq notFound                  ;taken if terminating entry
13233	.f9fd		d9 0e df	cmp $df0e,y	                cmp hazel.fsInfoBlocks.minHandle,y
13234	.fa00		90 07		bcc $fa09	                bcc next                     ;taken if not this FS
13235	.fa02		d9 0f df	cmp $df0f,y	                cmp hazel.fsInfoBlocks.maxHandle,y
13236	.fa05		90 10		bcc $fa17	                bcc found                    ;taken if this FS
13237	.fa07		f0 0e		beq $fa17	                beq found                    ;taken if this FS

13239	.fa09						next:
13240	.fa09		48		pha		                pha
13241	.fa0a		98		tya		                tya
13242	.fa0b		18		clc		                clc
13243	.fa0c		69 0b		adc #$0b	                adc #size(fsInfoBlock)
13244	.fa0e		a8		tay		                tay
13245	.fa0f		68		pla		                pla
13246	.fa10		80 e6		bra $f9f8	                bra loop

13248	.fa12						notFound:
13249	.fa12		ae 00 df	ldx $df00	                ldx hazel.currentFS
13250	.fa15		80 03		bra $fa1a	                bra done

13252	.fa17						found:
13253	.fa17		be 10 df	ldx $df10,y	                ldx hazel.fsInfoBlocks.fsNumber,y
13254	.fa1a						done:
13255	.fa1a		7a		ply		                ply
13256	.fa1b		68		pla		                pla
13257	.fa1c		60		rts		                rts
13258							                .endproc

13260							;-------------------------------------------------------------------------
13261							;
13262							; Select filing system in A.
13263							;
13264							; Entry:
13265							;
13266							; A = FS number
13267							;
13268	.fa1d						selectFS:                               ;fb4d
13269	.fa1d		cd 01 df	cmp $df01	                cmp hazel.activeFS      ; Check active fs
13270	.fa20		f0 16		beq $fa38	                beq rtsFB68               ; Already active fs, return
13271	.fa22		5a		phy		                phy
13272	.fa23		da		phx		                phx
13273	.fa24		a8		tay		                tay
13274	.fa25		3a		dec a		                dec a
13275	.fa26		d0 07		bne $fa2f	                bne LFB5F       ;taken if not FS 1 (tape)

13277							; ??? - only if trying to select tape FS

13279	.fa28		a9 04		lda #$04	                lda #$04
13280	.fa2a		24 e2		bit $e2		                bit $E2
13281	.fa2c		d0 01		bne $fa2f	                bne LFB5F
13282	.fa2e		c8		iny		                iny
13283	.fa2f						LFB5F:
13284	.fa2f		5a		phy		                phy
13285	.fa30		a2 12		ldx #$12	                ldx #romServiceCallInitialiseFilingSystem
13286	.fa32		20 52 ec	jsr $ec52	                jsr makeROMServiceCall
13287	.fa35		68		pla		                pla
13288	.fa36		fa		plx		                plx
13289	.fa37		7a		ply		                ply
13290	.fa38						rtsFB68:
13291	.fa38		60		rts		                rts

13293							;-------------------------------------------------------------------------
13294							;
13295							; FileSwitch FSC
13296							; ==============
13297							;
13298	.fa39						fileswitchFSCEntryPoint:
13299	.fa39		48		pha		                pha                          ;save request type
13300	.fa3a		20 b9 eb	jsr $ebb9	                jsr selectHAZEL
13301	.fa3d		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
13302	.fa40		68		pla		                pla                          ;restore request type
13303	.fa41		48		pha		                pha                          ;save request type
13304	.fa42		da		phx		                phx                          ;save request X
13305	.fa43		0a		asl a		                asl a
13306	.fa44		aa		tax		                tax
13307	.fa45		c9 17		cmp #$17	                cmp #11*2+1
13308	.fa47		b0 03		bcs $fa4c	                bcs fileswitchPassFSCToCurrentFS ;taken if out of range
13309	.fa49		7c 51 fa	jmp ($fa51,x)	                jmp (fileswitchFSCRoutinesTable,x)

13311							;-------------------------------------------------------------------------
13312							;
13313							; Pass to filing system's FSC
13314							;
13315							; There's 2 entry points - fileswitchPassFSCToCurrentFS, for
13316							; when X and A are both on the stack, and
13317							; fileswitchPassFSCToCurrentFS_X, for when only A is on the
13318							; stack.
13319							;
13320	.fa4c						fileswitchPassFSCToCurrentFS:
13321	.fa4c						fileswitchFSCNewFS:
13322	.fa4c						fileswitchFSCFileHandleRange:
13323	.fa4c						fileswitchFSCStarCommand:
13324	.fa4c		fa		plx		                plx                          ;restore request X
13325	.fa4d						fileswitchPassFSCToCurrentFS_X:
13326	.fa4d		68		pla		                pla                          ;restore request type
13327	.fa4e		6c da df	jmp ($dfda)	                jmp (hazel.activeFSCV) ;call active FS's real FSCV entry point

13329							;-------------------------------------------------------------------------
13330							;
13331							; FileSwitch FSC table
13332							;
13333	.fa51						fileswitchFSCRoutinesTable:
13334	>fa51		76 fa				                .word fileswitchFSCOPT
13335	>fa53		6f fa				                .word fileswitchFSCCheckEOF
13336	>fa55		83 fa				                .word fileswitchFSCStarSlash
13337	>fa57		69 fa				                .word fileswitchFSCUnknownCommand
13338	>fa59		83 fa				                .word fileswitchFSCStarRUN
13339	>fa5b		88 fa				                .word fileswitchFSCStarCAT
13340	>fa5d		4c fa				                .word fileswitchFSCNewFS
13341	>fa5f		4c fa				                .word fileswitchFSCFileHandleRange
13342	>fa61		4c fa				                .word fileswitchFSCStarCommand
13343	>fa63		88 fa				                .word fileswitchFSCStarEX
13344	>fa65		88 fa				                .word fileswitchFSCStarINFO
13345	>fa67		b8 fa				                .word fileswitchFSCRUNLibrary

13347							;-------------------------------------------------------------------------
13348							;
13349							; FSC 3 - *command [AUG p344]
13350							;
13351	.fa69						fileswitchFSCUnknownCommand:
13352	.fa69		fa		plx		                plx
13353	.fa6a		20 91 fa	jsr $fa91	                jsr getCommandLinePointer
13354	.fa6d		80 de		bra $fa4d	                bra fileswitchPassFSCToCurrentFS_X

13356							;-------------------------------------------------------------------------
13357							;
13358							; FSC 1 - check EOF [AUG p343]
13359							;
13360	.fa6f						fileswitchFSCCheckEOF:
13361	.fa6f		7a		ply		                ply                         ;Y = file handle
13362	.fa70		5a		phy		                phy                         ;restore stack arrangement
13363	.fa71		20 67 f9	jsr $f967	                jsr selectFSForHandle
13364	.fa74		80 d6		bra $fa4c	                bra fileswitchPassFSCToCurrentFS

13366							;-------------------------------------------------------------------------
13367							;
13368							; FSC 0 - *OPT [AUG p343]
13369							;
13370	.fa76						fileswitchFSCOPT:
13371	.fa76		2c c6 df	bit $dfc6	                bit hazel.tempFSFlag   ; Check temporary fs flag
13372	.fa79		70 d1		bvs $fa4c	                bvs fileswitchPassFSCToCurrentFS
13373	.fa7b		ad 00 df	lda $df00	                lda hazel.currentFS ; Get current filing system number

13375							;-------------------------------------------------------------------------
13376							;
13377							; Pass FSCV request through to a particular FS.
13378							;
13379							; entry:
13380							;
13381							; A = FS to select
13382							;
13383							; Y = FSCV Y
13384							;
13385							; S = [FSCV X; FSCV A]
13386							;
13387	.fa7e						fileswitchPassFSCToSpecificFS:
13388	.fa7e		20 1d fa	jsr $fa1d	                jsr selectFS        ; Select filing system
13389	.fa81		80 c9		bra $fa4c	                bra fileswitchPassFSCToCurrentFS

13391							;-------------------------------------------------------------------------
13392							;
13393							; FSC 2 - */filename [AUG p343]
13394							; FSC 4 - *RUN filename [AUG p344]
13395							;
13396	.fa83						fileswitchFSCStarSlash:
13397	.fa83						fileswitchFSCStarRUN:
13398	.fa83		fa		plx		                plx
13399	.fa84		20 91 fa	jsr $fa91	                jsr getCommandLinePointer ; Skip '*'s and spaces, set command line address
13400	.fa87		da		phx		                phx             ; Continue on to pass to filing system


13403							;-------------------------------------------------------------------------
13404							;
13405							; FSC 5 - *CAT [AUG p344]
13406							; FSC 9 - *EX [NAUG p257]
13407							; FSC, 10 - *INFO [NAUG p257]
13408							;
13409	.fa88						fileswitchFSCStarCAT:
13410	.fa88						fileswitchFSCStarEX:
13411	.fa88						fileswitchFSCStarINFO:
13412	.fa88		fa		plx		                plx
13413	.fa89		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
13414	.fa8c		20 3e f9	jsr $f93e	                jsr parseFileNameAndSelectFS
13415	.fa8f		80 bc		bra $fa4d	                bra fileswitchPassFSCToCurrentFS_X

13417							;-------------------------------------------------------------------------
13418							;
13419							; Get command line pointer.
13420							;
13421							; Entry:
13422							;
13423							; X/Y - pointer to CR-terminated command line string
13424							;
13425							; Exit:
13426							;
13427							; X/Y, (hazel.commandLinePointer) - pointer to first non-space char in
13428							; command line string
13429	.fa91						getCommandLinePointer: .proc ;fbc1
13430	.fa91		86 f2		stx $f2		                stx stringInputBufferAddress+0
13431	.fa93		84 f3		sty $f3		                sty stringInputBufferAddress+1

13433							; skip spaces. Stop if terminating CR encountered.

13435	.fa95		a0 ff		ldy #$ff	                ldy #$FF
13436	.fa97						-
13437	.fa97		c8		iny		                iny
13438	.fa98		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
13439	.fa9a		c9 0d		cmp #$0d	                cmp #$0D
13440	.fa9c		f0 04		beq $faa2	                beq +
13441	.fa9e		c9 20		cmp #$20	                cmp #' '
13442	.faa0		d0 f5		bne $fa97	                bne -

13444	.faa2						+

13446							; Hmm. Didn't we just do this bit already?

13448	.faa2		20 ee f0	jsr $f0ee	                jsr skipSpacesAndCheckForCRInStringInput

13450							; Store address of first non-space char in the HAZEL command line
13451							; pointer.

13453	.faa5		98		tya		                tya
13454	.faa6		18		clc		                clc
13455	.faa7		65 f2		adc $f2		                adc stringInputBufferAddress+0
13456	.faa9		8d 04 df	sta $df04	                sta hazel.commandLinePointer+0
13457	.faac		a5 f3		lda $f3		                lda stringInputBufferAddress+1
13458	.faae		69 00		adc #$00	                adc #$00
13459	.fab0		8d 05 df	sta $df05	                sta hazel.commandLinePointer+1
13460	.fab3		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
13461	.fab5		a6 f2		ldx $f2		                ldx stringInputBufferAddress+0
13462	.fab7		60		rts		                rts
13463							                .pend

13465							;-------------------------------------------------------------------------
13466							;
13467							; FSC 11 - RUN from libfs [NAUG p257]
13468							;
13469	.fab8						fileswitchFSCRUNLibrary:
13470	.fab8		ad 02 df	lda $df02	                lda hazel.libFS      ; Is a libfs set?
13471	.fabb		10 c1		bpl $fa7e	                bpl fileswitchPassFSCToSpecificFS
13472	.fabd						badCommandError:
13473	.fabd		00		brk #		                brk
13474	>fabe		fe				                .byte 254
13475	>fabf		42 61 64 20 63 6f 6d 6d		                .text "Bad command"
	>fac7		61 6e 64
13476	.faca		00		brk #		                brk

13478							;-------------------------------------------------------------------------

13480							                .if version==350
13708							                .endif

13710							;-------------------------------------------------------------------------

13712	>facb		ff ff ff ff ff ff ff ff		                .fill $fc00-*,$ff
	>fad3		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fae3		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>faf3		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb03		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb13		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb23		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb33		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb43		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb53		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb63		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb73		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb83		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb93		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fba3		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbb3		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbc3		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbd3		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbe3		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbf3		ff ff ff ff ff ff ff ff ff ff ff ff ff

13714							                .if version==350
13743							                .else

13745							;-------------------------------------------------------------------------
13746							;
13747							; Credits - normally hidden by the I/O region.
13748							;

13750							                .if version<500
13751	>fc00		28 43 29 20 31 39 38 34		                .text "(C) 1984 Acorn Computers Ltd."
	>fc08		20 41 63 6f 72 6e 20 43 6f 6d 70 75 74 65 72 73
	>fc18		20 4c 74 64 2e
13752	>fc1d		54 68 61 6e 6b 73 20 61		                .text "Thanks are due to the following contributors to the BBC Computer (among others too numerous to mention):- "
	>fc25		72 65 20 64 75 65 20 74 6f 20 74 68 65 20 66 6f
	>fc35		6c 6c 6f 77 69 6e 67 20 63 6f 6e 74 72 69 62 75
	>fc45		74 6f 72 73 20 74 6f 20 74 68 65 20 42 42 43 20
	>fc55		43 6f 6d 70 75 74 65 72 20 28 61 6d 6f 6e 67 20
	>fc65		6f 74 68 65 72 73 20 74 6f 6f 20 6e 75 6d 65 72
	>fc75		6f 75 73 20 74 6f 20 6d 65 6e 74 69 6f 6e 29 3a
	>fc85		2d 20
13760							                .endif
13761	>fc87		44 61 76 69 64 20 41 6c		                .text "David Allen,"
	>fc8f		6c 65 6e 2c
13762							                .if version<500
13763	>fc93		43 6c 69 76 65 20 41 6e		                .text "Clive Angel,"
	>fc9b		67 65 6c 2c
13764							                .endif
13765	>fc9f		44 61 76 69 64 20 42 65		                .text "David Bell,"
	>fca7		6c 6c 2c
13766	>fcaa		50 61 75 6c 20 42 6f 6e		                .text "Paul Bond,"
	>fcb2		64 2c
13767							                .if version<500
13768	>fcb4		41 6c 6c 65 6e 20 42 6f		                .text "Allen Boothroyd,"
	>fcbc		6f 74 68 72 6f 79 64 2c
13769							                .endif
13770	>fcc4		4a 75 6c 69 61 6e 20 42		                .text "Julian Brown,"
	>fccc		72 6f 77 6e 2c
13771	>fcd1		54 75 64 6f 72 20 42 72		                .text "Tudor Brown,"
	>fcd9		6f 77 6e 2c
13772							                .if version>=500
13774							                .endif
13775	>fcdd		42 72 69 61 6e 20 43 6f		                .text "Brian Cockburn,"
	>fce5		63 6b 62 75 72 6e 2c
13776							                .if version>=500
13778							                .endif
13779							                .if version<500
13780	>fcec		50 65 74 65 20 43 6f 63		                .text "Pete Cockerell,"
	>fcf4		6b 65 72 65 6c 6c 2c
13781							                .endif
13782	>fcfb		4d 61 72 6b 20 43 6f 6c		                .text "Mark Colton,"
	>fd03		74 6f 6e 2c
13783	>fd07		43 68 72 69 73 20 43 75		                .text "Chris Curry,"
	>fd0f		72 72 79 2c
13784							                .if version>=500
13787							                .endif
13788	>fd13		4a 6f 65 20 44 75 6e 6e		                .text "Joe Dunn,"
	>fd1b		2c
13789							                .if version==400
13790	>fd1c		57 65 6e 64 79 20 46 72		                .text "Wendy Frazer,"
	>fd24		61 7a 65 72 2c
13791							                .endif
13792							                .if version<500
13793	>fd29		50 61 75 6c 20 46 72 65		                .text "Paul Freakley,"
	>fd31		61 6b 6c 65 79 2c
13794							                .endif
13795							                .if version>=500
13798							                .endif
13799	>fd37		53 74 65 76 65 20 46 75		                .text "Steve Furber,"
	>fd3f		72 62 65 72 2c
13800	>fd44		4d 61 72 74 79 6e 20 47		                .text "Martyn Gilbert,"
	>fd4c		69 6c 62 65 72 74 2c
13801	>fd53		4a 6f 68 6e 20 48 61 72		                .text "John Harrison,"
	>fd5b		72 69 73 6f 6e 2c
13802	>fd61		48 65 72 6d 61 6e 6e 20		                .text "Hermann Hauser,"
	>fd69		48 61 75 73 65 72 2c
13803							                .if version!=400
13805							                .endif
13806							                .if version>=500
13808							                .endif
13809	>fd70		4a 6f 68 6e 20 48 6f 72		                .text "John Horton,"
	>fd78		74 6f 6e 2c
13810							                .if version==400
13811	>fd7c		52 69 63 68 61 72 64 20		                .text "Richard Hughes,"
	>fd84		48 75 67 68 65 73 2c
13812							                .endif
13813							                .if version>=500
13815							                .endif
13816							                .if version<500
13817	>fd8b		4e 65 69 6c 20 4a 6f 68		                .text "Neil Johnson,"
	>fd93		6e 73 6f 6e 2c
13818							                .endif
13819	>fd98		52 69 63 68 61 72 64 20		                .text "Richard King,"
	>fda0		4b 69 6e 67 2c
13820	>fda5		44 61 76 69 64 20 4b 69		                .text "David Kitson,"
	>fdad		74 73 6f 6e 2c
13821							                .if version>=500
13823							                .endif
13824	>fdb2		4a 75 6c 69 61 6e 20 4c		                .text "Julian Lomberg,"
	>fdba		6f 6d 62 65 72 67 2c
13825	>fdc1		52 6f 62 20 4d 61 63 6d		                .text "Rob Macmillan,"
	>fdc9		69 6c 6c 61 6e 2c
13826							                .if version>=500
13828							                .endif
13829	>fdcf		52 69 63 68 61 72 64 20		                .text "Richard Manby,"
	>fdd7		4d 61 6e 62 79 2c
13830							                .if version<500
13831	>fddd		50 65 74 65 72 20 4d 63		                .text "Peter McKenna,"
	>fde5		4b 65 6e 6e 61 2c
13832	>fdeb		41 6e 64 72 65 77 20 4d		                .text "Andrew McKernan,"
	>fdf3		63 4b 65 72 6e 61 6e 2c
13833							                .if version==400
13834	>fdfb		4d 69 63 6b 20 4e 65 61		                .text "Mick Neal,"
	>fe03		6c 2c
13837							                .endif
13838	>fe05		49 61 6e 20 4e 69 62 6c		                .text "Ian Niblock,"
	>fe0d		6f 63 6b 2c
13839							                .endif
13840							                .if version>=500
13843							                .endif
13844	>fe11		47 6c 65 6e 20 4e 69 63		                .text "Glen Nicholls,"
	>fe19		68 6f 6c 6c 73 2c
13845	>fe1f		52 6f 62 65 72 74 20 4e		                .text "Robert Nokes,"
	>fe27		6f 6b 65 73 2c
13846							                .if version>=500
13848							                .endif
13849	>fe2c		52 69 63 68 61 72 64 20		                .text "Richard Page,"
	>fe34		50 61 67 65 2c
13850							                .if version<400
13852							                .endif
13853							                .if version<=400
13854	>fe39		45 64 20 50 68 69 70 70		                .text "Ed Phipps,"
	>fe41		73 2c
13855							                .endif
13856	>fe43		4a 6f 68 6e 20 52 61 64		                .text "John Radcliffe,"
	>fe4b		63 6c 69 66 66 65 2c
13857	>fe52		52 69 63 6b 20 52 61 6e		                .text "Rick Rand,"
	>fe5a		64 2c
13858							                .if version>=400
13859	>fe5c		4e 69 63 6b 20 52 65 65		                .text "Nick Reeves,"
	>fe64		76 65 73 2c
13860							                .endif
13861	>fe68		42 72 69 61 6e 20 52 6f		                .text "Brian Robertson,"
	>fe70		62 65 72 74 73 6f 6e 2c
13862							                .if version>=500
13864							                .endif
13865	>fe78		52 69 63 68 61 72 64 20		                .text "Richard Russell,"
	>fe80		52 75 73 73 65 6c 6c 2c
13866							                .if version<500
13867	>fe88		47 6f 72 64 6f 6e 20 53		                .text "Gordon Sage,"
	>fe90		61 67 65 2c
13868	>fe94		54 65 72 72 79 20 53 63		                .text "Terry Scotcher,"
	>fe9c		6f 74 63 68 65 72 2c
13869							                .endif
13870							                .if version>=500
13873							                .endif
13874	>fea3		44 61 76 69 64 20 53 65		                .text "David Seal,"
	>feab		61 6c 2c
13875							                .if version>=500
13878							                .endif
13879							                .if version!=400
13881							                .endif
13882	>feae		4a 6f 6e 20 54 68 61 63		                .text "Jon Thackray,"
	>feb6		6b 72 61 79 2c
13883							                .if version>=500
13885							                .endif
13886	>febb		48 75 67 6f 20 54 79 73		                .text "Hugo Tyson,"
	>fec3		6f 6e 2c
13887							                .if version<500
13888	>fec6		41 64 72 69 61 6e 20 57		                .text "Adrian Warner,"
	>fece		61 72 6e 65 72 2c
13889							                .if version==400
13890	>fed4		4a 65 73 20 57 69 6c 6c		                .text "Jes Wills,"
	>fedc		73 2c
13893							                .endif
13894							                .endif
13895							                .if version<500
13896	>fede		52 6f 67 65 72 20 57 69		                .text "Roger Wilson,"
	>fee6		6c 73 6f 6e 2c
13897	>feeb		47 72 61 68 61 6d 20 57		                .text "Graham Winterflood."
	>fef3		69 6e 74 65 72 66 6c 6f 6f 64 2e
13898							                ;.text "   "
13899							                .endif
13900							                .if version>=500
13902							                .endif
13903							                .if version!=400
13909							                .else
13910	>fefe						                .align 256
13911							                .endif

13913							;-------------------------------------------------------------------------

13915							                .endif

13917							;-------------------------------------------------------------------------

13919	.ff00						E_USERV: ; ff00
13920	.ff00		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13921	.ff03						E_BRKV: ; ff03
13922	.ff03		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13923	.ff06						E_IRQ1V: ; ff06
13924	.ff06		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13925	.ff09						E_IRQ2V: ; ff09
13926	.ff09		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13927	.ff0c						E_CLIV: ; ff0c
13928	.ff0c		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13929	.ff0f						E_BYTEV: ; ff0f
13930	.ff0f		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13931	.ff12						E_WORDV: ; ff12
13932	.ff12		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13933	.ff15						E_WRCHV: ; ff15
13934	.ff15		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13935	.ff18						E_RDCHV: ; ff18
13936	.ff18		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13937	.ff1b						E_FILEV: ; ff1b
13938	.ff1b		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13939	.ff1e						E_ARGSV: ; ff1e
13940	.ff1e		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13941	.ff21						E_BGETV: ; ff21
13942	.ff21		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13943	.ff24						E_BPUTV: ; ff24
13944	.ff24		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13945	.ff27						E_GBPBV: ; ff27
13946	.ff27		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13947	.ff2a						E_FINDV: ; ff2a
13948	.ff2a		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13949	.ff2d						E_FSCV: ; ff2d
13950	.ff2d		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13951	.ff30						E_EVENTV: ; ff30
13952	.ff30		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13953	.ff33						E_UPTV: ; ff33
13954	.ff33		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13955	.ff36						E_NETV: ; ff36
13956	.ff36		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13957	.ff39						E_VDUV: ; ff39
13958	.ff39		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13959	.ff3c						E_KEYV: ; ff3c
13960	.ff3c		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13961	.ff3f						E_INSV: ; ff3f
13962	.ff3f		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13963	.ff42						E_REMV: ; ff42
13964	.ff42		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13965	.ff45						E_CNPV: ; ff45
13966	.ff45		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13967	.ff48						E_IND1V: ; ff48
13968	.ff48		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13969	.ff4b						E_IND2V: ; ff4b
13970	.ff4b		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13971	.ff4e						E_IND3V: ; ff4e
13972	.ff4e		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint

13974							;-------------------------------------------------------------------------

13976	.ff51						extendedVectorEntryPoint:
13977							                ; .if CFA3000
13978							                ; ;...
13979							                ; .else
13980							                ; $10b,x = rL
13981	.ff51		48		pha		                pha                 ; $10a,x  (old ROMSEL)
13982	.ff52		48		pha		                pha                 ; $109,x  (old ACCCON)
13983	.ff53		48		pha		                pha                 ; $108,x  (thunk rH)
13984	.ff54		48		pha		                pha                 ; $107,x  (thunk rL)
13985	.ff55		48		pha		                pha                 ; $106,x  (jump dest MSB)
13986	.ff56		48		pha		                pha                 ; $105,x  (jump dest LSB)
13987	.ff57		08		php		                php                 ; $104,x  (P for RTI)
13988	.ff58		48		pha		                pha                 ; $103,x  (old A)
13989	.ff59		da		phx		                phx                 ; $102,x  (old X)
13990	.ff5a		5a		phy		                phy                 ; $101,x  (old Y)
13991	.ff5b		ba		tsx		                tsx
13992	.ff5c		a9 ff		lda #$ff	                lda #>extendedVectorReturnThunk-1
13993	.ff5e		9d 08 01	sta $0108,x	                sta $0108,x
13994	.ff61		a9 8c		lda #$8c	                lda #<extendedVectorReturnThunk-1
13995	.ff63		9d 07 01	sta $0107,x	                sta $0107,x

13997							                ; this routine is only ever called from $ff00, $ff03,
13998							                ; $ff06, etc. - so rL holds vectorIndex*3+2, suitable
13999							                ; for indexing into the extended vector space.
14000	.ff66		bc 0b 01	ldy $010b,x	                ldy $010B,x                  ;Y=vectorIndex*3+2
14001	.ff69		b9 9d 0d	lda $0d9d,y	                lda extendedVectorSpace-2,y  ;get vector LSB
14002	.ff6c		9d 05 01	sta $0105,x	                sta $0105,x                  ;
14003	.ff6f		b9 9e 0d	lda $0d9e,y	                lda extendedVectorSpace-1,y  ;get vector MSB
14004	.ff72		9d 06 01	sta $0106,x	                sta $0106,x
14005	.ff75		a5 f4		lda $f4		                lda $F4
14006	.ff77		9d 0a 01	sta $010a,x	                sta $010A,x
14007	.ff7a		ad 34 fe	lda $fe34	                lda ACCCON
14008	.ff7d		9d 09 01	sta $0109,x	                sta $0109,x

14010							                ; New stack layout:
14011							                ;
14012							                ; $10a,x - old ROMSEL
14013							                ; $109,x - old ACCCON
14014							                ; $108,x - thunk rH
14015							                ; $107,x - thunk rL
14016							                ; $106,x - jump dest MSB
14017							                ; $105,x - jump dest LSB
14018							                ; $104,x - P (for RTI)
14019							                ; $103,x - old A
14020							                ; $102,x - old X
14021							                ; $101,x - old Y

14023	.ff80		20 b9 eb	jsr $ebb9	                jsr mos.selectHAZEL
14024	.ff83		b9 9f 0d	lda $0d9f,y	                lda extendedVectorSpace,y    ;get vector ROM number
14025	.ff86		20 9f e5	jsr $e59f	                jsr mos.selectROMA
14026	.ff89		7a		ply		                ply
14027	.ff8a		fa		plx		                plx
14028	.ff8b		68		pla		                pla
14029	.ff8c		40		rti		                rti
14030							;                .endif

14032							;-------------------------------------------------------------------------

14034	.ff8d						extendedVectorReturnThunk:
14035	.ff8d		08		php		                php
14036	.ff8e		48		pha		                pha
14037	.ff8f		da		phx		                phx
14038	.ff90		ba		tsx		                tsx
14039	.ff91		bd 02 01	lda $0102,x	                lda $0102,x
14040	.ff94		9d 06 01	sta $0106,x	                sta $0106,x
14041	.ff97		bd 03 01	lda $0103,x	                lda $0103,x
14042	.ff9a		9d 07 01	sta $0107,x	                sta $0107,x
14043	.ff9d		fa		plx		                plx
14044	.ff9e		68		pla		                pla
14045	.ff9f		68		pla		                pla
14046	.ffa0		68		pla		                pla
14047	.ffa1		20 af eb	jsr $ebaf	                jsr mos.selectMOSOrHAZEL
14048	.ffa4		68		pla		                pla
14049	.ffa5		20 9f e5	jsr $e59f	                jsr mos.selectROMA
14050	.ffa8		68		pla		                pla
14051	.ffa9		28		plp		                plp
14052	.ffaa						rtsFFAA:
14053	.ffaa		60		rts		                rts

14055							;-------------------------------------------------------------------------
14056							;
14057							; OSBYTE 150 (&96) Read from SHEILA (&FE00 â<80><93> &FEFF) [MasRef D.2-45]
14058							;
14059	.ffab						osbyte96:
14060	.ffab		bc 00 fe	ldy $fe00,x	                ldy $fe00,x
14061	.ffae		60		rts		                rts

14063							;-------------------------------------------------------------------------
14064							;
14065							; OSBYTE 157 (&9D) Write byte across Tube [MasRef D.2-48]
14066							;
14067	.ffaf						osbyte9D:
14068	.ffaf		8a		txa		                txa
14069	.ffb0		80 22		bra $ffd4	                bra OSBPUT

14071	.ffb2		00		brk #		                brk

14073							;-------------------------------------------------------------------------

14075							; MOS block ends here, so that the standard entry points have
14076							; unadorned names.
14077							;
14078							; A couple of the E_ entry points need namespacing in the Terminal
14079							; ROM.
14080							                .endblock


14083							;-------------------------------------------------------------------------
14084	.ffb3						OSWRSC:
14085	.ffb3		4c f1 f1	jmp $f1f1	                jmp mos.oswrscEntryPoint ; FFB3
14086	>ffb6		36				                .byte mos.defaultVectorTable.end-mos.defaultVectorTable ;
14087	>ffb7		e7 e2				                .word mos.defaultVectorTable ;
14088	.ffb9						OSRDSC:
14089	.ffb9		4c eb f1	jmp $f1eb	                jmp mos.osrdscEntryPoint ; FFB9
14090	.ffbc						VDUCHR:
14091	.ffbc		4c db f1	jmp $f1db	                jmp mos.vduChrEntryPoint ; FFBC
14092	.ffbf						OSEVEN:
14093	.ffbf		4c d0 e8	jmp $e8d0	                jmp mos.eventEntryPoint ; FFBF
14094	.ffc2						GSINIT:
14095	.ffc2		4c 5d f0	jmp $f05d	                jmp mos.gsinitEntryPoint ; FFC2
14096	.ffc5						GSREAD:
14097	.ffc5		4c 6e f0	jmp $f06e	                jmp mos.gsreadEntryPoint ; FFC5
14098	.ffc8						NVRDCH:
14099	.ffc8		4c d5 e6	jmp $e6d5	                jmp mos.osrdchEntryPoint                    ; FFC8
14100	.ffcb						NVWRCH:
14101	.ffcb		4c 38 e7	jmp $e738	                jmp mos.oswrchEntryPoint                    ; FFCB
14102	.ffce						OSFIND:
14103	.ffce		4c eb f8	jmp $f8eb	                jmp mos.osfindEntryPoint                    ; FFCE
14104	.ffd1						OSGBPB:
14105	.ffd1		4c 8e f8	jmp $f88e	                jmp mos.osgbpbEntryPoint                    ; FFD1
14106	.ffd4						OSBPUT:
14107	.ffd4		4c 82 f8	jmp $f882	                jmp mos.osbputEntryPoint                    ; FFD4
14108	.ffd7						OSBGET:
14109	.ffd7		4c 88 f8	jmp $f888	                jmp mos.osbgetEntryPoint                    ; FFD7
14110	.ffda						OSARGS:
14111	.ffda		4c b7 f8	jmp $f8b7	                jmp mos.osargsEntryPoint ; FFDA
14112	.ffdd						OSFILE:
14113	.ffdd		4c fa f8	jmp $f8fa	                jmp mos.osfileEntryPoint ; FFDD
14114	.ffe0						OSRDCH:
14115	.ffe0		6c 10 02	jmp ($0210)	                jmp (RDCHV)                  ; FFE0
14116	.ffe3						OSASCI:
14117	.ffe3		c9 0d		cmp #$0d	                cmp #$0D                     ; FFE3
14118	.ffe5		d0 07		bne $ffee	                bne OSWRCH                   ; FFE5
14119	.ffe7						OSNEWL:
14120	.ffe7		a9 0a		lda #$0a	                lda #$0A                     ; FFE7
14121	.ffe9		20 ee ff	jsr $ffee	                jsr OSWRCH                   ; FFE9
14122	.ffec		a9 0d		lda #$0d	                lda #$0D                     ; FFEC
14123	.ffee						OSWRCH:
14124	.ffee		6c 0e 02	jmp ($020e)	                jmp (WRCHV)                  ; FFEE
14125	.fff1						OSWORD:
14126	.fff1		6c 0c 02	jmp ($020c)	                jmp (WORDV)                  ; FFF1
14127	.fff4						OSBYTE:
14128	.fff4		6c 0a 02	jmp ($020a)	                jmp (BYTEV)                  ; FFF4
14129	.fff7						OSCLI:
14130	.fff7		6c 08 02	jmp ($0208)	                jmp (CLIV)                  ; FFF7

14132	.fffa						LFFFA:                                       ; FFFA NMIV
14133	>fffa		00 0d				                .word nmiEntryPoint
14134	.fffc						LFFFC:                                       ; FFFB RESETV
14135	>fffc		74 e3				                .word mos.resetEntryPoint
14136	.fffe						LFFFE:                                       ; FFFE IRQV
14137	>fffe		ab e5				                .word mos.irqEntryPoint


:1	;******  Return to file: mos400.s65

33							                .endsection

;******  End of listing
