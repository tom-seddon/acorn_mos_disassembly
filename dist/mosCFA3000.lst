
; 64tass Turbo Assembler Macro V1.59.3120+ listing file
; 64tass --m65c02 --nostart -Wall -q --case-sensitive --line-numbers --verbose-list -Lbuild/mosCFA3000.lst --output-section mos -o build/CFA3000/mos.rom --output-section utils -o build/CFA3000/utils.rom --output-section ext -o build/CFA3000/ext.rom mosCFA3000.s65
; Wed Nov 15 00:54:55 2023

;Line	;Offset	;PC	;Hex		;Monitor	;Source

:1	;******  Processing input file: mosCFA3000.s65

1							                .include "src/hardware.s65"

:2	;******  Processing file: src/hardware.s65

1							;-------------------------------------------------------------------------

3							                .virtual $fe00

5	.fe00						CRTC: .block

7							                .virtual 8
8	.0008						R8: .block
9	=$00						normalSync=%00000000
10	=$01						interlaceSync=%00000001
11	=$02						normalSyncAlt=%00000010
12	=$03						interlaceSyncAndVideo=%00000011

14	=0						displayDelay0=0<<4
15	=16						displayDelay1=1<<4
16	=32						displayDelay2=2<<4
17	=48						displayDisable=3<<4

19	=0						cursorDelay0=0<<6
20	=64						cursorDelay1=1<<6
21	=128						cursorDelay2=2<<6
22	=192						cursorDisable=3<<6
23							                .endblock
24							                .endvirtual

26							                .virtual 10
27	.000a						R10: .block
28	=$40						blink=$40
29	=$20						slowBlink=$20
30							                .endblock
31							                .endvirtual

33							                .endblock

35							                .endvirtual

37							;-------------------------------------------------------------------------
38							; ACIA=$fe08
39	=$fe10						SERPROC=$fe10
40							;HADC=$fe18
41	=$fee0						TUBE=$fee0
42	=$fe30						ROMSEL=$fe30
43							;ACCCON=$fe34
44							                .virtual $fe20
45	.fe20						VCONTROL: .block
46	=$01						flash=$01
47	=$02						isTeletext=$02
48	=$00						shift2MHz=$00
49	=$04						shift4MHz=$04
50	=$08						shift8MHz=$08
51	=$0c						shift16MHz=$0c
52	=$00						crtc1MHz=$00
53	=$10						crtc2MHz=$10
54	=$00						cursor____=$00
55	=$20						cursor__XX=$20
56	=$40						cursor_X__=$40
57	=$60						cursor_XXX=$60
58	=$80						cursorX___=$80
59	=$a0						cursorX_XX=$a0
60	=$c0						cursorXX__=$c0
61	=$e0						cursorXXXX=$e0
62							                .endblock
63							                .endvirtual
64	=$fe21						VPALETTE=$fe21

66							;-------------------------------------------------------------------------

68							                .virtual $fe08
69	.fe08						ACIA: .block

71	.fe08						control: .block
72	=0						counterDivide1=0<<0
73	=1						counterDivide16=1<<0
74	=2						counterDivide64=2<<0
75	=3						reset=3<<0

77	=0						word7DataEventParity2Stop=0<<2
78	=4						word7DataOddParity2Stop=1<<2
79	=8						word7DataEvenParity1Stop=2<<2
80	=12						word7DataOddParity1Stop=3<<2
81	=16						word8DataNoParity2Stop=4<<2
82	=20						word8DataNoParity1Stop=5<<2
83	=24						word8DataEvenParity1Stop=6<<2
84	=28						word8DataOddParity1Stop=7<<2

86	=0						rtsLowTXInterruptDisabled=0<<5
87	=32						rtsLowTXInterruptEnabled=1<<5
88	=64						rtsHighTXInterruptDisabled=2<<5
89	=96						rtsLowBreakTXInterruptDisabled=3<<5

91	=0						rtsRXInterruptDisabled=0<<7
92	=128						rtsRTSInterruptEnabled=1<<7

94							                .endblock
95	.fe08						status: .block
96							                .endblock

98	>fe08						                .fill 1
99	.fe09						tdr:
100	.fe09						rdr:
101	>fe09						                .fill 1
102							                .endblock
103							                .endvirtual

105							;-------------------------------------------------------------------------

107							                .virtual $fe18
108	.fe18						HADC: .block
109	.fe18						status: .block
110							                .endblock
111	.fe18						latch: .block
112							                .endblock
113	>fe18						                .fill 1

115							                .endblock
116							                .endvirtual

118							;-------------------------------------------------------------------------

120							                .virtual $fe34
121	.fe34						ACCCON: .block
122							;D=1 = display shadow RAM; D=0 = display main RAM
123	=$01						D=$01

125							;E=1 = VDU code ($c000-$dfff in MOS ROM) accesses shadow RAM; E=0 =
126							;VDU code accesses main RAM
127	=$02						E=$02

129							;X=1 = shadow RAM at $3000; X=0 = main RAM at $3000
130	=$04						X=$04

132							;Y=1 = HAZEL at $c000; Y=0 = MOS ROM at $c000
133	=$08						Y=$08

135							;ITU=1 = access internal Tube; ITU=0 = access external Tube
136	=$10						ITU=$10

138							;IFJ=1 = $fc00...$fdff accesses cartridge; IFJ=0 = $fc00...$fdff
139							;accesses 1MHz bus
140	=$20						IFJ=$20

142							; TST=1 = read MOS ROM at $fc00...$feff; TST=0 = read I/O at
143							; $fc00...$feff
144	=$40						TST=$40

146							;IRR=1 = IRQ to CPU
147	=$80						IRR=$80
148							                .bend
149							                .endv

151							                VIA: .struct                    ;
152	.0000						orb:
153	.0000						irb:
154	>0000						                .fill 1         ;0
155	.0001						ora:
156	.0001						ira:
157	>0001						                .fill 1         ;1
158	.0002						ddrb:
159	>0002						                .fill 1         ;2
160	.0003						ddra:
161	>0003						                .fill 1         ;3
162	.0004						t1cL:
163	>0004						                .fill 1         ;4
164	.0005						t1cH:
165	>0005						                .fill 1         ;5
166	.0006						t1lL:
167	>0006						                .fill 1         ;6
168	.0007						t1lH:
169	>0007						                .fill 1         ;7
170	.0008						t2cL:
171	>0008						                .fill 1         ;8
172	.0009						t2cH:
173	>0009						                .fill 1         ;9
174	.000a						sr:
175	>000a						                .fill 1         ;10
176	.000b						acr: .block
177	=0						t1OneShot=0<<6
178	=64						t1Continuous=1<<6
179	=128						t1OneShotPB7=2<<6
180	=192						t1ContinuousPB7=3<<6

182	=0						t2Timer=0<<5
183	=32						t2CountPB6=1<<5

185	=0						srDisabled=0<<2
186	=4						srShiftInT2=1<<2
187	=8						srShiftInVIAClock=2<<2
188	=12						srShiftInExtClock=3<<2
189	=16						srShiftOutT2FreeRun=4<<2
190	=20						srShiftOutT2=5<<2
191	=24						srShiftOutVIAClock=6<<2
192	=28						srShiftOutExtClock=7<<2

194	=0						pbLatchDisabled=0<<1
195	=2						pbLatchEnabled=1<<1

197	=0						paLatchDisabled=0<<0
198	=1						paLatchEnabled=1<<0

200	>000b						                .fill 1         ;11
201							                .endblock
202	.000c						pcr: .block

204	=0						cb2InputNegativeActiveEdge=0<<5
205	=32						cb2IndependentInterruptInputNegativeEdge=1<<5
206	=64						cb2InputPositiveEdge=2<<5
207	=96						cb2IndependentInterruptInputPositiveEdge=3<<5
208	=128						cb2HandshakeOutput=4<<5
209	=160						cb2PulseOutput=5<<5
210	=192						cb2LowOutput=6<<5
211	=224						cb2HighOutput=7<<5

213	=0						cb1NegativeActiveEdge=0<<4
214	=16						cb1PositiveActiveEdge=1<<4

216	=0						ca2InputNegativeActiveEdge=0<<1
217	=2						ca2IndependentInterruptInputNegativeEdge=1<<1
218	=4						ca2InputPositiveEdge=2<<1
219	=6						ca2IndependentInterruptInputPositiveEdge=3<<1
220	=8						ca2HandshakeOutput=4<<1
221	=10						ca2PulseOutput=5<<1
222	=12						ca2LowOutput=6<<1
223	=14						ca2HighOutput=7<<1

225	=0						ca1NegativeActiveEdge=0<<0
226	=1						ca1PositiveActiveEdge=1<<0

228	>000c						                .fill 1         ;12
229							                .endblock
230	.000d						ifr:
231	>000d						                .fill 1         ;13
232	.000e						ier:
233	>000e						                .fill 1         ;14
234	.000f						oraNoHandshake:
235	.000f						iraNoHandshake:
236	>000f						                .fill 1         ;15

238	.0010						irq: .block
239	=1						ca2=1
240	=2						ca1=2
241	=4						sr=4
242	=8						cb2=8
243	=16						cb1=16
244	=32						t2=32
245	=64						t1=64
246							                .endblock
247							                .ends

249							                                .virtual $fe40
250	.fe40						systemVIA: .dstruct VIA
152	.fe40						orb:
153	.fe40						irb:
154	>fe40						                .fill 1         ;0
155	.fe41						ora:
156	.fe41						ira:
157	>fe41						                .fill 1         ;1
158	.fe42						ddrb:
159	>fe42						                .fill 1         ;2
160	.fe43						ddra:
161	>fe43						                .fill 1         ;3
162	.fe44						t1cL:
163	>fe44						                .fill 1         ;4
164	.fe45						t1cH:
165	>fe45						                .fill 1         ;5
166	.fe46						t1lL:
167	>fe46						                .fill 1         ;6
168	.fe47						t1lH:
169	>fe47						                .fill 1         ;7
170	.fe48						t2cL:
171	>fe48						                .fill 1         ;8
172	.fe49						t2cH:
173	>fe49						                .fill 1         ;9
174	.fe4a						sr:
175	>fe4a						                .fill 1         ;10
176	.fe4b						acr: .block
177	=0						t1OneShot=0<<6
178	=64						t1Continuous=1<<6
179	=128						t1OneShotPB7=2<<6
180	=192						t1ContinuousPB7=3<<6

182	=0						t2Timer=0<<5
183	=32						t2CountPB6=1<<5

185	=0						srDisabled=0<<2
186	=4						srShiftInT2=1<<2
187	=8						srShiftInVIAClock=2<<2
188	=12						srShiftInExtClock=3<<2
189	=16						srShiftOutT2FreeRun=4<<2
190	=20						srShiftOutT2=5<<2
191	=24						srShiftOutVIAClock=6<<2
192	=28						srShiftOutExtClock=7<<2

194	=0						pbLatchDisabled=0<<1
195	=2						pbLatchEnabled=1<<1

197	=0						paLatchDisabled=0<<0
198	=1						paLatchEnabled=1<<0

200	>fe4b						                .fill 1         ;11
201							                .endblock
202	.fe4c						pcr: .block

204	=0						cb2InputNegativeActiveEdge=0<<5
205	=32						cb2IndependentInterruptInputNegativeEdge=1<<5
206	=64						cb2InputPositiveEdge=2<<5
207	=96						cb2IndependentInterruptInputPositiveEdge=3<<5
208	=128						cb2HandshakeOutput=4<<5
209	=160						cb2PulseOutput=5<<5
210	=192						cb2LowOutput=6<<5
211	=224						cb2HighOutput=7<<5

213	=0						cb1NegativeActiveEdge=0<<4
214	=16						cb1PositiveActiveEdge=1<<4

216	=0						ca2InputNegativeActiveEdge=0<<1
217	=2						ca2IndependentInterruptInputNegativeEdge=1<<1
218	=4						ca2InputPositiveEdge=2<<1
219	=6						ca2IndependentInterruptInputPositiveEdge=3<<1
220	=8						ca2HandshakeOutput=4<<1
221	=10						ca2PulseOutput=5<<1
222	=12						ca2LowOutput=6<<1
223	=14						ca2HighOutput=7<<1

225	=0						ca1NegativeActiveEdge=0<<0
226	=1						ca1PositiveActiveEdge=1<<0

228	>fe4c						                .fill 1         ;12
229							                .endblock
230	.fe4d						ifr:
231	>fe4d						                .fill 1         ;13
232	.fe4e						ier:
233	>fe4e						                .fill 1         ;14
234	.fe4f						oraNoHandshake:
235	.fe4f						iraNoHandshake:
236	>fe4f						                .fill 1         ;15

238	.fe50						irq: .block
239	=1						ca2=1
240	=2						ca1=2
241	=4						sr=4
242	=8						cb2=8
243	=16						cb1=16
244	=32						t2=32
245	=64						t1=64
246							                .endblock
247							                .ends
251							                .endv

253							                .virtual $fe60
254	.fe60						userVIA: .dstruct VIA
152	.fe60						orb:
153	.fe60						irb:
154	>fe60						                .fill 1         ;0
155	.fe61						ora:
156	.fe61						ira:
157	>fe61						                .fill 1         ;1
158	.fe62						ddrb:
159	>fe62						                .fill 1         ;2
160	.fe63						ddra:
161	>fe63						                .fill 1         ;3
162	.fe64						t1cL:
163	>fe64						                .fill 1         ;4
164	.fe65						t1cH:
165	>fe65						                .fill 1         ;5
166	.fe66						t1lL:
167	>fe66						                .fill 1         ;6
168	.fe67						t1lH:
169	>fe67						                .fill 1         ;7
170	.fe68						t2cL:
171	>fe68						                .fill 1         ;8
172	.fe69						t2cH:
173	>fe69						                .fill 1         ;9
174	.fe6a						sr:
175	>fe6a						                .fill 1         ;10
176	.fe6b						acr: .block
177	=0						t1OneShot=0<<6
178	=64						t1Continuous=1<<6
179	=128						t1OneShotPB7=2<<6
180	=192						t1ContinuousPB7=3<<6

182	=0						t2Timer=0<<5
183	=32						t2CountPB6=1<<5

185	=0						srDisabled=0<<2
186	=4						srShiftInT2=1<<2
187	=8						srShiftInVIAClock=2<<2
188	=12						srShiftInExtClock=3<<2
189	=16						srShiftOutT2FreeRun=4<<2
190	=20						srShiftOutT2=5<<2
191	=24						srShiftOutVIAClock=6<<2
192	=28						srShiftOutExtClock=7<<2

194	=0						pbLatchDisabled=0<<1
195	=2						pbLatchEnabled=1<<1

197	=0						paLatchDisabled=0<<0
198	=1						paLatchEnabled=1<<0

200	>fe6b						                .fill 1         ;11
201							                .endblock
202	.fe6c						pcr: .block

204	=0						cb2InputNegativeActiveEdge=0<<5
205	=32						cb2IndependentInterruptInputNegativeEdge=1<<5
206	=64						cb2InputPositiveEdge=2<<5
207	=96						cb2IndependentInterruptInputPositiveEdge=3<<5
208	=128						cb2HandshakeOutput=4<<5
209	=160						cb2PulseOutput=5<<5
210	=192						cb2LowOutput=6<<5
211	=224						cb2HighOutput=7<<5

213	=0						cb1NegativeActiveEdge=0<<4
214	=16						cb1PositiveActiveEdge=1<<4

216	=0						ca2InputNegativeActiveEdge=0<<1
217	=2						ca2IndependentInterruptInputNegativeEdge=1<<1
218	=4						ca2InputPositiveEdge=2<<1
219	=6						ca2IndependentInterruptInputPositiveEdge=3<<1
220	=8						ca2HandshakeOutput=4<<1
221	=10						ca2PulseOutput=5<<1
222	=12						ca2LowOutput=6<<1
223	=14						ca2HighOutput=7<<1

225	=0						ca1NegativeActiveEdge=0<<0
226	=1						ca1PositiveActiveEdge=1<<0

228	>fe6c						                .fill 1         ;12
229							                .endblock
230	.fe6d						ifr:
231	>fe6d						                .fill 1         ;13
232	.fe6e						ier:
233	>fe6e						                .fill 1         ;14
234	.fe6f						oraNoHandshake:
235	.fe6f						iraNoHandshake:
236	>fe6f						                .fill 1         ;15

238	.fe70						irq: .block
239	=1						ca2=1
240	=2						ca1=2
241	=4						sr=4
242	=8						cb2=8
243	=16						cb1=16
244	=32						t2=32
245	=64						t1=64
246							                .endblock
247							                .ends
255							                .endv

257							                .virtual $fee0
258	.fee0						tube: .block
259							; Parasite to Host: Carries the OSWRCH call. Data register is a FIFO
260							; that can handle a VDU command length (10 bytes).
261							;
262							; Host to Parasite: There is a 1 byte buffer. It is used to generate
263							; IRQ's in the parasite from events in the host.

265							; write/read (clears IRQ)
266	.fee0						status1: .block
267							; [Tube p13]
268	=$01						Q=$01                           ;enable HIRQ from R4
269	=$02						I=$02                           ;enable PIRQ from R1
270	=$04						J=$04                           ;enable PIRQ from R3
271	=$08						M=$08                           ;enable PNMI from R3
272	=$10						V=$10                           ;2-byte R3
273	=$20						P=$20                           ;activate PRST
274	=$40						T=$40                           ;clear all Tube registers
275	=$80						S=$80                           ;set/clear bits
276							                .bend
277	>fee0						                .fill 1

279							; bit 7 - data available/IRQ
280							; bit 6 - not full
281	.fee1						data1:
282	>fee1						                .fill 1

284							; Used to implement OS calls that take a long time or that cannot
285							; interrupt Host tasks. The parasite passes a byte describing the
286							; required task. The two processors then exchange data until the task
287							; is complete. OS calls handled through this register include: OSRDCH,
288							; OSCLI, OSBYTE, OSWORD, OSBPUT, OSBGET, OSFIND, OSARGS, OSFILE,
289							; OSGBPB.

291							; write/read
292	.fee2						status2:
293	>fee2						                .fill 1

295							; bit 7 - data available
296							; bit 6 - not full
297	.fee3						data2:
298	>fee3						                .fill 1

300							; Used for the background task of fast data transfer between the two
301							; processors.

303							; write/read
304	.fee4						status3:
305	>fee4						                .fill 1

307							; bit 7 - data available/NMI
308							; bit 6 - not full
309	.fee5						data3:
310	>fee5						                .fill 1

312							; Used as the control channel for block transfers going through
313							; Register 3, and also the transfer register for error strings from
314							; host to parasite. In both cases, the host interrupts the parasite by
315							; placing a byte into the Register. In the former case it is a byte
316							; describing the required action, in the latter it is an error code.

318							; write (sets IRQ)/read (clears IRQ)
319	.fee6						status4:
320	>fee6						                .fill 1

322							; bit 7 - data available/IRQ
323							; bit 6 - not full/IRQ
324	.fee7						data4:
325	>fee7						                .fill 1
326							                .bend
327							                .endv

329							RTC: .struct
330	>0000						seconds: .fill 1
331	>0001						secondsAlarm: .fill 1
332	>0002						minutes: .fill 1
333	>0003						minutesAlarm: .fill 1
334	>0004						hours: .fill 1
335	>0005						hoursAlarm: .fill 1
336	>0006						dayOfWeek: .fill 1
337	>0007						dayOfMonth: .fill 1
338	>0008						month: .fill 1
339	>0009						year: .fill 1
340	.000a						a: .block
341	=7						dvMask=7
342	=4						dvShift=4
343	=0						dv4194304Hz=0<<dvShift
344	=16						dv1048576Hz=1<<dvShift
345	=32						dv32768Hz=2<<dvShift
346	>000a						                .fill 1
347							                .endblock
348	.000b						b: .block
349	=$80						set=$80
350	=$02						_24h=$02
351	=$01						dse=$01
352	>000b						                .fill 1
353							                .endblock
354	.000c						c: .block
355	=$10						uf=$10
356	>000c						                .fill 1
357							                .endblock
358	.000d						d: .block
359	>000d						                .fill 1
360							                .endblock
361	=50						ram_size=50
362	>000e						ram: .fill ram_size
363							                .endstruct

:1	;******  Return to file: mosCFA3000.s65

2							                .include "src/mos_workspace.s65"

:3	;******  Processing file: src/mos_workspace.s65


2							;-------------------------------------------------------------------------
3							;
4							; Disorganized jumble of constants. They'll get tidied up at some
5							; point... promise...
6							;
7							;-------------------------------------------------------------------------

9							; These variant flags are applicable to the stated versions only, and
10							; may or may not be separable from the various .if/.endif constructs
11							; for that version. If they're set for any other version, the output
12							; may not make sense.

14							                .weak
15							                ; Set if building Olivetti MOS, a variant of 5.10.
16	=false						olivetti=false

18							                ; Set if building CFA3000 MOS, a variant of 3.50.
19	=false						CFA3000=false

21							                ; Set if building Autocue 1500 MOS, a variant of 5.11.
22	=false						autocue=false

24							                ; Set if building MOS 3.29 (Acorn FinMOS), a variant
25							                ; of 3.50.
26	=false						finmos329=false

28							                ; Set if building the Y2K-fixed version found in the
29							                ; RetroClinic multi-OS adapter, a variant of 3.20.
30	=false						multios=false
31							                .endweak

33							;-------------------------------------------------------------------------


36	=$400						tubeHostAddr=$400

38							                .if version==350
39							                ; MOS 3.50 parasite language relocation workspace?
40	=$04f5						L04F5=$04f5
41	=$04f6						L04F6=$04f6
42	=$04f7						L04F7=$04f7
43	=$04f8						L04F8=$04f8
44	=$04f9						L04F9=$04f9
45							                .endif

47							;-------------------------------------------------------------------------

49	=$a8						osargsBuffer=$a8                ;4-byte ZP buffer for use with OSARGS
50	=$b8						printMessageAddress=$b8

52							                .virtual $bb
53	.00bb						tapeCurrentOptionsByte: .block
54							                .endblock
55							                .endvirtual

57							                .virtual $f2
58	.00f2						fsStatusByte: .block
59	=$01						inputFileOpen=$01
60	=$02						outputFileOpen=$02
61	=$08						catStatus=$08
62	=$40						eofReached=$40
63	=$80						eofWarningGiven=$80
64							                .endblock
65							                .endvirtual

67							                .virtual $e4
68	.00e4						stringInputOptions: .block
69	=$80						doubleQuotes=$80
70	=$40						spaceNotATerminator=$40
71	=$01						goodString=$01
72							                .endblock
73							                .endvirtual
74	=$e5						stringInputPlingFlag=$e5        ;bit 7 set if last char was '!'
75	=$e6						readCharacterTimedFlag=$e6
76	=$e7						autoRepeatCountdownTimer=$e7
77	=$eb						tapeCritical=$eb
78	=$ec						lastKeyPressedInternal=$ec
79	=$ed						firstKeyPressedInternal=$ed
80	=$f2						stringInputBufferAddress=$f2    ;word

82							;-------------------------------------------------------------------------

84	=$01						romServiceCallAbsoluteWorkspaceClaim=$01 ; memory used only when ROM is paged in
85	=$02						romServiceCallPrivateWorkspaceClaim=$02 ; memory used even when ROM is not paged in
86	=$03						romServiceCallAutoBoot=$03              ;
87	=$04						romServiceCallUnrecognisedCommand=$04   ; star command not recognised
88	=$05						romServiceCallUnrecognisedInterrupt=$05 ;
89	=$06						romServiceCallBreakInstruction=$06      ;
90	=$07						romServiceCallUnrecognisedOSBYTE=$07    ;
91	=$08						romServiceCallUnrecognisedOSWORD=$08    ;
92	=$09						romServiceCallHelp=$09                  ;
93	=$0a						romServiceCallClaimStaticWorkspace=$0A ; (Issued by paged ROMs, not the OS)
94	=$0b						romServiceCallNMIRelease=$0B    ; (Issued by paged ROMs, not the OS)
95	=$0c						romServiceCallNMIClaim=$0C      ; (Issued by paged ROMs, not the OS)
96	=$0d						romServiceCallROMFilingSystemInitialize=$0D    ;
97	=$0e						romServiceCallROMFilingSystemByteGet=$0E    ;
98	=$0f						romServiceCallVectorsClaimed=$0F    ; Used when a filing system starts
99	=$10						romServiceCallSpoolExecClosureWarning=$10    ;
100							;romServiceCallFontImplosionExplosionWarning=$11    ;
101	=$12						romServiceCallInitialiseFilingSystem=$12    ; (Issued from paged ROMs, not the OS)
102	=$15						romServiceCallPollingInterrupt=$15
103	=$18						romServiceCallReserved=$18
104	=$21						romServiceCallAbsoluteHAZELWorkspaceClaim=$21
105	=$22						romServiceCallPrivateHAZELWorkspaceClam=$22
106	=$23						romServiceCallTopOfHAZELWorkspace=$23
107	=$24						romServiceCallCountDynamicHAZELWorkspace=$24
108	=$25						romServiceCallRequestFSInfo=$25
109	=$26						romServiceCallCloseAllOpenFiles=$26
110	=$27						romServiceCallInformReset=$27
111	=$28						romServiceCallUnknownCONFIG=$28
112	=$29						romServiceCallUnknownSTATUS=$29
113	=$2a						romServiceCallLanguageChange=$2a
114	=$30						romServiceCall30=$30
115	=$fe						romServiceCallTubeSystemPostInitialisation=$FE    ;
116	=$ff						romServiceCallTubeMainInitialisation=$FF    ;

118							;-------------------------------------------------------------------------

120							; [MasRef D.2-24]

122	=0						eventOutputBufferEmpty=0
123	=1						eventInputBufferFull=1
124	=2						eventCharacterEnteringBuffer=2
125	=3						eventADCConversionComplete=3
126	=4						eventStartOfVerticalSync=4
127	=5						eventIntervalTimerCrossingZero=5
128	=6						eventESCAPEPressed=6
129	=7						eventRS423Error=7
130	=8						eventNetworkError=8
131	=9						eventUser=9
132	=9						eventMax=9

134							;-------------------------------------------------------------------------

136							; [MasRef D.2-27]

138							; Input buffers
139	=0						bufferKeyboard=0
140	=1						bufferRS423Input=1

142							; Output buffers
143	=2						bufferFirstOutput=2
144	=2						bufferRS423Output=2
145	=3						bufferPrinter=3
146	=4						bufferSoundChannel0=4
147	=5						bufferSoundChannel1=5
148	=6						bufferSoundChannel2=6
149	=7						bufferSoundChannel3=7
150							; What's buffer 8? Previously speech on OS 1.20. There's indices
151							; allocated for it...
152	=8						bufferMax=8


155	=$03e0						bufferKeyboardAddress=$03e0
156	=32						bufferKeyboardSize=32
157	=$0a00						bufferRS423InputAddress=$0a00
158	=256						bufferRS423InputSize=256
159	=$0900						bufferRS423OutputAddress=$0900
160	=192						bufferRS423OutputSize=192
161	=$0880						bufferPrinterAddress=$0880
162	=64						bufferPrinterSize=64
163	=$0840						bufferSoundChannel0Address=$0840
164	=16						bufferSoundChannel0Size=16
165	=$0850						bufferSoundChannel1Address=$0850
166	=16						bufferSoundChannel1Size=16
167	=$0860						bufferSoundChannel2Address=$0860
168	=16						bufferSoundChannel2Size=16
169	=$0870						bufferSoundChannel3Address=$0870
170	=16						bufferSoundChannel3Size=16
171	=$09c0						buffer8Address=$09c0
172	=64						buffer8Size=64



176							; BufferInfo: .function bufferAddress,bufferSizeByte
177							;                 .endfunction (bufferAddress,256-bufferSizeByte)

179							; ; buffer info is (base address,size)
180							;  _:=[]
181							; _..=[BufferInfo($0300,32)];bufferKeyboard=0
182							; _..=[BufferInfo($0a00,256)];bufferRS423Input=1
183							; _..=[BufferInfo($08c0,192)];bufferRS423Output=2
184							; _..=[BufferInfo($07c0,64)];bufferPrinter=3
185							; _..=[BufferInfo($0750,16)];bufferSoundChannel0=4
186							; _..=[BufferInfo($0760,16)];bufferSoundChannel1=5
187							; _..=[BufferInfo($0770,16)];bufferSoundChannel2=6
188							; _..=[BufferInfo($0780,16)];bufferSoundChannel3=7
189							; _..=[BufferInfo($0900,64)];What's buffer 8?

191							;-------------------------------------------------------------------------

193							; [MasRef C.5-5]

195	=0						printerDriverTypeSink=0
196	=1						printerDriverTypeParallel=1
197	=2						printerDriverTypeSerial=2
198	=3						printerDriverTypeUser=3
199	=4						printerDriverTypeNetwork=4

201							; AUG p259

203	=0						printerDriverPoll=0
204	=1						printerDriverActivate=1
205	=2						printerDriverVDU2=2
206	=3						printerDriverVDU3=3
207	=5						printerDriverFX5=5

209	=10						printerDriverFX3=10             ;undocumented???

211							;-------------------------------------------------------------------------

213							; AUG p261

215	=0						netPrinterRequest0=0
216	=1						netPrinterRequest1=1
217	=2						netPrinterRequest2=2
218	=3						netPrinterRequest3=3
219	=4						netWriteCharacterAttempted=4
220	=5						netPrinterRequest5=5
221	=6						netReadCharacterAttempted=6
222	=7						netOSBYTEAttempted=7
223	=8						netOSWORDAttempted=8
224	=13						netOSWORD0Complete=13

226							;-------------------------------------------------------------------------

228	=0						fscOPT=0
229	=1						fscCheckEOF=1
230	=2						fscStarSlash=2
231	=3						fscUnknownCommand=3
232	=4						fscStarRUN=4
233	=5						fscStarCAT=5
234	=6						fscNewFS=6
235	=7						fscFileHandleRange=7
236	=8						fscStarCommand=8
237	=9						fscStarEX=9
238	=10						fscStarINFO=10
239	=11						fscRUNLibrary=11

241							; NAUG mentions this. But it doesn't appear to
242							; actually exist in the code.
243							;
244							; Maybe it's present in MOS 3.50 or later?
245	=12						fscRENAME=12

247	=1						gbpbPutBytesNewPTR=1            ;[AUG p340]
248	=2						gbppPutBytesCurrentPTR=2        ;[AUG p340]
249	=3						gbpbGetBytesNewPTR=3            ;[AUG p341]
250	=4						gbpbGetBytesCurrentPTR=4        ;[AUG p341]
251	=5						gbpbGetMediaMetadata=5          ;[AUG p341]
252	=6						gbpbGetCurrentDevice=6          ;[AUG p341]
253	=7						gbpbGetLibraryDevice=7          ;[AUG p341]
254	=8						gbpbReadFileNames=8             ;[AUG p341]

256							OSGBPBParameterBlock: .struct
257	.0000						handle:
258	>0000						                .fill 1
259	.0001						address:
260	>0001						                .fill 4
261	.0005						count:
262	>0005						                .fill 4
263	.0009						ptr:
264	>0009						                .fill 4
265							                .endstruct

267	=0						argsGetFS=0                     ;[AUG p337]
268	=1						argsGetCommandLine=1            ;[AUG p338]
269	=2						argsCheckANFS=2                 ;https://beebwiki.mdfs.net/OSARGS
270	=3						argsGetLibFS=3                  ;
271	=$ff						argsFlushBuffers=$ff            ;[AUG p338]

273	=0						argsFileGetPTR=0
274	=1						argsFileSetPTR=1
275	=2						argsFileGetEXT=2
276	=$ff						argsFileFlush=$ff

278	=0						fileSave=0                      ;[AUG p336]
279	=1						fileWriteMetadata=1             ;[AUG p336]
280	=2						fileWriteLoadAddress=2          ;[AUG p336]
281	=3						fileWriteExecAddress=3          ;[AUG p336]
282	=4						fileWritettributes=4            ;[AUG p336]
283	=5						fileReadMetadata=5              ;[AUG p336]
284	=6						fileDelete=6                    ;[AUG p336]
285	=$ff						fileLoad=$ff                    ;[AUG p336]

287							OSFILEParameterBlock: .struct
288	.0000						fileName:
289	>0000						                .fill 2
290	.0002						addresses:
291	.0002						load:
292	>0002						                .fill 4
293	.0006						exec:
294	>0006						                .fill 4
295	.000a						length:
296	.000a						saveStart:
297	>000a						                .fill 4
298	.000e						attributes:
299	.000e						saveEnd:
300	>000e						                .fill 4
301							                .endstruct

303							;-------------------------------------------------------------------------

305	=0						bufferNumberKeyboard=0          ;
306	=1						bufferNumberRS423Input=1        ;
307	=2						bufferNumberRS423Output=2       ;
308	=3						bufferNumberPrinter=3           ;
309	=4						bufferNumberSound0=4            ; Noise channel
310	=5						bufferNumberSound1=5            ;
311	=6						bufferNumberSound2=6            ;
312	=7						bufferNumberSound3=7            ;
313							; bufferNumberSpeech=8            ;
314	=8						bufferNumberHighest=8           ;

316							;-------------------------------------------------------------------------

318							; uservIndex=0
319							; brkvIndex=1
320							; irq1vIndex=2
321							; irq2vIndex=3
322							; clivIndex=4
323							; bytevIndex=5
324							; wordvIndex=6
325							; wrchvIndex=7
326							; rdchvIndex=8
327							; filevIndex=9
328							; argsvIndex=10
329							; bgetvIndex=11
330							; bputvIndex=12
331							; gbpbvIndex=13
332							; findvIndex=14
333							; fscvIndex=15
334							; eventvIndex=16
335							; uptvIndex=17
336							; netvIndex=18
337							; vduvIndex=19
338							; keyvIndex=20
339							; insvIndex=21
340							; remvIndex=22
341							; cnpvIndex=23
342							; ind1vIndex=24
343							; ind2vIndex=25
344							; ind3vIndex=26


347							                .virtual $200
348	.0200						vectors:
349	.0200						USERV:
350	>0200						                .fill 2
351	.0202						BRKV:
352	>0202						                .fill 2
353	.0204						IRQ1V:
354	>0204						                .fill 2
355	.0206						IRQ2V:
356	>0206						                .fill 2
357	.0208						CLIV:
358	>0208						                .fill 2
359	.020a						BYTEV:
360	>020a						                .fill 2
361	.020c						WORDV:
362	>020c						                .fill 2
363	.020e						WRCHV:
364	>020e						                .fill 2
365	.0210						RDCHV:
366	>0210						                .fill 2
367	.0212						FILEV:
368	>0212						                .fill 2
369	.0214						ARGSV:
370	>0214						                .fill 2
371	.0216						BGETV:
372	>0216						                .fill 2
373	.0218						BPUTV:
374	>0218						                .fill 2
375	.021a						GBPBV:
376	>021a						                .fill 2
377	.021c						FINDV:
378	>021c						                .fill 2
379	.021e						FSCV:
380	>021e						                .fill 2
381	.0220						EVENTV:
382	>0220						                .fill 2
383	.0222						UPTV:
384	>0222						                .fill 2
385	.0224						NETV:
386	>0224						                .fill 2
387	.0226						VDUV:
388	>0226						                .fill 2
389	.0228						KEYV:
390	>0228						                .fill 2
391	.022a						INSV:
392	>022a						                .fill 2
393	.022c						REMV:
394	>022c						                .fill 2
395	.022e						CNPV:
396	>022e						                .fill 2
397	.0230						IND1V:
398	>0230						                .fill 2
399	.0232						IND2V:
400	>0232						                .fill 2
401	.0234						IND3V:
402	>0234						                .fill 2
403	.0236						mosVariables:

405							; OSBYTE 166 (&A6) Read start address of MOS variables [MasRef D.2-50]
406							; OSBYTE 167 (&A7) Read start address of MOS variablespointer table  [MasRef D.2-50]
407	>0236						mosVariablesAddress: .fill 2

409							; OSBYTE 168 (&A8) Read address of ROM pointer table [MasRef D.2-51]
410							; OSBYTE 169 (&A9) Read address of ROM pointer table [MasRef D.2-51]
411	>0238						extendedVectorSpaceAddress: .fill 2

413							; OSBYTE 170 (&AA) Read address of ROM information table [MasRef D.2-51]
414							; OSBYTE 171 (&AB) Read address of ROM information table [MasRef D.2-51]
415	>023a						romInformationTableAddress: .fill 2

417							; OSBYTE 172 (&AC) Read address of keyboard translation table [MasRef D.2-52]
418							; OSBYTE 173 (&AD) Read address of keyboard translation table [MasRef D.2-52]
419	>023c						keyboardTranslationTableAddress: .fill 2

421							; OSBYTE 174 (&AE) Read address of VDU variables origin [MasRef D.2-52]
422							; OSBYTE 175 (&AF) Read address of VDU variables origin [MasRef D.2-52]
423	>023e						vduVariablesAddress: .fill 2

425							; OSBYTE 176 (&B0) Read/Write CFS timeout counter [MasRef D.2-52]
426	>0240						cfsTimeoutCounter: .fill 1

428							; OSBYTE 177 (&B1) Read/write input source [MasRef D.2-53]
429	>0241						inputSource: .fill 1

431							; OSBYTE 178 (&B2) Read/write keyboard semaphore [MasRef D.2-53]
432	>0242						keyboardSemaphore: .fill 1

434							; OSBYTE 179 (&B3) Read/write ROM polling semaphore [MasRef D.2-54]
435	>0243						romPollingSemaphore: .fill 1

437							; OSBYTE 180 (&B4) Read/write Operating System High [MasRef D.2-54]
438	>0244						oshwm: .fill 1

440							; OSBYTE 181 (&B5) Read/write RS243 input interpretation [MasRef D.2-54]
441	>0245						rs423InputInterpretationStatus: .fill 1

443							; OSBYTE 182 (&B6) Read NOIGNORE state [MasRef D.2-55]
444							;
445							; TODO - not a great name, no matter how official - should probably be usePrinterIgnoreChar or something
446	>0246						noignoreState: .fill 1

448							; OSBYTE 183 (&B7) Read/write cassette/ROM filing system [MasRef D.2-55]
449	>0247						cfsRFSFSSwitch: .fill 1

451							; OSBYTE 184 (&B8) Read OS copy of video ULA control [MasRef D.2-56]
452	>0248						vcontrolRegister: .fill 1

454							; OSBYTE 185 (&B9) Read OS copy of video ULA palette [MasRef D.2-56]
455	>0249						vpaletteRegister: .fill 1

457							; OSBYTE 186 (&BA) Read ROM number active at last BRK [MasRef D.2-56]
458	>024a						romActiveAtLastBRK: .fill 1

460							; OSBYTE 187 (&BB) Read ROM number of socket [MasRef D.2-57]
461	>024b						basicROMNumber: .fill 1

463							; OSBYTE 188 (&BC) Read current ADC channel number [MasRef D.2-57]
464	>024c						currentADCChannel: .fill 1

466							; OSBYTE 189 (&BD) Read maximum ADC channel number [MasRef D.2-57]
467	>024d						maximumADCChannel: .fill 1

469							; OSBYTE 190 (&BE) Read/write ADC conversion type [MasRef D.2-58]
470	>024e						adcConversionType: .fill 1

472							; OSBYTE 191 (&BF) Read/write RS423 busy flag [MasRef D.2-58]
473	>024f						rs423Busy: .fill 1

475							; OSBYTE 192 (&C0) Read serial ACIA control register [MasRef D.2-58]
476	>0250						aciaControlRegister: .fill 1

478							; OSBYTE 193 (&C1) Read/write flash counter [MasRef D.2-59]
479	>0251						flashCounter: .fill 1

481							; OSBYTE 194 (&C2) Read/write duration of first colour [MasRef D.2-59]
482	>0252						firstFlashColourDuration: .fill 1

484							; OSBYTE 195 (&C3) Read/write duration of second colour [MasRef D.2-60]
485	>0253						secondFlashColourDuration: .fill 1

487							; OSBYTE 196 (&C4) Read/write keyboard auto-repeat delay [MasRef D.2-60]
488	>0254						keyboardAutoRepeatDelay: .fill 1

490							; OSBYTE 197 (&C5) Read/write keyboard auto-repeat rate [MasRef D.2-60]
491	>0255						keyboardAutoRepeatRate: .fill 1

493							; OSBYTE 198 (&C6) Read/write *EXEC file handle [MasRef D.2-61]
494	>0256						execFileHandle: .fill 1

496							; OSBYTE 199 (&C7) Read/write *SPOOL file handle [MasRef D.2-62]
497	>0257						spoolFileHandle: .fill 1

499							; OSBYTE 200 (&C8) Read/write BREAK and ESCAPE effect [MasRef D.2-62]
500	>0258						breakAndESCAPEEffect: .fill 1

502							; OSBYTE 201 (&C9) Read/write keyboard status [MasRef D.2-63]
503	>0259						keyboardStatus: .fill 1

505							; OSBYTE 202 (&CA) Read/write keyboard status byte [MasRef D.2-63]
506	.025a						keyboardStatusByte: .block
507	=$8						shiftPressed=%1<<3
508	=%10000						capsLockDisengaged=%1<<4
509	=%100000					shiftLockDisengaged=%1<<5
510	=%1000000					ctrlPressed=%1<<6
511	=$80						shiftEnabled=%1<<7
512	>025a						                .fill 1
513							                .endblock

515							; OSBYTE 203 (&CB) Read/write RS423 input buffer [MasRef D.2-64]
516	>025b						rs423InputBufferMinimumSpace: .fill 1

518							; OSBYTE 204 (&CC) Read/write RS423 ignore flag [MasRef D.2-65]
519	>025c						rs423Ignore: .fill 1

521							; OSBYTE 205 (&CD) Read/write RS423 destination [MasRef D.2-65]
522	>025d						rs423Destination: .fill 1

524							; OSBYTE 206 (&CE) Read/write Econet OS call interception [MasRef D.2-66]
525	>025e						econetInterceptionStatus: .fill 1

527							; OSBYTE 207 (&CF) Read/write Econet input interpretation [MasRef D.2-66]
528	>025f						econetInputInterpretationStatus: .fill 1

530							; OSBYTE 208 (&D0) Read write Econet output [MasRef D.2-67]
531	>0260						econetOutputInterpretationStatus: .fill 1

533							; OSBYTE 209 (&D1) is reserved for the speech system [MasRef D.2-67]
534	>0261						speechSystemByte1:  .fill 1

536							; OSBYTE 210 (&D2) Read/write sound suppression status [MasRef D.2-67]
537	>0262						soundSuppressionStatus: .fill 1

539							; OSBYTE 211 (&D3) Read/write BELL channel [MasRef D.2-67]
540	>0263						bellChannel: .fill 1

542							; OSBYTE 212 (&D4) Read/write BELL sound information [MasRef D.2-68]
543	>0264						bellSound: .fill 1

545							; OSBYTE 213 (&D5) Read/write BELL frequency [MasRef D.2-69]
546	>0265						bellFrequency: .fill 1

548							; OSBYTE 214 (&D6) Read/write BELL duration [MasRef D.2-69]
549	>0266						bellDuration: .fill 1

551							; OSBYTE 215 (&D7) Read/write startup message [MasRef D.2-69]
552	>0267						startupMessageSuppressionStatus: .fill 1

554							; OSBYTE 216 (&D8) Read/write length of soft key string [MasRef D.2-70]
555	>0268						softKeyStringLength: .fill 1

557							; OSBYTE 217 (&D9) Read/write paged mode line count [MasRef D.2-71]
558	>0269						pagedModeCounter: .fill 1

560							; OSBYTE 218 (&DA) Read/write bytes in VDU queue [MasRef D.2-71]
561	>026a						vduQueueNegativeLength: .fill 1

563							; OSBYTE 219 (&DB) Read/write TAB key code [MasRef D.2-72]
564	>026b						tabKeyCode: .fill 1

566							; OSBYTE 220 (&DC) Read/write ESCAPE character [MasRef D.2-72]
567	>026c						escapeCharacter: .fill 1

569							; OSBYTE 221 (&DD) Read/write interpretation of input values 192-207 [MasRef D.2-73]
570	>026d						input192To207Interpretation: .fill 1

572							; OSBYTE 222 (&DE) Read/write interpretation of input values 208-223 [MasRef D.2-73]
573	>026e						input208To223Interpretation: .fill 1

575							; OSBYTE 223 (&DF) Read/write interpretation of input values 224-239 [MasRef D.2-73]
576	>026f						input224To239Interpretation: .fill 1

578							; OSBYTE 224 (&E0) Read/write interpretation of input values 240-255 [MasRef D.2-73]
579	>0270						input240To255Interpretation: .fill 1

581							; OSBYTE 225 (&E1) Read/write soft key interpretation [MasRef D.2-74]
582	>0271						softKeyInterpretation: .fill 1

584							; OSBYTE 226 (&E2) Read/write SHIFT+soft key interpretation [MasRef D.2-74]
585	>0272						shiftSoftKeyInterpretation: .fill 1

587							; OSBYTE 227 (&E3) Read/write CTRL+soft key interpretation [MasRef D.2-74]
588	>0273						ctrlSoftKeyInterpretation: .fill 1

590							; OSBYTE 228 (&E4) Read/write SHIFT+CTRL+soft key interpretation [MasRef D.2-74]
591	>0274						shiftCtrlSoftKeyInterpretation: .fill 1

593							; OSBYTE 229 (&E5) Read/write ESCAPE key status [MasRef D.2-75]
594	>0275						escapeKeyStatus: .fill 1

596							; OSBYTE 230 (&E6) Read/write ESCAPE effects [MasRef D.2-75]
597	>0276						escapeEffects: .fill 1

599							; OSBYTE 231 (&E7) Read/write IRQ bit mask for user 6522 [MasRef D.2-76]
600	>0277						userVIAInterruptMask: .fill 1

602							; OSBYTE 232 (&E8) Read/write IRQ bit mask for 6850 [MasRef D.2-76]
603	>0278						rs423InterruptMask: .fill 1

605							; OSBYTE 233 (&E9) Read write IRQ bit mask for system [MasRef D.2-76]
606	>0279						systemVIAInterruptMask: .fill 1

608							; OSBYTE 234 (&EA) Read flag indicating Tube presence [MasRef D.2-76]
609	>027a						tubePresence: .fill 1

611							; OSBYTE 235 (&EB) is reserved for the speech system. [MasRef D.2-77]
612	>027b						speechSystemByte2: .fill 1

614							; OSBYTE 236 (&EC) Read/write character destination status [MasRef D.2-77]
615	.027c						characterDestinationStatus: .block
616	>027c						                .fill 1
617	=1						rs423_enable=1
618	=2						vdu_disable=2
619	=4						printer_disable=4               ;printer always off
620	=8						printer_enable=8                ;printer always on
621	=16						spool_disable=16
622	=64						printer_maybe=64                ;printer on when VDU 1 only
623							                .endblock

625							; OSBYTE 237 (&ED) Read/write cursor editing status [MasRef D.2-77]
626	.027d						editKeysMode: .block
627	=0						editKeys=0                      ;edit keys do editing
628	=1						asciiKeys=1                     ;edit keys are ASCII 135-139
629	=2						functionKeys=2                  ;edit keys are F keys 11-15
630	>027d						                .fill 1
631							                .endblock

633							; OSBYTE 238 (&EE) Read/write numeric keypad [MasRef D.2-78]
634	>027e						numericKeypadInterpretation: .fill 1

636							; OSBYTE 239 (&EF) Read/write *SHADOW state [MasRef D.2-78]
637	>027f						shadowRAMState: .fill 1

639							; OSBYTE 240 (&F0) Read country flag [MasRef D.2-79]
640	>0280						countryFlag: .fill 1

642							; OSBYTE 241 (&F1) Read/write user flag [MasRef D.2-79]
643	>0281						userFlag: .fill 1

645							; OSBYTE 242 (&F2) Read copy of serial processor ULA [MasRef D.2-80]
646	>0282						serialULARegister: .fill 1

648							; OSBYTE 243 (&F3) Read timer switch state [MasRef D.2-80]
649							;
650							; The location holds either 5 (initialTimerSwitchState) or 10
651							; (initialTimerSwitchState^15) - i.e., the offset of the byte after
652							; the last of the timer.
653							;
654							; Various offsets are applied to the timer addresses to make this
655							; work.
656	>0283						timerSwitchState: .fill 1

658							; OSBYTE 244 (&F4) Read/write soft key consistency flag [MasRef D.2-81]
659	>0284						softKeyConsistencyFlag: .fill 1

661							; OSBYTE 245 (&F5) Read printer driver type [MasRef D.2-81[
662	>0285						printerDriverType: .fill 1

664							; OSBYTE 246 (&F6) Read/write printer ignore character [MasRef D.2-81]
665	>0286						printerIgnoreChar: .fill 1

667							; OSBYTE 247 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
668	>0287						breakVectorByte0: .fill 1

670							; OSBYTE 248 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
671	>0288						breakVectorByte1: .fill 1

673							; OSBYTE 249 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
674	>0289						breakVectorByte2: .fill 1

676							; OSBYTE 250 (&FA) Read memory written by VDU driver [MasRef D.2-82]
677	>028a						vduDriverMemory: .fill 1

679							; OSBYTE 251 (&FB) Read memory displayed [MasRef D.2-83]
680	>028b						displayMemory: .fill 1

682							; OSBYTE 252 (&FC) Read/write current language ROM number [MasRef D.2-83]
683	>028c						currentLanguageROM: .fill 1

685							; OSBYTE 253 (&FD) Read last BREAK type [MasRef D.2-83]
686	.028d						lastBREAKType: .block
687	>028d						                .fill 1
688	=0						softBREAK=0
689	=1						powerOn=1
690	=2						hardBREAK=2
691							                .endblock
692							; OSBYTE 254 (&FE) Set effect of SHIFT on numeric keypad [MasRef D.2-84]
693	>028e						numericKeypadShiftEffect: .fill 1
694							; OSBYTE 255 (&FF) Read/write startup options [MasRef D.2-84]
695	>028f						startupOptions: .fill 1
696	=7						modeMask=7

698							                .endvirtual

700	=166						firstMOSVariableOSBYTE=166

702	=5						initialTimerSwitchState=5
703	=$290						tvOffset=$290
704	=$291						tvInterlace=$291
705	=$292						timer0=$292
706	=$297						timer1=$297
707	=$29c						intervalTimer=$29c
708	=$2a1						romInformationTable=$2a1
709	=$2b1						inkeyTimeoutCounter=$2b1
710	=$2b3						osword0MaxLineLength=$2b3
711	=$2b4						osword0MinASCIICharacter=$2b4
712	=$2b5						osword0MaxASCIICharacter=$2b5
713	=$2b6						adcResultLSBs=$2b6
714	=$2ba						adcResultMSBs=$2ba
715	=$2be						adcLastChannelRead=$2be         ;Two names for the same thing!
716	=$2be						adcLastConvertedChannel=$2be    ;Two names for the same thing!
717	=$2bf						eventEnabledFlags=$2bf
718	=$02c9						currentSoftKey=$02c9
719	=$02ca						keyboardFirstAutoRepeatCount=$02ca
720	=$2cb						previousKeyPressedWhenReadingLastKey=$2cb
721	=$2cc						previousKeyPressedWhenReadingFirstKey=$2cc
722	=$2cd						previousKeyPressedWhenReadingOSBYTE=$2cd
723							; soundIsUpdatingFlag=$2ce
724	=$2ce						bufferEmptyFlags=$2ce
725	=$2d7						bufferStartIndices=$2d7
726	=$2e0						bufferEndIndices=$2e0

728	=$2e9						tapeInputCurrentBlockSize=$2e9
729	=$2eb						blockFlagOfCurrentlyResidentBlock=$2eb
730	=$2ec						lastCharacterOfCurrentlyResidentBlock=$2ec

732							; Probably needs a better name :(
733							;
734							; Used by various file routines to store OSGBPB and OSFILE parameter
735							; blocks.
736							;
737							; Used by the clock routines to hold a (possibly partial) mirror of
738							; the RTC time/date registers.
739							;
740							; Used when parsing hex addresses from the command line - obviously
741							; designed primarily for convenient use when building up the OSFILE
742							; parameter block for use with *LOAD and *SAVE.
743	=$2ed						osfileParameterBlock=$2ed

745							; rtcTempData=$2ee

747							ExtendedVectorAddress: .function vectorAddress
749							                .endfunction extendedVectorSpace+(vectorAddress-vectors)/2*3

751							;-------------------------------------------------------------------------

753	=$d9f						extendedVectorSpace=$d9f

755	=$62						key_space=$62
756	=$66						key_comma=$66
757	=$17						key_minus=$17
758	=$67						key_stop=$67
759	=$68						key_slash=$68
760	=$27						key_0=$27
761	=$30						key_1=$30
762	=$31						key_2=$31
763	=$11						key_3=$11
764	=$12						key_4=$12
765	=$13						key_5=$13
766	=$34						key_6=$34
767	=$24						key_7=$24
768	=$15						key_8=$15
769	=$26						key_9=$26
770	=$48						key_colon=$48
771	=$57						key_semicolon=$57
772	=$47						key_at=$47
773	=$41						key_a=$41
774	=$64						key_b=$64
775	=$52						key_c=$52
776	=$32						key_d=$32
777	=$22						key_e=$22
778	=$43						key_f=$43
779	=$53						key_g=$53
780	=$54						key_h=$54
781	=$25						key_i=$25
782	=$45						key_j=$45
783	=$46						key_k=$46
784	=$56						key_l=$56
785	=$65						key_m=$65
786	=$55						key_n=$55
787	=$36						key_o=$36
788	=$37						key_p=$37
789	=$10						key_q=$10
790	=$33						key_r=$33
791	=$51						key_s=$51
792	=$23						key_t=$23
793	=$35						key_u=$35
794	=$63						key_v=$63
795	=$21						key_w=$21
796	=$42						key_x=$42
797	=$44						key_y=$44
798	=$61						key_z=$61
799	=$38						key_left_square_bracket=$38
800	=$78						key_backslash=$78
801	=$58						key_right_square_bracket=$58
802	=$18						key_caret=$18
803	=$28						key_underline=$28
804	=$70						key_escape=$70
805	=$60						key_tab=$60
806	=$40						key_caps_lock=$40
807	=$1						key_ctrl=$1
808	=$50						key_shift_lock=$50
809	=$0						key_shift=$0
810	=$59						key_delete=$59
811	=$69						key_copy=$69
812	=$49						key_return=$49
813	=$39						key_up=$39
814	=$29						key_down=$29
815	=$19						key_left=$19
816	=$79						key_right=$79
817	=$20						key_f0=$20
818	=$71						key_f1=$71
819	=$72						key_f2=$72
820	=$73						key_f3=$73
821	=$14						key_f4=$14
822	=$74						key_f5=$74
823	=$75						key_f6=$75
824	=$16						key_f7=$16
825	=$76						key_f8=$76
826	=$77						key_f9=$77
827	=$6a						key_numpad_0=$6a
828	=$6b						key_numpad_1=$6b
829	=$7c						key_numpad_2=$7c
830	=$6c						key_numpad_3=$6c
831	=$7a						key_numpad_4=$7a
832	=$7b						key_numpad_5=$7b
833	=$1a						key_numpad_6=$1a
834	=$1b						key_numpad_7=$1b
835	=$2a						key_numpad_8=$2a
836	=$2b						key_numpad_9=$2b
837	=$3a						key_numpad_plus=$3a
838	=$3b						key_numpad_minus=$3b
839	=$4a						key_numpad_divide=$4a
840	=$5a						key_numpad_hash=$5a
841	=$5b						key_numpad_multiply=$5b
842	=$5c						key_numpad_comma=$5c
843	=$3c						key_numpad_return=$3c
844	=$4b						key_numpad_delete=$4b
845	=$4c						key_numpad_stop=$4c

847							fsInfoBlock: .struct
848	>0000						name: .fill 8
849	>0008						minHandle: .fill 1
850	>0009						maxHandle: .fill 1
851	>000a						fsNumber: .fill 1
852							                .ends

854							osgbpbBlock: .struct
855	>0000						handle: .fill 1
856	>0001						addr: .fill 4
857	>0005						numBytes: .fill 4
858	>0009						ptr: .fill 4
859							                .ends

861							                ; NAUG p260
862							                .virtual $dc00
863	.dc00						hazel: .block
864	.dc00						commandLine:                    ;dc00
865	>dc00						                .fill 256
866	.dd00						ddxx:                           ;dd00
867	>dd00						                .fill 256
868	.de00						dexx:
869	>de00						                .fill 256
870	.df00						currentFS:                      ;df00
871	>df00						                .fill 1
872	.df01						activeFS:                       ;df01
873	>df01						                .fill 1
874	.df02						libFS:                          ;df02
875	>df02						                .fill 1
876	.df03						currentFSROM:                   ;df03
877	>df03						                .fill 1
878	.df04						commandLinePointer:             ;df04
879	>df04						                .fill 2

881							                ; 17 info blocks in total, but everything is relative
882							                ; to the 0th, so there's only a need to instantiate a
883							                ; struct for that one. Don't think 64tass handles
884							                ; arrays of structs anyway.
885	.df06						fsInfoBlocks:   .dstruct fsInfoBlock ;df06
848	>df06						name: .fill 8
849	>df0e						minHandle: .fill 1
850	>df0f						maxHandle: .fill 1
851	>df10						fsNumber: .fill 1
852							                .ends
886	>df11						                .fill 16*size(fsInfoBlock)
887	.dfc1						fsInfoBlocksTerminator:         ;dfc1
888							                ; space reserved for the 0 terminator when the full
889							                ; set of info blocks are filled.
890	>dfc1						                .fill 1
891	.dfc2						fsFlags: .block                 ;dfc2
892	>dfc2						                .fill 1
893	=$80						useASCII=$80
894	=$80						isAPPEND=$80
895	=$40						noLineNumbers=$40
896							                .bend
897	.dfc3						lineNumberBCD:                  ;dfc3
898	>dfc3						                .fill 2
899	.dfc5						lastCharPrinted:                ;dfc5
900	>dfc5						                .fill 1
901	.dfc6						tempFSFlag:                     ;dfc6
902	>dfc6						                .fill 1
903	.dfc7						moveOSGBPB: .dstruct osgbpbBlock ;dfc7
855	>dfc7						handle: .fill 1
856	>dfc8						addr: .fill 4
857	>dfcc						numBytes: .fill 4
858	>dfd0						ptr: .fill 4
859							                .ends
904	.dfd4						moveSrcHandle:                  ;dfd4
905	>dfd4						                .fill 1
906	.dfd5						moveDestHandle:                 ;dfd5
907	>dfd5						                .fill 1
908	.dfd6						moveBufferMSB:                  ;dfd6
909	>dfd6						                .fill 1
910	.dfd7						moveNumPages:                   ;dfd7
911	>dfd7						                .fill 1
912	.dfd8						moveDestName:                   ;dfd8
913	>dfd8						                .fill 2
914	.dfda						activeFSCV:                     ;dfda
915	>dfda						                .fill 2
916	.dfdc						oldACCCON:                      ;dfdc
917	>dfdc						                .fill 1
918	.dfdd						hasACCCONChanged:                ;dfdd
919	>dfdd						                .fill 1
920	.dfde						dfde:
921	>dfde						                .fill 1
922							                .bend
923							                .endv

925							;-------------------------------------------------------------------------
926							;
927							; VDU variables
928							;
929							; MasRef E.4-1
930							;
931							VDUVariables: .struct
932	.0000						graphicsWindow:
933							;graphicsWindowLeftBottom:
934							; &00 2 Graphics window left column. (p)
935	>0000						graphicsWindowPixelsLeft: .fill 2
936							; &02 2 Graphics window bottom row. (p)
937	>0002						graphicsWindowPixelsBottom: .fill 2
938							;graphicsWindowRightTop:
939							; &04 2 Graphics window right column. (p)
940	>0004						graphicsWindowPixelsRight: .fill 2
941							; &06 2 Graphics window top row. (p)
942	>0006						graphicsWindowPixelsTop: .fill 2
943	.0008						textWindow:
944							; &08 1 Text window left column.
945	>0008						textWindowLeft: .fill 1
946							; &09 1 Text window bottom row.
947	>0009						textWindowBottom: .fill 1
948							; &0A 1 Text window right column.
949	>000a						textWindowRight: .fill 1
950							; &0B 1 Text window top row.
951	>000b						textWindowTop: .fill 1
952							; &0C 2 Graphics origin X coordinate. (e)
953	>000c						graphicsWindowOriginX: .fill 2
954							; &0E 2 Graphics origin Y coordinate. (e)
955	>000e						graphicsWindowOriginY: .fill 2
956							; &10 2 Graphics cursor X coordinate. (e)
957	>0010						graphicsCursorPositionX: .fill 2
958							; &12 2 Graphics cursor Y coordinate. (e)
959	>0012						graphicsCursorPositionY: .fill 2
960							; &14 2 Previous graphics cursor X coordinate. (p)
961	.0014						oldGraphicsCursorPixels:
962	>0014						oldGraphicsCursorPixelsX: .fill 2
963							; &16 2 Previous graphics cursor Y coordinate. (p)
964	>0016						oldGraphicsCursorPixelsY: .fill 2
965							; &18 1 Text cursor X coordinate (from left of screen) when not cursor editing. When cursor editing, normally the input cursor X coordinate, but the output cursor X coordinate within an â<80><9C>unknown PLOT codesâ<80><9D> routine.
966	>0018						textCursorXPosition: .fill 1
967							; &19 1 Text cursor Y coordinate (from top of screen) when not cursor editing. When cursor editing, normally t.lsthe input cursor Y coordinate, but the output cursor Y coordinate within an â<80><9C>unknown PLOT codesâ<80><9D> routine.
968	>0019						textCursorYPosition: .fill 1
969							; &1A 1 Y produced by GADDR (see next section) so that (ZMEMG),Y addresses the correct byte.
970	>001a						graphicsAddressOffset: .fill 1
971							; &1Bâ<80><93>&23 VDU queue: &23 contains last byte of queue, other bytes immediately precede it.
972	=9						queueSize=9
973	>001b						queueBegin: .fill queueSize
974	.0024						queueEnd:
975	.0024						graphicsCursorPixels:
976							; &24 2 Graphics cursor X coordinate. (p)
977	>0024						graphicsCursorPixelsX: .fill 2
978							; &26 2 Graphics cursor Y coordinate. (p)
979	>0026						graphicsCursorPixelsY: .fill 2
980							; &28â<80><93>&49 Workspace. But variable &38 must not be used in a Teletext mode (mode 7 or 135).
981							                .union
982	.0028						hlfw: .dstruct HorizontalLineFillWorkspaceVDUVariables
1198	>0028						                .fill 6
1199	.002e						pixelsX:                        ;2e
1200	>002e						                .fill 2
1201	.0030						pixelsY:                        ;30
1202	>0030						                .fill 2
1203	.0032						pixelsRightEndX:
1204	>0032						                .fill 2         ;32
1205	.0034						pixelsLimitX:                   ;34
1206	>0034						                .fill 2
1207							                .endstruct
983	.0028						mocr: .dstruct MoveOrCopyRectangleWorkspaceVDUVariables
1189	.0028						src: .dstruct VDUAABB
1103	.0028						min: .dstruct VDUCoordinate
1098	>0028						x: .fill 2
1099	>002a						y: .fill 2
1100							                .endstruct
1104	.002c						max: .dstruct VDUCoordinate
1098	>002c						x: .fill 2
1099	>002e						y: .fill 2
1100							                .endstruct
1105							                .endstruct
1190	>0030						                .fill 4
1191	.0034						dest: .dstruct VDUAABB
1103	.0034						min: .dstruct VDUCoordinate
1098	>0034						x: .fill 2
1099	>0036						y: .fill 2
1100							                .endstruct
1104	.0038						max: .dstruct VDUCoordinate
1098	>0038						x: .fill 2
1099	>003a						y: .fill 2
1100							                .endstruct
1105							                .endstruct
1192	>003c						                .fill 9
1193	.0045						copy:
1194	>0045						                .fill 1         ;0=move, 2=copy
1195							                .endstruct
984	.0028						workspace: .dstruct GenericWorkspaceVDUVariables
1108	.0028						_28:
1109	>0028						                .fill 1
1110	.0029						_29:
1111	>0029						                .fill 1
1112	.002a						_2A:
1113	>002a						                .fill 1
1114	.002b						_2B:
1115	>002b						                .fill 1
1116	.002c						_2C:
1117	>002c						                .fill 1
1118	.002d						_2D:
1119	>002d						                .fill 1
1120	.002e						_2E:
1121	>002e						                .fill 1
1122	.002f						_2F:
1123	>002f						                .fill 1
1124	.0030						_30:
1125	>0030						                .fill 1
1126	.0031						_31:
1127	>0031						                .fill 1
1128	.0032						_32:
1129	>0032						                .fill 1
1130	.0033						_33:
1131	>0033						                .fill 1
1132	.0034						_34:
1133	>0034						                .fill 1
1134	.0035						_35:
1135	>0035						                .fill 1
1136	.0036						_36:
1137	>0036						                .fill 1
1138	.0037						_37:
1139	>0037						                .fill 1
1140	.0038						_38:
1141	>0038						                .fill 1
1142	.0039						_39:
1143	>0039						                .fill 1
1144	.003a						_3A:
1145	>003a						                .fill 1
1146	.003b						_3B:
1147	>003b						                .fill 1
1148	.003c						_3C:
1149	>003c						                .fill 1
1150	.003d						_3D:
1151	>003d						                .fill 1
1152	.003e						_3E:
1153	>003e						                .fill 1
1154	.003f						_3F:
1155	>003f						                .fill 1
1156	.0040						_40:
1157	>0040						                .fill 1
1158	.0041						_41:
1159	>0041						                .fill 1
1160	.0042						_42:
1161	>0042						                .fill 1
1162	.0043						_43:
1163	>0043						                .fill 1
1164	.0044						_44:
1165	>0044						                .fill 1
1166	.0045						_45:
1167	>0045						                .fill 1
1168	.0046						_46:
1169	>0046						                .fill 1
1170	.0047						_47:
1171	>0047						                .fill 1
1172	.0048						_48:
1173	>0048						                .fill 1
1174	.0049						_49:
1175	>0049						                .fill 1
1176							                .endstruct
985							                .endunion
986							; &4A 2 Address at which the 6845 is to display the text cursor.
987	>004a						textCursorCRTCAddress: .fill 2
988							; &4C 2 Number of bytes in a character row of the text window.
989	>004c						textWindowWidthInBytes: .fill 2
990							; &4E 1 Most significant byte of address of first byte of screen memory.
991	>004e						startScreenAddressHighByte: .fill 1
992							; &4F 1 Number of bytes in a character.
993	>004f						bytesPerCharacter: .fill 1
994							; &50 2 Address of byte in top left corner of screen display.
995	>0050						screenTopLeftAddress: .fill 2
996							; &52 2 Number of bytes in a character row of the whole screen.
997	>0052						bytesPerCharacterRow: .fill 2
998							; &54 1 Most significant byte of number of bytes of screen memory.
999	>0054						screenSizeHighByte: .fill 1
1000							; &55 1 Current screen mode (in range 0â<80><93>7, i.e. without regard to â<80><98>shadowingâ<80><99>).
1001	>0055						currentScreenMODE: .fill 1
1002							; &56 1 Memory mode: 0 for 20K modes, 1 for 16K modes, 2 for 10K modes, 3 for 8K modes, 4 for 1K modes.
1003	>0056						currentScreenMODEGroup: .fill 1
1004							; &57 1 Foreground text colour mask.
1005	>0057						foregroundTextColour: .fill 1
1006							; &58 1 Background text colour mask.
1007	>0058						backgroundTextColour: .fill 1
1008							; &59 1 0 if plotting graphics foreground, 8 if plotting graphics background.
1009	>0059						graphicsPlotState: .fill 1
1010							; &5A 1 Current graphics plot mode (usually set to one of following two reduced mod 16).
1011	>005a						graphicsPlotMode: .fill 1
1012							; &5B 1 Current graphics foreground plot mode (as set by VDU 18).
1013	>005b						foregroundGCOLMode: .fill 1
1014							; &5C 1 Current graphics background plot mode (as set by VDU 18).
1015	>005c						backgroundGCOLMode: .fill 1
1016							; &5D 2 Address of routine to process current VDU sequence.
1017	>005d						jumpVector: .fill 2
1018							; &5F 1 Value for 6845 register 10 to revert to on leaving cursor editing.
1019	>005f						lastCursorStartRegisterValue: .fill 1
1020							; &60 1 (Number of logical colours)â<88><92>1 (0 if Teletext).
1021	>0060						numberOfLogicalColoursMinusOne: .fill 1
1022							; &61 1 (Number of pixels/byte)â<88><92>1 (0 if not graphics).
1023	>0061						pixelsPerByteMinusOne: .fill 1
1024							; &62 1 Mask for leftmost pixel in a byte.
1025	>0062						colourMaskLeft: .fill 1
1026							; &63 1 Mask for rightmost pixel in a byte.
1027	>0063						colourMaskRight: .fill 1
1028							; &64 1 Output cursor X coordinate when cursor editing, but input cursor X coordinate when cursor editing and inside an â<80><98>unknown PLOT codesâ<80><99> routine.
1029	>0064						editCursorXPosition: .fill 1
1030							; &65 1 Output cursor Y coordinate when cursor editing, but input cursor Y coordinate when cursor editing and inside an â<80><98>unknown PLOT codesâ<80><99> routine.
1031	>0065						editCursorYPosition: .fill 1
1032							; &66 1 Cursor control flags (as set by VDU 23 16).
1033	.0066						cursorFlags: .block
1034	>0066						                .fill 1
1035							; MasRef E.3-18
1036	=$40						noSpecialVDU5Actions=$40
1037	=$20						noMoveCursorAfterPrint=$20
1038	=$10						noVerticalScroll=$10
1039	=$08						swapAxes=$08                    ;if set, X=vert; if clear, X=horiz
1040	=$04						invertVertical=$04              ;if set, vert=up; if clear, vert=down
1041	=$02						invertHorizontal=$02            ;if set, horiz=left; if clear, horiz=right
1042	=$01						scrollProtect=$01
1043							                .endblock
1044							; &67 1 Dot pattern (as set by VDU 23 6).
1045	>0067						dotPattern: .fill 1
1046							; &68 1 Current state of dot pattern.
1047	>0068						dotPatternState: .fill 1
1048							; &69 1 0 if colour being plotted is solid, non-zero if colour is an ECF
1049	>0069						isColourECF: .fill 1
1050							; &6A 1 0 if graphics foreground colour is solid, non-zero if foreground colour is an ECF
1051	>006a						isForegroundECF: .fill 1
1052							; &6B 1 0 if graphics background colour is solid, non-zero if background colour is an ECF
1053	>006b						isBackgroundECF: .fill 1
1054							; &6C 1 Top bit set when cursor is in "column 81".
1055	>006c						column81: .fill 1
1056							; &6D 1 Current graphics foreground colour (as set by VDU 18).
1057	>006d						foregroundGraphicsColour: .fill 1
1058							; &6E 1 Current graphics background colour (as set by VDU 18)
1059	>006e						backgroundGraphicsColour: .fill 1
1060							; &6Fâ<80><93>&7E Software copy of the current palette.
1061	>006f						currentPalette: .fill 16
1062							; &7F 1 Reserved.
1063	>007f						reserved: .fill 1
1064							                .endstruct

1066							                .virtual $300
1067	.0300						vduv: .dstruct VDUVariables
932	.0300						graphicsWindow:
933							;graphicsWindowLeftBottom:
934							; &00 2 Graphics window left column. (p)
935	>0300						graphicsWindowPixelsLeft: .fill 2
936							; &02 2 Graphics window bottom row. (p)
937	>0302						graphicsWindowPixelsBottom: .fill 2
938							;graphicsWindowRightTop:
939							; &04 2 Graphics window right column. (p)
940	>0304						graphicsWindowPixelsRight: .fill 2
941							; &06 2 Graphics window top row. (p)
942	>0306						graphicsWindowPixelsTop: .fill 2
943	.0308						textWindow:
944							; &08 1 Text window left column.
945	>0308						textWindowLeft: .fill 1
946							; &09 1 Text window bottom row.
947	>0309						textWindowBottom: .fill 1
948							; &0A 1 Text window right column.
949	>030a						textWindowRight: .fill 1
950							; &0B 1 Text window top row.
951	>030b						textWindowTop: .fill 1
952							; &0C 2 Graphics origin X coordinate. (e)
953	>030c						graphicsWindowOriginX: .fill 2
954							; &0E 2 Graphics origin Y coordinate. (e)
955	>030e						graphicsWindowOriginY: .fill 2
956							; &10 2 Graphics cursor X coordinate. (e)
957	>0310						graphicsCursorPositionX: .fill 2
958							; &12 2 Graphics cursor Y coordinate. (e)
959	>0312						graphicsCursorPositionY: .fill 2
960							; &14 2 Previous graphics cursor X coordinate. (p)
961	.0314						oldGraphicsCursorPixels:
962	>0314						oldGraphicsCursorPixelsX: .fill 2
963							; &16 2 Previous graphics cursor Y coordinate. (p)
964	>0316						oldGraphicsCursorPixelsY: .fill 2
965							; &18 1 Text cursor X coordinate (from left of screen) when not cursor editing. When cursor editing, normally the input cursor X coordinate, but the output cursor X coordinate within an â<80><9C>unknown PLOT codesâ<80><9D> routine.
966	>0318						textCursorXPosition: .fill 1
967							; &19 1 Text cursor Y coordinate (from top of screen) when not cursor editing. When cursor editing, normally t.lsthe input cursor Y coordinate, but the output cursor Y coordinate within an â<80><9C>unknown PLOT codesâ<80><9D> routine.
968	>0319						textCursorYPosition: .fill 1
969							; &1A 1 Y produced by GADDR (see next section) so that (ZMEMG),Y addresses the correct byte.
970	>031a						graphicsAddressOffset: .fill 1
971							; &1Bâ<80><93>&23 VDU queue: &23 contains last byte of queue, other bytes immediately precede it.
972	=9						queueSize=9
973	>031b						queueBegin: .fill queueSize
974	.0324						queueEnd:
975	.0324						graphicsCursorPixels:
976							; &24 2 Graphics cursor X coordinate. (p)
977	>0324						graphicsCursorPixelsX: .fill 2
978							; &26 2 Graphics cursor Y coordinate. (p)
979	>0326						graphicsCursorPixelsY: .fill 2
980							; &28â<80><93>&49 Workspace. But variable &38 must not be used in a Teletext mode (mode 7 or 135).
981							                .union
982	.0328						hlfw: .dstruct HorizontalLineFillWorkspaceVDUVariables
1198	>0328						                .fill 6
1199	.032e						pixelsX:                        ;2e
1200	>032e						                .fill 2
1201	.0330						pixelsY:                        ;30
1202	>0330						                .fill 2
1203	.0332						pixelsRightEndX:
1204	>0332						                .fill 2         ;32
1205	.0334						pixelsLimitX:                   ;34
1206	>0334						                .fill 2
1207							                .endstruct
983	.0328						mocr: .dstruct MoveOrCopyRectangleWorkspaceVDUVariables
1189	.0328						src: .dstruct VDUAABB
1103	.0328						min: .dstruct VDUCoordinate
1098	>0328						x: .fill 2
1099	>032a						y: .fill 2
1100							                .endstruct
1104	.032c						max: .dstruct VDUCoordinate
1098	>032c						x: .fill 2
1099	>032e						y: .fill 2
1100							                .endstruct
1105							                .endstruct
1190	>0330						                .fill 4
1191	.0334						dest: .dstruct VDUAABB
1103	.0334						min: .dstruct VDUCoordinate
1098	>0334						x: .fill 2
1099	>0336						y: .fill 2
1100							                .endstruct
1104	.0338						max: .dstruct VDUCoordinate
1098	>0338						x: .fill 2
1099	>033a						y: .fill 2
1100							                .endstruct
1105							                .endstruct
1192	>033c						                .fill 9
1193	.0345						copy:
1194	>0345						                .fill 1         ;0=move, 2=copy
1195							                .endstruct
984	.0328						workspace: .dstruct GenericWorkspaceVDUVariables
1108	.0328						_28:
1109	>0328						                .fill 1
1110	.0329						_29:
1111	>0329						                .fill 1
1112	.032a						_2A:
1113	>032a						                .fill 1
1114	.032b						_2B:
1115	>032b						                .fill 1
1116	.032c						_2C:
1117	>032c						                .fill 1
1118	.032d						_2D:
1119	>032d						                .fill 1
1120	.032e						_2E:
1121	>032e						                .fill 1
1122	.032f						_2F:
1123	>032f						                .fill 1
1124	.0330						_30:
1125	>0330						                .fill 1
1126	.0331						_31:
1127	>0331						                .fill 1
1128	.0332						_32:
1129	>0332						                .fill 1
1130	.0333						_33:
1131	>0333						                .fill 1
1132	.0334						_34:
1133	>0334						                .fill 1
1134	.0335						_35:
1135	>0335						                .fill 1
1136	.0336						_36:
1137	>0336						                .fill 1
1138	.0337						_37:
1139	>0337						                .fill 1
1140	.0338						_38:
1141	>0338						                .fill 1
1142	.0339						_39:
1143	>0339						                .fill 1
1144	.033a						_3A:
1145	>033a						                .fill 1
1146	.033b						_3B:
1147	>033b						                .fill 1
1148	.033c						_3C:
1149	>033c						                .fill 1
1150	.033d						_3D:
1151	>033d						                .fill 1
1152	.033e						_3E:
1153	>033e						                .fill 1
1154	.033f						_3F:
1155	>033f						                .fill 1
1156	.0340						_40:
1157	>0340						                .fill 1
1158	.0341						_41:
1159	>0341						                .fill 1
1160	.0342						_42:
1161	>0342						                .fill 1
1162	.0343						_43:
1163	>0343						                .fill 1
1164	.0344						_44:
1165	>0344						                .fill 1
1166	.0345						_45:
1167	>0345						                .fill 1
1168	.0346						_46:
1169	>0346						                .fill 1
1170	.0347						_47:
1171	>0347						                .fill 1
1172	.0348						_48:
1173	>0348						                .fill 1
1174	.0349						_49:
1175	>0349						                .fill 1
1176							                .endstruct
985							                .endunion
986							; &4A 2 Address at which the 6845 is to display the text cursor.
987	>034a						textCursorCRTCAddress: .fill 2
988							; &4C 2 Number of bytes in a character row of the text window.
989	>034c						textWindowWidthInBytes: .fill 2
990							; &4E 1 Most significant byte of address of first byte of screen memory.
991	>034e						startScreenAddressHighByte: .fill 1
992							; &4F 1 Number of bytes in a character.
993	>034f						bytesPerCharacter: .fill 1
994							; &50 2 Address of byte in top left corner of screen display.
995	>0350						screenTopLeftAddress: .fill 2
996							; &52 2 Number of bytes in a character row of the whole screen.
997	>0352						bytesPerCharacterRow: .fill 2
998							; &54 1 Most significant byte of number of bytes of screen memory.
999	>0354						screenSizeHighByte: .fill 1
1000							; &55 1 Current screen mode (in range 0â<80><93>7, i.e. without regard to â<80><98>shadowingâ<80><99>).
1001	>0355						currentScreenMODE: .fill 1
1002							; &56 1 Memory mode: 0 for 20K modes, 1 for 16K modes, 2 for 10K modes, 3 for 8K modes, 4 for 1K modes.
1003	>0356						currentScreenMODEGroup: .fill 1
1004							; &57 1 Foreground text colour mask.
1005	>0357						foregroundTextColour: .fill 1
1006							; &58 1 Background text colour mask.
1007	>0358						backgroundTextColour: .fill 1
1008							; &59 1 0 if plotting graphics foreground, 8 if plotting graphics background.
1009	>0359						graphicsPlotState: .fill 1
1010							; &5A 1 Current graphics plot mode (usually set to one of following two reduced mod 16).
1011	>035a						graphicsPlotMode: .fill 1
1012							; &5B 1 Current graphics foreground plot mode (as set by VDU 18).
1013	>035b						foregroundGCOLMode: .fill 1
1014							; &5C 1 Current graphics background plot mode (as set by VDU 18).
1015	>035c						backgroundGCOLMode: .fill 1
1016							; &5D 2 Address of routine to process current VDU sequence.
1017	>035d						jumpVector: .fill 2
1018							; &5F 1 Value for 6845 register 10 to revert to on leaving cursor editing.
1019	>035f						lastCursorStartRegisterValue: .fill 1
1020							; &60 1 (Number of logical colours)â<88><92>1 (0 if Teletext).
1021	>0360						numberOfLogicalColoursMinusOne: .fill 1
1022							; &61 1 (Number of pixels/byte)â<88><92>1 (0 if not graphics).
1023	>0361						pixelsPerByteMinusOne: .fill 1
1024							; &62 1 Mask for leftmost pixel in a byte.
1025	>0362						colourMaskLeft: .fill 1
1026							; &63 1 Mask for rightmost pixel in a byte.
1027	>0363						colourMaskRight: .fill 1
1028							; &64 1 Output cursor X coordinate when cursor editing, but input cursor X coordinate when cursor editing and inside an â<80><98>unknown PLOT codesâ<80><99> routine.
1029	>0364						editCursorXPosition: .fill 1
1030							; &65 1 Output cursor Y coordinate when cursor editing, but input cursor Y coordinate when cursor editing and inside an â<80><98>unknown PLOT codesâ<80><99> routine.
1031	>0365						editCursorYPosition: .fill 1
1032							; &66 1 Cursor control flags (as set by VDU 23 16).
1033	.0366						cursorFlags: .block
1034	>0366						                .fill 1
1035							; MasRef E.3-18
1036	=$40						noSpecialVDU5Actions=$40
1037	=$20						noMoveCursorAfterPrint=$20
1038	=$10						noVerticalScroll=$10
1039	=$08						swapAxes=$08                    ;if set, X=vert; if clear, X=horiz
1040	=$04						invertVertical=$04              ;if set, vert=up; if clear, vert=down
1041	=$02						invertHorizontal=$02            ;if set, horiz=left; if clear, horiz=right
1042	=$01						scrollProtect=$01
1043							                .endblock
1044							; &67 1 Dot pattern (as set by VDU 23 6).
1045	>0367						dotPattern: .fill 1
1046							; &68 1 Current state of dot pattern.
1047	>0368						dotPatternState: .fill 1
1048							; &69 1 0 if colour being plotted is solid, non-zero if colour is an ECF
1049	>0369						isColourECF: .fill 1
1050							; &6A 1 0 if graphics foreground colour is solid, non-zero if foreground colour is an ECF
1051	>036a						isForegroundECF: .fill 1
1052							; &6B 1 0 if graphics background colour is solid, non-zero if background colour is an ECF
1053	>036b						isBackgroundECF: .fill 1
1054							; &6C 1 Top bit set when cursor is in "column 81".
1055	>036c						column81: .fill 1
1056							; &6D 1 Current graphics foreground colour (as set by VDU 18).
1057	>036d						foregroundGraphicsColour: .fill 1
1058							; &6E 1 Current graphics background colour (as set by VDU 18)
1059	>036e						backgroundGraphicsColour: .fill 1
1060							; &6Fâ<80><93>&7E Software copy of the current palette.
1061	>036f						currentPalette: .fill 16
1062							; &7F 1 Reserved.
1063	>037f						reserved: .fill 1
1064							                .endstruct
1068							                .endvirtual

1070							; vduQueueItemAddr: .function index
1071							;                 .cerror index<0||index>=vdu.queueSize,"bad VDU queue index"
1072							;                 .endfunction vdu.queue+vdu.queueSize-1-index

1074							; Presumed addresses in ANDY that don't happen to coincide with other
1075							; labels.
1076							;
1077							; MasRef E.4-5, MasRef F.6-10
1078							;
1079							; &8000-83FF  RAM  Soft key expansions buffer
1080							; &8400â<80><93>87FF  RAM  VDU workspace.
1081							; &8800â<80><93>07    RAM  ECF pattern 1 definition.
1082							; &8808â<80><93>0F    RAM  ECF pattern 2 definition.
1083							; &8810â<80><93>17    RAM  ECF pattern 3 definition.
1084							; &8818â<80><93>1F    RAM  ECF pattern 4 definition.
1085							; &8820â<80><93>27    RAM  Current foreground ECF pattern or solid colour.
1086							; &8828â<80><93>2F    RAM  Current background ECF pattern or solid colour.
1087							; &8830â<80><93>BF    RAM  VDU workspace.
1088							; &88C0â<80><93>FF    RAM  Reserved for future expansion.
1089							; &8900â<80><93>FF    RAM  Current definitions of characters &20â<80><93>3F.
1090							; &8A00â<80><93>FF    RAM  Current definitions of characters &40â<80><93>5F.
1091							; &8B00â<80><93>FF    RAM  Current definitions of characters &60â<80><93>7F.
1092							; &8C00â<80><93>FF    RAM  Current definitions of characters &80â<80><93>9F.
1093							; &8D00â<80><93>FF    RAM  Current definitions of characters &A0â<80><93>BF.
1094							; &8E00â<80><93>FF    RAM  Current definitions of characters &C0â<80><93>DF.
1095							; &8F00â<80><93>FF    RAM  Current definitions of characters &E0â<80><93>FF.

1097							VDUCoordinate: .struct
1098	>0000						x: .fill 2
1099	>0002						y: .fill 2
1100							                .endstruct

1102							VDUAABB: .struct
1103	.0000						min: .dstruct VDUCoordinate
1098	>0000						x: .fill 2
1099	>0002						y: .fill 2
1100							                .endstruct
1104	.0004						max: .dstruct VDUCoordinate
1098	>0004						x: .fill 2
1099	>0006						y: .fill 2
1100							                .endstruct
1105							                .endstruct

1107							GenericWorkspaceVDUVariables: .struct
1108	.0000						_28:
1109	>0000						                .fill 1
1110	.0001						_29:
1111	>0001						                .fill 1
1112	.0002						_2A:
1113	>0002						                .fill 1
1114	.0003						_2B:
1115	>0003						                .fill 1
1116	.0004						_2C:
1117	>0004						                .fill 1
1118	.0005						_2D:
1119	>0005						                .fill 1
1120	.0006						_2E:
1121	>0006						                .fill 1
1122	.0007						_2F:
1123	>0007						                .fill 1
1124	.0008						_30:
1125	>0008						                .fill 1
1126	.0009						_31:
1127	>0009						                .fill 1
1128	.000a						_32:
1129	>000a						                .fill 1
1130	.000b						_33:
1131	>000b						                .fill 1
1132	.000c						_34:
1133	>000c						                .fill 1
1134	.000d						_35:
1135	>000d						                .fill 1
1136	.000e						_36:
1137	>000e						                .fill 1
1138	.000f						_37:
1139	>000f						                .fill 1
1140	.0010						_38:
1141	>0010						                .fill 1
1142	.0011						_39:
1143	>0011						                .fill 1
1144	.0012						_3A:
1145	>0012						                .fill 1
1146	.0013						_3B:
1147	>0013						                .fill 1
1148	.0014						_3C:
1149	>0014						                .fill 1
1150	.0015						_3D:
1151	>0015						                .fill 1
1152	.0016						_3E:
1153	>0016						                .fill 1
1154	.0017						_3F:
1155	>0017						                .fill 1
1156	.0018						_40:
1157	>0018						                .fill 1
1158	.0019						_41:
1159	>0019						                .fill 1
1160	.001a						_42:
1161	>001a						                .fill 1
1162	.001b						_43:
1163	>001b						                .fill 1
1164	.001c						_44:
1165	>001c						                .fill 1
1166	.001d						_45:
1167	>001d						                .fill 1
1168	.001e						_46:
1169	>001e						                .fill 1
1170	.001f						_47:
1171	>001f						                .fill 1
1172	.0020						_48:
1173	>0020						                .fill 1
1174	.0021						_49:
1175	>0021						                .fill 1
1176							                .endstruct

1178							HorizontalLineFillWorkspaceZP: .struct
1179	>0000						notByteMatch: .fill 1
1180	>0001						a: .fill 1
1181	>0002						b: .fill 2
1182							;c: .fill 2
1183	>0004						pixelsX: .fill 2
1184	>0006						d: .fill 1
1185	>0007						resultEOR: .fill 1
1186							                .endstruct

1188							MoveOrCopyRectangleWorkspaceVDUVariables: .struct
1189	.0000						src: .dstruct VDUAABB
1103	.0000						min: .dstruct VDUCoordinate
1098	>0000						x: .fill 2
1099	>0002						y: .fill 2
1100							                .endstruct
1104	.0004						max: .dstruct VDUCoordinate
1098	>0004						x: .fill 2
1099	>0006						y: .fill 2
1100							                .endstruct
1105							                .endstruct
1190	>0008						                .fill 4
1191	.000c						dest: .dstruct VDUAABB
1103	.000c						min: .dstruct VDUCoordinate
1098	>000c						x: .fill 2
1099	>000e						y: .fill 2
1100							                .endstruct
1104	.0010						max: .dstruct VDUCoordinate
1098	>0010						x: .fill 2
1099	>0012						y: .fill 2
1100							                .endstruct
1105							                .endstruct
1192	>0014						                .fill 9
1193	.001d						copy:
1194	>001d						                .fill 1         ;0=move, 2=copy
1195							                .endstruct

1197							HorizontalLineFillWorkspaceVDUVariables: .struct
1198	>0000						                .fill 6
1199	.0006						pixelsX:                        ;2e
1200	>0006						                .fill 2
1201	.0008						pixelsY:                        ;30
1202	>0008						                .fill 2
1203	.000a						pixelsRightEndX:
1204	>000a						                .fill 2         ;32
1205	.000c						pixelsLimitX:                   ;34
1206	>000c						                .fill 2
1207							                .endstruct

1209							HorizontalLineFillWorkspaceANDY: .struct
1210	>0000						ecfPattern: .fill 8
1211							                .endstruct

1213	=16						softKeyCount=16
1214	=$400						softKeyDataTotalSize=$400

1216							                .virtual $8000
1217	.8000						andy: .block
1218	.8000						softKeys: .block
1219	>8000						stringLSBs: .fill softKeyCount
1220	>8010						endLSB: .fill 1
1221	>8011						stringMSBs: .fill softKeyCount
1222	>8021						endMSB: .fill 1
1223	.8022						strings:
1224	>8022						                .fill softKeys+$400-*
1225	.8400						end:
1226							                .endblock
1227	>8400						                .fill $8800-*;(softKeyCount*2+1)
1228	.8800						ecfPatterns:
1229	>8800						ecfPattern1: .fill 8
1230	>8808						ecfPattern2: .fill 8
1231	>8810						ecfPattern3: .fill 8
1232	>8818						ecfPattern4: .fill 8
1233	.8820						currentECFPatterns:
1234	>8820						fgECFPattern: .fill 8
1235	>8828						bgECFPattern: .fill 8
1236	.8830						workspace:
1237							                .union
1238	.8830						hlfw: .dstruct HorizontalLineFillWorkspaceANDY
1210	>8830						ecfPattern: .fill 8
1211							                .endstruct
1239	>8830						                .fill 208
1240							                .endunion
1241	.8900						softCharacterDefinitions:
1242	>8900						                .fill (256-32)*8
1243							                .cerror (<andy.softCharacterDefinitions)!=0,"Soft character definitions must be page aligned"
1244							                .cerror *!=$9000,"ANDY is the wrong size"
1245							                .endblock
1246							                .endvirtual


1249	=$8000						L8000=$8000
1250	=$8001						L8001=$8001
1251	=$8002						L8002=$8002
1252	=$8004						L8004=$8004
1253	=$8010						L8010=$8010
1254	=$8011						L8011=$8011
1255	=$8012						L8012=$8012
1256							                ;l8011=$8011
1257							                ;l8012=$8012
1258	=$8021						L8021=$8021

1260							; see $d40d, $d4ae
1261							;
1262							; (suspect these are actually references to $8840-$104 and $8848-$104)
1263	=$873c						L873C=$873c
1264	=$8744						L8744=$8744

1266	=$8400						L8400=$8400
1267	=$8500						L8500=$8500
1268	=$8600						L8600=$8600
1269	=$8700						L8700=$8700
1270	=$87f8						L87F8=$87f8
1271	=$87ff						L87FF=$87FF
1272	=$8800						L8800=$8800
1273	=$8803						L8803=$8803
1274	=$8804						L8804=$8804
1275	=$881e						L881E=$881E
1276	=$8820						L8820=$8820
1277	=$8830						L8830=$8830
1278	=$8831						L8831=$8831
1279	=$8832						L8832=$8832
1280	=$8833						L8833=$8833
1281	=$8834						L8834=$8834
1282	=$8835						L8835=$8835
1283	=$8836						L8836=$8836
1284	=$8837						L8837=$8837
1285	=$8838						L8838=$8838
1286	=$8839						L8839=$8839
1287	=$883a						L883A=$883a
1288	=$883b						L883B=$883b
1289	=$883c						L883C=$883C
1290	=$883d						L883D=$883D
1291	=$883e						L883E=$883e
1292	=$883f						L883F=$883f
1293	=$8840						L8840=$8840
1294	=$8841						L8841=$8841
1295	=$8842						L8842=$8842
1296	=$8843						L8843=$8843
1297	=$8844						L8844=$8844
1298	=$8845						L8845=$8845
1299	=$8846						L8846=$8846
1300	=$8847						L8847=$8847
1301	=$8848						L8848=$8848
1302	=$8849						L8849=$8849
1303	=$884a						L884A=$884a
1304	=$884b						L884B=$884b
1305	=$884c						L884C=$884c
1306	=$884d						L884D=$884d
1307	=$884e						L884E=$884e

1309							                ; written to during startup
1310	=$fe8e						LFE8E=$fe8e

1312							;-------------------------------------------------------------------------

1314							                .virtual $00
1315							                .union
1316	.0000						tubeOSFILEParameterBlock: .dstruct OSFILEParameterBlock
288	.0000						fileName:
289	>0000						                .fill 2
290	.0002						addresses:
291	.0002						load:
292	>0002						                .fill 4
293	.0006						exec:
294	>0006						                .fill 4
295	.000a						length:
296	.000a						saveStart:
297	>000a						                .fill 4
298	.000e						attributes:
299	.000e						saveEnd:
300	>000e						                .fill 4
301							                .endstruct
1317	.0000						tubeOSGBPBParameterBlock: .dstruct OSGBPBParameterBlock
257	.0000						handle:
258	>0000						                .fill 1
259	.0001						address:
260	>0001						                .fill 4
261	.0005						count:
262	>0005						                .fill 4
263	.0009						ptr:
264	>0009						                .fill 4
265							                .endstruct
1318	>0000						tubeLanguageHostAddr: .fill 2
1319							                .endunion
1320	>0012						tubeTransferAddr: .fill 2
1321	>0014						tubeNotClaimed: .fill 1            ;bit 7 clear if tube claimed
1322	>0015						tubeClaimantID: .fill 1
1323	.0016						tubeBrkHandlerAddr:
1324							                ; Tube BRK handler sits here.
1325							                .endv

1327	=$700						tubeStringBuffer=$700
1328	=$0128						tubeOSWORDBuffer=$0128

1330							;-------------------------------------------------------------------------

1332							                .virtual $53
1333	>0053						tubeLanguageParasiteAddr: .fill 4
1334							                .endv

1336							; MasRef E.4-4
1337							                .virtual $d0
1338	.00d0						STATE: .block
1339	>00d0						                .fill 1
1340							                ; D.2-32
1341	=$01						isPrinterEnabled=$01
1342	=$02						isScrollingDisabled=$02
1343	=$04						isPagedScrolling=$04
1344	=$08						isTextWindow=$08
1345	=$10						isShadowMode=$10
1346	=$20						isVDU5=$20
1347	=$40						isCursorEditing=$40
1348	=$80						isVDU21=$80
1349							                .bend

1351	>00d1						ZMASK: .fill 1                       ;Pixel mask
1352	>00d2						ZORA: .fill 1                        ;Text OR mask
1353	>00d3						ZEOR: .fill 1                        ;Text EOR mask
1354	>00d4						ZGORA: .fill 1                       ;Graphics OR mask
1355	>00d5						ZGEOR: .fill 1                       ;Graphics EOR mask
1356	>00d6						ZMEMG: .fill 2                       ;Graphics pointer
1357	>00d8						ZMEMT: .fill 2                       ;Text pointer
1358	>00da						ZTEMP: .fill 2                       ;Temporary space
1359	>00dc						ZTEMPB: .fill 2                      ;Temporary space
1360	>00de						ZTEMPC: .fill 2                      ;Temporary space
1361	>00e0						ZTEMPD: .fill 2                      ;Temporary space
1362							                .endv

1364							                .virtual ZTEMP
1365	.00da						zhlfw: .dstruct HorizontalLineFillWorkspaceZP
1179	>00da						notByteMatch: .fill 1
1180	>00db						a: .fill 1
1181	>00dc						b: .fill 2
1182							;c: .fill 2
1183	>00de						pixelsX: .fill 2
1184	>00e0						d: .fill 1
1185	>00e1						resultEOR: .fill 1
1186							                .endstruct
1366							                .endv


1369	=$f8						softKeyExpansionPtr=$f8       ;pointer to current char when expanding soft key.
1370	=$fa						SEIWKA=$fa
1371	=$fb						SEIWKB=$fb

1373	=$d8						vduWriteCursor=$d8

1375	=$d00						nmiEntryPoint=$d00

1377	=0						gcolModeOverwrite=0
1378	=1						gcolModeOR=1
1379	=2						gcolModeAND=2
1380	=3						gcolModeEOR=3
1381	=4						gcolModeInvert=4
1382	=5						gcolModeLeave=5

1384							;-------------------------------------------------------------------------

1386							StarKEYWorkspace: .struct
1387	>0000						newStringLength: .fill 1
1388	>0001						destPtr: .fill 2
1389	>0003						srcPtr: .fill 2
1390	>0005						counter: .fill 2
1391							                .endstruct

1393							OSGBPBWorkspace: .struct
1394	>0000						ptr: .fill 2
1395							                .endstruct

1397							ParseFileNameFSWorkspace: .struct
1398	>0000						fsInfoOffset: .fill 1
1399							                .endstruct

1401							OSCLIWorkspace: .struct
1402	>0000						tablePtr: .fill 2
1403							                .endstruct

1405							                ; TODO - could do being renamed, as it's used (in the
1406							                ; same way) by *UNPLUG and *INSERT.
1407							StarROMSWorkspace: .struct
1408	>0000						insertedFlagMask: .fill 1
1409							                .endstruct

1411							TerminalHELPWorkspace: .struct
1412	>0000						tablePtr: .fill 2
1413							                .endstruct

1415							                ; TODO - tediously verbose names. Acronyms work well
1416							                ; enough for the VDU variables. Do the same thing
1417							                ; here.
1418							                .virtual $b0
1419							                .union
1420	.00b0						starKEYWorkspace: .dstruct StarKEYWorkspace
1387	>00b0						newStringLength: .fill 1
1388	>00b1						destPtr: .fill 2
1389	>00b3						srcPtr: .fill 2
1390	>00b5						counter: .fill 2
1391							                .endstruct
1421	.00b0						osgbpbWorkspace: .dstruct OSGBPBWorkspace
1394	>00b0						ptr: .fill 2
1395							                .endstruct
1422	.00b0						parseFileNameFSWorkspace: .dstruct ParseFileNameFSWorkspace
1398	>00b0						fsInfoOffset: .fill 1
1399							                .endstruct
1423	.00b0						oscliWorkspace: .dstruct OSCLIWorkspace
1402	>00b0						tablePtr: .fill 2
1403							                .endstruct
1424	.00b0						starROMSWorkspace: .dstruct StarROMSWorkspace
1408	>00b0						insertedFlagMask: .fill 1
1409							                .endstruct
1425	.00b0						terminalHELPWorkspace: .dstruct TerminalHELPWorkspace
1412	>00b0						tablePtr: .fill 2
1413							                .endstruct
1426							                .endunion
1427							                .endvirtual

1429							;-------------------------------------------------------------------------

1431							; ROM number containing Terminal
1432	=15						terminalROM=15

1434							; ROM number containing the extXXXX entry points
1435							                .if version==320
1437							                .elsif version==350
1438	=9						extROM=9
1441							                .endif

1443							; Base page for VDU routines
1444	=$c0						vduRoutinesPage=$c0

1446							                .if version<500
1447	=14						cmosBytesOffset=RTC.ram
1450							                .endif

1452							CMOSBytes: .struct
1453	>0000						econetStationNumber: .fill 1
1454	>0001						fileServerStationNumber: .fill 1
1455	>0002						fileServerNetworkNumber: .fill 1
1456	>0003						printerServerStationNumber: .fill 1
1457	>0004						printerServerNetworkNumber: .fill 1
1458	.0005						defaultROMs: .block
1459	>0005						                .fill 1
1460	=0						fsShift=0
1461	=4						languageShift=4
1462							                .endblock

1464	>0006						insertedROMs: .fill 2

1466	>0008						editROMByte: .fill 1
1467	>0009						telecommsByte: .fill 1

1469							                ; TODO - don't need to say "default" so much...
1470	.000a						defaults0: .block
1471	>000a						                .fill 1
1472	=7						defaultMODEMask=7
1473	=8						defaultSHADOWMask=8
1474	=16						defaultInterlaceMask=16
1475	=7						defaultTVMask=7
1476	=5						defaultTVShift=5
1477							                .endblock

1479	.000b						defaults1: .block
1480	>000b						                .fill 1
1481	=7						defaultFDRIVEMask=7
1482	=8						defaultShiftLockMask=8
1483	=16						defaultNoLockMask=16
1484	=32						defaultCapsLockMask=32
1485	=64						defaultADFSLoadDirMask=64
1486	=128						defaultFloppyDrive=128
1487							                .endblock

1489	>000c						keyboardAutoRepeatDelay: .fill 1
1490	>000d						keyboardAutoRepeatRate: .fill 1
1491	>000e						printerIgnoreChar: .fill 1

1493	.000f						defaults2: .block
1494	>000f						                .fill 1
1495	=1						tubeOnMask=1
1496	=2						usePrinterIgnoreCharMask=2
1497	=7						serialBaudRateIndexMask=7
1498	=2						serialBaudRateIndexShift=2
1499	=7						fx5SettingMask=7
1500	=5						fx5SettingShift=5
1501							                .endblock

1503	.0010						defaults3: .block
1504	>0010						                .fill 1
1505	=2						loudMask=2
1506	=4						extTubeMask=4
1507	=8						protectedScrollingMask=8
1508	=16						autoBootMask=16
1509	=7						defaultSerialDataFormatMask=7
1510	=5						defaultSerialDataFormatShift=5
1511							                .endblock

1513							                .if version>=500
1532							                .endif

1534							                .endstruct

1536	=$ef						originalA=$ef
1537	=$f0						originalX=$f0
1538	=$f1						originalY=$f1
1539	=$fc						irqTempA=$fc
1540	=$fd						errPtr=$fd                      ;REPTR in OS 1.20
1541	=$ff						escapeFlag=$ff

1543	=$8c0						envelope1Data=$8c0

1545	=$8000						sidewaysROMLanguageEntry=$8000
1546	=$8003						sidewaysROMServiceEntry=$8003
1547							                .virtual $8006
1548	.8006						sidewaysROMType: .block
1549	=32						hasRelocationAddress=32
1550	=64						hasLanguageEntry=64
1551	=128						hasServiceEntry=128
1552							                .endblock
1553							                .endvirtual
1554	=$8007						sidewaysROMCopyrightOffset=$8007
1555	=$8008						sidewaysROMVersion=$8008
1556	=$8009						sidewaysROMName=$8009

1558							;-------------------------------------------------------------------------

1560							                ; [MasRef D.3-22]
1561							ClockStringFormat: .struct
1562	.0000						ddd:
1563	>0000						                .fill 3
1564	>0003						                .fill 1                      ;','
1565	.0004						nn:
1566	>0004						                .fill 2
1567	>0006						                .fill 1                      ;' '
1568	.0007						mmm:
1569	>0007						                .fill 3
1570	>000a						                .fill 1                      ;' '
1571	.000b						yyyy:
1572	>000b						                .fill 4
1573	>000f						                .fill 1                      ;'.'
1574	.0010						hh:
1575	>0010						                .fill 2
1576	>0012						                .fill 1                      ;':'
1577	.0013						mm:
1578	>0013						                .fill 2
1579	>0015						                .fill 1                      ;':'
1580	.0016						ss:
1581	>0016						                .fill 2
1582	.0018						cr:
1583	>0018						                .fill 1                      ;'\n'
1584							                .endstruct

1586							;-------------------------------------------------------------------------

:1	;******  Return to file: mosCFA3000.s65

3							                .include "src/terminal_workspace.s65"

:4	;******  Processing file: src/terminal_workspace.s65

1							;-------------------------------------------------------------------------

3							; Not really MOS stuff. This is the Terminal ROM zero page workspace.

5	=$70						oldINSV=$70
6	=$72						oldREMV=$72
7							                .cerror oldREMV!=oldINSV+2,"oldREMV and oldINSV must be adjacent"

9							;-------------------------------------------------------------------------

11							beword .macro value
14							                .endm

16							;-------------------------------------------------------------------------

18							zterm: .struct
19	=$39						numRowsMinusOne=$39
20	=$38						numColumns=$38
21	=$37						numColumnsMinusOne=$37
22							; TODO old INSV and oldREMV should probably go in here too!
23							                .endstruct


:1	;******  Return to file: mosCFA3000.s65


5	=350						version=350
6	=true						CFA3000=true

8							*=$af00
9							                .dsection ext
10							                .cwarn *>$b800,'Ext ROM is too large'

12							*=$8000
13							                .dsection utils
14							                .cwarn *>$c000,'Terminal ROM is too large'

16							*=$c000
17							                .dsection mos
18							                ; there's no need for a size check here - 64tass gives
19							                ; you an error if the code would go past the 64 K
20							                ; barrier.

22							;-------------------------------------------------------------------------

24	=$8db9						osbyteAndOSWORDRoutineTable=terminal.osbyteAndOSWORDRoutineTable
25	=$9738						osbyte14=terminal.osbyte14

27							;-------------------------------------------------------------------------

29							                .section ext
30							                .include "src/sound_stuff.s65"

:5	;******  Processing file: src/sound_stuff.s65

1							; Table to convert channel number to the bits required by the chip
2	.af00						soundParameterTable:
3	>af00		e0 c0 a0 80			                .byte $e0,$c0,$a0,$80

5							;-------------------------------------------------------------------------

7	.af04						LF413:
8	.af04		4c 11 b0	jmp $b011	                jmp LF520

10							;-------------------------------------------------------------------------

12	.af07						LF416:
13	.af07		a2 00		ldx #$00	                ldx #$00
14	.af09		ad 38 08	lda $0838	                lda $0838
15	.af0c		d0 04		bne $af12	                bne LF421
16	.af0e		e8		inx		                inx
17	.af0f		ce 38 08	dec $0838	                dec $0838
18	.af12						LF421:
19	.af12		8e 3b 08	stx $083b	                stx $083B
20	.af15		a2 08		ldx #$08	                ldx #$08
21	.af17						LF426:
22	.af17		ca		dex		                dex
23	.af18		bd 00 08	lda $0800,x	                lda $0800,x
24	.af1b		f0 e7		beq $af04	                beq LF413
25	.af1d		bd ce 02	lda $02ce,x	                lda bufferEmptyFlags,x
26	.af20		30 05		bmi $af27	                bmi LF436
27	.af22		bd 18 08	lda $0818,x	                lda $0818,x
28	.af25		d0 08		bne $af2f	                bne LF43E
29	.af27						LF436:
30	.af27		20 19 b0	jsr $b019	                jsr LF528
31	.af2a		bd 18 08	lda $0818,x	                lda $0818,x
32	.af2d		f0 12		beq $af41	                beq LF450
33	.af2f						LF43E:
34	.af2f		1a		inc a		                inc a
35	.af30		f0 12		beq $af44	                beq LF453
36	.af32		de 1c 08	dec $081c,x	                dec $081C,x
37	.af35		d0 0d		bne $af44	                bne LF453
38	.af37		a9 05		lda #$05	                lda #$05
39	.af39		9d 1c 08	sta $081c,x	                sta $081C,x
40	.af3c		de 18 08	dec $0818,x	                dec $0818,x
41	.af3f		d0 03		bne $af44	                bne LF453
42	.af41						LF450:
43	.af41		20 19 b0	jsr $b019	                jsr LF528
44	.af44						LF453:
45	.af44		bd 24 08	lda $0824,x	                lda $0824,x
46	.af47		f0 05		beq $af4e	                beq LF45D
47	.af49		de 24 08	dec $0824,x	                dec $0824,x
48	.af4c		d0 b6		bne $af04	                bne LF413
49	.af4e						LF45D:
50	.af4e		bc 20 08	ldy $0820,x	                ldy $0820,x
51	.af51		c0 ff		cpy #$ff	                cpy #$FF
52	.af53		f0 af		beq $af04	                beq LF413
53	.af55		b9 c0 08	lda $08c0,y	                lda $08C0,y
54	.af58		29 7f		and #$7f	                and #$7F
55	.af5a		9d 24 08	sta $0824,x	                sta $0824,x
56	.af5d		bd 08 08	lda $0808,x	                lda $0808,x
57	.af60		c9 04		cmp #$04	                cmp #$04
58	.af62		f0 5d		beq $afc1	                beq LF4D0
59	.af64		18		clc		                clc
60	.af65		7d 20 08	adc $0820,x	                adc $0820,x
61	.af68		a8		tay		                tay
62	.af69		b9 cb 08	lda $08cb,y	                lda $08CB,y
63	.af6c		38		sec		                sec
64	.af6d		e9 3f		sbc #$3f	                sbc #$3F
65	.af6f		8d 3a 08	sta $083a	                sta $083A
66	.af72		b9 c7 08	lda $08c7,y	                lda $08C7,y
67	.af75		8d 39 08	sta $0839	                sta $0839
68	.af78		bd 04 08	lda $0804,x	                lda $0804,x
69	.af7b						LF48A:
70	.af7b		48		pha		                pha
71	.af7c		18		clc		                clc
72	.af7d		6d 39 08	adc $0839	                adc $0839
73	.af80		50 07		bvc $af89	                bvc LF498
74	.af82		2a		rol a		                rol a
75	.af83		a9 3f		lda #$3f	                lda #$3F
76	.af85		b0 02		bcs $af89	                bcs LF498
77	.af87		49 ff		eor #$ff	                eor #$FF
78	.af89						LF498:
79	.af89		9d 04 08	sta $0804,x	                sta $0804,x
80	.af8c		2a		rol a		                rol a
81	.af8d		5d 04 08	eor $0804,x	                eor $0804,x
82	.af90		10 09		bpl $af9b	                bpl LF4AA
83	.af92		a9 3f		lda #$3f	                lda #$3F
84	.af94		90 02		bcc $af98	                bcc LF4A7
85	.af96		49 ff		eor #$ff	                eor #$FF
86	.af98						LF4A7:
87	.af98		9d 04 08	sta $0804,x	                sta $0804,x
88	.af9b						LF4AA:
89	.af9b		ce 39 08	dec $0839	                dec $0839
90	.af9e		bd 04 08	lda $0804,x	                lda $0804,x
91	.afa1		38		sec		                sec
92	.afa2		ed 3a 08	sbc $083a	                sbc $083A
93	.afa5		4d 39 08	eor $0839	                eor $0839
94	.afa8		30 09		bmi $afb3	                bmi LF4C2
95	.afaa		ad 3a 08	lda $083a	                lda $083A
96	.afad		9d 04 08	sta $0804,x	                sta $0804,x
97	.afb0		fe 08 08	inc $0808,x	                inc $0808,x
98	.afb3						LF4C2:
99	.afb3		68		pla		                pla
100	.afb4		5d 04 08	eor $0804,x	                eor $0804,x
101	.afb7		29 f8		and #$f8	                and #$F8
102	.afb9		f0 06		beq $afc1	                beq LF4D0
103	.afbb		bd 04 08	lda $0804,x	                lda $0804,x
104	.afbe		20 8a b0	jsr $b08a	                jsr LF599
105	.afc1						LF4D0:
106	.afc1		bd 10 08	lda $0810,x	                lda $0810,x
107	.afc4		c9 03		cmp #$03	                cmp #$03
108	.afc6		f0 49		beq $b011	                beq LF520
109	.afc8		bd 14 08	lda $0814,x	                lda $0814,x
110	.afcb		d0 28		bne $aff5	                bne LF504
111	.afcd		fe 10 08	inc $0810,x	                inc $0810,x
112	.afd0		bd 10 08	lda $0810,x	                lda $0810,x
113	.afd3		c9 03		cmp #$03	                cmp #$03
114	.afd5		d0 0e		bne $afe5	                bne LF4F4
115	.afd7		bc 20 08	ldy $0820,x	                ldy $0820,x
116	.afda		b9 c0 08	lda $08c0,y	                lda $08C0,y
117	.afdd		30 32		bmi $b011	                bmi LF520
118	.afdf		9e 30 08	stz $0830,x	                stz $0830,x
119	.afe2		9e 10 08	stz $0810,x	                stz $0810,x
120	.afe5						LF4F4:
121	.afe5		bd 10 08	lda $0810,x	                lda $0810,x
122	.afe8		18		clc		                clc
123	.afe9		7d 20 08	adc $0820,x	                adc $0820,x
124	.afec		a8		tay		                tay
125	.afed		b9 c4 08	lda $08c4,y	                lda $08C4,y
126	.aff0		9d 14 08	sta $0814,x	                sta $0814,x
127	.aff3		f0 1c		beq $b011	                beq LF520
128	.aff5						LF504:
129	.aff5		de 14 08	dec $0814,x	                dec $0814,x
130	.aff8		bd 20 08	lda $0820,x	                lda $0820,x
131	.affb		18		clc		                clc
132	.affc		7d 10 08	adc $0810,x	                adc $0810,x
133	.afff		a8		tay		                tay
134	.b000		b9 c1 08	lda $08c1,y	                lda $08C1,y
135	.b003		18		clc		                clc
136	.b004		7d 30 08	adc $0830,x	                adc $0830,x
137	.b007		9d 30 08	sta $0830,x	                sta $0830,x
138	.b00a		18		clc		                clc
139	.b00b		7d 0c 08	adc $080c,x	                adc $080C,x
140	.b00e		20 c6 b0	jsr $b0c6	                jsr LF5D5
141	.b011						LF520:
142	.b011		e0 04		cpx #$04	                cpx #$04
143	.b013		f0 03		beq $b018	                beq LF527
144	.b015		4c 17 af	jmp $af17	                jmp LF426

146	.b018						LF527:
147	.b018		60		rts		                rts

149	.b019						LF528:
150	.b019		bd 08 08	lda $0808,x	                lda $0808,x
151	.b01c		c9 04		cmp #$04	                cmp #$04
152	.b01e		f0 05		beq $b025	                beq LF534
153	.b020		a9 03		lda #$03	                lda #$03
154	.b022		9d 08 08	sta $0808,x	                sta $0808,x
155	.b025						LF534:
156	.b025		bd ce 02	lda $02ce,x	                lda bufferEmptyFlags,x
157	.b028		f0 14		beq $b03e	                beq LF54D
158	.b02a		a9 00		lda #$00	                lda #$00
159	.b02c		9e ce 02	stz $02ce,x	                stz bufferEmptyFlags,x
160	.b02f		a0 04		ldy #$04	                ldy #$04
161	.b031						LF540:
162	.b031		99 2b 08	sta $082b,y	                sta $082B,y
163	.b034		88		dey		                dey
164	.b035		d0 fa		bne $b031	                bne LF540
165	.b037		9e 18 08	stz $0818,x	                stz $0818,x
166	.b03a		88		dey		                dey
167	.b03b		8c 38 08	sty $0838	                sty $0838
168	.b03e						LF54D:
169	.b03e		bd 28 08	lda $0828,x	                lda $0828,x
170	.b041		f0 60		beq $b0a3	                beq LF5B2
171	.b043		ad 3b 08	lda $083b	                lda $083B
172	.b046		f0 34		beq $b07c	                beq LF58B
173	.b048		9e 28 08	stz $0828,x	                stz $0828,x
174	.b04b						LF55A:
175	.b04b		4c 75 b1	jmp $b175	                jmp LF685

177							;-------------------------------------------------------------------------
178							;
179							; Clear a buffer that's a sound channel.
180							;
181							; https://tobylobster.github.io/mos/mos/S-s16.html#SP7
182							;
183							; Entry:
184							;
185							; X = buffer number (must be a sound channel buffer)
186							;
187							                .if version==350
188							                ; All this stuff is in the top-level namespace in
189							                ; 3.50. Needs a rethink!
190	.b04e						clearSoundChannelBufferInternal:
193							                .endif
194							                .block
195	.b04e		20 83 b0	jsr $b083	                jsr LF592
196	.b051		98		tya		                tya
197	.b052		9e 18 08	stz $0818,x	                stz $0818,x
198	.b055		9e ce 02	stz $02ce,x	                stz bufferEmptyFlags,x
199	.b058		9e 00 08	stz $0800,x	                stz $0800,x
200	.b05b		a0 03		ldy #$03	                ldy #$03
201	.b05d						loop:
202	.b05d		99 2c 08	sta $082c,y	                sta $082C,y
203	.b060		88		dey		                dey
204	.b061		10 fa		bpl $b05d	                bpl loop
205	.b063		8c 38 08	sty $0838	                sty $0838
206	.b066		80 63		bra $b0cb	                bra LF5DA
207							                .endblock

209							;-------------------------------------------------------------------------

211	.b068						LF577:
212	.b068		08		php		                php
213	.b069		78		sei		                sei
214	.b06a		bd 08 08	lda $0808,x	                lda $0808,x
215	.b06d		c9 04		cmp #$04	                cmp #$04
216	.b06f		d0 0a		bne $b07b	                bne LF58A
217	.b071		20 c1 e9	jsr $e9c1	                jsr mos.osbyte98
218	.b074		90 05		bcc $b07b	                bcc LF58A
219	.b076		a9 00		lda #$00	                lda #$00
220	.b078		9e 00 08	stz $0800,x	                stz $0800,x
221	.b07b						LF58A:
222	.b07b		28		plp		                plp
223	.b07c						LF58B:
224	.b07c		bc 20 08	ldy $0820,x	                ldy $0820,x
225	.b07f		c0 ff		cpy #$ff	                cpy #$FF
226	.b081		d0 72		bne $b0f5	                bne LF604

228							                ; https://tobylobster.github.io/mos/mos/S-s16.html#SP2
229	.b083						LF592:
230	.b083		a9 04		lda #$04	                lda #$04
231	.b085		9d 08 08	sta $0808,x	                sta $0808,x
232	.b088		a9 c0		lda #$c0	                lda #$C0
233	.b08a						LF599:
234	.b08a		9d 04 08	sta $0804,x	                sta $0804,x
235	.b08d		ac 62 02	ldy $0262	                ldy soundSuppressionStatus
236	.b090		f0 02		beq $b094	                beq LF5A3
237	.b092		a9 c0		lda #$c0	                lda #$C0
238	.b094						LF5A3:
239	.b094		38		sec		                sec
240	.b095		e9 40		sbc #$40	                sbc #$40
241	.b097		4a		lsr a		                lsr a
242	.b098		4a		lsr a		                lsr a
243	.b099		4a		lsr a		                lsr a
244	.b09a		49 0f		eor #$0f	                eor #$0F
245	.b09c		1d fc ae	ora $aefc,x	                ora soundParameterTable-bufferNumberSound0,x
246	.b09f		09 10		ora #$10	                ora #$10
247	.b0a1		80 34		bra $b0d7	                bra LF5E6

249	.b0a3						LF5B2:
250	.b0a3		20 c1 e9	jsr $e9c1	                jsr mos.osbyte98
251	.b0a6		b0 c0		bcs $b068	                bcs LF577
252	.b0a8		29 03		and #$03	                and #$03
253	.b0aa		f0 9f		beq $b04b	                beq LF55A
254	.b0ac		ad 38 08	lda $0838	                lda $0838
255	.b0af		f0 cb		beq $b07c	                beq LF58B
256	.b0b1		fe 28 08	inc $0828,x	                inc $0828,x
257	.b0b4		a8		tay		                tay
258	.b0b5		10 0a		bpl $b0c1	                bpl LF5D0
259	.b0b7		20 c1 e9	jsr $e9c1	                jsr mos.osbyte98
260	.b0ba		29 03		and #$03	                and #$03
261	.b0bc		8d 38 08	sta $0838	                sta $0838
262	.b0bf		80 bb		bra $b07c	                bra LF58B

264	.b0c1						LF5D0:
265	.b0c1		ce 38 08	dec $0838	                dec $0838
266	.b0c4		80 b6		bra $b07c	                bra LF58B

268	.b0c6						LF5D5:
269	.b0c6		dd 2c 08	cmp $082c,x	                cmp $082C,x
270	.b0c9		f0 2a		beq $b0f5	                beq LF604
271	.b0cb						LF5DA:
272	.b0cb		9d 2c 08	sta $082c,x	                sta $082C,x
273	.b0ce		e0 04		cpx #$04	                cpx #$04
274	.b0d0		d0 24		bne $b0f6	                bne LF605
275	.b0d2		29 0f		and #$0f	                and #$0F
276	.b0d4		1d fc ae	ora $aefc,x	                ora soundParameterTable-bufferNumberSound0,x
277	.b0d7						LF5E6:
278	.b0d7		08		php		                php
279	.b0d8						LF5E7:
280	.b0d8		78		sei		                sei
281	.b0d9		a0 ff		ldy #$ff	                ldy #$FF
282	.b0db		8c 43 fe	sty $fe43	                sty systemVIA.ddra
283	.b0de		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake
284	.b0e1		c8		iny		                iny
285	.b0e2		8c 40 fe	sty $fe40	                sty systemVIA.orb
286	.b0e5		a0 02		ldy #$02	                ldy #$02
287	.b0e7						LF5F6:
288	.b0e7		88		dey		                dey
289	.b0e8		d0 fd		bne $b0e7	                bne LF5F6
290	.b0ea		a0 08		ldy #$08	                ldy #$08
291	.b0ec		8c 40 fe	sty $fe40	                sty systemVIA.orb
292	.b0ef		a0 04		ldy #$04	                ldy #$04
293	.b0f1						LF600:
294	.b0f1		88		dey		                dey
295	.b0f2		d0 fd		bne $b0f1	                bne LF600
296	.b0f4		28		plp		                plp
297	.b0f5						LF604:
298	.b0f5		60		rts		                rts

300	.b0f6						LF605:
301	.b0f6		48		pha		                pha
302	.b0f7		29 03		and #$03	                and #$03
303	.b0f9		8d 3c 08	sta $083c	                sta $083C
304	.b0fc		9c 3d 08	stz $083d	                stz $083D
305	.b0ff		68		pla		                pla
306	.b100		4a		lsr a		                lsr a
307	.b101		4a		lsr a		                lsr a
308	.b102						LF611:
309	.b102		c9 0c		cmp #$0c	                cmp #$0C
310	.b104		90 07		bcc $b10d	                bcc LF61C
311	.b106		ee 3d 08	inc $083d	                inc $083D
312	.b109		e9 0c		sbc #$0c	                sbc #$0C
313	.b10b		d0 f5		bne $b102	                bne LF611
314	.b10d						LF61C:
315	.b10d		a8		tay		                tay
316	.b10e		ad 3d 08	lda $083d	                lda $083D
317	.b111		48		pha		                pha
318	.b112		b9 d4 b1	lda $b1d4,y	                lda LF6E4,y
319	.b115		8d 3d 08	sta $083d	                sta $083D
320	.b118		b9 e0 b1	lda $b1e0,y	                lda LF6F0,y
321	.b11b		48		pha		                pha
322	.b11c		29 03		and #$03	                and #$03
323	.b11e		8d 3e 08	sta $083e	                sta $083E
324	.b121		68		pla		                pla
325							                .if version==350
326	.b122		20 2e e5	jsr $e52e	                jsr mos.LE520
332							                .endif
333	.b125		8d 3f 08	sta $083f	                sta $083F
334	.b128		ad 3d 08	lda $083d	                lda $083D
335	.b12b		ac 3c 08	ldy $083c	                ldy $083C
336	.b12e		f0 0c		beq $b13c	                beq LF64C
337	.b130						LF640:
338	.b130		38		sec		                sec
339	.b131		ed 3f 08	sbc $083f	                sbc $083F
340	.b134		b0 03		bcs $b139	                bcs LF649
341	.b136		ce 3e 08	dec $083e	                dec $083E
342	.b139						LF649:
343	.b139		88		dey		                dey
344	.b13a		d0 f4		bne $b130	                bne LF640
345	.b13c						LF64C:
346	.b13c		8d 3d 08	sta $083d	                sta $083D
347	.b13f		68		pla		                pla
348	.b140		a8		tay		                tay
349	.b141		f0 09		beq $b14c	                beq LF65C
350	.b143						LF653:
351	.b143		4e 3e 08	lsr $083e	                lsr $083E
352	.b146		6e 3d 08	ror $083d	                ror $083D
353	.b149		88		dey		                dey
354	.b14a		d0 f7		bne $b143	                bne LF653
355	.b14c						LF65C:
356	.b14c		ad 3d 08	lda $083d	                lda $083D
357	.b14f		18		clc		                clc
358	.b150		7d 71 e1	adc $e171,x	                adc mos.LE165,x
359	.b153		8d 3d 08	sta $083d	                sta $083D
360	.b156		90 03		bcc $b15b	                bcc LF66B
361	.b158		ee 3e 08	inc $083e	                inc $083E
362	.b15b						LF66B:
363	.b15b		29 0f		and #$0f	                and #$0F
364	.b15d		1d fc ae	ora $aefc,x	                ora soundParameterTable-bufferNumberSound0,x
365	.b160		08		php		                php
366	.b161		78		sei		                sei
367	.b162		20 d7 b0	jsr $b0d7	                jsr LF5E6
368	.b165		ad 3d 08	lda $083d	                lda $083D
369	.b168		4e 3e 08	lsr $083e	                lsr $083E
370	.b16b		6a		ror a		                ror a
371	.b16c		4e 3e 08	lsr $083e	                lsr $083E
372	.b16f		6a		ror a		                ror a
373	.b170		4a		lsr a		                lsr a
374	.b171		4a		lsr a		                lsr a
375	.b172		4c d8 b0	jmp $b0d8	                jmp LF5E7

377	.b175						LF685:
378	.b175		08		php		                php
379	.b176		78		sei		                sei
380	.b177		20 c6 e9	jsr $e9c6	                jsr mos.osbyte91
381	.b17a		48		pha		                pha
382	.b17b		29 04		and #$04	                and #$04
383	.b17d		f0 13		beq $b192	                beq LF6A2
384	.b17f		68		pla		                pla
385	.b180		bc 20 08	ldy $0820,x	                ldy $0820,x
386	.b183		c8		iny		                iny
387	.b184		d0 03		bne $b189	                bne LF699
388	.b186		20 83 b0	jsr $b083	                jsr LF592
389	.b189						LF699:
390	.b189		20 c6 e9	jsr $e9c6	                jsr mos.osbyte91
391	.b18c		20 c6 e9	jsr $e9c6	                jsr mos.osbyte91
392	.b18f		28		plp		                plp
393	.b190		80 3e		bra $b1d0	                bra LF6E0

395	.b192						LF6A2:
396	.b192		68		pla		                pla
397	.b193		29 f8		and #$f8	                and #$F8
398	.b195		0a		asl a		                asl a
399	.b196		90 0b		bcc $b1a3	                bcc LF6B3
400	.b198		49 ff		eor #$ff	                eor #$FF
401	.b19a		4a		lsr a		                lsr a
402	.b19b		38		sec		                sec
403	.b19c		e9 40		sbc #$40	                sbc #$40
404	.b19e		20 8a b0	jsr $b08a	                jsr LF599
405	.b1a1		a9 ff		lda #$ff	                lda #$FF
406	.b1a3						LF6B3:
407	.b1a3		9d 20 08	sta $0820,x	                sta $0820,x
408	.b1a6		a9 05		lda #$05	                lda #$05
409	.b1a8		9d 1c 08	sta $081c,x	                sta $081C,x
410	.b1ab		a9 01		lda #$01	                lda #$01
411	.b1ad		9d 24 08	sta $0824,x	                sta $0824,x
412	.b1b0		9e 14 08	stz $0814,x	                stz $0814,x
413	.b1b3		9e 08 08	stz $0808,x	                stz $0808,x
414	.b1b6		9e 30 08	stz $0830,x	                stz $0830,x
415	.b1b9		a9 ff		lda #$ff	                lda #$FF
416	.b1bb		9d 10 08	sta $0810,x	                sta $0810,x
417	.b1be		20 c6 e9	jsr $e9c6	                jsr mos.osbyte91
418	.b1c1		9d 0c 08	sta $080c,x	                sta $080C,x
419	.b1c4		20 c6 e9	jsr $e9c6	                jsr mos.osbyte91
420	.b1c7		28		plp		                plp
421	.b1c8		48		pha		                pha
422	.b1c9		bd 0c 08	lda $080c,x	                lda $080C,x
423	.b1cc		20 c6 b0	jsr $b0c6	                jsr LF5D5
424	.b1cf		68		pla		                pla
425	.b1d0						LF6E0:
426	.b1d0		9d 18 08	sta $0818,x	                sta $0818,x
427	.b1d3		60		rts		                rts

429	.b1d4						LF6E4:
430	>b1d4		f0				                .byte $F0
431	>b1d5		b7				                .byte $B7
432	>b1d6		82				                .byte $82
433	>b1d7		4f				                .byte $4F
434	>b1d8		20				                .byte $20
435	>b1d9		f3				                .byte $F3
436	>b1da		c8				                .byte $C8
437	>b1db		a0				                .byte $A0
438	>b1dc		7b				                .byte $7B
439	>b1dd		57				                .byte $57
440	>b1de		35				                .byte $35
441	>b1df		16				                .byte $16
442	.b1e0						LF6F0:
443	>b1e0		e7				                .byte $E7
444	>b1e1		d7				                .byte $D7
445	>b1e2		cb				                .byte $CB
446	>b1e3		c3				                .byte $C3
447	>b1e4		b7				                .byte $B7
448	>b1e5		aa				                .byte $AA
449	>b1e6		a2				                .byte $A2
450	>b1e7		9a				                .byte $9a
451	>b1e8		92				                .byte $92
452	>b1e9		8a				                .byte $8a
453	>b1ea		82				                .byte $82
454	>b1eb		7a				                .byte $7a

:1	;******  Return to file: mosCFA3000.s65

31	>b1ec		ff ff ff ff ff ff ff		                .fill 7,255
32							                .include "src/ext.s65"

:6	;******  Processing file: src/ext.s65

1							; -*- comment-column:45; -*-

3	.b1f3						ext: .block

5	.b1f3						plotEllipseOutline:
6	.b1f3		20 3a b3	jsr $b33a	                jsr     LBB2F
7							                .if version<500
8	.b1f6		80 03		bra $b1fb	                bra     LBA08
11							                .endif

13	.b1f8						LBA05:
14	.b1f8		20 f4 b3	jsr $b3f4	                jsr     LBBE9

16	.b1fb						LBA08:
17	.b1fb		a2 34		ldx #$34	                ldx     #VDUVariables.workspace._34
18	.b1fd		a0 3c		ldy #$3c	                ldy     #VDUVariables.workspace._3C
19	.b1ff		20 cb d5	jsr $d5cb	                jsr     mos.sortVDUVariableWords
20							                .if version!=350
22							                .endif
23							                .if version<500&&version!=350
25							                .else
26	.b202		ad 39 03	lda $0339	                lda vduv.workspace._39
27							                .endif
28	.b205		8d 43 03	sta $0343	                sta     vduv.workspace._43
29							                .if version<500&&version!=350
32							                .else
33	.b208		ae 38 03	ldx $0338	                ldx vduv.workspace._38
34							                .endif

36	.b20b						LBA1B:
37	.b20b		8e 42 03	stx $0342	                stx     vduv.workspace._42
38	.b20e		20 2b b5	jsr $b52b	                jsr     LBD20
39	.b211		e8		inx		                inx
40	.b212		d0 03		bne $b217	                bne     LBA27
41	.b214		ee 43 03	inc $0343	                inc     vduv.workspace._43

43	.b217						LBA27:
44	.b217		8a		txa		                txa
45	.b218		d9 00 03	cmp $0300,y	                cmp     vduv+0,y
46	.b21b		ad 43 03	lda $0343	                lda     vduv.workspace._43
47	.b21e		f9 01 03	sbc $0301,y	                sbc     vduv+1,y
48	.b221		30 e8		bmi $b20b	                bmi     LBA1B
49							                .if version<500&&version!=350
78							                .else

80	.b223		ac 43 03	ldy $0343	                ldy vduv.workspace._43
81	.b226		8a		txa		                txa
82	.b227		d0 01		bne $b22a	                bne LAF06
83	.b229		88		dey		                dey
84	.b22a						LAF06:
85	.b22a		ca		dex		                dex
86	.b22b		8e 34 03	stx $0334	                stx vduv.workspace._34
87	.b22e		8c 35 03	sty $0335	                sty vduv.workspace._35
88	.b231		8a		txa		                txa
89	.b232		cd 3a 03	cmp $033a	                cmp vduv.workspace._3A
90	.b235		98		tya		                tya
91	.b236		ed 3b 03	sbc $033b	                sbc vduv.workspace._3B
92	.b239		10 30		bpl $b26b	                bpl LAF47
93	.b23b		a2 36		ldx #$36	                ldx #VDUVariables.workspace._36
94	.b23d		a0 3e		ldy #$3e	                ldy #VDUVariables.workspace._3E
95	.b23f		20 cb d5	jsr $d5cb	                jsr mos.sortVDUVariableWords
96	.b242		a0 34		ldy #$34	                ldy #VDUVariables.workspace._34
97	.b244		20 cb d5	jsr $d5cb	                jsr mos.sortVDUVariableWords
98	.b247		ad 3b 03	lda $033b	                lda vduv.workspace._3B
99	.b24a		8d 43 03	sta $0343	                sta vduv.workspace._43
100	.b24d		ad 3a 03	lda $033a	                lda vduv.workspace._3A
101	.b250		aa		tax		                tax
102	.b251						LAF2D:
103	.b251		8e 42 03	stx $0342	                stx vduv.workspace._42
104	.b254						LAF30:
105	.b254		20 2b b5	jsr $b52b	                jsr LBD20
106	.b257		8a		txa		                txa
107	.b258		d0 03		bne $b25d	                bne LAF39
108	.b25a		ce 43 03	dec $0343	                dec vduv.workspace._43

110	.b25d						LAF39:
111	.b25d		ca		dex		                dex
112	.b25e		18		clc		                clc
113	.b25f		8a		txa		                txa
114	.b260		f9 00 03	sbc $0300,y	                sbc vduv+0,y
115	.b263		ad 43 03	lda $0343	                lda vduv.workspace._43
116	.b266		f9 01 03	sbc $0301,y	                sbc vduv+1,y
117	.b269		10 e6		bpl $b251	                bpl LAF2D

119	.b26b						LAF47:
120	.b26b		ad 2f 03	lda $032f	                lda vduv.workspace._2F
121	.b26e		10 88		bpl $b1f8	                bpl LBA05
122							                .if version==350
123	.b270		80 14		bra $b286	                bra LBA7B
126							                .endif

128							                .endif

130	.b272						plotSolidEllipse:
131	.b272		20 3a b3	jsr $b33a	                jsr     LBB2F
132	.b275		80 03		bra $b27a	                bra     LBA6F


135	.b277						LBA6C:
136	.b277		20 f4 b3	jsr $b3f4	                jsr     LBBE9

138	.b27a						LBA6F:
139	.b27a		a2 3a		ldx #$3a	                ldx     #VDUVariables.workspace._3A
140	.b27c		a0 38		ldy #$38	                ldy     #VDUVariables.workspace._38
141	.b27e		20 92 b2	jsr $b292	                jsr     LBA87
142	.b281		ad 2f 03	lda $032f	                lda     vduv.workspace._2F
143	.b284		10 f1		bpl $b277	                bpl     LBA6C

145	.b286						LBA7B:
146	.b286		ee 4d 88	inc $884d	                inc     L884D
147	.b289		d0 03		bne $b28e	                bne     LBA83
148	.b28b		ee 4e 88	inc $884e	                inc     L884E

150	.b28e						LBA83:
151	.b28e		a2 3e		ldx #$3e	                ldx     #VDUVariables.workspace._3E
152	.b290		a0 3c		ldy #$3c	                ldy     #VDUVariables.workspace._3C




157	.b292						LBA87:



161	.b292		da		phx		                phx
162	.b293		5a		phy		                phy
163	.b294		18		clc		                clc
164	.b295		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
165	.b298		79 00 03	adc $0300,y	                adc     vduv+0,y
166	.b29b		8d 40 03	sta $0340	                sta     vduv.workspace._40
167	.b29e		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
168	.b2a1		79 01 03	adc $0301,y	                adc     vduv+1,y
169	.b2a4		8d 41 03	sta $0341	                sta     vduv.workspace._41
170	.b2a7		18		clc		                clc
171	.b2a8		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
172	.b2ab		7d 00 03	adc $0300,x	                adc     vduv+0,x
173	.b2ae		8d 44 03	sta $0344	                sta     vduv.workspace._44
174	.b2b1		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
175	.b2b4		7d 01 03	adc $0301,x	                adc     vduv+1,x
176	.b2b7		8d 45 03	sta $0345	                sta     vduv.workspace._45
177	.b2ba		18		clc		                clc
178	.b2bb		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
179	.b2be		6d 4d 88	adc $884d	                adc     L884D
180	.b2c1		a8		tay		                tay
181	.b2c2		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
182	.b2c5		6d 4e 88	adc $884e	                adc     L884E
183	.b2c8		20 09 b3	jsr $b309	                jsr     LBAFE
184	.b2cb		7a		ply		                ply
185	.b2cc		fa		plx		                plx
186	.b2cd		ad 4d 88	lda $884d	                lda     L884D
187	.b2d0		0d 4e 88	ora $884e	                ora     L884E
188	.b2d3		f0 47		beq $b31c	                beq     rtsBB11
189	.b2d5		38		sec		                sec
190	.b2d6		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
191	.b2d9		fd 00 03	sbc $0300,x	                sbc     vduv+0,x
192	.b2dc		8d 40 03	sta $0340	                sta     vduv.workspace._40
193	.b2df		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
194	.b2e2		fd 01 03	sbc $0301,x	                sbc     vduv+1,x
195	.b2e5		8d 41 03	sta $0341	                sta     vduv.workspace._41
196	.b2e8		38		sec		                sec
197	.b2e9		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
198	.b2ec		f9 00 03	sbc $0300,y	                sbc     vduv+0,y
199	.b2ef		8d 44 03	sta $0344	                sta     vduv.workspace._44
200	.b2f2		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
201	.b2f5		f9 01 03	sbc $0301,y	                sbc     vduv+1,y
202	.b2f8		8d 45 03	sta $0345	                sta     vduv.workspace._45
203	.b2fb		38		sec		                sec
204	.b2fc		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
205	.b2ff		ed 4d 88	sbc $884d	                sbc     L884D
206	.b302		a8		tay		                tay
207	.b303		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
208	.b306		ed 4e 88	sbc $884e	                sbc     L884E






215	.b309						LBAFE:
216	.b309		8c 46 03	sty $0346	                sty     vduv.workspace._46
217	.b30c		8c 42 03	sty $0342	                sty     vduv.workspace._42
218	.b30f		8d 47 03	sta $0347	                sta     vduv.workspace._47
219	.b312		8d 43 03	sta $0343	                sta     vduv.workspace._43
220	.b315		a2 44		ldx #$44	                ldx     #VDUVariables.workspace._44
221	.b317		a0 40		ldy #$40	                ldy     #VDUVariables.workspace._40
222	.b319		4c e7 da	jmp $dae7	                jmp     mos.LDAE8





228	.b31c						rtsBB11:
229	.b31c		60		rts		                rts




234	.b31d						LBB12:
235	.b31d		68		pla		                pla
236	.b31e		68		pla		                pla
237	.b31f		9c 4d 88	stz $884d	                stz     L884D
238	.b322		9c 4e 88	stz $884e	                stz     L884E
239	.b325		a2 29		ldx #$29	                ldx     #VDUVariables.workspace._29
240	.b327		a0 40		ldy #$40	                ldy     #VDUVariables.workspace._40
241	.b329		20 05 b6	jsr $b605	                jsr     LBDFA
242	.b32c		a2 29		ldx #$29	                ldx     #VDUVariables.workspace._29
243	.b32e		a0 44		ldy #$44	                ldy     #VDUVariables.workspace._44
244	.b330		20 0c c9	jsr $c90c	                jsr     mos.copyTwoBytesWithinVDUVariables
245	.b333		a2 44		ldx #$44	                ldx     #VDUVariables.workspace._44
246	.b335		a0 40		ldy #$40	                ldy     #VDUVariables.workspace._40
247	.b337		4c 92 b2	jmp $b292	                jmp     LBA87





253	.b33a						LBB2F:



257	.b33a		a0 24		ldy #$24	                ldy     #VDUVariables.graphicsCursorPixelsX
258	.b33c		a2 14		ldx #$14	                ldx     #VDUVariables.oldGraphicsCursorPixelsX
259	.b33e		a9 29		lda #$29	                lda     #VDUVariables.workspace._29
260	.b340		20 77 d6	jsr $d677	                jsr     mos.LD678
261	.b343		9c 28 03	stz $0328	                stz     vduv.workspace._28
262	.b346		a0 22		ldy #$22	                ldy     #VDUVariables.queueEnd-2
263	.b348		a2 16		ldx #$16	                ldx     #VDUVariables.oldGraphicsCursorPixelsY
264	.b34a		a9 2e		lda #$2e	                lda     #VDUVariables.workspace._2E
265	.b34c		20 77 d6	jsr $d677	                jsr     mos.LD678
266	.b34f		ad 2e 03	lda $032e	                lda     vduv.workspace._2E
267	.b352		0d 2f 03	ora $032f	                ora     vduv.workspace._2F
268	.b355		f0 c6		beq $b31d	                beq     LBB12
269	.b357		2a		rol a		                rol     a
270	.b358		8d 41 88	sta $8841	                sta     L8841
271	.b35b		a0 20		ldy #$20	                ldy     #VDUVariables.queueEnd-4
272	.b35d		a2 14		ldx #$14	                ldx     #VDUVariables.oldGraphicsCursorPixelsX
273	.b35f		a9 2c		lda #$2c	                lda     #VDUVariables.workspace._2C
274	.b361		20 77 d6	jsr $d677	                jsr     mos.LD678
275	.b364		9c 2b 03	stz $032b	                stz     vduv.workspace._2B
276	.b367		2a		rol a		                rol     a
277	.b368		4d 41 88	eor $8841	                eor     L8841
278	.b36b		29 01		and #$01	                and     #1
279	.b36d		8d 41 88	sta $8841	                sta     L8841
280	.b370		a2 28		ldx #$28	                ldx     #VDUVariables.workspace._28
281	.b372		a0 2e		ldy #$2e	                ldy     #VDUVariables.workspace._2E
282	.b374		20 8e b5	jsr $b58e	                jsr     LBD83
283	.b377		a2 2b		ldx #$2b	                ldx     #VDUVariables.workspace._2B
284	.b379		a0 2e		ldy #$2e	                ldy     #VDUVariables.workspace._2E
285	.b37b		20 8e b5	jsr $b58e	                jsr     LBD83
286	.b37e		ad 41 88	lda $8841	                lda     L8841
287	.b381		f0 0e		beq $b391	                beq     LBB86
288	.b383		38		sec		                sec
289	.b384		a0 fd		ldy #$fd	                ldy     #$fd

291	.b386						LBB7B:
292	.b386		a9 00		lda #$00	                lda     #0
293	.b388		f9 2e 02	sbc $022e,y	                sbc     vduv.workspace._2B-$fd,y
294	.b38b		99 2e 02	sta $022e,y	                sta     vduv.workspace._2B-$fd,y
295	.b38e		c8		iny		                iny
296	.b38f		d0 f5		bne $b386	                bne     LBB7B

298	.b391						LBB86:
299	.b391		ad 2e 03	lda $032e	                lda     vduv.workspace._2E
300	.b394		8d 3c 88	sta $883c	                sta     L883C
301	.b397		ad 2f 03	lda $032f	                lda     vduv.workspace._2F
302	.b39a		20 cd d4	jsr $d4cd	                jsr     mos.LD4CE
303	.b39d		a0 03		ldy #$03	                ldy     #3

305	.b39f						LBB94:
306	.b39f		b9 40 88	lda $8840,y	                lda     $8840,y
307	.b3a2		99 30 03	sta $0330,y	                sta     vduv.workspace._30,y
308	.b3a5		88		dey		                dey
309	.b3a6		10 f7		bpl $b39f	                bpl     LBB94
310	.b3a8		a2 0a		ldx #$0a	                ldx     #$a

312	.b3aa						LBB9F:
313	.b3aa		9e 42 88	stz $8842,x	                stz     $8842,x
314	.b3ad		ca		dex		                dex
315	.b3ae		10 fa		bpl $b3aa	                bpl     LBB9F
316	.b3b0		ee 45 88	inc $8845	                inc     L8845
317	.b3b3		20 23 b4	jsr $b423	                jsr     LBC18
318	.b3b6		20 23 b4	jsr $b423	                jsr     LBC18
319	.b3b9		9c 4d 88	stz $884d	                stz     L884D
320	.b3bc		9c 4e 88	stz $884e	                stz     L884E
321	.b3bf		a2 3c		ldx #$3c	                ldx     #VDUVariables.workspace._3C
322	.b3c1		a0 36		ldy #$36	                ldy     #VDUVariables.workspace._36
323	.b3c3		20 05 b6	jsr $b605	                jsr     LBDFA
324	.b3c6		a2 3e		ldx #$3e	                ldx     #VDUVariables.workspace._3E
325	.b3c8		a0 34		ldy #$34	                ldy     #VDUVariables.workspace._34
326	.b3ca		20 05 b6	jsr $b605	                jsr     LBDFA
327	.b3cd		a2 3c		ldx #$3c	                ldx     #VDUVariables.workspace._3C
328	.b3cf		a0 3a		ldy #$3a	                ldy     #VDUVariables.workspace._3A
329	.b3d1		20 d5 d5	jsr $d5d5	                jsr     mos.compareVDUVariableWords
330	.b3d4		10 07		bpl $b3dd	                bpl     LBBD2
331	.b3d6		20 0c c9	jsr $c90c	                jsr     mos.copyTwoBytesWithinVDUVariables
332	.b3d9		a2 36		ldx #$36	                ldx     #VDUVariables.workspace._36
333	.b3db		80 12		bra $b3ef	                bra     LBBE4


336	.b3dd						LBBD2:
337	.b3dd		a2 38		ldx #$38	                ldx     #VDUVariables.workspace._38
338	.b3df		a0 3e		ldy #$3e	                ldy     #VDUVariables.workspace._3E
339	.b3e1		20 d5 d5	jsr $d5d5	                jsr     mos.compareVDUVariableWords
340	.b3e4		10 3c		bpl $b422	                bpl     rtsBC17
341	.b3e6		a2 34		ldx #$34	                ldx     #VDUVariables.workspace._34
342	.b3e8		a0 3a		ldy #$3a	                ldy     #VDUVariables.workspace._3A
343	.b3ea		20 0c c9	jsr $c90c	                jsr     mos.copyTwoBytesWithinVDUVariables
344	.b3ed		a2 3e		ldx #$3e	                ldx     #VDUVariables.workspace._3E

346	.b3ef						LBBE4:
347	.b3ef		a0 38		ldy #$38	                ldy     #VDUVariables.workspace._38
348	.b3f1		4c 0c c9	jmp $c90c	                jmp     mos.copyTwoBytesWithinVDUVariables






355	.b3f4						LBBE9:

357	.b3f4		20 23 b4	jsr $b423	                jsr     LBC18
358	.b3f7		a0 3a		ldy #$3a	                ldy     #VDUVariables.workspace._3A
359	.b3f9		a2 3c		ldx #$3c	                ldx     #VDUVariables.workspace._3C
360	.b3fb		20 d5 d5	jsr $d5d5	                jsr     mos.compareVDUVariableWords
361	.b3fe		10 0d		bpl $b40d	                bpl     LBC02
362	.b400		ad 3c 03	lda $033c	                lda     vduv.workspace._3C
363	.b403		8d 3a 03	sta $033a	                sta     vduv.workspace._3A
364	.b406		ad 3d 03	lda $033d	                lda     vduv.workspace._3D
365	.b409		8d 3b 03	sta $033b	                sta     vduv.workspace._3B
366	.b40c		60		rts		                rts


369	.b40d						LBC02:
370	.b40d		a2 38		ldx #$38	                ldx     #VDUVariables.workspace._38
371	.b40f		a0 3e		ldy #$3e	                ldy     #VDUVariables.workspace._3E
372	.b411		20 d5 d5	jsr $d5d5	                jsr     mos.compareVDUVariableWords
373	.b414		10 0c		bpl $b422	                bpl     rtsBC17
374	.b416		ad 3e 03	lda $033e	                lda     vduv.workspace._3E
375	.b419		8d 38 03	sta $0338	                sta     vduv.workspace._38
376	.b41c		ad 3f 03	lda $033f	                lda     vduv.workspace._3F
377	.b41f		8d 39 03	sta $0339	                sta     vduv.workspace._39

379	.b422						rtsBC17:
380	.b422		60		rts		                rts






387	.b423						LBC18:
388	.b423		a2 38		ldx #$38	                ldx     #VDUVariables.workspace._38
389	.b425		a0 34		ldy #$34	                ldy     #VDUVariables.workspace._34
390	.b427		20 1e c9	jsr $c91e	                jsr     mos.copyFourBytesWithinVDUVariables
391	.b42a		a2 3c		ldx #$3c	                ldx     #VDUVariables.workspace._3C
392	.b42c		a0 38		ldy #$38	                ldy     #VDUVariables.workspace._38
393	.b42e		20 1e c9	jsr $c91e	                jsr     mos.copyFourBytesWithinVDUVariables
394	.b431		38		sec		                sec
395	.b432		ad 30 03	lda $0330	                lda     vduv.workspace._30
396	.b435		ed 49 88	sbc $8849	                sbc     L8849
397	.b438		8d 36 88	sta $8836	                sta     L8836
398	.b43b		ad 31 03	lda $0331	                lda     vduv.workspace._31
399	.b43e		ed 4a 88	sbc $884a	                sbc     L884A
400	.b441		8d 37 88	sta $8837	                sta     L8837
401	.b444		ad 32 03	lda $0332	                lda     vduv.workspace._32
402	.b447		ed 4b 88	sbc $884b	                sbc     L884B
403	.b44a		8d 38 88	sta $8838	                sta     L8838
404	.b44d		ad 33 03	lda $0333	                lda     vduv.workspace._33
405	.b450		ed 4c 88	sbc $884c	                sbc     L884C
406	.b453		8d 39 88	sta $8839	                sta     L8839
407	.b456		9c 35 88	stz $8835	                stz     L8835
408	.b459		9c 34 88	stz $8834	                stz     L8834
409	.b45c		20 56 b6	jsr $b656	                jsr     LBE4B
410	.b45f		ad 28 03	lda $0328	                lda     vduv.workspace._28
411	.b462		8d 34 88	sta $8834	                sta     L8834
412	.b465		ad 29 03	lda $0329	                lda     vduv.workspace._29
413	.b468		8d 35 88	sta $8835	                sta     L8835
414	.b46b		ad 2a 03	lda $032a	                lda     vduv.workspace._2A
415	.b46e		8d 36 88	sta $8836	                sta     L8836
416	.b471		20 17 b6	jsr $b617	                jsr     LBE0C
417	.b474		18		clc		                clc
418	.b475		ad 42 88	lda $8842	                lda     L8842
419	.b478		6d 35 88	adc $8835	                adc     L8835
420	.b47b		08		php		                php
421	.b47c		ad 43 88	lda $8843	                lda     L8843
422	.b47f		6d 36 88	adc $8836	                adc     L8836
423	.b482		8d 3e 03	sta $033e	                sta     vduv.workspace._3E
424	.b485		ad 44 88	lda $8844	                lda     L8844
425	.b488		6d 37 88	adc $8837	                adc     L8837
426	.b48b		8d 3f 03	sta $033f	                sta     vduv.workspace._3F
427	.b48e		28		plp		                plp
428	.b48f		10 08		bpl $b499	                bpl     LBC8E
429	.b491		ee 3e 03	inc $033e	                inc     vduv.workspace._3E
430	.b494		d0 03		bne $b499	                bne     LBC8E
431	.b496		ee 3f 03	inc $033f	                inc     vduv.workspace._3F

433	.b499						LBC8E:
434	.b499		38		sec		                sec
435	.b49a		ad 42 88	lda $8842	                lda     L8842
436	.b49d		ed 35 88	sbc $8835	                sbc     L8835
437	.b4a0		08		php		                php
438	.b4a1		ad 43 88	lda $8843	                lda     L8843
439	.b4a4		ed 36 88	sbc $8836	                sbc     L8836
440	.b4a7		8d 3c 03	sta $033c	                sta     vduv.workspace._3C
441	.b4aa		ad 44 88	lda $8844	                lda     L8844
442	.b4ad		ed 37 88	sbc $8837	                sbc     L8837
443	.b4b0		8d 3d 03	sta $033d	                sta     vduv.workspace._3D
444	.b4b3		28		plp		                plp
445	.b4b4		10 08		bpl $b4be	                bpl     LBCB3
446	.b4b6		ee 3c 03	inc $033c	                inc     vduv.workspace._3C
447	.b4b9		d0 03		bne $b4be	                bne     LBCB3
448	.b4bb		ee 3d 03	inc $033d	                inc     vduv.workspace._3D

450	.b4be						LBCB3:
451	.b4be		18		clc		                clc
452	.b4bf		ad 45 88	lda $8845	                lda     L8845
453	.b4c2		6d 49 88	adc $8849	                adc     L8849
454	.b4c5		8d 49 88	sta $8849	                sta     L8849
455	.b4c8		ad 46 88	lda $8846	                lda     L8846
456	.b4cb		6d 4a 88	adc $884a	                adc     L884A
457	.b4ce		8d 4a 88	sta $884a	                sta     L884A
458	.b4d1		ad 47 88	lda $8847	                lda     L8847
459	.b4d4		6d 4b 88	adc $884b	                adc     L884B
460	.b4d7		8d 4b 88	sta $884b	                sta     L884B
461	.b4da		ad 48 88	lda $8848	                lda     L8848
462	.b4dd		6d 4c 88	adc $884c	                adc     L884C
463	.b4e0		8d 4c 88	sta $884c	                sta     L884C
464	.b4e3		18		clc		                clc
465	.b4e4		a9 02		lda #$02	                lda     #2
466	.b4e6		6d 45 88	adc $8845	                adc     L8845
467	.b4e9		8d 45 88	sta $8845	                sta     L8845
468	.b4ec		90 0d		bcc $b4fb	                bcc     LBCF0
469	.b4ee		ee 46 88	inc $8846	                inc     L8846
470	.b4f1		d0 08		bne $b4fb	                bne     LBCF0
471	.b4f3		ee 47 88	inc $8847	                inc     L8847
472	.b4f6		d0 03		bne $b4fb	                bne     LBCF0
473	.b4f8		ee 48 88	inc $8848	                inc     L8848

475	.b4fb						LBCF0:
476	.b4fb		18		clc		                clc
477	.b4fc		ad 42 88	lda $8842	                lda     L8842
478	.b4ff		6d 2b 03	adc $032b	                adc     vduv.workspace._2B
479	.b502		8d 42 88	sta $8842	                sta     L8842
480	.b505		ad 43 88	lda $8843	                lda     L8843
481	.b508		6d 2c 03	adc $032c	                adc     vduv.workspace._2C
482	.b50b		8d 43 88	sta $8843	                sta     L8843
483	.b50e		ad 44 88	lda $8844	                lda     L8844
484	.b511		6d 2d 03	adc $032d	                adc     vduv.workspace._2D
485	.b514		8d 44 88	sta $8844	                sta     L8844
486	.b517		ee 4d 88	inc $884d	                inc     L884D
487	.b51a		d0 03		bne $b51f	                bne     LBD14
488	.b51c		ee 4e 88	inc $884e	                inc     L884E

490	.b51f						LBD14:
491	.b51f		ad 2e 03	lda $032e	                lda     vduv.workspace._2E
492	.b522		d0 03		bne $b527	                bne     LBD1C
493	.b524		ce 2f 03	dec $032f	                dec     vduv.workspace._2F

495	.b527						LBD1C:
496	.b527		ce 2e 03	dec $032e	                dec     vduv.workspace._2E
497	.b52a		60		rts		                rts






504	.b52b						LBD20:
505	.b52b		da		phx		                phx
506	.b52c		5a		phy		                phy
507	.b52d		18		clc		                clc
508	.b52e		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
509	.b531		6d 42 03	adc $0342	                adc     vduv.workspace._42
510	.b534		8d 44 03	sta $0344	                sta     vduv.workspace._44
511	.b537		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
512	.b53a		6d 43 03	adc $0343	                adc     vduv.workspace._43
513	.b53d		8d 45 03	sta $0345	                sta     vduv.workspace._45
514	.b540		18		clc		                clc
515	.b541		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
516	.b544		6d 4d 88	adc $884d	                adc     L884D
517	.b547		8d 46 03	sta $0346	                sta     vduv.workspace._46
518	.b54a		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
519	.b54d		6d 4e 88	adc $884e	                adc     L884E
520	.b550		8d 47 03	sta $0347	                sta     vduv.workspace._47
521	.b553		a2 44		ldx #$44	                ldx     #VDUVariables.workspace._44
522	.b555		20 4b db	jsr $db4b	                jsr     mos.LDB4C
523	.b558		ad 4d 88	lda $884d	                lda     L884D
524	.b55b		0d 4e 88	ora $884e	                ora     L884E
525	.b55e		f0 2b		beq $b58b	                beq     LBD80
526	.b560		38		sec		                sec
527	.b561		ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
528	.b564		ed 42 03	sbc $0342	                sbc     vduv.workspace._42
529	.b567		8d 44 03	sta $0344	                sta     vduv.workspace._44
530	.b56a		ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
531	.b56d		ed 43 03	sbc $0343	                sbc     vduv.workspace._43
532	.b570		8d 45 03	sta $0345	                sta     vduv.workspace._45
533	.b573		38		sec		                sec
534	.b574		ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
535	.b577		ed 4d 88	sbc $884d	                sbc     L884D
536	.b57a		8d 46 03	sta $0346	                sta     vduv.workspace._46
537	.b57d		ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
538	.b580		ed 4e 88	sbc $884e	                sbc     L884E
539	.b583		8d 47 03	sta $0347	                sta     vduv.workspace._47
540	.b586		a2 44		ldx #$44	                ldx     #VDUVariables.workspace._44
541	.b588		20 4b db	jsr $db4b	                jsr     mos.LDB4C

543	.b58b						LBD80:
544	.b58b		7a		ply		                ply
545	.b58c		fa		plx		                plx
546	.b58d		60		rts		                rts






553	.b58e						LBD83:
554	.b58e		da		phx		                phx
555	.b58f		b9 00 03	lda $0300,y	                lda     vduv+0,y
556	.b592		8d 3f 88	sta $883f	                sta     L883F
557	.b595		b9 01 03	lda $0301,y	                lda     vduv+1,y
558	.b598		8d 40 88	sta $8840	                sta     L8840
559	.b59b		a0 18		ldy #$18	                ldy     #$18 ;not VDUVariables.textCursorXPosition?
560	.b59d		bd 00 03	lda $0300,x	                lda     vduv+0,x
561	.b5a0		8d 3a 88	sta $883a	                sta     L883A
562	.b5a3		bd 01 03	lda $0301,x	                lda     vduv+1,x
563	.b5a6		8d 3b 88	sta $883b	                sta     L883B
564	.b5a9		bd 02 03	lda $0302,x	                lda     vduv+2,x
565	.b5ac		30 0c		bmi $b5ba	                bmi     LBDAF

567	.b5ae						LBDA3:
568	.b5ae		88		dey		                dey
569	.b5af		f0 52		beq $b603	                beq     LBDF8
570	.b5b1		0e 3a 88	asl $883a	                asl     L883A
571	.b5b4		2e 3b 88	rol $883b	                rol     L883B
572	.b5b7		2a		rol a		                rol     a
573	.b5b8		10 f4		bpl $b5ae	                bpl     LBDA3

575	.b5ba						LBDAF:
576	.b5ba		8d 3c 88	sta $883c	                sta     L883C
577	.b5bd		9c 3d 88	stz $883d	                stz     L883D
578	.b5c0		9c 3e 88	stz $883e	                stz     L883E
579	.b5c3		18		clc		                clc

581	.b5c4						LBDB9:
582	.b5c4		2e 3a 88	rol $883a	                rol     L883A
583	.b5c7		2e 3b 88	rol $883b	                rol     L883B
584	.b5ca		2e 3c 88	rol $883c	                rol     L883C
585	.b5cd		2e 3d 88	rol $883d	                rol     L883D
586	.b5d0		2e 3e 88	rol $883e	                rol     L883E
587	.b5d3		38		sec		                sec
588	.b5d4		ad 3d 88	lda $883d	                lda     L883D
589	.b5d7		ed 3f 88	sbc $883f	                sbc     L883F
590	.b5da		aa		tax		                tax
591	.b5db		ad 3e 88	lda $883e	                lda     L883E
592	.b5de		ed 40 88	sbc $8840	                sbc     L8840
593	.b5e1		90 06		bcc $b5e9	                bcc     LBDDE
594	.b5e3		8e 3d 88	stx $883d	                stx     L883D
595	.b5e6		8d 3e 88	sta $883e	                sta     L883E

597	.b5e9						LBDDE:
598	.b5e9		88		dey		                dey
599	.b5ea		d0 d8		bne $b5c4	                bne     LBDB9
600	.b5ec		fa		plx		                plx
601	.b5ed		ad 3a 88	lda $883a	                lda     L883A
602	.b5f0		2a		rol a		                rol     a
603	.b5f1		9d 00 03	sta $0300,x	                sta     vduv+0,x
604	.b5f4		ad 3b 88	lda $883b	                lda     L883B
605	.b5f7		2a		rol a		                rol     a
606	.b5f8		9d 01 03	sta $0301,x	                sta     vduv+1,x
607	.b5fb		ad 3c 88	lda $883c	                lda     L883C
608	.b5fe		2a		rol a		                rol     a
609	.b5ff		9d 02 03	sta $0302,x	                sta     vduv+2,x
610	.b602		60		rts		                rts


613	.b603						LBDF8:
614	.b603		fa		plx		                plx
615	.b604		60		rts		                rts






622	.b605						LBDFA:
623	.b605		38		sec		                sec
624	.b606		a9 00		lda #$00	                lda     #0
625	.b608		fd 00 03	sbc $0300,x	                sbc     vduv+0,x
626	.b60b		99 00 03	sta $0300,y	                sta     vduv+0,y
627	.b60e		a9 00		lda #$00	                lda     #0
628	.b610		fd 01 03	sbc $0301,x	                sbc     vduv+1,x
629	.b613		99 01 03	sta $0301,y	                sta     vduv+1,y
630	.b616		60		rts		                rts






637	.b617						LBE0C:
638	.b617		a0 17		ldy #$17	                ldy     #$17
639	.b619		9c 39 88	stz $8839	                stz     L8839
640	.b61c		9c 38 88	stz $8838	                stz     L8838
641	.b61f		9c 37 88	stz $8837	                stz     L8837
642	.b622		4e 36 88	lsr $8836	                lsr     L8836
643	.b625		6e 35 88	ror $8835	                ror     L8835
644	.b628		6e 34 88	ror $8834	                ror     L8834

646	.b62b						LBE20:
647	.b62b		90 1c		bcc $b649	                bcc     LBE3E
648	.b62d		18		clc		                clc
649	.b62e		ad 30 88	lda $8830	                lda     L8830
650	.b631		6d 37 88	adc $8837	                adc     L8837
651	.b634		8d 37 88	sta $8837	                sta     L8837
652	.b637		ad 31 88	lda $8831	                lda     L8831
653	.b63a		6d 38 88	adc $8838	                adc     L8838
654	.b63d		8d 38 88	sta $8838	                sta     L8838
655	.b640		ad 32 88	lda $8832	                lda     L8832
656	.b643		6d 39 88	adc $8839	                adc     L8839
657	.b646		8d 39 88	sta $8839	                sta     L8839

659	.b649						LBE3E:
660	.b649		18		clc		                clc
661	.b64a		a2 05		ldx #$05	                ldx     #5

663	.b64c						LBE41:
664	.b64c		7e 34 88	ror $8834,x	                ror     $8834,x
665	.b64f		ca		dex		                dex
666	.b650		10 fa		bpl $b64c	                bpl     LBE41
667	.b652		88		dey		                dey
668	.b653		10 d6		bpl $b62b	                bpl     LBE20
669	.b655		60		rts		                rts






676	.b656						LBE4B:
677	.b656		a2 03		ldx #$03	                ldx     #3

679	.b658						LBE4D:
680	.b658		9e 30 88	stz $8830,x	                stz     $8830,x
681	.b65b		74 dc		stz $dc,x	                stz     ZTEMPB,x
682	.b65d		ca		dex		                dex
683	.b65e		10 f8		bpl $b658	                bpl     LBE4D
684	.b660		a0 05		ldy #$05	                ldy     #5

686	.b662						LBE57:
687	.b662		b9 34 88	lda $8834,y	                lda     $8834,y
688	.b665		85 da		sta $da		                sta     ZTEMP+0
689	.b667		5a		phy		                phy
690	.b668		a0 03		ldy #$03	                ldy     #3

692	.b66a						LBE5F:
693	.b66a		5a		phy		                phy
694	.b66b		38		sec		                sec
695	.b66c		2e 30 88	rol $8830	                rol     L8830
696	.b66f		2e 31 88	rol $8831	                rol     L8831
697	.b672		2e 32 88	rol $8832	                rol     L8832
698	.b675		2e 33 88	rol $8833	                rol     L8833
699	.b678		a2 01		ldx #$01	                ldx     #1
700	.b67a		a5 dc		lda $dc		                lda     ZTEMPB+0

702	.b67c						LBE71:
703	.b67c		06 da		asl $da		                asl     ZTEMP+0
704	.b67e		2a		rol a		                rol     a
705	.b67f		26 dd		rol $dd		                rol     ZTEMPB+1
706	.b681		26 de		rol $de		                rol     ZTEMPC+0
707	.b683		26 df		rol $df		                rol     ZTEMPC+1
708	.b685		ca		dex		                dex
709	.b686		10 f4		bpl $b67c	                bpl     LBE71
710	.b688		85 dc		sta $dc		                sta     ZTEMPB+0
711	.b68a		38		sec		                sec
712	.b68b		ed 30 88	sbc $8830	                sbc     L8830
713	.b68e		48		pha		                pha
714	.b68f		a5 dd		lda $dd		                lda     ZTEMPB+1
715	.b691		ed 31 88	sbc $8831	                sbc     L8831
716	.b694		aa		tax		                tax
717	.b695		a5 de		lda $de		                lda     ZTEMPC+0
718	.b697		ed 32 88	sbc $8832	                sbc     L8832
719	.b69a		a8		tay		                tay
720	.b69b		a5 df		lda $df		                lda     ZTEMPC+1
721	.b69d		ed 33 88	sbc $8833	                sbc     L8833
722	.b6a0		90 0e		bcc $b6b0	                bcc     LBEA5
723	.b6a2		85 df		sta $df		                sta     ZTEMPC+1
724	.b6a4		84 de		sty $de		                sty     ZTEMPC+0
725	.b6a6		86 dd		stx $dd		                stx     ZTEMPB+1
726	.b6a8		68		pla		                pla
727	.b6a9		85 dc		sta $dc		                sta     ZTEMPB+0
728	.b6ab		ee 30 88	inc $8830	                inc     L8830
729	.b6ae		80 04		bra $b6b4	                bra     LBEA9


732	.b6b0						LBEA5:
733	.b6b0		68		pla		                pla
734	.b6b1		ce 30 88	dec $8830	                dec     L8830

736	.b6b4						LBEA9:
737	.b6b4		7a		ply		                ply
738	.b6b5		88		dey		                dey
739	.b6b6		10 b2		bpl $b66a	                bpl     LBE5F
740	.b6b8		7a		ply		                ply
741	.b6b9		88		dey		                dey
742	.b6ba		10 a6		bpl $b662	                bpl     LBE57
743	.b6bc		4e 33 88	lsr $8833	                lsr     L8833
744	.b6bf		6e 32 88	ror $8832	                ror     L8832
745	.b6c2		6e 31 88	ror $8831	                ror     L8831
746	.b6c5		6e 30 88	ror $8830	                ror     L8830
747	.b6c8		60		rts		                rts

749							;-------------------------------------------------------------------------
750							;
751							; 184â<80><93>191 = Move/copy rectangle [MasRef E.3-31]
752							;
753							; The normal interpretation of <p> does not apply in this group of
754							; plot codes and the meanings are as follows:
755							;
756							; 184, 185 - %1011100x - Move rectangle, relative
757							; 186, 187 - %1011101x - Copy rectangle, relative
758							; 188, 189 - %1011110x - Move rectangle, absolute
759							; 190, 191 - %1011111x - Copy rectangle, absolute
760							;
761	.b6c9						plotMoveOrCopyRectangle:
762	.b6c9		29 02		and #$02	                and     #2
763	.b6cb		8d 45 03	sta $0345	                sta     vduv.mocr.copy

765	.b6ce		20 51 c9	jsr $c951	                jsr     mos.prepareForPlotBackground

767	.b6d1		a2 14		ldx #$14	                ldx     #VDUVariables.oldGraphicsCursorPixels
768	.b6d3		20 e6 c8	jsr $c8e6	                jsr     mos.prepareAABB

770							                ; mocr.dest.min = PLOT coordinate
771	.b6d6		a0 34		ldy #$34	                ldy     #VDUVariables.mocr.dest.min
772	.b6d8		20 16 c9	jsr $c916	                jsr     mos.copyLastFourVDUQueueBytes
773	.b6db		84 da		sty $da		                sty     ZTEMP+0              ;Y=VDUVariables.mocr.dest.max

775							                ; dest.max = dest.min + (src.max - src.min)
776	.b6dd		a2 34		ldx #$34	                ldx     #VDUVariables.mocr.dest.min
777	.b6df		a0 2c		ldy #$2c	                ldy     #VDUVariables.mocr.src.max
778	.b6e1		a9 28		lda #$28	                lda     #VDUVariables.mocr.src.min
779	.b6e3		20 7f d5	jsr $d57f	                jsr     mos.addRegionDimensionsToVDUVariableCoordinates

781							                ;
782	.b6e6		a2 28		ldx #$28	                ldx     #VDUVariables.mocr.src.min
783	.b6e8		a0 34		ldy #$34	                ldy     #VDUVariables.mocr.dest
784	.b6ea		20 cb d5	jsr $d5cb	                jsr     mos.sortVDUVariableWords

786	.b6ed		5a		phy		                phy
787	.b6ee		da		phx		                phx
788	.b6ef		a0 00		ldy #$00	                ldy     #0                   ;get outcode for X axis
789	.b6f1		20 b6 d1	jsr $d1b6	                jsr     mos.getOutcodeForAxis
790	.b6f4		f0 08		beq $b6fe	                beq     LBEF3                ;taken if
791	.b6f6		4a		lsr a		                lsr     a
792	.b6f7		f0 03		beq $b6fc	                beq     LBEF1
793	.b6f9		68		pla		                pla

795	.b6fa						LBEEF:
796	.b6fa		68		pla		                pla
797	.b6fb		60		rts		                rts


800	.b6fc						LBEF1:
801	.b6fc		a2 00		ldx #$00	                ldx     #0

803	.b6fe						LBEF3:
804	.b6fe		68		pla		                pla

806	.b6ff		a0 30		ldy #$30	                ldy     #VDUVariables.workspace._30
807	.b701		84 da		sty $da		                sty     ZTEMP+0
808	.b703		a0 28		ldy #$28	                ldy     #VDUVariables.mocr.src.min
809	.b705		20 8c d5	jsr $d58c	                jsr     mos.addRegionDimensionToVDUVariableCoordinate

811	.b708		a0 3c		ldy #$3c	                ldy     #VDUVariables.workspace._3C
812	.b70a		84 da		sty $da		                sty     ZTEMP+0

814	.b70c		a0 34		ldy #$34	                ldy     #VDUVariables.mocr.dest.min
815	.b70e		20 8c d5	jsr $d58c	                jsr     mos.addRegionDimensionToVDUVariableCoordinate

817	.b711		68		pla		                pla
818	.b712		18		clc		                clc
819	.b713		69 04		adc #$04	                adc     #4
820	.b715		aa		tax		                tax
821	.b716		da		phx		                phx
822	.b717		a0 00		ldy #$00	                ldy     #0
823	.b719		20 b6 d1	jsr $d1b6	                jsr     mos.getOutcodeForAxis
824	.b71c		f0 05		beq $b723	                beq     LBF18
825	.b71e		4a		lsr a		                lsr     a
826	.b71f		f0 d9		beq $b6fa	                beq     LBEEF
827	.b721		a2 04		ldx #$04	                ldx     #4

829	.b723						LBF18:
830	.b723		68		pla		                pla
831	.b724		a0 40		ldy #$40	                ldy     #VDUVariables.workspace._40
832	.b726		84 da		sty $da		                sty     ZTEMP+0
833	.b728		a0 38		ldy #$38	                ldy     #VDUVariables.workspace._38
834	.b72a		20 8c d5	jsr $d58c	                jsr     mos.addRegionDimensionToVDUVariableCoordinate
835	.b72d		ad 40 03	lda $0340	                lda     vduv.workspace._40
836	.b730		cd 3c 03	cmp $033c	                cmp     vduv.workspace._3C
837	.b733		ad 41 03	lda $0341	                lda     vduv.workspace._41
838	.b736		ed 3d 03	sbc $033d	                sbc     vduv.workspace._3D
839	.b739		10 10		bpl $b74b	                bpl     LBF40
840	.b73b		ad 45 03	lda $0345	                lda     vduv.workspace._45
841	.b73e		d0 03		bne $b743	                bne     LBF38
842	.b740		20 1f c4	jsr $c41f	                jsr     mos.LC420

844	.b743						LBF38:
845	.b743		a2 34		ldx #$34	                ldx     #VDUVariables.mocr.dest
846	.b745		20 02 c9	jsr $c902	                jsr     mos.copyEightBytesToWorkspace28
847	.b748		4c 1f c4	jmp $c41f	                jmp     mos.LC420


850	.b74b						LBF40:
851	.b74b		9c 47 03	stz $0347	                stz     vduv.workspace._47
852	.b74e		ad 30 03	lda $0330	                lda     vduv.workspace._30
853	.b751		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne
854	.b754		85 da		sta $da		                sta     ZTEMP+0
855	.b756		ad 3c 03	lda $033c	                lda     vduv.workspace._3C
856	.b759		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne
857	.b75c		38		sec		                sec
858	.b75d		e5 da		sbc $da		                sbc     ZTEMP+0
859	.b75f		10 06		bpl $b767	                bpl     LBF5C
860	.b761		ce 47 03	dec $0347	                dec     vduv.workspace._47
861	.b764		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne

863	.b767						LBF5C:
864	.b767		8d 43 03	sta $0343	                sta     vduv.workspace._43
865	.b76a		48		pha		                pha
866	.b76b		49 ff		eor #$ff	                eor     #$ff
867	.b76d		1a		inc a		                inc     a
868	.b76e		2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne
869	.b771		8d 42 03	sta $0342	                sta     vduv.workspace._42
870	.b774		68		pla		                pla
871	.b775		18		clc		                clc
872	.b776		6d 61 03	adc $0361	                adc     vduv.pixelsPerByteMinusOne
873	.b779		aa		tax		                tax
874	.b77a		bd 2c e1	lda $e12c,x	                lda     mos.LE120,x
875	.b77d		85 e1		sta $e1		                sta     ZTEMPD+1
876	.b77f		a2 3c		ldx #$3c	                ldx     #VDUVariables.workspace._3C
877	.b781		a0 40		ldy #$40	                ldy     #VDUVariables.workspace._40
878	.b783		20 9b da	jsr $da9b	                jsr     mos.LDA9C
879	.b786		8d 44 03	sta $0344	                sta     vduv.workspace._44
880	.b789		a5 d1		lda $d1		                lda     ZMASK
881	.b78b		8d 46 03	sta $0346	                sta     vduv.workspace._46
882	.b78e		a5 dc		lda $dc		                lda     ZTEMPB+0
883	.b790		85 e0		sta $e0		                sta     ZTEMPD+0
884	.b792		a2 00		ldx #$00	                ldx     #0
885	.b794		20 f1 b7	jsr $b7f1	                jsr     LBFE6
886	.b797		f0 40		beq $b7d9	                beq     LBFCE
887	.b799		ad 2a 03	lda $032a	                lda     vduv.workspace._2A
888	.b79c		cd 36 03	cmp $0336	                cmp     vduv.workspace._36
889	.b79f		ad 2b 03	lda $032b	                lda     vduv.workspace._2B
890	.b7a2		ed 37 03	sbc $0337	                sbc     vduv.workspace._37
891	.b7a5		50 02		bvc $b7a9	                bvc     LBF9E
892	.b7a7		49 80		eor #$80	                eor     #$80

894	.b7a9						LBF9E:
895	.b7a9		30 11		bmi $b7bc	                bmi     LBFB1

897	.b7ab						LBFA0:
898	.b7ab		20 61 db	jsr $db61	                jsr     mos.LDB62
899	.b7ae		a2 00		ldx #$00	                ldx     #0
900	.b7b0		20 dc b7	jsr $b7dc	                jsr     LBFD1
901	.b7b3		a2 0c		ldx #$0c	                ldx     #$c
902	.b7b5		20 dc b7	jsr $b7dc	                jsr     LBFD1
903	.b7b8		d0 f1		bne $b7ab	                bne     LBFA0
904	.b7ba		80 1d		bra $b7d9	                bra     LBFCE


907	.b7bc						LBFB1:
908	.b7bc		a2 2a		ldx #$2a	                ldx     #VDUVariables.mocr.src.min.y
909	.b7be		a0 2e		ldy #$2e	                ldy     #VDUVariables.mocr.src.max.y
910	.b7c0		20 be e2	jsr $e2be	                jsr     mos.exchangeTwoVDUBytes
911	.b7c3		a2 36		ldx #$36	                ldx     #VDUVariables.mocr.dest.min.y
912	.b7c5		a0 3a		ldy #$3a	                ldy     #VDUVariables.mocr.dest.max.y
913	.b7c7		20 be e2	jsr $e2be	                jsr     mos.exchangeTwoVDUBytes

915	.b7ca						LBFBF:
916	.b7ca		20 61 db	jsr $db61	                jsr     mos.LDB62
917	.b7cd		a2 00		ldx #$00	                ldx     #0
918	.b7cf		20 e6 b7	jsr $b7e6	                jsr     LBFDB
919	.b7d2		a2 0c		ldx #$0c	                ldx     #$c
920	.b7d4		20 e6 b7	jsr $b7e6	                jsr     LBFDB
921	.b7d7		d0 f1		bne $b7ca	                bne     LBFBF

923	.b7d9						LBFCE:
924	.b7d9		4c 61 db	jmp $db61	                jmp     mos.LDB62




929	.b7dc						LBFD1:
930	.b7dc		fe 2a 03	inc $032a,x	                inc     vduv.workspace._2A,x
931	.b7df		d0 10		bne $b7f1	                bne     LBFE6
932	.b7e1		fe 2b 03	inc $032b,x	                inc     vduv.workspace._2B,x
933	.b7e4		80 0b		bra $b7f1	                bra     LBFE6






940	.b7e6						LBFDB:
941	.b7e6		bd 2a 03	lda $032a,x	                lda     vduv.workspace._2A,x
942	.b7e9		d0 03		bne $b7ee	                bne     LBFE3
943	.b7eb		de 2b 03	dec $032b,x	                dec     vduv.workspace._2B,x

945	.b7ee						LBFE3:
946	.b7ee		de 2a 03	dec $032a,x	                dec     vduv.workspace._2A,x






953	.b7f1						LBFE6:
954	.b7f1		bd 2a 03	lda $032a,x	                lda     vduv.workspace._2A,x
955	.b7f4		dd 2e 03	cmp $032e,x	                cmp     vduv.workspace._2E,x
956	.b7f7		d0 06		bne $b7ff	                bne     rtsBFF4
957	.b7f9		bd 2b 03	lda $032b,x	                lda     vduv.workspace._2B,x
958	.b7fc		dd 2f 03	cmp $032f,x	                cmp     vduv.workspace._2F,x

960	.b7ff						rtsBFF4:
961	.b7ff		60		rts		                rts

963							                .if version!=400&&version!=350
976							                .endif

978							                .endblock

:1	;******  Return to file: mosCFA3000.s65

33							                .endsection

35							                .section utils
36							                .include "src/terminal.s65"

:7	;******  Processing file: src/terminal.s65

1							; -*- comment-column:45; -*-

3	.8000						terminal: .block
4							                .if version==320||version==350

6	.8000		4c 95 af	jmp $af95	                jmp terminalLanguageEntryPoint ; Language entry point
7	.8003		4c 8d 9d	jmp $9d8d	                jmp utilsServiceEntryPoint  ; Service entry point
8	>8006		c2				                .byte $C2                    ; ROM type=SERV+LANG+6502
9	>8007		11				                .byte copyrightText-1-terminal ; (C) offset
10	>8008		01				                .byte $01
11	>8009		54 45 52 4d 49 4e 41 4c		                .text "TERMINAL"
12	>8011		00				                .byte 0
13	.8012						copyrightText:
14							                .if version==350
15	>8012		28 43 29 31 39 38 36 20		                .text "(C)1986 Acorn"
	>801a		41 63 6f 72 6e
18							                .endif
19	>801f		00				                .byte 0

66							                .endif

68							;-------------------------------------------------------------------------

70							                .if version==350
71	.8020						trbACCCON:
72	.8020		20 6a f3	jsr $f36a	                jsr mos.callWithTST
73	.8023		1c 34 fe	trb $fe34	                trb ACCCON
74	.8026		60		rts		                rts
75							                .endif

77							;-------------------------------------------------------------------------

79							                .if version==350
80	.8027						tsbACCCON:
81	.8027		20 6a f3	jsr $f36a	                jsr mos.callWithTST
82	.802a		0c 34 fe	tsb $fe34	                tsb ACCCON
83	.802d		60		rts		                rts
84							                .endif

86							;-------------------------------------------------------------------------

88							                .if version==350
89	.802e						ldaSystemVIAIER:
90	.802e		20 6a f3	jsr $f36a	                jsr mos.callWithTST
91	.8031		ad 4e fe	lda $fe4e	                lda systemVIA.ier
92	.8034		60		rts		                rts
93							                .endif

95							;-------------------------------------------------------------------------

97							                .if version==350
98	.8035						printCMOSRamResetMessage:
99	.8035		20 6a f3	jsr $f36a	                jsr mos.callWithTST
100	.8038		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
101	>803b		0d 0a				                .text 13,10
102	>803d		43 4d 4f 53 20 52 41 4d		                .text "CMOS RAM reset",13,10
	>8045		20 72 65 73 65 74 0d 0a
103	>804d		50 72 65 73 73 20 62 72		                .text "Press break to continue",13,10
	>8055		65 61 6b 20 74 6f 20 63 6f 6e 74 69 6e 75 65 0d
	>8065		0a
104	>8066		00				                .text 0
105	.8067		60		rts		                rts
106							                .endif

108							;-------------------------------------------------------------------------

110							                .if version==350
111							                ; dup of same routine in non-3.50 MOS
112	.8068						LE375:
113	.8068		20 6a f3	jsr $f36a	                jsr mos.callWithTST
114	.806b		a2 01		ldx #$01	                ldx #$01
115	.806d		8e e0 fe	stx $fee0	                stx tube.status1
116	.8070		ad e0 fe	lda $fee0	                lda tube.status1
117	.8073		49 01		eor #$01	                eor #$01
118	.8075		a2 81		ldx #$81	                ldx #$81
119	.8077		8e e0 fe	stx $fee0	                stx tube.status1
120	.807a		2d e0 fe	and $fee0	                and tube.status1       ; Cy=0 if no Tube, Cy=1 if Tube
121	.807d		6a		ror a		                ror a
122	.807e		60		rts		                rts
123							                .endif

125							;-------------------------------------------------------------------------

127							                .if version==350
128	.807f						resetCRTC:
129	.807f		a2 1e		ldx #$1e	                ldx #$1e
130	.8081						L8081:
131	.8081		8e 00 fe	stx $fe00	                stx $fe00
132	.8084		9c 01 fe	stz $fe01	                stz $fe01
133	.8087		e8		inx		                inx
134	.8088		e0 21		cpx #$21	                cpx #$21
135	.808a		90 f5		bcc $8081	                bcc L8081
136	.808c		60		rts		                rts
137							                .endif

139							;-------------------------------------------------------------------------

141							; STARTUP
142							; =======


145							                .if version==350             ;stripped_out_reset
146	.808d						softResetPart2:
147	.808d		20 6a f3	jsr $f36a	                jsr mos.callWithTST
148	.8090		68		pla		                pla
149	.8091		68		pla		                pla
150	.8092		68		pla		                pla
154							                .endif

156							                .if version<500
157	.8093		90 0a		bcc $809f	                bcc continueSoftReset        ;taken if Tube not found
158	.8095						foundTube:
159	.8095		a2 ff		ldx #$ff	                ldx #romServiceCallTubeMainInitialisation
160	.8097		20 c3 ed	jsr $edc3	                jsr mos.makeROMServiceCall   ;
161	.809a		d0 03		bne $809f	                bne continueSoftReset        ; Not claimed, step past
162	.809c		ce 7a 02	dec $027a	                dec tubePresence ; Tube PreInit claimed, set TubeFlag to &FF, Tube present
163							                .endif
164	.809f						continueSoftReset:
165	.809f		ad 8d 02	lda $028d	                lda lastBREAKType ; Soft Break, don't ask about workspace
166	.80a2		f0 27		beq $80cb	                beq L82FC
167	.80a4		a0 dc		ldy #$dc	                ldy #$DC                     ; Start high workspace at &DC00 and work downwards
168	.80a6		a2 24		ldx #$24	                ldx #romServiceCallCountDynamicHAZELWorkspace ; Ask ROMs how much private high workspace required
169	.80a8		20 c3 ed	jsr $edc3	                jsr mos.makeROMServiceCall   ;
170	.80ab		a2 21		ldx #$21	                ldx #romServiceCallAbsoluteHAZELWorkspaceClaim ; Ask ROMs for maximum shared high workspace required
171	.80ad		20 c3 ed	jsr $edc3	                jsr mos.makeROMServiceCall   ;
172	.80b0		5a		phy		                phy                          ; Save top of shared workspace
173	.80b1		a2 22		ldx #$22	                ldx #romServiceCallPrivateHAZELWorkspaceClam ; Ask ROMs for private high workspace required
174	.80b3		20 c3 ed	jsr $edc3	                jsr mos.makeROMServiceCall   ;
175	.80b6		a0 0e		ldy #$0e	                ldy #$0E                     ; Start low workspace at &0E00
176	.80b8		a2 01		ldx #$01	                ldx #romServiceCallAbsoluteWorkspaceClaim ; Ask ROMs for maximum shared workspace
177	.80ba		20 c3 ed	jsr $edc3	                jsr mos.makeROMServiceCall   ;
178	.80bd		a2 02		ldx #$02	                ldx #romServiceCallPrivateWorkspaceClaim ; Ask ROMs for private workspace
179	.80bf		20 c3 ed	jsr $edc3	                jsr mos.makeROMServiceCall   ;
180	.80c2		8c 44 02	sty $0244	                sty oshwm                    ; Set OSHWM - default PAGE
181	.80c5		7a		ply		                ply                          ; Get top of shared high workspace
182	.80c6		a2 23		ldx #$23	                ldx #romServiceCallTopOfHAZELWorkspace ; Tell ROMs top of shared high workspace
183	.80c8		20 c3 ed	jsr $edc3	                jsr mos.makeROMServiceCall   ;
184	.80cb						L82FC:
185	.80cb		a2 21		ldx #$21	                ldx #size(defaultFsInfoBlocks)
186	.80cd						L82FE:
187	.80cd		bd 15 81	lda $8115,x	                lda defaultFsInfoBlocks-1,x                ; Copy initial FS info blocks for CFS, TAPE, ROM
188	.80d0		9d 05 df	sta $df05,x	                sta hazel.fsInfoBlocks-1,x
189	.80d3		ca		dex		                dex
190	.80d4		d0 f7		bne $80cd	                bne L82FE
191	.80d6		64 f2		stz $f2		                stz $F2                      ; &F2/3=>FS Info Blocks
192	.80d8		a9 df		lda #$df	                lda #>hazel.fsInfoBlocks
193	.80da		85 f3		sta $f3		                sta $F3
194							                ; Y=>end of FS Info Blocks
195	.80dc		a0 27		ldy #$27	                ldy #<hazel.fsInfoBlocks+size(defaultFsInfoBlocks)
196	.80de		a2 25		ldx #$25	                ldx #$25                     ; Ask ROMs for FS Info Blocks
197	.80e0		20 c3 ed	jsr $edc3	                jsr mos.makeROMServiceCall   ;
198	.80e3		a9 00		lda #$00	                lda #$00                     ; Terminate FS Info blocks
199	.80e5		91 f2		sta ($f2),y	                sta ($F2),y

201	.80e7		ad 57 02	lda $0257	                lda spoolFileHandle ; Save Spool handle and disable Spooling
202	.80ea		48		pha		                pha
203	.80eb		9c 57 02	stz $0257	                stz spoolFileHandle
204	.80ee		a2 fe		ldx #$fe	                ldx #romServiceCallTubeSystemPostInitialisation
205	.80f0		ac 7a 02	ldy $027a	                ldy tubePresence
206	.80f3		20 c3 ed	jsr $edc3	                jsr mos.makeROMServiceCall   ; Tube PostInit
207	.80f6		2d 67 02	and $0267	                and startupMessageSuppressionStatus
208	.80f9		10 14		bpl $810f	                bpl L8340

210							                ; use +$ff rather than -1 to avoid 64tass warning.
211							                ; Only the LSB is used.
212	.80fb		a0 ff		ldy #$ff	                ldy #((mos.startupMessages.acornMOS-(mos.startupMessages&$ff00))+$ff)&$ff
213	.80fd		20 7b e7	jsr $e77b	                jsr mos.printStartupMessage
214	.8100		ad 8d 02	lda $028d	                lda lastBREAKType            ; Skip past if Soft Break
215	.8103		f0 05		beq $810a	                beq L833B
216	.8105		a0 19		ldy #$19	                ldy #((mos.startupMessages.beep-(mos.startupMessages&$ff00))-1)&$ff
217	.8107		20 7b e7	jsr $e77b	                jsr mos.printStartupMessage
218	.810a						L833B:
219	.810a		a0 1b		ldy #$1b	                ldy #((mos.startupMessages.twoNewlines-(mos.startupMessages&$ff00))-1)&$ff
220	.810c		20 7b e7	jsr $e77b	                jsr mos.printStartupMessage
221	.810f						L8340:
222	.810f		68		pla		                pla                          ; Restore Spool handle
223	.8110		8d 57 02	sta $0257	                sta spoolFileHandle
224	.8113		4c cf e3	jmp $e3cf	                jmp mos.LE40E                ;

226							;-------------------------------------------------------------------------

228							                .if version>=500
236							                .endif
237							                .if version>=400
246							                .endif

248							;-------------------------------------------------------------------------

250							; Default FS Info Blocks
251							; ======================
252	.8116						defaultFsInfoBlocks: .block
253							                .if version<500
254	>8116		43 46 53 20 20 20 20 20		                .text "CFS     "
255	>811e		01				                .byte $01
256	>811f		02				                .byte $02
257	>8120		01				                .byte $01
258	>8121		54 41 50 45 20 20 20 20		                .text "TAPE    "
259	>8129		01				                .byte $01
260	>812a		02				                .byte $02
261	>812b		01				                .byte $01
262							                .endif
263	>812c		52 4f 4d 20 20 20 20 20		                .text "ROM     "
264	>8134		03				                .byte $03
265	>8135		03				                .byte $03
266	>8136		03				                .byte $03
267							                .endblock

269							;-------------------------------------------------------------------------
270							;
271							; MOS command table

273							mos_command .macro name,routine,byte1,byte2
290							                .endm

292	.8137						mosCommandTable:
274							                ; Name of command, compared case-insensitively.
275	>8137		43 41 54			                .text "CAT"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>813a		f1				                .byte >mos.callFSCV
13	>813b		5e				                .byte <mos.callFSCV

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>813c		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>813d		05				                .byte $05
294							                .if version!=400
274							                ; Name of command, compared case-insensitively.
275	>813e		41 44 46 53			                .text "ADFS"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8142		83				                .byte >passStarCommandThrough
13	>8143		79				                .byte <passStarCommandThrough

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8144		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8145		00				                .byte $00
296							                .endif
274							                ; Name of command, compared case-insensitively.
275	>8146		41 50 50 45 4e 44		                .text "APPEND"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>814c		8f				                .byte >starAPPEND
13	>814d		ea				                .byte <starAPPEND

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>814e		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>814f		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>8150		42 41 53 49 43			                .text "BASIC"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8155		83				                .byte >starBASIC
13	>8156		71				                .byte <starBASIC

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8157		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8158		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>8159		42 55 49 4c 44			                .text "BUILD"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>815e		8f				                .byte >starBUILD
13	>815f		e5				                .byte <starBUILD

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8160		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8161		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>8162		43 4c 4f 53 45			                .text "CLOSE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8167		94				                .byte >starCLOSE
13	>8168		04				                .byte <starCLOSE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8169		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>816a		ff				                .byte $FF
301							                .if version<500&&version!=350
303							                .else
274							                ; Name of command, compared case-insensitively.
275	>816b		43 4f 4e 46 49 47 55 52		                .text "CONFIGURE"
	>8173		45

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8174		86				                .byte >starCONFIGUREOrStarSTATUS
13	>8175		23				                .byte <starCONFIGUREOrStarSTATUS

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8176		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8177		80				                .byte $80
305							                .endif
274							                ; Name of command, compared case-insensitively.
275	>8178		43 4f 44 45			                .text "CODE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>817c		93				                .byte >starCommandThroughOSBYTE
13	>817d		85				                .byte <starCommandThroughOSBYTE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>817e		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>817f		88				                .byte $88
274							                ; Name of command, compared case-insensitively.
275	>8180		43 52 45 41 54 45		                .text "CREATE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8186		92				                .byte >starCommandThroughOSFILE
13	>8187		b6				                .byte <starCommandThroughOSFILE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8188		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8189		07				                .byte $07
274							                ; Name of command, compared case-insensitively.
275	>818a		44 55 4d 50			                .text "DUMP"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>818e		8f				                .byte >starDUMP
13	>818f		18				                .byte <starDUMP

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8190		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8191		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>8192		44 45 4c 45 54 45		                .text "DELETE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8198		94				                .byte >starDELETE
13	>8199		1a				                .byte <starDELETE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>819a		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>819b		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>819c		45 58 45 43			                .text "EXEC"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>81a0		a5				                .byte >starEXEC
13	>81a1		ab				                .byte <starEXEC

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>81a2		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>81a3		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>81a4		45 58				                .text "EX"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>81a6		f1				                .byte >mos.callFSCV
13	>81a7		5e				                .byte <mos.callFSCV

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>81a8		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>81a9		09				                .byte $09
274							                ; Name of command, compared case-insensitively.
275	>81aa		46 58				                .text "FX"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>81ac		93				                .byte >starFX
13	>81ad		7f				                .byte <starFX

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>81ae		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>81af		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>81b0		47 4f 49 4f			                .text "GOIO"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>81b4		92				                .byte >starGOIO
13	>81b5		9b				                .byte <starGOIO

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>81b6		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>81b7		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>81b8		47 4f				                .text "GO"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>81ba		92				                .byte >starGO
13	>81bb		93				                .byte <starGO

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>81bc		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>81bd		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>81be		48 45 4c 50			                .text "HELP"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>81c2		83				                .byte >starHELP
13	>81c3		94				                .byte <starHELP

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>81c4		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>81c5		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>81c6		49 4e 46 4f			                .text "INFO"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>81ca		f1				                .byte >mos.callFSCV
13	>81cb		5e				                .byte <mos.callFSCV

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>81cc		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>81cd		0a				                .byte $0A
274							                ; Name of command, compared case-insensitively.
275	>81ce		49 47 4e 4f 52 45		                .text "IGNORE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>81d4		94				                .byte >starIGNORE
13	>81d5		0f				                .byte <starIGNORE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>81d6		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>81d7		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>81d8		49 4e 53 45 52 54		                .text "INSERT"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>81de		84				                .byte >starINSERT
13	>81df		ff				                .byte <starINSERT

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>81e0		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>81e1		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>81e2		4b 45 59			                .text "KEY"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>81e5		97				                .byte >starKEY
13	>81e6		c5				                .byte <starKEY

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>81e7		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>81e8		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>81e9		4c 4f 41 44			                .text "LOAD"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>81ed		92				                .byte >starLOAD
13	>81ee		b4				                .byte <starLOAD

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>81ef		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>81f0		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>81f1		4c 49 53 54			                .text "LIST"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>81f5		8e				                .byte >starLIST
13	>81f6		96				                .byte <starLIST

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>81f7		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>81f8		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>81f9		4c 49 4e 45			                .text "LINE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>81fd		eb				                .byte >mos.callUSERV
13	>81fe		8f				                .byte <mos.callUSERV

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>81ff		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8200		01				                .byte $01
274							                ; Name of command, compared case-insensitively.
275	>8201		4c 49 42 46 53			                .text "LIBFS"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8206		e7				                .byte >mos.starLIBFS
13	>8207		d0				                .byte <mos.starLIBFS

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8208		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8209		00				                .byte $00
324							                .if version<400
274							                ; Name of command, compared case-insensitively.
275	>820a		4d 4f 54 4f 52			                .text "MOTOR"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>820f		93				                .byte >starCommandThroughOSBYTE
13	>8210		85				                .byte <starCommandThroughOSBYTE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8211		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8212		89				                .byte $89
330							                .endif
274							                ; Name of command, compared case-insensitively.
275	>8213		4d 4f 56 45			                .text "MOVE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8217		90				                .byte >starMOVE
13	>8218		97				                .byte <starMOVE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8219		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>821a		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>821b		4f 50 54			                .text "OPT"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>821e		93				                .byte >starCommandThroughOSBYTE
13	>821f		85				                .byte <starCommandThroughOSBYTE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8220		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8221		8b				                .byte $8B
274							                ; Name of command, compared case-insensitively.
275	>8222		50 52 49 4e 54			                .text "PRINT"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8227		8e				                .byte >starPRINT
13	>8228		8f				                .byte <starPRINT

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8229		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>822a		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>822b		52 55 4e			                .text "RUN"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>822e		f1				                .byte >mos.callFSCV
13	>822f		5e				                .byte <mos.callFSCV

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8230		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8231		04				                .byte $04
274							                ; Name of command, compared case-insensitively.
275	>8232		52 45 4d 4f 56 45		                .text "REMOVE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8238		93				                .byte >starREMOVE
13	>8239		0f				                .byte <starREMOVE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>823a		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>823b		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>823c		52 4f 4d			                .text "ROM"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>823f		93				                .byte >starCommandThroughOSBYTE
13	>8240		85				                .byte <starCommandThroughOSBYTE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8241		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8242		8d				                .byte $8D
274							                ; Name of command, compared case-insensitively.
275	>8243		52 4f 4d 53			                .text "ROMS"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8247		84				                .byte >starROMS
13	>8248		6e				                .byte <starROMS

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8249		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>824a		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>824b		53 41 56 45			                .text "SAVE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>824f		92				                .byte >starCommandThroughOSFILE
13	>8250		b6				                .byte <starCommandThroughOSFILE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8251		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8252		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>8253		53 48 41 44 4f 57		                .text "SHADOW"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8259		93				                .byte >starSHADOW
13	>825a		bd				                .byte <starSHADOW

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>825b		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>825c		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>825d		53 48 4f 57			                .text "SHOW"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8261		97				                .byte >starSHOW
13	>8262		65				                .byte <starSHOW

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8263		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8264		ff				                .byte $FF
274							                ; Name of command, compared case-insensitively.
275	>8265		53 48 55 54			                .text "SHUT"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8269		f3				                .byte >mos.starSHUT
13	>826a		13				                .byte <mos.starSHUT

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>826b		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>826c		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>826d		53 50 4f 4f 4c			                .text "SPOOL"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8272		93				                .byte >starSPOOL
13	>8273		d1				                .byte <starSPOOL

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8274		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8275		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>8276		53 50 4f 4f 4c 4f 4e		                .text "SPOOLON"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>827d		93				                .byte >starSPOOLON
13	>827e		ba				                .byte <starSPOOLON

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>827f		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8280		00				                .byte $00
344							                .if version>=350
274							                ; Name of command, compared case-insensitively.
275	>8281		53 52 44 41 54 41		                .text "SRDATA"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8287		8a				                .byte >starSRDATAOrStarSRROM
13	>8288		83				                .byte <starSRDATAOrStarSRROM

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8289		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>828a		a0				                .byte $a0
274							                ; Name of command, compared case-insensitively.
275	>828b		53 52 4c 4f 41 44		                .text "SRLOAD"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>8291		8b				                .byte >starSRLOADOrStarSRSAVE
13	>8292		d1				                .byte <starSRLOADOrStarSRSAVE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>8293		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>8294		60				                .byte $60
274							                ; Name of command, compared case-insensitively.
275	>8295		53 52 52 45 41 44		                .text "SRREAD"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>829b		8b				                .byte >starSRREADOrStarSRWRITE
13	>829c		55				                .byte <starSRREADOrStarSRWRITE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>829d		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>829e		a0				                .byte $a0
274							                ; Name of command, compared case-insensitively.
275	>829f		53 52 52 4f 4d			                .text "SRROM"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>82a4		8a				                .byte >starSRDATAOrStarSRROM
13	>82a5		83				                .byte <starSRDATAOrStarSRROM

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>82a6		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>82a7		80				                .byte $80
274							                ; Name of command, compared case-insensitively.
275	>82a8		53 52 53 41 56 45		                .text "SRSAVE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>82ae		8b				                .byte >starSRLOADOrStarSRSAVE
13	>82af		d1				                .byte <starSRLOADOrStarSRSAVE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>82b0		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>82b1		20				                .byte $20
274							                ; Name of command, compared case-insensitively.
275	>82b2		53 52 57 52 49 54 45		                .text "SRWRITE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>82b9		8b				                .byte >starSRREADOrStarSRWRITE
13	>82ba		55				                .byte <starSRREADOrStarSRWRITE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>82bb		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>82bc		e0				                .byte $e0
351							                .endif
352							                .if version<500&&version!=350
354							                .else
274							                ; Name of command, compared case-insensitively.
275	>82bd		53 54 41 54 55 53		                .text "STATUS"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>82c3		86				                .byte >starCONFIGUREOrStarSTATUS
13	>82c4		23				                .byte <starCONFIGUREOrStarSTATUS

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>82c5		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>82c6		c0				                .byte $c0
356							                .endif
357							                .if version<400
274							                ; Name of command, compared case-insensitively.
275	>82c7		54 41 50 45			                .text "TAPE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>82cb		93				                .byte >starCommandThroughOSBYTE
13	>82cc		85				                .byte <starCommandThroughOSBYTE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>82cd		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>82ce		8c				                .byte $8C
363							                .endif
274							                ; Name of command, compared case-insensitively.
275	>82cf		54 56				                .text "TV"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>82d1		93				                .byte >starCommandThroughOSBYTE
13	>82d2		85				                .byte <starCommandThroughOSBYTE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>82d3		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>82d4		90				                .byte $90
274							                ; Name of command, compared case-insensitively.
275	>82d5		54 49 4d 45			                .text "TIME"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>82d9		85				                .byte >starTIME
13	>82da		24				                .byte <starTIME

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>82db		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>82dc		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>82dd		54 59 50 45			                .text "TYPE"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>82e1		8e				                .byte >starTYPE
13	>82e2		a1				                .byte <starTYPE

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>82e3		80				                .byte $80

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>82e4		00				                .byte $00
274							                ; Name of command, compared case-insensitively.
275	>82e5		55 4e 50 4c 55 47		                .text "UNPLUG"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>82eb		85				                .byte >starUNPLUG
13	>82ec		02				                .byte <starUNPLUG

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>82ed		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>82ee		ff				                .byte $FF
368							                .if version<500
274							                ; Name of command, compared case-insensitively.
275	>82ef		58				                .text "X"

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>82f0		e7				                .byte >mos.starX
13	>82f1		d7				                .byte <mos.starX

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>82f2		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>82f3		00				                .byte $00
370							                .endif
274							                ; Name of command, compared case-insensitively.
275	>82f4						                .text ""

277							                ; Address of command routine, big-endian so that the
278							                ; first byte always has bit 7 set.
12:4	>82f4		f1				                .byte >mos.callFSCV
13	>82f5		5e				                .byte <mos.callFSCV

281:7							                ; If bit 7 set, reset the tempFS flag before
282							                ; starting.
283	>82f6		00				                .byte $00

285							                ; If bit 7 set, update string input buffer address
286							                ; before starting.
287							                ;
288							                ; A is set to this value on entry to the routine.
289	>82f7		03				                .byte $03
372	>82f8		00				                .byte $00

374							;-------------------------------------------------------------------------
375							;
376							; Get string input buffer address tail according to table byte.
377							;
378							; Entry:
379							;
380							; oscliWorkspace.tablePtr; = pointer to table byte
381							; (stringInputBufferAddress),y = pointer to input
382							;
383							; Exit:
384							;
385							; A = table byte
386							;
387							; if table byte bit 7 set: Y/X points to command line tail
388	.82f9						maybeGetStringInputBufferAddress:
389	.82f9		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
390	.82fb		30 0c		bmi $8309	                bmi rts84FE
391	.82fd						getStringInputBufferAddressWithYOffset:
392	.82fd		98		tya		                tya
393	.82fe						getStringInputBufferAddressWithAOffset:
394	.82fe		18		clc		                clc
395	.82ff		65 f2		adc $f2		                adc stringInputBufferAddress+0
396	.8301		aa		tax		                tax
397	.8302		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
398	.8304		90 01		bcc $8307	                bcc +
399	.8306		c8		iny		                iny
400	.8307						+
401	.8307		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
402	.8309						rts84FE:
403	.8309		60		rts		                rts

405							; Prepare OSCLI command line
406							; ==========================
407	.830a						oscli:
408	.830a		86 f2		stx $f2		                stx stringInputBufferAddress+0
409	.830c		84 f3		sty $f3		                sty stringInputBufferAddress+1
410	.830e		ad 00 df	lda $df00	                lda hazel.currentFS
411	.8311		20 97 f8	jsr $f897	                jsr mos.selectFS
412	.8314		a9 08		lda #$08	                lda #fscStarCommand
413	.8316		20 5e f1	jsr $f15e	                jsr mos.callFSCV
414	.8319		a0 ff		ldy #$ff	                ldy #$FF
415	.831b						L8510:
416	.831b		20 7f f2	jsr $f27f	                jsr mos.incAndSkipSpaces
417	.831e		f0 e9		beq $8309	                beq rts84FE
418	.8320		c9 2a		cmp #$2a	                cmp #'*'
419	.8322		f0 f7		beq $831b	                beq L8510
420	.8324		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
421	.8327		f0 e0		beq $8309	                beq rts84FE
422	.8329		c9 7c		cmp #$7c	                cmp #'|'
423	.832b		f0 dc		beq $8309	                beq rts84FE
424	.832d		9c c6 df	stz $dfc6	                stz hazel.tempFSFlag
425	.8330		c9 2d		cmp #$2d	                cmp #'-'
426	.8332		d0 0c		bne $8340	                bne L8535
427	.8334		20 f0 f7	jsr $f7f0	                jsr mos.parseFileNameFS
428	.8337		20 97 f8	jsr $f897	                jsr mos.selectFS
429	.833a		38		sec		                sec
430	.833b		6e c6 df	ror $dfc6	                ror hazel.tempFSFlag
431	.833e		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
432	.8340						L8535:
433	.8340		c9 2f		cmp #$2f	                cmp #'/'
434	.8342		d0 09		bne $834d	                bne L8542
435	.8344		c8		iny		                iny
436	.8345		20 fd 82	jsr $82fd	                jsr getStringInputBufferAddressWithYOffset
437	.8348		a9 02		lda #$02	                lda #fscStarSlash
438	.834a		4c 5e f1	jmp $f15e	                jmp mos.callFSCV

440	.834d						L8542:
441							                .if version<500&&version!=350
443							                .endif
444	.834d		a9 37		lda #$37	                lda #<mosCommandTable
445	.834f		85 b0		sta $b0		                sta oscliWorkspace.tablePtr+0
446	.8351		a9 81		lda #$81	                lda #>mosCommandTable
447	.8353		85 b1		sta $b1		                sta oscliWorkspace.tablePtr+1
448							                .if version<500&&version!=350
450							                .else
451	.8355		b8		clv		                clv
452	.8356		20 5f 88	jsr $885f	                jsr findCommand
453	.8359		90 1e		bcc $8379	                bcc passStarCommandThrough
454							                .endif

456							                .if version<500&&version!=350
490							                .endif
491	.835b						L8585:
492	.835b		48		pha		                pha
493	.835c		20 9e 88	jsr $889e	                jsr fetchCommandTableByte
494	.835f		48		pha		                pha
495	.8360		20 9e 88	jsr $889e	                jsr fetchCommandTableByte
496	.8363		30 03		bmi $8368	                bmi L8592
497	.8365		9c c6 df	stz $dfc6	                stz hazel.tempFSFlag
498	.8368						L8592:
499	.8368		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
500	.836b		18		clc		                clc
501	.836c		08		php		                php
502	.836d		20 f9 82	jsr $82f9	                jsr maybeGetStringInputBufferAddress
503	.8370		40		rti		                rti

505							                .if version<500&&version!=350
516							                .endif

518							;-------------------------------------------------------------------------

520							; *BASIC
521							; ======
522	.8371						starBASIC:
523	.8371		ae 4b 02	ldx $024b	                ldx basicROMNumber           ; Get BASIC ROM number
524	.8374		30 03		bmi $8379	                bmi passStarCommandThrough ; If no BASIC ROM, jump to pass to ROMs and filing system
525							                .if version==350
526	.8376		4c 07 fb	jmp $fb07	                jmp mos.LFAF9
533							                .endif

535							;-------------------------------------------------------------------------

537							; *ADFS - pass straight to ROMs/Filing System
538							; ===========================================
539	.8379						passStarCommandThrough:
540	.8379		2c c6 df	bit $dfc6	                bit hazel.tempFSFlag      ; Check filing system flag
541	.837c		30 0c		bmi $838a	                bmi L85C0                    ; If ... skip ROM service call
542	.837e		9c c6 df	stz $dfc6	                stz hazel.tempFSFlag      ; Clear filing system flag
543	.8381		a4 e6		ldy $e6		                ldy $E6
544	.8383		a2 04		ldx #$04	                ldx #romServiceCallUnrecognisedCommand
545	.8385		20 54 ed	jsr $ed54	                jsr mos.osbyte8F    ; Service call 4 - Unknown command
546							                .if version<500&&version!=350
548							                .else
549	.8388		f0 4d		beq $83d7	                beq parseDone
550							                .endif
551	.838a						L85C0:
552	.838a		a5 e6		lda $e6		                lda $E6
553	.838c		20 fe 82	jsr $82fe	                jsr getStringInputBufferAddressWithAOffset
554	.838f		a9 03		lda #$03	                lda #$03
555	.8391		4c 5e f1	jmp $f15e	                jmp mos.callFSCV ; mos.Pass to FSCV,3 - Unknown command

557	.8394						starHELP:
558	.8394		a2 09		ldx #$09	                ldx #romServiceCallHelp      ;
559	.8396		a5 d0		lda $d0		                lda STATE                    ;
560	.8398		48		pha		                pha                          ;save STATE
561	.8399		a9 0e		lda #$0e	                lda #14
562	.839b		20 ee ff	jsr $ffee	                jsr OSWRCH                   ; paged mode ON
563	.839e		20 c3 ed	jsr $edc3	                jsr mos.makeROMServiceCall   ;
564	.83a1		a2 18		ldx #$18	                ldx #romServiceCallReserved  ;???
565	.83a3		20 c3 ed	jsr $edc3	                jsr mos.makeROMServiceCall
566	.83a6		68		pla		                pla                          ;restore STATE
567	.83a7		89 04		bit #$04	                bit #STATE.isPagedScrolling  ;was paged mode on originally?
568	.83a9		d0 2c		bne $83d7	                bne parseDone   ;taken if paged mode was originally on
569							                                ;(branch target is an arbitrary nearby
570							                                ;RTS)
571	.83ab		a9 0f		lda #$0f	                lda #15         ;restore non-paged mode
572	.83ad		4c ee ff	jmp $ffee	                jmp OSWRCH

574							;-------------------------------------------------------------------------
575							;
576							; Read a byte value (0-255) from a string. If the number has a '&'
577							; prefix, interpret it as hex.
578							;
579							; entry:
580							;
581							; (stringInputBufferAddress),y - string
582							;
583							; exit:
584							;
585							; X = result
586							; ?$e6 = result
587							; C=0 if error
588							; Z=1 if CR encountered
589							;
590	.83b0						parseNumberFromString:
591	.83b0		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
592	.83b3		c9 26		cmp #$26	                cmp #'&'                     ; hex value incoming?
593	.83b5		d0 21		bne $83d8	                bne parseDecimal             ; taken if not hex value
594	.83b7						parseHex:
595	.83b7		c8		iny		                iny                          ; skip '&'
596	.83b8		20 10 84	jsr $8410	                jsr readHexDigit             ; read first hex digit
597	.83bb		90 51		bcc $840e	                bcc errorReadingString
598	.83bd		85 e6		sta $e6		                sta $E6                      ; save first hex digit
599	.83bf		20 10 84	jsr $8410	                jsr readHexDigit             ; read second hex digih
600	.83c2		90 0e		bcc $83d2	                bcc parsedValue         ; taken if not hex digit
601							                ; The first digit read was actually the high nybble,
602							                ; and the current digit read is therefore the low
603							                ; nybble.
604							                ;
605							                ; Shift saved digit 4 bits left.
606	.83c4		a2 04		ldx #$04	                ldx #$04
607	.83c6						-
608	.83c6		06 e6		asl $e6		                asl $E6
609	.83c8		ca		dex		                dex
610	.83c9		d0 fb		bne $83c6	                bne -
611	.83cb		04 e6		tsb $e6		                tsb $E6                      ; insert low nybble
612	.83cd		20 10 84	jsr $8410	                jsr readHexDigit             ; read third hex digit
613	.83d0		b0 29		bcs $83fb	                bcs errorReadingString2 ; 3+-digit hex values are not valid
614	.83d2						parsedValue:
615	.83d2		a6 e6		ldx $e6		                ldx $E6
616	.83d4		c9 0d		cmp #$0d	                cmp #$0D
617	.83d6		38		sec		                sec
618	.83d7						parseDone:
619	.83d7		60		rts		                rts

621	.83d8						parseDecimal:
622	.83d8		20 fe 83	jsr $83fe	                jsr readDigitFromString
623	.83db		90 31		bcc $840e	                bcc errorReadingString      ;branch taken if not digit
624	.83dd						parseDecimalDigit:
625	.83dd		85 e6		sta $e6		                sta $E6                     ;save current value
626	.83df		20 fd 83	jsr $83fd	                jsr readNextDigitFromString
627	.83e2		90 ee		bcc $83d2	                bcc parsedValue ;branch taken if not digit, meaning number
628							                                     ;parsed successfully
629	.83e4		aa		tax		                tax                         ;X=digit

631							                ; calculate (value*4+value)*2 - i.e., value*10. Carry
632							                ; at any point indicates the value was greater than
633							                ; 255, and therefore an error.
634	.83e5		a5 e6		lda $e6		                lda $E6                     ;value
635	.83e7		0a		asl a		                asl a                       ;value*2
636	.83e8		b0 24		bcs $840e	                bcs errorReadingString
637	.83ea		0a		asl a		                asl a                       ;value*4
638	.83eb		b0 21		bcs $840e	                bcs errorReadingString
639	.83ed		65 e6		adc $e6		                adc $E6                     ;value*5
640	.83ef		b0 1d		bcs $840e	                bcs errorReadingString
641	.83f1		0a		asl a		                asl a                       ;value*10
642	.83f2		b0 1a		bcs $840e	                bcs errorReadingString
643	.83f4		85 e6		sta $e6		                sta $E6                      ;save value*10
644	.83f6		8a		txa		                txa                          ;A=digit
645	.83f7		65 e6		adc $e6		                adc $E6                      ;value*10+digit
646	.83f9		90 e2		bcc $83dd	                bcc parseDecimalDigit
647	.83fb						errorReadingString2:
648	.83fb		18		clc		                clc
649	.83fc		60		rts		                rts

651	.83fd						readNextDigitFromString:
652	.83fd		c8		iny		                iny

654							; check if current string input byte is a digit.
655							;
656							; exit: C=1 if digit; C=0 if not digit
657	.83fe						readDigitFromString:
658	.83fe		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
659	.8400		c9 3a		cmp #$3a	                cmp #'9'+1
660	.8402		b0 0a		bcs $840e	                bcs errorReadingString       ;taken if not ASCII decimal digit
661	.8404		c9 30		cmp #$30	                cmp #'0'
662	.8406		90 06		bcc $840e	                bcc errorReadingString       ;taken if not ASCII decimal digit
663	.8408		29 0f		and #$0f	                and #$0F         ;convert ASCII decimaldigit to number
664	.840a		60		rts		                rts

666	.840b						L8641:
667	.840b		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
668							                .if version!=350
670							                .endif
671	.840e						errorReadingString:
672	.840e		18		clc		                clc
673	.840f		60		rts		                rts

675							;-------------------------------------------------------------------------
676							;
677							; Read a hex digit from a string
678							;
679							; entry:
680							;
681							; (stringInputBufferAddress),y = next byte to read
682							;
683							; exit:
684							;
685							; C=1 if ok: A = digit read
686							;
687							; C=0 if error: Z=1 if CR encountered
688							;
689	.8410						readHexDigit:
690	.8410		20 fe 83	jsr $83fe	                jsr readDigitFromString
691	.8413		b0 0d		bcs $8422	                bcs +                        ; branch taken if digit
692	.8415		29 df		and #$df	                and #$DF                     ; convert to upper case
693	.8417		c9 47		cmp #$47	                cmp #'F'+1
694	.8419		b0 f0		bcs $840b	                bcs L8641    ; branch taken if not ASCII A-F hex digit
695	.841b		c9 41		cmp #$41	                cmp #'A'
696	.841d		90 ec		bcc $840b	                bcc L8641     ;branch taken if not ASCII A-F hex digit
697							                ; convert ASCII A-F hex digit to number.
698	.841f		49 48		eor #$48	                eor #$48
699	.8421		1a		inc a		                inc a
700	.8422						+
701	.8422		c8		iny		                iny
702	.8423		60		rts		                rts

704							;-------------------------------------------------------------------------
705							;
706							; OSWORD 0 control block for *commands
707							; ====================================
708	.8424						commandLineUIOSWORD0Parameters:
709	>8424		00 dc				                .word hazel.commandLine      ; address
710	>8426		f0				                .byte $F0			; max # chars
711	>8427		20				                .byte $20			; min ASCII char
712	>8428		7e				                .byte $7E			; max ASCII char

714							;-------------------------------------------------------------------------

716	.8429						commandLineUI:
717	.8429		a9 55		lda #$55	                lda #<commandLineUIBRKHandler
718	.842b		8d 02 02	sta $0202	                sta BRKV+0
719	.842e		a9 84		lda #$84	                lda #>commandLineUIBRKHandler
720	.8430		8d 03 02	sta $0203	                sta BRKV+1
721	.8433		a9 1f		lda #$1f	                lda #$10|terminalROM         ;????
722	.8435		8d 8c 02	sta $028c	                sta currentLanguageROM
723	.8438						commandLineUILoop:
724	.8438		a2 ff		ldx #$ff	                ldx #$FF
725	.843a		9a		txs		                txs
726	.843b		58		cli		                cli
727	.843c		20 08 ed	jsr $ed08	                jsr mos.selectHAZEL
728	.843f		a9 2a		lda #$2a	                lda #'*'
729	.8441		20 ee ff	jsr $ffee	                jsr OSWRCH
730	.8444		20 65 84	jsr $8465	                jsr readCommandLine
731	.8447		90 03		bcc $844c	                bcc +                     ;taken if ESCAPE not pressed
732	.8449		4c d3 a8	jmp $a8d3	                jmp escapeError
733	.844c						+
734	.844c		a2 00		ldx #$00	                ldx #<hazel.commandLine
735	.844e		a0 dc		ldy #$dc	                ldy #>hazel.commandLine
736	.8450		20 f7 ff	jsr $fff7	                jsr OSCLI
737	.8453		80 e3		bra $8438	                bra commandLineUILoop

739	.8455						commandLineUIBRKHandler:
740	.8455		20 e7 ff	jsr $ffe7	                jsr OSNEWL
741	.8458		a0 00		ldy #$00	                ldy #$00
742	.845a		20 81 e7	jsr $e781	                jsr mos.printBRKMessage
743	.845d		20 e7 ff	jsr $ffe7	                jsr OSNEWL
744	.8460		80 c7		bra $8429	                bra commandLineUI

746	.8462						badCommandError869A:
747	.8462		4c 37 f9	jmp $f937	                jmp mos.badCommandError

749	.8465						readCommandLine:
750	.8465		a9 00		lda #$00	                lda #$00
751	.8467		a2 24		ldx #$24	                ldx #<commandLineUIOSWORD0Parameters
752	.8469		a0 84		ldy #$84	                ldy #>commandLineUIOSWORD0Parameters
753	.846b		4c f1 ff	jmp $fff1	                jmp OSWORD

755							;-------------------------------------------------------------------------
756							;
757							; *ROMS [MasRef C.5-10]
758							;
759	.846e						starROMS:
760	.846e		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
761	.8471		d0 ef		bne $8462	                bne badCommandError869A
762	.8473		a0 0f		ldy #$0f	                ldy #$0F
763	.8475						printROMsLoop:
764							                .if version<400&&version!=350
771							                .else
772	.8475		98		tya		                tya
773	.8476		aa		tax		                tax
774	.8477		5a		phy		                phy
775	.8478		20 d5 f9	jsr $f9d5	                jsr mos.LF89A
776	.847b		b0 0a		bcs $8487	                bcs L86D2
777	.847d		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
778	>8480		52 4f 4d 20 00			                .text "ROM ",0
779	.8485		80 08		bra $848f	                bra L86DA
780	.8487						L86D2:
781	.8487		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
782	>848a		52 41 4d 20 00			                .text "RAM ",0
783	.848f						L86DA:
784	.848f		7a		ply		                ply
785	.8490		98		tya		                tya
786							                .endif
787	.8491		20 b5 a8	jsr $a8b5	                jsr printHexDigit            ;print ROM slot
788	.8494		20 28 9f	jsr $9f28	                jsr printSpace
789	.8497		a9 09		lda #$09	                lda #<sidewaysROMName
790	.8499		85 f6		sta $f6		                sta $F6
791	.849b		a9 80		lda #$80	                lda #>sidewaysROMName
792	.849d		85 f7		sta $f7		                sta $F7
793							                .if version<400&&version!=350
795							                .endif
796	.849f		20 5f e5	jsr $e55f	                jsr mos.isROMValidThenSelectTerminalROM
797							                .if version<400&&version!=350
799							                .endif
800	.84a2		90 49		bcc $84ed	                bcc invalidROM
801							                .if version>=500||version==350
802	.84a4		b9 a1 02	lda $02a1,y	                lda romInformationTable,y
803	.84a7		3a		dec a		                dec a
804	.84a8		f0 43		beq $84ed	                beq invalidROM
805							                .endif
806	.84aa						printROMNameLoop:
807	.84aa		20 b7 f3	jsr $f3b7	                jsr mos.osrdscEntryPoint     ;read name byte
808	.84ad		c9 20		cmp #$20	                cmp #' '
809	.84af		90 0f		bcc $84c0	                bcc printROMVersion ;taken if non-printable char, including the terminating 0
810	.84b1		c9 7f		cmp #$7f	                cmp #127
811	.84b3		b0 38		bcs $84ed	                bcs invalidROM  ;taken if bad (bit 7 set) char in name
812	.84b5		20 ee ff	jsr $ffee	                jsr OSWRCH
813	.84b8		e6 f6		inc $f6		                inc $F6
814	.84ba		24 f6		bit $f6		                bit $F6
815	.84bc		50 ec		bvc $84aa	                bvc printROMNameLoop         ;taken if address<$8040
816	.84be		80 2d		bra $84ed	                bra invalidROM               ;taken if name too long

818	.84c0						printROMVersion:
819	.84c0		aa		tax		                tax               ;Z=1 if final char was the expected 0
820	.84c1		d0 2a		bne $84ed	                bne invalidROM    ;taken if bad (control) char in name
821	.84c3		a9 08		lda #$08	                lda #<sidewaysROMVersion
822	.84c5		85 f6		sta $f6		                sta $F6
823	.84c7		a9 80		lda #$80	                lda #>sidewaysROMVersion
824	.84c9		85 f7		sta $f7		                sta $F7
825	.84cb		20 b7 f3	jsr $f3b7	                jsr mos.osrdscEntryPoint
826	.84ce		20 a8 a8	jsr $a8a8	                jsr printSpaceThenPrintHexByte
827	.84d1						printInsertionStatus:
828	.84d1		5a		phy		                phy
829							                .if version<500&&version!=350
834							                .else
835	.84d2		20 f4 84	jsr $84f4	                jsr L873F
836							                .endif
837	.84d5		d0 0e		bne $84e5	                bne +
838	.84d7		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
839	>84da		20 75 6e 70 6c 75 67 67		                .text " unplugged",0
	>84e2		65 64 00
840	.84e5						+
841	.84e5		7a		ply		                ply
842	.84e6		20 e7 ff	jsr $ffe7	                jsr OSNEWL
843	.84e9		88		dey		                dey
844	.84ea		10 89		bpl $8475	                bpl printROMsLoop
845	.84ec		60		rts		                rts

847	.84ed						invalidROM:
848	.84ed		a9 3f		lda #$3f	                lda #'?'
849	.84ef		20 ee ff	jsr $ffee	                jsr OSWRCH
850	.84f2		80 dd		bra $84d1	                bra printInsertionStatus

852							;-------------------------------------------------------------------------

854							                .if version>=500||version==350
855	.84f4						L873F:
856	.84f4		20 8d e9	jsr $e98d	                jsr mos.getROMInsertedFlagRTCAddressAndMask
857	.84f7		85 b0		sta $b0		                sta $b0
858	.84f9		20 a3 96	jsr $96a3	                jsr readRTCByte
859	.84fc		25 b0		and $b0		                and $b0
860	.84fe		60		rts		                rts
861							                .endif

863							;-------------------------------------------------------------------------
864							;
865							; *INSERT [MasRef C.5-8]
866							;
867	.84ff						starINSERT:
868	.84ff		38		sec		                sec
869	.8500		80 01		bra $8503	                bra starINSERTOrStarUNPLUG

871							;-------------------------------------------------------------------------
872							;
873							; *UNPLUG [MasRef C.5-13]
874							;
875	.8502						starUNPLUG:
876	.8502		18		clc		                clc
877	.8503						starINSERTOrStarUNPLUG:
878	.8503		08		php		                php
879	.8504		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
880							                .if version<500&&version!=350
882							                .else
883	.8507		20 20 87	jsr $8720	                jsr L8953
884							                .endif
885	.850a		a8		tay		                tay                          ;Y=ROM number
886	.850b		20 8d e9	jsr $e98d	                jsr mos.getROMInsertedFlagRTCAddressAndMask
887	.850e		48		pha		                pha
888	.850f		20 a3 96	jsr $96a3	                jsr readRTCByte
889	.8512		84 b0		sty $b0		                sty starROMSWorkspace.insertedFlagMask
890	.8514		68		pla		                pla
891	.8515		28		plp		                plp
892	.8516		90 04		bcc $851c	                bcc unplug                   ;taken if it's *UNPLUG

894							                ; it's *INSERT
895	.8518		05 b0		ora $b0		                ora starROMSWorkspace.insertedFlagMask
896	.851a		80 04		bra $8520	                bra +
897	.851c						unplug:
898	.851c		49 ff		eor #$ff	                eor #$FF
899	.851e		25 b0		and $b0		                and starROMSWorkspace.insertedFlagMask
900	.8520						+
901	.8520		a8		tay		                tay
902	.8521		4c d0 96	jmp $96d0	                jmp writeRTCByte

904							;-------------------------------------------------------------------------
905							;
906							; *TIME [MasRef C.5-12]
907							;
908	.8524						starTIME:
909	.8524		9c 00 dc	stz $dc00	                stz hazel.commandLine
910	.8527		a2 00		ldx #$00	                ldx #<hazel.commandLine
911	.8529		a0 dc		ldy #$dc	                ldy #>hazel.commandLine
912	.852b		a9 0e		lda #$0e	                lda #$0E
913	.852d		20 f1 ff	jsr $fff1	                jsr OSWORD
914	.8530		a2 e7		ldx #$e7	                ldx #256-size(ClockStringFormat)
915	.8532						L8752:
916	.8532		bd 19 db	lda $db19,x	                lda hazel.commandLine-(256-size(ClockStringFormat)),x
917	.8535		20 e3 ff	jsr $ffe3	                jsr OSASCI
918	.8538		e8		inx		                inx
919	.8539		d0 f7		bne $8532	                bne L8752
920	.853b		60		rts		                rts

922							;-------------------------------------------------------------------------

924							                .if version==350
925							                .include "configure500.s65"

:8	;******  Processing file: src/configure500.s65

1							byte2: .macro value,value350
7							                .endmacro

9							                ; Metadata layout

11							                ; +0

13							                ;   7   6   5   4   3   2   1   0
14							                ; +---+---+---+---+---+---+---+---+
15							                ; |X  |V0 |MaskCount  |Value      |
16							                ; +---+---+---+---+---+---+---+---+

18							                ; X is unused - it's generally set in the configure
19							                ; table, so that the names can be terminated by a byte
20							                ; with bit 7 set.
21							                ;
22							                ; If V0 is clear, this field is actually the address
23							                ; of a routine.
24							                ;
25							                ; Value is the value for the bitfield when this option
26							                ; is in effect.
27							                ;
28							                ; MaskCount
29							                ;

31							                ; +1

33							                ;   7   6   5   4   3   2   1   0
34							                ; +---+---+---+---+---+---+---+---+
35							                ; |N1 |RTCByteIndex   |ShiftCount |
36							                ; +---+---+---+---+---+---+---+---+
37							                ;
38							                ; N1 = tested by L8ADF

40							                ; The RTC byte indexes in the table are actually
41							                ; offset.
42							                .if version==350
43	=15						rtcByteIndexOffset=cmosBytesOffset+CMOSBytes.fileServerStationNumber
46							                .endif

48							itemWithAddress: .macro name,addr
53							                .endmacro

55							countLS0s: .function value
75							                .endfunction n

77							itemMaskInfo: .macro value
83							                .endmacro

85							itemMetadata: .macro topMask,rtcByteIndex,mask,matchValue,n1
96							                .endmacro

98							itemWithMetadata: .macro name,rtcByteIndex,mask,matchValue,n1
102							                .endmacro

104	.853c						configureTable: .block
49	>853c		2e				                .text "."
50	.853d						metadata:
51							                .cerror (printConfigureOrStatusHeader&$c000)!=$8000
12:4	>853d		87				                .byte >printConfigureOrStatusHeader-1
13	>853e		89				                .byte <printConfigureOrStatusHeader-1
106:8	.853f						baud:
99	>853f		42 61 75 64			                .text ("Baud")
100	.8543						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults2))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults2))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror ((CMOSBytes.defaults2.serialBaudRateIndexMask<<CMOSBytes.defaults2.serialBaudRateIndexShift))<0||((CMOSBytes.defaults2.serialBaudRateIndexMask<<CMOSBytes.defaults2.serialBaudRateIndexShift))>256,format("Bad mask: $%02x",(CMOSBytes.defaults2.serialBaudRateIndexMask<<CMOSBytes.defaults2.serialBaudRateIndexShift))

92	.8543						info:
78	=2						shift=countLS0s(((CMOSBytes.defaults2.serialBaudRateIndexMask<<CMOSBytes.defaults2.serialBaudRateIndexShift)))
79	=7						unshiftedMask=(((CMOSBytes.defaults2.serialBaudRateIndexMask<<CMOSBytes.defaults2.serialBaudRateIndexShift)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults2.serialBaudRateIndexMask<<CMOSBytes.defaults2.serialBaudRateIndexShift)),shift,unshiftedMask)
81	=3						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults2.serialBaudRateIndexMask<<CMOSBytes.defaults2.serialBaudRateIndexShift)))

94	>8543		d0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>8544		f2				                .byte (((true))?$80:$00)|(((CMOSBytes.defaults2)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
107	.8545						boot:
99	>8545		42 6f 6f 74			                .text ("Boot")
100	.8549						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults3))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults3))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((1))>=0&&((1))<8)
90							                .cerror ((CMOSBytes.defaults3.autoBootMask))<0||((CMOSBytes.defaults3.autoBootMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults3.autoBootMask))

92	.8549						info:
78	=4						shift=countLS0s(((CMOSBytes.defaults3.autoBootMask)))
79	=1						unshiftedMask=(((CMOSBytes.defaults3.autoBootMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults3.autoBootMask)),shift,unshiftedMask)
81	=1						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults3.autoBootMask)))

94	>8549		c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
95	>854a		7c				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>854b		43 61 70 73			                .text ("Caps")
100	.854f						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults1))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults1))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((4))>=0&&((4))<8)
90							                .cerror (((CMOSBytes.defaults1.defaultCapsLockMask|CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask)))<0||(((CMOSBytes.defaults1.defaultCapsLockMask|CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask)))>256,format("Bad mask: $%02x",((CMOSBytes.defaults1.defaultCapsLockMask|CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask)))

92	.854f						info:
78	=3						shift=countLS0s((((CMOSBytes.defaults1.defaultCapsLockMask|CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask))))
79	=7						unshiftedMask=((((CMOSBytes.defaults1.defaultCapsLockMask|CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask))))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",(((CMOSBytes.defaults1.defaultCapsLockMask|CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask))),shift,unshiftedMask)
81	=3						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",(((CMOSBytes.defaults1.defaultCapsLockMask|CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask))))

94	>854f		d4				                .byte ($c0)|((info.maskWidth-1)<<3)|((4))
95	>8550		53				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
109							                .if olivetti
111							                .endif
112	.8551						data:
99	>8551		44 61 74 61			                .text ("Data")
100	.8555						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults3))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults3))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror ((CMOSBytes.defaults3.defaultSerialDataFormatMask<<CMOSBytes.defaults3.defaultSerialDataFormatShift))<0||((CMOSBytes.defaults3.defaultSerialDataFormatMask<<CMOSBytes.defaults3.defaultSerialDataFormatShift))>256,format("Bad mask: $%02x",(CMOSBytes.defaults3.defaultSerialDataFormatMask<<CMOSBytes.defaults3.defaultSerialDataFormatShift))

92	.8555						info:
78	=5						shift=countLS0s(((CMOSBytes.defaults3.defaultSerialDataFormatMask<<CMOSBytes.defaults3.defaultSerialDataFormatShift)))
79	=7						unshiftedMask=(((CMOSBytes.defaults3.defaultSerialDataFormatMask<<CMOSBytes.defaults3.defaultSerialDataFormatShift)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults3.defaultSerialDataFormatMask<<CMOSBytes.defaults3.defaultSerialDataFormatShift)),shift,unshiftedMask)
81	=3						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults3.defaultSerialDataFormatMask<<CMOSBytes.defaults3.defaultSerialDataFormatShift)))

94	>8555		d0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>8556		fd				                .byte (((true))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>8557		44 65 6c 61 79			                .text ("Delay")
100	.855c						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.keyboardAutoRepeatDelay))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.keyboardAutoRepeatDelay))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror (($ff))<0||(($ff))>256,format("Bad mask: $%02x",($ff))

92	.855c						info:
78	=0						shift=countLS0s((($ff)))
79	=$ff						unshiftedMask=((($ff)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",(($ff)),shift,unshiftedMask)
81	=8						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",(($ff)))

94	>855c		f8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>855d		d8				                .byte (((true))?$80:$00)|(((CMOSBytes.keyboardAutoRepeatDelay)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
114	.855e						dir:
99	>855e		44 69 72			                .text ("Dir")
100	.8561						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults1))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults1))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror ((CMOSBytes.defaults1.defaultADFSLoadDirMask))<0||((CMOSBytes.defaults1.defaultADFSLoadDirMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults1.defaultADFSLoadDirMask))

92	.8561						info:
78	=6						shift=countLS0s(((CMOSBytes.defaults1.defaultADFSLoadDirMask)))
79	=1						unshiftedMask=(((CMOSBytes.defaults1.defaultADFSLoadDirMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults1.defaultADFSLoadDirMask)),shift,unshiftedMask)
81	=1						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults1.defaultADFSLoadDirMask)))

94	>8561		c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>8562		56				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
115	=$8560						lastDirChar=dir.metadata-1
116							                .if version==350
117	.8563						extube:
99	>8563		45 78 54 75 62 65		                .text ("ExTube")
100	.8569						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults3))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults3))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((1))>=0&&((1))<8)
90							                .cerror ((CMOSBytes.defaults3.extTubeMask))<0||((CMOSBytes.defaults3.extTubeMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults3.extTubeMask))

92	.8569						info:
78	=2						shift=countLS0s(((CMOSBytes.defaults3.extTubeMask)))
79	=1						unshiftedMask=(((CMOSBytes.defaults3.extTubeMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults3.extTubeMask)),shift,unshiftedMask)
81	=1						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults3.extTubeMask)))

94	>8569		c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
95	>856a		7a				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
118	=$8564						lastExChar=extube+1
119							                .endif
99	>856b		46 64 72 69 76 65		                .text ("Fdrive")
100	.8571						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults1))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults1))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror ((CMOSBytes.defaults1.defaultFDRIVEMask))<0||((CMOSBytes.defaults1.defaultFDRIVEMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults1.defaultFDRIVEMask))

92	.8571						info:
78	=0						shift=countLS0s(((CMOSBytes.defaults1.defaultFDRIVEMask)))
79	=7						unshiftedMask=(((CMOSBytes.defaults1.defaultFDRIVEMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults1.defaultFDRIVEMask)),shift,unshiftedMask)
81	=3						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults1.defaultFDRIVEMask)))

94	>8571		d0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>8572		d0				                .byte (((true))?$80:$00)|(((CMOSBytes.defaults1)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
121	.8573						file:
99	>8573		46 69 6c 65			                .text ("File")
100	.8577						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaultROMs))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaultROMs))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror (($f<<CMOSBytes.defaultROMs.fsShift))<0||(($f<<CMOSBytes.defaultROMs.fsShift))>256,format("Bad mask: $%02x",($f<<CMOSBytes.defaultROMs.fsShift))

92	.8577						info:
78	=0						shift=countLS0s((($f<<CMOSBytes.defaultROMs.fsShift)))
79	=$f						unshiftedMask=((($f<<CMOSBytes.defaultROMs.fsShift)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",(($f<<CMOSBytes.defaultROMs.fsShift)),shift,unshiftedMask)
81	=4						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",(($f<<CMOSBytes.defaultROMs.fsShift)))

94	>8577		d8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>8578		a0				                .byte (((true))?$80:$00)|(((CMOSBytes.defaultROMs)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
122							                .if version==350
99	>8579		46 6c 6f 70 70 79		                .text ("Floppy")
100	.857f						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults1))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults1))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((1))>=0&&((1))<8)
90							                .cerror ((CMOSBytes.defaults1.defaultFloppyDrive))<0||((CMOSBytes.defaults1.defaultFloppyDrive))>256,format("Bad mask: $%02x",(CMOSBytes.defaults1.defaultFloppyDrive))

92	.857f						info:
78	=7						shift=countLS0s(((CMOSBytes.defaults1.defaultFloppyDrive)))
79	=1						unshiftedMask=(((CMOSBytes.defaults1.defaultFloppyDrive)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults1.defaultFloppyDrive)),shift,unshiftedMask)
81	=1						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults1.defaultFloppyDrive)))

94	>857f		c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
95	>8580		57				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
124							                .endif
125							                .if version==350
99	>8581		48 61 72 64			                .text ("Hard")
100	.8585						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults1))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults1))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror ((CMOSBytes.defaults1.defaultFloppyDrive))<0||((CMOSBytes.defaults1.defaultFloppyDrive))>256,format("Bad mask: $%02x",(CMOSBytes.defaults1.defaultFloppyDrive))

92	.8585						info:
78	=7						shift=countLS0s(((CMOSBytes.defaults1.defaultFloppyDrive)))
79	=1						unshiftedMask=(((CMOSBytes.defaults1.defaultFloppyDrive)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults1.defaultFloppyDrive)),shift,unshiftedMask)
81	=1						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults1.defaultFloppyDrive)))

94	>8585		c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>8586		57				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
127							                .endif
128	.8587						ignore:
49	>8587		49 67 6e 6f 72 65		                .text "Ignore"
50	.858d						metadata:
51							                .cerror (handlePrinterIgnoreChar&$c000)!=$8000
12:4	>858d		86				                .byte >handlePrinterIgnoreChar-1
13	>858e		df				                .byte <handlePrinterIgnoreChar-1
129:8							                .if version==350
130	.858f						intube:
99	>858f		49 6e 54 75 62 65		                .text ("InTube")
100	.8595						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults3))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults3))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror ((CMOSBytes.defaults3.extTubeMask))<0||((CMOSBytes.defaults3.extTubeMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults3.extTubeMask))

92	.8595						info:
78	=2						shift=countLS0s(((CMOSBytes.defaults3.extTubeMask)))
79	=1						unshiftedMask=(((CMOSBytes.defaults3.extTubeMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults3.extTubeMask)),shift,unshiftedMask)
81	=1						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults3.extTubeMask)))

94	>8595		c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>8596		7a				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
131	=$8590						lastInChar=intube+1
132							                .endif
133	.8597						lang:
99	>8597		4c 61 6e 67			                .text ("Lang")
100	.859b						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaultROMs))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaultROMs))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror (($f<<CMOSBytes.defaultROMs.languageShift))<0||(($f<<CMOSBytes.defaultROMs.languageShift))>256,format("Bad mask: $%02x",($f<<CMOSBytes.defaultROMs.languageShift))

92	.859b						info:
78	=4						shift=countLS0s((($f<<CMOSBytes.defaultROMs.languageShift)))
79	=$f						unshiftedMask=((($f<<CMOSBytes.defaultROMs.languageShift)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",(($f<<CMOSBytes.defaultROMs.languageShift)),shift,unshiftedMask)
81	=4						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",(($f<<CMOSBytes.defaultROMs.languageShift)))

94	>859b		d8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>859c		a4				                .byte (((true))?$80:$00)|(((CMOSBytes.defaultROMs)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>859d		4c 6f 75 64			                .text ("Loud")
100	.85a1						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults3))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults3))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((1))>=0&&((1))<8)
90							                .cerror ((CMOSBytes.defaults3.loudMask))<0||((CMOSBytes.defaults3.loudMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults3.loudMask))

92	.85a1						info:
78	=1						shift=countLS0s(((CMOSBytes.defaults3.loudMask)))
79	=1						unshiftedMask=(((CMOSBytes.defaults3.loudMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults3.loudMask)),shift,unshiftedMask)
81	=1						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults3.loudMask)))

94	>85a1		c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
95	>85a2		79				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
135	.85a3						mode:
99	>85a3		4d 6f 64 65			                .text ("Mode")
100	.85a7						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults0))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults0))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror ((CMOSBytes.defaults0.defaultMODEMask|CMOSBytes.defaults0.defaultSHADOWMask))<0||((CMOSBytes.defaults0.defaultMODEMask|CMOSBytes.defaults0.defaultSHADOWMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults0.defaultMODEMask|CMOSBytes.defaults0.defaultSHADOWMask))

92	.85a7						info:
78	=0						shift=countLS0s(((CMOSBytes.defaults0.defaultMODEMask|CMOSBytes.defaults0.defaultSHADOWMask)))
79	=15						unshiftedMask=(((CMOSBytes.defaults0.defaultMODEMask|CMOSBytes.defaults0.defaultSHADOWMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults0.defaultMODEMask|CMOSBytes.defaults0.defaultSHADOWMask)),shift,unshiftedMask)
81	=4						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults0.defaultMODEMask|CMOSBytes.defaults0.defaultSHADOWMask)))

94	>85a7		d8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>85a8		c8				                .byte (((true))?$80:$00)|(((CMOSBytes.defaults0)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>85a9		4e 6f 42 6f 6f 74		                .text ("NoBoot")
100	.85af						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults3))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults3))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror ((CMOSBytes.defaults3.autoBootMask))<0||((CMOSBytes.defaults3.autoBootMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults3.autoBootMask))

92	.85af						info:
78	=4						shift=countLS0s(((CMOSBytes.defaults3.autoBootMask)))
79	=1						unshiftedMask=(((CMOSBytes.defaults3.autoBootMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults3.autoBootMask)),shift,unshiftedMask)
81	=1						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults3.autoBootMask)))

94	>85af		c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>85b0		7c				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>85b1		4e 6f 43 61 70 73		                .text ("NoCaps")
100	.85b7						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults1))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults1))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((2))>=0&&((2))<8)
90							                .cerror ((CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask|CMOSBytes.defaults1.defaultCapsLockMask))<0||((CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask|CMOSBytes.defaults1.defaultCapsLockMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask|CMOSBytes.defaults1.defaultCapsLockMask))

92	.85b7						info:
78	=3						shift=countLS0s(((CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask|CMOSBytes.defaults1.defaultCapsLockMask)))
79	=7						unshiftedMask=(((CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask|CMOSBytes.defaults1.defaultCapsLockMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask|CMOSBytes.defaults1.defaultCapsLockMask)),shift,unshiftedMask)
81	=3						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask|CMOSBytes.defaults1.defaultCapsLockMask)))

94	>85b7		d2				                .byte ($c0)|((info.maskWidth-1)<<3)|((2))
95	>85b8		53				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
138	.85b9						noDir:
99	>85b9		4e 6f 44 69 72			                .text ("NoDir")
100	.85be						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults1))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults1))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((1))>=0&&((1))<8)
90							                .cerror ((CMOSBytes.defaults1.defaultADFSLoadDirMask))<0||((CMOSBytes.defaults1.defaultADFSLoadDirMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults1.defaultADFSLoadDirMask))

92	.85be						info:
78	=6						shift=countLS0s(((CMOSBytes.defaults1.defaultADFSLoadDirMask)))
79	=1						unshiftedMask=(((CMOSBytes.defaults1.defaultADFSLoadDirMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults1.defaultADFSLoadDirMask)),shift,unshiftedMask)
81	=1						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults1.defaultADFSLoadDirMask)))

94	>85be		c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
95	>85bf		56				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
139	=$85bd						lastNoDirChar:=noDir.metadata-1
99	>85c0		4e 6f 53 63 72 6f 6c 6c		                .text ("NoScroll")
100	.85c8						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults3))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults3))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((1))>=0&&((1))<8)
90							                .cerror ((CMOSBytes.defaults3.protectedScrollingMask))<0||((CMOSBytes.defaults3.protectedScrollingMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults3.protectedScrollingMask))

92	.85c8						info:
78	=3						shift=countLS0s(((CMOSBytes.defaults3.protectedScrollingMask)))
79	=1						unshiftedMask=(((CMOSBytes.defaults3.protectedScrollingMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults3.protectedScrollingMask)),shift,unshiftedMask)
81	=1						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults3.protectedScrollingMask)))

94	>85c8		c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
95	>85c9		7b				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
141							                .if version==350
99	>85ca		4e 6f 54 75 62 65		                .text ("NoTube")
100	.85d0						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults2))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults2))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror ((CMOSBytes.defaults2.tubeOnMask))<0||((CMOSBytes.defaults2.tubeOnMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults2.tubeOnMask))

92	.85d0						info:
78	=0						shift=countLS0s(((CMOSBytes.defaults2.tubeOnMask)))
79	=1						unshiftedMask=(((CMOSBytes.defaults2.tubeOnMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults2.tubeOnMask)),shift,unshiftedMask)
81	=1						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults2.tubeOnMask)))

94	>85d0		c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>85d1		70				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults2)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
143							                .endif
144	.85d2						print:
99	>85d2		50 72 69 6e 74			                .text ("Print")
100	.85d7						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults2))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults2))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror ((CMOSBytes.defaults2.fx5SettingMask<<CMOSBytes.defaults2.fx5SettingShift))<0||((CMOSBytes.defaults2.fx5SettingMask<<CMOSBytes.defaults2.fx5SettingShift))>256,format("Bad mask: $%02x",(CMOSBytes.defaults2.fx5SettingMask<<CMOSBytes.defaults2.fx5SettingShift))

92	.85d7						info:
78	=5						shift=countLS0s(((CMOSBytes.defaults2.fx5SettingMask<<CMOSBytes.defaults2.fx5SettingShift)))
79	=7						unshiftedMask=(((CMOSBytes.defaults2.fx5SettingMask<<CMOSBytes.defaults2.fx5SettingShift)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults2.fx5SettingMask<<CMOSBytes.defaults2.fx5SettingShift)),shift,unshiftedMask)
81	=3						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults2.fx5SettingMask<<CMOSBytes.defaults2.fx5SettingShift)))

94	>85d7		d0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>85d8		f5				                .byte (((true))?$80:$00)|(((CMOSBytes.defaults2)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>85d9		51 75 69 65 74			                .text ("Quiet")
100	.85de						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults3))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults3))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror ((CMOSBytes.defaults3.loudMask))<0||((CMOSBytes.defaults3.loudMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults3.loudMask))

92	.85de						info:
78	=1						shift=countLS0s(((CMOSBytes.defaults3.loudMask)))
79	=1						unshiftedMask=(((CMOSBytes.defaults3.loudMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults3.loudMask)),shift,unshiftedMask)
81	=1						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults3.loudMask)))

94	>85de		c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>85df		79				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>85e0		52 65 70 65 61 74		                .text ("Repeat")
100	.85e6						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.keyboardAutoRepeatRate))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.keyboardAutoRepeatRate))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror (($ff))<0||(($ff))>256,format("Bad mask: $%02x",($ff))

92	.85e6						info:
78	=0						shift=countLS0s((($ff)))
79	=$ff						unshiftedMask=((($ff)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",(($ff)),shift,unshiftedMask)
81	=8						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",(($ff)))

94	>85e6		f8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>85e7		e0				                .byte (((true))?$80:$00)|(((CMOSBytes.keyboardAutoRepeatRate)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>85e8		53 63 72 6f 6c 6c		                .text ("Scroll")
100	.85ee						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults3))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults3))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((0))>=0&&((0))<8)
90							                .cerror ((CMOSBytes.defaults3.protectedScrollingMask))<0||((CMOSBytes.defaults3.protectedScrollingMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults3.protectedScrollingMask))

92	.85ee						info:
78	=3						shift=countLS0s(((CMOSBytes.defaults3.protectedScrollingMask)))
79	=1						unshiftedMask=(((CMOSBytes.defaults3.protectedScrollingMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults3.protectedScrollingMask)),shift,unshiftedMask)
81	=1						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults3.protectedScrollingMask)))

94	>85ee		c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>85ef		7b				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
148	.85f0						shCaps:
99	>85f0		53 68 43 61 70 73		                .text ("ShCaps")
100	.85f6						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults1))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults1))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((1))>=0&&((1))<8)
90							                .cerror ((CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask|CMOSBytes.defaults1.defaultCapsLockMask))<0||((CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask|CMOSBytes.defaults1.defaultCapsLockMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask|CMOSBytes.defaults1.defaultCapsLockMask))

92	.85f6						info:
78	=3						shift=countLS0s(((CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask|CMOSBytes.defaults1.defaultCapsLockMask)))
79	=7						unshiftedMask=(((CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask|CMOSBytes.defaults1.defaultCapsLockMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask|CMOSBytes.defaults1.defaultCapsLockMask)),shift,unshiftedMask)
81	=3						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults1.defaultShiftLockMask|CMOSBytes.defaults1.defaultNoLockMask|CMOSBytes.defaults1.defaultCapsLockMask)))

94	>85f6		d1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
95	>85f7		53				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
149	=$85f1						lastShChar=shCaps+1
150							                .if version==350
99	>85f8		54 75 62 65			                .text ("Tube")
100	.85fc						metadata:
86							                ; constants need some rationalisation here...
87							                .cerror ((CMOSBytes.defaults2))<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror ((CMOSBytes.defaults2))>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !(((1))>=0&&((1))<8)
90							                .cerror ((CMOSBytes.defaults2.tubeOnMask))<0||((CMOSBytes.defaults2.tubeOnMask))>256,format("Bad mask: $%02x",(CMOSBytes.defaults2.tubeOnMask))

92	.85fc						info:
78	=0						shift=countLS0s(((CMOSBytes.defaults2.tubeOnMask)))
79	=1						unshiftedMask=(((CMOSBytes.defaults2.tubeOnMask)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",((CMOSBytes.defaults2.tubeOnMask)),shift,unshiftedMask)
81	=1						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",((CMOSBytes.defaults2.tubeOnMask)))

94	>85fc		c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
95	>85fd		70				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults2)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
152							                .endif
153							                .if version>=500
155							                .endif
156							                .if version>=500
158							                .endif
159							                .if version>=500
161							                .endif
49	>85fe		54 56				                .text "TV"
50	.8600						metadata:
51							                .cerror (handleTV&$c000)!=$8000
12:4	>8600		87				                .byte >handleTV-1
13	>8601		31				                .byte <handleTV-1
163:8	>8602		00				                .byte 0
164	.8603						L8603:
165							                .if version==350
86							                ; constants need some rationalisation here...
87							                .cerror (CMOSBytes.defaults2)<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror (CMOSBytes.defaults2)>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !((0)>=0&&(0)<8)
90							                .cerror (CMOSBytes.defaults2.usePrinterIgnoreCharMask)<0||(CMOSBytes.defaults2.usePrinterIgnoreCharMask)>256,format("Bad mask: $%02x",CMOSBytes.defaults2.usePrinterIgnoreCharMask)

92	.8603						info:
78	=1						shift=countLS0s((CMOSBytes.defaults2.usePrinterIgnoreCharMask))
79	=1						unshiftedMask=((CMOSBytes.defaults2.usePrinterIgnoreCharMask))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",(CMOSBytes.defaults2.usePrinterIgnoreCharMask),shift,unshiftedMask)
81	=1						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",(CMOSBytes.defaults2.usePrinterIgnoreCharMask))

94	>8603		00				                .byte ($00)|((info.maskWidth-1)<<3)|(0)
95	>8604		71				                .byte ((false)?$80:$00)|((CMOSBytes.defaults2-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
170							                .endif
171	.8605						L8605:
86							                ; constants need some rationalisation here...
87							                .cerror (CMOSBytes.defaults0)<(rtcByteIndexOffset)-cmosBytesOffset
88							                .cerror (CMOSBytes.defaults0)>=(rtcByteIndexOffset)+16-cmosBytesOffset
89							                .cerror !((0)>=0&&(0)<8)
90							                .cerror (CMOSBytes.defaults0.defaultInterlaceMask|(CMOSBytes.defaults0.defaultTVMask<<CMOSBytes.defaults0.defaultTVShift))<0||(CMOSBytes.defaults0.defaultInterlaceMask|(CMOSBytes.defaults0.defaultTVMask<<CMOSBytes.defaults0.defaultTVShift))>256,format("Bad mask: $%02x",CMOSBytes.defaults0.defaultInterlaceMask|(CMOSBytes.defaults0.defaultTVMask<<CMOSBytes.defaults0.defaultTVShift))

92	.8605						info:
78	=4						shift=countLS0s((CMOSBytes.defaults0.defaultInterlaceMask|(CMOSBytes.defaults0.defaultTVMask<<CMOSBytes.defaults0.defaultTVShift)))
79	=15						unshiftedMask=((CMOSBytes.defaults0.defaultInterlaceMask|(CMOSBytes.defaults0.defaultTVMask<<CMOSBytes.defaults0.defaultTVShift)))>>shift
80							                .cerror (unshiftedMask&(unshiftedMask+1))!=0,format("bad mask: $%02x (shift: %d; unshifted: $%02x)",(CMOSBytes.defaults0.defaultInterlaceMask|(CMOSBytes.defaults0.defaultTVMask<<CMOSBytes.defaults0.defaultTVShift)),shift,unshiftedMask)
81	=4						maskWidth=countLS0s(~unshiftedMask)
82							                .cerror !(maskWidth>=1&&maskWidth<=8),format("bad mask: $%02x",(CMOSBytes.defaults0.defaultInterlaceMask|(CMOSBytes.defaults0.defaultTVMask<<CMOSBytes.defaults0.defaultTVShift)))

94	>8605		18				                .byte ($00)|((info.maskWidth-1)<<3)|(0)
95	>8606		4c				                .byte ((false)?$80:$00)|((CMOSBytes.defaults0-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
173	.8607						ectory:
174	>8607		65 63 74 6f 72 79 ff		                .text "ectory",$ff
175							                .if version==350
176	.860e						ternal:
177	>860e		74 65 72 6e 61 6c ff		                .text "ternal",$ff
178							                .endif
179	.8615						ift:
180	>8615		69 66 74 ff			                .text "ift",$ff

182	.8619						textSnippetInsertPointOffsets:
183	>8619		24				                .text lastDirChar-configureTable   ;"Directory"
184	>861a		81				                .byte lastNoDirChar-configureTable ;"NoDirectory"
185							                .if version==350
186	>861b		28				                .byte lastExChar-configureTable    ;"External"
187	>861c		54				                .byte lastInChar-configureTable    ;"Internal"
188							                .endif
189	>861d		b5				                .byte lastShChar-configureTable    ;"Shift"
190	=5						textSnippetsCount=*-textSnippetInsertPointOffsets

192	.861e						textSnippetOffsets:
193	>861e		cb				                .byte configureTable.ectory-configureTable
194	>861f		cb				                .byte configureTable.ectory-configureTable
195							                .if version==350
196	>8620		d2				                .byte configureTable.ternal-configureTable
197	>8621		d2				                .byte configureTable.ternal-configureTable
198							                .endif
199	>8622		d9				                .byte configureTable.ift-configureTable
200							                .cerror *-textSnippetOffsets!=textSnippetsCount

202							                .endblock

204							;-------------------------------------------------------------------------

206	.8623						starCONFIGUREOrStarSTATUS:
207	.8623		0a		asl a		                asl a
208	.8624		69 80		adc #$80	                adc #$80

210							                ; *STATUS: A=1 V=1 C=1
211							                ; *CONFIGURE: A=0 V=0 C=1
212	.8626		08		php		                php
213	.8627		a9 3c		lda #$3c	                lda #<configureTable
214	.8629		85 b0		sta $b0		                sta oscliWorkspace.tablePtr+0
215	.862b		a9 85		lda #$85	                lda #>configureTable
216	.862d		85 b1		sta $b1		                sta oscliWorkspace.tablePtr+1
217	.862f		a2 ff		ldx #$ff	                ldx #$FF
218	.8631		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
219	.8634		d0 03		bne $8639	                bne L886C
220	.8636		20 9e 88	jsr $889e	                jsr fetchCommandTableByte

222	.8639						L886C:
223	.8639		2c 6c e3	bit $e36c	                bit mos.valueFF ; V=1 to indicate 2-byte metadata
224	.863c		20 5f 88	jsr $885f	                jsr findCommand
225	.863f		b0 07		bcs $8648	                bcs foundCONFIGOrSTATUSTopic
226	.8641		28		plp		                plp
227	.8642		20 41 89	jsr $8941	                jsr unknownCONFIGOrStatus
228	.8645		d0 71		bne $86b8	                bne jmpBadCommandError
229	.8647		60		rts		                rts

231							;-------------------------------------------------------------------------

233	.8648						foundCONFIGOrSTATUSTopic:
234	.8648		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
235	.864b		28		plp		                plp
236	.864c		50 03		bvc $8651	                bvc L8884
237	.864e		20 2a 87	jsr $872a	                jsr L895D

239							;-------------------------------------------------------------------------

241	.8651						L8884:
242	.8651		bd 3c 85	lda $853c,x	                lda configureTable,x
243	.8654		89 40		bit #$40	                bit #$40
244	.8656		d0 0a		bne $8662	                bne L8895       ;taken if V0 clear
245	.8658		48		pha		                pha
246	.8659		bd 3d 85	lda $853d,x	                lda configureTable+1,x
247	.865c		48		pha		                pha
248	.865d		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
249	.865f		49 0d		eor #$0d	                eor #$D         ;A=0 Z=1 if command line tail is empty
250	.8661		60		rts		                rts             ;call routine, in effect

252							;-------------------------------------------------------------------------

254	.8662						L8895:
255	.8662		29 07		and #$07	                and #7
256							                .if version==350
257	.8664		de 3d 85	dec $853d,x	                dec configureTable+1,x
260							                .endif
261	.8667		70 3d		bvs $86a6	                bvs L88D9
262	.8669		b0 30		bcs $869b	                bcs print1NumberHelp
263	.866b		30 05		bmi $8672	                bmi L88A5
264	.866d		20 2a 87	jsr $872a	                jsr L895D
265	.8670		80 26		bra $8698	                bra jmpL88EE

267							;-------------------------------------------------------------------------

269	.8672						L88A5:
270	.8672		da		phx		                phx
271	.8673		20 82 87	jsr $8782	                jsr L89B5
272	.8676		fa		plx		                plx
273	.8677		e0 07		cpx #$07	                cpx #7
274	.8679		d0 06		bne $8681	                bne L88B4
275	.867b		a8		tay		                tay
276	.867c		d0 02		bne $8680	                bne L88B3
277	.867e		a9 07		lda #$07	                lda #7

279	.8680						L88B3:
280	.8680		3a		dec a		                dec a

282	.8681						L88B4:
283	.8681		e0 6b		cpx #$6b	                cpx #configureTable.mode.metadata-configureTable
284	.8683		d0 09		bne $868e	                bne L88C1
285	.8685		89 78		bit #$78	                bit #$78
286	.8687		d0 2f		bne $86b8	                bne jmpBadCommandError
287	.8689		a8		tay		                tay
288	.868a		10 02		bpl $868e	                bpl L88C1
289	.868c		49 88		eor #$88	                eor #$88

291	.868e						L88C1:
292	.868e		20 5d 89	jsr $895d	                jsr getMaskCount
293	.8691		d9 69 89	cmp $8969,y	                cmp maskByBitCount,y
294	.8694		f0 02		beq $8698	                beq jmpL88EE
295	.8696		b0 20		bcs $86b8	                bcs jmpBadCommandError


298	.8698						jmpL88EE:
299	.8698		4c bb 86	jmp $86bb	                jmp L88EE

301							;-------------------------------------------------------------------------

303	.869b						print1NumberHelp:
304	.869b		10 08		bpl $86a5	                bpl L88D8
305	.869d		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
306	>86a0		3c 44 3e 0d 00			                .text "<D>",13,0
307	.86a5						L88D8:
308	.86a5		60		rts		                rts

310							;-------------------------------------------------------------------------

312	.86a6						L88D9:
313	.86a6		30 07		bmi $86af	                bmi printDecimalConfigurationByte
314	.86a8		bd 3d 85	lda $853d,x	                lda configureTable+1,x
315	.86ab		18		clc		                clc
316	.86ac		4c aa 88	jmp $88aa	                jmp L8ADA

318							;-------------------------------------------------------------------------

320	.86af						printDecimalConfigurationByte:
321	.86af		20 34 88	jsr $8834	                jsr readConfigurationByte

323	.86b2						printDecimalByteAThenNewLine:
324	.86b2		20 7d 89	jsr $897d	                jsr printDecimalByteA
325	.86b5		4c e7 ff	jmp $ffe7	                jmp OSNEWL

327							;-------------------------------------------------------------------------

329	.86b8						jmpBadCommandError:
330	.86b8		4c 37 f9	jmp $f937	                jmp mos.badCommandError

332							;-------------------------------------------------------------------------

334	.86bb						L88EE: .block
335	.86bb		85 b0		sta $b0		                sta $B0         ;save value
336	.86bd		20 5d 89	jsr $895d	                jsr getMaskCount
337	.86c0		b9 69 89	lda $8969,y	                lda maskByBitCount,y
338	.86c3		20 54 89	jsr $8954	                jsr getShiftCount
339	.86c6		80 03		bra $86cb	                bra shift
340	.86c8						shiftLoop:
341	.86c8		0a		asl a		                asl a           ;shift mask
342	.86c9		06 b0		asl $b0		                asl $B0         ;shift value

344	.86cb						shift:
345	.86cb		88		dey		                dey
346	.86cc		10 fa		bpl $86c8	                bpl shiftLoop
347	.86ce		85 b1		sta $b1		                sta $B1         ;store shifted value
348	.86d0		20 48 89	jsr $8948	                jsr getRTCByteIndex
349	.86d3		20 a3 96	jsr $96a3	                jsr readRTCByte ;get previous value
350	.86d6		05 b1		ora $b1		                ora $B1         ;set all masked bits to 1
351	.86d8		45 b1		eor $b1		                eor $B1         ;set all masked bits to 0
352	.86da		05 b0		ora $b0		                ora $B0         ;insert value
353	.86dc		a8		tay		                tay             ;Y=byte to write
354							                .endblock

356	.86dd						jmpWriteRTCByte:
357	.86dd		4c d0 96	jmp $96d0	                jmp writeRTCByte

359							;-------------------------------------------------------------------------

361	.86e0						handlePrinterIgnoreChar:
362	.86e0		70 18		bvs $86fa	                bvs printDefaultPrinterIgnoreChar ;taken if *STATUS
363	.86e2		b0 31		bcs $8715	                bcs print1OptionalNumberHelp
364	.86e4		f0 0e		beq $86f4	                beq L8927
365	.86e6		20 82 87	jsr $8782	                jsr L89B5
366	.86e9		da		phx		                phx
367	.86ea		a9 00		lda #$00	                lda #0
368	.86ec		20 f6 86	jsr $86f6	                jsr L8929
369	.86ef		7a		ply		                ply
370	.86f0		a2 1c		ldx #$1c	                ldx #$E+cmosBytesOffset
371	.86f2		80 e9		bra $86dd	                bra jmpWriteRTCByte

373							;-------------------------------------------------------------------------

375	.86f4						L8927:
376	.86f4		a9 01		lda #$01	                lda #1

378							;-------------------------------------------------------------------------

380	.86f6						L8929:
381	.86f6		a2 c7		ldx #$c7	                ldx #configureTable.L8603-configureTable
382	.86f8						L892B:
383	.86f8		80 9e		bra $8698	                bra jmpL88EE

385							;-------------------------------------------------------------------------

387	.86fa						printDefaultPrinterIgnoreChar:
388	.86fa		20 74 89	jsr $8974	                jsr readUsePrinterIgnoreChar
389	.86fd		90 0f		bcc $870e	                bcc gotPrinterIgnoreChar
390	.86ff		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
391	>8702		4e 6f 20 49 67 6e 6f 72		                .text "No Ignore",13,0
	>870a		65 0d 00
392	.870d		60		rts		                rts

394							;-------------------------------------------------------------------------

396	.870e						gotPrinterIgnoreChar:
397	.870e		a2 1c		ldx #$1c	                ldx #CMOSBytes.printerIgnoreChar+cmosBytesOffset
398	.8710		20 a3 96	jsr $96a3	                jsr readRTCByte
399	.8713						L8946:
400	.8713		80 9d		bra $86b2	                bra printDecimalByteAThenNewLine

402							;-------------------------------------------------------------------------

404	.8715						print1OptionalNumberHelp:
405	.8715		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
406	>8718		5b 3c 44 3e 5d 0d 00		                .text "[<D>]",13,0
407	.871f		60		rts		                rts

409							;-------------------------------------------------------------------------

411	.8720						L8953:

413	.8720		20 b0 83	jsr $83b0	                jsr parseNumberFromString

415	.8723						L8956:
416	.8723		90 93		bcc $86b8	                bcc jmpBadCommandError
417	.8725		8a		txa		                txa
418	.8726		c9 10		cmp #$10	                cmp #$10

420	.8728						L895B:
421	.8728		b0 8e		bcs $86b8	                bcs jmpBadCommandError

423	.872a						L895D:
424	.872a		48		pha		                pha
425	.872b		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput

427	.872e						L8961:
428	.872e		d0 88		bne $86b8	                bne jmpBadCommandError
429	.8730		68		pla		                pla
430	.8731		60		rts		                rts

432							;-------------------------------------------------------------------------

434	.8732						handleTV:
435	.8732		70 2f		bvs $8763	                bvs L8996
436	.8734		b0 3b		bcs $8771	                bcs printTVHelp
437	.8736		f0 27		beq $875f	                beq L8992
438	.8738		20 b0 83	jsr $83b0	                jsr parseNumberFromString
439	.873b		90 e6		bcc $8723	                bcc L8956
440	.873d		e0 fc		cpx #$fc	                cpx #$FC
441	.873f		b0 04		bcs $8745	                bcs L8978
442	.8741		e0 04		cpx #$04	                cpx #4
443	.8743		b0 e3		bcs $8728	                bcs L895B

445	.8745						L8978:
446	.8745		8a		txa		                txa
447	.8746		0a		asl a		                asl a
448	.8747		85 b1		sta $b1		                sta $B1
449	.8749		a2 00		ldx #$00	                ldx #0
450	.874b		20 8b f2	jsr $f28b	                jsr mos.LF30A
451	.874e		f0 08		beq $8758	                beq L898B
452	.8750		20 82 87	jsr $8782	                jsr L89B5
453	.8753		c9 02		cmp #$02	                cmp #2
454	.8755		b0 d1		bcs $8728	                bcs L895B
455	.8757		aa		tax		                tax

457	.8758						L898B:
458	.8758		8a		txa		                txa
459	.8759		05 b1		ora $b1		                ora $B1

461	.875b						L898E:
462	.875b		a2 c9		ldx #$c9	                ldx #configureTable.L8605-configureTable
463	.875d		80 99		bra $86f8	                bra L892B

465							;-------------------------------------------------------------------------

467	.875f						L8992:
468	.875f		a9 00		lda #$00	                lda #0
469	.8761		80 f8		bra $875b	                bra L898E

471							;-------------------------------------------------------------------------

473	.8763						L8996:
474	.8763		20 ac 89	jsr $89ac	                jsr readDefaultTVSettings
475	.8766		20 7c 89	jsr $897c	                jsr printDecimalByteY
476	.8769		a9 2c		lda #$2c	                lda #','
477	.876b		20 ee ff	jsr $ffee	                jsr OSWRCH
478	.876e		8a		txa		                txa
479	.876f		80 a2		bra $8713	                bra L8946

481							;-------------------------------------------------------------------------

483	.8771						printTVHelp:
484	.8771		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
485	>8774		5b 3c 44 3e 5b 2c 3c 44		                .text "[<D>[,<D>]]",13,0
	>877c		3e 5d 5d 0d 00
486	.8781		60		rts		                rts

488							;-------------------------------------------------------------------------

490	.8782						L89B5:
491	.8782		20 b0 83	jsr $83b0	                jsr parseNumberFromString
492	.8785		90 9c		bcc $8723	                bcc L8956
493	.8787		8a		txa		                txa
494	.8788		80 a0		bra $872a	                bra L895D


497							;-------------------------------------------------------------------------

499	.878a						printConfigureOrStatusHeader: .block
500	.878a		d0 a2		bne $872e	                bne L8961
501	.878c		08		php		                php
502	.878d		5a		phy		                phy
503	.878e		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
504	>8791		43 6f 6e 66 69 67 75 72		                .text "Configuration ",0
	>8799		61 74 69 6f 6e 20 00
505	.87a0		70 0f		bvs $87b1	                bvs printStatusHeader ;taken if *STATUS
506	.87a2		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
507	>87a5		6f 70 74 69 6f 6e 73 3a		                .text "options:",13,0
	>87ad		0d 00
508	.87af		80 0c		bra $87bd	                bra printItems
509	.87b1						printStatusHeader:
510	.87b1		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
511	>87b4		73 74 61 74 75 73 3a 0d		                .text "status:",13,0
	>87bc		00
512	.87bd						printItems:
513	.87bd		38		sec		                sec
514	.87be		20 aa 88	jsr $88aa	                jsr L8ADA
515	.87c1		7a		ply		                ply
516	.87c2		28		plp		                plp
517	.87c3		08		php		                php
518	.87c4		20 41 89	jsr $8941	                jsr unknownCONFIGOrStatus
519	.87c7		28		plp		                plp
520	.87c8		70 66		bvs $8830	                bvs done        ;taken if *STATUS
521	.87ca		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
522	>87cd		57 68 65 72 65 3a 0d		                .text "Where:",13
523	>87d4		44 20 69 73 20 61 20 64		                .text "D is a decimal number, or",13
	>87dc		65 63 69 6d 61 6c 20 6e 75 6d 62 65 72 2c 20 6f
	>87ec		72 0d
524	>87ee		61 20 68 65 78 61 64 65		                .text "a hexadecimal number preceded by &",13
	>87f6		63 69 6d 61 6c 20 6e 75 6d 62 65 72 20 70 72 65
	>8806		63 65 64 65 64 20 62 79 20 26 0d
525	>8811		49 74 65 6d 73 20 77 69		                .text "Items within [ ] are optional",13
	>8819		74 68 69 6e 20 5b 20 5d 20 61 72 65 20 6f 70 74
	>8829		69 6f 6e 61 6c 0d
526	>882f		00				                .byte 0
527	.8830						done:
528	.8830		60		rts		                rts
529							                .endblock

531							;-------------------------------------------------------------------------
532							;
533							; Read configuration byte, given offset of metadata in the configure
534							; table.
535							;
536							; Entry:
537							;
538							; X = offset of metadata in the configure table
539							;
540							; Exit:
541							;
542							; A = value read
543							;
544							; Preserves: X/Y/P

546							                .if version==350
547	.8831						setTSTAndReadConfigurationByte:
548	.8831		20 6a f3	jsr $f36a	                jsr mos.callWithTST
549							                .endif
550	.8834						readConfigurationByte: .block
551	.8834		08		php		                php
552	.8835		5a		phy		                phy
553	.8836		da		phx		                phx
554	.8837		20 48 89	jsr $8948	                jsr getRTCByteIndex ;
555	.883a		20 a3 96	jsr $96a3	                jsr readRTCByte
556	.883d		fa		plx		                plx
557	.883e		20 54 89	jsr $8954	                jsr getShiftCount
558	.8841		80 01		bra $8844	                bra shift

560							;-------------------------------------------------------------------------

562	.8843						shiftLoop:
563	.8843		4a		lsr a		                lsr a

565	.8844						shift:
566	.8844		88		dey		                dey
567	.8845		10 fc		bpl $8843	                bpl shiftLoop

569	.8847		20 5d 89	jsr $895d	                jsr getMaskCount
570	.884a		39 69 89	and $8969,y	                and maskByBitCount,y
571	.884d		e0 07		cpx #$07	                cpx #configureTable.baud.metadata-configureTable
572	.884f		d0 01		bne $8852	                bne gotMaskedByte
573	.8851		1a		inc a		                inc a

575	.8852						gotMaskedByte:
576							                ; If retrieving the MODE value, rearrange things so
577							                ; the shadow modes are 128-135.
578	.8852		e0 6b		cpx #$6b	                cpx #configureTable.mode.metadata-configureTable
579	.8854		d0 06		bne $885c	                bne done        ;taken if not MODE
580	.8856		89 08		bit #$08	                bit #CMOSBytes.defaults0.defaultSHADOWMask ;test shadow bit
581	.8858		f0 02		beq $885c	                beq done                                   ;taken if not shadow mode
582	.885a		49 88		eor #$88	                eor #$80|CMOSBytes.defaults0.defaultSHADOWMask ;turn mode|flag into mode|$80

584	.885c						done:
585	.885c		7a		ply		                ply
586	.885d		28		plp		                plp
587	.885e		60		rts		                rts
588							                .endblock

590							;-------------------------------------------------------------------------
591							;
592							; Find command in command table.
593							;
594							; Entry:
595							;
596							; (stringInputBufferAddress),y = input
597							; oscliWorkspace.tablePtr; = address of command table
598							; V = 0 if commands have 4 bytes of metadata
599							;     1 if commands have 2 bytes of metadata
600							;
601							; Exit:
602							;
603							; C=0 = no match
604							;
605							; C=1 = match;
606							;       A holds 1st byte of metadata
607							;       oscliWorkspace.tablePtr; = address of 2nd and following metadata bytes
608							;       (stringInputBufferAddress),y = input following command
609							;
610							; Preserves: X/V

612	.885f						findCommand: .block
613	.885f		84 e6		sty $e6		                sty $E6         ;save Y
614	.8861		80 0a		bra $886d	                bra checkInput       ;get going...

616	.8863						checkLetter:
617	.8863		52 b0		eor ($b0)	                eor (oscliWorkspace.tablePtr)
618	.8865		29 df		and #$df	                and #$DF
619	.8867		d0 15		bne $887e	                bne noMatch    ; taken if char didn't match
620	.8869		20 9e 88	jsr $889e	                jsr fetchCommandTableByte
621	.886c		c8		iny		                iny

623	.886d						checkInput:
624	.886d		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
625	.886f		20 43 ea	jsr $ea43	                jsr mos.isLetter
626	.8872		90 ef		bcc $8863	                bcc checkLetter ; taken if letter

628							                ; Non-letter input means potentially end of command
629							                ; name.
630	.8874		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr) ; next table byte
631	.8876		30 21		bmi $8899	                bmi commandMatch ; taken if end of string - a match
632	.8878		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
633	.887a		c9 2e		cmp #$2e	                cmp #'.'        ; '.' is the abbreviation char
634	.887c		f0 04		beq $8882	                beq abbreviationMatch ;taken with C=1 if match

636	.887e						noMatch:
637	.887e		18		clc		                clc             ;indicate no match
638	.887f		a4 e6		ldy $e6		                ldy $E6         ;restore Y
639	.8881		88		dey		                dey             ;compensate for upcoming iny

641	.8882						abbreviationMatch:
642	.8882		c8		iny		                iny             ; skip the '.'

644	.8883						findCommandMetadataLoop:
645	.8883		20 9e 88	jsr $889e	                jsr fetchCommandTableByte
646	.8886		f0 15		beq $889d	                beq rts8ACD
647	.8888		10 f9		bpl $8883	                bpl findCommandMetadataLoop ; keep looping through chars if necessary
648	.888a		b0 11		bcs $889d	                bcs rts8ACD                 ;taken if it was a match
649	.888c		20 9e 88	jsr $889e	                jsr fetchCommandTableByte   ;discard 2nd metadata byte
650	.888f		70 dc		bvs $886d	                bvs checkInput ; if V=1, 2-byte metadata; if V=0, 4-byte metadata
651	.8891		20 9e 88	jsr $889e	                jsr fetchCommandTableByte ;discard 3rd metadata byte
652	.8894		20 9e 88	jsr $889e	                jsr fetchCommandTableByte ;discard 4th metadata byte
653	.8897		80 d4		bra $886d	                bra checkInput

655							;-------------------------------------------------------------------------

657	.8899						commandMatch:
658	.8899		20 9e 88	jsr $889e	                jsr fetchCommandTableByte
659	.889c		38		sec		                sec

661	.889d						rts8ACD:
662	.889d		60		rts		                rts
663							                .endblock

665							;-------------------------------------------------------------------------
666							;
667							; Fetch byte from command table with postincrement.
668							;
669							; Entry:
670							;
671							; oscliWorkspace.tablePtr; = address of byte to fetch
672							;
673							; Exit:
674							;
675							; A = byte fetched
676							; oscliWorkspace.tablePtr; incremented
677							;
678							; Preserves: X/Y/C/V

680	.889e						fetchCommandTableByte:
681	.889e		e8		inx		                inx
682	.889f		b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
683	.88a1		48		pha		                pha
684	.88a2		e6 b0		inc $b0		                inc oscliWorkspace.tablePtr+0
685	.88a4		d0 02		bne $88a8	                bne L8AD8
686	.88a6		e6 b1		inc $b1		                inc oscliWorkspace.tablePtr+1

688	.88a8						L8AD8:
689	.88a8		68		pla		                pla
690	.88a9		60		rts		                rts

692							;-------------------------------------------------------------------------
693							;
694							; Print configure table items.
695							;
696							; Entry:
697							;
698							; C = ???
699							;
700							; V=0 if *CONFIGURE; V=1 if *STATUS
701							;
702	.88aa						L8ADA: .block
703	.88aa		48		pha		                pha
704	.88ab		a0 03		ldy #$03	                ldy #configureTable.baud-configureTable
705	.88ad		a2 02		ldx #$02	                ldx #(configureTable.baud-configureTable)-1

707	.88af						loop:
708	.88af		e8		inx		                inx
709	.88b0		bd 3c 85	lda $853c,x	                lda configureTable,x ;get name byte
710	.88b3		f0 5a		beq $890f	                beq done            ;all done if 0
711	.88b5		10 f8		bpl $88af	                bpl loop            ;keep going until end of name
712							                                     ;reached
713	.88b7		50 1f		bvc $88d8	                bvc L8B08            ;taken if *CONFIGURE

715							                ; A = metadata byte 0
716	.88b9		29 40		and #$40	                and #$40
717	.88bb		f0 10		beq $88cd	                beq L8AFD       ;taken if V0 clear

719	.88bd		bd 3d 85	lda $853d,x	                lda configureTable+1,x ;A = metadata byte 1
720	.88c0		30 0b		bmi $88cd	                bmi L8AFD              ;taken if N1 set

722	.88c2		20 34 88	jsr $8834	                jsr readConfigurationByte ;Read the actual value
723	.88c5		5d 3c 85	eor $853c,x	                eor configureTable,x      ;eor with MatchValue
724	.88c8		29 07		and #$07	                and #7                    ;A=0 if value matches MatchValue
725	.88ca		d0 3d		bne $8909	                bne next                  ;taken if value isn't MatchValue
726	.88cc		3a		dec a		                dec a                     ;A=$ff

728	.88cd						L8AFD:
729	.88cd		b0 09		bcs $88d8	                bcs L8B08       ;
730	.88cf		10 38		bpl $8909	                bpl next        ;
731	.88d1		68		pla		                pla
732	.88d2		48		pha		                pha
733	.88d3		5d 3d 85	eor $853d,x	                eor configureTable+1,x
734	.88d6		d0 31		bne $8909	                bne next

736	.88d8						L8B08:
737	.88d8		08		php		                php
738	.88d9		da		phx		                phx
739	.88da		50 09		bvc $88e5	                bvc printOrdinaryItem
740	.88dc		c0 4b		cpy #$4b	                cpy #configureTable.ignore-configureTable
741	.88de		d0 05		bne $88e5	                bne printOrdinaryItem
742	.88e0		20 74 89	jsr $8974	                jsr readUsePrinterIgnoreChar
743	.88e3		b0 1b		bcs $8900	                bcs L8B30

745	.88e5						printOrdinaryItem:
746	.88e5		a2 09		ldx #$09	                ldx #9
747	.88e7		20 3b 89	jsr $893b	                jsr printConfigureTableString
748	.88ea		29 40		and #$40	                and #$40
749	.88ec		f0 0f		beq $88fd	                beq printSpaces       ;taken if V0 clear
750	.88ee		b9 3d 85	lda $853d,y	                lda configureTable+1,y
751	.88f1		30 0a		bmi $88fd	                bmi printSpaces ;taken if N1 set

753							                ; V0 set, N1 clear = newline and next item
754	.88f3		20 e7 ff	jsr $ffe7	                jsr OSNEWL
755	.88f6		80 0f		bra $8907	                bra next2

757	.88f8						printSpacesLoop:
758	.88f8		a9 20		lda #$20	                lda #' '
759	.88fa		20 ee ff	jsr $ffee	                jsr OSWRCH

761	.88fd						printSpaces:
762	.88fd		ca		dex		                dex
763	.88fe		10 f8		bpl $88f8	                bpl printSpacesLoop

765	.8900						L8B30:
766	.8900		fa		plx		                plx
767	.8901		28		plp		                plp
768	.8902		08		php		                php
769	.8903		da		phx		                phx
770	.8904		20 51 86	jsr $8651	                jsr L8884

772	.8907						next2:
773	.8907		fa		plx		                plx
774	.8908		28		plp		                plp

776	.8909						next:
777	.8909		e8		inx		                inx             ;point X just before next item
778	.890a		8a		txa		                txa
779	.890b		a8		tay		                tay
780	.890c		c8		iny		                iny             ;point Y at next item
781	.890d		80 a0		bra $88af	                bra loop

783	.890f						done:
784	.890f		68		pla		                pla
785	.8910		60		rts		                rts
786							                .endblock

788							;-------------------------------------------------------------------------

790	.8911						printConfigureTableStringLoop:
791	.8911		20 ee ff	jsr $ffee	                jsr OSWRCH      ;print char
792	.8914		48		pha		                pha             ;save A (char to print)
793	.8915		5a		phy		                phy             ;save Y (table offset)
794	.8916		98		tya		                tya             ;get table offset in A

796							                ; If we're at a snippet insert point, insert the
797							                ; snippet, recursively.
798	.8917		a0 04		ldy #$04	                ldy #configureTable.textSnippetsCount-1
799	.8919						findSnippetInsertPointLoop:
800	.8919		d9 19 86	cmp $8619,y	                cmp configureTable.textSnippetInsertPointOffsets,y
801	.891c		d0 07		bne $8925	                bne nextSnippetInsertPoint

803							                ; Insert a snippet here. Load the new snippet's offset
804							                ; in Y and repeat.
805	.891e		b9 1e 86	lda $861e,y	                lda configureTable.textSnippetOffsets,y
806	.8921		a8		tay		                tay
807	.8922		20 3b 89	jsr $893b	                jsr printConfigureTableString
808	.8925						nextSnippetInsertPoint
809	.8925		88		dey		                dey
810	.8926		10 f1		bpl $8919	                bpl findSnippetInsertPointLoop
811	.8928		7a		ply		                ply             ;restore Y (table offset)
812	.8929		68		pla		                pla             ;restore A (char to print)
813	.892a		c8		iny		                iny             ;next byte in table
814	.892b		ca		dex		                dex             ;
815	.892c		49 20		eor #$20	                eor #$20
816	.892e		19 3c 85	ora $853c,y	                ora configureTable,y
817	.8931		29 a0		and #$a0	                and #%10100000
818	.8933		d0 06		bne $893b	                bne printConfigureTableString

820							                ; if char case changed, but it wasn't the end of the
821							                ; string, pop a space in.
822	.8935		a9 20		lda #$20	                lda #' '
823	.8937		20 ee ff	jsr $ffee	                jsr OSWRCH
824	.893a		ca		dex		                dex
825							                .cerror *!=printConfigureTableString

827							;-------------------------------------------------------------------------
828							;
829							; Print string from configure table, with snippets inserted as
830							; required.
831							;
832							; Entry:
833							;
834							; X = column counter start value
835							; Y = configure table offset
836							;
837							; Exit:
838							;
839							; A = item's metadata byte 0
840							; X decremented for each char printed
841							;
842	.893b						printConfigureTableString:
843	.893b		b9 3c 85	lda $853c,y	                lda configureTable,y
844	.893e		10 d1		bpl $8911	                bpl printConfigureTableStringLoop
845	.8940		60		rts		                rts


848							;-------------------------------------------------------------------------
849							;
850							; Issue ROM service call romServiceCallUnknownCONFIG ($28) or
851							; romServiceCallUnknownSTATUS ($29).
852							;
853							; Entry:
854							;
855							; C=1 for unknown CONFIG, or C=0 for unknown STATUS
856							;
857							; Exit:
858							;
859							; as per appropriate ROM service call
860							;
861	.8941						unknownCONFIGOrStatus:
862	.8941		a9 14		lda #$14	                lda #$14
863	.8943		2a		rol a		                rol a           ;form $28 or $29 according to C
864	.8944		aa		tax		                tax
865	.8945		4c c3 ed	jmp $edc3	                jmp mos.makeROMServiceCall

867							;-------------------------------------------------------------------------
868							;
869							; Get actual RTC byte index for configure item, given offset in
870							; configure table to its metadata.
871							;
872							; Entry:
873							;
874							; X = offset into configure table for item's metadata
875							;
876							; Exit:
877							;
878							; X = index of byte read
879							;
880							; Preserves: Y/C

882	.8948						getRTCByteIndex:
883	.8948		bd 3d 85	lda $853d,x	                lda configureTable+1,x
884	.894b		29 78		and #$78	                and #%01111000
885	.894d		4a		lsr a		                lsr a
886	.894e		4a		lsr a		                lsr a
887	.894f		4a		lsr a		                lsr a
888	.8950		69 0f		adc #$0f	                adc #rtcByteIndexOffset
889	.8952		aa		tax		                tax
890	.8953		60		rts		                rts

892							;-------------------------------------------------------------------------
893							;
894							; Get shift count for configure item's data, given offset in configure
895							; table for its metadata.
896							;
897							; Entry:
898							;
899							; X = offset into configure table for item's metadata
900							;
901							; Exit:
902							;
903							; Y = shift count
904							;
905							; Preserves: A/X/C
906							;
907	.8954						getShiftCount:
908	.8954		48		pha		                pha
909	.8955		bd 3d 85	lda $853d,x	                lda configureTable+1,x
910	.8958		29 07		and #$07	                and #%00000111
911	.895a		a8		tay		                tay
912	.895b		68		pla		                pla
913	.895c		60		rts		                rts


916							;-------------------------------------------------------------------------
917							;
918							; Get mask bit count for configure item's data, given offset in
919							; configure table for its metadata.
920							;
921							; Entry:
922							;
923							; X = offset into configure table for item's metadata
924							;
925							; Exit:
926							;
927							; Y = mask bit count, -1 (0 = 1 bits ... 7 = 8 bits)
928							;
929							; Preserves: A/X
930							;
931	.895d						getMaskCount:
932	.895d		48		pha		                pha
933	.895e		bd 3c 85	lda $853c,x	                lda configureTable,x; "."
934	.8961		4a		lsr a		                lsr a
935	.8962		4a		lsr a		                lsr a
936	.8963		4a		lsr a		                lsr a
937	.8964		29 07		and #$07	                and #7
938	.8966		a8		tay		                tay
939	.8967		68		pla		                pla
940	.8968		60		rts		                rts

942	.8969						maskByBitCount:
943	>8969		01				                .byte %00000001
944	>896a		03				                .byte %00000011
945	>896b		07				                .byte %00000111
946	>896c		0f				                .byte %00001111
947	>896d		1f				                .byte %00011111
948	>896e		3f				                .byte %00111111
949	>896f		7f				                .byte %01111111
950	>8970		ff				                .byte %11111111

952							;-------------------------------------------------------------------------
953							;
954							; Read the use printer ignore char flag.
955							;
956							; Exit:
957							;
958							; C=0 if using printer ignore char; C=1 if not.
959							;
960							; Preserves: Y

962							                .if version==350
963	.8971						setTSTAndReadUsePrinterIgnoreChar:
964	.8971		20 6a f3	jsr $f36a	                jsr mos.callWithTST
965							                .endif
966	.8974						readUsePrinterIgnoreChar:
967	.8974		5a		phy		                phy
968	.8975		20 8f 96	jsr $968f	                jsr readDefaults2
969	.8978		4a		lsr a		                lsr a
970	.8979		4a		lsr a		                lsr a
971	.897a		7a		ply		                ply
972	.897b		60		rts		                rts

974							;-------------------------------------------------------------------------
975							;
976							; Print decimal byte.
977							;
978							; Entry:
979							;
980							; (printDecimalByteA) A = value to print
981							;
982							; (printDecimalByteY) Y = value to print
983							;
984	.897c						printDecimalByteY:
985	.897c		98		tya		                tya
986	.897d						printDecimalByteA:
987	.897d		38		sec		                sec             ;set leading zeros flag
988	.897e		a0 ff		ldy #$ff	                ldy #$FF        ;reset digit counter
989	.8980		08		php		                php             ;save leading zeros flag

991	.8981						countHundredsLoop:
992	.8981		c8		iny		                iny
993	.8982		e9 64		sbc #$64	                sbc #100
994	.8984		b0 fb		bcs $8981	                bcs countHundredsLoop

996	.8986		69 64		adc #$64	                adc #100        ;put 0 back in the hundreds column
997	.8988		28		plp		                plp             ;restore leading zeros flag
998	.8989		20 9d 89	jsr $899d	                jsr maybePrintHexDigit

1000	.898c		a0 ff		ldy #$ff	                ldy #$FF        ;reset digit counter
1001	.898e		08		php		                php             ;save leading zeros flag
1002	.898f		38		sec		                sec

1004	.8990						countTensLoop:
1005	.8990		c8		iny		                iny
1006	.8991		e9 0a		sbc #$0a	                sbc #10
1007	.8993		b0 fb		bcs $8990	                bcs countTensLoop

1009	.8995		69 0a		adc #$0a	                adc #10         ;put 0 back in the tens column
1010	.8997		28		plp		                plp             ;restore leading zeros flag
1011	.8998		20 9d 89	jsr $899d	                jsr maybePrintHexDigit
1012	.899b		18		clc		                clc             ;always clear leading zeros flag for
1013							                                ;units
1014	.899c		a8		tay		                tay             ;Y=3rd digit

1016	.899d						maybePrintHexDigit:
1017	.899d		48		pha		                pha
1018	.899e		98		tya		                tya
1019	.899f		d0 02		bne $89a3	                bne L8BD0       ;always print if non-zero
1020	.89a1		b0 04		bcs $89a7	                bcs L8BD4       ;print non-leading zeros
1021	.89a3						L8BD0:
1022	.89a3		20 b5 a8	jsr $a8b5	                jsr printHexDigit
1023	.89a6		18		clc		                clc             ;indicate non-zero digit printed
1024	.89a7						L8BD4:
1025	.89a7		68		pla		                pla
1026	.89a8		60		rts		                rts

1028							;-------------------------------------------------------------------------

1030							                .if version==350
1031	.89a9						setTSTAndReadDefaultTVSettings
1032	.89a9		20 6a f3	jsr $f36a	                jsr mos.callWithTST
1033							                .endif
1034	.89ac						readDefaultTVSettings:
1035	.89ac		a2 c9		ldx #$c9	                ldx #configureTable.L8605-configureTable
1036	.89ae		20 34 88	jsr $8834	                jsr readConfigurationByte
1037	.89b1		4a		lsr a		                lsr a
1038	.89b2		89 04		bit #$04	                bit #%00000100
1039	.89b4		f0 02		beq $89b8	                beq L8BE2
1040	.89b6		09 fc		ora #$fc	                ora #%11111100
1041	.89b8						L8BE2:
1042	.89b8		a8		tay		                tay
1043	.89b9		a9 00		lda #$00	                lda #0
1044	.89bb		2a		rol a		                rol a
1045	.89bc		aa		tax		                tax
1046	.89bd		60		rts		                rts

1048							;-------------------------------------------------------------------------

:7	;******  Return to file: src/terminal.s65

926							                .include "sram_utils.s65"

:9	;******  Processing file: src/sram_utils.s65

1							;-------------------------------------------------------------------------

3	.89be						unk_8BE8:
4							                .if version>=500||version==350
5	>89be		01				                .byte 1
6							                .endif
7	>89bf		09				                .byte 9
8	>89c0		0a				                .byte $A
9	>89c1		0b				                .byte $B
10	>89c2		0c				                .byte $C
11	>89c3		02				                .byte 2
12	>89c4		03				                .byte 3
13	>89c5		04				                .byte 4
14	>89c6		05				                .byte 5
15	>89c7		06				                .byte 6

17							;-------------------------------------------------------------------------

19	.89c8						L8BF2:
20							                .if version==400
24							                .endif
25	.89c8		a0 09		ldy #$09	                ldy #9

27	.89ca						L8BF4:
28	.89ca		b1 f0		lda ($f0),y	                lda ($F0),y
29							                .if version==400
31							                .else
32	.89cc		be be 89	ldx $89be,y	                ldx unk_8BE8,y
33							                .endif
34	.89cf		9d ed 02	sta $02ed,x	                sta osfileParameterBlock,x
35	.89d2		88		dey		                dey
36							                .if version==400
38							                .else
39	.89d3		10 f5		bpl $89ca	                bpl L8BF4
40	.89d5		c8		iny		                iny
41							                .endif

43	.89d6						L8C00:
44	.89d6		b9 b0 00	lda $00b0,y	                lda $B0,y
45	.89d9		48		pha		                pha
46	.89da		c8		iny		                iny
47	.89db		c0 04		cpy #$04	                cpy #4
48	.89dd		90 f7		bcc $89d6	                bcc L8C00
49	.89df		20 8d 8b	jsr $8b8d	                jsr L8DB7
50	.89e2		a0 03		ldy #$03	                ldy #3

52	.89e4						L8C0E:
53	.89e4		68		pla		                pla
54	.89e5		99 b0 00	sta $00b0,y	                sta $B0,y
55	.89e8		88		dey		                dey
56	.89e9		10 f9		bpl $89e4	                bpl L8C0E
57	.89eb		60		rts		                rts

59							;-------------------------------------------------------------------------

61	.89ec						L8C16:
62	.89ec		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
63	.89ef		50 30		bvc $8a21	                bvc L8C4B
64	.89f1		a0 04		ldy #$04	                ldy #4
65	.89f3		ad f2 02	lda $02f2	                lda osfileParameterBlock+5
66	.89f6		ae f3 02	ldx $02f3	                ldx osfileParameterBlock+6

68	.89f9						L8C23:
69	.89f9		e0 3f		cpx #$3f	                cpx #$3F
70	.89fb		90 16		bcc $8a13	                bcc L8C3D
71	.89fd		d0 04		bne $8a03	                bne L8C2D
72	.89ff		c9 f0		cmp #$f0	                cmp #$F0
73	.8a01		90 10		bcc $8a13	                bcc L8C3D

75	.8a03						L8C2D:
76	.8a03		e9 f0		sbc #$f0	                sbc #$F0
77	.8a05		48		pha		                pha
78	.8a06		8a		txa		                txa
79	.8a07		e9 3f		sbc #$3f	                sbc #$3F
80	.8a09		aa		tax		                tax
81	.8a0a		68		pla		                pla
82	.8a0b		c8		iny		                iny
83	.8a0c		c0 08		cpy #$08	                cpy #8
84	.8a0e		90 e9		bcc $89f9	                bcc L8C23
85	.8a10		4c e9 92	jmp $92e9	                jmp badAddressError

87							;-------------------------------------------------------------------------

89	.8a13						L8C3D:
90	.8a13		69 10		adc #$10	                adc #$10
91	.8a15		8d f2 02	sta $02f2	                sta osfileParameterBlock+5
92	.8a18		8a		txa		                txa
93	.8a19		69 80		adc #$80	                adc #$80
94	.8a1b		8d f3 02	sta $02f3	                sta osfileParameterBlock+6
95	.8a1e		8c f1 02	sty $02f1	                sty osfileParameterBlock+4

97	.8a21						L8C4B:
98	.8a21		ad f1 02	lda $02f1	                lda osfileParameterBlock+4
99	.8a24		c9 10		cmp #$10	                cmp #$10
100	.8a26		90 09		bcc $8a31	                bcc L8C5B
101	.8a28		c9 14		cmp #$14	                cmp #$14
102	.8a2a		b0 1e		bcs $8a4a	                bcs L8C74
103	.8a2c		49 14		eor #$14	                eor #$14
104	.8a2e		8d f1 02	sta $02f1	                sta osfileParameterBlock+4

106	.8a31						L8C5B:
107	.8a31		aa		tax		                tax
108	.8a32		20 d5 f9	jsr $f9d5	                jsr mos.LF89A
109	.8a35		b0 07		bcs $8a3e	                bcs L8C68
110	.8a37		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
111	.8a3a		10 0e		bpl $8a4a	                bpl L8C74
112	.8a3c		70 0c		bvs $8a4a	                bvs L8C74

114	.8a3e						L8C68:
115	.8a3e		20 95 8d	jsr $8d95	                jsr L8F84
116	.8a41		ae f1 02	ldx $02f1	                ldx osfileParameterBlock+4
117	.8a44		4d ee 02	eor $02ee	                eor osfileParameterBlock+1
118	.8a47		29 40		and #$40	                and #$40
119	.8a49		60		rts		                rts

121							;-------------------------------------------------------------------------

123	.8a4a						L8C74:
124	.8a4a		20 2f ab	jsr $ab2f	                jsr doFollowingError

126							;-------------------------------------------------------------------------

128	>8a4d		80				                .byte $80
129	>8a4e		42 61 64 20 69 64		                .text "Bad id"
130	>8a54		00				                .byte 0

132							;-------------------------------------------------------------------------

134	.8a55						L8C7F:
135	.8a55		20 10 84	jsr $8410	                jsr readHexDigit
136	.8a58		2c 6c e3	bit $e36c	                bit mos.valueFF
137	.8a5b		b0 0d		bcs $8a6a	                bcs L8C94
138	.8a5d		29 df		and #$df	                and #$DF
139	.8a5f		c9 5b		cmp #$5b	                cmp #$5B
140	.8a61		b0 1d		bcs $8a80	                bcs L8CAA
141	.8a63		c9 57		cmp #$57	                cmp #'W'
142	.8a65		90 19		bcc $8a80	                bcc L8CAA
143	.8a67		e9 53		sbc #$53	                sbc #'S'
144	.8a69		c8		iny		                iny

146	.8a6a						L8C94:
147	.8a6a		c9 01		cmp #$01	                cmp #1
148	.8a6c		d0 09		bne $8a77	                bne L8CA1
149	.8a6e		88		dey		                dey
150	.8a6f		20 b0 83	jsr $83b0	                jsr parseNumberFromString
151	.8a72		8a		txa		                txa
152	.8a73		c9 10		cmp #$10	                cmp #$10
153	.8a75		b0 d3		bcs $8a4a	                bcs L8C74

155	.8a77						L8CA1:
156	.8a77		8d f1 02	sta $02f1	                sta osfileParameterBlock+4
157	.8a7a		a9 40		lda #$40	                lda #$40
158	.8a7c		1c ee 02	trb $02ee	                trb osfileParameterBlock+1
159	.8a7f		b8		clv		                clv

161	.8a80						L8CAA:
162	.8a80		4c 80 f2	jmp $f280	                jmp mos.skipSpacesAndCheckForCRInStringInput


165							;-------------------------------------------------------------------------

167	.8a83						starSRDATAOrStarSRROM:
168	.8a83		48		pha		                pha
169	.8a84		20 55 8a	jsr $8a55	                jsr L8C7F
170	.8a87		70 23		bvs $8aac	                bvs L8CD6
171	.8a89		d0 21		bne $8aac	                bne L8CD6
172	.8a8b		68		pla		                pla
173							                .if version==400
175							                .else
176	.8a8c		0a		asl a		                asl a
177	.8a8d		8d ee 02	sta $02ee	                sta osfileParameterBlock+1
178							                .endif
179	.8a90		20 21 8a	jsr $8a21	                jsr L8C4B
180	.8a93		b0 b5		bcs $8a4a	                bcs L8C74
181	.8a95		d0 06		bne $8a9d	                bne L8CC7
182	.8a97		1d a1 02	ora $02a1,x	                ora romInformationTable,x
183	.8a9a		f0 0a		beq $8aa6	                beq L8CD0
184	.8a9c		60		rts		                rts

186							;-------------------------------------------------------------------------

188	.8a9d						L8CC7:
189	.8a9d		ad de df	lda $dfde	                lda hazel.dfde
190	.8aa0		5d 5d 8d	eor $8d5d,x	                eor L8F4C,x
191	.8aa3		8d de df	sta $dfde	                sta hazel.dfde

193	.8aa6						L8CD0:
194	.8aa6		20 5b 8d	jsr $8d5b	                jsr L8F4A
195	.8aa9		4c b7 f9	jmp $f9b7	                jmp mos.LF87C

197							;-------------------------------------------------------------------------

199	.8aac						L8CD6:
200	.8aac		4c 37 f9	jmp $f937	                jmp mos.badCommandError

202							;-------------------------------------------------------------------------

204	.8aaf						L8CD9:
205	.8aaf		20 c0 8a	jsr $8ac0	                jsr L8CEA
206	.8ab2		b0 0b		bcs $8abf	                bcs locret_8CE9
207	.8ab4		20 45 f9	jsr $f945	                jsr mos.LF846
208	.8ab7		8c f2 02	sty $02f2	                sty osfileParameterBlock+5
209	.8aba		b5 01		lda $01,x	                lda 1,x
210	.8abc		8d f3 02	sta $02f3	                sta osfileParameterBlock+6

212	.8abf						locret_8CE9:
213	.8abf		60		rts		                rts


216							;-------------------------------------------------------------------------

218	.8ac0						L8CEA:
219	.8ac0		a2 b0		ldx #$b0	                ldx #$B0
220	.8ac2		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
221	.8ac5		10 02		bpl $8ac9	                bpl L8CF3
222	.8ac7		a2 b2		ldx #$b2	                ldx #$B2

224	.8ac9						L8CF3:
225	.8ac9		74 00		stz $00,x	                stz 0,x
226	.8acb		ac f2 02	ldy $02f2	                ldy osfileParameterBlock+5
227	.8ace		98		tya		                tya
228	.8acf		18		clc		                clc
229	.8ad0		6d ef 02	adc $02ef	                adc osfileParameterBlock+2
230	.8ad3		8d ef 02	sta $02ef	                sta osfileParameterBlock+2
231	.8ad6		ad f3 02	lda $02f3	                lda osfileParameterBlock+6
232	.8ad9		95 01		sta $01,x	                sta 1,x
233	.8adb		6d f0 02	adc $02f0	                adc osfileParameterBlock+3
234	.8ade		8d f0 02	sta $02f0	                sta osfileParameterBlock+3
235	.8ae1		38		sec		                sec
236	.8ae2		20 73 8d	jsr $8d73	                jsr L8F62


239							;-------------------------------------------------------------------------

241	.8ae5						L8D0F:

243	.8ae5		cc ef 02	cpy $02ef	                cpy osfileParameterBlock+2
244	.8ae8		d0 08		bne $8af2	                bne L8D1C
245	.8aea		b5 01		lda $01,x	                lda 1,x
246	.8aec		cd f0 02	cmp $02f0	                cmp osfileParameterBlock+3
247	.8aef		d0 01		bne $8af2	                bne L8D1C
248	.8af1		60		rts		                rts

250							;-------------------------------------------------------------------------

252	.8af2						L8D1C:
253	.8af2		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
254	.8af5		50 32		bvc $8b29	                bvc L8D53
255	.8af7		b5 01		lda $01,x	                lda 1,x
256	.8af9		c9 c0		cmp #$c0	                cmp #$C0
257	.8afb		90 2c		bcc $8b29	                bcc L8D53
258	.8afd		a9 80		lda #$80	                lda #$80
259	.8aff		95 01		sta $01,x	                sta 1,x
260	.8b01		ee f1 02	inc $02f1	                inc osfileParameterBlock+4
261	.8b04		ad f1 02	lda $02f1	                lda osfileParameterBlock+4
262	.8b07		c9 08		cmp #$08	                cmp #8
263	.8b09		b0 2e		bcs $8b39	                bcs L8D63
264	.8b0b		da		phx		                phx
265	.8b0c		20 21 8a	jsr $8a21	                jsr L8C4B
266	.8b0f		d0 28		bne $8b39	                bne L8D63
267	.8b11		fa		plx		                plx
268	.8b12		a0 10		ldy #$10	                ldy #$10
269	.8b14		ad ef 02	lda $02ef	                lda osfileParameterBlock+2
270	.8b17		38		sec		                sec
271	.8b18		e9 f0		sbc #$f0	                sbc #$F0
272	.8b1a		8d ef 02	sta $02ef	                sta osfileParameterBlock+2
273	.8b1d		ad f0 02	lda $02f0	                lda osfileParameterBlock+3
274	.8b20		e9 3f		sbc #$3f	                sbc #$3F
275	.8b22		8d f0 02	sta $02f0	                sta osfileParameterBlock+3
276	.8b25		18		clc		                clc
277	.8b26		20 73 8d	jsr $8d73	                jsr L8F62

279	.8b29						L8D53:
280	.8b29		ad f1 02	lda $02f1	                lda osfileParameterBlock+4
281	.8b2c		18		clc		                clc

283	.8b2d						locret_8D57:
284	.8b2d		60		rts		                rts

286							;-------------------------------------------------------------------------

288	.8b2e						L8D58:
289	.8b2e		20 f9 92	jsr $92f9	                jsr parseHexAddressFromCommandLine

291	.8b31						L8D5B:
292	.8b31		bd ef 02	lda $02ef,x	                lda osfileParameterBlock+2,x
293	.8b34		1d f0 02	ora $02f0,x	                ora osfileParameterBlock+3,x
294	.8b37		f0 f4		beq $8b2d	                beq locret_8D57

296	.8b39						L8D63:
297	.8b39		4c e9 92	jmp $92e9	                jmp badAddressError

299							;-------------------------------------------------------------------------

301	.8b3c						L8D66:
302							                .if version!=400
303	.8b3c		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
304	.8b3f		29 df		and #$df	                and #$DF
305	.8b41		c9 49		cmp #$49	                cmp #'I'
306	.8b43		d0 0d		bne $8b52	                bne L8D7C
307	.8b45		c8		iny		                iny
308	.8b46		ad ee 02	lda $02ee	                lda osfileParameterBlock+1
309	.8b49		c9 80		cmp #$80	                cmp #$80
310	.8b4b		d0 3d		bne $8b8a	                bne L8DB4
311	.8b4d		09 20		ora #$20	                ora #$20
312	.8b4f		8d ee 02	sta $02ee	                sta osfileParameterBlock+1

314	.8b52						L8D7C:
315	.8b52		4c 80 f2	jmp $f280	                jmp mos.skipSpacesAndCheckForCRInStringInput
316							                .endif

318							;-------------------------------------------------------------------------

320	.8b55						starSRREADOrStarSRWRITE:
321							                .if version==400
323							                .else
324	.8b55		0a		asl a		                asl a
325	.8b56		8d ee 02	sta $02ee	                sta osfileParameterBlock+1
326							                .endif
327	.8b59		a2 09		ldx #$09	                ldx #9
328	.8b5b		20 f9 92	jsr $92f9	                jsr parseHexAddressFromCommandLine
329	.8b5e		20 65 8d	jsr $8d65	                jsr L8F54
330	.8b61		a2 02		ldx #$02	                ldx #2
331	.8b63		20 f9 92	jsr $92f9	                jsr parseHexAddressFromCommandLine
332	.8b66		70 10		bvs $8b78	                bvs L8DA2
333	.8b68		a2 fc		ldx #$fc	                ldx #$FC

335	.8b6a						L8D94:
336	.8b6a		bd f3 01	lda $01f3,x	                lda osfileParameterBlock+2-$FC,x
337	.8b6d		fd fa 01	sbc $01fa,x	                sbc osfileParameterBlock+9-$FC,x
338	.8b70		9d f3 01	sta $01f3,x	                sta osfileParameterBlock+2-$FC,x
339	.8b73		e8		inx		                inx
340	.8b74		d0 f4		bne $8b6a	                bne L8D94
341	.8b76		90 c1		bcc $8b39	                bcc L8D63

343	.8b78						L8DA2:
344	.8b78		a2 02		ldx #$02	                ldx #2
345	.8b7a		20 31 8b	jsr $8b31	                jsr L8D5B
346	.8b7d		a2 05		ldx #$05	                ldx #5
347	.8b7f		20 2e 8b	jsr $8b2e	                jsr L8D58
348	.8b82		20 55 8a	jsr $8a55	                jsr L8C7F
349							                .if version>=500||version==350
350	.8b85		20 3c 8b	jsr $8b3c	                jsr L8D66
351							                .endif
352	.8b88		f0 03		beq $8b8d	                beq L8DB7

354	.8b8a						L8DB4:
355	.8b8a		4c 37 f9	jmp $f937	                jmp mos.badCommandError

357							;-------------------------------------------------------------------------

359	.8b8d						L8DB7:

361	.8b8d		08		php		                php
362	.8b8e		20 ec 89	jsr $89ec	                jsr L8C16
363	.8b91		f0 03		beq $8b96	                beq L8DC0
364	.8b93		20 4a 8a	jsr $8a4a	                jsr L8C74

366	.8b96						L8DC0:
367	.8b96		20 51 8d	jsr $8d51	                jsr L8F40
368							                .if version==400||version==350
369	.8b99		ad f8 02	lda $02f8	                lda osfileParameterBlock+11
370	.8b9c		2d f9 02	and $02f9	                and osfileParameterBlock+12
371	.8b9f		1a		inc a		                inc a
372	.8ba0		2d 7a 02	and $027a	                and tubePresence
373	.8ba3		d0 07		bne $8bac	                bne L8952
374							                .endif
375	.8ba5		20 af 8a	jsr $8aaf	                jsr L8CD9
376	.8ba8		28		plp		                plp
377							                .if version==400
379							                .else
380	.8ba9		4c ef f9	jmp $f9ef	                jmp mos.LF8D1
381							                .endif

383							;-------------------------------------------------------------------------

385							                .if version<500
386	.8bac						L8952:
387	.8bac		a9 c8		lda #$c8	                lda #$c8
388	.8bae		20 06 04	jsr $0406	                jsr $0406
389	.8bb1		90 f9		bcc $8bac	                bcc L8952
390	.8bb3		a9 00		lda #$00	                lda #0
391	.8bb5		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
392	.8bb8		30 01		bmi $8bbb	                bmi L8961_sram
393	.8bba		1a		inc a		                inc a
394	.8bbb						L8961_sram:
395	.8bbb		a2 f6		ldx #$f6	                ldx #$f6        ;TODO
396	.8bbd		a0 02		ldy #$02	                ldy #$02        ;TODO
397	.8bbf		20 06 04	jsr $0406	                jsr $0406
398	.8bc2		20 c0 8a	jsr $8ac0	                jsr L8CEA
399	.8bc5		b0 03		bcs $8bca	                bcs L8970
400	.8bc7		20 75 f9	jsr $f975	                jsr mos.LF7D1
401	.8bca						L8970:
402	.8bca		a9 88		lda #$88	                lda #$88
403	.8bcc		20 06 04	jsr $0406	                jsr $0406
404	.8bcf		28		plp		                plp
405	.8bd0		60		rts		                rts
406							                .endif

408							;-------------------------------------------------------------------------

410	.8bd1						starSRLOADOrStarSRSAVE:
411							                .if version==400
413							                .else
414	.8bd1		0a		asl a		                asl a
415	.8bd2		8d ee 02	sta $02ee	                sta osfileParameterBlock+1
416							                .endif
417	.8bd5		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
418	.8bd8		86 f2		stx $f2		                stx stringInputBufferAddress
419	.8bda		84 f3		sty $f3		                sty stringInputBufferAddress+1
420	.8bdc		8e ef 02	stx $02ef	                stx osfileParameterBlock+2
421	.8bdf		8c f0 02	sty $02f0	                sty osfileParameterBlock+3
422	.8be2		a0 00		ldy #$00	                ldy #0
423	.8be4		20 ee f1	jsr $f1ee	                jsr mos.gsinitForFilenameParsing

425	.8be7						L8DE0:
426	.8be7		20 00 f2	jsr $f200	                jsr mos.gsreadEntryPoint
427	.8bea		90 fb		bcc $8be7	                bcc L8DE0
428	.8bec		a2 05		ldx #$05	                ldx #5
429	.8bee		20 2e 8b	jsr $8b2e	                jsr L8D58
430	.8bf1		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
431	.8bf4		30 1e		bmi $8c14	                bmi L8E0D
432	.8bf6		20 65 8d	jsr $8d65	                jsr L8F54
433	.8bf9		a2 07		ldx #$07	                ldx #7
434	.8bfb		20 2e 8b	jsr $8b2e	                jsr L8D58
435	.8bfe		70 14		bvs $8c14	                bvs L8E0D
436	.8c00		38		sec		                sec
437	.8c01		a2 fe		ldx #$fe	                ldx #$FE

439	.8c03						L8DFC:
440	.8c03		bd f6 01	lda $01f6,x	                lda osfileParameterBlock+7-$FE,x
441	.8c06		fd f4 01	sbc $01f4,x	                sbc osfileParameterBlock+5-$FE,x
442	.8c09		9d f6 01	sta $01f6,x	                sta osfileParameterBlock+7-$FE,x
443	.8c0c		e8		inx		                inx
444	.8c0d		d0 f4		bne $8c03	                bne L8DFC
445	.8c0f		b0 03		bcs $8c14	                bcs L8E0D
446	.8c11		4c 39 8b	jmp $8b39	                jmp L8D63

448							;-------------------------------------------------------------------------

450	.8c14						L8E0D:
451	.8c14		20 55 8a	jsr $8a55	                jsr L8C7F
452	.8c17		9c f8 02	stz $02f8	                stz osfileParameterBlock+$B
453							                .if version==350
454	.8c1a		a2 ff		ldx #$ff	                ldx #$ff
457							                .endif
458							                .if version>=500||version==350
459	.8c1c		20 3c 8b	jsr $8b3c	                jsr L8D66
460							                .endif
461	.8c1f		29 df		and #$df	                and #$DF
462							                .if version==350
463	.8c21		c8		iny		                iny
464							                .endif
465	.8c22		c9 51		cmp #$51	                cmp #'Q'
466							                .if version==350
467	.8c24		f0 0b		beq $8c31	                beq L8E20
470							                .endif
471							                .if version==350
472	.8c26		88		dey		                dey
473							                .endif
474							                .if version==350
475	.8c27		9c f6 02	stz $02f6	                stz osfileParameterBlock+$9
476	.8c2a		a2 dc		ldx #$dc	                ldx #$dc
477	.8c2c		8e f7 02	stx $02f7	                stx osfileParameterBlock+$a
478	.8c2f		a2 03		ldx #$03	                ldx #$03
482							                .endif

484	.8c31						L8E20:
485	.8c31		8e f9 02	stx $02f9	                stx osfileParameterBlock+$C
486	.8c34		ae 34 fe	ldx $fe34	                ldx ACCCON
487							                .if version==400
489							                .else
490	.8c37		20 3c 8b	jsr $8b3c	                jsr L8D66
491							                .endif
492	.8c3a		f0 16		beq $8c52	                beq L8E41
493	.8c3c		4c 8a 8b	jmp $8b8a	                jmp L8DB4

495							;-------------------------------------------------------------------------

497	.8c3f						L8E2E:
498	.8c3f		ae 34 fe	ldx $fe34	                ldx ACCCON
499	.8c42		20 08 ed	jsr $ed08	                jsr mos.selectHAZEL
500	.8c45		9c c6 df	stz $dfc6	                stz hazel.tempFSFlag
501	.8c48		a0 0b		ldy #$0b	                ldy #$B

503	.8c4a						L8E39:
504	.8c4a		b1 f0		lda ($f0),y	                lda ($F0),y
505	.8c4c		99 ee 02	sta $02ee,y	                sta osfileParameterBlock+1,y
506	.8c4f		88		dey		                dey
507	.8c50		10 f8		bpl $8c4a	                bpl L8E39
508							                .if version==400
511							                .endif

513	.8c52						L8E41:
514	.8c52		08		php		                php
515	.8c53		da		phx		                phx
516	.8c54		20 ec 89	jsr $89ec	                jsr L8C16
517	.8c57		f0 03		beq $8c5c	                beq L8E4B
518	.8c59		4c 4a 8a	jmp $8a4a	                jmp L8C74

520							;-------------------------------------------------------------------------

522	.8c5c						L8E4B:
523	.8c5c		ad f9 02	lda $02f9	                lda osfileParameterBlock+$C
524	.8c5f		30 0b		bmi $8c6c	                bmi L8E5B
525	.8c61		0d f8 02	ora $02f8	                ora osfileParameterBlock+$B
526	.8c64		d0 1d		bne $8c83	                bne L8E72
527	.8c66		a9 02		lda #$02	                lda #2
528	.8c68		a0 dd		ldy #$dd	                ldy #$DD
529	.8c6a		80 0b		bra $8c77	                bra L8E66

531							;-------------------------------------------------------------------------

533	.8c6c						L8E5B:
534	.8c6c		20 33 f1	jsr $f133	                jsr mos.osbyte84
535	.8c6f		98		tya		                tya
536	.8c70		38		sec		                sec
537	.8c71		ed 44 02	sbc $0244	                sbc oshwm
538	.8c74		ac 44 02	ldy $0244	                ldy oshwm

540	.8c77						L8E66:
541	.8c77		9c f6 02	stz $02f6	                stz osfileParameterBlock+9
542	.8c7a		8c f7 02	sty $02f7	                sty osfileParameterBlock+$A
543	.8c7d		9c f8 02	stz $02f8	                stz osfileParameterBlock+$B
544	.8c80		8d f9 02	sta $02f9	                sta osfileParameterBlock+$C

546	.8c83						L8E72:
547	.8c83		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
548	.8c86		10 38		bpl $8cc0	                bpl L8EAF
549	.8c88		a9 40		lda #$40	                lda #$40
550	.8c8a		20 2c 8d	jsr $8d2c	                jsr L8F1B

552	.8c8d						L8E7C:
553	.8c8d		38		sec		                sec
554	.8c8e		20 fe 8c	jsr $8cfe	                jsr L8EED
555	.8c91		a9 04		lda #$04	                lda #4
556	.8c93		20 25 8d	jsr $8d25	                jsr L8F14_500
557	.8c96		08		php		                php
558	.8c97		90 0e		bcc $8ca7	                bcc L8E96
559	.8c99		a2 fe		ldx #$fe	                ldx #$FE

561	.8c9b						L8E8A:
562	.8c9b		bd f1 01	lda $01f1,x	                lda osfileParameterBlock+2-$FE,x

564	.8c9e						L8E8D:
565	.8c9e		fd ce de	sbc $dece,x	                sbc hazel.moveOSGBPB+OSGBPBParameterBlock.count+0-$fe,x
566	.8ca1		9d f1 01	sta $01f1,x	                sta osfileParameterBlock+2-$FE,x
567	.8ca4		e8		inx		                inx
568	.8ca5		d0 f4		bne $8c9b	                bne L8E8A

570	.8ca7						L8E96:
571	.8ca7		20 af 8a	jsr $8aaf	                jsr L8CD9
572	.8caa		28		plp		                plp
573	.8cab		90 e0		bcc $8c8d	                bcc L8E7C

575	.8cad						L8E9C:
576	.8cad		ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle
577	.8cb0		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
578	.8cb3		a9 00		lda #$00	                lda #0
579	.8cb5		20 ce ff	jsr $ffce	                jsr OSFIND
580	.8cb8		68		pla		                pla
581	.8cb9		8d 34 fe	sta $fe34	                sta ACCCON
582	.8cbc		28		plp		                plp
583							                .if version==400
585							                .else
586	.8cbd		4c ef f9	jmp $f9ef	                jmp mos.LF8D1
587							                .endif

589							;-------------------------------------------------------------------------

591	.8cc0						L8EAF:
592	.8cc0		a9 80		lda #$80	                lda #$80
593	.8cc2		20 2c 8d	jsr $8d2c	                jsr L8F1B

595	.8cc5						L8EB4:
596	.8cc5		38		sec		                sec
597	.8cc6		a2 fe		ldx #$fe	                ldx #$FE

599	.8cc8						L8EB7:
600	.8cc8		bd f6 01	lda $01f6,x	                lda osfileParameterBlock+7-$FE,x
601	.8ccb		9d b2 ff	sta $ffb2,x	                sta ($B0-$FE)&$ffff,x
602	.8cce		fd fa 01	sbc $01fa,x	                sbc osfileParameterBlock+$B-$FE,x
603	.8cd1		9d f6 01	sta $01f6,x	                sta osfileParameterBlock+7-$FE,x
604	.8cd4		e8		inx		                inx
605	.8cd5		d0 f1		bne $8cc8	                bne L8EB7
606	.8cd7		0d f4 02	ora $02f4	                ora osfileParameterBlock+7
607	.8cda		08		php		                php
608	.8cdb		20 fe 8c	jsr $8cfe	                jsr L8EED
609	.8cde		20 af 8a	jsr $8aaf	                jsr L8CD9
610	.8ce1		a9 02		lda #$02	                lda #2
611	.8ce3		20 25 8d	jsr $8d25	                jsr L8F14_500
612	.8ce6		28		plp		                plp
613	.8ce7		90 c4		bcc $8cad	                bcc L8E9C
614	.8ce9		f0 c2		beq $8cad	                beq L8E9C
615	.8ceb		80 d8		bra $8cc5	                bra L8EB4

617							;-------------------------------------------------------------------------

619							                .if version==400
624							                .endif

626							;-------------------------------------------------------------------------

628	.8ced						L8EDC:
629	.8ced		a9 00		lda #$00	                lda #0
630	.8cef		a2 07		ldx #$07	                ldx #7

632	.8cf1						L8EE0:
633	.8cf1		48		pha		                pha
634	.8cf2		20 d5 f9	jsr $f9d5	                jsr mos.LF89A
635	.8cf5		68		pla		                pla
636	.8cf6		2a		rol a		                rol a
637	.8cf7		ca		dex		                dex
638	.8cf8		e0 04		cpx #$04	                cpx #4
639	.8cfa		b0 f5		bcs $8cf1	                bcs L8EE0
640	.8cfc		aa		tax		                tax
641	.8cfd		60		rts		                rts

643							;-------------------------------------------------------------------------

645	.8cfe						L8EED:
646	.8cfe		ad d4 df	lda $dfd4	                lda hazel.moveSrcHandle
647	.8d01		8d c7 df	sta $dfc7	                sta hazel.moveOSGBPB+0
648	.8d04		a2 01		ldx #$01	                ldx #1

650	.8d06						L8EF5:
651	.8d06		bd f6 02	lda $02f6,x	                lda osfileParameterBlock+9,x
652	.8d09		9d c8 df	sta $dfc8,x	                sta $DFC8,x
653	.8d0c		bd f8 02	lda $02f8,x	                lda osfileParameterBlock+$B,x
654	.8d0f		b0 02		bcs $8d13	                bcs L8F02
655	.8d11		b5 b0		lda $b0,x	                lda $B0,x

657	.8d13						L8F02:
658	.8d13		9d cc df	sta $dfcc,x	                sta $DFCC,x
659	.8d16		9d ef 02	sta $02ef,x	                sta osfileParameterBlock+2,x
660	.8d19		a9 ff		lda #$ff	                lda #$FF
661	.8d1b		9d ca df	sta $dfca,x	                sta $DFCA,x
662	.8d1e		9e ce df	stz $dfce,x	                stz $DFCE,x
663	.8d21		ca		dex		                dex
664	.8d22		10 e2		bpl $8d06	                bpl L8EF5
665	.8d24		60		rts		                rts


668							;-------------------------------------------------------------------------

670	.8d25						L8F14_500:
671	.8d25		a2 c7		ldx #$c7	                ldx #<hazel.moveOSGBPB
672	.8d27		a0 df		ldy #$df	                ldy #>hazel.moveOSGBPB
673	.8d29		4c d1 ff	jmp $ffd1	                jmp OSGBPB


676							;-------------------------------------------------------------------------

678	.8d2c						L8F1B:
679	.8d2c		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
680	.8d2f		ae ef 02	ldx $02ef	                ldx osfileParameterBlock+2
681	.8d32		ac f0 02	ldy $02f0	                ldy osfileParameterBlock+3
682	.8d35		20 ce ff	jsr $ffce	                jsr OSFIND
683	.8d38		aa		tax		                tax
684	.8d39		d0 13		bne $8d4e	                bne L8F3D
685	.8d3b		20 2f ab	jsr $ab2f	                jsr doFollowingError

687							;-------------------------------------------------------------------------

689	>8d3e		d6				                .byte $D6
690	>8d3f		46 69 6c 65 20 6e 6f 74		                .text "File not found"
	>8d47		20 66 6f 75 6e 64
691	>8d4d		00				                .byte 0

693							;-------------------------------------------------------------------------

695	.8d4e						L8F3D:
696	.8d4e		8d d4 df	sta $dfd4	                sta hazel.moveSrcHandle


699							;-------------------------------------------------------------------------

701	.8d51						L8F40:
702	.8d51		ae f1 02	ldx $02f1	                ldx osfileParameterBlock+4
703	.8d54		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
704	.8d57		10 07		bpl $8d60	                bpl locret_8F4F
705	.8d59		70 05		bvs $8d60	                bvs locret_8F4F

707	.8d5b						L8F4A:
708	.8d5b		a9 02		lda #$02	                lda #2

710	.8d5d						L8F4C:
711	.8d5d		9d a1 02	sta $02a1,x	                sta romInformationTable,x

713	.8d60						locret_8F4F:
714	.8d60		60		rts		                rts


717							;-------------------------------------------------------------------------

719	>8d61		01				unk_8F50:       .byte 1
720	>8d62		02				                .byte 2
721	>8d63		04				                .byte 4
722	>8d64		08				                .byte 8

724							;-------------------------------------------------------------------------

726	.8d65						L8F54:
727	.8d65		b8		clv		                clv
728	.8d66		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
729	.8d68		c9 2b		cmp #$2b	                cmp #'+'
730	.8d6a		d0 06		bne $8d72	                bne locret_8F61
731	.8d6c		2c 6c e3	bit $e36c	                bit mos.valueFF
732	.8d6f		20 7f f2	jsr $f27f	                jsr mos.incAndSkipSpaces

734	.8d72						locret_8F61:
735	.8d72		60		rts		                rts


738							;-------------------------------------------------------------------------

740	.8d73						L8F62:
741	.8d73		da		phx		                phx
742	.8d74		8a		txa		                txa
743	.8d75		49 02		eor #$02	                eor #2
744	.8d77		aa		tax		                tax
745	.8d78		90 0a		bcc $8d84	                bcc L8F73
746	.8d7a		ad f6 02	lda $02f6	                lda osfileParameterBlock+9
747	.8d7d		95 00		sta $00,x	                sta 0,x
748	.8d7f		ad f7 02	lda $02f7	                lda osfileParameterBlock+$A
749	.8d82		95 01		sta $01,x	                sta 1,x

751	.8d84						L8F73:
752	.8d84		8c ed 02	sty $02ed	                sty osfileParameterBlock
753	.8d87		b5 00		lda $00,x	                lda 0,x
754	.8d89		38		sec		                sec
755	.8d8a		ed ed 02	sbc $02ed	                sbc osfileParameterBlock
756	.8d8d		95 00		sta $00,x	                sta 0,x
757	.8d8f		b0 02		bcs $8d93	                bcs L8F82
758	.8d91		d6 01		dec $01,x	                dec 1,x

760	.8d93						L8F82:
761	.8d93		fa		plx		                plx
762	.8d94		60		rts		                rts


765							;-------------------------------------------------------------------------

767	.8d95						L8F84:
768	.8d95		e0 04		cpx #$04	                cpx #4
769	.8d97		90 1c		bcc $8db5	                bcc L8FA4
770	.8d99		e0 08		cpx #$08	                cpx #8
771	.8d9b		b0 18		bcs $8db5	                bcs L8FA4

773	.8d9d						L8F8C:
774	.8d9d		ac 34 fe	ldy $fe34	                ldy ACCCON
775	.8da0		20 08 ed	jsr $ed08	                jsr mos.selectHAZEL
776	.8da3		bd 5d 8d	lda $8d5d,x	                lda unk_8F50-4,x
777	.8da6		ae de df	ldx $dfde	                ldx hazel.dfde
778	.8da9		2d de df	and $dfde	                and hazel.dfde
779	.8dac		f0 02		beq $8db0	                beq L8F9F
780	.8dae		a9 40		lda #$40	                lda #$40

782	.8db0						L8F9F:
783	.8db0		8c 34 fe	sty $fe34	                sty ACCCON
784	.8db3		18		clc		                clc
785	.8db4		60		rts		                rts

787							;-------------------------------------------------------------------------

789	.8db5						L8FA4:
790	.8db5		38		sec		                sec
791	.8db6		a9 00		lda #$00	                lda #0
792	.8db8		60		rts		                rts


:7	;******  Return to file: src/terminal.s65

927							                .include "osbyte_osword_table.s65"

:10	;******  Processing file: src/osbyte_osword_table.s65

1							; OSBYTE Dispatch Table
2							; =====================

4							; TODO structure probably the same as
5							; https://tobylobster.github.io/mos/mos/S-s15.html#SP1...

7							; entry:
8							;
9							; A = OSBYTE A
10							;
11							; X = OSBYTE X
12							;
13							; Y = OSBYTE Y
14							;
15							; ?originalA, ?originalX, ?originalY = OSBYTE arguments
16							;
17							; C=1
18							;
19							; N/Z set as per X
20							;

22	.8db9						osbyteAndOSWORDRoutineTable:
23							                ;Display MOS version D.2-18
24	>8db9		df ee				                .word mos.osbyte00

26							                ;Write user flag D.2-18
27	>8dbb		3f f0				                .word mos.osbyte01

29							                ;Specify input stream D.2-18
30							                .if version==400
32							                .else
33	>8dbd		0e ec				                .word mos.osbyte02
34							                .endif

36							                ;Specify output stream D.2-19
37	>8dbf		14 f0				                .word mos.osbyte03

39							                ;Enable/disable cursor editing
40	>8dc1		47 f0				                .word mos.osbyte04

42							                ;Write printer driver type D.2-20
43	>8dc3		2d f0				                .word mos.osbyte05

45							                ;Write printer ignore character D.2-21
46	>8dc5		24 f0				                .word mos.osbyte06

48							                ;Write RS423 receive rate D.2-21
49							                .if version==400
51							                .else
52	>8dc7		c7 eb				                .word mos.osbyte07
53							                .endif

55							                ;Write RS423 transmit rate D.2-22
56							                .if version==400
58							                .else
59	>8dc9		c5 eb				                .word mos.osbyte08
60							                .endif

62							                ;Write duration of first colour D.2-22
63	>8dcb		ec eb				                .word mos.osbyte09

65							                ;Write duration of second colour D.2-22
66	>8dcd		ee eb				                .word mos.osbyte0A

68							                ;Write keyboard auto-repeat delay D.2-22
69	>8dcf		45 f0				                .word mos.osbyte0B

71							                ;Write keyboard auto-repeat rate D.2-23
72	>8dd1		43 f0				                .word mos.osbyte0C

74							                ;Disable event D.2-23
75	>8dd3		34 ec				                .word mos.osbyte0D

77							                ;Enable event D.2-24
78	>8dd5		35 ec				                .word mos.osbyte0E

80							                ;Flush buffer D.2-24
81	>8dd7		1d e9				                .word mos.osbyte0F

83							                ;Write number of ADC channels D.2-25
84							                .if version==400
86							                .else
87	>8dd9		41 ec				                .word mos.osbyte10
88							                .endif

90							                ;Write next ADC channel to be sampled D.2-25
91							                .if version==400
93							                .else
94	>8ddb		76 e7				                .word mos.osbyte11
95							                .endif

97							                ;Reset soft keys D.2-26
98	>8ddd		93 f0				                .word mos.osbyte12

100							                ;Wait for vertical sync D.2-26
101	>8ddf		66 f0				                .word mos.osbyte13

103							                ;Restore default font definitions D.2-26
104	>8de1		38 97				                .word osbyte14

106							                ;Flush selected buffer D.2-27
107	>8de3		29 e9				                .word mos.osbyte15

109							                ;Increment ROM polling semaphore D.2-27
110	>8de5		9e f1				                .word mos.osbyte16

112							                ;Decrement ROM polling semaphore D.2-27
113	>8de7		a2 f1				                .word mos.osbyte17

115							                ; Reserved
116	>8de9		de ec				                .word mos.osbyteUnused

118							                ;Restore a group of font definitions D.2-28
119	>8deb		8f f1				                .word mos.osbyte19

121							                ; Not sure...
122							                .if version==350
123	>8ded		ed 8c				                .word terminal.L8EDC
126							                .endif

128							                ; Not sure...
129							                .if version==350
130	>8def		9d 8d				                .word terminal.L8F8C
133							                .endif

135							                ;Write 1MHz bus selection status D.2-29
136	>8df1		ef ed				                .word mos.osbyte6B

138							                ;Write usage of main/shadow memory D.2-30
139	>8df3		f3 ed				                .word mos.osbyte6C

141							                ;Make temporary Filing System permanent D.2-30
142	>8df5		82 f1				                .word mos.osbyte6D

144							                ;Unused
145	>8df7		de ec				                .word mos.osbyteUnused

147							                ;Unused
148	>8df9		de ec				                .word mos.osbyteUnused

150							                ;Select main/shadow memory for VDU access D.2-31
151	>8dfb		b2 ec				                .word mos.osbyte70

153							                ;Select main/shadow memory for display D.2-31
154	>8dfd		c2 ec				                .word mos.osbyte71

156							                ;Write usage of shadow memory D.2-31
157	>8dff		29 f0				                .word mos.osbyte72

159							                ;Unused
160	>8e01		aa ff				                .word mos.rtsFFAA

162							                ;Unused
163	>8e03		aa ff				                .word mos.rtsFFAA

165							                ;Read VDU status D.2-32
166	>8e05		24 ef				                .word mos.osbyte75

168							                ;Reflect keyboard status in keyboard LEDs D.2-33
169	>8e07		b1 f1				                .word mos.osbyte76

171							                ;Close all *SPOOL/*SPOOLON or *EXEC files D.2-33
172							                .if version==350
173	>8e09		c1 93				                .word terminal.L9423
176							                .endif

178							                ;Write keys pressed information D.2-33
179	>8e0b		37 f6				                .word mos.osbyte78

181							                ;Keyboard scan D.2-33
182	>8e0d		2e f6				                .word mos.callKEYV

184							                ;Keyboard scan from 16 decimal
185	>8e0f		3f f6				                .word mos.osbyte7A

187							                ;Inform MOS of printer driver going dormant
188	>8e11		07 e9				                .word mos.osbyte7B

190							                ;Clear escape condition
191	>8e13		ac eb				                .word mos.osbyte7C

193							                ;Set escape condition
194	>8e15		ad eb				                .word mos.osbyte7D

196							                ;Acknowledge escape condition
197	>8e17		92 eb				                .word mos.osbyte7E

199							                ;Check for end of file on an opened file
200	>8e19		5c f1				                .word mos.osbyte7F

202							                ;Read ADC channel or get buffer status
203							                .if version==400
205							                .else
206	>8e1b		8f ec				                .word mos.osbyte80
207							                .endif

209							                ;Read key with time limit
210	>8e1d		4e ec				                .word mos.osbyte81

212							                ;Read machine high order address
213	>8e1f		65 ec				                .word mos.osbyte82

215							                ;Read Operating System High Water Mark (OSHWM)
216	>8e21		31 f6				                .word mos.osbyte83

218							                ;Read top of user RAM
219	>8e23		33 f1				                .word mos.osbyte84

221							                ;Read top of user RAM for given mode
222	>8e25		49 f1				                .word mos.osbyte85

224							                ;Read text cursor position
225	>8e27		75 e2				                .word mos.osbyte86

227							                ;Read screen mode and character at text cursor position
228	>8e29		55 f1				                .word mos.osbyte87

230							                ;Execute user code
231	>8e2b		8d eb				                .word mos.osbyte88

233							                .if version<400
234	>8e2d		bb eb				                .word mos.osbyte89 ;Switch cassette motor relay
239							                .endif

241							                ;Insert character code into buffer
242	>8e2f		11 ea				                .word mos.osbyte8A

244							                ;Write Filing System options
245	>8e31		5b f1				                .word mos.osbyte8B

247							                .if version<400
248	>8e33		e8 ec				                .word mos.osbyte8C8D ;Select Cassette Filing System
251							                .endif


254							                ;Select ROM Filing System
255	>8e35		e8 ec				                .word mos.osbyte8C8D

257							                ;Enter language ROM
258	>8e37		86 e4				                .word mos.osbyte8E

260							                ;Issue paged ROM service request
261	>8e39		54 ed				                .word mos.osbyte8F

263							                ;Set vertical screen shift and interlace option
264	>8e3b		f3 f2				                .word mos.osbyte90

266							                ;Get character from buffer
267	>8e3d		c6 e9				                .word mos.osbyte91

269							                ;Read from FRED (&FC00 â<80><93> &FCFF)
270	>8e3f		ca f5				                .word mos.osbyte92

272							                ;Write to FRED (&FC00 â<80><93> &FCFF)
273	>8e41		0e f3				                .word mos.osbyte93

275							                ;Read from JIM (&FD00 - &FDFF)
276	>8e43		da f5				                .word mos.osbyte94

278							                ;Write to JIM (&FD00 - &FDFF)
279	>8e45		04 f3				                .word mos.osbyte95

281							                ;Read from SHEILA (&FE00 - &FEFF)
282	>8e47		ab ff				                .word mos.osbyte96

284							                ;Write to SHEILA (&FE00 - &FEFF)
285	>8e49		09 f3				                .word mos.osbyte97

287							                ;Examine buffer status
288	>8e4b		c1 e9				                .word mos.osbyte98

290							                ;Insert character code into buffer checking for escape
291							                .if version==400
293							                .else
294	>8e4d		55 ea				                .word mos.osbyte99
295							                .endif

297							                ;Write video ULA control register
298	>8e4f		d0 f1				                .word mos.osbyte9A

300							                ;Write to video ULA palette register and copy
301	>8e51		e1 f1				                .word mos.osbyte9B

303							                ;Read/write serial ACIA control register and copy
304							                .if version==400
306							                .else
307	>8e53		ec e8				                .word mos.osbyte9C
308							                .endif

310							                ;Write byte across Tube
311	>8e55		af ff				                .word mos.osbyte9D

313							                ;reserved for the speech system
314	>8e57		de ec				                .word mos.osbyteUnused

316							                ;reserved for the speech system
317	>8e59		de ec				                .word mos.osbyteUnused

319							                ;Read VDU variable value
320	>8e5b		70 f0				                .word mos.osbyteA0

322							                ;Read CMOS RAM
323							                .if version==350
324	>8e5d		9a 96				                .word terminal.readCMOSByte
327							                .endif

329							                ;Write CMOS RAM
330							                .if version==350
331	>8e5f		c8 96				                .word terminal.writeCMOSByte
334							                .endif

336							                ;reserved for applications software
337	>8e61		de ec				                .word mos.osbyteUnused

339							                ;Check processor type
340	>8e63		10 e5				                .word mos.osbyteA4

342							                ;Read output cursor position
343	>8e65		49 e2				                .word mos.osbyteA5

345							                ;handle osbyte A6-FF
346	>8e67		4c f0				                .word mos.osbyteA6

348							                ;*LINE - not part of the above table???
349	>8e69		8f eb				                .word mos.callUSERV

351							;-------------------------------------------------------------------------
352							;
353							; OSWORD dispatch table. Must follow on from the OSBYTE table.
354							;
355							; entry:
356							;
357							; A = 0th byte of parameter block
358							;
359							; X = OSWORD X
360							;
361							; Y = 0
362							;
363							; ?originalA, ?originalX, ?originalY = OSWORD arguments
364							;
365							; C=1
366							;
367							; N/Z set as per X
368							;
369	.8e6b						oswordRoutineTable:

371							;Read line from input stream to memory
372	>8e6b		a0 ef				                .word mos.osword00

374							                ;Read system clock
375	>8e6d		73 ef				                .word mos.osword01

377							                ;Write system clock
378	>8e6f		86 ef				                .word mos.osword02

380							                ;Read interval timer
381	>8e71		6f ef				                .word mos.osword03

383							                ;Write interval timer
384	>8e73		82 ef				                .word mos.osword04

386							                ;Read byte from I/O processor memory
387	>8e75		cb ee				                .word mos.osword05

389							                ;Write byte to I/O processor memory
390	>8e77		01 ee				                .word mos.osword06

392							                ;Generate a sound
393	>8e79		ec ee				                .word mos.osword07

395							                ;Define a sound envelope
396	>8e7b		4d ef				                .word mos.osword08

398							                ;Read pixel logical colour
399	>8e7d		c9 f0				                .word mos.osword09

401							                ;Read a character definition
402	>8e7f		ee f0				                .word mos.osword0A

404							                ;Read the palette
405	>8e81		b8 f0				                .word mos.osword0B

407							                ;Write the palette
408	>8e83		06 f1				                .word mos.osword0C

410							                ;Read current and previous graphics cursor positions
411	>8e85		14 f1				                .word mos.osword0D

413							                ;Read CMOS clock
414	>8e87		1f ee				                .word mos.osword0E

416							                ;Write CMOS clock
417							                .if version==350
418	>8e89		39 94				                .word terminal.osword0F
421							                .endif

423							                .if version==350
424	>8e8b		c8 89				                .word terminal.L8BF2
427							                .endif

429							                .if version==350
430	>8e8d		3f 8c				                .word terminal.L8E2E
433							                .endif


:7	;******  Return to file: src/terminal.s65

937							                .endif

939							;-------------------------------------------------------------------------

941							                .if version>=500
949							                .endif

951							;-------------------------------------------------------------------------

953							                .if version<500&&version!=350
1071							                .endif

1073							;-------------------------------------------------------------------------
1074							;
1075							; [MasRef G.5-8]
1076							;
1077	.8e8f						starPRINT:
1078	.8e8f		a9 c0		lda #$c0	                lda #$C0
1079	.8e91		8d c2 df	sta $dfc2	                sta hazel.fsFlags
1080	.8e94		80 12		bra $8ea8	                bra L8ED2

1082							;-------------------------------------------------------------------------

1084	.8e96						starLIST:
1085	.8e96		4e c2 df	lsr $dfc2	                lsr hazel.fsFlags
1086	.8e99		9c c3 df	stz $dfc3	                stz hazel.lineNumberBCD+0
1087	.8e9c		9c c4 df	stz $dfc4	                stz hazel.lineNumberBCD+1
1088	.8e9f		80 04		bra $8ea5	                bra L8ECF

1090							;-------------------------------------------------------------------------

1092	.8ea1						starTYPE:
1093	.8ea1		38		sec		                sec
1094	.8ea2		6e c2 df	ror $dfc2	                ror hazel.fsFlags
1095	.8ea5						L8ECF:
1096	.8ea5		4e c2 df	lsr $dfc2	                lsr hazel.fsFlags
1097	.8ea8						L8ED2:
1098	.8ea8		9c c5 df	stz $dfc5	                stz hazel.lastCharPrinted
1099	.8eab		20 5f a5	jsr $a55f	                jsr openFileForReading
1100	.8eae						L8ED8:
1101	.8eae		24 ff		bit $ff		                bit $FF
1102	.8eb0		30 52		bmi $8f04	                bmi handleESCAPEWithFileOpen
1103	.8eb2		20 d7 ff	jsr $ffd7	                jsr OSBGET
1104	.8eb5		b0 2e		bcs $8ee5	                bcs closeFile
1105	.8eb7		2c c2 df	bit $dfc2	                bit hazel.fsFlags
1106	.8eba		70 05		bvs $8ec1	                bvs L8EEB
1107	.8ebc		48		pha		                pha
1108	.8ebd		20 cc 91	jsr $91cc	                jsr printLineNumber
1109	.8ec0		68		pla		                pla
1110	.8ec1						L8EEB:
1111	.8ec1		2c c2 df	bit $dfc2	                bit hazel.fsFlags
1112	.8ec4		30 14		bmi $8eda	                bmi L8F04
1113	.8ec6		c9 0d		cmp #$0d	                cmp #$0D
1114	.8ec8		f0 20		beq $8eea	                beq L8F14
1115	.8eca		c9 0a		cmp #$0a	                cmp #$0A
1116	.8ecc		f0 1c		beq $8eea	                beq L8F14
1117	.8ece		8d c5 df	sta $dfc5	                sta hazel.lastCharPrinted
1118	.8ed1		c9 22		cmp #$22	                cmp #'"'
1119	.8ed3		f0 05		beq $8eda	                beq L8F04
1120	.8ed5		20 04 99	jsr $9904	                jsr printGSREADChar
1121	.8ed8		80 03		bra $8edd	                bra L8F07

1123	.8eda						L8F04:
1124	.8eda		20 ee ff	jsr $ffee	                jsr OSWRCH
1125	.8edd						L8F07:
1126	.8edd		20 10 8f	jsr $8f10	                jsr bgetAndCheckForESCAPE
1127	.8ee0		90 df		bcc $8ec1	                bcc L8EEB
1128	.8ee2						printNewLineThenCloseFile:
1129	.8ee2		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1130	.8ee5						closeFile:
1131	.8ee5		a9 00		lda #$00	                lda #$00
1132	.8ee7		4c ce ff	jmp $ffce	                jmp OSFIND

1134	.8eea						L8F14:
1135	.8eea		cd c5 df	cmp $dfc5	                cmp hazel.lastCharPrinted
1136	.8eed		f0 10		beq $8eff	                beq L8F29
1137	.8eef		48		pha		                pha
1138	.8ef0		ad c5 df	lda $dfc5	                lda hazel.lastCharPrinted
1139	.8ef3		c9 0d		cmp #$0d	                cmp #$0D
1140	.8ef5		f0 13		beq $8f0a	                beq L8F34
1141	.8ef7		c9 0a		cmp #$0a	                cmp #$0A
1142	.8ef9		f0 0f		beq $8f0a	                beq L8F34
1143	.8efb		68		pla		                pla
1144	.8efc		8d c5 df	sta $dfc5	                sta hazel.lastCharPrinted
1145	.8eff						L8F29:
1146	.8eff		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1147	.8f02		80 aa		bra $8eae	                bra L8ED8

1149							;-------------------------------------------------------------------------
1150							;
1151							; Tidily handle ESCAPE when a file is open during *DUMP or whatever.
1152							; Prints a new line, closes the file, then does an Escape error.
1153							;
1154							; entry:
1155							;
1156							; Y = file handle
1157							;
1158	.8f04						handleESCAPEWithFileOpen:
1159	.8f04		20 e2 8e	jsr $8ee2	                jsr printNewLineThenCloseFile
1160	.8f07		4c d3 a8	jmp $a8d3	                jmp escapeError

1162							;-------------------------------------------------------------------------

1164	.8f0a						L8F34:
1165	.8f0a		68		pla		                pla
1166	.8f0b		9c c5 df	stz $dfc5	                stz hazel.lastCharPrinted
1167	.8f0e		80 cd		bra $8edd	                bra L8F07

1169							;-------------------------------------------------------------------------
1170							;
1171							; Does an OSBGET and handles ESCAPE.
1172							;
1173							; entry:
1174							;
1175							; Y = file handle
1176							;
1177							; exit:
1178							;
1179							; A = byte read
1180							; C=1 if EOF
1181							; (as per OSBGET)
1182							;
1183	.8f10						bgetAndCheckForESCAPE:
1184	.8f10		20 d7 ff	jsr $ffd7	                jsr OSBGET
1185	.8f13		24 ff		bit $ff		                bit $FF
1186	.8f15		30 ed		bmi $8f04	                bmi handleESCAPEWithFileOpen
1187	.8f17		60		rts		                rts

1189							;-------------------------------------------------------------------------
1190							;
1191							; *DUMP [MasRef G.5-4]
1192							;
1193	.8f18						starDUMP:
1194	.8f18		86 f2		stx $f2		                stx stringInputBufferAddress+0
1195	.8f1a		84 f3		sty $f3		                sty stringInputBufferAddress+1
1196	.8f1c		a2 00		ldx #$00	                ldx #$00
1197	.8f1e		20 5a 92	jsr $925a	                jsr clearOSFILEParameterBlockDWORD
1198	.8f21		a2 04		ldx #$04	                ldx #$04
1199	.8f23		20 5a 92	jsr $925a	                jsr clearOSFILEParameterBlockDWORD
1200	.8f26		a0 00		ldy #$00	                ldy #$00
1201	.8f28		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
1202	.8f2b		20 ee f1	jsr $f1ee	                jsr mos.gsinitForFilenameParsing
1203	.8f2e						L8F58:
1204	.8f2e		20 00 f2	jsr $f200	                jsr mos.gsreadEntryPoint
1205	.8f31		90 fb		bcc $8f2e	                bcc L8F58
1206	.8f33		f0 1a		beq $8f4f	                beq L8F79
1207	.8f35		a2 00		ldx #$00	                ldx #$00
1208	.8f37		20 f9 92	jsr $92f9	                jsr parseHexAddressFromCommandLine

1210	.8f3a		a2 03		ldx #$03	                ldx #$03
1211	.8f3c						-
1212	.8f3c		bd ed 02	lda $02ed,x	                lda osfileParameterBlock+0,x
1213	.8f3f		9d f1 02	sta $02f1,x	                sta osfileParameterBlock+4,x
1214	.8f42		ca		dex		                dex
1215	.8f43		10 f7		bpl $8f3c	                bpl -

1217	.8f45		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
1218	.8f48		f0 05		beq $8f4f	                beq L8F79
1219	.8f4a		a2 04		ldx #$04	                ldx #$04
1220	.8f4c		20 f9 92	jsr $92f9	                jsr parseHexAddressFromCommandLine
1221	.8f4f						L8F79:
1222	.8f4f		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
1223	.8f51		a6 f2		ldx $f2		                ldx stringInputBufferAddress+0
1224	.8f53		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
1225	.8f56		20 5f a5	jsr $a55f	                jsr openFileForReading

1227	.8f59		a9 02		lda #$02	                lda #argsFileGetEXT
1228	.8f5b		20 ff 93	jsr $93ff	                jsr callOSARGSWithBuffer

1230	.8f5e		a2 03		ldx #$03	                ldx #$03
1231	.8f60						L8F8A:
1232	.8f60		b5 a8		lda $a8,x	                lda osargsBuffer,x
1233	.8f62		dd ed 02	cmp $02ed,x	                cmp osfileParameterBlock+0,x
1234	.8f65		90 6a		bcc $8fd1	                bcc L8FFB
1235	.8f67		d0 03		bne $8f6c	                bne L8F96
1236	.8f69		ca		dex		                dex
1237	.8f6a		10 f4		bpl $8f60	                bpl L8F8A
1238	.8f6c						L8F96:
1239	.8f6c		a2 03		ldx #$03	                ldx #$03
1240	.8f6e						-
1241	.8f6e		bd ed 02	lda $02ed,x	                lda osfileParameterBlock+0,x
1242	.8f71		95 a8		sta $a8,x	                sta osargsBuffer,x
1243	.8f73		ca		dex		                dex
1244	.8f74		10 f8		bpl $8f6e	                bpl -
1245	.8f76		20 fd 93	jsr $93fd	                jsr setFilePointerFromOSARGSBuffer
1246	.8f79						L8FA3:
1247	.8f79		a2 00		ldx #$00	                ldx #$00
1248	.8f7b		20 d7 ff	jsr $ffd7	                jsr OSBGET
1249	.8f7e		b0 46		bcs $8fc6	                bcs L8FF0
1250	.8f80		20 18 92	jsr $9218	                jsr L9239
1251	.8f83		48		pha		                pha
1252	.8f84		ad f1 02	lda $02f1	                lda osfileParameterBlock+4
1253	.8f87		29 07		and #$07	                and #$07
1254	.8f89		f0 15		beq $8fa0	                beq L8FCA
1255	.8f8b		5a		phy		                phy
1256	.8f8c		a8		tay		                tay
1257	.8f8d						L8FB7:
1258	.8f8d		5a		phy		                phy
1259	.8f8e		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
1260	>8f91		20 20 20 00			                .text "   ",0
1261	.8f95		7a		ply		                ply
1262	.8f96		a9 20		lda #$20	                lda #$20
1263	.8f98		9d f5 02	sta $02f5,x	                sta osfileParameterBlock+8,x
1264	.8f9b		e8		inx		                inx
1265	.8f9c		88		dey		                dey
1266	.8f9d		d0 ee		bne $8f8d	                bne L8FB7
1267	.8f9f		7a		ply		                ply
1268	.8fa0						L8FCA:
1269	.8fa0		68		pla		                pla
1270	.8fa1						L8FCB:
1271	.8fa1		48		pha		                pha
1272	.8fa2		c9 20		cmp #$20	                cmp #32
1273	.8fa4		90 04		bcc $8faa	                bcc nonPrintable
1274	.8fa6		c9 7f		cmp #$7f	                cmp #127
1275	.8fa8		90 02		bcc $8fac	                bcc L8FD6                    ;taken if printable
1276	.8faa						nonPrintable:
1277	.8faa		a9 2e		lda #$2e	                lda #'.'          ;placeholder for non-printable chars
1278	.8fac						L8FD6:
1279	.8fac		9d f5 02	sta $02f5,x	                sta osfileParameterBlock+8,x
1280	.8faf		68		pla		                pla
1281	.8fb0		20 a8 a8	jsr $a8a8	                jsr printSpaceThenPrintHexByte
1282	.8fb3		e8		inx		                inx
1283	.8fb4		20 27 92	jsr $9227	                jsr L9248
1284	.8fb7		ad f1 02	lda $02f1	                lda osfileParameterBlock+4
1285	.8fba		29 07		and #$07	                and #$07
1286	.8fbc		f0 0b		beq $8fc9	                beq L8FF3
1287	.8fbe		20 10 8f	jsr $8f10	                jsr bgetAndCheckForESCAPE
1288	.8fc1		90 de		bcc $8fa1	                bcc L8FCB
1289	.8fc3		20 36 92	jsr $9236	                jsr L9257
1290	.8fc6						L8FF0:
1291	.8fc6		4c e5 8e	jmp $8ee5	                jmp closeFile

1293	.8fc9						L8FF3:
1294	.8fc9		20 36 92	jsr $9236	                jsr L9257
1295	.8fcc		80 ab		bra $8f79	                bra L8FA3

1297	.8fce						L8FF8:
1298	.8fce		4c 67 a5	jmp $a567	                jmp notFoundError

1300	.8fd1						L8FFB:
1301	.8fd1		20 e5 8e	jsr $8ee5	                jsr closeFile
1302	.8fd4		20 2f ab	jsr $ab2f	                jsr doFollowingError
1303	>8fd7		b7 4f 75 74 73 69 64 65		                .text $b7,"Outside file",0
	>8fdf		20 66 69 6c 65 00

1305							;-------------------------------------------------------------------------
1306							;
1307							; *BUILD
1308							;
1309	.8fe5						starBUILD:
1310	.8fe5		4e c2 df	lsr $dfc2	                lsr hazel.fsFlags            ;clear bit 7 of fsFlags
1311	.8fe8		80 04		bra $8fee	                bra starBUILDOrAPPEND

1313							;-------------------------------------------------------------------------
1314							;
1315							; *APPEND
1316							;
1317	.8fea						starAPPEND:
1318	.8fea		38		sec		                sec
1319	.8feb		6e c2 df	ror $dfc2	                ror hazel.fsFlags            ;set bit 7 of fsFlags
1320	.8fee						starBUILDOrAPPEND:
1321							                ; bit 7 of fsFlags indicates *BUILD (clear) or *APPEND
1322							                ; (set).
1323	.8fee		9c c3 df	stz $dfc3	                stz hazel.lineNumberBCD+0    ;reset line number
1324	.8ff1		9c c4 df	stz $dfc4	                stz hazel.lineNumberBCD+1    ;reset line number
1325	.8ff4		a9 80		lda #$80	                lda #$80                     ;open for output. Assume *BUILD
1326	.8ff6		2c c2 df	bit $dfc2	                bit hazel.fsFlags            ;test *BUILD/*APPEND
1327	.8ff9		10 02		bpl $8ffd	                bpl +                        ;branch taken if *BUILD
1328	.8ffb		a9 c0		lda #$c0	                lda #$C0                     ;*APPEND, so open for update
1329	.8ffd						+
1330	.8ffd		20 ce ff	jsr $ffce	                jsr OSFIND                   ;open the file
1331	.9000		a8		tay		                tay                          ;Y=file handle
1332	.9001		f0 cb		beq $8fce	                beq L8FF8                    ;branch taken if open failed
1333	.9003		8c ed 02	sty $02ed	                sty osfileParameterBlock+0   ;save file handle
1334	.9006		20 f8 93	jsr $93f8	                jsr setPTRToEOF ;move to EOF (effective no-op when *BUILD)
1335	.9009						L9033:
1336	.9009		20 cc 91	jsr $91cc	                jsr printLineNumber
1337	.900c						L9036:
1338							                .if version<500&&version!=350
1340							                .else
1341	.900c		a9 00		lda #$00	                lda #0
1342	.900e		a2 92		ldx #$92	                ldx #<starBuildOrAPPENDOSWORD0Parameters
1343	.9010		a0 90		ldy #$90	                ldy #>starBuildOrAPPENDOSWORD0Parameters
1344	.9012		20 f1 ff	jsr $fff1	                jsr OSWORD
1345							                .endif
1346	.9015		08		php		                php
1347	.9016		90 0f		bcc $9027	                bcc L904B
1348							                ; Handle ESCAPE
1349	.9018		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1350	.901b		a9 0d		lda #$0d	                lda #$0D
1351	.901d		99 00 dc	sta $dc00,y	                sta hazel.commandLine,y      ;terminate current line
1352	.9020						L9044:
1353	.9020		5a		phy		                phy                          ;save line length
1354	.9021		a9 7e		lda #$7e	                lda #$7E
1355	.9023		20 f4 ff	jsr $fff4	                jsr OSBYTE                   ;acknowledge ESCAPE
1356	.9026		7a		ply		                ply                          ;restore line length
1357	.9027						L904B:
1358	.9027		98		tya		                tya                          ;A=line length
1359	.9028		f0 50		beq $907a	                beq L909E                    ;taken if line empty
1360	.902a		20 87 90	jsr $9087	                jsr setStringInputBufferToCommandLine
1361	.902d		a0 00		ldy #$00	                ldy #$00
1362	.902f		a2 00		ldx #$00	                ldx #$00
1363	.9031						L9055:
1364	.9031		20 1d f2	jsr $f21d	                jsr mos.LF29C
1365	.9034		9d 00 dc	sta $dc00,x	                sta hazel.commandLine,x
1366	.9037		a9 01		lda #$01	                lda #stringInputOptions.goodString
1367	.9039		24 e4		bit $e4		                bit stringInputOptions
1368	.903b		d0 0b		bne $9048	                bne L906C
1369	.903d		a9 07		lda #$07	                lda #7
1370	.903f		20 ee ff	jsr $ffee	                jsr OSWRCH                   ;beep
1371	.9042		20 d6 91	jsr $91d6	                jsr L91F5
1372	.9045		28		plp		                plp
1373	.9046		80 c4		bra $900c	                bra L9036

1375	.9048						L906C:
1376	.9048		e8		inx		                inx
1377	.9049		90 e6		bcc $9031	                bcc L9055
1378	.904b		28		plp		                plp
1379	.904c		90 01		bcc $904f	                bcc L9073
1380	.904e		ca		dex		                dex
1381	.904f						L9073:
1382	.904f		08		php		                php
1383	.9050		da		phx		                phx
1384	.9051		a2 0b		ldx #$0b	                ldx #size(OSGBPBParameterBlock)-2
1385	.9053						L9077:
1386	.9053		9e ee 02	stz $02ee,x	                stz osfileParameterBlock+1,x
1387	.9056		ca		dex		                dex
1388	.9057		10 fa		bpl $9053	                bpl L9077
1389	.9059		fa		plx		                plx
1390	.905a		8e f2 02	stx $02f2	                stx osfileParameterBlock+OSGBPBParameterBlock.count+0
1391							                .cerror (<hazel.commandLine)!=0,"hazel.commandLine must be page aligned"
1392	.905d		a9 dc		lda #$dc	                lda #>hazel.commandLine
1393	.905f		8d ef 02	sta $02ef	                sta osfileParameterBlock+OSGBPBParameterBlock.address+1
1394	.9062		ce f0 02	dec $02f0	                dec osfileParameterBlock+OSGBPBParameterBlock.address+2
1395	.9065		ce f1 02	dec $02f1	                dec osfileParameterBlock+OSGBPBParameterBlock.address+3
1396	.9068		a9 02		lda #$02	                lda #gbppPutBytesCurrentPTR
1397	.906a		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
1398	.906c		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1399	.906e		20 d1 ff	jsr $ffd1	                jsr OSGBPB
1400	.9071		28		plp		                plp
1401	.9072		90 95		bcc $9009	                bcc L9033
1402	.9074						L9098:
1403	.9074		ac ed 02	ldy $02ed	                ldy osfileParameterBlock+0
1404	.9077		4c e5 8e	jmp $8ee5	                jmp closeFile

1406	.907a						L909E:
1407	.907a		28		plp		                plp
1408	.907b		b0 f7		bcs $9074	                bcs L9098
1409	.907d		a9 0d		lda #$0d	                lda #13
1410	.907f		ac ed 02	ldy $02ed	                ldy osfileParameterBlock
1411	.9082		20 d4 ff	jsr $ffd4	                jsr OSBPUT
1412	.9085		80 82		bra $9009	                bra L9033

1414	.9087						setStringInputBufferToCommandLine:
1415	.9087		a9 41		lda #$41	                lda #$41
1416	.9089		85 e4		sta $e4		                sta $E4
1417							                .cerror (<hazel.commandLine)!=0,"hazel.commandLine must be page aligned"
1418	.908b		64 f2		stz $f2		                stz stringInputBufferAddress+0
1419	.908d		a9 dc		lda #$dc	                lda #>hazel.commandLine
1420	.908f		85 f3		sta $f3		                sta stringInputBufferAddress+1
1421	.9091		60		rts		                rts

1423							;-------------------------------------------------------------------------

1425							                .if version>=500||version==350
1426	.9092						starBuildOrAPPENDOSWORD0Parameters:
1427	>9092		00 dc				                .word hazel.commandLine      ;address
1428	>9094		f0				                .byte $f0                    ;max # chars
1429	>9095		00				                .byte 0                      ;min char
1430	>9096		ff				                .byte 255                    ;max char
1431							                .endif

1433							;-------------------------------------------------------------------------
1434							;
1435							; *MOVE
1436							;
1437	.9097						starMOVE:
1438	.9097		ad 34 fe	lda $fe34	                lda ACCCON                    ; Save ACCCON
1439	.909a		8d dc df	sta $dfdc	                sta hazel.oldACCCON
1440	.909d		48		pha		                pha                          ; Save ACCCON and command line pointer
1441	.909e		da		phx		                phx
1442	.909f		5a		phy		                phy
1443	.90a0		a0 80		ldy #$80	                ldy #$80                     ; Top of available shadow memory at &8000
1444	.90a2		a5 d0		lda $d0		                lda STATE                      ; Get VDU status
1445	.90a4		89 10		bit #$10	                bit #$10                     ; Jump if not shadow screen, spare up to &8000
1446	.90a6		f0 07		beq $90af	                beq L90CE
1447							; Shadow screen selected
1448	.90a8		20 39 f1	jsr $f139	                jsr mos.LF1C0                ; Get screen bottom to XY
1449	.90ab		c0 30		cpy #$30	                cpy #$30                     ; Screen at &3000, no spare memory, jump to use Hazel
1450	.90ad		f0 14		beq $90c3	                beq L90E2

1452							; Non-shadow or small shadow screen selected
1453							; Y=top of available memory in shadow memory
1454	.90af						L90CE:
1455	.90af		a9 30		lda #$30	                lda #$30                     ; &3000=start of shadow memory
1456	.90b1		8d d6 df	sta $dfd6	                sta hazel.moveBufferMSB
1457	.90b4		a9 04		lda #$04	                lda #ACCCON.X
1458	.90b6		0c 34 fe	tsb $fe34	                tsb ACCCON
1459	.90b9		8d dd df	sta $dfdd	                sta hazel.hasACCCONChanged      ; set 'ACCCON changed'
1460	.90bc		98		tya		                tya                          ; A=length of space in shadow memory
1461	.90bd		38		sec		                sec
1462	.90be		ed d6 df	sbc $dfd6	                sbc hazel.moveBufferMSB
1463	.90c1		80 07		bra $90ca	                bra L90E9

1465							; No shadow memory available, use Hazel
1466	.90c3						L90E2:
1467	.90c3		a9 dd		lda #$dd	                lda #$DD                     ; Buffer at &DD00
1468	.90c5		8d d6 df	sta $dfd6	                sta hazel.moveBufferMSB
1469	.90c8		a9 02		lda #$02	                lda #$02                     ; Buffer length=&200

1471							; &DFD6=high byte of buffer address
1472							; A=high byte of buffer length
1473	.90ca						L90E9:
1474	.90ca		8d d7 df	sta $dfd7	                sta hazel.moveNumPages      ; Store buffer length
1475	.90cd		7a		ply		                ply                          ; Get command line pointer
1476	.90ce		fa		plx		                plx
1477	.90cf		da		phx		                phx
1478	.90d0		5a		phy		                phy
1479	.90d1		a9 40		lda #$40	                lda #$40                     ; Open source file
1480	.90d3		20 ce ff	jsr $ffce	                jsr OSFIND
1481	.90d6		a8		tay		                tay                          ; Store source handle, jump if not found
1482	.90d7		8c d4 df	sty $dfd4	                sty hazel.moveSrcHandle
1483	.90da		f0 39		beq $9115	                beq L9134
1484	.90dc		7a		ply		                ply                          ; Get command line back again
1485	.90dd		fa		plx		                plx
1486	.90de		86 f2		stx $f2		                stx $F2
1487	.90e0		84 f3		sty $f3		                sty $F3
1488	.90e2		da		phx		                phx                          ; And save it again
1489	.90e3		5a		phy		                phy
1490	.90e4		a0 00		ldy #$00	                ldy #$00                     ; Step past first parameter
1491	.90e6		20 ee f1	jsr $f1ee	                jsr mos.gsinitForFilenameParsing
1492	.90e9						L9108:
1493	.90e9		20 00 f2	jsr $f200	                jsr mos.gsreadEntryPoint     ;
1494	.90ec		90 fb		bcc $90e9	                bcc L9108
1495	.90ee		98		tya		                tya                          ; Save address of dest filename
1496	.90ef		18		clc		                clc
1497	.90f0		65 f2		adc $f2		                adc $F2
1498	.90f2		8d d8 df	sta $dfd8	                sta hazel.moveDestName+0
1499	.90f5		aa		tax		                tax
1500	.90f6		a5 f3		lda $f3		                lda $F3
1501	.90f8		69 00		adc #$00	                adc #$00
1502	.90fa		8d d9 df	sta $dfd9	                sta hazel.moveDestName+1
1503	.90fd		a8		tay		                tay                          ; Temporary filing system flag
1504	.90fe		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
1505	.9101		a9 80		lda #$80	                lda #$80                     ; Open destination file
1506	.9103		20 ce ff	jsr $ffce	                jsr OSFIND
1507	.9106		a8		tay		                tay                          ; Store dest handle, jump if opened
1508	.9107		8c d5 df	sty $dfd5	                sty hazel.moveDestHandle
1509	.910a		d0 0c		bne $9118	                bne L9137

1511							; Couldn't open destination
1512	.910c		ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle      ; Get source handle and clear it
1513	.910f		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
1514	.9112		20 ce ff	jsr $ffce	                jsr OSFIND                   ; Close source file
1515	.9115						L9134:
1516	.9115		4c 67 a5	jmp $a567	                jmp notFoundError                    ; Jump to 'Not found' error

1518							; Source and dest opened
1519							; ----------------------
1520							; Build OSGBPB source file control block at &02ED
1521							; and destination control block at &DFC7
1522	.9118						L9137:
1523	.9118		a2 07		ldx #$07	                ldx #$07
1524	.911a						L9139:
1525	.911a		9e ee 02	stz $02ee,x	                stz @w osfileParameterBlock+OSGBPBParameterBlock.address,x ; Addr=0, Num=0
1526	.911d		9e c8 df	stz $dfc8,x	                stz hazel.moveOSGBPB+1,x
1527	.9120		ca		dex		                dex
1528	.9121		10 f7		bpl $911a	                bpl L9139
1529	.9123		ad d4 df	lda $dfd4	                lda hazel.moveSrcHandle      ; Source handle
1530	.9126		8d ed 02	sta $02ed	                sta osfileParameterBlock+OSGBPBParameterBlock.handle
1531	.9129		ad d6 df	lda $dfd6	                lda hazel.moveBufferMSB      ; Buffer address
1532	.912c		8d ef 02	sta $02ef	                sta osfileParameterBlock+OSGBPBParameterBlock.address+1
1533	.912f		8d c9 df	sta $dfc9	                sta hazel.moveOSGBPB.addr+1
1534	.9132		ad d7 df	lda $dfd7	                lda hazel.moveNumPages
1535	.9135		8d f3 02	sta $02f3	                sta osfileParameterBlock+OSGBPBParameterBlock.count+1
1536	.9138		8d cd df	sta $dfcd	                sta hazel.moveOSGBPB.numBytes+1
1537	.913b		ce f0 02	dec $02f0	                dec osfileParameterBlock+OSGBPBParameterBlock.address+2 ; Source addr=&FFFFxxxx
1538	.913e		ce f1 02	dec $02f1	                dec osfileParameterBlock+OSGBPBParameterBlock.address+3
1539	.9141		ce ca df	dec $dfca	                dec hazel.moveOSGBPB.addr+2
1540	.9144		ce cb df	dec $dfcb	                dec hazel.moveOSGBPB.addr+3

1542							; Should use &FFFExxxx and let filing system select correct memory
1543							; Unfortunately, CFS/RFS and DFS do not recognise &FFFExxxx, so
1544							; *MOVE has to do it itself, causing problems for filing systems
1545							; that /do/ recognise &FFFExxxx where they have to remember to
1546							; *do* *nothing* for &FFFFxxxx instead of select main memory as
1547							; &FFFFxxxx implies.

1549	.9147		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock                     ; XY=>source OSGBPB block
1550	.9149		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1551	.914b		a9 04		lda #$04	                lda #$04                     ; Read data from source
1552	.914d		20 d1 ff	jsr $ffd1	                jsr OSGBPB
1553	.9150		08		php		                php                          ; Jump if not at end of file
1554	.9151		90 11		bcc $9164	                bcc L9183
1555							; End of file, adjust destination buffer length for final part
1556	.9153		a9 00		lda #$00	                lda #$00
1557	.9155		ed f2 02	sbc $02f2	                sbc osfileParameterBlock+OSGBPBParameterBlock.count+0
1558	.9158		8d cc df	sta $dfcc	                sta hazel.moveOSGBPB.numBytes+0
1559	.915b		ad cd df	lda $dfcd	                lda hazel.moveOSGBPB.numBytes+1
1560	.915e		ed f3 02	sbc $02f3	                sbc osfileParameterBlock+OSGBPBParameterBlock.count+1
1561	.9161		8d cd df	sta $dfcd	                sta hazel.moveOSGBPB.numBytes+1
1562	.9164						L9183:
1563	.9164		ad d5 df	lda $dfd5	                lda hazel.moveDestHandle      ; Destination handle
1564	.9167		8d c7 df	sta $dfc7	                sta hazel.moveOSGBPB.handle
1565	.916a		a9 02		lda #$02	                lda #$02                     ; XY=>control block, A=write
1566	.916c		a2 c7		ldx #$c7	                ldx #<hazel.moveOSGBPB
1567	.916e		a0 df		ldy #$df	                ldy #>hazel.moveOSGBPB
1568	.9170		20 d1 ff	jsr $ffd1	                jsr OSGBPB
1569	.9173		28		plp		                plp                          ; Loop until end of file
1570	.9174		90 a2		bcc $9118	                bcc L9137
1571	.9176		a9 00		lda #$00	                lda #$00
1572	.9178		ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle      ; Get and clear source handle
1573	.917b		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
1574	.917e		5a		phy		                phy                          ; Close source file
1575	.917f		20 ce ff	jsr $ffce	                jsr OSFIND
1576	.9182		a9 00		lda #$00	                lda #$00                     ; Get dest handle
1577	.9184		ac d5 df	ldy $dfd5	                ldy hazel.moveDestHandle
1578	.9187		5a		phy		                phy                          ; Clear dest handle and close file
1579	.9188		9c d5 df	stz $dfd5	                stz hazel.moveDestHandle
1580	.918b		20 ce ff	jsr $ffce	                jsr OSFIND
1581	.918e		7a		ply		                ply                          ; Dest not CFS/RFS, jump to...
1582	.918f		c0 04		cpy #$04	                cpy #$04
1583	.9191		b0 0b		bcs $919e	                bcs L91BD
1584	.9193		7a		ply		                ply                          ; Pop source handle
1585	.9194						L91B3:
1586	.9194		7a		ply		                ply                          ; Restore XY
1587	.9195		fa		plx		                plx
1588	.9196						L91B5:
1589	.9196		68		pla		                pla                          ; Clear 'ACCCON changed', restore ACCCON
1590	.9197		9c dd df	stz $dfdd	                stz hazel.hasACCCONChanged
1591	.919a		8d 34 fe	sta $fe34	                sta ACCCON
1592	.919d		60		rts		                rts

1594	.919e						L91BD:
1595	.919e		7a		ply		                ply                          ; Source was CFS/RFS, jump to exit
1596	.919f		c0 04		cpy #$04	                cpy #$04
1597	.91a1		90 f1		bcc $9194	                bcc L91B3
1598	.91a3		7a		ply		                ply                          ; Point to first parameter
1599	.91a4		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
1600	.91a7		fa		plx		                plx
1601	.91a8		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
1602	.91ab		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
1603	.91ad		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1604	.91af		a9 05		lda #$05	                lda #$05                     ; Read info on source file
1605	.91b1		20 dd ff	jsr $ffdd	                jsr OSFILE
1606	.91b4		ad d8 df	lda $dfd8	                lda hazel.moveDestName+0      ; Get address of dest filename
1607	.91b7		8d ed 02	sta $02ed	                sta osfileParameterBlock+OSFILEParameterBlock.fileName+0
1608	.91ba		ad d9 df	lda $dfd9	                lda hazel.moveDestName+1      ;  and put in control block
1609	.91bd		8d ee 02	sta $02ee	                sta osfileParameterBlock+OSFILEParameterBlock.fileName+1
1610	.91c0		a9 f0		lda #$f0	                lda #$F0                     ; Mask out 'public' access bits
1611	.91c2		1c fb 02	trb $02fb	                trb osfileParameterBlock+OSFILEParameterBlock.attributes+0
1612	.91c5		a9 01		lda #$01	                lda #$01                     ; Write info on dest file
1613	.91c7		20 dd ff	jsr $ffdd	                jsr OSFILE
1614	.91ca		80 ca		bra $9196	                bra L91B5                    ; Jump to restore ACCCON and exit

1616	.91cc						printLineNumber:
1617	.91cc		a2 00		ldx #$00	                ldx #$00
1618	.91ce		38		sec		                sec
1619	.91cf		20 0d 92	jsr $920d	                jsr adcLineNumberBCDX        ;increment line number LSB
1620	.91d2		e8		inx		                inx
1621	.91d3		20 0d 92	jsr $920d	                jsr adcLineNumberBCDX        ;carry into line number MSB
1622	.91d6						L91F5:
1623	.91d6		38		sec		                sec                          ;printing leading 0s
1624	.91d7		ad c4 df	lda $dfc4	                lda hazel.lineNumberBCD+1    ;get line number MSB
1625	.91da		20 f1 91	jsr $91f1	                jsr printPossiblyLeading0s
1626	.91dd		ad c3 df	lda $dfc3	                lda hazel.lineNumberBCD+0    ;get line number LSB
1627	.91e0		48		pha		                pha                          ;save line number LSB
1628	.91e1		08		php		                php                          ;save C
1629							                .if version==350
1630	.91e2		20 2e e5	jsr $e52e	                jsr mos.LE520
1636							                .endif
1637	.91e5		28		plp		                plp                          ;restore  C
1638	.91e6		20 fb 91	jsr $91fb	                jsr printPossiblyLeading0    ;print line number 3rd digit
1639	.91e9		68		pla		                pla                          ;restore line number LSB
1640	.91ea		18		clc		                clc                ;always print line number 4th digit
1641	.91eb		20 fb 91	jsr $91fb	                jsr printPossiblyLeading0    ;
1642	.91ee		4c 28 9f	jmp $9f28	                jmp printSpace                    ;

1644	.91f1						printPossiblyLeading0s:
1645	.91f1		48		pha		                pha                          ;save value
1646	.91f2		08		php		                php                          ;save C
1647							                .if version==350
1648	.91f3		20 2e e5	jsr $e52e	                jsr mos.LE520
1654							                .endif
1655	.91f6		28		plp		                plp                          ;restore C
1656	.91f7		20 fb 91	jsr $91fb	                jsr printPossiblyLeading0    ;print 1st digit
1657	.91fa		68		pla		                pla                          ;restore value
1658	.91fb						printPossiblyLeading0:
1659	.91fb		29 0f		and #$0f	                and #$0F                     ;get digit to print
1660	.91fd		d0 09		bne $9208	                bne printNonLeading0         ;always print if non-0
1661	.91ff		90 07		bcc $9208	                bcc printNonLeading0 ;branch taken if not leading 0
1662	.9201		a9 20		lda #$20	                lda #$20             ;print space instead of leading 0
1663	.9203		20 ee ff	jsr $ffee	                jsr OSWRCH
1664	.9206		38		sec		                sec                ;indicate still in leading 0s state
1665	.9207		60		rts		                rts

1667	.9208						printNonLeading0:
1668	.9208		20 b5 a8	jsr $a8b5	                jsr printHexDigit            ;print digit
1669	.920b		18		clc		                clc                          ;no longer in leading 0s state
1670	.920c		60		rts		                rts                          ;

1672	.920d						adcLineNumberBCDX:
1673	.920d		a9 00		lda #$00	                lda #$00
1674	.920f		f8		sed		                sed
1675	.9210		7d c3 df	adc $dfc3,x	                adc hazel.lineNumberBCD,x
1676	.9213		9d c3 df	sta $dfc3,x	                sta hazel.lineNumberBCD,x
1677	.9216		d8		cld		                cld
1678	.9217						rts9238:
1679	.9217		60		rts		                rts

1681							;-------------------------------------------------------------------------

1683	.9218						L9239:
1684	.9218		da		phx		                phx
1685	.9219		48		pha		                pha
1686	.921a		a2 02		ldx #$02	                ldx #$02
1687	.921c						L923D:
1688	.921c		bd f1 02	lda $02f1,x	                lda osfileParameterBlock+4,x
1689	.921f		20 ad a8	jsr $a8ad	                jsr printHexByte
1690	.9222		ca		dex		                dex
1691	.9223		10 f7		bpl $921c	                bpl L923D
1692	.9225		80 0c		bra $9233	                bra L9254

1694							;-------------------------------------------------------------------------

1696	.9227						L9248:
1697	.9227		da		phx		                phx
1698	.9228		48		pha		                pha
1699	.9229		a2 fc		ldx #$fc	                ldx #256-4
1700	.922b						L924C:
1701	.922b		fe f5 01	inc $01f5,x	                inc osfileParameterBlock+4-(256-4),x
1702	.922e		d0 03		bne $9233	                bne L9254
1703	.9230		e8		inx		                inx
1704	.9231		d0 f8		bne $922b	                bne L924C
1705	.9233						L9254:
1706	.9233		68		pla		                pla
1707	.9234		fa		plx		                plx
1708	.9235		60		rts		                rts

1710	.9236						L9257:
1711	.9236		5a		phy		                phy
1712	.9237		da		phx		                phx
1713	.9238						L9259:
1714	.9238		e0 08		cpx #$08	                cpx #$08
1715	.923a		f0 0a		beq $9246	                beq L9267
1716	.923c		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
1717	>923f		20 20 20 00			                .text "   ",0
1718	.9243		e8		inx		                inx
1719	.9244		80 f2		bra $9238	                bra L9259

1721	.9246						L9267:
1722	.9246		fa		plx		                plx
1723	.9247		20 28 9f	jsr $9f28	                jsr printSpace
1724	.924a		a0 00		ldy #$00	                ldy #$00
1725	.924c						L926D:
1726	.924c		b9 f5 02	lda $02f5,y	                lda osfileParameterBlock+8,y
1727	.924f		20 ee ff	jsr $ffee	                jsr OSWRCH
1728	.9252		c8		iny		                iny
1729	.9253		ca		dex		                dex
1730	.9254		d0 f6		bne $924c	                bne L926D
1731	.9256		7a		ply		                ply
1732	.9257		4c e7 ff	jmp $ffe7	                jmp OSNEWL

1734							;-------------------------------------------------------------------------

1736							                .if version!=350
1738							                .endif

1740							;-------------------------------------------------------------------------
1741							;
1742							; Clear 4 bytes in the OSFILE parameter block.
1743							;
1744							; entry:
1745							;
1746							; X = offset of the 4 bytes to clear
1747							;
1748	.925a						clearOSFILEParameterBlockDWORD:
1749	.925a		9e ed 02	stz $02ed,x	                stz osfileParameterBlock+0,x
1750	.925d		9e ee 02	stz $02ee,x	                stz osfileParameterBlock+1,x
1751	.9260		9e ef 02	stz $02ef,x	                stz osfileParameterBlock+2,x
1752	.9263		9e f0 02	stz $02f0,x	                stz osfileParameterBlock+3,x
1753	.9266						rts94A4:
1754	.9266		60		rts		                rts

1756							;-------------------------------------------------------------------------
1757							;
1758							; Read a 32-bit hex value from a string.
1759							;
1760							; entry:
1761							;
1762							; X = offset into osfileParameterBlock to store the value
1763							;
1764							; exit:
1765							;
1766							; C=0 if error

1768	.9267						parseHexAddressFromString:
1769	.9267		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput ; Skip spaces
1770	.926a		20 10 84	jsr $8410	                jsr readHexDigit
1771	.926d		90 23		bcc $9292	                bcc rts92F4
1772	.926f		20 5a 92	jsr $925a	                jsr clearOSFILEParameterBlockDWORD
1773	.9272						readDigitsLoop:
1774	.9272		5a		phy		                phy
1775	.9273		2a		rol a		                rol a
1776	.9274		2a		rol a		                rol a
1777	.9275		2a		rol a		                rol a
1778	.9276		2a		rol a		                rol a                        ;put digit in top 4 bits
1779	.9277		a0 04		ldy #$04	                ldy #$04
1780	.9279						shiftIn1DigitLoop:
1781	.9279		2a		rol a		                rol a
1782	.927a		3e ed 02	rol $02ed,x	                rol osfileParameterBlock+0,x
1783	.927d		3e ee 02	rol $02ee,x	                rol osfileParameterBlock+1,x
1784	.9280		3e ef 02	rol $02ef,x	                rol osfileParameterBlock+2,x
1785	.9283		3e f0 02	rol $02f0,x	                rol osfileParameterBlock+3,x
1786	.9286		b0 61		bcs $92e9	                bcs badAddressError ;carry out of bit 31 implies too many digits
1787	.9288		88		dey		                dey
1788	.9289		d0 ee		bne $9279	                bne shiftIn1DigitLoop
1789	.928b		7a		ply		                ply
1790	.928c		20 10 84	jsr $8410	                jsr readHexDigit
1791	.928f		b0 e1		bcs $9272	                bcs readDigitsLoop   ;keep going until hex digits stop
1792	.9291		38		sec		                sec       ;got at least 1 hex digit, so result is good
1793	.9292						rts92F4:
1794	.9292		60		rts		                rts

1796							;-------------------------------------------------------------------------
1797							;
1798							; *GO (<addr>) [MasRef C.5-6]
1799							;
1800	.9293						starGO:
1801	.9293		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput ; Skip spaces
1802	.9296		d0 03		bne $929b	                bne starGOIO             ; Jump to read parameters
1803	.9298		4c 29 84	jmp $8429	                jmp commandLineUI        ; No parameters, enter CLICOM

1805							;-------------------------------------------------------------------------
1806							;
1807							; *GOIO <addr> [MasRef C.5-7]
1808							;
1809	.929b						starGOIO:
1810	.929b		a2 00		ldx #$00	                ldx #$00
1811	.929d		20 f9 92	jsr $92f9	                jsr parseHexAddressFromCommandLine ; Read hex address
1812	.92a0		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput ; Skip spaces
1813	.92a3		08		php		                php  ; Update &F2/3 to point to any further parameters
1814	.92a4		98		tya		                tya
1815	.92a5		18		clc		                clc
1816	.92a6		65 f2		adc $f2		                adc stringInputBufferAddress+0
1817	.92a8		85 f2		sta $f2		                sta stringInputBufferAddress+0
1818	.92aa		90 02		bcc $92ae	                bcc +
1819	.92ac		e6 f3		inc $f3		                inc stringInputBufferAddress+1
1820	.92ae						+
1821	.92ae		a0 00		ldy #$00	                ldy #$00    ; (&F2),y=>parameters, EQ if no parameters
1822	.92b0		28		plp		                plp
1823	.92b1		6c ed 02	jmp ($02ed)	                jmp (osfileParameterBlock+0) ; Jump to address

1825							;-------------------------------------------------------------------------

1827	.92b4						starLOAD:
1828	.92b4		a9 ff		lda #$ff	                lda #fileLoad
1829	.92b6						starCommandThroughOSFILE:
1830	.92b6		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
1831	.92b9						L931B:
1832	.92b9		86 f2		stx $f2		                stx stringInputBufferAddress+0
1833	.92bb		84 f3		sty $f3		                sty stringInputBufferAddress+1
1834	.92bd		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
1835	.92c0		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
1836	.92c3		48		pha		                pha                          ;save OSFILE reason
1837	.92c4		a2 02		ldx #$02	                ldx #OSFILEParameterBlock.load
1838	.92c6		20 5a 92	jsr $925a	                jsr clearOSFILEParameterBlockDWORD
1839	.92c9		a2 0a		ldx #$0a	                ldx #OSFILEParameterBlock.length
1840	.92cb		20 5a 92	jsr $925a	                jsr clearOSFILEParameterBlockDWORD
1841	.92ce		a0 ff		ldy #$ff	                ldy #$FF
1842	.92d0		8c f3 02	sty $02f3	                sty osfileParameterBlock+OSFILEParameterBlock.exec+0 ;by default, load to file's load address
1843	.92d3		c8		iny		                iny                                                  ;Y=0
1844	.92d4		20 ee f1	jsr $f1ee	                jsr mos.gsinitForFilenameParsing
1845	.92d7						L9339:
1846	.92d7		20 00 f2	jsr $f200	                jsr mos.gsreadEntryPoint
1847	.92da		90 fb		bcc $92d7	                bcc L9339
1848	.92dc		68		pla		                pla                          ;restore OSFILE reason
1849	.92dd		48		pha		                pha                          ;save OSFILE reason
1850	.92de		10 4c		bpl $932c	                bpl finishStarSAVE                    ;taken if *SAVE
1851	.92e0		a2 02		ldx #$02	                ldx #OSFILEParameterBlock.load
1852	.92e2		20 67 92	jsr $9267	                jsr parseHexAddressFromString ;parse *LOAD address
1853	.92e5		b0 18		bcs $92ff	                bcs doStarLOADWithExplicitAddress ;taken if good address
1854	.92e7		f0 1b		beq $9304	                beq L9366        ;taken if CR encountered (this is ok)
1855	.92e9						badAddressError:
1856	.92e9		20 2f ab	jsr $ab2f	                jsr doFollowingError
1857	>92ec		fc 42 61 64 20 61 64 64		                .text $fc,"Bad address",0
	>92f4		72 65 73 73 00

1859							;-------------------------------------------------------------------------
1860							;
1861							; Parse hex address from command line.
1862							;
1863	.92f9						parseHexAddressFromCommandLine:
1864	.92f9		20 67 92	jsr $9267	                jsr parseHexAddressFromString ; Read hex address
1865	.92fc		90 eb		bcc $92e9	                bcc badAddressError           ; Jump with bad address
1866	.92fe		60		rts		                rts

1868							;-------------------------------------------------------------------------

1870	.92ff						doStarLOADWithExplicitAddress:
1871	.92ff		d0 7b		bne $937c	                bne badCommandError93E2
1872	.9301		ee f3 02	inc $02f3	                inc osfileParameterBlock+OSFILEParameterBlock.exec+0 ;load to parameter block load address
1873	.9304						L9366:
1874	.9304		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
1875	.9307						callOSFILEWithOSFILEParameterBlock:
1876	.9307		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
1877	.9309		a0 02		ldy #$02	                ldy #>osfileParameterBlock
1878	.930b		68		pla		                pla
1879	.930c		4c dd ff	jmp $ffdd	                jmp OSFILE

1881							;-------------------------------------------------------------------------
1882							;
1883							; *REMOVE [MasRef G.5-9]
1884							;
1885	.930f						starREMOVE:
1886	.930f		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
1887	.9312		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
1888							                .if version>=510||version==350
1889	.9315		86 f2		stx $f2		                stx stringInputBufferAddress+0
1890	.9317		84 f3		sty $f3		                sty stringInputBufferAddress+1
1891	.9319		a0 ff		ldy #$ff	                ldy #$ff
1892	.931b						L9596:
1893	.931b		c8		iny		                iny
1894	.931c		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
1895	.931e		c9 21		cmp #$21	                cmp #'!'
1896	.9320		b0 f9		bcs $931b	                bcs L9596
1897	.9322		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
1898	.9325		d0 55		bne $937c	                bne badCommandError93E2
1899							                .endif
1900	.9327		a9 06		lda #$06	                lda #fileDelete
1901	.9329		48		pha		                pha
1902	.932a		80 db		bra $9307	                bra callOSFILEWithOSFILEParameterBlock

1904							;-------------------------------------------------------------------------
1905							                .if version<510&&version!=350
1915							                .endif
1916							;-------------------------------------------------------------------------
1917							                .if version<510&&version!=350
1930							                .endif
1931							;-------------------------------------------------------------------------

1933	.932c						finishStarSAVE:
1934	.932c		d0 07		bne $9335	                bne L939B
1935	.932e		a2 0a		ldx #$0a	                ldx #OSFILEParameterBlock.saveStart
1936	.9330		20 67 92	jsr $9267	                jsr parseHexAddressFromString
1937	.9333		90 47		bcc $937c	                bcc badCommandError93E2
1938	.9335						L939B:
1939	.9335		b8		clv		                clv
1940	.9336		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
1941	.9338		c9 2b		cmp #$2b	                cmp #'+'
1942	.933a		d0 04		bne $9340	                bne L93A6                    ;taken if "*SAVE START END..."
1943	.933c		2c 6c e3	bit $e36c	                bit mos.valueFF              ;V=1
1944	.933f		c8		iny		                iny
1945	.9340						L93A6:
1946	.9340		a2 0e		ldx #$0e	                ldx #OSFILEParameterBlock.saveEnd
1947	.9342		20 67 92	jsr $9267	                jsr parseHexAddressFromString
1948	.9345		90 35		bcc $937c	                bcc badCommandError93E2
1949	.9347		08		php		                php
1950	.9348		50 0f		bvc $9359	                bvc L93BF                    ;taken if "*SAVE START END"

1952							                ; Get the save end address.
1953	.934a		a2 fc		ldx #$fc	                ldx #256-4
1954	.934c		18		clc		                clc
1955	.934d						-
1956							                ; TODO - not sure why the @w notation is required here?
1957	.934d		bd fb 01	lda $01fb,x	                lda@w osfileParameterBlock+OSFILEParameterBlock.saveStart-(256-4),x
1958	.9350		7d ff 01	adc $01ff,x	                adc@w osfileParameterBlock+OSFILEParameterBlock.saveEnd-(256-4),x
1959	.9353		9d ff 01	sta $01ff,x	                sta@w osfileParameterBlock+OSFILEParameterBlock.saveEnd-(256-4),x
1960	.9356		e8		inx		                inx
1961	.9357		d0 f4		bne $934d	                bne -
1962	.9359						L93BF:

1964							                ; Initialize load and exec addresses to save start
1965							                ; address.
1966	.9359		a2 03		ldx #$03	                ldx #$03
1967	.935b						-
1968	.935b		bd f7 02	lda $02f7,x	                lda@w osfileParameterBlock+OSFILEParameterBlock.saveStart,x
1969	.935e		9d f3 02	sta $02f3,x	                sta@w osfileParameterBlock+OSFILEParameterBlock.exec,x
1970	.9361		9d ef 02	sta $02ef,x	                sta@w osfileParameterBlock+OSFILEParameterBlock.load,x
1971	.9364		ca		dex		                dex
1972	.9365		10 f4		bpl $935b	                bpl -

1974	.9367		28		plp		                plp
1975	.9368		f0 9a		beq $9304	                beq L9366

1977	.936a		a2 06		ldx #$06	                ldx #OSFILEParameterBlock.exec
1978	.936c		20 67 92	jsr $9267	                jsr parseHexAddressFromString
1979	.936f		90 0b		bcc $937c	                bcc badCommandError93E2
1980	.9371		f0 91		beq $9304	                beq L9366

1982	.9373		a2 02		ldx #$02	                ldx #OSFILEParameterBlock.load
1983	.9375		20 67 92	jsr $9267	                jsr parseHexAddressFromString
1984	.9378		90 02		bcc $937c	                bcc badCommandError93E2
1985	.937a		f0 88		beq $9304	                beq L9366

1987	.937c						badCommandError93E2:
1988	.937c		4c 37 f9	jmp $f937	                jmp mos.badCommandError

1990							;-------------------------------------------------------------------------

1992	.937f						starFX:
1993	.937f		20 b0 83	jsr $83b0	                jsr parseNumberFromString
1994	.9382		90 f8		bcc $937c	                bcc badCommandError93E2
1995	.9384		8a		txa		                txa
1996	.9385						starCommandThroughOSBYTE:
1997	.9385		08		php		                php
1998	.9386		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
1999	.9389		28		plp		                plp
2000	.938a		48		pha		                pha
2001	.938b		64 e5		stz $e5		                stz $E5
2002	.938d		64 e4		stz $e4		                stz $E4
2003	.938f		20 89 f2	jsr $f289	                jsr mos.LF308
2004	.9392		f0 18		beq $93ac	                beq L9412
2005	.9394		20 b0 83	jsr $83b0	                jsr parseNumberFromString
2006	.9397		90 e3		bcc $937c	                bcc badCommandError93E2
2007	.9399		86 e5		stx $e5		                stx $E5
2008	.939b		20 8b f2	jsr $f28b	                jsr mos.LF30A
2009	.939e		f0 0c		beq $93ac	                beq L9412
2010	.93a0		20 b0 83	jsr $83b0	                jsr parseNumberFromString
2011	.93a3		90 d7		bcc $937c	                bcc badCommandError93E2
2012	.93a5		86 e4		stx $e4		                stx $E4
2013	.93a7		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
2014	.93aa						L9625:
2015	.93aa		d0 d0		bne $937c	                bne badCommandError93E2
2016	.93ac						L9412:
2017	.93ac		a4 e4		ldy $e4		                ldy $E4
2018	.93ae		a6 e5		ldx $e5		                ldx $E5
2019	.93b0		68		pla		                pla
2020	.93b1		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
2021	.93b4		20 f4 ff	jsr $fff4	                jsr OSBYTE
2022	.93b7		70 c3		bvs $937c	                bvs badCommandError93E2
2023	.93b9						L941F:
2024	.93b9		60		rts		                rts

2026							;-------------------------------------------------------------------------

2028	.93ba						starSPOOLON:
2029	.93ba		38		sec		                sec
2030	.93bb		80 14		bra $93d1	                bra starSPOOL

2032							;-------------------------------------------------------------------------

2034							                .if version>=510||version==350
2035	.93bd						starSHADOW:
2036	.93bd		a9 72		lda #$72	                lda #$72
2037	.93bf						L963A:
2038	.93bf		80 c4		bra $9385	                bra starCommandThroughOSBYTE
2039							                .endif

2041							;-------------------------------------------------------------------------

2043	.93c1						L9423:
2044	.93c1		a2 10		ldx #$10	                ldx #romServiceCallSpoolExecClosureWarning
2045	.93c3		20 c3 ed	jsr $edc3	                jsr mos.makeROMServiceCall
2046	.93c6		f0 f1		beq $93b9	                beq L941F
2047	.93c8		20 a5 a5	jsr $a5a5	                jsr LA58B
2048	.93cb		ad 57 02	lda $0257	                lda spoolFileHandle
2049	.93ce		20 85 a5	jsr $a585	                jsr LA56B
2050	.93d1						starSPOOL:
2051	.93d1		08		php		                php
2052	.93d2		5a		phy		                phy
2053	.93d3		ac 57 02	ldy $0257	                ldy spoolFileHandle
2054	.93d6		8d 57 02	sta $0257	                sta spoolFileHandle
2055	.93d9		f0 03		beq $93de	                beq L9440
2056	.93db		20 ce ff	jsr $ffce	                jsr OSFIND
2057	.93de						L9440:
2058	.93de		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
2059	.93e1		7a		ply		                ply
2060	.93e2		28		plp		                plp
2061	.93e3		f0 d4		beq $93b9	                beq L941F
2062	.93e5		a9 80		lda #$80	                lda #$80
2063	.93e7		90 02		bcc $93eb	                bcc L944D
2064	.93e9		a9 c0		lda #$c0	                lda #$C0
2065	.93eb						L944D:
2066	.93eb		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
2067	.93ee		20 ce ff	jsr $ffce	                jsr OSFIND
2068	.93f1		a8		tay		                tay
2069	.93f2		f0 88		beq $937c	                beq badCommandError93E2
2070	.93f4		8d 57 02	sta $0257	                sta spoolFileHandle
2071	.93f7		a8		tay		                tay
2072	.93f8						setPTRToEOF:
2073	.93f8		a9 02		lda #$02	                lda #argsFileGetEXT
2074	.93fa		20 ff 93	jsr $93ff	                jsr callOSARGSWithBuffer
2075	.93fd						setFilePointerFromOSARGSBuffer:
2076	.93fd		a9 01		lda #$01	                lda #argsFileSetPTR
2077	.93ff						callOSARGSWithBuffer:
2078	.93ff		a2 a8		ldx #$a8	                ldx #osargsBuffer
2079	.9401		4c da ff	jmp $ffda	                jmp OSARGS

2081							;-------------------------------------------------------------------------

2083							                .if version<510&&version!=350
2087							                .endif

2089							;-------------------------------------------------------------------------

2091							                .if version>=510||version==350
2092	.9404						starCLOSE:
2093	.9404		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
2094	.9407		d0 a1		bne $93aa	                bne L9625
2095	.9409		a9 00		lda #$00	                lda #$00
2096	.940b		a8		tay		                tay
2097	.940c		6c 1c 02	jmp ($021c)	                jmp (FINDV)                  ;OSFIND A=0 Y=0
2098							                .endif

2100							;-------------------------------------------------------------------------

2102							                .if version>=510||version==350
2103	.940f						starIGNORE:
2104	.940f		d0 05		bne $9416	                bne L938E
2105	.9411		38		sec		                sec
2106	.9412		6e 46 02	ror $0246	                ror noignoreState
2107	.9415		60		rts		                rts

2109	.9416						L938E:
2110	.9416		a9 06		lda #$06	                lda #$06
2111	.9418		80 a5		bra $93bf	                bra L963A
2112							                .endif

2114							;-------------------------------------------------------------------------
2115							;
2116	.941a						starDELETE:
2117	.941a		20 0f 93	jsr $930f	                jsr starREMOVE
2118	.941d		a8		tay		                tay
2119	.941e		d0 99		bne $93b9	                bne L941F
2120	.9420		4c 67 a5	jmp $a567	                jmp notFoundError

2122							;-------------------------------------------------------------------------

2124							                .if version==350
2125							                .include "rtc.s65"

:11	;******  Processing file: src/rtc.s65

1							                .if version<500
2							; Day string not matched
3							; ----------------------
4	.9423						nextDayString:
5	.9423		68		pla		                pla                          ; Drop number of characters matched
6	.9424		68		pla		                pla                          ; Get offset to string table
7	.9425		7a		ply		                ply                          ; Get start of supplied string
8	.9426		18		clc		                clc                          ; Step to next string table entry
9	.9427		69 04		adc #$04	                adc #$04
10	.9429		c9 1c		cmp #$1c	                cmp #size(dayOfWeekStrings) ; If not checked 28/4=7 entries, keep looking
11	.942b		90 1c		bcc $9449	                bcc checkDayString
12	.942d		60		rts		                rts                          ; Otherwise exit silently

14							; Month string not matched
15							; ------------------------
16	.942e						nextMonthString:
17	.942e		68		pla		                pla                          ; Drop number of characters matched
18	.942f		68		pla		                pla                          ; Get offset to string table
19	.9430		7a		ply		                ply                          ; Get start of supplied string
20	.9431		18		clc		                clc                          ; Step to next string table entry
21	.9432		69 04		adc #$04	                adc #$04
22	.9434		c9 30		cmp #$30	                cmp #size(monthStrings) ; If not checked 48/4=12 entries, keep looking
23	.9436		90 43		bcc $947b	                bcc checkMonthString
24	.9438						rts9655:
25	.9438		60		rts		                rts                          ; Otherwise exit silently

27							;-------------------------------------------------------------------------
28							;
29							; OSWORD 15 (&0F) Write CMOS clock [MasRef D.3-24]
30							;
31	.9439						osword0F:
32	.9439		9c ed 02	stz $02ed	                stz osfileParameterBlock     ;got no time, got no date
33	.943c		49 0f		eor #$0f	                eor #15                     ; len=15, set date
34	.943e		f0 08		beq $9448	                beq setDate
35	.9440		49 07		eor #$07	                eor #15^8
36	.9442		f0 76		beq $94ba	                beq setTime
37	.9444		49 10		eor #$10	                eor #(15^8)^23
38	.9446		d0 f0		bne $9438	                bne rts9655

40							; Set date and set date+time
41							; --------------------------
42							; (&F0),1=>"Day,00 Mon 0000"
43							; (&F0),1=>"Day,00 Mon 0000.00:00:00"
44							; A=0, Y=0
45	.9448						setDate:
46	.9448		c8		iny		                iny                          ; Point to supplied data
47							; Translate day string into day number
48	.9449						checkDayString:
49	.9449		5a		phy		                phy                          ; Push pointer to data string
50	.944a		48		pha		                pha                          ; Push offset to match strings
51	.944b		aa		tax		                tax                          ; X=>match strings
52	.944c		a9 03		lda #$03	                lda #$03                     ; A=3 characters to match
53	.944e						checkDayStringLoop:
54	.944e		48		pha		                pha                          ; Save number of characters to match
55	.944f		b1 f0		lda ($f0),y	                lda (originalX),y      ; Get character from string
56	.9451		5d 4b 95	eor $954b,x	                eor dayOfWeekStrings,x ; Compare with day string table
57	.9454		29 df		and #$df	                and #$DF                     ; Force to upper case
58	.9456		d0 cb		bne $9423	                bne nextDayString  ; No match step to check next entry
59	.9458		e8		inx		                inx                          ; Step to next character to match
60	.9459		c8		iny		                iny                          ; Step to next data character
61	.945a		68		pla		                pla                          ; Get character count back
62	.945b		3a		dec a		                dec a                        ; Decrement and loop until 3 characters matched
63	.945c		d0 f0		bne $944e	                bne checkDayStringLoop
64	.945e		bd 4b 95	lda $954b,x	                lda dayOfWeekStrings,x ; Get translation byte from string table
65	.9461		8d f4 02	sta $02f4	                sta osfileParameterBlock+1+RTC.dayOfWeek ; Store it in workspace
66							; Translates Sun,Mon,Tue,etc to &01,&02,&03,etc
67	.9464		fa		plx		                plx                          ; Drop char count and table offset
68	.9465		fa		plx		                plx
69	.9466		b1 f0		lda ($f0),y	                lda ($F0),y                  ; Get next character
70	.9468		c9 2c		cmp #$2c	                cmp #','                     ; Not followed by a comma, so exit silently
71	.946a		d0 cc		bne $9438	                bne rts9655
72	.946c		a2 07		ldx #$07	                ldx #$07                     ; Get day of month
73	.946e		20 13 95	jsr $9513	                jsr readDecimalBCDByte
74	.9471		90 c5		bcc $9438	                bcc rts9655                    ; Bad number, exit silently
75	.9473		c8		iny		                iny                          ; Get next character
76	.9474		b1 f0		lda ($f0),y	                lda ($F0),y
77	.9476		49 20		eor #$20	                eor #' '                     ; Not space, exit silently
78	.9478		d0 be		bne $9438	                bne rts9655
79	.947a		c8		iny		                iny                          ; Step to first character of month
80							; Translate month string into month number
81							; This could use the same code as the Day translation
82	.947b						checkMonthString:
83	.947b		5a		phy		                phy                          ; Push pointer to data string
84	.947c		48		pha		                pha                          ; Push offset to match strings
85	.947d		aa		tax		                tax                          ; X=>match strings
86	.947e		a9 03		lda #$03	                lda #$03                     ; A=3 characters to match
87	.9480						checkMonthStringLoop:
88	.9480		48		pha		                pha
89	.9481		b1 f0		lda ($f0),y	                lda (originalX),y
90	.9483		5d 67 95	eor $9567,x	                eor monthStrings,x
91	.9486		29 df		and #$df	                and #$DF
92	.9488		d0 a4		bne $942e	                bne nextMonthString
93	.948a		e8		inx		                inx
94	.948b		c8		iny		                iny
95	.948c		68		pla		                pla
96	.948d		3a		dec a		                dec a
97	.948e		d0 f0		bne $9480	                bne checkMonthStringLoop
98	.9490		bd 67 95	lda $9567,x	                lda monthStrings,x
99	.9493		8d f6 02	sta $02f6	                sta osfileParameterBlock+1+RTC.month
100							; Translates Jan,Feb,Mar,etc to &01,&02,&03,etc..&09,&10,&11,&12
101	.9496		fa		plx		                plx                          ; Drop char count and table offset
102	.9497		fa		plx		                plx
103	.9498		b1 f0		lda ($f0),y	                lda ($F0),y                  ; Get next character
104	.949a		c9 20		cmp #$20	                cmp #' '                     ; Not followed by space, exit silently
105	.949c		d0 9a		bne $9438	                bne rts9655
106	.949e		a2 09		ldx #$09	                ldx #RTC.year
107	.94a0		20 13 95	jsr $9513	                jsr readDecimalBCDByte
108	.94a3		90 93		bcc $9438	                bcc rts9655                    ; Bad number, exit silently
109	.94a5		20 13 95	jsr $9513	                jsr readDecimalBCDByte                    ; Get year number
110	.94a8		90 8e		bcc $9438	                bcc rts9655                    ; Bad number, exit silently
111	.94aa		6e ed 02	ror $02ed	                ror osfileParameterBlock+0     ;got date
112	.94ad		b2 f0		lda ($f0)	                lda (originalX)        ; Get data length
113	.94af		c9 0f		cmp #$0f	                cmp #$0F                     ; len=15, jump to just set date
114	.94b1		f0 2f		beq $94e2	                beq setRTCDate
115							; Must be len=24 to set date+time
116	.94b3		c8		iny		                iny                          ; Get next character
117	.94b4		b1 f0		lda ($f0),y	                lda (originalX),y
118	.94b6		c9 2e		cmp #$2e	                cmp #'.'                     ; If not full stop, exit silently
119	.94b8		d0 7c		bne $9536	                bne rts9753

121	.94ba						setTime:
122	.94ba		a2 04		ldx #$04	                ldx #RTC.hours
123	.94bc		20 13 95	jsr $9513	                jsr readDecimalBCDByte
124	.94bf		90 75		bcc $9536	                bcc rts9753
125	.94c1		c8		iny		                iny
126	.94c2		b1 f0		lda ($f0),y	                lda (originalX),y
127	.94c4		c9 3a		cmp #$3a	                cmp #':'
128	.94c6		d0 6e		bne $9536	                bne rts9753
129	.94c8		a2 02		ldx #$02	                ldx #RTC.minutes
130	.94ca		20 13 95	jsr $9513	                jsr readDecimalBCDByte
131	.94cd		90 67		bcc $9536	                bcc rts9753
132	.94cf		c8		iny		                iny
133	.94d0		b1 f0		lda ($f0),y	                lda (originalX),y
134	.94d2		c9 3a		cmp #$3a	                cmp #':'
135	.94d4		d0 60		bne $9536	                bne rts9753
136	.94d6		a2 00		ldx #$00	                ldx #RTC.seconds
137	.94d8		20 13 95	jsr $9513	                jsr readDecimalBCDByte
138	.94db		90 59		bcc $9536	                bcc rts9753
139	.94dd		a9 40		lda #$40	                lda #$40
140	.94df		0c ed 02	tsb $02ed	                tsb osfileParameterBlock+0   ;got time
141	.94e2						setRTCDate:
142	.94e2		58		cli		                cli
143	.94e3		78		sei		                sei
144	.94e4		a0 83		ldy #$83	                ldy #RTC.b.set|RTC.b._24h|RTC.b.dse
145	.94e6		a2 0b		ldx #$0b	                ldx #RTC.b
146	.94e8		20 d0 96	jsr $96d0	                jsr writeRTCByte
147	.94eb		2c ed 02	bit $02ed	                bit osfileParameterBlock+0 ;N=1 if got date; V=1 if got time
148	.94ee		10 0f		bpl $94ff	                bpl setRTCTime ;taken if not got date - must then have time
149	.94f0		a2 06		ldx #$06	                ldx #$06
150	.94f2						-
151	.94f2		bc ee 02	ldy $02ee,x	                ldy osfileParameterBlock+1,x
152	.94f5		20 d0 96	jsr $96d0	                jsr writeRTCByte
153	.94f8		e8		inx		                inx
154	.94f9		e0 0a		cpx #$0a	                cpx #RTC.a
155	.94fb		90 f5		bcc $94f2	                bcc -
156	.94fd		50 0d		bvc $950c	                bvc finishRTCUpdate                    ;taken if not got date
157	.94ff						setRTCTime:
158	.94ff		a2 00		ldx #$00	                ldx #RTC.seconds
159	.9501						-
160	.9501		bc ee 02	ldy $02ee,x	                ldy osfileParameterBlock+1,x
161	.9504		20 d0 96	jsr $96d0	                jsr writeRTCByte
162	.9507		e8		inx		                inx
163	.9508		e0 06		cpx #$06	                cpx #RTC.dayOfWeek
164	.950a		90 f5		bcc $9501	                bcc -
165	.950c						finishRTCUpdate:
166	.950c		a2 0b		ldx #$0b	                ldx #RTC.b
167	.950e		a0 02		ldy #$02	                ldy #RTC.b._24h
168	.9510		4c d0 96	jmp $96d0	                jmp writeRTCByte

170	.9513						readDecimalBCDByte:
171	.9513		20 37 95	jsr $9537	                jsr readDecimalDigit
172	.9516		49 20		eor #$20	                eor #$20         ;check for ' '
173	.9518		f0 04		beq $951e	                beq +        ;taken if leading space - that's fine
174	.951a		49 20		eor #$20	                eor #$20         ;reinstate old value
175	.951c		90 18		bcc $9536	                bcc rts9753      ;taken if non-space non-digits
176	.951e						+
177	.951e		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
178	.9521		20 37 95	jsr $9537	                jsr readDecimalDigit
179	.9524		90 10		bcc $9536	                bcc rts9753                  ;taken if invalid digit

181							                ; rotate new digit into place
182	.9526		5a		phy		                phy
183	.9527		a0 04		ldy #$04	                ldy #$04
184	.9529		0a		asl a		                asl a
185	.952a		0a		asl a		                asl a
186	.952b		0a		asl a		                asl a
187	.952c		0a		asl a		                asl a
188	.952d						-
189	.952d		0a		asl a		                asl a
190	.952e		3e ee 02	rol $02ee,x	                rol osfileParameterBlock+1,x
191	.9531		88		dey		                dey
192	.9532		d0 f9		bne $952d	                bne -
193	.9534		7a		ply		                ply
194	.9535		38		sec		                sec
195	.9536						rts9753:
196	.9536		60		rts		                rts

198	.9537						readDecimalDigit:
199	.9537		c8		iny		                iny
200	.9538		b1 f0		lda ($f0),y	                lda (originalX),y
201	.953a		c9 3a		cmp #$3a	                cmp #'9'+1
202	.953c		b0 07		bcs $9545	                bcs notDecimalDigit
203	.953e		c9 30		cmp #$30	                cmp #'0'
204	.9540		90 03		bcc $9545	                bcc notDecimalDigit
205	.9542		29 0f		and #$0f	                and #$0F
206	.9544		60		rts		                rts

208	.9545						notDecimalDigit:
209	.9545		18		clc		                clc
210	.9546		60		rts		                rts
211							                .endif

213							;-------------------------------------------------------------------------

215							; TODO - is this necessary?
216							;
217							; There's a reference to dayOfWeekStrings-4, but that seems to be
218							; because days are 1-based. The data here is presumably never
219							; accesssed.
220	>9547		20 20 20 00			                .text "   ",0

222							;-------------------------------------------------------------------------

224	.954b						dayOfWeekStrings: .block
225	>954b		53 75 6e 01			                .text "Sun",$01
226	>954f		4d 6f 6e 02			                .text "Mon",$02
227	>9553		54 75 65 03			                .text "Tue",$03
228	>9557		57 65 64 04			                .text "Wed",$04
229	>955b		54 68 75 05			                .text "Thu",$05
230	>955f		46 72 69 06			                .text "Fri",$06
231	>9563		53 61 74 07			                .text "Sat",$07
232							                .endblock

234							;-------------------------------------------------------------------------

236	.9567						monthStrings: .block
237	>9567		4a 61 6e 01			                .text "Jan",$01
238	>956b		46 65 62 02			                .text "Feb",$02
239	>956f		4d 61 72 03			                .text "Mar",$03
240	>9573		41 70 72 04			                .text "Apr",$04
241	>9577		4d 61 79 05			                .text "May",$05
242	>957b		4a 75 6e 06			                .text "Jun",$06
243	>957f		4a 75 6c 07			                .text "Jul",$07
244	>9583		41 75 67 08			                .text "Aug",$08
245	>9587		53 65 70 09			                .text "Sep",$09
246	>958b		4f 63 74 10			                .text "Oct",$10
247	>958f		4e 6f 76 11			                .text "Nov",$11
248	>9593		44 65 63 12			                .text "Dec",$12
249							                .endblock

251							;-------------------------------------------------------------------------

253							                .if version>=500
262							                .endif

264							;-------------------------------------------------------------------------

266							                .if version>=500
270							                .endif

272							;-------------------------------------------------------------------------
273							;
274							; OSWORD 14 (&0E) Read CMOS clock [MasRef D.3-22]
275							;

277	.9597						osword0E:
278							                .if version<500
279	.9597		48		pha		                pha                          ;save reason code
280	.9598		49 02		eor #$02	                eor #$02                     ;
281	.959a		d0 1b		bne $95b7	                bne readClock
325							                .endif

327							                ; Convert given time to string. Fill out the RTC temp
328							                ; data with the info from the parameter block, then
329							                ; pass on to the common code.
330	.959c		a0 07		ldy #$07	                ldy #$07

332							                ; Copy hours, mins, secs.
333	.959e		a2 00		ldx #$00	                ldx #$00
334	.95a0						-
335	.95a0		b1 f0		lda ($f0),y	                lda ($F0),y
336	.95a2		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
337	.95a5		88		dey		                dey
338	.95a6		e8		inx		                inx
339	.95a7		e8		inx		                inx
340	.95a8		e0 06		cpx #$06	                cpx #$06
341	.95aa		90 f4		bcc $95a0	                bcc -

343							                ; Copy day of week, day of month, month, year.
344	.95ac						-
345	.95ac		b1 f0		lda ($f0),y	                lda (originalX),y
346	.95ae		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
347	.95b1		e8		inx		                inx
348	.95b2		88		dey		                dey
349	.95b3		d0 f7		bne $95ac	                bne -

351							                .if version<500
352	.95b5		80 30		bra $95e7	                bra maybeConvertToString ; (called from here, there's no maybe about it)

354	.95b7						readClock:
355	.95b7		a5 f0		lda $f0		                lda originalX
356	.95b9		48		pha		                pha
357	.95ba		a5 f1		lda $f1		                lda originalY
358	.95bc		48		pha		                pha
359	.95bd						readRTCClock:
360	.95bd		a2 0c		ldx #$0c	                ldx #RTC.c
361	.95bf		20 a3 96	jsr $96a3	                jsr readRTCByte ;clear the various IRQ flags with a read of register C
362	.95c2		a2 09		ldx #$09	                ldx #RTC.year
363	.95c4						-
364	.95c4		20 a3 96	jsr $96a3	                jsr readRTCByte
365	.95c7		9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
366	.95ca		ca		dex		                dex
367	.95cb		10 f7		bpl $95c4	                bpl -
368	.95cd		a2 0a		ldx #$0a	                ldx #RTC.a
369	.95cf		20 a3 96	jsr $96a3	                jsr readRTCByte
370	.95d2		10 04		bpl $95d8	                bpl L97F5 ;taken if update not in progress - result is good
371	.95d4						retryReadRTCClock:
372	.95d4		58		cli		                cli
373	.95d5		78		sei		                sei
374	.95d6		80 e5		bra $95bd	                bra readRTCClock

376	.95d8						L97F5:
377	.95d8		a2 0c		ldx #$0c	                ldx #RTC.c
378	.95da		20 a3 96	jsr $96a3	                jsr readRTCByte
379	.95dd		29 10		and #$10	                and #RTC.c.uf
380	.95df		d0 f3		bne $95d4	                bne retryReadRTCClock
381	.95e1		68		pla		                pla
382	.95e2		85 f1		sta $f1		                sta originalY
383	.95e4		68		pla		                pla
384	.95e5		85 f0		sta $f0		                sta originalX
385	.95e7						maybeConvertToString:
386	.95e7		68		pla		                pla                          ;get reason code
387	.95e8		3a		dec a		                dec a
388	.95e9		d0 1a		bne $9605	                bne convertTimeToString                    ;taken if 0 or 2

390							                ; Copy year, month, day of month, day of week.
391	.95eb		a0 00		ldy #$00	                ldy #$00
392	.95ed		a2 09		ldx #$09	                ldx #RTC.year
393	.95ef						-
394	.95ef		bd ee 02	lda $02ee,x	                lda osfileParameterBlock+1,x
395	.95f2		91 f0		sta ($f0),y	                sta (originalX),y
396	.95f4		c8		iny		                iny
397	.95f5		ca		dex		                dex
398	.95f6		e0 06		cpx #$06	                cpx #RTC.dayOfWeek
399	.95f8		b0 f5		bcs $95ef	                bcs -

401							                ; Copy hours, minutes, seconds.
402	.95fa						-
403	.95fa		bd ed 02	lda $02ed,x	                lda osfileParameterBlock,x
404	.95fd		91 f0		sta ($f0),y	                sta (originalX),y
405	.95ff		c8		iny		                iny
406	.9600		ca		dex		                dex
407	.9601		ca		dex		                dex
408	.9602		10 f6		bpl $95fa	                bpl -
409	.9604		60		rts		                rts

411							                .endif

413	.9605						convertTimeToString:
414							                ; Store terminating CR.
415	.9605		a0 18		ldy #$18	                ldy #ClockStringFormat.cr
416	.9607		a9 0d		lda #$0d	                lda #13
417	.9609		91 f0		sta ($f0),y	                sta (originalX),y
418	.960b		a2 00		ldx #$00	                ldx #$00
419	.960d		88		dey		                dey
420	.960e		20 73 96	jsr $9673	                jsr storeRTCDataByteString
421	.9611		a9 3a		lda #$3a	                lda #':'
422	.9613		91 f0		sta ($f0),y	                sta (originalX),y
423	.9615		a0 12		ldy #$12	                ldy #ClockStringFormat.hh+2
424	.9617		91 f0		sta ($f0),y	                sta (originalX),y
425	.9619		a2 02		ldx #$02	                ldx #RTC.minutes
426	.961b		a0 14		ldy #$14	                ldy #ClockStringFormat.mm+1
427	.961d		20 73 96	jsr $9673	                jsr storeRTCDataByteString
428	.9620		a2 04		ldx #$04	                ldx #RTC.hours
429	.9622		a0 11		ldy #$11	                ldy #ClockStringFormat.hh+1
430	.9624		20 73 96	jsr $9673	                jsr storeRTCDataByteString
431	.9627		a9 2e		lda #$2e	                lda #'.'
432	.9629		91 f0		sta ($f0),y	                sta (originalX),y
433	.962b		ad f4 02	lda $02f4	                lda osfileParameterBlock+1+RTC.dayOfWeek;
434	.962e		0a		asl a		                asl a
435	.962f		0a		asl a		                asl a
436	.9630		a0 00		ldy #$00	                ldy #$00
437	.9632		aa		tax		                tax
438	.9633						-
439	.9633		bd 47 95	lda $9547,x	                lda dayOfWeekStrings-4,x     ;-4 as 1=Sunday
440	.9636		91 f0		sta ($f0),y	                sta (originalX),y
441	.9638		e8		inx		                inx
442	.9639		c8		iny		                iny
443	.963a		c0 03		cpy #$03	                cpy #$03
444	.963c		90 f5		bcc $9633	                bcc -
445	.963e		a9 2c		lda #$2c	                lda #','
446	.9640		91 f0		sta ($f0),y	                sta (originalX),y
447	.9642		ad f6 02	lda $02f6	                lda osfileParameterBlock+1+RTC.month
448	.9645		c9 10		cmp #$10	                cmp #$10
449	.9647		90 02		bcc $964b	                bcc +
450	.9649		e9 06		sbc #$06	                sbc #$06            ;convert $10, $11 and $12 from BCD
451	.964b						+
452	.964b		3a		dec a		                dec a                        ;make month 0-based
453	.964c		0a		asl a		                asl a
454	.964d		0a		asl a		                asl a
455	.964e		aa		tax		                tax
456	.964f		a0 07		ldy #$07	                ldy #ClockStringFormat.mmm
457	.9651						-
458	.9651		bd 67 95	lda $9567,x	                lda monthStrings,x
459	.9654		91 f0		sta ($f0),y	                sta ($F0),y
460	.9656		e8		inx		                inx
461	.9657		c8		iny		                iny
462	.9658		c0 0a		cpy #$0a	                cpy #ClockStringFormat.mmm+3
463	.965a		90 f5		bcc $9651	                bcc -
464	.965c		a2 09		ldx #$09	                ldx #RTC.year
465	.965e		a0 0e		ldy #$0e	                ldy #ClockStringFormat.yyyy+3
466	.9660		20 73 96	jsr $9673	                jsr storeRTCDataByteString
467							                .if multios
471							                .else
472	.9663		a9 19		lda #$19	                lda #$19                     ;it's always 19xx... right?
473	.9665		20 76 96	jsr $9676	                jsr storeBCDByteString
474							                .endif
475	.9668		a9 20		lda #$20	                lda #$20
476	.966a		91 f0		sta ($f0),y	                sta ($F0),y
477	.966c		a0 06		ldy #$06	                ldy #ClockStringFormat.nn+2
478	.966e		91 f0		sta ($f0),y	                sta ($F0),y
479	.9670		88		dey		                dey
480	.9671		a2 07		ldx #$07	                ldx #RTC.dayOfMonth
481	.9673						storeRTCDataByteString:
482	.9673		bd ee 02	lda $02ee,x	                lda osfileParameterBlock+1,x
483	.9676						storeBCDByteString:
484	.9676		48		pha		                pha
485	.9677		20 7e 96	jsr $967e	                jsr storeNybbleString
486	.967a		68		pla		                pla
487							                .if version==350
488	.967b		20 2e e5	jsr $e52e	                jsr mos.LE520
494							                .endif
495	.967e						storeNybbleString:
496	.967e		29 0f		and #$0f	                and #$0F
497	.9680		09 30		ora #$30	                ora #'0'
498	.9682		c9 3a		cmp #$3a	                cmp #'9'+1
499	.9684		90 02		bcc $9688	                bcc +
500	.9686		69 06		adc #$06	                adc #('A'-'9'-1)-1           ;(-1 because C set)
501	.9688						+
502	.9688		91 f0		sta ($f0),y	                sta (originalX),y
503	.968a		88		dey		                dey
504	.968b		60		rts		                rts

506							;-------------------------------------------------------------------------

508							                .if version<500
509							                .if version==350
510	.968c						setTSTAndReadDefaults2:
511	.968c		20 6a f3	jsr $f36a	                jsr mos.callWithTST
512							                .endif
513	.968f						readDefaults2:
514	.968f		a2 1d		ldx #$1d	                ldx #CMOSBytes.defaults2+cmosBytesOffset
515	.9691		80 10		bra $96a3	                bra readRTCByte
516							                .endif

518							;-------------------------------------------------------------------------

520							                .if version<500
521	.9693						readDefaults3:
522							                .if version==350
523	.9693		20 6a f3	jsr $f36a	                jsr mos.callWithTST
524	.9696						readDefaults3WithTST:
525							                .endif
526	.9696		a2 1e		ldx #$1e	                ldx #CMOSBytes.defaults3+cmosBytesOffset
527	.9698		80 09		bra $96a3	                bra readRTCByte
528							                .endif

530							;-------------------------------------------------------------------------
531							;
532							; Read byte from RTC, either by 0-based CMOS RAM offset (readCMOSByte)
533							; or by RTC register index (readRTCByte).
534							;
535							; entry:
536							;
537							; X = address to read from
538							;
539							; exit:
540							;
541							; A = byte read
542							;
543							; N,Z = set as per byte read
544							;
545							                .if version<500
546	.969a						readCMOSByte:
547	.969a		20 e9 96	jsr $96e9	                jsr getRTCAddressForCMOSByte
548							                .if version==350
549	.969d		90 04		bcc $96a3	                bcc readRTCByte
550	.969f		60		rts		                rts
553							                .endif
554							                .if version==350
555	.96a0						setTSTAndReadRTCByte:
556	.96a0		20 6a f3	jsr $f36a	                jsr mos.callWithTST
557							                .endif
558	.96a3						readRTCByte:
559	.96a3		08		php		                php
560	.96a4		78		sei		                sei
561	.96a5		20 f2 96	jsr $96f2	                jsr setRTCAddress
562	.96a8		a9 49		lda #$49	                lda #$49
563	.96aa		8d 40 fe	sta $fe40	                sta systemVIA.orb
564	.96ad		9c 43 fe	stz $fe43	                stz systemVIA.ddra
565	.96b0		a9 4a		lda #$4a	                lda #$4A
566	.96b2		8d 40 fe	sta $fe40	                sta systemVIA.orb
567	.96b5		ac 4f fe	ldy $fe4f	                ldy systemVIA.iraNoHandshake ;read value
568	.96b8						deselectRTC:
569	.96b8		a9 42		lda #$42	                lda #$42
570	.96ba		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=0
571	.96bd		a9 02		lda #$02	                lda #$02
572	.96bf		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=0 DS=0 R=0
573	.96c2		9c 43 fe	stz $fe43	                stz systemVIA.ddra           ;all bits inputs
574	.96c5		28		plp		                plp
575	.96c6		98		tya		                tya
576	.96c7						rts98DB:
577	.96c7		60		rts		                rts
578							                .endif

580							;-------------------------------------------------------------------------
581							;
582							; Write byte to RTC, either by 0-based CMOS RAM offset (writeCMOSByte)
583							; or by RTC register index (writeRTCByte).
584							;
585							; (For some reason, writeCMOSByte can't be used to write to CMOS RAM
586							; offset 0.)
587							;
588							; entry:
589							;
590							; X = address to write to
591							;
592							; Y = value to write
593							;
594							                .if version<500
595	.96c8						writeCMOSByte:
596	.96c8		8a		txa		                txa
597	.96c9		f0 fc		beq $96c7	                beq rts98DB
598	.96cb		20 e9 96	jsr $96e9	                jsr getRTCAddressForCMOSByte
599	.96ce		b0 f7		bcs $96c7	                bcs rts98DB
600	.96d0						writeRTCByte:
601	.96d0		08		php		                php
602	.96d1		78		sei		                sei
603	.96d2		20 f2 96	jsr $96f2	                jsr setRTCAddress            ;X=address
604	.96d5		a9 41		lda #$41	                lda #$41
605	.96d7		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=0
606	.96da		a9 ff		lda #$ff	                lda #$FF
607	.96dc		8d 43 fe	sta $fe43	                sta systemVIA.ddra           ;all bits outputs
608	.96df		a9 4a		lda #$4a	                lda #$4A
609	.96e1		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=1
610	.96e4		8c 4f fe	sty $fe4f	                sty systemVIA.oraNoHandshake ;store value
611	.96e7		80 cf		bra $96b8	                bra deselectRTC
612							                .endif

614							;-------------------------------------------------------------------------
615							;
616							; Convert CMOS byte offset to actual RTC address.
617							;
618							; entry:
619							;
620							; X = CMOS byte offset - 0-49
621							;
622							; exit:
623							;
624							; C=1 = invalid address
625							;
626							; C=0 = valid address: X = register index
627							;
628							                .if version<500
629	.96e9						getRTCAddressForCMOSByte:
630	.96e9		e0 32		cpx #$32	                cpx #size(RTC.ram)
631	.96eb		b0 04		bcs $96f1	                bcs rts9905
632	.96ed		8a		txa		                txa
633	.96ee		69 0e		adc #$0e	                adc #RTC.ram
634	.96f0		aa		tax		                tax
635	.96f1						rts9905:
636	.96f1		60		rts		                rts
637							                .endif

639							;-------------------------------------------------------------------------
640							;
641							; set RTC address for future read/write operation.
642							;
643							; entry:
644							;
645							; X = address to set
646							;
647							; preserves: Y
648							;
649							                .if version<500
650	.96f2						setRTCAddress:
651	.96f2		a9 02		lda #$02	                lda #$02
652	.96f4		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=0 DS=0 R=0
653	.96f7		a9 82		lda #$82	                lda #$82
654	.96f9		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=1 CS=0 DS=0 R=0
655	.96fc		a9 ff		lda #$ff	                lda #$FF
656	.96fe		8d 43 fe	sta $fe43	                sta systemVIA.ddra           ;all bits outputs
657	.9701		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake ;write RTC address
658	.9704		a9 c2		lda #$c2	                lda #$c2
659	.9706		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=1 CS=1 DS=0 R=0
660	.9709		a9 42		lda #$42	                lda #$42
661	.970b		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;RTC AS=0 CS=1 DS=0 R=0
662	.970e						rts9922:
663	.970e		60		rts		                rts
664							                .endif

:7	;******  Return to file: src/terminal.s65

2126							                .include "restore_font.s65"

:12	;******  Processing file: src/restore_font.s65

1							;-------------------------------------------------------------------------
2							;
3							; restore entire font.
4							;
5	.970f						restoreFont32To255:
6	.970f		a2 07		ldx #$07	                ldx #$07                     ;224 chars - 32-255
7							                .cerror *!=restoreFont32ToN
8							                ; fall through to restoreFont32ToN

10							;-------------------------------------------------------------------------
11							;
12							; Restore part of the font, starting from char 32.
13							;
14							; entry:
15							;
16							; X = number of pages of font data to restore - X*32 chars will be
17							; restored
18							;
19	.9711						restoreFont32ToN:
20	.9711		08		php		                php
21	.9712		78		sei		                sei
22	.9713		a9 b9		lda #$b9	                lda #>LB900                ;start at beginning of font
23	.9715		85 f1		sta $f1		                sta $F1
24	.9717		a9 89		lda #$89	                lda #>andy.softCharacterDefinitions ;write to beginning of soft character definitions
25							                .cerror *!=restoreFontPart
26							                ; fall through to restoreFontPart

28							;-------------------------------------------------------------------------
29							;
30							; Restore part of the font.
31							;
32							; entry:
33							;
34							; ?$f1 = MSB of font data
35							;
36							; A = MSB of dest page in ANDY - should be part of the soft character
37							; definitions!
38							;
39							; X = number of pages of font data to restore - X*32 chars will be
40							; restored
41							;
42							; preserves: Y

44	.9719						restoreFontPart:
45	.9719		85 fb		sta $fb		                sta $FB                      ;save MSB of dest
46	.971b		20 70 e5	jsr $e570	                jsr mos.selectTerminalROMAndANDY2
47	.971e		5a		phy		                phy                          ;
48	.971f		a0 00		ldy #$00	                ldy #$00                     ;
49	.9721		64 fa		stz $fa		                stz $FA                      ;initialize LSB of src
50	.9723		64 f0		stz $f0		                stz $F0                      ;initialize LSB of dest
51	.9725						-
52	.9725		b1 f0		lda ($f0),y	                lda ($F0),y
53	.9727		91 fa		sta ($fa),y	                sta ($FA),y
54	.9729		c8		iny		                iny
55	.972a		d0 f9		bne $9725	                bne -
56	.972c		e6 f1		inc $f1		                inc $F1
57	.972e		e6 fb		inc $fb		                inc $FB
58	.9730		ca		dex		                dex
59	.9731		d0 f2		bne $9725	                bne -
60	.9733		7a		ply		                ply
61	.9734		28		plp		                plp
62	.9735		4c 68 e5	jmp $e568	                jmp mos.selectTerminalROM

64							;-------------------------------------------------------------------------

66							                .if version==350
67	.9738						osbyte14:
68							                .endif
69	.9738						restoreFont32To126:
70	.9738		a2 03		ldx #$03	                ldx #$03                     ;96 chars - 32-126
71	.973a		80 d5		bra $9711	                bra restoreFont32ToN

73							;-------------------------------------------------------------------------
74							;
75							; OSBYTE 25 (&19) Restore a group of font definitions
76							;
77							; MasRef D.2-28
78							;
79	.973c						osbyte19:
80	.973c		8a		txa		                txa                          ;A=group identifier
81	.973d		f0 d0		beq $970f	                beq restoreFont32To255   ;taken if group 0 - all chars
82							                .if version<500
83	.973f		c9 08		cmp #$08	                cmp #$08
84							                .if version==350
85	.9741		b0 cb		bcs $970e	                bcs rts9922
88							                .endif
94							                .endif
95	.9743		08		php		                php
96	.9744		78		sei		                sei
97	.9745		69 b8		adc #$b8	                adc #(>LB900)-1 ;form address of ROM font data for group
98	.9747		85 f1		sta $f1		                sta $F1
99	.9749		8a		txa		                txa
100	.974a		a2 01		ldx #$01	                ldx #$01                   ;copy 1 page, 32 chars
101	.974c		69 88		adc #$88	                adc #(>andy.softCharacterDefinitions)-1 ;get page in ANDY for group
102	.974e		80 c9		bra $9719	                bra restoreFontPart


:7	;******  Return to file: src/terminal.s65

2127							                .endif

2129							;-------------------------------------------------------------------------

2131							                .if version==350
2132	.9750						parseSoftKeyNumberFromCommandLine:
2133	.9750		20 b0 83	jsr $83b0	                jsr parseNumberFromString
2134	.9753		90 04		bcc $9759	                bcc badKeyError
2135	.9755		e0 10		cpx #$10	                cpx #softKeyCount
2136							                .if version==350
2137	.9757		90 b5		bcc $970e	                bcc rts9922
2140							                .endif
2141	.9759						badKeyError:
2142	.9759		20 2f ab	jsr $ab2f	                jsr doFollowingError
2143	>975c		fb				                .byte $FB
2144	>975d		42 61 64 20 6b 65 79		                .text "Bad key"
2145	>9764		00				                .byte 0
2146							                .endif

2148							;-------------------------------------------------------------------------

2150							                .if version>=510||version==350
2151	.9765						starSHOW:
2152	.9765		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
2153	.9767		49 0d		eor #$0d	                eor #13
2154	.9769		d0 1b		bne $9786	                bne L96BF
2155	.976b		aa		tax		                tax
2156	.976c						L96A5:
2157	.976c		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
2158	>976f		4b 65 79 20 00			                .text "Key ",0

2160	.9774		da		phx		                phx
2161	.9775		8a		txa		                txa
2162	.9776		20 b5 a8	jsr $a8b5	                jsr printHexDigit
2163	.9779		20 28 9f	jsr $9f28	                jsr printSpace
2164	.977c		20 8e 97	jsr $978e	                jsr printKeyDefinition
2165	.977f		fa		plx		                plx
2166	.9780		e8		inx		                inx
2167	.9781		e0 10		cpx #$10	                cpx #$10
2168	.9783		90 e7		bcc $976c	                bcc L96A5
2169	.9785						L96BE:
2170	.9785		60		rts		                rts

2172	.9786						L96BF:
2173	.9786		20 50 97	jsr $9750	                jsr parseSoftKeyNumberFromCommandLine
2174	.9789		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
2175	.978c						L96C5:
2176	.978c		d0 cb		bne $9759	                bne badKeyError
2177							                .endif

2179							;-------------------------------------------------------------------------

2181							                .if version<510&&version!=350
2192							                .endif

2194							;-------------------------------------------------------------------------
2195							;
2196							; [MasRef C.5-11]
2197							;

2199							                .if version<510&&version!=350
2204							                .else
2205	.978e						printKeyDefinition:
2206							                .endif
2207	.978e		a9 22		lda #$22	                lda #'"'
2208	.9790		20 ee ff	jsr $ffee	                jsr OSWRCH
2209	.9793		a5 f4		lda $f4		                lda $F4
2210	.9795		48		pha		                pha
2211	.9796		20 70 e5	jsr $e570	                jsr mos.selectTerminalROMAndANDY2
2212	.9799		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2213	.979c		85 f2		sta $f2		                sta stringInputBufferAddress+0
2214	.979e		bd 11 80	lda $8011,x	                lda andy.softKeys.stringMSBs,x
2215	.97a1		85 f3		sta $f3		                sta stringInputBufferAddress+1
2216							                .if version<510&&version!=350
2218							                .else
2219	.97a3		8a		txa		                txa
2220	.97a4		a8		tay		                tay
2221							                .endif
2222	.97a5		20 6f eb	jsr $eb6f	                jsr mos.getSoftKeyStringLength
2223	.97a8		a8		tay		                tay                          ;Y = string length
2224	.97a9		f0 0e		beq $97b9	                beq starSHOWDone                    ;done if length=0
2225	.97ab						-
2226	.97ab		b2 f2		lda ($f2)	                lda (stringInputBufferAddress)
2227	.97ad		20 04 99	jsr $9904	                jsr printGSREADChar
2228	.97b0		e6 f2		inc $f2		                inc stringInputBufferAddress+0
2229	.97b2		d0 02		bne $97b6	                bne +
2230	.97b4		e6 f3		inc $f3		                inc stringInputBufferAddress+1
2231	.97b6						+
2232	.97b6		88		dey		                dey
2233	.97b7		d0 f2		bne $97ab	                bne -
2234	.97b9						starSHOWDone:
2235	.97b9		68		pla		                pla
2236	.97ba		20 6a e5	jsr $e56a	                jsr mos.selectROMA
2237	.97bd		a9 22		lda #$22	                lda #'"'
2238	.97bf		20 ee ff	jsr $ffee	                jsr OSWRCH
2239	.97c2		4c e7 ff	jmp $ffe7	                jmp OSNEWL

2241							;-------------------------------------------------------------------------

2243							                .if version>=510
2254							                .endif

2256							;-------------------------------------------------------------------------
2257							;
2258							; [MasRef C.5-8]
2259							;
2260	.97c5						starKEY: .proc
2261	.97c5		20 50 97	jsr $9750	                jsr parseSoftKeyNumberFromCommandLine
2262	.97c8		a5 f4		lda $f4		                lda $F4
2263	.97ca		48		pha		                pha
2264	.97cb		20 57 e5	jsr $e557	                jsr mos.selectTerminalROMAndANDY
2265	.97ce		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
2266	.97d1		64 b0		stz $b0		                stz starKEYWorkspace.newStringLength
2267	.97d3		f0 15		beq $97ea	                beq commandLineTailEmpty
2268	.97d5		a2 00		ldx #$00	                ldx #$00
2269	.97d7		38		sec		                sec
2270	.97d8		20 ef f1	jsr $f1ef	                jsr mos.gsinitEntryPoint
2271	.97db						-
2272	.97db		20 00 f2	jsr $f200	                jsr mos.gsreadEntryPoint
2273	.97de		b0 06		bcs $97e6	                bcs bneBadKeyError
2274	.97e0		9d 00 dc	sta $dc00,x	                sta hazel.commandLine,x
2275	.97e3		e8		inx		                inx
2276	.97e4		80 f5		bra $97db	                bra -

2278	.97e6						bneBadKeyError:
2279							                .if version==350
2280	.97e6		d0 a4		bne $978c	                bne L96C5
2283							                .endif
2284	.97e8		86 b0		stx $b0		                stx starKEYWorkspace.newStringLength
2285	.97ea						commandLineTailEmpty:
2286	.97ea		a4 e6		ldy $e6		                ldy $E6                        ;Y = soft key number
2287	.97ec		20 6f eb	jsr $eb6f	                jsr mos.getSoftKeyStringLength
2288	.97ef		85 b5		sta $b5		                sta starKEYWorkspace.counter+0
2289	.97f1		38		sec		                sec
2290	.97f2		e5 b0		sbc $b0		                sbc starKEYWorkspace.newStringLength ;A=existing len-new len
2291	.97f4		b0 16		bcs $980c	                bcs newStringWillFit            ;taken if new string shorter, meaning it'll definitely fit

2293	.97f6		49 ff		eor #$ff	                eor #$FF
2294	.97f8		69 01		adc #$01	                adc #$01                     ;A=new len-existing len
2295	.97fa		6d 10 80	adc $8010	                adc andy.softKeys.endLSB
2296	.97fd		aa		tax		                tax
2297	.97fe		ad 21 80	lda $8021	                lda andy.softKeys.endMSB
2298	.9801		69 00		adc #$00	                adc #$00
2299	.9803		c9 84		cmp #$84	                cmp #>(andy.softKeys.end)
2300	.9805		90 05		bcc $980c	                bcc newStringWillFit

2302							                ; Produce slightly cryptic "Bad key" if string won't
2303							                ; fit.
2304	.9807		d0 dd		bne $97e6	                bne bneBadKeyError
2305	.9809		8a		txa		                txa
2306	.980a		d0 da		bne $97e6	                bne bneBadKeyError
2307	.980c						newStringWillFit:
2308	.980c		ad 68 02	lda $0268	                lda softKeyStringLength
2309	.980f		f0 32		beq $9843	                beq storeNewString          ;taken if new string empty
2310	.9811		ad c9 02	lda $02c9	                lda currentSoftKey
2311	.9814		c5 e6		cmp $e6		                cmp $E6
2312	.9816		90 2b		bcc $9843	                bcc storeNewString ;taken if current soft key<key - expansion will not need to relocate
2313	.9818		d0 0f		bne $9829	                bne relocateCurrentSoftKeyExpansion ;taken if current soft key>key - expansion must relocate
2314	.981a		20 2f ab	jsr $ab2f	                jsr doFollowingError
2315	>981d		fa 4b 65 79 20 69 6e 20		                .text $fa,"Key in use",0
	>9825		75 73 65 00
2316	.9829						relocateCurrentSoftKeyExpansion:
2317	.9829		64 b2		stz $b2		                stz starKEYWorkspace.destPtr+1
2318	.982b		38		sec		                sec
2319	.982c		a5 b0		lda $b0		                lda starKEYWorkspace.newStringLength
2320	.982e		e5 b5		sbc $b5		                sbc starKEYWorkspace.counter+0
2321	.9830		85 b1		sta $b1		                sta starKEYWorkspace.destPtr+0
2322	.9832		b0 02		bcs $9836	                bcs +
2323	.9834		c6 b2		dec $b2		                dec starKEYWorkspace.destPtr+1
2324	.9836						+
2325	.9836		18		clc		                clc
2326	.9837		a5 f8		lda $f8		                lda softKeyExpansionPtr+0
2327	.9839		65 b1		adc $b1		                adc starKEYWorkspace.destPtr+0
2328	.983b		85 f8		sta $f8		                sta softKeyExpansionPtr+0
2329	.983d		a5 f9		lda $f9		                lda softKeyExpansionPtr+1
2330	.983f		65 b2		adc $b2		                adc starKEYWorkspace.destPtr+1
2331	.9841		85 f9		sta $f9		                sta softKeyExpansionPtr+1
2332	.9843						storeNewString:
2333	.9843		ce 84 02	dec $0284	                dec softKeyConsistencyFlag   ;mark soft keys inconsistent
2334	.9846		a6 e6		ldx $e6		                ldx $E6                      ;X=key number
2335	.9848		a5 b5		lda $b5		                lda starKEYWorkspace.counter+0
2336	.984a		f0 45		beq $9891	                beq makeSpaceForNewString ;taken if no existing string for this soft key

2338							                ; delete existing string
2339	.984c		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2340	.984f		85 b1		sta $b1		                sta starKEYWorkspace.destPtr+0
2341	.9851		bd 11 80	lda $8011,x	                lda andy.softKeys.stringMSBs,x
2342	.9854		85 b2		sta $b2		                sta starKEYWorkspace.destPtr+1
2343	.9856		bd 01 80	lda $8001,x	                lda andy.softKeys.stringLSBs+1,x
2344	.9859		85 b3		sta $b3		                sta starKEYWorkspace.srcPtr+0
2345	.985b		bd 12 80	lda $8012,x	                lda andy.softKeys.stringMSBs+1,x
2346	.985e		85 b4		sta $b4		                sta starKEYWorkspace.srcPtr+1
2347	.9860						deleteExistingStringLoop:
2348							                ; copy byte (with postincrement)
2349	.9860		b2 b3		lda ($b3)	                lda (starKEYWorkspace.srcPtr)
2350	.9862		92 b1		sta ($b1)	                sta (starKEYWorkspace.destPtr)

2352							                ; increment destPtr
2353	.9864		e6 b1		inc $b1		                inc starKEYWorkspace.destPtr+0
2354	.9866		d0 02		bne $986a	                bne +
2355	.9868		e6 b2		inc $b2		                inc starKEYWorkspace.destPtr+1
2356	.986a						+

2358							                ; increment srcPtr
2359	.986a		e6 b3		inc $b3		                inc starKEYWorkspace.srcPtr+0
2360	.986c		d0 02		bne $9870	                bne +
2361	.986e		e6 b4		inc $b4		                inc starKEYWorkspace.srcPtr+1
2362	.9870						+

2364							                ; keep copying until end of buffer reached.
2365	.9870		a5 b3		lda $b3		                lda starKEYWorkspace.srcPtr+0
2366	.9872		cd 10 80	cmp $8010	                cmp andy.softKeys.endLSB
2367	.9875		a5 b4		lda $b4		                lda starKEYWorkspace.srcPtr+1
2368	.9877		ed 21 80	sbc $8021	                sbc andy.softKeys.endMSB
2369	.987a		90 e4		bcc $9860	                bcc deleteExistingStringLoop

2371							                ; update following strings' start addresses, which all
2372							                ; move down by the old string's length.
2373	.987c						updateAddressesLoop:
2374	.987c		e8		inx		                inx
2375	.987d		e0 11		cpx #$11	                cpx #softKeyCount+1
2376	.987f		b0 10		bcs $9891	                bcs makeSpaceForNewString
2377	.9881		38		sec		                sec
2378	.9882		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2379	.9885		e5 b5		sbc $b5		                sbc starKEYWorkspace.counter+0
2380	.9887		9d 00 80	sta $8000,x	                sta andy.softKeys.stringLSBs,x
2381	.988a		b0 f0		bcs $987c	                bcs updateAddressesLoop
2382	.988c		de 11 80	dec $8011,x	                dec andy.softKeys.stringMSBs,x
2383	.988f		80 eb		bra $987c	                bra updateAddressesLoop

2385	.9891						makeSpaceForNewString:
2386	.9891		a6 e6		ldx $e6		                ldx $E6
2387	.9893		a5 b0		lda $b0		                lda starKEYWorkspace.newStringLength
2388	.9895		f0 66		beq $98fd	                beq done
2389	.9897		ad 10 80	lda $8010	                lda andy.softKeys.endLSB
2390	.989a		85 b3		sta $b3		                sta starKEYWorkspace.srcPtr+0
2391	.989c		18		clc		                clc
2392	.989d		65 b0		adc $b0		                adc starKEYWorkspace.newStringLength
2393	.989f		85 b1		sta $b1		                sta starKEYWorkspace.destPtr+0 ;new end ptr LSB
2394	.98a1		ad 21 80	lda $8021	                lda andy.softKeys.endMSB
2395	.98a4		85 b4		sta $b4		                sta starKEYWorkspace.srcPtr+1
2396	.98a6		69 00		adc #$00	                adc #$00
2397	.98a8		85 b2		sta $b2		                sta starKEYWorkspace.destPtr+1 ;new end ptr MSB
2398	.98aa		a5 b3		lda $b3		                lda starKEYWorkspace.srcPtr+0
2399	.98ac		38		sec		                sec
2400	.98ad		fd 00 80	sbc $8000,x	                sbc andy.softKeys.stringLSBs,x
2401	.98b0		85 b5		sta $b5		                sta starKEYWorkspace.counter+0
2402	.98b2		a5 b4		lda $b4		                lda starKEYWorkspace.srcPtr+1
2403	.98b4		fd 11 80	sbc $8011,x	                sbc andy.softKeys.stringMSBs,x
2404	.98b7		85 b6		sta $b6		                sta starKEYWorkspace.counter+1
2405	.98b9						makeSpaceForNewStringLoop:
2406							                ; loop while counter>0
2407	.98b9		a5 b5		lda $b5		                lda starKEYWorkspace.counter+0
2408	.98bb		05 b6		ora $b6		                ora starKEYWorkspace.counter+1
2409	.98bd		f0 1e		beq $98dd	                beq updateAddressesLoop2

2411							                ; decrement destPtr
2412	.98bf		a5 b1		lda $b1		                lda starKEYWorkspace.destPtr+0
2413	.98c1		d0 02		bne $98c5	                bne +
2414	.98c3		c6 b2		dec $b2		                dec starKEYWorkspace.destPtr+1
2415	.98c5						+
2416	.98c5		c6 b1		dec $b1		                dec starKEYWorkspace.destPtr+0

2418							                ; decrement srcPtr
2419	.98c7		a5 b3		lda $b3		                lda starKEYWorkspace.srcPtr+0
2420	.98c9		d0 02		bne $98cd	                bne +
2421	.98cb		c6 b4		dec $b4		                dec starKEYWorkspace.srcPtr+1
2422	.98cd						+
2423	.98cd		c6 b3		dec $b3		                dec starKEYWorkspace.srcPtr+0

2425							                ; copy byte (with predecrement)
2426	.98cf		b2 b3		lda ($b3)	                lda (starKEYWorkspace.srcPtr)
2427	.98d1		92 b1		sta ($b1)	                sta (starKEYWorkspace.destPtr)

2429							                ; decrement counter
2430	.98d3		a5 b5		lda $b5		                lda starKEYWorkspace.counter+0
2431	.98d5		d0 02		bne $98d9	                bne +
2432	.98d7		c6 b6		dec $b6		                dec starKEYWorkspace.counter+1
2433	.98d9						+
2434	.98d9		c6 b5		dec $b5		                dec starKEYWorkspace.counter+0

2436	.98db		80 dc		bra $98b9	                bra makeSpaceForNewStringLoop

2438							                ; update following strings' start addresses, which all
2439							                ; move up by the new string's length.
2440	.98dd						updateAddressesLoop2:
2441	.98dd		e8		inx		                inx
2442	.98de		e0 11		cpx #$11	                cpx #softKeyCount+1
2443	.98e0		b0 0f		bcs $98f1	                bcs copyNewString
2444	.98e2		bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2445	.98e5		65 b0		adc $b0		                adc starKEYWorkspace.newStringLength
2446	.98e7		9d 00 80	sta $8000,x	                sta andy.softKeys.stringLSBs,x
2447	.98ea		90 f1		bcc $98dd	                bcc updateAddressesLoop2
2448	.98ec		fe 11 80	inc $8011,x	                inc andy.softKeys.stringMSBs,x
2449	.98ef		80 ec		bra $98dd	                bra updateAddressesLoop2

2451	.98f1						copyNewString:
2452	.98f1		a0 00		ldy #$00	                ldy #$00
2453	.98f3						copyNewStringLoop:
2454	.98f3		b9 00 dc	lda $dc00,y	                lda hazel.commandLine,y
2455	.98f6		91 b3		sta ($b3),y	                sta (starKEYWorkspace.srcPtr),y
2456	.98f8		c8		iny		                iny
2457	.98f9		c6 b0		dec $b0		                dec starKEYWorkspace.newStringLength
2458	.98fb		d0 f6		bne $98f3	                bne copyNewStringLoop
2459	.98fd						done:
2460	.98fd		ee 84 02	inc $0284	                inc softKeyConsistencyFlag   ;mark soft keys consistent
2461	.9900		68		pla		                pla
2462	.9901		4c 6a e5	jmp $e56a	                jmp mos.selectROMA
2463							                .endproc

2465							;-------------------------------------------------------------------------
2466							;
2467							; Print char, printing control codes using the string reader escape
2468							; syntax. [MasRef C.5-8]
2469							;
2470	.9904						printGSREADChar: .proc
2471	.9904		aa		tax		                tax                          ;X=char
2472	.9905		30 28		bmi $992f	                bmi printHighBitChar
2473	.9907		c9 20		cmp #$20	                cmp #$20
2474	.9909		90 1f		bcc $992a	                bcc printControlChar
2475	.990b		e8		inx		                inx
2476	.990c		30 0f		bmi $991d	                bmi vdu127
2477	.990e		ca		dex		                dex                          ;restore old char
2478	.990f		c9 22		cmp #$22	                cmp #'"'
2479	.9911		f0 11		beq $9924	                beq printEscapedX
2480	.9913		c9 7c		cmp #$7c	                cmp #'|'
2481	.9915		d0 03		bne $991a	                bne printA
2482							                ; print "||"
2483	.9917		20 ee ff	jsr $ffee	                jsr OSWRCH
2484	.991a						printA:
2485	.991a		4c ee ff	jmp $ffee	                jmp OSWRCH

2487	.991d						vdu127:
2488							                ; print "|?"
2489	.991d		20 3a 99	jsr $993a	                jsr printEscapeChar
2490	.9920		a9 3f		lda #$3f	                lda #'?'
2491	.9922		80 f6		bra $991a	                bra printA

2493	.9924						printEscapedX:
2494	.9924		20 3a 99	jsr $993a	                jsr printEscapeChar
2495	.9927		8a		txa		                txa
2496	.9928		80 f0		bra $991a	                bra printA

2498	.992a						printControlChar:
2499	.992a		09 40		ora #$40	                ora #$40
2500	.992c		aa		tax		                tax
2501	.992d		80 f5		bra $9924	                bra printEscapedX

2503	.992f						printHighBitChar:
2504	.992f		48		pha		                pha
2505	.9930		a2 21		ldx #$21	                ldx #'!'
2506	.9932		20 24 99	jsr $9924	                jsr printEscapedX
2507	.9935		68		pla		                pla
2508	.9936		29 7f		and #$7f	                and #$7F
2509	.9938		80 ca		bra $9904	                bra printGSREADChar

2511	.993a						printEscapeChar:
2512	.993a		a9 7c		lda #$7c	                lda #'|'
2513	.993c		80 dc		bra $991a	                bra printA
2514							                .endproc

2516							;-------------------------------------------------------------------------

2518							                .if version!=350
2520							                .endif

2522							;-------------------------------------------------------------------------

2524	.993e						L9923:
2525	.993e		a9 03		lda #$03	                lda #$03
2526	.9940		20 97 d2	jsr $d297	                jsr mos.LD298
2527	.9943		90 12		bcc $9957	                bcc L993C
2528	.9945		20 4b 99	jsr $994b	                jsr L9930
2529	.9948		20 a8 d8	jsr $d8a8	                jsr mos.LD8A9
2530	.994b						L9930:
2531	.994b		a2 20		ldx #$20	                ldx #$20
2532	.994d		4c c4 e2	jmp $e2c4	                jmp mos.LE2B8

2534	.9950						L9935:
2535	.9950		a9 02		lda #$02	                lda #$02
2536	.9952		20 97 d2	jsr $d297	                jsr mos.LD298
2537	.9955		b0 64		bcs $99bb	                bcs L99A0
2538	.9957						L993C:
2539	.9957		20 d1 d3	jsr $d3d1	                jsr mos.LD3D2
2540	.995a		20 da 9a	jsr $9ada	                jsr L9ABF
2541	.995d		80 08		bra $9967	                bra L994C

2543	.995f						L9944:
2544	.995f		20 19 d4	jsr $d419	                jsr mos.LD41A
2545	.9962		f0 57		beq $99bb	                beq L99A0
2546	.9964		20 d1 d3	jsr $d3d1	                jsr mos.LD3D2
2547	.9967						L994C:
2548	.9967		a5 e1		lda $e1		                lda $E1
2549	.9969		89 20		bit #$20	                bit #$20
2550	.996b		f0 05		beq $9972	                beq L9957
2551	.996d		48		pha		                pha
2552	.996e		20 a2 d6	jsr $d6a2	                jsr mos.LD6A3
2553	.9971		68		pla		                pla
2554	.9972						L9957:
2555	.9972		89 10		bit #$10	                bit #$10
2556	.9974		f0 03		beq $9979	                beq L995E
2557	.9976		20 97 d6	jsr $d697	                jsr mos.LD698
2558	.9979						L995E:
2559	.9979		20 17 9a	jsr $9a17	                jsr L99FC
2560	.997c		08		php		                php
2561	.997d		20 75 9a	jsr $9a75	                jsr L9A5A
2562	.9980		a2 42		ldx #$42	                ldx #$42
2563	.9982		a0 46		ldy #$46	                ldy #$46
2564	.9984		a9 20		lda #$20	                lda #$20
2565	.9986		2c 49 88	bit $8849	                bit L8849
2566	.9989		f0 1c		beq $99a7	                beq L998C
2567	.998b		30 18		bmi $99a5	                bmi L998A
2568	.998d		ad 2c 03	lda $032c	                lda $032C
2569	.9990		cd 37 03	cmp $0337	                cmp $0337
2570	.9993		d0 08		bne $999d	                bne L9982
2571	.9995		ad 2d 03	lda $032d	                lda $032D
2572	.9998		cd 38 03	cmp $0338	                cmp $0338
2573	.999b		f0 10		beq $99ad	                beq L9992
2574	.999d						L9982:
2575	.999d		a2 37		ldx #$37	                ldx #$37
2576	.999f		20 4c d2	jsr $d24c	                jsr mos.LD24D
2577	.99a2		a2 42		ldx #$42	                ldx #$42
2578	.99a4		b8		clv		                clv
2579	.99a5						L998A:
2580	.99a5		a0 2c		ldy #$2c	                ldy #$2C
2581	.99a7						L998C:
2582	.99a7		30 07		bmi $99b0	                bmi L9995
2583	.99a9		50 02		bvc $99ad	                bvc L9992
2584	.99ab		a2 37		ldx #$37	                ldx #$37
2585	.99ad						L9992:
2586	.99ad		20 4c d2	jsr $d24c	                jsr mos.LD24D
2587	.99b0						L9995:
2588	.99b0		28		plp		                plp
2589	.99b1		90 b4		bcc $9967	                bcc L994C
2590	.99b3		60		rts		                rts

2592	.99b4						L9999:
2593	.99b4		a9 01		lda #$01	                lda #$01
2594	.99b6		20 97 d2	jsr $d297	                jsr mos.LD298
2595	.99b9		90 09		bcc $99c4	                bcc L99A9
2596	.99bb						L99A0:
2597	.99bb		a2 24		ldx #$24	                ldx #$24
2598	.99bd		80 37		bra $99f6	                bra L99DB

2600	.99bf						L99A4:
2601	.99bf		20 19 d4	jsr $d419	                jsr mos.LD41A
2602	.99c2		f0 f7		beq $99bb	                beq L99A0
2603	.99c4						L99A9:
2604	.99c4		20 d1 d3	jsr $d3d1	                jsr mos.LD3D2
2605	.99c7		20 e4 99	jsr $99e4	                jsr L99C9
2606	.99ca						L99AF:
2607	.99ca		20 e5 d5	jsr $d5e5	                jsr mos.LD5E6
2608	.99cd		20 e4 99	jsr $99e4	                jsr L99C9
2609	.99d0		ad 30 88	lda $8830	                lda L8830
2610	.99d3		0d 31 88	ora $8831	                ora L8831
2611	.99d6		f0 3e		beq $9a16	                beq L99FB
2612	.99d8		2c 48 88	bit $8848	                bit L8848
2613	.99db		70 ed		bvs $99ca	                bvs L99AF
2614	.99dd		a2 42		ldx #$42	                ldx #$42
2615	.99df		20 f1 99	jsr $99f1	                jsr L99D6
2616	.99e2		80 e6		bra $99ca	                bra L99AF

2618	.99e4						L99C9:
2619	.99e4		20 33 d3	jsr $d333	                jsr mos.LD334
2620	.99e7		20 f9 99	jsr $99f9	                jsr L99DE
2621	.99ea		2c 48 88	bit $8848	                bit L8848
2622	.99ed		30 27		bmi $9a16	                bmi L99FB
2623	.99ef		a2 46		ldx #$46	                ldx #$46
2624	.99f1						L99D6:
2625	.99f1		da		phx		                phx
2626	.99f2		20 7f d2	jsr $d27f	                jsr mos.LD280
2627	.99f5		fa		plx		                plx
2628	.99f6						L99DB:
2629	.99f6		4c 4b db	jmp $db4b	                jmp mos.LDB4C

2631	.99f9						L99DE:
2632	.99f9		a2 03		ldx #$03	                ldx #$03
2633	.99fb						L99E0:
2634	.99fb		bd 30 88	lda $8830,x	                lda L8830,x
2635	.99fe		9d 42 03	sta $0342,x	                sta $0342,x
2636	.9a01		9d 46 03	sta $0346,x	                sta $0346,x
2637	.9a04		ca		dex		                dex
2638	.9a05		10 f4		bpl $99fb	                bpl L99E0
2639	.9a07						L99EC:
2640	.9a07		ac 42 03	ldy $0342	                ldy $0342
2641	.9a0a		ad 43 03	lda $0343	                lda $0343
2642	.9a0d		20 2e c9	jsr $c92e	                jsr mos.negateAY
2643	.9a10		8c 42 03	sty $0342	                sty $0342
2644	.9a13		8d 43 03	sta $0343	                sta $0343
2645	.9a16						L99FB:
2646	.9a16		60		rts		                rts

2648	.9a17						L99FC:
2649	.9a17		a5 e1		lda $e1		                lda $E1
2650	.9a19		8d 49 88	sta $8849	                sta L8849
2651	.9a1c		20 f9 99	jsr $99f9	                jsr L99DE
2652	.9a1f		a2 01		ldx #$01	                ldx #$01
2653	.9a21						L9A06:
2654	.9a21		9e 42 03	stz $0342,x	                stz $0342,x
2655	.9a24		9e 46 03	stz $0346,x	                stz $0346,x
2656	.9a27		ca		dex		                dex
2657	.9a28		10 f7		bpl $9a21	                bpl L9A06
2658	.9a2a						L9A0F:
2659	.9a2a		20 49 9a	jsr $9a49	                jsr L9A2E
2660	.9a2d		ad 30 88	lda $8830	                lda L8830
2661	.9a30		0d 31 88	ora $8831	                ora L8831
2662	.9a33		d0 06		bne $9a3b	                bne L9A20
2663	.9a35		38		sec		                sec
2664	.9a36		ad 47 88	lda $8847	                lda L8847
2665	.9a39		d0 cc		bne $9a07	                bne L99EC
2666	.9a3b						L9A20:
2667	.9a3b		20 e5 d5	jsr $d5e5	                jsr mos.LD5E6
2668	.9a3e		ad 32 88	lda $8832	                lda L8832
2669	.9a41		cd 44 03	cmp $0344	                cmp $0344
2670	.9a44		f0 e4		beq $9a2a	                beq L9A0F
2671	.9a46		18		clc		                clc
2672	.9a47		80 be		bra $9a07	                bra L99EC

2674	.9a49						L9A2E:
2675	.9a49		20 33 d3	jsr $d333	                jsr mos.LD334
2676	.9a4c		2c 48 88	bit $8848	                bit L8848
2677	.9a4f		30 07		bmi $9a58	                bmi L9A3D
2678	.9a51		08		php		                php
2679	.9a52		a2 46		ldx #$46	                ldx #$46
2680	.9a54		20 5c 9a	jsr $9a5c	                jsr L9A41
2681	.9a57		28		plp		                plp
2682	.9a58						L9A3D:
2683	.9a58		70 1a		bvs $9a74	                bvs L9A59
2684	.9a5a		a2 42		ldx #$42	                ldx #$42
2685	.9a5c						L9A41:
2686	.9a5c		ad 30 88	lda $8830	                lda L8830
2687	.9a5f		a8		tay		                tay
2688	.9a60		dd 00 03	cmp $0300,x	                cmp $0300,x
2689	.9a63		ad 31 88	lda $8831	                lda L8831
2690	.9a66		48		pha		                pha
2691	.9a67		fd 01 03	sbc $0301,x	                sbc $0301,x
2692	.9a6a		68		pla		                pla
2693	.9a6b		90 07		bcc $9a74	                bcc L9A59
2694	.9a6d		9d 01 03	sta $0301,x	                sta $0301,x
2695	.9a70		98		tya		                tya
2696	.9a71		9d 00 03	sta $0300,x	                sta $0300,x
2697	.9a74						L9A59:
2698	.9a74		60		rts		                rts

2700	.9a75						L9A5A:
2701	.9a75		ad 44 03	lda $0344	                lda $0344
2702	.9a78		0d 45 03	ora $0345	                ora $0345
2703	.9a7b		d0 5c		bne $9ad9	                bne L9ABE
2704	.9a7d		a5 e1		lda $e1		                lda $E1
2705	.9a7f		1a		inc a		                inc a
2706	.9a80		29 03		and #$03	                and #$03
2707	.9a82		d0 55		bne $9ad9	                bne L9ABE
2708	.9a84		a9 20		lda #$20	                lda #$20
2709	.9a86		2c 49 88	bit $8849	                bit L8849
2710	.9a89		10 09		bpl $9a94	                bpl L9A79
2711	.9a8b		f0 07		beq $9a94	                beq L9A79
2712	.9a8d		a2 2c		ldx #$2c	                ldx #$2C
2713	.9a8f		a0 46		ldy #$46	                ldy #$46
2714	.9a91		20 1e c9	jsr $c91e	                jsr mos.copyFourBytesWithinVDUVariables
2715	.9a94						L9A79:
2716	.9a94		a9 10		lda #$10	                lda #$10
2717	.9a96		2c 49 88	bit $8849	                bit L8849
2718	.9a99		50 09		bvc $9aa4	                bvc L9A89
2719	.9a9b		f0 07		beq $9aa4	                beq L9A89
2720	.9a9d		a2 37		ldx #$37	                ldx #$37
2721	.9a9f		a0 42		ldy #$42	                ldy #$42
2722	.9aa1		20 1e c9	jsr $c91e	                jsr mos.copyFourBytesWithinVDUVariables
2723	.9aa4						L9A89:
2724	.9aa4		20 da 9a	jsr $9ada	                jsr L9ABF
2725	.9aa7		a5 e1		lda $e1		                lda $E1
2726	.9aa9		49 3c		eor #$3c	                eor #$3C
2727	.9aab		2a		rol a		                rol a
2728	.9aac		20 6e c6	jsr $c66e	                jsr mos.fixUpVPALETTEFor4Colours
2729	.9aaf		6a		ror a		                ror a
2730	.9ab0		85 e1		sta $e1		                sta $E1
2731	.9ab2		89 20		bit #$20	                bit #$20
2732	.9ab4		f0 10		beq $9ac6	                beq L9AAB
2733	.9ab6		48		pha		                pha
2734	.9ab7		a2 2c		ldx #$2c	                ldx #$2C
2735	.9ab9		a0 46		ldy #$46	                ldy #$46
2736	.9abb		20 cb d5	jsr $d5cb	                jsr mos.sortVDUVariableWords
2737	.9abe		98		tya		                tya
2738	.9abf		aa		tax		                tax
2739	.9ac0		a0 46		ldy #$46	                ldy #$46
2740	.9ac2		20 1e c9	jsr $c91e	                jsr mos.copyFourBytesWithinVDUVariables
2741	.9ac5		68		pla		                pla
2742	.9ac6						L9AAB:
2743	.9ac6		89 10		bit #$10	                bit #$10
2744	.9ac8		f0 0c		beq $9ad6	                beq L9ABB
2745	.9aca		a2 37		ldx #$37	                ldx #$37
2746	.9acc		a0 42		ldy #$42	                ldy #$42
2747	.9ace		20 cb d5	jsr $d5cb	                jsr mos.sortVDUVariableWords
2748	.9ad1		a0 42		ldy #$42	                ldy #$42
2749	.9ad3		20 1e c9	jsr $c91e	                jsr mos.copyFourBytesWithinVDUVariables
2750	.9ad6						L9ABB:
2751	.9ad6		9c 49 88	stz $8849	                stz L8849
2752	.9ad9						L9ABE:
2753	.9ad9		60		rts		                rts

2755	.9ada						L9ABF:
2756	.9ada		a2 03		ldx #$03	                ldx #$03
2757	.9adc						L9AC1:
2758	.9adc		9e 3b 03	stz $033b,x	                stz $033B,x
2759	.9adf		ca		dex		                dex
2760	.9ae0		10 fa		bpl $9adc	                bpl L9AC1
2761	.9ae2		a0 28		ldy #$28	                ldy #$28
2762	.9ae4		a2 1b		ldx #$1b	                ldx #$1B
2763	.9ae6		a9 2c		lda #$2c	                lda #$2C
2764	.9ae8		20 fa 9a	jsr $9afa	                jsr L9ADF
2765	.9aeb		20 a7 d6	jsr $d6a7	                jsr mos.LD6A8
2766	.9aee		a0 1b		ldy #$1b	                ldy #$1B
2767	.9af0		a2 28		ldx #$28	                ldx #$28
2768	.9af2		a9 37		lda #$37	                lda #$37
2769	.9af4		20 fa 9a	jsr $9afa	                jsr L9ADF
2770	.9af7		4c 9c d6	jmp $d69c	                jmp mos.LD69D

2772	.9afa						L9ADF:
2773	.9afa		48		pha		                pha
2774	.9afb		a5 e1		lda $e1		                lda $E1
2775	.9afd		4a		lsr a		                lsr a
2776	.9afe		90 0b		bcc $9b0b	                bcc L9AF0
2777	.9b00		ad 47 88	lda $8847	                lda L8847
2778	.9b03		d0 04		bne $9b09	                bne L9AEE
2779	.9b05		a2 3b		ldx #$3b	                ldx #$3B
2780	.9b07		80 02		bra $9b0b	                bra L9AF0

2782	.9b09						L9AEE:
2783	.9b09		a0 3b		ldy #$3b	                ldy #$3B
2784	.9b0b						L9AF0:
2785	.9b0b		8a		txa		                txa
2786	.9b0c		fa		plx		                plx
2787	.9b0d		da		phx		                phx
2788	.9b0e		48		pha		                pha
2789	.9b0f		5a		phy		                phy
2790	.9b10		a8		tay		                tay
2791	.9b11		a9 03		lda #$03	                lda #$03
2792	.9b13		85 da		sta $da		                sta $DA
2793	.9b15						L9AFA:
2794	.9b15		b9 00 03	lda $0300,y	                lda $0300,y
2795	.9b18		9d 1e 88	sta $881e,x	                sta L881E,x
2796	.9b1b		c8		iny		                iny
2797	.9b1c		e8		inx		                inx
2798	.9b1d		c6 da		dec $da		                dec $DA
2799	.9b1f		10 f4		bpl $9b15	                bpl L9AFA
2800	.9b21		7a		ply		                ply
2801	.9b22		68		pla		                pla
2802	.9b23		fa		plx		                plx
2803	.9b24						L9B09:
2804	.9b24		48		pha		                pha
2805	.9b25		5a		phy		                phy
2806	.9b26		20 7c 9b	jsr $9b7c	                jsr L9B61
2807	.9b29		ca		dex		                dex
2808	.9b2a		7a		ply		                ply
2809	.9b2b		68		pla		                pla
2810	.9b2c		da		phx		                phx
2811	.9b2d		c8		iny		                iny
2812	.9b2e		c8		iny		                iny
2813	.9b2f		1a		inc a		                inc a
2814	.9b30		1a		inc a		                inc a
2815	.9b31		e8		inx		                inx
2816	.9b32		e8		inx		                inx
2817	.9b33		20 7c 9b	jsr $9b7c	                jsr L9B61
2818	.9b36		fa		plx		                plx
2819	.9b37		20 ab 9b	jsr $9bab	                jsr L9B90
2820	.9b3a		08		php		                php
2821	.9b3b		48		pha		                pha
2822	.9b3c		bd 05 03	lda $0305,x	                lda $0305,x
2823	.9b3f		0a		asl a		                asl a
2824	.9b40		7e 0a 03	ror $030a,x	                ror $030A,x
2825	.9b43		10 03		bpl $9b48	                bpl L9B2D
2826	.9b45		20 9a 9b	jsr $9b9a	                jsr L9B7F
2827	.9b48						L9B2D:
2828	.9b48		68		pla		                pla
2829	.9b49		0a		asl a		                asl a
2830	.9b4a		7e 0a 03	ror $030a,x	                ror $030A,x
2831	.9b4d		10 07		bpl $9b56	                bpl L9B3B
2832	.9b4f		e8		inx		                inx
2833	.9b50		e8		inx		                inx
2834	.9b51		20 9a 9b	jsr $9b9a	                jsr L9B7F
2835	.9b54		ca		dex		                dex
2836	.9b55		ca		dex		                dex
2837	.9b56						L9B3B:
2838	.9b56		20 ab 9b	jsr $9bab	                jsr L9B90
2839	.9b59		10 06		bpl $9b61	                bpl L9B46
2840	.9b5b		bd 05 03	lda $0305,x	                lda $0305,x
2841	.9b5e		bc 04 03	ldy $0304,x	                ldy $0304,x
2842	.9b61						L9B46:
2843	.9b61		28		plp		                plp
2844	.9b62		30 06		bmi $9b6a	                bmi L9B4F
2845	.9b64		c0 00		cpy #$00	                cpy #$00
2846	.9b66		d0 01		bne $9b69	                bne L9B4E
2847	.9b68		3a		dec a		                dec a
2848	.9b69						L9B4E:
2849	.9b69		88		dey		                dey
2850	.9b6a						L9B4F:
2851	.9b6a		4a		lsr a		                lsr a
2852	.9b6b		48		pha		                pha
2853	.9b6c		98		tya		                tya
2854	.9b6d		6a		ror a		                ror a
2855	.9b6e		38		sec		                sec
2856	.9b6f		ca		dex		                dex
2857	.9b70		20 75 9b	jsr $9b75	                jsr L9B5A
2858	.9b73		e8		inx		                inx
2859	.9b74		68		pla		                pla
2860	.9b75						L9B5A:
2861	.9b75		fd 07 03	sbc $0307,x	                sbc $0307,x
2862	.9b78		9d 09 03	sta $0309,x	                sta $0309,x
2863	.9b7b		60		rts		                rts

2865	.9b7c						L9B61:
2866	.9b7c		48		pha		                pha
2867	.9b7d		b9 00 03	lda $0300,y	                lda $0300,y
2868	.9b80		9d 00 03	sta $0300,x	                sta $0300,x
2869	.9b83		b9 01 03	lda $0301,y	                lda $0301,y
2870	.9b86		9d 01 03	sta $0301,x	                sta $0301,x
2871	.9b89		7a		ply		                ply
2872	.9b8a		38		sec		                sec
2873	.9b8b		20 90 9b	jsr $9b90	                jsr L9B75
2874	.9b8e		e8		inx		                inx
2875	.9b8f		c8		iny		                iny
2876	.9b90						L9B75:
2877	.9b90		b9 00 03	lda $0300,y	                lda $0300,y
2878	.9b93		fd 00 03	sbc $0300,x	                sbc $0300,x
2879	.9b96		9d 04 03	sta $0304,x	                sta $0304,x
2880	.9b99		60		rts		                rts

2882	.9b9a						L9B7F:
2883	.9b9a		bd 05 03	lda $0305,x	                lda $0305,x
2884	.9b9d		bc 04 03	ldy $0304,x	                ldy $0304,x
2885	.9ba0		20 2e c9	jsr $c92e	                jsr mos.negateAY
2886	.9ba3		9d 05 03	sta $0305,x	                sta $0305,x
2887	.9ba6		98		tya		                tya
2888	.9ba7		9d 04 03	sta $0304,x	                sta $0304,x
2889	.9baa		60		rts		                rts

2891	.9bab						L9B90:
2892	.9bab		bd 06 03	lda $0306,x	                lda $0306,x
2893	.9bae		a8		tay		                tay
2894	.9baf		dd 04 03	cmp $0304,x	                cmp $0304,x
2895	.9bb2		bd 07 03	lda $0307,x	                lda $0307,x
2896	.9bb5		fd 05 03	sbc $0305,x	                sbc $0305,x
2897	.9bb8		08		php		                php
2898	.9bb9		bd 07 03	lda $0307,x	                lda $0307,x
2899	.9bbc		28		plp		                plp
2900	.9bbd		60		rts		                rts

2902							;-------------------------------------------------------------------------
2903							;
2904							; 112â<80><93>119 = Plot parallelogram [MasRef E.3-27]
2905							;
2906	.9bbe						plotParallelogram:
2907	.9bbe		a2 28		ldx #$28	                ldx #$28
2908	.9bc0		86 da		stx $da		                stx $DA
2909	.9bc2		a2 14		ldx #$14	                ldx #$14
2910	.9bc4		a0 20		ldy #$20	                ldy #$20
2911	.9bc6		a9 24		lda #$24	                lda #$24
2912	.9bc8		20 7f d5	jsr $d57f	                jsr mos.addRegionDimensionsToVDUVariableCoordinates
2913	.9bcb		a0 14		ldy #$14	                ldy #$14
2914	.9bcd		a2 24		ldx #$24	                ldx #$24
2915	.9bcf		20 b6 d5	jsr $d5b6	                jsr mos.sortVDUVariableCoordinates
2916	.9bd2		8e 30 88	stx $8830	                stx L8830
2917	.9bd5		a2 20		ldx #$20	                ldx #$20
2918	.9bd7		20 b6 d5	jsr $d5b6	                jsr mos.sortVDUVariableCoordinates
2919	.9bda		8e 31 88	stx $8831	                stx L8831
2920	.9bdd		a2 28		ldx #$28	                ldx #$28
2921	.9bdf		20 b6 d5	jsr $d5b6	                jsr mos.sortVDUVariableCoordinates
2922	.9be2		8c 33 88	sty $8833	                sty L8833
2923	.9be5		ac 31 88	ldy $8831	                ldy L8831
2924	.9be8		20 b6 d5	jsr $d5b6	                jsr mos.sortVDUVariableCoordinates
2925	.9beb		8c 32 88	sty $8832	                sty L8832
2926	.9bee		ac 30 88	ldy $8830	                ldy L8830
2927	.9bf1		20 2a 9c	jsr $9c2a	                jsr L9C0F
2928	.9bf4		ad 33 88	lda $8833	                lda L8833
2929	.9bf7		85 e0		sta $e0		                sta $E0
2930	.9bf9		a2 2c		ldx #$2c	                ldx #$2C
2931	.9bfb		20 24 9b	jsr $9b24	                jsr L9B09
2932	.9bfe		a4 e1		ldy $e1		                ldy $E1
2933	.9c00		20 71 9c	jsr $9c71	                jsr L9C56
2934	.9c03		ac 32 88	ldy $8832	                ldy L8832
2935	.9c06		ad 33 88	lda $8833	                lda L8833
2936	.9c09		85 e1		sta $e1		                sta $E1
2937	.9c0b		a2 37		ldx #$37	                ldx #$37
2938	.9c0d		20 6c 9c	jsr $9c6c	                jsr L9C51
2939	.9c10		80 15		bra $9c27	                bra L9C0C

2941	.9c12						L9BF7;
2942	.9c12		a0 14		ldy #$14	                ldy #$14
2943	.9c14		a2 24		ldx #$24	                ldx #$24
2944	.9c16		20 b6 d5	jsr $d5b6	                jsr mos.sortVDUVariableCoordinates
2945	.9c19		8c 32 88	sty $8832	                sty L8832
2946	.9c1c		a0 20		ldy #$20	                ldy #$20
2947	.9c1e		20 2a 9c	jsr $9c2a	                jsr L9C0F
2948	.9c21		ad 32 88	lda $8832	                lda L8832
2949	.9c24		20 68 9c	jsr $9c68	                jsr L9C4D
2950	.9c27						L9C0C:
2951	.9c27		4c e3 da	jmp $dae3	                jmp mos.LDAE4

2953	.9c2a						L9C0F:
2954	.9c2a		20 b6 d5	jsr $d5b6	                jsr mos.sortVDUVariableCoordinates
2955	.9c2d		8e 30 88	stx $8830	                stx L8830
2956	.9c30		ae 32 88	ldx $8832	                ldx L8832
2957	.9c33		20 b6 d5	jsr $d5b6	                jsr mos.sortVDUVariableCoordinates
2958	.9c36		8c 32 88	sty $8832	                sty L8832
2959	.9c39		8e 31 88	stx $8831	                stx L8831
2960	.9c3c		ac 30 88	ldy $8830	                ldy L8830
2961	.9c3f		a2 fc		ldx #$fc	                ldx #$FC
2962	.9c41						L9C26:
2963	.9c41		b9 00 03	lda $0300,y	                lda $0300,y
2964	.9c44		9d 46 02	sta $0246,x	                sta vduv.workspace._42-$fc,x
2965	.9c47		9d 4a 02	sta $024a,x	                sta vduv.workspace._46-$fc,x
2966	.9c4a		c8		iny		                iny
2967	.9c4b		e8		inx		                inx
2968	.9c4c		d0 f3		bne $9c41	                bne L9C26
2969	.9c4e		ac 30 88	ldy $8830	                ldy L8830
2970	.9c51		ad 32 88	lda $8832	                lda L8832
2971	.9c54		85 e1		sta $e1		                sta $E1
2972	.9c56		a2 37		ldx #$37	                ldx #$37
2973	.9c58		20 24 9b	jsr $9b24	                jsr L9B09
2974	.9c5b		ac 30 88	ldy $8830	                ldy L8830
2975	.9c5e		ad 31 88	lda $8831	                lda L8831
2976	.9c61		20 68 9c	jsr $9c68	                jsr L9C4D
2977	.9c64		ac 31 88	ldy $8831	                ldy L8831
2978	.9c67		60		rts		                rts

2980	.9c68						L9C4D:
2981	.9c68		85 e0		sta $e0		                sta $E0
2982	.9c6a		a2 2c		ldx #$2c	                ldx #$2C
2983	.9c6c						L9C51:
2984	.9c6c		20 24 9b	jsr $9b24	                jsr L9B09
2985	.9c6f		a4 e0		ldy $e0		                ldy $E0
2986	.9c71						L9C56:
2987	.9c71		5a		phy		                phy
2988	.9c72		b9 02 03	lda $0302,y	                lda $0302,y
2989	.9c75		cd 44 03	cmp $0344	                cmp $0344
2990	.9c78		d0 08		bne $9c82	                bne L9C67
2991	.9c7a		b9 03 03	lda $0303,y	                lda $0303,y
2992	.9c7d		cd 45 03	cmp $0345	                cmp $0345
2993	.9c80		f0 39		beq $9cbb	                beq L9CA0
2994	.9c82						L9C67:
2995	.9c82		a2 2c		ldx #$2c	                ldx #$2C
2996	.9c84		20 db 9c	jsr $9cdb	                jsr L9CC0
2997	.9c87		a2 37		ldx #$37	                ldx #$37
2998	.9c89		20 db 9c	jsr $9cdb	                jsr L9CC0
2999	.9c8c		20 e3 da	jsr $dae3	                jsr mos.LDAE4
3000	.9c8f		a2 37		ldx #$37	                ldx #$37
3001	.9c91		20 25 d7	jsr $d725	                jsr mos.LD726
3002	.9c94		a2 2c		ldx #$2c	                ldx #$2C
3003	.9c96		20 25 d7	jsr $d725	                jsr mos.LD726
3004	.9c99		a0 37		ldy #$37	                ldy #$37
3005	.9c9b		20 cb d5	jsr $d5cb	                jsr mos.sortVDUVariableWords
3006	.9c9e		da		phx		                phx
3007	.9c9f		a2 fc		ldx #$fc	                ldx #$FC
3008	.9ca1						L9C86:
3009	.9ca1		b9 00 03	lda $0300,y	                lda $0300,y
3010	.9ca4		9d 4a 02	sta $024a,x	                sta vduv.workspace._46-$fc,x
3011	.9ca7		c8		iny		                iny
3012	.9ca8		e8		inx		                inx
3013	.9ca9		d0 f6		bne $9ca1	                bne L9C86
3014	.9cab		fa		plx		                plx
3015	.9cac		a0 fc		ldy #$fc	                ldy #$FC
3016	.9cae						L9C93:
3017	.9cae		bd 00 03	lda $0300,x	                lda $0300,x
3018	.9cb1		99 46 02	sta $0246,y	                sta vduv.workspace._42-$fc,y
3019	.9cb4		e8		inx		                inx
3020	.9cb5		c8		iny		                iny
3021	.9cb6		d0 f6		bne $9cae	                bne L9C93
3022	.9cb8		7a		ply		                ply
3023	.9cb9		80 b6		bra $9c71	                bra L9C56

3025	.9cbb						L9CA0:
3026	.9cbb		a9 2c		lda #$2c	                lda #$2C
3027	.9cbd		a6 e0		ldx $e0		                ldx $E0
3028	.9cbf		20 c7 9c	jsr $9cc7	                jsr L9CAC
3029	.9cc2		7a		ply		                ply
3030	.9cc3		a9 37		lda #$37	                lda #$37
3031	.9cc5		a6 e1		ldx $e1		                ldx $E1
3032	.9cc7						L9CAC:
3033	.9cc7		85 de		sta $de		                sta $DE
3034	.9cc9		bd 02 03	lda $0302,x	                lda vduv.graphicsWindowPixelsBottom+0,x
3035	.9ccc		d9 02 03	cmp $0302,y	                cmp vduv.graphicsWindowPixelsBottom+0,y
3036	.9ccf		d0 08		bne $9cd9	                bne L9CBE
3037	.9cd1		bd 03 03	lda $0303,x	                lda vduv.graphicsWindowPixelsBottom+1,x
3038	.9cd4		d9 03 03	cmp $0303,y	                cmp vduv.graphicsWindowPixelsBottom+1,y
3039	.9cd7		f0 05		beq $9cde	                beq L9CC3
3040	.9cd9						L9CBE:
3041	.9cd9		a6 de		ldx $de		                ldx $DE
3042	.9cdb						L9CC0:
3043	.9cdb		20 1c d7	jsr $d71c	                jsr mos.LD71D
3044	.9cde						L9CC3:
3045	.9cde		bd 00 03	lda $0300,x	                lda $0300,x
3046	.9ce1		cd 42 03	cmp $0342	                cmp $0342
3047	.9ce4		bd 01 03	lda $0301,x	                lda $0301,x
3048	.9ce7		ed 43 03	sbc $0343	                sbc $0343
3049	.9cea		10 0d		bpl $9cf9	                bpl L9CDE
3050	.9cec		bd 00 03	lda $0300,x	                lda $0300,x
3051	.9cef		8d 42 03	sta $0342	                sta $0342
3052	.9cf2		bd 01 03	lda $0301,x	                lda $0301,x
3053	.9cf5		8d 43 03	sta $0343	                sta $0343
3054	.9cf8		60		rts		                rts

3056	.9cf9						L9CDE:
3057	.9cf9		ad 46 03	lda $0346	                lda $0346
3058	.9cfc		dd 00 03	cmp $0300,x	                cmp $0300,x
3059	.9cff		ad 47 03	lda $0347	                lda $0347
3060	.9d02		fd 01 03	sbc $0301,x	                sbc $0301,x
3061	.9d05		10 0c		bpl $9d13	                bpl L9CF8
3062	.9d07		bd 00 03	lda $0300,x	                lda $0300,x
3063	.9d0a		8d 46 03	sta $0346	                sta $0346
3064	.9d0d		bd 01 03	lda $0301,x	                lda $0301,x
3065	.9d10		8d 47 03	sta $0347	                sta $0347
3066	.9d13						L9CF8:
3067	.9d13		60		rts		                rts

3069	.9d14						L9CF9:
3070	.9d14		20 a0 dd	jsr $dda0	                jsr mos.LDDA1
3071	.9d17		9c 36 03	stz $0336	                stz $0336
3072	.9d1a		9c 37 03	stz $0337	                stz $0337
3073	.9d1d		20 af dc	jsr $dcaf	                jsr mos.LDCB0
3074	.9d20		d0 4f		bne $9d71	                bne L9D56
3075	.9d22		20 1b dc	jsr $dc1b	                jsr mos.LDC1C
3076	.9d25						L9D0A:
3077	.9d25		24 ff		bit $ff		                bit $FF
3078	.9d27		30 48		bmi $9d71	                bmi L9D56
3079	.9d29		ad 36 03	lda $0336	                lda $0336
3080	.9d2c		cd 37 03	cmp $0337	                cmp $0337
3081	.9d2f		f0 40		beq $9d71	                beq L9D56
3082	.9d31		1a		inc a		                inc a
3083	.9d32		8d 36 03	sta $0336	                sta $0336
3084	.9d35		aa		tax		                tax
3085	.9d36		bd 00 84	lda $8400,x	                lda L8400,x
3086	.9d39		8d 28 03	sta $0328	                sta $0328
3087	.9d3c		bd 00 85	lda $8500,x	                lda L8500,x
3088	.9d3f		8d 2c 03	sta $032c	                sta $032C
3089	.9d42		bd 00 86	lda $8600,x	                lda L8600,x
3090	.9d45		48		pha		                pha
3091	.9d46		4a		lsr a		                lsr a
3092	.9d47		4a		lsr a		                lsr a
3093	.9d48		8d 29 03	sta $0329	                sta $0329
3094	.9d4b		68		pla		                pla
3095	.9d4c		29 03		and #$03	                and #$03
3096	.9d4e		8d 2d 03	sta $032d	                sta $032D
3097	.9d51		bd 00 87	lda $8700,x	                lda L8700,x
3098	.9d54		9c 2b 03	stz $032b	                stz $032B
3099	.9d57		cd 06 03	cmp $0306	                cmp $0306
3100	.9d5a		f0 0a		beq $9d66	                beq L9D4B
3101	.9d5c		85 e0		sta $e0		                sta $E0
3102	.9d5e		1a		inc a		                inc a
3103	.9d5f		20 47 dc	jsr $dc47	                jsr mos.LDC48
3104	.9d62		b0 0d		bcs $9d71	                bcs L9D56
3105	.9d64		a5 e0		lda $e0		                lda $E0
3106	.9d66						L9D4B:
3107	.9d66		cd 02 03	cmp $0302	                cmp $0302
3108	.9d69		f0 ba		beq $9d25	                beq L9D0A
3109	.9d6b		3a		dec a		                dec a
3110	.9d6c		20 47 dc	jsr $dc47	                jsr mos.LDC48
3111	.9d6f		90 b4		bcc $9d25	                bcc L9D0A
3112	.9d71						L9D56:
3113	.9d71		60		rts		                rts

3115	.9d72						L9D57:
3116	.9d72		ad 32 03	lda $0332	                lda $0332
3117	.9d75		a8		tay		                tay
3118	.9d76		cd 2c 03	cmp $032c	                cmp $032C
3119	.9d79		ad 33 03	lda $0333	                lda $0333
3120	.9d7c		aa		tax		                tax
3121	.9d7d		ed 2d 03	sbc $032d	                sbc $032D
3122	.9d80		b0 0a		bcs $9d8c	                bcs L9D71
3123	.9d82		c8		iny		                iny
3124	.9d83		d0 01		bne $9d86	                bne L9D6B
3125	.9d85		e8		inx		                inx
3126	.9d86						L9D6B:
3127	.9d86		8c 2e 03	sty $032e	                sty $032E
3128	.9d89		8e 2f 03	stx $032f	                stx $032F
3129	.9d8c						L9D71:
3130	.9d8c		60		rts		                rts

3132							;-------------------------------------------------------------------------

3134							                .if version>=500
3138							                .endif

3140							;-------------------------------------------------------------------------

3142							                .if version>=500
3146							                .endif

3148							;-------------------------------------------------------------------------

3150							                .if version>=500
3168							                .endif

3170							                .if version>=500
3227							                .endif

3229							;-------------------------------------------------------------------------

3231							                .if version>=500
3234							                .endif

3236							;-------------------------------------------------------------------------

3238							                .if version>=500
3253							                .endif

3255							;-------------------------------------------------------------------------

3257							                .if version>=500
3267							                .endif

3269							;-------------------------------------------------------------------------

3271							                .if version>=500
3280							                .endif

3282							;-------------------------------------------------------------------------

3284							                .if version>=500
3292							                .endif

3294							;-------------------------------------------------------------------------

3296							                .if version>=500
3310							                .endif

3312							;-------------------------------------------------------------------------

3314							                .if version>=500
3322							                .endif

3324							;-------------------------------------------------------------------------

3326							                .if version>=500
3346							                .endif

3348							;-------------------------------------------------------------------------

3350							                .if version>=500
3360							                .endif

3362							;-------------------------------------------------------------------------

3364							                .if version>=500
3376							                .endif

3378							;-------------------------------------------------------------------------

3380							                .if version>=500
3455							                .endif

3457							;-------------------------------------------------------------------------

3459							                .if version>=500
3470							                .endif

3472							;-------------------------------------------------------------------------

3474							                .if version>=500
3503							                .endif

3505							;-------------------------------------------------------------------------

3507							                .if version>=500
3509							                .endif

3511							;-------------------------------------------------------------------------

3513							                .if version==400
3515							                .endif

3517							;-------------------------------------------------------------------------
3518							;
3519							; Utils/Terminal ROM service entry point.
3520							;
3521	.9d8d						utilsServiceEntryPoint:
3522							                .if version==400
3529							                .endif
3530							                .if version<500
3531	.9d8d		c9 fe		cmp #$fe	                cmp #romServiceCallTubeSystemPostInitialisation
3532	.9d8f		90 56		bcc $9de7	                bcc L9DCC        ;taken if definitely not Tube-related
3533	.9d91		d0 14		bne $9da7	                bne handleTubeMainInitialisation
3534	.9d93						handleTubeSystemPostInitialisation:
3535	.9d93		c0 00		cpy #$00	                cpy #$00
3536	.9d95		f0 50		beq $9de7	                beq L9DCC

3538							                ; [Tube p28] - write out the startup message that the
3539							                ; second processor has been stuck trying to write out.
3540	.9d97						writeSecondProcessorStartupMessageLoop:
3541	.9d97		2c e0 fe	bit $fee0	                bit tube.status1
3542	.9d9a		10 fb		bpl $9d97	                bpl writeSecondProcessorStartupMessageLoop
3543	.9d9c		ad e1 fe	lda $fee1	                lda tube.data1
3544	.9d9f		f0 44		beq $9de5	                beq L9DCA
3545	.9da1		20 ee ff	jsr $ffee	                jsr OSWRCH
3546	.9da4		4c 97 9d	jmp $9d97	                jmp writeSecondProcessorStartupMessageLoop

3548	.9da7						handleTubeMainInitialisation:
3549	.9da7		a9 82		lda #$82	                lda #<tubeHost.eventHandler
3550	.9da9		8d 20 02	sta $0220	                sta EVENTV+0
3551	.9dac		a9 06		lda #$06	                lda #>tubeHost.eventHandler
3552	.9dae		8d 21 02	sta $0221	                sta EVENTV+1
3553	.9db1		a9 16		lda #$16	                lda #<tubeBrkHandlerAddr
3554	.9db3		8d 02 02	sta $0202	                sta BRKV+0
3555	.9db6		a9 00		lda #$00	                lda #>tubeBrkHandlerAddr
3556	.9db8		8d 03 02	sta $0203	                sta BRKV+1
3557	.9dbb		a9 8e		lda #$8e	                lda #tube.status1.S|tube.status1.M|tube.status1.J|tube.status1.I;
3558	.9dbd		8d e0 fe	sta $fee0	                sta tube.status1

3560							                ; Copy Tube host code into main RAM.
3561	.9dc0		a0 00		ldy #$00	                ldy #$00
3562	.9dc2						-
3563	.9dc2		b9 87 ab	lda $ab87,y	                lda tubeHost.codePage0,y
3564	.9dc5		99 00 04	sta $0400,y	                sta tubeHostAddr+0*256,y
3565	.9dc8		b9 7c ac	lda $ac7c,y	                lda tubeHost.codePages12,y
3566	.9dcb		99 00 05	sta $0500,y	                sta tubeHostAddr+1*256,y
3567	.9dce		b9 7c ad	lda $ad7c,y	                lda tubeHost.codePages12+256,y
3568	.9dd1		99 00 06	sta $0600,y	                sta tubeHostAddr+2*256,y
3569	.9dd4		88		dey		                dey
3570	.9dd5		d0 eb		bne $9dc2	                bne -

3572	.9dd7		20 1f 04	jsr $041f	                jsr tubeHost.resetTubeClaim

3574							                ; Copy BRK handler into zero page.
3575	.9dda		a2 41		ldx #$41	                ldx #size(tubeHost.brkHandler)
3576	.9ddc						-
3577	.9ddc		bd 46 ab	lda $ab46,x	                lda tubeHost.brkHandler,x
3578	.9ddf		9d 16 00	sta $0016,x	                sta @w tubeBrkHandlerAddr,x
3579	.9de2		ca		dex		                dex
3580	.9de3		10 f7		bpl $9ddc	                bpl -

3582	.9de5						L9DCA:
3583	.9de5		a9 00		lda #$00	                lda #$00                     ; Claim call and return

3585	.9de7						L9DCC:
3595							                .endif
3596	.9de7		c9 12		cmp #$12	                cmp #romServiceCallInitialiseFilingSystem
3597	.9de9		d0 1a		bne $9e05	                bne L9DEA
3598							                .if version==400
3601							                .else
3602	.9deb		c0 04		cpy #$04	                cpy #$04                     ; Exit if not TAPE/ROM
3603	.9ded		b0 42		bcs $9e31	                bcs L9E16
3604	.9def		c0 00		cpy #$00	                cpy #$00                     ; Exit if Y=0, no FS
3605	.9df1		f0 3e		beq $9e31	                beq L9E16
3606	.9df3		a2 03		ldx #$03	                ldx #$03                     ; X=ROMFS, A=FS number
3607	.9df5		98		tya		                tya
3608	.9df6		c9 02		cmp #$02	                cmp #$02                     ; If A=2, ROMFS, jump to select it
3609	.9df8		b0 04		bcs $9dfe	                bcs L9DE3
3610	.9dfa		a2 00		ldx #$00	                ldx #$00                     ; X=TAPE, A=speed+2
3611	.9dfc		69 02		adc #$02	                adc #$02
3612	.9dfe						L9DE3:
3613	.9dfe		69 89		adc #$89	                adc #$89                     ; Convert to TAPE/ROM select value
3614							                .endif
3615	.9e00		20 0e ed	jsr $ed0e	                jsr mos.selectROMOrTAPEByOSBYTE
3616	.9e03		80 e0		bra $9de5	                bra L9DCA                    ; Jump to claim and return

3618	.9e05						L9DEA:
3619	.9e05		c9 06		cmp #$06	                cmp #romServiceCallBreakInstruction
3620	.9e07		d0 29		bne $9e32	                bne L9E17
3621	.9e09		ad dd df	lda $dfdd	                lda hazel.hasACCCONChanged ; Skip if ACCCON not changed
3622	.9e0c		f0 09		beq $9e17	                beq L9DFC
3623	.9e0e		9c dd df	stz $dfdd	                stz hazel.hasACCCONChanged ; Clear ACCCON changed flag
3624	.9e11		ad dc df	lda $dfdc	                lda hazel.oldACCCON        ; Restore ACCCON
3625	.9e14		8d 34 fe	sta $fe34	                sta ACCCON
3626	.9e17						L9DFC:
3627	.9e17		5a		phy		                phy
3628	.9e18		ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle
3629	.9e1b		f0 06		beq $9e23	                beq L9E08
3630	.9e1d		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
3631	.9e20		20 e5 8e	jsr $8ee5	                jsr closeFile
3632	.9e23						L9E08:
3633	.9e23		ac d5 df	ldy $dfd5	                ldy hazel.moveDestHandle
3634	.9e26		f0 06		beq $9e2e	                beq L9E13
3635	.9e28		9c d5 df	stz $dfd5	                stz hazel.moveDestHandle
3636	.9e2b		20 e5 8e	jsr $8ee5	                jsr closeFile
3637	.9e2e						L9E13:
3638	.9e2e		7a		ply		                ply
3639	.9e2f		a9 06		lda #$06	                lda #$06
3640	.9e31						L9E16:
3641	.9e31		60		rts		                rts
3642	.9e32						L9E17:
3643	.9e32		c9 26		cmp #$26	                cmp #romServiceCallCloseAllOpenFiles
3644	.9e34		d0 1d		bne $9e53	                bne L9E38
3645							                .if version!=400
3646	.9e36		a9 8d		lda #$8d	                lda #$8D
3647	.9e38		20 47 9e	jsr $9e47	                jsr L9E2C
3648	.9e3b		a2 03		ldx #$03	                ldx #$03
3649	.9e3d		a9 04		lda #$04	                lda #$04
3650	.9e3f		24 c6		bit $c6		                bit $C6
3651	.9e41		f0 02		beq $9e45	                beq L9E2A
3652	.9e43		a2 00		ldx #$00	                ldx #$00
3653	.9e45						L9E2A:
3654	.9e45		a9 8c		lda #$8c	                lda #$8C
3655	.9e47						L9E2C:
3656							                .endif
3657	.9e47		20 0e ed	jsr $ed0e	                jsr mos.selectROMOrTAPEByOSBYTE
3658	.9e4a		a9 00		lda #$00	                lda #$00
3659	.9e4c		a8		tay		                tay
3660	.9e4d		20 15 a2	jsr $a215	                jsr osfindTapeOrROM
3661	.9e50		a9 26		lda #$26	                lda #$26
3662	.9e52		60		rts		                rts

3664	.9e53						L9E38:
3665	.9e53		c9 09		cmp #$09	                cmp #romServiceCallHelp
3666							                .if version<400
3667	.9e55		d0 53		bne $9eaa	                bne L9E8F
3670							                .endif
3671	.9e57		5a		phy		                phy
3672	.9e58		b1 f2		lda ($f2),y	                lda ($F2),y
3673	.9e5a		c9 0d		cmp #$0d	                cmp #$0D
3674	.9e5c		d0 1e		bne $9e7c	                bne L9E61
3675	.9e5e		20 17 9f	jsr $9f17	                jsr L9EFC
3676	.9e61		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
3677	>9e64		20 20 4d 4f 53 0d		                .text "  MOS",13
3678							                .if version<400
3679	>9e6a		0d 54 45 52 4d 49 4e 41		                .text 13,"TERMINAL 1.20",13
	>9e72		4c 20 31 2e 32 30 0d
3690							                .endif
3691	>9e79		00				                .text 0
3692	.9e7a		80 2a		bra $9ea6	                bra L9E8B
3693	.9e7c						L9E61:
3694	.9e7c		a2 02		ldx #$02	                ldx #size(mosHelpSubject)-1
3695	.9e7e						L9E63:
3696	.9e7e		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
3697	.9e80		c9 2e		cmp #$2e	                cmp #'.'
3698	.9e82		f0 2c		beq $9eb0	                beq L9E95
3699	.9e84		29 df		and #$df	                and #$DF
3700	.9e86		dd ad 9e	cmp $9ead,x	                cmp mosHelpSubject,x
3701	.9e89		d0 0b		bne $9e96	                bne L9E7B
3702	.9e8b		c8		iny		                iny
3703	.9e8c		ca		dex		                dex
3704	.9e8d		10 ef		bpl $9e7e	                bpl L9E63
3705	.9e8f		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
3706	.9e91		20 43 ea	jsr $ea43	                jsr mos.isLetter
3707	.9e94		b0 1a		bcs $9eb0	                bcs L9E95
3708	.9e96						L9E7B:
3709	.9e96		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
3710	.9e98		c9 0d		cmp #$0d	                cmp #13
3711	.9e9a		f0 0a		beq $9ea6	                beq L9E8B
3712	.9e9c		c8		iny		                iny
3713	.9e9d		c9 20		cmp #$20	                cmp #' '
3714	.9e9f		d0 f5		bne $9e96	                bne L9E7B
3715	.9ea1		20 80 f2	jsr $f280	                jsr mos.skipSpacesAndCheckForCRInStringInput
3716	.9ea4		d0 d6		bne $9e7c	                bne L9E61
3717	.9ea6						L9E8B:
3718	.9ea6		7a		ply		                ply
3719	.9ea7		a9 09		lda #$09	                lda #romServiceCallHelp
3720	.9ea9						LA304:
3721	.9ea9		60		rts		                rts

3723							                .if version<400
3724	.9eaa						L9E8F:
3725	.9eaa		4c 37 ae	jmp $ae37	                jmp terminalServiceEntryPoint
3726							                .endif

3728	>9ead		53 4f 4d			mosHelpSubject: .text "SOM"

3730	.9eb0						L9E95:
3731	.9eb0		20 17 9f	jsr $9f17	                jsr L9EFC
3732	.9eb3		a9 37		lda #$37	                lda #<mosCommandTable
3733	.9eb5		85 b0		sta $b0		                sta terminalHELPWorkspace.tablePtr+0
3734	.9eb7		a9 81		lda #$81	                lda #>mosCommandTable
3735	.9eb9		85 b1		sta $b1		                sta terminalHELPWorkspace.tablePtr+1
3736	.9ebb						L9EA0:
3737	.9ebb		b2 b0		lda ($b0)	                lda (terminalHELPWorkspace.tablePtr)
3738	.9ebd		30 50		bmi $9f0f	                bmi L9EF4
3739							                .if version==400
3742							                .endif
3743	.9ebf		20 28 9f	jsr $9f28	                jsr printSpace
3744	.9ec2		20 28 9f	jsr $9f28	                jsr printSpace
3745	.9ec5		b2 b0		lda ($b0)	                lda (terminalHELPWorkspace.tablePtr)
3746	.9ec7						L9EAC:
3747							                .if version==400
3750							                .endif
3751	.9ec7		20 2a 9f	jsr $9f2a	                jsr L9F0E
3752	.9eca						LA711:
3753	.9eca		e6 b0		inc $b0		                inc terminalHELPWorkspace.tablePtr+0
3754	.9ecc		d0 02		bne $9ed0	                bne L9EB5
3755	.9ece		e6 b1		inc $b1		                inc terminalHELPWorkspace.tablePtr+1
3756	.9ed0						L9EB5:
3757	.9ed0		b2 b0		lda ($b0)	                lda (terminalHELPWorkspace.tablePtr)
3758	.9ed2		10 f3		bpl $9ec7	                bpl L9EAC

3760							                ; add 4 to tablePtr
3761	.9ed4		a9 04		lda #$04	                lda #$04
3762	.9ed6		18		clc		                clc
3763	.9ed7		65 b0		adc $b0		                adc terminalHELPWorkspace.tablePtr+0
3764	.9ed9		85 b0		sta $b0		                sta terminalHELPWorkspace.tablePtr+0
3765	.9edb		90 02		bcc $9edf	                bcc +
3766	.9edd		e6 b1		inc $b1		                inc terminalHELPWorkspace.tablePtr+1
3767	.9edf						+
3768	.9edf		20 68 e2	jsr $e268	                jsr mos.LE25C
3769	.9ee2		e0 13		cpx #$13	                cpx #19
3770	.9ee4		f0 24		beq $9f0a	                beq L9EEF
3771	.9ee6						L9ECB:
3772	.9ee6		20 5e e2	jsr $e25e	                jsr mos.getTextCursorPositionWithColumn81
3773	.9ee9		8a		txa		                txa
3774	.9eea		f0 cf		beq $9ebb	                beq L9EA0
3775	.9eec		e0 14		cpx #$14	                cpx #20
3776	.9eee		f0 cb		beq $9ebb	                beq L9EA0
3777	.9ef0		90 0d		bcc $9eff	                bcc L9EE4
3778	.9ef2		e0 28		cpx #$28	                cpx #40
3779	.9ef4		f0 c5		beq $9ebb	                beq L9EA0
3780	.9ef6		b0 0c		bcs $9f04	                bcs L9EE9
3781	.9ef8		20 68 e2	jsr $e268	                jsr mos.LE25C
3782	.9efb		e0 27		cpx #$27	                cpx #39
3783	.9efd		f0 0b		beq $9f0a	                beq L9EEF
3784	.9eff						L9EE4:
3785	.9eff		20 28 9f	jsr $9f28	                jsr printSpace
3786	.9f02		80 e2		bra $9ee6	                bra L9ECB

3788	.9f04						L9EE9:
3789	.9f04		e0 3c		cpx #$3c	                cpx #60
3790	.9f06		90 f7		bcc $9eff	                bcc L9EE4
3791	.9f08		f0 b1		beq $9ebb	                beq L9EA0
3792	.9f0a						L9EEF:
3793	.9f0a		20 3a 9f	jsr $9f3a	                jsr printNewLine
3794	.9f0d		80 ac		bra $9ebb	                bra L9EA0

3796	.9f0f						L9EF4:
3797	.9f0f		20 5e e2	jsr $e25e	                jsr mos.getTextCursorPositionWithColumn81
3798	.9f12		8a		txa		                txa
3799	.9f13		f0 91		beq $9ea6	                beq L9E8B
3800	.9f15		80 f3		bra $9f0a	                bra L9EEF

3802	.9f17						L9EFC:
3803	.9f17		5a		phy		                phy
3804	.9f18		20 9a a9	jsr $a99a	                jsr alwaysPrintFollowingMessage
3805	>9f1b		0d				                .text 13
3806							                .if version==320
3808							                .elsif version==350
3809							                .if CFA3000
3810	>9f1c		4d 4f 53 20 33 2e 35 61		                .text "MOS 3.5a"
3815							                .endif
3834							                .endif
3835	>9f24		0d 00				                .text 13,0
3836	.9f26		7a		ply		                ply
3837	.9f27		60		rts		                rts

3839							;-------------------------------------------------------------------------
3840							;
3841	.9f28						printSpace:
3842	.9f28		a9 20		lda #$20	                lda #$20
3843	.9f2a						L9F0E:
3844	.9f2a		da		phx		                phx
3845	.9f2b		a6 b0		ldx $b0		                ldx $B0
3846	.9f2d		da		phx		                phx
3847	.9f2e		a6 b1		ldx $b1		                ldx $B1
3848	.9f30		20 ee ff	jsr $ffee	                jsr OSWRCH
3849	.9f33						restoreB1AndB0:
3850	.9f33		86 b1		stx $b1		                stx $B1
3851	.9f35		fa		plx		                plx
3852	.9f36		86 b0		stx $b0		                stx $B0
3853	.9f38		fa		plx		                plx
3854	.9f39		60		rts		                rts

3856							;-------------------------------------------------------------------------

3858	.9f3a						printNewLine:
3859	.9f3a		da		phx		                phx
3860	.9f3b		a6 b0		ldx $b0		                ldx $B0
3861	.9f3d		da		phx		                phx
3862	.9f3e		a6 b1		ldx $b1		                ldx $B1
3863	.9f40		20 e7 ff	jsr $ffe7	                jsr OSNEWL
3864	.9f43		80 ee		bra $9f33	                bra restoreB1AndB0

3866							;-------------------------------------------------------------------------

3868							; TAPE/ROM OSARGS handler
3869							; =======================
3870	.9f45						osargsTapeOrROM:
3871	.9f45		c0 00		cpy #$00	                cpy #$00       ; Handle<>0 - read/write open file info
3872	.9f47		d0 0e		bne $9f57	                bne L9F3B
3873	.9f49		09 00		ora #$00	                ora #$00 ; A<>0 - read/write filing system info - exit
3874	.9f4b		d0 09		bne $9f56	                bne L9F3A

3876							; A=0, Y=0 - read current filing system
3877							; -------------------------------------
3878	.9f4d		a9 03		lda #$03	                lda #$03                     ; Prepare A=ROMFS
3879							                .if version!=400
3880	.9f4f		2c 47 02	bit $0247	                bit cfsRFSFSSwitch           ; If TAPE/ROM switch
3881	.9f52		d0 02		bne $9f56	                bne L9F3A
3882	.9f54		25 c6		and $c6		                and $C6           ; Mask with speed to give A=2 or A=1
3883							                .endif

3885							; TAPE/ROM FSC 6 - shut down FS
3886							; TAPE/ROM FSC 8 - OS command
3887							; TAPE/ROM FSC 10 - *INFO
3888							; -----------------------------
3889	.9f56						L9F3A:
3890	.9f56		60		rts		                rts

3892							; OSARGS handle<>0 - red/write open file info
3893							; -------------------------------------------
3894	.9f57						L9F3B:
3895	.9f57		c9 00		cmp #$00	                cmp #$00                     ; Not =PTR, exit unsupported
3896	.9f59		d0 fb		bne $9f56	                bne L9F3A
3897	.9f5b		c0 02		cpy #$02	                cpy #$02                     ; =PTR#2 - read PTR on output handle
3898	.9f5d		f0 1d		beq $9f7c	                beq L9F60

3900							; Read PTR on CFS/RFS input file
3901							; ------------------------------
3902	.9f5f		a9 01		lda #$01	                lda #$01                     ; Check if this is input channel and is open
3903	.9f61		20 aa aa	jsr $aaaa	                jsr LAA68
3904	.9f64		ad 9e 03	lda $039e	                lda $039E
3905	.9f67		95 00		sta $00,x	                sta $00,x
3906	.9f69		5a		phy		                phy
3907	.9f6a		ad de 03	lda $03de	                lda $03DE
3908	.9f6d		ac dd 03	ldy $03dd	                ldy $03DD
3909	.9f70		d0 01		bne $9f73	                bne L9F57
3910	.9f72		3a		dec a		                dec a
3911	.9f73						L9F57:
3912	.9f73		88		dey		                dey
3913	.9f74		94 01		sty $01,x	                sty $01,x
3914	.9f76		7a		ply		                ply
3915	.9f77						L9F5B:
3916	.9f77		95 02		sta $02,x	                sta $02,x
3917	.9f79		74 03		stz $03,x	                stz $03,x
3918	.9f7b		60		rts		                rts

3920							; Read PTR on TAPE output file
3921							; ----------------------------
3922	.9f7c						L9F60:
3923	.9f7c		a9 02		lda #$02	                lda #$02                     ; Check if this is output channel and is open
3924	.9f7e		20 aa aa	jsr $aaaa	                jsr LAA68
3925	.9f81		ad 9d 03	lda $039d	                lda $039D                    ; Copy PTR to control block
3926	.9f84		95 00		sta $00,x	                sta $00,x
3927	.9f86		ad 94 03	lda $0394	                lda $0394
3928	.9f89		95 01		sta $01,x	                sta $01,x
3929	.9f8b		ad 95 03	lda $0395	                lda $0395
3930	.9f8e		80 e7		bra $9f77	                bra L9F5B

3932							; TAPE/ROM FSC dispatch table
3933							; ---------------------------

3935	=[]						_:=[]
3936	=[$a43c]					_..=[LA422]          ;0 - *OPT
3937	=[$a43c,$a50b]					_..=[LA4F1]          ;1 - EOF
3938	=[$a43c,$a50b,$a12c]				_..=[LA110]          ;2 - */
3939	=[$a43c,$a50b,$a12c,$a145]			_..=[LA129]          ;3 - unknown * command
3940	=[$a43c,$a50b,$a12c,$a145,$a12c]		_..=[LA110]          ;4 - *RUN
3941	=[$a43c,$a50b,$a12c,$a145,$a12c,$a184]		_..=[LA168]          ;5 - *CAT
3942	=[$a43c,$a50b,$a12c,$a145,$a12c,$a184,$9f56]	_..=[L9F3A]          ;6 - shut down FS
3943	=[$a43c,$a50b,$a12c,$a145,$a12c,$a184,$9f56,$9fba]
							_..=[L9F9E]          ;7 - obtain file handle range
3944	=[$a43c,$a50b,$a12c,$a145,$a12c,$a184,$9f56,$9fba,$9f56]
							_..=[L9F3A]          ;8 - OS command
3945	=[$a43c,$a50b,$a12c,$a145,$a12c,$a184,$9f56,$9fba,$9f56,$a171]
							_..=[LA155]          ;9 - *EX
3946	=[$a43c,$a50b,$a12c,$a145,$a12c,$a184,$9f56,$9fba,$9f56,$a171,$9f56]
							_..=[L9F3A]          ;10 - *INFO
3947	=[$a43c,$a50b,$a12c,$a145,$a12c,$a184,$9f56,$9fba,$9f56,$a171,$9f56,$a12f]
							_..=[LA113]          ;11 - *RUN command for library
3948	=[$a43c,$a50b,$a12c,$a145,$a12c,$a184,$9f56,$9fba,$9f56,$a171,$9f56,$a12f]
							tape_and_rom_dispatch_fsc_routines=_

3950	.9f90						L9F74:
3951	>9f90		3b 0a 2b 44 2b 83 55 b9		                .byte <tape_and_rom_dispatch_fsc_routines-1
	>9f98		55 70 55 2e
3952	.9f9c						L9F80:
3953	>9f9c		a4 a5 a1 a1 a1 a1 9f 9f		                .byte >tape_and_rom_dispatch_fsc_routines-1
	>9fa4		9f a1 9f a1

3955							; TAPE/ROM FSC
3956							; ============
3957	.9fa8						fscTapeOrROM:
3958	.9fa8		c9 0c		cmp #$0c	                cmp #$0C                     ; function<12 - exit unchanged
3959	.9faa		b0 aa		bcs $9f56	                bcs L9F3A
3960	.9fac		86 bc		stx $bc		                stx $BC                      ; Index into dispatch table
3961	.9fae		aa		tax		                tax
3962	.9faf		bd 9c 9f	lda $9f9c,x	                lda L9F80,x
3963	.9fb2		48		pha		                pha
3964	.9fb3		bd 90 9f	lda $9f90,x	                lda L9F74,x
3965	.9fb6		48		pha		                pha
3966	.9fb7		a6 bc		ldx $bc		                ldx $BC
3967	.9fb9		60		rts		                rts

3969							; TAPE/ROM FSC 7 - obtain file handle range
3970							; -----------------------------------------
3971	.9fba						L9F9E:
3972	.9fba		a2 03		ldx #$03	                ldx #$03
3973	.9fbc		a0 03		ldy #$03	                ldy #$03
3974							                .if version!=400
3975	.9fbe		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
3976	.9fc1		d0 93		bne $9f56	                bne L9F3A
3977	.9fc3		88		dey		                dey
3978	.9fc4		a2 01		ldx #$01	                ldx #$01
3979							                .endif
3980	.9fc6		60		rts		                rts

3982	.9fc7						L9FAB:
3983	.9fc7		68		pla		                pla
3984	.9fc8		28		plp		                plp
3985	.9fc9		38		sec		                sec
3986	.9fca		60		rts		                rts

3988	.9fcb						L9FAF:
3989	.9fcb		08		php		                php
3990	.9fcc		48		pha		                pha
3991	.9fcd		20 35 aa	jsr $aa35	                jsr LA9F3
3992	.9fd0		ad c2 03	lda $03c2	                lda $03C2
3993	.9fd3		48		pha		                pha
3994	.9fd4		20 1c a5	jsr $a51c	                jsr LA502
3995	.9fd7		68		pla		                pla
3996	.9fd8		b0 ed		bcs $9fc7	                bcs L9FAB
3997	.9fda		f0 19		beq $9ff5	                beq L9FD9
3998	.9fdc		a2 03		ldx #$03	                ldx #$03
3999	.9fde		a9 ff		lda #$ff	                lda #$FF
4000	.9fe0						L9FC4:
4001	.9fe0		48		pha		                pha
4002	.9fe1		bd be 03	lda $03be,x	                lda $03BE,x
4003	.9fe4		95 b0		sta $b0,x	                sta $B0,x
4004	.9fe6		68		pla		                pla
4005	.9fe7		35 b0		and $b0,x	                and $B0,x
4006	.9fe9		ca		dex		                dex
4007	.9fea		10 f4		bpl $9fe0	                bpl L9FC4
4008	.9fec		1a		inc a		                inc a
4009	.9fed		d0 06		bne $9ff5	                bne L9FD9
4010	.9fef		20 f3 a9	jsr $a9f3	                jsr LA9B1
4011	.9ff2		4c e9 92	jmp $92e9	                jmp badAddressError

4013	.9ff5						L9FD9:
4014	.9ff5		ad ca 03	lda $03ca	                lda $03CA
4015	.9ff8		4a		lsr a		                lsr a
4016	.9ff9		68		pla		                pla
4017	.9ffa		48		pha		                pha
4018	.9ffb		f0 10		beq $a00d	                beq L9FF1
4019	.9ffd		90 15		bcc $a014	                bcc L9FF8
4020	.9fff						L9FE3:
4021	.9fff		20 fd a9	jsr $a9fd	                jsr LA9BB
4022	.a002		20 2f ab	jsr $ab2f	                jsr doFollowingError
4023	>a005		d5 4c 6f 63 6b 65 64 00		                .text $d5,"Locked",0
4024	.a00d						L9FF1:
4025	.a00d		90 05		bcc $a014	                bcc L9FF8
4026	.a00f		a9 03		lda #$03	                lda #$03
4027	.a011		8d 58 02	sta $0258	                sta breakAndESCAPEEffect
4028	.a014						L9FF8:
4029	.a014		a9 30		lda #$30	                lda #$30
4030	.a016		25 bb		and $bb		                and $BB
4031	.a018		f0 04		beq $a01e	                beq LA002
4032	.a01a		a5 c1		lda $c1		                lda $C1
4033	.a01c						LA000:
4034	.a01c		d0 08		bne $a026	                bne LA00A
4035	.a01e						LA002:
4036							                .if version<500
4037	.a01e		5a		phy		                phy
4038	.a01f		20 e6 aa	jsr $aae6	                jsr LAAA4
4039	.a022		7a		ply		                ply
4040							                .endif
4041	.a023		20 ec a6	jsr $a6ec	                jsr LA6D2
4042	.a026						LA00A:
4043	.a026		20 e3 a8	jsr $a8e3	                jsr LA8A1
4044	.a029		d0 57		bne $a082	                bne LA066
4045	.a02b		20 77 aa	jsr $aa77	                jsr LAA35
4046	.a02e		2c ca 03	bit $03ca	                bit $03CA
4047	.a031		30 08		bmi $a03b	                bmi LA01F
4048	.a033		20 9e a8	jsr $a89e	                jsr LA85B
4049	.a036		20 92 a6	jsr $a692	                jsr LA678
4050	.a039		80 d9		bra $a014	                bra L9FF8

4052	.a03b						LA01F:
4053	.a03b		68		pla		                pla                          ; RUN, no control block to update
4054	.a03c		f0 33		beq $a071	                beq LA055
4055	.a03e		a0 02		ldy #$02	                ldy #$02
4056	.a040						LA024:
4057	.a040		b9 bc 03	lda $03bc,y	                lda $03BC,y                  ; Copy load/exec to control block
4058	.a043		91 c8		sta ($c8),y	                sta ($C8),y
4059	.a045		c8		iny		                iny
4060	.a046		c0 0a		cpy #$0a	                cpy #$0A
4061	.a048		d0 f6		bne $a040	                bne LA024
4062	.a04a		ad c8 03	lda $03c8	                lda $03C8                    ; Length b0-b7=Block Length b0-b7
4063	.a04d		91 c8		sta ($c8),y	                sta ($C8),y
4064	.a04f		c8		iny		                iny
4065	.a050		ad c9 03	lda $03c9	                lda $03C9
4066	.a053		18		clc		                clc
4067	.a054		6d c6 03	adc $03c6	                adc $03C6                    ; Length b8-b15=Block Number+Block Length b8-b15
4068	.a057		91 c8		sta ($c8),y	                sta ($C8),y
4069	.a059		c8		iny		                iny
4070	.a05a		a9 00		lda #$00	                lda #$00
4071	.a05c		6d c7 03	adc $03c7	                adc $03C7                    ; Length b16-b23=overflow
4072	.a05f		91 c8		sta ($c8),y	                sta ($C8),y
4073	.a061		c8		iny		                iny                          ; Length b24-b31=&00
4074	.a062		a9 00		lda #$00	                lda #$00
4075	.a064		91 c8		sta ($c8),y	                sta ($C8),y
4076	.a066		c8		iny		                iny
4077	.a067						LA04B:
4078	.a067		b9 bd 03	lda $03bd,y	                lda $03BD,y                  ; Attrs=&00000000
4079	.a06a		91 c8		sta ($c8),y	                sta ($C8),y
4080	.a06c		c8		iny		                iny
4081	.a06d		c0 12		cpy #$12	                cpy #$12
4082	.a06f		d0 f6		bne $a067	                bne LA04B
4083	.a071						LA055:
4084	.a071		28		plp		                plp
4085	.a072						LA056:
4086	.a072		20 f3 a9	jsr $a9f3	                jsr LA9B1
4087	.a075						LA059:
4088	.a075		24 ba		bit $ba		                bit $BA                      ; If flag set, skip printing newline
4089	.a077		30 07		bmi $a080	                bmi LA064
4090	.a079						LA05D:
4091	.a079		08		php		                php                          ; Print inline text
4092	.a07a		20 65 a9	jsr $a965	                jsr LA923
4093	>a07d		0d				                .byte 13                     ; Could just do JSR OSNEWL
4094	>a07e		00				                .byte 0
4095	.a07f		28		plp		                plp
4096	.a080						LA064:
4097	.a080		18		clc		                clc
4098	.a081		60		rts		                rts

4100	.a082						LA066:
4101	.a082		20 20 a5	jsr $a520	                jsr LA506
4102	.a085		d0 8d		bne $a014	                bne L9FF8
4103	.a087						LA06B:
4104	.a087		86 f2		stx $f2		                stx $F2
4105	.a089		84 f3		sty $f3		                sty $F3
4106	.a08b		a0 00		ldy #$00	                ldy #$00
4107	.a08d		20 ee f1	jsr $f1ee	                jsr mos.gsinitForFilenameParsing
4108	.a090		a2 00		ldx #$00	                ldx #$00
4109	.a092						LA076:
4110	.a092		20 00 f2	jsr $f200	                jsr mos.gsreadEntryPoint
4111	.a095		b0 0d		bcs $a0a4	                bcs LA088
4112	.a097		f0 08		beq $a0a1	                beq LA085
4113	.a099		9d d2 03	sta $03d2,x	                sta $03D2,x
4114	.a09c		e8		inx		                inx
4115	.a09d		e0 0b		cpx #$0b	                cpx #$0B
4116	.a09f		d0 f1		bne $a092	                bne LA076
4117	.a0a1						LA085:
4118	.a0a1		4c 10 f2	jmp $f210	                jmp mos.badStringError

4120	.a0a4						LA088:
4121	.a0a4		9e d2 03	stz $03d2,x	                stz $03D2,x
4122	.a0a7		60		rts		                rts

4124							; CFS/RFS OSFILE
4125							; ==============
4126	.a0a8						osfileTapeOrROM:
4127	.a0a8		48		pha		                pha
4128	.a0a9		86 c8		stx $c8		                stx $C8                      ; C8/9=>control block
4129	.a0ab		84 c9		sty $c9		                sty $C9
4130	.a0ad		b2 c8		lda ($c8)	                lda ($C8)                    ; Get XY=>filename
4131	.a0af		aa		tax		                tax
4132	.a0b0		a0 01		ldy #$01	                ldy #$01
4133	.a0b2		b1 c8		lda ($c8),y	                lda ($C8),y
4134	.a0b4		a8		tay		                tay
4135	.a0b5		20 87 a0	jsr $a087	                jsr LA06B                    ; Parse filename
4136	.a0b8		a0 02		ldy #$02	                ldy #$02
4137	.a0ba						LA09E:
4138	.a0ba		b1 c8		lda ($c8),y	                lda ($C8),y
4139	.a0bc		99 bc 03	sta $03bc,y	                sta $03BC,y
4140	.a0bf		99 ae 00	sta $00ae,y	                sta $00AE,y
4141	.a0c2		c8		iny		                iny
4142	.a0c3		c0 0a		cpy #$0a	                cpy #$0A
4143	.a0c5		d0 f3		bne $a0ba	                bne LA09E
4144	.a0c7		68		pla		                pla
4145	.a0c8		f0 07		beq $a0d1	                beq LA0B5
4146	.a0ca		c9 ff		cmp #$ff	                cmp #$FF
4147	.a0cc		d0 b2		bne $a080	                bne LA064
4148	.a0ce		4c cb 9f	jmp $9fcb	                jmp L9FAF

4150	.a0d1						LA0B5:
4151							                .if version==400
4153							                .else
4154	.a0d1		8d c6 03	sta $03c6	                sta $03C6
4155	.a0d4		8d c7 03	sta $03c7	                sta $03C7
4156	.a0d7						LA0BB:
4157	.a0d7		b1 c8		lda ($c8),y	                lda ($C8),y
4158	.a0d9		99 a6 00	sta $00a6,y	                sta $00A6,y
4159	.a0dc		c8		iny		                iny
4160	.a0dd		c0 12		cpy #$12	                cpy #$12
4161	.a0df		d0 f6		bne $a0d7	                bne LA0BB
4162	.a0e1		8a		txa		                txa
4163	.a0e2		f0 bd		beq $a0a1	                beq LA085
4164	.a0e4		20 35 aa	jsr $aa35	                jsr LA9F3
4165	.a0e7		20 3c a8	jsr $a83c	                jsr LA822
4166							                .if version<500
4167	.a0ea		a9 00		lda #$00	                lda #$00
4168	.a0ec		20 e8 aa	jsr $aae8	                jsr LAAA6
4169							                .endif
4170	.a0ef						LA0D3:
4171	.a0ef		38		sec		                sec
4172	.a0f0		a2 fd		ldx #$fd	                ldx #$fd                     ;-3
4173	.a0f2						LA0D6:
4174	.a0f2		bd b7 ff	lda $ffb7,x	                lda ($b4-$fd)&$ffff,x
4175	.a0f5		fd b3 ff	sbc $ffb3,x	                sbc ($b0-$fd)&$ffff,x
4176	.a0f8		9d cb 02	sta $02cb,x	                sta $3c8-$fd,x
4177	.a0fb		e8		inx		                inx
4178	.a0fc		d0 f4		bne $a0f2	                bne LA0D6
4179	.a0fe		a8		tay		                tay
4180	.a0ff		d0 0e		bne $a10f	                bne LA0F3
4181	.a101		ec c8 03	cpx $03c8	                cpx $03C8
4182	.a104		a9 01		lda #$01	                lda #$01
4183	.a106		ed c9 03	sbc $03c9	                sbc $03C9
4184	.a109		90 04		bcc $a10f	                bcc LA0F3
4185	.a10b		a2 80		ldx #$80	                ldx #$80
4186	.a10d		80 08		bra $a117	                bra LA0FB

4188	.a10f						LA0F3:
4189	.a10f		a9 01		lda #$01	                lda #$01
4190	.a111		8d c9 03	sta $03c9	                sta $03C9
4191	.a114		8e c8 03	stx $03c8	                stx $03C8
4192	.a117						LA0FB:
4193	.a117		8e ca 03	stx $03ca	                stx $03CA
4194	.a11a		20 03 a7	jsr $a703	                jsr LA6E9
4195	.a11d		30 78		bmi $a197	                bmi LA17B
4196	.a11f		20 9e a8	jsr $a89e	                jsr LA85B
4197	.a122		ee c6 03	inc $03c6	                inc $03C6
4198	.a125		d0 c8		bne $a0ef	                bne LA0D3
4199	.a127		ee c7 03	inc $03c7	                inc $03C7
4200	.a12a		80 c3		bra $a0ef	                bra LA0D3
4201							                .endif

4203							; TAPE/ROM FSC 2 - */
4204							; TAPE/ROM FSC 4 - *RUN
4205							; ---------------------
4206	.a12c						LA110:
4207	.a12c		38		sec		                sec
4208	.a12d		66 ce		ror $ce		                ror $CE
4209							; TAPE/ROM FSC 11 - *RUN command for library
4210							; ------------------------------------------
4211	.a12f						LA113:
4212	.a12f		da		phx		                phx
4213	.a130		5a		phy		                phy
4214	.a131		20 87 a0	jsr $a087	                jsr LA06B
4215	.a134		a9 00		lda #$00	                lda #$00
4216	.a136		a2 ff		ldx #$ff	                ldx #$FF
4217	.a138		8e c2 03	stx $03c2	                stx $03C2
4218	.a13b		20 cb 9f	jsr $9fcb	                jsr L9FAF
4219	.a13e		7a		ply		                ply
4220	.a13f		fa		plx		                plx
4221	.a140		90 08		bcc $a14a	                bcc LA12E
4222							                .if version!=400
4223	.a142		20 0c aa	jsr $aa0c	                jsr LA9CA
4224							                .endif

4226							; TAPE/ROM FSC 3 - unknown * command
4227							; ----------------------------------
4228	.a145						LA129:
4229	.a145		a9 0b		lda #$0b	                lda #$0B
4230	.a147		6c 1e 02	jmp ($021e)	                jmp (FSCV)

4232	.a14a						LA12E:
4233							                .if version<500
4234	.a14a		2c 7a 02	bit $027a	                bit tubePresence
4235	.a14d		10 09		bpl $a158	                bpl LA13C
4236	.a14f		ad c4 03	lda $03c4	                lda $03C4
4237	.a152		2d c5 03	and $03c5	                and $03C5
4238	.a155		1a		inc a		                inc a
4239	.a156		d0 10		bne $a168	                bne LA14C
4240	.a158						LA13C:
4241							                .endif

4243	.a158		ae c2 03	ldx $03c2	                ldx $03C2
4244	.a15b		ac c3 03	ldy $03c3	                ldy $03C3
4245	.a15e		a9 a4		lda #$a4	                lda #$A4
4246	.a160		20 f4 ff	jsr $fff4	                jsr OSBYTE
4247	.a163		a9 01		lda #$01	                lda #$01
4248	.a165		6c c2 03	jmp ($03c2)	                jmp ($03C2)

4250							                .if version<500
4251	.a168						LA14C:
4252	.a168		a2 c2		ldx #$c2	                ldx #$C2
4253	.a16a		a0 03		ldy #$03	                ldy #$03
4254	.a16c		a9 04		lda #$04	                lda #$04
4255	.a16e		4c f2 aa	jmp $aaf2	                jmp LAAB0
4256							                .endif

4258							; TAPE/ROM FSC 9 - *EX
4259							; --------------------
4260	.a171						LA155:
4261	.a171		a9 08		lda #$08	                lda #$08
4262	.a173		04 e2		tsb $e2		                tsb $E2
4263	.a175		a5 e3		lda $e3		                lda $E3
4264	.a177		48		pha		                pha
4265	.a178		09 cc		ora #$cc	                ora #$CC
4266	.a17a		85 e3		sta $e3		                sta $E3
4267	.a17c		20 35 aa	jsr $aa35	                jsr LA9F3
4268	.a17f		68		pla		                pla
4269	.a180		85 e3		sta $e3		                sta $E3
4270	.a182		80 07		bra $a18b	                bra LA16F

4272							; TAPE/ROM FSC 5 - *CAT
4273							; ---------------------
4274	.a184						LA168:
4275	.a184		a9 08		lda #$08	                lda #$08
4276	.a186		04 e2		tsb $e2		                tsb $E2
4277	.a188		20 35 aa	jsr $aa35	                jsr LA9F3
4278	.a18b						LA16F:
4279	.a18b		a9 00		lda #$00	                lda #$00
4280	.a18d		20 98 a1	jsr $a198	                jsr LA17C
4281							                .if version!=400
4282	.a190		20 0c aa	jsr $aa0c	                jsr LA9CA
4283							                .endif
4284	.a193						LA177:
4285	.a193		a9 08		lda #$08	                lda #$08
4286	.a195		14 e2		trb $e2		                trb $E2
4287	.a197						LA17B:
4288	.a197		60		rts		                rts

4290	.a198						LA17C:
4291	.a198		48		pha		                pha
4292							                .if version!=400
4293	.a199		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4294	.a19c		f0 09		beq $a1a7	                beq LA18B
4295							                .endif
4296	.a19e		20 e5 f3	jsr $f3e5	                jsr mos.LF6FC
4297	.a1a1		20 ea f3	jsr $f3ea	                jsr mos.LF701
4298	.a1a4		b8		clv		                clv
4299	.a1a5		b0 50		bcs $a1f7	                bcs LA1DB
4300	.a1a7						LA18B:
4301	.a1a7		20 92 a6	jsr $a692	                jsr LA678
4302	.a1aa		ad c6 03	lda $03c6	                lda $03C6
4303	.a1ad		85 b4		sta $b4		                sta $B4
4304	.a1af		ad c7 03	lda $03c7	                lda $03C7
4305	.a1b2		85 b5		sta $b5		                sta $B5
4306	.a1b4		a2 ff		ldx #$ff	                ldx #$FF
4307	.a1b6		8e df 03	stx $03df	                stx $03DF
4308	.a1b9		64 ba		stz $ba		                stz $BA
4309	.a1bb		80 16		bra $a1d3	                bra LA1B7

4311	.a1bd						LA1A1:
4312							                .if version!=400
4313	.a1bd		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4314	.a1c0		f0 37		beq $a1f9	                beq LA1DD
4315							                .endif
4316	.a1c2						LA1A6:
4317	.a1c2		20 00 f4	jsr $f400	                jsr mos.LF717
4318	.a1c5						LA1A9:
4319	.a1c5		a9 ff		lda #$ff	                lda #$FF
4320	.a1c7		8d c6 03	sta $03c6	                sta $03C6
4321	.a1ca		8d c7 03	sta $03c7	                sta $03C7
4322	.a1cd						LA1B1:
4323	.a1cd		20 77 aa	jsr $aa77	                jsr LAA35
4324	.a1d0		20 92 a6	jsr $a692	                jsr LA678
4325	.a1d3						LA1B7:
4326							                .if version!=400
4327	.a1d3		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4328	.a1d6		f0 02		beq $a1da	                beq LA1BE
4329							                .endif
4330	.a1d8		50 1d		bvc $a1f7	                bvc LA1DB
4331	.a1da						LA1BE:
4332	.a1da		68		pla		                pla
4333	.a1db		48		pha		                pha
4334	.a1dc		f0 1b		beq $a1f9	                beq LA1DD
4335	.a1de		20 9e a9	jsr $a99e	                jsr LA95C
4336	.a1e1		d0 da		bne $a1bd	                bne LA1A1
4337	.a1e3		a9 30		lda #$30	                lda #$30
4338	.a1e5		25 bb		and $bb		                and $BB
4339	.a1e7		f0 0e		beq $a1f7	                beq LA1DB
4340	.a1e9		ad c6 03	lda $03c6	                lda $03C6
4341	.a1ec		c5 b6		cmp $b6		                cmp $B6
4342	.a1ee		d0 cd		bne $a1bd	                bne LA1A1
4343	.a1f0		ad c7 03	lda $03c7	                lda $03C7
4344	.a1f3		c5 b7		cmp $b7		                cmp $B7
4345	.a1f5		d0 c6		bne $a1bd	                bne LA1A1
4346	.a1f7						LA1DB:
4347	.a1f7		68		pla		                pla
4348	.a1f8		60		rts		                rts

4350	.a1f9						LA1DD:
4351	.a1f9		50 05		bvc $a200	                bvc LA1E4
4352	.a1fb		a9 ff		lda #$ff	                lda #$FF
4353	.a1fd		20 ee a6	jsr $a6ee	                jsr LA6D4
4354	.a200						LA1E4:
4355	.a200		a2 00		ldx #$00	                ldx #$00
4356	.a202		20 06 a9	jsr $a906	                jsr LA8C4
4357							                .if version!=400
4358	.a205		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4359	.a208		f0 04		beq $a20e	                beq LA1F2
4360							                .endif
4361	.a20a		24 bb		bit $bb		                bit $BB
4362	.a20c		50 b4		bvc $a1c2	                bvc LA1A6
4363	.a20e						LA1F2:
4364	.a20e		2c ca 03	bit $03ca	                bit $03CA
4365	.a211		30 b2		bmi $a1c5	                bmi LA1A9
4366	.a213		80 b8		bra $a1cd	                bra LA1B1

4368							; CFS/RFS OSFIND HANDLER
4369							; ======================
4370	.a215						osfindTapeOrROM:
4371	.a215		85 bc		sta $bc		                sta $BC
4372	.a217		da		phx		                phx
4373	.a218		5a		phy		                phy
4374	.a219		09 00		ora #$00	                ora #$00
4375	.a21b		d0 1f		bne $a23c	                bne LA220
4376	.a21d		98		tya		                tya
4377	.a21e		d0 0e		bne $a22e	                bne LA212
4378							                .if version!=400
4379	.a220		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4380	.a223		d0 03		bne $a228	                bne LA20C
4381	.a225		20 b8 a2	jsr $a2b8	                jsr LA29C
4382							                .endif
4383	.a228						LA20C:
4384	.a228		a9 01		lda #$01	                lda #$01
4385	.a22a		14 e2		trb $e2		                trb $E2
4386							                .if version==400
4388							                .else
4389	.a22c		80 0c		bra $a23a	                bra LA21E
4390							                .endif
4391	.a22e						LA212:
4392	.a22e		4a		lsr a		                lsr a
4393	.a22f		b0 f7		bcs $a228	                bcs LA20C
4394							                .if version!=400
4395	.a231		4a		lsr a		                lsr a
4396	.a232		b0 03		bcs $a237	                bcs LA21B
4397							                .endif
4398	.a234		4c c3 aa	jmp $aac3	                jmp LAA81

4400							                .if version!=400
4401	.a237						LA21B:
4402	.a237		20 b8 a2	jsr $a2b8	                jsr LA29C
4403	.a23a						LA21E:
4404	.a23a		80 77		bra $a2b3	                bra LA297
4405							                .endif

4407	.a23c						LA220:
4408	.a23c		20 87 a0	jsr $a087	                jsr LA06B
4409	.a23f		24 bc		bit $bc		                bit $BC
4410	.a241		50 39		bvc $a27c	                bvc LA260
4411	.a243		9c 9e 03	stz $039e	                stz $039E
4412	.a246		9c dd 03	stz $03dd	                stz $03DD
4413	.a249		9c de 03	stz $03de	                stz $03DE
4414	.a24c		a9 c1		lda #$c1	                lda #$C1
4415	.a24e		14 e2		trb $e2		                trb $E2
4416	.a250		20 28 aa	jsr $aa28	                jsr LA9E6
4417	.a253		08		php		                php
4418	.a254		20 1c a5	jsr $a51c	                jsr LA502
4419	.a257		20 d1 a5	jsr $a5d1	                jsr LA5B7
4420	.a25a		28		plp		                plp
4421	.a25b		a2 ff		ldx #$ff	                ldx #$FF
4422	.a25d						LA241:
4423	.a25d		e8		inx		                inx
4424	.a25e		bd b2 03	lda $03b2,x	                lda $03B2,x
4425	.a261		9d a7 03	sta $03a7,x	                sta $03A7,x
4426	.a264		d0 f7		bne $a25d	                bne LA241
4427	.a266		1a		inc a		                inc a
4428	.a267		04 e2		tsb $e2		                tsb $E2
4429	.a269		ad e9 02	lda $02e9	                lda tapeInputCurrentBlockSize+0
4430	.a26c		0d ea 02	ora $02ea	                ora tapeInputCurrentBlockSize+1
4431	.a26f		d0 04		bne $a275	                bne LA259
4432	.a271		a9 40		lda #$40	                lda #$40
4433	.a273		04 e2		tsb $e2		                tsb $E2
4434	.a275						LA259:
4435							                .if version==400
4440							                .else
4441	.a275		a9 01		lda #$01	                lda #$01
4442	.a277		0d 47 02	ora $0247	                ora cfsRFSFSSwitch
4443	.a27a		d0 35		bne $a2b1	                bne LA295
4444	.a27c						LA260:
4445	.a27c		8a		txa		                txa
4446	.a27d		d0 03		bne $a282	                bne LA266
4447	.a27f		4c 10 f2	jmp $f210	                jmp mos.badStringError

4449	.a282						LA266:
4450	.a282		a2 ff		ldx #$ff	                ldx #$FF
4451	.a284						LA268:
4452	.a284		e8		inx		                inx
4453	.a285		bd d2 03	lda $03d2,x	                lda $03D2,x
4454	.a288		9d 80 03	sta $0380,x	                sta $0380,x
4455	.a28b		d0 f7		bne $a284	                bne LA268
4456	.a28d		3a		dec a		                dec a
4457	.a28e		a2 08		ldx #$08	                ldx #$08
4458	.a290						LA274:
4459	.a290		9d 8b 03	sta $038b,x	                sta $038B,x
4460	.a293		ca		dex		                dex
4461	.a294		d0 fa		bne $a290	                bne LA274
4462	.a296		8a		txa		                txa
4463	.a297		a2 14		ldx #$14	                ldx #$14
4464	.a299						LA27D:
4465	.a299		9d 80 03	sta $0380,x	                sta $0380,x
4466	.a29c		e8		inx		                inx
4467	.a29d		e0 1e		cpx #$1e	                cpx #$1E
4468	.a29f		d0 f8		bne $a299	                bne LA27D
4469	.a2a1		2e 97 03	rol $0397	                rol $0397
4470	.a2a4		20 35 aa	jsr $aa35	                jsr LA9F3
4471	.a2a7		20 3c a8	jsr $a83c	                jsr LA822
4472	.a2aa		20 fd a9	jsr $a9fd	                jsr LA9BB
4473	.a2ad		a9 02		lda #$02	                lda #$02
4474	.a2af		04 e2		tsb $e2		                tsb $E2
4475							                .endif
4476	.a2b1						LA295:
4477	.a2b1		85 bc		sta $bc		                sta $BC
4478	.a2b3						LA297:
4479	.a2b3		7a		ply		                ply
4480	.a2b4		fa		plx		                plx
4481	.a2b5		a5 bc		lda $bc		                lda $BC
4482	.a2b7						LA29B:
4483	.a2b7		60		rts		                rts

4485							                .if version!=400
4486	.a2b8						LA29C:
4487	.a2b8		a9 02		lda #$02	                lda #$02
4488	.a2ba		25 e2		and $e2		                and $E2
4489	.a2bc		f0 f9		beq $a2b7	                beq LA29B
4490	.a2be		9c 97 03	stz $0397	                stz $0397
4491	.a2c1		a9 80		lda #$80	                lda #$80
4492	.a2c3		ae 9d 03	ldx $039d	                ldx $039D
4493	.a2c6		8e 96 03	stx $0396	                stx $0396
4494	.a2c9		8d 98 03	sta $0398	                sta $0398
4495	.a2cc		20 d4 a2	jsr $a2d4	                jsr LA2B8
4496	.a2cf		a9 02		lda #$02	                lda #$02
4497	.a2d1		14 e2		trb $e2		                trb $E2
4498	.a2d3		60		rts		                rts

4500	.a2d4						LA2B8:
4501	.a2d4		20 28 aa	jsr $aa28	                jsr LA9E6
4502	.a2d7		a2 11		ldx #$11	                ldx #$11
4503	.a2d9						LA2BD:
4504	.a2d9		bd 8c 03	lda $038c,x	                lda $038C,x
4505	.a2dc		9d be 03	sta $03be,x	                sta $03BE,x
4506	.a2df		ca		dex		                dex
4507	.a2e0		10 f7		bpl $a2d9	                bpl LA2BD
4508	.a2e2		86 b2		stx $b2		                stx $B2
4509	.a2e4		86 b3		stx $b3		                stx $B3
4510	.a2e6		64 b0		stz $b0		                stz $B0
4511	.a2e8		a9 09		lda #$09	                lda #$09
4512	.a2ea		85 b1		sta $b1		                sta $B1
4513	.a2ec		a2 7f		ldx #$7f	                ldx #$7F
4514	.a2ee		20 8f aa	jsr $aa8f	                jsr LAA4D
4515	.a2f1		8d df 03	sta $03df	                sta $03DF
4516	.a2f4		20 9c aa	jsr $aa9c	                jsr LAA5A
4517	.a2f7		20 e2 aa	jsr $aae2	                jsr LAAA0
4518	.a2fa		20 03 a7	jsr $a703	                jsr LA6E9
4519	.a2fd		ee 94 03	inc $0394	                inc $0394
4520	.a300		d0 03		bne $a305	                bne LA2E9
4521	.a302		ee 95 03	inc $0395	                inc $0395
4522	.a305						LA2E9:
4523	.a305		60		rts		                rts
4524							                .endif

4526	.a306						bputTapeOrROM:
4527	.a306		da		phx		                phx
4528	.a307		5a		phy		                phy
4529	.a308		a9 01		lda #$01	                lda #$01
4530	.a30a						LA2EE:
4531	.a30a		20 aa aa	jsr $aaaa	                jsr LAA68
4532	.a30d		a5 e2		lda $e2		                lda $E2
4533	.a30f		0a		asl a		                asl a
4534	.a310		b0 4d		bcs $a35f	                bcs LA343
4535	.a312		0a		asl a		                asl a
4536	.a313		90 08		bcc $a31d	                bcc LA301
4537	.a315		a9 80		lda #$80	                lda #$80
4538	.a317		04 e2		tsb $e2		                tsb $E2
4539	.a319		a9 fe		lda #$fe	                lda #$FE
4540	.a31b		b0 3a		bcs $a357	                bcs LA33B
4541	.a31d						LA301:
4542	.a31d		ae 9e 03	ldx $039e	                ldx $039E
4543	.a320		e8		inx		                inx
4544	.a321		ec e9 02	cpx $02e9	                cpx tapeInputCurrentBlockSize+0
4545	.a324		d0 2c		bne $a352	                bne LA336
4546	.a326		2c eb 02	bit $02eb	                bit blockFlagOfCurrentlyResidentBlock
4547	.a329		30 23		bmi $a34e	                bmi LA332
4548	.a32b		ad ec 02	lda $02ec	                lda lastCharacterOfCurrentlyResidentBlock
4549	.a32e		48		pha		                pha
4550	.a32f		20 28 aa	jsr $aa28	                jsr LA9E6
4551	.a332		08		php		                php
4552	.a333		20 c9 a5	jsr $a5c9	                jsr LA5AF
4553	.a336		28		plp		                plp
4554	.a337		68		pla		                pla
4555	.a338		85 bc		sta $bc		                sta $BC
4556	.a33a		18		clc		                clc
4557	.a33b		2c eb 02	bit $02eb	                bit blockFlagOfCurrentlyResidentBlock
4558	.a33e		10 19		bpl $a359	                bpl LA33D
4559	.a340		ad e9 02	lda $02e9	                lda tapeInputCurrentBlockSize+0
4560	.a343		0d ea 02	ora $02ea	                ora tapeInputCurrentBlockSize+1
4561	.a346		d0 11		bne $a359	                bne LA33D
4562	.a348		a9 40		lda #$40	                lda #$40
4563	.a34a		04 e2		tsb $e2		                tsb $E2
4564	.a34c		80 0b		bra $a359	                bra LA33D

4566	.a34e						LA332:
4567	.a34e		a9 40		lda #$40	                lda #$40
4568	.a350		04 e2		tsb $e2		                tsb $E2
4569	.a352						LA336:
4570	.a352		ca		dex		                dex
4571	.a353		18		clc		                clc
4572	.a354		bd 00 0a	lda $0a00,x	                lda $0A00,x
4573	.a357						LA33B:
4574	.a357		85 bc		sta $bc		                sta $BC
4575	.a359						LA33D:
4576	.a359		ee 9e 03	inc $039e	                inc $039E
4577	.a35c		4c b3 a2	jmp $a2b3	                jmp LA297

4579	.a35f						LA343:
4580	.a35f		20 2f ab	jsr $ab2f	                jsr doFollowingError
4581	>a362		df 45 4f 46 00			                .text $df,"EOF",0

4583							                .if version==400
4591							                .endif

4593							                .if version!=400
4594	.a367						bgetTapeOrROM:
4595	.a367		85 c4		sta $c4		                sta $C4
4596	.a369		da		phx		                phx
4597	.a36a		5a		phy		                phy
4598	.a36b		a9 02		lda #$02	                lda #$02
4599	.a36d		20 aa aa	jsr $aaaa	                jsr LAA68
4600	.a370		ae 9d 03	ldx $039d	                ldx $039D
4601	.a373		a5 c4		lda $c4		                lda $C4
4602	.a375		9d 00 09	sta $0900,x	                sta $0900,x
4603	.a378		e8		inx		                inx
4604	.a379		d0 06		bne $a381	                bne LA365
4605	.a37b		20 d4 a2	jsr $a2d4	                jsr LA2B8
4606	.a37e		20 fd a9	jsr $a9fd	                jsr LA9BB
4607	.a381						LA365:
4608	.a381		ee 9d 03	inc $039d	                inc $039D
4609	.a384		a5 c4		lda $c4		                lda $C4
4610	.a386		4c b1 a2	jmp $a2b1	                jmp LA295
4611							                .endif

4613							                .if version!=400
4614							; TAPE/ROM OSGBPB handler
4615							; =======================
4616	.a389						osgbpbTapeOrROM:
4617	.a389		4a		lsr a		                lsr a                        ; Odd numbered calls - change PTR - exit with A=changed, SEC
4618	.a38a		b0 06		bcs $a392	                bcs LA376
4619	.a38c		f0 04		beq $a392	                beq LA376                    ; OSGBPB 0 - exit with A=unchanged, SEC
4620	.a38e		c9 03		cmp #$03	                cmp #$03                     ; function/2<3 - function<6 - function 2 and 4 - jump to do
4621	.a390		90 02		bcc $a394	                bcc LA378
4622	.a392						LA376:
4623	.a392		38		sec		                sec
4624	.a393		60		rts		                rts
4625							                .endif

4627							; Call Return
4628							;  0    A=0   SEC                        - unsupported
4629							;  1    A=0   SEC  Write using new PTR   - unsupported
4630							;  2    A=         Write with current PTR
4631							;  3    A=1   SEC  Read with new PTR     - unsupported
4632							;  4    A=         Read with current PTR
4633							;  5+   A=A/2 SEC                        - unsupported

4635							; TAPE/ROM OSGBPB 2 and 4 - read/write with current PTR
4636							; -----------------------------------------------------
4637	.a394						LA378:
4638							                .if version!=400
4639	.a394		4a		lsr a		                lsr a
4640							                .endif
4641	.a395		86 cc		stx $cc		                stx $CC
4642	.a397		84 cd		sty $cd		                sty $CD
4643	.a399		a0 01		ldy #$01	                ldy #$01
4644	.a39b		b1 cc		lda ($cc),y	                lda ($CC),y
4645	.a39d		85 c8		sta $c8		                sta $C8
4646	.a39f		c8		iny		                iny
4647	.a3a0		b1 cc		lda ($cc),y	                lda ($CC),y
4648	.a3a2		85 c9		sta $c9		                sta $C9
4649							                .if version<500
4650	.a3a4		c8		iny		                iny
4651	.a3a5		b1 cc		lda ($cc),y	                lda ($CC),y
4652	.a3a7		c8		iny		                iny
4653	.a3a8		31 cc		and ($cc),y	                and ($CC),y
4654	.a3aa		1a		inc a		                inc a
4655	.a3ab		2d 7a 02	and $027a	                and tubePresence
4656	.a3ae		48		pha		                pha
4657							                .if version!=400
4658	.a3af		08		php		                php
4659							                .endif
4660	.a3b0		f0 0f		beq $a3c1	                beq LA3A7
4661	.a3b2		a6 cc		ldx $cc		                ldx $CC
4662	.a3b4		a4 cd		ldy $cd		                ldy $CD
4663	.a3b6		e8		inx		                inx
4664	.a3b7		d0 01		bne $a3ba	                bne LA39E
4665	.a3b9		c8		iny		                iny
4666	.a3ba						LA39E:
4667							                .if version==400
4669							                .elsif version==350
4670	.a3ba		a9 01		lda #$01	                lda #1
4671	.a3bc		e9 00		sbc #$00	                sbc #0
4677							                .endif
4678	.a3be		20 f2 aa	jsr $aaf2	                jsr LAAB0
4679	.a3c1						LA3A7:
4680							                .endif
4681	.a3c1		b2 cc		lda ($cc)	                lda ($CC)
4682	.a3c3		a8		tay		                tay
4683	.a3c4		a9 01		lda #$01	                lda #$01
4684							                .if version!=400
4685							                .if version<500
4686	.a3c6		28		plp		                plp
4687							                .endif
4688	.a3c7		08		php		                php
4689	.a3c8		69 00		adc #$00	                adc #$00
4690							                .endif
4691	.a3ca		20 cf aa	jsr $aacf	                jsr LAA8D
4692	.a3cd		b0 0c		bcs $a3db	                bcs LA3C1
4693							                .if version!=400
4694	.a3cf		28		plp		                plp
4695							                .endif
4696							                .if version<500
4697	.a3d0		68		pla		                pla
4698	.a3d1		f0 05		beq $a3d8	                beq LA3BE
4699	.a3d3		a9 80		lda #$80	                lda #$80
4700	.a3d5		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
4701	.a3d8						LA3BE:
4702							                .endif
4703	.a3d8		4c c3 aa	jmp $aac3	                jmp LAA81

4705	.a3db						LA3C1:
4706							                .if version!=400
4707	.a3db		28		plp		                plp
4708	.a3dc		b0 3d		bcs $a41b	                bcs LA401
4709							                .endif
4710	.a3de		24 e2		bit $e2		                bit $E2
4711	.a3e0		10 0b		bpl $a3ed	                bpl LA3D3
4712							                .if version<500
4713	.a3e2		68		pla		                pla
4714	.a3e3		f0 05		beq $a3ea	                beq LA3D0
4715	.a3e5		a9 80		lda #$80	                lda #$80
4716	.a3e7		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
4717	.a3ea						LA3D0:
4718							                .endif
4719	.a3ea		4c 5f a3	jmp $a35f	                jmp LA343

4721	.a3ed						LA3D3:
4722	.a3ed		20 22 ab	jsr $ab22	                jsr LAAE0
4723	.a3f0		f0 1e		beq $a410	                beq LA3F6
4724	.a3f2		b2 cc		lda ($cc)	                lda ($CC)
4725	.a3f4		a8		tay		                tay
4726	.a3f5		20 06 a3	jsr $a306	                jsr bputTapeOrROM
4727	.a3f8		b0 16		bcs $a410	                bcs LA3F6
4728							                .if version<500
4729	.a3fa		fa		plx		                plx
4730	.a3fb		da		phx		                phx
4731	.a3fc		f0 05		beq $a403	                beq LA3E9
4732	.a3fe		8d e5 fe	sta $fee5	                sta tube.data3
4733	.a401		80 08		bra $a40b	                bra LA3F1

4735	.a403						LA3E9:
4736							                .endif
4737	.a403		92 c8		sta ($c8)	                sta ($C8)
4738	.a405		e6 c8		inc $c8		                inc $C8
4739	.a407		d0 02		bne $a40b	                bne LA3F1
4740	.a409		e6 c9		inc $c9		                inc $C9
4741	.a40b						LA3F1:
4742	.a40b		20 0c ab	jsr $ab0c	                jsr LAACA
4743	.a40e		80 dd		bra $a3ed	                bra LA3D3

4745	.a410						LA3F6:
4746							                .if version<500
4747	.a410		68		pla		                pla
4748	.a411		08		php		                php
4749	.a412		f0 05		beq $a419	                beq LA3FF
4750	.a414		a9 80		lda #$80	                lda #$80
4751	.a416		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
4752	.a419						LA3FF:
4753	.a419		28		plp		                plp
4754							                .endif
4755	.a41a		60		rts		                rts

4757							                .if version!=400
4758	.a41b						LA401:
4759	.a41b		20 22 ab	jsr $ab22	                jsr LAAE0
4760	.a41e		f0 f0		beq $a410	                beq LA3F6
4761	.a420		b2 cc		lda ($cc)	                lda ($CC)
4762	.a422		a8		tay		                tay
4763							                .if version<500
4764	.a423		68		pla		                pla
4765	.a424		48		pha		                pha
4766	.a425		f0 05		beq $a42c	                beq LA412
4767	.a427		ad e5 fe	lda $fee5	                lda tube.data3
4768	.a42a		80 08		bra $a434	                bra LA41A
4769	.a42c						LA412:
4770							                .endif

4772	.a42c		b2 c8		lda ($c8)	                lda ($C8)
4773	.a42e		e6 c8		inc $c8		                inc $C8
4774	.a430		d0 02		bne $a434	                bne LA41A
4775	.a432		e6 c9		inc $c9		                inc $C9
4776	.a434						LA41A:
4777	.a434		20 67 a3	jsr $a367	                jsr bgetTapeOrROM
4778	.a437		20 0c ab	jsr $ab0c	                jsr LAACA
4779	.a43a		80 df		bra $a41b	                bra LA401
4780							                .endif

4782							; TAPE/ROM FSC 0 - *OPT
4783							; ---------------------
4784	.a43c						LA422:
4785	.a43c		8a		txa		                txa                          ; *OPT 0
4786	.a43d		f0 2e		beq $a46d	                beq LA453
4787	.a43f		e0 03		cpx #$03	                cpx #$03                     ; *OPT 3
4788	.a441		f0 1f		beq $a462	                beq LA448
4789	.a443		c0 03		cpy #$03	                cpy #$03                     ; *OPT n,3+ - error Bad command (*BUG* should be Bad option)
4790	.a445		b0 06		bcs $a44d	                bcs LA433
4791	.a447		ca		dex		                dex                          ; *OPT 1
4792	.a448		f0 06		beq $a450	                beq LA436
4793	.a44a		ca		dex		                dex                          ; *OPT 2
4794	.a44b		f0 0a		beq $a457	                beq LA43D
4795	.a44d						LA433:
4796	.a44d		4c 37 f9	jmp $f937	                jmp mos.badCommandError ; *OPT 4+ - error Bad command (*BUG* should be Bad option)

4798							; *OPT 1 - set message level
4799							; --------------------------
4800	.a450						LA436:
4801	.a450		a9 33		lda #$33	                lda #$33
4802	.a452		c8		iny		                iny
4803	.a453		c8		iny		                iny
4804	.a454		c8		iny		                iny
4805	.a455		80 02		bra $a459	                bra LA43F

4807							; *OPT 2 - set error response level
4808							; ---------------------------------
4809	.a457						LA43D:
4810	.a457		a9 cc		lda #$cc	                lda #$CC
4811	.a459						LA43F:
4812	.a459		c8		iny		                iny
4813	.a45a		25 e3		and $e3		                and $E3
4814	.a45c						LA442:
4815	.a45c		19 70 a4	ora $a470,y	                ora LA456,y
4816	.a45f		85 e3		sta $e3		                sta $E3
4817	.a461		60		rts		                rts

4819							; *OPT 3 - set interblock gap
4820							; ---------------------------
4821	.a462						LA448:
4822	.a462		98		tya		                tya                          ; *OPT 3,128+ - set to default
4823	.a463		30 02		bmi $a467	                bmi LA44D    ;
4824	.a465		d0 02		bne $a469	                bne LA44F                    ; *OPT 3,<>0 - use setting
4825	.a467						LA44D:
4826	.a467		a9 19		lda #$19	                lda #$19                     ; *OPT 3,0 or *OPT 3,128+ - use default of 2.5 sec
4827	.a469						LA44F:
4828	.a469		8d d1 03	sta $03d1	                sta $03D1                    ; Set inter-block gap
4829	.a46c		60		rts		                rts

4831	.a46d						LA453:
4832	.a46d		a8		tay		                tay
4833	.a46e		80 ec		bra $a45c	                bra LA442

4835	.a470						LA456:
4836							                ; LDA ($00,x)
4837							                ; EQUB $22
4838							                ; ORA ($00),y
4839							                ; DEY
4840							                ; CPY LC0C6
4841	>a470		a1				                .byte $A1
4842	>a471		00				                .byte $00
4843	>a472		22				                .byte $22
4844	>a473		11				                .byte $11
4845	>a474		00				                .byte $00
4846	>a475		88				                .byte $88
4847	>a476		cc				                .byte $CC

4849							                .if version!=400
4850	.a477						LA45D:
4851	.a477		c6 c0		dec $c0		                dec $C0
4852	.a479		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4853	.a47c		f0 07		beq $a485	                beq LA46B
4854	.a47e		20 f9 f3	jsr $f3f9	                jsr mos.LF710
4855	.a481		a8		tay		                tay
4856	.a482		18		clc		                clc
4857	.a483		80 1a		bra $a49f	                bra LA485

4859	.a485						LA46B:
4860	.a485		ad 08 fe	lda $fe08	                lda ACIA+0
4861	.a488		48		pha		                pha
4862	.a489		29 02		and #$02	                and #$02
4863	.a48b		f0 0b		beq $a498	                beq LA47E
4864	.a48d		a4 ca		ldy $ca		                ldy $CA
4865	.a48f		f0 07		beq $a498	                beq LA47E
4866	.a491		68		pla		                pla
4867	.a492		a5 bd		lda $bd		                lda $BD
4868	.a494		8d 09 fe	sta $fe09	                sta ACIA+1
4869	.a497		60		rts		                rts

4871	.a498						LA47E:
4872	.a498		ac 09 fe	ldy $fe09	                ldy ACIA+1
4873	.a49b		68		pla		                pla
4874	.a49c		4a		lsr a		                lsr a
4875	.a49d		4a		lsr a		                lsr a
4876	.a49e		4a		lsr a		                lsr a
4877	.a49f						LA485:
4878	.a49f		a6 c2		ldx $c2		                ldx $C2
4879	.a4a1		f0 67		beq $a50a	                beq LA4F0
4880	.a4a3		ca		dex		                dex
4881	.a4a4		d0 06		bne $a4ac	                bne LA492
4882	.a4a6		90 62		bcc $a50a	                bcc LA4F0
4883	.a4a8		a0 02		ldy #$02	                ldy #$02
4884	.a4aa		80 5c		bra $a508	                bra LA4EE
4885							                .endif

4887	.a4ac						LA492:
4888							                .if version==400
4897							                .else
4898	.a4ac		ca		dex		                dex
4899	.a4ad		d0 13		bne $a4c2	                bne LA4A8
4900	.a4af		b0 59		bcs $a50a	                bcs LA4F0
4901							                .endif
4902	.a4b1		98		tya		                tya
4903	.a4b2		20 86 aa	jsr $aa86	                jsr LAA44
4904	.a4b5		a0 03		ldy #$03	                ldy #$03
4905	.a4b7		c9 2a		cmp #$2a	                cmp #$2A
4906	.a4b9		f0 4d		beq $a508	                beq LA4EE
4907	.a4bb		20 5e aa	jsr $aa5e	                jsr LAA1C
4908	.a4be		a0 01		ldy #$01	                ldy #$01
4909	.a4c0		80 46		bra $a508	                bra LA4EE

4911	.a4c2						LA4A8:
4912	.a4c2		ca		dex		                dex
4913	.a4c3		d0 0a		bne $a4cf	                bne LA4B5
4914							                .if version!=400
4915	.a4c5		b0 03		bcs $a4ca	                bcs LA4B0
4916							                .endif
4917	.a4c7		84 bd		sty $bd		                sty $BD
4918	.a4c9		60		rts		                rts

4920							                .if version!=400
4921	.a4ca						LA4B0:
4922	.a4ca		a9 80		lda #$80	                lda #$80
4923	.a4cc		85 c0		sta $c0		                sta $C0
4924	.a4ce		60		rts		                rts
4925							                .endif

4927	.a4cf						LA4B5:
4928	.a4cf		ca		dex		                dex
4929	.a4d0		d0 29		bne $a4fb	                bne LA4E1
4930							                .if version!=400
4931	.a4d2		b0 2f		bcs $a503	                bcs LA4E9
4932							                .endif
4933	.a4d4		98		tya		                tya
4934	.a4d5		20 c3 a6	jsr $a6c3	                jsr LA6A9
4935	.a4d8		a4 bc		ldy $bc		                ldy $BC
4936	.a4da		e6 bc		inc $bc		                inc $BC
4937	.a4dc		24 bd		bit $bd		                bit $BD
4938	.a4de		30 0d		bmi $a4ed	                bmi LA4D3
4939							                .if version<500
4940	.a4e0		20 fe aa	jsr $aafe	                jsr LAABC
4941	.a4e3		f0 05		beq $a4ea	                beq LA4D0
4942	.a4e5		8e e5 fe	stx $fee5	                stx tube.data3
4943	.a4e8		80 03		bra $a4ed	                bra LA4D3

4945	.a4ea						LA4D0:
4946	.a4ea		8a		txa		                txa
4947							                .endif
4948	.a4eb		91 b0		sta ($b0),y	                sta ($B0),y
4949	.a4ed						LA4D3:
4950	.a4ed		c8		iny		                iny
4951	.a4ee		cc c8 03	cpy $03c8	                cpy $03C8
4952	.a4f1		d0 17		bne $a50a	                bne LA4F0
4953	.a4f3		a9 01		lda #$01	                lda #$01
4954	.a4f5		85 bc		sta $bc		                sta $BC
4955	.a4f7		a0 05		ldy #$05	                ldy #$05
4956	.a4f9		80 0d		bra $a508	                bra LA4EE

4958	.a4fb						LA4E1:
4959	.a4fb		98		tya		                tya
4960	.a4fc		20 c3 a6	jsr $a6c3	                jsr LA6A9
4961	.a4ff		c6 bc		dec $bc		                dec $BC
4962	.a501		10 07		bpl $a50a	                bpl LA4F0
4963							                .if version!=400
4964	.a503						LA4E9:
4965	.a503		20 54 aa	jsr $aa54	                jsr resetACIA
4966							                .endif
4967	.a506		a0 00		ldy #$00	                ldy #$00
4968	.a508						LA4EE:
4969	.a508		84 c2		sty $c2		                sty $C2
4970	.a50a						LA4F0:
4971	.a50a		60		rts		                rts

4973							; TAPE/ROM FSC 1 - =EOF
4974							; ---------------------
4975	.a50b						LA4F1:
4976	.a50b		48		pha		                pha
4977	.a50c		5a		phy		                phy
4978	.a50d		8a		txa		                txa
4979	.a50e		a8		tay		                tay
4980	.a50f		a9 03		lda #$03	                lda #$03                     ; Check if this channel is open for anything
4981	.a511		20 aa aa	jsr $aaaa	                jsr LAA68
4982	.a514		a5 e2		lda $e2		                lda $E2                      ; Get EOF flag
4983	.a516		29 40		and #$40	                and #$40
4984	.a518		aa		tax		                tax                          ; Return in X
4985	.a519		7a		ply		                ply
4986	.a51a		68		pla		                pla
4987	.a51b		60		rts		                rts

4989	.a51c						LA502:
4990	.a51c		64 b4		stz $b4		                stz $B4
4991	.a51e		64 b5		stz $b5		                stz $B5
4992	.a520						LA506:
4993	.a520		46 ce		lsr $ce		                lsr $CE
4994	.a522		a5 b4		lda $b4		                lda $B4
4995	.a524		48		pha		                pha
4996	.a525		85 b6		sta $b6		                sta $B6
4997	.a527		a5 b5		lda $b5		                lda $B5
4998	.a529		48		pha		                pha
4999	.a52a		85 b7		sta $b7		                sta $B7
5000	.a52c		20 65 a9	jsr $a965	                jsr LA923
5001	>a52f		53 65 61 72 63 68 69 6e		                .text "Searching",13,0
	>a537		67 0d 00
5002	.a53a		a9 ff		lda #$ff	                lda #$ff
5003	.a53c		20 98 a1	jsr $a198	                jsr LA17C
5004	.a53f		68		pla		                pla
5005	.a540		85 b5		sta $b5		                sta $B5
5006	.a542		68		pla		                pla
5007	.a543		85 b4		sta $b4		                sta $B4
5008	.a545		a5 b6		lda $b6		                lda $B6
5009	.a547		05 b7		ora $b7		                ora $B7
5010	.a549		d0 33		bne $a57e	                bne LA564
5011	.a54b		64 b4		stz $b4		                stz $B4
5012	.a54d		64 b5		stz $b5		                stz $B5
5013							                .if version!=400
5014	.a54f		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5015	.a552		f0 21		beq $a575	                beq LA55B
5016							                .endif
5017	.a554		70 1f		bvs $a575	                bvs LA55B
5018							                .if version!=400
5019	.a556		20 0c aa	jsr $aa0c	                jsr LA9CA
5020							                .endif
5021	.a559		24 ce		bit $ce		                bit $CE
5022	.a55b		50 0a		bvc $a567	                bvc notFoundError
5023	.a55d		38		sec		                sec
5024	.a55e						rtsA544:
5025	.a55e		60		rts		                rts

5027							;-------------------------------------------------------------------------

5029	.a55f						openFileForReading:
5030	.a55f		a9 40		lda #$40	                lda #$40                     ;open for reading
5031	.a561		20 ce ff	jsr $ffce	                jsr OSFIND
5032	.a564		a8		tay		                tay
5033	.a565		d0 f7		bne $a55e	                bne rtsA544
5034	.a567						notFoundError:
5035	.a567		20 2f ab	jsr $ab2f	                jsr doFollowingError
5036	>a56a		d6 4e 6f 74 20 66 6f 75		                .text $d6,"Not found",0
	>a572		6e 64 00

5038							;-------------------------------------------------------------------------

5040	.a575						LA55B:
5041	.a575		a5 c1		lda $c1		                lda $C1
5042	.a577		d0 05		bne $a57e	                bne LA564
5043	.a579		a2 b1		ldx #$b1	                ldx #$B1
5044	.a57b		20 8f aa	jsr $aa8f	                jsr LAA4D
5045	.a57e						LA564:
5046	.a57e		a0 ff		ldy #$ff	                ldy #$FF
5047	.a580		8c df 03	sty $03df	                sty $03DF
5048	.a583		18		clc		                clc
5049	.a584		60		rts		                rts

5051	.a585						LA56B:
5052	.a585		f0 17		beq $a59e	                beq LA584
5053	.a587		48		pha		                pha
5054	.a588		a9 07		lda #$07	                lda #fscFileHandleRange
5055	.a58a		20 5e f1	jsr $f15e	                jsr mos.callFSCV
5056	.a58d		68		pla		                pla
5057	.a58e		18		clc		                clc
5058	.a58f		08		php		                php
5059	.a590		78		sei		                sei
5060	.a591		85 fa		sta $fa		                sta $FA
5061	.a593		c4 fa		cpy $fa		                cpy $FA
5062	.a595		90 06		bcc $a59d	                bcc LA583
5063	.a597		e4 fa		cpx $fa		                cpx $FA
5064	.a599		90 06		bcc $a5a1	                bcc LA587
5065	.a59b		f0 04		beq $a5a1	                beq LA587
5066	.a59d						LA583:
5067	.a59d		28		plp		                plp
5068	.a59e						LA584:
5069	.a59e		68		pla		                pla
5070	.a59f		68		pla		                pla
5071	.a5a0		60		rts		                rts

5073	.a5a1						LA587:
5074	.a5a1		28		plp		                plp
5075	.a5a2		a9 00		lda #$00	                lda #$00
5076	.a5a4		60		rts		                rts

5078	.a5a5						LA58B:
5079	.a5a5		ad 56 02	lda $0256	                lda execFileHandle
5080	.a5a8		20 85 a5	jsr $a585	                jsr LA56B
5081	.a5ab						starEXEC:
5082	.a5ab		08		php		                php
5083	.a5ac		5a		phy		                phy
5084	.a5ad		ac 56 02	ldy $0256	                ldy execFileHandle
5085	.a5b0		8d 56 02	sta $0256	                sta execFileHandle
5086	.a5b3		f0 03		beq $a5b8	                beq LA59E
5087	.a5b5		20 ce ff	jsr $ffce	                jsr OSFIND
5088	.a5b8						LA59E:
5089	.a5b8		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
5090	.a5bb		7a		ply		                ply
5091	.a5bc		28		plp		                plp
5092	.a5bd		f0 09		beq $a5c8	                beq LA5AE
5093	.a5bf		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
5094	.a5c2		20 5f a5	jsr $a55f	                jsr openFileForReading
5095	.a5c5		8d 56 02	sta $0256	                sta execFileHandle
5096	.a5c8						LA5AE:
5097	.a5c8		60		rts		                rts

5099	.a5c9						LA5AF:
5100	.a5c9		a2 a6		ldx #$a6	                ldx #$A6
5101	.a5cb		20 8f aa	jsr $aa8f	                jsr LAA4D
5102	.a5ce		20 92 a6	jsr $a692	                jsr LA678
5103	.a5d1						LA5B7:
5104	.a5d1		ad ca 03	lda $03ca	                lda $03CA
5105	.a5d4		4a		lsr a		                lsr a
5106	.a5d5		90 03		bcc $a5da	                bcc LA5C0
5107	.a5d7		4c ff 9f	jmp $9fff	                jmp L9FE3

5109	.a5da						LA5C0:
5110	.a5da		ad dd 03	lda $03dd	                lda $03DD
5111	.a5dd		85 b4		sta $b4		                sta $B4
5112	.a5df		ad de 03	lda $03de	                lda $03DE
5113	.a5e2		85 b5		sta $b5		                sta $B5
5114	.a5e4		64 b0		stz $b0		                stz $B0
5115	.a5e6		a9 0a		lda #$0a	                lda #$0A
5116	.a5e8		85 b1		sta $b1		                sta $B1
5117	.a5ea		a9 ff		lda #$ff	                lda #$FF
5118	.a5ec		85 b2		sta $b2		                sta $B2
5119	.a5ee		85 b3		sta $b3		                sta $B3
5120	.a5f0		20 ec a6	jsr $a6ec	                jsr LA6D2
5121	.a5f3		20 e3 a8	jsr $a8e3	                jsr LA8A1
5122	.a5f6		d0 25		bne $a61d	                bne LA603
5123	.a5f8		ad ff 0a	lda $0aff	                lda $0AFF
5124	.a5fb		8d ec 02	sta $02ec	                sta lastCharacterOfCurrentlyResidentBlock
5125	.a5fe		20 77 aa	jsr $aa77	                jsr LAA35
5126	.a601		8e dd 03	stx $03dd	                stx $03DD
5127	.a604		8c de 03	sty $03de	                sty $03DE
5128	.a607		a2 02		ldx #$02	                ldx #$02
5129	.a609						LA5EF:
5130	.a609		bd c8 03	lda $03c8,x	                lda $03C8,x
5131	.a60c		9d e9 02	sta $02e9,x	                sta tapeInputCurrentBlockSize+0,x
5132	.a60f		ca		dex		                dex
5133	.a610		10 f7		bpl $a609	                bpl LA5EF
5134	.a612		2c eb 02	bit $02eb	                bit blockFlagOfCurrentlyResidentBlock
5135	.a615		10 03		bpl $a61a	                bpl LA600
5136	.a617		20 75 a0	jsr $a075	                jsr LA059
5137	.a61a						LA600:
5138	.a61a		4c 07 aa	jmp $aa07	                jmp LA9C5

5140	.a61d						LA603:
5141	.a61d		20 20 a5	jsr $a520	                jsr LA506
5142	.a620		80 af		bra $a5d1	                bra LA5B7

5144	.a622						LA608:
5145	.a622		c9 2a		cmp #$2a	                cmp #'*'
5146	.a624		f0 37		beq $a65d	                beq LA643
5147	.a626		c9 23		cmp #$23	                cmp #'#'
5148	.a628		d0 0f		bne $a639	                bne LA61F
5149	.a62a		ee c6 03	inc $03c6	                inc $03C6
5150	.a62d		d0 03		bne $a632	                bne LA618
5151	.a62f		ee c7 03	inc $03c7	                inc $03C7
5152	.a632						LA618:
5153	.a632		a2 ff		ldx #$ff	                ldx #$FF
5154	.a634		2c 6c e3	bit $e36c	                bit mos.valueFF
5155	.a637		80 51		bra $a68a	                bra LA670

5157	.a639						LA61F:
5158	.a639		20 93 a1	jsr $a193	                jsr LA177
5159	.a63c		20 2f ab	jsr $ab2f	                jsr doFollowingError
5160	>a63f		d7				                .byte $D7
5161	>a640		42 61 64 20 52 4f 4d		                .text "Bad ROM"
5162	>a647		00				                .byte 0

5164	.a648						LA62E:
5165							                .if version!=400
5166	.a648		a0 ff		ldy #$ff	                ldy #$FF
5167	.a64a		20 9e aa	jsr $aa9e	                jsr LAA5C
5168	.a64d		a9 01		lda #$01	                lda #$01
5169	.a64f		85 c2		sta $c2		                sta $C2
5170	.a651		20 5e aa	jsr $aa5e	                jsr LAA1C
5171	.a654						LA63A:
5172	.a654		20 c2 a8	jsr $a8c2	                jsr LA880
5173	.a657		a9 03		lda #$03	                lda #$03
5174	.a659		c5 c2		cmp $c2		                cmp $C2
5175	.a65b		d0 f7		bne $a654	                bne LA63A
5176							                .endif
5177	.a65d						LA643:
5178	.a65d		20 88 aa	jsr $aa88	                jsr LAA46
5179	.a660						LA646:
5180	.a660		20 ae a6	jsr $a6ae	                jsr LA694
5181	.a663		50 1a		bvc $a67f	                bvc LA665
5182	.a665		99 b2 03	sta $03b2,y	                sta $03B2,y
5183	.a668		f0 06		beq $a670	                beq LA656
5184	.a66a		c8		iny		                iny
5185	.a66b		c0 0b		cpy #$0b	                cpy #$0B
5186	.a66d		d0 f1		bne $a660	                bne LA646
5187	.a66f		88		dey		                dey
5188	.a670						LA656:
5189	.a670		a2 0c		ldx #$0c	                ldx #$0C
5190	.a672						LA658:
5191	.a672		20 ae a6	jsr $a6ae	                jsr LA694
5192	.a675		50 08		bvc $a67f	                bvc LA665
5193	.a677		9d b2 03	sta $03b2,x	                sta $03B2,x
5194	.a67a		e8		inx		                inx
5195	.a67b		e0 1f		cpx #$1f	                cpx #$1F
5196	.a67d		d0 f3		bne $a672	                bne LA658
5197	.a67f						LA665:
5198	.a67f		98		tya		                tya
5199	.a680		aa		tax		                tax
5200	.a681		9e b2 03	stz $03b2,x	                stz $03B2,x
5201	.a684		a5 be		lda $be		                lda $BE
5202	.a686		05 bf		ora $bf		                ora $BF
5203	.a688		85 c1		sta $c1		                sta $C1
5204	.a68a						LA670:
5205	.a68a		20 86 aa	jsr $aa86	                jsr LAA44
5206	.a68d		84 c2		sty $c2		                sty $C2
5207	.a68f		8a		txa		                txa
5208							                .if version<500
5209	.a690		d0 54		bne $a6e6	                bne LA6CC
5212							                .endif
5213	.a692						LA678:
5214							                .if version!=400
5215	.a692		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5216	.a695		f0 b1		beq $a648	                beq LA62E
5217							                .endif
5218	.a697						LA67D:
5219	.a697		20 f9 f3	jsr $f3f9	                jsr mos.LF710
5220	.a69a		c9 2b		cmp #$2b	                cmp #$2B
5221	.a69c		d0 84		bne $a622	                bne LA608
5222	.a69e		a9 08		lda #$08	                lda #$08
5223	.a6a0		25 e2		and $e2		                and $E2
5224	.a6a2		f0 03		beq $a6a7	                beq LA68D
5225	.a6a4		20 79 a0	jsr $a079	                jsr LA05D
5226	.a6a7						LA68D:
5227	.a6a7		20 ea f3	jsr $f3ea	                jsr mos.LF701
5228	.a6aa		90 eb		bcc $a697	                bcc LA67D
5229	.a6ac		b8		clv		                clv
5230	.a6ad		60		rts		                rts

5232	.a6ae						LA694:
5233							                .if version!=400
5234	.a6ae		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5235	.a6b1		f0 0d		beq $a6c0	                beq LA6A6
5236							                .endif
5237	.a6b3		da		phx		                phx
5238	.a6b4		5a		phy		                phy
5239	.a6b5		20 f9 f3	jsr $f3f9	                jsr mos.LF710
5240	.a6b8		85 bd		sta $bd		                sta $BD
5241	.a6ba		a9 ff		lda #$ff	                lda #$FF
5242	.a6bc		85 c0		sta $c0		                sta $C0
5243	.a6be		7a		ply		                ply
5244	.a6bf		fa		plx		                plx
5245	.a6c0						LA6A6:
5246	.a6c0		20 92 a7	jsr $a792	                jsr LA778
5247	.a6c3						LA6A9:
5248							                .if version<500
5249	.a6c3		08		php		                php
5250	.a6c4		48		pha		                pha
5251	.a6c5		38		sec		                sec
5252	.a6c6		66 cb		ror $cb		                ror $CB
5253	.a6c8		45 bf		eor $bf		                eor $BF
5254	.a6ca		85 bf		sta $bf		                sta $BF
5255	.a6cc						LA6B2:
5256	.a6cc		a5 bf		lda $bf		                lda $BF
5257	.a6ce		18		clc		                clc
5258	.a6cf		10 0b		bpl $a6dc	                bpl LA6C2
5259	.a6d1		49 08		eor #$08	                eor #$08
5260	.a6d3		85 bf		sta $bf		                sta $BF
5261	.a6d5		a5 be		lda $be		                lda $BE
5262	.a6d7		49 10		eor #$10	                eor #$10
5263	.a6d9		85 be		sta $be		                sta $BE
5264	.a6db		38		sec		                sec
5265	.a6dc						LA6C2:
5266	.a6dc		26 be		rol $be		                rol $BE
5267	.a6de		26 bf		rol $bf		                rol $BF
5268	.a6e0		46 cb		lsr $cb		                lsr $CB
5269	.a6e2		d0 e8		bne $a6cc	                bne LA6B2
5270	.a6e4		68		pla		                pla
5271	.a6e5		28		plp		                plp
5272							                .endif
5273	.a6e6						LA6CC:
5274	.a6e6		60		rts		                rts

5276							                .if version!=400
5277	.a6e7						LA6CD:                                       ;AAA6 in MOS 5.00
5278	.a6e7		20 90 a7	jsr $a790	                jsr LA776
5279	.a6ea		80 d7		bra $a6c3	                bra LA6A9
5280							                .endif

5282	.a6ec						LA6D2:                                       ;AAAB in MOS 5.00
5283	.a6ec		a9 00		lda #$00	                lda #$00
5284	.a6ee						LA6D4:
5285	.a6ee		85 bd		sta $bd		                sta $BD
5286	.a6f0		a2 00		ldx #$00	                ldx #$00
5287	.a6f2		64 bc		stz $bc		                stz $BC
5288	.a6f4		50 0a		bvc $a700	                bvc LA6E6
5289	.a6f6		ad c8 03	lda $03c8	                lda $03C8
5290	.a6f9		0d c9 03	ora $03c9	                ora $03C9
5291	.a6fc		f0 02		beq $a700	                beq LA6E6
5292	.a6fe		a2 04		ldx #$04	                ldx #$04
5293	.a700						LA6E6:
5294	.a700		86 c2		stx $c2		                stx $C2
5295	.a702						rtsAAC1:
5296	.a702		60		rts		                rts

5298							                .if version!=400
5299	.a703						LA6E9:                                       ;AAC2 in MOS 5.00
5300	.a703		08		php		                php
5301	.a704		a2 03		ldx #$03	                ldx #$03
5302	.a706						LA6EC:
5303	.a706		9e cb 03	stz $03cb,x	                stz $03CB,x
5304	.a709		ca		dex		                dex
5305	.a70a		10 fa		bpl $a706	                bpl LA6EC
5306	.a70c		ad c6 03	lda $03c6	                lda $03C6
5307	.a70f		0d c7 03	ora $03c7	                ora $03C7
5308	.a712		d0 05		bne $a719	                bne LA6FF
5309	.a714		20 9e a7	jsr $a79e	                jsr LA784
5310	.a717		80 03		bra $a71c	                bra LA702

5312	.a719						LA6FF:
5313	.a719		20 a2 a7	jsr $a7a2	                jsr LA788
5314	.a71c						LA702:
5315	.a71c		a9 2a		lda #$2a	                lda #$2A
5316	.a71e		85 bd		sta $bd		                sta $BD
5317	.a720		20 86 aa	jsr $aa86	                jsr LAA44
5318	.a723		20 58 aa	jsr $aa58	                jsr LAA16
5319	.a726		20 92 a7	jsr $a792	                jsr LA778
5320	.a729		88		dey		                dey
5321	.a72a						LA710:
5322	.a72a		c8		iny		                iny
5323	.a72b		b9 d2 03	lda $03d2,y	                lda $03D2,y
5324	.a72e		99 b2 03	sta $03b2,y	                sta $03B2,y
5325	.a731		20 e7 a6	jsr $a6e7	                jsr LA6CD
5326	.a734		d0 f4		bne $a72a	                bne LA710
5327	.a736		a2 0c		ldx #$0c	                ldx #$0C
5328	.a738						LA71E:
5329	.a738		bd b2 03	lda $03b2,x	                lda $03B2,x
5330	.a73b		20 e7 a6	jsr $a6e7	                jsr LA6CD
5331	.a73e		e8		inx		                inx
5332	.a73f		e0 1d		cpx #$1d	                cpx #$1D
5333	.a741		d0 f5		bne $a738	                bne LA71E
5334	.a743		20 89 a7	jsr $a789	                jsr LA76F
5335	.a746		ad c8 03	lda $03c8	                lda $03C8
5336	.a749		0d c9 03	ora $03c9	                ora $03C9
5337	.a74c		f0 1b		beq $a769	                beq LA74F
5338	.a74e		20 88 aa	jsr $aa88	                jsr LAA46
5339	.a751						LA737:
5340							                .if version<500
5341	.a751		20 fe aa	jsr $aafe	                jsr LAABC
5342	.a754		f0 05		beq $a75b	                beq LA741
5343	.a756		ad e5 fe	lda $fee5	                lda tube.data3
5344	.a759		80 02		bra $a75d	                bra LA743
5345	.a75b						LA741:
5346							                .endif
5347	.a75b		b1 b0		lda ($b0),y	                lda ($B0),y
5348	.a75d						LA743:
5349	.a75d		20 e7 a6	jsr $a6e7	                jsr LA6CD
5350	.a760		c8		iny		                iny
5351	.a761		cc c8 03	cpy $03c8	                cpy $03C8
5352	.a764		d0 eb		bne $a751	                bne LA737
5353	.a766		20 89 a7	jsr $a789	                jsr LA76F
5354	.a769						LA74F:
5355	.a769		20 92 a7	jsr $a792	                jsr LA778
5356	.a76c		20 92 a7	jsr $a792	                jsr LA778
5357	.a76f		20 54 aa	jsr $aa54	                jsr resetACIA
5358	.a772		a9 01		lda #$01	                lda #$01
5359	.a774		20 a4 a7	jsr $a7a4	                jsr LA78A
5360	.a777		28		plp		                plp
5361	.a778		20 c5 a7	jsr $a7c5	                jsr LA7AB
5362	.a77b		2c ca 03	bit $03ca	                bit $03CA
5363	.a77e		10 08		bpl $a788	                bpl LA76E
5364	.a780		08		php		                php
5365	.a781		20 9e a7	jsr $a79e	                jsr LA784
5366	.a784		20 72 a0	jsr $a072	                jsr LA056
5367	.a787		28		plp		                plp
5368	.a788						LA76E:
5369	.a788		60		rts		                rts

5371	.a789						LA76F:
5372							                .if version<500
5373	.a789		a5 bf		lda $bf		                lda $BF
5376							                .endif
5377	.a78b		20 90 a7	jsr $a790	                jsr LA776
5378							                .if version<500
5379	.a78e		a5 be		lda $be		                lda $BE
5382							                .endif
5383	.a790						LA776:
5384	.a790		85 bd		sta $bd		                sta $BD
5385							                .endif

5387	.a792						LA778:
5388	.a792		20 c2 a8	jsr $a8c2	                jsr LA880
5389	.a795		24 c0		bit $c0		                bit $C0
5390	.a797		10 f9		bpl $a792	                bpl LA778
5391	.a799		64 c0		stz $c0		                stz $C0
5392	.a79b		a5 bd		lda $bd		                lda $BD
5393	.a79d		60		rts		                rts

5395							                .if version!=400
5396	.a79e						LA784:
5397	.a79e		a9 32		lda #$32	                lda #$32
5398	.a7a0		80 02		bra $a7a4	                bra LA78A

5400	.a7a2						LA788:
5401	.a7a2		a5 c7		lda $c7		                lda $C7
5402	.a7a4						LA78A:
5403	.a7a4		a2 05		ldx #$05	                ldx #$05
5404	.a7a6						LA78C:
5405	.a7a6		8d 40 02	sta $0240	                sta cfsTimeoutCounter
5406	.a7a9						LA78F:
5407	.a7a9		20 c2 a8	jsr $a8c2	                jsr LA880
5408	.a7ac		2c 40 02	bit $0240	                bit cfsTimeoutCounter
5409	.a7af		10 f8		bpl $a7a9	                bpl LA78F
5410	.a7b1		ca		dex		                dex
5411	.a7b2		d0 f2		bne $a7a6	                bne LA78C
5412	.a7b4		60		rts		                rts
5413							                .endif

5415	.a7b5						LA79B:
5416	.a7b5		ad c6 03	lda $03c6	                lda $03C6
5417	.a7b8		0d c7 03	ora $03c7	                ora $03C7
5418	.a7bb		f0 05		beq $a7c2	                beq LA7A8
5419	.a7bd		2c df 03	bit $03df	                bit $03DF
5420	.a7c0		10 03		bpl $a7c5	                bpl LA7AB
5421	.a7c2						LA7A8:
5422	.a7c2		20 75 a0	jsr $a075	                jsr LA059
5423	.a7c5						LA7AB:
5424	.a7c5		a0 00		ldy #$00	                ldy #$00
5425	.a7c7		64 ba		stz $ba		                stz $BA
5426	.a7c9		ad ca 03	lda $03ca	                lda $03CA
5427	.a7cc		8d df 03	sta $03df	                sta $03DF
5428	.a7cf		20 0b ee	jsr $ee0b	                jsr mos.LEF1B
5429	.a7d2		f0 67		beq $a83b	                beq LA821
5430	.a7d4		a9 0d		lda #$0d	                lda #$0D
5431	.a7d6		20 ee ff	jsr $ffee	                jsr OSWRCH
5432	.a7d9						LA7BF:
5433	.a7d9		b9 b2 03	lda $03b2,y	                lda $03B2,y
5434	.a7dc		f0 10		beq $a7ee	                beq LA7D4
5435	.a7de		c9 20		cmp #$20	                cmp #$20
5436	.a7e0		90 04		bcc $a7e6	                bcc LA7CC
5437	.a7e2		c9 7f		cmp #$7f	                cmp #$7F
5438	.a7e4		90 02		bcc $a7e8	                bcc LA7CE
5439	.a7e6						LA7CC:
5440	.a7e6		a9 3f		lda #$3f	                lda #$3F
5441	.a7e8						LA7CE:
5442	.a7e8		20 ee ff	jsr $ffee	                jsr OSWRCH
5443	.a7eb		c8		iny		                iny
5444	.a7ec		d0 eb		bne $a7d9	                bne LA7BF

5446	.a7ee						LA7D4:
5447							                .if version!=400
5448	.a7ee		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5449	.a7f1		f0 04		beq $a7f7	                beq LA7DD
5450							                .endif
5451	.a7f3		24 bb		bit $bb		                bit $BB
5452	.a7f5		50 44		bvc $a83b	                bvc LA821
5453	.a7f7						LA7DD:
5454	.a7f7		20 28 9f	jsr $9f28	                jsr printSpace
5455	.a7fa		c8		iny		                iny
5456	.a7fb		c0 0b		cpy #$0b	                cpy #$0B
5457	.a7fd		90 ef		bcc $a7ee	                bcc LA7D4
5458	.a7ff		ad c6 03	lda $03c6	                lda $03C6
5459	.a802		aa		tax		                tax
5460	.a803		20 ad a8	jsr $a8ad	                jsr printHexByte
5461	.a806		2c ca 03	bit $03ca	                bit $03CA
5462	.a809		10 30		bpl $a83b	                bpl LA821
5463	.a80b		8a		txa		                txa
5464	.a80c		18		clc		                clc
5465	.a80d		6d c9 03	adc $03c9	                adc $03C9
5466	.a810		20 a8 a8	jsr $a8a8	                jsr printSpaceThenPrintHexByte
5467	.a813						LA7F9:
5468	.a813		ad c8 03	lda $03c8	                lda $03C8
5469	.a816		20 ad a8	jsr $a8ad	                jsr printHexByte
5470	.a819		24 bb		bit $bb		                bit $BB
5471	.a81b		50 1e		bvc $a83b	                bvc LA821
5472	.a81d		a2 04		ldx #$04	                ldx #$04
5473	.a81f						LA805:
5474	.a81f		20 28 9f	jsr $9f28	                jsr printSpace
5475	.a822		ca		dex		                dex
5476	.a823		d0 fa		bne $a81f	                bne LA805
5477	.a825		a2 0f		ldx #$0f	                ldx #$0F
5478	.a827		20 2f a8	jsr $a82f	                jsr LA815
5479	.a82a		20 28 9f	jsr $9f28	                jsr printSpace
5480	.a82d		a2 13		ldx #$13	                ldx #$13
5481	.a82f						LA815:
5482	.a82f		a0 04		ldy #$04	                ldy #$04
5483	.a831						LA817:
5484	.a831		bd b2 03	lda $03b2,x	                lda $03B2,x
5485	.a834		20 ad a8	jsr $a8ad	                jsr printHexByte
5486	.a837		ca		dex		                dex
5487	.a838		88		dey		                dey
5488	.a839		d0 f6		bne $a831	                bne LA817
5489	.a83b						LA821:
5490	.a83b		60		rts		                rts

5492							                .if version!=400
5493	.a83c						LA822:
5494	.a83c		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5495	.a83f		f0 06		beq $a847	                beq LA82D
5496	.a841		20 0c aa	jsr $aa0c	                jsr LA9CA
5497	.a844		4c 37 f9	jmp $f937	                jmp mos.badCommandError

5499	.a847						LA82D:
5500	.a847		20 9c aa	jsr $aa9c	                jsr LAA5A
5501	.a84a		20 e2 aa	jsr $aae2	                jsr LAAA0
5502	.a84d		20 0b ee	jsr $ee0b	                jsr mos.LEF1B
5503	.a850		f0 e9		beq $a83b	                beq LA821
5504	.a852		20 65 a9	jsr $a965	                jsr LA923
5505	>a855		52 45 43 4f 52 44 20 74		                .text "RECORD then RETURN"
	>a85d		68 65 6e 20 52 45 54 55 52 4e
5506	>a867		00				                .byte $00

5508	.a868						LA84E:
5509	.a868		20 c2 a8	jsr $a8c2	                jsr LA880
5510	.a86b		20 e0 ff	jsr $ffe0	                jsr OSRDCH
5511	.a86e		c9 0d		cmp #$0d	                cmp #$0D
5512	.a870		d0 f6		bne $a868	                bne LA84E
5513	.a872		4c e7 ff	jmp $ffe7	                jmp OSNEWL
5514							                .endif

5516							;-------------------------------------------------------------------------

5518							                .if version==350
5519							                .include "cfs_errors.s65"

:13	;******  Processing file: src/cfs_errors.s65

1	.a875						dataError:
2	.a875		20 2f ab	jsr $ab2f	                jsr doFollowingError
3	>a878		d8 0d 44 61 74 61 3f 00		                .text $d8,13,"Data?",0
4	.a880		80 19		bra $a89b	                bra LAB2A

6	.a882						fileError:
7	.a882		20 2f ab	jsr $ab2f	                jsr doFollowingError
8	>a885		db 0d 46 69 6c 65 3f 00		                .text $db,13,"File?",0
9	.a88d		80 0c		bra $a89b	                bra LAB2A

11	.a88f						blockError:
12	.a88f		20 2f ab	jsr $ab2f	                jsr doFollowingError
13	>a892		da 0d 42 6c 6f 63 6b 3f		                .text $da,13,"Block?",0
	>a89a		00
14	.a89b						LAB2A:
15	.a89b		4c ba a9	jmp $a9ba	                jmp LA978

:7	;******  Return to file: src/terminal.s65

5520							                .endif

5522							;-------------------------------------------------------------------------


5525	.a89e						LA85B:
5526	.a89e		a2 fd		ldx #$fd	                ldx #$FD
5527	.a8a0						LA85D:
5528	.a8a0		f6 b4		inc $b4,x	                inc $B4,x
5529	.a8a2		d0 03		bne $a8a7	                bne LA864
5530	.a8a4		e8		inx		                inx
5531	.a8a5		d0 f9		bne $a8a0	                bne LA85D
5532	.a8a7						LA864:
5533	.a8a7		60		rts		                rts

5535							;-------------------------------------------------------------------------

5537	.a8a8						printSpaceThenPrintHexByte:
5538	.a8a8		48		pha		                pha
5539	.a8a9		20 28 9f	jsr $9f28	                jsr printSpace
5540	.a8ac		68		pla		                pla
5541	.a8ad						printHexByte:
5542	.a8ad		48		pha		                pha
5543							                .if version==350
5544	.a8ae		20 2e e5	jsr $e52e	                jsr mos.LE520
5550							                .endif
5551	.a8b1		20 b5 a8	jsr $a8b5	                jsr printHexDigit
5552	.a8b4		68		pla		                pla
5553	.a8b5						printHexDigit:
5554	.a8b5		29 0f		and #$0f	                and #$0F
5555	.a8b7		09 30		ora #$30	                ora #'0'                     ;+'0'
5556	.a8b9		c9 3a		cmp #$3a	                cmp #'9'+1
5557	.a8bb		90 02		bcc $a8bf	                bcc LA87D                    ;taken if <='9'
5558	.a8bd		69 06		adc #$06	                adc #'A'-('9'+1)-1           ;adjust - -1 because C set
5559	.a8bf						LA87D:
5560	.a8bf		4c ee ff	jmp $ffee	                jmp OSWRCH

5562							;-------------------------------------------------------------------------

5564	.a8c2						LA880:
5565	.a8c2		08		php		                php
5566	.a8c3		24 eb		bit $eb		                bit $EB
5567	.a8c5		30 04		bmi $a8cb	                bmi LA889
5568	.a8c7		24 ff		bit $ff		                bit $FF
5569	.a8c9		30 02		bmi $a8cd	                bmi LA88B
5570	.a8cb						LA889:
5571	.a8cb		28		plp		                plp
5572	.a8cc		60		rts		                rts

5574	.a8cd						LA88B:
5575	.a8cd		20 93 a1	jsr $a193	                jsr LA177
5576	.a8d0		20 fd a9	jsr $a9fd	                jsr LA9BB
5577	.a8d3						escapeError:
5578	.a8d3		a9 7e		lda #$7e	                lda #$7E
5579	.a8d5		20 f4 ff	jsr $fff4	                jsr OSBYTE
5580	.a8d8		20 2f ab	jsr $ab2f	                jsr doFollowingError
5581	>a8db		11				                .byte $11
5582	>a8dc		45 73 63 61 70 65		                .text "Escape"
5583	>a8e2		00				                .byte $00

5585							;-------------------------------------------------------------------------

5587	.a8e3						LA8A1:
5588	.a8e3		98		tya		                tya
5589	.a8e4		f0 0d		beq $a8f3	                beq LA8B1
5590	.a8e6		20 65 a9	jsr $a965	                jsr LA923
5591	>a8e9		0d				                .byte $0D
5592	>a8ea		4c 6f 61 64 69 6e 67		                .text "Loading"
5593	>a8f1		0d				                .byte $0D
5594	>a8f2		00				                .byte $00
5595	.a8f3						LA8B1:
5596	.a8f3		64 ba		stz $ba		                stz $BA                      ; :
5597	.a8f5		a2 ff		ldx #$ff	                ldx #$FF
5598	.a8f7		a5 c1		lda $c1		                lda $C1
5599	.a8f9		d0 0b		bne $a906	                bne LA8C4
5600	.a8fb		20 9e a9	jsr $a99e	                jsr LA95C
5601	.a8fe		08		php		                php
5602	.a8ff		a2 ff		ldx #$ff	                ldx #$FF
5603	.a901		a0 82		ldy #$82	                ldy #<fileError
5604							                .cwarn (>fileError)!=(>dataError),"must be on same page"
5605	.a903		28		plp		                plp
5606	.a904		d0 16		bne $a91c	                bne LA8DA
5607	.a906						LA8C4:
5608	.a906		a0 75		ldy #$75	                ldy #<dataError
5609	.a908		a5 c1		lda $c1		                lda $C1
5610	.a90a		d0 10		bne $a91c	                bne LA8DA
5611	.a90c		ad c6 03	lda $03c6	                lda $03C6
5612	.a90f		c5 b4		cmp $b4		                cmp $B4
5613	.a911		d0 07		bne $a91a	                bne LA8D8
5614	.a913		ad c7 03	lda $03c7	                lda $03C7
5615	.a916		c5 b5		cmp $b5		                cmp $B5
5616	.a918		f0 0b		beq $a925	                beq LA8E3
5617	.a91a						LA8D8:
5618	.a91a		a0 8f		ldy #$8f	                ldy #<blockError
5619							                .cwarn (>blockError)!=(>dataError),"must be on same page"
5620	.a91c						LA8DA:
5621	.a91c		5a		phy		                phy
5622	.a91d		da		phx		                phx
5623	.a91e		20 c2 a7	jsr $a7c2	                jsr LA7A8
5624	.a921		fa		plx		                plx
5625	.a922		7a		ply		                ply
5626	.a923		80 10		bra $a935	                bra LA8F3

5628	.a925						LA8E3:
5629	.a925		da		phx		                phx
5630	.a926		20 b5 a7	jsr $a7b5	                jsr LA79B
5631	.a929		20 e2 a9	jsr $a9e2	                jsr LA9A0
5632	.a92c		fa		plx		                plx
5633	.a92d		a5 be		lda $be		                lda $BE
5634	.a92f		05 bf		ora $bf		                ora $BF
5635	.a931		f0 79		beq $a9ac	                beq LA96A
5636	.a933		a0 75		ldy #$75	                ldy #<dataError
5637	.a935						LA8F3:
5638	.a935		a9 a8		lda #$a8	                lda #>dataError
5639	.a937		c6 ba		dec $ba		                dec $BA
5640	.a939		48		pha		                pha
5641	.a93a		24 eb		bit $eb		                bit $EB
5642	.a93c		30 0d		bmi $a94b	                bmi LA909
5643	.a93e		8a		txa		                txa
5644							                .if version!=400
5645	.a93f		2d 47 02	and $0247	                and cfsRFSFSSwitch
5646	.a942						LA900:
5647							                .endif
5648	.a942		d0 07		bne $a94b	                bne LA909
5649	.a944		8a		txa		                txa
5650	.a945		29 11		and #$11	                and #$11
5651	.a947		25 bb		and $bb		                and $BB
5652	.a949		f0 0f		beq $a95a	                beq LA918
5653	.a94b						LA909:
5654	.a94b		68		pla		                pla
5655	.a94c		85 b9		sta $b9		                sta $B9
5656	.a94e		84 b8		sty $b8		                sty $B8
5657	.a950		20 a5 a5	jsr $a5a5	                jsr LA58B
5658	.a953		46 eb		lsr $eb		                lsr $EB
5659	.a955		20 f3 a9	jsr $a9f3	                jsr LA9B1
5660	.a958		80 3d		bra $a997	                bra LA955

5662	.a95a						LA918:
5663	.a95a		98		tya		                tya
5664	.a95b		18		clc		                clc
5665	.a95c		69 03		adc #$03	                adc #$03
5666	.a95e		a8		tay		                tay
5667	.a95f		90 03		bcc $a964	                bcc LA922
5668	.a961		68		pla		                pla
5669	.a962		1a		inc a		                inc a
5670	.a963		48		pha		                pha
5671	.a964						LA922:
5672	.a964		5a		phy		                phy
5673	.a965						LA923:
5674	.a965		20 0b ee	jsr $ee0b	                jsr mos.LEF1B
5675	.a968		a8		tay		                tay

5677							;-------------------------------------------------------------------------
5678							;
5679							; Print 0-terminated message using address from stack.
5680							;
5681							; entry:
5682							;
5683							; S=[StrL; StrH] - where Str = (address of string)-1
5684							; Y = 0 to print message; otherwise, don't print message
5685							;
5686	.a969						printFollowingMessage:                       ;
5687	.a969		68		pla		                pla
5688	.a96a		85 b8		sta $b8		                sta printMessageAddress+0
5689	.a96c		68		pla		                pla
5690	.a96d		85 b9		sta $b9		                sta printMessageAddress+1
5691	.a96f		5a		phy		                phy                          ;save initial Y
5692	.a970		98		tya		                tya                          ;Z=1 if Y=0
5693	.a971		08		php		                php                          ;save Y=0 state
5694	.a972						fetchNextChar:
5695	.a972		e6 b8		inc $b8		                inc printMessageAddress+0
5696	.a974		d0 02		bne $a978	                bne +
5697	.a976		e6 b9		inc $b9		                inc printMessageAddress+1
5698	.a978						+
5699	.a978		b2 b8		lda ($b8)	                lda (printMessageAddress)   ;fetch next char to print
5700	.a97a		f0 13		beq $a98f	                beq printingFinished        ;branch taken if last char
5701	.a97c		28		plp		                plp                         ;restore Y=0 state
5702	.a97d		08		php		                php                         ;save Y=0 state
5703	.a97e		f0 f2		beq $a972	                beq fetchNextChar ;branch taken if Y=0 - i.e., skip the
5704							                                  ;printing

5706							                ; printMessageAddress is in the $b0-$bf area, so it
5707							                ; needs saving in case there's a *SPOOL going on.
5708	.a980		a4 b8		ldy $b8		                ldy printMessageAddress+0
5709	.a982		5a		phy		                phy
5710	.a983		a4 b9		ldy $b9		                ldy printMessageAddress+1
5711	.a985		20 e3 ff	jsr $ffe3	                jsr OSASCI
5712	.a988		84 b9		sty $b9		                sty printMessageAddress+1
5713	.a98a		7a		ply		                ply
5714	.a98b		84 b8		sty $b8		                sty printMessageAddress+0

5716	.a98d		80 e3		bra $a972	                bra fetchNextChar

5718	.a98f						printingFinished:
5719	.a98f		28		plp		                plp                          ;discard Y=0 state
5720	.a990		e6 b8		inc $b8		                inc printMessageAddress+0
5721	.a992		d0 02		bne $a996	                bne +
5722	.a994		e6 b9		inc $b9		                inc printMessageAddress+1
5723	.a996						+
5724	.a996		7a		ply		                ply                          ;restore initial Y
5725	.a997						LA955:
5726	.a997		6c b8 00	jmp ($00b8)	                jmp (printMessageAddress)

5728	.a99a						alwaysPrintFollowingMessage:
5729	.a99a		a0 01		ldy #$01	                ldy #$01
5730	.a99c		80 cb		bra $a969	                bra printFollowingMessage

5732							;-------------------------------------------------------------------------

5734	.a99e						LA95C:
5735	.a99e		a2 ff		ldx #$ff	                ldx #$FF
5736	.a9a0						LA95E:
5737	.a9a0		e8		inx		                inx
5738	.a9a1		bd d2 03	lda $03d2,x	                lda $03D2,x
5739	.a9a4		d0 07		bne $a9ad	                bne LA96B
5740	.a9a6		8a		txa		                txa
5741	.a9a7		f0 03		beq $a9ac	                beq LA96A
5742	.a9a9		bd b2 03	lda $03b2,x	                lda $03B2,x
5743	.a9ac						LA96A:
5744	.a9ac		60		rts		                rts

5746	.a9ad						LA96B:
5747	.a9ad		20 43 ea	jsr $ea43	                jsr mos.isLetter
5748	.a9b0		5d b2 03	eor $03b2,x	                eor $03B2,x
5749	.a9b3		b0 02		bcs $a9b7	                bcs LA975
5750	.a9b5		29 df		and #$df	                and #$DF
5751	.a9b7						LA975:
5752	.a9b7		f0 e7		beq $a9a0	                beq LA95E
5753	.a9b9						LA977:
5754	.a9b9		60		rts		                rts

5756	.a9ba						LA978:
5757	.a9ba		a5 ba		lda $ba		                lda $BA
5758	.a9bc		f0 21		beq $a9df	                beq LA99D
5759	.a9be		8a		txa		                txa
5760	.a9bf		f0 1e		beq $a9df	                beq LA99D
5761	.a9c1		a9 22		lda #$22	                lda #$22
5762	.a9c3		24 bb		bit $bb		                bit $BB
5763	.a9c5		f0 18		beq $a9df	                beq LA99D
5764							                .if version!=400
5765	.a9c7		20 54 aa	jsr $aa54	                jsr resetACIA
5766							                .endif
5767	.a9ca		a8		tay		                tay
5768	.a9cb		20 69 a9	jsr $a969	                jsr printFollowingMessage
5769	>a9ce		0d				                .byte $0D
5770	>a9cf		07				                .byte $07
5771	>a9d0		52 65 77 69 6e 64 20 74		                .text "Rewind tape"
	>a9d8		61 70 65
5772	>a9db		0d				                .byte $0D
5773	>a9dc		0d				                .byte $0D
5774	>a9dd		00				                .byte $00
5775	.a9de		60		rts		                rts

5777	.a9df						LA99D:
5778	.a9df		20 79 a0	jsr $a079	                jsr LA05D
5779	.a9e2						LA9A0:
5780	.a9e2		a5 c2		lda $c2		                lda $C2
5781	.a9e4		f0 d3		beq $a9b9	                beq LA977
5782	.a9e6		20 c2 a8	jsr $a8c2	                jsr LA880
5783							                .if version!=400
5784	.a9e9		ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5785	.a9ec		f0 f4		beq $a9e2	                beq LA9A0
5786							                .endif
5787							                .if version==400
5789							                .else
5790	.a9ee		20 77 a4	jsr $a477	                jsr LA45D
5791							                .endif
5792	.a9f1		80 ef		bra $a9e2	                bra LA9A0

5794	.a9f3						LA9B1:
5795	.a9f3		20 0b ee	jsr $ee0b	                jsr mos.LEF1B
5796	.a9f6		f0 05		beq $a9fd	                beq LA9BB
5797	.a9f8						LA9B6:
5798	.a9f8		a9 07		lda #$07	                lda #$07
5799	.a9fa		20 ee ff	jsr $ffee	                jsr OSWRCH
5800	.a9fd						LA9BB:
5801							                .if version<500
5802	.a9fd		ad 7a 02	lda $027a	                lda tubePresence
5803	.aa00		f0 05		beq $aa07	                beq LA9C5
5804	.aa02		a9 80		lda #$80	                lda #$80
5805	.aa04		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
5806							                .endif
5807	.aa07						LA9C5:
5808							                .if version!=400
5809	.aa07		a2 00		ldx #$00	                ldx #$00
5810	.aa09		20 a3 aa	jsr $aaa3	                jsr LAA61
5811	.aa0c						LA9CA:
5812	.aa0c		08		php		                php
5813	.aa0d		78		sei		                sei
5814	.aa0e		ad 82 02	lda $0282	                lda serialULARegister
5815	.aa11		8d 10 fe	sta $fe10	                sta SERPROC+0
5816	.aa14		64 ea		stz $ea		                stz $EA
5817	.aa16		80 01		bra $aa19	                bra LA9D7

5819							;-------------------------------------------------------------------------

5821	.aa18						resetACIAThenRewriteControlRegister:
5822	.aa18		08		php		                php
5823	.aa19						LA9D7:
5824	.aa19		20 54 aa	jsr $aa54	                jsr resetACIA
5825	.aa1c		ad 50 02	lda $0250	                lda aciaControlRegister
5826	.aa1f		4c f9 e8	jmp $e8f9	                jmp mos.writeACIAControlRegister

5828							;-------------------------------------------------------------------------

5830	.aa22						LA9E0:
5831	.aa22		28		plp		                plp
5832	.aa23		24 ff		bit $ff		                bit $FF
5833	.aa25		10 18		bpl $aa3f	                bpl LA9FD
5834							                .endif
5835	.aa27		60		rts		                rts

5837	.aa28						LA9E6:
5838	.aa28		a5 e3		lda $e3		                lda $E3
5839	.aa2a		0a		asl a		                asl a
5840	.aa2b		0a		asl a		                asl a
5841	.aa2c		0a		asl a		                asl a
5842	.aa2d		0a		asl a		                asl a
5843	.aa2e		85 bb		sta $bb		                sta $BB
5844							                .if version==400
5846							                .else
5847	.aa30		ad d1 03	lda $03d1	                lda $03D1
5848	.aa33		80 08		bra $aa3d	                bra LA9FB
5849							                .endif

5851	.aa35						LA9F3:
5852	.aa35		a5 e3		lda $e3		                lda $E3
5853	.aa37		29 f0		and #$f0	                and #$F0
5854	.aa39		85 bb		sta $bb		                sta $BB
5855							                .if version!=400
5856	.aa3b		a9 06		lda #$06	                lda #$06
5857	.aa3d						LA9FB:
5858	.aa3d		85 c7		sta $c7		                sta $C7
5859	.aa3f						LA9FD:
5860	.aa3f		58		cli		                cli
5861	.aa40						LA9FE:
5862	.aa40		08		php		                php
5863	.aa41		78		sei		                sei
5864	.aa42						LAA00:
5865	.aa42		2c 4f 02	bit $024f	                bit rs423Busy
5866	.aa45		10 db		bpl $aa22	                bpl LA9E0
5867	.aa47		a5 ea		lda $ea		                lda $EA
5868	.aa49		30 d7		bmi $aa22	                bmi LA9E0
5869	.aa4b		a9 01		lda #$01	                lda #$01
5870	.aa4d		85 ea		sta $ea		                sta $EA
5871	.aa4f		20 54 aa	jsr $aa54	                jsr resetACIA
5872	.aa52		28		plp		                plp
5873							                .endif
5874	.aa53		60		rts		                rts

5876							;-------------------------------------------------------------------------

5878							                .if version!=400
5879	.aa54						resetACIA:
5880	.aa54		a9 03		lda #$03	                lda #ACIA.control.reset
5881	.aa56		80 1b		bra $aa73	                bra writeACIAControlRegister
5882							                .endif

5884							;-------------------------------------------------------------------------

5886	.aa58						LAA16:
5887							                .if version!=400
5888	.aa58		a9 30		lda #$30	                lda #$30
5889	.aa5a		85 ca		sta $ca		                sta $CA
5890	.aa5c		80 13		bra $aa71	                bra LAA2F
5891							                .endif
5892	.aa5e						LAA1C:
5893							                .if version!=400
5894	.aa5e		a9 05		lda #$05	                lda #$05
5895	.aa60		8d 10 fe	sta $fe10	                sta SERPROC+0
5896	.aa63		a2 ff		ldx #$ff	                ldx #$FF
5897	.aa65						LAA23:
5898	.aa65		ca		dex		                dex
5899	.aa66		d0 fd		bne $aa65	                bne LAA23
5900							                .endif
5901	.aa68		64 ca		stz $ca		                stz $CA
5902							                .if version!=400
5903	.aa6a		a9 d0		lda #$d0	                lda #$D0
5904	.aa6c						LAA2A:
5905	.aa6c		a0 85		ldy #$85	                ldy #$85
5906	.aa6e		8c 10 fe	sty $fe10	                sty SERPROC+0
5907	.aa71						LAA2F:
5908	.aa71		05 c6		ora $c6		                ora $C6
5909	.aa73						writeACIAControlRegister:
5910	.aa73		8d 08 fe	sta $fe08	                sta ACIA+0
5911							                .endif
5912	.aa76		60		rts		                rts

5914							;-------------------------------------------------------------------------

5916	.aa77						LAA35:
5917	.aa77		ae c6 03	ldx $03c6	                ldx $03C6
5918	.aa7a		ac c7 03	ldy $03c7	                ldy $03C7
5919	.aa7d		e8		inx		                inx
5920	.aa7e		86 b4		stx $b4		                stx $B4
5921	.aa80		d0 01		bne $aa83	                bne LAA41
5922	.aa82		c8		iny		                iny
5923	.aa83						LAA41:
5924	.aa83		84 b5		sty $b5		                sty $B5
5925	.aa85		60		rts		                rts

5927	.aa86						LAA44:
5928	.aa86		64 c0		stz $c0		                stz $C0
5929	.aa88						LAA46:
5930	.aa88		a0 00		ldy #$00	                ldy #$00
5931	.aa8a		64 be		stz $be		                stz $BE
5932	.aa8c		64 bf		stz $bf		                stz $BF
5933	.aa8e		60		rts		                rts

5935	.aa8f						LAA4D:
5936	.aa8f		a0 ff		ldy #$ff	                ldy #$FF
5937	.aa91						LAA4F:
5938	.aa91		c8		iny		                iny
5939	.aa92		e8		inx		                inx
5940	.aa93		bd 00 03	lda $0300,x	                lda $0300,x
5941	.aa96		99 d2 03	sta $03d2,y	                sta $03D2,y
5942	.aa99		d0 f6		bne $aa91	                bne LAA4F
5943	.aa9b		60		rts		                rts

5945							                .if version!=400
5946	.aa9c						LAA5A:
5947	.aa9c		a0 00		ldy #$00	                ldy #$00
5948	.aa9e						LAA5C:
5949	.aa9e		58		cli		                cli
5950	.aa9f		a2 01		ldx #$01	                ldx #$01
5951	.aaa1		84 c3		sty $c3		                sty $C3
5952	.aaa3						LAA61:
5953	.aaa3		a9 89		lda #$89	                lda #$89
5954	.aaa5		a4 c3		ldy $c3		                ldy $C3
5955	.aaa7		4c f4 ff	jmp $fff4	                jmp OSBYTE
5956							                .endif

5958							; Check if TAPE/ROM channel is open
5959							; ---------------------------------
5960							; Y=handle to check, A=status mask to use
5961	.aaaa						LAA68:
5962	.aaaa		5a		phy		                phy
5963	.aaab		20 cf aa	jsr $aacf	                jsr LAA8D
5964	.aaae		7a		ply		                ply
5965							                .if version<500
5966	.aaaf		b0 5a		bcs $ab0b	                bcs LAAC9                    ; Channel open, exit
5969							                .endif
5970	.aab1		cc 57 02	cpy $0257	                cpy spoolFileHandle                    ; Not SPOOL handle
5971	.aab4		d0 05		bne $aabb	                bne LAA79
5972	.aab6		9c 57 02	stz $0257	                stz spoolFileHandle                    ; Clear the SPOOL handle
5973	.aab9		80 08		bra $aac3	                bra LAA81
5974	.aabb						LAA79:
5975	.aabb		cc 56 02	cpy $0256	                cpy execFileHandle                    ; Not EXEC handle
5976	.aabe		d0 03		bne $aac3	                bne LAA81
5977	.aac0		9c 56 02	stz $0256	                stz execFileHandle                    ; Clear the EXEC handle
5978	.aac3						LAA81:
5979	.aac3		20 2f ab	jsr $ab2f	                jsr doFollowingError                    ; Generate error
5980	>aac6		de				                .byte $DE
5981	>aac7		43 68 61 6e 6e 65 6c		                .text "Channel"
5982	.aace		00		brk #		                brk

5984	.aacf						LAA8D:
5985	.aacf		48		pha		                pha                          ; Toggle channel with CFS/RFS switch
5986	.aad0		98		tya		                tya
5987							                .if version==400
5989							                .else
5990	.aad1		4d 47 02	eor $0247	                eor cfsRFSFSSwitch
5991							                .endif
5992	.aad4		a8		tay		                tay                          ; If CFS=unchanged, if RFS 1/2/3->3/0/1
5993	.aad5		68		pla		                pla
5994	.aad6		25 e2		and $e2		                and $E2                      ; Mask with open channels bitmask
5995	.aad8		4a		lsr a		                lsr a                        ; Move 'input open if tested' into Carry
5996	.aad9		88		dey		                dey                          ; Exit if testing CFS#1 or RFS#3
5997	.aada		f0 05		beq $aae1	                beq LAA9F
5998	.aadc		4a		lsr a		                lsr a                        ; Move 'output open if tested' into Carry
5999	.aadd		88		dey		                dey                          ; Exit if testing CFS#2
6000	.aade		f0 01		beq $aae1	                beq LAA9F
6001	.aae0		18		clc		                clc                          ; Otherwise, Carry=Not Open
6002	.aae1						LAA9F:
6003	.aae1		60		rts		                rts

6005							                .if version!=400
6006	.aae2						LAAA0:
6007	.aae2		a9 10		lda #$10	                lda #$10
6008	.aae4		80 86		bra $aa6c	                bra LAA2A
6009							                .endif

6011							                .if version<500
6012	.aae6						LAAA4:
6013	.aae6		a9 01		lda #$01	                lda #$01
6014	.aae8						LAAA6:
6015	.aae8		20 fe aa	jsr $aafe	                jsr LAABC
6016	.aaeb		f0 1e		beq $ab0b	                beq LAAC9
6017	.aaed		8a		txa		                txa
6018	.aaee		a2 b0		ldx #$b0	                ldx #$B0
6019	.aaf0		a0 00		ldy #$00	                ldy #$00
6020	.aaf2						LAAB0:
6021	.aaf2		48		pha		                pha
6022	.aaf3		a9 c0		lda #$c0	                lda #$C0
6023	.aaf5						LAAB3:
6024	.aaf5		20 06 04	jsr $0406	                jsr tubeHost.entryPoint
6025	.aaf8		90 fb		bcc $aaf5	                bcc LAAB3
6026	.aafa		68		pla		                pla
6027	.aafb		4c 06 04	jmp $0406	                jmp tubeHost.entryPoint

6029	.aafe						LAABC:
6030	.aafe		aa		tax		                tax
6031	.aaff		a5 b2		lda $b2		                lda $B2
6032	.ab01		25 b3		and $b3		                and $B3
6033	.ab03		1a		inc a		                inc a
6034	.ab04		f0 05		beq $ab0b	                beq LAAC9
6035	.ab06		ad 7a 02	lda $027a	                lda tubePresence
6036	.ab09		29 80		and #$80	                and #$80
6037	.ab0b						LAAC9:
6038	.ab0b		60		rts		                rts
6039							                .endif

6041	.ab0c						LAACA:
6042	.ab0c		a0 05		ldy #$05	                ldy #$05
6043	.ab0e						LAACC:
6044	.ab0e		b1 cc		lda ($cc),y	                lda ($CC),y
6045	.ab10		d0 07		bne $ab19	                bne LAAD7
6046	.ab12		c8		iny		                iny
6047	.ab13		c0 08		cpy #$08	                cpy #$08
6048	.ab15		90 f7		bcc $ab0e	                bcc LAACC
6049	.ab17						LAAD5:
6050	.ab17		b1 cc		lda ($cc),y	                lda ($CC),y
6051	.ab19						LAAD7:
6052	.ab19		3a		dec a		                dec a
6053	.ab1a		91 cc		sta ($cc),y	                sta ($CC),y
6054	.ab1c		88		dey		                dey
6055	.ab1d		c0 05		cpy #$05	                cpy #$05
6056	.ab1f		b0 f6		bcs $ab17	                bcs LAAD5
6057	.ab21		60		rts		                rts

6059	.ab22						LAAE0:
6060	.ab22		a0 08		ldy #$08	                ldy #$08
6061	.ab24		a9 00		lda #$00	                lda #$00
6062	.ab26						LAAE4:
6063	.ab26		11 cc		ora ($cc),y	                ora ($CC),y
6064	.ab28		88		dey		                dey
6065	.ab29		c0 05		cpy #$05	                cpy #$05
6066	.ab2b		b0 f9		bcs $ab26	                bcs LAAE4
6067	.ab2d		aa		tax		                tax
6068	.ab2e		60		rts		                rts

6070	.ab2f						doFollowingError:
6071	.ab2f		78		sei		                sei
6072	.ab30		68		pla		                pla
6073	.ab31		85 fa		sta $fa		                sta SEIWKA+0
6074	.ab33		68		pla		                pla
6075	.ab34		85 fb		sta $fb		                sta SEIWKA+1
6076	.ab36		9c 00 01	stz $0100	                stz $0100
6077	.ab39		a0 00		ldy #$00	                ldy #$00
6078	.ab3b						-
6079	.ab3b		c8		iny		                iny
6080	.ab3c		b1 fa		lda ($fa),y	                lda (SEIWKA),y
6081	.ab3e		99 00 01	sta $0100,y	                sta $0100,y
6082	.ab41		d0 f8		bne $ab3b	                bne -
6083	.ab43		4c 00 01	jmp $0100	                jmp $0100


6086							                .if version!=350
6088							                .endif

6090							                .if version<500
6091							;-------------------------------------------------------------------------
6092							;
6093							; Tube host code
6094							;
6095							; See http://mdfs.net/Software/Tube/M128/Host320.lst
6096							;
6097							; I mostly just copied JGH's comments here.

6099	.ab46						tubeHost: .block          ;tube code

6101	.ab46						brkHandler: .block
6102							                .logical tubeBrkHandlerAddr
6103	.ab46	0016	a9 ff		lda #$ff	                lda #$FF
6104	.ab48	0018	20 73 06	jsr $0673	                jsr sendR4       ;send $ff via R4 to interrupt copro
6105	.ab4b	001b	ad e3 fe	lda $fee3	                lda tube.data2   ;get ACK byte from copro
6106	.ab4e	001e	a9 00		lda #$00	                lda #$00
6107	.ab50	0020	20 68 06	jsr $0668	                jsr sendR2A       ;send $00 via R2 to specify ERROR
6108	.ab53	0023	a8		tay		                tay               ;Y=0
6109	.ab54	0024	b1 fd		lda ($fd),y	                lda ($FD),y       ;get error number
6110	.ab56	0026	20 68 06	jsr $0668	                jsr sendR2A       ;send error number via R2
6111	.ab59	0029					-
6112	.ab59	0029	c8		iny		                iny             ;next char
6113	.ab5a	002a	b1 fd		lda ($fd),y	                lda ($FD),y     ;fetch error string char
6114	.ab5c	002c	20 68 06	jsr $0668	                jsr sendR2A     ;send via R2
6115	.ab5f	002f	aa		tax		                tax             ;set N/Z as per error string char
6116	.ab60	0030	d0 f7		bne $0029	                bne -           ;repeat until terminating $00 sent
6117	.ab62	0032					idleStartup:
6118	.ab62	0032	a2 ff		ldx #$ff	                ldx #$FF
6119	.ab64	0034	9a		txs		                txs             ;clear stack
6120	.ab65	0035	58		cli		                cli
6121	.ab66	0036					idleLoop:
6122	.ab66	0036	2c e0 fe	bit $fee0	                bit tube.status1 ;is there a char in R1?
6123	.ab69	0039	10 06		bpl $0041	                bpl LAB58        ;branch taken if no char in R1
6124	.ab6b	003b					handleOSWRCH:
6125	.ab6b	003b	ad e1 fe	lda $fee1	                lda tube.data1  ;get char from R1
6126	.ab6e	003e	20 ee ff	jsr $ffee	                jsr OSWRCH      ;pass to OSWRCH
6127	.ab71	0041					LAB58:
6128	.ab71	0041	2c e2 fe	bit $fee2	                bit tube.status2 ;is there a command in R2?
6129	.ab74	0044	10 f0		bpl $0036	                bpl idleLoop     ;branch taken if no command in R2
6130	.ab76	0046	2c e0 fe	bit $fee0	                bit tube.status1 ;is there a char in R1?
6131	.ab79	0049	30 f0		bmi $003b	                bmi handleOSWRCH ;branch taken if char in R1
6132	.ab7b	004b	ae e3 fe	ldx $fee3	                ldx tube.data2   ;get command from R2
6133	.ab7e	004e	86 51		stx $51		                stx callCommandRoutine+1 ;use as index into command
6134							                                         ;table
6135	.ab80	0050					callCommandRoutine:
6136							                ; not sure why this can't be jmp
6137							                ; (tubeHost.commandRoutines,x)? - and then the table
6138							                ; wouldn't have to be page-aligned.
6139	.ab80	0050	6c 00 05	jmp ($0500)	                jmp (tubeHost.commandRoutines)

6141							                ; ???
6142	>ab83	0053	00 80 00 00			                .dword $8000
6143							                .here
6144							                .endblock

6146							; Slightly ugly aliases for inner symbol :(
6147	=$32						idleStartup=brkHandler.idleStartup
6148	=$36						idleLoop=brkHandler.idleLoop

6150	.ab87						codePage0:
6151							                .logical tubeHostAddr
6152	.ab87	0400					copyLanguage:
6153	.ab87	0400	4c c1 04	jmp $04c1	                jmp LAC30

6155	.ab8a	0403					copyEscapeStatus:
6156	.ab8a	0403	4c 7c 06	jmp $067c	                jmp LADDA

6158							; Tube transfer/claim/release
6159	.ab8d	0406					entryPoint:
6160	.ab8d	0406	c9 80		cmp #$80	                cmp #$80
6161	.ab8f	0408	90 29		bcc $0433	                bcc dataTransfer
6162	.ab91	040a	c9 c0		cmp #$c0	                cmp #$C0
6163	.ab93	040c	b0 18		bcs $0426	                bcs claim
6164	.ab95	040e	09 40		ora #$40	                ora #$40
6165	.ab97	0410	c5 15		cmp $15		                cmp $15
6166	.ab99	0412	d0 1e		bne $0432	                bne done
6167	.ab9b	0414					release:
6168	.ab9b	0414	08		php		                php
6169	.ab9c	0415	78		sei		                sei
6170	.ab9d	0416	a9 05		lda #$05	                lda #$05
6171	.ab9f	0418	20 73 06	jsr $0673	                jsr sendR4
6172	.aba2	041b	20 71 06	jsr $0671	                jsr sendR4TubeClaimantID
6173	.aba5	041e	28		plp		                plp
6174	.aba6	041f					resetTubeClaim:
6175	.aba6	041f	a9 80		lda #$80	                lda #$80
6176	.aba8	0421	85 15		sta $15		                sta tubeClaimantID
6177	.abaa	0423	85 14		sta $14		                sta tubeNotClaimed
6178	.abac	0425	60		rts		                rts

6180	.abad	0426					claim:
6181	.abad	0426	06 14		asl $14		                asl tubeNotClaimed    ;test if Tube free
6182	.abaf	0428	b0 06		bcs $0430	                bcs claim2         ;taken if Tube free - with C=1 and
6183							                                   ;tube marked as claimed
6184	.abb1	042a	c5 15		cmp $15		                cmp tubeClaimantID
6185	.abb3	042c	f0 04		beq $0432	                beq done       ;taken with C=1 if already claimed
6186	.abb5	042e	18		clc		                clc            ;signal claim failure
6187	.abb6	042f	60		rts		                rts

6189	.abb7	0430					claim2:
6190	.abb7	0430	85 15		sta $15		                sta tubeClaimantID ; store claimant ID
6191	.abb9	0432					done:
6192	.abb9	0432	60		rts		                rts

6194	.abba	0433					dataTransfer:
6195	.abba	0433	08		php		                php
6196	.abbb	0434	78		sei		                sei
6197	.abbc	0435	84 13		sty $13		                sty tubeTransferAddr+1
6198	.abbe	0437	86 12		stx $12		                stx tubeTransferAddr+0
6199	.abc0	0439	20 73 06	jsr $0673	                jsr sendR4      ;send reason code to interrupt copro
6200	.abc3	043c	aa		tax		                tax             ;save reason code
6201	.abc4	043d	a0 03		ldy #$03	                ldy #$03        ;will send 4 bytes
6202	.abc6	043f	20 71 06	jsr $0671	                jsr sendR4TubeClaimantID ;send Tube claimant ID
6203	.abc9	0442					-
6204	.abc9	0442	b1 12		lda ($12),y	                lda (tubeTransferAddr),y
6205	.abcb	0444	20 73 06	jsr $0673	                jsr sendR4
6206	.abce	0447	88		dey		                dey
6207	.abcf	0448	10 f8		bpl $0442	                bpl -

6209							                ; disable R3 FIFO, disable R3 NMI
6210	.abd1	044a	a0 18		ldy #$18	                ldy #tube.status1.V|tube.status1.M
6211	.abd3	044c	8c e0 fe	sty $fee0	                sty tube.status1

6213							                ; disable/enable other per-transfer type flags as
6214							                ; appropriate.
6215	.abd6	044f	bd 18 05	lda $0518,x	                lda dataTransferFlags,x
6216	.abd9	0452	8d e0 fe	sta $fee0	                sta tube.status1 ;STPVMJIQ

6218	.abdc	0455	4a		lsr a		                lsr a           ;0STPVMJI Q
6219	.abdd	0456	4a		lsr a		                lsr a           ;00STPVMJ I
6220	.abde	0457	90 06		bcc $045f	                bcc +           ;branch taken if CoPro->I/O transfer

6222							                ; Read R3 twice to delay and empty FIFO
6223	.abe0	0459	2c e5 fe	bit $fee5	                bit tube.data3
6224	.abe3	045c	2c e5 fe	bit $fee5	                bit tube.data3
6225	.abe6	045f					+
6226	.abe6	045f	20 73 06	jsr $0673	                jsr sendR4      ;send value to synchronize
6227	.abe9	0462					-
6228	.abe9	0462	2c e6 fe	bit $fee6	                bit tube.status4
6229	.abec	0465	50 fb		bvc $0462	                bvc -
6230	.abee	0467	b0 0d		bcs $0476	                bcs LABE4       ;branch taken if I/O->CoPro transfer
6231	.abf0	0469	e0 04		cpx #$04	                cpx #$04        ;$04 = execute in CoPro
6232	.abf2	046b	d0 11		bne $047e	                bne LABEC       ;taken if not execute in CoPro
6233	.abf4	046d					LABDB:
6234	.abf4	046d	20 14 04	jsr $0414	                jsr release
6235	.abf7	0470	20 68 06	jsr $0668	                jsr sendR2A
6236	.abfa	0473	4c 32 00	jmp $0032	                jmp idleStartup

6238	.abfd	0476					LABE4:
6239	.abfd	0476	4a		lsr a		                lsr a            ;000STPVM J
6240	.abfe	0477	90 05		bcc $047e	                bcc LABEC        ;branch taken if J=0
6241	.ac00	0479	a0 88		ldy #$88	                ldy #tube.status1.S|tube.status1.M
6242	.ac02	047b	8c e0 fe	sty $fee0	                sty tube.status1
6243	.ac05	047e					LABEC:
6244	.ac05	047e	28		plp		                plp
6245	.ac06	047f	60		rts		                rts

6247	.ac07	0480					LABEE:
6248	.ac07	0480	ae 8d 02	ldx $028d	                ldx lastBREAKType            ;get last BREAK type
6249	.ac0a	0483	f0 e8		beq $046d	                beq LABDB   ;if soft break, release Tube, send $80 via
6250							                            ;R2, and enter idle loop.

6252							; The current language is not copied across the Tube on soft Break,
6253							; only on Power-On Break and Hard Break, or when entered explicitly
6254							; with OSBYTE 142.

6256	.ac0c	0485					enterNewLanguage: .proc
6257	.ac0c	0485	a9 ff		lda #$ff	                lda #$FF
6258	.ac0e	0487	20 06 04	jsr $0406	                jsr tubeHost.entryPoint ;claim with ID=$3f
6259	.ac11	048a	90 f9		bcc $0485	                bcc enterNewLanguage    ;repeat until claimed
6260	.ac13	048c	20 c8 04	jsr $04c8	                jsr getLanguageParasiteAddr ;sort out addresses

6262	.ac16	048f					transferPage:
6263							                .if version==350
6264	.ac16	048f	20 08 fa	jsr $fa08	                jsr mos.LF9FA
6265							                .endif
6266	.ac19	0492	08		php		                php
6267	.ac1a	0493	78		sei		                sei

6269							                ; initiate I/O->CoPro 256 bytes, then transfer the
6270							                ; next 256 bytes of the language ROM.
6271	.ac1b	0494	a9 07		lda #$07	                lda #$07
6272	.ac1d	0496	20 ba 04	jsr $04ba	                jsr doTube

6274	.ac20	0499	a0 00		ldy #$00	                ldy #$00
6275							                .if version==350
6276	.ac22	049b					transferPageLoop:
6277	.ac22	049b	b9 00 07	lda $0700,y	                lda $700,y
6278	.ac25	049e	8d e5 fe	sta $fee5	                sta tube.data3
6279	.ac28	04a1	48		pha		                pha
6280	.ac29	04a2	68		pla		                pla
6289							                .endif
6290	.ac2a	04a3	c8		iny		                iny
6291	.ac2b	04a4	d0 f5		bne $049b	                bne transferPageLoop
6292	.ac2d	04a6	28		plp		                plp

6294							                ; advance to next dest page.
6295	.ac2e	04a7	e6 54		inc $54		                inc tubeLanguageParasiteAddr+1
6296	.ac30	04a9	d0 06		bne $04b1	                bne +
6297	.ac32	04ab	e6 55		inc $55		                inc tubeLanguageParasiteAddr+2
6298	.ac34	04ad	d0 02		bne $04b1	                bne +
6299	.ac36	04af	e6 56		inc $56		                inc tubeLanguageParasiteAddr+3
6300	.ac38	04b1					+

6302							                .if version!=350
6304							                .endif
6305	.ac38	04b1	24 01		bit $01		                bit tubeLanguageHostAddr+1
6306	.ac3a	04b3	50 da		bvc $048f	                bvc transferPage ;branch taken if source page $c0 not
6307							                                 ;reached yet

6309							                ; copy done - execute language in parasite
6310							                .if version==350
6311	.ac3c	04b5	20 10 fb	jsr $fb10	                jsr mos.LFB02
6314							                .endif
6315	.ac3f	04b8	a9 04		lda #$04	                lda #$04        ;execute in copro

6317							                ; call Tube entry point with whatever reason code,
6318							                ; supplying language parasite address as the parasite
6319							                ; address.
6320	.ac41	04ba					doTube:
6321	.ac41	04ba	a0 00		ldy #$00	                ldy #>tubeLanguageParasiteAddr
6322	.ac43	04bc	a2 53		ldx #$53	                ldx #<tubeLanguageParasiteAddr
6323	.ac45	04be	4c 06 04	jmp $0406	                jmp tubeHost.entryPoint
6324							                .pend

6326	.ac48	04c1					LAC30:
6327	.ac48	04c1	58		cli		                cli
6328	.ac49	04c2	b0 c1		bcs $0485	                bcs enterNewLanguage
6329	.ac4b	04c4	d0 ba		bne $0480	                bne LABEE
6330	.ac4d	04c6	80 62		bra $052a	                bra LAC8F

6332	.ac4f	04c8					getLanguageParasiteAddr: .proc
6333	.ac4f	04c8	a9 80		lda #$80	                lda #$80
6334	.ac51	04ca	85 54		sta $54		                sta tubeLanguageParasiteAddr+1 ;$xxxx80xx
6335	.ac53	04cc	85 01		sta $01		                sta tubeLanguageHostAddr+1     ;$80xx
6336	.ac55	04ce	a9 20		lda #$20	                lda #$20
6337	.ac57	04d0	2d 06 80	and $8006	                and $8006  ;test parasite address flag
6338	.ac5a	04d3	a8		tay		                tay        ;Y=0 if $8000, Y=$20 if parasite address
6339							                .if version==350
6340	.ac5b	04d4	8c 53 00	sty $0053	                sty @w tubeLanguageParasiteAddr+0
6343							                .endif
6344	.ac5e	04d7	f0 19		beq $04f2	                beq LAC60       ;branch taken if good to go with A=0
6345							                                ;and Y=0

6347	.ac60	04d9	ae 07 80	ldx $8007	                ldx $8007       ;get copyright offset
6348							                ; skip copyright message
6349	.ac63	04dc					-
6350	.ac63	04dc	e8		inx		                inx
6351	.ac64	04dd	bd 00 80	lda $8000,x	                lda $8000,x
6352	.ac67	04e0	d0 fa		bne $04dc	                bne -

6354	.ac69	04e2	bd 01 80	lda $8001,x	                lda $8000+1,x
6355	.ac6c	04e5	85 53		sta $53		                sta tubeLanguageParasiteAddr+0
6356	.ac6e	04e7	bd 02 80	lda $8002,x	                lda $8000+2,x
6357	.ac71	04ea	85 54		sta $54		                sta tubeLanguageParasiteAddr+1
6358	.ac73	04ec	bc 03 80	ldy $8003,x	                ldy $8000+3,x
6359	.ac76	04ef	bd 04 80	lda $8004,x	                lda $8000+4,x
6360	.ac79	04f2					LAC60:
6361							                .if version==350
6362	.ac79	04f2	4c 30 fa	jmp $fa30	                jmp mos.LFA22
6368							                .endif
6369							                .pend
6370							                .here

6372	.ac7c						codePages12:
6373							                .logical tubeHostAddr+256

6375							; names of the indexes here come from app note 004
6376	.ac7c	0500					commandRoutines:
6377							                .cerror (*&$ff)!=0,"commandRoutines must be paged aligned"
6378	>ac7c	0500	35 05				                .word doRDCH    ;RDCHNO = $00
6379	>ac7e	0502	89 05				                .word doCLI     ;CLINO = $02
6380	>ac80	0504	e0 05				                .word doSBYT    ;SBYTNO = $04
6381	>ac82	0506	f1 05				                .word doBYTE    ;BYTENO = $06
6382	>ac84	0508	0d 06				                .word doWORD    ;WORDNO = $08
6383	>ac86	050a	3c 06				                .word doRDLN    ;RDLNNO = $0a
6384	>ac88	050c	59 05				                .word doARGS     ;ARGSNO = $0c
6385	>ac8a	050e	2c 05				                .word doBGET     ;BGETNO = $0e
6386	>ac8c	0510	20 05				                .word doBPUT     ;BPUTNO = $10
6387	>ac8e	0512	3f 05				                .word doFIND     ;FINDNO = $12
6388	>ac90	0514	b4 05				                .word doFILE    ;FILENO = $14
6389	>ac92	0516	9b 05				                .word doGBPB     ;GBPBNO = $16

6391							                ; Tube data transfer flags
6392	.ac94	0518					dataTransferFlags:
6393							                ; 0 - CoPro->I/O bytes
6394							                ;
6395							                ; Enable: PIRQ from R3, PIRQ from R1
6396	>ac94	0518	86				                .byte tube.status1.S|tube.status1.J|tube.status1.I

6398							                ; 1 - I/O->CoPro bytes
6399							                ;
6400							                ; Enable: PNMI from R3
6401	>ac95	0519	88				                .byte tube.status1.S|tube.status1.M

6403							                ; 2 - CoPro->I/O words
6404							                ;
6405							                ; Enable: 2-byte R3, PIRQ from R2, PIRQ from R1
6406	>ac96	051a	96				                .byte tube.status1.S|tube.status1.V|tube.status1.J|tube.status1.I

6408							                ; 3 - I/O->CoPro words
6409							                ;
6410							                ; Enable: 2-byte R3, PNMI from R3
6411	>ac97	051b	98				                .byte tube.status1.S|tube.status1.V|tube.status1.M

6413							                ; 4 - Execute in CoPro
6414							                ;
6415							                ; Disable: 2-byte R3, PNMI from R3
6416	>ac98	051c	18				                .byte tube.status1.V|tube.status1.M

6418							                ; 5 - Reserved
6419							                ;
6420							                ; Disable: 2-byte R3, PNMI from R3
6421	>ac99	051d	18				                .byte tube.status1.V|tube.status1.M

6423							                ; 6 - CoPro->I/O 256 bytes
6424							                ;
6425							                ; Enable: PIRQ from R1
6426	>ac9a	051e	82				                .byte tube.status1.S|tube.status1.I

6428							                ; 7 - I/O->CoPro 256 bytes
6429							                ;
6430							                ; Disable: 2-byte R3, PNMI from R3
6431	>ac9b	051f	18				                .byte tube.status1.V|tube.status1.M

6433	.ac9c	0520					doBPUT:
6434	.ac9c	0520	20 a8 06	jsr $06a8	                jsr recvR2      ;Receive file handle
6435	.ac9f	0523	a8		tay		                tay             ;Y = file handle
6436	.aca0	0524	20 a8 06	jsr $06a8	                jsr recvR2      ;Receive byte
6437	.aca3	0527	20 d4 ff	jsr $ffd4	                jsr OSBPUT      ;Do OSBPUT
6438	.aca6	052a					LAC8F:
6439	.aca6	052a	80 63		bra $058f	                bra sendR27FThenGoIdle

6441	.aca8	052c					doBGET:
6442	.aca8	052c	20 a8 06	jsr $06a8	                jsr recvR2      ;Receive file handle
6443	.acab	052f	a8		tay		                tay             ;Y = file handle
6444	.acac	0530	20 d7 ff	jsr $ffd7	                jsr OSBGET      ;Do OSBGET
6445	.acaf	0533					LAC98:
6446	.acaf	0533	80 03		bra $0538	                bra sendR2CAThenGoIdle

6448	.acb1	0535					doRDCH:
6449	.acb1	0535	20 e0 ff	jsr $ffe0	                jsr OSRDCH      ;Do OSRDCH
6450	.acb4	0538					sendR2CAThenGoIdle:
6451	.acb4	0538	6a		ror a		                ror a           ;set A bit 7 as per carry
6452	.acb5	0539	20 68 06	jsr $0668	                jsr sendR2A     ;send via R2
6453	.acb8	053c	2a		rol a		                rol a           ;restore A
6454	.acb9	053d	80 52		bra $0591	                bra sendR2AThenGoIdle

6456	.acbb	053f					doFIND: .proc
6457	.acbb	053f	20 a8 06	jsr $06a8	                jsr recvR2            ;Receive reason code
6458	.acbe	0542	f0 0a		beq $054e	                beq close             ;taken if A=$00 - CLOSE#
6459	.acc0	0544	48		pha		                pha                   ;save reason code
6460	.acc1	0545	20 75 05	jsr $0575	                jsr recvR2String      ;receive file name
6461	.acc4	0548	68		pla		                pla                   ;restore reason code
6462	.acc5	0549	20 ce ff	jsr $ffce	                jsr OSFIND            ;call OSFIND
6463	.acc8	054c	80 43		bra $0591	                bra sendR2AThenGoIdle

6465	.acca	054e					close:
6466	.acca	054e	20 a8 06	jsr $06a8	                jsr recvR2      ;Receive file handle
6467	.accd	0551	a8		tay		                tay             ;Y = file handle
6468	.acce	0552	a9 00		lda #$00	                lda #$00        ;A = $00 - CLOSE#
6469	.acd0	0554	20 ce ff	jsr $ffce	                jsr OSFIND      ;call OSFIND
6470	.acd3	0557	80 36		bra $058f	                bra sendR27FThenGoIdle
6471							                .pend

6473							;-------------------------------------------------------------------------
6474							;
6475							; Handle a Tube OSARGS request.
6476							;
6477							; [Tube p24]
6478							;
6479	.acd5	0559					doARGS:
6480	.acd5	0559	20 a8 06	jsr $06a8	                jsr recvR2                   ;receive file handle
6481	.acd8	055c	a8		tay		                tay                          ;Y = file handle
6482	.acd9	055d	a2 04		ldx #$04	                ldx #$04
6483	.acdb	055f	20 9a 06	jsr $069a	                jsr recvR2N ;receive 4 bytes OSARGS data, + operation code
6484	.acde	0562	20 da ff	jsr $ffda	                jsr OSARGS  ;call OSARGS
6485	.ace1	0565	20 68 06	jsr $0668	                jsr sendR2A ;send OSARGS result

6487							                ; send 4 bytes OSARGS data
6488	.ace4	0568	a2 03		ldx #$03	                ldx #$03
6489	.ace6	056a					-
6490							                .if version==350
6491	.ace6	056a	bd 00 00	lda $0000,x	                lda @w $00,x
6494							                .endif
6495	.ace9	056d	20 68 06	jsr $0668	                jsr sendR2A
6496	.acec	0570	ca		dex		                dex
6497	.aced	0571	10 f7		bpl $056a	                bpl -

6499	.acef	0573	80 24		bra $0599	                bra goIdle_0

6501							;-------------------------------------------------------------------------
6502							;
6503							; Receive a CR-terminated string over the Tube via R2.
6504							;
6505							; exit:
6506							; YX = pointer to received string (here, always $0700)
6507							;
6508	.acf1	0575					recvR2String: .proc
6509	.acf1	0575	a2 00		ldx #$00	                ldx #$00
6510	.acf3	0577	a0 00		ldy #$00	                ldy #$00        ;index
6511	.acf5	0579					-
6512	.acf5	0579	20 a8 06	jsr $06a8	                jsr recvR2      ;get next string char
6513	.acf8	057c	99 00 07	sta $0700,y	                sta tubeStringBuffer,y     ;store in string buffer
6514	.acfb	057f	c8		iny		                iny
6515	.acfc	0580	f0 04		beq $0586	                beq +           ;taken if too many bytes received
6516	.acfe	0582	c9 0d		cmp #$0d	                cmp #$0D
6517	.ad00	0584	d0 f3		bne $0579	                bne -           ;taken if end of string data not reached
6518	.ad02	0586					+
6519	.ad02	0586	a0 07		ldy #$07	                ldy #>tubeStringBuffer
6520							                .cerror (<tubeStringBuffer)!=0,"tubeStringBuffer must be page-aligned"
6521	.ad04	0588	60		rts		                rts
6522							                .pend

6524							;-------------------------------------------------------------------------
6525							;
6526							; Handle a Tube OSCLI request.
6527							;
6528							; [Tube p22]
6529							;
6530	.ad05	0589					doCLI:
6531	.ad05	0589	20 75 05	jsr $0575	                jsr recvR2String
6532	.ad08	058c	20 f7 ff	jsr $fff7	                jsr OSCLI
6533	.ad0b	058f					sendR27FThenGoIdle:
6534	.ad0b	058f	a9 7f		lda #$7f	                lda #$7F
6535	.ad0d	0591					sendR2AThenGoIdle:
6536	.ad0d	0591					-
6537	.ad0d	0591	2c e2 fe	bit $fee2	                bit tube.status2
6538	.ad10	0594	50 fb		bvc $0591	                bvc -
6539	.ad12	0596	8d e3 fe	sta $fee3	                sta tube.data2
6540	.ad15	0599					goIdle_0:
6541	.ad15	0599	80 53		bra $05ee	                bra goIdle_1

6543							;-------------------------------------------------------------------------
6544							;
6545							; Handle a Tube OSGBPB request.
6546							;
6547							; [Tube p25]
6548							;
6549	.ad17	059b					doGBPB:
6550	.ad17	059b	a2 0d		ldx #$0d	                ldx #size(OSGBPBParameterBlock)
6551							                .cerror tubeOSGBPBParameterBlock!=0,"Tube OSGBPB parameter block must be at $0000"
6552	.ad19	059d	20 9a 06	jsr $069a	                jsr recvR2N     ;receive parameter block + reason code
6553	.ad1c	05a0	a0 00		ldy #$00	                ldy #>tubeOSGBPBParameterBlock
6554	.ad1e	05a2	20 d1 ff	jsr $ffd1	                jsr OSGBPB      ;call OSGBPB
6555	.ad21	05a5	48		pha		                pha             ;save OSGBPB A result

6557							                ; Send updated OSGBPB parameter block.
6558	.ad22	05a6	a2 0c		ldx #$0c	                ldx #size(OSGBPBParameterBlock)-1
6559	.ad24	05a8					-
6560							                .if version==350
6561	.ad24	05a8	bd 00 00	lda $0000,x	                lda @w tubeOSGBPBParameterBlock,x
6564							                .endif
6565	.ad27	05ab	20 68 06	jsr $0668	                jsr sendR2A
6566	.ad2a	05ae	ca		dex		                dex
6567	.ad2b	05af	10 f7		bpl $05a8	                bpl -
6568	.ad2d	05b1	68		pla		                pla                          ;restore OSGBPB A result
6569	.ad2e	05b2	80 84		bra $0538	                bra sendR2CAThenGoIdle       ;send OSGBPB full result

6571							;-------------------------------------------------------------------------
6572							;
6573							; Handle a Tube OSFILE request.
6574							;
6575							; [Tube p24]
6576							;
6577	.ad30	05b4					doFILE: .proc
6578							                ; receive non-name part of OSFILE parameter block
6579	.ad30	05b4	a2 10		ldx #$10	                ldx #size(OSFILEParameterBlock)-2
6580	.ad32	05b6					-
6581	.ad32	05b6	20 a8 06	jsr $06a8	                jsr recvR2
6582							                .if version==350
6583	.ad35	05b9	9d 01 00	sta $0001,x	                sta @w tubeOSFILEParameterBlock.addresses-1,x
6586							                .endif
6587	.ad38	05bc	ca		dex		                dex
6588	.ad39	05bd	d0 f7		bne $05b6	                bne -
6589	.ad3b	05bf	20 75 05	jsr $0575	                jsr recvR2String
6590							                .if version==350
6591	.ad3e	05c2	8e 00 00	stx $0000	                stx @w tubeOSFILEParameterBlock+0
6592	.ad41	05c5	8c 01 00	sty $0001	                sty @w tubeOSFILEParameterBlock+1
6596							                .endif
6597	.ad44	05c8	a0 00		ldy #$00	                ldy #>tubeOSFILEParameterBlock
6598							                .cerror (<tubeOSFILEParameterBlock)!=0,"Tube OSFILE parameter block must be at $0000"
6599	.ad46	05ca	20 a8 06	jsr $06a8	                jsr recvR2                   ;receive OSFILE reason code
6600	.ad49	05cd	20 dd ff	jsr $ffdd	                jsr OSFILE                   ;call OSFILE
6601	.ad4c	05d0	20 68 06	jsr $0668	                jsr sendR2A                  ;send OSFILE result

6603							                ; send non-name part of updated OSFILE parameter block
6604	.ad4f	05d3	a2 10		ldx #$10	                ldx #size(OSFILEParameterBlock)-2
6605	.ad51	05d5					-
6606							                .if version==350
6607	.ad51	05d5	bd 01 00	lda $0001,x	                lda @w tubeOSFILEParameterBlock.addresses-1,x
6610							                .endif
6611	.ad54	05d8	20 68 06	jsr $0668	                jsr sendR2A
6612	.ad57	05db	ca		dex		                dex
6613	.ad58	05dc	d0 f7		bne $05d5	                bne -
6614	.ad5a	05de	80 0e		bra $05ee	                bra goIdle_1
6615							                .pend

6617							;-------------------------------------------------------------------------
6618							;
6619							; Handle a Tube small (A<$80) OSBYTE.
6620							;
6621							; [Tube p22]
6622							;
6623	.ad5c	05e0					doSBYT:
6624	.ad5c	05e0	20 a4 06	jsr $06a4	                jsr recvR2XA    ;receive X and A arguments
6625	.ad5f	05e3	20 f4 ff	jsr $fff4	                jsr OSBYTE
6626	.ad62	05e6					sendR2X:
6627	.ad62	05e6	2c e2 fe	bit $fee2	                bit tube.status2
6628	.ad65	05e9	50 fb		bvc $05e6	                bvc sendR2X
6629	.ad67	05eb	8e e3 fe	stx $fee3	                stx tube.data2
6630	.ad6a	05ee					goIdle_1:
6631	.ad6a	05ee	4c 36 00	jmp $0036	                jmp idleLoop

6633							;-------------------------------------------------------------------------
6634							;
6635							; Handle a Tube non-small OSBYTE.
6636							;
6637							; [Tube p22]
6638	.ad6d	05f1					doBYTE:
6639	.ad6d	05f1	20 a4 06	jsr $06a4	                jsr recvR2XA                ;receive X and Y arguments
6640	.ad70	05f4	a8		tay		                tay                         ;Y = Y argument
6641	.ad71	05f5	20 a8 06	jsr $06a8	                jsr recvR2                  ;receive A argument
6642	.ad74	05f8	20 f4 ff	jsr $fff4	                jsr OSBYTE                  ;call OSBYTE
6643	.ad77	05fb	49 9d		eor #$9d	                eor #$9D                    ;was it Fast Tube BPUT?
6644	.ad79	05fd	f0 ef		beq $05ee	                beq goIdle_1      ;if it was, done.
6645	.ad7b	05ff	6a		ror a		                ror a
6646	.ad7c	0600	20 68 06	jsr $0668	                jsr sendR2A       ;send carry result
6647	.ad7f	0603					-
6648	.ad7f	0603	2c e2 fe	bit $fee2	                bit tube.status2
6649	.ad82	0606	50 fb		bvc $0603	                bvc -
6650	.ad84	0608	8c e3 fe	sty $fee3	                sty tube.data2               ;send Y result
6651	.ad87	060b	80 d9		bra $05e6	                bra sendR2X                  ;send X result

6653							;-------------------------------------------------------------------------
6654							;
6655							; Handle a Tube OSWORD request.
6656							;
6657							; [Tube p22]
6658							;
6659	.ad89	060d					doWORD:
6660	.ad89	060d	20 a8 06	jsr $06a8	                jsr recvR2
6661	.ad8c	0610	a8		tay		                tay
6662	.ad8d	0611	20 b1 06	jsr $06b1	                jsr LAE0F
6663	.ad90	0614	30 0a		bmi $0620	                bmi LAD7F
6664	.ad92	0616					LAD75:
6665	.ad92	0616	20 a8 06	jsr $06a8	                jsr recvR2
6666	.ad95	0619	9d 28 01	sta $0128,x	                sta tubeOSWORDBuffer,x
6667	.ad98	061c	ca		dex		                dex
6668	.ad99	061d	10 f7		bpl $0616	                bpl LAD75
6669	.ad9b	061f	98		tya		                tya
6670	.ad9c	0620					LAD7F:
6671	.ad9c	0620	a2 28		ldx #$28	                ldx #<tubeOSWORDBuffer
6672	.ad9e	0622	a0 01		ldy #$01	                ldy #>tubeOSWORDBuffer
6673	.ada0	0624	20 f1 ff	jsr $fff1	                jsr OSWORD
6674	.ada3	0627	20 b1 06	jsr $06b1	                jsr LAE0F
6675	.ada6	062a	30 c2		bmi $05ee	                bmi goIdle_1
6676	.ada8	062c					LAD8B:
6677	.ada8	062c	bc 28 01	ldy $0128,x	                ldy tubeOSWORDBuffer,x
6678	.adab	062f					LAD8E:
6679	.adab	062f	2c e2 fe	bit $fee2	                bit tube.status2
6680	.adae	0632	50 fb		bvc $062f	                bvc LAD8E
6681	.adb0	0634	8c e3 fe	sty $fee3	                sty tube.data2
6682	.adb3	0637	ca		dex		                dex
6683	.adb4	0638	10 f2		bpl $062c	                bpl LAD8B
6684	.adb6	063a					LAD99:
6685	.adb6	063a	80 b2		bra $05ee	                bra goIdle_1

6687							;-------------------------------------------------------------------------

6689	.adb8	063c					doRDLN:
6690	.adb8	063c	a2 04		ldx #$04	                ldx #$04
6691	.adba	063e					LAD9D:
6692	.adba	063e	20 a8 06	jsr $06a8	                jsr recvR2
6693							                .if version==350
6694	.adbd	0641	9d 00 00	sta $0000,x	                sta @w $00,x
6697							                .endif
6698	.adc0	0644	ca		dex		                dex
6699	.adc1	0645	10 f7		bpl $063e	                bpl LAD9D
6700	.adc3	0647	e8		inx		                inx
6701	.adc4	0648	8a		txa		                txa
6702	.adc5	0649	a8		tay		                tay
6703	.adc6	064a	20 f1 ff	jsr $fff1	                jsr OSWORD
6704	.adc9	064d	90 05		bcc $0654	                bcc LADB2
6705	.adcb	064f	a9 ff		lda #$ff	                lda #$FF
6706	.adcd	0651	4c 91 05	jmp $0591	                jmp sendR2AThenGoIdle

6708	.add0	0654					LADB2:
6709	.add0	0654	a2 00		ldx #$00	                ldx #$00
6710	.add2	0656	a9 7f		lda #$7f	                lda #$7F
6711	.add4	0658	20 68 06	jsr $0668	                jsr sendR2A
6712	.add7	065b					LADB9:
6713	.add7	065b	bd 00 07	lda $0700,x	                lda $0700,x
6714	.adda	065e	20 68 06	jsr $0668	                jsr sendR2A
6715	.addd	0661	e8		inx		                inx
6716	.adde	0662	c9 0d		cmp #$0d	                cmp #$0D
6717	.ade0	0664	d0 f5		bne $065b	                bne LADB9
6718	.ade2	0666	80 d2		bra $063a	                bra LAD99

6720	.ade4	0668					sendR2A:                          ;adc6/0661
6721	.ade4	0668	2c e2 fe	bit $fee2	                bit tube.status2
6722	.ade7	066b	50 fb		bvc $0668	                bvc sendR2A
6723	.ade9	066d	8d e3 fe	sta $fee3	                sta tube.data2
6724	.adec	0670	60		rts		                rts

6726	.aded	0671					sendR4TubeClaimantID:              ;adcf
6727	.aded	0671	a5 15		lda $15		                lda tubeClaimantID ;get Tube ID
6728	.adef	0673					sendR4:                          ;add1/066c
6729	.adef	0673	2c e6 fe	bit $fee6	                bit tube.status4 ;check R4 status
6730	.adf2	0676	50 fb		bvc $0673	                bvc sendR4       ;branch taken if FIFO full
6731	.adf4	0678	8d e7 fe	sta $fee7	                sta tube.data4   ;put byte in FIFO
6732	.adf7	067b	60		rts		                rts

6734	.adf8	067c					LADDA:
6735	.adf8	067c	a5 ff		lda $ff		                lda $FF
6736	.adfa	067e	38		sec		                sec
6737	.adfb	067f	6a		ror a		                ror a
6738	.adfc	0680	80 0f		bra $0691	                bra LADEF

6740	.adfe	0682					eventHandler:
6741	.adfe	0682	48		pha		                pha
6742	.adff	0683	a9 00		lda #$00	                lda #$00
6743	.ae01	0685	20 91 06	jsr $0691	                jsr LADEF
6744	.ae04	0688	98		tya		                tya
6745	.ae05	0689	20 91 06	jsr $0691	                jsr LADEF
6746	.ae08	068c	8a		txa		                txa
6747	.ae09	068d	20 91 06	jsr $0691	                jsr LADEF
6748	.ae0c	0690	68		pla		                pla
6749	.ae0d	0691					LADEF:
6750	.ae0d	0691	2c e0 fe	bit $fee0	                bit tube.status1
6751	.ae10	0694	50 fb		bvc $0691	                bvc LADEF
6752	.ae12	0696	8d e1 fe	sta $fee1	                sta tube.data1
6753	.ae15	0699	60		rts		                rts

6755							;-------------------------------------------------------------------------
6756							;
6757							; Receive multiple bytes via R2: some kind of parameter block,
6758							; followed by the reason code. Store the first N-1 received in zero
6759							; page, starting at $00.
6760							;
6761							; entry:
6762							;
6763							; X = number of bytes to receive, minus 1
6764							;
6765							; exit:
6766							;
6767							; ?$00, ?$01... = first N-1 bytes received
6768							;
6769							; A = final byte received
6770							;
6771							; X = 0
6772							;
6773	.ae16	069a					recvR2N:
6774	.ae16	069a	20 a8 06	jsr $06a8	                jsr recvR2
6775	.ae19	069d	95 ff		sta $ff,x	                sta $ff,x
6776	.ae1b	069f	ca		dex		                dex
6777	.ae1c	06a0	d0 f8		bne $069a	                bne recvR2N
6778	.ae1e	06a2	80 04		bra $06a8	                bra recvR2

6780							;-------------------------------------------------------------------------
6781							;
6782							; Receive 2 bytes via R2.
6783							;
6784							; exit:
6785							;
6786							; X = first byte received
6787							;
6788							; A = second byte received
6789							;
6790	.ae20	06a4					recvR2XA:
6791	.ae20	06a4	20 a8 06	jsr $06a8	                jsr recvR2
6792	.ae23	06a7	aa		tax		                tax

6794							;-------------------------------------------------------------------------
6795							;
6796							; Receive 1 byte via R2.
6797							;
6798							; exit:
6799							;
6800							; A = byte received
6801							;
6802	.ae24	06a8					recvR2:
6803	.ae24	06a8	2c e2 fe	bit $fee2	                bit tube.status2
6804	.ae27	06ab	10 fb		bpl $06a8	                bpl recvR2
6805	.ae29	06ad	ad e3 fe	lda $fee3	                lda tube.data2
6806	.ae2c	06b0	60		rts		                rts

6808							;-------------------------------------------------------------------------

6810	.ae2d	06b1					LAE0F:
6811	.ae2d	06b1	2c e2 fe	bit $fee2	                bit tube.status2
6812	.ae30	06b4	10 fb		bpl $06b1	                bpl LAE0F
6813	.ae32	06b6	ae e3 fe	ldx $fee3	                ldx tube.data2
6814	.ae35	06b9	ca		dex		                dex
6815	.ae36	06ba	60		rts		                rts
6816							                .here
6817							                .bend

6819							;-------------------------------------------------------------------------
6820							                .endif

6822							                .if version<400
6823							                .include "terminal_code.s65"

:14	;******  Processing file: src/terminal_code.s65

1							;-------------------------------------------------------------------------

3	.ae37						terminalServiceEntryPoint:
4	.ae37		08		php		                php
5	.ae38		5a		phy		                phy
6	.ae39		da		phx		                phx
7	.ae3a		48		pha		                pha
8	.ae3b		c9 04		cmp #$04	                cmp #romServiceCallUnrecognisedCommand
9	.ae3d		f0 0d		beq $ae4c	                beq handleUnrecognisedCommand
10	.ae3f		c9 07		cmp #$07	                cmp #romServiceCallUnrecognisedOSBYTE
11	.ae41		f0 25		beq $ae68	                beq handleUnrecognisedOSBYTE
12	.ae43		c9 2a		cmp #$2a	                cmp #romServiceCallLanguageChange
13	.ae45		f0 74		beq $aebb	                beq handleLanguageChange
14	.ae47						LAE29:
15	.ae47		68		pla		                pla
16	.ae48		fa		plx		                plx
17	.ae49		7a		ply		                ply
18	.ae4a		28		plp		                plp
19	.ae4b		60		rts		                rts

21	.ae4c						handleUnrecognisedCommand:
22	.ae4c		20 50 b8	jsr $b850	                jsr LB832
23	.ae4f		c9 0b		cmp #$0b	                cmp #$0B
24	.ae51		d0 f4		bne $ae47	                bne LAE29
25	.ae53		68		pla		                pla
26	.ae54		fa		plx		                plx
27	.ae55		a9 8e		lda #$8e	                lda #$8E
28	.ae57		20 f4 ff	jsr $fff4	                jsr OSBYTE
29	.ae5a						LAE3C:
30	.ae5a		a2 04		ldx #$04	                ldx #$04
31	.ae5c						LAE3E:
32	.ae5c		bd 29 02	lda $0229,x	                lda INSV-1,x
33	.ae5f		dd b0 ae	cmp $aeb0,x	                cmp LAE93-1,x
34	.ae62		d0 03		bne $ae67	                bne LAE49
35	.ae64		ca		dex		                dex
36	.ae65		d0 f5		bne $ae5c	                bne LAE3E
37	.ae67						LAE49:
38	.ae67		60		rts		                rts

40	.ae68						handleUnrecognisedOSBYTE:
41	.ae68		5a		phy		                phy
42	.ae69		7a		ply		                ply
43	.ae6a		d0 db		bne $ae47	                bne LAE29
44	.ae6c		a5 ef		lda $ef		                lda $EF
45	.ae6e		c9 60		cmp #$60	                cmp #$60
46	.ae70		d0 d5		bne $ae47	                bne LAE29

48							                ; handle OSBYTE $60
49	.ae72						osbyte60:
50	.ae72		68		pla		                pla
51	.ae73		5a		phy		                phy
52	.ae74		78		sei		                sei
53	.ae75		a5 f0		lda $f0		                lda $F0
54	.ae77		30 11		bmi $ae8a	                bmi LAE6C
55	.ae79		4a		lsr a		                lsr a
56	.ae7a		d0 08		bne $ae84	                bne LAE66
57	.ae7c		a9 11		lda #$11	                lda #$11
58	.ae7e		85 76		sta $76		                sta $76
59	.ae80		66 74		ror $74		                ror $74
60	.ae82		80 c3		bra $ae47	                bra LAE29

62	.ae84						LAE66:

64	.ae84		64 78		stz $78		                stz $78
65	.ae86		66 77		ror $77		                ror $77

67	.ae88						LAE6A:
68	.ae88		80 bd		bra $ae47	                bra LAE29

70	.ae8a						LAE6C:
71	.ae8a		4a		lsr a		                lsr a
72	.ae8b		90 2e		bcc $aebb	                bcc handleLanguageChange
73	.ae8d		64 75		stz $75		                stz $75
74	.ae8f		20 5a ae	jsr $ae5a	                jsr LAE3C
75	.ae92		f0 b3		beq $ae47	                beq LAE29
76	.ae94		a2 04		ldx #$04	                ldx #$04
77	.ae96						LAE78:
78	.ae96		bd 29 02	lda $0229,x	                lda INSV-1,x
79	.ae99		95 6f		sta $6f,x	                sta oldINSV-1,x
80	.ae9b		bd b0 ae	lda $aeb0,x	                lda LAE93-1,x
81	.ae9e		9d 29 02	sta $0229,x	                sta INSV-1,x
82	.aea1		ca		dex		                dex
83	.aea2		d0 f2		bne $ae96	                bne LAE78
84	.aea4		a2 06		ldx #$06	                ldx #$06
85	.aea6						LAE88:
86	.aea6		bd b4 ae	lda $aeb4,x	                lda LAE97-1,x
87	.aea9		9d dd 0d	sta $0ddd,x	                sta ExtendedVectorAddress(INSV)-1,x
88	.aeac		ca		dex		                dex
89	.aead		d0 f7		bne $aea6	                bne LAE88
90	.aeaf		80 d7		bra $ae88	                bra LAE6A

92	.aeb1						LAE93:
93	>aeb1		3f ff				                .word mos.E_INSV
94	>aeb3		42 ff				                .word mos.E_REMV
95	.aeb5						LAE97:
96	>aeb5		f2 ae				                .word LAED4
97	>aeb7		0f				                .byte terminalROM
98	>aeb8		31 af				                .word LAF13
99	>aeba		0f				                .byte terminalROM

101	.aebb						handleLanguageChange:
102	.aebb		78		sei		                sei
103	.aebc		20 5a ae	jsr $ae5a	                jsr LAE3C
104	.aebf		d0 c7		bne $ae88	                bne LAE6A
105	.aec1		a2 06		ldx #$06	                ldx #$06
106	.aec3						LAEA5:
107	.aec3		bd dd 0d	lda $0ddd,x	                lda ExtendedVectorAddress(INSV)-1,x;extendedVectorSpace+insvIndex*3-1,x
108	.aec6		dd b4 ae	cmp $aeb4,x	                cmp LAE97-1,x
109	.aec9		d0 bd		bne $ae88	                bne LAE6A
110	.aecb		ca		dex		                dex
111	.aecc		d0 f5		bne $aec3	                bne LAEA5
112	.aece		a2 04		ldx #$04	                ldx #$04
113	.aed0						LAEB2:
114	.aed0		b5 6f		lda $6f,x	                lda oldINSV-1,x
115	.aed2		9d 29 02	sta $0229,x	                sta INSV-1,x
116	.aed5		ca		dex		                dex
117	.aed6		d0 f8		bne $aed0	                bne LAEB2
118	.aed8		a9 e6		lda #$e6	                lda #$E6
119	.aeda		20 41 b8	jsr $b841	                jsr osbyteX00Y00
120	.aedd		a9 cb		lda #$cb	                lda #$CB
121	.aedf		a2 09		ldx #$09	                ldx #$09
122	.aee1		20 43 b8	jsr $b843	                jsr osbyteY00
123	.aee4		20 38 b1	jsr $b138	                jsr LB11A
124	.aee7		1a		inc a		                inc a
125	.aee8						LAECA:
126	.aee8		20 41 b8	jsr $b841	                jsr osbyteX00Y00
127	.aeeb		3a		dec a		                dec a
128	.aeec		c9 01		cmp #$01	                cmp #$01
129	.aeee		d0 f8		bne $aee8	                bne LAECA
130	.aef0		80 96		bra $ae88	                bra LAE6A

132	.aef2						LAED4:
133	.aef2		08		php		                php
134	.aef3		78		sei		                sei
135	.aef4		e0 01		cpx #$01	                cpx #$01
136	.aef6		d0 31		bne $af29	                bne LAF0B
137	.aef8		24 77		bit $77		                bit $77
138	.aefa		10 0e		bpl $af0a	                bpl LAEEC
139	.aefc		c9 13		cmp #$13	                cmp #$13
140	.aefe		f0 05		beq $af05	                beq LAEE7
141	.af00		c9 11		cmp #$11	                cmp #$11
142	.af02		d0 06		bne $af0a	                bne LAEEC
143	.af04		18		clc		                clc
144	.af05						LAEE7:
145	.af05		66 78		ror $78		                ror $78
146	.af07						LAEE9:
147	.af07		28		plp		                plp
148	.af08		18		clc		                clc
149	.af09		60		rts		                rts

151	.af0a						LAEEC:
152	.af0a		24 74		bit $74		                bit $74
153	.af0c		10 1b		bpl $af29	                bpl LAF0B
154	.af0e		48		pha		                pha
155	.af0f		38		sec		                sec
156	.af10		20 2d af	jsr $af2d	                jsr LAF0F
157	.af13		98		tya		                tya
158	.af14		d0 10		bne $af26	                bne LAF08
159	.af16		e0 20		cpx #$20	                cpx #$20
160	.af18		b0 0c		bcs $af26	                bcs LAF08
161	.af1a		a9 13		lda #$13	                lda #$13
162	.af1c		e0 10		cpx #$10	                cpx #$10
163	.af1e		90 04		bcc $af24	                bcc LAF06
164	.af20		c5 76		cmp $76		                cmp $76
165	.af22		f0 02		beq $af26	                beq LAF08
166	.af24						LAF06:
167	.af24		85 75		sta $75		                sta $75
168	.af26						LAF08:
169	.af26		68		pla		                pla
170	.af27		a2 01		ldx #$01	                ldx #$01
171	.af29						LAF0B:
172	.af29		28		plp		                plp
173	.af2a		6c 70 00	jmp ($0070)	                jmp ($0070)

175	.af2d						LAF0F:
176	.af2d		b8		clv		                clv
177	.af2e		6c 2e 02	jmp ($022e)	                jmp (CNPV)

179	.af31						LAF13:
180	.af31		08		php		                php
181	.af32		78		sei		                sei
182	.af33		e0 01		cpx #$01	                cpx #$01
183	.af35		d0 1e		bne $af55	                bne LAF37
184	.af37		24 74		bit $74		                bit $74
185	.af39		10 16		bpl $af51	                bpl LAF33
186	.af3b		18		clc		                clc
187	.af3c		20 2d af	jsr $af2d	                jsr LAF0F
188	.af3f		c0 00		cpy #$00	                cpy #$00
189	.af41		d0 0c		bne $af4f	                bne LAF31
190	.af43		e0 20		cpx #$20	                cpx #$20
191	.af45		b0 08		bcs $af4f	                bcs LAF31
192	.af47		a9 11		lda #$11	                lda #$11
193	.af49		c5 76		cmp $76		                cmp $76
194	.af4b		f0 02		beq $af4f	                beq LAF31
195	.af4d		85 75		sta $75		                sta $75
196	.af4f						LAF31:
197	.af4f		a2 01		ldx #$01	                ldx #$01
198	.af51						LAF33:
199	.af51		28		plp		                plp
200	.af52		6c 72 00	jmp ($0072)	                jmp ($0072)

202	.af55						LAF37:
203	.af55		e0 02		cpx #$02	                cpx #$02
204	.af57		d0 f8		bne $af51	                bne LAF33
205	.af59		a5 75		lda $75		                lda $75
206	.af5b		a8		tay		                tay
207	.af5c		f0 08		beq $af66	                beq LAF48
208	.af5e		70 a7		bvs $af07	                bvs LAEE9
209	.af60		64 75		stz $75		                stz $75
210	.af62		85 76		sta $76		                sta $76
211	.af64		80 a1		bra $af07	                bra LAEE9

213	.af66						LAF48:
214	.af66		a5 78		lda $78		                lda $78
215	.af68		10 e7		bpl $af51	                bpl LAF33
216	.af6a		28		plp		                plp
217	.af6b		38		sec		                sec
218	.af6c						LAF4E:
219	.af6c		60		rts		                rts

221							;-------------------------------------------------------------------------

223	.af6d						terminalBRKHandler:
224	.af6d		a9 da		lda #$da	                lda #$DA
225	.af6f		20 41 b8	jsr $b841	                jsr osbyteX00Y00             ;Set VDU queue length to 0
226	.af72		20 52 b6	jsr $b652	                jsr disableESCAPE
227	.af75		a0 00		ldy #$00	                ldy #$00
228	.af77		b1 fd		lda ($fd),y	                lda (errPtr),y
229	.af79		d0 06		bne $af81	                bne LAF63
230	.af7b		64 20		stz $20		                stz $20
231	.af7d		a9 16		lda #$16	                lda #$16
232	.af7f		85 6f		sta $6f		                sta $6F
233	.af81						LAF63:
234	.af81		a9 0d		lda #$0d	                lda #13
235	.af83						-
236	.af83		20 e3 ff	jsr $ffe3	                jsr OSASCI
237	.af86		c8		iny		                iny
238	.af87		b1 fd		lda ($fd),y	                lda (errPtr),y
239	.af89		d0 f8		bne $af83	                bne -
240	.af8b		20 e7 ff	jsr $ffe7	                jsr OSNEWL
241	.af8e		38		sec		                sec
242	.af8f		66 19		ror $19		                ror $19
243	.af91		a5 1a		lda $1a		                lda $1A
244	.af93		d0 7d		bne $b012	                bne LAFF4
245	.af95						terminalLanguageEntryPoint:
246	.af95		3a		dec a		                dec a
247	.af96		d0 d4		bne $af6c	                bne LAF4E
248	.af98		a9 01		lda #$01	                lda #$01
249	.af9a		85 6f		sta $6f		                sta $6F
250	.af9c						LAF7E:
251	.af9c		78		sei		                sei
252	.af9d		a2 fe		ldx #$fe	                ldx #$FE
253	.af9f		9a		txs		                txs
254	.afa0		a9 6d		lda #$6d	                lda #<terminalBRKHandler
255	.afa2		8d 02 02	sta $0202	                sta BRKV+0
256	.afa5		a9 af		lda #$af	                lda #>terminalBRKHandler
257	.afa7		8d 03 02	sta $0203	                sta BRKV+1
258	.afaa		a9 cf		lda #$cf	                lda #<terminalINDnHandler
259	.afac		8d 30 02	sta $0230	                sta IND1V+0
260	.afaf		a9 b7		lda #$b7	                lda #>terminalINDnHandler
261	.afb1		8d 31 02	sta $0231	                sta IND1V+1
262	.afb4		a9 cf		lda #$cf	                lda #<terminalINDnHandler
263	.afb6		8d 32 02	sta $0232	                sta IND2V+0
264	.afb9		a9 b7		lda #$b7	                lda #>terminalINDnHandler
265	.afbb		8d 33 02	sta $0233	                sta IND2V+1

267							                ; Clear zero page
268	.afbe		a2 6e		ldx #$6e	                ldx #$6E
269	.afc0						-
270	.afc0		74 00		stz $00,x	                stz $00,x
271	.afc2		ca		dex		                dex
272	.afc3		10 fb		bpl $afc0	                bpl -

274	.afc5		c6 21		dec $21		                dec $21
275	.afc7		c6 34		dec $34		                dec $34
276	.afc9		c6 36		dec $36		                dec $36
277	.afcb		58		cli		                cli
278	.afcc		a9 0b		lda #$0b	                lda #$0B
279	.afce		20 ae b6	jsr $b6ae	                jsr LB690
280	.afd1		a9 87		lda #$87	                lda #$87
281	.afd3		20 f4 ff	jsr $fff4	                jsr OSBYTE                   ;Read screen mode
282	.afd6		98		tya		                tya                          ;A = screen mode
283	.afd7		20 97 b5	jsr $b597	                jsr reinitDisplayMode
284	.afda		a0 ff		ldy #$ff	                ldy #$FF
285	.afdc						-
286	.afdc		c8		iny		                iny
287	.afdd		b9 ec af	lda $afec,y	                lda initOSBYTEAs,y
288	.afe0		f0 30		beq $b012	                beq LAFF4
289	.afe2		be ff af	ldx $afff,y	                ldx initOSBYTEXs,y
290	.afe5		5a		phy		                phy
291	.afe6		20 43 b8	jsr $b843	                jsr osbyteY00
292	.afe9		7a		ply		                ply
293	.afea		80 f0		bra $afdc	                bra -

295							;-------------------------------------------------------------------------

297	.afec						initOSBYTEAs:
298	>afec		cb				                .byte $CB ;OSBYTE 203 (&CB) Read/write RS423 input buffer [MasRef D.2-64]
299	>afed		60				                .byte $60 ;OSBYTE 96 (&60) ???
300	>afee		60				                .byte $60 ;OSBYTE 96 (&60) ???
301	>afef		60				                .byte $60 ;OSBYTE 96 (&60) ???
302	>aff0		0f				                .byte $0F ;OSBYTE 15 (&0F) Flush buffer [MasRef D.2-24]
303	>aff1		0f				                .byte $0F ;OSBYTE 15 (&0F) Flush buffer [MasRef D.2-24]
304	>aff2		dd				                .byte $dd ;OSBYTE 221 (&DD) Read/write interpretation of input values 192-207 [MasRef D.2-73]
305	>aff3		de				                .byte $de ;OSBYTE 222 (&DE) Read/write interpretation of input values 208-223 [MasRef D.2-73]
306	>aff4		df				                .byte $df ;OSBYTE 223 (&DF) Read/write interpretation of input values 224-239 [MasRef D.2-73]
307	>aff5		e0				                .byte $e0 ;OSBYTE 224 (&E0) Read/write interpretation of input values 240-255 [MasRef D.2-73]
308	>aff6		e1				                .byte $e1 ;OSBYTE 225 (&E1) Read/write soft key interpretation [MasRef D.2-74]
309	>aff7		e2				                .byte $E2 ;OSBYTE 226 (&E2) Read/write SHIFT+soft key interpretation [MasRef D.2-74]
310	>aff8		e3				                .byte $E3 ;OSBYTE 227 (&E3) Read/write CTRL+soft key interpretation [MasRef D.2-74]
311	>aff9		e4				                .byte $e4 ;OSBYTE 228 (&E4) Read/write SHIFT+CTRL+soft key interpretation [MasRef D.2-74]
312	>affa		e5				                .byte $e5 ;OSBYTE 229 (&E5) Read/write ESCAPE key status [MasRef D.2-75]
313	>affb		04				                .byte $04 ;OSBYTE 4 (&04) Enable/disable cursor editing [MasRef D.2-19]
314	>affc		7e				                .byte $7e ;OSBYTE 126 (&7E) Acknowledge escape condition [MasRef D.2-37]
315	>affd		e6				                .byte $e6 ;OSBYTE 230 (&E6) Read/write ESCAPE effects [MasRef D.2-75]
316	>affe		02				                .byte $02 ;OSBYTE 2 (&02) Specify input stream [MasRef D.2-18]

318	.afff						initOSBYTEXs:
319	>afff		00				                .byte $00
320	>b000		01				                .byte $01
321	>b001		03				                .byte $03
322	>b002		ff				                .byte $ff
323	>b003		01				                .byte $01
324	>b004		02				                .byte $02
325	>b005		c0				                .byte $c0
326	>b006		d0				                .byte $d0
327	>b007		e0				                .byte $e0
328	>b008		f0				                .byte $f0
329	>b009		01				                .byte $01
330	>b00a		90				                .byte $90
331	>b00b		a0				                .byte $a0
332	>b00c		a0				                .byte $a0
333	>b00d		01				                .byte $01
334	>b00e		00				                .byte $00
335	>b00f		00				                .byte $00
336	>b010		01				                .byte $01
337	>b011		02				                .byte $02

339							;-------------------------------------------------------------------------

341	.b012						LAFF4:
342	.b012		a2 fe		ldx #$fe	                ldx #$FE
343	.b014		9a		txs		                txs
344	.b015		38		sec		                sec
345	.b016		66 1a		ror $1a		                ror $1A
346	.b018		64 1d		stz $1d		                stz $1D
347	.b01a		20 22 b0	jsr $b022	                jsr LB004
348	.b01d		20 22 b0	jsr $b022	                jsr LB004
349	.b020		80 2c		bra $b04e	                bra LB030

351	.b022						LB004:
352	.b022		20 5f b0	jsr $b05f	                jsr LB041
353	.b025		a0 01		ldy #$01	                ldy #$01
354	.b027		91 1b		sta ($1b),y	                sta ($1B),y
355	.b029		c8		iny		                iny
356	.b02a		8a		txa		                txa
357	.b02b		91 1b		sta ($1b),y	                sta ($1B),y
358	.b02d		c8		iny		                iny
359	.b02e		98		tya		                tya
360	.b02f		91 1b		sta ($1b),y	                sta ($1B),y
361	.b031		0a		asl a		                asl a
362	.b032		92 1b		sta ($1b)	                sta ($1B)
363	.b034		60		rts		                rts

365	.b035						LB017:
366	.b035		08		php		                php
367	.b036		48		pha		                pha
368	.b037		da		phx		                phx
369	.b038		5a		phy		                phy
370	.b039		ba		tsx		                tsx
371	.b03a		e8		inx		                inx
372	.b03b		8a		txa		                txa
373	.b03c		49 ff		eor #$ff	                eor #$FF
374	.b03e		92 1b		sta ($1b)	                sta ($1B)
375	.b040		a8		tay		                tay
376	.b041						LB023:
377	.b041		68		pla		                pla
378	.b042		91 1b		sta ($1b),y	                sta ($1B),y
379	.b044		88		dey		                dey
380	.b045		d0 fa		bne $b041	                bne LB023
381	.b047		a9 20		lda #$20	                lda #$20
382	.b049		85 1e		sta $1e		                sta $1E
383	.b04b		20 5f b0	jsr $b05f	                jsr LB041
384	.b04e						LB030:
385	.b04e		b2 1b		lda ($1b)	                lda ($1B)
386	.b050		aa		tax		                tax
387	.b051		a0 00		ldy #$00	                ldy #$00
388	.b053						LB035:
389	.b053		c8		iny		                iny
390	.b054		b1 1b		lda ($1b),y	                lda ($1B),y
391	.b056		48		pha		                pha
392	.b057		ca		dex		                dex
393	.b058		d0 f9		bne $b053	                bne LB035
394	.b05a		7a		ply		                ply
395	.b05b		fa		plx		                plx
396	.b05c		68		pla		                pla
397	.b05d		28		plp		                plp
398	.b05e		60		rts		                rts

400	.b05f						LB041:
401	.b05f		a0 04		ldy #$04	                ldy #$04
402	.b061		84 1c		sty $1c		                sty $1C
403	.b063		a0 20		ldy #$20	                ldy #$20
404							                ; Is this an adress?
405							                .if version==350
406	.b065		a2 6e		ldx #$6e	                ldx #$6e
409							                .endif
410	.b067		a9 b6		lda #$b6	                lda #$B6
411	.b069		46 1d		lsr $1d		                lsr $1D
412	.b06b		b0 0c		bcs $b079	                bcs LB05B
413	.b06d		e6 1d		inc $1d		                inc $1D
414	.b06f		a0 04		ldy #$04	                ldy #$04
415	.b071		84 1c		sty $1c		                sty $1C
416	.b073		a0 00		ldy #$00	                ldy #$00
417							                .if version==350
418	.b075		a2 7b		ldx #$7b	                ldx #$7b
421							                .endif
422	.b077		a9 b0		lda #$b0	                lda #$B0
423	.b079						LB05B:
424	.b079		84 1b		sty $1b		                sty $1B
425	.b07b		60		rts		                rts

427	.b07c						LB05E:
428	.b07c		20 81 b0	jsr $b081	                jsr LB063
429	.b07f		80 fb		bra $b07c	                bra LB05E

431	.b081						LB063:
432	.b081		24 20		bit $20		                bit $20
433	.b083		10 05		bpl $b08a	                bpl LB06C
434	.b085		20 b4 b0	jsr $b0b4	                jsr LB096
435	.b088		90 17		bcc $b0a1	                bcc LB083
436	.b08a						LB06C:
437	.b08a		80 a9		bra $b035	                bra LB017

439	.b08c						LB06E:
440	.b08c		c9 0a		cmp #$0a	                cmp #$0A
441	.b08e		90 0f		bcc $b09f	                bcc LB081
442	.b090		a2 00		ldx #$00	                ldx #$00
443	.b092						LB074:
444	.b092		e8		inx		                inx
445	.b093		e9 0a		sbc #$0a	                sbc #$0A
446	.b095		c9 0a		cmp #$0a	                cmp #$0A
447	.b097		b0 f9		bcs $b092	                bcs LB074
448	.b099		48		pha		                pha
449	.b09a		8a		txa		                txa
450	.b09b		20 8c b0	jsr $b08c	                jsr LB06E
451	.b09e		68		pla		                pla
452	.b09f						LB081:
453	.b09f		09 30		ora #$30	                ora #$30
454	.b0a1						LB083:
455	.b0a1		48		pha		                pha
456	.b0a2		5a		phy		                phy
457	.b0a3		a8		tay		                tay
458	.b0a4		a9 8a		lda #$8a	                lda #$8A
459	.b0a6		a2 02		ldx #$02	                ldx #$02
460	.b0a8		20 f4 ff	jsr $fff4	                jsr OSBYTE
461	.b0ab		7a		ply		                ply
462	.b0ac		68		pla		                pla
463	.b0ad		90 1f		bcc $b0ce	                bcc LB0B0
464	.b0af		20 35 b0	jsr $b035	                jsr LB017
465	.b0b2		80 ed		bra $b0a1	                bra LB083

467	.b0b4						LB096:
468	.b0b4		a4 6f		ldy $6f		                ldy $6F
469	.b0b6		f0 17		beq $b0cf	                beq LB0B1
470	.b0b8		e6 6f		inc $6f		                inc $6F
471	.b0ba		b9 69 b1	lda $b169,y	                lda LB14C-1,y
472	.b0bd		10 0d		bpl $b0cc	                bpl LB0AE
473	.b0bf		64 6f		stz $6f		                stz $6F
474	.b0c1		48		pha		                pha
475	.b0c2		a9 d9		lda #$d9	                lda #$D9
476	.b0c4		20 41 b8	jsr $b841	                jsr osbyteX00Y00
477	.b0c7		68		pla		                pla
478	.b0c8		a0 18		ldy #$18	                ldy #$18
479	.b0ca		84 1f		sty $1f		                sty $1F
480	.b0cc						LB0AE:
481	.b0cc		0a		asl a		                asl a
482	.b0cd		4a		lsr a		                lsr a
483	.b0ce						LB0B0:
484	.b0ce		60		rts		                rts

486	.b0cf						LB0B1:
487	.b0cf		a9 81		lda #$81	                lda #$81
488	.b0d1		20 41 b8	jsr $b841	                jsr osbyteX00Y00
489	.b0d4		8a		txa		                txa
490	.b0d5		b0 f7		bcs $b0ce	                bcs LB0B0
491	.b0d7		10 f5		bpl $b0ce	                bpl LB0B0
492	.b0d9		c9 e0		cmp #$e0	                cmp #$E0
493	.b0db		b0 f1		bcs $b0ce	                bcs LB0B0
494	.b0dd		20 e2 b0	jsr $b0e2	                jsr LB0C4
495	.b0e0		38		sec		                sec
496	.b0e1						LB0C3:
497	.b0e1		60		rts		                rts

499	.b0e2						LB0C4:
500	.b0e2		c9 99		cmp #$99	                cmp #$99
501	.b0e4		f0 62		beq $b148	                beq LB12A
502	.b0e6		29 0f		and #$0f	                and #$0F
503	.b0e8		f0 1d		beq $b107	                beq LB0E9
504	.b0ea		c9 02		cmp #$02	                cmp #$02
505	.b0ec		90 1e		bcc $b10c	                bcc LB0EE
506	.b0ee		f0 f1		beq $b0e1	                beq LB0C3
507	.b0f0		c9 04		cmp #$04	                cmp #$04
508	.b0f2		90 40		bcc $b134	                bcc LB116
509	.b0f4		f0 42		beq $b138	                beq LB11A
510	.b0f6		c9 06		cmp #$06	                cmp #$06
511	.b0f8		90 2e		bcc $b128	                bcc LB10A
512	.b0fa		f0 17		beq $b113	                beq LB0F5
513	.b0fc		c9 08		cmp #$08	                cmp #$08
514	.b0fe		90 e1		bcc $b0e1	                bcc LB0C3
515	.b100		f0 3a		beq $b13c	                beq LB11E
516	.b102		c9 09		cmp #$09	                cmp #$09
517	.b104		f0 46		beq $b14c	                beq LB12E
518	.b106		60		rts		                rts

520	.b107						LB0E9:
521	.b107		a9 0c		lda #$0c	                lda #$0C
522	.b109						LB0EB:
523	.b109		4c ee ff	jmp $ffee	                jmp OSWRCH

525	.b10c						LB0EE:
526	.b10c		a9 16		lda #$16	                lda #$16
527	.b10e		85 6f		sta $6f		                sta $6F
528	.b110		64 20		stz $20		                stz $20
529	.b112		60		rts		                rts

531	.b113						LB0F5:
532	.b113		a2 10		ldx #$10	                ldx #$10
533	.b115		20 1f b1	jsr $b11f	                jsr LB101
534	.b118		29 10		and #$10	                and #$10
535	.b11a		d0 15		bne $b131	                bne LB113
536	.b11c						LB0FE:
537	.b11c		4c d4 b7	jmp $b7d4	                jmp LB7B6

539	.b11f						LB101:
540	.b11f		a9 ec		lda #$ec	                lda #$EC
541	.b121		a0 ff		ldy #$ff	                ldy #$FF
542	.b123		20 f4 ff	jsr $fff4	                jsr OSBYTE
543	.b126		8a		txa		                txa
544	.b127		60		rts		                rts

546	.b128						LB10A:
547	.b128		a2 40		ldx #$40	                ldx #$40
548	.b12a		20 1f b1	jsr $b11f	                jsr LB101
549	.b12d		29 40		and #$40	                and #$40
550	.b12f		f0 eb		beq $b11c	                beq LB0FE
551	.b131						LB113:
552	.b131		4c 00 b8	jmp $b800	                jmp LB7E2

554	.b134						LB116:
555	.b134		a9 02		lda #$02	                lda #$02
556	.b136		80 d1		bra $b109	                bra LB0EB

558	.b138						LB11A:
559	.b138		a9 03		lda #$03	                lda #$03
560	.b13a		80 cd		bra $b109	                bra LB0EB

562	.b13c						LB11E:
563	.b13c		a9 ff		lda #$ff	                lda #$FF
564	.b13e		45 21		eor $21		                eor $21
565	.b140		85 21		sta $21		                sta $21
566	.b142		85 20		sta $20		                sta $20
567	.b144		d0 d6		bne $b11c	                bne LB0FE
568	.b146		80 e9		bra $b131	                bra LB113

570	.b148						LB12A:
571	.b148		a2 0c		ldx #$0c	                ldx #$0C
572	.b14a		80 02		bra $b14e	                bra LB130

574	.b14c						LB12E:
575	.b14c		a2 af		ldx #$af	                ldx #$AF
576	.b14e						LB130:
577	.b14e		da		phx		                phx
578	.b14f		a2 60		ldx #$60	                ldx #$60
579	.b151		20 48 b8	jsr $b848	                jsr LB82A
580	.b154		fa		plx		                plx
581	.b155						LB137:
582	.b155		da		phx		                phx
583	.b156		a9 13		lda #$13	                lda #$13
584	.b158		20 f4 ff	jsr $fff4	                jsr OSBYTE
585	.b15b		fa		plx		                plx
586	.b15c		ca		dex		                dex
587	.b15d		d0 f6		bne $b155	                bne LB137
588	.b15f		a2 00		ldx #$00	                ldx #$00
589	.b161		20 48 b8	jsr $b848	                jsr LB82A
590	.b164						LB146:
591	.b164		20 b6 b1	jsr $b1b6	                jsr LB198
592	.b167		90 fb		bcc $b164	                bcc LB146
593	.b169		60		rts		                rts

595	.b16a						LB14C:
596	>b16a		1b				                .byte $1B
597	.b16b		5e 2a 4b	lsr $4b2a,x	                lsr $4B2A,x
598	.b16e		45 59		eor $59		                eor $59
599	.b170		39 7c 21	and $217c,y	                and $217C,y
600	.b173		7c 59 1b	jmp ($1b59,x)	                jmp ($1B59,x)

602	>b176		5c				                .byte $5C
603	>b177		54				                .byte $54
604	.b178		45 52		eor $52		                eor $52
605	.b17a		4d 49 4e	eor $4e49	                eor $4E49
606	.b17d		41 4c		eor ($4c,x)	                eor ($4C,x)
607	.b17f		0d 0a 3d	ora $3d0a	                ora $3D0A
608	>b182		1b				                .byte $1B
609							;BNE LB187        :\ B165= D0 20       P
610							;BVS LB11A        :\ B167= 70 B1       p1
611	>b183		d0				                .byte $D0
612	.b184						LB166:
613	.b184		20 8e b1	jsr $b18e	                jsr LB170
614	.b187		b0 59		bcs $b1e2	                bcs LB1C4
615	.b189		c9 1b		cmp #$1b	                cmp #$1B
616	.b18b		d0 f7		bne $b184	                bne LB166
617	.b18d		60		rts		                rts

619	.b18e						LB170:
620	.b18e		20 98 b1	jsr $b198	                jsr LB17A
621	.b191		c9 7f		cmp #$7f	                cmp #$7F
622	.b193		f0 f9		beq $b18e	                beq LB170
623	.b195		c9 20		cmp #$20	                cmp #$20
624	.b197		60		rts		                rts

626	.b198						LB17A:
627	.b198		da		phx		                phx
628	.b199		5a		phy		                phy
629	.b19a						LB17C:
630	.b19a		20 a7 b1	jsr $b1a7	                jsr LB189
631	.b19d		b0 03		bcs $b1a2	                bcs LB184
632	.b19f		7a		ply		                ply
633	.b1a0		fa		plx		                plx
634	.b1a1		60		rts		                rts

636	.b1a2						LB184:
637	.b1a2		20 35 b0	jsr $b035	                jsr LB017
638	.b1a5						LB187:
639	.b1a5		80 f3		bra $b19a	                bra LB17C

641	.b1a7						LB189:
642	.b1a7		24 20		bit $20		                bit $20
643	.b1a9		30 03		bmi $b1ae	                bmi LB190
644	.b1ab		4c b4 b0	jmp $b0b4	                jmp LB096

646	.b1ae						LB190:
647	.b1ae		24 25		bit $25		                bit $25
648	.b1b0		30 4c		bmi $b1fe	                bmi LB1E0
649	.b1b2		24 23		bit $23		                bit $23
650	.b1b4		30 0b		bmi $b1c1	                bmi LB1A3
651	.b1b6						LB198:
652	.b1b6		a9 91		lda #$91	                lda #$91
653	.b1b8		a2 01		ldx #$01	                ldx #$01
654	.b1ba		20 f4 ff	jsr $fff4	                jsr OSBYTE
655	.b1bd		98		tya		                tya
656	.b1be		25 22		and $22		                and $22
657	.b1c0						LB1A2:
658	.b1c0		60		rts		                rts

660	.b1c1						LB1A3:
661	.b1c1		20 b6 b1	jsr $b1b6	                jsr LB198
662	.b1c4		b0 fa		bcs $b1c0	                bcs LB1A2
663	.b1c6		20 ee b1	jsr $b1ee	                jsr LB1D0
664	.b1c9		90 54		bcc $b21f	                bcc LB201
665	.b1cb		0a		asl a		                asl a
666	.b1cc		0a		asl a		                asl a
667	.b1cd		0a		asl a		                asl a
668	.b1ce		0a		asl a		                asl a
669	.b1cf		85 24		sta $24		                sta $24
670	.b1d1						LB1B3:
671	.b1d1		20 b6 b1	jsr $b1b6	                jsr LB198
672	.b1d4		90 05		bcc $b1db	                bcc LB1BD
673	.b1d6		20 35 b0	jsr $b035	                jsr LB017
674	.b1d9		80 f6		bra $b1d1	                bra LB1B3

676	.b1db						LB1BD:
677	.b1db		20 ee b1	jsr $b1ee	                jsr LB1D0
678	.b1de		90 f1		bcc $b1d1	                bcc LB1B3
679	.b1e0		05 24		ora $24		                ora $24
680	.b1e2						LB1C4:
681	.b1e2		18		clc		                clc
682	.b1e3		60		rts		                rts

684	.b1e4						LB1C6:
685	.b1e4		20 84 b1	jsr $b184	                jsr LB166
686	.b1e7		90 05		bcc $b1ee	                bcc LB1D0
687	.b1e9		fa		plx		                plx
688	.b1ea		fa		plx		                plx
689	.b1eb		4c a7 b3	jmp $b3a7	                jmp LB389

691	.b1ee						LB1D0:
692	.b1ee		c9 3a		cmp #$3a	                cmp #$3A
693	.b1f0		b0 03		bcs $b1f5	                bcs LB1D7
694	.b1f2		e9 2f		sbc #$2f	                sbc #$2F
695	.b1f4		60		rts		                rts

697	.b1f5						LB1D7:
698	.b1f5		e9 37		sbc #$37	                sbc #$37
699	.b1f7		c9 10		cmp #$10	                cmp #$10
700	.b1f9		b0 e7		bcs $b1e2	                bcs LB1C4
701	.b1fb		c9 0a		cmp #$0a	                cmp #$0A
702	.b1fd						LB1DF:
703	.b1fd		60		rts		                rts

705	.b1fe						LB1E0:
706	.b1fe		64 26		stz $26		                stz $26
707	.b200		20 b6 b1	jsr $b1b6	                jsr LB198
708	.b203		b0 f8		bcs $b1fd	                bcs LB1DF
709	.b205		c9 7f		cmp #$7f	                cmp #$7F
710	.b207		b0 f4		bcs $b1fd	                bcs LB1DF
711	.b209		c9 20		cmp #$20	                cmp #$20
712	.b20b		b0 14		bcs $b221	                bcs LB203
713	.b20d		24 27		bit $27		                bit $27
714	.b20f		30 0e		bmi $b21f	                bmi LB201
715	.b211		c9 07		cmp #$07	                cmp #$07
716	.b213		90 0a		bcc $b21f	                bcc LB201
717	.b215		f0 47		beq $b25e	                beq LB240
718	.b217		c9 0b		cmp #$0b	                cmp #$0B
719	.b219		90 43		bcc $b25e	                bcc LB240
720	.b21b		c9 0d		cmp #$0d	                cmp #$0D
721	.b21d		f0 3f		beq $b25e	                beq LB240
722	.b21f						LB201:
723	.b21f		38		sec		                sec
724	.b220		60		rts		                rts

726	.b221						LB203:
727	.b221		64 27		stz $27		                stz $27
728	.b223		c9 7c		cmp #$7c	                cmp #$7C
729	.b225		d0 35		bne $b25c	                bne LB23E
730	.b227						LB209:
731	.b227		20 b6 b1	jsr $b1b6	                jsr LB198
732	.b22a		90 05		bcc $b231	                bcc LB213
733	.b22c		20 35 b0	jsr $b035	                jsr LB017
734	.b22f		80 f6		bra $b227	                bra LB209

736	.b231						LB213:
737	.b231		c9 20		cmp #$20	                cmp #$20
738	.b233		90 2b		bcc $b260	                bcc LB242
739	.b235		c9 21		cmp #$21	                cmp #$21
740	.b237		d0 14		bne $b24d	                bne LB22F
741	.b239		a9 80		lda #$80	                lda #$80
742	.b23b		85 26		sta $26		                sta $26
743	.b23d						LB21F:
744	.b23d		20 b6 b1	jsr $b1b6	                jsr LB198
745	.b240		90 05		bcc $b247	                bcc LB229
746	.b242		20 35 b0	jsr $b035	                jsr LB017
747	.b245		80 f6		bra $b23d	                bra LB21F

749	.b247						LB229:
750	.b247		c9 20		cmp #$20	                cmp #$20
751	.b249		90 f2		bcc $b23d	                bcc LB21F
752	.b24b		80 d4		bra $b221	                bra LB203

754	.b24d						LB22F:
755	.b24d		c9 3f		cmp #$3f	                cmp #$3F
756	.b24f		d0 03		bne $b254	                bne LB236
757	.b251		a9 7f		lda #$7f	                lda #$7F
758	.b253		18		clc		                clc
759	.b254						LB236:
760	.b254		90 06		bcc $b25c	                bcc LB23E
761	.b256		c9 7c		cmp #$7c	                cmp #$7C
762	.b258		f0 02		beq $b25c	                beq LB23E
763	.b25a		29 9f		and #$9f	                and #$9F
764	.b25c						LB23E:
765	.b25c		05 26		ora $26		                ora $26
766	.b25e						LB240:
767	.b25e		18		clc		                clc
768	.b25f		60		rts		                rts

770	.b260						LB242:
771	.b260		38		sec		                sec
772	.b261		66 27		ror $27		                ror $27
773	.b263		38		sec		                sec
774	.b264		60		rts		                rts

776	.b265						LB247:
777	.b265		a9 00		lda #$00	                lda #$00
778	.b267		85 f2		sta $f2		                sta $F2
779	.b269		a9 05		lda #$05	                lda #$05
780	.b26b		85 f3		sta $f3		                sta $F3
781	.b26d		a0 00		ldy #$00	                ldy #$00
782	.b26f						LB251:
783	.b26f		20 98 b1	jsr $b198	                jsr LB17A
784	.b272		a6 1f		ldx $1f		                ldx $1F
785	.b274		f0 3e		beq $b2b4	                beq LB296
786	.b276		64 2b		stz $2b		                stz $2B
787	.b278		c9 1b		cmp #$1b	                cmp #$1B
788	.b27a		d0 04		bne $b280	                bne LB262
789	.b27c		a0 00		ldy #$00	                ldy #$00
790	.b27e		80 04		bra $b284	                bra LB266

792	.b280						LB262:
793	.b280		c9 0d		cmp #$0d	                cmp #$0D
794	.b282		d0 0d		bne $b291	                bne LB273
795	.b284						LB266:
796	.b284		a9 0d		lda #$0d	                lda #$0D
797	.b286		91 f2		sta ($f2),y	                sta ($F2),y
798	.b288		24 2b		bit $2b		                bit $2B
799	.b28a		30 03		bmi $b28f	                bmi LB271
800	.b28c		20 e3 ff	jsr $ffe3	                jsr OSASCI
801	.b28f						LB271:
802	.b28f		18		clc		                clc
803	.b290		60		rts		                rts

805	.b291						LB273:
806	.b291		c9 7f		cmp #$7f	                cmp #$7F
807	.b293		d0 07		bne $b29c	                bne LB27E
808	.b295		c0 00		cpy #$00	                cpy #$00
809	.b297		f0 d6		beq $b26f	                beq LB251
810	.b299		88		dey		                dey
811	.b29a		80 13		bra $b2af	                bra LB291

813	.b29c						LB27E:
814	.b29c		c9 7f		cmp #$7f	                cmp #$7F
815	.b29e		b0 cf		bcs $b26f	                bcs LB251
816	.b2a0		c9 20		cmp #$20	                cmp #$20
817	.b2a2		90 cb		bcc $b26f	                bcc LB251
818	.b2a4		c0 ff		cpy #$ff	                cpy #$FF
819	.b2a6		b0 c7		bcs $b26f	                bcs LB251
820	.b2a8		91 f2		sta ($f2),y	                sta ($F2),y
821	.b2aa		c8		iny		                iny
822	.b2ab		24 2b		bit $2b		                bit $2B
823	.b2ad		30 c0		bmi $b26f	                bmi LB251
824	.b2af						LB291:
825	.b2af		20 46 b7	jsr $b746	                jsr LB728
826	.b2b2		80 bb		bra $b26f	                bra LB251

828	.b2b4						LB296:
829	.b2b4		c9 1b		cmp #$1b	                cmp #$1B
830	.b2b6		d0 e4		bne $b29c	                bne LB27E
831	.b2b8		20 84 b1	jsr $b184	                jsr LB166
832	.b2bb		c9 5c		cmp #$5c	                cmp #$5C
833	.b2bd		f0 c5		beq $b284	                beq LB266
834	.b2bf		38		sec		                sec
835	.b2c0		60		rts		                rts

837	.b2c1						LB2A3:
838	.b2c1		a2 19		ldx #$19	                ldx #$19
839	.b2c3						LB2A5:
840	.b2c3		ca		dex		                dex
841	.b2c4		74 00		stz $00,x	                stz $00,x
842	.b2c6		d0 fb		bne $b2c3	                bne LB2A5
843	.b2c8						LB2AA:
844	.b2c8		64 3a		stz $3a		                stz $3A
845	.b2ca		64 3b		stz $3b		                stz $3B
846	.b2cc						LB2AE:
847	.b2cc		20 84 b1	jsr $b184	                jsr LB166
848	.b2cf		b0 2d		bcs $b2fe	                bcs LB2E0
849	.b2d1		20 cb b8	jsr $b8cb	                jsr LB8AD
850	.b2d4		90 2d		bcc $b303	                bcc LB2E5
851	.b2d6		48		pha		                pha
852	.b2d7		a5 3a		lda $3a		                lda $3A
853	.b2d9		95 02		sta $02,x	                sta $02,x
854	.b2db		a5 3b		lda $3b		                lda $3B
855	.b2dd		95 03		sta $03,x	                sta $03,x
856	.b2df		68		pla		                pla
857	.b2e0		c9 40		cmp #$40	                cmp #$40
858	.b2e2		b0 2f		bcs $b313	                bcs LB2F5
859	.b2e4		c9 30		cmp #$30	                cmp #$30
860	.b2e6		90 0d		bcc $b2f5	                bcc LB2D7
861	.b2e8		c9 3c		cmp #$3c	                cmp #$3C
862	.b2ea		b0 15		bcs $b301	                bcs LB2E3
863	.b2ec		e6 00		inc $00		                inc $00
864	.b2ee		e8		inx		                inx
865	.b2ef		e8		inx		                inx
866	.b2f0		e8		inx		                inx
867	.b2f1		e0 18		cpx #$18	                cpx #$18
868	.b2f3		90 d3		bcc $b2c8	                bcc LB2AA
869	.b2f5						LB2D7:
870	.b2f5		c9 40		cmp #$40	                cmp #$40
871	.b2f7		b0 1a		bcs $b313	                bcs LB2F5
872	.b2f9		20 84 b1	jsr $b184	                jsr LB166
873	.b2fc		90 f7		bcc $b2f5	                bcc LB2D7
874	.b2fe						LB2E0:
875	.b2fe		4c a7 b3	jmp $b3a7	                jmp LB389

877	.b301						LB2E3:
878	.b301		95 01		sta $01,x	                sta $01,x
879	.b303						LB2E5:
880	.b303		a5 00		lda $00		                lda $00
881	.b305		d0 c5		bne $b2cc	                bne LB2AE
882	.b307		e6 00		inc $00		                inc $00
883	.b309		80 c1		bra $b2cc	                bra LB2AE

885	.b30b						LB2ED:
886	.b30b		a9 01		lda #$01	                lda #$01
887	.b30d		85 02		sta $02		                sta $02
888	.b30f		64 01		stz $01		                stz $01
889	.b311		64 03		stz $03		                stz $03
890	.b313						LB2F5:
891	.b313		60		rts		                rts

893	.b314						LB2F6:
894	.b314		a9 03		lda #$03	                lda #$03
895	.b316		80 02		bra $b31a	                bra LB2FC

897	.b318						LB2FA:
898	.b318		a9 00		lda #$00	                lda #$00
899	.b31a						LB2FC:
900	.b31a		da		phx		                phx
901	.b31b		aa		tax		                tax
902	.b31c		b5 01		lda $01,x	                lda $01,x
903	.b31e		c9 01		cmp #$01	                cmp #$01
904	.b320		b5 03		lda $03,x	                lda $03,x
905	.b322		f0 01		beq $b325	                beq LB307
906	.b324		38		sec		                sec
907	.b325						LB307:
908	.b325		b5 02		lda $02,x	                lda $02,x
909	.b327		fa		plx		                plx
910	.b328		29 ff		and #$ff	                and #$FF
911	.b32a		60		rts		                rts

913	.b32b						LB30D:
914	.b32b		68		pla		                pla
915	.b32c		85 28		sta $28		                sta $28
916	.b32e		68		pla		                pla
917	.b32f		85 29		sta $29		                sta $29
918	.b331		a5 01		lda $01		                lda $01
919	.b333		d0 21		bne $b356	                bne LB338
920	.b335		a5 02		lda $02		                lda $02
921	.b337		05 03		ora $03		                ora $03
922	.b339		d0 02		bne $b33d	                bne LB31F
923	.b33b		e6 02		inc $02		                inc $02
924	.b33d						LB31F:
925	.b33d		a5 02		lda $02		                lda $02
926	.b33f		d0 02		bne $b343	                bne LB325
927	.b341		c6 03		dec $03		                dec $03
928	.b343						LB325:
929	.b343		c6 02		dec $02		                dec $02
930	.b345		d0 04		bne $b34b	                bne LB32D
931	.b347		a5 03		lda $03		                lda $03
932	.b349		f0 05		beq $b350	                beq LB332
933	.b34b						LB32D:
934	.b34b		20 50 b3	jsr $b350	                jsr LB332
935	.b34e		80 ed		bra $b33d	                bra LB31F

937	.b350						LB332:
938	.b350		a5 29		lda $29		                lda $29
939	.b352		48		pha		                pha
940	.b353		a5 28		lda $28		                lda $28
941	.b355		48		pha		                pha
942	.b356						LB338:
943	.b356		60		rts		                rts

945	.b357						LB339:
946	.b357		c6 1e		dec $1e		                dec $1E
947	.b359		d0 03		bne $b35e	                bne LB340
948	.b35b		20 35 b0	jsr $b035	                jsr LB017
949	.b35e						LB340:
950	.b35e		a5 6f		lda $6f		                lda $6F
951	.b360		d0 04		bne $b366	                bne LB348
952	.b362		a5 21		lda $21		                lda $21
953	.b364		85 20		sta $20		                sta $20
954	.b366						LB348:
955	.b366		60		rts		                rts

957	.b367						LB349:
958	.b367		20 6c b3	jsr $b36c	                jsr LB34E
959	.b36a		80 fb		bra $b367	                bra LB349

961	.b36c						LB34E:
962	.b36c		20 57 b3	jsr $b357	                jsr LB339
963	.b36f		20 8e b1	jsr $b18e	                jsr LB170
964	.b372						LB354:
965	.b372		c9 20		cmp #$20	                cmp #$20
966	.b374		90 09		bcc $b37f	                bcc LB361
967	.b376		4c 46 b7	jmp $b746	                jmp LB728

969	.b379						LB35B:
970	.b379		4c 8a b4	jmp $b48a	                jmp LB46C

972	.b37c						LB35E:
973	.b37c		4c b1 b4	jmp $b4b1	                jmp LB493

975	.b37f						LB361:
976	.b37f		48		pha		                pha
977	.b380		20 0b b3	jsr $b30b	                jsr LB2ED
978	.b383		68		pla		                pla
979	.b384		c9 07		cmp #$07	                cmp #$07
980	.b386		90 51		bcc $b3d9	                bcc LB3BB
981	.b388		f0 7d		beq $b407	                beq LB3E9
982	.b38a		c9 09		cmp #$09	                cmp #$09
983	.b38c		90 eb		bcc $b379	                bcc LB35B
984	.b38e		f0 ec		beq $b37c	                beq LB35E
985	.b390		c9 0b		cmp #$0b	                cmp #$0B
986	.b392		90 78		bcc $b40c	                bcc LB3EE
987	.b394		c9 0d		cmp #$0d	                cmp #$0D
988	.b396		f0 6f		beq $b407	                beq LB3E9
989	.b398		c9 1b		cmp #$1b	                cmp #$1B
990	.b39a		d0 3d		bne $b3d9	                bne LB3BB
991	.b39c						LB37E:
992	.b39c		a6 6f		ldx $6f		                ldx $6F
993	.b39e		d0 04		bne $b3a4	                bne LB386
994	.b3a0		24 2d		bit $2d		                bit $2D
995	.b3a2		30 35		bmi $b3d9	                bmi LB3BB
996	.b3a4						LB386:
997	.b3a4		20 84 b1	jsr $b184	                jsr LB166
998	.b3a7						LB389:
999	.b3a7		c9 1b		cmp #$1b	                cmp #$1B
1000	.b3a9		f0 f1		beq $b39c	                beq LB37E
1001	.b3ab		c9 25		cmp #$25	                cmp #$25
1002	.b3ad		f0 70		beq $b41f	                beq LB401
1003	.b3af		c9 28		cmp #$28	                cmp #$28
1004	.b3b1		f0 6f		beq $b422	                beq LB404
1005	.b3b3		c9 44		cmp #$44	                cmp #$44
1006	.b3b5		f0 55		beq $b40c	                beq LB3EE
1007	.b3b7		c9 45		cmp #$45	                cmp #$45
1008	.b3b9		f0 4e		beq $b409	                beq LB3EB
1009	.b3bb		c9 4d		cmp #$4d	                cmp #$4D
1010	.b3bd		f0 46		beq $b405	                beq LB3E7
1011	.b3bf		c9 50		cmp #$50	                cmp #$50
1012	.b3c1		f0 20		beq $b3e3	                beq LB3C5
1013	.b3c3		c9 5b		cmp #$5b	                cmp #$5B
1014	.b3c5		f0 5e		beq $b425	                beq LB407
1015	.b3c7		c9 5d		cmp #$5d	                cmp #$5D
1016	.b3c9		64 2b		stz $2b		                stz $2B
1017	.b3cb		f0 47		beq $b414	                beq LB3F6
1018	.b3cd		c9 5e		cmp #$5e	                cmp #$5E
1019	.b3cf		f0 40		beq $b411	                beq LB3F3
1020	.b3d1		c9 5f		cmp #$5f	                cmp #$5F
1021	.b3d3		f0 05		beq $b3da	                beq LB3BC
1022	.b3d5		c9 63		cmp #$63	                cmp #$63
1023	.b3d7		f0 43		beq $b41c	                beq LB3FE
1024	.b3d9						LB3BB:
1025	.b3d9		60		rts		                rts

1027	.b3da						LB3BC:
1028	.b3da		20 65 b2	jsr $b265	                jsr LB247
1029	.b3dd		b0 c8		bcs $b3a7	                bcs LB389
1030	.b3df						LB3C1:
1031	.b3df		38		sec		                sec
1032	.b3e0		6c 32 02	jmp ($0232)	                jmp (IND2V)

1034	.b3e3						LB3C5:
1035	.b3e3		38		sec		                sec
1036	.b3e4		66 2b		ror $2b		                ror $2B
1037	.b3e6		20 65 b2	jsr $b265	                jsr LB247
1038	.b3e9		b0 bc		bcs $b3a7	                bcs LB389
1039	.b3eb		a6 1f		ldx $1f		                ldx $1F
1040	.b3ed		64 1f		stz $1f		                stz $1F
1041	.b3ef		f0 11		beq $b402	                beq LB3E4
1042	.b3f1		a0 00		ldy #$00	                ldy #$00
1043	.b3f3		20 bc b8	jsr $b8bc	                jsr LB89E
1044	.b3f6		f0 e1		beq $b3d9	                beq LB3BB
1045	.b3f8		86 6f		stx $6f		                stx $6F
1046	.b3fa		c9 2a		cmp #$2a	                cmp #$2A
1047	.b3fc		f0 1b		beq $b419	                beq LB3FB
1048	.b3fe		c9 21		cmp #$21	                cmp #$21
1049	.b400		f0 dd		beq $b3df	                beq LB3C1
1050	.b402						LB3E4:
1051	.b402		4c 10 b5	jmp $b510	                jmp LB4F2

1053	.b405						LB3E7:
1054	.b405		a9 0b		lda #$0b	                lda #$0B
1055	.b407						LB3E9:
1056	.b407		80 05		bra $b40e	                bra LB3F0

1058	.b409						LB3EB:
1059	.b409		4c e7 ff	jmp $ffe7	                jmp OSNEWL

1061	.b40c						LB3EE:
1062	.b40c		a9 0a		lda #$0a	                lda #$0A
1063	.b40e						LB3F0:
1064	.b40e		4c ee ff	jmp $ffee	                jmp OSWRCH

1066	.b411						LB3F3:
1067	.b411		38		sec		                sec
1068	.b412		66 2b		ror $2b		                ror $2B
1069	.b414						LB3F6:
1070	.b414		20 65 b2	jsr $b265	                jsr LB247
1071	.b417		b0 8e		bcs $b3a7	                bcs LB389
1072	.b419						LB3FB:
1073	.b419		4c 3d b6	jmp $b63d	                jmp LB61F

1075	.b41c						LB3FE:
1076	.b41c		4c 9c af	jmp $af9c	                jmp LAF7E

1078	.b41f						LB401:
1079	.b41f		4c 5e b6	jmp $b65e	                jmp LB640

1081	.b422						LB404:
1082	.b422		4c a9 b6	jmp $b6a9	                jmp LB68B

1084	.b425						LB407:
1085	.b425		20 c1 b2	jsr $b2c1	                jsr LB2A3
1086	.b428		a2 0e		ldx #$0e	                ldx #$0E
1087	.b42a						LB40C:
1088	.b42a		dd 3b b4	cmp $b43b,x	                cmp LB41E-1,x
1089	.b42d		f0 07		beq $b436	                beq LB418
1090	.b42f		ca		dex		                dex
1091	.b430		d0 f8		bne $b42a	                bne LB40C
1092	.b432		38		sec		                sec
1093	.b433		6c 30 02	jmp ($0230)	                jmp (IND1V)

1095	.b436						LB418:
1096	.b436		8a		txa		                txa
1097	.b437		0a		asl a		                asl a
1098	.b438		aa		tax		                tax
1099	.b439		7c 48 b4	jmp ($b448,x)	                jmp (LB42C-2,x)
1100	.b43c						LB41E:
1101	>b43c		41 42				                .byte $41,$42
1102	>b43e		43				                .byte $43
1103	>b43f		44				                .byte $44
1104	>b440		48				                .byte $48
1105	>b441		4a				                .byte $4a
1106	>b442		4b				                .byte $4B
1107	>b443		53				                .byte $53
1108	>b444		58				                .byte $58
1109	>b445		68				                .byte $68
1110	>b446		6c				                .byte $6C
1111	>b447		6e				                .byte $6E
1112	>b448		66				                .byte $66
1113	>b449		63				                .byte $63
1114	.b44a						LB42C:
1115	>b44a		e3 b4				                .word LB4C5
1116	>b44c		a3 b4				                .word LB485
1117	>b44e		b1 b4				                .word LB493
1118	>b450		8a b4				                .word LB46C
1119	>b452		c5 b4				                .word LB4A7
1120	>b454		1b b6				                .word LB5FD
1121	>b456		2b b6				                .word LB60D
1122	>b458		3e b7				                .word LB720
1123	>b45a		ff b5				                .word LB5E1
1124	>b45c		cf b6				                .word LB6B1
1125	>b45e		cb b6				                .word LB6AD
1126	>b460		c7 b5				                .word LB5A9
1127	>b462		c5 b4				                .word LB4A7
1128	>b464		ef b4				                .word LB4D1
1129	.b466						LB448:
1130	.b466		20 6b b4	jsr $b46b	                jsr LB44D
1131	.b469		80 fb		bra $b466	                bra LB448
1132	.b46b						LB44D:
1133	.b46b		20 57 b3	jsr $b357	                jsr LB339
1134	.b46e		20 98 b1	jsr $b198	                jsr LB17A
1135	.b471		c9 1b		cmp #$1b	                cmp #$1B
1136	.b473		d0 0f		bne $b484	                bne LB466
1137	.b475		a9 da		lda #$da	                lda #$DA
1138	.b477		a0 ff		ldy #$ff	                ldy #$FF
1139	.b479		a2 00		ldx #$00	                ldx #$00
1140	.b47b		20 f4 ff	jsr $fff4	                jsr OSBYTE
1141	.b47e		a9 1b		lda #$1b	                lda #$1B
1142	.b480		e0 00		cpx #$00	                cpx #$00
1143	.b482		f0 03		beq $b487	                beq LB469
1144	.b484						LB466:
1145	.b484		4c ee ff	jmp $ffee	                jmp OSWRCH

1147	.b487						LB469:
1148	.b487		4c 9c b3	jmp $b39c	                jmp LB37E

1150	.b48a						LB46C:
1151	.b48a		a9 08		lda #$08	                lda #$08
1152	.b48c		85 2c		sta $2c		                sta $2C
1153	.b48e		20 2b b3	jsr $b32b	                jsr LB30D
1154	.b491		20 3f b8	jsr $b83f	                jsr LB821
1155	.b494		8a		txa		                txa
1156	.b495		d0 07		bne $b49e	                bne LB480
1157	.b497		24 34		bit $34		                bit $34
1158	.b499		10 65		bpl $b500	                bpl LB4E2
1159	.b49b						LB47D:
1160	.b49b		98		tya		                tya
1161	.b49c						LB47E:
1162	.b49c		f0 62		beq $b500	                beq LB4E2
1163	.b49e						LB480:
1164	.b49e		a5 2c		lda $2c		                lda $2C
1165	.b4a0						LB482:
1166	.b4a0		4c ee ff	jmp $ffee	                jmp OSWRCH

1168	.b4a3						LB485:
1169	.b4a3		a9 0a		lda #$0a	                lda #$0A
1170	.b4a5		85 2c		sta $2c		                sta $2C
1171	.b4a7		20 2b b3	jsr $b32b	                jsr LB30D
1172	.b4aa		20 3f b8	jsr $b83f	                jsr LB821
1173	.b4ad						LB48F:
1174	.b4ad		c4 39		cpy $39		                cpy zterm.numRowsMinusOne
1175	.b4af		80 eb		bra $b49c	                bra LB47E

1177	.b4b1						LB493:
1178	.b4b1		a9 09		lda #$09	                lda #$09
1179	.b4b3		85 2c		sta $2c		                sta $2C
1180	.b4b5		20 2b b3	jsr $b32b	                jsr LB30D
1181	.b4b8		20 3f b8	jsr $b83f	                jsr LB821
1182	.b4bb		e4 37		cpx $37		                cpx zterm.numColumnsMinusOne
1183	.b4bd						LB49F:
1184	.b4bd		90 df		bcc $b49e	                bcc LB480
1185	.b4bf		a5 34		lda $34		                lda $34
1186	.b4c1		f0 3d		beq $b500	                beq LB4E2
1187	.b4c3		80 e8		bra $b4ad	                bra LB48F

1189	.b4c5						LB4A7:
1190	.b4c5		20 18 b3	jsr $b318	                jsr LB2FA
1191	.b4c8		b0 36		bcs $b500	                bcs LB4E2
1192	.b4ca		a8		tay		                tay
1193	.b4cb		f0 01		beq $b4ce	                beq LB4B0
1194	.b4cd		88		dey		                dey
1195	.b4ce						LB4B0:
1196	.b4ce		20 14 b3	jsr $b314	                jsr LB2F6
1197	.b4d1		b0 2d		bcs $b500	                bcs LB4E2
1198	.b4d3		aa		tax		                tax
1199	.b4d4		f0 01		beq $b4d7	                beq LB4B9
1200	.b4d6		ca		dex		                dex
1201	.b4d7						LB4B9:
1202	.b4d7		a9 1f		lda #$1f	                lda #$1F
1203	.b4d9		20 ee ff	jsr $ffee	                jsr OSWRCH
1204	.b4dc		8a		txa		                txa
1205	.b4dd		20 ee ff	jsr $ffee	                jsr OSWRCH
1206	.b4e0		98		tya		                tya
1207	.b4e1		80 bd		bra $b4a0	                bra LB482

1209	.b4e3						LB4C5:
1210	.b4e3		a9 0b		lda #$0b	                lda #$0B
1211	.b4e5		85 2c		sta $2c		                sta $2C
1212	.b4e7		20 2b b3	jsr $b32b	                jsr LB30D
1213	.b4ea		20 3f b8	jsr $b83f	                jsr LB821
1214	.b4ed		80 ac		bra $b49b	                bra LB47D

1216	.b4ef						LB4D1:
1217	.b4ef		20 18 b3	jsr $b318	                jsr LB2FA
1218	.b4f2		d0 0c		bne $b500	                bne LB4E2
1219	.b4f4		a8		tay		                tay
1220	.b4f5						LB4D7:
1221	.b4f5		a9 1b		lda #$1b	                lda #$1B
1222	.b4f7						LB4D9:
1223	.b4f7		c8		iny		                iny
1224	.b4f8		20 a1 b0	jsr $b0a1	                jsr LB083
1225	.b4fb		b9 00 b5	lda $b500,y	                lda LB4E2,y
1226	.b4fe		d0 f7		bne $b4f7	                bne LB4D9
1227	.b500						LB4E2:
1228	.b500		60		rts		                rts

1230	>b501		5b				                .byte $5B
1231	>b502		3e 35 63			                .byte $3e,$35,$63
1232	>b505		00				                .byte $00
1233	>b506		5b				                .byte $5B
1234	>b507		30 6e				                .byte $30,$6e
1235	>b509		00				                .byte $00
1236	>b50a		5b				                .byte $5B
1237	>b50b		33				                .byte $33
1238	>b50c		6e 00 5b			                .byte $6e,$00,$5b
1239	>b50f		00				                .byte $00
1240	.b510						LB4F2:
1241	.b510		20 4e b8	jsr $b84e	                jsr LB830
1242	.b513		b0 50		bcs $b565	                bcs LB547
1243	.b515		c9 07		cmp #$07	                cmp #$07
1244	.b517		b0 1d		bcs $b536	                bcs LB518
1245	.b519		48		pha		                pha
1246	.b51a		20 50 b8	jsr $b850	                jsr LB832
1247	.b51d		64 2e		stz $2e		                stz $2E
1248	.b51f		c9 0a		cmp #$0a	                cmp #$0A
1249	.b521		f0 06		beq $b529	                beq LB50B
1250	.b523		c6 2e		dec $2e		                dec $2E
1251	.b525		c9 09		cmp #$09	                cmp #$09
1252	.b527		d0 3b		bne $b564	                bne LB546
1253	.b529						LB50B:
1254	.b529		7a		ply		                ply
1255	.b52a		c0 06		cpy #$06	                cpy #$06
1256	.b52c		d0 05		bne $b533	                bne LB515
1257	.b52e		a5 2e		lda $2e		                lda $2E
1258	.b530		85 34		sta $34		                sta $34
1259	.b532						LB514:
1260	.b532		60		rts		                rts

1262	.b533						LB515:
1263	.b533		4c fe b6	jmp $b6fe	                jmp LB6E0

1265	.b536						LB518:
1266	.b536		c9 08		cmp #$08	                cmp #$08
1267	.b538		f0 1e		beq $b558	                beq LB53A
1268	.b53a		b0 2c		bcs $b568	                bcs LB54A
1269	.b53c						LB51E:
1270	.b53c		20 bc b8	jsr $b8bc	                jsr LB89E
1271	.b53f		f0 f1		beq $b532	                beq LB514
1272	.b541		20 83 b5	jsr $b583	                jsr LB565
1273	.b544		20 bc b8	jsr $b8bc	                jsr LB89E
1274	.b547		f0 0a		beq $b553	                beq LB535
1275	.b549		c9 2c		cmp #$2c	                cmp #$2C
1276	.b54b		d0 18		bne $b565	                bne LB547
1277	.b54d		c8		iny		                iny
1278	.b54e		20 53 b5	jsr $b553	                jsr LB535
1279	.b551		80 e9		bra $b53c	                bra LB51E

1281	.b553						LB535:
1282	.b553		a5 3a		lda $3a		                lda $3A
1283	.b555		4c ee ff	jmp $ffee	                jmp OSWRCH

1285	.b558						LB53A:
1286	.b558		20 bc b8	jsr $b8bc	                jsr LB89E
1287	.b55b		20 83 b5	jsr $b583	                jsr LB565
1288	.b55e		b0 05		bcs $b565	                bcs LB547
1289	.b560		a5 3a		lda $3a		                lda $3A
1290	.b562		80 33		bra $b597	                bra reinitDisplayMode

1292	.b564						LB546:
1293	.b564		68		pla		                pla
1294	.b565						LB547:
1295	.b565		4c d1 b7	jmp $b7d1	                jmp LB7B3

1297	.b568						LB54A:
1298	.b568		a0 00		ldy #$00	                ldy #$00
1299	.b56a		c9 0b		cmp #$0b	                cmp #$0B
1300	.b56c		90 f7		bcc $b565	                bcc LB547
1301	.b56e		f0 0f		beq $b57f	                beq LB561
1302	.b570		c8		iny		                iny
1303	.b571		c9 0e		cmp #$0e	                cmp #$0E
1304	.b573		f0 0a		beq $b57f	                beq LB561
1305	.b575		b0 ee		bcs $b565	                bcs LB547
1306	.b577		a0 04		ldy #$04	                ldy #$04
1307	.b579		c9 0c		cmp #$0c	                cmp #$0C
1308	.b57b		f0 02		beq $b57f	                beq LB561
1309	.b57d		a0 05		ldy #$05	                ldy #$05
1310	.b57f						LB561:
1311	.b57f		98		tya		                tya
1312	.b580		4c 6d b6	jmp $b66d	                jmp LB64F

1314	.b583						LB565:
1315	.b583		20 c7 b8	jsr $b8c7	                jsr LB8A9
1316	.b586		b0 09		bcs $b591	                bcs LB573
1317	.b588						LB56A:
1318	.b588		c8		iny		                iny
1319	.b589		b1 f2		lda ($f2),y	                lda ($F2),y
1320	.b58b		20 cb b8	jsr $b8cb	                jsr LB8AD
1321	.b58e		90 f8		bcc $b588	                bcc LB56A
1322	.b590		18		clc		                clc
1323	.b591						LB573:
1324	.b591		60		rts		                rts

1326	.b592		20 18 b3	jsr $b318	                jsr LB2FA
1327	.b595		b0 ce		bcs $b565	                bcs LB547
1328	.b597						reinitDisplayMode:
1329	.b597		a8		tay		                tay              ;Y = screen mode
1330	.b598		29 7f		and #$7f	                and #$7F         ;mask off shadow bit (unnecessarily!)
1331	.b59a		c9 08		cmp #$08	                cmp #$08
1332	.b59c		b0 c7		bcs $b565	                bcs LB547                    ;branch taken if mode>=8
1333	.b59e		aa		tax		                tax                          ;X = mode number
1334	.b59f		bd bf b5	lda $b5bf,x	                lda screenDimensionsForMode,x                  ;
1335	.b5a2		4a		lsr a		                lsr a       ;A = width -1; C = height flag (1=32 rows,
1336							                            ;0=25 rows)
1337	.b5a3		a2 1f		ldx #$1f	                ldx #$1F                     ;assume 32 rows
1338	.b5a5		b0 02		bcs $b5a9	                bcs +                        ;taken if 32 rows
1339	.b5a7		a2 18		ldx #$18	                ldx #$18                     ;25 rows
1340	.b5a9						+
1341	.b5a9		86 39		stx $39		                stx zterm.numRowsMinusOne    ;store rows
1342	.b5ab		85 37		sta $37		                sta zterm.numColumnsMinusOne ;store columns
1343	.b5ad		1a		inc a		                inc a                        ;compute column count
1344	.b5ae		85 38		sta $38		                sta zterm.numColumns

1346							                ; re-select mode
1347	.b5b0		a9 16		lda #$16	                lda #22
1348	.b5b2		20 ee ff	jsr $ffee	                jsr OSWRCH
1349	.b5b5		98		tya		                tya
1350	.b5b6		20 ee ff	jsr $ffee	                jsr OSWRCH

1352	.b5b9		0a		asl a		                asl a
1353	.b5ba		c9 0e		cmp #$0e	                cmp #$0E                     ;C=1 if Mode 7
1354	.b5bc		66 30		ror $30		                ror $30                      ;?$30 bit 7 set if Mode 7
1355	.b5be		60		rts		                rts

1357	.b5bf						screenDimensionsForMode:
1358	>b5bf		9f				                .byte 79<<1|1 ;mode 0 - 80 columns, 32 rows
1359	>b5c0		4f				                .byte 39<<1|1 ;mode 1 - 40 columns, 32 rows
1360	>b5c1		27				                .byte 19<<1|1 ;mode 2 - 20 columns, 32 rows
1361	>b5c2		9e				                .byte 79<<1|0 ;mode 3 - 80 columns, 25 rows
1362	>b5c3		4f				                .byte 39<<1|1 ;mode 4 - 40 columns, 32 rows
1363	>b5c4		27				                .byte 19<<1|1 ;mode 5 - 20 columns, 32 rows
1364	>b5c5		4e				                .byte 39<<1|0 ;mode 6 - 40 columns, 25 rows
1365	>b5c6		4e				                .byte 39<<1|0 ;mode 7 - 40 columns, 25 rows

1367	.b5c7						LB5A9:
1368	.b5c7		20 18 b3	jsr $b318	                jsr LB2FA
1369	.b5ca		b0 58		bcs $b624	                bcs LB606
1370	.b5cc		c9 05		cmp #$05	                cmp #$05
1371	.b5ce		f0 22		beq $b5f2	                beq LB5D4
1372	.b5d0		c9 06		cmp #$06	                cmp #$06
1373	.b5d2						LB5B4:
1374	.b5d2		d0 50		bne $b624	                bne LB606
1375	.b5d4		20 3f b8	jsr $b83f	                jsr LB821
1376	.b5d7		e8		inx		                inx
1377	.b5d8		da		phx		                phx
1378	.b5d9		c8		iny		                iny
1379	.b5da		5a		phy		                phy
1380	.b5db		a0 0d		ldy #$0d	                ldy #$0D
1381	.b5dd		20 f5 b4	jsr $b4f5	                jsr LB4D7
1382	.b5e0		68		pla		                pla
1383	.b5e1		20 8c b0	jsr $b08c	                jsr LB06E
1384	.b5e4		a9 3b		lda #$3b	                lda #$3B
1385	.b5e6		20 a1 b0	jsr $b0a1	                jsr LB083
1386	.b5e9		68		pla		                pla
1387	.b5ea		20 8c b0	jsr $b08c	                jsr LB06E
1388	.b5ed		a9 52		lda #$52	                lda #$52
1389	.b5ef		4c a1 b0	jmp $b0a1	                jmp LB083

1391	.b5f2						LB5D4:
1392	.b5f2		a0 05		ldy #$05	                ldy #$05
1393	.b5f4		24 19		bit $19		                bit $19
1394	.b5f6		64 19		stz $19		                stz $19
1395	.b5f8		10 02		bpl $b5fc	                bpl LB5DE
1396	.b5fa		a0 09		ldy #$09	                ldy #$09
1397	.b5fc						LB5DE:
1398	.b5fc		4c f5 b4	jmp $b4f5	                jmp LB4D7

1400	.b5ff						LB5E1:
1401	.b5ff		20 3f b8	jsr $b83f	                jsr LB821
1402	.b602		da		phx		                phx
1403	.b603		5a		phy		                phy
1404	.b604		a9 20		lda #$20	                lda #$20
1405	.b606		85 2c		sta $2c		                sta $2C
1406	.b608		20 10 b6	jsr $b610	                jsr LB5F2
1407	.b60b		7a		ply		                ply
1408	.b60c		fa		plx		                plx
1409	.b60d		4c d7 b4	jmp $b4d7	                jmp LB4B9

1411	.b610						LB5F2:
1412	.b610		20 2b b3	jsr $b32b	                jsr LB30D
1413	.b613		20 3f b8	jsr $b83f	                jsr LB821
1414	.b616		e4 38		cpx $38		                cpx zterm.numColumns
1415	.b618		4c bd b4	jmp $b4bd	                jmp LB49F

1417	.b61b						LB5FD:
1418	.b61b		20 18 b3	jsr $b318	                jsr LB2FA
1419	.b61e		b0 04		bcs $b624	                bcs LB606
1420	.b620		c9 03		cmp #$03	                cmp #$03
1421	.b622		90 12		bcc $b636	                bcc LB618
1422	.b624						LB606:
1423	.b624		60		rts		                rts

1425	.b625						LB607:
1426	>b625		0f				                .byte $0F
1427	>b626		13				                .byte $13
1428	.b627		1a		inc a		                inc a
1429	.b628		00		brk #		                brk
1430	.b629		04 0b		tsb $0b		                tsb $0B
1431	.b62b						LB60D:
1432	.b62b		20 18 b3	jsr $b318	                jsr LB2FA
1433	.b62e		b0 f4		bcs $b624	                bcs LB606
1434	.b630		c9 03		cmp #$03	                cmp #$03
1435	.b632		b0 f0		bcs $b624	                bcs LB606
1436	.b634		69 03		adc #$03	                adc #$03
1437	.b636						LB618:
1438	.b636		aa		tax		                tax
1439	.b637		bd 25 b6	lda $b625,x	                lda LB607,x
1440	.b63a		4c 04 b8	jmp $b804	                jmp LB7E6

1442	.b63d						LB61F:
1443	.b63d		a5 20		lda $20		                lda $20
1444	.b63f		25 36		and $36		                and $36
1445	.b641		10 03		bpl $b646	                bpl LB628
1446	.b643		4c d1 b7	jmp $b7d1	                jmp LB7B3

1448	.b646						LB628:
1449	.b646		a9 e5		lda #$e5	                lda #$E5
1450	.b648		20 41 b8	jsr $b841	                jsr osbyteX00Y00
1451	.b64b		a2 00		ldx #$00	                ldx #$00
1452	.b64d		a0 05		ldy #$05	                ldy #$05
1453	.b64f		20 f7 ff	jsr $fff7	                jsr OSCLI
1454	.b652						disableESCAPE:
1455	.b652		a9 e5		lda #$e5	                lda #$E5
1456	.b654		a2 01		ldx #$01	                ldx #$01
1457	.b656		20 43 b8	jsr $b843	                jsr osbyteY00                ;disable ESCAPE key
1458	.b659		a9 7e		lda #$7e	                lda #$7E
1459	.b65b		4c f4 ff	jmp $fff4	                jmp OSBYTE                   ;acknowledge ESCAPE

1461	.b65e						LB640:
1462	.b65e		20 e4 b1	jsr $b1e4	                jsr LB1C6
1463	.b661		c9 07		cmp #$07	                cmp #$07
1464	.b663		90 08		bcc $b66d	                bcc LB64F
1465	.b665		d0 bd		bne $b624	                bne LB606
1466	.b667		20 84 b1	jsr $b184	                jsr LB166
1467	.b66a		4c 72 b3	jmp $b372	                jmp LB354

1469	.b66d						LB64F:
1470	.b66d		85 2a		sta $2a		                sta $2A
1471	.b66f		64 25		stz $25		                stz $25
1472	.b671		64 23		stz $23		                stz $23
1473	.b673		a2 fe		ldx #$fe	                ldx #$FE
1474	.b675		9a		txs		                txs
1475	.b676		e8		inx		                inx
1476	.b677		86 22		stx $22		                stx $22
1477	.b679		a5 2a		lda $2a		                lda $2A
1478	.b67b		c9 06		cmp #$06	                cmp #$06
1479	.b67d		90 04		bcc $b683	                bcc LB665
1480	.b67f		66 23		ror $23		                ror $23
1481	.b681		80 08		bra $b68b	                bra LB66D

1483	.b683						LB665:
1484	.b683		c9 04		cmp #$04	                cmp #$04
1485	.b685		90 12		bcc $b699	                bcc LB67B
1486	.b687		f0 06		beq $b68f	                beq LB671
1487	.b689		66 25		ror $25		                ror $25
1488	.b68b						LB66D:
1489	.b68b		64 27		stz $27		                stz $27
1490	.b68d		46 22		lsr $22		                lsr $22
1491	.b68f						LB671:
1492	.b68f		66 30		ror $30		                ror $30
1493	.b691		a9 21		lda #$21	                lda #$21
1494	.b693		20 04 b8	jsr $b804	                jsr LB7E6
1495	.b696		4c 66 b4	jmp $b466	                jmp LB448

1497	.b699						LB67B:
1498	.b699		64 30		stz $30		                stz $30
1499	.b69b		4a		lsr a		                lsr a
1500	.b69c		66 2d		ror $2d		                ror $2D
1501	.b69e		4a		lsr a		                lsr a
1502	.b69f		66 22		ror $22		                ror $22
1503	.b6a1		a9 1e		lda #$1e	                lda #$1E
1504	.b6a3		20 04 b8	jsr $b804	                jsr LB7E6
1505	.b6a6		4c 67 b3	jmp $b367	                jmp LB349

1507	.b6a9						LB68B:
1508	.b6a9		20 e4 b1	jsr $b1e4	                jsr LB1C6
1509	.b6ac		90 0b		bcc $b6b9	                bcc LB69B
1510	.b6ae						LB690:
1511	.b6ae		4a		lsr a		                lsr a
1512	.b6af		29 04		and #$04	                and #$04
1513	.b6b1		d0 07		bne $b6ba	                bne LB69C
1514	.b6b3		6a		ror a		                ror a
1515	.b6b4		4a		lsr a		                lsr a
1516	.b6b5		69 40		adc #$40	                adc #$40
1517	.b6b7		85 33		sta $33		                sta $33
1518	.b6b9						LB69B:
1519	.b6b9		60		rts		                rts

1521	.b6ba						LB69C:
1522	.b6ba		64 33		stz $33		                stz $33
1523	.b6bc		a2 60		ldx #$60	                ldx #$60
1524	.b6be		a0 23		ldy #$23	                ldy #$23
1525	.b6c0		90 04		bcc $b6c6	                bcc LB6A8
1526	.b6c2		da		phx		                phx
1527	.b6c3		5a		phy		                phy
1528	.b6c4		fa		plx		                plx
1529	.b6c5		7a		ply		                ply
1530	.b6c6						LB6A8:
1531	.b6c6		86 31		stx $31		                stx $31
1532	.b6c8		84 32		sty $32		                sty $32
1533	.b6ca		60		rts		                rts

1535	.b6cb						LB6AD:
1536	.b6cb		a9 00		lda #$00	                lda #$00
1537	.b6cd		80 02		bra $b6d1	                bra LB6B3

1539	.b6cf						LB6B1:
1540	.b6cf		a9 ff		lda #$ff	                lda #$FF
1541	.b6d1						LB6B3:
1542	.b6d1		85 2e		sta $2e		                sta $2E
1543	.b6d3		64 2f		stz $2f		                stz $2F
1544	.b6d5						LB6B7:
1545	.b6d5		a6 2f		ldx $2f		                ldx $2F
1546	.b6d7		e8		inx		                inx
1547	.b6d8		e8		inx		                inx
1548	.b6d9		e8		inx		                inx
1549	.b6da		e0 1b		cpx #$1b	                cpx #$1B
1550	.b6dc		f0 1f		beq $b6fd	                beq LB6DF
1551	.b6de		86 2f		stx $2f		                stx $2F
1552	.b6e0		20 e5 b6	jsr $b6e5	                jsr LB6C7
1553	.b6e3		80 f0		bra $b6d5	                bra LB6B7

1555	.b6e5						LB6C7:
1556	.b6e5		bc ff ff	ldy $ffff,x	                ldy $FFFF,x
1557	.b6e8		b5 00		lda $00,x	                lda $00,x
1558	.b6ea		d0 11		bne $b6fd	                bne LB6DF
1559	.b6ec		bd fe ff	lda $fffe,x	                lda LFFFE,x
1560	.b6ef		c9 3e		cmp #$3e	                cmp #$3E
1561	.b6f1		90 0a		bcc $b6fd	                bcc LB6DF
1562	.b6f3		f0 09		beq $b6fe	                beq LB6E0
1563	.b6f5		a5 2e		lda $2e		                lda $2E
1564	.b6f7		c0 07		cpy #$07	                cpy #$07
1565	.b6f9		d0 02		bne $b6fd	                bne LB6DF
1566	.b6fb		85 34		sta $34		                sta $34
1567	.b6fd						LB6DF:
1568	.b6fd		60		rts		                rts

1570	.b6fe						LB6E0:
1571	.b6fe		a5 2e		lda $2e		                lda $2E
1572	.b700		c0 01		cpy #$01	                cpy #$01
1573	.b702		b0 07		bcs $b70b	                bcs LB6ED
1574	.b704		1a		inc a		                inc a
1575	.b705		0a		asl a		                asl a
1576	.b706		aa		tax		                tax
1577	.b707		a9 04		lda #$04	                lda #$04
1578	.b709		80 09		bra $b714	                bra LB6F6

1580	.b70b						LB6ED:
1581	.b70b		d0 0a		bne $b717	                bne LB6F9
1582	.b70d		aa		tax		                tax
1583	.b70e		f0 02		beq $b712	                beq LB6F4
1584	.b710		a2 21		ldx #$21	                ldx #$21
1585	.b712						LB6F4:
1586	.b712		a9 cb		lda #$cb	                lda #$CB
1587	.b714						LB6F6:
1588	.b714		4c 43 b8	jmp $b843	                jmp osbyteY00

1590	.b717						LB6F9:
1591	.b717		c0 03		cpy #$03	                cpy #$03
1592	.b719		b0 0a		bcs $b725	                bcs LB707
1593	.b71b		24 20		bit $20		                bit $20
1594	.b71d		10 03		bpl $b722	                bpl LB704
1595	.b71f		a8		tay		                tay
1596	.b720		f0 db		beq $b6fd	                beq LB6DF
1597	.b722						LB704:
1598	.b722		85 36		sta $36		                sta $36
1599	.b724						LB706:
1600	.b724		60		rts		                rts

1602	.b725						LB707:
1603	.b725		d0 09		bne $b730	                bne LB712
1604	.b727		2a		rol a		                rol a
1605	.b728		a9 00		lda #$00	                lda #$00
1606	.b72a						LB70C:
1607	.b72a		2a		rol a		                rol a
1608	.b72b		aa		tax		                tax
1609	.b72c		a9 60		lda #$60	                lda #$60
1610	.b72e		80 e4		bra $b714	                bra LB6F6

1612	.b730						LB712:
1613	.b730		c0 05		cpy #$05	                cpy #$05
1614	.b732		b0 05		bcs $b739	                bcs LB71B
1615	.b734		2a		rol a		                rol a
1616	.b735		a9 01		lda #$01	                lda #$01
1617	.b737		80 f1		bra $b72a	                bra LB70C

1619	.b739						LB71B:
1620	.b739		d0 e9		bne $b724	                bne LB706
1621	.b73b		85 35		sta $35		                sta $35
1622	.b73d		60		rts		                rts

1624	.b73e						LB720:
1625	.b73e		20 2b b3	jsr $b32b	                jsr LB30D
1626	.b741		a9 23		lda #$23	                lda #$23
1627	.b743		4c 04 b8	jmp $b804	                jmp LB7E6

1629	.b746						LB728:
1630	.b746		5a		phy		                phy
1631	.b747		da		phx		                phx
1632	.b748		48		pha		                pha
1633	.b749		24 30		bit $30		                bit $30
1634	.b74b		30 1d		bmi $b76a	                bmi LB74C
1635	.b74d		c9 40		cmp #$40	                cmp #$40
1636	.b74f		90 06		bcc $b757	                bcc LB739
1637	.b751		a8		tay		                tay
1638	.b752		30 03		bmi $b757	                bmi LB739
1639	.b754		18		clc		                clc
1640	.b755		65 33		adc $33		                adc $33
1641	.b757						LB739:
1642	.b757		a8		tay		                tay
1643	.b758		c0 60		cpy #$60	                cpy #$60
1644	.b75a		d0 02		bne $b75e	                bne LB740
1645	.b75c		a9 bb		lda #$bb	                lda #$BB
1646	.b75e						LB740:
1647	.b75e		c0 bb		cpy #$bb	                cpy #$BB
1648	.b760		d0 02		bne $b764	                bne LB746
1649	.b762		a5 32		lda $32		                lda $32
1650	.b764						LB746:
1651	.b764		c0 23		cpy #$23	                cpy #$23
1652	.b766		d0 02		bne $b76a	                bne LB74C
1653	.b768		a5 31		lda $31		                lda $31
1654	.b76a						LB74C:
1655	.b76a		48		pha		                pha
1656	.b76b		20 3f b8	jsr $b83f	                jsr LB821
1657	.b76e		e4 38		cpx $38		                cpx zterm.numColumns
1658	.b770		f0 0a		beq $b77c	                beq LB75E
1659	.b772						LB754:
1660	.b772		68		pla		                pla
1661	.b773		20 ee ff	jsr $ffee	                jsr OSWRCH
1662	.b776		48		pha		                pha
1663	.b777						LB759:
1664	.b777		68		pla		                pla
1665	.b778		68		pla		                pla
1666	.b779		fa		plx		                plx
1667	.b77a		7a		ply		                ply
1668	.b77b		60		rts		                rts

1670	.b77c						LB75E:
1671	.b77c		24 34		bit $34		                bit $34
1672	.b77e		10 f7		bpl $b777	                bpl LB759
1673	.b780		24 35		bit $35		                bit $35
1674	.b782		10 ee		bpl $b772	                bpl LB754
1675	.b784		68		pla		                pla
1676	.b785		48		pha		                pha
1677	.b786		c9 20		cmp #$20	                cmp #$20
1678	.b788		90 e8		bcc $b772	                bcc LB754
1679	.b78a		d0 05		bne $b791	                bne LB773
1680	.b78c		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1681	.b78f		80 e6		bra $b777	                bra LB759

1683	.b791						LB773:
1684	.b791		a9 0d		lda #$0d	                lda #$0D
1685	.b793		20 ee ff	jsr $ffee	                jsr OSWRCH
1686	.b796		20 d7 b4	jsr $b4d7	                jsr LB4B9
1687	.b799		a0 00		ldy #$00	                ldy #$00
1688	.b79b						LB77D:
1689	.b79b		5a		phy		                phy
1690	.b79c		a9 08		lda #$08	                lda #$08
1691	.b79e		20 ee ff	jsr $ffee	                jsr OSWRCH
1692	.b7a1		a9 87		lda #$87	                lda #$87
1693	.b7a3		20 f4 ff	jsr $fff4	                jsr OSBYTE
1694	.b7a6		7a		ply		                ply
1695	.b7a7		8a		txa		                txa
1696	.b7a8		c9 20		cmp #$20	                cmp #$20
1697	.b7aa		f0 0d		beq $b7b9	                beq LB79B
1698	.b7ac		99 40 04	sta $0440,y	                sta $0440,y
1699	.b7af		c8		iny		                iny
1700	.b7b0		c4 38		cpy $38		                cpy zterm.numColumns
1701	.b7b2		d0 e7		bne $b79b	                bne LB77D
1702	.b7b4		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1703	.b7b7		80 b9		bra $b772	                bra LB754

1705	.b7b9						LB79B:
1706	.b7b9		5a		phy		                phy
1707	.b7ba		a9 00		lda #$00	                lda #$00
1708	.b7bc		20 04 b8	jsr $b804	                jsr LB7E6
1709	.b7bf		20 e7 ff	jsr $ffe7	                jsr OSNEWL
1710	.b7c2		7a		ply		                ply
1711	.b7c3		c8		iny		                iny
1712	.b7c4						LB7A6:
1713	.b7c4		88		dey		                dey
1714	.b7c5		f0 ab		beq $b772	                beq LB754
1715	.b7c7		b9 3f 04	lda $043f,y	                lda $043F,y
1716	.b7ca		20 ee ff	jsr $ffee	                jsr OSWRCH
1717	.b7cd		80 f5		bra $b7c4	                bra LB7A6

1719	.b7cf						terminalINDnHandler:
1720	.b7cf		90 46		bcc $b817	                bcc LB7F9
1721	.b7d1						LB7B3:
1722	.b7d1		38		sec		                sec
1723	.b7d2		66 19		ror $19		                ror $19
1724	.b7d4						LB7B6:
1725	.b7d4		a2 32		ldx #$32	                ldx #$32
1726	.b7d6						LB7B8:
1727	.b7d6		a9 d5		lda #$d5	                lda #$D5
1728	.b7d8		20 43 b8	jsr $b843	                jsr osbyteY00
1729	.b7db		da		phx		                phx
1730	.b7dc		a2 01		ldx #$01	                ldx #$01
1731	.b7de		a9 d6		lda #$d6	                lda #$D6
1732	.b7e0		20 43 b8	jsr $b843	                jsr osbyteY00
1733	.b7e3		da		phx		                phx
1734	.b7e4		a9 ec		lda #$ec	                lda #$EC
1735	.b7e6		a2 14		ldx #$14	                ldx #$14
1736	.b7e8		20 43 b8	jsr $b843	                jsr osbyteY00
1737	.b7eb		a9 07		lda #$07	                lda #$07
1738	.b7ed		20 ee ff	jsr $ffee	                jsr OSWRCH
1739	.b7f0		a9 ec		lda #$ec	                lda #$EC
1740	.b7f2		20 43 b8	jsr $b843	                jsr osbyteY00
1741	.b7f5		fa		plx		                plx
1742	.b7f6		a9 d6		lda #$d6	                lda #$D6
1743	.b7f8		20 43 b8	jsr $b843	                jsr osbyteY00
1744	.b7fb		fa		plx		                plx
1745	.b7fc		a9 d5		lda #$d5	                lda #$D5
1746	.b7fe		80 43		bra $b843	                bra osbyteY00

1748	.b800						LB7E2:
1749	.b800		a2 8c		ldx #$8c	                ldx #$8C
1750	.b802		80 d2		bra $b7d6	                bra LB7B8

1752	.b804						LB7E6:
1753	.b804		a8		tay		                tay
1754	.b805		a2 0a		ldx #$0a	                ldx #$0A
1755	.b807		a9 97		lda #$97	                lda #$97
1756	.b809						LB7EB:
1757	.b809		0a		asl a		                asl a
1758	.b80a		b0 01		bcs $b80d	                bcs LB7EF
1759	.b80c		c8		iny		                iny
1760	.b80d						LB7EF:
1761	.b80d		4a		lsr a		                lsr a
1762	.b80e		20 ee ff	jsr $ffee	                jsr OSWRCH
1763	.b811		b9 18 b8	lda $b818,y	                lda LB7FA,y
1764	.b814		ca		dex		                dex
1765	.b815		d0 f2		bne $b809	                bne LB7EB
1766	.b817						LB7F9:
1767	.b817		60		rts		                rts

1769	.b818						LB7FA:
1770							                ; PHP
1771							                ; ORA $06
1772							                ; BRA LB807

1774							                ; TSB $05
1775							                ; BRK
1776							                ; BRK
1777							                ; ORA ($80,x)
1778							                ; PHP
1779							                ; TSB $06
1780							                ; BRA LB812

1782							                ; ORA $0A
1783							                ; BRA LB816

1785							                ; BRK
1786							                ; ORA $00
1787							                ; BRK
1788	>b818		08				                .byte $08
1789	>b819		05				                .byte $05
1790	>b81a		06				                .byte $06
1791	>b81b		80				                .byte $80
1792	>b81c		08				                .byte $08
1793	>b81d		04				                .byte $04
1794	>b81e		05				                .byte $05
1795	>b81f		00				                .byte $00
1796	>b820		00				                .byte $00
1797	>b821		01				                .byte $01
1798	>b822		80				                .byte $80
1799	>b823		08				                .byte $08
1800	>b824		04				                .byte $04
1801	>b825		06				                .byte $06
1802	>b826		80				                .byte $80
1803	>b827		08				                .byte $08
1804	>b828		05				                .byte $05
1805	>b829		0a				                .byte $0A
1806	>b82a		80				                .byte $80
1807	>b82b		08				                .byte $08
1808	>b82c		00				                .byte $00
1809	>b82d		05				                .byte $05
1810	>b82e		00				                .byte $00
1811	>b82f		00				                .byte $00

1813	.b830						LB812:
1814							;ORA (&80,x)      :\ B812= 01 80       ..
1815	>b830		01				                .byte $01
1816	>b831		80				                .byte $80
1817							;PHP              :\ B814= 08          .
1818	>b832		08				                .byte $08
1819							;BRK              :\ B815= 00          .
1820	>b833		00				                .byte $00
1821							;.LB816
1822							;ASL A            :\ B816= 0A          .
1823	>b834		0a				                .byte $0A
1824							;BRA LB829        :\ B817= 80 10       ..
1825	>b835		80				                .byte $80
1826	>b836		10				                .byte $10
1827							;ORA (&80,x)      :\ B819= 01 80       ..
1828	>b837		01				                .byte $01
1829	>b838		80				                .byte $80
1830							;BPL LB79D        :\ B81B= 10 80       ..
1831	>b839		10				                .byte $10
1832	>b83a		80				                .byte $80
1833	>b83b		07				                .byte $07
1834	>b83c		00				                .byte $00
1835	>b83d		03				                .byte $03
1836							;BRA LB7CB        :\ B820= 80 A9       .)
1837							; LDA &A2          :\ B822= A5 A2       %"
1838							; BRK              :\ B824= 00          .
1839	>b83e		80				                .byte $80
1840	.b83f						LB821:
1841	.b83f		a9 a5		lda #$a5	                lda #$A5
1842	.b841						osbyteX00Y00:
1843	.b841		a2 00		ldx #$00	                ldx #$00
1844	.b843						osbyteY00:
1845	.b843		a0 00		ldy #$00	                ldy #$00
1846	.b845						-
1847	.b845		4c f4 ff	jmp $fff4	                jmp OSBYTE

1849	.b848						LB82A:
1850	.b848		a9 9c		lda #$9c	                lda #$9C
1851	.b84a		a0 9f		ldy #$9f	                ldy #$9F
1852	.b84c		80 f7		bra $b845	                bra -

1854	.b84e						LB830:
1855	.b84e		a0 00		ldy #$00	                ldy #$00
1856	.b850						LB832:
1857	.b850		a2 ff		ldx #$ff	                ldx #$FF
1858	.b852		da		phx		                phx
1859	.b853						LB835:
1860	.b853		68		pla		                pla
1861	.b854		1a		inc a		                inc a
1862	.b855		48		pha		                pha
1863	.b856		5a		phy		                phy
1864	.b857		20 bc b8	jsr $b8bc	                jsr LB89E
1865	.b85a						LB83C:
1866	.b85a		c9 2e		cmp #$2e	                cmp #'.'
1867	.b85c		f0 18		beq $b876	                beq LB858
1868	.b85e		c9 40		cmp #$40	                cmp #'@'
1869	.b860		b0 02		bcs $b864	                bcs LB846
1870	.b862		a9 00		lda #$00	                lda #$00
1871	.b864						LB846:
1872	.b864		29 5f		and #$5f	                and #$5F
1873	.b866		e8		inx		                inx
1874	.b867		5d 89 b8	eor $b889,x	                eor LB86B,x
1875	.b86a		f0 05		beq $b871	                beq LB853
1876	.b86c		0a		asl a		                asl a
1877	.b86d		f0 07		beq $b876	                beq LB858
1878	.b86f		80 0a		bra $b87b	                bra LB85D

1880	.b871						LB853:
1881	.b871		c8		iny		                iny
1882	.b872		b1 f2		lda ($f2),y	                lda ($F2),y
1883	.b874		80 e4		bra $b85a	                bra LB83C

1885	.b876						LB858:
1886	.b876		c8		iny		                iny
1887	.b877		68		pla		                pla
1888	.b878		68		pla		                pla
1889	.b879		18		clc		                clc
1890	.b87a		60		rts		                rts

1892	.b87b						LB85D:
1893	.b87b		7a		ply		                ply
1894	.b87c						LB85E:
1895	.b87c		bd 89 b8	lda $b889,x	                lda LB86B,x
1896	.b87f		d0 03		bne $b884	                bne LB866
1897	.b881		38		sec		                sec
1898	.b882		68		pla		                pla
1899	.b883		60		rts		                rts

1901	.b884						LB866:
1902	.b884		30 cd		bmi $b853	                bmi LB835
1903	.b886		e8		inx		                inx
1904	.b887		80 f3		bra $b87c	                bra LB85E

1906	.b889						LB86B:
1907	>b889		43				                .byte $43
1908	>b88a		4b				                .byte $4B
1909	>b88b		cc 4d 43			                .byte $cc,$4d,$43
1910	>b88e		cc 50 52			                .byte $cc,$50,$52
1911	>b891		4f				                .byte $4F
1912	>b892		d4				                .byte $D4
1913	>b893		52 46				                .byte $52,$46
1914	>b895		c3				                .byte $C3
1915	>b896		54				                .byte $54
1916	>b897		46 c3				                .byte $46,$c3
1917	>b899		57				                .byte $57
1918	>b89a		57				                .byte $57
1919	>b89b		cd 41 57			                .byte $cd,$41,$57
1920	>b89e		cd 56 44			                .byte $cd,$56,$44
1921	>b8a1		d5 4d				                .byte $d5,$4d
1922	>b8a3		4f				                .byte $4F
1923	>b8a4		44				                .byte $44
1924	>b8a5		c5 4f				                .byte $c5,$4f
1925	>b8a7		ce 4f 46			                .byte $ce,$4f,$46
1926	>b8aa		c6 54				                .byte $c6,$54
1927	>b8ac		45 52				                .byte $45,$52
1928	>b8ae		4d 49 4e			                .byte $4d,$49,$4e
1929	>b8b1		41 cc				                .byte $41,$cc
1930	>b8b3		42				                .byte $42
1931	>b8b4		42				                .byte $42
1932	>b8b5		c3				                .byte $C3
1933	>b8b6		47				                .byte $47
1934	>b8b7		d3				                .byte $D3
1935	>b8b8		54				                .byte $54
1936	>b8b9		54				                .byte $54
1937	>b8ba		d9				                .byte $D9
1938	>b8bb		00				                .byte $00
1939	.b8bc						LB89E:
1940	.b8bc		88		dey		                dey
1941	.b8bd						LB89F:
1942	.b8bd		c8		iny		                iny
1943	.b8be		b1 f2		lda ($f2),y	                lda ($F2),y
1944	.b8c0		c9 20		cmp #$20	                cmp #$20
1945	.b8c2		f0 f9		beq $b8bd	                beq LB89F
1946	.b8c4		c9 0d		cmp #$0d	                cmp #$0D
1947	.b8c6		60		rts		                rts

1949	.b8c7						LB8A9:
1950	.b8c7		64 3a		stz $3a		                stz $3A
1951	.b8c9		64 3b		stz $3b		                stz $3B
1952	.b8cb						LB8AD:
1953	.b8cb		c9 30		cmp #$30	                cmp #$30
1954	.b8cd		90 04		bcc $b8d3	                bcc LB8B5
1955	.b8cf		c9 3a		cmp #$3a	                cmp #$3A
1956	.b8d1		90 02		bcc $b8d5	                bcc LB8B7
1957	.b8d3						LB8B5:
1958	.b8d3		38		sec		                sec
1959	.b8d4		60		rts		                rts

1961	.b8d5						LB8B7:
1962	.b8d5		e9 2f		sbc #$2f	                sbc #$2F
1963	.b8d7		48		pha		                pha
1964	.b8d8		a5 3b		lda $3b		                lda $3B
1965	.b8da		48		pha		                pha
1966	.b8db		a5 3a		lda $3a		                lda $3A
1967	.b8dd		0a		asl a		                asl a
1968	.b8de		26 3b		rol $3b		                rol $3B
1969	.b8e0		0a		asl a		                asl a
1970	.b8e1		26 3b		rol $3b		                rol $3B
1971	.b8e3		18		clc		                clc
1972	.b8e4		65 3a		adc $3a		                adc $3A
1973	.b8e6		85 3a		sta $3a		                sta $3A
1974	.b8e8		68		pla		                pla
1975	.b8e9		65 3b		adc $3b		                adc $3B
1976	.b8eb		85 3b		sta $3b		                sta $3B
1977	.b8ed		06 3a		asl $3a		                asl $3A
1978	.b8ef		26 3b		rol $3b		                rol $3B
1979	.b8f1		68		pla		                pla
1980	.b8f2		18		clc		                clc
1981	.b8f3		65 3a		adc $3a		                adc $3A
1982	.b8f5		85 3a		sta $3a		                sta $3A
1983	.b8f7		90 03		bcc $b8fc	                bcc LB8DE
1984	.b8f9		e6 3b		inc $3b		                inc $3B
1985	.b8fb		18		clc		                clc
1986	.b8fc						LB8DE:
1987	.b8fc		60		rts		                rts

:7	;******  Return to file: src/terminal.s65

6824							                .endif

6826							                .if version>=500
6828							                .endif

6830							;-------------------------------------------------------------------------

6832							                .if version==320&&multios
6835							                .endif

6837							;-------------------------------------------------------------------------

6839							; Unused space
6840							; ============
6841	>b8fd		ff ff ff			                .fill $b900-*,$ff

6843							; Default font
6844							; ============
6845	.b900						LB900:
6846							                .cerror (<LB900)!=0,"font data must be page aligned"
6847							                ; CHR$32 -
6848	>b900		00				                .byte %00000000
6849	>b901		00				                .byte %00000000
6850	>b902		00				                .byte %00000000
6851	>b903		00				                .byte %00000000
6852	>b904		00				                .byte %00000000
6853	>b905		00				                .byte %00000000
6854	>b906		00				                .byte %00000000
6855	>b907		00				                .byte %00000000

6857							                ; CHR$33 - !
6858	>b908		18				                .byte %00011000
6859	>b909		18				                .byte %00011000
6860	>b90a		18				                .byte %00011000
6861	>b90b		18				                .byte %00011000
6862	>b90c		18				                .byte %00011000
6863	>b90d		00				                .byte %00000000
6864	>b90e		18				                .byte %00011000
6865	>b90f		00				                .byte %00000000

6867							                ; CHR$34 - "
6868	>b910		6c				                .byte %01101100
6869	>b911		6c				                .byte %01101100
6870	>b912		6c				                .byte %01101100
6871	>b913		00				                .byte %00000000
6872	>b914		00				                .byte %00000000
6873	>b915		00				                .byte %00000000
6874	>b916		00				                .byte %00000000
6875	>b917		00				                .byte %00000000

6877							                ; CHR$35 - #
6878	>b918		36				                .byte %00110110
6879	>b919		36				                .byte %00110110
6880	>b91a		7f				                .byte %01111111
6881	>b91b		36				                .byte %00110110
6882	>b91c		7f				                .byte %01111111
6883	>b91d		36				                .byte %00110110
6884	>b91e		36				                .byte %00110110
6885	>b91f		00				                .byte %00000000

6887							                ; CHR$36 - $
6888	>b920		0c				                .byte %00001100
6889	>b921		3f				                .byte %00111111
6890	>b922		68				                .byte %01101000
6891	>b923		3e				                .byte %00111110
6892	>b924		0b				                .byte %00001011
6893	>b925		7e				                .byte %01111110
6894	>b926		18				                .byte %00011000
6895	>b927		00				                .byte %00000000

6897							                ; CHR$37 - %
6898	>b928		60				                .byte %01100000
6899	>b929		66				                .byte %01100110
6900	>b92a		0c				                .byte %00001100
6901	>b92b		18				                .byte %00011000
6902	>b92c		30				                .byte %00110000
6903	>b92d		66				                .byte %01100110
6904	>b92e		06				                .byte %00000110
6905	>b92f		00				                .byte %00000000

6907							                ; CHR$38 - &
6908	>b930		38				                .byte %00111000
6909	>b931		6c				                .byte %01101100
6910	>b932		6c				                .byte %01101100
6911	>b933		38				                .byte %00111000
6912	>b934		6d				                .byte %01101101
6913	>b935		66				                .byte %01100110
6914	>b936		3b				                .byte %00111011
6915	>b937		00				                .byte %00000000

6917							                ; CHR$39 - '
6918	>b938		0c				                .byte %00001100
6919	>b939		18				                .byte %00011000
6920	>b93a		30				                .byte %00110000
6921	>b93b		00				                .byte %00000000
6922	>b93c		00				                .byte %00000000
6923	>b93d		00				                .byte %00000000
6924	>b93e		00				                .byte %00000000
6925	>b93f		00				                .byte %00000000

6927							                ; CHR$40 - (
6928	>b940		0c				                .byte %00001100
6929	>b941		18				                .byte %00011000
6930	>b942		30				                .byte %00110000
6931	>b943		30				                .byte %00110000
6932	>b944		30				                .byte %00110000
6933	>b945		18				                .byte %00011000
6934	>b946		0c				                .byte %00001100
6935	>b947		00				                .byte %00000000

6937							                ; CHR$41 - )
6938	>b948		30				                .byte %00110000
6939	>b949		18				                .byte %00011000
6940	>b94a		0c				                .byte %00001100
6941	>b94b		0c				                .byte %00001100
6942	>b94c		0c				                .byte %00001100
6943	>b94d		18				                .byte %00011000
6944	>b94e		30				                .byte %00110000
6945	>b94f		00				                .byte %00000000

6947							                ; CHR$42 - *
6948	>b950		00				                .byte %00000000
6949	>b951		18				                .byte %00011000
6950	>b952		7e				                .byte %01111110
6951	>b953		3c				                .byte %00111100
6952	>b954		7e				                .byte %01111110
6953	>b955		18				                .byte %00011000
6954	>b956		00				                .byte %00000000
6955	>b957		00				                .byte %00000000

6957							                ; CHR$43 - +
6958	>b958		00				                .byte %00000000
6959	>b959		18				                .byte %00011000
6960	>b95a		18				                .byte %00011000
6961	>b95b		7e				                .byte %01111110
6962	>b95c		18				                .byte %00011000
6963	>b95d		18				                .byte %00011000
6964	>b95e		00				                .byte %00000000
6965	>b95f		00				                .byte %00000000

6967							                ; CHR$44 - ,
6968	>b960		00				                .byte %00000000
6969	>b961		00				                .byte %00000000
6970	>b962		00				                .byte %00000000
6971	>b963		00				                .byte %00000000
6972	>b964		00				                .byte %00000000
6973	>b965		18				                .byte %00011000
6974	>b966		18				                .byte %00011000
6975	>b967		30				                .byte %00110000

6977							                ; CHR$45 - -
6978	>b968		00				                .byte %00000000
6979	>b969		00				                .byte %00000000
6980	>b96a		00				                .byte %00000000
6981	>b96b		7e				                .byte %01111110
6982	>b96c		00				                .byte %00000000
6983	>b96d		00				                .byte %00000000
6984	>b96e		00				                .byte %00000000
6985	>b96f		00				                .byte %00000000

6987							                ; CHR$46 - .
6988	>b970		00				                .byte %00000000
6989	>b971		00				                .byte %00000000
6990	>b972		00				                .byte %00000000
6991	>b973		00				                .byte %00000000
6992	>b974		00				                .byte %00000000
6993	>b975		18				                .byte %00011000
6994	>b976		18				                .byte %00011000
6995	>b977		00				                .byte %00000000

6997							                ; CHR$47 - /
6998	>b978		00				                .byte %00000000
6999	>b979		06				                .byte %00000110
7000	>b97a		0c				                .byte %00001100
7001	>b97b		18				                .byte %00011000
7002	>b97c		30				                .byte %00110000
7003	>b97d		60				                .byte %01100000
7004	>b97e		00				                .byte %00000000
7005	>b97f		00				                .byte %00000000

7007							                ; CHR$48 - 0
7008	>b980		3c				                .byte %00111100
7009	>b981		66				                .byte %01100110
7010	>b982		6e				                .byte %01101110
7011	>b983		7e				                .byte %01111110
7012	>b984		76				                .byte %01110110
7013	>b985		66				                .byte %01100110
7014	>b986		3c				                .byte %00111100
7015	>b987		00				                .byte %00000000

7017							                ; CHR$49 - 1
7018	>b988		18				                .byte %00011000
7019	>b989		38				                .byte %00111000
7020	>b98a		18				                .byte %00011000
7021	>b98b		18				                .byte %00011000
7022	>b98c		18				                .byte %00011000
7023	>b98d		18				                .byte %00011000
7024	>b98e		7e				                .byte %01111110
7025	>b98f		00				                .byte %00000000

7027							                ; CHR$50 - 2
7028	>b990		3c				                .byte %00111100
7029	>b991		66				                .byte %01100110
7030	>b992		06				                .byte %00000110
7031	>b993		0c				                .byte %00001100
7032	>b994		18				                .byte %00011000
7033	>b995		30				                .byte %00110000
7034	>b996		7e				                .byte %01111110
7035	>b997		00				                .byte %00000000

7037							                ; CHR$51 - 3
7038	>b998		3c				                .byte %00111100
7039	>b999		66				                .byte %01100110
7040	>b99a		06				                .byte %00000110
7041	>b99b		1c				                .byte %00011100
7042	>b99c		06				                .byte %00000110
7043	>b99d		66				                .byte %01100110
7044	>b99e		3c				                .byte %00111100
7045	>b99f		00				                .byte %00000000

7047							                ; CHR$52 - 4
7048	>b9a0		0c				                .byte %00001100
7049	>b9a1		1c				                .byte %00011100
7050	>b9a2		3c				                .byte %00111100
7051	>b9a3		6c				                .byte %01101100
7052	>b9a4		7e				                .byte %01111110
7053	>b9a5		0c				                .byte %00001100
7054	>b9a6		0c				                .byte %00001100
7055	>b9a7		00				                .byte %00000000

7057							                ; CHR$53 - 5
7058	>b9a8		7e				                .byte %01111110
7059	>b9a9		60				                .byte %01100000
7060	>b9aa		7c				                .byte %01111100
7061	>b9ab		06				                .byte %00000110
7062	>b9ac		06				                .byte %00000110
7063	>b9ad		66				                .byte %01100110
7064	>b9ae		3c				                .byte %00111100
7065	>b9af		00				                .byte %00000000

7067							                ; CHR$54 - 6
7068	>b9b0		1c				                .byte %00011100
7069	>b9b1		30				                .byte %00110000
7070	>b9b2		60				                .byte %01100000
7071	>b9b3		7c				                .byte %01111100
7072	>b9b4		66				                .byte %01100110
7073	>b9b5		66				                .byte %01100110
7074	>b9b6		3c				                .byte %00111100
7075	>b9b7		00				                .byte %00000000

7077							                ; CHR$55 - 7
7078	>b9b8		7e				                .byte %01111110
7079	>b9b9		06				                .byte %00000110
7080	>b9ba		0c				                .byte %00001100
7081	>b9bb		18				                .byte %00011000
7082	>b9bc		30				                .byte %00110000
7083	>b9bd		30				                .byte %00110000
7084	>b9be		30				                .byte %00110000
7085	>b9bf		00				                .byte %00000000

7087							                ; CHR$56 - 8
7088	>b9c0		3c				                .byte %00111100
7089	>b9c1		66				                .byte %01100110
7090	>b9c2		66				                .byte %01100110
7091	>b9c3		3c				                .byte %00111100
7092	>b9c4		66				                .byte %01100110
7093	>b9c5		66				                .byte %01100110
7094	>b9c6		3c				                .byte %00111100
7095	>b9c7		00				                .byte %00000000

7097							                ; CHR$57 - 9
7098	>b9c8		3c				                .byte %00111100
7099	>b9c9		66				                .byte %01100110
7100	>b9ca		66				                .byte %01100110
7101	>b9cb		3e				                .byte %00111110
7102	>b9cc		06				                .byte %00000110
7103	>b9cd		0c				                .byte %00001100
7104	>b9ce		38				                .byte %00111000
7105	>b9cf		00				                .byte %00000000

7107							                ; CHR$58 - :
7108	>b9d0		00				                .byte %00000000
7109	>b9d1		00				                .byte %00000000
7110	>b9d2		18				                .byte %00011000
7111	>b9d3		18				                .byte %00011000
7112	>b9d4		00				                .byte %00000000
7113	>b9d5		18				                .byte %00011000
7114	>b9d6		18				                .byte %00011000
7115	>b9d7		00				                .byte %00000000

7117							                ; CHR$59 - ;
7118	>b9d8		00				                .byte %00000000
7119	>b9d9		00				                .byte %00000000
7120	>b9da		18				                .byte %00011000
7121	>b9db		18				                .byte %00011000
7122	>b9dc		00				                .byte %00000000
7123	>b9dd		18				                .byte %00011000
7124	>b9de		18				                .byte %00011000
7125	>b9df		30				                .byte %00110000

7127							                ; CHR$60 - <
7128	>b9e0		0c				                .byte %00001100
7129	>b9e1		18				                .byte %00011000
7130	>b9e2		30				                .byte %00110000
7131	>b9e3		60				                .byte %01100000
7132	>b9e4		30				                .byte %00110000
7133	>b9e5		18				                .byte %00011000
7134	>b9e6		0c				                .byte %00001100
7135	>b9e7		00				                .byte %00000000

7137							                ; CHR$61 - =
7138	>b9e8		00				                .byte %00000000
7139	>b9e9		00				                .byte %00000000
7140	>b9ea		7e				                .byte %01111110
7141	>b9eb		00				                .byte %00000000
7142	>b9ec		7e				                .byte %01111110
7143	>b9ed		00				                .byte %00000000
7144	>b9ee		00				                .byte %00000000
7145	>b9ef		00				                .byte %00000000

7147							                ; CHR$62 - >
7148	>b9f0		30				                .byte %00110000
7149	>b9f1		18				                .byte %00011000
7150	>b9f2		0c				                .byte %00001100
7151	>b9f3		06				                .byte %00000110
7152	>b9f4		0c				                .byte %00001100
7153	>b9f5		18				                .byte %00011000
7154	>b9f6		30				                .byte %00110000
7155	>b9f7		00				                .byte %00000000

7157							                ; CHR$63 - ?
7158	>b9f8		3c				                .byte %00111100
7159	>b9f9		66				                .byte %01100110
7160	>b9fa		0c				                .byte %00001100
7161	>b9fb		18				                .byte %00011000
7162	>b9fc		18				                .byte %00011000
7163	>b9fd		00				                .byte %00000000
7164	>b9fe		18				                .byte %00011000
7165	>b9ff		00				                .byte %00000000

7167							                ; CHR$64 - @
7168	>ba00		3c				                .byte %00111100
7169	>ba01		66				                .byte %01100110
7170	>ba02		6e				                .byte %01101110
7171	>ba03		6a				                .byte %01101010
7172	>ba04		6e				                .byte %01101110
7173	>ba05		60				                .byte %01100000
7174	>ba06		3c				                .byte %00111100
7175	>ba07		00				                .byte %00000000

7177							                ; CHR$65 - A
7178	>ba08		3c				                .byte %00111100
7179	>ba09		66				                .byte %01100110
7180	>ba0a		66				                .byte %01100110
7181	>ba0b		7e				                .byte %01111110
7182	>ba0c		66				                .byte %01100110
7183	>ba0d		66				                .byte %01100110
7184	>ba0e		66				                .byte %01100110
7185	>ba0f		00				                .byte %00000000

7187							                ; CHR$66 - B
7188	>ba10		7c				                .byte %01111100
7189	>ba11		66				                .byte %01100110
7190	>ba12		66				                .byte %01100110
7191	>ba13		7c				                .byte %01111100
7192	>ba14		66				                .byte %01100110
7193	>ba15		66				                .byte %01100110
7194	>ba16		7c				                .byte %01111100
7195	>ba17		00				                .byte %00000000

7197							                ; CHR$67 - C
7198	>ba18		3c				                .byte %00111100
7199	>ba19		66				                .byte %01100110
7200	>ba1a		60				                .byte %01100000
7201	>ba1b		60				                .byte %01100000
7202	>ba1c		60				                .byte %01100000
7203	>ba1d		66				                .byte %01100110
7204	>ba1e		3c				                .byte %00111100
7205	>ba1f		00				                .byte %00000000

7207							                ; CHR$68 - D
7208	>ba20		78				                .byte %01111000
7209	>ba21		6c				                .byte %01101100
7210	>ba22		66				                .byte %01100110
7211	>ba23		66				                .byte %01100110
7212	>ba24		66				                .byte %01100110
7213	>ba25		6c				                .byte %01101100
7214	>ba26		78				                .byte %01111000
7215	>ba27		00				                .byte %00000000

7217							                ; CHR$69 - E
7218	>ba28		7e				                .byte %01111110
7219	>ba29		60				                .byte %01100000
7220	>ba2a		60				                .byte %01100000
7221	>ba2b		7c				                .byte %01111100
7222	>ba2c		60				                .byte %01100000
7223	>ba2d		60				                .byte %01100000
7224	>ba2e		7e				                .byte %01111110
7225	>ba2f		00				                .byte %00000000

7227							                ; CHR$70 - F
7228	>ba30		7e				                .byte %01111110
7229	>ba31		60				                .byte %01100000
7230	>ba32		60				                .byte %01100000
7231	>ba33		7c				                .byte %01111100
7232	>ba34		60				                .byte %01100000
7233	>ba35		60				                .byte %01100000
7234	>ba36		60				                .byte %01100000
7235	>ba37		00				                .byte %00000000

7237							                ; CHR$71 - G
7238	>ba38		3c				                .byte %00111100
7239	>ba39		66				                .byte %01100110
7240	>ba3a		60				                .byte %01100000
7241	>ba3b		6e				                .byte %01101110
7242	>ba3c		66				                .byte %01100110
7243	>ba3d		66				                .byte %01100110
7244	>ba3e		3c				                .byte %00111100
7245	>ba3f		00				                .byte %00000000

7247							                ; CHR$72 - H
7248	>ba40		66				                .byte %01100110
7249	>ba41		66				                .byte %01100110
7250	>ba42		66				                .byte %01100110
7251	>ba43		7e				                .byte %01111110
7252	>ba44		66				                .byte %01100110
7253	>ba45		66				                .byte %01100110
7254	>ba46		66				                .byte %01100110
7255	>ba47		00				                .byte %00000000

7257							                ; CHR$73 - I
7258	>ba48		7e				                .byte %01111110
7259	>ba49		18				                .byte %00011000
7260	>ba4a		18				                .byte %00011000
7261	>ba4b		18				                .byte %00011000
7262	>ba4c		18				                .byte %00011000
7263	>ba4d		18				                .byte %00011000
7264	>ba4e		7e				                .byte %01111110
7265	>ba4f		00				                .byte %00000000

7267							                ; CHR$74 - J
7268	>ba50		3e				                .byte %00111110
7269	>ba51		0c				                .byte %00001100
7270	>ba52		0c				                .byte %00001100
7271	>ba53		0c				                .byte %00001100
7272	>ba54		0c				                .byte %00001100
7273	>ba55		6c				                .byte %01101100
7274	>ba56		38				                .byte %00111000
7275	>ba57		00				                .byte %00000000

7277							                ; CHR$75 - K
7278	>ba58		66				                .byte %01100110
7279	>ba59		6c				                .byte %01101100
7280	>ba5a		78				                .byte %01111000
7281	>ba5b		70				                .byte %01110000
7282	>ba5c		78				                .byte %01111000
7283	>ba5d		6c				                .byte %01101100
7284	>ba5e		66				                .byte %01100110
7285	>ba5f		00				                .byte %00000000

7287							                ; CHR$76 - L
7288	>ba60		60				                .byte %01100000
7289	>ba61		60				                .byte %01100000
7290	>ba62		60				                .byte %01100000
7291	>ba63		60				                .byte %01100000
7292	>ba64		60				                .byte %01100000
7293	>ba65		60				                .byte %01100000
7294	>ba66		7e				                .byte %01111110
7295	>ba67		00				                .byte %00000000

7297							                ; CHR$77 - M
7298	>ba68		63				                .byte %01100011
7299	>ba69		77				                .byte %01110111
7300	>ba6a		7f				                .byte %01111111
7301	>ba6b		6b				                .byte %01101011
7302	>ba6c		6b				                .byte %01101011
7303	>ba6d		63				                .byte %01100011
7304	>ba6e		63				                .byte %01100011
7305	>ba6f		00				                .byte %00000000

7307							                ; CHR$78 - N
7308	>ba70		66				                .byte %01100110
7309	>ba71		66				                .byte %01100110
7310	>ba72		76				                .byte %01110110
7311	>ba73		7e				                .byte %01111110
7312	>ba74		6e				                .byte %01101110
7313	>ba75		66				                .byte %01100110
7314	>ba76		66				                .byte %01100110
7315	>ba77		00				                .byte %00000000

7317							                ; CHR$79 - O
7318	>ba78		3c				                .byte %00111100
7319	>ba79		66				                .byte %01100110
7320	>ba7a		66				                .byte %01100110
7321	>ba7b		66				                .byte %01100110
7322	>ba7c		66				                .byte %01100110
7323	>ba7d		66				                .byte %01100110
7324	>ba7e		3c				                .byte %00111100
7325	>ba7f		00				                .byte %00000000

7327							                ; CHR$80 - P
7328	>ba80		7c				                .byte %01111100
7329	>ba81		66				                .byte %01100110
7330	>ba82		66				                .byte %01100110
7331	>ba83		7c				                .byte %01111100
7332	>ba84		60				                .byte %01100000
7333	>ba85		60				                .byte %01100000
7334	>ba86		60				                .byte %01100000
7335	>ba87		00				                .byte %00000000

7337							                ; CHR$81 - Q
7338	>ba88		3c				                .byte %00111100
7339	>ba89		66				                .byte %01100110
7340	>ba8a		66				                .byte %01100110
7341	>ba8b		66				                .byte %01100110
7342	>ba8c		6a				                .byte %01101010
7343	>ba8d		6c				                .byte %01101100
7344	>ba8e		36				                .byte %00110110
7345	>ba8f		00				                .byte %00000000

7347							                ; CHR$82 - R
7348	>ba90		7c				                .byte %01111100
7349	>ba91		66				                .byte %01100110
7350	>ba92		66				                .byte %01100110
7351	>ba93		7c				                .byte %01111100
7352	>ba94		6c				                .byte %01101100
7353	>ba95		66				                .byte %01100110
7354	>ba96		66				                .byte %01100110
7355	>ba97		00				                .byte %00000000

7357							                ; CHR$83 - S
7358	>ba98		3c				                .byte %00111100
7359	>ba99		66				                .byte %01100110
7360	>ba9a		60				                .byte %01100000
7361	>ba9b		3c				                .byte %00111100
7362	>ba9c		06				                .byte %00000110
7363	>ba9d		66				                .byte %01100110
7364	>ba9e		3c				                .byte %00111100
7365	>ba9f		00				                .byte %00000000

7367							                ; CHR$84 - T
7368	>baa0		7e				                .byte %01111110
7369	>baa1		18				                .byte %00011000
7370	>baa2		18				                .byte %00011000
7371	>baa3		18				                .byte %00011000
7372	>baa4		18				                .byte %00011000
7373	>baa5		18				                .byte %00011000
7374	>baa6		18				                .byte %00011000
7375	>baa7		00				                .byte %00000000

7377							                ; CHR$85 - U
7378	>baa8		66				                .byte %01100110
7379	>baa9		66				                .byte %01100110
7380	>baaa		66				                .byte %01100110
7381	>baab		66				                .byte %01100110
7382	>baac		66				                .byte %01100110
7383	>baad		66				                .byte %01100110
7384	>baae		3c				                .byte %00111100
7385	>baaf		00				                .byte %00000000

7387							                ; CHR$86 - V
7388	>bab0		66				                .byte %01100110
7389	>bab1		66				                .byte %01100110
7390	>bab2		66				                .byte %01100110
7391	>bab3		66				                .byte %01100110
7392	>bab4		66				                .byte %01100110
7393	>bab5		3c				                .byte %00111100
7394	>bab6		18				                .byte %00011000
7395	>bab7		00				                .byte %00000000

7397							                ; CHR$87 - W
7398	>bab8		63				                .byte %01100011
7399	>bab9		63				                .byte %01100011
7400	>baba		6b				                .byte %01101011
7401	>babb		6b				                .byte %01101011
7402	>babc		7f				                .byte %01111111
7403	>babd		77				                .byte %01110111
7404	>babe		63				                .byte %01100011
7405	>babf		00				                .byte %00000000

7407							                ; CHR$88 - X
7408	>bac0		66				                .byte %01100110
7409	>bac1		66				                .byte %01100110
7410	>bac2		3c				                .byte %00111100
7411	>bac3		18				                .byte %00011000
7412	>bac4		3c				                .byte %00111100
7413	>bac5		66				                .byte %01100110
7414	>bac6		66				                .byte %01100110
7415	>bac7		00				                .byte %00000000

7417							                ; CHR$89 - Y
7418	>bac8		66				                .byte %01100110
7419	>bac9		66				                .byte %01100110
7420	>baca		66				                .byte %01100110
7421	>bacb		3c				                .byte %00111100
7422	>bacc		18				                .byte %00011000
7423	>bacd		18				                .byte %00011000
7424	>bace		18				                .byte %00011000
7425	>bacf		00				                .byte %00000000

7427							                ; CHR$90 - Z
7428	>bad0		7e				                .byte %01111110
7429	>bad1		06				                .byte %00000110
7430	>bad2		0c				                .byte %00001100
7431	>bad3		18				                .byte %00011000
7432	>bad4		30				                .byte %00110000
7433	>bad5		60				                .byte %01100000
7434	>bad6		7e				                .byte %01111110
7435	>bad7		00				                .byte %00000000

7437							                ; CHR$91 - [
7438	>bad8		7c				                .byte %01111100
7439	>bad9		60				                .byte %01100000
7440	>bada		60				                .byte %01100000
7441	>badb		60				                .byte %01100000
7442	>badc		60				                .byte %01100000
7443	>badd		60				                .byte %01100000
7444	>bade		7c				                .byte %01111100
7445	>badf		00				                .byte %00000000

7447							                ; CHR$92 - \
7448	>bae0		00				                .byte %00000000
7449	>bae1		60				                .byte %01100000
7450	>bae2		30				                .byte %00110000
7451	>bae3		18				                .byte %00011000
7452	>bae4		0c				                .byte %00001100
7453	>bae5		06				                .byte %00000110
7454	>bae6		00				                .byte %00000000
7455	>bae7		00				                .byte %00000000

7457							                ; CHR$93 - ]
7458	>bae8		3e				                .byte %00111110
7459	>bae9		06				                .byte %00000110
7460	>baea		06				                .byte %00000110
7461	>baeb		06				                .byte %00000110
7462	>baec		06				                .byte %00000110
7463	>baed		06				                .byte %00000110
7464	>baee		3e				                .byte %00111110
7465	>baef		00				                .byte %00000000

7467							                ; CHR$94 - ^
7468	>baf0		18				                .byte %00011000
7469	>baf1		3c				                .byte %00111100
7470	>baf2		66				                .byte %01100110
7471	>baf3		42				                .byte %01000010
7472	>baf4		00				                .byte %00000000
7473	>baf5		00				                .byte %00000000
7474	>baf6		00				                .byte %00000000
7475	>baf7		00				                .byte %00000000

7477							                ; CHR$95 - _
7478	>baf8		00				                .byte %00000000
7479	>baf9		00				                .byte %00000000
7480	>bafa		00				                .byte %00000000
7481	>bafb		00				                .byte %00000000
7482	>bafc		00				                .byte %00000000
7483	>bafd		00				                .byte %00000000
7484	>bafe		00				                .byte %00000000
7485	>baff		ff				                .byte %11111111

7487							                ; CHR$96
7488	>bb00		1c				                .byte %00011100
7489	>bb01		36				                .byte %00110110
7490	>bb02		30				                .byte %00110000
7491	>bb03		7c				                .byte %01111100
7492	>bb04		30				                .byte %00110000
7493	>bb05		30				                .byte %00110000
7494	>bb06		7e				                .byte %01111110
7495	>bb07		00				                .byte %00000000

7497							                ; CHR$97 - a
7498	>bb08		00				                .byte %00000000
7499	>bb09		00				                .byte %00000000
7500	>bb0a		3c				                .byte %00111100
7501	>bb0b		06				                .byte %00000110
7502	>bb0c		3e				                .byte %00111110
7503	>bb0d		66				                .byte %01100110
7504	>bb0e		3e				                .byte %00111110
7505	>bb0f		00				                .byte %00000000

7507							                ; CHR$98 - b
7508	>bb10		60				                .byte %01100000
7509	>bb11		60				                .byte %01100000
7510	>bb12		7c				                .byte %01111100
7511	>bb13		66				                .byte %01100110
7512	>bb14		66				                .byte %01100110
7513	>bb15		66				                .byte %01100110
7514	>bb16		7c				                .byte %01111100
7515	>bb17		00				                .byte %00000000

7517							                ; CHR$99 - c
7518	>bb18		00				                .byte %00000000
7519	>bb19		00				                .byte %00000000
7520	>bb1a		3c				                .byte %00111100
7521	>bb1b		66				                .byte %01100110
7522	>bb1c		60				                .byte %01100000
7523	>bb1d		66				                .byte %01100110
7524	>bb1e		3c				                .byte %00111100
7525	>bb1f		00				                .byte %00000000

7527							                ; CHR$100 - d
7528	>bb20		06				                .byte %00000110
7529	>bb21		06				                .byte %00000110
7530	>bb22		3e				                .byte %00111110
7531	>bb23		66				                .byte %01100110
7532	>bb24		66				                .byte %01100110
7533	>bb25		66				                .byte %01100110
7534	>bb26		3e				                .byte %00111110
7535	>bb27		00				                .byte %00000000

7537							                ; CHR$101 - e
7538	>bb28		00				                .byte %00000000
7539	>bb29		00				                .byte %00000000
7540	>bb2a		3c				                .byte %00111100
7541	>bb2b		66				                .byte %01100110
7542	>bb2c		7e				                .byte %01111110
7543	>bb2d		60				                .byte %01100000
7544	>bb2e		3c				                .byte %00111100
7545	>bb2f		00				                .byte %00000000

7547							                ; CHR$102 - f
7548	>bb30		1c				                .byte %00011100
7549	>bb31		30				                .byte %00110000
7550	>bb32		30				                .byte %00110000
7551	>bb33		7c				                .byte %01111100
7552	>bb34		30				                .byte %00110000
7553	>bb35		30				                .byte %00110000
7554	>bb36		30				                .byte %00110000
7555	>bb37		00				                .byte %00000000

7557							                ; CHR$103 - g
7558	>bb38		00				                .byte %00000000
7559	>bb39		00				                .byte %00000000
7560	>bb3a		3e				                .byte %00111110
7561	>bb3b		66				                .byte %01100110
7562	>bb3c		66				                .byte %01100110
7563	>bb3d		3e				                .byte %00111110
7564	>bb3e		06				                .byte %00000110
7565	>bb3f		3c				                .byte %00111100

7567							                ; CHR$104 - h
7568	>bb40		60				                .byte %01100000
7569	>bb41		60				                .byte %01100000
7570	>bb42		7c				                .byte %01111100
7571	>bb43		66				                .byte %01100110
7572	>bb44		66				                .byte %01100110
7573	>bb45		66				                .byte %01100110
7574	>bb46		66				                .byte %01100110
7575	>bb47		00				                .byte %00000000

7577							                ; CHR$105 - i
7578	>bb48		18				                .byte %00011000
7579	>bb49		00				                .byte %00000000
7580	>bb4a		38				                .byte %00111000
7581	>bb4b		18				                .byte %00011000
7582	>bb4c		18				                .byte %00011000
7583	>bb4d		18				                .byte %00011000
7584	>bb4e		3c				                .byte %00111100
7585	>bb4f		00				                .byte %00000000

7587							                ; CHR$106 - j
7588	>bb50		18				                .byte %00011000
7589	>bb51		00				                .byte %00000000
7590	>bb52		38				                .byte %00111000
7591	>bb53		18				                .byte %00011000
7592	>bb54		18				                .byte %00011000
7593	>bb55		18				                .byte %00011000
7594	>bb56		18				                .byte %00011000
7595	>bb57		70				                .byte %01110000

7597							                ; CHR$107 - k
7598	>bb58		60				                .byte %01100000
7599	>bb59		60				                .byte %01100000
7600	>bb5a		66				                .byte %01100110
7601	>bb5b		6c				                .byte %01101100
7602	>bb5c		78				                .byte %01111000
7603	>bb5d		6c				                .byte %01101100
7604	>bb5e		66				                .byte %01100110
7605	>bb5f		00				                .byte %00000000

7607							                ; CHR$108 - l
7608	>bb60		38				                .byte %00111000
7609	>bb61		18				                .byte %00011000
7610	>bb62		18				                .byte %00011000
7611	>bb63		18				                .byte %00011000
7612	>bb64		18				                .byte %00011000
7613	>bb65		18				                .byte %00011000
7614	>bb66		3c				                .byte %00111100
7615	>bb67		00				                .byte %00000000

7617							                ; CHR$109 - m
7618	>bb68		00				                .byte %00000000
7619	>bb69		00				                .byte %00000000
7620	>bb6a		36				                .byte %00110110
7621	>bb6b		7f				                .byte %01111111
7622	>bb6c		6b				                .byte %01101011
7623	>bb6d		6b				                .byte %01101011
7624	>bb6e		63				                .byte %01100011
7625	>bb6f		00				                .byte %00000000

7627							                ; CHR$110 - n
7628	>bb70		00				                .byte %00000000
7629	>bb71		00				                .byte %00000000
7630	>bb72		7c				                .byte %01111100
7631	>bb73		66				                .byte %01100110
7632	>bb74		66				                .byte %01100110
7633	>bb75		66				                .byte %01100110
7634	>bb76		66				                .byte %01100110
7635	>bb77		00				                .byte %00000000

7637							                ; CHR$111 - o
7638	>bb78		00				                .byte %00000000
7639	>bb79		00				                .byte %00000000
7640	>bb7a		3c				                .byte %00111100
7641	>bb7b		66				                .byte %01100110
7642	>bb7c		66				                .byte %01100110
7643	>bb7d		66				                .byte %01100110
7644	>bb7e		3c				                .byte %00111100
7645	>bb7f		00				                .byte %00000000

7647							                ; CHR$112 - p
7648	>bb80		00				                .byte %00000000
7649	>bb81		00				                .byte %00000000
7650	>bb82		7c				                .byte %01111100
7651	>bb83		66				                .byte %01100110
7652	>bb84		66				                .byte %01100110
7653	>bb85		7c				                .byte %01111100
7654	>bb86		60				                .byte %01100000
7655	>bb87		60				                .byte %01100000

7657							                ; CHR$113 - q
7658	>bb88		00				                .byte %00000000
7659	>bb89		00				                .byte %00000000
7660	>bb8a		3e				                .byte %00111110
7661	>bb8b		66				                .byte %01100110
7662	>bb8c		66				                .byte %01100110
7663	>bb8d		3e				                .byte %00111110
7664	>bb8e		06				                .byte %00000110
7665	>bb8f		07				                .byte %00000111

7667							                ; CHR$114 - r
7668	>bb90		00				                .byte %00000000
7669	>bb91		00				                .byte %00000000
7670	>bb92		6c				                .byte %01101100
7671	>bb93		76				                .byte %01110110
7672	>bb94		60				                .byte %01100000
7673	>bb95		60				                .byte %01100000
7674	>bb96		60				                .byte %01100000
7675	>bb97		00				                .byte %00000000

7677							                ; CHR$115 - s
7678	>bb98		00				                .byte %00000000
7679	>bb99		00				                .byte %00000000
7680	>bb9a		3e				                .byte %00111110
7681	>bb9b		60				                .byte %01100000
7682	>bb9c		3c				                .byte %00111100
7683	>bb9d		06				                .byte %00000110
7684	>bb9e		7c				                .byte %01111100
7685	>bb9f		00				                .byte %00000000

7687							                ; CHR$116 - t
7688	>bba0		30				                .byte %00110000
7689	>bba1		30				                .byte %00110000
7690	>bba2		7c				                .byte %01111100
7691	>bba3		30				                .byte %00110000
7692	>bba4		30				                .byte %00110000
7693	>bba5		30				                .byte %00110000
7694	>bba6		1c				                .byte %00011100
7695	>bba7		00				                .byte %00000000

7697							                ; CHR$117 - u
7698	>bba8		00				                .byte %00000000
7699	>bba9		00				                .byte %00000000
7700	>bbaa		66				                .byte %01100110
7701	>bbab		66				                .byte %01100110
7702	>bbac		66				                .byte %01100110
7703	>bbad		66				                .byte %01100110
7704	>bbae		3e				                .byte %00111110
7705	>bbaf		00				                .byte %00000000

7707							                ; CHR$118 - v
7708	>bbb0		00				                .byte %00000000
7709	>bbb1		00				                .byte %00000000
7710	>bbb2		66				                .byte %01100110
7711	>bbb3		66				                .byte %01100110
7712	>bbb4		66				                .byte %01100110
7713	>bbb5		3c				                .byte %00111100
7714	>bbb6		18				                .byte %00011000
7715	>bbb7		00				                .byte %00000000

7717							                ; CHR$119 - w
7718	>bbb8		00				                .byte %00000000
7719	>bbb9		00				                .byte %00000000
7720	>bbba		63				                .byte %01100011
7721	>bbbb		6b				                .byte %01101011
7722	>bbbc		6b				                .byte %01101011
7723	>bbbd		7f				                .byte %01111111
7724	>bbbe		36				                .byte %00110110
7725	>bbbf		00				                .byte %00000000

7727							                ; CHR$120 - x
7728	>bbc0		00				                .byte %00000000
7729	>bbc1		00				                .byte %00000000
7730	>bbc2		66				                .byte %01100110
7731	>bbc3		3c				                .byte %00111100
7732	>bbc4		18				                .byte %00011000
7733	>bbc5		3c				                .byte %00111100
7734	>bbc6		66				                .byte %01100110
7735	>bbc7		00				                .byte %00000000

7737							                ; CHR$121 - y
7738	>bbc8		00				                .byte %00000000
7739	>bbc9		00				                .byte %00000000
7740	>bbca		66				                .byte %01100110
7741	>bbcb		66				                .byte %01100110
7742	>bbcc		66				                .byte %01100110
7743	>bbcd		3e				                .byte %00111110
7744	>bbce		06				                .byte %00000110
7745	>bbcf		3c				                .byte %00111100

7747							                ; CHR$122 - z
7748	>bbd0		00				                .byte %00000000
7749	>bbd1		00				                .byte %00000000
7750	>bbd2		7e				                .byte %01111110
7751	>bbd3		0c				                .byte %00001100
7752	>bbd4		18				                .byte %00011000
7753	>bbd5		30				                .byte %00110000
7754	>bbd6		7e				                .byte %01111110
7755	>bbd7		00				                .byte %00000000

7757							                ; CHR$123 - {
7758	>bbd8		0c				                .byte %00001100
7759	>bbd9		18				                .byte %00011000
7760	>bbda		18				                .byte %00011000
7761	>bbdb		70				                .byte %01110000
7762	>bbdc		18				                .byte %00011000
7763	>bbdd		18				                .byte %00011000
7764	>bbde		0c				                .byte %00001100
7765	>bbdf		00				                .byte %00000000

7767							                ; CHR$124 - |
7768	>bbe0		18				                .byte %00011000
7769	>bbe1		18				                .byte %00011000
7770	>bbe2		18				                .byte %00011000
7771	>bbe3		00				                .byte %00000000
7772	>bbe4		18				                .byte %00011000
7773	>bbe5		18				                .byte %00011000
7774	>bbe6		18				                .byte %00011000
7775	>bbe7		00				                .byte %00000000

7777							                ; CHR$125 - }
7778	>bbe8		30				                .byte %00110000
7779	>bbe9		18				                .byte %00011000
7780	>bbea		18				                .byte %00011000
7781	>bbeb		0e				                .byte %00001110
7782	>bbec		18				                .byte %00011000
7783	>bbed		18				                .byte %00011000
7784	>bbee		30				                .byte %00110000
7785	>bbef		00				                .byte %00000000

7787							                ; CHR$126 - ~
7788	>bbf0		31				                .byte %00110001
7789	>bbf1		6b				                .byte %01101011
7790	>bbf2		46				                .byte %01000110
7791	>bbf3		00				                .byte %00000000
7792	>bbf4		00				                .byte %00000000
7793	>bbf5		00				                .byte %00000000
7794	>bbf6		00				                .byte %00000000
7795	>bbf7		00				                .byte %00000000

7797							                ; CHR$127
7798	.bbf8						chr127:
7799	>bbf8		ff				                .byte %11111111
7800	>bbf9		ff				                .byte %11111111
7801	>bbfa		ff				                .byte %11111111
7802	>bbfb		ff				                .byte %11111111
7803	>bbfc		ff				                .byte %11111111
7804	>bbfd		ff				                .byte %11111111
7805	>bbfe		ff				                .byte %11111111
7806	>bbff		ff				                .byte %11111111

7808							                ; CHR$128
7809							                .if version==350
7810	>bc00		66				                .byte %01100110
7811	>bc01		66				                .byte %01100110
7812	>bc02		00				                .byte %00000000
7813	>bc03		3c				                .byte %00111100
7814	>bc04		66				                .byte %01100110
7815	>bc05		7e				                .byte %01111110
7816	>bc06		66				                .byte %01100110
7817	>bc07		00				                .byte %00000000
7827							                .endif

7829							                ; CHR$129
7830							                .if version==350
7831	>bc08		3c				                .byte %00111100
7832	>bc09		66				                .byte %01100110
7833	>bc0a		3c				                .byte %00111100
7834	>bc0b		3c				                .byte %00111100
7835	>bc0c		66				                .byte %01100110
7836	>bc0d		7e				                .byte %01111110
7837	>bc0e		66				                .byte %01100110
7838	>bc0f		00				                .byte %00000000
7848							                .endif

7850							                ; CHR$130
7851	>bc10		3f				                .byte %00111111
7852	>bc11		66				                .byte %01100110
7853	>bc12		66				                .byte %01100110
7854	>bc13		7f				                .byte %01111111
7855	>bc14		66				                .byte %01100110
7856	>bc15		66				                .byte %01100110
7857	>bc16		67				                .byte %01100111
7858	>bc17		00				                .byte %00000000

7860							                ; CHR$131
7861							                .if version==350
7862	>bc18		3c				                .byte %00111100
7863	>bc19		66				                .byte %01100110
7864	>bc1a		60				                .byte %01100000
7865	>bc1b		60				                .byte %01100000
7866	>bc1c		66				                .byte %01100110
7867	>bc1d		3c				                .byte %00111100
7868	>bc1e		30				                .byte %00110000
7869	>bc1f		60				                .byte %01100000
7879							                .endif

7881							                ; CHR$132
7882	>bc20		0c				                .byte %00001100
7883	>bc21		18				                .byte %00011000
7884	>bc22		7e				                .byte %01111110
7885	>bc23		60				                .byte %01100000
7886	>bc24		7c				                .byte %01111100
7887	>bc25		60				                .byte %01100000
7888	>bc26		7e				                .byte %01111110
7889	>bc27		00				                .byte %00000000

7891							                ; CHR$133
7892							                .if version==350
7893	>bc28		66				                .byte %01100110
7894	>bc29		00				                .byte %00000000
7895	>bc2a		3c				                .byte %00111100
7896	>bc2b		66				                .byte %01100110
7897	>bc2c		66				                .byte %01100110
7898	>bc2d		66				                .byte %01100110
7899	>bc2e		3c				                .byte %00111100
7900	>bc2f		00				                .byte %00000000
7910							                .endif

7912							                ; CHR$134
7913	>bc30		66				                .byte %01100110
7914	>bc31		00				                .byte %00000000
7915	>bc32		66				                .byte %01100110
7916	>bc33		66				                .byte %01100110
7917	>bc34		66				                .byte %01100110
7918	>bc35		66				                .byte %01100110
7919	>bc36		3c				                .byte %00111100
7920	>bc37		00				                .byte %00000000

7922							                ; CHR$135
7923							                .if version==350
7924	>bc38		3c				                .byte %00111100
7925	>bc39		42				                .byte %01000010
7926	>bc3a		99				                .byte %10011001
7927	>bc3b		a1				                .byte %10100001
7928	>bc3c		a1				                .byte %10100001
7929	>bc3d		99				                .byte %10011001
7930	>bc3e		42				                .byte %01000010
7931	>bc3f		3c				                .byte %00111100
7941							                .endif

7943							                ; CHR$136
7944	>bc40		00				                .byte %00000000
7945	>bc41		18				                .byte %00011000
7946	>bc42		38				                .byte %00111000
7947	>bc43		7f				                .byte %01111111
7948	>bc44		38				                .byte %00111000
7949	>bc45		18				                .byte %00011000
7950	>bc46		00				                .byte %00000000
7951	>bc47		00				                .byte %00000000

7953							                ; CHR$137
7954	>bc48		00				                .byte %00000000
7955	>bc49		18				                .byte %00011000
7956	>bc4a		1c				                .byte %00011100
7957	>bc4b		fe				                .byte %11111110
7958	>bc4c		1c				                .byte %00011100
7959	>bc4d		18				                .byte %00011000
7960	>bc4e		00				                .byte %00000000
7961	>bc4f		00				                .byte %00000000

7963							                ; CHR$138
7964	>bc50		18				                .byte %00011000
7965	>bc51		18				                .byte %00011000
7966	>bc52		18				                .byte %00011000
7967	>bc53		18				                .byte %00011000
7968	>bc54		7e				                .byte %01111110
7969	>bc55		3c				                .byte %00111100
7970	>bc56		18				                .byte %00011000
7971	>bc57		00				                .byte %00000000

7973							                ; CHR$139
7974	>bc58		00				                .byte %00000000
7975	>bc59		18				                .byte %00011000
7976	>bc5a		3c				                .byte %00111100
7977	>bc5b		7e				                .byte %01111110
7978	>bc5c		18				                .byte %00011000
7979	>bc5d		18				                .byte %00011000
7980	>bc5e		18				                .byte %00011000
7981	>bc5f		18				                .byte %00011000

7983							                ; CHR$140
7984	>bc60		30				                .byte %00110000
7985	>bc61		18				                .byte %00011000
7986	>bc62		3c				                .byte %00111100
7987	>bc63		06				                .byte %00000110
7988	>bc64		3e				                .byte %00111110
7989	>bc65		66				                .byte %01100110
7990	>bc66		3e				                .byte %00111110
7991	>bc67		00				                .byte %00000000

7993							                ; CHR$141
7994	>bc68		30				                .byte %00110000
7995	>bc69		18				                .byte %00011000
7996	>bc6a		3c				                .byte %00111100
7997	>bc6b		66				                .byte %01100110
7998	>bc6c		7e				                .byte %01111110
7999	>bc6d		60				                .byte %01100000
8000	>bc6e		3c				                .byte %00111100
8001	>bc6f		00				                .byte %00000000

8003							                ; CHR$142
8004	>bc70		66				                .byte %01100110
8005	>bc71		00				                .byte %00000000
8006	>bc72		3c				                .byte %00111100
8007	>bc73		66				                .byte %01100110
8008	>bc74		7e				                .byte %01111110
8009	>bc75		60				                .byte %01100000
8010	>bc76		3c				                .byte %00111100
8011	>bc77		00				                .byte %00000000

8013							                ; CHR$143
8014	>bc78		3c				                .byte %00111100
8015	>bc79		66				                .byte %01100110
8016	>bc7a		3c				                .byte %00111100
8017	>bc7b		66				                .byte %01100110
8018	>bc7c		7e				                .byte %01111110
8019	>bc7d		60				                .byte %01100000
8020	>bc7e		3c				                .byte %00111100
8021	>bc7f		00				                .byte %00000000

8023							                ; CHR$144
8024	>bc80		66				                .byte %01100110
8025	>bc81		00				                .byte %00000000
8026	>bc82		3c				                .byte %00111100
8027	>bc83		06				                .byte %00000110
8028	>bc84		3e				                .byte %00111110
8029	>bc85		66				                .byte %01100110
8030	>bc86		3e				                .byte %00111110
8031	>bc87		00				                .byte %00000000

8033							                ; CHR$145
8034	>bc88		3c				                .byte %00111100
8035	>bc89		66				                .byte %01100110
8036	>bc8a		3c				                .byte %00111100
8037	>bc8b		06				                .byte %00000110
8038	>bc8c		3e				                .byte %00111110
8039	>bc8d		66				                .byte %01100110
8040	>bc8e		3e				                .byte %00111110
8041	>bc8f		00				                .byte %00000000

8043							                ; CHR$146
8044	>bc90		00				                .byte %00000000
8045	>bc91		00				                .byte %00000000
8046	>bc92		3f				                .byte %00111111
8047	>bc93		0d				                .byte %00001101
8048	>bc94		3f				                .byte %00111111
8049	>bc95		6c				                .byte %01101100
8050	>bc96		3f				                .byte %00111111
8051	>bc97		00				                .byte %00000000

8053							                ; CHR$147
8054	>bc98		00				                .byte %00000000
8055	>bc99		00				                .byte %00000000
8056	>bc9a		3c				                .byte %00111100
8057	>bc9b		66				                .byte %01100110
8058	>bc9c		60				                .byte %01100000
8059	>bc9d		66				                .byte %01100110
8060	>bc9e		3c				                .byte %00111100
8061	>bc9f		60				                .byte %01100000

8063							                ; CHR$148
8064	>bca0		0c				                .byte %00001100
8065	>bca1		18				                .byte %00011000
8066	>bca2		3c				                .byte %00111100
8067	>bca3		66				                .byte %01100110
8068	>bca4		7e				                .byte %01111110
8069	>bca5		60				                .byte %01100000
8070	>bca6		3c				                .byte %00111100
8071	>bca7		00				                .byte %00000000

8073							                ; CHR$149
8074							                .if version==350
8075	>bca8		66				                .byte %01100110
8076	>bca9		00				                .byte %00000000
8077	>bcaa		00				                .byte %00000000
8078	>bcab		3c				                .byte %00111100
8079	>bcac		66				                .byte %01100110
8080	>bcad		66				                .byte %01100110
8081	>bcae		3c				                .byte %00111100
8082	>bcaf		00				                .byte %00000000
8092							                .endif

8094							                ; CHR$150
8095							                .if version==350
8096	>bcb0		66				                .byte %01100110
8097	>bcb1		00				                .byte %00000000
8098	>bcb2		00				                .byte %00000000
8099	>bcb3		66				                .byte %01100110
8100	>bcb4		66				                .byte %01100110
8101	>bcb5		66				                .byte %01100110
8102	>bcb6		3e				                .byte %00111110
8103	>bcb7		00				                .byte %00000000
8113							                .endif

8115							                ; CHR$151
8116	>bcb8		30				                .byte %00110000
8117	>bcb9		18				                .byte %00011000
8118	>bcba		00				                .byte %00000000
8119	>bcbb		38				                .byte %00111000
8120	>bcbc		18				                .byte %00011000
8121	>bcbd		18				                .byte %00011000
8122	>bcbe		3c				                .byte %00111100
8123	>bcbf		00				                .byte %00000000

8125							                ; CHR$152
8126	>bcc0		3c				                .byte %00111100
8127	>bcc1		66				                .byte %01100110
8128	>bcc2		00				                .byte %00000000
8129	>bcc3		38				                .byte %00111000
8130	>bcc4		18				                .byte %00011000
8131	>bcc5		18				                .byte %00011000
8132	>bcc6		3c				                .byte %00111100
8133	>bcc7		00				                .byte %00000000

8135							                ; CHR$153
8136	>bcc8		30				                .byte %00110000
8137	>bcc9		18				                .byte %00011000
8138	>bcca		00				                .byte %00000000
8139	>bccb		3c				                .byte %00111100
8140	>bccc		66				                .byte %01100110
8141	>bccd		66				                .byte %01100110
8142	>bcce		3c				                .byte %00111100
8143	>bccf		00				                .byte %00000000

8145							                ; CHR$154
8146	>bcd0		3c				                .byte %00111100
8147	>bcd1		66				                .byte %01100110
8148	>bcd2		00				                .byte %00000000
8149	>bcd3		3c				                .byte %00111100
8150	>bcd4		66				                .byte %01100110
8151	>bcd5		66				                .byte %01100110
8152	>bcd6		3c				                .byte %00111100
8153	>bcd7		00				                .byte %00000000

8155							                ; CHR$155
8156	>bcd8		30				                .byte %00110000
8157	>bcd9		18				                .byte %00011000
8158	>bcda		00				                .byte %00000000
8159	>bcdb		66				                .byte %01100110
8160	>bcdc		66				                .byte %01100110
8161	>bcdd		66				                .byte %01100110
8162	>bcde		3e				                .byte %00111110
8163	>bcdf		00				                .byte %00000000

8165							                ; CHR$156
8166	>bce0		3c				                .byte %00111100
8167	>bce1		66				                .byte %01100110
8168	>bce2		00				                .byte %00000000
8169	>bce3		66				                .byte %01100110
8170	>bce4		66				                .byte %01100110
8171	>bce5		66				                .byte %01100110
8172	>bce6		3e				                .byte %00111110
8173	>bce7		00				                .byte %00000000

8175							                ; CHR$157
8176	>bce8		66				                .byte %01100110
8177	>bce9		00				                .byte %00000000
8178	>bcea		66				                .byte %01100110
8179	>bceb		66				                .byte %01100110
8180	>bcec		66				                .byte %01100110
8181	>bced		3e				                .byte %00111110
8182	>bcee		06				                .byte %00000110
8183	>bcef		3c				                .byte %00111100

8185							                ; CHR$158
8186	>bcf0		00				                .byte %00000000
8187	>bcf1		66				                .byte %01100110
8188	>bcf2		3c				                .byte %00111100
8189	>bcf3		66				                .byte %01100110
8190	>bcf4		66				                .byte %01100110
8191	>bcf5		3c				                .byte %00111100
8192	>bcf6		66				                .byte %01100110
8193	>bcf7		00				                .byte %00000000

8195							                ; CHR$159
8196	>bcf8		3c				                .byte %00111100
8197	>bcf9		60				                .byte %01100000
8198	>bcfa		3c				                .byte %00111100
8199	>bcfb		66				                .byte %01100110
8200	>bcfc		3c				                .byte %00111100
8201	>bcfd		06				                .byte %00000110
8202	>bcfe		3c				                .byte %00111100
8203	>bcff		00				                .byte %00000000

8205							                ; CHR$160
8206	>bd00		3c				                .byte %00111100
8207	>bd01		66				                .byte %01100110
8208	>bd02		3c				                .byte %00111100
8209	>bd03		00				                .byte %00000000
8210	>bd04		00				                .byte %00000000
8211	>bd05		00				                .byte %00000000
8212	>bd06		00				                .byte %00000000
8213	>bd07		00				                .byte %00000000

8215							                ; CHR$161
8216	>bd08		00				                .byte %00000000
8217	>bd09		00				                .byte %00000000
8218	>bd0a		00				                .byte %00000000
8219	>bd0b		18				                .byte %00011000
8220	>bd0c		18				                .byte %00011000
8221	>bd0d		18				                .byte %00011000
8222	>bd0e		18				                .byte %00011000
8223	>bd0f		18				                .byte %00011000

8225							                ; CHR$162
8226	>bd10		00				                .byte %00000000
8227	>bd11		00				                .byte %00000000
8228	>bd12		00				                .byte %00000000
8229	>bd13		1f				                .byte %00011111
8230	>bd14		00				                .byte %00000000
8231	>bd15		00				                .byte %00000000
8232	>bd16		00				                .byte %00000000
8233	>bd17		00				                .byte %00000000

8235							                ; CHR$163
8236	>bd18		00				                .byte %00000000
8237	>bd19		00				                .byte %00000000
8238	>bd1a		00				                .byte %00000000
8239	>bd1b		1f				                .byte %00011111
8240	>bd1c		18				                .byte %00011000
8241	>bd1d		18				                .byte %00011000
8242	>bd1e		18				                .byte %00011000
8243	>bd1f		18				                .byte %00011000

8245							                ; CHR$164
8246	>bd20		00				                .byte %00000000
8247	>bd21		00				                .byte %00000000
8248	>bd22		00				                .byte %00000000
8249	>bd23		f8				                .byte %11111000
8250	>bd24		00				                .byte %00000000
8251	>bd25		00				                .byte %00000000
8252	>bd26		00				                .byte %00000000
8253	>bd27		00				                .byte %00000000

8255							                ; CHR$165
8256	>bd28		00				                .byte %00000000
8257	>bd29		00				                .byte %00000000
8258	>bd2a		00				                .byte %00000000
8259	>bd2b		f8				                .byte %11111000
8260	>bd2c		18				                .byte %00011000
8261	>bd2d		18				                .byte %00011000
8262	>bd2e		18				                .byte %00011000
8263	>bd2f		18				                .byte %00011000

8265							                ; CHR$166
8266	>bd30		00				                .byte %00000000
8267	>bd31		00				                .byte %00000000
8268	>bd32		00				                .byte %00000000
8269	>bd33		ff				                .byte %11111111
8270	>bd34		00				                .byte %00000000
8271	>bd35		00				                .byte %00000000
8272	>bd36		00				                .byte %00000000
8273	>bd37		00				                .byte %00000000

8275							                ; CHR$167
8276	>bd38		00				                .byte %00000000
8277	>bd39		00				                .byte %00000000
8278	>bd3a		00				                .byte %00000000
8279	>bd3b		ff				                .byte %11111111
8280	>bd3c		18				                .byte %00011000
8281	>bd3d		18				                .byte %00011000
8282	>bd3e		18				                .byte %00011000
8283	>bd3f		18				                .byte %00011000

8285							                ; CHR$168
8286	>bd40		18				                .byte %00011000
8287	>bd41		18				                .byte %00011000
8288	>bd42		18				                .byte %00011000
8289	>bd43		18				                .byte %00011000
8290	>bd44		00				                .byte %00000000
8291	>bd45		00				                .byte %00000000
8292	>bd46		00				                .byte %00000000
8293	>bd47		00				                .byte %00000000

8295							                ; CHR$169
8296	>bd48		18				                .byte %00011000
8297	>bd49		18				                .byte %00011000
8298	>bd4a		18				                .byte %00011000
8299	>bd4b		18				                .byte %00011000
8300	>bd4c		18				                .byte %00011000
8301	>bd4d		18				                .byte %00011000
8302	>bd4e		18				                .byte %00011000
8303	>bd4f		18				                .byte %00011000

8305							                ; CHR$170
8306	>bd50		18				                .byte %00011000
8307	>bd51		18				                .byte %00011000
8308	>bd52		18				                .byte %00011000
8309	>bd53		1f				                .byte %00011111
8310	>bd54		00				                .byte %00000000
8311	>bd55		00				                .byte %00000000
8312	>bd56		00				                .byte %00000000
8313	>bd57		00				                .byte %00000000

8315							                ; CHR$171
8316	>bd58		18				                .byte %00011000
8317	>bd59		18				                .byte %00011000
8318	>bd5a		18				                .byte %00011000
8319	>bd5b		1f				                .byte %00011111
8320	>bd5c		18				                .byte %00011000
8321	>bd5d		18				                .byte %00011000
8322	>bd5e		18				                .byte %00011000
8323	>bd5f		18				                .byte %00011000

8325							                ; CHR$172
8326	>bd60		18				                .byte %00011000
8327	>bd61		18				                .byte %00011000
8328	>bd62		18				                .byte %00011000
8329	>bd63		f8				                .byte %11111000
8330	>bd64		00				                .byte %00000000
8331	>bd65		00				                .byte %00000000
8332	>bd66		00				                .byte %00000000
8333	>bd67		00				                .byte %00000000

8335							                ; CHR$173
8336	>bd68		18				                .byte %00011000
8337	>bd69		18				                .byte %00011000
8338	>bd6a		18				                .byte %00011000
8339	>bd6b		f8				                .byte %11111000
8340	>bd6c		18				                .byte %00011000
8341	>bd6d		18				                .byte %00011000
8342	>bd6e		18				                .byte %00011000
8343	>bd6f		18				                .byte %00011000

8345							                ; CHR$174
8346	>bd70		18				                .byte %00011000
8347	>bd71		18				                .byte %00011000
8348	>bd72		18				                .byte %00011000
8349	>bd73		ff				                .byte %11111111
8350	>bd74		00				                .byte %00000000
8351	>bd75		00				                .byte %00000000
8352	>bd76		00				                .byte %00000000
8353	>bd77		00				                .byte %00000000

8355							                ; CHR$175
8356	>bd78		18				                .byte %00011000
8357	>bd79		18				                .byte %00011000
8358	>bd7a		18				                .byte %00011000
8359	>bd7b		ff				                .byte %11111111
8360	>bd7c		18				                .byte %00011000
8361	>bd7d		18				                .byte %00011000
8362	>bd7e		18				                .byte %00011000
8363	>bd7f		18				                .byte %00011000

8365							                ; CHR$176
8366	>bd80		00				                .byte %00000000
8367	>bd81		00				                .byte %00000000
8368	>bd82		00				                .byte %00000000
8369	>bd83		07				                .byte %00000111
8370	>bd84		0c				                .byte %00001100
8371	>bd85		18				                .byte %00011000
8372	>bd86		18				                .byte %00011000
8373	>bd87		18				                .byte %00011000

8375							                ; CHR$177
8376	>bd88		00				                .byte %00000000
8377	>bd89		00				                .byte %00000000
8378	>bd8a		00				                .byte %00000000
8379	>bd8b		e0				                .byte %11100000
8380	>bd8c		30				                .byte %00110000
8381	>bd8d		18				                .byte %00011000
8382	>bd8e		18				                .byte %00011000
8383	>bd8f		18				                .byte %00011000

8385							                ; CHR$178
8386	>bd90		18				                .byte %00011000
8387	>bd91		18				                .byte %00011000
8388	>bd92		0c				                .byte %00001100
8389	>bd93		07				                .byte %00000111
8390	>bd94		00				                .byte %00000000
8391	>bd95		00				                .byte %00000000
8392	>bd96		00				                .byte %00000000
8393	>bd97		00				                .byte %00000000

8395							                ; CHR$179
8396	>bd98		18				                .byte %00011000
8397	>bd99		18				                .byte %00011000
8398	>bd9a		30				                .byte %00110000
8399	>bd9b		e0				                .byte %11100000
8400	>bd9c		00				                .byte %00000000
8401	>bd9d		00				                .byte %00000000
8402	>bd9e		00				                .byte %00000000
8403	>bd9f		00				                .byte %00000000

8405							                ; CHR$180
8406	>bda0		18				                .byte %00011000
8407	>bda1		00				                .byte %00000000
8408	>bda2		18				                .byte %00011000
8409	>bda3		18				                .byte %00011000
8410	>bda4		30				                .byte %00110000
8411	>bda5		66				                .byte %01100110
8412	>bda6		3c				                .byte %00111100
8413	>bda7		00				                .byte %00000000

8415							                ; CHR$181
8416	>bda8		18				                .byte %00011000
8417	>bda9		00				                .byte %00000000
8418	>bdaa		18				                .byte %00011000
8419	>bdab		18				                .byte %00011000
8420	>bdac		18				                .byte %00011000
8421	>bdad		18				                .byte %00011000
8422	>bdae		18				                .byte %00011000
8423	>bdaf		00				                .byte %00000000

8425							                ; CHR$182
8426	>bdb0		36				                .byte %00110110
8427	>bdb1		6c				                .byte %01101100
8428	>bdb2		00				                .byte %00000000
8429	>bdb3		66				                .byte %01100110
8430	>bdb4		76				                .byte %01110110
8431	>bdb5		6e				                .byte %01101110
8432	>bdb6		66				                .byte %01100110
8433	>bdb7		00				                .byte %00000000

8435							                ; CHR$183
8436	>bdb8		36				                .byte %00110110
8437	>bdb9		6c				                .byte %01101100
8438	>bdba		00				                .byte %00000000
8439	>bdbb		7c				                .byte %01111100
8440	>bdbc		66				                .byte %01100110
8441	>bdbd		66				                .byte %01100110
8442	>bdbe		66				                .byte %01100110
8443	>bdbf		00				                .byte %00000000

8445							                ; CHR$184
8446	>bdc0		18				                .byte %00011000
8447	>bdc1		7e				                .byte %01111110
8448	>bdc2		18				                .byte %00011000
8449	>bdc3		18				                .byte %00011000
8450	>bdc4		18				                .byte %00011000
8451	>bdc5		18				                .byte %00011000
8452	>bdc6		18				                .byte %00011000
8453	>bdc7		00				                .byte %00000000

8455							                ; CHR$185
8456	>bdc8		18				                .byte %00011000
8457	>bdc9		7e				                .byte %01111110
8458	>bdca		18				                .byte %00011000
8459	>bdcb		18				                .byte %00011000
8460	>bdcc		18				                .byte %00011000
8461	>bdcd		7e				                .byte %01111110
8462	>bdce		18				                .byte %00011000
8463	>bdcf		00				                .byte %00000000

8465							                ; CHR$186
8466							                .if version==350
8467	>bdd0		18				                .byte %00011000
8468	>bdd1		00				                .byte %00000000
8469	>bdd2		00				                .byte %00000000
8470	>bdd3		00				                .byte %00000000
8471	>bdd4		00				                .byte %00000000
8472	>bdd5		00				                .byte %00000000
8473	>bdd6		00				                .byte %00000000
8474	>bdd7		00				                .byte %00000000
8484							                .endif

8486							                ; CHR$187
8487							                .if version==350
8488	>bdd8		30				                .byte %00110000
8489	>bdd9		18				                .byte %00011000
8490	>bdda		00				                .byte %00000000
8491	>bddb		00				                .byte %00000000
8492	>bddc		00				                .byte %00000000
8493	>bddd		00				                .byte %00000000
8494	>bdde		00				                .byte %00000000
8495	>bddf		00				                .byte %00000000
8505							                .endif

8507							                ; CHR$188
8508							                .if version==350
8509	>bde0		03				                .byte %00000011
8510	>bde1		3e				                .byte %00111110
8511	>bde2		76				                .byte %01110110
8512	>bde3		76				                .byte %01110110
8513	>bde4		36				                .byte %00110110
8514	>bde5		36				                .byte %00110110
8515	>bde6		3e				                .byte %00111110
8516	>bde7		00				                .byte %00000000
8526							                .endif

8528							                ; CHR$189
8529	>bde8		00				                .byte %00000000
8530	>bde9		00				                .byte %00000000
8531	>bdea		00				                .byte %00000000
8532	>bdeb		18				                .byte %00011000
8533	>bdec		18				                .byte %00011000
8534	>bded		00				                .byte %00000000
8535	>bdee		00				                .byte %00000000
8536	>bdef		00				                .byte %00000000

8538							                ; CHR$190
8539	>bdf0		03				                .byte %00000011
8540	>bdf1		03				                .byte %00000011
8541	>bdf2		06				                .byte %00000110
8542	>bdf3		06				                .byte %00000110
8543	>bdf4		76				                .byte %01110110
8544	>bdf5		1c				                .byte %00011100
8545	>bdf6		0c				                .byte %00001100
8546	>bdf7		00				                .byte %00000000

8548							                ; CHR$191
8549	>bdf8		aa				                .byte %10101010
8550	>bdf9		55				                .byte %01010101
8551	>bdfa		aa				                .byte %10101010
8552	>bdfb		55				                .byte %01010101
8553	>bdfc		aa				                .byte %10101010
8554	>bdfd		55				                .byte %01010101
8555	>bdfe		aa				                .byte %10101010
8556	>bdff		55				                .byte %01010101

8558							                ; CHR$192
8559	>be00		3e				                .byte %00111110
8560	>be01		63				                .byte %01100011
8561	>be02		67				                .byte %01100111
8562	>be03		6b				                .byte %01101011
8563	>be04		73				                .byte %01110011
8564	>be05		63				                .byte %01100011
8565	>be06		3e				                .byte %00111110
8566	>be07		00				                .byte %00000000

8568							                ; CHR$193
8569	>be08		1c				                .byte %00011100
8570	>be09		36				                .byte %00110110
8571	>be0a		63				                .byte %01100011
8572	>be0b		63				                .byte %01100011
8573	>be0c		7f				                .byte %01111111
8574	>be0d		63				                .byte %01100011
8575	>be0e		63				                .byte %01100011
8576	>be0f		00				                .byte %00000000

8578							                ; CHR$194
8579	>be10		7e				                .byte %01111110
8580	>be11		33				                .byte %00110011
8581	>be12		33				                .byte %00110011
8582	>be13		3e				                .byte %00111110
8583	>be14		33				                .byte %00110011
8584	>be15		33				                .byte %00110011
8585	>be16		7e				                .byte %01111110
8586	>be17		00				                .byte %00000000

8588							                ; CHR$195
8589	>be18		7f				                .byte %01111111
8590	>be19		63				                .byte %01100011
8591	>be1a		60				                .byte %01100000
8592	>be1b		60				                .byte %01100000
8593	>be1c		60				                .byte %01100000
8594	>be1d		60				                .byte %01100000
8595	>be1e		60				                .byte %01100000
8596	>be1f		00				                .byte %00000000

8598							                ; CHR$196
8599	>be20		1c				                .byte %00011100
8600	>be21		1c				                .byte %00011100
8601	>be22		36				                .byte %00110110
8602	>be23		36				                .byte %00110110
8603	>be24		63				                .byte %01100011
8604	>be25		63				                .byte %01100011
8605	>be26		7f				                .byte %01111111
8606	>be27		00				                .byte %00000000

8608							                ; CHR$197
8609	>be28		7f				                .byte %01111111
8610	>be29		33				                .byte %00110011
8611	>be2a		30				                .byte %00110000
8612	>be2b		3e				                .byte %00111110
8613	>be2c		30				                .byte %00110000
8614	>be2d		33				                .byte %00110011
8615	>be2e		7f				                .byte %01111111
8616	>be2f		00				                .byte %00000000

8618							                ; CHR$198
8619	>be30		7e				                .byte %01111110
8620	>be31		66				                .byte %01100110
8621	>be32		0c				                .byte %00001100
8622	>be33		18				                .byte %00011000
8623	>be34		30				                .byte %00110000
8624	>be35		66				                .byte %01100110
8625	>be36		7e				                .byte %01111110
8626	>be37		00				                .byte %00000000

8628							                ; CHR$199
8629	>be38		77				                .byte %01110111
8630	>be39		33				                .byte %00110011
8631	>be3a		33				                .byte %00110011
8632	>be3b		3f				                .byte %00111111
8633	>be3c		33				                .byte %00110011
8634	>be3d		33				                .byte %00110011
8635	>be3e		77				                .byte %01110111
8636	>be3f		00				                .byte %00000000

8638							                ; CHR$200
8639	>be40		3e				                .byte %00111110
8640	>be41		63				                .byte %01100011
8641	>be42		63				                .byte %01100011
8642	>be43		7f				                .byte %01111111
8643	>be44		63				                .byte %01100011
8644	>be45		63				                .byte %01100011
8645	>be46		3e				                .byte %00111110
8646	>be47		00				                .byte %00000000

8648							                ; CHR$201
8649	>be48		3c				                .byte %00111100
8650	>be49		18				                .byte %00011000
8651	>be4a		18				                .byte %00011000
8652	>be4b		18				                .byte %00011000
8653	>be4c		18				                .byte %00011000
8654	>be4d		18				                .byte %00011000
8655	>be4e		3c				                .byte %00111100
8656	>be4f		00				                .byte %00000000

8658							                ; CHR$202
8659	>be50		63				                .byte %01100011
8660	>be51		66				                .byte %01100110
8661	>be52		6c				                .byte %01101100
8662	>be53		78				                .byte %01111000
8663	>be54		6c				                .byte %01101100
8664	>be55		66				                .byte %01100110
8665	>be56		63				                .byte %01100011
8666	>be57		00				                .byte %00000000

8668							                ; CHR$203
8669	>be58		1c				                .byte %00011100
8670	>be59		1c				                .byte %00011100
8671	>be5a		36				                .byte %00110110
8672	>be5b		36				                .byte %00110110
8673	>be5c		63				                .byte %01100011
8674	>be5d		63				                .byte %01100011
8675	>be5e		63				                .byte %01100011
8676	>be5f		00				                .byte %00000000

8678							                ; CHR$204
8679	>be60		63				                .byte %01100011
8680	>be61		77				                .byte %01110111
8681	>be62		7f				                .byte %01111111
8682	>be63		6b				                .byte %01101011
8683	>be64		63				                .byte %01100011
8684	>be65		63				                .byte %01100011
8685	>be66		63				                .byte %01100011
8686	>be67		00				                .byte %00000000

8688							                ; CHR$205
8689	>be68		63				                .byte %01100011
8690	>be69		73				                .byte %01110011
8691	>be6a		7b				                .byte %01111011
8692	>be6b		6f				                .byte %01101111
8693	>be6c		67				                .byte %01100111
8694	>be6d		63				                .byte %01100011
8695	>be6e		63				                .byte %01100011
8696	>be6f		00				                .byte %00000000

8698							                ; CHR$206
8699	>be70		7e				                .byte %01111110
8700	>be71		00				                .byte %00000000
8701	>be72		00				                .byte %00000000
8702	>be73		3c				                .byte %00111100
8703	>be74		00				                .byte %00000000
8704	>be75		00				                .byte %00000000
8705	>be76		7e				                .byte %01111110
8706	>be77		00				                .byte %00000000

8708							                ; CHR$207
8709	>be78		3e				                .byte %00111110
8710	>be79		63				                .byte %01100011
8711	>be7a		63				                .byte %01100011
8712	>be7b		63				                .byte %01100011
8713	>be7c		63				                .byte %01100011
8714	>be7d		63				                .byte %01100011
8715	>be7e		3e				                .byte %00111110
8716	>be7f		00				                .byte %00000000

8718							                ; CHR$208
8719	>be80		7f				                .byte %01111111
8720	>be81		36				                .byte %00110110
8721	>be82		36				                .byte %00110110
8722	>be83		36				                .byte %00110110
8723	>be84		36				                .byte %00110110
8724	>be85		36				                .byte %00110110
8725	>be86		36				                .byte %00110110
8726	>be87		00				                .byte %00000000

8728							                ; CHR$209
8729	>be88		7e				                .byte %01111110
8730	>be89		33				                .byte %00110011
8731	>be8a		33				                .byte %00110011
8732	>be8b		3e				                .byte %00111110
8733	>be8c		30				                .byte %00110000
8734	>be8d		30				                .byte %00110000
8735	>be8e		78				                .byte %01111000
8736	>be8f		00				                .byte %00000000

8738							                ; CHR$210
8739	>be90		7f				                .byte %01111111
8740	>be91		63				                .byte %01100011
8741	>be92		30				                .byte %00110000
8742	>be93		18				                .byte %00011000
8743	>be94		30				                .byte %00110000
8744	>be95		63				                .byte %01100011
8745	>be96		7f				                .byte %01111111
8746	>be97		00				                .byte %00000000

8748							                ; CHR$211
8749	>be98		7e				                .byte %01111110
8750	>be99		5a				                .byte %01011010
8751	>be9a		18				                .byte %00011000
8752	>be9b		18				                .byte %00011000
8753	>be9c		18				                .byte %00011000
8754	>be9d		18				                .byte %00011000
8755	>be9e		18				                .byte %00011000
8756	>be9f		00				                .byte %00000000

8758							                ; CHR$212
8759	>bea0		66				                .byte %01100110
8760	>bea1		66				                .byte %01100110
8761	>bea2		66				                .byte %01100110
8762	>bea3		3c				                .byte %00111100
8763	>bea4		18				                .byte %00011000
8764	>bea5		18				                .byte %00011000
8765	>bea6		3c				                .byte %00111100
8766	>bea7		00				                .byte %00000000

8768							                ; CHR$213
8769	>bea8		3e				                .byte %00111110
8770	>bea9		08				                .byte %00001000
8771	>beaa		3e				                .byte %00111110
8772	>beab		6b				                .byte %01101011
8773	>beac		3e				                .byte %00111110
8774	>bead		08				                .byte %00001000
8775	>beae		3e				                .byte %00111110
8776	>beaf		00				                .byte %00000000

8778							                ; CHR$214
8779	>beb0		63				                .byte %01100011
8780	>beb1		63				                .byte %01100011
8781	>beb2		36				                .byte %00110110
8782	>beb3		1c				                .byte %00011100
8783	>beb4		36				                .byte %00110110
8784	>beb5		63				                .byte %01100011
8785	>beb6		63				                .byte %01100011
8786	>beb7		00				                .byte %00000000

8788							                ; CHR$215
8789	>beb8		3e				                .byte %00111110
8790	>beb9		08				                .byte %00001000
8791	>beba		6b				                .byte %01101011
8792	>bebb		6b				                .byte %01101011
8793	>bebc		3e				                .byte %00111110
8794	>bebd		08				                .byte %00001000
8795	>bebe		3e				                .byte %00111110
8796	>bebf		00				                .byte %00000000

8798							                ; CHR$216
8799	>bec0		3e				                .byte %00111110
8800	>bec1		63				                .byte %01100011
8801	>bec2		63				                .byte %01100011
8802	>bec3		63				                .byte %01100011
8803	>bec4		36				                .byte %00110110
8804	>bec5		36				                .byte %00110110
8805	>bec6		63				                .byte %01100011
8806	>bec7		00				                .byte %00000000

8808							                ; CHR$217
8809	>bec8		7f				                .byte %01111111
8810	>bec9		63				                .byte %01100011
8811	>beca		63				                .byte %01100011
8812	>becb		36				                .byte %00110110
8813	>becc		36				                .byte %00110110
8814	>becd		1c				                .byte %00011100
8815	>bece		1c				                .byte %00011100
8816	>becf		00				                .byte %00000000

8818							                ; CHR$218
8819	>bed0		18				                .byte %00011000
8820	>bed1		18				                .byte %00011000
8821	>bed2		7e				                .byte %01111110
8822	>bed3		18				                .byte %00011000
8823	>bed4		18				                .byte %00011000
8824	>bed5		00				                .byte %00000000
8825	>bed6		7e				                .byte %01111110
8826	>bed7		00				                .byte %00000000

8828							                ; CHR$219
8829	>bed8		00				                .byte %00000000
8830	>bed9		7e				                .byte %01111110
8831	>beda		00				                .byte %00000000
8832	>bedb		18				                .byte %00011000
8833	>bedc		18				                .byte %00011000
8834	>bedd		7e				                .byte %01111110
8835	>bede		18				                .byte %00011000
8836	>bedf		18				                .byte %00011000

8838							                ; CHR$220
8839	>bee0		18				                .byte %00011000
8840	>bee1		18				                .byte %00011000
8841	>bee2		18				                .byte %00011000
8842	>bee3		18				                .byte %00011000
8843	>bee4		18				                .byte %00011000
8844	>bee5		18				                .byte %00011000
8845	>bee6		18				                .byte %00011000
8846	>bee7		00				                .byte %00000000

8848							                ; CHR$221
8849	>bee8		36				                .byte %00110110
8850	>bee9		36				                .byte %00110110
8851	>beea		36				                .byte %00110110
8852	>beeb		36				                .byte %00110110
8853	>beec		36				                .byte %00110110
8854	>beed		36				                .byte %00110110
8855	>beee		36				                .byte %00110110
8856	>beef		00				                .byte %00000000

8858							                ; CHR$222
8859	>bef0		00				                .byte %00000000
8860	>bef1		66				                .byte %01100110
8861	>bef2		66				                .byte %01100110
8862	>bef3		66				                .byte %01100110
8863	>bef4		66				                .byte %01100110
8864	>bef5		66				                .byte %01100110
8865	>bef6		3c				                .byte %00111100
8866	>bef7		00				                .byte %00000000

8868							                ; CHR$223
8869	>bef8		00				                .byte %00000000
8870	>bef9		3c				                .byte %00111100
8871	>befa		66				                .byte %01100110
8872	>befb		66				                .byte %01100110
8873	>befc		66				                .byte %01100110
8874	>befd		66				                .byte %01100110
8875	>befe		66				                .byte %01100110
8876	>beff		00				                .byte %00000000

8878							                ; CHR$224
8879							                .if version==350
8880	>bf00		00				                .byte %00000000
8881	>bf01		02				                .byte %00000010
8882	>bf02		3c				                .byte %00111100
8883	>bf03		6e				                .byte %01101110
8884	>bf04		76				                .byte %01110110
8885	>bf05		66				                .byte %01100110
8886	>bf06		bc				                .byte %10111100
8887	>bf07		00				                .byte %00000000
8897							                .endif

8899							                ; CHR$225
8900	>bf08		00				                .byte %00000000
8901	>bf09		00				                .byte %00000000
8902	>bf0a		3b				                .byte %00111011
8903	>bf0b		6e				                .byte %01101110
8904	>bf0c		66				                .byte %01100110
8905	>bf0d		6e				                .byte %01101110
8906	>bf0e		3b				                .byte %00111011
8907	>bf0f		00				                .byte %00000000

8909							                ; CHR$226
8910	>bf10		1e				                .byte %00011110
8911	>bf11		33				                .byte %00110011
8912	>bf12		33				                .byte %00110011
8913	>bf13		3e				                .byte %00111110
8914	>bf14		33				                .byte %00110011
8915	>bf15		33				                .byte %00110011
8916	>bf16		3e				                .byte %00111110
8917	>bf17		60				                .byte %01100000

8919							                ; CHR$227
8920	>bf18		00				                .byte %00000000
8921	>bf19		00				                .byte %00000000
8922	>bf1a		66				                .byte %01100110
8923	>bf1b		36				                .byte %00110110
8924	>bf1c		1c				                .byte %00011100
8925	>bf1d		18				                .byte %00011000
8926	>bf1e		30				                .byte %00110000
8927	>bf1f		30				                .byte %00110000

8929							                ; CHR$228
8930	>bf20		3c				                .byte %00111100
8931	>bf21		60				                .byte %01100000
8932	>bf22		30				                .byte %00110000
8933	>bf23		3c				                .byte %00111100
8934	>bf24		66				                .byte %01100110
8935	>bf25		66				                .byte %01100110
8936	>bf26		3c				                .byte %00111100
8937	>bf27		00				                .byte %00000000

8939							                ; CHR$229
8940	>bf28		00				                .byte %00000000
8941	>bf29		00				                .byte %00000000
8942	>bf2a		1e				                .byte %00011110
8943	>bf2b		30				                .byte %00110000
8944	>bf2c		1c				                .byte %00011100
8945	>bf2d		30				                .byte %00110000
8946	>bf2e		1e				                .byte %00011110
8947	>bf2f		00				                .byte %00000000

8949							                ; CHR$230
8950	>bf30		3e				                .byte %00111110
8951	>bf31		0c				                .byte %00001100
8952	>bf32		18				                .byte %00011000
8953	>bf33		30				                .byte %00110000
8954	>bf34		60				                .byte %01100000
8955	>bf35		60				                .byte %01100000
8956	>bf36		3e				                .byte %00111110
8957	>bf37		06				                .byte %00000110

8959							                ; CHR$231
8960	>bf38		00				                .byte %00000000
8961	>bf39		00				                .byte %00000000
8962	>bf3a		7c				                .byte %01111100
8963	>bf3b		66				                .byte %01100110
8964	>bf3c		66				                .byte %01100110
8965	>bf3d		66				                .byte %01100110
8966	>bf3e		06				                .byte %00000110
8967	>bf3f		06				                .byte %00000110

8969							                ; CHR$232
8970	>bf40		3c				                .byte %00111100
8971	>bf41		66				                .byte %01100110
8972	>bf42		66				                .byte %01100110
8973	>bf43		7e				                .byte %01111110
8974	>bf44		66				                .byte %01100110
8975	>bf45		66				                .byte %01100110
8976	>bf46		3c				                .byte %00111100
8977	>bf47		00				                .byte %00000000

8979							                ; CHR$233
8980	>bf48		00				                .byte %00000000
8981	>bf49		00				                .byte %00000000
8982	>bf4a		18				                .byte %00011000
8983	>bf4b		18				                .byte %00011000
8984	>bf4c		18				                .byte %00011000
8985	>bf4d		18				                .byte %00011000
8986	>bf4e		0c				                .byte %00001100
8987	>bf4f		00				                .byte %00000000

8989							                ; CHR$234
8990	>bf50		00				                .byte %00000000
8991	>bf51		00				                .byte %00000000
8992	>bf52		66				                .byte %01100110
8993	>bf53		6c				                .byte %01101100
8994	>bf54		78				                .byte %01111000
8995	>bf55		6c				                .byte %01101100
8996	>bf56		66				                .byte %01100110
8997	>bf57		00				                .byte %00000000

8999							                ; CHR$235
9000	>bf58		60				                .byte %01100000
9001	>bf59		30				                .byte %00110000
9002	>bf5a		18				                .byte %00011000
9003	>bf5b		1c				                .byte %00011100
9004	>bf5c		36				                .byte %00110110
9005	>bf5d		63				                .byte %01100011
9006	>bf5e		63				                .byte %01100011
9007	>bf5f		00				                .byte %00000000

9009							                ; CHR$236
9010	>bf60		00				                .byte %00000000
9011	>bf61		00				                .byte %00000000
9012	>bf62		33				                .byte %00110011
9013	>bf63		33				                .byte %00110011
9014	>bf64		33				                .byte %00110011
9015	>bf65		33				                .byte %00110011
9016	>bf66		3e				                .byte %00111110
9017	>bf67		60				                .byte %01100000

9019							                ; CHR$237
9020	>bf68		00				                .byte %00000000
9021	>bf69		00				                .byte %00000000
9022	>bf6a		63				                .byte %01100011
9023	>bf6b		33				                .byte %00110011
9024	>bf6c		1b				                .byte %00011011
9025	>bf6d		1e				                .byte %00011110
9026	>bf6e		1c				                .byte %00011100
9027	>bf6f		00				                .byte %00000000

9029							                ; CHR$238
9030							                .if version==350
9031	>bf70		0c				                .byte %00001100
9032	>bf71		3e				                .byte %00111110
9033	>bf72		60				                .byte %01100000
9034	>bf73		3c				                .byte %00111100
9035	>bf74		60				                .byte %01100000
9036	>bf75		3e				                .byte %00111110
9037	>bf76		06				                .byte %00000110
9038	>bf77		0c				                .byte %00001100
9048							                .endif

9050							                ; CHR$239
9051	>bf78		00				                .byte %00000000
9052	>bf79		00				                .byte %00000000
9053	>bf7a		3e				                .byte %00111110
9054	>bf7b		63				                .byte %01100011
9055	>bf7c		63				                .byte %01100011
9056	>bf7d		63				                .byte %01100011
9057	>bf7e		3e				                .byte %00111110
9058	>bf7f		00				                .byte %00000000

9060							                ; CHR$240
9061	>bf80		00				                .byte %00000000
9062	>bf81		00				                .byte %00000000
9063	>bf82		7f				                .byte %01111111
9064	>bf83		36				                .byte %00110110
9065	>bf84		36				                .byte %00110110
9066	>bf85		36				                .byte %00110110
9067	>bf86		36				                .byte %00110110
9068	>bf87		00				                .byte %00000000

9070							                ; CHR$241
9071	>bf88		00				                .byte %00000000
9072	>bf89		00				                .byte %00000000
9073	>bf8a		3c				                .byte %00111100
9074	>bf8b		66				                .byte %01100110
9075	>bf8c		66				                .byte %01100110
9076	>bf8d		7c				                .byte %01111100
9077	>bf8e		60				                .byte %01100000
9078	>bf8f		60				                .byte %01100000

9080							                ; CHR$242
9081	>bf90		00				                .byte %00000000
9082	>bf91		00				                .byte %00000000
9083	>bf92		3f				                .byte %00111111
9084	>bf93		66				                .byte %01100110
9085	>bf94		66				                .byte %01100110
9086	>bf95		66				                .byte %01100110
9087	>bf96		3c				                .byte %00111100
9088	>bf97		00				                .byte %00000000

9090							                ; CHR$243
9091	>bf98		00				                .byte %00000000
9092	>bf99		00				                .byte %00000000
9093	>bf9a		7e				                .byte %01111110
9094	>bf9b		18				                .byte %00011000
9095	>bf9c		18				                .byte %00011000
9096	>bf9d		18				                .byte %00011000
9097	>bf9e		0c				                .byte %00001100
9098	>bf9f		00				                .byte %00000000

9100							                ; CHR$244
9101	>bfa0		00				                .byte %00000000
9102	>bfa1		00				                .byte %00000000
9103	>bfa2		73				                .byte %01110011
9104	>bfa3		33				                .byte %00110011
9105	>bfa4		33				                .byte %00110011
9106	>bfa5		33				                .byte %00110011
9107	>bfa6		1e				                .byte %00011110
9108	>bfa7		00				                .byte %00000000

9110							                ; CHR$245
9111	>bfa8		00				                .byte %00000000
9112	>bfa9		00				                .byte %00000000
9113	>bfaa		3e				                .byte %00111110
9114	>bfab		6b				                .byte %01101011
9115	>bfac		6b				                .byte %01101011
9116	>bfad		3e				                .byte %00111110
9117	>bfae		18				                .byte %00011000
9118	>bfaf		18				                .byte %00011000

9120							                ; CHR$246
9121	>bfb0		00				                .byte %00000000
9122	>bfb1		00				                .byte %00000000
9123	>bfb2		66				                .byte %01100110
9124	>bfb3		36				                .byte %00110110
9125	>bfb4		1c				                .byte %00011100
9126	>bfb5		1c				                .byte %00011100
9127	>bfb6		36				                .byte %00110110
9128	>bfb7		33				                .byte %00110011

9130							                ; CHR$247
9131	>bfb8		00				                .byte %00000000
9132	>bfb9		00				                .byte %00000000
9133	>bfba		63				                .byte %01100011
9134	>bfbb		6b				                .byte %01101011
9135	>bfbc		6b				                .byte %01101011
9136	>bfbd		3e				                .byte %00111110
9137	>bfbe		18				                .byte %00011000
9138	>bfbf		18				                .byte %00011000

9140							                ; CHR$248
9141							                .if version==350
9142	>bfc0		00				                .byte %00000000
9143	>bfc1		00				                .byte %00000000
9144	>bfc2		63				                .byte %01100011
9145	>bfc3		63				                .byte %01100011
9146	>bfc4		6b				                .byte %01101011
9147	>bfc5		7f				                .byte %01111111
9148	>bfc6		36				                .byte %00110110
9149	>bfc7		00				                .byte %00000000
9159							                .endif

9161							                ; CHR$249
9162	>bfc8		38				                .byte %00111000
9163	>bfc9		0c				                .byte %00001100
9164	>bfca		06				                .byte %00000110
9165	>bfcb		3e				                .byte %00111110
9166	>bfcc		66				                .byte %01100110
9167	>bfcd		66				                .byte %01100110
9168	>bfce		3c				                .byte %00111100
9169	>bfcf		00				                .byte %00000000

9171							                ; CHR$250
9172	>bfd0		00				                .byte %00000000
9173	>bfd1		31				                .byte %00110001
9174	>bfd2		6b				                .byte %01101011
9175	>bfd3		46				                .byte %01000110
9176	>bfd4		00				                .byte %00000000
9177	>bfd5		7f				                .byte %01111111
9178	>bfd6		00				                .byte %00000000
9179	>bfd7		00				                .byte %00000000

9181							                ; CHR$251
9182	>bfd8		00				                .byte %00000000
9183	>bfd9		7e				                .byte %01111110
9184	>bfda		00				                .byte %00000000
9185	>bfdb		7e				                .byte %01111110
9186	>bfdc		00				                .byte %00000000
9187	>bfdd		7e				                .byte %01111110
9188	>bfde		00				                .byte %00000000
9189	>bfdf		00				                .byte %00000000

9191							                ; CHR$252
9192	>bfe0		07				                .byte %00000111
9193	>bfe1		1c				                .byte %00011100
9194	>bfe2		70				                .byte %01110000
9195	>bfe3		1c				                .byte %00011100
9196	>bfe4		07				                .byte %00000111
9197	>bfe5		00				                .byte %00000000
9198	>bfe6		7f				                .byte %01111111
9199	>bfe7		00				                .byte %00000000

9201							                ; CHR$253
9202	>bfe8		06				                .byte %00000110
9203	>bfe9		0c				                .byte %00001100
9204	>bfea		7e				                .byte %01111110
9205	>bfeb		18				                .byte %00011000
9206	>bfec		7e				                .byte %01111110
9207	>bfed		30				                .byte %00110000
9208	>bfee		60				                .byte %01100000
9209	>bfef		00				                .byte %00000000

9211							                ; CHR$254
9212	>bff0		70				                .byte %01110000
9213	>bff1		1c				                .byte %00011100
9214	>bff2		07				                .byte %00000111
9215	>bff3		1c				                .byte %00011100
9216	>bff4		70				                .byte %01110000
9217	>bff5		00				                .byte %00000000
9218	>bff6		7f				                .byte %01111111
9219	>bff7		00				                .byte %00000000

9221							                ; CHR$255
9222	>bff8		ff				                .byte %11111111
9223	>bff9		ff				                .byte %11111111
9224	>bffa		ff				                .byte %11111111
9225	>bffb		ff				                .byte %11111111
9226	>bffc		ff				                .byte %11111111
9227	>bffd		ff				                .byte %11111111
9228	>bffe		ff				                .byte %11111111
9229	>bfff		ff				                .byte %11111111

9231							                .endblock



:1	;******  Return to file: mosCFA3000.s65

37							                .endsection

39							                .section mos
40							                .include "src/mos.s65"

:15	;******  Processing file: src/mos.s65

1							; -*- comment-column:45; -*-

3	.c000						mos: .block

5							; VDU driver entry block
6							; ======================
7	.c000						LC000:                                       ; Read from VDU memory
8	.c000		b1 d6		lda ($d6),y	                lda (ZMEMG),y
9	.c002		60		rts		                rts
10	.c003						LC003:                                       ; Write to VDU memory
11	.c003		91 d6		sta ($d6),y	                sta (ZMEMG),y
12	.c005		60		rts		                rts

14							; MasRef E.4-6
15							;
16							; JSR PLBYTE plots the mask held in ZMASK into the byte pointed to by
17							; (ZMEMG),y, using ZGORA and ZGEOR as colour masks. See GADDR below
18							; for an example of its use.
19							;
20							; PLBYTE uses ZTEMP as workspace and preserves X, Y, V and C.
21	.c006						PLBYTE:
22	.c006		4c 50 db	jmp $db50	                jmp plbyteEntryPoint

24							; MasRef E.4-6
25							;
26							; JSR HPLOT plots a fast horizontal line in the current graphics
27							; colour or ECF and the current graphics mode (all as set by VDU 18)
28							; between two specified points. It is the low level primitive used by
29							; all the MOS area fill commands.
30							;
31							; On entry, two 4 byte areas at &300+X and &300+Y contain the
32							; coordinates of the two endpoints, in the standard
33							; lowX,highX,lowY,highY order. Should the Y coordinates differ, the Y
34							; coordinate of the line plotted is taken from the leftmost of the two
35							; points specified.
36							;
37							; Only portions of the line inside the graphics window are plotted.
38							; Subject to this, both endpoints of the line are plotted.
39							;
40							; HPLOT uses ZGORA, ZGEOR, ZMASK, ZMEMG, ZTEMP (but not ZTEMP+1),
41							; ZTEMPB, ZTEMPB+1, ZTEMPC and ZTEMPC+1 as workspace. No registers or
42							; flags are preserved.
43	.c009						HPLOT:
44	.c009		4c e7 da	jmp $dae7	                jmp LDAE8

46							; MasRef E.4-6
47							;
48							; JSR EIGABS converts the 4 byte pair of external coordinates at
49							; &300+X where X>=2 (in standard lowX,highX,lowY,highY order) into the
50							; corresponding pair of pixel coordinates by offsetting by the
51							; graphics origin, then dividing by an appropriate power of 2.
52							;
53							; EIGABS uses ZTEMP as workspace, and corrupts all registers and
54							; flags.
55	.c00c						EIGABS:
56	.c00c		4c dd d1	jmp $d1dd	                jmp eigabsEntryPoint

58							; MasRef E.4-7
59							;
60							; JSR WIND windows the 4 byte pair of pixel coordinates (in standard
61							; lowX,highX,lowY,highY order) at &300+X, and returns a result in A
62							; according to its position with respect to the window:

64							; 9 | 8 | 10
65							; --+---+---
66							; 1 | 0 | 2
67							; --+---+---
68							; 5 | 4 | 6

70							; WIND uses ZTEMP as workspace, preserves X and sets N and Z according
71							; to A.
72	.c00f						WIND:
73	.c00f		4c a7 d1	jmp $d1a7	                jmp windEntryPoint

75							; MasRef E.4-7
76							;
77							; JSR GADDR addresses the pixel whose 4 byte pair of pixel coordinates
78							; (in standard lowX,highX,lowY,highY order) is at &300+X. GADDR should
79							; not be called without first ensuring (typically by means of WIND)
80							; that the point concerned does lie within the screen.
81							;
82							; GADDR initialises the following variables:
83							;
84							; . ZMEMG to the start of the page of memory containing the pixel.
85							;
86							; . Y and VDU variable &1A (i.e. location &31A) to contain the offset
87							; of the byte containing the pixel within this page â<80><93> i.e. (ZMEMG),y
88							; points to the byte containing the pixel.
89							;
90							; . ZMASK to a mask indicating which bits of this byte constitute the
91							; pixel.
92							;
93							; . ZGORA and ZGEOR to the correct colour masks for the current
94							; graphics plot mode (found in VDU variable &5A) and colour/ECF
95							;
96							; . X to Y MOD 7, i.e. the scan line within a character row of the
97							; pixel.
98							;
99							; Additionally, GADDR uses ZTEMP as workspace and returns A=0, Z=1.
100							;
101							; An example of the use of PLBYTE, WIND and GADDR is the following
102							; code, which effectively re-implements the VDU 25 64â<80><93>71 (plot a
103							; point) calls. It assumes that the routine addresses have been
104							; previously defined and that the graphics plot mode, etc. were set up
105							; by the VDU 25 code before the unknown PLOT codes vector was entered:

107							; .POINT
108							;  LDX #&20   ;Addresses new point within VDU queue, as
109							;             ;left on entry to the unknown PLOT codes
110							;             ;vector.
111							;  JSR WIND   ;Is the point inside the window?
112							;  BNE END    ;Return if not.
113							;  JSR GADDR  ;Address the point now we know it's on
114							;             ;screen.
115							;  JSR PLBYTE ;And plot the point.
116							; .END
117							;  RTS
118	.c012						GADDR:
119	.c012		4c c8 de	jmp $dec8	                jmp gaddrEntryPoint

121							; MasRef E.4-8
122							;
123							; JSR IEG takes the internal pixel coordinates of the graphics cursor
124							; (in VDU variables &24â<80><93>&27), converts it back to external coordinates
125							; and stores the result in VDU variables &10â<80><93>&13.
126							;
127							; It should be called whenever the graphics code generates a new
128							; graphics cursor position (e.g. in the VDU drivers, it is called
129							; after a character is printed in VDU 5 mode). Its purpose is to make
130							; the two versions of the graphics cursor agree again, and thus
131							; prevent errors occurring with relative plots.
132							;
133							; IEG uses no page zero locations and corrupts all registers and
134							; flags.
135	.c015						IEG:
136	.c015		4c de c4	jmp $c4de	                jmp LC4DF

138							;-------------------------------------------------------------------------

140	.c018						LC018:                                       ; Fetch byte from ROM Y
141	.c018		a6 f4		ldx $f4		                ldx $F4                      ; Get current ROM
142	.c01a		84 f4		sty $f4		                sty $F4                      ; Select ROM in Y
143	.c01c		8c 30 fe	sty $fe30	                sty ROMSEL
144	.c01f		b2 f6		lda ($f6)	                lda ($F6)                    ; Get byte with ROM Y paged in
145	.c021		4c 59 e5	jmp $e559	                jmp selectROMX                    ; Page in ROM X and return

147	.c024						LC024:
148	.c024		6c 5d 03	jmp ($035d)	                jmp ($035D)

150							;-------------------------------------------------------------------------
151							;
152							; VDU driver entry point
153							;
154							; Output to VDU.
155							;
156	.c027						outputToVDU:
157	.c027		ae 6a 02	ldx $026a	                ldx vduQueueNegativeLength  ;get VDU queue length
158	.c02a		f0 2d		beq $c059	                beq outputCharToVDU         ;taken if empty
159	.c02c		9d 24 02	sta $0224,x	                sta vduv.queueEnd-1-255,x   ;add to queue
160	.c02f		ee 6a 02	inc $026a	                inc vduQueueNegativeLength  ;one more in the queue...
161	.c032		f0 02		beq $c036	                beq outputQueueToVDU        ;taken if queue now filled
162	.c034						clc_rts_c034:
163	.c034		18		clc		                clc

165							;-------------------------------------------------------------------------
166							;
167							; VDU 0 (&00) Null [MasRef E.3-1]
168							; VDU 6 (&06) Enable VDU driver [MasRef E.3-3]
169							; VDU 27 (&1B) Null [MasRef E.3-34]
170							;
171	.c035						vdu0EntryPoint:
172	.c035						vdu6EntryPoint:
173	.c035						vdu27EntryPoint:
174	.c035						rtsC035:
175	.c035		60		rts		                rts

177							;-------------------------------------------------------------------------

179	.c036						outputQueueToVDU:
180	.c036		24 d0		bit $d0		                bit STATE
181	.c038		10 19		bpl $c053	                bpl LC053              ;branch taken if not VDU21 mode

183							                ; ????
184	.c03a		ac 5e 03	ldy $035e	                ldy vduv.jumpVector+1
185	.c03d		c0 c0		cpy #$c0	                cpy #>vdu1EntryPoint
186	.c03f		d0 f3		bne $c034	                bne clc_rts_c034
187	.c041		ac 5d 03	ldy $035d	                ldy vduv.jumpVector+0
188	.c044		c0 e1		cpy #$e1	                cpy #<vdu1EntryPoint
189	.c046		d0 ec		bne $c034	                bne clc_rts_c034

191	.c048						outputCharToPrinter:
192	.c048		aa		tax		                tax                          ;save char to print
193	.c049		a5 d0		lda $d0		                lda STATE
194	.c04b		4a		lsr a		                lsr a                       ;C set if isPrinterEnabled
195	.c04c		90 e7		bcc $c035	                bcc rtsC035 ;taken if printer disabled - VDU 1 then a no-op
196	.c04e		8a		txa		                txa                          ;restore char to print
197	.c04f		18		clc		                clc
198							                .if version<350
200							                .else
201	.c050		4c e9 e2	jmp $e2e9	                jmp LE2ED
202							                .endif

204	.c053						LC053:
205	.c053		20 f9 c0	jsr $c0f9	                jsr stopCursorEditing
206	.c056		18		clc		                clc
207	.c057		80 66		bra $c0bf	                bra LC0C0

209	.c059						outputCharToVDU:
210	.c059		20 f9 c0	jsr $c0f9	                jsr stopCursorEditing
211	.c05c		50 0f		bvc $c06d	                bvc LC06D             ;taken if not previously editing
212	.c05e		30 0d		bmi $c06d	                bmi LC06D             ;taken if VDU 21
213	.c060		c9 0d		cmp #$0d	                cmp #$0D
214	.c062		d0 09		bne $c06d	                bne LC06D                  ;taken if not printing a CR
215	.c064		48		pha		                pha                        ;save char to print
216	.c065		a9 42		lda #$42	                lda #STATE.isCursorEditing|STATE.isScrollingDisabled
217	.c067		14 d0		trb $d0		                trb STATE
218	.c069		20 4f cf	jsr $cf4f	                jsr showCursor
219	.c06c		68		pla		                pla                          ;restore char to print
220	.c06d						LC06D:
221	.c06d		c9 20		cmp #$20	                cmp #$20
222	.c06f		90 06		bcc $c077	                bcc handleControlChar
223	.c071		c9 7f		cmp #$7f	                cmp #$7F
224	.c073		d0 20		bne $c095	                bne LC096                    ;taken if not backspace
225	.c075		a9 20		lda #$20	                lda #$20 ;backspace is entry 32 in the VDU routines table
226	.c077						handleControlChar:
227	.c077		a8		tay		                tay                          ;Y=index in table
228	.c078		b9 33 e0	lda $e033,y	                lda vduRoutinesLSBTable,y
229	.c07b		8d 5d 03	sta $035d	                sta vduv.jumpVector+0 ; Store jump address LSB (see MasRef E.4-3)
230	.c07e		b9 54 e0	lda $e054,y	                lda vduRoutinesMSBTable,y
231	.c081		30 2f		bmi $c0b2	                bmi LC0B3           ;branch taken if MSB directly
232	.c083		aa		tax		                tax                          ; Save original MSB value
233	.c084		09 f0		ora #$f0	                ora #$F0
234	.c086		8d 6a 02	sta $026a	                sta vduQueueNegativeLength ;initialise initial VDU queue length
235	.c089		8a		txa		                txa                          ; Restore original MSB value
236							                .if version==350
237	.c08a		20 2e e5	jsr $e52e	                jsr LE520
243							                .endif
244	.c08d		18		clc		                clc                          ;
245	.c08e		69 c0		adc #$c0	                adc #vduRoutinesPage         ; form MSB
246	.c090		8d 5e 03	sta $035e	                sta vduv.jumpVector+1
247	.c093		80 34		bra $c0c9	                bra reinstateCursorEditing                    ; Continue

249	.c095						LC096:
250	.c095		24 d0		bit $d0		                bit STATE
251	.c097		30 2d		bmi $c0c6	                bmi LC0C7                    ;taken if VDU21
252	.c099		20 0c ce	jsr $ce0c	                jsr LCE0C
253	.c09c		a9 20		lda #$20	                lda #$20
254	.c09e		2c 66 03	bit $0366	                bit $0366
255	.c0a1		d0 23		bne $c0c6	                bne LC0C7
256	.c0a3		20 75 c2	jsr $c275	                jsr LC276
257	.c0a6		80 1e		bra $c0c6	                bra LC0C7

259	.c0a8						LC0A9:
260	.c0a8		49 06		eor #$06	                eor #$06
261	.c0aa		d0 18		bne $c0c4	                bne LC0C5
262	.c0ac		a9 80		lda #$80	                lda #STATE.isVDU21
263	.c0ae		14 d0		trb $d0		                trb STATE
264	.c0b0		80 17		bra $c0c9	                bra reinstateCursorEditing

266	.c0b2						LC0B3:
267	.c0b2		8d 5e 03	sta $035e	                sta vduv.jumpVector+1
268	.c0b5		98		tya		                tya
269	.c0b6		49 f7		eor #$f7	                eor #$F7
270	.c0b8		c9 fa		cmp #$fa	                cmp #$FA
271	.c0ba		98		tya		                tya
272	.c0bb		24 d0		bit $d0		                bit STATE
273	.c0bd		30 e9		bmi $c0a8	                bmi LC0A9             ;branch taken if VDU21 in effect
274	.c0bf						LC0C0:
275	.c0bf		08		php		                php
276	.c0c0		20 24 c0	jsr $c024	                jsr LC024
277	.c0c3		28		plp		                plp
278	.c0c4						LC0C5:
279	.c0c4		90 03		bcc $c0c9	                bcc reinstateCursorEditing
280	.c0c6						LC0C7:
281	.c0c6		a5 d0		lda $d0		                lda STATE
282	.c0c8		4a		lsr a		                lsr a                          ;C=1 if printer enabled
283	.c0c9						reinstateCursorEditing:
284	.c0c9		24 d0		bit $d0		                bit STATE
285	.c0cb		50 13		bvc $c0e0	                bvc rtsC0E1               ;taken if not cursor editing
286	.c0cd		20 04 c1	jsr $c104	                jsr activateEditCursor
287	.c0d0						exchangeCursors:
288	.c0d0		08		php		                php
289	.c0d1		48		pha		                pha
290	.c0d2		a5 d0		lda $d0		                lda STATE
291	.c0d4		49 02		eor #$02	                eor #STATE.isScrollingDisabled
292	.c0d6		85 d0		sta $d0		                sta STATE
293	.c0d8		20 ba e2	jsr $e2ba	                jsr exchangeEditCursorPositionAndTextCursorPosition
294	.c0db		20 d7 c6	jsr $c6d7	                jsr updateCRTCTextCursor
295	.c0de		68		pla		                pla
296	.c0df		28		plp		                plp
297	.c0e0						rtsC0E1:
298	.c0e0		60		rts		                rts

300							;-------------------------------------------------------------------------
301							;
302							; VDU 1 (&01) Send next character to printer only [MasRef E.3-2]
303							;
304	.c0e1						vdu1EntryPoint:
305	.c0e1		20 c9 c0	jsr $c0c9	                jsr reinstateCursorEditing
306	.c0e4		20 48 c0	jsr $c048	                jsr outputCharToPrinter
307	.c0e7		80 10		bra $c0f9	                bra stopCursorEditing

309							;-------------------------------------------------------------------------
310							;
311							; VDU 2 (&02) Enable printer [MasRef E.3-2]
312							; VDU 3 (&03) Disable printer [MasRef E.3-3]
313							;
314	.c0e9						vdu2EntryPoint:
315	.c0e9						vdu3EntryPoint:
316	.c0e9		48		pha		                pha                          ;
317	.c0ea		20 c9 c0	jsr $c0c9	                jsr reinstateCursorEditing
318							                .if version<350
320							                .else
321	.c0ed		20 e3 e2	jsr $e2e3	                jsr LE2E7
322							                .endif
323	.c0f0		a9 01		lda #$01	                lda #STATE.isPrinterEnabled  ;
324	.c0f2		04 d0		tsb $d0		                tsb STATE
325	.c0f4		68		pla		                pla
326	.c0f5		29 01		and #$01	                and #STATE.isPrinterEnabled
327	.c0f7		14 d0		trb $d0		                trb STATE

329							;-------------------------------------------------------------------------
330							;
331							; Stop cursor editing, if it's on.
332							;
333							; exit:
334							;
335							; V=1 if cursor editing previous on
336							; N=1 if VDU 21 on
337							;
338	.c0f9						stopCursorEditing:
339	.c0f9		24 d0		bit $d0		                bit STATE
340	.c0fb		50 e3		bvc $c0e0	                bvc rtsC0E1                    ;taken if not cursor editing
341	.c0fd		20 d0 c0	jsr $c0d0	                jsr exchangeCursors
342	.c100		08		php		                php
343	.c101						deactivateEditCursor:
344	.c101		38		sec		                sec
345	.c102		80 02		bra $c106	                bra updateEditCursorState

347							;-------------------------------------------------------------------------

349	.c104						activateEditCursor:
350	.c104		08		php		                php
351	.c105		18		clc		                clc

353							;-------------------------------------------------------------------------
354							;
355							; Handle cursor editing on/off.
356							;
357							; entry:
358							;
359							; C=0 - cursor editing on; add fake cursor
360							;
361							; C=1 = cursor editing off; remove fake cursor and restore screen
362							;
363	.c106						updateEditCursorState: .proc
364	.c106		48		pha		                pha
365	.c107		a5 d8		lda $d8		                lda ZMEMT+0
366	.c109		85 e0		sta $e0		                sta ZTEMPD+0
367	.c10b		a5 d9		lda $d9		                lda ZMEMT+1
368	.c10d		85 e1		sta $e1		                sta ZTEMPD+1
369	.c10f		ac 4f 03	ldy $034f	                ldy vduv.bytesPerCharacter
370	.c112		88		dey		                dey
371	.c113		d0 0e		bne $c123	                bne bitmap

373	.c115						teletext:
374	.c115		ad 38 03	lda $0338	                lda vduv.workspace._38 ;get old byte under fake cursor (may be bogus)
375	.c118		b0 17		bcs $c131	                bcs storeToScreen      ;taken if switching off
376	.c11a		b2 d8		lda ($d8)	                lda (ZMEMT)            ;get screen byte
377	.c11c		8d 38 03	sta $0338	                sta vduv.workspace._38 ;store old byte
378	.c11f		a9 7f		lda #$7f	                lda #$7F               ;store solid block to screen
379	.c121		80 0e		bra $c131	                bra storeToScreen

381	.c123						bitmap:
382	.c123		a9 ff		lda #$ff	                lda #%11111111          ;invert all bits
383	.c125		c0 1f		cpy #$1f	                cpy #$1F      ;check for 32 chars/byte - i.e., MODE 2
384	.c127		d0 02		bne $c12b	                bne +         ;taken if not MODE 2
385	.c129		a9 3f		lda #$3f	                lda #%00111111       ;avoid flashing colours in MODE 2
386	.c12b						+
387	.c12b		85 da		sta $da		                sta ZTEMP
388	.c12d						loop:
389	.c12d		b2 e0		lda ($e0)	                lda (ZTEMPD)
390	.c12f		45 da		eor $da		                eor ZTEMP
391	.c131						storeToScreen:
392	.c131		92 e0		sta ($e0)	                sta (ZTEMPD)
393	.c133		e6 e0		inc $e0		                inc ZTEMPD+0
394	.c135		d0 09		bne $c140	                bne +                    ;taken if no carry out of LSB
395	.c137		e6 e1		inc $e1		                inc ZTEMPD+1
396	.c139		10 05		bpl $c140	                bpl +                 ;taken if no screen address wrap
397	.c13b		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
398	.c13e		85 e1		sta $e1		                sta ZTEMPD+1
399	.c140						+
400	.c140		88		dey		                dey               ;Y=$ff after 1 iteration in teletext
401	.c141		10 ea		bpl $c12d	                bpl loop
402	.c143		68		pla		                pla
403	.c144		28		plp		                plp
404	.c145		60		rts		                rts
405							                .endproc

407							;-------------------------------------------------------------------------

409	.c146						LC147:
410	>c146		bd c1				                .word LC1BE
411	>c148		b0 c1				                .word LC1B1
412	>c14a		bd c1				                .word LC1BE
413	>c14c		b0 c1				                .word LC1B1
414	>c14e		94 c1				                .word LC195
415	>c150		94 c1				                .word LC195
416	>c152		a1 c1				                .word LC1A2
417	>c154		a1 c1				                .word LC1A2

419							;-------------------------------------------------------------------------

421	.c156						LC157:
422	>c156		00 c2				                .word LC201
423	>c158		ed c1				                .word LC1EE
424	>c15a		00 c2				                .word LC201
425	>c15c		ed c1				                .word LC1EE
426	>c15e		20 c2				                .word LC221
427	>c160		20 c2				                .word LC221
428	>c162		0f c2				                .word LC210
429	>c164		0f c2				                .word LC210

431							;-------------------------------------------------------------------------
432							;
433							; Indexed by the swapAxes, invertVertical and invertHorizontal cursor
434							; flags bits.
435							;
436	.c166						setTextCursorXPositionRoutinesTable:
437	>c166		d2 c2				                .word setTextCursorXPosition           ;0
438	>c168		ca c2				                .word setTextCursorXPositionInvertHorizontal ;invertHorizontal
439	>c16a		d2 c2				                .word setTextCursorXPosition ;invertVertical
440	>c16c		ca c2				                .word setTextCursorXPositionInvertHorizontal ;invertVertical|invertHorizontal
441	>c16e		e1 c2				                .word setTextCursorXPositionSwapAxes         ;swapAxes
442	>c170		e1 c2				                .word setTextCursorXPositionSwapAxes ;swapAxes|invertHorizontal
443	>c172		d9 c2				                .word setTextCursorXPositionSwapAxesInvertVertical ;swapAxes|invertVertical
444	>c174		d9 c2				                .word setTextCursorXPositionSwapAxesInvertVertical ;swapAxes|invertVertical|invertHorizontal

446							;-------------------------------------------------------------------------

448	.c176						LC177:
449	>c176		0f c3				                .word LC310
450	>c178		f1 c2				                .word LC2F2
451	>c17a		0f c3				                .word LC310
452	>c17c		f1 c2				                .word LC2F2
453	>c17e		59 c3				                .word LC35A
454	>c180		59 c3				                .word LC35A
455	>c182		37 c3				                .word LC338
456	>c184		37 c3				                .word LC338

458							;-------------------------------------------------------------------------

460	.c186						LC187:
461	.c186		4d 66 03	eor $0366	                eor $0366
462	.c189		29 0e		and #$0e	                and #$0E
463	.c18b		48		pha		                pha
464	.c18c		20 a5 d1	jsr $d1a5	                jsr LD1A6
465	.c18f		fa		plx		                plx
466	.c190		38		sec		                sec
467	.c191		7c 46 c1	jmp ($c146,x)	                jmp (LC147,x)

469	.c194						LC195:
470	.c194		ad 26 03	lda $0326	                lda $0326
471	.c197		e9 08		sbc #$08	                sbc #$08
472	.c199		8d 26 03	sta $0326	                sta $0326
473	.c19c		ce 27 03	dec $0327	                dec $0327
474	.c19f		80 08		bra $c1a9	                bra LC1AA

476	.c1a1						LC1A2:
477	.c1a1		ad 26 03	lda $0326	                lda $0326
478	.c1a4		69 07		adc #$07	                adc #$07
479	.c1a6		8d 26 03	sta $0326	                sta $0326
480	.c1a9						LC1AA:
481	.c1a9		90 1f		bcc $c1ca	                bcc LC1CB
482	.c1ab		ee 27 03	inc $0327	                inc $0327
483	.c1ae		80 1a		bra $c1ca	                bra LC1CB

485	.c1b0						LC1B1:
486	.c1b0		ad 24 03	lda $0324	                lda $0324
487	.c1b3		e9 08		sbc #$08	                sbc #$08
488	.c1b5		8d 24 03	sta $0324	                sta $0324
489	.c1b8		ce 25 03	dec $0325	                dec $0325
490	.c1bb		80 08		bra $c1c5	                bra LC1C6

492	.c1bd						LC1BE:
493	.c1bd		ad 24 03	lda $0324	                lda $0324
494	.c1c0		69 07		adc #$07	                adc #$07
495	.c1c2		8d 24 03	sta $0324	                sta $0324
496	.c1c5						LC1C6:
497	.c1c5		90 03		bcc $c1ca	                bcc LC1CB
498	.c1c7		ee 25 03	inc $0325	                inc $0325
499	.c1ca						LC1CB:
500	.c1ca		a5 da		lda $da		                lda $DA
501	.c1cc		d0 0c		bne $c1da	                bne LC1DB
502	.c1ce		2c 66 03	bit $0366	                bit $0366
503	.c1d1		70 07		bvs $c1da	                bvs LC1DB
504	.c1d3		da		phx		                phx
505	.c1d4		20 a5 d1	jsr $d1a5	                jsr LD1A6
506	.c1d7		fa		plx		                plx
507	.c1d8		a8		tay		                tay
508	.c1d9		60		rts		                rts

510	.c1da						LC1DB:
511	.c1da		a9 00		lda #$00	                lda #$00
512	.c1dc		60		rts		                rts

514	.c1dd						LC1DE:
515	.c1dd		a9 00		lda #$00	                lda #$00
516	.c1df						LC1E0:
517	.c1df		64 da		stz $da		                stz $DA
518	.c1e1		0a		asl a		                asl a
519	.c1e2		26 da		rol $da		                rol $DA
520	.c1e4		0a		asl a		                asl a
521	.c1e5		26 da		rol $da		                rol $DA
522	.c1e7		0a		asl a		                asl a
523	.c1e8		26 da		rol $da		                rol $DA
524	.c1ea		7c 56 c1	jmp ($c156,x)	                jmp (LC157,x)

526	.c1ed						LC1EE:
527	.c1ed		49 f9		eor #$f9	                eor #$F9
528	.c1ef		6d 04 03	adc $0304	                adc $0304
529	.c1f2		8d 24 03	sta $0324	                sta $0324
530	.c1f5		a5 da		lda $da		                lda $DA
531	.c1f7		49 ff		eor #$ff	                eor #$FF
532	.c1f9		6d 05 03	adc $0305	                adc $0305
533	.c1fc		8d 25 03	sta $0325	                sta $0325
534	.c1ff		60		rts		                rts

536	.c200						LC201:
537	.c200		6d 00 03	adc $0300	                adc $0300
538	.c203		8d 24 03	sta $0324	                sta $0324
539	.c206		a5 da		lda $da		                lda $DA
540	.c208		6d 01 03	adc $0301	                adc $0301
541	.c20b		8d 25 03	sta $0325	                sta $0325
542	.c20e		60		rts		                rts

544	.c20f						LC210:
545	.c20f		49 07		eor #$07	                eor #$07
546	.c211		6d 02 03	adc $0302	                adc $0302
547	.c214		8d 26 03	sta $0326	                sta $0326
548	.c217		a5 da		lda $da		                lda $DA
549	.c219		6d 03 03	adc $0303	                adc $0303
550	.c21c		8d 27 03	sta $0327	                sta $0327
551	.c21f		60		rts		                rts

553	.c220						LC221:
554	.c220		38		sec		                sec
555	.c221		49 ff		eor #$ff	                eor #$FF
556	.c223		6d 06 03	adc $0306	                adc $0306
557	.c226		8d 26 03	sta $0326	                sta $0326
558	.c229		a5 da		lda $da		                lda $DA
559	.c22b		49 ff		eor #$ff	                eor #$FF
560	.c22d		6d 07 03	adc $0307	                adc $0307
561	.c230		8d 27 03	sta $0327	                sta $0327
562	.c233		60		rts		                rts

564	.c234						LC235:
565	.c234		a9 00		lda #$00	                lda #$00
566	.c236		20 86 c1	jsr $c186	                jsr LC187
567	.c239		f0 0d		beq $c248	                beq LC249
568	.c23b		20 dd c1	jsr $c1dd	                jsr LC1DE
569	.c23e						LC23F:
570	.c23e		a9 08		lda #$08	                lda #$08
571	.c240						LC241:
572	.c240		20 86 c1	jsr $c186	                jsr LC187
573	.c243		f0 03		beq $c248	                beq LC249
574	.c245		20 dd c1	jsr $c1dd	                jsr LC1DE
575	.c248						LC249:
576	.c248		4c de c4	jmp $c4de	                jmp LC4DF

578	.c24b						vdu9EntryPoint:
579	.c24b		20 2c d1	jsr $d12c	                jsr handleColumn81
580	.c24e		b0 e4		bcs $c234	                bcs LC235
581	.c250		a9 00		lda #$00	                lda #$00
582	.c252		20 e8 c2	jsr $c2e8	                jsr LC2E9
583	.c255		90 1b		bcc $c272	                bcc LC273
584	.c257						LC258:
585	.c257		20 8e c3	jsr $c38e	                jsr LC38F
586	.c25a						vdu10EntryPoint:
587	.c25a		20 de e2	jsr $e2de	                jsr testVDU5State
588	.c25d		d0 df		bne $c23e	                bne LC23F
589	.c25f		18		clc		                clc
590	.c260		20 90 c8	jsr $c890	                jsr LC88E
591	.c263		a9 08		lda #$08	                lda #$08
592	.c265		20 e8 c2	jsr $c2e8	                jsr LC2E9
593	.c268						LC269:
594	.c268		90 08		bcc $c272	                bcc LC273
595	.c26a		20 7a c3	jsr $c37a	                jsr LC37B
596	.c26d		90 03		bcc $c272	                bcc LC273
597	.c26f		4c 50 d0	jmp $d050	                jmp LD051

599	.c272						LC273:
600	.c272		4c ec c6	jmp $c6ec	                jmp updateCRTCCursorAddress

602	.c275						LC276:
603	.c275		20 de e2	jsr $e2de	                jsr testVDU5State
604	.c278		d0 ba		bne $c234	                bne LC235
605	.c27a		20 e8 c2	jsr $c2e8	                jsr LC2E9
606	.c27d		90 f3		bcc $c272	                bcc LC273
607	.c27f		a9 01		lda #$01	                lda #$01
608	.c281		2c 66 03	bit $0366	                bit $0366
609	.c284		f0 d1		beq $c257	                beq LC258
610	.c286		38		sec		                sec
611	.c287		6e 6c 03	ror $036c	                ror $036C
612	.c28a						LC28B:
613	.c28a		60		rts		                rts

615	.c28b						LC28C:
616	.c28b		a9 06		lda #$06	                lda #$06
617	.c28d		20 86 c1	jsr $c186	                jsr LC187
618	.c290		f0 b6		beq $c248	                beq LC249
619	.c292		20 dd c1	jsr $c1dd	                jsr LC1DE
620	.c295						LC296:
621	.c295		a9 0e		lda #$0e	                lda #$0E
622	.c297		80 a7		bra $c240	                bra LC241

624	.c299						vdu8EntryPoint:
625	.c299		20 de e2	jsr $e2de	                jsr testVDU5State
626	.c29c		d0 ed		bne $c28b	                bne LC28C
627	.c29e		4e 6c 03	lsr $036c	                lsr $036C
628	.c2a1		2c 6c 03	bit $036c	                bit $036C
629	.c2a4		70 e4		bvs $c28a	                bvs LC28B
630	.c2a6		a9 06		lda #$06	                lda #$06
631	.c2a8		20 e8 c2	jsr $c2e8	                jsr LC2E9
632	.c2ab		90 c5		bcc $c272	                bcc LC273
633	.c2ad		20 8e c3	jsr $c38e	                jsr LC38F
634	.c2b0						vdu11EntryPoint:
635	.c2b0		20 de e2	jsr $e2de	                jsr testVDU5State
636	.c2b3		d0 e0		bne $c295	                bne LC296
637	.c2b5		ce 69 02	dec $0269	                dec pagedModeCounter
638	.c2b8		10 03		bpl $c2bd	                bpl LC2BE
639	.c2ba		ee 69 02	inc $0269	                inc pagedModeCounter
640	.c2bd						LC2BE:
641	.c2bd		a9 0e		lda #$0e	                lda #$0E
642	.c2bf		20 e8 c2	jsr $c2e8	                jsr LC2E9
643	.c2c2		80 a4		bra $c268	                bra LC269

645							;-------------------------------------------------------------------------
646							;
647							; Set/reset cursor position, taking cursor flags into account.
648							;
649							; entry:
650							;
651							; (set only) A = cursor position
652							;
653							; X = cursorFlags bits: swapAxes, invertVertical, invertHorizontal
654							;
655	.c2c4						resetTextCursorXPositionWithCursorFlags:
656	.c2c4		a9 00		lda #$00	                lda #$00
657	.c2c6						setTextCursorXPositionWithCursorFlags:
658	.c2c6		18		clc		                clc
659	.c2c7		7c 66 c1	jmp ($c166,x)	                jmp (setTextCursorXPositionRoutinesTable,x)

661							;-------------------------------------------------------------------------

663	.c2ca						setTextCursorXPositionInvertHorizontal:
664	.c2ca		38		sec		                sec                          ;+1
665	.c2cb		49 ff		eor #$ff	                eor #$FF          ;^$ff+1 (i.e., adc will add the -ve)
666	.c2cd		6d 0a 03	adc $030a	                adc vduv.textWindowRight
667	.c2d0		80 03		bra $c2d5	                bra staTextCursorXPosition

669							;-------------------------------------------------------------------------

671	.c2d2						setTextCursorXPosition:
672	.c2d2		6d 08 03	adc $0308	                adc vduv.textWindowLeft
673	.c2d5						staTextCursorXPosition:
674	.c2d5		8d 18 03	sta $0318	                sta vduv.textCursorXPosition
675	.c2d8		60		rts		                rts

677							;-------------------------------------------------------------------------

679	.c2d9						setTextCursorXPositionSwapAxesInvertVertical:
680	.c2d9		38		sec		                sec
681	.c2da		49 ff		eor #$ff	                eor #$FF
682	.c2dc		6d 09 03	adc $0309	                adc vduv.textWindowBottom
683	.c2df		80 03		bra $c2e4	                bra staTextCursorYPosition

685	.c2e1						setTextCursorXPositionSwapAxes:
686	.c2e1		6d 0b 03	adc $030b	                adc vduv.textWindowTop
687	.c2e4						staTextCursorYPosition:
688	.c2e4		8d 19 03	sta $0319	                sta vduv.textCursorYPosition
689	.c2e7		60		rts		                rts

691							;-------------------------------------------------------------------------

693	.c2e8						LC2E9:
694	.c2e8		4d 66 03	eor $0366	                eor $0366
695	.c2eb		29 0e		and #$0e	                and #$0E
696	.c2ed		aa		tax		                tax
697	.c2ee						LC2EF:
698	.c2ee		7c 76 c1	jmp ($c176,x)	                jmp (LC177,x)

700	.c2f1						LC2F2:
701	.c2f1		ad 08 03	lda $0308	                lda $0308
702	.c2f4		cd 18 03	cmp $0318	                cmp $0318
703	.c2f7		b0 3d		bcs $c336	                bcs LC337
704	.c2f9		ce 18 03	dec $0318	                dec $0318
705	.c2fc		38		sec		                sec
706	.c2fd		ad 4a 03	lda $034a	                lda $034A
707	.c300		ed 4f 03	sbc $034f	                sbc $034F
708	.c303		8d 4a 03	sta $034a	                sta $034A
709	.c306		85 d8		sta $d8		                sta ZMEMT+0
710	.c308		b0 2b		bcs $c335	                bcs LC336
711	.c30a		ce 4b 03	dec $034b	                dec $034B
712	.c30d		80 1b		bra $c32a	                bra LC32B

714	.c30f						LC310:
715	.c30f		ad 18 03	lda $0318	                lda $0318
716	.c312		cd 0a 03	cmp $030a	                cmp $030A
717	.c315		b0 1f		bcs $c336	                bcs LC337
718	.c317		ee 18 03	inc $0318	                inc $0318
719	.c31a		ad 4a 03	lda $034a	                lda $034A
720	.c31d		6d 4f 03	adc $034f	                adc $034F
721	.c320		8d 4a 03	sta $034a	                sta $034A
722	.c323		85 d8		sta $d8		                sta ZMEMT+0
723	.c325		90 0f		bcc $c336	                bcc LC337
724	.c327		ee 4b 03	inc $034b	                inc $034B
725	.c32a						LC32B:
726	.c32a		ad 4b 03	lda $034b	                lda $034B
727	.c32d						LC32E:
728	.c32d		10 04		bpl $c333	                bpl LC334
729	.c32f		38		sec		                sec
730	.c330		ed 54 03	sbc $0354	                sbc $0354
731	.c333						LC334:
732	.c333		85 d9		sta $d9		                sta ZMEMT+1
733	.c335						LC336:
734	.c335		18		clc		                clc
735	.c336						LC337:
736	.c336		60		rts		                rts

738	.c337						LC338:
739	.c337		ad 0b 03	lda $030b	                lda $030B
740	.c33a		cd 19 03	cmp $0319	                cmp $0319
741	.c33d		b0 f7		bcs $c336	                bcs LC337
742	.c33f		ce 19 03	dec $0319	                dec $0319
743	.c342		38		sec		                sec
744	.c343		ad 4a 03	lda $034a	                lda $034A
745	.c346		ed 52 03	sbc $0352	                sbc $0352
746	.c349		8d 4a 03	sta $034a	                sta $034A
747	.c34c		85 d8		sta $d8		                sta ZMEMT+0
748	.c34e		ad 4b 03	lda $034b	                lda $034B
749	.c351		ed 53 03	sbc $0353	                sbc $0353
750	.c354		8d 4b 03	sta $034b	                sta $034B
751	.c357		80 d4		bra $c32d	                bra LC32E

753	.c359						LC35A:
754	.c359		ad 19 03	lda $0319	                lda $0319
755	.c35c		cd 09 03	cmp $0309	                cmp $0309
756	.c35f		b0 d5		bcs $c336	                bcs LC337
757	.c361		ee 19 03	inc $0319	                inc $0319
758	.c364		ad 4a 03	lda $034a	                lda $034A
759	.c367		6d 52 03	adc $0352	                adc $0352
760	.c36a		8d 4a 03	sta $034a	                sta $034A
761	.c36d		85 d8		sta $d8		                sta ZMEMT+0
762	.c36f		ad 4b 03	lda $034b	                lda $034B
763	.c372		6d 53 03	adc $0353	                adc $0353
764	.c375		8d 4b 03	sta $034b	                sta $034B
765	.c378		80 b3		bra $c32d	                bra LC32E

767	.c37a						LC37B:
768	.c37a		a9 10		lda #$10	                lda #$10
769	.c37c		2c 66 03	bit $0366	                bit $0366
770	.c37f		d0 0d		bne $c38e	                bne LC38F
771	.c381		8a		txa		                txa
772	.c382		49 06		eor #$06	                eor #$06
773	.c384		48		pha		                pha
774	.c385		a9 42		lda #$42	                lda #$42
775	.c387		24 d0		bit $d0		                bit STATE
776	.c389		f0 16		beq $c3a1	                beq LC3A2
777	.c38b		70 09		bvs $c396	                bvs LC397
778	.c38d		68		pla		                pla
779	.c38e						LC38F:
780	.c38e		20 c4 c2	jsr $c2c4	                jsr resetTextCursorXPositionWithCursorFlags
781	.c391		20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
782	.c394		18		clc		                clc
783	.c395		60		rts		                rts

785	.c396						LC397:
786	.c396		20 ba e2	jsr $e2ba	                jsr exchangeEditCursorPositionAndTextCursorPosition
787	.c399		fa		plx		                plx
788	.c39a		da		phx		                phx
789	.c39b		20 ee c2	jsr $c2ee	                jsr LC2EF
790	.c39e		20 ba e2	jsr $e2ba	                jsr exchangeEditCursorPositionAndTextCursorPosition
791	.c3a1						LC3A2:
792	.c3a1		fa		plx		                plx
793	.c3a2		38		sec		                sec
794	.c3a3						LC3A4:
795	.c3a3		60		rts		                rts

797	.c3a4						vdu28EntryPoint:
798	.c3a4		ae 55 03	ldx $0355	                ldx $0355
799	.c3a7		ad 21 03	lda $0321	                lda $0321
800	.c3aa		cd 23 03	cmp $0323	                cmp $0323
801	.c3ad		90 f4		bcc $c3a3	                bcc LC3A4
802	.c3af		dd 0d e1	cmp $e10d,x	                cmp modeMaxRow,x
803	.c3b2		f0 02		beq $c3b6	                beq LC3B7
804	.c3b4		b0 ed		bcs $c3a3	                bcs LC3A4
805	.c3b6						LC3B7:
806	.c3b6		ad 22 03	lda $0322	                lda $0322
807	.c3b9		dd 15 e1	cmp $e115,x	                cmp modeMaxColumn,x
808	.c3bc		f0 03		beq $c3c1	                beq LC3C2
809	.c3be		b0 e3		bcs $c3a3	                bcs LC3A4
810	.c3c0		38		sec		                sec
811	.c3c1						LC3C2:
812	.c3c1		ed 20 03	sbc $0320	                sbc $0320
813	.c3c4		90 dd		bcc $c3a3	                bcc LC3A4
814	.c3c6		20 7f c7	jsr $c77f	                jsr setTextWindowWidthInBytes
815	.c3c9		a9 08		lda #$08	                lda #$08
816	.c3cb		04 d0		tsb $d0		                tsb STATE
817	.c3cd		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
818	.c3cf		a0 08		ldy #$08	                ldy #VDUVariables.textWindowLeft
819	.c3d1		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
820	.c3d4		20 ba e2	jsr $e2ba	                jsr exchangeEditCursorPositionAndTextCursorPosition
821	.c3d7		20 da cc	jsr $ccda	                jsr LCCDA
822	.c3da		90 03		bcc $c3df	                bcc LC3E0
823	.c3dc		20 e7 c3	jsr $c3e7	                jsr LC3E8
824	.c3df						LC3E0:
825	.c3df		20 ba e2	jsr $e2ba	                jsr exchangeEditCursorPositionAndTextCursorPosition
826	.c3e2		20 da cc	jsr $ccda	                jsr LCCDA
827	.c3e5		90 1f		bcc $c406	                bcc LC407
828	.c3e7						LC3E8:
829	.c3e7		a5 d0		lda $d0		                lda STATE
830	.c3e9		48		pha		                pha
831	.c3ea		29 df		and #$df	                and #$DF
832	.c3ec		85 d0		sta $d0		                sta STATE
833	.c3ee		20 7b c4	jsr $c47b	                jsr vdu30EntryPoint
834	.c3f1		68		pla		                pla
835	.c3f2		85 d0		sta $d0		                sta STATE
836	.c3f4		60		rts		                rts

838	.c3f5						vdu13EntryPoint:
839	.c3f5		ad 66 03	lda $0366	                lda $0366
840	.c3f8		29 0e		and #$0e	                and #$0E
841	.c3fa		aa		tax		                tax
842	.c3fb		20 de e2	jsr $e2de	                jsr testVDU5State
843	.c3fe		d0 09		bne $c409	                bne LC40A
844	.c400		4e 6c 03	lsr $036c	                lsr $036C
845	.c403		20 8e c3	jsr $c38e	                jsr LC38F
846	.c406						LC407:
847	.c406		4c ec c6	jmp $c6ec	                jmp updateCRTCCursorAddress

849	.c409						LC40A:
850	.c409		20 dd c1	jsr $c1dd	                jsr LC1DE
851	.c40c		4c de c4	jmp $c4de	                jmp LC4DF

853	.c40f						LC410:
854	.c40f		20 7b c4	jsr $c47b	                jsr vdu30EntryPoint

856							;-------------------------------------------------------------------------
857							;
858							; VDU 16 (&10) Clear graphics window [MasRef E.3-7]
859							;
860	.c412						vdu16EntryPoint:
861	.c412		ad 61 03	lda $0361	                lda vduv.pixelsPerByteMinusOne
862	.c415		f0 8c		beq $c3a3	                beq LC3A4                    ;taken if MODE 7
863	.c417		a2 00		ldx #$00	                ldx #VDUVariables.graphicsWindowPixelsLeft
864	.c419		20 02 c9	jsr $c902	                jsr copyEightBytesToWorkspace28
865	.c41c		20 51 c9	jsr $c951	                jsr prepareForPlotBackground
866	.c41f						LC420:
867	.c41f		a2 2a		ldx #$2a	                ldx #$2A
868	.c421		a0 2e		ldy #$2e	                ldy #$2E
869	.c423		20 be e2	jsr $e2be	                jsr exchangeTwoVDUBytes
870	.c426						LC427:
871	.c426		a2 28		ldx #$28	                ldx #$28
872	.c428		a0 2c		ldy #$2c	                ldy #$2C
873	.c42a		20 e7 da	jsr $dae7	                jsr LDAE8
874	.c42d		ad 2a 03	lda $032a	                lda $032A
875	.c430		d0 03		bne $c435	                bne LC436
876	.c432		ce 2b 03	dec $032b	                dec $032B
877	.c435						LC436:
878	.c435		ce 2a 03	dec $032a	                dec $032A
879	.c438		ad 2a 03	lda $032a	                lda $032A
880	.c43b		cd 2e 03	cmp $032e	                cmp $032E
881	.c43e		ad 2b 03	lda $032b	                lda $032B
882	.c441		ed 2f 03	sbc $032f	                sbc $032F
883	.c444		10 e0		bpl $c426	                bpl LC427
884	.c446		60		rts		                rts

886	.c447						LC448:
887	.c447		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
888	.c449		20 e6 c8	jsr $c8e6	                jsr prepareAABB
889	.c44c		80 d1		bra $c41f	                bra LC420

891							;-------------------------------------------------------------------------
892							;
893							; VDU 12 (&0C) Clear text window [MasRef E.3-5]
894							;
895	.c44e						vdu12EntryPoint:
896	.c44e		a9 20		lda #$20	                lda #STATE.isVDU5
897	.c450		24 d0		bit $d0		                bit STATE
898	.c452		d0 bb		bne $c40f	                bne LC410                    ;taken if VDU 5 mode
899	.c454		a9 08		lda #$08	                lda #STATE.isTextWindow
900	.c456		24 d0		bit $d0		                bit STATE
901	.c458		d0 03		bne $c45d	                bne clearTextWindow                    ;taken if text window
902	.c45a		4c 68 c8	jmp $c868	                jmp clsFastPath

904							                ; Clear screen within text window
905							                ; -------------------------------
906	.c45d						clearTextWindow:
907	.c45d		20 08 c9	jsr $c908	                jsr copyTextWindowWidthInBytesToWorkspace28
908	.c460		ae 08 03	ldx $0308	                ldx vduv.textWindowLeft
909	.c463		8e 18 03	stx $0318	                stx vduv.textCursorXPosition
910	.c466		ae 0b 03	ldx $030b	                ldx vduv.textWindowTop
911	.c469						clearTextWindowRowsLoop:
912	.c469		8e 19 03	stx $0319	                stx vduv.textCursorYPosition
913	.c46c		20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
914	.c46f		20 e8 ca	jsr $cae8	                jsr LCAE8
915	.c472		ae 19 03	ldx $0319	                ldx vduv.textCursorYPosition
916	.c475		ec 09 03	cpx $0309	                cpx vduv.textWindowBottom
917	.c478		e8		inx		                inx
918	.c479		90 ee		bcc $c469	                bcc clearTextWindowRowsLoop

920							;-------------------------------------------------------------------------
921							;
922							; VDU 30 (&1E) Home cursor [MasRef E.3-36]
923							;
924	.c47b						vdu30EntryPoint:
925							                ; pretend it's VDU 31,0,0
926	.c47b		9c 23 03	stz $0323	                stz vduv.queueEnd-1
927	.c47e		9c 22 03	stz $0322	                stz vduv.queueEnd-2

929							;-------------------------------------------------------------------------
930							;
931							; VDU 31 (&1F) Tab cursor [MasRef E.3-36]
932							;
933	.c481						vdu31EntryPoint:
934	.c481		ad 66 03	lda $0366	                lda vduv.cursorFlags
935	.c484		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
936	.c486		aa		tax		                tax
937	.c487						LC488:
938	.c487		20 de e2	jsr $e2de	                jsr testVDU5State
939	.c48a		d0 42		bne $c4ce	                bne LC4CF                    ;taken if VDU 5
940	.c48c		ad 18 03	lda $0318	                lda vduv.textCursorXPosition
941	.c48f		48		pha		                pha                          ;save old X pos
942	.c490		ad 19 03	lda $0319	                lda vduv.textCursorYPosition
943	.c493		48		pha		                pha                          ;save old Y pos
944	.c494		ad 22 03	lda $0322	                lda vduv.queueEnd-2          ;X coordinate
945	.c497		20 c6 c2	jsr $c2c6	                jsr setTextCursorXPositionWithCursorFlags
946	.c49a		da		phx		                phx                          ;save true cursorFlags bits
947	.c49b		8a		txa		                txa
948	.c49c		49 08		eor #$08	                eor #vduv.cursorFlags.swapAxes ;cheekily do the other axis by just changing the cursor flags
949	.c49e		aa		tax		                tax
950	.c49f		ad 23 03	lda $0323	                lda vduv.queueEnd-1          ;Y coordinate
951	.c4a2		20 d7 cc	jsr $ccd7	                jsr LCCD7
952	.c4a5		fa		plx		                plx                    ;restore true cursorFlags bits
953	.c4a6		90 11		bcc $c4b9	                bcc LC4BA              ;taken if no scrolling required
954	.c4a8		a9 01		lda #$01	                lda #vduv.cursorFlags.scrollProtect
955	.c4aa		2c 66 03	bit $0366	                bit $0366
956	.c4ad		f0 11		beq $c4c0	                beq LC4C1                 ;taken if scroll protect off

958							                ; Wrap text cursor X.
959	.c4af		ad 22 03	lda $0322	                lda vduv.queueEnd-2       ;X coordinate
960	.c4b2		3a		dec a		                dec a
961	.c4b3		20 d7 cc	jsr $ccd7	                jsr LCCD7
962	.c4b6		b0 08		bcs $c4c0	                bcs LC4C1
963	.c4b8		38		sec		                sec
964	.c4b9						LC4BA:
965	.c4b9		6e 6c 03	ror $036c	                ror vduv.column81
966	.c4bc		68		pla		                pla                          ;discard old Y pos
967	.c4bd		68		pla		                pla                          ;discard old X pos
968	.c4be		80 0b		bra $c4cb	                bra LC4CC

970	.c4c0						LC4C1:
971	.c4c0		68		pla		                pla
972	.c4c1		8d 19 03	sta $0319	                sta vduv.textCursorYPosition ;restore old Y pos
973	.c4c4		68		pla		                pla
974	.c4c5		8d 18 03	sta $0318	                sta vduv.textCursorXPosition ;restore old X pos
975	.c4c8		20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
976	.c4cb						LC4CC:
977	.c4cb		4c ec c6	jmp $c6ec	                jmp updateCRTCCursorAddress

979	.c4ce						LC4CF:
980	.c4ce		ad 22 03	lda $0322	                lda $0322
981	.c4d1		20 df c1	jsr $c1df	                jsr LC1E0
982	.c4d4		8a		txa		                txa
983	.c4d5		49 08		eor #$08	                eor #$08
984	.c4d7		aa		tax		                tax
985	.c4d8		ad 23 03	lda $0323	                lda $0323
986	.c4db		20 df c1	jsr $c1df	                jsr LC1E0
987	.c4de						LC4DF:
988	.c4de		a0 10		ldy #$10	                ldy #$10
989	.c4e0		20 1c c9	jsr $c91c	                jsr copyGraphicsCursorPixels
990	.c4e3		a2 02		ldx #$02	                ldx #$02
991	.c4e5		a0 02		ldy #$02	                ldy #$02
992	.c4e7		20 fb c4	jsr $c4fb	                jsr LC4FC
993	.c4ea		a2 00		ldx #$00	                ldx #$00
994	.c4ec		a0 04		ldy #$04	                ldy #$04
995	.c4ee		ad 61 03	lda $0361	                lda $0361
996	.c4f1						LC4F2:
997	.c4f1		88		dey		                dey
998	.c4f2		4a		lsr a		                lsr a
999	.c4f3		d0 fc		bne $c4f1	                bne LC4F2
1000	.c4f5		ad 56 03	lda $0356	                lda $0356
1001	.c4f8		f0 01		beq $c4fb	                beq LC4FC
1002	.c4fa		c8		iny		                iny
1003	.c4fb						LC4FC:
1004	.c4fb		1e 10 03	asl $0310,x	                asl $0310,x
1005	.c4fe		3e 11 03	rol $0311,x	                rol $0311,x
1006	.c501		88		dey		                dey
1007	.c502		d0 f7		bne $c4fb	                bne LC4FC
1008	.c504		38		sec		                sec
1009	.c505		20 09 c5	jsr $c509	                jsr LC50A
1010	.c508		e8		inx		                inx
1011	.c509						LC50A:
1012	.c509		bd 10 03	lda $0310,x	                lda $0310,x
1013	.c50c		fd 0c 03	sbc $030c,x	                sbc $030C,x
1014	.c50f		9d 10 03	sta $0310,x	                sta $0310,x
1015	.c512		60		rts		                rts

1017							;-------------------------------------------------------------------------
1018							;
1019							; VDU 14 (&0E) Page mode on [MasRef E.3-6]
1020							;
1021	.c513						vdu14EntryPoint:
1022	.c513		9c 69 02	stz $0269	                stz pagedModeCounter
1023	.c516		a9 91		lda #$91	                lda #$91

1025							;-------------------------------------------------------------------------
1026							;
1027							; VDU 21 (&15) Disable VDU driver [MasRef E.3-11]
1028							;
1029	.c518						vdu21EntryPoint:
1030	.c518		49 95		eor #$95	                eor #$95
1031	.c51a						LC51B:
1032	.c51a		04 d0		tsb $d0		                tsb STATE
1033	.c51c		60		rts		                rts

1035							;-------------------------------------------------------------------------
1036							;
1037							; VDU 4 (&04) Print at text cursor [MasRef E.3-2]
1038							;
1039	.c51d						vdu4EntryPoint:
1040	.c51d		ad 61 03	lda $0361	                lda $0361
1041	.c520		f0 09		beq $c52b	                beq LC52C
1042	.c522		20 4f cf	jsr $cf4f	                jsr showCursor
1043	.c525		a9 2b		lda #$2b	                lda #$2B

1045							                ; fall through to vdu15EntryPoint

1047							;-------------------------------------------------------------------------
1048							;
1049							; VDU 15 (&0F) Page mode off [MasRef E.3-6]
1050							;
1051	.c527						vdu15EntryPoint:
1052	.c527		49 0b		eor #$0b	                eor #$0B
1053	.c529		14 d0		trb $d0		                trb STATE
1054	.c52b						LC52C:
1055	.c52b		60		rts		                rts

1057							;-------------------------------------------------------------------------
1058							;
1059							; VDU 5 (&05) Print text at graphics cursor [MasRef E.3-3]
1060							;
1061	.c52c						vdu5EntryPoint:
1062	.c52c		ad 61 03	lda $0361	                lda $0361
1063	.c52f		f0 fa		beq $c52b	                beq LC52C
1064	.c531		a9 20		lda #$20	                lda #$20
1065	.c533		20 52 cf	jsr $cf52	                jsr setCRTCRegister10
1066	.c536		80 e2		bra $c51a	                bra LC51B

1068							;-------------------------------------------------------------------------
1069							;
1070							; VDU 17 (&11) Define text colour [MasRef E.3-7]
1071							;
1072	.c538						vdu17EntryPoint:
1073	.c538		a0 00		ldy #$00	                ldy #$00
1074	.c53a		ad 23 03	lda $0323	                lda $0323
1075	.c53d		10 01		bpl $c540	                bpl LC541
1076	.c53f		c8		iny		                iny
1077	.c540						LC541:
1078	.c540		2d 60 03	and $0360	                and $0360
1079	.c543		85 da		sta $da		                sta $DA
1080	.c545		ad 60 03	lda $0360	                lda $0360
1081	.c548		f0 18		beq $c562	                beq LC563
1082	.c54a		29 07		and #$07	                and #$07
1083	.c54c		18		clc		                clc
1084	.c54d		65 da		adc $da		                adc $DA
1085	.c54f		aa		tax		                tax
1086	.c550		bd 57 e1	lda $e157,x	                lda solidColoursTable-1,x
1087	.c553		99 57 03	sta $0357,y	                sta $0357,y
1088	.c556		ad 57 03	lda $0357	                lda $0357
1089	.c559		49 ff		eor #$ff	                eor #$FF
1090	.c55b		85 d3		sta $d3		                sta ZEOR
1091	.c55d		4d 58 03	eor $0358	                eor $0358
1092	.c560		85 d2		sta $d2		                sta ZORA
1093	.c562						LC563:
1094	.c562		60		rts		                rts

1096							;-------------------------------------------------------------------------
1097							;
1098							; VDU 18 (&12) Define graphics colour [MasRef E.3-7]
1099							;
1100	.c563						vdu18EntryPoint:
1101	.c563		a0 00		ldy #$00	                ldy #$00                    ;assume setting foreground
1102	.c565		ad 23 03	lda $0323	                lda vduv.queueEnd-1         ;get colour
1103	.c568		10 01		bpl $c56b	                bpl +                     ;taken if setting foreground
1104	.c56a		c8		iny		                iny                       ;setting background
1105	.c56b						+
1106	.c56b		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne
1107	.c56e		99 6d 03	sta $036d,y	                sta vduv.foregroundGraphicsColour,y
1108	.c571		ad 22 03	lda $0322	                lda vduv.queueEnd-2          ;get GCOL mode
1109	.c574		99 5b 03	sta $035b,y	                sta vduv.foregroundGCOLMode,y
1110	.c577		29 f0		and #$f0	                and #$F0                     ;non-zero if ECF
1111	.c579		99 6a 03	sta $036a,y	                sta vduv.isForegroundECF,y
1112	.c57c						initializeCurrentECFPatterns:
1113	.c57c		ad 5b 03	lda $035b	                lda vduv.foregroundGCOLMode
1114	.c57f		ae 6d 03	ldx $036d	                ldx vduv.foregroundGraphicsColour
1115	.c582		a0 00		ldy #$00	                ldy #andy.fgECFPattern-andy.currentECFPatterns
1116	.c584		20 8f c5	jsr $c58f	                jsr initializeCurrentECFPattern
1117	.c587		ad 5c 03	lda $035c	                lda vduv.backgroundGCOLMode
1118	.c58a		ae 6e 03	ldx $036e	                ldx vduv.backgroundGraphicsColour
1119	.c58d		a0 08		ldy #$08	                ldy #andy.bgECFPattern-andy.currentECFPatterns
1120	.c58f						initializeCurrentECFPattern:
1121	.c58f		29 f0		and #$f0	                and #$F0                     ;GCOL mode ECF bits
1122	.c591		d0 18		bne $c5ab	                bne initializeECFPatternFromPattern

1124	.c593						initializeECFPatternFromColour:
1125	.c593		86 da		stx $da		                stx ZTEMP+0                  ;colour low bits
1126	.c595		ad 60 03	lda $0360	                lda vduv.numberOfLogicalColoursMinusOne
1127	.c598		29 07		and #$07	                and #$07
1128	.c59a		18		clc		                clc
1129	.c59b		65 da		adc $da		                adc ZTEMP+0
1130	.c59d		aa		tax		                tax
1131							                ; use solid colour as ECF "pattern".
1132	.c59e		bd 57 e1	lda $e157,x	                lda solidColoursTable-1,x
1133	.c5a1		a2 07		ldx #$07	                ldx #$07
1134	.c5a3						-
1135	.c5a3		99 20 88	sta $8820,y	                sta andy.fgECFPattern,y
1136	.c5a6		c8		iny		                iny
1137	.c5a7		ca		dex		                dex
1138	.c5a8		10 f9		bpl $c5a3	                bpl -
1139	.c5aa		60		rts		                rts

1141	.c5ab						initializeECFPatternFromPattern:
1142	.c5ab		4a		lsr a		                lsr a                        ;(index+1)*8
1143	.c5ac		aa		tax		                tax
1144	.c5ad		a9 07		lda #$07	                lda #$07
1145	.c5af		85 da		sta $da		                sta ZTEMP+0
1146	.c5b1						-
1147	.c5b1		bd f8 87	lda $87f8,x	                lda andy.ecfPatterns-8,x     ;-8 due to index+1 above
1148	.c5b4		99 20 88	sta $8820,y	                sta andy.fgECFPattern,y
1149	.c5b7		e8		inx		                inx
1150	.c5b8		c8		iny		                iny
1151	.c5b9		c6 da		dec $da		                dec ZTEMP+0
1152	.c5bb		10 f4		bpl $c5b1	                bpl -
1153	.c5bd		60		rts		                rts

1155							;-------------------------------------------------------------------------
1156							;
1157							; VDU 20 (&14) Restore default logical colours [MasRef E.3-10]
1158							;
1159	.c5be						setBackgroundTextColourForTeletext:
1160	.c5be		a9 20		lda #$20	                lda #' '
1161	.c5c0		8d 58 03	sta $0358	                sta vduv.backgroundTextColour
1162	.c5c3		60		rts		                rts

1164	.c5c4						vdu20EntryPoint:
1165	.c5c4		a2 05		ldx #$05	                ldx #$05
1166	.c5c6						-
1167	.c5c6		9e 57 03	stz $0357,x	                stz vduv.foregroundTextColour,x
1168	.c5c9		ca		dex		                dex
1169	.c5ca		10 fa		bpl $c5c6	                bpl -
1170	.c5cc		9c 6e 03	stz $036e	                stz vduv.backgroundGraphicsColour
1171	.c5cf		9c 6b 03	stz $036b	                stz vduv.isBackgroundECF
1172	.c5d2		a9 ff		lda #$ff	                lda #%11111111
1173	.c5d4		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
1174	.c5d7		f0 e5		beq $c5be	                beq setBackgroundTextColourForTeletext
1175	.c5d9		e0 0f		cpx #$0f	                cpx #$0F
1176	.c5db		d0 02		bne $c5df	                bne +                        ;taken unless MODE 2
1177	.c5dd		a9 3f		lda #$3f	                lda #%00111111               ;MODE 2 default foreground colour is 7
1178	.c5df						+
1179	.c5df		8d 57 03	sta $0357	                sta vduv.foregroundTextColour
1180	.c5e2		49 ff		eor #$ff	                eor #$FF
1181	.c5e4		85 d2		sta $d2		                sta ZORA
1182	.c5e6		85 d3		sta $d3		                sta ZEOR
1183	.c5e8		8a		txa		                txa
1184	.c5e9		29 07		and #$07	                and #$07
1185	.c5eb		8d 6d 03	sta $036d	                sta vduv.foregroundGraphicsColour
1186	.c5ee		9c 6a 03	stz $036a	                stz vduv.isForegroundECF
1187	.c5f1		da		phx		                phx                          ;save numberOfLogicalColoursMinusOne
1188	.c5f2		20 7c c5	jsr $c57c	                jsr initializeCurrentECFPatterns
1189	.c5f5		fa		plx		                plx                          ;restore numberOfLogicalColoursMinusOne
1190	.c5f6		8e 1f 03	stx $031f	                stx vduv.queueEnd-5          ;Prepare VDU19,<max logical colour>
1191	.c5f9		e0 03		cpx #$03	                cpx #$03
1192	.c5fb		f0 11		beq $c60e	                beq reset4Colours            ;taken if MODE 1/5
1193	.c5fd		90 20		bcc $c61f	                bcc reset2Colours            ;taken if MODE 0/3/4/6
1194	.c5ff						reset16Colours:
1195	.c5ff		8e 20 03	stx $0320	                stx vduv.queueEnd-4          ;start with VDU19,15,15,_,_,_
1196	.c602						-
1197	.c602		20 2c c6	jsr $c62c	                jsr vdu19EntryPoint
1198	.c605		ce 20 03	dec $0320	                dec vduv.queueEnd-4
1199	.c608		ce 1f 03	dec $031f	                dec vduv.queueEnd-5
1200	.c60b		10 f5		bpl $c602	                bpl -
1201	.c60d		60		rts		                rts

1203	.c60e						reset4Colours:
1204	.c60e		a2 07		ldx #$07	                ldx #$07
1205	.c610		8e 20 03	stx $0320	                stx vduv.queueEnd-4          ;start with VDU19,3,7,_,_,_
1206	.c613						-
1207	.c613		20 2c c6	jsr $c62c	                jsr vdu19EntryPoint          ;2,3, then 1,1, then 0,0
1208	.c616		4e 20 03	lsr $0320	                lsr vduv.queueEnd-4
1209	.c619		ce 1f 03	dec $031f	                dec vduv.queueEnd-5
1210	.c61c		10 f5		bpl $c613	                bpl -
1211	.c61e		60		rts		                rts

1213	.c61f						reset2Colours:
1214	.c61f		a2 07		ldx #$07	                ldx #$07
1215	.c621		20 29 c6	jsr $c629	                jsr +                        ;VDU19,1,7,_,_,_
1216	.c624		a2 00		ldx #$00	                ldx #$00
1217	.c626		9c 1f 03	stz $031f	                stz vduv.queueEnd-5          ;VDU19,0,0,_,_,_
1218	.c629						+
1219	.c629		8e 20 03	stx $0320	                stx vduv.queueEnd-4          ;VDU19,N,X,_,_,_

1221							                ; fall through to VDU19

1223							;-------------------------------------------------------------------------
1224							;
1225							; VDU 19 (&13) Define logical colour [MasRef E.3-9]
1226							;
1227	.c62c						vdu19EntryPoint:
1228	.c62c		08		php		                php
1229	.c62d		78		sei		                sei
1230	.c62e		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get logical colour
1231	.c631		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne ;apply logical colour limit
1232	.c634		aa		tax		                tax                        ;X = clamped logical colour
1233	.c635		ad 20 03	lda $0320	                lda vduv.queueEnd-4        ;get physical colour
1234	.c638						LC639:
1235	.c638		29 0f		and #$0f	                and #$0F                     ;apply physical colour limit
1236	.c63a		9d 6f 03	sta $036f,x	                sta vduv.currentPalette,x    ;update palette
1237	.c63d		a8		tay		                tay                          ;Y = physical colour
1238	.c63e		ad 60 03	lda $0360	                lda vduv.numberOfLogicalColoursMinusOne
1239	.c641		85 fa		sta $fa		                sta SEIWKA
1240	.c643		c9 03		cmp #$03	                cmp #$03 ;Z=1 C=1 if 4 colour; Z=0 C=1 if 16 colour; Z=0 C=0 if 2 colour
1241	.c645		08		php		                php      ;save flags
1242	.c646		8a		txa		                txa                          ;A = logical colour

1244							                ;put the logical colour value in the top 1, 2 or 4
1245							                ;bits of SEIWKA, depending on the colour depth.
1246							                ;
1247							                ; 2 colours: turn %0000000a into %a0000000
1248							                ; 4 colours: turn %000000ab into %ab000000
1249							                ;16 colours: turn %0000abcd into %abcd0000
1250	.c647						-
1251	.c647		4a		lsr a		                lsr a
1252	.c648		66 fa		ror $fa		                ror SEIWKA
1253	.c64a		b0 fb		bcs $c647	                bcs -
1254	.c64c		06 fa		asl $fa		                asl SEIWKA

1256	.c64e		98		tya		                tya                          ;A = physical colour
1257	.c64f		05 fa		ora $fa		                ora SEIWKA                   ;mix in logical colour
1258	.c651		aa		tax		                tax                          ;X = VPALETTE value
1259	.c652		a0 f0		ldy #$f0	                ldy #$F0 ;counts up to zero - counter for setting
1260							                         ;multiple logical colours [AUG p380]
1261	.c654						LC655:
1262	.c654		28		plp		                plp                          ;restore flags
1263	.c655		08		php		                php                          ;save flags
1264	.c656		d0 03		bne $c65b	                bne +                     ;taken if 2 colour/16 colour
1265	.c658		20 6e c6	jsr $c66e	                jsr fixUpVPALETTEFor4Colours
1266	.c65b						+
1267	.c65b		20 e2 f1	jsr $f1e2	                jsr writeVPALETTE
1268	.c65e		18		clc		                clc
1269	.c65f		98		tya		                tya
1270	.c660		6d 60 03	adc $0360	                adc vduv.numberOfLogicalColoursMinusOne
1271	.c663		a8		tay		                tay
1272	.c664		8a		txa		                txa
1273	.c665		69 10		adc #$10	                adc #$10                     ;next logical colour
1274	.c667		aa		tax		                tax
1275	.c668		c8		iny		                iny                          ;Y+=numberOfLogicalColours
1276	.c669		d0 e9		bne $c654	                bne LC655                    ;all logical colours set once zero
1277	.c66b		28		plp		                plp
1278	.c66c		28		plp		                plp
1279	.c66d		60		rts		                rts

1281	.c66e						fixUpVPALETTEFor4Colours:
1282	.c66e		2a		rol a		                rol a                        ;A BCDabcd1
1283	.c66f		85 da		sta $da		                sta ZTEMP+0                  ;  BCDabcd1
1284	.c671		2a		rol a		                rol a                        ;B CDabcd1A
1285	.c672		2a		rol a		                rol a                        ;C Dabcd1AB
1286	.c673		08		php		                php                          ;C
1287	.c674		26 da		rol $da		                rol ZTEMP+0                  ;B CDabcd1C
1288	.c676		6a		ror a		                ror a                        ;B BDabcd1A
1289	.c677		28		plp		                plp                          ;C BDabcd1A
1290	.c678		6a		ror a		                ror a                        ;A CBDabcd1
1291	.c679		6a		ror a		                ror a                        ;1 ACBDabcd
1292	.c67a		60		rts		                rts                          ;

1294							;-------------------------------------------------------------------------
1295							;
1296							; VDU 23 (&17) Various functions [MasRef E.3-12]
1297							;
1298	.c67b						vdu23EntryPoint:
1299	.c67b		ad 1b 03	lda $031b	                lda vduv.queueEnd-9           ;get VDU 23 code
1300	.c67e		c9 20		cmp #$20	                cmp #$20
1301	.c680		90 0e		bcc $c690	                bcc LC691         ;branch taken if <32 - i.e., special

1303							                ; copy the 8 bytes of character definition to the
1304							                ; appropriate place.
1305	.c682		20 38 e2	jsr $e238	                jsr getSoftCharacterDefinitionAddress
1306	.c685		a0 07		ldy #$07	                ldy #$07
1307	.c687						LC688:
1308	.c687		b9 1c 03	lda $031c,y	                lda vduv.queueEnd-8,y
1309	.c68a		91 de		sta ($de),y	                sta ($DE),y
1310	.c68c		88		dey		                dey
1311	.c68d		10 f8		bpl $c687	                bpl LC688
1312	.c68f		60		rts		                rts

1314	.c690						LC691:
1315	.c690		0a		asl a		                asl a
1316	.c691		aa		tax		                tax
1317	.c692		4a		lsr a		                lsr a
1318	.c693		c9 11		cmp #$11	                cmp #$11
1319	.c695		b0 0f		bcs $c6a6	                bcs callVDUV    ;call with C=1 - invalid code [MasRef
1320							                                ;E.3-19]
1321	.c697		7c 75 e0	jmp ($e075,x)	                jmp (vdu23EntryPointTable,x)

1323							;-------------------------------------------------------------------------
1324							;
1325							; VDU 25 (&19) PLOT commands [MasRef E.3-21]
1326							;
1327	.c69a						vdu25EntryPoint:
1328	.c69a		ae 61 03	ldx $0361	                ldx vduv.pixelsPerByteMinusOne
1329	.c69d		f0 03		beq $c6a2	                beq callVDUVForPLOT          ;non-graphics PLOT
1330	.c69f		4c 45 d1	jmp $d145	                jmp handlePLOT

1332							;-------------------------------------------------------------------------
1333							;
1334							; Call VDUV for a PLOT call, either to handle non-graphics PLOT
1335							; [MasRef E.3-21] or PLOT 240-255 [MasRef E.3-34].
1336							;
1337	.c6a2						callVDUVForPLOT:
1338	.c6a2		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT code
1339	.c6a5		18		clc		                clc ;call with C=0 - non-graphics PLOT [MasRef E.3-21]

1341							;-------------------------------------------------------------------------
1342							;
1343							; Call VDUV.
1344							;
1345	.c6a6						callVDUV:
1346							                .if version<350
1348							                .else
1349	.c6a6		4c ef e2	jmp $e2ef	                jmp LE2F3
1350							                .endif

1352							;-------------------------------------------------------------------------
1353							;
1354							; VDU 26 (&1A) Restore default windows [MasRef E.3-34]
1355							;
1356	.c6a9						vdu26EntryPoint:
1357	.c6a9		a2 2c		ldx #$2c	                ldx #VDUVariables.workspace._2C
1358	.c6ab						-
1359	.c6ab		9e 00 03	stz $0300,x	                stz vduv,x                    ;reset workspace
1360	.c6ae		ca		dex		                dex
1361	.c6af		10 fa		bpl $c6ab	                bpl -

1363	.c6b1		20 ae e2	jsr $e2ae	                jsr getDefaultBoundsForCurrentScreenMODE
1364	.c6b4		8e 0a 03	stx $030a	                stx vduv.textWindowRight
1365	.c6b7		8c 09 03	sty $0309	                sty vduv.textWindowBottom

1367	.c6ba		8a		txa		                txa
1368	.c6bb		20 7f c7	jsr $c77f	                jsr setTextWindowWidthInBytes

1370							                ; Set up the VDU queue as if VDU 24,0;0;1279;1023;,
1371							                ; then call the VDU 24 entry point.

1373							                ; 1c - ll - $00
1374							                ; 1d - lh - $00
1375							                ; 1e - tl - $00
1376							                ; 1f - th - $00
1377							                ; 20 - rl - $ff
1378							                ; 21 - rh - $04
1379							                ; 22 - tl - $ff
1380							                ; 23 - th - $03

1382	.c6be		a0 03		ldy #$03	                ldy #$03
1383	.c6c0		8c 23 03	sty $0323	                sty $0323
1384	.c6c3		c8		iny		                iny
1385	.c6c4		8c 21 03	sty $0321	                sty $0321
1386	.c6c7		ce 22 03	dec $0322	                dec $0322
1387	.c6ca		ce 20 03	dec $0320	                dec $0320
1388	.c6cd		20 1e c7	jsr $c71e	                jsr vdu24EntryPoint

1390	.c6d0		a9 08		lda #$08	                lda #STATE.isTextWindow
1391	.c6d2		14 d0		trb $d0		                trb STATE                    ;reset isTextWindow

1393	.c6d4		4c 7b c4	jmp $c47b	                jmp vdu30EntryPoint          ;reset text cursor

1395							;-------------------------------------------------------------------------
1396							;
1397							; Update CRTC cursor address to reflect text cursor position.
1398							;
1399	.c6d7						updateCRTCTextCursor:
1400	.c6d7		20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
1401	.c6da		80 10		bra $c6ec	                bra updateCRTCCursorAddress

1403							;-------------------------------------------------------------------------

1405	.c6dc						setCRTCCursorAddress:
1406	.c6dc		8e 4a 03	stx $034a	                stx vduv.textCursorCRTCAddress+0
1407	.c6df		8d 4b 03	sta $034b	                sta vduv.textCursorCRTCAddress+1
1408	.c6e2		10 04		bpl $c6e8	                bpl +
1409	.c6e4		38		sec		                sec
1410	.c6e5		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte
1411	.c6e8						+
1412	.c6e8		86 d8		stx $d8		                stx ZMEMT+0
1413	.c6ea		85 d9		sta $d9		                sta ZMEMT+1

1415							;-------------------------------------------------------------------------
1416							;
1417							;
1418	.c6ec						updateCRTCCursorAddress:
1419	.c6ec		ae 4a 03	ldx $034a	                ldx vduv.textCursorCRTCAddress+0
1420	.c6ef		ad 4b 03	lda $034b	                lda vduv.textCursorCRTCAddress+1
1421	.c6f2		a0 0e		ldy #$0e	                ldy #$0E

1423							;-------------------------------------------------------------------------
1424							;
1425							; Set CRTC address - cursor, or screen start.
1426							;
1427							; entry:
1428							;
1429							; A (msb), X (msb) = 6502 address to set
1430							;
1431							; Y = first CRTC register to set
1432							;
1433	.c6f4						setCRTCAddress:
1434	.c6f4		48		pha		                pha                          ;save screen address MSB
1435	.c6f5		ad 55 03	lda $0355	                lda vduv.currentScreenMODE
1436	.c6f8		c9 07		cmp #$07	                cmp #$07
1437	.c6fa		68		pla		                pla                        ;restore screen address MSB
1438	.c6fb		b0 0f		bcs $c70c	                bcs adjustAddressForMODE7
1439	.c6fd		86 da		stx $da		                stx ZTEMP+0
1440	.c6ff		4a		lsr a		                lsr a
1441	.c700		66 da		ror $da		                ror ZTEMP+0                  ;/2
1442	.c702		4a		lsr a		                lsr a
1443	.c703		66 da		ror $da		                ror ZTEMP+0                  ;/4
1444	.c705		4a		lsr a		                lsr a
1445	.c706		66 da		ror $da		                ror ZTEMP+0                  ;/8
1446	.c708		a6 da		ldx $da		                ldx ZTEMP+0
1447	.c70a		80 04		bra $c710	                bra setCRTCAddressRegisters

1449	.c70c						adjustAddressForMODE7:
1450							                ; C=1
1451	.c70c		e9 74		sbc #$74	                sbc #$74                 ;adjust for Mode 7 addressing
1452	.c70e		49 20		eor #$20	                eor #$20                 ;adjust for Mode 7 addressing
1453	.c710						setCRTCAddressRegisters:
1454	.c710		8c 00 fe	sty $fe00	                sty CRTC+0
1455	.c713		8d 01 fe	sta $fe01	                sta CRTC+1
1456	.c716		c8		iny		                iny
1457	.c717		8c 00 fe	sty $fe00	                sty CRTC+0
1458	.c71a		8e 01 fe	stx $fe01	                stx CRTC+1
1459	.c71d		60		rts		                rts

1461							;-------------------------------------------------------------------------
1462							;
1463							; VDU 24 (&18) Define graphics window [MasRef E.3-21]
1464							;
1465							; VDU queue:
1466							;
1467							; -8 = <left
1468							; -7 = >left
1469							; -6 = <bottom
1470							; -5 = >bottom
1471							; -4 = <right
1472							; -3 = >right
1473							; -2 = <top
1474							; -1 = >top
1475							;
1476	.c71e						vdu24EntryPoint:
1477	.c71e		20 78 c7	jsr $c778	                jsr LC779

1479	.c721		a2 02		ldx #$02	                ldx #2
1480	.c723						-
1481	.c723		38		sec		                sec

1483							                ; <height when X=2, then <width when X=0
1484	.c724		bd 20 03	lda $0320,x	                lda vduv.queueEnd-4+0,x
1485	.c727		fd 1c 03	sbc $031c,x	                sbc vduv.queueEnd-8+0,x
1486	.c72a		9d 2c 03	sta $032c,x	                sta vduv.workspace._2C+0,x

1488							                ; >height when X=2, then >width when X=0
1489	.c72d		bd 21 03	lda $0321,x	                lda vduv.queueEnd-4+1,x
1490	.c730		fd 1d 03	sbc $031d,x	                sbc vduv.queueEnd-8+1,x
1491	.c733		9d 2d 03	sta $032d,x	                sta vduv.workspace._2C+1,x

1493	.c736		ca		dex		                dex
1494	.c737		ca		dex		                dex
1495	.c738		10 e9		bpl $c723	                bpl -

1497	.c73a		0d 2f 03	ora $032f	                ora vduv.workspace._2C+3     ;A=>width|>height
1498	.c73d		30 39		bmi $c778	                bmi LC779 ;taken if either dimension negative - window invalid
1499	.c73f		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4 ;left bottom
1500	.c741		20 dd d1	jsr $d1dd	                jsr eigabsEntryPoint         ;convert to pixels
1501	.c744		a2 1c		ldx #$1c	                ldx #VDUVariables.queueEnd-8 ;right top
1502	.c746		20 dd d1	jsr $d1dd	                jsr eigabsEntryPoint         ;convert to pixels
1503	.c749		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;>bottom
1504	.c74c		0d 1d 03	ora $031d	                ora vduv.queueEnd-7          ;>left
1505	.c74f		30 27		bmi $c778	                bmi LC779 ;taken if either bottom or left negative - window invalid
1506	.c751		ad 23 03	lda $0323	                lda vduv.queueEnd-1          ;>top
1507	.c754		d0 22		bne $c778	                bne LC779          ;taken if top>=256 - window invalid
1508	.c756		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
1509	.c759		ad 21 03	lda $0321	                lda vduv.queueEnd-3          ;>right
1510	.c75c		85 da		sta $da		                sta ZTEMP+0
1511	.c75e		ad 20 03	lda $0320	                lda vduv.queueEnd-4          ;<right
1512	.c761		46 da		lsr $da		                lsr ZTEMP+0                  ;>(right/2)
1513	.c763		6a		ror a		                ror a                        ;<(right/2)
1514	.c764		46 da		lsr $da		                lsr ZTEMP+0                  ;>(right/4)

1516							                ; 639>>2=159 - so any valid pixel X in any mode will
1517							                ; have an MSB of 0 after being shifted right 2.
1518	.c766		d0 10		bne $c778	                bne LC779 ;taken if right edge definitely off screen - window invalid
1519	.c768		6a		ror a		                ror a     ;<(right/4)
1520	.c769		4a		lsr a		                lsr a     ;<(right/8)
1521	.c76a		dd 15 e1	cmp $e115,x	                cmp modeMaxColumn,x
1522	.c76d		f0 02		beq $c771	                beq LC772                    ;taken if right edge just on screen
1523	.c76f		10 07		bpl $c778	                bpl LC779 ;taken if right edge off screen - window definitely invalid
1524	.c771						LC772:
1525	.c771		a0 00		ldy #$00	                ldy #VDUVariables.graphicsWindowPixelsLeft
1526	.c773		a2 1c		ldx #$1c	                ldx #VDUVariables.queueEnd-8
1527	.c775		20 04 c9	jsr $c904	                jsr copyEightBytesWithinVDUVariables
1528	.c778						LC779:
1529	.c778		a2 10		ldx #$10	                ldx #VDUVariables.graphicsCursorPositionX
1530	.c77a		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
1531	.c77c		4c c6 e2	jmp $e2c6	                jmp exchangeFourVDUBytes

1533							;-------------------------------------------------------------------------
1534							;
1535							; Call getBytesPerInclusiveTextRow, and store the result in the
1536							; textWindowWidthInBytes VDU variable.
1537							;
1538	.c77f						setTextWindowWidthInBytes:
1539	.c77f		20 3b c9	jsr $c93b	                jsr getBytesPerInclusiveTextRow
1540	.c782		8d 4c 03	sta $034c	                sta vduv.textWindowWidthInBytes+0
1541	.c785		8e 4d 03	stx $034d	                stx vduv.textWindowWidthInBytes+1
1542	.c788		60		rts		                rts

1544							;-------------------------------------------------------------------------
1545							;
1546							; VDU 29 (&1D) Define graphics origin [MasRef E.3-35]
1547							;
1548	.c789						vdu29EntryPoint:
1549	.c789		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
1550	.c78b		a0 0c		ldy #$0c	                ldy #VDUVariables.graphicsWindowOriginX
1551	.c78d		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
1552	.c790		4c de c4	jmp $c4de	                jmp LC4DF

1554							;-------------------------------------------------------------------------
1555							;
1556							; VDU 22 (&16) Select screen mode [MasRef E.3-11]
1557							;
1558	.c793						vdu22EntryPoint:
1559	.c793		ad 23 03	lda $0323	                lda vduv.queueEnd-1          ;get MODE number
1560	.c796		80 26		bra $c7be	                bra setMODE

1562							;-------------------------------------------------------------------------
1563							;
1564	.c798						setStartupMODE:
1565							                .if version==350
1566	.c798		20 6a f3	jsr $f36a	                jsr callWithTST
1567							                .endif
1568	.c79b		85 da		sta $da		                sta ZTEMP+0                  ;save MODE
1569	.c79d		a5 f4		lda $f4		                lda $F4
1570	.c79f		48		pha		                pha
1571	.c7a0		09 80		ora #$80	                ora #$80                     ;page in ANDY
1572	.c7a2		20 6a e5	jsr $e56a	                jsr selectROMA
1573	.c7a5		20 ac c7	jsr $c7ac	                jsr +
1574	.c7a8		68		pla		                pla
1575	.c7a9		4c 6a e5	jmp $e56a	                jmp selectROMA               ;restore old ROM

1577	.c7ac						+
1578							                ; TODO but what of the reserved byte here?
1579	.c7ac		a2 7f		ldx #$7f	                ldx #size(VDUVariables)-1
1580	.c7ae		64 d0		stz $d0		                stz STATE
1581	.c7b0		ad 66 03	lda $0366	                lda vduv.cursorFlags
1582	.c7b3						-
1583	.c7b3		9e ff 02	stz $02ff,x	                stz vduv-1,x
1584	.c7b6		ca		dex		                dex
1585	.c7b7		d0 fa		bne $c7b3	                bne -
1586	.c7b9		8d 66 03	sta $0366	                sta vduv.cursorFlags
1587	.c7bc		a5 da		lda $da		                lda ZTEMP                    ;restore MODE

1589							                ; fall through to setMODE

1591							;-------------------------------------------------------------------------
1592							;
1593							;
1594							;
1595	.c7be						setMODE:
1596	.c7be		9c 8a 02	stz $028a	                stz vduDriverMemory
1597	.c7c1		9c 8b 02	stz $028b	                stz displayMemory
1598	.c7c4		a8		tay		                tay                          ;Y=mode
1599	.c7c5		30 10		bmi $c7d7	                bmi setShadowMODE
1600	.c7c7		ae 7f 02	ldx $027f	                ldx shadowRAMState
1601	.c7ca		f0 0b		beq $c7d7	                beq setShadowMODE
1602	.c7cc		a9 10		lda #$10	                lda #STATE.isShadowMode
1603	.c7ce		14 d0		trb $d0		                trb STATE
1604	.c7d0		a9 03		lda #$03	                lda #ACCCON.D|ACCCON.E
1605	.c7d2		1c 34 fe	trb $fe34	                trb ACCCON ;display main RAM, VDU code accesses main RAM
1606	.c7d5		80 09		bra $c7e0	                bra +

1608	.c7d7						setShadowMODE:
1609	.c7d7		a9 10		lda #$10	                lda #STATE.isShadowMode
1610	.c7d9		04 d0		tsb $d0		                tsb STATE
1611	.c7db		a9 03		lda #$03	                lda #ACCCON.D|ACCCON.E
1612	.c7dd		0c 34 fe	tsb $fe34	                tsb ACCCON ;display shadow RAM, VDU code accesses shadow RAM
1613	.c7e0						+
1614	.c7e0		98		tya		                tya                          ;A=mode
1615	.c7e1		29 07		and #$07	                and #$07                     ;get MODE 0-7
1616	.c7e3		aa		tax		                tax                          ;X=MODE 0-7
1617	.c7e4		8e 55 03	stx $0355	                stx vduv.currentScreenMODE
1618	.c7e7		bd 48 e1	lda $e148,x	                lda numberOfLogicalColoursMinusOneForMODE,x
1619	.c7ea		8d 60 03	sta $0360	                sta vduv.numberOfLogicalColoursMinusOne
1620	.c7ed		bd 25 e1	lda $e125,x	                lda bytesPerCharacterForMODE,x
1621	.c7f0		8d 4f 03	sta $034f	                sta vduv.bytesPerCharacter
1622	.c7f3		bd 6e e1	lda $e16e,x	                lda pixelsPerByteMinusOneForMODE,x
1623	.c7f6		8d 61 03	sta $0361	                sta vduv.pixelsPerByteMinusOne
1624	.c7f9		d0 02		bne $c7fd	                bne +                        ;taken if graphics mode
1625	.c7fb		a9 07		lda #$07	                lda #$07                     ;assume 8 px/byte for non-graphics modes
1626	.c7fd						+
1627	.c7fd		0a		asl a		                asl a            ;convert to pixelMasks index for rightmost pixel
1628	.c7fe		a8		tay		                tay
1629	.c7ff		b9 3a e1	lda $e13a,y	                lda pixelMasks-1,y
1630	.c802		8d 63 03	sta $0363	                sta vduv.colourMaskRight
1631	.c805						-
1632	.c805		0a		asl a		                asl a
1633	.c806		10 fd		bpl $c805	                bpl -   ;keep shifting until leftmost pixel mask found
1634	.c808		8d 62 03	sta $0362	                sta vduv.colourMaskLeft
1635	.c80b		bc 74 e1	ldy $e174,x	                ldy screenMODEGroupForMODE,x
1636	.c80e		8c 56 03	sty $0356	                sty vduv.currentScreenMODEGroup
1637	.c811		b9 80 e1	lda $e180,y	                lda latchBit4ForScreenMODEGroup,y
1638	.c814		08		php		                php
1639	.c815		78		sei		                sei
1640	.c816		8d 40 fe	sta $fe40	                sta systemVIA.orb
1641	.c819		b9 7c e1	lda $e17c,y	                lda latchBit5ForScreenMODEGroup,y
1642	.c81c		8d 40 fe	sta $fe40	                sta systemVIA.orb
1643	.c81f		28		plp		                plp
1644	.c820		b9 85 e1	lda $e185,y	                lda screenSizeHighByteForScreenMODEGroup,y
1645	.c823		8d 54 03	sta $0354	                sta vduv.screenSizeHighByte
1646	.c826		b9 8a e1	lda $e18a,y	                lda startScreenAddressHighByteForScreenMODEGroup,y
1647	.c829		8d 4e 03	sta $034e	                sta vduv.startScreenAddressHighByte
1648	.c82c		a9 ee		lda #$ee	                lda #STATE.isVDU21|STATE.isCursorEditing|STATE.isVDU5|STATE.isTextWindow|STATE.isPagedScrolling|STATE.isScrollingDisabled
1649	.c82e		14 d0		trb $d0		                trb STATE
1650	.c830		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
1651	.c833		bd 1d e1	lda $e11d,x	                lda vcontrolForScreenMODE,x
1652	.c836		20 d1 f1	jsr $f1d1	                jsr setVCONTROL
1653	.c839		08		php		                php
1654	.c83a		78		sei		                sei
1655	.c83b		be 8f e1	ldx $e18f,y	                ldx crtcRegisterLastIndexForScreenMODEGroup,y
1656	.c83e		a0 0b		ldy #$0b	                ldy #$0B
1657	.c840						-
1658	.c840		bd 94 e1	lda $e194,x	                lda crtcRegisterValues,x
1659	.c843		20 00 cf	jsr $cf00	                jsr setCRTCRegister
1660	.c846		ca		dex		                dex
1661	.c847		88		dey		                dey
1662	.c848		10 f6		bpl $c840	                bpl -
1663	.c84a		28		plp		                plp
1664	.c84b		20 c4 c5	jsr $c5c4	                jsr vdu20EntryPoint
1665	.c84e		20 6c cf	jsr $cf6c	                jsr vdu23_11_EntryPoint
1666	.c851		a9 aa		lda #$aa	                lda #%10101010
1667	.c853		8d 67 03	sta $0367	                sta vduv.dotPattern
1668	.c856		8d 68 03	sta $0368	                sta vduv.dotPatternState
1669	.c859		20 a9 c6	jsr $c6a9	                jsr vdu26EntryPoint
1670	.c85c		ad 4c 03	lda $034c	                lda vduv.textWindowWidthInBytes+0
1671	.c85f		ae 4d 03	ldx $034d	                ldx vduv.textWindowWidthInBytes+1
1672	.c862		8d 52 03	sta $0352	                sta vduv.bytesPerCharacterRow+0
1673	.c865		8e 53 03	stx $0353	                stx vduv.bytesPerCharacterRow+1

1675							                ; Do a fast hardware CLS of the whole screen
1676							                ; ------------------------------------------
1677	.c868						clsFastPath:
1678	.c868		a2 00		ldx #$00	                ldx #$00
1679	.c86a		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
1680	.c86d		9c 50 03	stz $0350	                stz vduv.screenTopLeftAddress+0
1681	.c870		8d 51 03	sta $0351	                sta vduv.screenTopLeftAddress+1
1682	.c873		20 dc c6	jsr $c6dc	                jsr setCRTCCursorAddress
1683	.c876		a0 0c		ldy #$0c	                ldy #$0C
1684	.c878		20 10 c7	jsr $c710	                jsr setCRTCAddressRegisters
1685	.c87b		9c 69 02	stz $0269	                stz pagedModeCounter
1686	.c87e		38		sec		                sec
1687	.c87f		a9 80		lda #$80	                lda #$80
1688	.c881		ed 4e 03	sbc $034e	                sbc vduv.startScreenAddressHighByte
1689	.c884		aa		tax		                tax
1690	.c885		a0 00		ldy #$00	                ldy #$00
1691	.c887		20 84 cb	jsr $cb84	                jsr clearTextMemory
1692	.c88a		4c 7b c4	jmp $c47b	                jmp vdu30EntryPoint

1694	.c88d						LC88B:
1695	.c88d		20 d0 c8	jsr $c8d0	                jsr LC8CF                    ; Clear paged mode counter
1696	.c890						LC88E:
1697	.c890		20 b1 f1	jsr $f1b1	                jsr osbyte76    ; Call KEYV to test Shift & Ctrl keys
1698	.c893		90 02		bcc $c897	                bcc LC895                    ; Ctrl not pressed, exit loop
1699	.c895		30 f6		bmi $c88d	                bmi LC88B                    ; Shift pressed, loop back
1700	.c897						LC895:
1701	.c897		a5 d0		lda $d0		                lda STATE
1702	.c899		49 04		eor #$04	                eor #STATE.isPagedScrolling
1703	.c89b		29 46		and #$46	                and #STATE.isCursorEditing|STATE.isPagedScrolling|STATE.isScrollingDisabled;
1704	.c89d		d0 37		bne $c8d6	                bne LC8D6
1705	.c89f		20 d7 c8	jsr $c8d7	                jsr LC8D7
1706	.c8a2		b9 18 03	lda $0318,y	                lda vduv.textCursorXPosition,y
1707	.c8a5		dd 08 03	cmp $0308,x	                cmp vduv.textWindowLeft,x
1708	.c8a8		d0 29		bne $c8d3	                bne LC8D3
1709							                .if version==400||version==350
1710	.c8aa		c0 00		cpy #$00	                cpy #0
1715							                .endif
1716	.c8ac		d0 08		bne $c8b6	                bne LC8B5
1717	.c8ae		ad 0a 03	lda $030a	                lda vduv.textWindowRight
1718	.c8b1		ed 08 03	sbc $0308	                sbc vduv.textWindowLeft
1719	.c8b4		80 06		bra $c8bc	                bra LC8BB

1721	.c8b6						LC8B5:
1722	.c8b6		ad 09 03	lda $0309	                lda vduv.textWindowBottom
1723	.c8b9		ed 0b 03	sbc $030b	                sbc vduv.textWindowTop
1724	.c8bc						LC8BB:
1725	.c8bc		48		pha		                pha
1726	.c8bd		4a		lsr a		                lsr a
1727	.c8be		4a		lsr a		                lsr a
1728	.c8bf		85 da		sta $da		                sta ZTEMP+0
1729	.c8c1		38		sec		                sec
1730	.c8c2		68		pla		                pla
1731	.c8c3		e5 da		sbc $da		                sbc ZTEMP+0
1732	.c8c5		cd 69 02	cmp $0269	                cmp pagedModeCounter
1733	.c8c8		b0 09		bcs $c8d3	                bcs LC8D3
1734	.c8ca						LC8C9:
1735	.c8ca		20 b1 f1	jsr $f1b1	                jsr osbyte76
1736	.c8cd		38		sec		                sec
1737	.c8ce		10 fa		bpl $c8ca	                bpl LC8C9

1739	.c8d0						LC8CF:
1740	.c8d0		9c 69 02	stz $0269	                stz pagedModeCounter        ; Clear paged mode counter
1741							                .if version!=400&&version!=350
1743							                .endif
1744	.c8d3						LC8D3:
1745	.c8d3		ee 69 02	inc $0269	                inc pagedModeCounter
1746	.c8d6						LC8D6:
1747	.c8d6		60		rts		                rts

1749	.c8d7						LC8D7:
1750	.c8d7		ad 66 03	lda $0366	                lda vduv.cursorFlags
1751	.c8da		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
1752	.c8dc		4a		lsr a		                lsr a                        ;xvh
1753	.c8dd		aa		tax		                tax
1754	.c8de		bd 10 e2	lda $e210,x	                lda LE204,x
1755	.c8e1		aa		tax		                tax
1756	.c8e2		29 01		and #$01	                and #$01
1757	.c8e4		a8		tay		                tay
1758	.c8e5		60		rts		                rts

1760							;-------------------------------------------------------------------------
1761							;
1762							; Prepare AABB based on the current graphics cursor and some other
1763							; coordinate.
1764							;
1765							; entry:
1766							;
1767							; X = VDU variable offset of other coordinate (4 bytes: X;Y;)
1768							;
1769							; exit:
1770							;
1771							; vduv.workspace._28 = minimum
1772							;
1773							; vduv.workspace._2c = maximum
1774							;
1775	.c8e6						prepareAABB:
1776	.c8e6		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixels
1777	.c8e8		20 b6 d5	jsr $d5b6	                jsr sortVDUVariableCoordinates
1778	.c8eb		5a		phy		                phy                          ;save greater Y
1779	.c8ec		da		phx		                phx                          ;save lesser Y
1780	.c8ed		20 cb d5	jsr $d5cb	                jsr sortVDUVariableWords     ;X=lesser X, Y=greater X
1781	.c8f0		68		pla		                pla                          ;A=lesser Y
1782	.c8f1		5a		phy		                phy                          ;save greater X
1783	.c8f2		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
1784	.c8f4		20 f9 c8	jsr $c8f9	                jsr +
1785	.c8f7		fa		plx		                plx                          ;X=greater X
1786	.c8f8		68		pla		                pla                          ;A=greater Y
1787	.c8f9						+
1788							                ; Copy VDU variable word +X to VDU variable word+Y.
1789							                ; Then cropy VDU variable word +A+2 to VDU variable
1790							                ; word+Y+2. Return with updated Y.
1791	.c8f9		48		pha		                pha
1792	.c8fa		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
1793	.c8fd		fa		plx		                plx
1794	.c8fe		e8		inx		                inx
1795	.c8ff		e8		inx		                inx
1796	.c900		80 0a		bra $c90c	                bra copyTwoBytesWithinVDUVariables

1798							;-------------------------------------------------------------------------
1799							;
1800							; Copy 8 bytes to workspace 28 in the VDU variables.
1801							;
1802							; entry:
1803							;
1804							; X = source offset
1805							;
1806	.c902						copyEightBytesToWorkspace28:
1807	.c902		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28

1809							;-------------------------------------------------------------------------
1810							;
1811							; Copy 8 bytes in the VDU variables.
1812							;
1813							; entry:
1814							;
1815							; X = source offset
1816							;
1817							; Y = dest offset
1818							;
1819	.c904						copyEightBytesWithinVDUVariables:
1820	.c904		a9 08		lda #$08	                lda #$08
1821	.c906		80 18		bra $c920	                bra copyABytesWithinVDUVariables

1823							;-------------------------------------------------------------------------
1824							;
1825							; copyTextWindowWidthInBytesToWorkspace28
1826	.c908						copyTextWindowWidthInBytesToWorkspace28:
1827	.c908		a2 4c		ldx #$4c	                ldx #VDUVariables.textWindowWidthInBytes
1828	.c90a		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28

1830							;-------------------------------------------------------------------------
1831							;
1832							;
1833	.c90c						copyTwoBytesWithinVDUVariables:
1834	.c90c		a9 02		lda #$02	                lda #$02
1835	.c90e		80 10		bra $c920	                bra copyABytesWithinVDUVariables

1837							;-------------------------------------------------------------------------
1838							;
1839							; Copy text window info to workspace2C.
1840							;
1841	.c910						copyTextWindowToWorkspace2C:
1842	.c910		a2 08		ldx #$08	                ldx #VDUVariables.textWindowLeft
1843	.c912		a0 2c		ldy #$2c	                ldy #VDUVariables.workspace._2C
1844	.c914		80 08		bra $c91e	                bra copyFourBytesWithinVDUVariables

1846							;-------------------------------------------------------------------------
1847							;
1848							; Copy last 4 bytes of VDU queue somewhere.
1849							;
1850	.c916						copyLastFourVDUQueueBytes:
1851	.c916		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
1852	.c918		80 04		bra $c91e	                bra copyFourBytesWithinVDUVariables

1854							;-------------------------------------------------------------------------
1855							;
1856							; Copy old graphics cursor position to current graphics cursor position.
1857							;
1858	.c91a						copyGraphicsCursorPixelsToOldGraphicsCursorPixels:
1859	.c91a		a0 14		ldy #$14	                ldy #VDUVariables.oldGraphicsCursorPixelsX

1861							;-------------------------------------------------------------------------
1862							;
1863							; Copy the graphics cursor position somewhere.
1864							;
1865	.c91c						copyGraphicsCursorPixels:
1866	.c91c		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX

1868							;-------------------------------------------------------------------------
1869							;
1870							; Copy 4 bytes in the VDU variables.
1871							;
1872							; entry:
1873							;
1874							; X = source offset
1875							;
1876							; Y = dest offset
1877							;
1878	.c91e						copyFourBytesWithinVDUVariables:
1879	.c91e		a9 04		lda #$04	                lda #$04

1881							                ; fall through to copyABytesWithinVDUVariables

1883							;-------------------------------------------------------------------------
1884							;
1885							; Copy some bytes in the VDU variables.
1886							;
1887							; entry:
1888							;
1889							; A = number of bytes
1890							;
1891							; X = source offset
1892							;
1893							; Y = dest offset
1894							;
1895							; exit:
1896							;
1897							; X = updated source offset
1898							;
1899							; Y = updated dest offset
1900							;
1901	.c920						copyABytesWithinVDUVariables:
1902	.c920		48		pha		                pha
1903	.c921		bd 00 03	lda $0300,x	                lda vduv,x
1904	.c924		99 00 03	sta $0300,y	                sta vduv,y
1905	.c927		e8		inx		                inx
1906	.c928		c8		iny		                iny
1907	.c929		68		pla		                pla
1908	.c92a		3a		dec a		                dec a
1909	.c92b		d0 f3		bne $c920	                bne copyABytesWithinVDUVariables
1910	.c92d		60		rts		                rts

1912							;-------------------------------------------------------------------------
1913							;
1914							; Negate a 16-bit value stored in Y/A
1915							;
1916							; entry:
1917							;
1918							; Y (LSB), A (MSB) = value
1919							;
1920							; exit:
1921							;
1922							; Y (LSB), A (MSB) = -value
1923							;
1924	.c92e						negateAY:
1925	.c92e		48		pha		                pha
1926	.c92f		98		tya		                tya
1927	.c930		49 ff		eor #$ff	                eor #$FF
1928	.c932		a8		tay		                tay
1929	.c933		68		pla		                pla
1930	.c934		49 ff		eor #$ff	                eor #$FF
1931	.c936		c8		iny		                iny
1932	.c937		d0 01		bne $c93a	                bne +
1933	.c939		1a		inc a		                inc a
1934	.c93a						+
1935	.c93a		60		rts		                rts

1937							;-------------------------------------------------------------------------
1938							;
1939							; Multiply a text window width by the number of bytes per char. There
1940							; are inclusive and exclusive versions, depending on how the width was
1941							; calculated.
1942							;
1943							; entry:
1944							;
1945							; A = value-1 to multiply (inclusive), value to multiply (exclusive)
1946							;
1947							; exit:
1948							;
1949							; A (lsb), X (msb) = value*vduv.bytesPerCharacter
1950							;
1951	.c93b						getBytesPerInclusiveTextRow:
1952	.c93b		1a		inc a		                inc a
1953	.c93c						getBytesPerExclusiveTextRow:
1954	.c93c		85 da		sta $da		                sta $DA
1955	.c93e		64 db		stz $db		                stz $DB
1956	.c940		ad 4f 03	lda $034f	                lda vduv.bytesPerCharacter    ;A=1/8/16/32
1957	.c943						-
1958	.c943		4a		lsr a		                lsr a
1959	.c944		b0 06		bcs $c94c	                bcs +                     ;taken when multiply is done
1960	.c946		06 da		asl $da		                asl $DA              ;shift size LSB
1961	.c948		26 db		rol $db		                rol $DB              ;carry into size MSB
1962	.c94a		80 f7		bra $c943	                bra -

1964	.c94c						+
1965	.c94c		a5 da		lda $da		                lda $DA
1966	.c94e		a6 db		ldx $db		                ldx $DB
1967	.c950		60		rts		                rts

1969							;-------------------------------------------------------------------------
1970							;
1971							;
1972	.c951						prepareForPlotBackground:
1973	.c951		a2 08		ldx #$08	                ldx #$08                     ;plot background
1974	.c953		8e 59 03	stx $0359	                stx vduv.graphicsPlotState
1975	.c956		ad 5c 03	lda $035c	                lda vduv.backgroundGCOLMode
1976	.c959		29 0f		and #$0f	                and #$0F
1977	.c95b		8d 5a 03	sta $035a	                sta vduv.graphicsPlotMode
1978	.c95e		60		rts		                rts

1980							;-------------------------------------------------------------------------

1982	.c95f						LC95F:
1983	.c95f		a9 00		lda #$00	                lda #$00
1984	.c961		48		pha		                pha
1985	.c962		48		pha		                pha
1986	.c963		ae 2a 03	ldx $032a	                ldx $032A
1987	.c966		20 7d cc	jsr $cc7d	                jsr LCC7D
1988	.c969		80 14		bra $c97f	                bra LC97F

1990	.c96b						LC96B:
1991	.c96b		38		sec		                sec
1992	.c96c		ad 4f 03	lda $034f	                lda $034F
1993	.c96f		ed 2a 03	sbc $032a	                sbc $032A
1994	.c972		48		pha		                pha
1995	.c973		20 ae e2	jsr $e2ae	                jsr getDefaultBoundsForCurrentScreenMODE
1996	.c976		da		phx		                phx
1997	.c977		a9 00		lda #$00	                lda #$00
1998	.c979		ae 2a 03	ldx $032a	                ldx $032A
1999	.c97c		20 5d cc	jsr $cc5d	                jsr LCC5D
2000	.c97f						LC97F:
2001							                ; scroll left/right
2002	.c97f		8e 50 03	stx $0350	                stx vduv.screenTopLeftAddress+0
2003	.c982		8d 51 03	sta $0351	                sta vduv.screenTopLeftAddress+1
2004	.c985		fa		plx		                plx
2005	.c986		a0 00		ldy #$00	                ldy #$00
2006	.c988		20 b0 cc	jsr $ccb0	                jsr getAddressForTextPosition
2007	.c98b		fa		plx		                plx
2008	.c98c		a9 00		lda #$00	                lda #$00
2009	.c98e		20 5d cc	jsr $cc5d	                jsr LCC5D
2010	.c991		86 d8		stx $d8		                stx ZMEMT+0
2011	.c993		85 d9		sta $d9		                sta ZMEMT+1
2012	.c995		20 ae e2	jsr $e2ae	                jsr getDefaultBoundsForCurrentScreenMODE
2013	.c998		20 ae ca	jsr $caae	                jsr LCAAE
2014	.c99b		80 1b		bra $c9b8	                bra LC9B8

2016	.c99d						LC99D:
2017	.c99d		a0 00		ldy #$00	                ldy #$00
2018	.c99f		20 77 cc	jsr $cc77	                jsr LCC77
2019	.c9a2		80 06		bra $c9aa	                bra LC9AA

2021	.c9a4						LC9A4:
2022	.c9a4		20 ae e2	jsr $e2ae	                jsr getDefaultBoundsForCurrentScreenMODE
2023	.c9a7		20 57 cc	jsr $cc57	                jsr LCC57
2024	.c9aa						LC9AA:
2025	.c9aa		8e 50 03	stx $0350	                stx vduv.screenTopLeftAddress+0
2026	.c9ad		8d 51 03	sta $0351	                sta vduv.screenTopLeftAddress+1
2027	.c9b0		a2 00		ldx #$00	                ldx #$00
2028	.c9b2		20 b0 cc	jsr $ccb0	                jsr getAddressForTextPosition
2029	.c9b5		20 e8 ca	jsr $cae8	                jsr LCAE8
2030	.c9b8						LC9B8:
2031	.c9b8		a0 0c		ldy #$0c	                ldy #$0C
2032	.c9ba		ad 51 03	lda $0351	                lda vduv.screenTopLeftAddress+1
2033	.c9bd		ae 50 03	ldx $0350	                ldx vduv.screenTopLeftAddress+0
2034	.c9c0		4c f4 c6	jmp $c6f4	                jmp setCRTCAddress

2036	.c9c3						LC9C3:
2037	.c9c3		20 a0 cc	jsr $cca0	                jsr LCCA0
2038	.c9c6						LC9C6:
2039	.c9c6		85 dd		sta $dd		                sta $DD
2040	.c9c8		86 dc		stx $dc		                stx $DC
2041	.c9ca		20 2c cc	jsr $cc2c	                jsr LCC2C
2042	.c9cd		ad 29 03	lda $0329	                lda $0329
2043	.c9d0		ae 28 03	ldx $0328	                ldx $0328
2044	.c9d3		20 5d cc	jsr $cc5d	                jsr LCC5D
2045	.c9d6		20 88 cc	jsr $cc88	                jsr LCC88
2046	.c9d9		86 d8		stx $d8		                stx ZMEMT+0
2047	.c9db		85 d9		sta $d9		                sta ZMEMT+1
2048	.c9dd		a9 00		lda #$00	                lda #$00
2049	.c9df		ae 2a 03	ldx $032a	                ldx $032A
2050	.c9e2		20 7d cc	jsr $cc7d	                jsr LCC7D
2051	.c9e5		20 88 cc	jsr $cc88	                jsr LCC88
2052	.c9e8		86 da		stx $da		                stx $DA
2053	.c9ea		85 db		sta $db		                sta $DB
2054	.c9ec		ac 28 03	ldy $0328	                ldy $0328
2055	.c9ef		ae 29 03	ldx $0329	                ldx $0329
2056	.c9f2		50 23		bvc $ca17	                bvc LCA17
2057	.c9f4		a4 e0		ldy $e0		                ldy $E0
2058	.c9f6		a6 e1		ldx $e1		                ldx $E1
2059	.c9f8		20 e7 cb	jsr $cbe7	                jsr LCBE7
2060	.c9fb		a4 e0		ldy $e0		                ldy $E0
2061	.c9fd		90 09		bcc $ca08	                bcc LCA08
2062	.c9ff		a2 80		ldx #$80	                ldx #$80
2063	.ca01		86 db		stx $db		                stx $DB
2064	.ca03		64 da		stz $da		                stz $DA
2065	.ca05		ac 2a 03	ldy $032a	                ldy $032A
2066	.ca08						LCA08:
2067	.ca08		a2 00		ldx #$00	                ldx #$00
2068	.ca0a		20 f3 cb	jsr $cbf3	                jsr LCBF3
2069	.ca0d		a2 80		ldx #$80	                ldx #$80
2070	.ca0f		86 d9		stx $d9		                stx ZMEMT+1
2071	.ca11		64 d8		stz $d8		                stz ZMEMT+0
2072	.ca13		a4 de		ldy $de		                ldy $DE
2073	.ca15		a6 df		ldx $df		                ldx $DF
2074	.ca17						LCA17:
2075	.ca17		20 e7 cb	jsr $cbe7	                jsr LCBE7
2076	.ca1a		20 97 cc	jsr $cc97	                jsr LCC97
2077	.ca1d		20 94 cc	jsr $cc94	                jsr LCC94
2078	.ca20		20 57 cc	jsr $cc57	                jsr LCC57
2079	.ca23		86 d8		stx $d8		                stx ZMEMT+0
2080	.ca25		85 d9		sta $d9		                sta ZMEMT+1
2081	.ca27		ce 2b 03	dec $032b	                dec $032B
2082	.ca2a		10 9a		bpl $c9c6	                bpl LC9C6
2083	.ca2c		60		rts		                rts

2085	.ca2d						LCA2D:
2086	.ca2d		20 a0 cc	jsr $cca0	                jsr LCCA0
2087	.ca30						LCA30:
2088	.ca30		20 2c cc	jsr $cc2c	                jsr LCC2C
2089	.ca33		a9 00		lda #$00	                lda #$00
2090	.ca35		ae 2a 03	ldx $032a	                ldx $032A
2091	.ca38		20 5d cc	jsr $cc5d	                jsr LCC5D
2092	.ca3b		86 da		stx $da		                stx $DA
2093	.ca3d		85 db		sta $db		                sta $DB
2094	.ca3f		20 57 cc	jsr $cc57	                jsr LCC57
2095	.ca42		86 dc		stx $dc		                stx $DC
2096	.ca44		85 dd		sta $dd		                sta $DD
2097	.ca46		ac 28 03	ldy $0328	                ldy $0328
2098	.ca49		ae 29 03	ldx $0329	                ldx $0329
2099	.ca4c		50 25		bvc $ca73	                bvc LCA73
2100	.ca4e		a4 de		ldy $de		                ldy $DE
2101	.ca50		a6 df		ldx $df		                ldx $DF
2102	.ca52		20 a8 cb	jsr $cba8	                jsr LCBA8
2103	.ca55		a4 de		ldy $de		                ldy $DE
2104	.ca57		90 0a		bcc $ca63	                bcc LCA63
2105	.ca59		ae 4e 03	ldx $034e	                ldx $034E
2106	.ca5c		86 db		stx $db		                stx $DB
2107	.ca5e		64 da		stz $da		                stz $DA
2108	.ca60		ac 2a 03	ldy $032a	                ldy $032A
2109	.ca63						LCA63:
2110	.ca63		a2 00		ldx #$00	                ldx #$00
2111	.ca65		20 b4 cb	jsr $cbb4	                jsr LCBB4
2112	.ca68		ae 4e 03	ldx $034e	                ldx $034E
2113	.ca6b		86 d9		stx $d9		                stx ZMEMT+1
2114	.ca6d		64 d8		stz $d8		                stz ZMEMT+0
2115	.ca6f		a4 e0		ldy $e0		                ldy $E0
2116	.ca71		a6 e1		ldx $e1		                ldx $E1
2117	.ca73						LCA73:
2118	.ca73		20 a8 cb	jsr $cba8	                jsr LCBA8
2119	.ca76		20 94 cc	jsr $cc94	                jsr LCC94
2120	.ca79		ce 2b 03	dec $032b	                dec $032B
2121	.ca7c		10 b2		bpl $ca30	                bpl LCA30
2122	.ca7e						LCA7E:
2123	.ca7e		60		rts		                rts

2125	.ca7f						LCA7F:
2126	.ca7f		86 dc		stx $dc		                stx $DC
2127	.ca81		aa		tax		                tax
2128	.ca82		38		sec		                sec
2129	.ca83		e5 dc		sbc $dc		                sbc $DC
2130	.ca85		f0 f7		beq $ca7e	                beq LCA7E
2131	.ca87		85 dd		sta $dd		                sta $DD
2132	.ca89		da		phx		                phx
2133	.ca8a		20 3c c9	jsr $c93c	                jsr getBytesPerExclusiveTextRow
2134	.ca8d		fa		plx		                plx
2135	.ca8e		ad 66 03	lda $0366	                lda $0366
2136	.ca91		89 08		bit #$08	                bit #$08
2137	.ca93		d0 0b		bne $caa0	                bne LCAA0
2138	.ca95		89 02		bit #$02	                bit #$02
2139	.ca97		20 ca cc	jsr $ccca	                jsr LCCCA
2140	.ca9a		a4 da		ldy $da		                ldy $DA
2141	.ca9c		a6 db		ldx $db		                ldx $DB
2142	.ca9e		80 2e		bra $cace	                bra LCACE

2144	.caa0						LCAA0:
2145	.caa0		89 04		bit #$04	                bit #$04
2146	.caa2		20 ca cc	jsr $ccca	                jsr LCCCA
2147	.caa5		ad 4f 03	lda $034f	                lda $034F
2148	.caa8		8d 2a 03	sta $032a	                sta $032A
2149	.caab		a4 dd		ldy $dd		                ldy $DD
2150	.caad		88		dey		                dey
2151	.caae						LCAAE:
2152	.caae		98		tya		                tya
2153	.caaf		f0 18		beq $cac9	                beq LCAC9
2154	.cab1		84 dc		sty $dc		                sty $DC
2155	.cab3						LCAB3:
2156	.cab3		20 57 cc	jsr $cc57	                jsr LCC57
2157	.cab6		86 da		stx $da		                stx $DA
2158	.cab8		85 db		sta $db		                sta $DB
2159	.caba		20 c9 ca	jsr $cac9	                jsr LCAC9
2160	.cabd		a6 da		ldx $da		                ldx $DA
2161	.cabf		86 d8		stx $d8		                stx ZMEMT+0
2162	.cac1		a5 db		lda $db		                lda $DB
2163	.cac3		85 d9		sta $d9		                sta ZMEMT+1
2164	.cac5		c6 dc		dec $dc		                dec $DC
2165	.cac7		d0 ea		bne $cab3	                bne LCAB3
2166	.cac9						LCAC9:
2167	.cac9		a2 00		ldx #$00	                ldx #$00
2168	.cacb		ac 2a 03	ldy $032a	                ldy $032A
2169	.cace						LCACE:
2170	.cace		ad 28 03	lda $0328	                lda $0328
2171	.cad1		48		pha		                pha
2172	.cad2		ad 29 03	lda $0329	                lda $0329
2173	.cad5		48		pha		                pha
2174	.cad6		8c 28 03	sty $0328	                sty $0328
2175	.cad9		8e 29 03	stx $0329	                stx $0329
2176	.cadc		20 e8 ca	jsr $cae8	                jsr LCAE8
2177	.cadf		68		pla		                pla
2178	.cae0		8d 29 03	sta $0329	                sta $0329
2179	.cae3		68		pla		                pla
2180	.cae4		8d 28 03	sta $0328	                sta $0328
2181	.cae7		60		rts		                rts

2183							;-------------------------------------------------------------------------

2185	.cae8						LCAE8:
2186	.cae8		a6 d8		ldx $d8		                ldx ZMEMT+0
2187	.caea		a5 d9		lda $d9		                lda ZMEMT+1
2188	.caec		20 2c cc	jsr $cc2c	                jsr LCC2C
2189	.caef		80 79		bra $cb6a	                bra LCB6A

2191							;-------------------------------------------------------------------------

2193	.caf1						LCAF1:
2194	.caf1		a2 77		ldx #$77	                ldx #<LCC77
2195	.caf3		a9 cc		lda #$cc	                lda #>LCC77
2196	.caf5		ac 2d 03	ldy $032d	                ldy $032D
2197	.caf8		80 07		bra $cb01	                bra LCB01

2199	.cafa						LCAFA:
2200	.cafa		a2 57		ldx #$57	                ldx #<LCC57
2201	.cafc		a9 cc		lda #$cc	                lda #>LCC57
2202	.cafe		ac 2f 03	ldy $032f	                ldy $032F
2203	.cb01						LCB01:
2204	.cb01		8e 5d 03	stx $035d	                stx $035D
2205	.cb04		8d 5e 03	sta $035e	                sta $035E
2206	.cb07		38		sec		                sec
2207	.cb08		ad 2d 03	lda $032d	                lda $032D
2208	.cb0b		ed 2f 03	sbc $032f	                sbc $032F
2209	.cb0e		8d 2b 03	sta $032b	                sta $032B
2210	.cb11		ae 2c 03	ldx $032c	                ldx $032C
2211	.cb14		20 b0 cc	jsr $ccb0	                jsr getAddressForTextPosition
2212	.cb17		85 dd		sta $dd		                sta $DD
2213	.cb19		86 dc		stx $dc		                stx $DC
2214	.cb1b		20 2c cc	jsr $cc2c	                jsr LCC2C
2215	.cb1e		ad 2b 03	lda $032b	                lda $032B
2216	.cb21		f0 47		beq $cb6a	                beq LCB6A
2217	.cb23						LCB23:
2218	.cb23		08		php		                php
2219	.cb24		20 24 c0	jsr $c024	                jsr LC024
2220	.cb27		86 da		stx $da		                stx $DA
2221	.cb29		85 db		sta $db		                sta $DB
2222	.cb2b		86 dc		stx $dc		                stx $DC
2223	.cb2d		85 dd		sta $dd		                sta $DD
2224	.cb2f		28		plp		                plp
2225	.cb30		50 1d		bvc $cb4f	                bvc LCB4F
2226	.cb32		b8		clv		                clv
2227	.cb33						LCB33:
2228	.cb33		a6 df		ldx $df		                ldx $DF
2229	.cb35		a4 de		ldy $de		                ldy $DE
2230	.cb37		20 b4 cb	jsr $cbb4	                jsr LCBB4
2231	.cb3a		ad 4e 03	lda $034e	                lda $034E
2232	.cb3d		70 06		bvs $cb45	                bvs LCB45
2233	.cb3f		85 d9		sta $d9		                sta ZMEMT+1
2234	.cb41		64 d8		stz $d8		                stz ZMEMT+0
2235	.cb43		80 04		bra $cb49	                bra LCB49

2237	.cb45						LCB45:
2238	.cb45		85 db		sta $db		                sta $DB
2239	.cb47		64 da		stz $da		                stz $DA
2240	.cb49						LCB49:
2241	.cb49		a6 e1		ldx $e1		                ldx $E1
2242	.cb4b		a4 e0		ldy $e0		                ldy $E0
2243	.cb4d		80 0b		bra $cb5a	                bra LCB5A

2245	.cb4f						LCB4F:
2246	.cb4f		20 2c cc	jsr $cc2c	                jsr LCC2C
2247	.cb52		70 df		bvs $cb33	                bvs LCB33
2248	.cb54		ae 29 03	ldx $0329	                ldx $0329
2249	.cb57		ac 28 03	ldy $0328	                ldy $0328
2250	.cb5a						LCB5A:
2251	.cb5a		20 b4 cb	jsr $cbb4	                jsr LCBB4
2252	.cb5d		a6 dc		ldx $dc		                ldx $DC
2253	.cb5f		86 d8		stx $d8		                stx ZMEMT+0
2254	.cb61		a5 dd		lda $dd		                lda $DD
2255	.cb63		85 d9		sta $d9		                sta ZMEMT+1
2256	.cb65		ce 2b 03	dec $032b	                dec $032B
2257	.cb68		d0 b9		bne $cb23	                bne LCB23
2258	.cb6a						LCB6A:
2259	.cb6a		ae 29 03	ldx $0329	                ldx $0329
2260	.cb6d		ac 28 03	ldy $0328	                ldy $0328
2261	.cb70		50 12		bvc $cb84	                bvc clearTextMemory
2262	.cb72		a6 df		ldx $df		                ldx $DF
2263	.cb74		a4 de		ldy $de		                ldy $DE
2264	.cb76		20 84 cb	jsr $cb84	                jsr clearTextMemory
2265	.cb79		ad 4e 03	lda $034e	                lda $034E
2266	.cb7c		85 d9		sta $d9		                sta ZMEMT+1
2267	.cb7e		64 d8		stz $d8		                stz ZMEMT+0
2268	.cb80		a6 e1		ldx $e1		                ldx $E1
2269	.cb82		a4 e0		ldy $e0		                ldy $E0

2271							;-------------------------------------------------------------------------
2272							;
2273							; Clear a block of text screen memory.
2274							;
2275							; entry:
2276							;
2277							; (ZMEMT),y - first byte to clear
2278							;
2279							; X = number of pages (including first, possibly partial page) to clear
2280							;
2281	.cb84						clearTextMemory:
2282							                ; align memory so that Y=0 on each page boundary
2283							                ; crossing.
2284							                ;
2285							                ; e.g., on entry ZMEMT=$30f8, Y=$08 - then after,
2286							                ; ZMEMT=$3000, Y=$F7; or, ZMEMT=$30f0, Y=$08 -> ZMEMT=$2ff8, Y=$F7.
2287	.cb84		98		tya		                tya                          ;A=initial offset
2288	.cb85		18		clc		                clc
2289	.cb86		65 d8		adc $d8		                adc ZMEMT+0                  ;add to dest address
2290	.cb88		85 d8		sta $d8		                sta ZMEMT+0
2291	.cb8a		b0 02		bcs $cb8e	                bcs +
2292	.cb8c		c6 d9		dec $d9		                dec ZMEMT+1
2293	.cb8e						+
2294	.cb8e		98		tya		                tya
2295	.cb8f		49 ff		eor #$ff	                eor #$FF
2296	.cb91		a8		tay		                tay
2297	.cb92		4a		lsr a		                lsr a                        ;C set if odd
2298	.cb93		ad 58 03	lda $0358	                lda vduv.backgroundTextColour
2299	.cb96		b0 07		bcs $cb9f	                bcs nextByte                    ;taken if odd - slightly different loop
2300	.cb98		80 02		bra $cb9c	                bra clearTextMemoryByte

2302	.cb9a						clearTextMemoryLoop:
2303	.cb9a		91 d8		sta ($d8),y	                sta (ZMEMT),y
2304	.cb9c						clearTextMemoryByte:
2305	.cb9c		c8		iny		                iny
2306	.cb9d		91 d8		sta ($d8),y	                sta (ZMEMT),y
2307	.cb9f						nextByte:
2308	.cb9f		c8		iny		                iny
2309	.cba0		d0 f8		bne $cb9a	                bne clearTextMemoryLoop
2310	.cba2		e6 d9		inc $d9		                inc ZMEMT+1
2311	.cba4		ca		dex		                dex
2312	.cba5		10 f3		bpl $cb9a	                bpl clearTextMemoryLoop
2313	.cba7		60		rts		                rts

2315							;-------------------------------------------------------------------------

2317	.cba8						LCBA8:
2318	.cba8		38		sec		                sec
2319	.cba9		98		tya		                tya
2320	.cbaa		ed 2a 03	sbc $032a	                sbc $032A
2321	.cbad		a8		tay		                tay
2322	.cbae		b0 04		bcs $cbb4	                bcs LCBB4
2323	.cbb0		ca		dex		                dex
2324	.cbb1		30 33		bmi $cbe6	                bmi LCBE6
2325	.cbb3		38		sec		                sec
2326	.cbb4						LCBB4:
2327	.cbb4		08		php		                php
2328	.cbb5		98		tya		                tya
2329	.cbb6		18		clc		                clc
2330	.cbb7		65 da		adc $da		                adc ZTEMP+0
2331	.cbb9		85 da		sta $da		                sta ZTEMP+0
2332	.cbbb		b0 02		bcs $cbbf	                bcs LCBBF
2333	.cbbd		c6 db		dec $db		                dec ZTEMP+1
2334	.cbbf						LCBBF:
2335	.cbbf		98		tya		                tya
2336	.cbc0		18		clc		                clc
2337	.cbc1		65 d8		adc $d8		                adc ZMEMT+0
2338	.cbc3		85 d8		sta $d8		                sta ZMEMT+0
2339	.cbc5		b0 02		bcs $cbc9	                bcs LCBC9
2340	.cbc7		c6 d9		dec $d9		                dec ZMEMT+1
2341	.cbc9						LCBC9:
2342	.cbc9		98		tya		                tya
2343	.cbca		49 ff		eor #$ff	                eor #$FF
2344	.cbcc		a8		tay		                tay
2345	.cbcd		4a		lsr a		                lsr a
2346	.cbce		b0 0b		bcs $cbdb	                bcs LCBDB
2347	.cbd0		80 04		bra $cbd6	                bra LCBD6

2349	.cbd2						LCBD2:
2350	.cbd2		b1 da		lda ($da),y	                lda ($DA),y
2351	.cbd4		91 d8		sta ($d8),y	                sta (ZMEMT),y
2352	.cbd6						LCBD6:
2353	.cbd6		c8		iny		                iny
2354	.cbd7		b1 da		lda ($da),y	                lda ($DA),y
2355	.cbd9		91 d8		sta ($d8),y	                sta (ZMEMT),y
2356	.cbdb						LCBDB:
2357	.cbdb		c8		iny		                iny
2358	.cbdc		d0 f4		bne $cbd2	                bne LCBD2
2359	.cbde		e6 db		inc $db		                inc $DB
2360	.cbe0		e6 d9		inc $d9		                inc ZMEMT+1
2361	.cbe2		ca		dex		                dex
2362	.cbe3		10 ed		bpl $cbd2	                bpl LCBD2
2363	.cbe5						LCBE5:
2364	.cbe5		28		plp		                plp
2365	.cbe6						LCBE6:
2366	.cbe6		60		rts		                rts

2368	.cbe7						LCBE7:
2369	.cbe7		38		sec		                sec
2370	.cbe8		98		tya		                tya
2371	.cbe9		ed 2a 03	sbc $032a	                sbc $032A
2372	.cbec		a8		tay		                tay
2373	.cbed		b0 04		bcs $cbf3	                bcs LCBF3
2374	.cbef		ca		dex		                dex
2375	.cbf0		30 f4		bmi $cbe6	                bmi LCBE6
2376	.cbf2		38		sec		                sec
2377	.cbf3						LCBF3:
2378	.cbf3		08		php		                php
2379	.cbf4		98		tya		                tya
2380	.cbf5		49 ff		eor #$ff	                eor #$FF
2381	.cbf7		48		pha		                pha
2382	.cbf8		38		sec		                sec
2383	.cbf9		65 da		adc $da		                adc $DA
2384	.cbfb		85 da		sta $da		                sta $DA
2385	.cbfd		b0 02		bcs $cc01	                bcs LCC01
2386	.cbff		c6 db		dec $db		                dec $DB
2387	.cc01						LCC01:
2388	.cc01		68		pla		                pla
2389	.cc02		38		sec		                sec
2390	.cc03		65 d8		adc $d8		                adc ZMEMT+0
2391	.cc05		85 d8		sta $d8		                sta ZMEMT+0
2392	.cc07		b0 02		bcs $cc0b	                bcs LCC0B
2393	.cc09		c6 d9		dec $d9		                dec ZMEMT+1
2394	.cc0b						LCC0B:
2395	.cc0b		98		tya		                tya
2396	.cc0c		4a		lsr a		                lsr a
2397	.cc0d		b0 14		bcs $cc23	                bcs LCC23
2398	.cc0f		d0 0d		bne $cc1e	                bne LCC1E
2399	.cc11						LCC11:
2400	.cc11		ca		dex		                dex
2401	.cc12		30 d1		bmi $cbe5	                bmi LCBE5
2402	.cc14		c6 db		dec $db		                dec $DB
2403	.cc16		c6 d9		dec $d9		                dec ZMEMT+1
2404	.cc18		80 04		bra $cc1e	                bra LCC1E

2406	.cc1a						LCC1A:
2407	.cc1a		b1 da		lda ($da),y	                lda ($DA),y
2408	.cc1c		91 d8		sta ($d8),y	                sta (ZMEMT),y
2409	.cc1e						LCC1E:
2410	.cc1e		88		dey		                dey
2411	.cc1f		b1 da		lda ($da),y	                lda ($DA),y
2412	.cc21		91 d8		sta ($d8),y	                sta (ZMEMT),y
2413	.cc23						LCC23:
2414	.cc23		88		dey		                dey
2415	.cc24		d0 f4		bne $cc1a	                bne LCC1A
2416	.cc26		b2 da		lda ($da)	                lda ($DA)
2417	.cc28		92 d8		sta ($d8)	                sta (ZMEMT)
2418	.cc2a		80 e5		bra $cc11	                bra LCC11

2420							;-------------------------------------------------------------------------
2421							;
2422							; Get pointers for a text window row.
2423							;
2424							; entry:
2425							;
2426							; vduv.workspace._28; = text window stride, in bytes
2427							;
2428							; >A, <X = address
2429							;
2430							; exit:
2431							;
2432							; V=0: >A, <X = new address
2433							;
2434							; V=1: (ZTEMPC) =

2436	.cc2c						LCC2C:
2437	.cc2c		48		pha		                pha                          ;save >address
2438	.cc2d		8a		txa		                txa                          ;A=<address
2439	.cc2e		18		clc		                clc
2440	.cc2f		6d 28 03	adc $0328	                adc vduv.workspace._28       ;A=<(new address)
2441	.cc32		aa		tax		                tax                          ;X=<(new address)
2442	.cc33		68		pla		                pla                          ;restore >addcess
2443	.cc34		6d 29 03	adc $0329	                adc vduv.workspace._29       ;A=>(new address)
2444	.cc37		50 1d		bvc $cc56	                bvc rtsCC56                  ;taken if no address wrap
2445	.cc39		86 e0		stx $e0		                stx ZTEMPD+0
2446	.cc3b		29 7f		and #$7f	                and #$7F                     ;
2447	.cc3d		85 e1		sta $e1		                sta ZTEMPD+1
2448	.cc3f		05 e0		ora $e0		                ora ZTEMPD+0
2449	.cc41		f0 12		beq $cc55	                beq clv_rts
2450	.cc43		08		php		                php
2451	.cc44		38		sec		                sec
2452	.cc45		ad 28 03	lda $0328	                lda vduv.workspace._28
2453	.cc48		e5 e0		sbc $e0		                sbc ZTEMPD+0
2454	.cc4a		85 de		sta $de		                sta ZTEMPC+0
2455	.cc4c		ad 29 03	lda $0329	                lda vduv.workspace._29
2456	.cc4f		e5 e1		sbc $e1		                sbc ZTEMPD+1
2457	.cc51		85 df		sta $df		                sta ZTEMPC+1
2458	.cc53		28		plp		                plp
2459	.cc54		60		rts		                rts

2461							;-------------------------------------------------------------------------

2463	.cc55						clv_rts:
2464	.cc55		b8		clv		                clv
2465	.cc56						rtsCC56:
2466	.cc56		60		rts		                rts

2468	.cc57						LCC57:
2469	.cc57		ad 53 03	lda $0353	                lda vduv.bytesPerCharacterRow+1
2470	.cc5a		ae 52 03	ldx $0352	                ldx vduv.bytesPerCharacterRow+0
2471	.cc5d						LCC5D:
2472	.cc5d		18		clc		                clc
2473	.cc5e						LCC5E:
2474	.cc5e		08		php		                php
2475	.cc5f		48		pha		                pha
2476	.cc60		8a		txa		                txa
2477	.cc61		65 d8		adc $d8		                adc ZMEMT+0
2478	.cc63		aa		tax		                tax
2479	.cc64		68		pla		                pla
2480	.cc65		65 d9		adc $d9		                adc ZMEMT+1
2481	.cc67		10 04		bpl $cc6d	                bpl +
2482	.cc69		38		sec		                sec
2483	.cc6a		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte ;handle wraparound at end
2484	.cc6d						+
2485	.cc6d		cd 4e 03	cmp $034e	                cmp vduv.startScreenAddressHighByte
2486	.cc70		b0 03		bcs $cc75	                bcs +
2487	.cc72		6d 54 03	adc $0354	                adc vduv.screenSizeHighByte ;handle wraparound at start
2488	.cc75						+
2489	.cc75		28		plp		                plp
2490	.cc76		60		rts		                rts

2492	.cc77						LCC77:
2493	.cc77		ad 53 03	lda $0353	                lda $0353
2494	.cc7a		ae 52 03	ldx $0352	                ldx $0352
2495	.cc7d						LCC7D:
2496	.cc7d		48		pha		                pha
2497	.cc7e		8a		txa		                txa
2498	.cc7f		49 ff		eor #$ff	                eor #$FF
2499	.cc81		aa		tax		                tax
2500	.cc82		68		pla		                pla
2501	.cc83		49 ff		eor #$ff	                eor #$FF
2502	.cc85		38		sec		                sec
2503	.cc86		80 d6		bra $cc5e	                bra LCC5E

2505	.cc88						LCC88:
2506	.cc88		cd 4e 03	cmp $034e	                cmp $034E
2507	.cc8b		d0 06		bne $cc93	                bne LCC93
2508	.cc8d		e0 00		cpx #$00	                cpx #$00
2509	.cc8f		d0 02		bne $cc93	                bne LCC93
2510	.cc91		a9 80		lda #$80	                lda #$80
2511	.cc93						LCC93:
2512	.cc93		60		rts		                rts

2514	.cc94						LCC94:
2515	.cc94		20 c9 ca	jsr $cac9	                jsr LCAC9
2516	.cc97						LCC97:
2517	.cc97		a6 dc		ldx $dc		                ldx $DC
2518	.cc99		86 d8		stx $d8		                stx ZMEMT+0
2519	.cc9b		a5 dd		lda $dd		                lda $DD
2520	.cc9d		85 d9		sta $d9		                sta ZMEMT+1
2521	.cc9f		60		rts		                rts

2523	.cca0						LCCA0:
2524	.cca0		38		sec		                sec
2525	.cca1		ad 2d 03	lda $032d	                lda $032D
2526	.cca4		ed 2f 03	sbc $032f	                sbc $032F
2527	.cca7		8d 2b 03	sta $032b	                sta $032B
2528	.ccaa		ae 2c 03	ldx $032c	                ldx $032C
2529	.ccad		ac 2f 03	ldy $032f	                ldy $032F

2531							;-------------------------------------------------------------------------
2532							;
2533							; Get display address for a text position.
2534							;
2535	.ccb0						getAddressForTextPosition:
2536	.ccb0		ad 18 03	lda $0318	                lda vduv.textCursorXPosition
2537	.ccb3		48		pha		                pha
2538	.ccb4		ad 19 03	lda $0319	                lda vduv.textCursorYPosition
2539	.ccb7		48		pha		                pha
2540	.ccb8		8e 18 03	stx $0318	                stx vduv.textCursorXPosition
2541	.ccbb		8c 19 03	sty $0319	                sty vduv.textCursorYPosition
2542	.ccbe		20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
2543	.ccc1		7a		ply		                ply
2544	.ccc2		8c 19 03	sty $0319	                sty vduv.textCursorYPosition
2545	.ccc5		7a		ply		                ply
2546	.ccc6		8c 18 03	sty $0318	                sty vduv.textCursorXPosition
2547	.ccc9		60		rts		                rts

2549							;-------------------------------------------------------------------------

2551	.ccca						LCCCA:
2552	.ccca		f0 03		beq $cccf	                beq LCCCF
2553	.cccc		ca		dex		                dex
2554	.cccd		86 dc		stx $dc		                stx ZTEMPB+0
2555	.cccf						LCCCF:
2556	.cccf		ad 66 03	lda $0366	                lda vduv.cursorFlags
2557	.ccd2		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
2558	.ccd4		aa		tax		                tax
2559	.ccd5		a5 dc		lda $dc		                lda ZTEMPB+0
2560	.ccd7						LCCD7:
2561	.ccd7		20 c6 c2	jsr $c2c6	                jsr setTextCursorXPositionWithCursorFlags
2562	.ccda						LCCDA:
2563	.ccda		ae 18 03	ldx $0318	                ldx vduv.textCursorXPosition
2564	.ccdd		ec 08 03	cpx $0308	                cpx vduv.textWindowLeft
2565	.cce0		30 16		bmi $ccf8	                bmi LCCF8            ;taken if off left edge of window
2566	.cce2		ec 0a 03	cpx $030a	                cpx vduv.textWindowRight
2567	.cce5		f0 02		beq $cce9	                beq LCCE9            ;taken if at right edge of window
2568	.cce7		10 0f		bpl $ccf8	                bpl LCCF8            ;taken if off right edge of window
2569	.cce9						LCCE9:
2570	.cce9		ae 19 03	ldx $0319	                ldx vduv.textCursorYPosition
2571	.ccec		ec 0b 03	cpx $030b	                cpx vduv.textWindowTop
2572	.ccef		30 07		bmi $ccf8	                bmi LCCF8
2573	.ccf1		ec 09 03	cpx $0309	                cpx vduv.textWindowBottom
2574	.ccf4		30 04		bmi $ccfa	                bmi updateZMEMTWithTextCursorPosition
2575	.ccf6		f0 02		beq $ccfa	                beq updateZMEMTWithTextCursorPosition
2576	.ccf8						LCCF8:
2577	.ccf8		38		sec		                sec
2578	.ccf9		60		rts		                rts

2580							;-------------------------------------------------------------------------
2581							;
2582							; Get display address for current text cursor position.
2583							;
2584							; Set up display address without using BBC lookup table at &E0/1
2585							;
2586	.ccfa						updateZMEMTWithTextCursorPosition:
2587	.ccfa		ad 56 03	lda $0356	                lda vduv.currentScreenMODEGroup
2588	.ccfd		29 fe		and #$fe	                and #$fe                     ; Reduce to 0,0,2,2,4
2589	.ccff		aa		tax		                tax                          ; Index into jump table
2590	.cd00		ac 19 03	ldy $0319	                ldy vduv.textCursorYPosition  ; Get current line
2591	.cd03		7c 06 cd	jmp ($cd06,x)	                jmp (multiplyRoutinesTable,x) ; Jump to calculation setup

2593	.cd06						multiplyRoutinesTable:
2594	>cd06		21 cd				                .word multiplyBy640     ; Memory map 0,1  MODE 0,1,2,3
2595	>cd08		15 cd				                .word multiplyBy320       ; Memory map 2,3  MODE 4,5,6
2596	>cd0a		0c cd				                .word multiplyBy40        ; Memory map 4    MODE 7

2598	.cd0c						multiplyBy40:
2599	.cd0c		be bb e0	ldx $e0bb,y	                ldx multiplyBy40TableHigh,y ; Get offset high byte for start of this line
2600	.cd0f		b9 d4 e0	lda $e0d4,y	                lda multiplyBy40TableLow,y ; Get offset low byte for start of this line
2601	.cd12		18		clc		                clc
2602	.cd13		80 14		bra $cd29	                bra LCD29

2604	.cd15						multiplyBy320:
2605	.cd15		b9 ed e0	lda $e0ed,y	                lda multiplyBy640TableHigh,y
2606	.cd18		4a		lsr a		                lsr a
2607	.cd19		aa		tax		                tax
2608	.cd1a		98		tya		                tya
2609	.cd1b		29 03		and #$03	                and #$03
2610	.cd1d		4a		lsr a		                lsr a
2611	.cd1e		6a		ror a		                ror a
2612	.cd1f		80 07		bra $cd28	                bra LCD28

2614	.cd21						multiplyBy640:
2615	.cd21		be ed e0	ldx $e0ed,y	                ldx multiplyBy640TableHigh,y
2616	.cd24		98		tya		                tya
2617	.cd25		29 01		and #$01	                and #$01
2618	.cd27		4a		lsr a		                lsr a
2619	.cd28						LCD28:
2620	.cd28		6a		ror a		                ror a                        ; A=A/2 +(128*carry)

2622	.cd29						LCD29:
2623	.cd29		6d 50 03	adc $0350	                adc vduv.screenTopLeftAddress+0
2624	.cd2c		85 d8		sta $d8		                sta ZMEMT+0                      ; store it
2625	.cd2e		8a		txa		                txa
2626	.cd2f		6d 51 03	adc $0351	                adc vduv.screenTopLeftAddress+1 ; window start address hi
2627	.cd32		a8		tay		                tay
2628	.cd33		ad 18 03	lda $0318	                lda vduv.textCursorXPosition  ; text column
2629	.cd36		ae 4f 03	ldx $034f	                ldx vduv.bytesPerCharacter    ; bytes per character
2630	.cd39		ca		dex		                dex
2631	.cd3a		f0 12		beq $cd4e	                beq LCD4E                    ; 1 colour, MODE 7
2632	.cd3c		e0 0f		cpx #$0f	                cpx #$0F
2633	.cd3e		f0 03		beq $cd43	                beq LCD43                    ; 4 colours, MODE 1 or MODE 5
2634	.cd40		90 02		bcc $cd44	                bcc LCD44                    ; 2 colours, MODE 0,3,4,6
2635	.cd42		0a		asl a		                asl a                        ; 16 colours, MODE 2
2636	.cd43						LCD43:
2637	.cd43		0a		asl a		                asl a
2638	.cd44						LCD44:
2639	.cd44		0a		asl a		                asl a
2640	.cd45		0a		asl a		                asl a
2641	.cd46		90 02		bcc $cd4a	                bcc LCD4A
2642	.cd48		c8		iny		                iny
2643	.cd49		c8		iny		                iny
2644	.cd4a						LCD4A:
2645	.cd4a		0a		asl a		                asl a
2646	.cd4b		90 02		bcc $cd4f	                bcc LCD4F
2647	.cd4d		c8		iny		                iny
2648	.cd4e						LCD4E:
2649	.cd4e		18		clc		                clc
2650	.cd4f						LCD4F:
2651	.cd4f		65 d8		adc $d8		                adc ZMEMT+0
2652	.cd51		85 d8		sta $d8		                sta ZMEMT+0
2653	.cd53		8d 4a 03	sta $034a	                sta vduv.textCursorCRTCAddress+0
2654	.cd56		aa		tax		                tax
2655	.cd57		98		tya		                tya
2656	.cd58		69 00		adc #$00	                adc #$00
2657	.cd5a		8d 4b 03	sta $034b	                sta vduv.textCursorCRTCAddress+1
2658	.cd5d		10 04		bpl $cd63	                bpl LCD63
2659	.cd5f		38		sec		                sec
2660	.cd60		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte
2661	.cd63						LCD63:
2662	.cd63		85 d9		sta $d9		                sta ZMEMT+1
2663	.cd65		18		clc		                clc
2664	.cd66		60		rts		                rts

2666							;-------------------------------------------------------------------------

2668	.cd67						nextMaskedCharColumn
2669	.cd67		ee 24 03	inc $0324	                inc vduv.graphicsCursorPixelsX+0
2670	.cd6a		d0 03		bne $cd6f	                bne +
2671	.cd6c		ee 25 03	inc $0325	                inc vduv.graphicsCursorPixelsX+1
2672	.cd6f						+
2673	.cd6f		0a		asl a		                asl a
2674	.cd70						plotMaskedCharRow:
2675							                ; find next pixel to plot, updating graphics cursor X
2676							                ; as it goes. A is non-zero, so this loop will finish
2677							                ; eventually.
2678	.cd70		10 f5		bpl $cd67	                bpl nextMaskedCharColumn
2679	.cd72		5a		phy		                phy
2680	.cd73		85 dd		sta $dd		                sta ZTEMPB+1                 ;
2681	.cd75		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixels
2682	.cd77		20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
2683	.cd7a		80 02		bra $cd7e	                bra plotMaskedCharPixel

2685	.cd7c						plotMaskedCharPixelsLoop:
2686	.cd7c		10 03		bpl $cd81	                bpl nextMaskedCharPixel
2687	.cd7e						plotMaskedCharPixel:
2688	.cd7e		20 50 db	jsr $db50	                jsr plbyteEntryPoint
2689	.cd81						nextMaskedCharPixel
2690	.cd81		46 d1		lsr $d1		                lsr ZMASK
2691	.cd83		90 03		bcc $cd88	                bcc +
2692	.cd85		20 66 da	jsr $da66	                jsr nextColumnAndResetMask
2693	.cd88						+
2694	.cd88		06 dd		asl $dd		                asl ZTEMPB+1
2695	.cd8a		d0 f0		bne $cd7c	                bne plotMaskedCharPixelsLoop
2696	.cd8c		a2 28		ldx #$28	                ldx #VDUVariables.workspace._28
2697	.cd8e		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixelsX
2698	.cd90		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
2699	.cd93		7a		ply		                ply
2700	.cd94		80 50		bra $cde6	                bra nextMaskedCharY

2702	.cd96						plotCharAtGraphicsCursor:
2703	.cd96		20 38 e2	jsr $e238	                jsr getSoftCharacterDefinitionAddress
2704	.cd99		9c 59 03	stz $0359	                stz vduv.graphicsPlotState   ;plot in foreground colour
2705	.cd9c		ad 5b 03	lda $035b	                lda vduv.foregroundGCOLMode
2706	.cd9f		29 0f		and #$0f	                and #$0F
2707	.cda1						plotFontDataAtGraphicsCursorWithPlotMode:
2708	.cda1		8d 5a 03	sta $035a	                sta vduv.graphicsPlotMode
2709	.cda4		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
2710	.cda6		20 1c c9	jsr $c91c	                jsr copyGraphicsCursorPixels
2711	.cda9		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixelsX
2712	.cdab		a2 00		ldx #$00	                ldx #VDUVariables.graphicsWindowPixelsLeft
2713	.cdad		20 b3 ce	jsr $ceb3	                jsr getDistanceMask
2714	.cdb0		85 dc		sta $dc		                sta ZTEMPB+0
2715	.cdb2		a2 04		ldx #$04	                ldx #VDUVariables.graphicsWindowPixelsRight
2716	.cdb4		20 b3 ce	jsr $ceb3	                jsr getDistanceMask
2717	.cdb7		6a		ror a		                ror a
2718	.cdb8		14 dc		trb $dc		                trb ZTEMPB+0
2719	.cdba		a2 26		ldx #$26	                ldx #VDUVariables.graphicsCursorPixelsY
2720	.cdbc		a0 06		ldy #$06	                ldy #VDUVariables.graphicsWindowPixelsTop
2721	.cdbe		20 b3 ce	jsr $ceb3	                jsr getDistanceMask
2722	.cdc1		85 dd		sta $dd		                sta ZTEMPB+1
2723	.cdc3		a2 26		ldx #$26	                ldx #VDUVariables.graphicsCursorPixelsY
2724	.cdc5		a0 02		ldy #$02	                ldy #VDUVariables.graphicsWindowPixelsBottom
2725	.cdc7		20 b3 ce	jsr $ceb3	                jsr getDistanceMask
2726	.cdca		6a		ror a		                ror a
2727	.cdcb		14 dd		trb $dd		                trb ZTEMPB+1
2728	.cdcd		a0 07		ldy #$07	                ldy #$07
2729	.cdcf						copyMaskedCharLoop:
2730	.cdcf		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte
2731	.cdd1		25 dc		and $dc		                and ZTEMPB+0                 ;mask out columns
2732	.cdd3		46 dd		lsr $dd		                lsr ZTEMPB+1                 ;test row
2733	.cdd5		b0 02		bcs $cdd9	                bcs +
2734	.cdd7		a9 00		lda #$00	                lda #$00                     ;mask out this row
2735	.cdd9						+
2736	.cdd9		99 2c 03	sta $032c,y	                sta vduv.workspace._2C,y
2737	.cddc		88		dey		                dey
2738	.cddd		10 f0		bpl $cdcf	                bpl copyMaskedCharLoop
2739	.cddf		a0 f8		ldy #$f8	                ldy #$F8
2740	.cde1						plotMaskedCharLoop:
2741	.cde1		b9 34 02	lda $0234,y	                lda vduv.workspace._2C-$f8,y ;get masked byte
2742	.cde4		d0 8a		bne $cd70	                bne plotMaskedCharRow        ;taken if data to write
2743	.cde6						nextMaskedCharY:
2744	.cde6		ae 26 03	ldx $0326	                ldx vduv.graphicsCursorPixelsY+0
2745	.cde9		d0 03		bne $cdee	                bne +
2746	.cdeb		ce 27 03	dec $0327	                dec vduv.graphicsCursorPixelsY+1
2747	.cdee						+
2748	.cdee		ce 26 03	dec $0326	                dec vduv.graphicsCursorPixelsY+0
2749	.cdf1		c8		iny		                iny
2750	.cdf2		d0 ed		bne $cde1	                bne plotMaskedCharLoop
2751	.cdf4		a2 2a		ldx #$2a	                ldx #VDUVariables.workspace._2A
2752	.cdf6		a0 26		ldy #$26	                ldy #VDUVariables.graphicsCursorPixelsY
2753	.cdf8		4c 0c c9	jmp $c90c	                jmp copyTwoBytesWithinVDUVariables

2755	.cdfb						vdu127AtGraphicsCursor:
2756							                ; CHR$127 is a solid block, not a backspace.
2757	.cdfb		a9 f8		lda #$f8	                lda #<terminal.chr127
2758	.cdfd		85 de		sta $de		                sta ZTEMPC+0
2759	.cdff		a9 bb		lda #$bb	                lda #>terminal.chr127
2760	.ce01		85 df		sta $df		                sta ZTEMPC+1
2761	.ce03		a2 08		ldx #$08	                ldx #$08
2762	.ce05		8e 59 03	stx $0359	                stx vduv.graphicsPlotState   ;plot in background colour
2763	.ce08		a9 00		lda #$00	                lda #$00
2764	.ce0a		80 95		bra $cda1	                bra plotFontDataAtGraphicsCursorWithPlotMode

2766	.ce0c						LCE0C:
2767	.ce0c		20 2c d1	jsr $d12c	                jsr handleColumn81
2768	.ce0f		b0 85		bcs $cd96	                bcs plotCharAtGraphicsCursor          ;taken if VDU5
2769	.ce11		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
2770	.ce14		f0 37		beq $ce4d	                beq writeTeletextChar
2771	.ce16		20 38 e2	jsr $e238	                jsr getSoftCharacterDefinitionAddress
2772	.ce19						writeBitmapChar:
2773	.ce19		a0 07		ldy #$07	                ldy #$07
2774	.ce1b		e0 03		cpx #$03	                cpx #$03
2775	.ce1d		f0 34		beq $ce53	                beq write2bppChar            ;taken if MODE 1/5
2776	.ce1f		b0 5a		bcs $ce7b	                bcs write4bppChar                    ;taken if MODE 2
2777	.ce21						write1bppChar:
2778	.ce21		b1 de		lda ($de),y	                lda (ZTEMPC),y
2779	.ce23		05 d2		ora $d2		                ora ZORA
2780	.ce25		45 d3		eor $d3		                eor ZEOR
2781	.ce27		91 d8		sta ($d8),y	                sta (ZMEMT),y
2782	.ce29		88		dey		                dey
2783	.ce2a		10 f5		bpl $ce21	                bpl write1bppChar
2784	.ce2c		60		rts		                rts

2786	.ce2d						vdu127EntryPoint:
2787	.ce2d		a9 20		lda #$20	                lda #$20
2788	.ce2f		2c 66 03	bit $0366	                bit $0366
2789	.ce32		d0 03		bne $ce37	                bne LCE37
2790	.ce34		20 99 c2	jsr $c299	                jsr vdu8EntryPoint
2791	.ce37						LCE37:
2792	.ce37		20 de e2	jsr $e2de	                jsr testVDU5State
2793	.ce3a		d0 bf		bne $cdfb	                bne vdu127AtGraphicsCursor
2794	.ce3c		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
2795	.ce3f		f0 0a		beq $ce4b	                beq writeTeletextSpaceChar   ;taken if teletext mode

2797							                ; Address of space char is known.
2798	.ce41		a9 00		lda #$00	                lda #<terminal.LB900
2799	.ce43		85 de		sta $de		                sta ZTEMPC+0
2800	.ce45		a9 b9		lda #$b9	                lda #>terminal.LB900
2801	.ce47		85 df		sta $df		                sta ZTEMPC+1
2802	.ce49		80 ce		bra $ce19	                bra writeBitmapChar

2804	.ce4b						writeTeletextSpaceChar:
2805	.ce4b		a9 20		lda #$20	                lda #$20
2806	.ce4d						writeTeletextChar:
2807	.ce4d		20 e4 dd	jsr $dde4	                jsr getSAA5050FromASCII
2808	.ce50		92 d8		sta ($d8)	                sta (ZMEMT)
2809	.ce52		60		rts		                rts

2811	.ce53						write2bppChar:
2812	.ce53		a5 d9		lda $d9		                lda ZMEMT+1
2813	.ce55		a6 d8		ldx $d8		                ldx ZMEMT+0
2814	.ce57		20 e6 ce	jsr $cee6	                jsr getNextColumnAddress
2815	.ce5a						-
2816	.ce5a		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte
2817	.ce5c		29 0f		and #$0f	                and #$0F                     ;get data for right 4 pixels
2818	.ce5e		aa		tax		                tax
2819	.ce5f		bd 1f e0	lda $e01f,x	                lda LE013,x                  ;form byte
2820	.ce62		05 d2		ora $d2		                ora ZORA
2821	.ce64		45 d3		eor $d3		                eor ZEOR
2822	.ce66		91 e0		sta ($e0),y	                sta (ZTEMPD),y               ;write to right column
2823	.ce68		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte
2824							                .if version==350
2825	.ce6a		20 2e e5	jsr $e52e	                jsr LE520
2831							                .endif
2832	.ce6d		aa		tax		                tax                          ;
2833	.ce6e		bd 1f e0	lda $e01f,x	                lda LE013,x                  ;form byte
2834	.ce71		05 d2		ora $d2		                ora ZORA
2835	.ce73		45 d3		eor $d3		                eor ZEOR
2836	.ce75		91 d8		sta ($d8),y	                sta (ZMEMT),y                ;write to left column
2837	.ce77		88		dey		                dey
2838	.ce78		10 e0		bpl $ce5a	                bpl -
2839	.ce7a		60		rts		                rts

2841	.ce7b						write4bppChar:
2842	.ce7b		a5 d9		lda $d9		                lda ZMEMT+1
2843	.ce7d		a6 d8		ldx $d8		                ldx ZMEMT+0
2844	.ce7f		20 d8 ce	jsr $ced8	                jsr getNext3ColumnAddresses
2845	.ce82						-
2846	.ce82		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte - %abcdefgh
2847	.ce84		20 a8 ce	jsr $cea8	                jsr get4bppScreenByteFor2Pixels ;pixels g and h
2848	.ce87		91 e0		sta ($e0),y	                sta ($E0),y
2849	.ce89		b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte - %abcdefgh
2850	.ce8b		4a		lsr a		                lsr a                        ;%0abcdefg
2851	.ce8c		4a		lsr a		                lsr a                        ;%00abcdef
2852	.ce8d		48		pha		                pha                          ;save %00abcdef
2853	.ce8e		20 a8 ce	jsr $cea8	                jsr get4bppScreenByteFor2Pixels ;pixels e and f
2854	.ce91		91 dc		sta ($dc),y	                sta (ZTEMPB),y
2855	.ce93		68		pla		                pla                          ;restore %00abcdef
2856	.ce94		4a		lsr a		                lsr a                        ;%000abcde
2857	.ce95		4a		lsr a		                lsr a                        ;%0000abcd
2858	.ce96		48		pha		                pha                          ;save %0000abcd
2859	.ce97		20 a8 ce	jsr $cea8	                jsr get4bppScreenByteFor2Pixels ;pixels c and d
2860	.ce9a		91 da		sta ($da),y	                sta (ZTEMP),y
2861	.ce9c		68		pla		                pla                          ;restore %0000abcd
2862	.ce9d		4a		lsr a		                lsr a                        ;%00000abc
2863	.ce9e		4a		lsr a		                lsr a                        ;%000000ab
2864	.ce9f		20 a8 ce	jsr $cea8	                jsr get4bppScreenByteFor2Pixels ;pixels a and b
2865	.cea2		91 d8		sta ($d8),y	                sta (ZMEMT),y
2866	.cea4		88		dey		                dey
2867	.cea5		10 db		bpl $ce82	                bpl -
2868	.cea7		60		rts		                rts

2870	.cea8						get4bppScreenByteFor2Pixels:
2871	.cea8		29 03		and #$03	                and #$03                     ;mask out 2 pixels
2872	.ceaa		aa		tax		                tax
2873	.ceab		bd 2f e0	lda $e02f,x	                lda LE023,x                  ;form byte
2874	.ceae		05 d2		ora $d2		                ora ZORA
2875	.ceb0		45 d3		eor $d3		                eor ZEOR
2876	.ceb2		60		rts		                rts

2878							;-------------------------------------------------------------------------
2879							;
2880							; Get mask indicating the distance between two 16-bit VDU variable
2881							; values - >=8, or some amount less than that.
2882							;
2883							; (These can be used for masking pixels, or counting loops, or
2884							; whatever.)
2885							;
2886							; entry:
2887							;
2888							; X = offset of value A in VDU variables
2889							;
2890							; Y = offset of value B in VDU variables
2891							;
2892							; exit:
2893							;
2894							; if distance<=0, A=255, C=1
2895							;
2896							; if distance>=8, A=0, C=0
2897							;
2898							; otherwise, A=255>>distance, C=0
2899							;
2900	.ceb3						getDistanceMask:
2901	.ceb3		38		sec		                sec
2902	.ceb4		bd 00 03	lda $0300,x	                lda vduv+0,x
2903	.ceb7		f9 00 03	sbc $0300,y	                sbc vduv+0,y
2904	.ceba		85 da		sta $da		                sta ZTEMP                    ;get result LSB
2905	.cebc		bd 01 03	lda $0301,x	                lda vduv+1,x
2906	.cebf		f9 01 03	sbc $0301,y	                sbc vduv+1,y
2907	.cec2		30 0c		bmi $ced0	                bmi distanceMask255                  ;taken if result -ve
2908	.cec4		d0 0e		bne $ced4	                bne distanceMask0                  ;taken if result >=256
2909	.cec6		a6 da		ldx $da		                ldx ZTEMP
2910	.cec8		e0 08		cpx #$08	                cpx #$08
2911	.ceca		b0 08		bcs $ced4	                bcs distanceMask0                    ;taken if result>=8
2912	.cecc		bd 33 e1	lda $e133,x	                lda distanceMasksTable,x             ;get mask for <8 items
2913	.cecf		60		rts		                rts

2915	.ced0						distanceMask255:
2916	.ced0		a9 ff		lda #$ff	                lda #%11111111
2917	.ced2		38		sec		                sec
2918	.ced3		60		rts		                rts

2920	.ced4						distanceMask0:
2921	.ced4		a9 00		lda #$00	                lda #$00
2922	.ced6		18		clc		                clc
2923	.ced7		60		rts		                rts

2925							;-------------------------------------------------------------------------
2926							;
2927							; Get addresses of next 3 columns on screen.
2928							;
2929							; entry:
2930							;
2931							; A (MSB)/X (LSB) = address
2932							;
2933							; exit:
2934							;
2935							; (ZTEMP) = column N+1
2936							; (ZTEMPB) = column N+2
2937							; (ZTEMPC) = column N+3
2938							;
2939	.ced8						getNext3ColumnAddresses:
2940	.ced8		20 e6 ce	jsr $cee6	                jsr getNextColumnAddress
2941	.cedb		86 da		stx $da		                stx ZTEMP+0
2942	.cedd		85 db		sta $db		                sta ZTEMP+1
2943	.cedf		20 e6 ce	jsr $cee6	                jsr getNextColumnAddress
2944	.cee2		86 dc		stx $dc		                stx ZTEMPB+0
2945	.cee4		85 dd		sta $dd		                sta ZTEMPB+1

2947							;-------------------------------------------------------------------------
2948							;
2949							; Get address of next column on screen.
2950							;
2951							; entry:
2952							;
2953							; A (MSB)/X (LSB) = address
2954							;
2955							; exit:
2956							;
2957							; A (MSB)/X (LSB) = address of next column
2958							; (ZTEMPD) = address of next column
2959							;
2960	.cee6						getNextColumnAddress:
2961	.cee6		48		pha		                pha
2962	.cee7		8a		txa		                txa
2963	.cee8		18		clc		                clc
2964	.cee9		69 08		adc #$08	                adc #$08                     ;next column...
2965	.ceeb		aa		tax		                tax
2966	.ceec		68		pla		                pla
2967	.ceed		90 06		bcc $cef5	                bcc +                        ;taken if no carry
2968	.ceef		1a		inc a		                inc a
2969	.cef0		10 03		bpl $cef5	                bpl +           ;taken if no screen address wraparound
2970	.cef2		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
2971	.cef5						+
2972	.cef5		86 e0		stx $e0		                stx ZTEMPD+0
2973	.cef7		85 e1		sta $e1		                sta ZTEMPD+1
2974	.cef9		60		rts		                rts

2976							;-------------------------------------------------------------------------
2977							;
2978							; VDU 23 0 Control 6845 CRTC directly [MasRef E.3-12]
2979							;
2980	.cefa						vdu23_0_EntryPoint:
2981	.cefa		ad 1d 03	lda $031d	                lda vduv.queueEnd-7           ;get value
2982	.cefd		ac 1c 03	ldy $031c	                ldy vduv.queueEnd-8           ;get register

2984							                ; fall through to setCRTCRegister

2986							;-------------------------------------------------------------------------
2987							;
2988							; Set a CRTC register, adjusting and/or noting values if appropriate.
2989							;
2990							; entry:
2991							;
2992							; Y = register to set
2993							;
2994							; A = value

2996	.cf00						setCRTCRegister:
2997	.cf00		c0 07		cpy #$07	                cpy #$07
2998	.cf02		90 1f		bcc $cf23	                bcc setCRTCRegisterRaw
2999	.cf04		d0 03		bne $cf09	                bne +        ;taken if not setting R7

3001							                ; Setting R7 (vsync position), so apply the *TV offset.
3002	.cf06		6d 90 02	adc $0290	                adc tvOffset
3003	.cf09						+
3004	.cf09		c0 08		cpy #$08	                cpy #$08
3005	.cf0b		d0 07		bne $cf14	                bne +                    ;taken if not setting R8

3007							                ; Setting R8 (interlace/delay register), so apply the
3008							                ; *TV interlace setting.
3009	.cf0d		09 00		ora #$00	                ora #$00
3010	.cf0f		30 03		bmi $cf14	                bmi +       ;branch taken if bit 7 set - this is taken
3011							                            ;to imply the mode being set is Mode 7
3012	.cf11		4d 91 02	eor $0291	                eor tvInterlace ;apply *TV interlace setting
3013	.cf14						+
3014	.cf14		c0 0a		cpy #$0a	                cpy #$0A
3015	.cf16		d0 0b		bne $cf23	                bne setCRTCRegisterRaw

3017							                ; Setting R10 (cursor start register). Note the new
3018							                ; setting in the VDU variable. If in VDU5 mode, reuse
3019							                ; the result of testVDU5State - i.e., 32 - as the
3020							                ; setting, hiding the cursor.
3021	.cf18		8d 5f 03	sta $035f	                sta vduv.lastCursorStartRegisterValue
3022	.cf1b		20 de e2	jsr $e2de	                jsr testVDU5State
3023	.cf1e		d0 09		bne $cf29	                bne rtsCF2A
3024	.cf20		ad 5f 03	lda $035f	                lda vduv.lastCursorStartRegisterValue

3026							                ; fall through to setCRTCRegisterRaw

3028							;-------------------------------------------------------------------------
3029							;
3030							; Set a CRTC register.
3031							;
3032	.cf23						setCRTCRegisterRaw:
3033	.cf23		8c 00 fe	sty $fe00	                sty CRTC+0
3034	.cf26		8d 01 fe	sta $fe01	                sta CRTC+1
3035	.cf29						rtsCF2A:
3036	.cf29		60		rts		                rts

3038							;-------------------------------------------------------------------------
3039							;
3040							; VDU 23 1 Turn cursor on/off [MasRef E.3-12]
3041							;
3042	.cf2a						vdu23_1_EntryPoint:
3043	.cf2a		20 de e2	jsr $e2de	                jsr testVDU5State
3044	.cf2d		d0 fa		bne $cf29	                bne rtsCF2A                  ;taken if VDU5
3045	.cf2f		ad 1c 03	lda $031c	                lda vduv.queueEnd-8           ;get new cursor state
3046	.cf32		29 03		and #$03	                and #$03                     ;mask off bits of interest
3047	.cf34		0a		asl a		                asl a
3048	.cf35		aa		tax		                tax
3049	.cf36		a9 20		lda #$20	                lda #$20 ;R10 value for hiding the cursor - save a few
3050							                         ;bytes by loading this here
3051	.cf38		7c 3b cf	jmp ($cf3b,x)	                jmp (LCF3C,x)

3053	.cf3b						LCF3C:
3054	>cf3b		52 cf				                .word setCRTCRegister10            ; 23,1,0... - hide
3055	>cf3d		4f cf				                .word showCursor            ; 23,1,1... - show
3056	>cf3f		43 cf				                .word steadyCursor          ; 23,1,2... - steady
3057	>cf41		4a cf				                .word slowFlashCursor       ; 23,1,3... - flash slowly

3059	.cf43						steadyCursor:
3060	.cf43		a9 60		lda #$60	                lda #%01100000
3061	.cf45		1c 5f 03	trb $035f	                trb vduv.lastCursorStartRegisterValue ;steady cursor
3062	.cf48		80 05		bra $cf4f	                bra showCursor

3064	.cf4a						slowFlashCursor:
3065	.cf4a		a9 60		lda #$60	                lda #%01100000
3066	.cf4c		0c 5f 03	tsb $035f	                tsb vduv.lastCursorStartRegisterValue ;slow blink cursor
3067	.cf4f						showCursor:
3068	.cf4f		ad 5f 03	lda $035f	                lda vduv.lastCursorStartRegisterValue
3069	.cf52						setCRTCRegister10:
3070	.cf52		a0 0a		ldy #$0a	                ldy #$0A
3071	.cf54		80 cd		bra $cf23	                bra setCRTCRegisterRaw

3073							;-------------------------------------------------------------------------
3074							;
3075							; VDU 23 2â<80><93>5 Set ECF patterns [MasRef E.3-13]
3076							;
3077	.cf56						vdu23_2_EntryPoint:
3078	.cf56						vdu23_3_EntryPoint:
3079	.cf56						vdu23_4_EntryPoint:
3080	.cf56						vdu23_5_EntryPoint:
3081	.cf56		e9 01		sbc #$01	                sbc #$01  ;subtract 2 (C=0 on entry...) to get pattern
3082							                          ;index
3083	.cf58		0a		asl a		                asl a
3084	.cf59		0a		asl a		                asl a
3085	.cf5a		0a		asl a		                asl a                        ;index*8
3086	.cf5b		69 07		adc #$07	                adc #$07                     ;index*8+7
3087	.cf5d		a8		tay		                tay
3088	.cf5e		a2 07		ldx #$07	                ldx #$07
3089	.cf60						-
3090	.cf60		bd 1c 03	lda $031c,x	                lda vduv.queueEnd-8,x
3091	.cf63		99 00 88	sta $8800,y	                sta andy.ecfPatterns,y
3092	.cf66		88		dey		                dey
3093	.cf67		ca		dex		                dex
3094	.cf68		10 f6		bpl $cf60	                bpl -
3095	.cf6a		80 26		bra $cf92	                bra LCF93

3097							;-------------------------------------------------------------------------

3099	.cf6c						vdu23_11_EntryPoint:
3100	.cf6c		ad 55 03	lda $0355	                lda vduv.currentScreenMODE
3101	.cf6f		d0 01		bne $cf72	                bne +
3102							                ; Use a different table for MODE 0 - see MasRef E.3-16.
3103	.cf71		3a		dec a		                dec a                        ;
3104	.cf72						+
3105	.cf72		29 03		and #$03	                and #$03 ;index=0 (mode 4); 1 (mode 1/5); 2 (mode 2);
3106							                         ;3 (mode 0)
3107	.cf74		1a		inc a		                inc a
3108	.cf75		0a		asl a		                asl a
3109	.cf76		0a		asl a		                asl a
3110	.cf77		0a		asl a		                asl a
3111	.cf78		0a		asl a		                asl a                        ;(index+1)*16
3112	.cf79		aa		tax		                tax
3113	.cf7a		a0 1c		ldy #$1c	                ldy #32-4
3114	.cf7c						setDefaultECFPatterns:
3115	.cf7c		bd cf e1	lda $e1cf,x	                lda defaultECFPatterns-1,x
3116	.cf7f		99 ff 87	sta $87ff,y	                sta andy.ecfPatterns-1,y     ;copy first repeat
3117	.cf82		99 03 88	sta $8803,y	                sta andy.ecfPatterns+4-1,y   ;copy second repeat
3118	.cf85		ca		dex		                dex                          ;next byte in defaults table
3119	.cf86		88		dey		                dey
3120	.cf87		98		tya		                tya
3121	.cf88		89 07		bit #$07	                bit #$07
3122	.cf8a		d0 f0		bne $cf7c	                bne setDefaultECFPatterns ;taken if pattern not filled
3123							                ; skip to start of previous pattern
3124	.cf8c		88		dey		                dey
3125	.cf8d		88		dey		                dey
3126	.cf8e		88		dey		                dey
3127	.cf8f		88		dey		                dey
3128	.cf90		10 ea		bpl $cf7c	                bpl setDefaultECFPatterns
3129	.cf92						LCF93:
3130	.cf92		4c 7c c5	jmp $c57c	                jmp initializeCurrentECFPatterns

3132							;-------------------------------------------------------------------------
3133							;
3134							; VDU 23 12â<80><93>15 Set simple ECF pattern [MasRef E.3-17]
3135							;
3136	.cf95						vdu23_12_EntryPoint:
3137	.cf95						vdu23_13_EntryPoint:
3138	.cf95						vdu23_14_EntryPoint:
3139	.cf95						vdu23_15_EntryPoint:
3140	.cf95		e9 0b		sbc #$0b	                sbc #$0B                     ;-12 to get pattern index
3141	.cf97		0a		asl a		                asl a                        ;index*2
3142	.cf98		0a		asl a		                asl a                        ;index*4
3143	.cf99		0a		asl a		                asl a                        ;index*8, C=0
3144	.cf9a		69 03		adc #$03	                adc #$03                     ;index*8+3, C=0
3145	.cf9c		48		pha		                pha                          ;save offset
3146	.cf9d		a2 07		ldx #$07	                ldx #$07                     ;
3147	.cf9f						LCFA0:
3148	.cf9f		bd 1c 03	lda $031c,x	                lda vduv.queueEnd-8,x        ;get simple pattern byte
3149	.cfa2		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne ;apply logical colour limit
3150	.cfa5		85 da		sta $da		                sta ZTEMP+0
3151	.cfa7		ad 60 03	lda $0360	                lda vduv.numberOfLogicalColoursMinusOne
3152	.cfaa		29 07		and #$07	                and #$07                     ;1/3/7
3153	.cfac		65 da		adc $da		                adc ZTEMP+0                  ;select 2/4/16 colour table
3154	.cfae		a8		tay		                tay
3155	.cfaf		b9 57 e1	lda $e157,y	                lda solidColoursTable-1,y
3156	.cfb2		9d 1c 03	sta $031c,x	                sta vduv.queueEnd-8,x
3157	.cfb5		ca		dex		                dex
3158	.cfb6		10 e7		bpl $cf9f	                bpl LCFA0
3159	.cfb8		a9 55		lda #$55	                lda #%01010101
3160	.cfba		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
3161	.cfbd		d0 02		bne $cfc1	                bne +                 ;taken if not MODE 0
3162	.cfbf		a9 33		lda #$33	                lda #%00110011        ;double-width pattern for MODE 0
3163	.cfc1						+
3164	.cfc1		85 da		sta $da		                sta ZTEMP+0
3165	.cfc3		7a		ply		                ply
3166	.cfc4		a2 07		ldx #$07	                ldx #$07
3167	.cfc6						LCFC7:
3168	.cfc6		bd 1c 03	lda $031c,x	                lda vduv.queueEnd-8,x
3169	.cfc9		ca		dex		                dex
3170	.cfca		5d 1c 03	eor $031c,x	                eor vduv.queueEnd-8,x
3171	.cfcd		25 da		and $da		                and ZTEMP+0
3172	.cfcf		5d 1c 03	eor $031c,x	                eor vduv.queueEnd-8,x
3173	.cfd2		99 00 88	sta $8800,y	                sta andy.ecfPatterns+0,y
3174	.cfd5		99 04 88	sta $8804,y	                sta andy.ecfPatterns+4,y
3175	.cfd8		88		dey		                dey
3176	.cfd9		ca		dex		                dex
3177	.cfda		10 ea		bpl $cfc6	                bpl LCFC7
3178	.cfdc		80 b4		bra $cf92	                bra LCF93

3180							;-------------------------------------------------------------------------
3181							;
3182							; VDU 23 6 Set dotted lines pattern [MasRef E.3-13]
3183							;
3184	.cfde						vdu23_6_EntryPoint:
3185	.cfde		ad 1c 03	lda $031c	                lda vduv.queueEnd-8
3186	.cfe1		8d 67 03	sta $0367	                sta vduv.dotPattern
3187	.cfe4		60		rts		                rts

3189							;-------------------------------------------------------------------------
3190							;
3191							; VDU 23 7 Scroll window directly [MasRef E.3-14]
3192							;
3193	.cfe5						vdu23_7_EntryPoint:
3194	.cfe5		ad 1c 03	lda $031c	                lda vduv.queueEnd-8           ;get <m>
3195	.cfe8		d0 0a		bne $cff4	                bne scrollEntireScreen
3196	.cfea		20 10 c9	jsr $c910	                jsr copyTextWindowToWorkspace2C
3197	.cfed		a5 d0		lda $d0		                lda STATE
3198	.cfef		29 08		and #$08	                and #STATE.isTextWindow
3199	.cff1		0a		asl a		                asl a ;A=$10 (text window active) or $00 (no text window)
3200	.cff2		80 11		bra $d005	                bra +

3202	.cff4						scrollEntireScreen:
3203	.cff4		a9 00		lda #$00	                lda #$00
3204	.cff6		8d 2c 03	sta $032c	                sta vduv.workspace._2C          ;left
3205	.cff9		8d 2f 03	sta $032f	                sta vduv.workspace._2F          ;top
3206	.cffc		20 ae e2	jsr $e2ae	                jsr getDefaultBoundsForCurrentScreenMODE
3207	.cfff		8e 2e 03	stx $032e	                stx vduv.workspace._2E          ;right
3208	.d002		8c 2d 03	sty $032d	                sty vduv.workspace._2D          ;bottom
3209	.d005						+
3210	.d005		85 dc		sta $dc		                sta ZTEMPB+0
3211	.d007		38		sec		                sec
3212	.d008		ad 2e 03	lda $032e	                lda vduv.workspace._2E          ;right
3213	.d00b		ed 2c 03	sbc $032c	                sbc vduv.workspace._2C          ;right-left
3214	.d00e		20 3b c9	jsr $c93b	                jsr getBytesPerInclusiveTextRow
3215	.d011		8d 28 03	sta $0328	                sta vduv.workspace._28+0        ;bytes per row LSB
3216	.d014		8e 29 03	stx $0329	                stx vduv.workspace._28+1        ;bytes per row MSB
3217	.d017		ae 4f 03	ldx $034f	                ldx vduv.bytesPerCharacter
3218	.d01a		e0 01		cpx #$01	                cpx #$01
3219	.d01c		f0 07		beq $d025	                beq +  ;when 1 byte/char, no cell/byte distinction
3220	.d01e		ad 1e 03	lda $031e	                lda vduv.queueEnd-6       ;get <z>
3221	.d021		f0 02		beq $d025	                beq +                ;taken if scrolling by 1 cell
3222	.d023		a2 08		ldx #$08	                ldx #$08                 ;scroll by 1 horizontal byte
3223	.d025						+
3224	.d025		8e 2a 03	stx $032a	                stx vduv.workspace._2A

3226							; <d> is a bitmask - %00000AVN.
3227							;
3228							; A is set if scrolling by axis (controlled by the VDU cursor flags)
3229							; rather than by direction.
3230							;
3231							; V is set to scroll vertically/in Y rather than horizontally/in X.
3232							;
3233							; N is set to scroll in the negative direction.

3235	.d028		ad 1d 03	lda $031d	                lda vduv.queueEnd-7           ;00000avn C=?
3236	.d02b		4a		lsr a		                lsr a                        ;000000av C=n
3237	.d02c		08		php		                php
3238	.d02d		2a		rol a		                rol a                        ;00000avn C=0
3239	.d02e		28		plp		                plp                          ;00000avn C=n
3240	.d02f		2a		rol a		                rol a                        ;0000avnn C=0
3241	.d030		0a		asl a		                asl a                        ;000avnn0 C=0
3242	.d031		c9 10		cmp #$10	                cmp #$10                     ;$10 = 000a0000
3243	.d033		90 03		bcc $d038	                bcc LD039                 ;taken if scrolling by direction
3244	.d035		4d 66 03	eor $0366	                eor vduv.cursorFlags       ;adjust axes
3245	.d038						LD039:
3246	.d038		29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
3247	.d03a		05 dc		ora $dc		                ora ZTEMPB+0
3248	.d03c						LD03D:
3249	.d03c		aa		tax		                tax
3250	.d03d		ad 50 03	lda $0350	                lda vduv.screenTopLeftAddress+0
3251	.d040		85 d8		sta $d8		                sta ZMEMT+0
3252	.d042		ad 51 03	lda $0351	                lda vduv.screenTopLeftAddress+1
3253	.d045		85 d9		sta $d9		                sta ZMEMT+1
3254	.d047		20 4d d0	jsr $d04d	                jsr callScrollRoutine
3255	.d04a		4c d7 c6	jmp $c6d7	                jmp updateCRTCTextCursor

3257	.d04d						callScrollRoutine:
3258	.d04d		7c 18 e2	jmp ($e218,x)	                jmp (scrollRoutinesTable,x)

3260	.d050						LD051:
3261	.d050		da		phx		                phx
3262	.d051		20 10 c9	jsr $c910	                jsr copyTextWindowToWorkspace2C
3263	.d054		20 08 c9	jsr $c908	                jsr copyTextWindowWidthInBytesToWorkspace28
3264	.d057		ae 4f 03	ldx $034f	                ldx $034F
3265	.d05a		8e 2a 03	stx $032a	                stx $032A
3266	.d05d		68		pla		                pla
3267	.d05e		4a		lsr a		                lsr a
3268	.d05f		45 d0		eor $d0		                eor STATE
3269	.d061		29 f7		and #$f7	                and #(~STATE.isTextWindow)&$ff
3270	.d063		45 d0		eor $d0		                eor STATE
3271	.d065		0a		asl a		                asl a
3272	.d066		80 d4		bra $d03c	                bra LD03D

3274							;-------------------------------------------------------------------------
3275							;
3276							; VDU 23 8 Clear block [MasRef E.3-15]
3277							;
3278	.d068						vdu23_8_EntryPoint:
3279	.d068		9c 34 03	stz $0334	                stz $0334
3280	.d06b		9c 35 03	stz $0335	                stz $0335
3281	.d06e		20 5e e2	jsr $e25e	                jsr getTextCursorPositionWithColumn81
3282	.d071		8e 36 03	stx $0336	                stx $0336
3283	.d074		8c 37 03	sty $0337	                sty $0337
3284	.d077		20 68 e2	jsr $e268	                jsr LE25C
3285	.d07a		e8		inx		                inx
3286	.d07b		8e 38 03	stx $0338	                stx $0338
3287	.d07e		8c 39 03	sty $0339	                sty $0339
3288	.d081		a0 00		ldy #$00	                ldy #$00
3289	.d083		ad 1c 03	lda $031c	                lda $031C
3290	.d086		20 e4 d0	jsr $d0e4	                jsr LD0E5
3291	.d089		ad 1d 03	lda $031d	                lda $031D
3292	.d08c		20 e4 d0	jsr $d0e4	                jsr LD0E5
3293	.d08f		ad 33 03	lda $0333	                lda $0333
3294	.d092		cd 31 03	cmp $0331	                cmp $0331
3295	.d095		90 76		bcc $d10d	                bcc LD10E
3296	.d097		d0 08		bne $d0a1	                bne LD0A2
3297	.d099		ad 30 03	lda $0330	                lda $0330
3298	.d09c		cd 32 03	cmp $0332	                cmp $0332
3299	.d09f		b0 6c		bcs $d10d	                bcs LD10E
3300	.d0a1						LD0A2:
3301	.d0a1		ad 18 03	lda $0318	                lda $0318
3302	.d0a4		48		pha		                pha
3303	.d0a5		ad 19 03	lda $0319	                lda $0319
3304	.d0a8		48		pha		                pha
3305	.d0a9		ac 31 03	ldy $0331	                ldy $0331
3306	.d0ac						LD0AD:
3307	.d0ac		5a		phy		                phy
3308	.d0ad		ad 66 03	lda $0366	                lda $0366
3309	.d0b0		49 08		eor #$08	                eor #$08
3310	.d0b2		29 0e		and #$0e	                and #$0E
3311	.d0b4		aa		tax		                tax
3312	.d0b5		98		tya		                tya
3313	.d0b6		20 c6 c2	jsr $c2c6	                jsr setTextCursorXPositionWithCursorFlags
3314	.d0b9		a2 00		ldx #$00	                ldx #$00
3315	.d0bb		ad 38 03	lda $0338	                lda $0338
3316	.d0be		cc 31 03	cpy $0331	                cpy $0331
3317	.d0c1		d0 03		bne $d0c6	                bne LD0C7
3318	.d0c3		ae 30 03	ldx $0330	                ldx $0330
3319	.d0c6						LD0C7:
3320	.d0c6		cc 33 03	cpy $0333	                cpy $0333
3321	.d0c9		f0 07		beq $d0d2	                beq LD0D3
3322	.d0cb		20 7f ca	jsr $ca7f	                jsr LCA7F
3323	.d0ce		7a		ply		                ply
3324	.d0cf		c8		iny		                iny
3325	.d0d0		80 da		bra $d0ac	                bra LD0AD

3327	.d0d2						LD0D3:
3328	.d0d2		ad 32 03	lda $0332	                lda $0332
3329	.d0d5		20 7f ca	jsr $ca7f	                jsr LCA7F
3330	.d0d8		7a		ply		                ply
3331	.d0d9		68		pla		                pla
3332	.d0da		8d 19 03	sta $0319	                sta $0319
3333	.d0dd		68		pla		                pla
3334	.d0de		8d 18 03	sta $0318	                sta $0318
3335	.d0e1		4c fa cc	jmp $ccfa	                jmp updateZMEMTWithTextCursorPosition

3337	.d0e4						LD0E5:
3338	.d0e4		48		pha		                pha
3339	.d0e5		29 03		and #$03	                and #$03
3340	.d0e7		0a		asl a		                asl a
3341	.d0e8		20 ef d0	jsr $d0ef	                jsr LD0F0
3342	.d0eb		68		pla		                pla
3343	.d0ec		4a		lsr a		                lsr a
3344	.d0ed		09 01		ora #$01	                ora #$01
3345	.d0ef						LD0F0:
3346	.d0ef		aa		tax		                tax
3347	.d0f0		29 01		and #$01	                and #$01
3348	.d0f2		48		pha		                pha
3349	.d0f3		bd 34 03	lda $0334,x	                lda $0334,x
3350	.d0f6		fa		plx		                plx
3351	.d0f7		18		clc		                clc
3352	.d0f8		c8		iny		                iny
3353	.d0f9		79 1d 03	adc $031d,y	                adc $031D,y
3354	.d0fc		30 0a		bmi $d108	                bmi LD109
3355	.d0fe		dd 38 03	cmp $0338,x	                cmp $0338,x
3356	.d101		90 07		bcc $d10a	                bcc LD10B
3357	.d103		bd 38 03	lda $0338,x	                lda $0338,x
3358	.d106		80 02		bra $d10a	                bra LD10B

3360	.d108						LD109:
3361	.d108		a9 00		lda #$00	                lda #$00
3362	.d10a						LD10B:
3363	.d10a		99 2f 03	sta $032f,y	                sta $032F,y
3364	.d10d						LD10E:
3365	.d10d		60		rts		                rts

3367							;-------------------------------------------------------------------------
3368							;
3369							; VDU 23 9 Set 1st flash time [MasRef E.3-16]
3370							;
3371	.d10e						vdu23_9_EntryPoint:
3372	.d10e		38		sec		                sec

3374							;-------------------------------------------------------------------------
3375							;
3376							; VDU 23 10 Set 2nd flash time [MasRef E.3-16]
3377							;
3378	.d10f						vdu23_10_EntryPoint:
3379	.d10f		ae 1c 03	ldx $031c	                ldx vduv.queueEnd-8          ;get flash value
3380	.d112		a0 00		ldy #$00	                ldy #$00                     ;Y=0 for OSBYTE call
3381	.d114		90 03		bcc $d119	                bcc doOSBYTE0A               ;taken if VDU23,10
3382	.d116		4c ec eb	jmp $ebec	                jmp osbyte09
3383	.d119						doOSBYTE0A:
3384	.d119		38		sec		                sec
3385	.d11a		4c ee eb	jmp $ebee	                jmp osbyte0A

3387							;-------------------------------------------------------------------------
3388							;
3389							; VDU 23 16 Cursor movement control [MasRef E.3-17]
3390							;
3391	.d11d						vdu23_16_EntryPoint:
3392	.d11d		ad 66 03	lda $0366	                lda vduv.cursorFlags
3393	.d120		2d 1d 03	and $031d	                and vduv.queueEnd-7          ;value AND <y>
3394	.d123		4d 1c 03	eor $031c	                eor vduv.queueEnd-8          ;(value AND <y>) EOR <x>
3395	.d126		8d 66 03	sta $0366	                sta vduv.cursorFlags
3396	.d129		4a		lsr a		                lsr a
3397	.d12a		b0 18		bcs $d144	                bcs rtsD145            ;taken if scrollProtect flag on
3398							                ; scroll protect flag is off, so handle column 81 if
3399							                ; necessary.

3401							;-------------------------------------------------------------------------
3402							;
3403							; Handle column 81, if necessary.
3404							;
3405							; TODO - probably misnamed due to the return value
3406							;
3407							; exit:
3408							;
3409							; C=0 if not VDU 5
3410							;
3411							; C=1 if VDU 5
3412							;
3413	.d12c						handleColumn81:
3414	.d12c		48		pha		                pha
3415	.d12d		da		phx		                phx
3416	.d12e		20 de e2	jsr $e2de	                jsr testVDU5State
3417	.d131		38		sec		                sec
3418	.d132		d0 0e		bne $d142	                bne plx_pla_rts        ;taken if VDU5
3419	.d134		18		clc		                clc
3420	.d135		2c 6c 03	bit $036c	                bit vduv.column81
3421	.d138		10 08		bpl $d142	                bpl plx_pla_rts        ;taken if not column 81
3422	.d13a		08		php		                php
3423	.d13b		20 f5 c3	jsr $c3f5	                jsr vdu13EntryPoint          ;CR
3424	.d13e		20 5a c2	jsr $c25a	                jsr vdu10EntryPoint          ;LF
3425	.d141		28		plp		                plp
3426	.d142						plx_pla_rts:
3427	.d142		fa		plx		                plx
3428	.d143		68		pla		                pla
3429	.d144						rtsD145:
3430	.d144		60		rts		                rts

3432							;-------------------------------------------------------------------------
3433							;
3434							; Handle PLOT. [MasRef E.3-21]
3435							;
3436							; PLOT numbers are of the form %pppppamm, where %ppppp is the PLOT
3437							; type, %a the absolute flag and %mm the PLOT mode.
3438							;
3439							; Absolute flag and mode are clear enough from [MasRef E.3-22]. The
3440							; %ppppp part isn't documented as such, so here's a list:
3441							;
3442							; %00000 =  0 = 0-7 = Plot solid line (both endpoints included) [MasRef E.3-23]
3443							; %00001 =  1 = 8-15 = Plot solid line (final point omitted) [MasRef E.3-23]
3444							; %00010 =  2 = 16-23 = Plot solid line (final point omitted) [MasRef E.3-23]
3445							; %00011 =  3 = 24-31 = Plot dotted line (final point omitted) [MasRef E.3-23]
3446							; %00100 =  4 = 32-39 = Plot solid line (initial point omitted) [MasRef E.3-24]
3447							; %00101 =  5 = 40-47 = Plot solid line (both endpoints omitted) [MasRef E.3-24]
3448							; %00110 =  6 = 48-55 = Plot dotted line (initial point omitted) [MasRef E.3-24]
3449							; %00111 =  7 = 56â<80><93>63 = Plot dotted line (both endpoints omitted) [MasRef E.3-24]
3450							; %01000 =  8 = 64â<80><93>71 = Plot point [MasRef E.3-24]
3451							; %01001 =  9 = 72â<80><93>79 = Horizontal line fill (left and right to non-background) [MasRef E.3-24]
3452							; %01010 = 10 = 80â<80><93>87 = Plot triangle [MasRef E.3-25]
3453							; %01011 = 11 = 88â<80><93>95 = Horizontal line fill (right to background) [MasRef E.3-25]
3454							; %01100 = 12 = 96â<80><93>103 = Plot rectangle [MasRef E.3-26]
3455							; %01101 = 13 = 104â<80><93>111 = Horizontal line fill (left and right to foreground) [MasRef E.3-26]
3456							; %01110 = 14 = 112â<80><93>119 = Plot parallelogram [MasRef E.3-27]
3457							; %01111 = 15 = 120â<80><93>127 = Horizontal line fill (right to non-foreground) [MasRef E.3-27]
3458							; %10000 = 16 = 128â<80><93>135 = Flood fill to non-background [MasRef E.3-28]
3459							; %10001 = 17 = 136â<80><93>143 = Flood fill to foreground [MasRef E.3-28]
3460							; %10010 = 18 = 144â<80><93>151 = Plot circle outline [MasRef E.3-28]
3461							; %10011 = 19 = 152â<80><93>159 = Plot filled circle [MasRef E.3-29]
3462							; %10100 = 20 = 160â<80><93>167 = Plot circular arc [MasRef E.3-29]
3463							; %10101 = 21 = 168â<80><93>175 = Plot filled chord segment [MasRef E.3-30]
3464							; %10110 = 22 = 176â<80><93>183 = Plot filled sector [MasRef E.3-30]
3465							; %10111 = 23 = 184â<80><93>191 = Move/copy rectangle [MasRef E.3-31]
3466							; %11000 = 24 = 192â<80><93>199 = Plot ellipse outline [MasRef E.3-32]
3467							; %11001 = 25 = 200â<80><93>207 = Plot solid ellipse [MasRef E.3-32]
3468							; %11010 = 26 = 208-215 = Reserved [MasRef E.3-34]
3469							; %11011 = 27 = 215-223 = Reserved [MasRef E.3-34]
3470							; %11100 = 28 = 224-231 = Reserved [MasRef E.3-34]
3471							; %11101 = 29 = 232-239 = Reserved for Acornsoft sprites [MasRef E.3-34]
3472							; %11110 = 30 = 240-247 = User program calls [MasRef E.3-34]
3473							; %11111 = 31 = 248-255 = User program calls [MasRef E.3-34]
3474							;
3475							; entry:
3476							;
3477							; vduQueueEnd-5 = PLOT number
3478							;
3479							; vduQueueEnd-3 = X coordinate
3480							;
3481							; vduQueueEnd-1 = Y coordinate
3482							;;

3484	.d145						handlePLOT:
3485	.d145		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
3486	.d147		20 e1 d1	jsr $d1e1	                jsr eigabsForPLOT
3487	.d14a		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number
3488	.d14d		a0 05		ldy #$05	                ldy #gcolModeLeave                     ;
3489	.d14f		29 03		and #$03	                and #$03                     ;mask out colour/plot mode [MasRef E.3-22]
3490	.d151		f0 0c		beq $d15f	                beq LD160 ;taken if <p> MOD 4=0 - early out
3491	.d153		4a		lsr a		                lsr a                        ;C=1 if using VDU18 settings
3492	.d154		88		dey		                dey                          ;Y=gcolModeInvert
3493	.d155		90 08		bcc $d15f	                bcc LD160                    ;taken if invert mode
3494	.d157		aa		tax		                tax              ;X=0 if fg settings, 1 if bg settings
3495	.d158		bc 5b 03	ldy $035b,x	                ldy vduv.foregroundGCOLMode,x
3496	.d15b		0a		asl a		                asl a
3497	.d15c		0a		asl a		                asl a
3498	.d15d		0a		asl a		                asl a
3499	.d15e		aa		tax		                tax              ;X=0 if fg settings, 8 if bg settings
3500	.d15f						LD160:
3501	.d15f		8e 59 03	stx $0359	                stx vduv.graphicsPlotState
3502	.d162		98		tya		                tya
3503	.d163		29 0f		and #$0f	                and #$0F
3504	.d165		8d 5a 03	sta $035a	                sta vduv.graphicsPlotMode
3505	.d168		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number pppppmmm
3506	.d16b		4a		lsr a		                lsr a                        ;0pppppmm
3507	.d16c		4a		lsr a		                lsr a                        ;00pppppm
3508	.d16d		29 fe		and #$fe	                and #$fe                     ;00ppppp0
3509	.d16f		aa		tax		                tax
3510	.d170		c9 34		cmp #$34	                cmp #208/4
3511	.d172		b0 1b		bcs $d18f	                bcs LD190                    ;taken if reserved PLOT
3512	.d174		29 f3		and #$f3	                and #$F3                     ;00pp00p0
3513	.d176		c9 12		cmp #$12	                cmp #$12                     ;
3514	.d178		08		php		                php                          ;
3515	.d179		f0 08		beq $d183	                beq LD184                ;taken if horizonal line fill
3516	.d17b		e0 2e		cpx #$2e	                cpx #184/4
3517	.d17d		f0 04		beq $d183	                beq LD184                ;taken if move/copy rectangle
3518	.d17f		c0 05		cpy #$05	                cpy #gcolModeLeave
3519	.d181		f0 19		beq $d19c	                beq LD19D
3520	.d183						LD184:
3521	.d183		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number
3522	.d186		20 92 d1	jsr $d192	                jsr LD193
3523	.d189		28		plp		                plp
3524	.d18a		d0 11		bne $d19d	                bne LD19E
3525	.d18c		4c de c4	jmp $c4de	                jmp LC4DF

3527	.d18f						LD190:
3528	.d18f		4c a2 c6	jmp $c6a2	                jmp callVDUVForPLOT

3530	.d192						LD193:
3531	.d192		e0 10		cpx #$10	                cpx #64/4
3532	.d194		b0 03		bcs $d199	                bcs LD19A                     ;taken if PLOT >=64
3533	.d196		4c a8 d8	jmp $d8a8	                jmp LD8A9                    ;handle line PLOTs

3535	.d199						LD19A:
3536	.d199		7c 87 e0	jmp ($e087,x)	                jmp (plotEntryPointTable-8*2,x)

3538	.d19c						LD19D:
3539	.d19c		68		pla		                pla
3540	.d19d						LD19E:
3541	.d19d		20 1a c9	jsr $c91a	                jsr copyGraphicsCursorPixelsToOldGraphicsCursorPixels
3542	.d1a0		a0 24		ldy #$24	                ldy #$24
3543	.d1a2		4c 16 c9	jmp $c916	                jmp copyLastFourVDUQueueBytes

3545	.d1a5						LD1A6:
3546	.d1a5		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX

3548							;-------------------------------------------------------------------------
3549							;
3550							; WIND [MasRef E.4-7]. The result is a bit field, %vvhh, where %vv is
3551							; the outcode for the vertical axis and %hh the outcode for the
3552							; horizontal axis. Each outcode is %xn, where x is set if point above
3553							; maximum and n set if point below minimum. (Of course, %11 is then
3554							; not possible.)
3555							;
3556							; See https://en.wikipedia.org/wiki/Cohen%E2%80%93Sutherland_algorithm
3557							;
3558							; So the possible results, in binary, are:
3559							;
3560							; %1001 | %1000 | %1010
3561							; ------+-------+------
3562							; %0001 | %0000 | %0010
3563							; ------+-------+------
3564							; %0101 | %0100 | %0110
3565							;
3566	.d1a7						windEntryPoint:
3567	.d1a7		e8		inx		                inx
3568	.d1a8		e8		inx		                inx                          ;point to Y coordinate
3569	.d1a9		20 b4 d1	jsr $d1b4	                jsr getOutcodeForYAxis                    ;process Y coordinate
3570	.d1ac		ca		dex		                dex
3571	.d1ad		ca		dex		                dex                          ;point to X coordinate
3572	.d1ae		0a		asl a		                asl a
3573	.d1af		0a		asl a		                asl a                        ;shift Y outcode into bits 2/3
3574	.d1b0		a0 00		ldy #$00	                ldy #$00                     ;doing Y axis
3575	.d1b2		80 04		bra $d1b8	                bra updateOutcodeForAxis

3577							;-------------------------------------------------------------------------
3578							;
3579	.d1b4						getOutcodeForYAxis:
3580	.d1b4		a0 02		ldy #$02	                ldy #$02                     ;Y=2 for Y coordinate
3581							;-------------------------------------------------------------------------
3582							;
3583							; Get outcode for X or Y axis.
3584							;
3585							; entry:
3586							;
3587							; X = offset in VDU variables of coordinate
3588							;
3589							; Y = 0 if X axis, 2 if Y axis
3590							;
3591							; exit:
3592							;
3593							; ZTEMP?0 = outcode - 0, 1 or 2
3594							;
3595							; A = outcode
3596							;
3597							; N/Z set as per outcode
3598							;
3599	.d1b6						getOutcodeForAxis:
3600	.d1b6		a9 00		lda #$00	                lda #$00                     ;initialize result

3602							;-------------------------------------------------------------------------
3603							;
3604							; Update outcode for X or Y axis
3605							;
3606							; entry: as per getOutcodeForAxis
3607							;
3608							; exit:
3609							;
3610							; ZTEMP?0 = updated; outcode is added to its existing value
3611							;
3612	.d1b8						updateOutcodeForAxis:
3613	.d1b8		85 da		sta $da		                sta ZTEMP+0                  ;save current result
3614							                ; set flags for coordinate-minimum
3615	.d1ba		bd 00 03	lda $0300,x	                lda vduv+0,x
3616	.d1bd		d9 00 03	cmp $0300,y	                cmp vduv.graphicsWindowPixelsLeft+0,y
3617	.d1c0		bd 01 03	lda $0301,x	                lda vduv+1,x
3618	.d1c3		f9 01 03	sbc $0301,y	                sbc vduv.graphicsWindowPixelsLeft+1,y
3619	.d1c6		30 10		bmi $d1d8	                bmi add1ToOutcode ;taken if point below minimum - outcode is 1

3621							                ; set flags for maximum-coordinate
3622	.d1c8		b9 04 03	lda $0304,y	                lda vduv.graphicsWindowPixelsRight+0,y
3623	.d1cb		dd 00 03	cmp $0300,x	                cmp vduv+0,x
3624	.d1ce		b9 05 03	lda $0305,y	                lda vduv.graphicsWindowPixelsRight+1,y
3625	.d1d1		fd 01 03	sbc $0301,x	                sbc vduv+1,x
3626	.d1d4		10 04		bpl $d1da	                bpl gotOutcode ;taken if point below maximum - axis outcode is 0
3627							                ; point is above maximum - axis outcode is 2
3628	.d1d6						add2ToOutcode:
3629	.d1d6		e6 da		inc $da		                inc ZTEMP+0
3630	.d1d8						add1ToOutcode:
3631	.d1d8		e6 da		inc $da		                inc ZTEMP+0
3632	.d1da						gotOutcode:
3633	.d1da		a5 da		lda $da		                lda ZTEMP+0
3634	.d1dc		60		rts		                rts

3636							;-------------------------------------------------------------------------
3637							;
3638							; EIGABS entry point.
3639							;
3640	.d1dd						eigabsEntryPoint:
3641	.d1dd		a9 ff		lda #$ff	                lda #$FF ;pretend it's PLOT 255 (as that would be absolute coordinates)
3642	.d1df		80 03		bra $d1e4	                bra eigabsCommon

3644							;-------------------------------------------------------------------------
3645							;
3646							; EIGABS, but for a VDU 25. Handles relative/absolute addressing,
3647							; based on the PLOT number in the VDU queue.
3648							;
3649	.d1e1						eigabsForPLOT:
3650	.d1e1		ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number

3652							;-------------------------------------------------------------------------
3653							;
3654							; EIGABS shared code.
3655							;
3656	.d1e4						eigabsCommon:
3657	.d1e4		85 da		sta $da		                sta ZTEMP+0                  ;save PLOT number
3658	.d1e6		a0 02		ldy #$02	                ldy #$02                     ;process Y
3659	.d1e8		20 0a d2	jsr $d20a	                jsr handleExternalCoordinate
3660	.d1eb		20 41 d2	jsr $d241	                jsr divideCoordinatesBy2     ;divide Y by 4 - convert 0-1023 to 0-255
3661	.d1ee		a0 00		ldy #$00	                ldy #$00                     ;process X
3662	.d1f0		ca		dex		                dex                          ;...
3663	.d1f1		ca		dex		                dex                          ;...
3664	.d1f2		20 0a d2	jsr $d20a	                jsr handleExternalCoordinate
3665	.d1f5		ac 61 03	ldy $0361	                ldy vduv.pixelsPerByteMinusOne
3666	.d1f8		c0 03		cpy #$03	                cpy #$03  ;
3667	.d1fa		f0 05		beq $d201	                beq +     ;branch taken if mode 1/5 - divide by 4 or 8
3668	.d1fc		b0 06		bcs $d204	                bcs ++    ;branch taken if mode 0/4 - divide by 2 or 4
3669	.d1fe		20 41 d2	jsr $d241	                jsr divideCoordinatesBy2     ;mode 2 - divide by 8
3670	.d201						+
3671	.d201		20 41 d2	jsr $d241	                jsr divideCoordinatesBy2
3672	.d204						+
3673	.d204		ad 56 03	lda $0356	                lda vduv.currentScreenMODEGroup
3674	.d207		d0 38		bne $d241	                bne divideCoordinatesBy2     ;branch taken if MODE 4/5
3675	.d209		60		rts		                rts

3677							;-------------------------------------------------------------------------
3678							;
3679							; Handle external coordinate.
3680							;
3681							; 1. Deal with absolute or relative PLOTting
3682							;
3683							; 2. Update graphics cursor position
3684							;
3685							; 3. Handle window origin
3686							;
3687							; 4. Update input coordinate
3688							;
3689							; 5. Divide result by 2 (as this always needs doing at least once)
3690							;
3691							; entry:
3692							;
3693							; ZTEMP?0 = PLOT number
3694							;
3695							; X = offset-2 of external coordinates
3696							;
3697							; Y = 0 to process X coordinate, 2 to process Y coordinate
3698							;
3699	.d20a						handleExternalCoordinate:
3700	.d20a		18		clc		                clc
3701	.d20b		a5 da		lda $da		                lda ZTEMP+0                  ;get PLOT number
3702	.d20d		29 04		and #$04	                and #$04                     ;get absolute/relative flag
3703	.d20f		f0 09		beq $d21a	                beq relativePLOT             ;branch taken if relative
3704	.d211						absolutePLOT:
3705	.d211		bd 02 03	lda $0302,x	                lda vduv+2,x                 ;get coordinate LSB
3706	.d214		48		pha		                pha                          ;save coordinate LSB
3707	.d215		bd 03 03	lda $0303,x	                lda vduv+3,x                 ;get coordinate MSB
3708	.d218		80 0e		bra $d228	                bra LD229                    ;

3710	.d21a						relativePLOT:
3711	.d21a		bd 02 03	lda $0302,x	                lda vduv+2,x                 ;get coordinate LSB
3712	.d21d		79 10 03	adc $0310,y	                adc vduv.graphicsCursorPositionX+0,y ;add current position LSB
3713	.d220		48		pha		                pha                                  ;save coordinate LSB
3714	.d221		bd 03 03	lda $0303,x	                lda vduv+3,x                 ;get coordinate MSB
3715	.d224		79 11 03	adc $0311,y	                adc vduv.graphicsCursorPositionX+1,y ;add current position MSB
3716	.d227		18		clc		                clc
3717	.d228						LD229:
3718	.d228		99 11 03	sta $0311,y	                sta vduv.graphicsCursorPositionX+1,y ;update current position MSB
3719	.d22b		79 0d 03	adc $030d,y	                adc vduv.graphicsWindowOriginX+1,y   ;add window origin MSB
3720	.d22e		9d 03 03	sta $0303,x	                sta vduv+3,x                  ;update coordinate MSB
3721	.d231		68		pla		                pla                          ;restore coordinate LSB
3722	.d232		99 10 03	sta $0310,y	                sta vduv.graphicsCursorPositionX+0,y ;update current position LSB
3723	.d235		18		clc		                clc
3724	.d236		79 0c 03	adc $030c,y	                adc vduv.graphicsWindowOriginX+0,y ;add window origin LSB
3725	.d239		9d 02 03	sta $0302,x	                sta vduv+2,x                       ;update coordinate LSB
3726	.d23c		90 03		bcc $d241	                bcc +
3727	.d23e		fe 03 03	inc $0303,x	                inc vduv+3,x       ;handle carry, ignored earlier
3728	.d241						+

3730	.d241						divideCoordinatesBy2:
3731	.d241		bd 03 03	lda $0303,x	                lda vduv+3,x
3732	.d244		0a		asl a		                asl a                        ;C=bit 7
3733	.d245		7e 03 03	ror $0303,x	                ror vduv+3,x                  ;signed divide by 2
3734	.d248		7e 02 03	ror $0302,x	                ror vduv+2,x                  ;signed divide by 2
3735	.d24b		60		rts		                rts

3737							;-------------------------------------------------------------------------

3739	.d24c						LD24D:
3740	.d24c		da		phx		                phx
3741	.d24d		5a		phy		                phy
3742	.d24e		5a		phy		                phy
3743	.d24f		da		phx		                phx
3744	.d250		5a		phy		                phy
3745	.d251		20 7f d2	jsr $d27f	                jsr LD280
3746	.d254		fa		plx		                plx
3747	.d255		20 7f d2	jsr $d27f	                jsr LD280
3748	.d258		fa		plx		                plx
3749	.d259		7a		ply		                ply
3750	.d25a		20 e7 da	jsr $dae7	                jsr LDAE8
3751	.d25d		fa		plx		                plx
3752	.d25e		20 67 d2	jsr $d267	                jsr LD268
3753	.d261		fa		plx		                plx
3754	.d262		80 03		bra $d267	                bra LD268

3756	.d264						LD265:
3757	.d264		20 24 9b	jsr $9b24	                jsr terminal.L9B09
3758	.d267						LD268:
3759	.d267		a0 00		ldy #$00	                ldy #$00
3760	.d269		20 6f d2	jsr $d26f	                jsr LD270
3761	.d26c		e8		inx		                inx
3762	.d26d		a0 02		ldy #$02	                ldy #$02
3763	.d26f						LD270:
3764	.d26f		38		sec		                sec
3765	.d270		20 75 d2	jsr $d275	                jsr LD276
3766	.d273		e8		inx		                inx
3767	.d274		c8		iny		                iny
3768	.d275						LD276:
3769	.d275		bd 00 03	lda $0300,x	                lda $0300,x
3770	.d278		f9 14 03	sbc $0314,y	                sbc $0314,y
3771	.d27b		9d 00 03	sta $0300,x	                sta $0300,x
3772	.d27e						LD27F:
3773	.d27e		60		rts		                rts

3775	.d27f						LD280:
3776	.d27f		a0 00		ldy #$00	                ldy #$00
3777	.d281		20 87 d2	jsr $d287	                jsr LD288
3778	.d284		e8		inx		                inx
3779	.d285		a0 02		ldy #$02	                ldy #$02
3780	.d287						LD288:
3781	.d287		18		clc		                clc
3782	.d288		20 8d d2	jsr $d28d	                jsr LD28E
3783	.d28b		e8		inx		                inx
3784	.d28c		c8		iny		                iny
3785	.d28d						LD28E:
3786	.d28d		bd 00 03	lda $0300,x	                lda $0300,x
3787	.d290		79 14 03	adc $0314,y	                adc $0314,y
3788	.d293		9d 00 03	sta $0300,x	                sta $0300,x
3789	.d296		60		rts		                rts

3791	.d297						LD298:
3792	.d297		85 e1		sta $e1		                sta $E1
3793	.d299		20 24 d4	jsr $d424	                jsr LD425
3794	.d29c		f0 e0		beq $d27e	                beq LD27F
3795	.d29e		a0 14		ldy #$14	                ldy #$14
3796	.d2a0		a9 20		lda #$20	                lda #$20
3797	.d2a2		a2 2c		ldx #$2c	                ldx #$2C
3798	.d2a4		20 64 d2	jsr $d264	                jsr LD265
3799	.d2a7		20 a9 d3	jsr $d3a9	                jsr LD3AA
3800	.d2aa		a9 01		lda #$01	                lda #$01
3801	.d2ac						LD2AD:
3802	.d2ac		84 e0		sty $e0		                sty $E0
3803	.d2ae		04 e0		tsb $e0		                tsb $E0
3804	.d2b0		a2 2c		ldx #$2c	                ldx #VDUVariables.workspace._2C
3805	.d2b2		a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
3806	.d2b4		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
3807	.d2b7		2c 35 03	bit $0335	                bit $0335
3808	.d2ba		08		php		                php
3809	.d2bb		a2 2c		ldx #$2c	                ldx #$2C
3810	.d2bd		20 25 d7	jsr $d725	                jsr LD726
3811	.d2c0		28		plp		                plp
3812	.d2c1		10 03		bpl $d2c6	                bpl LD2C7
3813	.d2c3		20 a9 d3	jsr $d3a9	                jsr LD3AA
3814	.d2c6						LD2C7:
3815	.d2c6		ac 2c 03	ldy $032c	                ldy $032C
3816	.d2c9		ad 2d 03	lda $032d	                lda $032D
3817	.d2cc		30 03		bmi $d2d1	                bmi LD2D2
3818	.d2ce		20 2e c9	jsr $c92e	                jsr negateAY
3819	.d2d1						LD2D2:
3820	.d2d1		48		pha		                pha
3821	.d2d2		18		clc		                clc
3822	.d2d3		98		tya		                tya
3823	.d2d4		6d 30 88	adc $8830	                adc L8830
3824	.d2d7		a8		tay		                tay
3825	.d2d8		68		pla		                pla
3826	.d2d9		6d 31 88	adc $8831	                adc L8831
3827	.d2dc		10 ce		bpl $d2ac	                bpl LD2AD
3828	.d2de		1a		inc a		                inc a
3829	.d2df		d0 23		bne $d304	                bne LD305
3830	.d2e1		c8		iny		                iny
3831	.d2e2		d0 20		bne $d304	                bne LD305
3832	.d2e4		a5 e0		lda $e0		                lda $E0
3833	.d2e6		f0 1c		beq $d304	                beq LD305
3834	.d2e8		ad 2c 03	lda $032c	                lda $032C
3835	.d2eb		cd 28 03	cmp $0328	                cmp $0328
3836	.d2ee		f0 14		beq $d304	                beq LD305
3837	.d2f0		a2 2c		ldx #$2c	                ldx #$2C
3838	.d2f2		a0 28		ldy #$28	                ldy #$28
3839	.d2f4		ad 36 03	lda $0336	                lda $0336
3840	.d2f7		0a		asl a		                asl a
3841	.d2f8		4d 36 03	eor $0336	                eor $0336
3842	.d2fb		10 04		bpl $d301	                bpl LD302
3843	.d2fd		e8		inx		                inx
3844	.d2fe		e8		inx		                inx
3845	.d2ff		c8		iny		                iny
3846	.d300		c8		iny		                iny
3847	.d301						LD302:
3848	.d301		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
3849	.d304						LD305:
3850	.d304		20 24 d4	jsr $d424	                jsr LD425
3851	.d307		ad 29 03	lda $0329	                lda $0329
3852	.d30a		aa		tax		                tax
3853	.d30b		4d 1c 03	eor $031c	                eor $031C
3854	.d30e		30 18		bmi $d328	                bmi LD329
3855	.d310		a0 02		ldy #$02	                ldy #$02
3856	.d312		20 6e d4	jsr $d46e	                jsr LD46F
3857	.d315		d0 0c		bne $d323	                bne LD324
3858	.d317		ae 2b 03	ldx $032b	                ldx $032B
3859	.d31a		a0 00		ldy #$00	                ldy #$00
3860	.d31c		20 6e d4	jsr $d46e	                jsr LD46F
3861	.d31f		f0 11		beq $d332	                beq LD333
3862	.d321		49 80		eor #$80	                eor #$80
3863	.d323						LD324:
3864	.d323		86 da		stx $da		                stx $DA
3865	.d325		45 da		eor $da		                eor $DA
3866	.d327		aa		tax		                tax
3867	.d328						LD329:
3868	.d328		8a		txa		                txa
3869	.d329		29 80		and #$80	                and #$80
3870	.d32b		f0 02		beq $d32f	                beq LD330
3871	.d32d		a9 c0		lda #$c0	                lda #$C0
3872	.d32f						LD330:
3873	.d32f		04 e1		tsb $e1		                tsb $E1
3874	.d331		18		clc		                clc
3875	.d332						LD333:
3876	.d332		60		rts		                rts

3878	.d333						LD334:
3879	.d333		a5 e1		lda $e1		                lda $E1
3880	.d335		8d 48 88	sta $8848	                sta L8848
3881	.d338		89 03		bit #$03	                bit #$03
3882	.d33a		f0 f6		beq $d332	                beq LD333
3883	.d33c		a9 10		lda #$10	                lda #$10
3884	.d33e		85 dc		sta $dc		                sta $DC
3885	.d340		0a		asl a		                asl a
3886	.d341		85 dd		sta $dd		                sta $DD
3887	.d343		a2 1b		ldx #$1b	                ldx #$1B
3888	.d345		20 4e d3	jsr $d34e	                jsr LD34F
3889	.d348		06 dc		asl $dc		                asl $DC
3890	.d34a		46 dd		lsr $dd		                lsr $DD
3891	.d34c		a2 28		ldx #$28	                ldx #$28
3892	.d34e						LD34F:
3893	.d34e		a9 80		lda #$80	                lda #$80
3894	.d350		85 da		sta $da		                sta $DA
3895	.d352		bd 02 03	lda $0302,x	                lda $0302,x
3896	.d355		cd 32 88	cmp $8832	                cmp L8832
3897	.d358		d0 d8		bne $d332	                bne LD333
3898	.d35a		bd 03 03	lda $0303,x	                lda $0303,x
3899	.d35d		cd 33 88	cmp $8833	                cmp L8833
3900	.d360		d0 d0		bne $d332	                bne LD333
3901	.d362		bc 00 03	ldy $0300,x	                ldy $0300,x
3902	.d365		bd 01 03	lda $0301,x	                lda $0301,x
3903	.d368		10 05		bpl $d36f	                bpl LD370
3904	.d36a		46 da		lsr $da		                lsr $DA
3905	.d36c		20 2e c9	jsr $c92e	                jsr negateAY
3906	.d36f						LD370:
3907	.d36f		cc 30 88	cpy $8830	                cpy L8830
3908	.d372		d0 be		bne $d332	                bne LD333
3909	.d374		cd 31 88	cmp $8831	                cmp L8831
3910	.d377		d0 b9		bne $d332	                bne LD333
3911	.d379		a5 e1		lda $e1		                lda $E1
3912	.d37b		89 02		bit #$02	                bit #$02
3913	.d37d		f0 19		beq $d398	                beq LD399
3914	.d37f		a0 30		ldy #$30	                ldy #$30
3915	.d381		89 01		bit #$01	                bit #$01
3916	.d383		f0 02		beq $d387	                beq LD388
3917	.d385		a4 dc		ldy $dc		                ldy $DC
3918	.d387						LD388:
3919	.d387		98		tya		                tya
3920	.d388		4a		lsr a		                lsr a
3921	.d389		4a		lsr a		                lsr a
3922	.d38a		24 e1		bit $e1		                bit $E1
3923	.d38c		d0 06		bne $d394	                bne LD395
3924	.d38e		05 dc		ora $dc		                ora $DC
3925	.d390		04 e1		tsb $e1		                tsb $E1
3926	.d392		80 04		bra $d398	                bra LD399

3928	.d394						LD395:
3929	.d394		05 dd		ora $dd		                ora $DD
3930	.d396		14 e1		trb $e1		                trb $E1
3931	.d398						LD399:
3932	.d398		a5 da		lda $da		                lda $DA
3933	.d39a		24 e1		bit $e1		                bit $E1
3934	.d39c		f0 91		beq $d32f	                beq LD330
3935	.d39e		14 e1		trb $e1		                trb $E1
3936	.d3a0		a5 e1		lda $e1		                lda $E1
3937	.d3a2		8d 48 88	sta $8848	                sta L8848
3938	.d3a5		8d 49 88	sta $8849	                sta L8849
3939	.d3a8		60		rts		                rts

3941	.d3a9						LD3AA:
3942	.d3a9		ad 2e 03	lda $032e	                lda $032E
3943	.d3ac		8d 32 88	sta $8832	                sta L8832
3944	.d3af		ad 2f 03	lda $032f	                lda $032F
3945	.d3b2		8d 33 88	sta $8833	                sta L8833
3946	.d3b5		20 fb d3	jsr $d3fb	                jsr LD3FC
3947	.d3b8		20 12 d5	jsr $d512	                jsr LD513
3948	.d3bb		8c 30 88	sty $8830	                sty L8830
3949	.d3be		ad 46 88	lda $8846	                lda L8846
3950	.d3c1		4a		lsr a		                lsr a
3951	.d3c2		ad 3d 88	lda $883d	                lda L883D
3952	.d3c5		90 06		bcc $d3cd	                bcc LD3CE
3953	.d3c7		c9 80		cmp #$80	                cmp #$80
3954	.d3c9		6a		ror a		                ror a
3955	.d3ca		6e 30 88	ror $8830	                ror L8830
3956	.d3cd						LD3CE:
3957	.d3cd		8d 31 88	sta $8831	                sta L8831
3958	.d3d0		60		rts		                rts

3960	.d3d1						LD3D2:
3961	.d3d1		9c 47 88	stz $8847	                stz L8847
3962	.d3d4		9c 30 88	stz $8830	                stz L8830
3963	.d3d7		9c 31 88	stz $8831	                stz L8831
3964	.d3da		9c 34 88	stz $8834	                stz L8834
3965	.d3dd		9c 35 88	stz $8835	                stz L8835
3966	.d3e0		ad 32 88	lda $8832	                lda L8832
3967	.d3e3		0a		asl a		                asl a
3968	.d3e4		8d 36 88	sta $8836	                sta L8836
3969	.d3e7		ad 33 88	lda $8833	                lda L8833
3970	.d3ea		2a		rol a		                rol a
3971	.d3eb		8d 37 88	sta $8837	                sta L8837
3972	.d3ee		ad 46 88	lda $8846	                lda L8846
3973	.d3f1		89 02		bit #$02	                bit #$02
3974	.d3f3		f0 06		beq $d3fb	                beq LD3FC
3975	.d3f5		0e 36 88	asl $8836	                asl L8836
3976	.d3f8		2e 37 88	rol $8837	                rol L8837
3977	.d3fb						LD3FC:
3978	.d3fb		ad 46 88	lda $8846	                lda L8846
3979	.d3fe		4a		lsr a		                lsr a
3980	.d3ff		4a		lsr a		                lsr a
3981	.d400		ac 32 88	ldy $8832	                ldy L8832
3982	.d403		ad 33 88	lda $8833	                lda L8833
3983	.d406		20 c4 d4	jsr $d4c4	                jsr LD4C5
3984	.d409		38		sec		                sec
3985	.d40a		a2 fc		ldx #$fc	                ldx #$FC
3986	.d40c						LD40D:
3987	.d40c		bd 3c 87	lda $873c,x	                lda L873C,x
3988	.d40f		fd 44 87	sbc $8744,x	                sbc L8744,x
3989	.d412		9d 44 87	sta $8744,x	                sta L8744,x
3990	.d415		e8		inx		                inx
3991	.d416		d0 f4		bne $d40c	                bne LD40D
3992	.d418		60		rts		                rts

3994	.d419						LD41A:
3995	.d419		20 1a c9	jsr $c91a	                jsr copyGraphicsCursorPixelsToOldGraphicsCursorPixels
3996	.d41c		64 e1		stz $e1		                stz $E1
3997	.d41e		a2 20		ldx #$20	                ldx #$20
3998	.d420		20 26 d4	jsr $d426	                jsr LD427
3999	.d423		60		rts		                rts

4001	.d424						LD425:
4002	.d424		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX
4003	.d426						LD427:
4004	.d426		a0 1b		ldy #$1b	                ldy #VDUVariables.queueEnd-9
4005	.d428		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
4006	.d42b		a2 1b		ldx #$1b	                ldx #$1B
4007	.d42d		20 67 d2	jsr $d267	                jsr LD268
4008	.d430		20 85 d4	jsr $d485	                jsr LD486
4009	.d433		20 12 d5	jsr $d512	                jsr LD513
4010	.d436		a0 0c		ldy #$0c	                ldy #$0C
4011	.d438		20 aa d4	jsr $d4aa	                jsr LD4AB
4012	.d43b		20 12 d5	jsr $d512	                jsr LD513
4013	.d43e		c9 20		cmp #$20	                cmp #$20
4014	.d440		90 05		bcc $d447	                bcc LD448
4015	.d442		68		pla		                pla
4016	.d443		68		pla		                pla
4017	.d444		68		pla		                pla
4018	.d445		68		pla		                pla
4019	.d446		60		rts		                rts

4021	.d447						LD448:
4022	.d447		8c 44 88	sty $8844	                sty L8844
4023	.d44a		8d 45 88	sta $8845	                sta L8845
4024	.d44d		ad 46 88	lda $8846	                lda L8846
4025	.d450		89 02		bit #$02	                bit #$02
4026	.d452		f0 06		beq $d45a	                beq LD45B
4027	.d454		4e 45 88	lsr $8845	                lsr L8845
4028	.d457		6e 44 88	ror $8844	                ror L8844
4029	.d45a						LD45B:
4030	.d45a		ac 44 88	ldy $8844	                ldy L8844
4031	.d45d		ad 45 88	lda $8845	                lda L8845
4032	.d460		20 2e c9	jsr $c92e	                jsr negateAY
4033	.d463		8c 32 88	sty $8832	                sty L8832
4034	.d466		8d 33 88	sta $8833	                sta L8833
4035	.d469		0d 32 88	ora $8832	                ora L8832
4036	.d46c		38		sec		                sec
4037	.d46d		60		rts		                rts

4039	.d46e						LD46F:
4040	.d46e		64 da		stz $da		                stz $DA
4041	.d470		b9 1b 03	lda $031b,y	                lda $031B,y
4042	.d473		d9 28 03	cmp $0328,y	                cmp $0328,y
4043	.d476		f0 02		beq $d47a	                beq LD47B
4044	.d478		e6 da		inc $da		                inc $DA
4045	.d47a						LD47B:
4046	.d47a		b9 1c 03	lda $031c,y	                lda $031C,y
4047	.d47d		f9 29 03	sbc $0329,y	                sbc $0329,y
4048	.d480		d0 02		bne $d484	                bne LD485
4049	.d482		a5 da		lda $da		                lda $DA
4050	.d484						LD485:
4051	.d484		60		rts		                rts

4053	.d485						LD486:
4054	.d485		ae 55 03	ldx $0355	                ldx $0355
4055	.d488		bd be d4	lda $d4be,x	                lda LD4BF,x
4056	.d48b		8d 46 88	sta $8846	                sta L8846
4057	.d48e		4a		lsr a		                lsr a
4058	.d48f		48		pha		                pha
4059	.d490		a2 04		ldx #$04	                ldx #$04
4060	.d492						LD493:
4061	.d492		9e 37 88	stz $8837,x	                stz L8837,x
4062	.d495		ca		dex		                dex
4063	.d496		d0 fa		bne $d492	                bne LD493
4064	.d498		20 9f d4	jsr $d49f	                jsr LD4A0
4065	.d49b		68		pla		                pla
4066	.d49c		4a		lsr a		                lsr a
4067	.d49d		a2 02		ldx #$02	                ldx #$02
4068	.d49f						LD4A0:
4069	.d49f		bc 1b 03	ldy $031b,x	                ldy $031B,x
4070	.d4a2		bd 1c 03	lda $031c,x	                lda $031C,x
4071	.d4a5		20 c4 d4	jsr $d4c4	                jsr LD4C5
4072	.d4a8		a0 10		ldy #$10	                ldy #$10
4073	.d4aa						LD4AB:
4074	.d4aa		18		clc		                clc
4075	.d4ab		a2 fc		ldx #$fc	                ldx #$FC
4076	.d4ad						LD4AE:
4077	.d4ad		bd 3c 87	lda $873c,x	                lda L873C,x
4078	.d4b0		79 30 88	adc $8830,y	                adc L8830,y
4079	.d4b3		9d 3c 87	sta $873c,x	                sta L873C,x
4080	.d4b6		9d 44 87	sta $8744,x	                sta L8744,x
4081	.d4b9		c8		iny		                iny
4082	.d4ba		e8		inx		                inx
4083	.d4bb		d0 f0		bne $d4ad	                bne LD4AE
4084	.d4bd		60		rts		                rts

4086	.d4be						LD4BF:
4087	>d4be		02				                .byte $02
4088	.d4bf		00		brk #		                brk
4089	.d4c0		01 ff		ora ($ff,x)	                ora ($FF,x)
4090	.d4c2		00		brk #		                brk
4091							;ORA (&8C,x)      :\ D4C4= 01       ..
4092	>d4c3		01				                .byte $01
4093	.d4c4						LD4C5:
4094	.d4c4		8c 3c 88	sty $883c	                sty L883C
4095	.d4c7		90 04		bcc $d4cd	                bcc LD4CE
4096	.d4c9		0e 3c 88	asl $883c	                asl L883C
4097	.d4cc		2a		rol a		                rol a
4098	.d4cd						LD4CE:
4099	.d4cd		8d 3d 88	sta $883d	                sta L883D
4100	.d4d0		ac 3c 88	ldy $883c	                ldy L883C
4101	.d4d3		aa		tax		                tax
4102	.d4d4		10 03		bpl $d4d9	                bpl LD4DA
4103	.d4d6		20 2e c9	jsr $c92e	                jsr negateAY
4104	.d4d9						LD4DA:
4105	.d4d9		8c 3c 88	sty $883c	                sty L883C
4106	.d4dc		8d 3d 88	sta $883d	                sta L883D
4107	.d4df		8c 40 88	sty $8840	                sty L8840
4108	.d4e2		9c 42 88	stz $8842	                stz L8842
4109	.d4e5		9c 43 88	stz $8843	                stz L8843
4110	.d4e8		a0 0f		ldy #$0f	                ldy #$0F
4111	.d4ea		4a		lsr a		                lsr a
4112	.d4eb		8d 41 88	sta $8841	                sta L8841
4113	.d4ee		6e 40 88	ror $8840	                ror L8840
4114	.d4f1						LD4F2:
4115	.d4f1		90 13		bcc $d506	                bcc LD507
4116	.d4f3		18		clc		                clc
4117	.d4f4		ad 3c 88	lda $883c	                lda L883C
4118	.d4f7		6d 42 88	adc $8842	                adc L8842
4119	.d4fa		8d 42 88	sta $8842	                sta L8842
4120	.d4fd		ad 3d 88	lda $883d	                lda L883D
4121	.d500		6d 43 88	adc $8843	                adc L8843
4122	.d503		8d 43 88	sta $8843	                sta L8843
4123	.d506						LD507:
4124	.d506		a2 03		ldx #$03	                ldx #$03
4125	.d508						LD509:
4126	.d508		7e 40 88	ror $8840,x	                ror L8840,x
4127	.d50b		ca		dex		                dex
4128	.d50c		10 fa		bpl $d508	                bpl LD509
4129	.d50e		88		dey		                dey
4130	.d50f		10 e0		bpl $d4f1	                bpl LD4F2
4131	.d511		60		rts		                rts

4133	.d512						LD513:
4134	.d512		a2 02		ldx #$02	                ldx #$02
4135	.d514						LD515:
4136	.d514		9e 3c 88	stz $883c,x	                stz L883C,x
4137	.d517		74 db		stz $db,x	                stz $DB,x
4138	.d519		ca		dex		                dex
4139	.d51a		10 f8		bpl $d514	                bpl LD515
4140	.d51c		a0 03		ldy #$03	                ldy #$03
4141	.d51e						LD51F:
4142	.d51e		b9 40 88	lda $8840,y	                lda L8840,y
4143	.d521		85 da		sta $da		                sta $DA
4144	.d523		5a		phy		                phy
4145	.d524		a0 03		ldy #$03	                ldy #$03
4146	.d526						LD527:
4147	.d526		5a		phy		                phy
4148	.d527		38		sec		                sec
4149	.d528		2e 3c 88	rol $883c	                rol L883C
4150	.d52b		2e 3d 88	rol $883d	                rol L883D
4151	.d52e		2e 3e 88	rol $883e	                rol L883E
4152	.d531		a2 01		ldx #$01	                ldx #$01
4153	.d533		a5 db		lda $db		                lda $DB
4154	.d535						LD536:
4155	.d535		06 da		asl $da		                asl $DA
4156	.d537		2a		rol a		                rol a
4157	.d538		26 dc		rol $dc		                rol $DC
4158	.d53a		26 dd		rol $dd		                rol $DD
4159	.d53c		ca		dex		                dex
4160	.d53d		10 f6		bpl $d535	                bpl LD536
4161	.d53f		85 db		sta $db		                sta $DB
4162	.d541		38		sec		                sec
4163	.d542		ed 3c 88	sbc $883c	                sbc L883C
4164	.d545		aa		tax		                tax
4165	.d546		a5 dc		lda $dc		                lda $DC
4166	.d548		ed 3d 88	sbc $883d	                sbc L883D
4167	.d54b		a8		tay		                tay
4168	.d54c		a5 dd		lda $dd		                lda $DD
4169	.d54e		ed 3e 88	sbc $883e	                sbc L883E
4170	.d551		90 0b		bcc $d55e	                bcc LD55F
4171	.d553		85 dd		sta $dd		                sta $DD
4172	.d555		84 dc		sty $dc		                sty $DC
4173	.d557		86 db		stx $db		                stx $DB
4174	.d559		ee 3c 88	inc $883c	                inc L883C
4175	.d55c		80 03		bra $d561	                bra LD562

4177	.d55e						LD55F:
4178	.d55e		ce 3c 88	dec $883c	                dec L883C
4179	.d561						LD562:
4180	.d561		7a		ply		                ply
4181	.d562		88		dey		                dey
4182	.d563		10 c1		bpl $d526	                bpl LD527
4183	.d565		7a		ply		                ply
4184	.d566		88		dey		                dey
4185	.d567		10 b5		bpl $d51e	                bpl LD51F
4186	.d569		4e 3e 88	lsr $883e	                lsr L883E
4187	.d56c		6e 3d 88	ror $883d	                ror L883D
4188	.d56f		6e 3c 88	ror $883c	                ror L883C
4189	.d572		9c 3e 88	stz $883e	                stz L883E
4190	.d575		9c 3f 88	stz $883f	                stz L883F
4191	.d578		ac 3c 88	ldy $883c	                ldy L883C
4192	.d57b		ad 3d 88	lda $883d	                lda L883D
4193	.d57e		60		rts		                rts

4195							;-------------------------------------------------------------------------
4196							;
4197							; Add dimension of region to a coordinate.
4198							;
4199							; entry:
4200							;
4201							; X = VDU variable offset of coordinate
4202							;
4203							; A = VDU variable offset of minimum coordinate of region
4204							;
4205							; Y = VDU variable offset of maximum coordinate of region
4206							;
4207							; ZTEMP?0 = VDU variable offset for result
4208							;
4209							; exit:
4210							;
4211							; result variable = coordinate+(min-max)
4212							;
4213	.d57f						addRegionDimensionsToVDUVariableCoordinates:
4214	.d57f		20 8c d5	jsr $d58c	                jsr addRegionDimensionToVDUVariableCoordinate ;do X

4216							                ; bump offsets to do Y.
4217	.d582		c8		iny		                iny
4218	.d583		c8		iny		                iny
4219	.d584		e8		inx		                inx
4220	.d585		e8		inx		                inx
4221	.d586		1a		inc a		                inc a
4222	.d587		1a		inc a		                inc a
4223	.d588		e6 da		inc $da		                inc ZTEMP+0
4224	.d58a		e6 da		inc $da		                inc ZTEMP+0

4226							                ; TODO - not a great name. Could probably just be
4227							                ; addDifference, or something.
4228	.d58c						addRegionDimensionToVDUVariableCoordinate:
4229	.d58c		da		phx		                phx                          ;save VX
4230	.d58d		5a		phy		                phy                          ;save VY
4231	.d58e		48		pha		                pha                          ;save VA
4232	.d58f		18		clc		                clc
4233	.d590		bd 00 03	lda $0300,x	                lda vduv+0,x                 ;<VX
4234	.d593		79 00 03	adc $0300,y	                adc vduv+0,y                 ;<(VX+VY)
4235	.d596		85 de		sta $de		                sta ZTEMPC+0                 ;ZTEMPC?0=<(VX+VY)
4236	.d598		bd 01 03	lda $0301,x	                lda vduv+1,x                 ;>VX
4237	.d59b		79 01 03	adc $0301,y	                adc vduv+1,y                 ;>(VX+VY)
4238	.d59e		fa		plx		                plx                          ;X=VA
4239	.d59f		48		pha		                pha                          ;save >(VX+VY)
4240	.d5a0		a4 da		ldy $da		                ldy ZTEMP+0                  ;Y=VT
4241	.d5a2		38		sec		                sec
4242	.d5a3		a5 de		lda $de		                lda ZTEMPC+0                 ;<(VX+VY)
4243	.d5a5		fd 00 03	sbc $0300,x	                sbc vduv+0,x                 ;<(VX+VY-VA)
4244	.d5a8		99 00 03	sta $0300,y	                sta vduv+0,y                 ;<VT=<(VX+VY-VA)
4245	.d5ab		68		pla		                pla                          ;>(VX+VY)
4246	.d5ac		fd 01 03	sbc $0301,x	                sbc vduv+1,x                 ;>(VX+VY-VA)
4247	.d5af		99 01 03	sta $0301,y	                sta vduv+1,y                 ;>VT=<(VX+VY-VA)
4248	.d5b2		8a		txa		                txa                          ;restore old A
4249	.d5b3		7a		ply		                ply                          ;restore old Y
4250	.d5b4		fa		plx		                plx                          ;restore old X
4251	.d5b5		60		rts		                rts

4253							;-------------------------------------------------------------------------
4254							;
4255							; Sort points by Y coordinate, then X.
4256							;
4257							; entry:
4258							;
4259							; X = VDU variable offset of point A (4 bytes: X;Y;)
4260							;
4261							; Y = VDU variable offset of point B (4 bytes: X;Y;)
4262							;
4263							; exit:
4264							;
4265							; X = offset of point with lesser Y (or lesser X, if same Y)
4266							;
4267							; Y = offset of point with greater Y (or greater X, if same Y)
4268							;
4269	.d5b6						sortVDUVariableCoordinates:
4270	.d5b6		38		sec		                sec
4271	.d5b7		b9 02 03	lda $0302,y	                lda vduv+2,y
4272	.d5ba		fd 02 03	sbc $0302,x	                sbc vduv+2,x
4273	.d5bd		85 de		sta $de		                sta ZTEMPC
4274	.d5bf		b9 03 03	lda $0303,y	                lda vduv+3,y
4275	.d5c2		fd 03 03	sbc $0303,x	                sbc vduv+3,x
4276	.d5c5		30 09		bmi $d5d0	                bmi exchangeXAndY           ;taken if PX.y>PY.y
4277	.d5c7		05 de		ora $de		                ora ZTEMPC
4278	.d5c9		d0 09		bne $d5d4	                bne rtsD5D5                  ;taken if PX.y<PY.y

4280							;-------------------------------------------------------------------------
4281							;
4282							; Sort words by value.
4283							;
4284							; entry:
4285							;
4286							; X = VDU variable offset of word A
4287							;
4288							; Y = VDU variable offset of word B
4289							;
4290							; exit:
4291							;
4292							; X = offset of lesser value
4293							;
4294							; Y = offset of greater value
4295							;
4296	.d5cb						sortVDUVariableWords:
4297	.d5cb		20 d5 d5	jsr $d5d5	                jsr compareVDUVariableWords
4298	.d5ce		10 04		bpl $d5d4	                bpl rtsD5D5
4299	.d5d0						exchangeXAndY:
4300	.d5d0		8a		txa		                txa
4301	.d5d1		5a		phy		                phy
4302	.d5d2		fa		plx		                plx
4303	.d5d3		a8		tay		                tay
4304	.d5d4						rtsD5D5:
4305	.d5d4		60		rts		                rts

4307							;-------------------------------------------------------------------------
4308							;
4309							; Compare 2 16-bit VDU variable values.
4310							;
4311							; entry:
4312							;
4313							; X = offset of one variable
4314							;
4315							; Y = offset of the other variable
4316							;
4317							; exit:
4318							;
4319							; N=1 if X>Y
4320							;
4321	.d5d5						compareVDUVariableWords:
4322	.d5d5		b9 00 03	lda $0300,y	                lda vduv+0,y
4323	.d5d8		dd 00 03	cmp $0300,x	                cmp vduv+0,x
4324	.d5db		b9 01 03	lda $0301,y	                lda vduv+1,y
4325	.d5de		fd 01 03	sbc $0301,x	                sbc vduv+1,x
4326	.d5e1		60		rts		                rts

4328							;-------------------------------------------------------------------------

4330	.d5e2						LD5E3:
4331	.d5e2		ee 47 88	inc $8847	                inc L8847
4332	.d5e5						LD5E6:
4333	.d5e5		ad 47 88	lda $8847	                lda L8847
4334	.d5e8		d0 0f		bne $d5f9	                bne LD5FA
4335	.d5ea		ad 32 88	lda $8832	                lda L8832
4336	.d5ed		0d 33 88	ora $8833	                ora L8833
4337	.d5f0		f0 f0		beq $d5e2	                beq LD5E3
4338	.d5f2		a2 00		ldx #$00	                ldx #$00
4339	.d5f4		20 43 d6	jsr $d643	                jsr LD644
4340	.d5f7		10 49		bpl $d642	                bpl LD643
4341	.d5f9						LD5FA:
4342	.d5f9		a2 02		ldx #$02	                ldx #$02
4343	.d5fb		20 43 d6	jsr $d643	                jsr LD644
4344	.d5fe		10 42		bpl $d642	                bpl LD643
4345	.d600		a2 00		ldx #$00	                ldx #$00
4346	.d602		20 09 d6	jsr $d609	                jsr LD60A
4347	.d605		10 3b		bpl $d642	                bpl LD643
4348	.d607		a2 02		ldx #$02	                ldx #$02
4349	.d609						LD60A:
4350	.d609		bd 30 88	lda $8830,x	                lda L8830,x
4351	.d60c		d0 03		bne $d611	                bne LD612
4352	.d60e		de 31 88	dec $8831,x	                dec L8831,x
4353	.d611						LD612:
4354	.d611		de 30 88	dec $8830,x	                dec L8830,x
4355	.d614		8a		txa		                txa
4356	.d615		4a		lsr a		                lsr a
4357	.d616		1a		inc a		                inc a
4358	.d617		2c 46 88	bit $8846	                bit L8846
4359	.d61a		f0 03		beq $d61f	                beq LD620
4360	.d61c		20 1f d6	jsr $d61f	                jsr LD620
4361	.d61f						LD620:
4362	.d61f		20 35 d6	jsr $d635	                jsr LD636
4363	.d622		18		clc		                clc
4364	.d623		ad 40 88	lda $8840	                lda L8840
4365	.d626		7d 34 88	adc $8834,x	                adc L8834,x
4366	.d629		8d 40 88	sta $8840	                sta L8840
4367	.d62c		ad 41 88	lda $8841	                lda L8841
4368	.d62f		7d 35 88	adc $8835,x	                adc L8835,x
4369	.d632		8d 41 88	sta $8841	                sta L8841
4370	.d635						LD636:
4371	.d635		08		php		                php
4372	.d636		bd 34 88	lda $8834,x	                lda L8834,x
4373	.d639		d0 03		bne $d63e	                bne LD63F
4374	.d63b		de 35 88	dec $8835,x	                dec L8835,x
4375	.d63e						LD63F:
4376	.d63e		de 34 88	dec $8834,x	                dec L8834,x
4377	.d641		28		plp		                plp
4378	.d642						LD643:
4379	.d642		60		rts		                rts

4381	.d643						LD644:
4382	.d643		fe 30 88	inc $8830,x	                inc L8830,x
4383	.d646		d0 03		bne $d64b	                bne LD64C
4384	.d648		fe 31 88	inc $8831,x	                inc L8831,x
4385	.d64b						LD64C:
4386	.d64b		8a		txa		                txa
4387	.d64c		4a		lsr a		                lsr a
4388	.d64d		1a		inc a		                inc a
4389	.d64e		2c 46 88	bit $8846	                bit L8846
4390	.d651		f0 03		beq $d656	                beq LD657
4391	.d653		20 56 d6	jsr $d656	                jsr LD657
4392	.d656						LD657:
4393	.d656		20 6c d6	jsr $d66c	                jsr LD66D
4394	.d659		38		sec		                sec
4395	.d65a		ad 40 88	lda $8840	                lda L8840
4396	.d65d		fd 34 88	sbc $8834,x	                sbc L8834,x
4397	.d660		8d 40 88	sta $8840	                sta L8840
4398	.d663		ad 41 88	lda $8841	                lda L8841
4399	.d666		fd 35 88	sbc $8835,x	                sbc L8835,x
4400	.d669		8d 41 88	sta $8841	                sta L8841
4401	.d66c						LD66D:
4402	.d66c		08		php		                php
4403	.d66d		fe 34 88	inc $8834,x	                inc L8834,x
4404	.d670		d0 03		bne $d675	                bne LD676
4405	.d672		fe 35 88	inc $8835,x	                inc L8835,x
4406	.d675						LD676:
4407	.d675		28		plp		                plp
4408	.d676		60		rts		                rts

4410	.d677						LD678:
4411	.d677		48		pha		                pha
4412	.d678		38		sec		                sec
4413	.d679		b9 00 03	lda $0300,y	                lda $0300,y
4414	.d67c		fd 00 03	sbc $0300,x	                sbc $0300,x
4415	.d67f		48		pha		                pha
4416	.d680		b9 01 03	lda $0301,y	                lda $0301,y
4417	.d683		fd 01 03	sbc $0301,x	                sbc $0301,x
4418	.d686		7a		ply		                ply
4419	.d687		c9 80		cmp #$80	                cmp #$80
4420	.d689		90 03		bcc $d68e	                bcc LD68F
4421	.d68b		20 2e c9	jsr $c92e	                jsr negateAY
4422	.d68e						LD68F:
4423	.d68e		fa		plx		                plx
4424	.d68f		9d 01 03	sta $0301,x	                sta $0301,x
4425	.d692		98		tya		                tya
4426	.d693		9d 00 03	sta $0300,x	                sta $0300,x
4427	.d696		60		rts		                rts

4429	.d697						LD698:
4430	.d697		a2 37		ldx #$37	                ldx #$37
4431	.d699		20 22 d7	jsr $d722	                jsr LD723
4432	.d69c						LD69D:
4433	.d69c		3c 0a 03	bit $030a,x	                bit $030A,x
4434	.d69f		70 10		bvs $d6b1	                bvs LD6B2
4435	.d6a1		60		rts		                rts

4437	.d6a2						LD6A3:
4438	.d6a2		a2 2c		ldx #$2c	                ldx #$2C
4439	.d6a4		20 22 d7	jsr $d722	                jsr LD723
4440	.d6a7						LD6A8:
4441	.d6a7		3c 0a 03	bit $030a,x	                bit $030A,x
4442	.d6aa		50 05		bvc $d6b1	                bvc LD6B2
4443	.d6ac		60		rts		                rts

4445	.d6ad						LD6AE:
4446	.d6ad		fa		plx		                plx
4447	.d6ae		20 25 d7	jsr $d725	                jsr LD726
4448	.d6b1						LD6B2:
4449	.d6b1		bd 09 03	lda $0309,x	                lda $0309,x
4450	.d6b4		30 10		bmi $d6c6	                bmi LD6C7
4451	.d6b6		a0 03		ldy #$03	                ldy #$03
4452	.d6b8		da		phx		                phx
4453	.d6b9						LD6BA:
4454	.d6b9		bd 00 03	lda $0300,x	                lda $0300,x
4455	.d6bc		dd 1e 88	cmp $881e,x	                cmp L881E,x
4456	.d6bf		d0 ec		bne $d6ad	                bne LD6AE
4457	.d6c1		e8		inx		                inx
4458	.d6c2		88		dey		                dey
4459	.d6c3		10 f4		bpl $d6b9	                bpl LD6BA
4460	.d6c5		fa		plx		                plx
4461	.d6c6						LD6C7:
4462	.d6c6		60		rts		                rts

4464	.d6c7						LD6C8:
4465	.d6c7		20 fc d6	jsr $d6fc	                jsr LD6FD
4466	.d6ca		bd 0a 03	lda $030a,x	                lda $030A,x
4467	.d6cd		0a		asl a		                asl a
4468	.d6ce		0a		asl a		                asl a
4469	.d6cf		bd 0a 03	lda $030a,x	                lda $030A,x
4470	.d6d2		6a		ror a		                ror a
4471	.d6d3		85 da		sta $da		                sta $DA
4472	.d6d5		18		clc		                clc
4473	.d6d6		10 0f		bpl $d6e7	                bpl LD6E8
4474	.d6d8		bd 02 03	lda $0302,x	                lda $0302,x
4475	.d6db		ed 04 03	sbc $0304	                sbc $0304
4476	.d6de		a8		tay		                tay
4477	.d6df		bd 03 03	lda $0303,x	                lda $0303,x
4478	.d6e2		ed 05 03	sbc $0305	                sbc $0305
4479	.d6e5		80 0d		bra $d6f4	                bra LD6F5

4481	.d6e7						LD6E8:
4482	.d6e7		ad 00 03	lda $0300	                lda $0300
4483	.d6ea		fd 02 03	sbc $0302,x	                sbc $0302,x
4484	.d6ed		a8		tay		                tay
4485	.d6ee		ad 01 03	lda $0301	                lda $0301
4486	.d6f1		fd 03 03	sbc $0303,x	                sbc $0303,x
4487	.d6f4						LD6F5:
4488	.d6f4		20 a3 d7	jsr $d7a3	                jsr LD7A4
4489	.d6f7		20 fc d6	jsr $d6fc	                jsr LD6FD
4490	.d6fa		80 58		bra $d754	                bra LD755

4492	.d6fc						LD6FD:
4493	.d6fc		8a		txa		                txa
4494	.d6fd		1a		inc a		                inc a
4495	.d6fe		48		pha		                pha
4496	.d6ff		1a		inc a		                inc a
4497	.d700		a8		tay		                tay
4498	.d701		20 be e2	jsr $e2be	                jsr exchangeTwoVDUBytes
4499	.d704		e8		inx		                inx
4500	.d705		e8		inx		                inx
4501	.d706		c8		iny		                iny
4502	.d707		c8		iny		                iny
4503	.d708		20 be e2	jsr $e2be	                jsr exchangeTwoVDUBytes
4504	.d70b		fa		plx		                plx
4505	.d70c		20 10 d7	jsr $d710	                jsr LD711
4506	.d70f		ca		dex		                dex
4507	.d710						LD711:
4508	.d710		bd 08 03	lda $0308,x	                lda $0308,x
4509	.d713		49 ff		eor #$ff	                eor #$FF
4510	.d715		9d 08 03	sta $0308,x	                sta $0308,x
4511	.d718		60		rts		                rts

4513	.d719						LD71A:
4514	.d719		20 25 d7	jsr $d725	                jsr LD726
4515	.d71c						LD71D:
4516	.d71c		bd 09 03	lda $0309,x	                lda $0309,x
4517	.d71f		10 f8		bpl $d719	                bpl LD71A
4518	.d721		60		rts		                rts

4520	.d722						LD723:
4521	.d722		20 1c d7	jsr $d71c	                jsr LD71D
4522	.d725						LD726:
4523	.d725		bd 09 03	lda $0309,x	                lda $0309,x
4524	.d728		10 2a		bpl $d754	                bpl LD755
4525	.d72a						LD72B:
4526	.d72a		18		clc		                clc
4527	.d72b		bd 08 03	lda $0308,x	                lda $0308,x
4528	.d72e		7d 04 03	adc $0304,x	                adc $0304,x
4529	.d731		9d 08 03	sta $0308,x	                sta $0308,x
4530	.d734		bd 09 03	lda $0309,x	                lda $0309,x
4531	.d737		7d 05 03	adc $0305,x	                adc $0305,x
4532	.d73a		9d 09 03	sta $0309,x	                sta $0309,x
4533	.d73d		30 03		bmi $d742	                bmi LD743
4534	.d73f		20 54 d7	jsr $d754	                jsr LD755
4535	.d742						LD743:
4536	.d742		da		phx		                phx
4537	.d743		e8		inx		                inx
4538	.d744		e8		inx		                inx
4539	.d745		3c 08 03	bit $0308,x	                bit $0308,x
4540	.d748		30 23		bmi $d76d	                bmi LD76E
4541	.d74a						LD74B:
4542	.d74a		fe 00 03	inc $0300,x	                inc $0300,x
4543	.d74d		d0 03		bne $d752	                bne LD753
4544	.d74f		fe 01 03	inc $0301,x	                inc $0301,x
4545	.d752						LD753:
4546	.d752		fa		plx		                plx
4547	.d753		60		rts		                rts

4549	.d754						LD755:
4550	.d754		38		sec		                sec
4551	.d755		bd 08 03	lda $0308,x	                lda $0308,x
4552	.d758		fd 06 03	sbc $0306,x	                sbc $0306,x
4553	.d75b		9d 08 03	sta $0308,x	                sta $0308,x
4554	.d75e		bd 09 03	lda $0309,x	                lda $0309,x
4555	.d761		fd 07 03	sbc $0307,x	                sbc $0307,x
4556	.d764		9d 09 03	sta $0309,x	                sta $0309,x
4557	.d767		da		phx		                phx
4558	.d768		3c 0a 03	bit $030a,x	                bit $030A,x
4559	.d76b		50 dd		bvc $d74a	                bvc LD74B
4560	.d76d						LD76E:
4561	.d76d		bd 00 03	lda $0300,x	                lda $0300,x
4562	.d770		d0 03		bne $d775	                bne LD776
4563	.d772		de 01 03	dec $0301,x	                dec $0301,x
4564	.d775						LD776:
4565	.d775		de 00 03	dec $0300,x	                dec $0300,x
4566	.d778		fa		plx		                plx
4567	.d779		60		rts		                rts

4569	.d77a						LD77B:
4570	.d77a		18		clc		                clc
4571	.d77b		bd 0a 03	lda $030a,x	                lda $030A,x
4572	.d77e		85 da		sta $da		                sta $DA
4573	.d780		10 0f		bpl $d791	                bpl LD792
4574	.d782		bd 02 03	lda $0302,x	                lda $0302,x
4575	.d785		ed 06 03	sbc $0306	                sbc $0306
4576	.d788		a8		tay		                tay
4577	.d789		bd 03 03	lda $0303,x	                lda $0303,x
4578	.d78c		ed 07 03	sbc $0307	                sbc $0307
4579	.d78f		80 0d		bra $d79e	                bra LD79F

4581	.d791						LD792:
4582	.d791		ad 02 03	lda $0302	                lda $0302
4583	.d794		fd 02 03	sbc $0302,x	                sbc $0302,x
4584	.d797		a8		tay		                tay
4585	.d798		ad 03 03	lda $0303	                lda $0303
4586	.d79b		fd 03 03	sbc $0303,x	                sbc $0303,x
4587	.d79e						LD79F:
4588	.d79e		20 a3 d7	jsr $d7a3	                jsr LD7A4
4589	.d7a1		80 87		bra $d72a	                bra LD72B

4591	.d7a3						LD7A4:
4592	.d7a3		84 de		sty $de		                sty $DE
4593	.d7a5		85 df		sta $df		                sta $DF
4594	.d7a7		bd 02 03	lda $0302,x	                lda $0302,x
4595	.d7aa		bc 03 03	ldy $0303,x	                ldy $0303,x
4596	.d7ad		06 da		asl $da		                asl $DA
4597	.d7af		b0 0a		bcs $d7bb	                bcs LD7BC
4598	.d7b1		65 de		adc $de		                adc $DE
4599	.d7b3		9d 02 03	sta $0302,x	                sta $0302,x
4600	.d7b6		98		tya		                tya
4601	.d7b7		65 df		adc $df		                adc $DF
4602	.d7b9		80 08		bra $d7c3	                bra LD7C4

4604	.d7bb						LD7BC:
4605	.d7bb		e5 de		sbc $de		                sbc $DE
4606	.d7bd		9d 02 03	sta $0302,x	                sta $0302,x
4607	.d7c0		98		tya		                tya
4608	.d7c1		e5 df		sbc $df		                sbc $DF
4609	.d7c3						LD7C4:
4610	.d7c3		9d 03 03	sta $0303,x	                sta $0303,x
4611	.d7c6		a9 00		lda #$00	                lda #$00
4612	.d7c8		3c 09 03	bit $0309,x	                bit $0309,x
4613	.d7cb		10 01		bpl $d7ce	                bpl LD7CF
4614	.d7cd		3a		dec a		                dec a
4615	.d7ce						LD7CF:
4616	.d7ce		85 dc		sta $dc		                sta $DC
4617	.d7d0		4a		lsr a		                lsr a
4618	.d7d1		85 dd		sta $dd		                sta $DD
4619	.d7d3		a0 10		ldy #$10	                ldy #$10
4620	.d7d5						LD7D6:
4621	.d7d5		a5 dd		lda $dd		                lda $DD
4622	.d7d7		0a		asl a		                asl a
4623	.d7d8		3e 08 03	rol $0308,x	                rol $0308,x
4624	.d7db		3e 09 03	rol $0309,x	                rol $0309,x
4625	.d7de		26 dc		rol $dc		                rol $DC
4626	.d7e0		26 dd		rol $dd		                rol $DD
4627	.d7e2		06 de		asl $de		                asl $DE
4628	.d7e4		26 df		rol $df		                rol $DF
4629	.d7e6		90 19		bcc $d801	                bcc LD802
4630	.d7e8		18		clc		                clc
4631	.d7e9		a5 dc		lda $dc		                lda $DC
4632	.d7eb		7d 04 03	adc $0304,x	                adc $0304,x
4633	.d7ee		85 dc		sta $dc		                sta $DC
4634	.d7f0		a5 dd		lda $dd		                lda $DD
4635	.d7f2		7d 05 03	adc $0305,x	                adc $0305,x
4636	.d7f5		85 dd		sta $dd		                sta $DD
4637	.d7f7		90 08		bcc $d801	                bcc LD802
4638	.d7f9		fe 08 03	inc $0308,x	                inc $0308,x
4639	.d7fc		d0 03		bne $d801	                bne LD802
4640	.d7fe		fe 09 03	inc $0309,x	                inc $0309,x
4641	.d801						LD802:
4642	.d801		88		dey		                dey
4643	.d802		d0 d1		bne $d7d5	                bne LD7D6
4644	.d804		3c 09 03	bit $0309,x	                bit $0309,x
4645	.d807		50 0b		bvc $d814	                bvc LD815
4646	.d809		a5 dc		lda $dc		                lda $DC
4647	.d80b		9d 08 03	sta $0308,x	                sta $0308,x
4648	.d80e		a5 dd		lda $dd		                lda $DD
4649	.d810		9d 09 03	sta $0309,x	                sta $0309,x
4650	.d813		60		rts		                rts

4652	.d814						LD815:
4653	.d814		a0 10		ldy #$10	                ldy #$10
4654	.d816						LD817:
4655	.d816		26 dc		rol $dc		                rol $DC
4656	.d818		26 dd		rol $dd		                rol $DD
4657	.d81a		3e 08 03	rol $0308,x	                rol $0308,x
4658	.d81d		3e 09 03	rol $0309,x	                rol $0309,x
4659	.d820		38		sec		                sec
4660	.d821		bd 08 03	lda $0308,x	                lda $0308,x
4661	.d824		fd 06 03	sbc $0306,x	                sbc $0306,x
4662	.d827		85 de		sta $de		                sta $DE
4663	.d829		bd 09 03	lda $0309,x	                lda $0309,x
4664	.d82c		fd 07 03	sbc $0307,x	                sbc $0307,x
4665	.d82f		90 08		bcc $d839	                bcc LD83A
4666	.d831		9d 09 03	sta $0309,x	                sta $0309,x
4667	.d834		a5 de		lda $de		                lda $DE
4668	.d836		9d 08 03	sta $0308,x	                sta $0308,x
4669	.d839						LD83A:
4670	.d839		88		dey		                dey
4671	.d83a		d0 da		bne $d816	                bne LD817
4672	.d83c		26 dc		rol $dc		                rol $DC
4673	.d83e		26 dd		rol $dd		                rol $DD
4674	.d840		38		sec		                sec
4675	.d841		bd 08 03	lda $0308,x	                lda $0308,x
4676	.d844		fd 06 03	sbc $0306,x	                sbc $0306,x
4677	.d847		9d 08 03	sta $0308,x	                sta $0308,x
4678	.d84a		bd 09 03	lda $0309,x	                lda $0309,x
4679	.d84d		fd 07 03	sbc $0307,x	                sbc $0307,x
4680	.d850		9d 09 03	sta $0309,x	                sta $0309,x
4681	.d853		bd 00 03	lda $0300,x	                lda $0300,x
4682	.d856		bc 01 03	ldy $0301,x	                ldy $0301,x
4683	.d859		06 da		asl $da		                asl $DA
4684	.d85b		b0 0b		bcs $d868	                bcs LD869
4685	.d85d		38		sec		                sec
4686	.d85e		65 dc		adc $dc		                adc $DC
4687	.d860		9d 00 03	sta $0300,x	                sta $0300,x
4688	.d863		98		tya		                tya
4689	.d864		65 dd		adc $dd		                adc $DD
4690	.d866		80 09		bra $d871	                bra LD872

4692	.d868						LD869:
4693	.d868		18		clc		                clc
4694	.d869		e5 dc		sbc $dc		                sbc $DC
4695	.d86b		9d 00 03	sta $0300,x	                sta $0300,x
4696	.d86e		98		tya		                tya
4697	.d86f		e5 dd		sbc $dd		                sbc $DD
4698	.d871						LD872:
4699	.d871		9d 01 03	sta $0301,x	                sta $0301,x
4700	.d874						LD875:
4701	.d874		60		rts		                rts

4703	.d875						LD876:
4704	.d875		0e 32 03	asl $0332	                asl $0332
4705	.d878		a0 2c		ldy #$2c	                ldy #$2C
4706	.d87a		20 16 c9	jsr $c916	                jsr copyLastFourVDUQueueBytes
4707	.d87d		06 db		asl $db		                asl $DB
4708	.d87f		90 0d		bcc $d88e	                bcc LD88F
4709	.d881		20 25 da	jsr $da25	                jsr LDA26
4710	.d884		f0 ee		beq $d874	                beq LD875
4711	.d886		a2 00		ldx #$00	                ldx #$00
4712	.d888		ad 32 03	lda $0332	                lda $0332
4713	.d88b		20 0e da	jsr $da0e	                jsr LDA0F
4714	.d88e						LD88F:
4715	.d88e		24 db		bit $db		                bit $DB
4716	.d890		50 0f		bvc $d8a1	                bvc LD8A2
4717	.d892		20 25 da	jsr $da25	                jsr LDA26
4718	.d895		f0 dd		beq $d874	                beq LD875
4719	.d897		a2 04		ldx #$04	                ldx #$04
4720	.d899		ad 32 03	lda $0332	                lda $0332
4721	.d89c		49 80		eor #$80	                eor #$80
4722	.d89e		20 0e da	jsr $da0e	                jsr LDA0F
4723	.d8a1						LD8A2:
4724	.d8a1		a2 28		ldx #$28	                ldx #$28
4725	.d8a3		a0 2c		ldy #$2c	                ldy #$2C
4726	.d8a5		4c e7 da	jmp $dae7	                jmp LDAE8

4728	.d8a8						LD8A9:
4729	.d8a8		0a		asl a		                asl a
4730	.d8a9		0a		asl a		                asl a
4731	.d8aa		85 db		sta $db		                sta $DB
4732	.d8ac		29 c0		and #$c0	                and #$C0
4733	.d8ae		49 40		eor #$40	                eor #$40
4734	.d8b0		d0 06		bne $d8b8	                bne LD8B9
4735	.d8b2		ad 67 03	lda $0367	                lda $0367
4736	.d8b5		8d 68 03	sta $0368	                sta $0368
4737	.d8b8						LD8B9:
4738	.d8b8		20 a5 d1	jsr $d1a5	                jsr LD1A6
4739	.d8bb		85 dc		sta $dc		                sta $DC
4740	.d8bd		f0 04		beq $d8c3	                beq LD8C4
4741	.d8bf		a9 80		lda #$80	                lda #$80
4742	.d8c1		14 db		trb $db		                trb $DB
4743	.d8c3						LD8C4:
4744	.d8c3		a2 20		ldx #$20	                ldx #$20
4745	.d8c5		20 a7 d1	jsr $d1a7	                jsr windEntryPoint
4746	.d8c8		85 e0		sta $e0		                sta $E0
4747	.d8ca		f0 0a		beq $d8d6	                beq LD8D7
4748	.d8cc		aa		tax		                tax
4749	.d8cd		a9 20		lda #$20	                lda #$20
4750	.d8cf		14 db		trb $db		                trb $DB
4751	.d8d1		8a		txa		                txa
4752	.d8d2		24 dc		bit $dc		                bit $DC
4753	.d8d4						LD8D5:
4754	.d8d4		d0 9e		bne $d874	                bne LD875
4755	.d8d6						LD8D7:
4756	.d8d6		a0 24		ldy #$24	                ldy #$24
4757	.d8d8		a9 20		lda #$20	                lda #$20
4758	.d8da		a2 28		ldx #$28	                ldx #$28
4759	.d8dc		20 24 9b	jsr $9b24	                jsr terminal.L9B09
4760	.d8df		24 db		bit $db		                bit $DB
4761	.d8e1		70 08		bvs $d8eb	                bvs LD8EC
4762	.d8e3		ad 2e 03	lda $032e	                lda $032E
4763	.d8e6		0d 2f 03	ora $032f	                ora $032F
4764	.d8e9		f0 8a		beq $d875	                beq LD876
4765	.d8eb						LD8EC:
4766	.d8eb		a5 dc		lda $dc		                lda $DC
4767	.d8ed		89 0c		bit #$0c	                bit #$0C
4768	.d8ef		f0 0e		beq $d8ff	                beq LD900
4769	.d8f1		a2 28		ldx #$28	                ldx #$28
4770	.d8f3		20 7a d7	jsr $d77a	                jsr LD77B
4771	.d8f6		a2 28		ldx #$28	                ldx #$28
4772	.d8f8		20 a7 d1	jsr $d1a7	                jsr windEntryPoint
4773	.d8fb		24 e0		bit $e0		                bit $E0
4774	.d8fd		d0 d5		bne $d8d4	                bne LD8D5
4775	.d8ff						LD900:
4776	.d8ff		89 03		bit #$03	                bit #$03
4777	.d901		f0 0a		beq $d90d	                beq LD90E
4778	.d903		a2 28		ldx #$28	                ldx #$28
4779	.d905		20 c7 d6	jsr $d6c7	                jsr LD6C8
4780	.d908		a2 28		ldx #$28	                ldx #$28
4781	.d90a		20 a7 d1	jsr $d1a7	                jsr windEntryPoint
4782	.d90d						LD90E:
4783	.d90d		a8		tay		                tay
4784	.d90e		d0 c4		bne $d8d4	                bne LD8D5
4785	.d910		a0 20		ldy #$20	                ldy #$20
4786	.d912		a2 22		ldx #$22	                ldx #$22
4787	.d914		a5 e0		lda $e0		                lda $E0
4788	.d916		f0 0f		beq $d927	                beq LD928
4789	.d918		a0 04		ldy #$04	                ldy #$04
4790	.d91a		a2 06		ldx #$06	                ldx #$06
4791	.d91c		2c 32 03	bit $0332	                bit $0332
4792	.d91f		10 02		bpl $d923	                bpl LD924
4793	.d921		a2 02		ldx #$02	                ldx #$02
4794	.d923						LD924:
4795	.d923		50 02		bvc $d927	                bvc LD928
4796	.d925		a0 00		ldy #$00	                ldy #$00
4797	.d927						LD928:
4798	.d927		18		clc		                clc
4799	.d928		bd 00 03	lda $0300,x	                lda $0300,x
4800	.d92b		ed 2a 03	sbc $032a	                sbc $032A
4801	.d92e		90 03		bcc $d933	                bcc LD934
4802	.d930		1a		inc a		                inc a
4803	.d931		49 ff		eor #$ff	                eor #$FF
4804	.d933						LD934:
4805	.d933		85 dc		sta $dc		                sta $DC
4806	.d935		18		clc		                clc
4807	.d936		b9 00 03	lda $0300,y	                lda $0300,y
4808	.d939		ed 28 03	sbc $0328	                sbc $0328
4809	.d93c		aa		tax		                tax
4810	.d93d		b9 01 03	lda $0301,y	                lda $0301,y
4811	.d940		ed 29 03	sbc $0329	                sbc $0329
4812	.d943		30 0c		bmi $d951	                bmi LD952
4813	.d945		e8		inx		                inx
4814	.d946		d0 01		bne $d949	                bne LD94A
4815	.d948		1a		inc a		                inc a
4816	.d949						LD94A:
4817	.d949		49 ff		eor #$ff	                eor #$FF
4818	.d94b		a8		tay		                tay
4819	.d94c		8a		txa		                txa
4820	.d94d		49 ff		eor #$ff	                eor #$FF
4821	.d94f		aa		tax		                tax
4822	.d950		98		tya		                tya
4823	.d951						LD952:
4824	.d951		85 dd		sta $dd		                sta $DD
4825	.d953		86 e0		stx $e0		                stx $E0
4826	.d955		a2 28		ldx #$28	                ldx #$28
4827	.d957		20 41 df	jsr $df41	                jsr LDF41
4828	.d95a		06 db		asl $db		                asl $DB
4829	.d95c		b0 2a		bcs $d988	                bcs LD989
4830	.d95e						LD95F:
4831	.d95e		24 db		bit $db		                bit $DB
4832	.d960		50 0b		bvc $d96d	                bvc LD96E
4833	.d962		a5 e0		lda $e0		                lda $E0
4834	.d964		25 dc		and $dc		                and $DC
4835	.d966		25 dd		and $dd		                and $DD
4836	.d968		1a		inc a		                inc a
4837	.d969		f0 34		beq $d99f	                beq LD9A0
4838	.d96b		24 db		bit $db		                bit $DB
4839	.d96d						LD96E:
4840	.d96d		10 09		bpl $d978	                bpl LD979
4841	.d96f		ad 68 03	lda $0368	                lda $0368
4842	.d972		0a		asl a		                asl a
4843	.d973		2e 68 03	rol $0368	                rol $0368
4844	.d976		90 10		bcc $d988	                bcc LD989
4845	.d978						LD979:
4846	.d978		a5 d1		lda $d1		                lda ZMASK
4847	.d97a		25 d4		and $d4		                and ZGORA
4848	.d97c		11 d6		ora ($d6),y	                ora (ZMEMG),y
4849	.d97e		85 da		sta $da		                sta $DA
4850	.d980		a5 d1		lda $d1		                lda ZMASK
4851	.d982		25 d5		and $d5		                and ZGEOR
4852	.d984		45 da		eor $da		                eor $DA
4853	.d986		91 d6		sta ($d6),y	                sta (ZMEMG),y
4854	.d988						LD989:
4855	.d988		ad 31 03	lda $0331	                lda $0331
4856	.d98b		10 4e		bpl $d9db	                bpl LD9DC
4857	.d98d		e6 dc		inc $dc		                inc $DC
4858	.d98f		f0 0e		beq $d99f	                beq LD9A0
4859	.d991		2c 32 03	bit $0332	                bit $0332
4860	.d994		30 0a		bmi $d9a0	                bmi LD9A1
4861	.d996		88		dey		                dey
4862	.d997		ca		dex		                dex
4863	.d998		10 24		bpl $d9be	                bpl LD9BF
4864	.d99a		20 4b da	jsr $da4b	                jsr LDA4C
4865	.d99d		80 1f		bra $d9be	                bra LD9BF

4867	.d99f						LD9A0:
4868	.d99f		60		rts		                rts

4870	.d9a0						LD9A1:
4871	.d9a0		c8		iny		                iny
4872	.d9a1		e8		inx		                inx
4873	.d9a2		e0 08		cpx #$08	                cpx #$08
4874	.d9a4		d0 18		bne $d9be	                bne LD9BF
4875	.d9a6		38		sec		                sec
4876	.d9a7		98		tya		                tya
4877	.d9a8		e9 08		sbc #$08	                sbc #$08
4878	.d9aa		18		clc		                clc
4879	.d9ab		6d 52 03	adc $0352	                adc $0352
4880	.d9ae		a8		tay		                tay
4881	.d9af		a5 d7		lda $d7		                lda ZMEMG+1
4882	.d9b1		6d 53 03	adc $0353	                adc $0353
4883	.d9b4		10 04		bpl $d9ba	                bpl LD9BB
4884	.d9b6		38		sec		                sec
4885	.d9b7		ed 54 03	sbc $0354	                sbc $0354
4886	.d9ba						LD9BB:
4887	.d9ba		85 d7		sta $d7		                sta ZMEMG+1
4888	.d9bc		a2 00		ldx #$00	                ldx #$00
4889	.d9be						LD9BF:
4890	.d9be		ad 69 03	lda $0369	                lda $0369
4891	.d9c1		f0 03		beq $d9c6	                beq LD9C7
4892	.d9c3		20 7b da	jsr $da7b	                jsr setupColourMasks
4893	.d9c6						LD9C7:
4894	.d9c6		18		clc		                clc
4895	.d9c7		ad 30 03	lda $0330	                lda $0330
4896	.d9ca		6d 2c 03	adc $032c	                adc $032C
4897	.d9cd		8d 30 03	sta $0330	                sta $0330
4898	.d9d0		ad 31 03	lda $0331	                lda $0331
4899	.d9d3		6d 2d 03	adc $032d	                adc $032D
4900	.d9d6		8d 31 03	sta $0331	                sta $0331
4901	.d9d9		30 83		bmi $d95e	                bmi LD95F
4902	.d9db						LD9DC:
4903	.d9db		e6 e0		inc $e0		                inc $E0
4904	.d9dd		d0 04		bne $d9e3	                bne LD9E4
4905	.d9df		e6 dd		inc $dd		                inc $DD
4906	.d9e1		f0 bc		beq $d99f	                beq LD9A0
4907	.d9e3						LD9E4:
4908	.d9e3		2c 32 03	bit $0332	                bit $0332
4909	.d9e6		70 09		bvs $d9f1	                bvs LD9F2
4910	.d9e8		46 d1		lsr $d1		                lsr ZMASK
4911	.d9ea		90 0c		bcc $d9f8	                bcc LD9F9
4912	.d9ec		20 66 da	jsr $da66	                jsr nextColumnAndResetMask
4913	.d9ef		80 07		bra $d9f8	                bra LD9F9

4915	.d9f1						LD9F2:
4916	.d9f1		06 d1		asl $d1		                asl ZMASK
4917	.d9f3		90 03		bcc $d9f8	                bcc LD9F9
4918	.d9f5		20 33 da	jsr $da33	                jsr previousColumnAndResetMask
4919	.d9f8						LD9F9:
4920	.d9f8		38		sec		                sec
4921	.d9f9		ad 30 03	lda $0330	                lda $0330
4922	.d9fc		ed 2e 03	sbc $032e	                sbc $032E
4923	.d9ff		8d 30 03	sta $0330	                sta $0330
4924	.da02		ad 31 03	lda $0331	                lda $0331
4925	.da05		ed 2f 03	sbc $032f	                sbc $032F
4926	.da08		8d 31 03	sta $0331	                sta $0331
4927	.da0b		4c 5e d9	jmp $d95e	                jmp LD95F

4929	.da0e						LDA0F:
4930	.da0e		30 09		bmi $da19	                bmi LDA1A
4931	.da10		fe 28 03	inc $0328,x	                inc $0328,x
4932	.da13		d0 0f		bne $da24	                bne LDA25
4933	.da15		fe 29 03	inc $0329,x	                inc $0329,x
4934	.da18		60		rts		                rts

4936	.da19						LDA1A:
4937	.da19		bd 28 03	lda $0328,x	                lda $0328,x
4938	.da1c		d0 03		bne $da21	                bne LDA22
4939	.da1e		de 29 03	dec $0329,x	                dec $0329,x
4940	.da21						LDA22:
4941	.da21		de 28 03	dec $0328,x	                dec $0328,x
4942	.da24						LDA25:
4943	.da24		60		rts		                rts

4945	.da25						LDA26:
4946	.da25		a0 04		ldy #$04	                ldy #$04
4947	.da27						LDA28:
4948	.da27		b9 27 03	lda $0327,y	                lda $0327,y
4949	.da2a		d9 2b 03	cmp $032b,y	                cmp $032B,y
4950	.da2d		d0 03		bne $da32	                bne LDA33
4951	.da2f		88		dey		                dey
4952	.da30		d0 f5		bne $da27	                bne LDA28
4953	.da32						LDA33:
4954	.da32		60		rts		                rts

4956							;-------------------------------------------------------------------------

4958	.da33						previousColumnAndResetMask:
4959	.da33		ad 63 03	lda $0363	                lda vduv.colourMaskRight
4960	.da36		85 d1		sta $d1		                sta ZMASK
4961	.da38		98		tya		                tya
4962	.da39		e9 08		sbc #$08	                sbc #$08
4963	.da3b		a8		tay		                tay
4964	.da3c		b0 0c		bcs $da4a	                bcs rtsDA4B
4965	.da3e		a5 d7		lda $d7		                lda ZMEMG+1
4966	.da40		3a		dec a		                dec a
4967	.da41		cd 4e 03	cmp $034e	                cmp vduv.startScreenAddressHighByte
4968	.da44		b0 02		bcs $da48	                bcs +
4969	.da46		a9 7f		lda #$7f	                lda #$7F
4970	.da48						+
4971	.da48		85 d7		sta $d7		                sta ZMEMG+1
4972	.da4a						rtsDA4B:
4973	.da4a		60		rts		                rts

4975							;-------------------------------------------------------------------------

4977	.da4b						LDA4C:
4978	.da4b		18		clc		                clc
4979	.da4c		98		tya		                tya
4980	.da4d		69 08		adc #$08	                adc #$08
4981	.da4f		38		sec		                sec
4982	.da50		ed 52 03	sbc $0352	                sbc $0352
4983	.da53		a8		tay		                tay
4984	.da54		a5 d7		lda $d7		                lda ZMEMG+1
4985	.da56		ed 53 03	sbc $0353	                sbc $0353
4986	.da59		cd 4e 03	cmp $034e	                cmp $034E
4987	.da5c		b0 03		bcs $da61	                bcs LDA62
4988	.da5e		6d 54 03	adc $0354	                adc $0354
4989	.da61						LDA62:
4990	.da61		85 d7		sta $d7		                sta ZMEMG+1
4991	.da63		a2 07		ldx #$07	                ldx #$07
4992	.da65		60		rts		                rts

4994							;-------------------------------------------------------------------------
4995							;
4996	.da66						nextColumnAndResetMask:
4997	.da66		ad 62 03	lda $0362	                lda vduv.colourMaskLeft
4998	.da69		85 d1		sta $d1		                sta ZMASK

5000							;-------------------------------------------------------------------------
5001							;
5002							; Add 8 to (ZMEMG),Y, taking into account screen wrap.
5003							;
5004							; entry:
5005							;
5006							; C=1
5007							;
5008							; (ZMEMG),Y = screen address
5009							;
5010							; exit:
5011							;
5012							; (ZMEMG),Y = new screen address
5013							;
5014	.da6b						nextColumn:
5015	.da6b		98		tya		                tya
5016	.da6c		69 07		adc #$07	                adc #$07
5017	.da6e		a8		tay		                tay
5018	.da6f		90 09		bcc $da7a	                bcc +
5019	.da71		e6 d7		inc $d7		                inc ZMEMG+1
5020	.da73		10 05		bpl $da7a	                bpl +
5021	.da75		ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
5022	.da78		85 d7		sta $d7		                sta ZMEMG+1
5023	.da7a						+
5024	.da7a		60		rts		                rts

5026							;-------------------------------------------------------------------------
5027							;
5028							; Set up colour masks, taking into account ECF pattern.
5029							;
5030							; entry:
5031							;
5032							; X = scanline in row, 0-7
5033							;
5034	.da7b						setupColourMasks:
5035	.da7b		da		phx		                phx                          ;save scanline
5036	.da7c		8a		txa		                txa                          ;A=scanline
5037	.da7d		0d 59 03	ora $0359	                ora vduv.graphicsPlotState   ;0-7 if fg, 8-15 if bg
5038	.da80		aa		tax		                tax
5039	.da81		bd 20 88	lda $8820,x	                lda andy.fgECFPattern,x      ;get appropriate ECF byte
5040	.da84		ae 5a 03	ldx $035a	                ldx vduv.graphicsPlotMode
5041	.da87		48		pha		                pha
5042	.da88		1d 50 e1	ora $e150,x	                ora zgoraORTable,x
5043	.da8b		5d 51 e1	eor $e151,x	                eor zgoraEORTable,x
5044	.da8e		85 d4		sta $d4		                sta ZGORA
5045	.da90		68		pla		                pla
5046	.da91		1d 4f e1	ora $e14f,x	                ora zgeorORTable,x
5047	.da94		5d 54 e1	eor $e154,x	                eor zgeorEORTable,x
5048	.da97		85 d5		sta $d5		                sta ZGEOR
5049	.da99		fa		plx		                plx
5050	.da9a		60		rts		                rts

5052							;-------------------------------------------------------------------------

5054	.da9b						LDA9C:
5055	.da9b		b9 01 03	lda $0301,y	                lda $0301,y
5056	.da9e		48		pha		                pha
5057	.da9f		b9 00 03	lda $0300,y	                lda $0300,y
5058	.daa2		48		pha		                pha
5059	.daa3		2d 61 03	and $0361	                and $0361
5060	.daa6		18		clc		                clc
5061	.daa7		6d 61 03	adc $0361	                adc $0361
5062	.daaa		a8		tay		                tay
5063	.daab		b9 3a e1	lda $e13a,y	                lda pixelMasks-1,y
5064	.daae		59 2c e1	eor $e12c,y	                eor LE120,y
5065	.dab1		85 dc		sta $dc		                sta $DC
5066	.dab3		bd 00 03	lda $0300,x	                lda $0300,x
5067	.dab6		2d 61 03	and $0361	                and $0361
5068	.dab9		6d 61 03	adc $0361	                adc $0361
5069	.dabc		a8		tay		                tay
5070	.dabd		b9 2c e1	lda $e12c,y	                lda LE120,y
5071	.dac0		85 d1		sta $d1		                sta ZMASK
5072	.dac2		38		sec		                sec
5073	.dac3		68		pla		                pla
5074	.dac4		0d 61 03	ora $0361	                ora $0361
5075	.dac7		fd 00 03	sbc $0300,x	                sbc $0300,x
5076	.daca		a8		tay		                tay
5077	.dacb		68		pla		                pla
5078	.dacc		fd 01 03	sbc $0301,x	                sbc $0301,x
5079	.dacf		85 dd		sta $dd		                sta $DD
5080	.dad1		98		tya		                tya
5081	.dad2		ac 61 03	ldy $0361	                ldy $0361
5082	.dad5		c0 03		cpy #$03	                cpy #$03
5083	.dad7		f0 05		beq $dade	                beq LDADF
5084	.dad9		90 06		bcc $dae1	                bcc LDAE2
5085	.dadb		46 dd		lsr $dd		                lsr $DD
5086	.dadd		6a		ror a		                ror a
5087	.dade						LDADF:
5088	.dade		46 dd		lsr $dd		                lsr $DD
5089	.dae0		6a		ror a		                ror a
5090	.dae1						LDAE2:
5091	.dae1		4a		lsr a		                lsr a
5092	.dae2						LDAE3:
5093	.dae2		60		rts		                rts

5095	.dae3						LDAE4:
5096	.dae3		a2 42		ldx #$42	                ldx #$42
5097	.dae5		a0 46		ldy #$46	                ldy #$46
5098	.dae7						LDAE8:
5099	.dae7		20 cb d5	jsr $d5cb	                jsr sortVDUVariableWords
5100	.daea		86 de		stx $de		                stx $DE
5101	.daec		84 df		sty $df		                sty $DF
5102	.daee		a6 df		ldx $df		                ldx $DF
5103	.daf0		a0 00		ldy #$00	                ldy #$00
5104	.daf2		20 b6 d1	jsr $d1b6	                jsr getOutcodeForAxis
5105	.daf5		f0 07		beq $dafe	                beq LDAFF
5106	.daf7		4a		lsr a		                lsr a
5107	.daf8		f0 e8		beq $dae2	                beq LDAE3
5108	.dafa		a2 04		ldx #$04	                ldx #$04
5109	.dafc		86 df		stx $df		                stx $DF
5110	.dafe						LDAFF:
5111	.dafe		a6 de		ldx $de		                ldx $DE
5112	.db00		20 a7 d1	jsr $d1a7	                jsr windEntryPoint
5113	.db03		4a		lsr a		                lsr a
5114	.db04		d0 dc		bne $dae2	                bne LDAE3
5115	.db06		bd 02 03	lda $0302,x	                lda $0302,x
5116	.db09		90 04		bcc $db0f	                bcc LDB10
5117	.db0b		a2 00		ldx #$00	                ldx #$00
5118	.db0d		86 de		stx $de		                stx $DE
5119	.db0f						LDB10:
5120	.db0f		20 cb de	jsr $decb	                jsr LDECB
5121	.db12		a6 de		ldx $de		                ldx $DE
5122	.db14		a4 df		ldy $df		                ldy $DF
5123	.db16		20 9b da	jsr $da9b	                jsr LDA9C
5124	.db19		aa		tax		                tax
5125	.db1a		ac 1a 03	ldy $031a	                ldy $031A
5126	.db1d		8a		txa		                txa
5127	.db1e		f0 23		beq $db43	                beq LDB44
5128	.db20		20 50 db	jsr $db50	                jsr plbyteEntryPoint
5129	.db23		80 08		bra $db2d	                bra LDB2E

5131	.db25						LDB26:
5132	.db25		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5133	.db27		05 d4		ora $d4		                ora ZGORA
5134	.db29		45 d5		eor $d5		                eor ZGEOR
5135	.db2b		91 d6		sta ($d6),y	                sta (ZMEMG),y
5136	.db2d						LDB2E:
5137	.db2d		98		tya		                tya
5138	.db2e		18		clc		                clc
5139	.db2f		69 08		adc #$08	                adc #$08
5140	.db31		a8		tay		                tay
5141	.db32		90 09		bcc $db3d	                bcc LDB3E
5142	.db34		e6 d7		inc $d7		                inc ZMEMG+1
5143	.db36		10 05		bpl $db3d	                bpl LDB3E
5144	.db38		ad 4e 03	lda $034e	                lda $034E
5145	.db3b		85 d7		sta $d7		                sta ZMEMG+1
5146	.db3d						LDB3E:
5147	.db3d		ca		dex		                dex
5148	.db3e		d0 e5		bne $db25	                bne LDB26
5149	.db40		ca		dex		                dex
5150	.db41		86 d1		stx $d1		                stx ZMASK
5151	.db43						LDB44:
5152	.db43		a5 dc		lda $dc		                lda $DC
5153	.db45		14 d1		trb $d1		                trb ZMASK
5154	.db47		80 07		bra $db50	                bra plbyteEntryPoint

5156							;-------------------------------------------------------------------------
5157							;
5158							; mem mask ora eor | result
5159							; --- ---- --- --- | ------
5160							;  0    0   0   0  |   0
5161							;  0    0   0   1  |   0
5162							;  0    0   1   0  |   0
5163							;  0    0   1   1  |   0
5164							;  0    1   0   0  |   0
5165							;  0    1   0   1  |   1
5166							;  0    1   1   0  |   1
5167							;  0    1   1   1  |   0
5168							;  1    0   0   0  |   1
5169							;  1    0   0   1  |   1
5170							;  1    0   1   0  |   1
5171							;  1    0   1   1  |   1
5172							;  1    1   0   0  |   1
5173							;  1    1   0   1  |   0
5174							;  1    1   1   0  |   1
5175							;  1    1   1   1  |   0
5176							;
5177	.db49						plotPoint:
5178	.db49		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
5179	.db4b						LDB4C:
5180	.db4b		20 c3 de	jsr $dec3	                jsr windGADDR
5181	.db4e		d0 10		bne $db60	                bne rtsDB61                  ;taken if point outside window
5182	.db50						plbyteEntryPoint:
5183	.db50		a5 d1		lda $d1		                lda ZMASK
5184	.db52		25 d4		and $d4		                and ZGORA
5185	.db54		11 d6		ora ($d6),y	                ora (ZMEMG),y
5186	.db56		85 da		sta $da		                sta ZTEMP+0
5187	.db58		a5 d5		lda $d5		                lda ZGEOR
5188	.db5a		25 d1		and $d1		                and ZMASK
5189	.db5c		45 da		eor $da		                eor ZTEMP+0
5190	.db5e						oswrscCode:
5191	.db5e		91 d6		sta ($d6),y	                sta (ZMEMG),y
5192	.db60						rtsDB61:
5193	.db60		60		rts		                rts

5195							;-------------------------------------------------------------------------

5197	.db61						LDB62:
5198	.db61		a2 2a		ldx #$2a	                ldx #VDUVariables.workspace._2A
5199	.db63		a0 32		ldy #$32	                ldy #VDUVariables.workspace._32
5200	.db65		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5201	.db68		a2 36		ldx #$36	                ldx #VDUVariables.workspace._36
5202	.db6a		a0 3e		ldy #$3e	                ldy #VDUVariables.workspace._3E
5203	.db6c		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5204	.db6f		a2 2a		ldx #$2a	                ldx #$2A
5205	.db71		20 b4 d1	jsr $d1b4	                jsr getOutcodeForYAxis
5206	.db74		48		pha		                pha
5207	.db75		a2 36		ldx #$36	                ldx #$36
5208	.db77		20 b4 d1	jsr $d1b4	                jsr getOutcodeForYAxis
5209	.db7a		f0 0f		beq $db8b	                beq LDB8C
5210	.db7c		68		pla		                pla
5211	.db7d		d0 05		bne $db84	                bne LDB85
5212	.db7f		ad 45 03	lda $0345	                lda $0345
5213	.db82		f0 01		beq $db85	                beq LDB86
5214	.db84						LDB85:
5215	.db84		60		rts		                rts

5217	.db85						LDB86:
5218	.db85		a2 28		ldx #$28	                ldx #$28
5219	.db87		a0 2c		ldy #$2c	                ldy #$2C
5220	.db89		80 07		bra $db92	                bra LDB93

5222	.db8b						LDB8C:
5223	.db8b		68		pla		                pla
5224	.db8c		f0 07		beq $db95	                beq LDB96
5225	.db8e		a2 34		ldx #$34	                ldx #$34
5226	.db90		a0 38		ldy #$38	                ldy #$38
5227	.db92						LDB93:
5228	.db92		4c e7 da	jmp $dae7	                jmp LDAE8

5230	.db95						LDB96:
5231	.db95		a2 30		ldx #$30	                ldx #$30
5232	.db97		20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
5233	.db9a		2c 47 03	bit $0347	                bit $0347
5234	.db9d		30 09		bmi $dba8	                bmi LDBA9
5235	.db9f		98		tya		                tya
5236	.dba0		38		sec		                sec
5237	.dba1		e9 08		sbc #$08	                sbc #$08
5238	.dba3		a8		tay		                tay
5239	.dba4		b0 02		bcs $dba8	                bcs LDBA9
5240	.dba6		c6 d7		dec $d7		                dec ZMEMG+1
5241	.dba8						LDBA9:
5242	.dba8		ad 44 03	lda $0344	                lda $0344
5243	.dbab		85 dd		sta $dd		                sta $DD
5244	.dbad						LDBAE:
5245	.dbad		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5246	.dbaf		ae 42 03	ldx $0342	                ldx $0342
5247	.dbb2		f0 04		beq $dbb8	                beq LDBB9
5248	.dbb4						LDBB5:
5249	.dbb4		0a		asl a		                asl a
5250	.dbb5		ca		dex		                dex
5251	.dbb6		d0 fc		bne $dbb4	                bne LDBB5
5252	.dbb8						LDBB9:
5253	.dbb8		85 da		sta $da		                sta $DA
5254	.dbba		38		sec		                sec
5255	.dbbb		20 6b da	jsr $da6b	                jsr nextColumn
5256	.dbbe		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5257	.dbc0		ae 43 03	ldx $0343	                ldx $0343
5258	.dbc3		f0 04		beq $dbc9	                beq LDBCA
5259	.dbc5						LDBC6:
5260	.dbc5		4a		lsr a		                lsr a
5261	.dbc6		ca		dex		                dex
5262	.dbc7		d0 fc		bne $dbc5	                bne LDBC6
5263	.dbc9						LDBCA:
5264	.dbc9		45 da		eor $da		                eor $DA
5265	.dbcb		25 e1		and $e1		                and $E1
5266	.dbcd		45 da		eor $da		                eor $DA
5267	.dbcf		a6 dd		ldx $dd		                ldx $DD
5268	.dbd1		9d 30 88	sta $8830,x	                sta L8830,x
5269	.dbd4		c6 dd		dec $dd		                dec $DD
5270	.dbd6		10 d5		bpl $dbad	                bpl LDBAE
5271	.dbd8		a2 34		ldx #$34	                ldx #$34
5272	.dbda		a0 38		ldy #$38	                ldy #$38
5273	.dbdc		20 e7 da	jsr $dae7	                jsr LDAE8
5274	.dbdf		ad 45 03	lda $0345	                lda $0345
5275	.dbe2		d0 03		bne $dbe7	                bne LDBE8
5276	.dbe4		20 85 db	jsr $db85	                jsr LDB86
5277	.dbe7						LDBE8:
5278	.dbe7		a2 3c		ldx #$3c	                ldx #$3C
5279	.dbe9		20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
5280	.dbec		ad 46 03	lda $0346	                lda $0346
5281	.dbef		85 da		sta $da		                sta $DA
5282	.dbf1		ae 44 03	ldx $0344	                ldx $0344
5283	.dbf4		f0 15		beq $dc0b	                beq LDC0C
5284	.dbf6		20 0f dc	jsr $dc0f	                jsr LDC10
5285	.dbf9		a9 ff		lda #$ff	                lda #$FF
5286	.dbfb		85 da		sta $da		                sta $DA
5287	.dbfd		80 05		bra $dc04	                bra LDC05

5289	.dbff						LDC00_code:
5290	.dbff		bd 30 88	lda $8830,x	                lda L8830,x
5291	.dc02		91 d6		sta ($d6),y	                sta (ZMEMG),y
5292	.dc04						LDC05:
5293	.dc04		38		sec		                sec
5294	.dc05		20 6b da	jsr $da6b	                jsr nextColumn
5295	.dc08		ca		dex		                dex
5296	.dc09		d0 f4		bne $dbff	                bne LDC00_code
5297	.dc0b						LDC0C:
5298	.dc0b		a5 e0		lda $e0		                lda $E0
5299	.dc0d		14 da		trb $da		                trb $DA
5300	.dc0f						LDC10:
5301	.dc0f		bd 30 88	lda $8830,x	                lda L8830,x
5302	.dc12		51 d6		eor ($d6),y	                eor (ZMEMG),y
5303	.dc14		25 da		and $da		                and $DA
5304	.dc16		51 d6		eor ($d6),y	                eor (ZMEMG),y
5305	.dc18		91 d6		sta ($d6),y	                sta (ZMEMG),y
5306	.dc1a		60		rts		                rts

5308	.dc1b						LDC1C:
5309	.dc1b		ad 37 03	lda $0337	                lda $0337
5310	.dc1e		1a		inc a		                inc a
5311	.dc1f		cd 36 03	cmp $0336	                cmp $0336
5312	.dc22		f0 22		beq $dc46	                beq LDC47
5313	.dc24		8d 37 03	sta $0337	                sta $0337
5314	.dc27		aa		tax		                tax
5315	.dc28		ad 2e 03	lda $032e	                lda $032E
5316	.dc2b		9d 00 84	sta $8400,x	                sta L8400,x
5317	.dc2e		ad 32 03	lda $0332	                lda $0332
5318	.dc31		9d 00 85	sta $8500,x	                sta L8500,x
5319	.dc34		ad 2f 03	lda $032f	                lda $032F
5320	.dc37		0a		asl a		                asl a
5321	.dc38		0a		asl a		                asl a
5322	.dc39		0d 33 03	ora $0333	                ora $0333
5323	.dc3c		9d 00 86	sta $8600,x	                sta L8600,x
5324	.dc3f		ad 30 03	lda $0330	                lda $0330
5325	.dc42		9d 00 87	sta $8700,x	                sta L8700,x
5326	.dc45						LDC46:
5327	.dc45		18		clc		                clc
5328	.dc46						LDC47:
5329	.dc46		60		rts		                rts

5331	.dc47						LDC48:
5332	.dc47		8d 2a 03	sta $032a	                sta $032A
5333	.dc4a		a2 28		ldx #$28	                ldx #$28
5334	.dc4c		20 af dc	jsr $dcaf	                jsr LDCB0
5335	.dc4f		d0 0a		bne $dc5b	                bne LDC5C
5336	.dc51						LDC52:
5337	.dc51		20 1b dc	jsr $dc1b	                jsr LDC1C
5338	.dc54		b0 f0		bcs $dc46	                bcs LDC47
5339	.dc56		20 72 9d	jsr $9d72	                jsr terminal.L9D57
5340	.dc59		b0 ea		bcs $dc45	                bcs LDC46
5341	.dc5b						LDC5C:
5342	.dc5b		20 c0 dc	jsr $dcc0	                jsr LDCC1
5343	.dc5e		20 72 9d	jsr $9d72	                jsr terminal.L9D57
5344	.dc61		b0 e2		bcs $dc45	                bcs LDC46
5345	.dc63		20 d6 dc	jsr $dcd6	                jsr LDCD7
5346	.dc66		20 b7 dc	jsr $dcb7	                jsr LDCB8
5347	.dc69		80 e6		bra $dc51	                bra LDC52

5349							;-------------------------------------------------------------------------
5350							;
5351							; 72â<80><93>79 = Horizontal line fill (left and right to non-background) [MasRef E.3-24]
5352							; 88â<80><93>95 = Horizontal line fill (right to background) [MasRef E.3-25]
5353							; 104â<80><93>111 = Horizontal line fill (left and right to foreground) [MasRef E.3-26]
5354							; 120â<80><93>127 = Horizontal line fill (right to non-foreground) [MasRef E.3-27]
5355							;
5356	.dc6b						plotHorizontalLineFill:
5357	.dc6b		20 9e dd	jsr $dd9e	                jsr copyECFPatternForLineFill
5358	.dc6e		20 af dc	jsr $dcaf	                jsr LDCB0
5359	.dc71		18		clc		                clc
5360	.dc72		80 0e		bra $dc82	                bra LDC83

5362	.dc74						plotHorizontalLineFillRight:
5363	.dc74		20 9e dd	jsr $dd9e	                jsr copyECFPatternForLineFill
5364	.dc77		20 c8 dc	jsr $dcc8	                jsr LDCC9
5365	.dc7a		20 d1 dc	jsr $dcd1	                jsr LDCD2
5366	.dc7d		d0 03		bne $dc82	                bne LDC83
5367	.dc7f		20 b7 dc	jsr $dcb7	                jsr LDCB8
5368	.dc82						LDC83:
5369	.dc82		08		php		                php
5370	.dc83		a2 2e		ldx #$2e	                ldx #VDUVariables.hlfw.pixelsX
5371	.dc85		a0 14		ldy #$14	                ldy #VDUVariables.oldGraphicsCursorPixelsX
5372	.dc87		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
5373	.dc8a		28		plp		                plp
5374	.dc8b		08		php		                php
5375	.dc8c		f0 02		beq $dc90	                beq LDC91
5376	.dc8e		a2 2e		ldx #$2e	                ldx #VDUVariables.hlfw.pixelsX
5377	.dc90						LDC91:
5378	.dc90		a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixelsX
5379	.dc92		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5380	.dc95		a2 30		ldx #$30	                ldx #VDUVariables.hlfw.pixelsY
5381	.dc97		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5382	.dc9a		28		plp		                plp
5383	.dc9b		f0 05		beq $dca2	                beq LDCA3
5384	.dc9d		b0 04		bcs $dca3	                bcs LDCA4
5385	.dc9f		ee 16 03	inc $0316	                inc $0316
5386	.dca2						LDCA3:
5387	.dca2		60		rts		                rts

5389	.dca3						LDCA4:
5390	.dca3		ad 24 03	lda $0324	                lda $0324
5391	.dca6		d0 03		bne $dcab	                bne LDCAC
5392	.dca8		ce 25 03	dec $0325	                dec $0325
5393	.dcab						LDCAC:
5394	.dcab		ce 24 03	dec $0324	                dec $0324
5395	.dcae		60		rts		                rts

5397							;-------------------------------------------------------------------------

5399	.dcaf						LDCB0:
5400	.dcaf		20 d1 dc	jsr $dcd1	                jsr LDCD2
5401	.dcb2		d0 55		bne $dd09	                bne rtsDD0A
5402	.dcb4		20 0a dd	jsr $dd0a	                jsr LDD0B
5403	.dcb7						LDCB8:
5404	.dcb7		a2 2e		ldx #$2e	                ldx #$2E
5405	.dcb9		a0 32		ldy #$32	                ldy #$32
5406	.dcbb		20 e7 da	jsr $dae7	                jsr LDAE8
5407	.dcbe		80 46		bra $dd06	                bra LDD07

5409	.dcc0						LDCC1:
5410	.dcc0		20 c8 dc	jsr $dcc8	                jsr LDCC9
5411	.dcc3		a2 2c		ldx #$2c	                ldx #$2C
5412	.dcc5		20 d8 dc	jsr $dcd8	                jsr LDCD9
5413	.dcc8						LDCC9:
5414	.dcc8		08		php		                php
5415	.dcc9		a5 e1		lda $e1		                lda $E1
5416	.dccb		49 08		eor #$08	                eor #$08
5417	.dccd		85 e1		sta $e1		                sta $E1
5418	.dccf		28		plp		                plp
5419	.dcd0		60		rts		                rts

5421							;-------------------------------------------------------------------------

5423	.dcd1						LDCD2:
5424	.dcd1		a0 2e		ldy #$2e	                ldy #VDUVariables.hlfw.pixelsX
5425	.dcd3		20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
5426	.dcd6						LDCD7:
5427	.dcd6		a2 04		ldx #$04	                ldx #VDUVariables.graphicsWindowPixelsRight
5428	.dcd8						LDCD9:
5429	.dcd8		a0 34		ldy #$34	                ldy #VDUVariables.hlfw.pixelsLimitX
5430	.dcda		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5431	.dcdd		a2 34		ldx #$34	                ldx #VDUVariables.hlfw.pixelsLimitX
5432	.dcdf		20 34 dd	jsr $dd34	                jsr shouldFillPixel
5433	.dce2		d0 25		bne $dd09	                bne rtsDD0A  ;taken if pixel not to be filled, so done
5434	.dce4						LDCE5:
5435	.dce4		46 d1		lsr $d1		                lsr ZMASK                    ;next pixel
5436	.dce6		90 08		bcc $dcf0	                bcc LDCF1                    ;taken if still in same byte
5437	.dce8						LDCE9:
5438	.dce8		20 66 da	jsr $da66	                jsr nextColumnAndResetMask
5439	.dceb		20 64 dd	jsr $dd64	                jsr shouldFillByte
5440	.dcee		b0 f8		bcs $dce8	                bcs LDCE9
5441	.dcf0						LDCF1:
5442	.dcf0		20 84 dd	jsr $dd84	                jsr LDD85
5443	.dcf3		b0 ef		bcs $dce4	                bcs LDCE5
5444	.dcf5		38		sec		                sec
5445	.dcf6		ad 34 03	lda $0334	                lda vduv.hlfw.pixelsLimitX+0
5446	.dcf9		e5 de		sbc $de		                sbc zhlfw.pixelsX+0
5447	.dcfb		8d 32 03	sta $0332	                sta vduv.hlfw.pixelsRightEndX+0
5448	.dcfe		ad 35 03	lda $0335	                lda vduv.hlfw.pixelsLimitX+1
5449	.dd01		e5 df		sbc $df		                sbc zhlfw.pixelsX+1
5450	.dd03		8d 33 03	sta $0333	                sta vduv.hlfw.pixelsRightEndX+1
5451	.dd06						LDD07:
5452	.dd06		a9 00		lda #$00	                lda #$00
5453	.dd08		38		sec		                sec
5454	.dd09						rtsDD0A:
5455	.dd09		60		rts		                rts

5457	.dd0a						LDD0B:
5458	.dd0a		a2 00		ldx #$00	                ldx #VDUVariables.graphicsWindowPixelsLeft
5459	.dd0c		20 34 dd	jsr $dd34	                jsr shouldFillPixel
5460	.dd0f		d0 f8		bne $dd09	                bne rtsDD0A                    ;taken if pixel not to be filled, so done
5461	.dd11						LDD12:
5462	.dd11		06 d1		asl $d1		                asl ZMASK                      ;next pixel
5463	.dd13		90 08		bcc $dd1d	                bcc LDD1E                    ;taken if still in same byte
5464	.dd15						LDD16:
5465	.dd15		20 33 da	jsr $da33	                jsr previousColumnAndResetMask
5466	.dd18		20 64 dd	jsr $dd64	                jsr shouldFillByte
5467	.dd1b		b0 f8		bcs $dd15	                bcs LDD16
5468	.dd1d						LDD1E:
5469	.dd1d		20 84 dd	jsr $dd84	                jsr LDD85
5470	.dd20		b0 ef		bcs $dd11	                bcs LDD12
5471	.dd22		ad 00 03	lda $0300	                lda vduv.graphicsWindowPixelsLeft+0
5472	.dd25		65 de		adc $de		                adc zhlfw.pixelsX+0
5473	.dd27		8d 2e 03	sta $032e	                sta vduv.hlfw.pixelsX+0
5474	.dd2a		ad 01 03	lda $0301	                lda vduv.graphicsWindowPixelsLeft+1
5475	.dd2d		65 df		adc $df		                adc zhlfw.pixelsX+1
5476	.dd2f		8d 2f 03	sta $032f	                sta vduv.hlfw.pixelsX+1
5477	.dd32		80 d2		bra $dd06	                bra LDD07

5479							;-------------------------------------------------------------------------
5480							;
5481							; Check whether line fill should fill a pixel.
5482							;
5483							; entry:
5484							;
5485							; X = VDU variable offset of edge of window
5486							;
5487							; vduv.workspace._2E - pixel X, Y coordinates
5488							;
5489							; exit:
5490							;
5491							; Z=1 if pixel should be filled
5492							;
5493							; ZTEMPC = ???
5494							;
5495	.dd34						shouldFillPixel:
5496	.dd34		38		sec		                sec
5497	.dd35		ad 2e 03	lda $032e	                lda vduv.workspace._2E+0
5498	.dd38		fd 00 03	sbc $0300,x	                sbc vduv+0,x
5499	.dd3b		a8		tay		                tay
5500	.dd3c		ad 2f 03	lda $032f	                lda vduv.workspace._2E+1
5501	.dd3f		fd 01 03	sbc $0301,x	                sbc vduv+1,x
5502	.dd42		10 03		bpl $dd47	                bpl +
5503	.dd44		20 2e c9	jsr $c92e	                jsr negateAY
5504	.dd47						+
5505	.dd47		84 de		sty $de		                sty zhlfw.pixelsX+0
5506	.dd49		85 df		sta $df		                sta zhlfw.pixelsX+1
5507	.dd4b		a2 2e		ldx #$2e	                ldx #VDUVariables.workspace._2E
5508	.dd4d		20 c3 de	jsr $dec3	                jsr windGADDR
5509	.dd50		18		clc		                clc
5510	.dd51		d0 10		bne $dd63	                bne rtsDD64                    ;taken if point outside window
5511	.dd53		b1 d6		lda ($d6),y	                lda (ZMEMG),y                  ;get screen byte
5512	.dd55		5d 30 88	eor $8830,x	                eor andy.hlfw.ecfPattern,x     ;EOR with appropriate pattern
5513	.dd58		85 da		sta $da		                sta zhlfw.notByteMatch ;0 if whole byte matches
5514	.dd5a		25 d1		and $d1		                and ZMASK                      ;0 if masked byte matches
5515	.dd5c		f0 02		beq $dd60	                beq +              ;taken if masked byte matches - A=0
5516	.dd5e		a9 08		lda #$08	                lda #$08              ;masked byte doesn't match - A=8
5517	.dd60						+
5518	.dd60		45 e1		eor $e1		                eor zhlfw.resultEOR ;maybe invert result
5519	.dd62		38		sec		                sec
5520	.dd63						rtsDD64:
5521	.dd63		60		rts		                rts

5523							;-------------------------------------------------------------------------

5525	.dd64						shouldFillByte:
5526	.dd64		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5527	.dd66		5d 30 88	eor $8830,x	                eor andy.hlfw.ecfPattern,x
5528	.dd69		85 da		sta $da		                sta zhlfw.notByteMatch
5529	.dd6b		05 e1		ora $e1		                ora zhlfw.resultEOR
5530	.dd6d		18		clc		                clc
5531	.dd6e		d0 13		bne $dd83	                bne rtsDD84
5532	.dd70		a5 de		lda $de		                lda zhlfw.pixelsX+0
5533	.dd72		ed 61 03	sbc $0361	                sbc vduv.pixelsPerByteMinusOne
5534	.dd75		48		pha		                pha
5535	.dd76		a5 df		lda $df		                lda zhlfw.pixelsX+1
5536	.dd78		e9 00		sbc #$00	                sbc #$00
5537	.dd7a		90 06		bcc $dd82	                bcc pla_rts_DD83             ;taken if past X=0
5538	.dd7c		85 df		sta $df		                sta zhlfw.pixelsX+1
5539	.dd7e		68		pla		                pla
5540	.dd7f		85 de		sta $de		                sta zhlfw.pixelsX+0
5541	.dd81		60		rts		                rts

5543	.dd82						pla_rts_DD83:
5544	.dd82		68		pla		                pla
5545	.dd83						rtsDD84:
5546	.dd83		60		rts		                rts

5548							;-------------------------------------------------------------------------

5550	.dd84						LDD85:
5551	.dd84		a5 da		lda $da		                lda zhlfw.notByteMatch
5552	.dd86		25 d1		and $d1		                and ZMASK
5553	.dd88		f0 02		beq $dd8c	                beq +
5554	.dd8a		a9 08		lda #$08	                lda #$08
5555	.dd8c						+
5556	.dd8c		45 e1		eor $e1		                eor zhlfw.resultEOR
5557	.dd8e		d0 0d		bne $dd9d	                bne rtsDD9E

5559							                ; pixelsX -= 1
5560	.dd90		a5 de		lda $de		                lda zhlfw.pixelsX+0
5561	.dd92		d0 06		bne $dd9a	                bne +
5562	.dd94		a5 df		lda $df		                lda zhlfw.pixelsX+1
5563	.dd96		f0 05		beq $dd9d	                beq rtsDD9E
5564	.dd98		c6 df		dec $df		                dec zhlfw.pixelsX+1
5565	.dd9a						+
5566	.dd9a		c6 de		dec $de		                dec zhlfw.pixelsX+0
5567	.dd9c		38		sec		                sec
5568	.dd9d						rtsDD9E:
5569	.dd9d		60		rts		                rts

5571							;-------------------------------------------------------------------------
5572							;
5573							; Copy appropriate ECF pattern for line fill.
5574							;
5575							; entry:
5576							;
5577							; A = horizontal line fill PLOT code
5578							;
5579							; exit:
5580							;
5581							; andy.hlfw.ecfPattern = holds bg/fg ECF pattern as required
5582							;
5583							; ZTEMPD?1 = 0 for fill to matching, 8 to fill to non-matching
5584							;
5585	.dd9e						copyECFPatternForLineFill:
5586	.dd9e		4a		lsr a		                lsr a                        ;36-39; 44-47; 52-55; 60-63
5587	.dd9f		4a		lsr a		                lsr a                        ;18-19; 42-43; 26-27; 30-31
5588	.dda0						LDDA1:
5589	.dda0		29 08		and #$08	                and #$08                     ;8 if PLOT >= 104
5590	.dda2		85 e1		sta $e1		                sta zhlfw.resultEOR
5591	.dda4		49 0f		eor #$0f	                eor #$0F                     ;
5592	.dda6		aa		tax		                tax
5593	.dda7		a0 07		ldy #$07	                ldy #$07
5594	.dda9						-
5595	.dda9		bd 20 88	lda $8820,x	                lda andy.currentECFPatterns,x
5596	.ddac		99 30 88	sta $8830,y	                sta andy.hlfw.ecfPattern,y
5597	.ddaf		ca		dex		                dex
5598	.ddb0		88		dey		                dey
5599	.ddb1		10 f6		bpl $dda9	                bpl -
5600	.ddb3		a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
5601	.ddb5		60		rts		                rts

5603							;-------------------------------------------------------------------------
5604							;
5605							;
5606							; entry:
5607							;
5608							; A = offset into VDU variables of coordinates
5609							;
5610							; exit:
5611							;
5612							; A = colour, or $ff if off screen/teletext (as per OSWORD $09)
5613							;
5614	.ddb6						readPixelColour: .proc
5615	.ddb6		20 f9 c0	jsr $c0f9	                jsr stopCursorEditing
5616	.ddb9		ae 61 03	ldx $0361	                ldx vduv.pixelsPerByteMinusOne
5617	.ddbc		f0 21		beq $dddf	                beq invalid             ;taken if teletext
5618	.ddbe		48		pha		                pha
5619	.ddbf		aa		tax		                tax
5620	.ddc0		20 dd d1	jsr $d1dd	                jsr eigabsEntryPoint
5621	.ddc3		fa		plx		                plx
5622	.ddc4		20 c3 de	jsr $dec3	                jsr windGADDR
5623	.ddc7		d0 16		bne $dddf	                bne invalid             ;taken if off screen
5624	.ddc9		b1 d6		lda ($d6),y	                lda (ZMEMG),y
5625	.ddcb		64 da		stz $da		                stz ZTEMP+0
5626	.ddcd		80 01		bra $ddd0	                bra shiftMask

5628							                ; Keep shifting the byte and the mask. When a 1 bit is
5629							                ; shifted out of the mask, shift the corresponding
5630							                ; byte bit bit into ZTEMP+0, building up the pixel
5631							                ; colour a bit at a time.
5632							                ;
5633							                ; When the mask becomes 0, done.
5634	.ddcf						shiftByteAndMask:
5635	.ddcf		0a		asl a		                asl a
5636	.ddd0						shiftMask:
5637	.ddd0		06 d1		asl $d1		                asl ZMASK
5638	.ddd2		90 fb		bcc $ddcf	                bcc shiftByteAndMask
5639	.ddd4		0a		asl a		                asl a
5640	.ddd5		26 da		rol $da		                rol ZTEMP+0
5641	.ddd7		a6 d1		ldx $d1		                ldx ZMASK
5642	.ddd9		d0 f5		bne $ddd0	                bne shiftMask
5643	.dddb		a5 da		lda $da		                lda ZTEMP+0
5644	.dddd		80 02		bra $dde1	                bra done

5646	.dddf						invalid:
5647	.dddf		a9 ff		lda #$ff	                lda #$FF
5648	.dde1						done:
5649	.dde1		4c c9 c0	jmp $c0c9	                jmp reinstateCursorEditing
5650							                .endproc

5652							;-------------------------------------------------------------------------
5653							;
5654							; Translate ASCII char to the SAA5050 character set.
5655							;
5656							; # ($23) becomes $5f
5657							; _ ($5f) becomes $60
5658							; GBP ($60) becomes $23
5659							;
5660							; Because the mapping is a kind of cycle, you can call this routine
5661							; twice to translate from SAA5050 to ASCII.
5662							;
5663							; entry:
5664							;
5665							; A = ASCII char
5666							;
5667							; exit:
5668							;
5669							; A = SAA550 char
5670							;
5671	.dde4						getSAA5050FromASCII:
5672	.dde4		c9 23		cmp #$23	                cmp #$23
5673	.dde6		f0 0a		beq $ddf2	                beq translateHash
5674	.dde8		c9 5f		cmp #$5f	                cmp #$5F
5675	.ddea		f0 08		beq $ddf4	                beq translateUnderscore
5676	.ddec		c9 60		cmp #$60	                cmp #$60
5677	.ddee		d0 06		bne $ddf6	                bne rtsDDF7
5678	.ddf0						translateGBP:
5679	.ddf0		49 3f		eor #$3f	                eor #$3F                     ;0x60->0x5f
5680	.ddf2						translateHash:
5681	.ddf2		49 43		eor #$43	                eor #$43                     ;0x23->0x5f or 0x5f->0x1c
5682	.ddf4						translateUnderscore:
5683	.ddf4		49 3f		eor #$3f	                eor #$3F                     ;0x5f->0x60 or 0x1c->0x23
5684	.ddf6						rtsDDF7:
5685	.ddf6		60		rts		                rts

5687							;-------------------------------------------------------------------------

5689	.ddf7						readCharacterAtTextCursor: .proc
5690	.ddf7		58		cli		                cli
5691	.ddf8		24 d0		bit $d0		                bit STATE
5692	.ddfa		50 06		bvc $de02	                bvc +                      ;taken if not cursor editing
5693	.ddfc		20 f9 c0	jsr $c0f9	                jsr stopCursorEditing
5694	.ddff		20 d0 c0	jsr $c0d0	                jsr exchangeCursors
5695	.de02						+
5696	.de02		ac 60 03	ldy $0360	                ldy vduv.numberOfLogicalColoursMinusOne
5697	.de05		d0 17		bne $de1e	                bne bitmapMode
5698	.de07						readTeletextChar:
5699	.de07		b2 d8		lda ($d8)	                lda (ZMEMT)                  ;read character from screen
5700	.de09		20 e4 dd	jsr $dde4	                jsr getSAA5050FromASCII      ;call 2x to convert to ASCII
5701	.de0c		20 e4 dd	jsr $dde4	                jsr getSAA5050FromASCII      ;call 2x to convert to ASCII
5702	.de0f						done:
5703	.de0f		24 d0		bit $d0		                bit STATE
5704	.de11		50 06		bvc $de19	                bvc +                     ;taken if not cursor editing
5705	.de13		20 d0 c0	jsr $c0d0	                jsr exchangeCursors
5706	.de16		20 c9 c0	jsr $c0c9	                jsr reinstateCursorEditing
5707	.de19						+
5708	.de19		ac 55 03	ldy $0355	                ldy vduv.currentScreenMODE
5709	.de1c		aa		tax		                tax
5710	.de1d		60		rts		                rts

5712	.de1e						bitmapMode:
5713	.de1e		20 56 de	jsr $de56	                jsr LDE56
5714	.de21		a5 f4		lda $f4		                lda $F4
5715	.de23		48		pha		                pha
5716	.de24		20 57 e5	jsr $e557	                jsr selectTerminalROMAndANDY
5717	.de27		a9 20		lda #$20	                lda #$20
5718	.de29		aa		tax		                tax                          ;X = ASCII code for char
5719	.de2a		20 38 e2	jsr $e238	                jsr getSoftCharacterDefinitionAddress
5720	.de2d						compare:
5721	.de2d		a0 07		ldy #$07	                ldy #$07
5722	.de2f						-
5723	.de2f		b9 28 03	lda $0328,y	                lda vduv.workspace._28,y
5724	.de32		51 de		eor ($de),y	                eor (ZTEMPC),y
5725	.de34		d0 0e		bne $de44	                bne nextFontChar ;taken if no match - can't be this char
5726	.de36		88		dey		                dey
5727	.de37		10 f6		bpl $de2f	                bpl -

5729	.de39		8a		txa		                txa                          ;A = char found
5730							                .if version==350
5731	.de3a		10 02		bpl $de3e	                bpl bitmapModeDone
5732	.de3c		49 7f		eor #$7f	                eor #$7f
5733							                .endif
5734	.de3e						bitmapModeDone:
5735	.de3e		fa		plx		                plx
5736	.de3f		20 59 e5	jsr $e559	                jsr selectROMX
5737	.de42		80 cb		bra $de0f	                bra done

5739	.de44						nextFontChar:
5740	.de44		e8		inx		                inx                          ;next ASCII code
5741							                .if version==350
5742	.de45		8a		txa		                txa
5743	.de46		10 02		bpl $de4a	                bpl LDE4A
5744	.de48		49 7f		eor #$7f	                eor #$7f
5745	.de4a						LDE4A:
5746	.de4a		20 38 e2	jsr $e238	                jsr getSoftCharacterDefinitionAddress
5754							                .endif
5755	.de4d						gotCharAddress:
5756	.de4d		e0 7f		cpx #$7f	                cpx #$7F
5757	.de4f		f0 f3		beq $de44	                beq nextFontChar                 ;skip CHR$127
5758	.de51		8a		txa		                txa
5759	.de52		d0 d9		bne $de2d	                bne compare           ;taken if more chars to consider
5760	.de54		80 e8		bra $de3e	                bra bitmapModeDone ;finish with A=0 - i.e., no match found
5761							                .endproc

5763							;-------------------------------------------------------------------------
5764							;
5765							; Copy character out of screen memory, and store as a 1 bpp bitmap in
5766							; VDU variables workspace.
5767							;
5768	.de56						LDE56: .proc
5769	.de56		a6 d8		ldx $d8		                ldx ZMEMT+0
5770	.de58		a5 d9		lda $d9		                lda ZMEMT+1
5771	.de5a		20 d8 ce	jsr $ced8	                jsr getNext3ColumnAddresses
5772	.de5d		a0 07		ldy #$07	                ldy #$07
5773	.de5f						loop:
5774	.de5f		ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
5775	.de62		e0 03		cpx #$03	                cpx #$03
5776	.de64		f0 09		beq $de6f	                beq read2bppChar
5777	.de66		b0 13		bcs $de7b	                bcs read4bppChar
5778	.de68						read1bppChar:
5779	.de68		b1 d8		lda ($d8),y	                lda (ZMEMT),y
5780	.de6a		4d 58 03	eor $0358	                eor vduv.backgroundTextColour
5781	.de6d		80 22		bra $de91	                bra next

5783	.de6f						read2bppChar:
5784	.de6f		b1 d8		lda ($d8),y	                lda (ZMEMT),y                ;get pixels 0-3
5785	.de71		20 a2 de	jsr $dea2	                jsr get4Pixels
5786	.de74		b1 da		lda ($da),y	                lda (ZTEMP),y                  ;get pixels 4-7
5787	.de76		20 a2 de	jsr $dea2	                jsr get4Pixels
5788	.de79		80 14		bra $de8f	                bra LDE8F

5790	.de7b						read4bppChar:
5791	.de7b		b1 d8		lda ($d8),y	                lda (ZMEMT),y                ;get pixels 0/1
5792	.de7d		20 98 de	jsr $de98	                jsr get2Pixels
5793	.de80		b1 da		lda ($da),y	                lda (ZTEMP),y                ;get pixels 2/3
5794	.de82		20 98 de	jsr $de98	                jsr get2Pixels
5795	.de85		b1 dc		lda ($dc),y	                lda (ZTEMPB),y               ;get pixels 4/5
5796	.de87		20 98 de	jsr $de98	                jsr get2Pixels
5797	.de8a		b1 e0		lda ($e0),y	                lda (ZTEMPD),y               ;get pixels 6/7
5798	.de8c		20 98 de	jsr $de98	                jsr get2Pixels
5799	.de8f						LDE8F:
5800	.de8f		a5 df		lda $df		                lda ZTEMPC+1
5801	.de91						next:
5802	.de91		99 28 03	sta $0328,y	                sta vduv.workspace._28,y
5803	.de94		88		dey		                dey
5804	.de95		10 c8		bpl $de5f	                bpl loop
5805	.de97		60		rts		                rts

5807	.de98						get2Pixels:
5808	.de98		4d 58 03	eor $0358	                eor vduv.backgroundTextColour ;reset background pixel bits
5809	.de9b		20 b5 de	jsr $deb5	                jsr or2Pixels
5810	.de9e		29 03		and #$03	                and #%00000011               ;2 pixels/byte
5811	.dea0		80 0c		bra $deae	                bra shiftIn2

5813	.dea2						get4Pixels:
5814	.dea2		4d 58 03	eor $0358	                eor vduv.backgroundTextColour ;
5815	.dea5		20 ba de	jsr $deba	                jsr or4Pixels
5816	.dea8		29 0f		and #$0f	                and #%00001111               ;4 pixels/byte

5818							                ; Build up the 1bpp char row in ZTEMPC?1, 2 or 4 bits
5819							                ; at a time.
5820	.deaa		06 df		asl $df		                asl ZTEMPC+1
5821	.deac		06 df		asl $df		                asl ZTEMPC+1
5822	.deae						shiftIn2:
5823	.deae		06 df		asl $df		                asl ZTEMPC+1
5824	.deb0		06 df		asl $df		                asl ZTEMPC+1
5825	.deb2		04 df		tsb $df		                tsb ZTEMPC+1
5826	.deb4		60		rts		                rts

5828							                ; OR together all the N bits for each pixel, making a
5829							                ; byte in which the bottom N bits have a bit set for
5830							                ; each non-0 pixel in the byte.
5831	.deb5						or2Pixels:
5832	.deb5		85 de		sta $de		                sta ZTEMPC+0
5833	.deb7		20 be de	jsr $debe	                jsr shiftOut2
5834	.deba						or4Pixels:
5835	.deba		85 de		sta $de		                sta ZTEMPC+0                 ;%abcdABCD
5836	.debc		4a		lsr a		                lsr a                        ;%0abcdABC
5837	.debd		4a		lsr a		                lsr a                        ;%00abcdAB
5838	.debe						shiftOut2:
5839	.debe		4a		lsr a		                lsr a                        ;%000abcdA
5840	.debf		4a		lsr a		                lsr a                        ;%0000abcd
5841	.dec0		05 de		ora $de		                ora ZTEMPC+0                 ;%0000abcd|%abcdABCD
5842							                .endproc
5843	.dec2						rtsDEC2:
5844	.dec2		60		rts		                rts

5846							;-------------------------------------------------------------------------
5847							;
5848							; Do WIND. If point not in window, return with Z=0. Otherwise, call
5849							; GADDR and return with Z=1.
5850							;
5851	.dec3						windGADDR:
5852	.dec3		20 a7 d1	jsr $d1a7	                jsr windEntryPoint
5853	.dec6		d0 fa		bne $dec2	                bne rtsDEC2                  ;taken if point outside window
5854	.dec8						gaddrEntryPoint:
5855	.dec8		bd 02 03	lda $0302,x	                lda vduv+2,x                 ;get Y coordinate
5856	.decb						LDECB:
5857	.decb		49 ff		eor #$ff	                eor #$FF                     ;invert Y coordinate
5858	.decd		a8		tay		                tay                          ;Y=Y coordinate
5859	.dece		29 07		and #$07	                and #$07                ;get scanline in character row
5860	.ded0		85 da		sta $da		                sta ZTEMP+0             ;save scanline
5861	.ded2		98		tya		                tya                          ;A=Y coordinate
5862	.ded3		29 f8		and #$f8	                and #$F8                     ;row*8
5863	.ded5		4a		lsr a		                lsr a                        ;row*4
5864	.ded6		85 d7		sta $d7		                sta ZMEMG+1                  ;>(row*1024)
5865	.ded8		4a		lsr a		                lsr a                        ;>(row*512)
5866	.ded9		4a		lsr a		                lsr a                        ;>(row*256)
5867	.deda		65 d7		adc $d7		                adc ZMEMG+1                  ;>(row*1280)
5868	.dedc		4a		lsr a		                lsr a                        ;>(row*640)
5869	.dedd		85 d7		sta $d7		                sta ZMEMG+1                  ;
5870	.dedf		a9 00		lda #$00	                lda #$00                     ;
5871	.dee1		6a		ror a		                ror a                        ;<(row*640) - $00/$80
5872	.dee2		ac 56 03	ldy $0356	                ldy vduv.currentScreenMODEGroup
5873	.dee5		f0 03		beq $deea	                beq +                      ;taken if 640 bytes per row
5874	.dee7		46 d7		lsr $d7		                lsr ZMEMG+1                ;>(row*320)
5875	.dee9		6a		ror a		                ror a                    ;<(row*320) - $00/$40/$80/$c0
5876	.deea						+
5877	.deea		05 da		ora $da		                ora ZTEMP+0               ;include the scanline offset
5878	.deec		6d 50 03	adc $0350	                adc vduv.screenTopLeftAddress+0 ;include LSB of screen base
5879	.deef		8d 1a 03	sta $031a	                sta vduv.graphicsAddressOffset

5881							                ; add MSB of screen base to ZMEMG+1
5882	.def2		a5 d7		lda $d7		                lda ZMEMG+1
5883	.def4		6d 51 03	adc $0351	                adc vduv.screenTopLeftAddress+1
5884	.def7		85 d7		sta $d7		                sta ZMEMG+1

5886	.def9		bd 01 03	lda $0301,x	                lda vduv+1,x                 ;get >X
5887	.defc		85 d6		sta $d6		                sta ZMEMG+0                  ;save >X
5888	.defe		bd 00 03	lda $0300,x	                lda vduv+0,x                 ;get <X
5889	.df01		2d 61 03	and $0361	                and vduv.pixelsPerByteMinusOne ;index for pixel
5890	.df04		6d 61 03	adc $0361	                adc vduv.pixelsPerByteMinusOne ;offset into pixel mask table
5891	.df07		a8		tay		                tay
5892	.df08		b9 3a e1	lda $e13a,y	                lda pixelMasks-1,y
5893	.df0b		85 d1		sta $d1		                sta ZMASK

5895							                ; Form 16-bit column address offset (LSB in A, MSB in
5896							                ; ZMEMG+0), assuming 8 bits/pixel. No adjustment
5897							                ; needed if MODE 0/4, but scale up by 2 if MODE 1/5 or
5898							                ; 4 if MODE 2.

5900	.df0d		bd 00 03	lda $0300,x	                lda vduv+0,x                 ;A = <X
5901	.df10		ac 61 03	ldy $0361	                ldy vduv.pixelsPerByteMinusOne
5902	.df13		c0 03		cpy #$03	                cpy #$03
5903	.df15		f0 05		beq $df1c	                beq LDF1C         ;taken if 4 px/byte - i.e., MODE 1/5
5904	.df17		b0 06		bcs $df1f	                bcs LDF1F        ;taken if >4 px/byte - i.e., MODE 0/4
5905	.df19		0a		asl a		                asl a
5906	.df1a		26 d6		rol $d6		                rol ZMEMG+0
5907	.df1c						LDF1C:
5908	.df1c		0a		asl a		                asl a
5909	.df1d		26 d6		rol $d6		                rol ZMEMG+0
5910	.df1f						LDF1F:
5911	.df1f		29 f8		and #$f8	                and #$F8                     ;<column offset
5912	.df21		18		clc		                clc
5913	.df22		6d 1a 03	adc $031a	                adc vduv.graphicsAddressOffset
5914	.df25		8d 1a 03	sta $031a	                sta vduv.graphicsAddressOffset
5915	.df28		a5 d6		lda $d6		                lda ZMEMG+0                  ;>column offset
5916	.df2a		65 d7		adc $d7		                adc ZMEMG+1                  ;add to address MSB
5917	.df2c		10 04		bpl $df32	                bpl +                        ;taken if no wrap
5918	.df2e		38		sec		                sec
5919	.df2f		ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte ;handle wrap at end of screen
5920	.df32						+
5921	.df32		85 d7		sta $d7		                sta ZMEMG+1                  ;got MSB
5922	.df34		64 d6		stz $d6		                stz ZMEMG+0 ;LSB always 0 - the offset takes care of this
5923	.df36		a6 da		ldx $da		                ldx ZTEMP+0 ;get scanline in row
5924	.df38		20 7b da	jsr $da7b	                jsr setupColourMasks
5925	.df3b		ac 1a 03	ldy $031a	                ldy vduv.graphicsAddressOffset
5926	.df3e						ldaim00_rts_DF3E:
5927	.df3e		a9 00		lda #$00	                lda #$00                     ;return with Z=1, as per WIND
5928	.df40		60		rts		                rts

5930							;-------------------------------------------------------------------------

5932	.df41						LDF41:
5933	.df41		20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
5934	.df44		da		phx		                phx
5935	.df45		a2 00		ldx #$00	                ldx #$00
5936	.df47		ad 5a 03	lda $035a	                lda $035A
5937	.df4a		c9 04		cmp #$04	                cmp #$04
5938	.df4c		b0 0b		bcs $df59	                bcs LDF59
5939	.df4e		ae 6a 03	ldx $036a	                ldx $036A
5940	.df51		ad 59 03	lda $0359	                lda $0359
5941	.df54		f0 03		beq $df59	                beq LDF59
5942	.df56		ae 6b 03	ldx $036b	                ldx $036B
5943	.df59						LDF59:
5944	.df59		8e 69 03	stx $0369	                stx $0369
5945	.df5c		fa		plx		                plx
5946	.df5d		60		rts		                rts

5948							;-------------------------------------------------------------------------

5950	.df5e						handleCopyKey:
5951	.df5e		a9 20		lda #$20	                lda #STATE.isVDU5
5952	.df60		24 d0		bit $d0		                bit STATE
5953	.df62		50 da		bvc $df3e	                bvc ldaim00_rts_DF3E      ;taken if not cursor editing
5954	.df64		d0 d8		bne $df3e	                bne ldaim00_rts_DF3E      ;taken if VDU5
5955							                .if version==350&&!finmos329
5956	.df66		20 18 fb	jsr $fb18	                jsr LFB0A
5963							                .endif
5964	.df69		f0 0c		beq $df77	                beq rtsDF77              ;taken if char not recognised
5965	.df6b		48		pha		                pha                      ;save char recognised
5966	.df6c		20 d5 df	jsr $dfd5	                jsr isCursorEditingPossible
5967	.df6f		d0 05		bne $df76	                bne pla_rts_DF76
5968	.df71		a9 09		lda #$09	                lda #$09
5969	.df73		20 bc df	jsr $dfbc	                jsr moveEditCursor
5970	.df76						pla_rts_DF76:
5971	.df76		68		pla		                pla
5972	.df77						rtsDF77:
5973	.df77		60		rts		                rts

5975							;-------------------------------------------------------------------------
5976							;
5977							; Handle cursor key press.
5978							;
5979							; Entry: A = one of the cursor key codes:
5980							;            $88 = left
5981							;            $89 = right
5982							;            $8a = down
5983							;            $8b = up

5985	.df78						handleCursorKey:
5986	.df78		48		pha		                pha                          ;save cursor key code
5987	.df79		20 d5 df	jsr $dfd5	                jsr isCursorEditingPossible
5988	.df7c		d0 f8		bne $df76	                bne pla_rts_DF76             ;bail if editing not possible
5989	.df7e		70 16		bvs $df96	                bvs editing                  ;taken if already editing
5990	.df80						beginEditing:
5991	.df80		ad 5f 03	lda $035f	                lda vduv.lastCursorStartRegisterValue
5992	.df83		29 df		and #$df	                and #%11011111
5993	.df85		20 52 cf	jsr $cf52	                jsr setCRTCRegister10        ;hide cursor
5994	.df88		a2 18		ldx #$18	                ldx #VDUVariables.textCursorXPosition
5995	.df8a		a0 64		ldy #$64	                ldy #VDUVariables.editCursorXPosition
5996	.df8c		20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables ;edit cursor pos =
5997							                                                   ;text cursor pos
5998	.df8f		20 04 c1	jsr $c104	                jsr activateEditCursor
5999	.df92		a9 02		lda #$02	                lda #STATE.isScrollingDisabled
6000	.df94		04 d0		tsb $d0		                tsb STATE
6001	.df96						editing:
6002	.df96		68		pla		                pla                          ;restore cursor key code

6004							                ; Form appropriate VDU command (8/9/10/11) for the
6005							                ; key, assuming no VDU axis rearrangement.
6006	.df97		29 7f		and #$7f	                and #$7F
6007	.df99		85 da		sta $da		                sta ZTEMP                    ;save VDU command

6009							                ; Adjust VDU command based on axis swap/inversion.
6010	.df9b		c9 0a		cmp #$0a	                cmp #$0A
6011	.df9d		b0 0e		bcs $dfad	                bcs handleCursorUpOrDown     ;taken if up/down
6012	.df9f						handleCursorLeftOrRightOrCopy:
6013	.df9f		ad 66 03	lda $0366	                lda vduv.cursorFlags
6014	.dfa2		4a		lsr a		                lsr a
6015	.dfa3		29 05		and #$05	                and #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertHorizontal)>>1
6016	.dfa5		89 04		bit #$04	                bit #vduv.cursorFlags.swapAxes>>1
6017	.dfa7		f0 11		beq $dfba	                beq gotActualMoveCommand

6019	.dfa9		49 07		eor #$07	                eor #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal)>>1
6020	.dfab		80 0d		bra $dfba	                bra gotActualMoveCommand

6022	.dfad						handleCursorUpOrDown:
6023	.dfad		ad 66 03	lda $0366	                lda vduv.cursorFlags
6024	.dfb0		4a		lsr a		                lsr a
6025	.dfb1		4a		lsr a		                lsr a
6026	.dfb2		29 03		and #$03	                and #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical)>>2 ;000000SV
6027	.dfb4		89 02		bit #$02	                bit #vduv.cursorFlags.swapAxes>>2
6028	.dfb6		f0 02		beq $dfba	                beq gotActualMoveCommand

6030	.dfb8		49 01		eor #$01	                eor #vduv.cursorFlags.invertVertical>>2
6031	.dfba						gotActualMoveCommand:
6032	.dfba		45 da		eor $da		                eor ZTEMP
6033	.dfbc						moveEditCursor:
6034	.dfbc		a8		tay		                tay                          ;save command
6035	.dfbd		a9 40		lda #$40	                lda #STATE.isCursorEditing
6036	.dfbf		14 d0		trb $d0		                trb STATE            ;temporarily disable edit mode
6037	.dfc1		98		tya		                tya                  ;restore command
6038	.dfc2		ae 6c 03	ldx $036c	                ldx vduv.column81
6039	.dfc5		da		phx		                phx                  ;save old column 81 flag
6040	.dfc6		4e 6c 03	lsr $036c	                lsr vduv.column81    ;temporarily reset column 81 flag
6041	.dfc9		20 27 c0	jsr $c027	                jsr outputToVDU      ;print the cursor movement command
6042	.dfcc		68		pla		                pla
6043	.dfcd		8d 6c 03	sta $036c	                sta vduv.column81            ;restore column 81 flag
6044	.dfd0		a9 40		lda #$40	                lda #STATE.isCursorEditing
6045	.dfd2		04 d0		tsb $d0		                tsb STATE                    ;reinstate edit mode
6046	.dfd4		60		rts		                rts

6048							; Check if cursor editing is possible.
6049							;
6050							; Exit: Z=1 - editing is possible
6051							;             V reflects current STATE.isCursorEditing bit
6052							;       Z=0 - editing not possible
6053	.dfd5						isCursorEditingPossible:
6054	.dfd5		ae 6a 02	ldx $026a	                ldx vduQueueNegativeLength
6055	.dfd8		d0 04		bne $dfde	                bne +                        ;return with Z=0 if VDU
6056							                                             ;queue not empty
6057	.dfda		a9 a0		lda #$a0	                lda #STATE.isVDU21|STATE.isVDU5
6058	.dfdc		24 d0		bit $d0		                bit STATE   ;return with Z=0 if neither VDU21 nor VDU5
6059	.dfde						+
6060	.dfde		60		rts		                rts

6062							;-------------------------------------------------------------------------
6063							;
6064							; 184â<80><93>191 = Move/copy rectangle [MasRef E.3-31]
6065							;
6066							                .if version!=400
6067	.dfdf						plotMoveOrCopyRectangle:
6068	.dfdf		a2 89		ldx #$89	                ldx #$80|extROM   ; select VIEW+ANDY
6069	.dfe1		20 59 e5	jsr $e559	                jsr selectROMX
6070	.dfe4		20 c9 b6	jsr $b6c9	                jsr ext.plotMoveOrCopyRectangle
6071	.dfe7		80 08		bra $dff1	                bra LDFF1
6072							                .endif

6074							;-------------------------------------------------------------------------
6075							;
6076							; 192â<80><93>199 = Plot ellipse outline [MasRef E.3-32]
6077							;
6078							                .if version!=400
6079	.dfe9						plotEllipseOutline:
6080	.dfe9		a2 89		ldx #$89	                ldx #$80|extROM
6081	.dfeb		20 59 e5	jsr $e559	                jsr selectROMX
6082	.dfee		20 f3 b1	jsr $b1f3	                jsr ext.plotEllipseOutline
6083	.dff1						LDFF1:
6084	.dff1		4c 57 e5	jmp $e557	                jmp selectTerminalROMAndANDY
6085							                .endif

6087							;-------------------------------------------------------------------------
6088							;
6089							; 200â<80><93>207 = Plot solid ellipse [MasRef E.3-32]
6090							;
6091							                .if version!=400
6092	.dff4						plotSolidEllipse:
6093	.dff4		a2 89		ldx #$89	                ldx #$80|extROM
6094	.dff6		20 59 e5	jsr $e559	                jsr selectROMX
6095	.dff9		20 72 b2	jsr $b272	                jsr ext.plotSolidEllipse
6096	.dffc		80 f3		bra $dff1	                bra LDFF1
6097							                .endif

6099							                .if version==400
6101							                .endif

6103							;-------------------------------------------------------------------------

6105							; Pretty sure I have the logic for this all wrong...

6107							                .if !finmos329
6108	>dffe						                .align 16
6109							                .endif
6110	.e000						startupMessages: .block
6111							                .if version==500||version==510||autocue
6113							                .endif

6115							                .if version>=511&&!autocue
6117							                .endif
6118	.e000						acornMOS:
6119	>e000		0d				                .text 13
6120							                .if olivetti
6122							                .elsif version==350
6123							                .if CFA3000
6124	>e001		41 43 4f 52 4e 20 4d 4f		                .text "ACORN MOS (Tinsley 64K)"
	>e009		53 20 28 54 69 6e 73 6c 65 79 20 36 34 4b 29
6129							                .endif
6132							                .endif
6133							                .if version==400||version==350
6134	>e018		20				                .text " "
6135							                .endif
6136	>e019		00				                .byte 0
6137	.e01a						beep:
6138	>e01a		07				                .byte 7
6139	>e01b		00				                .byte 0
6140							                .if version!=400&&version!=350
6142							                .endif

6144	.e01c						twoNewlines:
6145	>e01c		08				                .byte 8
6146	>e01d		0d				                .byte $0D
6147	>e01e		0d				                .byte $0D
6148							                ; terminating 0 comes from following table!
6149							                .cerror *!=LE013,"startupMessages needs a terminating 0"
6150							                .endblock
6151	.e01f						LE013:
6152	>e01f		00				                .byte %00000000;$00
6153	>e020		11				                .byte %00010001;$11
6154	>e021		22				                .byte %00100010;$22
6155	>e022		33				                .byte %00110011;$33
6156	>e023		44				                .byte %01000100;$44
6157	>e024		55				                .byte %01010101;$55
6158	>e025		66				                .byte %01100110;$66
6159	>e026		77				                .byte %01110111;$77
6160	>e027		88				                .byte %10001000;$88
6161	>e028		99				                .byte %10011001;$99
6162	>e029		aa				                .byte %10101010;$AA
6163	>e02a		bb				                .byte %10111011;$BB
6164	>e02b		cc				                .byte %11001100;$CC
6165	>e02c		dd				                .byte %11011101;$DD
6166	>e02d		ee				                .byte %11101110;$EE
6167	>e02e		ff				                .byte %11111111;$FF
6168	.e02f						LE023:
6169	>e02f		00				                .byte %00000000;$00
6170	>e030		55				                .byte %01010101;$55
6171	>e031		aa				                .byte %10101010;$AA
6172	>e032		ff				                .byte %11111111;$FF

6174							; VDU control code dispatch tables
6175							; ================================
6176							;
6177							; entry:
6178							;
6179							;

6181							; each routine is (address, number of additional VDU bytes)
6182	=[($c035,0)]					_:=[(vdu0EntryPoint,0)] ; VDU0
6183	=[($c035,0),($c0e1,1)]				_..=[(vdu1EntryPoint,1)] ; VDU1
6184	=[($c035,0),($c0e1,1),($c0e9,0)]		_..=[(vdu2EntryPoint,0)] ; VDU2
6185	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0)]	_..=[(vdu3EntryPoint,0)] ; VDU3
6186	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0)]
							_..=[(vdu4EntryPoint,0)] ; VDU4
6187	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0)]
							_..=[(vdu5EntryPoint,0)] ; VDU5
6188	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0)]
							_..=[(vdu6EntryPoint,0)] ; VDU6
6189	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0)]
							_..=[(vdu7EntryPoint,0)] ; VDU7
6190	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0)]
							_..=[(vdu8EntryPoint,0)] ; VDU8
6191	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0)]
							_..=[(vdu9EntryPoint,0)] ; VDU9
6192	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0)]
							_..=[(vdu10EntryPoint,0)] ; VDU10
6193	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0)]
							_..=[(vdu11EntryPoint,0)] ; VDU11
6194	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0)]
							_..=[(vdu12EntryPoint,0)] ; VDU12
6195	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0)]
							_..=[(vdu13EntryPoint,0)] ; VDU13
6196	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0)]
							_..=[(vdu14EntryPoint,0)] ; VDU14
6197	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0)]
							_..=[(vdu15EntryPoint,0)] ; VDU15
6198	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0)]
							_..=[(vdu16EntryPoint,0)] ; VDU16
6199	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1)]
							_..=[(vdu17EntryPoint,1)] ; VDU17
6200	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2)]
							_..=[(vdu18EntryPoint,2)] ; VDU18
6201	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5)]
							_..=[(vdu19EntryPoint,5)] ; VDU19
6202	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0)]
							_..=[(vdu20EntryPoint,0)] ; VDU20
6203	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0)]
							_..=[(vdu21EntryPoint,0)] ; VDU21
6204	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1)]
							_..=[(vdu22EntryPoint,1)] ; VDU22
6205	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9)]
							_..=[(vdu23EntryPoint,9)] ; VDU23
6206	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8)]
							_..=[(vdu24EntryPoint,8)] ; VDU24
6207	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5)]
							_..=[(vdu25EntryPoint,5)] ; VDU25
6208	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0)]
							_..=[(vdu26EntryPoint,0)] ; VDU26
6209	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0),($c035,0)]
							_..=[(vdu27EntryPoint,0)] ; VDU27
6210	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0),($c035,0),($c3a4,4)]
							_..=[(vdu28EntryPoint,4)] ; VDU28
6211	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0),($c035,0),($c3a4,4),($c789,4)]
							_..=[(vdu29EntryPoint,4)] ; VDU29
6212	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0),($c035,0),($c3a4,4),($c789,4),($c47b,0)]
							_..=[(vdu30EntryPoint,0)] ; VDU30
6213	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0),($c035,0),($c3a4,4),($c789,4),($c47b,0),($c481,2)]
							_..=[(vdu31EntryPoint,2)] ; VDU31
6214	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0),($c035,0),($c3a4,4),($c789,4),($c47b,0),($c481,2),($ce2d,0)]
							_..=[(vdu127EntryPoint,0)] ; VDU127
6215	=[($c035,0),($c0e1,1),($c0e9,0),($c0e9,0),($c51d,0),($c52c,0),($c035,0),($ef27,0),($c299,0),($c24b,0),($c25a,0),($c2b0,0),($c44e,0),($c3f5,0),($c513,0),($c527,0),($c412,0),($c538,1),($c563,2),($c62c,5),($c5c4,0),($c518,0),($c793,1),($c67b,9),($c71e,8),($c69a,5),($c6a9,0),($c035,0),($c3a4,4),($c789,4),($c47b,0),($c481,2),($ce2d,0)]
							vdu_routines=_

6217							; LSB of routine address
6218	.e033						vduRoutinesLSBTable:
6219							                .for i=0,i<len(vdu_routines),i+=1
6220	>e033		35				                .byte <vdu_routines[i][0]
6220	>e034		e1				                .byte <vdu_routines[i][0]
6220	>e035		e9				                .byte <vdu_routines[i][0]
6220	>e036		e9				                .byte <vdu_routines[i][0]
6220	>e037		1d				                .byte <vdu_routines[i][0]
6220	>e038		2c				                .byte <vdu_routines[i][0]
6220	>e039		35				                .byte <vdu_routines[i][0]
6220	>e03a		27				                .byte <vdu_routines[i][0]
6220	>e03b		99				                .byte <vdu_routines[i][0]
6220	>e03c		4b				                .byte <vdu_routines[i][0]
6220	>e03d		5a				                .byte <vdu_routines[i][0]
6220	>e03e		b0				                .byte <vdu_routines[i][0]
6220	>e03f		4e				                .byte <vdu_routines[i][0]
6220	>e040		f5				                .byte <vdu_routines[i][0]
6220	>e041		13				                .byte <vdu_routines[i][0]
6220	>e042		27				                .byte <vdu_routines[i][0]
6220	>e043		12				                .byte <vdu_routines[i][0]
6220	>e044		38				                .byte <vdu_routines[i][0]
6220	>e045		63				                .byte <vdu_routines[i][0]
6220	>e046		2c				                .byte <vdu_routines[i][0]
6220	>e047		c4				                .byte <vdu_routines[i][0]
6220	>e048		18				                .byte <vdu_routines[i][0]
6220	>e049		93				                .byte <vdu_routines[i][0]
6220	>e04a		7b				                .byte <vdu_routines[i][0]
6220	>e04b		1e				                .byte <vdu_routines[i][0]
6220	>e04c		9a				                .byte <vdu_routines[i][0]
6220	>e04d		a9				                .byte <vdu_routines[i][0]
6220	>e04e		35				                .byte <vdu_routines[i][0]
6220	>e04f		a4				                .byte <vdu_routines[i][0]
6220	>e050		89				                .byte <vdu_routines[i][0]
6220	>e051		7b				                .byte <vdu_routines[i][0]
6220	>e052		81				                .byte <vdu_routines[i][0]
6220	>e053		2d				                .byte <vdu_routines[i][0]
6221							                .next

6223							; If bit 7 set: MSB of routine address
6224							;
6225							; If bit 7 clear:
6226							;
6227							; Top 4 bits are bits 8-11 of routine address (bits 12-15 are %1010,
6228							; so address is $C0xx to $C7xx)
6229							;
6230							; Bottom 4 bits are ORed with $f0 and stored in $26a - -ve bytes left
6231							; in VDU queue.
6232	.e054						vduRoutinesMSBTable:
6233							                .for i=0,i<len(vdu_routines),i+=1
6234							                .if vdu_routines[i][1]==0
6235	>e054		c0				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e055		0f				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e056		c0				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e057		c0				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e058		c5				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e059		c5				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e05a		c0				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e05b		ef				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e05c		c2				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e05d		c2				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e05e		c2				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e05f		c2				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e060		c4				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e061		c3				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e062		c5				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e063		c5				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e064		c4				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e065		5f				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e066		5e				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e067		6b				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e068		c5				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e069		c5				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e06a		7f				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e06b		67				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e06c		78				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e06d		6b				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e06e		c6				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e06f		c0				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e070		3c				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e071		7c				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e072		c4				                .byte >vdu_routines[i][0]
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6236							                .else
6237							                .cerror vdu_routines[i][0]<(vduRoutinesPage<<8) || vdu_routines[i][0]>(vduRoutinesPage<<8)+$7ff,format("illegal VDU routine address for VDU %d: $%04x",i,vdu_routines[i][0])
6238							                .cerror vdu_routines[i][1]<0 || vdu_routines[i][1]>15,format("illegal VDU parameter count for VDU %d: %d",i,vdu_routines[i][1])
6239	>e073		4e				                .byte (16-vdu_routines[i][1])|(((>vdu_routines[i][0])&$0f)<<4)
6240							                .endif
6234							                .if vdu_routines[i][1]==0
6235	>e074		ce				                .byte >vdu_routines[i][0]
6240							                .endif
6241							                .next

6243							;-------------------------------------------------------------------------
6244							;
6245							; entry:
6246							;
6247							; C=0
6248							;
6249							; A = vdu 23 code
6250							;
6251							; VDU queue = the full 9 bytes of the VDU 23
6252							;
6253	.e075						vdu23EntryPointTable:
6254	>e075		fa ce				                .word vdu23_0_EntryPoint
6255	>e077		2a cf				                .word vdu23_1_EntryPoint
6256	>e079		56 cf				                .word vdu23_2_EntryPoint
6257	>e07b		56 cf				                .word vdu23_3_EntryPoint
6258	>e07d		56 cf				                .word vdu23_4_EntryPoint
6259	>e07f		56 cf				                .word vdu23_5_EntryPoint
6260	>e081		de cf				                .word vdu23_6_EntryPoint
6261	>e083		e5 cf				                .word vdu23_7_EntryPoint
6262	>e085		68 d0				                .word vdu23_8_EntryPoint
6263	>e087		0e d1				                .word vdu23_9_EntryPoint
6264	>e089		0f d1				                .word vdu23_10_EntryPoint
6265	>e08b		6c cf				                .word vdu23_11_EntryPoint
6266	>e08d		95 cf				                .word vdu23_12_EntryPoint
6267	>e08f		95 cf				                .word vdu23_13_EntryPoint
6268	>e091		95 cf				                .word vdu23_14_EntryPoint
6269	>e093		95 cf				                .word vdu23_15_EntryPoint
6270	>e095		1d d1				                .word vdu23_16_EntryPoint

6272							;-------------------------------------------------------------------------
6273							;
6274							; entry:
6275							;
6276							; A = plot number
6277							;
6278	.e097						plotEntryPointTable:
6279	>e097		49 db				                .word plotPoint    ;64â<80><93>71 = Plot point [MasRef E.3-24]
6280	>e099		6b dc				                .word plotHorizontalLineFill ;72â<80><93>79 = Horizontal line fill (left and right to non-background) [MasRef E.3-24]
6281	>e09b		12 9c				                .word terminal.L9BF7 ;80â<80><93>87 = Plot triangle [MasRef E.3-25]
6282	>e09d		74 dc				                .word plotHorizontalLineFillRight ;88â<80><93>95 = Horizontal line fill (right to background) [MasRef E.3-25]
6283	>e09f		47 c4				                .word LC448 ;96â<80><93>103 = Plot rectangle [MasRef E.3-26]
6284	>e0a1		6b dc				                .word plotHorizontalLineFill ;104â<80><93>111 = Horizontal line fill (left and right to foreground) [MasRef E.3-26]
6285	>e0a3		be 9b				                .word terminal.plotParallelogram ;112â<80><93>119 = Plot parallelogram [MasRef E.3-27]
6286	>e0a5		74 dc				                .word plotHorizontalLineFillRight ;120â<80><93>127 = Horizontal line fill (right to non-foreground) [MasRef E.3-27]
6287	>e0a7		14 9d				                .word terminal.L9CF9 ;128â<80><93>135 = Flood fill to non-background [MasRef E.3-28]
6288	>e0a9		14 9d				                .word terminal.L9CF9 ;136â<80><93>143 = Flood fill to foreground [MasRef E.3-28]
6289	>e0ab		bf 99				                .word terminal.L99A4 ;144â<80><93>151 = Plot circle outline [MasRef E.3-28]
6290	>e0ad		5f 99				                .word terminal.L9944 ;152â<80><93>159 = Plot filled circle [MasRef E.3-29]
6291	>e0af		b4 99				                .word terminal.L9999 ;160â<80><93>167 = Plot circular arc [MasRef E.3-29]
6292	>e0b1		50 99				                .word terminal.L9935 ;168â<80><93>175 = Plot filled chord segment [MasRef E.3-30]
6293	>e0b3		3e 99				                .word terminal.L9923 ;176â<80><93>183 = Plot filled sector [MasRef E.3-30]
6294	>e0b5		df df				                .word plotMoveOrCopyRectangle ;184â<80><93>191 = Move/copy rectangle [MasRef E.3-31]
6295	>e0b7		e9 df				                .word plotEllipseOutline ;192â<80><93>199 = Plot ellipse outline [MasRef E.3-32]
6296	>e0b9		f4 df				                .word plotSolidEllipse ;200â<80><93>207 = Plot solid ellipse [MasRef E.3-32]

6298							; Times 40 lookup table, high bytes
6299	.e0bb						multiplyBy40TableHigh:
6300							                .for i=0,i<25,i+=1
6301	>e0bb		00				                .byte >i*40
6301	>e0bc		00				                .byte >i*40
6301	>e0bd		00				                .byte >i*40
6301	>e0be		00				                .byte >i*40
6301	>e0bf		00				                .byte >i*40
6301	>e0c0		00				                .byte >i*40
6301	>e0c1		00				                .byte >i*40
6301	>e0c2		01				                .byte >i*40
6301	>e0c3		01				                .byte >i*40
6301	>e0c4		01				                .byte >i*40
6301	>e0c5		01				                .byte >i*40
6301	>e0c6		01				                .byte >i*40
6301	>e0c7		01				                .byte >i*40
6301	>e0c8		02				                .byte >i*40
6301	>e0c9		02				                .byte >i*40
6301	>e0ca		02				                .byte >i*40
6301	>e0cb		02				                .byte >i*40
6301	>e0cc		02				                .byte >i*40
6301	>e0cd		02				                .byte >i*40
6301	>e0ce		02				                .byte >i*40
6301	>e0cf		03				                .byte >i*40
6301	>e0d0		03				                .byte >i*40
6301	>e0d1		03				                .byte >i*40
6301	>e0d2		03				                .byte >i*40
6301	>e0d3		03				                .byte >i*40
6302							                .next

6304							; Times 40 lookup table, low bytes
6305	.e0d4						multiplyBy40TableLow:
6306							                .for i=0,i<25,i+=1
6307	>e0d4		00				                .byte <i*40
6307	>e0d5		28				                .byte <i*40
6307	>e0d6		50				                .byte <i*40
6307	>e0d7		78				                .byte <i*40
6307	>e0d8		a0				                .byte <i*40
6307	>e0d9		c8				                .byte <i*40
6307	>e0da		f0				                .byte <i*40
6307	>e0db		18				                .byte <i*40
6307	>e0dc		40				                .byte <i*40
6307	>e0dd		68				                .byte <i*40
6307	>e0de		90				                .byte <i*40
6307	>e0df		b8				                .byte <i*40
6307	>e0e0		e0				                .byte <i*40
6307	>e0e1		08				                .byte <i*40
6307	>e0e2		30				                .byte <i*40
6307	>e0e3		58				                .byte <i*40
6307	>e0e4		80				                .byte <i*40
6307	>e0e5		a8				                .byte <i*40
6307	>e0e6		d0				                .byte <i*40
6307	>e0e7		f8				                .byte <i*40
6307	>e0e8		20				                .byte <i*40
6307	>e0e9		48				                .byte <i*40
6307	>e0ea		70				                .byte <i*40
6307	>e0eb		98				                .byte <i*40
6307	>e0ec		c0				                .byte <i*40
6308							                .next

6310							; Times 640 lookup table, high bytes
6311	.e0ed						multiplyBy640TableHigh:
6312							                .for i=0,i<32,i+=1
6313	>e0ed		00				                .byte >i*640
6313	>e0ee		02				                .byte >i*640
6313	>e0ef		05				                .byte >i*640
6313	>e0f0		07				                .byte >i*640
6313	>e0f1		0a				                .byte >i*640
6313	>e0f2		0c				                .byte >i*640
6313	>e0f3		0f				                .byte >i*640
6313	>e0f4		11				                .byte >i*640
6313	>e0f5		14				                .byte >i*640
6313	>e0f6		16				                .byte >i*640
6313	>e0f7		19				                .byte >i*640
6313	>e0f8		1b				                .byte >i*640
6313	>e0f9		1e				                .byte >i*640
6313	>e0fa		20				                .byte >i*640
6313	>e0fb		23				                .byte >i*640
6313	>e0fc		25				                .byte >i*640
6313	>e0fd		28				                .byte >i*640
6313	>e0fe		2a				                .byte >i*640
6313	>e0ff		2d				                .byte >i*640
6313	>e100		2f				                .byte >i*640
6313	>e101		32				                .byte >i*640
6313	>e102		34				                .byte >i*640
6313	>e103		37				                .byte >i*640
6313	>e104		39				                .byte >i*640
6313	>e105		3c				                .byte >i*640
6313	>e106		3e				                .byte >i*640
6313	>e107		41				                .byte >i*640
6313	>e108		43				                .byte >i*640
6313	>e109		46				                .byte >i*640
6313	>e10a		48				                .byte >i*640
6313	>e10b		4b				                .byte >i*640
6313	>e10c		4d				                .byte >i*640
6314							                .next

6316							;-------------------------------------------------------------------------

6318	.e10d						modeMaxRow:
6319	>e10d		1f				                .byte 31                     ;MODE 0 = 32 rows
6320	>e10e		1f				                .byte 31                     ;MODE 1 = 32 rows
6321	>e10f		1f				                .byte 31                     ;MODE 2 = 32 rows
6322	>e110		18				                .byte 24                     ;MODE 3 = 25 rows
6323	>e111		1f				                .byte 31                     ;MODE 4 = 32 rows
6324	>e112		1f				                .byte 31                     ;MODE 5 = 32 rows
6325	>e113		18				                .byte 24                     ;MODE 6 = 25 rows
6326	>e114		18				                .byte 24                     ;MODE 7 = 25 rows

6328							;-------------------------------------------------------------------------

6330	.e115						modeMaxColumn:
6331	>e115		4f				                .byte 79                     ;MODE 0 = 80 columns
6332	>e116		27				                .byte 39                     ;MODE 1 = 40 columns
6333	>e117		13				                .byte 19                     ;MODE 2 = 20 columns
6334	>e118		4f				                .byte 79                     ;MODE 3 = 80 columns
6335	>e119		27				                .byte 39                     ;MODE 4 = 40 columns
6336	>e11a		13				                .byte 19                     ;MODE 5 = 20 columns
6337	>e11b		27				                .byte 39                     ;MODE 6 = 40 columns
6338	>e11c		27				                .byte 39                     ;MODE 7 = 40 columns

6340							;-------------------------------------------------------------------------

6342	.e11d						vcontrolForScreenMODE:
6343	>e11d		9c				                .byte VCONTROL.cursorX___|VCONTROL.crtc2MHz|VCONTROL.shift16MHz ; $9C - MODE 0
6344	>e11e		d8				                .byte VCONTROL.cursorXX__|VCONTROL.crtc2MHz|VCONTROL.shift8MHz ; $d8 - MODE 1
6345	>e11f		f4				                .byte VCONTROL.cursorXXXX|VCONTROL.crtc2MHz|VCONTROL.shift4MHz ; $F4 - MODE 2
6346	>e120		9c				                .byte VCONTROL.cursorX___|VCONTROL.crtc2MHz|VCONTROL.shift16MHz ; $9C - MODE 3
6347	>e121		88				                .byte VCONTROL.cursorX___|VCONTROL.crtc1MHz|VCONTROL.shift8MHz ; $88 - MODE 4
6348	>e122		c4				                .byte VCONTROL.cursorXX__|VCONTROL.crtc1MHz|VCONTROL.shift4MHz ; $C4 - MODE 5
6349	>e123		88				                .byte VCONTROL.cursorX___|VCONTROL.crtc1MHz|VCONTROL.shift8MHz ; $88 - MODE 6
6350	>e124		4b				                .byte VCONTROL.cursor_X__|VCONTROL.crtc1MHz|VCONTROL.shift8MHz|VCONTROL.isTeletext|VCONTROL.flash ; $4B - MODE 7

6352							;-------------------------------------------------------------------------

6354	.e125						bytesPerCharacterForMODE:
6355	>e125		08				                .byte 8                      ;MODE 0
6356	>e126		10				                .byte 16                     ;MODE 1
6357	>e127		20				                .byte 32                     ;MODE 2
6358	>e128		08				                .byte 8                      ;MODE 3
6359	>e129		08				                .byte 8                      ;MODE 4
6360	>e12a		10				                .byte 16                     ;MODE 5
6361	>e12b		08				                .byte 8                      ;MODE 6
6362	.e12c						LE120:
6363	>e12c		01				                .byte %00000001              ;MODE 7
6364	>e12d		ff				                .byte %11111111
6365	>e12e		55				                .byte %01010101
6366	>e12f		ff				                .byte %11111111
6367	>e130		77				                .byte %01110111
6368	>e131		33				                .byte %00110011
6369	>e132		11				                .byte %00010001

6371							;-------------------------------------------------------------------------

6373	.e133						distanceMasksTable:
6374	>e133		ff				                .byte %11111111
6375	>e134		7f				                .byte %01111111
6376	>e135		3f				                .byte %00111111
6377	>e136		1f				                .byte %00011111
6378	>e137		0f				                .byte %00001111
6379	>e138		07				                .byte %00000111
6380	>e139		03				                .byte %00000011
6381	>e13a		01				                .byte %00000001

6383							;-------------------------------------------------------------------------
6384							;
6385							; These graphics tables often overlap. I haven't always bothered
6386							; commenting the MODEs for the MODE-indexed tables, as even those
6387							; sometimes overlap.
6388							;
6389							;------------------------------------------------------------------------

6391							;-------------------------------------------------------------------------
6392							;
6393							; This is 3 tables in one. Use the numberOfLogicalColoursMinusOne VDU
6394							; variable to access it:
6395							; pixelMasks[(numberOfLogicalColoursMinusOne&7)-1+colour&numberOfLogicalColoursMinusOne=
6396							;
6397	.e13b						pixelMasks:
6398	>e13b		aa				                .byte %10101010
6399	>e13c		55				                .byte %01010101

6401	>e13d		88				                .byte %10001000
6402	>e13e		44				                .byte %01000100
6403	>e13f		22				                .byte %00100010
6404	>e140		11				                .byte %00010001

6406	>e141		80				                .byte %10000000
6407	>e142		40				                .byte %01000000
6408	>e143		20				                .byte %00100000
6409	>e144		10				                .byte %00010000
6410	>e145		08				                .byte %00001000
6411	>e146		04				                .byte %00000100
6412	>e147		02				                .byte %00000010
6413	.e148						numberOfLogicalColoursMinusOneForMODE:
6414	>e148		01				                .byte %00000001              ;MODE 0 (also part of pixelMasks)
6415	>e149		03				                .byte 3                      ;MODE 1
6416	>e14a		0f				                .byte 15                     ;MODE 2
6417	>e14b		01				                .byte 1                      ;MODE 3
6418	>e14c		01				                .byte 1                      ;MODE 4
6419	>e14d		03				                .byte 3                      ;MODE 5
6420	>e14e		01				                .byte 1                      ;MODE 6
6421							                ; MODE 7 value (0) is in next table

6423							;-------------------------------------------------------------------------
6424							;
6425							; Overwrite: ZGORA=$ff, ZGEOR=$ff
6426							; OR: ZGORA=value, ZGEOR=$00
6427							; AND: ZGORA=~value, ZGEOR=$00
6428							; EOR: ZGORA=$00, ZGEOR=value
6429							; Invert: ZGORA=$00, ZGEOR=$ff
6430							; Leave: ZGORA=$00, ZGEOR=$ff
6431							;
6432	.e14f						zgeorORTable:
6433	>e14f		00				                .byte $00
6434	.e150						zgoraORTable:
6435	>e150		ff				                .byte $FF
6436	.e151						zgoraEORTable:
6437	>e151		00				                .byte $00
6438	>e152		00				                .byte $00
6439	>e153		ff				                .byte $FF
6440	.e154						zgeorEORTable:
6441	>e154		ff				                .byte $FF
6442	>e155		ff				                .byte $FF
6443	>e156		ff				                .byte $FF
6444	>e157		00				                .byte $00

6446							;-------------------------------------------------------------------------
6447							;
6448							; Index using logical colour value to get a byte with that colour
6449							; value in every pixel.
6450							;
6451							; This is 3 tables in one. Use the numberOfLogicalColoursMinusOne VDU
6452							; variable to access it:
6453							; solidColoursTable[(numberOfLogicalColoursMinusOne&7)-1+colour&numberOfLogicalColoursMinusOne=
6454							;
6455	.e158						solidColoursTable:

6457							                ; 1 bpp
6458	>e158		00				                .byte %00000000
6459	>e159		ff				                .byte %11111111

6461							                ; 2 bpp
6462	>e15a		00				                .byte %00000000
6463	>e15b		0f				                .byte %00001111
6464	>e15c		f0				                .byte %11110000
6465	>e15d		ff				                .byte %11111111

6467							                ; 4 bpp
6468	>e15e		00				                .byte %00000000
6469	>e15f		03				                .byte %00000011
6470	>e160		0c				                .byte %00001100
6471	>e161		0f				                .byte %00001111
6472	>e162		30				                .byte %00110000
6473	>e163		33				                .byte %00110011
6474	>e164		3c				                .byte %00111100
6475	>e165		3f				                .byte %00111111
6476	>e166		c0				                .byte %11000000
6477	>e167		c3				                .byte %11000011
6478	>e168		cc				                .byte %11001100
6479	>e169		cf				                .byte %11001111
6480	>e16a		f0				                .byte %11110000
6481	>e16b		f3				                .byte %11110011
6482	>e16c		fc				                .byte %11111100
6483	>e16d		ff				                .byte %11111111

6485	.e16e						pixelsPerByteMinusOneForMODE:
6486	>e16e		07				                .byte 7
6487	>e16f		03				                .byte 3
6488	>e170		01				                .byte 1
6489	.e171						LE165:
6490	>e171		00				                .byte 0
6491	>e172		07				                .byte 7
6492	>e173		03				                .byte 3
6493	.e174						screenMODEGroupForMODE:
6494	>e174		00				                .byte 0
6495	>e175		00				                .byte 0
6496	.e176		00		brk #		                brk
6497	.e177		01 02		ora ($02,x)	                ora ($02,x)
6498	>e179		02				                .byte $02
6499	>e17a		03				                .byte $03
6500							;TSB &0D          :\ E16F= 04 0D       ..
6501	>e17b		04				                .byte $04

6503							;-------------------------------------------------------------------------
6504							;
6505							; Hardware scrolling wraparound size settings for screen mode group.
6506							;
6507							; The values for group 4 (1 KB) are bogus - the Mode 7 addressing
6508							; wraparound is handled differently.
6509							;
6510	.e17c						latchBit5ForScreenMODEGroup:
6511	>e17c		0d				                .byte 5|8                    ;20 KB
6512	>e17d		05				                .byte 5|0                    ;16 KB
6513	>e17e		0d				                .byte 5|8                    ;10 KB
6514	>e17f		05				                .byte 5|0                    ; 8 KB
6515	.e180						latchBit4ForScreenMODEGroup:
6516	>e180		04				                .byte 4|0                    ;20 KB (also benign value for 1 KB)
6517	>e181		04				                .byte 4|0                    ;16 KB
6518	>e182		0c				                .byte 4|8                    ;10 KB
6519	>e183		0c				                .byte 4|8                    ; 8 KB
6520	>e184		04				                .byte 4|0                    ;(benign value for 1 KB)

6522							;-------------------------------------------------------------------------

6524	.e185						screenSizeHighByteForScreenMODEGroup:
6525	>e185		50				                .byte $50
6526	>e186		40				                .byte $40
6527	>e187		28				                .byte $28
6528	>e188		20				                .byte $20
6529	>e189		04				                .byte $04
6530	.e18a						startScreenAddressHighByteForScreenMODEGroup:
6531	>e18a		30				                .byte $30
6532	>e18b		40				                .byte $40
6533	>e18c		58				                .byte $58
6534	>e18d		60				                .byte $60
6535	>e18e		7c				                .byte $7c
6536	.e18f						crtcRegisterLastIndexForScreenMODEGroup:
6537	>e18f		0b				                .byte (crtcRegisterValues20KB-crtcRegisterValues)+$0B
6538	>e190		17				                .byte (crtcRegisterValues16KB-crtcRegisterValues)+$0B
6539	>e191		23				                .byte (crtcRegisterValues10KB-crtcRegisterValues)+$0B
6540	>e192		2f				                .byte (crtcRegisterValues8KB-crtcRegisterValues)+$0B
6541	>e193		3b				                .byte (crtcRegisterValues1KB-crtcRegisterValues)+$0B
6542	.e194						crtcRegisterValues:
6543	.e194						crtcRegisterValues20KB:                   ;MODEs 0/1/2
6544	>e194		7f				                .byte $7F            ;R0 - Horizontal Total
6545	>e195		50				                .byte $50            ;R1 - Horizontal Displayed
6546	>e196		62				                .byte $62            ;R2 - Horizontal Sync
6547	>e197		28				                .byte $28            ;R3 - Sync Width (%vvvvhhhh)
6548	>e198		26				                .byte $26            ;R4 - Vertical Total
6549	>e199		00				                .byte $00            ;R5 - Vertical Total Adjust
6550	>e19a		20				                .byte $20            ;R6 - Vertical Displayed
6551	>e19b		22				                .byte $22            ;R7 - Vertical Sync Position
6552	>e19c		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6553	>e19d		07				                .byte $07               ;R9 - Scan lines per character
6554	>e19e		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6555	>e19f		08				                .byte 8                    ;R11 - Cursor End
6556	.e1a0						crtcRegisterValues16KB:                    ;MODE 3
6557	>e1a0		7f				                .byte $7F                 ;R0 - Horizontal Total
6558	>e1a1		50				                .byte $50                 ;R1 - Horizontal Displayed
6559	>e1a2		62				                .byte $62                 ;R2 - Horizontal Sync
6560	>e1a3		28				                .byte $28                 ;R3 - Sync Width (%vvvvhhhh)
6561	>e1a4		1e				                .byte $1e                 ;R4 - Vertical Total
6562	>e1a5		02				                .byte $02                 ;R5 - Vertical Total Adjust
6563	>e1a6		19				                .byte $19                 ;R6 - Vertical Displayed
6564	>e1a7		1b				                .byte $1B                 ;R7 - Vertical Sync Position
6565	>e1a8		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6566	>e1a9		09				                .byte $09               ;R9 - Scan lines per character
6567	>e1aa		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6568	>e1ab		09				                .byte 9                      ;R11 - Cursor End
6569	.e1ac						crtcRegisterValues10KB:                      ;MODEs 4/5
6570	>e1ac		3f				                .byte $3f                 ;R0 - Horizontal Total
6571	>e1ad		28				                .byte $28                 ;R1 - Horizontal Displayed
6572	>e1ae		31				                .byte $31                 ;R2 - Horizontal Sync
6573	>e1af		24				                .byte $24                 ;R3 - Sync Width (%vvvvhhhh)
6574	>e1b0		26				                .byte $26                 ;R4 - Vertical Total
6575	>e1b1		00				                .byte $00                 ;R5 - Vertical Total Adjust
6576	>e1b2		20				                .byte $20                 ;R6 - Vertical Displayed
6577	>e1b3		22				                .byte $22                 ;R7 - Vertical Sync Position
6578	>e1b4		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6579	>e1b5		07				                .byte $07               ;R9 - Scan lines per character
6580	>e1b6		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6581	>e1b7		08				                .byte 8                      ;R11 - Cursor End
6582	.e1b8						crtcRegisterValues8KB:                       ;MODE 6
6583	>e1b8		3f				                .byte $3F                 ;R0 - Horizontal Total
6584	>e1b9		28				                .byte $28                 ;R1 - Horizontal Displayed
6585	>e1ba		31				                .byte $31                 ;R2 - Horizontal Sync
6586	>e1bb		24				                .byte $24                 ;R3 - Sync Width (%vvvvhhhh)
6587	>e1bc		1e				                .byte $1e                 ;R4 - Vertical Total
6588	>e1bd		02				                .byte $02                 ;R5 - Vertical Total Adjust
6589	>e1be		19				                .byte $19                 ;R6 - Vertical Displayed
6590	>e1bf		1b				                .byte $1B                 ;R7 - Vertical Sync Position
6591	>e1c0		01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6592	>e1c1		09				                .byte $09               ;R9 - Scan lines per character
6593	>e1c2		67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6594	>e1c3		09				                .byte 9                      ;R11 - Cursor End
6595	.e1c4						crtcRegisterValues1KB:                       ;MODE 7
6596	>e1c4		3f				                .byte $3f                 ;R0 - Horizontal Total
6597	>e1c5		28				                .byte $28                 ;R1 - Horizontal Displayed
6598	>e1c6		33				                .byte $33                 ;R2 - Horizontal Sync
6599	>e1c7		24				                .byte $24                 ;R3 - Sync Width (%vvvvhhhh)
6600	>e1c8		1e				                .byte $1e                 ;R4 - Vertical Total
6601	>e1c9		02				                .byte $02                 ;R5 - Vertical Total Adjust
6602	>e1ca		19				                .byte $19                 ;R6 - Vertical Displayed
6603	>e1cb		1b				                .byte $1b                 ;R7 - Vertical Sync Position
6604	>e1cc		93				                .byte CRTC.R8.cursorDelay2|CRTC.R8.displayDelay1|CRTC.R8.interlaceSyncAndVideo ;R8 - Interlace/Delay
6605	>e1cd		12				                .byte $12               ;R9 - Scan lines per character
6606	>e1ce		72				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|18 ;R10 - Cursor blink/start
6607	>e1cf		13				                .byte 19                     ;R11 - Cursor End

6609							;-------------------------------------------------------------------------
6610							;
6611							; Default ECF patterns [MasRef E.3-16]
6612							;
6613							; Only half the pattern is stored. Each pattern repeats every 4
6614							; scanlines.
6615							;
6616	.e1d0						defaultECFPatterns:
6617							                ; MODE 4
6618	>e1d0		aa 00 aa 00			                .byte $aa,$00,$aa,$00        ;1 - Dark grey
6619	>e1d4		aa 55 aa 55			                .byte $aa,$55,$aa,$55        ;2 - Grey
6620	>e1d8		ff 55 ff 55			                .byte $ff,$55,$ff,$55        ;3 - Light grey
6621	>e1dc		11 22 44 88			                .byte $11,$22,$44,$88        ;4 - Hatching

6623							                ; MODE 1/5
6624	>e1e0		a5 0f a5 0f			                .byte $a5,$0f,$a5,$0f        ;1 - Red-orange
6625	>e1e4		a5 5a a5 5a			                .byte $a5,$5a,$a5,$5a        ;2 - Orange
6626	>e1e8		f0 5a f0 5a			                .byte $f0,$5a,$f0,$5a        ;3 - Yellow-orange
6627	>e1ec		f5 fa f5 fa			                .byte $f5,$fa,$f5,$fa        ;4 - Cream

6629							                ; MODE 2
6630	>e1f0		0b 07 0b 07			                .byte $0b,$07,$0b,$07        ;1 - Orange
6631	>e1f4		23 13 23 13			                .byte $23,$13,$23,$13        ;2 - Pink
6632	>e1f8		0e 0d 0e 0d			                .byte $0e,$0d,$0e,$0d        ;3 - Yellow-green
6633	>e1fc		1f 2f 1f 2f			                .byte $1f,$2f,$1f,$2f        ;4 - Cream

6635							                ; MODE 0
6636	>e200		cc 00 cc 00			                .byte $cc,$00,$cc,$00        ;0 - Dark grey
6637	>e204		cc 33 cc 33			                .byte $cc,$33,$cc,$33        ;1 - Grey
6638	>e208		ff 33 ff 33			                .byte $ff,$33,$ff,$33        ;2 - Light grey
6639	>e20c		03 0c 30 c0			                .byte $03,$0c,$30,$c0        ;4 - Hatching

6641	.e210						LE204:
6642	>e210		01				                .byte $01                    ;---
6643	>e211		01				                .byte $01                    ;--h
6644	>e212		03				                .byte $03                    ;-v-
6645	>e213		03				                .byte $03                    ;-vh
6646	>e214		02				                .byte $02                    ;x--
6647	>e215		00				                .byte $00                    ;x-h
6648	>e216		02				                .byte $02                    ;xv-
6649	>e217		00				                .byte $00                    ;xvh

6651	.e218						scrollRoutinesTable:
6652	>e218		5f c9				                .word LC95F
6653	>e21a		6b c9				                .word LC96B
6654	>e21c		5f c9				                .word LC95F
6655	>e21e		6b c9				                .word LC96B
6656	>e220		9d c9				                .word LC99D
6657	>e222		9d c9				                .word LC99D
6658	>e224		a4 c9				                .word LC9A4
6659	>e226		a4 c9				                .word LC9A4
6660	>e228		c3 c9				                .word LC9C3
6661	>e22a		2d ca				                .word LCA2D
6662	>e22c		c3 c9				                .word LC9C3
6663	>e22e		2d ca				                .word LCA2D
6664	>e230		f1 ca				                .word LCAF1
6665	>e232		f1 ca				                .word LCAF1
6666	>e234		fa ca				                .word LCAFA
6667	>e236		fa ca				                .word LCAFA

6669							;-------------------------------------------------------------------------
6670							;
6671							; Get address of soft character definition.
6672							;
6673							; entry:
6674							;
6675							; A = character (32-255)
6676							;
6677							; exit:
6678							;
6679							; (ZTEMPC) = address
6680							;
6681	.e238						getSoftCharacterDefinitionAddress:
6682	.e238		0a		asl a		                asl a                        ;a bcdefgh0
6683	.e239		2a		rol a		                rol a                        ;b cdefgh0a
6684	.e23a		2a		rol a		                rol a                        ;c defgh0ab
6685	.e23b		a8		tay		                tay
6686	.e23c		29 03		and #$03	                and #$03                     ;c 000000ab
6687	.e23e		2a		rol a		                rol a                        ;0 00000abc
6688	.e23f		69 88		adc #$88	                adc #(>andy.softCharacterDefinitions)-1
6689	.e241		85 df		sta $df		                sta ZTEMPC+1
6690	.e243		98		tya		                tya                          ;0 defgh0ab
6691	.e244		29 f8		and #$f8	                and #$F8                     ;0 defgh000
6692	.e246		85 de		sta $de		                sta ZTEMPC+0
6693	.e248		60		rts		                rts                          ;

6695							;-------------------------------------------------------------------------
6696							;
6697							; OSBYTE 165 (&A5) Read output cursor position [MasRef D.2-50]
6698							;
6699	.e249						osbyteA5:
6700	.e249		20 3b f3	jsr $f33b	                jsr withMOSROM
6701	.e24c		24 d0		bit $d0		                bit STATE
6702	.e24e		50 0e		bvc $e25e	                bvc getTextCursorPositionWithColumn81                    ;taken if cursor editing
6703	.e250		20 ba e2	jsr $e2ba	                jsr exchangeEditCursorPositionAndTextCursorPosition
6704	.e253		20 5e e2	jsr $e25e	                jsr getTextCursorPositionWithColumn81
6705	.e256		da		phx		                phx
6706	.e257		5a		phy		                phy
6707	.e258		20 ba e2	jsr $e2ba	                jsr exchangeEditCursorPositionAndTextCursorPosition
6708	.e25b		7a		ply		                ply
6709	.e25c		fa		plx		                plx
6710	.e25d		60		rts		                rts

6712							;-------------------------------------------------------------------------
6713							;
6714							; Get text cursor position, taking the column 81 flag into account and
6715							; reporting the X coordinate as N+1 in that case.
6716							;
6717	.e25e						getTextCursorPositionWithColumn81:
6718	.e25e		20 79 e2	jsr $e279	                jsr getTextCursorPosition
6719	.e261		2c 6c 03	bit $036c	                bit vduv.column81
6720	.e264		10 01		bpl $e267	                bpl +                       ;taken if not at column 81
6721	.e266		e8		inx		                inx                         ;X=81
6722	.e267						+
6723	.e267		60		rts		                rts

6725							;-------------------------------------------------------------------------

6727	.e268						LE25C:
6728	.e268		38		sec		                sec
6729	.e269		ad 0a 03	lda $030a	                lda vduv.textWindowRight
6730	.e26c		ed 08 03	sbc $0308	                sbc vduv.textWindowLeft
6731	.e26f		48		pha		                pha
6732	.e270		a9 00		lda #$00	                lda #$00
6733	.e272		a8		tay		                tay
6734	.e273		80 10		bra $e285	                bra LE279

6736							;-------------------------------------------------------------------------
6737							;
6738							; OSBYTE 134 (&86) Read text cursor position [MasRef D.2-41]
6739							;
6740	.e275						osbyte86:
6741	.e275		24 d0		bit $d0		                bit STATE
6742	.e277		50 d0		bvc $e249	                bvc osbyteA5       ;taken if not cursor editing
6743	.e279						getTextCursorPosition:
6744	.e279		a9 02		lda #$02	                lda #VDUVariables.cursorFlags.invertHorizontal
6745	.e27b		a0 10		ldy #$10	                ldy #VDUVariables.textCursorXPosition-VDUVariables.textWindow
6746	.e27d		a2 00		ldx #$00	                ldx #VDUVariables.textWindowLeft-VDUVariables.textWindow
6747	.e27f		20 96 e2	jsr $e296	                jsr getTextWindowRelativePosition
6748	.e282		48		pha		                pha                          ;save X position
6749	.e283		a9 04		lda #$04	                lda #VDUVariables.cursorFlags.invertVertical
6750	.e285						LE279:
6751	.e285		c8		iny		                iny               ;i.e., offset of textCursorYPosition
6752	.e286		a2 03		ldx #$03	                ldx #VDUVariables.textWindowTop-VDUVariables.textWindow
6753	.e288		20 96 e2	jsr $e296	                jsr getTextWindowRelativePosition
6754	.e28b		aa		tax		                tax                          ;X = Y position
6755	.e28c		a8		tay		                tay                          ;Y = Y position
6756	.e28d		a9 08		lda #$08	                lda #vduv.cursorFlags.swapAxes
6757	.e28f		2c 66 03	bit $0366	                bit vduv.cursorFlags
6758	.e292		f0 24		beq $e2b8	                beq plx_rts ;taken if axes unswapped - so X = X position, Y = Y position
6759	.e294		7a		ply		                ply                          ;Y = Y position, X = X position
6760	.e295		60		rts		                rts

6762							;-------------------------------------------------------------------------
6763							;
6764							; Get text window-relative cursor position, taking into account cursor
6765							; flags.
6766							;
6767							; entry:
6768							;
6769							; A = cursorFlags bit for axis of interest - invertHorizontal or invertVertical
6770							;
6771							; X = offset in VDU variables of text window minimum for axis of interest
6772							;
6773							; Y = offset in VDU variables of cursor position for axis of interest
6774							;
6775							; exit:
6776							;
6777							; A = text window-relative coordinate
6778							;
6779	.e296						getTextWindowRelativePosition:
6780	.e296		38		sec		                sec                     ;C=1 ready for the subtraction
6781	.e297		2c 66 03	bit $0366	                bit vduv.cursorFlags ;test cursor flags inversion bit of interest
6782	.e29a		f0 0b		beq $e2a7	                beq axisNotInverted
6783	.e29c						axisInverted:
6784	.e29c		8a		txa		                txa
6785	.e29d		49 02		eor #$02	                eor #$02                     ;swap min and max
6786	.e29f		aa		tax		                tax
6787	.e2a0		bd 08 03	lda $0308,x	                lda vduv.textWindow,x
6788	.e2a3		f9 08 03	sbc $0308,y	                sbc vduv.textWindow,y
6789	.e2a6		60		rts		                rts

6791	.e2a7						axisNotInverted:
6792	.e2a7		b9 08 03	lda $0308,y	                lda vduv.textWindow,y
6793	.e2aa		fd 08 03	sbc $0308,x	                sbc vduv.textWindow,x
6794	.e2ad		60		rts		                rts

6796							;-------------------------------------------------------------------------
6797							;
6798							; Get default bounds for current mode.
6799							;
6800							; exit:
6801							;
6802							; X = max column (19, 39 or 79)
6803							;
6804							; Y = max row (24 or 31)
6805							;
6806							; preserves: A, C
6807							;
6808	.e2ae						getDefaultBoundsForCurrentScreenMODE:
6809	.e2ae		ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
6810	.e2b1		bc 15 e1	ldy $e115,x	                ldy modeMaxColumn,x          ;Y = max column
6811	.e2b4		5a		phy		                phy                          ;save max column
6812	.e2b5		bc 0d e1	ldy $e10d,x	                ldy modeMaxRow,x             ;Y = max row
6813	.e2b8						plx_rts:
6814	.e2b8		fa		plx		                plx                          ;X = max column
6815	.e2b9		60		rts		                rts

6817							;-------------------------------------------------------------------------
6818							;
6819							; Swap edit cursor position and text cursor position.
6820							;
6821	.e2ba						exchangeEditCursorPositionAndTextCursorPosition:
6822	.e2ba		a2 18		ldx #$18	                ldx #VDUVariables.textCursorXPosition
6823	.e2bc		a0 64		ldy #$64	                ldy #VDUVariables.editCursorXPosition

6825							;-------------------------------------------------------------------------
6826							;
6827							; Swap 2 bytes in the VDU variables.
6828							;
6829							; entry:
6830							;
6831							; X = offset of one set of 2 bytes
6832							;
6833							; Y = offset of the other set of 2 bytes
6834							;
6835	.e2be						exchangeTwoVDUBytes:
6836	.e2be		a9 02		lda #$02	                lda #$02
6837	.e2c0		80 06		bra $e2c8	                bra exchangeVDUVariables

6839							;-------------------------------------------------------------------------
6840							;
6841							; Swap graphics cursor and old graphics cursor.
6842							;
6843	.e2c2						LE2B6:
6844	.e2c2		a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX
6845	.e2c4						LE2B8:
6846	.e2c4		a0 14		ldy #$14	                ldy #VDUVariables.oldGraphicsCursorPixelsX

6848							;-------------------------------------------------------------------------
6849							;
6850							; Swap 4 bytes in the VDU variables.
6851							;
6852							; entry:
6853							;
6854							; X = offset of one set of 4 bytes
6855							;
6856							; Y = offset of the other set of 4 bytes
6857							;
6858	.e2c6						exchangeFourVDUBytes:
6859	.e2c6		a9 04		lda #$04	                lda #$04

6861							;-------------------------------------------------------------------------
6862							;
6863							; Swap bytes in the VDU variables.
6864							;
6865							; entry:
6866							;
6867							; A = number of bytes to swap
6868							;
6869							; X = offset of one set of bytes
6870							;
6871							; Y = offset of the other set of bytes
6872							;
6873	.e2c8						exchangeVDUVariables:
6874	.e2c8		48		pha		                pha                          ;save count remaining
6875	.e2c9		bd 00 03	lda $0300,x	                lda vduv,x
6876	.e2cc		48		pha		                pha
6877	.e2cd		b9 00 03	lda $0300,y	                lda vduv,y
6878	.e2d0		9d 00 03	sta $0300,x	                sta vduv,x
6879	.e2d3		68		pla		                pla
6880	.e2d4		99 00 03	sta $0300,y	                sta vduv,y
6881	.e2d7		e8		inx		                inx
6882	.e2d8		c8		iny		                iny
6883	.e2d9		68		pla		                pla
6884	.e2da		3a		dec a		                dec a
6885	.e2db		d0 eb		bne $e2c8	                bne exchangeVDUVariables
6886	.e2dd		60		rts		                rts

6888							;-------------------------------------------------------------------------
6889							;
6890							; Test current VDU4/VDU5 status.
6891							;
6892							; exit:
6893							;
6894							; Z=0 if VDU5 mode
6895	.e2de						testVDU5State:
6896	.e2de		a5 d0		lda $d0		                lda STATE
6897	.e2e0		29 20		and #$20	                and #STATE.isVDU5
6898	.e2e2		60		rts		                rts

6900							;-------------------------------------------------------------------------

6902							                .if version>=350
6903	.e2e3						LE2E7:
6904	.e2e3		20 3b f3	jsr $f33b	                jsr withMOSROM
6905	.e2e6		4c 12 e9	jmp $e912	                jmp callPrinterDriverWithPrinterBuffer
6906							                .endif

6908							;-------------------------------------------------------------------------

6910							                .if version>=350
6911	.e2e9						LE2ED:
6912	.e2e9		20 3b f3	jsr $f33b	                jsr withMOSROM
6913	.e2ec		4c 91 e8	jmp $e891	                jmp LE8B9
6914							                .endif

6916							;-------------------------------------------------------------------------

6918							                .if version>=350
6919	.e2ef						LE2F3:
6920	.e2ef		20 3b f3	jsr $f33b	                jsr withMOSROM
6921	.e2f2		6c 26 02	jmp ($0226)	                jmp (VDUV)
6922							                .endif

6924							;-------------------------------------------------------------------------

6926							; Default vector table
6927							; ====================
6928	.e2f5						defaultVectorTable: .block
6929	>e2f5		37 f9				                .word badCommandError        ; USERV=$200
6930	>e2f7		3d e5				                .word defaultBRKHandler      ; BRKV=$202
6931	>e2f9		d7 e5				                .word irq1EntryPoint         ; IRQ1V=$204
6932	>e2fb		e4 e5				                .word irq2EntryPoint         ; IRQ2V=$206
6933	>e2fd		dc e7				                .word oscliEntryPoint        ; CLIV=$208
6934	>e2ff		2f ee				                .word osbyteEntryPoint       ; BYTEV=$20a
6935	>e301		a6 ee				                .word oswordEntryPoint       ; WORDV=$20c
6936	>e303		fc e7				                .word oswrchEntryPoint       ; WRCHV=$20e
6937	>e305		96 e7				                .word osrdchEntryPoint       ; RDCHV=$210
6938	.e307						fsVectors: .block
6939	>e307		1b ff				                .word E_FILEV                ; FILEV=$212
6940	>e309		1e ff				                .word E_ARGSV                ; ARGSV=$214
6941	>e30b		21 ff				                .word E_BGETV                ; BGETV=$216
6942	>e30d		24 ff				                .word E_BPUTV                ; BPUTV=$218
6943	>e30f		27 ff				                .word E_GBPBV                ; GBPBV=$21a
6944	>e311		2a ff				                .word E_FINDV                ; FINDV=$21c
6945	>e313		2d ff				                .word E_FSCV                 ; FSCV=$21e
6946	.e315						end:
6947							                .bend
6948	>e315		aa ff				                .word rtsFFAA                ; EVENTV=$220
6949	>e317		aa ff				                .word rtsFFAA                ; UPTV=$222
6950	>e319		aa ff				                .word rtsFFAA                ; NETV=$224
6951	>e31b		aa ff				                .word rtsFFAA                ; VDUV=$226
6952	>e31d		35 f4				                .word keyEntryPoint          ; KEYV=$228
6953	>e31f		15 ea				                .word insEntryPoint          ; INSV=$22a
6954	>e321		ca e9				                .word remEntryPoint          ; REMV=$22c
6955	>e323		53 e9				                .word cnpEntryPoint          ; CNPV=$22e
6956	>e325		aa ff				                .word rtsFFAA                ; IND1V=$230
6957	>e327		aa ff				                .word rtsFFAA                ; IND2V=$232
6958	>e329		aa ff				                .word rtsFFAA                ; IND3V=$234
6959	.e32b						end:
6960							                .bend

6962							                ; valueFF is a (presumably arbitrary) byte with the
6963							                ; value 255, that's BIT'd in a few places to set the V
6964							                ; flag.
6965	.e32b						defaultMOSVariables:
6966	>e32b		90 01				                .word mosVariables-166       ;mosVariablesAddress
6967	>e32d		9f 0d				                .word extendedVectorSpace    ;extendedVectorSpaceAddress
6968	>e32f		a1 02				                .word romInformationTable  ;romInformationTableAddress
6969	>e331		ae f5				                .word keyTranslationTable-16 ;keyboardTranslationTableAddress
6970	>e333		00 03				                .word vduv                   ;vduVariablesAddress
6971	>e335		00				                .byte $00                    ;cfsTimeoutCounter
6972	>e336		00				                .byte $00                    ;inputSource
6973	>e337		ff				                .byte $FF                    ;keyboardSemaphore
6974	>e338		00				                .byte $00                    ;romPollingSemaphore
6975	>e339		00				                .byte $00                    ;oshwm
6976	>e33a		01				                .byte $01                    ;rs423InputInterpretationStatus
6977	>e33b		00				                .byte $00                    ;noignoreState
6978	>e33c		00				                .byte $00                    ;cfsRFSFSSwitch
6979	>e33d		00				                .byte $00                    ;vcontrolRegister
6980	>e33e		00				                .byte $00                    ;vpaletteRegister
6981	>e33f		00				                .byte $00                    ;romActiveAtLastBRK
6982	>e340		ff				                .byte $FF                    ;basicROMNumber
6983							                .if version<500
6984	>e341		04				                .byte $04                    ;currentADCChannel
6985	>e342		04				                .byte $04                    ;maximumADCChannel
6989							                .endif
6990	>e343		00				                .byte $00                    ;adcConversionType
6991	>e344		ff				                .byte $FF                    ;rs423Busy
6992							                .if version==400
6994							                .else
6995	>e345		42				                .byte $42                    ;aciaControlRegister
6996							                .endif
6997	>e346		19				                .byte $19                    ;flashCounter
6998	>e347		19				                .byte $19                    ;firstFlashColourDuration
6999	>e348		19				                .byte $19                    ;secondFlashColourDuration
7000	>e349		32				                .byte $32                    ;keyboardAutoRepeatDelay
7001	>e34a		08				                .byte $08                    ;keyboardAutoRepeatRate
7002	>e34b		00				                .byte $00                    ;execFileHandle
7003	>e34c		00				                .byte $00                    ;spoolFileHandle
7004	>e34d		00				                .byte $00                    ;breakAndESCAPEEffect
7005	>e34e		00				                .byte $00                    ;keyboardStatus
7006	>e34f		20				                .byte $20                    ;keyboardStatusByte
7007	>e350		09				                .byte $09                    ;rs423InputBufferMinimumSpace
7008	>e351		00				                .byte $00                    ;rs423Ignore
7009	>e352		00				                .byte $00                    ;rs423Destination
7010	>e353		00				                .byte $00                    ;econetInterceptionStatus
7011	>e354		00				                .byte $00                    ;econetInputInterpretationStatus
7012	>e355		00				                .byte $00                    ;econetOutputInterpretationStatus
7013	>e356		00				                .byte $00                    ;speechSystemByte1
7014	>e357		00				                .byte $00                    ;soundSuppressionStatus
7015	>e358		03				                .byte $03                    ;bellChannel
7016	>e359		90				                .byte $90                    ;bellSound
7017	>e35a		64				                .byte $64                    ;bellFrequency
7018	>e35b		06				                .byte $06                    ;bellDuration
7019	>e35c		81				                .byte $81                    ;startupMessageSuppressionStatus
7020	>e35d		00				                .byte $00                    ;softKeyStringLength
7021	>e35e		00				                .byte $00                    ;pagedModeCounter
7022	>e35f		00				                .byte $00                    ;vduQueueNegativeLength
7023	>e360		09				                .byte $09                    ;tabKeyCode
7024	>e361		1b				                .byte $1B                    ;escapeCharacter
7025	>e362		01				                .byte $01                    ;input192To207Interpretation
7026	>e363		d0				                .byte $D0                    ;input208To223Interpretation
7027	>e364		e0				                .byte $E0                    ;input224To239Interpretation
7028	>e365		f0				                .byte $F0                    ;input240To255Interpretation
7029	>e366		01				                .byte $01                    ;softKeyInterpretation
7030	>e367		80				                .byte $80                    ;shiftSoftKeyInterpretation
7031	>e368		90				                .byte $90                    ;ctrlSoftKeyInterpretation
7032	>e369		00				                .byte $00                    ;shiftCtrlSoftKeyInterpretation
7033	>e36a		00				                .byte $00                    ;escapeKeyStatus
7034	>e36b		00				                .byte $00                    ;escapeEffects
7035	>e36c		ff				valueFF:        .byte $FF                    ;userVIAInterruptMask
7036	>e36d		ff				                .byte $FF                    ;rs423InterruptMask
7037	>e36e		ff				                .byte $FF                    ;systemVIAInterruptMask
7038	>e36f		00				                .byte $00                    ;tubePresence
7039	>e370		00				                .byte $00                    ;speechSystemByte2
7040	>e371		00				                .byte $00                    ;characterDestinationStatus
7041	>e372		00				                .byte editKeysMode.editKeys  ;editKeysMode
7042	>e373		30				                .byte $30                    ;numericKeypadInterpretation
7043	>e374		01				                .byte $01                    ;shadowRAMState
7044	>e375		00				                .byte $00                    ;countryFlag
7045	>e376		00				                .byte $00                    ;userFlag
7046							                .if version==400
7048							                .else
7049	>e377		64				                .byte $64                    ;serialULARegister
7050							                .endif
7051	>e378		05				                .byte initialTimerSwitchState ;timerSwitchState
7052	>e379		ff				                .byte $FF                    ;softKeyConsistencyFlag
7053							                .if version==400
7055							                .else
7056	>e37a		01				                .byte $01                    ;printerDriverType
7057							                .endif
7058	>e37b		0a				                .byte $0a                    ;printerIgnoreChar
7059	>e37c		00				                .byte $00                    ;breakVectorByte0
7060	>e37d		00				                .byte $00                    ;breakVectorByte1
7061	>e37e		00				                .byte $00                    ;breakVectorByte2
7062	>e37f		00				                .byte $00                    ;vduDriverMemory
7063	>e380		00				                .byte $00                    ;displayMemory
7064	>e381		ff				                .byte $FF                    ;currentLanguageROM

7066							;-------------------------------------------------------------------------
7067							;
7068							; STARTUP
7069							; =======
7070							;
7071	.e382						resetEntryPoint:                ;e364
7072	.e382		a9 40		lda #$40	                lda #$40        ; $40 = RTI
7073	.e384		8d 00 0d	sta $0d00	                sta nmiEntryPoint ; make NMI routine a no-op
7074	.e387		78		sei		                sei
7075	.e388		a9 53		lda #$53	                lda #$53                 ; ???
7076	.e38a		8d 8e fe	sta $fe8e	                sta LFE8E                ; ???
7077							                .if version==350
7078	.e38d		a9 fe		lda #$fe	                lda #~ACCCON.D
7079	.e38f		1c 34 fe	trb $fe34	                trb ACCCON
7080	.e392		1c 66 03	trb $0366	                trb vduv.cursorFlags
7081	.e395		ad 34 fe	lda $fe34	                lda ACCCON
7082	.e398		09 4c		ora #$4c	                ora #ACCCON.TST|ACCCON.Y|ACCCON.X
7083							                .endif
7084							                .if version==350
7085	.e39a		20 a0 e3	jsr $e3a0	                jsr staSEIWKAAndACCCON
7086	.e39d		4c 00 fc	jmp $fc00	                jmp reset
7090							                .endif

7092							;-------------------------------------------------------------------------

7094							                .if version==350
7095							                ; D'oh! I got confused, and gave this completely the
7096							                ; wrong name.
7097	.e3a0						staSEIWKAAndACCCON:
7098	.e3a0		85 fc		sta $fc		                sta $fc
7099	.e3a2		8d 34 fe	sta $fe34	                sta ACCCON
7100	.e3a5		60		rts		                rts
7101							                .endif

7103							;-------------------------------------------------------------------------
7104							;
7105							; Check if a coprocessor is attached to the Tube
7106							;
7107							; exit:
7108							;
7109							; C=0 = no Tube
7110							;
7111							; C=1 = Tube
7112							;
7113							                .if version!=350
7124							                .endif

7126							;-------------------------------------------------------------------------
7127							;
7128							;
7129							;
7130							                .if version==350
7131	.e3a6						setTSTAndLE389:
7132	.e3a6		20 6a f3	jsr $f36a	                jsr callWithTST
7133							                .endif

7135	.e3a9						LE389:
7136	.e3a9		5a		phy		                phy
7137	.e3aa		da		phx		                phx
7138							                .if version==350
7139	.e3ab		20 68 e5	jsr $e568	                jsr selectTerminalROM
7140	.e3ae		20 f4 84	jsr $84f4	                jsr terminal.L873F
7151							                .endif
7152	.e3b1		c9 01		cmp #$01	                cmp #$01                     ;C set if ROM is inserted
7153	.e3b3		fa		plx		                plx
7154	.e3b4		7a		ply		                ply
7155	.e3b5		4c 59 e5	jmp $e559	                jmp selectROMX

7157							;-------------------------------------------------------------------------
7158							;
7159							; Scan ROMs and fill in the rom information table.
7160							;
7161							; entry:
7162							;
7163							; X = first ROM to scan
7164							;
7165							                .if version!=350
7170							                .endif

7172							;-------------------------------------------------------------------------
7173							;
7174							; Checks a ROM is valid - i.e., has a valid-looking copyright string.
7175							;
7176							; Entry:
7177							;
7178							; X = ROM to check
7179							;
7180							; Exit:
7181							;
7182							; C=0 if ROM invalid; C=1 if ROM valid
7183							;
7184							; ROM of interest is selected
7185							;
7186	.e3b8						isROMValid: .proc ;e3f7
7187	.e3b8		20 59 e5	jsr $e559	                jsr selectROMX
7188	.e3bb		a2 03		ldx #$03	                ldx #$03
7189	.e3bd		ac 07 80	ldy $8007	                ldy $8007       ; fetch ROM copyright offset pointer
7190	.e3c0		18		clc		                clc             ; assume no match
7191	.e3c1						-
7192	.e3c1		b9 00 80	lda $8000,y	                lda $8000,y     ; fetch possible ROM copyright char
7193	.e3c4		5d dc e4	eor $e4dc,x	                eor sidewaysROMCopyrightPrefix,x     ; Z=1 if it matches "\x0(C)"
7194	.e3c7		d0 05		bne $e3ce	                bne +           ; branch taken if no match
7195	.e3c9		c8		iny		                iny             ; next copyright byte
7196	.e3ca		ca		dex		                dex             ; count 4 chars
7197	.e3cb		10 f4		bpl $e3c1	                bpl -
7198	.e3cd		38		sec		                sec             ; C=1 means a match
7199	.e3ce						+
7200	.e3ce		60		rts		                rts
7201							                .pend

7203							;-------------------------------------------------------------------------

7205							; End of STARTUP code
7206							; ===================
7207	.e3cf						LE40E:
7208	.e3cf		38		sec		                sec                      ; Call Break Intercept Vector
7209							                .if version==350
7210	.e3d0		20 e6 f2	jsr $f2e6	                jsr osbyte247EntryPointWithTST
7213							                .endif
7214	.e3d3		a2 27		ldx #$27	                ldx #romServiceCallInformReset
7215	.e3d5		20 c3 ed	jsr $edc3	                jsr makeROMServiceCall
7216	.e3d8		ac 56 02	ldy $0256	                ldy execFileHandle ; Get Exec handle, skip past if closed
7217	.e3db		f0 08		beq $e3e5	                beq LE424
7218	.e3dd		9c 56 02	stz $0256	                stz execFileHandle           ; Clear Exec handle
7219	.e3e0		a9 00		lda #$00	                lda #$00                     ; Close Exec channel
7220	.e3e2		20 ce ff	jsr $ffce	                jsr OSFIND
7221	.e3e5						LE424:
7222	.e3e5		38		sec		                sec                          ;
7223	.e3e6		6e 00 df	ror $df00	                ror hazel.currentFS
7224	.e3e9		ad 8d 02	lda $028d	                lda lastBREAKType            ; Soft Break
7225	.e3ec		f0 04		beq $e3f2	                beq LE431
7226	.e3ee		38		sec		                sec                          ;
7227	.e3ef		6e 02 df	ror $df02	                ror hazel.libFS
7228	.e3f2						LE431:
7229	.e3f2		20 b5 ed	jsr $edb5	                jsr LEE64                    ; Set default ROMFS/TAPEFS settings
7230	.e3f5		20 b1 f1	jsr $f1b1	                jsr osbyte76                    ; Test Shift and Ctrl keys
7231							                .if version==350
7232	.e3f8		20 2e e5	jsr $e52e	                jsr LE520
7238							                .endif
7239	.e3fb		4d 8f 02	eor $028f	                eor startupOptions ; Toggle with OSBYTE 255 boot status
7240	.e3fe		29 08		and #$08	                and #$08
7241	.e400		a8		tay		                tay
7242	.e401		ae 03 df	ldx $df03	                ldx hazel.currentFSROM
7243	.e404		ad 8d 02	lda $028d	                lda lastBREAKType ; Soft Break, use current filing system
7244	.e407		f0 09		beq $e412	                beq LE454
7245	.e409		20 68 e5	jsr $e568	                jsr selectTerminalROM
7246							                .if version<500&&version!=350
7251							                .else
7252	.e40c		a2 3b		ldx #$3b	                ldx #terminal.configureTable.file.metadata-terminal.configureTable
7253	.e40e		20 34 88	jsr $8834	                jsr terminal.readConfigurationByte
7254							                .endif

7256	.e411		aa		tax		                tax
7257	.e412						LE454:
7258	.e412		3c a1 02	bit $02a1,x	                bit romInformationTable,x
7259	.e415		10 1f		bpl $e436	                bpl LE478
7260	.e417		20 59 e5	jsr $e559	                jsr selectROMX
7261	.e41a		e0 0f		cpx #$0f	                cpx #terminalROM
7262	.e41c		d0 0c		bne $e42a	                bne LE46C
7263	.e41e		20 3f f6	jsr $f63f	                jsr osbyte7A
7264	.e421		e8		inx		                inx
7265	.e422		f0 19		beq $e43d	                beq LE47F
7266	.e424		e0 63		cpx #$63	                cpx #$63
7267	.e426		f0 15		beq $e43d	                beq LE47F
7268	.e428		80 0c		bra $e436	                bra LE478

7270	.e42a						LE46C:
7271	.e42a		a9 03		lda #$03	                lda #romServiceCallAutoBoot  ; Filing System selection
7272	.e42c		20 03 80	jsr $8003	                jsr $8003
7273	.e42f		aa		tax		                tax
7274	.e430		20 68 e5	jsr $e568	                jsr selectTerminalROM
7275	.e433		8a		txa		                txa
7276	.e434		f0 2b		beq $e461	                beq LE4A3
7277	.e436						LE478:
7278	.e436		a2 03		ldx #$03	                ldx #romServiceCallAutoBoot
7279	.e438		20 c3 ed	jsr $edc3	                jsr makeROMServiceCall
7280	.e43b		f0 24		beq $e461	                beq LE4A3
7281	.e43d						LE47F:
7282	.e43d		98		tya		                tya
7283	.e43e		d0 17		bne $e457	                bne LE499
7284	.e440		a9 8d		lda #$8d	                lda #$8D
7285	.e442		20 e8 ec	jsr $ece8	                jsr osbyte8C8D
7286	.e445		a2 c3		ldx #$c3	                ldx #<starRunBOOT
7287	.e447		a0 f3		ldy #$f3	                ldy #>starRunBOOT
7288	.e449		ce 67 02	dec $0267	                dec startupMessageSuppressionStatus
7289	.e44c		20 f7 ff	jsr $fff7	                jsr OSCLI
7290	.e44f		ee 67 02	inc $0267	                inc startupMessageSuppressionStatus
7291	.e452		80 0d		bra $e461	                bra LE4A3

7293							;-------------------------------------------------------------------------

7295	.e454						LE496:
7296	.e454		ee 67 02	inc $0267	                inc startupMessageSuppressionStatus ;set bit 0
7297	.e457						LE499:
7298	.e457		38		sec		                sec
7299	.e458		6e 00 df	ror $df00	                ror hazel.currentFS
7300							                .if version<400
7301	.e45b		a9 00		lda #$00	                lda #$00
7302	.e45d		aa		tax		                tax
7303	.e45e		20 10 ed	jsr $ed10	                jsr selectROMOrTAPE
7309							                .endif
7310	.e461						LE4A3:
7311	.e461		a9 05		lda #$05	                lda #$05                     ;
7312	.e463		ae 85 02	ldx $0285	                ldx printerDriverType        ; *FX5,<current printer>
7313	.e466		20 2f ee	jsr $ee2f	                jsr osbyteEntryPoint
7314	.e469		ad 8d 02	lda $028d	                lda lastBREAKType ; If not Soft Break, select default language
7315	.e46c		d0 0e		bne $e47c	                bne LE4BB
7316	.e46e		ae 8c 02	ldx $028c	                ldx currentLanguageROM      ; Get current language ROM
7317							                .if version==350&&!finmos329
7318	.e471		8a		txa		                txa
7319	.e472		29 bf		and #$bf	                and #$bf
7320	.e474		c9 10		cmp #$10	                cmp #$10
7323							                .endif
7324	.e476		90 0d		bcc $e485	                bcc LE4C2
7325							                .if version==350&&!finmos329
7326	.e478		c9 1f		cmp #$1f	                cmp #$1f
7329							                .endif
7330	.e47a		f0 56		beq $e4d2	                beq LE509
7331	.e47c						LE4BB:
7332	.e47c		20 68 e5	jsr $e568	                jsr selectTerminalROM     ; Page in ROM 15 - UTILS ROM
7333							                .if version<500&&version!=350
7335							                .else
7336	.e47f		a2 5f		ldx #$5f	                ldx #terminal.configureTable.lang.metadata-terminal.configureTable
7337	.e481		20 34 88	jsr $8834	                jsr terminal.readConfigurationByte
7338							                .endif
7339	.e484		aa		tax		                tax
7340	.e485						LE4C2:
7341	.e485		18		clc		                clc

7343							;-------------------------------------------------------------------------
7344							;
7345							; OSBYTE 142 (&8E) Enter language ROM [MasRef D.2-44]
7346							;
7347	.e486						osbyte8E:
7348							                .if version==350
7349	.e486		da		phx		                phx
7350	.e487		8a		txa		                txa
7351	.e488		29 0f		and #$0f	                and #$f
7352	.e48a		aa		tax		                tax
7353							                .endif
7354	.e48b		3c a1 02	bit $02a1,x	                bit romInformationTable,x ; b6=0, error Not a language
7355							                .if version==350
7356	.e48e		fa		plx		                plx
7357							                .endif
7358	.e48f		50 4e		bvc $e4df	                bvc thisIsNotALanguageError
7359	.e491		08		php		                php
7360	.e492		90 16		bcc $e4aa	                bcc LE4E1 ;taken if not OSBYTE 142 - so skip ROM check
7361	.e494		20 59 e5	jsr $e559	                jsr selectROMX
7362	.e497		ad 06 80	lda $8006	                lda sidewaysROMType
7363	.e49a		29 0d		and #$0d	                and #%00001101
7364	.e49c		f0 05		beq $e4a3	                beq is6502ROM ;taken if low nybble is 0 (6502 BASIC) or 2 (other 6502 ROM)
7365	.e49e		2c 7a 02	bit $027a	                bit tubePresence
7366	.e4a1		10 54		bpl $e4f7	                bpl iCannotRunThisCodeError  ;taken if no Tube - assume impossible to run
7367	.e4a3						is6502ROM:
7368	.e4a3		da		phx		                phx                          ;save ROM slot
7369	.e4a4		a2 2a		ldx #$2a	                ldx #romServiceCallLanguageChange
7370	.e4a6		20 c3 ed	jsr $edc3	                jsr makeROMServiceCall
7371	.e4a9		fa		plx		                plx                          ;restore ROM slot
7372	.e4aa						LE4E1:
7373	.e4aa		8e 8c 02	stx $028c	                stx currentLanguageROM
7374	.e4ad		20 59 e5	jsr $e559	                jsr selectROMX
7375	.e4b0		a9 80		lda #$80	                lda #>sidewaysROMName
7376	.e4b2		a0 08		ldy #$08	                ldy #(<sidewaysROMName)-1
7377	.e4b4		20 7d e7	jsr $e77d	                jsr print0TerminatedString
7378	.e4b7		84 fd		sty $fd		                sty errPtr+0
7379	.e4b9		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7380	.e4bc		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7381	.e4bf		28		plp		                plp
7382							                .if version<500
7383	.e4c0		a9 01		lda #$01	                lda #$01
7384	.e4c2		2c 7a 02	bit $027a	                bit tubePresence
7385	.e4c5		30 12		bmi $e4d9	                bmi copyLanguageOverTube     ;taken if Tube is present
7386							                .endif
7387	.e4c7		ad 06 80	lda $8006	                lda sidewaysROMType
7388	.e4ca		29 0d		and #$0d	                and #%00001101
7389	.e4cc		d0 29		bne $e4f7	                bne iCannotRunThisCodeError ;taken if low nybble isn't 0 (6502 BASIC) or 2 (other 6502 ROM)
7390	.e4ce		1a		inc a		                inc a                       ;
7391	.e4cf		4c 00 80	jmp $8000	                jmp sidewaysROMLanguageEntry

7393	.e4d2						LE509:
7394	.e4d2		a9 00		lda #$00	                lda #$00
7395							                .if version<500
7396	.e4d4		2c 7a 02	bit $027a	                bit tubePresence
7397	.e4d7		10 78		bpl $e551	                bpl startCommandLineUI
7398	.e4d9						copyLanguageOverTube:
7399	.e4d9		4c 00 04	jmp $0400	                jmp terminal.tubeHost.copyLanguage
7402							                .endif

7404							;-------------------------------------------------------------------------

7406	.e4dc						sidewaysROMCopyrightPrefix: .block
7407	>e4dc		29 43 28			                .text ")C("
7408	.e4df						end:
7409							                .endblock

7411							;-------------------------------------------------------------------------

7413	.e4df						thisIsNotALanguageError:
7414	.e4df		00		brk #		                brk
7415	>e4e0		00 54 68 69 73 20 69 73		                .text 0,"This is not a language"
	>e4e8		20 6e 6f 74 20 61 20 6c 61 6e 67 75 61 67 65

7417							;-------------------------------------------------------------------------

7419	.e4f7						iCannotRunThisCodeError:
7420	.e4f7		00		brk #		                brk
7421	>e4f8		00 49 20 63 61 6e 6e 6f		                .text 0,"I cannot run this code",0
	>e500		74 20 72 75 6e 20 74 68 69 73 20 63 6f 64 65 00

7423							;-------------------------------------------------------------------------
7424							;
7425							; OSBYTE 164 (&A4) Check processor type [MasRef D.2-50]
7426							;
7427	.e510						osbyteA4:
7428	.e510		a2 03		ldx #$03	                ldx #sidewaysROMCopyrightPrefix.end-sidewaysROMCopyrightPrefix
7429	.e512		a0 07		ldy #$07	                ldy #<sidewaysROMCopyrightOffset
7430	.e514		b1 f0		lda ($f0),y	                lda (originalX),y
7431	.e516		a8		tay		                tay
7432	.e517						-
7433	.e517		b1 f0		lda ($f0),y	                lda (originalX),y
7434	.e519		dd dc e4	cmp $e4dc,x	                cmp sidewaysROMCopyrightPrefix,x
7435	.e51c		d0 0f		bne $e52d	                bne rtsE564 ;taken if (C) not found - must be OK, if it's not a ROM?
7436	.e51e		c8		iny		                iny
7437	.e51f		ca		dex		                dex
7438	.e520		10 f5		bpl $e517	                bpl -
7439	.e522		a0 06		ldy #$06	                ldy #<sidewaysROMType
7440	.e524		b1 f0		lda ($f0),y	                lda (originalX),y
7441	.e526		0a		asl a		                asl a
7442	.e527		10 b6		bpl $e4df	                bpl thisIsNotALanguageError ;taken if no language entry point
7443	.e529		29 1a		and #$1a	                and #%00001101<<1
7444	.e52b		d0 ca		bne $e4f7	                bne iCannotRunThisCodeError ;taken if low nybble wasn't 0 (6502 BASIC) or 2 (other 6502 ROM)
7445	.e52d						rtsE564:
7446	.e52d		60		rts		                rts

7448							;-------------------------------------------------------------------------

7450							                .if version==350
7451	.e52e						LE520:
7452	.e52e		4a		lsr a		                lsr a
7453	.e52f		4a		lsr a		                lsr a
7454	.e530		4a		lsr a		                lsr a
7455	.e531		4a		lsr a		                lsr a
7456	.e532		60		rts		                rts
7457							                .endif

7459							;-------------------------------------------------------------------------

7461							                .if version==350
7462	.e533						LE525:
7463	.e533		a2 2c		ldx #$2c	                ldx #$2c                     ;???
7464	.e535		a0 03		ldy #$03	                ldy #$03
7465	.e537		20 c8 96	jsr $96c8	                jsr terminal.writeCMOSByte
7466	.e53a		4c 35 80	jmp $8035	                jmp terminal.printCMOSRamResetMessage
7467							                .endif

7469							;-------------------------------------------------------------------------

7471	.e53d						defaultBRKHandler:
7472	.e53d		a0 00		ldy #$00	                ldy #$00
7473	.e53f		20 81 e7	jsr $e781	                jsr printBRKMessage
7474	.e542		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7475	.e545		ad 67 02	lda $0267	                lda startupMessageSuppressionStatus
7476	.e548		6a		ror a		                ror a
7477	.e549		b0 06		bcs $e551	                bcs startCommandLineUI                   ;taken if bit 0 was set
7478	.e54b		20 e7 ff	jsr $ffe7	                jsr OSNEWL
7479	.e54e		4c 54 e4	jmp $e454	                jmp LE496

7481							;-------------------------------------------------------------------------

7483	.e551						startCommandLineUI:
7484	.e551		20 68 e5	jsr $e568	                jsr selectTerminalROM
7485	.e554		4c 29 84	jmp $8429	                jmp terminal.commandLineUI

7487							;-------------------------------------------------------------------------
7488							;
7489							; Select paged ROM bank 15 - TERMINAL - with ANDY paged in,
7490							;
7491							; Preserves A/Y
7492	.e557						selectTerminalROMAndANDY:   ;e57f
7493	.e557		a2 8f		ldx #$8f	                ldx #$80|terminalROM
7494							                ; fall through into selectROMX

7496							;-------------------------------------------------------------------------
7497							;-------------------------------------------------------------------------
7498							;
7499							; Select paged ROM bank.
7500							;
7501							; Entry:
7502							;
7503							; X = bank to select.
7504							;
7505							; Preserves A/X/Y/P
7506	.e559						selectROMX:   ;e581
7507	.e559		86 f4		stx $f4		                stx $F4
7508	.e55b		8e 30 fe	stx $fe30	                stx ROMSEL
7509	.e55e		60		rts		                rts

7511							;-------------------------------------------------------------------------
7512							;
7513	.e55f						isROMValidThenSelectTerminalROM:
7514	.e55f		5a		phy		                phy
7515	.e560		20 b8 e3	jsr $e3b8	                jsr isROMValid
7516	.e563		20 68 e5	jsr $e568	                jsr selectTerminalROM
7517	.e566		7a		ply		                ply
7518	.e567		60		rts		                rts

7520							;-------------------------------------------------------------------------
7521							;
7522							; Select paged ROM bank 15 - TERMINAL.
7523							;
7524							; Preserves X/Y
7525	.e568						selectTerminalROM:            ;e590
7526	.e568		a9 0f		lda #$0f	                lda #terminalROM
7527							                ; fall through into selectROMA

7529							;-------------------------------------------------------------------------
7530							;
7531							; Select paged ROM bank.
7532							;
7533							; A = bank to select.
7534							;
7535							; Preserves A/X/Y/P
7536	.e56a						selectROMA:                   ;e592
7537	.e56a		85 f4		sta $f4		                sta $F4         ;update ROMSEL copy
7538	.e56c		8d 30 fe	sta $fe30	                sta ROMSEL
7539	.e56f		60		rts		                rts

7541							;-------------------------------------------------------------------------
7542							;
7543							; Select paged ROM bank 15 - TERMINAL - with ANDY paged in,
7544							;
7545							; Preserves A/X/Y

7547	.e570						selectTerminalROMAndANDY2:
7548	.e570		da		phx		                phx
7549	.e571		20 57 e5	jsr $e557	                jsr selectTerminalROMAndANDY
7550	.e574		fa		plx		                plx
7551	.e575		60		rts		                rts

7553							;-------------------------------------------------------------------------

7555	.e576						irqEntryPoint:
7556	.e576		85 fc		sta $fc		                sta irqTempA
7557	.e578		68		pla		                pla                          ;restore P
7558	.e579		48		pha		                pha                          ;save P
7559	.e57a		29 10		and #$10	                and #$10
7560	.e57c		d0 03		bne $e581	                bne brkEntryPoint
7561	.e57e		6c 04 02	jmp ($0204)	                jmp (IRQ1V)

7563	.e581						brkEntryPoint:
7564	.e581		da		phx		                phx
7565	.e582		ba		tsx		                tsx
7566	.e583		bd 03 01	lda $0103,x	                lda $0103,x                  ;get BRK address+1 LSB
7567	.e586		d8		cld		                cld                          ;
7568	.e587		38		sec		                sec                          ;
7569	.e588		e9 01		sbc #$01	                sbc #$01                     ;get BRK address LSB
7570	.e58a		85 fd		sta $fd		                sta errPtr+0
7571	.e58c		bd 04 01	lda $0104,x	                lda $0104,x                  ;get BRK address+1 MSB
7572	.e58f		e9 00		sbc #$00	                sbc #$00                     ;get BRK address MSB
7573	.e591		85 fe		sta $fe		                sta errPtr+1
7574	.e593		a5 f4		lda $f4		                lda $F4
7575	.e595		8d 4a 02	sta $024a	                sta romActiveAtLastBRK
7576	.e598		86 f0		stx $f0		                stx originalX
7577	.e59a		a2 06		ldx #$06	                ldx #romServiceCallBreakInstruction
7578	.e59c		20 c3 ed	jsr $edc3	                jsr makeROMServiceCall
7579	.e59f		ae 8c 02	ldx $028c	                ldx currentLanguageROM
7580	.e5a2		20 59 e5	jsr $e559	                jsr selectROMX
7581	.e5a5		fa		plx		                plx
7582	.e5a6		a5 fc		lda $fc		                lda irqTempA
7583	.e5a8		58		cli		                cli
7584	.e5a9		6c 02 02	jmp ($0202)	                jmp (BRKV)

7586							;-------------------------------------------------------------------------

7588							                .if version!=400
7589	.e5ac						LE5D4:
7590	.e5ac		38		sec		                sec
7591	.e5ad		6e 4f 02	ror $024f	                ror rs423Busy
7592	.e5b0		2c 50 02	bit $0250	                bit aciaControlRegister
7593	.e5b3		10 07		bpl $e5bc	                bpl LE5E4
7594	.e5b5		20 81 ec	jsr $ec81	                jsr getRS423InputBufferFreeBytes
7595	.e5b8		a2 00		ldx #$00	                ldx #$00
7596	.e5ba		b0 02		bcs $e5be	                bcs LE5E6
7597	.e5bc						LE5E4:
7598	.e5bc		a2 40		ldx #$40	                ldx #$40
7599	.e5be						LE5E6:
7600	.e5be		4c ea e8	jmp $e8ea	                jmp resetACIA

7602	.e5c1						LE5E9:
7603	.e5c1		ac 09 fe	ldy $fe09	                ldy ACIA+1
7604	.e5c4		29 3a		and #$3a	                and #$3A
7605	.e5c6		d0 38		bne $e600	                bne LE628
7606	.e5c8		ae 5c 02	ldx $025c	                ldx rs423Ignore
7607	.e5cb		d0 09		bne $e5d6	                bne LE5FE
7608	.e5cd		e8		inx		                inx
7609	.e5ce		20 55 ea	jsr $ea55	                jsr osbyte99
7610	.e5d1		20 81 ec	jsr $ec81	                jsr getRS423InputBufferFreeBytes
7611	.e5d4		90 e6		bcc $e5bc	                bcc LE5E4
7612	.e5d6						LE5FE:
7613	.e5d6		60		rts		                rts
7614							                .endif

7616							;-------------------------------------------------------------------------

7618	.e5d7						irq1EntryPoint:
7619	.e5d7		a5 fc		lda $fc		                lda irqTempA
7620	.e5d9		48		pha		                pha
7621	.e5da		da		phx		                phx
7622	.e5db		5a		phy		                phy
7623							                .if version!=400
7624	.e5dc		b8		clv		                clv
7625							                .endif
7626	.e5dd		20 e7 e5	jsr $e5e7	                jsr irq1Handler
7627	.e5e0		7a		ply		                ply
7628	.e5e1		fa		plx		                plx
7629	.e5e2		68		pla		                pla
7630	.e5e3		40		rti		                rti

7632							;-------------------------------------------------------------------------

7634	.e5e4						irq2EntryPoint:
7635	.e5e4		a5 fc		lda $fc		                lda irqTempA
7636	.e5e6		40		rti		                rti

7638							;-------------------------------------------------------------------------

7640							                .if version==400
7643							                .else
7644	.e5e7						irq1Handler:
7645	.e5e7		ad 08 fe	lda $fe08	                lda ACIA+0
7646							                .if version>=500
7648							                .endif
7649	.e5ea		70 02		bvs $e5ee	                bvs LE616
7650	.e5ec		10 5e		bpl $e64c	                bpl checkForSystemVIAInterrupt
7651	.e5ee						LE616:
7652	.e5ee		a6 ea		ldx $ea		                ldx $EA
7653	.e5f0		ca		dex		                dex
7654	.e5f1		30 33		bmi $e626	                bmi LE64E
7655	.e5f3		70 30		bvs $e625	                bvs rtsE64D
7656	.e5f5		20 24 f3	jsr $f324	                jsr withTerminalROM
7657	.e5f8		4c 77 a4	jmp $a477	                jmp terminal.LA45D

7659	.e5fb						LE623:
7660	.e5fb		ac 09 fe	ldy $fe09	                ldy ACIA+1
7661	.e5fe		2a		rol a		                rol a
7662	.e5ff		0a		asl a		                asl a
7663	.e600						LE628:
7664	.e600		aa		tax		                tax
7665	.e601		98		tya		                tya
7666	.e602		a0 07		ldy #$07	                ldy #$07
7667	.e604		4c fa e9	jmp $e9fa	                jmp eventEntryPoint

7669	.e607						LE62F:
7670	.e607		a2 02		ldx #$02	                ldx #$02
7671	.e609		20 c6 e9	jsr $e9c6	                jsr osbyte91
7672	.e60c		90 10		bcc $e61e	                bcc LE646
7673	.e60e		ad 85 02	lda $0285	                lda printerDriverType
7674	.e611		c9 02		cmp #$02	                cmp #$02
7675	.e613		d0 97		bne $e5ac	                bne LE5D4
7676	.e615		e8		inx		                inx
7677	.e616		20 c6 e9	jsr $e9c6	                jsr osbyte91
7678	.e619		6e d1 02	ror $02d1	                ror bufferEmptyFlags+bufferPrinter
7679	.e61c		30 8e		bmi $e5ac	                bmi LE5D4
7680	.e61e						LE646:
7681	.e61e		8d 09 fe	sta $fe09	                sta ACIA+1
7682	.e621		a9 e7		lda #$e7	                lda #$E7
7683	.e623		85 ea		sta $ea		                sta $EA
7684	.e625						rtsE64D:
7685	.e625		60		rts		                rts

7687	.e626						LE64E:
7688							                .if version<500
7689	.e626		2d 78 02	and $0278	                and rs423InterruptMask
7690							                .endif
7691	.e629		4a		lsr a		                lsr a
7692	.e62a		90 07		bcc $e633	                bcc LE65B
7693	.e62c		70 05		bvs $e633	                bvs LE65B
7694	.e62e		ac 50 02	ldy $0250	                ldy aciaControlRegister
7695	.e631		30 8e		bmi $e5c1	                bmi LE5E9
7696	.e633						LE65B:
7697	.e633		4a		lsr a		                lsr a
7698	.e634		6a		ror a		                ror a
7699	.e635		b0 c4		bcs $e5fb	                bcs LE623
7700	.e637		30 ce		bmi $e607	                bmi LE62F
7701	.e639		70 ea		bvs $e625	                bvs rtsE64D
7702							                .endif

7704							;-------------------------------------------------------------------------

7706	.e63b						handleUnrecogisedInterrupt:
7707	.e63b		a2 05		ldx #$05	                ldx #romServiceCallUnrecognisedInterrupt
7708	.e63d		20 c3 ed	jsr $edc3	                jsr makeROMServiceCall
7709	.e640		f0 e3		beq $e625	                beq rtsE64D                  ;taken if handled

7711							                ; Pass unrecognised, unhandled interrupts to IRQ2V.
7712	.e642		68		pla		                pla
7713	.e643		68		pla		                pla
7714	.e644		7a		ply		                ply
7715	.e645		fa		plx		                plx
7716	.e646		68		pla		                pla
7717							                .if version==350
7718	.e647		85 fc		sta $fc		                sta $fc
7719							                .endif
7720	.e649		6c 06 02	jmp ($0206)	                jmp (IRQ2V)

7722							;-------------------------------------------------------------------------

7724							                .if version==400
7726							                .else
7727	.e64c						checkForSystemVIAInterrupt:
7728							                .endif
7729	.e64c		ad 4d fe	lda $fe4d	                lda systemVIA.ifr
7730							                .if version==400
7732							                .else
7733	.e64f		10 3c		bpl $e68d	                bpl checkForUserVIAInterrupt
7734							                .endif
7735	.e651		2d 79 02	and $0279	                and systemVIAInterruptMask
7736	.e654		2d 4e fe	and $fe4e	                and systemVIA.ier
7737	.e657		89 02		bit #$02	                bit #VIA.irq.ca1
7738	.e659		f0 54		beq $e6af	                beq checkForSystemVIAT1Interrupt

7740							                ; Handle CA1 interrupt - CRTC vsync.

7742	.e65b		ce 40 02	dec $0240	                dec cfsTimeoutCounter
7743							                .if version!=400
7744	.e65e		a5 ea		lda $ea		                lda $EA
7745	.e660		10 02		bpl $e664	                bpl +
7746	.e662		e6 ea		inc $ea		                inc $EA
7747	.e664						+
7748							                .endif
7749	.e664		ad 51 02	lda $0251	                lda flashCounter
7750	.e667		f0 1a		beq $e683	                beq flashDone                    ;taken if no flash
7751	.e669		ce 51 02	dec $0251	                dec flashCounter             ;count down
7752	.e66c		d0 15		bne $e683	                bne flashDone
7753	.e66e		ae 52 02	ldx $0252	                ldx firstFlashColourDuration ;assume first flash colour is next
7754	.e671		ad 48 02	lda $0248	                lda vcontrolRegister
7755	.e674		4a		lsr a		                lsr a                        ;C=flash bit
7756	.e675		90 03		bcc $e67a	                bcc +                        ;taken if first flash colour is next
7757	.e677		ae 53 02	ldx $0253	                ldx secondFlashColourDuration ;actually, second flash colour is next
7758	.e67a						+
7759	.e67a		2a		rol a		                rol a                        ;reinstate old register value
7760	.e67b		49 01		eor #$01	                eor #VCONTROL.flash          ;toggle flash bit
7761	.e67d		20 d1 f1	jsr $f1d1	                jsr setVCONTROL
7762	.e680		8e 51 02	stx $0251	                stx flashCounter
7763	.e683						flashDone:
7764	.e683		a0 04		ldy #$04	                ldy #eventStartOfVerticalSync
7765	.e685		20 fa e9	jsr $e9fa	                jsr eventEntryPoint
7766	.e688		a9 02		lda #$02	                lda #VIA.irq.ca1
7767							                .if version==400
7769							                .else
7770	.e68a		4c 64 e7	jmp $e764	                jmp staSystemVIAIFR          ;acknowledge CA1
7771							                .endif

7773							                .if version!=400
7774	.e68d						checkForUserVIAInterrupt:
7775	.e68d		ad 6d fe	lda $fe6d	                lda userVIA.ifr
7776	.e690		10 a9		bpl $e63b	                bpl handleUnrecogisedInterrupt
7777	.e692		2d 77 02	and $0277	                and userVIAInterruptMask
7778	.e695		2d 6e fe	and $fe6e	                and userVIA.ier
7779	.e698		6a		ror a		                ror a                        ;C=CA2
7780	.e699		6a		ror a		                ror a                        ;C=CA1
7781	.e69a		90 9f		bcc $e63b	                bcc handleUnrecogisedInterrupt
7782	.e69c		ac 85 02	ldy $0285	                ldy printerDriverType
7783	.e69f		88		dey		                dey
7784	.e6a0		d0 99		bne $e63b	                bne handleUnrecogisedInterrupt ;taken if printerDriverType not 1
7785	.e6a2		a9 02		lda #$02	                lda #VIA.irq.ca1
7786	.e6a4		8d 6d fe	sta $fe6d	                sta userVIA.ifr              ;acknowledge CA1
7787	.e6a7		8d 6e fe	sta $fe6e	                sta userVIA.ier              ;inhibit CA1
7788	.e6aa		a2 03		ldx #$03	                ldx #bufferPrinter
7789	.e6ac		4c ad e8	jmp $e8ad	                jmp LE8D5
7790							                .endif

7792	.e6af						checkForSystemVIAT1Interrupt:
7793	.e6af		89 40		bit #$40	                bit #VIA.irq.t1
7794							                .if version<400
7795	.e6b1		f0 75		beq $e728	                beq checkForSystemVIACB1Interrupt
7798							                .endif

7800							                ; Handle T1 interrupt - 100 Hz timer.

7802	.e6b3		a9 40		lda #$40	                lda #VIA.irq.t1
7803	.e6b5		8d 4d fe	sta $fe4d	                sta systemVIA.ifr            ;acknowledge T1 interrupt
7804	.e6b8		ad 83 02	lda $0283	                lda timerSwitchState
7805	.e6bb		aa		tax		                tax                          ;X=old timerSwitchState
7806	.e6bc		49 0f		eor #$0f	                eor #$0F
7807	.e6be		48		pha		                pha                          ;save new timerSwitchState
7808	.e6bf		a8		tay		                tay                          ;Y=new timerSwitchState
7809	.e6c0		38		sec		                sec                          ;C=1 - increment
7810	.e6c1						updateTIMELoop:
7811	.e6c1		bd 91 02	lda $0291,x	                lda timer0-1,x
7812	.e6c4		69 00		adc #$00	                adc #$00
7813	.e6c6		99 91 02	sta $0291,y	                sta timer0-1,y

7815							                ; one of X or Y will get to 0 to indicate the end of
7816							                ; the loop.
7817	.e6c9		ca		dex		                dex
7818	.e6ca		f0 03		beq $e6cf	                beq updateTIMEDone
7819	.e6cc		88		dey		                dey
7820	.e6cd		d0 f2		bne $e6c1	                bne updateTIMELoop
7821	.e6cf						updateTIMEDone:
7822	.e6cf		68		pla		                pla                          ;restore new timerSwitchState
7823	.e6d0		8d 83 02	sta $0283	                sta timerSwitchState
7824	.e6d3		a2 05		ldx #$05	                ldx #$05
7825	.e6d5						incrementIntervalTimer:
7826	.e6d5		fe 9b 02	inc $029b,x	                inc intervalTimer-1,x
7827	.e6d8		d0 08		bne $e6e2	                bne intervalTimerDone
7828	.e6da		ca		dex		                dex
7829	.e6db		d0 f8		bne $e6d5	                bne incrementIntervalTimer
7830	.e6dd		a0 05		ldy #$05	                ldy #eventIntervalTimerCrossingZero
7831	.e6df		20 fa e9	jsr $e9fa	                jsr eventEntryPoint
7832	.e6e2						intervalTimerDone:
7833	.e6e2		ad b1 02	lda $02b1	                lda inkeyTimeoutCounter+0
7834	.e6e5		d0 08		bne $e6ef	                bne LE715
7835	.e6e7		ad b2 02	lda $02b2	                lda inkeyTimeoutCounter+1
7836	.e6ea		f0 06		beq $e6f2	                beq LE718
7837	.e6ec		ce b2 02	dec $02b2	                dec inkeyTimeoutCounter+1
7838	.e6ef						LE715:
7839	.e6ef		ce b1 02	dec $02b1	                dec inkeyTimeoutCounter+0
7840	.e6f2						LE718:
7841	.e6f2		2c cd 02	bit $02cd	                bit previousKeyPressedWhenReadingOSBYTE
7842	.e6f5		10 0b		bpl $e702	                bpl LE728
7843	.e6f7		ee cd 02	inc $02cd	                inc previousKeyPressedWhenReadingOSBYTE
7844	.e6fa		58		cli		                cli
7845							                .if version==350
7846	.e6fb		20 d3 f3	jsr $f3d3	                jsr LF3C5_350
7849							                .endif
7850	.e6fe		78		sei		                sei
7851	.e6ff		ce cd 02	dec $02cd	                dec previousKeyPressedWhenReadingOSBYTE
7852	.e702						LE728:
7853	.e702		2c 6c e3	bit $e36c	                bit valueFF                  ;V=1
7854							                .if version!=400
7855	.e705		20 e7 e5	jsr $e5e7	                jsr irq1Handler
7856							                .endif
7857	.e708		a5 ec		lda $ec		                lda lastKeyPressedInternal
7858	.e70a		05 ed		ora $ed		                ora firstKeyPressedInternal
7859	.e70c		2d 42 02	and $0242	                and keyboardSemaphore
7860	.e70f		f0 04		beq $e715	                beq +
7861	.e711		38		sec		                sec
7862	.e712		20 2b f6	jsr $f62b	                jsr LF8FF
7863	.e715						+
7864							                .if version>=500
7866							                .endif
7867	.e715		20 0b e9	jsr $e90b	                jsr pollPrinterDriver
7868	.e718		ac 43 02	ldy $0243	                ldy romPollingSemaphore
7869							                .if version==400
7871							                .else
7872	.e71b		f0 05		beq $e722	                beq LE748
7873							                .endif
7874	.e71d		a2 15		ldx #$15	                ldx #romServiceCallPollingInterrupt
7875							                .if version==400
7877							                .else
7878	.e71f		20 c3 ed	jsr $edc3	                jsr makeROMServiceCall
7879	.e722						LE748:
7880							                .if version<500
7881	.e722		2c 18 fe	bit $fe18	                bit HADC+0
7882	.e725		70 05		bvs $e72c	                bvs LE752
7883							                .endif
7884	.e727		60		rts		                rts
7885							                .endif

7887							                .if version!=400
7888	.e728						checkForSystemVIACB1Interrupt:
7889							                .if version<500
7890	.e728		89 10		bit #$10	                bit #VIA.irq.cb1
7891	.e72a		f0 3c		beq $e768	                beq checkForSystemVIACA2Interrupt

7893							                ; Handle CB1 interrupt - ADC conversion complete.
7894	.e72c						LE752:
7895	.e72c		ae 4c 02	ldx $024c	                ldx currentADCChannel
7896	.e72f		f0 31		beq $e762	                beq acknowledgeSystemVIACB1Interrupt
7897	.e731		ad 1a fe	lda $fe1a	                lda HADC+2
7898	.e734		9d b5 02	sta $02b5,x	                sta adcResultLSBs-1,x
7899	.e737		ad 19 fe	lda $fe19	                lda HADC+1
7900	.e73a		9d b9 02	sta $02b9,x	                sta adcResultMSBs-1,x
7901	.e73d		8e be 02	stx $02be	                stx adcLastConvertedChannel
7902	.e740		a0 03		ldy #$03	                ldy #eventADCConversionComplete
7903	.e742		20 fa e9	jsr $e9fa	                jsr eventEntryPoint
7904	.e745		ca		dex		                dex                          ;next ADC channel
7905	.e746		d0 03		bne $e74b	                bne initiateADCConversion
7906	.e748		ae 4d 02	ldx $024d	                ldx maximumADCChannel
7907	.e74b						initiateADCConversion:
7908	.e74b		e0 05		cpx #$05	                cpx #$05
7909	.e74d		90 02		bcc $e751	                bcc +
7910	.e74f		a2 04		ldx #$04	                ldx #$04                     ;clamp ADC channel
7911	.e751						+
7912	.e751		8e 4c 02	stx $024c	                stx currentADCChannel
7913	.e754		ad 4e 02	lda $024e	                lda adcConversionType
7914	.e757		3a		dec a		                dec a            ;$FF=default, $07=8 bits, $0b=12 bits
7915	.e758		29 08		and #$08	                and #$08         ;8=12 bits, 0=8 bits
7916	.e75a		18		clc		                clc
7917	.e75b		6d 4c 02	adc $024c	                adc currentADCChannel        ;mix in ADC channel, 1-4
7918	.e75e		3a		dec a		                dec a ;convert to hardware ADC channel, 0-3 (no risk of borrow)
7919	.e75f		8d 18 fe	sta $fe18	                sta HADC+0                   ;initiate conversion
7920	.e762						acknowledgeSystemVIACB1Interrupt:
7921	.e762		a9 10		lda #$10	                lda #$10
7922	.e764						staSystemVIAIFR:
7923	.e764		8d 4d fe	sta $fe4d	                sta systemVIA.ifr
7924	.e767		60		rts		                rts
7928							                .endif
7929							                .endif

7931	.e768						checkForSystemVIACA2Interrupt:
7932	.e768		4a		lsr a		                lsr a                        ;C = CA2
7933	.e769		90 08		bcc $e773	                bcc handleUnrecognisedInterruptE799

7935							                ; Handle CA2 interrupt - keyboard.

7937	.e76b		18		clc		                clc
7938	.e76c		20 2b f6	jsr $f62b	                jsr LF8FF
7939	.e76f		a9 01		lda #$01	                lda #VIA.irq.ca2
7940							                .if version<400
7941	.e771		80 f1		bra $e764	                bra staSystemVIAIFR
7947							                .endif

7949	.e773						handleUnrecognisedInterruptE799:
7950	.e773		4c 3b e6	jmp $e63b	                jmp handleUnrecogisedInterrupt

7952							;-------------------------------------------------------------------------
7953							;
7954							; OSBYTE 17 (&11) Write next ADC channel to be sampled [MasRef D.2-25]
7955							;
7956	.e776						osbyte11:
7957							                .if version!=400
7958							                .if version<500
7959	.e776		8c be 02	sty $02be	                sty adcLastConvertedChannel
7962							                .endif
7963	.e779		80 d0		bra $e74b	                bra initiateADCConversion
7964							                .endif

7966							;-------------------------------------------------------------------------
7967							;
7968							; Print a 0-terminated string at some offset from startupMessages.
7969							;
7970							; entry:
7971							;
7972							; Y = offset-1 of message
7973							;
7974	.e77b						printStartupMessage:
7975	.e77b		a9 e0		lda #$e0	                lda #>startupMessages
7976							                ; .cerror (<startupMessages)!=0,"startupMessages must be page-aligned" ;it's more flexible than this, but this'll do for now

7978							;-------------------------------------------------------------------------
7979							;
7980							; Print a 0-terminated string.
7981							;
7982							; entry:
7983							;
7984							; A = address MSB
7985							;
7986							; Y = (address LSB)-1
7987							;
7988	.e77d						print0TerminatedString:
7989	.e77d		85 fe		sta $fe		                sta errPtr+1
7990	.e77f		64 fd		stz $fd		                stz errPtr+0

7992							;-------------------------------------------------------------------------
7993							;
7994							; Print the BRK message.
7995							;
7996							; entry:
7997							;
7998							; (errPtr) = pointer to the error number (as will be the case after a
7999							; BRK)
8000							;
8001							; Y=0
8002							;
8003	.e781						printBRKMessage:
8004	.e781		c8		iny		                iny
8005	.e782		b1 fd		lda ($fd),y	                lda (errPtr),y
8006	.e784		20 e3 ff	jsr $ffe3	                jsr OSASCI
8007	.e787		aa		tax		                tax
8008	.e788		d0 f7		bne $e781	                bne printBRKMessage
8009	.e78a						rtsE7B0:
8010	.e78a		60		rts		                rts

8012							;-------------------------------------------------------------------------

8014							                .if version>=500
8254							                .endif

8256							;-------------------------------------------------------------------------

8258	.e78b						osbyte81Timed:
8259	.e78b		8e b1 02	stx $02b1	                stx inkeyTimeoutCounter+0
8260	.e78e		8c b2 02	sty $02b2	                sty inkeyTimeoutCounter+1
8261	.e791		66 e6		ror $e6		                ror readCharacterTimedFlag   ;set the timed flag
8262	.e793		58		cli		                cli
8263	.e794		80 02		bra $e798	                bra osrdchWithTimeout

8265							;-------------------------------------------------------------------------

8267	.e796						osrdchEntryPoint:
8268	.e796		64 e6		stz $e6		                stz readCharacterTimedFlag   ;clear the timed flag
8269	.e798						osrdchWithTimeout:
8270	.e798		da		phx		                phx
8271	.e799		5a		phy		                phy
8272	.e79a		ac 56 02	ldy $0256	                ldy execFileHandle
8273	.e79d		f0 12		beq $e7b1	                beq osrdchLoop               ;taken if not *EXEC'ing
8274	.e79f		38		sec		                sec
8275	.e7a0		66 eb		ror $eb		                ror tapeCritical
8276	.e7a2		20 d7 ff	jsr $ffd7	                jsr OSBGET             ;get 1 byte from the *EXEC file
8277	.e7a5		64 eb		stz $eb		                stz tapeCritical
8278	.e7a7		90 24		bcc $e7cd	                bcc osrdchDone                    ;taken if byte valid
8279	.e7a9		a9 00		lda #$00	                lda #$00                     ;OSFIND close file
8280	.e7ab		9c 56 02	stz $0256	                stz execFileHandle           ;reset *EXEC handle
8281	.e7ae		20 ce ff	jsr $ffce	                jsr OSFIND                   ;close *EXEC file
8282	.e7b1						osrdchLoop:
8283	.e7b1		a5 ff		lda $ff		                lda escapeFlag               ;b7 set if ESCAPE pressed
8284	.e7b3		0a		asl a		                asl a                        ;C=1 if ESCAPE pressed
8285	.e7b4		a9 1b		lda #$1b	                lda #27                      ;ASCII for ESCAPE
8286	.e7b6		b0 15		bcs $e7cd	                bcs osrdchDone               ;exit with C=1 if ESCAPE
8287							                                             ;pressed
8288							                .if version!=400
8289	.e7b8		ae 41 02	ldx $0241	                ldx inputSource
8290							                .endif
8291	.e7bb		20 05 eb	jsr $eb05	                jsr readFromEconetOrSoftKeyOrInputBufferA ;handle Econet/soft key stuff???
8292	.e7be		90 0d		bcc $e7cd	                bcc osrdchDone
8293	.e7c0		24 e6		bit $e6		                bit readCharacterTimedFlag
8294	.e7c2		10 ed		bpl $e7b1	                bpl osrdchLoop     ;taken if no timeout - keep looping
8295	.e7c4		ad b2 02	lda $02b2	                lda inkeyTimeoutCounter+1
8296	.e7c7		0d b1 02	ora $02b1	                ora inkeyTimeoutCounter+0
8297	.e7ca		d0 e5		bne $e7b1	                bne osrdchLoop     ;taken if timeout not timed out yet
8298	.e7cc		3a		dec a		                dec a              ;timed out: A=$ff, C=1
8299	.e7cd						osrdchDone:
8300	.e7cd		7a		ply		                ply
8301	.e7ce		fa		plx		                plx
8302	.e7cf		60		rts		                rts

8304							;-------------------------------------------------------------------------

8306	.e7d0						starLIBFS:
8307	.e7d0		ad 01 df	lda $df01	                lda hazel.activeFS
8308	.e7d3		8d 02 df	sta $df02	                sta hazel.libFS
8309	.e7d6		60		rts		                rts

8311							;-------------------------------------------------------------------------

8313							                .if version<500
8314	.e7d7						starX:
8315	.e7d7		8d e8 fe	sta $fee8	                sta TUBE+8
8316	.e7da						LE800:
8317	.e7da		80 fe		bra $e7da	                bra LE800
8318							                .endif

8320							;-------------------------------------------------------------------------
8321							;
8322							; OSCLI
8323							;
8324							; MasRef D.4-1
8325							;

8327	.e7dc						oscliEntryPoint: .block
8328	.e7dc		20 08 ed	jsr $ed08	                jsr selectHAZEL
8329	.e7df		86 f2		stx $f2		                stx stringInputBufferAddress+0
8330	.e7e1		84 f3		sty $f3		                sty stringInputBufferAddress+1
8331	.e7e3		a0 00		ldy #$00	                ldy #$00
8332	.e7e5						-
8333	.e7e5		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
8334	.e7e7		99 00 dc	sta $dc00,y	                sta hazel.commandLine,y
8335	=$e7eb						emptyCommandLine=*+1                         ;arbitrary place that's
8336							                                             ;just a 13 byte...
8337	.e7ea		c9 0d		cmp #$0d	                cmp #$0D
8338	.e7ec		f0 04		beq $e7f2	                beq +     ;branch taken if end of command line reached
8339	.e7ee		c8		iny		                iny
8340	.e7ef		d0 f4		bne $e7e5	                bne -

8342							                ; OSCLI is a no-op if the command line is too long.
8343	.e7f1		60		rts		                rts

8345	.e7f2						+
8346	.e7f2		a0 dc		ldy #$dc	                ldy #>hazel.commandLine
8347	.e7f4		a2 00		ldx #$00	                ldx #<hazel.commandLine
8348	.e7f6		20 24 f3	jsr $f324	                jsr withTerminalROM
8349	.e7f9		4c 0a 83	jmp $830a	                jmp terminal.oscli
8350							                .endblock

8352	=$e7eb						emptyCommandLine=oscliEntryPoint.emptyCommandLine

8354							                ; OSWRCH
8355							                ; ======
8356	.e7fc						oswrchEntryPoint:
8357	.e7fc		48		pha		                pha                          ;S=[ch]
8358	.e7fd		da		phx		                phx                          ;S=[x; ch]
8359	.e7fe		5a		phy		                phy                          ;S=[y; x; ch]
8360	.e7ff		48		pha		                pha                          ;S=[ch; y; x; ch]
8361	.e800		2c 60 02	bit $0260	                bit econetOutputInterpretationStatus
8362	.e803		10 08		bpl $e80d	                bpl LE833
8363	.e805		a8		tay		                tay
8364	.e806		a9 04		lda #$04	                lda #netWriteCharacterAttempted
8365	.e808		20 0c eb	jsr $eb0c	                jsr callNETV
8366	.e80b		b0 70		bcs $e87d	                bcs LE8A5
8367	.e80d						LE833:
8368	.e80d		a9 02		lda #$02	                lda #$02
8369	.e80f		2c 7c 02	bit $027c	                bit characterDestinationStatus
8370	.e812		d0 26		bne $e83a	                bne LE862
8371	.e814		68		pla		                pla                          ;restore char to print
8372	.e815		48		pha		                pha                          ;save it again
8373	.e816		aa		tax		                tax                          ;X=char to print
8374	.e817		ad 34 fe	lda $fe34	                lda ACCCON                   ;
8375	.e81a		48		pha		                pha                          ;S=[old ACCCON; ch; y; x; ch]
8376							                .if version==350
8377	.e81b		20 02 ed	jsr $ed02	                jsr selectMOS
8381							                .endif
8382	.e81e		a5 f4		lda $f4		                lda $F4
8383	.e820		48		pha		                pha          ;S=[old ROMSEL; old ACCCON; ch; y; x; ch]
8384	.e821		a9 8f		lda #$8f	                lda #$80|terminalROM
8385	.e823		85 f4		sta $f4		                sta $F4
8386	.e825		8d 30 fe	sta $fe30	                sta ROMSEL                   ;page in ANDY+Terminal
8387	.e828		8a		txa		                txa                          ;A=char to print
8388	.e829		20 27 c0	jsr $c027	                jsr outputToVDU
8389	.e82c		68		pla		                pla
8390	.e82d		85 f4		sta $f4		                sta $F4
8391	.e82f		8d 30 fe	sta $fe30	                sta ROMSEL
8392	.e832		68		pla		                pla
8393	.e833		29 08		and #$08	                and #ACCCON.Y
8394	.e835		0c 34 fe	tsb $fe34	                tsb ACCCON
8395	.e838		b0 07		bcs $e841	                bcs LE869
8396	.e83a						LE862:
8397	.e83a		a9 08		lda #$08	                lda #$08
8398	.e83c		2c 7c 02	bit $027c	                bit characterDestinationStatus
8399	.e83f		f0 05		beq $e846	                beq LE86E
8400	.e841						LE869:
8401	.e841		68		pla		                pla
8402	.e842		48		pha		                pha
8403	.e843		20 82 e8	jsr $e882	                jsr LE8AA
8404	.e846						LE86E:
8405							                .if version!=400
8406	.e846		ad 7c 02	lda $027c	                lda characterDestinationStatus
8407	.e849		6a		ror a		                ror a
8408	.e84a		90 1b		bcc $e867	                bcc LE88F
8409	.e84c		a4 ea		ldy $ea		                ldy $EA
8410	.e84e		88		dey		                dey
8411	.e84f		10 16		bpl $e867	                bpl LE88F
8412	.e851		68		pla		                pla
8413	.e852		48		pha		                pha
8414	.e853		08		php		                php
8415	.e854		78		sei		                sei
8416	.e855		a2 02		ldx #$02	                ldx #$02
8417	.e857		48		pha		                pha
8418	.e858		20 c1 e9	jsr $e9c1	                jsr osbyte98
8419	.e85b		90 03		bcc $e860	                bcc LE888
8420	.e85d		20 e0 e8	jsr $e8e0	                jsr clearRS423BusyAndSetRS423Active
8421	.e860						LE888:
8422	.e860		68		pla		                pla
8423	.e861		a2 02		ldx #$02	                ldx #$02
8424	.e863		20 7b e9	jsr $e97b	                jsr LE9A3
8425	.e866		28		plp		                plp
8426	.e867						LE88F:
8427							                .endif

8429	.e867		a9 10		lda #$10	                lda #$10
8430	.e869		2c 7c 02	bit $027c	                bit characterDestinationStatus
8431	.e86c		d0 0f		bne $e87d	                bne LE8A5
8432	.e86e		ac 57 02	ldy $0257	                ldy spoolFileHandle
8433	.e871		f0 0a		beq $e87d	                beq LE8A5
8434	.e873		68		pla		                pla
8435	.e874		48		pha		                pha
8436	.e875		38		sec		                sec
8437	.e876		66 eb		ror $eb		                ror $EB
8438	.e878		20 d4 ff	jsr $ffd4	                jsr OSBPUT
8439	.e87b		46 eb		lsr $eb		                lsr $EB
8440	.e87d						LE8A5:
8441	.e87d		68		pla		                pla
8442	.e87e		7a		ply		                ply
8443	.e87f		fa		plx		                plx
8444	.e880		68		pla		                pla
8445	.e881		60		rts		                rts

8447	.e882						LE8AA:
8448	.e882		2c 7c 02	bit $027c	                bit characterDestinationStatus
8449	.e885		70 25		bvs $e8ac	                bvs LE8D4
8450	.e887		cd 86 02	cmp $0286	                cmp printerIgnoreChar
8451	.e88a		d0 05		bne $e891	                bne LE8B9
8452	.e88c		2c 46 02	bit $0246	                bit noignoreState
8453	.e88f		10 1b		bpl $e8ac	                bpl LE8D4
8454	.e891						LE8B9:
8455	.e891		08		php		                php
8456	.e892		78		sei		                sei
8457	.e893		aa		tax		                tax
8458	.e894		a9 04		lda #$04	                lda #$04
8459	.e896		2c 7c 02	bit $027c	                bit characterDestinationStatus
8460	.e899		d0 10		bne $e8ab	                bne LE8D3
8461	.e89b		8a		txa		                txa
8462	.e89c		a2 03		ldx #$03	                ldx #$03
8463	.e89e		20 7b e9	jsr $e97b	                jsr LE9A3
8464	.e8a1		b0 08		bcs $e8ab	                bcs LE8D3
8465	.e8a3		2c d1 02	bit $02d1	                bit bufferEmptyFlags+bufferPrinter
8466	.e8a6		10 03		bpl $e8ab	                bpl LE8D3
8467	.e8a8		20 ad e8	jsr $e8ad	                jsr LE8D5
8468	.e8ab						LE8D3:
8469	.e8ab		28		plp		                plp
8470	.e8ac						LE8D4:
8471	.e8ac		60		rts		                rts

8473	.e8ad						LE8D5:                                       ;E7CA in MOS 4.00
8474	.e8ad		ad 85 02	lda $0285	                lda printerDriverType
8475							                .if version!=400
8476	.e8b0		f0 7f		beq $e931	                beq LE959
8477	.e8b2		3a		dec a		                dec a
8478	.e8b3		d0 20		bne $e8d5	                bne LE8FD
8479	.e8b5		20 c6 e9	jsr $e9c6	                jsr osbyte91
8480	.e8b8		6e d1 02	ror $02d1	                ror bufferEmptyFlags+bufferPrinter
8481	.e8bb		30 43		bmi $e900	                bmi rtsE928
8482	.e8bd		a0 82		ldy #$82	                ldy #$82
8483	.e8bf		8c 6e fe	sty $fe6e	                sty userVIA.ier
8484	.e8c2		8d 61 fe	sta $fe61	                sta userVIA.ora
8485	.e8c5		ad 6c fe	lda $fe6c	                lda userVIA.pcr
8486	.e8c8		29 f1		and #$f1	                and #$F1
8487	.e8ca		09 0c		ora #$0c	                ora #$0C
8488	.e8cc		8d 6c fe	sta $fe6c	                sta userVIA.pcr
8489	.e8cf		09 0e		ora #$0e	                ora #$0E
8490	.e8d1		8d 6c fe	sta $fe6c	                sta userVIA.pcr
8491	.e8d4		60		rts		                rts

8493	.e8d5						LE8FD:
8494	.e8d5		3a		dec a		                dec a
8495	.e8d6		d0 29		bne $e901	                bne activatePrinterDriver
8496	.e8d8		a4 ea		ldy $ea		                ldy $EA
8497	.e8da		88		dey		                dey
8498	.e8db		10 54		bpl $e931	                bpl LE959
8499	.e8dd		4e d1 02	lsr $02d1	                lsr bufferEmptyFlags+bufferPrinter
8500	.e8e0						clearRS423BusyAndSetRS423Active:
8501	.e8e0		4e 4f 02	lsr $024f	                lsr rs423Busy
8502	.e8e3						setRS423Active:
8503	.e8e3		20 81 ec	jsr $ec81	                jsr getRS423InputBufferFreeBytes
8504	.e8e6		90 18		bcc $e900	                bcc rtsE928
8505	.e8e8		a2 20		ldx #$20	                ldx #ACIA.control.rtsLowTXInterruptEnabled
8506	.e8ea						resetACIA:
8507	.e8ea		a0 9f		ldy #$9f	                ldy #ACIA.control.rtsRTSInterruptEnabled|ACIA.control.word8DataOddParity1Stop|ACIA.control.reset

8509							;-------------------------------------------------------------------------
8510							;
8511							; OSBYTE 156 (&9C) Read/write serial ACIA control [MasRef D.2-47]
8512							;
8513	.e8ec						osbyte9C:
8514	.e8ec		08		php		                php
8515	.e8ed		78		sei		                sei
8516	.e8ee		98		tya		                tya
8517	.e8ef		86 fa		stx $fa		                stx SEIWKA
8518	.e8f1		2d 50 02	and $0250	                and aciaControlRegister
8519	.e8f4		45 fa		eor $fa		                eor SEIWKA
8520	.e8f6		ae 50 02	ldx $0250	                ldx aciaControlRegister
8521	.e8f9						writeACIAControlRegister:
8522	.e8f9		8d 50 02	sta $0250	                sta aciaControlRegister
8523	.e8fc		8d 08 fe	sta $fe08	                sta ACIA.control
8524	.e8ff		28		plp		                plp
8525	.e900						rtsE928:
8526	.e900		60		rts		                rts

8537							                .endif

8539							;-------------------------------------------------------------------------

8541	.e901						activatePrinterDriver:
8542	.e901		18		clc		                clc
8543	.e902		a9 01		lda #$01	                lda #printerDriverActivate
8544	.e904		20 12 e9	jsr $e912	                jsr callPrinterDriverWithPrinterBuffer

8546							                ; printer driver will set C=0 if active, C=1 if
8547							                ; inactive.

8549							;-------------------------------------------------------------------------
8550							;
8551							; OSBYTE 123 (&7B) Inform MOS of printer driver going dormant [MasRef
8552							; D.2-36]
8553							;
8554	.e907						osbyte7B:
8555	.e907		6e d1 02	ror $02d1	                ror bufferEmptyFlags+bufferPrinter   ;C=1 on entry, so set bit 7
8556	.e90a						rtsE932:
8557	.e90a		60		rts		                rts

8559							;-------------------------------------------------------------------------

8561	.e90b						pollPrinterDriver:
8562	.e90b		2c d1 02	bit $02d1	                bit bufferEmptyFlags+bufferPrinter
8563	.e90e		30 fa		bmi $e90a	                bmi rtsE932           ;taken if printer driver dormant
8564	.e910		a9 00		lda #$00	                lda #printerDriverPoll
8565	.e912						callPrinterDriverWithPrinterBuffer:
8566	.e912		a2 03		ldx #$03	                ldx #bufferPrinter
8567	.e914						callPrinterDriver:
8568	.e914		ac 85 02	ldy $0285	                ldy printerDriverType
8569	.e917		20 0c eb	jsr $eb0c	                jsr callNETV
8570	.e91a		6c 22 02	jmp ($0222)	                jmp (UPTV)

8572							;-------------------------------------------------------------------------
8573							;
8574							; OSBYTE 15 (&0F) Flush buffer
8575							;
8576	.e91d						osbyte0F:
8577	.e91d		d0 0f		bne $e92e	                bne LE956
8578	.e91f						LE947:
8579	.e91f		a2 08		ldx #$08	                ldx #$08
8580	.e921						LE949:
8581	.e921		58		cli		                cli
8582	.e922		78		sei		                sei
8583	.e923		20 29 e9	jsr $e929	                jsr osbyte15
8584	.e926		ca		dex		                dex
8585	.e927		10 f8		bpl $e921	                bpl LE949

8587							;-------------------------------------------------------------------------
8588							;
8589							; OSBYTE 21 (&15) Flush selected buffer
8590							;
8591	.e929						osbyte15:                                    ;e951
8592	.e929		e0 09		cpx #$09	                cpx #bufferMax+1
8593	.e92b		90 04		bcc $e931	                bcc LE959
8594	.e92d		60		rts		                rts

8596	.e92e						LE956:
8597	.e92e		ae 41 02	ldx $0241	                ldx inputSource
8598	.e931						LE959:
8599	.e931		18		clc		                clc
8600	.e932						LE95A:
8601	.e932		48		pha		                pha
8602	.e933		08		php		                php
8603	.e934		78		sei		                sei
8604	.e935		b0 08		bcs $e93f	                bcs LE967
8605	.e937		8a		txa		                txa
8606	.e938		29 04		and #$04	                and #$04                     ;buffer 4-7?
8607	.e93a		f0 03		beq $e93f	                beq LE967                    ;taken if not sound buffer
8608	.e93c		20 ca f3	jsr $f3ca	                jsr clearSoundChannelBuffer
8609	.e93f						LE967:
8610	.e93f		38		sec		                sec
8611	.e940		7e ce 02	ror $02ce,x	                ror bufferEmptyFlags,x
8612	.e943		e0 02		cpx #$02	                cpx #bufferFirstOutput
8613	.e945		b0 06		bcs $e94d	                bcs LE975                    ;taken if output buffer
8614	.e947		9c 68 02	stz $0268	                stz softKeyStringLength
8615	.e94a		9c 6a 02	stz $026a	                stz vduQueueNegativeLength
8616	.e94d						LE975:
8617	.e94d		20 7b ec	jsr $ec7b	                jsr purgeBufferViaCNPV
8618	.e950		28		plp		                plp
8619	.e951		68		pla		                pla
8620	.e952		60		rts		                rts

8622							;-------------------------------------------------------------------------
8623							;
8624							; Count/purge entry point [AUG p264]
8625							;
8626	.e953						cnpEntryPoint:
8627	.e953		50 07		bvc $e95c	                bvc countBuffer
8628	.e955						purgeBuffer:
8629	.e955		bd d7 02	lda $02d7,x	                lda bufferStartIndices,x
8630	.e958		9d e0 02	sta $02e0,x	                sta bufferEndIndices,x
8631	.e95b		60		rts		                rts

8633	.e95c						countBuffer:
8634	.e95c		08		php		                php
8635	.e95d		78		sei		                sei
8636	.e95e		08		php		                php
8637	.e95f		38		sec		                sec
8638	.e960		bd e0 02	lda $02e0,x	                lda bufferEndIndices,x
8639	.e963		fd d7 02	sbc $02d7,x	                sbc bufferStartIndices,x
8640	.e966		b0 04		bcs $e96c	                bcs LE994
8641	.e968		38		sec		                sec
8642	.e969		fd ad e9	sbc $e9ad,x	                sbc bufferIndex0Offsets,x
8643	.e96c						LE994:
8644	.e96c		28		plp		                plp
8645	.e96d		90 06		bcc $e975	                bcc LE99D
8646	.e96f		18		clc		                clc
8647	.e970		7d ad e9	adc $e9ad,x	                adc bufferIndex0Offsets,x
8648	.e973		49 ff		eor #$ff	                eor #$FF
8649	.e975						LE99D:
8650	.e975		a0 00		ldy #$00	                ldy #$00
8651	.e977		aa		tax		                tax
8652	.e978		28		plp		                plp
8653	.e979						rtsE9A1:
8654	.e979		60		rts		                rts

8656							;-------------------------------------------------------------------------

8658	.e97a						LE9A2:
8659	.e97a		58		cli		                cli
8660	.e97b						LE9A3:
8661	.e97b		78		sei		                sei
8662	.e97c						LE9A4:
8663	.e97c		20 12 ea	jsr $ea12	                jsr callINSV
8664	.e97f		90 f8		bcc $e979	                bcc rtsE9A1
8665	.e981		20 c2 f1	jsr $f1c2	                jsr LF241
8666	.e984		48		pha		                pha
8667	.e985		20 1e f4	jsr $f41e	                jsr updateKeyboardLEDs
8668	.e988		0a		asl a		                asl a
8669	.e989		68		pla		                pla
8670	.e98a		90 ee		bcc $e97a	                bcc LE9A2
8671	.e98c		60		rts		                rts

8673							;-------------------------------------------------------------------------
8674							;
8675							; OSBYTE $77
8676							;
8677							; D.2-33
8678							;
8679							                .if version!=350
8683							                .endif

8685							;-------------------------------------------------------------------------
8686							;
8687							; Get *IGNORE CMOS byte offset and mask for a given ROM.
8688							;
8689							; entry:
8690							;
8691							; Y = ROM number
8692							;
8693							; exit:
8694							;
8695							; A = mask
8696							;
8697							; X = RTC address of byte
8698							;
8699	.e98d						getROMInsertedFlagRTCAddressAndMask:
8700	.e98d		a9 00		lda #$00	                lda #$00
8701	.e98f		38		sec		                sec
8702	.e990		a2 14		ldx #$14	                ldx #CMOSBytes.insertedROMs+0+cmosBytesOffset
8703	.e992						-
8704	.e992		2a		rol a		                rol a
8705	.e993		d0 02		bne $e997	                bne +
8706	.e995		e8		inx		                inx
8707	.e996		2a		rol a		                rol a
8708	.e997						+
8709	.e997		88		dey		                dey
8710	.e998		10 f8		bpl $e992	                bpl -
8711	.e99a		60		rts		                rts

8713							;-------------------------------------------------------------------------

8715	=[]						_:=[]
8716	=[($03e0,32)]					_..=[(bufferKeyboardAddress,bufferKeyboardSize)]
8717	=[($03e0,32),($0a00,256)]			_..=[(bufferRS423InputAddress,bufferRS423InputSize)]
8718	=[($03e0,32),($0a00,256),($0900,192)]		_..=[(bufferRS423OutputAddress,bufferRS423OutputSize)]
8719	=[($03e0,32),($0a00,256),($0900,192),($0880,64)]
							_..=[(bufferPrinterAddress,bufferPrinterSize)]
8720	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16)]
							_..=[(bufferSoundChannel0Address,bufferSoundChannel0Size)]
8721	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16)]
							_..=[(bufferSoundChannel1Address,bufferSoundChannel1Size)]
8722	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16)]
							_..=[(bufferSoundChannel2Address,bufferSoundChannel2Size)]
8723	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16),($0870,16)]
							_..=[(bufferSoundChannel3Address,bufferSoundChannel3Size)]
8724	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16),($0870,16),($09c0,64)]
							_..=[(buffer8Address,buffer8Size)]
8725	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16),($0870,16),($09c0,64)]
							buffers=_

8727							BufferTableIndex0Offset: .function buffer
8728							                .endfunction 256-buffer[1]

8730							BufferTableBase: .function buffer
8731							                .endfunction buffer[0]-BufferTableIndex0Offset(buffer)

8733							;-------------------------------------------------------------------------
8734							;
8735							; Buffer base addresses - each buffer's address, offset by the offset
8736							; for index 0 (see bufferIndex0Offsets).
8737							;
8738	.e99b						bufferBaseAddressMSBs:
8739							                .for i=0,i<len(buffers),i+=1
8740	>e99b		03				                .byte >BufferTableBase(buffers[i])
8740	>e99c		0a				                .byte >BufferTableBase(buffers[i])
8740	>e99d		08				                .byte >BufferTableBase(buffers[i])
8740	>e99e		07				                .byte >BufferTableBase(buffers[i])
8740	>e99f		07				                .byte >BufferTableBase(buffers[i])
8740	>e9a0		07				                .byte >BufferTableBase(buffers[i])
8740	>e9a1		07				                .byte >BufferTableBase(buffers[i])
8740	>e9a2		07				                .byte >BufferTableBase(buffers[i])
8740	>e9a3		09				                .byte >BufferTableBase(buffers[i])
8741							                .endfor

8743	.e9a4						bufferBaseAddressLSBs:
8744							                .for i=0,i<len(buffers),i+=1
8745	>e9a4		00				                .byte <BufferTableBase(buffers[i])
8745	>e9a5		00				                .byte <BufferTableBase(buffers[i])
8745	>e9a6		c0				                .byte <BufferTableBase(buffers[i])
8745	>e9a7		c0				                .byte <BufferTableBase(buffers[i])
8745	>e9a8		50				                .byte <BufferTableBase(buffers[i])
8745	>e9a9		60				                .byte <BufferTableBase(buffers[i])
8745	>e9aa		70				                .byte <BufferTableBase(buffers[i])
8745	>e9ab		80				                .byte <BufferTableBase(buffers[i])
8745	>e9ac		00				                .byte <BufferTableBase(buffers[i])
8746							                .endfor

8748							;-------------------------------------------------------------------------

8750							; Offset of buffer index 0 for each buffer. Index 0 is (-buffer size)
8751							; - buffer indexes count up, and wrap once they reach 0.

8753	.e9ad						bufferIndex0Offsets:
8754							                .for i=0,i<len(buffers),i+=1
8755	>e9ad		e0				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e9ae		00				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e9af		40				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e9b0		c0				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e9b1		f0				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e9b2		f0				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e9b3		f0				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e9b4		f0				                .byte BufferTableIndex0Offset(buffers[i])
8755	>e9b5		c0				                .byte BufferTableIndex0Offset(buffers[i])
8756							                .endfor

8758							;-------------------------------------------------------------------------
8759							;
8760							; Get base address for a buffer.
8761							;
8762							; entry:
8763							;
8764							; X = buffer number
8765							;
8766							; exit:
8767							;
8768							; (SEIWKA) = buffer base address
8769							;
8770	.e9b6						getBufferBaseAddress:
8771	.e9b6		bd a4 e9	lda $e9a4,x	                lda bufferBaseAddressLSBs,x
8772	.e9b9		85 fa		sta $fa		                sta SEIWKA
8773	.e9bb		bd 9b e9	lda $e99b,x	                lda bufferBaseAddressMSBs,x
8774	.e9be		85 fb		sta $fb		                sta SEIWKB
8775	.e9c0		60		rts		                rts

8777							;-------------------------------------------------------------------------
8778							;
8779							; OSBYTE 152 (&98) Examine buffer status [MasRef D.2-45]
8780							;
8781	.e9c1						osbyte98:
8782	.e9c1		2c 6c e3	bit $e36c	                bit valueFF                  ;V=1
8783	.e9c4		80 01		bra $e9c7	                bra callREMV

8785							;-------------------------------------------------------------------------
8786							;
8787							; OSBYTE 145 (&91) Get character from buffer [MasRef D.2-45]
8788							;
8789							; X = buffer number
8790	.e9c6						osbyte91:
8791	.e9c6		b8		clv		                clv                          ;remove
8792	.e9c7						callREMV:
8793	.e9c7		6c 2c 02	jmp ($022c)	                jmp (REMV)

8795							;-------------------------------------------------------------------------
8796							;
8797							; Buffer remove entry point. [AUG p263]
8798							;
8799							; Even in remove mode, A is the character removed on exit. Some of the
8800							; other MOS routines rely on this.
8801							;
8802	.e9ca						remEntryPoint:
8803	.e9ca		08		php		                php
8804	.e9cb		78		sei		                sei
8805	.e9cc		bd d7 02	lda $02d7,x	                lda bufferStartIndices,x
8806	.e9cf		dd e0 02	cmp $02e0,x	                cmp bufferEndIndices,x
8807	.e9d2		f0 6c		beq $ea40	                beq plp_sec_rts  ;taken if buffer empty
8808	.e9d4		a8		tay		                tay                          ;Y=start index
8809	.e9d5		20 b6 e9	jsr $e9b6	                jsr getBufferBaseAddress
8810	.e9d8		b1 fa		lda ($fa),y	                lda (SEIWKA),y               ;get byte from buffer
8811	.e9da		70 1a		bvs $e9f6	                bvs tay_plp_clc_rts                  ;taken if only looking
8812	.e9dc		48		pha		                pha                          ;save buffered byte
8813	.e9dd		c8		iny		                iny                          ;next char in buffer
8814	.e9de		98		tya		                tya                          ;set Z if wrap
8815	.e9df		d0 03		bne $e9e4	                bne +                        ;branch taken if no wrap
8816	.e9e1		bd ad e9	lda $e9ad,x	                lda bufferIndex0Offsets,x    ;reset index on wrap
8817	.e9e4						+
8818	.e9e4		9d d7 02	sta $02d7,x	                sta bufferStartIndices,x

8820							                ; Issue output buffer empty event when appropriate.
8821	.e9e7		e0 02		cpx #$02	                cpx #bufferFirstOutput
8822	.e9e9		90 0a		bcc $e9f5	                bcc pla_tay_plp_clc_rts ;taken if keyboard or RS423
8823							                                        ;input - i.e., buffer is input
8824	.e9eb		dd e0 02	cmp $02e0,x	                cmp bufferEndIndices,x       ;buffer now empty?
8825	.e9ee		d0 05		bne $e9f5	                bne pla_tay_plp_clc_rts           ;taken if not empty
8826	.e9f0		a0 00		ldy #$00	                ldy #eventOutputBufferEmpty
8827	.e9f2		20 fa e9	jsr $e9fa	                jsr eventEntryPoint
8828	.e9f5						pla_tay_plp_clc_rts:
8829	.e9f5		68		pla		                pla                          ;restore buffered byte
8830	.e9f6						tay_plp_clc_rts:
8831	.e9f6		a8		tay		                tay                          ;Y=buffered byte
8832	.e9f7						plp_clc_rts:
8833	.e9f7		28		plp		                plp
8834	.e9f8		18		clc		                clc
8835	.e9f9		60		rts		                rts

8837							;-------------------------------------------------------------------------
8838							;
8839							; [MasRef D.9-1]
8840							;
8841	.e9fa						eventEntryPoint:
8842	.e9fa		08		php		                php
8843	.e9fb		78		sei		                sei
8844	.e9fc		48		pha		                pha
8845	.e9fd		b9 bf 02	lda $02bf,y	                lda eventEnabledFlags,y      ;is the event enabled?
8846	.ea00		f0 3d		beq $ea3f	                beq pla_plp_sec_rts                    ;
8847	.ea02		98		tya		                tya
8848	.ea03		7a		ply		                ply
8849	.ea04		5a		phy		                phy
8850	.ea05		20 eb f5	jsr $f5eb	                jsr LF8BF
8851	.ea08		80 eb		bra $e9f5	                bra pla_tay_plp_clc_rts

8853							;-------------------------------------------------------------------------
8854							;
8855							; Insert character into buffer and issue an event for it.
8856							;
8857							; entry:
8858							;
8859							; Y = buffer number
8860							;
8861	.ea0a						insertCharacterIntoBuffer:
8862	.ea0a		98		tya		                tya
8863	.ea0b		a0 02		ldy #$02	                ldy #eventCharacterEnteringBuffer
8864	.ea0d		20 fa e9	jsr $e9fa	                jsr eventEntryPoint
8865	.ea10		a8		tay		                tay

8867							;-------------------------------------------------------------------------
8868							;
8869							; OSBYTE 138 (&8A) Insert character code into buffer [MasRef D.2-43]
8870							;
8871	.ea11						osbyte8A:
8872	.ea11		98		tya		                tya
8873	.ea12						callINSV:
8874	.ea12		6c 2a 02	jmp ($022a)	                jmp (INSV)

8876							;-------------------------------------------------------------------------
8877							;
8878							; Default INSV entry point [AUG p263]
8879							;
8880	.ea15						insEntryPoint:
8881	.ea15		08		php		                php
8882	.ea16		78		sei		                sei
8883	.ea17		48		pha		                pha                          ;save value to insert
8884	.ea18		bd e0 02	lda $02e0,x	                lda bufferEndIndices,x       ;get buffer index
8885	.ea1b		1a		inc a		                inc a                        ;bump index
8886	.ea1c		d0 03		bne $ea21	                bne +          ;taken if index hasn't wrapped around
8887	.ea1e		bd ad e9	lda $e9ad,x	                lda bufferIndex0Offsets,x        ;reset index due to wrap
8888	.ea21						+
8889	.ea21		dd d7 02	cmp $02d7,x	                cmp bufferStartIndices,x     ;are we at the start index?
8890	.ea24		f0 0e		beq $ea34	                beq bufferFull       ;taken if yes - i.e., buffer full
8891	.ea26		bc e0 02	ldy $02e0,x	                ldy bufferEndIndices,x       ;note old buffer end
8892	.ea29		9d e0 02	sta $02e0,x	                sta bufferEndIndices,x       ;update buffer end
8893	.ea2c		20 b6 e9	jsr $e9b6	                jsr getBufferBaseAddress
8894	.ea2f		68		pla		                pla                          ;restore value to insert
8895	.ea30		91 fa		sta ($fa),y	                sta (SEIWKA),y               ;store byte in buffer
8896	.ea32		80 c3		bra $e9f7	                bra plp_clc_rts              ;done

8898	.ea34						bufferFull
8899							                ; Issue input buffer full event when appropriate.
8900	.ea34		68		pla		                pla
8901	.ea35		e0 02		cpx #$02	                cpx #bufferFirstOutput
8902	.ea37		b0 07		bcs $ea40	                bcs plp_sec_rts  ;taken if output buffer
8903	.ea39		a0 01		ldy #$01	                ldy #eventInputBufferFull
8904	.ea3b		20 fa e9	jsr $e9fa	                jsr eventEntryPoint
8905	.ea3e		48		pha		                pha
8906	.ea3f						pla_plp_sec_rts:
8907	.ea3f		68		pla		                pla
8908	.ea40						plp_sec_rts:
8909	.ea40		28		plp		                plp
8910	.ea41		38		sec		                sec
8911	.ea42		60		rts		                rts

8913							;-------------------------------------------------------------------------
8914							;
8915							; Check if character is a letter - A-Z or a-z.
8916							;
8917							; Entry:
8918							;
8919							; A = character to test
8920							;
8921							; Exit:
8922							;
8923							; C=0 if character is letter, C=1 otherwise
8924							;
8925							; Preserves: A/X/Y
8926	.ea43						isLetter: .proc                 ;EA71
8927	.ea43		48		pha		                pha
8928	.ea44		29 df		and #$df	                and #$DF        ;convert to upper case
8929	.ea46		c9 5b		cmp #$5b	                cmp #'Z'+1
8930	.ea48		b0 04		bcs $ea4e	                bcs +           ;branch taken with C=1 if past Z
8931	.ea4a		49 ff		eor #$ff	                eor #$FF
8932	.ea4c		c9 bf		cmp #$bf	                cmp #-'A'       ;C=1 if past A
8933	.ea4e						+
8934	.ea4e		68		pla		                pla
8935	.ea4f		60		rts		                rts
8936							                .pend

8938							;-------------------------------------------------------------------------
8939							;
8940							; OSBYTE 153 (&99) Insert character code into buffer, checking for
8941							; ESCAPE [MasRef D.2-46]
8942							;
8943	.ea50						insertCharacterIntoKeyboardBuffer:
8944							                .if version==350
8945	.ea50		20 6a f3	jsr $f36a	                jsr callWithTST
8946	.ea53						insertCharacterIntoKeyboardBufferWithTST:
8947							                .endif
8948	.ea53		a2 00		ldx #$00	                ldx #$00
8949	.ea55						osbyte99:
8950							                .if version!=400
8951	.ea55		8a		txa		                txa                          ;X=1 if RS423, 0 if keyboard
8952	.ea56		2d 45 02	and $0245	                and rs423InputInterpretationStatus ;A=0 if RS423 simulates keyboard, 1=default
8953	.ea59		d0 b6		bne $ea11	                bne osbyte8A ;taken if default - don't treat RS423 as keyboard
8954							                .endif
8955	.ea5b		98		tya		                tya          ;A=char
8956	.ea5c		4d 6c 02	eor $026c	                eor escapeCharacter
8957	.ea5f		0d 75 02	ora $0275	                ora escapeKeyStatus
8958	.ea62		d0 a6		bne $ea0a	                bne insertCharacterIntoBuffer
8959	.ea64		ad 58 02	lda $0258	                lda breakAndESCAPEEffect
8960	.ea67		6a		ror a		                ror a                        ;C=0 if normal ESCAPE action
8961	.ea68		98		tya		                tya                          ;A=char
8962	.ea69		b0 0a		bcs $ea75	                bcs osbyte99Done             ;taken if ESCAPE inhibited
8963	.ea6b		a0 06		ldy #$06	                ldy #eventESCAPEPressed
8964	.ea6d		20 fa e9	jsr $e9fa	                jsr eventEntryPoint
8965	.ea70		90 03		bcc $ea75	                bcc osbyte99Done             ;taken if event handled
8966	.ea72		20 ad eb	jsr $ebad	                jsr osbyte7D
8967	.ea75						osbyte99Done:
8968	.ea75		18		clc		                clc
8969	.ea76		60		rts		                rts

8971							;-------------------------------------------------------------------------

8973							; A = 0 (edit keys)/1 (ascii keys)/2 (F keys)
8974	.ea77						handleCursorKeysAndCopy:
8975							                .if version<500
8976	.ea77		6a		ror a		                ror a                        ;test edit keys mode bit 0
8977	.ea78		68		pla		                pla                          ;restore translated value
8978	.ea79		b0 28		bcs $eaa3	                bcs clc_rts_EABD       ;taken if value was asciiKeys
8983							                .endif

8985	.ea7b						handleFunctionKey:
8986	.ea7b		98		tya		                tya
8987							                .if version<500&&version!=350
8989							                .endif
8990							                .if version==350
8991	.ea7c		48		pha		                pha
8992	.ea7d		20 2e e5	jsr $e52e	                jsr LE520
9000							                .endif
9001	.ea80		49 04		eor #$04	                eor #$04
9002	.ea82		a8		tay		                tay
9003	.ea83		b9 65 02	lda $0265,y	                lda input192To207Interpretation-8,y
9004	.ea86		4a		lsr a		                lsr a
9005							                .if version<500&&version!=350
9010							                .else
9011	.ea87		d0 03		bne $ea8c	                bne +
9012	.ea89		4c 47 eb	jmp $eb47	                jmp LEC99
9013	.ea8c						+
9014	.ea8c		2a		rol a		                rol a
9015	.ea8d		c9 02		cmp #$02	                cmp #2
9016	.ea8f		d0 0b		bne $ea9c	                bne LEBF5
9017	.ea91						LEBEA:
9018	.ea91		68		pla		                pla
9019	.ea92		85 f8		sta $f8		                sta softKeyExpansionPtr
9020	.ea94		a9 ff		lda #$ff	                lda #$ff
9021	.ea96		8d 68 02	sta $0268	                sta softKeyStringLength
9022	.ea99		1a		inc a		                inc a
9023	.ea9a		80 07		bra $eaa3	                bra clc_rts_EABD

9025	.ea9c						LEBF5:
9026	.ea9c		68		pla		                pla
9027	.ea9d		29 0f		and #$0f	                and #$0f
9028	.ea9f		18		clc		                clc
9029	.eaa0		79 65 02	adc $0265,y	                adc input192To207Interpretation-8,y
9030							                .endif

9032	.eaa3						clc_rts_EABD:
9033	.eaa3		18		clc		                clc
9034	.eaa4		60		rts		                rts

9036							;-------------------------------------------------------------------------

9038	.eaa5						copyCharNotRecognised:
9039	.eaa5		20 27 ef	jsr $ef27	                jsr vdu7EntryPoint           ;beep
9040	.eaa8		fa		plx		                plx
9041	.eaa9						readFromInputBufferX:
9042	.eaa9		20 c6 e9	jsr $e9c6	                jsr osbyte91          ;extract character from buffer X
9043							                .if version<500&&version!=350
9045							                .elsif version>=500||version==350
9046	.eaac		b0 0c		bcs $eaba	                bcs LEC0D
9047	.eaae		a8		tay		                tay
9048	.eaaf		d0 1f		bne $ead0	                bne LEAC8
9049							                .if version>=511||version==350
9050	.eab1		8a		txa		                txa
9051	.eab2		2d 45 02	and $0245	                and rs423InputInterpretationStatus
9052	.eab5		d0 18		bne $eacf	                bne LEC29
9053							                .endif
9054							                .if version==350&&!finmos329
9055	.eab7		20 83 eb	jsr $eb83	                jsr LEB75
9058							                .endif
9059	.eaba						LEC0D:
9060	.eaba		b0 7e		bcs $eb3a	                bcs rtsEB28
9061	.eabc		a8		tay		                tay
9062	.eabd		d0 e4		bne $eaa3	                bne clc_rts_EABD
9063	.eabf		48		pha		                pha
9064	.eac0		a0 08		ldy #$08	                ldy #8

9066	.eac2						LEC15:
9067	.eac2		b9 6c 02	lda $026c,y	                lda shiftCtrlSoftKeyInterpretation-8,y
9068	.eac5		c9 02		cmp #$02	                cmp #2
9069	.eac7		f0 c8		beq $ea91	                beq LEBEA
9070	.eac9		88		dey		                dey
9071	.eaca		d0 f6		bne $eac2	                bne LEC15
9072	.eacc		68		pla		                pla
9073	.eacd		80 d4		bra $eaa3	                bra clc_rts_EABD
9074							                .endif

9076							                .if version>=511||version==350
9077	.eacf						LEC29:
9078	.eacf		98		tya		                tya
9079							                .endif

9081							                .if version!=400
9082	.ead0						LEAC8:
9083	.ead0		48		pha		                pha                   ;save character extracted
9084	.ead1		e0 01		cpx #$01	                cpx #bufferRS423Input ;was it RS423 input buffer?
9085	.ead3		d0 06		bne $eadb	                bne LEAD3             ;taken if not RS423 input buffer
9086	.ead5		20 e3 e8	jsr $e8e3	                jsr setRS423Active
9087	.ead8		38		sec		                sec
9088	.ead9		a2 01		ldx #$01	                ldx #bufferRS423Input

9090	.eadb						LEAD3:
9091	.eadb		68		pla		                pla                          ;restore char extracted
9092	.eadc		90 05		bcc $eae3	                bcc LEADB                    ;taken if keyboard buffer
9093	.eade		ac 45 02	ldy $0245	                ldy rs423InputInterpretationStatus ;D.2-54
9094	.eae1		d0 56		bne $eb39	                bne clc_rts_EB27             ;taken if default mode
9095							                .endif

9097	.eae3						LEADB:
9098	.eae3		a8		tay		                tay                          ;Y = char
9099	.eae4		10 53		bpl $eb39	                bpl clc_rts_EB27             ;if normal char, all good
9100	.eae6		29 0f		and #$0f	                and #$0F
9101	.eae8		c9 0b		cmp #$0b	                cmp #$0B
9102	.eaea		90 8f		bcc $ea7b	                bcc handleFunctionKey        ;taken if F key
9103	.eaec		69 7b		adc #$7b	                adc #$7B    ;C=1, so +$7c - convert $0b-0$f to $87-$8B
9104	.eaee		48		pha		                pha         ;save translated value
9105	.eaef		ad 7d 02	lda $027d	                lda editKeysMode
9106	.eaf2		d0 83		bne $ea77	                bne handleCursorKeysAndCopy  ;taken if not editKeys
9107	.eaf4		ad 7c 02	lda $027c	                lda characterDestinationStatus
9108	.eaf7		6a		ror a		                ror a                        ;C=rs423_enable
9109	.eaf8		6a		ror a		                ror a                        ;C=vdu_disable
9110	.eaf9		68		pla		                pla                          ;restore translated value
9111	.eafa		b0 ad		bcs $eaa9	                bcs readFromInputBufferX     ;taken if VDU output disabled
9112	.eafc		c9 87		cmp #$87	                cmp #$87                     ;COPY?
9113	.eafe		f0 3b		beq $eb3b	                beq readCopyChar
9114	.eb00		da		phx		                phx                          ;save buffer number
9115	.eb01		20 77 eb	jsr $eb77	                jsr handleCursorKeyThunk     ;handle cursor key
9116	.eb04		fa		plx		                plx
9117	.eb05						readFromEconetOrSoftKeyOrInputBufferA:
9118							                .if version==400
9120							                .endif
9121	.eb05		2c 5f 02	bit $025f	                bit econetInputInterpretationStatus
9122	.eb08		10 05		bpl $eb0f	                bpl readFromSoftKeyOrInputBufferA
9123	.eb0a		a9 06		lda #$06	                lda #netReadCharacterAttempted
9124	.eb0c						callNETV:
9125	.eb0c		6c 24 02	jmp ($0224)	                jmp (NETV)

9127	.eb0f						readFromSoftKeyOrInputBufferA:
9128	.eb0f		ad 68 02	lda $0268	                lda softKeyStringLength
9129	.eb12		f0 95		beq $eaa9	                beq readFromInputBufferX
9130							                .if version>=500||version==350
9131	.eb14		1a		inc a		                inc a
9132	.eb15		d0 07		bne $eb1e	                bne LEC70
9133	.eb17		9c 68 02	stz $0268	                stz softKeyStringLength
9134	.eb1a		a5 f8		lda $f8		                lda softKeyExpansionPtr
9135	.eb1c		80 1b		bra $eb39	                bra clc_rts_EB27
9136	.eb1e						LEC70:
9137							                .endif
9138							                .if version!=400
9139	.eb1e		8a		txa		                txa
9140	.eb1f		2d 45 02	and $0245	                and rs423InputInterpretationStatus
9141	.eb22		d0 85		bne $eaa9	                bne readFromInputBufferX
9142							                .endif
9143	.eb24		a5 f4		lda $f4		                lda $F4
9144	.eb26		48		pha		                pha
9145	.eb27		20 70 e5	jsr $e570	                jsr selectTerminalROMAndANDY2
9146	.eb2a		b2 f8		lda ($f8)	                lda (softKeyExpansionPtr)
9147	.eb2c		fa		plx		                plx
9148	.eb2d		20 59 e5	jsr $e559	                jsr selectROMX
9149	.eb30		ce 68 02	dec $0268	                dec softKeyStringLength
9150	.eb33		e6 f8		inc $f8		                inc softKeyExpansionPtr+0
9151	.eb35		d0 02		bne $eb39	                bne clc_rts_EB27
9152	.eb37		e6 f9		inc $f9		                inc softKeyExpansionPtr+1
9153	.eb39						clc_rts_EB27:
9154	.eb39		18		clc		                clc
9155	.eb3a						rtsEB28:
9156	.eb3a		60		rts		                rts

9158	.eb3b						readCopyChar:
9159	.eb3b		da		phx		                phx
9160	.eb3c		20 7d eb	jsr $eb7d	                jsr handleCopyKeyThunk
9161							                .if version<500&&version!=350
9163							                .else
9164	.eb3f		d0 03		bne $eb44	                bne +
9165	.eb41		4c a5 ea	jmp $eaa5	                jmp copyCharNotRecognised
9166	.eb44						+
9167							                .endif
9168	.eb44		fa		plx		                plx
9169	.eb45		18		clc		                clc
9170	.eb46						rtsEB31:
9171	.eb46		60		rts		                rts

9173							                .if version>=500||version==350
9174	.eb47						LEC99:
9175	.eb47		68		pla		                pla
9176	.eb48		29 0f		and #$0f	                and #$0f
9177	.eb4a		a8		tay		                tay
9178	.eb4b		b0 03		bcs $eb50	                bcs LECA2
9179	.eb4d		4c a9 ea	jmp $eaa9	                jmp readFromInputBufferX

9181	.eb50						LECA2:
9182	.eb50		8d c9 02	sta $02c9	                sta currentSoftKey

9192							                .endif

9194	.eb53		a5 f4		lda $f4		                lda $F4
9195	.eb55		48		pha		                pha                           ;save old ROMSEL
9196	.eb56		20 70 e5	jsr $e570	                jsr selectTerminalROMAndANDY2
9197	.eb59		20 6f eb	jsr $eb6f	                jsr getSoftKeyStringLength
9198	.eb5c		8d 68 02	sta $0268	                sta softKeyStringLength
9199	.eb5f		b9 00 80	lda $8000,y	                lda andy.softKeys.stringLSBs,y
9200	.eb62		85 f8		sta $f8		                sta softKeyExpansionPtr+0
9201	.eb64		b9 11 80	lda $8011,y	                lda andy.softKeys.stringMSBs,y
9202	.eb67		85 f9		sta $f9		                sta softKeyExpansionPtr+1
9203	.eb69		68		pla		                pla
9204	.eb6a		20 6a e5	jsr $e56a	                jsr selectROMA               ;restore old ROMSEL
9205	.eb6d		80 96		bra $eb05	                bra readFromEconetOrSoftKeyOrInputBufferA

9207							;-------------------------------------------------------------------------

9209	.eb6f						getSoftKeyStringLength:
9210	.eb6f		b9 01 80	lda $8001,y	                lda andy.softKeys.stringLSBs+1,y
9211	.eb72		38		sec		                sec
9212	.eb73		f9 00 80	sbc $8000,y	                sbc andy.softKeys.stringLSBs+0,y
9213	.eb76		60		rts		                rts

9215							;-------------------------------------------------------------------------
9216							;
9217							; Page HAZEL out, page MOS in, call handleCursorKey.
9218							;
9219	.eb77						handleCursorKeyThunk:
9220	.eb77		20 3b f3	jsr $f33b	                jsr withMOSROM
9221	.eb7a		4c 78 df	jmp $df78	                jmp handleCursorKey

9223							;-------------------------------------------------------------------------
9224							;
9225							; Page HAZEL out, page MOS in, call handleCopyKey.
9226							;
9227	.eb7d						handleCopyKeyThunk:
9228	.eb7d		20 3b f3	jsr $f33b	                jsr withMOSROM
9229	.eb80		4c 5e df	jmp $df5e	                jmp handleCopyKey

9231							;-------------------------------------------------------------------------

9233							                .if version==350&&!finmos329
9234	.eb83						LEB75:
9235	.eb83		20 c6 e9	jsr $e9c6	                jsr osbyte91
9236	.eb86		90 04		bcc $eb8c	                bcc LEB7E
9237	.eb88		24 ff		bit $ff		                bit $ff
9238	.eb8a		10 f7		bpl $eb83	                bpl LEB75
9239	.eb8c						LEB7E:
9240	.eb8c		60		rts		                rts
9241							                .endif

9243							;-------------------------------------------------------------------------

9245							                .if version<500&&version!=350
9247							                .endif

9249							;-------------------------------------------------------------------------

9251	.eb8d						osbyte88: ;LEC37:
9252	.eb8d		a9 00		lda #$00	                lda #$00

9254	.eb8f						callUSERV:
9255	.eb8f		6c 00 02	jmp ($0200)	                jmp (USERV)

9257	.eb92						osbyte7E:                       ;ec3c
9258	.eb92		a2 00		ldx #$00	                ldx #$00
9259	.eb94		24 ff		bit $ff		                bit $FF
9260	.eb96		10 14		bpl $ebac	                bpl osbyte7C
9261	.eb98		ad 76 02	lda $0276	                lda escapeEffects
9262	.eb9b		d0 0d		bne $ebaa	                bne LEC54
9263	.eb9d		58		cli		                cli
9264	.eb9e		9c 69 02	stz $0269	                stz pagedModeCounter
9265	.eba1		20 24 f3	jsr $f324	                jsr withTerminalROM
9266	.eba4		20 ab a5	jsr $a5ab	                jsr terminal.starEXEC
9267	.eba7		20 1f e9	jsr $e91f	                jsr LE947
9268	.ebaa						LEC54:
9269	.ebaa		a2 ff		ldx #$ff	                ldx #$FF
9270	.ebac						osbyte7C: ;EC56
9271	.ebac		18		clc		                clc
9272	.ebad						osbyte7D: ;EC57
9273							                .if version<500
9274							                .if version==350
9275	.ebad		08		php		                php
9276	.ebae		26 ff		rol $ff		                rol $ff
9277	.ebb0		28		plp		                plp
9278							                .endif
9279	.ebb1		66 ff		ror $ff		                ror $FF
9280	.ebb3		2c 7a 02	bit $027a	                bit tubePresence
9281	.ebb6		10 7b		bpl $ec33	                bpl LECD9
9282	.ebb8		4c 03 04	jmp $0403	                jmp terminal.tubeHost.copyEscapeStatus
9292							                .endif

9294							;-------------------------------------------------------------------------

9296							                .if version<400
9297	.ebbb						osbyte89:
9298	.ebbb		ad 82 02	lda $0282	                lda serialULARegister
9299	.ebbe		a8		tay		                tay
9300	.ebbf		2a		rol a		                rol a
9301	.ebc0		e0 01		cpx #$01	                cpx #$01
9302	.ebc2		6a		ror a		                ror a
9303	.ebc3		80 1e		bra $ebe3	                bra LEC89
9304							                .endif

9306							;-------------------------------------------------------------------------
9307							;
9308							; ;OSBYTE 8 (&08) Write RS423 transmit rate
9309							;
9310							; This call sets the RS423 baud rate for transmitting data. The actual format of
9311							; the data is set using OSBYTE 156/&9C (see below).
9312							;
9313							; Entry parameters :
9314							; X=0 selects 9600 baud
9315							; X=1 selects 75 baud
9316							; X=2 selects 150 baud
9317							; X=3 selects 300 baud
9318							; X=4 selects 1200 baud
9319							; X=5 selects 2400 baud
9320							; X=6 selects 4800 baud
9321							; X=7 selects 9600 baud
9322							; X=8 selects 19200 baud
9323							; Y=0
9324							;
9325							; On exit : X=Y=<old serial ACIA control register contents>

9327							                .if version!=400
9328	.ebc5						osbyte08:
9329	.ebc5		a9 38		lda #$38	                lda #$38
9330							                ; fall through to OSBYTE &07
9331							                .endif

9333							;-------------------------------------------------------------------------
9334							;
9335							; OSBYTE 7 (&07) Write RS423 receive rate
9336							;
9337							; This call sets the RS423 baud rate for receiving data. The actual
9338							; format of the data is set using OSBYTE 156/&9C (see below).
9339							;
9340							; Entry parameters :
9341							; X=0 selects 9600 baud
9342							; X=1 selects 75 baud
9343							; X=2 selects 150 baud
9344							; X=3 selects 300 baud
9345							; X=4 selects 1200 baud
9346							; X=5 selects 2400 baud
9347							; X=6 selects 4800 baud
9348							; X=7 selects 9600 baud
9349							; X=8 selects 19200 baud
9350							; Y=0
9351							;
9352							; On exit : X=Y=<old serial ACIA control register contents>

9354							                .if version!=400
9355	.ebc7						osbyte07:                                    ;ec6d
9356	.ebc7		49 3f		eor #$3f	                eor #$3F                     ;if OSBYTE 8,
9357							                                             ;A=%00000111, mask for
9358							                                             ;transmit rate; if OSBYTE
9359							                                             ;8, A=%000111000, mask
9360							                                             ;for receive rate.
9361	.ebc9		85 fa		sta $fa		                sta $FA                      ;save mask
9362	.ebcb		ac 82 02	ldy $0282	                ldy serialULARegister                    ;
9363	.ebce		e0 09		cpx #$09	                cpx #$09                     ;check for invalid baud rate
9364	.ebd0		b0 17		bcs $ebe9	                bcs LEC8F                    ;branch taken if invalid
9365	.ebd2		3d 5d f0	and $f05d,x	                and serialBaudRatesTable,x   ;get setting in A
9366	.ebd5		85 fb		sta $fb		                sta $FB                      ;store setting
9367	.ebd7		98		tya		                tya                          ;
9368	.ebd8		05 fa		ora $fa		                ora $FA
9369	.ebda		45 fa		eor $fa		                eor $FA
9370	.ebdc		05 fb		ora $fb		                ora $FB
9371	.ebde		09 40		ora #$40	                ora #$40
9372	.ebe0		4d 5d 02	eor $025d	                eor rs423Destination ;mask in tape/serial flag set by OSBYTE 205ac
9373	.ebe3						LEC89:
9374	.ebe3		8d 82 02	sta $0282	                sta serialULARegister
9375	.ebe6		8d 10 fe	sta $fe10	                sta SERPROC+0
9376	.ebe9						LEC8F:
9377	.ebe9		98		tya		                tya
9378	.ebea						LEC90:
9379	.ebea		aa		tax		                tax
9380	.ebeb		60		rts		                rts
9381							                .endif

9383							                .if version==400
9388							                .endif

9390							;-------------------------------------------------------------------------

9392							; Y=0 on entry.

9394	.ebec						osbyte09:                       ;ec92
9395	.ebec		c8		iny		                iny
9396	.ebed		18		clc		                clc
9397	.ebee						osbyte0A:                                    ;ec94
9398	.ebee		b9 52 02	lda $0252,y	                lda firstFlashColourDuration,y
9399	.ebf1		48		pha		                pha
9400	.ebf2		8a		txa		                txa
9401	.ebf3		99 52 02	sta $0252,y	                sta firstFlashColourDuration,y
9402	.ebf6		7a		ply		                ply
9403	.ebf7		ad 51 02	lda $0251	                lda flashCounter
9404	.ebfa		d0 ed		bne $ebe9	                bne LEC8F
9405	.ebfc		8e 51 02	stx $0251	                stx flashCounter
9406	.ebff		ad 48 02	lda $0248	                lda vcontrolRegister
9407	.ec02		08		php		                php
9408	.ec03		6a		ror a		                ror a
9409	.ec04		28		plp		                plp
9410	.ec05		2a		rol a		                rol a
9411	.ec06		8d 48 02	sta $0248	                sta vcontrolRegister
9412	.ec09		8d 20 fe	sta $fe20	                sta VCONTROL
9413	.ec0c		80 db		bra $ebe9	                bra LEC8F

9415							;-------------------------------------------------------------------------
9416							;
9417							; OSBYTE 2 (&02) Specify input stream
9418							;
9419							; Input may be taken from either the keyboard (by default) or the
9420							; RS423 port. This call specifies the selection for all subsequent
9421							; input.
9422							;
9423							; Entry parameters :
9424							; X=0 selects keyboard input and disables RS423
9425							; X=1 selects and enables RS423 input
9426							; X=2 selects keyboard input and enables RS423
9427							; Y=0
9428							;
9429							; On exit : X=0 indicates previous input was from the keyboard
9430							;           X=1 indicates previous input was from RS423
9431							;           Y is undefined
9432							;
9433							; D.2-18
9434							                .if version!=400
9435	.ec0e						osbyte02:                       ;ecb4
9436	.ec0e		8a		txa		                txa
9437	.ec0f		29 01		and #$01	                and #$01
9438	.ec11		48		pha		                pha
9439	.ec12		ad 50 02	lda $0250	                lda aciaControlRegister
9440	.ec15		2a		rol a		                rol a
9441	.ec16		e0 01		cpx #$01	                cpx #$01
9442	.ec18		6a		ror a		                ror a
9443	.ec19		cd 50 02	cmp $0250	                cmp aciaControlRegister
9444	.ec1c		08		php		                php
9445	.ec1d		8d 50 02	sta $0250	                sta aciaControlRegister
9446	.ec20		8d 08 fe	sta $fe08	                sta ACIA+0
9447	.ec23		20 e3 e8	jsr $e8e3	                jsr setRS423Active
9448	.ec26		28		plp		                plp
9449	.ec27		f0 03		beq $ec2c	                beq LECD2
9450	.ec29		2c 09 fe	bit $fe09	                bit ACIA+1
9451	.ec2c						LECD2:
9452	.ec2c		ae 41 02	ldx $0241	                ldx inputSource
9453	.ec2f		68		pla		                pla
9454	.ec30		8d 41 02	sta $0241	                sta inputSource
9455	.ec33						LECD9:
9456	.ec33		60		rts		                rts
9457							                .endif

9459							;-------------------------------------------------------------------------
9460							;
9461							; OSBYTE 13 (&0D) Disable event
9462							;
9463							; All events are assigned a unique number and this call provides a
9464							; means of disabling specific events.
9465							;
9466							; Entry parameters:
9467							; X = event number
9468							;
9469							; On exit: X = Y = <old enable state> (0=disabled)
9470	.ec34						osbyte0D:
9471	.ec34		98		tya		                tya             ;A=0

9473							;-------------------------------------------------------------------------
9474							;
9475							; OSBYTE 14 (&0E) Enable event
9476							;
9477							; This call provides a means of enabling specific events.
9478							;
9479							;
9480	.ec35						osbyte0E:
9481	.ec35		e0 0a		cpx #$0a	                cpx #eventMax+1
9482							                .if version!=400
9483	.ec37		b0 b1		bcs $ebea	                bcs LEC90
9486							                .endif
9487	.ec39		bc bf 02	ldy $02bf,x	                ldy eventEnabledFlags,x
9488	.ec3c		9d bf 02	sta $02bf,x	                sta eventEnabledFlags,x
9489							                .if version!=400
9490	.ec3f		80 a8		bra $ebe9	                bra LEC8F
9499							                .endif

9501							;-------------------------------------------------------------------------
9502							;
9503							; OSBYTE 16 (&10) Write number of ADC channels
9504							;
9505							; By default, each of the four ADC channels is sampled and converted
9506							; in turn so that each reading is updated every 40 milliseconds. This
9507							; call enables the number of channels to be changed so that if, for
9508							; example, only two channels are required, each will be updated every
9509							; 20 milliseconds.
9510							;
9511							                .if version!=400
9512	.ec41						osbyte10:
9513							                .if version<500
9514	.ec41		f0 03		beq $ec46	                beq +                        ;taken if X=0
9515	.ec43		20 76 e7	jsr $e776	                jsr osbyte11
9516	.ec46						+
9517							                .endif
9518	.ec46		ad 4d 02	lda $024d	                lda maximumADCChannel
9519	.ec49		8e 4d 02	stx $024d	                stx maximumADCChannel
9520	.ec4c		aa		tax		                tax
9521	.ec4d		60		rts		                rts
9522							                .endif

9524							;-------------------------------------------------------------------------
9525							;
9526							; OSBYTE 129 (&81) Read key with time limit
9527							;
9528							; This call may be used to read a key from the keyboard subject to a
9529							; specified time limit or to perform a keyboard scan for a specified
9530							; key depression.

9532	.ec4e						osbyte81:
9533	.ec4e		98		tya		                tya
9534	.ec4f		30 0a		bmi $ec5b	                bmi LED01          ;taken if scanning for specific key
9535	.ec51		20 8b e7	jsr $e78b	                jsr osbyte81Timed
9536	.ec54		b0 03		bcs $ec59	                bcs LECFF                 ;taken if timed out or error
9537	.ec56		aa		tax		                tax                       ;X = ASCII char
9538	.ec57						LECFD:
9539	.ec57		a9 00		lda #$00	                lda #$00
9540	.ec59						LECFF:
9541	.ec59		a8		tay		                tay
9542	.ec5a		60		rts		                rts

9544	.ec5b						LED01:
9545	.ec5b		8a		txa		                txa
9546	.ec5c		f0 10		beq $ec6e	                beq LED14
9547	.ec5e		49 7f		eor #$7f	                eor #$7F
9548	.ec60		aa		tax		                tax
9549	.ec61		20 2e f6	jsr $f62e	                jsr callKEYV
9550	.ec64		2a		rol a		                rol a
9551							                ; fall through

9553							;-------------------------------------------------------------------------

9555	.ec65						osbyte82:
9556	.ec65		a2 ff		ldx #$ff	                ldx #$FF
9557	.ec67		a0 ff		ldy #$ff	                ldy #$FF
9558	.ec69		b0 02		bcs $ec6d	                bcs LEB13                    ;if OSBYTE $82, done
9559	.ec6b		e8		inx		                inx
9560	.ec6c		c8		iny		                iny
9561	.ec6d						LEB13:
9562	.ec6d		60		rts		                rts

9564	.ec6e						LED14:
9565							                .if version==320
9573							                .elsif version==350
9574	.ec6e		a2 fd		ldx #$fd	                ldx #$fd
9575							                .endif
9576	.ec70		80 e5		bra $ec57	                bra LECFD

9578	.ec72						LED18:
9579							                .if version==400
9581							                .endif
9582	.ec72		8a		txa		                txa
9583	.ec73		49 ff		eor #$ff	                eor #$FF
9584	.ec75		aa		tax		                tax
9585	.ec76		e0 02		cpx #$02	                cpx #$02
9586							                ; fall through

9588							;-------------------------------------------------------------------------

9590	.ec78						countBufferViaCNPV:
9591	.ec78		b8		clv		                clv
9592	.ec79		80 03		bra $ec7e	                bra callCNPV

9594	.ec7b						purgeBufferViaCNPV:
9595	.ec7b		2c 6c e3	bit $e36c	                bit valueFF                  ;V=1
9596	.ec7e						callCNPV:
9597	.ec7e		6c 2e 02	jmp ($022e)	                jmp (CNPV)

9599							;-------------------------------------------------------------------------

9601							                .if version!=400
9602	.ec81						getRS423InputBufferFreeBytes:
9603	.ec81		38		sec		                sec
9604	.ec82		a2 01		ldx #$01	                ldx #bufferRS423Input
9605	.ec84		20 78 ec	jsr $ec78	                jsr countBufferViaCNPV
9606	.ec87		c0 01		cpy #$01	                cpy #$01                     ;check MSB
9607	.ec89		b0 03		bcs $ec8e	                bcs +                        ;if >= 256 bytes, all good
9608	.ec8b		ec 5b 02	cpx $025b	                cpx rs423InputBufferMinimumSpace ;compare to min space
9609	.ec8e						+
9610	.ec8e		60		rts		                rts
9611							                .endif

9613							;-------------------------------------------------------------------------

9615							                .if version!=400
9616	.ec8f						osbyte80:
9617	.ec8f		30 e1		bmi $ec72	                bmi LED18
9618	.ec91		f0 0c		beq $ec9f	                beq LED45
9619							                .if version<500
9620	.ec93		e0 05		cpx #$05	                cpx #$05
9621	.ec95		b0 ce		bcs $ec65	                bcs osbyte82                 ;return with X=$ff Y=$ff
9622	.ec97		bc b9 02	ldy $02b9,x	                ldy adcResultMSBs-1,x
9623	.ec9a		bd b5 02	lda $02b5,x	                lda adcResultLSBs-1,x
9624	.ec9d		aa		tax		                tax
9634							                .endif
9635	.ec9e		60		rts		                rts
9636							                .endif

9638							;-------------------------------------------------------------------------

9640							                .if version!=400
9641	.ec9f						LED45:
9642							                .if version<500
9643							                ; Put joystick buttons in bits 0/1.
9644	.ec9f		ad 40 fe	lda $fe40	                lda systemVIA.irb
9645	.eca2		6a		ror a		                ror a
9646	.eca3		6a		ror a		                ror a
9647	.eca4		6a		ror a		                ror a
9648	.eca5		6a		ror a		                ror a
9649	.eca6		49 ff		eor #$ff	                eor #$FF
9650	.eca8		29 03		and #$03	                and #$03
9651	.ecaa		ac be 02	ldy $02be	                ldy adcLastChannelRead
9652	.ecad		8e be 02	stx $02be	                stx adcLastChannelRead
9653	.ecb0		aa		tax		                tax
9657							                .endif
9658	.ecb1		60		rts		                rts
9659							                .endif

9661							;-------------------------------------------------------------------------
9662							;
9663							; OSBYTE $70
9664							;
9665							; D.2-31
9666							;
9667	.ecb2						osbyte70:                       ;ed58
9668	.ecb2		20 ca ec	jsr $ecca	                jsr osbyte7071
9669	.ecb5		0a		asl a		                asl a
9670	.ecb6		f0 04		beq $ecbc	                beq clearACCCCONE
9671	.ecb8						LED5E:
9672	.ecb8		0c 34 fe	tsb $fe34	                tsb ACCCON
9673	.ecbb		60		rts		                rts

9675	.ecbc						clearACCCCONE:
9676	.ecbc		a9 02		lda #$02	                lda #ACCCON.E
9677	.ecbe						LED64:
9678	.ecbe		1c 34 fe	trb $fe34	                trb ACCCON
9679	.ecc1		60		rts		                rts

9681							;-------------------------------------------------------------------------

9683	.ecc2						osbyte71:                       ;ed68
9684	.ecc2		20 ca ec	jsr $ecca	                jsr osbyte7071
9685	.ecc5		d0 f1		bne $ecb8	                bne LED5E
9686	.ecc7		1a		inc a		                inc a
9687	.ecc8		80 f4		bra $ecbe	                bra LED64

9689							;-------------------------------------------------------------------------
9690							;
9691							; Handle OSBYTE $70 or OSBYTE $71
9692							;
9693							; Entry: A=$70 or $71
9694							;
9695	.ecca						osbyte7071:
9696	.ecca		a8		tay		                tay
9697	.eccb		8a		txa		                txa
9698							                .cerror vduDriverMemory+1!=displayMemory
9699	.eccc		99 1a 02	sta $021a,y	                sta vduDriverMemory-$70,y
9700	.eccf		d0 09		bne $ecda	                bne LED80
9701	.ecd1		a5 d0		lda $d0		                lda STATE
9702	.ecd3		29 10		and #$10	                and #STATE.isShadowMode
9703	.ecd5		f0 06		beq $ecdd	                beq LED83
9704	.ecd7						LED7D:
9705	.ecd7		a9 01		lda #$01	                lda #$01
9706	.ecd9		60		rts		                rts

9708	.ecda						LED80:
9709	.ecda		3a		dec a		                dec a
9710	.ecdb		d0 fa		bne $ecd7	                bne LED7D
9711	.ecdd						LED83:
9712	.ecdd		60		rts		                rts

9714							;-------------------------------------------------------------------------

9716							; OSBYTE &6E (110), &6F (111)
9717							; ===========================
9718							; Pass to sideways ROMs
9719	.ecde						osbyteUnused:                   ;ed84
9720	.ecde		a2 07		ldx #$07	                ldx #romServiceCallUnrecognisedOSBYTE
9721	.ece0		20 c3 ed	jsr $edc3	                jsr makeROMServiceCall
9722	.ece3		a6 f0		ldx $f0		                ldx originalX
9723							                .if version!=400
9724	.ece5		49 00		eor #$00	                eor #$00
9725							                .endif
9726	.ece7		60		rts		                rts

9728							;-------------------------------------------------------------------------

9730							                .if version!=350
9734							                .endif

9736							;-------------------------------------------------------------------------

9738							                .if version!=350
9742							                .endif

9744							;-------------------------------------------------------------------------
9745							;
9746							; OSBYTE 140 (&8C) Select Cassette Filing System [MasRef D.2-43]
9747							; OSBYTE 141 (&8D) Select ROM Filing System [MasRef D.2-43]
9748							;
9749	.ece8						osbyte8C8D:
9750	.ece8		20 0e ed	jsr $ed0e	                jsr selectROMOrTAPEByOSBYTE
9751	.eceb		ad 34 fe	lda $fe34	                lda ACCCON                    ; Save ACCON register
9752	.ecee		48		pha		                pha
9753	.ecef		20 08 ed	jsr $ed08	                jsr selectHAZEL         ; Page Hazel workspace in
9754	.ecf2		ae 01 df	ldx $df01	                ldx hazel.activeFS
9755	.ecf5		8e 00 df	stx $df00	                stx hazel.currentFS
9756	.ecf8		a9 0f		lda #$0f	                lda #terminalROM
9757	.ecfa		8d 03 df	sta $df03	                sta hazel.currentFSROM
9758	.ecfd		68		pla		                pla                          ; Restore ACCON
9759	.ecfe						selectMOSOrHAZEL:                                       ;edb0
9760	.ecfe		29 08		and #$08	                and #ACCCON.Y   ;get just the HAZEL/MOS bit
9761	.ed00		d0 08		bne $ed0a	                bne tsbACCCON   ;branch taken if HAZEL at $c000
9762	.ed02						selectMOS:
9763	.ed02		a9 08		lda #$08	                lda #ACCCON.Y
9764	.ed04		1c 34 fe	trb $fe34	                trb ACCCON      ;page in MOS at $c000
9765	.ed07		60		rts		                rts

9767	.ed08						selectHAZEL:
9768	.ed08		a9 08		lda #$08	                lda #ACCCON.Y
9769	.ed0a						tsbACCCON:
9770	.ed0a		0c 34 fe	tsb $fe34	                tsb ACCCON      ;page in HAZEL at $c000
9771	.ed0d		60		rts		                rts

9773							;-------------------------------------------------------------------------

9775							                .if version==400
9779							                .endif

9781							;-------------------------------------------------------------------------
9782							;
9783							; Select ROM or TAPE.
9784							;
9785							; Two entry points: selectROMOrTAPEByOSBYTE picks FS by OSBYTE number
9786							; ($8c=TAPE, $8d=ROM), and selectROMOrTAPE picks FS by number (0=TAPE,
9787							; 1=ROM).
9788							;
9789							; entry:
9790							;
9791							; A = FS to select
9792							;
9793	.ed0e						selectROMOrTAPEByOSBYTE:
9794							                .if version==400
9805							                .else

9807	.ed0e		49 8c		eor #$8c	                eor #$8C                     ;A=0 if tape, A=1 if ROM
9808	.ed10						selectROMOrTAPE:
9809	.ed10		0a		asl a		                asl a           ; Set CFS/RFS switch to 0=CFS or 2=RFS
9810	.ed11		8d 47 02	sta $0247	                sta cfsRFSFSSwitch
9811	.ed14		d0 04		bne $ed1a	                bne LEDCC                    ;taken if ROM
9812	.ed16		a9 04		lda #$04	                lda #$04                     ; CFS, clear b2 of status
9813	.ed18		14 e2		trb $e2		                trb $E2
9814	.ed1a						LEDCC:
9815	.ed1a		e0 03		cpx #$03	                cpx #$03                     ; EQ=TAPE 300, NE=TAPE 1200
9816	.ed1c		80 09		bra $ed27	                bra LEDD6

9818	.ed1e						LEDD0:
9819							                .if version==350
9820	.ed1e		20 6a f3	jsr $f36a	                jsr callWithTST
9821							                .endif
9822	.ed21		20 b5 ed	jsr $edb5	                jsr LEE64
9823	.ed24		20 61 f1	jsr $f161	                jsr LF1EE
9824	.ed27						LEDD6:
9825	.ed27		08		php		                php                          ; Save baud flag in Carry
9826	.ed28		a9 06		lda #$06	                lda #$06                     ; Vectors about to change
9827	.ed2a		20 5e f1	jsr $f15e	                jsr callFSCV
9828	.ed2d		ad 47 02	lda $0247	                lda cfsRFSFSSwitch           ; Jump if RFS selected
9829	.ed30		d0 0d		bne $ed3f	                bne LEDEE
9830	.ed32		a2 06		ldx #$06	                ldx #$06                     ; Prepare baud=6 for TAPE300
9831	.ed34		28		plp		                plp                          ; Skip past if TAPE300
9832	.ed35		f0 05		beq $ed3c	                beq LEDEB
9833	.ed37		a9 04		lda #$04	                lda #$04                     ; TAPE1200, set bit 2 of status
9834	.ed39		04 e2		tsb $e2		                tsb $E2
9835	.ed3b		ca		dex		                dex                          ; Change to baud=5 for TAPE1200
9836	.ed3c						LEDEB:
9837	.ed3c		86 c6		stx $c6		                stx $C6                      ; Store baud rate setting
9838	.ed3e		08		php		                php
9839	.ed3f						LEDEE:
9840	.ed3f		64 ce		stz $ce		                stz $CE                      ; Clear byte (unused on BBC)
9841	.ed41		28		plp		                plp
9842							                .endif

9844	.ed42		a2 0e		ldx #$0e	                ldx #defaultVectorTable.fsVectors.end-defaultVectorTable.fsVectors ; Prepare to set 7 vectors
9845	.ed44						LEDF3:
9846	.ed44		bd 06 e3	lda $e306,x	                lda defaultVectorTable.fsVectors-1,x ; Set filing
9847							                                                     ; system vectors
9848							                                                     ; to point to
9849							                                                     ; extended
9850							                                                     ; vectors
9851	.ed47		9d 11 02	sta $0211,x	                sta FILEV-1,x
9852	.ed4a		ca		dex		                dex
9853	.ed4b		d0 f7		bne $ed44	                bne LEDF3
9854	.ed4d		20 61 f1	jsr $f161	                jsr LF1EE                    ; Set extended vectors
9855	.ed50		64 c2		stz $c2		                stz $C2                      ; Set Progress=idle
9856	.ed52		a2 0f		ldx #$0f	                ldx #romServiceCallVectorsClaimed ; Send service call &0F - vectors changed

9858							;-------------------------------------------------------------------------
9859							;
9860							; OSBYTE 143 (&8F) Issue paged ROM service request [MasRef D.2-44]
9861							;
9862	.ed54						osbyte8F: .proc                    ;ee03
9863	.ed54		5a		phy		                phy
9864	.ed55		da		phx		                phx                          ; Send service call
9865	.ed56		20 c3 ed	jsr $edc3	                jsr makeROMServiceCall
9866	.ed59		fa		plx		                plx
9867	.ed5a		e0 0f		cpx #$0f	                cpx #romServiceCallVectorsClaimed ; If VectorsClaimed,
9868							                                                  ; hook FileSwitch
9869							                                                  ; back in
9870	.ed5c		f0 36		beq $ed94	                beq handleVectorsClaimed
9871	.ed5e		1a		inc a		                inc a       ; If claimed, check for
9872							                            ; InitialiseFilingSystem or
9873							                            ; UnrecognisedCommand
9874	.ed5f		3a		dec a		                dec a       ;Z=1 if claimed
9875	.ed60		f0 03		beq $ed65	                beq wasClaimed  ;branch taken if claimed
9876	.ed62						done:
9877	.ed62		fa		plx		                plx             ; Return with result in X, EQ=Claimed
9878	.ed63		aa		tax		                tax
9879	.ed64		60		rts		                rts

9881	.ed65						wasClaimed:
9882	.ed65		e0 12		cpx #$12	                cpx #romServiceCallInitialiseFilingSystem
9883	.ed67		f0 04		beq $ed6d	                beq +
9884	.ed69		e0 04		cpx #$04	                cpx #romServiceCallUnrecognisedCommand
9885	.ed6b		d0 f5		bne $ed62	                bne done
9886	.ed6d						+

9888							; handle InitialiseFilingSystem ($12) or UnrecognisedCommand ($04)

9890	.ed6d		7a		ply		                ply                     ;Y=service call arg
9891	.ed6e		48		pha		                pha                     ;save A (though actually it's
9892							                                        ;always $00...)
9893	.ed6f		ad 34 fe	lda $fe34	                lda ACCCON
9894	.ed72		48		pha		                pha                     ;save ACCCON
9895	.ed73		20 08 ed	jsr $ed08	                jsr selectHAZEL
9896	.ed76		38		sec		                sec
9897	.ed77		6e 00 df	ror $df00	                ror hazel.currentFS ;set currentFS bit 7
9898	.ed7a						LEE29:
9899	.ed7a		5a		phy		                phy             ;save ROM service call argument
9900	.ed7b		a9 00		lda #$00	                lda #$00
9901	.ed7d		a8		tay		                tay
9902	.ed7e		20 62 f7	jsr $f762	                jsr callARGSV   ;A=0, Y=0 - get active FS number
9903	.ed81		8d 01 df	sta $df01	                sta hazel.activeFS ;save active FS number
9904	.ed84		2c 00 df	bit $df00	                bit hazel.currentFS
9905	.ed87		10 03		bpl $ed8c	                bpl LEE3B
9906	.ed89		20 82 f1	jsr $f182	                jsr osbyte6D
9907	.ed8c						LEE3B:
9908	.ed8c		7a		ply		                ply
9909	.ed8d		68		pla		                pla
9910	.ed8e		20 fe ec	jsr $ecfe	                jsr selectMOSOrHAZEL
9911	.ed91		68		pla		                pla
9912	.ed92		aa		tax		                tax
9913	.ed93		60		rts		                rts

9915	.ed94						handleVectorsClaimed:
9916	.ed94		7a		ply		                ply
9917	.ed95		48		pha		                pha
9918	.ed96		ad 34 fe	lda $fe34	                lda ACCCON
9919	.ed99		48		pha		                pha
9920	.ed9a		20 08 ed	jsr $ed08	                jsr selectHAZEL
9921	.ed9d		ad 1e 02	lda $021e	                lda FSCV+0
9922	.eda0		8d da df	sta $dfda	                sta hazel.activeFSCV+0
9923	.eda3		ad 1f 02	lda $021f	                lda FSCV+1
9924	.eda6		8d db df	sta $dfdb	                sta hazel.activeFSCV+1
9925	.eda9		a9 b3		lda #$b3	                lda #<fileswitchFSCEntryPoint
9926	.edab		8d 1e 02	sta $021e	                sta FSCV+0
9927	.edae		a9 f8		lda #$f8	                lda #>fileswitchFSCEntryPoint
9928	.edb0		8d 1f 02	sta $021f	                sta FSCV+1
9929	.edb3		80 c5		bra $ed7a	                bra LEE29
9930							                .pend

9932							;-------------------------------------------------------------------------

9934	.edb5						LEE64:
9935	.edb5		a9 a1		lda #$a1	                lda #$A1
9936	.edb7		85 e3		sta $e3		                sta $E3
9937	.edb9		a9 19		lda #$19	                lda #$19
9938	.edbb		8d d1 03	sta $03d1	                sta $03D1
9939	.edbe		a9 04		lda #$04	                lda #$04
9940	.edc0		04 e2		tsb $e2		                tsb $E2
9941	.edc2		60		rts		                rts

9943							;-------------------------------------------------------------------------
9944							;
9945							; Pass service call around sideways ROMs
9946							;
9947							; Entry:
9948							; X=service call number
9949							; Y=any parameters
9950							;
9951							; Exit:
9952							; X=0 or preserved
9953							; Y=any returned parameters
9954							; EQ=call claimed if called directly
9955							;
9956	.edc3						makeROMServiceCall: .proc                    ;ee72
9957	.edc3		a5 f4		lda $f4		                lda $F4         ; Save current ROM
9958	.edc5		48		pha		                pha
9959	.edc6		ad 34 fe	lda $fe34	                lda ACCCON      ; Save current paging state
9960	.edc9		48		pha		                pha
9961	.edca		20 08 ed	jsr $ed08	                jsr selectHAZEL ; Page in Hazel
9962	.edcd		8a		txa		                txa             ; Pass service call number to A
9963	.edce		a2 0f		ldx #$0f	                ldx #$0F     ; Start at ROM 15, and always call ROM 15
9964	.edd0		80 05		bra $edd7	                bra callServiceEntry
9965	.edd2						callServiceEntriesLoop:
9966	.edd2		3c a1 02	bit $02a1,x	                bit romInformationTable,x ;check if ROM X has a service entry
9967	.edd5		10 0b		bpl $ede2	                bpl nextROM       ;branch taken if no service entry
9968	.edd7						callServiceEntry:
9969	.edd7		20 59 e5	jsr $e559	                jsr selectROMX  ; Page in ROM X
9970	.edda		20 03 80	jsr $8003	                jsr $8003       ; Call ROM service entry point
9971	.eddd		aa		tax		                tax             ; X = service call result
9972	.edde		f0 05		beq $ede5	                beq done       ;branch taken if service call claimed
9973	.ede0		a6 f4		ldx $f4		                ldx $F4         ; Get ROM number
9974	.ede2						nextROM:
9975	.ede2		ca		dex		                dex       ; Step down to next ROM, loop until all done
9976	.ede3		10 ed		bpl $edd2	                bpl callServiceEntriesLoop

9978	.ede5						done:
9979	.ede5		68		pla		                pla                          ; Restore paging state
9980	.ede6		20 fe ec	jsr $ecfe	                jsr selectMOSOrHAZEL
9981	.ede9		68		pla		                pla                          ; Restore current ROM
9982	.edea		20 6a e5	jsr $e56a	                jsr selectROMA
9983	.eded		8a		txa		                txa                          ; Pass claim/noclaim to A
9984	.edee		60		rts		                rts
9985							                .pend

9987							;-------------------------------------------------------------------------

9989							; OSBYTE &6B (107) - Select memory for direct access
9990							; ==============================================
9991	.edef						osbyte6B:                       ;ee9e
9992	.edef		a0 20		ldy #$20	                ldy #$20                     ; Y=&20 to change 1MHz bit
9993	.edf1		80 02		bra $edf5	                bra LEEA4

9995							;-------------------------------------------------------------------------

9997							; OSBYTE &6C (108) - Select memory for direct access
9998							; ==============================================
9999	.edf3						osbyte6C:
10000	.edf3		a0 04		ldy #$04	                ldy #ACCCON.X                ; Y=&04 to change RAM bit
10001	.edf5						LEEA4:
10002	.edf5		98		tya		                tya                          ; Clear RAM or 1MHz bit
10003	.edf6		1c 34 fe	trb $fe34	                trb ACCCON
10004	.edf9		8a		txa		                txa                          ; If X=0, exit with normal RAM/1MHz selected
10005	.edfa		f0 04		beq $ee00	                beq LEEB0
10006							                .if version==350
10007	.edfc		98		tya		                tya
10010							                .endif
10011	.edfd		0c 34 fe	tsb $fe34	                tsb ACCCON                   ; Page in shadow RAM
10012	.ee00						LEEB0:
10013	.ee00		60		rts		                rts                          ; X preserved, Y=&04 or &20

10015							;-------------------------------------------------------------------------

10017							osword06Macro: .macro
10024							                .endmacro

10026							LEF1BMacro: .macro
10038							                .endmacro

10040							;-------------------------------------------------------------------------

10042							                .if version>=350
10043	.ee01						osword06:
10018	.ee01		20 d3 ee	jsr $eed3	                jsr getAddressFromOSWORDParameterBlock
10019	.ee04		b1 f0		lda ($f0),y	                lda (originalX),y
10020	.ee06		92 fa		sta ($fa)	                sta (SEIWKA)
10021	.ee08						ret:
10022	.ee08		a9 00		lda #$00	                lda #$00
10023	.ee0a		60		rts		                rts
10044	.ee0b						LEF1B:
10027	.ee0b		a5 eb		lda $eb		                lda $EB
10028	.ee0d		30 f9		bmi $ee08	                bmi osword06.ret
10029	.ee0f		ad 57 02	lda $0257	                lda spoolFileHandle
10030	.ee12		d0 f4		bne $ee08	                bne osword06.ret
10031	.ee14		a9 08		lda #$08	                lda #$08
10032	.ee16		25 e2		and $e2		                and $E2
10033	.ee18		d0 04		bne $ee1e	                bne LEF2E
10034	.ee1a		a9 88		lda #$88	                lda #$88
10035	.ee1c		25 bb		and $bb		                and $BB
10036	.ee1e						LEF2E:
10037	.ee1e		60		rts		                rts
10045							                .endif

10047							;-------------------------------------------------------------------------

10049							                .if version>=500
10082							                .endif

10084							;-------------------------------------------------------------------------

10086							                .if version>=350
10087	.ee1f						osword0E:
10088	.ee1f		c9 03		cmp #$03	                cmp #3
10089	.ee21		b0 76		bcs $ee99	                bcs handleUnrecognisedOSWORD
10090	.ee23		20 24 f3	jsr $f324	                jsr withTerminalROM
10091	.ee26		4c 97 95	jmp $9597	                jmp terminal.osword0E
10092							                .endif

10094							;-------------------------------------------------------------------------

10096							                .if version>=500||version==350
10097	.ee29						LEF85:
10098	.ee29		28		plp		                plp
10099	.ee2a		68		pla		                pla
10100	.ee2b		2c 6c e3	bit $e36c	                bit valueFF
10101	.ee2e		60		rts		                rts
10102							                .endif

10104							;-------------------------------------------------------------------------


10107							; OSBYTE
10108							; ======
10109	.ee2f						osbyteEntryPoint:
10110	.ee2f		48		pha		                pha
10111	.ee30		08		php		                php
10112	.ee31		78		sei		                sei
10113	.ee32		85 ef		sta $ef		                sta originalA
10114	.ee34		86 f0		stx $f0		                stx originalX
10115	.ee36		84 f1		sty $f1		                sty originalY
10116	.ee38		a2 07		ldx #$07	                ldx #romServiceCallUnrecognisedOSBYTE
10117	.ee3a		c9 6b		cmp #$6b	                cmp #$6B
10118	.ee3c		90 4b		bcc $ee89	                bcc osbyte00To6A
10119	.ee3e		c9 a6		cmp #$a6	                cmp #$A6
10120	.ee40		90 09		bcc $ee4b	                bcc osbyte6BToA5
10121	.ee42		c9 a6		cmp #$a6	                cmp #$A6
10122	.ee44		90 57		bcc $ee9d	                bcc handleUnrecognisedOSBYTEOrOSWORD       ;??? - wait... didn't we just do this?

10124	.ee46						osbyteA6ToFF:
10125	.ee46		18		clc		                clc
10126	.ee47						osbyteOrUSERV:      ;call OSBYTE A6+ routine if C=0; call USERV if C=1
10127	.ee47		a9 a6		lda #$a6	                lda #$A6
10128	.ee49		69 00		adc #$00	                adc #$00
10129							                .if version<350
10132							                .elsif version>=350
10133	.ee4b						osbyte6BToA5:
10134	.ee4b		e9 24		sbc #$24	                sbc #$24
10135	.ee4d						LEFA9:
10136	.ee4d		e9 2a		sbc #$2a	                sbc #$2A
10137							                .endif
10138	.ee4f						osbyteUseTable:
10139	.ee4f		0a		asl a		                asl a           ;table is of words
10140	.ee50		38		sec		                sec
10141	.ee51						callOSBYTEOrOSWORDFromTable:
10142	.ee51		84 f1		sty $f1		                sty originalY
10143	.ee53		a8		tay		                tay             ;get table offset in Y
10144	.ee54		2c 5e 02	bit $025e	                bit econetInterceptionStatus
10145	.ee57		10 07		bpl $ee60	                bpl LEEE0             ;taken if no Econet interception
10146	.ee59		8a		txa		                txa
10147							                .cerror (netOSBYTEAttempted!=romServiceCallUnrecognisedOSBYTE),"net/rom reason codes mismatch"
10148							                .cerror (netOSWORDAttempted!=romServiceCallUnrecognisedOSWORD),"net/rom reason codes mismatch"
10149	.ee5a		b8		clv		                clv
10150	.ee5b		20 0c eb	jsr $eb0c	                jsr callNETV
10151	.ee5e		70 23		bvs $ee83	                bvs LEEFA
10152	.ee60						LEEE0:
10153							                .if version>=500
10157							                .elsif version==350
10158	.ee60		a6 f4		ldx $f4		                ldx $f4
10159	.ee62		20 68 e5	jsr $e568	                jsr selectTerminalROM
10160							                .endif
10161							                .if version==350
10162	.ee65		b9 b9 8d	lda $8db9,y	                lda osbyteAndOSWORDRoutineTable,y
10163	.ee68		85 fa		sta $fa		                sta SEIWKA
10164	.ee6a		b9 ba 8d	lda $8dba,y	                lda osbyteAndOSWORDRoutineTable+1,y
10165	.ee6d		85 fb		sta $fb		                sta SEIWKB
10171							                .endif
10172							                .if version>=500
10175							                .elsif version==350
10176	.ee6f		20 59 e5	jsr $e559	                jsr selectROMX
10177	.ee72		29 40		and #$40	                and #$40
10178	.ee74		aa		tax		                tax
10179							                .endif
10180	.ee75		a5 ef		lda $ef		                lda originalA
10181	.ee77		a4 f1		ldy $f1		                ldy originalY
10182	.ee79		b0 04		bcs $ee7f	                bcs +
10183	.ee7b		a0 00		ldy #$00	                ldy #$00            ;??? - is this actually desirable?
10184	.ee7d		b2 f0		lda ($f0)	                lda ($F0)           ;fetch 0th byte of parameter block
10185	.ee7f						+
10186	.ee7f		38		sec		                sec
10187							                .if version==350
10188	.ee80		20 a6 f1	jsr $f1a6	                jsr LF198
10195							                .endif
10196	.ee83						LEEFA:
10197	.ee83		6a		ror a		                ror a
10198	.ee84		28		plp		                plp
10199	.ee85		2a		rol a		                rol a
10200	.ee86		68		pla		                pla
10201	.ee87		b8		clv		                clv
10202	.ee88		60		rts		                rts

10204	.ee89						osbyte00To6A:
10205	.ee89		a0 00		ldy #$00	                ldy #$00        ;Y=0 on entry for this lot
10206	.ee8b		c9 1a		cmp #$1a	                cmp #$1A        ;OSBYTE <=$19 is table-driven
10207	.ee8d		90 c0		bcc $ee4f	                bcc osbyteUseTable ;taken if OSBYTE $00-$19
10208							                .if version>=350
10209	.ee8f		c9 44		cmp #$44	                cmp #$44
10210	.ee91		f0 ba		beq $ee4d	                beq LEFA9
10211	.ee93		c9 45		cmp #$45	                cmp #$45
10212	.ee95		f0 b6		beq $ee4d	                beq LEFA9
10213							                .endif
10214	.ee97		80 04		bra $ee9d	                bra handleUnrecognisedOSBYTEOrOSWORD

10216	.ee99						handleUnrecognisedOSWORD:
10217	.ee99		a2 08		ldx #$08	                ldx #romServiceCallUnrecognisedOSWORD
10218	.ee9b		68		pla		                pla
10219	.ee9c		68		pla		                pla
10220	.ee9d						handleUnrecognisedOSBYTEOrOSWORD:
10221	.ee9d		20 c3 ed	jsr $edc3	                jsr makeROMServiceCall
10222							                .if version<500&&version!=350
10224							                .else
10225	.eea0		d0 87		bne $ee29	                bne LEF85
10226							                .endif
10227	.eea2		a6 f0		ldx $f0		                ldx originalX
10228	.eea4		80 dd		bra $ee83	                bra LEEFA
10229							                .if version<500&&version!=350
10235							                .endif

10237							;-------------------------------------------------------------------------

10239							                .if version<350
10241							                .endif

10243							;-------------------------------------------------------------------------
10244							;
10245							; OSWORD 14 (&0E) Read CMOS clock [MasRef D.3-22]
10246							;
10247							                .if version<350
10253							                .endif

10255							;-------------------------------------------------------------------------
10256							;
10257							; Entry point for OSWORD.
10258							;
10259							; D.3-3
10260							;
10261							                .if version<500
10262	.eea6						oswordEntryPoint:
10263	.eea6		48		pha		                pha             ;save OSWORD request
10264	.eea7		08		php		                php
10265	.eea8		78		sei		                sei
10266	.eea9		85 ef		sta $ef		                sta originalA
10267	.eeab		86 f0		stx $f0		                stx originalX
10268	.eead		84 f1		sty $f1		                sty originalY
10269	.eeaf		a2 08		ldx #$08	                ldx #romServiceCallUnrecognisedOSWORD
10270	.eeb1		c9 e0		cmp #$e0	                cmp #$E0
10271	.eeb3		b0 92		bcs $ee47	                bcs osbyteOrUSERV ;taken if OSWORD $E0 or higher -
10272							                                  ;these go via USERV

10274							                .if version<350
10285							                .else

10287	.eeb5		c9 10		cmp #$10	                cmp #16
10288	.eeb7		90 0d		bcc $eec6	                bcc LED4D
10289	.eeb9		c9 44		cmp #$44	                cmp #$44
10290	.eebb		b0 e0		bcs $ee9d	                bcs handleUnrecognisedOSBYTEOrOSWORD
10291	.eebd		c9 42		cmp #$42	                cmp #$42
10292	.eebf		b0 03		bcs $eec4	                bcs LED4B
10293	.eec1		38		sec		                sec
10294	.eec2		80 d9		bra $ee9d	                bra handleUnrecognisedOSBYTEOrOSWORD

10296	.eec4						LED4B:
10297	.eec4		e9 33		sbc #$33	                sbc #$33
10298	.eec6						LED4D:
10299	.eec6		69 59		adc #$59	                adc #$59
10300	.eec8		0a		asl a		                asl a
10301	.eec9		80 86		bra $ee51	                bra callOSBYTEOrOSWORDFromTable
10302							                .endif
10303							                .endif

10305							;-------------------------------------------------------------------------
10306							;
10307							; OSWORD 5 (&05) Read byte from I/O processor memory [MasRef D.3-9]
10308							;
10309	.eecb						osword05:
10310	.eecb		20 d3 ee	jsr $eed3	                jsr getAddressFromOSWORDParameterBlock
10311	.eece		b2 fa		lda ($fa)	                lda (SEIWKA)                 ;read byte from the address
10312	.eed0		91 f0		sta ($f0),y	                sta (originalX),y                  ;update parameter block
10313	.eed2		60		rts		                rts

10315							;-------------------------------------------------------------------------
10316							;
10317							; OSWORD 6 (&06) Write byte to I/O processor memory [MasRef D.3-9]
10318							;

10320							                .if version<350
10322							                .endif

10324							;-------------------------------------------------------------------------
10325							;
10326							; Get address from OSWORD parameter block.
10327							;
10328							; entry:
10329							;
10330							; A = 0th byte of parameter block
10331							;
10332							; Y = 0
10333							;
10334							; (originalX) = parameter block
10335							;
10336							; exit:
10337							;
10338							; (SEIWKA) = address, first two bytes from parameter block
10339							;
10340							; Y = 4 (this is just convenient for both callers)
10341							;
10342	.eed3						getAddressFromOSWORDParameterBlock:
10343	.eed3		85 fa		sta $fa		                sta SEIWKA
10344	.eed5		c8		iny		                iny
10345	.eed6		b1 f0		lda ($f0),y	                lda (originalX),y
10346	.eed8		85 fb		sta $fb		                sta SEIWKA+1
10347	.eeda		a0 04		ldy #$04	                ldy #$04
10348	.eedc						ldxim03_rts:
10349							                .if version<400
10350	.eedc		a2 03		ldx #$03	                ldx #$03
10355							                .endif
10356	.eede		60		rts		                rts

10358							;-------------------------------------------------------------------------
10359							;
10360							; OSBYTE 0 (&00) Display MOS version
10361							;
10362							; OSBYTE 0 has the effect of performing a BRK instruction and
10363							; displaying the MOS version number.
10364							;
10365							; Entry parameters :
10366							;
10367							; X=0 executes a BRK and displays the OS version
10368							;
10369							; X=1 executes an RTS and returns the Operating system version
10370							;
10371							; On exit : X=<OS version>
10372							;
10373							; D.2-18
10374							;
10375	.eedf						osbyte00:                       ;ef6f
10376	.eedf		d0 fb		bne $eedc	                bne ldxim03_rts ;branch taken if X<>0 - return with
10377							                                 ;X=3

10379							; do a BRK and print MOS version number.

10381	.eee1		00		brk #		                brk
10382	>eee2		f7				                .byte $f7
10383							                .if version==320
10401							                .elsif version==350
10402							                .if CFA3000
10403	>eee3		4d 4f 53 20 33 2e 35 61		                .text "MOS 3.5a"
10408							                .endif
10409							                .endif
10410	>eeeb		00				                .byte 0

10412							;-------------------------------------------------------------------------
10413							;
10414							; OSWORD 7 (&07) Generate a sound [MasRef D.3-10]
10415							;
10416	.eeec						osword07:
10417	.eeec		c8		iny		                iny
10418	.eeed		b1 f0		lda ($f0),y	                lda ($F0),y
10419	.eeef		c9 20		cmp #$20	                cmp #$20
10420	.eef1		b0 a6		bcs $ee99	                bcs handleUnrecognisedOSWORD
10421	.eef3		88		dey		                dey
10422	.eef4		20 67 ef	jsr $ef67	                jsr LEFF6
10423	.eef7		09 04		ora #$04	                ora #$04
10424	.eef9		aa		tax		                tax
10425	.eefa		90 05		bcc $ef01	                bcc LEF90
10426	.eefc		20 32 e9	jsr $e932	                jsr LE95A
10427	.eeff		a0 01		ldy #$01	                ldy #$01
10428	.ef01						LEF90:
10429	.ef01		20 67 ef	jsr $ef67	                jsr LEFF6
10430	.ef04		85 fa		sta $fa		                sta $FA
10431	.ef06		08		php		                php
10432	.ef07		a0 06		ldy #$06	                ldy #$06
10433	.ef09		b1 f0		lda ($f0),y	                lda ($F0),y
10434	.ef0b		48		pha		                pha
10435	.ef0c		a0 04		ldy #$04	                ldy #$04
10436	.ef0e		b1 f0		lda ($f0),y	                lda ($F0),y
10437	.ef10		48		pha		                pha
10438	.ef11		a0 02		ldy #$02	                ldy #$02
10439	.ef13		b1 f0		lda ($f0),y	                lda ($F0),y
10440	.ef15		2a		rol a		                rol a
10441	.ef16		3a		dec a		                dec a
10442	.ef17		3a		dec a		                dec a
10443	.ef18		0a		asl a		                asl a
10444	.ef19		0a		asl a		                asl a
10445	.ef1a		05 fa		ora $fa		                ora $FA
10446	.ef1c		20 7b e9	jsr $e97b	                jsr LE9A3
10447	.ef1f		90 1e		bcc $ef3f	                bcc LEFCE
10448	.ef21		68		pla		                pla
10449	.ef22		68		pla		                pla
10450	.ef23		28		plp		                plp

10452							                ; WTF... fall through to OSBYTE $75!

10454							;-------------------------------------------------------------------------
10455							;
10456							; OSBYTE 117 (&75) Read VDU status [MasRef D.2-32]
10457							;
10458	.ef24						osbyte75:
10459	.ef24		a6 d0		ldx $d0		                ldx STATE
10460	.ef26		60		rts		                rts

10462							;-------------------------------------------------------------------------
10463							;
10464							; VDU 7 (&07) Produce BELL sound [MasRef E.3-4]
10465							;
10466	.ef27						vdu7EntryPoint:
10467	.ef27		08		php		                php
10468	.ef28		78		sei		                sei
10469	.ef29		ad 63 02	lda $0263	                lda bellChannel
10470	.ef2c		29 07		and #$07	                and #$07
10471	.ef2e		09 04		ora #$04	                ora #$04
10472	.ef30		aa		tax		                tax
10473	.ef31		ad 64 02	lda $0264	                lda bellSound
10474	.ef34		20 12 ea	jsr $ea12	                jsr callINSV
10475	.ef37		ad 66 02	lda $0266	                lda bellDuration
10476	.ef3a		48		pha		                pha
10477	.ef3b		ad 65 02	lda $0265	                lda bellFrequency
10478	.ef3e		48		pha		                pha
10479	.ef3f						LEFCE:
10480	.ef3f		38		sec		                sec
10481	.ef40		7e 00 08	ror $0800,x	                ror $0800,x
10482	.ef43		68		pla		                pla
10483	.ef44		20 12 ea	jsr $ea12	                jsr callINSV
10484	.ef47		68		pla		                pla
10485	.ef48		20 12 ea	jsr $ea12	                jsr callINSV
10486	.ef4b		28		plp		                plp
10487	.ef4c		60		rts		                rts

10489							;-------------------------------------------------------------------------
10490							;
10491							; OSWORD 8 (&08) Define a sound envelope [MasRef D.3-14]
10492							;
10493	.ef4d						osword08:
10494	.ef4d		3a		dec a		                dec a                   ;get index of 1-based envelope
10495	.ef4e		0a		asl a		                asl a
10496	.ef4f		0a		asl a		                asl a
10497	.ef50		0a		asl a		                asl a
10498	.ef51		0a		asl a		                asl a                        ;index*16
10499	.ef52		09 0f		ora #$0f	                ora #$0F                     ;index*16+15
10500	.ef54		aa		tax		                tax                          ;
10501	.ef55		a9 00		lda #$00	                lda #$00                     ;
10502	.ef57		a0 10		ldy #$10	                ldy #16             ;16 bytes of envelope data get set
10503	.ef59						-
10504	.ef59		c0 0e		cpy #$0e	                cpy #$0E                     ;
10505	.ef5b		b0 02		bcs $ef5f	                bcs + ;taken if last 2 bytes of data - they get initialized to $00
10506	.ef5d		b1 f0		lda ($f0),y	                lda (originalX),y        ;fetch byte from OSWORD block
10507	.ef5f						+
10508	.ef5f		9d c0 08	sta $08c0,x	                sta envelope1Data,x          ;set envelope data bytes
10509	.ef62		ca		dex		                dex
10510	.ef63		88		dey		                dey
10511	.ef64		d0 f3		bne $ef59	                bne -
10512	.ef66		60		rts		                rts

10514							;-------------------------------------------------------------------------

10516	.ef67						LEFF6:
10517	.ef67		b1 f0		lda ($f0),y	                lda ($F0),y
10518	.ef69		c9 10		cmp #$10	                cmp #$10
10519	.ef6b		29 03		and #$03	                and #$03
10520	.ef6d		c8		iny		                iny
10521	.ef6e		60		rts		                rts

10523							;-------------------------------------------------------------------------
10524							;
10525							; OSWORD 3 (&03) Read interval timer [MasRef D.3-8]
10526							;
10527	.ef6f						osword03:
10528	.ef6f		a2 0f		ldx #$0f	                ldx #$0F
10529	.ef71		80 03		bra $ef76	                bra LF005

10531							;-------------------------------------------------------------------------
10532							;
10533							; OSWORD 1 (&01) Read system clock [MasRef D.3-7]
10534							;
10535	.ef73						osword01:
10536	.ef73		ae 83 02	ldx $0283	                ldx timerSwitchState
10537	.ef76						LF005:
10538	.ef76		a0 04		ldy #$04	                ldy #$04
10539	.ef78						-
10540	.ef78		bd 8d 02	lda $028d,x	                lda timer0-initialTimerSwitchState,x
10541	.ef7b		91 f0		sta ($f0),y	                sta (originalX),y
10542	.ef7d		e8		inx		                inx
10543	.ef7e		88		dey		                dey
10544	.ef7f		10 f7		bpl $ef78	                bpl -
10545	.ef81						rtsF010:
10546	.ef81		60		rts		                rts

10548							;-------------------------------------------------------------------------
10549							;
10550							; OSWORD 4 (&04) Write interval timer [MasRef D.3-9]
10551							;
10552	.ef82						osword04:
10553	.ef82		a9 0f		lda #$0f	                lda #intervalTimer-(timer0-initialTimerSwitchState)
10554	.ef84		80 06		bra $ef8c	                bra copyTIMEValue

10556							;-------------------------------------------------------------------------
10557							;
10558							; OSWORD 2 (&02) Write system clock [MasRef D.3-8]
10559							;
10560	.ef86						osword02:
10561	.ef86		ad 83 02	lda $0283	                lda timerSwitchState
10562	.ef89		49 0f		eor #$0f	                eor #$0F       ;select the timer that isn't being used
10563	.ef8b		18		clc		                clc
10564	.ef8c						copyTIMEValue:
10565	.ef8c		48		pha		                pha
10566	.ef8d		aa		tax		                tax
10567	.ef8e		a0 04		ldy #$04	                ldy #$04
10568	.ef90						-
10569	.ef90		b1 f0		lda ($f0),y	                lda (originalX),y
10570	.ef92		9d 8d 02	sta $028d,x	                sta timer0-initialTimerSwitchState,x
10571	.ef95		e8		inx		                inx
10572	.ef96		88		dey		                dey
10573	.ef97		10 f7		bpl $ef90	                bpl -
10574	.ef99		68		pla		                pla
10575	.ef9a		b0 e5		bcs $ef81	                bcs rtsF010
10576	.ef9c		8d 83 02	sta $0283	                sta timerSwitchState
10577	.ef9f		60		rts		                rts

10579							;-------------------------------------------------------------------------
10580							;
10581							; OSWORD 0 (&00) Read line from input stream to memory [MasRef D.3-6]
10582							;
10583	.efa0						osword00:
10584	.efa0		a0 04		ldy #$04	                ldy #$04
10585	.efa2						LF031:
10586	.efa2		b1 f0		lda ($f0),y	                lda (originalX),y
10587							                .cerror osword0MaxLineLength+1!=osword0MinASCIICharacter
10588							                .cerror osword0MinASCIICharacter+1!=osword0MaxASCIICharacter
10589	.efa4		99 b1 02	sta $02b1,y	                sta osword0MaxLineLength-2,y
10590	.efa7		88		dey		                dey
10591	.efa8		c0 02		cpy #$02	                cpy #$02
10592	.efaa		b0 f6		bcs $efa2	                bcs LF031
10593	.efac		b1 f0		lda ($f0),y	                lda ($F0),y
10594	.efae		85 e9		sta $e9		                sta $E9
10595	.efb0		88		dey		                dey
10596	.efb1		9c 69 02	stz $0269	                stz pagedModeCounter
10597	.efb4		b2 f0		lda ($f0)	                lda ($F0)
10598	.efb6		85 e8		sta $e8		                sta $E8
10599	.efb8		58		cli		                cli
10600	.efb9		80 07		bra $efc2	                bra LF051

10602	.efbb						LF04A:
10603	.efbb		a9 07		lda #$07	                lda #$07
10604	.efbd						LF04C:
10605	.efbd		88		dey		                dey
10606	.efbe						LF04D:
10607	.efbe		c8		iny		                iny
10608	.efbf						LF04E:
10609	.efbf		20 ee ff	jsr $ffee	                jsr OSWRCH
10610	.efc2						LF051:
10611	.efc2		20 e0 ff	jsr $ffe0	                jsr OSRDCH
10612	.efc5		b0 49		bcs $f010	                bcs LF09F
10613	.efc7		aa		tax		                tax
10614	.efc8		ad 7c 02	lda $027c	                lda characterDestinationStatus
10615	.efcb		6a		ror a		                ror a
10616	.efcc		6a		ror a		                ror a
10617	.efcd		8a		txa		                txa
10618	.efce		b0 05		bcs $efd5	                bcs LF064
10619	.efd0		ae 6a 02	ldx $026a	                ldx vduQueueNegativeLength
10620	.efd3		d0 ea		bne $efbf	                bne LF04E
10621	.efd5						LF064:
10622	.efd5		c9 7f		cmp #$7f	                cmp #$7F
10623	.efd7		d0 07		bne $efe0	                bne LF06F
10624	.efd9		c0 00		cpy #$00	                cpy #$00
10625	.efdb		f0 e5		beq $efc2	                beq LF051
10626	.efdd		88		dey		                dey
10627	.efde		80 df		bra $efbf	                bra LF04E

10629	.efe0						LF06F:
10630	.efe0		c9 15		cmp #$15	                cmp #$15
10631	.efe2		d0 0d		bne $eff1	                bne LF080
10632	.efe4		98		tya		                tya
10633	.efe5		f0 db		beq $efc2	                beq LF051
10634	.efe7		a9 7f		lda #$7f	                lda #$7F
10635	.efe9						LF078:
10636	.efe9		20 ee ff	jsr $ffee	                jsr OSWRCH
10637	.efec		88		dey		                dey
10638	.efed		d0 fa		bne $efe9	                bne LF078
10639	.efef		80 d1		bra $efc2	                bra LF051

10641	.eff1						LF080:
10642	.eff1		91 e8		sta ($e8),y	                sta ($E8),y
10643	.eff3		c9 0d		cmp #$0d	                cmp #$0D
10644	.eff5		f0 13		beq $f00a	                beq LF099
10645	.eff7		cc b3 02	cpy $02b3	                cpy osword0MaxLineLength
10646	.effa		b0 bf		bcs $efbb	                bcs LF04A
10647	.effc		cd b4 02	cmp $02b4	                cmp osword0MinASCIICharacter
10648	.efff		90 bc		bcc $efbd	                bcc LF04C
10649	.f001		cd b5 02	cmp $02b5	                cmp osword0MaxASCIICharacter
10650	.f004		f0 b8		beq $efbe	                beq LF04D
10651	.f006		90 b6		bcc $efbe	                bcc LF04D
10652	.f008		80 b3		bra $efbd	                bra LF04C

10654	.f00a						LF099:
10655	.f00a		20 e7 ff	jsr $ffe7	                jsr OSNEWL
10656	.f00d		20 0c eb	jsr $eb0c	                jsr callNETV
10657	.f010						LF09F:
10658	.f010		a5 ff		lda $ff		                lda $FF
10659	.f012		2a		rol a		                rol a
10660	.f013		60		rts		                rts

10662							;-------------------------------------------------------------------------
10663							;
10664							; OSBYTE 3 (&03) Specify output stream [MasRef D.2-19]
10665							;
10666	.f014						osbyte03:
10667	.f014		da		phx		                phx
10668	.f015		ae 7c 02	ldx $027c	                ldx characterDestinationStatus
10669	.f018		a9 0a		lda #$0a	                lda #printerDriverFX3
10670	.f01a		20 14 e9	jsr $e914	                jsr callPrinterDriver
10671	.f01d		fa		plx		                plx
10672	.f01e		a9 03		lda #$03	                lda #$03
10673	.f020		a0 00		ldy #$00	                ldy #$00
10674	.f022		80 23		bra $f047	                bra osbyte04

10676							;-------------------------------------------------------------------------
10677							;
10678							; OSBYTE 6 (&06) Write printer ignore character [MasRef D.2-21]
10679							;
10680	.f024						osbyte06:                       ;f0b3
10681	.f024		4e 46 02	lsr $0246	                lsr noignoreState
10682	.f027		80 16		bra $f03f	                bra osbyte01

10684							;-------------------------------------------------------------------------
10685							;
10686							; OSBYTE 114 (&72) Write usage of shadow memory [MasRef D.2-32]
10687							;
10688	.f029						osbyte72:                       ;f0b8
10689	.f029		a9 1f		lda #$1f	                lda #$1F
10690	.f02b		80 10		bra $f03d	                bra LF0CC

10692							;-------------------------------------------------------------------------
10693							;
10694							; OSBYTE 5 (&05) Write printer driver type [MasRef D.2-20]
10695							;
10696	.f02d						osbyte05:
10697	.f02d						waitForPrinterDriverDormant:
10698	.f02d		58		cli		                cli
10699	.f02e		78		sei		                sei
10700	.f02f		24 ff		bit $ff		                bit $FF                      ;test for ESCAPE
10701	.f031		30 29		bmi $f05c	                bmi rtsF0EB                  ;taken if ESCAPE pressed
10702	.f033		2c d1 02	bit $02d1	                bit bufferEmptyFlags+bufferPrinter
10703	.f036		10 f5		bpl $f02d	                bpl waitForPrinterDriverDormant ;taken if printer driver active
10704	.f038		20 14 e9	jsr $e914	                jsr callPrinterDriver    ;call with A=printerDriverFX5
10705	.f03b		a0 00		ldy #$00	                ldy #$00
10706	.f03d						LF0CC:
10707	.f03d		64 f1		stz $f1		                stz $F1

10709							                ; fall through to standard MOS variable handling,
10710							                ; affecting printerDriverType

10712							;-------------------------------------------------------------------------
10713							;
10714							; OSBYTE 1 (&01) Write user flag [MasRef D.2-18]
10715							;
10716	.f03f						osbyte01:
10717	.f03f		49 f0		eor #$f0	                eor #firstMOSVariableOSBYTE+(userFlag-mosVariables)-1 ;-1 because OSBYTE 1
10718	.f041		80 07		bra $f04a	                bra osbyteA6X  ;jump to standard MOS variable handling

10720							;-------------------------------------------------------------------------
10721							;
10722							; OSBYTE 12 (&0C) Write keyboard auto-repeat rate [MasRef D.2-23]
10723							;
10724	.f043						osbyte0C:
10725	.f043		f0 36		beq $f07b	                beq resetKeyRepeat    ;taken if X=0

10727							;-------------------------------------------------------------------------
10728							;
10729							; OSBYTE 11 (&0B) Write keyboard auto-repeat delay [MasRef D.2-22]
10730							;
10731	.f045						osbyte0B:
10732							                ; TODO - turn this constant into an expression
10733	.f045		69 cf		adc #$cf	                adc #$CF

10735							                ;if osbyte0C, A=$db
10736							                ;if osbyteOD, A=$dc

10738							;-------------------------------------------------------------------------
10739							;
10740							; OSBYTE 4 (&04) Enable/disable cursor editing [MasRef D.2-19]
10741							;
10742	.f047						osbyte04:
10743	.f047		18		clc		                clc
10744	.f048		69 e9		adc #$e9	                adc #firstMOSVariableOSBYTE+(editKeysMode-mosVariables)-4 ;-4 because OSBYTE 4

10746							                ;if originally OSBYTE 4 (&04) Enable/disable cursor
10747							                ;editing [MasRef D.2-19], it's now OSBYTE 237 (&ED)
10748							                ;Read/write cursor editing status [MasRef D.2-77].
10749							                ;
10750							                ;if originally OSBYTE 12 (&0C) Write keyboard
10751							                ;auto-repeat rate [MasRef D.2-23], it's now OSBYTE 197
10752							                ;(&C5) Read/write keyboard auto-repeat rate [MasRef
10753							                ;D.2-60].
10754							                ;
10755							                ;if originally OSBYTE 11 (&0B) Write keyboard
10756							                ;auto-repeat delay [MasRef D.2-22], it's now OSBYTE
10757							                ;196 (&C4) Read/write keyboard auto-repeat delay
10758							                ;[MasRef D.2-60].

10760	.f04a						osbyteA6X:
10761	.f04a		86 f0		stx $f0		                stx originalX

10763							;-------------------------------------------------------------------------
10764							;
10765							; OSBYTE 166 (&A6) Read start address of MOS variables [MasRef D.2-50]
10766							;
10767	.f04c						osbyteA6:
10768	.f04c		a8		tay		                tay             ;
10769	.f04d		b9 90 01	lda $0190,y	                lda mosVariables-firstMOSVariableOSBYTE,y;
10770	.f050		aa		tax		                tax             ;save old value
10771	.f051		25 f1		and $f1		                and originalY   ;AND old value with Y
10772	.f053		45 f0		eor $f0		                eor originalX   ;EOR old value with X
10773	.f055		99 90 01	sta $0190,y	                sta mosVariables-firstMOSVariableOSBYTE,y     ;set new variable value
10774	.f058		b9 91 01	lda $0191,y	                lda mosVariables-firstMOSVariableOSBYTE+1,y
10775	.f05b		a8		tay		                tay             ;Y=contents of next location
10776	.f05c						rtsF0EB:
10777	.f05c		60		rts		                rts

10779							;-------------------------------------------------------------------------
10780							;
10781							; This table is used to set the serial baud rate.
10782							;
10783							;   - bit 7 is not used (always clear)
10784							;   - bit 6 is not used (always set)
10785							;   - bits 3,4,5 indicate the serial receive baud rate
10786							;   - bits 0,1,2 indicate the serial transmit baud rate
10787							;
10788							;       111 =    75 baud
10789							;       011 =   150 baud
10790							;       101 =   300 baud
10791							;       001 =  1200 baud
10792							;       110 =  2400 baud
10793							;       010 =  4800 baud
10794							;       100 =  9600 baud
10795							;       000 = 19200 baud
10796							;
10797							                .if version!=400
10798	.f05d						serialBaudRatesTable:
10799	>f05d		64				                .byte %01100100;$64
10800	>f05e		7f				                .byte %01111111;$7f
10801	>f05f		5b				                .byte %01011011;$5b
10802	>f060		6d				                .byte %01101101;$6d
10803	>f061		49				                .byte %01001001;$49
10804	>f062		76				                .byte %01110110;$76
10805	>f063		52				                .byte %01010010;$52
10806	>f064		64				                .byte %01100100;$64
10807	>f065		40				                .byte %01000000;$40
10808							                .endif

10810							;-------------------------------------------------------------------------
10811							;
10812							; OSBYTE 19 (&13) Wait for vertical sync [MasRef D.2-26]
10813							;
10814	.f066						osbyte13:
10815	.f066		ad 40 02	lda $0240	                lda cfsTimeoutCounter
10816	.f069						-
10817	.f069		58		cli		                cli
10818	.f06a		78		sei		                sei
10819	.f06b		cd 40 02	cmp $0240	                cmp cfsTimeoutCounter
10820	.f06e		f0 f9		beq $f069	                beq -

10822							                ; fall through to OSBYTE $a0 (!!)

10824							;-------------------------------------------------------------------------
10825							;
10826							; OSBYTE 160 (&A0) Read VDU variable value [MasRef D.2-49]
10827							;
10828	.f070						osbyteA0:
10829	.f070		bc 01 03	ldy $0301,x	                ldy vduv+1,x
10830	.f073		bd 00 03	lda $0300,x	                lda vduv+0,x
10831	.f076		aa		tax		                tax
10832	.f077		60		rts		                rts

10834							;-------------------------------------------------------------------------
10835							;
10836							; Reset key auto repeat settings to the defaults set in CMOS.
10837							;
10838							                .if version==350
10839	.f078						setTSTAndResetKeyRepeat:
10840	.f078		20 6a f3	jsr $f36a	                jsr callWithTST
10841							                .endif
10842	.f07b						resetKeyRepeat:
10843	.f07b		20 24 f3	jsr $f324	                jsr withTerminalROM
10844							                .if version<500&&version!=350
10848							                .else
10849	.f07e		a2 1a		ldx #$1a	                ldx #CMOSBytes.keyboardAutoRepeatDelay+cmosBytesOffset
10850	.f080		20 a3 96	jsr $96a3	                jsr terminal.readRTCByte
10851	.f083		8d 54 02	sta $0254	                sta keyboardAutoRepeatDelay
10852	.f086		a2 1b		ldx #$1b	                ldx #CMOSBytes.keyboardAutoRepeatRate+cmosBytesOffset
10853	.f088		20 a3 96	jsr $96a3	                jsr terminal.readRTCByte
10854	.f08b		a8		tay		                tay
10855							                .endif
10856	.f08c		ae 55 02	ldx $0255	                ldx keyboardAutoRepeatRate
10857	.f08f		8c 55 02	sty $0255	                sty keyboardAutoRepeatRate
10858	.f092		60		rts		                rts

10860							;-------------------------------------------------------------------------
10861							;
10862							; OSBYTE 18 (&12) Reset soft keys [MasRef D.2-26]
10863							;
10864							; MasRef says X undefined on exit; in fact, X=0, and terminal.scanROMs
10865							; relies on this.
10866							;
10867	.f093						osbyte12:
10868	.f093		38		sec		                sec
10869	.f094		6e 84 02	ror $0284	                ror softKeyConsistencyFlag   ;mark soft keys inconsistent
10870	.f097		a5 f4		lda $f4		                lda $F4
10871	.f099		48		pha		                pha                          ;push selected paged ROM
10872	.f09a		20 57 e5	jsr $e557	                jsr selectTerminalROMAndANDY

10874							                ; point each soft key at the 0th byte of the strings -
10875							                ; they all then have length 0.
10876	.f09d		a2 10		ldx #$10	                ldx #softKeyCount
10877	.f09f						-
10878	.f09f		a9 22		lda #$22	                lda #<andy.softKeys.strings
10879	.f0a1		9d 00 80	sta $8000,x	                sta andy.softKeys.stringLSBs,x
10880	.f0a4		a9 80		lda #$80	                lda #>andy.softKeys.strings
10881	.f0a6		9d 11 80	sta $8011,x	                sta andy.softKeys.stringMSBs,x
10882	.f0a9		ca		dex		                dex
10883	.f0aa		10 f3		bpl $f09f	                bpl -

10885	.f0ac		68		pla		                pla                 ;pop previously selected paged ROM
10886	.f0ad		20 6a e5	jsr $e56a	                jsr selectROMA

10888	.f0b0		9c 68 02	stz $0268	                stz softKeyStringLength
10889	.f0b3		9c 84 02	stz $0284	                stz softKeyConsistencyFlag   ;mark soft keys consistent
10890	.f0b6		e8		inx		                inx
10891	.f0b7		60		rts		                rts

10893							;-------------------------------------------------------------------------
10894							;
10895							; OSWORD 11 (&0B) Read the palette [MasRef D.3-20]
10896							;
10897	.f0b8						osword0B:
10898	.f0b8		2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne
10899	.f0bb		aa		tax		                tax
10900	.f0bc		bd 6f 03	lda $036f,x	                lda vduv.currentPalette,x
10901	.f0bf						LF146:
10902	.f0bf		c8		iny		                iny
10903	.f0c0						LF147:
10904	.f0c0		91 f0		sta ($f0),y	                sta (originalX),y
10905	.f0c2		a9 00		lda #$00	                lda #$00                     ;fill last 3 bytes with 0
10906	.f0c4		c0 04		cpy #$04	                cpy #$04
10907	.f0c6		d0 f7		bne $f0bf	                bne LF146
10908	.f0c8		60		rts		                rts

10910							;-------------------------------------------------------------------------
10911							;
10912							; OSWORD 9 (&09) Read pixel logical colour [MasRef D.3-19]
10913							;
10914	.f0c9						osword09:                                    ;f150
10915	.f0c9		20 3b f3	jsr $f33b	                jsr withMOSROM               ; sF150= 20 AB F3     +s
10916	.f0cc		a0 03		ldy #$03	                ldy #$03
10917	.f0ce						-
10918	.f0ce		b1 f0		lda ($f0),y	                lda (originalX),y
10919	.f0d0		99 28 03	sta $0328,y	                sta vduv.workspace._28,y
10920	.f0d3		b9 10 03	lda $0310,y	                lda $0310,y
10921	.f0d6		48		pha		                pha
10922	.f0d7		88		dey		                dey
10923	.f0d8		10 f4		bpl $f0ce	                bpl -
10924	.f0da		a9 28		lda #$28	                lda #VDUVariables.workspace._28
10925	.f0dc		20 b6 dd	jsr $ddb6	                jsr readPixelColour
10926	.f0df		aa		tax		                tax
10927	.f0e0		a0 00		ldy #$00	                ldy #$00
10928	.f0e2						LF169:
10929	.f0e2		68		pla		                pla
10930	.f0e3		99 10 03	sta $0310,y	                sta $0310,y
10931	.f0e6		c8		iny		                iny
10932	.f0e7		c0 04		cpy #$04	                cpy #$04
10933	.f0e9		d0 f7		bne $f0e2	                bne LF169
10934	.f0eb		8a		txa		                txa
10935	.f0ec		80 d2		bra $f0c0	                bra LF147

10937	.f0ee						osword0A:                                    ;f175
10938	.f0ee		20 38 e2	jsr $e238	                jsr getSoftCharacterDefinitionAddress
10939	.f0f1		a0 00		ldy #$00	                ldy #$00
10940	.f0f3		a5 f4		lda $f4		                lda $F4
10941	.f0f5		48		pha		                pha
10942	.f0f6		20 57 e5	jsr $e557	                jsr selectTerminalROMAndANDY
10943	.f0f9						LF180:
10944	.f0f9		b1 de		lda ($de),y	                lda ($DE),y
10945	.f0fb		c8		iny		                iny
10946	.f0fc		91 f0		sta ($f0),y	                sta ($F0),y
10947	.f0fe		c0 08		cpy #$08	                cpy #$08
10948	.f100		d0 f7		bne $f0f9	                bne LF180
10949	.f102		fa		plx		                plx
10950	.f103		4c 59 e5	jmp $e559	                jmp selectROMX

10952	.f106						osword0C:                                    ;f18d
10953	.f106		20 3b f3	jsr $f33b	                jsr withMOSROM
10954	.f109		08		php		                php
10955	.f10a		2d 60 03	and $0360	                and $0360
10956	.f10d		aa		tax		                tax
10957	.f10e		c8		iny		                iny
10958	.f10f		b1 f0		lda ($f0),y	                lda ($F0),y
10959	.f111		4c 38 c6	jmp $c638	                jmp LC639

10961	.f114						osword0D:                                    ;f19b
10962	.f114		20 3b f3	jsr $f33b	                jsr withMOSROM
10963	.f117		a9 03		lda #$03	                lda #$03
10964	.f119		20 1e f1	jsr $f11e	                jsr LF1A5
10965	.f11c		a9 07		lda #$07	                lda #$07
10966	.f11e						LF1A5:
10967	.f11e		48		pha		                pha
10968	.f11f		20 c2 e2	jsr $e2c2	                jsr LE2B6
10969	.f122		20 de c4	jsr $c4de	                jsr LC4DF
10970	.f125		a2 03		ldx #$03	                ldx #$03
10971	.f127		68		pla		                pla
10972	.f128		a8		tay		                tay
10973	.f129						LF1B0:
10974	.f129		bd 10 03	lda $0310,x	                lda $0310,x
10975	.f12c		91 f0		sta ($f0),y	                sta ($F0),y
10976	.f12e		88		dey		                dey
10977	.f12f		ca		dex		                dex
10978	.f130		10 f7		bpl $f129	                bpl LF1B0
10979	.f132		60		rts		                rts

10981							; Read address of bottom of screen/top of user memory
10982							; ===================================================
10983	.f133						osbyte84:                     ;f1ba
10984	.f133		a5 d0		lda $d0		                lda STATE     ; Get VDU status
10985	.f135		89 10		bit #$10	                bit #STATE.isShadowMode ; If shadow screen, jump to return &8000
10986	.f137		d0 18		bne $f151	                bne LF1D8
10987	.f139						LF1C0:
10988	.f139		ad 55 03	lda $0355	                lda $0355                    ; Get current screen MODE

10990							; Return start of screen for non-shadow MODE in X
10991							; -----------------------------------------------
10992	.f13c						LF1C3:
10993	.f13c		29 07		and #$07	                and #$07
10994	.f13e		a8		tay		                tay
10995	.f13f		be 74 e1	ldx $e174,y	                ldx screenMODEGroupForMODE,y ; Get screen map for supplied MODE
10996	.f142		bd 8a e1	lda $e18a,x	                lda startScreenAddressHighByteForScreenMODEGroup,x ; Get address top byte for this screen map
10997	.f145						LF1CC:
10998	.f145		a2 00		ldx #$00	                ldx #$00                     ; Address=&xx00
10999	.f147		a8		tay		                tay
11000	.f148		60		rts		                rts

11002							;-------------------------------------------------------------------------
11003							;
11004							; OSBYTE 133 (&85) Read top of user RAM for given mode [MasRef D.2-41]
11005							;
11006	.f149						osbyte85:
11007	.f149		8a		txa		                txa                          ; If MODE &80+n, return &8000
11008	.f14a		30 05		bmi $f151	                bmi LF1D8
11009	.f14c		ae 7f 02	ldx $027f	                ldx shadowRAMState ; If *SHADOW<>0, jump to return non-shadow address
11010	.f14f		d0 eb		bne $f13c	                bne LF1C3
11011	.f151						LF1D8:
11012	.f151		a9 80		lda #$80	                lda #$80                     ; Return &8000
11013	.f153		80 f0		bra $f145	                bra LF1CC

11015							;-------------------------------------------------------------------------
11016							;
11017							; OSBYTE 135 (&87) Read screen mode and character at text cursor
11018							; position [MasRef D.2-42]
11019							;
11020	.f155						osbyte87: ;F1DC:
11021	.f155		20 3b f3	jsr $f33b	                jsr withMOSROM
11022	.f158		4c f7 dd	jmp $ddf7	                jmp readCharacterAtTextCursor

11024							;-------------------------------------------------------------------------
11025							;
11026							; OSBYTE 139 (&8B) Write Filing System options [MasRef D.2-43]
11027							;
11028	.f15b						osbyte8B:
11029	.f15b		0a		asl a		                asl a

11031							;-------------------------------------------------------------------------
11032							;
11033							; OSBYTE 127 (&7F) Check for end of file on an opened file [MasRef D.2-37]
11034							;
11035	.f15c						osbyte7F:
11036	.f15c		29 01		and #$01	                and #$01

11038							;-------------------------------------------------------------------------
11039							;
11040							; Call OSFSC. There's no entry point for this.
11041							;
11042	.f15e						callFSCV:
11043	.f15e		6c 1e 02	jmp ($021e)	                jmp (FSCV)

11045							;-------------------------------------------------------------------------
11046							;
11047							; OSWORD 15 (&0F) Write CMOS clock [MasRef D.3-24]
11048							;
11049							                .if version!=350
11053							                .endif

11055							;-------------------------------------------------------------------------

11057							; Set TAPE/ROM extended vectors
11058							; =============================
11059	.f161						LF1EE:
11060	.f161		a2 15		ldx #$15	                ldx #$15
11061	.f163						LF1F0:
11062	.f163		bd 6c f1	lda $f16c,x	                lda LF1FA-1,x
11063	.f166		9d b9 0d	sta $0db9,x	                sta ExtendedVectorAddress(FILEV)-1,x
11064	.f169		ca		dex		                dex
11065	.f16a		d0 f7		bne $f163	                bne LF1F0
11066	.f16c						LF1F9:
11067	.f16c		60		rts		                rts

11069							; TAPE/ROM extended vector values
11070							; -------------------------------
11071	.f16d						LF1FA:
11072	>f16d		a8 a0				                .word terminal.osfileTapeOrROM ; FILEV
11073	>f16f		0f				                .byte terminalROM
11074	>f170		45 9f				                .word terminal.osargsTapeOrROM ; ARGSV
11075	>f172		0f				                .byte terminalROM
11076	>f173		06 a3				                .word terminal.bputTapeOrROM ; BPUTV
11077	>f175		0f				                .byte terminalROM
11078							                .if version==400
11080							                .else
11081	>f176		67 a3				                .word terminal.bgetTapeOrROM ; BGETV
11082							                .endif
11083	>f178		0f				                .byte terminalROM
11084	>f179		89 a3				                .word terminal.osgbpbTapeOrROM ; GBPBV
11085	>f17b		0f				                .byte terminalROM
11086	>f17c		15 a2				                .word terminal.osfindTapeOrROM ; FINDV
11087	>f17e		0f				                .byte terminalROM
11088	>f17f		a8 9f				                .word terminal.fscTapeOrROM  ; FSCV
11089	>f181		0f				                .byte terminalROM

11091							;-------------------------------------------------------------------------
11092							;
11093							; OSBYTE 109 (&6D) Make temporary Filing System permanent
11094							;
11095							; MasRef D.2-30
11096							;
11097	.f182						osbyte6D:;f20f
11098	.f182		ae 01 df	ldx $df01	                ldx hazel.activeFS; Copy active FS to current FS
11099	.f185		8e 00 df	stx $df00	                stx hazel.currentFS
11100	.f188		ad bc 0d	lda $0dbc	                lda ExtendedVectorAddress(FILEV)+2 ; Copy XFILEV ROM to current FS ROM number
11101	.f18b		8d 03 df	sta $df03	                sta hazel.currentFSROM
11102	.f18e						rtsF180:
11103	.f18e		60		rts		                rts

11105							;-------------------------------------------------------------------------
11106							;
11107							; OSBYTE 20 (&14) Restore default font definitions
11108							;
11109							; MasRef D.2-24
11110							;
11111							                .if version!=350
11115							                .endif

11117							;-------------------------------------------------------------------------
11118							;
11119							; OSBYTE 25 (&19) Restore a group of font definitions
11120							;
11121							; MasRef D.2-28
11122							;
11123	.f18f						osbyte19:                       ;f222
11124							                .if version>=511||version==350
11125	.f18f		a2 07		ldx #$07	                ldx #romServiceCallUnrecognisedOSBYTE
11126	.f191		20 c3 ed	jsr $edc3	                jsr makeROMServiceCall
11127							                .if version==350
11128	.f194		f0 f8		beq $f18e	                beq rtsF180
11131							                .endif
11132	.f196		a6 f0		ldx $f0		                ldx originalX
11133							                .endif
11134	.f198		20 24 f3	jsr $f324	                jsr withTerminalROM
11135	.f19b		4c 3c 97	jmp $973c	                jmp terminal.osbyte19

11137							;-------------------------------------------------------------------------

11139							; OSBYTE &16 - Increment ROM polling semaphore
11140							; ========================================
11141	.f19e						osbyte16:                       ;f228
11142	.f19e		ee 43 02	inc $0243	                inc romPollingSemaphore
11143	.f1a1						LF2EB:
11144	.f1a1		60		rts		                rts

11146							;-------------------------------------------------------------------------

11148							; OSBYTE &17 - Decrement ROM polling semaphore
11149	.f1a2						osbyte17:                       ;f22c
11150							; ========================================
11151	.f1a2		ce 43 02	dec $0243	                dec romPollingSemaphore
11152	.f1a5		60		rts		                rts

11154							;-------------------------------------------------------------------------

11156							                .if version==350
11157	.f1a6						LF198:
11158	.f1a6		ca		dex		                dex
11159	.f1a7		10 03		bpl $f1ac	                bpl LF19E
11160	.f1a9		20 24 f3	jsr $f324	                jsr withTerminalROM
11161	.f1ac						LF19E:
11162	.f1ac		a6 f0		ldx $f0		                ldx originalX
11163	.f1ae		6c fa 00	jmp ($00fa)	                jmp (SEIWKA)
11164							                .endif

11166							;-------------------------------------------------------------------------

11168							; OSBYTE &76 - Set LEDs to keyboard state
11169							; =======================================
11170	.f1b1						osbyte76:
11171	.f1b1		08		php		                php                          ; Disable IRQs
11172	.f1b2		78		sei		                sei
11173	.f1b3		a9 40		lda #$40	                lda #$40                     ; Turn on LEDs
11174	.f1b5		20 c2 f1	jsr $f1c2	                jsr LF241
11175	.f1b8		30 05		bmi $f1bf	                bmi LF23E                    ; Exit if Escape pending
11176	.f1ba		18		clc		                clc                          ; Call KEYV to read SHIFT and CTRL
11177	.f1bb		b8		clv		                clv
11178	.f1bc		20 2e f6	jsr $f62e	                jsr callKEYV
11179							; Returns A.b7=CTRL, A.b6=SHIFT, MI=CTRL, VS=SHIFT
11180	.f1bf						LF23E:
11181	.f1bf		28		plp		                plp                          ; Restore IRQs
11182	.f1c0		2a		rol a		                rol a                        ; Set Carry from A bit 7 and return
11183	.f1c1		60		rts		                rts
11184							; Returns A.b7=SHIFT, CS=CTRL

11186							; Set keyboard LEDs
11187							; -----------------
11188	.f1c2						LF241:
11189	.f1c2		90 09		bcc $f1cd	                bcc LF24C                    ; Skip if not called from OSBYTE
11190	.f1c4		a0 07		ldy #$07	                ldy #$07                     ; Turn ShiftLock LED on
11191	.f1c6		8c 40 fe	sty $fe40	                sty systemVIA.orb
11192	.f1c9		88		dey		                dey                          ; Turn CapsLock LED on
11193	.f1ca		8c 40 fe	sty $fe40	                sty systemVIA.orb
11194	.f1cd						LF24C:
11195	.f1cd		24 ff		bit $ff		                bit $FF                      ; Test Escape and return
11196	.f1cf		60		rts		                rts

11198							;-------------------------------------------------------------------------

11200	.f1d0						osbyte9A:
11201	.f1d0		8a		txa		                txa
11202	.f1d1						setVCONTROL:
11203	.f1d1		08		php		                php
11204	.f1d2		78		sei		                sei
11205	.f1d3		8d 48 02	sta $0248	                sta vcontrolRegister
11206	.f1d6		8d 20 fe	sta $fe20	                sta VCONTROL
11207	.f1d9		ad 53 02	lda $0253	                lda secondFlashColourDuration
11208	.f1dc		8d 51 02	sta $0251	                sta flashCounter
11209	.f1df		28		plp		                plp
11210	.f1e0		60		rts		                rts

11212							;-------------------------------------------------------------------------
11213							;
11214							; OSBYTE 155 (&9B) Write to video ULA palette register and copy
11215							;
11216	.f1e1						osbyte9B:
11217	.f1e1		8a		txa		                txa
11218	.f1e2						writeVPALETTE:
11219	.f1e2		49 07		eor #$07	                eor #$07
11220	.f1e4		08		php		                php
11221	.f1e5		78		sei		                sei
11222	.f1e6		8d 49 02	sta $0249	                sta vpaletteRegister
11223	.f1e9		8d 21 fe	sta $fe21	                sta VPALETTE
11224	.f1ec		28		plp		                plp
11225	.f1ed		60		rts		                rts

11227							;-------------------------------------------------------------------------

11229	.f1ee						gsinitForFilenameParsing:
11230	.f1ee		18		clc		                clc


11233							;-------------------------------------------------------------------------
11234							;
11235							; GSINIT
11236							;
11237							; MasRef D.10-1
11238							;
11239	.f1ef						gsinitEntryPoint:
11240	.f1ef		66 e4		ror $e4		                ror stringInputOptions    ;put C into bit 7
11241	.f1f1		20 80 f2	jsr $f280	                jsr skipSpacesAndCheckForCRInStringInput
11242	.f1f4		c8		iny		                iny
11243	.f1f5		c9 22		cmp #$22	                cmp #'"'
11244	.f1f7		f0 02		beq $f1fb	                beq +                       ; C=1 if double quotes
11245	.f1f9		88		dey		                dey
11246	.f1fa		18		clc		                clc                         ; clear double quotes flag
11247	.f1fb						+
11248	.f1fb		66 e4		ror $e4		                ror stringInputOptions ; set doubleQuotes; move bit 7 into spaceNotATerminator
11249	.f1fd		c9 0d		cmp #$0d	                cmp #$0D                     ; set Z if initial CR
11250	.f1ff		60		rts		                rts

11252							;-------------------------------------------------------------------------
11253							;
11254							; GSREAD
11255							;
11256							; MasRef D.10-2
11257							; MasRef C.5-8 has the | syntax
11258							;
11259	.f200						gsreadEntryPoint:
11260	.f200		a9 01		lda #$01	                lda #stringInputOptions.goodString
11261	.f202		04 e4		tsb $e4		                tsb stringInputOptions
11262	.f204		20 1d f2	jsr $f21d	                jsr LF29C
11263	.f207		08		php		                php                          ; save flags
11264	.f208		46 e4		lsr $e4		                lsr stringInputOptions       ; move goodString into C
11265	.f20a		90 04		bcc $f210	                bcc badStringError           ; branch taken if bad string
11266	.f20c		26 e4		rol $e4		                rol stringInputOptions       ; reinstate goodString
11267	.f20e		28		plp		                plp                          ; restore flags
11268	.f20f		60		rts		                rts                          ;

11270	.f210						badStringError:
11271	.f210		00		brk #		                brk                          ;
11272	>f211		fd 42 61 64 20 73 74 72		                .text $fd,"Bad string",0
	>f219		69 6e 67 00
11273	.f21d						LF29C:
11274	.f21d		18		clc		                clc                          ; last char not !
11275	.f21e						LF29D:
11276							                ; C=1 at this point if |! was the last sequence seen.
11277	.f21e		64 e5		stz $e5		                stz stringInputPlingFlag
11278	.f220		66 e5		ror $e5		                ror stringInputPlingFlag     ; set ! flag as required
11279	.f222		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11280	.f224		c9 0d		cmp #$0d	                cmp #13                      ;EOL?
11281	.f226		d0 09		bne $f231	                bne notRETURN                ;taken if not EOL
11282	.f228		24 e4		bit $e4		                bit stringInputOptions
11283	.f22a		10 20		bpl $f24c	                bpl finishedString           ;taken if !doubleQuotes
11284	.f22c						badString:
11285	.f22c		a9 01		lda #$01	                lda #stringInputOptions.goodString
11286	.f22e		14 e4		trb $e4		                trb stringInputOptions
11287	.f230		60		rts		                rts

11289	.f231						notRETURN:
11290	.f231		c9 20		cmp #$20	                cmp #' '
11291	.f233		90 f7		bcc $f22c	                bcc badString ;taken if unprintable control char
11292	.f235		d0 06		bne $f23d	                bne notSPACE
11293	.f237		24 e4		bit $e4		                bit stringInputOptions ;N=doubleQuotes, V=spaceNotATerminator
11294	.f239		30 3e		bmi $f279	                bmi finishUpReadClearV ;taken if quoted
11295	.f23b		50 0f		bvc $f24c	                bvc finishedString ;taken if space is a terminator
11296	.f23d						notSPACE:
11297	.f23d		c9 22		cmp #$22	                cmp #'"'
11298	.f23f		d0 10		bne $f251	                bne notDOUBLEQUOTE         ;taken if not quotes
11299	.f241		24 e4		bit $e4		                bit stringInputOptions ;N=doubleQuotes, V=spaceNotATerminator
11300	.f243		10 34		bpl $f279	                bpl finishUpReadClearV ;taken if not double quotes
11301	.f245		c8		iny		                iny
11302	.f246		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11303	.f248		c9 22		cmp #$22	                cmp #'"'
11304	.f24a		f0 2d		beq $f279	                beq finishUpReadClearV       ;taken if quotes
11305	.f24c						finishedString:
11306	.f24c		20 80 f2	jsr $f280	                jsr skipSpacesAndCheckForCRInStringInput
11307	.f24f		38		sec		                sec
11308	.f250		60		rts		                rts

11310	.f251						notDOUBLEQUOTE:
11311	.f251		c9 7c		cmp #$7c	                cmp #'|'
11312	.f253		d0 24		bne $f279	                bne finishUpReadClearV       ;taken if not |
11313	.f255		c8		iny		                iny                          ;skip |
11314	.f256		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11315	.f258		c9 7c		cmp #$7c	                cmp #'|'
11316	.f25a		f0 1d		beq $f279	                beq finishUpReadClearV ;branch taken if "||" - literal |
11317	.f25c		c9 22		cmp #$22	                cmp #'"'
11318	.f25e		f0 19		beq $f279	                beq finishUpReadClearV ;branch taken if "|\"" - literal "
11319	.f260		c9 21		cmp #$21	                cmp #'!'
11320	.f262		d0 03		bne $f267	                bne LF2E6                    ;taken if not "|!"

11322							                ; Handle |! - ASCII 128-255
11323	.f264		c8		iny		                iny                          ;skip !
11324	.f265		80 b7		bra $f21e	                bra LF29D

11326	.f267						LF2E6:
11327	.f267		c9 20		cmp #$20	                cmp #' '
11328	.f269		90 c1		bcc $f22c	                bcc badString ;taken if | followed by a non-printable char
11329	.f26b		c9 3f		cmp #$3f	                cmp #'?'
11330	.f26d		f0 08		beq $f277	                beq ascii127                 ;taken if "|?" - CHR$127
11331	.f26f		20 c0 f2	jsr $f2c0	                jsr implementCTRLCodes
11332	.f272		2c 6c e3	bit $e36c	                bit valueFF
11333	.f275		80 03		bra $f27a	                bra LF2F9

11335	.f277						ascii127:
11336	.f277		a9 7f		lda #$7f	                lda #$7F
11337	.f279						finishUpReadClearV:
11338	.f279		b8		clv		                clv
11339	.f27a						LF2F9:
11340	.f27a		c8		iny		                iny
11341	.f27b		05 e5		ora $e5		                ora stringInputPlingFlag ;if it was a |! char, set bit 7
11342	.f27d		18		clc		                clc
11343	.f27e		60		rts		                rts

11345							;-------------------------------------------------------------------------

11347	.f27f						incAndSkipSpaces:
11348	.f27f		c8		iny		                iny
11349	.f280						skipSpacesAndCheckForCRInStringInput:
11350	.f280		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11351	.f282		c9 20		cmp #$20	                cmp #' '
11352	.f284		f0 f9		beq $f27f	                beq incAndSkipSpaces
11353	.f286						checkForCR:
11354	.f286		c9 0d		cmp #$0d	                cmp #13
11355	.f288		60		rts		                rts

11357							;-------------------------------------------------------------------------

11359	.f289						LF308:
11360	.f289		90 f5		bcc $f280	                bcc skipSpacesAndCheckForCRInStringInput
11361	.f28b						LF30A:
11362	.f28b		20 80 f2	jsr $f280	                jsr skipSpacesAndCheckForCRInStringInput
11363	.f28e		c9 2c		cmp #$2c	                cmp #','
11364	.f290		d0 f4		bne $f286	                bne checkForCR
11365	.f292		c8		iny		                iny
11366	.f293		60		rts		                rts

11368							;-------------------------------------------------------------------------

11370							                .if version==510&&olivetti
11459							                .endif

11461							;-------------------------------------------------------------------------
11462							;
11463							; Modify character in A as if the SHIFT key is being pressed.
11464							;

11466	.f294						implementShift:
11467							                .if version<500&&version!=350
11493							                .else

11495	.f294		a2 02		ldx #$02	                ldx #2
11496	.f296		50 00		bvc $f298	                bvc LF3C5
11497	.f298						LF3C5:
11498	.f298		dd bb f2	cmp $f2bb,x	                cmp LF3E7-1,x
11499	.f29b		f0 1a		beq $f2b7	                beq LF3E2
11500	.f29d		ca		dex		                dex
11501	.f29e		d0 f8		bne $f298	                bne LF3C5
11502	.f2a0		50 14		bvc $f2b6	                bvc LF3E1
11503	.f2a2		c9 21		cmp #$21	                cmp #'!'
11504	.f2a4		90 10		bcc $f2b6	                bcc LF3E1
11505	.f2a6		c9 40		cmp #$40	                cmp #'@'
11506							                .if version==350
11507	.f2a8		f0 0c		beq $f2b6	                beq LF3E1
11508							                .endif
11509	.f2aa		90 08		bcc $f2b4	                bcc LF3DF
11510	.f2ac		c9 7f		cmp #$7f	                cmp #$7f
11511	.f2ae		f0 06		beq $f2b6	                beq LF3E1
11512	.f2b0		b0 02		bcs $f2b4	                bcs LF3DF

11514	.f2b2						LF3DD:
11515	.f2b2		49 30		eor #$30	                eor #$30
11516	.f2b4						LF3DF:
11517	.f2b4		49 10		eor #$10	                eor #$10
11518	.f2b6						LF3E1:
11519	.f2b6		60		rts		                rts

11521	.f2b7						LF3E2:
11522	.f2b7		b8		clv		                clv
11523	.f2b8		bd bd f2	lda $f2bd,x	                lda LF3E9-1,x
11524	.f2bb		60		rts		                rts

11526	.f2bc						LF3E7:
11527	>f2bc		5f				                .byte '_'
11528	>f2bd		30				                .byte '0'
11529	.f2be						LF3E9:
11530	>f2be		60				                .byte '`'
11531							                .if version==350
11532	>f2bf		30				                .byte '0'
11535							                .endif

11537							                .endif

11539							;-------------------------------------------------------------------------
11540							;
11541							; See MasRef C.5-8
11542							;
11543							;
11544	.f2c0						implementCTRLCodes:
11545							                .if version<500&&version!=350
11560							                .else

11562	.f2c0		da		phx		                phx
11563	.f2c1		a2 02		ldx #$02	                ldx #2
11564	.f2c3						LF3EE:
11565	.f2c3		dd de f2	cmp $f2de,x	                cmp LF40A-1,x
11566	.f2c6		f0 11		beq $f2d9	                beq LF404
11567	.f2c8		ca		dex		                dex
11568	.f2c9		d0 f8		bne $f2c3	                bne LF3EE
11569	.f2cb		fa		plx		                plx
11570	.f2cc		c9 3f		cmp #$3f	                cmp #'?'
11571	.f2ce		90 08		bcc $f2d8	                bcc LF403
11572	.f2d0		c9 7f		cmp #$7f	                cmp #$7f
11573	.f2d2		f0 04		beq $f2d8	                beq LF403
11574	.f2d4		b0 dc		bcs $f2b2	                bcs LF3DD
11575	.f2d6		29 1f		and #$1f	                and #$1f
11576	.f2d8						LF403:
11577	.f2d8		60		rts		                rts

11579	.f2d9						LF404:
11580	.f2d9		b8		clv		                clv
11581	.f2da		bd e0 f2	lda $f2e0,x	                lda LF40C-1,x
11582	.f2dd		fa		plx		                plx
11583	.f2de		60		rts		                rts

11585	.f2df						LF40A:
11586	>f2df		30 40				                .text '0','@'
11587	.f2e1						LF40C:
11588	>f2e1		00 00				                .text 0,0

11590							                .endif

11592							;-------------------------------------------------------------------------

11594	.f2e3						osbyte247EntryPoint:
11595							                .if version==350
11596	.f2e3		20 6a f3	jsr $f36a	                jsr callWithTST
11597	.f2e6						osbyte247EntryPointWithTST:
11598							                .endif
11599	.f2e6		ad 87 02	lda $0287	                lda breakVectorByte0
11600	.f2e9		49 4c		eor #$4c	                eor #$4C                     ; JMP abs
11601	.f2eb		d0 16		bne $f303	                bne rtsF363
11602							                .if version==350
11603	.f2ed		20 87 02	jsr $0287	                jsr breakVectorByte0
11604	.f2f0		4c 68 e5	jmp $e568	                jmp selectTerminalROM
11614							                .endif

11616							;-------------------------------------------------------------------------
11617							;
11618							; OSBYTE 144 (&90)
11619							; Set vertical screen shift and interlace
11620							;
11621							; MasRef D.2-44
11622							;
11623	.f2f3						osbyte90:
11624	.f2f3		ad 90 02	lda $0290	                lda tvOffset
11625	.f2f6		8e 90 02	stx $0290	                stx tvOffset
11626	.f2f9		aa		tax		                tax
11627	.f2fa		98		tya		                tya
11628	.f2fb		29 01		and #$01	                and #$01
11629	.f2fd		ac 91 02	ldy $0291	                ldy tvInterlace
11630	.f300		8d 91 02	sta $0291	                sta tvInterlace
11631	.f303						rtsF363:
11632	.f303		60		rts		                rts

11634							;-------------------------------------------------------------------------
11635							;
11636							; OSBYTE 149 (&95) â<80><93> write to JIM
11637							;
11638							; MasRef D.2-45
11639							;
11640	.f304						osbyte95:
11641	.f304		98		tya		                tya
11642	.f305		9d 00 fd	sta $fd00,x	                sta $FD00,x
11643	.f308		60		rts		                rts

11645							;-------------------------------------------------------------------------
11646							;
11647							; OSBYTE 151 (&97) â<80><93> write to SHEILA
11648							;
11649							; MasRef D.2-45
11650							;
11651	.f309						osbyte97:
11652	.f309		98		tya		                tya
11653	.f30a		9d 00 fe	sta $fe00,x	                sta $FE00,x
11654	.f30d		60		rts		                rts

11656							;-------------------------------------------------------------------------
11657							;
11658							; OSBYTE 147 (&93) â<80><93> write to FRED
11659							;
11660							; MasRef D.2-45
11661							;
11662	.f30e						osbyte93:
11663	.f30e		98		tya		                tya
11664	.f30f		9d 00 fc	sta $fc00,x	                sta $FC00,x
11665	.f312		60		rts		                rts

11667							;-------------------------------------------------------------------------
11668							;
11669							; *SHUT [MasRef G.5-10]
11670							;
11671	.f313						starSHUT:
11672	.f313		a2 26		ldx #$26	                ldx #romServiceCallCloseAllOpenFiles
11673	.f315		4c c3 ed	jmp $edc3	                jmp makeROMServiceCall

11675							;-------------------------------------------------------------------------
11676							;
11677							; Return thunk used by withTerminalROM.
11678							;
11679							; On entry here, the old value of $f4 is at the top of the stack.
11680							;
11681	.f318						withTerminalROMReturnThunk:
11682	.f318		08		php		                php                          ; S=[p; old ROMSEL]
11683	.f319		48		pha		                pha                          ; S=[a; p; old ROMSEL]
11684	.f31a		da		phx		                phx                          ; S=[x; a; p; old ROMSEL]
11685	.f31b		ba		tsx		                tsx
11686	.f31c		bd 04 01	lda $0104,x	                lda $0104,x                  ; get old ROMSEL
11687	.f31f		20 6a e5	jsr $e56a	                jsr selectROMA               ; re-select old ROM
11688	.f322		80 3b		bra $f35f	                bra returnThunkSuffix

11690							;-------------------------------------------------------------------------
11691							;
11692							; Select the Terminal ROM. Rearrange the stack so that the original
11693							; ROM is re-selected when withTerminalROM's caller itself returns.
11694							;
11695	.f324						withTerminalROM:
11696							                .if version==350
11697	.f324		20 8f f3	jsr $f38f	                jsr LF381
11698	.f327		a5 f4		lda $f4		                lda $f4
11699	.f329		9d 09 01	sta $0109,x	                sta $109,x
11700	.f32c		a9 f3		lda #$f3	                lda #>(withTerminalROMReturnThunk-1)
11701	.f32e		9d 08 01	sta $0108,x	                sta $108,x
11702	.f331		a9 17		lda #$17	                lda #<(withTerminalROMReturnThunk-1)
11703	.f333		9d 07 01	sta $0107,x	                sta $107,x
11724							                .endif
11725	.f336		20 68 e5	jsr $e568	                jsr selectTerminalROM
11726	.f339		80 16		bra $f351	                bra plx_pla_plp_rts

11728							;-------------------------------------------------------------------------
11729							;
11730							; Select the MOS ROM (i.e., no HAZEL). Rearrange the stack so that the
11731							; original HAZEL state is restored when withMOSROM's caller itself
11732							; returns.
11733							;
11734	.f33b						withMOSROM:
11735							                .if version==350
11736	.f33b		20 8f f3	jsr $f38f	                jsr LF381
11737	.f33e		a9 f3		lda #$f3	                lda #>(withMOSROMReturnThunk-1)
11738	.f340		9d 08 01	sta $0108,x	                sta $108,x
11739	.f343		a9 54		lda #$54	                lda #<(withMOSROMReturnThunk-1)
11740	.f345		9d 07 01	sta $0107,x	                sta $107,x
11741	.f348		ad 34 fe	lda $fe34	                lda ACCCON
11742	.f34b		9d 09 01	sta $0109,x	                sta $109,x
11743	.f34e		20 02 ed	jsr $ed02	                jsr selectMOS
11768							                .endif
11769	.f351						plx_pla_plp_rts:
11770							                ; S=[X; A; P; RL; RH; thunkRL; thunkRH; old ACCCON/ROMSEL]
11771	.f351		fa		plx		                plx
11772	.f352		68		pla		                pla
11773	.f353		28		plp		                plp
11774	.f354		60		rts		                rts

11776	.f355						withMOSROMReturnThunk:
11777	.f355		08		php		                php                          ; S=[P]
11778	.f356		48		pha		                pha                          ; S=[A; P]
11779	.f357		da		phx		                phx                          ; S=[X; A; P]
11780	.f358		ba		tsx		                tsx                          ; S=[X; A; P; old ACCCON]
11781	.f359		bd 04 01	lda $0104,x	                lda $0104,x                  ; get old ACCCON
11782	.f35c		20 fe ec	jsr $ecfe	                jsr selectMOSOrHAZEL         ; re-select old HAZEL state
11783	.f35f						returnThunkSuffix:
11784							                ; double up P, as that's the easiest way of ending up
11785							                ; discarding the TOS without affecting the flags.
11786	.f35f		bd 03 01	lda $0103,x	                lda $0103,x
11787	.f362		9d 04 01	sta $0104,x	                sta $0104,x
11788	.f365		fa		plx		                plx
11789	.f366		68		pla		                pla
11790	.f367		28		plp		                plp
11791	.f368		28		plp		                plp
11792	.f369		60		rts		                rts

11794							;-------------------------------------------------------------------------

11796							                .if version==350
11797							                ; Should be called something more like runWithTST
11798	.f36a						callWithTST:
11799	.f36a		20 8f f3	jsr $f38f	                jsr LF381
11800	.f36d		a5 fc		lda $fc		                lda $fc
11801	.f36f		29 bf		and #$bf	                and #$bf
11802	.f371		8d 34 fe	sta $fe34	                sta ACCCON
11803	.f374		a9 7f		lda #$7f	                lda #<(withTSTReturnThunk-1)
11804	.f376		9d 07 01	sta $0107,x	                sta $107,x
11805	.f379		a9 f3		lda #$f3	                lda #>(withTSTReturnThunk-1)
11806	.f37b		9d 08 01	sta $0108,x	                sta $108,x
11807	.f37e		80 d1		bra $f351	                bra plx_pla_plp_rts

11809	.f380						withTSTReturnThunk:
11810	.f380		08		php		                php
11811	.f381		48		pha		                pha
11812	.f382		da		phx		                phx
11813	.f383		ba		tsx		                tsx
11814	.f384		78		sei		                sei
11815	.f385		ad 34 fe	lda $fe34	                lda ACCCON
11816	.f388		09 40		ora #$40	                ora #$40
11817	.f38a		20 a0 e3	jsr $e3a0	                jsr staSEIWKAAndACCCON
11818	.f38d		80 d0		bra $f35f	                bra returnThunkSuffix
11819							                .endif

11821							;-------------------------------------------------------------------------

11823							                .if version==350
11824	.f38f						LF381:
11825	.f38f		48		pha		                pha
11826	.f390		08		php		                php
11827	.f391		48		pha		                pha
11828	.f392		da		phx		                phx
11829	.f393		ba		tsx		                tsx
11830	.f394		bd 06 01	lda $0106,x	                lda $106,x
11831	.f397		48		pha		                pha
11832	.f398		bd 05 01	lda $0105,x	                lda $105,x
11833	.f39b		48		pha		                pha
11834	.f39c		20 a0 f3	jsr $f3a0	                jsr LF392
11835	.f39f		ca		dex		                dex
11836	.f3a0						LF392:
11837	.f3a0		bd 08 01	lda $0108,x	                lda $108,x
11838	.f3a3		9d 05 01	sta $0105,x	                sta $105,x
11839	.f3a6		60		rts		                rts
11840							                .endif

11842							;-------------------------------------------------------------------------

11844	.f3a7						vduChrEntryPoint:
11845	.f3a7		20 3b f3	jsr $f33b	                jsr withMOSROM
11846	.f3aa		a6 f4		ldx $f4		                ldx $F4
11847	.f3ac		da		phx		                phx
11848	.f3ad		20 57 e5	jsr $e557	                jsr selectTerminalROMAndANDY
11849	.f3b0		20 27 c0	jsr $c027	                jsr outputToVDU
11850	.f3b3		fa		plx		                plx
11851	.f3b4		4c 59 e5	jmp $e559	                jmp selectROMX

11853							;-------------------------------------------------------------------------
11854							;
11855							; OSRDSC [MasRef D.6-1]
11856							;
11857	.f3b7						osrdscEntryPoint:
11858	.f3b7		20 3b f3	jsr $f33b	                jsr withMOSROM
11859	.f3ba		4c 18 c0	jmp $c018	                jmp LC018

11861							;-------------------------------------------------------------------------
11862							;
11863							; OSWRSC [MasRef D.8-1]
11864							;
11865	.f3bd						oswrscEntryPoint:
11866	.f3bd		20 3b f3	jsr $f33b	                jsr withMOSROM
11867	.f3c0		4c 5e db	jmp $db5e	                jmp oswrscCode

11869							;-------------------------------------------------------------------------

11871	.f3c3						starRunBOOT:
11872	>f3c3		2f 21 42 4f 4f 54 0d		                .text "/!BOOT",13

11874							;-------------------------------------------------------------------------

11876							                .if version<500&&version!=350
11878							                .endif

11880							;-------------------------------------------------------------------------

11882							                .if version>=500
11903							                .endif

11905							;-------------------------------------------------------------------------

11907							                .if version==350
11908	.f3ca						clearSoundChannelBuffer:
11909	.f3ca		20 de f3	jsr $f3de	                jsr selectExtROM
11910	.f3cd		5a		phy		                phy
11911	.f3ce		20 4e b0	jsr $b04e	                jsr clearSoundChannelBufferInternal
11912	.f3d1		80 07		bra $f3da	                bra selectOldROM
11913							                .endif

11915							;-------------------------------------------------------------------------

11917							                .if version==350
11918	.f3d3						LF3C5_350:
11919	.f3d3		20 de f3	jsr $f3de	                jsr selectExtROM
11920	.f3d6		5a		phy		                phy
11921	.f3d7		20 07 af	jsr $af07	                jsr LF416
11922	.f3da						selectOldROM:
11923	.f3da		68		pla		                pla
11924	.f3db		4c 6a e5	jmp $e56a	                jmp selectROMA
11925							                .endif

11927							;-------------------------------------------------------------------------

11929							                .if version==350
11930	.f3de						selectExtROM:
11931	.f3de		a4 f4		ldy $f4		                ldy $f4
11932	.f3e0		a9 09		lda #$09	                lda #extROM
11933	.f3e2		4c 6a e5	jmp $e56a	                jmp selectROMA
11934							                .endif

11936							;-------------------------------------------------------------------------

11938	.f3e5						LF6FC:
11939	.f3e5		a9 ff		lda #$ff	                lda #$FF
11940	.f3e7		85 f5		sta $f5		                sta $F5
11941	.f3e9		60		rts		                rts

11943	.f3ea						LF701:
11944	.f3ea		e6 f5		inc $f5		                inc $F5
11945	.f3ec		a4 f5		ldy $f5		                ldy $F5
11946	.f3ee		a2 0d		ldx #$0d	                ldx #romServiceCallROMFilingSystemInitialize
11947	.f3f0						LF707:
11948	.f3f0		08		php		                php
11949	.f3f1		20 c3 ed	jsr $edc3	                jsr makeROMServiceCall
11950	.f3f4		28		plp		                plp
11951	.f3f5		c9 01		cmp #$01	                cmp #$01
11952	.f3f7		98		tya		                tya
11953	.f3f8		60		rts		                rts

11955	.f3f9						LF710:
11956	.f3f9		a2 0e		ldx #$0e	                ldx #$0E
11957	.f3fb		a0 ff		ldy #$ff	                ldy #$FF
11958	.f3fd		4c f0 f3	jmp $f3f0	                jmp LF707

11960	.f400						LF717:
11961	.f400		ad cb 03	lda $03cb	                lda $03CB
11962	.f403		85 f6		sta $f6		                sta $F6
11963	.f405		ad cc 03	lda $03cc	                lda $03CC
11964	.f408		85 f7		sta $f7		                sta $F7
11965	.f40a		a5 f5		lda $f5		                lda $F5
11966	.f40c		60		rts		                rts

11968	.f40d						tidyUpAfterKeyboardProcessing:
11969	.f40d		a2 ff		ldx #$ff	                ldx #$FF
11970	.f40f		a5 ec		lda $ec		                lda lastKeyPressedInternal
11971	.f411		05 ed		ora $ed		                ora firstKeyPressedInternal
11972	.f413		d0 06		bne $f41b	                bne +                    ;taken if any keys pressed
11973	.f415		a9 81		lda #$81	                lda #$81
11974	.f417		8d 4e fe	sta $fe4e	                sta systemVIA.ier            ;re-enable keyboard IRQ
11975	.f41a		e8		inx		                inx                          ;X=0
11976	.f41b						+
11977	.f41b		8e 42 02	stx $0242	                stx keyboardSemaphore
11978	.f41e						updateKeyboardLEDs:
11979	.f41e		08		php		                php
11980	.f41f		ad 5a 02	lda $025a	                lda keyboardStatusByte
11981	.f422		4a		lsr a		                lsr a

11983							                ; bit 3 = caps lock off
11984							                ; bit 4 = shift lock off
11985	.f423		29 18		and #$18	                and #(keyboardStatusByte.capsLockDisengaged|keyboardStatusByte.shiftLockDisengaged)>>1
11986	.f425		09 06		ora #$06	                ora #$06                     ;latch B6 - caps lock
11987	.f427		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;update caps lock LED
11988	.f42a		4a		lsr a		                lsr a                        ;bit 3 = shift lock off
11989	.f42b		09 07		ora #$07	                ora #$07                     ;latch B7 - shift lock
11990	.f42d		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;update shift lock LED
11991	.f430		20 4b f6	jsr $f64b	                jsr enableKeyboardScanning
11992	.f433		68		pla		                pla
11993	.f434		60		rts		                rts

11995							; KEYV handler
11996							; ============
11997	.f435						keyEntryPoint:
11998	.f435		50 0a		bvc $f441	                bvc keyVClear
11999	.f437		a9 01		lda #$01	                lda #$01
12000	.f439		8d 4e fe	sta $fe4e	                sta systemVIA.ier
12001	.f43c		b0 08		bcs $f446	                bcs keyboardTimerInterrupt
12002	.f43e		4c 8e f5	jmp $f58e	                jmp keyPressedInterrupt

12004	.f441						keyVClear:
12005	.f441		90 06		bcc $f449	                bcc keyTestSHIFTAndCTRLOrTimerInterrupt
12006	.f443		4c 45 f6	jmp $f645	                jmp scanKeyboard

12008	.f446						keyboardTimerInterrupt:
12009	.f446		ee 42 02	inc $0242	                inc keyboardSemaphore

12011							;-------------------------------------------------------------------------
12012							;
12013							; Test Shift & Ctrl keys, or deal with timer interrupt.
12014							;
12015							; Entry: C=0 if KEYV V=0 C=0 - test SHIFT+CTRL keys
12016							;        C=1 if KEYV V=1 C=1 - keyboard timer interrupt
12017							;
12018	.f449						keyTestSHIFTAndCTRLOrTimerInterrupt:
12019	.f449		ad 5a 02	lda $025a	                lda keyboardStatusByte
12020	.f44c		29 b7		and #$b7	                and #~(keyboardStatusByte.shiftPressed|keyboardStatusByte.ctrlPressed)
12021	.f44e		a2 00		ldx #$00	                ldx #key_shift
12022	.f450		20 ac f5	jsr $f5ac	                jsr interrogateKeyboard      ;X=$80 if SHIFT pressed
12023	.f453		90 02		bcc $f457	                bcc +                        ;taken if testing
12024							                                             ;SHIFT+CTRL only
12025	.f455		86 fa		stx $fa		                stx SEIWKA                   ;b7 set if SHIFT pressed
12026	.f457						+
12027	.f457		b8		clv		                clv                        ;V=0
12028	.f458		10 05		bpl $f45f	                bpl testCTRL               ;taken if SHIFT not pressed
12029	.f45a		2c 6c e3	bit $e36c	                bit valueFF                ;V=1 N=1
12030	.f45d		09 08		ora #$08	                ora #keyboardStatusByte.shiftPressed
12031	.f45f						testCTRL:
12032	.f45f		e8		inx		                inx                          ;X=1 - key_ctrl
12033	.f460		20 ac f5	jsr $f5ac	                jsr interrogateKeyboard
12034	.f463		90 b9		bcc $f41e	                bcc updateKeyboardLEDs ;taken if testing SHIFT+CTRL only
12035	.f465		10 02		bpl $f469	                bpl updateKeyboardStatusByte ;taken if CTRL not pressed
12036	.f467		09 40		ora #$40	                ora #keyboardStatusByte.ctrlPressed
12037	.f469						updateKeyboardStatusByte:
12038	.f469		8d 5a 02	sta $025a	                sta keyboardStatusByte
12039	.f46c		a6 ec		ldx $ec		                ldx lastKeyPressedInternal
12040	.f46e		f0 4d		beq $f4bd	                beq braRolloverChecks        ;taken if no key pressed
12041	.f470		20 ac f5	jsr $f5ac	                jsr interrogateKeyboard      ;still pressed?
12042	.f473		30 0d		bmi $f482	                bmi checkForKeyAutoRepeat    ;taken if still pressed
12043	.f475		e4 ec		cpx $ec		                cpx lastKeyPressedInternal   ;X=0 at this point
12044	.f477						storeLastKeyPressed:
12045	.f477		86 ec		stx $ec		                stx lastKeyPressedInternal   ;update last key pressed
12046	.f479		d0 42		bne $f4bd	                bne braRolloverChecks  ;taken if still nothing pressed
12047	.f47b		64 ec		stz $ec		                stz lastKeyPressedInternal   ;reset last key pressed
12048	.f47d						resetAutoRepeatAndContinue:
12049	.f47d		20 9e f5	jsr $f59e	                jsr resetAutoRepeatCounters
12050	.f480		80 3b		bra $f4bd	                bra braRolloverChecks

12052	.f482						checkForKeyAutoRepeat:
12053	.f482		e4 ec		cpx $ec		                cpx lastKeyPressedInternal
12054	.f484		d0 f1		bne $f477	                bne storeLastKeyPressed      ;taken if new key pressed
12055	.f486		a5 e7		lda $e7		                lda autoRepeatCountdownTimer
12056	.f488		f0 33		beq $f4bd	                beq braRolloverChecks      ;taken if countdown timer 0
12057	.f48a		c6 e7		dec $e7		                dec autoRepeatCountdownTimer ;timer--
12058	.f48c		d0 2f		bne $f4bd	                bne braRolloverChecks        ;taken if timer newly 0
12059	.f48e		ad ca 02	lda $02ca	                lda keyboardFirstAutoRepeatCount
12060	.f491		85 e7		sta $e7		                sta autoRepeatCountdownTimer
12061	.f493		ad 55 02	lda $0255	                lda keyboardAutoRepeatRate
12062	.f496		8d ca 02	sta $02ca	                sta keyboardFirstAutoRepeatCount
12063	.f499		ad 5a 02	lda $025a	                lda keyboardStatusByte
12064	.f49c		a6 ec		ldx $ec		                ldx lastKeyPressedInternal
12065	.f49e		e0 d0		cpx #$d0	                cpx #$80|key_shift_lock
12066	.f4a0		f0 12		beq $f4b4	                beq shiftLockPressed
12067	.f4a2		e0 c0		cpx #$c0	                cpx #$80|key_caps_lock
12068							                .if version>=511||version==350
12069	.f4a4		d0 1a		bne $f4c0	                bne LF5E5_511
12072							                .endif
12073	.f4a6						capsLockPressed:
12074	.f4a6		09 a0		ora #$a0	                ora #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
12075	.f4a8		24 fa		bit $fa		                bit SEIWKA                   ;test SHIFT status
12076	.f4aa		10 04		bpl $f4b0	                bpl +                        ;taken if SHIFT not pressed
12077							                ; Do the SHIFT+CAPS LOCK thing
12078	.f4ac		09 10		ora #$10	                ora #keyboardStatusByte.capsLockDisengaged
12079	.f4ae		49 80		eor #$80	                eor #keyboardStatusByte.shiftEnabled
12080	.f4b0						+
12081	.f4b0		49 90		eor #$90	                eor #keyboardStatusByte.shiftEnabled|keyboardStatusByte.capsLockDisengaged
12082	.f4b2		80 04		bra $f4b8	                bra resetKeyboardStatusAndTimer

12084	.f4b4						shiftLockPressed:
12085	.f4b4		09 90		ora #$90	                ora #keyboardStatusByte.shiftEnabled|keyboardStatusByte.capsLockDisengaged
12086	.f4b6		49 a0		eor #$a0	                eor #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
12087	.f4b8						resetKeyboardStatusAndTimer:
12088	.f4b8		8d 5a 02	sta $025a	                sta keyboardStatusByte
12089	.f4bb		64 e7		stz $e7		                stz autoRepeatCountdownTimer
12090	.f4bd						braRolloverChecks:
12091							                .if version<500&&version!=350
12093							                .else
12094	.f4bd		4c 6e f5	jmp $f56e	                jmp keyboardRolloverChecks
12095							                .endif

12097							;-------------------------------------------------------------------------

12099							                .if version>=511||version==350
12100	.f4c0						LF5E5_511:
12101	.f4c0		2c 3d 02	bit $023d	                bit keyboardTranslationTableAddress+1
12102	.f4c3		30 1e		bmi $f4e3	                bmi getASCIICode
12103	.f4c5		da		phx		                phx
12104	.f4c6		da		phx		                phx
12105	.f4c7		7a		ply		                ply
12106	.f4c8		a2 30		ldx #$30	                ldx #romServiceCall30
12107	.f4ca		20 c3 ed	jsr $edc3	                jsr makeROMServiceCall
12108	.f4cd		d0 13		bne $f4e2	                bne LF607
12109	.f4cf		fa		plx		                plx
12110	.f4d0		98		tya		                tya
12111	.f4d1		6a		ror a		                ror a
12112	.f4d2		6a		ror a		                ror a
12113	.f4d3		90 02		bcc $f4d7	                bcc LF5FC
12114	.f4d5		64 e7		stz $e7		                stz autoRepeatCountdownTimer
12115	.f4d7						LF5FC:
12116	.f4d7		30 e4		bmi $f4bd	                bmi braRolloverChecks
12117	.f4d9		ad 3c 02	lda $023c	                lda keyboardTranslationTableAddress+0
12118	.f4dc		2c 3d 02	bit $023d	                bit keyboardTranslationTableAddress+1
12119							                .if version==350
12120	.f4df		4c 53 f5	jmp $f553	                jmp LF839
12123							                .endif

12125	.f4e2						LF607:
12126	.f4e2		fa		plx		                plx
12127							                .endif
12128							;-------------------------------------------------------------------------
12129							;
12130							; Convert internal key number (with bit 7 set) to ASCII code, taking
12131							; into account state of CTRL, SHIFT, CAPS LOCK and SHIFT LOCK.
12132							;
12133	.f4e3						getASCIICode:
12134							                ; -$80 to adjust for bit 7 set; -16 because
12135							                ; interesting keys start at 16
12136	.f4e3		bd 2e f5	lda $f52e,x	                lda keyTranslationTable-$80-16,x
12137							                .if version>=500
12153							                .endif
12154	.f4e6		f0 08		beq $f4f0	                beq handleTAB                ;taken if TAB
12155	.f4e8		c9 9d		cmp #$9d	                cmp #$9D                     ;was it key_numpad_return?
12156							                .if version<500&&version!=350
12158							                .else
12159	.f4ea		d0 07		bne $f4f3	                bne LF5FD
12160							                .endif

12162							                ;Transform $9d into $8d, aka 13|$80. ($8d is already
12163							                ; used in the table for right arrow.)
12164	.f4ec		49 10		eor #$10	                eor #$10
12165	.f4ee		80 0f		bra $f4ff	                bra getNumpadASCIICode

12167	.f4f0						handleTAB:
12168	.f4f0		ad 6b 02	lda $026b	                lda tabKeyCode
12169							                .if version>=500
12196							                .elsif version==350
12197	.f4f3						LF5FD:
12198	.f4f3		2c 6c e3	bit $e36c	                bit valueFF
12199	.f4f6		c9 90		cmp #$90	                cmp #$90
12200	.f4f8		90 01		bcc $f4fb	                bcc handleKey
12201	.f4fa		b8		clv		                clv
12202							                .endif
12203	.f4fb						handleKey:
12204	.f4fb		c9 a0		cmp #$a0	                cmp #$A0                     ;numpad key?
12205	.f4fd		90 0e		bcc $f50d	                bcc processModifiers         ;taken if not
12206	.f4ff						getNumpadASCIICode:
12207							                .if version>=500||version==350
12208	.f4ff		08		php		                php
12209							                .endif
12210							                ; C=1 at this point
12211	.f500		e9 31		sbc #$31	                sbc #'0'+1      ;+1 to compensate for C=1 in the next
12212							                                ;addition
12213	.f502		6d 7e 02	adc $027e	                adc numericKeypadInterpretation ;form actual ASCII value
12214							                .if version>=500||version==350
12215	.f505		28		plp		                plp
12216							                .endif
12217	.f506		49 80		eor #$80	                eor #$80                     ;clear bit 7
12218	.f508		ae 8e 02	ldx $028e	                ldx numericKeypadShiftEffect ;does SHIFT affect the
12219							                                             ;keypad?
12220	.f50b		d0 46		bne $f553	                bne LF839                    ;taken if no
12221	.f50d						processModifiers:
12222	.f50d		ae 5a 02	ldx $025a	                ldx keyboardStatusByte
12223	.f510		86 fa		stx $fa		                stx SEIWKA
12224	.f512		26 fa		rol $fa		                rol SEIWKA                  ;b7 = ctrlPressed
12225	.f514		10 0a		bpl $f520	                bpl testShiftLock           ;taken if ctrl not pressed
12226	.f516		a6 ed		ldx $ed		                ldx firstKeyPressedInternal
12227	.f518						localResetAutoRepeatAndContinue:
12228							                .if version<500&&version!=350
12231							                .else
12232	.f518		f0 03		beq $f51d	                beq +
12233	.f51a		4c 7d f4	jmp $f47d	                jmp resetAutoRepeatAndContinue
12234	.f51d						+
12235	.f51d		20 c0 f2	jsr $f2c0	                jsr implementCTRLCodes
12236							                .endif
12237	.f520						testShiftLock:
12238	.f520		26 fa		rol $fa		                rol SEIWKA                   ;b7 = shiftLockDisengaged
12239	.f522		30 07		bmi $f52b	                bmi testCapsLock             ;taken if shift lock off
12240	.f524		20 94 f2	jsr $f294	                jsr implementShift           ;shift lock on - apply shift
12241	.f527		26 fa		rol $fa		                rol SEIWKA                   ;b7 = capsLockDisengaged
12242	.f529		80 0c		bra $f537	                bra testShiftEnabled

12244	.f52b						testCapsLock:
12245	.f52b		26 fa		rol $fa		                rol SEIWKA                   ;b7 = capsLockDisengaged
12246	.f52d		30 0d		bmi $f53c	                bmi testShift                ;taken if caps lock off
12247	.f52f		20 43 ea	jsr $ea43	                jsr isLetter
12248	.f532		b0 08		bcs $f53c	                bcs testShift                ;taken if not a letter
12249	.f534		20 94 f2	jsr $f294	                jsr implementShift ;letter + caps lock - make upper case
12250	.f537						testShiftEnabled:
12251	.f537		ae 5a 02	ldx $025a	                ldx keyboardStatusByte       ;b7 = shiftEnabled
12252	.f53a		10 0b		bpl $f547	                bpl testEscape               ;taken if not shiftEnabled
12253	.f53c						testShift:
12254	.f53c		26 fa		rol $fa		                rol SEIWKA                   ;b7 = shiftPressed
12255	.f53e		10 07		bpl $f547	                bpl testEscape               ;taken if not shiftPressed
12256	.f540		a6 ed		ldx $ed		                ldx firstKeyPressedInternal
12257	.f542		d0 d4		bne $f518	                bne localResetAutoRepeatAndContinue
12258	.f544		20 94 f2	jsr $f294	                jsr implementShift
12259	.f547						testEscape:
12260	.f547		cd 6c 02	cmp $026c	                cmp escapeCharacter
12261	.f54a		d0 07		bne $f553	                bne LF839
12262	.f54c		ae 75 02	ldx $0275	                ldx escapeKeyStatus
12263	.f54f		d0 02		bne $f553	                bne LF839
12264	.f551		64 e7		stz $e7		                stz autoRepeatCountdownTimer

12266	.f553						LF839:

12268							                .if version==350

12270	.f553		a8		tay		                tay
12271	.f554		50 02		bvc $f558	                bvc LF54A
12272	.f556		d0 0b		bne $f563	                bne LF555
12273	.f558						LF54A:
12274	.f558		98		tya		                tya
12275	.f559		f0 02		beq $f55d	                beq LF54F
12276	.f55b		10 06		bpl $f563	                bpl LF555
12277	.f55d						LF54F:
12278	.f55d		20 e1 f6	jsr $f6e1	                jsr LF6D3
12279	.f560		90 09		bcc $f56b	                bcc LF55D_350
12280	.f562		a8		tay		                tay
12281	.f563						LF555:
12282	.f563		ad 59 02	lda $0259	                lda keyboardStatus
12283	.f566		d0 03		bne $f56b	                bne LF55D_350
12284	.f568		20 53 ea	jsr $ea53	                jsr insertCharacterIntoKeyboardBufferWithTST
12285	.f56b						LF55D_350:
12286	.f56b		20 d5 f6	jsr $f6d5	                jsr enableKeyboardScanningFlippingInterrupts

12384							                .endif

12386	.f56e						keyboardRolloverChecks:
12387	.f56e		a6 ed		ldx $ed		                ldx firstKeyPressedInternal
12388	.f570		f0 09		beq $f57b	                beq LF852                    ;taken if 1 key down
12389	.f572		20 ac f5	jsr $f5ac	                jsr interrogateKeyboard      ;test first key pressed
12390	.f575		86 ed		stx $ed		                stx firstKeyPressedInternal  ;save it
12391	.f577		30 18		bmi $f591	                bmi LF868                    ;taken if still pressed
12392	.f579		64 ed		stz $ed		                stz firstKeyPressedInternal  ;reset first key
12393	.f57b						LF852:
12394	.f57b		a0 ec		ldy #$ec	                ldy #lastKeyPressedInternal
12395	.f57d		20 9b f6	jsr $f69b	                jsr scanKeyboardWithExclusion
12396	.f580		30 09		bmi $f58b	                bmi LF862
12397	.f582		a5 ec		lda $ec		                lda lastKeyPressedInternal
12398	.f584		85 ed		sta $ed		                sta firstKeyPressedInternal
12399	.f586						updateLastKeyPressedInternal:
12400	.f586		86 ec		stx $ec		                stx lastKeyPressedInternal
12401	.f588		20 9e f5	jsr $f59e	                jsr resetAutoRepeatCounters
12402	.f58b						LF862:
12403	.f58b		4c 0d f4	jmp $f40d	                jmp tidyUpAfterKeyboardProcessing

12405	.f58e						keyPressedInterrupt:
12406	.f58e		20 ac f5	jsr $f5ac	                jsr interrogateKeyboard
12407	.f591						LF868:
12408	.f591		a5 ec		lda $ec		                lda lastKeyPressedInternal
12409	.f593		d0 f6		bne $f58b	                bne LF862
12410	.f595		a0 ed		ldy #$ed	                ldy #firstKeyPressedInternal
12411	.f597		20 9b f6	jsr $f69b	                jsr scanKeyboardWithExclusion
12412	.f59a		30 ef		bmi $f58b	                bmi LF862
12413	.f59c		80 e8		bra $f586	                bra updateLastKeyPressedInternal

12415	.f59e						resetAutoRepeatCounters:
12416	.f59e		a2 01		ldx #$01	                ldx #$01
12417	.f5a0		86 e7		stx $e7		                stx autoRepeatCountdownTimer
12418	.f5a2		ae 54 02	ldx $0254	                ldx keyboardAutoRepeatDelay
12419	.f5a5		8e ca 02	stx $02ca	                stx keyboardFirstAutoRepeatCount
12420	.f5a8		60		rts		                rts

12422							;-------------------------------------------------------------------------
12423							;
12424							; Read a single key's state from the keyboard
12425							;
12426							; Entry:
12427							;
12428							; X = key to test
12429							;
12430							; Exit:
12431							;
12432							; X=$80, N=1 if key pressed; X=$00, N=0 if key not pressed
12433							;
12434							; Preserves: A/C
12435							;
12436							                .if version==350
12437	.f5a9						setTSTAndInterrogateKeyboard:
12438	.f5a9		20 6a f3	jsr $f36a	                jsr callWithTST
12439							                .endif
12440	.f5ac						interrogateKeyboard:
12441	.f5ac		a0 03		ldy #$03	                ldy #$03                     ;write to keyboard
12442	.f5ae		8c 40 fe	sty $fe40	                sty systemVIA.orb
12443	.f5b1		a0 7f		ldy #$7f	                ldy #$7F
12444	.f5b3		8c 43 fe	sty $fe43	                sty systemVIA.ddra           ;bit 7=input, bits 6-0=output
12445	.f5b6		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake ;store key value
12446	.f5b9		ea		nop		                nop
12447	.f5ba		ae 4f fe	ldx $fe4f	                ldx systemVIA.iraNoHandshake ;read key state
12448	.f5bd		60		rts		                rts

12450							; Default keyboard table
12451							; ======================

12453	.f5be						keyTranslationTable:
12454	>f5be		71				                .text "q"                    ;10 q
12455	>f5bf		33				                .byte "3"                    ;11 3
12456	>f5c0		34				                .byte "4"                    ;12 4
12457	>f5c1		35				                .byte "5"                    ;13 5
12458	>f5c2		84				                .byte $84                    ;14 f4
12459	>f5c3		38				                .text "8"                    ;15 8
12460	>f5c4		87				                .byte $87                    ;16 f7
12461	>f5c5		2d				                .text "-"                    ;17 minus
12462	>f5c6		5e				                .text "^"                    ;18 caret
12463	>f5c7		8c				                .byte $8C                    ;19 left
12464	>f5c8		b6				                .byte "6"|$80                ;1a numpad_6
12465	>f5c9		b7				                .byte "7"|$80                ;1b numpad_7
12466	.f5ca						osbyte92:
12467	.f5ca		bc 00 fc	ldy $fc00,x	                ldy $FC00,x                  ;1c 1d 1e
12468	.f5cd		60		rts		                rts                          ;1f

12470							                .cerror *-keyTranslationTable!=16,'oops'
12471	>f5ce		80				                .byte $80                    ;20 f0
12472	>f5cf		77				                .text "w"                    ;21 w
12473	>f5d0		65				                .text "e"                    ;22 e
12474	>f5d1		74				                .text "t"                    ;23 t
12475	>f5d2		37				                .text "7"                    ;24 7
12476	>f5d3		69				                .text "i"                    ;25 i
12477	>f5d4		39				                .text "9"                    ;26 9
12478	>f5d5		30				                .text "0"                    ;27 0
12479	>f5d6		5f				                .text "_"                    ;28 underline
12480	>f5d7		8e				                .byte $8E                    ;29 down
12481	>f5d8		b8				                .byte "8"|$80                ;2a numpad_8
12482	>f5d9		b9				                .byte "9"|$80                ;2b numpad_9
12483	.f5da						osbyte94:
12484	.f5da		bc 00 fd	ldy $fd00,x	                ldy $FD00,x                  ;2c 2d 2e
12485	.f5dd		60		rts		                rts                          ;2f

12487							                .cerror *-keyTranslationTable!=32,'oops'
12488	>f5de		31				                .text "1"                    ;30 1
12489	>f5df		32				                .text "2"                    ;31 2
12490	>f5e0		64				                .text "d"                    ;32 d
12491	>f5e1		72				                .text "r"                    ;33 r
12492	>f5e2		36				                .text "6"                    ;34 6
12493	>f5e3		75				                .text "u"                    ;35 u
12494	>f5e4		6f				                .text "o"                    ;36 o
12495	>f5e5		70				                .text "p"                    ;37 p
12496	>f5e6		5b				                .text "["                    ;38 left_square_bracket
12497	>f5e7		8f				                .byte $8F                    ;39 up
12498	>f5e8		ab				                .byte "+"|$80                ;3a numpad_plus
12499	>f5e9		ad				                .byte "-"|$80                ;3b numpad_minus
12500	>f5ea		9d				                .byte $9D                    ;3c numpad_return
12501	.f5eb						LF8BF:
12502	.f5eb		6c 20 02	jmp ($0220)	                jmp (EVENTV)                 ;3d 3e 3f
12503							                .cerror *-keyTranslationTable!=48,'oops'
12504	>f5ee		01				                .byte 1                      ;40 caps_lock
12505	>f5ef		61				                .text "a"                    ;41 a
12506	>f5f0		78				                .text "x"                    ;42 x
12507	>f5f1		66				                .text "f"                    ;43 f
12508	>f5f2		79				                .text "y"                    ;44 y
12509	>f5f3		6a				                .text "j"                    ;45 j
12510	>f5f4		6b				                .text "k"                    ;46 k
12511							                .if version<500
12512	>f5f5		40				                .text "@"                    ;47 at
12515							                .endif
12516	>f5f6		3a				                .text ":"                    ;48 colon
12517	>f5f7		0d				                .byte $0D                    ;49 return
12518	>f5f8		af				                .byte "/"|$80                ;4a numpad_divide
12519	>f5f9		ff				                .byte 127|$80                ;4b numpad_delete
12520	>f5fa		ae				                .byte "."|$80                ;4c numpad_stop
12521	.f5fb						call1MHzBusHook:
12522	.f5fb		6c fe fd	jmp ($fdfe)	                jmp ($FDFE)                  ;4d 4e 4f

12524							                .cerror *-keyTranslationTable!=64,'oops'
12525	>f5fe		02				                .byte 2                      ;50 shift_lock
12526	>f5ff		73				                .text "s"                    ;51 s
12527	>f600		63				                .text "c"                    ;52 c
12528	>f601		67				                .text "g"                    ;53 g
12529	>f602		68				                .text "h"                    ;54 h
12530	>f603		6e				                .text "n"                    ;55 n
12531	>f604		6c				                .text "l"                    ;56 l
12532	>f605		3b				                .text ";"                    ;57 semicolon
12533	>f606		5d				                .text "]"                    ;58 right_square_bracket
12534	>f607		7f				                .byte $7F                    ;59 delete
12535	>f608		a3				                .byte "#"|$80                ;5a numpad_hash
12536	>f609		aa				                .byte "*"|$80                ;5b numpad_multiply
12537	>f60a		ac				                .byte ","|$80                ;5c numpad_comma
12538	.f60b						callSEIWKA:
12539	.f60b		6c fa 00	jmp ($00fa)	                jmp (SEIWKA)                 ;5d 5e 5f
12540							                .cerror *-keyTranslationTable!=80,'oops'
12541	>f60e		00				                .byte 0                      ;60 tab
12542	>f60f		7a				                .text "z"                    ;61 z
12543	>f610		20				                .text " "                    ;62 space
12544	>f611		76				                .text "v"                    ;63 v
12545	>f612		62				                .text "b"                    ;64 b
12546	>f613		6d				                .text "m"                    ;65 m
12547	>f614		2c				                .text ","                    ;66 comma
12548	>f615		2e				                .text "."                    ;67 stop
12549	>f616		2f				                .text "/"                    ;68 divide
12550	>f617		8b				                .byte $8B                    ;69 copy
12551	>f618		b0				                .byte "0"|$80                ;6a numpad_0
12552	>f619		b1				                .byte "1"|$80                ;6b numpad_1
12553	>f61a		b3				                .byte "3"|$80                ;6c numpad_3
12554	>f61b		00				                .byte 0                      ;6d
12555	>f61c		00				                .byte 0                      ;6e
12556	>f61d		00				                .byte 0                      ;6f
12557							                .cerror *-keyTranslationTable!=96,'oops'
12558	>f61e		1b				                .byte 27                     ;70 escape
12559	>f61f		81				                .byte $81                    ;71 f1
12560	>f620		82				                .byte $82                    ;72 f2
12561	>f621		83				                .byte $83                    ;73 f3
12562	>f622		85				                .byte $85                    ;74 f5
12563	>f623		86				                .byte $86                    ;75 f6
12564	>f624		88				                .byte $88                    ;76 f8
12565	>f625		89				                .byte $89                    ;77 f9
12566	>f626		5c				                .byte $5C                    ;78 backslash
12567	>f627		8d				                .byte $8D                    ;79 right
12568	>f628		b4				                .byte "4"|$80                ;7a numpad_4
12569	>f629		b5				                .byte "5"|$80                ;7b numpad_5
12570	>f62a		b2				                .byte "2"|$80                ;7c numpad_2
12571	.f62b						LF8FF:
12572	.f62b		2c 6c e3	bit $e36c	                bit valueFF                  ; Set V
12573	.f62e						callKEYV:
12574	.f62e		6c 28 02	jmp ($0228)	                jmp (KEYV)                   ; Jump to KEYV

12576							;-------------------------------------------------------------------------
12577							;
12578							; OSBYTE 131 (&83) - Read Operating System High Water Mark (OSHWM)
12579							;
12580							; MasRef D.2-40
12581							;
12582	.f631						osbyte83:
12583	.f631		ac 44 02	ldy $0244	                ldy oshwm
12584	.f634		a2 00		ldx #$00	                ldx #$00
12585	.f636		60		rts		                rts

12587							;-------------------------------------------------------------------------
12588							;
12589							; OSBYTE 120 ($78) - Write keys pressed information
12590							;
12591							; MasRef D.2-33
12592							;
12593	.f637						osbyte78:                          ;f90b
12594	.f637		84 ec		sty $ec		                sty lastKeyPressedInternal
12595	.f639		86 ed		stx $ed		                stx firstKeyPressedInternal
12596	.f63b		60		rts		                rts

12598							;-------------------------------------------------------------------------
12599							;
12600							; OSBYTE 122 (&7A) Keyboard scan from 16 decimal
12601							;
12602							; MasRef D.2-36
12603							;
12604							                .if version==350
12605	.f63c						setTSTAndOSBYTE7A:
12606	.f63c		20 6a f3	jsr $f36a	                jsr callWithTST
12607							                .endif
12608	.f63f						osbyte7A:
12609	.f63f		a2 10		ldx #$10	                ldx #$10
12610	.f641		b8		clv		                clv
12611	.f642		38		sec		                sec
12612	.f643		80 e9		bra $f62e	                bra callKEYV

12614							;-------------------------------------------------------------------------

12616	.f645						scanKeyboard:
12617	.f645		8a		txa		                txa
12618	.f646		10 0a		bpl $f652	                bpl LF923
12619	.f648		20 ac f5	jsr $f5ac	                jsr interrogateKeyboard
12620	.f64b						enableKeyboardScanning:
12621	.f64b		a9 0b		lda #$0b	                lda #8|3                     ;set latch B3 - auto scan mode
12622	.f64d		8d 40 fe	sta $fe40	                sta systemVIA.orb            ;set auto scan mode
12623	.f650		8a		txa		                txa
12624	.f651		60		rts		                rts

12626	.f652						LF923:
12627	.f652		8e cb 02	stx $02cb	                stx previousKeyPressedWhenReadingLastKey
12628	.f655		a9 ff		lda #$ff	                lda #$FF
12629	.f657		8d cc 02	sta $02cc	                sta previousKeyPressedWhenReadingFirstKey
12630	.f65a		a2 0c		ldx #$0c	                ldx #$0C
12631	.f65c		a9 7f		lda #$7f	                lda #$7F
12632	.f65e		8d 43 fe	sta $fe43	                sta systemVIA.ddra
12633	.f661		a9 03		lda #$03	                lda #0|3            ;reset latch B3 - manual scan mode
12634	.f663		8d 40 fe	sta $fe40	                sta systemVIA.orb
12635	.f666						loopKeyboardColumns:
12636	.f666		a9 0f		lda #$0f	                lda #$0F
12637	.f668		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;select a non-existent column
12638	.f66b		a9 01		lda #$01	                lda #$01
12639	.f66d		8d 4d fe	sta $fe4d	                sta systemVIA.ifr            ;cancel keyboard interrupts
12640	.f670		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake ;select column
12641	.f673		2c 4d fe	bit $fe4d	                bit systemVIA.ifr            ;any key in this column
12642							                                             ;pressed?
12643	.f676		f0 1b		beq $f693	                beq tryNextKeyboardColumn    ;taken if no key
12644	.f678		8a		txa		                txa                          ;A = first key in column
12645	.f679						loopKeyboardRows:
12646	.f679		18		clc		                clc
12647	.f67a		69 10		adc #$10	                adc #$10                     ;next row
12648	.f67c		30 15		bmi $f693	                bmi tryNextKeyboardColumn    ;taken if done
12649	.f67e		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;store key
12650	.f681		2c 4f fe	bit $fe4f	                bit systemVIA.iraNoHandshake ;pressed?
12651	.f684		10 f3		bpl $f679	                bpl loopKeyboardRows         ;taken if not
12652	.f686		cd cb 02	cmp $02cb	                cmp previousKeyPressedWhenReadingLastKey
12653	.f689		90 ee		bcc $f679	                bcc loopKeyboardRows
12654	.f68b		cd cc 02	cmp $02cc	                cmp previousKeyPressedWhenReadingFirstKey
12655	.f68e		b0 e9		bcs $f679	                bcs loopKeyboardRows
12656	.f690		8d cc 02	sta $02cc	                sta previousKeyPressedWhenReadingFirstKey
12657	.f693						tryNextKeyboardColumn:
12658	.f693		ca		dex		                dex
12659	.f694		10 d0		bpl $f666	                bpl loopKeyboardColumns
12660	.f696		ae cc 02	ldx $02cc	                ldx previousKeyPressedWhenReadingFirstKey
12661	.f699		80 b0		bra $f64b	                bra enableKeyboardScanning

12663	.f69b						scanKeyboardWithExclusion:
12664	.f69b		a2 0c		ldx #$0c	                ldx #$0c
12665	.f69d						LF96E:
12666	.f69d		20 d5 f6	jsr $f6d5	                jsr enableKeyboardScanningFlippingInterrupts
12667	.f6a0		a9 7f		lda #$7f	                lda #$7F
12668	.f6a2		8d 43 fe	sta $fe43	                sta systemVIA.ddra
12669	.f6a5		a9 03		lda #$03	                lda #0|3
12670	.f6a7		8d 40 fe	sta $fe40	                sta systemVIA.orb
12671	.f6aa		a9 0f		lda #$0f	                lda #$0F
12672	.f6ac		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;select non-existent column
12673	.f6af		a9 01		lda #$01	                lda #$01
12674	.f6b1		8d 4d fe	sta $fe4d	                sta systemVIA.ifr            ;cancel keyboard interrupts
12675	.f6b4		8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake
12676	.f6b7		2c 4d fe	bit $fe4d	                bit systemVIA.ifr
12677	.f6ba		f0 20		beq $f6dc	                beq LF9AD
12678	.f6bc		8a		txa		                txa
12679	.f6bd						LF98E:
12680	.f6bd		18		clc		                clc
12681	.f6be		69 10		adc #$10	                adc #$10
12682	.f6c0		30 1a		bmi $f6dc	                bmi LF9AD                    ;taken if done
12683	.f6c2		8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;test key
12684	.f6c5		2c 4f fe	bit $fe4f	                bit systemVIA.iraNoHandshake ;pressed?
12685	.f6c8		10 f3		bpl $f6bd	                bpl LF98E                    ;taken if not
12686	.f6ca		48		pha		                pha                          ;save key number
12687	.f6cb						LF99C:
12688	.f6cb		59 00 00	eor $0000,y	                eor $0000,y                  ;compare to value
12689	.f6ce		0a		asl a		                asl a                        ;discard irrelevant bit 7
12690	.f6cf		c9 01		cmp #$01	                cmp #$01                     ;C set if different
12691	.f6d1		68		pla		                pla                          ;restore key number
12692	.f6d2		90 e9		bcc $f6bd	                bcc LF98E                    ;same key found - keep going
12693	.f6d4		aa		tax		                tax
12694	.f6d5						enableKeyboardScanningFlippingInterrupts:
12695	.f6d5		20 4b f6	jsr $f64b	                jsr enableKeyboardScanning
12696	.f6d8		58		cli		                cli
12697	.f6d9		78		sei		                sei
12698	.f6da		8a		txa		                txa
12699	.f6db		60		rts		                rts

12701	.f6dc						LF9AD:
12702	.f6dc		ca		dex		                dex
12703	.f6dd		10 be		bpl $f69d	                bpl LF96E
12704	.f6df		80 f4		bra $f6d5	                bra enableKeyboardScanningFlippingInterrupts

12706							;-------------------------------------------------------------------------

12708							                .if version==400
12710							                .endif

12712							;-------------------------------------------------------------------------

12714							                .if version>=500
12735							                .endif

12737							;-------------------------------------------------------------------------

12739							                .if version>=500
12760							                .endif

12762							;-------------------------------------------------------------------------

12764							                .if version>=400
12766							                .endif

12768							;-------------------------------------------------------------------------

12770							                .if version>=400
12795							                .endif

12797							;-------------------------------------------------------------------------

12799							LF8D1Macro: .macro
12811							                .endmacro

12813							                .if version>=500
12815							                .endif

12817							;-------------------------------------------------------------------------

12819							                .if version>=400
12823							                .endif

12825							;-------------------------------------------------------------------------

12827							                .if version>=400
12831							                .endif

12833							;-------------------------------------------------------------------------

12835							                .if version>=400
12839							                .endif

12841							;-------------------------------------------------------------------------

12843							                .if version>=400
12847							                .endif

12849							;-------------------------------------------------------------------------

12851							                .if version==350
12852							                ; dup of what's called LF82B in MOS 5.00+
12853	.f6e1						LF6D3:
12854	.f6e1		48		pha		                pha
12855	.f6e2		a2 00		ldx #$00	                ldx #0
12856	.f6e4		b8		clv		                clv
12857	.f6e5		38		sec		                sec
12858	.f6e6		20 78 ec	jsr $ec78	                jsr countBufferViaCNPV
12859	.f6e9		98		tya		                tya
12860	.f6ea		d0 04		bne $f6f0	                bne LF6E2
12861	.f6ec		e0 02		cpx #$02	                cpx #bufferFirstOutput
12862	.f6ee		90 0a		bcc $f6fa	                bcc LF6EC
12863	.f6f0						LF6E2:
12864	.f6f0		ac 59 02	ldy $0259	                ldy keyboardStatus
12865	.f6f3		18		clc		                clc
12866	.f6f4		d0 04		bne $f6fa	                bne LF6EC
12867	.f6f6		20 53 ea	jsr $ea53	                jsr insertCharacterIntoKeyboardBufferWithTST
12868	.f6f9		38		sec		                sec
12869	.f6fa						LF6EC:
12870	.f6fa		68		pla		                pla
12871	.f6fb		60		rts		                rts
12872							                .endif

12874							;-------------------------------------------------------------------------
12875							;
12876							; OSBPUT [AUG p339]
12877							;
12878	.f6fc						osbputEntryPoint:
12879	.f6fc		20 e1 f7	jsr $f7e1	                jsr selectFSForHandle
12880	.f6ff		6c 18 02	jmp ($0218)	                jmp (BPUTV)

12882							;-------------------------------------------------------------------------
12883							;
12884							; OSBGET [AUG p338]
12885							;
12886	.f702						osbgetEntryPoint:
12887	.f702		20 e1 f7	jsr $f7e1	                jsr selectFSForHandle
12888	.f705		6c 16 02	jmp ($0216)	                jmp (BGETV)

12890							;-------------------------------------------------------------------------
12891							;
12892							; OSGBPB [AUG p339]
12893							;
12894	.f708						osgbpbEntryPoint: .proc
12895	.f708		c9 05		cmp #$05	                cmp #gbpbGetMediaMetadata
12896	.f70a		b0 15		bcs $f721	                bcs nonFileOperation
12897	.f70c		c9 00		cmp #$00	                cmp #$00
12898	.f70e		f0 11		beq $f721	                beq nonFileOperation

12900							                ; Handle OSGBPB call that's an operation on a file
12901							                ; handle. Select the appropriate FS, given the file
12902							                ; handle, and pass the request along.
12903	.f710		5a		phy		                phy                          ;save OSGBPB Y
12904	.f711		48		pha		                pha                          ;save OSGBPB A
12905	.f712		86 b0		stx $b0		                stx osgbpbWorkspace.ptr+0
12906	.f714		84 b1		sty $b1		                sty osgbpbWorkspace.ptr+1
12907	.f716		b2 b0		lda ($b0)	                lda (osgbpbWorkspace.ptr)    ;get file handle
12908	.f718		a8		tay		                tay
12909	.f719		68		pla		                pla                          ;restore OSGBPB A
12910	.f71a		20 e1 f7	jsr $f7e1	                jsr selectFSForHandle
12911	.f71d						passToCurrentFS:
12912	.f71d		7a		ply		                ply                          ;restore OSGBPB Y
12913	.f71e		6c 1a 02	jmp ($021a)	                jmp (GBPBV)

12915							;-------------------------------------------------------------------------
12916							;
12917							; Handle OSGBPB call that isn't an operation on a file handle. Select
12918							; current FS and pass the request along.
12919							;
12920	.f721						nonFileOperation:
12921	.f721		5a		phy		                phy
12922	.f722		da		phx		                phx
12923	.f723		48		pha		                pha
12924	.f724		20 08 ed	jsr $ed08	                jsr selectHAZEL
12925	.f727		ad 00 df	lda $df00	                lda hazel.currentFS
12926	.f72a		20 97 f8	jsr $f897	                jsr selectFS
12927	.f72d		68		pla		                pla
12928	.f72e		fa		plx		                plx
12929	.f72f		80 ec		bra $f71d	                bra passToCurrentFS
12930							                .endproc

12932							;-------------------------------------------------------------------------
12933							;
12934							; OSARGS [AUG p337[
12935							;
12936							;
12937	.f731						osargsEntryPoint: .proc
12938	.f731		c0 00		cpy #$00	                cpy #$00
12939	.f733		d0 2a		bne $f75f	                bne fileOperation            ;taken if file operation
12940	.f735		c9 04		cmp #$04	                cmp #$04
12941	.f737		b0 26		bcs $f75f	                bcs fileOperation ;taken if Y=0, A>=4 - honorary file operation
12942	.f739		48		pha		                pha
12943	.f73a		20 08 ed	jsr $ed08	                jsr selectHAZEL
12944	.f73d		68		pla		                pla
12945	.f73e		d0 04		bne $f744	                bne notGetFS
12946	.f740						getFS:
12947							                ; OSARGS Y=0 A=0 - read current FS number
12948	.f740		ad 00 df	lda $df00	                lda hazel.currentFS
12949	.f743		60		rts		                rts

12951	.f744						notGetFS:
12952	.f744		3a		dec a		                dec a
12953	.f745		d0 10		bne $f757	                bne notGetCommandLine
12954	.f747						getCommandLine:
12955							                ; OSARGS Y=0 A=1 - read command line tail address
12956	.f747		3a		dec a		                dec a                        ;A=$ff
12957	.f748		95 02		sta $02,x	                sta 2,x                    ;store full 32-bit address
12958	.f74a		95 03		sta $03,x	                sta 3,x                    ;store full 32-bit address
12959	.f74c		ad 04 df	lda $df04	                lda hazel.commandLinePointer+0
12960	.f74f		95 00		sta $00,x	                sta 0,x                    ;
12961	.f751		ad 05 df	lda $df05	                lda hazel.commandLinePointer+1
12962	.f754		95 01		sta $01,x	                sta 1,x
12963	.f756		60		rts		                rts

12965	.f757						notGetCommandLine:
12966	.f757		c9 01		cmp #$01	                cmp #argsCheckANFS-1    ;-1 due to the dec a above
12967	.f759		f0 03		beq $f75e	                beq rtsFA14            ; OSARGS Y=0 A=2 - Read OldNFS flag
12968	.f75b						getLibFS:
12969	.f75b		ad 02 df	lda $df02	                lda hazel.libFS      ;OSARGS Y=0 A=3 - Read libfs filing system number
12970	.f75e						rtsFA14:
12971	.f75e		60		rts		                rts

12973	.f75f						fileOperation:
12974							                ; Operating on a file. Select appropriate FS first.
12975	.f75f		20 e1 f7	jsr $f7e1	                jsr selectFSForHandle
12976							                .endproc


12979							;-------------------------------------------------------------------------
12980							;
12981							; Call current FS's OSARGS routine, bypassing the FileSwitch stuff.
12982							;
12983	.f762						callARGSV:                      ;fa18
12984	.f762		6c 14 02	jmp ($0214)	                jmp (ARGSV)

12986							;-------------------------------------------------------------------------
12987							;
12988							; OSFIND [AUG p342]
12989							;
12990	.f765						osfindEntryPoint: .proc
12991	.f765		09 00		ora #$00	                ora #$00        ;A=$00 if a file is to be closed
12992	.f767		f0 05		beq $f76e	                beq close       ;branch taken if closing a file
12993	.f769		20 b8 f7	jsr $f7b8	                jsr parseFileNameAndSelectFS       ;handle something other than a file close
12994	.f76c		80 03		bra $f771	                bra callFINDV

12996	.f76e						close:
12997	.f76e		20 e1 f7	jsr $f7e1	                jsr selectFSForHandle
12998	.f771						callFINDV:
12999	.f771		6c 1c 02	jmp ($021c)	                jmp (FINDV)
13000							                .pend

13002							;-------------------------------------------------------------------------
13003							;
13004							; OSFILE [AUG p335]
13005							;
13006	.f774						osfileEntryPoint:               ;fa2a
13007	.f774		da		phx		                phx
13008	.f775		5a		phy		                phy
13009	.f776		48		pha		                pha
13010	.f777		86 f2		stx $f2		                stx stringInputBufferAddress+0
13011	.f779		84 f3		sty $f3		                sty stringInputBufferAddress+1
13012	.f77b		a0 11		ldy #$11	                ldy #size(OSFILEParameterBlock)-1
13013	.f77d						-
13014	.f77d		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
13015	.f77f		99 ed 02	sta $02ed,y	                sta osfileParameterBlock,y
13016	.f782		88		dey		                dey
13017	.f783		10 f8		bpl $f77d	                bpl -
13018	.f785		ae ed 02	ldx $02ed	                ldx osfileParameterBlock+OSFILEParameterBlock.fileName+0
13019	.f788		ac ee 02	ldy $02ee	                ldy osfileParameterBlock+OSFILEParameterBlock.fileName+1
13020	.f78b		20 b8 f7	jsr $f7b8	                jsr parseFileNameAndSelectFS
13021	.f78e		8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
13022	.f791		8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
13023	.f794		68		pla		                pla
13024	.f795		a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
13025	.f797		a0 02		ldy #$02	                ldy #>osfileParameterBlock
13026	.f799		20 b5 f7	jsr $f7b5	                jsr callFILEV
13027	.f79c		7a		ply		                ply
13028	.f79d		84 f3		sty $f3		                sty stringInputBufferAddress+1
13029	.f79f		fa		plx		                plx
13030	.f7a0		86 f2		stx $f2		                stx stringInputBufferAddress+0
13031	.f7a2		48		pha		                pha
13032	.f7a3		a0 11		ldy #$11	                ldy #size(OSFILEParameterBlock)-1
13033	.f7a5						-
13034	.f7a5		b9 ed 02	lda $02ed,y	                lda osfileParameterBlock,y
13035	.f7a8		91 f2		sta ($f2),y	                sta (stringInputBufferAddress),y
13036	.f7aa		88		dey		                dey
13037	.f7ab		c0 02		cpy #$02	                cpy #$02                     ;don't overwrite file name
13038	.f7ad		b0 f6		bcs $f7a5	                bcs -
13039	.f7af		68		pla		                pla
13040	.f7b0		a6 f2		ldx $f2		                ldx stringInputBufferAddress+0
13041	.f7b2		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
13042	.f7b4		60		rts		                rts

13044	.f7b5						callFILEV:
13045	.f7b5		6c 12 02	jmp ($0212)	                jmp (FILEV)

13047							;-------------------------------------------------------------------------
13048							;
13049							; Parse file name. Handle (and skip) any -FS- tempfs syntax, selecting
13050							; the FS specified if required.
13051							;
13052							; entry:
13053							;
13054							; Y (MSB)/X (LSB) = address of file name string
13055							;
13056							; exit:
13057							;
13058							; Y (MSB)/X (LSB) = address of file name part
13059							;
13060							; - New FS may have been selected
13061							;
13062	.f7b8						parseFileNameAndSelectFS:
13063	.f7b8		48		pha		                pha
13064	.f7b9		a5 f2		lda $f2		                lda stringInputBufferAddress+0
13065	.f7bb		48		pha		                pha
13066	.f7bc		a5 f3		lda $f3		                lda stringInputBufferAddress+1
13067	.f7be		48		pha		                pha
13068	.f7bf		20 08 ed	jsr $ed08	                jsr selectHAZEL
13069	.f7c2		86 f2		stx $f2		                stx stringInputBufferAddress+0
13070	.f7c4		84 f3		sty $f3		                sty stringInputBufferAddress+1
13071	.f7c6		a0 00		ldy #$00	                ldy #$00
13072	.f7c8		20 f0 f7	jsr $f7f0	                jsr parseFileNameFS      ;find -FS- prefix, if any
13073	.f7cb		5a		phy		                phy                      ;save offset
13074	.f7cc		20 97 f8	jsr $f897	                jsr selectFS                 ;select desired FS
13075	.f7cf		68		pla		                pla
13076	.f7d0		18		clc		                clc
13077	.f7d1		65 f2		adc $f2		                adc stringInputBufferAddress+0
13078	.f7d3		aa		tax		                tax                          ;save string address LSB
13079	.f7d4		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
13080	.f7d6		90 01		bcc $f7d9	                bcc +
13081	.f7d8		c8		iny		                iny
13082	.f7d9						+
13083	.f7d9		68		pla		                pla
13084	.f7da		85 f3		sta $f3		                sta stringInputBufferAddress+1
13085	.f7dc		68		pla		                pla
13086	.f7dd		85 f2		sta $f2		                sta stringInputBufferAddress+0
13087	.f7df		68		pla		                pla
13088	.f7e0		60		rts		                rts

13090							;-------------------------------------------------------------------------
13091							;
13092							; Select appropriate FS for the given file handle.
13093							;
13094							; entry:
13095							;
13096							; Y = file handle
13097							;
13098							; exit:
13099							;
13100							; - appropriate FS selected
13101							;
13102							; preserves: Y/X/A

13104	.f7e1						selectFSForHandle:
13105	.f7e1		da		phx		                phx
13106	.f7e2		48		pha		                pha
13107	.f7e3		20 08 ed	jsr $ed08	                jsr selectHAZEL
13108	.f7e6		20 6d f8	jsr $f86d	                jsr findFSForHandle
13109	.f7e9		8a		txa		                txa
13110	.f7ea		20 97 f8	jsr $f897	                jsr selectFS
13111	.f7ed		68		pla		                pla
13112	.f7ee		fa		plx		                plx
13113	.f7ef		60		rts		                rts

13115							;-------------------------------------------------------------------------
13116							;
13117							; Parse the FS part of a file name, if any, and return the filing
13118							; system to use.
13119							;
13120							; Entry:
13121							;
13122							; (stringInputBufferAddress),y = the string
13123							;
13124							; Exit:
13125							;
13126							; A = FS number to use
13127							;
13128							; (stringInputBufferAddress),y = next char after any tempfs prefix has
13129							; been consumed
13130	.f7f0						parseFileNameFS: .proc

13132	.f7f0		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
13133	.f7f3		20 80 f2	jsr $f280	                jsr skipSpacesAndCheckForCRInStringInput
13134	.f7f6		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
13135	.f7f8		c9 2d		cmp #$2d	                cmp #'-'
13136	.f7fa		f0 0c		beq $f808	                beq parseFSNamePrefix ; branch taken if tempfs syntax
13137	.f7fc		2c c6 df	bit $dfc6	                bit hazel.tempFSFlag
13138	.f7ff		ad 00 df	lda $df00	                lda hazel.currentFS
13139	.f802		50 03		bvc $f807	                bvc +
13140	.f804		ad 01 df	lda $df01	                lda hazel.activeFS
13141	.f807						+
13142	.f807		60		rts		                rts

13144	.f808						parseFSNamePrefix:
13145	.f808		c8		iny		                iny
13146	.f809		a2 00		ldx #$00	                ldx #$00
13147	.f80b						LFAC1:
13148	.f80b		bd 06 df	lda $df06,x	                lda hazel.fsInfoBlocks,x ;get FS name char
13149	.f80e		f0 44		beq $f854	                beq badFilingSystemName
13150	.f810		8a		txa		                txa                      ;A=offset in info blocks
13151	.f811		18		clc		                clc
13152	.f812		69 08		adc #$08	                adc #size(fsInfoBlock.name)
13153	.f814		85 b0		sta $b0		                sta parseFileNameFSWorkspace.fsInfoOffset
13154	.f816		5a		phy		                phy
13155	.f817						compareFSNameLoop:
13156	.f817		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y

13158							; validate FS name char. Must be letter or digit.

13160	.f819		20 43 ea	jsr $ea43	                jsr isLetter
13161	.f81c		90 08		bcc $f826	                bcc validFSNameChar           ;branch taken if letter
13162	.f81e		c9 30		cmp #$30	                cmp #'0'
13163	.f820		90 1b		bcc $f83d	                bcc notValidFSNameChar       ;branch taken if not digit
13164	.f822		c9 3a		cmp #$3a	                cmp #'9'+1
13165	.f824		b0 17		bcs $f83d	                bcs notValidFSNameChar       ;branch taken if not digit
13166	.f826						validFSNameChar:
13167	.f826		e4 b0		cpx $b0		                cpx parseFileNameFSWorkspace.fsInfoOffset
13168	.f828		b0 0b		bcs $f835	                bcs nextFSInfoBlock ;branch taken if end of FS
13169							                                         ;info block name was reached
13170	.f82a		5d 06 df	eor $df06,x	                eor hazel.fsInfoBlocks,x
13171	.f82d		29 df		and #$df	                and #$DF                 ;Z=1 if char matches FS name
13172	.f82f		d0 04		bne $f835	                bne nextFSInfoBlock      ;branch taken if not a match
13173	.f831		e8		inx		                inx                      ;next fs info block byte
13174	.f832		c8		iny		                iny                      ;next input string byte
13175	.f833		80 e2		bra $f817	                bra compareFSNameLoop

13177	.f835						nextFSInfoBlock:
13178	.f835		7a		ply		                ply
13179	.f836		a6 b0		ldx $b0		                ldx parseFileNameFSWorkspace.fsInfoOffset ;offset of end of name
13180	.f838		e8		inx		                inx
13181	.f839		e8		inx		                inx
13182	.f83a		e8		inx		                inx             ;advance to next entry
13183	.f83b		80 ce		bra $f80b	                bra LFAC1

13185	.f83d						notValidFSNameChar:

13187							; Matching FS name must be terminated with -. Otherwise, it's bad
13188							; syntax, or perhaps an overly long name.

13190	.f83d		c9 2d		cmp #$2d	                cmp #'-'
13191	.f83f		d0 13		bne $f854	                bne badFilingSystemName
13192	.f841		c8		iny		                iny                       ;consume input '-'
13193	.f842		e4 b0		cpx $b0		                cpx parseFileNameFSWorkspace.fsInfoOffset
13194	.f844		f0 07		beq $f84d	                beq foundFSInfoBlock     ;branch taken if a match due
13195							                                         ;to being right at end of the
13196							                                         ;FS info block name
13197	.f846		bd 06 df	lda $df06,x	                lda hazel.fsInfoBlocks,x ;
13198	.f849		c9 20		cmp #$20	                cmp #' '
13199	.f84b		d0 e8		bne $f835	                bne nextFSInfoBlock      ;branch taken if not a match
13200							                                         ;as tthe supplied name was a
13201							                                         ;prefix of this FS's name
13202	.f84d						foundFSInfoBlock:
13203	.f84d		68		pla		                pla
13204	.f84e		a6 b0		ldx $b0		                ldx parseFileNameFSWorkspace.fsInfoOffset
13205	.f850		bd 08 df	lda $df08,x	                lda hazel.fsInfoBlocks+(fsInfoBlock.fsNumber-(fsInfoBlock.name+size(fsInfoBlock.name))),x
13206	.f853		60		rts		                rts

13208	.f854						badFilingSystemName:
13209	.f854		00		brk #		                brk
13210	>f855		f8 42 61 64 20 66 69 6c		                .text $f8,'Bad filing system name',0
	>f85d		69 6e 67 20 73 79 73 74 65 6d 20 6e 61 6d 65 00
13211							                .pend

13213							;-------------------------------------------------------------------------
13214							;
13215							; Find FS for the given handle
13216							;
13217							; entry:
13218							;
13219							; Y = file handle
13220							;
13221							; exit:
13222							;
13223							; X = FS number - will just use current FS if none suitable found
13224							;
13225	.f86d						findFSForHandle: .proc
13226	.f86d		48		pha		                pha                          ;
13227	.f86e		5a		phy		                phy                          ;
13228	.f86f		98		tya		                tya                          ;A = handle to search for
13229	.f870		a0 00		ldy #$00	                ldy #$00                     ;
13230	.f872						loop:
13231	.f872		be 06 df	ldx $df06,y	                ldx hazel.fsInfoBlocks.name+0,y
13232	.f875		f0 15		beq $f88c	                beq notFound                  ;taken if terminating entry
13233	.f877		d9 0e df	cmp $df0e,y	                cmp hazel.fsInfoBlocks.minHandle,y
13234	.f87a		90 07		bcc $f883	                bcc next                     ;taken if not this FS
13235	.f87c		d9 0f df	cmp $df0f,y	                cmp hazel.fsInfoBlocks.maxHandle,y
13236	.f87f		90 10		bcc $f891	                bcc found                    ;taken if this FS
13237	.f881		f0 0e		beq $f891	                beq found                    ;taken if this FS

13239	.f883						next:
13240	.f883		48		pha		                pha
13241	.f884		98		tya		                tya
13242	.f885		18		clc		                clc
13243	.f886		69 0b		adc #$0b	                adc #size(fsInfoBlock)
13244	.f888		a8		tay		                tay
13245	.f889		68		pla		                pla
13246	.f88a		80 e6		bra $f872	                bra loop

13248	.f88c						notFound:
13249	.f88c		ae 00 df	ldx $df00	                ldx hazel.currentFS
13250	.f88f		80 03		bra $f894	                bra done

13252	.f891						found:
13253	.f891		be 10 df	ldx $df10,y	                ldx hazel.fsInfoBlocks.fsNumber,y
13254	.f894						done:
13255	.f894		7a		ply		                ply
13256	.f895		68		pla		                pla
13257	.f896		60		rts		                rts
13258							                .endproc

13260							;-------------------------------------------------------------------------
13261							;
13262							; Select filing system in A.
13263							;
13264							; Entry:
13265							;
13266							; A = FS number
13267							;
13268	.f897						selectFS:                               ;fb4d
13269	.f897		cd 01 df	cmp $df01	                cmp hazel.activeFS      ; Check active fs
13270	.f89a		f0 16		beq $f8b2	                beq rtsFB68               ; Already active fs, return
13271	.f89c		5a		phy		                phy
13272	.f89d		da		phx		                phx
13273	.f89e		a8		tay		                tay
13274	.f89f		3a		dec a		                dec a
13275	.f8a0		d0 07		bne $f8a9	                bne LFB5F       ;taken if not FS 1 (tape)

13277							; ??? - only if trying to select tape FS

13279	.f8a2		a9 04		lda #$04	                lda #$04
13280	.f8a4		24 e2		bit $e2		                bit $E2
13281	.f8a6		d0 01		bne $f8a9	                bne LFB5F
13282	.f8a8		c8		iny		                iny
13283	.f8a9						LFB5F:
13284	.f8a9		5a		phy		                phy
13285	.f8aa		a2 12		ldx #$12	                ldx #romServiceCallInitialiseFilingSystem
13286	.f8ac		20 c3 ed	jsr $edc3	                jsr makeROMServiceCall
13287	.f8af		68		pla		                pla
13288	.f8b0		fa		plx		                plx
13289	.f8b1		7a		ply		                ply
13290	.f8b2						rtsFB68:
13291	.f8b2		60		rts		                rts

13293							;-------------------------------------------------------------------------
13294							;
13295							; FileSwitch FSC
13296							; ==============
13297							;
13298	.f8b3						fileswitchFSCEntryPoint:
13299	.f8b3		48		pha		                pha                          ;save request type
13300	.f8b4		20 08 ed	jsr $ed08	                jsr selectHAZEL
13301	.f8b7		4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
13302	.f8ba		68		pla		                pla                          ;restore request type
13303	.f8bb		48		pha		                pha                          ;save request type
13304	.f8bc		da		phx		                phx                          ;save request X
13305	.f8bd		0a		asl a		                asl a
13306	.f8be		aa		tax		                tax
13307	.f8bf		c9 17		cmp #$17	                cmp #11*2+1
13308	.f8c1		b0 03		bcs $f8c6	                bcs fileswitchPassFSCToCurrentFS ;taken if out of range
13309	.f8c3		7c cb f8	jmp ($f8cb,x)	                jmp (fileswitchFSCRoutinesTable,x)

13311							;-------------------------------------------------------------------------
13312							;
13313							; Pass to filing system's FSC
13314							;
13315							; There's 2 entry points - fileswitchPassFSCToCurrentFS, for
13316							; when X and A are both on the stack, and
13317							; fileswitchPassFSCToCurrentFS_X, for when only A is on the
13318							; stack.
13319							;
13320	.f8c6						fileswitchPassFSCToCurrentFS:
13321	.f8c6						fileswitchFSCNewFS:
13322	.f8c6						fileswitchFSCFileHandleRange:
13323	.f8c6						fileswitchFSCStarCommand:
13324	.f8c6		fa		plx		                plx                          ;restore request X
13325	.f8c7						fileswitchPassFSCToCurrentFS_X:
13326	.f8c7		68		pla		                pla                          ;restore request type
13327	.f8c8		6c da df	jmp ($dfda)	                jmp (hazel.activeFSCV) ;call active FS's real FSCV entry point

13329							;-------------------------------------------------------------------------
13330							;
13331							; FileSwitch FSC table
13332							;
13333	.f8cb						fileswitchFSCRoutinesTable:
13334	>f8cb		f0 f8				                .word fileswitchFSCOPT
13335	>f8cd		e9 f8				                .word fileswitchFSCCheckEOF
13336	>f8cf		fd f8				                .word fileswitchFSCStarSlash
13337	>f8d1		e3 f8				                .word fileswitchFSCUnknownCommand
13338	>f8d3		fd f8				                .word fileswitchFSCStarRUN
13339	>f8d5		02 f9				                .word fileswitchFSCStarCAT
13340	>f8d7		c6 f8				                .word fileswitchFSCNewFS
13341	>f8d9		c6 f8				                .word fileswitchFSCFileHandleRange
13342	>f8db		c6 f8				                .word fileswitchFSCStarCommand
13343	>f8dd		02 f9				                .word fileswitchFSCStarEX
13344	>f8df		02 f9				                .word fileswitchFSCStarINFO
13345	>f8e1		32 f9				                .word fileswitchFSCRUNLibrary

13347							;-------------------------------------------------------------------------
13348							;
13349							; FSC 3 - *command [AUG p344]
13350							;
13351	.f8e3						fileswitchFSCUnknownCommand:
13352	.f8e3		fa		plx		                plx
13353	.f8e4		20 0b f9	jsr $f90b	                jsr getCommandLinePointer
13354	.f8e7		80 de		bra $f8c7	                bra fileswitchPassFSCToCurrentFS_X

13356							;-------------------------------------------------------------------------
13357							;
13358							; FSC 1 - check EOF [AUG p343]
13359							;
13360	.f8e9						fileswitchFSCCheckEOF:
13361	.f8e9		7a		ply		                ply                         ;Y = file handle
13362	.f8ea		5a		phy		                phy                         ;restore stack arrangement
13363	.f8eb		20 e1 f7	jsr $f7e1	                jsr selectFSForHandle
13364	.f8ee		80 d6		bra $f8c6	                bra fileswitchPassFSCToCurrentFS

13366							;-------------------------------------------------------------------------
13367							;
13368							; FSC 0 - *OPT [AUG p343]
13369							;
13370	.f8f0						fileswitchFSCOPT:
13371	.f8f0		2c c6 df	bit $dfc6	                bit hazel.tempFSFlag   ; Check temporary fs flag
13372	.f8f3		70 d1		bvs $f8c6	                bvs fileswitchPassFSCToCurrentFS
13373	.f8f5		ad 00 df	lda $df00	                lda hazel.currentFS ; Get current filing system number

13375							;-------------------------------------------------------------------------
13376							;
13377							; Pass FSCV request through to a particular FS.
13378							;
13379							; entry:
13380							;
13381							; A = FS to select
13382							;
13383							; Y = FSCV Y
13384							;
13385							; S = [FSCV X; FSCV A]
13386							;
13387	.f8f8						fileswitchPassFSCToSpecificFS:
13388	.f8f8		20 97 f8	jsr $f897	                jsr selectFS        ; Select filing system
13389	.f8fb		80 c9		bra $f8c6	                bra fileswitchPassFSCToCurrentFS

13391							;-------------------------------------------------------------------------
13392							;
13393							; FSC 2 - */filename [AUG p343]
13394							; FSC 4 - *RUN filename [AUG p344]
13395							;
13396	.f8fd						fileswitchFSCStarSlash:
13397	.f8fd						fileswitchFSCStarRUN:
13398	.f8fd		fa		plx		                plx
13399	.f8fe		20 0b f9	jsr $f90b	                jsr getCommandLinePointer ; Skip '*'s and spaces, set command line address
13400	.f901		da		phx		                phx             ; Continue on to pass to filing system


13403							;-------------------------------------------------------------------------
13404							;
13405							; FSC 5 - *CAT [AUG p344]
13406							; FSC 9 - *EX [NAUG p257]
13407							; FSC, 10 - *INFO [NAUG p257]
13408							;
13409	.f902						fileswitchFSCStarCAT:
13410	.f902						fileswitchFSCStarEX:
13411	.f902						fileswitchFSCStarINFO:
13412	.f902		fa		plx		                plx
13413	.f903		0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
13414	.f906		20 b8 f7	jsr $f7b8	                jsr parseFileNameAndSelectFS
13415	.f909		80 bc		bra $f8c7	                bra fileswitchPassFSCToCurrentFS_X

13417							;-------------------------------------------------------------------------
13418							;
13419							; Get command line pointer.
13420							;
13421							; Entry:
13422							;
13423							; X/Y - pointer to CR-terminated command line string
13424							;
13425							; Exit:
13426							;
13427							; X/Y, (hazel.commandLinePointer) - pointer to first non-space char in
13428							; command line string
13429	.f90b						getCommandLinePointer: .proc ;fbc1
13430	.f90b		86 f2		stx $f2		                stx stringInputBufferAddress+0
13431	.f90d		84 f3		sty $f3		                sty stringInputBufferAddress+1

13433							; skip spaces. Stop if terminating CR encountered.

13435	.f90f		a0 ff		ldy #$ff	                ldy #$FF
13436	.f911						-
13437	.f911		c8		iny		                iny
13438	.f912		b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
13439	.f914		c9 0d		cmp #$0d	                cmp #$0D
13440	.f916		f0 04		beq $f91c	                beq +
13441	.f918		c9 20		cmp #$20	                cmp #' '
13442	.f91a		d0 f5		bne $f911	                bne -

13444	.f91c						+

13446							; Hmm. Didn't we just do this bit already?

13448	.f91c		20 80 f2	jsr $f280	                jsr skipSpacesAndCheckForCRInStringInput

13450							; Store address of first non-space char in the HAZEL command line
13451							; pointer.

13453	.f91f		98		tya		                tya
13454	.f920		18		clc		                clc
13455	.f921		65 f2		adc $f2		                adc stringInputBufferAddress+0
13456	.f923		8d 04 df	sta $df04	                sta hazel.commandLinePointer+0
13457	.f926		a5 f3		lda $f3		                lda stringInputBufferAddress+1
13458	.f928		69 00		adc #$00	                adc #$00
13459	.f92a		8d 05 df	sta $df05	                sta hazel.commandLinePointer+1
13460	.f92d		a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
13461	.f92f		a6 f2		ldx $f2		                ldx stringInputBufferAddress+0
13462	.f931		60		rts		                rts
13463							                .pend

13465							;-------------------------------------------------------------------------
13466							;
13467							; FSC 11 - RUN from libfs [NAUG p257]
13468							;
13469	.f932						fileswitchFSCRUNLibrary:
13470	.f932		ad 02 df	lda $df02	                lda hazel.libFS      ; Is a libfs set?
13471	.f935		10 c1		bpl $f8f8	                bpl fileswitchPassFSCToSpecificFS
13472	.f937						badCommandError:
13473	.f937		00		brk #		                brk
13474	>f938		fe				                .byte 254
13475	>f939		42 61 64 20 63 6f 6d 6d		                .text "Bad command"
	>f941		61 6e 64
13476	.f944		00		brk #		                brk

13478							;-------------------------------------------------------------------------

13480							                .if version==350
13481							                .include "sram_access_helpers.s65"

:16	;******  Processing file: src/sram_access_helpers.s65

1	.f945						LF846:
2	.f945		20 6a e5	jsr $e56a	                jsr selectROMA
3	.f948						LF7A4:
4	.f948		b1 b0		lda ($b0),y	                lda ($b0),y
5	.f94a		91 b2		sta ($b2),y	                sta ($b2),y
6	.f94c		20 94 f9	jsr $f994	                jsr LF7F0
7	.f94f		d0 f7		bne $f948	                bne LF7A4
8	.f951		b5 01		lda $01,x	                lda 1,x
9	.f953		cd f0 02	cmp $02f0	                cmp osfileParameterBlock+3
10	.f956		d0 f0		bne $f948	                bne LF7A4
11	.f958		4c 68 e5	jmp $e568	                jmp selectTerminalROM

13							;-------------------------------------------------------------------------

15	.f95b						LF7B7:
16	.f95b		20 6a e5	jsr $e56a	                jsr selectROMA
17	.f95e						LF7BA:
18	.f95e		ad e5 fe	lda $fee5	                lda tube.data3
19	.f961		91 b2		sta ($b2),y	                sta ($b2),y
20	.f963		20 a4 f9	jsr $f9a4	                jsr LF800
21	.f966		20 94 f9	jsr $f994	                jsr LF7F0
22	.f969		d0 f3		bne $f95e	                bne LF7BA
23	.f96b		b5 01		lda $01,x	                lda 1,x
24	.f96d		cd f0 02	cmp $02f0	                cmp osfileParameterBlock+3
25	.f970		d0 ec		bne $f95e	                bne LF7BA
26	.f972		4c 68 e5	jmp $e568	                jmp selectTerminalROM

28							;-------------------------------------------------------------------------

30	.f975						LF7D1:
31	.f975		2c ee 02	bit $02ee	                bit osfileParameterBlock+1
32	.f978		30 e1		bmi $f95b	                bmi LF7B7
33	.f97a		20 6a e5	jsr $e56a	                jsr selectROMA
34	.f97d						LF7D9:
35	.f97d		b1 b0		lda ($b0),y	                lda ($b0),y
36	.f97f		8d e5 fe	sta $fee5	                sta tube.data3
37	.f982		20 a4 f9	jsr $f9a4	                jsr LF800
38	.f985		20 94 f9	jsr $f994	                jsr LF7F0
39	.f988		d0 f3		bne $f97d	                bne LF7D9
40	.f98a		b5 01		lda $01,x	                lda 1,x
41	.f98c		cd f0 02	cmp $02f0	                cmp osfileParameterBlock+3
42	.f98f		d0 ec		bne $f97d	                bne LF7D9
43	.f991		4c 68 e5	jmp $e568	                jmp selectTerminalROM

45							;-------------------------------------------------------------------------

47	.f994						LF7F0:
48	.f994		c8		iny		                iny
49	.f995		d0 0d		bne $f9a4	                bne LF800
50	.f997		e6 b1		inc $b1		                inc $b1
51	.f999		e6 b3		inc $b3		                inc $b3
52	.f99b		20 68 e5	jsr $e568	                jsr selectTerminalROM
53	.f99e		20 e5 8a	jsr $8ae5	                jsr terminal.L8D0F
54	.f9a1		20 6a e5	jsr $e56a	                jsr selectROMA

56							;-------------------------------------------------------------------------

58	.f9a4						LF800:
59	.f9a4		cc ef 02	cpy $02ef	                cpy osfileParameterBlock+2
60	.f9a7						LF803:
61							                ; the dummy ROM header's first byte is the RTS for
62							                ; this routine...
63							                .cerror *!=dummy_rom_header

:15	;******  Return to file: src/mos.s65

13482							                .include "sram_access_helpers_2.s65"

:17	;******  Processing file: src/sram_access_helpers_2.s65

1	.f9a7						dummy_rom_header: .block
2	.f9a7		60		rts		                rts
3	>f9a8		00 00				                .byte 0,0
4	.f9aa		60		rts		                rts
5	>f9ab		00 00				                .byte 0,0
6	>f9ad		02				                .byte 2
7	>f9ae		0c				                .byte copyright-dummy_rom_header
8	>f9af		ff				                .byte $ff
9	>f9b0		52				                .text "R"
10	.f9b1						ram_or_rom_char:
11	>f9b1		41				                .text "A"
12	>f9b2		4d				                .text "M"
13	.f9b3						copyright:
14	>f9b3		00				                .byte 0
15	>f9b4		28 43 29			                .text "(C)"
16							                .endblock

18	.f9b7						LF87C:
19	.f9b7		20 59 e5	jsr $e559	                jsr selectROMX
20	.f9ba		a0 0f		ldy #$0f	                ldy #size(dummy_rom_header)-1
21	.f9bc						LF881:
22	.f9bc		b9 a7 f9	lda $f9a7,y	                lda dummy_rom_header,y
23	.f9bf		99 00 80	sta $8000,y	                sta $8000,y
24	.f9c2		88		dey		                dey
25	.f9c3		10 f7		bpl $f9bc	                bpl LF881
26	.f9c5		2c ee 02	bit $02ee	                bit $2ee
27	.f9c8		70 05		bvs $f9cf	                bvs LF894
28	.f9ca		a9 4f		lda #$4f	                lda #'O'
29	.f9cc		8d 0a 80	sta $800a	                sta $8000+(dummy_rom_header.ram_or_rom_char-dummy_rom_header)
30	.f9cf						LF894:
31	.f9cf		8e 01 80	stx $8001	                stx $8001
32	.f9d2		4c 68 e5	jmp $e568	                jmp selectTerminalROM

34							;-------------------------------------------------------------------------

36	.f9d5						LF89A:
37	.f9d5		20 59 e5	jsr $e559	                jsr selectROMX
38	.f9d8		ad 08 80	lda $8008	                lda $8008
39	.f9db		a8		tay		                tay
40	.f9dc		49 ff		eor #$ff	                eor #$ff
41	.f9de		78		sei		                sei
42	.f9df		8d 08 80	sta $8008	                sta $8008
43	.f9e2		cd 08 80	cmp $8008	                cmp $8008
44	.f9e5		8c 08 80	sty $8008	                sty $8008
45	.f9e8		58		cli		                cli
46	.f9e9		f0 01		beq $f9ec	                beq LF8B1
47	.f9eb		18		clc		                clc
48	.f9ec						LF8B1:
49	.f9ec		4c 68 e5	jmp $e568	                jmp selectTerminalROM

51							;-------------------------------------------------------------------------


:15	;******  Return to file: src/mos.s65

13483	.f9ef						LF8D1:
12800	.f9ef		ad ee 02	lda $02ee	                lda $02ee
12801	.f9f2		c9 a0		cmp #$a0	                cmp #$a0
12802	.f9f4		d0 f6		bne $f9ec	                bne LF8B1
12803	.f9f6		ac f1 02	ldy $02f1	                ldy $2f1
12804	.f9f9		98		tya		                tya
12805	.f9fa		aa		tax		                tax
12806	.f9fb		20 a9 e3	jsr $e3a9	                jsr LE389
12807	.f9fe		90 ec		bcc $f9ec	                bcc LF8B1
12808	.fa00		ad 06 80	lda $8006	                lda $8006
12809	.fa03		9d a1 02	sta $02a1,x	                sta romInformationTable,x
12810	.fa06		80 e4		bra $f9ec	                bra LF8B1

13485	.fa08						LF9FA:
13486							                ; TODO - all the 0/1/2/3 references here are
13487							                ; presumably tubeLanguageHostAddr

13489	.fa08		a0 00		ldy #$00	                ldy #0
13490	.fa0a		84 00		sty $00		                sty 0

13492	.fa0c						LF9FE:
13493	.fa0c		b1 00		lda ($00),y	                lda (0),y
13494	.fa0e		ae f9 04	ldx $04f9	                ldx L04F9
13495	.fa11		f0 13		beq $fa26	                beq LFA18
13496							                .if finmos329
13498							                .else
13499	.fa13		c9 7f		cmp #$7f	                cmp #$7F        ; ''
13500							                .endif
13501	.fa15		90 0f		bcc $fa26	                bcc LFA18
13502	.fa17		c9 c0		cmp #$c0	                cmp #$C0        ; ''
13503	.fa19		b0 0b		bcs $fa26	                bcs LFA18
13504	.fa1b		48		pha		                pha
13505	.fa1c		20 dc fa	jsr $fadc	                jsr LFACE
13506	.fa1f		68		pla		                pla
13507	.fa20		90 04		bcc $fa26	                bcc LFA18
13508	.fa22		18		clc		                clc
13509	.fa23		6d f9 04	adc $04f9	                adc $4F9

13511	.fa26						LFA18:
13512	.fa26		99 00 07	sta $0700,y	                sta $700,y
13513	.fa29		c8		iny		                iny
13514	.fa2a		d0 e0		bne $fa0c	                bne LF9FE
13515	.fa2c		ee 01 00	inc $0001	                inc @w 1
13516	.fa2f		60		rts		                rts

13518							;-------------------------------------------------------------------------

13520	.fa30						LFA22:
13521	.fa30		8d 56 00	sta $0056	                sta @w tubeLanguageParasiteAddr+3
13522	.fa33		8c 55 00	sty $0055	                sty @w tubeLanguageParasiteAddr+2
13523	.fa36		24 f4		bit $f4		                bit $f4
13524	.fa38		70 71		bvs $faab	                bvs LFA9D
13525	.fa3a		ad 06 80	lda $8006	                lda $8006
13526	.fa3d		29 0d		and #$0d	                and #$D
13527	.fa3f		d0 78		bne $fab9	                bne LFAAB
13528	.fa41		ad 56 00	lda $0056	                lda @w tubeLanguageParasiteAddr+3
13529	.fa44		8d 03 00	sta $0003	                sta @w 3
13530	.fa47		0d 55 00	ora $0055	                ora @w tubeLanguageParasiteAddr+2
13531	.fa4a		f0 6d		beq $fab9	                beq LFAAB
13532	.fa4c		ad 55 00	lda $0055	                lda @w tubeLanguageParasiteAddr+2
13533	.fa4f		8d 02 00	sta $0002	                sta @w 2
13534	.fa52		a0 02		ldy #$02	                ldy #2
13535	.fa54		b1 02		lda ($02),y	                lda (2),y
13536	.fa56		aa		tax		                tax
13537	.fa57		88		dey		                dey
13538	.fa58		b1 02		lda ($02),y	                lda (2),y
13539	.fa5a		a8		tay		                tay
13540	.fa5b		b2 02		lda ($02)	                lda (2)
13541	.fa5d		8d 02 00	sta $0002	                sta @w 2
13542	.fa60		8c 03 00	sty $0003	                sty @w 3
13543	.fa63		ad 54 00	lda $0054	                lda @w tubeLanguageParasiteAddr+1
13544	.fa66		38		sec		                sec
13545	.fa67		e9 80		sbc #$80	                sbc #$80        ; ''
13546	.fa69		8d f9 04	sta $04f9	                sta L04F9
13547	.fa6c		9c 56 00	stz $0056	                stz @w tubeLanguageParasiteAddr+3
13548	.fa6f		9c 55 00	stz $0055	                stz @w tubeLanguageParasiteAddr+2
13549	.fa72		8a		txa		                txa
13550	.fa73		10 03		bpl $fa78	                bpl LFA6A
13551	.fa75		18		clc		                clc
13552	.fa76		65 f4		adc $f4		                adc $f4

13554	.fa78						LFA6A:
13555	.fa78		29 0f		and #$0f	                and #$F
13556	.fa7a		8d f8 04	sta $04f8	                sta L04F8
13557	.fa7d		a6 f4		ldx $f4		                ldx $f4
13558	.fa7f		da		phx		                phx
13559	.fa80		20 6a e5	jsr $e56a	                jsr selectROMA
13560	.fa83		20 bd fa	jsr $fabd	                jsr LFAAF
13561	.fa86		49 de		eor #$de	                eor #$DE        ; ''
13562	.fa88		d0 1b		bne $faa5	                bne LFA97
13563	.fa8a		20 bd fa	jsr $fabd	                jsr LFAAF
13564	.fa8d		49 c0		eor #$c0	                eor #$C0        ; ''
13565	.fa8f		d0 14		bne $faa5	                bne LFA97
13566	.fa91		8d f7 04	sta $04f7	                sta L04F7
13567	.fa94		20 bd fa	jsr $fabd	                jsr LFAAF
13568	.fa97		8d f6 04	sta $04f6	                sta L04F6
13569	.fa9a		20 bd fa	jsr $fabd	                jsr LFAAF
13570	.fa9d		8d f5 04	sta $04f5	                sta L04F5
13571	.faa0		68		pla		                pla
13572	.faa1		20 6a e5	jsr $e56a	                jsr selectROMA
13573	.faa4		60		rts		                rts

13575							;-------------------------------------------------------------------------

13577	.faa5						LFA97:
13578	.faa5		68		pla		                pla
13579	.faa6		20 6a e5	jsr $e56a	                jsr selectROMA
13580	.faa9		80 0e		bra $fab9	                bra LFAAB

13582							;-------------------------------------------------------------------------

13584	.faab						LFA9D:
13585	.faab		a9 80		lda #$80	                lda #$80        ; ''
13586	.faad		8d 54 00	sta $0054	                sta @w tubeLanguageParasiteAddr+1
13587	.fab0		9c 53 00	stz $0053	                stz @w tubeLanguageParasiteAddr+0
13588	.fab3		9c 55 00	stz $0055	                stz @w tubeLanguageParasiteAddr+2
13589	.fab6		9c 56 00	stz $0056	                stz @w tubeLanguageParasiteAddr+3

13591	.fab9						LFAAB:
13592	.fab9		9c f9 04	stz $04f9	                stz L04F9
13593	.fabc		60		rts		                rts

13595							;-------------------------------------------------------------------------

13597	.fabd						LFAAF:       .block
13598	.fabd		ad 02 00	lda $0002	                lda @w 2
13599	.fac0		08		php		                php
13600	.fac1		ce 02 00	dec $0002	                dec @w 2
13601	.fac4		28		plp		                plp
13602	.fac5		d0 03		bne $faca	                bne LFABC
13603	.fac7		ce 03 00	dec $0003	                dec @w 3

13605	.faca						LFABC:
13606	.faca		a5 f4		lda $f4		                lda $f4
13607	.facc		48		pha		                pha
13608	.facd		ad f8 04	lda $04f8	                lda L04F8
13609	.fad0		20 6a e5	jsr $e56a	                jsr selectROMA
13610	.fad3		b2 02		lda ($02)	                lda (2)
13611	.fad5		aa		tax		                tax
13612	.fad6		68		pla		                pla
13613	.fad7		20 6a e5	jsr $e56a	                jsr selectROMA
13614	.fada		8a		txa		                txa
13615	.fadb		60		rts		                rts
13616							                .endblock

13618							;-------------------------------------------------------------------------

13620	.fadc						LFACE:       .block
13621	.fadc		0e f7 04	asl $04f7	                asl L04F7
13622	.fadf		d0 0a		bne $faeb	                bne locret_FADD
13623	.fae1		20 ec fa	jsr $faec	                jsr LFADE
13624	.fae4		18		clc		                clc
13625	.fae5		f0 04		beq $faeb	                beq locret_FADD
13626	.fae7		38		sec		                sec
13627	.fae8		2e f7 04	rol $04f7	                rol L04F7

13629	.faeb						locret_FADD:
13630	.faeb		60		rts		                rts
13631							                .endblock

13633							;-------------------------------------------------------------------------

13635	.faec						LFADE:       .block
13636	.faec		20 bd fa	jsr $fabd	                jsr LFAAF
13637	.faef		8d f7 04	sta $04f7	                sta L04F7
13638	.faf2		ad f5 04	lda $04f5	                lda L04F5
13639	.faf5		08		php		                php
13640	.faf6		ce f5 04	dec $04f5	                dec L04F5
13641	.faf9		28		plp		                plp
13642	.fafa		d0 03		bne $faff	                bne LFAF1
13643	.fafc		ce f6 04	dec $04f6	                dec L04F6

13645	.faff						LFAF1:
13646	.faff		ad f6 04	lda $04f6	                lda L04F6
13647	.fb02		49 80		eor #$80	                eor #$80        ; ''
13648	.fb04		29 80		and #$80	                and #$80        ; ''
13649	.fb06		60		rts		                rts
13650							                .endblock

13652							;-------------------------------------------------------------------------

13654	.fb07						LFAF9:
13655	.fb07		8a		txa		                txa
13656	.fb08		09 40		ora #$40	                ora #$40        ; '@'
13657	.fb0a		aa		tax		                tax
13658	.fb0b		a9 8e		lda #$8e	                lda #$8E        ; ''
13659	.fb0d		4c f4 ff	jmp $fff4	                jmp OSBYTE

13661							;-------------------------------------------------------------------------

13663	.fb10						LFB02:
13664	.fb10		20 c8 04	jsr $04c8	                jsr terminal.tubeHost.getLanguageParasiteAddr
13665	.fb13		a9 40		lda #$40	                lda #$40        ; '@'
13666	.fb15		14 f4		trb $f4		                trb $f4
13667	.fb17		60		rts		                rts

13669							;-------------------------------------------------------------------------

13671							                .if !finmos329

13673	.fb18						LFB0A:       .block
13674	.fb18		08		php		                php
13675	.fb19		78		sei		                sei
13676	.fb1a		ad 5e 02	lda $025e	                lda econetInterceptionStatus
13677	.fb1d		48		pha		                pha
13678	.fb1e		a9 80		lda #$80	                lda #$80        ; ''
13679	.fb20		1c 5e 02	trb $025e	                trb econetInterceptionStatus
13680	.fb23		a9 87		lda #$87	                lda #$87        ; ''
13681	.fb25		20 f4 ff	jsr $fff4	                jsr OSBYTE
13682	.fb28		68		pla		                pla
13683	.fb29		8d 5e 02	sta $025e	                sta econetInterceptionStatus
13684	.fb2c		28		plp		                plp
13685	.fb2d		8a		txa		                txa
13686	.fb2e		60		rts		                rts
13687							                .endblock

13689							                .if CFA3000
13690	.fb2f						LFB2F:
13691	.fb2f		a2 31		ldx #$31	                ldx #size(RTC.ram)-1
13692	.fb31						LFB31:
13693	.fb31		da		phx		                phx
13694	.fb32		a0 00		ldy #$00	                ldy #0
13695	.fb34		e0 11		cpx #$11	                cpx #size(CMOSBytes)
13696	.fb36		b0 03		bcs $fb3b	                bcs LFB3B
13697	.fb38		bc 9a fe	ldy $fe9a,x	                ldy reset.LFEA2-1,x
13698	.fb3b						LFB3B:
13699	.fb3b		20 c8 96	jsr $96c8	                jsr terminal.writeCMOSByte
13700	.fb3e		fa		plx		                plx
13701	.fb3f		ca		dex		                dex
13702	.fb40		d0 ef		bne $fb31	                bne LFB31
13703	.fb42		60		rts		                rts
13704							                .endif

13706							                .endif

13708							                .endif

13710							;-------------------------------------------------------------------------

13712							                .if version==350&&multios
13715							                .endif

13717							;-------------------------------------------------------------------------

13719	>fb43		ff ff ff ff ff ff ff ff		                .fill $fc00-*,$ff
	>fb4b		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb5b		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb6b		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb7b		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb8b		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb9b		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbab		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbbb		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbcb		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbdb		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbeb		ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbfb		ff ff ff ff ff

13721							                .if version==350

13723							;-------------------------------------------------------------------------
13724							;
13725							; Some init code - normally hidden by the I/O region

13727	.fc00						reset: .block
13728							                .include "reset.s65"

:18	;******  Processing file: src/reset.s65

1							                .if version==350
2	.fc00		20 68 e5	jsr $e568	                jsr selectTerminalROM
3							                .endif
4							                .if version!=350
7							                .endif
8							                .if version<500
9	.fc03		9c dd df	stz $dfdd	                stz hazel.hasACCCONChanged
10							                .endif
11							                .if version!=350
13							                .endif
14	.fc06		d8		cld		                cld
15	.fc07		a2 ff		ldx #$ff	                ldx #$FF
16	.fc09		9a		txs		                txs              ;reset stack
17	.fc0a		8e 63 fe	stx $fe63	                stx userVIA.ddra ;port A all outputs
18	.fc0d		a9 cf		lda #$cf	                lda #%11001111
19	.fc0f		8d 42 fe	sta $fe42	                sta systemVIA.ddrb
20							                .if version==350
21	.fc12		20 4b f6	jsr $f64b	                jsr enableKeyboardScanning
22	.fc15		20 ee fe	jsr $feee	                jsr clearAllSoundChannelBuffers
23							                .endif
24							                .if version<500
25	.fc18		a0 20		ldy #$20	                ldy #RTC.a.dv32768Hz
26	.fc1a		a2 0a		ldx #$0a	                ldx #RTC.a
27	.fc1c		20 d0 96	jsr $96d0	                jsr terminal.writeRTCByte
28	.fc1f		20 0c 95	jsr $950c	                jsr terminal.finishRTCUpdate
29							                .endif
30							                .if version!=350
39							                .else
40	.fc22		ad f5 e2	lda $e2f5	                lda defaultVectorTable+0 ;what is this.
41	.fc25		ad f5 e2	lda $e2f5	                lda defaultVectorTable+0 ;what is this.
42							                .endif
43							                .if version==350
44	.fc28		20 2e 80	jsr $802e	                jsr terminal.ldaSystemVIAIER
47							                .endif
48	.fc2b		0a		asl a		                asl a
49	.fc2c		48		pha		                pha
50							                .if version==350
51	.fc2d		d0 4a		bne $fc79	                bne nonPowerOnReset
52	.fc2f		20 7f 80	jsr $807f	                jsr terminal.resetCRTC
53	.fc32		a2 07		ldx #$07	                ldx #7

55	.fc34						LFC34:
56	.fc34		20 59 e5	jsr $e559	                jsr selectROMX
57	.fc37		a0 80		ldy #$80	                ldy #$80        ; ''
58	.fc39		84 01		sty $01		                sty 1
59	.fc3b		64 00		stz $00		                stz 0
60	.fc3d		a8		tay		                tay

62	.fc3e						LFC3E:
63	.fc3e		91 00		sta ($00),y	                sta (0),y
64	.fc40		c8		iny		                iny
65	.fc41		d0 fb		bne $fc3e	                bne LFC3E
66	.fc43		e6 01		inc $01		                inc 1
67	.fc45		24 01		bit $01		                bit 1
68	.fc47		50 f5		bvc $fc3e	                bvc LFC3E
69	.fc49		ca		dex		                dex
70	.fc4a		e0 04		cpx #$04	                cpx #4
71	.fc4c		b0 e6		bcs $fc34	                bcs LFC34
72	.fc4e		20 68 e5	jsr $e568	                jsr selectTerminalROM
73	.fc51		98		tya		                tya

75	.fc52						startClearRAM:
76	.fc52		a8		tay		                tay

78	.fc53						LFC53:
79	.fc53		a6 fc		ldx $fc		                ldx $fc
80	.fc55		98		tya		                tya
81	.fc56		64 01		stz $01		                stz 1
82	.fc58		64 00		stz $00		                stz 0

84	.fc5a						LFC5A:
85	.fc5a		91 00		sta ($00),y	                sta (0),y
86	.fc5c		c8		iny		                iny
87	.fc5d		d0 fb		bne $fc5a	                bne LFC5A
88	.fc5f		e6 01		inc $01		                inc 1
89	.fc61		a0 40		ldy #$40	                ldy #$40        ; '@'
90	.fc63		8c 00 0d	sty $0d00	                sty $d00
91	.fc66		a4 01		ldy $01		                ldy 1
92	.fc68		c0 e0		cpy #$e0	                cpy #$E0        ; ''
93	.fc6a		a8		tay		                tay
94	.fc6b		90 ed		bcc $fc5a	                bcc LFC5A
95	.fc6d		86 fc		stx $fc		                stx $FC
96	.fc6f		a9 04		lda #$04	                lda #4
97	.fc71		20 20 80	jsr $8020	                jsr terminal.trbACCCON
98	.fc74		d0 dd		bne $fc53	                bne LFC53
99	.fc76		20 68 e5	jsr $e568	                jsr selectTerminalROM
149							                .endif
150	.fc79						nonPowerOnReset:
151							                .if version>=350
152	.fc79		ad 58 02	lda $0258	                lda breakAndESCAPEEffect
153	.fc7c		4a		lsr a		                lsr a
154	.fc7d		3a		dec a		                dec a
155	.fc7e		f0 d2		beq $fc52	                beq startClearRAM
156							                .endif
157	.fc80		a9 eb		lda #$eb	                lda #<mos.emptyCommandLine
158	.fc82		8d 04 df	sta $df04	                sta hazel.commandLinePointer+0
159	.fc85		a9 e7		lda #$e7	                lda #>mos.emptyCommandLine
160	.fc87		8d 05 df	sta $df05	                sta hazel.commandLinePointer+1
161	.fc8a		a9 0c		lda #$0c	                lda #ACCCON.Y|ACCCON.X ; page in MOS ROM, page in main
162							                                       ; RAM
163							                .if version==350
164	.fc8c		20 20 80	jsr $8020	                jsr terminal.trbACCCON
167							                .endif
168	.fc8f		a9 0f		lda #$0f	                lda #$0F
169	.fc91		8d 8e 02	sta $028e	                sta numericKeypadShiftEffect
170							                .if version<500&&version!=350
176							                .endif
177	.fc94		a2 01		ldx #$01	                ldx #key_ctrl
178							                .if version==350
179	.fc96		20 a9 f5	jsr $f5a9	                jsr setTSTAndInterrogateKeyboard
182							                .endif
183	.fc99		e0 80		cpx #$80	                cpx #$80        ;Z=0 C=1 if CTRL+BREAK
184	.fc9b		20 1e f4	jsr $f41e	                jsr mos.updateKeyboardLEDs
185	.fc9e		9c 8d 02	stz $028d	                stz lastBREAKType            ;softBREAK
186	.fca1		6a		ror a		                ror a
187	.fca2		a2 9c		ldx #$9c	                ldx #$9c                     ;what is this?
188	.fca4		a0 8d		ldy #$8d	                ldy #$8D                     ;what is this?
189	.fca6		68		pla		                pla
190	.fca7		f0 09		beq $fcb2	                beq L80AD
191	.fca9		a0 7e		ldy #$7e	                ldy #$7E                     ;what is this?
192	.fcab		90 42		bcc $fcef	                bcc L80DF
193	.fcad		a0 87		ldy #$87	                ldy #$87                     ;what is this?
194	.fcaf		ee 8d 02	inc $028d	                inc lastBREAKType
195	.fcb2						L80AD:
196	.fcb2		ee 8d 02	inc $028d	                inc lastBREAKType
197	.fcb5		5a		phy		                phy
198							                .if version==350&&CFA3000
199	.fcb6		ad 8d 02	lda $028d	                lda lastBREAKType
200	.fcb9		3a		dec a		                dec a
201	.fcba		d0 03		bne $fcbf	                bne LFCBF
202	.fcbc		20 2f fb	jsr $fb2f	                jsr LFB2F
203	.fcbf						LFCBF:
204							                .endif
205							                .if version==350
206	.fcbf		a2 6b		ldx #$6b	                ldx #terminal.configureTable.mode.metadata-terminal.configureTable
207	.fcc1		20 31 88	jsr $8831	                jsr terminal.setTSTAndReadConfigurationByte
214							                .endif
215	.fcc4		09 08		ora #$08	                ora #CMOSBytes.defaults0.defaultSHADOWMask
216	.fcc6		8d 8f 02	sta $028f	                sta startupOptions
217	.fcc9		20 93 96	jsr $9693	                jsr terminal.readDefaults3 ; Read configured BOOT
218	.fccc		29 10		and #$10	                and #CMOSBytes.defaults3.autoBootMask
219	.fcce		4a		lsr a		                lsr a         ; Reset OSBYTE 255 boot bit (b3) if BOOT
220	.fccf		1c 8f 02	trb $028f	                trb startupOptions
221							                .if version==350
222	.fcd2		20 a9 89	jsr $89a9	                jsr terminal.setTSTAndReadDefaultTVSettings
225							                .endif
226	.fcd5		8c 90 02	sty $0290	                sty tvOffset
227	.fcd8		8e 91 02	stx $0291	                stx tvInterlace
228	.fcdb		20 93 96	jsr $9693	                jsr terminal.readDefaults3
229	.fcde		29 08		and #$08	                and #CMOSBytes.defaults3.protectedScrollingMask
230	.fce0		f0 02		beq $fce4	                beq L80D4
231	.fce2		a9 01		lda #$01	                lda #VDUVariables.cursorFlags.scrollProtect
232	.fce4						L80D4:
233	.fce4		8d 66 03	sta $0366	                sta vduv.cursorFlags
234	.fce7		20 0f 97	jsr $970f	                jsr terminal.restoreFont32To255
235	.fcea		7a		ply		                ply
236	.fceb		a2 92		ldx #$92	                ldx #$92
237	.fced		80 18		bra $fd07	                bra initializePage2Loop
238	.fcef						L80DF:
239							                .if version>=500
241							                .endif
242	.fcef		a9 87		lda #$87	                lda #$87             ; Clear MODE bits from OSBYTE 255
243	.fcf1		1c 8f 02	trb $028f	                trb startupOptions
244	.fcf4		ad 55 03	lda $0355	                lda vduv.currentScreenMODE ; Get current screen MODE b0-b2
245	.fcf7		29 07		and #$07	                and #$07
246	.fcf9		0c 8f 02	tsb $028f	                tsb startupOptions           ; Copy to OSBYTE 255
247	.fcfc		a9 10		lda #$10	                lda #STATE.isShadowMode ; Test shadow screen bit in VDU flags
248	.fcfe		24 d0		bit $d0		                bit STATE                      ; Not shadow screen
249	.fd00		f0 05		beq $fd07	                beq initializePage2Loop
250	.fd02		a9 80		lda #$80	                lda #$80                     ; Set shadow screen bit in OSBYTE 255
251	.fd04		0c 8f 02	tsb $028f	                tsb startupOptions

253	.fd07						initializePage2Loop:
254	.fd07		ad 8d 02	lda $028d	                lda lastBREAKType
255	.fd0a		d0 08		bne $fd14	                bne clearPage2Byte           ;taken unless soft BREAK

257							                ; leave the ROM information table alone on a soft
258							                ; BREAK.
259	.fd0c		e0 b1		cpx #$b1	                cpx #<romInformationTable+16
260	.fd0e		b0 04		bcs $fd14	                bcs clearPage2Byte
261	.fd10		e0 a1		cpx #$a1	                cpx #<romInformationTable
262	.fd12		b0 0a		bcs $fd1e	                bcs nextPage2Byte
263	.fd14						clearPage2Byte:
264	.fd14		9e 00 02	stz $0200,x	                stz $0200,x
265	.fd17		e0 cd		cpx #$cd	                cpx #$CD
266	.fd19		90 03		bcc $fd1e	                bcc nextPage2Byte
267	.fd1b		de 00 02	dec $0200,x	                dec $0200,x                  ;initialize later values to $ff
268	.fd1e						nextPage2Byte:
269	.fd1e		e8		inx		                inx
270	.fd1f		d0 e6		bne $fd07	                bne initializePage2Loop

272							                .if version==350
273	.fd21		a5 fc		lda $fc		                lda $fc
274							                .endif
275	.fd23		a2 cf		ldx #$cf	                ldx #$CF
276	.fd25						initializeZeroPageLoop:
277	.fd25		74 00		stz $00,x	                stz $00,x
278	.fd27		e8		inx		                inx
279	.fd28		d0 fb		bne $fd25	                bne initializeZeroPageLoop
280							                .if version==350
281	.fd2a		85 fc		sta $fc		                sta $fc
282	.fd2c		20 68 e5	jsr $e568	                jsr selectTerminalROM
283							                .endif

285	.fd2f		ad 8d 02	lda $028d	                lda lastBREAKType
286	.fd32		d0 20		bne $fd54	                bne L813D                    ;taken if not soft BREAK

288							                .if version!=400
289	.fd34		ad 46 02	lda $0246	                lda noignoreState
290	.fd37		48		pha		                pha
291							                .endif
292	.fd38		ad 4b 02	lda $024b	                lda basicROMNumber
293	.fd3b		48		pha		                pha
294	.fd3c		ad 44 02	lda $0244	                lda oshwm
295	.fd3f		48		pha		                pha
296	.fd40		ad 57 02	lda $0257	                lda spoolFileHandle
297	.fd43		48		pha		                pha
298	.fd44		ae 56 02	ldx $0256	                ldx execFileHandle

300	.fd47						L8130:
301	.fd47		b9 f4 e2	lda $e2f4,y	                lda mos.defaultVectorTable-1,y
302	.fd4a		99 ff 01	sta $01ff,y	                sta vectors-1,y
303	.fd4d		88		dey		                dey
304	.fd4e		c0 21		cpy #$21	                cpy #EVENTV+1-vectors
305	.fd50		b0 f5		bcs $fd47	                bcs L8130

307	.fd52		a0 12		ldy #$12	                ldy #FILEV-vectors

309	.fd54						L813D:
310	.fd54		b9 f4 e2	lda $e2f4,y	                lda mos.defaultVectorTable-1,y
311	.fd57		99 ff 01	sta $01ff,y	                sta vectors-1,y
312	.fd5a		88		dey		                dey
313	.fd5b		d0 f7		bne $fd54	                bne L813D

315	.fd5d		ad 8d 02	lda $028d	                lda lastBREAKType
316	.fd60		d0 18		bne $fd7a	                bne L8164
317	.fd62		8e 56 02	stx $0256	                stx execFileHandle
318	.fd65		68		pla		                pla                          ;restore *SPOOL file handle
319	.fd66		c9 04		cmp #$04	                cmp #$04                     ;is it a TAPE or ROM handle?
320	.fd68		b0 01		bcs $fd6b	                bcs L8155                    ;taken if no - keep it

322							                .if version==350
323	.fd6a		98		tya		                tya
326							                .endif
327	.fd6b						L8155:
328	.fd6b		8d 57 02	sta $0257	                sta spoolFileHandle
329	.fd6e		68		pla		                pla
330	.fd6f		8d 44 02	sta $0244	                sta oshwm
331	.fd72		68		pla		                pla
332	.fd73		8d 4b 02	sta $024b	                sta basicROMNumber
333							                .if version!=400
334	.fd76		68		pla		                pla
335	.fd77		8d 46 02	sta $0246	                sta noignoreState
336							                .endif

338	.fd7a						L8164:
339							                .if version==350
340	.fd7a		a2 19		ldx #$19	                ldx #$19
341	.fd7c		20 a0 96	jsr $96a0	                jsr terminal.setTSTAndReadRTCByte
347							                .endif
348	.fd7f		a2 20		ldx #$20	                ldx #keyboardStatusByte.shiftLockDisengaged
349	.fd81		0a		asl a		                asl a
350	.fd82		0a		asl a		                asl a                        ;N=defaultCapsLockMask
351	.fd83		30 07		bmi $fd8c	                bmi gotKeyboardStatusByte                    ;taken if defaultCapsLock
352	.fd85		a2 30		ldx #$30	                ldx #keyboardStatusByte.shiftLockDisengaged|keyboardStatusByte.capsLockDisengaged
353	.fd87		0a		asl a		                asl a                        ;N=defaultNoLockMask
354	.fd88		30 02		bmi $fd8c	                bmi gotKeyboardStatusByte
355	.fd8a		a2 a0		ldx #$a0	                ldx #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
356	.fd8c						gotKeyboardStatusByte:
357	.fd8c		8e 5a 02	stx $025a	                stx keyboardStatusByte
358							                .if version==350
359	.fd8f		20 78 f0	jsr $f078	                jsr setTSTAndResetKeyRepeat
363							                .endif
364	.fd92		ad 8d 02	lda $028d	                lda lastBREAKType
365	.fd95		f0 16		beq $fdad	                beq L8196
366							                .if version==350
367	.fd97		a2 1c		ldx #$1c	                ldx #cmosBytesOffset+CMOSBytes.printerIgnoreChar
368	.fd99		20 a0 96	jsr $96a0	                jsr terminal.setTSTAndReadRTCByte
374							                .endif
375	.fd9c		8d 86 02	sta $0286	                sta printerIgnoreChar
376							                .if version==350
377	.fd9f		20 71 89	jsr $8971	                jsr terminal.setTSTAndReadUsePrinterIgnoreChar
384							                .endif
385	.fda2		6e 46 02	ror $0246	                ror noignoreState
386							                .if version==350
387	.fda5		a2 9b		ldx #$9b	                ldx #terminal.configureTable.print.metadata-terminal.configureTable
388	.fda7		20 31 88	jsr $8831	                jsr terminal.setTSTAndReadConfigurationByte
394							                .endif
395	.fdaa		8d 85 02	sta $0285	                sta printerDriverType
396	.fdad						L8196:
397							                .if version==400
399							                .else
400							                .if version==350
401	.fdad		a2 19		ldx #$19	                ldx #terminal.configureTable.data.metadata-terminal.configureTable
402	.fdaf		20 31 88	jsr $8831	                jsr terminal.setTSTAndReadConfigurationByte
408							                .endif
409	.fdb2		0a		asl a		                asl a                        ;
410	.fdb3		0a		asl a		                asl a       ;shift into the control registerword field
411	.fdb4		09 42		ora #$42	                ora #ACIA.control.rtsHighTXInterruptDisabled|ACIA.control.counterDivide64
412	.fdb6		8d 50 02	sta $0250	                sta aciaControlRegister

414							                .if version<500
415	.fdb9		20 18 aa	jsr $aa18	                jsr terminal.resetACIAThenRewriteControlRegister
416	.fdbc		a2 01		ldx #$01	                ldx #$01
446							                .endif
447							                .endif

449	.fdbe		a9 7f		lda #$7f	                lda #$7F
450	.fdc0						initializeVIAInterruptsLoop:
451	.fdc0		9d 4d fe	sta $fe4d,x	                sta systemVIA.ifr,x
452	.fdc3		9d 6d fe	sta $fe6d,x	                sta userVIA.ifr,x
453	.fdc6		ca		dex		                dex
454	.fdc7		10 f7		bpl $fdc0	                bpl initializeVIAInterruptsLoop

456							                .if version!=350
467							                .endif

469							                .if version!=400
470	.fdc9		a2 d2		ldx #$d2	                ldx #$80|VIA.irq.t1|VIA.irq.cb1|VIA.irq.ca1
473							                .endif
474	.fdcb		8e 4e fe	stx $fe4e	                stx systemVIA.ier

476							                .if version>=500
479							                .endif

481	.fdce		a2 04		ldx #$04	                ldx #VIA.pcr.cb2InputNegativeActiveEdge|VIA.pcr.cb1NegativeActiveEdge|VIA.pcr.ca2InputPositiveEdge|VIA.pcr.ca1NegativeActiveEdge
482	.fdd0		8e 4c fe	stx $fe4c	                stx systemVIA.pcr
483	.fdd3		a9 40		lda #$40	                lda #VIA.acr.t1Continuous|VIA.acr.t2Timer|VIA.acr.srDisabled|VIA.acr.pbLatchDisabled|VIA.acr.paLatchDisabled
484	.fdd5		8d 4b fe	sta $fe4b	                sta systemVIA.acr
485	.fdd8		a9 0e		lda #$0e	                lda #$0E
486	.fdda		8d 46 fe	sta $fe46	                sta systemVIA.t1lL
487	.fddd		8d 6c fe	sta $fe6c	                sta userVIA.pcr              ;VIA.pcr.cb2InputNegativeActiveEdge|VIA.pcr.cb1NegativeActiveEdge|VIA.pcr.ca2HighOutput|VIA.pcr.ca1NegativeActiveEdge
488							                .if version==350
489	.fde0		8d 18 fe	sta $fe18	                sta HADC.status
492							                .endif
493	.fde3		a9 27		lda #$27	                lda #$27
494	.fde5		8d 47 fe	sta $fe47	                sta systemVIA.t1lH
495	.fde8		8d 45 fe	sta $fe45	                sta systemVIA.t1cH

497							                .if version==350||version>=400
498	.fdeb		20 ee fe	jsr $feee	                jsr clearAllSoundChannelBuffers
506							                .endif

508							                .if version==350
509	.fdee		20 3c f6	jsr $f63c	                jsr setTSTAndOSBYTE7A
512							                .endif
513	.fdf1		86 ed		stx $ed		                stx firstKeyPressedInternal
514	.fdf3		a2 00		ldx #$00	                ldx #$00
515							                .if version>=500
517							                .endif
518	.fdf5		20 55 e9	jsr $e955	                jsr mos.purgeBuffer

520							                .if version!=400
521	.fdf8		ad 82 02	lda $0282	                lda serialULARegister
522	.fdfb		29 7f		and #$7f	                and #$7F
523	.fdfd		20 e3 eb	jsr $ebe3	                jsr mos.LEC89
524							                .if version<500&&version!=350
526							                .else
527	.fe00		a2 07		ldx #$07	                ldx #terminal.configureTable.baud.metadata-terminal.configureTable
528							                .if version==350
529	.fe02		20 31 88	jsr $8831	                jsr terminal.setTSTAndReadConfigurationByte
532							                .endif
533							                .endif
534	.fe05		48		pha		                pha
535	.fe06		aa		tax		                tax
536	.fe07		20 c5 eb	jsr $ebc5	                jsr mos.osbyte08
537	.fe0a		fa		plx		                plx
538	.fe0b		a9 07		lda #$07	                lda #$07
539	.fe0d		20 c7 eb	jsr $ebc7	                jsr mos.osbyte07
540							                .endif

542	.fe10		20 93 96	jsr $9693	                jsr terminal.readDefaults3
543	.fe13		89 02		bit #$02	                bit #CMOSBytes.defaults3.loudMask
544	.fe15		d0 05		bne $fe1c	                bne L8211
545	.fe17		a9 f0		lda #$f0	                lda #$F0
546	.fe19		8d 64 02	sta $0264	                sta bellSound
547	.fe1c						L8211:
548							                .if version!=350
550							                .endif

552	.fe1c		ae 84 02	ldx $0284	                ldx softKeyConsistencyFlag
553	.fe1f		f0 03		beq $fe24	                beq checkResetType
554	.fe21		20 93 f0	jsr $f093	                jsr mos.osbyte12
555	.fe24						checkResetType:
556	.fe24		ad 8d 02	lda $028d	                lda lastBREAKType
557	.fe27		f0 53		beq $fe7c	                beq romsScanned                    ;taken if soft BREAK

559							                .if version==350
560	.fe29						scanROMs:
561							                .include "scan_roms.s65"

:19	;******  Processing file: src/scan_roms.s65

1	.fe29		8a		txa		                txa               ;A = ROM of interest
2	.fe2a		a8		tay		                tay               ;Y = ROM of interest
3							                .if version<500&&version!=350
6							                .endif
7	.fe2b		20 b8 e3	jsr $e3b8	                jsr isROMValid
8	.fe2e		90 2c		bcc $fe5c	                bcc currentROMInvalid        ;taken if ROM invalid
9	.fe30		a6 f4		ldx $f4		                ldx $F4                      ;start from current ROM
10	.fe32		a4 f4		ldy $f4		                ldy $F4                      ;start from current ROM
11	.fe34						nextOtherROM:
12	.fe34		c8		iny		                iny                          ;next other ROM
13	.fe35		c0 10		cpy #$10	                cpy #$10                     ;out of other ROMs?
14	.fe37		b0 27		bcs $fe60	                bcs currentROMValid       ;taken if no more other ROMs
15							                .if version<500&&version!=350
18							                .endif
19							                .if version==350
20	.fe39		64 fa		stz $fa		                stz SEIWKA
21	.fe3b		a9 80		lda #$80	                lda #$80        ; ''
22	.fe3d		85 fb		sta $fb		                sta SEIWKA+1
31							                .endif
32	.fe3f						compareLoop:
33	.fe3f		8c 30 fe	sty $fe30	                sty ROMSEL                   ;select other ROM
34							                .if version==350
35	.fe42		b2 fa		lda ($fa)	                lda (SEIWKA)
38							                .endif
39	.fe44		8e 30 fe	stx $fe30	                stx ROMSEL                   ;select ROM
40							                .if version==350
41	.fe47		d2 fa		cmp ($fa)	                cmp (SEIWKA)
44							                .endif
45	.fe49		d0 e9		bne $fe34	                bne nextOtherROM             ;taken if other ROM is good
46	.fe4b		e6 fa		inc $fa		                inc SEIWKA+0
47	.fe4d		d0 f0		bne $fe3f	                bne compareLoop
48	.fe4f		e6 fb		inc $fb		                inc SEIWKA+1
49	.fe51		a5 fb		lda $fb		                lda SEIWKA+1
50							                .if version>=500
55							                .endif
56	.fe53		c9 84		cmp #$84	                cmp #$84                  ;compare only the first 1 KB
57	.fe55		90 e8		bcc $fe3f	                bcc compareLoop
58							                ; The first 1 KB of the current ROM matches the first
59							                ; 1 KB of some higher-priority ROM, so the current ROM
60							                ; is invalid.
61							                .if version>=500||version==350
62	.fe57		a9 01		lda #$01	                lda #1
63	.fe59		9d a1 02	sta $02a1,x	                sta romInformationTable,x
64							                .endif

66	.fe5c						currentROMInvalid:
67	.fe5c		a6 f4		ldx $f4		                ldx $F4
68	.fe5e		80 14		bra $fe74	                bra nextROM

70	.fe60						currentROMValid:
71							                .if version>=500||version==350
72	.fe60		8a		txa		                txa
73	.fe61		a8		tay		                tay
74							                .if version==350
75	.fe62		20 a6 e3	jsr $e3a6	                jsr setTSTAndLE389
78							                .endif
79	.fe65		90 0d		bcc $fe74	                bcc nextROM
80							                .endif
81	.fe67		ad 06 80	lda $8006	                lda $8006
82	.fe6a		9d a1 02	sta $02a1,x	                sta romInformationTable,x
83	.fe6d		29 8f		and #$8f	                and #$8F
84	.fe6f		d0 03		bne $fe74	                bne nextROM       ;taken if any mandatory bits are set

86							                ; A bogus ROM type means this ROM is the BASIC ROM.
87							                .if version>=500&&version!=350
90							                .endif

92	.fe71		8e 4b 02	stx $024b	                stx basicROMNumber

94	.fe74						nextROM:
95	.fe74		e8		inx		                inx
96	.fe75		e0 10		cpx #$10	                cpx #$10
97	.fe77		90 b0		bcc $fe29	                bcc scanROMs
98	.fe79		20 68 e5	jsr $e568	                jsr selectTerminalROM


:18	;******  Return to file: src/reset.s65

564							                .endif

566	.fe7c						romsScanned:
567	.fe7c		ad 8f 02	lda $028f	                lda startupOptions
568	.fe7f		20 98 c7	jsr $c798	                jsr mos.setStartupMODE
569	.fe82		ad 8d 02	lda $028d	                lda lastBREAKType
570	.fe85		3a		dec a		                dec a
571							                .if version>=510
574							                .else
575	.fe86		d0 23		bne $feab	                bne softReset                    ;taken if not power-on reset
576							                .endif

578	.fe88						powerOnReset:
579							                .if version>=500
595							                .endif
596	.fe88						checkForNVRAMReset:

598							                .if version>=510
617							                .endif

619							                .if version<510
620	.fe88		a5 ed		lda $ed		                lda firstKeyPressedInternal
621							                .endif
622	.fe8a						checkForResetKey:
623	.fe8a		c9 33		cmp #$33	                cmp #key_r
624	.fe8c		d0 1d		bne $feab	                bne softReset                    ;taken if R not pressed

626							                .if version<500
627							                .if CFA3000
628	.fe8e		20 2f fb	jsr $fb2f	                jsr LFB2F
660							                .endif
672							                .endif

674							                .if version==350
675	.fe91		20 33 e5	jsr $e533	                jsr LE525
705							                .endif

707	.fe94		a9 03		lda #$03	                lda #$03
708	.fe96		8d 58 02	sta $0258	                sta breakAndESCAPEEffect
709	.fe99						hang:
710	.fe99		80 fe		bra $fe99	                bra hang

712							;-------------------------------------------------------------------------

714							                .if version==350
715	.fe9b						LFEA2:
716	>fe9b		fe				                .byte $fe
717	>fe9c		00				                .byte $00
718	>fe9d		eb				                .byte $eb
719	>fe9e		00				                .byte $00
720							                .if CFA3000
721	>fe9f		7d				                .byte $7d
724							                .endif
725	>fea0		ff				                .byte $FF
726	>fea1		ff				                .byte $FF
727	>fea2		15				                .byte $15
728	>fea3		00				                .byte 0
729	>fea4		17				                .byte $17
730	>fea5		60				                .byte $60
731	>fea6		32				                .byte $32
732	>fea7		08				                .byte 8
733	>fea8		0a				                .byte $A
734							                .if CFA3000
735	>fea9		38				                .byte $38
738							                .endif
739	>feaa		82				                .byte $82

741							.endif

743							;-------------------------------------------------------------------------

745	.feab						softReset:
746							                .if version==350
747	.feab		a9 08		lda #$08	                lda #ACCCON.Y
748	.fead		20 27 80	jsr $8027	                jsr terminal.tsbACCCON
751							                .endif
752	.feb0		9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
753	.feb3		9c d5 df	stz $dfd5	                stz hazel.moveDestHandle
754	.feb6		a0 ca		ldy #$ca	                ldy #$CA
755	.feb8		20 50 ea	jsr $ea50	                jsr mos.insertCharacterIntoKeyboardBuffer
756	.febb		20 e3 f2	jsr $f2e3	                jsr mos.osbyte247EntryPoint
757	.febe		ad 8d 02	lda $028d	                lda lastBREAKType
758	.fec1		f0 03		beq $fec6	                beq L829D
759							                .if version==400
761							                .else
762	.fec3		20 1e ed	jsr $ed1e	                jsr mos.LEDD0
763							                .endif
764	.fec6						L829D:
765							                .if version<500
766							                .if version==350
767	.fec6		20 8c 96	jsr $968c	                jsr terminal.setTSTAndReadDefaults2
770							                .endif
771	.fec9		4a		lsr a		                lsr a
772	.feca		90 1f		bcc $feeb	                bcc continueSoftReset
773	.fecc		20 93 96	jsr $9693	                jsr terminal.readDefaults3

775							                .if version==350
776	.fecf		4a		lsr a		                lsr a
777	.fed0		4a		lsr a		                lsr a
778	.fed1		4a		lsr a		                lsr a
779	.fed2		a9 10		lda #$10	                lda #ACCCON.ITU
780	.fed4		20 20 80	jsr $8020	                jsr terminal.trbACCCON
781	.fed7		b0 03		bcs $fedc	                bcs L82B4
782	.fed9		20 27 80	jsr $8027	                jsr terminal.tsbACCCON
791							                .endif
792	.fedc						L82B4:
793							                .if version==350
794	.fedc		20 68 80	jsr $8068	                jsr terminal.LE375
797							                .endif

799	.fedf		b0 0a		bcs $feeb	                bcs foundTube

801							                .if version==350
802	.fee1		a5 fc		lda $fc		                lda $fc
805							                .endif
806	.fee3		49 10		eor #$10	                eor #ACCCON.ITU
807							                .if version==350
808	.fee5		20 a0 e3	jsr $e3a0	                jsr staSEIWKAAndACCCON
811							                .endif

813							                .if version==350
814	.fee8		20 68 80	jsr $8068	                jsr terminal.LE375
817							                .endif

819							                .endif

:15	;******  Return to file: src/mos.s65

13729	.feeb						foundTube:
13730	.feeb						continueSoftReset:
13731	.feeb		4c 8d 80	jmp $808d	                jmp terminal.softResetPart2
13732							                .endblock

13734							;-------------------------------------------------------------------------

13736	.feee						clearAllSoundChannelBuffers: .block
13737	.feee		a2 08		ldx #$08	                ldx #8
13738	.fef0						loop:
13739	.fef0		ca		dex		                dex
13740	.fef1		20 ca f3	jsr $f3ca	                jsr clearSoundChannelBuffer
13741	.fef4		e0 04		cpx #$04	                cpx #4
13742	.fef6		d0 f8		bne $fef0	                bne loop
13743	.fef8		60		rts		                rts
13744							                .endblock

13746	>fef9						                .fill $ff00-*

13748							;-------------------------------------------------------------------------

13922							                .endif

13924							;-------------------------------------------------------------------------

13926	.ff00						E_USERV: ; ff00
13927	.ff00		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13928	.ff03						E_BRKV: ; ff03
13929	.ff03		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13930	.ff06						E_IRQ1V: ; ff06
13931	.ff06		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13932	.ff09						E_IRQ2V: ; ff09
13933	.ff09		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13934	.ff0c						E_CLIV: ; ff0c
13935	.ff0c		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13936	.ff0f						E_BYTEV: ; ff0f
13937	.ff0f		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13938	.ff12						E_WORDV: ; ff12
13939	.ff12		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13940	.ff15						E_WRCHV: ; ff15
13941	.ff15		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13942	.ff18						E_RDCHV: ; ff18
13943	.ff18		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13944	.ff1b						E_FILEV: ; ff1b
13945	.ff1b		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13946	.ff1e						E_ARGSV: ; ff1e
13947	.ff1e		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13948	.ff21						E_BGETV: ; ff21
13949	.ff21		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13950	.ff24						E_BPUTV: ; ff24
13951	.ff24		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13952	.ff27						E_GBPBV: ; ff27
13953	.ff27		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13954	.ff2a						E_FINDV: ; ff2a
13955	.ff2a		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13956	.ff2d						E_FSCV: ; ff2d
13957	.ff2d		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13958	.ff30						E_EVENTV: ; ff30
13959	.ff30		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13960	.ff33						E_UPTV: ; ff33
13961	.ff33		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13962	.ff36						E_NETV: ; ff36
13963	.ff36		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13964	.ff39						E_VDUV: ; ff39
13965	.ff39		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13966	.ff3c						E_KEYV: ; ff3c
13967	.ff3c		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13968	.ff3f						E_INSV: ; ff3f
13969	.ff3f		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13970	.ff42						E_REMV: ; ff42
13971	.ff42		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13972	.ff45						E_CNPV: ; ff45
13973	.ff45		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13974	.ff48						E_IND1V: ; ff48
13975	.ff48		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13976	.ff4b						E_IND2V: ; ff4b
13977	.ff4b		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13978	.ff4e						E_IND3V: ; ff4e
13979	.ff4e		20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint

13981							;-------------------------------------------------------------------------

13983	.ff51						extendedVectorEntryPoint:
13984							                ; .if CFA3000
13985							                ; ;...
13986							                ; .else
13987							                ; $10b,x = rL
13988	.ff51		48		pha		                pha                 ; $10a,x  (old ROMSEL)
13989	.ff52		48		pha		                pha                 ; $109,x  (old ACCCON)
13990	.ff53		48		pha		                pha                 ; $108,x  (thunk rH)
13991	.ff54		48		pha		                pha                 ; $107,x  (thunk rL)
13992	.ff55		48		pha		                pha                 ; $106,x  (jump dest MSB)
13993	.ff56		48		pha		                pha                 ; $105,x  (jump dest LSB)
13994	.ff57		08		php		                php                 ; $104,x  (P for RTI)
13995	.ff58		48		pha		                pha                 ; $103,x  (old A)
13996	.ff59		da		phx		                phx                 ; $102,x  (old X)
13997	.ff5a		5a		phy		                phy                 ; $101,x  (old Y)
13998	.ff5b		ba		tsx		                tsx
13999	.ff5c		a9 ff		lda #$ff	                lda #>extendedVectorReturnThunk-1
14000	.ff5e		9d 08 01	sta $0108,x	                sta $0108,x
14001	.ff61		a9 8c		lda #$8c	                lda #<extendedVectorReturnThunk-1
14002	.ff63		9d 07 01	sta $0107,x	                sta $0107,x

14004							                ; this routine is only ever called from $ff00, $ff03,
14005							                ; $ff06, etc. - so rL holds vectorIndex*3+2, suitable
14006							                ; for indexing into the extended vector space.
14007	.ff66		bc 0b 01	ldy $010b,x	                ldy $010B,x                  ;Y=vectorIndex*3+2
14008	.ff69		b9 9d 0d	lda $0d9d,y	                lda extendedVectorSpace-2,y  ;get vector LSB
14009	.ff6c		9d 05 01	sta $0105,x	                sta $0105,x                  ;
14010	.ff6f		b9 9e 0d	lda $0d9e,y	                lda extendedVectorSpace-1,y  ;get vector MSB
14011	.ff72		9d 06 01	sta $0106,x	                sta $0106,x
14012	.ff75		a5 f4		lda $f4		                lda $F4
14013	.ff77		9d 0a 01	sta $010a,x	                sta $010A,x
14014	.ff7a		ad 34 fe	lda $fe34	                lda ACCCON
14015	.ff7d		9d 09 01	sta $0109,x	                sta $0109,x

14017							                ; New stack layout:
14018							                ;
14019							                ; $10a,x - old ROMSEL
14020							                ; $109,x - old ACCCON
14021							                ; $108,x - thunk rH
14022							                ; $107,x - thunk rL
14023							                ; $106,x - jump dest MSB
14024							                ; $105,x - jump dest LSB
14025							                ; $104,x - P (for RTI)
14026							                ; $103,x - old A
14027							                ; $102,x - old X
14028							                ; $101,x - old Y

14030	.ff80		20 08 ed	jsr $ed08	                jsr mos.selectHAZEL
14031	.ff83		b9 9f 0d	lda $0d9f,y	                lda extendedVectorSpace,y    ;get vector ROM number
14032	.ff86		20 6a e5	jsr $e56a	                jsr mos.selectROMA
14033	.ff89		7a		ply		                ply
14034	.ff8a		fa		plx		                plx
14035	.ff8b		68		pla		                pla
14036	.ff8c		40		rti		                rti
14037							;                .endif

14039							;-------------------------------------------------------------------------

14041	.ff8d						extendedVectorReturnThunk:
14042	.ff8d		08		php		                php
14043	.ff8e		48		pha		                pha
14044	.ff8f		da		phx		                phx
14045	.ff90		ba		tsx		                tsx
14046	.ff91		bd 02 01	lda $0102,x	                lda $0102,x
14047	.ff94		9d 06 01	sta $0106,x	                sta $0106,x
14048	.ff97		bd 03 01	lda $0103,x	                lda $0103,x
14049	.ff9a		9d 07 01	sta $0107,x	                sta $0107,x
14050	.ff9d		fa		plx		                plx
14051	.ff9e		68		pla		                pla
14052	.ff9f		68		pla		                pla
14053	.ffa0		68		pla		                pla
14054	.ffa1		20 fe ec	jsr $ecfe	                jsr mos.selectMOSOrHAZEL
14055	.ffa4		68		pla		                pla
14056	.ffa5		20 6a e5	jsr $e56a	                jsr mos.selectROMA
14057	.ffa8		68		pla		                pla
14058	.ffa9		28		plp		                plp
14059	.ffaa						rtsFFAA:
14060	.ffaa		60		rts		                rts

14062							;-------------------------------------------------------------------------
14063							;
14064							; OSBYTE 150 (&96) Read from SHEILA (&FE00 â<80><93> &FEFF) [MasRef D.2-45]
14065							;
14066	.ffab						osbyte96:
14067	.ffab		bc 00 fe	ldy $fe00,x	                ldy $fe00,x
14068	.ffae		60		rts		                rts

14070							;-------------------------------------------------------------------------
14071							;
14072							; OSBYTE 157 (&9D) Write byte across Tube [MasRef D.2-48]
14073							;
14074	.ffaf						osbyte9D:
14075	.ffaf		8a		txa		                txa
14076	.ffb0		80 22		bra $ffd4	                bra OSBPUT

14078	.ffb2		00		brk #		                brk

14080							;-------------------------------------------------------------------------

14082							; MOS block ends here, so that the standard entry points have
14083							; unadorned names.
14084							;
14085							; A couple of the E_ entry points need namespacing in the Terminal
14086							; ROM.
14087							                .endblock


14090							;-------------------------------------------------------------------------
14091	.ffb3						OSWRSC:
14092	.ffb3		4c bd f3	jmp $f3bd	                jmp mos.oswrscEntryPoint ; FFB3
14093	>ffb6		36				                .byte mos.defaultVectorTable.end-mos.defaultVectorTable ;
14094	>ffb7		f5 e2				                .word mos.defaultVectorTable ;
14095	.ffb9						OSRDSC:
14096	.ffb9		4c b7 f3	jmp $f3b7	                jmp mos.osrdscEntryPoint ; FFB9
14097	.ffbc						VDUCHR:
14098	.ffbc		4c a7 f3	jmp $f3a7	                jmp mos.vduChrEntryPoint ; FFBC
14099	.ffbf						OSEVEN:
14100	.ffbf		4c fa e9	jmp $e9fa	                jmp mos.eventEntryPoint ; FFBF
14101	.ffc2						GSINIT:
14102	.ffc2		4c ef f1	jmp $f1ef	                jmp mos.gsinitEntryPoint ; FFC2
14103	.ffc5						GSREAD:
14104	.ffc5		4c 00 f2	jmp $f200	                jmp mos.gsreadEntryPoint ; FFC5
14105	.ffc8						NVRDCH:
14106	.ffc8		4c 96 e7	jmp $e796	                jmp mos.osrdchEntryPoint                    ; FFC8
14107	.ffcb						NVWRCH:
14108	.ffcb		4c fc e7	jmp $e7fc	                jmp mos.oswrchEntryPoint                    ; FFCB
14109	.ffce						OSFIND:
14110	.ffce		4c 65 f7	jmp $f765	                jmp mos.osfindEntryPoint                    ; FFCE
14111	.ffd1						OSGBPB:
14112	.ffd1		4c 08 f7	jmp $f708	                jmp mos.osgbpbEntryPoint                    ; FFD1
14113	.ffd4						OSBPUT:
14114	.ffd4		4c fc f6	jmp $f6fc	                jmp mos.osbputEntryPoint                    ; FFD4
14115	.ffd7						OSBGET:
14116	.ffd7		4c 02 f7	jmp $f702	                jmp mos.osbgetEntryPoint                    ; FFD7
14117	.ffda						OSARGS:
14118	.ffda		4c 31 f7	jmp $f731	                jmp mos.osargsEntryPoint ; FFDA
14119	.ffdd						OSFILE:
14120	.ffdd		4c 74 f7	jmp $f774	                jmp mos.osfileEntryPoint ; FFDD
14121	.ffe0						OSRDCH:
14122	.ffe0		6c 10 02	jmp ($0210)	                jmp (RDCHV)                  ; FFE0
14123	.ffe3						OSASCI:
14124	.ffe3		c9 0d		cmp #$0d	                cmp #$0D                     ; FFE3
14125	.ffe5		d0 07		bne $ffee	                bne OSWRCH                   ; FFE5
14126	.ffe7						OSNEWL:
14127	.ffe7		a9 0a		lda #$0a	                lda #$0A                     ; FFE7
14128	.ffe9		20 ee ff	jsr $ffee	                jsr OSWRCH                   ; FFE9
14129	.ffec		a9 0d		lda #$0d	                lda #$0D                     ; FFEC
14130	.ffee						OSWRCH:
14131	.ffee		6c 0e 02	jmp ($020e)	                jmp (WRCHV)                  ; FFEE
14132	.fff1						OSWORD:
14133	.fff1		6c 0c 02	jmp ($020c)	                jmp (WORDV)                  ; FFF1
14134	.fff4						OSBYTE:
14135	.fff4		6c 0a 02	jmp ($020a)	                jmp (BYTEV)                  ; FFF4
14136	.fff7						OSCLI:
14137	.fff7		6c 08 02	jmp ($0208)	                jmp (CLIV)                  ; FFF7

14139	.fffa						LFFFA:                                       ; FFFA NMIV
14140	>fffa		00 0d				                .word nmiEntryPoint
14141	.fffc						LFFFC:                                       ; FFFB RESETV
14142	>fffc		82 e3				                .word mos.resetEntryPoint
14143	.fffe						LFFFE:                                       ; FFFE IRQV
14144	>fffe		76 e5				                .word mos.irqEntryPoint


:1	;******  Return to file: mosCFA3000.s65

41							                .endsection

;******  End of listing
