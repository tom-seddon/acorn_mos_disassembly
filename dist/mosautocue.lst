
; 64tass Turbo Assembler Macro V1.59.3120 listing file
; 64tass.exe --m65c02 --nostart -Wall -q --case-sensitive --line-numbers --verbose-list -Lbuild/mosautocue.full.lst --output-section mos -o build/autocue/mos.rom --output-section utils -o build/autocue/utils.rom mosautocue.s65
; Sun Mar 17 23:09:21 2024

;Line	;Offset	;Hex		;Monitor	;Source

:1	;******  Processing input file: mosautocue.s65

1						                .include "src/hardware.s65"

:2	;******  Processing file: src/hardware.s65

1						;-------------------------------------------------------------------------

3						                .virtual $fe00

5	.fe00					CRTC: .block

7						                .virtual 8
8	.0008					R8: .block
9	=$00					normalSync=%00000000
10	=$01					interlaceSync=%00000001
11	=$02					normalSyncAlt=%00000010
12	=$03					interlaceSyncAndVideo=%00000011

14	=0					displayDelay0=0<<4
15	=16					displayDelay1=1<<4
16	=32					displayDelay2=2<<4
17	=48					displayDisable=3<<4

19	=0					cursorDelay0=0<<6
20	=64					cursorDelay1=1<<6
21	=128					cursorDelay2=2<<6
22	=192					cursorDisable=3<<6
23						                .endblock
24						                .endvirtual

26						                .virtual 10
27	.000a					R10: .block
28	=$40					blink=$40
29	=$20					slowBlink=$20
30						                .endblock
31						                .endvirtual

33						                .endblock

35						                .endvirtual

37						;-------------------------------------------------------------------------
38						; ACIA=$fe08
39	=$fe10					SERPROC=$fe10
40						;HADC=$fe18
44	=$fe30					ROMSEL=$fe30
45						;ACCCON=$fe34
46						                .virtual $fe20
47	.fe20					VCONTROL: .block
48	=$01					flash=$01
49	=$02					isTeletext=$02
50	=$00					shift2MHz=$00
51	=$04					shift4MHz=$04
52	=$08					shift8MHz=$08
53	=$0c					shift16MHz=$0c
54	=$00					crtc1MHz=$00
55	=$10					crtc2MHz=$10
56	=$00					cursor____=$00
57	=$20					cursor__XX=$20
58	=$40					cursor_X__=$40
59	=$60					cursor_XXX=$60
60	=$80					cursorX___=$80
61	=$a0					cursorX_XX=$a0
62	=$c0					cursorXX__=$c0
63	=$e0					cursorXXXX=$e0
64						                .endblock
65						                .endvirtual
66	=$fe21					VPALETTE=$fe21

68						;-------------------------------------------------------------------------

70						                .virtual $fe08
71	.fe08					ACIA: .block

73	.fe08					control: .block
74	=0					counterDivide1=0<<0
75	=1					counterDivide16=1<<0
76	=2					counterDivide64=2<<0
77	=3					reset=3<<0

79	=0					word7DataEventParity2Stop=0<<2
80	=4					word7DataOddParity2Stop=1<<2
81	=8					word7DataEvenParity1Stop=2<<2
82	=12					word7DataOddParity1Stop=3<<2
83	=16					word8DataNoParity2Stop=4<<2
84	=20					word8DataNoParity1Stop=5<<2
85	=24					word8DataEvenParity1Stop=6<<2
86	=28					word8DataOddParity1Stop=7<<2

88	=0					rtsLowTXInterruptDisabled=0<<5
89	=32					rtsLowTXInterruptEnabled=1<<5
90	=64					rtsHighTXInterruptDisabled=2<<5
91	=96					rtsLowBreakTXInterruptDisabled=3<<5

93	=0					rtsRXInterruptDisabled=0<<7
94	=128					rtsRTSInterruptEnabled=1<<7

96						                .endblock
97	.fe08					status: .block
98						                .endblock

100	>fe08					                .fill 1
101	.fe09					tdr:
102	.fe09					rdr:
103	>fe09					                .fill 1
104						                .endblock
105						                .endvirtual

107						;-------------------------------------------------------------------------

109						                .virtual $fe18
110	.fe18					HADC: .block
111	.fe18					status: .block
112						                .endblock
113	.fe18					latch: .block
114						                .endblock
115	>fe18					                .fill 1

117						                .endblock
118						                .endvirtual

120						;-------------------------------------------------------------------------

122						                .virtual $fe34
123	.fe34					ACCCON: .block
124						;D=1 = display shadow RAM; D=0 = display main RAM
125	=$01					D=$01

127						;E=1 = VDU code ($c000-$dfff in MOS ROM) accesses shadow RAM; E=0 =
128						;VDU code accesses main RAM
129	=$02					E=$02

131						;X=1 = shadow RAM at $3000; X=0 = main RAM at $3000
132	=$04					X=$04

134						;Y=1 = HAZEL at $c000; Y=0 = MOS ROM at $c000
135	=$08					Y=$08

137						;ITU=1 = access internal Tube; ITU=0 = access external Tube
138	=$10					ITU=$10

140						;IFJ=1 = $fc00...$fdff accesses cartridge; IFJ=0 = $fc00...$fdff
141						;accesses 1MHz bus
142	=$20					IFJ=$20

144						; TST=1 = read MOS ROM at $fc00...$feff; TST=0 = read I/O at
145						; $fc00...$feff
146	=$40					TST=$40

148						;IRR=1 = IRQ to CPU
149	=$80					IRR=$80
150						                .bend
151						                .endv

153						                VIA: .struct                    ;
154	.0000					orb:
155	.0000					irb:
156	>0000					                .fill 1         ;0
157	.0001					ora:
158	.0001					ira:
159	>0001					                .fill 1         ;1
160	.0002					ddrb:
161	>0002					                .fill 1         ;2
162	.0003					ddra:
163	>0003					                .fill 1         ;3
164	.0004					t1cL:
165	>0004					                .fill 1         ;4
166	.0005					t1cH:
167	>0005					                .fill 1         ;5
168	.0006					t1lL:
169	>0006					                .fill 1         ;6
170	.0007					t1lH:
171	>0007					                .fill 1         ;7
172	.0008					t2cL:
173	>0008					                .fill 1         ;8
174	.0009					t2cH:
175	>0009					                .fill 1         ;9
176	.000a					sr:
177	>000a					                .fill 1         ;10
178	.000b					acr: .block
179	=0					t1OneShot=0<<6
180	=64					t1Continuous=1<<6
181	=128					t1OneShotPB7=2<<6
182	=192					t1ContinuousPB7=3<<6

184	=0					t2Timer=0<<5
185	=32					t2CountPB6=1<<5

187	=0					srDisabled=0<<2
188	=4					srShiftInT2=1<<2
189	=8					srShiftInVIAClock=2<<2
190	=12					srShiftInExtClock=3<<2
191	=16					srShiftOutT2FreeRun=4<<2
192	=20					srShiftOutT2=5<<2
193	=24					srShiftOutVIAClock=6<<2
194	=28					srShiftOutExtClock=7<<2

196	=0					pbLatchDisabled=0<<1
197	=2					pbLatchEnabled=1<<1

199	=0					paLatchDisabled=0<<0
200	=1					paLatchEnabled=1<<0

202	>000b					                .fill 1         ;11
203						                .endblock
204	.000c					pcr: .block

206	=0					cb2InputNegativeActiveEdge=0<<5
207	=32					cb2IndependentInterruptInputNegativeEdge=1<<5
208	=64					cb2InputPositiveEdge=2<<5
209	=96					cb2IndependentInterruptInputPositiveEdge=3<<5
210	=128					cb2HandshakeOutput=4<<5
211	=160					cb2PulseOutput=5<<5
212	=192					cb2LowOutput=6<<5
213	=224					cb2HighOutput=7<<5

215	=0					cb1NegativeActiveEdge=0<<4
216	=16					cb1PositiveActiveEdge=1<<4

218	=0					ca2InputNegativeActiveEdge=0<<1
219	=2					ca2IndependentInterruptInputNegativeEdge=1<<1
220	=4					ca2InputPositiveEdge=2<<1
221	=6					ca2IndependentInterruptInputPositiveEdge=3<<1
222	=8					ca2HandshakeOutput=4<<1
223	=10					ca2PulseOutput=5<<1
224	=12					ca2LowOutput=6<<1
225	=14					ca2HighOutput=7<<1

227	=0					ca1NegativeActiveEdge=0<<0
228	=1					ca1PositiveActiveEdge=1<<0

230	>000c					                .fill 1         ;12
231						                .endblock
232	.000d					ifr:
233	>000d					                .fill 1         ;13
234	.000e					ier:
235	>000e					                .fill 1         ;14
236	.000f					oraNoHandshake:
237	.000f					iraNoHandshake:
238	>000f					                .fill 1         ;15

240	.0010					irq: .block
241	=1					ca2=1
242	=2					ca1=2
243	=4					sr=4
244	=8					cb2=8
245	=16					cb1=16
246	=32					t2=32
247	=64					t1=64
248						                .endblock
249						                .ends

251						; System VIA port B bits for Master Compact
252	=$20					i2cClock=$20
253	=$10					i2cData=$10

255						; PCD8572 command codes

257						;   7   6   5   4   3   2   1   0
258						; +---+---+---+---+---+---+---+---+
259						; | 1 | 0 | 1 | 0 |A2 |A1 |A0 |RnW|
260						; +---+---+---+---+---+---+---+---+

262	=$a1					eepromRead=$a1
263	=$a0					eepromWrite=$a0
264						                                .virtual $fe40
265	.fe40					systemVIA: .dstruct VIA
154	.fe40					orb:
155	.fe40					irb:
156	>fe40					                .fill 1         ;0
157	.fe41					ora:
158	.fe41					ira:
159	>fe41					                .fill 1         ;1
160	.fe42					ddrb:
161	>fe42					                .fill 1         ;2
162	.fe43					ddra:
163	>fe43					                .fill 1         ;3
164	.fe44					t1cL:
165	>fe44					                .fill 1         ;4
166	.fe45					t1cH:
167	>fe45					                .fill 1         ;5
168	.fe46					t1lL:
169	>fe46					                .fill 1         ;6
170	.fe47					t1lH:
171	>fe47					                .fill 1         ;7
172	.fe48					t2cL:
173	>fe48					                .fill 1         ;8
174	.fe49					t2cH:
175	>fe49					                .fill 1         ;9
176	.fe4a					sr:
177	>fe4a					                .fill 1         ;10
178	.fe4b					acr: .block
179	=0					t1OneShot=0<<6
180	=64					t1Continuous=1<<6
181	=128					t1OneShotPB7=2<<6
182	=192					t1ContinuousPB7=3<<6

184	=0					t2Timer=0<<5
185	=32					t2CountPB6=1<<5

187	=0					srDisabled=0<<2
188	=4					srShiftInT2=1<<2
189	=8					srShiftInVIAClock=2<<2
190	=12					srShiftInExtClock=3<<2
191	=16					srShiftOutT2FreeRun=4<<2
192	=20					srShiftOutT2=5<<2
193	=24					srShiftOutVIAClock=6<<2
194	=28					srShiftOutExtClock=7<<2

196	=0					pbLatchDisabled=0<<1
197	=2					pbLatchEnabled=1<<1

199	=0					paLatchDisabled=0<<0
200	=1					paLatchEnabled=1<<0

202	>fe4b					                .fill 1         ;11
203						                .endblock
204	.fe4c					pcr: .block

206	=0					cb2InputNegativeActiveEdge=0<<5
207	=32					cb2IndependentInterruptInputNegativeEdge=1<<5
208	=64					cb2InputPositiveEdge=2<<5
209	=96					cb2IndependentInterruptInputPositiveEdge=3<<5
210	=128					cb2HandshakeOutput=4<<5
211	=160					cb2PulseOutput=5<<5
212	=192					cb2LowOutput=6<<5
213	=224					cb2HighOutput=7<<5

215	=0					cb1NegativeActiveEdge=0<<4
216	=16					cb1PositiveActiveEdge=1<<4

218	=0					ca2InputNegativeActiveEdge=0<<1
219	=2					ca2IndependentInterruptInputNegativeEdge=1<<1
220	=4					ca2InputPositiveEdge=2<<1
221	=6					ca2IndependentInterruptInputPositiveEdge=3<<1
222	=8					ca2HandshakeOutput=4<<1
223	=10					ca2PulseOutput=5<<1
224	=12					ca2LowOutput=6<<1
225	=14					ca2HighOutput=7<<1

227	=0					ca1NegativeActiveEdge=0<<0
228	=1					ca1PositiveActiveEdge=1<<0

230	>fe4c					                .fill 1         ;12
231						                .endblock
232	.fe4d					ifr:
233	>fe4d					                .fill 1         ;13
234	.fe4e					ier:
235	>fe4e					                .fill 1         ;14
236	.fe4f					oraNoHandshake:
237	.fe4f					iraNoHandshake:
238	>fe4f					                .fill 1         ;15

240	.fe50					irq: .block
241	=1					ca2=1
242	=2					ca1=2
243	=4					sr=4
244	=8					cb2=8
245	=16					cb1=16
246	=32					t2=32
247	=64					t1=64
248						                .endblock
249						                .ends
266						                .endv

268						                .virtual $fe60
269	.fe60					userVIA: .dstruct VIA
154	.fe60					orb:
155	.fe60					irb:
156	>fe60					                .fill 1         ;0
157	.fe61					ora:
158	.fe61					ira:
159	>fe61					                .fill 1         ;1
160	.fe62					ddrb:
161	>fe62					                .fill 1         ;2
162	.fe63					ddra:
163	>fe63					                .fill 1         ;3
164	.fe64					t1cL:
165	>fe64					                .fill 1         ;4
166	.fe65					t1cH:
167	>fe65					                .fill 1         ;5
168	.fe66					t1lL:
169	>fe66					                .fill 1         ;6
170	.fe67					t1lH:
171	>fe67					                .fill 1         ;7
172	.fe68					t2cL:
173	>fe68					                .fill 1         ;8
174	.fe69					t2cH:
175	>fe69					                .fill 1         ;9
176	.fe6a					sr:
177	>fe6a					                .fill 1         ;10
178	.fe6b					acr: .block
179	=0					t1OneShot=0<<6
180	=64					t1Continuous=1<<6
181	=128					t1OneShotPB7=2<<6
182	=192					t1ContinuousPB7=3<<6

184	=0					t2Timer=0<<5
185	=32					t2CountPB6=1<<5

187	=0					srDisabled=0<<2
188	=4					srShiftInT2=1<<2
189	=8					srShiftInVIAClock=2<<2
190	=12					srShiftInExtClock=3<<2
191	=16					srShiftOutT2FreeRun=4<<2
192	=20					srShiftOutT2=5<<2
193	=24					srShiftOutVIAClock=6<<2
194	=28					srShiftOutExtClock=7<<2

196	=0					pbLatchDisabled=0<<1
197	=2					pbLatchEnabled=1<<1

199	=0					paLatchDisabled=0<<0
200	=1					paLatchEnabled=1<<0

202	>fe6b					                .fill 1         ;11
203						                .endblock
204	.fe6c					pcr: .block

206	=0					cb2InputNegativeActiveEdge=0<<5
207	=32					cb2IndependentInterruptInputNegativeEdge=1<<5
208	=64					cb2InputPositiveEdge=2<<5
209	=96					cb2IndependentInterruptInputPositiveEdge=3<<5
210	=128					cb2HandshakeOutput=4<<5
211	=160					cb2PulseOutput=5<<5
212	=192					cb2LowOutput=6<<5
213	=224					cb2HighOutput=7<<5

215	=0					cb1NegativeActiveEdge=0<<4
216	=16					cb1PositiveActiveEdge=1<<4

218	=0					ca2InputNegativeActiveEdge=0<<1
219	=2					ca2IndependentInterruptInputNegativeEdge=1<<1
220	=4					ca2InputPositiveEdge=2<<1
221	=6					ca2IndependentInterruptInputPositiveEdge=3<<1
222	=8					ca2HandshakeOutput=4<<1
223	=10					ca2PulseOutput=5<<1
224	=12					ca2LowOutput=6<<1
225	=14					ca2HighOutput=7<<1

227	=0					ca1NegativeActiveEdge=0<<0
228	=1					ca1PositiveActiveEdge=1<<0

230	>fe6c					                .fill 1         ;12
231						                .endblock
232	.fe6d					ifr:
233	>fe6d					                .fill 1         ;13
234	.fe6e					ier:
235	>fe6e					                .fill 1         ;14
236	.fe6f					oraNoHandshake:
237	.fe6f					iraNoHandshake:
238	>fe6f					                .fill 1         ;15

240	.fe70					irq: .block
241	=1					ca2=1
242	=2					ca1=2
243	=4					sr=4
244	=8					cb2=8
245	=16					cb1=16
246	=32					t2=32
247	=64					t1=64
248						                .endblock
249						                .ends
270						                .endv

346						RTC: .struct
347	>0000					seconds: .fill 1
348	>0001					secondsAlarm: .fill 1
349	>0002					minutes: .fill 1
350	>0003					minutesAlarm: .fill 1
351	>0004					hours: .fill 1
352	>0005					hoursAlarm: .fill 1
353	>0006					dayOfWeek: .fill 1
354	>0007					dayOfMonth: .fill 1
355	>0008					month: .fill 1
356	>0009					year: .fill 1
357	.000a					a: .block
358	=7					dvMask=7
359	=4					dvShift=4
360	=0					dv4194304Hz=0<<dvShift
361	=16					dv1048576Hz=1<<dvShift
362	=32					dv32768Hz=2<<dvShift
363	>000a					                .fill 1
364						                .endblock
365	.000b					b: .block
366	=$80					set=$80
367	=$02					_24h=$02
368	=$01					dse=$01
369	>000b					                .fill 1
370						                .endblock
371	.000c					c: .block
372	=$10					uf=$10
373	>000c					                .fill 1
374						                .endblock
375	.000d					d: .block
376	>000d					                .fill 1
377						                .endblock
378	=50					ram_size=50
379	>000e					ram: .fill ram_size
380						                .endstruct

:1	;******  Return to file: mosautocue.s65

2						                .include "src/mos_workspace.s65"

:3	;******  Processing file: src/mos_workspace.s65

1						;-------------------------------------------------------------------------
2						;
3						; Disorganized jumble of constants. They'll get tidied up at some
4						; point... promise...
5						;
6						;-------------------------------------------------------------------------

8						; The version constant is not very well named: it should really be
9						; something like "acornVersion". It refers to one of the official MOS
10						; versions released for Acorn-branded hardware, and can have one of
11						; the following 6 specific values:
12						;
13						; version=320 - MOS 3.20
14						; version=350 - MOS 3.50
15						; version=400 - MOS 4.00
16						; version=500 - MOS 5.00
17						; version=510 - MOS 5.10
18						; version=511 - MOS 5.11
19						;
20						; (Strictly speaking, these are not numeric, but there's a few
21						; instances of version>=n where this coincidentally makes sense. The
22						; 5.xx series follow on from one another, some of the 4.00 changes are
23						; in 5.xx too, and some of the 4.00 changes that are in 5.xx also made
24						; it into 3.50 as well.)

28						; All other versions are considered to be variants of one of the six
29						; official versions, as per the variant flags below. These variant
30						; flags are applicable to the stated versions only, and may or may not
31						; be separable from the various version-dependent .if/.endif
32						; constructs for that version. If they're changed from these defaults
33						; for any other version, the output may not make sense.
34						;
35						; Over time I intend to (try to) turn these into feature flags,
36						; according to the actual features they control.

38						                .weak
39						                ; Set if building Olivetti MOS, a variant of 5.10.
40	=false					olivetti=false

42						                ; Set if building CFA3000 MOS, a variant of 3.50.
43	=false					CFA3000=false

45						                ; Set if building Autocue 1500 MOS, a variant of 5.11.
46	=false					autocue=false

48						                ; Set if building MOS 3.29 (Acorn FinMOS), a variant
49						                ; of 3.50.
50	=false					finmos329=false

52						                ; Clear if stripping out the terminal ROM. Applicable
53						                ; to 3.20 or 3.50.
54	=true					includeTerminalROM=true

56						                ; Set if building any of the refresh versions.
57	=false					refreshVersion=false
58						                .endweak

60						;-------------------------------------------------------------------------

62						; These feature flags can be set freely by the main driver file.

64						                .weak

66						                ; If true, include *X. Not clear what this command
67						                ; actually, does, but it's in the original ROMs, so
68						                ; there has to be the option...
69	=false					includeStarX=version<500

71						                ; For some reason, *TAPE and *MOTOR have lower-case
72						                ; command name entries in MOS 4.00.
73	="TAPE"					tapeCommandString=version==400?"tape":"TAPE"
74	="MOTOR"				motorCommandString=version==400?"motor":"MOTOR"

76						                ; If false, reproduce the OSBYTE $6B/$6C bug present
77						                ; in MOS versions prior to 3.50.
78	=false					correctOSBYTE6B6C=version==350

80						                ; Assumed century for RTC reading purposes.
81	=$19					assumedRTCCenturyBCD=$19

83						                ; If false, reproduce the relocation issue present in
84						                ; MOS 3.50. Applies to MOS 3.50 only.
85	=false					correctlyHandleMissingTubeRelocationBitmap=false

87						                ; If true, improve Tube relocation speed.
88	=false					fasterTubeRelocation=false

90						                .endweak

92						;-------------------------------------------------------------------------

94						; These feature flags are offered on a best-effort basis. They're more
95						; intended for readability than for use as toggles.

97						                .weak

99						                ; If true, include Tube support.
102						                .elif version>=500
103	=false					includeTubeSupport=false

107	=true					useTableDrivenConfigure=true

112						                .endweak

114						;-------------------------------------------------------------------------

116						; Some combinations are impossible. Sorry!
117						;
118						; (The code deliberately doesn't try to work around this. The driver
119						; files must avoid these cases.)

124						                ; Table-driven configuration takes up fewer bytes, so
125						                ; no point trying to switch it off for builds where it
126						                ; would be on.

129						;-------------------------------------------------------------------------

131						beword .macro value
134						                .endm

137						;-------------------------------------------------------------------------

139	=$400					tubeHostAddr=$400

162						;-------------------------------------------------------------------------

164						                ; Force word operand - a few instances of this,
165						                ; presumably due to limitations in 1980s assemblers.
166						                ;
167						                ; Refresh versions can use an 8-bit operand for time
168						                ; and space savings.

170						forcew: .macro instr,oper
176						                .endmacro

178						;-------------------------------------------------------------------------

180						                .virtual $b0
181	.00b0					sramTransferPointers: .block
182	>00b0					src: .fill 2
183	>00b2					dest: .fill 2
184						                .endblock
185						                .endvirtual

187	=$a8					osargsBuffer=$a8                ;4-byte ZP buffer for use with OSARGS
188	=$b8					printMessageAddress=$b8

190						                .virtual $bb
191	.00bb					tapeCurrentOptionsByte: .block
192						                .endblock
193						                .endvirtual

195						                .virtual $f2
196	.00f2					fsStatusByte: .block
197	=$01					inputFileOpen=$01
198	=$02					outputFileOpen=$02
199	=$08					catStatus=$08
200	=$40					eofReached=$40
201	=$80					eofWarningGiven=$80
202						                .endblock
203						                .endvirtual

205						                .virtual $e4
206	.00e4					stringInputOptions: .block
207	=$80					doubleQuotes=$80
208	=$40					spaceNotATerminator=$40
209	=$01					goodString=$01
210						                .endblock
211						                .endvirtual
212	=$e5					stringInputPlingFlag=$e5        ;bit 7 set if last char was '!'
213	=$e6					readCharacterTimedFlag=$e6
214	=$e6					commandLineY=$e6
215	=$e7					autoRepeatCountdownTimer=$e7
216	=$eb					tapeCritical=$eb
217	=$ec					lastKeyPressedInternal=$ec
218	=$ed					firstKeyPressedInternal=$ed
219	=$f2					stringInputBufferAddress=$f2    ;word

221						;-------------------------------------------------------------------------

223	=$80					romTypeHasServiceEntry=$80
224	=$40					romTypeHasLanguageEntry=$40
225	=$20					romTypeHasTubeRelocationAddress=$20
226	=$02					romType6502=$02

228						;-------------------------------------------------------------------------

230	=$01					romServiceCallAbsoluteWorkspaceClaim=$01 ; memory used only when ROM is paged in
231	=$02					romServiceCallPrivateWorkspaceClaim=$02 ; memory used even when ROM is not paged in
232	=$03					romServiceCallAutoBoot=$03              ;
233	=$04					romServiceCallUnrecognisedCommand=$04   ; star command not recognised
234	=$05					romServiceCallUnrecognisedInterrupt=$05 ;
235	=$06					romServiceCallBreakInstruction=$06      ;
236	=$07					romServiceCallUnrecognisedOSBYTE=$07    ;
237	=$08					romServiceCallUnrecognisedOSWORD=$08    ;
238	=$09					romServiceCallHelp=$09                  ;
239	=$0a					romServiceCallClaimStaticWorkspace=$0A ; (Issued by paged ROMs, not the OS)
240	=$0b					romServiceCallNMIRelease=$0B    ; (Issued by paged ROMs, not the OS)
241	=$0c					romServiceCallNMIClaim=$0C      ; (Issued by paged ROMs, not the OS)
242	=$0d					romServiceCallROMFilingSystemInitialize=$0D    ;
243	=$0e					romServiceCallROMFilingSystemByteGet=$0E    ;
244	=$0f					romServiceCallVectorsClaimed=$0F    ; Used when a filing system starts
245	=$10					romServiceCallSpoolExecClosureWarning=$10    ;
246						;romServiceCallFontImplosionExplosionWarning=$11    ;
247	=$12					romServiceCallInitialiseFilingSystem=$12    ; (Issued from paged ROMs, not the OS)
248	=$15					romServiceCallPollingInterrupt=$15
249	=$18					romServiceCallReserved=$18
250	=$21					romServiceCallAbsoluteHAZELWorkspaceClaim=$21
251	=$22					romServiceCallPrivateHAZELWorkspaceClam=$22
252	=$23					romServiceCallTopOfHAZELWorkspace=$23
253	=$24					romServiceCallCountDynamicHAZELWorkspace=$24
254	=$25					romServiceCallRequestFSInfo=$25
255	=$26					romServiceCallCloseAllOpenFiles=$26
256	=$27					romServiceCallInformReset=$27
257	=$28					romServiceCallUnknownCONFIG=$28
258	=$29					romServiceCallUnknownSTATUS=$29
259	=$2a					romServiceCallLanguageChange=$2a
260	=$2c					romServiceCallCompactJoystick=$2c
261	=$30					romServiceCall30=$30
262	=$fe					romServiceCallTubeSystemPostInitialisation=$FE    ;
263	=$ff					romServiceCallTubeMainInitialisation=$FF    ;

265						;-------------------------------------------------------------------------

267	=0					fsNone=0
268	=1					fs1200BaudTape=1
269	=2					fs300BaudTape=2
270	=3					fsROM=3

272						; max FS number for all tape/ROM FS types
273	=3					fsTapeOrROMMax=3

275						;-------------------------------------------------------------------------

277						; [MasRef D.2-24]

279	=0					eventOutputBufferEmpty=0
280	=1					eventInputBufferFull=1
281	=2					eventCharacterEnteringBuffer=2
282	=3					eventADCConversionComplete=3
283	=4					eventStartOfVerticalSync=4
284	=5					eventIntervalTimerCrossingZero=5
285	=6					eventESCAPEPressed=6
286	=7					eventRS423Error=7
287	=8					eventNetworkError=8
288	=9					eventUser=9
289	=9					eventMax=9

291						;-------------------------------------------------------------------------

293						; [MasRef D.2-27]

295						; Input buffers
296	=0					bufferKeyboard=0
297	=1					bufferRS423Input=1

299						; Output buffers
300	=2					bufferFirstOutput=2
301	=2					bufferRS423Output=2
302	=3					bufferPrinter=3
303	=4					bufferSoundChannel0=4
304	=5					bufferSoundChannel1=5
305	=6					bufferSoundChannel2=6
306	=7					bufferSoundChannel3=7
307						; What's buffer 8? Previously speech on OS 1.20. There's indices
308						; allocated for it...
309	=8					bufferMax=8

312	=$03e0					bufferKeyboardAddress=$03e0
313	=32					bufferKeyboardSize=32
314	=$0a00					bufferRS423InputAddress=$0a00
315	=256					bufferRS423InputSize=256
316	=$0900					bufferRS423OutputAddress=$0900
317	=192					bufferRS423OutputSize=192
318	=$0880					bufferPrinterAddress=$0880
319	=64					bufferPrinterSize=64
320	=$0840					bufferSoundChannel0Address=$0840
321	=16					bufferSoundChannel0Size=16
322	=$0850					bufferSoundChannel1Address=$0850
323	=16					bufferSoundChannel1Size=16
324	=$0860					bufferSoundChannel2Address=$0860
325	=16					bufferSoundChannel2Size=16
326	=$0870					bufferSoundChannel3Address=$0870
327	=16					bufferSoundChannel3Size=16
328	=$09c0					buffer8Address=$09c0
329	=64					buffer8Size=64

333						; BufferInfo: .function bufferAddress,bufferSizeByte
334						;                 .endfunction (bufferAddress,256-bufferSizeByte)

336						; ; buffer info is (base address,size)
337						;  _:=[]
338						; _..=[BufferInfo($0300,32)];bufferKeyboard=0
339						; _..=[BufferInfo($0a00,256)];bufferRS423Input=1
340						; _..=[BufferInfo($08c0,192)];bufferRS423Output=2
341						; _..=[BufferInfo($07c0,64)];bufferPrinter=3
342						; _..=[BufferInfo($0750,16)];bufferSoundChannel0=4
343						; _..=[BufferInfo($0760,16)];bufferSoundChannel1=5
344						; _..=[BufferInfo($0770,16)];bufferSoundChannel2=6
345						; _..=[BufferInfo($0780,16)];bufferSoundChannel3=7
346						; _..=[BufferInfo($0900,64)];What's buffer 8?

348						;-------------------------------------------------------------------------

350						; [MasRef C.5-5]

352	=0					printerDriverTypeSink=0
353	=1					printerDriverTypeParallel=1
354	=2					printerDriverTypeSerial=2
355	=3					printerDriverTypeUser=3
356	=4					printerDriverTypeNetwork=4

358						; AUG p259

360	=0					printerDriverPoll=0
361	=1					printerDriverActivate=1
362	=2					printerDriverVDU2=2
363	=3					printerDriverVDU3=3
364	=5					printerDriverFX5=5

366	=10					printerDriverFX3=10             ;undocumented???

368						;-------------------------------------------------------------------------

370						; AUG p261

372	=0					netPrinterRequest0=0
373	=1					netPrinterRequest1=1
374	=2					netPrinterRequest2=2
375	=3					netPrinterRequest3=3
376	=4					netWriteCharacterAttempted=4
377	=5					netPrinterRequest5=5
378	=6					netReadCharacterAttempted=6
379	=7					netOSBYTEAttempted=7
380	=8					netOSWORDAttempted=8
381	=13					netOSWORD0Complete=13

383						;-------------------------------------------------------------------------

385						; OSFIND open constants
386	=$40					findOpenForRead=$40
387	=$80					findOpenForWrite=$80

389	=0					fscOPT=0
390	=1					fscCheckEOF=1
391	=2					fscStarSlash=2
392	=3					fscUnknownCommand=3
393	=4					fscStarRUN=4
394	=5					fscStarCAT=5
395	=6					fscNewFS=6
396	=7					fscFileHandleRange=7
397	=8					fscStarCommand=8
398	=9					fscStarEX=9
399	=10					fscStarINFO=10
400	=11					fscRUNLibrary=11

402						; NAUG mentions this. But it doesn't appear to
403						; actually exist in the code.
404						;
405						; Maybe it's present in MOS 3.50 or later?
406	=12					fscRENAME=12

408	=1					gbpbPutBytesNewPTR=1            ;[AUG p340]
409	=2					gbpbPutBytesCurrentPTR=2        ;[AUG p340]
410	=3					gbpbGetBytesNewPTR=3            ;[AUG p341]
411	=4					gbpbGetBytesCurrentPTR=4        ;[AUG p341]
412	=5					gbpbGetMediaMetadata=5          ;[AUG p341]
413	=6					gbpbGetCurrentDevice=6          ;[AUG p341]
414	=7					gbpbGetLibraryDevice=7          ;[AUG p341]
415	=8					gbpbReadFileNames=8             ;[AUG p341]

417						OSGBPBParameterBlock: .struct
418	.0000					handle:
419	>0000					                .fill 1
420	.0001					address:
421	>0001					                .fill 4
422	.0005					count:
423	>0005					                .fill 4
424	.0009					ptr:
425	>0009					                .fill 4
426						                .endstruct

428	=0					argsGetFS=0                     ;[AUG p337]
429	=1					argsGetCommandLine=1            ;[AUG p338]
430	=2					argsCheckANFS=2                 ;https://beebwiki.mdfs.net/OSARGS
431	=3					argsGetLibFS=3                  ;
432	=$ff					argsFlushBuffers=$ff            ;[AUG p338]

434	=0					argsFileGetPTR=0
435	=1					argsFileSetPTR=1
436	=2					argsFileGetEXT=2
437	=$ff					argsFileFlush=$ff

439	=0					fileSave=0                      ;[AUG p336]
440	=1					fileWriteMetadata=1             ;[AUG p336]
441	=2					fileWriteLoadAddress=2          ;[AUG p336]
442	=3					fileWriteExecAddress=3          ;[AUG p336]
443	=4					fileWritettributes=4            ;[AUG p336]
444	=5					fileReadMetadata=5              ;[AUG p336]
445	=6					fileDelete=6                    ;[AUG p336]
446	=$ff					fileLoad=$ff                    ;[AUG p336]

448						OSFILEParameterBlock: .struct
449	.0000					fileName:
450	>0000					                .fill 2
451	.0002					addresses:
452	.0002					load:
453	>0002					                .fill 4
454	.0006					exec:
455	>0006					                .fill 4
456	.000a					length:
457	.000a					saveStart:
458	>000a					                .fill 4
459	.000e					attributes:
460	.000e					saveEnd:
461	>000e					                .fill 4
462						                .endstruct

464						;-------------------------------------------------------------------------

466	=0					bufferNumberKeyboard=0          ;
467	=1					bufferNumberRS423Input=1        ;
468	=2					bufferNumberRS423Output=2       ;
469	=3					bufferNumberPrinter=3           ;
470	=4					bufferNumberSound0=4            ; Noise channel
471	=5					bufferNumberSound1=5            ;
472	=6					bufferNumberSound2=6            ;
473	=7					bufferNumberSound3=7            ;
474						; bufferNumberSpeech=8            ;
475	=8					bufferNumberHighest=8           ;

477						;-------------------------------------------------------------------------

488						;-------------------------------------------------------------------------

490						; uservIndex=0
491						; brkvIndex=1
492						; irq1vIndex=2
493						; irq2vIndex=3
494						; clivIndex=4
495						; bytevIndex=5
496						; wordvIndex=6
497						; wrchvIndex=7
498						; rdchvIndex=8
499						; filevIndex=9
500						; argsvIndex=10
501						; bgetvIndex=11
502						; bputvIndex=12
503						; gbpbvIndex=13
504						; findvIndex=14
505						; fscvIndex=15
506						; eventvIndex=16
507						; uptvIndex=17
508						; netvIndex=18
509						; vduvIndex=19
510						; keyvIndex=20
511						; insvIndex=21
512						; remvIndex=22
513						; cnpvIndex=23
514						; ind1vIndex=24
515						; ind2vIndex=25
516						; ind3vIndex=26

519						                .virtual $200
520	.0200					vectors:
521	.0200					USERV:
522	>0200					                .fill 2
523	.0202					BRKV:
524	>0202					                .fill 2
525	.0204					IRQ1V:
526	>0204					                .fill 2
527	.0206					IRQ2V:
528	>0206					                .fill 2
529	.0208					CLIV:
530	>0208					                .fill 2
531	.020a					BYTEV:
532	>020a					                .fill 2
533	.020c					WORDV:
534	>020c					                .fill 2
535	.020e					WRCHV:
536	>020e					                .fill 2
537	.0210					RDCHV:
538	>0210					                .fill 2
539	.0212					FILEV:
540	>0212					                .fill 2
541	.0214					ARGSV:
542	>0214					                .fill 2
543	.0216					BGETV:
544	>0216					                .fill 2
545	.0218					BPUTV:
546	>0218					                .fill 2
547	.021a					GBPBV:
548	>021a					                .fill 2
549	.021c					FINDV:
550	>021c					                .fill 2
551	.021e					FSCV:
552	>021e					                .fill 2
553	.0220					EVENTV:
554	>0220					                .fill 2
555	.0222					UPTV:
556	>0222					                .fill 2
557	.0224					NETV:
558	>0224					                .fill 2
559	.0226					VDUV:
560	>0226					                .fill 2
561	.0228					KEYV:
562	>0228					                .fill 2
563	.022a					INSV:
564	>022a					                .fill 2
565	.022c					REMV:
566	>022c					                .fill 2
567	.022e					CNPV:
568	>022e					                .fill 2
569	.0230					IND1V:
570	>0230					                .fill 2
571	.0232					IND2V:
572	>0232					                .fill 2
573	.0234					IND3V:
574	>0234					                .fill 2
575	.0236					mosVariables:

577						; OSBYTE 166 (&A6) Read start address of MOS variables [MasRef D.2-50]
578						; OSBYTE 167 (&A7) Read start address of MOS variablespointer table  [MasRef D.2-50]
579	>0236					mosVariablesAddress: .fill 2

581						; OSBYTE 168 (&A8) Read address of ROM pointer table [MasRef D.2-51]
582						; OSBYTE 169 (&A9) Read address of ROM pointer table [MasRef D.2-51]
583	>0238					extendedVectorSpaceAddress: .fill 2

585						; OSBYTE 170 (&AA) Read address of ROM information table [MasRef D.2-51]
586						; OSBYTE 171 (&AB) Read address of ROM information table [MasRef D.2-51]
587	>023a					romInformationTableAddress: .fill 2

589						; OSBYTE 172 (&AC) Read address of keyboard translation table [MasRef D.2-52]
590						; OSBYTE 173 (&AD) Read address of keyboard translation table [MasRef D.2-52]
591	>023c					keyboardTranslationTableAddress: .fill 2

593						; OSBYTE 174 (&AE) Read address of VDU variables origin [MasRef D.2-52]
594						; OSBYTE 175 (&AF) Read address of VDU variables origin [MasRef D.2-52]
595	>023e					vduVariablesAddress: .fill 2

597						; OSBYTE 176 (&B0) Read/Write CFS timeout counter [MasRef D.2-52]
598	>0240					cfsTimeoutCounter: .fill 1

600						; OSBYTE 177 (&B1) Read/write input source [MasRef D.2-53]
601	>0241					inputSource: .fill 1

603						; OSBYTE 178 (&B2) Read/write keyboard semaphore [MasRef D.2-53]
604	>0242					keyboardSemaphore: .fill 1

606						; OSBYTE 179 (&B3) Read/write ROM polling semaphore [MasRef D.2-54]
607	>0243					romPollingSemaphore: .fill 1

609						; OSBYTE 180 (&B4) Read/write Operating System High [MasRef D.2-54]
610	>0244					oshwm: .fill 1

612						; OSBYTE 181 (&B5) Read/write RS243 input interpretation [MasRef D.2-54]
613	>0245					rs423InputInterpretationStatus: .fill 1

616						; OSBYTE 182 (&B6) Read NOIGNORE state [MasRef D.2-55]
617						;
618						; TODO - not a great name, no matter how official - should probably be usePrinterIgnoreChar or something
619	>0246					noignoreState: .fill 1

621						; OSBYTE 183 (&B7) Read/write cassette/ROM filing system [MasRef D.2-55]
622	>0247					cfsRFSFSSwitch: .fill 1

624						; OSBYTE 184 (&B8) Read OS copy of video ULA control [MasRef D.2-56]
625	>0248					vcontrolRegister: .fill 1

627						; OSBYTE 185 (&B9) Read OS copy of video ULA palette [MasRef D.2-56]
628	>0249					vpaletteRegister: .fill 1

630						; OSBYTE 186 (&BA) Read ROM number active at last BRK [MasRef D.2-56]
631	>024a					romActiveAtLastBRK: .fill 1

633						; OSBYTE 187 (&BB) Read ROM number of socket [MasRef D.2-57]
634	>024b					basicROMNumber: .fill 1

636						; OSBYTE 188 (&BC) Read current ADC channel number [MasRef D.2-57]
637	>024c					currentADCChannel: .fill 1

639						; OSBYTE 189 (&BD) Read maximum ADC channel number [MasRef D.2-57]
640	>024d					maximumADCChannel: .fill 1

642						; OSBYTE 190 (&BE) Read/write ADC conversion type [MasRef D.2-58]
643	>024e					adcConversionType: .fill 1

645						; OSBYTE 191 (&BF) Read/write RS423 busy flag [MasRef D.2-58]
646	>024f					rs423Busy: .fill 1

648						; OSBYTE 192 (&C0) Read serial ACIA control register [MasRef D.2-58]
649	>0250					aciaControlRegister: .fill 1

651						; OSBYTE 193 (&C1) Read/write flash counter [MasRef D.2-59]
652	>0251					flashCounter: .fill 1

654						; OSBYTE 194 (&C2) Read/write duration of first colour [MasRef D.2-59]
655	>0252					firstFlashColourDuration: .fill 1

657						; OSBYTE 195 (&C3) Read/write duration of second colour [MasRef D.2-60]
658	>0253					secondFlashColourDuration: .fill 1

660						; OSBYTE 196 (&C4) Read/write keyboard auto-repeat delay [MasRef D.2-60]
661	>0254					keyboardAutoRepeatDelay: .fill 1

663						; OSBYTE 197 (&C5) Read/write keyboard auto-repeat rate [MasRef D.2-60]
664	>0255					keyboardAutoRepeatRate: .fill 1

666						; OSBYTE 198 (&C6) Read/write *EXEC file handle [MasRef D.2-61]
667	>0256					execFileHandle: .fill 1

669						; OSBYTE 199 (&C7) Read/write *SPOOL file handle [MasRef D.2-62]
670	>0257					spoolFileHandle: .fill 1

672						; OSBYTE 200 (&C8) Read/write BREAK and ESCAPE effect [MasRef D.2-62]
673	>0258					breakAndESCAPEEffect: .fill 1

675						; OSBYTE 201 (&C9) Read/write keyboard status [MasRef D.2-63]
676	>0259					keyboardStatus: .fill 1

678						; OSBYTE 202 (&CA) Read/write keyboard status byte [MasRef D.2-63]
679	.025a					keyboardStatusByte: .block
680	=$8					shiftPressed=%1<<3
681	=%10000					capsLockDisengaged=%1<<4
682	=%100000				shiftLockDisengaged=%1<<5
683	=%1000000				ctrlPressed=%1<<6
684	=$80					shiftEnabled=%1<<7
685	>025a					                .fill 1
686						                .endblock

688						; OSBYTE 203 (&CB) Read/write RS423 input buffer [MasRef D.2-64]
689	>025b					rs423InputBufferMinimumSpace: .fill 1

691						; OSBYTE 204 (&CC) Read/write RS423 ignore flag [MasRef D.2-65]
692	>025c					rs423Ignore: .fill 1

694						; OSBYTE 205 (&CD) Read/write RS423 destination [MasRef D.2-65]
695	>025d					rs423Destination: .fill 1

697						; OSBYTE 206 (&CE) Read/write Econet OS call interception [MasRef D.2-66]
698	>025e					econetInterceptionStatus: .fill 1

700						; OSBYTE 207 (&CF) Read/write Econet input interpretation [MasRef D.2-66]
701	>025f					econetInputInterpretationStatus: .fill 1

703						; OSBYTE 208 (&D0) Read write Econet output [MasRef D.2-67]
704	>0260					econetOutputInterpretationStatus: .fill 1

706						; OSBYTE 209 (&D1) is reserved for the speech system [MasRef D.2-67]
707	>0261					speechSystemByte1:  .fill 1

709						; OSBYTE 210 (&D2) Read/write sound suppression status [MasRef D.2-67]
710	>0262					soundSuppressionStatus: .fill 1

712						; OSBYTE 211 (&D3) Read/write BELL channel [MasRef D.2-67]
713	>0263					bellChannel: .fill 1

715						; OSBYTE 212 (&D4) Read/write BELL sound information [MasRef D.2-68]
716	>0264					bellSound: .fill 1

718						; OSBYTE 213 (&D5) Read/write BELL frequency [MasRef D.2-69]
719	>0265					bellFrequency: .fill 1

721						; OSBYTE 214 (&D6) Read/write BELL duration [MasRef D.2-69]
722	>0266					bellDuration: .fill 1

724						; OSBYTE 215 (&D7) Read/write startup message [MasRef D.2-69]
725	>0267					startupMessageSuppressionStatus: .fill 1

727						; OSBYTE 216 (&D8) Read/write length of soft key string [MasRef D.2-70]
728	>0268					softKeyStringLength: .fill 1

730						; OSBYTE 217 (&D9) Read/write paged mode line count [MasRef D.2-71]
731	>0269					pagedModeCounter: .fill 1

733						; OSBYTE 218 (&DA) Read/write bytes in VDU queue [MasRef D.2-71]
734	>026a					vduQueueNegativeLength: .fill 1

736						; OSBYTE 219 (&DB) Read/write TAB key code [MasRef D.2-72]
737	>026b					tabKeyCode: .fill 1

739						; OSBYTE 220 (&DC) Read/write ESCAPE character [MasRef D.2-72]
740	>026c					escapeCharacter: .fill 1

742						; OSBYTE 221 (&DD) Read/write interpretation of input values 192-207 [MasRef D.2-73]
743	>026d					input192To207Interpretation: .fill 1

745						; OSBYTE 222 (&DE) Read/write interpretation of input values 208-223 [MasRef D.2-73]
746	>026e					input208To223Interpretation: .fill 1

748						; OSBYTE 223 (&DF) Read/write interpretation of input values 224-239 [MasRef D.2-73]
749	>026f					input224To239Interpretation: .fill 1

751						; OSBYTE 224 (&E0) Read/write interpretation of input values 240-255 [MasRef D.2-73]
752	>0270					input240To255Interpretation: .fill 1

754						; OSBYTE 225 (&E1) Read/write soft key interpretation [MasRef D.2-74]
755	>0271					softKeyInterpretation: .fill 1

757						; OSBYTE 226 (&E2) Read/write SHIFT+soft key interpretation [MasRef D.2-74]
758	>0272					shiftSoftKeyInterpretation: .fill 1

760						; OSBYTE 227 (&E3) Read/write CTRL+soft key interpretation [MasRef D.2-74]
761	>0273					ctrlSoftKeyInterpretation: .fill 1

763						; OSBYTE 228 (&E4) Read/write SHIFT+CTRL+soft key interpretation [MasRef D.2-74]
764	>0274					shiftCtrlSoftKeyInterpretation: .fill 1

766						; OSBYTE 229 (&E5) Read/write ESCAPE key status [MasRef D.2-75]
767	>0275					escapeKeyStatus: .fill 1

769						; OSBYTE 230 (&E6) Read/write ESCAPE effects [MasRef D.2-75]
770	>0276					escapeEffects: .fill 1

772						; OSBYTE 231 (&E7) Read/write IRQ bit mask for user 6522 [MasRef D.2-76]
773	>0277					userVIAInterruptMask: .fill 1

775						; OSBYTE 232 (&E8) Read/write IRQ bit mask for 6850 [MasRef D.2-76]
776	>0278					rs423InterruptMask: .fill 1

778						; OSBYTE 233 (&E9) Read write IRQ bit mask for system [MasRef D.2-76]
779	>0279					systemVIAInterruptMask: .fill 1

781						; OSBYTE 234 (&EA) Read flag indicating Tube presence [MasRef D.2-76]
785	>027a					tubePresenceUnused: .fill 1

788						; OSBYTE 235 (&EB) is reserved for the speech system. [MasRef D.2-77]
789	>027b					speechSystemByte2: .fill 1

791						; OSBYTE 236 (&EC) Read/write character destination status [MasRef D.2-77]
792	.027c					characterDestinationStatus: .block
793	>027c					                .fill 1
794	=1					rs423_enable=1
795	=2					vdu_disable=2
796	=4					printer_disable=4               ;printer always off
797	=8					printer_enable=8                ;printer always on
798	=16					spool_disable=16
799	=64					printer_maybe=64                ;printer on when VDU 1 only
800						                .endblock

802						; OSBYTE 237 (&ED) Read/write cursor editing status [MasRef D.2-77]
803	.027d					editKeysMode: .block
804	=0					editKeys=0                      ;edit keys do editing
805	=1					asciiKeys=1                     ;edit keys are ASCII 135-139
806	=2					functionKeys=2                  ;edit keys are F keys 11-15
807	>027d					                .fill 1
808						                .endblock

810						; OSBYTE 238 (&EE) Read/write numeric keypad [MasRef D.2-78]
811	>027e					numericKeypadInterpretation: .fill 1

813						; OSBYTE 239 (&EF) Read/write *SHADOW state [MasRef D.2-78]
814	>027f					shadowRAMState: .fill 1

816						; OSBYTE 240 (&F0) Read country flag [MasRef D.2-79]
817	>0280					countryFlag: .fill 1

819						; OSBYTE 241 (&F1) Read/write user flag [MasRef D.2-79]
820	>0281					userFlag: .fill 1

822						; OSBYTE 242 (&F2) Read copy of serial processor ULA [MasRef D.2-80]
823	>0282					serialULARegister: .fill 1

825						; OSBYTE 243 (&F3) Read timer switch state [MasRef D.2-80]
826						;
827						; The location holds either 5 (initialTimerSwitchState) or 10
828						; (initialTimerSwitchState^15) - i.e., the offset of the byte after
829						; the last of the timer.
830						;
831						; Various offsets are applied to the timer addresses to make this
832						; work.
833	>0283					timerSwitchState: .fill 1

835						; OSBYTE 244 (&F4) Read/write soft key consistency flag [MasRef D.2-81]
836	>0284					softKeyConsistencyFlag: .fill 1

838						; OSBYTE 245 (&F5) Read printer driver type [MasRef D.2-81[
839	>0285					printerDriverType: .fill 1

841						; OSBYTE 246 (&F6) Read/write printer ignore character [MasRef D.2-81]
842	>0286					printerIgnoreChar: .fill 1

844						; OSBYTE 247 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
845	>0287					breakVectorByte0: .fill 1

847						; OSBYTE 248 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
848	>0288					breakVectorByte1: .fill 1

850						; OSBYTE 249 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
851	>0289					breakVectorByte2: .fill 1

853						; OSBYTE 250 (&FA) Read memory written by VDU driver [MasRef D.2-82]
854	>028a					vduDriverMemory: .fill 1

856						; OSBYTE 251 (&FB) Read memory displayed [MasRef D.2-83]
857	>028b					displayMemory: .fill 1

859						; OSBYTE 252 (&FC) Read/write current language ROM number [MasRef D.2-83]
860	>028c					currentLanguageROM: .fill 1

862						; OSBYTE 253 (&FD) Read last BREAK type [MasRef D.2-83]
863	.028d					lastBREAKType: .block
864	>028d					                .fill 1
865	=0					softBREAK=0
866	=1					powerOn=1
867	=2					hardBREAK=2
868						                .endblock
869						; OSBYTE 254 (&FE) Set effect of SHIFT on numeric keypad [MasRef D.2-84]
870	>028e					numericKeypadShiftEffect: .fill 1
871						; OSBYTE 255 (&FF) Read/write startup options [MasRef D.2-84]
872	>028f					startupOptions: .fill 1
873	=7					modeMask=7

875						                .endvirtual

877	=166					firstMOSVariableOSBYTE=166

879	=5					initialTimerSwitchState=5
880	=$290					tvOffset=$290
881	=$291					tvInterlace=$291
882	=$292					timer0=$292
883	=$297					timer1=$297
884	=$29c					intervalTimer=$29c
885	=$2a1					romInformationTable=$2a1
886	=$2b1					inkeyTimeoutCounter=$2b1
887	=$2b3					osword0MaxLineLength=$2b3
888	=$2b4					osword0MinASCIICharacter=$2b4
889	=$2b5					osword0MaxASCIICharacter=$2b5
890	=$2b6					adcResultLSBs=$2b6
891	=$2ba					adcResultMSBs=$2ba
892	=$2be					adcLastChannelRead=$2be         ;Two names for the same thing!
893	=$2be					adcLastConvertedChannel=$2be    ;Two names for the same thing!
894	=$2bf					eventEnabledFlags=$2bf
895	=$02c9					currentSoftKey=$02c9
896	=$02ca					keyboardFirstAutoRepeatCount=$02ca
897	=$2cb					previousKeyPressedWhenReadingLastKey=$2cb
898	=$2cc					previousKeyPressedWhenReadingFirstKey=$2cc
899	=$2cd					previousKeyPressedWhenReadingOSBYTE=$2cd
900						; soundIsUpdatingFlag=$2ce
901	=$2ce					bufferEmptyFlags=$2ce
902	=$2d7					bufferStartIndices=$2d7
903	=$2e0					bufferEndIndices=$2e0

905	=$2e9					tapeInputCurrentBlockSize=$2e9
906	=$2eb					blockFlagOfCurrentlyResidentBlock=$2eb
907	=$2ec					lastCharacterOfCurrentlyResidentBlock=$2ec

909						; Needs a better name, possibly more than one :(
910						;
911						; Used by various file routines to store OSGBPB and OSFILE parameter
912						; blocks.
913						;
914						; Used by the clock routines to hold a (possibly partial) mirror of
915						; the RTC time/date registers.
916						;
917						; Used when parsing hex addresses from the command line - obviously
918						; designed primarily for convenient use when building up the OSFILE
919						; parameter block for use with *LOAD and *SAVE.
920						;
921						; Used by the SRAM utilities to store working data.
922	=$2ed					osfileParameterBlock=$2ed

924						                .virtual osfileParameterBlock
925	.02ed					sramWorkspace: .block
926	>02ed					temp: .fill 1
927	>02ee					type: .fill 1
928	>02ef					length: .fill 2
929	>02f1					bank: .fill 1
930	>02f2					sramAddress: .fill 4
931	>02f6					dataAddress: .fill 4
932						                .endblock
933						                .endvirtual

935						; rtcTempData=$2ee

937						ExtendedVectorAddress: .function vectorAddress
939						                .endfunction extendedVectorSpace+(vectorAddress-vectors)/2*3

941						;-------------------------------------------------------------------------

943	=$d9f					extendedVectorSpace=$d9f

945	=$62					key_space=$62
946	=$66					key_comma=$66
947	=$17					key_minus=$17
948	=$67					key_stop=$67
949	=$68					key_slash=$68
950	=$27					key_0=$27
951	=$30					key_1=$30
952	=$31					key_2=$31
953	=$11					key_3=$11
954	=$12					key_4=$12
955	=$13					key_5=$13
956	=$34					key_6=$34
957	=$24					key_7=$24
958	=$15					key_8=$15
959	=$26					key_9=$26
960	=$48					key_colon=$48
961	=$57					key_semicolon=$57
962	=$47					key_at=$47
963	=$41					key_a=$41
964	=$64					key_b=$64
965	=$52					key_c=$52
966	=$32					key_d=$32
967	=$22					key_e=$22
968	=$43					key_f=$43
969	=$53					key_g=$53
970	=$54					key_h=$54
971	=$25					key_i=$25
972	=$45					key_j=$45
973	=$46					key_k=$46
974	=$56					key_l=$56
975	=$65					key_m=$65
976	=$55					key_n=$55
977	=$36					key_o=$36
978	=$37					key_p=$37
979	=$10					key_q=$10
980	=$33					key_r=$33
981	=$51					key_s=$51
982	=$23					key_t=$23
983	=$35					key_u=$35
984	=$63					key_v=$63
985	=$21					key_w=$21
986	=$42					key_x=$42
987	=$44					key_y=$44
988	=$61					key_z=$61
989	=$38					key_left_square_bracket=$38
990	=$78					key_backslash=$78
991	=$58					key_right_square_bracket=$58
992	=$18					key_caret=$18
993	=$28					key_underline=$28
994	=$70					key_escape=$70
995	=$60					key_tab=$60
996	=$40					key_caps_lock=$40
997	=$1					key_ctrl=$1
998	=$50					key_shift_lock=$50
999	=$0					key_shift=$0
1000	=$59					key_delete=$59
1001	=$69					key_copy=$69
1002	=$49					key_return=$49
1003	=$39					key_up=$39
1004	=$29					key_down=$29
1005	=$19					key_left=$19
1006	=$79					key_right=$79
1007	=$20					key_f0=$20
1008	=$71					key_f1=$71
1009	=$72					key_f2=$72
1010	=$73					key_f3=$73
1011	=$14					key_f4=$14
1012	=$74					key_f5=$74
1013	=$75					key_f6=$75
1014	=$16					key_f7=$16
1015	=$76					key_f8=$76
1016	=$77					key_f9=$77
1017	=$6a					key_numpad_0=$6a
1018	=$6b					key_numpad_1=$6b
1019	=$7c					key_numpad_2=$7c
1020	=$6c					key_numpad_3=$6c
1021	=$7a					key_numpad_4=$7a
1022	=$7b					key_numpad_5=$7b
1023	=$1a					key_numpad_6=$1a
1024	=$1b					key_numpad_7=$1b
1025	=$2a					key_numpad_8=$2a
1026	=$2b					key_numpad_9=$2b
1027	=$3a					key_numpad_plus=$3a
1028	=$3b					key_numpad_minus=$3b
1029	=$4a					key_numpad_divide=$4a
1030	=$5a					key_numpad_hash=$5a
1031	=$5b					key_numpad_multiply=$5b
1032	=$5c					key_numpad_comma=$5c
1033	=$3c					key_numpad_return=$3c
1034	=$4b					key_numpad_delete=$4b
1035	=$4c					key_numpad_stop=$4c

1037						fsInfoBlock: .struct
1038	>0000					name: .fill 8
1039	>0008					minHandle: .fill 1
1040	>0009					maxHandle: .fill 1
1041	>000a					fsNumber: .fill 1
1042						                .ends

1044						osgbpbBlock: .struct
1045	>0000					handle: .fill 1
1046	>0001					addr: .fill 4
1047	>0005					numBytes: .fill 4
1048	>0009					ptr: .fill 4
1049						                .ends

1051						                ; NAUG p260
1052						                .virtual $dc00
1053	.dc00					hazel: .block
1054	.dc00					commandLine:                    ;dc00
1055	>dc00					                .fill 256
1056	.dd00					ddxx:                           ;dd00
1057	>dd00					                .fill 256
1058	.de00					dexx:
1059	>de00					                .fill 256
1060	.df00					currentFS:                      ;df00
1061	>df00					                .fill 1
1062	.df01					activeFS:                       ;df01
1063	>df01					                .fill 1
1064	.df02					libFS:                          ;df02
1065	>df02					                .fill 1
1066	.df03					currentFSROM:                   ;df03
1067	>df03					                .fill 1
1068	.df04					commandLinePointer:             ;df04
1069	>df04					                .fill 2

1071						                ; 17 info blocks in total, but everything is relative
1072						                ; to the 0th, so there's only a need to instantiate a
1073						                ; struct for that one. Don't think 64tass handles
1074						                ; arrays of structs anyway.
1075	.df06					fsInfoBlocks:   .dstruct fsInfoBlock ;df06
1038	>df06					name: .fill 8
1039	>df0e					minHandle: .fill 1
1040	>df0f					maxHandle: .fill 1
1041	>df10					fsNumber: .fill 1
1042						                .ends
1076	>df11					                .fill 16*size(fsInfoBlock)
1077	.dfc1					fsInfoBlocksTerminator:         ;dfc1
1078						                ; space reserved for the 0 terminator when the full
1079						                ; set of info blocks are filled.
1080	>dfc1					                .fill 1
1081	.dfc2					fsFlags: .block                 ;dfc2
1082	>dfc2					                .fill 1
1083	=$80					useASCII=$80
1084	=$80					isAPPEND=$80
1085	=$40					noLineNumbers=$40
1086						                .bend
1087	.dfc3					lineNumberBCD:                  ;dfc3
1088	>dfc3					                .fill 2
1089	.dfc5					lastCharPrinted:                ;dfc5
1090	>dfc5					                .fill 1
1091	.dfc6					tempFSFlag:                     ;dfc6
1092	>dfc6					                .fill 1
1093	.dfc7					moveOSGBPB: .dstruct osgbpbBlock ;dfc7
1045	>dfc7					handle: .fill 1
1046	>dfc8					addr: .fill 4
1047	>dfcc					numBytes: .fill 4
1048	>dfd0					ptr: .fill 4
1049						                .ends
1094	.dfd4					moveSrcHandle:                  ;dfd4
1095	>dfd4					                .fill 1
1096	.dfd5					moveDestHandle:                 ;dfd5
1097	>dfd5					                .fill 1
1098	.dfd6					moveBufferMSB:                  ;dfd6
1099	>dfd6					                .fill 1
1100	.dfd7					moveNumPages:                   ;dfd7
1101	>dfd7					                .fill 1
1102	.dfd8					moveDestName:                   ;dfd8
1103	>dfd8					                .fill 2
1104	.dfda					activeFSCV:                     ;dfda
1105	>dfda					                .fill 2
1106	.dfdc					oldACCCON:                      ;dfdc
1107	>dfdc					                .fill 1
1108	.dfdd					hasACCCONChanged:                ;dfdd
1109	>dfdd					                .fill 1

1112	.dfde					sramBankModes:
1113						                ; pseudo/absolute bank flags, as queried by OSBYTE $45
1117	>dfde					                .fill 1
1118						                .bend
1119						                .endv

1121						;-------------------------------------------------------------------------
1122						;
1123						; VDU variables
1124						;
1125						; MasRef E.4-1
1126						;
1127						VDUVariables: .struct
1128	.0000					graphicsWindow:
1129						;graphicsWindowLeftBottom:
1130						; &00 2 Graphics window left column. (p)
1131	>0000					graphicsWindowPixelsLeft: .fill 2
1132						; &02 2 Graphics window bottom row. (p)
1133	>0002					graphicsWindowPixelsBottom: .fill 2
1134						;graphicsWindowRightTop:
1135						; &04 2 Graphics window right column. (p)
1136	>0004					graphicsWindowPixelsRight: .fill 2
1137						; &06 2 Graphics window top row. (p)
1138	>0006					graphicsWindowPixelsTop: .fill 2
1139	.0008					textWindow:
1140						; &08 1 Text window left column.
1141	>0008					textWindowLeft: .fill 1
1142						; &09 1 Text window bottom row.
1143	>0009					textWindowBottom: .fill 1
1144						; &0A 1 Text window right column.
1145	>000a					textWindowRight: .fill 1
1146						; &0B 1 Text window top row.
1147	>000b					textWindowTop: .fill 1
1148						; &0C 2 Graphics origin X coordinate. (e)
1149	>000c					graphicsWindowOriginX: .fill 2
1150						; &0E 2 Graphics origin Y coordinate. (e)
1151	>000e					graphicsWindowOriginY: .fill 2
1152						; &10 2 Graphics cursor X coordinate. (e)
1153	>0010					graphicsCursorPositionX: .fill 2
1154						; &12 2 Graphics cursor Y coordinate. (e)
1155	>0012					graphicsCursorPositionY: .fill 2
1156						; &14 2 Previous graphics cursor X coordinate. (p)
1157	.0014					oldGraphicsCursorPixels:
1158	>0014					oldGraphicsCursorPixelsX: .fill 2
1159						; &16 2 Previous graphics cursor Y coordinate. (p)
1160	>0016					oldGraphicsCursorPixelsY: .fill 2
1161						; &18 1 Text cursor X coordinate (from left of screen) when not cursor editing. When cursor editing, normally the input cursor X coordinate, but the output cursor X coordinate within an "unknown PLOT codes" routine.
1162	>0018					textCursorXPosition: .fill 1
1163						; &19 1 Text cursor Y coordinate (from top of screen) when not cursor editing. When cursor editing, normally t.lsthe input cursor Y coordinate, but the output cursor Y coordinate within an "unknown PLOT codes" routine.
1164	>0019					textCursorYPosition: .fill 1
1165						; &1A 1 Y produced by GADDR (see next section) so that (ZMEMG),Y addresses the correct byte.
1166	>001a					graphicsAddressOffset: .fill 1
1167						; &1B-&23 VDU queue: &23 contains last byte of queue, other bytes immediately precede it.
1168	=9					queueSize=9
1169	>001b					queueBegin: .fill queueSize
1170	.0024					queueEnd:
1171	.0024					graphicsCursorPixels:
1172						; &24 2 Graphics cursor X coordinate. (p)
1173	>0024					graphicsCursorPixelsX: .fill 2
1174						; &26 2 Graphics cursor Y coordinate. (p)
1175	>0026					graphicsCursorPixelsY: .fill 2
1176						; &28-&49 Workspace. But variable &38 must not be used in a Teletext mode (mode 7 or 135).
1177						                .union
1178	.0028					ew: .dstruct EllipseWorkspaceVDUVariables
1376						                ; https://tobylobster.github.io/GXR-pages/gxr/S-s3.html#SP4
1377	.0028					aspectRatio:
1378	>0028					                .fill 3
1379	.002b					shear:
1380	>002b					                .fill 3
1381	.002e					halfHeightCounter:
1382	>002e					                .fill 2
1383	.0030					halfHeightSquared:
1384	>0030					                .fill 4
1385	.0034					pointC:
1386	>0034					                .fill 2
1387	.0036					pointD:
1388	>0036					                .fill 2
1389	.0038					leftPoint:
1390	>0038					                .fill 2
1391	.003a					rightPoint:
1392	>003a					                .fill 2
1393	.003c					pointA:
1394	>003c					                .fill 2
1395	.003e					pointB:
1396	>003e					                .fill 2
1397	.0040					pointE:
1398	>0040					                .fill 2
1399	.0042					currentOffsetX:
1400	>0042					                .fill 2
1401	.0044					plotPointX:
1402	.0044					pointF:
1403	>0044					                .fill 2
1404	.0046					plotPointY:
1405	>0046					                .fill 2
1406						                .endstruct
1179	.0028					hlfw: .dstruct HorizontalLineFillWorkspaceVDUVariables
1441	>0028					                .fill 6
1442	.002e					pixelsX:                        ;2e
1443	>002e					                .fill 2
1444	.0030					pixelsY:                        ;30
1445	>0030					                .fill 2
1446	.0032					pixelsRightEndX:
1447	>0032					                .fill 2         ;32
1448	.0034					pixelsLimitX:                   ;34
1449	>0034					                .fill 2
1450						                .endstruct
1180	.0028					mocr: .dstruct MoveOrCopyRectangleWorkspaceVDUVariables
1419	.0028					src: .dstruct VDUAABB
1300	.0028					min: .dstruct VDUCoordinate
1295	>0028					x: .fill 2
1296	>002a					y: .fill 2
1297						                .endstruct
1301	.002c					max: .dstruct VDUCoordinate
1295	>002c					x: .fill 2
1296	>002e					y: .fill 2
1297						                .endstruct
1302						                .endstruct
1420	.0030					L30:
1421	>0030					                .fill 4
1422	.0034					dest: .dstruct VDUAABB
1300	.0034					min: .dstruct VDUCoordinate
1295	>0034					x: .fill 2
1296	>0036					y: .fill 2
1297						                .endstruct
1301	.0038					max: .dstruct VDUCoordinate
1295	>0038					x: .fill 2
1296	>003a					y: .fill 2
1297						                .endstruct
1302						                .endstruct
1423	.003c					L3C:
1424	>003c					                .fill 4
1425	.0040					L40:
1426	>0040					                .fill 2
1427	.0042					shiftToNextByte:
1428	>0042					                .fill 2
1429	.0044					L44:
1430	>0044					                .fill 1
1431	.0045					copy:
1432	>0045					                .fill 1         ;0=move, 2=copy
1433	.0046					L46:
1434	>0046					                .fill 1
1435	.0047					L47:
1436	>0047					                .fill 1

1438						                .endstruct
1181	.0028					workspace: .dstruct GenericWorkspaceVDUVariables
1305	.0028					_28:
1306	>0028					                .fill 1
1307	.0029					_29:
1308	>0029					                .fill 1
1309	.002a					_2A:
1310	>002a					                .fill 1
1311	.002b					_2B:
1312	>002b					                .fill 1
1313	.002c					_2C:
1314	>002c					                .fill 1
1315	.002d					_2D:
1316	>002d					                .fill 1
1317	.002e					_2E:
1318	>002e					                .fill 1
1319	.002f					_2F:
1320	>002f					                .fill 1
1321	.0030					_30:
1322	>0030					                .fill 1
1323	.0031					_31:
1324	>0031					                .fill 1
1325	.0032					_32:
1326	>0032					                .fill 1
1327	.0033					_33:
1328	>0033					                .fill 1
1329	.0034					_34:
1330	>0034					                .fill 1
1331	.0035					_35:
1332	>0035					                .fill 1
1333	.0036					_36:
1334	>0036					                .fill 1
1335	.0037					_37:
1336	>0037					                .fill 1
1337	.0038					_38:
1338	>0038					                .fill 1
1339	.0039					_39:
1340	>0039					                .fill 1
1341	.003a					_3A:
1342	>003a					                .fill 1
1343	.003b					_3B:
1344	>003b					                .fill 1
1345	.003c					_3C:
1346	>003c					                .fill 1
1347	.003d					_3D:
1348	>003d					                .fill 1
1349	.003e					_3E:
1350	>003e					                .fill 1
1351	.003f					_3F:
1352	>003f					                .fill 1
1353	.0040					_40:
1354	>0040					                .fill 1
1355	.0041					_41:
1356	>0041					                .fill 1
1357	.0042					_42:
1358	>0042					                .fill 1
1359	.0043					_43:
1360	>0043					                .fill 1
1361	.0044					_44:
1362	>0044					                .fill 1
1363	.0045					_45:
1364	>0045					                .fill 1
1365	.0046					_46:
1366	>0046					                .fill 1
1367	.0047					_47:
1368	>0047					                .fill 1
1369	.0048					_48:
1370	>0048					                .fill 1
1371	.0049					_49:
1372	>0049					                .fill 1
1373						                .endstruct
1182						                .endunion
1183						; &4A 2 Address at which the 6845 is to display the text cursor.
1184	>004a					textCursorCRTCAddress: .fill 2
1185						; &4C 2 Number of bytes in a character row of the text window.
1186	>004c					textWindowWidthInBytes: .fill 2
1187						; &4E 1 Most significant byte of address of first byte of screen memory.
1188	>004e					startScreenAddressHighByte: .fill 1
1189						; &4F 1 Number of bytes in a character.
1190	>004f					bytesPerCharacter: .fill 1
1191						; &50 2 Address of byte in top left corner of screen display.
1192	>0050					screenTopLeftAddress: .fill 2
1193						; &52 2 Number of bytes in a character row of the whole screen.
1194	>0052					bytesPerCharacterRow: .fill 2
1195						; &54 1 Most significant byte of number of bytes of screen memory.
1196	>0054					screenSizeHighByte: .fill 1
1197						; &55 1 Current screen mode (in range 0-7, i.e. without regard to 'shadowing').
1198	>0055					currentScreenMODE: .fill 1
1199						; &56 1 Memory mode: 0 for 20K modes, 1 for 16K modes, 2 for 10K modes, 3 for 8K modes, 4 for 1K modes.
1200	>0056					currentScreenMODEGroup: .fill 1
1201						; &57 1 Foreground text colour mask.
1202	>0057					foregroundTextColour: .fill 1
1203						; &58 1 Background text colour mask.
1204	>0058					backgroundTextColour: .fill 1
1205						; &59 1 0 if plotting graphics foreground, 8 if plotting graphics background.
1206	>0059					graphicsPlotState: .fill 1
1207						; &5A 1 Current graphics plot mode (usually set to one of following two reduced mod 16).
1208	>005a					graphicsPlotMode: .fill 1
1209						; &5B 1 Current graphics foreground plot mode (as set by VDU 18).
1210	>005b					foregroundGCOLMode: .fill 1
1211						; &5C 1 Current graphics background plot mode (as set by VDU 18).
1212	>005c					backgroundGCOLMode: .fill 1
1213						; &5D 2 Address of routine to process current VDU sequence.
1214	>005d					jumpVector: .fill 2
1215						; &5F 1 Value for 6845 register 10 to revert to on leaving cursor editing.
1216	>005f					lastCursorStartRegisterValue: .fill 1
1217						; &60 1 (Number of logical colours)-1 (0 if Teletext).
1218	>0060					numberOfLogicalColoursMinusOne: .fill 1
1219						; &61 1 (Number of pixels/byte)-1 (0 if not graphics).
1220	>0061					pixelsPerByteMinusOne: .fill 1
1221						; &62 1 Mask for leftmost pixel in a byte.
1222	>0062					colourMaskLeft: .fill 1
1223						; &63 1 Mask for rightmost pixel in a byte.
1224	>0063					colourMaskRight: .fill 1
1225						; &64 1 Output cursor X coordinate when cursor editing, but input cursor X coordinate when cursor editing and inside an 'unknown PLOT codes' routine.
1226	>0064					editCursorXPosition: .fill 1
1227						; &65 1 Output cursor Y coordinate when cursor editing, but input cursor Y coordinate when cursor editing and inside an 'unknown PLOT codes' routine.
1228	>0065					editCursorYPosition: .fill 1
1229						; &66 1 Cursor control flags (as set by VDU 23 16).
1230	.0066					cursorFlags: .block
1231	>0066					                .fill 1
1232						; MasRef E.3-18
1233	=$40					noSpecialVDU5Actions=$40
1234	=$20					noMoveCursorAfterPrint=$20
1235	=$10					noVerticalScroll=$10
1236	=$08					swapAxes=$08                    ;if set, X=vert; if clear, X=horiz
1237	=$04					invertVertical=$04              ;if set, vert=up; if clear, vert=down
1238	=$02					invertHorizontal=$02            ;if set, horiz=left; if clear, horiz=right
1239	=$01					scrollProtect=$01
1240						                .endblock
1241						; &67 1 Dot pattern (as set by VDU 23 6).
1242	>0067					dotPattern: .fill 1
1243						; &68 1 Current state of dot pattern.
1244	>0068					dotPatternState: .fill 1
1245						; &69 1 0 if colour being plotted is solid, non-zero if colour is an ECF
1246	>0069					isColourECF: .fill 1
1247						; &6A 1 0 if graphics foreground colour is solid, non-zero if foreground colour is an ECF
1248	>006a					isForegroundECF: .fill 1
1249						; &6B 1 0 if graphics background colour is solid, non-zero if background colour is an ECF
1250	>006b					isBackgroundECF: .fill 1
1251						; &6C 1 Top bit set when cursor is in "column 81".
1252	>006c					column81: .fill 1
1253						; &6D 1 Current graphics foreground colour (as set by VDU 18).
1254	>006d					foregroundGraphicsColour: .fill 1
1255						; &6E 1 Current graphics background colour (as set by VDU 18)
1256	>006e					backgroundGraphicsColour: .fill 1
1257						; &6F-&7E Software copy of the current palette.
1258	>006f					currentPalette: .fill 16
1259						; &7F 1 Reserved.
1260	>007f					reserved: .fill 1
1261						                .endstruct

1263						                .virtual $300
1264	.0300					vduv: .dstruct VDUVariables
1128	.0300					graphicsWindow:
1129						;graphicsWindowLeftBottom:
1130						; &00 2 Graphics window left column. (p)
1131	>0300					graphicsWindowPixelsLeft: .fill 2
1132						; &02 2 Graphics window bottom row. (p)
1133	>0302					graphicsWindowPixelsBottom: .fill 2
1134						;graphicsWindowRightTop:
1135						; &04 2 Graphics window right column. (p)
1136	>0304					graphicsWindowPixelsRight: .fill 2
1137						; &06 2 Graphics window top row. (p)
1138	>0306					graphicsWindowPixelsTop: .fill 2
1139	.0308					textWindow:
1140						; &08 1 Text window left column.
1141	>0308					textWindowLeft: .fill 1
1142						; &09 1 Text window bottom row.
1143	>0309					textWindowBottom: .fill 1
1144						; &0A 1 Text window right column.
1145	>030a					textWindowRight: .fill 1
1146						; &0B 1 Text window top row.
1147	>030b					textWindowTop: .fill 1
1148						; &0C 2 Graphics origin X coordinate. (e)
1149	>030c					graphicsWindowOriginX: .fill 2
1150						; &0E 2 Graphics origin Y coordinate. (e)
1151	>030e					graphicsWindowOriginY: .fill 2
1152						; &10 2 Graphics cursor X coordinate. (e)
1153	>0310					graphicsCursorPositionX: .fill 2
1154						; &12 2 Graphics cursor Y coordinate. (e)
1155	>0312					graphicsCursorPositionY: .fill 2
1156						; &14 2 Previous graphics cursor X coordinate. (p)
1157	.0314					oldGraphicsCursorPixels:
1158	>0314					oldGraphicsCursorPixelsX: .fill 2
1159						; &16 2 Previous graphics cursor Y coordinate. (p)
1160	>0316					oldGraphicsCursorPixelsY: .fill 2
1161						; &18 1 Text cursor X coordinate (from left of screen) when not cursor editing. When cursor editing, normally the input cursor X coordinate, but the output cursor X coordinate within an "unknown PLOT codes" routine.
1162	>0318					textCursorXPosition: .fill 1
1163						; &19 1 Text cursor Y coordinate (from top of screen) when not cursor editing. When cursor editing, normally t.lsthe input cursor Y coordinate, but the output cursor Y coordinate within an "unknown PLOT codes" routine.
1164	>0319					textCursorYPosition: .fill 1
1165						; &1A 1 Y produced by GADDR (see next section) so that (ZMEMG),Y addresses the correct byte.
1166	>031a					graphicsAddressOffset: .fill 1
1167						; &1B-&23 VDU queue: &23 contains last byte of queue, other bytes immediately precede it.
1168	=9					queueSize=9
1169	>031b					queueBegin: .fill queueSize
1170	.0324					queueEnd:
1171	.0324					graphicsCursorPixels:
1172						; &24 2 Graphics cursor X coordinate. (p)
1173	>0324					graphicsCursorPixelsX: .fill 2
1174						; &26 2 Graphics cursor Y coordinate. (p)
1175	>0326					graphicsCursorPixelsY: .fill 2
1176						; &28-&49 Workspace. But variable &38 must not be used in a Teletext mode (mode 7 or 135).
1177						                .union
1178	.0328					ew: .dstruct EllipseWorkspaceVDUVariables
1376						                ; https://tobylobster.github.io/GXR-pages/gxr/S-s3.html#SP4
1377	.0328					aspectRatio:
1378	>0328					                .fill 3
1379	.032b					shear:
1380	>032b					                .fill 3
1381	.032e					halfHeightCounter:
1382	>032e					                .fill 2
1383	.0330					halfHeightSquared:
1384	>0330					                .fill 4
1385	.0334					pointC:
1386	>0334					                .fill 2
1387	.0336					pointD:
1388	>0336					                .fill 2
1389	.0338					leftPoint:
1390	>0338					                .fill 2
1391	.033a					rightPoint:
1392	>033a					                .fill 2
1393	.033c					pointA:
1394	>033c					                .fill 2
1395	.033e					pointB:
1396	>033e					                .fill 2
1397	.0340					pointE:
1398	>0340					                .fill 2
1399	.0342					currentOffsetX:
1400	>0342					                .fill 2
1401	.0344					plotPointX:
1402	.0344					pointF:
1403	>0344					                .fill 2
1404	.0346					plotPointY:
1405	>0346					                .fill 2
1406						                .endstruct
1179	.0328					hlfw: .dstruct HorizontalLineFillWorkspaceVDUVariables
1441	>0328					                .fill 6
1442	.032e					pixelsX:                        ;2e
1443	>032e					                .fill 2
1444	.0330					pixelsY:                        ;30
1445	>0330					                .fill 2
1446	.0332					pixelsRightEndX:
1447	>0332					                .fill 2         ;32
1448	.0334					pixelsLimitX:                   ;34
1449	>0334					                .fill 2
1450						                .endstruct
1180	.0328					mocr: .dstruct MoveOrCopyRectangleWorkspaceVDUVariables
1419	.0328					src: .dstruct VDUAABB
1300	.0328					min: .dstruct VDUCoordinate
1295	>0328					x: .fill 2
1296	>032a					y: .fill 2
1297						                .endstruct
1301	.032c					max: .dstruct VDUCoordinate
1295	>032c					x: .fill 2
1296	>032e					y: .fill 2
1297						                .endstruct
1302						                .endstruct
1420	.0330					L30:
1421	>0330					                .fill 4
1422	.0334					dest: .dstruct VDUAABB
1300	.0334					min: .dstruct VDUCoordinate
1295	>0334					x: .fill 2
1296	>0336					y: .fill 2
1297						                .endstruct
1301	.0338					max: .dstruct VDUCoordinate
1295	>0338					x: .fill 2
1296	>033a					y: .fill 2
1297						                .endstruct
1302						                .endstruct
1423	.033c					L3C:
1424	>033c					                .fill 4
1425	.0340					L40:
1426	>0340					                .fill 2
1427	.0342					shiftToNextByte:
1428	>0342					                .fill 2
1429	.0344					L44:
1430	>0344					                .fill 1
1431	.0345					copy:
1432	>0345					                .fill 1         ;0=move, 2=copy
1433	.0346					L46:
1434	>0346					                .fill 1
1435	.0347					L47:
1436	>0347					                .fill 1

1438						                .endstruct
1181	.0328					workspace: .dstruct GenericWorkspaceVDUVariables
1305	.0328					_28:
1306	>0328					                .fill 1
1307	.0329					_29:
1308	>0329					                .fill 1
1309	.032a					_2A:
1310	>032a					                .fill 1
1311	.032b					_2B:
1312	>032b					                .fill 1
1313	.032c					_2C:
1314	>032c					                .fill 1
1315	.032d					_2D:
1316	>032d					                .fill 1
1317	.032e					_2E:
1318	>032e					                .fill 1
1319	.032f					_2F:
1320	>032f					                .fill 1
1321	.0330					_30:
1322	>0330					                .fill 1
1323	.0331					_31:
1324	>0331					                .fill 1
1325	.0332					_32:
1326	>0332					                .fill 1
1327	.0333					_33:
1328	>0333					                .fill 1
1329	.0334					_34:
1330	>0334					                .fill 1
1331	.0335					_35:
1332	>0335					                .fill 1
1333	.0336					_36:
1334	>0336					                .fill 1
1335	.0337					_37:
1336	>0337					                .fill 1
1337	.0338					_38:
1338	>0338					                .fill 1
1339	.0339					_39:
1340	>0339					                .fill 1
1341	.033a					_3A:
1342	>033a					                .fill 1
1343	.033b					_3B:
1344	>033b					                .fill 1
1345	.033c					_3C:
1346	>033c					                .fill 1
1347	.033d					_3D:
1348	>033d					                .fill 1
1349	.033e					_3E:
1350	>033e					                .fill 1
1351	.033f					_3F:
1352	>033f					                .fill 1
1353	.0340					_40:
1354	>0340					                .fill 1
1355	.0341					_41:
1356	>0341					                .fill 1
1357	.0342					_42:
1358	>0342					                .fill 1
1359	.0343					_43:
1360	>0343					                .fill 1
1361	.0344					_44:
1362	>0344					                .fill 1
1363	.0345					_45:
1364	>0345					                .fill 1
1365	.0346					_46:
1366	>0346					                .fill 1
1367	.0347					_47:
1368	>0347					                .fill 1
1369	.0348					_48:
1370	>0348					                .fill 1
1371	.0349					_49:
1372	>0349					                .fill 1
1373						                .endstruct
1182						                .endunion
1183						; &4A 2 Address at which the 6845 is to display the text cursor.
1184	>034a					textCursorCRTCAddress: .fill 2
1185						; &4C 2 Number of bytes in a character row of the text window.
1186	>034c					textWindowWidthInBytes: .fill 2
1187						; &4E 1 Most significant byte of address of first byte of screen memory.
1188	>034e					startScreenAddressHighByte: .fill 1
1189						; &4F 1 Number of bytes in a character.
1190	>034f					bytesPerCharacter: .fill 1
1191						; &50 2 Address of byte in top left corner of screen display.
1192	>0350					screenTopLeftAddress: .fill 2
1193						; &52 2 Number of bytes in a character row of the whole screen.
1194	>0352					bytesPerCharacterRow: .fill 2
1195						; &54 1 Most significant byte of number of bytes of screen memory.
1196	>0354					screenSizeHighByte: .fill 1
1197						; &55 1 Current screen mode (in range 0-7, i.e. without regard to 'shadowing').
1198	>0355					currentScreenMODE: .fill 1
1199						; &56 1 Memory mode: 0 for 20K modes, 1 for 16K modes, 2 for 10K modes, 3 for 8K modes, 4 for 1K modes.
1200	>0356					currentScreenMODEGroup: .fill 1
1201						; &57 1 Foreground text colour mask.
1202	>0357					foregroundTextColour: .fill 1
1203						; &58 1 Background text colour mask.
1204	>0358					backgroundTextColour: .fill 1
1205						; &59 1 0 if plotting graphics foreground, 8 if plotting graphics background.
1206	>0359					graphicsPlotState: .fill 1
1207						; &5A 1 Current graphics plot mode (usually set to one of following two reduced mod 16).
1208	>035a					graphicsPlotMode: .fill 1
1209						; &5B 1 Current graphics foreground plot mode (as set by VDU 18).
1210	>035b					foregroundGCOLMode: .fill 1
1211						; &5C 1 Current graphics background plot mode (as set by VDU 18).
1212	>035c					backgroundGCOLMode: .fill 1
1213						; &5D 2 Address of routine to process current VDU sequence.
1214	>035d					jumpVector: .fill 2
1215						; &5F 1 Value for 6845 register 10 to revert to on leaving cursor editing.
1216	>035f					lastCursorStartRegisterValue: .fill 1
1217						; &60 1 (Number of logical colours)-1 (0 if Teletext).
1218	>0360					numberOfLogicalColoursMinusOne: .fill 1
1219						; &61 1 (Number of pixels/byte)-1 (0 if not graphics).
1220	>0361					pixelsPerByteMinusOne: .fill 1
1221						; &62 1 Mask for leftmost pixel in a byte.
1222	>0362					colourMaskLeft: .fill 1
1223						; &63 1 Mask for rightmost pixel in a byte.
1224	>0363					colourMaskRight: .fill 1
1225						; &64 1 Output cursor X coordinate when cursor editing, but input cursor X coordinate when cursor editing and inside an 'unknown PLOT codes' routine.
1226	>0364					editCursorXPosition: .fill 1
1227						; &65 1 Output cursor Y coordinate when cursor editing, but input cursor Y coordinate when cursor editing and inside an 'unknown PLOT codes' routine.
1228	>0365					editCursorYPosition: .fill 1
1229						; &66 1 Cursor control flags (as set by VDU 23 16).
1230	.0366					cursorFlags: .block
1231	>0366					                .fill 1
1232						; MasRef E.3-18
1233	=$40					noSpecialVDU5Actions=$40
1234	=$20					noMoveCursorAfterPrint=$20
1235	=$10					noVerticalScroll=$10
1236	=$08					swapAxes=$08                    ;if set, X=vert; if clear, X=horiz
1237	=$04					invertVertical=$04              ;if set, vert=up; if clear, vert=down
1238	=$02					invertHorizontal=$02            ;if set, horiz=left; if clear, horiz=right
1239	=$01					scrollProtect=$01
1240						                .endblock
1241						; &67 1 Dot pattern (as set by VDU 23 6).
1242	>0367					dotPattern: .fill 1
1243						; &68 1 Current state of dot pattern.
1244	>0368					dotPatternState: .fill 1
1245						; &69 1 0 if colour being plotted is solid, non-zero if colour is an ECF
1246	>0369					isColourECF: .fill 1
1247						; &6A 1 0 if graphics foreground colour is solid, non-zero if foreground colour is an ECF
1248	>036a					isForegroundECF: .fill 1
1249						; &6B 1 0 if graphics background colour is solid, non-zero if background colour is an ECF
1250	>036b					isBackgroundECF: .fill 1
1251						; &6C 1 Top bit set when cursor is in "column 81".
1252	>036c					column81: .fill 1
1253						; &6D 1 Current graphics foreground colour (as set by VDU 18).
1254	>036d					foregroundGraphicsColour: .fill 1
1255						; &6E 1 Current graphics background colour (as set by VDU 18)
1256	>036e					backgroundGraphicsColour: .fill 1
1257						; &6F-&7E Software copy of the current palette.
1258	>036f					currentPalette: .fill 16
1259						; &7F 1 Reserved.
1260	>037f					reserved: .fill 1
1261						                .endstruct
1265						                .endvirtual

1267						; vduQueueItemAddr: .function index
1268						;                 .cerror index<0||index>=vdu.queueSize,"bad VDU queue index"
1269						;                 .endfunction vdu.queue+vdu.queueSize-1-index

1271						; Presumed addresses in ANDY that don't happen to coincide with other
1272						; labels.
1273						;
1274						; MasRef E.4-5, MasRef F.6-10
1275						;
1276						; &8000-83FF  RAM  Soft key expansions buffer
1277						; &8400-87FF  RAM  VDU workspace.
1278						; &8800-07    RAM  ECF pattern 1 definition.
1279						; &8808-0F    RAM  ECF pattern 2 definition.
1280						; &8810-17    RAM  ECF pattern 3 definition.
1281						; &8818-1F    RAM  ECF pattern 4 definition.
1282						; &8820-27    RAM  Current foreground ECF pattern or solid colour.
1283						; &8828-2F    RAM  Current background ECF pattern or solid colour.
1284						; &8830-BF    RAM  VDU workspace.
1285						; &88C0-FF    RAM  Reserved for future expansion.
1286						; &8900-FF    RAM  Current definitions of characters &20-3F.
1287						; &8A00-FF    RAM  Current definitions of characters &40-5F.
1288						; &8B00-FF    RAM  Current definitions of characters &60-7F.
1289						; &8C00-FF    RAM  Current definitions of characters &80-9F.
1290						; &8D00-FF    RAM  Current definitions of characters &A0-BF.
1291						; &8E00-FF    RAM  Current definitions of characters &C0-DF.
1292						; &8F00-FF    RAM  Current definitions of characters &E0-FF.

1294						VDUCoordinate: .struct
1295	>0000					x: .fill 2
1296	>0002					y: .fill 2
1297						                .endstruct

1299						VDUAABB: .struct
1300	.0000					min: .dstruct VDUCoordinate
1295	>0000					x: .fill 2
1296	>0002					y: .fill 2
1297						                .endstruct
1301	.0004					max: .dstruct VDUCoordinate
1295	>0004					x: .fill 2
1296	>0006					y: .fill 2
1297						                .endstruct
1302						                .endstruct

1304						GenericWorkspaceVDUVariables: .struct
1305	.0000					_28:
1306	>0000					                .fill 1
1307	.0001					_29:
1308	>0001					                .fill 1
1309	.0002					_2A:
1310	>0002					                .fill 1
1311	.0003					_2B:
1312	>0003					                .fill 1
1313	.0004					_2C:
1314	>0004					                .fill 1
1315	.0005					_2D:
1316	>0005					                .fill 1
1317	.0006					_2E:
1318	>0006					                .fill 1
1319	.0007					_2F:
1320	>0007					                .fill 1
1321	.0008					_30:
1322	>0008					                .fill 1
1323	.0009					_31:
1324	>0009					                .fill 1
1325	.000a					_32:
1326	>000a					                .fill 1
1327	.000b					_33:
1328	>000b					                .fill 1
1329	.000c					_34:
1330	>000c					                .fill 1
1331	.000d					_35:
1332	>000d					                .fill 1
1333	.000e					_36:
1334	>000e					                .fill 1
1335	.000f					_37:
1336	>000f					                .fill 1
1337	.0010					_38:
1338	>0010					                .fill 1
1339	.0011					_39:
1340	>0011					                .fill 1
1341	.0012					_3A:
1342	>0012					                .fill 1
1343	.0013					_3B:
1344	>0013					                .fill 1
1345	.0014					_3C:
1346	>0014					                .fill 1
1347	.0015					_3D:
1348	>0015					                .fill 1
1349	.0016					_3E:
1350	>0016					                .fill 1
1351	.0017					_3F:
1352	>0017					                .fill 1
1353	.0018					_40:
1354	>0018					                .fill 1
1355	.0019					_41:
1356	>0019					                .fill 1
1357	.001a					_42:
1358	>001a					                .fill 1
1359	.001b					_43:
1360	>001b					                .fill 1
1361	.001c					_44:
1362	>001c					                .fill 1
1363	.001d					_45:
1364	>001d					                .fill 1
1365	.001e					_46:
1366	>001e					                .fill 1
1367	.001f					_47:
1368	>001f					                .fill 1
1369	.0020					_48:
1370	>0020					                .fill 1
1371	.0021					_49:
1372	>0021					                .fill 1
1373						                .endstruct

1375						EllipseWorkspaceVDUVariables: .struct
1376						                ; https://tobylobster.github.io/GXR-pages/gxr/S-s3.html#SP4
1377	.0000					aspectRatio:
1378	>0000					                .fill 3
1379	.0003					shear:
1380	>0003					                .fill 3
1381	.0006					halfHeightCounter:
1382	>0006					                .fill 2
1383	.0008					halfHeightSquared:
1384	>0008					                .fill 4
1385	.000c					pointC:
1386	>000c					                .fill 2
1387	.000e					pointD:
1388	>000e					                .fill 2
1389	.0010					leftPoint:
1390	>0010					                .fill 2
1391	.0012					rightPoint:
1392	>0012					                .fill 2
1393	.0014					pointA:
1394	>0014					                .fill 2
1395	.0016					pointB:
1396	>0016					                .fill 2
1397	.0018					pointE:
1398	>0018					                .fill 2
1399	.001a					currentOffsetX:
1400	>001a					                .fill 2
1401	.001c					plotPointX:
1402	.001c					pointF:
1403	>001c					                .fill 2
1404	.001e					plotPointY:
1405	>001e					                .fill 2
1406						                .endstruct

1408						HorizontalLineFillWorkspaceZP: .struct
1409	>0000					notByteMatch: .fill 1
1410	>0001					a: .fill 1
1411	>0002					b: .fill 2
1412						;c: .fill 2
1413	>0004					pixelsX: .fill 2
1414	>0006					d: .fill 1
1415	>0007					resultEOR: .fill 1
1416						                .endstruct

1418						MoveOrCopyRectangleWorkspaceVDUVariables: .struct
1419	.0000					src: .dstruct VDUAABB
1300	.0000					min: .dstruct VDUCoordinate
1295	>0000					x: .fill 2
1296	>0002					y: .fill 2
1297						                .endstruct
1301	.0004					max: .dstruct VDUCoordinate
1295	>0004					x: .fill 2
1296	>0006					y: .fill 2
1297						                .endstruct
1302						                .endstruct
1420	.0008					L30:
1421	>0008					                .fill 4
1422	.000c					dest: .dstruct VDUAABB
1300	.000c					min: .dstruct VDUCoordinate
1295	>000c					x: .fill 2
1296	>000e					y: .fill 2
1297						                .endstruct
1301	.0010					max: .dstruct VDUCoordinate
1295	>0010					x: .fill 2
1296	>0012					y: .fill 2
1297						                .endstruct
1302						                .endstruct
1423	.0014					L3C:
1424	>0014					                .fill 4
1425	.0018					L40:
1426	>0018					                .fill 2
1427	.001a					shiftToNextByte:
1428	>001a					                .fill 2
1429	.001c					L44:
1430	>001c					                .fill 1
1431	.001d					copy:
1432	>001d					                .fill 1         ;0=move, 2=copy
1433	.001e					L46:
1434	>001e					                .fill 1
1435	.001f					L47:
1436	>001f					                .fill 1

1438						                .endstruct

1440						HorizontalLineFillWorkspaceVDUVariables: .struct
1441	>0000					                .fill 6
1442	.0006					pixelsX:                        ;2e
1443	>0006					                .fill 2
1444	.0008					pixelsY:                        ;30
1445	>0008					                .fill 2
1446	.000a					pixelsRightEndX:
1447	>000a					                .fill 2         ;32
1448	.000c					pixelsLimitX:                   ;34
1449	>000c					                .fill 2
1450						                .endstruct

1452						HorizontalLineFillWorkspaceANDY: .struct
1453	>0000					ecfPattern: .fill 8
1454						                .endstruct

1456	=16					softKeyCount=16
1457	=$400					softKeyDataTotalSize=$400

1459						                .virtual $8000
1460	.8000					andy: .block
1461	.8000					softKeys: .block
1462	>8000					stringLSBs: .fill softKeyCount
1463	>8010					endLSB: .fill 1
1464	>8011					stringMSBs: .fill softKeyCount
1465	>8021					endMSB: .fill 1
1466	.8022					strings:
1467	>8022					                .fill softKeys+$400-*
1468	.8400					end:
1469						                .endblock
1470	>8400					                .fill $8800-*;(softKeyCount*2+1)
1471	.8800					ecfPatterns:
1472	>8800					ecfPattern1: .fill 8
1473	>8808					ecfPattern2: .fill 8
1474	>8810					ecfPattern3: .fill 8
1475	>8818					ecfPattern4: .fill 8
1476	.8820					currentECFPatterns:
1477	>8820					fgECFPattern: .fill 8
1478	>8828					bgECFPattern: .fill 8
1479	.8830					workspace:
1480						                .union
1481	.8830					hlfw: .dstruct HorizontalLineFillWorkspaceANDY
1453	>8830					ecfPattern: .fill 8
1454						                .endstruct
1482	>8830					                .fill 208
1483						                .endunion
1484	.8900					softCharacterDefinitions:
1485	>8900					                .fill (256-32)*8
1488						                .endblock
1489						                .endvirtual

1492	=$8000					L8000=$8000
1493	=$8001					L8001=$8001
1494	=$8002					L8002=$8002
1495	=$8004					L8004=$8004
1496	=$8010					L8010=$8010
1497	=$8011					L8011=$8011
1498	=$8012					L8012=$8012
1499						                ;l8011=$8011
1500						                ;l8012=$8012
1501	=$8021					L8021=$8021

1503						; see $d40d, $d4ae
1504						;
1505						; (suspect these are actually references to $8840-$104 and $8848-$104)
1506	=$873c					L873C=$873c
1507	=$8744					L8744=$8744

1509	=$8400					L8400=$8400
1510	=$8500					L8500=$8500
1511	=$8600					L8600=$8600
1512	=$8700					L8700=$8700
1513	=$87f8					L87F8=$87f8
1514	=$87ff					L87FF=$87FF
1515	=$8800					L8800=$8800
1516	=$8803					L8803=$8803
1517	=$8804					L8804=$8804
1518	=$881e					L881E=$881E
1519	=$8820					L8820=$8820
1520	=$8830					multiplicand=$8830              ; 3 bytes
1521	=$8830					L8830=$8830
1522	=$8831					L8831=$8831
1523	=$8832					L8832=$8832
1524	=$8833					L8833=$8833
1525	=$8834					multiplier=$8834                ; 3 bytes
1526	=$8834					product=$8834                   ; 6 bytes
1527	=$8834					sqrtNumber=$8834                ; 6 bytes
1528	=$8834					L8834=$8834
1529	=$8835					L8835=$8835
1530	=$8836					L8836=$8836
1531	=$8837					L8837=$8837
1532	=$8838					L8838=$8838
1533	=$8839					L8839=$8839
1534						;dividend=$883a                  ; 3 bytes
1535	=$883a					L883A=$883a
1536	=$883b					L883B=$883b
1537	=$883c					L883C=$883C
1538	=$883d					L883D=$883D
1539						;divisor=$883e                   ; 3 bytes
1540	=$883e					L883E=$883e
1541	=$883f					L883F=$883f
1542	=$8840					L8840=$8840
1543	=$8841					ellipseSignFlag=$8841           ; 1 byte
1544	=$8841					L8841=$8841
1545	=$8842					ellipseAccumulatedShear=$8842   ; 3 bytes
1546	=$8842					L8842=$8842
1547	=$8843					L8843=$8843
1548	=$8844					L8844=$8844
1549	=$8845					ellipseCountOddNumbers=$8845    ; 4 bytes
1550	=$8845					L8845=$8845
1551	=$8846					L8846=$8846
1552	=$8847					L8847=$8847
1553	=$8848					L8848=$8848
1554	=$8849					ellipseCountSquares=$8849       ; 4 bytes
1555	=$8849					L8849=$8849
1556	=$884a					L884A=$884a
1557	=$884b					L884B=$884b
1558	=$884c					L884C=$884c
1559	=$884d					ellipseCountHeight=$884d

1561						                ; written to during startup
1562	=$fe8e					LFE8E=$fe8e

1564						;-------------------------------------------------------------------------

1593						;-------------------------------------------------------------------------
1594						; MasRef E.4-4
1595						                .virtual $d0
1596	.00d0					STATE: .block
1597	>00d0					                .fill 1
1598						                ; D.2-32
1599	=$01					isPrinterEnabled=$01
1600	=$02					isScrollingDisabled=$02
1601	=$04					isPagedScrolling=$04
1602	=$08					isTextWindow=$08
1603	=$10					isShadowMode=$10
1604	=$20					isVDU5=$20
1605	=$40					isCursorEditing=$40
1606	=$80					isVDU21=$80
1607						                .bend

1609	>00d1					ZMASK: .fill 1                       ;Pixel mask
1610	>00d2					ZORA: .fill 1                        ;Text OR mask
1611	>00d3					ZEOR: .fill 1                        ;Text EOR mask
1612	>00d4					ZGORA: .fill 1                       ;Graphics OR mask
1613	>00d5					ZGEOR: .fill 1                       ;Graphics EOR mask
1614	>00d6					ZMEMG: .fill 2                       ;Graphics pointer
1615	>00d8					ZMEMT: .fill 2                       ;Text pointer
1616	>00da					ZTEMP: .fill 2                       ;Temporary space
1617	>00dc					ZTEMPB: .fill 2                      ;Temporary space
1618	>00de					ZTEMPC: .fill 2                      ;Temporary space
1619	>00e0					ZTEMPD: .fill 2                      ;Temporary space
1620						                .endv

1622						                .virtual ZTEMP
1623	.00da					zhlfw: .dstruct HorizontalLineFillWorkspaceZP
1409	>00da					notByteMatch: .fill 1
1410	>00db					a: .fill 1
1411	>00dc					b: .fill 2
1412						;c: .fill 2
1413	>00de					pixelsX: .fill 2
1414	>00e0					d: .fill 1
1415	>00e1					resultEOR: .fill 1
1416						                .endstruct
1624						                .endv

1627	=$f8					softKeyExpansionPtr=$f8       ;pointer to current char when expanding soft key.
1628	=$fa					SEIWKA=$fa
1629	=$fb					SEIWKB=$fb

1631	=$d8					vduWriteCursor=$d8

1633	=$d00					nmiEntryPoint=$d00

1635	=0					gcolModeOverwrite=0
1636	=1					gcolModeOR=1
1637	=2					gcolModeAND=2
1638	=3					gcolModeEOR=3
1639	=4					gcolModeInvert=4
1640	=5					gcolModeLeave=5

1642						;-------------------------------------------------------------------------

1644						StarKEYWorkspace: .struct
1645	>0000					newStringLength: .fill 1
1646	>0001					destPtr: .fill 2
1647	>0003					srcPtr: .fill 2
1648	>0005					counter: .fill 2
1649						                .endstruct

1651						OSGBPBWorkspace: .struct
1652	>0000					ptr: .fill 2
1653						                .endstruct

1655						ParseFileNameFSWorkspace: .struct
1656	>0000					fsInfoOffset: .fill 1
1657						                .endstruct

1659						OSCLIWorkspace: .struct
1660	>0000					tablePtr: .fill 2
1661						                .endstruct

1663						                ; TODO - could do being renamed, as it's used (in the
1664						                ; same way) by *UNPLUG and *INSERT.
1665						StarROMSWorkspace: .struct
1666	>0000					insertedFlagMask: .fill 1
1667						                .endstruct

1669						TerminalHELPWorkspace: .struct
1670	>0000					tablePtr: .fill 2
1671						                .endstruct

1673						                ; TODO - tediously verbose names. Acronyms work well
1674						                ; enough for the VDU variables. Do the same thing
1675						                ; here.
1676						                .virtual $b0
1677						                .union
1678	.00b0					starKEYWorkspace: .dstruct StarKEYWorkspace
1645	>00b0					newStringLength: .fill 1
1646	>00b1					destPtr: .fill 2
1647	>00b3					srcPtr: .fill 2
1648	>00b5					counter: .fill 2
1649						                .endstruct
1679	.00b0					osgbpbWorkspace: .dstruct OSGBPBWorkspace
1652	>00b0					ptr: .fill 2
1653						                .endstruct
1680	.00b0					parseFileNameFSWorkspace: .dstruct ParseFileNameFSWorkspace
1656	>00b0					fsInfoOffset: .fill 1
1657						                .endstruct
1681	.00b0					oscliWorkspace: .dstruct OSCLIWorkspace
1660	>00b0					tablePtr: .fill 2
1661						                .endstruct
1682	.00b0					starROMSWorkspace: .dstruct StarROMSWorkspace
1666	>00b0					insertedFlagMask: .fill 1
1667						                .endstruct
1683	.00b0					terminalHELPWorkspace: .dstruct TerminalHELPWorkspace
1670	>00b0					tablePtr: .fill 2
1671						                .endstruct
1684						                .endunion
1685						                .endvirtual

1687						;-------------------------------------------------------------------------

1689						; ROM number containing Terminal
1690	=15					terminalROM=15

1692						; ROM number containing the extXXXX entry points
1703	=15					extROM=15

1706						; Base page for VDU routines
1707	=$c0					vduRoutinesPage=$c0

1712	=0					cmosBytesOffset=0

1715						CMOSBytes: .struct
1716	>0000					econetStationNumber: .fill 1
1717	>0001					fileServerStationNumber: .fill 1
1718	>0002					fileServerNetworkNumber: .fill 1
1719	>0003					printerServerStationNumber: .fill 1
1720	>0004					printerServerNetworkNumber: .fill 1
1721	.0005					defaultROMs: .block
1722	>0005					                .fill 1
1723	=0					fsShift=0
1724	=4					languageShift=4
1725						                .endblock

1727	>0006					insertedROMs: .fill 2

1729	>0008					editROMByte: .fill 1
1730	>0009					telecommsByte: .fill 1

1732	.000a					defaults0: .block
1733	>000a					                .fill 1
1734	=0					modeShift=0
1735	=7					modeMask=7
1736	=8					shadowMask=8
1737	=16					interlaceMask=16
1738	=7					tvMask=7
1739	=5					tvShift=5
1740						                .endblock

1742	.000b					defaults1: .block
1743	>000b					                .fill 1
1744	=0					fdriveShift=0
1745	=7					fdriveMask=7
1746	=8					shiftLockMask=8
1747	=16					noLockMask=16
1748	=32					capsLockMask=32
1749	=64					adfsLoadDirMask=64
1750	=128					floppyDrive=128
1751						                .endblock

1753	>000c					keyboardAutoRepeatDelay: .fill 1
1754	>000d					keyboardAutoRepeatRate: .fill 1
1755	>000e					printerIgnoreChar: .fill 1

1757	.000f					defaults2: .block
1758	>000f					                .fill 1
1762	=2					usePrinterIgnoreCharMask=2
1763	=7					serialBaudRateIndexMask=7
1764	=2					serialBaudRateIndexShift=2
1765	=7					fx5SettingMask=7
1766	=5					fx5SettingShift=5
1767						                .endblock

1769	.0010					defaults3: .block
1770	>0010					                .fill 1
1771	=2					loudMask=2
1775	=8					protectedScrollingMask=8
1776	=16					autoBootMask=16
1777	=7					serialDataFormatMask=7
1778	=5					serialDataFormatShift=5
1779						                .endblock

1782						                ; Purpose currently unknown. Is it even used?
1783	.0011					unknown11:
1784	>0011					                .fill 1

1786	.0012					joystick: .block
1787	=$f					stickMask=$f
1788	=32					isSwitchedMask=32
1789	>0012					                .fill 1
1790						                .endblock

1793						                ; 5.11 doesn't appear to use this byte, but it does
1794						                ; get cleared as part of the CMOS reset loop. So
1795						                ; presumably there was space booked for it somewhere
1796						                ; in the original code.
1797	.0013					country:
1798	>0013					                .fill 1

1802						                .endstruct

1804	=$ef					originalA=$ef
1805	=$f0					originalX=$f0
1806	=$f1					originalY=$f1
1807	=$fc					TEMPA=$fc
1808	=$fd					errPtr=$fd                      ;REPTR in OS 1.20
1809	=$ff					escapeFlag=$ff

1811	=$8c0					envelope1Data=$8c0

1813	=$8000					sidewaysROMLanguageEntry=$8000
1814	=$8003					sidewaysROMServiceEntry=$8003
1815						                .virtual $8006
1816	.8006					sidewaysROMType: .block
1817	=32					hasRelocationAddress=32
1818	=64					hasLanguageEntry=64
1819	=128					hasServiceEntry=128
1820						                .endblock
1821						                .endvirtual
1822	=$8007					sidewaysROMCopyrightOffset=$8007
1823	=$8008					sidewaysROMVersion=$8008
1824	=$8009					sidewaysROMName=$8009

1826						;-------------------------------------------------------------------------

1828						                ; [MasRef D.3-22]
1829						ClockStringFormat: .struct
1830	.0000					ddd:
1831	>0000					                .fill 3
1832	>0003					                .fill 1                      ;','
1833	.0004					nn:
1834	>0004					                .fill 2
1835	>0006					                .fill 1                      ;' '
1836	.0007					mmm:
1837	>0007					                .fill 3
1838	>000a					                .fill 1                      ;' '
1839	.000b					yyyy:
1840	>000b					                .fill 4
1841	>000f					                .fill 1                      ;'.'
1842	.0010					hh:
1843	>0010					                .fill 2
1844	>0012					                .fill 1                      ;':'
1845	.0013					mm:
1846	>0013					                .fill 2
1847	>0015					                .fill 1                      ;':'
1848	.0016					ss:
1849	>0016					                .fill 2
1850	.0018					cr:
1851	>0018					                .fill 1                      ;'\n'
1852						                .endstruct

1854						;-------------------------------------------------------------------------

:1	;******  Return to file: mosautocue.s65

3						                .include "src/terminal_workspace.s65"

:4	;******  Processing file: src/terminal_workspace.s65

1						;-------------------------------------------------------------------------

3						; Not really MOS stuff. This is the Terminal ROM zero page workspace.

5	=$70					oldINSV=$70
6	=$72					oldREMV=$72

9						;-------------------------------------------------------------------------

11						zterm: .struct
12	=$39					numRowsMinusOne=$39
13	=$38					numColumns=$38
14	=$37					numColumnsMinusOne=$37
15						; TODO old INSV and oldREMV should probably go in here too!
16						                .endstruct

:1	;******  Return to file: mosautocue.s65

5	=511					version=511
6	="MOS 5.10i"				versionString="MOS 5.10i"
7	=true					autocue=true
8	=129					defaultMODE=129

10						*=$8000
11						                .dsection utils
12						                .cwarn *>$c000,'utils ROM is too large'

14						*=$c000
15						                .dsection mos
16						                ; there's no need for a size check here - 64tass gives
17						                ; you an error if the code would go past the 64 K
18						                ; barrier.

20						;-------------------------------------------------------------------------

22						                .section utils
23						                .include "src/terminal.s65"

:5	;******  Processing file: src/terminal.s65

1						; -*- comment-column:45; -*-

3	.8000					utilsROMHeader: .block

37						                ; Language entry point
38	.8000	00		brk #		                brk
39	.8001	00		brk #		                brk
40	.8002	00		brk #		                brk

42						                ; Service entry point
43	.8003	4c ad a2	jmp $a2ad	                jmp utilsServiceEntryPoint

45	>8006	82				                .byte $82
46	>8007	0e				                .byte copyright-1-utilsROMHeader
56	>8008	10				                .byte $10
58	>8009	55 54 49 4c 53 00		                .text "UTILS",0
59	.800f					copyright:
63	>800f	28 43 29 31 39 38 36 20		                .text "(C)1986 Acorn",0
	>8017	41 63 6f 72 6e 00
66						                .endblock

68						;-------------------------------------------------------------------------

77						;-------------------------------------------------------------------------

86						;-------------------------------------------------------------------------

95						;-------------------------------------------------------------------------

108						;-------------------------------------------------------------------------

116						;-------------------------------------------------------------------------

130						;-------------------------------------------------------------------------

132						; STARTUP
133						; =======

135						; This code is officially more than a bit gnarly, as it gets stitched
136						; together in several different ways.

145	.801d					reset:                          ;8020
146						                .include "reset.s65"

:6	;******  Processing file: src/reset.s65

5	.801d	a9 fe		lda #$fe	                lda #~ACCCON.D
6	.801f	1c 34 fe	trb $fe34	                trb ACCCON
12	.8022	1c 66 03	trb $0366	                trb $0366
14	.8025	d8		cld		                cld
15	.8026	a2 ff		ldx #$ff	                ldx #$FF
16	.8028	9a		txs		                txs              ;reset stack
17	.8029	8e 63 fe	stx $fe63	                stx userVIA.ddra ;port A all outputs
18	.802c	a9 cf		lda #$cf	                lda #%11001111
19	.802e	8d 42 fe	sta $fe42	                sta systemVIA.ddrb
31	.8031	a9 0c		lda #$0c	                lda #ACCCON.Y|ACCCON.X       ; page in HAZEL+shadow
32	.8033	0c 34 fe	tsb $fe34	                tsb ACCCON
34	.8036	9c dd df	stz $dfdd	                stz hazel.hasACCCONChanged
35	.8039	20 a0 83	jsr $83a0	                jsr L8363
46	.803c	ad 4e fe	lda $fe4e	                lda systemVIA.ier
48	.803f	0a		asl a		                asl a
49	.8040	48		pha		                pha
112	.8041	d0 2b		bne $806e	                bne nonPowerOnReset
113	.8043	a2 07		ldx #$07	                ldx #7
114	.8045	20 d7 f8	jsr $f8d7	                jsr LF8B4
118	.8048	98		tya		                tya
121	.8049					startClearRAM:
122	.8049	a8		tay		                tay             ;Y=0
123	.804a					clearRAM:
124	.804a	98		tya		                tya             ;A=0
125	.804b	64 01		stz $01		                stz $01
126	.804d	64 00		stz $00		                stz $00         ;start at $0000
127	.804f					clearRAMPageLoop:
128	.804f	91 00		sta ($00),y	                sta ($00),y     ;clear RAM
129	.8051	c8		iny		                iny
130	.8052	d0 fb		bne $804f	                bne clearRAMPageLoop
131	.8054	e6 01		inc $01		                inc $01
132	.8056	a2 40		ldx #$40	                ldx #$40          ;$40=RTI
133	.8058	8e 00 0d	stx $0d00	                stx nmiEntryPoint ;restore the RTI previously written,
134						                                  ;as each iteration will potentially
135						                                  ;overwrite it
136	.805b	a6 01		ldx $01		                ldx $01
137	.805d	e0 e0		cpx #$e0	                cpx #$E0        ;hit the end of RAM?
138	.805f	90 ee		bcc $804f	                bcc clearRAMPageLoop ;branch taken if still more to go
139	.8061	a9 04		lda #$04	                lda #ACCCON.X   ;page out shadow RAM
140	.8063	1c 34 fe	trb $fe34	                trb ACCCON
141	.8066	d0 e2		bne $804a	                bne clearRAM    ;branch taken if shadow RAM bit
142						                             ;previously set - i.e., that was the
143						                             ;first iteration, and we need to go back
144						                             ;to do main RAM
146	.8068	ad 28 fe	lda $fe28	                lda $fe28
147	.806b	ad 2b fe	lda $fe2b	                lda $fe2b
150	.806e					nonPowerOnReset:
152	.806e	ad 58 02	lda $0258	                lda breakAndESCAPEEffect
153	.8071	4a		lsr a		                lsr a
154	.8072	3a		dec a		                dec a
155	.8073	f0 d4		beq $8049	                beq startClearRAM
157	.8075	a9 3c		lda #$3c	                lda #<emptyCommandLine
158	.8077	8d 04 df	sta $df04	                sta hazel.commandLinePointer+0
159	.807a	a9 e9		lda #$e9	                lda #>emptyCommandLine
160	.807c	8d 05 df	sta $df05	                sta hazel.commandLinePointer+1
161	.807f	a9 0c		lda #$0c	                lda #ACCCON.Y|ACCCON.X ; page in MOS ROM, page in main
162						                                       ; RAM
166	.8081	1c 34 fe	trb $fe34	                trb ACCCON
168	.8084	a9 0f		lda #$0f	                lda #$0F
169	.8086	8d 8e 02	sta $028e	                sta numericKeypadShiftEffect
177	.8089	a2 01		ldx #$01	                ldx #key_ctrl
181	.808b	20 1c f7	jsr $f71c	                jsr interrogateKeyboard
183	.808e	e0 80		cpx #$80	                cpx #$80        ;Z=0 C=1 if CTRL+BREAK
184	.8090	20 42 f5	jsr $f542	                jsr updateKeyboardLEDs
185	.8093	9c 8d 02	stz $028d	                stz lastBREAKType            ;softBREAK
186	.8096	6a		ror a		                ror a
187	.8097	a2 9c		ldx #$9c	                ldx #$9c                     ;what is this?
188	.8099	a0 8d		ldy #$8d	                ldy #$8D                     ;what is this?
189	.809b	68		pla		                pla
190	.809c	f0 09		beq $80a7	                beq L80AD
191	.809e	a0 7e		ldy #$7e	                ldy #$7E                     ;what is this?
192	.80a0	90 3c		bcc $80de	                bcc L80DF
193	.80a2	a0 87		ldy #$87	                ldy #$87                     ;what is this?
194	.80a4	ee 8d 02	inc $028d	                inc lastBREAKType
195	.80a7					L80AD:
196	.80a7	ee 8d 02	inc $028d	                inc lastBREAKType
197	.80aa	5a		phy		                phy

208	.80ab	20 c9 9e	jsr $9ec9	                jsr L9E58
210	.80ae	a2 4d		ldx #$4d	                ldx #configureTable.mode.metadata-configureTable
214	.80b0	20 a1 8a	jsr $8aa1	                jsr readConfigurationByte

220	.80b3	09 08		ora #$08	                ora #CMOSBytes.defaults0.shadowMask
221	.80b5	8d 8f 02	sta $028f	                sta startupOptions
225	.80b8	20 16 9e	jsr $9e16	                jsr readDefaults3 ; Read configured BOOT
227	.80bb	29 10		and #$10	                and #CMOSBytes.defaults3.autoBootMask
228	.80bd	4a		lsr a		                lsr a         ; Reset OSBYTE 255 boot bit (b3) if BOOT
229	.80be	1c 8f 02	trb $028f	                trb startupOptions
233	.80c1	20 13 8c	jsr $8c13	                jsr readDefaultTVSettings
235	.80c4	8c 90 02	sty $0290	                sty tvOffset
236	.80c7	8e 91 02	stx $0291	                stx tvInterlace
240	.80ca	20 16 9e	jsr $9e16	                jsr readDefaults3
242	.80cd	29 08		and #$08	                and #CMOSBytes.defaults3.protectedScrollingMask
243	.80cf	f0 02		beq $80d3	                beq L80D4
244	.80d1	a9 01		lda #$01	                lda #VDUVariables.cursorFlags.scrollProtect
245	.80d3					L80D4:
246	.80d3	8d 66 03	sta $0366	                sta vduv.cursorFlags
247	.80d6	20 90 94	jsr $9490	                jsr restoreFont32To255
248	.80d9	7a		ply		                ply
249	.80da	a2 92		ldx #$92	                ldx #$92
250	.80dc	80 1b		bra $80f9	                bra initializePage2Loop
251	.80de					L80DF:
253	.80de	20 c9 9e	jsr $9ec9	                jsr L9E58
255	.80e1	a9 87		lda #$87	                lda #$87             ; Clear MODE bits from OSBYTE 255
256	.80e3	1c 8f 02	trb $028f	                trb startupOptions
257	.80e6	ad 55 03	lda $0355	                lda vduv.currentScreenMODE ; Get current screen MODE b0-b2
258	.80e9	29 07		and #$07	                and #$07
259	.80eb	0c 8f 02	tsb $028f	                tsb startupOptions           ; Copy to OSBYTE 255
260	.80ee	a9 10		lda #$10	                lda #STATE.isShadowMode ; Test shadow screen bit in VDU flags
261	.80f0	24 d0		bit $d0		                bit STATE                      ; Not shadow screen
262	.80f2	f0 05		beq $80f9	                beq initializePage2Loop
263	.80f4	a9 80		lda #$80	                lda #$80                     ; Set shadow screen bit in OSBYTE 255
264	.80f6	0c 8f 02	tsb $028f	                tsb startupOptions

266	.80f9					initializePage2Loop:
267	.80f9	ad 8d 02	lda $028d	                lda lastBREAKType
268	.80fc	d0 08		bne $8106	                bne clearPage2Byte           ;taken unless soft BREAK

270						                ; leave the ROM information table alone on a soft
271						                ; BREAK.
272	.80fe	e0 b1		cpx #$b1	                cpx #<romInformationTable+16
273	.8100	b0 04		bcs $8106	                bcs clearPage2Byte
274	.8102	e0 a1		cpx #$a1	                cpx #<romInformationTable
275	.8104	b0 0a		bcs $8110	                bcs nextPage2Byte
276	.8106					clearPage2Byte:
277	.8106	9e 00 02	stz $0200,x	                stz $0200,x
278	.8109	e0 cd		cpx #$cd	                cpx #$CD
279	.810b	90 03		bcc $8110	                bcc nextPage2Byte
280	.810d	de 00 02	dec $0200,x	                dec $0200,x                  ;initialize later values to $ff
281	.8110					nextPage2Byte:
282	.8110	e8		inx		                inx
283	.8111	d0 e6		bne $80f9	                bne initializePage2Loop

288	.8113	a2 cf		ldx #$cf	                ldx #$CF
289	.8115					initializeZeroPageLoop:
290	.8115	74 00		stz $00,x	                stz $00,x
291	.8117	e8		inx		                inx
292	.8118	d0 fb		bne $8115	                bne initializeZeroPageLoop

298	.811a	ad 8d 02	lda $028d	                lda lastBREAKType
299	.811d	d0 20		bne $813f	                bne L813D                    ;taken if not soft BREAK

302	.811f	ad 46 02	lda $0246	                lda noignoreState
303	.8122	48		pha		                pha
305	.8123	ad 4b 02	lda $024b	                lda basicROMNumber
306	.8126	48		pha		                pha
307	.8127	ad 44 02	lda $0244	                lda oshwm
308	.812a	48		pha		                pha
309	.812b	ad 57 02	lda $0257	                lda spoolFileHandle
310	.812e	48		pha		                pha
311	.812f	ae 56 02	ldx $0256	                ldx execFileHandle

313	.8132					L8130:
314	.8132	b9 f8 e2	lda $e2f8,y	                lda defaultVectorTable-1,y
315	.8135	99 ff 01	sta $01ff,y	                sta vectors-1,y
316	.8138	88		dey		                dey
317	.8139	c0 21		cpy #$21	                cpy #EVENTV+1-vectors
318	.813b	b0 f5		bcs $8132	                bcs L8130

320	.813d	a0 12		ldy #$12	                ldy #FILEV-vectors

322	.813f					L813D:
323	.813f	b9 f8 e2	lda $e2f8,y	                lda defaultVectorTable-1,y
324	.8142	99 ff 01	sta $01ff,y	                sta vectors-1,y
325	.8145	88		dey		                dey
326	.8146	d0 f7		bne $813f	                bne L813D

328	.8148	ad 8d 02	lda $028d	                lda lastBREAKType
329	.814b	d0 19		bne $8166	                bne L8164
330	.814d	8e 56 02	stx $0256	                stx execFileHandle
331	.8150	68		pla		                pla                          ;restore *SPOOL file handle
332	.8151	c9 04		cmp #$04	                cmp #$04                     ;is it a TAPE or ROM handle?
333	.8153	b0 02		bcs $8157	                bcs L8155                    ;taken if no - keep it

338	.8155	a9 00		lda #$00	                lda #$00          ;auto-close it if TAPE or ROM handle
340	.8157					L8155:
341	.8157	8d 57 02	sta $0257	                sta spoolFileHandle
342	.815a	68		pla		                pla
343	.815b	8d 44 02	sta $0244	                sta oshwm
344	.815e	68		pla		                pla
345	.815f	8d 4b 02	sta $024b	                sta basicROMNumber
347	.8162	68		pla		                pla
348	.8163	8d 46 02	sta $0246	                sta noignoreState

351	.8166					L8164:
353	.8166	a2 0b		ldx #$0b	                ldx #cmosBytesOffset+CMOSBytes.defaults1
357	.8168	20 3a 9e	jsr $9e3a	                jsr readRTCByte
362	.816b	a2 20		ldx #$20	                ldx #keyboardStatusByte.shiftLockDisengaged
363	.816d	0a		asl a		                asl a
364	.816e	0a		asl a		                asl a                        ;N=defaultCapsLockMask
365	.816f	30 07		bmi $8178	                bmi gotKeyboardStatusByte                    ;taken if defaultCapsLock
366	.8171	a2 30		ldx #$30	                ldx #keyboardStatusByte.shiftLockDisengaged|keyboardStatusByte.capsLockDisengaged
367	.8173	0a		asl a		                asl a                        ;N=defaultNoLockMask
368	.8174	30 02		bmi $8178	                bmi gotKeyboardStatusByte
369	.8176	a2 a0		ldx #$a0	                ldx #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
370	.8178					gotKeyboardStatusByte:
371	.8178	8e 5a 02	stx $025a	                stx keyboardStatusByte
375	.817b	20 a9 e5	jsr $e5a9	                jsr selectTerminalROM
376	.817e	20 b8 f1	jsr $f1b8	                jsr resetKeyRepeat
378	.8181	ad 8d 02	lda $028d	                lda lastBREAKType
379	.8184	f0 16		beq $819c	                beq L8196
381	.8186	a2 0e		ldx #$0e	                ldx #cmosBytesOffset+CMOSBytes.printerIgnoreChar
385	.8188	20 3a 9e	jsr $9e3a	                jsr readRTCByte
390	.818b	8d 86 02	sta $0286	                sta printerIgnoreChar
398	.818e	20 de 8b	jsr $8bde	                jsr readUsePrinterIgnoreChar
400	.8191	6e 46 02	ror $0246	                ror noignoreState

403	.8194	a2 75		ldx #$75	                ldx #configureTable.print.metadata-configureTable
407	.8196	20 a1 8a	jsr $8aa1	                jsr readConfigurationByte

413	.8199	8d 85 02	sta $0285	                sta printerDriverType
414	.819c					L8196:

420	.819c	a2 19		ldx #$19	                ldx #configureTable.data.metadata-configureTable
424	.819e	20 a1 8a	jsr $8aa1	                jsr readConfigurationByte

430	.81a1	0a		asl a		                asl a                        ;
431	.81a2	0a		asl a		                asl a       ;shift into the control registerword field
432	.81a3	09 42		ora #$42	                ora #ACIA.control.rtsHighTXInterruptDisabled|ACIA.control.counterDivide64
433	.81a5	8d 50 02	sta $0250	                sta aciaControlRegister

439	.81a8	a2 12		ldx #$12	                ldx #CMOSBytes.joystick
440	.81aa	20 3a 9e	jsr $9e3a	                jsr readRTCByte
441	.81ad	8d 4e 02	sta $024e	                sta adcConversionType
447	.81b0	a2 ff		ldx #$ff	                ldx #$ff
448	.81b2					L81B2:
449	.81b2	20 4a ae	jsr $ae4a	                jsr resetACIA
450	.81b5	ad 08 fe	lda $fe08	                lda $fe08
451	.81b8	d0 0e		bne $81c8	                bne L81C8
452	.81ba	a9 20		lda #$20	                lda #$20
453	.81bc	8d 08 fe	sta $fe08	                sta $fe08
454	.81bf	ad 08 fe	lda $fe08	                lda $fe08
455	.81c2	29 f7		and #$f7	                and #$f7
456	.81c4	c9 82		cmp #$82	                cmp #$82
457	.81c6	f0 07		beq $81cf	                beq L81CF
458	.81c8					L81C8:
459	.81c8	c9 08		cmp #$08	                cmp #8
460	.81ca	f0 03		beq $81cf	                beq L81CF
461	.81cc	9c 78 02	stz $0278	                stz rs423InterruptMask
462	.81cf					L81CF:
463	.81cf	ca		dex		                dex
464	.81d0	d0 e0		bne $81b2	                bne L81B2
465	.81d2	20 0e ae	jsr $ae0e	                jsr resetACIAThenRewriteControlRegister
466	.81d5	e8		inx		                inx

470	.81d6	a9 7f		lda #$7f	                lda #$7F
471	.81d8					initializeVIAInterruptsLoop:
472	.81d8	9d 4d fe	sta $fe4d,x	                sta systemVIA.ifr,x
473	.81db	9d 6d fe	sta $fe6d,x	                sta userVIA.ifr,x
474	.81de	ca		dex		                dex
475	.81df	10 f7		bpl $81d8	                bpl initializeVIAInterruptsLoop

478						                ; Let through 1 IRQ.
479	.81e1	58		cli		                cli
480	.81e2	78		sei		                sei

482						                ; TEMPA was cleared above, so if bit 6 is set, there
483						                ; must have been an IRQ (as A=$7f).
484	.81e3	24 fc		bit $fc		                bit TEMPA
485	.81e5	50 03		bvc $81ea	                bvc +
486	.81e7	20 6b f7	jsr $f76b	                jsr call1MHzBusHook
487	.81ea					+

491	.81ea	a2 d2		ldx #$d2	                ldx #$80|VIA.irq.t1|VIA.irq.cb1|VIA.irq.ca1
495	.81ec	8e 4e fe	stx $fe4e	                stx systemVIA.ier

498	.81ef	a2 98		ldx #$98	                ldx #$80|VIA.irq.cb1|VIA.irq.cb2
499	.81f1	8e 6e fe	stx $fe6e	                stx userVIA.ier

502	.81f4	a2 04		ldx #$04	                ldx #VIA.pcr.cb2InputNegativeActiveEdge|VIA.pcr.cb1NegativeActiveEdge|VIA.pcr.ca2InputPositiveEdge|VIA.pcr.ca1NegativeActiveEdge
503	.81f6	8e 4c fe	stx $fe4c	                stx systemVIA.pcr
504	.81f9	a9 40		lda #$40	                lda #VIA.acr.t1Continuous|VIA.acr.t2Timer|VIA.acr.srDisabled|VIA.acr.pbLatchDisabled|VIA.acr.paLatchDisabled
505	.81fb	8d 4b fe	sta $fe4b	                sta systemVIA.acr
506	.81fe	a9 0e		lda #$0e	                lda #$0E
507	.8200	8d 46 fe	sta $fe46	                sta systemVIA.t1lL
508	.8203	8d 6c fe	sta $fe6c	                sta userVIA.pcr              ;VIA.pcr.cb2InputNegativeActiveEdge|VIA.pcr.cb1NegativeActiveEdge|VIA.pcr.ca2HighOutput|VIA.pcr.ca1NegativeActiveEdge
514	.8206	a9 27		lda #$27	                lda #$27
515	.8208	8d 47 fe	sta $fe47	                sta systemVIA.t1lH
516	.820b	8d 45 fe	sta $fe45	                sta systemVIA.t1cH

519	.820e	20 aa 83	jsr $83aa	                jsr clearAllSoundChannelBuffers

532	.8211	20 ac f7	jsr $f7ac	                jsr osbyte7A
534	.8214	86 ed		stx $ed		                stx firstKeyPressedInternal
535	.8216	a2 00		ldx #$00	                ldx #$00
537	.8218	8e 62 fe	stx $fe62	                stx userVIA.ddrb
539	.821b	20 a8 ea	jsr $eaa8	                jsr purgeBuffer

542	.821e	ad 82 02	lda $0282	                lda serialULARegister
543	.8221	29 7f		and #$7f	                and #$7F
544	.8223	20 25 ed	jsr $ed25	                jsr LEC89

547	.8226	a2 07		ldx #$07	                ldx #configureTable.baud.metadata-configureTable
551	.8228	20 a1 8a	jsr $8aa1	                jsr readConfigurationByte

557	.822b	48		pha		                pha
558	.822c	aa		tax		                tax
559	.822d	20 07 ed	jsr $ed07	                jsr osbyte08
560	.8230	fa		plx		                plx
561	.8231	a9 07		lda #$07	                lda #$07
562	.8233	20 09 ed	jsr $ed09	                jsr osbyte07

568	.8236	20 16 9e	jsr $9e16	                jsr readDefaults3
570	.8239	89 02		bit #$02	                bit #CMOSBytes.defaults3.loudMask
571	.823b	d0 05		bne $8242	                bne L8211
572	.823d	a9 f0		lda #$f0	                lda #$F0
573	.823f	8d 64 02	sta $0264	                sta bellSound
574	.8242					L8211:
576	.8242	20 a9 e5	jsr $e5a9	                jsr selectTerminalROM

579	.8245	ae 84 02	ldx $0284	                ldx softKeyConsistencyFlag
580	.8248	f0 03		beq $824d	                beq checkResetType
581	.824a	20 d0 f1	jsr $f1d0	                jsr osbyte12
582	.824d					checkResetType:
583	.824d	ad 8d 02	lda $028d	                lda lastBREAKType
584	.8250	f0 03		beq $8255	                beq romsScanned                    ;taken if soft BREAK

590	.8252	4c ba e3	jmp $e3ba	                jmp scanROMs

593	.8255					romsScanned:
594	.8255	ad 8f 02	lda $028f	                lda startupOptions
595	.8258	20 99 c7	jsr $c799	                jsr setStartupMODE
596	.825b	ad 8d 02	lda $028d	                lda lastBREAKType ; $00=soft; $01=power-on; $02=hard
597	.825e	3a		dec a		                dec a             ; $ff=soft; $00=power-on; $01=hard
599	.825f	f0 03		beq $8264	                beq powerOnReset ; taken if power-on reset
600	.8261	4c 10 83	jmp $8310	                jmp softReset

605	.8264					powerOnReset:
607	.8264	a2 ff		ldx #$ff	                ldx #$ff
608	.8266	20 3b 9f	jsr $9f3b	                jsr i2cReadEEPROMByte
609	.8269	b0 10		bcs $827b	                bcs checkForNVRAMReset ; taken if read failed
610	.826b	98		tya		                tya
611	.826c	29 7f		and #$7f	                and #$7f
613	.826e	c9 32		cmp #$32	                cmp #$32
617	.8270	f0 09		beq $827b	                beq checkForNVRAMReset
618	.8272	a2 00		ldx #$00	                ldx #0
619	.8274	a0 00		ldy #$00	                ldy #0
620	.8276	20 0a 9f	jsr $9f0a	                jsr L9E99
621	.8279	80 40		bra $82bb	                bra resetCMOSRAM
623	.827b					checkForNVRAMReset:

626	.827b					checkForEraseKey:
627	.827b	a5 ed		lda $ed		                lda firstKeyPressedInternal
628	.827d	c9 59		cmp #$59	                cmp #key_delete
629	.827f	d0 36		bne $82b7	                bne checkForResetKey
630	.8281	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
631	>8284	16 07				                .byte 22,7
632	>8286	0d 0a				                .byte 13,10
633	>8288	43 6c 65 61 72 69 6e 67		                .text "Clearing options...please wait",0
	>8290	20 6f 70 74 69 6f 6e 73 2e 2e 2e 70 6c 65 61 73
	>82a0	65 20 77 61 69 74 00
634	.82a7	a2 ff		ldx #$ff	                ldx #$ff
635	.82a9					L82A9:
636	.82a9	da		phx		                phx
637	.82aa	a0 00		ldy #$00	                ldy #0
638	.82ac	20 69 9e	jsr $9e69	                jsr writeCMOSByte
639	.82af	fa		plx		                plx
640	.82b0	ca		dex		                dex
641	.82b1	e0 14		cpx #$14	                cpx #size(CMOSBytes)
642	.82b3	b0 f4		bcs $82a9	                bcs L82A9
643	.82b5	80 04		bra $82bb	                bra resetCMOSRAM

649	.82b7					checkForResetKey:
650	.82b7	c9 33		cmp #$33	                cmp #key_r
651	.82b9	d0 55		bne $8310	                bne softReset                    ;taken if R not pressed

689	.82bb					resetCMOSRAM:                                ;82bb in MOS 5.10
690	.82bb	a2 14		ldx #$14	                ldx #size(CMOSBytes)
691	.82bd					resetCMOSRAMLoop:
692	.82bd	da		phx		                phx
693	.82be	ca		dex		                dex
694	.82bf	20 51 9e	jsr $9e51	                jsr readDefaultCMOSByte
695	.82c2	20 69 9e	jsr $9e69	                jsr writeCMOSByte
696	.82c5	fa		plx		                plx
697	.82c6	ca		dex		                dex
698	.82c7	d0 f4		bne $82bd	                bne resetCMOSRAMLoop

706						                ; Put values in place for EEPROM size check. See code
707						                ; in readCMOSByte.
708	.82c9	a2 7f		ldx #$7f	                ldx #$7f
709	.82cb	20 3b 9f	jsr $9f3b	                jsr i2cReadEEPROMByte
710	.82ce	98		tya		                tya
711	.82cf	29 80		and #$80	                and #$80
713	.82d1	49 b2		eor #$b2	                eor #$b2
717	.82d3	a8		tay		                tay
718	.82d4	a2 ff		ldx #$ff	                ldx #$ff
719	.82d6	20 0a 9f	jsr $9f0a	                jsr L9E99

722	.82d9	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
724	>82dc	16 07				                .byte 22,7
726	>82de	0d 0a				                .text 13,10
730	>82e0	4f 70 74 69 6f 6e 73 20		                .text "Options reset"
	>82e8	72 65 73 65 74
732	>82ed	0d 0a 50 72 65 73 73 20		                .text 13,10,"Press break to continue"
	>82f5	62 72 65 61 6b 20 74 6f 20 63 6f 6e 74 69 6e 75
	>8305	65
733	>8306	0d 0a 00			                .text 13,10,0

736	.8309	a9 03		lda #$03	                lda #$03
737	.830b	8d 58 02	sta $0258	                sta breakAndESCAPEEffect
738	.830e					hang:
739	.830e	80 fe		bra $830e	                bra hang

741						;-------------------------------------------------------------------------

777						;-------------------------------------------------------------------------

779	.8310					softReset:
784	.8310	20 47 ee	jsr $ee47	                jsr selectHAZEL
786	.8313	9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
787	.8316	9c d5 df	stz $dfd5	                stz hazel.moveDestHandle
788	.8319	a0 ca		ldy #$ca	                ldy #$CA
792	.831b	20 a9 eb	jsr $eba9	                jsr insertCharacterIntoKeyboardBuffer
797	.831e	20 1f f4	jsr $f41f	                jsr osbyte247EntryPoint
799	.8321	ad 8d 02	lda $028d	                lda lastBREAKType
800	.8324	f0 03		beq $8329	                beq L829D
804	.8326	20 5d ee	jsr $ee5d	                jsr LEDD0
806	.8329					L829D:

:5	;******  Return to file: src/terminal.s65

160	.8329					continueSoftReset:
162	.8329					handleROMWorkspace:
163	.8329	ad 8d 02	lda $028d	                lda lastBREAKType ; Soft Break, don't ask about workspace
164	.832c	f0 27		beq $8355	                beq L82FC
165	.832e	a0 dc		ldy #$dc	                ldy #$DC                     ; Start high workspace at &DC00 and work downwards
166	.8330	a2 24		ldx #$24	                ldx #romServiceCallCountDynamicHAZELWorkspace ; Ask ROMs how much private high workspace required
167	.8332	20 ff ee	jsr $eeff	                jsr makeROMServiceCall   ;
168	.8335	a2 21		ldx #$21	                ldx #romServiceCallAbsoluteHAZELWorkspaceClaim ; Ask ROMs for maximum shared high workspace required
169	.8337	20 ff ee	jsr $eeff	                jsr makeROMServiceCall   ;
170	.833a	5a		phy		                phy                          ; Save top of shared workspace
171	.833b	a2 22		ldx #$22	                ldx #romServiceCallPrivateHAZELWorkspaceClam ; Ask ROMs for private high workspace required
172	.833d	20 ff ee	jsr $eeff	                jsr makeROMServiceCall   ;
173	.8340	a0 0e		ldy #$0e	                ldy #$0E                     ; Start low workspace at &0E00
174	.8342	a2 01		ldx #$01	                ldx #romServiceCallAbsoluteWorkspaceClaim ; Ask ROMs for maximum shared workspace
175	.8344	20 ff ee	jsr $eeff	                jsr makeROMServiceCall   ;
176	.8347	a2 02		ldx #$02	                ldx #romServiceCallPrivateWorkspaceClaim ; Ask ROMs for private workspace
177	.8349	20 ff ee	jsr $eeff	                jsr makeROMServiceCall   ;
178	.834c	8c 44 02	sty $0244	                sty oshwm                    ; Set OSHWM - default PAGE
179	.834f	7a		ply		                ply                          ; Get top of shared high workspace
180	.8350	a2 23		ldx #$23	                ldx #romServiceCallTopOfHAZELWorkspace ; Tell ROMs top of shared high workspace
181	.8352	20 ff ee	jsr $eeff	                jsr makeROMServiceCall   ;
182	.8355					L82FC:
183	.8355	a2 0b		ldx #$0b	                ldx #size(defaultFsInfoBlocks)
184	.8357					L82FE:
185	.8357	bd b4 83	lda $83b4,x	                lda defaultFsInfoBlocks-1,x                ; Copy initial FS info blocks for CFS, TAPE, ROM
186	.835a	9d 05 df	sta $df05,x	                sta hazel.fsInfoBlocks-1,x
187	.835d	ca		dex		                dex
188	.835e	d0 f7		bne $8357	                bne L82FE
189	.8360	64 f2		stz $f2		                stz $F2                      ; &F2/3=>FS Info Blocks
190	.8362	a9 df		lda #$df	                lda #>hazel.fsInfoBlocks
191	.8364	85 f3		sta $f3		                sta $F3
192						                ; Y=>end of FS Info Blocks
193	.8366	a0 11		ldy #$11	                ldy #<hazel.fsInfoBlocks+size(defaultFsInfoBlocks)
194	.8368	a2 25		ldx #$25	                ldx #romServiceCallRequestFSInfo
195	.836a	20 ff ee	jsr $eeff	                jsr makeROMServiceCall   ;
196	.836d	a9 00		lda #$00	                lda #$00                     ; Terminate FS Info blocks
197	.836f	91 f2		sta ($f2),y	                sta ($F2),y

199	.8371	ad 57 02	lda $0257	                lda spoolFileHandle ; Save Spool handle and disable Spooling
200	.8374	48		pha		                pha
201	.8375	9c 57 02	stz $0257	                stz spoolFileHandle
202	.8378	a2 fe		ldx #$fe	                ldx #romServiceCallTubeSystemPostInitialisation
206	.837a	ac 7a 02	ldy $027a	                ldy tubePresenceUnused
208	.837d	20 ff ee	jsr $eeff	                jsr makeROMServiceCall   ; Tube PostInit
209	.8380	2d 67 02	and $0267	                and startupMessageSuppressionStatus
210	.8383	10 14		bpl $8399	                bpl L8340

212						                ; use +$ff rather than -1 to avoid 64tass warning.
213						                ; Only the LSB is used.
214	.8385	a0 0f		ldy #$0f	                ldy #((startupMessages.acornMOS-(startupMessages&$ff00))+$ff)&$ff
215	.8387	20 7b e7	jsr $e77b	                jsr printStartupMessage
216	.838a	ad 8d 02	lda $028d	                lda lastBREAKType            ; Skip past if Soft Break
217	.838d	f0 05		beq $8394	                beq L833B
218	.838f	a0 1a		ldy #$1a	                ldy #((startupMessages.beep-(startupMessages&$ff00))-1)&$ff
219	.8391	20 7b e7	jsr $e77b	                jsr printStartupMessage
220	.8394					L833B:
221	.8394	a0 1f		ldy #$1f	                ldy #((startupMessages.twoNewlines-(startupMessages&$ff00))-1)&$ff
222	.8396	20 7b e7	jsr $e77b	                jsr printStartupMessage
223	.8399					L8340:
224	.8399	68		pla		                pla                          ; Restore Spool handle
225	.839a	8d 57 02	sta $0257	                sta spoolFileHandle
226	.839d	4c 35 e4	jmp $e435	                jmp LE40E                ;

228						;-------------------------------------------------------------------------

231	.83a0					L8363:
232	.83a0	a9 0f		lda #$0f	                lda #$0f
233	.83a2					L8365:
234	.83a2	3a		dec a		                dec a
235	.83a3	8d 40 fe	sta $fe40	                sta $fe40
236	.83a6	c9 09		cmp #$09	                cmp #9
237	.83a8	b0 f8		bcs $83a2	                bcs L8365
240	.83aa					clearAllSoundChannelBuffers:
241	.83aa	a2 08		ldx #$08	                ldx #8
242	.83ac					L836F:
243	.83ac	ca		dex		                dex
244	.83ad	20 f9 f4	jsr $f4f9	                jsr clearSoundChannelBuffer
245	.83b0	e0 04		cpx #$04	                cpx #4
246	.83b2	d0 f8		bne $83ac	                bne L836F
247	.83b4	60		rts		                rts

250						;-------------------------------------------------------------------------

252						; Default FS Info Blocks
253						; ======================
254	.83b5					defaultFsInfoBlocks: .block
265	>83b5	52 4f 4d 20 20 20 20 20		                .text "ROM     "
266	>83bd	03				                .byte $03
267	>83be	03				                .byte $03
268	>83bf	03				                .byte $03
269						                .endblock

271						;-------------------------------------------------------------------------
272						;
273						; MOS command table

275						mos_command .macro name,routine,byte1,byte2
292						                .endm

294	.83c0					mosCommandTable:
276						                ; Name of command, compared case-insensitively.
277	>83c0	43 41 54			                .text "CAT"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>83c3	f2				                .byte >callFSCV
133	>83c4	9b				                .byte <callFSCV

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>83c5	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>83c6	05				                .byte $05
276						                ; Name of command, compared case-insensitively.
277	>83c7	41 44 46 53			                .text "ADFS"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>83cb	85				                .byte >passStarCommandThrough
133	>83cc	ff				                .byte <passStarCommandThrough

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>83cd	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>83ce	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>83cf	41 50 50 45 4e 44		                .text "APPEND"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>83d5	92				                .byte >starAPPEND
133	>83d6	1e				                .byte <starAPPEND

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>83d7	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>83d8	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>83d9	42 41 53 49 43			                .text "BASIC"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>83de	85				                .byte >starBASIC
133	>83df	f5				                .byte <starBASIC

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>83e0	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>83e1	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>83e2	42 55 49 4c 44			                .text "BUILD"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>83e7	92				                .byte >starBUILD
133	>83e8	19				                .byte <starBUILD

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>83e9	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>83ea	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>83eb	43 4c 4f 53 45			                .text "CLOSE"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>83f0	96				                .byte >starCLOSE
133	>83f1	7f				                .byte <starCLOSE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>83f2	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>83f3	ff				                .byte $FF
276						                ; Name of command, compared case-insensitively.
277	>83f4	43 4f 4e 46 49 47 55 52		                .text "CONFIGURE"
	>83fc	45

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>83fd	88				                .byte >starCONFIGUREOrStarSTATUS
133	>83fe	93				                .byte <starCONFIGUREOrStarSTATUS

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>83ff	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8400	80				                .byte $80
276						                ; Name of command, compared case-insensitively.
277	>8401	43 4f 44 45			                .text "CODE"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8405	96				                .byte >starCommandThroughOSBYTE
133	>8406	00				                .byte <starCommandThroughOSBYTE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8407	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8408	88				                .byte $88
276						                ; Name of command, compared case-insensitively.
277	>8409	43 52 45 41 54 45		                .text "CREATE"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>840f	95				                .byte >starCommandThroughOSFILE
133	>8410	31				                .byte <starCommandThroughOSFILE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8411	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8412	07				                .byte $07
276						                ; Name of command, compared case-insensitively.
277	>8413	44 55 4d 50			                .text "DUMP"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8417	91				                .byte >starDUMP
133	>8418	4c				                .byte <starDUMP

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8419	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>841a	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>841b	44 45 4c 45 54 45		                .text "DELETE"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8421	96				                .byte >starDELETE
133	>8422	95				                .byte <starDELETE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8423	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8424	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>8425	45 58 45 43			                .text "EXEC"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8429	aa				                .byte >starEXEC
133	>842a	00				                .byte <starEXEC

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>842b	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>842c	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>842d	45 58				                .text "EX"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>842f	f2				                .byte >callFSCV
133	>8430	9b				                .byte <callFSCV

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8431	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8432	09				                .byte $09
276						                ; Name of command, compared case-insensitively.
277	>8433	46 58				                .text "FX"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8435	95				                .byte >starFX
133	>8436	fa				                .byte <starFX

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8437	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8438	ff				                .byte $FF
276						                ; Name of command, compared case-insensitively.
277	>8439	47 4f 49 4f			                .text "GOIO"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>843d	95				                .byte >starGOIO
133	>843e	16				                .byte <starGOIO

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>843f	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8440	ff				                .byte $FF
276						                ; Name of command, compared case-insensitively.
277	>8441	47 4f				                .text "GO"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8443	95				                .byte >starGO
133	>8444	0e				                .byte <starGO

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8445	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8446	ff				                .byte $FF
276						                ; Name of command, compared case-insensitively.
277	>8447	48 45 4c 50			                .text "HELP"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>844b	86				                .byte >starHELP
133	>844c	1a				                .byte <starHELP

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>844d	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>844e	ff				                .byte $FF
276						                ; Name of command, compared case-insensitively.
277	>844f	49 4e 46 4f			                .text "INFO"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8453	f2				                .byte >callFSCV
133	>8454	9b				                .byte <callFSCV

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8455	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8456	0a				                .byte $0A
276						                ; Name of command, compared case-insensitively.
277	>8457	49 47 4e 4f 52 45		                .text "IGNORE"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>845d	96				                .byte >starIGNORE
133	>845e	8a				                .byte <starIGNORE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>845f	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8460	ff				                .byte $FF
276						                ; Name of command, compared case-insensitively.
277	>8461	49 4e 53 45 52 54		                .text "INSERT"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8467	87				                .byte >starINSERT
133	>8468	87				                .byte <starINSERT

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8469	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>846a	ff				                .byte $FF
276						                ; Name of command, compared case-insensitively.
277	>846b	4b 45 59			                .text "KEY"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>846e	97				                .byte >starKEY
133	>846f	13				                .byte <starKEY

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8470	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8471	ff				                .byte $FF
276						                ; Name of command, compared case-insensitively.
277	>8472	4c 4f 41 44			                .text "LOAD"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8476	95				                .byte >starLOAD
133	>8477	2f				                .byte <starLOAD

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8478	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8479	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>847a	4c 49 53 54			                .text "LIST"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>847e	90				                .byte >starLIST
133	>847f	ca				                .byte <starLIST

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8480	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8481	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>8482	4c 49 4e 45			                .text "LINE"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8486	ec				                .byte >callUSERV
133	>8487	de				                .byte <callUSERV

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8488	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8489	01				                .byte $01
276						                ; Name of command, compared case-insensitively.
277	>848a	4c 49 42 46 53			                .text "LIBFS"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>848f	e9				                .byte >starLIBFS
133	>8490	26				                .byte <starLIBFS

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8491	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8492	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>8493	4d 4f 54 4f 52			                .text motorCommandString

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8498	ff				                .byte >rtsFFAA
133	>8499	aa				                .byte <rtsFFAA

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>849a	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>849b	89				                .byte $89
276						                ; Name of command, compared case-insensitively.
277	>849c	4d 4f 56 45			                .text "MOVE"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>84a0	92				                .byte >starMOVE
133	>84a1	cb				                .byte <starMOVE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>84a2	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>84a3	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>84a4	4f 50 54			                .text "OPT"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>84a7	96				                .byte >starCommandThroughOSBYTE
133	>84a8	00				                .byte <starCommandThroughOSBYTE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>84a9	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>84aa	8b				                .byte $8B
276						                ; Name of command, compared case-insensitively.
277	>84ab	50 52 49 4e 54			                .text "PRINT"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>84b0	90				                .byte >starPRINT
133	>84b1	c3				                .byte <starPRINT

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>84b2	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>84b3	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>84b4	52 55 4e			                .text "RUN"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>84b7	f2				                .byte >callFSCV
133	>84b8	9b				                .byte <callFSCV

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>84b9	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>84ba	04				                .byte $04
276						                ; Name of command, compared case-insensitively.
277	>84bb	52 45 4d 4f 56 45		                .text "REMOVE"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>84c1	95				                .byte >starREMOVE
133	>84c2	8a				                .byte <starREMOVE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>84c3	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>84c4	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>84c5	52 4f 4d			                .text "ROM"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>84c8	96				                .byte >starCommandThroughOSBYTE
133	>84c9	00				                .byte <starCommandThroughOSBYTE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>84ca	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>84cb	8d				                .byte $8D
276						                ; Name of command, compared case-insensitively.
277	>84cc	52 4f 4d 53			                .text "ROMS"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>84d0	86				                .byte >starROMS
133	>84d1	f6				                .byte <starROMS

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>84d2	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>84d3	ff				                .byte $FF
276						                ; Name of command, compared case-insensitively.
277	>84d4	53 41 56 45			                .text "SAVE"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>84d8	95				                .byte >starCommandThroughOSFILE
133	>84d9	31				                .byte <starCommandThroughOSFILE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>84da	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>84db	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>84dc	53 48 41 44 4f 57		                .text "SHADOW"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>84e2	96				                .byte >starSHADOW
133	>84e3	38				                .byte <starSHADOW

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>84e4	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>84e5	ff				                .byte $FF
276						                ; Name of command, compared case-insensitively.
277	>84e6	53 48 4f 57			                .text "SHOW"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>84ea	96				                .byte >starSHOW
133	>84eb	9e				                .byte <starSHOW

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>84ec	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>84ed	ff				                .byte $FF
276						                ; Name of command, compared case-insensitively.
277	>84ee	53 48 55 54			                .text "SHUT"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>84f2	f4				                .byte >starSHUT
133	>84f3	50				                .byte <starSHUT

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>84f4	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>84f5	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>84f6	53 50 4f 4f 4c			                .text "SPOOL"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>84fb	96				                .byte >starSPOOL
133	>84fc	4c				                .byte <starSPOOL

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>84fd	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>84fe	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>84ff	53 50 4f 4f 4c 4f 4e		                .text "SPOOLON"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8506	96				                .byte >starSPOOLON
133	>8507	35				                .byte <starSPOOLON

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8508	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8509	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>850a	53 52 44 41 54 41		                .text "SRDATA"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8510	8c				                .byte >starSRDATAOrStarSRROM
133	>8511	ea				                .byte <starSRDATAOrStarSRROM

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8512	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8513	a0				                .byte $a0
276						                ; Name of command, compared case-insensitively.
277	>8514	53 52 4c 4f 41 44		                .text "SRLOAD"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>851a	8e				                .byte >starSRLOADOrStarSRSAVE
133	>851b	07				                .byte <starSRLOADOrStarSRSAVE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>851c	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>851d	60				                .byte $60
276						                ; Name of command, compared case-insensitively.
277	>851e	53 52 52 45 41 44		                .text "SRREAD"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8524	8d				                .byte >starSRREADOrStarSRWRITE
133	>8525	bc				                .byte <starSRREADOrStarSRWRITE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8526	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8527	a0				                .byte $a0
276						                ; Name of command, compared case-insensitively.
277	>8528	53 52 52 4f 4d			                .text "SRROM"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>852d	8c				                .byte >starSRDATAOrStarSRROM
133	>852e	ea				                .byte <starSRDATAOrStarSRROM

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>852f	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8530	80				                .byte $80
276						                ; Name of command, compared case-insensitively.
277	>8531	53 52 53 41 56 45		                .text "SRSAVE"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8537	8e				                .byte >starSRLOADOrStarSRSAVE
133	>8538	07				                .byte <starSRLOADOrStarSRSAVE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8539	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>853a	20				                .byte $20
276						                ; Name of command, compared case-insensitively.
277	>853b	53 52 57 52 49 54 45		                .text "SRWRITE"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8542	8d				                .byte >starSRREADOrStarSRWRITE
133	>8543	bc				                .byte <starSRREADOrStarSRWRITE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8544	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8545	e0				                .byte $e0
276						                ; Name of command, compared case-insensitively.
277	>8546	53 54 41 54 55 53		                .text "STATUS"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>854c	88				                .byte >starCONFIGUREOrStarSTATUS
133	>854d	93				                .byte <starCONFIGUREOrStarSTATUS

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>854e	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>854f	c0				                .byte $c0
276						                ; Name of command, compared case-insensitively.
277	>8550	54 41 50 45			                .text tapeCommandString

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8554	ff				                .byte >rtsFFAA
133	>8555	aa				                .byte <rtsFFAA

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8556	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8557	8c				                .byte $8C
276						                ; Name of command, compared case-insensitively.
277	>8558	54 56				                .text "TV"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>855a	96				                .byte >starCommandThroughOSBYTE
133	>855b	00				                .byte <starCommandThroughOSBYTE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>855c	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>855d	90				                .byte $90
276						                ; Name of command, compared case-insensitively.
277	>855e	54 49 4d 45			                .text "TIME"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8562	87				                .byte >starTIME
133	>8563	ac				                .byte <starTIME

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8564	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8565	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>8566	54 59 50 45			                .text "TYPE"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>856a	90				                .byte >starTYPE
133	>856b	d5				                .byte <starTYPE

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>856c	80				                .byte $80

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>856d	00				                .byte $00
276						                ; Name of command, compared case-insensitively.
277	>856e	55 4e 50 4c 55 47		                .text "UNPLUG"

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8574	87				                .byte >starUNPLUG
133	>8575	8a				                .byte <starUNPLUG

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>8576	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>8577	ff				                .byte $FF
276						                ; Name of command, compared case-insensitively.
277	>8578					                .text ""

279						                ; Address of command routine, big-endian so that the
280						                ; first byte always has bit 7 set.
132:3	>8578	f2				                .byte >callFSCV
133	>8579	9b				                .byte <callFSCV

283:5						                ; If bit 7 set, reset the tempFS flag before
284						                ; starting.
285	>857a	00				                .byte $00

287						                ; If bit 7 set, update string input buffer address
288						                ; before starting.
289						                ;
290						                ; A is set to this value on entry to the routine.
291	>857b	03				                .byte $03
370	>857c	00				                .byte $00

372						;-------------------------------------------------------------------------
373						;
374						; Get string input buffer address tail according to table byte.
375						;
376						; Entry:
377						;
378						; oscliWorkspace.tablePtr; = pointer to table byte
379						; (stringInputBufferAddress),y = pointer to input
380						;
381						; Exit:
382						;
383						; A = table byte
384						;
385						; if table byte bit 7 set: Y/X points to command line tail
386	.857d					maybeGetStringInputBufferAddress:
387	.857d	b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
388	.857f	30 0c		bmi $858d	                bmi rts84FE
389	.8581					getStringInputBufferAddressWithYOffset:
390	.8581	98		tya		                tya
391	.8582					getStringInputBufferAddressWithAOffset:
392	.8582	18		clc		                clc
393	.8583	65 f2		adc $f2		                adc stringInputBufferAddress+0
394	.8585	aa		tax		                tax
395	.8586	a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
396	.8588	90 01		bcc $858b	                bcc +
397	.858a	c8		iny		                iny
398	.858b					+
399	.858b	b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
400	.858d					rts84FE:
401	.858d	60		rts		                rts

403						; Prepare OSCLI command line
404						; ==========================
405	.858e					oscli:
406	.858e	86 f2		stx $f2		                stx stringInputBufferAddress+0
407	.8590	84 f3		sty $f3		                sty stringInputBufferAddress+1
408	.8592	ad 00 df	lda $df00	                lda hazel.currentFS
409	.8595	20 c0 fa	jsr $fac0	                jsr selectFS
410	.8598	a9 08		lda #$08	                lda #fscStarCommand
411	.859a	20 9b f2	jsr $f29b	                jsr callFSCV
412	.859d	a0 ff		ldy #$ff	                ldy #$FF
413	.859f					L8510:
414	.859f	20 bd f3	jsr $f3bd	                jsr incAndSkipSpaces
415	.85a2	f0 e9		beq $858d	                beq rts84FE
416	.85a4	c9 2a		cmp #$2a	                cmp #'*'
417	.85a6	f0 f7		beq $859f	                beq L8510
418	.85a8	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
419	.85ab	f0 e0		beq $858d	                beq rts84FE
420	.85ad	c9 7c		cmp #$7c	                cmp #'|'
421	.85af	f0 dc		beq $858d	                beq rts84FE
422	.85b1	9c c6 df	stz $dfc6	                stz hazel.tempFSFlag
423	.85b4	c9 2d		cmp #$2d	                cmp #'-'
424	.85b6	d0 0c		bne $85c4	                bne L8535
425	.85b8	20 19 fa	jsr $fa19	                jsr parseFileNameFS
426	.85bb	20 c0 fa	jsr $fac0	                jsr selectFS
427	.85be	38		sec		                sec
428	.85bf	6e c6 df	ror $dfc6	                ror hazel.tempFSFlag
429	.85c2	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
430	.85c4					L8535:
431	.85c4	c9 2f		cmp #$2f	                cmp #'/'
432	.85c6	d0 09		bne $85d1	                bne L8542
433	.85c8	c8		iny		                iny
434	.85c9	20 81 85	jsr $8581	                jsr getStringInputBufferAddressWithYOffset
435	.85cc	a9 02		lda #$02	                lda #fscStarSlash
436	.85ce	4c 9b f2	jmp $f29b	                jmp callFSCV

438	.85d1					L8542:
442	.85d1	a9 c0		lda #$c0	                lda #<mosCommandTable
443	.85d3	85 b0		sta $b0		                sta oscliWorkspace.tablePtr+0
444	.85d5	a9 83		lda #$83	                lda #>mosCommandTable
445	.85d7	85 b1		sta $b1		                sta oscliWorkspace.tablePtr+1
449	.85d9	b8		clv		                clv
450	.85da	20 cc 8a	jsr $8acc	                jsr findCommand
451	.85dd	90 20		bcc $85ff	                bcc passStarCommandThrough

489	.85df					L8585:
490	.85df	48		pha		                pha
491	.85e0	20 0b 8b	jsr $8b0b	                jsr fetchCommandTableByte
492	.85e3	48		pha		                pha
493	.85e4	20 0b 8b	jsr $8b0b	                jsr fetchCommandTableByte
494	.85e7	30 03		bmi $85ec	                bmi L8592
495	.85e9	9c c6 df	stz $dfc6	                stz hazel.tempFSFlag
496	.85ec					L8592:
497	.85ec	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
498	.85ef	18		clc		                clc
499	.85f0	08		php		                php
500	.85f1	20 7d 85	jsr $857d	                jsr maybeGetStringInputBufferAddress
501	.85f4	40		rti		                rti

521						;-------------------------------------------------------------------------

523						; *BASIC
524						; ======
525	.85f5					starBASIC:
526	.85f5	ae 4b 02	ldx $024b	                ldx basicROMNumber           ; Get BASIC ROM number
527	.85f8	30 05		bmi $85ff	                bmi passStarCommandThrough ; If no BASIC ROM, jump to pass to ROMs and filing system
534	.85fa	a9 8e		lda #$8e	                lda #$8e
535	.85fc	4c f4 ff	jmp $fff4	                jmp OSBYTE

538						;-------------------------------------------------------------------------

540						; *ADFS - pass straight to ROMs/Filing System
541						; ===========================================
542	.85ff					passStarCommandThrough:
543	.85ff	2c c6 df	bit $dfc6	                bit hazel.tempFSFlag      ; Check filing system flag
544	.8602	30 0c		bmi $8610	                bmi L85C0                    ; If ... skip ROM service call
545	.8604	9c c6 df	stz $dfc6	                stz hazel.tempFSFlag      ; Clear filing system flag
546	.8607	a4 e6		ldy $e6		                ldy $E6
547	.8609	a2 04		ldx #$04	                ldx #romServiceCallUnrecognisedCommand
548	.860b	20 90 ee	jsr $ee90	                jsr osbyte8F    ; Service call 4 - Unknown command
550	.860e	f0 4d		beq $865d	                beq parseDone
554	.8610					L85C0:
555	.8610	a5 e6		lda $e6		                lda $E6
556	.8612	20 82 85	jsr $8582	                jsr getStringInputBufferAddressWithAOffset
557	.8615	a9 03		lda #$03	                lda #$03
558	.8617	4c 9b f2	jmp $f29b	                jmp callFSCV ; Pass to FSCV,3 - Unknown command

560	.861a					starHELP:
561	.861a	a2 09		ldx #$09	                ldx #romServiceCallHelp      ;
562	.861c	a5 d0		lda $d0		                lda STATE                    ;
563	.861e	48		pha		                pha                          ;save STATE
564	.861f	a9 0e		lda #$0e	                lda #14
565	.8621	20 ee ff	jsr $ffee	                jsr OSWRCH                   ; paged mode ON
566	.8624	20 ff ee	jsr $eeff	                jsr makeROMServiceCall   ;
567	.8627	a2 18		ldx #$18	                ldx #romServiceCallReserved  ;???
568	.8629	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
569	.862c	68		pla		                pla                          ;restore STATE
570	.862d	89 04		bit #$04	                bit #STATE.isPagedScrolling  ;was paged mode on originally?
571	.862f	d0 2c		bne $865d	                bne parseDone   ;taken if paged mode was originally on
572						                                ;(branch target is an arbitrary nearby
573						                                ;RTS)
574	.8631	a9 0f		lda #$0f	                lda #15         ;restore non-paged mode
575	.8633	4c ee ff	jmp $ffee	                jmp OSWRCH

577						;-------------------------------------------------------------------------
578						;
579						; Read a byte value (0-255) from a string. If the number has a '&'
580						; prefix, interpret it as hex.
581						;
582						; entry:
583						;
584						; (stringInputBufferAddress),y - string
585						;
586						; exit:
587						;
588						; X = result
589						; ?$e6 = result
590						; C=0 if error
591						; Z=1 if CR encountered
592						;
593	.8636					parseNumberFromString:
594	.8636	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
595	.8639	c9 26		cmp #$26	                cmp #'&'                     ; hex value incoming?
596	.863b	d0 21		bne $865e	                bne parseDecimal             ; taken if not hex value
597	.863d					parseHex:
598	.863d	c8		iny		                iny                          ; skip '&'
599	.863e	20 98 86	jsr $8698	                jsr readHexDigit             ; read first hex digit
600	.8641	90 53		bcc $8696	                bcc errorReadingString
601	.8643	85 e6		sta $e6		                sta $E6                      ; save first hex digit
602	.8645	20 98 86	jsr $8698	                jsr readHexDigit             ; read second hex digih
603	.8648	90 0e		bcc $8658	                bcc parsedValue         ; taken if not hex digit
604						                ; The first digit read was actually the high nybble,
605						                ; and the current digit read is therefore the low
606						                ; nybble.
607						                ;
608						                ; Shift saved digit 4 bits left.
609	.864a	a2 04		ldx #$04	                ldx #$04
610	.864c					-
611	.864c	06 e6		asl $e6		                asl $E6
612	.864e	ca		dex		                dex
613	.864f	d0 fb		bne $864c	                bne -
614	.8651	04 e6		tsb $e6		                tsb $E6                      ; insert low nybble
615	.8653	20 98 86	jsr $8698	                jsr readHexDigit             ; read third hex digit
616	.8656	b0 29		bcs $8681	                bcs errorReadingString2 ; 3+-digit hex values are not valid
617	.8658					parsedValue:
618	.8658	a6 e6		ldx $e6		                ldx $E6
619	.865a	c9 0d		cmp #$0d	                cmp #$0D
620	.865c	38		sec		                sec
621	.865d					parseDone:
622	.865d	60		rts		                rts

624	.865e					parseDecimal:
625	.865e	20 84 86	jsr $8684	                jsr readDigitFromString
626	.8661	90 33		bcc $8696	                bcc errorReadingString      ;branch taken if not digit
627	.8663					parseDecimalDigit:
628	.8663	85 e6		sta $e6		                sta $E6                     ;save current value
629	.8665	20 83 86	jsr $8683	                jsr readNextDigitFromString
630	.8668	90 ee		bcc $8658	                bcc parsedValue ;branch taken if not digit, meaning number
631						                                     ;parsed successfully
632	.866a	aa		tax		                tax                         ;X=digit

634						                ; calculate (value*4+value)*2 - i.e., value*10. Carry
635						                ; at any point indicates the value was greater than
636						                ; 255, and therefore an error.
637	.866b	a5 e6		lda $e6		                lda $E6                     ;value
638	.866d	0a		asl a		                asl a                       ;value*2
639	.866e	b0 26		bcs $8696	                bcs errorReadingString
640	.8670	0a		asl a		                asl a                       ;value*4
641	.8671	b0 23		bcs $8696	                bcs errorReadingString
642	.8673	65 e6		adc $e6		                adc $E6                     ;value*5
643	.8675	b0 1f		bcs $8696	                bcs errorReadingString
644	.8677	0a		asl a		                asl a                       ;value*10
645	.8678	b0 1c		bcs $8696	                bcs errorReadingString
646	.867a	85 e6		sta $e6		                sta $E6                      ;save value*10
647	.867c	8a		txa		                txa                          ;A=digit
648	.867d	65 e6		adc $e6		                adc $E6                      ;value*10+digit
649	.867f	90 e2		bcc $8663	                bcc parseDecimalDigit
650	.8681					errorReadingString2:
651	.8681	18		clc		                clc
652	.8682	60		rts		                rts

654	.8683					readNextDigitFromString:
655	.8683	c8		iny		                iny

657						; check if current string input byte is a digit.
658						;
659						; exit: C=1 if digit; C=0 if not digit
660	.8684					readDigitFromString:
661	.8684	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
662	.8686	c9 3a		cmp #$3a	                cmp #'9'+1
663	.8688	b0 0c		bcs $8696	                bcs errorReadingString       ;taken if not ASCII decimal digit
664	.868a	c9 30		cmp #$30	                cmp #'0'
665	.868c	90 08		bcc $8696	                bcc errorReadingString       ;taken if not ASCII decimal digit
666	.868e	29 0f		and #$0f	                and #$0F         ;convert ASCII decimaldigit to number
667	.8690	60		rts		                rts

669	.8691					L8641:
670	.8691	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
672	.8694	c9 0d		cmp #$0d	                cmp #$0D
674	.8696					errorReadingString:
675	.8696	18		clc		                clc
676	.8697	60		rts		                rts

678						;-------------------------------------------------------------------------
679						;
680						; Read a hex digit from a string
681						;
682						; entry:
683						;
684						; (stringInputBufferAddress),y = next byte to read
685						;
686						; exit:
687						;
688						; C=1 if ok: A = digit read
689						;
690						; C=0 if error: A = value read, Z=1 if CR encountered
691						;
692	.8698					readHexDigit:
693	.8698	20 84 86	jsr $8684	                jsr readDigitFromString
694	.869b	b0 0d		bcs $86aa	                bcs +                        ; branch taken if digit
695	.869d	29 df		and #$df	                and #$DF                     ; convert to upper case
696	.869f	c9 47		cmp #$47	                cmp #'F'+1
697	.86a1	b0 ee		bcs $8691	                bcs L8641    ; branch taken if not ASCII A-F hex digit
698	.86a3	c9 41		cmp #$41	                cmp #'A'
699	.86a5	90 ea		bcc $8691	                bcc L8641     ;branch taken if not ASCII A-F hex digit
700						                ; convert ASCII A-F hex digit to number.
701	.86a7	49 48		eor #$48	                eor #$48
702	.86a9	1a		inc a		                inc a
703	.86aa					+
704	.86aa	c8		iny		                iny
705	.86ab	60		rts		                rts

707						;-------------------------------------------------------------------------
708						;
709						; OSWORD 0 control block for *commands
710						; ====================================
711	.86ac					commandLineUIOSWORD0Parameters:
712	>86ac	00 dc				                .word hazel.commandLine      ; address
713	>86ae	f0				                .byte $F0			; max # chars
714	>86af	20				                .byte $20			; min ASCII char
715	>86b0	7e				                .byte $7E			; max ASCII char

717						;-------------------------------------------------------------------------

719	.86b1					commandLineUI:
720	.86b1	a9 dd		lda #$dd	                lda #<commandLineUIBRKHandler
721	.86b3	8d 02 02	sta $0202	                sta BRKV+0
722	.86b6	a9 86		lda #$86	                lda #>commandLineUIBRKHandler
723	.86b8	8d 03 02	sta $0203	                sta BRKV+1
724	.86bb	a9 1f		lda #$1f	                lda #$10|terminalROM         ;????
725	.86bd	8d 8c 02	sta $028c	                sta currentLanguageROM
726	.86c0					commandLineUILoop:
727	.86c0	a2 ff		ldx #$ff	                ldx #$FF
728	.86c2	9a		txs		                txs
729	.86c3	58		cli		                cli
730	.86c4	20 47 ee	jsr $ee47	                jsr selectHAZEL
731	.86c7	a9 2a		lda #$2a	                lda #'*'
732	.86c9	20 ee ff	jsr $ffee	                jsr OSWRCH
733	.86cc	20 ed 86	jsr $86ed	                jsr readCommandLine
734	.86cf	90 03		bcc $86d4	                bcc +                     ;taken if ESCAPE not pressed
735	.86d1	4c d3 ac	jmp $acd3	                jmp escapeError
736	.86d4					+
737	.86d4	a2 00		ldx #$00	                ldx #<hazel.commandLine
738	.86d6	a0 dc		ldy #$dc	                ldy #>hazel.commandLine
739	.86d8	20 f7 ff	jsr $fff7	                jsr OSCLI
740	.86db	80 e3		bra $86c0	                bra commandLineUILoop

742	.86dd					commandLineUIBRKHandler:
743	.86dd	20 e7 ff	jsr $ffe7	                jsr OSNEWL
744	.86e0	a0 00		ldy #$00	                ldy #$00
745	.86e2	20 81 e7	jsr $e781	                jsr printBRKMessage
746	.86e5	20 e7 ff	jsr $ffe7	                jsr OSNEWL
747	.86e8	80 c7		bra $86b1	                bra commandLineUI

749	.86ea					badCommandError869A:
750	.86ea	4c 60 fb	jmp $fb60	                jmp badCommandError

752	.86ed					readCommandLine:
753	.86ed	a9 00		lda #$00	                lda #$00
754	.86ef	a2 ac		ldx #$ac	                ldx #<commandLineUIOSWORD0Parameters
755	.86f1	a0 86		ldy #$86	                ldy #>commandLineUIOSWORD0Parameters
756	.86f3	4c f1 ff	jmp $fff1	                jmp OSWORD

758						;-------------------------------------------------------------------------
759						;
760						; *ROMS [MasRef C.5-10]
761						;
762	.86f6					starROMS:
763	.86f6	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
764	.86f9	d0 ef		bne $86ea	                bne badCommandError869A
765	.86fb	a0 0f		ldy #$0f	                ldy #$0F
766	.86fd					printROMsLoop:
775	.86fd	98		tya		                tya
776	.86fe	aa		tax		                tax
777	.86ff	5a		phy		                phy
778	.8700	20 bd f8	jsr $f8bd	                jsr isBankROM
779	.8703	b0 0a		bcs $870f	                bcs L86D2
780	.8705	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
781	>8708	52 4f 4d 20 00			                .text "ROM ",0
782	.870d	80 08		bra $8717	                bra L86DA
783	.870f					L86D2:
784	.870f	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
785	>8712	52 41 4d 20 00			                .text "RAM ",0
786	.8717					L86DA:
787	.8717	7a		ply		                ply
788	.8718	98		tya		                tya
790	.8719	20 b5 ac	jsr $acb5	                jsr printHexDigit            ;print ROM slot
791	.871c	20 f3 a3	jsr $a3f3	                jsr printSpace
792	.871f	a9 09		lda #$09	                lda #<sidewaysROMName
793	.8721	85 f6		sta $f6		                sta $F6
794	.8723	a9 80		lda #$80	                lda #>sidewaysROMName
795	.8725	85 f7		sta $f7		                sta $F7
799	.8727	20 a0 e5	jsr $e5a0	                jsr isROMValidThenSelectTerminalROM
803	.872a	90 49		bcc $8775	                bcc invalidROM
805	.872c	b9 a1 02	lda $02a1,y	                lda romInformationTable,y
806	.872f	3a		dec a		                dec a
807	.8730	f0 43		beq $8775	                beq invalidROM
809	.8732					printROMNameLoop:
810	.8732	20 d9 f4	jsr $f4d9	                jsr osrdscEntryPoint     ;read name byte
811	.8735	c9 20		cmp #$20	                cmp #' '
812	.8737	90 0f		bcc $8748	                bcc printROMVersion ;taken if non-printable char, including the terminating 0
813	.8739	c9 7f		cmp #$7f	                cmp #127
814	.873b	b0 38		bcs $8775	                bcs invalidROM  ;taken if bad (bit 7 set) char in name
815	.873d	20 ee ff	jsr $ffee	                jsr OSWRCH
816	.8740	e6 f6		inc $f6		                inc $F6
817	.8742	24 f6		bit $f6		                bit $F6
818	.8744	50 ec		bvc $8732	                bvc printROMNameLoop         ;taken if address<$8040
819	.8746	80 2d		bra $8775	                bra invalidROM               ;taken if name too long

821	.8748					printROMVersion:
822	.8748	aa		tax		                tax               ;Z=1 if final char was the expected 0
823	.8749	d0 2a		bne $8775	                bne invalidROM    ;taken if bad (control) char in name
824	.874b	a9 08		lda #$08	                lda #<sidewaysROMVersion
825	.874d	85 f6		sta $f6		                sta $F6
826	.874f	a9 80		lda #$80	                lda #>sidewaysROMVersion
827	.8751	85 f7		sta $f7		                sta $F7
828	.8753	20 d9 f4	jsr $f4d9	                jsr osrdscEntryPoint
829	.8756	20 a7 ac	jsr $aca7	                jsr printSpaceThenPrintHexByte
830	.8759					printInsertionStatus:
831	.8759	5a		phy		                phy
838	.875a	20 7c 87	jsr $877c	                jsr L873F
840	.875d	d0 0e		bne $876d	                bne +
841	.875f	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
842	>8762	20 75 6e 70 6c 75 67 67		                .text " unplugged",0
	>876a	65 64 00
843	.876d					+
844	.876d	7a		ply		                ply
845	.876e	20 e7 ff	jsr $ffe7	                jsr OSNEWL
846	.8771	88		dey		                dey
847	.8772	10 89		bpl $86fd	                bpl printROMsLoop
848	.8774	60		rts		                rts

850	.8775					invalidROM:
851	.8775	a9 3f		lda #$3f	                lda #'?'
852	.8777	20 ee ff	jsr $ffee	                jsr OSWRCH
853	.877a	80 dd		bra $8759	                bra printInsertionStatus

855						;-------------------------------------------------------------------------

858	.877c					L873F:
859	.877c	20 e6 ea	jsr $eae6	                jsr getROMInsertedFlagRTCAddressAndMask
860	.877f	85 b0		sta $b0		                sta $b0
861	.8781	20 3a 9e	jsr $9e3a	                jsr readRTCByte
862	.8784	25 b0		and $b0		                and $b0
863	.8786	60		rts		                rts

866						;-------------------------------------------------------------------------
867						;
868						; *INSERT [MasRef C.5-8]
869						;
870	.8787					starINSERT:
871	.8787	38		sec		                sec
872	.8788	80 01		bra $878b	                bra starINSERTOrStarUNPLUG

874						;-------------------------------------------------------------------------
875						;
876						; *UNPLUG [MasRef C.5-13]
877						;
878	.878a					starUNPLUG:
879	.878a	18		clc		                clc
880	.878b					starINSERTOrStarUNPLUG:
881	.878b	08		php		                php
882	.878c	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
884	.878f	20 90 89	jsr $8990	                jsr L8953
888	.8792	a8		tay		                tay                          ;Y=ROM number
889	.8793	20 e6 ea	jsr $eae6	                jsr getROMInsertedFlagRTCAddressAndMask
890	.8796	48		pha		                pha
891	.8797	20 3a 9e	jsr $9e3a	                jsr readRTCByte
892	.879a	84 b0		sty $b0		                sty starROMSWorkspace.insertedFlagMask
893	.879c	68		pla		                pla
894	.879d	28		plp		                plp
895	.879e	90 04		bcc $87a4	                bcc unplug                   ;taken if it's *UNPLUG

897						                ; it's *INSERT
898	.87a0	05 b0		ora $b0		                ora starROMSWorkspace.insertedFlagMask
899	.87a2	80 04		bra $87a8	                bra +
900	.87a4					unplug:
901	.87a4	49 ff		eor #$ff	                eor #$FF
902	.87a6	25 b0		and $b0		                and starROMSWorkspace.insertedFlagMask
903	.87a8					+
904	.87a8	a8		tay		                tay
905	.87a9	4c 73 9e	jmp $9e73	                jmp writeRTCByte

907						;-------------------------------------------------------------------------
908						;
909						; *TIME [MasRef C.5-12]
910						;
911	.87ac					starTIME:
912	.87ac	9c 00 dc	stz $dc00	                stz hazel.commandLine
913	.87af	a2 00		ldx #$00	                ldx #<hazel.commandLine
914	.87b1	a0 dc		ldy #$dc	                ldy #>hazel.commandLine
915	.87b3	a9 0e		lda #$0e	                lda #$0E
916	.87b5	20 f1 ff	jsr $fff1	                jsr OSWORD
917	.87b8	a2 e7		ldx #$e7	                ldx #256-size(ClockStringFormat)
918	.87ba					L8752:
919	.87ba	bd 19 db	lda $db19,x	                lda hazel.commandLine-(256-size(ClockStringFormat)),x
920	.87bd	20 e3 ff	jsr $ffe3	                jsr OSASCI
921	.87c0	e8		inx		                inx
922	.87c1	d0 f7		bne $87ba	                bne L8752
923	.87c3	60		rts		                rts

925						;-------------------------------------------------------------------------

941						                .include "configure_table_driven.s65"

:7	;******  Processing file: src/configure_table_driven.s65

1						byte2: .macro value,value350
7						                .endmacro

9						                ; Metadata layout

11						                ; +0

13						                ;   7   6   5   4   3   2   1   0
14						                ; +---+---+---+---+---+---+---+---+
15						                ; |X  |V0 |MaskCount  |Value      |
16						                ; +---+---+---+---+---+---+---+---+

18						                ; X is unused - it's generally set in the configure
19						                ; table, so that the names can be terminated by a byte
20						                ; with bit 7 set.
21						                ;
22						                ; If V0 is clear, this field is actually the address
23						                ; of a routine.
24						                ;
25						                ; Value is the value for the bitfield when this option
26						                ; is in effect.
27						                ;
28						                ; MaskCount
29						                ;

31						                ; +1

33						                ;   7   6   5   4   3   2   1   0
34						                ; +---+---+---+---+---+---+---+---+
35						                ; |N1 |RTCByteIndex   |ShiftCount |
36						                ; +---+---+---+---+---+---+---+---+
37						                ;
38						                ; N1 = tested by L8ADF

40						                ; The RTC byte indexes in the table are actually
41						                ; offset.
45	=5					rtcByteIndexOffset=cmosBytesOffset+CMOSBytes.defaultROMs

48						itemWithAddress: .macro name,addr
53						                .endmacro

55						countLS0s: .function value
75						                .endfunction n

77						itemMaskInfo: .macro value
83						                .endmacro

85						itemMetadata: .macro topMask,rtcByteIndex,mask,matchValue,n1
96						                .endmacro

98						itemWithMetadata: .macro name,rtcByteIndex,mask,matchValue,n1
102						                .endmacro

104	.87c4					configureTable: .block
49	>87c4	2e				                .text "."
50	.87c5					metadata:
132:3	>87c5	89				                .byte >printConfigureOrStatusHeader-1
133	>87c6	f9				                .byte <printConfigureOrStatusHeader-1
106:7	.87c7					baud:
99	>87c7	42 61 75 64			                .text ("Baud")
100	.87cb					metadata:
86						                ; constants need some rationalisation here...

92	.87cb					info:
78	=2					shift=countLS0s(((CMOSBytes.defaults2.serialBaudRateIndexMask<<CMOSBytes.defaults2.serialBaudRateIndexShift)))
79	=7					unshiftedMask=(((CMOSBytes.defaults2.serialBaudRateIndexMask<<CMOSBytes.defaults2.serialBaudRateIndexShift)))>>shift
81	=3					maskWidth=countLS0s(~unshiftedMask)

94	>87cb	d0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>87cc	d2				                .byte (((true))?$80:$00)|(((CMOSBytes.defaults2)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
107	.87cd					boot:
99	>87cd	42 6f 6f 74			                .text ("Boot")
100	.87d1					metadata:
86						                ; constants need some rationalisation here...

92	.87d1					info:
78	=4					shift=countLS0s(((CMOSBytes.defaults3.autoBootMask)))
79	=1					unshiftedMask=(((CMOSBytes.defaults3.autoBootMask)))>>shift
81	=1					maskWidth=countLS0s(~unshiftedMask)

94	>87d1	c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
95	>87d2	5c				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>87d3	43 61 70 73			                .text ("Caps")
100	.87d7					metadata:
86						                ; constants need some rationalisation here...

92	.87d7					info:
78	=3					shift=countLS0s((((CMOSBytes.defaults1.capsLockMask|CMOSBytes.defaults1.shiftLockMask|CMOSBytes.defaults1.noLockMask))))
79	=7					unshiftedMask=((((CMOSBytes.defaults1.capsLockMask|CMOSBytes.defaults1.shiftLockMask|CMOSBytes.defaults1.noLockMask))))>>shift
81	=3					maskWidth=countLS0s(~unshiftedMask)

94	>87d7	d4				                .byte ($c0)|((info.maskWidth-1)<<3)|((4))
95	>87d8	33				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
112	.87d9					data:
99	>87d9	44 61 74 61			                .text ("Data")
100	.87dd					metadata:
86						                ; constants need some rationalisation here...

92	.87dd					info:
78	=5					shift=countLS0s(((CMOSBytes.defaults3.serialDataFormatMask<<CMOSBytes.defaults3.serialDataFormatShift)))
79	=7					unshiftedMask=(((CMOSBytes.defaults3.serialDataFormatMask<<CMOSBytes.defaults3.serialDataFormatShift)))>>shift
81	=3					maskWidth=countLS0s(~unshiftedMask)

94	>87dd	d0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>87de	dd				                .byte (((true))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>87df	44 65 6c 61 79			                .text ("Delay")
100	.87e4					metadata:
86						                ; constants need some rationalisation here...

92	.87e4					info:
78	=0					shift=countLS0s((($ff)))
79	=$ff					unshiftedMask=((($ff)))>>shift
81	=8					maskWidth=countLS0s(~unshiftedMask)

94	>87e4	f8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>87e5	b8				                .byte (((true))?$80:$00)|(((CMOSBytes.keyboardAutoRepeatDelay)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
114	.87e6					dir:
99	>87e6	44 69 72			                .text ("Dir")
100	.87e9					metadata:
86						                ; constants need some rationalisation here...

92	.87e9					info:
78	=6					shift=countLS0s(((CMOSBytes.defaults1.adfsLoadDirMask)))
79	=1					unshiftedMask=(((CMOSBytes.defaults1.adfsLoadDirMask)))>>shift
81	=1					maskWidth=countLS0s(~unshiftedMask)

94	>87e9	c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>87ea	36				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
115	=$87e8					lastDirChar=dir.metadata-1
99	>87eb	46 64 72 69 76 65		                .text ("Fdrive")
100	.87f1					metadata:
86						                ; constants need some rationalisation here...

92	.87f1					info:
78	=0					shift=countLS0s(((CMOSBytes.defaults1.fdriveMask)))
79	=7					unshiftedMask=(((CMOSBytes.defaults1.fdriveMask)))>>shift
81	=3					maskWidth=countLS0s(~unshiftedMask)

94	>87f1	d0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>87f2	b0				                .byte (((true))?$80:$00)|(((CMOSBytes.defaults1)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
121	.87f3					file:
99	>87f3	46 69 6c 65			                .text ("File")
100	.87f7					metadata:
86						                ; constants need some rationalisation here...

92	.87f7					info:
78	=0					shift=countLS0s((($f<<CMOSBytes.defaultROMs.fsShift)))
79	=$f					unshiftedMask=((($f<<CMOSBytes.defaultROMs.fsShift)))>>shift
81	=4					maskWidth=countLS0s(~unshiftedMask)

94	>87f7	d8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>87f8	80				                .byte (((true))?$80:$00)|(((CMOSBytes.defaultROMs)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
128	.87f9					ignore:
49	>87f9	49 67 6e 6f 72 65		                .text "Ignore"
50	.87ff					metadata:
132:3	>87ff	89				                .byte >handlePrinterIgnoreChar-1
133	>8800	4f				                .byte <handlePrinterIgnoreChar-1
129:7						                .if includeTubeSupport
133	.8801					lang:
99	>8801	4c 61 6e 67			                .text ("Lang")
100	.8805					metadata:
86						                ; constants need some rationalisation here...

92	.8805					info:
78	=4					shift=countLS0s((($f<<CMOSBytes.defaultROMs.languageShift)))
79	=$f					unshiftedMask=((($f<<CMOSBytes.defaultROMs.languageShift)))>>shift
81	=4					maskWidth=countLS0s(~unshiftedMask)

94	>8805	d8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>8806	84				                .byte (((true))?$80:$00)|(((CMOSBytes.defaultROMs)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>8807	4c 6f 75 64			                .text ("Loud")
100	.880b					metadata:
86						                ; constants need some rationalisation here...

92	.880b					info:
78	=1					shift=countLS0s(((CMOSBytes.defaults3.loudMask)))
79	=1					unshiftedMask=(((CMOSBytes.defaults3.loudMask)))>>shift
81	=1					maskWidth=countLS0s(~unshiftedMask)

94	>880b	c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
95	>880c	59				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
135	.880d					mode:
99	>880d	4d 6f 64 65			                .text ("Mode")
100	.8811					metadata:
86						                ; constants need some rationalisation here...

92	.8811					info:
78	=0					shift=countLS0s(((CMOSBytes.defaults0.modeMask|CMOSBytes.defaults0.shadowMask)))
79	=15					unshiftedMask=(((CMOSBytes.defaults0.modeMask|CMOSBytes.defaults0.shadowMask)))>>shift
81	=4					maskWidth=countLS0s(~unshiftedMask)

94	>8811	d8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>8812	a8				                .byte (((true))?$80:$00)|(((CMOSBytes.defaults0)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>8813	4e 6f 42 6f 6f 74		                .text ("NoBoot")
100	.8819					metadata:
86						                ; constants need some rationalisation here...

92	.8819					info:
78	=4					shift=countLS0s(((CMOSBytes.defaults3.autoBootMask)))
79	=1					unshiftedMask=(((CMOSBytes.defaults3.autoBootMask)))>>shift
81	=1					maskWidth=countLS0s(~unshiftedMask)

94	>8819	c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>881a	5c				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>881b	4e 6f 43 61 70 73		                .text ("NoCaps")
100	.8821					metadata:
86						                ; constants need some rationalisation here...

92	.8821					info:
78	=3					shift=countLS0s(((CMOSBytes.defaults1.shiftLockMask|CMOSBytes.defaults1.noLockMask|CMOSBytes.defaults1.capsLockMask)))
79	=7					unshiftedMask=(((CMOSBytes.defaults1.shiftLockMask|CMOSBytes.defaults1.noLockMask|CMOSBytes.defaults1.capsLockMask)))>>shift
81	=3					maskWidth=countLS0s(~unshiftedMask)

94	>8821	d2				                .byte ($c0)|((info.maskWidth-1)<<3)|((2))
95	>8822	33				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
138	.8823					noDir:
99	>8823	4e 6f 44 69 72			                .text ("NoDir")
100	.8828					metadata:
86						                ; constants need some rationalisation here...

92	.8828					info:
78	=6					shift=countLS0s(((CMOSBytes.defaults1.adfsLoadDirMask)))
79	=1					unshiftedMask=(((CMOSBytes.defaults1.adfsLoadDirMask)))>>shift
81	=1					maskWidth=countLS0s(~unshiftedMask)

94	>8828	c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
95	>8829	36				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
139	=$8827					lastNoDirChar:=noDir.metadata-1
99	>882a	4e 6f 53 63 72 6f 6c 6c		                .text ("NoScroll")
100	.8832					metadata:
86						                ; constants need some rationalisation here...

92	.8832					info:
78	=3					shift=countLS0s(((CMOSBytes.defaults3.protectedScrollingMask)))
79	=1					unshiftedMask=(((CMOSBytes.defaults3.protectedScrollingMask)))>>shift
81	=1					maskWidth=countLS0s(~unshiftedMask)

94	>8832	c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
95	>8833	5b				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
144	.8834					print:
99	>8834	50 72 69 6e 74			                .text ("Print")
100	.8839					metadata:
86						                ; constants need some rationalisation here...

92	.8839					info:
78	=5					shift=countLS0s(((CMOSBytes.defaults2.fx5SettingMask<<CMOSBytes.defaults2.fx5SettingShift)))
79	=7					unshiftedMask=(((CMOSBytes.defaults2.fx5SettingMask<<CMOSBytes.defaults2.fx5SettingShift)))>>shift
81	=3					maskWidth=countLS0s(~unshiftedMask)

94	>8839	d0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>883a	d5				                .byte (((true))?$80:$00)|(((CMOSBytes.defaults2)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>883b	51 75 69 65 74			                .text ("Quiet")
100	.8840					metadata:
86						                ; constants need some rationalisation here...

92	.8840					info:
78	=1					shift=countLS0s(((CMOSBytes.defaults3.loudMask)))
79	=1					unshiftedMask=(((CMOSBytes.defaults3.loudMask)))>>shift
81	=1					maskWidth=countLS0s(~unshiftedMask)

94	>8840	c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>8841	59				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>8842	52 65 70 65 61 74		                .text ("Repeat")
100	.8848					metadata:
86						                ; constants need some rationalisation here...

92	.8848					info:
78	=0					shift=countLS0s((($ff)))
79	=$ff					unshiftedMask=((($ff)))>>shift
81	=8					maskWidth=countLS0s(~unshiftedMask)

94	>8848	f8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>8849	c0				                .byte (((true))?$80:$00)|(((CMOSBytes.keyboardAutoRepeatRate)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>884a	53 63 72 6f 6c 6c		                .text ("Scroll")
100	.8850					metadata:
86						                ; constants need some rationalisation here...

92	.8850					info:
78	=3					shift=countLS0s(((CMOSBytes.defaults3.protectedScrollingMask)))
79	=1					unshiftedMask=(((CMOSBytes.defaults3.protectedScrollingMask)))>>shift
81	=1					maskWidth=countLS0s(~unshiftedMask)

94	>8850	c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>8851	5b				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults3)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
148	.8852					shCaps:
99	>8852	53 68 43 61 70 73		                .text ("ShCaps")
100	.8858					metadata:
86						                ; constants need some rationalisation here...

92	.8858					info:
78	=3					shift=countLS0s(((CMOSBytes.defaults1.shiftLockMask|CMOSBytes.defaults1.noLockMask|CMOSBytes.defaults1.capsLockMask)))
79	=7					unshiftedMask=(((CMOSBytes.defaults1.shiftLockMask|CMOSBytes.defaults1.noLockMask|CMOSBytes.defaults1.capsLockMask)))>>shift
81	=3					maskWidth=countLS0s(~unshiftedMask)

94	>8858	d1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
95	>8859	33				                .byte (((false))?$80:$00)|(((CMOSBytes.defaults1)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
149	=$8853					lastShChar=shCaps+1
99	>885a	50 72 6f 70 6f 72 74 69		                .text ("Proportional")
	>8862	6f 6e 61 6c
100	.8866					metadata:
86						                ; constants need some rationalisation here...

92	.8866					info:
78	=5					shift=countLS0s(((CMOSBytes.joystick.isSwitchedMask)))
79	=1					unshiftedMask=(((CMOSBytes.joystick.isSwitchedMask)))>>shift
81	=1					maskWidth=countLS0s(~unshiftedMask)

94	>8866	c0				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>8867	6d				                .byte (((false))?$80:$00)|(((CMOSBytes.joystick)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>8868	53 77 69 74 63 68 65 64		                .text ("Switched")
100	.8870					metadata:
86						                ; constants need some rationalisation here...

92	.8870					info:
78	=5					shift=countLS0s(((CMOSBytes.joystick.isSwitchedMask)))
79	=1					unshiftedMask=(((CMOSBytes.joystick.isSwitchedMask)))>>shift
81	=1					maskWidth=countLS0s(~unshiftedMask)

94	>8870	c1				                .byte ($c0)|((info.maskWidth-1)<<3)|((1))
95	>8871	6d				                .byte (((false))?$80:$00)|(((CMOSBytes.joystick)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
99	>8872	53 74 69 63 6b			                .text ("Stick")
100	.8877					metadata:
86						                ; constants need some rationalisation here...

92	.8877					info:
78	=0					shift=countLS0s(((CMOSBytes.joystick.stickMask)))
79	=$f					unshiftedMask=(((CMOSBytes.joystick.stickMask)))>>shift
81	=4					maskWidth=countLS0s(~unshiftedMask)

94	>8877	d8				                .byte ($c0)|((info.maskWidth-1)<<3)|((0))
95	>8878	e8				                .byte (((true))?$80:$00)|(((CMOSBytes.joystick)-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
49	>8879	54 56				                .text "TV"
50	.887b					metadata:
132:3	>887b	89				                .byte >handleTV-1
133	>887c	a1				                .byte <handleTV-1
163:7	>887d	00				                .byte 0
164	.887e					L8603:
168						                ; This must be a bug, surely? The mask looks wrong.
86						                ; constants need some rationalisation here...

92	.887e					info:
78	=1					shift=countLS0s((3<<1))
79	=3					unshiftedMask=((3<<1))>>shift
81	=2					maskWidth=countLS0s(~unshiftedMask)

94	>887e	08				                .byte ($00)|((info.maskWidth-1)<<3)|(0)
95	>887f	51				                .byte ((false)?$80:$00)|((CMOSBytes.defaults2-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
171	.8880					L8605:
86						                ; constants need some rationalisation here...

92	.8880					info:
78	=4					shift=countLS0s((CMOSBytes.defaults0.interlaceMask|(CMOSBytes.defaults0.tvMask<<CMOSBytes.defaults0.tvShift)))
79	=15					unshiftedMask=((CMOSBytes.defaults0.interlaceMask|(CMOSBytes.defaults0.tvMask<<CMOSBytes.defaults0.tvShift)))>>shift
81	=4					maskWidth=countLS0s(~unshiftedMask)

94	>8880	18				                .byte ($00)|((info.maskWidth-1)<<3)|(0)
95	>8881	2c				                .byte ((false)?$80:$00)|((CMOSBytes.defaults0-(rtcByteIndexOffset-cmosBytesOffset))<<3)|info.shift
173	.8882					ectory:
174	>8882	65 63 74 6f 72 79 ff		                .text "ectory",$ff
179	.8889					ift:
180	>8889	69 66 74 ff			                .text "ift",$ff

182	.888d					textSnippetInsertPointOffsets:
183	>888d	24				                .text lastDirChar-configureTable   ;"Directory"
184	>888e	63				                .byte lastNoDirChar-configureTable ;"NoDirectory"
189	>888f	8f				                .byte lastShChar-configureTable    ;"Shift"
190	=3					textSnippetsCount=*-textSnippetInsertPointOffsets

192	.8890					textSnippetOffsets:
193	>8890	be				                .byte configureTable.ectory-configureTable
194	>8891	be				                .byte configureTable.ectory-configureTable
199	>8892	c5				                .byte configureTable.ift-configureTable

202						                .endblock

204						;-------------------------------------------------------------------------

206	.8893					starCONFIGUREOrStarSTATUS:
207	.8893	0a		asl a		                asl a
208	.8894	69 80		adc #$80	                adc #$80

210						                ; *STATUS: A=1 V=1 C=1
211						                ; *CONFIGURE: A=0 V=0 C=1
212	.8896	08		php		                php
213	.8897	a9 c4		lda #$c4	                lda #<configureTable
214	.8899	85 b0		sta $b0		                sta oscliWorkspace.tablePtr+0
215	.889b	a9 87		lda #$87	                lda #>configureTable
216	.889d	85 b1		sta $b1		                sta oscliWorkspace.tablePtr+1
217	.889f	a2 ff		ldx #$ff	                ldx #$FF
218	.88a1	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
219	.88a4	d0 03		bne $88a9	                bne L886C
220	.88a6	20 0b 8b	jsr $8b0b	                jsr fetchCommandTableByte

222	.88a9					L886C:
223	.88a9	2c 70 e3	bit $e370	                bit valueFF ; V=1 to indicate 2-byte metadata
224	.88ac	20 cc 8a	jsr $8acc	                jsr findCommand
225	.88af	b0 07		bcs $88b8	                bcs foundCONFIGOrSTATUSTopic
226	.88b1	28		plp		                plp
227	.88b2	20 ae 8b	jsr $8bae	                jsr unknownCONFIGOrStatus
228	.88b5	d0 71		bne $8928	                bne jmpBadCommandError8B68
229	.88b7	60		rts		                rts

231						;-------------------------------------------------------------------------

233	.88b8					foundCONFIGOrSTATUSTopic:
234	.88b8	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
235	.88bb	28		plp		                plp
236	.88bc	50 03		bvc $88c1	                bvc L8884
237	.88be	20 9a 89	jsr $899a	                jsr L895D

239						;-------------------------------------------------------------------------

241	.88c1					L8884:
242	.88c1	bd c4 87	lda $87c4,x	                lda configureTable,x
243	.88c4	89 40		bit #$40	                bit #$40
244	.88c6	d0 0a		bne $88d2	                bne L8895       ;taken if V0 clear
245	.88c8	48		pha		                pha
246	.88c9	bd c5 87	lda $87c5,x	                lda configureTable+1,x
247	.88cc	48		pha		                pha
248	.88cd	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
249	.88cf	49 0d		eor #$0d	                eor #$D         ;A=0 Z=1 if command line tail is empty
250	.88d1	60		rts		                rts             ;call routine, in effect

252						;-------------------------------------------------------------------------

254	.88d2					L8895:
255	.88d2	29 07		and #$07	                and #7
259	.88d4	fe c5 87	inc $87c5,x	                inc configureTable+1,x
261	.88d7	70 3d		bvs $8916	                bvs L88D9
262	.88d9	b0 30		bcs $890b	                bcs print1NumberHelp
263	.88db	30 05		bmi $88e2	                bmi L88A5
264	.88dd	20 9a 89	jsr $899a	                jsr L895D
265	.88e0	80 26		bra $8908	                bra jmpL88EE

267						;-------------------------------------------------------------------------

269	.88e2					L88A5:
270	.88e2	da		phx		                phx
271	.88e3	20 f2 89	jsr $89f2	                jsr L89B5
272	.88e6	fa		plx		                plx
273	.88e7	e0 07		cpx #$07	                cpx #7
274	.88e9	d0 06		bne $88f1	                bne L88B4
275	.88eb	a8		tay		                tay
276	.88ec	d0 02		bne $88f0	                bne L88B3
277	.88ee	a9 07		lda #$07	                lda #7

279	.88f0					L88B3:
280	.88f0	3a		dec a		                dec a

282	.88f1					L88B4:
283	.88f1	e0 4d		cpx #$4d	                cpx #configureTable.mode.metadata-configureTable
284	.88f3	d0 09		bne $88fe	                bne L88C1
285	.88f5	89 78		bit #$78	                bit #$78
286	.88f7	d0 2f		bne $8928	                bne jmpBadCommandError8B68
287	.88f9	a8		tay		                tay
288	.88fa	10 02		bpl $88fe	                bpl L88C1
289	.88fc	49 88		eor #$88	                eor #$88

291	.88fe					L88C1:
292	.88fe	20 ca 8b	jsr $8bca	                jsr getMaskCount
293	.8901	d9 d6 8b	cmp $8bd6,y	                cmp maskByBitCount,y
294	.8904	f0 02		beq $8908	                beq jmpL88EE
295	.8906	b0 20		bcs $8928	                bcs jmpBadCommandError8B68

298	.8908					jmpL88EE:
299	.8908	4c 2b 89	jmp $892b	                jmp L88EE

301						;-------------------------------------------------------------------------

303	.890b					print1NumberHelp:
304	.890b	10 08		bpl $8915	                bpl L88D8
305	.890d	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
306	>8910	3c 44 3e 0d 00			                .text "<D>",13,0
307	.8915					L88D8:
308	.8915	60		rts		                rts

310						;-------------------------------------------------------------------------

312	.8916					L88D9:
313	.8916	30 07		bmi $891f	                bmi printDecimalConfigurationByte
314	.8918	bd c5 87	lda $87c5,x	                lda configureTable+1,x
315	.891b	18		clc		                clc
316	.891c	4c 17 8b	jmp $8b17	                jmp L8ADA

318						;-------------------------------------------------------------------------

320	.891f					printDecimalConfigurationByte:
321	.891f	20 a1 8a	jsr $8aa1	                jsr readConfigurationByte

323	.8922					printDecimalByteAThenNewLine:
324	.8922	20 e7 8b	jsr $8be7	                jsr printDecimalByteA
325	.8925	4c e7 ff	jmp $ffe7	                jmp OSNEWL

327						;-------------------------------------------------------------------------

329	.8928					jmpBadCommandError8B68:
330	.8928	4c 60 fb	jmp $fb60	                jmp badCommandError

332						;-------------------------------------------------------------------------

334	.892b					L88EE: .block
335	.892b	85 b0		sta $b0		                sta $B0         ;save value
336	.892d	20 ca 8b	jsr $8bca	                jsr getMaskCount
337	.8930	b9 d6 8b	lda $8bd6,y	                lda maskByBitCount,y
338	.8933	20 c1 8b	jsr $8bc1	                jsr getShiftCount
339	.8936	80 03		bra $893b	                bra shift
340	.8938					shiftLoop:
341	.8938	0a		asl a		                asl a           ;shift mask
342	.8939	06 b0		asl $b0		                asl $B0         ;shift value

344	.893b					shift:
345	.893b	88		dey		                dey
346	.893c	10 fa		bpl $8938	                bpl shiftLoop
347	.893e	85 b1		sta $b1		                sta $B1         ;store shifted value
348	.8940	20 b5 8b	jsr $8bb5	                jsr getRTCByteIndex
349	.8943	20 3a 9e	jsr $9e3a	                jsr readRTCByte ;get previous value
350	.8946	05 b1		ora $b1		                ora $B1         ;set all masked bits to 1
351	.8948	45 b1		eor $b1		                eor $B1         ;set all masked bits to 0
352	.894a	05 b0		ora $b0		                ora $B0         ;insert value
353	.894c	a8		tay		                tay             ;Y=byte to write
354						                .endblock

356	.894d					jmpWriteRTCByte:
357	.894d	4c 73 9e	jmp $9e73	                jmp writeRTCByte

359						;-------------------------------------------------------------------------

361	.8950					handlePrinterIgnoreChar:
362	.8950	70 18		bvs $896a	                bvs printDefaultPrinterIgnoreChar ;taken if *STATUS
363	.8952	b0 31		bcs $8985	                bcs print1OptionalNumberHelp
364	.8954	f0 0e		beq $8964	                beq L8927
365	.8956	20 f2 89	jsr $89f2	                jsr L89B5
366	.8959	da		phx		                phx
367	.895a	a9 00		lda #$00	                lda #0
368	.895c	20 66 89	jsr $8966	                jsr L8929
369	.895f	7a		ply		                ply
370	.8960	a2 0e		ldx #$0e	                ldx #$E+cmosBytesOffset
371	.8962	80 e9		bra $894d	                bra jmpWriteRTCByte

373						;-------------------------------------------------------------------------

375	.8964					L8927:
376	.8964	a9 01		lda #$01	                lda #1

378						;-------------------------------------------------------------------------

380	.8966					L8929:
381	.8966	a2 ba		ldx #$ba	                ldx #configureTable.L8603-configureTable
382	.8968					L892B:
383	.8968	80 9e		bra $8908	                bra jmpL88EE

385						;-------------------------------------------------------------------------

387	.896a					printDefaultPrinterIgnoreChar:
388	.896a	20 de 8b	jsr $8bde	                jsr readUsePrinterIgnoreChar
389	.896d	90 0f		bcc $897e	                bcc gotPrinterIgnoreChar
390	.896f	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
391	>8972	4e 6f 20 49 67 6e 6f 72		                .text "No Ignore",13,0
	>897a	65 0d 00
392	.897d	60		rts		                rts

394						;-------------------------------------------------------------------------

396	.897e					gotPrinterIgnoreChar:
397	.897e	a2 0e		ldx #$0e	                ldx #CMOSBytes.printerIgnoreChar+cmosBytesOffset
398	.8980	20 3a 9e	jsr $9e3a	                jsr readRTCByte
399	.8983					L8946:
400	.8983	80 9d		bra $8922	                bra printDecimalByteAThenNewLine

402						;-------------------------------------------------------------------------

404	.8985					print1OptionalNumberHelp:
405	.8985	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
406	>8988	5b 3c 44 3e 5d 0d 00		                .text "[<D>]",13,0
407	.898f	60		rts		                rts

409						;-------------------------------------------------------------------------

411	.8990					L8953:

413	.8990	20 36 86	jsr $8636	                jsr parseNumberFromString

415	.8993					L8956:
416	.8993	90 93		bcc $8928	                bcc jmpBadCommandError8B68
417	.8995	8a		txa		                txa
418	.8996	c9 10		cmp #$10	                cmp #$10

420	.8998					L895B:
421	.8998	b0 8e		bcs $8928	                bcs jmpBadCommandError8B68

423	.899a					L895D:
424	.899a	48		pha		                pha
425	.899b	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput

427	.899e					L8961:
428	.899e	d0 88		bne $8928	                bne jmpBadCommandError8B68
429	.89a0	68		pla		                pla
430	.89a1	60		rts		                rts

432						;-------------------------------------------------------------------------

434	.89a2					handleTV:
435	.89a2	70 2f		bvs $89d3	                bvs L8996
436	.89a4	b0 3b		bcs $89e1	                bcs printTVHelp
437	.89a6	f0 27		beq $89cf	                beq L8992
438	.89a8	20 36 86	jsr $8636	                jsr parseNumberFromString
439	.89ab	90 e6		bcc $8993	                bcc L8956
440	.89ad	e0 fc		cpx #$fc	                cpx #$FC
441	.89af	b0 04		bcs $89b5	                bcs L8978
442	.89b1	e0 04		cpx #$04	                cpx #4
443	.89b3	b0 e3		bcs $8998	                bcs L895B

445	.89b5					L8978:
446	.89b5	8a		txa		                txa
447	.89b6	0a		asl a		                asl a
448	.89b7	85 b1		sta $b1		                sta $B1
449	.89b9	a2 00		ldx #$00	                ldx #0
450	.89bb	20 c9 f3	jsr $f3c9	                jsr LF30A
451	.89be	f0 08		beq $89c8	                beq L898B
452	.89c0	20 f2 89	jsr $89f2	                jsr L89B5
453	.89c3	c9 02		cmp #$02	                cmp #2
454	.89c5	b0 d1		bcs $8998	                bcs L895B
455	.89c7	aa		tax		                tax

457	.89c8					L898B:
458	.89c8	8a		txa		                txa
459	.89c9	05 b1		ora $b1		                ora $B1

461	.89cb					L898E:
462	.89cb	a2 bc		ldx #$bc	                ldx #configureTable.L8605-configureTable
463	.89cd	80 99		bra $8968	                bra L892B

465						;-------------------------------------------------------------------------

467	.89cf					L8992:
468	.89cf	a9 00		lda #$00	                lda #0
469	.89d1	80 f8		bra $89cb	                bra L898E

471						;-------------------------------------------------------------------------

473	.89d3					L8996:
474	.89d3	20 13 8c	jsr $8c13	                jsr readDefaultTVSettings
475	.89d6	20 e6 8b	jsr $8be6	                jsr printDecimalByteY
476	.89d9	a9 2c		lda #$2c	                lda #','
477	.89db	20 ee ff	jsr $ffee	                jsr OSWRCH
478	.89de	8a		txa		                txa
479	.89df	80 a2		bra $8983	                bra L8946

481						;-------------------------------------------------------------------------

483	.89e1					printTVHelp:
484	.89e1	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
485	>89e4	5b 3c 44 3e 5b 2c 3c 44		                .text "[<D>[,<D>]]",13,0
	>89ec	3e 5d 5d 0d 00
486	.89f1	60		rts		                rts

488						;-------------------------------------------------------------------------

490	.89f2					L89B5:
491	.89f2	20 36 86	jsr $8636	                jsr parseNumberFromString
492	.89f5	90 9c		bcc $8993	                bcc L8956
493	.89f7	8a		txa		                txa
494	.89f8	80 a0		bra $899a	                bra L895D

497						;-------------------------------------------------------------------------

499	.89fa					printConfigureOrStatusHeader: .block
500	.89fa	d0 a2		bne $899e	                bne L8961
501	.89fc	08		php		                php
502	.89fd	5a		phy		                phy
503	.89fe	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
504	>8a01	43 6f 6e 66 69 67 75 72		                .text "Configuration ",0
	>8a09	61 74 69 6f 6e 20 00
505	.8a10	70 0f		bvs $8a21	                bvs printStatusHeader ;taken if *STATUS
506	.8a12	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
507	>8a15	6f 70 74 69 6f 6e 73 3a		                .text "options:",13,0
	>8a1d	0d 00
508	.8a1f	80 0c		bra $8a2d	                bra printItems
509	.8a21					printStatusHeader:
510	.8a21	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
511	>8a24	73 74 61 74 75 73 3a 0d		                .text "status:",13,0
	>8a2c	00
512	.8a2d					printItems:
513	.8a2d	38		sec		                sec
514	.8a2e	20 17 8b	jsr $8b17	                jsr L8ADA
515	.8a31	7a		ply		                ply
516	.8a32	28		plp		                plp
517	.8a33	08		php		                php
518	.8a34	20 ae 8b	jsr $8bae	                jsr unknownCONFIGOrStatus
519	.8a37	28		plp		                plp
520	.8a38	70 66		bvs $8aa0	                bvs done        ;taken if *STATUS
521	.8a3a	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
522	>8a3d	57 68 65 72 65 3a 0d		                .text "Where:",13
523	>8a44	44 20 69 73 20 61 20 64		                .text "D is a decimal number, or",13
	>8a4c	65 63 69 6d 61 6c 20 6e 75 6d 62 65 72 2c 20 6f
	>8a5c	72 0d
524	>8a5e	61 20 68 65 78 61 64 65		                .text "a hexadecimal number preceded by &",13
	>8a66	63 69 6d 61 6c 20 6e 75 6d 62 65 72 20 70 72 65
	>8a76	63 65 64 65 64 20 62 79 20 26 0d
525	>8a81	49 74 65 6d 73 20 77 69		                .text "Items within [ ] are optional",13
	>8a89	74 68 69 6e 20 5b 20 5d 20 61 72 65 20 6f 70 74
	>8a99	69 6f 6e 61 6c 0d
526	>8a9f	00				                .byte 0
527	.8aa0					done:
528	.8aa0	60		rts		                rts
529						                .endblock

531						;-------------------------------------------------------------------------
532						;
533						; Read configuration byte, given offset of metadata in the configure
534						; table.
535						;
536						; Entry:
537						;
538						; X = offset of metadata in the configure table
539						;
540						; Exit:
541						;
542						; A = value read
543						;
544						; Preserves: X/Y/P

550	.8aa1					readConfigurationByte: .block
551	.8aa1	08		php		                php
552	.8aa2	5a		phy		                phy
553	.8aa3	da		phx		                phx
554	.8aa4	20 b5 8b	jsr $8bb5	                jsr getRTCByteIndex ;
555	.8aa7	20 3a 9e	jsr $9e3a	                jsr readRTCByte
556	.8aaa	fa		plx		                plx
557	.8aab	20 c1 8b	jsr $8bc1	                jsr getShiftCount
558	.8aae	80 01		bra $8ab1	                bra shift

560						;-------------------------------------------------------------------------

562	.8ab0					shiftLoop:
563	.8ab0	4a		lsr a		                lsr a

565	.8ab1					shift:
566	.8ab1	88		dey		                dey
567	.8ab2	10 fc		bpl $8ab0	                bpl shiftLoop

569	.8ab4	20 ca 8b	jsr $8bca	                jsr getMaskCount
570	.8ab7	39 d6 8b	and $8bd6,y	                and maskByBitCount,y
571	.8aba	e0 07		cpx #$07	                cpx #configureTable.baud.metadata-configureTable
572	.8abc	d0 01		bne $8abf	                bne gotMaskedByte
573	.8abe	1a		inc a		                inc a

575	.8abf					gotMaskedByte:
576						                ; If retrieving the MODE value, rearrange things so
577						                ; the shadow modes are 128-135.
578	.8abf	e0 4d		cpx #$4d	                cpx #configureTable.mode.metadata-configureTable
579	.8ac1	d0 06		bne $8ac9	                bne done        ;taken if not MODE
580	.8ac3	89 08		bit #$08	                bit #CMOSBytes.defaults0.shadowMask ;test shadow bit
581	.8ac5	f0 02		beq $8ac9	                beq done                                   ;taken if not shadow mode
582	.8ac7	49 88		eor #$88	                eor #$80|CMOSBytes.defaults0.shadowMask ;turn mode|flag into mode|$80

584	.8ac9					done:
585	.8ac9	7a		ply		                ply
586	.8aca	28		plp		                plp
587	.8acb	60		rts		                rts
588						                .endblock

590						;-------------------------------------------------------------------------
591						;
592						; Find command in command table.
593						;
594						; Entry:
595						;
596						; (stringInputBufferAddress),y = input
597						; oscliWorkspace.tablePtr; = address of command table
598						; V = 0 if commands have 4 bytes of metadata
599						;     1 if commands have 2 bytes of metadata
600						;
601						; Exit:
602						;
603						; C=0 = no match
604						;
605						; C=1 = match;
606						;       A holds 1st byte of metadata
607						;       oscliWorkspace.tablePtr; = address of 2nd and following metadata bytes
608						;       (stringInputBufferAddress),y = input following command
609						;
610						; Preserves: X/V

612	.8acc					findCommand: .block
613	.8acc	84 e6		sty $e6		                sty commandLineY ;save Y
614	.8ace	80 0a		bra $8ada	                bra checkInput       ;get going...

616	.8ad0					checkLetter:
617	.8ad0	52 b0		eor ($b0)	                eor (oscliWorkspace.tablePtr)
618	.8ad2	29 df		and #$df	                and #$DF
619	.8ad4	d0 15		bne $8aeb	                bne noMatch    ; taken if char didn't match
620	.8ad6	20 0b 8b	jsr $8b0b	                jsr fetchCommandTableByte
621	.8ad9	c8		iny		                iny

623	.8ada					checkInput:
624	.8ada	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
625	.8adc	20 9c eb	jsr $eb9c	                jsr isLetter
626	.8adf	90 ef		bcc $8ad0	                bcc checkLetter ; taken if letter

628						                ; Non-letter input means potentially end of command
629						                ; name.
630	.8ae1	b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr) ; next table byte
631	.8ae3	30 21		bmi $8b06	                bmi commandMatch ; taken if end of string - a match
632	.8ae5	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
633	.8ae7	c9 2e		cmp #$2e	                cmp #'.'        ; '.' is the abbreviation char
634	.8ae9	f0 04		beq $8aef	                beq abbreviationMatch ;taken with C=1 if match

636	.8aeb					noMatch:
637	.8aeb	18		clc		                clc             ;indicate no match
638	.8aec	a4 e6		ldy $e6		                ldy commandLineY ;restore Y
639	.8aee	88		dey		                dey             ;compensate for upcoming iny

641	.8aef					abbreviationMatch:
642	.8aef	c8		iny		                iny             ; skip the '.'

644	.8af0					findCommandMetadataLoop:
645	.8af0	20 0b 8b	jsr $8b0b	                jsr fetchCommandTableByte
646	.8af3	f0 15		beq $8b0a	                beq rts8ACD
647	.8af5	10 f9		bpl $8af0	                bpl findCommandMetadataLoop ; keep looping through chars if necessary
648	.8af7	b0 11		bcs $8b0a	                bcs rts8ACD                 ;taken if it was a match
649	.8af9	20 0b 8b	jsr $8b0b	                jsr fetchCommandTableByte   ;discard 2nd metadata byte
650	.8afc	70 dc		bvs $8ada	                bvs checkInput ; if V=1, 2-byte metadata; if V=0, 4-byte metadata
651	.8afe	20 0b 8b	jsr $8b0b	                jsr fetchCommandTableByte ;discard 3rd metadata byte
652	.8b01	20 0b 8b	jsr $8b0b	                jsr fetchCommandTableByte ;discard 4th metadata byte
653	.8b04	80 d4		bra $8ada	                bra checkInput

655						;-------------------------------------------------------------------------

657	.8b06					commandMatch:
658	.8b06	20 0b 8b	jsr $8b0b	                jsr fetchCommandTableByte
659	.8b09	38		sec		                sec

661	.8b0a					rts8ACD:
662	.8b0a	60		rts		                rts
663						                .endblock

665						;-------------------------------------------------------------------------
666						;
667						; Fetch byte from command table with postincrement.
668						;
669						; Entry:
670						;
671						; oscliWorkspace.tablePtr; = address of byte to fetch
672						;
673						; Exit:
674						;
675						; A = byte fetched
676						; oscliWorkspace.tablePtr; incremented
677						;
678						; Preserves: X/Y/C/V

680	.8b0b					fetchCommandTableByte:
681	.8b0b	e8		inx		                inx
682	.8b0c	b2 b0		lda ($b0)	                lda (oscliWorkspace.tablePtr)
683	.8b0e	48		pha		                pha
684	.8b0f	e6 b0		inc $b0		                inc oscliWorkspace.tablePtr+0
685	.8b11	d0 02		bne $8b15	                bne L8AD8
686	.8b13	e6 b1		inc $b1		                inc oscliWorkspace.tablePtr+1

688	.8b15					L8AD8:
689	.8b15	68		pla		                pla
690	.8b16	60		rts		                rts

692						;-------------------------------------------------------------------------
693						;
694						; Print configure table items.
695						;
696						; Entry:
697						;
698						; C = ???
699						;
700						; V=0 if *CONFIGURE; V=1 if *STATUS
701						;
702	.8b17					L8ADA: .block
703	.8b17	48		pha		                pha
704	.8b18	a0 03		ldy #$03	                ldy #configureTable.baud-configureTable
705	.8b1a	a2 02		ldx #$02	                ldx #(configureTable.baud-configureTable)-1

707	.8b1c					loop:
708	.8b1c	e8		inx		                inx
709	.8b1d	bd c4 87	lda $87c4,x	                lda configureTable,x ;get name byte
710	.8b20	f0 5a		beq $8b7c	                beq done            ;all done if 0
711	.8b22	10 f8		bpl $8b1c	                bpl loop            ;keep going until end of name
712						                                     ;reached
713	.8b24	50 1f		bvc $8b45	                bvc L8B08            ;taken if *CONFIGURE

715						                ; A = metadata byte 0
716	.8b26	29 40		and #$40	                and #$40
717	.8b28	f0 10		beq $8b3a	                beq L8AFD       ;taken if V0 clear

719	.8b2a	bd c5 87	lda $87c5,x	                lda configureTable+1,x ;A = metadata byte 1
720	.8b2d	30 0b		bmi $8b3a	                bmi L8AFD              ;taken if N1 set

722	.8b2f	20 a1 8a	jsr $8aa1	                jsr readConfigurationByte ;Read the actual value
723	.8b32	5d c4 87	eor $87c4,x	                eor configureTable,x      ;eor with MatchValue
724	.8b35	29 07		and #$07	                and #7                    ;A=0 if value matches MatchValue
725	.8b37	d0 3d		bne $8b76	                bne next                  ;taken if value isn't MatchValue
726	.8b39	3a		dec a		                dec a                     ;A=$ff

728	.8b3a					L8AFD:
729	.8b3a	b0 09		bcs $8b45	                bcs L8B08       ;
730	.8b3c	10 38		bpl $8b76	                bpl next        ;
731	.8b3e	68		pla		                pla
732	.8b3f	48		pha		                pha
733	.8b40	5d c5 87	eor $87c5,x	                eor configureTable+1,x
734	.8b43	d0 31		bne $8b76	                bne next

736	.8b45					L8B08:
737	.8b45	08		php		                php
738	.8b46	da		phx		                phx
739	.8b47	50 09		bvc $8b52	                bvc printOrdinaryItem
740	.8b49	c0 35		cpy #$35	                cpy #configureTable.ignore-configureTable
741	.8b4b	d0 05		bne $8b52	                bne printOrdinaryItem
742	.8b4d	20 de 8b	jsr $8bde	                jsr readUsePrinterIgnoreChar
743	.8b50	b0 1b		bcs $8b6d	                bcs L8B30

745	.8b52					printOrdinaryItem:
746	.8b52	a2 09		ldx #$09	                ldx #9
747	.8b54	20 a8 8b	jsr $8ba8	                jsr printConfigureTableString
748	.8b57	29 40		and #$40	                and #$40
749	.8b59	f0 0f		beq $8b6a	                beq printSpaces       ;taken if V0 clear
750	.8b5b	b9 c5 87	lda $87c5,y	                lda configureTable+1,y
751	.8b5e	30 0a		bmi $8b6a	                bmi printSpaces ;taken if N1 set

753						                ; V0 set, N1 clear = newline and next item
754	.8b60	20 e7 ff	jsr $ffe7	                jsr OSNEWL
755	.8b63	80 0f		bra $8b74	                bra next2

757	.8b65					printSpacesLoop:
758	.8b65	a9 20		lda #$20	                lda #' '
759	.8b67	20 ee ff	jsr $ffee	                jsr OSWRCH

761	.8b6a					printSpaces:
762	.8b6a	ca		dex		                dex
763	.8b6b	10 f8		bpl $8b65	                bpl printSpacesLoop

765	.8b6d					L8B30:
766	.8b6d	fa		plx		                plx
767	.8b6e	28		plp		                plp
768	.8b6f	08		php		                php
769	.8b70	da		phx		                phx
770	.8b71	20 c1 88	jsr $88c1	                jsr L8884

772	.8b74					next2:
773	.8b74	fa		plx		                plx
774	.8b75	28		plp		                plp

776	.8b76					next:
777	.8b76	e8		inx		                inx             ;point X just before next item
778	.8b77	8a		txa		                txa
779	.8b78	a8		tay		                tay
780	.8b79	c8		iny		                iny             ;point Y at next item
781	.8b7a	80 a0		bra $8b1c	                bra loop

783	.8b7c					done:
784	.8b7c	68		pla		                pla
785	.8b7d	60		rts		                rts
786						                .endblock

788						;-------------------------------------------------------------------------

790	.8b7e					printConfigureTableStringLoop:
791	.8b7e	20 ee ff	jsr $ffee	                jsr OSWRCH      ;print char
792	.8b81	48		pha		                pha             ;save A (char to print)
793	.8b82	5a		phy		                phy             ;save Y (table offset)
794	.8b83	98		tya		                tya             ;get table offset in A

796						                ; If we're at a snippet insert point, insert the
797						                ; snippet, recursively.
798	.8b84	a0 02		ldy #$02	                ldy #configureTable.textSnippetsCount-1
799	.8b86					findSnippetInsertPointLoop:
800	.8b86	d9 8d 88	cmp $888d,y	                cmp configureTable.textSnippetInsertPointOffsets,y
801	.8b89	d0 07		bne $8b92	                bne nextSnippetInsertPoint

803						                ; Insert a snippet here. Load the new snippet's offset
804						                ; in Y and repeat.
805	.8b8b	b9 90 88	lda $8890,y	                lda configureTable.textSnippetOffsets,y
806	.8b8e	a8		tay		                tay
807	.8b8f	20 a8 8b	jsr $8ba8	                jsr printConfigureTableString
808	.8b92					nextSnippetInsertPoint
809	.8b92	88		dey		                dey
810	.8b93	10 f1		bpl $8b86	                bpl findSnippetInsertPointLoop
811	.8b95	7a		ply		                ply             ;restore Y (table offset)
812	.8b96	68		pla		                pla             ;restore A (char to print)
813	.8b97	c8		iny		                iny             ;next byte in table
814	.8b98	ca		dex		                dex             ;
815	.8b99	49 20		eor #$20	                eor #$20
816	.8b9b	19 c4 87	ora $87c4,y	                ora configureTable,y
817	.8b9e	29 a0		and #$a0	                and #%10100000
818	.8ba0	d0 06		bne $8ba8	                bne printConfigureTableString

820						                ; if char case changed, but it wasn't the end of the
821						                ; string, pop a space in.
822	.8ba2	a9 20		lda #$20	                lda #' '
823	.8ba4	20 ee ff	jsr $ffee	                jsr OSWRCH
824	.8ba7	ca		dex		                dex

827						;-------------------------------------------------------------------------
828						;
829						; Print string from configure table, with snippets inserted as
830						; required.
831						;
832						; Entry:
833						;
834						; X = column counter start value
835						; Y = configure table offset
836						;
837						; Exit:
838						;
839						; A = item's metadata byte 0
840						; X decremented for each char printed
841						;
842	.8ba8					printConfigureTableString:
843	.8ba8	b9 c4 87	lda $87c4,y	                lda configureTable,y
844	.8bab	10 d1		bpl $8b7e	                bpl printConfigureTableStringLoop
845	.8bad	60		rts		                rts

848						;-------------------------------------------------------------------------
849						;
850						; Issue ROM service call romServiceCallUnknownCONFIG ($28) or
851						; romServiceCallUnknownSTATUS ($29).
852						;
853						; Entry:
854						;
855						; C=0 for unknown CONFIG, or C=1 for unknown STATUS
856						;
857						; Exit:
858						;
859						; as per appropriate ROM service call
860						;
861	.8bae					unknownCONFIGOrStatus:
864	.8bae	a9 14		lda #$14	                lda #romServiceCallUnknownCONFIG>>1
865	.8bb0	2a		rol a		                rol a           ;form $28 or $29 according to C
866	.8bb1	aa		tax		                tax
867	.8bb2	4c ff ee	jmp $eeff	                jmp makeROMServiceCall

869						;-------------------------------------------------------------------------
870						;
871						; Get actual RTC byte index for configure item, given offset in
872						; configure table to its metadata.
873						;
874						; Entry:
875						;
876						; X = offset into configure table for item's metadata
877						;
878						; Exit:
879						;
880						; X = index of byte read
881						;
882						; Preserves: Y/C

884	.8bb5					getRTCByteIndex:
885	.8bb5	bd c5 87	lda $87c5,x	                lda configureTable+1,x
886	.8bb8	29 78		and #$78	                and #%01111000
887	.8bba	4a		lsr a		                lsr a
888	.8bbb	4a		lsr a		                lsr a
889	.8bbc	4a		lsr a		                lsr a
890	.8bbd	69 05		adc #$05	                adc #rtcByteIndexOffset
891	.8bbf	aa		tax		                tax
892	.8bc0	60		rts		                rts

894						;-------------------------------------------------------------------------
895						;
896						; Get shift count for configure item's data, given offset in configure
897						; table for its metadata.
898						;
899						; Entry:
900						;
901						; X = offset into configure table for item's metadata
902						;
903						; Exit:
904						;
905						; Y = shift count
906						;
907						; Preserves: A/X/C
908						;
909	.8bc1					getShiftCount:
910	.8bc1	48		pha		                pha
911	.8bc2	bd c5 87	lda $87c5,x	                lda configureTable+1,x
912	.8bc5	29 07		and #$07	                and #%00000111
913	.8bc7	a8		tay		                tay
914	.8bc8	68		pla		                pla
915	.8bc9	60		rts		                rts

918						;-------------------------------------------------------------------------
919						;
920						; Get mask bit count for configure item's data, given offset in
921						; configure table for its metadata.
922						;
923						; Entry:
924						;
925						; X = offset into configure table for item's metadata
926						;
927						; Exit:
928						;
929						; Y = mask bit count, -1 (0 = 1 bits ... 7 = 8 bits)
930						;
931						; Preserves: A/X
932						;
933	.8bca					getMaskCount:
934	.8bca	48		pha		                pha
935	.8bcb	bd c4 87	lda $87c4,x	                lda configureTable,x; "."
936	.8bce	4a		lsr a		                lsr a
937	.8bcf	4a		lsr a		                lsr a
938	.8bd0	4a		lsr a		                lsr a
939	.8bd1	29 07		and #$07	                and #7
940	.8bd3	a8		tay		                tay
941	.8bd4	68		pla		                pla
942	.8bd5	60		rts		                rts

944	.8bd6					maskByBitCount:
945	>8bd6	01				                .byte %00000001
946	>8bd7	03				                .byte %00000011
947	>8bd8	07				                .byte %00000111
948	>8bd9	0f				                .byte %00001111
949	>8bda	1f				                .byte %00011111
950	>8bdb	3f				                .byte %00111111
951	>8bdc	7f				                .byte %01111111
952	>8bdd	ff				                .byte %11111111

954						;-------------------------------------------------------------------------
955						;
956						; Read the use printer ignore char flag.
957						;
958						; Exit:
959						;
960						; C=0 if using printer ignore char; C=1 if not.
961						;
962						; Preserves: Y

968	.8bde					readUsePrinterIgnoreChar:
969	.8bde	5a		phy		                phy
970	.8bdf	20 12 9e	jsr $9e12	                jsr readDefaults2
971	.8be2	4a		lsr a		                lsr a
972	.8be3	4a		lsr a		                lsr a
973	.8be4	7a		ply		                ply
974	.8be5	60		rts		                rts

976						;-------------------------------------------------------------------------
977						;
978						; Print decimal byte.
979						;
980						; Entry:
981						;
982						; (printDecimalByteA) A = value to print
983						;
984						; (printDecimalByteY) Y = value to print
985						;
986	.8be6					printDecimalByteY:
987	.8be6	98		tya		                tya
988	.8be7					printDecimalByteA:
989	.8be7	38		sec		                sec             ;set leading zeros flag
990	.8be8	a0 ff		ldy #$ff	                ldy #$FF        ;reset digit counter
991	.8bea	08		php		                php             ;save leading zeros flag

993	.8beb					countHundredsLoop:
994	.8beb	c8		iny		                iny
995	.8bec	e9 64		sbc #$64	                sbc #100
996	.8bee	b0 fb		bcs $8beb	                bcs countHundredsLoop

998	.8bf0	69 64		adc #$64	                adc #100        ;put 0 back in the hundreds column
999	.8bf2	28		plp		                plp             ;restore leading zeros flag
1000	.8bf3	20 07 8c	jsr $8c07	                jsr maybePrintHexDigit

1002	.8bf6	a0 ff		ldy #$ff	                ldy #$FF        ;reset digit counter
1003	.8bf8	08		php		                php             ;save leading zeros flag
1004	.8bf9	38		sec		                sec

1006	.8bfa					countTensLoop:
1007	.8bfa	c8		iny		                iny
1008	.8bfb	e9 0a		sbc #$0a	                sbc #10
1009	.8bfd	b0 fb		bcs $8bfa	                bcs countTensLoop

1011	.8bff	69 0a		adc #$0a	                adc #10         ;put 0 back in the tens column
1012	.8c01	28		plp		                plp             ;restore leading zeros flag
1013	.8c02	20 07 8c	jsr $8c07	                jsr maybePrintHexDigit
1014	.8c05	18		clc		                clc             ;always clear leading zeros flag for
1015						                                ;units
1016	.8c06	a8		tay		                tay             ;Y=3rd digit

1018	.8c07					maybePrintHexDigit:
1019	.8c07	48		pha		                pha
1020	.8c08	98		tya		                tya
1021	.8c09	d0 02		bne $8c0d	                bne L8BD0       ;always print if non-zero
1022	.8c0b	b0 04		bcs $8c11	                bcs L8BD4       ;print non-leading zeros
1023	.8c0d					L8BD0:
1024	.8c0d	20 b5 ac	jsr $acb5	                jsr printHexDigit
1025	.8c10	18		clc		                clc             ;indicate non-zero digit printed
1026	.8c11					L8BD4:
1027	.8c11	68		pla		                pla
1028	.8c12	60		rts		                rts

1030						;-------------------------------------------------------------------------

1036	.8c13					readDefaultTVSettings:
1037	.8c13	a2 bc		ldx #$bc	                ldx #configureTable.L8605-configureTable
1038	.8c15	20 a1 8a	jsr $8aa1	                jsr readConfigurationByte
1039	.8c18	4a		lsr a		                lsr a
1040	.8c19	89 04		bit #$04	                bit #%00000100
1041	.8c1b	f0 02		beq $8c1f	                beq L8BE2
1042	.8c1d	09 fc		ora #$fc	                ora #%11111100
1043	.8c1f					L8BE2:
1044	.8c1f	a8		tay		                tay
1045	.8c20	a9 00		lda #$00	                lda #0
1046	.8c22	2a		rol a		                rol a
1047	.8c23	aa		tax		                tax
1048	.8c24	60		rts		                rts

1050						;-------------------------------------------------------------------------

:5	;******  Return to file: src/terminal.s65

942						                .include "sram_utils.s65"

:8	;******  Processing file: src/sram_utils.s65

1						;-------------------------------------------------------------------------

3						; osword42SetupTable[i] is offset into sramWorkspace for OSWORD
4						; parameter block byte i

6	.8c25					osword42SetupTable:
8	>8c25	01				                .byte sramWorkspace.type-sramWorkspace
10	>8c26	09				                .byte sramWorkspace.dataAddress+0-sramWorkspace
11	>8c27	0a				                .byte sramWorkspace.dataAddress+1-sramWorkspace
12	>8c28	0b				                .byte sramWorkspace.dataAddress+2-sramWorkspace
13	>8c29	0c				                .byte sramWorkspace.dataAddress+3-sramWorkspace
14	>8c2a	02				                .byte sramWorkspace.length+0-sramWorkspace
15	>8c2b	03				                .byte sramWorkspace.length+1-sramWorkspace
16	>8c2c	04				                .byte sramWorkspace.bank-sramWorkspace
17	>8c2d	05				                .byte sramWorkspace.sramAddress+0-sramWorkspace
18	>8c2e	06				                .byte sramWorkspace.sramAddress+1-sramWorkspace

20						;-------------------------------------------------------------------------
21						;
22						; OSWORD $42 - Sideways RAM Block Transfor (G.7-7)
23						;
24						; Entry: parameter block like this:
25						;
26						;    block?0 - bit 7 clear=sram->memory, set=memory->sram
27						;              bit 6 clear=absolute, set=pseudo
28						;    block!1 - data address
29						;    (block+5); - block length
30						;    block?7 - ROM ID 0-$0f, or $10-$13 for W/X/Y/Z
31						;    (block+8); - sideways RAM address
32						;
33	.8c2f					osword42: .proc
39	.8c2f	a0 09		ldy #$09	                ldy #9

41	.8c31					copyFromParameterBlockLoop:
42	.8c31	b1 f0		lda ($f0),y	                lda (originalX),y
46	.8c33	be 25 8c	ldx $8c25,y	                ldx osword42SetupTable,y
48	.8c36	9d ed 02	sta $02ed,x	                sta sramWorkspace,x
49	.8c39	88		dey		                dey
53	.8c3a	10 f5		bpl $8c31	                bpl copyFromParameterBlockLoop
54	.8c3c	c8		iny		                iny             ; Y=0

57	.8c3d					saveTransferPointersLoop:
58	.8c3d	b9 b0 00	lda $00b0,y	                lda sramTransferPointers,y
59	.8c40	48		pha		                pha
60	.8c41	c8		iny		                iny
61	.8c42	c0 04		cpy #$04	                cpy #size(sramTransferPointers)
62	.8c44	90 f7		bcc $8c3d	                bcc saveTransferPointersLoop

64	.8c46	20 f4 8d	jsr $8df4	                jsr doSidewaysRAMBlockTransfer

66	.8c49	a0 03		ldy #$03	                ldy #size(sramTransferPointers)-1
67	.8c4b					restoreTransferPointersLoop:
68	.8c4b	68		pla		                pla
69	.8c4c	99 b0 00	sta $00b0,y	                sta sramTransferPointers,y
70	.8c4f	88		dey		                dey
71	.8c50	10 f9		bpl $8c4b	                bpl restoreTransferPointersLoop
72	.8c52	60		rts		                rts
73						                .endproc

75						;-------------------------------------------------------------------------

77	.8c53					convertSidewaysRAMPseudoAddress:
78	.8c53	2c ee 02	bit $02ee	                bit sramWorkspace.type
79	.8c56	50 30		bvc $8c88	                bvc checkROMID ;taken if absolute addressing - nothing to do

81						                ; Sort out pseudo address - see MasRef G.7-5
82	.8c58	a0 04		ldy #$04	                ldy #4          ; 4=first SRAM bank
83	.8c5a	ad f2 02	lda $02f2	                lda sramWorkspace.sramAddress+0 ; pseudo address
84	.8c5d	ae f3 02	ldx $02f3	                ldx sramWorkspace.sramAddress+1 ; pseudo address
85	.8c60					findStartBankLoop:
86	.8c60	e0 3f		cpx #$3f	                cpx #>dataBankSize
87	.8c62	90 16		bcc $8c7a	                bcc foundStartBank ; taken if MSB $00-$3e
88	.8c64	d0 04		bne $8c6a	                bne nextBank       ; taken if MSB >=$40

90						                ; Address is 16 KB-the dummy header size
91	.8c66	c9 f0		cmp #$f0	                cmp #<dataBankSize
92	.8c68	90 10		bcc $8c7a	                bcc foundStartBank ; taken if address<$3ff0

94	.8c6a					nextBank:
95	.8c6a	e9 f0		sbc #$f0	                sbc #<dataBankSize
96	.8c6c	48		pha		                pha
97	.8c6d	8a		txa		                txa
98	.8c6e	e9 3f		sbc #$3f	                sbc #>dataBankSize
99	.8c70	aa		tax		                tax
100	.8c71	68		pla		                pla
101	.8c72	c8		iny		                iny
102	.8c73	c0 08		cpy #$08	                cpy #8          ; 8=last SRAM bank
103	.8c75	90 e9		bcc $8c60	                bcc findStartBankLoop ; taken if more banks to go
104	.8c77	4c 64 95	jmp $9564	                jmp badAddressError ; taken if pseudo address out of range

106	.8c7a					foundStartBank:
107						                ; form actual address in sramAddress!5
108	.8c7a	69 10		adc #$10	                adc #<dataBankStart
109	.8c7c	8d f2 02	sta $02f2	                sta sramWorkspace.sramAddress+0
110	.8c7f	8a		txa		                txa
111	.8c80	69 80		adc #$80	                adc #>dataBankStart
112	.8c82	8d f3 02	sta $02f3	                sta sramWorkspace.sramAddress+1
113	.8c85	8c f1 02	sty $02f1	                sty sramWorkspace.bank ; save ROM number

116						;-------------------------------------------------------------------------
117						;
118						; Check ROM ID (as read by readROMID) is valid.
119						;
120						; Entry:
121						;
122						; sramWorkspace.bank = ROM ID
123						;
124						; Exit:
125						;
126						; A=$40 Z=0 if operation addressing mode/bank addressing mode mismatch
127						;
128						; May also generate a "Bad id" error.

130	.8c88					checkROMID: .proc
131	.8c88	ad f1 02	lda $02f1	                lda sramWorkspace.bank
132	.8c8b	c9 10		cmp #$10	                cmp #$10
133	.8c8d	90 09		bcc $8c98	                bcc gotValidROMID       ; if <16, use as-is

135						                ; convert W/X/Y/Z to 4-7
136	.8c8f	c9 14		cmp #$14	                cmp #$14
137	.8c91	b0 1e		bcs $8cb1	                bcs badIdError  ; bad id if >=$14
138	.8c93	49 14		eor #$14	                eor #$14        ; $10->$04, $11->$05, $12->$06, $13->$07
139	.8c95	8d f1 02	sta $02f1	                sta sramWorkspace.bank

141	.8c98					gotValidROMID:
142	.8c98	aa		tax		                tax
143	.8c99	20 bd f8	jsr $f8bd	                jsr isBankROM
144	.8c9c	b0 07		bcs $8ca5	                bcs gotValidBank ; taken if RAM
145	.8c9e	2c ee 02	bit $02ee	                bit sramWorkspace.type

147						                ; Don't understand the logic here?
148	.8ca1	10 0e		bpl $8cb1	                bpl badIdError  ; taken if read operation
149	.8ca3	70 0c		bvs $8cb1	                bvs badIdError  ; taken if pseudo addressing

151	.8ca5					gotValidBank:
152	.8ca5	20 c1 8f	jsr $8fc1	                jsr sramGetBankMode        ; A=$40 if pseudo
153	.8ca8	ae f1 02	ldx $02f1	                ldx sramWorkspace.bank
154	.8cab	4d ee 02	eor $02ee	                eor sramWorkspace.type
155	.8cae	29 40		and #$40	                and #$40
156	.8cb0	60		rts		                rts
157						                .endproc

159						;-------------------------------------------------------------------------

161	.8cb1					badIdError:
162	.8cb1	20 ff ae	jsr $aeff	                jsr doFollowingError
163	>8cb4	80				                .byte $80
164	>8cb5	42 61 64 20 69 64		                .text "Bad id"
165	>8cbb	00				                .byte 0

167						;-------------------------------------------------------------------------
168						;
169						; Read ROM ID from command line.
170						;
171						; Entry:
172						;
173						; ($f2),y = command line input pointer
174						;
175						; Exit:
176						;
177						; V=1 if invalid
178						;
179						; V=0 if valid
180						;    osfileParameterBlock?1 bit 6 cleared
181						;    osfileParameterBlock?4 is ROM ID
182						;
183						; May also generate a "Bad id" error.
184						;
185	.8cbc					readROMID: .proc
186	.8cbc	20 98 86	jsr $8698	                jsr readHexDigit ; get char, possibly hex
187	.8cbf	2c 70 e3	bit $e370	                bit valueFF      ; V=1
188	.8cc2	b0 0d		bcs $8cd1	                bcs got1CharROMID  ; taken if hex digit encountered
189	.8cc4	29 df		and #$df	                and #$DF         ; redundantly convert to upper case
190	.8cc6	c9 5b		cmp #$5b	                cmp #'Z'+1
191	.8cc8	b0 1d		bcs $8ce7	                bcs done        ; taken if >'Z' - not valid
192	.8cca	c9 57		cmp #$57	                cmp #'W'
193	.8ccc	90 19		bcc $8ce7	                bcc done        ; taken if <'W' - not valid
194	.8cce	e9 53		sbc #$53	                sbc #'W'-4      ; adjust: W=4, X=5, Y=6, Z=7
195	.8cd0	c8		iny		                iny             ; consume command line char

197	.8cd1					got1CharROMID:
198						                ; Handle decimal numbers: if the bank was 1, it might
199						                ; be "1" or the first char of "10", "11", etc. Handle
200						                ; accordingly.
201						                ;
202						                ; (If using the W/X/Y/Z syntax, the banks are 4-7.)
203	.8cd1	c9 01		cmp #$01	                cmp #1
204	.8cd3	d0 09		bne $8cde	                bne gotROMID
205	.8cd5	88		dey		                dey             ; go back to the got char
206	.8cd6	20 36 86	jsr $8636	                jsr parseNumberFromString ; read as number
207	.8cd9	8a		txa		                txa                       ; A = result
208	.8cda	c9 10		cmp #$10	                cmp #$10
209	.8cdc	b0 d3		bcs $8cb1	                bcs badIdError  ; bad id if >15

211	.8cde					gotROMID:
212						                ; +4 = romid
213	.8cde	8d f1 02	sta $02f1	                sta sramWorkspace.bank

215						                ; clear +1 bit 6 - indicate valid rom id?
216	.8ce1	a9 40		lda #$40	                lda #$40
217	.8ce3	1c ee 02	trb $02ee	                trb sramWorkspace.type
218	.8ce6	b8		clv		                clv             ; V=0

220	.8ce7					done:
221	.8ce7	4c be f3	jmp $f3be	                jmp skipSpacesAndCheckForCRInStringInput
222						                .endproc

224						;-------------------------------------------------------------------------

226	.8cea					starSRDATAOrStarSRROM:
227	.8cea	48		pha		                pha
228	.8ceb	20 bc 8c	jsr $8cbc	                jsr readROMID
229	.8cee	70 23		bvs $8d13	                bvs jmpBadCommandError8CD6 ; taken if invalid ROM ID
230	.8cf0	d0 21		bne $8d13	                bne jmpBadCommandError8CD6 ; taken if bad command line
231						                                           ; contents
232	.8cf2	68		pla		                pla

234						                ; $80 if *SRDATA; $00 if *SRROM
238	.8cf3	0a		asl a		                asl a
239	.8cf4	8d ee 02	sta $02ee	                sta sramWorkspace.type
241	.8cf7	20 88 8c	jsr $8c88	                jsr checkROMID
242	.8cfa	b0 b5		bcs $8cb1	                bcs badIdError  ; taken if bank could never be used
243						                                ; with pseudo addressing
244	.8cfc	d0 06		bne $8d04	                bne toggleModeAndInitBank ; taken if switching to other bank mode

246						                ; If bank mode didn't change, but there's nothing in
247						                ; the bank already, set up the dummy ROM header for
248						                ; it.
249	.8cfe	1d a1 02	ora $02a1,x	                ora romInformationTable,x
250	.8d01	f0 0a		beq $8d0d	                beq initBank
251	.8d03	60		rts		                rts

253	.8d04					toggleModeAndInitBank:
254	.8d04	ad de df	lda $dfde	                lda hazel.sramBankModes
255	.8d07	5d 89 8f	eor $8f89,x	                eor sramBank4567ModeMasks-4,x
256	.8d0a	8d de df	sta $dfde	                sta hazel.sramBankModes

258	.8d0d					initBank:
259	.8d0d	20 87 8f	jsr $8f87	                jsr setROMXType6502
260	.8d10	4c 9f f8	jmp $f89f	                jmp initDummyROMHeader

262						;-------------------------------------------------------------------------

264	.8d13					jmpBadCommandError8CD6:
265	.8d13	4c 60 fb	jmp $fb60	                jmp badCommandError

267						;-------------------------------------------------------------------------

269	.8d16					L8CD9:
270	.8d16	20 27 8d	jsr $8d27	                jsr L8CEA
271	.8d19	b0 0b		bcs $8d26	                bcs locret_8CE9
272	.8d1b	20 69 f8	jsr $f869	                jsr transferBetweenSidewaysRAMAndRAM
273	.8d1e	8c f2 02	sty $02f2	                sty sramWorkspace.sramAddress+0
274	.8d21	b5 01		lda $01,x	                lda 1,x
275	.8d23	8d f3 02	sta $02f3	                sta sramWorkspace.sramAddress+1

277	.8d26					locret_8CE9:
278	.8d26	60		rts		                rts

281						;-------------------------------------------------------------------------

283	.8d27					L8CEA:
284						                ; get sram transfer sram pointer address in X - src if
285						                ; reading from sideways RAM, dest if writing to
286						                ; sideways RAM
287	.8d27	a2 b0		ldx #$b0	                ldx #sramTransferPointers.src
288	.8d29	2c ee 02	bit $02ee	                bit sramWorkspace.type
289	.8d2c	10 02		bpl $8d30	                bpl +           ; taken if reading from sideways RAM
290	.8d2e	a2 b2		ldx #$b2	                ldx #sramTransferPointers.dest
291	.8d30					+
292	.8d30	74 00		stz $00,x	                stz 0,x
293	.8d32	ac f2 02	ldy $02f2	                ldy sramWorkspace.sramAddress+0 ; sram address LSB
294	.8d35	98		tya		                tya                        ; Y=sram address LSB
295	.8d36	18		clc		                clc
296	.8d37	6d ef 02	adc $02ef	                adc sramWorkspace.length+0 ; form end address LSB
297	.8d3a	8d ef 02	sta $02ef	                sta sramWorkspace.length+0
298	.8d3d	ad f3 02	lda $02f3	                lda sramWorkspace.sramAddress+1 ; sram address MSB
299	.8d40	95 01		sta $01,x	                sta 1,x                    ;
300	.8d42	6d f0 02	adc $02f0	                adc sramWorkspace.length+1 ; form end address MSB
301	.8d45	8d f0 02	sta $02f0	                sta sramWorkspace.length+1
302	.8d48	38		sec		                sec
303	.8d49	20 9f 8f	jsr $8f9f	                jsr initSRAMTransferDataPointer
304	.8d4c					L8D0F:
305	.8d4c	cc ef 02	cpy $02ef	                cpy sramWorkspace.length+0
306	.8d4f	d0 08		bne $8d59	                bne L8D1C
307	.8d51	b5 01		lda $01,x	                lda 1,x
308	.8d53	cd f0 02	cmp $02f0	                cmp sramWorkspace.length+1
309	.8d56	d0 01		bne $8d59	                bne L8D1C
310	.8d58	60		rts		                rts

312	.8d59					L8D1C:
313	.8d59	2c ee 02	bit $02ee	                bit sramWorkspace.type
314	.8d5c	50 32		bvc $8d90	                bvc L8D53       ; taken if absolute addressing
315	.8d5e	b5 01		lda $01,x	                lda 1,x         ; get sideways RAM pointer
316	.8d60	c9 c0		cmp #$c0	                cmp #>(dataBankStart+dataBankSize) ; gone past end of bank?
317	.8d62	90 2c		bcc $8d90	                bcc L8D53       ; taken if not past end of bank
318	.8d64	a9 80		lda #$80	                lda #>dataBankStart
319	.8d66	95 01		sta $01,x	                sta 1,x                    ; reset pointer MSB
320	.8d68	ee f1 02	inc $02f1	                inc sramWorkspace.bank ; move to next bank
321	.8d6b	ad f1 02	lda $02f1	                lda sramWorkspace.bank
322	.8d6e	c9 08		cmp #$08	                cmp #8
323	.8d70	b0 2e		bcs $8da0	                bcs jmpBadAddressError ; bad address error if definitely past end of pseudo-addressable area
324	.8d72	da		phx		                phx
325	.8d73	20 88 8c	jsr $8c88	                jsr checkROMID  ; perform other ROM ID checks
326	.8d76	d0 28		bne $8da0	                bne jmpBadAddressError ; bad address error if bad
327	.8d78	fa		plx		                plx
328	.8d79	a0 10		ldy #$10	                ldy #<dataBankStart

330						                ; Subtract dataBankSize from count of bytes remaining
331	.8d7b	ad ef 02	lda $02ef	                lda sramWorkspace.length+0
332	.8d7e	38		sec		                sec
333	.8d7f	e9 f0		sbc #$f0	                sbc #<dataBankSize
334	.8d81	8d ef 02	sta $02ef	                sta sramWorkspace.length+0
335	.8d84	ad f0 02	lda $02f0	                lda sramWorkspace.length+1
336	.8d87	e9 3f		sbc #$3f	                sbc #>dataBankSize
337	.8d89	8d f0 02	sta $02f0	                sta sramWorkspace.length+1
338	.8d8c	18		clc		                clc
339	.8d8d	20 9f 8f	jsr $8f9f	                jsr initSRAMTransferDataPointer

341	.8d90					L8D53:
342	.8d90	ad f1 02	lda $02f1	                lda sramWorkspace.bank
343	.8d93	18		clc		                clc

345	.8d94					locret_8D57:
346	.8d94	60		rts		                rts

348						;-------------------------------------------------------------------------

350	.8d95					parse16BitHexAddressFromCommandLine:
351	.8d95	20 74 95	jsr $9574	                jsr parseHexAddressFromCommandLine
352	.8d98					checkParameterBlockAddressIs16Bit:
353	.8d98	bd ef 02	lda $02ef,x	                lda sramWorkspace.length+0,x
354	.8d9b	1d f0 02	ora $02f0,x	                ora sramWorkspace.length+1,x
355	.8d9e	f0 f4		beq $8d94	                beq locret_8D57

357	.8da0					jmpBadAddressError:
358	.8da0	4c 64 95	jmp $9564	                jmp badAddressError

360						;-------------------------------------------------------------------------
361						;
362						; Read I from command line. From Master Compact app note: ``A facility
363						; to load an SRAM image and update the MOS ROM type table has been
364						; added. An "I" should be added to the *SRLOAD command.''
365						;
367	.8da3					readImmediateFlag:
368	.8da3	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
369	.8da6	29 df		and #$df	                and #$DF
370	.8da8	c9 49		cmp #$49	                cmp #'I'
371	.8daa	d0 0d		bne $8db9	                bne L8D7C
372	.8dac	c8		iny		                iny
373	.8dad	ad ee 02	lda $02ee	                lda sramWorkspace.type
374	.8db0	c9 80		cmp #$80	                cmp #$80
375	.8db2	d0 3d		bne $8df1	                bne jmpBadCommandError8DB4 ; "Bad command" if not *SRLOAD
376	.8db4	09 20		ora #$20	                ora #$20                   ; set bit 5 to indicate I
377	.8db6	8d ee 02	sta $02ee	                sta sramWorkspace.type

379	.8db9					L8D7C:
380	.8db9	4c be f3	jmp $f3be	                jmp skipSpacesAndCheckForCRInStringInput

383						;-------------------------------------------------------------------------
384						;
385						; C=0 for *SRREAD
386						;
387	.8dbc					starSRREADOrStarSRWRITE:
391	.8dbc	0a		asl a		                asl a
392	.8dbd	8d ee 02	sta $02ee	                sta sramWorkspace.type

395	.8dc0	a2 09		ldx #$09	                ldx #sramWorkspace.dataAddress-osfileParameterBlock
396	.8dc2	20 74 95	jsr $9574	                jsr parseHexAddressFromCommandLine
397	.8dc5	20 91 8f	jsr $8f91	                jsr checkForPlusInCommandLine
398	.8dc8	a2 02		ldx #$02	                ldx #sramWorkspace.length-osfileParameterBlock
399	.8dca	20 74 95	jsr $9574	                jsr parseHexAddressFromCommandLine
400	.8dcd	70 10		bvs $8ddf	                bvs L8DA2 ; taken if + encountered, so +2 is already the length

402						                ; sramWorkspace.length is actually the end address -
403						                ; substract start address to turn it into the length.
404	.8dcf	a2 fc		ldx #$fc	                ldx #$FC

406	.8dd1					L8D94:
407	.8dd1	bd f3 01	lda $01f3,x	                lda sramWorkspace.length-$FC,x
408	.8dd4	fd fa 01	sbc $01fa,x	                sbc sramWorkspace.dataAddress-$FC,x
409	.8dd7	9d f3 01	sta $01f3,x	                sta sramWorkspace.length-$FC,x
410	.8dda	e8		inx		                inx
411	.8ddb	d0 f4		bne $8dd1	                bne L8D94
412	.8ddd	90 c1		bcc $8da0	                bcc jmpBadAddressError ; taken if end<start

414	.8ddf					L8DA2:
415						                ; Check length is a 16 bit quantity
416	.8ddf	a2 02		ldx #$02	                ldx #sramWorkspace.length-osfileParameterBlock
417	.8de1	20 98 8d	jsr $8d98	                jsr checkParameterBlockAddressIs16Bit

419						                ; Parse SRAM address
420	.8de4	a2 05		ldx #$05	                ldx #sramWorkspace.sramAddress-osfileParameterBlock
421	.8de6	20 95 8d	jsr $8d95	                jsr parse16BitHexAddressFromCommandLine

423						                ; Read ROM ID
424	.8de9	20 bc 8c	jsr $8cbc	                jsr readROMID

427	.8dec	20 a3 8d	jsr $8da3	                jsr readImmediateFlag
429	.8def	f0 03		beq $8df4	                beq doSidewaysRAMBlockTransfer

431	.8df1					jmpBadCommandError8DB4:
432	.8df1	4c 60 fb	jmp $fb60	                jmp badCommandError

434	.8df4					doSidewaysRAMBlockTransfer:
435	.8df4	08		php		                php
436	.8df5	20 53 8c	jsr $8c53	                jsr convertSidewaysRAMPseudoAddress
437	.8df8	f0 03		beq $8dfd	                beq L8DC0
438	.8dfa	20 b1 8c	jsr $8cb1	                jsr badIdError  ; should be a jmp; will never return
439	.8dfd					L8DC0:
440	.8dfd	20 7d 8f	jsr $8f7d	                jsr L8F40
448	.8e00	20 16 8d	jsr $8d16	                jsr L8CD9
449	.8e03	28		plp		                plp
453	.8e04	4c f4 f8	jmp $f8f4	                jmp LF8D1

456						;-------------------------------------------------------------------------

481						;-------------------------------------------------------------------------

483	.8e07					starSRLOADOrStarSRSAVE:
487	.8e07	0a		asl a		                asl a
488	.8e08	8d ee 02	sta $02ee	                sta sramWorkspace.type
490	.8e0b	4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
491	.8e0e	86 f2		stx $f2		                stx stringInputBufferAddress
492	.8e10	84 f3		sty $f3		                sty stringInputBufferAddress+1
493	.8e12	8e ef 02	stx $02ef	                stx sramWorkspace.length+0
494	.8e15	8c f0 02	sty $02f0	                sty sramWorkspace.length+1
495	.8e18	a0 00		ldy #$00	                ldy #0
496	.8e1a	20 2c f3	jsr $f32c	                jsr gsinitForFilenameParsing

498	.8e1d					L8DE0:
499	.8e1d	20 3e f3	jsr $f33e	                jsr gsreadEntryPoint
500	.8e20	90 fb		bcc $8e1d	                bcc L8DE0
501	.8e22	a2 05		ldx #$05	                ldx #5
502	.8e24	20 95 8d	jsr $8d95	                jsr parse16BitHexAddressFromCommandLine
503	.8e27	2c ee 02	bit $02ee	                bit sramWorkspace.type
504	.8e2a	30 1e		bmi $8e4a	                bmi L8E0D
505	.8e2c	20 91 8f	jsr $8f91	                jsr checkForPlusInCommandLine
506	.8e2f	a2 07		ldx #$07	                ldx #7
507	.8e31	20 95 8d	jsr $8d95	                jsr parse16BitHexAddressFromCommandLine
508	.8e34	70 14		bvs $8e4a	                bvs L8E0D
509	.8e36	38		sec		                sec
510	.8e37	a2 fe		ldx #$fe	                ldx #$FE

512	.8e39					L8DFC:
513	.8e39	bd f6 01	lda $01f6,x	                lda sramWorkspace.sramAddress+2-$FE,x
514	.8e3c	fd f4 01	sbc $01f4,x	                sbc sramWorkspace.sramAddress+0-$FE,x
515	.8e3f	9d f6 01	sta $01f6,x	                sta sramWorkspace.sramAddress+2-$FE,x
516	.8e42	e8		inx		                inx
517	.8e43	d0 f4		bne $8e39	                bne L8DFC
518	.8e45	b0 03		bcs $8e4a	                bcs L8E0D
519	.8e47	4c a0 8d	jmp $8da0	                jmp jmpBadAddressError

521						;-------------------------------------------------------------------------

523	.8e4a					L8E0D:
524	.8e4a	20 bc 8c	jsr $8cbc	                jsr readROMID
525	.8e4d	9c f8 02	stz $02f8	                stz sramWorkspace.dataAddress+2
529	.8e50	a2 00		ldx #$00	                ldx #0
532	.8e52	20 a3 8d	jsr $8da3	                jsr readImmediateFlag
534	.8e55	29 df		and #$df	                and #$DF
538	.8e57	c9 51		cmp #$51	                cmp #'Q'
542	.8e59	d0 02		bne $8e5d	                bne L8E20
553	.8e5b	ca		dex		                dex
554	.8e5c	c8		iny		                iny

557	.8e5d					L8E20:
558	.8e5d	8e f9 02	stx $02f9	                stx sramWorkspace.dataAddress+3
559	.8e60	ae 34 fe	ldx $fe34	                ldx ACCCON
563	.8e63	20 a3 8d	jsr $8da3	                jsr readImmediateFlag
565	.8e66	f0 16		beq $8e7e	                beq L8E41
566	.8e68	4c f1 8d	jmp $8df1	                jmp jmpBadCommandError8DB4

568						;-------------------------------------------------------------------------

570	.8e6b					osword43:
571	.8e6b	ae 34 fe	ldx $fe34	                ldx ACCCON
572	.8e6e	20 47 ee	jsr $ee47	                jsr selectHAZEL
573	.8e71	9c c6 df	stz $dfc6	                stz hazel.tempFSFlag
574	.8e74	a0 0b		ldy #$0b	                ldy #$B

576	.8e76					L8E39:
577	.8e76	b1 f0		lda ($f0),y	                lda (originalX),y
578	.8e78	99 ee 02	sta $02ee,y	                sta sramWorkspace.type,y
579	.8e7b	88		dey		                dey
580	.8e7c	10 f8		bpl $8e76	                bpl L8E39

586	.8e7e					L8E41:
587	.8e7e	08		php		                php
588	.8e7f	da		phx		                phx
589	.8e80	20 53 8c	jsr $8c53	                jsr convertSidewaysRAMPseudoAddress
590	.8e83	f0 03		beq $8e88	                beq L8E4B
591	.8e85	4c b1 8c	jmp $8cb1	                jmp badIdError
592	.8e88					L8E4B:
593	.8e88	ad f9 02	lda $02f9	                lda sramWorkspace.dataAddress+3
594	.8e8b	30 0b		bmi $8e98	                bmi L8E5B
595	.8e8d	0d f8 02	ora $02f8	                ora sramWorkspace.dataAddress+2
596	.8e90	d0 1d		bne $8eaf	                bne L8E72
597	.8e92	a9 02		lda #$02	                lda #2
598	.8e94	a0 dd		ldy #$dd	                ldy #>hazel.ddxx
599	.8e96	80 0b		bra $8ea3	                bra L8E66

601						;-------------------------------------------------------------------------

603	.8e98					L8E5B:
604	.8e98	20 70 f2	jsr $f270	                jsr osbyte84
605	.8e9b	98		tya		                tya
606	.8e9c	38		sec		                sec
607	.8e9d	ed 44 02	sbc $0244	                sbc oshwm
608	.8ea0	ac 44 02	ldy $0244	                ldy oshwm

610	.8ea3					L8E66:
611	.8ea3	9c f6 02	stz $02f6	                stz sramWorkspace.dataAddress+0
612	.8ea6	8c f7 02	sty $02f7	                sty sramWorkspace.dataAddress+1
613	.8ea9	9c f8 02	stz $02f8	                stz sramWorkspace.dataAddress+2
614	.8eac	8d f9 02	sta $02f9	                sta sramWorkspace.dataAddress+3

616	.8eaf					L8E72:
617	.8eaf	2c ee 02	bit $02ee	                bit sramWorkspace.type
618	.8eb2	10 38		bpl $8eec	                bpl L8EAF
619	.8eb4	a9 40		lda #$40	                lda #findOpenForRead
620	.8eb6	20 58 8f	jsr $8f58	                jsr sramOpenFile

622	.8eb9					L8E7C:
623	.8eb9	38		sec		                sec
624	.8eba	20 2a 8f	jsr $8f2a	                jsr L8EED
625	.8ebd	a9 04		lda #$04	                lda #gbpbGetBytesCurrentPTR
626	.8ebf	20 51 8f	jsr $8f51	                jsr sramOSGBPB
627	.8ec2	08		php		                php
628	.8ec3	90 0e		bcc $8ed3	                bcc L8E96
629	.8ec5	a2 fe		ldx #$fe	                ldx #$FE

631	.8ec7					L8E8A:
632	.8ec7	bd f1 01	lda $01f1,x	                lda sramWorkspace.length+0-$FE,x

634	.8eca					L8E8D:
635	.8eca	fd ce de	sbc $dece,x	                sbc hazel.moveOSGBPB+OSGBPBParameterBlock.count+0-$fe,x
636	.8ecd	9d f1 01	sta $01f1,x	                sta sramWorkspace.length+0-$FE,x
637	.8ed0	e8		inx		                inx
638	.8ed1	d0 f4		bne $8ec7	                bne L8E8A

640	.8ed3					L8E96:
641	.8ed3	20 16 8d	jsr $8d16	                jsr L8CD9
642	.8ed6	28		plp		                plp
643	.8ed7	90 e0		bcc $8eb9	                bcc L8E7C

645	.8ed9					L8E9C:
646	.8ed9	ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle
647	.8edc	9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
648	.8edf	a9 00		lda #$00	                lda #0
649	.8ee1	20 ce ff	jsr $ffce	                jsr OSFIND
650	.8ee4	68		pla		                pla
651	.8ee5	8d 34 fe	sta $fe34	                sta ACCCON
652	.8ee8	28		plp		                plp
656	.8ee9	4c f4 f8	jmp $f8f4	                jmp LF8D1

659						;-------------------------------------------------------------------------

661	.8eec					L8EAF:
662	.8eec	a9 80		lda #$80	                lda #findOpenForWrite
663	.8eee	20 58 8f	jsr $8f58	                jsr sramOpenFile

665	.8ef1					L8EB4:
666	.8ef1	38		sec		                sec
667	.8ef2	a2 fe		ldx #$fe	                ldx #$FE

669	.8ef4					L8EB7:
670	.8ef4	bd f6 01	lda $01f6,x	                lda sramWorkspace.sramAddress+2-$FE,x
671	.8ef7	9d b2 ff	sta $ffb2,x	                sta @w sramTransferPointers-$fe,x
672	.8efa	fd fa 01	sbc $01fa,x	                sbc sramWorkspace.dataAddress+2-$FE,x
673	.8efd	9d f6 01	sta $01f6,x	                sta sramWorkspace.sramAddress+2-$FE,x
674	.8f00	e8		inx		                inx
675	.8f01	d0 f1		bne $8ef4	                bne L8EB7
676	.8f03	0d f4 02	ora $02f4	                ora sramWorkspace.sramAddress+2
677	.8f06	08		php		                php
678	.8f07	20 2a 8f	jsr $8f2a	                jsr L8EED
679	.8f0a	20 16 8d	jsr $8d16	                jsr L8CD9
680	.8f0d	a9 02		lda #$02	                lda #gbpbPutBytesCurrentPTR
681	.8f0f	20 51 8f	jsr $8f51	                jsr sramOSGBPB
682	.8f12	28		plp		                plp
683	.8f13	90 c4		bcc $8ed9	                bcc L8E9C
684	.8f15	f0 c2		beq $8ed9	                beq L8E9C
685	.8f17	80 d8		bra $8ef1	                bra L8EB4

687						;-------------------------------------------------------------------------

696						;-------------------------------------------------------------------------
697						;
698						; OSBYTE 68 (&44) - Test RAM presence [MasRef D.2-28]
699						;
700	.8f19					osbyte44:
701	.8f19	a9 00		lda #$00	                lda #0
702	.8f1b	a2 07		ldx #$07	                ldx #7
703	.8f1d					osbyte44Loop:
704	.8f1d	48		pha		                pha
705	.8f1e	20 bd f8	jsr $f8bd	                jsr isBankROM
706	.8f21	68		pla		                pla
707	.8f22	2a		rol a		                rol a
708	.8f23	ca		dex		                dex
709	.8f24	e0 04		cpx #$04	                cpx #4
710	.8f26	b0 f5		bcs $8f1d	                bcs osbyte44Loop
711	.8f28	aa		tax		                tax
712	.8f29	60		rts		                rts

714						;-------------------------------------------------------------------------

716	.8f2a					L8EED:
717	.8f2a	ad d4 df	lda $dfd4	                lda hazel.moveSrcHandle
718	.8f2d	8d c7 df	sta $dfc7	                sta hazel.moveOSGBPB.handle
719	.8f30	a2 01		ldx #$01	                ldx #1

721	.8f32					L8EF5:
722	.8f32	bd f6 02	lda $02f6,x	                lda sramWorkspace.dataAddress+0,x
723	.8f35	9d c8 df	sta $dfc8,x	                sta hazel.moveOSGBPB.addr,x
724	.8f38	bd f8 02	lda $02f8,x	                lda sramWorkspace.dataAddress+2,x
725	.8f3b	b0 02		bcs $8f3f	                bcs L8F02
726	.8f3d	b5 b0		lda $b0,x	                lda sramTransferPointers.src,x

728	.8f3f					L8F02:
729	.8f3f	9d cc df	sta $dfcc,x	                sta hazel.moveOSGBPB.numBytes,x
730	.8f42	9d ef 02	sta $02ef,x	                sta sramWorkspace.length+0,x
731	.8f45	a9 ff		lda #$ff	                lda #$FF
732	.8f47	9d ca df	sta $dfca,x	                sta hazel.moveOSGBPB.addr+2,x ; address is in I/O processor
733	.8f4a	9e ce df	stz $dfce,x	                stz hazel.moveOSGBPB.numBytes+2,x ; size is 16-bit quantity
734	.8f4d	ca		dex		                dex
735	.8f4e	10 e2		bpl $8f32	                bpl L8EF5
736	.8f50	60		rts		                rts

739						;-------------------------------------------------------------------------

741	.8f51					sramOSGBPB:
742	.8f51	a2 c7		ldx #$c7	                ldx #<hazel.moveOSGBPB
743	.8f53	a0 df		ldy #$df	                ldy #>hazel.moveOSGBPB
744	.8f55	4c d1 ff	jmp $ffd1	                jmp OSGBPB

747						;-------------------------------------------------------------------------

749	.8f58					sramOpenFile:
750	.8f58	0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
751	.8f5b	ae ef 02	ldx $02ef	                ldx sramWorkspace.length+0
752	.8f5e	ac f0 02	ldy $02f0	                ldy sramWorkspace.length+1
753	.8f61	20 ce ff	jsr $ffce	                jsr OSFIND
754	.8f64	aa		tax		                tax
755	.8f65	d0 13		bne $8f7a	                bne sramFileFound
756	.8f67	20 ff ae	jsr $aeff	                jsr doFollowingError
757	>8f6a	d6				                .byte $D6
758	>8f6b	46 69 6c 65 20 6e 6f 74		                .text "File not found"
	>8f73	20 66 6f 75 6e 64
759	>8f79	00				                .byte 0

761	.8f7a					sramFileFound:
762	.8f7a	8d d4 df	sta $dfd4	                sta hazel.moveSrcHandle
763	.8f7d					L8F40:
764	.8f7d	ae f1 02	ldx $02f1	                ldx sramWorkspace.bank ; ROM number of interest
765	.8f80	2c ee 02	bit $02ee	                bit sramWorkspace.type
766	.8f83	10 07		bpl $8f8c	                bpl rts8F4F ; taken if reading
767	.8f85	70 05		bvs $8f8c	                bvs rts8F4F ; taken if pseudo addressing

769						                ; writing, absolute addressing
770	.8f87					setROMXType6502:
771	.8f87	a9 02		lda #$02	                lda #romType6502
772	.8f89	9d a1 02	sta $02a1,x	                sta romInformationTable,x

774	.8f8c					rts8F4F:
775	.8f8c	60		rts		                rts

778						;-------------------------------------------------------------------------

780	.8f8d					sramBank4567ModeMasks:
781	>8f8d	01				                .byte 1         ; bank 4
782	>8f8e	02				                .byte 2         ; bank 5
783	>8f8f	04				                .byte 4         ; bank 6
784	>8f90	08				                .byte 8         ; bank 7

786						;-------------------------------------------------------------------------
787						;
788						; Check to see if next char on command line is +.
789						;
790						; Entry:
791						;
792						; (stringInputBufferAddress),y = next char on command line
793						;
794						; Exit:
795						;
796						; V=0 if not +
797						;
798						; V=1 if +. (stringInputBufferAddress),y = next non-space after the +

800	.8f91					checkForPlusInCommandLine:
801	.8f91	b8		clv		                clv
802	.8f92	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
803	.8f94	c9 2b		cmp #$2b	                cmp #'+'
804	.8f96	d0 06		bne $8f9e	                bne locret_8F61
805	.8f98	2c 70 e3	bit $e370	                bit valueFF
806	.8f9b	20 bd f3	jsr $f3bd	                jsr incAndSkipSpaces

808	.8f9e					locret_8F61:
809	.8f9e	60		rts		                rts

812						;-------------------------------------------------------------------------
813						;
814						; Adjust sram transfer data pointer so that the same Y register can be
815						; used for both sram pointer and data pointer.
816						;
817						; Entry:
818						;
819						; X = offset of sram transfer sram pointer (0=src, 2=dest)
820						; Y = value to subtract from sram transfer data pointer
821						;
822						; C=1 = initialise sram transfer data pointer from data address
823						;
824						; Exit:
825						;
826						; sram transfer data pointer has had Y subtracted
827						;
828	.8f9f					initSRAMTransferDataPointer: .proc
829	.8f9f	da		phx		                phx
830						                ; select the non-sram data pointer
831	.8fa0	8a		txa		                txa
832	.8fa1	49 02		eor #$02	                eor #sramTransferPointers.src^sramTransferPointers.dest
833	.8fa3	aa		tax		                tax
834	.8fa4	90 0a		bcc $8fb0	                bcc subtractY

836						                ; store data address in the non-sram pointer
837	.8fa6	ad f6 02	lda $02f6	                lda sramWorkspace.dataAddress+0
838	.8fa9	95 00		sta $00,x	                sta 0,x
839	.8fab	ad f7 02	lda $02f7	                lda sramWorkspace.dataAddress+1
840	.8fae	95 01		sta $01,x	                sta 1,x

842	.8fb0					subtractY:
843	.8fb0	8c ed 02	sty $02ed	                sty sramWorkspace.temp ; sram address LSB
844	.8fb3	b5 00		lda $00,x	                lda 0,x
845	.8fb5	38		sec		                sec
846	.8fb6	ed ed 02	sbc $02ed	                sbc sramWorkspace.temp
847	.8fb9	95 00		sta $00,x	                sta 0,x
848	.8fbb	b0 02		bcs $8fbf	                bcs +
849	.8fbd	d6 01		dec $01,x	                dec 1,x
850	.8fbf					+
851	.8fbf	fa		plx		                plx
852	.8fc0	60		rts		                rts
853						                .endproc

855						;-------------------------------------------------------------------------
856						;
857						; Get bank mode: pseudo, or absolute.
858						;
859						; (Only banks 4-7 can be used with pseudo addressing, but you can test
860						; any.)
861						;
862						; Entry:
863						;
864						; X = bank of interest
865						;
866						; Exit:
867						;
868						; A=$00 if absolute (C=1 as well, if bank could only ever be absolute)
869						;
870						; A=$40 if pseudo

872	.8fc1					sramGetBankMode:
873	.8fc1	e0 04		cpx #$04	                cpx #4
874	.8fc3	90 1c		bcc $8fe1	                bcc bankModeIsInherentlyAbsolute ; taken if <4
875	.8fc5	e0 08		cpx #$08	                cpx #8
876	.8fc7	b0 18		bcs $8fe1	                bcs bankModeIsInherentlyAbsolute ; taken if >=8

878	.8fc9					osbyte45:
879						                ; When entered as OSBYTE $45, the X register is bogus,
880						                ; so the table lookup could read junk and the AND
881						                ; could end up meaningless. But that doesn't matter:
882						                ; it's only the value in X on exit that's important.
883	.8fc9	ac 34 fe	ldy $fe34	                ldy ACCCON
884	.8fcc	20 47 ee	jsr $ee47	                jsr selectHAZEL ; engage HAZEL
885	.8fcf	bd 89 8f	lda $8f89,x	                lda sramBank4567ModeMasks-4,x ; acquire mask: 1/2/4/8 for banks
886						                                 ; 4/5/6/7 respectively
887	.8fd2	ae de df	ldx $dfde	                ldx hazel.sramBankModes ; load current settings into X, in case this is OSBYTE $45
888	.8fd5	2d de df	and $dfde	                and hazel.sramBankModes
889	.8fd8	f0 02		beq $8fdc	                beq +           ; taken with A=$00 if bank of interest
890						                                ; is absolute
891	.8fda	a9 40		lda #$40	                lda #$40        ; indicate pseudo
892	.8fdc					+
893	.8fdc	8c 34 fe	sty $fe34	                sty ACCCON
894	.8fdf	18		clc		                clc
895	.8fe0	60		rts		                rts

897	.8fe1					bankModeIsInherentlyAbsolute:
898	.8fe1	38		sec		                sec
899	.8fe2	a9 00		lda #$00	                lda #0
900	.8fe4	60		rts		                rts

:5	;******  Return to file: src/terminal.s65

943						                .include "osbyte_osword_table.s65"

:9	;******  Processing file: src/osbyte_osword_table.s65

1						; OSBYTE Dispatch Table
2						; =====================

4						; TODO structure probably the same as
5						; https://tobylobster.github.io/mos/mos/S-s15.html#SP1...

7						; entry:
8						;
9						; A = OSBYTE A
10						;
11						; X = OSBYTE X
12						;
13						; Y = OSBYTE Y
14						;
15						; ?originalA, ?originalX, ?originalY = OSBYTE arguments
16						;
17						; C=1
18						;
19						; N/Z set as per X
20						;

22	.8fe5					osbyteAndOSWORDRoutineTable:
23						                ;Display MOS version D.2-18
24	>8fe5	1e f0				                .word osbyte00

26						                ;Write user flag D.2-18
27	>8fe7	7f f1				                .word osbyte01

29						                ;Specify input stream D.2-18
33	>8fe9	50 ed				                .word osbyte02

36						                ;Specify output stream D.2-19
37	>8feb	54 f1				                .word osbyte03

39						                ;Enable/disable cursor editing
40	>8fed	87 f1				                .word osbyte04

42						                ;Write printer driver type D.2-20
43	>8fef	6d f1				                .word osbyte05

45						                ;Write printer ignore character D.2-21
46	>8ff1	64 f1				                .word osbyte06

48						                ;Write RS423 receive rate D.2-21
52	>8ff3	09 ed				                .word osbyte07

55						                ;Write RS423 transmit rate D.2-22
59	>8ff5	07 ed				                .word osbyte08

62						                ;Write duration of first colour D.2-22
63	>8ff7	2e ed				                .word osbyte09

65						                ;Write duration of second colour D.2-22
66	>8ff9	30 ed				                .word osbyte0A

68						                ;Write keyboard auto-repeat delay D.2-22
69	>8ffb	85 f1				                .word osbyte0B

71						                ;Write keyboard auto-repeat rate D.2-23
72	>8ffd	83 f1				                .word osbyte0C

74						                ;Disable event D.2-23
75	>8fff	76 ed				                .word osbyte0D

77						                ;Enable event D.2-24
78	>9001	77 ed				                .word osbyte0E

80						                ;Flush buffer D.2-24
81	>9003	70 ea				                .word osbyte0F

83						                ;Write number of ADC channels D.2-25
87	>9005	83 ed				                .word osbyte10

90						                ;Write next ADC channel to be sampled D.2-25
94	>9007	76 e7				                .word osbyte11

97						                ;Reset soft keys D.2-26
98	>9009	d0 f1				                .word osbyte12

100						                ;Wait for vertical sync D.2-26
101	>900b	a6 f1				                .word osbyte13

103						                ;Restore default font definitions D.2-26
104	>900d	d2 f2				                .word osbyte14

106						                ;Flush selected buffer D.2-27
107	>900f	7c ea				                .word osbyte15

109						                ;Increment ROM polling semaphore D.2-27
110	>9011	e7 f2				                .word osbyte16

112						                ;Decrement ROM polling semaphore D.2-27
113	>9013	eb f2				                .word osbyte17

115						                ; Reserved
116	>9015	11 ee				                .word osbyteUnused

118						                ;Restore a group of font definitions D.2-28
119	>9017	d8 f2				                .word selectTerminalROMAndOSBYTE19

121						                ; Test RAM presence D.2-28
125	>9019	0d f9				                .word selectTerminalROMAndOSBYTE44

128						                ; Test pseudo/absolute use of bank D.2-29
132	>901b	13 f9				                .word selectTerminalROMAndOSBYTE45

135						                ;Write 1MHz bus selection status D.2-29
136	>901d	2b ef				                .word osbyte6B

138						                ;Write usage of main/shadow memory D.2-30
139	>901f	2f ef				                .word osbyte6C

141						                ;Make temporary Filing System permanent D.2-30
142	>9021	c5 f2				                .word osbyte6D

144						                ;Unused
145	>9023	11 ee				                .word osbyteUnused

147						                ;Unused
148	>9025	11 ee				                .word osbyteUnused

150						                ;Select main/shadow memory for VDU access D.2-31
151	>9027	e5 ed				                .word osbyte70

153						                ;Select main/shadow memory for display D.2-31
154	>9029	f5 ed				                .word osbyte71

156						                ;Write usage of shadow memory D.2-31
157	>902b	69 f1				                .word osbyte72

159						                ;Unused
160	>902d	aa ff				                .word rtsFFAA

162						                ;Unused
163	>902f	aa ff				                .word rtsFFAA

165						                ;Read VDU status D.2-32
166	>9031	64 f0				                .word osbyte75

168						                ;Reflect keyboard status in keyboard LEDs D.2-33
169	>9033	ef f2				                .word osbyte76

171						                ;Close all *SPOOL/*SPOOLON or *EXEC files D.2-33
175	>9035	e0 ea				                .word selectTerminalROMAndOSBYTE77

178						                ;Write keys pressed information D.2-33
179	>9037	a7 f7				                .word osbyte78

181						                ;Keyboard scan D.2-33
182	>9039	9e f7				                .word callKEYV

184						                ;Keyboard scan from 16 decimal
185	>903b	ac f7				                .word osbyte7A

187						                ;Inform MOS of printer driver going dormant
188	>903d	5a ea				                .word osbyte7B

190						                ;Clear escape condition
191	>903f	fb ec				                .word osbyte7C

193						                ;Set escape condition
194	>9041	fc ec				                .word osbyte7D

196						                ;Acknowledge escape condition
197	>9043	e1 ec				                .word osbyte7E

199						                ;Check for end of file on an opened file
200	>9045	99 f2				                .word osbyte7F

202						                ;Read ADC channel or get buffer status
206	>9047	cc ed				                .word osbyte80

209						                ;Read key with time limit
210	>9049	8b ed				                .word osbyte81

212						                ;Read machine high order address
213	>904b	a2 ed				                .word osbyte82

215						                ;Read Operating System High Water Mark (OSHWM)
216	>904d	a1 f7				                .word osbyte83

218						                ;Read top of user RAM
219	>904f	70 f2				                .word osbyte84

221						                ;Read top of user RAM for given mode
222	>9051	86 f2				                .word osbyte85

224						                ;Read text cursor position
225	>9053	79 e2				                .word osbyte86

227						                ;Read screen mode and character at text cursor position
228	>9055	92 f2				                .word osbyte87

230						                ;Execute user code
231	>9057	dc ec				                .word osbyte88

238	>9059	11 ee				                .word osbyteUnused

241						                ;Insert character code into buffer
242	>905b	6a eb				                .word osbyte8A

244						                ;Write Filing System options
245	>905d	98 f2				                .word osbyte8B

250	>905f	11 ee				                .word osbyteUnused

254						                ;Select ROM Filing System
255	>9061	27 ee				                .word osbyte8C8D

257						                ;Enter language ROM
258	>9063	e9 e4				                .word osbyte8E

260						                ;Issue paged ROM service request
261	>9065	90 ee				                .word osbyte8F

263						                ;Set vertical screen shift and interlace option
264	>9067	30 f4				                .word osbyte90

266						                ;Get character from buffer
267	>9069	1f eb				                .word osbyte91

269						                ;Read from FRED (&FC00 - &FCFF)
270	>906b	3a f7				                .word osbyte92

272						                ;Write to FRED (&FC00 - &FCFF)
273	>906d	4b f4				                .word osbyte93

275						                ;Read from JIM (&FD00 - &FDFF)
276	>906f	4a f7				                .word osbyte94

278						                ;Write to JIM (&FD00 - &FDFF)
279	>9071	41 f4				                .word osbyte95

281						                ;Read from SHEILA (&FE00 - &FEFF)
282	>9073	ab ff				                .word osbyte96

284						                ;Write to SHEILA (&FE00 - &FEFF)
285	>9075	46 f4				                .word osbyte97

287						                ;Examine buffer status
288	>9077	1a eb				                .word osbyte98

290						                ;Insert character code into buffer checking for escape
294	>9079	ab eb				                .word osbyte99

297						                ;Write video ULA control register
298	>907b	0e f3				                .word osbyte9A

300						                ;Write to video ULA palette register and copy
301	>907d	1f f3				                .word osbyte9B

303						                ;Read/write serial ACIA control register and copy
307	>907f	3f ea				                .word osbyte9C

310						                ;Write byte across Tube
311	>9081	af ff				                .word osbyte9D

313						                ;reserved for the speech system
314	>9083	11 ee				                .word osbyteUnused

316						                ;reserved for the speech system
317	>9085	11 ee				                .word osbyteUnused

319						                ;Read VDU variable value
320	>9087	b0 f1				                .word osbyteA0

322						                ;Read CMOS RAM
326	>9089	1b ee				                .word osbyteA1

329						                ;Write CMOS RAM
333	>908b	21 ee				                .word osbyteA2

336						                ;reserved for applications software
337	>908d	11 ee				                .word osbyteUnused

339						                ;Check processor type
340	>908f	60 e5				                .word osbyteA4

342						                ;Read output cursor position
343	>9091	4d e2				                .word osbyteA5

345						                ;handle osbyte A6-FF
346	>9093	8c f1				                .word osbyteA6

348						                ;*LINE - not part of the above table???
349	>9095	de ec				                .word callUSERV

351						;-------------------------------------------------------------------------
352						;
353						; OSWORD dispatch table. Must follow on from the OSBYTE table.
354						;
355						; entry:
356						;
357						; A = 0th byte of parameter block
358						;
359						; X = OSWORD X
360						;
361						; Y = 0
362						;
363						; ?originalA, ?originalX, ?originalY = OSWORD arguments
364						;
365						; C=1
366						;
367						; N/Z set as per X
368						;
369	.9097					oswordRoutineTable:

371						;Read line from input stream to memory
372	>9097	e0 f0				                .word osword00

374						                ;Read system clock
375	>9099	b3 f0				                .word osword01

377						                ;Write system clock
378	>909b	c6 f0				                .word osword02

380						                ;Read interval timer
381	>909d	af f0				                .word osword03

383						                ;Write interval timer
384	>909f	c2 f0				                .word osword04

386						                ;Read byte from I/O processor memory
387	>90a1	0a f0				                .word osword05

389						                ;Write byte to I/O processor memory
390	>90a3	3e ef				                .word osword06

392						                ;Generate a sound
393	>90a5	2c f0				                .word osword07

395						                ;Define a sound envelope
396	>90a7	8d f0				                .word osword08

398						                ;Read pixel logical colour
399	>90a9	06 f2				                .word osword09

401						                ;Read a character definition
402	>90ab	2b f2				                .word osword0A

404						                ;Read the palette
405	>90ad	f5 f1				                .word osword0B

407						                ;Write the palette
408	>90af	43 f2				                .word osword0C

410						                ;Read current and previous graphics cursor positions
411	>90b1	51 f2				                .word osword0D

413						                ;Read CMOS clock
414	>90b3	82 ef				                .word selectTerminalROMAndOSWORD0E

416						                ;Write CMOS clock
420	>90b5	9e f2				                .word selectTerminalROMAndOSWORD0F

424	.90b7					osword42AndAboveRoutineTable:
425						                ; Sideways RAM Block Transfer
429	>90b7	19 f9				                .word selectTerminalROMAndOSWORD42

432						                ; Sideways RAM Load/Save
436	>90b9	1f f9				                .word selectTerminalROMAndOSWORD43

:5	;******  Return to file: src/terminal.s65

946						;-------------------------------------------------------------------------

949	.90bb					i2cTestReadEEPROMByte:
950	.90bb	da		phx		                phx
951	.90bc	5a		phy		                phy
952	.90bd	20 3b 9f	jsr $9f3b	                jsr i2cReadEEPROMByte
953	.90c0	7a		ply		                ply
954	.90c1	fa		plx		                plx
955	.90c2	60		rts		                rts

958						;-------------------------------------------------------------------------

1080						;-------------------------------------------------------------------------
1081						;
1082						; [MasRef G.5-8]
1083						;
1084	.90c3					starPRINT:
1085	.90c3	a9 c0		lda #$c0	                lda #$C0
1086	.90c5	8d c2 df	sta $dfc2	                sta hazel.fsFlags
1087	.90c8	80 12		bra $90dc	                bra L8ED2

1089						;-------------------------------------------------------------------------

1091	.90ca					starLIST:
1092	.90ca	4e c2 df	lsr $dfc2	                lsr hazel.fsFlags
1093	.90cd	9c c3 df	stz $dfc3	                stz hazel.lineNumberBCD+0
1094	.90d0	9c c4 df	stz $dfc4	                stz hazel.lineNumberBCD+1
1095	.90d3	80 04		bra $90d9	                bra L8ECF

1097						;-------------------------------------------------------------------------

1099	.90d5					starTYPE:
1100	.90d5	38		sec		                sec
1101	.90d6	6e c2 df	ror $dfc2	                ror hazel.fsFlags
1102	.90d9					L8ECF:
1103	.90d9	4e c2 df	lsr $dfc2	                lsr hazel.fsFlags
1104	.90dc					L8ED2:
1105	.90dc	9c c5 df	stz $dfc5	                stz hazel.lastCharPrinted
1106	.90df	20 b4 a9	jsr $a9b4	                jsr openFileForReading
1107	.90e2					L8ED8:
1108	.90e2	24 ff		bit $ff		                bit $FF
1109	.90e4	30 52		bmi $9138	                bmi handleESCAPEWithFileOpen
1110	.90e6	20 d7 ff	jsr $ffd7	                jsr OSBGET
1111	.90e9	b0 2e		bcs $9119	                bcs closeFile
1112	.90eb	2c c2 df	bit $dfc2	                bit hazel.fsFlags
1113	.90ee	70 05		bvs $90f5	                bvs L8EEB
1114	.90f0	48		pha		                pha
1115	.90f1	20 00 94	jsr $9400	                jsr printLineNumber
1116	.90f4	68		pla		                pla
1117	.90f5					L8EEB:
1118	.90f5	2c c2 df	bit $dfc2	                bit hazel.fsFlags
1119	.90f8	30 14		bmi $910e	                bmi L8F04
1120	.90fa	c9 0d		cmp #$0d	                cmp #$0D
1121	.90fc	f0 20		beq $911e	                beq L8F14
1122	.90fe	c9 0a		cmp #$0a	                cmp #$0A
1123	.9100	f0 1c		beq $911e	                beq L8F14
1124	.9102	8d c5 df	sta $dfc5	                sta hazel.lastCharPrinted
1125	.9105	c9 22		cmp #$22	                cmp #'"'
1126	.9107	f0 05		beq $910e	                beq L8F04
1127	.9109	20 52 98	jsr $9852	                jsr printGSREADChar
1128	.910c	80 03		bra $9111	                bra L8F07

1130	.910e					L8F04:
1131	.910e	20 ee ff	jsr $ffee	                jsr OSWRCH
1132	.9111					L8F07:
1133	.9111	20 44 91	jsr $9144	                jsr bgetAndCheckForESCAPE
1134	.9114	90 df		bcc $90f5	                bcc L8EEB
1135	.9116					printNewLineThenCloseFile:
1136	.9116	20 e7 ff	jsr $ffe7	                jsr OSNEWL
1137	.9119					closeFile:
1138	.9119	a9 00		lda #$00	                lda #$00
1139	.911b	4c ce ff	jmp $ffce	                jmp OSFIND

1141	.911e					L8F14:
1142	.911e	cd c5 df	cmp $dfc5	                cmp hazel.lastCharPrinted
1143	.9121	f0 10		beq $9133	                beq L8F29
1144	.9123	48		pha		                pha
1145	.9124	ad c5 df	lda $dfc5	                lda hazel.lastCharPrinted
1146	.9127	c9 0d		cmp #$0d	                cmp #$0D
1147	.9129	f0 13		beq $913e	                beq L8F34
1148	.912b	c9 0a		cmp #$0a	                cmp #$0A
1149	.912d	f0 0f		beq $913e	                beq L8F34
1150	.912f	68		pla		                pla
1151	.9130	8d c5 df	sta $dfc5	                sta hazel.lastCharPrinted
1152	.9133					L8F29:
1153	.9133	20 e7 ff	jsr $ffe7	                jsr OSNEWL
1154	.9136	80 aa		bra $90e2	                bra L8ED8

1156						;-------------------------------------------------------------------------
1157						;
1158						; Tidily handle ESCAPE when a file is open during *DUMP or whatever.
1159						; Prints a new line, closes the file, then does an Escape error.
1160						;
1161						; entry:
1162						;
1163						; Y = file handle
1164						;
1165	.9138					handleESCAPEWithFileOpen:
1166	.9138	20 16 91	jsr $9116	                jsr printNewLineThenCloseFile
1167	.913b	4c d3 ac	jmp $acd3	                jmp escapeError

1169						;-------------------------------------------------------------------------

1171	.913e					L8F34:
1172	.913e	68		pla		                pla
1173	.913f	9c c5 df	stz $dfc5	                stz hazel.lastCharPrinted
1174	.9142	80 cd		bra $9111	                bra L8F07

1176						;-------------------------------------------------------------------------
1177						;
1178						; Does an OSBGET and handles ESCAPE.
1179						;
1180						; entry:
1181						;
1182						; Y = file handle
1183						;
1184						; exit:
1185						;
1186						; A = byte read
1187						; C=1 if EOF
1188						; (as per OSBGET)
1189						;
1190	.9144					bgetAndCheckForESCAPE:
1191	.9144	20 d7 ff	jsr $ffd7	                jsr OSBGET
1192	.9147	24 ff		bit $ff		                bit $FF
1193	.9149	30 ed		bmi $9138	                bmi handleESCAPEWithFileOpen
1194	.914b	60		rts		                rts

1196						;-------------------------------------------------------------------------
1197						;
1198						; *DUMP [MasRef G.5-4]
1199						;
1200	.914c					starDUMP:
1201	.914c	86 f2		stx $f2		                stx stringInputBufferAddress+0
1202	.914e	84 f3		sty $f3		                sty stringInputBufferAddress+1
1203	.9150	a2 00		ldx #$00	                ldx #$00
1204	.9152	20 d5 94	jsr $94d5	                jsr clearOSFILEParameterBlockDWORD
1205	.9155	a2 04		ldx #$04	                ldx #$04
1206	.9157	20 d5 94	jsr $94d5	                jsr clearOSFILEParameterBlockDWORD
1207	.915a	a0 00		ldy #$00	                ldy #$00
1208	.915c	4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
1209	.915f	20 2c f3	jsr $f32c	                jsr gsinitForFilenameParsing
1210	.9162					L8F58:
1211	.9162	20 3e f3	jsr $f33e	                jsr gsreadEntryPoint
1212	.9165	90 fb		bcc $9162	                bcc L8F58
1213	.9167	f0 1a		beq $9183	                beq L8F79
1214	.9169	a2 00		ldx #$00	                ldx #$00
1215	.916b	20 74 95	jsr $9574	                jsr parseHexAddressFromCommandLine

1217	.916e	a2 03		ldx #$03	                ldx #$03
1218	.9170					-
1219	.9170	bd ed 02	lda $02ed,x	                lda osfileParameterBlock+0,x
1220	.9173	9d f1 02	sta $02f1,x	                sta osfileParameterBlock+4,x
1221	.9176	ca		dex		                dex
1222	.9177	10 f7		bpl $9170	                bpl -

1224	.9179	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
1225	.917c	f0 05		beq $9183	                beq L8F79
1226	.917e	a2 04		ldx #$04	                ldx #$04
1227	.9180	20 74 95	jsr $9574	                jsr parseHexAddressFromCommandLine
1228	.9183					L8F79:
1229	.9183	a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
1230	.9185	a6 f2		ldx $f2		                ldx stringInputBufferAddress+0
1231	.9187	0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
1232	.918a	20 b4 a9	jsr $a9b4	                jsr openFileForReading

1234	.918d	a9 02		lda #$02	                lda #argsFileGetEXT
1235	.918f	20 7a 96	jsr $967a	                jsr callOSARGSWithBuffer

1237	.9192	a2 03		ldx #$03	                ldx #$03
1238	.9194					L8F8A:
1239	.9194	b5 a8		lda $a8,x	                lda osargsBuffer,x
1240	.9196	dd ed 02	cmp $02ed,x	                cmp osfileParameterBlock+0,x
1241	.9199	90 6a		bcc $9205	                bcc L8FFB
1242	.919b	d0 03		bne $91a0	                bne L8F96
1243	.919d	ca		dex		                dex
1244	.919e	10 f4		bpl $9194	                bpl L8F8A
1245	.91a0					L8F96:
1246	.91a0	a2 03		ldx #$03	                ldx #$03
1247	.91a2					-
1248	.91a2	bd ed 02	lda $02ed,x	                lda osfileParameterBlock+0,x
1249	.91a5	95 a8		sta $a8,x	                sta osargsBuffer,x
1250	.91a7	ca		dex		                dex
1251	.91a8	10 f8		bpl $91a2	                bpl -
1252	.91aa	20 78 96	jsr $9678	                jsr setFilePointerFromOSARGSBuffer
1253	.91ad					L8FA3:
1254	.91ad	a2 00		ldx #$00	                ldx #$00
1255	.91af	20 d7 ff	jsr $ffd7	                jsr OSBGET
1256	.91b2	b0 46		bcs $91fa	                bcs L8FF0
1257	.91b4	20 4e 94	jsr $944e	                jsr L9239
1258	.91b7	48		pha		                pha
1259	.91b8	ad f1 02	lda $02f1	                lda osfileParameterBlock+4
1260	.91bb	29 07		and #$07	                and #$07
1261	.91bd	f0 15		beq $91d4	                beq L8FCA
1262	.91bf	5a		phy		                phy
1263	.91c0	a8		tay		                tay
1264	.91c1					L8FB7:
1265	.91c1	5a		phy		                phy
1266	.91c2	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
1267	>91c5	20 20 20 00			                .text "   ",0
1268	.91c9	7a		ply		                ply
1269	.91ca	a9 20		lda #$20	                lda #$20
1270	.91cc	9d f5 02	sta $02f5,x	                sta osfileParameterBlock+8,x
1271	.91cf	e8		inx		                inx
1272	.91d0	88		dey		                dey
1273	.91d1	d0 ee		bne $91c1	                bne L8FB7
1274	.91d3	7a		ply		                ply
1275	.91d4					L8FCA:
1276	.91d4	68		pla		                pla
1277	.91d5					L8FCB:
1278	.91d5	48		pha		                pha
1279	.91d6	c9 20		cmp #$20	                cmp #32
1280	.91d8	90 04		bcc $91de	                bcc nonPrintable
1281	.91da	c9 7f		cmp #$7f	                cmp #127
1282	.91dc	90 02		bcc $91e0	                bcc L8FD6                    ;taken if printable
1283	.91de					nonPrintable:
1284	.91de	a9 2e		lda #$2e	                lda #'.'          ;placeholder for non-printable chars
1285	.91e0					L8FD6:
1286	.91e0	9d f5 02	sta $02f5,x	                sta osfileParameterBlock+8,x
1287	.91e3	68		pla		                pla
1288	.91e4	20 a7 ac	jsr $aca7	                jsr printSpaceThenPrintHexByte
1289	.91e7	e8		inx		                inx
1290	.91e8	20 5d 94	jsr $945d	                jsr L9248
1291	.91eb	ad f1 02	lda $02f1	                lda osfileParameterBlock+4
1292	.91ee	29 07		and #$07	                and #$07
1293	.91f0	f0 0b		beq $91fd	                beq L8FF3
1294	.91f2	20 44 91	jsr $9144	                jsr bgetAndCheckForESCAPE
1295	.91f5	90 de		bcc $91d5	                bcc L8FCB
1296	.91f7	20 6c 94	jsr $946c	                jsr L9257
1297	.91fa					L8FF0:
1298	.91fa	4c 19 91	jmp $9119	                jmp closeFile

1300	.91fd					L8FF3:
1301	.91fd	20 6c 94	jsr $946c	                jsr L9257
1302	.9200	80 ab		bra $91ad	                bra L8FA3

1304	.9202					L8FF8:
1305	.9202	4c bc a9	jmp $a9bc	                jmp notFoundError

1307	.9205					L8FFB:
1308	.9205	20 19 91	jsr $9119	                jsr closeFile
1309	.9208	20 ff ae	jsr $aeff	                jsr doFollowingError
1310	>920b	b7 4f 75 74 73 69 64 65		                .text $b7,"Outside file",0
	>9213	20 66 69 6c 65 00

1312						;-------------------------------------------------------------------------
1313						;
1314						; *BUILD
1315						;
1316	.9219					starBUILD:
1317	.9219	4e c2 df	lsr $dfc2	                lsr hazel.fsFlags            ;clear bit 7 of fsFlags
1318	.921c	80 04		bra $9222	                bra starBUILDOrAPPEND

1320						;-------------------------------------------------------------------------
1321						;
1322						; *APPEND
1323						;
1324	.921e					starAPPEND:
1325	.921e	38		sec		                sec
1326	.921f	6e c2 df	ror $dfc2	                ror hazel.fsFlags            ;set bit 7 of fsFlags
1327	.9222					starBUILDOrAPPEND:
1328						                ; bit 7 of fsFlags indicates *BUILD (clear) or *APPEND
1329						                ; (set).
1330	.9222	9c c3 df	stz $dfc3	                stz hazel.lineNumberBCD+0    ;reset line number
1331	.9225	9c c4 df	stz $dfc4	                stz hazel.lineNumberBCD+1    ;reset line number
1332	.9228	a9 80		lda #$80	                lda #$80                     ;open for output. Assume *BUILD
1333	.922a	2c c2 df	bit $dfc2	                bit hazel.fsFlags            ;test *BUILD/*APPEND
1334	.922d	10 02		bpl $9231	                bpl +                        ;branch taken if *BUILD
1335	.922f	a9 c0		lda #$c0	                lda #$C0                     ;*APPEND, so open for update
1336	.9231					+
1337	.9231	20 ce ff	jsr $ffce	                jsr OSFIND                   ;open the file
1338	.9234	a8		tay		                tay                          ;Y=file handle
1339	.9235	f0 cb		beq $9202	                beq L8FF8                    ;branch taken if open failed
1340	.9237	8c ed 02	sty $02ed	                sty osfileParameterBlock+0   ;save file handle
1341	.923a	20 73 96	jsr $9673	                jsr setPTRToEOF ;move to EOF (effective no-op when *BUILD)
1342	.923d					L9033:
1343	.923d	20 00 94	jsr $9400	                jsr printLineNumber
1344	.9240					L9036:
1348	.9240	a9 00		lda #$00	                lda #0
1349	.9242	a2 c6		ldx #$c6	                ldx #<starBuildOrAPPENDOSWORD0Parameters
1350	.9244	a0 92		ldy #$92	                ldy #>starBuildOrAPPENDOSWORD0Parameters
1351	.9246	20 f1 ff	jsr $fff1	                jsr OSWORD
1353	.9249	08		php		                php
1354	.924a	90 0f		bcc $925b	                bcc L904B
1355						                ; Handle ESCAPE
1356	.924c	20 e7 ff	jsr $ffe7	                jsr OSNEWL
1357	.924f	a9 0d		lda #$0d	                lda #$0D
1358	.9251	99 00 dc	sta $dc00,y	                sta hazel.commandLine,y      ;terminate current line
1359	.9254					L9044:
1360	.9254	5a		phy		                phy                          ;save line length
1361	.9255	a9 7e		lda #$7e	                lda #$7E
1362	.9257	20 f4 ff	jsr $fff4	                jsr OSBYTE                   ;acknowledge ESCAPE
1363	.925a	7a		ply		                ply                          ;restore line length
1364	.925b					L904B:
1365	.925b	98		tya		                tya                          ;A=line length
1366	.925c	f0 50		beq $92ae	                beq L909E                    ;taken if line empty
1367	.925e	20 bb 92	jsr $92bb	                jsr setStringInputBufferToCommandLine
1368	.9261	a0 00		ldy #$00	                ldy #$00
1369	.9263	a2 00		ldx #$00	                ldx #$00
1370	.9265					L9055:
1371	.9265	20 5b f3	jsr $f35b	                jsr LF29C
1372	.9268	9d 00 dc	sta $dc00,x	                sta hazel.commandLine,x
1373	.926b	a9 01		lda #$01	                lda #stringInputOptions.goodString
1374	.926d	24 e4		bit $e4		                bit stringInputOptions
1375	.926f	d0 0b		bne $927c	                bne L906C
1376	.9271	a9 07		lda #$07	                lda #7
1377	.9273	20 ee ff	jsr $ffee	                jsr OSWRCH                   ;beep
1378	.9276	20 0a 94	jsr $940a	                jsr L91F5
1379	.9279	28		plp		                plp
1380	.927a	80 c4		bra $9240	                bra L9036

1382	.927c					L906C:
1383	.927c	e8		inx		                inx
1384	.927d	90 e6		bcc $9265	                bcc L9055
1385	.927f	28		plp		                plp
1386	.9280	90 01		bcc $9283	                bcc L9073
1387	.9282	ca		dex		                dex
1388	.9283					L9073:
1389	.9283	08		php		                php
1390	.9284	da		phx		                phx
1391	.9285	a2 0b		ldx #$0b	                ldx #size(OSGBPBParameterBlock)-2
1392	.9287					L9077:
1393	.9287	9e ee 02	stz $02ee,x	                stz osfileParameterBlock+1,x
1394	.928a	ca		dex		                dex
1395	.928b	10 fa		bpl $9287	                bpl L9077
1396	.928d	fa		plx		                plx
1397	.928e	8e f2 02	stx $02f2	                stx osfileParameterBlock+OSGBPBParameterBlock.count+0
1399	.9291	a9 dc		lda #$dc	                lda #>hazel.commandLine
1400	.9293	8d ef 02	sta $02ef	                sta osfileParameterBlock+OSGBPBParameterBlock.address+1
1401	.9296	ce f0 02	dec $02f0	                dec osfileParameterBlock+OSGBPBParameterBlock.address+2
1402	.9299	ce f1 02	dec $02f1	                dec osfileParameterBlock+OSGBPBParameterBlock.address+3
1403	.929c	a9 02		lda #$02	                lda #gbpbPutBytesCurrentPTR
1404	.929e	a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
1405	.92a0	a0 02		ldy #$02	                ldy #>osfileParameterBlock
1406	.92a2	20 d1 ff	jsr $ffd1	                jsr OSGBPB
1407	.92a5	28		plp		                plp
1408	.92a6	90 95		bcc $923d	                bcc L9033
1409	.92a8					L9098:
1410	.92a8	ac ed 02	ldy $02ed	                ldy osfileParameterBlock+0
1411	.92ab	4c 19 91	jmp $9119	                jmp closeFile

1413	.92ae					L909E:
1414	.92ae	28		plp		                plp
1415	.92af	b0 f7		bcs $92a8	                bcs L9098
1416	.92b1	a9 0d		lda #$0d	                lda #13
1417	.92b3	ac ed 02	ldy $02ed	                ldy osfileParameterBlock
1418	.92b6	20 d4 ff	jsr $ffd4	                jsr OSBPUT
1419	.92b9	80 82		bra $923d	                bra L9033

1421	.92bb					setStringInputBufferToCommandLine:
1422	.92bb	a9 41		lda #$41	                lda #$41
1423	.92bd	85 e4		sta $e4		                sta $E4
1425	.92bf	64 f2		stz $f2		                stz stringInputBufferAddress+0
1426	.92c1	a9 dc		lda #$dc	                lda #>hazel.commandLine
1427	.92c3	85 f3		sta $f3		                sta stringInputBufferAddress+1
1428	.92c5	60		rts		                rts

1430						;-------------------------------------------------------------------------

1433	.92c6					starBuildOrAPPENDOSWORD0Parameters:
1434	>92c6	00 dc				                .word hazel.commandLine      ;address
1435	>92c8	f0				                .byte $f0                    ;max # chars
1436	>92c9	00				                .byte 0                      ;min char
1437	>92ca	ff				                .byte 255                    ;max char

1440						;-------------------------------------------------------------------------
1441						;
1442						; *MOVE
1443						;
1444	.92cb					starMOVE:
1445	.92cb	ad 34 fe	lda $fe34	                lda ACCCON                    ; Save ACCCON
1446	.92ce	8d dc df	sta $dfdc	                sta hazel.oldACCCON
1447	.92d1	48		pha		                pha                          ; Save ACCCON and command line pointer
1448	.92d2	da		phx		                phx
1449	.92d3	5a		phy		                phy
1450	.92d4	a0 80		ldy #$80	                ldy #$80                     ; Top of available shadow memory at &8000
1451	.92d6	a5 d0		lda $d0		                lda STATE                      ; Get VDU status
1452	.92d8	89 10		bit #$10	                bit #$10                     ; Jump if not shadow screen, spare up to &8000
1453	.92da	f0 07		beq $92e3	                beq L90CE
1454						; Shadow screen selected
1455	.92dc	20 76 f2	jsr $f276	                jsr LF1C0                ; Get screen bottom to XY
1456	.92df	c0 30		cpy #$30	                cpy #$30                     ; Screen at &3000, no spare memory, jump to use Hazel
1457	.92e1	f0 14		beq $92f7	                beq L90E2

1459						; Non-shadow or small shadow screen selected
1460						; Y=top of available memory in shadow memory
1461	.92e3					L90CE:
1462	.92e3	a9 30		lda #$30	                lda #$30                     ; &3000=start of shadow memory
1463	.92e5	8d d6 df	sta $dfd6	                sta hazel.moveBufferMSB
1464	.92e8	a9 04		lda #$04	                lda #ACCCON.X
1465	.92ea	0c 34 fe	tsb $fe34	                tsb ACCCON
1466	.92ed	8d dd df	sta $dfdd	                sta hazel.hasACCCONChanged      ; set 'ACCCON changed'
1467	.92f0	98		tya		                tya                          ; A=length of space in shadow memory
1468	.92f1	38		sec		                sec
1469	.92f2	ed d6 df	sbc $dfd6	                sbc hazel.moveBufferMSB
1470	.92f5	80 07		bra $92fe	                bra L90E9

1472						; No shadow memory available, use Hazel
1473	.92f7					L90E2:
1474	.92f7	a9 dd		lda #$dd	                lda #$DD                     ; Buffer at &DD00
1475	.92f9	8d d6 df	sta $dfd6	                sta hazel.moveBufferMSB
1476	.92fc	a9 02		lda #$02	                lda #$02                     ; Buffer length=&200

1478						; &DFD6=high byte of buffer address
1479						; A=high byte of buffer length
1480	.92fe					L90E9:
1481	.92fe	8d d7 df	sta $dfd7	                sta hazel.moveNumPages      ; Store buffer length
1482	.9301	7a		ply		                ply                          ; Get command line pointer
1483	.9302	fa		plx		                plx
1484	.9303	da		phx		                phx
1485	.9304	5a		phy		                phy
1486	.9305	a9 40		lda #$40	                lda #$40                     ; Open source file
1487	.9307	20 ce ff	jsr $ffce	                jsr OSFIND
1488	.930a	a8		tay		                tay                          ; Store source handle, jump if not found
1489	.930b	8c d4 df	sty $dfd4	                sty hazel.moveSrcHandle
1490	.930e	f0 39		beq $9349	                beq L9134
1491	.9310	7a		ply		                ply                          ; Get command line back again
1492	.9311	fa		plx		                plx
1493	.9312	86 f2		stx $f2		                stx $F2
1494	.9314	84 f3		sty $f3		                sty $F3
1495	.9316	da		phx		                phx                          ; And save it again
1496	.9317	5a		phy		                phy
1497	.9318	a0 00		ldy #$00	                ldy #$00                     ; Step past first parameter
1498	.931a	20 2c f3	jsr $f32c	                jsr gsinitForFilenameParsing
1499	.931d					L9108:
1500	.931d	20 3e f3	jsr $f33e	                jsr gsreadEntryPoint     ;
1501	.9320	90 fb		bcc $931d	                bcc L9108
1502	.9322	98		tya		                tya                          ; Save address of dest filename
1503	.9323	18		clc		                clc
1504	.9324	65 f2		adc $f2		                adc $F2
1505	.9326	8d d8 df	sta $dfd8	                sta hazel.moveDestName+0
1506	.9329	aa		tax		                tax
1507	.932a	a5 f3		lda $f3		                lda $F3
1508	.932c	69 00		adc #$00	                adc #$00
1509	.932e	8d d9 df	sta $dfd9	                sta hazel.moveDestName+1
1510	.9331	a8		tay		                tay                          ; Temporary filing system flag
1511	.9332	0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
1512	.9335	a9 80		lda #$80	                lda #$80                     ; Open destination file
1513	.9337	20 ce ff	jsr $ffce	                jsr OSFIND
1514	.933a	a8		tay		                tay                          ; Store dest handle, jump if opened
1515	.933b	8c d5 df	sty $dfd5	                sty hazel.moveDestHandle
1516	.933e	d0 0c		bne $934c	                bne L9137

1518						; Couldn't open destination
1519	.9340	ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle      ; Get source handle and clear it
1520	.9343	9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
1521	.9346	20 ce ff	jsr $ffce	                jsr OSFIND                   ; Close source file
1522	.9349					L9134:
1523	.9349	4c bc a9	jmp $a9bc	                jmp notFoundError                    ; Jump to 'Not found' error

1525						; Source and dest opened
1526						; ----------------------
1527						; Build OSGBPB source file control block at &02ED
1528						; and destination control block at &DFC7
1529	.934c					L9137:
1530	.934c	a2 07		ldx #$07	                ldx #$07
1531	.934e					L9139:
1532	.934e	9e ee 02	stz $02ee,x	                stz @w osfileParameterBlock+OSGBPBParameterBlock.address,x ; Addr=0, Num=0
1533	.9351	9e c8 df	stz $dfc8,x	                stz hazel.moveOSGBPB+1,x
1534	.9354	ca		dex		                dex
1535	.9355	10 f7		bpl $934e	                bpl L9139
1536	.9357	ad d4 df	lda $dfd4	                lda hazel.moveSrcHandle      ; Source handle
1537	.935a	8d ed 02	sta $02ed	                sta osfileParameterBlock+OSGBPBParameterBlock.handle
1538	.935d	ad d6 df	lda $dfd6	                lda hazel.moveBufferMSB      ; Buffer address
1539	.9360	8d ef 02	sta $02ef	                sta osfileParameterBlock+OSGBPBParameterBlock.address+1
1540	.9363	8d c9 df	sta $dfc9	                sta hazel.moveOSGBPB.addr+1
1541	.9366	ad d7 df	lda $dfd7	                lda hazel.moveNumPages
1542	.9369	8d f3 02	sta $02f3	                sta osfileParameterBlock+OSGBPBParameterBlock.count+1
1543	.936c	8d cd df	sta $dfcd	                sta hazel.moveOSGBPB.numBytes+1
1544	.936f	ce f0 02	dec $02f0	                dec osfileParameterBlock+OSGBPBParameterBlock.address+2 ; Source addr=&FFFFxxxx
1545	.9372	ce f1 02	dec $02f1	                dec osfileParameterBlock+OSGBPBParameterBlock.address+3
1546	.9375	ce ca df	dec $dfca	                dec hazel.moveOSGBPB.addr+2
1547	.9378	ce cb df	dec $dfcb	                dec hazel.moveOSGBPB.addr+3

1549						; Should use &FFFExxxx and let filing system select correct memory
1550						; Unfortunately, CFS/RFS and DFS do not recognise &FFFExxxx, so
1551						; *MOVE has to do it itself, causing problems for filing systems
1552						; that /do/ recognise &FFFExxxx where they have to remember to
1553						; *do* *nothing* for &FFFFxxxx instead of select main memory as
1554						; &FFFFxxxx implies.

1556	.937b	a2 ed		ldx #$ed	                ldx #<osfileParameterBlock                     ; XY=>source OSGBPB block
1557	.937d	a0 02		ldy #$02	                ldy #>osfileParameterBlock
1558	.937f	a9 04		lda #$04	                lda #$04                     ; Read data from source
1559	.9381	20 d1 ff	jsr $ffd1	                jsr OSGBPB
1560	.9384	08		php		                php                          ; Jump if not at end of file
1561	.9385	90 11		bcc $9398	                bcc L9183
1562						; End of file, adjust destination buffer length for final part
1563	.9387	a9 00		lda #$00	                lda #$00
1564	.9389	ed f2 02	sbc $02f2	                sbc osfileParameterBlock+OSGBPBParameterBlock.count+0
1565	.938c	8d cc df	sta $dfcc	                sta hazel.moveOSGBPB.numBytes+0
1566	.938f	ad cd df	lda $dfcd	                lda hazel.moveOSGBPB.numBytes+1
1567	.9392	ed f3 02	sbc $02f3	                sbc osfileParameterBlock+OSGBPBParameterBlock.count+1
1568	.9395	8d cd df	sta $dfcd	                sta hazel.moveOSGBPB.numBytes+1
1569	.9398					L9183:
1570	.9398	ad d5 df	lda $dfd5	                lda hazel.moveDestHandle      ; Destination handle
1571	.939b	8d c7 df	sta $dfc7	                sta hazel.moveOSGBPB.handle
1572	.939e	a9 02		lda #$02	                lda #$02                     ; XY=>control block, A=write
1573	.93a0	a2 c7		ldx #$c7	                ldx #<hazel.moveOSGBPB
1574	.93a2	a0 df		ldy #$df	                ldy #>hazel.moveOSGBPB
1575	.93a4	20 d1 ff	jsr $ffd1	                jsr OSGBPB
1576	.93a7	28		plp		                plp                          ; Loop until end of file
1577	.93a8	90 a2		bcc $934c	                bcc L9137
1578	.93aa	a9 00		lda #$00	                lda #$00
1579	.93ac	ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle      ; Get and clear source handle
1580	.93af	9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
1581	.93b2	5a		phy		                phy                          ; Close source file
1582	.93b3	20 ce ff	jsr $ffce	                jsr OSFIND
1583	.93b6	a9 00		lda #$00	                lda #$00                     ; Get dest handle
1584	.93b8	ac d5 df	ldy $dfd5	                ldy hazel.moveDestHandle
1585	.93bb	5a		phy		                phy                          ; Clear dest handle and close file
1586	.93bc	9c d5 df	stz $dfd5	                stz hazel.moveDestHandle
1587	.93bf	20 ce ff	jsr $ffce	                jsr OSFIND
1588	.93c2	7a		ply		                ply                          ; Dest not CFS/RFS, jump to...
1589	.93c3	c0 04		cpy #$04	                cpy #$04
1590	.93c5	b0 0b		bcs $93d2	                bcs L91BD
1591	.93c7	7a		ply		                ply                          ; Pop source handle
1592	.93c8					L91B3:
1593	.93c8	7a		ply		                ply                          ; Restore XY
1594	.93c9	fa		plx		                plx
1595	.93ca					L91B5:
1596	.93ca	68		pla		                pla                          ; Clear 'ACCCON changed', restore ACCCON
1597	.93cb	9c dd df	stz $dfdd	                stz hazel.hasACCCONChanged
1598	.93ce	8d 34 fe	sta $fe34	                sta ACCCON
1599	.93d1	60		rts		                rts

1601	.93d2					L91BD:
1602	.93d2	7a		ply		                ply                          ; Source was CFS/RFS, jump to exit
1603	.93d3	c0 04		cpy #$04	                cpy #$04
1604	.93d5	90 f1		bcc $93c8	                bcc L91B3
1605	.93d7	7a		ply		                ply                          ; Point to first parameter
1606	.93d8	8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
1607	.93db	fa		plx		                plx
1608	.93dc	8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
1609	.93df	a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
1610	.93e1	a0 02		ldy #$02	                ldy #>osfileParameterBlock
1611	.93e3	a9 05		lda #$05	                lda #$05                     ; Read info on source file
1612	.93e5	20 dd ff	jsr $ffdd	                jsr OSFILE
1613	.93e8	ad d8 df	lda $dfd8	                lda hazel.moveDestName+0      ; Get address of dest filename
1614	.93eb	8d ed 02	sta $02ed	                sta osfileParameterBlock+OSFILEParameterBlock.fileName+0
1615	.93ee	ad d9 df	lda $dfd9	                lda hazel.moveDestName+1      ;  and put in control block
1616	.93f1	8d ee 02	sta $02ee	                sta osfileParameterBlock+OSFILEParameterBlock.fileName+1
1617	.93f4	a9 f0		lda #$f0	                lda #$F0                     ; Mask out 'public' access bits
1618	.93f6	1c fb 02	trb $02fb	                trb osfileParameterBlock+OSFILEParameterBlock.attributes+0
1619	.93f9	a9 01		lda #$01	                lda #$01                     ; Write info on dest file
1620	.93fb	20 dd ff	jsr $ffdd	                jsr OSFILE
1621	.93fe	80 ca		bra $93ca	                bra L91B5                    ; Jump to restore ACCCON and exit

1623	.9400					printLineNumber:
1624	.9400	a2 00		ldx #$00	                ldx #$00
1625	.9402	38		sec		                sec
1626	.9403	20 43 94	jsr $9443	                jsr adcLineNumberBCDX        ;increment line number LSB
1627	.9406	e8		inx		                inx
1628	.9407	20 43 94	jsr $9443	                jsr adcLineNumberBCDX        ;carry into line number MSB
1629	.940a					L91F5:
1630	.940a	38		sec		                sec                          ;printing leading 0s
1631	.940b	ad c4 df	lda $dfc4	                lda hazel.lineNumberBCD+1    ;get line number MSB
1632	.940e	20 26 94	jsr $9426	                jsr printPossiblyLeading0s
1633	.9411	ad c3 df	lda $dfc3	                lda hazel.lineNumberBCD+0    ;get line number LSB
1634	.9414	48		pha		                pha                          ;save line number LSB
1635	.9415	08		php		                php                          ;save C
1639	.9416	4a		lsr a		                lsr a
1640	.9417	4a		lsr a		                lsr a
1641	.9418	4a		lsr a		                lsr a
1642	.9419	4a		lsr a		                lsr a
1644	.941a	28		plp		                plp                          ;restore  C
1645	.941b	20 31 94	jsr $9431	                jsr printPossiblyLeading0    ;print line number 3rd digit
1646	.941e	68		pla		                pla                          ;restore line number LSB
1647	.941f	18		clc		                clc                ;always print line number 4th digit
1648	.9420	20 31 94	jsr $9431	                jsr printPossiblyLeading0    ;
1649	.9423	4c f3 a3	jmp $a3f3	                jmp printSpace                    ;

1651	.9426					printPossiblyLeading0s:
1652	.9426	48		pha		                pha                          ;save value
1653	.9427	08		php		                php                          ;save C
1657	.9428	4a		lsr a		                lsr a
1658	.9429	4a		lsr a		                lsr a
1659	.942a	4a		lsr a		                lsr a
1660	.942b	4a		lsr a		                lsr a
1662	.942c	28		plp		                plp                          ;restore C
1663	.942d	20 31 94	jsr $9431	                jsr printPossiblyLeading0    ;print 1st digit
1664	.9430	68		pla		                pla                          ;restore value
1665	.9431					printPossiblyLeading0:
1666	.9431	29 0f		and #$0f	                and #$0F                     ;get digit to print
1667	.9433	d0 09		bne $943e	                bne printNonLeading0         ;always print if non-0
1668	.9435	90 07		bcc $943e	                bcc printNonLeading0 ;branch taken if not leading 0
1669	.9437	a9 20		lda #$20	                lda #$20             ;print space instead of leading 0
1670	.9439	20 ee ff	jsr $ffee	                jsr OSWRCH
1671	.943c	38		sec		                sec                ;indicate still in leading 0s state
1672	.943d	60		rts		                rts

1674	.943e					printNonLeading0:
1675	.943e	20 b5 ac	jsr $acb5	                jsr printHexDigit            ;print digit
1676	.9441	18		clc		                clc                          ;no longer in leading 0s state
1677	.9442	60		rts		                rts                          ;

1679	.9443					adcLineNumberBCDX:
1680	.9443	a9 00		lda #$00	                lda #$00
1681	.9445	f8		sed		                sed
1682	.9446	7d c3 df	adc $dfc3,x	                adc hazel.lineNumberBCD,x
1683	.9449	9d c3 df	sta $dfc3,x	                sta hazel.lineNumberBCD,x
1684	.944c	d8		cld		                cld
1685	.944d					rts9238:
1686	.944d	60		rts		                rts

1688						;-------------------------------------------------------------------------

1690	.944e					L9239:
1691	.944e	da		phx		                phx
1692	.944f	48		pha		                pha
1693	.9450	a2 02		ldx #$02	                ldx #$02
1694	.9452					L923D:
1695	.9452	bd f1 02	lda $02f1,x	                lda osfileParameterBlock+4,x
1696	.9455	20 ac ac	jsr $acac	                jsr printHexByte
1697	.9458	ca		dex		                dex
1698	.9459	10 f7		bpl $9452	                bpl L923D
1699	.945b	80 0c		bra $9469	                bra L9254

1701						;-------------------------------------------------------------------------

1703	.945d					L9248:
1704	.945d	da		phx		                phx
1705	.945e	48		pha		                pha
1706	.945f	a2 fc		ldx #$fc	                ldx #256-4
1707	.9461					L924C:
1708	.9461	fe f5 01	inc $01f5,x	                inc osfileParameterBlock+4-(256-4),x
1709	.9464	d0 03		bne $9469	                bne L9254
1710	.9466	e8		inx		                inx
1711	.9467	d0 f8		bne $9461	                bne L924C
1712	.9469					L9254:
1713	.9469	68		pla		                pla
1714	.946a	fa		plx		                plx
1715	.946b	60		rts		                rts

1717	.946c					L9257:
1718	.946c	5a		phy		                phy
1719	.946d	da		phx		                phx
1720	.946e					L9259:
1721	.946e	e0 08		cpx #$08	                cpx #$08
1722	.9470	f0 0a		beq $947c	                beq L9267
1723	.9472	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
1724	>9475	20 20 20 00			                .text "   ",0
1725	.9479	e8		inx		                inx
1726	.947a	80 f2		bra $946e	                bra L9259

1728	.947c					L9267:
1729	.947c	fa		plx		                plx
1730	.947d	20 f3 a3	jsr $a3f3	                jsr printSpace
1731	.9480	a0 00		ldy #$00	                ldy #$00
1732	.9482					L926D:
1733	.9482	b9 f5 02	lda $02f5,y	                lda osfileParameterBlock+8,y
1734	.9485	20 ee ff	jsr $ffee	                jsr OSWRCH
1735	.9488	c8		iny		                iny
1736	.9489	ca		dex		                dex
1737	.948a	d0 f6		bne $9482	                bne L926D
1738	.948c	7a		ply		                ply
1739	.948d	4c e7 ff	jmp $ffe7	                jmp OSNEWL

1741						;-------------------------------------------------------------------------

1747	=$94e1					osbyte19Done=rts94A4
1748						                .include "restore_font.s65"

:10	;******  Processing file: src/restore_font.s65

1						;-------------------------------------------------------------------------
2						;
3						; restore entire font.
4						;
5	.9490					restoreFont32To255:
6	.9490	a2 07		ldx #$07	                ldx #$07                     ;224 chars - 32-255
8						                ; fall through to restoreFont32ToN

10						;-------------------------------------------------------------------------
11						;
12						; Restore part of the font, starting from char 32.
13						;
14						; entry:
15						;
16						; X = number of pages of font data to restore - X*32 chars will be
17						; restored
18						;
19	.9492					restoreFont32ToN:
20	.9492	08		php		                php
21	.9493	78		sei		                sei
22	.9494	a9 b9		lda #$b9	                lda #>LB900                ;start at beginning of font
23	.9496	85 f1		sta $f1		                sta $F1
24	.9498	a9 89		lda #$89	                lda #>andy.softCharacterDefinitions ;write to beginning of soft character definitions
26						                ; fall through to restoreFontPart

28						;-------------------------------------------------------------------------
29						;
30						; Restore part of the font.
31						;
32						; entry:
33						;
34						; ?$f1 = MSB of font data
35						;
36						; A = MSB of dest page in ANDY - should be part of the soft character
37						; definitions!
38						;
39						; X = number of pages of font data to restore - X*32 chars will be
40						; restored
41						;
42						; preserves: Y

44	.949a					restoreFontPart:
45	.949a	85 fb		sta $fb		                sta $FB                      ;save MSB of dest
46	.949c	20 b1 e5	jsr $e5b1	                jsr selectTerminalROMAndANDY2
47						                .cwarn *<$9000,format("Code inside ANDY at: $%04x",*) ; following code can't be inside the ANDY region!
48	.949f	5a		phy		                phy                          ;
49	.94a0	a0 00		ldy #$00	                ldy #$00                     ;
50	.94a2	64 fa		stz $fa		                stz $FA                      ;initialize LSB of src
51	.94a4	64 f0		stz $f0		                stz $F0                      ;initialize LSB of dest
52	.94a6					-
53	.94a6	b1 f0		lda ($f0),y	                lda ($F0),y
54	.94a8	91 fa		sta ($fa),y	                sta ($FA),y
55	.94aa	c8		iny		                iny
56	.94ab	d0 f9		bne $94a6	                bne -
57	.94ad	e6 f1		inc $f1		                inc $F1
58	.94af	e6 fb		inc $fb		                inc $FB
59	.94b1	ca		dex		                dex
60	.94b2	d0 f2		bne $94a6	                bne -
61	.94b4	7a		ply		                ply
62	.94b5	28		plp		                plp
63	.94b6	4c a9 e5	jmp $e5a9	                jmp selectTerminalROM

65						;-------------------------------------------------------------------------

70	.94b9					restoreFont32To126:
71	.94b9	a2 03		ldx #$03	                ldx #$03                     ;96 chars - 32-126
72	.94bb	80 d5		bra $9492	                bra restoreFont32ToN

74						;-------------------------------------------------------------------------
75						;
76						; OSBYTE 25 (&19) Restore a group of font definitions
77						;
78						; MasRef D.2-28
79						;
80	.94bd					osbyte19:
81	.94bd	8a		txa		                txa                          ;A=group identifier
82	.94be	f0 d0		beq $9490	                beq restoreFont32To255   ;taken if group 0 - all chars
84	.94c0	c9 10		cmp #$10	                cmp #$10
88	.94c2	b0 1d		bcs $94e1	                bcs osbyte19Done
90	.94c4	29 07		and #$07	                and #7
91	.94c6	f0 c8		beq $9490	                beq restoreFont32To255
93	.94c8	08		php		                php
94	.94c9	78		sei		                sei
95	.94ca	69 b8		adc #$b8	                adc #(>LB900)-1 ;form address of ROM font data for group
96	.94cc	85 f1		sta $f1		                sta $F1
97	.94ce	8a		txa		                txa
98	.94cf	a2 01		ldx #$01	                ldx #$01                   ;copy 1 page, 32 chars
99	.94d1	69 88		adc #$88	                adc #(>andy.softCharacterDefinitions)-1 ;get page in ANDY for group
100	.94d3	80 c5		bra $949a	                bra restoreFontPart

:5	;******  Return to file: src/terminal.s65

1751						;-------------------------------------------------------------------------
1752						;
1753						; Clear 4 bytes in the OSFILE parameter block.
1754						;
1755						; entry:
1756						;
1757						; X = offset of the 4 bytes to clear
1758						;
1759	.94d5					clearOSFILEParameterBlockDWORD:
1760	.94d5	9e ed 02	stz $02ed,x	                stz osfileParameterBlock+0,x
1761	.94d8	9e ee 02	stz $02ee,x	                stz osfileParameterBlock+1,x
1762	.94db	9e ef 02	stz $02ef,x	                stz osfileParameterBlock+2,x
1763	.94de	9e f0 02	stz $02f0,x	                stz osfileParameterBlock+3,x
1764	.94e1					rts94A4:
1765	.94e1	60		rts		                rts

1767						;-------------------------------------------------------------------------
1768						;
1769						; Read a 32-bit hex value from a string.
1770						;
1771						; entry:
1772						;
1773						; X = offset into osfileParameterBlock to store the value
1774						;
1775						; exit:
1776						;
1777						; C=0 if error
1778						;
1779						; preserves: V
1780						;
1781	.94e2					parseHexAddressFromString:
1782	.94e2	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput ; Skip spaces
1783	.94e5	20 98 86	jsr $8698	                jsr readHexDigit
1784	.94e8	90 23		bcc $950d	                bcc rts92F4
1785	.94ea	20 d5 94	jsr $94d5	                jsr clearOSFILEParameterBlockDWORD
1786	.94ed					readDigitsLoop:
1787	.94ed	5a		phy		                phy
1788	.94ee	2a		rol a		                rol a
1789	.94ef	2a		rol a		                rol a
1790	.94f0	2a		rol a		                rol a
1791	.94f1	2a		rol a		                rol a                        ;put digit in top 4 bits
1792	.94f2	a0 04		ldy #$04	                ldy #$04
1793	.94f4					shiftIn1DigitLoop:
1794	.94f4	2a		rol a		                rol a
1795	.94f5	3e ed 02	rol $02ed,x	                rol osfileParameterBlock+0,x
1796	.94f8	3e ee 02	rol $02ee,x	                rol osfileParameterBlock+1,x
1797	.94fb	3e ef 02	rol $02ef,x	                rol osfileParameterBlock+2,x
1798	.94fe	3e f0 02	rol $02f0,x	                rol osfileParameterBlock+3,x
1799	.9501	b0 61		bcs $9564	                bcs badAddressError ;carry out of bit 31 implies too many digits
1800	.9503	88		dey		                dey
1801	.9504	d0 ee		bne $94f4	                bne shiftIn1DigitLoop
1802	.9506	7a		ply		                ply
1803	.9507	20 98 86	jsr $8698	                jsr readHexDigit
1804	.950a	b0 e1		bcs $94ed	                bcs readDigitsLoop   ;keep going until hex digits stop
1805	.950c	38		sec		                sec       ;got at least 1 hex digit, so result is good
1806	.950d					rts92F4:
1807	.950d	60		rts		                rts

1809						;-------------------------------------------------------------------------
1810						;
1811						; *GO (<addr>) [MasRef C.5-6]
1812						;
1813	.950e					starGO:
1814	.950e	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput ; Skip spaces
1815	.9511	d0 03		bne $9516	                bne starGOIO             ; Jump to read parameters
1816	.9513	4c b1 86	jmp $86b1	                jmp commandLineUI        ; No parameters, enter CLICOM

1818						;-------------------------------------------------------------------------
1819						;
1820						; *GOIO <addr> [MasRef C.5-7]
1821						;
1822	.9516					starGOIO:
1823	.9516	a2 00		ldx #$00	                ldx #$00
1824	.9518	20 74 95	jsr $9574	                jsr parseHexAddressFromCommandLine ; Read hex address
1825	.951b	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput ; Skip spaces
1826	.951e	08		php		                php  ; Update &F2/3 to point to any further parameters
1827	.951f	98		tya		                tya
1828	.9520	18		clc		                clc
1829	.9521	65 f2		adc $f2		                adc stringInputBufferAddress+0
1830	.9523	85 f2		sta $f2		                sta stringInputBufferAddress+0
1831	.9525	90 02		bcc $9529	                bcc +
1832	.9527	e6 f3		inc $f3		                inc stringInputBufferAddress+1
1833	.9529					+
1834	.9529	a0 00		ldy #$00	                ldy #$00    ; (&F2),y=>parameters, EQ if no parameters
1835	.952b	28		plp		                plp
1836	.952c	6c ed 02	jmp ($02ed)	                jmp (osfileParameterBlock+0) ; Jump to address

1838						;-------------------------------------------------------------------------

1840	.952f					starLOAD:
1841	.952f	a9 ff		lda #$ff	                lda #fileLoad
1842	.9531					starCommandThroughOSFILE:
1843	.9531	4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
1844	.9534					L931B:
1845	.9534	86 f2		stx $f2		                stx stringInputBufferAddress+0
1846	.9536	84 f3		sty $f3		                sty stringInputBufferAddress+1
1847	.9538	8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
1848	.953b	8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
1849	.953e	48		pha		                pha                          ;save OSFILE reason
1850	.953f	a2 02		ldx #$02	                ldx #OSFILEParameterBlock.load
1851	.9541	20 d5 94	jsr $94d5	                jsr clearOSFILEParameterBlockDWORD
1852	.9544	a2 0a		ldx #$0a	                ldx #OSFILEParameterBlock.length
1853	.9546	20 d5 94	jsr $94d5	                jsr clearOSFILEParameterBlockDWORD
1854	.9549	a0 ff		ldy #$ff	                ldy #$FF
1855	.954b	8c f3 02	sty $02f3	                sty osfileParameterBlock+OSFILEParameterBlock.exec+0 ;by default, load to file's load address
1856	.954e	c8		iny		                iny                                                  ;Y=0
1857	.954f	20 2c f3	jsr $f32c	                jsr gsinitForFilenameParsing
1858	.9552					L9339:
1859	.9552	20 3e f3	jsr $f33e	                jsr gsreadEntryPoint
1860	.9555	90 fb		bcc $9552	                bcc L9339
1861	.9557	68		pla		                pla                          ;restore OSFILE reason
1862	.9558	48		pha		                pha                          ;save OSFILE reason
1863	.9559	10 4c		bpl $95a7	                bpl finishStarSAVE                    ;taken if *SAVE
1864	.955b	a2 02		ldx #$02	                ldx #OSFILEParameterBlock.load
1865	.955d	20 e2 94	jsr $94e2	                jsr parseHexAddressFromString ;parse *LOAD address
1866	.9560	b0 18		bcs $957a	                bcs doStarLOADWithExplicitAddress ;taken if good address
1867	.9562	f0 1b		beq $957f	                beq L9366        ;taken if CR encountered (this is ok)
1868	.9564					badAddressError:
1869	.9564	20 ff ae	jsr $aeff	                jsr doFollowingError
1870	>9567	fc 42 61 64 20 61 64 64		                .text $fc,"Bad address",0
	>956f	72 65 73 73 00

1872						;-------------------------------------------------------------------------
1873						;
1874						; Parse hex address from command line.
1875						;
1876	.9574					parseHexAddressFromCommandLine:
1877	.9574	20 e2 94	jsr $94e2	                jsr parseHexAddressFromString ; Read hex address
1878	.9577	90 eb		bcc $9564	                bcc badAddressError           ; Jump with bad address
1879	.9579	60		rts		                rts

1881						;-------------------------------------------------------------------------

1883	.957a					doStarLOADWithExplicitAddress:
1884	.957a	d0 7b		bne $95f7	                bne badCommandError93E2
1885	.957c	ee f3 02	inc $02f3	                inc osfileParameterBlock+OSFILEParameterBlock.exec+0 ;load to parameter block load address
1886	.957f					L9366:
1887	.957f	0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
1888	.9582					callOSFILEWithOSFILEParameterBlock:
1889	.9582	a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
1890	.9584	a0 02		ldy #$02	                ldy #>osfileParameterBlock
1891	.9586	68		pla		                pla
1892	.9587	4c dd ff	jmp $ffdd	                jmp OSFILE

1894						;-------------------------------------------------------------------------
1895						;
1896						; *REMOVE [MasRef G.5-9]
1897						;
1898	.958a					starREMOVE:
1899	.958a	8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
1900	.958d	8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
1902	.9590	86 f2		stx $f2		                stx stringInputBufferAddress+0
1903	.9592	84 f3		sty $f3		                sty stringInputBufferAddress+1
1904	.9594	a0 ff		ldy #$ff	                ldy #$ff
1905	.9596					L9596:
1906	.9596	c8		iny		                iny
1907	.9597	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
1908	.9599	c9 21		cmp #$21	                cmp #'!'
1909	.959b	b0 f9		bcs $9596	                bcs L9596
1910	.959d	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
1911	.95a0	d0 55		bne $95f7	                bne badCommandError93E2
1913	.95a2	a9 06		lda #$06	                lda #fileDelete
1914	.95a4	48		pha		                pha
1915	.95a5	80 db		bra $9582	                bra callOSFILEWithOSFILEParameterBlock

1917						;-------------------------------------------------------------------------
1929						;-------------------------------------------------------------------------
1944						;-------------------------------------------------------------------------

1946	.95a7					finishStarSAVE:
1947	.95a7	d0 07		bne $95b0	                bne L939B
1948	.95a9	a2 0a		ldx #$0a	                ldx #OSFILEParameterBlock.saveStart
1949	.95ab	20 e2 94	jsr $94e2	                jsr parseHexAddressFromString
1950	.95ae	90 47		bcc $95f7	                bcc badCommandError93E2
1951	.95b0					L939B:
1952	.95b0	b8		clv		                clv
1953	.95b1	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
1954	.95b3	c9 2b		cmp #$2b	                cmp #'+'
1955	.95b5	d0 04		bne $95bb	                bne L93A6                    ;taken if "*SAVE START END..."
1956	.95b7	2c 70 e3	bit $e370	                bit valueFF              ;V=1
1957	.95ba	c8		iny		                iny
1958	.95bb					L93A6:
1959	.95bb	a2 0e		ldx #$0e	                ldx #OSFILEParameterBlock.saveEnd
1960	.95bd	20 e2 94	jsr $94e2	                jsr parseHexAddressFromString
1961	.95c0	90 35		bcc $95f7	                bcc badCommandError93E2
1962	.95c2	08		php		                php
1963	.95c3	50 0f		bvc $95d4	                bvc L93BF                    ;taken if "*SAVE START END"

1965						                ; Get the save end address.
1966	.95c5	a2 fc		ldx #$fc	                ldx #256-4
1967	.95c7	18		clc		                clc
1968	.95c8					-
1969						                ; TODO - not sure why the @w notation is required here?
1970	.95c8	bd fb 01	lda $01fb,x	                lda@w osfileParameterBlock+OSFILEParameterBlock.saveStart-(256-4),x
1971	.95cb	7d ff 01	adc $01ff,x	                adc@w osfileParameterBlock+OSFILEParameterBlock.saveEnd-(256-4),x
1972	.95ce	9d ff 01	sta $01ff,x	                sta@w osfileParameterBlock+OSFILEParameterBlock.saveEnd-(256-4),x
1973	.95d1	e8		inx		                inx
1974	.95d2	d0 f4		bne $95c8	                bne -
1975	.95d4					L93BF:

1977						                ; Initialize load and exec addresses to save start
1978						                ; address.
1979	.95d4	a2 03		ldx #$03	                ldx #$03
1980	.95d6					-
1981	.95d6	bd f7 02	lda $02f7,x	                lda@w osfileParameterBlock+OSFILEParameterBlock.saveStart,x
1982	.95d9	9d f3 02	sta $02f3,x	                sta@w osfileParameterBlock+OSFILEParameterBlock.exec,x
1983	.95dc	9d ef 02	sta $02ef,x	                sta@w osfileParameterBlock+OSFILEParameterBlock.load,x
1984	.95df	ca		dex		                dex
1985	.95e0	10 f4		bpl $95d6	                bpl -

1987	.95e2	28		plp		                plp
1988	.95e3	f0 9a		beq $957f	                beq L9366

1990	.95e5	a2 06		ldx #$06	                ldx #OSFILEParameterBlock.exec
1991	.95e7	20 e2 94	jsr $94e2	                jsr parseHexAddressFromString
1992	.95ea	90 0b		bcc $95f7	                bcc badCommandError93E2
1993	.95ec	f0 91		beq $957f	                beq L9366

1995	.95ee	a2 02		ldx #$02	                ldx #OSFILEParameterBlock.load
1996	.95f0	20 e2 94	jsr $94e2	                jsr parseHexAddressFromString
1997	.95f3	90 02		bcc $95f7	                bcc badCommandError93E2
1998	.95f5	f0 88		beq $957f	                beq L9366

2000	.95f7					badCommandError93E2:
2001	.95f7	4c 60 fb	jmp $fb60	                jmp badCommandError

2003						;-------------------------------------------------------------------------

2005	.95fa					starFX:
2006	.95fa	20 36 86	jsr $8636	                jsr parseNumberFromString
2007	.95fd	90 f8		bcc $95f7	                bcc badCommandError93E2
2008	.95ff	8a		txa		                txa
2009	.9600					starCommandThroughOSBYTE:
2010	.9600	08		php		                php
2011	.9601	4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
2012	.9604	28		plp		                plp
2013	.9605	48		pha		                pha
2014	.9606	64 e5		stz $e5		                stz $E5
2015	.9608	64 e4		stz $e4		                stz $E4
2016	.960a	20 c7 f3	jsr $f3c7	                jsr LF308
2017	.960d	f0 18		beq $9627	                beq L9412
2018	.960f	20 36 86	jsr $8636	                jsr parseNumberFromString
2019	.9612	90 e3		bcc $95f7	                bcc badCommandError93E2
2020	.9614	86 e5		stx $e5		                stx $E5
2021	.9616	20 c9 f3	jsr $f3c9	                jsr LF30A
2022	.9619	f0 0c		beq $9627	                beq L9412
2023	.961b	20 36 86	jsr $8636	                jsr parseNumberFromString
2024	.961e	90 d7		bcc $95f7	                bcc badCommandError93E2
2025	.9620	86 e4		stx $e4		                stx $E4
2026	.9622	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
2027	.9625					L9625:
2028	.9625	d0 d0		bne $95f7	                bne badCommandError93E2
2029	.9627					L9412:
2030	.9627	a4 e4		ldy $e4		                ldy $E4
2031	.9629	a6 e5		ldx $e5		                ldx $E5
2032	.962b	68		pla		                pla
2033	.962c	0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
2034	.962f	20 f4 ff	jsr $fff4	                jsr OSBYTE
2035	.9632	70 c3		bvs $95f7	                bvs badCommandError93E2
2036	.9634					rts941F:
2037	.9634	60		rts		                rts

2039						;-------------------------------------------------------------------------

2041	.9635					starSPOOLON:
2042	.9635	38		sec		                sec
2043	.9636	80 14		bra $964c	                bra starSPOOL

2045						;-------------------------------------------------------------------------

2048	.9638					starSHADOW:
2049	.9638	a9 72		lda #$72	                lda #$72
2050	.963a					L963A:
2051	.963a	80 c4		bra $9600	                bra starCommandThroughOSBYTE

2054						;-------------------------------------------------------------------------

2056	.963c					osbyte77:
2057	.963c	a2 10		ldx #$10	                ldx #romServiceCallSpoolExecClosureWarning
2058	.963e	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
2059	.9641	f0 f1		beq $9634	                beq rts941F
2060	.9643	20 fa a9	jsr $a9fa	                jsr LA58B
2061	.9646	ad 57 02	lda $0257	                lda spoolFileHandle
2062	.9649	20 da a9	jsr $a9da	                jsr LA56B
2063	.964c					starSPOOL:
2064	.964c	08		php		                php
2065	.964d	5a		phy		                phy
2066	.964e	ac 57 02	ldy $0257	                ldy spoolFileHandle
2067	.9651	8d 57 02	sta $0257	                sta spoolFileHandle
2068	.9654	f0 03		beq $9659	                beq L9440
2069	.9656	20 ce ff	jsr $ffce	                jsr OSFIND
2070	.9659					L9440:
2071	.9659	4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
2072	.965c	7a		ply		                ply
2073	.965d	28		plp		                plp
2074	.965e	f0 d4		beq $9634	                beq rts941F
2075	.9660	a9 80		lda #$80	                lda #$80
2076	.9662	90 02		bcc $9666	                bcc L944D
2077	.9664	a9 c0		lda #$c0	                lda #$C0
2078	.9666					L944D:
2079	.9666	0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
2080	.9669	20 ce ff	jsr $ffce	                jsr OSFIND
2081	.966c	a8		tay		                tay
2082	.966d	f0 88		beq $95f7	                beq badCommandError93E2
2083	.966f	8d 57 02	sta $0257	                sta spoolFileHandle
2084	.9672	a8		tay		                tay
2085	.9673					setPTRToEOF:
2086	.9673	a9 02		lda #$02	                lda #argsFileGetEXT
2087	.9675	20 7a 96	jsr $967a	                jsr callOSARGSWithBuffer
2088	.9678					setFilePointerFromOSARGSBuffer:
2089	.9678	a9 01		lda #$01	                lda #argsFileSetPTR
2090	.967a					callOSARGSWithBuffer:
2091	.967a	a2 a8		ldx #$a8	                ldx #osargsBuffer
2092	.967c	4c da ff	jmp $ffda	                jmp OSARGS

2094						;-------------------------------------------------------------------------

2102						;-------------------------------------------------------------------------

2105	.967f					starCLOSE:
2106	.967f	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
2107	.9682	d0 a1		bne $9625	                bne L9625
2108	.9684	a9 00		lda #$00	                lda #$00
2109	.9686	a8		tay		                tay
2110	.9687	6c 1c 02	jmp ($021c)	                jmp (FINDV)                  ;OSFIND A=0 Y=0

2113						;-------------------------------------------------------------------------

2116	.968a					starIGNORE:
2117	.968a	d0 05		bne $9691	                bne L938E
2118	.968c	38		sec		                sec
2119	.968d	6e 46 02	ror $0246	                ror noignoreState
2120	.9690	60		rts		                rts

2122	.9691					L938E:
2123	.9691	a9 06		lda #$06	                lda #$06
2124	.9693	80 a5		bra $963a	                bra L963A

2127						;-------------------------------------------------------------------------
2128						;
2129	.9695					starDELETE:
2130	.9695	20 8a 95	jsr $958a	                jsr starREMOVE
2131	.9698	a8		tay		                tay
2132	.9699	d0 99		bne $9634	                bne rts941F
2133	.969b	4c bc a9	jmp $a9bc	                jmp notFoundError

2135						;-------------------------------------------------------------------------

2143						;-------------------------------------------------------------------------

2162						;-------------------------------------------------------------------------

2165	.969e					starSHOW:
2166	.969e	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
2167	.96a0	49 0d		eor #$0d	                eor #13
2168	.96a2	d0 1b		bne $96bf	                bne L96BF
2169	.96a4	aa		tax		                tax
2170	.96a5					L96A5:
2171	.96a5	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
2172	>96a8	4b 65 79 20 00			                .text "Key ",0

2174	.96ad	da		phx		                phx
2175	.96ae	8a		txa		                txa
2176	.96af	20 b5 ac	jsr $acb5	                jsr printHexDigit
2177	.96b2	20 f3 a3	jsr $a3f3	                jsr printSpace
2178	.96b5	20 c7 96	jsr $96c7	                jsr printKeyDefinition
2179	.96b8	fa		plx		                plx
2180	.96b9	e8		inx		                inx
2181	.96ba	e0 10		cpx #$10	                cpx #$10
2182	.96bc	90 e7		bcc $96a5	                bcc L96A5
2183	.96be					L96BE:
2184	.96be	60		rts		                rts

2186	.96bf					L96BF:
2187	.96bf	20 fe 96	jsr $96fe	                jsr parseSoftKeyNumberFromCommandLine
2188	.96c2	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
2189	.96c5					L96C5:
2190	.96c5	d0 40		bne $9707	                bne badKeyError

2193						;-------------------------------------------------------------------------

2208						;-------------------------------------------------------------------------
2209						;
2210						; [MasRef C.5-11]
2211						;

2219	.96c7					printKeyDefinition:
2221	.96c7	a9 22		lda #$22	                lda #'"'
2222	.96c9	20 ee ff	jsr $ffee	                jsr OSWRCH
2223	.96cc	a5 f4		lda $f4		                lda $F4
2224	.96ce	48		pha		                pha
2225	.96cf	20 b1 e5	jsr $e5b1	                jsr selectTerminalROMAndANDY2
2226						                .cwarn *<$9000,format("Code inside ANDY at: $%04x",*)
2227	.96d2	bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2228	.96d5	85 f2		sta $f2		                sta stringInputBufferAddress+0
2229	.96d7	bd 11 80	lda $8011,x	                lda andy.softKeys.stringMSBs,x
2230	.96da	85 f3		sta $f3		                sta stringInputBufferAddress+1
2234	.96dc	8a		txa		                txa
2235	.96dd	a8		tay		                tay
2237	.96de	20 c8 ec	jsr $ecc8	                jsr getSoftKeyStringLength
2238	.96e1	a8		tay		                tay                          ;Y = string length
2239	.96e2	f0 0e		beq $96f2	                beq starSHOWDone                    ;done if length=0
2240	.96e4					-
2241	.96e4	b2 f2		lda ($f2)	                lda (stringInputBufferAddress)
2242	.96e6	20 52 98	jsr $9852	                jsr printGSREADChar
2243	.96e9	e6 f2		inc $f2		                inc stringInputBufferAddress+0
2244	.96eb	d0 02		bne $96ef	                bne +
2245	.96ed	e6 f3		inc $f3		                inc stringInputBufferAddress+1
2246	.96ef					+
2247	.96ef	88		dey		                dey
2248	.96f0	d0 f2		bne $96e4	                bne -
2249	.96f2					starSHOWDone:
2250	.96f2	68		pla		                pla
2251	.96f3	20 ab e5	jsr $e5ab	                jsr selectROMA
2252	.96f6	a9 22		lda #$22	                lda #'"'
2253	.96f8	20 ee ff	jsr $ffee	                jsr OSWRCH
2254	.96fb	4c e7 ff	jmp $ffe7	                jmp OSNEWL

2256						;-------------------------------------------------------------------------

2259	.96fe					parseSoftKeyNumberFromCommandLine:
2260	.96fe	20 36 86	jsr $8636	                jsr parseNumberFromString
2261	.9701	90 04		bcc $9707	                bcc badKeyError
2262	.9703	e0 10		cpx #$10	                cpx #softKeyCount
2263	.9705	90 b7		bcc $96be	                bcc L96BE
2264	.9707					badKeyError:
2265	.9707	20 ff ae	jsr $aeff	                jsr doFollowingError
2266	>970a	fb				                .byte $FB
2267	>970b	42 61 64 20 6b 65 79		                .text "Bad key"
2268	>9712	00				                .byte 0

2271						;-------------------------------------------------------------------------
2272						;
2273						; [MasRef C.5-8]
2274						;
2275	.9713					starKEY: .proc
2276	.9713	20 fe 96	jsr $96fe	                jsr parseSoftKeyNumberFromCommandLine
2277	.9716	a5 f4		lda $f4		                lda $F4
2278	.9718	48		pha		                pha
2279	.9719	20 98 e5	jsr $e598	                jsr selectTerminalROMAndANDY
2280	.971c	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
2281	.971f	64 b0		stz $b0		                stz starKEYWorkspace.newStringLength
2282	.9721	f0 15		beq $9738	                beq commandLineTailEmpty
2283	.9723	a2 00		ldx #$00	                ldx #$00
2284	.9725	38		sec		                sec
2285	.9726	20 2d f3	jsr $f32d	                jsr gsinitEntryPoint
2286	.9729					-
2287	.9729	20 3e f3	jsr $f33e	                jsr gsreadEntryPoint
2288	.972c	b0 06		bcs $9734	                bcs bneBadKeyError
2289	.972e	9d 00 dc	sta $dc00,x	                sta hazel.commandLine,x
2290	.9731	e8		inx		                inx
2291	.9732	80 f5		bra $9729	                bra -

2293	.9734					bneBadKeyError:
2297	.9734	d0 d1		bne $9707	                bne badKeyError
2299	.9736	86 b0		stx $b0		                stx starKEYWorkspace.newStringLength
2300	.9738					commandLineTailEmpty:
2301	.9738	a4 e6		ldy $e6		                ldy $E6                        ;Y = soft key number
2302	.973a	20 c8 ec	jsr $ecc8	                jsr getSoftKeyStringLength
2303	.973d	85 b5		sta $b5		                sta starKEYWorkspace.counter+0
2304	.973f	38		sec		                sec
2305	.9740	e5 b0		sbc $b0		                sbc starKEYWorkspace.newStringLength ;A=existing len-new len
2306	.9742	b0 16		bcs $975a	                bcs newStringWillFit            ;taken if new string shorter, meaning it'll definitely fit

2308	.9744	49 ff		eor #$ff	                eor #$FF
2309	.9746	69 01		adc #$01	                adc #$01                     ;A=new len-existing len
2310	.9748	6d 10 80	adc $8010	                adc andy.softKeys.endLSB
2311	.974b	aa		tax		                tax
2312	.974c	ad 21 80	lda $8021	                lda andy.softKeys.endMSB
2313	.974f	69 00		adc #$00	                adc #$00
2314	.9751	c9 84		cmp #$84	                cmp #>(andy.softKeys.end)
2315	.9753	90 05		bcc $975a	                bcc newStringWillFit

2317						                ; Produce slightly cryptic "Bad key" if string won't
2318						                ; fit.
2319	.9755	d0 dd		bne $9734	                bne bneBadKeyError
2320	.9757	8a		txa		                txa
2321	.9758	d0 da		bne $9734	                bne bneBadKeyError
2322	.975a					newStringWillFit:
2323	.975a	ad 68 02	lda $0268	                lda softKeyStringLength
2324	.975d	f0 32		beq $9791	                beq storeNewString          ;taken if new string empty
2325	.975f	ad c9 02	lda $02c9	                lda currentSoftKey
2326	.9762	c5 e6		cmp $e6		                cmp $E6
2327	.9764	90 2b		bcc $9791	                bcc storeNewString ;taken if current soft key<key - expansion will not need to relocate
2328	.9766	d0 0f		bne $9777	                bne relocateCurrentSoftKeyExpansion ;taken if current soft key>key - expansion must relocate
2329	.9768	20 ff ae	jsr $aeff	                jsr doFollowingError
2330	>976b	fa 4b 65 79 20 69 6e 20		                .text $fa,"Key in use",0
	>9773	75 73 65 00
2331	.9777					relocateCurrentSoftKeyExpansion:
2332	.9777	64 b2		stz $b2		                stz starKEYWorkspace.destPtr+1
2333	.9779	38		sec		                sec
2334	.977a	a5 b0		lda $b0		                lda starKEYWorkspace.newStringLength
2335	.977c	e5 b5		sbc $b5		                sbc starKEYWorkspace.counter+0
2336	.977e	85 b1		sta $b1		                sta starKEYWorkspace.destPtr+0
2337	.9780	b0 02		bcs $9784	                bcs +
2338	.9782	c6 b2		dec $b2		                dec starKEYWorkspace.destPtr+1
2339	.9784					+
2340	.9784	18		clc		                clc
2341	.9785	a5 f8		lda $f8		                lda softKeyExpansionPtr+0
2342	.9787	65 b1		adc $b1		                adc starKEYWorkspace.destPtr+0
2343	.9789	85 f8		sta $f8		                sta softKeyExpansionPtr+0
2344	.978b	a5 f9		lda $f9		                lda softKeyExpansionPtr+1
2345	.978d	65 b2		adc $b2		                adc starKEYWorkspace.destPtr+1
2346	.978f	85 f9		sta $f9		                sta softKeyExpansionPtr+1
2347	.9791					storeNewString:
2348	.9791	ce 84 02	dec $0284	                dec softKeyConsistencyFlag   ;mark soft keys inconsistent
2349	.9794	a6 e6		ldx $e6		                ldx $E6                      ;X=key number
2350	.9796	a5 b5		lda $b5		                lda starKEYWorkspace.counter+0
2351	.9798	f0 45		beq $97df	                beq makeSpaceForNewString ;taken if no existing string for this soft key

2353						                ; delete existing string
2354	.979a	bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2355	.979d	85 b1		sta $b1		                sta starKEYWorkspace.destPtr+0
2356	.979f	bd 11 80	lda $8011,x	                lda andy.softKeys.stringMSBs,x
2357	.97a2	85 b2		sta $b2		                sta starKEYWorkspace.destPtr+1
2358	.97a4	bd 01 80	lda $8001,x	                lda andy.softKeys.stringLSBs+1,x
2359	.97a7	85 b3		sta $b3		                sta starKEYWorkspace.srcPtr+0
2360	.97a9	bd 12 80	lda $8012,x	                lda andy.softKeys.stringMSBs+1,x
2361	.97ac	85 b4		sta $b4		                sta starKEYWorkspace.srcPtr+1
2362	.97ae					deleteExistingStringLoop:
2363						                ; copy byte (with postincrement)
2364	.97ae	b2 b3		lda ($b3)	                lda (starKEYWorkspace.srcPtr)
2365	.97b0	92 b1		sta ($b1)	                sta (starKEYWorkspace.destPtr)

2367						                ; increment destPtr
2368	.97b2	e6 b1		inc $b1		                inc starKEYWorkspace.destPtr+0
2369	.97b4	d0 02		bne $97b8	                bne +
2370	.97b6	e6 b2		inc $b2		                inc starKEYWorkspace.destPtr+1
2371	.97b8					+

2373						                ; increment srcPtr
2374	.97b8	e6 b3		inc $b3		                inc starKEYWorkspace.srcPtr+0
2375	.97ba	d0 02		bne $97be	                bne +
2376	.97bc	e6 b4		inc $b4		                inc starKEYWorkspace.srcPtr+1
2377	.97be					+

2379						                ; keep copying until end of buffer reached.
2380	.97be	a5 b3		lda $b3		                lda starKEYWorkspace.srcPtr+0
2381	.97c0	cd 10 80	cmp $8010	                cmp andy.softKeys.endLSB
2382	.97c3	a5 b4		lda $b4		                lda starKEYWorkspace.srcPtr+1
2383	.97c5	ed 21 80	sbc $8021	                sbc andy.softKeys.endMSB
2384	.97c8	90 e4		bcc $97ae	                bcc deleteExistingStringLoop

2386						                ; update following strings' start addresses, which all
2387						                ; move down by the old string's length.
2388	.97ca					updateAddressesLoop:
2389	.97ca	e8		inx		                inx
2390	.97cb	e0 11		cpx #$11	                cpx #softKeyCount+1
2391	.97cd	b0 10		bcs $97df	                bcs makeSpaceForNewString
2392	.97cf	38		sec		                sec
2393	.97d0	bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2394	.97d3	e5 b5		sbc $b5		                sbc starKEYWorkspace.counter+0
2395	.97d5	9d 00 80	sta $8000,x	                sta andy.softKeys.stringLSBs,x
2396	.97d8	b0 f0		bcs $97ca	                bcs updateAddressesLoop
2397	.97da	de 11 80	dec $8011,x	                dec andy.softKeys.stringMSBs,x
2398	.97dd	80 eb		bra $97ca	                bra updateAddressesLoop

2400	.97df					makeSpaceForNewString:
2401	.97df	a6 e6		ldx $e6		                ldx $E6
2402	.97e1	a5 b0		lda $b0		                lda starKEYWorkspace.newStringLength
2403	.97e3	f0 66		beq $984b	                beq done
2404	.97e5	ad 10 80	lda $8010	                lda andy.softKeys.endLSB
2405	.97e8	85 b3		sta $b3		                sta starKEYWorkspace.srcPtr+0
2406	.97ea	18		clc		                clc
2407	.97eb	65 b0		adc $b0		                adc starKEYWorkspace.newStringLength
2408	.97ed	85 b1		sta $b1		                sta starKEYWorkspace.destPtr+0 ;new end ptr LSB
2409	.97ef	ad 21 80	lda $8021	                lda andy.softKeys.endMSB
2410	.97f2	85 b4		sta $b4		                sta starKEYWorkspace.srcPtr+1
2411	.97f4	69 00		adc #$00	                adc #$00
2412	.97f6	85 b2		sta $b2		                sta starKEYWorkspace.destPtr+1 ;new end ptr MSB
2413	.97f8	a5 b3		lda $b3		                lda starKEYWorkspace.srcPtr+0
2414	.97fa	38		sec		                sec
2415	.97fb	fd 00 80	sbc $8000,x	                sbc andy.softKeys.stringLSBs,x
2416	.97fe	85 b5		sta $b5		                sta starKEYWorkspace.counter+0
2417	.9800	a5 b4		lda $b4		                lda starKEYWorkspace.srcPtr+1
2418	.9802	fd 11 80	sbc $8011,x	                sbc andy.softKeys.stringMSBs,x
2419	.9805	85 b6		sta $b6		                sta starKEYWorkspace.counter+1
2420	.9807					makeSpaceForNewStringLoop:
2421						                ; loop while counter>0
2422	.9807	a5 b5		lda $b5		                lda starKEYWorkspace.counter+0
2423	.9809	05 b6		ora $b6		                ora starKEYWorkspace.counter+1
2424	.980b	f0 1e		beq $982b	                beq updateAddressesLoop2

2426						                ; decrement destPtr
2427	.980d	a5 b1		lda $b1		                lda starKEYWorkspace.destPtr+0
2428	.980f	d0 02		bne $9813	                bne +
2429	.9811	c6 b2		dec $b2		                dec starKEYWorkspace.destPtr+1
2430	.9813					+
2431	.9813	c6 b1		dec $b1		                dec starKEYWorkspace.destPtr+0

2433						                ; decrement srcPtr
2434	.9815	a5 b3		lda $b3		                lda starKEYWorkspace.srcPtr+0
2435	.9817	d0 02		bne $981b	                bne +
2436	.9819	c6 b4		dec $b4		                dec starKEYWorkspace.srcPtr+1
2437	.981b					+
2438	.981b	c6 b3		dec $b3		                dec starKEYWorkspace.srcPtr+0

2440						                ; copy byte (with predecrement)
2441	.981d	b2 b3		lda ($b3)	                lda (starKEYWorkspace.srcPtr)
2442	.981f	92 b1		sta ($b1)	                sta (starKEYWorkspace.destPtr)

2444						                ; decrement counter
2445	.9821	a5 b5		lda $b5		                lda starKEYWorkspace.counter+0
2446	.9823	d0 02		bne $9827	                bne +
2447	.9825	c6 b6		dec $b6		                dec starKEYWorkspace.counter+1
2448	.9827					+
2449	.9827	c6 b5		dec $b5		                dec starKEYWorkspace.counter+0

2451	.9829	80 dc		bra $9807	                bra makeSpaceForNewStringLoop

2453						                ; update following strings' start addresses, which all
2454						                ; move up by the new string's length.
2455	.982b					updateAddressesLoop2:
2456	.982b	e8		inx		                inx
2457	.982c	e0 11		cpx #$11	                cpx #softKeyCount+1
2458	.982e	b0 0f		bcs $983f	                bcs copyNewString
2459	.9830	bd 00 80	lda $8000,x	                lda andy.softKeys.stringLSBs,x
2460	.9833	65 b0		adc $b0		                adc starKEYWorkspace.newStringLength
2461	.9835	9d 00 80	sta $8000,x	                sta andy.softKeys.stringLSBs,x
2462	.9838	90 f1		bcc $982b	                bcc updateAddressesLoop2
2463	.983a	fe 11 80	inc $8011,x	                inc andy.softKeys.stringMSBs,x
2464	.983d	80 ec		bra $982b	                bra updateAddressesLoop2

2466	.983f					copyNewString:
2467	.983f	a0 00		ldy #$00	                ldy #$00
2468	.9841					copyNewStringLoop:
2469	.9841	b9 00 dc	lda $dc00,y	                lda hazel.commandLine,y
2470	.9844	91 b3		sta ($b3),y	                sta (starKEYWorkspace.srcPtr),y
2471	.9846	c8		iny		                iny
2472	.9847	c6 b0		dec $b0		                dec starKEYWorkspace.newStringLength
2473	.9849	d0 f6		bne $9841	                bne copyNewStringLoop
2474	.984b					done:
2475	.984b	ee 84 02	inc $0284	                inc softKeyConsistencyFlag   ;mark soft keys consistent
2476	.984e	68		pla		                pla
2477	.984f	4c ab e5	jmp $e5ab	                jmp selectROMA
2478						                .endproc

2480						;-------------------------------------------------------------------------
2481						;
2482						; Print char, printing control codes using the string reader escape
2483						; syntax. [MasRef C.5-8]
2484						;
2485	.9852					printGSREADChar: .proc
2486	.9852	aa		tax		                tax                          ;X=char
2487	.9853	30 28		bmi $987d	                bmi printHighBitChar
2488	.9855	c9 20		cmp #$20	                cmp #$20
2489	.9857	90 1f		bcc $9878	                bcc printControlChar
2490	.9859	e8		inx		                inx
2491	.985a	30 0f		bmi $986b	                bmi vdu127
2492	.985c	ca		dex		                dex                          ;restore old char
2493	.985d	c9 22		cmp #$22	                cmp #'"'
2494	.985f	f0 11		beq $9872	                beq printEscapedX
2495	.9861	c9 7c		cmp #$7c	                cmp #'|'
2496	.9863	d0 03		bne $9868	                bne printA
2497						                ; print "||"
2498	.9865	20 ee ff	jsr $ffee	                jsr OSWRCH
2499	.9868					printA:
2500	.9868	4c ee ff	jmp $ffee	                jmp OSWRCH

2502	.986b					vdu127:
2503						                ; print "|?"
2504	.986b	20 88 98	jsr $9888	                jsr printEscapeChar
2505	.986e	a9 3f		lda #$3f	                lda #'?'
2506	.9870	80 f6		bra $9868	                bra printA

2508	.9872					printEscapedX:
2509	.9872	20 88 98	jsr $9888	                jsr printEscapeChar
2510	.9875	8a		txa		                txa
2511	.9876	80 f0		bra $9868	                bra printA

2513	.9878					printControlChar:
2514	.9878	09 40		ora #$40	                ora #$40
2515	.987a	aa		tax		                tax
2516	.987b	80 f5		bra $9872	                bra printEscapedX

2518	.987d					printHighBitChar:
2519	.987d	48		pha		                pha
2520	.987e	a2 21		ldx #$21	                ldx #'!'
2521	.9880	20 72 98	jsr $9872	                jsr printEscapedX
2522	.9883	68		pla		                pla
2523	.9884	29 7f		and #$7f	                and #$7F
2524	.9886	80 ca		bra $9852	                bra printGSREADChar

2526	.9888					printEscapeChar:
2527	.9888	a9 7c		lda #$7c	                lda #'|'
2528	.988a	80 dc		bra $9868	                bra printA
2529						                .endproc

2531						;-------------------------------------------------------------------------

2534						                .include "rtc.s65"

:11	;******  Processing file: src/rtc.s65

213						;-------------------------------------------------------------------------

215						; TODO - is this necessary?
216						;
217						; There's a reference to dayOfWeekStrings-4, but that seems to be
218						; because days are 1-based. The data here is presumably never
219						; accesssed.
220	>988c	20 20 20 00			                .text "   ",0

222						;-------------------------------------------------------------------------

224	.9890					dayOfWeekStrings: .block
225	>9890	53 75 6e 01			                .text "Sun",$01
226	>9894	4d 6f 6e 02			                .text "Mon",$02
227	>9898	54 75 65 03			                .text "Tue",$03
228	>989c	57 65 64 04			                .text "Wed",$04
229	>98a0	54 68 75 05			                .text "Thu",$05
230	>98a4	46 72 69 06			                .text "Fri",$06
231	>98a8	53 61 74 07			                .text "Sat",$07
232						                .endblock

234						;-------------------------------------------------------------------------

236	.98ac					monthStrings: .block
237	>98ac	4a 61 6e 01			                .text "Jan",$01
238	>98b0	46 65 62 02			                .text "Feb",$02
239	>98b4	4d 61 72 03			                .text "Mar",$03
240	>98b8	41 70 72 04			                .text "Apr",$04
241	>98bc	4d 61 79 05			                .text "May",$05
242	>98c0	4a 75 6e 06			                .text "Jun",$06
243	>98c4	4a 75 6c 07			                .text "Jul",$07
244	>98c8	41 75 67 08			                .text "Aug",$08
245	>98cc	53 65 70 09			                .text "Sep",$09
246	>98d0	4f 63 74 10			                .text "Oct",$10
247	>98d4	4e 6f 76 11			                .text "Nov",$11
248	>98d8	44 65 63 12			                .text "Dec",$12
249						                .endblock

251						;-------------------------------------------------------------------------

254	.98dc					L986C:
255	>98dc	99				                .byte $99
256	>98dd	12				                .byte $12
257	>98de	31				                .byte $31
258	>98df	06				                .byte $06
259	>98e0	23				                .byte $23
260	>98e1	59				                .byte $59
261	>98e2	59				                .byte $59

264						;-------------------------------------------------------------------------

267	.98e3					osword0F:
268	.98e3	a2 08		ldx #$08	                ldx #romServiceCallUnrecognisedOSWORD
269	.98e5	4c ff ee	jmp $eeff	                jmp makeROMServiceCall

272						;-------------------------------------------------------------------------
273						;
274						; OSWORD 14 (&0E) Read CMOS clock [MasRef D.3-22]
275						;

277	.98e8					osword0E:
283	.98e8	c9 02		cmp #$02	                cmp #2
284	.98ea	f0 2c		beq $9918	                beq L98A8
285	.98ec	48		pha		                pha
286	.98ed	a5 f0		lda $f0		                lda originalX
287	.98ef	48		pha		                pha
288	.98f0	a5 f1		lda $f1		                lda originalY
289	.98f2	48		pha		                pha
290	.98f3	a2 08		ldx #$08	                ldx #romServiceCallUnrecognisedOSWORD
291	.98f5	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
292	.98f8	c9 01		cmp #$01	                cmp #1
293	.98fa	68		pla		                pla
294	.98fb	85 f1		sta $f1		                sta originalY
295	.98fd	68		pla		                pla
296	.98fe	85 f0		sta $f0		                sta originalX
297	.9900	90 1e		bcc $9920	                bcc L98B0
298	.9902	a0 07		ldy #$07	                ldy #7
299	.9904	68		pla		                pla
300	.9905	48		pha		                pha
301	.9906	f0 01		beq $9909	                beq L9899
302	.9908	88		dey		                dey
303	.9909					L9899:
304	.9909	a2 07		ldx #$07	                ldx #7
305	.990b					L989B:
306	.990b	bd db 98	lda $98db,x	                lda L986C-1,x
307	.990e	91 f0		sta ($f0),y	                sta (originalX),y
308	.9910	88		dey		                dey
309	.9911	ca		dex		                dex
310	.9912	d0 f7		bne $990b	                bne L989B
311	.9914	68		pla		                pla
312	.9915	3a		dec a		                dec a
313	.9916	f0 07		beq $991f	                beq L98AF
314	.9918					L98A8:
315	.9918	a2 08		ldx #$08	                ldx #romServiceCallUnrecognisedOSWORD
316	.991a	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
317	.991d	d0 03		bne $9922	                bne L98B2
318	.991f					L98AF:
319	.991f	48		pha		                pha
320	.9920					L98B0:
321	.9920	68		pla		                pla
322	.9921	60		rts		                rts

324	.9922					L98B2:

327						                ; Convert given time to string. Fill out the RTC temp
328						                ; data with the info from the parameter block, then
329						                ; pass on to the common code.
330	.9922	a0 07		ldy #$07	                ldy #$07

332						                ; Copy hours, mins, secs.
333	.9924	a2 00		ldx #$00	                ldx #$00
334	.9926					-
335	.9926	b1 f0		lda ($f0),y	                lda ($F0),y
336	.9928	9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
337	.992b	88		dey		                dey
338	.992c	e8		inx		                inx
339	.992d	e8		inx		                inx
340	.992e	e0 06		cpx #$06	                cpx #$06
341	.9930	90 f4		bcc $9926	                bcc -

343						                ; Copy day of week, day of month, month, year.
344	.9932					-
345	.9932	b1 f0		lda ($f0),y	                lda (originalX),y
346	.9934	9d ee 02	sta $02ee,x	                sta osfileParameterBlock+1,x
347	.9937	e8		inx		                inx
348	.9938	88		dey		                dey
349	.9939	d0 f7		bne $9932	                bne -

413	.993b					convertTimeToString:
414						                ; Store terminating CR.
415	.993b	a0 18		ldy #$18	                ldy #ClockStringFormat.cr
416	.993d	a9 0d		lda #$0d	                lda #13
417	.993f	91 f0		sta ($f0),y	                sta (originalX),y
418	.9941	a2 00		ldx #$00	                ldx #$00
419	.9943	88		dey		                dey
420	.9944	20 a9 99	jsr $99a9	                jsr storeRTCDataByteString
421	.9947	a9 3a		lda #$3a	                lda #':'
422	.9949	91 f0		sta ($f0),y	                sta (originalX),y
423	.994b	a0 12		ldy #$12	                ldy #ClockStringFormat.hh+2
424	.994d	91 f0		sta ($f0),y	                sta (originalX),y
425	.994f	a2 02		ldx #$02	                ldx #RTC.minutes
426	.9951	a0 14		ldy #$14	                ldy #ClockStringFormat.mm+1
427	.9953	20 a9 99	jsr $99a9	                jsr storeRTCDataByteString
428	.9956	a2 04		ldx #$04	                ldx #RTC.hours
429	.9958	a0 11		ldy #$11	                ldy #ClockStringFormat.hh+1
430	.995a	20 a9 99	jsr $99a9	                jsr storeRTCDataByteString
431	.995d	a9 2e		lda #$2e	                lda #'.'
432	.995f	91 f0		sta ($f0),y	                sta (originalX),y
433	.9961	ad f4 02	lda $02f4	                lda osfileParameterBlock+1+RTC.dayOfWeek;
434	.9964	0a		asl a		                asl a
435	.9965	0a		asl a		                asl a
436	.9966	a0 00		ldy #$00	                ldy #$00
437	.9968	aa		tax		                tax
438	.9969					-
439	.9969	bd 8c 98	lda $988c,x	                lda dayOfWeekStrings-4,x     ;-4 as 1=Sunday
440	.996c	91 f0		sta ($f0),y	                sta (originalX),y
441	.996e	e8		inx		                inx
442	.996f	c8		iny		                iny
443	.9970	c0 03		cpy #$03	                cpy #$03
444	.9972	90 f5		bcc $9969	                bcc -
445	.9974	a9 2c		lda #$2c	                lda #','
446	.9976	91 f0		sta ($f0),y	                sta (originalX),y
447	.9978	ad f6 02	lda $02f6	                lda osfileParameterBlock+1+RTC.month
448	.997b	c9 10		cmp #$10	                cmp #$10
449	.997d	90 02		bcc $9981	                bcc +
450	.997f	e9 06		sbc #$06	                sbc #$06            ;convert $10, $11 and $12 from BCD
451	.9981					+
452	.9981	3a		dec a		                dec a                        ;make month 0-based
453	.9982	0a		asl a		                asl a
454	.9983	0a		asl a		                asl a
455	.9984	aa		tax		                tax
456	.9985	a0 07		ldy #$07	                ldy #ClockStringFormat.mmm
457	.9987					-
458	.9987	bd ac 98	lda $98ac,x	                lda monthStrings,x
459	.998a	91 f0		sta ($f0),y	                sta ($F0),y
460	.998c	e8		inx		                inx
461	.998d	c8		iny		                iny
462	.998e	c0 0a		cpy #$0a	                cpy #ClockStringFormat.mmm+3
463	.9990	90 f5		bcc $9987	                bcc -
464	.9992	a2 09		ldx #$09	                ldx #RTC.year
465	.9994	a0 0e		ldy #$0e	                ldy #ClockStringFormat.yyyy+3
466	.9996	20 a9 99	jsr $99a9	                jsr storeRTCDataByteString
467	.9999	a9 19		lda #$19	                lda #assumedRTCCenturyBCD
468	.999b	20 ac 99	jsr $99ac	                jsr storeBCDByteString
469	.999e	a9 20		lda #$20	                lda #$20
470	.99a0	91 f0		sta ($f0),y	                sta ($F0),y
471	.99a2	a0 06		ldy #$06	                ldy #ClockStringFormat.nn+2
472	.99a4	91 f0		sta ($f0),y	                sta ($F0),y
473	.99a6	88		dey		                dey
474	.99a7	a2 07		ldx #$07	                ldx #RTC.dayOfMonth
475	.99a9					storeRTCDataByteString:
476	.99a9	bd ee 02	lda $02ee,x	                lda osfileParameterBlock+1,x
477	.99ac					storeBCDByteString:
478	.99ac	48		pha		                pha
479	.99ad	20 b5 99	jsr $99b5	                jsr storeNybbleString
480	.99b0	68		pla		                pla
484	.99b1	4a		lsr a		                lsr a
485	.99b2	4a		lsr a		                lsr a
486	.99b3	4a		lsr a		                lsr a
487	.99b4	4a		lsr a		                lsr a
489	.99b5					storeNybbleString:
490	.99b5	29 0f		and #$0f	                and #$0F
491	.99b7	09 30		ora #$30	                ora #'0'
492	.99b9	c9 3a		cmp #$3a	                cmp #'9'+1
493	.99bb	90 02		bcc $99bf	                bcc +
494	.99bd	69 06		adc #$06	                adc #('A'-'9'-1)-1           ;(-1 because C set)
495	.99bf					+
496	.99bf	91 f0		sta ($f0),y	                sta (originalX),y
497	.99c1	88		dey		                dey
498	.99c2	60		rts		                rts

500						;-------------------------------------------------------------------------

512						;-------------------------------------------------------------------------

524						;-------------------------------------------------------------------------
525						;
526						; Read byte from RTC, either by 0-based CMOS RAM offset (readCMOSByte)
527						; or by RTC register index (readRTCByte).
528						;
529						; entry:
530						;
531						; X = address to read from
532						;
533						; exit:
534						;
535						; A = byte read
536						;
537						; N,Z = set as per byte read
538						;

574						;-------------------------------------------------------------------------
575						;
576						; Write byte to RTC, either by 0-based CMOS RAM offset (writeCMOSByte)
577						; or by RTC register index (writeRTCByte).
578						;
579						; (For some reason, writeCMOSByte can't be used to write to CMOS RAM
580						; offset 0.)
581						;
582						; entry:
583						;
584						; X = address to write to
585						;
586						; Y = value to write
587						;

608						;-------------------------------------------------------------------------
609						;
610						; Convert CMOS byte offset to actual RTC address.
611						;
612						; entry:
613						;
614						; X = CMOS byte offset - 0-49
615						;
616						; exit:
617						;
618						; C=1 = invalid address
619						;
620						; C=0 = valid address: X = register index
621						;

633						;-------------------------------------------------------------------------
634						;
635						; set RTC address for future read/write operation.
636						;
637						; entry:
638						;
639						; X = address to set
640						;
641						; preserves: Y
642						;

:5	;******  Return to file: src/terminal.s65

2537						;-------------------------------------------------------------------------

2539	.99c3					L9923:
2540	.99c3	a9 03		lda #$03	                lda #$03
2541	.99c5	20 98 d2	jsr $d298	                jsr LD298
2542	.99c8	90 12		bcc $99dc	                bcc L993C
2543	.99ca	20 d0 99	jsr $99d0	                jsr L9930
2544	.99cd	20 a9 d8	jsr $d8a9	                jsr LD8A9
2545	.99d0					L9930:
2546	.99d0	a2 20		ldx #$20	                ldx #$20
2547	.99d2	4c c8 e2	jmp $e2c8	                jmp LE2B8

2549	.99d5					L9935:
2550	.99d5	a9 02		lda #$02	                lda #$02
2551	.99d7	20 98 d2	jsr $d298	                jsr LD298
2552	.99da	b0 64		bcs $9a40	                bcs L99A0
2553	.99dc					L993C:
2554	.99dc	20 d2 d3	jsr $d3d2	                jsr LD3D2
2555	.99df	20 5f 9b	jsr $9b5f	                jsr L9ABF
2556	.99e2	80 08		bra $99ec	                bra L994C

2558	.99e4					L9944:
2559	.99e4	20 1a d4	jsr $d41a	                jsr LD41A
2560	.99e7	f0 57		beq $9a40	                beq L99A0
2561	.99e9	20 d2 d3	jsr $d3d2	                jsr LD3D2
2562	.99ec					L994C:
2563	.99ec	a5 e1		lda $e1		                lda $E1
2564	.99ee	89 20		bit #$20	                bit #$20
2565	.99f0	f0 05		beq $99f7	                beq L9957
2566	.99f2	48		pha		                pha
2567	.99f3	20 a3 d6	jsr $d6a3	                jsr LD6A3
2568	.99f6	68		pla		                pla
2569	.99f7					L9957:
2570	.99f7	89 10		bit #$10	                bit #$10
2571	.99f9	f0 03		beq $99fe	                beq L995E
2572	.99fb	20 98 d6	jsr $d698	                jsr LD698
2573	.99fe					L995E:
2574	.99fe	20 9c 9a	jsr $9a9c	                jsr L99FC
2575	.9a01	08		php		                php
2576	.9a02	20 fa 9a	jsr $9afa	                jsr L9A5A
2577	.9a05	a2 42		ldx #$42	                ldx #$42
2578	.9a07	a0 46		ldy #$46	                ldy #$46
2579	.9a09	a9 20		lda #$20	                lda #$20
2580	.9a0b	2c 49 88	bit $8849	                bit L8849
2581	.9a0e	f0 1c		beq $9a2c	                beq L998C
2582	.9a10	30 18		bmi $9a2a	                bmi L998A
2583	.9a12	ad 2c 03	lda $032c	                lda $032C
2584	.9a15	cd 37 03	cmp $0337	                cmp $0337
2585	.9a18	d0 08		bne $9a22	                bne L9982
2586	.9a1a	ad 2d 03	lda $032d	                lda $032D
2587	.9a1d	cd 38 03	cmp $0338	                cmp $0338
2588	.9a20	f0 10		beq $9a32	                beq L9992
2589	.9a22					L9982:
2590	.9a22	a2 37		ldx #$37	                ldx #$37
2591	.9a24	20 4d d2	jsr $d24d	                jsr LD24D
2592	.9a27	a2 42		ldx #$42	                ldx #$42
2593	.9a29	b8		clv		                clv
2594	.9a2a					L998A:
2595	.9a2a	a0 2c		ldy #$2c	                ldy #$2C
2596	.9a2c					L998C:
2597	.9a2c	30 07		bmi $9a35	                bmi L9995
2598	.9a2e	50 02		bvc $9a32	                bvc L9992
2599	.9a30	a2 37		ldx #$37	                ldx #$37
2600	.9a32					L9992:
2601	.9a32	20 4d d2	jsr $d24d	                jsr LD24D
2602	.9a35					L9995:
2603	.9a35	28		plp		                plp
2604	.9a36	90 b4		bcc $99ec	                bcc L994C
2605	.9a38	60		rts		                rts

2607	.9a39					L9999:
2608	.9a39	a9 01		lda #$01	                lda #$01
2609	.9a3b	20 98 d2	jsr $d298	                jsr LD298
2610	.9a3e	90 09		bcc $9a49	                bcc L99A9
2611	.9a40					L99A0:
2612	.9a40	a2 24		ldx #$24	                ldx #$24
2613	.9a42	80 37		bra $9a7b	                bra L99DB

2615	.9a44					L99A4:
2616	.9a44	20 1a d4	jsr $d41a	                jsr LD41A
2617	.9a47	f0 f7		beq $9a40	                beq L99A0
2618	.9a49					L99A9:
2619	.9a49	20 d2 d3	jsr $d3d2	                jsr LD3D2
2620	.9a4c	20 69 9a	jsr $9a69	                jsr L99C9
2621	.9a4f					L99AF:
2622	.9a4f	20 e6 d5	jsr $d5e6	                jsr LD5E6
2623	.9a52	20 69 9a	jsr $9a69	                jsr L99C9
2624	.9a55	ad 30 88	lda $8830	                lda L8830
2625	.9a58	0d 31 88	ora $8831	                ora L8831
2626	.9a5b	f0 3e		beq $9a9b	                beq L99FB
2627	.9a5d	2c 48 88	bit $8848	                bit L8848
2628	.9a60	70 ed		bvs $9a4f	                bvs L99AF
2629	.9a62	a2 42		ldx #$42	                ldx #$42
2630	.9a64	20 76 9a	jsr $9a76	                jsr L99D6
2631	.9a67	80 e6		bra $9a4f	                bra L99AF

2633	.9a69					L99C9:
2634	.9a69	20 34 d3	jsr $d334	                jsr LD334
2635	.9a6c	20 7e 9a	jsr $9a7e	                jsr L99DE
2636	.9a6f	2c 48 88	bit $8848	                bit L8848
2637	.9a72	30 27		bmi $9a9b	                bmi L99FB
2638	.9a74	a2 46		ldx #$46	                ldx #$46
2639	.9a76					L99D6:
2640	.9a76	da		phx		                phx
2641	.9a77	20 80 d2	jsr $d280	                jsr LD280
2642	.9a7a	fa		plx		                plx
2643	.9a7b					L99DB:
2644	.9a7b	4c 4c db	jmp $db4c	                jmp plotPointInternal

2646	.9a7e					L99DE:
2647	.9a7e	a2 03		ldx #$03	                ldx #$03
2648	.9a80					L99E0:
2649	.9a80	bd 30 88	lda $8830,x	                lda L8830,x
2650	.9a83	9d 42 03	sta $0342,x	                sta $0342,x
2651	.9a86	9d 46 03	sta $0346,x	                sta $0346,x
2652	.9a89	ca		dex		                dex
2653	.9a8a	10 f4		bpl $9a80	                bpl L99E0
2654	.9a8c					L99EC:
2655	.9a8c	ac 42 03	ldy $0342	                ldy $0342
2656	.9a8f	ad 43 03	lda $0343	                lda $0343
2657	.9a92	20 2e c9	jsr $c92e	                jsr negateAY
2658	.9a95	8c 42 03	sty $0342	                sty $0342
2659	.9a98	8d 43 03	sta $0343	                sta $0343
2660	.9a9b					L99FB:
2661	.9a9b	60		rts		                rts

2663	.9a9c					L99FC:
2664	.9a9c	a5 e1		lda $e1		                lda $E1
2665	.9a9e	8d 49 88	sta $8849	                sta L8849
2666	.9aa1	20 7e 9a	jsr $9a7e	                jsr L99DE
2667	.9aa4	a2 01		ldx #$01	                ldx #$01
2668	.9aa6					L9A06:
2669	.9aa6	9e 42 03	stz $0342,x	                stz $0342,x
2670	.9aa9	9e 46 03	stz $0346,x	                stz $0346,x
2671	.9aac	ca		dex		                dex
2672	.9aad	10 f7		bpl $9aa6	                bpl L9A06
2673	.9aaf					L9A0F:
2674	.9aaf	20 ce 9a	jsr $9ace	                jsr L9A2E
2675	.9ab2	ad 30 88	lda $8830	                lda L8830
2676	.9ab5	0d 31 88	ora $8831	                ora L8831
2677	.9ab8	d0 06		bne $9ac0	                bne L9A20
2678	.9aba	38		sec		                sec
2679	.9abb	ad 47 88	lda $8847	                lda L8847
2680	.9abe	d0 cc		bne $9a8c	                bne L99EC
2681	.9ac0					L9A20:
2682	.9ac0	20 e6 d5	jsr $d5e6	                jsr LD5E6
2683	.9ac3	ad 32 88	lda $8832	                lda L8832
2684	.9ac6	cd 44 03	cmp $0344	                cmp $0344
2685	.9ac9	f0 e4		beq $9aaf	                beq L9A0F
2686	.9acb	18		clc		                clc
2687	.9acc	80 be		bra $9a8c	                bra L99EC

2689	.9ace					L9A2E:
2690	.9ace	20 34 d3	jsr $d334	                jsr LD334
2691	.9ad1	2c 48 88	bit $8848	                bit L8848
2692	.9ad4	30 07		bmi $9add	                bmi L9A3D
2693	.9ad6	08		php		                php
2694	.9ad7	a2 46		ldx #$46	                ldx #$46
2695	.9ad9	20 e1 9a	jsr $9ae1	                jsr L9A41
2696	.9adc	28		plp		                plp
2697	.9add					L9A3D:
2698	.9add	70 1a		bvs $9af9	                bvs L9A59
2699	.9adf	a2 42		ldx #$42	                ldx #$42
2700	.9ae1					L9A41:
2701	.9ae1	ad 30 88	lda $8830	                lda L8830
2702	.9ae4	a8		tay		                tay
2703	.9ae5	dd 00 03	cmp $0300,x	                cmp $0300,x
2704	.9ae8	ad 31 88	lda $8831	                lda L8831
2705	.9aeb	48		pha		                pha
2706	.9aec	fd 01 03	sbc $0301,x	                sbc $0301,x
2707	.9aef	68		pla		                pla
2708	.9af0	90 07		bcc $9af9	                bcc L9A59
2709	.9af2	9d 01 03	sta $0301,x	                sta $0301,x
2710	.9af5	98		tya		                tya
2711	.9af6	9d 00 03	sta $0300,x	                sta $0300,x
2712	.9af9					L9A59:
2713	.9af9	60		rts		                rts

2715	.9afa					L9A5A:
2716	.9afa	ad 44 03	lda $0344	                lda $0344
2717	.9afd	0d 45 03	ora $0345	                ora $0345
2718	.9b00	d0 5c		bne $9b5e	                bne L9ABE
2719	.9b02	a5 e1		lda $e1		                lda $E1
2720	.9b04	1a		inc a		                inc a
2721	.9b05	29 03		and #$03	                and #$03
2722	.9b07	d0 55		bne $9b5e	                bne L9ABE
2723	.9b09	a9 20		lda #$20	                lda #$20
2724	.9b0b	2c 49 88	bit $8849	                bit L8849
2725	.9b0e	10 09		bpl $9b19	                bpl L9A79
2726	.9b10	f0 07		beq $9b19	                beq L9A79
2727	.9b12	a2 2c		ldx #$2c	                ldx #$2C
2728	.9b14	a0 46		ldy #$46	                ldy #$46
2729	.9b16	20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
2730	.9b19					L9A79:
2731	.9b19	a9 10		lda #$10	                lda #$10
2732	.9b1b	2c 49 88	bit $8849	                bit L8849
2733	.9b1e	50 09		bvc $9b29	                bvc L9A89
2734	.9b20	f0 07		beq $9b29	                beq L9A89
2735	.9b22	a2 37		ldx #$37	                ldx #$37
2736	.9b24	a0 42		ldy #$42	                ldy #$42
2737	.9b26	20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
2738	.9b29					L9A89:
2739	.9b29	20 5f 9b	jsr $9b5f	                jsr L9ABF
2740	.9b2c	a5 e1		lda $e1		                lda $E1
2741	.9b2e	49 3c		eor #$3c	                eor #$3C
2742	.9b30	2a		rol a		                rol a
2743	.9b31	20 6f c6	jsr $c66f	                jsr fixUpVPALETTEFor4Colours
2744	.9b34	6a		ror a		                ror a
2745	.9b35	85 e1		sta $e1		                sta $E1
2746	.9b37	89 20		bit #$20	                bit #$20
2747	.9b39	f0 10		beq $9b4b	                beq L9AAB
2748	.9b3b	48		pha		                pha
2749	.9b3c	a2 2c		ldx #$2c	                ldx #$2C
2750	.9b3e	a0 46		ldy #$46	                ldy #$46
2751	.9b40	20 cc d5	jsr $d5cc	                jsr sortVDUVariableWords
2752	.9b43	98		tya		                tya
2753	.9b44	aa		tax		                tax
2754	.9b45	a0 46		ldy #$46	                ldy #$46
2755	.9b47	20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
2756	.9b4a	68		pla		                pla
2757	.9b4b					L9AAB:
2758	.9b4b	89 10		bit #$10	                bit #$10
2759	.9b4d	f0 0c		beq $9b5b	                beq L9ABB
2760	.9b4f	a2 37		ldx #$37	                ldx #$37
2761	.9b51	a0 42		ldy #$42	                ldy #$42
2762	.9b53	20 cc d5	jsr $d5cc	                jsr sortVDUVariableWords
2763	.9b56	a0 42		ldy #$42	                ldy #$42
2764	.9b58	20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
2765	.9b5b					L9ABB:
2766	.9b5b	9c 49 88	stz $8849	                stz L8849
2767	.9b5e					L9ABE:
2768	.9b5e	60		rts		                rts

2770	.9b5f					L9ABF:
2771	.9b5f	a2 03		ldx #$03	                ldx #$03
2772	.9b61					L9AC1:
2773	.9b61	9e 3b 03	stz $033b,x	                stz $033B,x
2774	.9b64	ca		dex		                dex
2775	.9b65	10 fa		bpl $9b61	                bpl L9AC1
2776	.9b67	a0 28		ldy #$28	                ldy #$28
2777	.9b69	a2 1b		ldx #$1b	                ldx #$1B
2778	.9b6b	a9 2c		lda #$2c	                lda #$2C
2779	.9b6d	20 7f 9b	jsr $9b7f	                jsr L9ADF
2780	.9b70	20 a8 d6	jsr $d6a8	                jsr LD6A8
2781	.9b73	a0 1b		ldy #$1b	                ldy #$1B
2782	.9b75	a2 28		ldx #$28	                ldx #$28
2783	.9b77	a9 37		lda #$37	                lda #$37
2784	.9b79	20 7f 9b	jsr $9b7f	                jsr L9ADF
2785	.9b7c	4c 9d d6	jmp $d69d	                jmp LD69D

2787	.9b7f					L9ADF:
2788	.9b7f	48		pha		                pha
2789	.9b80	a5 e1		lda $e1		                lda $E1
2790	.9b82	4a		lsr a		                lsr a
2791	.9b83	90 0b		bcc $9b90	                bcc L9AF0
2792	.9b85	ad 47 88	lda $8847	                lda L8847
2793	.9b88	d0 04		bne $9b8e	                bne L9AEE
2794	.9b8a	a2 3b		ldx #$3b	                ldx #$3B
2795	.9b8c	80 02		bra $9b90	                bra L9AF0

2797	.9b8e					L9AEE:
2798	.9b8e	a0 3b		ldy #$3b	                ldy #$3B
2799	.9b90					L9AF0:
2800	.9b90	8a		txa		                txa
2801	.9b91	fa		plx		                plx
2802	.9b92	da		phx		                phx
2803	.9b93	48		pha		                pha
2804	.9b94	5a		phy		                phy
2805	.9b95	a8		tay		                tay
2806	.9b96	a9 03		lda #$03	                lda #$03
2807	.9b98	85 da		sta $da		                sta $DA
2808	.9b9a					L9AFA:
2809	.9b9a	b9 00 03	lda $0300,y	                lda $0300,y
2810	.9b9d	9d 1e 88	sta $881e,x	                sta L881E,x
2811	.9ba0	c8		iny		                iny
2812	.9ba1	e8		inx		                inx
2813	.9ba2	c6 da		dec $da		                dec $DA
2814	.9ba4	10 f4		bpl $9b9a	                bpl L9AFA
2815	.9ba6	7a		ply		                ply
2816	.9ba7	68		pla		                pla
2817	.9ba8	fa		plx		                plx
2818	.9ba9					L9B09:
2819	.9ba9	48		pha		                pha
2820	.9baa	5a		phy		                phy
2821	.9bab	20 01 9c	jsr $9c01	                jsr L9B61
2822	.9bae	ca		dex		                dex
2823	.9baf	7a		ply		                ply
2824	.9bb0	68		pla		                pla
2825	.9bb1	da		phx		                phx
2826	.9bb2	c8		iny		                iny
2827	.9bb3	c8		iny		                iny
2828	.9bb4	1a		inc a		                inc a
2829	.9bb5	1a		inc a		                inc a
2830	.9bb6	e8		inx		                inx
2831	.9bb7	e8		inx		                inx
2832	.9bb8	20 01 9c	jsr $9c01	                jsr L9B61
2833	.9bbb	fa		plx		                plx
2834	.9bbc	20 30 9c	jsr $9c30	                jsr L9B90
2835	.9bbf	08		php		                php
2836	.9bc0	48		pha		                pha
2837	.9bc1	bd 05 03	lda $0305,x	                lda $0305,x
2838	.9bc4	0a		asl a		                asl a
2839	.9bc5	7e 0a 03	ror $030a,x	                ror $030A,x
2840	.9bc8	10 03		bpl $9bcd	                bpl L9B2D
2841	.9bca	20 1f 9c	jsr $9c1f	                jsr L9B7F
2842	.9bcd					L9B2D:
2843	.9bcd	68		pla		                pla
2844	.9bce	0a		asl a		                asl a
2845	.9bcf	7e 0a 03	ror $030a,x	                ror $030A,x
2846	.9bd2	10 07		bpl $9bdb	                bpl L9B3B
2847	.9bd4	e8		inx		                inx
2848	.9bd5	e8		inx		                inx
2849	.9bd6	20 1f 9c	jsr $9c1f	                jsr L9B7F
2850	.9bd9	ca		dex		                dex
2851	.9bda	ca		dex		                dex
2852	.9bdb					L9B3B:
2853	.9bdb	20 30 9c	jsr $9c30	                jsr L9B90
2854	.9bde	10 06		bpl $9be6	                bpl L9B46
2855	.9be0	bd 05 03	lda $0305,x	                lda $0305,x
2856	.9be3	bc 04 03	ldy $0304,x	                ldy $0304,x
2857	.9be6					L9B46:
2858	.9be6	28		plp		                plp
2859	.9be7	30 06		bmi $9bef	                bmi L9B4F
2860	.9be9	c0 00		cpy #$00	                cpy #$00
2861	.9beb	d0 01		bne $9bee	                bne L9B4E
2862	.9bed	3a		dec a		                dec a
2863	.9bee					L9B4E:
2864	.9bee	88		dey		                dey
2865	.9bef					L9B4F:
2866	.9bef	4a		lsr a		                lsr a
2867	.9bf0	48		pha		                pha
2868	.9bf1	98		tya		                tya
2869	.9bf2	6a		ror a		                ror a
2870	.9bf3	38		sec		                sec
2871	.9bf4	ca		dex		                dex
2872	.9bf5	20 fa 9b	jsr $9bfa	                jsr L9B5A
2873	.9bf8	e8		inx		                inx
2874	.9bf9	68		pla		                pla
2875	.9bfa					L9B5A:
2876	.9bfa	fd 07 03	sbc $0307,x	                sbc $0307,x
2877	.9bfd	9d 09 03	sta $0309,x	                sta $0309,x
2878	.9c00	60		rts		                rts

2880	.9c01					L9B61:
2881	.9c01	48		pha		                pha
2882	.9c02	b9 00 03	lda $0300,y	                lda $0300,y
2883	.9c05	9d 00 03	sta $0300,x	                sta $0300,x
2884	.9c08	b9 01 03	lda $0301,y	                lda $0301,y
2885	.9c0b	9d 01 03	sta $0301,x	                sta $0301,x
2886	.9c0e	7a		ply		                ply
2887	.9c0f	38		sec		                sec
2888	.9c10	20 15 9c	jsr $9c15	                jsr L9B75
2889	.9c13	e8		inx		                inx
2890	.9c14	c8		iny		                iny
2891	.9c15					L9B75:
2892	.9c15	b9 00 03	lda $0300,y	                lda $0300,y
2893	.9c18	fd 00 03	sbc $0300,x	                sbc $0300,x
2894	.9c1b	9d 04 03	sta $0304,x	                sta $0304,x
2895	.9c1e	60		rts		                rts

2897	.9c1f					L9B7F:
2898	.9c1f	bd 05 03	lda $0305,x	                lda $0305,x
2899	.9c22	bc 04 03	ldy $0304,x	                ldy $0304,x
2900	.9c25	20 2e c9	jsr $c92e	                jsr negateAY
2901	.9c28	9d 05 03	sta $0305,x	                sta $0305,x
2902	.9c2b	98		tya		                tya
2903	.9c2c	9d 04 03	sta $0304,x	                sta $0304,x
2904	.9c2f	60		rts		                rts

2906	.9c30					L9B90:
2907	.9c30	bd 06 03	lda $0306,x	                lda $0306,x
2908	.9c33	a8		tay		                tay
2909	.9c34	dd 04 03	cmp $0304,x	                cmp $0304,x
2910	.9c37	bd 07 03	lda $0307,x	                lda $0307,x
2911	.9c3a	fd 05 03	sbc $0305,x	                sbc $0305,x
2912	.9c3d	08		php		                php
2913	.9c3e	bd 07 03	lda $0307,x	                lda $0307,x
2914	.9c41	28		plp		                plp
2915	.9c42	60		rts		                rts

2917						;-------------------------------------------------------------------------
2918						;
2919						; 112-119 = Plot parallelogram [MasRef E.3-27]
2920						;
2921	.9c43					plotParallelogram:
2922	.9c43	a2 28		ldx #$28	                ldx #$28
2923	.9c45	86 da		stx $da		                stx $DA
2924	.9c47	a2 14		ldx #$14	                ldx #$14
2925	.9c49	a0 20		ldy #$20	                ldy #$20
2926	.9c4b	a9 24		lda #$24	                lda #$24
2927	.9c4d	20 80 d5	jsr $d580	                jsr addRegionDimensionsToVDUVariableCoordinates
2928	.9c50	a0 14		ldy #$14	                ldy #$14
2929	.9c52	a2 24		ldx #$24	                ldx #$24
2930	.9c54	20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
2931	.9c57	8e 30 88	stx $8830	                stx L8830
2932	.9c5a	a2 20		ldx #$20	                ldx #$20
2933	.9c5c	20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
2934	.9c5f	8e 31 88	stx $8831	                stx L8831
2935	.9c62	a2 28		ldx #$28	                ldx #$28
2936	.9c64	20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
2937	.9c67	8c 33 88	sty $8833	                sty L8833
2938	.9c6a	ac 31 88	ldy $8831	                ldy L8831
2939	.9c6d	20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
2940	.9c70	8c 32 88	sty $8832	                sty L8832
2941	.9c73	ac 30 88	ldy $8830	                ldy L8830
2942	.9c76	20 af 9c	jsr $9caf	                jsr L9C0F
2943	.9c79	ad 33 88	lda $8833	                lda L8833
2944	.9c7c	85 e0		sta $e0		                sta $E0
2945	.9c7e	a2 2c		ldx #$2c	                ldx #$2C
2946	.9c80	20 a9 9b	jsr $9ba9	                jsr L9B09
2947	.9c83	a4 e1		ldy $e1		                ldy $E1
2948	.9c85	20 f6 9c	jsr $9cf6	                jsr L9C56
2949	.9c88	ac 32 88	ldy $8832	                ldy L8832
2950	.9c8b	ad 33 88	lda $8833	                lda L8833
2951	.9c8e	85 e1		sta $e1		                sta $E1
2952	.9c90	a2 37		ldx #$37	                ldx #$37
2953	.9c92	20 f1 9c	jsr $9cf1	                jsr L9C51
2954	.9c95	80 15		bra $9cac	                bra L9C0C

2956	.9c97					L9BF7;
2957	.9c97	a0 14		ldy #$14	                ldy #$14
2958	.9c99	a2 24		ldx #$24	                ldx #$24
2959	.9c9b	20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
2960	.9c9e	8c 32 88	sty $8832	                sty L8832
2961	.9ca1	a0 20		ldy #$20	                ldy #$20
2962	.9ca3	20 af 9c	jsr $9caf	                jsr L9C0F
2963	.9ca6	ad 32 88	lda $8832	                lda L8832
2964	.9ca9	20 ed 9c	jsr $9ced	                jsr L9C4D
2965	.9cac					L9C0C:
2966	.9cac	4c e4 da	jmp $dae4	                jmp LDAE4

2968	.9caf					L9C0F:
2969	.9caf	20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
2970	.9cb2	8e 30 88	stx $8830	                stx L8830
2971	.9cb5	ae 32 88	ldx $8832	                ldx L8832
2972	.9cb8	20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
2973	.9cbb	8c 32 88	sty $8832	                sty L8832
2974	.9cbe	8e 31 88	stx $8831	                stx L8831
2975	.9cc1	ac 30 88	ldy $8830	                ldy L8830
2976	.9cc4	a2 fc		ldx #$fc	                ldx #$FC
2977	.9cc6					L9C26:
2978	.9cc6	b9 00 03	lda $0300,y	                lda $0300,y
2979	.9cc9	9d 46 02	sta $0246,x	                sta vduv.workspace._42-$fc,x
2980	.9ccc	9d 4a 02	sta $024a,x	                sta vduv.workspace._46-$fc,x
2981	.9ccf	c8		iny		                iny
2982	.9cd0	e8		inx		                inx
2983	.9cd1	d0 f3		bne $9cc6	                bne L9C26
2984	.9cd3	ac 30 88	ldy $8830	                ldy L8830
2985	.9cd6	ad 32 88	lda $8832	                lda L8832
2986	.9cd9	85 e1		sta $e1		                sta $E1
2987	.9cdb	a2 37		ldx #$37	                ldx #$37
2988	.9cdd	20 a9 9b	jsr $9ba9	                jsr L9B09
2989	.9ce0	ac 30 88	ldy $8830	                ldy L8830
2990	.9ce3	ad 31 88	lda $8831	                lda L8831
2991	.9ce6	20 ed 9c	jsr $9ced	                jsr L9C4D
2992	.9ce9	ac 31 88	ldy $8831	                ldy L8831
2993	.9cec	60		rts		                rts

2995	.9ced					L9C4D:
2996	.9ced	85 e0		sta $e0		                sta $E0
2997	.9cef	a2 2c		ldx #$2c	                ldx #$2C
2998	.9cf1					L9C51:
2999	.9cf1	20 a9 9b	jsr $9ba9	                jsr L9B09
3000	.9cf4	a4 e0		ldy $e0		                ldy $E0
3001	.9cf6					L9C56:
3002	.9cf6	5a		phy		                phy
3003	.9cf7	b9 02 03	lda $0302,y	                lda $0302,y
3004	.9cfa	cd 44 03	cmp $0344	                cmp $0344
3005	.9cfd	d0 08		bne $9d07	                bne L9C67
3006	.9cff	b9 03 03	lda $0303,y	                lda $0303,y
3007	.9d02	cd 45 03	cmp $0345	                cmp $0345
3008	.9d05	f0 39		beq $9d40	                beq L9CA0
3009	.9d07					L9C67:
3010	.9d07	a2 2c		ldx #$2c	                ldx #$2C
3011	.9d09	20 60 9d	jsr $9d60	                jsr L9CC0
3012	.9d0c	a2 37		ldx #$37	                ldx #$37
3013	.9d0e	20 60 9d	jsr $9d60	                jsr L9CC0
3014	.9d11	20 e4 da	jsr $dae4	                jsr LDAE4
3015	.9d14	a2 37		ldx #$37	                ldx #$37
3016	.9d16	20 26 d7	jsr $d726	                jsr LD726
3017	.9d19	a2 2c		ldx #$2c	                ldx #$2C
3018	.9d1b	20 26 d7	jsr $d726	                jsr LD726
3019	.9d1e	a0 37		ldy #$37	                ldy #$37
3020	.9d20	20 cc d5	jsr $d5cc	                jsr sortVDUVariableWords
3021	.9d23	da		phx		                phx
3022	.9d24	a2 fc		ldx #$fc	                ldx #$FC
3023	.9d26					L9C86:
3024	.9d26	b9 00 03	lda $0300,y	                lda $0300,y
3025	.9d29	9d 4a 02	sta $024a,x	                sta vduv.workspace._46-$fc,x
3026	.9d2c	c8		iny		                iny
3027	.9d2d	e8		inx		                inx
3028	.9d2e	d0 f6		bne $9d26	                bne L9C86
3029	.9d30	fa		plx		                plx
3030	.9d31	a0 fc		ldy #$fc	                ldy #$FC
3031	.9d33					L9C93:
3032	.9d33	bd 00 03	lda $0300,x	                lda $0300,x
3033	.9d36	99 46 02	sta $0246,y	                sta vduv.workspace._42-$fc,y
3034	.9d39	e8		inx		                inx
3035	.9d3a	c8		iny		                iny
3036	.9d3b	d0 f6		bne $9d33	                bne L9C93
3037	.9d3d	7a		ply		                ply
3038	.9d3e	80 b6		bra $9cf6	                bra L9C56

3040	.9d40					L9CA0:
3041	.9d40	a9 2c		lda #$2c	                lda #$2C
3042	.9d42	a6 e0		ldx $e0		                ldx $E0
3043	.9d44	20 4c 9d	jsr $9d4c	                jsr L9CAC
3044	.9d47	7a		ply		                ply
3045	.9d48	a9 37		lda #$37	                lda #$37
3046	.9d4a	a6 e1		ldx $e1		                ldx $E1
3047	.9d4c					L9CAC:
3048	.9d4c	85 de		sta $de		                sta $DE
3049	.9d4e	bd 02 03	lda $0302,x	                lda vduv.graphicsWindowPixelsBottom+0,x
3050	.9d51	d9 02 03	cmp $0302,y	                cmp vduv.graphicsWindowPixelsBottom+0,y
3051	.9d54	d0 08		bne $9d5e	                bne L9CBE
3052	.9d56	bd 03 03	lda $0303,x	                lda vduv.graphicsWindowPixelsBottom+1,x
3053	.9d59	d9 03 03	cmp $0303,y	                cmp vduv.graphicsWindowPixelsBottom+1,y
3054	.9d5c	f0 05		beq $9d63	                beq L9CC3
3055	.9d5e					L9CBE:
3056	.9d5e	a6 de		ldx $de		                ldx $DE
3057	.9d60					L9CC0:
3058	.9d60	20 1d d7	jsr $d71d	                jsr LD71D
3059	.9d63					L9CC3:
3060	.9d63	bd 00 03	lda $0300,x	                lda $0300,x
3061	.9d66	cd 42 03	cmp $0342	                cmp $0342
3062	.9d69	bd 01 03	lda $0301,x	                lda $0301,x
3063	.9d6c	ed 43 03	sbc $0343	                sbc $0343
3064	.9d6f	10 0d		bpl $9d7e	                bpl L9CDE
3065	.9d71	bd 00 03	lda $0300,x	                lda $0300,x
3066	.9d74	8d 42 03	sta $0342	                sta $0342
3067	.9d77	bd 01 03	lda $0301,x	                lda $0301,x
3068	.9d7a	8d 43 03	sta $0343	                sta $0343
3069	.9d7d	60		rts		                rts

3071	.9d7e					L9CDE:
3072	.9d7e	ad 46 03	lda $0346	                lda $0346
3073	.9d81	dd 00 03	cmp $0300,x	                cmp $0300,x
3074	.9d84	ad 47 03	lda $0347	                lda $0347
3075	.9d87	fd 01 03	sbc $0301,x	                sbc $0301,x
3076	.9d8a	10 0c		bpl $9d98	                bpl L9CF8
3077	.9d8c	bd 00 03	lda $0300,x	                lda $0300,x
3078	.9d8f	8d 46 03	sta $0346	                sta $0346
3079	.9d92	bd 01 03	lda $0301,x	                lda $0301,x
3080	.9d95	8d 47 03	sta $0347	                sta $0347
3081	.9d98					L9CF8:
3082	.9d98	60		rts		                rts

3084	.9d99					L9CF9:
3085	.9d99	20 a1 dd	jsr $dda1	                jsr LDDA1
3086	.9d9c	9c 36 03	stz $0336	                stz $0336
3087	.9d9f	9c 37 03	stz $0337	                stz $0337
3088	.9da2	20 b0 dc	jsr $dcb0	                jsr LDCB0
3089	.9da5	d0 4f		bne $9df6	                bne L9D56
3090	.9da7	20 1c dc	jsr $dc1c	                jsr LDC1C
3091	.9daa					L9D0A:
3092	.9daa	24 ff		bit $ff		                bit $FF
3093	.9dac	30 48		bmi $9df6	                bmi L9D56
3094	.9dae	ad 36 03	lda $0336	                lda $0336
3095	.9db1	cd 37 03	cmp $0337	                cmp $0337
3096	.9db4	f0 40		beq $9df6	                beq L9D56
3097	.9db6	1a		inc a		                inc a
3098	.9db7	8d 36 03	sta $0336	                sta $0336
3099	.9dba	aa		tax		                tax
3100	.9dbb	bd 00 84	lda $8400,x	                lda L8400,x
3101	.9dbe	8d 28 03	sta $0328	                sta $0328
3102	.9dc1	bd 00 85	lda $8500,x	                lda L8500,x
3103	.9dc4	8d 2c 03	sta $032c	                sta $032C
3104	.9dc7	bd 00 86	lda $8600,x	                lda L8600,x
3105	.9dca	48		pha		                pha
3106	.9dcb	4a		lsr a		                lsr a
3107	.9dcc	4a		lsr a		                lsr a
3108	.9dcd	8d 29 03	sta $0329	                sta $0329
3109	.9dd0	68		pla		                pla
3110	.9dd1	29 03		and #$03	                and #$03
3111	.9dd3	8d 2d 03	sta $032d	                sta $032D
3112	.9dd6	bd 00 87	lda $8700,x	                lda L8700,x
3113	.9dd9	9c 2b 03	stz $032b	                stz $032B
3114	.9ddc	cd 06 03	cmp $0306	                cmp $0306
3115	.9ddf	f0 0a		beq $9deb	                beq L9D4B
3116	.9de1	85 e0		sta $e0		                sta $E0
3117	.9de3	1a		inc a		                inc a
3118	.9de4	20 48 dc	jsr $dc48	                jsr LDC48
3119	.9de7	b0 0d		bcs $9df6	                bcs L9D56
3120	.9de9	a5 e0		lda $e0		                lda $E0
3121	.9deb					L9D4B:
3122	.9deb	cd 02 03	cmp $0302	                cmp $0302
3123	.9dee	f0 ba		beq $9daa	                beq L9D0A
3124	.9df0	3a		dec a		                dec a
3125	.9df1	20 48 dc	jsr $dc48	                jsr LDC48
3126	.9df4	90 b4		bcc $9daa	                bcc L9D0A
3127	.9df6					L9D56:
3128	.9df6	60		rts		                rts

3130	.9df7					L9D57:
3131	.9df7	ad 32 03	lda $0332	                lda $0332
3132	.9dfa	a8		tay		                tay
3133	.9dfb	cd 2c 03	cmp $032c	                cmp $032C
3134	.9dfe	ad 33 03	lda $0333	                lda $0333
3135	.9e01	aa		tax		                tax
3136	.9e02	ed 2d 03	sbc $032d	                sbc $032D
3137	.9e05	b0 0a		bcs $9e11	                bcs L9D71
3138	.9e07	c8		iny		                iny
3139	.9e08	d0 01		bne $9e0b	                bne L9D6B
3140	.9e0a	e8		inx		                inx
3141	.9e0b					L9D6B:
3142	.9e0b	8c 2e 03	sty $032e	                sty $032E
3143	.9e0e	8e 2f 03	stx $032f	                stx $032F
3144	.9e11					L9D71:
3145	.9e11	60		rts		                rts

3147						;-------------------------------------------------------------------------

3150	.9e12					readDefaults2:
3151	.9e12	a2 0f		ldx #$0f	                ldx #CMOSBytes.defaults2
3152	.9e14	80 24		bra $9e3a	                bra readRTCByte

3155						;-------------------------------------------------------------------------

3158	.9e16					readDefaults3:
3159	.9e16	a2 10		ldx #$10	                ldx #CMOSBytes.defaults3
3160	.9e18	80 20		bra $9e3a	                bra readRTCByte

3163						;-------------------------------------------------------------------------
3164						;
3165						; Read byte from EEPROM by 0-based CMOS RAM offset (readCMOSByte) or
3166						; RTC register index (readRTCByte).
3167						;
3168						; (The number of RTC registers on the Compact is 0, so readRTCByte and
3169						; readCMOSByte use the same indexes. Nevertheless, the two routines
3170						; behave differently... presumably I still haven't quite got this bit
3171						; right.)
3172						;
3173						; entry:
3174						;
3175						; X = address to read from
3176						;
3177						; exit:
3178						;
3179						; Y = byte read

3182	.9e1a					readCMOSByte:
3183	.9e1a	e0 ff		cpx #$ff	                cpx #$ff
3184	.9e1c	d0 1c		bne $9e3a	                bne readRTCByte              ; taken if address not $ff

3186						                ; Read address $ff to query the size.
3187	.9e1e	20 bb 90	jsr $90bb	                jsr i2cTestReadEEPROMByte    ; do an experimental read
3188	.9e21	a0 00		ldy #$00	                ldy #0                       ; failure result is 0
3189	.9e23	b0 2b		bcs $9e50	                bcs rts9DE0 ; taken if read failed - no EEPROM present
3190	.9e25	a2 7f		ldx #$7f	                ldx #$7f
3191	.9e27	20 3b 9f	jsr $9f3b	                jsr i2cReadEEPROMByte        ; read the byte at $7f
3192	.9e2a	5a		phy		                phy                          ; save the byte read
3193	.9e2b	a2 ff		ldx #$ff	                ldx #$ff
3194	.9e2d	20 3b 9f	jsr $9f3b	                jsr i2cReadEEPROMByte        ; read the byte at $ff
3195	.9e30	98		tya		                tya                          ; A = byte from $ff
3196	.9e31	ba		tsx		                tsx

3198	.9e32	5d 01 01	eor $0101,x	                eor $101,x
3199						                ; The EEPROM contents reset code EORs the byte at +$7f
3200						                ; with $80, and stores that at +$ff. So either the
3201						                ; result is 0 (+$7f and +$ff are the same byte: it's a
3202						                ; 128-byte EEPROM) or it's a value with bit 8 clear
3203						                ; (+$7f and +$ff are not the same byte: it's a
3204						                ; 256-byte EEPROM).
3205	.9e35	09 7f		ora #$7f	                ora #$7f ; 127 if 128-byte EEPROM; 255 if 256-byte EEPROM
3206	.9e37	a8		tay		                tay
3207	.9e38	80 15		bra $9e4f	                bra plx_rts9DDF

3211	.9e3a					readRTCByte: .block
3212	.9e3a	da		phx		                phx
3213	.9e3b	20 bb 90	jsr $90bb	                jsr i2cTestReadEEPROMByte
3214	.9e3e	90 0b		bcc $9e4b	                bcc addressIsValid           ; taken if read succeeded
3215	.9e40					readDefaultByte:
3216	.9e40	a0 00		ldy #$00	                ldy #0                 ; default failure result is 0
3217	.9e42	e0 14		cpx #$14	                cpx #size(CMOSBytes)   ; trying to read a known value?
3218	.9e44	b0 08		bcs $9e4e	                bcs gotResult   ; taken if failed to read an unknown value
3219	.9e46	bc 54 9e	ldy $9e54,x	                ldy defaultEEPROMContents,x ; use a default value for failed read
3220	.9e49	80 03		bra $9e4e	                bra gotResult

3222	.9e4b					addressIsValid:
3223	.9e4b	20 3b 9f	jsr $9f3b	                jsr i2cReadEEPROMByte
3224	.9e4e					gotResult:
3225	.9e4e	98		tya		                tya
3227						                .endblock
3228	.9e4f					plx_rts9DDF:
3229	.9e4f	fa		plx		                plx
3230	.9e50					rts9DE0:
3231	.9e50	60		rts		                rts

3233	.9e51					readDefaultCMOSByte:
3234	.9e51	da		phx		                phx
3235	.9e52	80 ec		bra $9e40	                bra readRTCByte.readDefaultByte

3237	.9e54					defaultEEPROMContents:
3238						                ; Default EEPROM contents - for use if the EEPROM runs
3239						                ; out of write cycles?
3240	>9e54	00				                .byte 0                      ; econetStationNumber
3241	>9e55	fe				                .byte 254                    ; fileServerStationNumber
3242	>9e56	00				                .byte 0                      ; fileServerNetworkNumber
3243	>9e57	eb				                .byte $EB                    ; printerServerStationNumber
3244	>9e58	00				                .byte 0                      ; printerServerNetworkNumber
3245	>9e59	ed				                .byte 14<<CMOSBytes.defaultROMs.languageShift|13<<CMOSBytes.defaultROMs.fsShift
3246	>9e5a	ff				                .byte $FF                    ; insertedROMS 8-15
3247	>9e5b	ff				                .byte $FF                    ; insertedROMS 0-7
3248	>9e5c	00				                .byte 0                      ; editROMBytes
3249	>9e5d	00				                .byte 0                      ; telecommsByte
3251	>9e5e	f9				                .byte (defaultMODE&7)<<CMOSBytes.defaults0.modeShift|((defaultMODE&$80)!=0?CMOSBytes.defaults0.shadowMask:0)|CMOSBytes.defaults0.interlaceMask|7<<CMOSBytes.defaults0.tvShift ; defaults0
3252	>9e5f	e3				                .byte 3<<CMOSBytes.defaults1.fdriveShift|CMOSBytes.defaults1.capsLockMask|CMOSBytes.defaults1.adfsLoadDirMask|CMOSBytes.defaults1.floppyDrive ; defaults1
3253	>9e60	20				                .byte 32                     ; keyboardAutoRepeatDelay
3254	>9e61	08				                .byte 8                      ; keyboardAutoRepeatRate
3255	>9e62	0a				                .byte $A                     ; printerIgnoreChar
3256	>9e63	2c				                .byte 1<<CMOSBytes.defaults2.fx5SettingShift|3<<CMOSBytes.defaults2.serialBaudRateIndexShift ; defaults2
3257	>9e64	80				                .byte 4<<CMOSBytes.defaults3.serialDataFormatShift ; defaults3
3258	>9e65	00				                .byte 0                      ; unknown11
3259	>9e66	03				                .byte 3                      ; joystick
3261	>9e67	04				                .byte 4                      ; country

3266						;-------------------------------------------------------------------------

3269	.9e68					rts9DF7:
3270	.9e68	60		rts		                rts
3271	.9e69					writeCMOSByte:
3272	.9e69	8a		txa		                txa
3273						                ; The app note says a 256-byte EEPROM could be fitted,
3274						                ; and there's the size test code to check for it, but
3275						                ; looks the last 128 bytes would never get used.
3276	.9e6a	29 7f		and #$7f	                and #$7f
3277						                ; Location 0 is protected - see Master Reference
3278						                ; Manual D.2-49.
3279	.9e6c	f0 fa		beq $9e68	                beq rts9DF7              ; taken if address $00 (or $80)
3280	.9e6e	09 80		ora #$80	                ora #$80
3281						                ; Location 127 is protected - see Compact Application
3282						                ; Note.
3283	.9e70	1a		inc a		                inc a
3284	.9e71	f0 f5		beq $9e68	                beq rts9DF7              ; taken if address $7f (or $ff)
3285	.9e73					writeRTCByte:
3286	.9e73	da		phx		                phx
3287	.9e74	5a		phy		                phy
3288	.9e75	20 0a 9f	jsr $9f0a	                jsr L9E99
3289	.9e78	7a		ply		                ply
3290	.9e79	fa		plx		                plx
3291	.9e7a	60		rts		                rts

3294						;-------------------------------------------------------------------------
3295						;
3296						; Transmit 1 bit over the I2C bus.
3297						;
3298						; preserves: P
3299						;
3301	.9e7b					i2cTransmitBit:
3302	.9e7b	08		php		                php
3303	.9e7c	78		sei		                sei
3304	.9e7d	20 98 9e	jsr $9e98	                jsr i2cSetClockLow
3305	.9e80	20 f1 9e	jsr $9ef1	                jsr i2cSetData
3306	.9e83	20 8b 9e	jsr $9e8b	                jsr i2cSetClockHigh
3307	.9e86	20 98 9e	jsr $9e98	                jsr i2cSetClockLow
3308	.9e89	28		plp		                plp
3309	.9e8a	60		rts		                rts

3312						;-------------------------------------------------------------------------
3313						;
3314						; Set the I2C clock line high.
3315						;
3316						; preserves: A/C
3317						;
3319	.9e8b					i2cSetClockHigh:
3320	.9e8b	48		pha		                pha
3321	.9e8c	ad 40 fe	lda $fe40	                lda systemVIA.irb
3322	.9e8f	29 df		and #$df	                and #~i2cClock               ; seems needless?
3323	.9e91	09 20		ora #$20	                ora #i2cClock
3324	.9e93	8d 40 fe	sta $fe40	                sta systemVIA.orb
3325	.9e96	68		pla		                pla
3326	.9e97	60		rts		                rts

3329						;-------------------------------------------------------------------------
3330						;
3331						; Set the I2C clock line low.
3332						;
3333						; preserves: A/C
3334						;
3336	.9e98					i2cSetClockLow:
3337	.9e98	48		pha		                pha
3338	.9e99	ad 40 fe	lda $fe40	                lda systemVIA.irb
3339	.9e9c	29 df		and #$df	                and #~i2cClock
3340	.9e9e	8d 40 fe	sta $fe40	                sta systemVIA.orb
3341	.9ea1	68		pla		                pla
3342	.9ea2	60		rts		                rts

3345						;-------------------------------------------------------------------------
3346						;
3347						; "A change in the state of the data line, from HIGH to LOW, while the
3348						; clock is HIGH, defines the START condition."
3349						;
3350						; preserves: P
3352	.9ea3					i2cStartDataTransfer:
3353	.9ea3	08		php		                php
3354	.9ea4	78		sei		                sei
3355	.9ea5	ad 42 fe	lda $fe42	                lda systemVIA.ddrb
3356	.9ea8	09 30		ora #$30	                ora #i2cClock|i2cData        ; I2C lines are outputs
3357	.9eaa	8d 42 fe	sta $fe42	                sta systemVIA.ddrb
3358	.9ead	20 98 9e	jsr $9e98	                jsr i2cSetClockLow
3359	.9eb0	20 f3 9e	jsr $9ef3	                jsr i2cSetDataHigh
3360	.9eb3	20 8b 9e	jsr $9e8b	                jsr i2cSetClockHigh
3361	.9eb6	20 be 9e	jsr $9ebe	                jsr i2cSetDataLow
3362	.9eb9	20 98 9e	jsr $9e98	                jsr i2cSetClockLow
3363	.9ebc	28		plp		                plp
3364	.9ebd	60		rts		                rts

3367						;-------------------------------------------------------------------------
3368						;
3369						; Set the I2C data line low.
3370						;
3371						; preserves: A/C
3372						;
3374	.9ebe					i2cSetDataLow:
3375	.9ebe	48		pha		                pha
3376	.9ebf	ad 40 fe	lda $fe40	                lda systemVIA.irb
3377	.9ec2	29 ef		and #$ef	                and #~i2cData
3378	.9ec4	8d 40 fe	sta $fe40	                sta systemVIA.orb
3379	.9ec7	68		pla		                pla
3380	.9ec8	60		rts		                rts

3383						;-------------------------------------------------------------------------

3386	.9ec9					L9E58:
3387	.9ec9	20 a3 9e	jsr $9ea3	                jsr i2cStartDataTransfer
3388	.9ecc	a9 00		lda #$00	                lda #0                       ; What is this value?
3389	.9ece	20 94 9f	jsr $9f94	                jsr i2cTransmitByteAndReceiveBit
3390	.9ed1	a9 06		lda #$06	                lda #6                       ; What is this value?
3391	.9ed3	20 94 9f	jsr $9f94	                jsr i2cTransmitByteAndReceiveBit

3394						;-------------------------------------------------------------------------
3395						;
3396						; "A change in the state of the data line, from LOW to HIGH, while the
3397						; clock is HIGH, defines the STOP condition."
3398						;
3399						; preserves: C
3400						;
3401	.9ed6					i2cStopDataTransfer:
3402	.9ed6	08		php		                php
3403	.9ed7	78		sei		                sei
3404	.9ed8	20 98 9e	jsr $9e98	                jsr i2cSetClockLow
3405	.9edb	20 be 9e	jsr $9ebe	                jsr i2cSetDataLow
3406	.9ede	20 8b 9e	jsr $9e8b	                jsr i2cSetClockHigh
3407	.9ee1	20 f3 9e	jsr $9ef3	                jsr i2cSetDataHigh
3408	.9ee4	20 98 9e	jsr $9e98	                jsr i2cSetClockLow
3409	.9ee7	ad 42 fe	lda $fe42	                lda systemVIA.ddrb
3410	.9eea	29 cf		and #$cf	                and #~(i2cData|i2cClock)     ; I2C lines are inputs
3411	.9eec	8d 42 fe	sta $fe42	                sta systemVIA.ddrb
3412	.9eef	28		plp		                plp
3413	.9ef0	60		rts		                rts

3416						;-------------------------------------------------------------------------
3417						;
3418						; Set the I2C data line to a particular value.
3419						;
3420						; entry:
3421						;
3422						; C = state of signal: 1 = high, 0 = low
3423						;
3424						; preserves: C

3427	.9ef1					i2cSetData:
3428	.9ef1	90 cb		bcc $9ebe	                bcc i2cSetDataLow

3432						;-------------------------------------------------------------------------
3433						;
3434						; Set the I2C data line high.
3435						;
3436						; preserves: A/C
3437						;
3439	.9ef3					i2cSetDataHigh:
3440	.9ef3	48		pha		                pha
3441	.9ef4	ad 40 fe	lda $fe40	                lda systemVIA.irb
3442	.9ef7	09 10		ora #$10	                ora #i2cData
3443	.9ef9	8d 40 fe	sta $fe40	                sta systemVIA.orb
3444	.9efc	68		pla		                pla
3445	.9efd	60		rts		                rts

3448						;-------------------------------------------------------------------------
3449						;
3450						; Transmits 1 byte/8 bits over the I2C bus.
3451						;
3452						; entry: A = byte to transmit

3455	.9efe					i2cTransmitByte: .block
3456	.9efe	08		php		                php
3457	.9eff	78		sei		                sei
3458	.9f00	38		sec		                sec
3459	.9f01	2a		rol a		                rol a
3460	.9f02					loop:
3461	.9f02	20 7b 9e	jsr $9e7b	                jsr i2cTransmitBit
3462	.9f05	0a		asl a		                asl a
3463	.9f06	d0 fa		bne $9f02	                bne loop
3464	.9f08	28		plp		                plp
3465	.9f09	60		rts		                rts
3466						                .endblock

3469						;-------------------------------------------------------------------------

3472	.9f0a					L9E99: .block
3473	.9f0a	da		phx		                phx                          ; X
3474	.9f0b	5a		phy		                phy                          ; Y X
3475	.9f0c	20 3b 9f	jsr $9f3b	                jsr i2cReadEEPROMByte
3476	.9f0f	b0 07		bcs $9f18	                bcs writeIfCarry ; taken if read failed. Attempt write anyawy

3478						                ; Compare new value to old value, and write only if
3479						                ; different. Don't use up the EEPROM write cycles
3480						                ; unnecessarily.
3481	.9f11	98		tya		                tya
3482	.9f12	ba		tsx		                tsx                          ; | Y X
3483	.9f13	5d 01 01	eor $0101,x	                eor $101,x                   ; Y^(old Y)
3484	.9f16	c9 01		cmp #$01	                cmp #1  ; C set if new value is different, so attempt write
3485	.9f18					writeIfCarry:
3486	.9f18	7a		ply		                ply
3487	.9f19	fa		plx		                plx
3488	.9f1a	b0 01		bcs $9f1d	                bcs write
3489	.9f1c	60		rts		                rts

3491	.9f1d					write:
3492	.9f1d	20 a3 9e	jsr $9ea3	                jsr i2cStartDataTransfer
3493	.9f20	a9 a0		lda #$a0	                lda #eepromWrite
3494	.9f22	20 94 9f	jsr $9f94	                jsr i2cTransmitByteAndReceiveBit ; initiate write mode
3495	.9f25	8a		txa		                txa
3496	.9f26	20 94 9f	jsr $9f94	                jsr i2cTransmitByteAndReceiveBit ; send address
3497	.9f29	98		tya		                tya
3498	.9f2a	20 94 9f	jsr $9f94	                jsr i2cTransmitByteAndReceiveBit ; send value
3499	.9f2d	20 d6 9e	jsr $9ed6	                jsr i2cStopDataTransfer

3501						                ; After writing 1 or 2 bytes and entering the STOP
3502						                ; state, the write process begins, Delay ~100 ms to
3503						                ; wait for it. (The data sheet implies 20 ms/byte is
3504						                ; sufficient, but surely no harm in waiting longer.)
3505	.9f30	a0 a0		ldy #$a0	                ldy #$a0
3506	.9f32	a2 00		ldx #$00	                ldx #0
3507	.9f34					delayLoop:
3508	.9f34	ca		dex		                dex
3509	.9f35	d0 fd		bne $9f34	                bne delayLoop
3510	.9f37	88		dey		                dey
3511	.9f38	d0 fa		bne $9f34	                bne delayLoop
3512	.9f3a	60		rts		                rts
3513						                .endblock

3515						;-------------------------------------------------------------------------
3516						;
3517						; Read 1 byte from EEPROM
3518						;
3519						; entry:
3520						;
3521						; X = address to read from
3522						;
3523						; exit:
3524						;
3525						; C=0 = success
3526						;       Y = byte read
3527						; C=1 = failure
3528						;
3529	.9f3b					i2cReadEEPROMByte:
3530	.9f3b	20 a3 9e	jsr $9ea3	                jsr i2cStartDataTransfer

3532						                ; Send %1010, I2C address, and not-write flag
3533	.9f3e	a9 a0		lda #$a0	                lda #eepromWrite
3534	.9f40	20 94 9f	jsr $9f94	                jsr i2cTransmitByteAndReceiveBit

3536						                ; Send word address
3537	.9f43	8a		txa		                txa
3538	.9f44	20 94 9f	jsr $9f94	                jsr i2cTransmitByteAndReceiveBit
3539	.9f47	b0 36		bcs $9f7f	                bcs L9F0E_500              ; taken if not acknowledged

3541						                ; And again, this time in read mode
3542	.9f49	20 a3 9e	jsr $9ea3	                jsr i2cStartDataTransfer
3543	.9f4c	a9 a1		lda #$a1	                lda #eepromRead
3544	.9f4e	20 94 9f	jsr $9f94	                jsr i2cTransmitByteAndReceiveBit
3545	.9f51	b0 2c		bcs $9f7f	                bcs L9F0E_500                ; taken if not acknowledged

3547	.9f53	20 98 9e	jsr $9e98	                jsr i2cSetClockLow
3548	.9f56	ad 42 fe	lda $fe42	                lda systemVIA.ddrb
3549	.9f59	48		pha		                pha                          ; save old DDRB
3550	.9f5a	29 ef		and #$ef	                and #~i2cData
3551	.9f5c	8d 42 fe	sta $fe42	                sta systemVIA.ddrb           ; set I2C data line as input
3552	.9f5f	a9 01		lda #$01	                lda #1                 ; add terminating bit to result
3553	.9f61					L9EF0:
3554	.9f61	48		pha		                pha                          ; save current result
3555	.9f62	20 8b 9e	jsr $9e8b	                jsr i2cSetClockHigh
3556	.9f65	ea		nop		                nop                          ; wait +1 microsecond
3557	.9f66	ea		nop		                nop                          ; wait +1 microsecond
3558	.9f67	ad 40 fe	lda $fe40	                lda systemVIA.irb
3559	.9f6a	29 10		and #$10	                and #i2cData
3560	.9f6c	c9 01		cmp #$01	                cmp #1                       ; C=1 if data received
3561	.9f6e	20 98 9e	jsr $9e98	                jsr i2cSetClockLow
3562	.9f71	68		pla		                pla                          ; restore current result
3563	.9f72	2a		rol a		                rol a                        ; shift new bit in
3564	.9f73	90 ec		bcc $9f61	                bcc L9EF0                    ; keep going until 8 bits
3565						                                             ; shifted in
3566	.9f75	a8		tay		                tay
3567	.9f76	68		pla		                pla                          ; restore old DDRB
3568	.9f77	8d 42 fe	sta $fe42	                sta systemVIA.ddrb
3569	.9f7a	38		sec		                sec
3570	.9f7b	20 7b 9e	jsr $9e7b	                jsr i2cTransmitBit           ; transmit acknowledge bit
3571	.9f7e	18		clc		                clc                          ; success - clear carry
3572	.9f7f					L9F0E_500:
3573	.9f7f	4c d6 9e	jmp $9ed6	                jmp i2cStopDataTransfer

3576						;-------------------------------------------------------------------------

3579	.9f82					L9F11:
3580	.9f82	20 a3 9e	jsr $9ea3	                jsr i2cStartDataTransfer
3581	.9f85	a9 a0		lda #$a0	                lda #eepromWrite
3582	.9f87	20 94 9f	jsr $9f94	                jsr i2cTransmitByteAndReceiveBit
3583	.9f8a	8a		txa		                txa
3584	.9f8b	20 94 9f	jsr $9f94	                jsr i2cTransmitByteAndReceiveBit
3585	.9f8e	08		php		                php
3586	.9f8f	20 d6 9e	jsr $9ed6	                jsr i2cStopDataTransfer
3587	.9f92	28		plp		                plp
3588	.9f93	60		rts		                rts

3591						;-------------------------------------------------------------------------

3594	.9f94					i2cTransmitByteAndReceiveBit: .block
3595	.9f94	08		php		                php
3596	.9f95	78		sei		                sei
3597	.9f96	20 fe 9e	jsr $9efe	                jsr i2cTransmitByte
3598	.9f99	20 98 9e	jsr $9e98	                jsr i2cSetClockLow
3599	.9f9c	ad 42 fe	lda $fe42	                lda systemVIA.ddrb
3600	.9f9f	48		pha		                pha
3601	.9fa0	29 ef		and #$ef	                and #~i2cData
3602	.9fa2	8d 42 fe	sta $fe42	                sta systemVIA.ddrb           ; set data line as input
3603	.9fa5	20 8b 9e	jsr $9e8b	                jsr i2cSetClockHigh
3604	.9fa8	ea		nop		                nop
3605	.9fa9	ea		nop		                nop
3606	.9faa	ad 40 fe	lda $fe40	                lda systemVIA.irb
3607	.9fad	29 10		and #$10	                and #i2cData
3608	.9faf	c9 01		cmp #$01	                cmp #1                       ; C=bit read
3609	.9fb1	20 98 9e	jsr $9e98	                jsr i2cSetClockLow
3610	.9fb4	68		pla		                pla
3611	.9fb5	8d 42 fe	sta $fe42	                sta systemVIA.ddrb
3612	.9fb8	b0 03		bcs $9fbd	                bcs returnWithCarrySet
3613	.9fba	28		plp		                plp
3614	.9fbb	18		clc		                clc
3615	.9fbc	60		rts		                rts

3617	.9fbd					returnWithCarrySet:
3618	.9fbd	28		plp		                plp
3619	.9fbe	38		sec		                sec
3620	.9fbf	60		rts		                rts
3621						                .endblock

3624						;-------------------------------------------------------------------------

3627						                .include "sound_stuff.s65"

:12	;******  Processing file: src/sound_stuff.s65

1						; Table to convert channel number to the bits required by the chip
2	.9fc0					soundParameterTable:
3	>9fc0	e0 c0 a0 80			                .byte $e0,$c0,$a0,$80

5						;-------------------------------------------------------------------------

7	.9fc4					LF413:
8	.9fc4	4c d1 a0	jmp $a0d1	                jmp LF520

10						;-------------------------------------------------------------------------

13	.9fc7					LF416Internal:                 ; need a better naming convention here.
17	.9fc7	a2 00		ldx #$00	                ldx #$00
18	.9fc9	ad 38 08	lda $0838	                lda $0838
19	.9fcc	d0 04		bne $9fd2	                bne LF421
20	.9fce	e8		inx		                inx
21	.9fcf	ce 38 08	dec $0838	                dec $0838
22	.9fd2					LF421:
23	.9fd2	8e 3b 08	stx $083b	                stx $083B
24	.9fd5	a2 08		ldx #$08	                ldx #$08
25	.9fd7					LF426:
26	.9fd7	ca		dex		                dex
27	.9fd8	bd 00 08	lda $0800,x	                lda $0800,x
28	.9fdb	f0 e7		beq $9fc4	                beq LF413
29	.9fdd	bd ce 02	lda $02ce,x	                lda bufferEmptyFlags,x
30	.9fe0	30 05		bmi $9fe7	                bmi LF436
31	.9fe2	bd 18 08	lda $0818,x	                lda $0818,x
32	.9fe5	d0 08		bne $9fef	                bne LF43E
33	.9fe7					LF436:
34	.9fe7	20 d9 a0	jsr $a0d9	                jsr LF528
35	.9fea	bd 18 08	lda $0818,x	                lda $0818,x
36	.9fed	f0 12		beq $a001	                beq LF450
37	.9fef					LF43E:
38	.9fef	1a		inc a		                inc a
39	.9ff0	f0 12		beq $a004	                beq LF453
40	.9ff2	de 1c 08	dec $081c,x	                dec $081C,x
41	.9ff5	d0 0d		bne $a004	                bne LF453
42	.9ff7	a9 05		lda #$05	                lda #$05
43	.9ff9	9d 1c 08	sta $081c,x	                sta $081C,x
44	.9ffc	de 18 08	dec $0818,x	                dec $0818,x
45	.9fff	d0 03		bne $a004	                bne LF453
46	.a001					LF450:
47	.a001	20 d9 a0	jsr $a0d9	                jsr LF528
48	.a004					LF453:
49	.a004	bd 24 08	lda $0824,x	                lda $0824,x
50	.a007	f0 05		beq $a00e	                beq LF45D
51	.a009	de 24 08	dec $0824,x	                dec $0824,x
52	.a00c	d0 b6		bne $9fc4	                bne LF413
53	.a00e					LF45D:
54	.a00e	bc 20 08	ldy $0820,x	                ldy $0820,x
55	.a011	c0 ff		cpy #$ff	                cpy #$FF
56	.a013	f0 af		beq $9fc4	                beq LF413
57	.a015	b9 c0 08	lda $08c0,y	                lda $08C0,y
58	.a018	29 7f		and #$7f	                and #$7F
59	.a01a	9d 24 08	sta $0824,x	                sta $0824,x
60	.a01d	bd 08 08	lda $0808,x	                lda $0808,x
61	.a020	c9 04		cmp #$04	                cmp #$04
62	.a022	f0 5d		beq $a081	                beq LF4D0
63	.a024	18		clc		                clc
64	.a025	7d 20 08	adc $0820,x	                adc $0820,x
65	.a028	a8		tay		                tay
66	.a029	b9 cb 08	lda $08cb,y	                lda $08CB,y
67	.a02c	38		sec		                sec
68	.a02d	e9 3f		sbc #$3f	                sbc #$3F
69	.a02f	8d 3a 08	sta $083a	                sta $083A
70	.a032	b9 c7 08	lda $08c7,y	                lda $08C7,y
71	.a035	8d 39 08	sta $0839	                sta $0839
72	.a038	bd 04 08	lda $0804,x	                lda $0804,x
73	.a03b					LF48A:
74	.a03b	48		pha		                pha
75	.a03c	18		clc		                clc
76	.a03d	6d 39 08	adc $0839	                adc $0839
77	.a040	50 07		bvc $a049	                bvc LF498
78	.a042	2a		rol a		                rol a
79	.a043	a9 3f		lda #$3f	                lda #$3F
80	.a045	b0 02		bcs $a049	                bcs LF498
81	.a047	49 ff		eor #$ff	                eor #$FF
82	.a049					LF498:
83	.a049	9d 04 08	sta $0804,x	                sta $0804,x
84	.a04c	2a		rol a		                rol a
85	.a04d	5d 04 08	eor $0804,x	                eor $0804,x
86	.a050	10 09		bpl $a05b	                bpl LF4AA
87	.a052	a9 3f		lda #$3f	                lda #$3F
88	.a054	90 02		bcc $a058	                bcc LF4A7
89	.a056	49 ff		eor #$ff	                eor #$FF
90	.a058					LF4A7:
91	.a058	9d 04 08	sta $0804,x	                sta $0804,x
92	.a05b					LF4AA:
93	.a05b	ce 39 08	dec $0839	                dec $0839
94	.a05e	bd 04 08	lda $0804,x	                lda $0804,x
95	.a061	38		sec		                sec
96	.a062	ed 3a 08	sbc $083a	                sbc $083A
97	.a065	4d 39 08	eor $0839	                eor $0839
98	.a068	30 09		bmi $a073	                bmi LF4C2
99	.a06a	ad 3a 08	lda $083a	                lda $083A
100	.a06d	9d 04 08	sta $0804,x	                sta $0804,x
101	.a070	fe 08 08	inc $0808,x	                inc $0808,x
102	.a073					LF4C2:
103	.a073	68		pla		                pla
104	.a074	5d 04 08	eor $0804,x	                eor $0804,x
105	.a077	29 f8		and #$f8	                and #$F8
106	.a079	f0 06		beq $a081	                beq LF4D0
107	.a07b	bd 04 08	lda $0804,x	                lda $0804,x
108	.a07e	20 4a a1	jsr $a14a	                jsr LF599
109	.a081					LF4D0:
110	.a081	bd 10 08	lda $0810,x	                lda $0810,x
111	.a084	c9 03		cmp #$03	                cmp #$03
112	.a086	f0 49		beq $a0d1	                beq LF520
113	.a088	bd 14 08	lda $0814,x	                lda $0814,x
114	.a08b	d0 28		bne $a0b5	                bne LF504
115	.a08d	fe 10 08	inc $0810,x	                inc $0810,x
116	.a090	bd 10 08	lda $0810,x	                lda $0810,x
117	.a093	c9 03		cmp #$03	                cmp #$03
118	.a095	d0 0e		bne $a0a5	                bne LF4F4
119	.a097	bc 20 08	ldy $0820,x	                ldy $0820,x
120	.a09a	b9 c0 08	lda $08c0,y	                lda $08C0,y
121	.a09d	30 32		bmi $a0d1	                bmi LF520
122	.a09f	9e 30 08	stz $0830,x	                stz $0830,x
123	.a0a2	9e 10 08	stz $0810,x	                stz $0810,x
124	.a0a5					LF4F4:
125	.a0a5	bd 10 08	lda $0810,x	                lda $0810,x
126	.a0a8	18		clc		                clc
127	.a0a9	7d 20 08	adc $0820,x	                adc $0820,x
128	.a0ac	a8		tay		                tay
129	.a0ad	b9 c4 08	lda $08c4,y	                lda $08C4,y
130	.a0b0	9d 14 08	sta $0814,x	                sta $0814,x
131	.a0b3	f0 1c		beq $a0d1	                beq LF520
132	.a0b5					LF504:
133	.a0b5	de 14 08	dec $0814,x	                dec $0814,x
134	.a0b8	bd 20 08	lda $0820,x	                lda $0820,x
135	.a0bb	18		clc		                clc
136	.a0bc	7d 10 08	adc $0810,x	                adc $0810,x
137	.a0bf	a8		tay		                tay
138	.a0c0	b9 c1 08	lda $08c1,y	                lda $08C1,y
139	.a0c3	18		clc		                clc
140	.a0c4	7d 30 08	adc $0830,x	                adc $0830,x
141	.a0c7	9d 30 08	sta $0830,x	                sta $0830,x
142	.a0ca	18		clc		                clc
143	.a0cb	7d 0c 08	adc $080c,x	                adc $080C,x
144	.a0ce	20 86 a1	jsr $a186	                jsr LF5D5
145	.a0d1					LF520:
146	.a0d1	e0 04		cpx #$04	                cpx #$04
147	.a0d3	f0 03		beq $a0d8	                beq LF527
148	.a0d5	4c d7 9f	jmp $9fd7	                jmp LF426

150	.a0d8					LF527:
151	.a0d8	60		rts		                rts

153	.a0d9					LF528:
154	.a0d9	bd 08 08	lda $0808,x	                lda $0808,x
155	.a0dc	c9 04		cmp #$04	                cmp #$04
156	.a0de	f0 05		beq $a0e5	                beq LF534
157	.a0e0	a9 03		lda #$03	                lda #$03
158	.a0e2	9d 08 08	sta $0808,x	                sta $0808,x
159	.a0e5					LF534:
160	.a0e5	bd ce 02	lda $02ce,x	                lda bufferEmptyFlags,x
161	.a0e8	f0 14		beq $a0fe	                beq LF54D
162	.a0ea	a9 00		lda #$00	                lda #$00
163	.a0ec	9e ce 02	stz $02ce,x	                stz bufferEmptyFlags,x
164	.a0ef	a0 04		ldy #$04	                ldy #$04
165	.a0f1					LF540:
166	.a0f1	99 2b 08	sta $082b,y	                sta $082B,y
167	.a0f4	88		dey		                dey
168	.a0f5	d0 fa		bne $a0f1	                bne LF540
169	.a0f7	9e 18 08	stz $0818,x	                stz $0818,x
170	.a0fa	88		dey		                dey
171	.a0fb	8c 38 08	sty $0838	                sty $0838
172	.a0fe					LF54D:
173	.a0fe	bd 28 08	lda $0828,x	                lda $0828,x
174	.a101	f0 60		beq $a163	                beq LF5B2
175	.a103	ad 3b 08	lda $083b	                lda $083B
176	.a106	f0 34		beq $a13c	                beq LF58B
177	.a108	9e 28 08	stz $0828,x	                stz $0828,x
178	.a10b					LF55A:
179	.a10b	4c 36 a2	jmp $a236	                jmp LF685

181						;-------------------------------------------------------------------------
182						;
183						; Clear a buffer that's a sound channel.
184						;
185						; https://tobylobster.github.io/mos/mos/S-s16.html#SP7
186						;
187						; Entry:
188						;
189						; X = buffer number (must be a sound channel buffer)
190						;
192						                ; All this stuff is in the top-level namespace in
193						                ; 3.50. Needs a rethink!
194	.a10e					clearSoundChannelBufferInternal:
198						                .block
199	.a10e	20 43 a1	jsr $a143	                jsr LF592
200	.a111	98		tya		                tya
201	.a112	9e 18 08	stz $0818,x	                stz $0818,x
202	.a115	9e ce 02	stz $02ce,x	                stz bufferEmptyFlags,x
203	.a118	9e 00 08	stz $0800,x	                stz $0800,x
204	.a11b	a0 03		ldy #$03	                ldy #$03
205	.a11d					loop:
206	.a11d	99 2c 08	sta $082c,y	                sta $082C,y
207	.a120	88		dey		                dey
208	.a121	10 fa		bpl $a11d	                bpl loop
209	.a123	8c 38 08	sty $0838	                sty $0838
210	.a126	80 63		bra $a18b	                bra LF5DA
211						                .endblock

213						;-------------------------------------------------------------------------

215	.a128					LF577:
216	.a128	08		php		                php
217	.a129	78		sei		                sei
218	.a12a	bd 08 08	lda $0808,x	                lda $0808,x
219	.a12d	c9 04		cmp #$04	                cmp #$04
220	.a12f	d0 0a		bne $a13b	                bne LF58A
221	.a131	20 1a eb	jsr $eb1a	                jsr osbyte98
222	.a134	90 05		bcc $a13b	                bcc LF58A
223	.a136	a9 00		lda #$00	                lda #$00
224	.a138	9e 00 08	stz $0800,x	                stz $0800,x
225	.a13b					LF58A:
226	.a13b	28		plp		                plp
227	.a13c					LF58B:
228	.a13c	bc 20 08	ldy $0820,x	                ldy $0820,x
229	.a13f	c0 ff		cpy #$ff	                cpy #$FF
230	.a141	d0 72		bne $a1b5	                bne LF604

232						                ; https://tobylobster.github.io/mos/mos/S-s16.html#SP2
233	.a143					LF592:
234	.a143	a9 04		lda #$04	                lda #$04
235	.a145	9d 08 08	sta $0808,x	                sta $0808,x
236	.a148	a9 c0		lda #$c0	                lda #$C0
237	.a14a					LF599:
238	.a14a	9d 04 08	sta $0804,x	                sta $0804,x
239	.a14d	ac 62 02	ldy $0262	                ldy soundSuppressionStatus
240	.a150	f0 02		beq $a154	                beq LF5A3
241	.a152	a9 c0		lda #$c0	                lda #$C0
242	.a154					LF5A3:
243	.a154	38		sec		                sec
244	.a155	e9 40		sbc #$40	                sbc #$40
245	.a157	4a		lsr a		                lsr a
246	.a158	4a		lsr a		                lsr a
247	.a159	4a		lsr a		                lsr a
248	.a15a	49 0f		eor #$0f	                eor #$0F
249	.a15c	1d bc 9f	ora $9fbc,x	                ora soundParameterTable-bufferNumberSound0,x
250	.a15f	09 10		ora #$10	                ora #$10
251	.a161	80 34		bra $a197	                bra LF5E6

253	.a163					LF5B2:
254	.a163	20 1a eb	jsr $eb1a	                jsr osbyte98
255	.a166	b0 c0		bcs $a128	                bcs LF577
256	.a168	29 03		and #$03	                and #$03
257	.a16a	f0 9f		beq $a10b	                beq LF55A
258	.a16c	ad 38 08	lda $0838	                lda $0838
259	.a16f	f0 cb		beq $a13c	                beq LF58B
260	.a171	fe 28 08	inc $0828,x	                inc $0828,x
261	.a174	a8		tay		                tay
262	.a175	10 0a		bpl $a181	                bpl LF5D0
263	.a177	20 1a eb	jsr $eb1a	                jsr osbyte98
264	.a17a	29 03		and #$03	                and #$03
265	.a17c	8d 38 08	sta $0838	                sta $0838
266	.a17f	80 bb		bra $a13c	                bra LF58B

268	.a181					LF5D0:
269	.a181	ce 38 08	dec $0838	                dec $0838
270	.a184	80 b6		bra $a13c	                bra LF58B

272	.a186					LF5D5:
273	.a186	dd 2c 08	cmp $082c,x	                cmp $082C,x
274	.a189	f0 2a		beq $a1b5	                beq LF604
275	.a18b					LF5DA:
276	.a18b	9d 2c 08	sta $082c,x	                sta $082C,x
277	.a18e	e0 04		cpx #$04	                cpx #$04
278	.a190	d0 24		bne $a1b6	                bne LF605
279	.a192	29 0f		and #$0f	                and #$0F
280	.a194	1d bc 9f	ora $9fbc,x	                ora soundParameterTable-bufferNumberSound0,x
281	.a197					LF5E6:
282	.a197	08		php		                php
283	.a198					LF5E7:
284	.a198	78		sei		                sei
285	.a199	a0 ff		ldy #$ff	                ldy #$FF
286	.a19b	8c 43 fe	sty $fe43	                sty systemVIA.ddra
287	.a19e	8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake
288	.a1a1	c8		iny		                iny
289	.a1a2	8c 40 fe	sty $fe40	                sty systemVIA.orb
290	.a1a5	a0 02		ldy #$02	                ldy #$02
291	.a1a7					LF5F6:
292	.a1a7	88		dey		                dey
293	.a1a8	d0 fd		bne $a1a7	                bne LF5F6
294	.a1aa	a0 08		ldy #$08	                ldy #$08
295	.a1ac	8c 40 fe	sty $fe40	                sty systemVIA.orb
296	.a1af	a0 04		ldy #$04	                ldy #$04
297	.a1b1					LF600:
298	.a1b1	88		dey		                dey
299	.a1b2	d0 fd		bne $a1b1	                bne LF600
300	.a1b4	28		plp		                plp
301	.a1b5					LF604:
302	.a1b5	60		rts		                rts

304	.a1b6					LF605:
305	.a1b6	48		pha		                pha
306	.a1b7	29 03		and #$03	                and #$03
307	.a1b9	8d 3c 08	sta $083c	                sta $083C
308	.a1bc	9c 3d 08	stz $083d	                stz $083D
309	.a1bf	68		pla		                pla
310	.a1c0	4a		lsr a		                lsr a
311	.a1c1	4a		lsr a		                lsr a
312	.a1c2					LF611:
313	.a1c2	c9 0c		cmp #$0c	                cmp #$0C
314	.a1c4	90 07		bcc $a1cd	                bcc LF61C
315	.a1c6	ee 3d 08	inc $083d	                inc $083D
316	.a1c9	e9 0c		sbc #$0c	                sbc #$0C
317	.a1cb	d0 f5		bne $a1c2	                bne LF611
318	.a1cd					LF61C:
319	.a1cd	a8		tay		                tay
320	.a1ce	ad 3d 08	lda $083d	                lda $083D
321	.a1d1	48		pha		                pha
322	.a1d2	b9 95 a2	lda $a295,y	                lda LF6E4,y
323	.a1d5	8d 3d 08	sta $083d	                sta $083D
324	.a1d8	b9 a1 a2	lda $a2a1,y	                lda LF6F0,y
325	.a1db	48		pha		                pha
326	.a1dc	29 03		and #$03	                and #$03
327	.a1de	8d 3e 08	sta $083e	                sta $083E
328	.a1e1	68		pla		                pla
332	.a1e2	4a		lsr a		                lsr a
333	.a1e3	4a		lsr a		                lsr a
334	.a1e4	4a		lsr a		                lsr a
335	.a1e5	4a		lsr a		                lsr a
337	.a1e6	8d 3f 08	sta $083f	                sta $083F
338	.a1e9	ad 3d 08	lda $083d	                lda $083D
339	.a1ec	ac 3c 08	ldy $083c	                ldy $083C
340	.a1ef	f0 0c		beq $a1fd	                beq LF64C
341	.a1f1					LF640:
342	.a1f1	38		sec		                sec
343	.a1f2	ed 3f 08	sbc $083f	                sbc $083F
344	.a1f5	b0 03		bcs $a1fa	                bcs LF649
345	.a1f7	ce 3e 08	dec $083e	                dec $083E
346	.a1fa					LF649:
347	.a1fa	88		dey		                dey
348	.a1fb	d0 f4		bne $a1f1	                bne LF640
349	.a1fd					LF64C:
350	.a1fd	8d 3d 08	sta $083d	                sta $083D
351	.a200	68		pla		                pla
352	.a201	a8		tay		                tay
353	.a202	f0 09		beq $a20d	                beq LF65C
354	.a204					LF653:
355	.a204	4e 3e 08	lsr $083e	                lsr $083E
356	.a207	6e 3d 08	ror $083d	                ror $083D
357	.a20a	88		dey		                dey
358	.a20b	d0 f7		bne $a204	                bne LF653
359	.a20d					LF65C:
360	.a20d	ad 3d 08	lda $083d	                lda $083D
361	.a210	18		clc		                clc
362	.a211	7d 75 e1	adc $e175,x	                adc LE165,x
363	.a214	8d 3d 08	sta $083d	                sta $083D
364	.a217	90 03		bcc $a21c	                bcc LF66B
365	.a219	ee 3e 08	inc $083e	                inc $083E
366	.a21c					LF66B:
367	.a21c	29 0f		and #$0f	                and #$0F
368	.a21e	1d bc 9f	ora $9fbc,x	                ora soundParameterTable-bufferNumberSound0,x
369	.a221	08		php		                php
370	.a222	78		sei		                sei
371	.a223	20 97 a1	jsr $a197	                jsr LF5E6
372	.a226	ad 3d 08	lda $083d	                lda $083D
373	.a229	4e 3e 08	lsr $083e	                lsr $083E
374	.a22c	6a		ror a		                ror a
375	.a22d	4e 3e 08	lsr $083e	                lsr $083E
376	.a230	6a		ror a		                ror a
377	.a231	4a		lsr a		                lsr a
378	.a232	4a		lsr a		                lsr a
379	.a233	4c 98 a1	jmp $a198	                jmp LF5E7

381	.a236					LF685:
382	.a236	08		php		                php
383	.a237	78		sei		                sei
384	.a238	20 1f eb	jsr $eb1f	                jsr osbyte91
385	.a23b	48		pha		                pha
386	.a23c	29 04		and #$04	                and #$04
387	.a23e	f0 13		beq $a253	                beq LF6A2
388	.a240	68		pla		                pla
389	.a241	bc 20 08	ldy $0820,x	                ldy $0820,x
390	.a244	c8		iny		                iny
391	.a245	d0 03		bne $a24a	                bne LF699Sound
392	.a247	20 43 a1	jsr $a143	                jsr LF592
393	.a24a					LF699Sound:
394	.a24a	20 1f eb	jsr $eb1f	                jsr osbyte91
395	.a24d	20 1f eb	jsr $eb1f	                jsr osbyte91
396	.a250	28		plp		                plp
397	.a251	80 3e		bra $a291	                bra LF6E0

399	.a253					LF6A2:
400	.a253	68		pla		                pla
401	.a254	29 f8		and #$f8	                and #$F8
402	.a256	0a		asl a		                asl a
403	.a257	90 0b		bcc $a264	                bcc LF6B3Sound
404	.a259	49 ff		eor #$ff	                eor #$FF
405	.a25b	4a		lsr a		                lsr a
406	.a25c	38		sec		                sec
407	.a25d	e9 40		sbc #$40	                sbc #$40
408	.a25f	20 4a a1	jsr $a14a	                jsr LF599
409	.a262	a9 ff		lda #$ff	                lda #$FF
410	.a264					LF6B3Sound:
411	.a264	9d 20 08	sta $0820,x	                sta $0820,x
412	.a267	a9 05		lda #$05	                lda #$05
413	.a269	9d 1c 08	sta $081c,x	                sta $081C,x
414	.a26c	a9 01		lda #$01	                lda #$01
415	.a26e	9d 24 08	sta $0824,x	                sta $0824,x
416	.a271	9e 14 08	stz $0814,x	                stz $0814,x
417	.a274	9e 08 08	stz $0808,x	                stz $0808,x
418	.a277	9e 30 08	stz $0830,x	                stz $0830,x
419	.a27a	a9 ff		lda #$ff	                lda #$FF
420	.a27c	9d 10 08	sta $0810,x	                sta $0810,x
421	.a27f	20 1f eb	jsr $eb1f	                jsr osbyte91
422	.a282	9d 0c 08	sta $080c,x	                sta $080C,x
423	.a285	20 1f eb	jsr $eb1f	                jsr osbyte91
424	.a288	28		plp		                plp
425	.a289	48		pha		                pha
426	.a28a	bd 0c 08	lda $080c,x	                lda $080C,x
427	.a28d	20 86 a1	jsr $a186	                jsr LF5D5
428	.a290	68		pla		                pla
429	.a291					LF6E0:
430	.a291	9d 18 08	sta $0818,x	                sta $0818,x
431	.a294	60		rts		                rts

433	.a295					LF6E4:
434	>a295	f0				                .byte $F0
435	>a296	b7				                .byte $B7
436	>a297	82				                .byte $82
437	>a298	4f				                .byte $4F
438	>a299	20				                .byte $20
439	>a29a	f3				                .byte $F3
440	>a29b	c8				                .byte $C8
441	>a29c	a0				                .byte $A0
442	>a29d	7b				                .byte $7B
443	>a29e	57				                .byte $57
444	>a29f	35				                .byte $35
445	>a2a0	16				                .byte $16
446	.a2a1					LF6F0:
447	>a2a1	e7				                .byte $E7
448	>a2a2	d7				                .byte $D7
449	>a2a3	cb				                .byte $CB
450	>a2a4	c3				                .byte $C3
451	>a2a5	b7				                .byte $B7
452	>a2a6	aa				                .byte $AA
453	>a2a7	a2				                .byte $A2
454	>a2a8	9a				                .byte $9a
455	>a2a9	92				                .byte $92
456	>a2aa	8a				                .byte $8a
457	>a2ab	82				                .byte $82
458	>a2ac	7a				                .byte $7a

:5	;******  Return to file: src/terminal.s65

3630						;-------------------------------------------------------------------------

3636						;-------------------------------------------------------------------------
3637						;
3638						; Utils/Terminal ROM service entry point.
3639						;
3640	.a2ad					utilsServiceEntryPoint:
3706	.a2ad	e0 0f		cpx #$0f	                cpx #terminalROM
3707	.a2af	f0 01		beq $a2b2	                beq utilsInCorrectBank
3708	.a2b1	60		rts		                rts
3709	.a2b2					utilsInCorrectBank:
3710	.a2b2	80 02		bra $a2b6	                bra handleInitialiseFilingSystem
3711	.a2b4					L9DCA:
3712	.a2b4	a9 00		lda #$00	                lda #$00
3713	.a2b6					handleInitialiseFilingSystem:
3715	.a2b6	c9 12		cmp #$12	                cmp #romServiceCallInitialiseFilingSystem
3716	.a2b8	d0 1a		bne $a2d4	                bne handleBreakInstruction
3721	.a2ba	c0 04		cpy #$04	                cpy #fsTapeOrROMMax+1
3722	.a2bc	b0 42		bcs $a300	                bcs L9E16                    ; taken if not tape/rom
3723	.a2be	c0 00		cpy #$00	                cpy #fsNone
3724	.a2c0	f0 3e		beq $a300	                beq L9E16                    ; taken if no FS
3725	.a2c2	a2 03		ldx #$03	                ldx #3                       ; assume tape, 300 baud tape
3726	.a2c4	98		tya		                tya                          ; Y = FS number
3727	.a2c5	c9 02		cmp #$02	                cmp #fs300BaudTape
3728	.a2c7	b0 04		bcs $a2cd	                bcs L9DE3              ; taken if 300 baud tape or ROM
3729	.a2c9	a2 00		ldx #$00	                ldx #$00               ; X=0 for 1200 baud
3730	.a2cb	69 02		adc #$02	                adc #$02            ; adjust so that the result of the
3731						                                    ; following adc will be $8c
3732	.a2cd					L9DE3:
3733	.a2cd	69 89		adc #$89	                adc #$89                     ; Convert to TAPE/ROM select value
3735	.a2cf	20 4d ee	jsr $ee4d	                jsr selectROMOrTAPEByOSBYTE
3736	.a2d2	80 e0		bra $a2b4	                bra L9DCA                    ; Jump to claim and return

3738	.a2d4					handleBreakInstruction:
3739	.a2d4	c9 06		cmp #$06	                cmp #romServiceCallBreakInstruction
3740	.a2d6	d0 29		bne $a301	                bne handleCloseAllOpenFiles
3741	.a2d8	ad dd df	lda $dfdd	                lda hazel.hasACCCONChanged ; Skip if ACCCON not changed
3742	.a2db	f0 09		beq $a2e6	                beq closeMoveSrcHandle
3743	.a2dd	9c dd df	stz $dfdd	                stz hazel.hasACCCONChanged ; Clear ACCCON changed flag
3744	.a2e0	ad dc df	lda $dfdc	                lda hazel.oldACCCON        ; Restore ACCCON
3745	.a2e3	8d 34 fe	sta $fe34	                sta ACCCON
3746	.a2e6					closeMoveSrcHandle:
3747	.a2e6	5a		phy		                phy
3748	.a2e7	ac d4 df	ldy $dfd4	                ldy hazel.moveSrcHandle
3749	.a2ea	f0 06		beq $a2f2	                beq closeMoveDestHandle
3750	.a2ec	9c d4 df	stz $dfd4	                stz hazel.moveSrcHandle
3751	.a2ef	20 19 91	jsr $9119	                jsr closeFile
3752	.a2f2					closeMoveDestHandle:
3753	.a2f2	ac d5 df	ldy $dfd5	                ldy hazel.moveDestHandle
3754	.a2f5	f0 06		beq $a2fd	                beq L9E13
3755	.a2f7	9c d5 df	stz $dfd5	                stz hazel.moveDestHandle
3756	.a2fa	20 19 91	jsr $9119	                jsr closeFile
3757	.a2fd					L9E13:
3758	.a2fd	7a		ply		                ply
3759	.a2fe	a9 06		lda #$06	                lda #romServiceCallBreakInstruction ; restore A
3760	.a300					L9E16:
3761	.a300	60		rts		                rts
3762	.a301					handleCloseAllOpenFiles:
3763	.a301	c9 26		cmp #$26	                cmp #romServiceCallCloseAllOpenFiles
3764	.a303	d0 1d		bne $a322	                bne handleHelp
3766	.a305	a9 8d		lda #$8d	                lda #$8D
3767	.a307	20 16 a3	jsr $a316	                jsr L9E2C
3768	.a30a	a2 03		ldx #$03	                ldx #$03
3769	.a30c	a9 04		lda #$04	                lda #$04
3770	.a30e	24 c6		bit $c6		                bit $C6
3771	.a310	f0 02		beq $a314	                beq L9E2A
3772	.a312	a2 00		ldx #$00	                ldx #$00
3773	.a314					L9E2A:
3774	.a314	a9 8c		lda #$8c	                lda #$8C
3775	.a316					L9E2C:
3777	.a316	20 4d ee	jsr $ee4d	                jsr selectROMOrTAPEByOSBYTE
3778	.a319	a9 00		lda #$00	                lda #$00
3779	.a31b	a8		tay		                tay
3780	.a31c	20 bf a6	jsr $a6bf	                jsr osfindTapeOrROM
3781	.a31f	a9 26		lda #$26	                lda #$26
3782	.a321	60		rts		                rts

3784	.a322					handleHelp
3785	.a322	c9 09		cmp #$09	                cmp #romServiceCallHelp
3789	.a324	d0 50		bne $a376	                bne LA304
3791	.a326	5a		phy		                phy
3792	.a327	b1 f2		lda ($f2),y	                lda ($F2),y
3793	.a329	c9 0d		cmp #$0d	                cmp #$0D
3794	.a32b	d0 1c		bne $a349	                bne L9E61
3795	.a32d	20 e1 a3	jsr $a3e1	                jsr L9EFC
3796	.a330	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
3797	>a333	20 20 4d 4f 53 0d		                .text "  MOS",13
3809	>a339	0d 55 54 49 4c 53 20 31		                .text 13,"UTILS 1.10C",13
	>a341	2e 31 30 43 0d
3811	>a346	00				                .text 0
3812	.a347	80 2a		bra $a373	                bra L9E8B
3813	.a349					L9E61:
3814	.a349	a2 02		ldx #$02	                ldx #size(mosHelpSubject)-1
3815	.a34b					L9E63:
3816	.a34b	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
3817	.a34d	c9 2e		cmp #$2e	                cmp #'.'
3818	.a34f	f0 29		beq $a37a	                beq L9E95
3819	.a351	29 df		and #$df	                and #$DF
3820	.a353	dd 77 a3	cmp $a377,x	                cmp mosHelpSubject,x
3821	.a356	d0 0b		bne $a363	                bne L9E7B
3822	.a358	c8		iny		                iny
3823	.a359	ca		dex		                dex
3824	.a35a	10 ef		bpl $a34b	                bpl L9E63
3825	.a35c	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
3826	.a35e	20 9c eb	jsr $eb9c	                jsr isLetter
3827	.a361	b0 17		bcs $a37a	                bcs L9E95
3828	.a363					L9E7B:
3829	.a363	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
3830	.a365	c9 0d		cmp #$0d	                cmp #13
3831	.a367	f0 0a		beq $a373	                beq L9E8B
3832	.a369	c8		iny		                iny
3833	.a36a	c9 20		cmp #$20	                cmp #' '
3834	.a36c	d0 f5		bne $a363	                bne L9E7B
3835	.a36e	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
3836	.a371	d0 d6		bne $a349	                bne L9E61
3837	.a373					L9E8B:
3838	.a373	7a		ply		                ply
3839	.a374	a9 09		lda #$09	                lda #romServiceCallHelp
3840	.a376					LA304:
3841	.a376	60		rts		                rts

3848	>a377	53 4f 4d			mosHelpSubject: .text "SOM"

3850	.a37a					L9E95:
3851	.a37a	20 e1 a3	jsr $a3e1	                jsr L9EFC
3852	.a37d	a9 c0		lda #$c0	                lda #<mosCommandTable
3853	.a37f	85 b0		sta $b0		                sta terminalHELPWorkspace.tablePtr+0
3854	.a381	a9 83		lda #$83	                lda #>mosCommandTable
3855	.a383	85 b1		sta $b1		                sta terminalHELPWorkspace.tablePtr+1
3856	.a385					L9EA0:
3857	.a385	b2 b0		lda ($b0)	                lda (terminalHELPWorkspace.tablePtr)
3858	.a387	30 50		bmi $a3d9	                bmi L9EF4
3863	.a389	20 f3 a3	jsr $a3f3	                jsr printSpace
3864	.a38c	20 f3 a3	jsr $a3f3	                jsr printSpace
3865	.a38f	b2 b0		lda ($b0)	                lda (terminalHELPWorkspace.tablePtr)
3866	.a391					L9EAC:
3871	.a391	20 f5 a3	jsr $a3f5	                jsr L9F0E
3872	.a394					LA711:
3873	.a394	e6 b0		inc $b0		                inc terminalHELPWorkspace.tablePtr+0
3874	.a396	d0 02		bne $a39a	                bne L9EB5
3875	.a398	e6 b1		inc $b1		                inc terminalHELPWorkspace.tablePtr+1
3876	.a39a					L9EB5:
3877	.a39a	b2 b0		lda ($b0)	                lda (terminalHELPWorkspace.tablePtr)
3878	.a39c	10 f3		bpl $a391	                bpl L9EAC

3880						                ; add 4 to tablePtr
3881	.a39e	a9 04		lda #$04	                lda #$04
3882	.a3a0	18		clc		                clc
3883	.a3a1	65 b0		adc $b0		                adc terminalHELPWorkspace.tablePtr+0
3884	.a3a3	85 b0		sta $b0		                sta terminalHELPWorkspace.tablePtr+0
3885	.a3a5	90 02		bcc $a3a9	                bcc +
3886	.a3a7	e6 b1		inc $b1		                inc terminalHELPWorkspace.tablePtr+1
3887	.a3a9					+
3888	.a3a9	20 6c e2	jsr $e26c	                jsr LE25C
3889	.a3ac	e0 13		cpx #$13	                cpx #19
3890	.a3ae	f0 24		beq $a3d4	                beq L9EEF
3891	.a3b0					L9ECB:
3892	.a3b0	20 62 e2	jsr $e262	                jsr getTextCursorPositionWithColumn81
3893	.a3b3	8a		txa		                txa
3894	.a3b4	f0 cf		beq $a385	                beq L9EA0
3895	.a3b6	e0 14		cpx #$14	                cpx #20
3896	.a3b8	f0 cb		beq $a385	                beq L9EA0
3897	.a3ba	90 0d		bcc $a3c9	                bcc L9EE4
3898	.a3bc	e0 28		cpx #$28	                cpx #40
3899	.a3be	f0 c5		beq $a385	                beq L9EA0
3900	.a3c0	b0 0c		bcs $a3ce	                bcs L9EE9
3901	.a3c2	20 6c e2	jsr $e26c	                jsr LE25C
3902	.a3c5	e0 27		cpx #$27	                cpx #39
3903	.a3c7	f0 0b		beq $a3d4	                beq L9EEF
3904	.a3c9					L9EE4:
3905	.a3c9	20 f3 a3	jsr $a3f3	                jsr printSpace
3906	.a3cc	80 e2		bra $a3b0	                bra L9ECB

3908	.a3ce					L9EE9:
3909	.a3ce	e0 3c		cpx #$3c	                cpx #60
3910	.a3d0	90 f7		bcc $a3c9	                bcc L9EE4
3911	.a3d2	f0 b1		beq $a385	                beq L9EA0
3912	.a3d4					L9EEF:
3913	.a3d4	20 05 a4	jsr $a405	                jsr printNewLine
3914	.a3d7	80 ac		bra $a385	                bra L9EA0

3916	.a3d9					L9EF4:
3917	.a3d9	20 62 e2	jsr $e262	                jsr getTextCursorPositionWithColumn81
3918	.a3dc	8a		txa		                txa
3919	.a3dd	f0 94		beq $a373	                beq L9E8B
3920	.a3df	80 f3		bra $a3d4	                bra L9EEF

3922	.a3e1					L9EFC:
3923	.a3e1	5a		phy		                phy
3924	.a3e2	20 9a ad	jsr $ad9a	                jsr alwaysPrintFollowingMessage
3925	>a3e5	0d 4d 4f 53 20 35 2e 31		                .text 13,versionString,13,0
	>a3ed	30 69 0d 00
3926	.a3f1	7a		ply		                ply
3927	.a3f2	60		rts		                rts

3929						;-------------------------------------------------------------------------
3930						;
3931	.a3f3					printSpace:
3932	.a3f3	a9 20		lda #$20	                lda #$20
3933	.a3f5					L9F0E:
3934	.a3f5	da		phx		                phx
3935	.a3f6	a6 b0		ldx $b0		                ldx $B0
3936	.a3f8	da		phx		                phx
3937	.a3f9	a6 b1		ldx $b1		                ldx $B1
3938	.a3fb	20 ee ff	jsr $ffee	                jsr OSWRCH
3939	.a3fe					restoreB1AndB0:
3940	.a3fe	86 b1		stx $b1		                stx $B1
3941	.a400	fa		plx		                plx
3942	.a401	86 b0		stx $b0		                stx $B0
3943	.a403	fa		plx		                plx
3944	.a404	60		rts		                rts

3946						;-------------------------------------------------------------------------

3948	.a405					printNewLine:
3949	.a405	da		phx		                phx
3950	.a406	a6 b0		ldx $b0		                ldx $B0
3951	.a408	da		phx		                phx
3952	.a409	a6 b1		ldx $b1		                ldx $B1
3953	.a40b	20 e7 ff	jsr $ffe7	                jsr OSNEWL
3954	.a40e	80 ee		bra $a3fe	                bra restoreB1AndB0

3956						;-------------------------------------------------------------------------

3958						; TAPE/ROM OSARGS handler
3959						; =======================
3960	.a410					osargsTapeOrROM:
3961	.a410	c0 00		cpy #$00	                cpy #$00       ; Handle<>0 - read/write open file info
3962	.a412	d0 0e		bne $a422	                bne L9F3B
3963	.a414	09 00		ora #$00	                ora #$00 ; A<>0 - read/write filing system info - exit
3964	.a416	d0 09		bne $a421	                bne L9F3A

3966						; A=0, Y=0 - read current filing system
3967						; -------------------------------------
3968	.a418	a9 03		lda #$03	                lda #$03                     ; Prepare A=ROMFS
3970	.a41a	2c 47 02	bit $0247	                bit cfsRFSFSSwitch           ; If TAPE/ROM switch
3971	.a41d	d0 02		bne $a421	                bne L9F3A
3972	.a41f	25 c6		and $c6		                and $C6           ; Mask with speed to give A=2 or A=1

3975						; TAPE/ROM FSC 6 - shut down FS
3976						; TAPE/ROM FSC 8 - OS command
3977						; TAPE/ROM FSC 10 - *INFO
3978						; -----------------------------
3979	.a421					L9F3A:
3980	.a421	60		rts		                rts

3982						; OSARGS handle<>0 - red/write open file info
3983						; -------------------------------------------
3984	.a422					L9F3B:
3985	.a422	c9 00		cmp #$00	                cmp #$00                     ; Not =PTR, exit unsupported
3986	.a424	d0 fb		bne $a421	                bne L9F3A
3987	.a426	c0 02		cpy #$02	                cpy #$02                     ; =PTR#2 - read PTR on output handle
3988	.a428	f0 1d		beq $a447	                beq L9F60

3990						; Read PTR on CFS/RFS input file
3991						; ------------------------------
3992	.a42a	a9 01		lda #$01	                lda #$01                     ; Check if this is input channel and is open
3993	.a42c	20 a0 ae	jsr $aea0	                jsr LAA68
3994	.a42f	ad 9e 03	lda $039e	                lda $039E
3995	.a432	95 00		sta $00,x	                sta $00,x
3996	.a434	5a		phy		                phy
3997	.a435	ad de 03	lda $03de	                lda $03DE
3998	.a438	ac dd 03	ldy $03dd	                ldy $03DD
3999	.a43b	d0 01		bne $a43e	                bne L9F57
4000	.a43d	3a		dec a		                dec a
4001	.a43e					L9F57:
4002	.a43e	88		dey		                dey
4003	.a43f	94 01		sty $01,x	                sty $01,x
4004	.a441	7a		ply		                ply
4005	.a442					L9F5B:
4006	.a442	95 02		sta $02,x	                sta $02,x
4007	.a444	74 03		stz $03,x	                stz $03,x
4008	.a446	60		rts		                rts

4010						; Read PTR on TAPE output file
4011						; ----------------------------
4012	.a447					L9F60:
4013	.a447	a9 02		lda #$02	                lda #$02                     ; Check if this is output channel and is open
4014	.a449	20 a0 ae	jsr $aea0	                jsr LAA68
4015	.a44c	ad 9d 03	lda $039d	                lda $039D                    ; Copy PTR to control block
4016	.a44f	95 00		sta $00,x	                sta $00,x
4017	.a451	ad 94 03	lda $0394	                lda $0394
4018	.a454	95 01		sta $01,x	                sta $01,x
4019	.a456	ad 95 03	lda $0395	                lda $0395
4020	.a459	80 e7		bra $a442	                bra L9F5B

4022						;-------------------------------------------------------------------------

4024						; TAPE/ROM FSC dispatch table
4025						; ---------------------------

4027						tapeAndROMFSCRoutine: .macro addr,shift
4029						                .endmacro

4031						tapeAndROMFSCRoutinesTable: .macro shift
4044						                .endmacro

4046	.a45b					L9F74:
4028	>a45b	9b				                .byte ((LA422)-1)>>(0)&$ff
4028	>a45c	5f				                .byte ((LA4F1)-1)>>(0)&$ff
4028	>a45d	ec				                .byte ((LA110)-1)>>(0)&$ff
4028	>a45e	05				                .byte ((LA129)-1)>>(0)&$ff
4028	>a45f	ec				                .byte ((LA110)-1)>>(0)&$ff
4028	>a460	2d				                .byte ((LA168)-1)>>(0)&$ff
4028	>a461	20				                .byte ((L9F3A)-1)>>(0)&$ff
4028	>a462	84				                .byte ((L9F9E)-1)>>(0)&$ff
4028	>a463	20				                .byte ((L9F3A)-1)>>(0)&$ff
4028	>a464	1a				                .byte ((LA155)-1)>>(0)&$ff
4028	>a465	20				                .byte ((L9F3A)-1)>>(0)&$ff
4028	>a466	ef				                .byte ((LA113)-1)>>(0)&$ff
4048	.a467					L9F80:
4028	>a467	a8				                .byte ((LA422)-1)>>(8)&$ff
4028	>a468	a9				                .byte ((LA4F1)-1)>>(8)&$ff
4028	>a469	a5				                .byte ((LA110)-1)>>(8)&$ff
4028	>a46a	a6				                .byte ((LA129)-1)>>(8)&$ff
4028	>a46b	a5				                .byte ((LA110)-1)>>(8)&$ff
4028	>a46c	a6				                .byte ((LA168)-1)>>(8)&$ff
4028	>a46d	a4				                .byte ((L9F3A)-1)>>(8)&$ff
4028	>a46e	a4				                .byte ((L9F9E)-1)>>(8)&$ff
4028	>a46f	a4				                .byte ((L9F3A)-1)>>(8)&$ff
4028	>a470	a6				                .byte ((LA155)-1)>>(8)&$ff
4028	>a471	a4				                .byte ((L9F3A)-1)>>(8)&$ff
4028	>a472	a5				                .byte ((LA113)-1)>>(8)&$ff

4051						;-------------------------------------------------------------------------

4053						; TAPE/ROM FSC
4054						; ============
4055	.a473					fscTapeOrROM:
4056	.a473	c9 0c		cmp #$0c	                cmp #$0C                     ; function<12 - exit unchanged
4057	.a475	b0 aa		bcs $a421	                bcs L9F3A
4058	.a477	86 bc		stx $bc		                stx $BC                      ; Index into dispatch table
4059	.a479	aa		tax		                tax
4060	.a47a	bd 67 a4	lda $a467,x	                lda L9F80,x
4061	.a47d	48		pha		                pha
4062	.a47e	bd 5b a4	lda $a45b,x	                lda L9F74,x
4063	.a481	48		pha		                pha
4064	.a482	a6 bc		ldx $bc		                ldx $BC
4065	.a484	60		rts		                rts

4067						; TAPE/ROM FSC 7 - obtain file handle range
4068						; -----------------------------------------
4069	.a485					L9F9E:
4070	.a485	a2 03		ldx #$03	                ldx #$03
4071	.a487	a0 03		ldy #$03	                ldy #$03
4073	.a489	ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4074	.a48c	d0 93		bne $a421	                bne L9F3A
4075	.a48e	88		dey		                dey
4076	.a48f	a2 01		ldx #$01	                ldx #$01
4078	.a491	60		rts		                rts

4080	.a492					L9FAB:
4081	.a492	68		pla		                pla
4082	.a493	28		plp		                plp
4083	.a494	38		sec		                sec
4084	.a495	60		rts		                rts

4086	.a496					L9FAF:
4087	.a496	08		php		                php
4088	.a497	48		pha		                pha
4089	.a498	20 2b ae	jsr $ae2b	                jsr LA9F3
4090	.a49b	ad c2 03	lda $03c2	                lda $03C2
4091	.a49e	48		pha		                pha
4092	.a49f	20 71 a9	jsr $a971	                jsr LA502
4093	.a4a2	68		pla		                pla
4094	.a4a3	b0 ed		bcs $a492	                bcs L9FAB
4095	.a4a5	f0 19		beq $a4c0	                beq L9FD9
4096	.a4a7	a2 03		ldx #$03	                ldx #$03
4097	.a4a9	a9 ff		lda #$ff	                lda #$FF
4098	.a4ab					L9FC4:
4099	.a4ab	48		pha		                pha
4100	.a4ac	bd be 03	lda $03be,x	                lda $03BE,x
4101	.a4af	95 b0		sta $b0,x	                sta $B0,x
4102	.a4b1	68		pla		                pla
4103	.a4b2	35 b0		and $b0,x	                and $B0,x
4104	.a4b4	ca		dex		                dex
4105	.a4b5	10 f4		bpl $a4ab	                bpl L9FC4
4106	.a4b7	1a		inc a		                inc a
4107	.a4b8	d0 06		bne $a4c0	                bne L9FD9
4108	.a4ba	20 f3 ad	jsr $adf3	                jsr LA9B1
4109	.a4bd	4c 64 95	jmp $9564	                jmp badAddressError

4111	.a4c0					L9FD9:
4112	.a4c0	ad ca 03	lda $03ca	                lda $03CA
4113	.a4c3	4a		lsr a		                lsr a
4114	.a4c4	68		pla		                pla
4115	.a4c5	48		pha		                pha
4116	.a4c6	f0 10		beq $a4d8	                beq L9FF1
4117	.a4c8	90 15		bcc $a4df	                bcc L9FF8
4118	.a4ca					L9FE3:
4119	.a4ca	20 fd ad	jsr $adfd	                jsr LA9BB
4120	.a4cd	20 ff ae	jsr $aeff	                jsr doFollowingError
4121	>a4d0	d5 4c 6f 63 6b 65 64 00		                .text $d5,"Locked",0
4122	.a4d8					L9FF1:
4123	.a4d8	90 05		bcc $a4df	                bcc L9FF8
4124	.a4da	a9 03		lda #$03	                lda #$03
4125	.a4dc	8d 58 02	sta $0258	                sta breakAndESCAPEEffect
4126	.a4df					L9FF8:
4127	.a4df	a9 30		lda #$30	                lda #$30
4128	.a4e1	25 bb		and $bb		                and $BB
4129	.a4e3	f0 04		beq $a4e9	                beq LA002
4130	.a4e5	a5 c1		lda $c1		                lda $C1
4131	.a4e7					LA000:
4132	.a4e7	d0 03		bne $a4ec	                bne LA00A
4133	.a4e9					LA002:
4139	.a4e9	20 1e ab	jsr $ab1e	                jsr LA6D2
4140	.a4ec					LA00A:
4141	.a4ec	20 e3 ac	jsr $ace3	                jsr LA8A1
4142	.a4ef	d0 57		bne $a548	                bne LA066
4143	.a4f1	20 6d ae	jsr $ae6d	                jsr LAA35
4144	.a4f4	2c ca 03	bit $03ca	                bit $03CA
4145	.a4f7	30 08		bmi $a501	                bmi LA01F
4146	.a4f9	20 9d ac	jsr $ac9d	                jsr LA85B
4147	.a4fc	20 e7 aa	jsr $aae7	                jsr LA678
4148	.a4ff	80 de		bra $a4df	                bra L9FF8

4150	.a501					LA01F:
4151	.a501	68		pla		                pla                          ; RUN, no control block to update
4152	.a502	f0 33		beq $a537	                beq LA055
4153	.a504	a0 02		ldy #$02	                ldy #$02
4154	.a506					LA024:
4155	.a506	b9 bc 03	lda $03bc,y	                lda $03BC,y                  ; Copy load/exec to control block
4156	.a509	91 c8		sta ($c8),y	                sta ($C8),y
4157	.a50b	c8		iny		                iny
4158	.a50c	c0 0a		cpy #$0a	                cpy #$0A
4159	.a50e	d0 f6		bne $a506	                bne LA024
4160	.a510	ad c8 03	lda $03c8	                lda $03C8                    ; Length b0-b7=Block Length b0-b7
4161	.a513	91 c8		sta ($c8),y	                sta ($C8),y
4162	.a515	c8		iny		                iny
4163	.a516	ad c9 03	lda $03c9	                lda $03C9
4164	.a519	18		clc		                clc
4165	.a51a	6d c6 03	adc $03c6	                adc $03C6                    ; Length b8-b15=Block Number+Block Length b8-b15
4166	.a51d	91 c8		sta ($c8),y	                sta ($C8),y
4167	.a51f	c8		iny		                iny
4168	.a520	a9 00		lda #$00	                lda #$00
4169	.a522	6d c7 03	adc $03c7	                adc $03C7                    ; Length b16-b23=overflow
4170	.a525	91 c8		sta ($c8),y	                sta ($C8),y
4171	.a527	c8		iny		                iny                          ; Length b24-b31=&00
4172	.a528	a9 00		lda #$00	                lda #$00
4173	.a52a	91 c8		sta ($c8),y	                sta ($C8),y
4174	.a52c	c8		iny		                iny
4175	.a52d					LA04B:
4176	.a52d	b9 bd 03	lda $03bd,y	                lda $03BD,y                  ; Attrs=&00000000
4177	.a530	91 c8		sta ($c8),y	                sta ($C8),y
4178	.a532	c8		iny		                iny
4179	.a533	c0 12		cpy #$12	                cpy #$12
4180	.a535	d0 f6		bne $a52d	                bne LA04B
4181	.a537					LA055:
4182	.a537	28		plp		                plp
4183	.a538					LA056:
4184	.a538	20 f3 ad	jsr $adf3	                jsr LA9B1
4185	.a53b					LA059:
4186	.a53b	24 ba		bit $ba		                bit $BA                      ; If flag set, skip printing newline
4187	.a53d	30 07		bmi $a546	                bmi LA064
4188	.a53f					LA05D:
4189	.a53f	08		php		                php                          ; Print inline text
4190	.a540	20 65 ad	jsr $ad65	                jsr LA923
4191	>a543	0d				                .byte 13                     ; Could just do JSR OSNEWL
4192	>a544	00				                .byte 0
4193	.a545	28		plp		                plp
4194	.a546					LA064:
4195	.a546	18		clc		                clc
4196	.a547	60		rts		                rts

4198	.a548					LA066:
4199	.a548	20 75 a9	jsr $a975	                jsr LA506
4200	.a54b	d0 92		bne $a4df	                bne L9FF8
4201	.a54d					LA06B:
4202	.a54d	86 f2		stx $f2		                stx $F2
4203	.a54f	84 f3		sty $f3		                sty $F3
4204	.a551	a0 00		ldy #$00	                ldy #$00
4205	.a553	20 2c f3	jsr $f32c	                jsr gsinitForFilenameParsing
4206	.a556	a2 00		ldx #$00	                ldx #$00
4207	.a558					LA076:
4208	.a558	20 3e f3	jsr $f33e	                jsr gsreadEntryPoint
4209	.a55b	b0 0d		bcs $a56a	                bcs LA088
4210	.a55d	f0 08		beq $a567	                beq LA085
4211	.a55f	9d d2 03	sta $03d2,x	                sta $03D2,x
4212	.a562	e8		inx		                inx
4213	.a563	e0 0b		cpx #$0b	                cpx #$0B
4214	.a565	d0 f1		bne $a558	                bne LA076
4215	.a567					LA085:
4216	.a567	4c 4e f3	jmp $f34e	                jmp badStringError

4218	.a56a					LA088:
4219	.a56a	9e d2 03	stz $03d2,x	                stz $03D2,x
4220	.a56d	60		rts		                rts

4222						; CFS/RFS OSFILE
4223						; ==============
4224	.a56e					osfileTapeOrROM:
4225	.a56e	48		pha		                pha
4226	.a56f	86 c8		stx $c8		                stx $C8                      ; C8/9=>control block
4227	.a571	84 c9		sty $c9		                sty $C9
4228	.a573	b2 c8		lda ($c8)	                lda ($C8)                    ; Get XY=>filename
4229	.a575	aa		tax		                tax
4230	.a576	a0 01		ldy #$01	                ldy #$01
4231	.a578	b1 c8		lda ($c8),y	                lda ($C8),y
4232	.a57a	a8		tay		                tay
4233	.a57b	20 4d a5	jsr $a54d	                jsr LA06B                    ; Parse filename
4234	.a57e	a0 02		ldy #$02	                ldy #$02
4235	.a580					LA09E:
4236	.a580	b1 c8		lda ($c8),y	                lda ($C8),y
4237	.a582	99 bc 03	sta $03bc,y	                sta $03BC,y
4238	.a585	99 ae 00	sta $00ae,y	                sta $00AE,y
4239	.a588	c8		iny		                iny
4240	.a589	c0 0a		cpy #$0a	                cpy #$0A
4241	.a58b	d0 f3		bne $a580	                bne LA09E
4242	.a58d	68		pla		                pla
4243	.a58e	f0 07		beq $a597	                beq LA0B5
4244	.a590	c9 ff		cmp #$ff	                cmp #$FF
4245	.a592	d0 b2		bne $a546	                bne LA064
4246	.a594	4c 96 a4	jmp $a496	                jmp L9FAF

4248	.a597					LA0B5:
4252	.a597	8d c6 03	sta $03c6	                sta $03C6
4253	.a59a	8d c7 03	sta $03c7	                sta $03C7
4254	.a59d					LA0BB:
4255	.a59d	b1 c8		lda ($c8),y	                lda ($C8),y
4256	.a59f	99 a6 00	sta $00a6,y	                sta $00A6,y
4257	.a5a2	c8		iny		                iny
4258	.a5a3	c0 12		cpy #$12	                cpy #$12
4259	.a5a5	d0 f6		bne $a59d	                bne LA0BB
4260	.a5a7	8a		txa		                txa
4261	.a5a8	f0 bd		beq $a567	                beq LA085
4262	.a5aa	20 2b ae	jsr $ae2b	                jsr LA9F3
4263	.a5ad	20 64 ac	jsr $ac64	                jsr LA822
4268	.a5b0					LA0D3:
4269	.a5b0	38		sec		                sec
4270	.a5b1	a2 fd		ldx #$fd	                ldx #$fd                     ;-3
4271	.a5b3					LA0D6:
4272	.a5b3	bd b7 ff	lda $ffb7,x	                lda ($b4-$fd)&$ffff,x
4273	.a5b6	fd b3 ff	sbc $ffb3,x	                sbc ($b0-$fd)&$ffff,x
4274	.a5b9	9d cb 02	sta $02cb,x	                sta $3c8-$fd,x
4275	.a5bc	e8		inx		                inx
4276	.a5bd	d0 f4		bne $a5b3	                bne LA0D6
4277	.a5bf	a8		tay		                tay
4278	.a5c0	d0 0e		bne $a5d0	                bne LA0F3
4279	.a5c2	ec c8 03	cpx $03c8	                cpx $03C8
4280	.a5c5	a9 01		lda #$01	                lda #$01
4281	.a5c7	ed c9 03	sbc $03c9	                sbc $03C9
4282	.a5ca	90 04		bcc $a5d0	                bcc LA0F3
4283	.a5cc	a2 80		ldx #$80	                ldx #$80
4284	.a5ce	80 08		bra $a5d8	                bra LA0FB

4286	.a5d0					LA0F3:
4287	.a5d0	a9 01		lda #$01	                lda #$01
4288	.a5d2	8d c9 03	sta $03c9	                sta $03C9
4289	.a5d5	8e c8 03	stx $03c8	                stx $03C8
4290	.a5d8					LA0FB:
4291	.a5d8	8e ca 03	stx $03ca	                stx $03CA
4292	.a5db	20 35 ab	jsr $ab35	                jsr LA6E9
4293	.a5de	30 61		bmi $a641	                bmi LA17B
4294	.a5e0	20 9d ac	jsr $ac9d	                jsr LA85B
4295	.a5e3	ee c6 03	inc $03c6	                inc $03C6
4296	.a5e6	d0 c8		bne $a5b0	                bne LA0D3
4297	.a5e8	ee c7 03	inc $03c7	                inc $03C7
4298	.a5eb	80 c3		bra $a5b0	                bra LA0D3

4301						; TAPE/ROM FSC 2 - */
4302						; TAPE/ROM FSC 4 - *RUN
4303						; ---------------------
4304	.a5ed					LA110:
4305	.a5ed	38		sec		                sec
4306	.a5ee	66 ce		ror $ce		                ror $CE
4307						; TAPE/ROM FSC 11 - *RUN command for library
4308						; ------------------------------------------
4309	.a5f0					LA113:
4310	.a5f0	da		phx		                phx
4311	.a5f1	5a		phy		                phy
4312	.a5f2	20 4d a5	jsr $a54d	                jsr LA06B
4313	.a5f5	a9 00		lda #$00	                lda #$00
4314	.a5f7	a2 ff		ldx #$ff	                ldx #$FF
4315	.a5f9	8e c2 03	stx $03c2	                stx $03C2
4316	.a5fc	20 96 a4	jsr $a496	                jsr L9FAF
4317	.a5ff	7a		ply		                ply
4318	.a600	fa		plx		                plx
4319	.a601	90 08		bcc $a60b	                bcc LA12E
4321	.a603	20 02 ae	jsr $ae02	                jsr LA9CA

4324						; TAPE/ROM FSC 3 - unknown * command
4325						; ----------------------------------
4326	.a606					LA129:
4327	.a606	a9 0b		lda #$0b	                lda #$0B
4328	.a608	6c 1e 02	jmp ($021e)	                jmp (FSCV)

4330	.a60b					LA12E:

4341	.a60b	ae c2 03	ldx $03c2	                ldx $03C2
4342	.a60e	ac c3 03	ldy $03c3	                ldy $03C3
4343	.a611	a9 a4		lda #$a4	                lda #$A4
4344	.a613	20 f4 ff	jsr $fff4	                jsr OSBYTE
4345	.a616	a9 01		lda #$01	                lda #$01
4346	.a618	6c c2 03	jmp ($03c2)	                jmp ($03C2)

4356						; TAPE/ROM FSC 9 - *EX
4357						; --------------------
4358	.a61b					LA155:
4359	.a61b	a9 08		lda #$08	                lda #$08
4360	.a61d	04 e2		tsb $e2		                tsb $E2
4361	.a61f	a5 e3		lda $e3		                lda $E3
4362	.a621	48		pha		                pha
4363	.a622	09 cc		ora #$cc	                ora #$CC
4364	.a624	85 e3		sta $e3		                sta $E3
4365	.a626	20 2b ae	jsr $ae2b	                jsr LA9F3
4366	.a629	68		pla		                pla
4367	.a62a	85 e3		sta $e3		                sta $E3
4368	.a62c	80 07		bra $a635	                bra LA16F

4370						; TAPE/ROM FSC 5 - *CAT
4371						; ---------------------
4372	.a62e					LA168:
4373	.a62e	a9 08		lda #$08	                lda #$08
4374	.a630	04 e2		tsb $e2		                tsb $E2
4375	.a632	20 2b ae	jsr $ae2b	                jsr LA9F3
4376	.a635					LA16F:
4377	.a635	a9 00		lda #$00	                lda #$00
4378	.a637	20 42 a6	jsr $a642	                jsr LA17C
4380	.a63a	20 02 ae	jsr $ae02	                jsr LA9CA
4382	.a63d					LA177:
4383	.a63d	a9 08		lda #$08	                lda #$08
4384	.a63f	14 e2		trb $e2		                trb $E2
4385	.a641					LA17B:
4386	.a641	60		rts		                rts

4388	.a642					LA17C:
4389	.a642	48		pha		                pha
4391	.a643	ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4392	.a646	f0 09		beq $a651	                beq LA18B
4394	.a648	20 09 f5	jsr $f509	                jsr LF6FC
4395	.a64b	20 0e f5	jsr $f50e	                jsr LF701
4396	.a64e	b8		clv		                clv
4397	.a64f	b0 50		bcs $a6a1	                bcs LA1DB
4398	.a651					LA18B:
4399	.a651	20 e7 aa	jsr $aae7	                jsr LA678
4400	.a654	ad c6 03	lda $03c6	                lda $03C6
4401	.a657	85 b4		sta $b4		                sta $B4
4402	.a659	ad c7 03	lda $03c7	                lda $03C7
4403	.a65c	85 b5		sta $b5		                sta $B5
4404	.a65e	a2 ff		ldx #$ff	                ldx #$FF
4405	.a660	8e df 03	stx $03df	                stx $03DF
4406	.a663	64 ba		stz $ba		                stz $BA
4407	.a665	80 16		bra $a67d	                bra LA1B7

4409	.a667					LA1A1:
4411	.a667	ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4412	.a66a	f0 37		beq $a6a3	                beq LA1DD
4414	.a66c					LA1A6:
4415	.a66c	20 24 f5	jsr $f524	                jsr LF717
4416	.a66f					LA1A9:
4417	.a66f	a9 ff		lda #$ff	                lda #$FF
4418	.a671	8d c6 03	sta $03c6	                sta $03C6
4419	.a674	8d c7 03	sta $03c7	                sta $03C7
4420	.a677					LA1B1:
4421	.a677	20 6d ae	jsr $ae6d	                jsr LAA35
4422	.a67a	20 e7 aa	jsr $aae7	                jsr LA678
4423	.a67d					LA1B7:
4425	.a67d	ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4426	.a680	f0 02		beq $a684	                beq LA1BE
4428	.a682	50 1d		bvc $a6a1	                bvc LA1DB
4429	.a684					LA1BE:
4430	.a684	68		pla		                pla
4431	.a685	48		pha		                pha
4432	.a686	f0 1b		beq $a6a3	                beq LA1DD
4433	.a688	20 9e ad	jsr $ad9e	                jsr LA95C
4434	.a68b	d0 da		bne $a667	                bne LA1A1
4435	.a68d	a9 30		lda #$30	                lda #$30
4436	.a68f	25 bb		and $bb		                and $BB
4437	.a691	f0 0e		beq $a6a1	                beq LA1DB
4438	.a693	ad c6 03	lda $03c6	                lda $03C6
4439	.a696	c5 b6		cmp $b6		                cmp $B6
4440	.a698	d0 cd		bne $a667	                bne LA1A1
4441	.a69a	ad c7 03	lda $03c7	                lda $03C7
4442	.a69d	c5 b7		cmp $b7		                cmp $B7
4443	.a69f	d0 c6		bne $a667	                bne LA1A1
4444	.a6a1					LA1DB:
4445	.a6a1	68		pla		                pla
4446	.a6a2	60		rts		                rts

4448	.a6a3					LA1DD:
4449	.a6a3	50 05		bvc $a6aa	                bvc LA1E4
4450	.a6a5	a9 ff		lda #$ff	                lda #$FF
4451	.a6a7	20 20 ab	jsr $ab20	                jsr LA6D4
4452	.a6aa					LA1E4:
4453	.a6aa	a2 00		ldx #$00	                ldx #$00
4454	.a6ac	20 06 ad	jsr $ad06	                jsr LA8C4
4456	.a6af	ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4457	.a6b2	f0 04		beq $a6b8	                beq LA1F2
4459	.a6b4	24 bb		bit $bb		                bit $BB
4460	.a6b6	50 b4		bvc $a66c	                bvc LA1A6
4461	.a6b8					LA1F2:
4462	.a6b8	2c ca 03	bit $03ca	                bit $03CA
4463	.a6bb	30 b2		bmi $a66f	                bmi LA1A9
4464	.a6bd	80 b8		bra $a677	                bra LA1B1

4466						; CFS/RFS OSFIND HANDLER
4467						; ======================
4468	.a6bf					osfindTapeOrROM:
4469	.a6bf	85 bc		sta $bc		                sta $BC
4470	.a6c1	da		phx		                phx
4471	.a6c2	5a		phy		                phy
4472	.a6c3	09 00		ora #$00	                ora #$00
4473	.a6c5	d0 1f		bne $a6e6	                bne LA220
4474	.a6c7	98		tya		                tya
4475	.a6c8	d0 0e		bne $a6d8	                bne LA212
4477	.a6ca	ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4478	.a6cd	d0 03		bne $a6d2	                bne LA20C
4479	.a6cf	20 62 a7	jsr $a762	                jsr LA29C
4481	.a6d2					LA20C:
4482	.a6d2	a9 01		lda #$01	                lda #$01
4483	.a6d4	14 e2		trb $e2		                trb $E2
4487	.a6d6	80 0c		bra $a6e4	                bra LA21E
4489	.a6d8					LA212:
4490	.a6d8	4a		lsr a		                lsr a
4491	.a6d9	b0 f7		bcs $a6d2	                bcs LA20C
4493	.a6db	4a		lsr a		                lsr a
4494	.a6dc	b0 03		bcs $a6e1	                bcs LA21B
4496	.a6de	4c b9 ae	jmp $aeb9	                jmp LAA81

4499	.a6e1					LA21B:
4500	.a6e1	20 62 a7	jsr $a762	                jsr LA29C
4501	.a6e4					LA21E:
4502	.a6e4	80 77		bra $a75d	                bra LA297

4505	.a6e6					LA220:
4506	.a6e6	20 4d a5	jsr $a54d	                jsr LA06B
4507	.a6e9	24 bc		bit $bc		                bit $BC
4508	.a6eb	50 39		bvc $a726	                bvc LA260
4509	.a6ed	9c 9e 03	stz $039e	                stz $039E
4510	.a6f0	9c dd 03	stz $03dd	                stz $03DD
4511	.a6f3	9c de 03	stz $03de	                stz $03DE
4512	.a6f6	a9 c1		lda #$c1	                lda #$C1
4513	.a6f8	14 e2		trb $e2		                trb $E2
4514	.a6fa	20 1e ae	jsr $ae1e	                jsr LA9E6
4515	.a6fd	08		php		                php
4516	.a6fe	20 71 a9	jsr $a971	                jsr LA502
4517	.a701	20 26 aa	jsr $aa26	                jsr LA5B7
4518	.a704	28		plp		                plp
4519	.a705	a2 ff		ldx #$ff	                ldx #$FF
4520	.a707					LA241:
4521	.a707	e8		inx		                inx
4522	.a708	bd b2 03	lda $03b2,x	                lda $03B2,x
4523	.a70b	9d a7 03	sta $03a7,x	                sta $03A7,x
4524	.a70e	d0 f7		bne $a707	                bne LA241
4525	.a710	1a		inc a		                inc a
4526	.a711	04 e2		tsb $e2		                tsb $E2
4527	.a713	ad e9 02	lda $02e9	                lda tapeInputCurrentBlockSize+0
4528	.a716	0d ea 02	ora $02ea	                ora tapeInputCurrentBlockSize+1
4529	.a719	d0 04		bne $a71f	                bne LA259
4530	.a71b	a9 40		lda #$40	                lda #$40
4531	.a71d	04 e2		tsb $e2		                tsb $E2
4532	.a71f					LA259:
4539	.a71f	a9 01		lda #$01	                lda #$01
4540	.a721	0d 47 02	ora $0247	                ora cfsRFSFSSwitch
4541	.a724	d0 35		bne $a75b	                bne LA295
4542	.a726					LA260:
4543	.a726	8a		txa		                txa
4544	.a727	d0 03		bne $a72c	                bne LA266
4545	.a729	4c 4e f3	jmp $f34e	                jmp badStringError

4547	.a72c					LA266:
4548	.a72c	a2 ff		ldx #$ff	                ldx #$FF
4549	.a72e					LA268:
4550	.a72e	e8		inx		                inx
4551	.a72f	bd d2 03	lda $03d2,x	                lda $03D2,x
4552	.a732	9d 80 03	sta $0380,x	                sta $0380,x
4553	.a735	d0 f7		bne $a72e	                bne LA268
4554	.a737	3a		dec a		                dec a
4555	.a738	a2 08		ldx #$08	                ldx #$08
4556	.a73a					LA274:
4557	.a73a	9d 8b 03	sta $038b,x	                sta $038B,x
4558	.a73d	ca		dex		                dex
4559	.a73e	d0 fa		bne $a73a	                bne LA274
4560	.a740	8a		txa		                txa
4561	.a741	a2 14		ldx #$14	                ldx #$14
4562	.a743					LA27D:
4563	.a743	9d 80 03	sta $0380,x	                sta $0380,x
4564	.a746	e8		inx		                inx
4565	.a747	e0 1e		cpx #$1e	                cpx #$1E
4566	.a749	d0 f8		bne $a743	                bne LA27D
4567	.a74b	2e 97 03	rol $0397	                rol $0397
4568	.a74e	20 2b ae	jsr $ae2b	                jsr LA9F3
4569	.a751	20 64 ac	jsr $ac64	                jsr LA822
4570	.a754	20 fd ad	jsr $adfd	                jsr LA9BB
4571	.a757	a9 02		lda #$02	                lda #$02
4572	.a759	04 e2		tsb $e2		                tsb $E2
4574	.a75b					LA295:
4575	.a75b	85 bc		sta $bc		                sta $BC
4576	.a75d					LA297:
4577	.a75d	7a		ply		                ply
4578	.a75e	fa		plx		                plx
4579	.a75f	a5 bc		lda $bc		                lda $BC
4580	.a761					LA29B:
4581	.a761	60		rts		                rts

4584	.a762					LA29C:
4585	.a762	a9 02		lda #$02	                lda #$02
4586	.a764	25 e2		and $e2		                and $E2
4587	.a766	f0 f9		beq $a761	                beq LA29B
4588	.a768	9c 97 03	stz $0397	                stz $0397
4589	.a76b	a9 80		lda #$80	                lda #$80
4590	.a76d	ae 9d 03	ldx $039d	                ldx $039D
4591	.a770	8e 96 03	stx $0396	                stx $0396
4592	.a773	8d 98 03	sta $0398	                sta $0398
4593	.a776	20 7e a7	jsr $a77e	                jsr LA2B8
4594	.a779	a9 02		lda #$02	                lda #$02
4595	.a77b	14 e2		trb $e2		                trb $E2
4596	.a77d	60		rts		                rts

4598	.a77e					LA2B8:
4599	.a77e	20 1e ae	jsr $ae1e	                jsr LA9E6
4600	.a781	a2 11		ldx #$11	                ldx #$11
4601	.a783					LA2BD:
4602	.a783	bd 8c 03	lda $038c,x	                lda $038C,x
4603	.a786	9d be 03	sta $03be,x	                sta $03BE,x
4604	.a789	ca		dex		                dex
4605	.a78a	10 f7		bpl $a783	                bpl LA2BD
4606	.a78c	86 b2		stx $b2		                stx $B2
4607	.a78e	86 b3		stx $b3		                stx $B3
4608	.a790	64 b0		stz $b0		                stz $B0
4609	.a792	a9 09		lda #$09	                lda #$09
4610	.a794	85 b1		sta $b1		                sta $B1
4611	.a796	a2 7f		ldx #$7f	                ldx #$7F
4612	.a798	20 85 ae	jsr $ae85	                jsr LAA4D
4613	.a79b	8d df 03	sta $03df	                sta $03DF
4614	.a79e	20 92 ae	jsr $ae92	                jsr LAA5A
4615	.a7a1	20 d8 ae	jsr $aed8	                jsr LAAA0
4616	.a7a4	20 35 ab	jsr $ab35	                jsr LA6E9
4617	.a7a7	ee 94 03	inc $0394	                inc $0394
4618	.a7aa	d0 03		bne $a7af	                bne LA2E9
4619	.a7ac	ee 95 03	inc $0395	                inc $0395
4620	.a7af					LA2E9:
4621	.a7af	60		rts		                rts

4624	.a7b0					bputTapeOrROM:
4625	.a7b0	da		phx		                phx
4626	.a7b1	5a		phy		                phy
4627	.a7b2	a9 01		lda #$01	                lda #$01
4628	.a7b4					LA2EE:
4629	.a7b4	20 a0 ae	jsr $aea0	                jsr LAA68
4630	.a7b7	a5 e2		lda $e2		                lda $E2
4631	.a7b9	0a		asl a		                asl a
4632	.a7ba	b0 4d		bcs $a809	                bcs LA343
4633	.a7bc	0a		asl a		                asl a
4634	.a7bd	90 08		bcc $a7c7	                bcc LA301
4635	.a7bf	a9 80		lda #$80	                lda #$80
4636	.a7c1	04 e2		tsb $e2		                tsb $E2
4637	.a7c3	a9 fe		lda #$fe	                lda #$FE
4638	.a7c5	b0 3a		bcs $a801	                bcs LA33B
4639	.a7c7					LA301:
4640	.a7c7	ae 9e 03	ldx $039e	                ldx $039E
4641	.a7ca	e8		inx		                inx
4642	.a7cb	ec e9 02	cpx $02e9	                cpx tapeInputCurrentBlockSize+0
4643	.a7ce	d0 2c		bne $a7fc	                bne LA336
4644	.a7d0	2c eb 02	bit $02eb	                bit blockFlagOfCurrentlyResidentBlock
4645	.a7d3	30 23		bmi $a7f8	                bmi LA332
4646	.a7d5	ad ec 02	lda $02ec	                lda lastCharacterOfCurrentlyResidentBlock
4647	.a7d8	48		pha		                pha
4648	.a7d9	20 1e ae	jsr $ae1e	                jsr LA9E6
4649	.a7dc	08		php		                php
4650	.a7dd	20 1e aa	jsr $aa1e	                jsr LA5AF
4651	.a7e0	28		plp		                plp
4652	.a7e1	68		pla		                pla
4653	.a7e2	85 bc		sta $bc		                sta $BC
4654	.a7e4	18		clc		                clc
4655	.a7e5	2c eb 02	bit $02eb	                bit blockFlagOfCurrentlyResidentBlock
4656	.a7e8	10 19		bpl $a803	                bpl LA33D
4657	.a7ea	ad e9 02	lda $02e9	                lda tapeInputCurrentBlockSize+0
4658	.a7ed	0d ea 02	ora $02ea	                ora tapeInputCurrentBlockSize+1
4659	.a7f0	d0 11		bne $a803	                bne LA33D
4660	.a7f2	a9 40		lda #$40	                lda #$40
4661	.a7f4	04 e2		tsb $e2		                tsb $E2
4662	.a7f6	80 0b		bra $a803	                bra LA33D

4664	.a7f8					LA332:
4665	.a7f8	a9 40		lda #$40	                lda #$40
4666	.a7fa	04 e2		tsb $e2		                tsb $E2
4667	.a7fc					LA336:
4668	.a7fc	ca		dex		                dex
4669	.a7fd	18		clc		                clc
4670	.a7fe	bd 00 0a	lda $0a00,x	                lda $0A00,x
4671	.a801					LA33B:
4672	.a801	85 bc		sta $bc		                sta $BC
4673	.a803					LA33D:
4674	.a803	ee 9e 03	inc $039e	                inc $039E
4675	.a806	4c 5d a7	jmp $a75d	                jmp LA297

4677	.a809					LA343:
4678	.a809	20 ff ae	jsr $aeff	                jsr doFollowingError
4679	>a80c	df 45 4f 46 00			                .text $df,"EOF",0

4692	.a811					bgetTapeOrROM:
4693	.a811	85 c4		sta $c4		                sta $C4
4694	.a813	da		phx		                phx
4695	.a814	5a		phy		                phy
4696	.a815	a9 02		lda #$02	                lda #$02
4697	.a817	20 a0 ae	jsr $aea0	                jsr LAA68
4698	.a81a	ae 9d 03	ldx $039d	                ldx $039D
4699	.a81d	a5 c4		lda $c4		                lda $C4
4700	.a81f	9d 00 09	sta $0900,x	                sta $0900,x
4701	.a822	e8		inx		                inx
4702	.a823	d0 06		bne $a82b	                bne LA365
4703	.a825	20 7e a7	jsr $a77e	                jsr LA2B8
4704	.a828	20 fd ad	jsr $adfd	                jsr LA9BB
4705	.a82b					LA365:
4706	.a82b	ee 9d 03	inc $039d	                inc $039D
4707	.a82e	a5 c4		lda $c4		                lda $C4
4708	.a830	4c 5b a7	jmp $a75b	                jmp LA295

4712						; TAPE/ROM OSGBPB handler
4713						; =======================
4714	.a833					osgbpbTapeOrROM:
4715	.a833	4a		lsr a		                lsr a                        ; Odd numbered calls - change PTR - exit with A=changed, SEC
4716	.a834	b0 06		bcs $a83c	                bcs LA376
4717	.a836	f0 04		beq $a83c	                beq LA376                    ; OSGBPB 0 - exit with A=unchanged, SEC
4718	.a838	c9 03		cmp #$03	                cmp #$03                     ; function/2<3 - function<6 - function 2 and 4 - jump to do
4719	.a83a	90 02		bcc $a83e	                bcc LA378
4720	.a83c					LA376:
4721	.a83c	38		sec		                sec
4722	.a83d	60		rts		                rts

4725						; Call Return
4726						;  0    A=0   SEC                        - unsupported
4727						;  1    A=0   SEC  Write using new PTR   - unsupported
4728						;  2    A=         Write with current PTR
4729						;  3    A=1   SEC  Read with new PTR     - unsupported
4730						;  4    A=         Read with current PTR
4731						;  5+   A=A/2 SEC                        - unsupported

4733						; TAPE/ROM OSGBPB 2 and 4 - read/write with current PTR
4734						; -----------------------------------------------------
4735	.a83e					LA378:
4737	.a83e	4a		lsr a		                lsr a
4739	.a83f	86 cc		stx $cc		                stx $CC
4740	.a841	84 cd		sty $cd		                sty $CD
4741	.a843	a0 01		ldy #$01	                ldy #$01
4742	.a845	b1 cc		lda ($cc),y	                lda ($CC),y
4743	.a847	85 c8		sta $c8		                sta $C8                      ; address LSB
4744	.a849	c8		iny		                iny
4745	.a84a	b1 cc		lda ($cc),y	                lda ($CC),y
4746	.a84c	85 c9		sta $c9		                sta $C9                      ; address MSB
4782	.a84e	b2 cc		lda ($cc)	                lda ($CC)                    ; A=handle
4783	.a850	a8		tay		                tay                          ; Y=handle
4784	.a851	a9 01		lda #$01	                lda #$01
4789	.a853	08		php		                php                          ; save C
4790	.a854	69 00		adc #$00	                adc #$00
4792	.a856	20 c5 ae	jsr $aec5	                jsr LAA8D
4793	.a859	b0 04		bcs $a85f	                bcs LA3C1
4795	.a85b	28		plp		                plp                          ; restore C
4804	.a85c	4c b9 ae	jmp $aeb9	                jmp LAA81

4806	.a85f					LA3C1:
4808	.a85f	28		plp		                plp
4809	.a860	b0 22		bcs $a884	                bcs LA401
4811	.a862	24 e2		bit $e2		                bit $E2
4812	.a864	10 03		bpl $a869	                bpl LA3D3
4820	.a866	4c 09 a8	jmp $a809	                jmp LA343

4822	.a869					LA3D3:
4823	.a869	20 f2 ae	jsr $aef2	                jsr LAAE0
4824	.a86c	f0 15		beq $a883	                beq LA3F6
4825	.a86e	b2 cc		lda ($cc)	                lda ($CC)
4826	.a870	a8		tay		                tay
4827	.a871	20 b0 a7	jsr $a7b0	                jsr bputTapeOrROM
4828	.a874	b0 0d		bcs $a883	                bcs LA3F6
4838	.a876	92 c8		sta ($c8)	                sta ($C8)                    ; store the byte to I/O RAM
4839	.a878	e6 c8		inc $c8		                inc $C8                      ; next address...
4840	.a87a	d0 02		bne $a87e	                bne LA3F1
4841	.a87c	e6 c9		inc $c9		                inc $C9
4842	.a87e					LA3F1:
4843	.a87e	20 dc ae	jsr $aedc	                jsr LAACA
4844	.a881	80 e6		bra $a869	                bra LA3D3

4846	.a883					LA3F6:
4856	.a883	60		rts		                rts

4859	.a884					LA401:
4860	.a884	20 f2 ae	jsr $aef2	                jsr LAAE0
4861	.a887	f0 fa		beq $a883	                beq LA3F6
4862	.a889	b2 cc		lda ($cc)	                lda ($CC)
4863	.a88b	a8		tay		                tay

4873	.a88c	b2 c8		lda ($c8)	                lda ($C8)                    ; read the byte from I/O RAM
4874	.a88e	e6 c8		inc $c8		                inc $C8                      ; next address...
4875	.a890	d0 02		bne $a894	                bne LA41A
4876	.a892	e6 c9		inc $c9		                inc $C9
4877	.a894					LA41A:
4878	.a894	20 11 a8	jsr $a811	                jsr bgetTapeOrROM
4879	.a897	20 dc ae	jsr $aedc	                jsr LAACA
4880	.a89a	80 e8		bra $a884	                bra LA401

4883						; TAPE/ROM FSC 0 - *OPT
4884						; ---------------------
4885	.a89c					LA422:
4886	.a89c	8a		txa		                txa                          ; *OPT 0
4887	.a89d	f0 2e		beq $a8cd	                beq LA453
4888	.a89f	e0 03		cpx #$03	                cpx #$03                     ; *OPT 3
4889	.a8a1	f0 1f		beq $a8c2	                beq LA448
4890	.a8a3	c0 03		cpy #$03	                cpy #$03                     ; *OPT n,3+ - error Bad command (*BUG* should be Bad option)
4891	.a8a5	b0 06		bcs $a8ad	                bcs LA433
4892	.a8a7	ca		dex		                dex                          ; *OPT 1
4893	.a8a8	f0 06		beq $a8b0	                beq LA436
4894	.a8aa	ca		dex		                dex                          ; *OPT 2
4895	.a8ab	f0 0a		beq $a8b7	                beq LA43D
4896	.a8ad					LA433:
4897	.a8ad	4c 60 fb	jmp $fb60	                jmp badCommandError ; *OPT 4+ - error Bad command (*BUG* should be Bad option)

4899						; *OPT 1 - set message level
4900						; --------------------------
4901	.a8b0					LA436:
4902	.a8b0	a9 33		lda #$33	                lda #$33
4903	.a8b2	c8		iny		                iny
4904	.a8b3	c8		iny		                iny
4905	.a8b4	c8		iny		                iny
4906	.a8b5	80 02		bra $a8b9	                bra LA43F

4908						; *OPT 2 - set error response level
4909						; ---------------------------------
4910	.a8b7					LA43D:
4911	.a8b7	a9 cc		lda #$cc	                lda #$CC
4912	.a8b9					LA43F:
4913	.a8b9	c8		iny		                iny
4914	.a8ba	25 e3		and $e3		                and $E3
4915	.a8bc					LA442:
4916	.a8bc	19 d0 a8	ora $a8d0,y	                ora LA456,y
4917	.a8bf	85 e3		sta $e3		                sta $E3
4918	.a8c1	60		rts		                rts

4920						; *OPT 3 - set interblock gap
4921						; ---------------------------
4922	.a8c2					LA448:
4923	.a8c2	98		tya		                tya                          ; *OPT 3,128+ - set to default
4924	.a8c3	30 02		bmi $a8c7	                bmi LA44D    ;
4925	.a8c5	d0 02		bne $a8c9	                bne LA44F                    ; *OPT 3,<>0 - use setting
4926	.a8c7					LA44D:
4927	.a8c7	a9 19		lda #$19	                lda #$19                     ; *OPT 3,0 or *OPT 3,128+ - use default of 2.5 sec
4928	.a8c9					LA44F:
4929	.a8c9	8d d1 03	sta $03d1	                sta $03D1                    ; Set inter-block gap
4930	.a8cc	60		rts		                rts

4932	.a8cd					LA453:
4933	.a8cd	a8		tay		                tay
4934	.a8ce	80 ec		bra $a8bc	                bra LA442

4936	.a8d0					LA456:
4937						                ; LDA ($00,x)
4938						                ; EQUB $22
4939						                ; ORA ($00),y
4940						                ; DEY
4941						                ; CPY LC0C6
4942	>a8d0	a1				                .byte $A1
4943	>a8d1	00				                .byte $00
4944	>a8d2	22				                .byte $22
4945	>a8d3	11				                .byte $11
4946	>a8d4	00				                .byte $00
4947	>a8d5	88				                .byte $88
4948	>a8d6	cc				                .byte $CC

4951	.a8d7					LA45D:
4952	.a8d7	c6 c0		dec $c0		                dec $C0
4953	.a8d9	ad 47 02	lda $0247	                lda cfsRFSFSSwitch
4954	.a8dc	f0 07		beq $a8e5	                beq LA46B
4955	.a8de	20 1d f5	jsr $f51d	                jsr LF710
4956	.a8e1	a8		tay		                tay
4957	.a8e2	18		clc		                clc
4958	.a8e3	80 1a		bra $a8ff	                bra LA485

4960	.a8e5					LA46B:
4961	.a8e5	ad 08 fe	lda $fe08	                lda ACIA+0
4962	.a8e8	48		pha		                pha
4963	.a8e9	29 02		and #$02	                and #$02
4964	.a8eb	f0 0b		beq $a8f8	                beq LA47E
4965	.a8ed	a4 ca		ldy $ca		                ldy $CA
4966	.a8ef	f0 07		beq $a8f8	                beq LA47E
4967	.a8f1	68		pla		                pla
4968	.a8f2	a5 bd		lda $bd		                lda $BD
4969	.a8f4	8d 09 fe	sta $fe09	                sta ACIA+1
4970	.a8f7	60		rts		                rts

4972	.a8f8					LA47E:
4973	.a8f8	ac 09 fe	ldy $fe09	                ldy ACIA+1
4974	.a8fb	68		pla		                pla
4975	.a8fc	4a		lsr a		                lsr a
4976	.a8fd	4a		lsr a		                lsr a
4977	.a8fe	4a		lsr a		                lsr a
4978	.a8ff					LA485:
4979	.a8ff	a6 c2		ldx $c2		                ldx $C2
4980	.a901	f0 5c		beq $a95f	                beq LA4F0
4981	.a903	ca		dex		                dex
4982	.a904	d0 06		bne $a90c	                bne LA492
4983	.a906	90 57		bcc $a95f	                bcc LA4F0
4984	.a908	a0 02		ldy #$02	                ldy #$02
4985	.a90a	80 51		bra $a95d	                bra LA4EE

4988	.a90c					LA492:
4999	.a90c	ca		dex		                dex
5000	.a90d	d0 13		bne $a922	                bne LA4A8
5001	.a90f	b0 4e		bcs $a95f	                bcs LA4F0
5003	.a911	98		tya		                tya
5004	.a912	20 7c ae	jsr $ae7c	                jsr LAA44
5005	.a915	a0 03		ldy #$03	                ldy #$03
5006	.a917	c9 2a		cmp #$2a	                cmp #$2A
5007	.a919	f0 42		beq $a95d	                beq LA4EE
5008	.a91b	20 54 ae	jsr $ae54	                jsr LAA1C
5009	.a91e	a0 01		ldy #$01	                ldy #$01
5010	.a920	80 3b		bra $a95d	                bra LA4EE

5012	.a922					LA4A8:
5013	.a922	ca		dex		                dex
5014	.a923	d0 0a		bne $a92f	                bne LA4B5
5016	.a925	b0 03		bcs $a92a	                bcs LA4B0
5018	.a927	84 bd		sty $bd		                sty $BD
5019	.a929	60		rts		                rts

5022	.a92a					LA4B0:
5023	.a92a	a9 80		lda #$80	                lda #$80
5024	.a92c	85 c0		sta $c0		                sta $C0
5025	.a92e	60		rts		                rts

5028	.a92f					LA4B5:
5029	.a92f	ca		dex		                dex
5030	.a930	d0 1e		bne $a950	                bne LA4E1
5032	.a932	b0 24		bcs $a958	                bcs LA4E9
5034	.a934	98		tya		                tya
5035	.a935	20 18 ab	jsr $ab18	                jsr LA6A9
5036	.a938	a4 bc		ldy $bc		                ldy $BC
5037	.a93a	e6 bc		inc $bc		                inc $BC
5038	.a93c	24 bd		bit $bd		                bit $BD
5039	.a93e	30 02		bmi $a942	                bmi LA4D3
5049	.a940	91 b0		sta ($b0),y	                sta ($B0),y                  ; store byte to I/O RAM
5050	.a942					LA4D3:
5051	.a942	c8		iny		                iny
5052	.a943	cc c8 03	cpy $03c8	                cpy $03C8
5053	.a946	d0 17		bne $a95f	                bne LA4F0
5054	.a948	a9 01		lda #$01	                lda #$01
5055	.a94a	85 bc		sta $bc		                sta $BC
5056	.a94c	a0 05		ldy #$05	                ldy #$05
5057	.a94e	80 0d		bra $a95d	                bra LA4EE

5059	.a950					LA4E1:
5060	.a950	98		tya		                tya
5061	.a951	20 18 ab	jsr $ab18	                jsr LA6A9
5062	.a954	c6 bc		dec $bc		                dec $BC
5063	.a956	10 07		bpl $a95f	                bpl LA4F0
5065	.a958					LA4E9:
5066	.a958	20 4a ae	jsr $ae4a	                jsr resetACIA
5068	.a95b	a0 00		ldy #$00	                ldy #$00
5069	.a95d					LA4EE:
5070	.a95d	84 c2		sty $c2		                sty $C2
5071	.a95f					LA4F0:
5072	.a95f	60		rts		                rts

5074						; TAPE/ROM FSC 1 - =EOF
5075						; ---------------------
5076	.a960					LA4F1:
5077	.a960	48		pha		                pha
5078	.a961	5a		phy		                phy
5079	.a962	8a		txa		                txa
5080	.a963	a8		tay		                tay
5081	.a964	a9 03		lda #$03	                lda #$03                     ; Check if this channel is open for anything
5082	.a966	20 a0 ae	jsr $aea0	                jsr LAA68
5083	.a969	a5 e2		lda $e2		                lda $E2                      ; Get EOF flag
5084	.a96b	29 40		and #$40	                and #$40
5085	.a96d	aa		tax		                tax                          ; Return in X
5086	.a96e	7a		ply		                ply
5087	.a96f	68		pla		                pla
5088	.a970	60		rts		                rts

5090	.a971					LA502:
5091	.a971	64 b4		stz $b4		                stz $B4
5092	.a973	64 b5		stz $b5		                stz $B5
5093	.a975					LA506:
5094	.a975	46 ce		lsr $ce		                lsr $CE
5095	.a977	a5 b4		lda $b4		                lda $B4
5096	.a979	48		pha		                pha
5097	.a97a	85 b6		sta $b6		                sta $B6
5098	.a97c	a5 b5		lda $b5		                lda $B5
5099	.a97e	48		pha		                pha
5100	.a97f	85 b7		sta $b7		                sta $B7
5101	.a981	20 65 ad	jsr $ad65	                jsr LA923
5102	>a984	53 65 61 72 63 68 69 6e		                .text "Searching",13,0
	>a98c	67 0d 00
5103	.a98f	a9 ff		lda #$ff	                lda #$ff
5104	.a991	20 42 a6	jsr $a642	                jsr LA17C
5105	.a994	68		pla		                pla
5106	.a995	85 b5		sta $b5		                sta $B5
5107	.a997	68		pla		                pla
5108	.a998	85 b4		sta $b4		                sta $B4
5109	.a99a	a5 b6		lda $b6		                lda $B6
5110	.a99c	05 b7		ora $b7		                ora $B7
5111	.a99e	d0 33		bne $a9d3	                bne LA564
5112	.a9a0	64 b4		stz $b4		                stz $B4
5113	.a9a2	64 b5		stz $b5		                stz $B5
5115	.a9a4	ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5116	.a9a7	f0 21		beq $a9ca	                beq LA55B
5118	.a9a9	70 1f		bvs $a9ca	                bvs LA55B
5120	.a9ab	20 02 ae	jsr $ae02	                jsr LA9CA
5122	.a9ae	24 ce		bit $ce		                bit $CE
5123	.a9b0	50 0a		bvc $a9bc	                bvc notFoundError
5124	.a9b2	38		sec		                sec
5125	.a9b3					rtsA544:
5126	.a9b3	60		rts		                rts

5128						;-------------------------------------------------------------------------

5130	.a9b4					openFileForReading:
5131	.a9b4	a9 40		lda #$40	                lda #$40                     ;open for reading
5132	.a9b6	20 ce ff	jsr $ffce	                jsr OSFIND
5133	.a9b9	a8		tay		                tay
5134	.a9ba	d0 f7		bne $a9b3	                bne rtsA544
5135	.a9bc					notFoundError:
5136	.a9bc	20 ff ae	jsr $aeff	                jsr doFollowingError
5137	>a9bf	d6 4e 6f 74 20 66 6f 75		                .text $d6,"Not found",0
	>a9c7	6e 64 00

5139						;-------------------------------------------------------------------------

5141	.a9ca					LA55B:
5142	.a9ca	a5 c1		lda $c1		                lda $C1
5143	.a9cc	d0 05		bne $a9d3	                bne LA564
5144	.a9ce	a2 b1		ldx #$b1	                ldx #$B1
5145	.a9d0	20 85 ae	jsr $ae85	                jsr LAA4D
5146	.a9d3					LA564:
5147	.a9d3	a0 ff		ldy #$ff	                ldy #$FF
5148	.a9d5	8c df 03	sty $03df	                sty $03DF
5149	.a9d8	18		clc		                clc
5150	.a9d9	60		rts		                rts

5152	.a9da					LA56B:
5153	.a9da	f0 17		beq $a9f3	                beq LA584
5154	.a9dc	48		pha		                pha
5155	.a9dd	a9 07		lda #$07	                lda #fscFileHandleRange
5156	.a9df	20 9b f2	jsr $f29b	                jsr callFSCV
5157	.a9e2	68		pla		                pla
5158	.a9e3	18		clc		                clc
5159	.a9e4	08		php		                php
5160	.a9e5	78		sei		                sei
5161	.a9e6	85 fa		sta $fa		                sta $FA
5162	.a9e8	c4 fa		cpy $fa		                cpy $FA
5163	.a9ea	90 06		bcc $a9f2	                bcc LA583
5164	.a9ec	e4 fa		cpx $fa		                cpx $FA
5165	.a9ee	90 06		bcc $a9f6	                bcc LA587
5166	.a9f0	f0 04		beq $a9f6	                beq LA587
5167	.a9f2					LA583:
5168	.a9f2	28		plp		                plp
5169	.a9f3					LA584:
5170	.a9f3	68		pla		                pla
5171	.a9f4	68		pla		                pla
5172	.a9f5	60		rts		                rts

5174	.a9f6					LA587:
5175	.a9f6	28		plp		                plp
5176	.a9f7	a9 00		lda #$00	                lda #$00
5177	.a9f9	60		rts		                rts

5179	.a9fa					LA58B:
5180	.a9fa	ad 56 02	lda $0256	                lda execFileHandle
5181	.a9fd	20 da a9	jsr $a9da	                jsr LA56B
5182	.aa00					starEXEC:
5183	.aa00	08		php		                php
5184	.aa01	5a		phy		                phy
5185	.aa02	ac 56 02	ldy $0256	                ldy execFileHandle
5186	.aa05	8d 56 02	sta $0256	                sta execFileHandle
5187	.aa08	f0 03		beq $aa0d	                beq LA59E
5188	.aa0a	20 ce ff	jsr $ffce	                jsr OSFIND
5189	.aa0d					LA59E:
5190	.aa0d	4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
5191	.aa10	7a		ply		                ply
5192	.aa11	28		plp		                plp
5193	.aa12	f0 09		beq $aa1d	                beq LA5AE
5194	.aa14	0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
5195	.aa17	20 b4 a9	jsr $a9b4	                jsr openFileForReading
5196	.aa1a	8d 56 02	sta $0256	                sta execFileHandle
5197	.aa1d					LA5AE:
5198	.aa1d	60		rts		                rts

5200	.aa1e					LA5AF:
5201	.aa1e	a2 a6		ldx #$a6	                ldx #$A6
5202	.aa20	20 85 ae	jsr $ae85	                jsr LAA4D
5203	.aa23	20 e7 aa	jsr $aae7	                jsr LA678
5204	.aa26					LA5B7:
5205	.aa26	ad ca 03	lda $03ca	                lda $03CA
5206	.aa29	4a		lsr a		                lsr a
5207	.aa2a	90 03		bcc $aa2f	                bcc LA5C0
5208	.aa2c	4c ca a4	jmp $a4ca	                jmp L9FE3

5210	.aa2f					LA5C0:
5211	.aa2f	ad dd 03	lda $03dd	                lda $03DD
5212	.aa32	85 b4		sta $b4		                sta $B4
5213	.aa34	ad de 03	lda $03de	                lda $03DE
5214	.aa37	85 b5		sta $b5		                sta $B5
5215	.aa39	64 b0		stz $b0		                stz $B0
5216	.aa3b	a9 0a		lda #$0a	                lda #$0A
5217	.aa3d	85 b1		sta $b1		                sta $B1
5218	.aa3f	a9 ff		lda #$ff	                lda #$FF
5219	.aa41	85 b2		sta $b2		                sta $B2
5220	.aa43	85 b3		sta $b3		                sta $B3
5221	.aa45	20 1e ab	jsr $ab1e	                jsr LA6D2
5222	.aa48	20 e3 ac	jsr $ace3	                jsr LA8A1
5223	.aa4b	d0 25		bne $aa72	                bne LA603
5224	.aa4d	ad ff 0a	lda $0aff	                lda $0AFF
5225	.aa50	8d ec 02	sta $02ec	                sta lastCharacterOfCurrentlyResidentBlock
5226	.aa53	20 6d ae	jsr $ae6d	                jsr LAA35
5227	.aa56	8e dd 03	stx $03dd	                stx $03DD
5228	.aa59	8c de 03	sty $03de	                sty $03DE
5229	.aa5c	a2 02		ldx #$02	                ldx #$02
5230	.aa5e					LA5EF:
5231	.aa5e	bd c8 03	lda $03c8,x	                lda $03C8,x
5232	.aa61	9d e9 02	sta $02e9,x	                sta tapeInputCurrentBlockSize+0,x
5233	.aa64	ca		dex		                dex
5234	.aa65	10 f7		bpl $aa5e	                bpl LA5EF
5235	.aa67	2c eb 02	bit $02eb	                bit blockFlagOfCurrentlyResidentBlock
5236	.aa6a	10 03		bpl $aa6f	                bpl LA600
5237	.aa6c	20 3b a5	jsr $a53b	                jsr LA059
5238	.aa6f					LA600:
5239	.aa6f	4c fd ad	jmp $adfd	                jmp LA9C5

5241	.aa72					LA603:
5242	.aa72	20 75 a9	jsr $a975	                jsr LA506
5243	.aa75	80 af		bra $aa26	                bra LA5B7

5245	.aa77					LA608:
5246	.aa77	c9 2a		cmp #$2a	                cmp #'*'
5247	.aa79	f0 37		beq $aab2	                beq LA643
5248	.aa7b	c9 23		cmp #$23	                cmp #'#'
5249	.aa7d	d0 0f		bne $aa8e	                bne LA61F
5250	.aa7f	ee c6 03	inc $03c6	                inc $03C6
5251	.aa82	d0 03		bne $aa87	                bne LA618
5252	.aa84	ee c7 03	inc $03c7	                inc $03C7
5253	.aa87					LA618:
5254	.aa87	a2 ff		ldx #$ff	                ldx #$FF
5255	.aa89	2c 70 e3	bit $e370	                bit valueFF
5256	.aa8c	80 51		bra $aadf	                bra LA670

5258	.aa8e					LA61F:
5259	.aa8e	20 3d a6	jsr $a63d	                jsr LA177
5260	.aa91	20 ff ae	jsr $aeff	                jsr doFollowingError
5261	>aa94	d7				                .byte $D7
5262	>aa95	42 61 64 20 52 4f 4d		                .text "Bad ROM"
5263	>aa9c	00				                .byte 0

5265	.aa9d					LA62E:
5267	.aa9d	a0 ff		ldy #$ff	                ldy #$FF
5268	.aa9f	20 94 ae	jsr $ae94	                jsr LAA5C
5269	.aaa2	a9 01		lda #$01	                lda #$01
5270	.aaa4	85 c2		sta $c2		                sta $C2
5271	.aaa6	20 54 ae	jsr $ae54	                jsr LAA1C
5272	.aaa9					LA63A:
5273	.aaa9	20 c2 ac	jsr $acc2	                jsr LA880
5274	.aaac	a9 03		lda #$03	                lda #$03
5275	.aaae	c5 c2		cmp $c2		                cmp $C2
5276	.aab0	d0 f7		bne $aaa9	                bne LA63A
5278	.aab2					LA643:
5279	.aab2	20 7e ae	jsr $ae7e	                jsr LAA46
5280	.aab5					LA646:
5281	.aab5	20 03 ab	jsr $ab03	                jsr LA694
5282	.aab8	50 1a		bvc $aad4	                bvc LA665
5283	.aaba	99 b2 03	sta $03b2,y	                sta $03B2,y
5284	.aabd	f0 06		beq $aac5	                beq LA656
5285	.aabf	c8		iny		                iny
5286	.aac0	c0 0b		cpy #$0b	                cpy #$0B
5287	.aac2	d0 f1		bne $aab5	                bne LA646
5288	.aac4	88		dey		                dey
5289	.aac5					LA656:
5290	.aac5	a2 0c		ldx #$0c	                ldx #$0C
5291	.aac7					LA658:
5292	.aac7	20 03 ab	jsr $ab03	                jsr LA694
5293	.aaca	50 08		bvc $aad4	                bvc LA665
5294	.aacc	9d b2 03	sta $03b2,x	                sta $03B2,x
5295	.aacf	e8		inx		                inx
5296	.aad0	e0 1f		cpx #$1f	                cpx #$1F
5297	.aad2	d0 f3		bne $aac7	                bne LA658
5298	.aad4					LA665:
5299	.aad4	98		tya		                tya
5300	.aad5	aa		tax		                tax
5301	.aad6	9e b2 03	stz $03b2,x	                stz $03B2,x
5302	.aad9	a5 be		lda $be		                lda $BE
5303	.aadb	05 bf		ora $bf		                ora $BF
5304	.aadd	85 c1		sta $c1		                sta $C1
5305	.aadf					LA670:
5306	.aadf	20 7c ae	jsr $ae7c	                jsr LAA44
5307	.aae2	84 c2		sty $c2		                sty $C2
5308	.aae4	8a		txa		                txa
5312	.aae5	d0 4d		bne $ab34	                bne rtsAAC1
5314	.aae7					LA678:
5316	.aae7	ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5317	.aaea	f0 b1		beq $aa9d	                beq LA62E
5319	.aaec					LA67D:
5320	.aaec	20 1d f5	jsr $f51d	                jsr LF710
5321	.aaef	c9 2b		cmp #$2b	                cmp #$2B
5322	.aaf1	d0 84		bne $aa77	                bne LA608
5323	.aaf3	a9 08		lda #$08	                lda #$08
5324	.aaf5	25 e2		and $e2		                and $E2
5325	.aaf7	f0 03		beq $aafc	                beq LA68D
5326	.aaf9	20 3f a5	jsr $a53f	                jsr LA05D
5327	.aafc					LA68D:
5328	.aafc	20 0e f5	jsr $f50e	                jsr LF701
5329	.aaff	90 eb		bcc $aaec	                bcc LA67D
5330	.ab01	b8		clv		                clv
5331	.ab02	60		rts		                rts

5333	.ab03					LA694:
5335	.ab03	ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5336	.ab06	f0 0d		beq $ab15	                beq LA6A6
5338	.ab08	da		phx		                phx
5339	.ab09	5a		phy		                phy
5340	.ab0a	20 1d f5	jsr $f51d	                jsr LF710
5341	.ab0d	85 bd		sta $bd		                sta $BD
5342	.ab0f	a9 ff		lda #$ff	                lda #$FF
5343	.ab11	85 c0		sta $c0		                sta $C0
5344	.ab13	7a		ply		                ply
5345	.ab14	fa		plx		                plx
5346	.ab15					LA6A6:
5347	.ab15	20 ba ab	jsr $abba	                jsr LA778
5348	.ab18					LA6A9:
5374	.ab18					LA6CC:
5375	.ab18	60		rts		                rts

5378	.ab19					LA6CD:                                       ;AAA6 in MOS 5.00
5379	.ab19	20 b8 ab	jsr $abb8	                jsr LA776
5380	.ab1c	80 fa		bra $ab18	                bra LA6A9

5383	.ab1e					LA6D2:                                       ;AAAB in MOS 5.00
5384	.ab1e	a9 00		lda #$00	                lda #$00
5385	.ab20					LA6D4:
5386	.ab20	85 bd		sta $bd		                sta $BD
5387	.ab22	a2 00		ldx #$00	                ldx #$00
5388	.ab24	64 bc		stz $bc		                stz $BC
5389	.ab26	50 0a		bvc $ab32	                bvc LA6E6
5390	.ab28	ad c8 03	lda $03c8	                lda $03C8
5391	.ab2b	0d c9 03	ora $03c9	                ora $03C9
5392	.ab2e	f0 02		beq $ab32	                beq LA6E6
5393	.ab30	a2 04		ldx #$04	                ldx #$04
5394	.ab32					LA6E6:
5395	.ab32	86 c2		stx $c2		                stx $C2
5396	.ab34					rtsAAC1:
5397	.ab34	60		rts		                rts

5400	.ab35					LA6E9:                                       ;AAC2 in MOS 5.00
5401	.ab35	08		php		                php
5402	.ab36	a2 03		ldx #$03	                ldx #$03
5403	.ab38					LA6EC:
5404	.ab38	9e cb 03	stz $03cb,x	                stz $03CB,x
5405	.ab3b	ca		dex		                dex
5406	.ab3c	10 fa		bpl $ab38	                bpl LA6EC
5407	.ab3e	ad c6 03	lda $03c6	                lda $03C6
5408	.ab41	0d c7 03	ora $03c7	                ora $03C7
5409	.ab44	d0 05		bne $ab4b	                bne LA6FF
5410	.ab46	20 c6 ab	jsr $abc6	                jsr LA784
5411	.ab49	80 03		bra $ab4e	                bra LA702

5413	.ab4b					LA6FF:
5414	.ab4b	20 ca ab	jsr $abca	                jsr LA788
5415	.ab4e					LA702:
5416	.ab4e	a9 2a		lda #$2a	                lda #$2A
5417	.ab50	85 bd		sta $bd		                sta $BD
5418	.ab52	20 7c ae	jsr $ae7c	                jsr LAA44
5419	.ab55	20 4e ae	jsr $ae4e	                jsr LAA16
5420	.ab58	20 ba ab	jsr $abba	                jsr LA778
5421	.ab5b	88		dey		                dey
5422	.ab5c					LA710:
5423	.ab5c	c8		iny		                iny
5424	.ab5d	b9 d2 03	lda $03d2,y	                lda $03D2,y
5425	.ab60	99 b2 03	sta $03b2,y	                sta $03B2,y
5426	.ab63	20 19 ab	jsr $ab19	                jsr LA6CD
5427	.ab66	d0 f4		bne $ab5c	                bne LA710
5428	.ab68	a2 0c		ldx #$0c	                ldx #$0C
5429	.ab6a					LA71E:
5430	.ab6a	bd b2 03	lda $03b2,x	                lda $03B2,x
5431	.ab6d	20 19 ab	jsr $ab19	                jsr LA6CD
5432	.ab70	e8		inx		                inx
5433	.ab71	e0 1d		cpx #$1d	                cpx #$1D
5434	.ab73	d0 f5		bne $ab6a	                bne LA71E
5435	.ab75	20 b1 ab	jsr $abb1	                jsr LA76F
5436	.ab78	ad c8 03	lda $03c8	                lda $03C8
5437	.ab7b	0d c9 03	ora $03c9	                ora $03C9
5438	.ab7e	f0 11		beq $ab91	                beq LA74F
5439	.ab80	20 7e ae	jsr $ae7e	                jsr LAA46
5440	.ab83					LA737:
5448	.ab83	b1 b0		lda ($b0),y	                lda ($B0),y                  ; load from I/O RAM
5449	.ab85					LA743:
5450	.ab85	20 19 ab	jsr $ab19	                jsr LA6CD
5451	.ab88	c8		iny		                iny
5452	.ab89	cc c8 03	cpy $03c8	                cpy $03C8
5453	.ab8c	d0 f5		bne $ab83	                bne LA737
5454	.ab8e	20 b1 ab	jsr $abb1	                jsr LA76F
5455	.ab91					LA74F:
5456	.ab91	20 ba ab	jsr $abba	                jsr LA778
5457	.ab94	20 ba ab	jsr $abba	                jsr LA778
5458	.ab97	20 4a ae	jsr $ae4a	                jsr resetACIA
5459	.ab9a	a9 01		lda #$01	                lda #$01
5460	.ab9c	20 cc ab	jsr $abcc	                jsr LA78A
5461	.ab9f	28		plp		                plp
5462	.aba0	20 ed ab	jsr $abed	                jsr LA7AB
5463	.aba3	2c ca 03	bit $03ca	                bit $03CA
5464	.aba6	10 08		bpl $abb0	                bpl LA76E
5465	.aba8	08		php		                php
5466	.aba9	20 c6 ab	jsr $abc6	                jsr LA784
5467	.abac	20 38 a5	jsr $a538	                jsr LA056
5468	.abaf	28		plp		                plp
5469	.abb0					LA76E:
5470	.abb0	60		rts		                rts

5472	.abb1					LA76F:
5476	.abb1	a9 00		lda #$00	                lda #0
5478	.abb3	20 b8 ab	jsr $abb8	                jsr LA776
5482	.abb6	a9 00		lda #$00	                lda #0
5484	.abb8					LA776:
5485	.abb8	85 bd		sta $bd		                sta $BD

5488	.abba					LA778:
5489	.abba	20 c2 ac	jsr $acc2	                jsr LA880
5490	.abbd	24 c0		bit $c0		                bit $C0
5491	.abbf	10 f9		bpl $abba	                bpl LA778
5492	.abc1	64 c0		stz $c0		                stz $C0
5493	.abc3	a5 bd		lda $bd		                lda $BD
5494	.abc5	60		rts		                rts

5497	.abc6					LA784:
5498	.abc6	a9 32		lda #$32	                lda #$32
5499	.abc8	80 02		bra $abcc	                bra LA78A

5501	.abca					LA788:
5502	.abca	a5 c7		lda $c7		                lda $C7
5503	.abcc					LA78A:
5504	.abcc	a2 05		ldx #$05	                ldx #$05
5505	.abce					LA78C:
5506	.abce	8d 40 02	sta $0240	                sta cfsTimeoutCounter
5507	.abd1					LA78F:
5508	.abd1	20 c2 ac	jsr $acc2	                jsr LA880
5509	.abd4	2c 40 02	bit $0240	                bit cfsTimeoutCounter
5510	.abd7	10 f8		bpl $abd1	                bpl LA78F
5511	.abd9	ca		dex		                dex
5512	.abda	d0 f2		bne $abce	                bne LA78C
5513	.abdc	60		rts		                rts

5516	.abdd					LA79B:
5517	.abdd	ad c6 03	lda $03c6	                lda $03C6
5518	.abe0	0d c7 03	ora $03c7	                ora $03C7
5519	.abe3	f0 05		beq $abea	                beq LA7A8
5520	.abe5	2c df 03	bit $03df	                bit $03DF
5521	.abe8	10 03		bpl $abed	                bpl LA7AB
5522	.abea					LA7A8:
5523	.abea	20 3b a5	jsr $a53b	                jsr LA059
5524	.abed					LA7AB:
5525	.abed	a0 00		ldy #$00	                ldy #$00
5526	.abef	64 ba		stz $ba		                stz $BA
5527	.abf1	ad ca 03	lda $03ca	                lda $03CA
5528	.abf4	8d df 03	sta $03df	                sta $03DF
5529	.abf7	20 48 ef	jsr $ef48	                jsr LEF1B
5530	.abfa	f0 67		beq $ac63	                beq LA821
5531	.abfc	a9 0d		lda #$0d	                lda #$0D
5532	.abfe	20 ee ff	jsr $ffee	                jsr OSWRCH
5533	.ac01					LA7BF:
5534	.ac01	b9 b2 03	lda $03b2,y	                lda $03B2,y
5535	.ac04	f0 10		beq $ac16	                beq LA7D4
5536	.ac06	c9 20		cmp #$20	                cmp #$20
5537	.ac08	90 04		bcc $ac0e	                bcc LA7CC
5538	.ac0a	c9 7f		cmp #$7f	                cmp #$7F
5539	.ac0c	90 02		bcc $ac10	                bcc LA7CE
5540	.ac0e					LA7CC:
5541	.ac0e	a9 3f		lda #$3f	                lda #$3F
5542	.ac10					LA7CE:
5543	.ac10	20 ee ff	jsr $ffee	                jsr OSWRCH
5544	.ac13	c8		iny		                iny
5545	.ac14	d0 eb		bne $ac01	                bne LA7BF

5547	.ac16					LA7D4:
5549	.ac16	ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5550	.ac19	f0 04		beq $ac1f	                beq LA7DD
5552	.ac1b	24 bb		bit $bb		                bit $BB
5553	.ac1d	50 44		bvc $ac63	                bvc LA821
5554	.ac1f					LA7DD:
5555	.ac1f	20 f3 a3	jsr $a3f3	                jsr printSpace
5556	.ac22	c8		iny		                iny
5557	.ac23	c0 0b		cpy #$0b	                cpy #$0B
5558	.ac25	90 ef		bcc $ac16	                bcc LA7D4
5559	.ac27	ad c6 03	lda $03c6	                lda $03C6
5560	.ac2a	aa		tax		                tax
5561	.ac2b	20 ac ac	jsr $acac	                jsr printHexByte
5562	.ac2e	2c ca 03	bit $03ca	                bit $03CA
5563	.ac31	10 30		bpl $ac63	                bpl LA821
5564	.ac33	8a		txa		                txa
5565	.ac34	18		clc		                clc
5566	.ac35	6d c9 03	adc $03c9	                adc $03C9
5567	.ac38	20 a7 ac	jsr $aca7	                jsr printSpaceThenPrintHexByte
5568	.ac3b					LA7F9:
5569	.ac3b	ad c8 03	lda $03c8	                lda $03C8
5570	.ac3e	20 ac ac	jsr $acac	                jsr printHexByte
5571	.ac41	24 bb		bit $bb		                bit $BB
5572	.ac43	50 1e		bvc $ac63	                bvc LA821
5573	.ac45	a2 04		ldx #$04	                ldx #$04
5574	.ac47					LA805:
5575	.ac47	20 f3 a3	jsr $a3f3	                jsr printSpace
5576	.ac4a	ca		dex		                dex
5577	.ac4b	d0 fa		bne $ac47	                bne LA805
5578	.ac4d	a2 0f		ldx #$0f	                ldx #$0F
5579	.ac4f	20 57 ac	jsr $ac57	                jsr LA815
5580	.ac52	20 f3 a3	jsr $a3f3	                jsr printSpace
5581	.ac55	a2 13		ldx #$13	                ldx #$13
5582	.ac57					LA815:
5583	.ac57	a0 04		ldy #$04	                ldy #$04
5584	.ac59					LA817:
5585	.ac59	bd b2 03	lda $03b2,x	                lda $03B2,x
5586	.ac5c	20 ac ac	jsr $acac	                jsr printHexByte
5587	.ac5f	ca		dex		                dex
5588	.ac60	88		dey		                dey
5589	.ac61	d0 f6		bne $ac59	                bne LA817
5590	.ac63					LA821:
5591	.ac63	60		rts		                rts

5594	.ac64					LA822:
5595	.ac64	ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5596	.ac67	f0 06		beq $ac6f	                beq LA82D
5597	.ac69	20 02 ae	jsr $ae02	                jsr LA9CA
5598	.ac6c	4c 60 fb	jmp $fb60	                jmp badCommandError

5600	.ac6f					LA82D:
5601	.ac6f	20 92 ae	jsr $ae92	                jsr LAA5A
5602	.ac72	20 d8 ae	jsr $aed8	                jsr LAAA0
5603	.ac75	20 48 ef	jsr $ef48	                jsr LEF1B
5604	.ac78	f0 e9		beq $ac63	                beq LA821
5605	.ac7a	20 65 ad	jsr $ad65	                jsr LA923
5606	>ac7d	52 45 43 4f 52 44 20 74		                .text "RECORD then RETURN"
	>ac85	68 65 6e 20 52 45 54 55 52 4e
5607	>ac8f	00				                .byte $00

5609	.ac90					LA84E:
5610	.ac90	20 c2 ac	jsr $acc2	                jsr LA880
5611	.ac93	20 e0 ff	jsr $ffe0	                jsr OSRDCH
5612	.ac96	c9 0d		cmp #$0d	                cmp #$0D
5613	.ac98	d0 f6		bne $ac90	                bne LA84E
5614	.ac9a	4c e7 ff	jmp $ffe7	                jmp OSNEWL

5617						;-------------------------------------------------------------------------

5623						;-------------------------------------------------------------------------

5626	.ac9d					LA85B:
5627	.ac9d	a2 fd		ldx #$fd	                ldx #$FD
5628	.ac9f					LA85D:
5629	.ac9f	f6 b4		inc $b4,x	                inc $B4,x
5630	.aca1	d0 03		bne $aca6	                bne LA864
5631	.aca3	e8		inx		                inx
5632	.aca4	d0 f9		bne $ac9f	                bne LA85D
5633	.aca6					LA864:
5634	.aca6	60		rts		                rts

5636						;-------------------------------------------------------------------------

5638	.aca7					printSpaceThenPrintHexByte:
5639	.aca7	48		pha		                pha
5640	.aca8	20 f3 a3	jsr $a3f3	                jsr printSpace
5641	.acab	68		pla		                pla
5642	.acac					printHexByte:
5643	.acac	48		pha		                pha
5647	.acad	4a		lsr a		                lsr a
5648	.acae	4a		lsr a		                lsr a
5649	.acaf	4a		lsr a		                lsr a
5650	.acb0	4a		lsr a		                lsr a
5652	.acb1	20 b5 ac	jsr $acb5	                jsr printHexDigit
5653	.acb4	68		pla		                pla
5654	.acb5					printHexDigit:
5655	.acb5	29 0f		and #$0f	                and #$0F
5656	.acb7	09 30		ora #$30	                ora #'0'                     ;+'0'
5657	.acb9	c9 3a		cmp #$3a	                cmp #'9'+1
5658	.acbb	90 02		bcc $acbf	                bcc LA87D                    ;taken if <='9'
5659	.acbd	69 06		adc #$06	                adc #'A'-('9'+1)-1           ;adjust - -1 because C set
5660	.acbf					LA87D:
5661	.acbf	4c ee ff	jmp $ffee	                jmp OSWRCH

5663						;-------------------------------------------------------------------------

5665	.acc2					LA880:
5666	.acc2	08		php		                php
5667	.acc3	24 eb		bit $eb		                bit $EB
5668	.acc5	30 04		bmi $accb	                bmi LA889
5669	.acc7	24 ff		bit $ff		                bit $FF
5670	.acc9	30 02		bmi $accd	                bmi LA88B
5671	.accb					LA889:
5672	.accb	28		plp		                plp
5673	.accc	60		rts		                rts

5675	.accd					LA88B:
5676	.accd	20 3d a6	jsr $a63d	                jsr LA177
5677	.acd0	20 fd ad	jsr $adfd	                jsr LA9BB
5678	.acd3					escapeError:
5679	.acd3	a9 7e		lda #$7e	                lda #$7E
5680	.acd5	20 f4 ff	jsr $fff4	                jsr OSBYTE
5681	.acd8	20 ff ae	jsr $aeff	                jsr doFollowingError
5682	>acdb	11				                .byte $11
5683	>acdc	45 73 63 61 70 65		                .text "Escape"
5684	>ace2	00				                .byte $00

5686						;-------------------------------------------------------------------------

5688	.ace3					LA8A1:
5689	.ace3	98		tya		                tya
5690	.ace4	f0 0d		beq $acf3	                beq LA8B1
5691	.ace6	20 65 ad	jsr $ad65	                jsr LA923
5692	>ace9	0d				                .byte $0D
5693	>acea	4c 6f 61 64 69 6e 67		                .text "Loading"
5694	>acf1	0d				                .byte $0D
5695	>acf2	00				                .byte $00
5696	.acf3					LA8B1:
5697	.acf3	64 ba		stz $ba		                stz $BA                      ; :
5698	.acf5	a2 ff		ldx #$ff	                ldx #$FF
5699	.acf7	a5 c1		lda $c1		                lda $C1
5700	.acf9	d0 0b		bne $ad06	                bne LA8C4
5701	.acfb	20 9e ad	jsr $ad9e	                jsr LA95C
5702	.acfe	08		php		                php
5703	.acff	a2 ff		ldx #$ff	                ldx #$FF
5704	.ad01	a0 23		ldy #$23	                ldy #<fileError
5705						                .cwarn (>fileError)!=(>dataError),"must be on same page"
5706	.ad03	28		plp		                plp
5707	.ad04	d0 16		bne $ad1c	                bne LA8DA
5708	.ad06					LA8C4:
5709	.ad06	a0 16		ldy #$16	                ldy #<dataError
5710	.ad08	a5 c1		lda $c1		                lda $C1
5711	.ad0a	d0 10		bne $ad1c	                bne LA8DA
5712	.ad0c	ad c6 03	lda $03c6	                lda $03C6
5713	.ad0f	c5 b4		cmp $b4		                cmp $B4
5714	.ad11	d0 07		bne $ad1a	                bne LA8D8
5715	.ad13	ad c7 03	lda $03c7	                lda $03C7
5716	.ad16	c5 b5		cmp $b5		                cmp $B5
5717	.ad18	f0 0b		beq $ad25	                beq LA8E3
5718	.ad1a					LA8D8:
5719	.ad1a	a0 30		ldy #$30	                ldy #<blockError
5720						                .cwarn (>blockError)!=(>dataError),"must be on same page"
5721	.ad1c					LA8DA:
5722	.ad1c	5a		phy		                phy
5723	.ad1d	da		phx		                phx
5724	.ad1e	20 ea ab	jsr $abea	                jsr LA7A8
5725	.ad21	fa		plx		                plx
5726	.ad22	7a		ply		                ply
5727	.ad23	80 10		bra $ad35	                bra LA8F3

5729	.ad25					LA8E3:
5730	.ad25	da		phx		                phx
5731	.ad26	20 dd ab	jsr $abdd	                jsr LA79B
5732	.ad29	20 e2 ad	jsr $ade2	                jsr LA9A0
5733	.ad2c	fa		plx		                plx
5734	.ad2d	a5 be		lda $be		                lda $BE
5735	.ad2f	05 bf		ora $bf		                ora $BF
5736	.ad31	f0 79		beq $adac	                beq LA96A
5737	.ad33	a0 16		ldy #$16	                ldy #<dataError
5738	.ad35					LA8F3:
5739	.ad35	a9 af		lda #$af	                lda #>dataError
5740	.ad37	c6 ba		dec $ba		                dec $BA
5741	.ad39	48		pha		                pha
5742	.ad3a	24 eb		bit $eb		                bit $EB
5743	.ad3c	30 0d		bmi $ad4b	                bmi LA909
5744	.ad3e	8a		txa		                txa
5746	.ad3f	2d 47 02	and $0247	                and cfsRFSFSSwitch
5747	.ad42					LA900:
5749	.ad42	d0 07		bne $ad4b	                bne LA909
5750	.ad44	8a		txa		                txa
5751	.ad45	29 11		and #$11	                and #$11
5752	.ad47	25 bb		and $bb		                and $BB
5753	.ad49	f0 0f		beq $ad5a	                beq LA918
5754	.ad4b					LA909:
5755	.ad4b	68		pla		                pla
5756	.ad4c	85 b9		sta $b9		                sta $B9
5757	.ad4e	84 b8		sty $b8		                sty $B8
5758	.ad50	20 fa a9	jsr $a9fa	                jsr LA58B
5759	.ad53	46 eb		lsr $eb		                lsr $EB
5760	.ad55	20 f3 ad	jsr $adf3	                jsr LA9B1
5761	.ad58	80 3d		bra $ad97	                bra LA955

5763	.ad5a					LA918:
5764	.ad5a	98		tya		                tya
5765	.ad5b	18		clc		                clc
5766	.ad5c	69 03		adc #$03	                adc #$03
5767	.ad5e	a8		tay		                tay
5768	.ad5f	90 03		bcc $ad64	                bcc LA922
5769	.ad61	68		pla		                pla
5770	.ad62	1a		inc a		                inc a
5771	.ad63	48		pha		                pha
5772	.ad64					LA922:
5773	.ad64	5a		phy		                phy
5774	.ad65					LA923:
5775	.ad65	20 48 ef	jsr $ef48	                jsr LEF1B
5776	.ad68	a8		tay		                tay

5778						;-------------------------------------------------------------------------
5779						;
5780						; Print 0-terminated message using address from stack.
5781						;
5782						; entry:
5783						;
5784						; S=[StrL; StrH] - where Str = (address of string)-1
5785						; Y = 0 to print message; otherwise, don't print message
5786						;
5787	.ad69					printFollowingMessage:                       ;
5788	.ad69	68		pla		                pla
5789	.ad6a	85 b8		sta $b8		                sta printMessageAddress+0
5790	.ad6c	68		pla		                pla
5791	.ad6d	85 b9		sta $b9		                sta printMessageAddress+1
5792	.ad6f	5a		phy		                phy                          ;save initial Y
5793	.ad70	98		tya		                tya                          ;Z=1 if Y=0
5794	.ad71	08		php		                php                          ;save Y=0 state
5795	.ad72					fetchNextChar:
5796	.ad72	e6 b8		inc $b8		                inc printMessageAddress+0
5797	.ad74	d0 02		bne $ad78	                bne +
5798	.ad76	e6 b9		inc $b9		                inc printMessageAddress+1
5799	.ad78					+
5800	.ad78	b2 b8		lda ($b8)	                lda (printMessageAddress)   ;fetch next char to print
5801	.ad7a	f0 13		beq $ad8f	                beq printingFinished        ;branch taken if last char
5802	.ad7c	28		plp		                plp                         ;restore Y=0 state
5803	.ad7d	08		php		                php                         ;save Y=0 state
5804	.ad7e	f0 f2		beq $ad72	                beq fetchNextChar ;branch taken if Y=0 - i.e., skip the
5805						                                  ;printing

5807						                ; printMessageAddress is in the $b0-$bf area, so it
5808						                ; needs saving in case there's a *SPOOL going on.
5809	.ad80	a4 b8		ldy $b8		                ldy printMessageAddress+0
5810	.ad82	5a		phy		                phy
5811	.ad83	a4 b9		ldy $b9		                ldy printMessageAddress+1
5812	.ad85	20 e3 ff	jsr $ffe3	                jsr OSASCI
5813	.ad88	84 b9		sty $b9		                sty printMessageAddress+1
5814	.ad8a	7a		ply		                ply
5815	.ad8b	84 b8		sty $b8		                sty printMessageAddress+0

5817	.ad8d	80 e3		bra $ad72	                bra fetchNextChar

5819	.ad8f					printingFinished:
5820	.ad8f	28		plp		                plp                          ;discard Y=0 state
5821	.ad90	e6 b8		inc $b8		                inc printMessageAddress+0
5822	.ad92	d0 02		bne $ad96	                bne +
5823	.ad94	e6 b9		inc $b9		                inc printMessageAddress+1
5824	.ad96					+
5825	.ad96	7a		ply		                ply                          ;restore initial Y
5826	.ad97					LA955:
5827	.ad97	6c b8 00	jmp ($00b8)	                jmp (printMessageAddress)

5829	.ad9a					alwaysPrintFollowingMessage:
5830	.ad9a	a0 01		ldy #$01	                ldy #$01
5831	.ad9c	80 cb		bra $ad69	                bra printFollowingMessage

5833						;-------------------------------------------------------------------------

5835	.ad9e					LA95C:
5836	.ad9e	a2 ff		ldx #$ff	                ldx #$FF
5837	.ada0					LA95E:
5838	.ada0	e8		inx		                inx
5839	.ada1	bd d2 03	lda $03d2,x	                lda $03D2,x
5840	.ada4	d0 07		bne $adad	                bne LA96B
5841	.ada6	8a		txa		                txa
5842	.ada7	f0 03		beq $adac	                beq LA96A
5843	.ada9	bd b2 03	lda $03b2,x	                lda $03B2,x
5844	.adac					LA96A:
5845	.adac	60		rts		                rts

5847	.adad					LA96B:
5848	.adad	20 9c eb	jsr $eb9c	                jsr isLetter
5849	.adb0	5d b2 03	eor $03b2,x	                eor $03B2,x
5850	.adb3	b0 02		bcs $adb7	                bcs LA975
5851	.adb5	29 df		and #$df	                and #$DF
5852	.adb7					LA975:
5853	.adb7	f0 e7		beq $ada0	                beq LA95E
5854	.adb9					LA977:
5855	.adb9	60		rts		                rts

5857	.adba					LA978:
5858	.adba	a5 ba		lda $ba		                lda $BA
5859	.adbc	f0 21		beq $addf	                beq LA99D
5860	.adbe	8a		txa		                txa
5861	.adbf	f0 1e		beq $addf	                beq LA99D
5862	.adc1	a9 22		lda #$22	                lda #$22
5863	.adc3	24 bb		bit $bb		                bit $BB
5864	.adc5	f0 18		beq $addf	                beq LA99D
5866	.adc7	20 4a ae	jsr $ae4a	                jsr resetACIA
5868	.adca	a8		tay		                tay
5869	.adcb	20 69 ad	jsr $ad69	                jsr printFollowingMessage
5870	>adce	0d				                .byte $0D
5871	>adcf	07				                .byte $07
5872	>add0	52 65 77 69 6e 64 20 74		                .text "Rewind tape"
	>add8	61 70 65
5873	>addb	0d				                .byte $0D
5874	>addc	0d				                .byte $0D
5875	>addd	00				                .byte $00
5876	.adde	60		rts		                rts

5878	.addf					LA99D:
5879	.addf	20 3f a5	jsr $a53f	                jsr LA05D
5880	.ade2					LA9A0:
5881	.ade2	a5 c2		lda $c2		                lda $C2
5882	.ade4	f0 d3		beq $adb9	                beq LA977
5883	.ade6	20 c2 ac	jsr $acc2	                jsr LA880
5885	.ade9	ad 47 02	lda $0247	                lda cfsRFSFSSwitch
5886	.adec	f0 f4		beq $ade2	                beq LA9A0
5891	.adee	20 d7 a8	jsr $a8d7	                jsr LA45D
5893	.adf1	80 ef		bra $ade2	                bra LA9A0

5895	.adf3					LA9B1:
5896	.adf3	20 48 ef	jsr $ef48	                jsr LEF1B
5897	.adf6	f0 05		beq $adfd	                beq LA9BB
5898	.adf8					LA9B6:
5899	.adf8	a9 07		lda #$07	                lda #$07
5900	.adfa	20 ee ff	jsr $ffee	                jsr OSWRCH
5901	.adfd					LA9BB:
5908	.adfd					LA9C5:
5910	.adfd	a2 00		ldx #$00	                ldx #$00
5911	.adff	20 99 ae	jsr $ae99	                jsr LAA61
5912	.ae02					LA9CA:
5913	.ae02	08		php		                php
5914	.ae03	78		sei		                sei
5915	.ae04	ad 82 02	lda $0282	                lda serialULARegister
5916	.ae07	8d 10 fe	sta $fe10	                sta SERPROC+0
5917	.ae0a	64 ea		stz $ea		                stz $EA
5918	.ae0c	80 01		bra $ae0f	                bra LA9D7

5920						;-------------------------------------------------------------------------

5922	.ae0e					resetACIAThenRewriteControlRegister:
5923	.ae0e	08		php		                php
5924	.ae0f					LA9D7:
5925	.ae0f	20 4a ae	jsr $ae4a	                jsr resetACIA
5926	.ae12	ad 50 02	lda $0250	                lda aciaControlRegister
5927	.ae15	4c 4c ea	jmp $ea4c	                jmp writeACIAControlRegisterAndCopy

5929						;-------------------------------------------------------------------------

5931	.ae18					LA9E0:
5932	.ae18	28		plp		                plp
5933	.ae19	24 ff		bit $ff		                bit $FF
5934	.ae1b	10 18		bpl $ae35	                bpl LA9FD
5936	.ae1d	60		rts		                rts

5938	.ae1e					LA9E6:
5939	.ae1e	a5 e3		lda $e3		                lda $E3
5940	.ae20	0a		asl a		                asl a
5941	.ae21	0a		asl a		                asl a
5942	.ae22	0a		asl a		                asl a
5943	.ae23	0a		asl a		                asl a
5944	.ae24	85 bb		sta $bb		                sta $BB
5948	.ae26	ad d1 03	lda $03d1	                lda $03D1
5949	.ae29	80 08		bra $ae33	                bra LA9FB

5952	.ae2b					LA9F3:
5953	.ae2b	a5 e3		lda $e3		                lda $E3
5954	.ae2d	29 f0		and #$f0	                and #$F0
5955	.ae2f	85 bb		sta $bb		                sta $BB
5957	.ae31	a9 06		lda #$06	                lda #$06
5958	.ae33					LA9FB:
5959	.ae33	85 c7		sta $c7		                sta $C7
5960	.ae35					LA9FD:
5961	.ae35	58		cli		                cli
5962	.ae36					LA9FE:
5963	.ae36	08		php		                php
5964	.ae37	78		sei		                sei
5965	.ae38					LAA00:
5966	.ae38	2c 4f 02	bit $024f	                bit rs423Busy
5967	.ae3b	10 db		bpl $ae18	                bpl LA9E0
5968	.ae3d	a5 ea		lda $ea		                lda $EA
5969	.ae3f	30 d7		bmi $ae18	                bmi LA9E0
5970	.ae41	a9 01		lda #$01	                lda #$01
5971	.ae43	85 ea		sta $ea		                sta $EA
5972	.ae45	20 4a ae	jsr $ae4a	                jsr resetACIA
5973	.ae48	28		plp		                plp
5975	.ae49	60		rts		                rts

5977						;-------------------------------------------------------------------------

5980	.ae4a					resetACIA:
5981	.ae4a	a9 03		lda #$03	                lda #ACIA.control.reset
5982	.ae4c	80 1b		bra $ae69	                bra writeACIAControlRegister

5985						;-------------------------------------------------------------------------

5987	.ae4e					LAA16:
5989	.ae4e	a9 30		lda #$30	                lda #$30
5990	.ae50	85 ca		sta $ca		                sta $CA
5991	.ae52	80 13		bra $ae67	                bra LAA2F
5993	.ae54					LAA1C:
5995	.ae54	a9 05		lda #$05	                lda #$05
5996	.ae56	8d 10 fe	sta $fe10	                sta SERPROC+0
5997	.ae59	a2 ff		ldx #$ff	                ldx #$FF
5998	.ae5b					LAA23:
5999	.ae5b	ca		dex		                dex
6000	.ae5c	d0 fd		bne $ae5b	                bne LAA23
6002	.ae5e	64 ca		stz $ca		                stz $CA
6004	.ae60	a9 d0		lda #$d0	                lda #$D0
6005	.ae62					LAA2A:
6006	.ae62	a0 85		ldy #$85	                ldy #$85
6007	.ae64	8c 10 fe	sty $fe10	                sty SERPROC+0
6008	.ae67					LAA2F:
6009	.ae67	05 c6		ora $c6		                ora $C6
6010	.ae69					writeACIAControlRegister:
6011	.ae69	8d 08 fe	sta $fe08	                sta ACIA+0
6013	.ae6c	60		rts		                rts

6015						;-------------------------------------------------------------------------

6017	.ae6d					LAA35:
6018	.ae6d	ae c6 03	ldx $03c6	                ldx $03C6
6019	.ae70	ac c7 03	ldy $03c7	                ldy $03C7
6020	.ae73	e8		inx		                inx
6021	.ae74	86 b4		stx $b4		                stx $B4
6022	.ae76	d0 01		bne $ae79	                bne LAA41
6023	.ae78	c8		iny		                iny
6024	.ae79					LAA41:
6025	.ae79	84 b5		sty $b5		                sty $B5
6026	.ae7b	60		rts		                rts

6028	.ae7c					LAA44:
6029	.ae7c	64 c0		stz $c0		                stz $C0
6030	.ae7e					LAA46:
6031	.ae7e	a0 00		ldy #$00	                ldy #$00
6032	.ae80	64 be		stz $be		                stz $BE
6033	.ae82	64 bf		stz $bf		                stz $BF
6034	.ae84	60		rts		                rts

6036	.ae85					LAA4D:
6037	.ae85	a0 ff		ldy #$ff	                ldy #$FF
6038	.ae87					LAA4F:
6039	.ae87	c8		iny		                iny
6040	.ae88	e8		inx		                inx
6041	.ae89	bd 00 03	lda $0300,x	                lda $0300,x
6042	.ae8c	99 d2 03	sta $03d2,y	                sta $03D2,y
6043	.ae8f	d0 f6		bne $ae87	                bne LAA4F
6044	.ae91	60		rts		                rts

6047	.ae92					LAA5A:
6048	.ae92	a0 00		ldy #$00	                ldy #$00
6049	.ae94					LAA5C:
6050	.ae94	58		cli		                cli
6051	.ae95	a2 01		ldx #$01	                ldx #$01
6052	.ae97	84 c3		sty $c3		                sty $C3
6053	.ae99					LAA61:
6054	.ae99	a9 89		lda #$89	                lda #$89
6055	.ae9b	a4 c3		ldy $c3		                ldy $C3
6056	.ae9d	4c f4 ff	jmp $fff4	                jmp OSBYTE

6059						; Check if TAPE/ROM channel is open
6060						; ---------------------------------
6061						; Y=handle to check, A=status mask to use
6062	.aea0					LAA68:
6063	.aea0	5a		phy		                phy
6064	.aea1	20 c5 ae	jsr $aec5	                jsr LAA8D
6065	.aea4	7a		ply		                ply
6069	.aea5	b0 30		bcs $aed7	                bcs rtsAA9F
6071	.aea7	cc 57 02	cpy $0257	                cpy spoolFileHandle                    ; Not SPOOL handle
6072	.aeaa	d0 05		bne $aeb1	                bne LAA79
6073	.aeac	9c 57 02	stz $0257	                stz spoolFileHandle                    ; Clear the SPOOL handle
6074	.aeaf	80 08		bra $aeb9	                bra LAA81
6075	.aeb1					LAA79:
6076	.aeb1	cc 56 02	cpy $0256	                cpy execFileHandle                    ; Not EXEC handle
6077	.aeb4	d0 03		bne $aeb9	                bne LAA81
6078	.aeb6	9c 56 02	stz $0256	                stz execFileHandle                    ; Clear the EXEC handle
6079	.aeb9					LAA81:
6080	.aeb9	20 ff ae	jsr $aeff	                jsr doFollowingError                    ; Generate error
6081	>aebc	de				                .byte $DE
6082	>aebd	43 68 61 6e 6e 65 6c		                .text "Channel"
6083	.aec4	00		brk #		                brk

6085	.aec5					LAA8D:
6086	.aec5	48		pha		                pha                          ; Toggle channel with CFS/RFS switch
6087	.aec6	98		tya		                tya
6091	.aec7	4d 47 02	eor $0247	                eor cfsRFSFSSwitch
6093	.aeca	a8		tay		                tay                          ; If CFS=unchanged, if RFS 1/2/3->3/0/1
6094	.aecb	68		pla		                pla
6095	.aecc	25 e2		and $e2		                and $E2                      ; Mask with open channels bitmask
6096	.aece	4a		lsr a		                lsr a                        ; Move 'input open if tested' into Carry
6097	.aecf	88		dey		                dey                          ; Exit if testing CFS#1 or RFS#3
6098	.aed0	f0 05		beq $aed7	                beq rtsAA9F
6099	.aed2	4a		lsr a		                lsr a                        ; Move 'output open if tested' into Carry
6100	.aed3	88		dey		                dey                          ; Exit if testing CFS#2
6101	.aed4	f0 01		beq $aed7	                beq rtsAA9F
6102	.aed6	18		clc		                clc                          ; Otherwise, Carry=Not Open
6103	.aed7					rtsAA9F:
6104	.aed7	60		rts		                rts

6107	.aed8					LAAA0:
6108	.aed8	a9 10		lda #$10	                lda #$10
6109	.aeda	80 86		bra $ae62	                bra LAA2A

6142	.aedc					LAACA:
6143	.aedc	a0 05		ldy #$05	                ldy #$05
6144	.aede					LAACC:
6145	.aede	b1 cc		lda ($cc),y	                lda ($CC),y
6146	.aee0	d0 07		bne $aee9	                bne LAAD7
6147	.aee2	c8		iny		                iny
6148	.aee3	c0 08		cpy #$08	                cpy #$08
6149	.aee5	90 f7		bcc $aede	                bcc LAACC
6150	.aee7					LAAD5:
6151	.aee7	b1 cc		lda ($cc),y	                lda ($CC),y
6152	.aee9					LAAD7:
6153	.aee9	3a		dec a		                dec a
6154	.aeea	91 cc		sta ($cc),y	                sta ($CC),y
6155	.aeec	88		dey		                dey
6156	.aeed	c0 05		cpy #$05	                cpy #$05
6157	.aeef	b0 f6		bcs $aee7	                bcs LAAD5
6158	.aef1	60		rts		                rts

6160	.aef2					LAAE0:
6161	.aef2	a0 08		ldy #$08	                ldy #$08
6162	.aef4	a9 00		lda #$00	                lda #$00
6163	.aef6					LAAE4:
6164	.aef6	11 cc		ora ($cc),y	                ora ($CC),y
6165	.aef8	88		dey		                dey
6166	.aef9	c0 05		cpy #$05	                cpy #$05
6167	.aefb	b0 f9		bcs $aef6	                bcs LAAE4
6168	.aefd	aa		tax		                tax
6169	.aefe	60		rts		                rts

6171	.aeff					doFollowingError:
6172	.aeff	78		sei		                sei
6173	.af00	68		pla		                pla
6174	.af01	85 fa		sta $fa		                sta SEIWKA+0
6175	.af03	68		pla		                pla
6176	.af04	85 fb		sta $fb		                sta SEIWKA+1
6177	.af06	9c 00 01	stz $0100	                stz $0100
6178	.af09	a0 00		ldy #$00	                ldy #$00
6179	.af0b					-
6180	.af0b	c8		iny		                iny
6181	.af0c	b1 fa		lda ($fa),y	                lda (SEIWKA),y
6182	.af0e	99 00 01	sta $0100,y	                sta $0100,y
6183	.af11	d0 f8		bne $af0b	                bne -
6184	.af13	4c 00 01	jmp $0100	                jmp $0100

6188						                .include "cfs_errors.s65"

:13	;******  Processing file: src/cfs_errors.s65

1						                ; The MOS code assumes all these error routines have
2						                ; the same MSB of their start address. (There's a
3						                ; .cerror that checks for this.) They all just fit
4						                ; into 32 bytes, so 32-byte alignment will do the
5						                ; trick.
6						                ;
7						                ; (The alignment directive doesn't take effect in any
8						                ; of the default MOS builds. It springs into action to
9						                ; accommodate modifications to other parts of the
10						                ; code.)

15	.af16					dataError:
16	.af16	20 ff ae	jsr $aeff	                jsr doFollowingError
17	>af19	d8 0d 44 61 74 61 3f 00		                .text $d8,13,"Data?",0
18	.af21	80 19		bra $af3c	                bra LAB2A

20	.af23					fileError:
21	.af23	20 ff ae	jsr $aeff	                jsr doFollowingError
22	>af26	db 0d 46 69 6c 65 3f 00		                .text $db,13,"File?",0
23	.af2e	80 0c		bra $af3c	                bra LAB2A

25	.af30					blockError:
26	.af30	20 ff ae	jsr $aeff	                jsr doFollowingError
27	>af33	da 0d 42 6c 6f 63 6b 3f		                .text $da,13,"Block?",0
	>af3b	00
28	.af3c					LAB2A:
29	.af3c	4c ba ad	jmp $adba	                jmp LA978

:5	;******  Return to file: src/terminal.s65

6948						                .include "ext.s65"

:14	;******  Processing file: src/ext.s65

1						; -*- comment-column:45; -*-

3	.af3f					plotEllipseOutline:
4						                ; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP1
5	.af3f	20 8a b0	jsr $b08a	                jsr     ellipseInitialisation
9	.af42	4c 48 af	jmp $af48	                jmp startEllipseOutline

12	.af45					ellipseOutlineLoop:
13	.af45	20 44 b1	jsr $b144	                jsr     updateEllipseIncrementally

15	.af48					startEllipseOutline:
16	.af48	a2 34		ldx #$34	                ldx     #VDUVariables.ew.pointC
17	.af4a	a0 3c		ldy #$3c	                ldy     #VDUVariables.ew.pointA
18	.af4c	20 cc d5	jsr $d5cc	                jsr     sortVDUVariableWords
20	.af4f	a2 38		ldx #$38	                ldx     #VDUVariables.ew.leftPoint
25	.af51	ad 39 03	lda $0339	                lda vduv.ew.leftPoint+1
27	.af54	8d 43 03	sta $0343	                sta     vduv.ew.currentOffsetX+1
32	.af57	ae 38 03	ldx $0338	                ldx vduv.ew.leftPoint+0

35	.af5a					ellipseOutlineContinueRowLoop:
36	.af5a	8e 42 03	stx $0342	                stx     vduv.ew.currentOffsetX+0
37	.af5d	20 7b b2	jsr $b27b	                jsr     outlineEllipsePlotOnePointAndReflection
38	.af60	e8		inx		                inx
39	.af61	d0 03		bne $af66	                bne     +
40	.af63	ee 43 03	inc $0343	                inc     vduv.ew.currentOffsetX+1
41	.af66					+
42	.af66	8a		txa		                txa
43	.af67	d9 00 03	cmp $0300,y	                cmp     vduv+0,y
44	.af6a	ad 43 03	lda $0343	                lda     vduv.ew.currentOffsetX+1
45	.af6d	f9 01 03	sbc $0301,y	                sbc     vduv+1,y
46	.af70	30 e8		bmi $af5a	                bmi     ellipseOutlineContinueRowLoop

78	.af72	ac 43 03	ldy $0343	                ldy vduv.ew.currentOffsetX+1
79	.af75	8a		txa		                txa
80	.af76	d0 01		bne $af79	                bne +
81	.af78	88		dey		                dey
82	.af79					+
83	.af79	ca		dex		                dex
84	.af7a	8e 34 03	stx $0334	                stx vduv.ew.pointC+0
85	.af7d	8c 35 03	sty $0335	                sty vduv.ew.pointC+1
86	.af80	8a		txa		                txa
87	.af81	cd 3a 03	cmp $033a	                cmp vduv.ew.rightPoint+0
88	.af84	98		tya		                tya
89	.af85	ed 3b 03	sbc $033b	                sbc vduv.ew.rightPoint+1
90	.af88	10 30		bpl $afba	                bpl LAF47
91	.af8a	a2 36		ldx #$36	                ldx #VDUVariables.ew.pointD
92	.af8c	a0 3e		ldy #$3e	                ldy #VDUVariables.ew.pointB
93	.af8e	20 cc d5	jsr $d5cc	                jsr sortVDUVariableWords
94	.af91	a0 34		ldy #$34	                ldy #VDUVariables.ew.pointC
95	.af93	20 cc d5	jsr $d5cc	                jsr sortVDUVariableWords
96	.af96	ad 3b 03	lda $033b	                lda vduv.ew.rightPoint+1
97	.af99	8d 43 03	sta $0343	                sta vduv.ew.currentOffsetX+1
98	.af9c	ad 3a 03	lda $033a	                lda vduv.ew.rightPoint+0
99	.af9f	aa		tax		                tax
100	.afa0					LAF2D:
101	.afa0	8e 42 03	stx $0342	                stx vduv.ew.currentOffsetX+0
102	.afa3					LAF30:
103	.afa3	20 7b b2	jsr $b27b	                jsr outlineEllipsePlotOnePointAndReflection
104	.afa6	8a		txa		                txa
105	.afa7	d0 03		bne $afac	                bne +
106	.afa9	ce 43 03	dec $0343	                dec vduv.ew.currentOffsetX+1
107	.afac					+
108	.afac	ca		dex		                dex
109	.afad	18		clc		                clc
110	.afae	8a		txa		                txa
111	.afaf	f9 00 03	sbc $0300,y	                sbc vduv+0,y
112	.afb2	ad 43 03	lda $0343	                lda vduv.ew.currentOffsetX+1
113	.afb5	f9 01 03	sbc $0301,y	                sbc vduv+1,y
114	.afb8	10 e6		bpl $afa0	                bpl LAF2D

116	.afba					LAF47:
117	.afba	ad 2f 03	lda $032f	                lda vduv.ew.halfHeightCounter+1 ; TODO can merge with
118						                                                ; code above...
119						                                                ; probably?
120	.afbd	10 86		bpl $af45	                bpl ellipseOutlineLoop
124	.afbf	4c d6 af	jmp $afd6	                jmp LBA7B

129						;-------------------------------------------------------------------------

131	.afc2					plotEllipseFilled:
132	.afc2	20 8a b0	jsr $b08a	                jsr     ellipseInitialisation
133	.afc5	80 03		bra $afca	                bra     startFilledEllipse

136	.afc7					filledEllipseLoop:
137	.afc7	20 44 b1	jsr $b144	                jsr     updateEllipseIncrementally

139	.afca					startFilledEllipse:
140	.afca	a2 3a		ldx #$3a	                ldx     #VDUVariables.ew.rightPoint
141	.afcc	a0 38		ldy #$38	                ldy     #VDUVariables.ew.leftPoint
142	.afce	20 e2 af	jsr $afe2	                jsr     fillEllipseOneRowAndReflection
143	.afd1	ad 2f 03	lda $032f	                lda     vduv.ew.halfHeightCounter+1
144	.afd4	10 f1		bpl $afc7	                bpl     filledEllipseLoop

146	.afd6					LBA7B:
147	.afd6	ee 4d 88	inc $884d	                inc     ellipseCountHeight+0
148	.afd9	d0 03		bne $afde	                bne     LBA83
149	.afdb	ee 4e 88	inc $884e	                inc     ellipseCountHeight+1

151	.afde					LBA83:
152	.afde	a2 3e		ldx #$3e	                ldx     #VDUVariables.ew.pointB
153	.afe0	a0 3c		ldy #$3c	                ldy     #VDUVariables.ew.pointA

155						; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP9
156	.afe2					fillEllipseOneRowAndReflection:
157	.afe2	da		phx		                phx
158	.afe3	5a		phy		                phy
159	.afe4	18		clc		                clc
160	.afe5	ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
161	.afe8	79 00 03	adc $0300,y	                adc     vduv+0,y
162	.afeb	8d 40 03	sta $0340	                sta     vduv.ew.pointE+0
163	.afee	ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
164	.aff1	79 01 03	adc $0301,y	                adc     vduv+1,y
165	.aff4	8d 41 03	sta $0341	                sta     vduv.ew.pointE+1
166	.aff7	18		clc		                clc
167	.aff8	ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
168	.affb	7d 00 03	adc $0300,x	                adc     vduv+0,x
169	.affe	8d 44 03	sta $0344	                sta     vduv.ew.plotPointX+0
170	.b001	ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
171	.b004	7d 01 03	adc $0301,x	                adc     vduv+1,x
172	.b007	8d 45 03	sta $0345	                sta     vduv.ew.plotPointX+1
173	.b00a	18		clc		                clc
174	.b00b	ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
175	.b00e	6d 4d 88	adc $884d	                adc     ellipseCountHeight+0
176	.b011	a8		tay		                tay
177	.b012	ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
178	.b015	6d 4e 88	adc $884e	                adc     ellipseCountHeight+1
179	.b018	20 59 b0	jsr $b059	                jsr     LBAFE
180	.b01b	7a		ply		                ply
181	.b01c	fa		plx		                plx
182	.b01d	ad 4d 88	lda $884d	                lda     ellipseCountHeight+0
183	.b020	0d 4e 88	ora $884e	                ora     ellipseCountHeight+1
184	.b023	f0 47		beq $b06c	                beq     rtsBB11
185	.b025	38		sec		                sec
186	.b026	ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
187	.b029	fd 00 03	sbc $0300,x	                sbc     vduv+0,x
188	.b02c	8d 40 03	sta $0340	                sta     vduv.ew.pointE+0
189	.b02f	ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
190	.b032	fd 01 03	sbc $0301,x	                sbc     vduv+1,x
191	.b035	8d 41 03	sta $0341	                sta     vduv.ew.pointE+1
192	.b038	38		sec		                sec
193	.b039	ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
194	.b03c	f9 00 03	sbc $0300,y	                sbc     vduv+0,y
195	.b03f	8d 44 03	sta $0344	                sta     vduv.ew.pointF+0
196	.b042	ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
197	.b045	f9 01 03	sbc $0301,y	                sbc     vduv+1,y
198	.b048	8d 45 03	sta $0345	                sta     vduv.ew.pointF+1
199	.b04b	38		sec		                sec
200	.b04c	ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
201	.b04f	ed 4d 88	sbc $884d	                sbc     ellipseCountHeight+0
202	.b052	a8		tay		                tay
203	.b053	ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
204	.b056	ed 4e 88	sbc $884e	                sbc     ellipseCountHeight+1

206	.b059					LBAFE:
207	.b059	8c 46 03	sty $0346	                sty     vduv.ew.plotPointY+0
208	.b05c	8c 42 03	sty $0342	                sty     vduv.ew.currentOffsetX+0
209	.b05f	8d 47 03	sta $0347	                sta     vduv.ew.plotPointY+1
210	.b062	8d 43 03	sta $0343	                sta     vduv.ew.currentOffsetX+1
211	.b065	a2 44		ldx #$44	                ldx     #VDUVariables.ew.pointF
212	.b067	a0 40		ldy #$40	                ldy     #VDUVariables.ew.pointE
213	.b069	4c e8 da	jmp $dae8	                jmp     LDAE8

219	.b06c					rtsBB11:
220	.b06c	60		rts		                rts

225	.b06d					LBB12:
226	.b06d	68		pla		                pla
227	.b06e	68		pla		                pla
228	.b06f	9c 4d 88	stz $884d	                stz     ellipseCountHeight+0
229	.b072	9c 4e 88	stz $884e	                stz     ellipseCountHeight+1
230	.b075	a2 29		ldx #$29	                ldx     #VDUVariables.ew.aspectRatio+1
231	.b077	a0 40		ldy #$40	                ldy     #VDUVariables.ew.pointE
232	.b079	20 55 b3	jsr $b355	                jsr     negateVDUVariableXIntoY
233	.b07c	a2 29		ldx #$29	                ldx     #VDUVariables.ew.aspectRatio+1
234	.b07e	a0 44		ldy #$44	                ldy     #VDUVariables.ew.pointF
235	.b080	20 0c c9	jsr $c90c	                jsr     copyTwoBytesWithinVDUVariables
236	.b083	a2 44		ldx #$44	                ldx     #VDUVariables.ew.pointF
237	.b085	a0 40		ldy #$40	                ldy     #VDUVariables.ew.pointE
238	.b087	4c e2 af	jmp $afe2	                jmp     fillEllipseOneRowAndReflection

240	.b08a					ellipseInitialisation:
241						                ; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP5
242	.b08a	a0 24		ldy #$24	                ldy     #VDUVariables.graphicsCursorPixelsX
243	.b08c	a2 14		ldx #$14	                ldx     #VDUVariables.oldGraphicsCursorPixelsX
244	.b08e	a9 29		lda #$29	                lda     #VDUVariables.ew.aspectRatio+1
245	.b090	20 78 d6	jsr $d678	                jsr     LD678
246	.b093	9c 28 03	stz $0328	                stz     vduv.ew.aspectRatio+0
247	.b096	a0 22		ldy #$22	                ldy     #VDUVariables.queueEnd-2
248	.b098	a2 16		ldx #$16	                ldx     #VDUVariables.oldGraphicsCursorPixelsY
249	.b09a	a9 2e		lda #$2e	                lda     #VDUVariables.ew.halfHeightCounter
250	.b09c	20 78 d6	jsr $d678	                jsr     LD678
251	.b09f	ad 2e 03	lda $032e	                lda     vduv.ew.halfHeightCounter+0
252	.b0a2	0d 2f 03	ora $032f	                ora     vduv.ew.halfHeightCounter+1
253	.b0a5	f0 c6		beq $b06d	                beq     LBB12
254	.b0a7	2a		rol a		                rol     a
255	.b0a8	8d 41 88	sta $8841	                sta     L8841
256	.b0ab	a0 20		ldy #$20	                ldy     #VDUVariables.queueEnd-4
257	.b0ad	a2 14		ldx #$14	                ldx     #VDUVariables.oldGraphicsCursorPixelsX
258	.b0af	a9 2c		lda #$2c	                lda     #VDUVariables.ew.shear+1
259	.b0b1	20 78 d6	jsr $d678	                jsr     LD678
260	.b0b4	9c 2b 03	stz $032b	                stz     vduv.ew.shear+0
261	.b0b7	2a		rol a		                rol     a
262	.b0b8	4d 41 88	eor $8841	                eor     ellipseSignFlag
263	.b0bb	29 01		and #$01	                and     #1
264	.b0bd	8d 41 88	sta $8841	                sta     ellipseSignFlag
265	.b0c0	a2 28		ldx #$28	                ldx     #VDUVariables.ew.aspectRatio
266	.b0c2	a0 2e		ldy #$2e	                ldy     #VDUVariables.ew.halfHeightCounter
267	.b0c4	20 de b2	jsr $b2de	                jsr     divide24By16Bits
268	.b0c7	a2 2b		ldx #$2b	                ldx     #VDUVariables.ew.shear
269	.b0c9	a0 2e		ldy #$2e	                ldy     #VDUVariables.ew.halfHeightCounter
270	.b0cb	20 de b2	jsr $b2de	                jsr     divide24By16Bits
271	.b0ce	ad 41 88	lda $8841	                lda     L8841
272	.b0d1	f0 0e		beq $b0e1	                beq     LBB86
273	.b0d3	38		sec		                sec
274	.b0d4	a0 fd		ldy #$fd	                ldy     #$fd

276	.b0d6					LBB7B:
277	.b0d6	a9 00		lda #$00	                lda     #0
278	.b0d8	f9 2e 02	sbc $022e,y	                sbc     vduv.ew.shear-$fd,y
279	.b0db	99 2e 02	sta $022e,y	                sta     vduv.ew.shear-$fd,y
280	.b0de	c8		iny		                iny
281	.b0df	d0 f5		bne $b0d6	                bne     LBB7B

283	.b0e1					LBB86:
284	.b0e1	ad 2e 03	lda $032e	                lda     vduv.ew.halfHeightCounter+0
285	.b0e4	8d 3c 88	sta $883c	                sta     L883C
286	.b0e7	ad 2f 03	lda $032f	                lda     vduv.ew.halfHeightCounter+1
287	.b0ea	20 ce d4	jsr $d4ce	                jsr     LD4CE
288	.b0ed	a0 03		ldy #$03	                ldy     #3

290	.b0ef					LBB94:
291	.b0ef	b9 40 88	lda $8840,y	                lda     L8840,y
292	.b0f2	99 30 03	sta $0330,y	                sta     vduv.ew.halfHeightSquared+0,y
293	.b0f5	88		dey		                dey
294	.b0f6	10 f7		bpl $b0ef	                bpl     LBB94
295	.b0f8	a2 0a		ldx #$0a	                ldx     #$a

297	.b0fa					LBB9F:
298	.b0fa	9e 42 88	stz $8842,x	                stz     ellipseAccumulatedShear,x
299	.b0fd	ca		dex		                dex
300	.b0fe	10 fa		bpl $b0fa	                bpl     LBB9F
301	.b100	ee 45 88	inc $8845	                inc     ellipseCountOddNumbers+0
302	.b103	20 73 b1	jsr $b173	                jsr     updateEllipse
303	.b106	20 73 b1	jsr $b173	                jsr     updateEllipse
304	.b109	9c 4d 88	stz $884d	                stz     ellipseCountHeight+0
305	.b10c	9c 4e 88	stz $884e	                stz     ellipseCountHeight+1
306	.b10f	a2 3c		ldx #$3c	                ldx     #VDUVariables.ew.pointA
307	.b111	a0 36		ldy #$36	                ldy     #VDUVariables.ew.pointD
308	.b113	20 55 b3	jsr $b355	                jsr     negateVDUVariableXIntoY
309	.b116	a2 3e		ldx #$3e	                ldx     #VDUVariables.ew.pointB
310	.b118	a0 34		ldy #$34	                ldy     #VDUVariables.ew.pointC
311	.b11a	20 55 b3	jsr $b355	                jsr     negateVDUVariableXIntoY
312	.b11d	a2 3c		ldx #$3c	                ldx     #VDUVariables.ew.pointA
313	.b11f	a0 3a		ldy #$3a	                ldy     #VDUVariables.ew.rightPoint
314	.b121	20 d6 d5	jsr $d5d6	                jsr     compareVDUVariableWords
315	.b124	10 07		bpl $b12d	                bpl     LBBD2
316	.b126	20 0c c9	jsr $c90c	                jsr     copyTwoBytesWithinVDUVariables
317	.b129	a2 36		ldx #$36	                ldx     #VDUVariables.ew.pointD
318	.b12b	80 12		bra $b13f	                bra     LBBE4

321	.b12d					LBBD2:
322	.b12d	a2 38		ldx #$38	                ldx     #VDUVariables.ew.leftPoint
323	.b12f	a0 3e		ldy #$3e	                ldy     #VDUVariables.ew.pointB
324	.b131	20 d6 d5	jsr $d5d6	                jsr     compareVDUVariableWords
325	.b134	10 3c		bpl $b172	                bpl     rtsBC17
326	.b136	a2 34		ldx #$34	                ldx     #VDUVariables.ew.pointC
327	.b138	a0 3a		ldy #$3a	                ldy     #VDUVariables.ew.rightPoint
328	.b13a	20 0c c9	jsr $c90c	                jsr     copyTwoBytesWithinVDUVariables
329	.b13d	a2 3e		ldx #$3e	                ldx     #VDUVariables.ew.pointB

331	.b13f					LBBE4:
332	.b13f	a0 38		ldy #$38	                ldy     #VDUVariables.ew.leftPoint
333	.b141	4c 0c c9	jmp $c90c	                jmp     copyTwoBytesWithinVDUVariables

335						;-------------------------------------------------------------------------
336						;
337						; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP6
338						;

340	.b144					updateEllipseIncrementally:
341	.b144	20 73 b1	jsr $b173	                jsr     updateEllipse
342	.b147	a0 3a		ldy #$3a	                ldy     #VDUVariables.ew.rightPoint
343	.b149	a2 3c		ldx #$3c	                ldx     #VDUVariables.ew.pointA
344	.b14b	20 d6 d5	jsr $d5d6	                jsr     compareVDUVariableWords
345	.b14e	10 0d		bpl $b15d	                bpl     LBC02
346	.b150	ad 3c 03	lda $033c	                lda     vduv.ew.pointA+0
347	.b153	8d 3a 03	sta $033a	                sta     vduv.ew.rightPoint+0
348	.b156	ad 3d 03	lda $033d	                lda     vduv.ew.pointA+1
349	.b159	8d 3b 03	sta $033b	                sta     vduv.ew.rightPoint+1
350	.b15c	60		rts		                rts

352	.b15d					LBC02:
353	.b15d	a2 38		ldx #$38	                ldx     #VDUVariables.ew.leftPoint
354	.b15f	a0 3e		ldy #$3e	                ldy     #VDUVariables.ew.pointB
355	.b161	20 d6 d5	jsr $d5d6	                jsr     compareVDUVariableWords
356	.b164	10 0c		bpl $b172	                bpl     rtsBC17
357	.b166	ad 3e 03	lda $033e	                lda     vduv.ew.pointB+0
358	.b169	8d 38 03	sta $0338	                sta     vduv.ew.leftPoint+0
359	.b16c	ad 3f 03	lda $033f	                lda     vduv.ew.pointB+1
360	.b16f	8d 39 03	sta $0339	                sta     vduv.ew.leftPoint+1

362	.b172					rtsBC17:
363	.b172	60		rts		                rts

365						;-------------------------------------------------------------------------
366						;
367						; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP7
368						;

370	.b173					updateEllipse:
371	.b173	a2 38		ldx #$38	                ldx     #VDUVariables.ew.leftPoint
372	.b175	a0 34		ldy #$34	                ldy     #VDUVariables.ew.pointC
373	.b177	20 1e c9	jsr $c91e	                jsr     copyFourBytesWithinVDUVariables
374	.b17a	a2 3c		ldx #$3c	                ldx     #VDUVariables.ew.pointA
375	.b17c	a0 38		ldy #$38	                ldy     #VDUVariables.ew.leftPoint
376	.b17e	20 1e c9	jsr $c91e	                jsr     copyFourBytesWithinVDUVariables

378	.b181	38		sec		                sec
379	.b182	ad 30 03	lda $0330	                lda     vduv.ew.halfHeightSquared+0
380	.b185	ed 49 88	sbc $8849	                sbc     ellipseCountSquares+0
381	.b188	8d 36 88	sta $8836	                sta     sqrtNumber+2
382	.b18b	ad 31 03	lda $0331	                lda     vduv.ew.halfHeightSquared+1
383	.b18e	ed 4a 88	sbc $884a	                sbc     ellipseCountSquares+1
384	.b191	8d 37 88	sta $8837	                sta     sqrtNumber+3
385	.b194	ad 32 03	lda $0332	                lda     vduv.ew.halfHeightSquared+2
386	.b197	ed 4b 88	sbc $884b	                sbc     ellipseCountSquares+2
387	.b19a	8d 38 88	sta $8838	                sta     sqrtNumber+4
388	.b19d	ad 33 03	lda $0333	                lda     vduv.ew.halfHeightSquared+3
389	.b1a0	ed 4c 88	sbc $884c	                sbc     ellipseCountSquares+3
390	.b1a3	8d 39 88	sta $8839	                sta     sqrtNumber+5
391	.b1a6	9c 35 88	stz $8835	                stz     sqrtNumber+1
392	.b1a9	9c 34 88	stz $8834	                stz     sqrtNumber+0
393	.b1ac	20 a6 b3	jsr $b3a6	                jsr     LBE4B

395	.b1af	ad 28 03	lda $0328	                lda     vduv.ew.aspectRatio+0
396	.b1b2	8d 34 88	sta $8834	                sta     multiplier+0
397	.b1b5	ad 29 03	lda $0329	                lda     vduv.ew.aspectRatio+1
398	.b1b8	8d 35 88	sta $8835	                sta     multiplier+1
399	.b1bb	ad 2a 03	lda $032a	                lda     vduv.ew.aspectRatio+2
400	.b1be	8d 36 88	sta $8836	                sta     multiplier+2
401	.b1c1	20 67 b3	jsr $b367	                jsr     multiply24x24

403	.b1c4	18		clc		                clc
404	.b1c5	ad 42 88	lda $8842	                lda     ellipseAccumulatedShear+0
405	.b1c8	6d 35 88	adc $8835	                adc     product+1
406	.b1cb	08		php		                php
407	.b1cc	ad 43 88	lda $8843	                lda     ellipseAccumulatedShear+1
408	.b1cf	6d 36 88	adc $8836	                adc     product+2
409	.b1d2	8d 3e 03	sta $033e	                sta     vduv.ew.pointB+0
410	.b1d5	ad 44 88	lda $8844	                lda     ellipseAccumulatedShear+2
411	.b1d8	6d 37 88	adc $8837	                adc     product+3
412	.b1db	8d 3f 03	sta $033f	                sta     vduv.ew.pointB+1
413	.b1de	28		plp		                plp
414	.b1df	10 08		bpl $b1e9	                bpl     +
415	.b1e1	ee 3e 03	inc $033e	                inc     vduv.ew.pointB+0
416	.b1e4	d0 03		bne $b1e9	                bne     +
417	.b1e6	ee 3f 03	inc $033f	                inc     vduv.ew.pointB+1
418	.b1e9					+
419	.b1e9	38		sec		                sec
420	.b1ea	ad 42 88	lda $8842	                lda     ellipseAccumulatedShear+0
421	.b1ed	ed 35 88	sbc $8835	                sbc     product+1
422	.b1f0	08		php		                php
423	.b1f1	ad 43 88	lda $8843	                lda     ellipseAccumulatedShear+1
424	.b1f4	ed 36 88	sbc $8836	                sbc     product+2
425	.b1f7	8d 3c 03	sta $033c	                sta     vduv.ew.pointA+0
426	.b1fa	ad 44 88	lda $8844	                lda     ellipseAccumulatedShear+2
427	.b1fd	ed 37 88	sbc $8837	                sbc     product+3
428	.b200	8d 3d 03	sta $033d	                sta     vduv.ew.pointA+1
429	.b203	28		plp		                plp
430	.b204	10 08		bpl $b20e	                bpl     +
431	.b206	ee 3c 03	inc $033c	                inc     vduv.ew.pointA+0
432	.b209	d0 03		bne $b20e	                bne     +
433	.b20b	ee 3d 03	inc $033d	                inc     vduv.ew.pointA+1
434	.b20e					+

436	.b20e	18		clc		                clc
437	.b20f	ad 45 88	lda $8845	                lda     ellipseCountOddNumbers+0
438	.b212	6d 49 88	adc $8849	                adc     ellipseCountSquares+0
439	.b215	8d 49 88	sta $8849	                sta     ellipseCountSquares+0
440	.b218	ad 46 88	lda $8846	                lda     ellipseCountOddNumbers+1
441	.b21b	6d 4a 88	adc $884a	                adc     ellipseCountSquares+1
442	.b21e	8d 4a 88	sta $884a	                sta     ellipseCountSquares+1
443	.b221	ad 47 88	lda $8847	                lda     ellipseCountOddNumbers+2
444	.b224	6d 4b 88	adc $884b	                adc     ellipseCountSquares+2
445	.b227	8d 4b 88	sta $884b	                sta     ellipseCountSquares+2
446	.b22a	ad 48 88	lda $8848	                lda     ellipseCountOddNumbers+3
447	.b22d	6d 4c 88	adc $884c	                adc     ellipseCountSquares+3
448	.b230	8d 4c 88	sta $884c	                sta     ellipseCountSquares+3
449	.b233	18		clc		                clc
450	.b234	a9 02		lda #$02	                lda     #2
451	.b236	6d 45 88	adc $8845	                adc     ellipseCountOddNumbers+0
452	.b239	8d 45 88	sta $8845	                sta     ellipseCountOddNumbers+0
453	.b23c	90 0d		bcc $b24b	                bcc     +
454	.b23e	ee 46 88	inc $8846	                inc     ellipseCountOddNumbers+1
455	.b241	d0 08		bne $b24b	                bne     +
456	.b243	ee 47 88	inc $8847	                inc     ellipseCountOddNumbers+2
457	.b246	d0 03		bne $b24b	                bne     +
458	.b248	ee 48 88	inc $8848	                inc     ellipseCountOddNumbers+3
459	.b24b					+
460	.b24b	18		clc		                clc
461	.b24c	ad 42 88	lda $8842	                lda     ellipseAccumulatedShear+0
462	.b24f	6d 2b 03	adc $032b	                adc     vduv.ew.shear+0
463	.b252	8d 42 88	sta $8842	                sta     ellipseAccumulatedShear+0
464	.b255	ad 43 88	lda $8843	                lda     ellipseAccumulatedShear+1
465	.b258	6d 2c 03	adc $032c	                adc     vduv.ew.shear+1
466	.b25b	8d 43 88	sta $8843	                sta     ellipseAccumulatedShear+1
467	.b25e	ad 44 88	lda $8844	                lda     ellipseAccumulatedShear+2
468	.b261	6d 2d 03	adc $032d	                adc     vduv.ew.shear+2
469	.b264	8d 44 88	sta $8844	                sta     ellipseAccumulatedShear+2
470	.b267	ee 4d 88	inc $884d	                inc     ellipseCountHeight+0
471	.b26a	d0 03		bne $b26f	                bne     +
472	.b26c	ee 4e 88	inc $884e	                inc     ellipseCountHeight+1
473	.b26f					+
474	.b26f	ad 2e 03	lda $032e	                lda     vduv.ew.halfHeightCounter+0
475	.b272	d0 03		bne $b277	                bne     +
476	.b274	ce 2f 03	dec $032f	                dec     vduv.ew.halfHeightCounter+1
477	.b277					+
478	.b277	ce 2e 03	dec $032e	                dec     vduv.ew.halfHeightCounter+0
479	.b27a	60		rts		                rts

481						;-------------------------------------------------------------------------
482						;
483						; https://tobylobster.github.io/GXR-pages/gxr/S-s23.html#SP8
484						;
485	.b27b					outlineEllipsePlotOnePointAndReflection: .block
486	.b27b	da		phx		                phx
487	.b27c	5a		phy		                phy

489	.b27d	18		clc		                clc
490	.b27e	ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
491	.b281	6d 42 03	adc $0342	                adc     vduv.ew.currentOffsetX+0
492	.b284	8d 44 03	sta $0344	                sta     vduv.ew.plotPointX+0
493	.b287	ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
494	.b28a	6d 43 03	adc $0343	                adc     vduv.ew.currentOffsetX+1
495	.b28d	8d 45 03	sta $0345	                sta     vduv.ew.plotPointX+1

497	.b290	18		clc		                clc
498	.b291	ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
499	.b294	6d 4d 88	adc $884d	                adc     ellipseCountHeight+0
500	.b297	8d 46 03	sta $0346	                sta     vduv.ew.plotPointY+0
501	.b29a	ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
502	.b29d	6d 4e 88	adc $884e	                adc     ellipseCountHeight+1
503	.b2a0	8d 47 03	sta $0347	                sta     vduv.ew.plotPointY+1

505	.b2a3	a2 44		ldx #$44	                ldx     #VDUVariables.ew.plotPointX
506	.b2a5	20 4c db	jsr $db4c	                jsr     plotPointInternal

508	.b2a8	ad 4d 88	lda $884d	                lda     ellipseCountHeight+0
509	.b2ab	0d 4e 88	ora $884e	                ora     ellipseCountHeight+1
510	.b2ae	f0 2b		beq $b2db	                beq     done

512	.b2b0	38		sec		                sec
513	.b2b1	ad 14 03	lda $0314	                lda     vduv.oldGraphicsCursorPixelsX+0
514	.b2b4	ed 42 03	sbc $0342	                sbc     vduv.ew.currentOffsetX+0
515	.b2b7	8d 44 03	sta $0344	                sta     vduv.ew.plotPointX+0
516	.b2ba	ad 15 03	lda $0315	                lda     vduv.oldGraphicsCursorPixelsX+1
517	.b2bd	ed 43 03	sbc $0343	                sbc     vduv.ew.currentOffsetX+1
518	.b2c0	8d 45 03	sta $0345	                sta     vduv.ew.plotPointX+1

520	.b2c3	38		sec		                sec
521	.b2c4	ad 16 03	lda $0316	                lda     vduv.oldGraphicsCursorPixelsY+0
522	.b2c7	ed 4d 88	sbc $884d	                sbc     ellipseCountHeight+0
523	.b2ca	8d 46 03	sta $0346	                sta     vduv.ew.plotPointY+0
524	.b2cd	ad 17 03	lda $0317	                lda     vduv.oldGraphicsCursorPixelsY+1
525	.b2d0	ed 4e 88	sbc $884e	                sbc     ellipseCountHeight+1
526	.b2d3	8d 47 03	sta $0347	                sta     vduv.ew.plotPointY+1

528	.b2d6	a2 44		ldx #$44	                ldx     #VDUVariables.ew.plotPointX
529	.b2d8	20 4c db	jsr $db4c	                jsr     plotPointInternal
530	.b2db					done:
531	.b2db	7a		ply		                ply
532	.b2dc	fa		plx		                plx
533	.b2dd	60		rts		                rts
534						                .endblock

536						;-------------------------------------------------------------------------
537						;
538						; https://tobylobster.github.io/GXR-pages/gxr/S-s24.html#SP1 ?
539						;
540	.b2de					divide24By16Bits:
541	.b2de	da		phx		                phx

543						                ; Copy 16-bit value into workspace
544	.b2df	b9 00 03	lda $0300,y	                lda     vduv+0,y
545	.b2e2	8d 3f 88	sta $883f	                sta     L883F
546	.b2e5	b9 01 03	lda $0301,y	                lda     vduv+1,y
547	.b2e8	8d 40 88	sta $8840	                sta     L8840

549						                ; 24 bits...?
550	.b2eb	a0 18		ldy #$18	                ldy     #24

552						                ; Copy 24-bit value into workspace
553	.b2ed	bd 00 03	lda $0300,x	                lda     vduv+0,x
554	.b2f0	8d 3a 88	sta $883a	                sta     L883A
555	.b2f3	bd 01 03	lda $0301,x	                lda     vduv+1,x
556	.b2f6	8d 3b 88	sta $883b	                sta     L883B
557	.b2f9	bd 02 03	lda $0302,x	                lda     vduv+2,x
558	.b2fc	30 0c		bmi $b30a	                bmi     LBDAF

560	.b2fe					LBDA3:
561	.b2fe	88		dey		                dey
562	.b2ff	f0 52		beq $b353	                beq     LBDF8

564						                ; shift 24-bit value left 1
565	.b301	0e 3a 88	asl $883a	                asl     L883A
566	.b304	2e 3b 88	rol $883b	                rol     L883B
567	.b307	2a		rol a		                rol     a
568	.b308	10 f4		bpl $b2fe	                bpl     LBDA3

570	.b30a					LBDAF:
571	.b30a	8d 3c 88	sta $883c	                sta     L883C
572	.b30d	9c 3d 88	stz $883d	                stz     L883D
573	.b310	9c 3e 88	stz $883e	                stz     L883E
574	.b313	18		clc		                clc

576	.b314					LBDB9:
577						                ; shift 40-bit value left 1
578	.b314	2e 3a 88	rol $883a	                rol     L883A
579	.b317	2e 3b 88	rol $883b	                rol     L883B
580	.b31a	2e 3c 88	rol $883c	                rol     L883C
581	.b31d	2e 3d 88	rol $883d	                rol     L883D
582	.b320	2e 3e 88	rol $883e	                rol     L883E
583	.b323	38		sec		                sec
584	.b324	ad 3d 88	lda $883d	                lda     L883D
585	.b327	ed 3f 88	sbc $883f	                sbc     L883F
586	.b32a	aa		tax		                tax
587	.b32b	ad 3e 88	lda $883e	                lda     L883E
588	.b32e	ed 40 88	sbc $8840	                sbc     L8840
589	.b331	90 06		bcc $b339	                bcc     LBDDE
590	.b333	8e 3d 88	stx $883d	                stx     L883D
591	.b336	8d 3e 88	sta $883e	                sta     L883E

593	.b339					LBDDE:
594	.b339	88		dey		                dey
595	.b33a	d0 d8		bne $b314	                bne     LBDB9
596	.b33c	fa		plx		                plx
597	.b33d	ad 3a 88	lda $883a	                lda     L883A
598	.b340	2a		rol a		                rol     a
599	.b341	9d 00 03	sta $0300,x	                sta     vduv+0,x
600	.b344	ad 3b 88	lda $883b	                lda     L883B
601	.b347	2a		rol a		                rol     a
602	.b348	9d 01 03	sta $0301,x	                sta     vduv+1,x
603	.b34b	ad 3c 88	lda $883c	                lda     L883C
604	.b34e	2a		rol a		                rol     a
605	.b34f	9d 02 03	sta $0302,x	                sta     vduv+2,x
606	.b352	60		rts		                rts

609	.b353					LBDF8:
610	.b353	fa		plx		                plx
611	.b354	60		rts		                rts

616						;-------------------------------------------------------------------------
617						;
618						; https://tobylobster.github.io/GXR-pages/gxr/S-s24.html#SP3
619						;

621	.b355					negateVDUVariableXIntoY:
622	.b355	38		sec		                sec
623	.b356	a9 00		lda #$00	                lda     #0
624	.b358	fd 00 03	sbc $0300,x	                sbc     vduv+0,x
625	.b35b	99 00 03	sta $0300,y	                sta     vduv+0,y
626	.b35e	a9 00		lda #$00	                lda     #0
627	.b360	fd 01 03	sbc $0301,x	                sbc     vduv+1,x
628	.b363	99 01 03	sta $0301,y	                sta     vduv+1,y
629	.b366	60		rts		                rts

631						;-------------------------------------------------------------------------

633	.b367					multiply24x24:
634	.b367	a0 17		ldy #$17	                ldy     #23
635	.b369	9c 39 88	stz $8839	                stz     product+5
636	.b36c	9c 38 88	stz $8838	                stz     product+4
637	.b36f	9c 37 88	stz $8837	                stz     product+3
638	.b372	4e 36 88	lsr $8836	                lsr     multiplier+2
639	.b375	6e 35 88	ror $8835	                ror     multiplier+1
640	.b378	6e 34 88	ror $8834	                ror     multiplier+0

642	.b37b					LBE20:
643	.b37b	90 1c		bcc $b399	                bcc     LBE3E
644	.b37d	18		clc		                clc
645	.b37e	ad 30 88	lda $8830	                lda     multiplicand+0
646	.b381	6d 37 88	adc $8837	                adc     product+3
647	.b384	8d 37 88	sta $8837	                sta     product+3
648	.b387	ad 31 88	lda $8831	                lda     multiplicand+1
649	.b38a	6d 38 88	adc $8838	                adc     product+4
650	.b38d	8d 38 88	sta $8838	                sta     product+4
651	.b390	ad 32 88	lda $8832	                lda     multiplicand+2
652	.b393	6d 39 88	adc $8839	                adc     product+5
653	.b396	8d 39 88	sta $8839	                sta     product+5

655	.b399					LBE3E:
656	.b399	18		clc		                clc
657	.b39a	a2 05		ldx #$05	                ldx     #5

659	.b39c					LBE41:
660	.b39c	7e 34 88	ror $8834,x	                ror     product,x
661	.b39f	ca		dex		                dex
662	.b3a0	10 fa		bpl $b39c	                bpl     LBE41
663	.b3a2	88		dey		                dey
664	.b3a3	10 d6		bpl $b37b	                bpl     LBE20
665	.b3a5	60		rts		                rts

667						;-------------------------------------------------------------------------

669	.b3a6					LBE4B:
670	.b3a6	a2 03		ldx #$03	                ldx     #3

672	.b3a8					LBE4D:
673	.b3a8	9e 30 88	stz $8830,x	                stz     $8830,x
674	.b3ab	74 dc		stz $dc,x	                stz     ZTEMPB,x
675	.b3ad	ca		dex		                dex
676	.b3ae	10 f8		bpl $b3a8	                bpl     LBE4D
677	.b3b0	a0 05		ldy #$05	                ldy     #5

679	.b3b2					LBE57:
680	.b3b2	b9 34 88	lda $8834,y	                lda     $8834,y
681	.b3b5	85 da		sta $da		                sta     ZTEMP+0
682	.b3b7	5a		phy		                phy
683	.b3b8	a0 03		ldy #$03	                ldy     #3

685	.b3ba					LBE5F:
686	.b3ba	5a		phy		                phy
687	.b3bb	38		sec		                sec
688	.b3bc	2e 30 88	rol $8830	                rol     L8830
689	.b3bf	2e 31 88	rol $8831	                rol     L8831
690	.b3c2	2e 32 88	rol $8832	                rol     L8832
691	.b3c5	2e 33 88	rol $8833	                rol     L8833
692	.b3c8	a2 01		ldx #$01	                ldx     #1
693	.b3ca	a5 dc		lda $dc		                lda     ZTEMPB+0

695	.b3cc					LBE71:
696	.b3cc	06 da		asl $da		                asl     ZTEMP+0
697	.b3ce	2a		rol a		                rol     a
698	.b3cf	26 dd		rol $dd		                rol     ZTEMPB+1
699	.b3d1	26 de		rol $de		                rol     ZTEMPC+0
700	.b3d3	26 df		rol $df		                rol     ZTEMPC+1
701	.b3d5	ca		dex		                dex
702	.b3d6	10 f4		bpl $b3cc	                bpl     LBE71
703	.b3d8	85 dc		sta $dc		                sta     ZTEMPB+0
704	.b3da	38		sec		                sec
705	.b3db	ed 30 88	sbc $8830	                sbc     L8830
706	.b3de	48		pha		                pha
707	.b3df	a5 dd		lda $dd		                lda     ZTEMPB+1
708	.b3e1	ed 31 88	sbc $8831	                sbc     L8831
709	.b3e4	aa		tax		                tax
710	.b3e5	a5 de		lda $de		                lda     ZTEMPC+0
711	.b3e7	ed 32 88	sbc $8832	                sbc     L8832
712	.b3ea	a8		tay		                tay
713	.b3eb	a5 df		lda $df		                lda     ZTEMPC+1
714	.b3ed	ed 33 88	sbc $8833	                sbc     L8833
715	.b3f0	90 0e		bcc $b400	                bcc     LBEA5
716	.b3f2	85 df		sta $df		                sta     ZTEMPC+1
717	.b3f4	84 de		sty $de		                sty     ZTEMPC+0
718	.b3f6	86 dd		stx $dd		                stx     ZTEMPB+1
719	.b3f8	68		pla		                pla
720	.b3f9	85 dc		sta $dc		                sta     ZTEMPB+0
721	.b3fb	ee 30 88	inc $8830	                inc     L8830
722	.b3fe	80 04		bra $b404	                bra     LBEA9

725	.b400					LBEA5:
726	.b400	68		pla		                pla
727	.b401	ce 30 88	dec $8830	                dec     L8830

729	.b404					LBEA9:
730	.b404	7a		ply		                ply
731	.b405	88		dey		                dey
732	.b406	10 b2		bpl $b3ba	                bpl     LBE5F
733	.b408	7a		ply		                ply
734	.b409	88		dey		                dey
735	.b40a	10 a6		bpl $b3b2	                bpl     LBE57
736	.b40c	4e 33 88	lsr $8833	                lsr     L8833
737	.b40f	6e 32 88	ror $8832	                ror     L8832
738	.b412	6e 31 88	ror $8831	                ror     L8831
739	.b415	6e 30 88	ror $8830	                ror     L8830
740	.b418	60		rts		                rts

742						;-------------------------------------------------------------------------
743						;
744						; 184-191 = Move/copy rectangle [MasRef E.3-31]
745						;
746						; The normal interpretation of <p> does not apply in this group of
747						; plot codes and the meanings are as follows:
748						;
749						; 184, 185 - %1011100x - Move rectangle, relative
750						; 186, 187 - %1011101x - Copy rectangle, relative
751						; 188, 189 - %1011110x - Move rectangle, absolute
752						; 190, 191 - %1011111x - Copy rectangle, absolute
753						;
754	.b419					plotMoveOrCopyRectangle:
755	.b419	29 02		and #$02	                and     #2
756	.b41b	8d 45 03	sta $0345	                sta     vduv.mocr.copy

758	.b41e	20 51 c9	jsr $c951	                jsr     prepareForPlotBackground

760	.b421	a2 14		ldx #$14	                ldx     #VDUVariables.oldGraphicsCursorPixels
761	.b423	20 e6 c8	jsr $c8e6	                jsr     prepareAABB

763						                ; mocr.dest.min = PLOT coordinate
764	.b426	a0 34		ldy #$34	                ldy     #VDUVariables.mocr.dest.min
765	.b428	20 16 c9	jsr $c916	                jsr     copyLastFourVDUQueueBytes
766	.b42b	84 da		sty $da		                sty     ZTEMP+0              ;Y=VDUVariables.mocr.dest.max

768						                ; dest.max = dest.min + (src.max - src.min)
769	.b42d	a2 34		ldx #$34	                ldx     #VDUVariables.mocr.dest.min
770	.b42f	a0 2c		ldy #$2c	                ldy     #VDUVariables.mocr.src.max
771	.b431	a9 28		lda #$28	                lda     #VDUVariables.mocr.src.min
772	.b433	20 80 d5	jsr $d580	                jsr     addRegionDimensionsToVDUVariableCoordinates

774						                ;
775	.b436	a2 28		ldx #$28	                ldx     #VDUVariables.mocr.src.min
776	.b438	a0 34		ldy #$34	                ldy     #VDUVariables.mocr.dest
777	.b43a	20 cc d5	jsr $d5cc	                jsr     sortVDUVariableWords

779	.b43d	5a		phy		                phy
780	.b43e	da		phx		                phx
781	.b43f	a0 00		ldy #$00	                ldy     #0                   ;get outcode for X axis
782	.b441	20 b7 d1	jsr $d1b7	                jsr     getOutcodeForAxis
783	.b444	f0 08		beq $b44e	                beq     LBEF3                ;taken if
784	.b446	4a		lsr a		                lsr     a
785	.b447	f0 03		beq $b44c	                beq     LBEF1
786	.b449	68		pla		                pla

788	.b44a					LBEEF:
789	.b44a	68		pla		                pla
790	.b44b	60		rts		                rts

793	.b44c					LBEF1:
794	.b44c	a2 00		ldx #$00	                ldx     #0

796	.b44e					LBEF3:
797	.b44e	68		pla		                pla

799	.b44f	a0 30		ldy #$30	                ldy     #VDUVariables.mocr.L30
800	.b451	84 da		sty $da		                sty     ZTEMP+0
801	.b453	a0 28		ldy #$28	                ldy     #VDUVariables.mocr.src.min
802	.b455	20 8d d5	jsr $d58d	                jsr     addRegionDimensionToVDUVariableCoordinate

804	.b458	a0 3c		ldy #$3c	                ldy     #VDUVariables.ew.pointA
805	.b45a	84 da		sty $da		                sty     ZTEMP+0

807	.b45c	a0 34		ldy #$34	                ldy     #VDUVariables.mocr.dest.min
808	.b45e	20 8d d5	jsr $d58d	                jsr     addRegionDimensionToVDUVariableCoordinate

810	.b461	68		pla		                pla
811	.b462	18		clc		                clc
812	.b463	69 04		adc #$04	                adc     #4
813	.b465	aa		tax		                tax
814	.b466	da		phx		                phx
815	.b467	a0 00		ldy #$00	                ldy     #0
816	.b469	20 b7 d1	jsr $d1b7	                jsr     getOutcodeForAxis
817	.b46c	f0 05		beq $b473	                beq     LBF18
818	.b46e	4a		lsr a		                lsr     a
819	.b46f	f0 d9		beq $b44a	                beq     LBEEF
820	.b471	a2 04		ldx #$04	                ldx     #4

822	.b473					LBF18:
823	.b473	68		pla		                pla
824	.b474	a0 40		ldy #$40	                ldy     #VDUVariables.mocr.L40
825	.b476	84 da		sty $da		                sty     ZTEMP+0
826	.b478	a0 38		ldy #$38	                ldy     #VDUVariables.mocr.dest.max.x
827	.b47a	20 8d d5	jsr $d58d	                jsr     addRegionDimensionToVDUVariableCoordinate
828	.b47d	ad 40 03	lda $0340	                lda     vduv.mocr.L40
829	.b480	cd 3c 03	cmp $033c	                cmp     vduv.mocr.L3C
830	.b483	ad 41 03	lda $0341	                lda     vduv.mocr.L40+1
831	.b486	ed 3d 03	sbc $033d	                sbc     vduv.mocr.L3C+1
832	.b489	10 10		bpl $b49b	                bpl     LBF40
833	.b48b	ad 45 03	lda $0345	                lda     vduv.mocr.copy
834	.b48e	d0 03		bne $b493	                bne     LBF38
835	.b490	20 20 c4	jsr $c420	                jsr     LC420

837	.b493					LBF38:
838	.b493	a2 34		ldx #$34	                ldx     #VDUVariables.mocr.dest
839	.b495	20 02 c9	jsr $c902	                jsr     copyEightBytesToWorkspace28
840	.b498	4c 20 c4	jmp $c420	                jmp     LC420

843	.b49b					LBF40:
844	.b49b	9c 47 03	stz $0347	                stz     vduv.mocr.L47
845	.b49e	ad 30 03	lda $0330	                lda     vduv.mocr.L30
846	.b4a1	2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne
847	.b4a4	85 da		sta $da		                sta     ZTEMP+0
848	.b4a6	ad 3c 03	lda $033c	                lda     vduv.mocr.L3C
849	.b4a9	2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne
850	.b4ac	38		sec		                sec
851	.b4ad	e5 da		sbc $da		                sbc     ZTEMP+0
852	.b4af	10 06		bpl $b4b7	                bpl     LBF5C
853	.b4b1	ce 47 03	dec $0347	                dec     vduv.mocr.L47
854	.b4b4	2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne

856	.b4b7					LBF5C:
857	.b4b7	8d 43 03	sta $0343	                sta     vduv.ew.currentOffsetX+1
858	.b4ba	48		pha		                pha
859	.b4bb	49 ff		eor #$ff	                eor     #$ff
860	.b4bd	1a		inc a		                inc     a
861	.b4be	2d 61 03	and $0361	                and     vduv.pixelsPerByteMinusOne
862	.b4c1	8d 42 03	sta $0342	                sta     vduv.mocr.shiftToNextByte
863	.b4c4	68		pla		                pla
864	.b4c5	18		clc		                clc
865	.b4c6	6d 61 03	adc $0361	                adc     vduv.pixelsPerByteMinusOne
866	.b4c9	aa		tax		                tax
867	.b4ca	bd 30 e1	lda $e130,x	                lda     LE120,x
868	.b4cd	85 e1		sta $e1		                sta     ZTEMPD+1
869	.b4cf	a2 3c		ldx #$3c	                ldx     #VDUVariables.mocr.L3C
870	.b4d1	a0 40		ldy #$40	                ldy     #VDUVariables.mocr.L40
871	.b4d3	20 9c da	jsr $da9c	                jsr     LDA9C
872	.b4d6	8d 44 03	sta $0344	                sta     vduv.mocr.L44
873	.b4d9	a5 d1		lda $d1		                lda     ZMASK
874	.b4db	8d 46 03	sta $0346	                sta     vduv.mocr.L46
875	.b4de	a5 dc		lda $dc		                lda     ZTEMPB+0
876	.b4e0	85 e0		sta $e0		                sta     ZTEMPD+0
877	.b4e2	a2 00		ldx #$00	                ldx     #0
878	.b4e4	20 41 b5	jsr $b541	                jsr     LBFE6
879	.b4e7	f0 40		beq $b529	                beq     LBFCE
880	.b4e9	ad 2a 03	lda $032a	                lda     vduv.mocr.src.min.y+0
881	.b4ec	cd 36 03	cmp $0336	                cmp     vduv.mocr.dest.min.y+0
882	.b4ef	ad 2b 03	lda $032b	                lda     vduv.mocr.src.min.y+1
883	.b4f2	ed 37 03	sbc $0337	                sbc     vduv.mocr.dest.min.y+1
884	.b4f5	50 02		bvc $b4f9	                bvc     LBF9E
885	.b4f7	49 80		eor #$80	                eor     #$80

887	.b4f9					LBF9E:
888	.b4f9	30 11		bmi $b50c	                bmi     LBFB1

890	.b4fb					LBFA0:
891	.b4fb	20 62 db	jsr $db62	                jsr     LDB62
892	.b4fe	a2 00		ldx #$00	                ldx     #0
893	.b500	20 2c b5	jsr $b52c	                jsr     LBFD1
894	.b503	a2 0c		ldx #$0c	                ldx     #$c
895	.b505	20 2c b5	jsr $b52c	                jsr     LBFD1
896	.b508	d0 f1		bne $b4fb	                bne     LBFA0
897	.b50a	80 1d		bra $b529	                bra     LBFCE

900	.b50c					LBFB1:
901	.b50c	a2 2a		ldx #$2a	                ldx     #VDUVariables.mocr.src.min.y
902	.b50e	a0 2e		ldy #$2e	                ldy     #VDUVariables.mocr.src.max.y
903	.b510	20 c2 e2	jsr $e2c2	                jsr     exchangeTwoVDUBytes
904	.b513	a2 36		ldx #$36	                ldx     #VDUVariables.mocr.dest.min.y
905	.b515	a0 3a		ldy #$3a	                ldy     #VDUVariables.mocr.dest.max.y
906	.b517	20 c2 e2	jsr $e2c2	                jsr     exchangeTwoVDUBytes

908	.b51a					LBFBF:
909	.b51a	20 62 db	jsr $db62	                jsr     LDB62
910	.b51d	a2 00		ldx #$00	                ldx     #0
911	.b51f	20 36 b5	jsr $b536	                jsr     LBFDB
912	.b522	a2 0c		ldx #$0c	                ldx     #$c
913	.b524	20 36 b5	jsr $b536	                jsr     LBFDB
914	.b527	d0 f1		bne $b51a	                bne     LBFBF

916	.b529					LBFCE:
917	.b529	4c 62 db	jmp $db62	                jmp     LDB62

919	.b52c					LBFD1:
920	.b52c	fe 2a 03	inc $032a,x	                inc     vduv.mocr.src.min.y+0,x
921	.b52f	d0 10		bne $b541	                bne     LBFE6
922	.b531	fe 2b 03	inc $032b,x	                inc     vduv.mocr.src.min.y+1,x
923	.b534	80 0b		bra $b541	                bra     LBFE6

925	.b536					LBFDB:
926	.b536	bd 2a 03	lda $032a,x	                lda     vduv.mocr.src.min.y+0,x
927	.b539	d0 03		bne $b53e	                bne     LBFE3
928	.b53b	de 2b 03	dec $032b,x	                dec     vduv.mocr.src.min.y+1,x

930	.b53e					LBFE3:
931	.b53e	de 2a 03	dec $032a,x	                dec     vduv.mocr.src.min.y+0,x
932	.b541					LBFE6:
933	.b541	bd 2a 03	lda $032a,x	                lda     vduv.mocr.src.min.y+0,x
934	.b544	dd 2e 03	cmp $032e,x	                cmp     vduv.mocr.src.max.y+0,x
935	.b547	d0 06		bne $b54f	                bne     rtsBFF4
936	.b549	bd 2b 03	lda $032b,x	                lda     vduv.mocr.src.min.y+1,x
937	.b54c	dd 2f 03	cmp $032f,x	                cmp     vduv.mocr.src.max.y+1,x

939	.b54f					rtsBFF4:
940	.b54f	60		rts		                rts

943						; Hmm. What even is this???
944	>b550	ff				                .byte $ff
945	>b551	ff				                .byte $ff
946	>b552	ff				                .byte $ff
947	>b553	ff				                .byte $ff
948	>b554	ff				                .byte $ff
949	>b555	ff				                .byte $ff
950	>b556	ff				                .byte $ff
951	>b557	ff				                .byte $ff
952	>b558	ff				                .byte $ff
953	>b559	ff				                .byte $ff
954	>b55a	ff				                .byte $ff

:5	;******  Return to file: src/terminal.s65

6951						;-------------------------------------------------------------------------

6953						; Unused space
6954						; ============
6955	.b55b					terminalUnusedBegin:
6956	>b55b	ff ff ff ff ff ff ff ff		                .fill $b900-*,$ff
	>b563	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b573	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b583	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b593	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b5a3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b5b3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b5c3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b5d3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b5e3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b5f3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b603	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b613	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b623	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b633	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b643	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b653	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b663	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b673	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b683	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b693	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b6a3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b6b3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b6c3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b6d3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b6e3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b6f3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b703	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b713	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b723	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b733	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b743	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b753	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b763	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b773	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b783	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b793	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b7a3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b7b3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b7c3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b7d3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b7e3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b7f3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b803	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b813	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b823	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b833	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b843	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b853	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b863	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b873	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b883	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b893	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b8a3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b8b3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b8c3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b8d3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b8e3	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>b8f3	ff ff ff ff ff ff ff ff ff ff ff ff ff
6957	=933					terminalUnusedSize=*-terminalUnusedBegin

6959						; Default font
6960						; ============
6961	.b900					LB900:
6963						                ; CHR$32 -
6964	>b900	00				                .byte %00000000
6965	>b901	00				                .byte %00000000
6966	>b902	00				                .byte %00000000
6967	>b903	00				                .byte %00000000
6968	>b904	00				                .byte %00000000
6969	>b905	00				                .byte %00000000
6970	>b906	00				                .byte %00000000
6971	>b907	00				                .byte %00000000

6973						                ; CHR$33 - !
6974	>b908	18				                .byte %00011000
6975	>b909	18				                .byte %00011000
6976	>b90a	18				                .byte %00011000
6977	>b90b	18				                .byte %00011000
6978	>b90c	18				                .byte %00011000
6979	>b90d	00				                .byte %00000000
6980	>b90e	18				                .byte %00011000
6981	>b90f	00				                .byte %00000000

6983						                ; CHR$34 - "
6984	>b910	6c				                .byte %01101100
6985	>b911	6c				                .byte %01101100
6986	>b912	6c				                .byte %01101100
6987	>b913	00				                .byte %00000000
6988	>b914	00				                .byte %00000000
6989	>b915	00				                .byte %00000000
6990	>b916	00				                .byte %00000000
6991	>b917	00				                .byte %00000000

6993						                ; CHR$35 - #
6994	>b918	36				                .byte %00110110
6995	>b919	36				                .byte %00110110
6996	>b91a	7f				                .byte %01111111
6997	>b91b	36				                .byte %00110110
6998	>b91c	7f				                .byte %01111111
6999	>b91d	36				                .byte %00110110
7000	>b91e	36				                .byte %00110110
7001	>b91f	00				                .byte %00000000

7003						                ; CHR$36 - $
7004	>b920	0c				                .byte %00001100
7005	>b921	3f				                .byte %00111111
7006	>b922	68				                .byte %01101000
7007	>b923	3e				                .byte %00111110
7008	>b924	0b				                .byte %00001011
7009	>b925	7e				                .byte %01111110
7010	>b926	18				                .byte %00011000
7011	>b927	00				                .byte %00000000

7013						                ; CHR$37 - %
7014	>b928	60				                .byte %01100000
7015	>b929	66				                .byte %01100110
7016	>b92a	0c				                .byte %00001100
7017	>b92b	18				                .byte %00011000
7018	>b92c	30				                .byte %00110000
7019	>b92d	66				                .byte %01100110
7020	>b92e	06				                .byte %00000110
7021	>b92f	00				                .byte %00000000

7023						                ; CHR$38 - &
7024	>b930	38				                .byte %00111000
7025	>b931	6c				                .byte %01101100
7026	>b932	6c				                .byte %01101100
7027	>b933	38				                .byte %00111000
7028	>b934	6d				                .byte %01101101
7029	>b935	66				                .byte %01100110
7030	>b936	3b				                .byte %00111011
7031	>b937	00				                .byte %00000000

7033						                ; CHR$39 - '
7034	>b938	0c				                .byte %00001100
7035	>b939	18				                .byte %00011000
7036	>b93a	30				                .byte %00110000
7037	>b93b	00				                .byte %00000000
7038	>b93c	00				                .byte %00000000
7039	>b93d	00				                .byte %00000000
7040	>b93e	00				                .byte %00000000
7041	>b93f	00				                .byte %00000000

7043						                ; CHR$40 - (
7044	>b940	0c				                .byte %00001100
7045	>b941	18				                .byte %00011000
7046	>b942	30				                .byte %00110000
7047	>b943	30				                .byte %00110000
7048	>b944	30				                .byte %00110000
7049	>b945	18				                .byte %00011000
7050	>b946	0c				                .byte %00001100
7051	>b947	00				                .byte %00000000

7053						                ; CHR$41 - )
7054	>b948	30				                .byte %00110000
7055	>b949	18				                .byte %00011000
7056	>b94a	0c				                .byte %00001100
7057	>b94b	0c				                .byte %00001100
7058	>b94c	0c				                .byte %00001100
7059	>b94d	18				                .byte %00011000
7060	>b94e	30				                .byte %00110000
7061	>b94f	00				                .byte %00000000

7063						                ; CHR$42 - *
7064	>b950	00				                .byte %00000000
7065	>b951	18				                .byte %00011000
7066	>b952	7e				                .byte %01111110
7067	>b953	3c				                .byte %00111100
7068	>b954	7e				                .byte %01111110
7069	>b955	18				                .byte %00011000
7070	>b956	00				                .byte %00000000
7071	>b957	00				                .byte %00000000

7073						                ; CHR$43 - +
7074	>b958	00				                .byte %00000000
7075	>b959	18				                .byte %00011000
7076	>b95a	18				                .byte %00011000
7077	>b95b	7e				                .byte %01111110
7078	>b95c	18				                .byte %00011000
7079	>b95d	18				                .byte %00011000
7080	>b95e	00				                .byte %00000000
7081	>b95f	00				                .byte %00000000

7083						                ; CHR$44 - ,
7084	>b960	00				                .byte %00000000
7085	>b961	00				                .byte %00000000
7086	>b962	00				                .byte %00000000
7087	>b963	00				                .byte %00000000
7088	>b964	00				                .byte %00000000
7089	>b965	18				                .byte %00011000
7090	>b966	18				                .byte %00011000
7091	>b967	30				                .byte %00110000

7093						                ; CHR$45 - -
7094	>b968	00				                .byte %00000000
7095	>b969	00				                .byte %00000000
7096	>b96a	00				                .byte %00000000
7097	>b96b	7e				                .byte %01111110
7098	>b96c	00				                .byte %00000000
7099	>b96d	00				                .byte %00000000
7100	>b96e	00				                .byte %00000000
7101	>b96f	00				                .byte %00000000

7103						                ; CHR$46 - .
7104	>b970	00				                .byte %00000000
7105	>b971	00				                .byte %00000000
7106	>b972	00				                .byte %00000000
7107	>b973	00				                .byte %00000000
7108	>b974	00				                .byte %00000000
7109	>b975	18				                .byte %00011000
7110	>b976	18				                .byte %00011000
7111	>b977	00				                .byte %00000000

7113						                ; CHR$47 - /
7114	>b978	00				                .byte %00000000
7115	>b979	06				                .byte %00000110
7116	>b97a	0c				                .byte %00001100
7117	>b97b	18				                .byte %00011000
7118	>b97c	30				                .byte %00110000
7119	>b97d	60				                .byte %01100000
7120	>b97e	00				                .byte %00000000
7121	>b97f	00				                .byte %00000000

7123						                ; CHR$48 - 0
7124	>b980	3c				                .byte %00111100
7125	>b981	66				                .byte %01100110
7126	>b982	6e				                .byte %01101110
7127	>b983	7e				                .byte %01111110
7128	>b984	76				                .byte %01110110
7129	>b985	66				                .byte %01100110
7130	>b986	3c				                .byte %00111100
7131	>b987	00				                .byte %00000000

7133						                ; CHR$49 - 1
7134	>b988	18				                .byte %00011000
7135	>b989	38				                .byte %00111000
7136	>b98a	18				                .byte %00011000
7137	>b98b	18				                .byte %00011000
7138	>b98c	18				                .byte %00011000
7139	>b98d	18				                .byte %00011000
7140	>b98e	7e				                .byte %01111110
7141	>b98f	00				                .byte %00000000

7143						                ; CHR$50 - 2
7144	>b990	3c				                .byte %00111100
7145	>b991	66				                .byte %01100110
7146	>b992	06				                .byte %00000110
7147	>b993	0c				                .byte %00001100
7148	>b994	18				                .byte %00011000
7149	>b995	30				                .byte %00110000
7150	>b996	7e				                .byte %01111110
7151	>b997	00				                .byte %00000000

7153						                ; CHR$51 - 3
7154	>b998	3c				                .byte %00111100
7155	>b999	66				                .byte %01100110
7156	>b99a	06				                .byte %00000110
7157	>b99b	1c				                .byte %00011100
7158	>b99c	06				                .byte %00000110
7159	>b99d	66				                .byte %01100110
7160	>b99e	3c				                .byte %00111100
7161	>b99f	00				                .byte %00000000

7163						                ; CHR$52 - 4
7164	>b9a0	0c				                .byte %00001100
7165	>b9a1	1c				                .byte %00011100
7166	>b9a2	3c				                .byte %00111100
7167	>b9a3	6c				                .byte %01101100
7168	>b9a4	7e				                .byte %01111110
7169	>b9a5	0c				                .byte %00001100
7170	>b9a6	0c				                .byte %00001100
7171	>b9a7	00				                .byte %00000000

7173						                ; CHR$53 - 5
7174	>b9a8	7e				                .byte %01111110
7175	>b9a9	60				                .byte %01100000
7176	>b9aa	7c				                .byte %01111100
7177	>b9ab	06				                .byte %00000110
7178	>b9ac	06				                .byte %00000110
7179	>b9ad	66				                .byte %01100110
7180	>b9ae	3c				                .byte %00111100
7181	>b9af	00				                .byte %00000000

7183						                ; CHR$54 - 6
7184	>b9b0	1c				                .byte %00011100
7185	>b9b1	30				                .byte %00110000
7186	>b9b2	60				                .byte %01100000
7187	>b9b3	7c				                .byte %01111100
7188	>b9b4	66				                .byte %01100110
7189	>b9b5	66				                .byte %01100110
7190	>b9b6	3c				                .byte %00111100
7191	>b9b7	00				                .byte %00000000

7193						                ; CHR$55 - 7
7194	>b9b8	7e				                .byte %01111110
7195	>b9b9	06				                .byte %00000110
7196	>b9ba	0c				                .byte %00001100
7197	>b9bb	18				                .byte %00011000
7198	>b9bc	30				                .byte %00110000
7199	>b9bd	30				                .byte %00110000
7200	>b9be	30				                .byte %00110000
7201	>b9bf	00				                .byte %00000000

7203						                ; CHR$56 - 8
7204	>b9c0	3c				                .byte %00111100
7205	>b9c1	66				                .byte %01100110
7206	>b9c2	66				                .byte %01100110
7207	>b9c3	3c				                .byte %00111100
7208	>b9c4	66				                .byte %01100110
7209	>b9c5	66				                .byte %01100110
7210	>b9c6	3c				                .byte %00111100
7211	>b9c7	00				                .byte %00000000

7213						                ; CHR$57 - 9
7214	>b9c8	3c				                .byte %00111100
7215	>b9c9	66				                .byte %01100110
7216	>b9ca	66				                .byte %01100110
7217	>b9cb	3e				                .byte %00111110
7218	>b9cc	06				                .byte %00000110
7219	>b9cd	0c				                .byte %00001100
7220	>b9ce	38				                .byte %00111000
7221	>b9cf	00				                .byte %00000000

7223						                ; CHR$58 - :
7224	>b9d0	00				                .byte %00000000
7225	>b9d1	00				                .byte %00000000
7226	>b9d2	18				                .byte %00011000
7227	>b9d3	18				                .byte %00011000
7228	>b9d4	00				                .byte %00000000
7229	>b9d5	18				                .byte %00011000
7230	>b9d6	18				                .byte %00011000
7231	>b9d7	00				                .byte %00000000

7233						                ; CHR$59 - ;
7234	>b9d8	00				                .byte %00000000
7235	>b9d9	00				                .byte %00000000
7236	>b9da	18				                .byte %00011000
7237	>b9db	18				                .byte %00011000
7238	>b9dc	00				                .byte %00000000
7239	>b9dd	18				                .byte %00011000
7240	>b9de	18				                .byte %00011000
7241	>b9df	30				                .byte %00110000

7243						                ; CHR$60 - <
7244	>b9e0	0c				                .byte %00001100
7245	>b9e1	18				                .byte %00011000
7246	>b9e2	30				                .byte %00110000
7247	>b9e3	60				                .byte %01100000
7248	>b9e4	30				                .byte %00110000
7249	>b9e5	18				                .byte %00011000
7250	>b9e6	0c				                .byte %00001100
7251	>b9e7	00				                .byte %00000000

7253						                ; CHR$61 - =
7254	>b9e8	00				                .byte %00000000
7255	>b9e9	00				                .byte %00000000
7256	>b9ea	7e				                .byte %01111110
7257	>b9eb	00				                .byte %00000000
7258	>b9ec	7e				                .byte %01111110
7259	>b9ed	00				                .byte %00000000
7260	>b9ee	00				                .byte %00000000
7261	>b9ef	00				                .byte %00000000

7263						                ; CHR$62 - >
7264	>b9f0	30				                .byte %00110000
7265	>b9f1	18				                .byte %00011000
7266	>b9f2	0c				                .byte %00001100
7267	>b9f3	06				                .byte %00000110
7268	>b9f4	0c				                .byte %00001100
7269	>b9f5	18				                .byte %00011000
7270	>b9f6	30				                .byte %00110000
7271	>b9f7	00				                .byte %00000000

7273						                ; CHR$63 - ?
7274	>b9f8	3c				                .byte %00111100
7275	>b9f9	66				                .byte %01100110
7276	>b9fa	0c				                .byte %00001100
7277	>b9fb	18				                .byte %00011000
7278	>b9fc	18				                .byte %00011000
7279	>b9fd	00				                .byte %00000000
7280	>b9fe	18				                .byte %00011000
7281	>b9ff	00				                .byte %00000000

7283						                ; CHR$64 - @
7284	>ba00	3c				                .byte %00111100
7285	>ba01	66				                .byte %01100110
7286	>ba02	6e				                .byte %01101110
7287	>ba03	6a				                .byte %01101010
7288	>ba04	6e				                .byte %01101110
7289	>ba05	60				                .byte %01100000
7290	>ba06	3c				                .byte %00111100
7291	>ba07	00				                .byte %00000000

7293						                ; CHR$65 - A
7294	>ba08	3c				                .byte %00111100
7295	>ba09	66				                .byte %01100110
7296	>ba0a	66				                .byte %01100110
7297	>ba0b	7e				                .byte %01111110
7298	>ba0c	66				                .byte %01100110
7299	>ba0d	66				                .byte %01100110
7300	>ba0e	66				                .byte %01100110
7301	>ba0f	00				                .byte %00000000

7303						                ; CHR$66 - B
7304	>ba10	7c				                .byte %01111100
7305	>ba11	66				                .byte %01100110
7306	>ba12	66				                .byte %01100110
7307	>ba13	7c				                .byte %01111100
7308	>ba14	66				                .byte %01100110
7309	>ba15	66				                .byte %01100110
7310	>ba16	7c				                .byte %01111100
7311	>ba17	00				                .byte %00000000

7313						                ; CHR$67 - C
7314	>ba18	3c				                .byte %00111100
7315	>ba19	66				                .byte %01100110
7316	>ba1a	60				                .byte %01100000
7317	>ba1b	60				                .byte %01100000
7318	>ba1c	60				                .byte %01100000
7319	>ba1d	66				                .byte %01100110
7320	>ba1e	3c				                .byte %00111100
7321	>ba1f	00				                .byte %00000000

7323						                ; CHR$68 - D
7324	>ba20	78				                .byte %01111000
7325	>ba21	6c				                .byte %01101100
7326	>ba22	66				                .byte %01100110
7327	>ba23	66				                .byte %01100110
7328	>ba24	66				                .byte %01100110
7329	>ba25	6c				                .byte %01101100
7330	>ba26	78				                .byte %01111000
7331	>ba27	00				                .byte %00000000

7333						                ; CHR$69 - E
7334	>ba28	7e				                .byte %01111110
7335	>ba29	60				                .byte %01100000
7336	>ba2a	60				                .byte %01100000
7337	>ba2b	7c				                .byte %01111100
7338	>ba2c	60				                .byte %01100000
7339	>ba2d	60				                .byte %01100000
7340	>ba2e	7e				                .byte %01111110
7341	>ba2f	00				                .byte %00000000

7343						                ; CHR$70 - F
7344	>ba30	7e				                .byte %01111110
7345	>ba31	60				                .byte %01100000
7346	>ba32	60				                .byte %01100000
7347	>ba33	7c				                .byte %01111100
7348	>ba34	60				                .byte %01100000
7349	>ba35	60				                .byte %01100000
7350	>ba36	60				                .byte %01100000
7351	>ba37	00				                .byte %00000000

7353						                ; CHR$71 - G
7354	>ba38	3c				                .byte %00111100
7355	>ba39	66				                .byte %01100110
7356	>ba3a	60				                .byte %01100000
7357	>ba3b	6e				                .byte %01101110
7358	>ba3c	66				                .byte %01100110
7359	>ba3d	66				                .byte %01100110
7360	>ba3e	3c				                .byte %00111100
7361	>ba3f	00				                .byte %00000000

7363						                ; CHR$72 - H
7364	>ba40	66				                .byte %01100110
7365	>ba41	66				                .byte %01100110
7366	>ba42	66				                .byte %01100110
7367	>ba43	7e				                .byte %01111110
7368	>ba44	66				                .byte %01100110
7369	>ba45	66				                .byte %01100110
7370	>ba46	66				                .byte %01100110
7371	>ba47	00				                .byte %00000000

7373						                ; CHR$73 - I
7374	>ba48	7e				                .byte %01111110
7375	>ba49	18				                .byte %00011000
7376	>ba4a	18				                .byte %00011000
7377	>ba4b	18				                .byte %00011000
7378	>ba4c	18				                .byte %00011000
7379	>ba4d	18				                .byte %00011000
7380	>ba4e	7e				                .byte %01111110
7381	>ba4f	00				                .byte %00000000

7383						                ; CHR$74 - J
7384	>ba50	3e				                .byte %00111110
7385	>ba51	0c				                .byte %00001100
7386	>ba52	0c				                .byte %00001100
7387	>ba53	0c				                .byte %00001100
7388	>ba54	0c				                .byte %00001100
7389	>ba55	6c				                .byte %01101100
7390	>ba56	38				                .byte %00111000
7391	>ba57	00				                .byte %00000000

7393						                ; CHR$75 - K
7394	>ba58	66				                .byte %01100110
7395	>ba59	6c				                .byte %01101100
7396	>ba5a	78				                .byte %01111000
7397	>ba5b	70				                .byte %01110000
7398	>ba5c	78				                .byte %01111000
7399	>ba5d	6c				                .byte %01101100
7400	>ba5e	66				                .byte %01100110
7401	>ba5f	00				                .byte %00000000

7403						                ; CHR$76 - L
7404	>ba60	60				                .byte %01100000
7405	>ba61	60				                .byte %01100000
7406	>ba62	60				                .byte %01100000
7407	>ba63	60				                .byte %01100000
7408	>ba64	60				                .byte %01100000
7409	>ba65	60				                .byte %01100000
7410	>ba66	7e				                .byte %01111110
7411	>ba67	00				                .byte %00000000

7413						                ; CHR$77 - M
7414	>ba68	63				                .byte %01100011
7415	>ba69	77				                .byte %01110111
7416	>ba6a	7f				                .byte %01111111
7417	>ba6b	6b				                .byte %01101011
7418	>ba6c	6b				                .byte %01101011
7419	>ba6d	63				                .byte %01100011
7420	>ba6e	63				                .byte %01100011
7421	>ba6f	00				                .byte %00000000

7423						                ; CHR$78 - N
7424	>ba70	66				                .byte %01100110
7425	>ba71	66				                .byte %01100110
7426	>ba72	76				                .byte %01110110
7427	>ba73	7e				                .byte %01111110
7428	>ba74	6e				                .byte %01101110
7429	>ba75	66				                .byte %01100110
7430	>ba76	66				                .byte %01100110
7431	>ba77	00				                .byte %00000000

7433						                ; CHR$79 - O
7434	>ba78	3c				                .byte %00111100
7435	>ba79	66				                .byte %01100110
7436	>ba7a	66				                .byte %01100110
7437	>ba7b	66				                .byte %01100110
7438	>ba7c	66				                .byte %01100110
7439	>ba7d	66				                .byte %01100110
7440	>ba7e	3c				                .byte %00111100
7441	>ba7f	00				                .byte %00000000

7443						                ; CHR$80 - P
7444	>ba80	7c				                .byte %01111100
7445	>ba81	66				                .byte %01100110
7446	>ba82	66				                .byte %01100110
7447	>ba83	7c				                .byte %01111100
7448	>ba84	60				                .byte %01100000
7449	>ba85	60				                .byte %01100000
7450	>ba86	60				                .byte %01100000
7451	>ba87	00				                .byte %00000000

7453						                ; CHR$81 - Q
7454	>ba88	3c				                .byte %00111100
7455	>ba89	66				                .byte %01100110
7456	>ba8a	66				                .byte %01100110
7457	>ba8b	66				                .byte %01100110
7458	>ba8c	6a				                .byte %01101010
7459	>ba8d	6c				                .byte %01101100
7460	>ba8e	36				                .byte %00110110
7461	>ba8f	00				                .byte %00000000

7463						                ; CHR$82 - R
7464	>ba90	7c				                .byte %01111100
7465	>ba91	66				                .byte %01100110
7466	>ba92	66				                .byte %01100110
7467	>ba93	7c				                .byte %01111100
7468	>ba94	6c				                .byte %01101100
7469	>ba95	66				                .byte %01100110
7470	>ba96	66				                .byte %01100110
7471	>ba97	00				                .byte %00000000

7473						                ; CHR$83 - S
7474	>ba98	3c				                .byte %00111100
7475	>ba99	66				                .byte %01100110
7476	>ba9a	60				                .byte %01100000
7477	>ba9b	3c				                .byte %00111100
7478	>ba9c	06				                .byte %00000110
7479	>ba9d	66				                .byte %01100110
7480	>ba9e	3c				                .byte %00111100
7481	>ba9f	00				                .byte %00000000

7483						                ; CHR$84 - T
7484	>baa0	7e				                .byte %01111110
7485	>baa1	18				                .byte %00011000
7486	>baa2	18				                .byte %00011000
7487	>baa3	18				                .byte %00011000
7488	>baa4	18				                .byte %00011000
7489	>baa5	18				                .byte %00011000
7490	>baa6	18				                .byte %00011000
7491	>baa7	00				                .byte %00000000

7493						                ; CHR$85 - U
7494	>baa8	66				                .byte %01100110
7495	>baa9	66				                .byte %01100110
7496	>baaa	66				                .byte %01100110
7497	>baab	66				                .byte %01100110
7498	>baac	66				                .byte %01100110
7499	>baad	66				                .byte %01100110
7500	>baae	3c				                .byte %00111100
7501	>baaf	00				                .byte %00000000

7503						                ; CHR$86 - V
7504	>bab0	66				                .byte %01100110
7505	>bab1	66				                .byte %01100110
7506	>bab2	66				                .byte %01100110
7507	>bab3	66				                .byte %01100110
7508	>bab4	66				                .byte %01100110
7509	>bab5	3c				                .byte %00111100
7510	>bab6	18				                .byte %00011000
7511	>bab7	00				                .byte %00000000

7513						                ; CHR$87 - W
7514	>bab8	63				                .byte %01100011
7515	>bab9	63				                .byte %01100011
7516	>baba	6b				                .byte %01101011
7517	>babb	6b				                .byte %01101011
7518	>babc	7f				                .byte %01111111
7519	>babd	77				                .byte %01110111
7520	>babe	63				                .byte %01100011
7521	>babf	00				                .byte %00000000

7523						                ; CHR$88 - X
7524	>bac0	66				                .byte %01100110
7525	>bac1	66				                .byte %01100110
7526	>bac2	3c				                .byte %00111100
7527	>bac3	18				                .byte %00011000
7528	>bac4	3c				                .byte %00111100
7529	>bac5	66				                .byte %01100110
7530	>bac6	66				                .byte %01100110
7531	>bac7	00				                .byte %00000000

7533						                ; CHR$89 - Y
7534	>bac8	66				                .byte %01100110
7535	>bac9	66				                .byte %01100110
7536	>baca	66				                .byte %01100110
7537	>bacb	3c				                .byte %00111100
7538	>bacc	18				                .byte %00011000
7539	>bacd	18				                .byte %00011000
7540	>bace	18				                .byte %00011000
7541	>bacf	00				                .byte %00000000

7543						                ; CHR$90 - Z
7544	>bad0	7e				                .byte %01111110
7545	>bad1	06				                .byte %00000110
7546	>bad2	0c				                .byte %00001100
7547	>bad3	18				                .byte %00011000
7548	>bad4	30				                .byte %00110000
7549	>bad5	60				                .byte %01100000
7550	>bad6	7e				                .byte %01111110
7551	>bad7	00				                .byte %00000000

7553						                ; CHR$91 - [
7554	>bad8	7c				                .byte %01111100
7555	>bad9	60				                .byte %01100000
7556	>bada	60				                .byte %01100000
7557	>badb	60				                .byte %01100000
7558	>badc	60				                .byte %01100000
7559	>badd	60				                .byte %01100000
7560	>bade	7c				                .byte %01111100
7561	>badf	00				                .byte %00000000

7563						                ; CHR$92 - \
7564	>bae0	00				                .byte %00000000
7565	>bae1	60				                .byte %01100000
7566	>bae2	30				                .byte %00110000
7567	>bae3	18				                .byte %00011000
7568	>bae4	0c				                .byte %00001100
7569	>bae5	06				                .byte %00000110
7570	>bae6	00				                .byte %00000000
7571	>bae7	00				                .byte %00000000

7573						                ; CHR$93 - ]
7574	>bae8	3e				                .byte %00111110
7575	>bae9	06				                .byte %00000110
7576	>baea	06				                .byte %00000110
7577	>baeb	06				                .byte %00000110
7578	>baec	06				                .byte %00000110
7579	>baed	06				                .byte %00000110
7580	>baee	3e				                .byte %00111110
7581	>baef	00				                .byte %00000000

7583						                ; CHR$94 - ^
7584	>baf0	18				                .byte %00011000
7585	>baf1	3c				                .byte %00111100
7586	>baf2	66				                .byte %01100110
7587	>baf3	42				                .byte %01000010
7588	>baf4	00				                .byte %00000000
7589	>baf5	00				                .byte %00000000
7590	>baf6	00				                .byte %00000000
7591	>baf7	00				                .byte %00000000

7593						                ; CHR$95 - _
7594	>baf8	00				                .byte %00000000
7595	>baf9	00				                .byte %00000000
7596	>bafa	00				                .byte %00000000
7597	>bafb	00				                .byte %00000000
7598	>bafc	00				                .byte %00000000
7599	>bafd	00				                .byte %00000000
7600	>bafe	00				                .byte %00000000
7601	>baff	ff				                .byte %11111111

7603						                ; CHR$96
7604	>bb00	1c				                .byte %00011100
7605	>bb01	36				                .byte %00110110
7606	>bb02	30				                .byte %00110000
7607	>bb03	7c				                .byte %01111100
7608	>bb04	30				                .byte %00110000
7609	>bb05	30				                .byte %00110000
7610	>bb06	7e				                .byte %01111110
7611	>bb07	00				                .byte %00000000

7613						                ; CHR$97 - a
7614	>bb08	00				                .byte %00000000
7615	>bb09	00				                .byte %00000000
7616	>bb0a	3c				                .byte %00111100
7617	>bb0b	06				                .byte %00000110
7618	>bb0c	3e				                .byte %00111110
7619	>bb0d	66				                .byte %01100110
7620	>bb0e	3e				                .byte %00111110
7621	>bb0f	00				                .byte %00000000

7623						                ; CHR$98 - b
7624	>bb10	60				                .byte %01100000
7625	>bb11	60				                .byte %01100000
7626	>bb12	7c				                .byte %01111100
7627	>bb13	66				                .byte %01100110
7628	>bb14	66				                .byte %01100110
7629	>bb15	66				                .byte %01100110
7630	>bb16	7c				                .byte %01111100
7631	>bb17	00				                .byte %00000000

7633						                ; CHR$99 - c
7634	>bb18	00				                .byte %00000000
7635	>bb19	00				                .byte %00000000
7636	>bb1a	3c				                .byte %00111100
7637	>bb1b	66				                .byte %01100110
7638	>bb1c	60				                .byte %01100000
7639	>bb1d	66				                .byte %01100110
7640	>bb1e	3c				                .byte %00111100
7641	>bb1f	00				                .byte %00000000

7643						                ; CHR$100 - d
7644	>bb20	06				                .byte %00000110
7645	>bb21	06				                .byte %00000110
7646	>bb22	3e				                .byte %00111110
7647	>bb23	66				                .byte %01100110
7648	>bb24	66				                .byte %01100110
7649	>bb25	66				                .byte %01100110
7650	>bb26	3e				                .byte %00111110
7651	>bb27	00				                .byte %00000000

7653						                ; CHR$101 - e
7654	>bb28	00				                .byte %00000000
7655	>bb29	00				                .byte %00000000
7656	>bb2a	3c				                .byte %00111100
7657	>bb2b	66				                .byte %01100110
7658	>bb2c	7e				                .byte %01111110
7659	>bb2d	60				                .byte %01100000
7660	>bb2e	3c				                .byte %00111100
7661	>bb2f	00				                .byte %00000000

7663						                ; CHR$102 - f
7664	>bb30	1c				                .byte %00011100
7665	>bb31	30				                .byte %00110000
7666	>bb32	30				                .byte %00110000
7667	>bb33	7c				                .byte %01111100
7668	>bb34	30				                .byte %00110000
7669	>bb35	30				                .byte %00110000
7670	>bb36	30				                .byte %00110000
7671	>bb37	00				                .byte %00000000

7673						                ; CHR$103 - g
7674	>bb38	00				                .byte %00000000
7675	>bb39	00				                .byte %00000000
7676	>bb3a	3e				                .byte %00111110
7677	>bb3b	66				                .byte %01100110
7678	>bb3c	66				                .byte %01100110
7679	>bb3d	3e				                .byte %00111110
7680	>bb3e	06				                .byte %00000110
7681	>bb3f	3c				                .byte %00111100

7683						                ; CHR$104 - h
7684	>bb40	60				                .byte %01100000
7685	>bb41	60				                .byte %01100000
7686	>bb42	7c				                .byte %01111100
7687	>bb43	66				                .byte %01100110
7688	>bb44	66				                .byte %01100110
7689	>bb45	66				                .byte %01100110
7690	>bb46	66				                .byte %01100110
7691	>bb47	00				                .byte %00000000

7693						                ; CHR$105 - i
7694	>bb48	18				                .byte %00011000
7695	>bb49	00				                .byte %00000000
7696	>bb4a	38				                .byte %00111000
7697	>bb4b	18				                .byte %00011000
7698	>bb4c	18				                .byte %00011000
7699	>bb4d	18				                .byte %00011000
7700	>bb4e	3c				                .byte %00111100
7701	>bb4f	00				                .byte %00000000

7703						                ; CHR$106 - j
7704	>bb50	18				                .byte %00011000
7705	>bb51	00				                .byte %00000000
7706	>bb52	38				                .byte %00111000
7707	>bb53	18				                .byte %00011000
7708	>bb54	18				                .byte %00011000
7709	>bb55	18				                .byte %00011000
7710	>bb56	18				                .byte %00011000
7711	>bb57	70				                .byte %01110000

7713						                ; CHR$107 - k
7714	>bb58	60				                .byte %01100000
7715	>bb59	60				                .byte %01100000
7716	>bb5a	66				                .byte %01100110
7717	>bb5b	6c				                .byte %01101100
7718	>bb5c	78				                .byte %01111000
7719	>bb5d	6c				                .byte %01101100
7720	>bb5e	66				                .byte %01100110
7721	>bb5f	00				                .byte %00000000

7723						                ; CHR$108 - l
7724	>bb60	38				                .byte %00111000
7725	>bb61	18				                .byte %00011000
7726	>bb62	18				                .byte %00011000
7727	>bb63	18				                .byte %00011000
7728	>bb64	18				                .byte %00011000
7729	>bb65	18				                .byte %00011000
7730	>bb66	3c				                .byte %00111100
7731	>bb67	00				                .byte %00000000

7733						                ; CHR$109 - m
7734	>bb68	00				                .byte %00000000
7735	>bb69	00				                .byte %00000000
7736	>bb6a	36				                .byte %00110110
7737	>bb6b	7f				                .byte %01111111
7738	>bb6c	6b				                .byte %01101011
7739	>bb6d	6b				                .byte %01101011
7740	>bb6e	63				                .byte %01100011
7741	>bb6f	00				                .byte %00000000

7743						                ; CHR$110 - n
7744	>bb70	00				                .byte %00000000
7745	>bb71	00				                .byte %00000000
7746	>bb72	7c				                .byte %01111100
7747	>bb73	66				                .byte %01100110
7748	>bb74	66				                .byte %01100110
7749	>bb75	66				                .byte %01100110
7750	>bb76	66				                .byte %01100110
7751	>bb77	00				                .byte %00000000

7753						                ; CHR$111 - o
7754	>bb78	00				                .byte %00000000
7755	>bb79	00				                .byte %00000000
7756	>bb7a	3c				                .byte %00111100
7757	>bb7b	66				                .byte %01100110
7758	>bb7c	66				                .byte %01100110
7759	>bb7d	66				                .byte %01100110
7760	>bb7e	3c				                .byte %00111100
7761	>bb7f	00				                .byte %00000000

7763						                ; CHR$112 - p
7764	>bb80	00				                .byte %00000000
7765	>bb81	00				                .byte %00000000
7766	>bb82	7c				                .byte %01111100
7767	>bb83	66				                .byte %01100110
7768	>bb84	66				                .byte %01100110
7769	>bb85	7c				                .byte %01111100
7770	>bb86	60				                .byte %01100000
7771	>bb87	60				                .byte %01100000

7773						                ; CHR$113 - q
7774	>bb88	00				                .byte %00000000
7775	>bb89	00				                .byte %00000000
7776	>bb8a	3e				                .byte %00111110
7777	>bb8b	66				                .byte %01100110
7778	>bb8c	66				                .byte %01100110
7779	>bb8d	3e				                .byte %00111110
7780	>bb8e	06				                .byte %00000110
7781	>bb8f	07				                .byte %00000111

7783						                ; CHR$114 - r
7784	>bb90	00				                .byte %00000000
7785	>bb91	00				                .byte %00000000
7786	>bb92	6c				                .byte %01101100
7787	>bb93	76				                .byte %01110110
7788	>bb94	60				                .byte %01100000
7789	>bb95	60				                .byte %01100000
7790	>bb96	60				                .byte %01100000
7791	>bb97	00				                .byte %00000000

7793						                ; CHR$115 - s
7794	>bb98	00				                .byte %00000000
7795	>bb99	00				                .byte %00000000
7796	>bb9a	3e				                .byte %00111110
7797	>bb9b	60				                .byte %01100000
7798	>bb9c	3c				                .byte %00111100
7799	>bb9d	06				                .byte %00000110
7800	>bb9e	7c				                .byte %01111100
7801	>bb9f	00				                .byte %00000000

7803						                ; CHR$116 - t
7804	>bba0	30				                .byte %00110000
7805	>bba1	30				                .byte %00110000
7806	>bba2	7c				                .byte %01111100
7807	>bba3	30				                .byte %00110000
7808	>bba4	30				                .byte %00110000
7809	>bba5	30				                .byte %00110000
7810	>bba6	1c				                .byte %00011100
7811	>bba7	00				                .byte %00000000

7813						                ; CHR$117 - u
7814	>bba8	00				                .byte %00000000
7815	>bba9	00				                .byte %00000000
7816	>bbaa	66				                .byte %01100110
7817	>bbab	66				                .byte %01100110
7818	>bbac	66				                .byte %01100110
7819	>bbad	66				                .byte %01100110
7820	>bbae	3e				                .byte %00111110
7821	>bbaf	00				                .byte %00000000

7823						                ; CHR$118 - v
7824	>bbb0	00				                .byte %00000000
7825	>bbb1	00				                .byte %00000000
7826	>bbb2	66				                .byte %01100110
7827	>bbb3	66				                .byte %01100110
7828	>bbb4	66				                .byte %01100110
7829	>bbb5	3c				                .byte %00111100
7830	>bbb6	18				                .byte %00011000
7831	>bbb7	00				                .byte %00000000

7833						                ; CHR$119 - w
7834	>bbb8	00				                .byte %00000000
7835	>bbb9	00				                .byte %00000000
7836	>bbba	63				                .byte %01100011
7837	>bbbb	6b				                .byte %01101011
7838	>bbbc	6b				                .byte %01101011
7839	>bbbd	7f				                .byte %01111111
7840	>bbbe	36				                .byte %00110110
7841	>bbbf	00				                .byte %00000000

7843						                ; CHR$120 - x
7844	>bbc0	00				                .byte %00000000
7845	>bbc1	00				                .byte %00000000
7846	>bbc2	66				                .byte %01100110
7847	>bbc3	3c				                .byte %00111100
7848	>bbc4	18				                .byte %00011000
7849	>bbc5	3c				                .byte %00111100
7850	>bbc6	66				                .byte %01100110
7851	>bbc7	00				                .byte %00000000

7853						                ; CHR$121 - y
7854	>bbc8	00				                .byte %00000000
7855	>bbc9	00				                .byte %00000000
7856	>bbca	66				                .byte %01100110
7857	>bbcb	66				                .byte %01100110
7858	>bbcc	66				                .byte %01100110
7859	>bbcd	3e				                .byte %00111110
7860	>bbce	06				                .byte %00000110
7861	>bbcf	3c				                .byte %00111100

7863						                ; CHR$122 - z
7864	>bbd0	00				                .byte %00000000
7865	>bbd1	00				                .byte %00000000
7866	>bbd2	7e				                .byte %01111110
7867	>bbd3	0c				                .byte %00001100
7868	>bbd4	18				                .byte %00011000
7869	>bbd5	30				                .byte %00110000
7870	>bbd6	7e				                .byte %01111110
7871	>bbd7	00				                .byte %00000000

7873						                ; CHR$123 - {
7874	>bbd8	0c				                .byte %00001100
7875	>bbd9	18				                .byte %00011000
7876	>bbda	18				                .byte %00011000
7877	>bbdb	70				                .byte %01110000
7878	>bbdc	18				                .byte %00011000
7879	>bbdd	18				                .byte %00011000
7880	>bbde	0c				                .byte %00001100
7881	>bbdf	00				                .byte %00000000

7883						                ; CHR$124 - |
7884	>bbe0	18				                .byte %00011000
7885	>bbe1	18				                .byte %00011000
7886	>bbe2	18				                .byte %00011000
7887	>bbe3	00				                .byte %00000000
7888	>bbe4	18				                .byte %00011000
7889	>bbe5	18				                .byte %00011000
7890	>bbe6	18				                .byte %00011000
7891	>bbe7	00				                .byte %00000000

7893						                ; CHR$125 - }
7894	>bbe8	30				                .byte %00110000
7895	>bbe9	18				                .byte %00011000
7896	>bbea	18				                .byte %00011000
7897	>bbeb	0e				                .byte %00001110
7898	>bbec	18				                .byte %00011000
7899	>bbed	18				                .byte %00011000
7900	>bbee	30				                .byte %00110000
7901	>bbef	00				                .byte %00000000

7903						                ; CHR$126 - ~
7904	>bbf0	31				                .byte %00110001
7905	>bbf1	6b				                .byte %01101011
7906	>bbf2	46				                .byte %01000110
7907	>bbf3	00				                .byte %00000000
7908	>bbf4	00				                .byte %00000000
7909	>bbf5	00				                .byte %00000000
7910	>bbf6	00				                .byte %00000000
7911	>bbf7	00				                .byte %00000000

7913						                ; CHR$127
7914	.bbf8					chr127:
7915	>bbf8	ff				                .byte %11111111
7916	>bbf9	ff				                .byte %11111111
7917	>bbfa	ff				                .byte %11111111
7918	>bbfb	ff				                .byte %11111111
7919	>bbfc	ff				                .byte %11111111
7920	>bbfd	ff				                .byte %11111111
7921	>bbfe	ff				                .byte %11111111
7922	>bbff	ff				                .byte %11111111

7924						                ; CHR$128
7935	>bc00	66				                .byte %01100110
7936	>bc01	00				                .byte %00000000
7937	>bc02	3c				                .byte %00111100
7938	>bc03	66				                .byte %01100110
7939	>bc04	7e				                .byte %01111110
7940	>bc05	66				                .byte %01100110
7941	>bc06	66				                .byte %01100110
7942	>bc07	00				                .byte %00000000

7945						                ; CHR$129
7956	>bc08	3c				                .byte %00111100
7957	>bc09	66				                .byte %01100110
7958	>bc0a	3c				                .byte %00111100
7959	>bc0b	66				                .byte %01100110
7960	>bc0c	7e				                .byte %01111110
7961	>bc0d	66				                .byte %01100110
7962	>bc0e	66				                .byte %01100110
7963	>bc0f	00				                .byte %00000000

7966						                ; CHR$130
7967	>bc10	3f				                .byte %00111111
7968	>bc11	66				                .byte %01100110
7969	>bc12	66				                .byte %01100110
7970	>bc13	7f				                .byte %01111111
7971	>bc14	66				                .byte %01100110
7972	>bc15	66				                .byte %01100110
7973	>bc16	67				                .byte %01100111
7974	>bc17	00				                .byte %00000000

7976						                ; CHR$131
7987	>bc18	3c				                .byte %00111100
7988	>bc19	66				                .byte %01100110
7989	>bc1a	60				                .byte %01100000
7990	>bc1b	60				                .byte %01100000
7991	>bc1c	60				                .byte %01100000
7992	>bc1d	66				                .byte %01100110
7993	>bc1e	3c				                .byte %00111100
7994	>bc1f	60				                .byte %01100000

7997						                ; CHR$132
7998	>bc20	0c				                .byte %00001100
7999	>bc21	18				                .byte %00011000
8000	>bc22	7e				                .byte %01111110
8001	>bc23	60				                .byte %01100000
8002	>bc24	7c				                .byte %01111100
8003	>bc25	60				                .byte %01100000
8004	>bc26	7e				                .byte %01111110
8005	>bc27	00				                .byte %00000000

8007						                ; CHR$133
8018	>bc28	66				                .byte %01100110
8019	>bc29	3c				                .byte %00111100
8020	>bc2a	66				                .byte %01100110
8021	>bc2b	66				                .byte %01100110
8022	>bc2c	66				                .byte %01100110
8023	>bc2d	66				                .byte %01100110
8024	>bc2e	3c				                .byte %00111100
8025	>bc2f	00				                .byte %00000000

8028						                ; CHR$134
8029	>bc30	66				                .byte %01100110
8030	>bc31	00				                .byte %00000000
8031	>bc32	66				                .byte %01100110
8032	>bc33	66				                .byte %01100110
8033	>bc34	66				                .byte %01100110
8034	>bc35	66				                .byte %01100110
8035	>bc36	3c				                .byte %00111100
8036	>bc37	00				                .byte %00000000

8038						                ; CHR$135
8049	>bc38	7e				                .byte %01111110
8050	>bc39	c3				                .byte %11000011
8051	>bc3a	9d				                .byte %10011101
8052	>bc3b	b1				                .byte %10110001
8053	>bc3c	9d				                .byte %10011101
8054	>bc3d	c3				                .byte %11000011
8055	>bc3e	7e				                .byte %01111110
8056	>bc3f	00				                .byte %00000000

8059						                ; CHR$136
8060	>bc40	00				                .byte %00000000
8061	>bc41	18				                .byte %00011000
8062	>bc42	38				                .byte %00111000
8063	>bc43	7f				                .byte %01111111
8064	>bc44	38				                .byte %00111000
8065	>bc45	18				                .byte %00011000
8066	>bc46	00				                .byte %00000000
8067	>bc47	00				                .byte %00000000

8069						                ; CHR$137
8070	>bc48	00				                .byte %00000000
8071	>bc49	18				                .byte %00011000
8072	>bc4a	1c				                .byte %00011100
8073	>bc4b	fe				                .byte %11111110
8074	>bc4c	1c				                .byte %00011100
8075	>bc4d	18				                .byte %00011000
8076	>bc4e	00				                .byte %00000000
8077	>bc4f	00				                .byte %00000000

8079						                ; CHR$138
8080	>bc50	18				                .byte %00011000
8081	>bc51	18				                .byte %00011000
8082	>bc52	18				                .byte %00011000
8083	>bc53	18				                .byte %00011000
8084	>bc54	7e				                .byte %01111110
8085	>bc55	3c				                .byte %00111100
8086	>bc56	18				                .byte %00011000
8087	>bc57	00				                .byte %00000000

8089						                ; CHR$139
8090	>bc58	00				                .byte %00000000
8091	>bc59	18				                .byte %00011000
8092	>bc5a	3c				                .byte %00111100
8093	>bc5b	7e				                .byte %01111110
8094	>bc5c	18				                .byte %00011000
8095	>bc5d	18				                .byte %00011000
8096	>bc5e	18				                .byte %00011000
8097	>bc5f	18				                .byte %00011000

8099						                ; CHR$140
8100	>bc60	30				                .byte %00110000
8101	>bc61	18				                .byte %00011000
8102	>bc62	3c				                .byte %00111100
8103	>bc63	06				                .byte %00000110
8104	>bc64	3e				                .byte %00111110
8105	>bc65	66				                .byte %01100110
8106	>bc66	3e				                .byte %00111110
8107	>bc67	00				                .byte %00000000

8109						                ; CHR$141
8110	>bc68	30				                .byte %00110000
8111	>bc69	18				                .byte %00011000
8112	>bc6a	3c				                .byte %00111100
8113	>bc6b	66				                .byte %01100110
8114	>bc6c	7e				                .byte %01111110
8115	>bc6d	60				                .byte %01100000
8116	>bc6e	3c				                .byte %00111100
8117	>bc6f	00				                .byte %00000000

8119						                ; CHR$142
8120	>bc70	66				                .byte %01100110
8121	>bc71	00				                .byte %00000000
8122	>bc72	3c				                .byte %00111100
8123	>bc73	66				                .byte %01100110
8124	>bc74	7e				                .byte %01111110
8125	>bc75	60				                .byte %01100000
8126	>bc76	3c				                .byte %00111100
8127	>bc77	00				                .byte %00000000

8129						                ; CHR$143
8130	>bc78	3c				                .byte %00111100
8131	>bc79	66				                .byte %01100110
8132	>bc7a	3c				                .byte %00111100
8133	>bc7b	66				                .byte %01100110
8134	>bc7c	7e				                .byte %01111110
8135	>bc7d	60				                .byte %01100000
8136	>bc7e	3c				                .byte %00111100
8137	>bc7f	00				                .byte %00000000

8139						                ; CHR$144
8140	>bc80	66				                .byte %01100110
8141	>bc81	00				                .byte %00000000
8142	>bc82	3c				                .byte %00111100
8143	>bc83	06				                .byte %00000110
8144	>bc84	3e				                .byte %00111110
8145	>bc85	66				                .byte %01100110
8146	>bc86	3e				                .byte %00111110
8147	>bc87	00				                .byte %00000000

8149						                ; CHR$145
8150	>bc88	3c				                .byte %00111100
8151	>bc89	66				                .byte %01100110
8152	>bc8a	3c				                .byte %00111100
8153	>bc8b	06				                .byte %00000110
8154	>bc8c	3e				                .byte %00111110
8155	>bc8d	66				                .byte %01100110
8156	>bc8e	3e				                .byte %00111110
8157	>bc8f	00				                .byte %00000000

8159						                ; CHR$146
8160	>bc90	00				                .byte %00000000
8161	>bc91	00				                .byte %00000000
8162	>bc92	3f				                .byte %00111111
8163	>bc93	0d				                .byte %00001101
8164	>bc94	3f				                .byte %00111111
8165	>bc95	6c				                .byte %01101100
8166	>bc96	3f				                .byte %00111111
8167	>bc97	00				                .byte %00000000

8169						                ; CHR$147
8170	>bc98	00				                .byte %00000000
8171	>bc99	00				                .byte %00000000
8172	>bc9a	3c				                .byte %00111100
8173	>bc9b	66				                .byte %01100110
8174	>bc9c	60				                .byte %01100000
8175	>bc9d	66				                .byte %01100110
8176	>bc9e	3c				                .byte %00111100
8177	>bc9f	60				                .byte %01100000

8179						                ; CHR$148
8180	>bca0	0c				                .byte %00001100
8181	>bca1	18				                .byte %00011000
8182	>bca2	3c				                .byte %00111100
8183	>bca3	66				                .byte %01100110
8184	>bca4	7e				                .byte %01111110
8185	>bca5	60				                .byte %01100000
8186	>bca6	3c				                .byte %00111100
8187	>bca7	00				                .byte %00000000

8189						                ; CHR$149
8200	>bca8	66				                .byte %01100110
8201	>bca9	00				                .byte %00000000
8202	>bcaa	3c				                .byte %00111100
8203	>bcab	66				                .byte %01100110
8204	>bcac	66				                .byte %01100110
8205	>bcad	66				                .byte %01100110
8206	>bcae	3c				                .byte %00111100
8207	>bcaf	00				                .byte %00000000

8210						                ; CHR$150
8221	>bcb0	66				                .byte %01100110
8222	>bcb1	00				                .byte %00000000
8223	>bcb2	66				                .byte %01100110
8224	>bcb3	66				                .byte %01100110
8225	>bcb4	66				                .byte %01100110
8226	>bcb5	66				                .byte %01100110
8227	>bcb6	3e				                .byte %00111110
8228	>bcb7	00				                .byte %00000000

8231						                ; CHR$151
8232	>bcb8	30				                .byte %00110000
8233	>bcb9	18				                .byte %00011000
8234	>bcba	00				                .byte %00000000
8235	>bcbb	38				                .byte %00111000
8236	>bcbc	18				                .byte %00011000
8237	>bcbd	18				                .byte %00011000
8238	>bcbe	3c				                .byte %00111100
8239	>bcbf	00				                .byte %00000000

8241						                ; CHR$152
8242	>bcc0	3c				                .byte %00111100
8243	>bcc1	66				                .byte %01100110
8244	>bcc2	00				                .byte %00000000
8245	>bcc3	38				                .byte %00111000
8246	>bcc4	18				                .byte %00011000
8247	>bcc5	18				                .byte %00011000
8248	>bcc6	3c				                .byte %00111100
8249	>bcc7	00				                .byte %00000000

8251						                ; CHR$153
8252	>bcc8	30				                .byte %00110000
8253	>bcc9	18				                .byte %00011000
8254	>bcca	00				                .byte %00000000
8255	>bccb	3c				                .byte %00111100
8256	>bccc	66				                .byte %01100110
8257	>bccd	66				                .byte %01100110
8258	>bcce	3c				                .byte %00111100
8259	>bccf	00				                .byte %00000000

8261						                ; CHR$154
8262	>bcd0	3c				                .byte %00111100
8263	>bcd1	66				                .byte %01100110
8264	>bcd2	00				                .byte %00000000
8265	>bcd3	3c				                .byte %00111100
8266	>bcd4	66				                .byte %01100110
8267	>bcd5	66				                .byte %01100110
8268	>bcd6	3c				                .byte %00111100
8269	>bcd7	00				                .byte %00000000

8271						                ; CHR$155
8272	>bcd8	30				                .byte %00110000
8273	>bcd9	18				                .byte %00011000
8274	>bcda	00				                .byte %00000000
8275	>bcdb	66				                .byte %01100110
8276	>bcdc	66				                .byte %01100110
8277	>bcdd	66				                .byte %01100110
8278	>bcde	3e				                .byte %00111110
8279	>bcdf	00				                .byte %00000000

8281						                ; CHR$156
8282	>bce0	3c				                .byte %00111100
8283	>bce1	66				                .byte %01100110
8284	>bce2	00				                .byte %00000000
8285	>bce3	66				                .byte %01100110
8286	>bce4	66				                .byte %01100110
8287	>bce5	66				                .byte %01100110
8288	>bce6	3e				                .byte %00111110
8289	>bce7	00				                .byte %00000000

8291						                ; CHR$157
8292	>bce8	66				                .byte %01100110
8293	>bce9	00				                .byte %00000000
8294	>bcea	66				                .byte %01100110
8295	>bceb	66				                .byte %01100110
8296	>bcec	66				                .byte %01100110
8297	>bced	3e				                .byte %00111110
8298	>bcee	06				                .byte %00000110
8299	>bcef	3c				                .byte %00111100

8301						                ; CHR$158
8302	>bcf0	00				                .byte %00000000
8303	>bcf1	66				                .byte %01100110
8304	>bcf2	3c				                .byte %00111100
8305	>bcf3	66				                .byte %01100110
8306	>bcf4	66				                .byte %01100110
8307	>bcf5	3c				                .byte %00111100
8308	>bcf6	66				                .byte %01100110
8309	>bcf7	00				                .byte %00000000

8311						                ; CHR$159
8312	>bcf8	3c				                .byte %00111100
8313	>bcf9	60				                .byte %01100000
8314	>bcfa	3c				                .byte %00111100
8315	>bcfb	66				                .byte %01100110
8316	>bcfc	3c				                .byte %00111100
8317	>bcfd	06				                .byte %00000110
8318	>bcfe	3c				                .byte %00111100
8319	>bcff	00				                .byte %00000000

8321						                ; CHR$160
8322	>bd00	3c				                .byte %00111100
8323	>bd01	66				                .byte %01100110
8324	>bd02	3c				                .byte %00111100
8325	>bd03	00				                .byte %00000000
8326	>bd04	00				                .byte %00000000
8327	>bd05	00				                .byte %00000000
8328	>bd06	00				                .byte %00000000
8329	>bd07	00				                .byte %00000000

8331						                ; CHR$161
8332	>bd08	00				                .byte %00000000
8333	>bd09	00				                .byte %00000000
8334	>bd0a	00				                .byte %00000000
8335	>bd0b	18				                .byte %00011000
8336	>bd0c	18				                .byte %00011000
8337	>bd0d	18				                .byte %00011000
8338	>bd0e	18				                .byte %00011000
8339	>bd0f	18				                .byte %00011000

8341						                ; CHR$162
8342	>bd10	00				                .byte %00000000
8343	>bd11	00				                .byte %00000000
8344	>bd12	00				                .byte %00000000
8345	>bd13	1f				                .byte %00011111
8346	>bd14	00				                .byte %00000000
8347	>bd15	00				                .byte %00000000
8348	>bd16	00				                .byte %00000000
8349	>bd17	00				                .byte %00000000

8351						                ; CHR$163
8352	>bd18	00				                .byte %00000000
8353	>bd19	00				                .byte %00000000
8354	>bd1a	00				                .byte %00000000
8355	>bd1b	1f				                .byte %00011111
8356	>bd1c	18				                .byte %00011000
8357	>bd1d	18				                .byte %00011000
8358	>bd1e	18				                .byte %00011000
8359	>bd1f	18				                .byte %00011000

8361						                ; CHR$164
8362	>bd20	00				                .byte %00000000
8363	>bd21	00				                .byte %00000000
8364	>bd22	00				                .byte %00000000
8365	>bd23	f8				                .byte %11111000
8366	>bd24	00				                .byte %00000000
8367	>bd25	00				                .byte %00000000
8368	>bd26	00				                .byte %00000000
8369	>bd27	00				                .byte %00000000

8371						                ; CHR$165
8372	>bd28	00				                .byte %00000000
8373	>bd29	00				                .byte %00000000
8374	>bd2a	00				                .byte %00000000
8375	>bd2b	f8				                .byte %11111000
8376	>bd2c	18				                .byte %00011000
8377	>bd2d	18				                .byte %00011000
8378	>bd2e	18				                .byte %00011000
8379	>bd2f	18				                .byte %00011000

8381						                ; CHR$166
8382	>bd30	00				                .byte %00000000
8383	>bd31	00				                .byte %00000000
8384	>bd32	00				                .byte %00000000
8385	>bd33	ff				                .byte %11111111
8386	>bd34	00				                .byte %00000000
8387	>bd35	00				                .byte %00000000
8388	>bd36	00				                .byte %00000000
8389	>bd37	00				                .byte %00000000

8391						                ; CHR$167
8392	>bd38	00				                .byte %00000000
8393	>bd39	00				                .byte %00000000
8394	>bd3a	00				                .byte %00000000
8395	>bd3b	ff				                .byte %11111111
8396	>bd3c	18				                .byte %00011000
8397	>bd3d	18				                .byte %00011000
8398	>bd3e	18				                .byte %00011000
8399	>bd3f	18				                .byte %00011000

8401						                ; CHR$168
8402	>bd40	18				                .byte %00011000
8403	>bd41	18				                .byte %00011000
8404	>bd42	18				                .byte %00011000
8405	>bd43	18				                .byte %00011000
8406	>bd44	00				                .byte %00000000
8407	>bd45	00				                .byte %00000000
8408	>bd46	00				                .byte %00000000
8409	>bd47	00				                .byte %00000000

8411						                ; CHR$169
8412	>bd48	18				                .byte %00011000
8413	>bd49	18				                .byte %00011000
8414	>bd4a	18				                .byte %00011000
8415	>bd4b	18				                .byte %00011000
8416	>bd4c	18				                .byte %00011000
8417	>bd4d	18				                .byte %00011000
8418	>bd4e	18				                .byte %00011000
8419	>bd4f	18				                .byte %00011000

8421						                ; CHR$170
8422	>bd50	18				                .byte %00011000
8423	>bd51	18				                .byte %00011000
8424	>bd52	18				                .byte %00011000
8425	>bd53	1f				                .byte %00011111
8426	>bd54	00				                .byte %00000000
8427	>bd55	00				                .byte %00000000
8428	>bd56	00				                .byte %00000000
8429	>bd57	00				                .byte %00000000

8431						                ; CHR$171
8432	>bd58	18				                .byte %00011000
8433	>bd59	18				                .byte %00011000
8434	>bd5a	18				                .byte %00011000
8435	>bd5b	1f				                .byte %00011111
8436	>bd5c	18				                .byte %00011000
8437	>bd5d	18				                .byte %00011000
8438	>bd5e	18				                .byte %00011000
8439	>bd5f	18				                .byte %00011000

8441						                ; CHR$172
8442	>bd60	18				                .byte %00011000
8443	>bd61	18				                .byte %00011000
8444	>bd62	18				                .byte %00011000
8445	>bd63	f8				                .byte %11111000
8446	>bd64	00				                .byte %00000000
8447	>bd65	00				                .byte %00000000
8448	>bd66	00				                .byte %00000000
8449	>bd67	00				                .byte %00000000

8451						                ; CHR$173
8452	>bd68	18				                .byte %00011000
8453	>bd69	18				                .byte %00011000
8454	>bd6a	18				                .byte %00011000
8455	>bd6b	f8				                .byte %11111000
8456	>bd6c	18				                .byte %00011000
8457	>bd6d	18				                .byte %00011000
8458	>bd6e	18				                .byte %00011000
8459	>bd6f	18				                .byte %00011000

8461						                ; CHR$174
8462	>bd70	18				                .byte %00011000
8463	>bd71	18				                .byte %00011000
8464	>bd72	18				                .byte %00011000
8465	>bd73	ff				                .byte %11111111
8466	>bd74	00				                .byte %00000000
8467	>bd75	00				                .byte %00000000
8468	>bd76	00				                .byte %00000000
8469	>bd77	00				                .byte %00000000

8471						                ; CHR$175
8472	>bd78	18				                .byte %00011000
8473	>bd79	18				                .byte %00011000
8474	>bd7a	18				                .byte %00011000
8475	>bd7b	ff				                .byte %11111111
8476	>bd7c	18				                .byte %00011000
8477	>bd7d	18				                .byte %00011000
8478	>bd7e	18				                .byte %00011000
8479	>bd7f	18				                .byte %00011000

8481						                ; CHR$176
8482	>bd80	00				                .byte %00000000
8483	>bd81	00				                .byte %00000000
8484	>bd82	00				                .byte %00000000
8485	>bd83	07				                .byte %00000111
8486	>bd84	0c				                .byte %00001100
8487	>bd85	18				                .byte %00011000
8488	>bd86	18				                .byte %00011000
8489	>bd87	18				                .byte %00011000

8491						                ; CHR$177
8492	>bd88	00				                .byte %00000000
8493	>bd89	00				                .byte %00000000
8494	>bd8a	00				                .byte %00000000
8495	>bd8b	e0				                .byte %11100000
8496	>bd8c	30				                .byte %00110000
8497	>bd8d	18				                .byte %00011000
8498	>bd8e	18				                .byte %00011000
8499	>bd8f	18				                .byte %00011000

8501						                ; CHR$178
8502	>bd90	18				                .byte %00011000
8503	>bd91	18				                .byte %00011000
8504	>bd92	0c				                .byte %00001100
8505	>bd93	07				                .byte %00000111
8506	>bd94	00				                .byte %00000000
8507	>bd95	00				                .byte %00000000
8508	>bd96	00				                .byte %00000000
8509	>bd97	00				                .byte %00000000

8511						                ; CHR$179
8512	>bd98	18				                .byte %00011000
8513	>bd99	18				                .byte %00011000
8514	>bd9a	30				                .byte %00110000
8515	>bd9b	e0				                .byte %11100000
8516	>bd9c	00				                .byte %00000000
8517	>bd9d	00				                .byte %00000000
8518	>bd9e	00				                .byte %00000000
8519	>bd9f	00				                .byte %00000000

8521						                ; CHR$180
8522	>bda0	18				                .byte %00011000
8523	>bda1	00				                .byte %00000000
8524	>bda2	18				                .byte %00011000
8525	>bda3	18				                .byte %00011000
8526	>bda4	30				                .byte %00110000
8527	>bda5	66				                .byte %01100110
8528	>bda6	3c				                .byte %00111100
8529	>bda7	00				                .byte %00000000

8531						                ; CHR$181
8532	>bda8	18				                .byte %00011000
8533	>bda9	00				                .byte %00000000
8534	>bdaa	18				                .byte %00011000
8535	>bdab	18				                .byte %00011000
8536	>bdac	18				                .byte %00011000
8537	>bdad	18				                .byte %00011000
8538	>bdae	18				                .byte %00011000
8539	>bdaf	00				                .byte %00000000

8541						                ; CHR$182
8542	>bdb0	36				                .byte %00110110
8543	>bdb1	6c				                .byte %01101100
8544	>bdb2	00				                .byte %00000000
8545	>bdb3	66				                .byte %01100110
8546	>bdb4	76				                .byte %01110110
8547	>bdb5	6e				                .byte %01101110
8548	>bdb6	66				                .byte %01100110
8549	>bdb7	00				                .byte %00000000

8551						                ; CHR$183
8552	>bdb8	36				                .byte %00110110
8553	>bdb9	6c				                .byte %01101100
8554	>bdba	00				                .byte %00000000
8555	>bdbb	7c				                .byte %01111100
8556	>bdbc	66				                .byte %01100110
8557	>bdbd	66				                .byte %01100110
8558	>bdbe	66				                .byte %01100110
8559	>bdbf	00				                .byte %00000000

8561						                ; CHR$184
8562	>bdc0	18				                .byte %00011000
8563	>bdc1	7e				                .byte %01111110
8564	>bdc2	18				                .byte %00011000
8565	>bdc3	18				                .byte %00011000
8566	>bdc4	18				                .byte %00011000
8567	>bdc5	18				                .byte %00011000
8568	>bdc6	18				                .byte %00011000
8569	>bdc7	00				                .byte %00000000

8571						                ; CHR$185
8572	>bdc8	18				                .byte %00011000
8573	>bdc9	7e				                .byte %01111110
8574	>bdca	18				                .byte %00011000
8575	>bdcb	18				                .byte %00011000
8576	>bdcc	18				                .byte %00011000
8577	>bdcd	7e				                .byte %01111110
8578	>bdce	18				                .byte %00011000
8579	>bdcf	00				                .byte %00000000

8581						                ; CHR$186
8592	>bdd0	18				                .byte %00011000
8593	>bdd1	18				                .byte %00011000
8594	>bdd2	18				                .byte %00011000
8595	>bdd3	00				                .byte %00000000
8596	>bdd4	00				                .byte %00000000
8597	>bdd5	00				                .byte %00000000
8598	>bdd6	00				                .byte %00000000
8599	>bdd7	00				                .byte %00000000

8602						                ; CHR$187
8613	>bdd8	30				                .byte %00110000
8614	>bdd9	18				                .byte %00011000
8615	>bdda	0c				                .byte %00001100
8616	>bddb	00				                .byte %00000000
8617	>bddc	00				                .byte %00000000
8618	>bddd	00				                .byte %00000000
8619	>bdde	00				                .byte %00000000
8620	>bddf	00				                .byte %00000000

8623						                ; CHR$188
8634	>bde0	3f				                .byte %00111111
8635	>bde1	7b				                .byte %01111011
8636	>bde2	7b				                .byte %01111011
8637	>bde3	3b				                .byte %00111011
8638	>bde4	1b				                .byte %00011011
8639	>bde5	1b				                .byte %00011011
8640	>bde6	1f				                .byte %00011111
8641	>bde7	00				                .byte %00000000

8644						                ; CHR$189
8645	>bde8	00				                .byte %00000000
8646	>bde9	00				                .byte %00000000
8647	>bdea	00				                .byte %00000000
8648	>bdeb	18				                .byte %00011000
8649	>bdec	18				                .byte %00011000
8650	>bded	00				                .byte %00000000
8651	>bdee	00				                .byte %00000000
8652	>bdef	00				                .byte %00000000

8654						                ; CHR$190
8655	>bdf0	03				                .byte %00000011
8656	>bdf1	03				                .byte %00000011
8657	>bdf2	06				                .byte %00000110
8658	>bdf3	06				                .byte %00000110
8659	>bdf4	76				                .byte %01110110
8660	>bdf5	1c				                .byte %00011100
8661	>bdf6	0c				                .byte %00001100
8662	>bdf7	00				                .byte %00000000

8664						                ; CHR$191
8665	>bdf8	aa				                .byte %10101010
8666	>bdf9	55				                .byte %01010101
8667	>bdfa	aa				                .byte %10101010
8668	>bdfb	55				                .byte %01010101
8669	>bdfc	aa				                .byte %10101010
8670	>bdfd	55				                .byte %01010101
8671	>bdfe	aa				                .byte %10101010
8672	>bdff	55				                .byte %01010101

8674						                ; CHR$192
8675	>be00	3e				                .byte %00111110
8676	>be01	63				                .byte %01100011
8677	>be02	67				                .byte %01100111
8678	>be03	6b				                .byte %01101011
8679	>be04	73				                .byte %01110011
8680	>be05	63				                .byte %01100011
8681	>be06	3e				                .byte %00111110
8682	>be07	00				                .byte %00000000

8684						                ; CHR$193
8685	>be08	1c				                .byte %00011100
8686	>be09	36				                .byte %00110110
8687	>be0a	63				                .byte %01100011
8688	>be0b	63				                .byte %01100011
8689	>be0c	7f				                .byte %01111111
8690	>be0d	63				                .byte %01100011
8691	>be0e	63				                .byte %01100011
8692	>be0f	00				                .byte %00000000

8694						                ; CHR$194
8695	>be10	7e				                .byte %01111110
8696	>be11	33				                .byte %00110011
8697	>be12	33				                .byte %00110011
8698	>be13	3e				                .byte %00111110
8699	>be14	33				                .byte %00110011
8700	>be15	33				                .byte %00110011
8701	>be16	7e				                .byte %01111110
8702	>be17	00				                .byte %00000000

8704						                ; CHR$195
8705	>be18	7f				                .byte %01111111
8706	>be19	63				                .byte %01100011
8707	>be1a	60				                .byte %01100000
8708	>be1b	60				                .byte %01100000
8709	>be1c	60				                .byte %01100000
8710	>be1d	60				                .byte %01100000
8711	>be1e	60				                .byte %01100000
8712	>be1f	00				                .byte %00000000

8714						                ; CHR$196
8715	>be20	1c				                .byte %00011100
8716	>be21	1c				                .byte %00011100
8717	>be22	36				                .byte %00110110
8718	>be23	36				                .byte %00110110
8719	>be24	63				                .byte %01100011
8720	>be25	63				                .byte %01100011
8721	>be26	7f				                .byte %01111111
8722	>be27	00				                .byte %00000000

8724						                ; CHR$197
8725	>be28	7f				                .byte %01111111
8726	>be29	33				                .byte %00110011
8727	>be2a	30				                .byte %00110000
8728	>be2b	3e				                .byte %00111110
8729	>be2c	30				                .byte %00110000
8730	>be2d	33				                .byte %00110011
8731	>be2e	7f				                .byte %01111111
8732	>be2f	00				                .byte %00000000

8734						                ; CHR$198
8735	>be30	7e				                .byte %01111110
8736	>be31	66				                .byte %01100110
8737	>be32	0c				                .byte %00001100
8738	>be33	18				                .byte %00011000
8739	>be34	30				                .byte %00110000
8740	>be35	66				                .byte %01100110
8741	>be36	7e				                .byte %01111110
8742	>be37	00				                .byte %00000000

8744						                ; CHR$199
8745	>be38	77				                .byte %01110111
8746	>be39	33				                .byte %00110011
8747	>be3a	33				                .byte %00110011
8748	>be3b	3f				                .byte %00111111
8749	>be3c	33				                .byte %00110011
8750	>be3d	33				                .byte %00110011
8751	>be3e	77				                .byte %01110111
8752	>be3f	00				                .byte %00000000

8754						                ; CHR$200
8755	>be40	3e				                .byte %00111110
8756	>be41	63				                .byte %01100011
8757	>be42	63				                .byte %01100011
8758	>be43	7f				                .byte %01111111
8759	>be44	63				                .byte %01100011
8760	>be45	63				                .byte %01100011
8761	>be46	3e				                .byte %00111110
8762	>be47	00				                .byte %00000000

8764						                ; CHR$201
8765	>be48	3c				                .byte %00111100
8766	>be49	18				                .byte %00011000
8767	>be4a	18				                .byte %00011000
8768	>be4b	18				                .byte %00011000
8769	>be4c	18				                .byte %00011000
8770	>be4d	18				                .byte %00011000
8771	>be4e	3c				                .byte %00111100
8772	>be4f	00				                .byte %00000000

8774						                ; CHR$202
8775	>be50	63				                .byte %01100011
8776	>be51	66				                .byte %01100110
8777	>be52	6c				                .byte %01101100
8778	>be53	78				                .byte %01111000
8779	>be54	6c				                .byte %01101100
8780	>be55	66				                .byte %01100110
8781	>be56	63				                .byte %01100011
8782	>be57	00				                .byte %00000000

8784						                ; CHR$203
8785	>be58	1c				                .byte %00011100
8786	>be59	1c				                .byte %00011100
8787	>be5a	36				                .byte %00110110
8788	>be5b	36				                .byte %00110110
8789	>be5c	63				                .byte %01100011
8790	>be5d	63				                .byte %01100011
8791	>be5e	63				                .byte %01100011
8792	>be5f	00				                .byte %00000000

8794						                ; CHR$204
8795	>be60	63				                .byte %01100011
8796	>be61	77				                .byte %01110111
8797	>be62	7f				                .byte %01111111
8798	>be63	6b				                .byte %01101011
8799	>be64	63				                .byte %01100011
8800	>be65	63				                .byte %01100011
8801	>be66	63				                .byte %01100011
8802	>be67	00				                .byte %00000000

8804						                ; CHR$205
8805	>be68	63				                .byte %01100011
8806	>be69	73				                .byte %01110011
8807	>be6a	7b				                .byte %01111011
8808	>be6b	6f				                .byte %01101111
8809	>be6c	67				                .byte %01100111
8810	>be6d	63				                .byte %01100011
8811	>be6e	63				                .byte %01100011
8812	>be6f	00				                .byte %00000000

8814						                ; CHR$206
8815	>be70	7e				                .byte %01111110
8816	>be71	00				                .byte %00000000
8817	>be72	00				                .byte %00000000
8818	>be73	3c				                .byte %00111100
8819	>be74	00				                .byte %00000000
8820	>be75	00				                .byte %00000000
8821	>be76	7e				                .byte %01111110
8822	>be77	00				                .byte %00000000

8824						                ; CHR$207
8825	>be78	3e				                .byte %00111110
8826	>be79	63				                .byte %01100011
8827	>be7a	63				                .byte %01100011
8828	>be7b	63				                .byte %01100011
8829	>be7c	63				                .byte %01100011
8830	>be7d	63				                .byte %01100011
8831	>be7e	3e				                .byte %00111110
8832	>be7f	00				                .byte %00000000

8834						                ; CHR$208
8835	>be80	7f				                .byte %01111111
8836	>be81	36				                .byte %00110110
8837	>be82	36				                .byte %00110110
8838	>be83	36				                .byte %00110110
8839	>be84	36				                .byte %00110110
8840	>be85	36				                .byte %00110110
8841	>be86	36				                .byte %00110110
8842	>be87	00				                .byte %00000000

8844						                ; CHR$209
8845	>be88	7e				                .byte %01111110
8846	>be89	33				                .byte %00110011
8847	>be8a	33				                .byte %00110011
8848	>be8b	3e				                .byte %00111110
8849	>be8c	30				                .byte %00110000
8850	>be8d	30				                .byte %00110000
8851	>be8e	78				                .byte %01111000
8852	>be8f	00				                .byte %00000000

8854						                ; CHR$210
8855	>be90	7f				                .byte %01111111
8856	>be91	63				                .byte %01100011
8857	>be92	30				                .byte %00110000
8858	>be93	18				                .byte %00011000
8859	>be94	30				                .byte %00110000
8860	>be95	63				                .byte %01100011
8861	>be96	7f				                .byte %01111111
8862	>be97	00				                .byte %00000000

8864						                ; CHR$211
8865	>be98	7e				                .byte %01111110
8866	>be99	5a				                .byte %01011010
8867	>be9a	18				                .byte %00011000
8868	>be9b	18				                .byte %00011000
8869	>be9c	18				                .byte %00011000
8870	>be9d	18				                .byte %00011000
8871	>be9e	18				                .byte %00011000
8872	>be9f	00				                .byte %00000000

8874						                ; CHR$212
8875	>bea0	66				                .byte %01100110
8876	>bea1	66				                .byte %01100110
8877	>bea2	66				                .byte %01100110
8878	>bea3	3c				                .byte %00111100
8879	>bea4	18				                .byte %00011000
8880	>bea5	18				                .byte %00011000
8881	>bea6	3c				                .byte %00111100
8882	>bea7	00				                .byte %00000000

8884						                ; CHR$213
8885	>bea8	3e				                .byte %00111110
8886	>bea9	08				                .byte %00001000
8887	>beaa	3e				                .byte %00111110
8888	>beab	6b				                .byte %01101011
8889	>beac	3e				                .byte %00111110
8890	>bead	08				                .byte %00001000
8891	>beae	3e				                .byte %00111110
8892	>beaf	00				                .byte %00000000

8894						                ; CHR$214
8895	>beb0	63				                .byte %01100011
8896	>beb1	63				                .byte %01100011
8897	>beb2	36				                .byte %00110110
8898	>beb3	1c				                .byte %00011100
8899	>beb4	36				                .byte %00110110
8900	>beb5	63				                .byte %01100011
8901	>beb6	63				                .byte %01100011
8902	>beb7	00				                .byte %00000000

8904						                ; CHR$215
8905	>beb8	3e				                .byte %00111110
8906	>beb9	08				                .byte %00001000
8907	>beba	6b				                .byte %01101011
8908	>bebb	6b				                .byte %01101011
8909	>bebc	3e				                .byte %00111110
8910	>bebd	08				                .byte %00001000
8911	>bebe	3e				                .byte %00111110
8912	>bebf	00				                .byte %00000000

8914						                ; CHR$216
8915	>bec0	3e				                .byte %00111110
8916	>bec1	63				                .byte %01100011
8917	>bec2	63				                .byte %01100011
8918	>bec3	63				                .byte %01100011
8919	>bec4	36				                .byte %00110110
8920	>bec5	36				                .byte %00110110
8921	>bec6	63				                .byte %01100011
8922	>bec7	00				                .byte %00000000

8924						                ; CHR$217
8925	>bec8	7f				                .byte %01111111
8926	>bec9	63				                .byte %01100011
8927	>beca	63				                .byte %01100011
8928	>becb	36				                .byte %00110110
8929	>becc	36				                .byte %00110110
8930	>becd	1c				                .byte %00011100
8931	>bece	1c				                .byte %00011100
8932	>becf	00				                .byte %00000000

8934						                ; CHR$218
8935	>bed0	18				                .byte %00011000
8936	>bed1	18				                .byte %00011000
8937	>bed2	7e				                .byte %01111110
8938	>bed3	18				                .byte %00011000
8939	>bed4	18				                .byte %00011000
8940	>bed5	00				                .byte %00000000
8941	>bed6	7e				                .byte %01111110
8942	>bed7	00				                .byte %00000000

8944						                ; CHR$219
8945	>bed8	00				                .byte %00000000
8946	>bed9	7e				                .byte %01111110
8947	>beda	00				                .byte %00000000
8948	>bedb	18				                .byte %00011000
8949	>bedc	18				                .byte %00011000
8950	>bedd	7e				                .byte %01111110
8951	>bede	18				                .byte %00011000
8952	>bedf	18				                .byte %00011000

8954						                ; CHR$220
8955	>bee0	18				                .byte %00011000
8956	>bee1	18				                .byte %00011000
8957	>bee2	18				                .byte %00011000
8958	>bee3	18				                .byte %00011000
8959	>bee4	18				                .byte %00011000
8960	>bee5	18				                .byte %00011000
8961	>bee6	18				                .byte %00011000
8962	>bee7	00				                .byte %00000000

8964						                ; CHR$221
8965	>bee8	36				                .byte %00110110
8966	>bee9	36				                .byte %00110110
8967	>beea	36				                .byte %00110110
8968	>beeb	36				                .byte %00110110
8969	>beec	36				                .byte %00110110
8970	>beed	36				                .byte %00110110
8971	>beee	36				                .byte %00110110
8972	>beef	00				                .byte %00000000

8974						                ; CHR$222
8975	>bef0	00				                .byte %00000000
8976	>bef1	66				                .byte %01100110
8977	>bef2	66				                .byte %01100110
8978	>bef3	66				                .byte %01100110
8979	>bef4	66				                .byte %01100110
8980	>bef5	66				                .byte %01100110
8981	>bef6	3c				                .byte %00111100
8982	>bef7	00				                .byte %00000000

8984						                ; CHR$223
8985	>bef8	00				                .byte %00000000
8986	>bef9	3c				                .byte %00111100
8987	>befa	66				                .byte %01100110
8988	>befb	66				                .byte %01100110
8989	>befc	66				                .byte %01100110
8990	>befd	66				                .byte %01100110
8991	>befe	66				                .byte %01100110
8992	>beff	00				                .byte %00000000

8994						                ; CHR$224
9005	>bf00	00				                .byte %00000000
9006	>bf01	03				                .byte %00000011
9007	>bf02	3e				                .byte %00111110
9008	>bf03	67				                .byte %01100111
9009	>bf04	6b				                .byte %01101011
9010	>bf05	73				                .byte %01110011
9011	>bf06	3e				                .byte %00111110
9012	>bf07	60				                .byte %01100000

9015						                ; CHR$225
9016	>bf08	00				                .byte %00000000
9017	>bf09	00				                .byte %00000000
9018	>bf0a	3b				                .byte %00111011
9019	>bf0b	6e				                .byte %01101110
9020	>bf0c	66				                .byte %01100110
9021	>bf0d	6e				                .byte %01101110
9022	>bf0e	3b				                .byte %00111011
9023	>bf0f	00				                .byte %00000000

9025						                ; CHR$226
9026	>bf10	1e				                .byte %00011110
9027	>bf11	33				                .byte %00110011
9028	>bf12	33				                .byte %00110011
9029	>bf13	3e				                .byte %00111110
9030	>bf14	33				                .byte %00110011
9031	>bf15	33				                .byte %00110011
9032	>bf16	3e				                .byte %00111110
9033	>bf17	60				                .byte %01100000

9035						                ; CHR$227
9036	>bf18	00				                .byte %00000000
9037	>bf19	00				                .byte %00000000
9038	>bf1a	66				                .byte %01100110
9039	>bf1b	36				                .byte %00110110
9040	>bf1c	1c				                .byte %00011100
9041	>bf1d	18				                .byte %00011000
9042	>bf1e	30				                .byte %00110000
9043	>bf1f	30				                .byte %00110000

9045						                ; CHR$228
9046	>bf20	3c				                .byte %00111100
9047	>bf21	60				                .byte %01100000
9048	>bf22	30				                .byte %00110000
9049	>bf23	3c				                .byte %00111100
9050	>bf24	66				                .byte %01100110
9051	>bf25	66				                .byte %01100110
9052	>bf26	3c				                .byte %00111100
9053	>bf27	00				                .byte %00000000

9055						                ; CHR$229
9056	>bf28	00				                .byte %00000000
9057	>bf29	00				                .byte %00000000
9058	>bf2a	1e				                .byte %00011110
9059	>bf2b	30				                .byte %00110000
9060	>bf2c	1c				                .byte %00011100
9061	>bf2d	30				                .byte %00110000
9062	>bf2e	1e				                .byte %00011110
9063	>bf2f	00				                .byte %00000000

9065						                ; CHR$230
9066	>bf30	3e				                .byte %00111110
9067	>bf31	0c				                .byte %00001100
9068	>bf32	18				                .byte %00011000
9069	>bf33	30				                .byte %00110000
9070	>bf34	60				                .byte %01100000
9071	>bf35	60				                .byte %01100000
9072	>bf36	3e				                .byte %00111110
9073	>bf37	06				                .byte %00000110

9075						                ; CHR$231
9076	>bf38	00				                .byte %00000000
9077	>bf39	00				                .byte %00000000
9078	>bf3a	7c				                .byte %01111100
9079	>bf3b	66				                .byte %01100110
9080	>bf3c	66				                .byte %01100110
9081	>bf3d	66				                .byte %01100110
9082	>bf3e	06				                .byte %00000110
9083	>bf3f	06				                .byte %00000110

9085						                ; CHR$232
9086	>bf40	3c				                .byte %00111100
9087	>bf41	66				                .byte %01100110
9088	>bf42	66				                .byte %01100110
9089	>bf43	7e				                .byte %01111110
9090	>bf44	66				                .byte %01100110
9091	>bf45	66				                .byte %01100110
9092	>bf46	3c				                .byte %00111100
9093	>bf47	00				                .byte %00000000

9095						                ; CHR$233
9096	>bf48	00				                .byte %00000000
9097	>bf49	00				                .byte %00000000
9098	>bf4a	18				                .byte %00011000
9099	>bf4b	18				                .byte %00011000
9100	>bf4c	18				                .byte %00011000
9101	>bf4d	18				                .byte %00011000
9102	>bf4e	0c				                .byte %00001100
9103	>bf4f	00				                .byte %00000000

9105						                ; CHR$234
9106	>bf50	00				                .byte %00000000
9107	>bf51	00				                .byte %00000000
9108	>bf52	66				                .byte %01100110
9109	>bf53	6c				                .byte %01101100
9110	>bf54	78				                .byte %01111000
9111	>bf55	6c				                .byte %01101100
9112	>bf56	66				                .byte %01100110
9113	>bf57	00				                .byte %00000000

9115						                ; CHR$235
9116	>bf58	60				                .byte %01100000
9117	>bf59	30				                .byte %00110000
9118	>bf5a	18				                .byte %00011000
9119	>bf5b	1c				                .byte %00011100
9120	>bf5c	36				                .byte %00110110
9121	>bf5d	63				                .byte %01100011
9122	>bf5e	63				                .byte %01100011
9123	>bf5f	00				                .byte %00000000

9125						                ; CHR$236
9126	>bf60	00				                .byte %00000000
9127	>bf61	00				                .byte %00000000
9128	>bf62	33				                .byte %00110011
9129	>bf63	33				                .byte %00110011
9130	>bf64	33				                .byte %00110011
9131	>bf65	33				                .byte %00110011
9132	>bf66	3e				                .byte %00111110
9133	>bf67	60				                .byte %01100000

9135						                ; CHR$237
9136	>bf68	00				                .byte %00000000
9137	>bf69	00				                .byte %00000000
9138	>bf6a	63				                .byte %01100011
9139	>bf6b	33				                .byte %00110011
9140	>bf6c	1b				                .byte %00011011
9141	>bf6d	1e				                .byte %00011110
9142	>bf6e	1c				                .byte %00011100
9143	>bf6f	00				                .byte %00000000

9145						                ; CHR$238
9156	>bf70	3c				                .byte %00111100
9157	>bf71	60				                .byte %01100000
9158	>bf72	60				                .byte %01100000
9159	>bf73	3c				                .byte %00111100
9160	>bf74	60				                .byte %01100000
9161	>bf75	60				                .byte %01100000
9162	>bf76	3e				                .byte %00111110
9163	>bf77	06				                .byte %00000110

9166						                ; CHR$239
9167	>bf78	00				                .byte %00000000
9168	>bf79	00				                .byte %00000000
9169	>bf7a	3e				                .byte %00111110
9170	>bf7b	63				                .byte %01100011
9171	>bf7c	63				                .byte %01100011
9172	>bf7d	63				                .byte %01100011
9173	>bf7e	3e				                .byte %00111110
9174	>bf7f	00				                .byte %00000000

9176						                ; CHR$240
9177	>bf80	00				                .byte %00000000
9178	>bf81	00				                .byte %00000000
9179	>bf82	7f				                .byte %01111111
9180	>bf83	36				                .byte %00110110
9181	>bf84	36				                .byte %00110110
9182	>bf85	36				                .byte %00110110
9183	>bf86	36				                .byte %00110110
9184	>bf87	00				                .byte %00000000

9186						                ; CHR$241
9187	>bf88	00				                .byte %00000000
9188	>bf89	00				                .byte %00000000
9189	>bf8a	3c				                .byte %00111100
9190	>bf8b	66				                .byte %01100110
9191	>bf8c	66				                .byte %01100110
9192	>bf8d	7c				                .byte %01111100
9193	>bf8e	60				                .byte %01100000
9194	>bf8f	60				                .byte %01100000

9196						                ; CHR$242
9197	>bf90	00				                .byte %00000000
9198	>bf91	00				                .byte %00000000
9199	>bf92	3f				                .byte %00111111
9200	>bf93	66				                .byte %01100110
9201	>bf94	66				                .byte %01100110
9202	>bf95	66				                .byte %01100110
9203	>bf96	3c				                .byte %00111100
9204	>bf97	00				                .byte %00000000

9206						                ; CHR$243
9207	>bf98	00				                .byte %00000000
9208	>bf99	00				                .byte %00000000
9209	>bf9a	7e				                .byte %01111110
9210	>bf9b	18				                .byte %00011000
9211	>bf9c	18				                .byte %00011000
9212	>bf9d	18				                .byte %00011000
9213	>bf9e	0c				                .byte %00001100
9214	>bf9f	00				                .byte %00000000

9216						                ; CHR$244
9217	>bfa0	00				                .byte %00000000
9218	>bfa1	00				                .byte %00000000
9219	>bfa2	73				                .byte %01110011
9220	>bfa3	33				                .byte %00110011
9221	>bfa4	33				                .byte %00110011
9222	>bfa5	33				                .byte %00110011
9223	>bfa6	1e				                .byte %00011110
9224	>bfa7	00				                .byte %00000000

9226						                ; CHR$245
9227	>bfa8	00				                .byte %00000000
9228	>bfa9	00				                .byte %00000000
9229	>bfaa	3e				                .byte %00111110
9230	>bfab	6b				                .byte %01101011
9231	>bfac	6b				                .byte %01101011
9232	>bfad	3e				                .byte %00111110
9233	>bfae	18				                .byte %00011000
9234	>bfaf	18				                .byte %00011000

9236						                ; CHR$246
9237	>bfb0	00				                .byte %00000000
9238	>bfb1	00				                .byte %00000000
9239	>bfb2	66				                .byte %01100110
9240	>bfb3	36				                .byte %00110110
9241	>bfb4	1c				                .byte %00011100
9242	>bfb5	1c				                .byte %00011100
9243	>bfb6	36				                .byte %00110110
9244	>bfb7	33				                .byte %00110011

9246						                ; CHR$247
9247	>bfb8	00				                .byte %00000000
9248	>bfb9	00				                .byte %00000000
9249	>bfba	63				                .byte %01100011
9250	>bfbb	6b				                .byte %01101011
9251	>bfbc	6b				                .byte %01101011
9252	>bfbd	3e				                .byte %00111110
9253	>bfbe	18				                .byte %00011000
9254	>bfbf	18				                .byte %00011000

9256						                ; CHR$248
9267	>bfc0	00				                .byte %00000000
9268	>bfc1	00				                .byte %00000000
9269	>bfc2	36				                .byte %00110110
9270	>bfc3	63				                .byte %01100011
9271	>bfc4	6b				                .byte %01101011
9272	>bfc5	7f				                .byte %01111111
9273	>bfc6	36				                .byte %00110110
9274	>bfc7	00				                .byte %00000000

9277						                ; CHR$249
9278	>bfc8	38				                .byte %00111000
9279	>bfc9	0c				                .byte %00001100
9280	>bfca	06				                .byte %00000110
9281	>bfcb	3e				                .byte %00111110
9282	>bfcc	66				                .byte %01100110
9283	>bfcd	66				                .byte %01100110
9284	>bfce	3c				                .byte %00111100
9285	>bfcf	00				                .byte %00000000

9287						                ; CHR$250
9288	>bfd0	00				                .byte %00000000
9289	>bfd1	31				                .byte %00110001
9290	>bfd2	6b				                .byte %01101011
9291	>bfd3	46				                .byte %01000110
9292	>bfd4	00				                .byte %00000000
9293	>bfd5	7f				                .byte %01111111
9294	>bfd6	00				                .byte %00000000
9295	>bfd7	00				                .byte %00000000

9297						                ; CHR$251
9298	>bfd8	00				                .byte %00000000
9299	>bfd9	7e				                .byte %01111110
9300	>bfda	00				                .byte %00000000
9301	>bfdb	7e				                .byte %01111110
9302	>bfdc	00				                .byte %00000000
9303	>bfdd	7e				                .byte %01111110
9304	>bfde	00				                .byte %00000000
9305	>bfdf	00				                .byte %00000000

9307						                ; CHR$252
9308	>bfe0	07				                .byte %00000111
9309	>bfe1	1c				                .byte %00011100
9310	>bfe2	70				                .byte %01110000
9311	>bfe3	1c				                .byte %00011100
9312	>bfe4	07				                .byte %00000111
9313	>bfe5	00				                .byte %00000000
9314	>bfe6	7f				                .byte %01111111
9315	>bfe7	00				                .byte %00000000

9317						                ; CHR$253
9318	>bfe8	06				                .byte %00000110
9319	>bfe9	0c				                .byte %00001100
9320	>bfea	7e				                .byte %01111110
9321	>bfeb	18				                .byte %00011000
9322	>bfec	7e				                .byte %01111110
9323	>bfed	30				                .byte %00110000
9324	>bfee	60				                .byte %01100000
9325	>bfef	00				                .byte %00000000

9327						                ; CHR$254
9328	>bff0	70				                .byte %01110000
9329	>bff1	1c				                .byte %00011100
9330	>bff2	07				                .byte %00000111
9331	>bff3	1c				                .byte %00011100
9332	>bff4	70				                .byte %01110000
9333	>bff5	00				                .byte %00000000
9334	>bff6	7f				                .byte %01111111
9335	>bff7	00				                .byte %00000000

9337						                ; CHR$255
9338	>bff8	ff				                .byte %11111111
9339	>bff9	ff				                .byte %11111111
9340	>bffa	ff				                .byte %11111111
9341	>bffb	ff				                .byte %11111111
9342	>bffc	ff				                .byte %11111111
9343	>bffd	ff				                .byte %11111111
9344	>bffe	ff				                .byte %11111111
9345	>bfff	ff				                .byte %11111111

:1	;******  Return to file: mosautocue.s65

24						                .endsection

26						                .section mos
27						                .include "src/mos.s65"

:15	;******  Processing file: src/mos.s65

1						; -*- comment-column:45; -*-

3						; VDU driver entry block
4						; ======================
5	.c000					LC000:                                       ; Read from VDU memory
6	.c000	b1 d6		lda ($d6),y	                lda (ZMEMG),y
7	.c002	60		rts		                rts
8	.c003					LC003:                                       ; Write to VDU memory
9	.c003	91 d6		sta ($d6),y	                sta (ZMEMG),y
10	.c005	60		rts		                rts

12						; MasRef E.4-6
13						;
14						; JSR PLBYTE plots the mask held in ZMASK into the byte pointed to by
15						; (ZMEMG),y, using ZGORA and ZGEOR as colour masks. See GADDR below
16						; for an example of its use.
17						;
18						; PLBYTE uses ZTEMP as workspace and preserves X, Y, V and C.
19	.c006					PLBYTE:
20	.c006	4c 51 db	jmp $db51	                jmp plbyteEntryPoint

22						; MasRef E.4-6
23						;
24						; JSR HPLOT plots a fast horizontal line in the current graphics
25						; colour or ECF and the current graphics mode (all as set by VDU 18)
26						; between two specified points. It is the low level primitive used by
27						; all the MOS area fill commands.
28						;
29						; On entry, two 4 byte areas at &300+X and &300+Y contain the
30						; coordinates of the two endpoints, in the standard
31						; lowX,highX,lowY,highY order. Should the Y coordinates differ, the Y
32						; coordinate of the line plotted is taken from the leftmost of the two
33						; points specified.
34						;
35						; Only portions of the line inside the graphics window are plotted.
36						; Subject to this, both endpoints of the line are plotted.
37						;
38						; HPLOT uses ZGORA, ZGEOR, ZMASK, ZMEMG, ZTEMP (but not ZTEMP+1),
39						; ZTEMPB, ZTEMPB+1, ZTEMPC and ZTEMPC+1 as workspace. No registers or
40						; flags are preserved.
41	.c009					HPLOT:
42	.c009	4c e8 da	jmp $dae8	                jmp LDAE8

44						; MasRef E.4-6
45						;
46						; JSR EIGABS converts the 4 byte pair of external coordinates at
47						; &300+X where X>=2 (in standard lowX,highX,lowY,highY order) into the
48						; corresponding pair of pixel coordinates by offsetting by the
49						; graphics origin, then dividing by an appropriate power of 2.
50						;
51						; EIGABS uses ZTEMP as workspace, and corrupts all registers and
52						; flags.
53	.c00c					EIGABS:
54	.c00c	4c de d1	jmp $d1de	                jmp eigabsEntryPoint

56						; MasRef E.4-7
57						;
58						; JSR WIND windows the 4 byte pair of pixel coordinates (in standard
59						; lowX,highX,lowY,highY order) at &300+X, and returns a result in A
60						; according to its position with respect to the window:

62						; 9 | 8 | 10
63						; --+---+---
64						; 1 | 0 | 2
65						; --+---+---
66						; 5 | 4 | 6

68						; WIND uses ZTEMP as workspace, preserves X and sets N and Z according
69						; to A.
70	.c00f					WIND:
71	.c00f	4c a8 d1	jmp $d1a8	                jmp windEntryPoint

73						; MasRef E.4-7
74						;
75						; JSR GADDR addresses the pixel whose 4 byte pair of pixel coordinates
76						; (in standard lowX,highX,lowY,highY order) is at &300+X. GADDR should
77						; not be called without first ensuring (typically by means of WIND)
78						; that the point concerned does lie within the screen.
79						;
80						; GADDR initialises the following variables:
81						;
82						; . ZMEMG to the start of the page of memory containing the pixel.
83						;
84						; . Y and VDU variable &1A (i.e. location &31A) to contain the offset
85						; of the byte containing the pixel within this page - i.e. (ZMEMG),y
86						; points to the byte containing the pixel.
87						;
88						; . ZMASK to a mask indicating which bits of this byte constitute the
89						; pixel.
90						;
91						; . ZGORA and ZGEOR to the correct colour masks for the current
92						; graphics plot mode (found in VDU variable &5A) and colour/ECF
93						;
94						; . X to Y MOD 7, i.e. the scan line within a character row of the
95						; pixel.
96						;
97						; Additionally, GADDR uses ZTEMP as workspace and returns A=0, Z=1.
98						;
99						; An example of the use of PLBYTE, WIND and GADDR is the following
100						; code, which effectively re-implements the VDU 25 64-71 (plot a
101						; point) calls. It assumes that the routine addresses have been
102						; previously defined and that the graphics plot mode, etc. were set up
103						; by the VDU 25 code before the unknown PLOT codes vector was entered:

105						; .POINT
106						;  LDX #&20   ;Addresses new point within VDU queue, as
107						;             ;left on entry to the unknown PLOT codes
108						;             ;vector.
109						;  JSR WIND   ;Is the point inside the window?
110						;  BNE END    ;Return if not.
111						;  JSR GADDR  ;Address the point now we know it's on
112						;             ;screen.
113						;  JSR PLBYTE ;And plot the point.
114						; .END
115						;  RTS
116	.c012					GADDR:
117	.c012	4c c8 de	jmp $dec8	                jmp gaddrEntryPoint

119						; MasRef E.4-8
120						;
121						; JSR IEG takes the internal pixel coordinates of the graphics cursor
122						; (in VDU variables &24-&27), converts it back to external coordinates
123						; and stores the result in VDU variables &10-&13.
124						;
125						; It should be called whenever the graphics code generates a new
126						; graphics cursor position (e.g. in the VDU drivers, it is called
127						; after a character is printed in VDU 5 mode). Its purpose is to make
128						; the two versions of the graphics cursor agree again, and thus
129						; prevent errors occurring with relative plots.
130						;
131						; IEG uses no page zero locations and corrupts all registers and
132						; flags.
133	.c015					IEG:
134	.c015	4c df c4	jmp $c4df	                jmp LC4DF

136						;-------------------------------------------------------------------------

138	.c018					LC018:                                       ; Fetch byte from ROM Y
139	.c018	a6 f4		ldx $f4		                ldx $F4                      ; Get current ROM
140	.c01a	84 f4		sty $f4		                sty $F4                      ; Select ROM in Y
141	.c01c	8c 30 fe	sty $fe30	                sty ROMSEL
142	.c01f	b2 f6		lda ($f6)	                lda ($F6)                    ; Get byte with ROM Y paged in
143	.c021	4c 9a e5	jmp $e59a	                jmp selectROMX                    ; Page in ROM X and return

145	.c024					LC024:
146	.c024	6c 5d 03	jmp ($035d)	                jmp ($035D)

148						;-------------------------------------------------------------------------
149						;
150						; VDU driver entry point
151						;
152						; Output to VDU.
153						;
154	.c027					outputToVDU:
155	.c027	ae 6a 02	ldx $026a	                ldx vduQueueNegativeLength  ;get VDU queue length
156	.c02a	f0 2d		beq $c059	                beq outputCharToVDU         ;taken if empty
157	.c02c	9d 24 02	sta $0224,x	                sta vduv.queueEnd-1-255,x   ;add to queue
158	.c02f	ee 6a 02	inc $026a	                inc vduQueueNegativeLength  ;one more in the queue...
159	.c032	f0 02		beq $c036	                beq outputQueueToVDU        ;taken if queue now filled
160	.c034					clc_rts_c034:
161	.c034	18		clc		                clc

163						;-------------------------------------------------------------------------
164						;
165						; VDU 0 (&00) Null [MasRef E.3-1]
166						; VDU 6 (&06) Enable VDU driver [MasRef E.3-3]
167						; VDU 27 (&1B) Null [MasRef E.3-34]
168						;
169	.c035					vdu0EntryPoint:
170	.c035					vdu6EntryPoint:
171	.c035					vdu27EntryPoint:
172	.c035					rtsC035:
173	.c035	60		rts		                rts

175						;-------------------------------------------------------------------------

177	.c036					outputQueueToVDU:
178	.c036	24 d0		bit $d0		                bit STATE
179	.c038	10 19		bpl $c053	                bpl LC053              ;branch taken if not VDU21 mode

181						                ; ????
182	.c03a	ac 5e 03	ldy $035e	                ldy vduv.jumpVector+1
183	.c03d	c0 c0		cpy #$c0	                cpy #>vdu1EntryPoint
184	.c03f	d0 f3		bne $c034	                bne clc_rts_c034
185	.c041	ac 5d 03	ldy $035d	                ldy vduv.jumpVector+0
186	.c044	c0 e2		cpy #$e2	                cpy #<vdu1EntryPoint
187	.c046	d0 ec		bne $c034	                bne clc_rts_c034

189	.c048					outputCharToPrinter:
190	.c048	aa		tax		                tax                          ;save char to print
191	.c049	a5 d0		lda $d0		                lda STATE
192	.c04b	4a		lsr a		                lsr a                       ;C set if isPrinterEnabled
193	.c04c	90 e7		bcc $c035	                bcc rtsC035 ;taken if printer disabled - VDU 1 then a no-op
194	.c04e	8a		txa		                txa                          ;restore char to print
195	.c04f	18		clc		                clc
199	.c050	4c ed e2	jmp $e2ed	                jmp LE2ED

202	.c053					LC053:
203	.c053	20 fa c0	jsr $c0fa	                jsr stopCursorEditing
204	.c056	18		clc		                clc
205	.c057	80 67		bra $c0c0	                bra LC0C0

207	.c059					outputCharToVDU:
208	.c059	20 fa c0	jsr $c0fa	                jsr stopCursorEditing
209	.c05c	50 0f		bvc $c06d	                bvc LC06D             ;taken if not previously editing
210	.c05e	30 0d		bmi $c06d	                bmi LC06D             ;taken if VDU 21
211	.c060	c9 0d		cmp #$0d	                cmp #$0D
212	.c062	d0 09		bne $c06d	                bne LC06D                  ;taken if not printing a CR
213	.c064	48		pha		                pha                        ;save char to print
214	.c065	a9 42		lda #$42	                lda #STATE.isCursorEditing|STATE.isScrollingDisabled
215	.c067	14 d0		trb $d0		                trb STATE
216	.c069	20 50 cf	jsr $cf50	                jsr showCursor
217	.c06c	68		pla		                pla                          ;restore char to print
218	.c06d					LC06D:
219	.c06d	c9 20		cmp #$20	                cmp #$20
220	.c06f	90 06		bcc $c077	                bcc handleControlChar
221	.c071	c9 7f		cmp #$7f	                cmp #$7F
222	.c073	d0 21		bne $c096	                bne LC096                    ;taken if not backspace
223	.c075	a9 20		lda #$20	                lda #$20 ;backspace is entry 32 in the VDU routines table
224	.c077					handleControlChar:
225	.c077	a8		tay		                tay                          ;Y=index in table
226	.c078	b9 37 e0	lda $e037,y	                lda vduRoutinesLSBTable,y
227	.c07b	8d 5d 03	sta $035d	                sta vduv.jumpVector+0 ; Store jump address LSB (see MasRef E.4-3)
228	.c07e	b9 58 e0	lda $e058,y	                lda vduRoutinesMSBTable,y
229	.c081	30 30		bmi $c0b3	                bmi LC0B3           ;branch taken if MSB directly
230	.c083	aa		tax		                tax                          ; Save original MSB value
231	.c084	09 f0		ora #$f0	                ora #$F0
232	.c086	8d 6a 02	sta $026a	                sta vduQueueNegativeLength ;initialise initial VDU queue length
233	.c089	8a		txa		                txa                          ; Restore original MSB value
237	.c08a	4a		lsr a		                lsr a                        ;
238	.c08b	4a		lsr a		                lsr a                        ;
239	.c08c	4a		lsr a		                lsr a                        ;
240	.c08d	4a		lsr a		                lsr a                        ; Extract value in top 4 bits
242	.c08e	18		clc		                clc                          ;
243	.c08f	69 c0		adc #$c0	                adc #vduRoutinesPage         ; form MSB
244	.c091	8d 5e 03	sta $035e	                sta vduv.jumpVector+1
245	.c094	80 34		bra $c0ca	                bra reinstateCursorEditing                    ; Continue

247	.c096					LC096:
248	.c096	24 d0		bit $d0		                bit STATE
249	.c098	30 2d		bmi $c0c7	                bmi LC0C7                    ;taken if VDU21
250	.c09a	20 0c ce	jsr $ce0c	                jsr LCE0C
251	.c09d	a9 20		lda #$20	                lda #$20
252	.c09f	2c 66 03	bit $0366	                bit $0366
253	.c0a2	d0 23		bne $c0c7	                bne LC0C7
254	.c0a4	20 76 c2	jsr $c276	                jsr LC276
255	.c0a7	80 1e		bra $c0c7	                bra LC0C7

257	.c0a9					LC0A9:
258	.c0a9	49 06		eor #$06	                eor #$06
259	.c0ab	d0 18		bne $c0c5	                bne LC0C5
260	.c0ad	a9 80		lda #$80	                lda #STATE.isVDU21
261	.c0af	14 d0		trb $d0		                trb STATE
262	.c0b1	80 17		bra $c0ca	                bra reinstateCursorEditing

264	.c0b3					LC0B3:
265	.c0b3	8d 5e 03	sta $035e	                sta vduv.jumpVector+1
266	.c0b6	98		tya		                tya
267	.c0b7	49 f7		eor #$f7	                eor #$F7
268	.c0b9	c9 fa		cmp #$fa	                cmp #$FA
269	.c0bb	98		tya		                tya
270	.c0bc	24 d0		bit $d0		                bit STATE
271	.c0be	30 e9		bmi $c0a9	                bmi LC0A9             ;branch taken if VDU21 in effect
272	.c0c0					LC0C0:
273	.c0c0	08		php		                php
274	.c0c1	20 24 c0	jsr $c024	                jsr LC024
275	.c0c4	28		plp		                plp
276	.c0c5					LC0C5:
277	.c0c5	90 03		bcc $c0ca	                bcc reinstateCursorEditing
278	.c0c7					LC0C7:
279	.c0c7	a5 d0		lda $d0		                lda STATE
280	.c0c9	4a		lsr a		                lsr a                          ;C=1 if printer enabled
281	.c0ca					reinstateCursorEditing:
282	.c0ca	24 d0		bit $d0		                bit STATE
283	.c0cc	50 13		bvc $c0e1	                bvc rtsC0E1               ;taken if not cursor editing
284	.c0ce	20 05 c1	jsr $c105	                jsr activateEditCursor
285	.c0d1					exchangeCursors:
286	.c0d1	08		php		                php
287	.c0d2	48		pha		                pha
288	.c0d3	a5 d0		lda $d0		                lda STATE
289	.c0d5	49 02		eor #$02	                eor #STATE.isScrollingDisabled
290	.c0d7	85 d0		sta $d0		                sta STATE
291	.c0d9	20 be e2	jsr $e2be	                jsr exchangeEditCursorPositionAndTextCursorPosition
292	.c0dc	20 d8 c6	jsr $c6d8	                jsr updateCRTCTextCursor
293	.c0df	68		pla		                pla
294	.c0e0	28		plp		                plp
295	.c0e1					rtsC0E1:
296	.c0e1	60		rts		                rts

298						;-------------------------------------------------------------------------
299						;
300						; VDU 1 (&01) Send next character to printer only [MasRef E.3-2]
301						;
302	.c0e2					vdu1EntryPoint:
303	.c0e2	20 ca c0	jsr $c0ca	                jsr reinstateCursorEditing
304	.c0e5	20 48 c0	jsr $c048	                jsr outputCharToPrinter
305	.c0e8	80 10		bra $c0fa	                bra stopCursorEditing

307						;-------------------------------------------------------------------------
308						;
309						; VDU 2 (&02) Enable printer [MasRef E.3-2]
310						; VDU 3 (&03) Disable printer [MasRef E.3-3]
311						;
312	.c0ea					vdu2EntryPoint:
313	.c0ea					vdu3EntryPoint:
314	.c0ea	48		pha		                pha                          ;
315	.c0eb	20 ca c0	jsr $c0ca	                jsr reinstateCursorEditing
319	.c0ee	20 e7 e2	jsr $e2e7	                jsr LE2E7
321	.c0f1	a9 01		lda #$01	                lda #STATE.isPrinterEnabled  ;
322	.c0f3	04 d0		tsb $d0		                tsb STATE
323	.c0f5	68		pla		                pla
324	.c0f6	29 01		and #$01	                and #STATE.isPrinterEnabled
325	.c0f8	14 d0		trb $d0		                trb STATE

327						;-------------------------------------------------------------------------
328						;
329						; Stop cursor editing, if it's on.
330						;
331						; exit:
332						;
333						; V=1 if cursor editing previous on
334						; N=1 if VDU 21 on
335						;
336	.c0fa					stopCursorEditing:
337	.c0fa	24 d0		bit $d0		                bit STATE
338	.c0fc	50 e3		bvc $c0e1	                bvc rtsC0E1                    ;taken if not cursor editing
339	.c0fe	20 d1 c0	jsr $c0d1	                jsr exchangeCursors
340	.c101	08		php		                php
341	.c102					deactivateEditCursor:
342	.c102	38		sec		                sec
343	.c103	80 02		bra $c107	                bra updateEditCursorState

345						;-------------------------------------------------------------------------

347	.c105					activateEditCursor:
348	.c105	08		php		                php
349	.c106	18		clc		                clc

351						;-------------------------------------------------------------------------
352						;
353						; Handle cursor editing on/off.
354						;
355						; entry:
356						;
357						; C=0 - cursor editing on; add fake cursor
358						;
359						; C=1 = cursor editing off; remove fake cursor and restore screen
360						;
361	.c107					updateEditCursorState: .proc
362	.c107	48		pha		                pha
363	.c108	a5 d8		lda $d8		                lda ZMEMT+0
364	.c10a	85 e0		sta $e0		                sta ZTEMPD+0
365	.c10c	a5 d9		lda $d9		                lda ZMEMT+1
366	.c10e	85 e1		sta $e1		                sta ZTEMPD+1
367	.c110	ac 4f 03	ldy $034f	                ldy vduv.bytesPerCharacter
368	.c113	88		dey		                dey
369	.c114	d0 0e		bne $c124	                bne bitmap

371	.c116					teletext:
372	.c116	ad 38 03	lda $0338	                lda vduv.workspace._38 ;get old byte under fake cursor (may be bogus)
373	.c119	b0 17		bcs $c132	                bcs storeToScreen      ;taken if switching off
374	.c11b	b2 d8		lda ($d8)	                lda (ZMEMT)            ;get screen byte
375	.c11d	8d 38 03	sta $0338	                sta vduv.workspace._38 ;store old byte
376	.c120	a9 7f		lda #$7f	                lda #$7F               ;store solid block to screen
377	.c122	80 0e		bra $c132	                bra storeToScreen

379	.c124					bitmap:
380	.c124	a9 ff		lda #$ff	                lda #%11111111          ;invert all bits
381	.c126	c0 1f		cpy #$1f	                cpy #$1F      ;check for 32 chars/byte - i.e., MODE 2
382	.c128	d0 02		bne $c12c	                bne +         ;taken if not MODE 2
383	.c12a	a9 3f		lda #$3f	                lda #%00111111       ;avoid flashing colours in MODE 2
384	.c12c					+
385	.c12c	85 da		sta $da		                sta ZTEMP
386	.c12e					loop:
387	.c12e	b2 e0		lda ($e0)	                lda (ZTEMPD)
388	.c130	45 da		eor $da		                eor ZTEMP
389	.c132					storeToScreen:
390	.c132	92 e0		sta ($e0)	                sta (ZTEMPD)
391	.c134	e6 e0		inc $e0		                inc ZTEMPD+0
392	.c136	d0 09		bne $c141	                bne +                    ;taken if no carry out of LSB
393	.c138	e6 e1		inc $e1		                inc ZTEMPD+1
394	.c13a	10 05		bpl $c141	                bpl +                 ;taken if no screen address wrap
395	.c13c	ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
396	.c13f	85 e1		sta $e1		                sta ZTEMPD+1
397	.c141					+
398	.c141	88		dey		                dey               ;Y=$ff after 1 iteration in teletext
399	.c142	10 ea		bpl $c12e	                bpl loop
400	.c144	68		pla		                pla
401	.c145	28		plp		                plp
402	.c146	60		rts		                rts
403						                .endproc

405						;-------------------------------------------------------------------------

407	.c147					LC147:
408	>c147	be c1				                .word LC1BE
409	>c149	b1 c1				                .word LC1B1
410	>c14b	be c1				                .word LC1BE
411	>c14d	b1 c1				                .word LC1B1
412	>c14f	95 c1				                .word LC195
413	>c151	95 c1				                .word LC195
414	>c153	a2 c1				                .word LC1A2
415	>c155	a2 c1				                .word LC1A2

417						;-------------------------------------------------------------------------

419	.c157					LC157:
420	>c157	01 c2				                .word LC201
421	>c159	ee c1				                .word LC1EE
422	>c15b	01 c2				                .word LC201
423	>c15d	ee c1				                .word LC1EE
424	>c15f	21 c2				                .word LC221
425	>c161	21 c2				                .word LC221
426	>c163	10 c2				                .word LC210
427	>c165	10 c2				                .word LC210

429						;-------------------------------------------------------------------------
430						;
431						; Indexed by the swapAxes, invertVertical and invertHorizontal cursor
432						; flags bits.
433						;
434	.c167					setTextCursorXPositionRoutinesTable:
435	>c167	d3 c2				                .word setTextCursorXPosition           ;0
436	>c169	cb c2				                .word setTextCursorXPositionInvertHorizontal ;invertHorizontal
437	>c16b	d3 c2				                .word setTextCursorXPosition ;invertVertical
438	>c16d	cb c2				                .word setTextCursorXPositionInvertHorizontal ;invertVertical|invertHorizontal
439	>c16f	e2 c2				                .word setTextCursorXPositionSwapAxes         ;swapAxes
440	>c171	e2 c2				                .word setTextCursorXPositionSwapAxes ;swapAxes|invertHorizontal
441	>c173	da c2				                .word setTextCursorXPositionSwapAxesInvertVertical ;swapAxes|invertVertical
442	>c175	da c2				                .word setTextCursorXPositionSwapAxesInvertVertical ;swapAxes|invertVertical|invertHorizontal

444						;-------------------------------------------------------------------------

446	.c177					LC177:
447	>c177	10 c3				                .word LC310
448	>c179	f2 c2				                .word LC2F2
449	>c17b	10 c3				                .word LC310
450	>c17d	f2 c2				                .word LC2F2
451	>c17f	5a c3				                .word LC35A
452	>c181	5a c3				                .word LC35A
453	>c183	38 c3				                .word LC338
454	>c185	38 c3				                .word LC338

456						;-------------------------------------------------------------------------

458	.c187					LC187:
459	.c187	4d 66 03	eor $0366	                eor $0366
460	.c18a	29 0e		and #$0e	                and #$0E
461	.c18c	48		pha		                pha
462	.c18d	20 a6 d1	jsr $d1a6	                jsr LD1A6
463	.c190	fa		plx		                plx
464	.c191	38		sec		                sec
465	.c192	7c 47 c1	jmp ($c147,x)	                jmp (LC147,x)

467	.c195					LC195:
468	.c195	ad 26 03	lda $0326	                lda $0326
469	.c198	e9 08		sbc #$08	                sbc #$08
470	.c19a	8d 26 03	sta $0326	                sta $0326
471	.c19d	ce 27 03	dec $0327	                dec $0327
472	.c1a0	80 08		bra $c1aa	                bra LC1AA

474	.c1a2					LC1A2:
475	.c1a2	ad 26 03	lda $0326	                lda $0326
476	.c1a5	69 07		adc #$07	                adc #$07
477	.c1a7	8d 26 03	sta $0326	                sta $0326
478	.c1aa					LC1AA:
479	.c1aa	90 1f		bcc $c1cb	                bcc LC1CB
480	.c1ac	ee 27 03	inc $0327	                inc $0327
481	.c1af	80 1a		bra $c1cb	                bra LC1CB

483	.c1b1					LC1B1:
484	.c1b1	ad 24 03	lda $0324	                lda $0324
485	.c1b4	e9 08		sbc #$08	                sbc #$08
486	.c1b6	8d 24 03	sta $0324	                sta $0324
487	.c1b9	ce 25 03	dec $0325	                dec $0325
488	.c1bc	80 08		bra $c1c6	                bra LC1C6

490	.c1be					LC1BE:
491	.c1be	ad 24 03	lda $0324	                lda $0324
492	.c1c1	69 07		adc #$07	                adc #$07
493	.c1c3	8d 24 03	sta $0324	                sta $0324
494	.c1c6					LC1C6:
495	.c1c6	90 03		bcc $c1cb	                bcc LC1CB
496	.c1c8	ee 25 03	inc $0325	                inc $0325
497	.c1cb					LC1CB:
498	.c1cb	a5 da		lda $da		                lda $DA
499	.c1cd	d0 0c		bne $c1db	                bne LC1DB
500	.c1cf	2c 66 03	bit $0366	                bit $0366
501	.c1d2	70 07		bvs $c1db	                bvs LC1DB
502	.c1d4	da		phx		                phx
503	.c1d5	20 a6 d1	jsr $d1a6	                jsr LD1A6
504	.c1d8	fa		plx		                plx
505	.c1d9	a8		tay		                tay
506	.c1da	60		rts		                rts

508	.c1db					LC1DB:
509	.c1db	a9 00		lda #$00	                lda #$00
510	.c1dd	60		rts		                rts

512	.c1de					LC1DE:
513	.c1de	a9 00		lda #$00	                lda #$00
514	.c1e0					LC1E0:
515	.c1e0	64 da		stz $da		                stz $DA
516	.c1e2	0a		asl a		                asl a
517	.c1e3	26 da		rol $da		                rol $DA
518	.c1e5	0a		asl a		                asl a
519	.c1e6	26 da		rol $da		                rol $DA
520	.c1e8	0a		asl a		                asl a
521	.c1e9	26 da		rol $da		                rol $DA
522	.c1eb	7c 57 c1	jmp ($c157,x)	                jmp (LC157,x)

524	.c1ee					LC1EE:
525	.c1ee	49 f9		eor #$f9	                eor #$F9
526	.c1f0	6d 04 03	adc $0304	                adc $0304
527	.c1f3	8d 24 03	sta $0324	                sta $0324
528	.c1f6	a5 da		lda $da		                lda $DA
529	.c1f8	49 ff		eor #$ff	                eor #$FF
530	.c1fa	6d 05 03	adc $0305	                adc $0305
531	.c1fd	8d 25 03	sta $0325	                sta $0325
532	.c200	60		rts		                rts

534	.c201					LC201:
535	.c201	6d 00 03	adc $0300	                adc $0300
536	.c204	8d 24 03	sta $0324	                sta $0324
537	.c207	a5 da		lda $da		                lda $DA
538	.c209	6d 01 03	adc $0301	                adc $0301
539	.c20c	8d 25 03	sta $0325	                sta $0325
540	.c20f	60		rts		                rts

542	.c210					LC210:
543	.c210	49 07		eor #$07	                eor #$07
544	.c212	6d 02 03	adc $0302	                adc $0302
545	.c215	8d 26 03	sta $0326	                sta $0326
546	.c218	a5 da		lda $da		                lda $DA
547	.c21a	6d 03 03	adc $0303	                adc $0303
548	.c21d	8d 27 03	sta $0327	                sta $0327
549	.c220	60		rts		                rts

551	.c221					LC221:
552	.c221	38		sec		                sec
553	.c222	49 ff		eor #$ff	                eor #$FF
554	.c224	6d 06 03	adc $0306	                adc $0306
555	.c227	8d 26 03	sta $0326	                sta $0326
556	.c22a	a5 da		lda $da		                lda $DA
557	.c22c	49 ff		eor #$ff	                eor #$FF
558	.c22e	6d 07 03	adc $0307	                adc $0307
559	.c231	8d 27 03	sta $0327	                sta $0327
560	.c234	60		rts		                rts

562	.c235					LC235:
563	.c235	a9 00		lda #$00	                lda #$00
564	.c237	20 87 c1	jsr $c187	                jsr LC187
565	.c23a	f0 0d		beq $c249	                beq LC249
566	.c23c	20 de c1	jsr $c1de	                jsr LC1DE
567	.c23f					LC23F:
568	.c23f	a9 08		lda #$08	                lda #$08
569	.c241					LC241:
570	.c241	20 87 c1	jsr $c187	                jsr LC187
571	.c244	f0 03		beq $c249	                beq LC249
572	.c246	20 de c1	jsr $c1de	                jsr LC1DE
573	.c249					LC249:
574	.c249	4c df c4	jmp $c4df	                jmp LC4DF

576	.c24c					vdu9EntryPoint:
577	.c24c	20 2d d1	jsr $d12d	                jsr handleColumn81
578	.c24f	b0 e4		bcs $c235	                bcs LC235
579	.c251	a9 00		lda #$00	                lda #$00
580	.c253	20 e9 c2	jsr $c2e9	                jsr LC2E9
581	.c256	90 1b		bcc $c273	                bcc LC273
582	.c258					LC258:
583	.c258	20 8f c3	jsr $c38f	                jsr LC38F
584	.c25b					vdu10EntryPoint:
585	.c25b	20 e2 e2	jsr $e2e2	                jsr testVDU5State
586	.c25e	d0 df		bne $c23f	                bne LC23F
587	.c260	18		clc		                clc
588	.c261	20 8e c8	jsr $c88e	                jsr LC88E
589	.c264	a9 08		lda #$08	                lda #$08
590	.c266	20 e9 c2	jsr $c2e9	                jsr LC2E9
591	.c269					LC269:
592	.c269	90 08		bcc $c273	                bcc LC273
593	.c26b	20 7b c3	jsr $c37b	                jsr LC37B
594	.c26e	90 03		bcc $c273	                bcc LC273
595	.c270	4c 51 d0	jmp $d051	                jmp LD051

597	.c273					LC273:
598	.c273	4c ed c6	jmp $c6ed	                jmp updateCRTCCursorAddress

600	.c276					LC276:
601	.c276	20 e2 e2	jsr $e2e2	                jsr testVDU5State
602	.c279	d0 ba		bne $c235	                bne LC235
603	.c27b	20 e9 c2	jsr $c2e9	                jsr LC2E9
604	.c27e	90 f3		bcc $c273	                bcc LC273
605	.c280	a9 01		lda #$01	                lda #$01
606	.c282	2c 66 03	bit $0366	                bit $0366
607	.c285	f0 d1		beq $c258	                beq LC258
608	.c287	38		sec		                sec
609	.c288	6e 6c 03	ror $036c	                ror $036C
610	.c28b					LC28B:
611	.c28b	60		rts		                rts

613	.c28c					LC28C:
614	.c28c	a9 06		lda #$06	                lda #$06
615	.c28e	20 87 c1	jsr $c187	                jsr LC187
616	.c291	f0 b6		beq $c249	                beq LC249
617	.c293	20 de c1	jsr $c1de	                jsr LC1DE
618	.c296					LC296:
619	.c296	a9 0e		lda #$0e	                lda #$0E
620	.c298	80 a7		bra $c241	                bra LC241

622	.c29a					vdu8EntryPoint:
623	.c29a	20 e2 e2	jsr $e2e2	                jsr testVDU5State
624	.c29d	d0 ed		bne $c28c	                bne LC28C
625	.c29f	4e 6c 03	lsr $036c	                lsr $036C
626	.c2a2	2c 6c 03	bit $036c	                bit $036C
627	.c2a5	70 e4		bvs $c28b	                bvs LC28B
628	.c2a7	a9 06		lda #$06	                lda #$06
629	.c2a9	20 e9 c2	jsr $c2e9	                jsr LC2E9
630	.c2ac	90 c5		bcc $c273	                bcc LC273
631	.c2ae	20 8f c3	jsr $c38f	                jsr LC38F
632	.c2b1					vdu11EntryPoint:
633	.c2b1	20 e2 e2	jsr $e2e2	                jsr testVDU5State
634	.c2b4	d0 e0		bne $c296	                bne LC296
635	.c2b6	ce 69 02	dec $0269	                dec pagedModeCounter
636	.c2b9	10 03		bpl $c2be	                bpl LC2BE
637	.c2bb	ee 69 02	inc $0269	                inc pagedModeCounter
638	.c2be					LC2BE:
639	.c2be	a9 0e		lda #$0e	                lda #$0E
640	.c2c0	20 e9 c2	jsr $c2e9	                jsr LC2E9
641	.c2c3	80 a4		bra $c269	                bra LC269

643						;-------------------------------------------------------------------------
644						;
645						; Set/reset cursor position, taking cursor flags into account.
646						;
647						; entry:
648						;
649						; (set only) A = cursor position
650						;
651						; X = cursorFlags bits: swapAxes, invertVertical, invertHorizontal
652						;
653	.c2c5					resetTextCursorXPositionWithCursorFlags:
654	.c2c5	a9 00		lda #$00	                lda #$00
655	.c2c7					setTextCursorXPositionWithCursorFlags:
656	.c2c7	18		clc		                clc
657	.c2c8	7c 67 c1	jmp ($c167,x)	                jmp (setTextCursorXPositionRoutinesTable,x)

659						;-------------------------------------------------------------------------

661	.c2cb					setTextCursorXPositionInvertHorizontal:
662	.c2cb	38		sec		                sec                          ;+1
663	.c2cc	49 ff		eor #$ff	                eor #$FF          ;^$ff+1 (i.e., adc will add the -ve)
664	.c2ce	6d 0a 03	adc $030a	                adc vduv.textWindowRight
665	.c2d1	80 03		bra $c2d6	                bra staTextCursorXPosition

667						;-------------------------------------------------------------------------

669	.c2d3					setTextCursorXPosition:
670	.c2d3	6d 08 03	adc $0308	                adc vduv.textWindowLeft
671	.c2d6					staTextCursorXPosition:
672	.c2d6	8d 18 03	sta $0318	                sta vduv.textCursorXPosition
673	.c2d9	60		rts		                rts

675						;-------------------------------------------------------------------------

677	.c2da					setTextCursorXPositionSwapAxesInvertVertical:
678	.c2da	38		sec		                sec
679	.c2db	49 ff		eor #$ff	                eor #$FF
680	.c2dd	6d 09 03	adc $0309	                adc vduv.textWindowBottom
681	.c2e0	80 03		bra $c2e5	                bra staTextCursorYPosition

683	.c2e2					setTextCursorXPositionSwapAxes:
684	.c2e2	6d 0b 03	adc $030b	                adc vduv.textWindowTop
685	.c2e5					staTextCursorYPosition:
686	.c2e5	8d 19 03	sta $0319	                sta vduv.textCursorYPosition
687	.c2e8	60		rts		                rts

689						;-------------------------------------------------------------------------

691	.c2e9					LC2E9:
692	.c2e9	4d 66 03	eor $0366	                eor $0366
693	.c2ec	29 0e		and #$0e	                and #$0E
694	.c2ee	aa		tax		                tax
695	.c2ef					LC2EF:
696	.c2ef	7c 77 c1	jmp ($c177,x)	                jmp (LC177,x)

698	.c2f2					LC2F2:
699	.c2f2	ad 08 03	lda $0308	                lda $0308
700	.c2f5	cd 18 03	cmp $0318	                cmp $0318
701	.c2f8	b0 3d		bcs $c337	                bcs LC337
702	.c2fa	ce 18 03	dec $0318	                dec $0318
703	.c2fd	38		sec		                sec
704	.c2fe	ad 4a 03	lda $034a	                lda $034A
705	.c301	ed 4f 03	sbc $034f	                sbc $034F
706	.c304	8d 4a 03	sta $034a	                sta $034A
707	.c307	85 d8		sta $d8		                sta ZMEMT+0
708	.c309	b0 2b		bcs $c336	                bcs LC336
709	.c30b	ce 4b 03	dec $034b	                dec $034B
710	.c30e	80 1b		bra $c32b	                bra LC32B

712	.c310					LC310:
713	.c310	ad 18 03	lda $0318	                lda $0318
714	.c313	cd 0a 03	cmp $030a	                cmp $030A
715	.c316	b0 1f		bcs $c337	                bcs LC337
716	.c318	ee 18 03	inc $0318	                inc $0318
717	.c31b	ad 4a 03	lda $034a	                lda $034A
718	.c31e	6d 4f 03	adc $034f	                adc $034F
719	.c321	8d 4a 03	sta $034a	                sta $034A
720	.c324	85 d8		sta $d8		                sta ZMEMT+0
721	.c326	90 0f		bcc $c337	                bcc LC337
722	.c328	ee 4b 03	inc $034b	                inc $034B
723	.c32b					LC32B:
724	.c32b	ad 4b 03	lda $034b	                lda $034B
725	.c32e					LC32E:
726	.c32e	10 04		bpl $c334	                bpl LC334
727	.c330	38		sec		                sec
728	.c331	ed 54 03	sbc $0354	                sbc $0354
729	.c334					LC334:
730	.c334	85 d9		sta $d9		                sta ZMEMT+1
731	.c336					LC336:
732	.c336	18		clc		                clc
733	.c337					LC337:
734	.c337	60		rts		                rts

736	.c338					LC338:
737	.c338	ad 0b 03	lda $030b	                lda $030B
738	.c33b	cd 19 03	cmp $0319	                cmp $0319
739	.c33e	b0 f7		bcs $c337	                bcs LC337
740	.c340	ce 19 03	dec $0319	                dec $0319
741	.c343	38		sec		                sec
742	.c344	ad 4a 03	lda $034a	                lda $034A
743	.c347	ed 52 03	sbc $0352	                sbc $0352
744	.c34a	8d 4a 03	sta $034a	                sta $034A
745	.c34d	85 d8		sta $d8		                sta ZMEMT+0
746	.c34f	ad 4b 03	lda $034b	                lda $034B
747	.c352	ed 53 03	sbc $0353	                sbc $0353
748	.c355	8d 4b 03	sta $034b	                sta $034B
749	.c358	80 d4		bra $c32e	                bra LC32E

751	.c35a					LC35A:
752	.c35a	ad 19 03	lda $0319	                lda $0319
753	.c35d	cd 09 03	cmp $0309	                cmp $0309
754	.c360	b0 d5		bcs $c337	                bcs LC337
755	.c362	ee 19 03	inc $0319	                inc $0319
756	.c365	ad 4a 03	lda $034a	                lda $034A
757	.c368	6d 52 03	adc $0352	                adc $0352
758	.c36b	8d 4a 03	sta $034a	                sta $034A
759	.c36e	85 d8		sta $d8		                sta ZMEMT+0
760	.c370	ad 4b 03	lda $034b	                lda $034B
761	.c373	6d 53 03	adc $0353	                adc $0353
762	.c376	8d 4b 03	sta $034b	                sta $034B
763	.c379	80 b3		bra $c32e	                bra LC32E

765	.c37b					LC37B:
766	.c37b	a9 10		lda #$10	                lda #$10
767	.c37d	2c 66 03	bit $0366	                bit $0366
768	.c380	d0 0d		bne $c38f	                bne LC38F
769	.c382	8a		txa		                txa
770	.c383	49 06		eor #$06	                eor #$06
771	.c385	48		pha		                pha
772	.c386	a9 42		lda #$42	                lda #$42
773	.c388	24 d0		bit $d0		                bit STATE
774	.c38a	f0 16		beq $c3a2	                beq LC3A2
775	.c38c	70 09		bvs $c397	                bvs LC397
776	.c38e	68		pla		                pla
777	.c38f					LC38F:
778	.c38f	20 c5 c2	jsr $c2c5	                jsr resetTextCursorXPositionWithCursorFlags
779	.c392	20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
780	.c395	18		clc		                clc
781	.c396	60		rts		                rts

783	.c397					LC397:
784	.c397	20 be e2	jsr $e2be	                jsr exchangeEditCursorPositionAndTextCursorPosition
785	.c39a	fa		plx		                plx
786	.c39b	da		phx		                phx
787	.c39c	20 ef c2	jsr $c2ef	                jsr LC2EF
788	.c39f	20 be e2	jsr $e2be	                jsr exchangeEditCursorPositionAndTextCursorPosition
789	.c3a2					LC3A2:
790	.c3a2	fa		plx		                plx
791	.c3a3	38		sec		                sec
792	.c3a4					LC3A4:
793	.c3a4	60		rts		                rts

795	.c3a5					vdu28EntryPoint:
796	.c3a5	ae 55 03	ldx $0355	                ldx $0355
797	.c3a8	ad 21 03	lda $0321	                lda $0321
798	.c3ab	cd 23 03	cmp $0323	                cmp $0323
799	.c3ae	90 f4		bcc $c3a4	                bcc LC3A4
800	.c3b0	dd 11 e1	cmp $e111,x	                cmp modeMaxRow,x
801	.c3b3	f0 02		beq $c3b7	                beq LC3B7
802	.c3b5	b0 ed		bcs $c3a4	                bcs LC3A4
803	.c3b7					LC3B7:
804	.c3b7	ad 22 03	lda $0322	                lda $0322
805	.c3ba	dd 19 e1	cmp $e119,x	                cmp modeMaxColumn,x
806	.c3bd	f0 03		beq $c3c2	                beq LC3C2
807	.c3bf	b0 e3		bcs $c3a4	                bcs LC3A4
808	.c3c1	38		sec		                sec
809	.c3c2					LC3C2:
810	.c3c2	ed 20 03	sbc $0320	                sbc $0320
811	.c3c5	90 dd		bcc $c3a4	                bcc LC3A4
812	.c3c7	20 80 c7	jsr $c780	                jsr setTextWindowWidthInBytes
813	.c3ca	a9 08		lda #$08	                lda #$08
814	.c3cc	04 d0		tsb $d0		                tsb STATE
815	.c3ce	a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
816	.c3d0	a0 08		ldy #$08	                ldy #VDUVariables.textWindowLeft
817	.c3d2	20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
818	.c3d5	20 be e2	jsr $e2be	                jsr exchangeEditCursorPositionAndTextCursorPosition
819	.c3d8	20 da cc	jsr $ccda	                jsr LCCDA
820	.c3db	90 03		bcc $c3e0	                bcc LC3E0
821	.c3dd	20 e8 c3	jsr $c3e8	                jsr LC3E8
822	.c3e0					LC3E0:
823	.c3e0	20 be e2	jsr $e2be	                jsr exchangeEditCursorPositionAndTextCursorPosition
824	.c3e3	20 da cc	jsr $ccda	                jsr LCCDA
825	.c3e6	90 1f		bcc $c407	                bcc LC407
826	.c3e8					LC3E8:
827	.c3e8	a5 d0		lda $d0		                lda STATE
828	.c3ea	48		pha		                pha
829	.c3eb	29 df		and #$df	                and #$DF
830	.c3ed	85 d0		sta $d0		                sta STATE
831	.c3ef	20 7c c4	jsr $c47c	                jsr vdu30EntryPoint
832	.c3f2	68		pla		                pla
833	.c3f3	85 d0		sta $d0		                sta STATE
834	.c3f5	60		rts		                rts

836	.c3f6					vdu13EntryPoint:
837	.c3f6	ad 66 03	lda $0366	                lda $0366
838	.c3f9	29 0e		and #$0e	                and #$0E
839	.c3fb	aa		tax		                tax
840	.c3fc	20 e2 e2	jsr $e2e2	                jsr testVDU5State
841	.c3ff	d0 09		bne $c40a	                bne LC40A
842	.c401	4e 6c 03	lsr $036c	                lsr $036C
843	.c404	20 8f c3	jsr $c38f	                jsr LC38F
844	.c407					LC407:
845	.c407	4c ed c6	jmp $c6ed	                jmp updateCRTCCursorAddress

847	.c40a					LC40A:
848	.c40a	20 de c1	jsr $c1de	                jsr LC1DE
849	.c40d	4c df c4	jmp $c4df	                jmp LC4DF

851	.c410					LC410:
852	.c410	20 7c c4	jsr $c47c	                jsr vdu30EntryPoint

854						;-------------------------------------------------------------------------
855						;
856						; VDU 16 (&10) Clear graphics window [MasRef E.3-7]
857						;
858	.c413					vdu16EntryPoint:
859	.c413	ad 61 03	lda $0361	                lda vduv.pixelsPerByteMinusOne
860	.c416	f0 8c		beq $c3a4	                beq LC3A4                    ;taken if MODE 7
861	.c418	a2 00		ldx #$00	                ldx #VDUVariables.graphicsWindowPixelsLeft
862	.c41a	20 02 c9	jsr $c902	                jsr copyEightBytesToWorkspace28
863	.c41d	20 51 c9	jsr $c951	                jsr prepareForPlotBackground
864	.c420					LC420:
865	.c420	a2 2a		ldx #$2a	                ldx #$2A
866	.c422	a0 2e		ldy #$2e	                ldy #$2E
867	.c424	20 c2 e2	jsr $e2c2	                jsr exchangeTwoVDUBytes
868	.c427					LC427:
869	.c427	a2 28		ldx #$28	                ldx #$28
870	.c429	a0 2c		ldy #$2c	                ldy #$2C
871	.c42b	20 e8 da	jsr $dae8	                jsr LDAE8
872	.c42e	ad 2a 03	lda $032a	                lda $032A
873	.c431	d0 03		bne $c436	                bne LC436
874	.c433	ce 2b 03	dec $032b	                dec $032B
875	.c436					LC436:
876	.c436	ce 2a 03	dec $032a	                dec $032A
877	.c439	ad 2a 03	lda $032a	                lda $032A
878	.c43c	cd 2e 03	cmp $032e	                cmp $032E
879	.c43f	ad 2b 03	lda $032b	                lda $032B
880	.c442	ed 2f 03	sbc $032f	                sbc $032F
881	.c445	10 e0		bpl $c427	                bpl LC427
882	.c447	60		rts		                rts

884	.c448					LC448:
885	.c448	a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
886	.c44a	20 e6 c8	jsr $c8e6	                jsr prepareAABB
887	.c44d	80 d1		bra $c420	                bra LC420

889						;-------------------------------------------------------------------------
890						;
891						; VDU 12 (&0C) Clear text window [MasRef E.3-5]
892						;
893	.c44f					vdu12EntryPoint:
894	.c44f	a9 20		lda #$20	                lda #STATE.isVDU5
895	.c451	24 d0		bit $d0		                bit STATE
896	.c453	d0 bb		bne $c410	                bne LC410                    ;taken if VDU 5 mode
897	.c455	a9 08		lda #$08	                lda #STATE.isTextWindow
898	.c457	24 d0		bit $d0		                bit STATE
899	.c459	d0 03		bne $c45e	                bne clearTextWindow                    ;taken if text window
900	.c45b	4c 66 c8	jmp $c866	                jmp clsFastPath

902						                ; Clear screen within text window
903						                ; -------------------------------
904	.c45e					clearTextWindow:
905	.c45e	20 08 c9	jsr $c908	                jsr copyTextWindowWidthInBytesToWorkspace28
906	.c461	ae 08 03	ldx $0308	                ldx vduv.textWindowLeft
907	.c464	8e 18 03	stx $0318	                stx vduv.textCursorXPosition
908	.c467	ae 0b 03	ldx $030b	                ldx vduv.textWindowTop
909	.c46a					clearTextWindowRowsLoop:
910	.c46a	8e 19 03	stx $0319	                stx vduv.textCursorYPosition
911	.c46d	20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
912	.c470	20 e8 ca	jsr $cae8	                jsr LCAE8
913	.c473	ae 19 03	ldx $0319	                ldx vduv.textCursorYPosition
914	.c476	ec 09 03	cpx $0309	                cpx vduv.textWindowBottom
915	.c479	e8		inx		                inx
916	.c47a	90 ee		bcc $c46a	                bcc clearTextWindowRowsLoop

918						;-------------------------------------------------------------------------
919						;
920						; VDU 30 (&1E) Home cursor [MasRef E.3-36]
921						;
922	.c47c					vdu30EntryPoint:
923						                ; pretend it's VDU 31,0,0
924	.c47c	9c 23 03	stz $0323	                stz vduv.queueEnd-1
925	.c47f	9c 22 03	stz $0322	                stz vduv.queueEnd-2

927						;-------------------------------------------------------------------------
928						;
929						; VDU 31 (&1F) Tab cursor [MasRef E.3-36]
930						;
931	.c482					vdu31EntryPoint:
932	.c482	ad 66 03	lda $0366	                lda vduv.cursorFlags
933	.c485	29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
934	.c487	aa		tax		                tax
935	.c488					LC488:
936	.c488	20 e2 e2	jsr $e2e2	                jsr testVDU5State
937	.c48b	d0 42		bne $c4cf	                bne LC4CF                    ;taken if VDU 5
938	.c48d	ad 18 03	lda $0318	                lda vduv.textCursorXPosition
939	.c490	48		pha		                pha                          ;save old X pos
940	.c491	ad 19 03	lda $0319	                lda vduv.textCursorYPosition
941	.c494	48		pha		                pha                          ;save old Y pos
942	.c495	ad 22 03	lda $0322	                lda vduv.queueEnd-2          ;X coordinate
943	.c498	20 c7 c2	jsr $c2c7	                jsr setTextCursorXPositionWithCursorFlags
944	.c49b	da		phx		                phx                          ;save true cursorFlags bits
945	.c49c	8a		txa		                txa
946	.c49d	49 08		eor #$08	                eor #vduv.cursorFlags.swapAxes ;cheekily do the other axis by just changing the cursor flags
947	.c49f	aa		tax		                tax
948	.c4a0	ad 23 03	lda $0323	                lda vduv.queueEnd-1          ;Y coordinate
949	.c4a3	20 d7 cc	jsr $ccd7	                jsr LCCD7
950	.c4a6	fa		plx		                plx                    ;restore true cursorFlags bits
951	.c4a7	90 11		bcc $c4ba	                bcc LC4BA              ;taken if no scrolling required
952	.c4a9	a9 01		lda #$01	                lda #vduv.cursorFlags.scrollProtect
953	.c4ab	2c 66 03	bit $0366	                bit $0366
954	.c4ae	f0 11		beq $c4c1	                beq LC4C1                 ;taken if scroll protect off

956						                ; Wrap text cursor X.
957	.c4b0	ad 22 03	lda $0322	                lda vduv.queueEnd-2       ;X coordinate
958	.c4b3	3a		dec a		                dec a
959	.c4b4	20 d7 cc	jsr $ccd7	                jsr LCCD7
960	.c4b7	b0 08		bcs $c4c1	                bcs LC4C1
961	.c4b9	38		sec		                sec
962	.c4ba					LC4BA:
963	.c4ba	6e 6c 03	ror $036c	                ror vduv.column81
964	.c4bd	68		pla		                pla                          ;discard old Y pos
965	.c4be	68		pla		                pla                          ;discard old X pos
966	.c4bf	80 0b		bra $c4cc	                bra LC4CC

968	.c4c1					LC4C1:
969	.c4c1	68		pla		                pla
970	.c4c2	8d 19 03	sta $0319	                sta vduv.textCursorYPosition ;restore old Y pos
971	.c4c5	68		pla		                pla
972	.c4c6	8d 18 03	sta $0318	                sta vduv.textCursorXPosition ;restore old X pos
973	.c4c9	20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
974	.c4cc					LC4CC:
975	.c4cc	4c ed c6	jmp $c6ed	                jmp updateCRTCCursorAddress

977	.c4cf					LC4CF:
978	.c4cf	ad 22 03	lda $0322	                lda $0322
979	.c4d2	20 e0 c1	jsr $c1e0	                jsr LC1E0
980	.c4d5	8a		txa		                txa
981	.c4d6	49 08		eor #$08	                eor #$08
982	.c4d8	aa		tax		                tax
983	.c4d9	ad 23 03	lda $0323	                lda $0323
984	.c4dc	20 e0 c1	jsr $c1e0	                jsr LC1E0
985	.c4df					LC4DF:
986	.c4df	a0 10		ldy #$10	                ldy #$10
987	.c4e1	20 1c c9	jsr $c91c	                jsr copyGraphicsCursorPixels
988	.c4e4	a2 02		ldx #$02	                ldx #$02
989	.c4e6	a0 02		ldy #$02	                ldy #$02
990	.c4e8	20 fc c4	jsr $c4fc	                jsr LC4FC
991	.c4eb	a2 00		ldx #$00	                ldx #$00
992	.c4ed	a0 04		ldy #$04	                ldy #$04
993	.c4ef	ad 61 03	lda $0361	                lda $0361
994	.c4f2					LC4F2:
995	.c4f2	88		dey		                dey
996	.c4f3	4a		lsr a		                lsr a
997	.c4f4	d0 fc		bne $c4f2	                bne LC4F2
998	.c4f6	ad 56 03	lda $0356	                lda $0356
999	.c4f9	f0 01		beq $c4fc	                beq LC4FC
1000	.c4fb	c8		iny		                iny
1001	.c4fc					LC4FC:
1002	.c4fc	1e 10 03	asl $0310,x	                asl $0310,x
1003	.c4ff	3e 11 03	rol $0311,x	                rol $0311,x
1004	.c502	88		dey		                dey
1005	.c503	d0 f7		bne $c4fc	                bne LC4FC
1006	.c505	38		sec		                sec
1007	.c506	20 0a c5	jsr $c50a	                jsr LC50A
1008	.c509	e8		inx		                inx
1009	.c50a					LC50A:
1010	.c50a	bd 10 03	lda $0310,x	                lda $0310,x
1011	.c50d	fd 0c 03	sbc $030c,x	                sbc $030C,x
1012	.c510	9d 10 03	sta $0310,x	                sta $0310,x
1013	.c513	60		rts		                rts

1015						;-------------------------------------------------------------------------
1016						;
1017						; VDU 14 (&0E) Page mode on [MasRef E.3-6]
1018						;
1019	.c514					vdu14EntryPoint:
1020	.c514	9c 69 02	stz $0269	                stz pagedModeCounter
1021	.c517	a9 91		lda #$91	                lda #$91

1023						;-------------------------------------------------------------------------
1024						;
1025						; VDU 21 (&15) Disable VDU driver [MasRef E.3-11]
1026						;
1027	.c519					vdu21EntryPoint:
1028	.c519	49 95		eor #$95	                eor #$95
1029	.c51b					LC51B:
1030	.c51b	04 d0		tsb $d0		                tsb STATE
1031	.c51d	60		rts		                rts

1033						;-------------------------------------------------------------------------
1034						;
1035						; VDU 4 (&04) Print at text cursor [MasRef E.3-2]
1036						;
1037	.c51e					vdu4EntryPoint:
1038	.c51e	ad 61 03	lda $0361	                lda $0361
1039	.c521	f0 09		beq $c52c	                beq LC52C
1040	.c523	20 50 cf	jsr $cf50	                jsr showCursor
1041	.c526	a9 2b		lda #$2b	                lda #$2B

1043						                ; fall through to vdu15EntryPoint

1045						;-------------------------------------------------------------------------
1046						;
1047						; VDU 15 (&0F) Page mode off [MasRef E.3-6]
1048						;
1049	.c528					vdu15EntryPoint:
1050	.c528	49 0b		eor #$0b	                eor #$0B
1051	.c52a	14 d0		trb $d0		                trb STATE
1052	.c52c					LC52C:
1053	.c52c	60		rts		                rts

1055						;-------------------------------------------------------------------------
1056						;
1057						; VDU 5 (&05) Print text at graphics cursor [MasRef E.3-3]
1058						;
1059	.c52d					vdu5EntryPoint:
1060	.c52d	ad 61 03	lda $0361	                lda $0361
1061	.c530	f0 fa		beq $c52c	                beq LC52C
1062	.c532	a9 20		lda #$20	                lda #$20
1063	.c534	20 53 cf	jsr $cf53	                jsr setCRTCRegister10
1064	.c537	80 e2		bra $c51b	                bra LC51B

1066						;-------------------------------------------------------------------------
1067						;
1068						; VDU 17 (&11) Define text colour [MasRef E.3-7]
1069						;
1070	.c539					vdu17EntryPoint:
1071	.c539	a0 00		ldy #$00	                ldy #$00
1072	.c53b	ad 23 03	lda $0323	                lda $0323
1073	.c53e	10 01		bpl $c541	                bpl LC541
1074	.c540	c8		iny		                iny
1075	.c541					LC541:
1076	.c541	2d 60 03	and $0360	                and $0360
1077	.c544	85 da		sta $da		                sta $DA
1078	.c546	ad 60 03	lda $0360	                lda $0360
1079	.c549	f0 18		beq $c563	                beq LC563
1080	.c54b	29 07		and #$07	                and #$07
1081	.c54d	18		clc		                clc
1082	.c54e	65 da		adc $da		                adc $DA
1083	.c550	aa		tax		                tax
1084	.c551	bd 5b e1	lda $e15b,x	                lda solidColoursTable-1,x
1085	.c554	99 57 03	sta $0357,y	                sta $0357,y
1086	.c557	ad 57 03	lda $0357	                lda $0357
1087	.c55a	49 ff		eor #$ff	                eor #$FF
1088	.c55c	85 d3		sta $d3		                sta ZEOR
1089	.c55e	4d 58 03	eor $0358	                eor $0358
1090	.c561	85 d2		sta $d2		                sta ZORA
1091	.c563					LC563:
1092	.c563	60		rts		                rts

1094						;-------------------------------------------------------------------------
1095						;
1096						; VDU 18 (&12) Define graphics colour [MasRef E.3-7]
1097						;
1098	.c564					vdu18EntryPoint:
1099	.c564	a0 00		ldy #$00	                ldy #$00                    ;assume setting foreground
1100	.c566	ad 23 03	lda $0323	                lda vduv.queueEnd-1         ;get colour
1101	.c569	10 01		bpl $c56c	                bpl +                     ;taken if setting foreground
1102	.c56b	c8		iny		                iny                       ;setting background
1103	.c56c					+
1104	.c56c	2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne
1105	.c56f	99 6d 03	sta $036d,y	                sta vduv.foregroundGraphicsColour,y
1106	.c572	ad 22 03	lda $0322	                lda vduv.queueEnd-2          ;get GCOL mode
1107	.c575	99 5b 03	sta $035b,y	                sta vduv.foregroundGCOLMode,y
1108	.c578	29 f0		and #$f0	                and #$F0                     ;non-zero if ECF
1109	.c57a	99 6a 03	sta $036a,y	                sta vduv.isForegroundECF,y
1110	.c57d					initializeCurrentECFPatterns:
1111	.c57d	ad 5b 03	lda $035b	                lda vduv.foregroundGCOLMode
1112	.c580	ae 6d 03	ldx $036d	                ldx vduv.foregroundGraphicsColour
1113	.c583	a0 00		ldy #$00	                ldy #andy.fgECFPattern-andy.currentECFPatterns
1114	.c585	20 90 c5	jsr $c590	                jsr initializeCurrentECFPattern
1115	.c588	ad 5c 03	lda $035c	                lda vduv.backgroundGCOLMode
1116	.c58b	ae 6e 03	ldx $036e	                ldx vduv.backgroundGraphicsColour
1117	.c58e	a0 08		ldy #$08	                ldy #andy.bgECFPattern-andy.currentECFPatterns
1118	.c590					initializeCurrentECFPattern:
1119	.c590	29 f0		and #$f0	                and #$F0                     ;GCOL mode ECF bits
1120	.c592	d0 18		bne $c5ac	                bne initializeECFPatternFromPattern

1122	.c594					initializeECFPatternFromColour:
1123	.c594	86 da		stx $da		                stx ZTEMP+0                  ;colour low bits
1124	.c596	ad 60 03	lda $0360	                lda vduv.numberOfLogicalColoursMinusOne
1125	.c599	29 07		and #$07	                and #$07
1126	.c59b	18		clc		                clc
1127	.c59c	65 da		adc $da		                adc ZTEMP+0
1128	.c59e	aa		tax		                tax
1129						                ; use solid colour as ECF "pattern".
1130	.c59f	bd 5b e1	lda $e15b,x	                lda solidColoursTable-1,x
1131	.c5a2	a2 07		ldx #$07	                ldx #$07
1132	.c5a4					-
1133	.c5a4	99 20 88	sta $8820,y	                sta andy.fgECFPattern,y
1134	.c5a7	c8		iny		                iny
1135	.c5a8	ca		dex		                dex
1136	.c5a9	10 f9		bpl $c5a4	                bpl -
1137	.c5ab	60		rts		                rts

1139	.c5ac					initializeECFPatternFromPattern:
1140	.c5ac	4a		lsr a		                lsr a                        ;(index+1)*8
1141	.c5ad	aa		tax		                tax
1142	.c5ae	a9 07		lda #$07	                lda #$07
1143	.c5b0	85 da		sta $da		                sta ZTEMP+0
1144	.c5b2					-
1145	.c5b2	bd f8 87	lda $87f8,x	                lda andy.ecfPatterns-8,x     ;-8 due to index+1 above
1146	.c5b5	99 20 88	sta $8820,y	                sta andy.fgECFPattern,y
1147	.c5b8	e8		inx		                inx
1148	.c5b9	c8		iny		                iny
1149	.c5ba	c6 da		dec $da		                dec ZTEMP+0
1150	.c5bc	10 f4		bpl $c5b2	                bpl -
1151	.c5be	60		rts		                rts

1153						;-------------------------------------------------------------------------
1154						;
1155						; VDU 20 (&14) Restore default logical colours [MasRef E.3-10]
1156						;
1157	.c5bf					setBackgroundTextColourForTeletext:
1158	.c5bf	a9 20		lda #$20	                lda #' '
1159	.c5c1	8d 58 03	sta $0358	                sta vduv.backgroundTextColour
1160	.c5c4	60		rts		                rts

1162	.c5c5					vdu20EntryPoint:
1163	.c5c5	a2 05		ldx #$05	                ldx #$05
1164	.c5c7					-
1165	.c5c7	9e 57 03	stz $0357,x	                stz vduv.foregroundTextColour,x
1166	.c5ca	ca		dex		                dex
1167	.c5cb	10 fa		bpl $c5c7	                bpl -
1168	.c5cd	9c 6e 03	stz $036e	                stz vduv.backgroundGraphicsColour
1169	.c5d0	9c 6b 03	stz $036b	                stz vduv.isBackgroundECF
1170	.c5d3	a9 ff		lda #$ff	                lda #%11111111
1171	.c5d5	ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
1172	.c5d8	f0 e5		beq $c5bf	                beq setBackgroundTextColourForTeletext
1173	.c5da	e0 0f		cpx #$0f	                cpx #$0F
1174	.c5dc	d0 02		bne $c5e0	                bne +                        ;taken unless MODE 2
1175	.c5de	a9 3f		lda #$3f	                lda #%00111111               ;MODE 2 default foreground colour is 7
1176	.c5e0					+
1177	.c5e0	8d 57 03	sta $0357	                sta vduv.foregroundTextColour
1178	.c5e3	49 ff		eor #$ff	                eor #$FF
1179	.c5e5	85 d2		sta $d2		                sta ZORA
1180	.c5e7	85 d3		sta $d3		                sta ZEOR
1181	.c5e9	8a		txa		                txa
1182	.c5ea	29 07		and #$07	                and #$07
1183	.c5ec	8d 6d 03	sta $036d	                sta vduv.foregroundGraphicsColour
1184	.c5ef	9c 6a 03	stz $036a	                stz vduv.isForegroundECF
1185	.c5f2	da		phx		                phx                          ;save numberOfLogicalColoursMinusOne
1186	.c5f3	20 7d c5	jsr $c57d	                jsr initializeCurrentECFPatterns
1187	.c5f6	fa		plx		                plx                          ;restore numberOfLogicalColoursMinusOne
1188	.c5f7	8e 1f 03	stx $031f	                stx vduv.queueEnd-5          ;Prepare VDU19,<max logical colour>
1189	.c5fa	e0 03		cpx #$03	                cpx #$03
1190	.c5fc	f0 11		beq $c60f	                beq reset4Colours            ;taken if MODE 1/5
1191	.c5fe	90 20		bcc $c620	                bcc reset2Colours            ;taken if MODE 0/3/4/6
1192	.c600					reset16Colours:
1193	.c600	8e 20 03	stx $0320	                stx vduv.queueEnd-4          ;start with VDU19,15,15,_,_,_
1194	.c603					-
1195	.c603	20 2d c6	jsr $c62d	                jsr vdu19EntryPoint
1196	.c606	ce 20 03	dec $0320	                dec vduv.queueEnd-4
1197	.c609	ce 1f 03	dec $031f	                dec vduv.queueEnd-5
1198	.c60c	10 f5		bpl $c603	                bpl -
1199	.c60e	60		rts		                rts

1201	.c60f					reset4Colours:
1202	.c60f	a2 07		ldx #$07	                ldx #$07
1203	.c611	8e 20 03	stx $0320	                stx vduv.queueEnd-4          ;start with VDU19,3,7,_,_,_
1204	.c614					-
1205	.c614	20 2d c6	jsr $c62d	                jsr vdu19EntryPoint          ;2,3, then 1,1, then 0,0
1206	.c617	4e 20 03	lsr $0320	                lsr vduv.queueEnd-4
1207	.c61a	ce 1f 03	dec $031f	                dec vduv.queueEnd-5
1208	.c61d	10 f5		bpl $c614	                bpl -
1209	.c61f	60		rts		                rts

1211	.c620					reset2Colours:
1212	.c620	a2 07		ldx #$07	                ldx #$07
1213	.c622	20 2a c6	jsr $c62a	                jsr +                        ;VDU19,1,7,_,_,_
1214	.c625	a2 00		ldx #$00	                ldx #$00
1215	.c627	9c 1f 03	stz $031f	                stz vduv.queueEnd-5          ;VDU19,0,0,_,_,_
1216	.c62a					+
1217	.c62a	8e 20 03	stx $0320	                stx vduv.queueEnd-4          ;VDU19,N,X,_,_,_

1219						                ; fall through to VDU19

1221						;-------------------------------------------------------------------------
1222						;
1223						; VDU 19 (&13) Define logical colour [MasRef E.3-9]
1224						;
1225	.c62d					vdu19EntryPoint:
1226	.c62d	08		php		                php
1227	.c62e	78		sei		                sei
1228	.c62f	ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get logical colour
1229	.c632	2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne ;apply logical colour limit
1230	.c635	aa		tax		                tax                        ;X = clamped logical colour
1231	.c636	ad 20 03	lda $0320	                lda vduv.queueEnd-4        ;get physical colour
1232	.c639					LC639:
1233	.c639	29 0f		and #$0f	                and #$0F                     ;apply physical colour limit
1234	.c63b	9d 6f 03	sta $036f,x	                sta vduv.currentPalette,x    ;update palette
1235	.c63e	a8		tay		                tay                          ;Y = physical colour
1236	.c63f	ad 60 03	lda $0360	                lda vduv.numberOfLogicalColoursMinusOne
1237	.c642	85 fa		sta $fa		                sta SEIWKA
1238	.c644	c9 03		cmp #$03	                cmp #$03 ;Z=1 C=1 if 4 colour; Z=0 C=1 if 16 colour; Z=0 C=0 if 2 colour
1239	.c646	08		php		                php      ;save flags
1240	.c647	8a		txa		                txa                          ;A = logical colour

1242						                ;put the logical colour value in the top 1, 2 or 4
1243						                ;bits of SEIWKA, depending on the colour depth.
1244						                ;
1245						                ; 2 colours: turn %0000000a into %a0000000
1246						                ; 4 colours: turn %000000ab into %ab000000
1247						                ;16 colours: turn %0000abcd into %abcd0000
1248	.c648					-
1249	.c648	4a		lsr a		                lsr a
1250	.c649	66 fa		ror $fa		                ror SEIWKA
1251	.c64b	b0 fb		bcs $c648	                bcs -
1252	.c64d	06 fa		asl $fa		                asl SEIWKA

1254	.c64f	98		tya		                tya                          ;A = physical colour
1255	.c650	05 fa		ora $fa		                ora SEIWKA                   ;mix in logical colour
1256	.c652	aa		tax		                tax                          ;X = VPALETTE value
1257	.c653	a0 f0		ldy #$f0	                ldy #$F0 ;counts up to zero - counter for setting
1258						                         ;multiple logical colours [AUG p380]
1259	.c655					LC655:
1260	.c655	28		plp		                plp                          ;restore flags
1261	.c656	08		php		                php                          ;save flags
1262	.c657	d0 03		bne $c65c	                bne +                     ;taken if 2 colour/16 colour
1263	.c659	20 6f c6	jsr $c66f	                jsr fixUpVPALETTEFor4Colours
1264	.c65c					+
1265	.c65c	20 20 f3	jsr $f320	                jsr writeVPALETTE
1266	.c65f	18		clc		                clc
1267	.c660	98		tya		                tya
1268	.c661	6d 60 03	adc $0360	                adc vduv.numberOfLogicalColoursMinusOne
1269	.c664	a8		tay		                tay
1270	.c665	8a		txa		                txa
1271	.c666	69 10		adc #$10	                adc #$10                     ;next logical colour
1272	.c668	aa		tax		                tax
1273	.c669	c8		iny		                iny                          ;Y+=numberOfLogicalColours
1274	.c66a	d0 e9		bne $c655	                bne LC655                    ;all logical colours set once zero
1275	.c66c	28		plp		                plp
1276	.c66d	28		plp		                plp
1277	.c66e	60		rts		                rts

1279	.c66f					fixUpVPALETTEFor4Colours:
1280	.c66f	2a		rol a		                rol a                        ;A BCDabcd1
1281	.c670	85 da		sta $da		                sta ZTEMP+0                  ;  BCDabcd1
1282	.c672	2a		rol a		                rol a                        ;B CDabcd1A
1283	.c673	2a		rol a		                rol a                        ;C Dabcd1AB
1284	.c674	08		php		                php                          ;C
1285	.c675	26 da		rol $da		                rol ZTEMP+0                  ;B CDabcd1C
1286	.c677	6a		ror a		                ror a                        ;B BDabcd1A
1287	.c678	28		plp		                plp                          ;C BDabcd1A
1288	.c679	6a		ror a		                ror a                        ;A CBDabcd1
1289	.c67a	6a		ror a		                ror a                        ;1 ACBDabcd
1290	.c67b	60		rts		                rts                          ;

1292						;-------------------------------------------------------------------------
1293						;
1294						; VDU 23 (&17) Various functions [MasRef E.3-12]
1295						;
1296	.c67c					vdu23EntryPoint:
1297	.c67c	ad 1b 03	lda $031b	                lda vduv.queueEnd-9           ;get VDU 23 code
1298	.c67f	c9 20		cmp #$20	                cmp #$20
1299	.c681	90 0e		bcc $c691	                bcc LC691         ;branch taken if <32 - i.e., special

1301						                ; copy the 8 bytes of character definition to the
1302						                ; appropriate place.
1303	.c683	20 3c e2	jsr $e23c	                jsr getSoftCharacterDefinitionAddress
1304	.c686	a0 07		ldy #$07	                ldy #$07
1305	.c688					LC688:
1306	.c688	b9 1c 03	lda $031c,y	                lda vduv.queueEnd-8,y
1307	.c68b	91 de		sta ($de),y	                sta ($DE),y
1308	.c68d	88		dey		                dey
1309	.c68e	10 f8		bpl $c688	                bpl LC688
1310	.c690	60		rts		                rts

1312	.c691					LC691:
1313	.c691	0a		asl a		                asl a
1314	.c692	aa		tax		                tax
1315	.c693	4a		lsr a		                lsr a
1316	.c694	c9 11		cmp #$11	                cmp #$11
1317	.c696	b0 0f		bcs $c6a7	                bcs callVDUV    ;call with C=1 - invalid code [MasRef
1318						                                ;E.3-19]
1319	.c698	7c 79 e0	jmp ($e079,x)	                jmp (vdu23EntryPointTable,x)

1321						;-------------------------------------------------------------------------
1322						;
1323						; VDU 25 (&19) PLOT commands [MasRef E.3-21]
1324						;
1325	.c69b					vdu25EntryPoint:
1326	.c69b	ae 61 03	ldx $0361	                ldx vduv.pixelsPerByteMinusOne
1327	.c69e	f0 03		beq $c6a3	                beq callVDUVForPLOT          ;non-graphics PLOT
1328	.c6a0	4c 46 d1	jmp $d146	                jmp handlePLOT

1330						;-------------------------------------------------------------------------
1331						;
1332						; Call VDUV for a PLOT call, either to handle non-graphics PLOT
1333						; [MasRef E.3-21] or PLOT 240-255 [MasRef E.3-34].
1334						;
1335	.c6a3					callVDUVForPLOT:
1336	.c6a3	ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT code
1337	.c6a6	18		clc		                clc ;call with C=0 - non-graphics PLOT [MasRef E.3-21]

1339						;-------------------------------------------------------------------------
1340						;
1341						; Call VDUV.
1342						;
1343	.c6a7					callVDUV:
1347	.c6a7	4c f3 e2	jmp $e2f3	                jmp LE2F3

1350						;-------------------------------------------------------------------------
1351						;
1352						; VDU 26 (&1A) Restore default windows [MasRef E.3-34]
1353						;
1354	.c6aa					vdu26EntryPoint:
1355	.c6aa	a2 2c		ldx #$2c	                ldx #VDUVariables.workspace._2C
1356	.c6ac					-
1357	.c6ac	9e 00 03	stz $0300,x	                stz vduv,x                    ;reset workspace
1358	.c6af	ca		dex		                dex
1359	.c6b0	10 fa		bpl $c6ac	                bpl -

1361	.c6b2	20 b2 e2	jsr $e2b2	                jsr getDefaultBoundsForCurrentScreenMODE
1362	.c6b5	8e 0a 03	stx $030a	                stx vduv.textWindowRight
1363	.c6b8	8c 09 03	sty $0309	                sty vduv.textWindowBottom

1365	.c6bb	8a		txa		                txa
1366	.c6bc	20 80 c7	jsr $c780	                jsr setTextWindowWidthInBytes

1368						                ; Set up the VDU queue as if VDU 24,0;0;1279;1023;,
1369						                ; then call the VDU 24 entry point.

1371						                ; 1c - ll - $00
1372						                ; 1d - lh - $00
1373						                ; 1e - tl - $00
1374						                ; 1f - th - $00
1375						                ; 20 - rl - $ff
1376						                ; 21 - rh - $04
1377						                ; 22 - tl - $ff
1378						                ; 23 - th - $03

1380	.c6bf	a0 03		ldy #$03	                ldy #$03
1381	.c6c1	8c 23 03	sty $0323	                sty $0323
1382	.c6c4	c8		iny		                iny
1383	.c6c5	8c 21 03	sty $0321	                sty $0321
1384	.c6c8	ce 22 03	dec $0322	                dec $0322
1385	.c6cb	ce 20 03	dec $0320	                dec $0320
1386	.c6ce	20 1f c7	jsr $c71f	                jsr vdu24EntryPoint

1388	.c6d1	a9 08		lda #$08	                lda #STATE.isTextWindow
1389	.c6d3	14 d0		trb $d0		                trb STATE                    ;reset isTextWindow

1391	.c6d5	4c 7c c4	jmp $c47c	                jmp vdu30EntryPoint          ;reset text cursor

1393						;-------------------------------------------------------------------------
1394						;
1395						; Update CRTC cursor address to reflect text cursor position.
1396						;
1397	.c6d8					updateCRTCTextCursor:
1398	.c6d8	20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
1399	.c6db	80 10		bra $c6ed	                bra updateCRTCCursorAddress

1401						;-------------------------------------------------------------------------

1403	.c6dd					setCRTCCursorAddress:
1404	.c6dd	8e 4a 03	stx $034a	                stx vduv.textCursorCRTCAddress+0
1405	.c6e0	8d 4b 03	sta $034b	                sta vduv.textCursorCRTCAddress+1
1406	.c6e3	10 04		bpl $c6e9	                bpl +
1407	.c6e5	38		sec		                sec
1408	.c6e6	ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte
1409	.c6e9					+
1410	.c6e9	86 d8		stx $d8		                stx ZMEMT+0
1411	.c6eb	85 d9		sta $d9		                sta ZMEMT+1

1413						;-------------------------------------------------------------------------
1414						;
1415						;
1416	.c6ed					updateCRTCCursorAddress:
1417	.c6ed	ae 4a 03	ldx $034a	                ldx vduv.textCursorCRTCAddress+0
1418	.c6f0	ad 4b 03	lda $034b	                lda vduv.textCursorCRTCAddress+1
1419	.c6f3	a0 0e		ldy #$0e	                ldy #$0E

1421						;-------------------------------------------------------------------------
1422						;
1423						; Set CRTC address - cursor, or screen start.
1424						;
1425						; entry:
1426						;
1427						; A (msb), X (msb) = 6502 address to set
1428						;
1429						; Y = first CRTC register to set
1430						;
1431	.c6f5					setCRTCAddress:
1432	.c6f5	48		pha		                pha                          ;save screen address MSB
1433	.c6f6	ad 55 03	lda $0355	                lda vduv.currentScreenMODE
1434	.c6f9	c9 07		cmp #$07	                cmp #$07
1435	.c6fb	68		pla		                pla                        ;restore screen address MSB
1436	.c6fc	b0 0f		bcs $c70d	                bcs adjustAddressForMODE7
1437	.c6fe	86 da		stx $da		                stx ZTEMP+0
1438	.c700	4a		lsr a		                lsr a
1439	.c701	66 da		ror $da		                ror ZTEMP+0                  ;/2
1440	.c703	4a		lsr a		                lsr a
1441	.c704	66 da		ror $da		                ror ZTEMP+0                  ;/4
1442	.c706	4a		lsr a		                lsr a
1443	.c707	66 da		ror $da		                ror ZTEMP+0                  ;/8
1444	.c709	a6 da		ldx $da		                ldx ZTEMP+0
1445	.c70b	80 04		bra $c711	                bra setCRTCAddressRegisters

1447	.c70d					adjustAddressForMODE7:
1448						                ; C=1
1449	.c70d	e9 74		sbc #$74	                sbc #$74                 ;adjust for Mode 7 addressing
1450	.c70f	49 20		eor #$20	                eor #$20                 ;adjust for Mode 7 addressing
1451	.c711					setCRTCAddressRegisters:
1452	.c711	8c 00 fe	sty $fe00	                sty CRTC+0
1453	.c714	8d 01 fe	sta $fe01	                sta CRTC+1
1454	.c717	c8		iny		                iny
1455	.c718	8c 00 fe	sty $fe00	                sty CRTC+0
1456	.c71b	8e 01 fe	stx $fe01	                stx CRTC+1
1457	.c71e	60		rts		                rts

1459						;-------------------------------------------------------------------------
1460						;
1461						; VDU 24 (&18) Define graphics window [MasRef E.3-21]
1462						;
1463						; VDU queue:
1464						;
1465						; -8 = <left
1466						; -7 = >left
1467						; -6 = <bottom
1468						; -5 = >bottom
1469						; -4 = <right
1470						; -3 = >right
1471						; -2 = <top
1472						; -1 = >top
1473						;
1474	.c71f					vdu24EntryPoint:
1475	.c71f	20 79 c7	jsr $c779	                jsr LC779

1477	.c722	a2 02		ldx #$02	                ldx #2
1478	.c724					-
1479	.c724	38		sec		                sec

1481						                ; <height when X=2, then <width when X=0
1482	.c725	bd 20 03	lda $0320,x	                lda vduv.queueEnd-4+0,x
1483	.c728	fd 1c 03	sbc $031c,x	                sbc vduv.queueEnd-8+0,x
1484	.c72b	9d 2c 03	sta $032c,x	                sta vduv.workspace._2C+0,x

1486						                ; >height when X=2, then >width when X=0
1487	.c72e	bd 21 03	lda $0321,x	                lda vduv.queueEnd-4+1,x
1488	.c731	fd 1d 03	sbc $031d,x	                sbc vduv.queueEnd-8+1,x
1489	.c734	9d 2d 03	sta $032d,x	                sta vduv.workspace._2C+1,x

1491	.c737	ca		dex		                dex
1492	.c738	ca		dex		                dex
1493	.c739	10 e9		bpl $c724	                bpl -

1495	.c73b	0d 2f 03	ora $032f	                ora vduv.workspace._2C+3     ;A=>width|>height
1496	.c73e	30 39		bmi $c779	                bmi LC779 ;taken if either dimension negative - window invalid
1497	.c740	a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4 ;left bottom
1498	.c742	20 de d1	jsr $d1de	                jsr eigabsEntryPoint         ;convert to pixels
1499	.c745	a2 1c		ldx #$1c	                ldx #VDUVariables.queueEnd-8 ;right top
1500	.c747	20 de d1	jsr $d1de	                jsr eigabsEntryPoint         ;convert to pixels
1501	.c74a	ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;>bottom
1502	.c74d	0d 1d 03	ora $031d	                ora vduv.queueEnd-7          ;>left
1503	.c750	30 27		bmi $c779	                bmi LC779 ;taken if either bottom or left negative - window invalid
1504	.c752	ad 23 03	lda $0323	                lda vduv.queueEnd-1          ;>top
1505	.c755	d0 22		bne $c779	                bne LC779          ;taken if top>=256 - window invalid
1506	.c757	ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
1507	.c75a	ad 21 03	lda $0321	                lda vduv.queueEnd-3          ;>right
1508	.c75d	85 da		sta $da		                sta ZTEMP+0
1509	.c75f	ad 20 03	lda $0320	                lda vduv.queueEnd-4          ;<right
1510	.c762	46 da		lsr $da		                lsr ZTEMP+0                  ;>(right/2)
1511	.c764	6a		ror a		                ror a                        ;<(right/2)
1512	.c765	46 da		lsr $da		                lsr ZTEMP+0                  ;>(right/4)

1514						                ; 639>>2=159 - so any valid pixel X in any mode will
1515						                ; have an MSB of 0 after being shifted right 2.
1516	.c767	d0 10		bne $c779	                bne LC779 ;taken if right edge definitely off screen - window invalid
1517	.c769	6a		ror a		                ror a     ;<(right/4)
1518	.c76a	4a		lsr a		                lsr a     ;<(right/8)
1519	.c76b	dd 19 e1	cmp $e119,x	                cmp modeMaxColumn,x
1520	.c76e	f0 02		beq $c772	                beq LC772                    ;taken if right edge just on screen
1521	.c770	10 07		bpl $c779	                bpl LC779 ;taken if right edge off screen - window definitely invalid
1522	.c772					LC772:
1523	.c772	a0 00		ldy #$00	                ldy #VDUVariables.graphicsWindowPixelsLeft
1524	.c774	a2 1c		ldx #$1c	                ldx #VDUVariables.queueEnd-8
1525	.c776	20 04 c9	jsr $c904	                jsr copyEightBytesWithinVDUVariables
1526	.c779					LC779:
1527	.c779	a2 10		ldx #$10	                ldx #VDUVariables.graphicsCursorPositionX
1528	.c77b	a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
1529	.c77d	4c ca e2	jmp $e2ca	                jmp exchangeFourVDUBytes

1531						;-------------------------------------------------------------------------
1532						;
1533						; Call getBytesPerInclusiveTextRow, and store the result in the
1534						; textWindowWidthInBytes VDU variable.
1535						;
1536	.c780					setTextWindowWidthInBytes:
1537	.c780	20 3b c9	jsr $c93b	                jsr getBytesPerInclusiveTextRow
1538	.c783	8d 4c 03	sta $034c	                sta vduv.textWindowWidthInBytes+0
1539	.c786	8e 4d 03	stx $034d	                stx vduv.textWindowWidthInBytes+1
1540	.c789	60		rts		                rts

1542						;-------------------------------------------------------------------------
1543						;
1544						; VDU 29 (&1D) Define graphics origin [MasRef E.3-35]
1545						;
1546	.c78a					vdu29EntryPoint:
1547	.c78a	a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
1548	.c78c	a0 0c		ldy #$0c	                ldy #VDUVariables.graphicsWindowOriginX
1549	.c78e	20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
1550	.c791	4c df c4	jmp $c4df	                jmp LC4DF

1552						;-------------------------------------------------------------------------
1553						;
1554						; VDU 22 (&16) Select screen mode [MasRef E.3-11]
1555						;
1556	.c794					vdu22EntryPoint:
1557	.c794	ad 23 03	lda $0323	                lda vduv.queueEnd-1          ;get MODE number
1558	.c797	80 23		bra $c7bc	                bra setMODE

1560						;-------------------------------------------------------------------------
1561						;
1562	.c799					setStartupMODE:
1566	.c799	85 da		sta $da		                sta ZTEMP+0                  ;save MODE
1567	.c79b	a5 f4		lda $f4		                lda $F4
1568	.c79d	48		pha		                pha
1569	.c79e	09 80		ora #$80	                ora #$80                     ;page in ANDY
1570	.c7a0	20 ab e5	jsr $e5ab	                jsr selectROMA
1571	.c7a3	20 aa c7	jsr $c7aa	                jsr +
1572	.c7a6	68		pla		                pla
1573	.c7a7	4c ab e5	jmp $e5ab	                jmp selectROMA               ;restore old ROM

1575	.c7aa					+
1576						                ; TODO but what of the reserved byte here?
1577	.c7aa	a2 7f		ldx #$7f	                ldx #size(VDUVariables)-1
1578	.c7ac	64 d0		stz $d0		                stz STATE
1579	.c7ae	ad 66 03	lda $0366	                lda vduv.cursorFlags
1580	.c7b1					-
1581	.c7b1	9e ff 02	stz $02ff,x	                stz vduv-1,x
1582	.c7b4	ca		dex		                dex
1583	.c7b5	d0 fa		bne $c7b1	                bne -
1584	.c7b7	8d 66 03	sta $0366	                sta vduv.cursorFlags
1585	.c7ba	a5 da		lda $da		                lda ZTEMP                    ;restore MODE

1587						                ; fall through to setMODE

1589						;-------------------------------------------------------------------------
1590						;
1591						;
1592						;
1593	.c7bc					setMODE:
1594	.c7bc	9c 8a 02	stz $028a	                stz vduDriverMemory
1595	.c7bf	9c 8b 02	stz $028b	                stz displayMemory
1596	.c7c2	a8		tay		                tay                          ;Y=mode
1597	.c7c3	30 10		bmi $c7d5	                bmi setShadowMODE
1598	.c7c5	ae 7f 02	ldx $027f	                ldx shadowRAMState
1599	.c7c8	f0 0b		beq $c7d5	                beq setShadowMODE
1600	.c7ca	a9 10		lda #$10	                lda #STATE.isShadowMode
1601	.c7cc	14 d0		trb $d0		                trb STATE
1602	.c7ce	a9 03		lda #$03	                lda #ACCCON.D|ACCCON.E
1603	.c7d0	1c 34 fe	trb $fe34	                trb ACCCON ;display main RAM, VDU code accesses main RAM
1604	.c7d3	80 09		bra $c7de	                bra +

1606	.c7d5					setShadowMODE:
1607	.c7d5	a9 10		lda #$10	                lda #STATE.isShadowMode
1608	.c7d7	04 d0		tsb $d0		                tsb STATE
1609	.c7d9	a9 03		lda #$03	                lda #ACCCON.D|ACCCON.E
1610	.c7db	0c 34 fe	tsb $fe34	                tsb ACCCON ;display shadow RAM, VDU code accesses shadow RAM
1611	.c7de					+
1612	.c7de	98		tya		                tya                          ;A=mode
1613	.c7df	29 07		and #$07	                and #$07                     ;get MODE 0-7
1614	.c7e1	aa		tax		                tax                          ;X=MODE 0-7
1615	.c7e2	8e 55 03	stx $0355	                stx vduv.currentScreenMODE
1616	.c7e5	bd 4c e1	lda $e14c,x	                lda numberOfLogicalColoursMinusOneForMODE,x
1617	.c7e8	8d 60 03	sta $0360	                sta vduv.numberOfLogicalColoursMinusOne
1618	.c7eb	bd 29 e1	lda $e129,x	                lda bytesPerCharacterForMODE,x
1619	.c7ee	8d 4f 03	sta $034f	                sta vduv.bytesPerCharacter
1620	.c7f1	bd 72 e1	lda $e172,x	                lda pixelsPerByteMinusOneForMODE,x
1621	.c7f4	8d 61 03	sta $0361	                sta vduv.pixelsPerByteMinusOne
1622	.c7f7	d0 02		bne $c7fb	                bne +                        ;taken if graphics mode
1623	.c7f9	a9 07		lda #$07	                lda #$07                     ;assume 8 px/byte for non-graphics modes
1624	.c7fb					+
1625	.c7fb	0a		asl a		                asl a            ;convert to pixelMasks index for rightmost pixel
1626	.c7fc	a8		tay		                tay
1627	.c7fd	b9 3e e1	lda $e13e,y	                lda pixelMasks-1,y
1628	.c800	8d 63 03	sta $0363	                sta vduv.colourMaskRight
1629	.c803					-
1630	.c803	0a		asl a		                asl a
1631	.c804	10 fd		bpl $c803	                bpl -   ;keep shifting until leftmost pixel mask found
1632	.c806	8d 62 03	sta $0362	                sta vduv.colourMaskLeft
1633	.c809	bc 78 e1	ldy $e178,x	                ldy screenMODEGroupForMODE,x
1634	.c80c	8c 56 03	sty $0356	                sty vduv.currentScreenMODEGroup
1635	.c80f	b9 84 e1	lda $e184,y	                lda latchBit4ForScreenMODEGroup,y
1636	.c812	08		php		                php
1637	.c813	78		sei		                sei
1638	.c814	8d 40 fe	sta $fe40	                sta systemVIA.orb
1639	.c817	b9 80 e1	lda $e180,y	                lda latchBit5ForScreenMODEGroup,y
1640	.c81a	8d 40 fe	sta $fe40	                sta systemVIA.orb
1641	.c81d	28		plp		                plp
1642	.c81e	b9 89 e1	lda $e189,y	                lda screenSizeHighByteForScreenMODEGroup,y
1643	.c821	8d 54 03	sta $0354	                sta vduv.screenSizeHighByte
1644	.c824	b9 8e e1	lda $e18e,y	                lda startScreenAddressHighByteForScreenMODEGroup,y
1645	.c827	8d 4e 03	sta $034e	                sta vduv.startScreenAddressHighByte
1646	.c82a	a9 ee		lda #$ee	                lda #STATE.isVDU21|STATE.isCursorEditing|STATE.isVDU5|STATE.isTextWindow|STATE.isPagedScrolling|STATE.isScrollingDisabled
1647	.c82c	14 d0		trb $d0		                trb STATE
1648	.c82e	ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
1649	.c831	bd 21 e1	lda $e121,x	                lda vcontrolForScreenMODE,x
1650	.c834	20 0f f3	jsr $f30f	                jsr setVCONTROL
1651	.c837	08		php		                php
1652	.c838	78		sei		                sei
1653	.c839	be 93 e1	ldx $e193,y	                ldx crtcRegisterLastIndexForScreenMODEGroup,y
1654	.c83c	a0 0b		ldy #$0b	                ldy #$0B
1655	.c83e					-
1656	.c83e	bd 98 e1	lda $e198,x	                lda crtcRegisterValues,x
1657	.c841	20 01 cf	jsr $cf01	                jsr setCRTCRegister
1658	.c844	ca		dex		                dex
1659	.c845	88		dey		                dey
1660	.c846	10 f6		bpl $c83e	                bpl -
1661	.c848	28		plp		                plp
1662	.c849	20 c5 c5	jsr $c5c5	                jsr vdu20EntryPoint
1663	.c84c	20 6d cf	jsr $cf6d	                jsr vdu23_11_EntryPoint
1664	.c84f	a9 aa		lda #$aa	                lda #%10101010
1665	.c851	8d 67 03	sta $0367	                sta vduv.dotPattern
1666	.c854	8d 68 03	sta $0368	                sta vduv.dotPatternState
1667	.c857	20 aa c6	jsr $c6aa	                jsr vdu26EntryPoint
1668	.c85a	ad 4c 03	lda $034c	                lda vduv.textWindowWidthInBytes+0
1669	.c85d	ae 4d 03	ldx $034d	                ldx vduv.textWindowWidthInBytes+1
1670	.c860	8d 52 03	sta $0352	                sta vduv.bytesPerCharacterRow+0
1671	.c863	8e 53 03	stx $0353	                stx vduv.bytesPerCharacterRow+1

1673						                ; Do a fast hardware CLS of the whole screen
1674						                ; ------------------------------------------
1675	.c866					clsFastPath:
1676	.c866	a2 00		ldx #$00	                ldx #$00
1677	.c868	ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
1678	.c86b	9c 50 03	stz $0350	                stz vduv.screenTopLeftAddress+0
1679	.c86e	8d 51 03	sta $0351	                sta vduv.screenTopLeftAddress+1
1680	.c871	20 dd c6	jsr $c6dd	                jsr setCRTCCursorAddress
1681	.c874	a0 0c		ldy #$0c	                ldy #$0C
1682	.c876	20 11 c7	jsr $c711	                jsr setCRTCAddressRegisters
1683	.c879	9c 69 02	stz $0269	                stz pagedModeCounter
1684	.c87c	38		sec		                sec
1685	.c87d	a9 80		lda #$80	                lda #$80
1686	.c87f	ed 4e 03	sbc $034e	                sbc vduv.startScreenAddressHighByte
1687	.c882	aa		tax		                tax
1688	.c883	a0 00		ldy #$00	                ldy #$00
1689	.c885	20 84 cb	jsr $cb84	                jsr clearTextMemory
1690	.c888	4c 7c c4	jmp $c47c	                jmp vdu30EntryPoint

1692	.c88b					LC88B:
1693	.c88b	20 cf c8	jsr $c8cf	                jsr LC8CF                    ; Clear paged mode counter
1694	.c88e					LC88E:
1695	.c88e	20 ef f2	jsr $f2ef	                jsr osbyte76    ; Call KEYV to test Shift & Ctrl keys
1696	.c891	90 02		bcc $c895	                bcc LC895                    ; Ctrl not pressed, exit loop
1697	.c893	30 f6		bmi $c88b	                bmi LC88B                    ; Shift pressed, loop back
1698	.c895					LC895:
1699	.c895	a5 d0		lda $d0		                lda STATE
1700	.c897	49 04		eor #$04	                eor #STATE.isPagedScrolling
1701	.c899	29 46		and #$46	                and #STATE.isCursorEditing|STATE.isPagedScrolling|STATE.isScrollingDisabled;
1702	.c89b	d0 39		bne $c8d6	                bne LC8D6
1703	.c89d	20 d7 c8	jsr $c8d7	                jsr LC8D7
1704	.c8a0	b9 18 03	lda $0318,y	                lda vduv.textCursorXPosition,y
1705	.c8a3	dd 08 03	cmp $0308,x	                cmp vduv.textWindowLeft,x
1706	.c8a6	d0 2b		bne $c8d3	                bne LC8D3
1710	.c8a8	38		sec		                sec
1711	.c8a9	c8		iny		                iny
1712	.c8aa	88		dey		                dey
1714	.c8ab	d0 08		bne $c8b5	                bne LC8B5
1715	.c8ad	ad 0a 03	lda $030a	                lda vduv.textWindowRight
1716	.c8b0	ed 08 03	sbc $0308	                sbc vduv.textWindowLeft
1717	.c8b3	80 06		bra $c8bb	                bra LC8BB

1719	.c8b5					LC8B5:
1720	.c8b5	ad 09 03	lda $0309	                lda vduv.textWindowBottom
1721	.c8b8	ed 0b 03	sbc $030b	                sbc vduv.textWindowTop
1722	.c8bb					LC8BB:
1723	.c8bb	48		pha		                pha
1724	.c8bc	4a		lsr a		                lsr a
1725	.c8bd	4a		lsr a		                lsr a
1726	.c8be	85 da		sta $da		                sta ZTEMP+0
1727	.c8c0	38		sec		                sec
1728	.c8c1	68		pla		                pla
1729	.c8c2	e5 da		sbc $da		                sbc ZTEMP+0
1730	.c8c4	cd 69 02	cmp $0269	                cmp pagedModeCounter
1731	.c8c7	b0 0a		bcs $c8d3	                bcs LC8D3
1732	.c8c9					LC8C9:
1733	.c8c9	20 ef f2	jsr $f2ef	                jsr osbyte76
1734	.c8cc	38		sec		                sec
1735	.c8cd	10 fa		bpl $c8c9	                bpl LC8C9

1737	.c8cf					LC8CF:
1738	.c8cf	9c 69 02	stz $0269	                stz pagedModeCounter        ; Clear paged mode counter
1740	.c8d2	ea		nop		                nop
1742	.c8d3					LC8D3:
1743	.c8d3	ee 69 02	inc $0269	                inc pagedModeCounter
1744	.c8d6					LC8D6:
1745	.c8d6	60		rts		                rts

1747	.c8d7					LC8D7:
1748	.c8d7	ad 66 03	lda $0366	                lda vduv.cursorFlags
1749	.c8da	29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
1750	.c8dc	4a		lsr a		                lsr a                        ;xvh
1751	.c8dd	aa		tax		                tax
1752	.c8de	bd 14 e2	lda $e214,x	                lda LE204,x
1753	.c8e1	aa		tax		                tax
1754	.c8e2	29 01		and #$01	                and #$01
1755	.c8e4	a8		tay		                tay
1756	.c8e5	60		rts		                rts

1758						;-------------------------------------------------------------------------
1759						;
1760						; Prepare AABB based on the current graphics cursor and some other
1761						; coordinate.
1762						;
1763						; entry:
1764						;
1765						; X = VDU variable offset of other coordinate (4 bytes: X;Y;)
1766						;
1767						; exit:
1768						;
1769						; vduv.workspace._28 = minimum
1770						;
1771						; vduv.workspace._2c = maximum
1772						;
1773	.c8e6					prepareAABB:
1774	.c8e6	a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixels
1775	.c8e8	20 b7 d5	jsr $d5b7	                jsr sortVDUVariableCoordinates
1776	.c8eb	5a		phy		                phy                          ;save greater Y
1777	.c8ec	da		phx		                phx                          ;save lesser Y
1778	.c8ed	20 cc d5	jsr $d5cc	                jsr sortVDUVariableWords     ;X=lesser X, Y=greater X
1779	.c8f0	68		pla		                pla                          ;A=lesser Y
1780	.c8f1	5a		phy		                phy                          ;save greater X
1781	.c8f2	a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
1782	.c8f4	20 f9 c8	jsr $c8f9	                jsr +
1783	.c8f7	fa		plx		                plx                          ;X=greater X
1784	.c8f8	68		pla		                pla                          ;A=greater Y
1785	.c8f9					+
1786						                ; Copy VDU variable word +X to VDU variable word+Y.
1787						                ; Then cropy VDU variable word +A+2 to VDU variable
1788						                ; word+Y+2. Return with updated Y.
1789	.c8f9	48		pha		                pha
1790	.c8fa	20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
1791	.c8fd	fa		plx		                plx
1792	.c8fe	e8		inx		                inx
1793	.c8ff	e8		inx		                inx
1794	.c900	80 0a		bra $c90c	                bra copyTwoBytesWithinVDUVariables

1796						;-------------------------------------------------------------------------
1797						;
1798						; Copy 8 bytes to workspace 28 in the VDU variables.
1799						;
1800						; entry:
1801						;
1802						; X = source offset
1803						;
1804	.c902					copyEightBytesToWorkspace28:
1805	.c902	a0 28		ldy #$28	                ldy #VDUVariables.workspace._28

1807						;-------------------------------------------------------------------------
1808						;
1809						; Copy 8 bytes in the VDU variables.
1810						;
1811						; entry:
1812						;
1813						; X = source offset
1814						;
1815						; Y = dest offset
1816						;
1817	.c904					copyEightBytesWithinVDUVariables:
1818	.c904	a9 08		lda #$08	                lda #$08
1819	.c906	80 18		bra $c920	                bra copyABytesWithinVDUVariables

1821						;-------------------------------------------------------------------------
1822						;
1823						; copyTextWindowWidthInBytesToWorkspace28
1824	.c908					copyTextWindowWidthInBytesToWorkspace28:
1825	.c908	a2 4c		ldx #$4c	                ldx #VDUVariables.textWindowWidthInBytes
1826	.c90a	a0 28		ldy #$28	                ldy #VDUVariables.workspace._28

1828						;-------------------------------------------------------------------------
1829						;
1830						;
1831	.c90c					copyTwoBytesWithinVDUVariables:
1832	.c90c	a9 02		lda #$02	                lda #$02
1833	.c90e	80 10		bra $c920	                bra copyABytesWithinVDUVariables

1835						;-------------------------------------------------------------------------
1836						;
1837						; Copy text window info to workspace2C.
1838						;
1839	.c910					copyTextWindowToWorkspace2C:
1840	.c910	a2 08		ldx #$08	                ldx #VDUVariables.textWindowLeft
1841	.c912	a0 2c		ldy #$2c	                ldy #VDUVariables.workspace._2C
1842	.c914	80 08		bra $c91e	                bra copyFourBytesWithinVDUVariables

1844						;-------------------------------------------------------------------------
1845						;
1846						; Copy last 4 bytes of VDU queue somewhere.
1847						;
1848	.c916					copyLastFourVDUQueueBytes:
1849	.c916	a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
1850	.c918	80 04		bra $c91e	                bra copyFourBytesWithinVDUVariables

1852						;-------------------------------------------------------------------------
1853						;
1854						; Copy old graphics cursor position to current graphics cursor position.
1855						;
1856	.c91a					copyGraphicsCursorPixelsToOldGraphicsCursorPixels:
1857	.c91a	a0 14		ldy #$14	                ldy #VDUVariables.oldGraphicsCursorPixelsX

1859						;-------------------------------------------------------------------------
1860						;
1861						; Copy the graphics cursor position somewhere.
1862						;
1863	.c91c					copyGraphicsCursorPixels:
1864	.c91c	a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX

1866						;-------------------------------------------------------------------------
1867						;
1868						; Copy 4 bytes in the VDU variables.
1869						;
1870						; entry:
1871						;
1872						; X = source offset
1873						;
1874						; Y = dest offset
1875						;
1876	.c91e					copyFourBytesWithinVDUVariables:
1877	.c91e	a9 04		lda #$04	                lda #$04

1879						                ; fall through to copyABytesWithinVDUVariables

1881						;-------------------------------------------------------------------------
1882						;
1883						; Copy some bytes in the VDU variables.
1884						;
1885						; entry:
1886						;
1887						; A = number of bytes
1888						;
1889						; X = source offset
1890						;
1891						; Y = dest offset
1892						;
1893						; exit:
1894						;
1895						; X = updated source offset
1896						;
1897						; Y = updated dest offset
1898						;
1899	.c920					copyABytesWithinVDUVariables:
1900	.c920	48		pha		                pha
1901	.c921	bd 00 03	lda $0300,x	                lda vduv,x
1902	.c924	99 00 03	sta $0300,y	                sta vduv,y
1903	.c927	e8		inx		                inx
1904	.c928	c8		iny		                iny
1905	.c929	68		pla		                pla
1906	.c92a	3a		dec a		                dec a
1907	.c92b	d0 f3		bne $c920	                bne copyABytesWithinVDUVariables
1908	.c92d	60		rts		                rts

1910						;-------------------------------------------------------------------------
1911						;
1912						; Negate a 16-bit value stored in Y/A
1913						;
1914						; entry:
1915						;
1916						; Y (LSB), A (MSB) = value
1917						;
1918						; exit:
1919						;
1920						; Y (LSB), A (MSB) = -value
1921						;
1922	.c92e					negateAY:
1923	.c92e	48		pha		                pha
1924	.c92f	98		tya		                tya
1925	.c930	49 ff		eor #$ff	                eor #$FF
1926	.c932	a8		tay		                tay
1927	.c933	68		pla		                pla
1928	.c934	49 ff		eor #$ff	                eor #$FF
1929	.c936	c8		iny		                iny
1930	.c937	d0 01		bne $c93a	                bne +
1931	.c939	1a		inc a		                inc a
1932	.c93a					+
1933	.c93a	60		rts		                rts

1935						;-------------------------------------------------------------------------
1936						;
1937						; Multiply a text window width by the number of bytes per char. There
1938						; are inclusive and exclusive versions, depending on how the width was
1939						; calculated.
1940						;
1941						; entry:
1942						;
1943						; A = value-1 to multiply (inclusive), value to multiply (exclusive)
1944						;
1945						; exit:
1946						;
1947						; A (lsb), X (msb) = value*vduv.bytesPerCharacter
1948						;
1949	.c93b					getBytesPerInclusiveTextRow:
1950	.c93b	1a		inc a		                inc a
1951	.c93c					getBytesPerExclusiveTextRow:
1952	.c93c	85 da		sta $da		                sta $DA
1953	.c93e	64 db		stz $db		                stz $DB
1954	.c940	ad 4f 03	lda $034f	                lda vduv.bytesPerCharacter    ;A=1/8/16/32
1955	.c943					-
1956	.c943	4a		lsr a		                lsr a
1957	.c944	b0 06		bcs $c94c	                bcs +                     ;taken when multiply is done
1958	.c946	06 da		asl $da		                asl $DA              ;shift size LSB
1959	.c948	26 db		rol $db		                rol $DB              ;carry into size MSB
1960	.c94a	80 f7		bra $c943	                bra -

1962	.c94c					+
1963	.c94c	a5 da		lda $da		                lda $DA
1964	.c94e	a6 db		ldx $db		                ldx $DB
1965	.c950	60		rts		                rts

1967						;-------------------------------------------------------------------------
1968						;
1969						;
1970	.c951					prepareForPlotBackground:
1971	.c951	a2 08		ldx #$08	                ldx #$08                     ;plot background
1972	.c953	8e 59 03	stx $0359	                stx vduv.graphicsPlotState
1973	.c956	ad 5c 03	lda $035c	                lda vduv.backgroundGCOLMode
1974	.c959	29 0f		and #$0f	                and #$0F
1975	.c95b	8d 5a 03	sta $035a	                sta vduv.graphicsPlotMode
1976	.c95e	60		rts		                rts

1978						;-------------------------------------------------------------------------

1980	.c95f					LC95F:
1981	.c95f	a9 00		lda #$00	                lda #$00
1982	.c961	48		pha		                pha
1983	.c962	48		pha		                pha
1984	.c963	ae 2a 03	ldx $032a	                ldx $032A
1985	.c966	20 7d cc	jsr $cc7d	                jsr LCC7D
1986	.c969	80 14		bra $c97f	                bra LC97F

1988	.c96b					LC96B:
1989	.c96b	38		sec		                sec
1990	.c96c	ad 4f 03	lda $034f	                lda $034F
1991	.c96f	ed 2a 03	sbc $032a	                sbc $032A
1992	.c972	48		pha		                pha
1993	.c973	20 b2 e2	jsr $e2b2	                jsr getDefaultBoundsForCurrentScreenMODE
1994	.c976	da		phx		                phx
1995	.c977	a9 00		lda #$00	                lda #$00
1996	.c979	ae 2a 03	ldx $032a	                ldx $032A
1997	.c97c	20 5d cc	jsr $cc5d	                jsr LCC5D
1998	.c97f					LC97F:
1999						                ; scroll left/right
2000	.c97f	8e 50 03	stx $0350	                stx vduv.screenTopLeftAddress+0
2001	.c982	8d 51 03	sta $0351	                sta vduv.screenTopLeftAddress+1
2002	.c985	fa		plx		                plx
2003	.c986	a0 00		ldy #$00	                ldy #$00
2004	.c988	20 b0 cc	jsr $ccb0	                jsr getAddressForTextPosition
2005	.c98b	fa		plx		                plx
2006	.c98c	a9 00		lda #$00	                lda #$00
2007	.c98e	20 5d cc	jsr $cc5d	                jsr LCC5D
2008	.c991	86 d8		stx $d8		                stx ZMEMT+0
2009	.c993	85 d9		sta $d9		                sta ZMEMT+1
2010	.c995	20 b2 e2	jsr $e2b2	                jsr getDefaultBoundsForCurrentScreenMODE
2011	.c998	20 ae ca	jsr $caae	                jsr LCAAE
2012	.c99b	80 1b		bra $c9b8	                bra LC9B8

2014	.c99d					LC99D:
2015	.c99d	a0 00		ldy #$00	                ldy #$00
2016	.c99f	20 77 cc	jsr $cc77	                jsr LCC77
2017	.c9a2	80 06		bra $c9aa	                bra LC9AA

2019	.c9a4					LC9A4:
2020	.c9a4	20 b2 e2	jsr $e2b2	                jsr getDefaultBoundsForCurrentScreenMODE
2021	.c9a7	20 57 cc	jsr $cc57	                jsr LCC57
2022	.c9aa					LC9AA:
2023	.c9aa	8e 50 03	stx $0350	                stx vduv.screenTopLeftAddress+0
2024	.c9ad	8d 51 03	sta $0351	                sta vduv.screenTopLeftAddress+1
2025	.c9b0	a2 00		ldx #$00	                ldx #$00
2026	.c9b2	20 b0 cc	jsr $ccb0	                jsr getAddressForTextPosition
2027	.c9b5	20 e8 ca	jsr $cae8	                jsr LCAE8
2028	.c9b8					LC9B8:
2029	.c9b8	a0 0c		ldy #$0c	                ldy #$0C
2030	.c9ba	ad 51 03	lda $0351	                lda vduv.screenTopLeftAddress+1
2031	.c9bd	ae 50 03	ldx $0350	                ldx vduv.screenTopLeftAddress+0
2032	.c9c0	4c f5 c6	jmp $c6f5	                jmp setCRTCAddress

2034	.c9c3					LC9C3:
2035	.c9c3	20 a0 cc	jsr $cca0	                jsr LCCA0
2036	.c9c6					LC9C6:
2037	.c9c6	85 dd		sta $dd		                sta $DD
2038	.c9c8	86 dc		stx $dc		                stx $DC
2039	.c9ca	20 2c cc	jsr $cc2c	                jsr LCC2C
2040	.c9cd	ad 29 03	lda $0329	                lda $0329
2041	.c9d0	ae 28 03	ldx $0328	                ldx $0328
2042	.c9d3	20 5d cc	jsr $cc5d	                jsr LCC5D
2043	.c9d6	20 88 cc	jsr $cc88	                jsr LCC88
2044	.c9d9	86 d8		stx $d8		                stx ZMEMT+0
2045	.c9db	85 d9		sta $d9		                sta ZMEMT+1
2046	.c9dd	a9 00		lda #$00	                lda #$00
2047	.c9df	ae 2a 03	ldx $032a	                ldx $032A
2048	.c9e2	20 7d cc	jsr $cc7d	                jsr LCC7D
2049	.c9e5	20 88 cc	jsr $cc88	                jsr LCC88
2050	.c9e8	86 da		stx $da		                stx $DA
2051	.c9ea	85 db		sta $db		                sta $DB
2052	.c9ec	ac 28 03	ldy $0328	                ldy $0328
2053	.c9ef	ae 29 03	ldx $0329	                ldx $0329
2054	.c9f2	50 23		bvc $ca17	                bvc LCA17
2055	.c9f4	a4 e0		ldy $e0		                ldy $E0
2056	.c9f6	a6 e1		ldx $e1		                ldx $E1
2057	.c9f8	20 e7 cb	jsr $cbe7	                jsr LCBE7
2058	.c9fb	a4 e0		ldy $e0		                ldy $E0
2059	.c9fd	90 09		bcc $ca08	                bcc LCA08
2060	.c9ff	a2 80		ldx #$80	                ldx #$80
2061	.ca01	86 db		stx $db		                stx $DB
2062	.ca03	64 da		stz $da		                stz $DA
2063	.ca05	ac 2a 03	ldy $032a	                ldy $032A
2064	.ca08					LCA08:
2065	.ca08	a2 00		ldx #$00	                ldx #$00
2066	.ca0a	20 f3 cb	jsr $cbf3	                jsr LCBF3
2067	.ca0d	a2 80		ldx #$80	                ldx #$80
2068	.ca0f	86 d9		stx $d9		                stx ZMEMT+1
2069	.ca11	64 d8		stz $d8		                stz ZMEMT+0
2070	.ca13	a4 de		ldy $de		                ldy $DE
2071	.ca15	a6 df		ldx $df		                ldx $DF
2072	.ca17					LCA17:
2073	.ca17	20 e7 cb	jsr $cbe7	                jsr LCBE7
2074	.ca1a	20 97 cc	jsr $cc97	                jsr LCC97
2075	.ca1d	20 94 cc	jsr $cc94	                jsr LCC94
2076	.ca20	20 57 cc	jsr $cc57	                jsr LCC57
2077	.ca23	86 d8		stx $d8		                stx ZMEMT+0
2078	.ca25	85 d9		sta $d9		                sta ZMEMT+1
2079	.ca27	ce 2b 03	dec $032b	                dec $032B
2080	.ca2a	10 9a		bpl $c9c6	                bpl LC9C6
2081	.ca2c	60		rts		                rts

2083	.ca2d					LCA2D:
2084	.ca2d	20 a0 cc	jsr $cca0	                jsr LCCA0
2085	.ca30					LCA30:
2086	.ca30	20 2c cc	jsr $cc2c	                jsr LCC2C
2087	.ca33	a9 00		lda #$00	                lda #$00
2088	.ca35	ae 2a 03	ldx $032a	                ldx $032A
2089	.ca38	20 5d cc	jsr $cc5d	                jsr LCC5D
2090	.ca3b	86 da		stx $da		                stx $DA
2091	.ca3d	85 db		sta $db		                sta $DB
2092	.ca3f	20 57 cc	jsr $cc57	                jsr LCC57
2093	.ca42	86 dc		stx $dc		                stx $DC
2094	.ca44	85 dd		sta $dd		                sta $DD
2095	.ca46	ac 28 03	ldy $0328	                ldy $0328
2096	.ca49	ae 29 03	ldx $0329	                ldx $0329
2097	.ca4c	50 25		bvc $ca73	                bvc LCA73
2098	.ca4e	a4 de		ldy $de		                ldy $DE
2099	.ca50	a6 df		ldx $df		                ldx $DF
2100	.ca52	20 a8 cb	jsr $cba8	                jsr LCBA8
2101	.ca55	a4 de		ldy $de		                ldy $DE
2102	.ca57	90 0a		bcc $ca63	                bcc LCA63
2103	.ca59	ae 4e 03	ldx $034e	                ldx $034E
2104	.ca5c	86 db		stx $db		                stx $DB
2105	.ca5e	64 da		stz $da		                stz $DA
2106	.ca60	ac 2a 03	ldy $032a	                ldy $032A
2107	.ca63					LCA63:
2108	.ca63	a2 00		ldx #$00	                ldx #$00
2109	.ca65	20 b4 cb	jsr $cbb4	                jsr LCBB4
2110	.ca68	ae 4e 03	ldx $034e	                ldx $034E
2111	.ca6b	86 d9		stx $d9		                stx ZMEMT+1
2112	.ca6d	64 d8		stz $d8		                stz ZMEMT+0
2113	.ca6f	a4 e0		ldy $e0		                ldy $E0
2114	.ca71	a6 e1		ldx $e1		                ldx $E1
2115	.ca73					LCA73:
2116	.ca73	20 a8 cb	jsr $cba8	                jsr LCBA8
2117	.ca76	20 94 cc	jsr $cc94	                jsr LCC94
2118	.ca79	ce 2b 03	dec $032b	                dec $032B
2119	.ca7c	10 b2		bpl $ca30	                bpl LCA30
2120	.ca7e					LCA7E:
2121	.ca7e	60		rts		                rts

2123	.ca7f					LCA7F:
2124	.ca7f	86 dc		stx $dc		                stx $DC
2125	.ca81	aa		tax		                tax
2126	.ca82	38		sec		                sec
2127	.ca83	e5 dc		sbc $dc		                sbc $DC
2128	.ca85	f0 f7		beq $ca7e	                beq LCA7E
2129	.ca87	85 dd		sta $dd		                sta $DD
2130	.ca89	da		phx		                phx
2131	.ca8a	20 3c c9	jsr $c93c	                jsr getBytesPerExclusiveTextRow
2132	.ca8d	fa		plx		                plx
2133	.ca8e	ad 66 03	lda $0366	                lda $0366
2134	.ca91	89 08		bit #$08	                bit #$08
2135	.ca93	d0 0b		bne $caa0	                bne LCAA0
2136	.ca95	89 02		bit #$02	                bit #$02
2137	.ca97	20 ca cc	jsr $ccca	                jsr LCCCA
2138	.ca9a	a4 da		ldy $da		                ldy $DA
2139	.ca9c	a6 db		ldx $db		                ldx $DB
2140	.ca9e	80 2e		bra $cace	                bra LCACE

2142	.caa0					LCAA0:
2143	.caa0	89 04		bit #$04	                bit #$04
2144	.caa2	20 ca cc	jsr $ccca	                jsr LCCCA
2145	.caa5	ad 4f 03	lda $034f	                lda $034F
2146	.caa8	8d 2a 03	sta $032a	                sta $032A
2147	.caab	a4 dd		ldy $dd		                ldy $DD
2148	.caad	88		dey		                dey
2149	.caae					LCAAE:
2150	.caae	98		tya		                tya
2151	.caaf	f0 18		beq $cac9	                beq LCAC9
2152	.cab1	84 dc		sty $dc		                sty $DC
2153	.cab3					LCAB3:
2154	.cab3	20 57 cc	jsr $cc57	                jsr LCC57
2155	.cab6	86 da		stx $da		                stx $DA
2156	.cab8	85 db		sta $db		                sta $DB
2157	.caba	20 c9 ca	jsr $cac9	                jsr LCAC9
2158	.cabd	a6 da		ldx $da		                ldx $DA
2159	.cabf	86 d8		stx $d8		                stx ZMEMT+0
2160	.cac1	a5 db		lda $db		                lda $DB
2161	.cac3	85 d9		sta $d9		                sta ZMEMT+1
2162	.cac5	c6 dc		dec $dc		                dec $DC
2163	.cac7	d0 ea		bne $cab3	                bne LCAB3
2164	.cac9					LCAC9:
2165	.cac9	a2 00		ldx #$00	                ldx #$00
2166	.cacb	ac 2a 03	ldy $032a	                ldy $032A
2167	.cace					LCACE:
2168	.cace	ad 28 03	lda $0328	                lda $0328
2169	.cad1	48		pha		                pha
2170	.cad2	ad 29 03	lda $0329	                lda $0329
2171	.cad5	48		pha		                pha
2172	.cad6	8c 28 03	sty $0328	                sty $0328
2173	.cad9	8e 29 03	stx $0329	                stx $0329
2174	.cadc	20 e8 ca	jsr $cae8	                jsr LCAE8
2175	.cadf	68		pla		                pla
2176	.cae0	8d 29 03	sta $0329	                sta $0329
2177	.cae3	68		pla		                pla
2178	.cae4	8d 28 03	sta $0328	                sta $0328
2179	.cae7	60		rts		                rts

2181						;-------------------------------------------------------------------------

2183	.cae8					LCAE8:
2184	.cae8	a6 d8		ldx $d8		                ldx ZMEMT+0
2185	.caea	a5 d9		lda $d9		                lda ZMEMT+1
2186	.caec	20 2c cc	jsr $cc2c	                jsr LCC2C
2187	.caef	80 79		bra $cb6a	                bra LCB6A

2189						;-------------------------------------------------------------------------

2191	.caf1					LCAF1:
2192	.caf1	a2 77		ldx #$77	                ldx #<LCC77
2193	.caf3	a9 cc		lda #$cc	                lda #>LCC77
2194	.caf5	ac 2d 03	ldy $032d	                ldy $032D
2195	.caf8	80 07		bra $cb01	                bra LCB01

2197	.cafa					LCAFA:
2198	.cafa	a2 57		ldx #$57	                ldx #<LCC57
2199	.cafc	a9 cc		lda #$cc	                lda #>LCC57
2200	.cafe	ac 2f 03	ldy $032f	                ldy $032F
2201	.cb01					LCB01:
2202	.cb01	8e 5d 03	stx $035d	                stx $035D
2203	.cb04	8d 5e 03	sta $035e	                sta $035E
2204	.cb07	38		sec		                sec
2205	.cb08	ad 2d 03	lda $032d	                lda $032D
2206	.cb0b	ed 2f 03	sbc $032f	                sbc $032F
2207	.cb0e	8d 2b 03	sta $032b	                sta $032B
2208	.cb11	ae 2c 03	ldx $032c	                ldx $032C
2209	.cb14	20 b0 cc	jsr $ccb0	                jsr getAddressForTextPosition
2210	.cb17	85 dd		sta $dd		                sta $DD
2211	.cb19	86 dc		stx $dc		                stx $DC
2212	.cb1b	20 2c cc	jsr $cc2c	                jsr LCC2C
2213	.cb1e	ad 2b 03	lda $032b	                lda $032B
2214	.cb21	f0 47		beq $cb6a	                beq LCB6A
2215	.cb23					LCB23:
2216	.cb23	08		php		                php
2217	.cb24	20 24 c0	jsr $c024	                jsr LC024
2218	.cb27	86 da		stx $da		                stx $DA
2219	.cb29	85 db		sta $db		                sta $DB
2220	.cb2b	86 dc		stx $dc		                stx $DC
2221	.cb2d	85 dd		sta $dd		                sta $DD
2222	.cb2f	28		plp		                plp
2223	.cb30	50 1d		bvc $cb4f	                bvc LCB4F
2224	.cb32	b8		clv		                clv
2225	.cb33					LCB33:
2226	.cb33	a6 df		ldx $df		                ldx $DF
2227	.cb35	a4 de		ldy $de		                ldy $DE
2228	.cb37	20 b4 cb	jsr $cbb4	                jsr LCBB4
2229	.cb3a	ad 4e 03	lda $034e	                lda $034E
2230	.cb3d	70 06		bvs $cb45	                bvs LCB45
2231	.cb3f	85 d9		sta $d9		                sta ZMEMT+1
2232	.cb41	64 d8		stz $d8		                stz ZMEMT+0
2233	.cb43	80 04		bra $cb49	                bra LCB49

2235	.cb45					LCB45:
2236	.cb45	85 db		sta $db		                sta $DB
2237	.cb47	64 da		stz $da		                stz $DA
2238	.cb49					LCB49:
2239	.cb49	a6 e1		ldx $e1		                ldx $E1
2240	.cb4b	a4 e0		ldy $e0		                ldy $E0
2241	.cb4d	80 0b		bra $cb5a	                bra LCB5A

2243	.cb4f					LCB4F:
2244	.cb4f	20 2c cc	jsr $cc2c	                jsr LCC2C
2245	.cb52	70 df		bvs $cb33	                bvs LCB33
2246	.cb54	ae 29 03	ldx $0329	                ldx $0329
2247	.cb57	ac 28 03	ldy $0328	                ldy $0328
2248	.cb5a					LCB5A:
2249	.cb5a	20 b4 cb	jsr $cbb4	                jsr LCBB4
2250	.cb5d	a6 dc		ldx $dc		                ldx $DC
2251	.cb5f	86 d8		stx $d8		                stx ZMEMT+0
2252	.cb61	a5 dd		lda $dd		                lda $DD
2253	.cb63	85 d9		sta $d9		                sta ZMEMT+1
2254	.cb65	ce 2b 03	dec $032b	                dec $032B
2255	.cb68	d0 b9		bne $cb23	                bne LCB23
2256	.cb6a					LCB6A:
2257	.cb6a	ae 29 03	ldx $0329	                ldx $0329
2258	.cb6d	ac 28 03	ldy $0328	                ldy $0328
2259	.cb70	50 12		bvc $cb84	                bvc clearTextMemory
2260	.cb72	a6 df		ldx $df		                ldx $DF
2261	.cb74	a4 de		ldy $de		                ldy $DE
2262	.cb76	20 84 cb	jsr $cb84	                jsr clearTextMemory
2263	.cb79	ad 4e 03	lda $034e	                lda $034E
2264	.cb7c	85 d9		sta $d9		                sta ZMEMT+1
2265	.cb7e	64 d8		stz $d8		                stz ZMEMT+0
2266	.cb80	a6 e1		ldx $e1		                ldx $E1
2267	.cb82	a4 e0		ldy $e0		                ldy $E0

2269						;-------------------------------------------------------------------------
2270						;
2271						; Clear a block of text screen memory.
2272						;
2273						; entry:
2274						;
2275						; (ZMEMT),y - first byte to clear
2276						;
2277						; X = number of pages (including first, possibly partial page) to clear
2278						;
2279	.cb84					clearTextMemory:
2280						                ; align memory so that Y=0 on each page boundary
2281						                ; crossing.
2282						                ;
2283						                ; e.g., on entry ZMEMT=$30f8, Y=$08 - then after,
2284						                ; ZMEMT=$3000, Y=$F7; or, ZMEMT=$30f0, Y=$08 -> ZMEMT=$2ff8, Y=$F7.
2285	.cb84	98		tya		                tya                          ;A=initial offset
2286	.cb85	18		clc		                clc
2287	.cb86	65 d8		adc $d8		                adc ZMEMT+0                  ;add to dest address
2288	.cb88	85 d8		sta $d8		                sta ZMEMT+0
2289	.cb8a	b0 02		bcs $cb8e	                bcs +
2290	.cb8c	c6 d9		dec $d9		                dec ZMEMT+1
2291	.cb8e					+
2292	.cb8e	98		tya		                tya
2293	.cb8f	49 ff		eor #$ff	                eor #$FF
2294	.cb91	a8		tay		                tay
2295	.cb92	4a		lsr a		                lsr a                        ;C set if odd
2296	.cb93	ad 58 03	lda $0358	                lda vduv.backgroundTextColour
2297	.cb96	b0 07		bcs $cb9f	                bcs nextByte                    ;taken if odd - slightly different loop
2298	.cb98	80 02		bra $cb9c	                bra clearTextMemoryByte

2300	.cb9a					clearTextMemoryLoop:
2301	.cb9a	91 d8		sta ($d8),y	                sta (ZMEMT),y
2302	.cb9c					clearTextMemoryByte:
2303	.cb9c	c8		iny		                iny
2304	.cb9d	91 d8		sta ($d8),y	                sta (ZMEMT),y
2305	.cb9f					nextByte:
2306	.cb9f	c8		iny		                iny
2307	.cba0	d0 f8		bne $cb9a	                bne clearTextMemoryLoop
2308	.cba2	e6 d9		inc $d9		                inc ZMEMT+1
2309	.cba4	ca		dex		                dex
2310	.cba5	10 f3		bpl $cb9a	                bpl clearTextMemoryLoop
2311	.cba7	60		rts		                rts

2313						;-------------------------------------------------------------------------

2315	.cba8					LCBA8:
2316	.cba8	38		sec		                sec
2317	.cba9	98		tya		                tya
2318	.cbaa	ed 2a 03	sbc $032a	                sbc $032A
2319	.cbad	a8		tay		                tay
2320	.cbae	b0 04		bcs $cbb4	                bcs LCBB4
2321	.cbb0	ca		dex		                dex
2322	.cbb1	30 33		bmi $cbe6	                bmi LCBE6
2323	.cbb3	38		sec		                sec
2324	.cbb4					LCBB4:
2325	.cbb4	08		php		                php
2326	.cbb5	98		tya		                tya
2327	.cbb6	18		clc		                clc
2328	.cbb7	65 da		adc $da		                adc ZTEMP+0
2329	.cbb9	85 da		sta $da		                sta ZTEMP+0
2330	.cbbb	b0 02		bcs $cbbf	                bcs LCBBF
2331	.cbbd	c6 db		dec $db		                dec ZTEMP+1
2332	.cbbf					LCBBF:
2333	.cbbf	98		tya		                tya
2334	.cbc0	18		clc		                clc
2335	.cbc1	65 d8		adc $d8		                adc ZMEMT+0
2336	.cbc3	85 d8		sta $d8		                sta ZMEMT+0
2337	.cbc5	b0 02		bcs $cbc9	                bcs LCBC9
2338	.cbc7	c6 d9		dec $d9		                dec ZMEMT+1
2339	.cbc9					LCBC9:
2340	.cbc9	98		tya		                tya
2341	.cbca	49 ff		eor #$ff	                eor #$FF
2342	.cbcc	a8		tay		                tay
2343	.cbcd	4a		lsr a		                lsr a
2344	.cbce	b0 0b		bcs $cbdb	                bcs LCBDB
2345	.cbd0	80 04		bra $cbd6	                bra LCBD6

2347	.cbd2					LCBD2:
2348	.cbd2	b1 da		lda ($da),y	                lda ($DA),y
2349	.cbd4	91 d8		sta ($d8),y	                sta (ZMEMT),y
2350	.cbd6					LCBD6:
2351	.cbd6	c8		iny		                iny
2352	.cbd7	b1 da		lda ($da),y	                lda ($DA),y
2353	.cbd9	91 d8		sta ($d8),y	                sta (ZMEMT),y
2354	.cbdb					LCBDB:
2355	.cbdb	c8		iny		                iny
2356	.cbdc	d0 f4		bne $cbd2	                bne LCBD2
2357	.cbde	e6 db		inc $db		                inc $DB
2358	.cbe0	e6 d9		inc $d9		                inc ZMEMT+1
2359	.cbe2	ca		dex		                dex
2360	.cbe3	10 ed		bpl $cbd2	                bpl LCBD2
2361	.cbe5					LCBE5:
2362	.cbe5	28		plp		                plp
2363	.cbe6					LCBE6:
2364	.cbe6	60		rts		                rts

2366	.cbe7					LCBE7:
2367	.cbe7	38		sec		                sec
2368	.cbe8	98		tya		                tya
2369	.cbe9	ed 2a 03	sbc $032a	                sbc $032A
2370	.cbec	a8		tay		                tay
2371	.cbed	b0 04		bcs $cbf3	                bcs LCBF3
2372	.cbef	ca		dex		                dex
2373	.cbf0	30 f4		bmi $cbe6	                bmi LCBE6
2374	.cbf2	38		sec		                sec
2375	.cbf3					LCBF3:
2376	.cbf3	08		php		                php
2377	.cbf4	98		tya		                tya
2378	.cbf5	49 ff		eor #$ff	                eor #$FF
2379	.cbf7	48		pha		                pha
2380	.cbf8	38		sec		                sec
2381	.cbf9	65 da		adc $da		                adc $DA
2382	.cbfb	85 da		sta $da		                sta $DA
2383	.cbfd	b0 02		bcs $cc01	                bcs LCC01
2384	.cbff	c6 db		dec $db		                dec $DB
2385	.cc01					LCC01:
2386	.cc01	68		pla		                pla
2387	.cc02	38		sec		                sec
2388	.cc03	65 d8		adc $d8		                adc ZMEMT+0
2389	.cc05	85 d8		sta $d8		                sta ZMEMT+0
2390	.cc07	b0 02		bcs $cc0b	                bcs LCC0B
2391	.cc09	c6 d9		dec $d9		                dec ZMEMT+1
2392	.cc0b					LCC0B:
2393	.cc0b	98		tya		                tya
2394	.cc0c	4a		lsr a		                lsr a
2395	.cc0d	b0 14		bcs $cc23	                bcs LCC23
2396	.cc0f	d0 0d		bne $cc1e	                bne LCC1E
2397	.cc11					LCC11:
2398	.cc11	ca		dex		                dex
2399	.cc12	30 d1		bmi $cbe5	                bmi LCBE5
2400	.cc14	c6 db		dec $db		                dec $DB
2401	.cc16	c6 d9		dec $d9		                dec ZMEMT+1
2402	.cc18	80 04		bra $cc1e	                bra LCC1E

2404	.cc1a					LCC1A:
2405	.cc1a	b1 da		lda ($da),y	                lda ($DA),y
2406	.cc1c	91 d8		sta ($d8),y	                sta (ZMEMT),y
2407	.cc1e					LCC1E:
2408	.cc1e	88		dey		                dey
2409	.cc1f	b1 da		lda ($da),y	                lda ($DA),y
2410	.cc21	91 d8		sta ($d8),y	                sta (ZMEMT),y
2411	.cc23					LCC23:
2412	.cc23	88		dey		                dey
2413	.cc24	d0 f4		bne $cc1a	                bne LCC1A
2414	.cc26	b2 da		lda ($da)	                lda ($DA)
2415	.cc28	92 d8		sta ($d8)	                sta (ZMEMT)
2416	.cc2a	80 e5		bra $cc11	                bra LCC11

2418						;-------------------------------------------------------------------------
2419						;
2420						; Get pointers for a text window row.
2421						;
2422						; entry:
2423						;
2424						; vduv.workspace._28; = text window stride, in bytes
2425						;
2426						; >A, <X = address
2427						;
2428						; exit:
2429						;
2430						; V=0: >A, <X = new address
2431						;
2432						; V=1: (ZTEMPC) =

2434	.cc2c					LCC2C:
2435	.cc2c	48		pha		                pha                          ;save >address
2436	.cc2d	8a		txa		                txa                          ;A=<address
2437	.cc2e	18		clc		                clc
2438	.cc2f	6d 28 03	adc $0328	                adc vduv.workspace._28       ;A=<(new address)
2439	.cc32	aa		tax		                tax                          ;X=<(new address)
2440	.cc33	68		pla		                pla                          ;restore >addcess
2441	.cc34	6d 29 03	adc $0329	                adc vduv.workspace._29       ;A=>(new address)
2442	.cc37	50 1d		bvc $cc56	                bvc rtsCC56                  ;taken if no address wrap
2443	.cc39	86 e0		stx $e0		                stx ZTEMPD+0
2444	.cc3b	29 7f		and #$7f	                and #$7F                     ;
2445	.cc3d	85 e1		sta $e1		                sta ZTEMPD+1
2446	.cc3f	05 e0		ora $e0		                ora ZTEMPD+0
2447	.cc41	f0 12		beq $cc55	                beq clv_rts
2448	.cc43	08		php		                php
2449	.cc44	38		sec		                sec
2450	.cc45	ad 28 03	lda $0328	                lda vduv.workspace._28
2451	.cc48	e5 e0		sbc $e0		                sbc ZTEMPD+0
2452	.cc4a	85 de		sta $de		                sta ZTEMPC+0
2453	.cc4c	ad 29 03	lda $0329	                lda vduv.workspace._29
2454	.cc4f	e5 e1		sbc $e1		                sbc ZTEMPD+1
2455	.cc51	85 df		sta $df		                sta ZTEMPC+1
2456	.cc53	28		plp		                plp
2457	.cc54	60		rts		                rts

2459						;-------------------------------------------------------------------------

2461	.cc55					clv_rts:
2462	.cc55	b8		clv		                clv
2463	.cc56					rtsCC56:
2464	.cc56	60		rts		                rts

2466	.cc57					LCC57:
2467	.cc57	ad 53 03	lda $0353	                lda vduv.bytesPerCharacterRow+1
2468	.cc5a	ae 52 03	ldx $0352	                ldx vduv.bytesPerCharacterRow+0
2469	.cc5d					LCC5D:
2470	.cc5d	18		clc		                clc
2471	.cc5e					LCC5E:
2472	.cc5e	08		php		                php
2473	.cc5f	48		pha		                pha
2474	.cc60	8a		txa		                txa
2475	.cc61	65 d8		adc $d8		                adc ZMEMT+0
2476	.cc63	aa		tax		                tax
2477	.cc64	68		pla		                pla
2478	.cc65	65 d9		adc $d9		                adc ZMEMT+1
2479	.cc67	10 04		bpl $cc6d	                bpl +
2480	.cc69	38		sec		                sec
2481	.cc6a	ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte ;handle wraparound at end
2482	.cc6d					+
2483	.cc6d	cd 4e 03	cmp $034e	                cmp vduv.startScreenAddressHighByte
2484	.cc70	b0 03		bcs $cc75	                bcs +
2485	.cc72	6d 54 03	adc $0354	                adc vduv.screenSizeHighByte ;handle wraparound at start
2486	.cc75					+
2487	.cc75	28		plp		                plp
2488	.cc76	60		rts		                rts

2490	.cc77					LCC77:
2491	.cc77	ad 53 03	lda $0353	                lda $0353
2492	.cc7a	ae 52 03	ldx $0352	                ldx $0352
2493	.cc7d					LCC7D:
2494	.cc7d	48		pha		                pha
2495	.cc7e	8a		txa		                txa
2496	.cc7f	49 ff		eor #$ff	                eor #$FF
2497	.cc81	aa		tax		                tax
2498	.cc82	68		pla		                pla
2499	.cc83	49 ff		eor #$ff	                eor #$FF
2500	.cc85	38		sec		                sec
2501	.cc86	80 d6		bra $cc5e	                bra LCC5E

2503	.cc88					LCC88:
2504	.cc88	cd 4e 03	cmp $034e	                cmp $034E
2505	.cc8b	d0 06		bne $cc93	                bne LCC93
2506	.cc8d	e0 00		cpx #$00	                cpx #$00
2507	.cc8f	d0 02		bne $cc93	                bne LCC93
2508	.cc91	a9 80		lda #$80	                lda #$80
2509	.cc93					LCC93:
2510	.cc93	60		rts		                rts

2512	.cc94					LCC94:
2513	.cc94	20 c9 ca	jsr $cac9	                jsr LCAC9
2514	.cc97					LCC97:
2515	.cc97	a6 dc		ldx $dc		                ldx $DC
2516	.cc99	86 d8		stx $d8		                stx ZMEMT+0
2517	.cc9b	a5 dd		lda $dd		                lda $DD
2518	.cc9d	85 d9		sta $d9		                sta ZMEMT+1
2519	.cc9f	60		rts		                rts

2521	.cca0					LCCA0:
2522	.cca0	38		sec		                sec
2523	.cca1	ad 2d 03	lda $032d	                lda $032D
2524	.cca4	ed 2f 03	sbc $032f	                sbc $032F
2525	.cca7	8d 2b 03	sta $032b	                sta $032B
2526	.ccaa	ae 2c 03	ldx $032c	                ldx $032C
2527	.ccad	ac 2f 03	ldy $032f	                ldy $032F

2529						;-------------------------------------------------------------------------
2530						;
2531						; Get display address for a text position.
2532						;
2533	.ccb0					getAddressForTextPosition:
2534	.ccb0	ad 18 03	lda $0318	                lda vduv.textCursorXPosition
2535	.ccb3	48		pha		                pha
2536	.ccb4	ad 19 03	lda $0319	                lda vduv.textCursorYPosition
2537	.ccb7	48		pha		                pha
2538	.ccb8	8e 18 03	stx $0318	                stx vduv.textCursorXPosition
2539	.ccbb	8c 19 03	sty $0319	                sty vduv.textCursorYPosition
2540	.ccbe	20 fa cc	jsr $ccfa	                jsr updateZMEMTWithTextCursorPosition
2541	.ccc1	7a		ply		                ply
2542	.ccc2	8c 19 03	sty $0319	                sty vduv.textCursorYPosition
2543	.ccc5	7a		ply		                ply
2544	.ccc6	8c 18 03	sty $0318	                sty vduv.textCursorXPosition
2545	.ccc9	60		rts		                rts

2547						;-------------------------------------------------------------------------

2549	.ccca					LCCCA:
2550	.ccca	f0 03		beq $cccf	                beq LCCCF
2551	.cccc	ca		dex		                dex
2552	.cccd	86 dc		stx $dc		                stx ZTEMPB+0
2553	.cccf					LCCCF:
2554	.cccf	ad 66 03	lda $0366	                lda vduv.cursorFlags
2555	.ccd2	29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
2556	.ccd4	aa		tax		                tax
2557	.ccd5	a5 dc		lda $dc		                lda ZTEMPB+0
2558	.ccd7					LCCD7:
2559	.ccd7	20 c7 c2	jsr $c2c7	                jsr setTextCursorXPositionWithCursorFlags
2560	.ccda					LCCDA:
2561	.ccda	ae 18 03	ldx $0318	                ldx vduv.textCursorXPosition
2562	.ccdd	ec 08 03	cpx $0308	                cpx vduv.textWindowLeft
2563	.cce0	30 16		bmi $ccf8	                bmi LCCF8            ;taken if off left edge of window
2564	.cce2	ec 0a 03	cpx $030a	                cpx vduv.textWindowRight
2565	.cce5	f0 02		beq $cce9	                beq LCCE9            ;taken if at right edge of window
2566	.cce7	10 0f		bpl $ccf8	                bpl LCCF8            ;taken if off right edge of window
2567	.cce9					LCCE9:
2568	.cce9	ae 19 03	ldx $0319	                ldx vduv.textCursorYPosition
2569	.ccec	ec 0b 03	cpx $030b	                cpx vduv.textWindowTop
2570	.ccef	30 07		bmi $ccf8	                bmi LCCF8
2571	.ccf1	ec 09 03	cpx $0309	                cpx vduv.textWindowBottom
2572	.ccf4	30 04		bmi $ccfa	                bmi updateZMEMTWithTextCursorPosition
2573	.ccf6	f0 02		beq $ccfa	                beq updateZMEMTWithTextCursorPosition
2574	.ccf8					LCCF8:
2575	.ccf8	38		sec		                sec
2576	.ccf9	60		rts		                rts

2578						;-------------------------------------------------------------------------
2579						;
2580						; Get display address for current text cursor position.
2581						;
2582						; Set up display address without using BBC lookup table at &E0/1
2583						;
2584	.ccfa					updateZMEMTWithTextCursorPosition:
2585	.ccfa	ad 56 03	lda $0356	                lda vduv.currentScreenMODEGroup
2586	.ccfd	29 fe		and #$fe	                and #$fe                     ; Reduce to 0,0,2,2,4
2587	.ccff	aa		tax		                tax                          ; Index into jump table
2588	.cd00	ac 19 03	ldy $0319	                ldy vduv.textCursorYPosition  ; Get current line
2589	.cd03	7c 06 cd	jmp ($cd06,x)	                jmp (multiplyRoutinesTable,x) ; Jump to calculation setup

2591	.cd06					multiplyRoutinesTable:
2592	>cd06	21 cd				                .word multiplyBy640     ; Memory map 0,1  MODE 0,1,2,3
2593	>cd08	15 cd				                .word multiplyBy320       ; Memory map 2,3  MODE 4,5,6
2594	>cd0a	0c cd				                .word multiplyBy40        ; Memory map 4    MODE 7

2596	.cd0c					multiplyBy40:
2597	.cd0c	be bf e0	ldx $e0bf,y	                ldx multiplyBy40TableHigh,y ; Get offset high byte for start of this line
2598	.cd0f	b9 d8 e0	lda $e0d8,y	                lda multiplyBy40TableLow,y ; Get offset low byte for start of this line
2599	.cd12	18		clc		                clc
2600	.cd13	80 14		bra $cd29	                bra LCD29

2602	.cd15					multiplyBy320:
2603	.cd15	b9 f1 e0	lda $e0f1,y	                lda multiplyBy640TableHigh,y
2604	.cd18	4a		lsr a		                lsr a
2605	.cd19	aa		tax		                tax
2606	.cd1a	98		tya		                tya
2607	.cd1b	29 03		and #$03	                and #$03
2608	.cd1d	4a		lsr a		                lsr a
2609	.cd1e	6a		ror a		                ror a
2610	.cd1f	80 07		bra $cd28	                bra LCD28

2612	.cd21					multiplyBy640:
2613	.cd21	be f1 e0	ldx $e0f1,y	                ldx multiplyBy640TableHigh,y
2614	.cd24	98		tya		                tya
2615	.cd25	29 01		and #$01	                and #$01
2616	.cd27	4a		lsr a		                lsr a
2617	.cd28					LCD28:
2618	.cd28	6a		ror a		                ror a                        ; A=A/2 +(128*carry)

2620	.cd29					LCD29:
2621	.cd29	6d 50 03	adc $0350	                adc vduv.screenTopLeftAddress+0
2622	.cd2c	85 d8		sta $d8		                sta ZMEMT+0                      ; store it
2623	.cd2e	8a		txa		                txa
2624	.cd2f	6d 51 03	adc $0351	                adc vduv.screenTopLeftAddress+1 ; window start address hi
2625	.cd32	a8		tay		                tay
2626	.cd33	ad 18 03	lda $0318	                lda vduv.textCursorXPosition  ; text column
2627	.cd36	ae 4f 03	ldx $034f	                ldx vduv.bytesPerCharacter    ; bytes per character
2628	.cd39	ca		dex		                dex
2629	.cd3a	f0 12		beq $cd4e	                beq LCD4E                    ; 1 colour, MODE 7
2630	.cd3c	e0 0f		cpx #$0f	                cpx #$0F
2631	.cd3e	f0 03		beq $cd43	                beq LCD43                    ; 4 colours, MODE 1 or MODE 5
2632	.cd40	90 02		bcc $cd44	                bcc LCD44                    ; 2 colours, MODE 0,3,4,6
2633	.cd42	0a		asl a		                asl a                        ; 16 colours, MODE 2
2634	.cd43					LCD43:
2635	.cd43	0a		asl a		                asl a
2636	.cd44					LCD44:
2637	.cd44	0a		asl a		                asl a
2638	.cd45	0a		asl a		                asl a
2639	.cd46	90 02		bcc $cd4a	                bcc LCD4A
2640	.cd48	c8		iny		                iny
2641	.cd49	c8		iny		                iny
2642	.cd4a					LCD4A:
2643	.cd4a	0a		asl a		                asl a
2644	.cd4b	90 02		bcc $cd4f	                bcc LCD4F
2645	.cd4d	c8		iny		                iny
2646	.cd4e					LCD4E:
2647	.cd4e	18		clc		                clc
2648	.cd4f					LCD4F:
2649	.cd4f	65 d8		adc $d8		                adc ZMEMT+0
2650	.cd51	85 d8		sta $d8		                sta ZMEMT+0
2651	.cd53	8d 4a 03	sta $034a	                sta vduv.textCursorCRTCAddress+0
2652	.cd56	aa		tax		                tax
2653	.cd57	98		tya		                tya
2654	.cd58	69 00		adc #$00	                adc #$00
2655	.cd5a	8d 4b 03	sta $034b	                sta vduv.textCursorCRTCAddress+1
2656	.cd5d	10 04		bpl $cd63	                bpl LCD63
2657	.cd5f	38		sec		                sec
2658	.cd60	ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte
2659	.cd63					LCD63:
2660	.cd63	85 d9		sta $d9		                sta ZMEMT+1
2661	.cd65	18		clc		                clc
2662	.cd66	60		rts		                rts

2664						;-------------------------------------------------------------------------

2666	.cd67					nextMaskedCharColumn
2667	.cd67	ee 24 03	inc $0324	                inc vduv.graphicsCursorPixelsX+0
2668	.cd6a	d0 03		bne $cd6f	                bne +
2669	.cd6c	ee 25 03	inc $0325	                inc vduv.graphicsCursorPixelsX+1
2670	.cd6f					+
2671	.cd6f	0a		asl a		                asl a
2672	.cd70					plotMaskedCharRow:
2673						                ; find next pixel to plot, updating graphics cursor X
2674						                ; as it goes. A is non-zero, so this loop will finish
2675						                ; eventually.
2676	.cd70	10 f5		bpl $cd67	                bpl nextMaskedCharColumn
2677	.cd72	5a		phy		                phy
2678	.cd73	85 dd		sta $dd		                sta ZTEMPB+1                 ;
2679	.cd75	a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixels
2680	.cd77	20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
2681	.cd7a	80 02		bra $cd7e	                bra plotMaskedCharPixel

2683	.cd7c					plotMaskedCharPixelsLoop:
2684	.cd7c	10 03		bpl $cd81	                bpl nextMaskedCharPixel
2685	.cd7e					plotMaskedCharPixel:
2686	.cd7e	20 51 db	jsr $db51	                jsr plbyteEntryPoint
2687	.cd81					nextMaskedCharPixel
2688	.cd81	46 d1		lsr $d1		                lsr ZMASK
2689	.cd83	90 03		bcc $cd88	                bcc +
2690	.cd85	20 67 da	jsr $da67	                jsr nextColumnAndResetMask
2691	.cd88					+
2692	.cd88	06 dd		asl $dd		                asl ZTEMPB+1
2693	.cd8a	d0 f0		bne $cd7c	                bne plotMaskedCharPixelsLoop
2694	.cd8c	a2 28		ldx #$28	                ldx #VDUVariables.workspace._28
2695	.cd8e	a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixelsX
2696	.cd90	20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
2697	.cd93	7a		ply		                ply
2698	.cd94	80 50		bra $cde6	                bra nextMaskedCharY

2700	.cd96					plotCharAtGraphicsCursor:
2701	.cd96	20 3c e2	jsr $e23c	                jsr getSoftCharacterDefinitionAddress
2702	.cd99	9c 59 03	stz $0359	                stz vduv.graphicsPlotState   ;plot in foreground colour
2703	.cd9c	ad 5b 03	lda $035b	                lda vduv.foregroundGCOLMode
2704	.cd9f	29 0f		and #$0f	                and #$0F
2705	.cda1					plotFontDataAtGraphicsCursorWithPlotMode:
2706	.cda1	8d 5a 03	sta $035a	                sta vduv.graphicsPlotMode
2707	.cda4	a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
2708	.cda6	20 1c c9	jsr $c91c	                jsr copyGraphicsCursorPixels
2709	.cda9	a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixelsX
2710	.cdab	a2 00		ldx #$00	                ldx #VDUVariables.graphicsWindowPixelsLeft
2711	.cdad	20 b4 ce	jsr $ceb4	                jsr getDistanceMask
2712	.cdb0	85 dc		sta $dc		                sta ZTEMPB+0
2713	.cdb2	a2 04		ldx #$04	                ldx #VDUVariables.graphicsWindowPixelsRight
2714	.cdb4	20 b4 ce	jsr $ceb4	                jsr getDistanceMask
2715	.cdb7	6a		ror a		                ror a
2716	.cdb8	14 dc		trb $dc		                trb ZTEMPB+0
2717	.cdba	a2 26		ldx #$26	                ldx #VDUVariables.graphicsCursorPixelsY
2718	.cdbc	a0 06		ldy #$06	                ldy #VDUVariables.graphicsWindowPixelsTop
2719	.cdbe	20 b4 ce	jsr $ceb4	                jsr getDistanceMask
2720	.cdc1	85 dd		sta $dd		                sta ZTEMPB+1
2721	.cdc3	a2 26		ldx #$26	                ldx #VDUVariables.graphicsCursorPixelsY
2722	.cdc5	a0 02		ldy #$02	                ldy #VDUVariables.graphicsWindowPixelsBottom
2723	.cdc7	20 b4 ce	jsr $ceb4	                jsr getDistanceMask
2724	.cdca	6a		ror a		                ror a
2725	.cdcb	14 dd		trb $dd		                trb ZTEMPB+1
2726	.cdcd	a0 07		ldy #$07	                ldy #$07
2727	.cdcf					copyMaskedCharLoop:
2728	.cdcf	b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte
2729	.cdd1	25 dc		and $dc		                and ZTEMPB+0                 ;mask out columns
2730	.cdd3	46 dd		lsr $dd		                lsr ZTEMPB+1                 ;test row
2731	.cdd5	b0 02		bcs $cdd9	                bcs +
2732	.cdd7	a9 00		lda #$00	                lda #$00                     ;mask out this row
2733	.cdd9					+
2734	.cdd9	99 2c 03	sta $032c,y	                sta vduv.workspace._2C,y
2735	.cddc	88		dey		                dey
2736	.cddd	10 f0		bpl $cdcf	                bpl copyMaskedCharLoop
2737	.cddf	a0 f8		ldy #$f8	                ldy #$F8
2738	.cde1					plotMaskedCharLoop:
2739	.cde1	b9 34 02	lda $0234,y	                lda vduv.workspace._2C-$f8,y ;get masked byte
2740	.cde4	d0 8a		bne $cd70	                bne plotMaskedCharRow        ;taken if data to write
2741	.cde6					nextMaskedCharY:
2742	.cde6	ae 26 03	ldx $0326	                ldx vduv.graphicsCursorPixelsY+0
2743	.cde9	d0 03		bne $cdee	                bne +
2744	.cdeb	ce 27 03	dec $0327	                dec vduv.graphicsCursorPixelsY+1
2745	.cdee					+
2746	.cdee	ce 26 03	dec $0326	                dec vduv.graphicsCursorPixelsY+0
2747	.cdf1	c8		iny		                iny
2748	.cdf2	d0 ed		bne $cde1	                bne plotMaskedCharLoop
2749	.cdf4	a2 2a		ldx #$2a	                ldx #VDUVariables.workspace._2A
2750	.cdf6	a0 26		ldy #$26	                ldy #VDUVariables.graphicsCursorPixelsY
2751	.cdf8	4c 0c c9	jmp $c90c	                jmp copyTwoBytesWithinVDUVariables

2753	.cdfb					vdu127AtGraphicsCursor:
2754						                ; CHR$127 is a solid block, not a backspace.
2755	.cdfb	a9 f8		lda #$f8	                lda #<chr127
2756	.cdfd	85 de		sta $de		                sta ZTEMPC+0
2757	.cdff	a9 bb		lda #$bb	                lda #>chr127
2758	.ce01	85 df		sta $df		                sta ZTEMPC+1
2759	.ce03	a2 08		ldx #$08	                ldx #$08
2760	.ce05	8e 59 03	stx $0359	                stx vduv.graphicsPlotState   ;plot in background colour
2761	.ce08	a9 00		lda #$00	                lda #$00
2762	.ce0a	80 95		bra $cda1	                bra plotFontDataAtGraphicsCursorWithPlotMode

2764	.ce0c					LCE0C:
2765	.ce0c	20 2d d1	jsr $d12d	                jsr handleColumn81
2766	.ce0f	b0 85		bcs $cd96	                bcs plotCharAtGraphicsCursor          ;taken if VDU5
2767	.ce11	ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
2768	.ce14	f0 37		beq $ce4d	                beq writeTeletextChar
2769	.ce16	20 3c e2	jsr $e23c	                jsr getSoftCharacterDefinitionAddress
2770	.ce19					writeBitmapChar:
2771	.ce19	a0 07		ldy #$07	                ldy #$07
2772	.ce1b	e0 03		cpx #$03	                cpx #$03
2773	.ce1d	f0 34		beq $ce53	                beq write2bppChar            ;taken if MODE 1/5
2774	.ce1f	b0 5b		bcs $ce7c	                bcs write4bppChar                    ;taken if MODE 2
2775	.ce21					write1bppChar:
2776	.ce21	b1 de		lda ($de),y	                lda (ZTEMPC),y
2777	.ce23	05 d2		ora $d2		                ora ZORA
2778	.ce25	45 d3		eor $d3		                eor ZEOR
2779	.ce27	91 d8		sta ($d8),y	                sta (ZMEMT),y
2780	.ce29	88		dey		                dey
2781	.ce2a	10 f5		bpl $ce21	                bpl write1bppChar
2782	.ce2c	60		rts		                rts

2784	.ce2d					vdu127EntryPoint:
2785	.ce2d	a9 20		lda #$20	                lda #$20
2786	.ce2f	2c 66 03	bit $0366	                bit $0366
2787	.ce32	d0 03		bne $ce37	                bne LCE37
2788	.ce34	20 9a c2	jsr $c29a	                jsr vdu8EntryPoint
2789	.ce37					LCE37:
2790	.ce37	20 e2 e2	jsr $e2e2	                jsr testVDU5State
2791	.ce3a	d0 bf		bne $cdfb	                bne vdu127AtGraphicsCursor
2792	.ce3c	ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
2793	.ce3f	f0 0a		beq $ce4b	                beq writeTeletextSpaceChar   ;taken if teletext mode

2795						                ; Address of space char is known.
2796	.ce41	a9 00		lda #$00	                lda #<LB900
2797	.ce43	85 de		sta $de		                sta ZTEMPC+0
2798	.ce45	a9 b9		lda #$b9	                lda #>LB900
2799	.ce47	85 df		sta $df		                sta ZTEMPC+1
2800	.ce49	80 ce		bra $ce19	                bra writeBitmapChar

2802	.ce4b					writeTeletextSpaceChar:
2803	.ce4b	a9 20		lda #$20	                lda #$20
2804	.ce4d					writeTeletextChar:
2805	.ce4d	20 e5 dd	jsr $dde5	                jsr getSAA5050FromASCII
2806	.ce50	92 d8		sta ($d8)	                sta (ZMEMT)
2807	.ce52	60		rts		                rts

2809	.ce53					write2bppChar:
2810	.ce53	a5 d9		lda $d9		                lda ZMEMT+1
2811	.ce55	a6 d8		ldx $d8		                ldx ZMEMT+0
2812	.ce57	20 e7 ce	jsr $cee7	                jsr getNextColumnAddress
2813	.ce5a					-
2814	.ce5a	b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte
2815	.ce5c	29 0f		and #$0f	                and #$0F                     ;get data for right 4 pixels
2816	.ce5e	aa		tax		                tax
2817	.ce5f	bd 23 e0	lda $e023,x	                lda LE013,x                  ;form byte
2818	.ce62	05 d2		ora $d2		                ora ZORA
2819	.ce64	45 d3		eor $d3		                eor ZEOR
2820	.ce66	91 e0		sta ($e0),y	                sta (ZTEMPD),y               ;write to right column
2821	.ce68	b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte
2825	.ce6a	4a		lsr a		                lsr a                        ;
2826	.ce6b	4a		lsr a		                lsr a                        ;
2827	.ce6c	4a		lsr a		                lsr a                        ;
2828	.ce6d	4a		lsr a		                lsr a                        ;get data for left 4 pixels
2830	.ce6e	aa		tax		                tax                          ;
2831	.ce6f	bd 23 e0	lda $e023,x	                lda LE013,x                  ;form byte
2832	.ce72	05 d2		ora $d2		                ora ZORA
2833	.ce74	45 d3		eor $d3		                eor ZEOR
2834	.ce76	91 d8		sta ($d8),y	                sta (ZMEMT),y                ;write to left column
2835	.ce78	88		dey		                dey
2836	.ce79	10 df		bpl $ce5a	                bpl -
2837	.ce7b	60		rts		                rts

2839	.ce7c					write4bppChar:
2840	.ce7c	a5 d9		lda $d9		                lda ZMEMT+1
2841	.ce7e	a6 d8		ldx $d8		                ldx ZMEMT+0
2842	.ce80	20 d9 ce	jsr $ced9	                jsr getNext3ColumnAddresses
2843	.ce83					-
2844	.ce83	b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte - %abcdefgh
2845	.ce85	20 a9 ce	jsr $cea9	                jsr get4bppScreenByteFor2Pixels ;pixels g and h
2846	.ce88	91 e0		sta ($e0),y	                sta ($E0),y
2847	.ce8a	b1 de		lda ($de),y	                lda (ZTEMPC),y               ;get font byte - %abcdefgh
2848	.ce8c	4a		lsr a		                lsr a                        ;%0abcdefg
2849	.ce8d	4a		lsr a		                lsr a                        ;%00abcdef
2850	.ce8e	48		pha		                pha                          ;save %00abcdef
2851	.ce8f	20 a9 ce	jsr $cea9	                jsr get4bppScreenByteFor2Pixels ;pixels e and f
2852	.ce92	91 dc		sta ($dc),y	                sta (ZTEMPB),y
2853	.ce94	68		pla		                pla                          ;restore %00abcdef
2854	.ce95	4a		lsr a		                lsr a                        ;%000abcde
2855	.ce96	4a		lsr a		                lsr a                        ;%0000abcd
2856	.ce97	48		pha		                pha                          ;save %0000abcd
2857	.ce98	20 a9 ce	jsr $cea9	                jsr get4bppScreenByteFor2Pixels ;pixels c and d
2858	.ce9b	91 da		sta ($da),y	                sta (ZTEMP),y
2859	.ce9d	68		pla		                pla                          ;restore %0000abcd
2860	.ce9e	4a		lsr a		                lsr a                        ;%00000abc
2861	.ce9f	4a		lsr a		                lsr a                        ;%000000ab
2862	.cea0	20 a9 ce	jsr $cea9	                jsr get4bppScreenByteFor2Pixels ;pixels a and b
2863	.cea3	91 d8		sta ($d8),y	                sta (ZMEMT),y
2864	.cea5	88		dey		                dey
2865	.cea6	10 db		bpl $ce83	                bpl -
2866	.cea8	60		rts		                rts

2868	.cea9					get4bppScreenByteFor2Pixels:
2869	.cea9	29 03		and #$03	                and #$03                     ;mask out 2 pixels
2870	.ceab	aa		tax		                tax
2871	.ceac	bd 33 e0	lda $e033,x	                lda LE023,x                  ;form byte
2872	.ceaf	05 d2		ora $d2		                ora ZORA
2873	.ceb1	45 d3		eor $d3		                eor ZEOR
2874	.ceb3	60		rts		                rts

2876						;-------------------------------------------------------------------------
2877						;
2878						; Get mask indicating the distance between two 16-bit VDU variable
2879						; values - >=8, or some amount less than that.
2880						;
2881						; (These can be used for masking pixels, or counting loops, or
2882						; whatever.)
2883						;
2884						; entry:
2885						;
2886						; X = offset of value A in VDU variables
2887						;
2888						; Y = offset of value B in VDU variables
2889						;
2890						; exit:
2891						;
2892						; if distance<=0, A=255, C=1
2893						;
2894						; if distance>=8, A=0, C=0
2895						;
2896						; otherwise, A=255>>distance, C=0
2897						;
2898	.ceb4					getDistanceMask:
2899	.ceb4	38		sec		                sec
2900	.ceb5	bd 00 03	lda $0300,x	                lda vduv+0,x
2901	.ceb8	f9 00 03	sbc $0300,y	                sbc vduv+0,y
2902	.cebb	85 da		sta $da		                sta ZTEMP                    ;get result LSB
2903	.cebd	bd 01 03	lda $0301,x	                lda vduv+1,x
2904	.cec0	f9 01 03	sbc $0301,y	                sbc vduv+1,y
2905	.cec3	30 0c		bmi $ced1	                bmi distanceMask255                  ;taken if result -ve
2906	.cec5	d0 0e		bne $ced5	                bne distanceMask0                  ;taken if result >=256
2907	.cec7	a6 da		ldx $da		                ldx ZTEMP
2908	.cec9	e0 08		cpx #$08	                cpx #$08
2909	.cecb	b0 08		bcs $ced5	                bcs distanceMask0                    ;taken if result>=8
2910	.cecd	bd 37 e1	lda $e137,x	                lda distanceMasksTable,x             ;get mask for <8 items
2911	.ced0	60		rts		                rts

2913	.ced1					distanceMask255:
2914	.ced1	a9 ff		lda #$ff	                lda #%11111111
2915	.ced3	38		sec		                sec
2916	.ced4	60		rts		                rts

2918	.ced5					distanceMask0:
2919	.ced5	a9 00		lda #$00	                lda #$00
2920	.ced7	18		clc		                clc
2921	.ced8	60		rts		                rts

2923						;-------------------------------------------------------------------------
2924						;
2925						; Get addresses of next 3 columns on screen.
2926						;
2927						; entry:
2928						;
2929						; A (MSB)/X (LSB) = address
2930						;
2931						; exit:
2932						;
2933						; (ZTEMP) = column N+1
2934						; (ZTEMPB) = column N+2
2935						; (ZTEMPC) = column N+3
2936						;
2937	.ced9					getNext3ColumnAddresses:
2938	.ced9	20 e7 ce	jsr $cee7	                jsr getNextColumnAddress
2939	.cedc	86 da		stx $da		                stx ZTEMP+0
2940	.cede	85 db		sta $db		                sta ZTEMP+1
2941	.cee0	20 e7 ce	jsr $cee7	                jsr getNextColumnAddress
2942	.cee3	86 dc		stx $dc		                stx ZTEMPB+0
2943	.cee5	85 dd		sta $dd		                sta ZTEMPB+1

2945						;-------------------------------------------------------------------------
2946						;
2947						; Get address of next column on screen.
2948						;
2949						; entry:
2950						;
2951						; A (MSB)/X (LSB) = address
2952						;
2953						; exit:
2954						;
2955						; A (MSB)/X (LSB) = address of next column
2956						; (ZTEMPD) = address of next column
2957						;
2958	.cee7					getNextColumnAddress:
2959	.cee7	48		pha		                pha
2960	.cee8	8a		txa		                txa
2961	.cee9	18		clc		                clc
2962	.ceea	69 08		adc #$08	                adc #$08                     ;next column...
2963	.ceec	aa		tax		                tax
2964	.ceed	68		pla		                pla
2965	.ceee	90 06		bcc $cef6	                bcc +                        ;taken if no carry
2966	.cef0	1a		inc a		                inc a
2967	.cef1	10 03		bpl $cef6	                bpl +           ;taken if no screen address wraparound
2968	.cef3	ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
2969	.cef6					+
2970	.cef6	86 e0		stx $e0		                stx ZTEMPD+0
2971	.cef8	85 e1		sta $e1		                sta ZTEMPD+1
2972	.cefa	60		rts		                rts

2974						;-------------------------------------------------------------------------
2975						;
2976						; VDU 23 0 Control 6845 CRTC directly [MasRef E.3-12]
2977						;
2978	.cefb					vdu23_0_EntryPoint:
2979	.cefb	ad 1d 03	lda $031d	                lda vduv.queueEnd-7           ;get value
2980	.cefe	ac 1c 03	ldy $031c	                ldy vduv.queueEnd-8           ;get register

2982						                ; fall through to setCRTCRegister

2984						;-------------------------------------------------------------------------
2985						;
2986						; Set a CRTC register, adjusting and/or noting values if appropriate.
2987						;
2988						; entry:
2989						;
2990						; Y = register to set
2991						;
2992						; A = value

2994	.cf01					setCRTCRegister:
2995	.cf01	c0 07		cpy #$07	                cpy #$07
2996	.cf03	90 1f		bcc $cf24	                bcc setCRTCRegisterRaw
2997	.cf05	d0 03		bne $cf0a	                bne +        ;taken if not setting R7

2999						                ; Setting R7 (vsync position), so apply the *TV offset.
3000	.cf07	6d 90 02	adc $0290	                adc tvOffset
3001	.cf0a					+
3002	.cf0a	c0 08		cpy #$08	                cpy #$08
3003	.cf0c	d0 07		bne $cf15	                bne +                    ;taken if not setting R8

3005						                ; Setting R8 (interlace/delay register), so apply the
3006						                ; *TV interlace setting.
3007	.cf0e	09 00		ora #$00	                ora #$00
3008	.cf10	30 03		bmi $cf15	                bmi +       ;branch taken if bit 7 set - this is taken
3009						                            ;to imply the mode being set is Mode 7
3010	.cf12	4d 91 02	eor $0291	                eor tvInterlace ;apply *TV interlace setting
3011	.cf15					+
3012	.cf15	c0 0a		cpy #$0a	                cpy #$0A
3013	.cf17	d0 0b		bne $cf24	                bne setCRTCRegisterRaw

3015						                ; Setting R10 (cursor start register). Note the new
3016						                ; setting in the VDU variable. If in VDU5 mode, reuse
3017						                ; the result of testVDU5State - i.e., 32 - as the
3018						                ; setting, hiding the cursor.
3019	.cf19	8d 5f 03	sta $035f	                sta vduv.lastCursorStartRegisterValue
3020	.cf1c	20 e2 e2	jsr $e2e2	                jsr testVDU5State
3021	.cf1f	d0 09		bne $cf2a	                bne rtsCF2A
3022	.cf21	ad 5f 03	lda $035f	                lda vduv.lastCursorStartRegisterValue

3024						                ; fall through to setCRTCRegisterRaw

3026						;-------------------------------------------------------------------------
3027						;
3028						; Set a CRTC register.
3029						;
3030	.cf24					setCRTCRegisterRaw:
3031	.cf24	8c 00 fe	sty $fe00	                sty CRTC+0
3032	.cf27	8d 01 fe	sta $fe01	                sta CRTC+1
3033	.cf2a					rtsCF2A:
3034	.cf2a	60		rts		                rts

3036						;-------------------------------------------------------------------------
3037						;
3038						; VDU 23 1 Turn cursor on/off [MasRef E.3-12]
3039						;
3040	.cf2b					vdu23_1_EntryPoint:
3041	.cf2b	20 e2 e2	jsr $e2e2	                jsr testVDU5State
3042	.cf2e	d0 fa		bne $cf2a	                bne rtsCF2A                  ;taken if VDU5
3043	.cf30	ad 1c 03	lda $031c	                lda vduv.queueEnd-8           ;get new cursor state
3044	.cf33	29 03		and #$03	                and #$03                     ;mask off bits of interest
3045	.cf35	0a		asl a		                asl a
3046	.cf36	aa		tax		                tax
3047	.cf37	a9 20		lda #$20	                lda #$20 ;R10 value for hiding the cursor - save a few
3048						                         ;bytes by loading this here
3049	.cf39	7c 3c cf	jmp ($cf3c,x)	                jmp (LCF3C,x)

3051	.cf3c					LCF3C:
3052	>cf3c	53 cf				                .word setCRTCRegister10            ; 23,1,0... - hide
3053	>cf3e	50 cf				                .word showCursor            ; 23,1,1... - show
3054	>cf40	44 cf				                .word steadyCursor          ; 23,1,2... - steady
3055	>cf42	4b cf				                .word slowFlashCursor       ; 23,1,3... - flash slowly

3057	.cf44					steadyCursor:
3058	.cf44	a9 60		lda #$60	                lda #%01100000
3059	.cf46	1c 5f 03	trb $035f	                trb vduv.lastCursorStartRegisterValue ;steady cursor
3060	.cf49	80 05		bra $cf50	                bra showCursor

3062	.cf4b					slowFlashCursor:
3063	.cf4b	a9 60		lda #$60	                lda #%01100000
3064	.cf4d	0c 5f 03	tsb $035f	                tsb vduv.lastCursorStartRegisterValue ;slow blink cursor
3065	.cf50					showCursor:
3066	.cf50	ad 5f 03	lda $035f	                lda vduv.lastCursorStartRegisterValue
3067	.cf53					setCRTCRegister10:
3068	.cf53	a0 0a		ldy #$0a	                ldy #$0A
3069	.cf55	80 cd		bra $cf24	                bra setCRTCRegisterRaw

3071						;-------------------------------------------------------------------------
3072						;
3073						; VDU 23 2-5 Set ECF patterns [MasRef E.3-13]
3074						;
3075	.cf57					vdu23_2_EntryPoint:
3076	.cf57					vdu23_3_EntryPoint:
3077	.cf57					vdu23_4_EntryPoint:
3078	.cf57					vdu23_5_EntryPoint:
3079	.cf57	e9 01		sbc #$01	                sbc #$01  ;subtract 2 (C=0 on entry...) to get pattern
3080						                          ;index
3081	.cf59	0a		asl a		                asl a
3082	.cf5a	0a		asl a		                asl a
3083	.cf5b	0a		asl a		                asl a                        ;index*8
3084	.cf5c	69 07		adc #$07	                adc #$07                     ;index*8+7
3085	.cf5e	a8		tay		                tay
3086	.cf5f	a2 07		ldx #$07	                ldx #$07
3087	.cf61					-
3088	.cf61	bd 1c 03	lda $031c,x	                lda vduv.queueEnd-8,x
3089	.cf64	99 00 88	sta $8800,y	                sta andy.ecfPatterns,y
3090	.cf67	88		dey		                dey
3091	.cf68	ca		dex		                dex
3092	.cf69	10 f6		bpl $cf61	                bpl -
3093	.cf6b	80 26		bra $cf93	                bra LCF93

3095						;-------------------------------------------------------------------------

3097	.cf6d					vdu23_11_EntryPoint:
3098	.cf6d	ad 55 03	lda $0355	                lda vduv.currentScreenMODE
3099	.cf70	d0 01		bne $cf73	                bne +
3100						                ; Use a different table for MODE 0 - see MasRef E.3-16.
3101	.cf72	3a		dec a		                dec a                        ;
3102	.cf73					+
3103	.cf73	29 03		and #$03	                and #$03 ;index=0 (mode 4); 1 (mode 1/5); 2 (mode 2);
3104						                         ;3 (mode 0)
3105	.cf75	1a		inc a		                inc a
3106	.cf76	0a		asl a		                asl a
3107	.cf77	0a		asl a		                asl a
3108	.cf78	0a		asl a		                asl a
3109	.cf79	0a		asl a		                asl a                        ;(index+1)*16
3110	.cf7a	aa		tax		                tax
3111	.cf7b	a0 1c		ldy #$1c	                ldy #32-4
3112	.cf7d					setDefaultECFPatterns:
3113	.cf7d	bd d3 e1	lda $e1d3,x	                lda defaultECFPatterns-1,x
3114	.cf80	99 ff 87	sta $87ff,y	                sta andy.ecfPatterns-1,y     ;copy first repeat
3115	.cf83	99 03 88	sta $8803,y	                sta andy.ecfPatterns+4-1,y   ;copy second repeat
3116	.cf86	ca		dex		                dex                          ;next byte in defaults table
3117	.cf87	88		dey		                dey
3118	.cf88	98		tya		                tya
3119	.cf89	89 07		bit #$07	                bit #$07
3120	.cf8b	d0 f0		bne $cf7d	                bne setDefaultECFPatterns ;taken if pattern not filled
3121						                ; skip to start of previous pattern
3122	.cf8d	88		dey		                dey
3123	.cf8e	88		dey		                dey
3124	.cf8f	88		dey		                dey
3125	.cf90	88		dey		                dey
3126	.cf91	10 ea		bpl $cf7d	                bpl setDefaultECFPatterns
3127	.cf93					LCF93:
3128	.cf93	4c 7d c5	jmp $c57d	                jmp initializeCurrentECFPatterns

3130						;-------------------------------------------------------------------------
3131						;
3132						; VDU 23 12-15 Set simple ECF pattern [MasRef E.3-17]
3133						;
3134	.cf96					vdu23_12_EntryPoint:
3135	.cf96					vdu23_13_EntryPoint:
3136	.cf96					vdu23_14_EntryPoint:
3137	.cf96					vdu23_15_EntryPoint:
3138	.cf96	e9 0b		sbc #$0b	                sbc #$0B                     ;-12 to get pattern index
3139	.cf98	0a		asl a		                asl a                        ;index*2
3140	.cf99	0a		asl a		                asl a                        ;index*4
3141	.cf9a	0a		asl a		                asl a                        ;index*8, C=0
3142	.cf9b	69 03		adc #$03	                adc #$03                     ;index*8+3, C=0
3143	.cf9d	48		pha		                pha                          ;save offset
3144	.cf9e	a2 07		ldx #$07	                ldx #$07                     ;
3145	.cfa0					LCFA0:
3146	.cfa0	bd 1c 03	lda $031c,x	                lda vduv.queueEnd-8,x        ;get simple pattern byte
3147	.cfa3	2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne ;apply logical colour limit
3148	.cfa6	85 da		sta $da		                sta ZTEMP+0
3149	.cfa8	ad 60 03	lda $0360	                lda vduv.numberOfLogicalColoursMinusOne
3150	.cfab	29 07		and #$07	                and #$07                     ;1/3/7
3151	.cfad	65 da		adc $da		                adc ZTEMP+0                  ;select 2/4/16 colour table
3152	.cfaf	a8		tay		                tay
3153	.cfb0	b9 5b e1	lda $e15b,y	                lda solidColoursTable-1,y
3154	.cfb3	9d 1c 03	sta $031c,x	                sta vduv.queueEnd-8,x
3155	.cfb6	ca		dex		                dex
3156	.cfb7	10 e7		bpl $cfa0	                bpl LCFA0
3157	.cfb9	a9 55		lda #$55	                lda #%01010101
3158	.cfbb	ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
3159	.cfbe	d0 02		bne $cfc2	                bne +                 ;taken if not MODE 0
3160	.cfc0	a9 33		lda #$33	                lda #%00110011        ;double-width pattern for MODE 0
3161	.cfc2					+
3162	.cfc2	85 da		sta $da		                sta ZTEMP+0
3163	.cfc4	7a		ply		                ply
3164	.cfc5	a2 07		ldx #$07	                ldx #$07
3165	.cfc7					LCFC7:
3166	.cfc7	bd 1c 03	lda $031c,x	                lda vduv.queueEnd-8,x
3167	.cfca	ca		dex		                dex
3168	.cfcb	5d 1c 03	eor $031c,x	                eor vduv.queueEnd-8,x
3169	.cfce	25 da		and $da		                and ZTEMP+0
3170	.cfd0	5d 1c 03	eor $031c,x	                eor vduv.queueEnd-8,x
3171	.cfd3	99 00 88	sta $8800,y	                sta andy.ecfPatterns+0,y
3172	.cfd6	99 04 88	sta $8804,y	                sta andy.ecfPatterns+4,y
3173	.cfd9	88		dey		                dey
3174	.cfda	ca		dex		                dex
3175	.cfdb	10 ea		bpl $cfc7	                bpl LCFC7
3176	.cfdd	80 b4		bra $cf93	                bra LCF93

3178						;-------------------------------------------------------------------------
3179						;
3180						; VDU 23 6 Set dotted lines pattern [MasRef E.3-13]
3181						;
3182	.cfdf					vdu23_6_EntryPoint:
3183	.cfdf	ad 1c 03	lda $031c	                lda vduv.queueEnd-8
3184	.cfe2	8d 67 03	sta $0367	                sta vduv.dotPattern
3185	.cfe5	60		rts		                rts

3187						;-------------------------------------------------------------------------
3188						;
3189						; VDU 23 7 Scroll window directly [MasRef E.3-14]
3190						;
3191	.cfe6					vdu23_7_EntryPoint:
3192	.cfe6	ad 1c 03	lda $031c	                lda vduv.queueEnd-8           ;get <m>
3193	.cfe9	d0 0a		bne $cff5	                bne scrollEntireScreen
3194	.cfeb	20 10 c9	jsr $c910	                jsr copyTextWindowToWorkspace2C
3195	.cfee	a5 d0		lda $d0		                lda STATE
3196	.cff0	29 08		and #$08	                and #STATE.isTextWindow
3197	.cff2	0a		asl a		                asl a ;A=$10 (text window active) or $00 (no text window)
3198	.cff3	80 11		bra $d006	                bra +

3200	.cff5					scrollEntireScreen:
3201	.cff5	a9 00		lda #$00	                lda #$00
3202	.cff7	8d 2c 03	sta $032c	                sta vduv.workspace._2C          ;left
3203	.cffa	8d 2f 03	sta $032f	                sta vduv.workspace._2F          ;top
3204	.cffd	20 b2 e2	jsr $e2b2	                jsr getDefaultBoundsForCurrentScreenMODE
3205	.d000	8e 2e 03	stx $032e	                stx vduv.workspace._2E          ;right
3206	.d003	8c 2d 03	sty $032d	                sty vduv.workspace._2D          ;bottom
3207	.d006					+
3208	.d006	85 dc		sta $dc		                sta ZTEMPB+0
3209	.d008	38		sec		                sec
3210	.d009	ad 2e 03	lda $032e	                lda vduv.workspace._2E          ;right
3211	.d00c	ed 2c 03	sbc $032c	                sbc vduv.workspace._2C          ;right-left
3212	.d00f	20 3b c9	jsr $c93b	                jsr getBytesPerInclusiveTextRow
3213	.d012	8d 28 03	sta $0328	                sta vduv.workspace._28+0        ;bytes per row LSB
3214	.d015	8e 29 03	stx $0329	                stx vduv.workspace._28+1        ;bytes per row MSB
3215	.d018	ae 4f 03	ldx $034f	                ldx vduv.bytesPerCharacter
3216	.d01b	e0 01		cpx #$01	                cpx #$01
3217	.d01d	f0 07		beq $d026	                beq +  ;when 1 byte/char, no cell/byte distinction
3218	.d01f	ad 1e 03	lda $031e	                lda vduv.queueEnd-6       ;get <z>
3219	.d022	f0 02		beq $d026	                beq +                ;taken if scrolling by 1 cell
3220	.d024	a2 08		ldx #$08	                ldx #$08                 ;scroll by 1 horizontal byte
3221	.d026					+
3222	.d026	8e 2a 03	stx $032a	                stx vduv.workspace._2A

3224						; <d> is a bitmask - %00000AVN.
3225						;
3226						; A is set if scrolling by axis (controlled by the VDU cursor flags)
3227						; rather than by direction.
3228						;
3229						; V is set to scroll vertically/in Y rather than horizontally/in X.
3230						;
3231						; N is set to scroll in the negative direction.

3233	.d029	ad 1d 03	lda $031d	                lda vduv.queueEnd-7           ;00000avn C=?
3234	.d02c	4a		lsr a		                lsr a                        ;000000av C=n
3235	.d02d	08		php		                php
3236	.d02e	2a		rol a		                rol a                        ;00000avn C=0
3237	.d02f	28		plp		                plp                          ;00000avn C=n
3238	.d030	2a		rol a		                rol a                        ;0000avnn C=0
3239	.d031	0a		asl a		                asl a                        ;000avnn0 C=0
3240	.d032	c9 10		cmp #$10	                cmp #$10                     ;$10 = 000a0000
3241	.d034	90 03		bcc $d039	                bcc LD039                 ;taken if scrolling by direction
3242	.d036	4d 66 03	eor $0366	                eor vduv.cursorFlags       ;adjust axes
3243	.d039					LD039:
3244	.d039	29 0e		and #$0e	                and #vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal
3245	.d03b	05 dc		ora $dc		                ora ZTEMPB+0
3246	.d03d					LD03D:
3247	.d03d	aa		tax		                tax
3248	.d03e	ad 50 03	lda $0350	                lda vduv.screenTopLeftAddress+0
3249	.d041	85 d8		sta $d8		                sta ZMEMT+0
3250	.d043	ad 51 03	lda $0351	                lda vduv.screenTopLeftAddress+1
3251	.d046	85 d9		sta $d9		                sta ZMEMT+1
3252	.d048	20 4e d0	jsr $d04e	                jsr callScrollRoutine
3253	.d04b	4c d8 c6	jmp $c6d8	                jmp updateCRTCTextCursor

3255	.d04e					callScrollRoutine:
3256	.d04e	7c 1c e2	jmp ($e21c,x)	                jmp (scrollRoutinesTable,x)

3258	.d051					LD051:
3259	.d051	da		phx		                phx
3260	.d052	20 10 c9	jsr $c910	                jsr copyTextWindowToWorkspace2C
3261	.d055	20 08 c9	jsr $c908	                jsr copyTextWindowWidthInBytesToWorkspace28
3262	.d058	ae 4f 03	ldx $034f	                ldx $034F
3263	.d05b	8e 2a 03	stx $032a	                stx $032A
3264	.d05e	68		pla		                pla
3265	.d05f	4a		lsr a		                lsr a
3266	.d060	45 d0		eor $d0		                eor STATE
3267	.d062	29 f7		and #$f7	                and #(~STATE.isTextWindow)&$ff
3268	.d064	45 d0		eor $d0		                eor STATE
3269	.d066	0a		asl a		                asl a
3270	.d067	80 d4		bra $d03d	                bra LD03D

3272						;-------------------------------------------------------------------------
3273						;
3274						; VDU 23 8 Clear block [MasRef E.3-15]
3275						;
3276	.d069					vdu23_8_EntryPoint:
3277	.d069	9c 34 03	stz $0334	                stz $0334
3278	.d06c	9c 35 03	stz $0335	                stz $0335
3279	.d06f	20 62 e2	jsr $e262	                jsr getTextCursorPositionWithColumn81
3280	.d072	8e 36 03	stx $0336	                stx $0336
3281	.d075	8c 37 03	sty $0337	                sty $0337
3282	.d078	20 6c e2	jsr $e26c	                jsr LE25C
3283	.d07b	e8		inx		                inx
3284	.d07c	8e 38 03	stx $0338	                stx $0338
3285	.d07f	8c 39 03	sty $0339	                sty $0339
3286	.d082	a0 00		ldy #$00	                ldy #$00
3287	.d084	ad 1c 03	lda $031c	                lda $031C
3288	.d087	20 e5 d0	jsr $d0e5	                jsr LD0E5
3289	.d08a	ad 1d 03	lda $031d	                lda $031D
3290	.d08d	20 e5 d0	jsr $d0e5	                jsr LD0E5
3291	.d090	ad 33 03	lda $0333	                lda $0333
3292	.d093	cd 31 03	cmp $0331	                cmp $0331
3293	.d096	90 76		bcc $d10e	                bcc LD10E
3294	.d098	d0 08		bne $d0a2	                bne LD0A2
3295	.d09a	ad 30 03	lda $0330	                lda $0330
3296	.d09d	cd 32 03	cmp $0332	                cmp $0332
3297	.d0a0	b0 6c		bcs $d10e	                bcs LD10E
3298	.d0a2					LD0A2:
3299	.d0a2	ad 18 03	lda $0318	                lda $0318
3300	.d0a5	48		pha		                pha
3301	.d0a6	ad 19 03	lda $0319	                lda $0319
3302	.d0a9	48		pha		                pha
3303	.d0aa	ac 31 03	ldy $0331	                ldy $0331
3304	.d0ad					LD0AD:
3305	.d0ad	5a		phy		                phy
3306	.d0ae	ad 66 03	lda $0366	                lda $0366
3307	.d0b1	49 08		eor #$08	                eor #$08
3308	.d0b3	29 0e		and #$0e	                and #$0E
3309	.d0b5	aa		tax		                tax
3310	.d0b6	98		tya		                tya
3311	.d0b7	20 c7 c2	jsr $c2c7	                jsr setTextCursorXPositionWithCursorFlags
3312	.d0ba	a2 00		ldx #$00	                ldx #$00
3313	.d0bc	ad 38 03	lda $0338	                lda $0338
3314	.d0bf	cc 31 03	cpy $0331	                cpy $0331
3315	.d0c2	d0 03		bne $d0c7	                bne LD0C7
3316	.d0c4	ae 30 03	ldx $0330	                ldx $0330
3317	.d0c7					LD0C7:
3318	.d0c7	cc 33 03	cpy $0333	                cpy $0333
3319	.d0ca	f0 07		beq $d0d3	                beq LD0D3
3320	.d0cc	20 7f ca	jsr $ca7f	                jsr LCA7F
3321	.d0cf	7a		ply		                ply
3322	.d0d0	c8		iny		                iny
3323	.d0d1	80 da		bra $d0ad	                bra LD0AD

3325	.d0d3					LD0D3:
3326	.d0d3	ad 32 03	lda $0332	                lda $0332
3327	.d0d6	20 7f ca	jsr $ca7f	                jsr LCA7F
3328	.d0d9	7a		ply		                ply
3329	.d0da	68		pla		                pla
3330	.d0db	8d 19 03	sta $0319	                sta $0319
3331	.d0de	68		pla		                pla
3332	.d0df	8d 18 03	sta $0318	                sta $0318
3333	.d0e2	4c fa cc	jmp $ccfa	                jmp updateZMEMTWithTextCursorPosition

3335	.d0e5					LD0E5:
3336	.d0e5	48		pha		                pha
3337	.d0e6	29 03		and #$03	                and #$03
3338	.d0e8	0a		asl a		                asl a
3339	.d0e9	20 f0 d0	jsr $d0f0	                jsr LD0F0
3340	.d0ec	68		pla		                pla
3341	.d0ed	4a		lsr a		                lsr a
3342	.d0ee	09 01		ora #$01	                ora #$01
3343	.d0f0					LD0F0:
3344	.d0f0	aa		tax		                tax
3345	.d0f1	29 01		and #$01	                and #$01
3346	.d0f3	48		pha		                pha
3347	.d0f4	bd 34 03	lda $0334,x	                lda $0334,x
3348	.d0f7	fa		plx		                plx
3349	.d0f8	18		clc		                clc
3350	.d0f9	c8		iny		                iny
3351	.d0fa	79 1d 03	adc $031d,y	                adc $031D,y
3352	.d0fd	30 0a		bmi $d109	                bmi LD109
3353	.d0ff	dd 38 03	cmp $0338,x	                cmp $0338,x
3354	.d102	90 07		bcc $d10b	                bcc LD10B
3355	.d104	bd 38 03	lda $0338,x	                lda $0338,x
3356	.d107	80 02		bra $d10b	                bra LD10B

3358	.d109					LD109:
3359	.d109	a9 00		lda #$00	                lda #$00
3360	.d10b					LD10B:
3361	.d10b	99 2f 03	sta $032f,y	                sta $032F,y
3362	.d10e					LD10E:
3363	.d10e	60		rts		                rts

3365						;-------------------------------------------------------------------------
3366						;
3367						; VDU 23 9 Set 1st flash time [MasRef E.3-16]
3368						;
3369	.d10f					vdu23_9_EntryPoint:
3370	.d10f	38		sec		                sec

3372						;-------------------------------------------------------------------------
3373						;
3374						; VDU 23 10 Set 2nd flash time [MasRef E.3-16]
3375						;
3376	.d110					vdu23_10_EntryPoint:
3377	.d110	ae 1c 03	ldx $031c	                ldx vduv.queueEnd-8          ;get flash value
3378	.d113	a0 00		ldy #$00	                ldy #$00                     ;Y=0 for OSBYTE call
3379	.d115	90 03		bcc $d11a	                bcc doOSBYTE0A               ;taken if VDU23,10
3380	.d117	4c 2e ed	jmp $ed2e	                jmp osbyte09
3381	.d11a					doOSBYTE0A:
3382	.d11a	38		sec		                sec
3383	.d11b	4c 30 ed	jmp $ed30	                jmp osbyte0A

3385						;-------------------------------------------------------------------------
3386						;
3387						; VDU 23 16 Cursor movement control [MasRef E.3-17]
3388						;
3389	.d11e					vdu23_16_EntryPoint:
3390	.d11e	ad 66 03	lda $0366	                lda vduv.cursorFlags
3391	.d121	2d 1d 03	and $031d	                and vduv.queueEnd-7          ;value AND <y>
3392	.d124	4d 1c 03	eor $031c	                eor vduv.queueEnd-8          ;(value AND <y>) EOR <x>
3393	.d127	8d 66 03	sta $0366	                sta vduv.cursorFlags
3394	.d12a	4a		lsr a		                lsr a
3395	.d12b	b0 18		bcs $d145	                bcs rtsD145            ;taken if scrollProtect flag on
3396						                ; scroll protect flag is off, so handle column 81 if
3397						                ; necessary.

3399						;-------------------------------------------------------------------------
3400						;
3401						; Handle column 81, if necessary.
3402						;
3403						; TODO - probably misnamed due to the return value
3404						;
3405						; exit:
3406						;
3407						; C=0 if not VDU 5
3408						;
3409						; C=1 if VDU 5
3410						;
3411	.d12d					handleColumn81:
3412	.d12d	48		pha		                pha
3413	.d12e	da		phx		                phx
3414	.d12f	20 e2 e2	jsr $e2e2	                jsr testVDU5State
3415	.d132	38		sec		                sec
3416	.d133	d0 0e		bne $d143	                bne plx_pla_rts        ;taken if VDU5
3417	.d135	18		clc		                clc
3418	.d136	2c 6c 03	bit $036c	                bit vduv.column81
3419	.d139	10 08		bpl $d143	                bpl plx_pla_rts        ;taken if not column 81
3420	.d13b	08		php		                php
3421	.d13c	20 f6 c3	jsr $c3f6	                jsr vdu13EntryPoint          ;CR
3422	.d13f	20 5b c2	jsr $c25b	                jsr vdu10EntryPoint          ;LF
3423	.d142	28		plp		                plp
3424	.d143					plx_pla_rts:
3425	.d143	fa		plx		                plx
3426	.d144	68		pla		                pla
3427	.d145					rtsD145:
3428	.d145	60		rts		                rts

3430						;-------------------------------------------------------------------------
3431						;
3432						; Handle PLOT. [MasRef E.3-21]
3433						;
3434						; PLOT numbers are of the form %pppppamm, where %ppppp is the PLOT
3435						; type, %a the absolute flag and %mm the PLOT mode.
3436						;
3437						; Absolute flag and mode are clear enough from [MasRef E.3-22]. The
3438						; %ppppp part isn't documented as such, so here's a list:
3439						;
3440						; %00000 =  0 = 0-7 = Plot solid line (both endpoints included) [MasRef E.3-23]
3441						; %00001 =  1 = 8-15 = Plot solid line (final point omitted) [MasRef E.3-23]
3442						; %00010 =  2 = 16-23 = Plot solid line (final point omitted) [MasRef E.3-23]
3443						; %00011 =  3 = 24-31 = Plot dotted line (final point omitted) [MasRef E.3-23]
3444						; %00100 =  4 = 32-39 = Plot solid line (initial point omitted) [MasRef E.3-24]
3445						; %00101 =  5 = 40-47 = Plot solid line (both endpoints omitted) [MasRef E.3-24]
3446						; %00110 =  6 = 48-55 = Plot dotted line (initial point omitted) [MasRef E.3-24]
3447						; %00111 =  7 = 56-63 = Plot dotted line (both endpoints omitted) [MasRef E.3-24]
3448						; %01000 =  8 = 64-71 = Plot point [MasRef E.3-24]
3449						; %01001 =  9 = 72-79 = Horizontal line fill (left and right to non-background) [MasRef E.3-24]
3450						; %01010 = 10 = 80-87 = Plot triangle [MasRef E.3-25]
3451						; %01011 = 11 = 88-95 = Horizontal line fill (right to background) [MasRef E.3-25]
3452						; %01100 = 12 = 96-103 = Plot rectangle [MasRef E.3-26]
3453						; %01101 = 13 = 104-111 = Horizontal line fill (left and right to foreground) [MasRef E.3-26]
3454						; %01110 = 14 = 112-119 = Plot parallelogram [MasRef E.3-27]
3455						; %01111 = 15 = 120-127 = Horizontal line fill (right to non-foreground) [MasRef E.3-27]
3456						; %10000 = 16 = 128-135 = Flood fill to non-background [MasRef E.3-28]
3457						; %10001 = 17 = 136-143 = Flood fill to foreground [MasRef E.3-28]
3458						; %10010 = 18 = 144-151 = Plot circle outline [MasRef E.3-28]
3459						; %10011 = 19 = 152-159 = Plot filled circle [MasRef E.3-29]
3460						; %10100 = 20 = 160-167 = Plot circular arc [MasRef E.3-29]
3461						; %10101 = 21 = 168-175 = Plot filled chord segment [MasRef E.3-30]
3462						; %10110 = 22 = 176-183 = Plot filled sector [MasRef E.3-30]
3463						; %10111 = 23 = 184-191 = Move/copy rectangle [MasRef E.3-31]
3464						; %11000 = 24 = 192-199 = Plot ellipse outline [MasRef E.3-32]
3465						; %11001 = 25 = 200-207 = Plot solid ellipse [MasRef E.3-32]
3466						; %11010 = 26 = 208-215 = Reserved [MasRef E.3-34]
3467						; %11011 = 27 = 215-223 = Reserved [MasRef E.3-34]
3468						; %11100 = 28 = 224-231 = Reserved [MasRef E.3-34]
3469						; %11101 = 29 = 232-239 = Reserved for Acornsoft sprites [MasRef E.3-34]
3470						; %11110 = 30 = 240-247 = User program calls [MasRef E.3-34]
3471						; %11111 = 31 = 248-255 = User program calls [MasRef E.3-34]
3472						;
3473						; entry:
3474						;
3475						; vduQueueEnd-5 = PLOT number
3476						;
3477						; vduQueueEnd-3 = X coordinate
3478						;
3479						; vduQueueEnd-1 = Y coordinate
3480						;;

3482	.d146					handlePLOT:
3483	.d146	a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
3484	.d148	20 e2 d1	jsr $d1e2	                jsr eigabsForPLOT
3485	.d14b	ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number
3486	.d14e	a0 05		ldy #$05	                ldy #gcolModeLeave                     ;
3487	.d150	29 03		and #$03	                and #$03                     ;mask out colour/plot mode [MasRef E.3-22]
3488	.d152	f0 0c		beq $d160	                beq LD160 ;taken if <p> MOD 4=0 - early out
3489	.d154	4a		lsr a		                lsr a                        ;C=1 if using VDU18 settings
3490	.d155	88		dey		                dey                          ;Y=gcolModeInvert
3491	.d156	90 08		bcc $d160	                bcc LD160                    ;taken if invert mode
3492	.d158	aa		tax		                tax              ;X=0 if fg settings, 1 if bg settings
3493	.d159	bc 5b 03	ldy $035b,x	                ldy vduv.foregroundGCOLMode,x
3494	.d15c	0a		asl a		                asl a
3495	.d15d	0a		asl a		                asl a
3496	.d15e	0a		asl a		                asl a
3497	.d15f	aa		tax		                tax              ;X=0 if fg settings, 8 if bg settings
3498	.d160					LD160:
3499	.d160	8e 59 03	stx $0359	                stx vduv.graphicsPlotState
3500	.d163	98		tya		                tya
3501	.d164	29 0f		and #$0f	                and #$0F
3502	.d166	8d 5a 03	sta $035a	                sta vduv.graphicsPlotMode
3503	.d169	ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number pppppmmm
3504	.d16c	4a		lsr a		                lsr a                        ;0pppppmm
3505	.d16d	4a		lsr a		                lsr a                        ;00pppppm
3506	.d16e	29 fe		and #$fe	                and #$fe                     ;00ppppp0
3507	.d170	aa		tax		                tax
3508	.d171	c9 34		cmp #$34	                cmp #208/4
3509	.d173	b0 1b		bcs $d190	                bcs LD190                    ;taken if reserved PLOT
3510	.d175	29 f3		and #$f3	                and #$F3                     ;00pp00p0
3511	.d177	c9 12		cmp #$12	                cmp #$12                     ;
3512	.d179	08		php		                php                          ;
3513	.d17a	f0 08		beq $d184	                beq LD184                ;taken if horizonal line fill
3514	.d17c	e0 2e		cpx #$2e	                cpx #184/4
3515	.d17e	f0 04		beq $d184	                beq LD184                ;taken if move/copy rectangle
3516	.d180	c0 05		cpy #$05	                cpy #gcolModeLeave
3517	.d182	f0 19		beq $d19d	                beq LD19D
3518	.d184					LD184:
3519	.d184	ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number
3520	.d187	20 93 d1	jsr $d193	                jsr LD193
3521	.d18a	28		plp		                plp
3522	.d18b	d0 11		bne $d19e	                bne LD19E
3523	.d18d	4c df c4	jmp $c4df	                jmp LC4DF

3525	.d190					LD190:
3526	.d190	4c a3 c6	jmp $c6a3	                jmp callVDUVForPLOT

3528	.d193					LD193:
3529	.d193	e0 10		cpx #$10	                cpx #64/4
3530	.d195	b0 03		bcs $d19a	                bcs LD19A                     ;taken if PLOT >=64
3531	.d197	4c a9 d8	jmp $d8a9	                jmp LD8A9                    ;handle line PLOTs

3533	.d19a					LD19A:
3534	.d19a	7c 8b e0	jmp ($e08b,x)	                jmp (plotEntryPointTable-8*2,x)

3536	.d19d					LD19D:
3537	.d19d	68		pla		                pla
3538	.d19e					LD19E:
3539	.d19e	20 1a c9	jsr $c91a	                jsr copyGraphicsCursorPixelsToOldGraphicsCursorPixels
3540	.d1a1	a0 24		ldy #$24	                ldy #$24
3541	.d1a3	4c 16 c9	jmp $c916	                jmp copyLastFourVDUQueueBytes

3543	.d1a6					LD1A6:
3544	.d1a6	a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX

3546						;-------------------------------------------------------------------------
3547						;
3548						; WIND [MasRef E.4-7]. The result is a bit field, %vvhh, where %vv is
3549						; the outcode for the vertical axis and %hh the outcode for the
3550						; horizontal axis. Each outcode is %xn, where x is set if point above
3551						; maximum and n set if point below minimum. (Of course, %11 is then
3552						; not possible.)
3553						;
3554						; See https://en.wikipedia.org/wiki/Cohen%E2%80%93Sutherland_algorithm
3555						;
3556						; So the possible results, in binary, are:
3557						;
3558						; %1001 | %1000 | %1010
3559						; ------+-------+------
3560						; %0001 | %0000 | %0010
3561						; ------+-------+------
3562						; %0101 | %0100 | %0110
3563						;
3564	.d1a8					windEntryPoint:
3565	.d1a8	e8		inx		                inx
3566	.d1a9	e8		inx		                inx                          ;point to Y coordinate
3567	.d1aa	20 b5 d1	jsr $d1b5	                jsr getOutcodeForYAxis                    ;process Y coordinate
3568	.d1ad	ca		dex		                dex
3569	.d1ae	ca		dex		                dex                          ;point to X coordinate
3570	.d1af	0a		asl a		                asl a
3571	.d1b0	0a		asl a		                asl a                        ;shift Y outcode into bits 2/3
3572	.d1b1	a0 00		ldy #$00	                ldy #$00                     ;doing Y axis
3573	.d1b3	80 04		bra $d1b9	                bra updateOutcodeForAxis

3575						;-------------------------------------------------------------------------
3576						;
3577	.d1b5					getOutcodeForYAxis:
3578	.d1b5	a0 02		ldy #$02	                ldy #$02                     ;Y=2 for Y coordinate
3579						;-------------------------------------------------------------------------
3580						;
3581						; Get outcode for X or Y axis.
3582						;
3583						; entry:
3584						;
3585						; X = offset in VDU variables of coordinate
3586						;
3587						; Y = 0 if X axis, 2 if Y axis
3588						;
3589						; exit:
3590						;
3591						; ZTEMP?0 = outcode - 0, 1 or 2
3592						;
3593						; A = outcode
3594						;
3595						; N/Z set as per outcode
3596						;
3597	.d1b7					getOutcodeForAxis:
3598	.d1b7	a9 00		lda #$00	                lda #$00                     ;initialize result

3600						;-------------------------------------------------------------------------
3601						;
3602						; Update outcode for X or Y axis
3603						;
3604						; entry: as per getOutcodeForAxis
3605						;
3606						; exit:
3607						;
3608						; ZTEMP?0 = updated; outcode is added to its existing value
3609						;
3610	.d1b9					updateOutcodeForAxis:
3611	.d1b9	85 da		sta $da		                sta ZTEMP+0                  ;save current result
3612						                ; set flags for coordinate-minimum
3613	.d1bb	bd 00 03	lda $0300,x	                lda vduv+0,x
3614	.d1be	d9 00 03	cmp $0300,y	                cmp vduv.graphicsWindowPixelsLeft+0,y
3615	.d1c1	bd 01 03	lda $0301,x	                lda vduv+1,x
3616	.d1c4	f9 01 03	sbc $0301,y	                sbc vduv.graphicsWindowPixelsLeft+1,y
3617	.d1c7	30 10		bmi $d1d9	                bmi add1ToOutcode ;taken if point below minimum - outcode is 1

3619						                ; set flags for maximum-coordinate
3620	.d1c9	b9 04 03	lda $0304,y	                lda vduv.graphicsWindowPixelsRight+0,y
3621	.d1cc	dd 00 03	cmp $0300,x	                cmp vduv+0,x
3622	.d1cf	b9 05 03	lda $0305,y	                lda vduv.graphicsWindowPixelsRight+1,y
3623	.d1d2	fd 01 03	sbc $0301,x	                sbc vduv+1,x
3624	.d1d5	10 04		bpl $d1db	                bpl gotOutcode ;taken if point below maximum - axis outcode is 0
3625						                ; point is above maximum - axis outcode is 2
3626	.d1d7					add2ToOutcode:
3627	.d1d7	e6 da		inc $da		                inc ZTEMP+0
3628	.d1d9					add1ToOutcode:
3629	.d1d9	e6 da		inc $da		                inc ZTEMP+0
3630	.d1db					gotOutcode:
3631	.d1db	a5 da		lda $da		                lda ZTEMP+0
3632	.d1dd	60		rts		                rts

3634						;-------------------------------------------------------------------------
3635						;
3636						; EIGABS entry point.
3637						;
3638	.d1de					eigabsEntryPoint:
3639	.d1de	a9 ff		lda #$ff	                lda #$FF ;pretend it's PLOT 255 (as that would be absolute coordinates)
3640	.d1e0	80 03		bra $d1e5	                bra eigabsCommon

3642						;-------------------------------------------------------------------------
3643						;
3644						; EIGABS, but for a VDU 25. Handles relative/absolute addressing,
3645						; based on the PLOT number in the VDU queue.
3646						;
3647	.d1e2					eigabsForPLOT:
3648	.d1e2	ad 1f 03	lda $031f	                lda vduv.queueEnd-5          ;get PLOT number

3650						;-------------------------------------------------------------------------
3651						;
3652						; EIGABS shared code.
3653						;
3654	.d1e5					eigabsCommon:
3655	.d1e5	85 da		sta $da		                sta ZTEMP+0                  ;save PLOT number
3656	.d1e7	a0 02		ldy #$02	                ldy #$02                     ;process Y
3657	.d1e9	20 0b d2	jsr $d20b	                jsr handleExternalCoordinate
3658	.d1ec	20 42 d2	jsr $d242	                jsr divideCoordinatesBy2     ;divide Y by 4 - convert 0-1023 to 0-255
3659	.d1ef	a0 00		ldy #$00	                ldy #$00                     ;process X
3660	.d1f1	ca		dex		                dex                          ;...
3661	.d1f2	ca		dex		                dex                          ;...
3662	.d1f3	20 0b d2	jsr $d20b	                jsr handleExternalCoordinate
3663	.d1f6	ac 61 03	ldy $0361	                ldy vduv.pixelsPerByteMinusOne
3664	.d1f9	c0 03		cpy #$03	                cpy #$03  ;
3665	.d1fb	f0 05		beq $d202	                beq +     ;branch taken if mode 1/5 - divide by 4 or 8
3666	.d1fd	b0 06		bcs $d205	                bcs ++    ;branch taken if mode 0/4 - divide by 2 or 4
3667	.d1ff	20 42 d2	jsr $d242	                jsr divideCoordinatesBy2     ;mode 2 - divide by 8
3668	.d202					+
3669	.d202	20 42 d2	jsr $d242	                jsr divideCoordinatesBy2
3670	.d205					+
3671	.d205	ad 56 03	lda $0356	                lda vduv.currentScreenMODEGroup
3672	.d208	d0 38		bne $d242	                bne divideCoordinatesBy2     ;branch taken if MODE 4/5
3673	.d20a	60		rts		                rts

3675						;-------------------------------------------------------------------------
3676						;
3677						; Handle external coordinate.
3678						;
3679						; 1. Deal with absolute or relative PLOTting
3680						;
3681						; 2. Update graphics cursor position
3682						;
3683						; 3. Handle window origin
3684						;
3685						; 4. Update input coordinate
3686						;
3687						; 5. Divide result by 2 (as this always needs doing at least once)
3688						;
3689						; entry:
3690						;
3691						; ZTEMP?0 = PLOT number
3692						;
3693						; X = offset-2 of external coordinates
3694						;
3695						; Y = 0 to process X coordinate, 2 to process Y coordinate
3696						;
3697	.d20b					handleExternalCoordinate:
3698	.d20b	18		clc		                clc
3699	.d20c	a5 da		lda $da		                lda ZTEMP+0                  ;get PLOT number
3700	.d20e	29 04		and #$04	                and #$04                     ;get absolute/relative flag
3701	.d210	f0 09		beq $d21b	                beq relativePLOT             ;branch taken if relative
3702	.d212					absolutePLOT:
3703	.d212	bd 02 03	lda $0302,x	                lda vduv+2,x                 ;get coordinate LSB
3704	.d215	48		pha		                pha                          ;save coordinate LSB
3705	.d216	bd 03 03	lda $0303,x	                lda vduv+3,x                 ;get coordinate MSB
3706	.d219	80 0e		bra $d229	                bra LD229                    ;

3708	.d21b					relativePLOT:
3709	.d21b	bd 02 03	lda $0302,x	                lda vduv+2,x                 ;get coordinate LSB
3710	.d21e	79 10 03	adc $0310,y	                adc vduv.graphicsCursorPositionX+0,y ;add current position LSB
3711	.d221	48		pha		                pha                                  ;save coordinate LSB
3712	.d222	bd 03 03	lda $0303,x	                lda vduv+3,x                 ;get coordinate MSB
3713	.d225	79 11 03	adc $0311,y	                adc vduv.graphicsCursorPositionX+1,y ;add current position MSB
3714	.d228	18		clc		                clc
3715	.d229					LD229:
3716	.d229	99 11 03	sta $0311,y	                sta vduv.graphicsCursorPositionX+1,y ;update current position MSB
3717	.d22c	79 0d 03	adc $030d,y	                adc vduv.graphicsWindowOriginX+1,y   ;add window origin MSB
3718	.d22f	9d 03 03	sta $0303,x	                sta vduv+3,x                  ;update coordinate MSB
3719	.d232	68		pla		                pla                          ;restore coordinate LSB
3720	.d233	99 10 03	sta $0310,y	                sta vduv.graphicsCursorPositionX+0,y ;update current position LSB
3721	.d236	18		clc		                clc
3722	.d237	79 0c 03	adc $030c,y	                adc vduv.graphicsWindowOriginX+0,y ;add window origin LSB
3723	.d23a	9d 02 03	sta $0302,x	                sta vduv+2,x                       ;update coordinate LSB
3724	.d23d	90 03		bcc $d242	                bcc +
3725	.d23f	fe 03 03	inc $0303,x	                inc vduv+3,x       ;handle carry, ignored earlier
3726	.d242					+

3728	.d242					divideCoordinatesBy2:
3729	.d242	bd 03 03	lda $0303,x	                lda vduv+3,x
3730	.d245	0a		asl a		                asl a                        ;C=bit 7
3731	.d246	7e 03 03	ror $0303,x	                ror vduv+3,x                  ;signed divide by 2
3732	.d249	7e 02 03	ror $0302,x	                ror vduv+2,x                  ;signed divide by 2
3733	.d24c	60		rts		                rts

3735						;-------------------------------------------------------------------------

3737	.d24d					LD24D:
3738	.d24d	da		phx		                phx
3739	.d24e	5a		phy		                phy
3740	.d24f	5a		phy		                phy
3741	.d250	da		phx		                phx
3742	.d251	5a		phy		                phy
3743	.d252	20 80 d2	jsr $d280	                jsr LD280
3744	.d255	fa		plx		                plx
3745	.d256	20 80 d2	jsr $d280	                jsr LD280
3746	.d259	fa		plx		                plx
3747	.d25a	7a		ply		                ply
3748	.d25b	20 e8 da	jsr $dae8	                jsr LDAE8
3749	.d25e	fa		plx		                plx
3750	.d25f	20 68 d2	jsr $d268	                jsr LD268
3751	.d262	fa		plx		                plx
3752	.d263	80 03		bra $d268	                bra LD268

3754	.d265					LD265:
3755	.d265	20 a9 9b	jsr $9ba9	                jsr L9B09
3756	.d268					LD268:
3757	.d268	a0 00		ldy #$00	                ldy #$00
3758	.d26a	20 70 d2	jsr $d270	                jsr LD270
3759	.d26d	e8		inx		                inx
3760	.d26e	a0 02		ldy #$02	                ldy #$02
3761	.d270					LD270:
3762	.d270	38		sec		                sec
3763	.d271	20 76 d2	jsr $d276	                jsr LD276
3764	.d274	e8		inx		                inx
3765	.d275	c8		iny		                iny
3766	.d276					LD276:
3767	.d276	bd 00 03	lda $0300,x	                lda $0300,x
3768	.d279	f9 14 03	sbc $0314,y	                sbc $0314,y
3769	.d27c	9d 00 03	sta $0300,x	                sta $0300,x
3770	.d27f					LD27F:
3771	.d27f	60		rts		                rts

3773	.d280					LD280:
3774	.d280	a0 00		ldy #$00	                ldy #$00
3775	.d282	20 88 d2	jsr $d288	                jsr LD288
3776	.d285	e8		inx		                inx
3777	.d286	a0 02		ldy #$02	                ldy #$02
3778	.d288					LD288:
3779	.d288	18		clc		                clc
3780	.d289	20 8e d2	jsr $d28e	                jsr LD28E
3781	.d28c	e8		inx		                inx
3782	.d28d	c8		iny		                iny
3783	.d28e					LD28E:
3784	.d28e	bd 00 03	lda $0300,x	                lda $0300,x
3785	.d291	79 14 03	adc $0314,y	                adc $0314,y
3786	.d294	9d 00 03	sta $0300,x	                sta $0300,x
3787	.d297	60		rts		                rts

3789	.d298					LD298:
3790	.d298	85 e1		sta $e1		                sta $E1
3791	.d29a	20 25 d4	jsr $d425	                jsr LD425
3792	.d29d	f0 e0		beq $d27f	                beq LD27F
3793	.d29f	a0 14		ldy #$14	                ldy #$14
3794	.d2a1	a9 20		lda #$20	                lda #$20
3795	.d2a3	a2 2c		ldx #$2c	                ldx #$2C
3796	.d2a5	20 65 d2	jsr $d265	                jsr LD265
3797	.d2a8	20 aa d3	jsr $d3aa	                jsr LD3AA
3798	.d2ab	a9 01		lda #$01	                lda #$01
3799	.d2ad					LD2AD:
3800	.d2ad	84 e0		sty $e0		                sty $E0
3801	.d2af	04 e0		tsb $e0		                tsb $E0
3802	.d2b1	a2 2c		ldx #$2c	                ldx #VDUVariables.workspace._2C
3803	.d2b3	a0 28		ldy #$28	                ldy #VDUVariables.workspace._28
3804	.d2b5	20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
3805	.d2b8	2c 35 03	bit $0335	                bit $0335
3806	.d2bb	08		php		                php
3807	.d2bc	a2 2c		ldx #$2c	                ldx #$2C
3808	.d2be	20 26 d7	jsr $d726	                jsr LD726
3809	.d2c1	28		plp		                plp
3810	.d2c2	10 03		bpl $d2c7	                bpl LD2C7
3811	.d2c4	20 aa d3	jsr $d3aa	                jsr LD3AA
3812	.d2c7					LD2C7:
3813	.d2c7	ac 2c 03	ldy $032c	                ldy $032C
3814	.d2ca	ad 2d 03	lda $032d	                lda $032D
3815	.d2cd	30 03		bmi $d2d2	                bmi LD2D2
3816	.d2cf	20 2e c9	jsr $c92e	                jsr negateAY
3817	.d2d2					LD2D2:
3818	.d2d2	48		pha		                pha
3819	.d2d3	18		clc		                clc
3820	.d2d4	98		tya		                tya
3821	.d2d5	6d 30 88	adc $8830	                adc L8830
3822	.d2d8	a8		tay		                tay
3823	.d2d9	68		pla		                pla
3824	.d2da	6d 31 88	adc $8831	                adc L8831
3825	.d2dd	10 ce		bpl $d2ad	                bpl LD2AD
3826	.d2df	1a		inc a		                inc a
3827	.d2e0	d0 23		bne $d305	                bne LD305
3828	.d2e2	c8		iny		                iny
3829	.d2e3	d0 20		bne $d305	                bne LD305
3830	.d2e5	a5 e0		lda $e0		                lda $E0
3831	.d2e7	f0 1c		beq $d305	                beq LD305
3832	.d2e9	ad 2c 03	lda $032c	                lda $032C
3833	.d2ec	cd 28 03	cmp $0328	                cmp $0328
3834	.d2ef	f0 14		beq $d305	                beq LD305
3835	.d2f1	a2 2c		ldx #$2c	                ldx #$2C
3836	.d2f3	a0 28		ldy #$28	                ldy #$28
3837	.d2f5	ad 36 03	lda $0336	                lda $0336
3838	.d2f8	0a		asl a		                asl a
3839	.d2f9	4d 36 03	eor $0336	                eor $0336
3840	.d2fc	10 04		bpl $d302	                bpl LD302
3841	.d2fe	e8		inx		                inx
3842	.d2ff	e8		inx		                inx
3843	.d300	c8		iny		                iny
3844	.d301	c8		iny		                iny
3845	.d302					LD302:
3846	.d302	20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
3847	.d305					LD305:
3848	.d305	20 25 d4	jsr $d425	                jsr LD425
3849	.d308	ad 29 03	lda $0329	                lda $0329
3850	.d30b	aa		tax		                tax
3851	.d30c	4d 1c 03	eor $031c	                eor $031C
3852	.d30f	30 18		bmi $d329	                bmi LD329
3853	.d311	a0 02		ldy #$02	                ldy #$02
3854	.d313	20 6f d4	jsr $d46f	                jsr LD46F
3855	.d316	d0 0c		bne $d324	                bne LD324
3856	.d318	ae 2b 03	ldx $032b	                ldx $032B
3857	.d31b	a0 00		ldy #$00	                ldy #$00
3858	.d31d	20 6f d4	jsr $d46f	                jsr LD46F
3859	.d320	f0 11		beq $d333	                beq LD333
3860	.d322	49 80		eor #$80	                eor #$80
3861	.d324					LD324:
3862	.d324	86 da		stx $da		                stx $DA
3863	.d326	45 da		eor $da		                eor $DA
3864	.d328	aa		tax		                tax
3865	.d329					LD329:
3866	.d329	8a		txa		                txa
3867	.d32a	29 80		and #$80	                and #$80
3868	.d32c	f0 02		beq $d330	                beq LD330
3869	.d32e	a9 c0		lda #$c0	                lda #$C0
3870	.d330					LD330:
3871	.d330	04 e1		tsb $e1		                tsb $E1
3872	.d332	18		clc		                clc
3873	.d333					LD333:
3874	.d333	60		rts		                rts

3876	.d334					LD334:
3877	.d334	a5 e1		lda $e1		                lda $E1
3878	.d336	8d 48 88	sta $8848	                sta L8848
3879	.d339	89 03		bit #$03	                bit #$03
3880	.d33b	f0 f6		beq $d333	                beq LD333
3881	.d33d	a9 10		lda #$10	                lda #$10
3882	.d33f	85 dc		sta $dc		                sta $DC
3883	.d341	0a		asl a		                asl a
3884	.d342	85 dd		sta $dd		                sta $DD
3885	.d344	a2 1b		ldx #$1b	                ldx #$1B
3886	.d346	20 4f d3	jsr $d34f	                jsr LD34F
3887	.d349	06 dc		asl $dc		                asl $DC
3888	.d34b	46 dd		lsr $dd		                lsr $DD
3889	.d34d	a2 28		ldx #$28	                ldx #$28
3890	.d34f					LD34F:
3891	.d34f	a9 80		lda #$80	                lda #$80
3892	.d351	85 da		sta $da		                sta $DA
3893	.d353	bd 02 03	lda $0302,x	                lda $0302,x
3894	.d356	cd 32 88	cmp $8832	                cmp L8832
3895	.d359	d0 d8		bne $d333	                bne LD333
3896	.d35b	bd 03 03	lda $0303,x	                lda $0303,x
3897	.d35e	cd 33 88	cmp $8833	                cmp L8833
3898	.d361	d0 d0		bne $d333	                bne LD333
3899	.d363	bc 00 03	ldy $0300,x	                ldy $0300,x
3900	.d366	bd 01 03	lda $0301,x	                lda $0301,x
3901	.d369	10 05		bpl $d370	                bpl LD370
3902	.d36b	46 da		lsr $da		                lsr $DA
3903	.d36d	20 2e c9	jsr $c92e	                jsr negateAY
3904	.d370					LD370:
3905	.d370	cc 30 88	cpy $8830	                cpy L8830
3906	.d373	d0 be		bne $d333	                bne LD333
3907	.d375	cd 31 88	cmp $8831	                cmp L8831
3908	.d378	d0 b9		bne $d333	                bne LD333
3909	.d37a	a5 e1		lda $e1		                lda $E1
3910	.d37c	89 02		bit #$02	                bit #$02
3911	.d37e	f0 19		beq $d399	                beq LD399
3912	.d380	a0 30		ldy #$30	                ldy #$30
3913	.d382	89 01		bit #$01	                bit #$01
3914	.d384	f0 02		beq $d388	                beq LD388
3915	.d386	a4 dc		ldy $dc		                ldy $DC
3916	.d388					LD388:
3917	.d388	98		tya		                tya
3918	.d389	4a		lsr a		                lsr a
3919	.d38a	4a		lsr a		                lsr a
3920	.d38b	24 e1		bit $e1		                bit $E1
3921	.d38d	d0 06		bne $d395	                bne LD395
3922	.d38f	05 dc		ora $dc		                ora $DC
3923	.d391	04 e1		tsb $e1		                tsb $E1
3924	.d393	80 04		bra $d399	                bra LD399

3926	.d395					LD395:
3927	.d395	05 dd		ora $dd		                ora $DD
3928	.d397	14 e1		trb $e1		                trb $E1
3929	.d399					LD399:
3930	.d399	a5 da		lda $da		                lda $DA
3931	.d39b	24 e1		bit $e1		                bit $E1
3932	.d39d	f0 91		beq $d330	                beq LD330
3933	.d39f	14 e1		trb $e1		                trb $E1
3934	.d3a1	a5 e1		lda $e1		                lda $E1
3935	.d3a3	8d 48 88	sta $8848	                sta L8848
3936	.d3a6	8d 49 88	sta $8849	                sta L8849
3937	.d3a9	60		rts		                rts

3939	.d3aa					LD3AA:
3940	.d3aa	ad 2e 03	lda $032e	                lda $032E
3941	.d3ad	8d 32 88	sta $8832	                sta L8832
3942	.d3b0	ad 2f 03	lda $032f	                lda $032F
3943	.d3b3	8d 33 88	sta $8833	                sta L8833
3944	.d3b6	20 fc d3	jsr $d3fc	                jsr LD3FC
3945	.d3b9	20 13 d5	jsr $d513	                jsr LD513
3946	.d3bc	8c 30 88	sty $8830	                sty L8830
3947	.d3bf	ad 46 88	lda $8846	                lda L8846
3948	.d3c2	4a		lsr a		                lsr a
3949	.d3c3	ad 3d 88	lda $883d	                lda L883D
3950	.d3c6	90 06		bcc $d3ce	                bcc LD3CE
3951	.d3c8	c9 80		cmp #$80	                cmp #$80
3952	.d3ca	6a		ror a		                ror a
3953	.d3cb	6e 30 88	ror $8830	                ror L8830
3954	.d3ce					LD3CE:
3955	.d3ce	8d 31 88	sta $8831	                sta L8831
3956	.d3d1	60		rts		                rts

3958	.d3d2					LD3D2:
3959	.d3d2	9c 47 88	stz $8847	                stz L8847
3960	.d3d5	9c 30 88	stz $8830	                stz L8830
3961	.d3d8	9c 31 88	stz $8831	                stz L8831
3962	.d3db	9c 34 88	stz $8834	                stz L8834
3963	.d3de	9c 35 88	stz $8835	                stz L8835
3964	.d3e1	ad 32 88	lda $8832	                lda L8832
3965	.d3e4	0a		asl a		                asl a
3966	.d3e5	8d 36 88	sta $8836	                sta L8836
3967	.d3e8	ad 33 88	lda $8833	                lda L8833
3968	.d3eb	2a		rol a		                rol a
3969	.d3ec	8d 37 88	sta $8837	                sta L8837
3970	.d3ef	ad 46 88	lda $8846	                lda L8846
3971	.d3f2	89 02		bit #$02	                bit #$02
3972	.d3f4	f0 06		beq $d3fc	                beq LD3FC
3973	.d3f6	0e 36 88	asl $8836	                asl L8836
3974	.d3f9	2e 37 88	rol $8837	                rol L8837
3975	.d3fc					LD3FC:
3976	.d3fc	ad 46 88	lda $8846	                lda L8846
3977	.d3ff	4a		lsr a		                lsr a
3978	.d400	4a		lsr a		                lsr a
3979	.d401	ac 32 88	ldy $8832	                ldy L8832
3980	.d404	ad 33 88	lda $8833	                lda L8833
3981	.d407	20 c5 d4	jsr $d4c5	                jsr LD4C5
3982	.d40a	38		sec		                sec
3983	.d40b	a2 fc		ldx #$fc	                ldx #$FC
3984	.d40d					LD40D:
3985	.d40d	bd 3c 87	lda $873c,x	                lda L873C,x
3986	.d410	fd 44 87	sbc $8744,x	                sbc L8744,x
3987	.d413	9d 44 87	sta $8744,x	                sta L8744,x
3988	.d416	e8		inx		                inx
3989	.d417	d0 f4		bne $d40d	                bne LD40D
3990	.d419	60		rts		                rts

3992	.d41a					LD41A:
3993	.d41a	20 1a c9	jsr $c91a	                jsr copyGraphicsCursorPixelsToOldGraphicsCursorPixels
3994	.d41d	64 e1		stz $e1		                stz $E1
3995	.d41f	a2 20		ldx #$20	                ldx #$20
3996	.d421	20 27 d4	jsr $d427	                jsr LD427
3997	.d424	60		rts		                rts

3999	.d425					LD425:
4000	.d425	a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX
4001	.d427					LD427:
4002	.d427	a0 1b		ldy #$1b	                ldy #VDUVariables.queueEnd-9
4003	.d429	20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
4004	.d42c	a2 1b		ldx #$1b	                ldx #$1B
4005	.d42e	20 68 d2	jsr $d268	                jsr LD268
4006	.d431	20 86 d4	jsr $d486	                jsr LD486
4007	.d434	20 13 d5	jsr $d513	                jsr LD513
4008	.d437	a0 0c		ldy #$0c	                ldy #$0C
4009	.d439	20 ab d4	jsr $d4ab	                jsr LD4AB
4010	.d43c	20 13 d5	jsr $d513	                jsr LD513
4011	.d43f	c9 20		cmp #$20	                cmp #$20
4012	.d441	90 05		bcc $d448	                bcc LD448
4013	.d443	68		pla		                pla
4014	.d444	68		pla		                pla
4015	.d445	68		pla		                pla
4016	.d446	68		pla		                pla
4017	.d447	60		rts		                rts

4019	.d448					LD448:
4020	.d448	8c 44 88	sty $8844	                sty L8844
4021	.d44b	8d 45 88	sta $8845	                sta L8845
4022	.d44e	ad 46 88	lda $8846	                lda L8846
4023	.d451	89 02		bit #$02	                bit #$02
4024	.d453	f0 06		beq $d45b	                beq LD45B
4025	.d455	4e 45 88	lsr $8845	                lsr L8845
4026	.d458	6e 44 88	ror $8844	                ror L8844
4027	.d45b					LD45B:
4028	.d45b	ac 44 88	ldy $8844	                ldy L8844
4029	.d45e	ad 45 88	lda $8845	                lda L8845
4030	.d461	20 2e c9	jsr $c92e	                jsr negateAY
4031	.d464	8c 32 88	sty $8832	                sty L8832
4032	.d467	8d 33 88	sta $8833	                sta L8833
4033	.d46a	0d 32 88	ora $8832	                ora L8832
4034	.d46d	38		sec		                sec
4035	.d46e	60		rts		                rts

4037	.d46f					LD46F:
4038	.d46f	64 da		stz $da		                stz $DA
4039	.d471	b9 1b 03	lda $031b,y	                lda $031B,y
4040	.d474	d9 28 03	cmp $0328,y	                cmp $0328,y
4041	.d477	f0 02		beq $d47b	                beq LD47B
4042	.d479	e6 da		inc $da		                inc $DA
4043	.d47b					LD47B:
4044	.d47b	b9 1c 03	lda $031c,y	                lda $031C,y
4045	.d47e	f9 29 03	sbc $0329,y	                sbc $0329,y
4046	.d481	d0 02		bne $d485	                bne LD485
4047	.d483	a5 da		lda $da		                lda $DA
4048	.d485					LD485:
4049	.d485	60		rts		                rts

4051	.d486					LD486:
4052	.d486	ae 55 03	ldx $0355	                ldx $0355
4053	.d489	bd bf d4	lda $d4bf,x	                lda LD4BF,x
4054	.d48c	8d 46 88	sta $8846	                sta L8846
4055	.d48f	4a		lsr a		                lsr a
4056	.d490	48		pha		                pha
4057	.d491	a2 04		ldx #$04	                ldx #$04
4058	.d493					LD493:
4059	.d493	9e 37 88	stz $8837,x	                stz L8837,x
4060	.d496	ca		dex		                dex
4061	.d497	d0 fa		bne $d493	                bne LD493
4062	.d499	20 a0 d4	jsr $d4a0	                jsr LD4A0
4063	.d49c	68		pla		                pla
4064	.d49d	4a		lsr a		                lsr a
4065	.d49e	a2 02		ldx #$02	                ldx #$02
4066	.d4a0					LD4A0:
4067	.d4a0	bc 1b 03	ldy $031b,x	                ldy $031B,x
4068	.d4a3	bd 1c 03	lda $031c,x	                lda $031C,x
4069	.d4a6	20 c5 d4	jsr $d4c5	                jsr LD4C5
4070	.d4a9	a0 10		ldy #$10	                ldy #$10
4071	.d4ab					LD4AB:
4072	.d4ab	18		clc		                clc
4073	.d4ac	a2 fc		ldx #$fc	                ldx #$FC
4074	.d4ae					LD4AE:
4075	.d4ae	bd 3c 87	lda $873c,x	                lda L873C,x
4076	.d4b1	79 30 88	adc $8830,y	                adc L8830,y
4077	.d4b4	9d 3c 87	sta $873c,x	                sta L873C,x
4078	.d4b7	9d 44 87	sta $8744,x	                sta L8744,x
4079	.d4ba	c8		iny		                iny
4080	.d4bb	e8		inx		                inx
4081	.d4bc	d0 f0		bne $d4ae	                bne LD4AE
4082	.d4be	60		rts		                rts

4084	.d4bf					LD4BF:
4085	>d4bf	02				                .byte $02
4086	.d4c0	00		brk #		                brk
4087	.d4c1	01 ff		ora ($ff,x)	                ora ($FF,x)
4088	.d4c3	00		brk #		                brk
4089						;ORA (&8C,x)      :\ D4C4= 01       ..
4090	>d4c4	01				                .byte $01
4091	.d4c5					LD4C5:
4092	.d4c5	8c 3c 88	sty $883c	                sty L883C
4093	.d4c8	90 04		bcc $d4ce	                bcc LD4CE
4094	.d4ca	0e 3c 88	asl $883c	                asl L883C
4095	.d4cd	2a		rol a		                rol a
4096	.d4ce					LD4CE:
4097	.d4ce	8d 3d 88	sta $883d	                sta L883D
4098	.d4d1	ac 3c 88	ldy $883c	                ldy L883C
4099	.d4d4	aa		tax		                tax
4100	.d4d5	10 03		bpl $d4da	                bpl LD4DA
4101	.d4d7	20 2e c9	jsr $c92e	                jsr negateAY
4102	.d4da					LD4DA:
4103	.d4da	8c 3c 88	sty $883c	                sty L883C
4104	.d4dd	8d 3d 88	sta $883d	                sta L883D
4105	.d4e0	8c 40 88	sty $8840	                sty L8840
4106	.d4e3	9c 42 88	stz $8842	                stz L8842
4107	.d4e6	9c 43 88	stz $8843	                stz L8843
4108	.d4e9	a0 0f		ldy #$0f	                ldy #$0F
4109	.d4eb	4a		lsr a		                lsr a
4110	.d4ec	8d 41 88	sta $8841	                sta L8841
4111	.d4ef	6e 40 88	ror $8840	                ror L8840
4112	.d4f2					LD4F2:
4113	.d4f2	90 13		bcc $d507	                bcc LD507
4114	.d4f4	18		clc		                clc
4115	.d4f5	ad 3c 88	lda $883c	                lda L883C
4116	.d4f8	6d 42 88	adc $8842	                adc L8842
4117	.d4fb	8d 42 88	sta $8842	                sta L8842
4118	.d4fe	ad 3d 88	lda $883d	                lda L883D
4119	.d501	6d 43 88	adc $8843	                adc L8843
4120	.d504	8d 43 88	sta $8843	                sta L8843
4121	.d507					LD507:
4122	.d507	a2 03		ldx #$03	                ldx #$03
4123	.d509					LD509:
4124	.d509	7e 40 88	ror $8840,x	                ror L8840,x
4125	.d50c	ca		dex		                dex
4126	.d50d	10 fa		bpl $d509	                bpl LD509
4127	.d50f	88		dey		                dey
4128	.d510	10 e0		bpl $d4f2	                bpl LD4F2
4129	.d512	60		rts		                rts

4131	.d513					LD513:
4132	.d513	a2 02		ldx #$02	                ldx #$02
4133	.d515					LD515:
4134	.d515	9e 3c 88	stz $883c,x	                stz L883C,x
4135	.d518	74 db		stz $db,x	                stz $DB,x
4136	.d51a	ca		dex		                dex
4137	.d51b	10 f8		bpl $d515	                bpl LD515
4138	.d51d	a0 03		ldy #$03	                ldy #$03
4139	.d51f					LD51F:
4140	.d51f	b9 40 88	lda $8840,y	                lda L8840,y
4141	.d522	85 da		sta $da		                sta $DA
4142	.d524	5a		phy		                phy
4143	.d525	a0 03		ldy #$03	                ldy #$03
4144	.d527					LD527:
4145	.d527	5a		phy		                phy
4146	.d528	38		sec		                sec
4147	.d529	2e 3c 88	rol $883c	                rol L883C
4148	.d52c	2e 3d 88	rol $883d	                rol L883D
4149	.d52f	2e 3e 88	rol $883e	                rol L883E
4150	.d532	a2 01		ldx #$01	                ldx #$01
4151	.d534	a5 db		lda $db		                lda $DB
4152	.d536					LD536:
4153	.d536	06 da		asl $da		                asl $DA
4154	.d538	2a		rol a		                rol a
4155	.d539	26 dc		rol $dc		                rol $DC
4156	.d53b	26 dd		rol $dd		                rol $DD
4157	.d53d	ca		dex		                dex
4158	.d53e	10 f6		bpl $d536	                bpl LD536
4159	.d540	85 db		sta $db		                sta $DB
4160	.d542	38		sec		                sec
4161	.d543	ed 3c 88	sbc $883c	                sbc L883C
4162	.d546	aa		tax		                tax
4163	.d547	a5 dc		lda $dc		                lda $DC
4164	.d549	ed 3d 88	sbc $883d	                sbc L883D
4165	.d54c	a8		tay		                tay
4166	.d54d	a5 dd		lda $dd		                lda $DD
4167	.d54f	ed 3e 88	sbc $883e	                sbc L883E
4168	.d552	90 0b		bcc $d55f	                bcc LD55F
4169	.d554	85 dd		sta $dd		                sta $DD
4170	.d556	84 dc		sty $dc		                sty $DC
4171	.d558	86 db		stx $db		                stx $DB
4172	.d55a	ee 3c 88	inc $883c	                inc L883C
4173	.d55d	80 03		bra $d562	                bra LD562

4175	.d55f					LD55F:
4176	.d55f	ce 3c 88	dec $883c	                dec L883C
4177	.d562					LD562:
4178	.d562	7a		ply		                ply
4179	.d563	88		dey		                dey
4180	.d564	10 c1		bpl $d527	                bpl LD527
4181	.d566	7a		ply		                ply
4182	.d567	88		dey		                dey
4183	.d568	10 b5		bpl $d51f	                bpl LD51F
4184	.d56a	4e 3e 88	lsr $883e	                lsr L883E
4185	.d56d	6e 3d 88	ror $883d	                ror L883D
4186	.d570	6e 3c 88	ror $883c	                ror L883C
4187	.d573	9c 3e 88	stz $883e	                stz L883E
4188	.d576	9c 3f 88	stz $883f	                stz L883F
4189	.d579	ac 3c 88	ldy $883c	                ldy L883C
4190	.d57c	ad 3d 88	lda $883d	                lda L883D
4191	.d57f	60		rts		                rts

4193						;-------------------------------------------------------------------------
4194						;
4195						; Add dimension of region to a coordinate.
4196						;
4197						; entry:
4198						;
4199						; X = VDU variable offset of coordinate
4200						;
4201						; A = VDU variable offset of minimum coordinate of region
4202						;
4203						; Y = VDU variable offset of maximum coordinate of region
4204						;
4205						; ZTEMP?0 = VDU variable offset for result
4206						;
4207						; exit:
4208						;
4209						; result variable = coordinate+(min-max)
4210						;
4211	.d580					addRegionDimensionsToVDUVariableCoordinates:
4212	.d580	20 8d d5	jsr $d58d	                jsr addRegionDimensionToVDUVariableCoordinate ;do X

4214						                ; bump offsets to do Y.
4215	.d583	c8		iny		                iny
4216	.d584	c8		iny		                iny
4217	.d585	e8		inx		                inx
4218	.d586	e8		inx		                inx
4219	.d587	1a		inc a		                inc a
4220	.d588	1a		inc a		                inc a
4221	.d589	e6 da		inc $da		                inc ZTEMP+0
4222	.d58b	e6 da		inc $da		                inc ZTEMP+0

4224						                ; TODO - not a great name. Could probably just be
4225						                ; addDifference, or something.
4226	.d58d					addRegionDimensionToVDUVariableCoordinate:
4227	.d58d	da		phx		                phx                          ;save VX
4228	.d58e	5a		phy		                phy                          ;save VY
4229	.d58f	48		pha		                pha                          ;save VA
4230	.d590	18		clc		                clc
4231	.d591	bd 00 03	lda $0300,x	                lda vduv+0,x                 ;<VX
4232	.d594	79 00 03	adc $0300,y	                adc vduv+0,y                 ;<(VX+VY)
4233	.d597	85 de		sta $de		                sta ZTEMPC+0                 ;ZTEMPC?0=<(VX+VY)
4234	.d599	bd 01 03	lda $0301,x	                lda vduv+1,x                 ;>VX
4235	.d59c	79 01 03	adc $0301,y	                adc vduv+1,y                 ;>(VX+VY)
4236	.d59f	fa		plx		                plx                          ;X=VA
4237	.d5a0	48		pha		                pha                          ;save >(VX+VY)
4238	.d5a1	a4 da		ldy $da		                ldy ZTEMP+0                  ;Y=VT
4239	.d5a3	38		sec		                sec
4240	.d5a4	a5 de		lda $de		                lda ZTEMPC+0                 ;<(VX+VY)
4241	.d5a6	fd 00 03	sbc $0300,x	                sbc vduv+0,x                 ;<(VX+VY-VA)
4242	.d5a9	99 00 03	sta $0300,y	                sta vduv+0,y                 ;<VT=<(VX+VY-VA)
4243	.d5ac	68		pla		                pla                          ;>(VX+VY)
4244	.d5ad	fd 01 03	sbc $0301,x	                sbc vduv+1,x                 ;>(VX+VY-VA)
4245	.d5b0	99 01 03	sta $0301,y	                sta vduv+1,y                 ;>VT=<(VX+VY-VA)
4246	.d5b3	8a		txa		                txa                          ;restore old A
4247	.d5b4	7a		ply		                ply                          ;restore old Y
4248	.d5b5	fa		plx		                plx                          ;restore old X
4249	.d5b6	60		rts		                rts

4251						;-------------------------------------------------------------------------
4252						;
4253						; Sort points by Y coordinate, then X.
4254						;
4255						; entry:
4256						;
4257						; X = VDU variable offset of point A (4 bytes: X;Y;)
4258						;
4259						; Y = VDU variable offset of point B (4 bytes: X;Y;)
4260						;
4261						; exit:
4262						;
4263						; X = offset of point with lesser Y (or lesser X, if same Y)
4264						;
4265						; Y = offset of point with greater Y (or greater X, if same Y)
4266						;
4267	.d5b7					sortVDUVariableCoordinates:
4268	.d5b7	38		sec		                sec
4269	.d5b8	b9 02 03	lda $0302,y	                lda vduv+2,y
4270	.d5bb	fd 02 03	sbc $0302,x	                sbc vduv+2,x
4271	.d5be	85 de		sta $de		                sta ZTEMPC
4272	.d5c0	b9 03 03	lda $0303,y	                lda vduv+3,y
4273	.d5c3	fd 03 03	sbc $0303,x	                sbc vduv+3,x
4274	.d5c6	30 09		bmi $d5d1	                bmi exchangeXAndY           ;taken if PX.y>PY.y
4275	.d5c8	05 de		ora $de		                ora ZTEMPC
4276	.d5ca	d0 09		bne $d5d5	                bne rtsD5D5                  ;taken if PX.y<PY.y

4278						;-------------------------------------------------------------------------
4279						;
4280						; Sort words by value.
4281						;
4282						; entry:
4283						;
4284						; X = VDU variable offset of word A
4285						;
4286						; Y = VDU variable offset of word B
4287						;
4288						; exit:
4289						;
4290						; X = offset of lesser value
4291						;
4292						; Y = offset of greater value
4293						;
4294	.d5cc					sortVDUVariableWords:
4295	.d5cc	20 d6 d5	jsr $d5d6	                jsr compareVDUVariableWords
4296	.d5cf	10 04		bpl $d5d5	                bpl rtsD5D5
4297	.d5d1					exchangeXAndY:
4298	.d5d1	8a		txa		                txa
4299	.d5d2	5a		phy		                phy
4300	.d5d3	fa		plx		                plx
4301	.d5d4	a8		tay		                tay
4302	.d5d5					rtsD5D5:
4303	.d5d5	60		rts		                rts

4305						;-------------------------------------------------------------------------
4306						;
4307						; Compare 2 16-bit VDU variable values.
4308						;
4309						; entry:
4310						;
4311						; X = offset of one variable
4312						;
4313						; Y = offset of the other variable
4314						;
4315						; exit:
4316						;
4317						; N=1 if X>Y
4318						;
4319	.d5d6					compareVDUVariableWords:
4320	.d5d6	b9 00 03	lda $0300,y	                lda vduv+0,y
4321	.d5d9	dd 00 03	cmp $0300,x	                cmp vduv+0,x
4322	.d5dc	b9 01 03	lda $0301,y	                lda vduv+1,y
4323	.d5df	fd 01 03	sbc $0301,x	                sbc vduv+1,x
4324	.d5e2	60		rts		                rts

4326						;-------------------------------------------------------------------------

4328	.d5e3					LD5E3:
4329	.d5e3	ee 47 88	inc $8847	                inc L8847
4330	.d5e6					LD5E6:
4331	.d5e6	ad 47 88	lda $8847	                lda L8847
4332	.d5e9	d0 0f		bne $d5fa	                bne LD5FA
4333	.d5eb	ad 32 88	lda $8832	                lda L8832
4334	.d5ee	0d 33 88	ora $8833	                ora L8833
4335	.d5f1	f0 f0		beq $d5e3	                beq LD5E3
4336	.d5f3	a2 00		ldx #$00	                ldx #$00
4337	.d5f5	20 44 d6	jsr $d644	                jsr LD644
4338	.d5f8	10 49		bpl $d643	                bpl LD643
4339	.d5fa					LD5FA:
4340	.d5fa	a2 02		ldx #$02	                ldx #$02
4341	.d5fc	20 44 d6	jsr $d644	                jsr LD644
4342	.d5ff	10 42		bpl $d643	                bpl LD643
4343	.d601	a2 00		ldx #$00	                ldx #$00
4344	.d603	20 0a d6	jsr $d60a	                jsr LD60A
4345	.d606	10 3b		bpl $d643	                bpl LD643
4346	.d608	a2 02		ldx #$02	                ldx #$02
4347	.d60a					LD60A:
4348	.d60a	bd 30 88	lda $8830,x	                lda L8830,x
4349	.d60d	d0 03		bne $d612	                bne LD612
4350	.d60f	de 31 88	dec $8831,x	                dec L8831,x
4351	.d612					LD612:
4352	.d612	de 30 88	dec $8830,x	                dec L8830,x
4353	.d615	8a		txa		                txa
4354	.d616	4a		lsr a		                lsr a
4355	.d617	1a		inc a		                inc a
4356	.d618	2c 46 88	bit $8846	                bit L8846
4357	.d61b	f0 03		beq $d620	                beq LD620
4358	.d61d	20 20 d6	jsr $d620	                jsr LD620
4359	.d620					LD620:
4360	.d620	20 36 d6	jsr $d636	                jsr LD636
4361	.d623	18		clc		                clc
4362	.d624	ad 40 88	lda $8840	                lda L8840
4363	.d627	7d 34 88	adc $8834,x	                adc L8834,x
4364	.d62a	8d 40 88	sta $8840	                sta L8840
4365	.d62d	ad 41 88	lda $8841	                lda L8841
4366	.d630	7d 35 88	adc $8835,x	                adc L8835,x
4367	.d633	8d 41 88	sta $8841	                sta L8841
4368	.d636					LD636:
4369	.d636	08		php		                php
4370	.d637	bd 34 88	lda $8834,x	                lda L8834,x
4371	.d63a	d0 03		bne $d63f	                bne LD63F
4372	.d63c	de 35 88	dec $8835,x	                dec L8835,x
4373	.d63f					LD63F:
4374	.d63f	de 34 88	dec $8834,x	                dec L8834,x
4375	.d642	28		plp		                plp
4376	.d643					LD643:
4377	.d643	60		rts		                rts

4379	.d644					LD644:
4380	.d644	fe 30 88	inc $8830,x	                inc L8830,x
4381	.d647	d0 03		bne $d64c	                bne LD64C
4382	.d649	fe 31 88	inc $8831,x	                inc L8831,x
4383	.d64c					LD64C:
4384	.d64c	8a		txa		                txa
4385	.d64d	4a		lsr a		                lsr a
4386	.d64e	1a		inc a		                inc a
4387	.d64f	2c 46 88	bit $8846	                bit L8846
4388	.d652	f0 03		beq $d657	                beq LD657
4389	.d654	20 57 d6	jsr $d657	                jsr LD657
4390	.d657					LD657:
4391	.d657	20 6d d6	jsr $d66d	                jsr LD66D
4392	.d65a	38		sec		                sec
4393	.d65b	ad 40 88	lda $8840	                lda L8840
4394	.d65e	fd 34 88	sbc $8834,x	                sbc L8834,x
4395	.d661	8d 40 88	sta $8840	                sta L8840
4396	.d664	ad 41 88	lda $8841	                lda L8841
4397	.d667	fd 35 88	sbc $8835,x	                sbc L8835,x
4398	.d66a	8d 41 88	sta $8841	                sta L8841
4399	.d66d					LD66D:
4400	.d66d	08		php		                php
4401	.d66e	fe 34 88	inc $8834,x	                inc L8834,x
4402	.d671	d0 03		bne $d676	                bne LD676
4403	.d673	fe 35 88	inc $8835,x	                inc L8835,x
4404	.d676					LD676:
4405	.d676	28		plp		                plp
4406	.d677	60		rts		                rts

4408	.d678					LD678:
4409	.d678	48		pha		                pha
4410	.d679	38		sec		                sec
4411	.d67a	b9 00 03	lda $0300,y	                lda $0300,y
4412	.d67d	fd 00 03	sbc $0300,x	                sbc $0300,x
4413	.d680	48		pha		                pha
4414	.d681	b9 01 03	lda $0301,y	                lda $0301,y
4415	.d684	fd 01 03	sbc $0301,x	                sbc $0301,x
4416	.d687	7a		ply		                ply
4417	.d688	c9 80		cmp #$80	                cmp #$80
4418	.d68a	90 03		bcc $d68f	                bcc LD68F
4419	.d68c	20 2e c9	jsr $c92e	                jsr negateAY
4420	.d68f					LD68F:
4421	.d68f	fa		plx		                plx
4422	.d690	9d 01 03	sta $0301,x	                sta $0301,x
4423	.d693	98		tya		                tya
4424	.d694	9d 00 03	sta $0300,x	                sta $0300,x
4425	.d697	60		rts		                rts

4427	.d698					LD698:
4428	.d698	a2 37		ldx #$37	                ldx #$37
4429	.d69a	20 23 d7	jsr $d723	                jsr LD723
4430	.d69d					LD69D:
4431	.d69d	3c 0a 03	bit $030a,x	                bit $030A,x
4432	.d6a0	70 10		bvs $d6b2	                bvs LD6B2
4433	.d6a2	60		rts		                rts

4435	.d6a3					LD6A3:
4436	.d6a3	a2 2c		ldx #$2c	                ldx #$2C
4437	.d6a5	20 23 d7	jsr $d723	                jsr LD723
4438	.d6a8					LD6A8:
4439	.d6a8	3c 0a 03	bit $030a,x	                bit $030A,x
4440	.d6ab	50 05		bvc $d6b2	                bvc LD6B2
4441	.d6ad	60		rts		                rts

4443	.d6ae					LD6AE:
4444	.d6ae	fa		plx		                plx
4445	.d6af	20 26 d7	jsr $d726	                jsr LD726
4446	.d6b2					LD6B2:
4447	.d6b2	bd 09 03	lda $0309,x	                lda $0309,x
4448	.d6b5	30 10		bmi $d6c7	                bmi LD6C7
4449	.d6b7	a0 03		ldy #$03	                ldy #$03
4450	.d6b9	da		phx		                phx
4451	.d6ba					LD6BA:
4452	.d6ba	bd 00 03	lda $0300,x	                lda $0300,x
4453	.d6bd	dd 1e 88	cmp $881e,x	                cmp L881E,x
4454	.d6c0	d0 ec		bne $d6ae	                bne LD6AE
4455	.d6c2	e8		inx		                inx
4456	.d6c3	88		dey		                dey
4457	.d6c4	10 f4		bpl $d6ba	                bpl LD6BA
4458	.d6c6	fa		plx		                plx
4459	.d6c7					LD6C7:
4460	.d6c7	60		rts		                rts

4462	.d6c8					LD6C8:
4463	.d6c8	20 fd d6	jsr $d6fd	                jsr LD6FD
4464	.d6cb	bd 0a 03	lda $030a,x	                lda $030A,x
4465	.d6ce	0a		asl a		                asl a
4466	.d6cf	0a		asl a		                asl a
4467	.d6d0	bd 0a 03	lda $030a,x	                lda $030A,x
4468	.d6d3	6a		ror a		                ror a
4469	.d6d4	85 da		sta $da		                sta $DA
4470	.d6d6	18		clc		                clc
4471	.d6d7	10 0f		bpl $d6e8	                bpl LD6E8
4472	.d6d9	bd 02 03	lda $0302,x	                lda $0302,x
4473	.d6dc	ed 04 03	sbc $0304	                sbc $0304
4474	.d6df	a8		tay		                tay
4475	.d6e0	bd 03 03	lda $0303,x	                lda $0303,x
4476	.d6e3	ed 05 03	sbc $0305	                sbc $0305
4477	.d6e6	80 0d		bra $d6f5	                bra LD6F5

4479	.d6e8					LD6E8:
4480	.d6e8	ad 00 03	lda $0300	                lda $0300
4481	.d6eb	fd 02 03	sbc $0302,x	                sbc $0302,x
4482	.d6ee	a8		tay		                tay
4483	.d6ef	ad 01 03	lda $0301	                lda $0301
4484	.d6f2	fd 03 03	sbc $0303,x	                sbc $0303,x
4485	.d6f5					LD6F5:
4486	.d6f5	20 a4 d7	jsr $d7a4	                jsr LD7A4
4487	.d6f8	20 fd d6	jsr $d6fd	                jsr LD6FD
4488	.d6fb	80 58		bra $d755	                bra LD755

4490	.d6fd					LD6FD:
4491	.d6fd	8a		txa		                txa
4492	.d6fe	1a		inc a		                inc a
4493	.d6ff	48		pha		                pha
4494	.d700	1a		inc a		                inc a
4495	.d701	a8		tay		                tay
4496	.d702	20 c2 e2	jsr $e2c2	                jsr exchangeTwoVDUBytes
4497	.d705	e8		inx		                inx
4498	.d706	e8		inx		                inx
4499	.d707	c8		iny		                iny
4500	.d708	c8		iny		                iny
4501	.d709	20 c2 e2	jsr $e2c2	                jsr exchangeTwoVDUBytes
4502	.d70c	fa		plx		                plx
4503	.d70d	20 11 d7	jsr $d711	                jsr LD711
4504	.d710	ca		dex		                dex
4505	.d711					LD711:
4506	.d711	bd 08 03	lda $0308,x	                lda $0308,x
4507	.d714	49 ff		eor #$ff	                eor #$FF
4508	.d716	9d 08 03	sta $0308,x	                sta $0308,x
4509	.d719	60		rts		                rts

4511	.d71a					LD71A:
4512	.d71a	20 26 d7	jsr $d726	                jsr LD726
4513	.d71d					LD71D:
4514	.d71d	bd 09 03	lda $0309,x	                lda $0309,x
4515	.d720	10 f8		bpl $d71a	                bpl LD71A
4516	.d722	60		rts		                rts

4518	.d723					LD723:
4519	.d723	20 1d d7	jsr $d71d	                jsr LD71D
4520	.d726					LD726:
4521	.d726	bd 09 03	lda $0309,x	                lda $0309,x
4522	.d729	10 2a		bpl $d755	                bpl LD755
4523	.d72b					LD72B:
4524	.d72b	18		clc		                clc
4525	.d72c	bd 08 03	lda $0308,x	                lda $0308,x
4526	.d72f	7d 04 03	adc $0304,x	                adc $0304,x
4527	.d732	9d 08 03	sta $0308,x	                sta $0308,x
4528	.d735	bd 09 03	lda $0309,x	                lda $0309,x
4529	.d738	7d 05 03	adc $0305,x	                adc $0305,x
4530	.d73b	9d 09 03	sta $0309,x	                sta $0309,x
4531	.d73e	30 03		bmi $d743	                bmi LD743
4532	.d740	20 55 d7	jsr $d755	                jsr LD755
4533	.d743					LD743:
4534	.d743	da		phx		                phx
4535	.d744	e8		inx		                inx
4536	.d745	e8		inx		                inx
4537	.d746	3c 08 03	bit $0308,x	                bit $0308,x
4538	.d749	30 23		bmi $d76e	                bmi LD76E
4539	.d74b					LD74B:
4540	.d74b	fe 00 03	inc $0300,x	                inc $0300,x
4541	.d74e	d0 03		bne $d753	                bne LD753
4542	.d750	fe 01 03	inc $0301,x	                inc $0301,x
4543	.d753					LD753:
4544	.d753	fa		plx		                plx
4545	.d754	60		rts		                rts

4547	.d755					LD755:
4548	.d755	38		sec		                sec
4549	.d756	bd 08 03	lda $0308,x	                lda $0308,x
4550	.d759	fd 06 03	sbc $0306,x	                sbc $0306,x
4551	.d75c	9d 08 03	sta $0308,x	                sta $0308,x
4552	.d75f	bd 09 03	lda $0309,x	                lda $0309,x
4553	.d762	fd 07 03	sbc $0307,x	                sbc $0307,x
4554	.d765	9d 09 03	sta $0309,x	                sta $0309,x
4555	.d768	da		phx		                phx
4556	.d769	3c 0a 03	bit $030a,x	                bit $030A,x
4557	.d76c	50 dd		bvc $d74b	                bvc LD74B
4558	.d76e					LD76E:
4559	.d76e	bd 00 03	lda $0300,x	                lda $0300,x
4560	.d771	d0 03		bne $d776	                bne LD776
4561	.d773	de 01 03	dec $0301,x	                dec $0301,x
4562	.d776					LD776:
4563	.d776	de 00 03	dec $0300,x	                dec $0300,x
4564	.d779	fa		plx		                plx
4565	.d77a	60		rts		                rts

4567	.d77b					LD77B:
4568	.d77b	18		clc		                clc
4569	.d77c	bd 0a 03	lda $030a,x	                lda $030A,x
4570	.d77f	85 da		sta $da		                sta $DA
4571	.d781	10 0f		bpl $d792	                bpl LD792
4572	.d783	bd 02 03	lda $0302,x	                lda $0302,x
4573	.d786	ed 06 03	sbc $0306	                sbc $0306
4574	.d789	a8		tay		                tay
4575	.d78a	bd 03 03	lda $0303,x	                lda $0303,x
4576	.d78d	ed 07 03	sbc $0307	                sbc $0307
4577	.d790	80 0d		bra $d79f	                bra LD79F

4579	.d792					LD792:
4580	.d792	ad 02 03	lda $0302	                lda $0302
4581	.d795	fd 02 03	sbc $0302,x	                sbc $0302,x
4582	.d798	a8		tay		                tay
4583	.d799	ad 03 03	lda $0303	                lda $0303
4584	.d79c	fd 03 03	sbc $0303,x	                sbc $0303,x
4585	.d79f					LD79F:
4586	.d79f	20 a4 d7	jsr $d7a4	                jsr LD7A4
4587	.d7a2	80 87		bra $d72b	                bra LD72B

4589	.d7a4					LD7A4:
4590	.d7a4	84 de		sty $de		                sty $DE
4591	.d7a6	85 df		sta $df		                sta $DF
4592	.d7a8	bd 02 03	lda $0302,x	                lda $0302,x
4593	.d7ab	bc 03 03	ldy $0303,x	                ldy $0303,x
4594	.d7ae	06 da		asl $da		                asl $DA
4595	.d7b0	b0 0a		bcs $d7bc	                bcs LD7BC
4596	.d7b2	65 de		adc $de		                adc $DE
4597	.d7b4	9d 02 03	sta $0302,x	                sta $0302,x
4598	.d7b7	98		tya		                tya
4599	.d7b8	65 df		adc $df		                adc $DF
4600	.d7ba	80 08		bra $d7c4	                bra LD7C4

4602	.d7bc					LD7BC:
4603	.d7bc	e5 de		sbc $de		                sbc $DE
4604	.d7be	9d 02 03	sta $0302,x	                sta $0302,x
4605	.d7c1	98		tya		                tya
4606	.d7c2	e5 df		sbc $df		                sbc $DF
4607	.d7c4					LD7C4:
4608	.d7c4	9d 03 03	sta $0303,x	                sta $0303,x
4609	.d7c7	a9 00		lda #$00	                lda #$00
4610	.d7c9	3c 09 03	bit $0309,x	                bit $0309,x
4611	.d7cc	10 01		bpl $d7cf	                bpl LD7CF
4612	.d7ce	3a		dec a		                dec a
4613	.d7cf					LD7CF:
4614	.d7cf	85 dc		sta $dc		                sta $DC
4615	.d7d1	4a		lsr a		                lsr a
4616	.d7d2	85 dd		sta $dd		                sta $DD
4617	.d7d4	a0 10		ldy #$10	                ldy #$10
4618	.d7d6					LD7D6:
4619	.d7d6	a5 dd		lda $dd		                lda $DD
4620	.d7d8	0a		asl a		                asl a
4621	.d7d9	3e 08 03	rol $0308,x	                rol $0308,x
4622	.d7dc	3e 09 03	rol $0309,x	                rol $0309,x
4623	.d7df	26 dc		rol $dc		                rol $DC
4624	.d7e1	26 dd		rol $dd		                rol $DD
4625	.d7e3	06 de		asl $de		                asl $DE
4626	.d7e5	26 df		rol $df		                rol $DF
4627	.d7e7	90 19		bcc $d802	                bcc LD802
4628	.d7e9	18		clc		                clc
4629	.d7ea	a5 dc		lda $dc		                lda $DC
4630	.d7ec	7d 04 03	adc $0304,x	                adc $0304,x
4631	.d7ef	85 dc		sta $dc		                sta $DC
4632	.d7f1	a5 dd		lda $dd		                lda $DD
4633	.d7f3	7d 05 03	adc $0305,x	                adc $0305,x
4634	.d7f6	85 dd		sta $dd		                sta $DD
4635	.d7f8	90 08		bcc $d802	                bcc LD802
4636	.d7fa	fe 08 03	inc $0308,x	                inc $0308,x
4637	.d7fd	d0 03		bne $d802	                bne LD802
4638	.d7ff	fe 09 03	inc $0309,x	                inc $0309,x
4639	.d802					LD802:
4640	.d802	88		dey		                dey
4641	.d803	d0 d1		bne $d7d6	                bne LD7D6
4642	.d805	3c 09 03	bit $0309,x	                bit $0309,x
4643	.d808	50 0b		bvc $d815	                bvc LD815
4644	.d80a	a5 dc		lda $dc		                lda $DC
4645	.d80c	9d 08 03	sta $0308,x	                sta $0308,x
4646	.d80f	a5 dd		lda $dd		                lda $DD
4647	.d811	9d 09 03	sta $0309,x	                sta $0309,x
4648	.d814	60		rts		                rts

4650	.d815					LD815:
4651	.d815	a0 10		ldy #$10	                ldy #$10
4652	.d817					LD817:
4653	.d817	26 dc		rol $dc		                rol $DC
4654	.d819	26 dd		rol $dd		                rol $DD
4655	.d81b	3e 08 03	rol $0308,x	                rol $0308,x
4656	.d81e	3e 09 03	rol $0309,x	                rol $0309,x
4657	.d821	38		sec		                sec
4658	.d822	bd 08 03	lda $0308,x	                lda $0308,x
4659	.d825	fd 06 03	sbc $0306,x	                sbc $0306,x
4660	.d828	85 de		sta $de		                sta $DE
4661	.d82a	bd 09 03	lda $0309,x	                lda $0309,x
4662	.d82d	fd 07 03	sbc $0307,x	                sbc $0307,x
4663	.d830	90 08		bcc $d83a	                bcc LD83A
4664	.d832	9d 09 03	sta $0309,x	                sta $0309,x
4665	.d835	a5 de		lda $de		                lda $DE
4666	.d837	9d 08 03	sta $0308,x	                sta $0308,x
4667	.d83a					LD83A:
4668	.d83a	88		dey		                dey
4669	.d83b	d0 da		bne $d817	                bne LD817
4670	.d83d	26 dc		rol $dc		                rol $DC
4671	.d83f	26 dd		rol $dd		                rol $DD
4672	.d841	38		sec		                sec
4673	.d842	bd 08 03	lda $0308,x	                lda $0308,x
4674	.d845	fd 06 03	sbc $0306,x	                sbc $0306,x
4675	.d848	9d 08 03	sta $0308,x	                sta $0308,x
4676	.d84b	bd 09 03	lda $0309,x	                lda $0309,x
4677	.d84e	fd 07 03	sbc $0307,x	                sbc $0307,x
4678	.d851	9d 09 03	sta $0309,x	                sta $0309,x
4679	.d854	bd 00 03	lda $0300,x	                lda $0300,x
4680	.d857	bc 01 03	ldy $0301,x	                ldy $0301,x
4681	.d85a	06 da		asl $da		                asl $DA
4682	.d85c	b0 0b		bcs $d869	                bcs LD869
4683	.d85e	38		sec		                sec
4684	.d85f	65 dc		adc $dc		                adc $DC
4685	.d861	9d 00 03	sta $0300,x	                sta $0300,x
4686	.d864	98		tya		                tya
4687	.d865	65 dd		adc $dd		                adc $DD
4688	.d867	80 09		bra $d872	                bra LD872

4690	.d869					LD869:
4691	.d869	18		clc		                clc
4692	.d86a	e5 dc		sbc $dc		                sbc $DC
4693	.d86c	9d 00 03	sta $0300,x	                sta $0300,x
4694	.d86f	98		tya		                tya
4695	.d870	e5 dd		sbc $dd		                sbc $DD
4696	.d872					LD872:
4697	.d872	9d 01 03	sta $0301,x	                sta $0301,x
4698	.d875					LD875:
4699	.d875	60		rts		                rts

4701	.d876					LD876:
4702	.d876	0e 32 03	asl $0332	                asl $0332
4703	.d879	a0 2c		ldy #$2c	                ldy #$2C
4704	.d87b	20 16 c9	jsr $c916	                jsr copyLastFourVDUQueueBytes
4705	.d87e	06 db		asl $db		                asl $DB
4706	.d880	90 0d		bcc $d88f	                bcc LD88F
4707	.d882	20 26 da	jsr $da26	                jsr LDA26
4708	.d885	f0 ee		beq $d875	                beq LD875
4709	.d887	a2 00		ldx #$00	                ldx #$00
4710	.d889	ad 32 03	lda $0332	                lda $0332
4711	.d88c	20 0f da	jsr $da0f	                jsr LDA0F
4712	.d88f					LD88F:
4713	.d88f	24 db		bit $db		                bit $DB
4714	.d891	50 0f		bvc $d8a2	                bvc LD8A2
4715	.d893	20 26 da	jsr $da26	                jsr LDA26
4716	.d896	f0 dd		beq $d875	                beq LD875
4717	.d898	a2 04		ldx #$04	                ldx #$04
4718	.d89a	ad 32 03	lda $0332	                lda $0332
4719	.d89d	49 80		eor #$80	                eor #$80
4720	.d89f	20 0f da	jsr $da0f	                jsr LDA0F
4721	.d8a2					LD8A2:
4722	.d8a2	a2 28		ldx #$28	                ldx #$28
4723	.d8a4	a0 2c		ldy #$2c	                ldy #$2C
4724	.d8a6	4c e8 da	jmp $dae8	                jmp LDAE8

4726	.d8a9					LD8A9:
4727	.d8a9	0a		asl a		                asl a
4728	.d8aa	0a		asl a		                asl a
4729	.d8ab	85 db		sta $db		                sta $DB
4730	.d8ad	29 c0		and #$c0	                and #$C0
4731	.d8af	49 40		eor #$40	                eor #$40
4732	.d8b1	d0 06		bne $d8b9	                bne LD8B9
4733	.d8b3	ad 67 03	lda $0367	                lda $0367
4734	.d8b6	8d 68 03	sta $0368	                sta $0368
4735	.d8b9					LD8B9:
4736	.d8b9	20 a6 d1	jsr $d1a6	                jsr LD1A6
4737	.d8bc	85 dc		sta $dc		                sta $DC
4738	.d8be	f0 04		beq $d8c4	                beq LD8C4
4739	.d8c0	a9 80		lda #$80	                lda #$80
4740	.d8c2	14 db		trb $db		                trb $DB
4741	.d8c4					LD8C4:
4742	.d8c4	a2 20		ldx #$20	                ldx #$20
4743	.d8c6	20 a8 d1	jsr $d1a8	                jsr windEntryPoint
4744	.d8c9	85 e0		sta $e0		                sta $E0
4745	.d8cb	f0 0a		beq $d8d7	                beq LD8D7
4746	.d8cd	aa		tax		                tax
4747	.d8ce	a9 20		lda #$20	                lda #$20
4748	.d8d0	14 db		trb $db		                trb $DB
4749	.d8d2	8a		txa		                txa
4750	.d8d3	24 dc		bit $dc		                bit $DC
4751	.d8d5					LD8D5:
4752	.d8d5	d0 9e		bne $d875	                bne LD875
4753	.d8d7					LD8D7:
4754	.d8d7	a0 24		ldy #$24	                ldy #$24
4755	.d8d9	a9 20		lda #$20	                lda #$20
4756	.d8db	a2 28		ldx #$28	                ldx #$28
4757	.d8dd	20 a9 9b	jsr $9ba9	                jsr L9B09
4758	.d8e0	24 db		bit $db		                bit $DB
4759	.d8e2	70 08		bvs $d8ec	                bvs LD8EC
4760	.d8e4	ad 2e 03	lda $032e	                lda $032E
4761	.d8e7	0d 2f 03	ora $032f	                ora $032F
4762	.d8ea	f0 8a		beq $d876	                beq LD876
4763	.d8ec					LD8EC:
4764	.d8ec	a5 dc		lda $dc		                lda $DC
4765	.d8ee	89 0c		bit #$0c	                bit #$0C
4766	.d8f0	f0 0e		beq $d900	                beq LD900
4767	.d8f2	a2 28		ldx #$28	                ldx #$28
4768	.d8f4	20 7b d7	jsr $d77b	                jsr LD77B
4769	.d8f7	a2 28		ldx #$28	                ldx #$28
4770	.d8f9	20 a8 d1	jsr $d1a8	                jsr windEntryPoint
4771	.d8fc	24 e0		bit $e0		                bit $E0
4772	.d8fe	d0 d5		bne $d8d5	                bne LD8D5
4773	.d900					LD900:
4774	.d900	89 03		bit #$03	                bit #$03
4775	.d902	f0 0a		beq $d90e	                beq LD90E
4776	.d904	a2 28		ldx #$28	                ldx #$28
4777	.d906	20 c8 d6	jsr $d6c8	                jsr LD6C8
4778	.d909	a2 28		ldx #$28	                ldx #$28
4779	.d90b	20 a8 d1	jsr $d1a8	                jsr windEntryPoint
4780	.d90e					LD90E:
4781	.d90e	a8		tay		                tay
4782	.d90f	d0 c4		bne $d8d5	                bne LD8D5
4783	.d911	a0 20		ldy #$20	                ldy #$20
4784	.d913	a2 22		ldx #$22	                ldx #$22
4785	.d915	a5 e0		lda $e0		                lda $E0
4786	.d917	f0 0f		beq $d928	                beq LD928
4787	.d919	a0 04		ldy #$04	                ldy #$04
4788	.d91b	a2 06		ldx #$06	                ldx #$06
4789	.d91d	2c 32 03	bit $0332	                bit $0332
4790	.d920	10 02		bpl $d924	                bpl LD924
4791	.d922	a2 02		ldx #$02	                ldx #$02
4792	.d924					LD924:
4793	.d924	50 02		bvc $d928	                bvc LD928
4794	.d926	a0 00		ldy #$00	                ldy #$00
4795	.d928					LD928:
4796	.d928	18		clc		                clc
4797	.d929	bd 00 03	lda $0300,x	                lda $0300,x
4798	.d92c	ed 2a 03	sbc $032a	                sbc $032A
4799	.d92f	90 03		bcc $d934	                bcc LD934
4800	.d931	1a		inc a		                inc a
4801	.d932	49 ff		eor #$ff	                eor #$FF
4802	.d934					LD934:
4803	.d934	85 dc		sta $dc		                sta $DC
4804	.d936	18		clc		                clc
4805	.d937	b9 00 03	lda $0300,y	                lda $0300,y
4806	.d93a	ed 28 03	sbc $0328	                sbc $0328
4807	.d93d	aa		tax		                tax
4808	.d93e	b9 01 03	lda $0301,y	                lda $0301,y
4809	.d941	ed 29 03	sbc $0329	                sbc $0329
4810	.d944	30 0c		bmi $d952	                bmi LD952
4811	.d946	e8		inx		                inx
4812	.d947	d0 01		bne $d94a	                bne LD94A
4813	.d949	1a		inc a		                inc a
4814	.d94a					LD94A:
4815	.d94a	49 ff		eor #$ff	                eor #$FF
4816	.d94c	a8		tay		                tay
4817	.d94d	8a		txa		                txa
4818	.d94e	49 ff		eor #$ff	                eor #$FF
4819	.d950	aa		tax		                tax
4820	.d951	98		tya		                tya
4821	.d952					LD952:
4822	.d952	85 dd		sta $dd		                sta $DD
4823	.d954	86 e0		stx $e0		                stx $E0
4824	.d956	a2 28		ldx #$28	                ldx #$28
4825	.d958	20 41 df	jsr $df41	                jsr LDF41
4826	.d95b	06 db		asl $db		                asl $DB
4827	.d95d	b0 2a		bcs $d989	                bcs LD989
4828	.d95f					LD95F:
4829	.d95f	24 db		bit $db		                bit $DB
4830	.d961	50 0b		bvc $d96e	                bvc LD96E
4831	.d963	a5 e0		lda $e0		                lda $E0
4832	.d965	25 dc		and $dc		                and $DC
4833	.d967	25 dd		and $dd		                and $DD
4834	.d969	1a		inc a		                inc a
4835	.d96a	f0 34		beq $d9a0	                beq LD9A0
4836	.d96c	24 db		bit $db		                bit $DB
4837	.d96e					LD96E:
4838	.d96e	10 09		bpl $d979	                bpl LD979
4839	.d970	ad 68 03	lda $0368	                lda $0368
4840	.d973	0a		asl a		                asl a
4841	.d974	2e 68 03	rol $0368	                rol $0368
4842	.d977	90 10		bcc $d989	                bcc LD989
4843	.d979					LD979:
4844	.d979	a5 d1		lda $d1		                lda ZMASK
4845	.d97b	25 d4		and $d4		                and ZGORA
4846	.d97d	11 d6		ora ($d6),y	                ora (ZMEMG),y
4847	.d97f	85 da		sta $da		                sta $DA
4848	.d981	a5 d1		lda $d1		                lda ZMASK
4849	.d983	25 d5		and $d5		                and ZGEOR
4850	.d985	45 da		eor $da		                eor $DA
4851	.d987	91 d6		sta ($d6),y	                sta (ZMEMG),y
4852	.d989					LD989:
4853	.d989	ad 31 03	lda $0331	                lda $0331
4854	.d98c	10 4e		bpl $d9dc	                bpl LD9DC
4855	.d98e	e6 dc		inc $dc		                inc $DC
4856	.d990	f0 0e		beq $d9a0	                beq LD9A0
4857	.d992	2c 32 03	bit $0332	                bit $0332
4858	.d995	30 0a		bmi $d9a1	                bmi LD9A1
4859	.d997	88		dey		                dey
4860	.d998	ca		dex		                dex
4861	.d999	10 24		bpl $d9bf	                bpl LD9BF
4862	.d99b	20 4c da	jsr $da4c	                jsr LDA4C
4863	.d99e	80 1f		bra $d9bf	                bra LD9BF

4865	.d9a0					LD9A0:
4866	.d9a0	60		rts		                rts

4868	.d9a1					LD9A1:
4869	.d9a1	c8		iny		                iny
4870	.d9a2	e8		inx		                inx
4871	.d9a3	e0 08		cpx #$08	                cpx #$08
4872	.d9a5	d0 18		bne $d9bf	                bne LD9BF
4873	.d9a7	38		sec		                sec
4874	.d9a8	98		tya		                tya
4875	.d9a9	e9 08		sbc #$08	                sbc #$08
4876	.d9ab	18		clc		                clc
4877	.d9ac	6d 52 03	adc $0352	                adc $0352
4878	.d9af	a8		tay		                tay
4879	.d9b0	a5 d7		lda $d7		                lda ZMEMG+1
4880	.d9b2	6d 53 03	adc $0353	                adc $0353
4881	.d9b5	10 04		bpl $d9bb	                bpl LD9BB
4882	.d9b7	38		sec		                sec
4883	.d9b8	ed 54 03	sbc $0354	                sbc $0354
4884	.d9bb					LD9BB:
4885	.d9bb	85 d7		sta $d7		                sta ZMEMG+1
4886	.d9bd	a2 00		ldx #$00	                ldx #$00
4887	.d9bf					LD9BF:
4888	.d9bf	ad 69 03	lda $0369	                lda $0369
4889	.d9c2	f0 03		beq $d9c7	                beq LD9C7
4890	.d9c4	20 7c da	jsr $da7c	                jsr setupColourMasks
4891	.d9c7					LD9C7:
4892	.d9c7	18		clc		                clc
4893	.d9c8	ad 30 03	lda $0330	                lda $0330
4894	.d9cb	6d 2c 03	adc $032c	                adc $032C
4895	.d9ce	8d 30 03	sta $0330	                sta $0330
4896	.d9d1	ad 31 03	lda $0331	                lda $0331
4897	.d9d4	6d 2d 03	adc $032d	                adc $032D
4898	.d9d7	8d 31 03	sta $0331	                sta $0331
4899	.d9da	30 83		bmi $d95f	                bmi LD95F
4900	.d9dc					LD9DC:
4901	.d9dc	e6 e0		inc $e0		                inc $E0
4902	.d9de	d0 04		bne $d9e4	                bne LD9E4
4903	.d9e0	e6 dd		inc $dd		                inc $DD
4904	.d9e2	f0 bc		beq $d9a0	                beq LD9A0
4905	.d9e4					LD9E4:
4906	.d9e4	2c 32 03	bit $0332	                bit $0332
4907	.d9e7	70 09		bvs $d9f2	                bvs LD9F2
4908	.d9e9	46 d1		lsr $d1		                lsr ZMASK
4909	.d9eb	90 0c		bcc $d9f9	                bcc LD9F9
4910	.d9ed	20 67 da	jsr $da67	                jsr nextColumnAndResetMask
4911	.d9f0	80 07		bra $d9f9	                bra LD9F9

4913	.d9f2					LD9F2:
4914	.d9f2	06 d1		asl $d1		                asl ZMASK
4915	.d9f4	90 03		bcc $d9f9	                bcc LD9F9
4916	.d9f6	20 34 da	jsr $da34	                jsr previousColumnAndResetMask
4917	.d9f9					LD9F9:
4918	.d9f9	38		sec		                sec
4919	.d9fa	ad 30 03	lda $0330	                lda $0330
4920	.d9fd	ed 2e 03	sbc $032e	                sbc $032E
4921	.da00	8d 30 03	sta $0330	                sta $0330
4922	.da03	ad 31 03	lda $0331	                lda $0331
4923	.da06	ed 2f 03	sbc $032f	                sbc $032F
4924	.da09	8d 31 03	sta $0331	                sta $0331
4925	.da0c	4c 5f d9	jmp $d95f	                jmp LD95F

4927	.da0f					LDA0F:
4928	.da0f	30 09		bmi $da1a	                bmi LDA1A
4929	.da11	fe 28 03	inc $0328,x	                inc $0328,x
4930	.da14	d0 0f		bne $da25	                bne LDA25
4931	.da16	fe 29 03	inc $0329,x	                inc $0329,x
4932	.da19	60		rts		                rts

4934	.da1a					LDA1A:
4935	.da1a	bd 28 03	lda $0328,x	                lda $0328,x
4936	.da1d	d0 03		bne $da22	                bne LDA22
4937	.da1f	de 29 03	dec $0329,x	                dec $0329,x
4938	.da22					LDA22:
4939	.da22	de 28 03	dec $0328,x	                dec $0328,x
4940	.da25					LDA25:
4941	.da25	60		rts		                rts

4943	.da26					LDA26:
4944	.da26	a0 04		ldy #$04	                ldy #$04
4945	.da28					LDA28:
4946	.da28	b9 27 03	lda $0327,y	                lda $0327,y
4947	.da2b	d9 2b 03	cmp $032b,y	                cmp $032B,y
4948	.da2e	d0 03		bne $da33	                bne LDA33
4949	.da30	88		dey		                dey
4950	.da31	d0 f5		bne $da28	                bne LDA28
4951	.da33					LDA33:
4952	.da33	60		rts		                rts

4954						;-------------------------------------------------------------------------

4956	.da34					previousColumnAndResetMask:
4957	.da34	ad 63 03	lda $0363	                lda vduv.colourMaskRight
4958	.da37	85 d1		sta $d1		                sta ZMASK
4959	.da39	98		tya		                tya
4960	.da3a	e9 08		sbc #$08	                sbc #$08
4961	.da3c	a8		tay		                tay
4962	.da3d	b0 0c		bcs $da4b	                bcs rtsDA4B
4963	.da3f	a5 d7		lda $d7		                lda ZMEMG+1
4964	.da41	3a		dec a		                dec a
4965	.da42	cd 4e 03	cmp $034e	                cmp vduv.startScreenAddressHighByte
4966	.da45	b0 02		bcs $da49	                bcs +
4967	.da47	a9 7f		lda #$7f	                lda #$7F
4968	.da49					+
4969	.da49	85 d7		sta $d7		                sta ZMEMG+1
4970	.da4b					rtsDA4B:
4971	.da4b	60		rts		                rts

4973						;-------------------------------------------------------------------------

4975	.da4c					LDA4C:
4976	.da4c	18		clc		                clc
4977	.da4d	98		tya		                tya
4978	.da4e	69 08		adc #$08	                adc #$08
4979	.da50	38		sec		                sec
4980	.da51	ed 52 03	sbc $0352	                sbc $0352
4981	.da54	a8		tay		                tay
4982	.da55	a5 d7		lda $d7		                lda ZMEMG+1
4983	.da57	ed 53 03	sbc $0353	                sbc $0353
4984	.da5a	cd 4e 03	cmp $034e	                cmp $034E
4985	.da5d	b0 03		bcs $da62	                bcs LDA62
4986	.da5f	6d 54 03	adc $0354	                adc $0354
4987	.da62					LDA62:
4988	.da62	85 d7		sta $d7		                sta ZMEMG+1
4989	.da64	a2 07		ldx #$07	                ldx #$07
4990	.da66	60		rts		                rts

4992						;-------------------------------------------------------------------------
4993						;
4994	.da67					nextColumnAndResetMask:
4995	.da67	ad 62 03	lda $0362	                lda vduv.colourMaskLeft
4996	.da6a	85 d1		sta $d1		                sta ZMASK

4998						;-------------------------------------------------------------------------
4999						;
5000						; Add 8 to (ZMEMG),Y, taking into account screen wrap.
5001						;
5002						; entry:
5003						;
5004						; C=1
5005						;
5006						; (ZMEMG),Y = screen address
5007						;
5008						; exit:
5009						;
5010						; (ZMEMG),Y = new screen address
5011						;
5012	.da6c					nextColumn:
5013	.da6c	98		tya		                tya
5014	.da6d	69 07		adc #$07	                adc #$07
5015	.da6f	a8		tay		                tay
5016	.da70	90 09		bcc $da7b	                bcc +
5017	.da72	e6 d7		inc $d7		                inc ZMEMG+1
5018	.da74	10 05		bpl $da7b	                bpl +
5019	.da76	ad 4e 03	lda $034e	                lda vduv.startScreenAddressHighByte
5020	.da79	85 d7		sta $d7		                sta ZMEMG+1
5021	.da7b					+
5022	.da7b	60		rts		                rts

5024						;-------------------------------------------------------------------------
5025						;
5026						; Set up colour masks, taking into account ECF pattern.
5027						;
5028						; entry:
5029						;
5030						; X = scanline in row, 0-7
5031						;
5032	.da7c					setupColourMasks:
5033	.da7c	da		phx		                phx                          ;save scanline
5034	.da7d	8a		txa		                txa                          ;A=scanline
5035	.da7e	0d 59 03	ora $0359	                ora vduv.graphicsPlotState   ;0-7 if fg, 8-15 if bg
5036	.da81	aa		tax		                tax
5037	.da82	bd 20 88	lda $8820,x	                lda andy.fgECFPattern,x      ;get appropriate ECF byte
5038	.da85	ae 5a 03	ldx $035a	                ldx vduv.graphicsPlotMode
5039	.da88	48		pha		                pha
5040	.da89	1d 54 e1	ora $e154,x	                ora zgoraORTable,x
5041	.da8c	5d 55 e1	eor $e155,x	                eor zgoraEORTable,x
5042	.da8f	85 d4		sta $d4		                sta ZGORA
5043	.da91	68		pla		                pla
5044	.da92	1d 53 e1	ora $e153,x	                ora zgeorORTable,x
5045	.da95	5d 58 e1	eor $e158,x	                eor zgeorEORTable,x
5046	.da98	85 d5		sta $d5		                sta ZGEOR
5047	.da9a	fa		plx		                plx
5048	.da9b	60		rts		                rts

5050						;-------------------------------------------------------------------------

5052	.da9c					LDA9C:
5053	.da9c	b9 01 03	lda $0301,y	                lda $0301,y
5054	.da9f	48		pha		                pha
5055	.daa0	b9 00 03	lda $0300,y	                lda $0300,y
5056	.daa3	48		pha		                pha
5057	.daa4	2d 61 03	and $0361	                and $0361
5058	.daa7	18		clc		                clc
5059	.daa8	6d 61 03	adc $0361	                adc $0361
5060	.daab	a8		tay		                tay
5061	.daac	b9 3e e1	lda $e13e,y	                lda pixelMasks-1,y
5062	.daaf	59 30 e1	eor $e130,y	                eor LE120,y
5063	.dab2	85 dc		sta $dc		                sta $DC
5064	.dab4	bd 00 03	lda $0300,x	                lda $0300,x
5065	.dab7	2d 61 03	and $0361	                and $0361
5066	.daba	6d 61 03	adc $0361	                adc $0361
5067	.dabd	a8		tay		                tay
5068	.dabe	b9 30 e1	lda $e130,y	                lda LE120,y
5069	.dac1	85 d1		sta $d1		                sta ZMASK
5070	.dac3	38		sec		                sec
5071	.dac4	68		pla		                pla
5072	.dac5	0d 61 03	ora $0361	                ora $0361
5073	.dac8	fd 00 03	sbc $0300,x	                sbc $0300,x
5074	.dacb	a8		tay		                tay
5075	.dacc	68		pla		                pla
5076	.dacd	fd 01 03	sbc $0301,x	                sbc $0301,x
5077	.dad0	85 dd		sta $dd		                sta $DD
5078	.dad2	98		tya		                tya
5079	.dad3	ac 61 03	ldy $0361	                ldy $0361
5080	.dad6	c0 03		cpy #$03	                cpy #$03
5081	.dad8	f0 05		beq $dadf	                beq LDADF
5082	.dada	90 06		bcc $dae2	                bcc LDAE2
5083	.dadc	46 dd		lsr $dd		                lsr $DD
5084	.dade	6a		ror a		                ror a
5085	.dadf					LDADF:
5086	.dadf	46 dd		lsr $dd		                lsr $DD
5087	.dae1	6a		ror a		                ror a
5088	.dae2					LDAE2:
5089	.dae2	4a		lsr a		                lsr a
5090	.dae3					LDAE3:
5091	.dae3	60		rts		                rts

5093	.dae4					LDAE4:                                       ; fillRow?
5094	.dae4	a2 42		ldx #$42	                ldx #$42
5095	.dae6	a0 46		ldy #$46	                ldy #$46
5096	.dae8					LDAE8:                                       ; fillRowInternal?
5097	.dae8	20 cc d5	jsr $d5cc	                jsr sortVDUVariableWords
5098	.daeb	86 de		stx $de		                stx $DE
5099	.daed	84 df		sty $df		                sty $DF
5100	.daef	a6 df		ldx $df		                ldx $DF
5101	.daf1	a0 00		ldy #$00	                ldy #$00
5102	.daf3	20 b7 d1	jsr $d1b7	                jsr getOutcodeForAxis
5103	.daf6	f0 07		beq $daff	                beq LDAFF
5104	.daf8	4a		lsr a		                lsr a
5105	.daf9	f0 e8		beq $dae3	                beq LDAE3
5106	.dafb	a2 04		ldx #$04	                ldx #$04
5107	.dafd	86 df		stx $df		                stx $DF
5108	.daff					LDAFF:
5109	.daff	a6 de		ldx $de		                ldx $DE
5110	.db01	20 a8 d1	jsr $d1a8	                jsr windEntryPoint
5111	.db04	4a		lsr a		                lsr a
5112	.db05	d0 dc		bne $dae3	                bne LDAE3
5113	.db07	bd 02 03	lda $0302,x	                lda $0302,x
5114	.db0a	90 04		bcc $db10	                bcc LDB10
5115	.db0c	a2 00		ldx #$00	                ldx #$00
5116	.db0e	86 de		stx $de		                stx $DE
5117	.db10					LDB10:
5118	.db10	20 cb de	jsr $decb	                jsr LDECB
5119	.db13	a6 de		ldx $de		                ldx $DE
5120	.db15	a4 df		ldy $df		                ldy $DF
5121	.db17	20 9c da	jsr $da9c	                jsr LDA9C
5122	.db1a	aa		tax		                tax
5123	.db1b	ac 1a 03	ldy $031a	                ldy $031A
5124	.db1e	8a		txa		                txa
5125	.db1f	f0 23		beq $db44	                beq LDB44
5126	.db21	20 51 db	jsr $db51	                jsr plbyteEntryPoint
5127	.db24	80 08		bra $db2e	                bra LDB2E

5129	.db26					LDB26:
5130	.db26	b1 d6		lda ($d6),y	                lda (ZMEMG),y
5131	.db28	05 d4		ora $d4		                ora ZGORA
5132	.db2a	45 d5		eor $d5		                eor ZGEOR
5133	.db2c	91 d6		sta ($d6),y	                sta (ZMEMG),y
5134	.db2e					LDB2E:
5135	.db2e	98		tya		                tya
5136	.db2f	18		clc		                clc
5137	.db30	69 08		adc #$08	                adc #$08
5138	.db32	a8		tay		                tay
5139	.db33	90 09		bcc $db3e	                bcc LDB3E
5140	.db35	e6 d7		inc $d7		                inc ZMEMG+1
5141	.db37	10 05		bpl $db3e	                bpl LDB3E
5142	.db39	ad 4e 03	lda $034e	                lda $034E
5143	.db3c	85 d7		sta $d7		                sta ZMEMG+1
5144	.db3e					LDB3E:
5145	.db3e	ca		dex		                dex
5146	.db3f	d0 e5		bne $db26	                bne LDB26
5147	.db41	ca		dex		                dex
5148	.db42	86 d1		stx $d1		                stx ZMASK
5149	.db44					LDB44:
5150	.db44	a5 dc		lda $dc		                lda $DC
5151	.db46	14 d1		trb $d1		                trb ZMASK
5152	.db48	80 07		bra $db51	                bra plbyteEntryPoint

5154						;-------------------------------------------------------------------------
5155						;
5156						; mem mask ora eor | result
5157						; --- ---- --- --- | ------
5158						;  0    0   0   0  |   0
5159						;  0    0   0   1  |   0
5160						;  0    0   1   0  |   0
5161						;  0    0   1   1  |   0
5162						;  0    1   0   0  |   0
5163						;  0    1   0   1  |   1
5164						;  0    1   1   0  |   1
5165						;  0    1   1   1  |   0
5166						;  1    0   0   0  |   1
5167						;  1    0   0   1  |   1
5168						;  1    0   1   0  |   1
5169						;  1    0   1   1  |   1
5170						;  1    1   0   0  |   1
5171						;  1    1   0   1  |   0
5172						;  1    1   1   0  |   1
5173						;  1    1   1   1  |   0
5174						;
5175	.db4a					plotPoint:
5176	.db4a	a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
5177	.db4c					plotPointInternal:
5178	.db4c	20 c3 de	jsr $dec3	                jsr windGADDR
5179	.db4f	d0 10		bne $db61	                bne rtsDB61                  ;taken if point outside window
5180	.db51					plbyteEntryPoint:
5181	.db51	a5 d1		lda $d1		                lda ZMASK
5182	.db53	25 d4		and $d4		                and ZGORA
5183	.db55	11 d6		ora ($d6),y	                ora (ZMEMG),y
5184	.db57	85 da		sta $da		                sta ZTEMP+0
5185	.db59	a5 d5		lda $d5		                lda ZGEOR
5186	.db5b	25 d1		and $d1		                and ZMASK
5187	.db5d	45 da		eor $da		                eor ZTEMP+0
5188	.db5f					oswrscCode:
5189	.db5f	91 d6		sta ($d6),y	                sta (ZMEMG),y
5190	.db61					rtsDB61:
5191	.db61	60		rts		                rts

5193						;-------------------------------------------------------------------------

5195	.db62					LDB62:
5196	.db62	a2 2a		ldx #$2a	                ldx #VDUVariables.workspace._2A
5197	.db64	a0 32		ldy #$32	                ldy #VDUVariables.workspace._32
5198	.db66	20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5199	.db69	a2 36		ldx #$36	                ldx #VDUVariables.workspace._36
5200	.db6b	a0 3e		ldy #$3e	                ldy #VDUVariables.workspace._3E
5201	.db6d	20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5202	.db70	a2 2a		ldx #$2a	                ldx #$2A
5203	.db72	20 b5 d1	jsr $d1b5	                jsr getOutcodeForYAxis
5204	.db75	48		pha		                pha
5205	.db76	a2 36		ldx #$36	                ldx #$36
5206	.db78	20 b5 d1	jsr $d1b5	                jsr getOutcodeForYAxis
5207	.db7b	f0 0f		beq $db8c	                beq LDB8C
5208	.db7d	68		pla		                pla
5209	.db7e	d0 05		bne $db85	                bne LDB85
5210	.db80	ad 45 03	lda $0345	                lda $0345
5211	.db83	f0 01		beq $db86	                beq LDB86
5212	.db85					LDB85:
5213	.db85	60		rts		                rts

5215	.db86					LDB86:
5216	.db86	a2 28		ldx #$28	                ldx #$28
5217	.db88	a0 2c		ldy #$2c	                ldy #$2C
5218	.db8a	80 07		bra $db93	                bra LDB93

5220	.db8c					LDB8C:
5221	.db8c	68		pla		                pla
5222	.db8d	f0 07		beq $db96	                beq LDB96
5223	.db8f	a2 34		ldx #$34	                ldx #$34
5224	.db91	a0 38		ldy #$38	                ldy #$38
5225	.db93					LDB93:
5226	.db93	4c e8 da	jmp $dae8	                jmp LDAE8

5228	.db96					LDB96:
5229	.db96	a2 30		ldx #$30	                ldx #$30
5230	.db98	20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
5231	.db9b	2c 47 03	bit $0347	                bit $0347
5232	.db9e	30 09		bmi $dba9	                bmi LDBA9
5233	.dba0	98		tya		                tya
5234	.dba1	38		sec		                sec
5235	.dba2	e9 08		sbc #$08	                sbc #$08
5236	.dba4	a8		tay		                tay
5237	.dba5	b0 02		bcs $dba9	                bcs LDBA9
5238	.dba7	c6 d7		dec $d7		                dec ZMEMG+1
5239	.dba9					LDBA9:
5240	.dba9	ad 44 03	lda $0344	                lda $0344
5241	.dbac	85 dd		sta $dd		                sta $DD
5242	.dbae					LDBAE:
5243	.dbae	b1 d6		lda ($d6),y	                lda (ZMEMG),y
5244	.dbb0	ae 42 03	ldx $0342	                ldx $0342
5245	.dbb3	f0 04		beq $dbb9	                beq LDBB9
5246	.dbb5					LDBB5:
5247	.dbb5	0a		asl a		                asl a
5248	.dbb6	ca		dex		                dex
5249	.dbb7	d0 fc		bne $dbb5	                bne LDBB5
5250	.dbb9					LDBB9:
5251	.dbb9	85 da		sta $da		                sta $DA
5252	.dbbb	38		sec		                sec
5253	.dbbc	20 6c da	jsr $da6c	                jsr nextColumn
5254	.dbbf	b1 d6		lda ($d6),y	                lda (ZMEMG),y
5255	.dbc1	ae 43 03	ldx $0343	                ldx $0343
5256	.dbc4	f0 04		beq $dbca	                beq LDBCA
5257	.dbc6					LDBC6:
5258	.dbc6	4a		lsr a		                lsr a
5259	.dbc7	ca		dex		                dex
5260	.dbc8	d0 fc		bne $dbc6	                bne LDBC6
5261	.dbca					LDBCA:
5262	.dbca	45 da		eor $da		                eor $DA
5263	.dbcc	25 e1		and $e1		                and $E1
5264	.dbce	45 da		eor $da		                eor $DA
5265	.dbd0	a6 dd		ldx $dd		                ldx $DD
5266	.dbd2	9d 30 88	sta $8830,x	                sta L8830,x
5267	.dbd5	c6 dd		dec $dd		                dec $DD
5268	.dbd7	10 d5		bpl $dbae	                bpl LDBAE
5269	.dbd9	a2 34		ldx #$34	                ldx #$34
5270	.dbdb	a0 38		ldy #$38	                ldy #$38
5271	.dbdd	20 e8 da	jsr $dae8	                jsr LDAE8
5272	.dbe0	ad 45 03	lda $0345	                lda $0345
5273	.dbe3	d0 03		bne $dbe8	                bne LDBE8
5274	.dbe5	20 86 db	jsr $db86	                jsr LDB86
5275	.dbe8					LDBE8:
5276	.dbe8	a2 3c		ldx #$3c	                ldx #$3C
5277	.dbea	20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
5278	.dbed	ad 46 03	lda $0346	                lda $0346
5279	.dbf0	85 da		sta $da		                sta $DA
5280	.dbf2	ae 44 03	ldx $0344	                ldx $0344
5281	.dbf5	f0 15		beq $dc0c	                beq LDC0C
5282	.dbf7	20 10 dc	jsr $dc10	                jsr LDC10
5283	.dbfa	a9 ff		lda #$ff	                lda #$FF
5284	.dbfc	85 da		sta $da		                sta $DA
5285	.dbfe	80 05		bra $dc05	                bra LDC05

5287	.dc00					LDC00_code:
5288	.dc00	bd 30 88	lda $8830,x	                lda L8830,x
5289	.dc03	91 d6		sta ($d6),y	                sta (ZMEMG),y
5290	.dc05					LDC05:
5291	.dc05	38		sec		                sec
5292	.dc06	20 6c da	jsr $da6c	                jsr nextColumn
5293	.dc09	ca		dex		                dex
5294	.dc0a	d0 f4		bne $dc00	                bne LDC00_code
5295	.dc0c					LDC0C:
5296	.dc0c	a5 e0		lda $e0		                lda $E0
5297	.dc0e	14 da		trb $da		                trb $DA
5298	.dc10					LDC10:
5299	.dc10	bd 30 88	lda $8830,x	                lda L8830,x
5300	.dc13	51 d6		eor ($d6),y	                eor (ZMEMG),y
5301	.dc15	25 da		and $da		                and $DA
5302	.dc17	51 d6		eor ($d6),y	                eor (ZMEMG),y
5303	.dc19	91 d6		sta ($d6),y	                sta (ZMEMG),y
5304	.dc1b	60		rts		                rts

5306	.dc1c					LDC1C:
5307	.dc1c	ad 37 03	lda $0337	                lda $0337
5308	.dc1f	1a		inc a		                inc a
5309	.dc20	cd 36 03	cmp $0336	                cmp $0336
5310	.dc23	f0 22		beq $dc47	                beq LDC47
5311	.dc25	8d 37 03	sta $0337	                sta $0337
5312	.dc28	aa		tax		                tax
5313	.dc29	ad 2e 03	lda $032e	                lda $032E
5314	.dc2c	9d 00 84	sta $8400,x	                sta L8400,x
5315	.dc2f	ad 32 03	lda $0332	                lda $0332
5316	.dc32	9d 00 85	sta $8500,x	                sta L8500,x
5317	.dc35	ad 2f 03	lda $032f	                lda $032F
5318	.dc38	0a		asl a		                asl a
5319	.dc39	0a		asl a		                asl a
5320	.dc3a	0d 33 03	ora $0333	                ora $0333
5321	.dc3d	9d 00 86	sta $8600,x	                sta L8600,x
5322	.dc40	ad 30 03	lda $0330	                lda $0330
5323	.dc43	9d 00 87	sta $8700,x	                sta L8700,x
5324	.dc46					LDC46:
5325	.dc46	18		clc		                clc
5326	.dc47					LDC47:
5327	.dc47	60		rts		                rts

5329	.dc48					LDC48:
5330	.dc48	8d 2a 03	sta $032a	                sta $032A
5331	.dc4b	a2 28		ldx #$28	                ldx #$28
5332	.dc4d	20 b0 dc	jsr $dcb0	                jsr LDCB0
5333	.dc50	d0 0a		bne $dc5c	                bne LDC5C
5334	.dc52					LDC52:
5335	.dc52	20 1c dc	jsr $dc1c	                jsr LDC1C
5336	.dc55	b0 f0		bcs $dc47	                bcs LDC47
5337	.dc57	20 f7 9d	jsr $9df7	                jsr L9D57
5338	.dc5a	b0 ea		bcs $dc46	                bcs LDC46
5339	.dc5c					LDC5C:
5340	.dc5c	20 c1 dc	jsr $dcc1	                jsr LDCC1
5341	.dc5f	20 f7 9d	jsr $9df7	                jsr L9D57
5342	.dc62	b0 e2		bcs $dc46	                bcs LDC46
5343	.dc64	20 d7 dc	jsr $dcd7	                jsr LDCD7
5344	.dc67	20 b8 dc	jsr $dcb8	                jsr LDCB8
5345	.dc6a	80 e6		bra $dc52	                bra LDC52

5347						;-------------------------------------------------------------------------
5348						;
5349						; 72-79 = Horizontal line fill (left and right to non-background) [MasRef E.3-24]
5350						; 88-95 = Horizontal line fill (right to background) [MasRef E.3-25]
5351						; 104-111 = Horizontal line fill (left and right to foreground) [MasRef E.3-26]
5352						; 120-127 = Horizontal line fill (right to non-foreground) [MasRef E.3-27]
5353						;
5354	.dc6c					plotHorizontalLineFill:
5355	.dc6c	20 9f dd	jsr $dd9f	                jsr copyECFPatternForLineFill
5356	.dc6f	20 b0 dc	jsr $dcb0	                jsr LDCB0
5357	.dc72	18		clc		                clc
5358	.dc73	80 0e		bra $dc83	                bra LDC83

5360	.dc75					plotHorizontalLineFillRight:
5361	.dc75	20 9f dd	jsr $dd9f	                jsr copyECFPatternForLineFill
5362	.dc78	20 c9 dc	jsr $dcc9	                jsr LDCC9
5363	.dc7b	20 d2 dc	jsr $dcd2	                jsr LDCD2
5364	.dc7e	d0 03		bne $dc83	                bne LDC83
5365	.dc80	20 b8 dc	jsr $dcb8	                jsr LDCB8
5366	.dc83					LDC83:
5367	.dc83	08		php		                php
5368	.dc84	a2 2e		ldx #$2e	                ldx #VDUVariables.hlfw.pixelsX
5369	.dc86	a0 14		ldy #$14	                ldy #VDUVariables.oldGraphicsCursorPixelsX
5370	.dc88	20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
5371	.dc8b	28		plp		                plp
5372	.dc8c	08		php		                php
5373	.dc8d	f0 02		beq $dc91	                beq LDC91
5374	.dc8f	a2 2e		ldx #$2e	                ldx #VDUVariables.hlfw.pixelsX
5375	.dc91					LDC91:
5376	.dc91	a0 24		ldy #$24	                ldy #VDUVariables.graphicsCursorPixelsX
5377	.dc93	20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5378	.dc96	a2 30		ldx #$30	                ldx #VDUVariables.hlfw.pixelsY
5379	.dc98	20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5380	.dc9b	28		plp		                plp
5381	.dc9c	f0 05		beq $dca3	                beq LDCA3
5382	.dc9e	b0 04		bcs $dca4	                bcs LDCA4
5383	.dca0	ee 16 03	inc $0316	                inc $0316
5384	.dca3					LDCA3:
5385	.dca3	60		rts		                rts

5387	.dca4					LDCA4:
5388	.dca4	ad 24 03	lda $0324	                lda $0324
5389	.dca7	d0 03		bne $dcac	                bne LDCAC
5390	.dca9	ce 25 03	dec $0325	                dec $0325
5391	.dcac					LDCAC:
5392	.dcac	ce 24 03	dec $0324	                dec $0324
5393	.dcaf	60		rts		                rts

5395						;-------------------------------------------------------------------------

5397	.dcb0					LDCB0:
5398	.dcb0	20 d2 dc	jsr $dcd2	                jsr LDCD2
5399	.dcb3	d0 55		bne $dd0a	                bne rtsDD0A
5400	.dcb5	20 0b dd	jsr $dd0b	                jsr LDD0B
5401	.dcb8					LDCB8:
5402	.dcb8	a2 2e		ldx #$2e	                ldx #$2E
5403	.dcba	a0 32		ldy #$32	                ldy #$32
5404	.dcbc	20 e8 da	jsr $dae8	                jsr LDAE8
5405	.dcbf	80 46		bra $dd07	                bra LDD07

5407	.dcc1					LDCC1:
5408	.dcc1	20 c9 dc	jsr $dcc9	                jsr LDCC9
5409	.dcc4	a2 2c		ldx #$2c	                ldx #$2C
5410	.dcc6	20 d9 dc	jsr $dcd9	                jsr LDCD9
5411	.dcc9					LDCC9:
5412	.dcc9	08		php		                php
5413	.dcca	a5 e1		lda $e1		                lda $E1
5414	.dccc	49 08		eor #$08	                eor #$08
5415	.dcce	85 e1		sta $e1		                sta $E1
5416	.dcd0	28		plp		                plp
5417	.dcd1	60		rts		                rts

5419						;-------------------------------------------------------------------------

5421	.dcd2					LDCD2:
5422	.dcd2	a0 2e		ldy #$2e	                ldy #VDUVariables.hlfw.pixelsX
5423	.dcd4	20 1e c9	jsr $c91e	                jsr copyFourBytesWithinVDUVariables
5424	.dcd7					LDCD7:
5425	.dcd7	a2 04		ldx #$04	                ldx #VDUVariables.graphicsWindowPixelsRight
5426	.dcd9					LDCD9:
5427	.dcd9	a0 34		ldy #$34	                ldy #VDUVariables.hlfw.pixelsLimitX
5428	.dcdb	20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables
5429	.dcde	a2 34		ldx #$34	                ldx #VDUVariables.hlfw.pixelsLimitX
5430	.dce0	20 35 dd	jsr $dd35	                jsr shouldFillPixel
5431	.dce3	d0 25		bne $dd0a	                bne rtsDD0A  ;taken if pixel not to be filled, so done
5432	.dce5					LDCE5:
5433	.dce5	46 d1		lsr $d1		                lsr ZMASK                    ;next pixel
5434	.dce7	90 08		bcc $dcf1	                bcc LDCF1                    ;taken if still in same byte
5435	.dce9					LDCE9:
5436	.dce9	20 67 da	jsr $da67	                jsr nextColumnAndResetMask
5437	.dcec	20 65 dd	jsr $dd65	                jsr shouldFillByte
5438	.dcef	b0 f8		bcs $dce9	                bcs LDCE9
5439	.dcf1					LDCF1:
5440	.dcf1	20 85 dd	jsr $dd85	                jsr LDD85
5441	.dcf4	b0 ef		bcs $dce5	                bcs LDCE5
5442	.dcf6	38		sec		                sec
5443	.dcf7	ad 34 03	lda $0334	                lda vduv.hlfw.pixelsLimitX+0
5444	.dcfa	e5 de		sbc $de		                sbc zhlfw.pixelsX+0
5445	.dcfc	8d 32 03	sta $0332	                sta vduv.hlfw.pixelsRightEndX+0
5446	.dcff	ad 35 03	lda $0335	                lda vduv.hlfw.pixelsLimitX+1
5447	.dd02	e5 df		sbc $df		                sbc zhlfw.pixelsX+1
5448	.dd04	8d 33 03	sta $0333	                sta vduv.hlfw.pixelsRightEndX+1
5449	.dd07					LDD07:
5450	.dd07	a9 00		lda #$00	                lda #$00
5451	.dd09	38		sec		                sec
5452	.dd0a					rtsDD0A:
5453	.dd0a	60		rts		                rts

5455	.dd0b					LDD0B:
5456	.dd0b	a2 00		ldx #$00	                ldx #VDUVariables.graphicsWindowPixelsLeft
5457	.dd0d	20 35 dd	jsr $dd35	                jsr shouldFillPixel
5458	.dd10	d0 f8		bne $dd0a	                bne rtsDD0A                    ;taken if pixel not to be filled, so done
5459	.dd12					LDD12:
5460	.dd12	06 d1		asl $d1		                asl ZMASK                      ;next pixel
5461	.dd14	90 08		bcc $dd1e	                bcc LDD1E                    ;taken if still in same byte
5462	.dd16					LDD16:
5463	.dd16	20 34 da	jsr $da34	                jsr previousColumnAndResetMask
5464	.dd19	20 65 dd	jsr $dd65	                jsr shouldFillByte
5465	.dd1c	b0 f8		bcs $dd16	                bcs LDD16
5466	.dd1e					LDD1E:
5467	.dd1e	20 85 dd	jsr $dd85	                jsr LDD85
5468	.dd21	b0 ef		bcs $dd12	                bcs LDD12
5469	.dd23	ad 00 03	lda $0300	                lda vduv.graphicsWindowPixelsLeft+0
5470	.dd26	65 de		adc $de		                adc zhlfw.pixelsX+0
5471	.dd28	8d 2e 03	sta $032e	                sta vduv.hlfw.pixelsX+0
5472	.dd2b	ad 01 03	lda $0301	                lda vduv.graphicsWindowPixelsLeft+1
5473	.dd2e	65 df		adc $df		                adc zhlfw.pixelsX+1
5474	.dd30	8d 2f 03	sta $032f	                sta vduv.hlfw.pixelsX+1
5475	.dd33	80 d2		bra $dd07	                bra LDD07

5477						;-------------------------------------------------------------------------
5478						;
5479						; Check whether line fill should fill a pixel.
5480						;
5481						; entry:
5482						;
5483						; X = VDU variable offset of edge of window
5484						;
5485						; vduv.workspace._2E - pixel X, Y coordinates
5486						;
5487						; exit:
5488						;
5489						; Z=1 if pixel should be filled
5490						;
5491						; ZTEMPC = ???
5492						;
5493	.dd35					shouldFillPixel:
5494	.dd35	38		sec		                sec
5495	.dd36	ad 2e 03	lda $032e	                lda vduv.workspace._2E+0
5496	.dd39	fd 00 03	sbc $0300,x	                sbc vduv+0,x
5497	.dd3c	a8		tay		                tay
5498	.dd3d	ad 2f 03	lda $032f	                lda vduv.workspace._2E+1
5499	.dd40	fd 01 03	sbc $0301,x	                sbc vduv+1,x
5500	.dd43	10 03		bpl $dd48	                bpl +
5501	.dd45	20 2e c9	jsr $c92e	                jsr negateAY
5502	.dd48					+
5503	.dd48	84 de		sty $de		                sty zhlfw.pixelsX+0
5504	.dd4a	85 df		sta $df		                sta zhlfw.pixelsX+1
5505	.dd4c	a2 2e		ldx #$2e	                ldx #VDUVariables.workspace._2E
5506	.dd4e	20 c3 de	jsr $dec3	                jsr windGADDR
5507	.dd51	18		clc		                clc
5508	.dd52	d0 10		bne $dd64	                bne rtsDD64                    ;taken if point outside window
5509	.dd54	b1 d6		lda ($d6),y	                lda (ZMEMG),y                  ;get screen byte
5510	.dd56	5d 30 88	eor $8830,x	                eor andy.hlfw.ecfPattern,x     ;EOR with appropriate pattern
5511	.dd59	85 da		sta $da		                sta zhlfw.notByteMatch ;0 if whole byte matches
5512	.dd5b	25 d1		and $d1		                and ZMASK                      ;0 if masked byte matches
5513	.dd5d	f0 02		beq $dd61	                beq +              ;taken if masked byte matches - A=0
5514	.dd5f	a9 08		lda #$08	                lda #$08              ;masked byte doesn't match - A=8
5515	.dd61					+
5516	.dd61	45 e1		eor $e1		                eor zhlfw.resultEOR ;maybe invert result
5517	.dd63	38		sec		                sec
5518	.dd64					rtsDD64:
5519	.dd64	60		rts		                rts

5521						;-------------------------------------------------------------------------

5523	.dd65					shouldFillByte:
5524	.dd65	b1 d6		lda ($d6),y	                lda (ZMEMG),y
5525	.dd67	5d 30 88	eor $8830,x	                eor andy.hlfw.ecfPattern,x
5526	.dd6a	85 da		sta $da		                sta zhlfw.notByteMatch
5527	.dd6c	05 e1		ora $e1		                ora zhlfw.resultEOR
5528	.dd6e	18		clc		                clc
5529	.dd6f	d0 13		bne $dd84	                bne rtsDD84
5530	.dd71	a5 de		lda $de		                lda zhlfw.pixelsX+0
5531	.dd73	ed 61 03	sbc $0361	                sbc vduv.pixelsPerByteMinusOne
5532	.dd76	48		pha		                pha
5533	.dd77	a5 df		lda $df		                lda zhlfw.pixelsX+1
5534	.dd79	e9 00		sbc #$00	                sbc #$00
5535	.dd7b	90 06		bcc $dd83	                bcc pla_rts_DD83             ;taken if past X=0
5536	.dd7d	85 df		sta $df		                sta zhlfw.pixelsX+1
5537	.dd7f	68		pla		                pla
5538	.dd80	85 de		sta $de		                sta zhlfw.pixelsX+0
5539	.dd82	60		rts		                rts

5541	.dd83					pla_rts_DD83:
5542	.dd83	68		pla		                pla
5543	.dd84					rtsDD84:
5544	.dd84	60		rts		                rts

5546						;-------------------------------------------------------------------------

5548	.dd85					LDD85:
5549	.dd85	a5 da		lda $da		                lda zhlfw.notByteMatch
5550	.dd87	25 d1		and $d1		                and ZMASK
5551	.dd89	f0 02		beq $dd8d	                beq +
5552	.dd8b	a9 08		lda #$08	                lda #$08
5553	.dd8d					+
5554	.dd8d	45 e1		eor $e1		                eor zhlfw.resultEOR
5555	.dd8f	d0 0d		bne $dd9e	                bne rtsDD9E

5557						                ; pixelsX -= 1
5558	.dd91	a5 de		lda $de		                lda zhlfw.pixelsX+0
5559	.dd93	d0 06		bne $dd9b	                bne +
5560	.dd95	a5 df		lda $df		                lda zhlfw.pixelsX+1
5561	.dd97	f0 05		beq $dd9e	                beq rtsDD9E
5562	.dd99	c6 df		dec $df		                dec zhlfw.pixelsX+1
5563	.dd9b					+
5564	.dd9b	c6 de		dec $de		                dec zhlfw.pixelsX+0
5565	.dd9d	38		sec		                sec
5566	.dd9e					rtsDD9E:
5567	.dd9e	60		rts		                rts

5569						;-------------------------------------------------------------------------
5570						;
5571						; Copy appropriate ECF pattern for line fill.
5572						;
5573						; entry:
5574						;
5575						; A = horizontal line fill PLOT code
5576						;
5577						; exit:
5578						;
5579						; andy.hlfw.ecfPattern = holds bg/fg ECF pattern as required
5580						;
5581						; ZTEMPD?1 = 0 for fill to matching, 8 to fill to non-matching
5582						;
5583	.dd9f					copyECFPatternForLineFill:
5584	.dd9f	4a		lsr a		                lsr a                        ;36-39; 44-47; 52-55; 60-63
5585	.dda0	4a		lsr a		                lsr a                        ;18-19; 42-43; 26-27; 30-31
5586	.dda1					LDDA1:
5587	.dda1	29 08		and #$08	                and #$08                     ;8 if PLOT >= 104
5588	.dda3	85 e1		sta $e1		                sta zhlfw.resultEOR
5589	.dda5	49 0f		eor #$0f	                eor #$0F                     ;
5590	.dda7	aa		tax		                tax
5591	.dda8	a0 07		ldy #$07	                ldy #$07
5592	.ddaa					-
5593	.ddaa	bd 20 88	lda $8820,x	                lda andy.currentECFPatterns,x
5594	.ddad	99 30 88	sta $8830,y	                sta andy.hlfw.ecfPattern,y
5595	.ddb0	ca		dex		                dex
5596	.ddb1	88		dey		                dey
5597	.ddb2	10 f6		bpl $ddaa	                bpl -
5598	.ddb4	a2 20		ldx #$20	                ldx #VDUVariables.queueEnd-4
5599	.ddb6	60		rts		                rts

5601						;-------------------------------------------------------------------------
5602						;
5603						;
5604						; entry:
5605						;
5606						; A = offset into VDU variables of coordinates
5607						;
5608						; exit:
5609						;
5610						; A = colour, or $ff if off screen/teletext (as per OSWORD $09)
5611						;
5612	.ddb7					readPixelColour: .proc
5613	.ddb7	20 fa c0	jsr $c0fa	                jsr stopCursorEditing
5614	.ddba	ae 61 03	ldx $0361	                ldx vduv.pixelsPerByteMinusOne
5615	.ddbd	f0 21		beq $dde0	                beq invalid             ;taken if teletext
5616	.ddbf	48		pha		                pha
5617	.ddc0	aa		tax		                tax
5618	.ddc1	20 de d1	jsr $d1de	                jsr eigabsEntryPoint
5619	.ddc4	fa		plx		                plx
5620	.ddc5	20 c3 de	jsr $dec3	                jsr windGADDR
5621	.ddc8	d0 16		bne $dde0	                bne invalid             ;taken if off screen
5622	.ddca	b1 d6		lda ($d6),y	                lda (ZMEMG),y
5623	.ddcc	64 da		stz $da		                stz ZTEMP+0
5624	.ddce	80 01		bra $ddd1	                bra shiftMask

5626						                ; Keep shifting the byte and the mask. When a 1 bit is
5627						                ; shifted out of the mask, shift the corresponding
5628						                ; byte bit bit into ZTEMP+0, building up the pixel
5629						                ; colour a bit at a time.
5630						                ;
5631						                ; When the mask becomes 0, done.
5632	.ddd0					shiftByteAndMask:
5633	.ddd0	0a		asl a		                asl a
5634	.ddd1					shiftMask:
5635	.ddd1	06 d1		asl $d1		                asl ZMASK
5636	.ddd3	90 fb		bcc $ddd0	                bcc shiftByteAndMask
5637	.ddd5	0a		asl a		                asl a
5638	.ddd6	26 da		rol $da		                rol ZTEMP+0
5639	.ddd8	a6 d1		ldx $d1		                ldx ZMASK
5640	.ddda	d0 f5		bne $ddd1	                bne shiftMask
5641	.dddc	a5 da		lda $da		                lda ZTEMP+0
5642	.ddde	80 02		bra $dde2	                bra done

5644	.dde0					invalid:
5645	.dde0	a9 ff		lda #$ff	                lda #$FF
5646	.dde2					done:
5647	.dde2	4c ca c0	jmp $c0ca	                jmp reinstateCursorEditing
5648						                .endproc

5650						;-------------------------------------------------------------------------
5651						;
5652						; Translate ASCII char to the SAA5050 character set.
5653						;
5654						; # ($23) becomes $5f
5655						; _ ($5f) becomes $60
5656						; GBP ($60) becomes $23
5657						;
5658						; Because the mapping is a kind of cycle, you can call this routine
5659						; twice to translate from SAA5050 to ASCII.
5660						;
5661						; entry:
5662						;
5663						; A = ASCII char
5664						;
5665						; exit:
5666						;
5667						; A = SAA550 char
5668						;
5669	.dde5					getSAA5050FromASCII:
5670	.dde5	c9 23		cmp #$23	                cmp #$23
5671	.dde7	f0 0a		beq $ddf3	                beq translateHash
5672	.dde9	c9 5f		cmp #$5f	                cmp #$5F
5673	.ddeb	f0 08		beq $ddf5	                beq translateUnderscore
5674	.dded	c9 60		cmp #$60	                cmp #$60
5675	.ddef	d0 06		bne $ddf7	                bne rtsDDF7
5676	.ddf1					translateGBP:
5677	.ddf1	49 3f		eor #$3f	                eor #$3F                     ;0x60->0x5f
5678	.ddf3					translateHash:
5679	.ddf3	49 43		eor #$43	                eor #$43                     ;0x23->0x5f or 0x5f->0x1c
5680	.ddf5					translateUnderscore:
5681	.ddf5	49 3f		eor #$3f	                eor #$3F                     ;0x5f->0x60 or 0x1c->0x23
5682	.ddf7					rtsDDF7:
5683	.ddf7	60		rts		                rts

5685						;-------------------------------------------------------------------------

5687	.ddf8					readCharacterAtTextCursor: .proc
5688	.ddf8	58		cli		                cli
5689	.ddf9	24 d0		bit $d0		                bit STATE
5690	.ddfb	50 06		bvc $de03	                bvc +                      ;taken if not cursor editing
5691	.ddfd	20 fa c0	jsr $c0fa	                jsr stopCursorEditing
5692	.de00	20 d1 c0	jsr $c0d1	                jsr exchangeCursors
5693	.de03					+
5694	.de03	ac 60 03	ldy $0360	                ldy vduv.numberOfLogicalColoursMinusOne
5695	.de06	d0 17		bne $de1f	                bne bitmapMode
5696	.de08					readTeletextChar:
5697	.de08	b2 d8		lda ($d8)	                lda (ZMEMT)                  ;read character from screen
5698	.de0a	20 e5 dd	jsr $dde5	                jsr getSAA5050FromASCII      ;call 2x to convert to ASCII
5699	.de0d	20 e5 dd	jsr $dde5	                jsr getSAA5050FromASCII      ;call 2x to convert to ASCII
5700	.de10					done:
5701	.de10	24 d0		bit $d0		                bit STATE
5702	.de12	50 06		bvc $de1a	                bvc +                     ;taken if not cursor editing
5703	.de14	20 d1 c0	jsr $c0d1	                jsr exchangeCursors
5704	.de17	20 ca c0	jsr $c0ca	                jsr reinstateCursorEditing
5705	.de1a					+
5706	.de1a	ac 55 03	ldy $0355	                ldy vduv.currentScreenMODE
5707	.de1d	aa		tax		                tax
5708	.de1e	60		rts		                rts

5710	.de1f					bitmapMode:
5711	.de1f	20 56 de	jsr $de56	                jsr LDE56
5712	.de22	a5 f4		lda $f4		                lda $F4
5713	.de24	48		pha		                pha
5714	.de25	20 98 e5	jsr $e598	                jsr selectTerminalROMAndANDY
5715	.de28	a9 20		lda #$20	                lda #$20
5716	.de2a	aa		tax		                tax                          ;X = ASCII code for char
5717	.de2b	20 3c e2	jsr $e23c	                jsr getSoftCharacterDefinitionAddress
5718	.de2e					compare:
5719	.de2e	a0 07		ldy #$07	                ldy #$07
5720	.de30					-
5721	.de30	b9 28 03	lda $0328,y	                lda vduv.workspace._28,y
5722	.de33	51 de		eor ($de),y	                eor (ZTEMPC),y
5723	.de35	d0 0a		bne $de41	                bne nextFontChar ;taken if no match - can't be this char
5724	.de37	88		dey		                dey
5725	.de38	10 f6		bpl $de30	                bpl -

5727	.de3a	8a		txa		                txa                          ;A = char found
5732	.de3b					bitmapModeDone:
5733	.de3b	fa		plx		                plx
5734	.de3c	20 9a e5	jsr $e59a	                jsr selectROMX
5735	.de3f	80 cf		bra $de10	                bra done

5737	.de41					nextFontChar:
5738	.de41	e8		inx		                inx                          ;next ASCII code
5746	.de42	18		clc		                clc
5747	.de43	a5 de		lda $de		                lda ZTEMPC+0
5748	.de45	69 08		adc #$08	                adc #$08                     ;8 bytes/font char
5749	.de47	85 de		sta $de		                sta ZTEMPC+0
5750	.de49	90 02		bcc $de4d	                bcc gotCharAddress
5751	.de4b	e6 df		inc $df		                inc ZTEMPC+1
5753	.de4d					gotCharAddress:
5754	.de4d	e0 7f		cpx #$7f	                cpx #$7F
5755	.de4f	f0 f0		beq $de41	                beq nextFontChar                 ;skip CHR$127
5756	.de51	8a		txa		                txa
5757	.de52	d0 da		bne $de2e	                bne compare           ;taken if more chars to consider
5758	.de54	80 e5		bra $de3b	                bra bitmapModeDone ;finish with A=0 - i.e., no match found
5759						                .endproc

5761						;-------------------------------------------------------------------------
5762						;
5763						; Copy character out of screen memory, and store as a 1 bpp bitmap in
5764						; VDU variables workspace.
5765						;
5766	.de56					LDE56: .proc
5767	.de56	a6 d8		ldx $d8		                ldx ZMEMT+0
5768	.de58	a5 d9		lda $d9		                lda ZMEMT+1
5769	.de5a	20 d9 ce	jsr $ced9	                jsr getNext3ColumnAddresses
5770	.de5d	a0 07		ldy #$07	                ldy #$07
5771	.de5f					loop:
5772	.de5f	ae 60 03	ldx $0360	                ldx vduv.numberOfLogicalColoursMinusOne
5773	.de62	e0 03		cpx #$03	                cpx #$03
5774	.de64	f0 09		beq $de6f	                beq read2bppChar
5775	.de66	b0 13		bcs $de7b	                bcs read4bppChar
5776	.de68					read1bppChar:
5777	.de68	b1 d8		lda ($d8),y	                lda (ZMEMT),y
5778	.de6a	4d 58 03	eor $0358	                eor vduv.backgroundTextColour
5779	.de6d	80 22		bra $de91	                bra next

5781	.de6f					read2bppChar:
5782	.de6f	b1 d8		lda ($d8),y	                lda (ZMEMT),y                ;get pixels 0-3
5783	.de71	20 a2 de	jsr $dea2	                jsr get4Pixels
5784	.de74	b1 da		lda ($da),y	                lda (ZTEMP),y                  ;get pixels 4-7
5785	.de76	20 a2 de	jsr $dea2	                jsr get4Pixels
5786	.de79	80 14		bra $de8f	                bra LDE8F

5788	.de7b					read4bppChar:
5789	.de7b	b1 d8		lda ($d8),y	                lda (ZMEMT),y                ;get pixels 0/1
5790	.de7d	20 98 de	jsr $de98	                jsr get2Pixels
5791	.de80	b1 da		lda ($da),y	                lda (ZTEMP),y                ;get pixels 2/3
5792	.de82	20 98 de	jsr $de98	                jsr get2Pixels
5793	.de85	b1 dc		lda ($dc),y	                lda (ZTEMPB),y               ;get pixels 4/5
5794	.de87	20 98 de	jsr $de98	                jsr get2Pixels
5795	.de8a	b1 e0		lda ($e0),y	                lda (ZTEMPD),y               ;get pixels 6/7
5796	.de8c	20 98 de	jsr $de98	                jsr get2Pixels
5797	.de8f					LDE8F:
5798	.de8f	a5 df		lda $df		                lda ZTEMPC+1
5799	.de91					next:
5800	.de91	99 28 03	sta $0328,y	                sta vduv.workspace._28,y
5801	.de94	88		dey		                dey
5802	.de95	10 c8		bpl $de5f	                bpl loop
5803	.de97	60		rts		                rts

5805	.de98					get2Pixels:
5806	.de98	4d 58 03	eor $0358	                eor vduv.backgroundTextColour ;reset background pixel bits
5807	.de9b	20 b5 de	jsr $deb5	                jsr or2Pixels
5808	.de9e	29 03		and #$03	                and #%00000011               ;2 pixels/byte
5809	.dea0	80 0c		bra $deae	                bra shiftIn2

5811	.dea2					get4Pixels:
5812	.dea2	4d 58 03	eor $0358	                eor vduv.backgroundTextColour ;
5813	.dea5	20 ba de	jsr $deba	                jsr or4Pixels
5814	.dea8	29 0f		and #$0f	                and #%00001111               ;4 pixels/byte

5816						                ; Build up the 1bpp char row in ZTEMPC?1, 2 or 4 bits
5817						                ; at a time.
5818	.deaa	06 df		asl $df		                asl ZTEMPC+1
5819	.deac	06 df		asl $df		                asl ZTEMPC+1
5820	.deae					shiftIn2:
5821	.deae	06 df		asl $df		                asl ZTEMPC+1
5822	.deb0	06 df		asl $df		                asl ZTEMPC+1
5823	.deb2	04 df		tsb $df		                tsb ZTEMPC+1
5824	.deb4	60		rts		                rts

5826						                ; OR together all the N bits for each pixel, making a
5827						                ; byte in which the bottom N bits have a bit set for
5828						                ; each non-0 pixel in the byte.
5829	.deb5					or2Pixels:
5830	.deb5	85 de		sta $de		                sta ZTEMPC+0
5831	.deb7	20 be de	jsr $debe	                jsr shiftOut2
5832	.deba					or4Pixels:
5833	.deba	85 de		sta $de		                sta ZTEMPC+0                 ;%abcdABCD
5834	.debc	4a		lsr a		                lsr a                        ;%0abcdABC
5835	.debd	4a		lsr a		                lsr a                        ;%00abcdAB
5836	.debe					shiftOut2:
5837	.debe	4a		lsr a		                lsr a                        ;%000abcdA
5838	.debf	4a		lsr a		                lsr a                        ;%0000abcd
5839	.dec0	05 de		ora $de		                ora ZTEMPC+0                 ;%0000abcd|%abcdABCD
5840						                .endproc
5841	.dec2					rtsDEC2:
5842	.dec2	60		rts		                rts

5844						;-------------------------------------------------------------------------
5845						;
5846						; Do WIND. If point not in window, return with Z=0. Otherwise, call
5847						; GADDR and return with Z=1.
5848						;
5849	.dec3					windGADDR:
5850	.dec3	20 a8 d1	jsr $d1a8	                jsr windEntryPoint
5851	.dec6	d0 fa		bne $dec2	                bne rtsDEC2                  ;taken if point outside window
5852	.dec8					gaddrEntryPoint:
5853	.dec8	bd 02 03	lda $0302,x	                lda vduv+2,x                 ;get Y coordinate
5854	.decb					LDECB:
5855	.decb	49 ff		eor #$ff	                eor #$FF                     ;invert Y coordinate
5856	.decd	a8		tay		                tay                          ;Y=Y coordinate
5857	.dece	29 07		and #$07	                and #$07                ;get scanline in character row
5858	.ded0	85 da		sta $da		                sta ZTEMP+0             ;save scanline
5859	.ded2	98		tya		                tya                          ;A=Y coordinate
5860	.ded3	29 f8		and #$f8	                and #$F8                     ;row*8
5861	.ded5	4a		lsr a		                lsr a                        ;row*4
5862	.ded6	85 d7		sta $d7		                sta ZMEMG+1                  ;>(row*1024)
5863	.ded8	4a		lsr a		                lsr a                        ;>(row*512)
5864	.ded9	4a		lsr a		                lsr a                        ;>(row*256)
5865	.deda	65 d7		adc $d7		                adc ZMEMG+1                  ;>(row*1280)
5866	.dedc	4a		lsr a		                lsr a                        ;>(row*640)
5867	.dedd	85 d7		sta $d7		                sta ZMEMG+1                  ;
5868	.dedf	a9 00		lda #$00	                lda #$00                     ;
5869	.dee1	6a		ror a		                ror a                        ;<(row*640) - $00/$80
5870	.dee2	ac 56 03	ldy $0356	                ldy vduv.currentScreenMODEGroup
5871	.dee5	f0 03		beq $deea	                beq +                      ;taken if 640 bytes per row
5872	.dee7	46 d7		lsr $d7		                lsr ZMEMG+1                ;>(row*320)
5873	.dee9	6a		ror a		                ror a                    ;<(row*320) - $00/$40/$80/$c0
5874	.deea					+
5875	.deea	05 da		ora $da		                ora ZTEMP+0               ;include the scanline offset
5876	.deec	6d 50 03	adc $0350	                adc vduv.screenTopLeftAddress+0 ;include LSB of screen base
5877	.deef	8d 1a 03	sta $031a	                sta vduv.graphicsAddressOffset

5879						                ; add MSB of screen base to ZMEMG+1
5880	.def2	a5 d7		lda $d7		                lda ZMEMG+1
5881	.def4	6d 51 03	adc $0351	                adc vduv.screenTopLeftAddress+1
5882	.def7	85 d7		sta $d7		                sta ZMEMG+1

5884	.def9	bd 01 03	lda $0301,x	                lda vduv+1,x                 ;get >X
5885	.defc	85 d6		sta $d6		                sta ZMEMG+0                  ;save >X
5886	.defe	bd 00 03	lda $0300,x	                lda vduv+0,x                 ;get <X
5887	.df01	2d 61 03	and $0361	                and vduv.pixelsPerByteMinusOne ;index for pixel
5888	.df04	6d 61 03	adc $0361	                adc vduv.pixelsPerByteMinusOne ;offset into pixel mask table
5889	.df07	a8		tay		                tay
5890	.df08	b9 3e e1	lda $e13e,y	                lda pixelMasks-1,y
5891	.df0b	85 d1		sta $d1		                sta ZMASK

5893						                ; Form 16-bit column address offset (LSB in A, MSB in
5894						                ; ZMEMG+0), assuming 8 bits/pixel. No adjustment
5895						                ; needed if MODE 0/4, but scale up by 2 if MODE 1/5 or
5896						                ; 4 if MODE 2.

5898	.df0d	bd 00 03	lda $0300,x	                lda vduv+0,x                 ;A = <X
5899	.df10	ac 61 03	ldy $0361	                ldy vduv.pixelsPerByteMinusOne
5900	.df13	c0 03		cpy #$03	                cpy #$03
5901	.df15	f0 05		beq $df1c	                beq LDF1C         ;taken if 4 px/byte - i.e., MODE 1/5
5902	.df17	b0 06		bcs $df1f	                bcs LDF1F        ;taken if >4 px/byte - i.e., MODE 0/4
5903	.df19	0a		asl a		                asl a
5904	.df1a	26 d6		rol $d6		                rol ZMEMG+0
5905	.df1c					LDF1C:
5906	.df1c	0a		asl a		                asl a
5907	.df1d	26 d6		rol $d6		                rol ZMEMG+0
5908	.df1f					LDF1F:
5909	.df1f	29 f8		and #$f8	                and #$F8                     ;<column offset
5910	.df21	18		clc		                clc
5911	.df22	6d 1a 03	adc $031a	                adc vduv.graphicsAddressOffset
5912	.df25	8d 1a 03	sta $031a	                sta vduv.graphicsAddressOffset
5913	.df28	a5 d6		lda $d6		                lda ZMEMG+0                  ;>column offset
5914	.df2a	65 d7		adc $d7		                adc ZMEMG+1                  ;add to address MSB
5915	.df2c	10 04		bpl $df32	                bpl +                        ;taken if no wrap
5916	.df2e	38		sec		                sec
5917	.df2f	ed 54 03	sbc $0354	                sbc vduv.screenSizeHighByte ;handle wrap at end of screen
5918	.df32					+
5919	.df32	85 d7		sta $d7		                sta ZMEMG+1                  ;got MSB
5920	.df34	64 d6		stz $d6		                stz ZMEMG+0 ;LSB always 0 - the offset takes care of this
5921	.df36	a6 da		ldx $da		                ldx ZTEMP+0 ;get scanline in row
5922	.df38	20 7c da	jsr $da7c	                jsr setupColourMasks
5923	.df3b	ac 1a 03	ldy $031a	                ldy vduv.graphicsAddressOffset
5924	.df3e					ldaim00_rts_DF3E:
5925	.df3e	a9 00		lda #$00	                lda #$00                     ;return with Z=1, as per WIND
5926	.df40	60		rts		                rts

5928						;-------------------------------------------------------------------------

5930	.df41					LDF41:
5931	.df41	20 c8 de	jsr $dec8	                jsr gaddrEntryPoint
5932	.df44	da		phx		                phx
5933	.df45	a2 00		ldx #$00	                ldx #$00
5934	.df47	ad 5a 03	lda $035a	                lda $035A
5935	.df4a	c9 04		cmp #$04	                cmp #$04
5936	.df4c	b0 0b		bcs $df59	                bcs LDF59
5937	.df4e	ae 6a 03	ldx $036a	                ldx $036A
5938	.df51	ad 59 03	lda $0359	                lda $0359
5939	.df54	f0 03		beq $df59	                beq LDF59
5940	.df56	ae 6b 03	ldx $036b	                ldx $036B
5941	.df59					LDF59:
5942	.df59	8e 69 03	stx $0369	                stx $0369
5943	.df5c	fa		plx		                plx
5944	.df5d	60		rts		                rts

5946						;-------------------------------------------------------------------------

5948	.df5e					handleCopyKey:
5949	.df5e	a9 20		lda #$20	                lda #STATE.isVDU5
5950	.df60	24 d0		bit $d0		                bit STATE
5951	.df62	50 da		bvc $df3e	                bvc ldaim00_rts_DF3E      ;taken if not cursor editing
5952	.df64	d0 d8		bne $df3e	                bne ldaim00_rts_DF3E      ;taken if VDU5
5956	.df66	20 f8 dd	jsr $ddf8	                jsr readCharacterAtTextCursor
5962	.df69	f0 0c		beq $df77	                beq rtsDF77              ;taken if char not recognised
5963	.df6b	48		pha		                pha                      ;save char recognised
5964	.df6c	20 d5 df	jsr $dfd5	                jsr isCursorEditingPossible
5965	.df6f	d0 05		bne $df76	                bne pla_rts_DF76
5966	.df71	a9 09		lda #$09	                lda #$09
5967	.df73	20 bc df	jsr $dfbc	                jsr moveEditCursor
5968	.df76					pla_rts_DF76:
5969	.df76	68		pla		                pla
5970	.df77					rtsDF77:
5971	.df77	60		rts		                rts

5973						;-------------------------------------------------------------------------
5974						;
5975						; Handle cursor key press.
5976						;
5977						; Entry: A = one of the cursor key codes:
5978						;            $88 = left
5979						;            $89 = right
5980						;            $8a = down
5981						;            $8b = up

5983	.df78					handleCursorKey:
5984	.df78	48		pha		                pha                          ;save cursor key code
5985	.df79	20 d5 df	jsr $dfd5	                jsr isCursorEditingPossible
5986	.df7c	d0 f8		bne $df76	                bne pla_rts_DF76             ;bail if editing not possible
5987	.df7e	70 16		bvs $df96	                bvs editing                  ;taken if already editing
5988	.df80					beginEditing:
5989	.df80	ad 5f 03	lda $035f	                lda vduv.lastCursorStartRegisterValue
5990	.df83	29 df		and #$df	                and #%11011111
5991	.df85	20 53 cf	jsr $cf53	                jsr setCRTCRegister10        ;hide cursor
5992	.df88	a2 18		ldx #$18	                ldx #VDUVariables.textCursorXPosition
5993	.df8a	a0 64		ldy #$64	                ldy #VDUVariables.editCursorXPosition
5994	.df8c	20 0c c9	jsr $c90c	                jsr copyTwoBytesWithinVDUVariables ;edit cursor pos =
5995						                                                   ;text cursor pos
5996	.df8f	20 05 c1	jsr $c105	                jsr activateEditCursor
5997	.df92	a9 02		lda #$02	                lda #STATE.isScrollingDisabled
5998	.df94	04 d0		tsb $d0		                tsb STATE
5999	.df96					editing:
6000	.df96	68		pla		                pla                          ;restore cursor key code

6002						                ; Form appropriate VDU command (8/9/10/11) for the
6003						                ; key, assuming no VDU axis rearrangement.
6004	.df97	29 7f		and #$7f	                and #$7F
6005	.df99	85 da		sta $da		                sta ZTEMP                    ;save VDU command

6007						                ; Adjust VDU command based on axis swap/inversion.
6008	.df9b	c9 0a		cmp #$0a	                cmp #$0A
6009	.df9d	b0 0e		bcs $dfad	                bcs handleCursorUpOrDown     ;taken if up/down
6010	.df9f					handleCursorLeftOrRightOrCopy:
6011	.df9f	ad 66 03	lda $0366	                lda vduv.cursorFlags
6012	.dfa2	4a		lsr a		                lsr a
6013	.dfa3	29 05		and #$05	                and #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertHorizontal)>>1
6014	.dfa5	89 04		bit #$04	                bit #vduv.cursorFlags.swapAxes>>1
6015	.dfa7	f0 11		beq $dfba	                beq gotActualMoveCommand

6017	.dfa9	49 07		eor #$07	                eor #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical|vduv.cursorFlags.invertHorizontal)>>1
6018	.dfab	80 0d		bra $dfba	                bra gotActualMoveCommand

6020	.dfad					handleCursorUpOrDown:
6021	.dfad	ad 66 03	lda $0366	                lda vduv.cursorFlags
6022	.dfb0	4a		lsr a		                lsr a
6023	.dfb1	4a		lsr a		                lsr a
6024	.dfb2	29 03		and #$03	                and #(vduv.cursorFlags.swapAxes|vduv.cursorFlags.invertVertical)>>2 ;000000SV
6025	.dfb4	89 02		bit #$02	                bit #vduv.cursorFlags.swapAxes>>2
6026	.dfb6	f0 02		beq $dfba	                beq gotActualMoveCommand

6028	.dfb8	49 01		eor #$01	                eor #vduv.cursorFlags.invertVertical>>2
6029	.dfba					gotActualMoveCommand:
6030	.dfba	45 da		eor $da		                eor ZTEMP
6031	.dfbc					moveEditCursor:
6032	.dfbc	a8		tay		                tay                          ;save command
6033	.dfbd	a9 40		lda #$40	                lda #STATE.isCursorEditing
6034	.dfbf	14 d0		trb $d0		                trb STATE            ;temporarily disable edit mode
6035	.dfc1	98		tya		                tya                  ;restore command
6036	.dfc2	ae 6c 03	ldx $036c	                ldx vduv.column81
6037	.dfc5	da		phx		                phx                  ;save old column 81 flag
6038	.dfc6	4e 6c 03	lsr $036c	                lsr vduv.column81    ;temporarily reset column 81 flag
6039	.dfc9	20 27 c0	jsr $c027	                jsr outputToVDU      ;print the cursor movement command
6040	.dfcc	68		pla		                pla
6041	.dfcd	8d 6c 03	sta $036c	                sta vduv.column81            ;restore column 81 flag
6042	.dfd0	a9 40		lda #$40	                lda #STATE.isCursorEditing
6043	.dfd2	04 d0		tsb $d0		                tsb STATE                    ;reinstate edit mode
6044	.dfd4	60		rts		                rts

6046						; Check if cursor editing is possible.
6047						;
6048						; Exit: Z=1 - editing is possible
6049						;             V reflects current STATE.isCursorEditing bit
6050						;       Z=0 - editing not possible
6051	.dfd5					isCursorEditingPossible:
6052	.dfd5	ae 6a 02	ldx $026a	                ldx vduQueueNegativeLength
6053	.dfd8	d0 04		bne $dfde	                bne +                        ;return with Z=0 if VDU
6054						                                             ;queue not empty
6055	.dfda	a9 a0		lda #$a0	                lda #STATE.isVDU21|STATE.isVDU5
6056	.dfdc	24 d0		bit $d0		                bit STATE   ;return with Z=0 if neither VDU21 nor VDU5
6057	.dfde					+
6058	.dfde	60		rts		                rts

6060						;-------------------------------------------------------------------------
6061						;
6062						; 184-191 = Move/copy rectangle [MasRef E.3-31]
6063						;
6065	.dfdf					selectExtROMAndPlotMoveOrCopyRectangle:
6066	.dfdf	a2 8f		ldx #$8f	                ldx #$80|extROM   ; select VIEW+ANDY
6067	.dfe1	20 9a e5	jsr $e59a	                jsr selectROMX
6068	.dfe4	20 19 b4	jsr $b419	                jsr plotMoveOrCopyRectangle
6069	.dfe7	80 08		bra $dff1	                bra LDFF1

6072						;-------------------------------------------------------------------------
6073						;
6074						; 192-199 = Plot ellipse outline [MasRef E.3-32]
6075						;
6077	.dfe9					selectExtROMAndPlotEllipseOutline:
6078	.dfe9	a2 8f		ldx #$8f	                ldx #$80|extROM
6079	.dfeb	20 9a e5	jsr $e59a	                jsr selectROMX
6080	.dfee	20 3f af	jsr $af3f	                jsr plotEllipseOutline
6081	.dff1					LDFF1:
6082	.dff1	4c 98 e5	jmp $e598	                jmp selectTerminalROMAndANDY

6085						;-------------------------------------------------------------------------
6086						;
6087						; 200-207 = Plot solid ellipse [MasRef E.3-32]
6088						;
6090	.dff4					selectExtROMAndPlotEllipseFilled:
6091	.dff4	a2 8f		ldx #$8f	                ldx #$80|extROM
6092	.dff6	20 9a e5	jsr $e59a	                jsr selectROMX
6093	.dff9	20 c2 af	jsr $afc2	                jsr plotEllipseFilled
6094	.dffc	80 f3		bra $dff1	                bra LDFF1

6101						;-------------------------------------------------------------------------

6103						; Pretty sure I have the logic for this all wrong...

6106	>dffe					                .align 16
6108	.e000					startupMessages: .block
6110	>e000	00 00 00 00 00 00 00 00		                .fill 16,0
	>e008	00 00 00 00 00 00 00 00

6116	.e010					acornMOS:
6117	>e010	0d				                .text 13
6129	>e011	41 63 6f 72 6e 20 4d 4f		                .text "Acorn MOS"
	>e019	53
6134	>e01a	00				                .byte 0
6135	.e01b					beep:
6136	>e01b	07				                .byte 7
6137	>e01c	00				                .byte 0
6139	>e01d	00 00 00			                .byte 0,0,0   ;space for "xxK"

6142	.e020					twoNewlines:
6143	>e020	08				                .byte 8
6144	>e021	0d				                .byte $0D
6145	>e022	0d				                .byte $0D
6146						                ; terminating 0 comes from following table!
6148						                .endblock
6149	.e023					LE013:
6150	>e023	00				                .byte %00000000;$00
6151	>e024	11				                .byte %00010001;$11
6152	>e025	22				                .byte %00100010;$22
6153	>e026	33				                .byte %00110011;$33
6154	>e027	44				                .byte %01000100;$44
6155	>e028	55				                .byte %01010101;$55
6156	>e029	66				                .byte %01100110;$66
6157	>e02a	77				                .byte %01110111;$77
6158	>e02b	88				                .byte %10001000;$88
6159	>e02c	99				                .byte %10011001;$99
6160	>e02d	aa				                .byte %10101010;$AA
6161	>e02e	bb				                .byte %10111011;$BB
6162	>e02f	cc				                .byte %11001100;$CC
6163	>e030	dd				                .byte %11011101;$DD
6164	>e031	ee				                .byte %11101110;$EE
6165	>e032	ff				                .byte %11111111;$FF
6166	.e033					LE023:
6167	>e033	00				                .byte %00000000;$00
6168	>e034	55				                .byte %01010101;$55
6169	>e035	aa				                .byte %10101010;$AA
6170	>e036	ff				                .byte %11111111;$FF

6172						; VDU control code dispatch tables
6173						; ================================
6174						;
6175						; entry:
6176						;
6177						;

6179						; each routine is (address, number of additional VDU bytes)
6180	=[($c035,0)]				_:=[(vdu0EntryPoint,0)] ; VDU0
6181	=[($c035,0),($c0e2,1)]			_..=[(vdu1EntryPoint,1)] ; VDU1
6182	=[($c035,0),($c0e2,1),($c0ea,0)]	_..=[(vdu2EntryPoint,0)] ; VDU2
6183	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0)]
						_..=[(vdu3EntryPoint,0)] ; VDU3
6184	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0)]
						_..=[(vdu4EntryPoint,0)] ; VDU4
6185	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0)]
						_..=[(vdu5EntryPoint,0)] ; VDU5
6186	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0)]
						_..=[(vdu6EntryPoint,0)] ; VDU6
6187	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0)]
						_..=[(vdu7EntryPoint,0)] ; VDU7
6188	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0)]
						_..=[(vdu8EntryPoint,0)] ; VDU8
6189	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0)]
						_..=[(vdu9EntryPoint,0)] ; VDU9
6190	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0)]
						_..=[(vdu10EntryPoint,0)] ; VDU10
6191	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0)]
						_..=[(vdu11EntryPoint,0)] ; VDU11
6192	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0)]
						_..=[(vdu12EntryPoint,0)] ; VDU12
6193	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0)]
						_..=[(vdu13EntryPoint,0)] ; VDU13
6194	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0)]
						_..=[(vdu14EntryPoint,0)] ; VDU14
6195	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0)]
						_..=[(vdu15EntryPoint,0)] ; VDU15
6196	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0)]
						_..=[(vdu16EntryPoint,0)] ; VDU16
6197	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1)]
						_..=[(vdu17EntryPoint,1)] ; VDU17
6198	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2)]
						_..=[(vdu18EntryPoint,2)] ; VDU18
6199	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5)]
						_..=[(vdu19EntryPoint,5)] ; VDU19
6200	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0)]
						_..=[(vdu20EntryPoint,0)] ; VDU20
6201	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0)]
						_..=[(vdu21EntryPoint,0)] ; VDU21
6202	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1)]
						_..=[(vdu22EntryPoint,1)] ; VDU22
6203	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9)]
						_..=[(vdu23EntryPoint,9)] ; VDU23
6204	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8)]
						_..=[(vdu24EntryPoint,8)] ; VDU24
6205	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5)]
						_..=[(vdu25EntryPoint,5)] ; VDU25
6206	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0)]
						_..=[(vdu26EntryPoint,0)] ; VDU26
6207	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0)]
						_..=[(vdu27EntryPoint,0)] ; VDU27
6208	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4)]
						_..=[(vdu28EntryPoint,4)] ; VDU28
6209	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4),($c78a,4)]
						_..=[(vdu29EntryPoint,4)] ; VDU29
6210	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4),($c78a,4),($c47c,0)]
						_..=[(vdu30EntryPoint,0)] ; VDU30
6211	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4),($c78a,4),($c47c,0),($c482,2)]
						_..=[(vdu31EntryPoint,2)] ; VDU31
6212	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4),($c78a,4),($c47c,0),($c482,2),($ce2d,0)]
						_..=[(vdu127EntryPoint,0)] ; VDU127
6213	=[($c035,0),($c0e2,1),($c0ea,0),($c0ea,0),($c51e,0),($c52d,0),($c035,0),($f067,0),($c29a,0),($c24c,0),($c25b,0),($c2b1,0),($c44f,0),($c3f6,0),($c514,0),($c528,0),($c413,0),($c539,1),($c564,2),($c62d,5),($c5c5,0),($c519,0),($c794,1),($c67c,9),($c71f,8),($c69b,5),($c6aa,0),($c035,0),($c3a5,4),($c78a,4),($c47c,0),($c482,2),($ce2d,0)]
						vdu_routines=_

6215						; LSB of routine address
6216	.e037					vduRoutinesLSBTable:
6217						                .for _i=0,_i<len(vdu_routines),_i+=1
6218	>e037	35				                .byte <vdu_routines[_i][0]
6218	>e038	e2				                .byte <vdu_routines[_i][0]
6218	>e039	ea				                .byte <vdu_routines[_i][0]
6218	>e03a	ea				                .byte <vdu_routines[_i][0]
6218	>e03b	1e				                .byte <vdu_routines[_i][0]
6218	>e03c	2d				                .byte <vdu_routines[_i][0]
6218	>e03d	35				                .byte <vdu_routines[_i][0]
6218	>e03e	67				                .byte <vdu_routines[_i][0]
6218	>e03f	9a				                .byte <vdu_routines[_i][0]
6218	>e040	4c				                .byte <vdu_routines[_i][0]
6218	>e041	5b				                .byte <vdu_routines[_i][0]
6218	>e042	b1				                .byte <vdu_routines[_i][0]
6218	>e043	4f				                .byte <vdu_routines[_i][0]
6218	>e044	f6				                .byte <vdu_routines[_i][0]
6218	>e045	14				                .byte <vdu_routines[_i][0]
6218	>e046	28				                .byte <vdu_routines[_i][0]
6218	>e047	13				                .byte <vdu_routines[_i][0]
6218	>e048	39				                .byte <vdu_routines[_i][0]
6218	>e049	64				                .byte <vdu_routines[_i][0]
6218	>e04a	2d				                .byte <vdu_routines[_i][0]
6218	>e04b	c5				                .byte <vdu_routines[_i][0]
6218	>e04c	19				                .byte <vdu_routines[_i][0]
6218	>e04d	94				                .byte <vdu_routines[_i][0]
6218	>e04e	7c				                .byte <vdu_routines[_i][0]
6218	>e04f	1f				                .byte <vdu_routines[_i][0]
6218	>e050	9b				                .byte <vdu_routines[_i][0]
6218	>e051	aa				                .byte <vdu_routines[_i][0]
6218	>e052	35				                .byte <vdu_routines[_i][0]
6218	>e053	a5				                .byte <vdu_routines[_i][0]
6218	>e054	8a				                .byte <vdu_routines[_i][0]
6218	>e055	7c				                .byte <vdu_routines[_i][0]
6218	>e056	82				                .byte <vdu_routines[_i][0]
6218	>e057	2d				                .byte <vdu_routines[_i][0]
6219						                .next

6221						; If bit 7 set: MSB of routine address
6222						;
6223						; If bit 7 clear:
6224						;
6225						; Top 4 bits are bits 8-11 of routine address (bits 12-15 are %1010,
6226						; so address is $C0xx to $C7xx)
6227						;
6228						; Bottom 4 bits are ORed with $f0 and stored in $26a - -ve bytes left
6229						; in VDU queue.
6230	.e058					vduRoutinesMSBTable:
6231						                .for _i=0,_i<len(vdu_routines),_i+=1
6233	>e058	c0				                .byte >vdu_routines[_i][0]
6237	>e059	0f				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6233	>e05a	c0				                .byte >vdu_routines[_i][0]
6233	>e05b	c0				                .byte >vdu_routines[_i][0]
6233	>e05c	c5				                .byte >vdu_routines[_i][0]
6233	>e05d	c5				                .byte >vdu_routines[_i][0]
6233	>e05e	c0				                .byte >vdu_routines[_i][0]
6233	>e05f	f0				                .byte >vdu_routines[_i][0]
6233	>e060	c2				                .byte >vdu_routines[_i][0]
6233	>e061	c2				                .byte >vdu_routines[_i][0]
6233	>e062	c2				                .byte >vdu_routines[_i][0]
6233	>e063	c2				                .byte >vdu_routines[_i][0]
6233	>e064	c4				                .byte >vdu_routines[_i][0]
6233	>e065	c3				                .byte >vdu_routines[_i][0]
6233	>e066	c5				                .byte >vdu_routines[_i][0]
6233	>e067	c5				                .byte >vdu_routines[_i][0]
6233	>e068	c4				                .byte >vdu_routines[_i][0]
6237	>e069	5f				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6237	>e06a	5e				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6237	>e06b	6b				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6233	>e06c	c5				                .byte >vdu_routines[_i][0]
6233	>e06d	c5				                .byte >vdu_routines[_i][0]
6237	>e06e	7f				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6237	>e06f	67				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6237	>e070	78				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6237	>e071	6b				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6233	>e072	c6				                .byte >vdu_routines[_i][0]
6233	>e073	c0				                .byte >vdu_routines[_i][0]
6237	>e074	3c				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6237	>e075	7c				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6233	>e076	c4				                .byte >vdu_routines[_i][0]
6237	>e077	4e				                .byte (16-vdu_routines[_i][1])|(((>vdu_routines[_i][0])&$0f)<<4)
6233	>e078	ce				                .byte >vdu_routines[_i][0]
6239						                .next

6241						;-------------------------------------------------------------------------
6242						;
6243						; entry:
6244						;
6245						; C=0
6246						;
6247						; A = vdu 23 code
6248						;
6249						; VDU queue = the full 9 bytes of the VDU 23
6250						;
6251	.e079					vdu23EntryPointTable:
6252	>e079	fb ce				                .word vdu23_0_EntryPoint
6253	>e07b	2b cf				                .word vdu23_1_EntryPoint
6254	>e07d	57 cf				                .word vdu23_2_EntryPoint
6255	>e07f	57 cf				                .word vdu23_3_EntryPoint
6256	>e081	57 cf				                .word vdu23_4_EntryPoint
6257	>e083	57 cf				                .word vdu23_5_EntryPoint
6258	>e085	df cf				                .word vdu23_6_EntryPoint
6259	>e087	e6 cf				                .word vdu23_7_EntryPoint
6260	>e089	69 d0				                .word vdu23_8_EntryPoint
6261	>e08b	0f d1				                .word vdu23_9_EntryPoint
6262	>e08d	10 d1				                .word vdu23_10_EntryPoint
6263	>e08f	6d cf				                .word vdu23_11_EntryPoint
6264	>e091	96 cf				                .word vdu23_12_EntryPoint
6265	>e093	96 cf				                .word vdu23_13_EntryPoint
6266	>e095	96 cf				                .word vdu23_14_EntryPoint
6267	>e097	96 cf				                .word vdu23_15_EntryPoint
6268	>e099	1e d1				                .word vdu23_16_EntryPoint

6270						;-------------------------------------------------------------------------
6271						;
6272						; entry:
6273						;
6274						; A = plot number
6275						;
6276	.e09b					plotEntryPointTable:
6277	>e09b	4a db				                .word plotPoint    ;64-71 = Plot point [MasRef E.3-24]
6278	>e09d	6c dc				                .word plotHorizontalLineFill ;72-79 = Horizontal line fill (left and right to non-background) [MasRef E.3-24]
6279	>e09f	97 9c				                .word L9BF7 ;80-87 = Plot triangle [MasRef E.3-25]
6280	>e0a1	75 dc				                .word plotHorizontalLineFillRight ;88-95 = Horizontal line fill (right to background) [MasRef E.3-25]
6281	>e0a3	48 c4				                .word LC448 ;96-103 = Plot rectangle [MasRef E.3-26]
6282	>e0a5	6c dc				                .word plotHorizontalLineFill ;104-111 = Horizontal line fill (left and right to foreground) [MasRef E.3-26]
6283	>e0a7	43 9c				                .word plotParallelogram ;112-119 = Plot parallelogram [MasRef E.3-27]
6284	>e0a9	75 dc				                .word plotHorizontalLineFillRight ;120-127 = Horizontal line fill (right to non-foreground) [MasRef E.3-27]
6285	>e0ab	99 9d				                .word L9CF9 ;128-135 = Flood fill to non-background [MasRef E.3-28]
6286	>e0ad	99 9d				                .word L9CF9 ;136-143 = Flood fill to foreground [MasRef E.3-28]
6287	>e0af	44 9a				                .word L99A4 ;144-151 = Plot circle outline [MasRef E.3-28]
6288	>e0b1	e4 99				                .word L9944 ;152-159 = Plot filled circle [MasRef E.3-29]
6289	>e0b3	39 9a				                .word L9999 ;160-167 = Plot circular arc [MasRef E.3-29]
6290	>e0b5	d5 99				                .word L9935 ;168-175 = Plot filled chord segment [MasRef E.3-30]
6291	>e0b7	c3 99				                .word L9923 ;176-183 = Plot filled sector [MasRef E.3-30]
6292	>e0b9	df df				                .word selectExtROMAndPlotMoveOrCopyRectangle ;184-191 = Move/copy rectangle [MasRef E.3-31]
6293	>e0bb	e9 df				                .word selectExtROMAndPlotEllipseOutline ;192-199 = Plot ellipse outline [MasRef E.3-32]
6294	>e0bd	f4 df				                .word selectExtROMAndPlotEllipseFilled ;200-207 = Plot solid ellipse [MasRef E.3-32]

6296						; Times 40 lookup table, high bytes
6297	.e0bf					multiplyBy40TableHigh:
6298						                .for _i=0,_i<25,_i+=1
6299	>e0bf	00				                .byte >_i*40
6299	>e0c0	00				                .byte >_i*40
6299	>e0c1	00				                .byte >_i*40
6299	>e0c2	00				                .byte >_i*40
6299	>e0c3	00				                .byte >_i*40
6299	>e0c4	00				                .byte >_i*40
6299	>e0c5	00				                .byte >_i*40
6299	>e0c6	01				                .byte >_i*40
6299	>e0c7	01				                .byte >_i*40
6299	>e0c8	01				                .byte >_i*40
6299	>e0c9	01				                .byte >_i*40
6299	>e0ca	01				                .byte >_i*40
6299	>e0cb	01				                .byte >_i*40
6299	>e0cc	02				                .byte >_i*40
6299	>e0cd	02				                .byte >_i*40
6299	>e0ce	02				                .byte >_i*40
6299	>e0cf	02				                .byte >_i*40
6299	>e0d0	02				                .byte >_i*40
6299	>e0d1	02				                .byte >_i*40
6299	>e0d2	02				                .byte >_i*40
6299	>e0d3	03				                .byte >_i*40
6299	>e0d4	03				                .byte >_i*40
6299	>e0d5	03				                .byte >_i*40
6299	>e0d6	03				                .byte >_i*40
6299	>e0d7	03				                .byte >_i*40
6300						                .next

6302						; Times 40 lookup table, low bytes
6303	.e0d8					multiplyBy40TableLow:
6304						                .for _i=0,_i<25,_i+=1
6305	>e0d8	00				                .byte <_i*40
6305	>e0d9	28				                .byte <_i*40
6305	>e0da	50				                .byte <_i*40
6305	>e0db	78				                .byte <_i*40
6305	>e0dc	a0				                .byte <_i*40
6305	>e0dd	c8				                .byte <_i*40
6305	>e0de	f0				                .byte <_i*40
6305	>e0df	18				                .byte <_i*40
6305	>e0e0	40				                .byte <_i*40
6305	>e0e1	68				                .byte <_i*40
6305	>e0e2	90				                .byte <_i*40
6305	>e0e3	b8				                .byte <_i*40
6305	>e0e4	e0				                .byte <_i*40
6305	>e0e5	08				                .byte <_i*40
6305	>e0e6	30				                .byte <_i*40
6305	>e0e7	58				                .byte <_i*40
6305	>e0e8	80				                .byte <_i*40
6305	>e0e9	a8				                .byte <_i*40
6305	>e0ea	d0				                .byte <_i*40
6305	>e0eb	f8				                .byte <_i*40
6305	>e0ec	20				                .byte <_i*40
6305	>e0ed	48				                .byte <_i*40
6305	>e0ee	70				                .byte <_i*40
6305	>e0ef	98				                .byte <_i*40
6305	>e0f0	c0				                .byte <_i*40
6306						                .next

6308						; Times 640 lookup table, high bytes
6309	.e0f1					multiplyBy640TableHigh:
6310						                .for _i=0,_i<32,_i+=1
6311	>e0f1	00				                .byte >_i*640
6311	>e0f2	02				                .byte >_i*640
6311	>e0f3	05				                .byte >_i*640
6311	>e0f4	07				                .byte >_i*640
6311	>e0f5	0a				                .byte >_i*640
6311	>e0f6	0c				                .byte >_i*640
6311	>e0f7	0f				                .byte >_i*640
6311	>e0f8	11				                .byte >_i*640
6311	>e0f9	14				                .byte >_i*640
6311	>e0fa	16				                .byte >_i*640
6311	>e0fb	19				                .byte >_i*640
6311	>e0fc	1b				                .byte >_i*640
6311	>e0fd	1e				                .byte >_i*640
6311	>e0fe	20				                .byte >_i*640
6311	>e0ff	23				                .byte >_i*640
6311	>e100	25				                .byte >_i*640
6311	>e101	28				                .byte >_i*640
6311	>e102	2a				                .byte >_i*640
6311	>e103	2d				                .byte >_i*640
6311	>e104	2f				                .byte >_i*640
6311	>e105	32				                .byte >_i*640
6311	>e106	34				                .byte >_i*640
6311	>e107	37				                .byte >_i*640
6311	>e108	39				                .byte >_i*640
6311	>e109	3c				                .byte >_i*640
6311	>e10a	3e				                .byte >_i*640
6311	>e10b	41				                .byte >_i*640
6311	>e10c	43				                .byte >_i*640
6311	>e10d	46				                .byte >_i*640
6311	>e10e	48				                .byte >_i*640
6311	>e10f	4b				                .byte >_i*640
6311	>e110	4d				                .byte >_i*640
6312						                .next

6314						;-------------------------------------------------------------------------

6316	.e111					modeMaxRow:
6317	>e111	1f				                .byte 31                     ;MODE 0 = 32 rows
6318	>e112	1f				                .byte 31                     ;MODE 1 = 32 rows
6319	>e113	1f				                .byte 31                     ;MODE 2 = 32 rows
6320	>e114	18				                .byte 24                     ;MODE 3 = 25 rows
6321	>e115	1f				                .byte 31                     ;MODE 4 = 32 rows
6322	>e116	1f				                .byte 31                     ;MODE 5 = 32 rows
6323	>e117	18				                .byte 24                     ;MODE 6 = 25 rows
6324	>e118	18				                .byte 24                     ;MODE 7 = 25 rows

6326						;-------------------------------------------------------------------------

6328	.e119					modeMaxColumn:
6329	>e119	4f				                .byte 79                     ;MODE 0 = 80 columns
6330	>e11a	27				                .byte 39                     ;MODE 1 = 40 columns
6331	>e11b	13				                .byte 19                     ;MODE 2 = 20 columns
6332	>e11c	4f				                .byte 79                     ;MODE 3 = 80 columns
6333	>e11d	27				                .byte 39                     ;MODE 4 = 40 columns
6334	>e11e	13				                .byte 19                     ;MODE 5 = 20 columns
6335	>e11f	27				                .byte 39                     ;MODE 6 = 40 columns
6336	>e120	27				                .byte 39                     ;MODE 7 = 40 columns

6338						;-------------------------------------------------------------------------

6340	.e121					vcontrolForScreenMODE:
6341	>e121	9c				                .byte VCONTROL.cursorX___|VCONTROL.crtc2MHz|VCONTROL.shift16MHz ; $9C - MODE 0
6342	>e122	d8				                .byte VCONTROL.cursorXX__|VCONTROL.crtc2MHz|VCONTROL.shift8MHz ; $d8 - MODE 1
6343	>e123	f4				                .byte VCONTROL.cursorXXXX|VCONTROL.crtc2MHz|VCONTROL.shift4MHz ; $F4 - MODE 2
6344	>e124	9c				                .byte VCONTROL.cursorX___|VCONTROL.crtc2MHz|VCONTROL.shift16MHz ; $9C - MODE 3
6345	>e125	88				                .byte VCONTROL.cursorX___|VCONTROL.crtc1MHz|VCONTROL.shift8MHz ; $88 - MODE 4
6346	>e126	c4				                .byte VCONTROL.cursorXX__|VCONTROL.crtc1MHz|VCONTROL.shift4MHz ; $C4 - MODE 5
6347	>e127	88				                .byte VCONTROL.cursorX___|VCONTROL.crtc1MHz|VCONTROL.shift8MHz ; $88 - MODE 6
6348	>e128	4b				                .byte VCONTROL.cursor_X__|VCONTROL.crtc1MHz|VCONTROL.shift8MHz|VCONTROL.isTeletext|VCONTROL.flash ; $4B - MODE 7

6350						;-------------------------------------------------------------------------

6352	.e129					bytesPerCharacterForMODE:
6353	>e129	08				                .byte 8                      ;MODE 0
6354	>e12a	10				                .byte 16                     ;MODE 1
6355	>e12b	20				                .byte 32                     ;MODE 2
6356	>e12c	08				                .byte 8                      ;MODE 3
6357	>e12d	08				                .byte 8                      ;MODE 4
6358	>e12e	10				                .byte 16                     ;MODE 5
6359	>e12f	08				                .byte 8                      ;MODE 6
6360	.e130					LE120:
6361	>e130	01				                .byte %00000001              ;MODE 7
6362	>e131	ff				                .byte %11111111
6363	>e132	55				                .byte %01010101
6364	>e133	ff				                .byte %11111111
6365	>e134	77				                .byte %01110111
6366	>e135	33				                .byte %00110011
6367	>e136	11				                .byte %00010001

6369						;-------------------------------------------------------------------------

6371	.e137					distanceMasksTable:
6372	>e137	ff				                .byte %11111111
6373	>e138	7f				                .byte %01111111
6374	>e139	3f				                .byte %00111111
6375	>e13a	1f				                .byte %00011111
6376	>e13b	0f				                .byte %00001111
6377	>e13c	07				                .byte %00000111
6378	>e13d	03				                .byte %00000011
6379	>e13e	01				                .byte %00000001

6381						;-------------------------------------------------------------------------
6382						;
6383						; These graphics tables often overlap. I haven't always bothered
6384						; commenting the MODEs for the MODE-indexed tables, as even those
6385						; sometimes overlap.
6386						;
6387						;------------------------------------------------------------------------

6389						;-------------------------------------------------------------------------
6390						;
6391						; This is 3 tables in one. Use the numberOfLogicalColoursMinusOne VDU
6392						; variable to access it:
6393						; pixelMasks[(numberOfLogicalColoursMinusOne&7)-1+colour&numberOfLogicalColoursMinusOne=
6394						;
6395	.e13f					pixelMasks:
6396	>e13f	aa				                .byte %10101010
6397	>e140	55				                .byte %01010101

6399	>e141	88				                .byte %10001000
6400	>e142	44				                .byte %01000100
6401	>e143	22				                .byte %00100010
6402	>e144	11				                .byte %00010001

6404	>e145	80				                .byte %10000000
6405	>e146	40				                .byte %01000000
6406	>e147	20				                .byte %00100000
6407	>e148	10				                .byte %00010000
6408	>e149	08				                .byte %00001000
6409	>e14a	04				                .byte %00000100
6410	>e14b	02				                .byte %00000010
6411	.e14c					numberOfLogicalColoursMinusOneForMODE:
6412	>e14c	01				                .byte %00000001              ;MODE 0 (also part of pixelMasks)
6413	>e14d	03				                .byte 3                      ;MODE 1
6414	>e14e	0f				                .byte 15                     ;MODE 2
6415	>e14f	01				                .byte 1                      ;MODE 3
6416	>e150	01				                .byte 1                      ;MODE 4
6417	>e151	03				                .byte 3                      ;MODE 5
6418	>e152	01				                .byte 1                      ;MODE 6
6419						                ; MODE 7 value (0) is in next table

6421						;-------------------------------------------------------------------------
6422						;
6423						; Overwrite: ZGORA=$ff, ZGEOR=$ff
6424						; OR: ZGORA=value, ZGEOR=$00
6425						; AND: ZGORA=~value, ZGEOR=$00
6426						; EOR: ZGORA=$00, ZGEOR=value
6427						; Invert: ZGORA=$00, ZGEOR=$ff
6428						; Leave: ZGORA=$00, ZGEOR=$ff
6429						;
6430	.e153					zgeorORTable:
6431	>e153	00				                .byte $00
6432	.e154					zgoraORTable:
6433	>e154	ff				                .byte $FF
6434	.e155					zgoraEORTable:
6435	>e155	00				                .byte $00
6436	>e156	00				                .byte $00
6437	>e157	ff				                .byte $FF
6438	.e158					zgeorEORTable:
6439	>e158	ff				                .byte $FF
6440	>e159	ff				                .byte $FF
6441	>e15a	ff				                .byte $FF
6442	>e15b	00				                .byte $00

6444						;-------------------------------------------------------------------------
6445						;
6446						; Index using logical colour value to get a byte with that colour
6447						; value in every pixel.
6448						;
6449						; This is 3 tables in one. Use the numberOfLogicalColoursMinusOne VDU
6450						; variable to access it:
6451						; solidColoursTable[(numberOfLogicalColoursMinusOne&7)-1+colour&numberOfLogicalColoursMinusOne=
6452						;
6453	.e15c					solidColoursTable:

6455						                ; 1 bpp
6456	>e15c	00				                .byte %00000000
6457	>e15d	ff				                .byte %11111111

6459						                ; 2 bpp
6460	>e15e	00				                .byte %00000000
6461	>e15f	0f				                .byte %00001111
6462	>e160	f0				                .byte %11110000
6463	>e161	ff				                .byte %11111111

6465						                ; 4 bpp
6466	>e162	00				                .byte %00000000
6467	>e163	03				                .byte %00000011
6468	>e164	0c				                .byte %00001100
6469	>e165	0f				                .byte %00001111
6470	>e166	30				                .byte %00110000
6471	>e167	33				                .byte %00110011
6472	>e168	3c				                .byte %00111100
6473	>e169	3f				                .byte %00111111
6474	>e16a	c0				                .byte %11000000
6475	>e16b	c3				                .byte %11000011
6476	>e16c	cc				                .byte %11001100
6477	>e16d	cf				                .byte %11001111
6478	>e16e	f0				                .byte %11110000
6479	>e16f	f3				                .byte %11110011
6480	>e170	fc				                .byte %11111100
6481	>e171	ff				                .byte %11111111

6483	.e172					pixelsPerByteMinusOneForMODE:
6484	>e172	07				                .byte 7
6485	>e173	03				                .byte 3
6486	>e174	01				                .byte 1
6487	.e175					LE165:
6488	>e175	00				                .byte 0
6489	>e176	07				                .byte 7
6490	>e177	03				                .byte 3
6491	.e178					screenMODEGroupForMODE:
6492	>e178	00				                .byte 0
6493	>e179	00				                .byte 0
6494	.e17a	00		brk #		                brk
6495	.e17b	01 02		ora ($02,x)	                ora ($02,x)
6496	>e17d	02				                .byte $02
6497	>e17e	03				                .byte $03
6498						;TSB &0D          :\ E16F= 04 0D       ..
6499	>e17f	04				                .byte $04

6501						;-------------------------------------------------------------------------
6502						;
6503						; Hardware scrolling wraparound size settings for screen mode group.
6504						;
6505						; The values for group 4 (1 KB) are bogus - the Mode 7 addressing
6506						; wraparound is handled differently.
6507						;
6508	.e180					latchBit5ForScreenMODEGroup:
6509	>e180	0d				                .byte 5|8                    ;20 KB
6510	>e181	05				                .byte 5|0                    ;16 KB
6511	>e182	0d				                .byte 5|8                    ;10 KB
6512	>e183	05				                .byte 5|0                    ; 8 KB
6513	.e184					latchBit4ForScreenMODEGroup:
6514	>e184	04				                .byte 4|0                    ;20 KB (also benign value for 1 KB)
6515	>e185	04				                .byte 4|0                    ;16 KB
6516	>e186	0c				                .byte 4|8                    ;10 KB
6517	>e187	0c				                .byte 4|8                    ; 8 KB
6518	>e188	04				                .byte 4|0                    ;(benign value for 1 KB)

6520						;-------------------------------------------------------------------------

6522	.e189					screenSizeHighByteForScreenMODEGroup:
6523	>e189	50				                .byte $50
6524	>e18a	40				                .byte $40
6525	>e18b	28				                .byte $28
6526	>e18c	20				                .byte $20
6527	>e18d	04				                .byte $04
6528	.e18e					startScreenAddressHighByteForScreenMODEGroup:
6529	>e18e	30				                .byte $30
6530	>e18f	40				                .byte $40
6531	>e190	58				                .byte $58
6532	>e191	60				                .byte $60
6533	>e192	7c				                .byte $7c
6534	.e193					crtcRegisterLastIndexForScreenMODEGroup:
6535	>e193	0b				                .byte (crtcRegisterValues20KB-crtcRegisterValues)+$0B
6536	>e194	17				                .byte (crtcRegisterValues16KB-crtcRegisterValues)+$0B
6537	>e195	23				                .byte (crtcRegisterValues10KB-crtcRegisterValues)+$0B
6538	>e196	2f				                .byte (crtcRegisterValues8KB-crtcRegisterValues)+$0B
6539	>e197	3b				                .byte (crtcRegisterValues1KB-crtcRegisterValues)+$0B
6540	.e198					crtcRegisterValues:
6541	.e198					crtcRegisterValues20KB:                   ;MODEs 0/1/2
6542	>e198	7f				                .byte $7F            ;R0 - Horizontal Total
6543	>e199	50				                .byte $50            ;R1 - Horizontal Displayed
6544	>e19a	62				                .byte $62            ;R2 - Horizontal Sync
6545	>e19b	28				                .byte $28            ;R3 - Sync Width (%vvvvhhhh)
6546	>e19c	26				                .byte $26            ;R4 - Vertical Total
6547	>e19d	00				                .byte $00            ;R5 - Vertical Total Adjust
6548	>e19e	20				                .byte $20            ;R6 - Vertical Displayed
6549	>e19f	22				                .byte $22            ;R7 - Vertical Sync Position
6550	>e1a0	01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6551	>e1a1	07				                .byte $07               ;R9 - Scan lines per character
6552	>e1a2	67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6553	>e1a3	08				                .byte 8                    ;R11 - Cursor End
6554	.e1a4					crtcRegisterValues16KB:                    ;MODE 3
6555	>e1a4	7f				                .byte $7F                 ;R0 - Horizontal Total
6556	>e1a5	50				                .byte $50                 ;R1 - Horizontal Displayed
6557	>e1a6	62				                .byte $62                 ;R2 - Horizontal Sync
6558	>e1a7	28				                .byte $28                 ;R3 - Sync Width (%vvvvhhhh)
6559	>e1a8	1e				                .byte $1e                 ;R4 - Vertical Total
6560	>e1a9	02				                .byte $02                 ;R5 - Vertical Total Adjust
6561	>e1aa	19				                .byte $19                 ;R6 - Vertical Displayed
6562	>e1ab	1b				                .byte $1B                 ;R7 - Vertical Sync Position
6563	>e1ac	01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6564	>e1ad	09				                .byte $09               ;R9 - Scan lines per character
6565	>e1ae	67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6566	>e1af	09				                .byte 9                      ;R11 - Cursor End
6567	.e1b0					crtcRegisterValues10KB:                      ;MODEs 4/5
6568	>e1b0	3f				                .byte $3f                 ;R0 - Horizontal Total
6569	>e1b1	28				                .byte $28                 ;R1 - Horizontal Displayed
6570	>e1b2	31				                .byte $31                 ;R2 - Horizontal Sync
6571	>e1b3	24				                .byte $24                 ;R3 - Sync Width (%vvvvhhhh)
6572	>e1b4	26				                .byte $26                 ;R4 - Vertical Total
6573	>e1b5	00				                .byte $00                 ;R5 - Vertical Total Adjust
6574	>e1b6	20				                .byte $20                 ;R6 - Vertical Displayed
6575	>e1b7	22				                .byte $22                 ;R7 - Vertical Sync Position
6576	>e1b8	01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6577	>e1b9	07				                .byte $07               ;R9 - Scan lines per character
6578	>e1ba	67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6579	>e1bb	08				                .byte 8                      ;R11 - Cursor End
6580	.e1bc					crtcRegisterValues8KB:                       ;MODE 6
6581	>e1bc	3f				                .byte $3F                 ;R0 - Horizontal Total
6582	>e1bd	28				                .byte $28                 ;R1 - Horizontal Displayed
6583	>e1be	31				                .byte $31                 ;R2 - Horizontal Sync
6584	>e1bf	24				                .byte $24                 ;R3 - Sync Width (%vvvvhhhh)
6585	>e1c0	1e				                .byte $1e                 ;R4 - Vertical Total
6586	>e1c1	02				                .byte $02                 ;R5 - Vertical Total Adjust
6587	>e1c2	19				                .byte $19                 ;R6 - Vertical Displayed
6588	>e1c3	1b				                .byte $1B                 ;R7 - Vertical Sync Position
6589	>e1c4	01				                .byte CRTC.R8.cursorDelay0|CRTC.R8.displayDelay0|CRTC.R8.interlaceSync ;R8 - Interlace/Delay
6590	>e1c5	09				                .byte $09               ;R9 - Scan lines per character
6591	>e1c6	67				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|7 ;R10 - Cursor blink/start
6592	>e1c7	09				                .byte 9                      ;R11 - Cursor End
6593	.e1c8					crtcRegisterValues1KB:                       ;MODE 7
6594	>e1c8	3f				                .byte $3f                 ;R0 - Horizontal Total
6595	>e1c9	28				                .byte $28                 ;R1 - Horizontal Displayed
6596	>e1ca	33				                .byte $33                 ;R2 - Horizontal Sync
6597	>e1cb	24				                .byte $24                 ;R3 - Sync Width (%vvvvhhhh)
6598	>e1cc	1e				                .byte $1e                 ;R4 - Vertical Total
6599	>e1cd	02				                .byte $02                 ;R5 - Vertical Total Adjust
6600	>e1ce	19				                .byte $19                 ;R6 - Vertical Displayed
6601	>e1cf	1b				                .byte $1b                 ;R7 - Vertical Sync Position
6602	>e1d0	93				                .byte CRTC.R8.cursorDelay2|CRTC.R8.displayDelay1|CRTC.R8.interlaceSyncAndVideo ;R8 - Interlace/Delay
6603	>e1d1	12				                .byte $12               ;R9 - Scan lines per character
6604	>e1d2	72				                .byte CRTC.R10.blink|CRTC.R10.slowBlink|18 ;R10 - Cursor blink/start
6605	>e1d3	13				                .byte 19                     ;R11 - Cursor End

6607						;-------------------------------------------------------------------------
6608						;
6609						; Default ECF patterns [MasRef E.3-16]
6610						;
6611						; Only half the pattern is stored. Each pattern repeats every 4
6612						; scanlines.
6613						;
6614	.e1d4					defaultECFPatterns:
6615						                ; MODE 4
6616	>e1d4	aa 00 aa 00			                .byte $aa,$00,$aa,$00        ;1 - Dark grey
6617	>e1d8	aa 55 aa 55			                .byte $aa,$55,$aa,$55        ;2 - Grey
6618	>e1dc	ff 55 ff 55			                .byte $ff,$55,$ff,$55        ;3 - Light grey
6619	>e1e0	11 22 44 88			                .byte $11,$22,$44,$88        ;4 - Hatching

6621						                ; MODE 1/5
6622	>e1e4	a5 0f a5 0f			                .byte $a5,$0f,$a5,$0f        ;1 - Red-orange
6623	>e1e8	a5 5a a5 5a			                .byte $a5,$5a,$a5,$5a        ;2 - Orange
6624	>e1ec	f0 5a f0 5a			                .byte $f0,$5a,$f0,$5a        ;3 - Yellow-orange
6625	>e1f0	f5 fa f5 fa			                .byte $f5,$fa,$f5,$fa        ;4 - Cream

6627						                ; MODE 2
6628	>e1f4	0b 07 0b 07			                .byte $0b,$07,$0b,$07        ;1 - Orange
6629	>e1f8	23 13 23 13			                .byte $23,$13,$23,$13        ;2 - Pink
6630	>e1fc	0e 0d 0e 0d			                .byte $0e,$0d,$0e,$0d        ;3 - Yellow-green
6631	>e200	1f 2f 1f 2f			                .byte $1f,$2f,$1f,$2f        ;4 - Cream

6633						                ; MODE 0
6634	>e204	cc 00 cc 00			                .byte $cc,$00,$cc,$00        ;0 - Dark grey
6635	>e208	cc 33 cc 33			                .byte $cc,$33,$cc,$33        ;1 - Grey
6636	>e20c	ff 33 ff 33			                .byte $ff,$33,$ff,$33        ;2 - Light grey
6637	>e210	03 0c 30 c0			                .byte $03,$0c,$30,$c0        ;4 - Hatching

6639	.e214					LE204:
6640	>e214	01				                .byte $01                    ;---
6641	>e215	01				                .byte $01                    ;--h
6642	>e216	03				                .byte $03                    ;-v-
6643	>e217	03				                .byte $03                    ;-vh
6644	>e218	02				                .byte $02                    ;x--
6645	>e219	00				                .byte $00                    ;x-h
6646	>e21a	02				                .byte $02                    ;xv-
6647	>e21b	00				                .byte $00                    ;xvh

6649	.e21c					scrollRoutinesTable:
6650	>e21c	5f c9				                .word LC95F
6651	>e21e	6b c9				                .word LC96B
6652	>e220	5f c9				                .word LC95F
6653	>e222	6b c9				                .word LC96B
6654	>e224	9d c9				                .word LC99D
6655	>e226	9d c9				                .word LC99D
6656	>e228	a4 c9				                .word LC9A4
6657	>e22a	a4 c9				                .word LC9A4
6658	>e22c	c3 c9				                .word LC9C3
6659	>e22e	2d ca				                .word LCA2D
6660	>e230	c3 c9				                .word LC9C3
6661	>e232	2d ca				                .word LCA2D
6662	>e234	f1 ca				                .word LCAF1
6663	>e236	f1 ca				                .word LCAF1
6664	>e238	fa ca				                .word LCAFA
6665	>e23a	fa ca				                .word LCAFA

6667						;-------------------------------------------------------------------------
6668						;
6669						; Get address of soft character definition.
6670						;
6671						; entry:
6672						;
6673						; A = character (32-255)
6674						;
6675						; exit:
6676						;
6677						; (ZTEMPC) = address
6678						;
6679	.e23c					getSoftCharacterDefinitionAddress:
6680	.e23c	0a		asl a		                asl a                        ;a bcdefgh0
6681	.e23d	2a		rol a		                rol a                        ;b cdefgh0a
6682	.e23e	2a		rol a		                rol a                        ;c defgh0ab
6683	.e23f	a8		tay		                tay
6684	.e240	29 03		and #$03	                and #$03                     ;c 000000ab
6685	.e242	2a		rol a		                rol a                        ;0 00000abc
6686	.e243	69 88		adc #$88	                adc #(>andy.softCharacterDefinitions)-1
6687	.e245	85 df		sta $df		                sta ZTEMPC+1
6688	.e247	98		tya		                tya                          ;0 defgh0ab
6689	.e248	29 f8		and #$f8	                and #$F8                     ;0 defgh000
6690	.e24a	85 de		sta $de		                sta ZTEMPC+0
6691	.e24c	60		rts		                rts                          ;

6693						;-------------------------------------------------------------------------
6694						;
6695						; OSBYTE 165 (&A5) Read output cursor position [MasRef D.2-50]
6696						;
6697	.e24d					osbyteA5:
6698	.e24d	20 88 f4	jsr $f488	                jsr withMOSROM
6699	.e250	24 d0		bit $d0		                bit STATE
6700	.e252	50 0e		bvc $e262	                bvc getTextCursorPositionWithColumn81                    ;taken if cursor editing
6701	.e254	20 be e2	jsr $e2be	                jsr exchangeEditCursorPositionAndTextCursorPosition
6702	.e257	20 62 e2	jsr $e262	                jsr getTextCursorPositionWithColumn81
6703	.e25a	da		phx		                phx
6704	.e25b	5a		phy		                phy
6705	.e25c	20 be e2	jsr $e2be	                jsr exchangeEditCursorPositionAndTextCursorPosition
6706	.e25f	7a		ply		                ply
6707	.e260	fa		plx		                plx
6708	.e261	60		rts		                rts

6710						;-------------------------------------------------------------------------
6711						;
6712						; Get text cursor position, taking the column 81 flag into account and
6713						; reporting the X coordinate as N+1 in that case.
6714						;
6715	.e262					getTextCursorPositionWithColumn81:
6716	.e262	20 7d e2	jsr $e27d	                jsr getTextCursorPosition
6717	.e265	2c 6c 03	bit $036c	                bit vduv.column81
6718	.e268	10 01		bpl $e26b	                bpl +                       ;taken if not at column 81
6719	.e26a	e8		inx		                inx                         ;X=81
6720	.e26b					+
6721	.e26b	60		rts		                rts

6723						;-------------------------------------------------------------------------

6725	.e26c					LE25C:
6726	.e26c	38		sec		                sec
6727	.e26d	ad 0a 03	lda $030a	                lda vduv.textWindowRight
6728	.e270	ed 08 03	sbc $0308	                sbc vduv.textWindowLeft
6729	.e273	48		pha		                pha
6730	.e274	a9 00		lda #$00	                lda #$00
6731	.e276	a8		tay		                tay
6732	.e277	80 10		bra $e289	                bra LE279

6734						;-------------------------------------------------------------------------
6735						;
6736						; OSBYTE 134 (&86) Read text cursor position [MasRef D.2-41]
6737						;
6738	.e279					osbyte86:
6739	.e279	24 d0		bit $d0		                bit STATE
6740	.e27b	50 d0		bvc $e24d	                bvc osbyteA5       ;taken if not cursor editing
6741	.e27d					getTextCursorPosition:
6742	.e27d	a9 02		lda #$02	                lda #VDUVariables.cursorFlags.invertHorizontal
6743	.e27f	a0 10		ldy #$10	                ldy #VDUVariables.textCursorXPosition-VDUVariables.textWindow
6744	.e281	a2 00		ldx #$00	                ldx #VDUVariables.textWindowLeft-VDUVariables.textWindow
6745	.e283	20 9a e2	jsr $e29a	                jsr getTextWindowRelativePosition
6746	.e286	48		pha		                pha                          ;save X position
6747	.e287	a9 04		lda #$04	                lda #VDUVariables.cursorFlags.invertVertical
6748	.e289					LE279:
6749	.e289	c8		iny		                iny               ;i.e., offset of textCursorYPosition
6750	.e28a	a2 03		ldx #$03	                ldx #VDUVariables.textWindowTop-VDUVariables.textWindow
6751	.e28c	20 9a e2	jsr $e29a	                jsr getTextWindowRelativePosition
6752	.e28f	aa		tax		                tax                          ;X = Y position
6753	.e290	a8		tay		                tay                          ;Y = Y position
6754	.e291	a9 08		lda #$08	                lda #vduv.cursorFlags.swapAxes
6755	.e293	2c 66 03	bit $0366	                bit vduv.cursorFlags
6756	.e296	f0 24		beq $e2bc	                beq plx_rts ;taken if axes unswapped - so X = X position, Y = Y position
6757	.e298	7a		ply		                ply                          ;Y = Y position, X = X position
6758	.e299	60		rts		                rts

6760						;-------------------------------------------------------------------------
6761						;
6762						; Get text window-relative cursor position, taking into account cursor
6763						; flags.
6764						;
6765						; entry:
6766						;
6767						; A = cursorFlags bit for axis of interest - invertHorizontal or invertVertical
6768						;
6769						; X = offset in VDU variables of text window minimum for axis of interest
6770						;
6771						; Y = offset in VDU variables of cursor position for axis of interest
6772						;
6773						; exit:
6774						;
6775						; A = text window-relative coordinate
6776						;
6777	.e29a					getTextWindowRelativePosition:
6778	.e29a	38		sec		                sec                     ;C=1 ready for the subtraction
6779	.e29b	2c 66 03	bit $0366	                bit vduv.cursorFlags ;test cursor flags inversion bit of interest
6780	.e29e	f0 0b		beq $e2ab	                beq axisNotInverted
6781	.e2a0					axisInverted:
6782	.e2a0	8a		txa		                txa
6783	.e2a1	49 02		eor #$02	                eor #$02                     ;swap min and max
6784	.e2a3	aa		tax		                tax
6785	.e2a4	bd 08 03	lda $0308,x	                lda vduv.textWindow,x
6786	.e2a7	f9 08 03	sbc $0308,y	                sbc vduv.textWindow,y
6787	.e2aa	60		rts		                rts

6789	.e2ab					axisNotInverted:
6790	.e2ab	b9 08 03	lda $0308,y	                lda vduv.textWindow,y
6791	.e2ae	fd 08 03	sbc $0308,x	                sbc vduv.textWindow,x
6792	.e2b1	60		rts		                rts

6794						;-------------------------------------------------------------------------
6795						;
6796						; Get default bounds for current mode.
6797						;
6798						; exit:
6799						;
6800						; X = max column (19, 39 or 79)
6801						;
6802						; Y = max row (24 or 31)
6803						;
6804						; preserves: A, C
6805						;
6806	.e2b2					getDefaultBoundsForCurrentScreenMODE:
6807	.e2b2	ae 55 03	ldx $0355	                ldx vduv.currentScreenMODE
6808	.e2b5	bc 19 e1	ldy $e119,x	                ldy modeMaxColumn,x          ;Y = max column
6809	.e2b8	5a		phy		                phy                          ;save max column
6810	.e2b9	bc 11 e1	ldy $e111,x	                ldy modeMaxRow,x             ;Y = max row
6811	.e2bc					plx_rts:
6812	.e2bc	fa		plx		                plx                          ;X = max column
6813	.e2bd	60		rts		                rts

6815						;-------------------------------------------------------------------------
6816						;
6817						; Swap edit cursor position and text cursor position.
6818						;
6819	.e2be					exchangeEditCursorPositionAndTextCursorPosition:
6820	.e2be	a2 18		ldx #$18	                ldx #VDUVariables.textCursorXPosition
6821	.e2c0	a0 64		ldy #$64	                ldy #VDUVariables.editCursorXPosition

6823						;-------------------------------------------------------------------------
6824						;
6825						; Swap 2 bytes in the VDU variables.
6826						;
6827						; entry:
6828						;
6829						; X = offset of one set of 2 bytes
6830						;
6831						; Y = offset of the other set of 2 bytes
6832						;
6833	.e2c2					exchangeTwoVDUBytes:
6834	.e2c2	a9 02		lda #$02	                lda #$02
6835	.e2c4	80 06		bra $e2cc	                bra exchangeVDUVariables

6837						;-------------------------------------------------------------------------
6838						;
6839						; Swap graphics cursor and old graphics cursor.
6840						;
6841	.e2c6					LE2B6:
6842	.e2c6	a2 24		ldx #$24	                ldx #VDUVariables.graphicsCursorPixelsX
6843	.e2c8					LE2B8:
6844	.e2c8	a0 14		ldy #$14	                ldy #VDUVariables.oldGraphicsCursorPixelsX

6846						;-------------------------------------------------------------------------
6847						;
6848						; Swap 4 bytes in the VDU variables.
6849						;
6850						; entry:
6851						;
6852						; X = offset of one set of 4 bytes
6853						;
6854						; Y = offset of the other set of 4 bytes
6855						;
6856	.e2ca					exchangeFourVDUBytes:
6857	.e2ca	a9 04		lda #$04	                lda #$04

6859						;-------------------------------------------------------------------------
6860						;
6861						; Swap bytes in the VDU variables.
6862						;
6863						; entry:
6864						;
6865						; A = number of bytes to swap
6866						;
6867						; X = offset of one set of bytes
6868						;
6869						; Y = offset of the other set of bytes
6870						;
6871	.e2cc					exchangeVDUVariables:
6872	.e2cc	48		pha		                pha                          ;save count remaining
6873	.e2cd	bd 00 03	lda $0300,x	                lda vduv,x
6874	.e2d0	48		pha		                pha
6875	.e2d1	b9 00 03	lda $0300,y	                lda vduv,y
6876	.e2d4	9d 00 03	sta $0300,x	                sta vduv,x
6877	.e2d7	68		pla		                pla
6878	.e2d8	99 00 03	sta $0300,y	                sta vduv,y
6879	.e2db	e8		inx		                inx
6880	.e2dc	c8		iny		                iny
6881	.e2dd	68		pla		                pla
6882	.e2de	3a		dec a		                dec a
6883	.e2df	d0 eb		bne $e2cc	                bne exchangeVDUVariables
6884	.e2e1	60		rts		                rts

6886						;-------------------------------------------------------------------------
6887						;
6888						; Test current VDU4/VDU5 status.
6889						;
6890						; exit:
6891						;
6892						; Z=0 if VDU5 mode
6893	.e2e2					testVDU5State:
6894	.e2e2	a5 d0		lda $d0		                lda STATE
6895	.e2e4	29 20		and #$20	                and #STATE.isVDU5
6896	.e2e6	60		rts		                rts

6898						;-------------------------------------------------------------------------

6901	.e2e7					LE2E7:
6902	.e2e7	20 88 f4	jsr $f488	                jsr withMOSROM
6903	.e2ea	4c 65 ea	jmp $ea65	                jmp callPrinterDriverWithPrinterBuffer

6906						;-------------------------------------------------------------------------

6909	.e2ed					LE2ED:
6910	.e2ed	20 88 f4	jsr $f488	                jsr withMOSROM
6911	.e2f0	4c e4 e9	jmp $e9e4	                jmp LE8B9

6914						;-------------------------------------------------------------------------

6917	.e2f3					LE2F3:
6918	.e2f3	20 88 f4	jsr $f488	                jsr withMOSROM
6919	.e2f6	6c 26 02	jmp ($0226)	                jmp (VDUV)

6922						;-------------------------------------------------------------------------

6924						; Default vector table
6925						; ====================
6926	.e2f9					defaultVectorTable: .block
6927	>e2f9	60 fb				                .word badCommandError        ; USERV=$200
6928	>e2fb	7e e5				                .word defaultBRKHandler      ; BRKV=$202
6929	>e2fd	18 e6				                .word irq1EntryPoint         ; IRQ1V=$204
6930	>e2ff	25 e6				                .word irq2EntryPoint         ; IRQ2V=$206
6931	>e301	2d e9				                .word oscliEntryPoint        ; CLIV=$208
6932	>e303	92 ef				                .word osbyteEntryPoint       ; BYTEV=$20a
6933	>e305	5c ef				                .word oswordEntryPoint       ; WORDV=$20c
6934	>e307	4d e9				                .word oswrchEntryPoint       ; WRCHV=$20e
6935	>e309	ec e8				                .word osrdchEntryPoint       ; RDCHV=$210
6936	.e30b					fsVectors: .block
6937	>e30b	1b ff				                .word E_FILEV                ; FILEV=$212
6938	>e30d	1e ff				                .word E_ARGSV                ; ARGSV=$214
6939	>e30f	21 ff				                .word E_BGETV                ; BGETV=$216
6940	>e311	24 ff				                .word E_BPUTV                ; BPUTV=$218
6941	>e313	27 ff				                .word E_GBPBV                ; GBPBV=$21a
6942	>e315	2a ff				                .word E_FINDV                ; FINDV=$21c
6943	>e317	2d ff				                .word E_FSCV                 ; FSCV=$21e
6944	.e319					end:
6945						                .bend
6946	>e319	aa ff				                .word rtsFFAA                ; EVENTV=$220
6947	>e31b	aa ff				                .word rtsFFAA                ; UPTV=$222
6948	>e31d	aa ff				                .word rtsFFAA                ; NETV=$224
6949	>e31f	aa ff				                .word rtsFFAA                ; VDUV=$226
6950	>e321	59 f5				                .word keyEntryPoint          ; KEYV=$228
6951	>e323	6e eb				                .word insEntryPoint          ; INSV=$22a
6952	>e325	23 eb				                .word remEntryPoint          ; REMV=$22c
6953	>e327	a6 ea				                .word cnpEntryPoint          ; CNPV=$22e
6954	>e329	aa ff				                .word rtsFFAA                ; IND1V=$230
6955	>e32b	aa ff				                .word rtsFFAA                ; IND2V=$232
6956	>e32d	aa ff				                .word rtsFFAA                ; IND3V=$234
6957	.e32f					end:
6958						                .bend

6960						                ; valueFF is a (presumably arbitrary) byte with the
6961						                ; value 255, that's BIT'd in a few places to set the V
6962						                ; flag.
6963	.e32f					defaultMOSVariables:
6964	>e32f	90 01				                .word mosVariables-166       ;mosVariablesAddress
6965	>e331	9f 0d				                .word extendedVectorSpace    ;extendedVectorSpaceAddress
6966	>e333	a1 02				                .word romInformationTable  ;romInformationTableAddress
6967	>e335	1e f7				                .word keyTranslationTable-16 ;keyboardTranslationTableAddress
6968	>e337	00 03				                .word vduv                   ;vduVariablesAddress
6969	>e339	00				                .byte $00                    ;cfsTimeoutCounter
6970	>e33a	00				                .byte $00                    ;inputSource
6971	>e33b	ff				                .byte $FF                    ;keyboardSemaphore
6972	>e33c	00				                .byte $00                    ;romPollingSemaphore
6973	>e33d	00				                .byte $00                    ;oshwm
6974	>e33e	01				                .byte $01                    ;rs423InputInterpretationStatus
6975	>e33f	00				                .byte $00                    ;noignoreState
6976	>e340	00				                .byte $00                    ;cfsRFSFSSwitch
6977	>e341	00				                .byte $00                    ;vcontrolRegister
6978	>e342	00				                .byte $00                    ;vpaletteRegister
6979	>e343	00				                .byte $00                    ;romActiveAtLastBRK
6980	>e344	ff				                .byte $FF                    ;basicROMNumber
6985	>e345	02				                .byte $02                    ;currentADCChannel
6986	>e346	02				                .byte $02                    ;maximumADCChannel
6988	>e347	00				                .byte $00                    ;adcConversionType
6989	>e348	ff				                .byte $FF                    ;rs423Busy
6993	>e349	42				                .byte $42                    ;aciaControlRegister
6995	>e34a	19				                .byte $19                    ;flashCounter
6996	>e34b	19				                .byte $19                    ;firstFlashColourDuration
6997	>e34c	19				                .byte $19                    ;secondFlashColourDuration
6998	>e34d	32				                .byte $32                    ;keyboardAutoRepeatDelay
6999	>e34e	08				                .byte $08                    ;keyboardAutoRepeatRate
7000	>e34f	00				                .byte $00                    ;execFileHandle
7001	>e350	00				                .byte $00                    ;spoolFileHandle
7002	>e351	00				                .byte $00                    ;breakAndESCAPEEffect
7003	>e352	00				                .byte $00                    ;keyboardStatus
7004	>e353	20				                .byte $20                    ;keyboardStatusByte
7005	>e354	09				                .byte $09                    ;rs423InputBufferMinimumSpace
7006	>e355	00				                .byte $00                    ;rs423Ignore
7007	>e356	00				                .byte $00                    ;rs423Destination
7008	>e357	00				                .byte $00                    ;econetInterceptionStatus
7009	>e358	00				                .byte $00                    ;econetInputInterpretationStatus
7010	>e359	00				                .byte $00                    ;econetOutputInterpretationStatus
7011	>e35a	00				                .byte $00                    ;speechSystemByte1
7012	>e35b	00				                .byte $00                    ;soundSuppressionStatus
7013	>e35c	03				                .byte $03                    ;bellChannel
7014	>e35d	90				                .byte $90                    ;bellSound
7015	>e35e	64				                .byte $64                    ;bellFrequency
7016	>e35f	06				                .byte $06                    ;bellDuration
7017	>e360	81				                .byte $81                    ;startupMessageSuppressionStatus
7018	>e361	00				                .byte $00                    ;softKeyStringLength
7019	>e362	00				                .byte $00                    ;pagedModeCounter
7020	>e363	00				                .byte $00                    ;vduQueueNegativeLength
7021	>e364	09				                .byte $09                    ;tabKeyCode
7022	>e365	1b				                .byte $1B                    ;escapeCharacter
7023	>e366	01				                .byte $01                    ;input192To207Interpretation
7024	>e367	d0				                .byte $D0                    ;input208To223Interpretation
7025	>e368	e0				                .byte $E0                    ;input224To239Interpretation
7026	>e369	f0				                .byte $F0                    ;input240To255Interpretation
7027	>e36a	01				                .byte $01                    ;softKeyInterpretation
7028	>e36b	80				                .byte $80                    ;shiftSoftKeyInterpretation
7029	>e36c	90				                .byte $90                    ;ctrlSoftKeyInterpretation
7030	>e36d	00				                .byte $00                    ;shiftCtrlSoftKeyInterpretation
7031	>e36e	00				                .byte $00                    ;escapeKeyStatus
7032	>e36f	00				                .byte $00                    ;escapeEffects
7033	>e370	ff				valueFF:        .byte $FF                    ;userVIAInterruptMask
7034	>e371	ff				                .byte $FF                    ;rs423InterruptMask
7035	>e372	ff				                .byte $FF                    ;systemVIAInterruptMask
7036	>e373	00				                .byte $00                    ;tubePresence
7037	>e374	00				                .byte $00                    ;speechSystemByte2
7038	>e375	00				                .byte $00                    ;characterDestinationStatus
7039	>e376	00				                .byte editKeysMode.editKeys  ;editKeysMode
7040	>e377	30				                .byte $30                    ;numericKeypadInterpretation
7041	>e378	01				                .byte $01                    ;shadowRAMState
7042	>e379	00				                .byte $00                    ;countryFlag
7043	>e37a	00				                .byte $00                    ;userFlag
7047	>e37b	64				                .byte $64                    ;serialULARegister
7049	>e37c	05				                .byte initialTimerSwitchState ;timerSwitchState
7050	>e37d	ff				                .byte $FF                    ;softKeyConsistencyFlag
7054	>e37e	01				                .byte $01                    ;printerDriverType
7056	>e37f	0a				                .byte $0a                    ;printerIgnoreChar
7057	>e380	00				                .byte $00                    ;breakVectorByte0
7058	>e381	00				                .byte $00                    ;breakVectorByte1
7059	>e382	00				                .byte $00                    ;breakVectorByte2
7060	>e383	00				                .byte $00                    ;vduDriverMemory
7061	>e384	00				                .byte $00                    ;displayMemory
7062	>e385	ff				                .byte $FF                    ;currentLanguageROM

7064						;-------------------------------------------------------------------------
7065						;
7066						; STARTUP
7067						; =======
7068						;
7069	.e386					resetEntryPoint:                ;e364
7070	.e386	a9 40		lda #$40	                lda #$40        ; $40 = RTI
7071	.e388	8d 00 0d	sta $0d00	                sta nmiEntryPoint ; make NMI routine a no-op
7072	.e38b	78		sei		                sei
7073	.e38c	a9 53		lda #$53	                lda #$53                 ; ???
7074	.e38e	8d 8e fe	sta $fe8e	                sta LFE8E                ; ???
7086	.e391	20 a9 e5	jsr $e5a9	                jsr selectTerminalROM ; Page in ROM 15 and continue
7087	.e394	4c 1d 80	jmp $801d	                jmp reset

7090						;-------------------------------------------------------------------------

7099						;-------------------------------------------------------------------------

7102						                .include "isSecondProcessorPresent.s65"

:21	;******  Processing file: src/isSecondProcessorPresent.s65

1						;-------------------------------------------------------------------------
2						;
3						; Check if a coprocessor is attached to the Tube
4						;
5						; exit:
6						;
7						; C=0 = no Tube
8						;
9						; C=1 = Tube
10						;

12						; (Note that this code is always included in MOS 5.xx, even though
13						; there's no second processor support.)

15	.e397					isSecondProcessorPresent:
19	.e397	a2 01		ldx #$01	                ldx #$01
20	.e399	8e e0 fe	stx $fee0	                stx $fee0;tube.status1
21	.e39c	ad e0 fe	lda $fee0	                lda $fee0;tube.status1
22	.e39f	49 01		eor #$01	                eor #$01
23	.e3a1	a2 81		ldx #$81	                ldx #$81
24	.e3a3	8e e0 fe	stx $fee0	                stx $fee0;tube.status1
25	.e3a6	2d e0 fe	and $fee0	                and $fee0;tube.status1       ; Cy=0 if no Tube, Cy=1 if Tube
26	.e3a9	6a		ror a		                ror a
27	.e3aa	60		rts		                rts

:15	;******  Return to file: src/mos.s65

7105						;-------------------------------------------------------------------------
7106						;
7107						;
7108						;

7114	.e3ab					LE389:
7115	.e3ab	5a		phy		                phy
7116	.e3ac	da		phx		                phx
7118	.e3ad	20 a9 e5	jsr $e5a9	                jsr selectTerminalROM
7119	.e3b0	20 7c 87	jsr $877c	                jsr L873F
7128	.e3b3	c9 01		cmp #$01	                cmp #$01                     ;C set if ROM is inserted
7129	.e3b5	fa		plx		                plx
7130	.e3b6	7a		ply		                ply
7131	.e3b7	4c 9a e5	jmp $e59a	                jmp selectROMX

7133						;-------------------------------------------------------------------------
7134						;
7135						; Scan ROMs and fill in the rom information table.
7136						;
7137						; entry:
7138						;
7139						; X = first ROM to scan
7140						;
7142	.e3ba					scanROMs: .proc
7143						                .include "scan_roms.s65"

:16	;******  Processing file: src/scan_roms.s65

1	.e3ba	8a		txa		                txa               ;A = ROM of interest
2	.e3bb	a8		tay		                tay               ;Y = ROM of interest
7	.e3bc	20 1e e4	jsr $e41e	                jsr isROMValid
8	.e3bf	90 35		bcc $e3f6	                bcc currentROMInvalid        ;taken if ROM invalid
9	.e3c1	a6 f4		ldx $f4		                ldx $F4                      ;start from current ROM
10	.e3c3	a4 f4		ldy $f4		                ldy $F4                      ;start from current ROM
11	.e3c5					nextOtherROM:
12	.e3c5	c8		iny		                iny                          ;next other ROM
13	.e3c6	c0 10		cpy #$10	                cpy #$10                     ;out of other ROMs?
14	.e3c8	b0 30		bcs $e3fa	                bcs currentROMValid       ;taken if no more other ROMs
24						                ; Start address is $8000-Y, so that there's no need to
25						                ; save Y.
26	.e3ca	98		tya		                tya
27	.e3cb	49 ff		eor #$ff	                eor #$FF
28	.e3cd	85 fa		sta $fa		                sta SEIWKA+0
29	.e3cf	a9 7f		lda #$7f	                lda #$7F
30	.e3d1	85 fb		sta $fb		                sta SEIWKA+1
32	.e3d3					compareLoop:
33	.e3d3	8c 30 fe	sty $fe30	                sty ROMSEL                   ;select other ROM
37	.e3d6	b1 fa		lda ($fa),y	                lda (SEIWKA),y               ;get byte from other ROM
39	.e3d8	8e 30 fe	stx $fe30	                stx ROMSEL                   ;select ROM
43	.e3db	d1 fa		cmp ($fa),y	                cmp (SEIWKA),y               ;same as other ROM?
45	.e3dd	d0 e6		bne $e3c5	                bne nextOtherROM             ;taken if other ROM is good
46	.e3df	e6 fa		inc $fa		                inc SEIWKA+0
47	.e3e1	d0 f0		bne $e3d3	                bne compareLoop
48	.e3e3	e6 fb		inc $fb		                inc SEIWKA+1
49	.e3e5	a5 fb		lda $fb		                lda SEIWKA+1
51	.e3e7	e0 08		cpx #$08	                cpx #8
52	.e3e9	90 02		bcc $e3ed	                bcc +
53	.e3eb	69 02		adc #$02	                adc #2
54	.e3ed					+
56	.e3ed	c9 84		cmp #$84	                cmp #$84                  ;compare only the first 1 KB
57	.e3ef	90 e2		bcc $e3d3	                bcc compareLoop
58						                ; The first 1 KB of the current ROM matches the first
59						                ; 1 KB of some higher-priority ROM, so the current ROM
60						                ; is invalid.
62	.e3f1	a9 01		lda #$01	                lda #1
63	.e3f3	9d a1 02	sta $02a1,x	                sta romInformationTable,x

66	.e3f6					currentROMInvalid:
67	.e3f6	a6 f4		ldx $f4		                ldx $F4
68	.e3f8	80 19		bra $e413	                bra nextROM

70	.e3fa					currentROMValid:
72	.e3fa	8a		txa		                txa
73	.e3fb	a8		tay		                tay
77	.e3fc	20 ab e3	jsr $e3ab	                jsr LE389
79	.e3ff	90 12		bcc $e413	                bcc nextROM
81	.e401	ad 06 80	lda $8006	                lda $8006
82	.e404	9d a1 02	sta $02a1,x	                sta romInformationTable,x
83	.e407	29 8f		and #$8f	                and #$8F
84	.e409	d0 08		bne $e413	                bne nextROM       ;taken if any mandatory bits are set

86						                ; A bogus ROM type means this ROM is the BASIC ROM.
88	.e40b	2c 4b 02	bit $024b	                bit basicROMNumber
89	.e40e	10 03		bpl $e413	                bpl nextROM

92	.e410	8e 4b 02	stx $024b	                stx basicROMNumber

94	.e413					nextROM:
95	.e413	e8		inx		                inx
96	.e414	e0 10		cpx #$10	                cpx #$10
97	.e416	90 a2		bcc $e3ba	                bcc scanROMs
98	.e418	20 a9 e5	jsr $e5a9	                jsr selectTerminalROM

:15	;******  Return to file: src/mos.s65

7144	.e41b	4c 55 82	jmp $8255	                jmp romsScanned     ;not sure why not RTS.
7145						                .endproc

7148						;-------------------------------------------------------------------------
7149						;
7150						; Checks a ROM is valid - i.e., has a valid-looking copyright string.
7151						;
7152						; Entry:
7153						;
7154						; X = ROM to check
7155						;
7156						; Exit:
7157						;
7158						; C=0 if ROM invalid; C=1 if ROM valid
7159						;
7160						; ROM of interest is selected
7161						;
7162	.e41e					isROMValid: .proc ;e3f7
7163	.e41e	20 9a e5	jsr $e59a	                jsr selectROMX
7164	.e421	a2 03		ldx #$03	                ldx #$03
7165	.e423	ac 07 80	ldy $8007	                ldy $8007       ; fetch ROM copyright offset pointer
7166	.e426	18		clc		                clc             ; assume no match
7167	.e427					-
7168	.e427	b9 00 80	lda $8000,y	                lda $8000,y     ; fetch possible ROM copyright char
7169	.e42a	5d 2c e5	eor $e52c,x	                eor sidewaysROMCopyrightPrefix,x     ; Z=1 if it matches "\x0(C)"
7170	.e42d	d0 05		bne $e434	                bne +           ; branch taken if no match
7171	.e42f	c8		iny		                iny             ; next copyright byte
7172	.e430	ca		dex		                dex             ; count 4 chars
7173	.e431	10 f4		bpl $e427	                bpl -
7174	.e433	38		sec		                sec             ; C=1 means a match
7175	.e434					+
7176	.e434	60		rts		                rts
7177						                .pend

7179						;-------------------------------------------------------------------------

7181						; End of STARTUP code
7182						; ===================
7183	.e435					LE40E:
7184	.e435	38		sec		                sec                      ; Call Break Intercept Vector
7185	.e436	20 1f f4	jsr $f41f	                jsr osbyte247EntryPoint
7186	.e439	a2 27		ldx #$27	                ldx #romServiceCallInformReset
7187	.e43b	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
7188	.e43e	ac 56 02	ldy $0256	                ldy execFileHandle ; Get Exec handle, skip past if closed
7189	.e441	f0 08		beq $e44b	                beq LE424
7190	.e443	9c 56 02	stz $0256	                stz execFileHandle           ; Clear Exec handle
7191	.e446	a9 00		lda #$00	                lda #$00                     ; Close Exec channel
7192	.e448	20 ce ff	jsr $ffce	                jsr OSFIND
7193	.e44b					LE424:
7194	.e44b	38		sec		                sec                          ;
7195	.e44c	6e 00 df	ror $df00	                ror hazel.currentFS
7196	.e44f	ad 8d 02	lda $028d	                lda lastBREAKType            ; Soft Break
7197	.e452	f0 04		beq $e458	                beq LE431
7198	.e454	38		sec		                sec                          ;
7199	.e455	6e 02 df	ror $df02	                ror hazel.libFS
7200	.e458					LE431:
7201	.e458	20 f1 ee	jsr $eef1	                jsr LEE64                    ; Set default ROMFS/TAPEFS settings
7202	.e45b	20 ef f2	jsr $f2ef	                jsr osbyte76                    ; Test Shift and Ctrl keys
7206	.e45e	4a		lsr a		                lsr a                        ; Move SHIFT status from b7 to b3
7207	.e45f	4a		lsr a		                lsr a
7208	.e460	4a		lsr a		                lsr a
7209	.e461	4a		lsr a		                lsr a
7211	.e462	4d 8f 02	eor $028f	                eor startupOptions ; Toggle with OSBYTE 255 boot status
7212	.e465	29 08		and #$08	                and #$08
7213	.e467	a8		tay		                tay
7214	.e468	ae 03 df	ldx $df03	                ldx hazel.currentFSROM
7215	.e46b	ad 8d 02	lda $028d	                lda lastBREAKType ; Soft Break, use current filing system
7216	.e46e	f0 09		beq $e479	                beq LE454
7217	.e470	20 a9 e5	jsr $e5a9	                jsr selectTerminalROM
7219	.e473	a2 33		ldx #$33	                ldx #configureTable.file.metadata-configureTable
7220	.e475	20 a1 8a	jsr $8aa1	                jsr readConfigurationByte

7228	.e478	aa		tax		                tax
7229	.e479					LE454:
7230	.e479	3c a1 02	bit $02a1,x	                bit romInformationTable,x
7231	.e47c	10 1f		bpl $e49d	                bpl LE478
7232	.e47e	20 9a e5	jsr $e59a	                jsr selectROMX
7233	.e481	e0 0f		cpx #$0f	                cpx #terminalROM
7234	.e483	d0 0c		bne $e491	                bne LE46C
7235	.e485	20 ac f7	jsr $f7ac	                jsr osbyte7A
7236	.e488	e8		inx		                inx
7237	.e489	f0 19		beq $e4a4	                beq LE47F
7238	.e48b	e0 63		cpx #$63	                cpx #$63
7239	.e48d	f0 15		beq $e4a4	                beq LE47F
7240	.e48f	80 0c		bra $e49d	                bra LE478

7242	.e491					LE46C:
7243	.e491	a9 03		lda #$03	                lda #romServiceCallAutoBoot  ; Filing System selection
7244	.e493	20 03 80	jsr $8003	                jsr $8003
7245	.e496	aa		tax		                tax
7246	.e497	20 a9 e5	jsr $e5a9	                jsr selectTerminalROM
7247	.e49a	8a		txa		                txa
7248	.e49b	f0 2a		beq $e4c7	                beq LE4A3
7249	.e49d					LE478:
7250	.e49d	a2 03		ldx #$03	                ldx #romServiceCallAutoBoot
7251	.e49f	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
7252	.e4a2	f0 23		beq $e4c7	                beq LE4A3
7253	.e4a4					LE47F:
7254	.e4a4	98		tya		                tya
7255	.e4a5	d0 17		bne $e4be	                bne LE499
7256	.e4a7	a9 8d		lda #$8d	                lda #$8D
7257	.e4a9	20 27 ee	jsr $ee27	                jsr osbyte8C8D
7258	.e4ac	a2 e5		ldx #$e5	                ldx #<starRunBOOT
7259	.e4ae	a0 f4		ldy #$f4	                ldy #>starRunBOOT
7260	.e4b0	ce 67 02	dec $0267	                dec startupMessageSuppressionStatus
7261	.e4b3	20 f7 ff	jsr $fff7	                jsr OSCLI
7262	.e4b6	ee 67 02	inc $0267	                inc startupMessageSuppressionStatus
7263	.e4b9	80 0c		bra $e4c7	                bra LE4A3

7265						;-------------------------------------------------------------------------

7267	.e4bb					LE496:
7268	.e4bb	ee 67 02	inc $0267	                inc startupMessageSuppressionStatus ;set bit 0
7269	.e4be					LE499:
7270	.e4be	38		sec		                sec
7271	.e4bf	6e 00 df	ror $df00	                ror hazel.currentFS
7279	.e4c2	a9 8d		lda #$8d	                lda #$8d
7280	.e4c4	20 27 ee	jsr $ee27	                jsr osbyte8C8D
7282	.e4c7					LE4A3:
7283	.e4c7	a9 05		lda #$05	                lda #$05                     ;
7284	.e4c9	ae 85 02	ldx $0285	                ldx printerDriverType        ; *FX5,<current printer>
7285	.e4cc	20 92 ef	jsr $ef92	                jsr osbyteEntryPoint
7286	.e4cf	ad 8d 02	lda $028d	                lda lastBREAKType ; If not Soft Break, select default language
7287	.e4d2	d0 0b		bne $e4df	                bne LE4BB
7288	.e4d4	ae 8c 02	ldx $028c	                ldx currentLanguageROM      ; Get current language ROM
7294	.e4d7	e0 10		cpx #$10	                cpx #$10                     ; <16, normal ROM number, use it
7296	.e4d9	90 0d		bcc $e4e8	                bcc LE4C2
7300	.e4db	e0 1f		cpx #$1f	                cpx #$10+terminalROM ; 16+UTILS ROM, re-enter Supervisor or Tube CLI
7302	.e4dd	f0 49		beq $e528	                beq LE509
7303	.e4df					LE4BB:
7304	.e4df	20 a9 e5	jsr $e5a9	                jsr selectTerminalROM     ; Page in ROM 15 - UTILS ROM
7306	.e4e2	a2 41		ldx #$41	                ldx #configureTable.lang.metadata-configureTable
7307	.e4e4	20 a1 8a	jsr $8aa1	                jsr readConfigurationByte
7311	.e4e7	aa		tax		                tax
7312	.e4e8					LE4C2:
7313	.e4e8	18		clc		                clc

7315						;-------------------------------------------------------------------------
7316						;
7317						; OSBYTE 142 (&8E) Enter language ROM [MasRef D.2-44]
7318						;
7319	.e4e9					osbyte8E:
7326	.e4e9	3c a1 02	bit $02a1,x	                bit romInformationTable,x ; b6=0, error Not a language
7330	.e4ec	50 41		bvc $e52f	                bvc thisIsNotALanguageError
7331	.e4ee	08		php		                php
7332	.e4ef	90 16		bcc $e507	                bcc LE4E1 ;taken if not OSBYTE 142 - so skip ROM check
7333	.e4f1	20 9a e5	jsr $e59a	                jsr selectROMX
7334	.e4f4	ad 06 80	lda $8006	                lda sidewaysROMType
7335	.e4f7	29 0d		and #$0d	                and #%00001101
7336	.e4f9	f0 05		beq $e500	                beq is6502ROM ;taken if low nybble is 0 (6502 BASIC) or 2 (other 6502 ROM)
7340	.e4fb	2c 7a 02	bit $027a	                bit tubePresenceUnused
7342	.e4fe	10 47		bpl $e547	                bpl iCannotRunThisCodeError  ;taken if no Tube - assume impossible to run
7343	.e500					is6502ROM:
7344	.e500	da		phx		                phx                          ;save ROM slot
7345	.e501	a2 2a		ldx #$2a	                ldx #romServiceCallLanguageChange
7346	.e503	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
7347	.e506	fa		plx		                plx                          ;restore ROM slot
7348	.e507					LE4E1:
7349	.e507	8e 8c 02	stx $028c	                stx currentLanguageROM
7350	.e50a	20 9a e5	jsr $e59a	                jsr selectROMX
7351	.e50d	a9 80		lda #$80	                lda #>sidewaysROMName
7352	.e50f	a0 08		ldy #$08	                ldy #(<sidewaysROMName)-1
7353	.e511	20 7d e7	jsr $e77d	                jsr print0TerminatedString
7354	.e514	84 fd		sty $fd		                sty errPtr+0
7355	.e516	20 e7 ff	jsr $ffe7	                jsr OSNEWL
7356	.e519	20 e7 ff	jsr $ffe7	                jsr OSNEWL
7357	.e51c	28		plp		                plp
7363	.e51d	ad 06 80	lda $8006	                lda sidewaysROMType
7364	.e520	29 0d		and #$0d	                and #%00001101
7365	.e522	d0 23		bne $e547	                bne iCannotRunThisCodeError ;taken if low nybble isn't 0 (6502 BASIC) or 2 (other 6502 ROM)
7366	.e524	1a		inc a		                inc a                   ;A=1 on default language entry
7367	.e525	4c 00 80	jmp $8000	                jmp sidewaysROMLanguageEntry

7369	.e528					LE509:
7370	.e528	a9 00		lda #$00	                lda #$00
7377	.e52a	80 66		bra $e592	                bra startCommandLineUI

7380						;-------------------------------------------------------------------------

7382	.e52c					sidewaysROMCopyrightPrefix: .block
7383	>e52c	29 43 28			                .text ")C("
7384	.e52f					end:
7385						                .endblock

7387						;-------------------------------------------------------------------------

7389	.e52f					thisIsNotALanguageError:
7390	.e52f	00		brk #		                brk
7391	>e530	00 54 68 69 73 20 69 73		                .text 0,"This is not a language"
	>e538	20 6e 6f 74 20 61 20 6c 61 6e 67 75 61 67 65

7393						;-------------------------------------------------------------------------

7395	.e547					iCannotRunThisCodeError:
7396	.e547	00		brk #		                brk
7397	>e548	00 49 20 63 61 6e 6e 6f		                .text 0,"I cannot run this code",0
	>e550	74 20 72 75 6e 20 74 68 69 73 20 63 6f 64 65 00

7399						;-------------------------------------------------------------------------
7400						;
7401						; OSBYTE 164 (&A4) Check processor type [MasRef D.2-50]
7402						;
7403	.e560					osbyteA4:
7404	.e560	a2 03		ldx #$03	                ldx #sidewaysROMCopyrightPrefix.end-sidewaysROMCopyrightPrefix
7405	.e562	a0 07		ldy #$07	                ldy #<sidewaysROMCopyrightOffset
7406	.e564	b1 f0		lda ($f0),y	                lda (originalX),y
7407	.e566	a8		tay		                tay
7408	.e567					-
7409	.e567	b1 f0		lda ($f0),y	                lda (originalX),y
7410	.e569	dd 2c e5	cmp $e52c,x	                cmp sidewaysROMCopyrightPrefix,x
7411	.e56c	d0 0f		bne $e57d	                bne rtsE564 ;taken if (C) not found - must be OK, if it's not a ROM?
7412	.e56e	c8		iny		                iny
7413	.e56f	ca		dex		                dex
7414	.e570	10 f5		bpl $e567	                bpl -
7415	.e572	a0 06		ldy #$06	                ldy #<sidewaysROMType
7416	.e574	b1 f0		lda ($f0),y	                lda (originalX),y
7417	.e576	0a		asl a		                asl a
7418	.e577	10 b6		bpl $e52f	                bpl thisIsNotALanguageError ;taken if no language entry point
7419	.e579	29 1a		and #$1a	                and #%00001101<<1
7420	.e57b	d0 ca		bne $e547	                bne iCannotRunThisCodeError ;taken if low nybble wasn't 0 (6502 BASIC) or 2 (other 6502 ROM)
7421	.e57d					rtsE564:
7422	.e57d	60		rts		                rts

7424						;-------------------------------------------------------------------------

7435						;-------------------------------------------------------------------------

7445						;-------------------------------------------------------------------------

7447	.e57e					defaultBRKHandler:
7448	.e57e	a0 00		ldy #$00	                ldy #$00
7449	.e580	20 81 e7	jsr $e781	                jsr printBRKMessage
7450	.e583	20 e7 ff	jsr $ffe7	                jsr OSNEWL
7451	.e586	ad 67 02	lda $0267	                lda startupMessageSuppressionStatus
7452	.e589	6a		ror a		                ror a
7453	.e58a	b0 06		bcs $e592	                bcs startCommandLineUI                   ;taken if bit 0 was set
7454	.e58c	20 e7 ff	jsr $ffe7	                jsr OSNEWL
7455	.e58f	4c bb e4	jmp $e4bb	                jmp LE496

7457						;-------------------------------------------------------------------------

7459	.e592					startCommandLineUI:
7460	.e592	20 a9 e5	jsr $e5a9	                jsr selectTerminalROM
7461	.e595	4c b1 86	jmp $86b1	                jmp commandLineUI

7463						;-------------------------------------------------------------------------
7464						;
7465						; Select paged ROM bank 15 - TERMINAL - with ANDY paged in,
7466						;
7467						; Preserves A/Y
7468	.e598					selectTerminalROMAndANDY:   ;e57f
7469	.e598	a2 8f		ldx #$8f	                ldx #$80|terminalROM
7470						                ; fall through into selectROMX

7472						;-------------------------------------------------------------------------
7473						;-------------------------------------------------------------------------
7474						;
7475						; Select paged ROM bank.
7476						;
7477						; Entry:
7478						;
7479						; X = bank to select.
7480						;
7481						; Preserves A/X/Y/P
7482	.e59a					selectROMX:   ;e581
7483	.e59a	86 f4		stx $f4		                stx $F4
7484	.e59c	8e 30 fe	stx $fe30	                stx ROMSEL
7485	.e59f	60		rts		                rts

7487						;-------------------------------------------------------------------------
7488						;
7489	.e5a0					isROMValidThenSelectTerminalROM:
7490	.e5a0	5a		phy		                phy
7491	.e5a1	20 1e e4	jsr $e41e	                jsr isROMValid
7492	.e5a4	20 a9 e5	jsr $e5a9	                jsr selectTerminalROM
7493	.e5a7	7a		ply		                ply
7494	.e5a8	60		rts		                rts

7496						;-------------------------------------------------------------------------
7497						;
7498						; Select paged ROM bank 15 -
7499						;
7500						; Preserves X/Y
7501	.e5a9					selectTerminalROM:            ;e590
7502	.e5a9	a9 0f		lda #$0f	                lda #terminalROM
7503						                ; fall through into selectROMA

7505						;-------------------------------------------------------------------------
7506						;
7507						; Select paged ROM bank.
7508						;
7509						; A = bank to select.
7510						;
7511						; Preserves A/X/Y/P
7512	.e5ab					selectROMA:                   ;e592
7513	.e5ab	85 f4		sta $f4		                sta $F4         ;update ROMSEL copy
7514	.e5ad	8d 30 fe	sta $fe30	                sta ROMSEL
7515	.e5b0	60		rts		                rts

7517						;-------------------------------------------------------------------------
7518						;
7519						; Select paged ROM bank 15 - TERMINAL - with ANDY paged in,
7520						;
7521						; Preserves A/X/Y

7523	.e5b1					selectTerminalROMAndANDY2:
7524	.e5b1	da		phx		                phx
7525	.e5b2	20 98 e5	jsr $e598	                jsr selectTerminalROMAndANDY
7526	.e5b5	fa		plx		                plx
7527	.e5b6	60		rts		                rts

7529						;-------------------------------------------------------------------------

7531	.e5b7					irqEntryPoint:
7532	.e5b7	85 fc		sta $fc		                sta TEMPA
7533	.e5b9	68		pla		                pla                          ;restore P
7534	.e5ba	48		pha		                pha                          ;save P
7535	.e5bb	29 10		and #$10	                and #$10
7536	.e5bd	d0 03		bne $e5c2	                bne brkEntryPoint
7537	.e5bf	6c 04 02	jmp ($0204)	                jmp (IRQ1V)

7539	.e5c2					brkEntryPoint:
7540	.e5c2	da		phx		                phx
7541	.e5c3	ba		tsx		                tsx
7542	.e5c4	bd 03 01	lda $0103,x	                lda $0103,x                  ;get BRK address+1 LSB
7543	.e5c7	d8		cld		                cld                          ;
7544	.e5c8	38		sec		                sec                          ;
7545	.e5c9	e9 01		sbc #$01	                sbc #$01                     ;get BRK address LSB
7546	.e5cb	85 fd		sta $fd		                sta errPtr+0
7547	.e5cd	bd 04 01	lda $0104,x	                lda $0104,x                  ;get BRK address+1 MSB
7548	.e5d0	e9 00		sbc #$00	                sbc #$00                     ;get BRK address MSB
7549	.e5d2	85 fe		sta $fe		                sta errPtr+1
7550	.e5d4	a5 f4		lda $f4		                lda $F4
7551	.e5d6	8d 4a 02	sta $024a	                sta romActiveAtLastBRK
7552	.e5d9	86 f0		stx $f0		                stx originalX
7553	.e5db	a2 06		ldx #$06	                ldx #romServiceCallBreakInstruction
7554	.e5dd	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
7555	.e5e0	ae 8c 02	ldx $028c	                ldx currentLanguageROM
7556	.e5e3	20 9a e5	jsr $e59a	                jsr selectROMX
7557	.e5e6	fa		plx		                plx
7558	.e5e7	a5 fc		lda $fc		                lda TEMPA
7559	.e5e9	58		cli		                cli
7560	.e5ea	6c 02 02	jmp ($0202)	                jmp (BRKV)

7562						;-------------------------------------------------------------------------

7565	.e5ed					LE5D4:
7566	.e5ed	38		sec		                sec
7567	.e5ee	6e 4f 02	ror $024f	                ror rs423Busy
7568	.e5f1	2c 50 02	bit $0250	                bit aciaControlRegister
7569	.e5f4	10 07		bpl $e5fd	                bpl LE5E4
7570	.e5f6	20 be ed	jsr $edbe	                jsr getRS423InputBufferFreeBytes
7571	.e5f9	a2 00		ldx #$00	                ldx #$00
7572	.e5fb	b0 02		bcs $e5ff	                bcs LE5E6
7573	.e5fd					LE5E4:
7574	.e5fd	a2 40		ldx #$40	                ldx #$40
7575	.e5ff					LE5E6:
7576	.e5ff	4c 3d ea	jmp $ea3d	                jmp resetACIAState

7578	.e602					LE5E9:
7579	.e602	ac 09 fe	ldy $fe09	                ldy ACIA+1
7580	.e605	29 3a		and #$3a	                and #$3A
7581	.e607	d0 3b		bne $e644	                bne LE628
7582	.e609	ae 5c 02	ldx $025c	                ldx rs423Ignore
7583	.e60c	d0 09		bne $e617	                bne LE5FE
7584	.e60e	e8		inx		                inx
7585	.e60f	20 ab eb	jsr $ebab	                jsr osbyte99
7586	.e612	20 be ed	jsr $edbe	                jsr getRS423InputBufferFreeBytes
7587	.e615	90 e6		bcc $e5fd	                bcc LE5E4
7588	.e617					LE5FE:
7589	.e617	60		rts		                rts

7592						;-------------------------------------------------------------------------

7594	.e618					irq1EntryPoint:
7595	.e618	a5 fc		lda $fc		                lda TEMPA
7596	.e61a	48		pha		                pha
7597	.e61b	da		phx		                phx
7598	.e61c	5a		phy		                phy
7600	.e61d	b8		clv		                clv
7602	.e61e	20 28 e6	jsr $e628	                jsr irq1Handler
7603	.e621	7a		ply		                ply
7604	.e622	fa		plx		                plx
7605	.e623	68		pla		                pla
7606	.e624	40		rti		                rti

7608						;-------------------------------------------------------------------------

7610	.e625					irq2EntryPoint:
7611	.e625	a5 fc		lda $fc		                lda TEMPA
7612	.e627	40		rti		                rti

7614						;-------------------------------------------------------------------------

7620	.e628					irq1Handler:
7621	.e628	ad 08 fe	lda $fe08	                lda ACIA+0
7623	.e62b	2d 78 02	and $0278	                and rs423InterruptMask
7625	.e62e	70 02		bvs $e632	                bvs LE616
7626	.e630	10 59		bpl $e68b	                bpl checkForSystemVIAInterrupt
7627	.e632					LE616:
7628	.e632	a6 ea		ldx $ea		                ldx $EA
7629	.e634	ca		dex		                dex
7630	.e635	30 33		bmi $e66a	                bmi LE64E
7631	.e637	70 30		bvs $e669	                bvs rtsE64D
7632	.e639	20 61 f4	jsr $f461	                jsr withTerminalROM
7633	.e63c	4c d7 a8	jmp $a8d7	                jmp LA45D

7635	.e63f					LE623:
7636	.e63f	ac 09 fe	ldy $fe09	                ldy ACIA+1
7637	.e642	2a		rol a		                rol a
7638	.e643	0a		asl a		                asl a
7639	.e644					LE628:
7640	.e644	aa		tax		                tax
7641	.e645	98		tya		                tya
7642	.e646	a0 07		ldy #$07	                ldy #$07
7643	.e648	4c 53 eb	jmp $eb53	                jmp eventEntryPoint

7645	.e64b					LE62F:
7646	.e64b	a2 02		ldx #$02	                ldx #$02
7647	.e64d	20 1f eb	jsr $eb1f	                jsr osbyte91
7648	.e650	90 10		bcc $e662	                bcc LE646
7649	.e652	ad 85 02	lda $0285	                lda printerDriverType
7650	.e655	c9 02		cmp #$02	                cmp #$02
7651	.e657	d0 94		bne $e5ed	                bne LE5D4
7652	.e659	e8		inx		                inx
7653	.e65a	20 1f eb	jsr $eb1f	                jsr osbyte91
7654	.e65d	6e d1 02	ror $02d1	                ror bufferEmptyFlags+bufferPrinter
7655	.e660	30 8b		bmi $e5ed	                bmi LE5D4
7656	.e662					LE646:
7657	.e662	8d 09 fe	sta $fe09	                sta ACIA+1
7658	.e665	a9 e7		lda #$e7	                lda #$E7
7659	.e667	85 ea		sta $ea		                sta $EA
7660	.e669					rtsE64D:
7661	.e669	60		rts		                rts

7663	.e66a					LE64E:
7667	.e66a	4a		lsr a		                lsr a
7668	.e66b	90 07		bcc $e674	                bcc LE65B
7669	.e66d	70 05		bvs $e674	                bvs LE65B
7670	.e66f	ac 50 02	ldy $0250	                ldy aciaControlRegister
7671	.e672	30 8e		bmi $e602	                bmi LE5E9
7672	.e674					LE65B:
7673	.e674	4a		lsr a		                lsr a
7674	.e675	6a		ror a		                ror a
7675	.e676	b0 c7		bcs $e63f	                bcs LE623
7676	.e678	30 d1		bmi $e64b	                bmi LE62F
7677	.e67a	70 ed		bvs $e669	                bvs rtsE64D

7680						;-------------------------------------------------------------------------

7682	.e67c					handleUnrecogisedInterrupt:
7683	.e67c	a2 05		ldx #$05	                ldx #romServiceCallUnrecognisedInterrupt
7684	.e67e	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
7685	.e681	f0 e6		beq $e669	                beq rtsE64D                  ;taken if handled

7687						                ; Pass unrecognised, unhandled interrupts to IRQ2V.
7688	.e683	68		pla		                pla
7689	.e684	68		pla		                pla
7690	.e685	7a		ply		                ply
7691	.e686	fa		plx		                plx
7692	.e687	68		pla		                pla
7696	.e688	6c 06 02	jmp ($0206)	                jmp (IRQ2V)

7698						;-------------------------------------------------------------------------

7703	.e68b					checkForSystemVIAInterrupt:
7705	.e68b	ad 4d fe	lda $fe4d	                lda systemVIA.ifr
7709	.e68e	10 3c		bpl $e6cc	                bpl checkForUserVIAInterrupt
7711	.e690	2d 79 02	and $0279	                and systemVIAInterruptMask
7712	.e693	2d 4e fe	and $fe4e	                and systemVIA.ier
7713	.e696	89 02		bit #$02	                bit #VIA.irq.ca1
7714	.e698	f0 54		beq $e6ee	                beq checkForSystemVIAT1Interrupt

7716						                ; Handle CA1 interrupt - CRTC vsync.

7718	.e69a	ce 40 02	dec $0240	                dec cfsTimeoutCounter
7720	.e69d	a5 ea		lda $ea		                lda $EA
7721	.e69f	10 02		bpl $e6a3	                bpl +
7722	.e6a1	e6 ea		inc $ea		                inc $EA
7723	.e6a3					+
7725	.e6a3	ad 51 02	lda $0251	                lda flashCounter
7726	.e6a6	f0 1a		beq $e6c2	                beq flashDone                    ;taken if no flash
7727	.e6a8	ce 51 02	dec $0251	                dec flashCounter             ;count down
7728	.e6ab	d0 15		bne $e6c2	                bne flashDone
7729	.e6ad	ae 52 02	ldx $0252	                ldx firstFlashColourDuration ;assume first flash colour is next
7730	.e6b0	ad 48 02	lda $0248	                lda vcontrolRegister
7731	.e6b3	4a		lsr a		                lsr a                        ;C=flash bit
7732	.e6b4	90 03		bcc $e6b9	                bcc +                        ;taken if first flash colour is next
7733	.e6b6	ae 53 02	ldx $0253	                ldx secondFlashColourDuration ;actually, second flash colour is next
7734	.e6b9					+
7735	.e6b9	2a		rol a		                rol a                        ;reinstate old register value
7736	.e6ba	49 01		eor #$01	                eor #VCONTROL.flash          ;toggle flash bit
7737	.e6bc	20 0f f3	jsr $f30f	                jsr setVCONTROL
7738	.e6bf	8e 51 02	stx $0251	                stx flashCounter
7739	.e6c2					flashDone:
7740	.e6c2	a0 04		ldy #$04	                ldy #eventStartOfVerticalSync
7741	.e6c4	20 53 eb	jsr $eb53	                jsr eventEntryPoint
7742	.e6c7	a9 02		lda #$02	                lda #VIA.irq.ca1
7746	.e6c9	4c 6f e7	jmp $e76f	                jmp staSystemVIAIFR          ;acknowledge CA1

7750	.e6cc					checkForUserVIAInterrupt:
7751	.e6cc	ad 6d fe	lda $fe6d	                lda userVIA.ifr
7752	.e6cf	10 ab		bpl $e67c	                bpl handleUnrecogisedInterrupt
7753	.e6d1	2d 77 02	and $0277	                and userVIAInterruptMask
7754	.e6d4	2d 6e fe	and $fe6e	                and userVIA.ier
7755	.e6d7	6a		ror a		                ror a                        ;C=CA2
7756	.e6d8	6a		ror a		                ror a                        ;C=CA1
7757	.e6d9	90 a1		bcc $e67c	                bcc handleUnrecogisedInterrupt
7758	.e6db	ac 85 02	ldy $0285	                ldy printerDriverType
7759	.e6de	88		dey		                dey
7760	.e6df	d0 9b		bne $e67c	                bne handleUnrecogisedInterrupt ;taken if printerDriverType not 1
7761	.e6e1	a9 02		lda #$02	                lda #VIA.irq.ca1
7762	.e6e3	8d 6d fe	sta $fe6d	                sta userVIA.ifr              ;acknowledge CA1
7763	.e6e6	8d 6e fe	sta $fe6e	                sta userVIA.ier              ;inhibit CA1
7764	.e6e9	a2 03		ldx #$03	                ldx #bufferPrinter
7765	.e6eb	4c 00 ea	jmp $ea00	                jmp LE8D5

7768	.e6ee					checkForSystemVIAT1Interrupt:
7769	.e6ee	89 40		bit #$40	                bit #VIA.irq.t1
7773	.e6f0	f0 74		beq $e766	                beq checkForSystemVIACA2Interrupt

7776						                ; Handle T1 interrupt - 100 Hz timer.

7778	.e6f2	a9 40		lda #$40	                lda #VIA.irq.t1
7779	.e6f4	8d 4d fe	sta $fe4d	                sta systemVIA.ifr            ;acknowledge T1 interrupt
7780	.e6f7	ad 83 02	lda $0283	                lda timerSwitchState
7781	.e6fa	aa		tax		                tax                          ;X=old timerSwitchState
7782	.e6fb	49 0f		eor #$0f	                eor #$0F
7783	.e6fd	48		pha		                pha                          ;save new timerSwitchState
7784	.e6fe	a8		tay		                tay                          ;Y=new timerSwitchState
7785	.e6ff	38		sec		                sec                          ;C=1 - increment
7786	.e700					updateTIMELoop:
7787	.e700	bd 91 02	lda $0291,x	                lda timer0-1,x
7788	.e703	69 00		adc #$00	                adc #$00
7789	.e705	99 91 02	sta $0291,y	                sta timer0-1,y

7791						                ; one of X or Y will get to 0 to indicate the end of
7792						                ; the loop.
7793	.e708	ca		dex		                dex
7794	.e709	f0 03		beq $e70e	                beq updateTIMEDone
7795	.e70b	88		dey		                dey
7796	.e70c	d0 f2		bne $e700	                bne updateTIMELoop
7797	.e70e					updateTIMEDone:
7798	.e70e	68		pla		                pla                          ;restore new timerSwitchState
7799	.e70f	8d 83 02	sta $0283	                sta timerSwitchState
7800	.e712	a2 05		ldx #$05	                ldx #$05
7801	.e714					incrementIntervalTimer:
7802	.e714	fe 9b 02	inc $029b,x	                inc intervalTimer-1,x
7803	.e717	d0 08		bne $e721	                bne intervalTimerDone
7804	.e719	ca		dex		                dex
7805	.e71a	d0 f8		bne $e714	                bne incrementIntervalTimer
7806	.e71c	a0 05		ldy #$05	                ldy #eventIntervalTimerCrossingZero
7807	.e71e	20 53 eb	jsr $eb53	                jsr eventEntryPoint
7808	.e721					intervalTimerDone:
7809	.e721	ad b1 02	lda $02b1	                lda inkeyTimeoutCounter+0
7810	.e724	d0 08		bne $e72e	                bne LE715
7811	.e726	ad b2 02	lda $02b2	                lda inkeyTimeoutCounter+1
7812	.e729	f0 06		beq $e731	                beq LE718
7813	.e72b	ce b2 02	dec $02b2	                dec inkeyTimeoutCounter+1
7814	.e72e					LE715:
7815	.e72e	ce b1 02	dec $02b1	                dec inkeyTimeoutCounter+0
7816	.e731					LE718:
7817	.e731	2c cd 02	bit $02cd	                bit previousKeyPressedWhenReadingOSBYTE
7818	.e734	10 0b		bpl $e741	                bpl LE728
7819	.e736	ee cd 02	inc $02cd	                inc previousKeyPressedWhenReadingOSBYTE
7820	.e739	58		cli		                cli
7824	.e73a	20 ec f4	jsr $f4ec	                jsr LF416                    ;update sound???
7826	.e73d	78		sei		                sei
7827	.e73e	ce cd 02	dec $02cd	                dec previousKeyPressedWhenReadingOSBYTE
7828	.e741					LE728:
7829	.e741	2c 70 e3	bit $e370	                bit valueFF                  ;V=1
7831	.e744	20 28 e6	jsr $e628	                jsr irq1Handler
7833	.e747	a5 ec		lda $ec		                lda lastKeyPressedInternal
7834	.e749	05 ed		ora $ed		                ora firstKeyPressedInternal
7835	.e74b	2d 42 02	and $0242	                and keyboardSemaphore
7836	.e74e	f0 04		beq $e754	                beq +
7837	.e750	38		sec		                sec
7838	.e751	20 9b f7	jsr $f79b	                jsr LF8FF
7839	.e754					+
7841	.e754	20 99 e7	jsr $e799	                jsr handleDigitalJoystick
7843	.e757	20 5e ea	jsr $ea5e	                jsr pollPrinterDriver
7844	.e75a	ac 43 02	ldy $0243	                ldy romPollingSemaphore
7848	.e75d	f0 05		beq $e764	                beq LE748
7850	.e75f	a2 15		ldx #$15	                ldx #romServiceCallPollingInterrupt
7854	.e761	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
7855	.e764					LE748:
7860	.e764	60		rts		                rts

7864	.e765					checkForSystemVIACB1Interrupt:
7902	.e765					initiateADCConversion:
7903	.e765	60		rts		                rts

7907	.e766					checkForSystemVIACA2Interrupt:
7908	.e766	4a		lsr a		                lsr a                        ;C = CA2
7909	.e767	90 0a		bcc $e773	                bcc handleUnrecognisedInterruptE799

7911						                ; Handle CA2 interrupt - keyboard.

7913	.e769	18		clc		                clc
7914	.e76a	20 9b f7	jsr $f79b	                jsr LF8FF
7915	.e76d	a9 01		lda #$01	                lda #VIA.irq.ca2
7919	.e76f					staSystemVIAIFR:
7920	.e76f	8d 4d fe	sta $fe4d	                sta systemVIA.ifr
7921	.e772					rtsE6B6:
7922	.e772	60		rts		                rts

7925	.e773					handleUnrecognisedInterruptE799:
7926	.e773	4c 7c e6	jmp $e67c	                jmp handleUnrecogisedInterrupt

7928						;-------------------------------------------------------------------------
7929						;
7930						; OSBYTE 17 (&11) Write next ADC channel to be sampled [MasRef D.2-25]
7931						;
7932	.e776					osbyte11:
7937	.e776	8c 4c 02	sty $024c	                sty currentADCChannel
7939	.e779	80 ea		bra $e765	                bra initiateADCConversion

7942						;-------------------------------------------------------------------------
7943						;
7944						; Print a 0-terminated string at some offset from startupMessages.
7945						;
7946						; entry:
7947						;
7948						; Y = offset-1 of message
7949						;
7950	.e77b					printStartupMessage:
7951	.e77b	a9 e0		lda #$e0	                lda #>startupMessages
7952						                ; .cerror (<startupMessages)!=0,"startupMessages must be page-aligned" ;it's more flexible than this, but this'll do for now

7954						;-------------------------------------------------------------------------
7955						;
7956						; Print a 0-terminated string.
7957						;
7958						; entry:
7959						;
7960						; A = address MSB
7961						;
7962						; Y = (address LSB)-1
7963						;
7964	.e77d					print0TerminatedString:
7965	.e77d	85 fe		sta $fe		                sta errPtr+1
7966	.e77f	64 fd		stz $fd		                stz errPtr+0

7968						;-------------------------------------------------------------------------
7969						;
7970						; Print the BRK message.
7971						;
7972						; entry:
7973						;
7974						; (errPtr) = pointer to the error number (as will be the case after a
7975						; BRK)
7976						;
7977						; Y=0
7978						;
7979	.e781					printBRKMessage:
7980	.e781	c8		iny		                iny
7981	.e782	b1 fd		lda ($fd),y	                lda (errPtr),y
7982	.e784	20 e3 ff	jsr $ffe3	                jsr OSASCI
7983	.e787	aa		tax		                tax
7984	.e788	d0 f7		bne $e781	                bne printBRKMessage
7985	.e78a					rtsE7B0:
7986	.e78a	60		rts		                rts

7988						;-------------------------------------------------------------------------

7991						;-------------------------------------------------------------------------

7993	>e78b	00				unk_E78B:       .byte 0
7994	>e78c	8d				                .byte $8D       ;
7995	>e78d	8f				                .byte $8F       ;
7996	>e78e	8e				                .byte $8E       ;
7997	>e78f	8c				                .byte $8C       ;
7998	>e790	7f				                .byte $7F       ;
7999	>e791	0d				                .byte $D
8000	>e792	8b				                .byte $8B       ;
8001	>e793	8b				                .byte $8B       ;
8002	>e794	96				unk_E794:       .byte $96
8003	>e795	e6				                .byte $E6       ;
8004	>e796	d6				                .byte $D6       ;
8005	>e797	c6				                .byte $C6       ;
8006	>e798	86				                .byte $86       ;

8008						;-------------------------------------------------------------------------

8010	.e799					handleDigitalJoystick:.block
8011	.e799	ad 4d 02	lda $024d	                lda maximumADCChannel
8012	.e79c	f0 ec		beq $e78a	                beq rtsE7B0
8013	.e79e	2c 4e 02	bit $024e	                bit adcConversionType
8014	.e7a1	50 3b		bvc $e7de	                bvc LE7DE
8015	.e7a3	ad b6 02	lda $02b6	                lda adcResultLSBs
8016	.e7a6	a2 00		ldx #$00	                ldx #0

8018	.e7a8					LE7A8:
8019	.e7a8	e8		inx		                inx
8020	.e7a9	0a		asl a		                asl a
8021	.e7aa	b0 03		bcs $e7af	                bcs LE7AF
8022	.e7ac	d0 fa		bne $e7a8	                bne LE7A8
8023	.e7ae	aa		tax		                tax

8025	.e7af					LE7AF:
8026	.e7af	bc 8b e7	ldy $e78b,x	                ldy unk_E78B,x
8027	.e7b2	cc be 02	cpy $02be	                cpy adcLastChannelRead
8028	.e7b5	8c be 02	sty $02be	                sty adcLastChannelRead
8029	.e7b8	f0 0c		beq $e7c6	                beq LE7C6
8030	.e7ba	98		tya		                tya
8031	.e7bb	f0 09		beq $e7c6	                beq LE7C6
8032	.e7bd	20 a9 eb	jsr $eba9	                jsr insertCharacterIntoKeyboardBuffer
8033	.e7c0	ad 54 02	lda $0254	                lda keyboardAutoRepeatDelay
8034	.e7c3	8d bd 02	sta $02bd	                sta adcResultMSBs+3

8036	.e7c6					LE7C6:
8037	.e7c6	ad bd 02	lda $02bd	                lda adcResultMSBs+3
8038	.e7c9	f0 13		beq $e7de	                beq LE7DE
8039	.e7cb	ce bd 02	dec $02bd	                dec adcResultMSBs+3
8040	.e7ce	d0 0e		bne $e7de	                bne LE7DE
8041	.e7d0	ad 55 02	lda $0255	                lda keyboardAutoRepeatRate
8042	.e7d3	8d bd 02	sta $02bd	                sta adcResultMSBs+3
8043	.e7d6	ac be 02	ldy $02be	                ldy adcLastChannelRead
8044	.e7d9	f0 03		beq $e7de	                beq LE7DE
8045	.e7db	20 a9 eb	jsr $eba9	                jsr insertCharacterIntoKeyboardBuffer

8047	.e7de					LE7DE:
8048	.e7de	2c 4e 02	bit $024e	                bit adcConversionType
8049	.e7e1	10 07		bpl $e7ea	                bpl LE7EA
8050	.e7e3	a0 b6		ldy #$b6	                ldy #$B6
8051	.e7e5	a2 2c		ldx #$2c	                ldx #romServiceCallCompactJoystick
8052	.e7e7	4c ff ee	jmp $eeff	                jmp makeROMServiceCall

8054						;-------------------------------------------------------------------------

8056	.e7ea					LE7EA:
8057	.e7ea	a9 ff		lda #$ff	                lda #$FF
8058	.e7ec	ae 7d 02	ldx $027d	                ldx editKeysMode
8059	.e7ef	e0 03		cpx #$03	                cpx #3
8060	.e7f1	d0 14		bne $e807	                bne LE807
8061	.e7f3	e8		inx		                inx

8063	.e7f4					LE7F4:
8064	.e7f4	48		pha		                pha
8065	.e7f5	da		phx		                phx
8066	.e7f6	bd 94 e7	lda $e794,x	                lda unk_E794,x
8067	.e7f9	aa		tax		                tax
8068	.e7fa	38		sec		                sec
8069	.e7fb	b8		clv		                clv
8070	.e7fc	20 98 ed	jsr $ed98	                jsr LED01
8071	.e7ff	fa		plx		                plx
8072	.e800	68		pla		                pla
8073	.e801	2a		rol a		                rol a
8074	.e802	ca		dex		                dex
8075	.e803	10 ef		bpl $e7f4	                bpl LE7F4
8076	.e805	49 ff		eor #$ff	                eor #$FF

8078	.e807					LE807:
8079	.e807	2d 60 fe	and $fe60	                and userVIA.irb
8080	.e80a	49 1f		eor #$1f	                eor #$1F
8081	.e80c	4a		lsr a		                lsr a
8082	.e80d	08		php		                php
8083	.e80e	0a		asl a		                asl a
8084	.e80f	0a		asl a		                asl a
8085	.e810	0a		asl a		                asl a
8086	.e811	28		plp		                plp
8087	.e812	2a		rol a		                rol a
8088	.e813	aa		tax		                tax
8089	.e814	4d b6 02	eor $02b6	                eor adcResultLSBs
8090	.e817	2c 4e 02	bit $024e	                bit adcConversionType
8091	.e81a	29 f0		and #$f0	                and #$F0
8092	.e81c	8e b6 02	stx $02b6	                stx adcResultLSBs
8093	.e81f	70 05		bvs $e826	                bvs locret_E826
8094	.e821	f0 04		beq $e827	                beq LE827
8095	.e823	9c bd 02	stz $02bd	                stz adcResultMSBs+3

8097	.e826					locret_E826:
8098	.e826	60		rts		                rts

8100						;-------------------------------------------------------------------------

8102	.e827					LE827:
8103	.e827	ad 4e 02	lda $024e	                lda adcConversionType
8104	.e82a	f0 06		beq $e832	                beq LE832
8105	.e82c	c9 08		cmp #$08	                cmp #8
8106	.e82e	90 04		bcc $e834	                bcc LE834
8107	.e830	a9 04		lda #$04	                lda #4

8109	.e832					LE832:
8110	.e832	49 03		eor #$03	                eor #3

8112	.e834					LE834:
8113	.e834	a8		tay		                tay
8114	.e835	3a		dec a		                dec a
8115	.e836	aa		tax		                tax
8116	.e837	ad bd 02	lda $02bd	                lda adcResultMSBs+3
8117	.e83a	9c bc 02	stz $02bc	                stz adcResultMSBs+2

8119	.e83d					LE83D:
8120	.e83d	ca		dex		                dex
8121	.e83e	30 06		bmi $e846	                bmi LE846
8122	.e840	0a		asl a		                asl a
8123	.e841	2e bc 02	rol $02bc	                rol adcResultMSBs+2
8124	.e844	80 f7		bra $e83d	                bra LE83D

8126						;-------------------------------------------------------------------------

8128	.e846					LE846:
8129	.e846	8d bb 02	sta $02bb	                sta adcResultMSBs+1
8130	.e849	cc bc 02	cpy $02bc	                cpy adcResultMSBs+2
8131	.e84c	b0 06		bcs $e854	                bcs LE854
8132	.e84e	8c bb 02	sty $02bb	                sty adcResultMSBs+1
8133	.e851	8c bc 02	sty $02bc	                sty adcResultMSBs+2

8135	.e854					LE854:
8136	.e854	ad 4e 02	lda $024e	                lda adcConversionType
8137	.e857	29 20		and #$20	                and #$20
8138	.e859	f0 0f		beq $e86a	                beq LE86A
8139	.e85b	a9 ff		lda #$ff	                lda #$FF
8140	.e85d	8d b7 02	sta $02b7	                sta adcResultLSBs+1
8141	.e860	8d b9 02	sta $02b9	                sta adcResultLSBs+3
8142	.e863	4a		lsr a		                lsr a
8143	.e864	8d b8 02	sta $02b8	                sta adcResultLSBs+2
8144	.e867	8d ba 02	sta $02ba	                sta adcResultMSBs

8146	.e86a					LE86A:
8147	.e86a	a2 09		ldx #$09	                ldx #9

8149	.e86c					LE86C:
8150	.e86c	ad b6 02	lda $02b6	                lda adcResultLSBs
8151	.e86f	3c d5 e8	bit $e8d5,x	                bit unk_E8D5,x
8152	.e872	f0 3e		beq $e8b2	                beq LE8B2
8153	.e874	bd d6 e8	lda $e8d6,x	                lda unk_E8D5+1,x
8154	.e877	0a		asl a		                asl a
8155	.e878	a8		tay		                tay
8156	.e879	ad 4e 02	lda $024e	                lda adcConversionType
8157	.e87c	29 20		and #$20	                and #$20        ; ' '
8158	.e87e	f0 05		beq $e885	                beq LE885
8159	.e880	bd d7 e8	lda $e8d7,x	                lda unk_E8D5+2,x
8160	.e883	80 27		bra $e8ac	                bra LE8AC

8162						;-------------------------------------------------------------------------

8164	.e885					LE885:
8165	.e885	b9 b7 02	lda $02b7,y	                lda adcResultLSBs+1,y
8166	.e888	b0 12		bcs $e89c	                bcs LE89C
8167	.e88a	6d bb 02	adc $02bb	                adc adcResultMSBs+1
8168	.e88d	99 b7 02	sta $02b7,y	                sta adcResultLSBs+1,y
8169	.e890	b9 b8 02	lda $02b8,y	                lda adcResultLSBs+2,y
8170	.e893	6d bc 02	adc $02bc	                adc adcResultMSBs+2
8171	.e896	90 17		bcc $e8af	                bcc LE8AF
8172	.e898	a9 ff		lda #$ff	                lda #$FF
8173	.e89a	80 10		bra $e8ac	                bra LE8AC

8175						;-------------------------------------------------------------------------

8177	.e89c					LE89C:
8178	.e89c	ed bb 02	sbc $02bb	                sbc adcResultMSBs+1
8179	.e89f	99 b7 02	sta $02b7,y	                sta adcResultLSBs+1,y
8180	.e8a2	b9 b8 02	lda $02b8,y	                lda adcResultLSBs+2,y
8181	.e8a5	ed bc 02	sbc $02bc	                sbc adcResultMSBs+2
8182	.e8a8	b0 05		bcs $e8af	                bcs LE8AF
8183	.e8aa	a9 00		lda #$00	                lda #0

8185	.e8ac					LE8AC:
8186	.e8ac	99 b7 02	sta $02b7,y	                sta adcResultLSBs+1,y

8188	.e8af					LE8AF:
8189	.e8af	99 b8 02	sta $02b8,y	                sta adcResultLSBs+2,y

8191	.e8b2					LE8B2:
8192	.e8b2	ca		dex		                dex
8193	.e8b3	ca		dex		                dex
8194	.e8b4	ca		dex		                dex
8195	.e8b5	10 b5		bpl $e86c	                bpl LE86C
8196	.e8b7	ee bd 02	inc $02bd	                inc adcResultMSBs+3
8197	.e8ba	d0 03		bne $e8bf	                bne LE8BF
8198	.e8bc	ce bd 02	dec $02bd	                dec adcResultMSBs+3

8200	.e8bf					LE8BF:
8201	.e8bf	ae 4c 02	ldx $024c	                ldx currentADCChannel
8202	.e8c2	a0 03		ldy #$03	                ldy #3
8203	.e8c4	20 53 eb	jsr $eb53	                jsr eventEntryPoint
8204	.e8c7	ce 4c 02	dec $024c	                dec currentADCChannel
8205	.e8ca	f0 02		beq $e8ce	                beq LE8CE
8206	.e8cc	10 06		bpl $e8d4	                bpl locret_E8D4

8208	.e8ce					LE8CE:
8209	.e8ce	ad 4d 02	lda $024d	                lda maximumADCChannel
8210	.e8d1	8d 4c 02	sta $024c	                sta currentADCChannel

8212	.e8d4					locret_E8D4:
8213	.e8d4	60		rts		                rts
8214						                .endblock

8216						;-------------------------------------------------------------------------

8218	>e8d5	40				unk_E8D5:       .byte $40; @
8219	>e8d6	01				                .byte 1
8220	>e8d7	ff				                .byte $FF
8221	>e8d8	20				                .byte $20
8222	>e8d9	81				                .byte $81       ;
8223	>e8da	00				                .byte 0
8224	>e8db	80				                .byte $80       ;
8225	>e8dc	80				                .byte $80       ;
8226	>e8dd	00				                .byte 0
8227	>e8de	10				                .byte $10
8228	>e8df	00				                .byte 0
8229	>e8e0	ff				                .byte $FF

8232						;-------------------------------------------------------------------------

8234	.e8e1					osbyte81Timed:
8235	.e8e1	8e b1 02	stx $02b1	                stx inkeyTimeoutCounter+0
8236	.e8e4	8c b2 02	sty $02b2	                sty inkeyTimeoutCounter+1
8237	.e8e7	66 e6		ror $e6		                ror readCharacterTimedFlag   ;set the timed flag
8238	.e8e9	58		cli		                cli
8239	.e8ea	80 02		bra $e8ee	                bra osrdchWithTimeout

8241						;-------------------------------------------------------------------------

8243	.e8ec					osrdchEntryPoint:
8244	.e8ec	64 e6		stz $e6		                stz readCharacterTimedFlag   ;clear the timed flag
8245	.e8ee					osrdchWithTimeout:
8246	.e8ee	da		phx		                phx
8247	.e8ef	5a		phy		                phy
8248	.e8f0	ac 56 02	ldy $0256	                ldy execFileHandle
8249	.e8f3	f0 12		beq $e907	                beq osrdchLoop               ;taken if not *EXEC'ing
8250	.e8f5	38		sec		                sec
8251	.e8f6	66 eb		ror $eb		                ror tapeCritical
8252	.e8f8	20 d7 ff	jsr $ffd7	                jsr OSBGET             ;get 1 byte from the *EXEC file
8253	.e8fb	64 eb		stz $eb		                stz tapeCritical
8254	.e8fd	90 24		bcc $e923	                bcc osrdchDone                    ;taken if byte valid
8255	.e8ff	a9 00		lda #$00	                lda #$00                     ;OSFIND close file
8256	.e901	9c 56 02	stz $0256	                stz execFileHandle           ;reset *EXEC handle
8257	.e904	20 ce ff	jsr $ffce	                jsr OSFIND                   ;close *EXEC file
8258	.e907					osrdchLoop:
8259	.e907	a5 ff		lda $ff		                lda escapeFlag               ;b7 set if ESCAPE pressed
8260	.e909	0a		asl a		                asl a                        ;C=1 if ESCAPE pressed
8261	.e90a	a9 1b		lda #$1b	                lda #27                      ;ASCII for ESCAPE
8262	.e90c	b0 15		bcs $e923	                bcs osrdchDone               ;exit with C=1 if ESCAPE
8263						                                             ;pressed
8265	.e90e	ae 41 02	ldx $0241	                ldx inputSource
8267	.e911	20 5e ec	jsr $ec5e	                jsr readFromEconetOrSoftKeyOrInputBufferA ;handle Econet/soft key stuff???
8268	.e914	90 0d		bcc $e923	                bcc osrdchDone
8269	.e916	24 e6		bit $e6		                bit readCharacterTimedFlag
8270	.e918	10 ed		bpl $e907	                bpl osrdchLoop     ;taken if no timeout - keep looping
8271	.e91a	ad b2 02	lda $02b2	                lda inkeyTimeoutCounter+1
8272	.e91d	0d b1 02	ora $02b1	                ora inkeyTimeoutCounter+0
8273	.e920	d0 e5		bne $e907	                bne osrdchLoop     ;taken if timeout not timed out yet
8274	.e922	3a		dec a		                dec a              ;timed out: A=$ff, C=1
8275	.e923					osrdchDone:
8276	.e923	7a		ply		                ply
8277	.e924	fa		plx		                plx
8278	.e925	60		rts		                rts

8280						;-------------------------------------------------------------------------

8282	.e926					starLIBFS:
8283	.e926	ad 01 df	lda $df01	                lda hazel.activeFS
8284	.e929	8d 02 df	sta $df02	                sta hazel.libFS
8285	.e92c	60		rts		                rts

8287						;-------------------------------------------------------------------------

8296						;-------------------------------------------------------------------------
8297						;
8298						; OSCLI
8299						;
8300						; MasRef D.4-1
8301						;

8303	.e92d					oscliEntryPoint: .block
8304	.e92d	20 47 ee	jsr $ee47	                jsr selectHAZEL
8305	.e930	86 f2		stx $f2		                stx stringInputBufferAddress+0
8306	.e932	84 f3		sty $f3		                sty stringInputBufferAddress+1
8307	.e934	a0 00		ldy #$00	                ldy #$00
8308	.e936					-
8309	.e936	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
8310	.e938	99 00 dc	sta $dc00,y	                sta hazel.commandLine,y
8311	=$e93c					emptyCommandLine=*+1                         ;arbitrary place that's
8312						                                             ;just a 13 byte...
8313	.e93b	c9 0d		cmp #$0d	                cmp #$0D
8314	.e93d	f0 04		beq $e943	                beq +     ;branch taken if end of command line reached
8315	.e93f	c8		iny		                iny
8316	.e940	d0 f4		bne $e936	                bne -

8318						                ; OSCLI is a no-op if the command line is too long.
8319	.e942	60		rts		                rts

8321	.e943					+
8322	.e943	a0 dc		ldy #$dc	                ldy #>hazel.commandLine
8323	.e945	a2 00		ldx #$00	                ldx #<hazel.commandLine
8324	.e947	20 61 f4	jsr $f461	                jsr withTerminalROM
8325	.e94a	4c 8e 85	jmp $858e	                jmp oscli
8326						                .endblock

8328	=$e93c					emptyCommandLine=oscliEntryPoint.emptyCommandLine

8330						                ; OSWRCH
8331						                ; ======
8332	.e94d					oswrchEntryPoint:
8333	.e94d	48		pha		                pha                          ;S=[ch]
8334	.e94e	da		phx		                phx                          ;S=[x; ch]
8335	.e94f	5a		phy		                phy                          ;S=[y; x; ch]
8336	.e950	48		pha		                pha                          ;S=[ch; y; x; ch]
8337	.e951	2c 60 02	bit $0260	                bit econetOutputInterpretationStatus
8338	.e954	10 08		bpl $e95e	                bpl LE833
8339	.e956	a8		tay		                tay
8340	.e957	a9 04		lda #$04	                lda #netWriteCharacterAttempted
8341	.e959	20 65 ec	jsr $ec65	                jsr callNETV
8342	.e95c	b0 72		bcs $e9d0	                bcs LE8A5
8343	.e95e					LE833:
8344	.e95e	a9 02		lda #$02	                lda #$02
8345	.e960	2c 7c 02	bit $027c	                bit characterDestinationStatus
8346	.e963	d0 28		bne $e98d	                bne LE862
8347	.e965	68		pla		                pla                          ;restore char to print
8348	.e966	48		pha		                pha                          ;save it again
8349	.e967	aa		tax		                tax                          ;X=char to print
8350	.e968	ad 34 fe	lda $fe34	                lda ACCCON                   ;
8351	.e96b	48		pha		                pha                          ;S=[old ACCCON; ch; y; x; ch]
8355	.e96c	a9 08		lda #$08	                lda #ACCCON.Y
8356	.e96e	1c 34 fe	trb $fe34	                trb ACCCON                   ;MOS ROM at $c000
8358	.e971	a5 f4		lda $f4		                lda $F4
8359	.e973	48		pha		                pha          ;S=[old ROMSEL; old ACCCON; ch; y; x; ch]
8360	.e974	a9 8f		lda #$8f	                lda #$80|terminalROM
8361	.e976	85 f4		sta $f4		                sta $F4
8362	.e978	8d 30 fe	sta $fe30	                sta ROMSEL                   ;page in ANDY+Terminal
8363	.e97b	8a		txa		                txa                          ;A=char to print
8364	.e97c	20 27 c0	jsr $c027	                jsr outputToVDU
8365	.e97f	68		pla		                pla
8366	.e980	85 f4		sta $f4		                sta $F4
8367	.e982	8d 30 fe	sta $fe30	                sta ROMSEL
8368	.e985	68		pla		                pla
8369	.e986	29 08		and #$08	                and #ACCCON.Y
8370	.e988	0c 34 fe	tsb $fe34	                tsb ACCCON
8371	.e98b	b0 07		bcs $e994	                bcs LE869
8372	.e98d					LE862:
8373	.e98d	a9 08		lda #$08	                lda #$08
8374	.e98f	2c 7c 02	bit $027c	                bit characterDestinationStatus
8375	.e992	f0 05		beq $e999	                beq LE86E
8376	.e994					LE869:
8377	.e994	68		pla		                pla
8378	.e995	48		pha		                pha
8379	.e996	20 d5 e9	jsr $e9d5	                jsr LE8AA
8380	.e999					LE86E:
8382	.e999	ad 7c 02	lda $027c	                lda characterDestinationStatus
8383	.e99c	6a		ror a		                ror a
8384	.e99d	90 1b		bcc $e9ba	                bcc LE88F
8385	.e99f	a4 ea		ldy $ea		                ldy $EA
8386	.e9a1	88		dey		                dey
8387	.e9a2	10 16		bpl $e9ba	                bpl LE88F
8388	.e9a4	68		pla		                pla
8389	.e9a5	48		pha		                pha
8390	.e9a6	08		php		                php
8391	.e9a7	78		sei		                sei
8392	.e9a8	a2 02		ldx #$02	                ldx #$02
8393	.e9aa	48		pha		                pha
8394	.e9ab	20 1a eb	jsr $eb1a	                jsr osbyte98
8395	.e9ae	90 03		bcc $e9b3	                bcc LE888
8396	.e9b0	20 33 ea	jsr $ea33	                jsr clearRS423BusyAndSetRS423Active
8397	.e9b3					LE888:
8398	.e9b3	68		pla		                pla
8399	.e9b4	a2 02		ldx #$02	                ldx #$02
8400	.e9b6	20 ce ea	jsr $eace	                jsr LE9A3
8401	.e9b9	28		plp		                plp
8402	.e9ba					LE88F:

8405	.e9ba	a9 10		lda #$10	                lda #$10
8406	.e9bc	2c 7c 02	bit $027c	                bit characterDestinationStatus
8407	.e9bf	d0 0f		bne $e9d0	                bne LE8A5
8408	.e9c1	ac 57 02	ldy $0257	                ldy spoolFileHandle
8409	.e9c4	f0 0a		beq $e9d0	                beq LE8A5
8410	.e9c6	68		pla		                pla
8411	.e9c7	48		pha		                pha
8412	.e9c8	38		sec		                sec
8413	.e9c9	66 eb		ror $eb		                ror $EB
8414	.e9cb	20 d4 ff	jsr $ffd4	                jsr OSBPUT
8415	.e9ce	46 eb		lsr $eb		                lsr $EB
8416	.e9d0					LE8A5:
8417	.e9d0	68		pla		                pla
8418	.e9d1	7a		ply		                ply
8419	.e9d2	fa		plx		                plx
8420	.e9d3	68		pla		                pla
8421	.e9d4	60		rts		                rts

8423	.e9d5					LE8AA:
8424	.e9d5	2c 7c 02	bit $027c	                bit characterDestinationStatus
8425	.e9d8	70 25		bvs $e9ff	                bvs LE8D4
8426	.e9da	cd 86 02	cmp $0286	                cmp printerIgnoreChar
8427	.e9dd	d0 05		bne $e9e4	                bne LE8B9
8428	.e9df	2c 46 02	bit $0246	                bit noignoreState
8429	.e9e2	10 1b		bpl $e9ff	                bpl LE8D4
8430	.e9e4					LE8B9:
8431	.e9e4	08		php		                php
8432	.e9e5	78		sei		                sei
8433	.e9e6	aa		tax		                tax
8434	.e9e7	a9 04		lda #$04	                lda #$04
8435	.e9e9	2c 7c 02	bit $027c	                bit characterDestinationStatus
8436	.e9ec	d0 10		bne $e9fe	                bne LE8D3
8437	.e9ee	8a		txa		                txa
8438	.e9ef	a2 03		ldx #$03	                ldx #$03
8439	.e9f1	20 ce ea	jsr $eace	                jsr LE9A3
8440	.e9f4	b0 08		bcs $e9fe	                bcs LE8D3
8441	.e9f6	2c d1 02	bit $02d1	                bit bufferEmptyFlags+bufferPrinter
8442	.e9f9	10 03		bpl $e9fe	                bpl LE8D3
8443	.e9fb	20 00 ea	jsr $ea00	                jsr LE8D5
8444	.e9fe					LE8D3:
8445	.e9fe	28		plp		                plp
8446	.e9ff					LE8D4:
8447	.e9ff	60		rts		                rts

8449	.ea00					LE8D5:                                       ;E7CA in MOS 4.00
8450	.ea00	ad 85 02	lda $0285	                lda printerDriverType
8452	.ea03	f0 7f		beq $ea84	                beq LE959
8453	.ea05	3a		dec a		                dec a
8454	.ea06	d0 20		bne $ea28	                bne LE8FD
8455	.ea08	20 1f eb	jsr $eb1f	                jsr osbyte91
8456	.ea0b	6e d1 02	ror $02d1	                ror bufferEmptyFlags+bufferPrinter
8457	.ea0e	30 43		bmi $ea53	                bmi rtsE928
8458	.ea10	a0 82		ldy #$82	                ldy #$82
8459	.ea12	8c 6e fe	sty $fe6e	                sty userVIA.ier
8460	.ea15	8d 61 fe	sta $fe61	                sta userVIA.ora
8461	.ea18	ad 6c fe	lda $fe6c	                lda userVIA.pcr
8462	.ea1b	29 f1		and #$f1	                and #$F1
8463	.ea1d	09 0c		ora #$0c	                ora #$0C
8464	.ea1f	8d 6c fe	sta $fe6c	                sta userVIA.pcr
8465	.ea22	09 0e		ora #$0e	                ora #$0E
8466	.ea24	8d 6c fe	sta $fe6c	                sta userVIA.pcr
8467	.ea27	60		rts		                rts

8469	.ea28					LE8FD:
8470	.ea28	3a		dec a		                dec a
8471	.ea29	d0 29		bne $ea54	                bne activatePrinterDriver
8472	.ea2b	a4 ea		ldy $ea		                ldy $EA
8473	.ea2d	88		dey		                dey
8474	.ea2e	10 54		bpl $ea84	                bpl LE959
8475	.ea30	4e d1 02	lsr $02d1	                lsr bufferEmptyFlags+bufferPrinter
8476	.ea33					clearRS423BusyAndSetRS423Active:
8477	.ea33	4e 4f 02	lsr $024f	                lsr rs423Busy
8478	.ea36					setRS423Active:
8479	.ea36	20 be ed	jsr $edbe	                jsr getRS423InputBufferFreeBytes
8480	.ea39	90 18		bcc $ea53	                bcc rtsE928
8481	.ea3b	a2 20		ldx #$20	                ldx #ACIA.control.rtsLowTXInterruptEnabled
8482	.ea3d					resetACIAState:
8483	.ea3d	a0 9f		ldy #$9f	                ldy #ACIA.control.rtsRTSInterruptEnabled|ACIA.control.word8DataOddParity1Stop|ACIA.control.reset

8485						;-------------------------------------------------------------------------
8486						;
8487						; OSBYTE 156 (&9C) Read/write serial ACIA control [MasRef D.2-47]
8488						;
8489	.ea3f					osbyte9C:
8490	.ea3f	08		php		                php
8491	.ea40	78		sei		                sei
8492	.ea41	98		tya		                tya
8493	.ea42	86 fa		stx $fa		                stx SEIWKA
8494	.ea44	2d 50 02	and $0250	                and aciaControlRegister
8495	.ea47	45 fa		eor $fa		                eor SEIWKA
8496	.ea49	ae 50 02	ldx $0250	                ldx aciaControlRegister
8497	.ea4c					writeACIAControlRegisterAndCopy:
8498	.ea4c	8d 50 02	sta $0250	                sta aciaControlRegister
8499	.ea4f	8d 08 fe	sta $fe08	                sta ACIA.control
8500	.ea52	28		plp		                plp
8501	.ea53					rtsE928:
8502	.ea53	60		rts		                rts

8515						;-------------------------------------------------------------------------

8517	.ea54					activatePrinterDriver:
8518	.ea54	18		clc		                clc
8519	.ea55	a9 01		lda #$01	                lda #printerDriverActivate
8520	.ea57	20 65 ea	jsr $ea65	                jsr callPrinterDriverWithPrinterBuffer

8522						                ; printer driver will set C=0 if active, C=1 if
8523						                ; inactive.

8525						;-------------------------------------------------------------------------
8526						;
8527						; OSBYTE 123 (&7B) Inform MOS of printer driver going dormant [MasRef
8528						; D.2-36]
8529						;
8530	.ea5a					osbyte7B:
8531	.ea5a	6e d1 02	ror $02d1	                ror bufferEmptyFlags+bufferPrinter   ;C=1 on entry, so set bit 7
8532	.ea5d					rtsE932:
8533	.ea5d	60		rts		                rts

8535						;-------------------------------------------------------------------------

8537	.ea5e					pollPrinterDriver:
8538	.ea5e	2c d1 02	bit $02d1	                bit bufferEmptyFlags+bufferPrinter
8539	.ea61	30 fa		bmi $ea5d	                bmi rtsE932           ;taken if printer driver dormant
8540	.ea63	a9 00		lda #$00	                lda #printerDriverPoll
8541	.ea65					callPrinterDriverWithPrinterBuffer:
8542	.ea65	a2 03		ldx #$03	                ldx #bufferPrinter
8543	.ea67					callPrinterDriver:
8544	.ea67	ac 85 02	ldy $0285	                ldy printerDriverType
8545	.ea6a	20 65 ec	jsr $ec65	                jsr callNETV
8546	.ea6d	6c 22 02	jmp ($0222)	                jmp (UPTV)

8548						;-------------------------------------------------------------------------
8549						;
8550						; OSBYTE 15 (&0F) Flush buffer
8551						;
8552	.ea70					osbyte0F:
8553	.ea70	d0 0f		bne $ea81	                bne LE956
8554	.ea72					LE947:
8555	.ea72	a2 08		ldx #$08	                ldx #$08
8556	.ea74					LE949:
8557	.ea74	58		cli		                cli
8558	.ea75	78		sei		                sei
8559	.ea76	20 7c ea	jsr $ea7c	                jsr osbyte15
8560	.ea79	ca		dex		                dex
8561	.ea7a	10 f8		bpl $ea74	                bpl LE949

8563						;-------------------------------------------------------------------------
8564						;
8565						; OSBYTE 21 (&15) Flush selected buffer
8566						;
8567	.ea7c					osbyte15:                                    ;e951
8568	.ea7c	e0 09		cpx #$09	                cpx #bufferMax+1
8569	.ea7e	90 04		bcc $ea84	                bcc LE959
8570	.ea80	60		rts		                rts

8572	.ea81					LE956:
8573	.ea81	ae 41 02	ldx $0241	                ldx inputSource
8574	.ea84					LE959:
8575	.ea84	18		clc		                clc
8576	.ea85					LE95A:
8577	.ea85	48		pha		                pha
8578	.ea86	08		php		                php
8579	.ea87	78		sei		                sei
8580	.ea88	b0 08		bcs $ea92	                bcs LE967
8581	.ea8a	8a		txa		                txa
8582	.ea8b	29 04		and #$04	                and #$04                     ;buffer 4-7?
8583	.ea8d	f0 03		beq $ea92	                beq LE967                    ;taken if not sound buffer
8584	.ea8f	20 f9 f4	jsr $f4f9	                jsr clearSoundChannelBuffer
8585	.ea92					LE967:
8586	.ea92	38		sec		                sec
8587	.ea93	7e ce 02	ror $02ce,x	                ror bufferEmptyFlags,x
8588	.ea96	e0 02		cpx #$02	                cpx #bufferFirstOutput
8589	.ea98	b0 06		bcs $eaa0	                bcs LE975                    ;taken if output buffer
8590	.ea9a	9c 68 02	stz $0268	                stz softKeyStringLength
8591	.ea9d	9c 6a 02	stz $026a	                stz vduQueueNegativeLength
8592	.eaa0					LE975:
8593	.eaa0	20 b8 ed	jsr $edb8	                jsr purgeBufferViaCNPV
8594	.eaa3	28		plp		                plp
8595	.eaa4	68		pla		                pla
8596	.eaa5	60		rts		                rts

8598						;-------------------------------------------------------------------------
8599						;
8600						; Count/purge entry point [AUG p264]
8601						;
8602	.eaa6					cnpEntryPoint:
8603	.eaa6	50 07		bvc $eaaf	                bvc countBuffer
8604	.eaa8					purgeBuffer:
8605	.eaa8	bd d7 02	lda $02d7,x	                lda bufferStartIndices,x
8606	.eaab	9d e0 02	sta $02e0,x	                sta bufferEndIndices,x
8607	.eaae	60		rts		                rts

8609	.eaaf					countBuffer:
8610	.eaaf	08		php		                php
8611	.eab0	78		sei		                sei
8612	.eab1	08		php		                php
8613	.eab2	38		sec		                sec
8614	.eab3	bd e0 02	lda $02e0,x	                lda bufferEndIndices,x
8615	.eab6	fd d7 02	sbc $02d7,x	                sbc bufferStartIndices,x
8616	.eab9	b0 04		bcs $eabf	                bcs LE994
8617	.eabb	38		sec		                sec
8618	.eabc	fd 06 eb	sbc $eb06,x	                sbc bufferIndex0Offsets,x
8619	.eabf					LE994:
8620	.eabf	28		plp		                plp
8621	.eac0	90 06		bcc $eac8	                bcc LE99D
8622	.eac2	18		clc		                clc
8623	.eac3	7d 06 eb	adc $eb06,x	                adc bufferIndex0Offsets,x
8624	.eac6	49 ff		eor #$ff	                eor #$FF
8625	.eac8					LE99D:
8626	.eac8	a0 00		ldy #$00	                ldy #$00
8627	.eaca	aa		tax		                tax
8628	.eacb	28		plp		                plp
8629	.eacc					rtsE9A1:
8630	.eacc	60		rts		                rts

8632						;-------------------------------------------------------------------------

8634	.eacd					LE9A2:
8635	.eacd	58		cli		                cli
8636	.eace					LE9A3:
8637	.eace	78		sei		                sei
8638	.eacf					LE9A4:
8639	.eacf	20 6b eb	jsr $eb6b	                jsr callINSV
8640	.ead2	90 f8		bcc $eacc	                bcc rtsE9A1
8641	.ead4	20 00 f3	jsr $f300	                jsr LF241
8642	.ead7	48		pha		                pha
8643	.ead8	20 42 f5	jsr $f542	                jsr updateKeyboardLEDs
8644	.eadb	0a		asl a		                asl a
8645	.eadc	68		pla		                pla
8646	.eadd	90 ee		bcc $eacd	                bcc LE9A2
8647	.eadf	60		rts		                rts

8649						;-------------------------------------------------------------------------
8650						;
8651						; OSBYTE $77
8652						;
8653						; D.2-33
8654						;
8656	.eae0					selectTerminalROMAndOSBYTE77:
8657	.eae0	20 61 f4	jsr $f461	                jsr withTerminalROM
8658	.eae3	4c 3c 96	jmp $963c	                jmp osbyte77

8661						;-------------------------------------------------------------------------
8662						;
8663						; Get *IGNORE CMOS byte offset and mask for a given ROM.
8664						;
8665						; entry:
8666						;
8667						; Y = ROM number
8668						;
8669						; exit:
8670						;
8671						; A = mask
8672						;
8673						; X = RTC address of byte
8674						;
8675	.eae6					getROMInsertedFlagRTCAddressAndMask:
8676	.eae6	a9 00		lda #$00	                lda #$00
8677	.eae8	38		sec		                sec
8678	.eae9	a2 06		ldx #$06	                ldx #CMOSBytes.insertedROMs+0+cmosBytesOffset
8679	.eaeb					-
8680	.eaeb	2a		rol a		                rol a
8681	.eaec	d0 02		bne $eaf0	                bne +
8682	.eaee	e8		inx		                inx
8683	.eaef	2a		rol a		                rol a
8684	.eaf0					+
8685	.eaf0	88		dey		                dey
8686	.eaf1	10 f8		bpl $eaeb	                bpl -
8687	.eaf3	60		rts		                rts

8689						;-------------------------------------------------------------------------

8691	=[]					_:=[]
8692	=[($03e0,32)]				_..=[(bufferKeyboardAddress,bufferKeyboardSize)]
8693	=[($03e0,32),($0a00,256)]		_..=[(bufferRS423InputAddress,bufferRS423InputSize)]
8694	=[($03e0,32),($0a00,256),($0900,192)]	_..=[(bufferRS423OutputAddress,bufferRS423OutputSize)]
8695	=[($03e0,32),($0a00,256),($0900,192),($0880,64)]
						_..=[(bufferPrinterAddress,bufferPrinterSize)]
8696	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16)]
						_..=[(bufferSoundChannel0Address,bufferSoundChannel0Size)]
8697	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16)]
						_..=[(bufferSoundChannel1Address,bufferSoundChannel1Size)]
8698	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16)]
						_..=[(bufferSoundChannel2Address,bufferSoundChannel2Size)]
8699	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16),($0870,16)]
						_..=[(bufferSoundChannel3Address,bufferSoundChannel3Size)]
8700	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16),($0870,16),($09c0,64)]
						_..=[(buffer8Address,buffer8Size)]
8701	=[($03e0,32),($0a00,256),($0900,192),($0880,64),($0840,16),($0850,16),($0860,16),($0870,16),($09c0,64)]
						buffers=_

8703						BufferTableIndex0Offset: .function buffer
8704						                .endfunction 256-buffer[1]

8706						BufferTableBase: .function buffer
8707						                .endfunction buffer[0]-BufferTableIndex0Offset(buffer)

8709						;-------------------------------------------------------------------------
8710						;
8711						; Buffer base addresses - each buffer's address, offset by the offset
8712						; for index 0 (see bufferIndex0Offsets).
8713						;
8714	.eaf4					bufferBaseAddressMSBs:
8715						                .for _i=0,_i<len(buffers),_i+=1
8716	>eaf4	03				                .byte >BufferTableBase(buffers[_i])
8716	>eaf5	0a				                .byte >BufferTableBase(buffers[_i])
8716	>eaf6	08				                .byte >BufferTableBase(buffers[_i])
8716	>eaf7	07				                .byte >BufferTableBase(buffers[_i])
8716	>eaf8	07				                .byte >BufferTableBase(buffers[_i])
8716	>eaf9	07				                .byte >BufferTableBase(buffers[_i])
8716	>eafa	07				                .byte >BufferTableBase(buffers[_i])
8716	>eafb	07				                .byte >BufferTableBase(buffers[_i])
8716	>eafc	09				                .byte >BufferTableBase(buffers[_i])
8717						                .endfor

8719	.eafd					bufferBaseAddressLSBs:
8720						                .for _i=0,_i<len(buffers),_i+=1
8721	>eafd	00				                .byte <BufferTableBase(buffers[_i])
8721	>eafe	00				                .byte <BufferTableBase(buffers[_i])
8721	>eaff	c0				                .byte <BufferTableBase(buffers[_i])
8721	>eb00	c0				                .byte <BufferTableBase(buffers[_i])
8721	>eb01	50				                .byte <BufferTableBase(buffers[_i])
8721	>eb02	60				                .byte <BufferTableBase(buffers[_i])
8721	>eb03	70				                .byte <BufferTableBase(buffers[_i])
8721	>eb04	80				                .byte <BufferTableBase(buffers[_i])
8721	>eb05	00				                .byte <BufferTableBase(buffers[_i])
8722						                .endfor

8724						;-------------------------------------------------------------------------

8726						; Offset of buffer index 0 for each buffer. Index 0 is (-buffer size)
8727						; - buffer indexes count up, and wrap once they reach 0.

8729	.eb06					bufferIndex0Offsets:
8730						                .for _i=0,_i<len(buffers),_i+=1
8731	>eb06	e0				                .byte BufferTableIndex0Offset(buffers[_i])
8731	>eb07	00				                .byte BufferTableIndex0Offset(buffers[_i])
8731	>eb08	40				                .byte BufferTableIndex0Offset(buffers[_i])
8731	>eb09	c0				                .byte BufferTableIndex0Offset(buffers[_i])
8731	>eb0a	f0				                .byte BufferTableIndex0Offset(buffers[_i])
8731	>eb0b	f0				                .byte BufferTableIndex0Offset(buffers[_i])
8731	>eb0c	f0				                .byte BufferTableIndex0Offset(buffers[_i])
8731	>eb0d	f0				                .byte BufferTableIndex0Offset(buffers[_i])
8731	>eb0e	c0				                .byte BufferTableIndex0Offset(buffers[_i])
8732						                .endfor

8734						;-------------------------------------------------------------------------
8735						;
8736						; Get base address for a buffer.
8737						;
8738						; entry:
8739						;
8740						; X = buffer number
8741						;
8742						; exit:
8743						;
8744						; (SEIWKA) = buffer base address
8745						;
8746	.eb0f					getBufferBaseAddress:
8747	.eb0f	bd fd ea	lda $eafd,x	                lda bufferBaseAddressLSBs,x
8748	.eb12	85 fa		sta $fa		                sta SEIWKA
8749	.eb14	bd f4 ea	lda $eaf4,x	                lda bufferBaseAddressMSBs,x
8750	.eb17	85 fb		sta $fb		                sta SEIWKB
8751	.eb19	60		rts		                rts

8753						;-------------------------------------------------------------------------
8754						;
8755						; OSBYTE 152 (&98) Examine buffer status [MasRef D.2-45]
8756						;
8757	.eb1a					osbyte98:
8758	.eb1a	2c 70 e3	bit $e370	                bit valueFF                  ;V=1
8759	.eb1d	80 01		bra $eb20	                bra callREMV

8761						;-------------------------------------------------------------------------
8762						;
8763						; OSBYTE 145 (&91) Get character from buffer [MasRef D.2-45]
8764						;
8765						; X = buffer number
8766	.eb1f					osbyte91:
8767	.eb1f	b8		clv		                clv                          ;remove
8768	.eb20					callREMV:
8769	.eb20	6c 2c 02	jmp ($022c)	                jmp (REMV)

8771						;-------------------------------------------------------------------------
8772						;
8773						; Buffer remove entry point. [AUG p263]
8774						;
8775						; Even in remove mode, A is the character removed on exit. Some of the
8776						; other MOS routines rely on this.
8777						;
8778	.eb23					remEntryPoint:
8779	.eb23	08		php		                php
8780	.eb24	78		sei		                sei
8781	.eb25	bd d7 02	lda $02d7,x	                lda bufferStartIndices,x
8782	.eb28	dd e0 02	cmp $02e0,x	                cmp bufferEndIndices,x
8783	.eb2b	f0 6c		beq $eb99	                beq plp_sec_rts  ;taken if buffer empty
8784	.eb2d	a8		tay		                tay                          ;Y=start index
8785	.eb2e	20 0f eb	jsr $eb0f	                jsr getBufferBaseAddress
8786	.eb31	b1 fa		lda ($fa),y	                lda (SEIWKA),y               ;get byte from buffer
8787	.eb33	70 1a		bvs $eb4f	                bvs tay_plp_clc_rts                  ;taken if only looking
8788	.eb35	48		pha		                pha                          ;save buffered byte
8789	.eb36	c8		iny		                iny                          ;next char in buffer
8790	.eb37	98		tya		                tya                          ;set Z if wrap
8791	.eb38	d0 03		bne $eb3d	                bne +                        ;branch taken if no wrap
8792	.eb3a	bd 06 eb	lda $eb06,x	                lda bufferIndex0Offsets,x    ;reset index on wrap
8793	.eb3d					+
8794	.eb3d	9d d7 02	sta $02d7,x	                sta bufferStartIndices,x

8796						                ; Issue output buffer empty event when appropriate.
8797	.eb40	e0 02		cpx #$02	                cpx #bufferFirstOutput
8798	.eb42	90 0a		bcc $eb4e	                bcc pla_tay_plp_clc_rts ;taken if keyboard or RS423
8799						                                        ;input - i.e., buffer is input
8800	.eb44	dd e0 02	cmp $02e0,x	                cmp bufferEndIndices,x       ;buffer now empty?
8801	.eb47	d0 05		bne $eb4e	                bne pla_tay_plp_clc_rts           ;taken if not empty
8802	.eb49	a0 00		ldy #$00	                ldy #eventOutputBufferEmpty
8803	.eb4b	20 53 eb	jsr $eb53	                jsr eventEntryPoint
8804	.eb4e					pla_tay_plp_clc_rts:
8805	.eb4e	68		pla		                pla                          ;restore buffered byte
8806	.eb4f					tay_plp_clc_rts:
8807	.eb4f	a8		tay		                tay                          ;Y=buffered byte
8808	.eb50					plp_clc_rts:
8809	.eb50	28		plp		                plp
8810	.eb51	18		clc		                clc
8811	.eb52	60		rts		                rts

8813						;-------------------------------------------------------------------------
8814						;
8815						; [MasRef D.9-1]
8816						;
8817	.eb53					eventEntryPoint:
8818	.eb53	08		php		                php
8819	.eb54	78		sei		                sei
8820	.eb55	48		pha		                pha
8821	.eb56	b9 bf 02	lda $02bf,y	                lda eventEnabledFlags,y      ;is the event enabled?
8822	.eb59	f0 3d		beq $eb98	                beq pla_plp_sec_rts                    ;
8823	.eb5b	98		tya		                tya
8824	.eb5c	7a		ply		                ply
8825	.eb5d	5a		phy		                phy
8826	.eb5e	20 5b f7	jsr $f75b	                jsr LF8BF
8827	.eb61	80 eb		bra $eb4e	                bra pla_tay_plp_clc_rts

8829						;-------------------------------------------------------------------------
8830						;
8831						; Insert character into buffer and issue an event for it.
8832						;
8833						; entry:
8834						;
8835						; Y = buffer number
8836						;
8837	.eb63					insertCharacterIntoBuffer:
8838	.eb63	98		tya		                tya
8839	.eb64	a0 02		ldy #$02	                ldy #eventCharacterEnteringBuffer
8840	.eb66	20 53 eb	jsr $eb53	                jsr eventEntryPoint
8841	.eb69	a8		tay		                tay

8843						;-------------------------------------------------------------------------
8844						;
8845						; OSBYTE 138 (&8A) Insert character code into buffer [MasRef D.2-43]
8846						;
8847	.eb6a					osbyte8A:
8848	.eb6a	98		tya		                tya
8849	.eb6b					callINSV:
8850	.eb6b	6c 2a 02	jmp ($022a)	                jmp (INSV)

8852						;-------------------------------------------------------------------------
8853						;
8854						; Default INSV entry point [AUG p263]
8855						;
8856	.eb6e					insEntryPoint:
8857	.eb6e	08		php		                php
8858	.eb6f	78		sei		                sei
8859	.eb70	48		pha		                pha                          ;save value to insert
8860	.eb71	bd e0 02	lda $02e0,x	                lda bufferEndIndices,x       ;get buffer index
8861	.eb74	1a		inc a		                inc a                        ;bump index
8862	.eb75	d0 03		bne $eb7a	                bne +          ;taken if index hasn't wrapped around
8863	.eb77	bd 06 eb	lda $eb06,x	                lda bufferIndex0Offsets,x        ;reset index due to wrap
8864	.eb7a					+
8865	.eb7a	dd d7 02	cmp $02d7,x	                cmp bufferStartIndices,x     ;are we at the start index?
8866	.eb7d	f0 0e		beq $eb8d	                beq bufferFull       ;taken if yes - i.e., buffer full
8867	.eb7f	bc e0 02	ldy $02e0,x	                ldy bufferEndIndices,x       ;note old buffer end
8868	.eb82	9d e0 02	sta $02e0,x	                sta bufferEndIndices,x       ;update buffer end
8869	.eb85	20 0f eb	jsr $eb0f	                jsr getBufferBaseAddress
8870	.eb88	68		pla		                pla                          ;restore value to insert
8871	.eb89	91 fa		sta ($fa),y	                sta (SEIWKA),y               ;store byte in buffer
8872	.eb8b	80 c3		bra $eb50	                bra plp_clc_rts              ;done

8874	.eb8d					bufferFull
8875						                ; Issue input buffer full event when appropriate.
8876	.eb8d	68		pla		                pla
8877	.eb8e	e0 02		cpx #$02	                cpx #bufferFirstOutput
8878	.eb90	b0 07		bcs $eb99	                bcs plp_sec_rts  ;taken if output buffer
8879	.eb92	a0 01		ldy #$01	                ldy #eventInputBufferFull
8880	.eb94	20 53 eb	jsr $eb53	                jsr eventEntryPoint
8881	.eb97	48		pha		                pha
8882	.eb98					pla_plp_sec_rts:
8883	.eb98	68		pla		                pla
8884	.eb99					plp_sec_rts:
8885	.eb99	28		plp		                plp
8886	.eb9a	38		sec		                sec
8887	.eb9b	60		rts		                rts

8889						;-------------------------------------------------------------------------
8890						;
8891						; Check if character is a letter - A-Z or a-z.
8892						;
8893						; Entry:
8894						;
8895						; A = character to test
8896						;
8897						; Exit:
8898						;
8899						; C=0 if character is letter, C=1 otherwise
8900						;
8901						; Preserves: A/X/Y
8902	.eb9c					isLetter: .proc                 ;EA71
8903	.eb9c	48		pha		                pha
8904	.eb9d	29 df		and #$df	                and #$DF        ;convert to upper case
8905	.eb9f	c9 5b		cmp #$5b	                cmp #'Z'+1
8906	.eba1	b0 04		bcs $eba7	                bcs +           ;branch taken with C=1 if past Z
8907	.eba3	49 ff		eor #$ff	                eor #$FF
8908	.eba5	c9 bf		cmp #$bf	                cmp #-'A'       ;C=1 if past A
8909	.eba7					+
8910	.eba7	68		pla		                pla
8911	.eba8	60		rts		                rts
8912						                .pend

8914						;-------------------------------------------------------------------------
8915						;
8916						; OSBYTE 153 (&99) Insert character code into buffer, checking for
8917						; ESCAPE [MasRef D.2-46]
8918						;
8923	.eba9					insertCharacterIntoKeyboardBuffer:
8924	.eba9	a2 00		ldx #$00	                ldx #$00
8925	.ebab					osbyte99:
8927	.ebab	8a		txa		                txa                          ;X=1 if RS423, 0 if keyboard
8928	.ebac	2d 45 02	and $0245	                and rs423InputInterpretationStatus ;A=0 if RS423 simulates keyboard, 1=default
8929	.ebaf	d0 b9		bne $eb6a	                bne osbyte8A ;taken if default - don't treat RS423 as keyboard
8931	.ebb1	98		tya		                tya          ;A=char
8932	.ebb2	4d 6c 02	eor $026c	                eor escapeCharacter
8933	.ebb5	0d 75 02	ora $0275	                ora escapeKeyStatus
8934	.ebb8	d0 a9		bne $eb63	                bne insertCharacterIntoBuffer
8935	.ebba	ad 58 02	lda $0258	                lda breakAndESCAPEEffect
8936	.ebbd	6a		ror a		                ror a                        ;C=0 if normal ESCAPE action
8937	.ebbe	98		tya		                tya                          ;A=char
8938	.ebbf	b0 0a		bcs $ebcb	                bcs osbyte99Done             ;taken if ESCAPE inhibited
8939	.ebc1	a0 06		ldy #$06	                ldy #eventESCAPEPressed
8940	.ebc3	20 53 eb	jsr $eb53	                jsr eventEntryPoint
8941	.ebc6	90 03		bcc $ebcb	                bcc osbyte99Done             ;taken if event handled
8942	.ebc8	20 fc ec	jsr $ecfc	                jsr osbyte7D
8943	.ebcb					osbyte99Done:
8944	.ebcb	18		clc		                clc
8945	.ebcc	60		rts		                rts

8947						;-------------------------------------------------------------------------

8949						; A = 0 (edit keys)/1 (ascii keys)/2 (F keys)
8950	.ebcd					handleCursorKeysAndCopy:
8956	.ebcd	c9 02		cmp #$02	                cmp #2
8957	.ebcf	68		pla		                pla
8958	.ebd0	90 2a		bcc $ebfc	                bcc clc_rts_EABD

8961	.ebd2					handleFunctionKey:
8962	.ebd2	98		tya		                tya
8970	.ebd3	48		pha		                pha
8971	.ebd4	98		tya		                tya
8972	.ebd5	4a		lsr a		                lsr a
8973	.ebd6	4a		lsr a		                lsr a
8974	.ebd7	4a		lsr a		                lsr a
8975	.ebd8	4a		lsr a		                lsr a
8977	.ebd9	49 04		eor #$04	                eor #$04
8978	.ebdb	a8		tay		                tay
8979	.ebdc	b9 65 02	lda $0265,y	                lda input192To207Interpretation-8,y
8980	.ebdf	4a		lsr a		                lsr a
8987	.ebe0	d0 03		bne $ebe5	                bne +
8988	.ebe2	4c a0 ec	jmp $eca0	                jmp LEC99
8989	.ebe5					+
8990	.ebe5	2a		rol a		                rol a
8991	.ebe6	c9 02		cmp #$02	                cmp #2
8992	.ebe8	d0 0b		bne $ebf5	                bne LEBF5
8993	.ebea					LEBEA:
8994	.ebea	68		pla		                pla
8995	.ebeb	85 f8		sta $f8		                sta softKeyExpansionPtr
8996	.ebed	a9 ff		lda #$ff	                lda #$ff
8997	.ebef	8d 68 02	sta $0268	                sta softKeyStringLength
8998	.ebf2	1a		inc a		                inc a
8999	.ebf3	80 07		bra $ebfc	                bra clc_rts_EABD

9001	.ebf5					LEBF5:
9002	.ebf5	68		pla		                pla
9003	.ebf6	29 0f		and #$0f	                and #$0f
9004	.ebf8	18		clc		                clc
9005	.ebf9	79 65 02	adc $0265,y	                adc input192To207Interpretation-8,y

9008	.ebfc					clc_rts_EABD:
9009	.ebfc	18		clc		                clc
9010	.ebfd	60		rts		                rts

9012						;-------------------------------------------------------------------------

9014	.ebfe					copyCharNotRecognised:
9015	.ebfe	20 67 f0	jsr $f067	                jsr vdu7EntryPoint           ;beep
9016	.ec01	fa		plx		                plx
9017	.ec02					readFromInputBufferX:
9018	.ec02	20 1f eb	jsr $eb1f	                jsr osbyte91          ;extract character from buffer X
9022	.ec05	b0 0c		bcs $ec13	                bcs LEC0D
9023	.ec07	a8		tay		                tay
9024	.ec08	d0 1f		bne $ec29	                bne LEAC8
9026	.ec0a	8a		txa		                txa
9027	.ec0b	2d 45 02	and $0245	                and rs423InputInterpretationStatus
9028	.ec0e	d0 18		bne $ec28	                bne LEC29
9033	.ec10	20 1f eb	jsr $eb1f	                jsr osbyte91
9035	.ec13					LEC0D:
9036	.ec13	b0 7e		bcs $ec93	                bcs rtsEB28
9037	.ec15	a8		tay		                tay
9038	.ec16	d0 e4		bne $ebfc	                bne clc_rts_EABD
9039	.ec18	48		pha		                pha
9040	.ec19	a0 08		ldy #$08	                ldy #8

9042	.ec1b					LEC15:
9043	.ec1b	b9 6c 02	lda $026c,y	                lda shiftCtrlSoftKeyInterpretation-8,y
9044	.ec1e	c9 02		cmp #$02	                cmp #2
9045	.ec20	f0 c8		beq $ebea	                beq LEBEA
9046	.ec22	88		dey		                dey
9047	.ec23	d0 f6		bne $ec1b	                bne LEC15
9048	.ec25	68		pla		                pla
9049	.ec26	80 d4		bra $ebfc	                bra clc_rts_EABD

9053	.ec28					LEC29:
9054	.ec28	98		tya		                tya

9058	.ec29					LEAC8:
9059	.ec29	48		pha		                pha                   ;save character extracted
9060	.ec2a	e0 01		cpx #$01	                cpx #bufferRS423Input ;was it RS423 input buffer?
9061	.ec2c	d0 06		bne $ec34	                bne LEAD3             ;taken if not RS423 input buffer
9062	.ec2e	20 36 ea	jsr $ea36	                jsr setRS423Active
9063	.ec31	38		sec		                sec
9064	.ec32	a2 01		ldx #$01	                ldx #bufferRS423Input

9066	.ec34					LEAD3:
9067	.ec34	68		pla		                pla                          ;restore char extracted
9068	.ec35	90 05		bcc $ec3c	                bcc LEADB                    ;taken if keyboard buffer
9069	.ec37	ac 45 02	ldy $0245	                ldy rs423InputInterpretationStatus ;D.2-54
9070	.ec3a	d0 56		bne $ec92	                bne clc_rts_EB27             ;taken if default mode

9073	.ec3c					LEADB:
9074	.ec3c	a8		tay		                tay                          ;Y = char
9075	.ec3d	10 53		bpl $ec92	                bpl clc_rts_EB27             ;if normal char, all good
9076	.ec3f	29 0f		and #$0f	                and #$0F
9077	.ec41	c9 0b		cmp #$0b	                cmp #$0B
9078	.ec43	90 8d		bcc $ebd2	                bcc handleFunctionKey        ;taken if F key
9079	.ec45	69 7b		adc #$7b	                adc #$7B    ;C=1, so +$7c - convert $0b-0$f to $87-$8B
9080	.ec47	48		pha		                pha         ;save translated value
9081	.ec48	ad 7d 02	lda $027d	                lda editKeysMode
9082	.ec4b	d0 80		bne $ebcd	                bne handleCursorKeysAndCopy  ;taken if not editKeys
9083	.ec4d	ad 7c 02	lda $027c	                lda characterDestinationStatus
9084	.ec50	6a		ror a		                ror a                        ;C=rs423_enable
9085	.ec51	6a		ror a		                ror a                        ;C=vdu_disable
9086	.ec52	68		pla		                pla                          ;restore translated value
9087	.ec53	b0 ad		bcs $ec02	                bcs readFromInputBufferX     ;taken if VDU output disabled
9088	.ec55	c9 87		cmp #$87	                cmp #$87                     ;COPY?
9089	.ec57	f0 3b		beq $ec94	                beq readCopyChar
9090	.ec59	da		phx		                phx                          ;save buffer number
9091	.ec5a	20 d0 ec	jsr $ecd0	                jsr handleCursorKeyThunk     ;handle cursor key
9092	.ec5d	fa		plx		                plx
9093	.ec5e					readFromEconetOrSoftKeyOrInputBufferA:
9097	.ec5e	2c 5f 02	bit $025f	                bit econetInputInterpretationStatus
9098	.ec61	10 05		bpl $ec68	                bpl readFromSoftKeyOrInputBufferA
9099	.ec63	a9 06		lda #$06	                lda #netReadCharacterAttempted
9100	.ec65					callNETV:
9101	.ec65	6c 24 02	jmp ($0224)	                jmp (NETV)

9103	.ec68					readFromSoftKeyOrInputBufferA:
9104	.ec68	ad 68 02	lda $0268	                lda softKeyStringLength
9105	.ec6b	f0 95		beq $ec02	                beq readFromInputBufferX
9107	.ec6d	1a		inc a		                inc a
9108	.ec6e	d0 07		bne $ec77	                bne LEC70
9109	.ec70	9c 68 02	stz $0268	                stz softKeyStringLength
9110	.ec73	a5 f8		lda $f8		                lda softKeyExpansionPtr
9111	.ec75	80 1b		bra $ec92	                bra clc_rts_EB27
9112	.ec77					LEC70:
9115	.ec77	8a		txa		                txa
9116	.ec78	2d 45 02	and $0245	                and rs423InputInterpretationStatus
9117	.ec7b	d0 85		bne $ec02	                bne readFromInputBufferX
9119	.ec7d	a5 f4		lda $f4		                lda $F4
9120	.ec7f	48		pha		                pha
9121	.ec80	20 b1 e5	jsr $e5b1	                jsr selectTerminalROMAndANDY2
9122	.ec83	b2 f8		lda ($f8)	                lda (softKeyExpansionPtr)
9123	.ec85	fa		plx		                plx
9124	.ec86	20 9a e5	jsr $e59a	                jsr selectROMX
9125	.ec89	ce 68 02	dec $0268	                dec softKeyStringLength
9126	.ec8c	e6 f8		inc $f8		                inc softKeyExpansionPtr+0
9127	.ec8e	d0 02		bne $ec92	                bne clc_rts_EB27
9128	.ec90	e6 f9		inc $f9		                inc softKeyExpansionPtr+1
9129	.ec92					clc_rts_EB27:
9130	.ec92	18		clc		                clc
9131	.ec93					rtsEB28:
9132	.ec93	60		rts		                rts

9134	.ec94					readCopyChar:
9135	.ec94	da		phx		                phx
9136	.ec95	20 d6 ec	jsr $ecd6	                jsr handleCopyKeyThunk
9140	.ec98	d0 03		bne $ec9d	                bne +
9141	.ec9a	4c fe eb	jmp $ebfe	                jmp copyCharNotRecognised
9142	.ec9d					+
9144	.ec9d	fa		plx		                plx
9145	.ec9e	18		clc		                clc
9146	.ec9f					rtsEB31:
9147	.ec9f	60		rts		                rts

9150	.eca0					LEC99:
9151	.eca0	68		pla		                pla
9152	.eca1	29 0f		and #$0f	                and #$0f
9153	.eca3	a8		tay		                tay
9154	.eca4	b0 03		bcs $eca9	                bcs LECA2
9155	.eca6	4c 02 ec	jmp $ec02	                jmp readFromInputBufferX

9157	.eca9					LECA2:
9158	.eca9	8d c9 02	sta $02c9	                sta currentSoftKey

9170	.ecac	a5 f4		lda $f4		                lda $F4
9171	.ecae	48		pha		                pha                           ;save old ROMSEL
9172	.ecaf	20 b1 e5	jsr $e5b1	                jsr selectTerminalROMAndANDY2
9173	.ecb2	20 c8 ec	jsr $ecc8	                jsr getSoftKeyStringLength
9174	.ecb5	8d 68 02	sta $0268	                sta softKeyStringLength
9175	.ecb8	b9 00 80	lda $8000,y	                lda andy.softKeys.stringLSBs,y
9176	.ecbb	85 f8		sta $f8		                sta softKeyExpansionPtr+0
9177	.ecbd	b9 11 80	lda $8011,y	                lda andy.softKeys.stringMSBs,y
9178	.ecc0	85 f9		sta $f9		                sta softKeyExpansionPtr+1
9179	.ecc2	68		pla		                pla
9180	.ecc3	20 ab e5	jsr $e5ab	                jsr selectROMA               ;restore old ROMSEL
9181	.ecc6	80 96		bra $ec5e	                bra readFromEconetOrSoftKeyOrInputBufferA

9183						;-------------------------------------------------------------------------

9185	.ecc8					getSoftKeyStringLength:
9186	.ecc8	b9 01 80	lda $8001,y	                lda andy.softKeys.stringLSBs+1,y
9187	.eccb	38		sec		                sec
9188	.eccc	f9 00 80	sbc $8000,y	                sbc andy.softKeys.stringLSBs+0,y
9189	.eccf	60		rts		                rts

9191						;-------------------------------------------------------------------------
9192						;
9193						; Page HAZEL out, page MOS in, call handleCursorKey.
9194						;
9195	.ecd0					handleCursorKeyThunk:
9196	.ecd0	20 88 f4	jsr $f488	                jsr withMOSROM
9197	.ecd3	4c 78 df	jmp $df78	                jmp handleCursorKey

9199						;-------------------------------------------------------------------------
9200						;
9201						; Page HAZEL out, page MOS in, call handleCopyKey.
9202						;
9203	.ecd6					handleCopyKeyThunk:
9204	.ecd6	20 88 f4	jsr $f488	                jsr withMOSROM
9205	.ecd9	4c 5e df	jmp $df5e	                jmp handleCopyKey

9207						;-------------------------------------------------------------------------

9219						;-------------------------------------------------------------------------

9225						;-------------------------------------------------------------------------

9227	.ecdc					osbyte88: ;LEC37:
9228	.ecdc	a9 00		lda #$00	                lda #$00

9230	.ecde					callUSERV:
9231	.ecde	6c 00 02	jmp ($0200)	                jmp (USERV)

9233	.ece1					osbyte7E:                       ;ec3c
9234	.ece1	a2 00		ldx #$00	                ldx #$00
9235	.ece3	24 ff		bit $ff		                bit $FF
9236	.ece5	10 14		bpl $ecfb	                bpl osbyte7C
9237	.ece7	ad 76 02	lda $0276	                lda escapeEffects
9238	.ecea	d0 0d		bne $ecf9	                bne LEC54
9239	.ecec	58		cli		                cli
9240	.eced	9c 69 02	stz $0269	                stz pagedModeCounter
9241	.ecf0	20 61 f4	jsr $f461	                jsr withTerminalROM
9242	.ecf3	20 00 aa	jsr $aa00	                jsr starEXEC
9243	.ecf6	20 72 ea	jsr $ea72	                jsr LE947
9244	.ecf9					LEC54:
9245	.ecf9	a2 ff		ldx #$ff	                ldx #$FF
9246	.ecfb					osbyte7C: ;EC56
9247	.ecfb	18		clc		                clc
9248	.ecfc					osbyte7D: ;EC57
9260	.ecfc	08		php		                php
9261	.ecfd	78		sei		                sei
9262	.ecfe	08		php		                php
9263	.ecff	06 ff		asl $ff		                asl escapeFlag
9264	.ed01	28		plp		                plp
9265	.ed02	66 ff		ror $ff		                ror escapeFlag
9266	.ed04	28		plp		                plp
9267	.ed05	80 6e		bra $ed75	                bra LECD9

9270						;-------------------------------------------------------------------------

9282						;-------------------------------------------------------------------------
9283						;
9284						; ;OSBYTE 8 (&08) Write RS423 transmit rate
9285						;
9286						; This call sets the RS423 baud rate for transmitting data. The actual format of
9287						; the data is set using OSBYTE 156/&9C (see below).
9288						;
9289						; Entry parameters :
9290						; X=0 selects 9600 baud
9291						; X=1 selects 75 baud
9292						; X=2 selects 150 baud
9293						; X=3 selects 300 baud
9294						; X=4 selects 1200 baud
9295						; X=5 selects 2400 baud
9296						; X=6 selects 4800 baud
9297						; X=7 selects 9600 baud
9298						; X=8 selects 19200 baud
9299						; Y=0
9300						;
9301						; On exit : X=Y=<old serial ACIA control register contents>

9304	.ed07					osbyte08:
9305	.ed07	a9 38		lda #$38	                lda #$38
9306						                ; fall through to OSBYTE &07

9309						;-------------------------------------------------------------------------
9310						;
9311						; OSBYTE 7 (&07) Write RS423 receive rate
9312						;
9313						; This call sets the RS423 baud rate for receiving data. The actual
9314						; format of the data is set using OSBYTE 156/&9C (see below).
9315						;
9316						; Entry parameters :
9317						; X=0 selects 9600 baud
9318						; X=1 selects 75 baud
9319						; X=2 selects 150 baud
9320						; X=3 selects 300 baud
9321						; X=4 selects 1200 baud
9322						; X=5 selects 2400 baud
9323						; X=6 selects 4800 baud
9324						; X=7 selects 9600 baud
9325						; X=8 selects 19200 baud
9326						; Y=0
9327						;
9328						; On exit : X=Y=<old serial ACIA control register contents>

9331	.ed09					osbyte07:                                    ;ec6d
9332	.ed09	49 3f		eor #$3f	                eor #$3F                     ;if OSBYTE 8,
9333						                                             ;A=%00000111, mask for
9334						                                             ;transmit rate; if OSBYTE
9335						                                             ;8, A=%000111000, mask
9336						                                             ;for receive rate.
9337	.ed0b	85 fa		sta $fa		                sta $FA                      ;save mask
9338	.ed0d	ac 82 02	ldy $0282	                ldy serialULARegister                    ;
9339	.ed10	e0 09		cpx #$09	                cpx #$09                     ;check for invalid baud rate
9340	.ed12	b0 17		bcs $ed2b	                bcs LEC8F                    ;branch taken if invalid
9341	.ed14	3d 9d f1	and $f19d,x	                and serialBaudRatesTable,x   ;get setting in A
9342	.ed17	85 fb		sta $fb		                sta $FB                      ;store setting
9343	.ed19	98		tya		                tya                          ;
9344	.ed1a	05 fa		ora $fa		                ora $FA
9345	.ed1c	45 fa		eor $fa		                eor $FA
9346	.ed1e	05 fb		ora $fb		                ora $FB
9347	.ed20	09 40		ora #$40	                ora #$40
9348	.ed22	4d 5d 02	eor $025d	                eor rs423Destination ;mask in tape/serial flag set by OSBYTE 205ac
9349	.ed25					LEC89:
9350	.ed25	8d 82 02	sta $0282	                sta serialULARegister
9351	.ed28	8d 10 fe	sta $fe10	                sta SERPROC+0
9352	.ed2b					LEC8F:
9353	.ed2b	98		tya		                tya
9354	.ed2c					LEC90:
9355	.ed2c	aa		tax		                tax
9356	.ed2d	60		rts		                rts

9366						;-------------------------------------------------------------------------

9368						; Y=0 on entry.

9370	.ed2e					osbyte09:                       ;ec92
9371	.ed2e	c8		iny		                iny
9372	.ed2f	18		clc		                clc
9373	.ed30					osbyte0A:                                    ;ec94
9374	.ed30	b9 52 02	lda $0252,y	                lda firstFlashColourDuration,y
9375	.ed33	48		pha		                pha
9376	.ed34	8a		txa		                txa
9377	.ed35	99 52 02	sta $0252,y	                sta firstFlashColourDuration,y
9378	.ed38	7a		ply		                ply
9379	.ed39	ad 51 02	lda $0251	                lda flashCounter
9380	.ed3c	d0 ed		bne $ed2b	                bne LEC8F
9381	.ed3e	8e 51 02	stx $0251	                stx flashCounter
9382	.ed41	ad 48 02	lda $0248	                lda vcontrolRegister
9383	.ed44	08		php		                php
9384	.ed45	6a		ror a		                ror a
9385	.ed46	28		plp		                plp
9386	.ed47	2a		rol a		                rol a
9387	.ed48	8d 48 02	sta $0248	                sta vcontrolRegister
9388	.ed4b	8d 20 fe	sta $fe20	                sta VCONTROL
9389	.ed4e	80 db		bra $ed2b	                bra LEC8F

9391						;-------------------------------------------------------------------------
9392						;
9393						; OSBYTE 2 (&02) Specify input stream
9394						;
9395						; Input may be taken from either the keyboard (by default) or the
9396						; RS423 port. This call specifies the selection for all subsequent
9397						; input.
9398						;
9399						; Entry parameters :
9400						; X=0 selects keyboard input and disables RS423
9401						; X=1 selects and enables RS423 input
9402						; X=2 selects keyboard input and enables RS423
9403						; Y=0
9404						;
9405						; On exit : X=0 indicates previous input was from the keyboard
9406						;           X=1 indicates previous input was from RS423
9407						;           Y is undefined
9408						;
9409						; D.2-18
9411	.ed50					osbyte02:                       ;ecb4
9412	.ed50	8a		txa		                txa
9413	.ed51	29 01		and #$01	                and #$01
9414	.ed53	48		pha		                pha
9415	.ed54	ad 50 02	lda $0250	                lda aciaControlRegister
9416	.ed57	2a		rol a		                rol a
9417	.ed58	e0 01		cpx #$01	                cpx #$01
9418	.ed5a	6a		ror a		                ror a
9419	.ed5b	cd 50 02	cmp $0250	                cmp aciaControlRegister
9420	.ed5e	08		php		                php
9421	.ed5f	8d 50 02	sta $0250	                sta aciaControlRegister
9422	.ed62	8d 08 fe	sta $fe08	                sta ACIA+0
9423	.ed65	20 36 ea	jsr $ea36	                jsr setRS423Active
9424	.ed68	28		plp		                plp
9425	.ed69	f0 03		beq $ed6e	                beq LECD2
9426	.ed6b	2c 09 fe	bit $fe09	                bit ACIA+1
9427	.ed6e					LECD2:
9428	.ed6e	ae 41 02	ldx $0241	                ldx inputSource
9429	.ed71	68		pla		                pla
9430	.ed72	8d 41 02	sta $0241	                sta inputSource
9431	.ed75					LECD9:
9432	.ed75	60		rts		                rts

9435						;-------------------------------------------------------------------------
9436						;
9437						; OSBYTE 13 (&0D) Disable event
9438						;
9439						; All events are assigned a unique number and this call provides a
9440						; means of disabling specific events.
9441						;
9442						; Entry parameters:
9443						; X = event number
9444						;
9445						; On exit: X = Y = <old enable state> (0=disabled)
9446	.ed76					osbyte0D:
9447	.ed76	98		tya		                tya             ;A=0

9449						;-------------------------------------------------------------------------
9450						;
9451						; OSBYTE 14 (&0E) Enable event
9452						;
9453						; This call provides a means of enabling specific events.
9454						;
9455						;
9456	.ed77					osbyte0E:
9457	.ed77	e0 0a		cpx #$0a	                cpx #eventMax+1
9459	.ed79	b0 b1		bcs $ed2c	                bcs LEC90
9463	.ed7b	bc bf 02	ldy $02bf,x	                ldy eventEnabledFlags,x
9464	.ed7e	9d bf 02	sta $02bf,x	                sta eventEnabledFlags,x
9466	.ed81	80 a8		bra $ed2b	                bra LEC8F

9477						;-------------------------------------------------------------------------
9478						;
9479						; OSBYTE 16 (&10) Write number of ADC channels
9480						;
9481						; By default, each of the four ADC channels is sampled and converted
9482						; in turn so that each reading is updated every 40 milliseconds. This
9483						; call enables the number of channels to be changed so that if, for
9484						; example, only two channels are required, each will be updated every
9485						; 20 milliseconds.
9486						;
9488	.ed83					osbyte10:
9494	.ed83	ad 4d 02	lda $024d	                lda maximumADCChannel
9495	.ed86	8e 4d 02	stx $024d	                stx maximumADCChannel
9496	.ed89	aa		tax		                tax
9497	.ed8a	60		rts		                rts

9500						;-------------------------------------------------------------------------
9501						;
9502						; OSBYTE 129 (&81) Read key with time limit
9503						;
9504						; This call may be used to read a key from the keyboard subject to a
9505						; specified time limit or to perform a keyboard scan for a specified
9506						; key depression.

9508	.ed8b					osbyte81:
9509	.ed8b	98		tya		                tya
9510	.ed8c	30 0a		bmi $ed98	                bmi LED01          ;taken if scanning for specific key
9511	.ed8e	20 e1 e8	jsr $e8e1	                jsr osbyte81Timed
9512	.ed91	b0 03		bcs $ed96	                bcs LECFF                 ;taken if timed out or error
9513	.ed93	aa		tax		                tax                       ;X = ASCII char
9514	.ed94					LECFD:
9515	.ed94	a9 00		lda #$00	                lda #$00
9516	.ed96					LECFF:
9517	.ed96	a8		tay		                tay
9518	.ed97	60		rts		                rts

9520	.ed98					LED01:
9521	.ed98	8a		txa		                txa
9522	.ed99	f0 10		beq $edab	                beq LED14
9523	.ed9b	49 7f		eor #$7f	                eor #$7F
9524	.ed9d	aa		tax		                tax
9525	.ed9e	20 9e f7	jsr $f79e	                jsr callKEYV
9526	.eda1	2a		rol a		                rol a
9527						                ; fall through

9529						;-------------------------------------------------------------------------

9531	.eda2					osbyte82:
9532	.eda2	a2 ff		ldx #$ff	                ldx #$FF
9533	.eda4	a0 ff		ldy #$ff	                ldy #$FF
9534	.eda6	b0 02		bcs $edaa	                bcs LEB13                    ;if OSBYTE $82, done
9535	.eda8	e8		inx		                inx
9536	.eda9	c8		iny		                iny
9537	.edaa					LEB13:
9538	.edaa	60		rts		                rts

9540	.edab					LED14:
9548	.edab	a2 f4		ldx #$f4	                ldx #$f4
9552	.edad	80 e5		bra $ed94	                bra LECFD

9554	.edaf					LED18:
9558	.edaf	8a		txa		                txa
9559	.edb0	49 ff		eor #$ff	                eor #$FF
9560	.edb2	aa		tax		                tax
9561	.edb3	e0 02		cpx #$02	                cpx #$02
9562						                ; fall through

9564						;-------------------------------------------------------------------------

9566	.edb5					countBufferViaCNPV:
9567	.edb5	b8		clv		                clv
9568	.edb6	80 03		bra $edbb	                bra callCNPV

9570	.edb8					purgeBufferViaCNPV:
9571	.edb8	2c 70 e3	bit $e370	                bit valueFF                  ;V=1
9572	.edbb					callCNPV:
9573	.edbb	6c 2e 02	jmp ($022e)	                jmp (CNPV)

9575						;-------------------------------------------------------------------------

9578	.edbe					getRS423InputBufferFreeBytes:
9579	.edbe	38		sec		                sec
9580	.edbf	a2 01		ldx #$01	                ldx #bufferRS423Input
9581	.edc1	20 b5 ed	jsr $edb5	                jsr countBufferViaCNPV
9582	.edc4	c0 01		cpy #$01	                cpy #$01                     ;check MSB
9583	.edc6	b0 03		bcs $edcb	                bcs +                        ;if >= 256 bytes, all good
9584	.edc8	ec 5b 02	cpx $025b	                cpx rs423InputBufferMinimumSpace ;compare to min space
9585	.edcb					+
9586	.edcb	60		rts		                rts

9589						;-------------------------------------------------------------------------

9592	.edcc					osbyte80:
9593	.edcc	30 e1		bmi $edaf	                bmi LED18
9594	.edce	f0 0e		beq $edde	                beq LED45
9602	.edd0	e8		inx		                inx
9603	.edd1	8a		txa		                txa
9604	.edd2	29 01		and #$01	                and #1
9605	.edd4	0a		asl a		                asl a
9606	.edd5	aa		tax		                tax
9607	.edd6	bc b8 02	ldy $02b8,x	                ldy adcResultLSBs+3-1,x
9608	.edd9	bd b7 02	lda $02b7,x	                lda adcResultLSBs+2-1,x
9609	.eddc	aa		tax		                tax
9611	.eddd	60		rts		                rts

9614						;-------------------------------------------------------------------------

9617	.edde					LED45:
9631	.edde	ac 4c 02	ldy $024c	                ldy currentADCChannel
9632	.ede1	ae b6 02	ldx $02b6	                ldx adcResultLSBs
9634	.ede4	60		rts		                rts

9637						;-------------------------------------------------------------------------
9638						;
9639						; OSBYTE $70
9640						;
9641						; D.2-31
9642						;
9643	.ede5					osbyte70:                       ;ed58
9644	.ede5	20 fd ed	jsr $edfd	                jsr osbyte7071
9645	.ede8	0a		asl a		                asl a
9646	.ede9	f0 04		beq $edef	                beq clearACCCCONE
9647	.edeb					LED5E:
9648	.edeb	0c 34 fe	tsb $fe34	                tsb ACCCON
9649	.edee	60		rts		                rts

9651	.edef					clearACCCCONE:
9652	.edef	a9 02		lda #$02	                lda #ACCCON.E
9653	.edf1					LED64:
9654	.edf1	1c 34 fe	trb $fe34	                trb ACCCON
9655	.edf4	60		rts		                rts

9657						;-------------------------------------------------------------------------

9659	.edf5					osbyte71:                       ;ed68
9660	.edf5	20 fd ed	jsr $edfd	                jsr osbyte7071
9661	.edf8	d0 f1		bne $edeb	                bne LED5E
9662	.edfa	1a		inc a		                inc a
9663	.edfb	80 f4		bra $edf1	                bra LED64

9665						;-------------------------------------------------------------------------
9666						;
9667						; Handle OSBYTE $70 or OSBYTE $71
9668						;
9669						; Entry: A=$70 or $71
9670						;
9671	.edfd					osbyte7071:
9672	.edfd	a8		tay		                tay
9673	.edfe	8a		txa		                txa
9675	.edff	99 1a 02	sta $021a,y	                sta vduDriverMemory-$70,y
9676	.ee02	d0 09		bne $ee0d	                bne LED80
9677	.ee04	a5 d0		lda $d0		                lda STATE
9678	.ee06	29 10		and #$10	                and #STATE.isShadowMode
9679	.ee08	f0 06		beq $ee10	                beq LED83
9680	.ee0a					LED7D:
9681	.ee0a	a9 01		lda #$01	                lda #$01
9682	.ee0c	60		rts		                rts

9684	.ee0d					LED80:
9685	.ee0d	3a		dec a		                dec a
9686	.ee0e	d0 fa		bne $ee0a	                bne LED7D
9687	.ee10					LED83:
9688	.ee10	60		rts		                rts

9690						;-------------------------------------------------------------------------

9692						; OSBYTE &6E (110), &6F (111)
9693						; ===========================
9694						; Pass to sideways ROMs
9695	.ee11					osbyteUnused:                   ;ed84
9696	.ee11	a2 07		ldx #$07	                ldx #romServiceCallUnrecognisedOSBYTE
9697	.ee13	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
9698	.ee16	a6 f0		ldx $f0		                ldx originalX
9700	.ee18	49 00		eor #$00	                eor #$00
9702	.ee1a	60		rts		                rts

9704						;-------------------------------------------------------------------------

9707	.ee1b					osbyteA1:
9708	.ee1b	20 61 f4	jsr $f461	                jsr withTerminalROM
9709	.ee1e	4c 1a 9e	jmp $9e1a	                jmp readCMOSByte

9712						;-------------------------------------------------------------------------

9715	.ee21					osbyteA2:
9716	.ee21	20 61 f4	jsr $f461	                jsr withTerminalROM
9717	.ee24	4c 69 9e	jmp $9e69	                jmp writeCMOSByte

9720						;-------------------------------------------------------------------------
9721						;
9722						; OSBYTE 140 (&8C) Select Cassette Filing System [MasRef D.2-43]
9723						; OSBYTE 141 (&8D) Select ROM Filing System [MasRef D.2-43]
9724						;
9725	.ee27					osbyte8C8D:
9726	.ee27	20 4d ee	jsr $ee4d	                jsr selectROMOrTAPEByOSBYTE
9727	.ee2a	ad 34 fe	lda $fe34	                lda ACCCON                    ; Save ACCON register
9728	.ee2d	48		pha		                pha
9729	.ee2e	20 47 ee	jsr $ee47	                jsr selectHAZEL         ; Page Hazel workspace in
9730	.ee31	ae 01 df	ldx $df01	                ldx hazel.activeFS
9731	.ee34	8e 00 df	stx $df00	                stx hazel.currentFS
9732	.ee37	a9 0f		lda #$0f	                lda #terminalROM
9733	.ee39	8d 03 df	sta $df03	                sta hazel.currentFSROM
9734	.ee3c	68		pla		                pla                          ; Restore ACCON
9735	.ee3d					selectMOSOrHAZEL:                                       ;edb0
9736	.ee3d	29 08		and #$08	                and #ACCCON.Y   ;get just the HAZEL/MOS bit
9737	.ee3f	d0 08		bne $ee49	                bne setACCCONBits      ;branch taken if HAZEL at $c000
9738	.ee41					selectMOS:
9739	.ee41	a9 08		lda #$08	                lda #ACCCON.Y
9740	.ee43	1c 34 fe	trb $fe34	                trb ACCCON      ;page in MOS at $c000
9741	.ee46	60		rts		                rts

9743	.ee47					selectHAZEL:
9744	.ee47	a9 08		lda #$08	                lda #ACCCON.Y
9745	.ee49					setACCCONBits:
9746	.ee49	0c 34 fe	tsb $fe34	                tsb ACCCON      ;page in HAZEL at $c000
9747	.ee4c	60		rts		                rts

9749						;-------------------------------------------------------------------------

9757						;-------------------------------------------------------------------------
9758						;
9759						; Select ROM or TAPE.
9760						;
9761						; Two entry points: selectROMOrTAPEByOSBYTE picks FS by OSBYTE number
9762						; ($8c=TAPE, $8d=ROM), and selectROMOrTAPE picks FS by number (0=TAPE,
9763						; 1=ROM).
9764						;
9765						; entry:
9766						;
9767						; A = FS to select
9768						;
9769	.ee4d					selectROMOrTAPEByOSBYTE:

9783	.ee4d	49 8c		eor #$8c	                eor #$8C                     ;A=0 if tape, A=1 if ROM
9784	.ee4f					selectROMOrTAPE:
9785	.ee4f	0a		asl a		                asl a           ; Set CFS/RFS switch to 0=CFS or 2=RFS
9786	.ee50	8d 47 02	sta $0247	                sta cfsRFSFSSwitch
9787	.ee53	d0 04		bne $ee59	                bne LEDCC                    ;taken if ROM
9788	.ee55	a9 04		lda #$04	                lda #$04                     ; CFS, clear b2 of status
9789	.ee57	14 e2		trb $e2		                trb $E2
9790	.ee59					LEDCC:
9791	.ee59	e0 03		cpx #$03	                cpx #$03                     ; EQ=TAPE 300, NE=TAPE 1200
9792	.ee5b	80 06		bra $ee63	                bra LEDD6

9794	.ee5d					LEDD0:
9798	.ee5d	20 f1 ee	jsr $eef1	                jsr LEE64
9799	.ee60	20 a4 f2	jsr $f2a4	                jsr LF1EE
9800	.ee63					LEDD6:
9801	.ee63	08		php		                php                          ; Save baud flag in Carry
9802	.ee64	a9 06		lda #$06	                lda #$06                     ; Vectors about to change
9803	.ee66	20 9b f2	jsr $f29b	                jsr callFSCV
9804	.ee69	ad 47 02	lda $0247	                lda cfsRFSFSSwitch           ; Jump if RFS selected
9805	.ee6c	d0 0d		bne $ee7b	                bne LEDEE
9806	.ee6e	a2 06		ldx #$06	                ldx #$06                     ; Prepare baud=6 for TAPE300
9807	.ee70	28		plp		                plp                          ; Skip past if TAPE300
9808	.ee71	f0 05		beq $ee78	                beq LEDEB
9809	.ee73	a9 04		lda #$04	                lda #$04                     ; TAPE1200, set bit 2 of status
9810	.ee75	04 e2		tsb $e2		                tsb $E2
9811	.ee77	ca		dex		                dex                          ; Change to baud=5 for TAPE1200
9812	.ee78					LEDEB:
9813	.ee78	86 c6		stx $c6		                stx $C6                      ; Store baud rate setting
9814	.ee7a	08		php		                php
9815	.ee7b					LEDEE:
9816	.ee7b	64 ce		stz $ce		                stz $CE                      ; Clear byte (unused on BBC)
9817	.ee7d	28		plp		                plp

9820	.ee7e	a2 0e		ldx #$0e	                ldx #defaultVectorTable.fsVectors.end-defaultVectorTable.fsVectors ; Prepare to set 7 vectors
9821	.ee80					LEDF3:
9822	.ee80	bd 0a e3	lda $e30a,x	                lda defaultVectorTable.fsVectors-1,x ; Set filing
9823						                                                     ; system vectors
9824						                                                     ; to point to
9825						                                                     ; extended
9826						                                                     ; vectors
9827	.ee83	9d 11 02	sta $0211,x	                sta FILEV-1,x
9828	.ee86	ca		dex		                dex
9829	.ee87	d0 f7		bne $ee80	                bne LEDF3
9830	.ee89	20 a4 f2	jsr $f2a4	                jsr LF1EE                    ; Set extended vectors
9831	.ee8c	64 c2		stz $c2		                stz $C2                      ; Set Progress=idle
9832	.ee8e	a2 0f		ldx #$0f	                ldx #romServiceCallVectorsClaimed ; Send service call &0F - vectors changed

9834						;-------------------------------------------------------------------------
9835						;
9836						; OSBYTE 143 (&8F) Issue paged ROM service request [MasRef D.2-44]
9837						;
9838	.ee90					osbyte8F: .proc                    ;ee03
9839	.ee90	5a		phy		                phy
9840	.ee91	da		phx		                phx                          ; Send service call
9841	.ee92	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
9842	.ee95	fa		plx		                plx
9843	.ee96	e0 0f		cpx #$0f	                cpx #romServiceCallVectorsClaimed ; If VectorsClaimed,
9844						                                                  ; hook FileSwitch
9845						                                                  ; back in
9846	.ee98	f0 36		beq $eed0	                beq handleVectorsClaimed
9847	.ee9a	1a		inc a		                inc a       ; If claimed, check for
9848						                            ; InitialiseFilingSystem or
9849						                            ; UnrecognisedCommand
9850	.ee9b	3a		dec a		                dec a       ;Z=1 if claimed
9851	.ee9c	f0 03		beq $eea1	                beq wasClaimed  ;branch taken if claimed
9852	.ee9e					done:
9853	.ee9e	fa		plx		                plx             ; Return with result in X, EQ=Claimed
9854	.ee9f	aa		tax		                tax
9855	.eea0	60		rts		                rts

9857	.eea1					wasClaimed:
9858	.eea1	e0 12		cpx #$12	                cpx #romServiceCallInitialiseFilingSystem
9859	.eea3	f0 04		beq $eea9	                beq +
9860	.eea5	e0 04		cpx #$04	                cpx #romServiceCallUnrecognisedCommand
9861	.eea7	d0 f5		bne $ee9e	                bne done
9862	.eea9					+

9864						; handle InitialiseFilingSystem ($12) or UnrecognisedCommand ($04)

9866	.eea9	7a		ply		                ply                     ;Y=service call arg
9867	.eeaa	48		pha		                pha                     ;save A (though actually it's
9868						                                        ;always $00...)
9869	.eeab	ad 34 fe	lda $fe34	                lda ACCCON
9870	.eeae	48		pha		                pha                     ;save ACCCON
9871	.eeaf	20 47 ee	jsr $ee47	                jsr selectHAZEL
9872	.eeb2	38		sec		                sec
9873	.eeb3	6e 00 df	ror $df00	                ror hazel.currentFS ;set currentFS bit 7
9874	.eeb6					LEE29:
9875	.eeb6	5a		phy		                phy             ;save ROM service call argument
9876	.eeb7	a9 00		lda #$00	                lda #$00
9877	.eeb9	a8		tay		                tay
9878	.eeba	20 8b f9	jsr $f98b	                jsr callARGSV   ;A=0, Y=0 - get active FS number
9879	.eebd	8d 01 df	sta $df01	                sta hazel.activeFS ;save active FS number
9880	.eec0	2c 00 df	bit $df00	                bit hazel.currentFS
9881	.eec3	10 03		bpl $eec8	                bpl LEE3B
9882	.eec5	20 c5 f2	jsr $f2c5	                jsr osbyte6D
9883	.eec8					LEE3B:
9884	.eec8	7a		ply		                ply
9885	.eec9	68		pla		                pla
9886	.eeca	20 3d ee	jsr $ee3d	                jsr selectMOSOrHAZEL
9887	.eecd	68		pla		                pla
9888	.eece	aa		tax		                tax
9889	.eecf	60		rts		                rts

9891	.eed0					handleVectorsClaimed:
9892	.eed0	7a		ply		                ply
9893	.eed1	48		pha		                pha
9894	.eed2	ad 34 fe	lda $fe34	                lda ACCCON
9895	.eed5	48		pha		                pha
9896	.eed6	20 47 ee	jsr $ee47	                jsr selectHAZEL
9897	.eed9	ad 1e 02	lda $021e	                lda FSCV+0
9898	.eedc	8d da df	sta $dfda	                sta hazel.activeFSCV+0
9899	.eedf	ad 1f 02	lda $021f	                lda FSCV+1
9900	.eee2	8d db df	sta $dfdb	                sta hazel.activeFSCV+1
9901	.eee5	a9 dc		lda #$dc	                lda #<fileswitchFSCEntryPoint
9902	.eee7	8d 1e 02	sta $021e	                sta FSCV+0
9903	.eeea	a9 fa		lda #$fa	                lda #>fileswitchFSCEntryPoint
9904	.eeec	8d 1f 02	sta $021f	                sta FSCV+1
9905	.eeef	80 c5		bra $eeb6	                bra LEE29
9906						                .pend

9908						;-------------------------------------------------------------------------

9910	.eef1					LEE64:
9911	.eef1	a9 a1		lda #$a1	                lda #$A1
9912	.eef3	85 e3		sta $e3		                sta $E3
9913	.eef5	a9 19		lda #$19	                lda #$19
9914	.eef7	8d d1 03	sta $03d1	                sta $03D1
9915	.eefa	a9 04		lda #$04	                lda #$04
9916	.eefc	04 e2		tsb $e2		                tsb $E2
9917	.eefe	60		rts		                rts

9919						;-------------------------------------------------------------------------
9920						;
9921						; Pass service call around sideways ROMs
9922						;
9923						; Entry:
9924						; X=service call number
9925						; Y=any parameters
9926						;
9927						; Exit:
9928						; X=0 or preserved
9929						; Y=any returned parameters
9930						; EQ=call claimed if called directly
9931						;
9932	.eeff					makeROMServiceCall: .proc                    ;ee72
9933	.eeff	a5 f4		lda $f4		                lda $F4         ; Save current ROM
9934	.ef01	48		pha		                pha
9935	.ef02	ad 34 fe	lda $fe34	                lda ACCCON      ; Save current paging state
9936	.ef05	48		pha		                pha
9937	.ef06	20 47 ee	jsr $ee47	                jsr selectHAZEL ; Page in Hazel
9938	.ef09	8a		txa		                txa             ; Pass service call number to A
9939	.ef0a	a2 0f		ldx #$0f	                ldx #$0F     ; Start at ROM 15, and always call ROM 15
9940	.ef0c	80 05		bra $ef13	                bra callServiceEntry
9941	.ef0e					callServiceEntriesLoop:
9942	.ef0e	3c a1 02	bit $02a1,x	                bit romInformationTable,x ;check if ROM X has a service entry
9943	.ef11	10 0b		bpl $ef1e	                bpl nextROM       ;branch taken if no service entry
9944	.ef13					callServiceEntry:
9945	.ef13	20 9a e5	jsr $e59a	                jsr selectROMX  ; Page in ROM X
9946	.ef16	20 03 80	jsr $8003	                jsr $8003       ; Call ROM service entry point
9947	.ef19	aa		tax		                tax             ; X = service call result
9948	.ef1a	f0 05		beq $ef21	                beq done       ;branch taken if service call claimed
9949	.ef1c	a6 f4		ldx $f4		                ldx $F4         ; Get ROM number
9950	.ef1e					nextROM:
9951	.ef1e	ca		dex		                dex       ; Step down to next ROM, loop until all done
9952	.ef1f	10 ed		bpl $ef0e	                bpl callServiceEntriesLoop

9954	.ef21					done:
9955	.ef21	68		pla		                pla                          ; Restore paging state
9956	.ef22	20 3d ee	jsr $ee3d	                jsr selectMOSOrHAZEL
9957	.ef25	68		pla		                pla                          ; Restore current ROM
9958	.ef26	20 ab e5	jsr $e5ab	                jsr selectROMA
9959	.ef29	8a		txa		                txa                          ; Pass claim/noclaim to A
9960	.ef2a	60		rts		                rts
9961						                .pend

9963						;-------------------------------------------------------------------------

9965						; OSBYTE &6B (107) - Select memory for direct access
9966						; ==============================================
9967	.ef2b					osbyte6B:                       ;ee9e
9968	.ef2b	a0 20		ldy #$20	                ldy #$20                     ; Y=&20 to change 1MHz bit
9969	.ef2d	80 02		bra $ef31	                bra LEEA4

9971						;-------------------------------------------------------------------------

9973						; OSBYTE &6C (108) - Select memory for direct access
9974						; ==============================================
9975	.ef2f					osbyte6C:
9976	.ef2f	a0 04		ldy #$04	                ldy #ACCCON.X                ; Y=&04 to change RAM bit
9977	.ef31					LEEA4:
9978	.ef31	98		tya		                tya                          ; Clear RAM or 1MHz bit
9979	.ef32	1c 34 fe	trb $fe34	                trb ACCCON
9980	.ef35	8a		txa		                txa                          ; If X=0, exit with normal RAM/1MHz selected
9981	.ef36	f0 05		beq $ef3d	                beq LEEB0
9985	.ef38	a9 04		lda #$04	                lda #ACCCON.X                ; BUG! This should be TYA
9987	.ef3a	0c 34 fe	tsb $fe34	                tsb ACCCON                   ; Page in shadow RAM
9988	.ef3d					LEEB0:
9989	.ef3d	60		rts		                rts                          ; X preserved, Y=&04 or &20

9991						;-------------------------------------------------------------------------

9993						osword06Macro: .macro
10000						                .endmacro

10002						LEF1BMacro: .macro
10014						                .endmacro

10016						;-------------------------------------------------------------------------

10019	.ef3e					osword06:
9994	.ef3e	20 12 f0	jsr $f012	                jsr getAddressFromOSWORDParameterBlock
9995	.ef41	b1 f0		lda ($f0),y	                lda (originalX),y
9996	.ef43	92 fa		sta ($fa)	                sta (SEIWKA)
9997	.ef45					ret:
9998	.ef45	a9 00		lda #$00	                lda #$00
9999	.ef47	60		rts		                rts
10020	.ef48					LEF1B:
10003	.ef48	a5 eb		lda $eb		                lda $EB
10004	.ef4a	30 f9		bmi $ef45	                bmi osword06.ret
10005	.ef4c	ad 57 02	lda $0257	                lda spoolFileHandle
10006	.ef4f	d0 f4		bne $ef45	                bne osword06.ret
10007	.ef51	a9 08		lda #$08	                lda #$08
10008	.ef53	25 e2		and $e2		                and $E2
10009	.ef55	d0 04		bne $ef5b	                bne LEF2E
10010	.ef57	a9 88		lda #$88	                lda #$88
10011	.ef59	25 bb		and $bb		                and $BB
10012	.ef5b					LEF2E:
10013	.ef5b	60		rts		                rts

10023						;-------------------------------------------------------------------------

10026	.ef5c					oswordEntryPoint:
10027	.ef5c	48		pha		                pha
10028	.ef5d	08		php		                php
10029	.ef5e	78		sei		                sei
10030	.ef5f	85 ef		sta $ef		                sta originalA
10031	.ef61	86 f0		stx $f0		                stx originalX
10032	.ef63	84 f1		sty $f1		                sty originalY
10033	.ef65	a2 08		ldx #$08	                ldx #romServiceCallUnrecognisedOSWORD
10034	.ef67	c9 e0		cmp #$e0	                cmp #$e0
10035	.ef69	b0 3f		bcs $efaa	                bcs osbyteOrUSERV
10036	.ef6b	c9 10		cmp #$10	                cmp #$10
10037	.ef6d	90 0e		bcc $ef7d	                bcc osword00To0F
10038	.ef6f	c9 44		cmp #$44	                cmp #$44
10039	.ef71	b0 05		bcs $ef78	                bcs osword44ToFF
10040	.ef73	c9 42		cmp #$42	                cmp #$42
10041	.ef75	b0 04		bcs $ef7b	                bcs osword42To43
10042	.ef77	38		sec		                sec
10043	.ef78					osword44ToFF:
10044	.ef78	4c 01 f0	jmp $f001	                jmp handleUnrecognisedOSBYTEOrOSWORD

10046	.ef7b					osword42To43:
10048	.ef7b	e9 33		sbc #$33	                sbc #$42-((osword42AndAboveRoutineTable-oswordRoutineTable)/2-1)

10050	.ef7d					osword00To0F:
10052	.ef7d	69 59		adc #$59	                adc #(oswordRoutineTable-osbyteAndOSWORDRoutineTable)/2
10053	.ef7f	0a		asl a		                asl a
10054	.ef80	80 32		bra $efb4	                bra callOSBYTEOrOSWORDFromTable

10057						;-------------------------------------------------------------------------

10060	.ef82					selectTerminalROMAndOSWORD0E:
10061	.ef82	c9 03		cmp #$03	                cmp #3
10062	.ef84	b0 77		bcs $effd	                bcs handleUnrecognisedOSWORD
10063	.ef86	20 61 f4	jsr $f461	                jsr withTerminalROM
10064	.ef89	4c e8 98	jmp $98e8	                jmp osword0E

10067						;-------------------------------------------------------------------------

10070	.ef8c					LEF85:
10071	.ef8c	28		plp		                plp
10072	.ef8d	68		pla		                pla
10073	.ef8e	2c 70 e3	bit $e370	                bit valueFF
10074	.ef91	60		rts		                rts

10077						;-------------------------------------------------------------------------

10080						; OSBYTE
10081						; ======
10082	.ef92					osbyteEntryPoint:
10083	.ef92	48		pha		                pha
10084	.ef93	08		php		                php
10085	.ef94	78		sei		                sei
10086	.ef95	85 ef		sta $ef		                sta originalA
10087	.ef97	86 f0		stx $f0		                stx originalX
10088	.ef99	84 f1		sty $f1		                sty originalY
10089	.ef9b	a2 07		ldx #$07	                ldx #romServiceCallUnrecognisedOSBYTE
10090	.ef9d	c9 6b		cmp #$6b	                cmp #$6B
10091	.ef9f	90 4c		bcc $efed	                bcc osbyte00To6A
10092	.efa1	c9 a6		cmp #$a6	                cmp #$A6
10093	.efa3	90 09		bcc $efae	                bcc osbyte6BToA5
10094	.efa5	c9 a6		cmp #$a6	                cmp #$A6
10095	.efa7	90 58		bcc $f001	                bcc handleUnrecognisedOSBYTEOrOSWORD       ;??? - wait... didn't we just do this?

10097	.efa9					osbyteA6ToFF:
10098	.efa9	18		clc		                clc
10099	.efaa					osbyteOrUSERV:      ;call OSBYTE A6+ routine if C=0; call USERV if C=1
10100	.efaa	a9 a6		lda #$a6	                lda #$A6
10101	.efac	69 00		adc #$00	                adc #$00
10106	.efae					osbyte6BToA5:
10107						                ; map $6b-$a5 to $46-$80
10108	.efae	e9 24		sbc #$24	                sbc #$24
10109	.efb0					osbyte44To45:
10110						                ; map $44-$80 $1a-$56
10111	.efb0	e9 2a		sbc #$2a	                sbc #$2A
10113	.efb2					osbyteUseTable:
10114	.efb2	0a		asl a		                asl a           ;table is of words
10115	.efb3	38		sec		                sec
10116	.efb4					callOSBYTEOrOSWORDFromTable:
10117	.efb4	84 f1		sty $f1		                sty originalY
10118	.efb6	a8		tay		                tay             ;get table offset in Y
10119	.efb7	2c 5e 02	bit $025e	                bit econetInterceptionStatus
10120	.efba	10 07		bpl $efc3	                bpl LEEE0             ;taken if no Econet interception
10121	.efbc	8a		txa		                txa
10124	.efbd	b8		clv		                clv
10125	.efbe	20 65 ec	jsr $ec65	                jsr callNETV
10126	.efc1	70 24		bvs $efe7	                bvs LEEFA
10127	.efc3					LEEE0:
10129	.efc3	a5 f4		lda $f4		                lda $f4
10130	.efc5	48		pha		                pha
10131	.efc6	20 a9 e5	jsr $e5a9	                jsr selectTerminalROM
10142	.efc9	b9 e6 8f	lda $8fe6,y	                lda osbyteAndOSWORDRoutineTable+1,y
10143	.efcc	85 fb		sta $fb		                sta SEIWKB
10144	.efce	b9 e5 8f	lda $8fe5,y	                lda osbyteAndOSWORDRoutineTable,y
10145	.efd1	85 fa		sta $fa		                sta SEIWKA
10148	.efd3	fa		plx		                plx
10149	.efd4	20 9a e5	jsr $e59a	                jsr selectROMX
10155	.efd7	a5 ef		lda $ef		                lda originalA
10156	.efd9	a4 f1		ldy $f1		                ldy originalY
10157	.efdb	b0 04		bcs $efe1	                bcs +
10158	.efdd	a0 00		ldy #$00	                ldy #$00            ;??? - is this actually desirable?
10159	.efdf	b2 f0		lda ($f0)	                lda ($F0)           ;fetch 0th byte of parameter block
10160	.efe1					+
10161	.efe1	38		sec		                sec
10165	.efe2	a6 f0		ldx $f0		                ldx originalX

10167						; on entry to the OSBYTE handlers, C=1, N/Z set as per X.

10169	.efe4	20 7b f7	jsr $f77b	                jsr callSEIWKA
10171	.efe7					LEEFA:
10172	.efe7	6a		ror a		                ror a
10173	.efe8	28		plp		                plp
10174	.efe9	2a		rol a		                rol a
10175	.efea	68		pla		                pla
10176	.efeb	b8		clv		                clv
10177	.efec	60		rts		                rts

10179	.efed					osbyte00To6A:
10180	.efed	a0 00		ldy #$00	                ldy #$00        ;Y=0 on entry for this lot
10181	.efef	c9 1a		cmp #$1a	                cmp #$1A        ;OSBYTE <=$19 is table-driven
10182	.eff1	90 bf		bcc $efb2	                bcc osbyteUseTable ;taken if OSBYTE $00-$19
10184	.eff3	c9 44		cmp #$44	                cmp #$44
10185	.eff5	f0 b9		beq $efb0	                beq osbyte44To45
10186	.eff7	c9 45		cmp #$45	                cmp #$45
10187	.eff9	f0 b5		beq $efb0	                beq osbyte44To45
10189	.effb	80 04		bra $f001	                bra handleUnrecognisedOSBYTEOrOSWORD

10191	.effd					handleUnrecognisedOSWORD:
10192	.effd	a2 08		ldx #$08	                ldx #romServiceCallUnrecognisedOSWORD
10193	.efff	68		pla		                pla
10194	.f000	68		pla		                pla
10195	.f001					handleUnrecognisedOSBYTEOrOSWORD:
10196	.f001	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
10200	.f004	d0 86		bne $ef8c	                bne LEF85
10202	.f006	a6 f0		ldx $f0		                ldx originalX
10203	.f008	80 dd		bra $efe7	                bra LEEFA

10212						;-------------------------------------------------------------------------

10218						;-------------------------------------------------------------------------
10219						;
10220						; OSWORD 14 (&0E) Read CMOS clock [MasRef D.3-22]
10221						;

10230						;-------------------------------------------------------------------------
10231						;
10232						; Entry point for OSWORD.
10233						;
10234						; D.3-3
10235						;

10282						;-------------------------------------------------------------------------
10283						;
10284						; OSWORD 5 (&05) Read byte from I/O processor memory [MasRef D.3-9]
10285						;
10286	.f00a					osword05:
10287	.f00a	20 12 f0	jsr $f012	                jsr getAddressFromOSWORDParameterBlock
10288	.f00d	b2 fa		lda ($fa)	                lda (SEIWKA)                 ;read byte from the address
10289	.f00f	91 f0		sta ($f0),y	                sta (originalX),y                  ;update parameter block
10290	.f011	60		rts		                rts

10292						;-------------------------------------------------------------------------
10293						;
10294						; OSWORD 6 (&06) Write byte to I/O processor memory [MasRef D.3-9]
10295						;

10301						;-------------------------------------------------------------------------
10302						;
10303						; Get address from OSWORD parameter block.
10304						;
10305						; entry:
10306						;
10307						; A = 0th byte of parameter block
10308						;
10309						; Y = 0
10310						;
10311						; (originalX) = parameter block
10312						;
10313						; exit:
10314						;
10315						; (SEIWKA) = address, first two bytes from parameter block
10316						;
10317						; Y = 4 (this is just convenient for both callers)
10318						;
10319	.f012					getAddressFromOSWORDParameterBlock:
10320	.f012	85 fa		sta $fa		                sta SEIWKA
10321	.f014	c8		iny		                iny
10322	.f015	b1 f0		lda ($f0),y	                lda (originalX),y
10323	.f017	85 fb		sta $fb		                sta SEIWKA+1
10324	.f019	a0 04		ldy #$04	                ldy #$04
10325	.f01b					ldxim03_rts:
10331	.f01b	a2 05		ldx #$05	                ldx #$05
10333	.f01d	60		rts		                rts

10335						;-------------------------------------------------------------------------
10336						;
10337						; OSBYTE 0 (&00) Display MOS version
10338						;
10339						; OSBYTE 0 has the effect of performing a BRK instruction and
10340						; displaying the MOS version number.
10341						;
10342						; Entry parameters :
10343						;
10344						; X=0 executes a BRK and displays the OS version
10345						;
10346						; X=1 executes an RTS and returns the Operating system version
10347						;
10348						; On exit : X=<OS version>
10349						;
10350						; D.2-18
10351						;
10352	.f01e					osbyte00:                       ;ef6f
10353	.f01e	d0 fb		bne $f01b	                bne ldxim03_rts ;branch taken if X<>0 - return with
10354						                                 ;X=3

10356						; do a BRK and print MOS version number.

10358	.f020	00		brk #		                brk
10359	>f021	f7 4d 4f 53 20 35 2e 31		                .text $f7,versionString,0
	>f029	30 69 00

10361						;-------------------------------------------------------------------------
10362						;
10363						; OSWORD 7 (&07) Generate a sound [MasRef D.3-10]
10364						;
10365	.f02c					osword07:
10366	.f02c	c8		iny		                iny
10367	.f02d	b1 f0		lda ($f0),y	                lda ($F0),y
10368	.f02f	c9 20		cmp #$20	                cmp #$20
10369	.f031	b0 ca		bcs $effd	                bcs handleUnrecognisedOSWORD
10370	.f033	88		dey		                dey
10371	.f034	20 a7 f0	jsr $f0a7	                jsr LEFF6
10372	.f037	09 04		ora #$04	                ora #$04
10373	.f039	aa		tax		                tax
10374	.f03a	90 05		bcc $f041	                bcc LEF90
10375	.f03c	20 85 ea	jsr $ea85	                jsr LE95A
10376	.f03f	a0 01		ldy #$01	                ldy #$01
10377	.f041					LEF90:
10378	.f041	20 a7 f0	jsr $f0a7	                jsr LEFF6
10379	.f044	85 fa		sta $fa		                sta $FA
10380	.f046	08		php		                php
10381	.f047	a0 06		ldy #$06	                ldy #$06
10382	.f049	b1 f0		lda ($f0),y	                lda ($F0),y
10383	.f04b	48		pha		                pha
10384	.f04c	a0 04		ldy #$04	                ldy #$04
10385	.f04e	b1 f0		lda ($f0),y	                lda ($F0),y
10386	.f050	48		pha		                pha
10387	.f051	a0 02		ldy #$02	                ldy #$02
10388	.f053	b1 f0		lda ($f0),y	                lda ($F0),y
10389	.f055	2a		rol a		                rol a
10390	.f056	3a		dec a		                dec a
10391	.f057	3a		dec a		                dec a
10392	.f058	0a		asl a		                asl a
10393	.f059	0a		asl a		                asl a
10394	.f05a	05 fa		ora $fa		                ora $FA
10395	.f05c	20 ce ea	jsr $eace	                jsr LE9A3
10396	.f05f	90 1e		bcc $f07f	                bcc LEFCE
10397	.f061	68		pla		                pla
10398	.f062	68		pla		                pla
10399	.f063	28		plp		                plp

10401						                ; WTF... fall through to OSBYTE $75!

10403						;-------------------------------------------------------------------------
10404						;
10405						; OSBYTE 117 (&75) Read VDU status [MasRef D.2-32]
10406						;
10407	.f064					osbyte75:
10408	.f064	a6 d0		ldx $d0		                ldx STATE
10409	.f066	60		rts		                rts

10411						;-------------------------------------------------------------------------
10412						;
10413						; VDU 7 (&07) Produce BELL sound [MasRef E.3-4]
10414						;
10415	.f067					vdu7EntryPoint:
10416	.f067	08		php		                php
10417	.f068	78		sei		                sei
10418	.f069	ad 63 02	lda $0263	                lda bellChannel
10419	.f06c	29 07		and #$07	                and #$07
10420	.f06e	09 04		ora #$04	                ora #$04
10421	.f070	aa		tax		                tax
10422	.f071	ad 64 02	lda $0264	                lda bellSound
10423	.f074	20 6b eb	jsr $eb6b	                jsr callINSV
10424	.f077	ad 66 02	lda $0266	                lda bellDuration
10425	.f07a	48		pha		                pha
10426	.f07b	ad 65 02	lda $0265	                lda bellFrequency
10427	.f07e	48		pha		                pha
10428	.f07f					LEFCE:
10429	.f07f	38		sec		                sec
10430	.f080	7e 00 08	ror $0800,x	                ror $0800,x
10431	.f083	68		pla		                pla
10432	.f084	20 6b eb	jsr $eb6b	                jsr callINSV
10433	.f087	68		pla		                pla
10434	.f088	20 6b eb	jsr $eb6b	                jsr callINSV
10435	.f08b	28		plp		                plp
10436	.f08c	60		rts		                rts

10438						;-------------------------------------------------------------------------
10439						;
10440						; OSWORD 8 (&08) Define a sound envelope [MasRef D.3-14]
10441						;
10442	.f08d					osword08:
10443	.f08d	3a		dec a		                dec a                   ;get index of 1-based envelope
10444	.f08e	0a		asl a		                asl a
10445	.f08f	0a		asl a		                asl a
10446	.f090	0a		asl a		                asl a
10447	.f091	0a		asl a		                asl a                        ;index*16
10448	.f092	09 0f		ora #$0f	                ora #$0F                     ;index*16+15
10449	.f094	aa		tax		                tax                          ;
10450	.f095	a9 00		lda #$00	                lda #$00                     ;
10451	.f097	a0 10		ldy #$10	                ldy #16             ;16 bytes of envelope data get set
10452	.f099					-
10453	.f099	c0 0e		cpy #$0e	                cpy #$0E                     ;
10454	.f09b	b0 02		bcs $f09f	                bcs + ;taken if last 2 bytes of data - they get initialized to $00
10455	.f09d	b1 f0		lda ($f0),y	                lda (originalX),y        ;fetch byte from OSWORD block
10456	.f09f					+
10457	.f09f	9d c0 08	sta $08c0,x	                sta envelope1Data,x          ;set envelope data bytes
10458	.f0a2	ca		dex		                dex
10459	.f0a3	88		dey		                dey
10460	.f0a4	d0 f3		bne $f099	                bne -
10461	.f0a6	60		rts		                rts

10463						;-------------------------------------------------------------------------

10465	.f0a7					LEFF6:
10466	.f0a7	b1 f0		lda ($f0),y	                lda ($F0),y
10467	.f0a9	c9 10		cmp #$10	                cmp #$10
10468	.f0ab	29 03		and #$03	                and #$03
10469	.f0ad	c8		iny		                iny
10470	.f0ae	60		rts		                rts

10472						;-------------------------------------------------------------------------
10473						;
10474						; OSWORD 3 (&03) Read interval timer [MasRef D.3-8]
10475						;
10476	.f0af					osword03:
10477	.f0af	a2 0f		ldx #$0f	                ldx #$0F
10478	.f0b1	80 03		bra $f0b6	                bra LF005

10480						;-------------------------------------------------------------------------
10481						;
10482						; OSWORD 1 (&01) Read system clock [MasRef D.3-7]
10483						;
10484	.f0b3					osword01:
10485	.f0b3	ae 83 02	ldx $0283	                ldx timerSwitchState
10486	.f0b6					LF005:
10487	.f0b6	a0 04		ldy #$04	                ldy #$04
10488	.f0b8					-
10489	.f0b8	bd 8d 02	lda $028d,x	                lda timer0-initialTimerSwitchState,x
10490	.f0bb	91 f0		sta ($f0),y	                sta (originalX),y
10491	.f0bd	e8		inx		                inx
10492	.f0be	88		dey		                dey
10493	.f0bf	10 f7		bpl $f0b8	                bpl -
10494	.f0c1					rtsF010:
10495	.f0c1	60		rts		                rts

10497						;-------------------------------------------------------------------------
10498						;
10499						; OSWORD 4 (&04) Write interval timer [MasRef D.3-9]
10500						;
10501	.f0c2					osword04:
10502	.f0c2	a9 0f		lda #$0f	                lda #intervalTimer-(timer0-initialTimerSwitchState)
10503	.f0c4	80 06		bra $f0cc	                bra copyTIMEValue

10505						;-------------------------------------------------------------------------
10506						;
10507						; OSWORD 2 (&02) Write system clock [MasRef D.3-8]
10508						;
10509	.f0c6					osword02:
10510	.f0c6	ad 83 02	lda $0283	                lda timerSwitchState
10511	.f0c9	49 0f		eor #$0f	                eor #$0F       ;select the timer that isn't being used
10512	.f0cb	18		clc		                clc
10513	.f0cc					copyTIMEValue:
10514	.f0cc	48		pha		                pha
10515	.f0cd	aa		tax		                tax
10516	.f0ce	a0 04		ldy #$04	                ldy #$04
10517	.f0d0					-
10518	.f0d0	b1 f0		lda ($f0),y	                lda (originalX),y
10519	.f0d2	9d 8d 02	sta $028d,x	                sta timer0-initialTimerSwitchState,x
10520	.f0d5	e8		inx		                inx
10521	.f0d6	88		dey		                dey
10522	.f0d7	10 f7		bpl $f0d0	                bpl -
10523	.f0d9	68		pla		                pla
10524	.f0da	b0 e5		bcs $f0c1	                bcs rtsF010
10525	.f0dc	8d 83 02	sta $0283	                sta timerSwitchState
10526	.f0df	60		rts		                rts

10528						;-------------------------------------------------------------------------
10529						;
10530						; OSWORD 0 (&00) Read line from input stream to memory [MasRef D.3-6]
10531						;
10532	.f0e0					osword00:
10533	.f0e0	a0 04		ldy #$04	                ldy #$04
10534	.f0e2					LF031:
10535	.f0e2	b1 f0		lda ($f0),y	                lda (originalX),y
10538	.f0e4	99 b1 02	sta $02b1,y	                sta osword0MaxLineLength-2,y
10539	.f0e7	88		dey		                dey
10540	.f0e8	c0 02		cpy #$02	                cpy #$02
10541	.f0ea	b0 f6		bcs $f0e2	                bcs LF031
10542	.f0ec	b1 f0		lda ($f0),y	                lda ($F0),y
10543	.f0ee	85 e9		sta $e9		                sta $E9
10544	.f0f0	88		dey		                dey
10545	.f0f1	9c 69 02	stz $0269	                stz pagedModeCounter
10546	.f0f4	b2 f0		lda ($f0)	                lda ($F0)
10547	.f0f6	85 e8		sta $e8		                sta $E8
10548	.f0f8	58		cli		                cli
10549	.f0f9	80 07		bra $f102	                bra LF051

10551	.f0fb					LF04A:
10552	.f0fb	a9 07		lda #$07	                lda #$07
10553	.f0fd					LF04C:
10554	.f0fd	88		dey		                dey
10555	.f0fe					LF04D:
10556	.f0fe	c8		iny		                iny
10557	.f0ff					LF04E:
10558	.f0ff	20 ee ff	jsr $ffee	                jsr OSWRCH
10559	.f102					LF051:
10560	.f102	20 e0 ff	jsr $ffe0	                jsr OSRDCH
10561	.f105	b0 49		bcs $f150	                bcs LF09F
10562	.f107	aa		tax		                tax
10563	.f108	ad 7c 02	lda $027c	                lda characterDestinationStatus
10564	.f10b	6a		ror a		                ror a
10565	.f10c	6a		ror a		                ror a
10566	.f10d	8a		txa		                txa
10567	.f10e	b0 05		bcs $f115	                bcs LF064
10568	.f110	ae 6a 02	ldx $026a	                ldx vduQueueNegativeLength
10569	.f113	d0 ea		bne $f0ff	                bne LF04E
10570	.f115					LF064:
10571	.f115	c9 7f		cmp #$7f	                cmp #$7F
10572	.f117	d0 07		bne $f120	                bne LF06F
10573	.f119	c0 00		cpy #$00	                cpy #$00
10574	.f11b	f0 e5		beq $f102	                beq LF051
10575	.f11d	88		dey		                dey
10576	.f11e	80 df		bra $f0ff	                bra LF04E

10578	.f120					LF06F:
10579	.f120	c9 15		cmp #$15	                cmp #$15
10580	.f122	d0 0d		bne $f131	                bne LF080
10581	.f124	98		tya		                tya
10582	.f125	f0 db		beq $f102	                beq LF051
10583	.f127	a9 7f		lda #$7f	                lda #$7F
10584	.f129					LF078:
10585	.f129	20 ee ff	jsr $ffee	                jsr OSWRCH
10586	.f12c	88		dey		                dey
10587	.f12d	d0 fa		bne $f129	                bne LF078
10588	.f12f	80 d1		bra $f102	                bra LF051

10590	.f131					LF080:
10591	.f131	91 e8		sta ($e8),y	                sta ($E8),y
10592	.f133	c9 0d		cmp #$0d	                cmp #$0D
10593	.f135	f0 13		beq $f14a	                beq LF099
10594	.f137	cc b3 02	cpy $02b3	                cpy osword0MaxLineLength
10595	.f13a	b0 bf		bcs $f0fb	                bcs LF04A
10596	.f13c	cd b4 02	cmp $02b4	                cmp osword0MinASCIICharacter
10597	.f13f	90 bc		bcc $f0fd	                bcc LF04C
10598	.f141	cd b5 02	cmp $02b5	                cmp osword0MaxASCIICharacter
10599	.f144	f0 b8		beq $f0fe	                beq LF04D
10600	.f146	90 b6		bcc $f0fe	                bcc LF04D
10601	.f148	80 b3		bra $f0fd	                bra LF04C

10603	.f14a					LF099:
10604	.f14a	20 e7 ff	jsr $ffe7	                jsr OSNEWL
10605	.f14d	20 65 ec	jsr $ec65	                jsr callNETV
10606	.f150					LF09F:
10607	.f150	a5 ff		lda $ff		                lda $FF
10608	.f152	2a		rol a		                rol a
10609	.f153	60		rts		                rts

10611						;-------------------------------------------------------------------------
10612						;
10613						; OSBYTE 3 (&03) Specify output stream [MasRef D.2-19]
10614						;
10615	.f154					osbyte03:
10616	.f154	da		phx		                phx
10617	.f155	ae 7c 02	ldx $027c	                ldx characterDestinationStatus
10618	.f158	a9 0a		lda #$0a	                lda #printerDriverFX3
10619	.f15a	20 67 ea	jsr $ea67	                jsr callPrinterDriver
10620	.f15d	fa		plx		                plx
10621	.f15e	a9 03		lda #$03	                lda #$03
10622	.f160	a0 00		ldy #$00	                ldy #$00
10623	.f162	80 23		bra $f187	                bra osbyte04

10625						;-------------------------------------------------------------------------
10626						;
10627						; OSBYTE 6 (&06) Write printer ignore character [MasRef D.2-21]
10628						;
10629	.f164					osbyte06:                       ;f0b3
10630	.f164	4e 46 02	lsr $0246	                lsr noignoreState
10631	.f167	80 16		bra $f17f	                bra osbyte01

10633						;-------------------------------------------------------------------------
10634						;
10635						; OSBYTE 114 (&72) Write usage of shadow memory [MasRef D.2-32]
10636						;
10637	.f169					osbyte72:                       ;f0b8
10638	.f169	a9 1f		lda #$1f	                lda #$1F
10639	.f16b	80 10		bra $f17d	                bra LF0CC

10641						;-------------------------------------------------------------------------
10642						;
10643						; OSBYTE 5 (&05) Write printer driver type [MasRef D.2-20]
10644						;
10645	.f16d					osbyte05:
10646	.f16d					waitForPrinterDriverDormant:
10647	.f16d	58		cli		                cli
10648	.f16e	78		sei		                sei
10649	.f16f	24 ff		bit $ff		                bit $FF                      ;test for ESCAPE
10650	.f171	30 29		bmi $f19c	                bmi rtsF0EB                  ;taken if ESCAPE pressed
10651	.f173	2c d1 02	bit $02d1	                bit bufferEmptyFlags+bufferPrinter
10652	.f176	10 f5		bpl $f16d	                bpl waitForPrinterDriverDormant ;taken if printer driver active
10653	.f178	20 67 ea	jsr $ea67	                jsr callPrinterDriver    ;call with A=printerDriverFX5
10654	.f17b	a0 00		ldy #$00	                ldy #$00
10655	.f17d					LF0CC:
10656	.f17d	64 f1		stz $f1		                stz $F1

10658						                ; fall through to standard MOS variable handling,
10659						                ; affecting printerDriverType

10661						;-------------------------------------------------------------------------
10662						;
10663						; OSBYTE 1 (&01) Write user flag [MasRef D.2-18]
10664						;
10665	.f17f					osbyte01:
10666	.f17f	49 f0		eor #$f0	                eor #firstMOSVariableOSBYTE+(userFlag-mosVariables)-1 ;-1 because OSBYTE 1
10667	.f181	80 07		bra $f18a	                bra osbyteA6X  ;jump to standard MOS variable handling

10669						;-------------------------------------------------------------------------
10670						;
10671						; OSBYTE 12 (&0C) Write keyboard auto-repeat rate [MasRef D.2-23]
10672						;
10673	.f183					osbyte0C:
10674	.f183	f0 33		beq $f1b8	                beq resetKeyRepeat    ;taken if X=0

10676						;-------------------------------------------------------------------------
10677						;
10678						; OSBYTE 11 (&0B) Write keyboard auto-repeat delay [MasRef D.2-22]
10679						;
10680	.f185					osbyte0B:
10681						                ; TODO - turn this constant into an expression
10682	.f185	69 cf		adc #$cf	                adc #$CF

10684						                ;if osbyte0C, A=$db
10685						                ;if osbyteOD, A=$dc

10687						;-------------------------------------------------------------------------
10688						;
10689						; OSBYTE 4 (&04) Enable/disable cursor editing [MasRef D.2-19]
10690						;
10691	.f187					osbyte04:
10692	.f187	18		clc		                clc
10693	.f188	69 e9		adc #$e9	                adc #firstMOSVariableOSBYTE+(editKeysMode-mosVariables)-4 ;-4 because OSBYTE 4

10695						                ;if originally OSBYTE 4 (&04) Enable/disable cursor
10696						                ;editing [MasRef D.2-19], it's now OSBYTE 237 (&ED)
10697						                ;Read/write cursor editing status [MasRef D.2-77].
10698						                ;
10699						                ;if originally OSBYTE 12 (&0C) Write keyboard
10700						                ;auto-repeat rate [MasRef D.2-23], it's now OSBYTE 197
10701						                ;(&C5) Read/write keyboard auto-repeat rate [MasRef
10702						                ;D.2-60].
10703						                ;
10704						                ;if originally OSBYTE 11 (&0B) Write keyboard
10705						                ;auto-repeat delay [MasRef D.2-22], it's now OSBYTE
10706						                ;196 (&C4) Read/write keyboard auto-repeat delay
10707						                ;[MasRef D.2-60].

10709	.f18a					osbyteA6X:
10710	.f18a	86 f0		stx $f0		                stx originalX

10712						;-------------------------------------------------------------------------
10713						;
10714						; OSBYTE 166 (&A6) Read start address of MOS variables [MasRef D.2-50]
10715						;
10716	.f18c					osbyteA6:
10717	.f18c	a8		tay		                tay             ;
10718	.f18d	b9 90 01	lda $0190,y	                lda mosVariables-firstMOSVariableOSBYTE,y;
10719	.f190	aa		tax		                tax             ;save old value
10720	.f191	25 f1		and $f1		                and originalY   ;AND old value with Y
10721	.f193	45 f0		eor $f0		                eor originalX   ;EOR old value with X
10722	.f195	99 90 01	sta $0190,y	                sta mosVariables-firstMOSVariableOSBYTE,y     ;set new variable value
10723	.f198	b9 91 01	lda $0191,y	                lda mosVariables-firstMOSVariableOSBYTE+1,y
10724	.f19b	a8		tay		                tay             ;Y=contents of next location
10725	.f19c					rtsF0EB:
10726	.f19c	60		rts		                rts

10728						;-------------------------------------------------------------------------
10729						;
10730						; This table is used to set the serial baud rate.
10731						;
10732						;   - bit 7 is not used (always clear)
10733						;   - bit 6 is not used (always set)
10734						;   - bits 3,4,5 indicate the serial receive baud rate
10735						;   - bits 0,1,2 indicate the serial transmit baud rate
10736						;
10737						;       111 =    75 baud
10738						;       011 =   150 baud
10739						;       101 =   300 baud
10740						;       001 =  1200 baud
10741						;       110 =  2400 baud
10742						;       010 =  4800 baud
10743						;       100 =  9600 baud
10744						;       000 = 19200 baud
10745						;
10747	.f19d					serialBaudRatesTable:
10748	>f19d	64				                .byte %01100100;$64
10749	>f19e	7f				                .byte %01111111;$7f
10750	>f19f	5b				                .byte %01011011;$5b
10751	>f1a0	6d				                .byte %01101101;$6d
10752	>f1a1	49				                .byte %01001001;$49
10753	>f1a2	76				                .byte %01110110;$76
10754	>f1a3	52				                .byte %01010010;$52
10755	>f1a4	64				                .byte %01100100;$64
10756	>f1a5	40				                .byte %01000000;$40

10759						;-------------------------------------------------------------------------
10760						;
10761						; OSBYTE 19 (&13) Wait for vertical sync [MasRef D.2-26]
10762						;
10763	.f1a6					osbyte13:
10764	.f1a6	ad 40 02	lda $0240	                lda cfsTimeoutCounter
10765	.f1a9					-
10766	.f1a9	58		cli		                cli
10767	.f1aa	78		sei		                sei
10768	.f1ab	cd 40 02	cmp $0240	                cmp cfsTimeoutCounter
10769	.f1ae	f0 f9		beq $f1a9	                beq -

10771						                ; fall through to OSBYTE $a0 (!!)

10773						;-------------------------------------------------------------------------
10774						;
10775						; OSBYTE 160 (&A0) Read VDU variable value [MasRef D.2-49]
10776						;
10777	.f1b0					osbyteA0:
10778	.f1b0	bc 01 03	ldy $0301,x	                ldy vduv+1,x
10779	.f1b3	bd 00 03	lda $0300,x	                lda vduv+0,x
10780	.f1b6	aa		tax		                tax
10781	.f1b7	60		rts		                rts

10783						;-------------------------------------------------------------------------
10784						;
10785						; Reset key auto repeat settings to the defaults set in CMOS.
10786						;
10791	.f1b8					resetKeyRepeat:
10792	.f1b8	20 61 f4	jsr $f461	                jsr withTerminalROM
10794	.f1bb	a2 0c		ldx #$0c	                ldx #CMOSBytes.keyboardAutoRepeatDelay+cmosBytesOffset
10795	.f1bd	20 3a 9e	jsr $9e3a	                jsr readRTCByte
10796	.f1c0	8d 54 02	sta $0254	                sta keyboardAutoRepeatDelay
10797	.f1c3	a2 0d		ldx #$0d	                ldx #CMOSBytes.keyboardAutoRepeatRate+cmosBytesOffset
10798	.f1c5	20 3a 9e	jsr $9e3a	                jsr readRTCByte
10799	.f1c8	a8		tay		                tay
10805	.f1c9	ae 55 02	ldx $0255	                ldx keyboardAutoRepeatRate
10806	.f1cc	8c 55 02	sty $0255	                sty keyboardAutoRepeatRate
10807	.f1cf	60		rts		                rts

10809						;-------------------------------------------------------------------------
10810						;
10811						; OSBYTE 18 (&12) Reset soft keys [MasRef D.2-26]
10812						;
10813						; MasRef says X undefined on exit; in fact, X=0, and scanROMs
10814						; relies on this.
10815						;
10816	.f1d0					osbyte12:
10817	.f1d0	38		sec		                sec
10818	.f1d1	6e 84 02	ror $0284	                ror softKeyConsistencyFlag   ;mark soft keys inconsistent
10819	.f1d4	a5 f4		lda $f4		                lda $F4
10820	.f1d6	48		pha		                pha                          ;push selected paged ROM
10821	.f1d7	20 98 e5	jsr $e598	                jsr selectTerminalROMAndANDY

10823						                ; point each soft key at the 0th byte of the strings -
10824						                ; they all then have length 0.
10825	.f1da	a2 10		ldx #$10	                ldx #softKeyCount
10826	.f1dc					-
10827	.f1dc	a9 22		lda #$22	                lda #<andy.softKeys.strings
10828	.f1de	9d 00 80	sta $8000,x	                sta andy.softKeys.stringLSBs,x
10829	.f1e1	a9 80		lda #$80	                lda #>andy.softKeys.strings
10830	.f1e3	9d 11 80	sta $8011,x	                sta andy.softKeys.stringMSBs,x
10831	.f1e6	ca		dex		                dex
10832	.f1e7	10 f3		bpl $f1dc	                bpl -

10834	.f1e9	68		pla		                pla                 ;pop previously selected paged ROM
10835	.f1ea	20 ab e5	jsr $e5ab	                jsr selectROMA

10837	.f1ed	9c 68 02	stz $0268	                stz softKeyStringLength
10838	.f1f0	9c 84 02	stz $0284	                stz softKeyConsistencyFlag   ;mark soft keys consistent
10839	.f1f3	e8		inx		                inx
10840	.f1f4	60		rts		                rts

10842						;-------------------------------------------------------------------------
10843						;
10844						; OSWORD 11 (&0B) Read the palette [MasRef D.3-20]
10845						;
10846	.f1f5					osword0B:
10847	.f1f5	2d 60 03	and $0360	                and vduv.numberOfLogicalColoursMinusOne
10848	.f1f8	aa		tax		                tax
10849	.f1f9	bd 6f 03	lda $036f,x	                lda vduv.currentPalette,x
10850	.f1fc					LF146:
10851	.f1fc	c8		iny		                iny
10852	.f1fd					LF147:
10853	.f1fd	91 f0		sta ($f0),y	                sta (originalX),y
10854	.f1ff	a9 00		lda #$00	                lda #$00                     ;fill last 3 bytes with 0
10855	.f201	c0 04		cpy #$04	                cpy #$04
10856	.f203	d0 f7		bne $f1fc	                bne LF146
10857	.f205	60		rts		                rts

10859						;-------------------------------------------------------------------------
10860						;
10861						; OSWORD 9 (&09) Read pixel logical colour [MasRef D.3-19]
10862						;
10863	.f206					osword09:                                    ;f150
10864	.f206	20 88 f4	jsr $f488	                jsr withMOSROM               ; sF150= 20 AB F3     +s
10865	.f209	a0 03		ldy #$03	                ldy #$03
10866	.f20b					-
10867	.f20b	b1 f0		lda ($f0),y	                lda (originalX),y
10868	.f20d	99 28 03	sta $0328,y	                sta vduv.workspace._28,y
10869	.f210	b9 10 03	lda $0310,y	                lda $0310,y
10870	.f213	48		pha		                pha
10871	.f214	88		dey		                dey
10872	.f215	10 f4		bpl $f20b	                bpl -
10873	.f217	a9 28		lda #$28	                lda #VDUVariables.workspace._28
10874	.f219	20 b7 dd	jsr $ddb7	                jsr readPixelColour
10875	.f21c	aa		tax		                tax
10876	.f21d	a0 00		ldy #$00	                ldy #$00
10877	.f21f					LF169:
10878	.f21f	68		pla		                pla
10879	.f220	99 10 03	sta $0310,y	                sta $0310,y
10880	.f223	c8		iny		                iny
10881	.f224	c0 04		cpy #$04	                cpy #$04
10882	.f226	d0 f7		bne $f21f	                bne LF169
10883	.f228	8a		txa		                txa
10884	.f229	80 d2		bra $f1fd	                bra LF147

10886	.f22b					osword0A:                                    ;f175
10887	.f22b	20 3c e2	jsr $e23c	                jsr getSoftCharacterDefinitionAddress
10888	.f22e	a0 00		ldy #$00	                ldy #$00
10889	.f230	a5 f4		lda $f4		                lda $F4
10890	.f232	48		pha		                pha
10891	.f233	20 98 e5	jsr $e598	                jsr selectTerminalROMAndANDY
10892	.f236					LF180:
10893	.f236	b1 de		lda ($de),y	                lda ($DE),y
10894	.f238	c8		iny		                iny
10895	.f239	91 f0		sta ($f0),y	                sta ($F0),y
10896	.f23b	c0 08		cpy #$08	                cpy #$08
10897	.f23d	d0 f7		bne $f236	                bne LF180
10898	.f23f	fa		plx		                plx
10899	.f240	4c 9a e5	jmp $e59a	                jmp selectROMX

10901	.f243					osword0C:                                    ;f18d
10902	.f243	20 88 f4	jsr $f488	                jsr withMOSROM
10903	.f246	08		php		                php
10904	.f247	2d 60 03	and $0360	                and $0360
10905	.f24a	aa		tax		                tax
10906	.f24b	c8		iny		                iny
10907	.f24c	b1 f0		lda ($f0),y	                lda ($F0),y
10908	.f24e	4c 39 c6	jmp $c639	                jmp LC639

10910	.f251					osword0D:                                    ;f19b
10911	.f251	20 88 f4	jsr $f488	                jsr withMOSROM
10912	.f254	a9 03		lda #$03	                lda #$03
10913	.f256	20 5b f2	jsr $f25b	                jsr LF1A5
10914	.f259	a9 07		lda #$07	                lda #$07
10915	.f25b					LF1A5:
10916	.f25b	48		pha		                pha
10917	.f25c	20 c6 e2	jsr $e2c6	                jsr LE2B6
10918	.f25f	20 df c4	jsr $c4df	                jsr LC4DF
10919	.f262	a2 03		ldx #$03	                ldx #$03
10920	.f264	68		pla		                pla
10921	.f265	a8		tay		                tay
10922	.f266					LF1B0:
10923	.f266	bd 10 03	lda $0310,x	                lda $0310,x
10924	.f269	91 f0		sta ($f0),y	                sta ($F0),y
10925	.f26b	88		dey		                dey
10926	.f26c	ca		dex		                dex
10927	.f26d	10 f7		bpl $f266	                bpl LF1B0
10928	.f26f	60		rts		                rts

10930						; Read address of bottom of screen/top of user memory
10931						; ===================================================
10932	.f270					osbyte84:                     ;f1ba
10933	.f270	a5 d0		lda $d0		                lda STATE     ; Get VDU status
10934	.f272	89 10		bit #$10	                bit #STATE.isShadowMode ; If shadow screen, jump to return &8000
10935	.f274	d0 18		bne $f28e	                bne LF1D8
10936	.f276					LF1C0:
10937	.f276	ad 55 03	lda $0355	                lda $0355                    ; Get current screen MODE

10939						; Return start of screen for non-shadow MODE in X
10940						; -----------------------------------------------
10941	.f279					LF1C3:
10942	.f279	29 07		and #$07	                and #$07
10943	.f27b	a8		tay		                tay
10944	.f27c	be 78 e1	ldx $e178,y	                ldx screenMODEGroupForMODE,y ; Get screen map for supplied MODE
10945	.f27f	bd 8e e1	lda $e18e,x	                lda startScreenAddressHighByteForScreenMODEGroup,x ; Get address top byte for this screen map
10946	.f282					LF1CC:
10947	.f282	a2 00		ldx #$00	                ldx #$00                     ; Address=&xx00
10948	.f284	a8		tay		                tay
10949	.f285	60		rts		                rts

10951						;-------------------------------------------------------------------------
10952						;
10953						; OSBYTE 133 (&85) Read top of user RAM for given mode [MasRef D.2-41]
10954						;
10955	.f286					osbyte85:
10956	.f286	8a		txa		                txa                          ; If MODE &80+n, return &8000
10957	.f287	30 05		bmi $f28e	                bmi LF1D8
10958	.f289	ae 7f 02	ldx $027f	                ldx shadowRAMState ; If *SHADOW<>0, jump to return non-shadow address
10959	.f28c	d0 eb		bne $f279	                bne LF1C3
10960	.f28e					LF1D8:
10961	.f28e	a9 80		lda #$80	                lda #$80                     ; Return &8000
10962	.f290	80 f0		bra $f282	                bra LF1CC

10964						;-------------------------------------------------------------------------
10965						;
10966						; OSBYTE 135 (&87) Read screen mode and character at text cursor
10967						; position [MasRef D.2-42]
10968						;
10969	.f292					osbyte87: ;F1DC:
10970	.f292	20 88 f4	jsr $f488	                jsr withMOSROM
10971	.f295	4c f8 dd	jmp $ddf8	                jmp readCharacterAtTextCursor

10973						;-------------------------------------------------------------------------
10974						;
10975						; OSBYTE 139 (&8B) Write Filing System options [MasRef D.2-43]
10976						;
10977	.f298					osbyte8B:
10978	.f298	0a		asl a		                asl a

10980						;-------------------------------------------------------------------------
10981						;
10982						; OSBYTE 127 (&7F) Check for end of file on an opened file [MasRef D.2-37]
10983						;
10984	.f299					osbyte7F:
10985	.f299	29 01		and #$01	                and #$01

10987						;-------------------------------------------------------------------------
10988						;
10989						; Call OSFSC. There's no entry point for this.
10990						;
10991	.f29b					callFSCV:
10992	.f29b	6c 1e 02	jmp ($021e)	                jmp (FSCV)

10994						;-------------------------------------------------------------------------
10995						;
10996						; OSWORD 15 (&0F) Write CMOS clock [MasRef D.3-24]
10997						;
10999	.f29e					selectTerminalROMAndOSWORD0F:
11000	.f29e	20 61 f4	jsr $f461	                jsr withTerminalROM       ; Page in ROM 15
11001	.f2a1	4c e3 98	jmp $98e3	                jmp osword0F

11004						;-------------------------------------------------------------------------

11006						; Set TAPE/ROM extended vectors
11007						; =============================
11008	.f2a4					LF1EE:
11009	.f2a4	a2 15		ldx #$15	                ldx #$15
11010	.f2a6					LF1F0:
11011	.f2a6	bd af f2	lda $f2af,x	                lda LF1FA-1,x
11012	.f2a9	9d b9 0d	sta $0db9,x	                sta ExtendedVectorAddress(FILEV)-1,x
11013	.f2ac	ca		dex		                dex
11014	.f2ad	d0 f7		bne $f2a6	                bne LF1F0
11015	.f2af					LF1F9:
11016	.f2af	60		rts		                rts

11018						; TAPE/ROM extended vector values
11019						; -------------------------------
11020	.f2b0					LF1FA:
11021	>f2b0	6e a5				                .word osfileTapeOrROM ; FILEV
11022	>f2b2	0f				                .byte terminalROM
11023	>f2b3	10 a4				                .word osargsTapeOrROM ; ARGSV
11024	>f2b5	0f				                .byte terminalROM
11025	>f2b6	b0 a7				                .word bputTapeOrROM ; BPUTV
11026	>f2b8	0f				                .byte terminalROM
11030	>f2b9	11 a8				                .word bgetTapeOrROM ; BGETV
11032	>f2bb	0f				                .byte terminalROM
11033	>f2bc	33 a8				                .word osgbpbTapeOrROM ; GBPBV
11034	>f2be	0f				                .byte terminalROM
11035	>f2bf	bf a6				                .word osfindTapeOrROM ; FINDV
11036	>f2c1	0f				                .byte terminalROM
11037	>f2c2	73 a4				                .word fscTapeOrROM  ; FSCV
11038	>f2c4	0f				                .byte terminalROM

11040						;-------------------------------------------------------------------------
11041						;
11042						; OSBYTE 109 (&6D) Make temporary Filing System permanent
11043						;
11044						; MasRef D.2-30
11045						;
11046	.f2c5					osbyte6D:;f20f
11047	.f2c5	ae 01 df	ldx $df01	                ldx hazel.activeFS; Copy active FS to current FS
11048	.f2c8	8e 00 df	stx $df00	                stx hazel.currentFS
11049	.f2cb	ad bc 0d	lda $0dbc	                lda ExtendedVectorAddress(FILEV)+2 ; Copy XFILEV ROM to current FS ROM number
11050	.f2ce	8d 03 df	sta $df03	                sta hazel.currentFSROM
11051	.f2d1					rtsF180:
11052	.f2d1	60		rts		                rts

11054						;-------------------------------------------------------------------------
11055						;
11056						; OSBYTE 20 (&14) Restore default font definitions
11057						;
11058						; MasRef D.2-24
11059						;
11061	.f2d2					osbyte14:                       ;f21c
11062	.f2d2	20 61 f4	jsr $f461	                jsr withTerminalROM
11063	.f2d5	4c b9 94	jmp $94b9	                jmp restoreFont32To126

11066						;-------------------------------------------------------------------------
11067						;
11068						; OSBYTE 25 (&19) Restore a group of font definitions
11069						;
11070						; MasRef D.2-28
11071						;
11072	.f2d8					selectTerminalROMAndOSBYTE19:                ;f222
11074	.f2d8	a2 07		ldx #$07	                ldx #romServiceCallUnrecognisedOSBYTE
11075	.f2da	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
11079	.f2dd	f0 0b		beq $f2ea	                beq LF2EB
11081	.f2df	a6 f0		ldx $f0		                ldx originalX
11083	.f2e1	20 61 f4	jsr $f461	                jsr withTerminalROM
11084	.f2e4	4c bd 94	jmp $94bd	                jmp osbyte19

11086						;-------------------------------------------------------------------------

11088						; OSBYTE &16 - Increment ROM polling semaphore
11089						; ========================================
11090	.f2e7					osbyte16:                       ;f228
11091	.f2e7	ee 43 02	inc $0243	                inc romPollingSemaphore
11092	.f2ea					LF2EB:
11093	.f2ea	60		rts		                rts

11095						;-------------------------------------------------------------------------

11097						; OSBYTE &17 - Decrement ROM polling semaphore
11098	.f2eb					osbyte17:                       ;f22c
11099						; ========================================
11100	.f2eb	ce 43 02	dec $0243	                dec romPollingSemaphore
11101	.f2ee	60		rts		                rts

11103						;-------------------------------------------------------------------------

11115						;-------------------------------------------------------------------------

11117						; OSBYTE &76 - Set LEDs to keyboard state
11118						; =======================================
11119	.f2ef					osbyte76:
11120	.f2ef	08		php		                php                          ; Disable IRQs
11121	.f2f0	78		sei		                sei
11122	.f2f1	a9 40		lda #$40	                lda #$40                     ; Turn on LEDs
11123	.f2f3	20 00 f3	jsr $f300	                jsr LF241
11124	.f2f6	30 05		bmi $f2fd	                bmi LF23E                    ; Exit if Escape pending
11125	.f2f8	18		clc		                clc                          ; Call KEYV to read SHIFT and CTRL
11126	.f2f9	b8		clv		                clv
11127	.f2fa	20 9e f7	jsr $f79e	                jsr callKEYV
11128						; Returns A.b7=CTRL, A.b6=SHIFT, MI=CTRL, VS=SHIFT
11129	.f2fd					LF23E:
11130	.f2fd	28		plp		                plp                          ; Restore IRQs
11131	.f2fe	2a		rol a		                rol a                        ; Set Carry from A bit 7 and return
11132	.f2ff	60		rts		                rts
11133						; Returns A.b7=SHIFT, CS=CTRL

11135						; Set keyboard LEDs
11136						; -----------------
11137	.f300					LF241:
11138	.f300	90 09		bcc $f30b	                bcc LF24C                    ; Skip if not called from OSBYTE
11139	.f302	a0 07		ldy #$07	                ldy #$07                     ; Turn ShiftLock LED on
11140	.f304	8c 40 fe	sty $fe40	                sty systemVIA.orb
11141	.f307	88		dey		                dey                          ; Turn CapsLock LED on
11142	.f308	8c 40 fe	sty $fe40	                sty systemVIA.orb
11143	.f30b					LF24C:
11144	.f30b	24 ff		bit $ff		                bit $FF                      ; Test Escape and return
11145	.f30d	60		rts		                rts

11147						;-------------------------------------------------------------------------

11149	.f30e					osbyte9A:
11150	.f30e	8a		txa		                txa
11151	.f30f					setVCONTROL:
11152	.f30f	08		php		                php
11153	.f310	78		sei		                sei
11154	.f311	8d 48 02	sta $0248	                sta vcontrolRegister
11155	.f314	8d 20 fe	sta $fe20	                sta VCONTROL
11156	.f317	ad 53 02	lda $0253	                lda secondFlashColourDuration
11157	.f31a	8d 51 02	sta $0251	                sta flashCounter
11158	.f31d	28		plp		                plp
11159	.f31e	60		rts		                rts

11161						;-------------------------------------------------------------------------
11162						;
11163						; OSBYTE 155 (&9B) Write to video ULA palette register and copy
11164						;
11165	.f31f					osbyte9B:
11166	.f31f	8a		txa		                txa
11167	.f320					writeVPALETTE:
11168	.f320	49 07		eor #$07	                eor #$07
11169	.f322	08		php		                php
11170	.f323	78		sei		                sei
11171	.f324	8d 49 02	sta $0249	                sta vpaletteRegister
11172	.f327	8d 21 fe	sta $fe21	                sta VPALETTE
11173	.f32a	28		plp		                plp
11174	.f32b	60		rts		                rts

11176						;-------------------------------------------------------------------------

11178	.f32c					gsinitForFilenameParsing:
11179	.f32c	18		clc		                clc

11182						;-------------------------------------------------------------------------
11183						;
11184						; GSINIT
11185						;
11186						; MasRef D.10-1
11187						;
11188	.f32d					gsinitEntryPoint:
11189	.f32d	66 e4		ror $e4		                ror stringInputOptions    ;put C into bit 7
11190	.f32f	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
11191	.f332	c8		iny		                iny
11192	.f333	c9 22		cmp #$22	                cmp #'"'
11193	.f335	f0 02		beq $f339	                beq +                       ; C=1 if double quotes
11194	.f337	88		dey		                dey
11195	.f338	18		clc		                clc                         ; clear double quotes flag
11196	.f339					+
11197	.f339	66 e4		ror $e4		                ror stringInputOptions ; set doubleQuotes; move bit 7 into spaceNotATerminator
11198	.f33b	c9 0d		cmp #$0d	                cmp #$0D                     ; set Z if initial CR
11199	.f33d	60		rts		                rts

11201						;-------------------------------------------------------------------------
11202						;
11203						; GSREAD
11204						;
11205						; MasRef D.10-2
11206						; MasRef C.5-8 has the | syntax
11207						;
11208	.f33e					gsreadEntryPoint:
11209	.f33e	a9 01		lda #$01	                lda #stringInputOptions.goodString
11210	.f340	04 e4		tsb $e4		                tsb stringInputOptions
11211	.f342	20 5b f3	jsr $f35b	                jsr LF29C
11212	.f345	08		php		                php                          ; save flags
11213	.f346	46 e4		lsr $e4		                lsr stringInputOptions       ; move goodString into C
11214	.f348	90 04		bcc $f34e	                bcc badStringError           ; branch taken if bad string
11215	.f34a	26 e4		rol $e4		                rol stringInputOptions       ; reinstate goodString
11216	.f34c	28		plp		                plp                          ; restore flags
11217	.f34d	60		rts		                rts                          ;

11219	.f34e					badStringError:
11220	.f34e	00		brk #		                brk                          ;
11221	>f34f	fd 42 61 64 20 73 74 72		                .text $fd,"Bad string",0
	>f357	69 6e 67 00
11222	.f35b					LF29C:
11223	.f35b	18		clc		                clc                          ; last char not !
11224	.f35c					LF29D:
11225						                ; C=1 at this point if |! was the last sequence seen.
11226	.f35c	64 e5		stz $e5		                stz stringInputPlingFlag
11227	.f35e	66 e5		ror $e5		                ror stringInputPlingFlag     ; set ! flag as required
11228	.f360	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11229	.f362	c9 0d		cmp #$0d	                cmp #13                      ;EOL?
11230	.f364	d0 09		bne $f36f	                bne notRETURN                ;taken if not EOL
11231	.f366	24 e4		bit $e4		                bit stringInputOptions
11232	.f368	10 20		bpl $f38a	                bpl finishedString           ;taken if !doubleQuotes
11233	.f36a					badString:
11234	.f36a	a9 01		lda #$01	                lda #stringInputOptions.goodString
11235	.f36c	14 e4		trb $e4		                trb stringInputOptions
11236	.f36e	60		rts		                rts

11238	.f36f					notRETURN:
11239	.f36f	c9 20		cmp #$20	                cmp #' '
11240	.f371	90 f7		bcc $f36a	                bcc badString ;taken if unprintable control char
11241	.f373	d0 06		bne $f37b	                bne notSPACE
11242	.f375	24 e4		bit $e4		                bit stringInputOptions ;N=doubleQuotes, V=spaceNotATerminator
11243	.f377	30 3e		bmi $f3b7	                bmi finishUpReadClearV ;taken if quoted
11244	.f379	50 0f		bvc $f38a	                bvc finishedString ;taken if space is a terminator
11245	.f37b					notSPACE:
11246	.f37b	c9 22		cmp #$22	                cmp #'"'
11247	.f37d	d0 10		bne $f38f	                bne notDOUBLEQUOTE         ;taken if not quotes
11248	.f37f	24 e4		bit $e4		                bit stringInputOptions ;N=doubleQuotes, V=spaceNotATerminator
11249	.f381	10 34		bpl $f3b7	                bpl finishUpReadClearV ;taken if not double quotes
11250	.f383	c8		iny		                iny
11251	.f384	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11252	.f386	c9 22		cmp #$22	                cmp #'"'
11253	.f388	f0 2d		beq $f3b7	                beq finishUpReadClearV       ;taken if quotes
11254	.f38a					finishedString:
11255	.f38a	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
11256	.f38d	38		sec		                sec
11257	.f38e	60		rts		                rts

11259	.f38f					notDOUBLEQUOTE:
11260	.f38f	c9 7c		cmp #$7c	                cmp #'|'
11261	.f391	d0 24		bne $f3b7	                bne finishUpReadClearV       ;taken if not |
11262	.f393	c8		iny		                iny                          ;skip |
11263	.f394	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11264	.f396	c9 7c		cmp #$7c	                cmp #'|'
11265	.f398	f0 1d		beq $f3b7	                beq finishUpReadClearV ;branch taken if "||" - literal |
11266	.f39a	c9 22		cmp #$22	                cmp #'"'
11267	.f39c	f0 19		beq $f3b7	                beq finishUpReadClearV ;branch taken if "|\"" - literal "
11268	.f39e	c9 21		cmp #$21	                cmp #'!'
11269	.f3a0	d0 03		bne $f3a5	                bne LF2E6                    ;taken if not "|!"

11271						                ; Handle |! - ASCII 128-255
11272	.f3a2	c8		iny		                iny                          ;skip !
11273	.f3a3	80 b7		bra $f35c	                bra LF29D

11275	.f3a5					LF2E6:
11276	.f3a5	c9 20		cmp #$20	                cmp #' '
11277	.f3a7	90 c1		bcc $f36a	                bcc badString ;taken if | followed by a non-printable char
11278	.f3a9	c9 3f		cmp #$3f	                cmp #'?'
11279	.f3ab	f0 08		beq $f3b5	                beq ascii127                 ;taken if "|?" - CHR$127
11280	.f3ad	20 fc f3	jsr $f3fc	                jsr implementCTRLCodes
11281	.f3b0	2c 70 e3	bit $e370	                bit valueFF
11282	.f3b3	80 03		bra $f3b8	                bra LF2F9

11284	.f3b5					ascii127:
11285	.f3b5	a9 7f		lda #$7f	                lda #$7F
11286	.f3b7					finishUpReadClearV:
11287	.f3b7	b8		clv		                clv
11288	.f3b8					LF2F9:
11289	.f3b8	c8		iny		                iny
11290	.f3b9	05 e5		ora $e5		                ora stringInputPlingFlag ;if it was a |! char, set bit 7
11291	.f3bb	18		clc		                clc
11292	.f3bc	60		rts		                rts

11294						;-------------------------------------------------------------------------

11296	.f3bd					incAndSkipSpaces:
11297	.f3bd	c8		iny		                iny
11298	.f3be					skipSpacesAndCheckForCRInStringInput:
11299	.f3be	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
11300	.f3c0	c9 20		cmp #$20	                cmp #' '
11301	.f3c2	f0 f9		beq $f3bd	                beq incAndSkipSpaces
11302	.f3c4					checkForCR:
11303	.f3c4	c9 0d		cmp #$0d	                cmp #13
11304	.f3c6	60		rts		                rts

11306						;-------------------------------------------------------------------------

11308	.f3c7					LF308:
11309	.f3c7	90 f5		bcc $f3be	                bcc skipSpacesAndCheckForCRInStringInput
11310	.f3c9					LF30A:
11311	.f3c9	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
11312	.f3cc	c9 2c		cmp #$2c	                cmp #','
11313	.f3ce	d0 f4		bne $f3c4	                bne checkForCR
11314	.f3d0	c8		iny		                iny
11315	.f3d1	60		rts		                rts

11317						;-------------------------------------------------------------------------

11410						;-------------------------------------------------------------------------
11411						;
11412						; Modify character in A as if the SHIFT key is being pressed.
11413						;

11415	.f3d2					implementShift:

11444	.f3d2	a2 02		ldx #$02	                ldx #2
11445	.f3d4	50 00		bvc $f3d6	                bvc LF3C5
11446	.f3d6					LF3C5:
11447	.f3d6	dd f7 f3	cmp $f3f7,x	                cmp LF3E7-1,x
11448	.f3d9	f0 18		beq $f3f3	                beq LF3E2
11449	.f3db	ca		dex		                dex
11450	.f3dc	d0 f8		bne $f3d6	                bne LF3C5
11451	.f3de	50 12		bvc $f3f2	                bvc LF3E1
11452	.f3e0	c9 21		cmp #$21	                cmp #'!'
11453	.f3e2	90 0e		bcc $f3f2	                bcc LF3E1
11454	.f3e4	c9 40		cmp #$40	                cmp #'@'
11458	.f3e6	90 08		bcc $f3f0	                bcc LF3DF
11459	.f3e8	c9 7f		cmp #$7f	                cmp #$7f
11460	.f3ea	f0 06		beq $f3f2	                beq LF3E1
11461	.f3ec	b0 02		bcs $f3f0	                bcs LF3DF

11463	.f3ee					LF3DD:
11464	.f3ee	49 30		eor #$30	                eor #$30
11465	.f3f0					LF3DF:
11466	.f3f0	49 10		eor #$10	                eor #$10
11467	.f3f2					LF3E1:
11468	.f3f2	60		rts		                rts

11470	.f3f3					LF3E2:
11471	.f3f3	b8		clv		                clv
11472	.f3f4	bd f9 f3	lda $f3f9,x	                lda LF3E9-1,x
11473	.f3f7	60		rts		                rts

11475	.f3f8					LF3E7:
11476	>f3f8	5f				                .byte '_'
11477	>f3f9	30				                .byte '0'
11478	.f3fa					LF3E9:
11479	>f3fa	60				                .byte '`'
11483	>f3fb	40				                .byte '@'

11488						;-------------------------------------------------------------------------
11489						;
11490						; See MasRef C.5-8
11491						;
11492						;
11493	.f3fc					implementCTRLCodes:

11511	.f3fc	da		phx		                phx
11512	.f3fd	a2 02		ldx #$02	                ldx #2
11513	.f3ff					LF3EE:
11514	.f3ff	dd 1a f4	cmp $f41a,x	                cmp LF40A-1,x
11515	.f402	f0 11		beq $f415	                beq LF404
11516	.f404	ca		dex		                dex
11517	.f405	d0 f8		bne $f3ff	                bne LF3EE
11518	.f407	fa		plx		                plx
11519	.f408	c9 3f		cmp #$3f	                cmp #'?'
11520	.f40a	90 08		bcc $f414	                bcc LF403
11521	.f40c	c9 7f		cmp #$7f	                cmp #$7f
11522	.f40e	f0 04		beq $f414	                beq LF403
11523	.f410	b0 dc		bcs $f3ee	                bcs LF3DD
11524	.f412	29 1f		and #$1f	                and #$1f
11525	.f414					LF403:
11526	.f414	60		rts		                rts

11528	.f415					LF404:
11529	.f415	b8		clv		                clv
11530	.f416	bd 1c f4	lda $f41c,x	                lda LF40C-1,x
11531	.f419	fa		plx		                plx
11532	.f41a	60		rts		                rts

11534	.f41b					LF40A:
11535	>f41b	30 40				                .text '0','@'
11536	.f41d					LF40C:
11537	>f41d	00 00				                .text 0,0

11541						;-------------------------------------------------------------------------

11547	.f41f					osbyte247EntryPoint:
11548	.f41f	ad 87 02	lda $0287	                lda breakVectorByte0
11549	.f422	49 4c		eor #$4c	                eor #$4C                     ; JMP abs
11550	.f424	d0 1a		bne $f440	                bne rtsF363
11557	.f426	a5 f4		lda $f4		                lda $f4
11558	.f428	48		pha		                pha
11559	.f429	20 87 02	jsr $0287	                jsr breakVectorByte0
11560	.f42c	68		pla		                pla
11561	.f42d	85 f4		sta $f4		                sta $f4
11562	.f42f	60		rts		                rts

11565						;-------------------------------------------------------------------------
11566						;
11567						; OSBYTE 144 (&90)
11568						; Set vertical screen shift and interlace
11569						;
11570						; MasRef D.2-44
11571						;
11572	.f430					osbyte90:
11573	.f430	ad 90 02	lda $0290	                lda tvOffset
11574	.f433	8e 90 02	stx $0290	                stx tvOffset
11575	.f436	aa		tax		                tax
11576	.f437	98		tya		                tya
11577	.f438	29 01		and #$01	                and #$01
11578	.f43a	ac 91 02	ldy $0291	                ldy tvInterlace
11579	.f43d	8d 91 02	sta $0291	                sta tvInterlace
11580	.f440					rtsF363:
11581	.f440	60		rts		                rts

11583						;-------------------------------------------------------------------------
11584						;
11585						; OSBYTE 149 (&95) - write to JIM
11586						;
11587						; MasRef D.2-45
11588						;
11589	.f441					osbyte95:
11590	.f441	98		tya		                tya
11591	.f442	9d 00 fd	sta $fd00,x	                sta $FD00,x
11592	.f445	60		rts		                rts

11594						;-------------------------------------------------------------------------
11595						;
11596						; OSBYTE 151 (&97) - write to SHEILA
11597						;
11598						; MasRef D.2-45
11599						;
11600	.f446					osbyte97:
11601	.f446	98		tya		                tya
11602	.f447	9d 00 fe	sta $fe00,x	                sta $FE00,x
11603	.f44a	60		rts		                rts

11605						;-------------------------------------------------------------------------
11606						;
11607						; OSBYTE 147 (&93) - write to FRED
11608						;
11609						; MasRef D.2-45
11610						;
11611	.f44b					osbyte93:
11612	.f44b	98		tya		                tya
11613	.f44c	9d 00 fc	sta $fc00,x	                sta $FC00,x
11614	.f44f	60		rts		                rts

11616						;-------------------------------------------------------------------------
11617						;
11618						; *SHUT [MasRef G.5-10]
11619						;
11620	.f450					starSHUT:
11621	.f450	a2 26		ldx #$26	                ldx #romServiceCallCloseAllOpenFiles
11622	.f452	4c ff ee	jmp $eeff	                jmp makeROMServiceCall

11624						;-------------------------------------------------------------------------
11625						;
11626						; Return thunk used by withTerminalROM.
11627						;
11628						; On entry here, the old value of $f4 is at the top of the stack.
11629						;
11630	.f455					withTerminalROMReturnThunk:
11631	.f455	08		php		                php                          ; S=[p; old ROMSEL]
11632	.f456	48		pha		                pha                          ; S=[a; p; old ROMSEL]
11633	.f457	da		phx		                phx                          ; S=[x; a; p; old ROMSEL]
11634	.f458	ba		tsx		                tsx
11635	.f459	bd 04 01	lda $0104,x	                lda $0104,x                  ; get old ROMSEL
11636	.f45c	20 ab e5	jsr $e5ab	                jsr selectROMA               ; re-select old ROM
11637	.f45f	80 5d		bra $f4be	                bra returnThunkSuffix

11639						;-------------------------------------------------------------------------
11640						;
11641						; Select the Terminal ROM. Rearrange the stack so that the original
11642						; ROM is re-selected when withTerminalROM's caller itself returns.
11643						;
11644	.f461					withTerminalROM:
11654	.f461	48		pha		                pha                          ; S=[A]
11655	.f462	48		pha		                pha                          ; S=[A; A]
11656	.f463	48		pha		                pha                          ; S=[A; A; A]
11657	.f464	08		php		                php                          ; S=[P; A; A; A]
11658	.f465	48		pha		                pha                          ; S=[A; P; A; A; A]
11659	.f466	da		phx		                phx                          ; S=[X; A; P; A; A; A]
11660	.f467	ba		tsx		                tsx                          ; S=[X; A; P; A; A; A; RL; RH]
11661	.f468	bd 07 01	lda $0107,x	                lda $0107,x                  ; get RL
11662	.f46b	9d 04 01	sta $0104,x	                sta $0104,x                  ; overwrite placeholder A
11663	.f46e	bd 08 01	lda $0108,x	                lda $0108,x                  ; get RH
11664	.f471	9d 05 01	sta $0105,x	                sta $0105,x                  ; overwrite placeholder A
11665	.f474	a5 f4		lda $f4		                lda $F4                      ; get ROMSEL
11666	.f476	9d 08 01	sta $0108,x	                sta $0108,x                  ; overwrite RH

11668						                ; put return thunk in the right spot
11669	.f479	a9 f4		lda #$f4	                lda #>withTerminalROMReturnThunk-1
11670	.f47b	9d 07 01	sta $0107,x	                sta $0107,x
11671	.f47e	a9 54		lda #$54	                lda #<withTerminalROMReturnThunk-1
11672	.f480	9d 06 01	sta $0106,x	                sta $0106,x
11674	.f483	20 a9 e5	jsr $e5a9	                jsr selectTerminalROM
11675	.f486	80 28		bra $f4b0	                bra plx_pla_plp_rts

11677						;-------------------------------------------------------------------------
11678						;
11679						; Select the MOS ROM (i.e., no HAZEL). Rearrange the stack so that the
11680						; original HAZEL state is restored when withMOSROM's caller itself
11681						; returns.
11682						;
11683	.f488					withMOSROM:
11694	.f488	48		pha		                pha                          ; S=[A]
11695	.f489	48		pha		                pha                          ; S=[A; A]
11696	.f48a	48		pha		                pha                          ; S=[A; A; A]
11697	.f48b	08		php		                php                          ; S=[P; A; A; A]
11698	.f48c	48		pha		                pha                          ; S=[A; P; A; A; A]
11699	.f48d	da		phx		                phx                          ; S=[X; A; P; A; A; A]
11700	.f48e	ba		tsx		                tsx                          ; S=[X; A; P; A; A; A; RL; RH]
11701	.f48f	bd 08 01	lda $0108,x	                lda $0108,x                  ; get RH
11702	.f492	9d 05 01	sta $0105,x	                sta $0105,x                  ; overwrite placeholder A
11703	.f495	bd 07 01	lda $0107,x	                lda $0107,x                  ; get RL
11704	.f498	9d 04 01	sta $0104,x	                sta $0104,x                  ; overwrite placeholder A

11706						                ; put return thunk in the right spot
11707	.f49b	a9 f4		lda #$f4	                lda #>withMOSROMReturnThunk-1
11708	.f49d	9d 07 01	sta $0107,x	                sta $0107,x
11709	.f4a0	a9 b3		lda #$b3	                lda #<withMOSROMReturnThunk-1
11710	.f4a2	9d 06 01	sta $0106,x	                sta $0106,x

11712	.f4a5	ad 34 fe	lda $fe34	                lda ACCCON                   ; get ACCCON
11713	.f4a8	9d 08 01	sta $0108,x	                sta $0108,x                  ; overwrite RH
11714	.f4ab	a9 08		lda #$08	                lda #ACCCON.Y
11715	.f4ad	1c 34 fe	trb $fe34	                trb ACCCON
11716						                ; HAZEL off
11718	.f4b0					plx_pla_plp_rts:
11719						                ; S=[X; A; P; RL; RH; thunkRL; thunkRH; old ACCCON/ROMSEL]
11720	.f4b0	fa		plx		                plx
11721	.f4b1	68		pla		                pla
11722	.f4b2	28		plp		                plp
11723	.f4b3	60		rts		                rts

11725	.f4b4					withMOSROMReturnThunk:
11726	.f4b4	08		php		                php                          ; S=[P]
11727	.f4b5	48		pha		                pha                          ; S=[A; P]
11728	.f4b6	da		phx		                phx                          ; S=[X; A; P]
11729	.f4b7	ba		tsx		                tsx                          ; S=[X; A; P; old ACCCON]
11730	.f4b8	bd 04 01	lda $0104,x	                lda $0104,x                  ; get old ACCCON
11731	.f4bb	20 3d ee	jsr $ee3d	                jsr selectMOSOrHAZEL         ; re-select old HAZEL state
11732	.f4be					returnThunkSuffix:
11733						                ; double up P, as that's the easiest way of ending up
11734						                ; discarding the TOS without affecting the flags.
11735	.f4be	bd 03 01	lda $0103,x	                lda $0103,x
11736	.f4c1	9d 04 01	sta $0104,x	                sta $0104,x
11737	.f4c4	fa		plx		                plx
11738	.f4c5	68		pla		                pla
11739	.f4c6	28		plp		                plp
11740	.f4c7	28		plp		                plp
11741	.f4c8	60		rts		                rts

11743						;-------------------------------------------------------------------------
11744						;
11745						; Clear ACCCON TST bit (paging in I/O for reads, rather than ROM, at
11746						; $fc00...$feff), and restore it on exit from the current routine.
11747						;

11773						;-------------------------------------------------------------------------
11774						;
11775						; Sort out stack for one of the withXXX routines, that set up some
11776						; state and then automatically restore the original state on exit from
11777						; the calling routine.
11778						;

11798						;-------------------------------------------------------------------------

11800	.f4c9					vduChrEntryPoint:
11801	.f4c9	20 88 f4	jsr $f488	                jsr withMOSROM
11802	.f4cc	a6 f4		ldx $f4		                ldx $F4
11803	.f4ce	da		phx		                phx
11804	.f4cf	20 98 e5	jsr $e598	                jsr selectTerminalROMAndANDY
11805	.f4d2	20 27 c0	jsr $c027	                jsr outputToVDU
11806	.f4d5	fa		plx		                plx
11807	.f4d6	4c 9a e5	jmp $e59a	                jmp selectROMX

11809						;-------------------------------------------------------------------------
11810						;
11811						; OSRDSC [MasRef D.6-1]
11812						;
11813	.f4d9					osrdscEntryPoint:
11814	.f4d9	20 88 f4	jsr $f488	                jsr withMOSROM
11815	.f4dc	4c 18 c0	jmp $c018	                jmp LC018

11817						;-------------------------------------------------------------------------
11818						;
11819						; OSWRSC [MasRef D.8-1]
11820						;
11821	.f4df					oswrscEntryPoint:
11822	.f4df	20 88 f4	jsr $f488	                jsr withMOSROM
11823	.f4e2	4c 5f db	jmp $db5f	                jmp oswrscCode

11825						;-------------------------------------------------------------------------

11827	.f4e5					starRunBOOT:
11828	>f4e5	2f 21 42 4f 4f 54 0d		                .text "/!BOOT",13

11830						;-------------------------------------------------------------------------

11836						;-------------------------------------------------------------------------

11840	.f4ec					LF416:
11841	.f4ec	a5 f4		lda $f4		                lda $f4
11842	.f4ee	48		pha		                pha
11843	.f4ef	20 a9 e5	jsr $e5a9	                jsr selectTerminalROM
11844	.f4f2	20 c7 9f	jsr $9fc7	                jsr LF416Internal
11845	.f4f5	fa		plx		                plx
11846	.f4f6	4c 9a e5	jmp $e59a	                jmp selectROMX

11848	.f4f9					clearSoundChannelBuffer:
11849	.f4f9	da		phx		                phx
11850	.f4fa	a5 f4		lda $f4		                lda $f4
11851	.f4fc	48		pha		                pha
11852	.f4fd	20 a9 e5	jsr $e5a9	                jsr selectTerminalROM
11853	.f500	20 0e a1	jsr $a10e	                jsr clearSoundChannelBufferInternal
11854	.f503	fa		plx		                plx
11855	.f504	20 9a e5	jsr $e59a	                jsr selectROMX
11856	.f507	fa		plx		                plx
11857	.f508	60		rts		                rts

11861						;-------------------------------------------------------------------------

11871						;-------------------------------------------------------------------------

11883						;-------------------------------------------------------------------------

11892						;-------------------------------------------------------------------------

11894	.f509					LF6FC:
11895	.f509	a9 ff		lda #$ff	                lda #$FF
11896	.f50b	85 f5		sta $f5		                sta $F5
11897	.f50d	60		rts		                rts

11899	.f50e					LF701:
11900	.f50e	e6 f5		inc $f5		                inc $F5
11901	.f510	a4 f5		ldy $f5		                ldy $F5
11902	.f512	a2 0d		ldx #$0d	                ldx #romServiceCallROMFilingSystemInitialize
11903	.f514					LF707:
11904	.f514	08		php		                php
11905	.f515	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
11906	.f518	28		plp		                plp
11907	.f519	c9 01		cmp #$01	                cmp #$01
11908	.f51b	98		tya		                tya
11909	.f51c	60		rts		                rts

11911	.f51d					LF710:
11912	.f51d	a2 0e		ldx #$0e	                ldx #$0E
11913	.f51f	a0 ff		ldy #$ff	                ldy #$FF
11914	.f521	4c 14 f5	jmp $f514	                jmp LF707

11916	.f524					LF717:
11917	.f524	ad cb 03	lda $03cb	                lda $03CB
11918	.f527	85 f6		sta $f6		                sta $F6
11919	.f529	ad cc 03	lda $03cc	                lda $03CC
11920	.f52c	85 f7		sta $f7		                sta $F7
11921	.f52e	a5 f5		lda $f5		                lda $F5
11922	.f530	60		rts		                rts

11924	.f531					tidyUpAfterKeyboardProcessing:
11925	.f531	a2 ff		ldx #$ff	                ldx #$FF
11926	.f533	a5 ec		lda $ec		                lda lastKeyPressedInternal
11927	.f535	05 ed		ora $ed		                ora firstKeyPressedInternal
11928	.f537	d0 06		bne $f53f	                bne +                    ;taken if any keys pressed
11929	.f539	a9 81		lda #$81	                lda #$81
11930	.f53b	8d 4e fe	sta $fe4e	                sta systemVIA.ier            ;re-enable keyboard IRQ
11931	.f53e	e8		inx		                inx                          ;X=0
11932	.f53f					+
11933	.f53f	8e 42 02	stx $0242	                stx keyboardSemaphore
11934	.f542					updateKeyboardLEDs:
11935	.f542	08		php		                php
11936	.f543	ad 5a 02	lda $025a	                lda keyboardStatusByte
11937	.f546	4a		lsr a		                lsr a

11939						                ; bit 3 = caps lock off
11940						                ; bit 4 = shift lock off
11941	.f547	29 18		and #$18	                and #(keyboardStatusByte.capsLockDisengaged|keyboardStatusByte.shiftLockDisengaged)>>1
11942	.f549	09 06		ora #$06	                ora #$06                     ;latch B6 - caps lock
11943	.f54b	8d 40 fe	sta $fe40	                sta systemVIA.orb            ;update caps lock LED
11944	.f54e	4a		lsr a		                lsr a                        ;bit 3 = shift lock off
11945	.f54f	09 07		ora #$07	                ora #$07                     ;latch B7 - shift lock
11946	.f551	8d 40 fe	sta $fe40	                sta systemVIA.orb            ;update shift lock LED
11947	.f554	20 b8 f7	jsr $f7b8	                jsr enableKeyboardScanning
11948	.f557	68		pla		                pla
11949	.f558	60		rts		                rts

11951						; KEYV handler
11952						; ============
11953	.f559					keyEntryPoint:
11954	.f559	50 0a		bvc $f565	                bvc keyVClear
11955	.f55b	a9 01		lda #$01	                lda #$01
11956	.f55d	8d 4e fe	sta $fe4e	                sta systemVIA.ier
11957	.f560	b0 08		bcs $f56a	                bcs keyboardTimerInterrupt
11958	.f562	4c 01 f7	jmp $f701	                jmp keyPressedInterrupt

11960	.f565					keyVClear:
11961	.f565	90 06		bcc $f56d	                bcc keyTestSHIFTAndCTRLOrTimerInterrupt
11962	.f567	4c b2 f7	jmp $f7b2	                jmp scanKeyboard

11964	.f56a					keyboardTimerInterrupt:
11965	.f56a	ee 42 02	inc $0242	                inc keyboardSemaphore

11967						;-------------------------------------------------------------------------
11968						;
11969						; Test Shift & Ctrl keys, or deal with timer interrupt.
11970						;
11971						; Entry: C=0 if KEYV V=0 C=0 - test SHIFT+CTRL keys
11972						;        C=1 if KEYV V=1 C=1 - keyboard timer interrupt
11973						;
11974	.f56d					keyTestSHIFTAndCTRLOrTimerInterrupt:
11975	.f56d	ad 5a 02	lda $025a	                lda keyboardStatusByte
11976	.f570	29 b7		and #$b7	                and #~(keyboardStatusByte.shiftPressed|keyboardStatusByte.ctrlPressed)
11977	.f572	a2 00		ldx #$00	                ldx #key_shift
11978	.f574	20 1c f7	jsr $f71c	                jsr interrogateKeyboard      ;X=$80 if SHIFT pressed
11979	.f577	90 02		bcc $f57b	                bcc +                        ;taken if testing
11980						                                             ;SHIFT+CTRL only
11981	.f579	86 fa		stx $fa		                stx SEIWKA                   ;b7 set if SHIFT pressed
11982	.f57b					+
11983	.f57b	b8		clv		                clv                        ;V=0
11984	.f57c	10 05		bpl $f583	                bpl testCTRL               ;taken if SHIFT not pressed
11985	.f57e	2c 70 e3	bit $e370	                bit valueFF                ;V=1 N=1
11986	.f581	09 08		ora #$08	                ora #keyboardStatusByte.shiftPressed
11987	.f583					testCTRL:
11988	.f583	e8		inx		                inx                          ;X=1 - key_ctrl
11989	.f584	20 1c f7	jsr $f71c	                jsr interrogateKeyboard
11990	.f587	90 b9		bcc $f542	                bcc updateKeyboardLEDs ;taken if testing SHIFT+CTRL only
11991	.f589	10 02		bpl $f58d	                bpl updateKeyboardStatusByte ;taken if CTRL not pressed
11992	.f58b	09 40		ora #$40	                ora #keyboardStatusByte.ctrlPressed
11993	.f58d					updateKeyboardStatusByte:
11994	.f58d	8d 5a 02	sta $025a	                sta keyboardStatusByte
11995	.f590	a6 ec		ldx $ec		                ldx lastKeyPressedInternal
11996	.f592	f0 4d		beq $f5e1	                beq braRolloverChecks        ;taken if no key pressed
11997	.f594	20 1c f7	jsr $f71c	                jsr interrogateKeyboard      ;still pressed?
11998	.f597	30 0d		bmi $f5a6	                bmi checkForKeyAutoRepeat    ;taken if still pressed
11999	.f599	e4 ec		cpx $ec		                cpx lastKeyPressedInternal   ;X=0 at this point
12000	.f59b					storeLastKeyPressed:
12001	.f59b	86 ec		stx $ec		                stx lastKeyPressedInternal   ;update last key pressed
12002	.f59d	d0 42		bne $f5e1	                bne braRolloverChecks  ;taken if still nothing pressed
12003	.f59f	64 ec		stz $ec		                stz lastKeyPressedInternal   ;reset last key pressed
12004	.f5a1					resetAutoRepeatAndContinue:
12005	.f5a1	20 11 f7	jsr $f711	                jsr resetAutoRepeatCounters
12006	.f5a4	80 3b		bra $f5e1	                bra braRolloverChecks

12008	.f5a6					checkForKeyAutoRepeat:
12009	.f5a6	e4 ec		cpx $ec		                cpx lastKeyPressedInternal
12010	.f5a8	d0 f1		bne $f59b	                bne storeLastKeyPressed      ;taken if new key pressed
12011	.f5aa	a5 e7		lda $e7		                lda autoRepeatCountdownTimer
12012	.f5ac	f0 33		beq $f5e1	                beq braRolloverChecks      ;taken if countdown timer 0
12013	.f5ae	c6 e7		dec $e7		                dec autoRepeatCountdownTimer ;timer--
12014	.f5b0	d0 2f		bne $f5e1	                bne braRolloverChecks        ;taken if timer newly 0
12015	.f5b2	ad ca 02	lda $02ca	                lda keyboardFirstAutoRepeatCount
12016	.f5b5	85 e7		sta $e7		                sta autoRepeatCountdownTimer
12017	.f5b7	ad 55 02	lda $0255	                lda keyboardAutoRepeatRate
12018	.f5ba	8d ca 02	sta $02ca	                sta keyboardFirstAutoRepeatCount
12019	.f5bd	ad 5a 02	lda $025a	                lda keyboardStatusByte
12020	.f5c0	a6 ec		ldx $ec		                ldx lastKeyPressedInternal
12021	.f5c2	e0 d0		cpx #$d0	                cpx #$80|key_shift_lock
12022	.f5c4	f0 12		beq $f5d8	                beq shiftLockPressed
12023	.f5c6	e0 c0		cpx #$c0	                cpx #$80|key_caps_lock
12025	.f5c8	d0 1a		bne $f5e4	                bne LF5E5_511
12029	.f5ca					capsLockPressed:
12030	.f5ca	09 a0		ora #$a0	                ora #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
12031	.f5cc	24 fa		bit $fa		                bit SEIWKA                   ;test SHIFT status
12032	.f5ce	10 04		bpl $f5d4	                bpl +                        ;taken if SHIFT not pressed
12033						                ; Do the SHIFT+CAPS LOCK thing
12034	.f5d0	09 10		ora #$10	                ora #keyboardStatusByte.capsLockDisengaged
12035	.f5d2	49 80		eor #$80	                eor #keyboardStatusByte.shiftEnabled
12036	.f5d4					+
12037	.f5d4	49 90		eor #$90	                eor #keyboardStatusByte.shiftEnabled|keyboardStatusByte.capsLockDisengaged
12038	.f5d6	80 04		bra $f5dc	                bra resetKeyboardStatusAndTimer

12040	.f5d8					shiftLockPressed:
12041	.f5d8	09 90		ora #$90	                ora #keyboardStatusByte.shiftEnabled|keyboardStatusByte.capsLockDisengaged
12042	.f5da	49 a0		eor #$a0	                eor #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
12043	.f5dc					resetKeyboardStatusAndTimer:
12044	.f5dc	8d 5a 02	sta $025a	                sta keyboardStatusByte
12045	.f5df	64 e7		stz $e7		                stz autoRepeatCountdownTimer
12046	.f5e1					braRolloverChecks:
12050	.f5e1	4c e1 f6	jmp $f6e1	                jmp keyboardRolloverChecks

12053						;-------------------------------------------------------------------------

12056	.f5e4					LF5E5_511:
12057	.f5e4	2c 3d 02	bit $023d	                bit keyboardTranslationTableAddress+1
12058	.f5e7	30 1e		bmi $f607	                bmi getASCIICode
12059	.f5e9	da		phx		                phx
12060	.f5ea	da		phx		                phx
12061	.f5eb	7a		ply		                ply
12062	.f5ec	a2 30		ldx #$30	                ldx #romServiceCall30
12063	.f5ee	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
12064	.f5f1	d0 13		bne $f606	                bne LF607
12065	.f5f3	fa		plx		                plx
12066	.f5f4	98		tya		                tya
12067	.f5f5	6a		ror a		                ror a
12068	.f5f6	6a		ror a		                ror a
12069	.f5f7	90 02		bcc $f5fb	                bcc LF5FC
12070	.f5f9	64 e7		stz $e7		                stz autoRepeatCountdownTimer
12071	.f5fb					LF5FC:
12072	.f5fb	30 e4		bmi $f5e1	                bmi braRolloverChecks
12073	.f5fd	ad 3c 02	lda $023c	                lda keyboardTranslationTableAddress+0
12074	.f600	2c 3d 02	bit $023d	                bit keyboardTranslationTableAddress+1
12078	.f603	4c cb f6	jmp $f6cb	                jmp LF6A8

12081	.f606					LF607:
12082	.f606	fa		plx		                plx
12084						;-------------------------------------------------------------------------
12085						;
12086						; Convert internal key number (with bit 7 set) to ASCII code, taking
12087						; into account state of CTRL, SHIFT, CAPS LOCK and SHIFT LOCK.
12088						;
12089	.f607					getASCIICode:
12090						                ; -$80 to adjust for bit 7 set; -16 because
12091						                ; interesting keys start at 16
12092	.f607	bd 9e f6	lda $f69e,x	                lda keyTranslationTable-$80-16,x
12094	.f60a	ae 7d 02	ldx $027d	                ldx editKeysMode
12095	.f60d	e0 03		cpx #$03	                cpx #3
12096	.f60f	d0 08		bne $f619	                bne LF5E5
12097	.f611	c9 8b		cmp #$8b	                cmp #$8b
12098	.f613	90 04		bcc $f619	                bcc LF5E5
12099	.f615	c9 90		cmp #$90	                cmp #$90
12100	.f617	90 c8		bcc $f5e1	                bcc braRolloverChecks
12101	.f619					LF5E5:
12102	.f619	48		pha		                pha
12103	.f61a	c9 1b		cmp #$1b	                cmp #27
12104	.f61c	d0 05		bne $f623	                bne LF5EF
12105	.f61e	a9 07		lda #$07	                lda #7
12106	.f620	1c 5a 02	trb $025a	                trb keyboardStatusByte
12107	.f623					LF5EF:
12108	.f623	68		pla		                pla
12110	.f624	f0 08		beq $f62e	                beq handleTAB                ;taken if TAB
12111	.f626	c9 9d		cmp #$9d	                cmp #$9D                     ;was it key_numpad_return?
12115	.f628	d0 07		bne $f631	                bne LF5FD

12118						                ;Transform $9d into $8d, aka 13|$80. ($8d is already
12119						                ; used in the table for right arrow.)
12120	.f62a	49 10		eor #$10	                eor #$10
12121	.f62c	80 31		bra $f65f	                bra getNumpadASCIICode

12123	.f62e					handleTAB:
12124	.f62e	ad 6b 02	lda $026b	                lda tabKeyCode
12126	.f631					LF5FD:
12127	.f631	c9 01		cmp #$01	                cmp #1
12128	.f633	d0 1e		bne $f653	                bne LF61F
12129	.f635	ad 5a 02	lda $025a	                lda keyboardStatusByte
12130	.f638	29 f8		and #$f8	                and #$f8
12131	.f63a	8d 5a 02	sta $025a	                sta keyboardStatusByte
12132	.f63d	a2 01		ldx #$01	                ldx #1
12133	.f63f	89 08		bit #$08	                bit #keyboardStatusByte.shiftPressed
12134	.f641	f0 01		beq $f644	                beq LF610
12135	.f643	e8		inx		                inx
12136	.f644					LF610:
12137	.f644	89 40		bit #$40	                bit #keyboardStatusByte.ctrlPressed
12138	.f646	f0 02		beq $f64a	                beq LF616
12139	.f648	e8		inx		                inx
12140	.f649	e8		inx		                inx
12141	.f64a					LF616:
12142	.f64a	8a		txa		                txa
12143	.f64b	0d 5a 02	ora $025a	                ora keyboardStatusByte
12144	.f64e	8d 5a 02	sta $025a	                sta keyboardStatusByte
12145	.f651	80 8e		bra $f5e1	                bra braRolloverChecks

12147	.f653					LF61F:
12148	.f653	2c 70 e3	bit $e370	                bit valueFF
12149	.f656	c9 90		cmp #$90	                cmp #$90
12150	.f658	90 01		bcc $f65b	                bcc handleKey
12151	.f65a	b8		clv		                clv
12159	.f65b					handleKey:
12160	.f65b	c9 a0		cmp #$a0	                cmp #$A0                     ;numpad key?
12161	.f65d	90 0e		bcc $f66d	                bcc processModifiers         ;taken if not
12162	.f65f					getNumpadASCIICode:
12164	.f65f	08		php		                php
12166						                ; C=1 at this point
12167	.f660	e9 31		sbc #$31	                sbc #'0'+1      ;+1 to compensate for C=1 in the next
12168						                                ;addition
12169	.f662	6d 7e 02	adc $027e	                adc numericKeypadInterpretation ;form actual ASCII value
12171	.f665	28		plp		                plp
12173	.f666	49 80		eor #$80	                eor #$80                     ;clear bit 7
12174	.f668	ae 8e 02	ldx $028e	                ldx numericKeypadShiftEffect ;does SHIFT affect the
12175						                                             ;keypad?
12176	.f66b	d0 46		bne $f6b3	                bne LF839                    ;taken if no
12177	.f66d					processModifiers:
12178	.f66d	ae 5a 02	ldx $025a	                ldx keyboardStatusByte
12179	.f670	86 fa		stx $fa		                stx SEIWKA
12180	.f672	26 fa		rol $fa		                rol SEIWKA                  ;b7 = ctrlPressed
12181	.f674	10 0a		bpl $f680	                bpl testShiftLock           ;taken if ctrl not pressed
12182	.f676	a6 ed		ldx $ed		                ldx firstKeyPressedInternal
12183	.f678					localResetAutoRepeatAndContinue:
12188	.f678	f0 03		beq $f67d	                beq +
12189	.f67a	4c a1 f5	jmp $f5a1	                jmp resetAutoRepeatAndContinue
12190	.f67d					+
12191	.f67d	20 fc f3	jsr $f3fc	                jsr implementCTRLCodes
12193	.f680					testShiftLock:
12194	.f680	26 fa		rol $fa		                rol SEIWKA                   ;b7 = shiftLockDisengaged
12195	.f682	30 07		bmi $f68b	                bmi testCapsLock             ;taken if shift lock off
12196	.f684	20 d2 f3	jsr $f3d2	                jsr implementShift           ;shift lock on - apply shift
12197	.f687	26 fa		rol $fa		                rol SEIWKA                   ;b7 = capsLockDisengaged
12198	.f689	80 0c		bra $f697	                bra testShiftEnabled

12200	.f68b					testCapsLock:
12201	.f68b	26 fa		rol $fa		                rol SEIWKA                   ;b7 = capsLockDisengaged
12202	.f68d	30 0d		bmi $f69c	                bmi testShift                ;taken if caps lock off
12203	.f68f	20 9c eb	jsr $eb9c	                jsr isLetter
12204	.f692	b0 08		bcs $f69c	                bcs testShift                ;taken if not a letter
12205	.f694	20 d2 f3	jsr $f3d2	                jsr implementShift ;letter + caps lock - make upper case
12206	.f697					testShiftEnabled:
12207	.f697	ae 5a 02	ldx $025a	                ldx keyboardStatusByte       ;b7 = shiftEnabled
12208	.f69a	10 0b		bpl $f6a7	                bpl testEscape               ;taken if not shiftEnabled
12209	.f69c					testShift:
12210	.f69c	26 fa		rol $fa		                rol SEIWKA                   ;b7 = shiftPressed
12211	.f69e	10 07		bpl $f6a7	                bpl testEscape               ;taken if not shiftPressed
12212	.f6a0	a6 ed		ldx $ed		                ldx firstKeyPressedInternal
12213	.f6a2	d0 d4		bne $f678	                bne localResetAutoRepeatAndContinue
12214	.f6a4	20 d2 f3	jsr $f3d2	                jsr implementShift
12215	.f6a7					testEscape:
12216	.f6a7	cd 6c 02	cmp $026c	                cmp escapeCharacter
12217	.f6aa	d0 07		bne $f6b3	                bne LF839
12218	.f6ac	ae 75 02	ldx $0275	                ldx escapeKeyStatus
12219	.f6af	d0 02		bne $f6b3	                bne LF839
12220	.f6b1	64 e7		stz $e7		                stz autoRepeatCountdownTimer

12222	.f6b3					LF839:

12254	.f6b3	48		pha		                pha
12255	.f6b4	ad 5a 02	lda $025a	                lda keyboardStatusByte
12256	.f6b7	29 07		and #$07	                and #7
12257	.f6b9	aa		tax		                tax
12261	.f6ba	1c 5a 02	trb $025a	                trb keyboardStatusByte
12262	.f6bd	68		pla		                pla
12263	.f6be	48		pha		                pha
12264	.f6bf	ca		dex		                dex

12275	.f6c0					LF693:
12276	.f6c0	ca		dex		                dex

12287	.f6c1					LF699:
12288	.f6c1	ca		dex		                dex

12299	.f6c2					LF69F:
12300	.f6c2	ca		dex		                dex
12304	.f6c3	d0 05		bne $f6ca	                bne LF6A7
12306	.f6c5	68		pla		                pla
12307	.f6c6	09 80		ora #$80	                ora #$80
12308	.f6c8	80 06		bra $f6d0	                bra LF6AD

12320	.f6ca					LF6A7:
12322	.f6ca	68		pla		                pla
12323	.f6cb					LF6A8:
12325	.f6cb	a8		tay		                tay
12326	.f6cc	50 02		bvc $f6d0	                bvc LF6AD
12327	.f6ce	d0 06		bne $f6d6	                bne LF6B3
12328	.f6d0					LF6AD:
12329	.f6d0	20 4e f8	jsr $f84e	                jsr insertCharacterIntoKeyboardBufferIfPossible
12330	.f6d3	90 09		bcc $f6de	                bcc LF6BB
12331	.f6d5	a8		tay		                tay

12333	.f6d6					LF6B3:
12334	.f6d6	ad 59 02	lda $0259	                lda keyboardStatus
12335	.f6d9	d0 03		bne $f6de	                bne LF6BB
12336	.f6db	20 a9 eb	jsr $eba9	                jsr insertCharacterIntoKeyboardBuffer
12337	.f6de					LF6BB:
12338	.f6de	20 42 f8	jsr $f842	                jsr enableKeyboardScanningFlippingInterrupts

12342	.f6e1					keyboardRolloverChecks:
12343	.f6e1	a6 ed		ldx $ed		                ldx firstKeyPressedInternal
12344	.f6e3	f0 09		beq $f6ee	                beq LF852                    ;taken if 1 key down
12345	.f6e5	20 1c f7	jsr $f71c	                jsr interrogateKeyboard      ;test first key pressed
12346	.f6e8	86 ed		stx $ed		                stx firstKeyPressedInternal  ;save it
12347	.f6ea	30 18		bmi $f704	                bmi LF868                    ;taken if still pressed
12348	.f6ec	64 ed		stz $ed		                stz firstKeyPressedInternal  ;reset first key
12349	.f6ee					LF852:
12350	.f6ee	a0 ec		ldy #$ec	                ldy #lastKeyPressedInternal
12351	.f6f0	20 08 f8	jsr $f808	                jsr scanKeyboardWithExclusion
12352	.f6f3	30 09		bmi $f6fe	                bmi LF862
12353	.f6f5	a5 ec		lda $ec		                lda lastKeyPressedInternal
12354	.f6f7	85 ed		sta $ed		                sta firstKeyPressedInternal
12355	.f6f9					updateLastKeyPressedInternal:
12356	.f6f9	86 ec		stx $ec		                stx lastKeyPressedInternal
12357	.f6fb	20 11 f7	jsr $f711	                jsr resetAutoRepeatCounters
12358	.f6fe					LF862:
12359	.f6fe	4c 31 f5	jmp $f531	                jmp tidyUpAfterKeyboardProcessing

12361	.f701					keyPressedInterrupt:
12362	.f701	20 1c f7	jsr $f71c	                jsr interrogateKeyboard
12363	.f704					LF868:
12364	.f704	a5 ec		lda $ec		                lda lastKeyPressedInternal
12365	.f706	d0 f6		bne $f6fe	                bne LF862
12366	.f708	a0 ed		ldy #$ed	                ldy #firstKeyPressedInternal
12367	.f70a	20 08 f8	jsr $f808	                jsr scanKeyboardWithExclusion
12368	.f70d	30 ef		bmi $f6fe	                bmi LF862
12369	.f70f	80 e8		bra $f6f9	                bra updateLastKeyPressedInternal

12371	.f711					resetAutoRepeatCounters:
12372	.f711	a2 01		ldx #$01	                ldx #$01
12373	.f713	86 e7		stx $e7		                stx autoRepeatCountdownTimer
12374	.f715	ae 54 02	ldx $0254	                ldx keyboardAutoRepeatDelay
12375	.f718	8e ca 02	stx $02ca	                stx keyboardFirstAutoRepeatCount
12376	.f71b	60		rts		                rts

12378						;-------------------------------------------------------------------------
12379						;
12380						; Read a single key's state from the keyboard
12381						;
12382						; Entry:
12383						;
12384						; X = key to test
12385						;
12386						; Exit:
12387						;
12388						; X=$80, N=1 if key pressed; X=$00, N=0 if key not pressed
12389						;
12390						; Preserves: A/C
12391						;
12396	.f71c					interrogateKeyboard:
12397	.f71c	a0 03		ldy #$03	                ldy #$03                     ;write to keyboard
12398	.f71e	8c 40 fe	sty $fe40	                sty systemVIA.orb
12399	.f721	a0 7f		ldy #$7f	                ldy #$7F
12400	.f723	8c 43 fe	sty $fe43	                sty systemVIA.ddra           ;bit 7=input, bits 6-0=output
12401	.f726	8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake ;store key value
12402	.f729	ea		nop		                nop
12403	.f72a	ae 4f fe	ldx $fe4f	                ldx systemVIA.iraNoHandshake ;read key state
12404	.f72d	60		rts		                rts

12406						; Default keyboard table
12407						; ======================

12409	.f72e					keyTranslationTable:
12410	>f72e	71				                .text "q"                    ;10 q
12411	>f72f	33				                .byte "3"                    ;11 3
12412	>f730	34				                .byte "4"                    ;12 4
12413	>f731	35				                .byte "5"                    ;13 5
12414	>f732	84				                .byte $84                    ;14 f4
12415	>f733	38				                .text "8"                    ;15 8
12416	>f734	87				                .byte $87                    ;16 f7
12417	>f735	2d				                .text "-"                    ;17 minus
12418	>f736	5e				                .text "^"                    ;18 caret
12419	>f737	8c				                .byte $8C                    ;19 left
12420	>f738	b6				                .byte "6"|$80                ;1a numpad_6
12421	>f739	b7				                .byte "7"|$80                ;1b numpad_7
12422	.f73a					osbyte92:
12423	.f73a	bc 00 fc	ldy $fc00,x	                ldy $FC00,x                  ;1c 1d 1e
12424	.f73d	60		rts		                rts                          ;1f

12427	>f73e	80				                .byte $80                    ;20 f0
12428	>f73f	77				                .text "w"                    ;21 w
12429	>f740	65				                .text "e"                    ;22 e
12430	>f741	74				                .text "t"                    ;23 t
12431	>f742	37				                .text "7"                    ;24 7
12432	>f743	69				                .text "i"                    ;25 i
12433	>f744	39				                .text "9"                    ;26 9
12434	>f745	30				                .text "0"                    ;27 0
12435	>f746	5f				                .text "_"                    ;28 underline
12436	>f747	8e				                .byte $8E                    ;29 down
12437	>f748	b8				                .byte "8"|$80                ;2a numpad_8
12438	>f749	b9				                .byte "9"|$80                ;2b numpad_9
12439	.f74a					osbyte94:
12440	.f74a	bc 00 fd	ldy $fd00,x	                ldy $FD00,x                  ;2c 2d 2e
12441	.f74d	60		rts		                rts                          ;2f

12444	>f74e	31				                .text "1"                    ;30 1
12445	>f74f	32				                .text "2"                    ;31 2
12446	>f750	64				                .text "d"                    ;32 d
12447	>f751	72				                .text "r"                    ;33 r
12448	>f752	36				                .text "6"                    ;34 6
12449	>f753	75				                .text "u"                    ;35 u
12450	>f754	6f				                .text "o"                    ;36 o
12451	>f755	70				                .text "p"                    ;37 p
12452	>f756	5b				                .text "["                    ;38 left_square_bracket
12453	>f757	8f				                .byte $8F                    ;39 up
12454	>f758	ab				                .byte "+"|$80                ;3a numpad_plus
12455	>f759	ad				                .byte "-"|$80                ;3b numpad_minus
12456	>f75a	9d				                .byte $9D                    ;3c numpad_return
12457	.f75b					LF8BF:
12458	.f75b	6c 20 02	jmp ($0220)	                jmp (EVENTV)                 ;3d 3e 3f
12460	>f75e	01				                .byte 1                      ;40 caps_lock
12461	>f75f	61				                .text "a"                    ;41 a
12462	>f760	78				                .text "x"                    ;42 x
12463	>f761	66				                .text "f"                    ;43 f
12464	>f762	79				                .text "y"                    ;44 y
12465	>f763	6a				                .text "j"                    ;45 j
12466	>f764	6b				                .text "k"                    ;46 k
12470	>f765	01				                .byte 1                      ;47 special
12472	>f766	3a				                .text ":"                    ;48 colon
12473	>f767	0d				                .byte $0D                    ;49 return
12474	>f768	af				                .byte "/"|$80                ;4a numpad_divide
12475	>f769	ff				                .byte 127|$80                ;4b numpad_delete
12476	>f76a	ae				                .byte "."|$80                ;4c numpad_stop
12477	.f76b					call1MHzBusHook:
12478	.f76b	6c fe fd	jmp ($fdfe)	                jmp ($FDFE)                  ;4d 4e 4f

12481	>f76e	02				                .byte 2                      ;50 shift_lock
12482	>f76f	73				                .text "s"                    ;51 s
12483	>f770	63				                .text "c"                    ;52 c
12484	>f771	67				                .text "g"                    ;53 g
12485	>f772	68				                .text "h"                    ;54 h
12486	>f773	6e				                .text "n"                    ;55 n
12487	>f774	6c				                .text "l"                    ;56 l
12488	>f775	3b				                .text ";"                    ;57 semicolon
12489	>f776	5d				                .text "]"                    ;58 right_square_bracket
12490	>f777	7f				                .byte $7F                    ;59 delete
12491	>f778	a3				                .byte "#"|$80                ;5a numpad_hash
12492	>f779	aa				                .byte "*"|$80                ;5b numpad_multiply
12493	>f77a	ac				                .byte ","|$80                ;5c numpad_comma
12494	.f77b					callSEIWKA:
12495	.f77b	6c fa 00	jmp ($00fa)	                jmp (SEIWKA)                 ;5d 5e 5f
12497	>f77e	00				                .byte 0                      ;60 tab
12498	>f77f	7a				                .text "z"                    ;61 z
12499	>f780	20				                .text " "                    ;62 space
12500	>f781	76				                .text "v"                    ;63 v
12501	>f782	62				                .text "b"                    ;64 b
12502	>f783	6d				                .text "m"                    ;65 m
12503	>f784	2c				                .text ","                    ;66 comma
12504	>f785	2e				                .text "."                    ;67 stop
12505	>f786	2f				                .text "/"                    ;68 divide
12506	>f787	8b				                .byte $8B                    ;69 copy
12507	>f788	b0				                .byte "0"|$80                ;6a numpad_0
12508	>f789	b1				                .byte "1"|$80                ;6b numpad_1
12509	>f78a	b3				                .byte "3"|$80                ;6c numpad_3
12510	>f78b	00				                .byte 0                      ;6d
12511	>f78c	00				                .byte 0                      ;6e
12512	>f78d	00				                .byte 0                      ;6f
12514	>f78e	1b				                .byte 27                     ;70 escape
12515	>f78f	81				                .byte $81                    ;71 f1
12516	>f790	82				                .byte $82                    ;72 f2
12517	>f791	83				                .byte $83                    ;73 f3
12518	>f792	85				                .byte $85                    ;74 f5
12519	>f793	86				                .byte $86                    ;75 f6
12520	>f794	88				                .byte $88                    ;76 f8
12521	>f795	89				                .byte $89                    ;77 f9
12522	>f796	5c				                .byte $5C                    ;78 backslash
12523	>f797	8d				                .byte $8D                    ;79 right
12524	>f798	b4				                .byte "4"|$80                ;7a numpad_4
12525	>f799	b5				                .byte "5"|$80                ;7b numpad_5
12526	>f79a	b2				                .byte "2"|$80                ;7c numpad_2
12527	.f79b					LF8FF:
12528	.f79b	2c 70 e3	bit $e370	                bit valueFF                  ; Set V
12529	.f79e					callKEYV:
12530	.f79e	6c 28 02	jmp ($0228)	                jmp (KEYV)                   ; Jump to KEYV

12532						;-------------------------------------------------------------------------
12533						;
12534						; OSBYTE 131 (&83) - Read Operating System High Water Mark (OSHWM)
12535						;
12536						; MasRef D.2-40
12537						;
12538	.f7a1					osbyte83:
12539	.f7a1	ac 44 02	ldy $0244	                ldy oshwm
12540	.f7a4	a2 00		ldx #$00	                ldx #$00
12541	.f7a6	60		rts		                rts

12543						;-------------------------------------------------------------------------
12544						;
12545						; OSBYTE 120 ($78) - Write keys pressed information
12546						;
12547						; MasRef D.2-33
12548						;
12549	.f7a7					osbyte78:                          ;f90b
12550	.f7a7	84 ec		sty $ec		                sty lastKeyPressedInternal
12551	.f7a9	86 ed		stx $ed		                stx firstKeyPressedInternal
12552	.f7ab	60		rts		                rts

12554						;-------------------------------------------------------------------------
12555						;
12556						; OSBYTE 122 (&7A) Keyboard scan from 16 decimal
12557						;
12558						; MasRef D.2-36
12559						;
12564	.f7ac					osbyte7A:
12565	.f7ac	a2 10		ldx #$10	                ldx #$10
12566	.f7ae	b8		clv		                clv
12567	.f7af	38		sec		                sec
12568	.f7b0	80 ec		bra $f79e	                bra callKEYV

12570						;-------------------------------------------------------------------------

12572	.f7b2					scanKeyboard:
12573	.f7b2	8a		txa		                txa
12574	.f7b3	10 0a		bpl $f7bf	                bpl LF923
12575	.f7b5	20 1c f7	jsr $f71c	                jsr interrogateKeyboard
12576	.f7b8					enableKeyboardScanning:
12577	.f7b8	a9 0b		lda #$0b	                lda #8|3                     ;set latch B3 - auto scan mode
12578	.f7ba	8d 40 fe	sta $fe40	                sta systemVIA.orb            ;set auto scan mode
12579	.f7bd	8a		txa		                txa
12580	.f7be	60		rts		                rts

12582	.f7bf					LF923:
12583	.f7bf	8e cb 02	stx $02cb	                stx previousKeyPressedWhenReadingLastKey
12584	.f7c2	a9 ff		lda #$ff	                lda #$FF
12585	.f7c4	8d cc 02	sta $02cc	                sta previousKeyPressedWhenReadingFirstKey
12586	.f7c7	a2 0c		ldx #$0c	                ldx #$0C
12587	.f7c9	a9 7f		lda #$7f	                lda #$7F
12588	.f7cb	8d 43 fe	sta $fe43	                sta systemVIA.ddra
12589	.f7ce	a9 03		lda #$03	                lda #0|3            ;reset latch B3 - manual scan mode
12590	.f7d0	8d 40 fe	sta $fe40	                sta systemVIA.orb
12591	.f7d3					loopKeyboardColumns:
12592	.f7d3	a9 0f		lda #$0f	                lda #$0F
12593	.f7d5	8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;select a non-existent column
12594	.f7d8	a9 01		lda #$01	                lda #$01
12595	.f7da	8d 4d fe	sta $fe4d	                sta systemVIA.ifr            ;cancel keyboard interrupts
12596	.f7dd	8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake ;select column
12597	.f7e0	2c 4d fe	bit $fe4d	                bit systemVIA.ifr            ;any key in this column
12598						                                             ;pressed?
12599	.f7e3	f0 1b		beq $f800	                beq tryNextKeyboardColumn    ;taken if no key
12600	.f7e5	8a		txa		                txa                          ;A = first key in column
12601	.f7e6					loopKeyboardRows:
12602	.f7e6	18		clc		                clc
12603	.f7e7	69 10		adc #$10	                adc #$10                     ;next row
12604	.f7e9	30 15		bmi $f800	                bmi tryNextKeyboardColumn    ;taken if done
12605	.f7eb	8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;store key
12606	.f7ee	2c 4f fe	bit $fe4f	                bit systemVIA.iraNoHandshake ;pressed?
12607	.f7f1	10 f3		bpl $f7e6	                bpl loopKeyboardRows         ;taken if not
12608	.f7f3	cd cb 02	cmp $02cb	                cmp previousKeyPressedWhenReadingLastKey
12609	.f7f6	90 ee		bcc $f7e6	                bcc loopKeyboardRows
12610	.f7f8	cd cc 02	cmp $02cc	                cmp previousKeyPressedWhenReadingFirstKey
12611	.f7fb	b0 e9		bcs $f7e6	                bcs loopKeyboardRows
12612	.f7fd	8d cc 02	sta $02cc	                sta previousKeyPressedWhenReadingFirstKey
12613	.f800					tryNextKeyboardColumn:
12614	.f800	ca		dex		                dex
12615	.f801	10 d0		bpl $f7d3	                bpl loopKeyboardColumns
12616	.f803	ae cc 02	ldx $02cc	                ldx previousKeyPressedWhenReadingFirstKey
12617	.f806	80 b0		bra $f7b8	                bra enableKeyboardScanning

12619	.f808					scanKeyboardWithExclusion:
12620	.f808	a2 0c		ldx #$0c	                ldx #$0c
12621	.f80a					LF96E:
12622	.f80a	20 42 f8	jsr $f842	                jsr enableKeyboardScanningFlippingInterrupts
12623	.f80d	a9 7f		lda #$7f	                lda #$7F
12624	.f80f	8d 43 fe	sta $fe43	                sta systemVIA.ddra
12625	.f812	a9 03		lda #$03	                lda #0|3
12626	.f814	8d 40 fe	sta $fe40	                sta systemVIA.orb
12627	.f817	a9 0f		lda #$0f	                lda #$0F
12628	.f819	8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;select non-existent column
12629	.f81c	a9 01		lda #$01	                lda #$01
12630	.f81e	8d 4d fe	sta $fe4d	                sta systemVIA.ifr            ;cancel keyboard interrupts
12631	.f821	8e 4f fe	stx $fe4f	                stx systemVIA.oraNoHandshake
12632	.f824	2c 4d fe	bit $fe4d	                bit systemVIA.ifr
12633	.f827	f0 20		beq $f849	                beq LF9AD
12634	.f829	8a		txa		                txa
12635	.f82a					LF98E:
12636	.f82a	18		clc		                clc
12637	.f82b	69 10		adc #$10	                adc #$10
12638	.f82d	30 1a		bmi $f849	                bmi LF9AD                    ;taken if done
12639	.f82f	8d 4f fe	sta $fe4f	                sta systemVIA.oraNoHandshake ;test key
12640	.f832	2c 4f fe	bit $fe4f	                bit systemVIA.iraNoHandshake ;pressed?
12641	.f835	10 f3		bpl $f82a	                bpl LF98E                    ;taken if not
12642	.f837	48		pha		                pha                          ;save key number
12643	.f838					LF99C:
12644	.f838	59 00 00	eor $0000,y	                eor $0000,y                  ;compare to value
12645	.f83b	0a		asl a		                asl a                        ;discard irrelevant bit 7
12646	.f83c	c9 01		cmp #$01	                cmp #$01                     ;C set if different
12647	.f83e	68		pla		                pla                          ;restore key number
12648	.f83f	90 e9		bcc $f82a	                bcc LF98E                    ;same key found - keep going
12649	.f841	aa		tax		                tax
12650	.f842					enableKeyboardScanningFlippingInterrupts:
12651	.f842	20 b8 f7	jsr $f7b8	                jsr enableKeyboardScanning
12652	.f845	58		cli		                cli
12653	.f846	78		sei		                sei
12654	.f847	8a		txa		                txa
12655	.f848	60		rts		                rts

12657	.f849					LF9AD:
12658	.f849	ca		dex		                dex
12659	.f84a	10 be		bpl $f80a	                bpl LF96E
12660	.f84c	80 f4		bra $f842	                bra enableKeyboardScanningFlippingInterrupts

12662						;-------------------------------------------------------------------------

12668						;-------------------------------------------------------------------------

12671						                .include "insertCharacterIntoKeyboardBufferIfPossible.s65"

:17	;******  Processing file: src/insertCharacterIntoKeyboardBufferIfPossible.s65

1						                ; dup of what's called LF82B in MOS 5.00+
2	.f84e					insertCharacterIntoKeyboardBufferIfPossible:
3	.f84e	48		pha		                pha
4	.f84f	a2 00		ldx #$00	                ldx #bufferKeyboard          ; buffer number
5	.f851	b8		clv		                clv                          ; count buffer
6	.f852	38		sec		                sec                          ; return space remaining
7	.f853	20 b5 ed	jsr $edb5	                jsr countBufferViaCNPV       ; do the thing...
8	.f856	98		tya		                tya                          ; A=MSB of space remaining
9	.f857	d0 04		bne $f85d	                bne LF6E2              ; taken if >256 bytes remaining
10	.f859	e0 02		cpx #$02	                cpx #2                 ; X=LSB of space remaining
11	.f85b	90 0a		bcc $f867	                bcc LF6EC            ; taken if 1 or 0 bytes remaining
12	.f85d					LF6E2:
13	.f85d	ac 59 02	ldy $0259	                ldy keyboardStatus
14	.f860	18		clc		                clc                       ; assume char not inserted
15	.f861	d0 04		bne $f867	                bne LF6EC                 ; taken if keyboard disabled
16	.f863	20 a9 eb	jsr $eba9	                jsr insertCharacterIntoKeyboardBuffer
17	.f866	38		sec		                sec                          ; indicate char inserted
18	.f867					LF6EC:
19	.f867	68		pla		                pla
20	.f868	60		rts		                rts

:15	;******  Return to file: src/mos.s65

12674						;-------------------------------------------------------------------------

12676						                ; Ugly condition...
12678	.f869					transferBetweenSidewaysRAMAndRAM: .block
12679	.f869	20 ab e5	jsr $e5ab	                jsr selectROMA
12680	.f86c					transferBetweenSidewaysRAMAndRAMLoop:
12681	.f86c	b1 b0		lda ($b0),y	                lda (sramTransferPointers.src),y
12682	.f86e	91 b2		sta ($b2),y	                sta (sramTransferPointers.dest),y
12683	.f870	c8		iny		                iny
12684	.f871	d0 0d		bne $f880	                bne LF85D
12685	.f873	e6 b1		inc $b1		                inc sramTransferPointers.src+1
12686	.f875	e6 b3		inc $b3		                inc sramTransferPointers.dest+1
12687	.f877	20 a9 e5	jsr $e5a9	                jsr selectTerminalROM
12688	.f87a	20 4c 8d	jsr $8d4c	                jsr L8D0F
12689	.f87d	20 ab e5	jsr $e5ab	                jsr selectROMA
12690	.f880					LF85D:
12691	.f880	cc ef 02	cpy $02ef	                cpy sramWorkspace.length+0
12692	.f883	d0 e7		bne $f86c	                bne transferBetweenSidewaysRAMAndRAMLoop
12693	.f885	b5 01		lda $01,x	                lda 1,x
12694	.f887	cd f0 02	cmp $02f0	                cmp sramWorkspace.length+1
12695	.f88a	d0 e0		bne $f86c	                bne transferBetweenSidewaysRAMAndRAMLoop
12696	.f88c	4c a9 e5	jmp $e5a9	                jmp selectTerminalROM
12697						                .endblock

12700						;-------------------------------------------------------------------------

12703						                .include "sram_access_helpers_2.s65"

:18	;******  Processing file: src/sram_access_helpers_2.s65

1	.f88f					dummyROMHeader: .block
2	.f88f	60		rts		                rts
3	>f890	00 00				                .byte 0,0
4	.f892	60		rts		                rts
5	>f893	00 00				                .byte 0,0
6	>f895	02				                .byte romType6502
7	>f896	0c				                .byte copyright-dummyROMHeader
8	>f897	ff				                .byte $ff
9	>f898	52				                .text "R"
10	.f899					ram_or_rom_char:
11	>f899	41				                .text "A"
12	>f89a	4d				                .text "M"
13	.f89b					copyright:
14	>f89b	00				                .byte 0
15	>f89c	28 43 29			                .text "(C)"
16	=16					size=*-dummyROMHeader
17						                ; I doubt I've caught all the implied 16s...

20						                ; in any event, this ROM header must be <=16 bytes, as
21						                ; the total pseudo-addressable area has a o documented
22						                ; size of 4*(16384-16)
24						                .endblock

26	=32784					dataBankStart=$8000+16
27	=16368					dataBankSize=16384-16

29						;-------------------------------------------------------------------------
30						;
31						;
32	.f89f					initDummyROMHeader:
33	.f89f	20 9a e5	jsr $e59a	                jsr selectROMX
34	.f8a2	a0 0f		ldy #$0f	                ldy #size(dummyROMHeader)-1
35	.f8a4					LF881:
36	.f8a4	b9 8f f8	lda $f88f,y	                lda dummyROMHeader,y
37	.f8a7	99 00 80	sta $8000,y	                sta $8000,y
38	.f8aa	88		dey		                dey
39	.f8ab	10 f7		bpl $f8a4	                bpl LF881
40	.f8ad	2c ee 02	bit $02ee	                bit sramWorkspace.type
41	.f8b0	70 05		bvs $f8b7	                bvs LF894       ; taken if called by *SRDATA
42	.f8b2	a9 4f		lda #$4f	                lda #'O'
43	.f8b4	8d 0a 80	sta $800a	                sta $8000+(dummyROMHeader.ram_or_rom_char-dummyROMHeader)
44	.f8b7					LF894:
45	.f8b7	8e 01 80	stx $8001	                stx $8001
46	.f8ba	4c a9 e5	jmp $e5a9	                jmp selectTerminalROM

48						;-------------------------------------------------------------------------
49						;
50						; Check if a ROM bank is writeable.
51						;
52						; Entry:
53						;
54						; X = ROM bank of interest
55						;
56						; Exit:
57						;
58						; C=0 if ROM, C=1 if RAM
59						;
60						; Terminal ROM selected
61						;
62						; Preserves: X
63						;
64	.f8bd					isBankROM:
65	.f8bd	20 9a e5	jsr $e59a	                jsr selectROMX

67						                ; Modify the version number byte - if a valid
68						                ; writeable sideways ROM, don't leave it in a bad
69						                ; state if reset partway through (not much you can do
70						                ; for non-ROMs of course...)
71	.f8c0	ad 08 80	lda $8008	                lda $8008
72	.f8c3	a8		tay		                tay             ; Y = original value
73	.f8c4	49 ff		eor #$ff	                eor #$ff
74	.f8c6	78		sei		                sei
75	.f8c7	8d 08 80	sta $8008	                sta $8008       ; store modified value
76	.f8ca	cd 08 80	cmp $8008	                cmp $8008       ; did it take? Z=1 if RAM
77	.f8cd	8c 08 80	sty $8008	                sty $8008       ; restore original value
78	.f8d0	58		cli		                cli
79	.f8d1	f0 01		beq $f8d4	                beq jmpSelectTerminalROM ; taken if RAM
80	.f8d3	18		clc		                clc
81	.f8d4					jmpSelectTerminalROM:
82	.f8d4	4c a9 e5	jmp $e5a9	                jmp selectTerminalROM

84						;-------------------------------------------------------------------------

:15	;******  Return to file: src/mos.s65

12706						;-------------------------------------------------------------------------

12709	.f8d7					LF8B4:
12710	.f8d7	20 9a e5	jsr $e59a	                jsr selectROMX
12717	.f8da	a0 80		ldy #$80	                ldy #$80
12718	.f8dc	84 01		sty $01		                sty 1
12719	.f8de	64 00		stz $00		                stz 0
12721	.f8e0	a8		tay		                tay
12722	.f8e1					LF8BE:
12723	.f8e1	91 00		sta ($00),y	                sta (0),y
12724	.f8e3	c8		iny		                iny
12725	.f8e4	d0 fb		bne $f8e1	                bne LF8BE
12726	.f8e6	e6 01		inc $01		                inc 1
12727	.f8e8	24 01		bit $01		                bit 1
12728	.f8ea	50 f5		bvc $f8e1	                bvc LF8BE
12729	.f8ec	ca		dex		                dex
12730	.f8ed	e0 04		cpx #$04	                cpx #4
12731	.f8ef	b0 e6		bcs $f8d7	                bcs LF8B4
12732	.f8f1	4c a9 e5	jmp $e5a9	                jmp selectTerminalROM

12735						;-------------------------------------------------------------------------

12738						                .include "sram_access_helpers_3.s65"

:19	;******  Processing file: src/sram_access_helpers_3.s65

1	.f8f4					LF8D1:
2	.f8f4	ad ee 02	lda $02ee	                lda sramWorkspace.type
3	.f8f7	c9 a0		cmp #$a0	                cmp #$a0
4	.f8f9	d0 d9		bne $f8d4	                bne jmpSelectTerminalROM
5	.f8fb	ac f1 02	ldy $02f1	                ldy sramWorkspace.bank
6	.f8fe	98		tya		                tya
7	.f8ff	aa		tax		                tax
8	.f900	20 ab e3	jsr $e3ab	                jsr LE389
9	.f903	90 cf		bcc $f8d4	                bcc jmpSelectTerminalROM
10	.f905	ad 06 80	lda $8006	                lda $8006
11	.f908	9d a1 02	sta $02a1,x	                sta romInformationTable,x
12	.f90b	80 c7		bra $f8d4	                bra jmpSelectTerminalROM

:15	;******  Return to file: src/mos.s65

12741						;-------------------------------------------------------------------------

12744	.f90d					selectTerminalROMAndOSBYTE44:
12745	.f90d	20 61 f4	jsr $f461	                jsr withTerminalROM
12746	.f910	4c 19 8f	jmp $8f19	                jmp osbyte44

12749						;-------------------------------------------------------------------------

12752	.f913					selectTerminalROMAndOSBYTE45:
12753	.f913	20 61 f4	jsr $f461	                jsr withTerminalROM
12754	.f916	4c c9 8f	jmp $8fc9	                jmp osbyte45

12757						;-------------------------------------------------------------------------

12760	.f919					selectTerminalROMAndOSWORD42:
12761	.f919	20 61 f4	jsr $f461	                jsr withTerminalROM
12762	.f91c	4c 2f 8c	jmp $8c2f	                jmp osword42

12765						;-------------------------------------------------------------------------

12768	.f91f					selectTerminalROMAndOSWORD43:
12769	.f91f	20 61 f4	jsr $f461	                jsr withTerminalROM
12770	.f922	4c 6b 8e	jmp $8e6b	                jmp osword43

12773						;-------------------------------------------------------------------------

12779						;-------------------------------------------------------------------------
12780						;
12781						; OSBPUT [AUG p339]
12782						;
12783	.f925					osbputEntryPoint:
12784	.f925	20 0a fa	jsr $fa0a	                jsr selectFSForHandle
12785	.f928	6c 18 02	jmp ($0218)	                jmp (BPUTV)

12787						;-------------------------------------------------------------------------
12788						;
12789						; OSBGET [AUG p338]
12790						;
12791	.f92b					osbgetEntryPoint:
12792	.f92b	20 0a fa	jsr $fa0a	                jsr selectFSForHandle
12793	.f92e	6c 16 02	jmp ($0216)	                jmp (BGETV)

12795						;-------------------------------------------------------------------------
12796						;
12797						; OSGBPB [AUG p339]
12798						;
12799	.f931					osgbpbEntryPoint: .proc
12800	.f931	c9 05		cmp #$05	                cmp #gbpbGetMediaMetadata
12801	.f933	b0 15		bcs $f94a	                bcs nonFileOperation
12802	.f935	c9 00		cmp #$00	                cmp #$00
12803	.f937	f0 11		beq $f94a	                beq nonFileOperation

12805						                ; Handle OSGBPB call that's an operation on a file
12806						                ; handle. Select the appropriate FS, given the file
12807						                ; handle, and pass the request along.
12808	.f939	5a		phy		                phy                          ;save OSGBPB Y
12809	.f93a	48		pha		                pha                          ;save OSGBPB A
12810	.f93b	86 b0		stx $b0		                stx osgbpbWorkspace.ptr+0
12811	.f93d	84 b1		sty $b1		                sty osgbpbWorkspace.ptr+1
12812	.f93f	b2 b0		lda ($b0)	                lda (osgbpbWorkspace.ptr)    ;get file handle
12813	.f941	a8		tay		                tay
12814	.f942	68		pla		                pla                          ;restore OSGBPB A
12815	.f943	20 0a fa	jsr $fa0a	                jsr selectFSForHandle
12816	.f946					passToCurrentFS:
12817	.f946	7a		ply		                ply                          ;restore OSGBPB Y
12818	.f947	6c 1a 02	jmp ($021a)	                jmp (GBPBV)

12820						;-------------------------------------------------------------------------
12821						;
12822						; Handle OSGBPB call that isn't an operation on a file handle. Select
12823						; current FS and pass the request along.
12824						;
12825	.f94a					nonFileOperation:
12826	.f94a	5a		phy		                phy
12827	.f94b	da		phx		                phx
12828	.f94c	48		pha		                pha
12829	.f94d	20 47 ee	jsr $ee47	                jsr selectHAZEL
12830	.f950	ad 00 df	lda $df00	                lda hazel.currentFS
12831	.f953	20 c0 fa	jsr $fac0	                jsr selectFS
12832	.f956	68		pla		                pla
12833	.f957	fa		plx		                plx
12834	.f958	80 ec		bra $f946	                bra passToCurrentFS
12835						                .endproc

12837						;-------------------------------------------------------------------------
12838						;
12839						; OSARGS [AUG p337[
12840						;
12841						;
12842	.f95a					osargsEntryPoint: .proc
12843	.f95a	c0 00		cpy #$00	                cpy #$00
12844	.f95c	d0 2a		bne $f988	                bne fileOperation            ;taken if file operation
12845	.f95e	c9 04		cmp #$04	                cmp #$04
12846	.f960	b0 26		bcs $f988	                bcs fileOperation ;taken if Y=0, A>=4 - honorary file operation
12847	.f962	48		pha		                pha
12848	.f963	20 47 ee	jsr $ee47	                jsr selectHAZEL
12849	.f966	68		pla		                pla
12850	.f967	d0 04		bne $f96d	                bne notGetFS
12851	.f969					getFS:
12852						                ; OSARGS Y=0 A=0 - read current FS number
12853	.f969	ad 00 df	lda $df00	                lda hazel.currentFS
12854	.f96c	60		rts		                rts

12856	.f96d					notGetFS:
12857	.f96d	3a		dec a		                dec a
12858	.f96e	d0 10		bne $f980	                bne notGetCommandLine
12859	.f970					getCommandLine:
12860						                ; OSARGS Y=0 A=1 - read command line tail address
12861	.f970	3a		dec a		                dec a                        ;A=$ff
12862	.f971	95 02		sta $02,x	                sta 2,x                    ;store full 32-bit address
12863	.f973	95 03		sta $03,x	                sta 3,x                    ;store full 32-bit address
12864	.f975	ad 04 df	lda $df04	                lda hazel.commandLinePointer+0
12865	.f978	95 00		sta $00,x	                sta 0,x                    ;
12866	.f97a	ad 05 df	lda $df05	                lda hazel.commandLinePointer+1
12867	.f97d	95 01		sta $01,x	                sta 1,x
12868	.f97f	60		rts		                rts

12870	.f980					notGetCommandLine:
12871	.f980	c9 01		cmp #$01	                cmp #argsCheckANFS-1    ;-1 due to the dec a above
12872	.f982	f0 03		beq $f987	                beq rtsFA14            ; OSARGS Y=0 A=2 - Read OldNFS flag
12873	.f984					getLibFS:
12874	.f984	ad 02 df	lda $df02	                lda hazel.libFS      ;OSARGS Y=0 A=3 - Read libfs filing system number
12875	.f987					rtsFA14:
12876	.f987	60		rts		                rts

12878	.f988					fileOperation:
12879						                ; Operating on a file. Select appropriate FS first.
12880	.f988	20 0a fa	jsr $fa0a	                jsr selectFSForHandle
12881						                .endproc

12884						;-------------------------------------------------------------------------
12885						;
12886						; Call current FS's OSARGS routine, bypassing the FileSwitch stuff.
12887						;
12888	.f98b					callARGSV:                      ;fa18
12889	.f98b	6c 14 02	jmp ($0214)	                jmp (ARGSV)

12891						;-------------------------------------------------------------------------
12892						;
12893						; OSFIND [AUG p342]
12894						;
12895	.f98e					osfindEntryPoint: .proc
12896	.f98e	09 00		ora #$00	                ora #$00        ;A=$00 if a file is to be closed
12897	.f990	f0 05		beq $f997	                beq close       ;branch taken if closing a file
12898	.f992	20 e1 f9	jsr $f9e1	                jsr parseFileNameAndSelectFS       ;handle something other than a file close
12899	.f995	80 03		bra $f99a	                bra callFINDV

12901	.f997					close:
12902	.f997	20 0a fa	jsr $fa0a	                jsr selectFSForHandle
12903	.f99a					callFINDV:
12904	.f99a	6c 1c 02	jmp ($021c)	                jmp (FINDV)
12905						                .pend

12907						;-------------------------------------------------------------------------
12908						;
12909						; OSFILE [AUG p335]
12910						;
12911	.f99d					osfileEntryPoint:               ;fa2a
12912	.f99d	da		phx		                phx
12913	.f99e	5a		phy		                phy
12914	.f99f	48		pha		                pha
12915	.f9a0	86 f2		stx $f2		                stx stringInputBufferAddress+0
12916	.f9a2	84 f3		sty $f3		                sty stringInputBufferAddress+1
12917	.f9a4	a0 11		ldy #$11	                ldy #size(OSFILEParameterBlock)-1
12918	.f9a6					-
12919	.f9a6	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
12920	.f9a8	99 ed 02	sta $02ed,y	                sta osfileParameterBlock,y
12921	.f9ab	88		dey		                dey
12922	.f9ac	10 f8		bpl $f9a6	                bpl -
12923	.f9ae	ae ed 02	ldx $02ed	                ldx osfileParameterBlock+OSFILEParameterBlock.fileName+0
12924	.f9b1	ac ee 02	ldy $02ee	                ldy osfileParameterBlock+OSFILEParameterBlock.fileName+1
12925	.f9b4	20 e1 f9	jsr $f9e1	                jsr parseFileNameAndSelectFS
12926	.f9b7	8e ed 02	stx $02ed	                stx osfileParameterBlock+OSFILEParameterBlock.fileName+0
12927	.f9ba	8c ee 02	sty $02ee	                sty osfileParameterBlock+OSFILEParameterBlock.fileName+1
12928	.f9bd	68		pla		                pla
12929	.f9be	a2 ed		ldx #$ed	                ldx #<osfileParameterBlock
12930	.f9c0	a0 02		ldy #$02	                ldy #>osfileParameterBlock
12931	.f9c2	20 de f9	jsr $f9de	                jsr callFILEV
12932	.f9c5	7a		ply		                ply
12933	.f9c6	84 f3		sty $f3		                sty stringInputBufferAddress+1
12934	.f9c8	fa		plx		                plx
12935	.f9c9	86 f2		stx $f2		                stx stringInputBufferAddress+0
12936	.f9cb	48		pha		                pha
12937	.f9cc	a0 11		ldy #$11	                ldy #size(OSFILEParameterBlock)-1
12938	.f9ce					-
12939	.f9ce	b9 ed 02	lda $02ed,y	                lda osfileParameterBlock,y
12940	.f9d1	91 f2		sta ($f2),y	                sta (stringInputBufferAddress),y
12941	.f9d3	88		dey		                dey
12942	.f9d4	c0 02		cpy #$02	                cpy #$02                     ;don't overwrite file name
12943	.f9d6	b0 f6		bcs $f9ce	                bcs -
12944	.f9d8	68		pla		                pla
12945	.f9d9	a6 f2		ldx $f2		                ldx stringInputBufferAddress+0
12946	.f9db	a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
12947	.f9dd	60		rts		                rts

12949	.f9de					callFILEV:
12950	.f9de	6c 12 02	jmp ($0212)	                jmp (FILEV)

12952						;-------------------------------------------------------------------------
12953						;
12954						; Parse file name. Handle (and skip) any -FS- tempfs syntax, selecting
12955						; the FS specified if required.
12956						;
12957						; entry:
12958						;
12959						; Y (MSB)/X (LSB) = address of file name string
12960						;
12961						; exit:
12962						;
12963						; Y (MSB)/X (LSB) = address of file name part
12964						;
12965						; - New FS may have been selected
12966						;
12967	.f9e1					parseFileNameAndSelectFS:
12968	.f9e1	48		pha		                pha
12969	.f9e2	a5 f2		lda $f2		                lda stringInputBufferAddress+0
12970	.f9e4	48		pha		                pha
12971	.f9e5	a5 f3		lda $f3		                lda stringInputBufferAddress+1
12972	.f9e7	48		pha		                pha
12973	.f9e8	20 47 ee	jsr $ee47	                jsr selectHAZEL
12974	.f9eb	86 f2		stx $f2		                stx stringInputBufferAddress+0
12975	.f9ed	84 f3		sty $f3		                sty stringInputBufferAddress+1
12976	.f9ef	a0 00		ldy #$00	                ldy #$00
12977	.f9f1	20 19 fa	jsr $fa19	                jsr parseFileNameFS      ;find -FS- prefix, if any
12978	.f9f4	5a		phy		                phy                      ;save offset
12979	.f9f5	20 c0 fa	jsr $fac0	                jsr selectFS                 ;select desired FS
12980	.f9f8	68		pla		                pla
12981	.f9f9	18		clc		                clc
12982	.f9fa	65 f2		adc $f2		                adc stringInputBufferAddress+0
12983	.f9fc	aa		tax		                tax                          ;save string address LSB
12984	.f9fd	a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
12985	.f9ff	90 01		bcc $fa02	                bcc +
12986	.fa01	c8		iny		                iny
12987	.fa02					+
12988	.fa02	68		pla		                pla
12989	.fa03	85 f3		sta $f3		                sta stringInputBufferAddress+1
12990	.fa05	68		pla		                pla
12991	.fa06	85 f2		sta $f2		                sta stringInputBufferAddress+0
12992	.fa08	68		pla		                pla
12993	.fa09	60		rts		                rts

12995						;-------------------------------------------------------------------------
12996						;
12997						; Select appropriate FS for the given file handle.
12998						;
12999						; entry:
13000						;
13001						; Y = file handle
13002						;
13003						; exit:
13004						;
13005						; - appropriate FS selected
13006						;
13007						; preserves: Y/X/A

13009	.fa0a					selectFSForHandle:
13010	.fa0a	da		phx		                phx
13011	.fa0b	48		pha		                pha
13012	.fa0c	20 47 ee	jsr $ee47	                jsr selectHAZEL
13013	.fa0f	20 96 fa	jsr $fa96	                jsr findFSForHandle
13014	.fa12	8a		txa		                txa
13015	.fa13	20 c0 fa	jsr $fac0	                jsr selectFS
13016	.fa16	68		pla		                pla
13017	.fa17	fa		plx		                plx
13018	.fa18	60		rts		                rts

13020						;-------------------------------------------------------------------------
13021						;
13022						; Parse the FS part of a file name, if any, and return the filing
13023						; system to use.
13024						;
13025						; Entry:
13026						;
13027						; (stringInputBufferAddress),y = the string
13028						;
13029						; Exit:
13030						;
13031						; A = FS number to use
13032						;
13033						; (stringInputBufferAddress),y = next char after any tempfs prefix has
13034						; been consumed
13035	.fa19					parseFileNameFS: .proc

13037	.fa19	4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
13038	.fa1c	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput
13039	.fa1f	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
13040	.fa21	c9 2d		cmp #$2d	                cmp #'-'
13041	.fa23	f0 0c		beq $fa31	                beq parseFSNamePrefix ; branch taken if tempfs syntax
13042	.fa25	2c c6 df	bit $dfc6	                bit hazel.tempFSFlag
13043	.fa28	ad 00 df	lda $df00	                lda hazel.currentFS
13044	.fa2b	50 03		bvc $fa30	                bvc +
13045	.fa2d	ad 01 df	lda $df01	                lda hazel.activeFS
13046	.fa30					+
13047	.fa30	60		rts		                rts

13049	.fa31					parseFSNamePrefix:
13050	.fa31	c8		iny		                iny
13051	.fa32	a2 00		ldx #$00	                ldx #$00
13052	.fa34					LFAC1:
13053	.fa34	bd 06 df	lda $df06,x	                lda hazel.fsInfoBlocks,x ;get FS name char
13054	.fa37	f0 44		beq $fa7d	                beq badFilingSystemName
13055	.fa39	8a		txa		                txa                      ;A=offset in info blocks
13056	.fa3a	18		clc		                clc
13057	.fa3b	69 08		adc #$08	                adc #size(fsInfoBlock.name)
13058	.fa3d	85 b0		sta $b0		                sta parseFileNameFSWorkspace.fsInfoOffset
13059	.fa3f	5a		phy		                phy
13060	.fa40					compareFSNameLoop:
13061	.fa40	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y

13063						; validate FS name char. Must be letter or digit.

13065	.fa42	20 9c eb	jsr $eb9c	                jsr isLetter
13066	.fa45	90 08		bcc $fa4f	                bcc validFSNameChar           ;branch taken if letter
13067	.fa47	c9 30		cmp #$30	                cmp #'0'
13068	.fa49	90 1b		bcc $fa66	                bcc notValidFSNameChar       ;branch taken if not digit
13069	.fa4b	c9 3a		cmp #$3a	                cmp #'9'+1
13070	.fa4d	b0 17		bcs $fa66	                bcs notValidFSNameChar       ;branch taken if not digit
13071	.fa4f					validFSNameChar:
13072	.fa4f	e4 b0		cpx $b0		                cpx parseFileNameFSWorkspace.fsInfoOffset
13073	.fa51	b0 0b		bcs $fa5e	                bcs nextFSInfoBlock ;branch taken if end of FS
13074						                                         ;info block name was reached
13075	.fa53	5d 06 df	eor $df06,x	                eor hazel.fsInfoBlocks,x
13076	.fa56	29 df		and #$df	                and #$DF                 ;Z=1 if char matches FS name
13077	.fa58	d0 04		bne $fa5e	                bne nextFSInfoBlock      ;branch taken if not a match
13078	.fa5a	e8		inx		                inx                      ;next fs info block byte
13079	.fa5b	c8		iny		                iny                      ;next input string byte
13080	.fa5c	80 e2		bra $fa40	                bra compareFSNameLoop

13082	.fa5e					nextFSInfoBlock:
13083	.fa5e	7a		ply		                ply
13084	.fa5f	a6 b0		ldx $b0		                ldx parseFileNameFSWorkspace.fsInfoOffset ;offset of end of name
13085	.fa61	e8		inx		                inx
13086	.fa62	e8		inx		                inx
13087	.fa63	e8		inx		                inx             ;advance to next entry
13088	.fa64	80 ce		bra $fa34	                bra LFAC1

13090	.fa66					notValidFSNameChar:

13092						; Matching FS name must be terminated with -. Otherwise, it's bad
13093						; syntax, or perhaps an overly long name.

13095	.fa66	c9 2d		cmp #$2d	                cmp #'-'
13096	.fa68	d0 13		bne $fa7d	                bne badFilingSystemName
13097	.fa6a	c8		iny		                iny                       ;consume input '-'
13098	.fa6b	e4 b0		cpx $b0		                cpx parseFileNameFSWorkspace.fsInfoOffset
13099	.fa6d	f0 07		beq $fa76	                beq foundFSInfoBlock     ;branch taken if a match due
13100						                                         ;to being right at end of the
13101						                                         ;FS info block name
13102	.fa6f	bd 06 df	lda $df06,x	                lda hazel.fsInfoBlocks,x ;
13103	.fa72	c9 20		cmp #$20	                cmp #' '
13104	.fa74	d0 e8		bne $fa5e	                bne nextFSInfoBlock      ;branch taken if not a match
13105						                                         ;as tthe supplied name was a
13106						                                         ;prefix of this FS's name
13107	.fa76					foundFSInfoBlock:
13108	.fa76	68		pla		                pla
13109	.fa77	a6 b0		ldx $b0		                ldx parseFileNameFSWorkspace.fsInfoOffset
13110	.fa79	bd 08 df	lda $df08,x	                lda hazel.fsInfoBlocks+(fsInfoBlock.fsNumber-(fsInfoBlock.name+size(fsInfoBlock.name))),x
13111	.fa7c	60		rts		                rts

13113	.fa7d					badFilingSystemName:
13114	.fa7d	00		brk #		                brk
13115	>fa7e	f8 42 61 64 20 66 69 6c		                .text $f8,'Bad filing system name',0
	>fa86	69 6e 67 20 73 79 73 74 65 6d 20 6e 61 6d 65 00
13116						                .pend

13118						;-------------------------------------------------------------------------
13119						;
13120						; Find FS for the given handle
13121						;
13122						; entry:
13123						;
13124						; Y = file handle
13125						;
13126						; exit:
13127						;
13128						; X = FS number - will just use current FS if none suitable found
13129						;
13130	.fa96					findFSForHandle: .proc
13131	.fa96	48		pha		                pha                          ;
13132	.fa97	5a		phy		                phy                          ;
13133	.fa98	98		tya		                tya                          ;A = handle to search for
13134	.fa99	a0 00		ldy #$00	                ldy #$00                     ;
13135	.fa9b					loop:
13136	.fa9b	be 06 df	ldx $df06,y	                ldx hazel.fsInfoBlocks.name+0,y
13137	.fa9e	f0 15		beq $fab5	                beq notFound                  ;taken if terminating entry
13138	.faa0	d9 0e df	cmp $df0e,y	                cmp hazel.fsInfoBlocks.minHandle,y
13139	.faa3	90 07		bcc $faac	                bcc next                     ;taken if not this FS
13140	.faa5	d9 0f df	cmp $df0f,y	                cmp hazel.fsInfoBlocks.maxHandle,y
13141	.faa8	90 10		bcc $faba	                bcc found                    ;taken if this FS
13142	.faaa	f0 0e		beq $faba	                beq found                    ;taken if this FS

13144	.faac					next:
13145	.faac	48		pha		                pha
13146	.faad	98		tya		                tya
13147	.faae	18		clc		                clc
13148	.faaf	69 0b		adc #$0b	                adc #size(fsInfoBlock)
13149	.fab1	a8		tay		                tay
13150	.fab2	68		pla		                pla
13151	.fab3	80 e6		bra $fa9b	                bra loop

13153	.fab5					notFound:
13154	.fab5	ae 00 df	ldx $df00	                ldx hazel.currentFS
13155	.fab8	80 03		bra $fabd	                bra done

13157	.faba					found:
13158	.faba	be 10 df	ldx $df10,y	                ldx hazel.fsInfoBlocks.fsNumber,y
13159	.fabd					done:
13160	.fabd	7a		ply		                ply
13161	.fabe	68		pla		                pla
13162	.fabf	60		rts		                rts
13163						                .endproc

13165						;-------------------------------------------------------------------------
13166						;
13167						; Select filing system in A.
13168						;
13169						; Entry:
13170						;
13171						; A = FS number
13172						;
13173	.fac0					selectFS:                               ;fb4d
13174	.fac0	cd 01 df	cmp $df01	                cmp hazel.activeFS      ; Check active fs
13175	.fac3	f0 16		beq $fadb	                beq rtsFB68               ; Already active fs, return
13176	.fac5	5a		phy		                phy
13177	.fac6	da		phx		                phx
13178	.fac7	a8		tay		                tay
13179	.fac8	3a		dec a		                dec a
13180	.fac9	d0 07		bne $fad2	                bne LFB5F       ;taken if not FS 1 (tape)

13182						; ??? - only if trying to select tape FS

13184	.facb	a9 04		lda #$04	                lda #$04
13185	.facd	24 e2		bit $e2		                bit $E2
13186	.facf	d0 01		bne $fad2	                bne LFB5F
13187	.fad1	c8		iny		                iny
13188	.fad2					LFB5F:
13189	.fad2	5a		phy		                phy
13190	.fad3	a2 12		ldx #$12	                ldx #romServiceCallInitialiseFilingSystem
13191	.fad5	20 ff ee	jsr $eeff	                jsr makeROMServiceCall
13192	.fad8	68		pla		                pla
13193	.fad9	fa		plx		                plx
13194	.fada	7a		ply		                ply
13195	.fadb					rtsFB68:
13196	.fadb	60		rts		                rts

13198						;-------------------------------------------------------------------------
13199						;
13200						; FileSwitch FSC
13201						; ==============
13202						;
13203	.fadc					fileswitchFSCEntryPoint:
13204	.fadc	48		pha		                pha                          ;save request type
13205	.fadd	20 47 ee	jsr $ee47	                jsr selectHAZEL
13206	.fae0	4e c6 df	lsr $dfc6	                lsr hazel.tempFSFlag
13207	.fae3	68		pla		                pla                          ;restore request type
13208	.fae4	48		pha		                pha                          ;save request type
13209	.fae5	da		phx		                phx                          ;save request X
13210	.fae6	0a		asl a		                asl a
13211	.fae7	aa		tax		                tax
13212	.fae8	c9 17		cmp #$17	                cmp #11*2+1
13213	.faea	b0 03		bcs $faef	                bcs fileswitchPassFSCToCurrentFS ;taken if out of range
13214	.faec	7c f4 fa	jmp ($faf4,x)	                jmp (fileswitchFSCRoutinesTable,x)

13216						;-------------------------------------------------------------------------
13217						;
13218						; Pass to filing system's FSC
13219						;
13220						; There's 2 entry points - fileswitchPassFSCToCurrentFS, for
13221						; when X and A are both on the stack, and
13222						; fileswitchPassFSCToCurrentFS_X, for when only A is on the
13223						; stack.
13224						;
13225	.faef					fileswitchPassFSCToCurrentFS:
13226	.faef					fileswitchFSCNewFS:
13227	.faef					fileswitchFSCFileHandleRange:
13228	.faef					fileswitchFSCStarCommand:
13229	.faef	fa		plx		                plx                          ;restore request X
13230	.faf0					fileswitchPassFSCToCurrentFS_X:
13231	.faf0	68		pla		                pla                          ;restore request type
13232	.faf1	6c da df	jmp ($dfda)	                jmp (hazel.activeFSCV) ;call active FS's real FSCV entry point

13234						;-------------------------------------------------------------------------
13235						;
13236						; FileSwitch FSC table
13237						;
13238	.faf4					fileswitchFSCRoutinesTable:
13239	>faf4	19 fb				                .word fileswitchFSCOPT
13240	>faf6	12 fb				                .word fileswitchFSCCheckEOF
13241	>faf8	26 fb				                .word fileswitchFSCStarSlash
13242	>fafa	0c fb				                .word fileswitchFSCUnknownCommand
13243	>fafc	26 fb				                .word fileswitchFSCStarRUN
13244	>fafe	2b fb				                .word fileswitchFSCStarCAT
13245	>fb00	ef fa				                .word fileswitchFSCNewFS
13246	>fb02	ef fa				                .word fileswitchFSCFileHandleRange
13247	>fb04	ef fa				                .word fileswitchFSCStarCommand
13248	>fb06	2b fb				                .word fileswitchFSCStarEX
13249	>fb08	2b fb				                .word fileswitchFSCStarINFO
13250	>fb0a	5b fb				                .word fileswitchFSCRUNLibrary

13252						;-------------------------------------------------------------------------
13253						;
13254						; FSC 3 - *command [AUG p344]
13255						;
13256	.fb0c					fileswitchFSCUnknownCommand:
13257	.fb0c	fa		plx		                plx
13258	.fb0d	20 34 fb	jsr $fb34	                jsr getCommandLinePointer
13259	.fb10	80 de		bra $faf0	                bra fileswitchPassFSCToCurrentFS_X

13261						;-------------------------------------------------------------------------
13262						;
13263						; FSC 1 - check EOF [AUG p343]
13264						;
13265	.fb12					fileswitchFSCCheckEOF:
13266	.fb12	7a		ply		                ply                         ;Y = file handle
13267	.fb13	5a		phy		                phy                         ;restore stack arrangement
13268	.fb14	20 0a fa	jsr $fa0a	                jsr selectFSForHandle
13269	.fb17	80 d6		bra $faef	                bra fileswitchPassFSCToCurrentFS

13271						;-------------------------------------------------------------------------
13272						;
13273						; FSC 0 - *OPT [AUG p343]
13274						;
13275	.fb19					fileswitchFSCOPT:
13276	.fb19	2c c6 df	bit $dfc6	                bit hazel.tempFSFlag   ; Check temporary fs flag
13277	.fb1c	70 d1		bvs $faef	                bvs fileswitchPassFSCToCurrentFS
13278	.fb1e	ad 00 df	lda $df00	                lda hazel.currentFS ; Get current filing system number

13280						;-------------------------------------------------------------------------
13281						;
13282						; Pass FSCV request through to a particular FS.
13283						;
13284						; entry:
13285						;
13286						; A = FS to select
13287						;
13288						; Y = FSCV Y
13289						;
13290						; S = [FSCV X; FSCV A]
13291						;
13292	.fb21					fileswitchPassFSCToSpecificFS:
13293	.fb21	20 c0 fa	jsr $fac0	                jsr selectFS        ; Select filing system
13294	.fb24	80 c9		bra $faef	                bra fileswitchPassFSCToCurrentFS

13296						;-------------------------------------------------------------------------
13297						;
13298						; FSC 2 - */filename [AUG p343]
13299						; FSC 4 - *RUN filename [AUG p344]
13300						;
13301	.fb26					fileswitchFSCStarSlash:
13302	.fb26					fileswitchFSCStarRUN:
13303	.fb26	fa		plx		                plx
13304	.fb27	20 34 fb	jsr $fb34	                jsr getCommandLinePointer ; Skip '*'s and spaces, set command line address
13305	.fb2a	da		phx		                phx             ; Continue on to pass to filing system

13308						;-------------------------------------------------------------------------
13309						;
13310						; FSC 5 - *CAT [AUG p344]
13311						; FSC 9 - *EX [NAUG p257]
13312						; FSC, 10 - *INFO [NAUG p257]
13313						;
13314	.fb2b					fileswitchFSCStarCAT:
13315	.fb2b					fileswitchFSCStarEX:
13316	.fb2b					fileswitchFSCStarINFO:
13317	.fb2b	fa		plx		                plx
13318	.fb2c	0e c6 df	asl $dfc6	                asl hazel.tempFSFlag
13319	.fb2f	20 e1 f9	jsr $f9e1	                jsr parseFileNameAndSelectFS
13320	.fb32	80 bc		bra $faf0	                bra fileswitchPassFSCToCurrentFS_X

13322						;-------------------------------------------------------------------------
13323						;
13324						; Get command line pointer.
13325						;
13326						; Entry:
13327						;
13328						; X/Y - pointer to CR-terminated command line string
13329						;
13330						; Exit:
13331						;
13332						; X/Y, (hazel.commandLinePointer) - pointer to first non-space char in
13333						; command line string
13334	.fb34					getCommandLinePointer: .proc ;fbc1
13335	.fb34	86 f2		stx $f2		                stx stringInputBufferAddress+0
13336	.fb36	84 f3		sty $f3		                sty stringInputBufferAddress+1

13338						; skip spaces. Stop if terminating CR encountered.

13340	.fb38	a0 ff		ldy #$ff	                ldy #$FF
13341	.fb3a					-
13342	.fb3a	c8		iny		                iny
13343	.fb3b	b1 f2		lda ($f2),y	                lda (stringInputBufferAddress),y
13344	.fb3d	c9 0d		cmp #$0d	                cmp #$0D
13345	.fb3f	f0 04		beq $fb45	                beq +
13346	.fb41	c9 20		cmp #$20	                cmp #' '
13347	.fb43	d0 f5		bne $fb3a	                bne -

13349	.fb45					+

13351						; Hmm. Didn't we just do this bit already?

13353	.fb45	20 be f3	jsr $f3be	                jsr skipSpacesAndCheckForCRInStringInput

13355						; Store address of first non-space char in the HAZEL command line
13356						; pointer.

13358	.fb48	98		tya		                tya
13359	.fb49	18		clc		                clc
13360	.fb4a	65 f2		adc $f2		                adc stringInputBufferAddress+0
13361	.fb4c	8d 04 df	sta $df04	                sta hazel.commandLinePointer+0
13362	.fb4f	a5 f3		lda $f3		                lda stringInputBufferAddress+1
13363	.fb51	69 00		adc #$00	                adc #$00
13364	.fb53	8d 05 df	sta $df05	                sta hazel.commandLinePointer+1
13365	.fb56	a4 f3		ldy $f3		                ldy stringInputBufferAddress+1
13366	.fb58	a6 f2		ldx $f2		                ldx stringInputBufferAddress+0
13367	.fb5a	60		rts		                rts
13368						                .pend

13370						;-------------------------------------------------------------------------
13371						;
13372						; FSC 11 - RUN from libfs [NAUG p257]
13373						;
13374	.fb5b					fileswitchFSCRUNLibrary:
13375	.fb5b	ad 02 df	lda $df02	                lda hazel.libFS      ; Is a libfs set?
13376	.fb5e	10 c1		bpl $fb21	                bpl fileswitchPassFSCToSpecificFS
13377	.fb60					badCommandError:
13378	.fb60	00		brk #		                brk
13379	>fb61	fe				                .byte 254
13380	>fb62	42 61 64 20 63 6f 6d 6d		                .text "Bad command"
	>fb6a	61 6e 64
13381	.fb6d	00		brk #		                brk

13383						;-------------------------------------------------------------------------

13393						;-------------------------------------------------------------------------
13394						;
13395						; Tube 6502 language ROM relocation
13396						;

13664						;-------------------------------------------------------------------------

13666	.fb6e					mosUnusedBegin:
13667	>fb6e	ff ff ff ff ff ff ff ff		                .fill $fc00-*,$ff
	>fb76	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb86	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fb96	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fba6	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbb6	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbc6	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbd6	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbe6	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff
	>fbf6	ff ff ff ff ff ff ff ff ff ff
13668	=146					mosUnusedSize=*-mosUnusedBegin

13701						;-------------------------------------------------------------------------
13702						;
13703						; Credits - normally hidden by the I/O region.
13704						;

13713	>fc00	28 43 29 20 31 39 38 36		                .text "(C) 1986 Acorn Computers Ltd."
	>fc08	20 41 63 6f 72 6e 20 43 6f 6d 70 75 74 65 72 73
	>fc18	20 4c 74 64 2e
13715	>fc1d	54 68 61 6e 6b 73 20 61		                .text "Thanks are due to the following contributors to this Computer (among many others):- "
	>fc25	72 65 20 64 75 65 20 74 6f 20 74 68 65 20 66 6f
	>fc35	6c 6c 6f 77 69 6e 67 20 63 6f 6e 74 72 69 62 75
	>fc45	74 6f 72 73 20 74 6f 20 74 68 69 73 20 43 6f 6d
	>fc55	70 75 74 65 72 20 28 61 6d 6f 6e 67 20 6d 61 6e
	>fc65	79 20 6f 74 68 65 72 73 29 3a 2d 20
13717	>fc71	44 61 76 69 64 20 41 6c		                .text "David Allen,"
	>fc79	6c 65 6e 2c
13721	>fc7d	44 61 76 69 64 20 42 65		                .text "David Bell,"
	>fc85	6c 6c 2c
13722	>fc88	50 61 75 6c 20 42 6f 6e		                .text "Paul Bond,"
	>fc90	64 2c
13726	>fc92	4a 75 6c 69 61 6e 20 42		                .text "Julian Brown,"
	>fc9a	72 6f 77 6e 2c
13727	>fc9f	54 75 64 6f 72 20 42 72		                .text "Tudor Brown,"
	>fca7	6f 77 6e 2c
13729	>fcab	54 69 6d 20 43 61 73 70		                .text "Tim Caspell,"
	>fcb3	65 6c 6c 2c
13731	>fcb7	42 72 69 61 6e 20 43 6f		                .text "Brian Cockburn,"
	>fcbf	63 6b 62 75 72 6e 2c
13733	>fcc6	42 61 72 62 61 72 61 20		                .text "Barbara Cole,"
	>fcce	43 6f 6c 65 2c
13738	>fcd3	4d 61 72 6b 20 43 6f 6c		                .text "Mark Colton,"
	>fcdb	74 6f 6e 2c
13739	>fcdf	43 68 72 69 73 20 43 75		                .text "Chris Curry,"
	>fce7	72 72 79 2c
13741	>fceb	4a 69 6d 20 44 61 79 2c		                .text "Jim Day,"
13742	>fcf3	54 69 6d 20 44 6f 62 73		                .text "Tim Dobson,"
	>fcfb	6f 6e 2c
13744	>fcfe	4a 6f 65 20 44 75 6e 6e		                .text "Joe Dunn,"
	>fd06	2c
13752	>fd07	50 61 75 6c 20 46 65 6c		                .text "Paul Fellows,"
	>fd0f	6c 6f 77 73 2c
13753	>fd14	41 6c 61 6e 20 46 6f 75		                .text "Alan Fournier,"
	>fd1c	72 6e 69 65 72 2c
13755	>fd22	53 74 65 76 65 20 46 75		                .text "Steve Furber,"
	>fd2a	72 62 65 72 2c
13756	>fd2f	4d 61 72 74 79 6e 20 47		                .text "Martyn Gilbert,"
	>fd37	69 6c 62 65 72 74 2c
13757	>fd3e	4a 6f 68 6e 20 48 61 72		                .text "John Harrison,"
	>fd46	72 69 73 6f 6e 2c
13758	>fd4c	48 65 72 6d 61 6e 6e 20		                .text "Hermann Hauser,"
	>fd54	48 61 75 73 65 72 2c
13760	>fd5b	4d 69 6b 65 20 48 69 6c		                .text "Mike Hill,"
	>fd63	6c 2c
13763	>fd65	50 61 75 6c 20 48 6f 6c		                .text "Paul Holding,"
	>fd6d	64 69 6e 67 2c
13765	>fd72	4a 6f 68 6e 20 48 6f 72		                .text "John Horton,"
	>fd7a	74 6f 6e 2c
13770	>fd7e	44 61 76 65 20 49 72 65		                .text "Dave Ireland,"
	>fd86	6c 61 6e 64 2c
13775	>fd8b	52 69 63 68 61 72 64 20		                .text "Richard King,"
	>fd93	4b 69 6e 67 2c
13776	>fd98	44 61 76 69 64 20 4b 69		                .text "David Kitson,"
	>fda0	74 73 6f 6e 2c
13778	>fda5	41 6e 64 79 20 4b 6e 69		                .text "Andy Knight,"
	>fdad	67 68 74 2c
13780	>fdb1	4a 75 6c 69 61 6e 20 4c		                .text "Julian Lomberg,"
	>fdb9	6f 6d 62 65 72 67 2c
13781	>fdc0	52 6f 62 20 4d 61 63 6d		                .text "Rob Macmillan,"
	>fdc8	69 6c 6c 61 6e 2c
13783	>fdce	54 6f 6d 20 4d 63 4e 61		                .text "Tom McNamara,"
	>fdd6	6d 61 72 61 2c
13785	>fddb	52 69 63 68 61 72 64 20		                .text "Richard Manby,"
	>fde3	4d 61 6e 62 79 2c
13797	>fde9	44 61 76 69 64 20 4d 6f		                .text "David Morgan,"
	>fdf1	72 67 61 6e 2c
13798	>fdf6	52 69 63 68 61 72 64 20		                .text "Richard Murphy,"
	>fdfe	4d 75 72 70 68 79 2c
13800	>fe05	47 6c 65 6e 20 4e 69 63		                .text "Glen Nicholls,"
	>fe0d	68 6f 6c 6c 73 2c
13801	>fe13	52 6f 62 65 72 74 20 4e		                .text "Robert Nokes,"
	>fe1b	6f 6b 65 73 2c
13803	>fe20	4a 65 61 6e 20 4e 75 6e		                .text "Jean Nunn,"
	>fe28	6e 2c
13805	>fe2a	52 69 63 68 61 72 64 20		                .text "Richard Page,"
	>fe32	50 61 67 65 2c
13812	>fe37	4a 6f 68 6e 20 52 61 64		                .text "John Radcliffe,"
	>fe3f	63 6c 69 66 66 65 2c
13813	>fe46	52 69 63 6b 20 52 61 6e		                .text "Rick Rand,"
	>fe4e	64 2c
13815	>fe50	4e 69 63 6b 20 52 65 65		                .text "Nick Reeves,"
	>fe58	76 65 73 2c
13817	>fe5c	42 72 69 61 6e 20 52 6f		                .text "Brian Robertson,"
	>fe64	62 65 72 74 73 6f 6e 2c
13819	>fe6c	50 61 75 6c 20 52 6f 73		                .text "Paul Rose,"
	>fe74	65 2c
13821	>fe76	52 69 63 68 61 72 64 20		                .text "Richard Russell,"
	>fe7e	52 75 73 73 65 6c 6c 2c
13827	>fe86	52 6f 62 65 72 74 20 53		                .text "Robert Sack,"
	>fe8e	61 63 6b 2c
13828	>fe92	52 6f 67 65 72 20 53 61		                .text "Roger Sale,"
	>fe9a	6c 65 2c
13830	>fe9d	44 61 76 69 64 20 53 65		                .text "David Seal,"
	>fea5	61 6c 2c
13832	>fea8	50 68 69 6c 20 53 6d 69		                .text "Phil Smith,"
	>feb0	74 68 2c
13833	>feb3	54 6f 6e 79 20 53 75 6d		                .text "Tony Sumner,"
	>febb	6e 65 72 2c
13836	>febf	50 61 75 6c 20 53 77 69		                .text "Paul Swindell,"
	>fec7	6e 64 65 6c 6c 2c
13838	>fecd	4a 6f 6e 20 54 68 61 63		                .text "Jon Thackray,"
	>fed5	6b 72 61 79 2c
13840	>feda	54 6f 6e 79 20 54 68 6f		                .text "Tony Thompson,"
	>fee2	6d 70 73 6f 6e 2c
13842	>fee8	48 75 67 6f 20 54 79 73		                .text "Hugo Tyson,"
	>fef0	6f 6e 2c
13857	>fef3	52 6f 67 65 72 20 57 69		                .text "Roger Wilson."
	>fefb	6c 73 6f 6e 2e

13869						;-------------------------------------------------------------------------

13873						;-------------------------------------------------------------------------

13875	.ff00					E_USERV: ; ff00
13876	.ff00	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13877	.ff03					E_BRKV: ; ff03
13878	.ff03	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13879	.ff06					E_IRQ1V: ; ff06
13880	.ff06	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13881	.ff09					E_IRQ2V: ; ff09
13882	.ff09	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13883	.ff0c					E_CLIV: ; ff0c
13884	.ff0c	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13885	.ff0f					E_BYTEV: ; ff0f
13886	.ff0f	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13887	.ff12					E_WORDV: ; ff12
13888	.ff12	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13889	.ff15					E_WRCHV: ; ff15
13890	.ff15	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13891	.ff18					E_RDCHV: ; ff18
13892	.ff18	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13893	.ff1b					E_FILEV: ; ff1b
13894	.ff1b	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13895	.ff1e					E_ARGSV: ; ff1e
13896	.ff1e	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13897	.ff21					E_BGETV: ; ff21
13898	.ff21	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13899	.ff24					E_BPUTV: ; ff24
13900	.ff24	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13901	.ff27					E_GBPBV: ; ff27
13902	.ff27	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13903	.ff2a					E_FINDV: ; ff2a
13904	.ff2a	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13905	.ff2d					E_FSCV: ; ff2d
13906	.ff2d	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13907	.ff30					E_EVENTV: ; ff30
13908	.ff30	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13909	.ff33					E_UPTV: ; ff33
13910	.ff33	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13911	.ff36					E_NETV: ; ff36
13912	.ff36	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13913	.ff39					E_VDUV: ; ff39
13914	.ff39	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13915	.ff3c					E_KEYV: ; ff3c
13916	.ff3c	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13917	.ff3f					E_INSV: ; ff3f
13918	.ff3f	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13919	.ff42					E_REMV: ; ff42
13920	.ff42	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13921	.ff45					E_CNPV: ; ff45
13922	.ff45	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13923	.ff48					E_IND1V: ; ff48
13924	.ff48	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13925	.ff4b					E_IND2V: ; ff4b
13926	.ff4b	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint
13927	.ff4e					E_IND3V: ; ff4e
13928	.ff4e	20 51 ff	jsr $ff51	                jsr extendedVectorEntryPoint

13930						;-------------------------------------------------------------------------

13932	.ff51					extendedVectorEntryPoint:
13933						                ; .if CFA3000
13934						                ; ;...
13935						                ; .else
13936						                ; $10b,x = rL
13937	.ff51	48		pha		                pha                 ; $10a,x  (old ROMSEL)
13938	.ff52	48		pha		                pha                 ; $109,x  (old ACCCON)
13939	.ff53	48		pha		                pha                 ; $108,x  (thunk rH)
13940	.ff54	48		pha		                pha                 ; $107,x  (thunk rL)
13941	.ff55	48		pha		                pha                 ; $106,x  (jump dest MSB)
13942	.ff56	48		pha		                pha                 ; $105,x  (jump dest LSB)
13943	.ff57	08		php		                php                 ; $104,x  (P for RTI)
13944	.ff58	48		pha		                pha                 ; $103,x  (old A)
13945	.ff59	da		phx		                phx                 ; $102,x  (old X)
13946	.ff5a	5a		phy		                phy                 ; $101,x  (old Y)
13947	.ff5b	ba		tsx		                tsx
13948	.ff5c	a9 ff		lda #$ff	                lda #>extendedVectorReturnThunk-1
13949	.ff5e	9d 08 01	sta $0108,x	                sta $0108,x
13950	.ff61	a9 8c		lda #$8c	                lda #<extendedVectorReturnThunk-1
13951	.ff63	9d 07 01	sta $0107,x	                sta $0107,x

13953						                ; this routine is only ever called from $ff00, $ff03,
13954						                ; $ff06, etc. - so rL holds vectorIndex*3+2, suitable
13955						                ; for indexing into the extended vector space.
13956	.ff66	bc 0b 01	ldy $010b,x	                ldy $010B,x                  ;Y=vectorIndex*3+2
13957	.ff69	b9 9d 0d	lda $0d9d,y	                lda extendedVectorSpace-2,y  ;get vector LSB
13958	.ff6c	9d 05 01	sta $0105,x	                sta $0105,x                  ;
13959	.ff6f	b9 9e 0d	lda $0d9e,y	                lda extendedVectorSpace-1,y  ;get vector MSB
13960	.ff72	9d 06 01	sta $0106,x	                sta $0106,x
13961	.ff75	a5 f4		lda $f4		                lda $F4
13962	.ff77	9d 0a 01	sta $010a,x	                sta $010A,x
13963	.ff7a	ad 34 fe	lda $fe34	                lda ACCCON
13964	.ff7d	9d 09 01	sta $0109,x	                sta $0109,x

13966						                ; New stack layout:
13967						                ;
13968						                ; $10a,x - old ROMSEL
13969						                ; $109,x - old ACCCON
13970						                ; $108,x - thunk rH
13971						                ; $107,x - thunk rL
13972						                ; $106,x - jump dest MSB
13973						                ; $105,x - jump dest LSB
13974						                ; $104,x - P (for RTI)
13975						                ; $103,x - old A
13976						                ; $102,x - old X
13977						                ; $101,x - old Y

13979	.ff80	20 47 ee	jsr $ee47	                jsr selectHAZEL
13980	.ff83	b9 9f 0d	lda $0d9f,y	                lda extendedVectorSpace,y    ;get vector ROM number
13981	.ff86	20 ab e5	jsr $e5ab	                jsr selectROMA
13982	.ff89	7a		ply		                ply
13983	.ff8a	fa		plx		                plx
13984	.ff8b	68		pla		                pla
13985	.ff8c	40		rti		                rti
13986						;                .endif

13988						;-------------------------------------------------------------------------

13990	.ff8d					extendedVectorReturnThunk:
13991	.ff8d	08		php		                php
13992	.ff8e	48		pha		                pha
13993	.ff8f	da		phx		                phx
13994	.ff90	ba		tsx		                tsx
13995	.ff91	bd 02 01	lda $0102,x	                lda $0102,x
13996	.ff94	9d 06 01	sta $0106,x	                sta $0106,x
13997	.ff97	bd 03 01	lda $0103,x	                lda $0103,x
13998	.ff9a	9d 07 01	sta $0107,x	                sta $0107,x
13999	.ff9d	fa		plx		                plx
14000	.ff9e	68		pla		                pla
14001	.ff9f	68		pla		                pla
14002	.ffa0	68		pla		                pla
14003	.ffa1	20 3d ee	jsr $ee3d	                jsr selectMOSOrHAZEL
14004	.ffa4	68		pla		                pla
14005	.ffa5	20 ab e5	jsr $e5ab	                jsr selectROMA
14006	.ffa8	68		pla		                pla
14007	.ffa9	28		plp		                plp
14008	.ffaa					rtsFFAA:
14009	.ffaa	60		rts		                rts

14011						;-------------------------------------------------------------------------
14012						;
14013						; OSBYTE 150 (&96) Read from SHEILA (&FE00 - &FEFF) [MasRef D.2-45]
14014						;
14015	.ffab					osbyte96:
14016	.ffab	bc 00 fe	ldy $fe00,x	                ldy $fe00,x
14017	.ffae	60		rts		                rts

14019						;-------------------------------------------------------------------------
14020						;
14021						; OSBYTE 157 (&9D) Write byte across Tube [MasRef D.2-48]
14022						;
14023	.ffaf					osbyte9D:
14024	.ffaf	8a		txa		                txa
14025	.ffb0	80 22		bra $ffd4	                bra OSBPUT

14027	.ffb2	00		brk #		                brk

14029						;-------------------------------------------------------------------------
14030	.ffb3					OSWRSC:
14031	.ffb3	4c df f4	jmp $f4df	                jmp oswrscEntryPoint ; FFB3
14032	>ffb6	36				                .byte defaultVectorTable.end-defaultVectorTable ;
14033	>ffb7	f9 e2				                .word defaultVectorTable ;
14034	.ffb9					OSRDSC:
14035	.ffb9	4c d9 f4	jmp $f4d9	                jmp osrdscEntryPoint ; FFB9
14036	.ffbc					VDUCHR:
14037	.ffbc	4c c9 f4	jmp $f4c9	                jmp vduChrEntryPoint ; FFBC
14038	.ffbf					OSEVEN:
14039	.ffbf	4c 53 eb	jmp $eb53	                jmp eventEntryPoint ; FFBF
14040	.ffc2					GSINIT:
14041	.ffc2	4c 2d f3	jmp $f32d	                jmp gsinitEntryPoint ; FFC2
14042	.ffc5					GSREAD:
14043	.ffc5	4c 3e f3	jmp $f33e	                jmp gsreadEntryPoint ; FFC5
14044	.ffc8					NVRDCH:
14045	.ffc8	4c ec e8	jmp $e8ec	                jmp osrdchEntryPoint                    ; FFC8
14046	.ffcb					NVWRCH:
14047	.ffcb	4c 4d e9	jmp $e94d	                jmp oswrchEntryPoint                    ; FFCB
14048	.ffce					OSFIND:
14049	.ffce	4c 8e f9	jmp $f98e	                jmp osfindEntryPoint                    ; FFCE
14050	.ffd1					OSGBPB:
14051	.ffd1	4c 31 f9	jmp $f931	                jmp osgbpbEntryPoint                    ; FFD1
14052	.ffd4					OSBPUT:
14053	.ffd4	4c 25 f9	jmp $f925	                jmp osbputEntryPoint                    ; FFD4
14054	.ffd7					OSBGET:
14055	.ffd7	4c 2b f9	jmp $f92b	                jmp osbgetEntryPoint                    ; FFD7
14056	.ffda					OSARGS:
14057	.ffda	4c 5a f9	jmp $f95a	                jmp osargsEntryPoint ; FFDA
14058	.ffdd					OSFILE:
14059	.ffdd	4c 9d f9	jmp $f99d	                jmp osfileEntryPoint ; FFDD
14060	.ffe0					OSRDCH:
14061	.ffe0	6c 10 02	jmp ($0210)	                jmp (RDCHV)                  ; FFE0
14062	.ffe3					OSASCI:
14063	.ffe3	c9 0d		cmp #$0d	                cmp #$0D                     ; FFE3
14064	.ffe5	d0 07		bne $ffee	                bne OSWRCH                   ; FFE5
14065	.ffe7					OSNEWL:
14066	.ffe7	a9 0a		lda #$0a	                lda #$0A                     ; FFE7
14067	.ffe9	20 ee ff	jsr $ffee	                jsr OSWRCH                   ; FFE9
14068	.ffec	a9 0d		lda #$0d	                lda #$0D                     ; FFEC
14069	.ffee					OSWRCH:
14070	.ffee	6c 0e 02	jmp ($020e)	                jmp (WRCHV)                  ; FFEE
14071	.fff1					OSWORD:
14072	.fff1	6c 0c 02	jmp ($020c)	                jmp (WORDV)                  ; FFF1
14073	.fff4					OSBYTE:
14074	.fff4	6c 0a 02	jmp ($020a)	                jmp (BYTEV)                  ; FFF4
14075	.fff7					OSCLI:
14076	.fff7	6c 08 02	jmp ($0208)	                jmp (CLIV)                  ; FFF7

14078	.fffa					LFFFA:                                       ; FFFA NMIV
14079	>fffa	00 0d				                .word nmiEntryPoint
14080	.fffc					LFFFC:                                       ; FFFB RESETV
14081	>fffc	86 e3				                .word resetEntryPoint
14082	.fffe					LFFFE:                                       ; FFFE IRQV
14083	>fffe	b7 e5				                .word irqEntryPoint

:1	;******  Return to file: mosautocue.s65

28						                .endsection

;******  End of listing