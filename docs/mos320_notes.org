#+STARTUP: overview
* OSBYTEs

** By number

OSBYTE 0 (&00) Display MOS version [MasRef D.2-18]
OSBYTE 1 (&01) Write user flag [MasRef D.2-18]
OSBYTE 2 (&02) Specify input stream [MasRef D.2-18]
OSBYTE 3 (&03) Specify output stream [MasRef D.2-19]
OSBYTE 4 (&04) Enable/disable cursor editing [MasRef D.2-19]
OSBYTE 5 (&05) Write printer driver type [MasRef D.2-20]
OSBYTE 6 (&06) Write printer ignore character [MasRef D.2-21]
OSBYTE 7 (&07) Write RS423 receive rate [MasRef D.2-21]
OSBYTE 8 (&08) Write RS423 transmit rate [MasRef D.2-22]
OSBYTE 9 (&09) Write duration of first colour [MasRef D.2-22]
OSBYTE 10 (&0A) Write duration of second colour [MasRef D.2-22]
OSBYTE 11 (&0B) Write keyboard auto-repeat delay [MasRef D.2-22]
OSBYTE 12 (&0C) Write keyboard auto-repeat rate [MasRef D.2-23]
OSBYTE 13 (&0D) Disable event [MasRef D.2-23]
OSBYTE 14 (&0E) Enable event [MasRef D.2-24]
OSBYTE 15 (&0F) Flush buffer [MasRef D.2-24]
OSBYTE 16 (&10) Write number of ADC channels [MasRef D.2-25]
OSBYTE 17 (&11) Write next ADC channel to be sampled [MasRef D.2-25]
OSBYTE 18 (&12) Reset soft keys [MasRef D.2-26]
OSBYTE 19 (&13) Wait for vertical sync [MasRef D.2-26]
OSBYTE 20 (&14) Restore default font definitions [MasRef D.2-26]
OSBYTE 21 (&15) Flush selected buffer [MasRef D.2-27]
OSBYTE 22 (&16) Increment ROM polling semaphore[MasRef D.2-27]
OSBYTE 23 (&17) Decrement ROM polling semaphore[MasRef D.2-27]
OSBYTE 24 (&18) is reserved. [MasRef D.2-28]
OSBYTE 25 (&19) Restore a group of font definitions [MasRef D.2-28]
OSBYTE 26 (&1A) – 67 (&43) are currently unused. [MasRef D.2-28]
OSBYTE 68 (&44) Test RAM presence [MasRef D.2-28]
OSBYTE 69 (&45) Test pseudo/absolute use of bank [MasRef D.2-29]
OSBYTE 70 (&45) – 106 (&6A) are currently unused. [MasRef D.2-29]
OSBYTE 107 (&6B) Write 1MHz bus selection status [MasRef D.2-29]
OSBYTE 108 (&6C) Write usage of main/shadow memory [MasRef D.2-30]
OSBYTE 109 (&6D) Make temporary Filing System permanent [MasRef D.2-30]
OSBYTE 110 (&6E) is currently unused. [MasRef D.2-31]
OSBYTE 111 (&6F) is currently unused. [MasRef D.2-31]
OSBYTE 114 (&72) Write usage of shadow memory [MasRef D.2-32]
OSBYTE 115 (&73) is currently unused. [MasRef D.2-32]
OSBYTE 116 (&74) is currently unused. [MasRef D.2-32]
OSBYTE 117 (&75) Read VDU status [MasRef D.2-32]
OSBYTE 118 (&76) Reflect keyboard status in keyboard [MasRef D.2-33]
OSBYTE 119 (&77) Close all *SPOOL/*SPOOLON or [MasRef D.2-33]
OSBYTE 120 (&78) Write keys pressed information [MasRef D.2-33]
OSBYTE 121 (&79) Keyboard scan [MasRef D.2-35]
OSBYTE 122 (&7A) Keyboard scan from 16 decimal [MasRef D.2-36]
OSBYTE 123 (&7B) Inform MOS of printer driver going dormant [MasRef D.2-36]
OSBYTE 124 (&7C) Clear escape condition [MasRef D.2-36]
OSBYTE 125 (&7D) Set escape condition [MasRef D.2-36]
OSBYTE 126 (&7E) Acknowledge escape condition [MasRef D.2-37]
OSBYTE 127 (&7F) Check for end of file on an opened file [MasRef D.2-37]
OSBYTE 128 (&80) Read ADC channel or get buffer status [MasRef D.2-37]
OSBYTE 129 (&81) Read key with time limit [MasRef D.2-38]
OSBYTE 130 (&82) Read machine high order address [MasRef D.2-40]
OSBYTE 131 (&83) Read Operating System High Water Mark (OSHWM) [MasRef D.2-40]
OSBYTE 132 (&84) Read top of user RAM [MasRef D.2-40]
OSBYTE 133 (&85) Read top of user RAM for given mode [MasRef D.2-41]
OSBYTE 134 (&86) Read text cursor position [MasRef D.2-41]
OSBYTE 135 (&87) Read screen mode and character at [MasRef D.2-42]
OSBYTE 136 (&88) Execute user code [MasRef D.2-42]
OSBYTE 137 (&89) Switch cassette motor relay [MasRef D.2-42]
OSBYTE 138 (&8A) Insert character code into buffer [MasRef D.2-43]
OSBYTE 139 (&8B) Write Filing System options [MasRef D.2-43]
OSBYTE 140 (&8C) Select Cassette Filing System [MasRef D.2-43]
OSBYTE 141 (&8D) Select ROM Filing System [MasRef D.2-43]
OSBYTE 142 (&8E) Enter language ROM [MasRef D.2-44]
OSBYTE 143 (&8F) Issue paged ROM service request [MasRef D.2-44]
OSBYTE 144 (&90) Set vertical screen shift and interlace [MasRef D.2-44]
OSBYTE 145 (&91) Get character from buffer [MasRef D.2-45]
OSBYTE 146 (&92) Read from FRED (&FC00 – &FCFF) [MasRef D.2-45]
OSBYTE 147 (&93) Write to FRED (&FC00 – &FCFF) [MasRef D.2-45]
OSBYTE 148 (&94) Read from JIM (&FD00 – &FDFF) [MasRef D.2-45]
OSBYTE 149 (&95) Write to JIM (&FD00 – &FDFF) [MasRef D.2-45]
OSBYTE 150 (&96) Read from SHEILA (&FE00 – &FEFF) [MasRef D.2-45]
OSBYTE 151 (&97) Write to SHEILA (&FE00 – &FEFF) [MasRef D.2-45]
OSBYTE 152 (&98) Examine buffer status [MasRef D.2-45]
OSBYTE 153 (&99) Insert character code into buffer [MasRef D.2-46]
OSBYTE 154 (&9A) Write video ULA control register [MasRef D.2-46]
OSBYTE 155 (&9B) Write to video ULA palette register and [MasRef D.2-47]
OSBYTE 156 (&9C) Read/write serial ACIA control [MasRef D.2-47]
OSBYTE 157 (&9D) Write byte across Tube [MasRef D.2-48]
OSBYTE 158 (&9E) reserved for the speech system. [MasRef D.2-49]
OSBYTE 159 (&9F) reserved for the speech system. [MasRef D.2-49]
OSBYTE 160 (&A0) Read VDU variable value [MasRef D.2-49]
OSBYTE 161 (&A1) Read CMOS RAM [MasRef D.2-49]
OSBYTE 162 (&A2) Write CMOS RAM [MasRef D.2-49]
OSBYTE 163 (&A3) is reserved for applications software. [MasRef D.2-50]
OSBYTE 164 (&A4) Check processor type [MasRef D.2-50]
OSBYTE 165 (&A5) Read output cursor position [MasRef D.2-50]
OSBYTE 166 (&A6) Read start address of MOS variables [MasRef D.2-50]
OSBYTE 167 (&A7) Read start address of MOS variablespointer table  [MasRef D.2-50]
OSBYTE 168 (&A8) Read address of ROM pointer table [MasRef D.2-51]
OSBYTE 169 (&A9) Read address of ROM pointer table [MasRef D.2-51]
OSBYTE 170 (&AA) Read address of ROM information table [MasRef D.2-51]
OSBYTE 171 (&AB) Read address of ROM information table [MasRef D.2-51]
OSBYTE 172 (&AC) Read address of keyboard translation table [MasRef D.2-52]
OSBYTE 173 (&AD) Read address of keyboard translation table [MasRef D.2-52]
OSBYTE 174 (&AE) Read address of VDU variables origin [MasRef D.2-52]
OSBYTE 175 (&AF) Read address of VDU variables origin [MasRef D.2-52]
OSBYTE 176 (&B0) Read/Write CFS timeout counter [MasRef D.2-52]
OSBYTE 177 (&B1) Read/write input source [MasRef D.2-53]
OSBYTE 178 (&B2) Read/write keyboard semaphore [MasRef D.2-53]
OSBYTE 179 (&B3) Read/write ROM polling semaphore [MasRef D.2-54]
OSBYTE 180 (&B4) Read/write Operating System High [MasRef D.2-54]
OSBYTE 181 (&B5) Read/write RS243 input interpretation [MasRef D.2-54]
OSBYTE 182 (&B6) Read NOIGNORE state [MasRef D.2-55]
OSBYTE 183 (&B7) Read/write cassette/ROM filing system [MasRef D.2-55]
OSBYTE 184 (&B8) Read OS copy of video ULA control [MasRef D.2-56]
OSBYTE 185 (&B9) Read OS copy of video ULA palette [MasRef D.2-56]
OSBYTE 186 (&BA) Read ROM number active at last BRK [MasRef D.2-56]
OSBYTE 187 (&BB) Read ROM number of socket [MasRef D.2-57]
OSBYTE 188 (&BC) Read current ADC channel number [MasRef D.2-57]
OSBYTE 189 (&BD) Read maximum ADC channel number [MasRef D.2-57]
OSBYTE 190 (&BE) Read/write ADC conversion type [MasRef D.2-58]
OSBYTE 191 (&BF) Read/write RS423 busy flag [MasRef D.2-58]
OSBYTE 192 (&C0) Read serial ACIA control register [MasRef D.2-58]
OSBYTE 193 (&C1) Read/write flash counter [MasRef D.2-59]
OSBYTE 194 (&C2) Read/write duration of first colour [MasRef D.2-59]
OSBYTE 195 (&C3) Read/write duration of second colour [MasRef D.2-60]
OSBYTE 196 (&C4) Read/write keyboard auto-repeat delay [MasRef D.2-60]
OSBYTE 197 (&C5) Read/write keyboard auto-repeat rate [MasRef D.2-60]
OSBYTE 198 (&C6) Read/write *EXEC file handle [MasRef D.2-61]
OSBYTE 199 (&C7) Read/write *SPOOL file handle [MasRef D.2-62]
OSBYTE 200 (&C8) Read/write BREAK and ESCAPE effect [MasRef D.2-62]
OSBYTE 201 (&C9) Read/write keyboard status [MasRef D.2-63]
OSBYTE 202 (&CA) Read/write keyboard status byte [MasRef D.2-63]
OSBYTE 203 (&CB) Read/write RS423 input buffer [MasRef D.2-64]
OSBYTE 204 (&CC) Read/write RS423 ignore flag [MasRef D.2-65]
OSBYTE 205 (&CD) Read/write RS423 destination [MasRef D.2-65]
OSBYTE 206 (&CE) Read/write Econet OS call interception [MasRef D.2-66]
OSBYTE 207 (&CF) Read/write Econet input interpretation [MasRef D.2-66]
OSBYTE 208 (&D0) Read write Econet output [MasRef D.2-67]
OSBYTE 209 (&D1) is reserved for the speech system [MasRef D.2-67]
OSBYTE 210 (&D2) Read/write sound suppression status [MasRef D.2-67]
OSBYTE 211 (&D3) Read/write BELL channel [MasRef D.2-67]
OSBYTE 212 (&D4) Read/write BELL sound information [MasRef D.2-68]
OSBYTE 213 (&D5) Read/write BELL frequency [MasRef D.2-69]
OSBYTE 214 (&D6) Read/write BELL duration [MasRef D.2-69]
OSBYTE 215 (&D7) Read/write startup message [MasRef D.2-69]
OSBYTE 216 (&D8) Read/write length of soft key string [MasRef D.2-70]
OSBYTE 217 (&D9) Read/write paged mode line count [MasRef D.2-71]
OSBYTE 218 (&DA) Read/write bytes in VDU queue [MasRef D.2-71]
OSBYTE 219 (&DB) Read/write TAB key code [MasRef D.2-72]
OSBYTE 220 (&DC) Read/write ESCAPE character [MasRef D.2-72]
OSBYTE 221 (&DD) Read/write interpretation of input values 192-207 [MasRef D.2-73]
OSBYTE 222 (&DE) Read/write interpretation of input values 208-223 [MasRef D.2-73]
OSBYTE 223 (&DF) Read/write interpretation of input values 224-239 [MasRef D.2-73]
OSBYTE 224 (&E0) Read/write interpretation of input values 240-255 [MasRef D.2-73]
OSBYTE 225 (&E1) Read/write soft key interpretation [MasRef D.2-74]
OSBYTE 226 (&E2) Read/write SHIFT+soft key interpretation [MasRef D.2-74]
OSBYTE 227 (&E3) Read/write CTRL+soft key interpretation [MasRef D.2-74]
OSBYTE 228 (&E4) Read/write SHIFT+CTRL+soft key interpretation [MasRef D.2-74]
OSBYTE 229 (&E5) Read/write ESCAPE key status [MasRef D.2-75]
OSBYTE 230 (&E6) Read/write ESCAPE effects [MasRef D.2-75]
OSBYTE 231 (&E7) Read/write IRQ bit mask for user 6522 [MasRef D.2-76]
OSBYTE 232 (&E8) Read/write IRQ bit mask for 6850 [MasRef D.2-76]
OSBYTE 233 (&E9) Read write IRQ bit mask for system [MasRef D.2-76]
OSBYTE 234 (&EA) Read flag indicating Tube presence [MasRef D.2-76]
OSBYTE 235 (&EB) is reserved for the speech system. [MasRef D.2-77]
OSBYTE 236 (&EC) Read/write character destination status [MasRef D.2-77]
OSBYTE 237 (&ED) Read/write cursor editing status [MasRef D.2-77]
OSBYTE 238 (&EE) Read/write numeric keypad [MasRef D.2-78]
OSBYTE 239 (&EF) Read/write *SHADOW state [MasRef D.2-78]
OSBYTE 240 (&F0) Read country flag [MasRef D.2-79]
OSBYTE 241 (&F1) Read/write user flag [MasRef D.2-79]
OSBYTE 242 (&F2) Read copy of serial processor ULA [MasRef D.2-80]
OSBYTE 243 (&F3) Read timer switch state [MasRef D.2-80]
OSBYTE 244 (&F4) Read/write soft key consistency flag [MasRef D.2-81]
OSBYTE 245 (&F5) Read printer driver type [MasRef D.2-81[
OSBYTE 246 (&F6) Read/write printer ignore character [MasRef D.2-81]
OSBYTE 247 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
OSBYTE 248 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
OSBYTE 249 (&F7) Read/write BREAK intercept vector [MasRef D.2-82]
OSBYTE 250 (&FA) Read memory written by VDU driver [MasRef D.2-82]
OSBYTE 251 (&FB) Read memory displayed [MasRef D.2-83]
OSBYTE 252 (&FC) Read/write current language ROM number [MasRef D.2-83]
OSBYTE 253 (&FD) Read last BREAK type [MasRef D.2-83]
OSBYTE 254 (&FE) Set effect of SHIFT on numeric keypad [MasRef D.2-84]
OSBYTE 255 (&FF) Read/write startup options [MasRef D.2-84]

* MOS routine addresses
** Star commands

| Command   | 320   | 350   | 400   | 500   | 510   | 511   | PC128S |
|-----------+-------+-------+-------+-------+-------+-------+--------|
|           | $f1e5 | $f150 | $efd4 | $f293 | $f293 | $f29c | $f298  |
| ADFS      | $85af | $8379 | -     | $85c2 | $85ff | $85ff | $860a  |
| APPEND    | $9014 | $8fea | $92a8 | $91e1 | $921e | $921e | $9232  |
| BASIC     | $85a6 | $8371 | $85bb | $85b8 | $85f5 | $85f5 | $8600  |
| BUILD     | $900f | $8fe5 | $92a3 | $91dc | $9219 | $9219 | $922d  |
| CAT       | $f1e5 | $f150 | $efd4 | $f293 | $f293 | $f29c | $f298  |
| CLOSE     | $937c | $9404 | $9610 | $9558 | $967f | $967f | $9693  |
| CODE      | $93eb | $9385 | $967f | $95c7 | $9600 | $9600 | $9614  |
| CONFIGURE | $887a | $8623 | $8c1e | $8856 | $8893 | $8893 | $88a7  |
| CREATE    | $9318 | $92b6 | $95ac | $94f4 | $9531 | $9531 | $9545  |
| DELETE    | $946a | $941a | $96fe | $9646 | $9695 | $9695 | $96a9  |
| DUMP      | $8f42 | $8f18 | $91d6 | $910f | $914c | $914c | $9160  |
| EX        | $f1e5 | $f150 | $efd4 | $f293 | $f293 | $f29c | $f298  |
| EXEC      | $a591 | $a5ab | $ac49 | $a98d | $a9fd | $aa00 | $aa15  |
| FX        | $93e5 | $937f | $9679 | $95c1 | $95fa | $95fa | $960e  |
| GO        | $92f5 | $9293 | $9589 | $94d1 | $950e | $950e | $9522  |
| GOIO      | $92fd | $929b | $9591 | $94d9 | $9516 | $9516 | $952a  |
| HELP      | $85ca | $8394 | $85df | $85dd | $861a | $861a | $8625  |
| IGNORE    | $9387 | $940f | $961b | $9563 | $968a | $968a | $969e  |
| INFO      | $f1e5 | $f150 | $efd4 | $f293 | $f293 | $f29c | $f298  |
| INSERT    | $871f | $84ff | $8742 | $874a | $8787 | $8787 | $8792  |
| KEY       | $94c7 | $97c5 | $975b | $96a3 | $9713 | $9713 | $9727  |
| LIBFS     | $e7f6 | $e7c2 | $e70c | $e926 | $e926 | $e927 | $e929  |
| LINE      | $ec39 | $eb81 | $eacc | $ecd7 | $ecd7 | $ecdf | $ecda  |
| LIST      | $8ec0 | $8e96 | $9154 | $908d | $90ca | $90ca | $90de  |
| LOAD      | $9316 | $92b4 | $95aa | $94f2 | $952f | $952f | $9543  |
| MOTOR     | $93eb | $9385 | -     | $ffaa | $ffaa | $ffaa | $ffaa  |
| motor     | -     | -     | $967f | -     | -     | -     | -      |
| MOVE      | $90b6 | $9097 | $934a | $928e | $92cb | $92cb | $92df  |
| OPT       | $93eb | $9385 | $967f | $95c7 | $9600 | $9600 | $9614  |
| PRINT     | $8eb9 | $8e8f | $914d | $9086 | $90c3 | $90c3 | $90d7  |
| REMOVE    | $9371 | $930f | $9605 | $954d | $958a | $958a | $959e  |
| ROM       | $93eb | $9385 | $967f | $95c7 | $9600 | $9600 | $9614  |
| ROMS      | $86a6 | $846e | $86bb | $86b9 | $86f6 | $86f6 | $8701  |
| RUN       | $f1e5 | $f150 | $efd4 | $f293 | $f293 | $f29c | $f298  |
| SAVE      | $9318 | $92b6 | $95ac | $94f4 | $9531 | $9531 | $9545  |
| SHADOW    | $9466 | $93bd | $96fa | $9642 | $9638 | $9638 | $964c  |
| SHOW      | $9488 | $9765 | $971c | $9664 | $969e | $969e | $96b2  |
| SHUT      | $f373 | $f305 | $f162 | $f43f | $f43f | $f451 | $f4aa  |
| SPOOL     | $9433 | $93d1 | $96c7 | $960f | $964c | $964c | $9660  |
| SPOOLON   | $9420 | $93ba | $96b4 | $95fc | $9635 | $9635 | $9649  |
| SRDATA    | -     | $8a83 | $8849 | $8cad | $8cea | $8cea | $8cfe  |
| SRLOAD    | -     | $8bd1 | $8977 | $8dca | $8e07 | $8e07 | $8e1b  |
| SRREAD    | -     | $8b55 | $8901 | $8d7f | $8dbc | $8dbc | $8dd0  |
| SRROM     | -     | $8a83 | $8849 | $8cad | $8cea | $8cea | $8cfe  |
| SRSAVE    | -     | $8bd1 | $8977 | $8dca | $8e07 | $8e07 | $8e1b  |
| SRWRITE   | -     | $8b55 | $8901 | $8d7f | $8dbc | $8dbc | $8dd0  |
| STATUS    | $8895 | $8623 | $8c35 | $8856 | $8893 | $8893 | $88a7  |
| TAPE      | $93eb | $9385 | -     | $ffaa | $ffaa | $ffaa | $ffaa  |
| tape      | -     | -     | $967f | -     | -     | -     | -      |
| TIME      | $8744 | $8524 | $8767 | $876f | $87ac | $87ac | $87b7  |
| TV        | $93eb | $9385 | $967f | $95c7 | $9600 | $9600 | $9614  |
| TYPE      | $8ecb | $8ea1 | $915f | $9098 | $90d5 | $90d5 | $90e9  |
| UNPLUG    | $8722 | $8502 | $8745 | $874d | $878a | $878a | $8795  |
| X         | $e7fd | $e7c9 | $e713 | -     | -     | -     | -      |

** Vectors

| Vector | 320   | 350   | 400   | 500   | 510   | 511   | PC128S |
|--------+-------+-------+-------+-------+-------+-------+--------|
| reset  | $64e3 | $74e3 | $74e3 | $86e3 | $86e3 | $87e3 | $89e3  |
| irq    | $9ee5 | $68e5 | $abe5 | $b7e5 | $b7e5 | $b8e5 | $bae5  |

* Non-Acorn systems

** `CFA3000` - Henson CFA3000

https://stardot.org.uk/forums/viewtopic.php?t=20676

Related to MOS 3.50?

BASIC is identical.

DFS 2.45 has some differences, but only in the MOS code. Presumably
things moving about slightly. Hopefully.

** `autocue` - Autocue 1500 Teleprompter

https://stardot.org.uk/forums/viewtopic.php?t=7179

Related to MOS 5.11? BASIC and ADFS are identical to the 5.11
versions, and utils ROM is very similar. MOS code diverges noticeably
from 5.10 earlier than from 5.11, but the code size is closer to 5.11.

** `329` - FinMOS 3.29

https://stardot.org.uk/forums/viewtopic.php?t=18510

Related to MOS 3.50?

| ROM       | 3.29  | 3.50  | Notes                                     |
|-----------+-------+-------+-------------------------------------------|
| ViewSheet | B1.01 | B1.01 | Identical                                 |
| View      | $07   | $07   | Differences start at $bbc03               |
| BASIC     | 4r31  | 4r32  | Identical apart from version number       |
| ADFS      | 202   | 203   | Similar apart from *HELP text             |
| DFS       | 2.44  | 2.45  | Similar barring a few bytes in the middle |
| EDIT      | 1r47  | 1.50r | Lots of differences!                      |
| UTILS     |       |       | Looks largely the same                    |
| MOS       |       |       | Some differences, but looks related       |

The ext part of DFS looks very similar.

This does have the reset code behind the I/O area.

* Status/Configure output

** ~*STATUS~ (MOS 3.50)

#+begin_example
  Configuration status:
  Baud     1
  Data     0
  Delay    55
  Fdrive   0
  File     9
  Floppy
  Ignore   0
  Internal Tube
  Lang     12
  Loud
  Mode     7
  No Boot
  No Directory
  Print    0
  Repeat   3
  Scroll
  Tube
  TV       0,1
  View setup 
#+end_example

** ~*CONFIGURE~ (MOS 3.50)

#+begin_example
  Configuration options:
  Baud     <D>
  Boot
  Caps
  Data     <D>
  Delay    <D>
  Directory
  External Tube
  Fdrive   <D>
  File     <D>
  Floppy
  Hard
  Ignore   [<D>]
  Internal Tube
  Lang     <D>
  Loud
  Mode     <D>
  No Boot
  No Caps
  No Directory
  No Scroll
  No Tube
  Print    <D>
  Quiet
  Repeat   <D>
  Scroll
  Shift Caps
  Tube
  TV       [<D>[,<D>]]
  View setup [F],[J],[I]
  Where:
  D is a decimal number, or
  a hexadecimal number preceded by &
  Items within [ ] are optional
#+end_example

* Unknown *CONFIGURE service call code

A = $28
X = ROM
Y = ($f2),y offset for command line tail

Set A=0 if handled. If unhandled, =Bad Command= is emitted.

* Unknown *STATUS service call code

A = $29
X = ROM
Y = ($f2),y offset for command line tail

* OSWRCH throughput 

** MOS 3.50D + Tube

*** Initial results (b2, MOS 3.50D, Tube):

| Mode | Main (TIME) | Main (cps) | Shadow (TIME) | Shadow (cps) |
|------+-------------+------------+---------------+--------------|
|    0 |         422 |       2369 |           422 |         2369 |
|    3 |         424 |       2358 |           424 |         2352 |
|    4 |         436 |       2293 |           436 |         2293 |
|    6 |         438 |       2283 |           438 |         2283 |
|    7 |         294 |       3389 |           295 |         3401 |

*** Plus early out for VDU output only:

| Mode | Main (TIME) | Main (cps) | Shadow (TIME) | Shadow (cps) |
|------+-------------+------------+---------------+--------------|
|    0 |         408 |       2450 |           408 |         2450 |
|    3 |         410 |       2439 |           410 |         2439 |
|    4 |         421 |       2375 |           421 |         2375 |
|    6 |         423 |       2364 |           423 |         2364 |
|    7 |         280 |       3571 |           280 |         3571 |

~5% faster in Mode 7. ~3.5% faster in other modes.

*** Plus inline MOS ROM paging

| Mode | Main (TIME) | Main (cps) | Shadow (TIME) | Shadow (cps) |
|------+-------------+------------+---------------+--------------|
|    0 |         401 |       2493 |               |              |
|    3 |         404 |       2475 |               |              |
|    4 |         415 |       2409 |               |              |
|    6 |         417 |       2398 |               |              |
|    7 |         274 |       3649 |           273 |         3663 |

*** Plus removal of pointless code at LC0B3

| Mode | Main (TIME) | Main (cps) | Shadow (TIME) | Shadow (cps) |
|------+-------------+------------+---------------+--------------|
|    0 |         401 |       2493 |               |              |
|    3 |         404 |       2475 |               |              |
|    4 |         415 |       2409 |               |              |
|    6 |         417 |       2398 |               |              |
|    7 |         273 |       3663 |           274 |         3649 |

Non-Tube figures basically identical.

| Mode | Main (TIME) | Main (cps) | Shadow (TIME) | Shadow (cps) |
|------+-------------+------------+---------------+--------------|
|    0 |         402 |       2487 |           403 |         2481 |
|    3 |         405 |       2469 |           405 |         2469 |
|    4 |         417 |       2398 |           416 |         2403 |
|    6 |         418 |       2392 |           418 |         2392 |
|    7 |         275 |       3636 |           275 |         3636 |

** MOS 3.20D

*** Initial results (b2, MOS 3.20D, no Tube)

| Mode | Main (TIME) | Main (cps) | Shadow (TIME) | Shadow (cps) |
|------+-------------+------------+---------------+--------------|
|    0 |         417 |       2398 |               |              |
|    1 |         648 |       1543 |               |              |
|    2 |        1240 |        806 |               |              |
|    3 |         419 |       2386 |               |              |
|    4 |         430 |       2325 |               |              |
|    5 |         672 |       1488 |               |              |
|    6 |         432 |       2314 |               |              |
|    7 |         289 |       3460 |               |              |

*** fasterOSWRCH (early out + inlen paging + no pointless code)

| Mode | Main (TIME) | Main (cps) | Shadow (TIME) | Shadow (cps) |
|------+-------------+------------+---------------+--------------|
|    0 |         402 |       2487 |               |              |
|    3 |         405 |       2469 |               |              |
|    4 |         416 |       2403 |               |              |
|    6 |         417 |       2398 |               |              |
|    7 |         274 |       3649 |           275 | 3636         |

*** Tighter ACCCON restore, PLA:PHA>TAX -> PLX:PHX

| Mode | Main (TIME) | Main (cps) | Shadow (TIME) | Shadow (cps) |
|------+-------------+------------+---------------+--------------|
|    0 |         400 |       2500 |               |              |
|    3 |         403 |       2481 |               |              |
|    4 |         414 |       2415 |               |              |
|    6 |         416 |       2403 |               |              |
|    7 |         273 |       3663 |               |              |

*** Various micro-optimisations

(Stopped tracking the shadow times separately as they don't diverge
much.)

MOS 3.20D (7fe3869da2b906912e0188e0ef5790cdc1214c63)

| Mode | Main (TIME) | Main (cps) | cps x |
|------+-------------+------------+-------|
|    0 |         374 |       2673 | 1.114 |
|    1 |         607 |       1647 | 1.067 |
|    2 |        1200 |        833 | 1.033 |
|    3 |         377 |       2652 | 1.111 |
|    4 |         388 |       2577 | 1.108 |
|    5 |         630 |       1587 | 1.067 |
|    6 |         389 |       2570 | 1.111 |
|    7 |         246 |       4065 | 1.175 |


** 7fe3869da2b906912e0188e0ef5790cdc1214c63
*** MOS 3.50 vs MOS 3.50D (b2)

| Mode | old TIME | old cps | new TIME | new cps | cps x |
|------+----------+---------+----------+---------+-------|
|    0 |      423 |    2364 |      374 |    2673 | 1.131 |
|    1 |      706 |    1416 |      658 |    1519 | 1.073 |
|    2 |     1247 |     801 |     1199 |     834 | 1.041 |
|    3 |      426 |    2347 |      377 |    2652 | 1.130 |
|    4 |      437 |    2288 |      389 |    2570 | 1.126 |
|    5 |      729 |    1371 |      681 |    1468 | 1.071 |
|    6 |      438 |    2283 |      390 |    2564 | 1.123 |
|    7 |      296 |    3378 |      246 |    4065 | 1.203 |

*** MOS 3.50 vs MOS 3.50D (real hardware)

| Mode | 3.50 TIME | 3.50 cps | 3.50D TIME | 3.50D cps | cps x |
|------+-----------+----------+------------+-----------+-------|
|    0 |       425 |     2352 |        377 |      2652 | 1.128 |
|    1 |       709 |     1410 |        661 |      1512 | 1.072 |
|    2 |      1254 |      797 |       1207 |       828 | 1.039 |
|    3 |       428 |     2336 |        379 |      2638 | 1.129 |
|    4 |       439 |     2277 |        391 |      2557 | 1.123 |
|    5 |       733 |     1364 |        684 |      1461 | 1.071 |
|    6 |       441 |     2267 |        392 |      2551 | 1.125 |
|    7 |       298 |     3355 |        247 |      4048 | 1.207 |





**  More stuff

Inline the LSRs for 2 bpp text writing = further useful improvements.

*** Inline testVD5State everywhere

| Mode | TIME |  cps |
|------+------+------|
|    0 |  374 | 2673 |
|    1 |  606 | 1640 |
|    2 | 1199 |  834 |
|    3 |  376 | 2659 |
|    4 |  388 | 2577 |
|    5 |  630 | 1587 |
|    6 |  389 | 2570 |
|    7 |  244 | 4098 |

*** Inline ASCII->SAA5050, tighten setCRTCAddress

| Mode | TIME |  cps |
|------+------+------|
|    0 |  370 | 2702 |
|    1 |  602 | 1661 |
|    2 | 1194 |  837 |
|    3 |  373 | 2680 |
|    4 |  385 | 2597 |
|    5 |  625 | 1600 |
|    6 |  386 | 2590 |
|    7 |  235 | 4255 |

*** Fix *SPOOL :(, tighten Mode 7 CRTC address caclulations

| Mode | TIME |  cps |
|------+------+------|
|    0 |  374 | 2674 |
|    1 |  606 | 1650 |
|    2 | 1198 |  834 |
|    3 |  377 | 2652 |
|    4 |  388 | 2577 |
|    5 |  628 | 1592 |
|    6 |  389 | 2570 |
|    7 |  237 | 4219 |

*** Inline get4bppScreenByteFor2Pixels

| Mode | TIME |  cps |
|------+------+------|
|    2 |  988 | 1012 |

26 extra bytes of code space... probably worth it, for a +20%!

*** Squeeze out 2 more cycles...

| Mode | TIME |  cps |     x |
|------+------+------+-------|
|    0 |  371 | 2695 | 1.140 |
|    1 |  603 | 1658 | 1.171 |
|    2 |  987 | 1013 | 1.265 |
|    3 |  374 | 2673 | 1.139 |
|    4 |  386 | 2590 | 1.132 |
|    5 |  626 | 1597 | 1.165 |
|    6 |  387 | 2583 | 1.131 |
|    7 |  235 | 4255 | 1.260 |

*** One more unroll can't hurt... right?

| Mode | TIME |  cps |
|------+------+------|
|    0 |  365 | 2739 |
|    1 |  604 | 1655 |
|    2 |  987 | 1013 |
|    3 |  368 | 2717 |
|    4 |  379 | 2638 |
|    5 |  626 | 1597 |
|    6 |  381 | 2624 |
|    7 |  235 | 4255 |

* Refreshed version release process

Make sure =acorn_mos_disassembly= is looking good.

Merge any doc stuff from the under development section of refresh.md
to somewhere in the main document. The version history for released
versions is just a summary.

Merge into relevant submodule in =acorn_mos_refreshed=.

Update =appveyor.yml= in =acorn_mos_refreshed= as required to include
any new assets in the release ZIP.

Commit and push =acorn_mos_refreshed=. Release should follow.

In separate =acorn_mos_disassembly= working copy: (don't do this in
the submodule)

- bump version nmuber in =src/refresh.65=
- update =doc/refresh.md= to promote development version to a release
  and add new development version

Commit and push =acorn_mos_disassembly=.

(Pushes to =acorn_mos_disassembly= will generate new releases, but
whatever... it's just a zip of listing files.)

* Reset stuff

1. resetEntryPoint

2. reset

   MOS 3.50: in I/O region...
   
   Other MOS: in Terminal ROM

   scanROMs: (reset.s65) - scan ROMs

3. softResetPart2

   This is just the suffix of reset in non-3.50

Reset sequence:

1. Clear RAM

2. 

* Prebuilds

** ADFS patches

See https://stardot.org.uk/forums/viewtopic.php?t=29533

6 versions in zip

| Version | System | Interface | Notes                          |
|---------+--------+-----------+--------------------------------|
|     150 |   3.20 | SCSI      | same as orig\320\adfs.1.50.rom |
|     153 |   3.20 | IDE       |                                |
|     203 |   3.50 | SCSI      | same as orig\350\adfs.2.03.rom |
|     205 |   3.50 | IDE       |                                |
|     130 |   B/B+ | SCSI      | irrelevant                     |
|     133 |   B/B+ | IDE       | irrelevant                     |

** Hoglet's BASIC 4r32 patch

See https://github.com/hoglet67/BBCBasic4r32

Old code:

| Addr | Bytes | Code      |
|------+-------+-----------|
| a8cc | 18    | clc       |
| a8cd | 69 0a | adc #$0a  |
| a8cf | 88    | dey       |
| a8d0 | 10 fb | bpl $a8cd |
| a8d2 | 69 f1 | adc #$f1  |

New code:

| Addr | Bytes | Code      |
|------+-------+-----------|
| a8cc | 18    | clc       |
| a8cd | 69 f0 | adc #$f0  |
| a8cf | 69 0a | adc #$0a  |
| a8d1 | 88    | dey       |
| a8d2 | 10 fb | bpl $a8cf |
|      |       |           |

So the original relocation bitmap still applies (hopefully). There's
only 1 potentially relocatable byte in both new and old code, and it's
non-relocatable in both cases.

** DFS 2.45 regions

Stardot thread: https://www.stardot.org.uk/forums/viewtopic.php?t=28366

DFS 2.45 ROM sections:

| Begin | End  | What           | Notes                                          |
|-------+------+----------------+------------------------------------------------|
| 8000  | af00 | DFS 2.45       | sha1: 68f8fe0668d6352b1683bfeae905f864bbc964ae |
| af00  | b800 | MOS 3.50 code  | ignore...                                      |
| b800  | c000 | ADFS 2.03 code | sha1: ca99774e7aedd93c8519534d3cfe922c4960efdc |

MegaROM build tool could detect this by hashes.

* eof
