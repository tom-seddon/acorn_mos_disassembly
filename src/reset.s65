                .if version==350
                jsr selectTerminalROM
                .endif
                .if version!=350
                lda #~ACCCON.D
                trb ACCCON
                .endif
                .if version<500
                stz hazel.hasACCCONChanged
                .endif
                .if version!=350
                trb $0366
                .endif
                cld
                ldx #$FF
                txs              ;reset stack
                stx userVIA.ddra ;port A all outputs
                lda #%11001111
                sta systemVIA.ddrb
                .if version==350
                jsr enableKeyboardScanning
                jsr LFEF5
                .endif
                .if version<500
                ldy #RTC.a.dv32768Hz
                ldx #RTC.a
                jsr terminal.writeRTCByte
                jsr terminal.finishRTCUpdate
                .endif
                .if version!=350
                lda #ACCCON.Y|ACCCON.X       ; page in HAZEL+shadow
                tsb ACCCON
                .if version>=500
                stz hazel.hasACCCONChanged
                jsr L8363
                .elsif version>=400
                jsr L836D
                .endif
                .else
                lda defaultVectorTable+0 ;what is this.
                lda defaultVectorTable+0 ;what is this.
                .endif
                .if version==350
                jsr terminal.ldaSystemVIAIER
                .else
                lda systemVIA.ier
                .endif
                asl a
                pha
                .if version==350
                bne nonPowerOnReset
                jsr terminal.resetCRTC
                ldx #7

LFC34:
                jsr selectROMX
                ldy #$80        ; ''
                sty 1
                stz 0
                tay

LFC3E:
                sta (0),y
                iny
                bne LFC3E
                inc 1
                bit 1
                bvc LFC3E
                dex
                cpx #4
                bcs LFC34
                jsr selectTerminalROM
                tya

startClearRAM:
                tay

LFC53:
                ldx $fc
                tya
                stz 1
                stz 0

LFC5A:
                sta (0),y
                iny
                bne LFC5A
                inc 1
                ldy #$40        ; '@'
                sty $d00
                ldy 1
                cpy #$E0        ; ''
                tay
                bcc LFC5A
                stx $FC
                lda #4
                jsr terminal.trbACCCON
                bne LFC53
                jsr selectTerminalROM
                .else
                .if version<400
                beq startClearRAM       ; branch taken if power on
                lda breakAndESCAPEEffect                    ; read BREAK action flags
                                             ; (set by *FX200)
                lsr a                        ; divide by 2 to get the
                                             ; break action
                dec a                        ; Z=1 if it was 1
                bne nonPowerOnReset          ; branch taken if break
                                             ; action says don't clear
                                             ; RAM
                .else
                bne nonPowerOnReset
                ldx #7
                jsr mos.LF8B4
                .if version==400
                lda #0
                .else
                tya
                .endif
                .endif
startClearRAM:
                tay             ;Y=0
clearRAM:
                tya             ;A=0
                stz $01
                stz $00         ;start at $0000
clearRAMPageLoop:
                sta ($00),y     ;clear RAM
                iny
                bne clearRAMPageLoop
                inc $01
                ldx #$40          ;$40=RTI
                stx nmiEntryPoint ;restore the RTI previously written,
                                  ;as each iteration will potentially
                                  ;overwrite it
                ldx $01
                cpx #$E0        ;hit the end of RAM?
                bcc clearRAMPageLoop ;branch taken if still more to go
                lda #ACCCON.X   ;page out shadow RAM
                trb ACCCON
                bne clearRAM    ;branch taken if shadow RAM bit
                             ;previously set - i.e., that was the
                             ;first iteration, and we need to go back
                             ;to do main RAM
                .if version>=400
                lda $fe28
                lda $fe2b
                .endif
                .endif
nonPowerOnReset:
                .if version>=350
                lda breakAndESCAPEEffect
                lsr a
                dec a
                beq startClearRAM
                .endif
                lda #<mos.emptyCommandLine
                sta hazel.commandLinePointer+0
                lda #>mos.emptyCommandLine
                sta hazel.commandLinePointer+1
                lda #ACCCON.Y|ACCCON.X ; page in MOS ROM, page in main
                                       ; RAM
                .if version==350
                jsr terminal.trbACCCON
                .else
                trb ACCCON
                .endif
                lda #$0F
                sta numericKeypadShiftEffect
                .if version<500&&version!=350
-
                dec a                        
                sta systemVIA.orb
                cmp #$09                     
                bcs -
                .endif
                ldx #key_ctrl
                .if version==350
                jsr setTSTAndInterrogateKeyboard
                .else
                jsr mos.interrogateKeyboard
                .endif
                cpx #$80        ;Z=0 C=1 if CTRL+BREAK
                jsr mos.updateKeyboardLEDs
                stz lastBREAKType            ;softBREAK
                ror a
                ldx #$9c                     ;what is this?
                ldy #$8D                     ;what is this?
                pla
                beq L80AD
                ldy #$7E                     ;what is this?
                bcc L80DF
                ldy #$87                     ;what is this?
                inc lastBREAKType
L80AD:
                inc lastBREAKType
                phy
                .if version==350&&CFA3000
                lda lastBREAKType
                dec a
                bne LFCBF
                jsr LFB2F
LFCBF:
                .endif
                .if version==350
                ldx #terminal.configureTable.mode.metadata-terminal.configureTable
                jsr terminal.setTSTAndReadConfigurationByte
                .elsif version<500
                jsr readDefaultMODE          ; Read configured MODE
                .else
                jsr L9E58
                ldx #configureTable.mode.metadata-configureTable;$56
                jsr readConfigurationByte
                .endif
                ora #CMOSBytes.defaults0.defaultSHADOWMask
                sta startupOptions
                jsr terminal.readDefaults3 ; Read configured BOOT
                and #CMOSBytes.defaults3.autoBootMask
                lsr a         ; Reset OSBYTE 255 boot bit (b3) if BOOT
                trb startupOptions
                .if version==350
                jsr terminal.setTSTAndReadDefaultTVSettings
                .else
                jsr terminal.readDefaultTVSettings
                .endif
                sty tvOffset
                stx tvInterlace
                jsr terminal.readDefaults3
                and #CMOSBytes.defaults3.protectedScrollingMask
                beq L80D4
                lda #VDUVariables.cursorFlags.scrollProtect
L80D4:
                sta vduv.cursorFlags
                jsr terminal.restoreFont32To255
                ply
                ldx #$92
                bra initializePage2Loop
L80DF:
                .if version>=500
                jsr L9E58
                .endif
                lda #$87             ; Clear MODE bits from OSBYTE 255
                trb startupOptions
                lda vduv.currentScreenMODE ; Get current screen MODE b0-b2
                and #$07
                tsb startupOptions           ; Copy to OSBYTE 255
                lda #STATE.isShadowMode ; Test shadow screen bit in VDU flags
                bit STATE                      ; Not shadow screen
                beq initializePage2Loop
                lda #$80                     ; Set shadow screen bit in OSBYTE 255
                tsb startupOptions

initializePage2Loop:
                lda lastBREAKType
                bne clearPage2Byte           ;taken unless soft BREAK

                ; leave the ROM information table alone on a soft
                ; BREAK.
                cpx #<romInformationTable+16
                bcs clearPage2Byte
                cpx #<romInformationTable
                bcs nextPage2Byte
clearPage2Byte:
                stz $0200,x
                cpx #$CD
                bcc nextPage2Byte
                dec $0200,x                  ;initialize later values to $ff
nextPage2Byte:
                inx
                bne initializePage2Loop

                .if version==350
                lda $fc
                .endif
                ldx #$CF
initializeZeroPageLoop:
                stz $00,x                    
                inx                          
                bne initializeZeroPageLoop
                .if version==350
                sta $fc
                jsr selectTerminalROM
                .endif

                lda lastBREAKType
                bne L813D                    ;taken if not soft BREAK

                .if version!=400
                lda noignoreState
                pha
                .endif
                lda basicROMNumber
                pha
                lda oshwm
                pha
                lda spoolFileHandle
                pha
                ldx execFileHandle
                
L8130:
                lda mos.defaultVectorTable-1,y
                sta vectors-1,y       
                dey                   
                cpy #EVENTV+1-vectors 
                bcs L8130             

                ldy #FILEV-vectors
                
L813D:
                lda mos.defaultVectorTable-1,y
                sta vectors-1,y
                dey
                bne L813D

                lda lastBREAKType
                bne L8164
                stx execFileHandle
                pla                          ;restore *SPOOL file handle
                cmp #$04                     ;is it a TAPE or ROM handle?
                bcs L8155                    ;taken if no - keep it

                .if version==350
                tya
                .else
                lda #$00          ;auto-close it if TAPE or ROM handle
                .endif
L8155:
                sta spoolFileHandle
                pla
                sta oshwm
                pla
                sta basicROMNumber
                .if version!=400
                pla
                sta noignoreState
                .endif

L8164:
                .if version==350
                ldx #$19
                jsr terminal.setTSTAndReadRTCByte
                .elsif version<500
                jsr readDefaults1
                .elsif version>=500
                ldx #cmosBytesOffset+CMOSBytes.defaults1
                jsr terminal.readRTCByte
                .endif
                ldx #keyboardStatusByte.shiftLockDisengaged
                asl a
                asl a                        ;N=defaultCapsLockMask
                bmi gotKeyboardStatusByte                    ;taken if defaultCapsLock
                ldx #keyboardStatusByte.shiftLockDisengaged|keyboardStatusByte.capsLockDisengaged
                asl a                        ;N=defaultNoLockMask
                bmi gotKeyboardStatusByte
                ldx #keyboardStatusByte.shiftEnabled|keyboardStatusByte.shiftLockDisengaged
gotKeyboardStatusByte:
                